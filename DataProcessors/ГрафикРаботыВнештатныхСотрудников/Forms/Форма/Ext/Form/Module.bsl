&НаКлиенте
Перем МассивИдентификаторов; //+++АК mika 2018.01.12 ИП-00017263.01

&НаСервереБезКонтекста
Функция ЭтоОтветственныйЗаАутсорс()
	
	Возврат РольДоступна("ОтветственныйЗаРаботуСАутсорсингом");
	
КонецФункции


//////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отктытие из обработки График работы продавцов
	
	Если Параметры.Свойство("ГруппаТорговыхТочек")Тогда
		ГруппаТорговыхТочек = Параметры.ГруппаТорговыхТочек;	
	КонецЕсли;
	
	Если Параметры.Свойство("ВП") Тогда
		Период.Вариант 		= Параметры.ВП.Вариант;	
		Период.ДатаНачала 	= Параметры.ВП.ДатаНачала;	
		Период.ДатаОкончания= Параметры.ВП.ДатаОкончания;
	Иначе
		УстановитьПериодПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьПараметрыФормы();  //+++АК mika 2017.12.08 ИП-00017263.01

	ОбновитьВидимостьЭлементовСервер(); //+++АК mika 2017.12.08 ИП-00017263.01

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++АК mika 2018.01.12 ИП-00017263.01
	#Если ВебКлиент Тогда
		 
		Если НЕ ОткрыватьФорму Тогда
			
			ИмяФормыПолное = ПолучитьПолноеИмяФормы("Форма");
			Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
				ОткрытьФорму(ИмяФормыПолное, Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Иначе
				ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.Форма", Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
			Отказ = Истина;
			
			ЭтаФорма.Закрыть();
			
		КонецЕсли;
		
	#КонецЕсли
	//---АК mika

	УстановитьВидимость(Истина);
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЧНЫМ ДОКУМЕНТОМ

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.СотрудникиАутсорсинг.ПустаяСсылка");
		ПредставлениеТекущийПродавец = "";
		ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;
	
	Элементы.ТаблицаСотрудникПериод.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе(ДеньВыхода, Представление = "", КоличествоЧасов = 0, ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 7;
	
	// Четные колонки Представление, не четные КоличествоЧасов
	КолонкаПредставления = Цел(НомерКолонки/2)*2;
	КолонкаКоличество = НомерКолонки;
	Если КолонкаПредставления = КолонкаКоличество Тогда
		КолонкаКоличество = КолонкаКоличество + 1;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
	ТекОбласть.Значение = Представление;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаКоличество, НомерСтроки, КолонкаКоличество);
	
	//+++АК mika 2017.12.11 ИП-00017263.01
	//ТекОбласть.Значение = КоличествоЧасов;
	//---АК mika ИП-00017263.01
	
	// Цвет
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	НайденнаяСтрокаЦвет = ЦветаТТ.Найти(ТорговаяТочка, "ТорговаяТочка");
	
	Если НайденнаяСтрокаЦвет <> Неопределено Тогда
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = НайденнаяСтрокаЦвет.Цвет;
	иначе
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка) //+++АК mika 2017.12.08 ИП-00017263.01
	
	СтандартнаяОбработка = Ложь;
		
	Если Не РедактированиеТабДокумента Тогда
		Возврат;
	КонецЕсли;

	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Сотрудник") Тогда
		ПоказатьЗначение(,Расшифровка.Сотрудник);
		Возврат;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Период") Тогда
		Если ОбновитьМассивИдентификаторовПериодовРасшифровки() Тогда	
			НайденнаяСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, ТекущийПродавец));
			Если НайденнаяСтроки.Количество() =  1 Тогда
				ТаблицаСотрудникПериодИзменитьДанные(НайденнаяСтроки[0]);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка) //+++АК mika 2018.01.12 ИП-00017263.01
	
	//Отлючить. В Web используют только кнопки.
	#Если НЕ ВебКлиент Тогда
		
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
		КонецЕсли;
		
		Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;
		
		ТабличныйДокументОбработкаРасшифровки(,Расшифровка,);
		
	#КонецЕсли
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	//+++АК mika 2018.01.19 
	//Если у реквизита формы  в использовании установлен признак "Выдавать ошибку", то ошибка выводится при каждом вызове дгугих форм
	//Необходимо разобраться, а это удалить↓
	//Если НЕ ЗначениеЗаполнено(ГруппаТорговыхТочек) Тогда
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не заполнена группа торговых точек!";
	//	Сообщение.Сообщить();
	//	
	//КонецЕсли;
	//---АК mika 
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОбновитьГрафикНаСервере();
	УстановитьВидимость();
	
	// Фиксация областей
	ТабличныйДокумент.ФиксацияСлева  = 3;
	ТабличныйДокумент.ФиксацияСверху = 7;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	
	//+++АК mika 2017.12.09 ИП-00017263.01 
	//ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
	////Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	////+++ ziga 27.10.2017 переписал модальное открытие формы	
	//Оповещение=Новый ОписаниеОповещения("ИзменитьФизлица",ЭтаФорма);
	//ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораФизическогоЛица",ПараметрыОтбора,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
	////--- ziga 27.10.2017
	////Если ЗначениеЗаполнено(Результат) Тогда
	////	
	////	ДобавитьПервоеФизЛицоВГрафик(Результат);
	////	ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);
	////	
	////КонецЕсли;  
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФизлица", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораСотрудникаКомпанииАутсорсинг");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораСотрудникаКомпанииАутсорсинг", 
			Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	//---АК mika 
	
	УстановитьВидимость();
	
КонецПроцедуры
//+++ ziga 27.10.2017
&НаКлиенте
Процедура ИзменитьФизлица(Результат,ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДобавитьПервоеФизЛицоВГрафик(Результат);
		ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);
		
	КонецЕсли;
КонецПроцедуры
//--- ziga 27.10.2017
&НаКлиенте
Процедура ДобавитьФизЛицоСлева(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		//+++АК mika 2018.01.18 ИП-00017263.02
		//Предупреждение("Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.");
        Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.';"));
		//---АК mika
		Возврат;
	КонецЕсли;
	
	//+++АК mika 2017.12.08 ИП-00017263.01 
	Оповещение = Новый ОписаниеОповещения("ПроверитьСотрудника", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораСотрудникаКомпанииАутсорсинг");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораСотрудникаКомпанииАутсорсинг", Новый Структура("ЦФО", ГруппаТорговыхТочек), ЭтаФорма, УникальныйИдентификатор,,,Оповещение);
	КонецЕсли;

	Возврат;
	//---АК mika
	
	ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
	//+++ ziga 27.10.2017 переписал модальное открытие формы	
	//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	Оповещение=Новый ОписаниеОповещения("ПроверитьСотрудника",ЭтаФорма);
	ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораФизическогоЛица",ПараметрыОтбора,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
	//--- ziga 27.10.2017	
	//Если ЗначениеЗаполнено(Результат)Тогда
	//	
	//	НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
	//	Если НаличиеСотрудника Тогда
	//		Предупреждение("В табеле уже присутствует сотрудник " + Результат);
	//		Возврат;	
	//	КонецЕсли;
	//	
	//	РаздвинутьОбластьНаСервере(НомерКолонкиРасшифровки, Результат);
	//	
	//	// Порядок
	//	ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);		
	//	
	//	ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
	//	
	//КонецЕсли;
	
КонецПроцедуры
//+++ ziga 27.10.2017 переписал модальное открытие формы
&НаКлиенте
Процедура ПроверитьСотрудника(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат)Тогда
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		// Смотрим расшифровку по четной колонке
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафикеСервер(Результат);
		#Иначе	
			НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
		#КонецЕсли

		Если НаличиеСотрудника Тогда
			//+++АК mika 2018.01.18 ИП-00017263.02
			//Предупреждение("В табеле уже присутствует сотрудник " + Результат);
			Сообщить(НСтр("ru = '"+СтрЗаменить("В табеле уже присутствует сотрудник Результат", "Результат", Результат)+"';"));
			//---АК mika
			Возврат;	
		КонецЕсли;
		
		РаздвинутьОбластьНаСервере(НомерКолонкиРасшифровки, Результат);
		
		// Порядок
		ИзменитьПорядокФизЛицВТабеле(Результат, ТекущийПродавец);		
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

//--- ziga 27.10.2017 
&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	
	ТаблицаСотрудникПериодИзменитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтроку(Команда)
	
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ЭтоОтветственныйЗаАутсорс = ЭтоОтветственныйЗаАутсорс();
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		
		Если ЭтоОтветственныйЗаАутсорс
				И ТекСтр.Период < НачалоДня(ТекущаяДата()) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
		
		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
		Если ЗначениеЗаполнено(ТекущийПродавец)
				//И ЗначениеЗаполнено(ГруппаТорговыхТочек)
				И ЗначениеЗаполнено(ТекСтр.Период) Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		
		ТекСтр.Представление 					= "";
		ТекСтр.КоличествоЧасов 					= 0;
		ТекСтр.ПредставлениеТабличныйДокумент 	= "";
		ТекСтр.ТаблицаДанных.Очистить();
		
		ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, "", 0);
		
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьКарточкуФизЛица(Команда)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		//+++ak ziga ИП-00016506.04 15112017
		//ОткрытьЗначение(ТекущийПродавец);
		ПоказатьЗначение(,ТекущийПродавец);
		//---ak ziga ИП-00016506.04 15112017
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ГруппаТорговыхТочекНачалоВыбораЗавершение", ЭтаФорма, Параметры);
	//открыть форму выбора структурных единиц
	ПараметрыОтбора = Новый Структура("НаименованиеГруппы", "Управление розницей.");
	ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаВыбораСтруктурнойЕдиницы", ПараметрыОтбора, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ГруппаТорговыхТочек = Результат;
		ОчиститьДанныеНаСервере();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТекущееФизЛицо(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		//+++АК mika 2018.01.18 ИП-00017263.02
		//Предупреждение("Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, относительно котрой необходимо выполнить действие. Операция не выполнена.';"));
		//---АК mika
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор сотрудника");
	Если Результат <> Неопределено Тогда
		
		ПеренестиФизЛицоВТабеле(НомерКолонкиРасшифровки, Результат.Значение);
		
		ИзменитьПорядокФизЛицВТабеле(ТекущийПродавец, Результат.Значение);
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафик(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		//+++АК mika 2018.01.18 ИП-00017263.02
		//Предупреждение("Встаньте в колонку с сотрудником, для которго необходимо скопировать график. Операция не выполнена.");
		Сообщить(НСтр("ru = 'Встаньте в колонку с сотрудником, для которго необходимо скопировать график. Операция не выполнена.';"));
		//---АК mika
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор сотрудника, с которого копируется график");
	Если Результат <> Неопределено Тогда
	
		ПараметрыОткрытия = Новый Структура("ФизическоеЛицо, НачалоПериода, КонецПериода", Результат.Значение, Период.ДатаНачала, Период.ДатаОкончания);
	//+++ ziga 27.10.2017 переписал модальное открытие формы	
	//ДанныеКопирования = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаКопированияГрафика", ПараметрыОткрытия, ЭтаФорма);
	Оповещение=Новый ОписаниеОповещения("СкопироватьГрафикОповещение",ЭтаФорма);
	ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаКопированияГрафика",ПараметрыОткрытия,ЭтаФорма,УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		//Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
		//	
		//	СкопироватьГрафикНаСервере(ДанныеКопирования);
		//	
		//	ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		//	
		//КонецЕсли;
	//--- ziga 27.10.2017
	КонецЕсли;
	
КонецПроцедуры
	//+++ ziga 27.10.2017 переписал модальное открытие формы	
&НаКлиенте
Процедура СкопироватьГрафикОповещение(ДанныеКопирования, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
		
		СкопироватьГрафикНаСервере(ДанныеКопирования);
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;	
КонецПроцедуры
	//--- ziga 27.10.2017
&НаКлиенте
Процедура ОткрытьФормуСпискаГрафика(Команда)
	
	//+++АК mika 2017.12.08 ИП-00017263.01
	//Форма = ПолучитьФорму("РегистрСведений.ТабельРаботыВнештатныхСотрудников.Форма.ФормаСписка");
	
	//Форма.Список.Отбор.Элементы.Очистить();
	//
	//ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Группа");
	//ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование 	= Истина;
	//ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	//ЭлементОтбора.ПравоеЗначение 	= ГруппаТорговыхТочек;
	
	Форма = ПолучитьФорму("РегистрСведений.ТабельРаботыСотрудниковАутсорсинг.Форма.ФормаСписка");
	
	Форма.Список.Отбор.Элементы.Очистить();	
	//---АК mika 

	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение 	= Период.ДатаНачала;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение 	= КонецДня(Период.ДатаОкончания);
	
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	форма.ПодчиненныеЭлементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджев(Команда)
	
	АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище();
	
	ПараметрыФормы = Новый Структура("Адрес", АдресВоВременномХранилище);
	//+++ ziga 27.10.2017 переписал модальное открытие формы
	//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаПодбораПродавцов", ПараметрыФормы);
	
	//+++АК mika 2018.01.18 ИП-00017263.02
	//Оповещение=Новый ОписаниеОповещения("ПолучитьТабДокументОповещение",ЭтаФорма);
	//ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаПодбораПродавцов",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ОткрытьФорму("Обработка.ПечатьБейджейПродавцов.Форма.Форма", Новый Структура("ГруппаСотрудников", ГруппаСотрудников), , "ТД_ПечатьБейджей");
	
	//---АК mika
	
	//Если ТипЗнч(Результат) = Тип("Массив") Тогда
	//	
	//	ТабДокумент = ПолучитьТабличныйДокумент(Результат);
	//	
	//	ТабДокумент.ОтображатьСетку 	= Ложь;
	//	ТабДокумент.Защита 				= Истина;
	//	ТабДокумент.ТолькоПросмотр 		= Истина;
	//	ТабДокумент.ОтображатьЗаголовки = Ложь;
	//	ТабДокумент.Показать();
	//	
	//КонецЕсли;
	//+++ ziga 27.10.2017 переписал модальное открытие формы
КонецПроцедуры

//+++ ziga 27.10.2017 переписал модальное открытие формы
&НаКлиенте
Процедура ПолучитьТабДокументОповещение(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2017.12.08 ИП-00017263.01  //Исправление ошибок (Дописано "Экспорт")
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ТабДокумент = ПолучитьТабличныйДокумент(Результат);
		
		ТабДокумент.ОтображатьСетку 	= Ложь;
		ТабДокумент.Защита 				= Истина;
		ТабДокумент.ТолькоПросмотр 		= Истина;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		ТабДокумент.Показать();
		
	КонецЕсли;	
КонецПроцедуры
//--- ziga 27.10.2017 переписал модальное открытие формы
&НаКлиенте
Процедура ОткрытьОтчетОтклонениеГрафиковРаботыОтРеальныхВыходов(Команда)
	
	ОткрытьФорму("Отчет.ОтклонениеГрафиковРаботыВнештатныхСотрудниковОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоВыработке(Команда)
	
	ОткрытьФорму("Отчет.ВыработкаВнештатныхСотрудников.Форма.ФормаОтчета",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда) //+++АК mika 2017.12.08 ИП-00017263.01
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбласть(Команда) //+++АК mika 2018.01.12 ИП-00017263.01
		
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;

	ТабличныйДокументОбработкаРасшифровки(, Расшифровка, );

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборы(Команда) //+++АК mika 2018.01.12 ИП-00017263.01
										
	ОбновитьВидимостьДополнительныхОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПриходУходСотрудников(Команда)
	
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаПриходИУходСотрудников", Новый Структура("ГруппаСотрудников", ГруппаСотрудников),,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

&НаСервере
Процедура ОбновитьГрафикНаСервере()
	
	ОчиститьДанныеНаСервере();
	
	ЗаполнитьТаблицуСотрудникПериодНаСервере();
	
	//
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод угла шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
	
	// Вывод сотрудников
	Для Каждого Сотр Из ИнформацияПоСотрудникам Цикл
		
        //+++АК mika 2017.12.11 ИП-00017263.01 
		// ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Сотрудник);
		ФИО = СокрЛП(Сотр.Сотрудник); 
		//---АК mika 
		
		ОбластьШапкаСотрудник = Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
		ОбластьШапкаСотрудник.Параметры.ФИО 		= ФИО;
		ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	// Вывод Периодов
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ИнформацияПоСотрудникам Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			
			НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество()Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", СтрокаСДанными.Период); //+++АК mika 2017.01.12 ИП-00017263.01
				
				// Имеет смысл если есть точки
				Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
					
					//+++АК mika 2017.12.11 ИП-00017263.01 Исправление ошибок 
					//НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
					Если СтрокаСДанными.ТаблицаДанных.Количество() = 1 Тогда
						НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
					Иначе
						НайденнаяСтрокаЦвет = Неопределено;
					КонецЕсли;
					//---АК mika
					
					Если НайденнаяСтрокаЦвет <> Неопределено Тогда
						ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				СтрВход = ТаблицаСотрудникПериод.Добавить();
				СтрВход.Сотрудник = СтрТЗ.Сотрудник;
				СтрВход.Период = НачалоПериода;
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода); //+++АК mika 2017.01.12 ИП-00017263.01

			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
		КонецЦикла;

		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере()
	
	// СЕ из ЦФО
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ЦФО"	, ГруппаТорговыхТочек);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|ГДЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = &ЦФО";
	
	
	//+++АК mika 2018.01.25 Отключить разрез Группы торговых точек
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	(СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|				И СтруктурныеЕдиницы.Ссылка = &ТорговаяТочка
	|			ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка))";	
	
	Запрос.УстановитьПараметр("ТорговаяТочка" , Магазин);

	//---АК mika Отключить разрез Группы торговых точек
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	МасТТ = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасТТ.Добавить(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
	КонецЦикла;
	
	//+++АК mika 2018.07.09 //+++АК mika 2018.07.09 ИП-00019215 запрет добаления записей, если не определена группа сотрудников и/или контрагент
	//Добавить отображение невыходов при полной выборке
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		МасТТ.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	КонецЕсли;
	//---АК mika
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода"		, НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ТорговаяТочка"		, МасТТ);
	Запрос.УстановитьПараметр("ГруппаТорговыхТочек"	, ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("Магазин"				, Магазин);
	Запрос.УстановитьПараметр("Помощник"			, Помощник);
	Запрос.УстановитьПараметр("Должность"			, Должность);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("СотрудникМобильный"  , СотрудникМобильный); //+++АК mika 2018.01.25 ИП-00017263.01 

	//+++AK ziga 20171107
	Запрос.УстановитьПараметр("Менеджер"			, Менеджер);
	//---AK ziga
	
	
	//+++АК mika 2017.12.08 ИП-00017263.01 Исправление ошибок, изменение запроса.
	
	Запрос.Текст = ПолучитьТекстЗапросаДляЗаполненияМакета();
	
	ОбработатьРезультатЗапроса(Запрос);
	
	Возврат;
	
	//---АК mika 
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_Табель
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыВнештатныхСотрудников.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) или ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ПО ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.ТорговаяТочка В(&ТорговаяТочка)
	|	И (ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка))
	|	И (СоответствиеОбъектРольСрезПоследних.РольПользователя = &Помощник
	|			ИЛИ &Помощник = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность = &Должность
	|			ИЛИ &Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиВнештатныхСотрудников.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.ОтветственныйМенеджер = &Менеджер
	|			ИЛИ &Должность = ЗНАЧЕНИЕ(Справочник.СотрудникиАутсорсинг.Пустаяссылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыВнештатныхСотрудников.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_Табель.Сотрудник
	|			ИЗ
	|				ВТ_Табель)
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Телефон),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Должность)
	|ПО
	|	Сотрудник,
	|	Период";
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий()Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий()Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериод.Очистить();
	ИнформацияПоСотрудникам.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникПериодВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицаСотрудникПериодИзменитьДанные();
	
КонецПроцедуры

Функция ПолучитьПараметрыОткрытияФормыРедактированияПериода(мТаблицаДанных, ТекущийПродавец, ЕстьПериод, мПериод)
	//+++AK ziga  В рамках переделки под вебклиент
	//
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("ТорговаяТочка");
	//ТЗ.Колонки.Добавить("КоличествоЧасов");
	
		//Для Каждого СтрМассива Из мТаблицаДанных Цикл
		//	Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка) Тогда
		//		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрМассива);
		//	КонецЕсли;
		//КонецЦикла;
	//---AK ziga  	//+++AK ziga  В рамках переделки под вебклиент
	Если ЕстьПериод Тогда
		Возврат Новый Структура("Сотрудник, Период, ТаблицаДанных", ТекущийПродавец, мПериод, Новый Массив);
	Иначе
		Возврат Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец, Новый Массив);
	КонецЕсли;

	//	Если ЕстьПериод Тогда
	//	Возврат Новый Структура("Сотрудник, Период, ТаблицаДанных", ТекущийПродавец, мПериод, ТЗ);
	//Иначе
	//	Возврат Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец, ТЗ);
	//КонецЕсли;
	//---AK ziga  
	КонецФункции

&НаКлиенте
Процедура ТаблицаСотрудникПериодИзменитьДанные(ТекДанные = Неопределено, ОчиститьЗаписи = Ложь)
	
	Если ТекДанные = Неопределено Тогда //+++АК mika 2018.01.12 ИП-00017263.01
		ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные; //+++АК mika 2017.12.08 ИП-00017263.01 Удалить, если утвердят открытие по расшифровке
	КонецЕсли;

	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК mika 2017.12.08 ИП-00017263.01
	//Если ЭтоПродавец И ТекДанные.Период <> НачалоДня(ТекущаяДата()) Тогда  //+++АК mika 2017.02.09 Нет задачи, Фролова попросила "забликоровать редактирование".
	//Сообщить("Можно редактировать только текущую дату!");
	Если ЭтоПродавец Тогда  
		Сообщить("Запрещено редактирование графика!");
		Возврат;
	КонецЕсли;
	//---АК mika
	
	Если (ЭтоОтветственныйЗаАутсорс())
			И ТекДанные.Период < НачалоДня(ТекущаяДата()) Тогда
			//+++АК mika 2017.12.08 ИП-00017263.01
			Сообщить("Запрещено редактирование прошедшего периода!");
			//---АК mika
		Возврат;
	КонецЕсли;
	
	//+++АК mika 2017.12.08 ИП-00017263.01 
	//Восстановление работоспособности обработки (выбор нескольких торговых точек)
	
	МассивДанных = Новый Массив;
	Если Не ТекДанные.ТаблицаДанных.Количество() = 0 Тогда
		Для каждого Строка из ТекДанные.ТаблицаДанных Цикл
			МассивДанных.Добавить(Новый Структура("ТорговаяТочка, КоличествоЧасов, Тип, Вид, Значение",
			          Строка.ТорговаяТочка, Строка.КоличествоЧасов, Строка.Тип, Строка.Вид, Строка.Значение)); 						
		КонецЦикла;
	КонецЕсли;

	Если ОчиститьЗаписи Тогда
		
		ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение(Новый Структура("Сотрудник, Период, ГруппаТорговыхТочек, ТаблицаДанных, Представление, КоличествоЧасов, ТорговаяТочка", 
				ТекущийПродавец, ТекДанные.Период, ГруппаТорговыхТочек, Новый Массив(),"",0, ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка")), Новый Структура("ТекДанные", ТекДанные));
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение", ЭтаФорма, Новый Структура("ТекДанные", ТекДанные));
	
	//+++АК mika 2017.12.09 ИП-00017263.01  
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаРедактированияТорговыхТочек");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное, Новый Структура("Сотрудник, Период, ГруппаТорговыхТочек, ТаблицаДанных", 
				ТекущийПродавец, ТекДанные.Период, ГруппаТорговыхТочек, МассивДанных),ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияТорговыхТочек", Новый Структура("Сотрудник, Период, ТаблицаДанных", 
				ТекущийПродавец, ТекДанные.Период, МассивДанных),ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

	Возврат;
	//---АК mika 
	
	
	//МассивДанных=Новый Массив;
	//Если Не ТекДанные.ТаблицаДанных.Количество()=0 Тогда
	//	Для каждого стр из ТекДанные.ТаблицаДанных Цикл
	//		МассивДанных.Добавить(Новый Структура("ТорговаяТочка, КоличествоЧасов",Стр.ТорговаяТочка,Стр.КоличествоЧасов)); 						
	//	КонецЦикла;
	//КонецЕсли;
	
	//
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	ЕстьПериод = (МассивСтрок.Количество() = 1);
	//+++AK ziga 20171102  В рамках переделки под вебклиент 
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияФормыРедактированияПериода("", ТекущийПродавец, ЕстьПериод, ТекДанные.Период);
	//ПараметрыОткрытия.ТаблицаДанных=МассивДанных;
	Если Не ТекДанные.ТаблицаДанных.Количество()=0 Тогда
	ПараметрыОткрытия.Вставить("ТорговаяТочка",ТекДанные.ТаблицаДанных[0].ТорговаяТочка);
	ПараметрыОткрытия.Вставить("КоличествоЧасов",ТекДанные.ТаблицаДанных[0].КоличествоЧасов);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СвойствоСотрудника",ТекДанные.СвойствоСотрудника);
	ПараметрыОткрытия.Вставить("ЭкстренныйВызов",ТекДанные.ЭкстренныйВызов);
	ПараметрыОткрытия.Вставить("Тренинг",ТекДанные.Тренинг);
	ПараметрыОткрытия.Вставить("Отсутствие",ТекДанные.Отсутствие);
	//ПараметрыОткрытия = ПолучитьПараметрыОткрытияФормыРедактированияПериода(ТекДанные.ТаблицаДанных, ТекущийПродавец, ЕстьПериод, ТекДанные.Период);
	Оповещение=Новый ОписаниеОповещения("ТаблицаСотрудникИзменитьПериод",ЭтаФорма);
	//ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияПериода",ПараметрыОткрытия,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
	//---AK ziga  В рамках переделки под вебклиент
	//Если ЕстьПериод Тогда
			//+++AK ziga 20171102  В рамках переделки под вебклиент
		Результат=ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаЗаполненияДанныхПоСотруднику",ПараметрыОткрытия,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
		//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияПериода"				, ПараметрыОткрытия, ЭтаФорма);	
	//Иначе
		Результат=ОткрытьФорму("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаЗаполненияДанныхПоСотруднику",ПараметрыОткрытия,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
		//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияПериодаМассивСтрок"	, ПараметрыОткрытия, ЭтаФорма);
		//---AK ziga  В рамках переделки под вебклиент
	//КонецЕсли;
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("ТорговаяТочка");
	//ТЗ.Колонки.Добавить("КоличествоЧасов");
	//
	//Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
	//	Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка) Тогда
	//		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрМассива);
	//	КонецЕсли;
	//КонецЦикла;

	// МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	//Если МассивСтрок.Количество() = 1 Тогда
	//	
	//	ПараметрыОткрытия = Новый Структура("Сотрудник, Период, ТаблицаДанных", ТекущийПродавец, ТекДанные.Период, ТЗ);
	//	Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
	//	
	//Иначе
	//	
	//	// Без привязки к периоду
	//	ПараметрыОткрытия = Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец, ТЗ);
	//	Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыВнештатныхСотрудников.Форма.ФормаРедактированияПериодаМассивСтрок", ПараметрыОткрытия, ЭтаФорма);
	//	
	//КонецЕсли;
	  //+++AK ziga Переделка под  вебклиент
	//Если ТипЗнч(Результат) = Тип("Структура") Тогда
	//	
	//	Для Каждого СтрокаМассива Из МассивСтрок Цикл
	//		
	//		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
	//		
	//		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
	//		
	//		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
	//		Если ЗначениеЗаполнено(ТекущийПродавец)
	//				И ЗначениеЗаполнено(ГруппаТорговыхТочек)
	//				И ЗначениеЗаполнено(ТекСтр.Период) Тогда
	//			ОчиститьЗаписиВРегистре(Данные);
	//		КонецЕсли;
	//		
	//		ТД = ТекСтр.ТаблицаДанных;
	//		ТД.Очистить();
	//		
	//		//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
	//		Представление   = "";
	//		КоличествоЧасов = 0;
	//		ТорговаяТочка = Неопределено;
	//		
	//		Для Каждого Стр Из Результат.ТаблицаДанных Цикл
	//			
	//			// Берем первую для раскраски макета
	//			Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
	//				ТорговаяТочка = Стр.ТорговаяТочка;	
	//			КонецЕсли;
	//			
	//			Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
	//			Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
	//			
	//			ОшибкаПриЗаписи = Ложь;
	//			ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
	//			
	//			Если НЕ ОшибкаПриЗаписи Тогда
	//				
	//				ЗаполнитьЗначенияСвойств(ТД.Добавить(), Стр);
	//				
	//				//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
	//				Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
	//				КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
	//				
	//			Иначе
	//				Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		ПредставлениеТабличныйДокумент = Представление;
	//		
	//		ТекСтр.ПредставлениеТабличныйДокумент 	= ПредставлениеТабличныйДокумент;
	//		ТекСтр.Представление   					= Представление;
	//		ТекСтр.КоличествоЧасов 					= КоличествоЧасов;
	//		
	//		ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//---AK ziga
КонецПроцедуры
//+++AK ziga 20171102
&НаКлиенте
Процедура ТаблицаСотрудникИзменитьПериод(Результат, ДополнительныеПараметры) Экспорт
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОтветственныйЗаАутсорс()
			И ТекДанные.Период < НачалоДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	//
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Сотрудник"	  	 	, ТекущийПродавец);
		СтруктураДанных.Вставить("ТорговаяТочка"  	 	, Результат.ТорговаяТочка);
		СтруктураДанных.Вставить("Отсутствие"			, Результат.Отсутствие);
		СтруктураДанных.Вставить("КоличествоЧасов"	 	, Результат.КоличествоЧасов);
		СтруктураДанных.Вставить("СвойствоСотрудника"	, Результат.СвойствоСотрудника);
		СтруктураДанных.Вставить("Тренинг"				, Результат.Тренинг);
		СтруктураДанных.Вставить("ЭкстренныйВызов"		, Результат.ЭкстренныйВызов);
		
		Представление	 	= "";
		ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
		Отсутствие 		 	= СтруктураДанных.Отсутствие;
		КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
		СвойствоСотрудника  = СтруктураДанных.СвойствоСотрудника;
		
		Если ЗначениеЗаполнено(Отсутствие)Тогда
			
			Представление = Строка(Отсутствие);	
			
		ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
			
			Если СвойствоСотрудника = 1 Тогда
				Представление = Представление + "н, ";
			ИначеЕсли СвойствоСотрудника = 2 Тогда
				Представление = Представление + "ст, ";	
			КонецЕсли;
			
			//Если СтруктураДанных.ЭкстренныйВызов Тогда
			//	Представление = Представление + "экстр. вызов, ";	
			//КонецЕсли;	
			
			Представление = Представление + Строка(ТорговаяТочка);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление="Тренинг";	
		КонецЕсли;
		
		Если СвойствоСотрудника <> 2
				И НЕ ЗначениеЗаполнено(Отсутствие)
				И НЕ ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		КонецЕсли;
		
		СтруктураДанных.Вставить("Представление", Представление);
		ТекДанные.Представление = Представление;
		ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		
	КонецЕсли;
	
	  //+++Ak ziga
	//МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	//ЕстьПериод = (МассивСтрок.Количество() = 1);
	//Если ТипЗнч(Результат) = Тип("Структура") Тогда
	//	
	//	Для Каждого СтрокаМассива Из МассивСтрок Цикл
	//		
	//		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
	//		
	//		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
	//		
	//		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
	//		Если ЗначениеЗаполнено(ТекущийПродавец)
	//				И ЗначениеЗаполнено(ГруппаТорговыхТочек)
	//				И ЗначениеЗаполнено(ТекСтр.Период) Тогда
	//			ОчиститьЗаписиВРегистре(Данные);
	//		КонецЕсли;
	//		
	//		ТД = ТекСтр.ТаблицаДанных;
	//		ТД.Очистить();
	//		
	//		//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
	//		Представление   = "";
	//		КоличествоЧасов = 0;
	//		ТорговаяТочка = Неопределено;
	//		
	//		Для Каждого Стр Из Результат.ТаблицаДанных Цикл
	//			
	//			// Берем первую для раскраски макета
	//			Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
	//				ТорговаяТочка = Стр.ТорговаяТочка;	
	//			КонецЕсли;
	//			
	//			Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
	//			Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
	//			
	//			ОшибкаПриЗаписи = Ложь;
	//			ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
	//			
	//			Если НЕ ОшибкаПриЗаписи Тогда
	//				
	//				ЗаполнитьЗначенияСвойств(ТД.Добавить(), Стр);
	//				
	//				//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
	//				Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
	//				КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
	//				
	//			Иначе
	//				Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		ПредставлениеТабличныйДокумент = Представление;
	//		
	//		ТекСтр.ПредставлениеТабличныйДокумент 	= ПредставлениеТабличныйДокумент;
	//		ТекСтр.Представление   					= Представление;
	//		ТекСтр.КоличествоЧасов 					= КоличествоЧасов;
	//		
	//		ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//---AK ziga
КонецПроцедуры
&НаСервере
Процедура ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных)
	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
			Если ЗначениеЗаполнено(ТекущийПродавец)
					//И ЗначениеЗаполнено(ГруппаТорговыхТочек)
					И ЗначениеЗаполнено(ТекСтр.Период) Тогда
					ОчиститьЗаписиВРегистре(Данные);
				КонецЕсли;
				ТД = ТекСтр.ТаблицаДанных;
				ТД.Очистить();
				Данные.Вставить("ТорговаяТочка"	 , СтруктураДанных.ТорговаяТочка);
				Данные.Вставить("КоличествоЧасов", СтруктураДанных.КоличествоЧасов);

		СтруктураДанных.Вставить("Период", ТекСтр.Период);
		ОшибкаПриЗаписи = Ложь;
		ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
		Если Не ОшибкаПриЗаписи Тогда
			ТДстр=ТД.добавить();
			ТДСтр.ТорговаяТочка=СтруктураДанных.ТорговаяТочка;
			ТДСтр.КоличествоЧасов=СтруктураДанных.КоличествоЧасов;
			Если  СтруктураДанных.Свойство("Удаление") Тогда
				Если ЗначениеЗаполнено(СтруктураДанных.Удаление) Тогда
					СпрОб=СтруктураДанных.Сотрудник.ПолучитьОбъект();
					
					НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения", СтруктураДанных.Удаление, СтруктураДанных.Период));
					Если НайденнаяСтрока.Количество() Тогда
						
						СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
					КонецЕсли;
					СпрОб.Записать();
				КонецЕсли; 
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураДанных);
			ТекСтр.Представление = СтруктураДанных.Представление;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, СтруктураДанных.Представление,СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
		Иначе	
			Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//---AK ziga
&НаСервере
Процедура ОчиститьЗаписиВРегистре(Данные)                   
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	//	|ИЗ
	//	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	//	|ГДЕ
	//	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = &ЦФО";
	//
	//Запрос.УстановитьПараметр("Дата", КонецДня(Данные.Период));
	//Запрос.УстановитьПараметр("ЦФО", Данные.Группа);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//МасТТ=Новый Массив;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	МасТТ.Добавить(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
	//КонецЦикла;
	
	//Для каждого Эл Из МасТТ Цикл
		НЗ = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(Данные.Период);
		НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
		//НЗ.Отбор.ТорговаяТочка.Установить(Эл);
		НЗ.Записать();
	//КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
	//Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	Запись.Контрагент	= Запись.Сотрудник.Контрагент;
	Запись.Должность	= Запись.Сотрудник.Должность;
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость(Открытие = Ложь)
	
	ЕстьДанные = (ТаблицаСотрудникПериод.Количество() > 0);
	
	Элементы.ДобавитьФизЛицо.Видимость 				= НЕ ЕстьДанные
													И НЕ Открытие;
	Элементы.ДобавитьФизЛицоСлева.Видимость 		= ЕстьДанные;
	Элементы.ПереместитьТекущееФизЛицо.Видимость	= ЕстьДанные;
	
	#Если ВебКлиент Тогда
		Элементы.ПереместитьТекущееФизЛицо.Видимость = Ложь; //+++АК mika 2018.03.11 Без задачи (Для Внештатных менеджеров)
	#КонецЕсли
	
	ОтбКонтрагент=ПолучитьКонтрагентаПараметраСеанса();
	Если ЗначениеЗаполнено(ОтбКонтрагент) Тогда
		Контрагент=(ОтбКонтрагент);
		Элементы.Контрагент.Доступность=Ложь;
	КонецЕсли; 
	
	//+++АК mika 2017.12.08 ИП-00017263.01
	Элементы.ИзменитьОбласть.Видимость	            = ЕстьДанные ИЛИ НЕ Открытие;
	Элементы.ОчиститьОбласть.Видимость	            = ЕстьДанные ИЛИ НЕ Открытие;
	
	Элементы.ТабличныйДокументКонтекстноеМенюОчиститьОбласть.Видимость = ЕстьДанные ИЛИ НЕ Открытие;
	Элементы.ТабличныйДокументКонтекстноеМенюИзменитьОбласть.Видимость = ЕстьДанные ИЛИ НЕ Открытие;
	//---АК mika

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметраСеанса) Экспорт
	
	Возврат ПараметрыСеанса[ИмяПараметраСеанса];
	
КонецФункции
//AK ziga  &НаКлиенте
&НаСервере
Процедура ДобавитьПервоеФизЛицоВГрафик(Знач ФизЛицо)
	
	ТабличныйДокумент.Очистить();
	                                
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	//+++АК mika 2017.12.08 ИП-00017263.01
	//ОбластьШапкаСотрудник.Параметры.ФИО 			= ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицо);
	ОбластьШапкаСотрудник.Параметры.ФИО = СокрЛП(ФизЛицо);
	//---АК mika
	
	//+++АК mika 2018.01.16 Без Задачи.  
	СтруктураСотрудника = ПолучитьСтруктуруТекущегоСотрудника(ФизЛицо);
	//ОбластьШапкаСотрудник.Параметры.КодСотрудника 	= ФизЛицо.Код;
	//ОбластьШапкаСотрудник.Параметры.Расшифровка 	= Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", ФизЛицо, ФизЛицо.Код, "");
	ЗаполнитьЗначенияСвойств(ОбластьШапкаСотрудник.Параметры, СтруктураСотрудника);
	ОбластьШапкаСотрудник.Параметры.Контрагент  = СтруктураСотрудника.ГруппаСотрудников;
	ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", ФизЛицо, СтруктураСотрудника.КодСотрудника, СтруктураСотрудника.Телефон);
	//---АК mika 
	
	ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
	
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
		
		// Добавим пустую строку с периодом
		СтрВход = ТаблицаСотрудникПериод.Добавить();
		СтрВход.Сотрудник 	= ФизЛицо;
		СтрВход.Период 		= НачалоПериода;
		
		ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода); //+++АК mika 2017.01.12 ИП-00017263.01
		
		ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");
		
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ПолучитьМакет("График");
	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеСотрудникаВГрафике(Сотрудник)

	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 		= ТабличныйДокумент.ШиринаСтраницы;
	
	// Расшифровка всегда в четной колонке
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеСотрудникаВГрафикеСервер(Сотрудник)

	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 		= ТабличныйДокумент.ШиринаСтраницы;
	
	// Расшифровка всегда в четной колонке
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаСервере
Процедура РаздвинутьОбластьНаСервере(КолонкаИсточник, Сотрудник)
	
	// Заполним пустые строки в Основной таблице
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НовСтр = ТаблицаСотрудникПериод.Добавить();
		НовСтр.Сотрудник 	= Сотрудник;
		НовСтр.Период 		= НачалоПериода;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	КолонкаПриемник = КолонкаИсточник; 
	
	// Колонка источник всегда четная, в области 2 колонки
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + КолонкаИсточник + ":C" + (КолонкаИсточник+1)), ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Очистим новую область
	ТекОбласть = ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1));
	ТекОбласть.Очистить();
	
	// Цвет
	ТекОбласть.ЦветФона = WebЦвета.Белый;
	
	//+++АК mika 2018.01.17 Комментирование оригинального текста (воставновление работоспособности)
	//ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Параметр = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотрудник);
	//ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Значение = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотрудник);
	//
	//ТабличныйДокумент.Область("R4C" + КолонкаПриемник).Параметр = (Сотрудник.Код);
	//ТабличныйДокумент.Область("R6C" + КолонкаПриемник).Параметр = (Сотрудник.Контрагент);
	//ТабличныйДокумент.Область("R7C" + КолонкаПриемник).Параметр = (Сотрудник.Должность);
	//ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", Сотрудник, Сотрудник.Код, "");
	
	СтруктураСотрудника = ПолучитьСтруктуруТекущегоСотрудника(Сотрудник);

	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Параметр = СокрЛП(Сотрудник); 
	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Значение = СокрЛП(Сотрудник);
	
	ТабличныйДокумент.Область("R4C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.КодСотрудника);
	ТабличныйДокумент.Область("R5C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.Телефон);
	ТабличныйДокумент.Область("R6C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.ГруппаСотрудников);
	ТабличныйДокумент.Область("R7C" + КолонкаПриемник).Параметр = (СтруктураСотрудника.Должность);
	
	ТабличныйДокумент.Область("R3C" + КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", Сотрудник, СтруктураСотрудника.КодСотрудника, СтруктураСотрудника.Телефон);
	
	//---АК mika 
	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокФизЛицВТабеле(НовоеФизЛицо, ТекущееФизЛицо)
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	НайденнаяСтрока = ТЗ.Найти(ТекущееФизЛицо, "Сотрудник");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	Для Каждого Стр Из ТЗ Цикл
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			Стр.Порядок = Стр.Порядок + 1;
		КонецЕсли;
	КонецЦикла;	
		
	// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	СтрНовогоФЛ =  ТЗ.Найти(НовоеФизЛицо, "Сотрудник");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник 	 	= НовоеФизЛицо;
		НовСтр.КодСотрудника 	= НовоеФизЛицо.Код;
		НовСтр.Порядок   	 	= ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	// Обновим порядок
	Порядок = 1;
	Для Каждого Стр Из ТЗ Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// Запишем в регистр
	НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляАутсорсинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	НаборЗаписей.Записать();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
		Запись.Группа 			= ГруппаТорговыхТочек;
		Запись.ФизическоеЛицо 	= Стр.Сотрудник;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
 
	ЗначениеВРеквизитФормы(ТЗ, "ИнформацияПоСотрудникам");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	СписокСотрудников = Новый СписокЗначений;
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	СписокСотрудников.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Сотрудник"));
	
	Возврат СписокСотрудников;
	
КонецФункции

&НаСервере
Процедура ПеренестиФизЛицоВТабеле(ТекущаяКолонка, ФизЛицо)
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	ИскомаяКолонкаФЛ = 4;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = ФизЛицо Тогда
			ИскомаяКолонкаФЛ = НачальнаяКолонка;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;	
	
	Если ТекущаяКолонка <> ИскомаяКолонкаФЛ Тогда
		
		// Колонка Искомая всегда четная, в области 2 колонки
		ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТабличныйДокумент.Область("C" + ИскомаяКолонкаФЛ + ":C" + (ИскомаяКолонкаФЛ+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		//Удалим область
		Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
			ТекущаяКолонка = ТекущаяКолонка+2;
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикНаСервере(ДанныеКопирования)
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаСотрудникПериод");
	
	ТаблицаДанных = ТЗ.Скопировать();
	ТаблицаДанных.Очистить();
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеКопирования.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() Тогда
		
		НП = НачалоДня(ДанныеКопирования.НачалоПериода);
		КП = КонецДня(ДанныеКопирования.КонецПериода);
		
		Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
						
			Если СтрокаМассива.Период >= НП
					И СтрокаМассива.Период <= КП
					И РольДоступна("ОтветственныйЗаРаботуСАутсорсингом")
					И СтрокаМассива.Период < НачалоДня(ТекущаяДата()) Тогда
				Сообщить("Вам не разрешено редактировать график прошедшего времени");
				Возврат;
			КонецЕсли;

			Если СтрокаМассива.Период >= НП
					И СтрокаМассива.Период <= КП Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Сотрудник, с которого производится копирование не найден в графике");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Данные = Новый Структура;
		Данные.Вставить("Сотрудник", ТекущийПродавец);
		
		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
		Если ЗначениеЗаполнено(ТекущийПродавец)
				И ЗначениеЗаполнено(ГруппаТорговыхТочек)
				И ЗначениеЗаполнено(СтрокаТЗ.Период) Тогда
			ДанныеОчистки = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, СтрокаТЗ.Период);
			ОчиститьЗаписиВРегистре(ДанныеОчистки);
		КонецЕсли;
		
		Строки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, СтрокаТЗ.Период));
		Если Строки.Количество()Тогда
			
			Данные.Вставить("Период", СтрокаТЗ.Период);
			
			ТекСтр = Строки[0];
			ТД = ТекСтр.ТаблицаДанных;
			ТД.Очистить();
			
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			Представление   = "";
			КоличествоЧасов = 0;
			ТорговаяТочка = Неопределено;
			
			Для Каждого Стр Из СтрокаТЗ.ТаблицаДанных Цикл
				
				// Берем первую для раскраски макета
				Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					ТорговаяТочка = Стр.ТорговаяТочка;	
				КонецЕсли;
				
				Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
				Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
				ОшибкаПриЗаписи = Ложь;
				ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
				
				Если Не ОшибкаПриЗаписи Тогда
					
					ЗаполнитьЗначенияСвойств(ТД.Добавить(), Стр);
					
					//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
					Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
					КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
					
				Иначе
					Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЦикла;
			
			ПредставлениеТабличныйДокумент = Представление;
			
			ТекСтр.ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент;
			ТекСтр.Представление   					= Представление;
			ТекСтр.КоличествоЧасов 					= КоличествоЧасов;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаСотрудникПериод");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	МассивФизЛиц = ТЗ.ВыгрузитьКолонку("Сотрудник");
	
	Адрес = ПоместитьВоВременноеХранилище(МассивФизЛиц);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокумент(МассивФизическихЛиц)
	
	//+++АК mika 2018.01.18 Восстановление работоспособности обработки 
	//Возврат Обработки.ГрафикРаботыПродавцов_ТЗ.СформироватьТабличныйДокумент(МассивФизическихЛиц);
	Возврат Справочники.СотрудникиАутсорсинг.ПечатьБейджейНаСервере(МассивФизическихЛиц);  
	//---АК mika 
	
КонецФункции

&НаСервере
Процедура УстановитьПериодПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, 2) КАК ДатаОкончания");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Период.ДатаНачала 		= Макс(ГраницаЗапретаРедактирования + 86400, НачалоДня(Выборка.ДатаНачала));
		Период.ДатаОкончания 	= КонецДня(Выборка.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	ТаблицаЦветовТТ.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0, 0, 0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				НоваяСтр.Цвет 			= ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуТорговойТочкиСервер(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.ЦФО;
	Иначе
		
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//
	Парам = Новый Структура("ОтборПоТипу", ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего"));
	ОткрытьФорму("Справочник.РолиПользователей.Форма.ФормаВыбора", Парам, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
//+++AK ziga 07112017
&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если  ЭтоОтветственныйЗаАутсорс() Тогда 		
		СтандартнаяОбработка=Ложь;
		МассивКонтрагентов=ПолучитьГруппуСотрудников();
		СЗКонтрагентов=Новый СписокЗначений;
		СЗКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
		НастройкиКомп=Новый НастройкиКомпоновкиДанных;
		ОтборСписка=НастройкиКомп.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСписка.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Ссылка");
		ОтборСписка.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборСписка.ПравоеЗначение=СЗКонтрагентов;
		ОтборСписка.Использование=Истина;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки",НастройкиКомп);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов",ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая",ПараметрыФормы,Элемент);
	Иначе
		//+++АК mika 2018.07.09 ИП-00019215 Иногда сотрудники вкусвил помогают заполнить графики (или корректирую) которые формируют Менеджеры Аутсорс
		//Нужно добавить возможность автоматического определения "Группы сотруудника", и запретить запись данных с незаполненной группой/контрагентом

		////+++АК mika 2018.01.09 Зарытие дырок
		//СтандартнаяОбработка = Ложь;
		//
		//ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая", Новый Структура("Аутсорс"),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
		////---АК mika  ИП-00017263.01
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыборКонтрагентаЗавешение", ЭтаФорма);

		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая", Новый Структура("Аутсорс"),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 

		//---АК mika 
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК mika 2018.07.09 //+++АК mika 2018.07.09 ИП-00019215 запрет добаления записей, если не определена группа сотрудников и/или контрагент (+ Рефакторинг процедуры)
&НаСервере
Функция  ПолучитьГруппуСотрудников(ТекущийКонтрагент = Неопределено)
	
	ЕСли ЗначениеЗаполнено(ТекущийКонтрагент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников
		|ИЗ
		|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(&Период, Контрагент = &Контрагент) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Период", Период.ДатаНачала);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Возврат Выборка.ГруппаСотрудников;
			
		КонецЕсли;
		
	Иначе
		
		МассивСсылок = Новый Массив;
		
		ГруппаСотрудников = ПараметрыСеанса.ТекущийПользователь.ГруппаСотрудниковАутсорсинг;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних КАК КонтрагентыСотрудниковАутсорсингСрезПоследних
		|ГДЕ
		|	КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников = &ГруппаСотрудников";
		
		Запрос.УстановитьПараметр("ГруппаСотрудников",ГруппаСотрудников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивСсылок.Добавить(Выборка.Контрагент);
		КонецЦикла;                                  
		
		Возврат МассивСсылок;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтрагентаПараметраСеанса() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Группа=ПараметрыСеанса.ТекущийПользователь.ГруппаСотрудниковАутсорсинг;
	Если ЗначениеЗаполнено(Группа) Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(, ГруппаСотрудников = &ГруппаСотрудников) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних";
		
		Запрос.УстановитьПараметр("ГруппаСотрудников", Группа);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Контрагент;
		КонецЦикла;
		Возврат Неопределено;
	Иначе	
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура МенеджерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ЗначениеОтбора=Новый Структура("Должность",ПолучитьСправочникМенеджер());
	ПараметрыОтбора=Новый Структура("Отбор",ЗначениеОтбора);
	ОткрытьФорму("Справочник.СотрудникиАутсорсинг.ФормаВыбора",ПараметрыОтбора, Элемент); //+++АК mika 2018.01.10 Нет задачи, восстановление работоспособности (добавлен Владелец ", Элемент")
																						  																						  
	
КонецПроцедуры
//
&НаСервере
Функция ПолучитьСправочникМенеджер()
	Возврат Справочники.ДолжностиВнештатныхСотрудников.НайтиПоНаименованию("Менеджер");
КонецФункции

//---Ak ziga

&НаКлиенте
Процедура ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2017.12.08 ИП-00017263.01

	РедактированиеОбластей = ДополнительныеПараметры.Свойство("ТекДанные") И Ложь;
	
	РедактированиеОбластей = Мин(РедактированиеОбластей, РедактированиеТабДокумента);
	
	Если РедактированиеОбластей Тогда 
		ТекДанные = ДополнительныеПараметры.ТекДанные;
	Иначе
		ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;   //+++АК mika 2017.12.08 ИП-00017263.01 Удалить, если утвердят открытие по расшифровке
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОтветственныйЗаАутсорс()
			И ТекДанные.Период < НачалоДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")Тогда
		
		Если РедактированиеОбластей Тогда //Только для одной строки!! Будет передаваться массив (или по одной строке)
			
			Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки.Очистить();
			
			Для каждого Идентификатор из МассивИдентификаторов Цикл
				Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки.Добавить(Идентификатор);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки Цикл
			
			ТекущаяСтрока = ТаблицаСотрудникПериод.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			ТекущаяСтрока.Сотрудник       = ТекущийПродавец;
			ТекущаяСтрока.Представление   = Результат.Представление;
			ТекущаяСтрока.КоличествоЧасов = Результат.КоличествоЧасов;
			
			ТекущаяСтрока.ТаблицаДанных.Очистить();
			
			Для каждого ЭлементМассива Из Результат.ТаблицаДанных Цикл
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока.ТаблицаДанных.Добавить(), ЭлементМассива); 
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаполнитьТаблицуДанныхСтроки(Результат);
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСотрудникИзменитьТорговыеТочкиЗавершение()

&НаСервере
// Предназначена для заполнения параметров формы данными по текущему пользователю
//
Процедура ЗаполнитьПараметрыФормы() //+++АК mika 2017.12.08 ИП-00017263.01
	
	ЗаполнитьТекущегоПомощникаУправляющего();
	
	ГруппаСотрудников = ПараметрыСеанса.ТекущийПользователь.ГруппаСотрудниковАутсорсинг;
	
	Параметры.Свойство("ОткрыватьФорму", ОткрыватьФорму);
	
КонецПроцедуры // ЗаполнитьПараметрыФормы()

&НаКлиенте
//Процедура обновляет видимость основных элементов формы клиент
//
Процедура ОбновитьВидимостьЭлементовКлиент() //+++АК mika 2017.12.08 ИП-00017263.01
	
	//Разрешить доступ внештатным Менеджерам //+++АК mika 2018.01.25  ИП-00017263.01
	//#Если ВебКлиент Тогда
	//	Элементы.ФормаОбщаяКомандаРедактированиеЖурналаУчетаСотрудников.Видимость = Ложь;	
	//#КонецЕсли
	
КонецПроцедуры
	
&НаСервере
//Процедура обновляет видимость основных элементов формы сервер
//
Процедура ОбновитьВидимостьЭлементовСервер() //+++АК mika 2017.12.08 ИП-00017263.01
	
	ЭтоАутсорс = ЗначениеЗаполнено(ГруппаСотрудников);
	
	Элементы.ПодменюОтчеты.Видимость = Ложь; //Отчеты скрыть всем
	
	//Ограничение возможности редактирования графика Продавцам
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	РольПродавец = РольДоступна("Продавец");
	
	ЭтоПродавец = РольПродавец И НЕ РольПолныеПрава И НЕ ЗначениеЗаполнено(ТекущийПомощник);
	
	Если ЭтоПродавец Тогда
		
		Попытка
			Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
		КонецПопытки;
		
		//ГруппаТорговыхТочек = ПолучитьГруппуТорговойТочкиСервер(Магазин);
		//Элементы.ГруппаТорговыхТочек.ТолькоПросмотр = ЭтоПродавец;
		Элементы.Магазин.Видимость = НЕ ЭтоПродавец;
		Элементы.Декорация1.Видимость = НЕ ЭтоПродавец;
		
	КонецЕсли;
	
	Элементы.ГруппаРедактированиеОбластейОсновная.Видимость = Не ЭтоПродавец;
	
	РедактированиеТабДокумента = Ложь ; //Попросили вернуть табличную часть торговых точек
	
	//Элементы.ГруппаДанныеЛево.Видимость = НЕ РедактированиеТабДокумента;
	Элементы.ГруппаРедактированиеОбластей.Видимость = РедактированиеТабДокумента;
	Элементы.ГруппаРедактированиеОбластейКонтекст.Видимость = РедактированиеТабДокумента;
		
КонецПроцедуры // ОбновитьВидимостьЭлементов()

&НаСервере
//Функция возвращает текст запроса для заполнения макета обработки
//
// Возвращаемое значение:
//   <Тип.Строка>   - Текст запроса
//
Функция ПолучитьТекстЗапросаДляЗаполненияМакета() //+++АК mika 2017.12.08 ИП-00017263.01
	
	Возврат 
	
	"ВЫБРАТЬ
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.НомерТелефона КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.ГруппаСотрудников КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ПО ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.ТорговаяТочка В(&ТорговаяТочка)
	|	И (ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка))
	|	И (СоответствиеОбъектРольСрезПоследних.РольПользователя = &Помощник
	|			ИЛИ &Помощник = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность = &Должность
	|			ИЛИ &Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиВнештатныхСотрудников.Пустаяссылка))
	|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.ОтветственныйМенеджер = &Менеджер
	|			ИЛИ &Менеджер = ЗНАЧЕНИЕ(Справочник.СотрудникиАутсорсинг.Пустаяссылка))
	|	И ВЫБОР
	|			КОГДА &СотрудникМобильный = ИСТИНА
	|				ТОГДА ТабельРаботыВнештатныхСотрудников.Сотрудник.Мобильный
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.НомерТелефона КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.ГруппаСотрудников КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность,
	|	ТабельРаботыВнештатныхСотрудников.Вид КАК Вид,
	|	ТабельРаботыВнештатныхСотрудников.Тип КАК Тип,
	|	ТабельРаботыВнештатныхСотрудников.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				вт.Сотрудник
	|			ИЗ
	|				вт)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Сотрудник,
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Телефон),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Должность)
	|ПО
	|	Сотрудник,
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	
КонецФункции

&НаСервере
//Процедура заполняет данные выполняет запрос и обрабатывает выборки 
//
// Параметры:
//   <Тип.Запрос>   - Запрос для выполнения
// 
Процедура ОбработатьРезультатЗапроса(Запрос) //+++АК mika 2017.12.08 ИП-00017263.01
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ВыборкаСотрудник = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудник.Следующий()Цикл
			
			ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
			
			ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПериод.Следующий()Цикл
				
				НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
				
				Представление   = "";
				
				ДетальнаяВыборка = ВыборкаПериод.Выбрать();
				
				Пока ДетальнаяВыборка.Следующий()Цикл
					
					НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
					
					Если НЕ ЗначениеЗаполнено(ДетальнаяВыборка.Вид) Тогда
						Представление = Представление + ДетальнаяВыборка.ТорговаяТочка + " (" + ДетальнаяВыборка.КоличествоЧасов + " ч.),";
					ИначеЕсли ДетальнаяВыборка.Вид = "Выход" Тогда
						Представление = Представление + ПолучитьПрефиксВыхода(ДетальнаяВыборка.Тип) + ДетальнаяВыборка.ТорговаяТочка + " (" + ДетальнаяВыборка.КоличествоЧасов + " ч.),";
					Иначе
						Представление = Представление + ДетальнаяВыборка.Вид + ","; 
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Представление) Тогда
					Представление = Лев(Представление, СтрДлина(Представление)-1);
				КонецЕсли;
				
				НоваяСтрока.Представление = Представление;
				НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Процедура заполняет данные выледеленных строк и инициирует обновление записей в регистре 
//
// Параметры:
//   <Тип.Структура>   - Структура параметров
// 
Процедура ЗаполнитьТаблицуДанныхСтроки(СтруктураДанных) //+++АК mika 2017.12.08 ИП-00017263.01
	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекущаяСтрока = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		
		//+++АК mika 2018.01.25 
		//Изменение структуры отчета (убрать разрез Группы Торговых точек)
		//Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекущаяСтрока.Период);
		Данные = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекущаяСтрока.Период);
		
		Если ЗначениеЗаполнено(ТекущийПродавец)	И ЗначениеЗаполнено(ТекущаяСтрока.Период) Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущаяСтрока.ТаблицаДанных Цикл
			
			ОшибкаПриЗаписи = Ложь;
			
			ОбновитьЗаписиРегистраСведений(ТекущаяСтрока, Строка, ОшибкаПриЗаписи);
			
			Если Не ОшибкаПриЗаписи Тогда
				ОбновитьДанныеВТабличномДокументе(ТекущаяСтрока.Период, СтруктураДанных.Представление, СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
			КонецЕсли;
			
		КонецЦикла;
		
		//Очистка ячейки
		Если ТекущаяСтрока.ТаблицаДанных.Количество() = 0 Тогда
			ОбновитьДанныеВТабличномДокументе(ТекущаяСтрока.Период, СтруктураДанных.Представление, СтруктураДанных.КоличествоЧасов, СтруктураДанных.ТорговаяТочка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&Насервере
//Функция возвращает структуру дополнительных реквизитов по сотруднику
//
Функция ПолучитьСтруктуруТекущегоСотрудника(ТекущийПродавец) //+++АК mika 2017.12.08 ИП-00017263.01
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиАутсорсинг.Ссылка,
	|	СотрудникиАутсорсинг.ГруппаСотрудников,
	|	СотрудникиАутсорсинг.Должность,
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент КАК Контрагент,
	|	СотрудникиАутсорсинг.НомерТелефона КАК Телефон,
	|	ВЫБОР
	|		КОГДА &ТекущийПродавец <> ЗНАЧЕНИЕ(Справочник.СотрудникиАутсорсинг.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(&ТекущийПродавец КАК Справочник.СотрудникиАутсорсинг).Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодСотрудника
	|ИЗ
	|	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(&Период, ) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних
	|		ПО СотрудникиАутсорсинг.ГруппаСотрудников = КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников
	|ГДЕ
	|	СотрудникиАутсорсинг.Ссылка = &ТекущийПродавец";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ГруппаСотрудников", ГруппаСотрудников);
	Запрос.УстановитьПараметр("ТекущийПродавец", ТекущийПродавец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтруктураСотрудника = Новый Структура();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураСотрудника.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураСотрудника.Вставить("ГруппаСотрудников", Выборка.ГруппаСотрудников);
			СтруктураСотрудника.Вставить("Должность", Выборка.Должность);
			СтруктураСотрудника.Вставить("Телефон", Выборка.Телефон);
			СтруктураСотрудника.Вставить("КодСотрудника", Выборка.КодСотрудника);
			
		КонецЦикла;
		
		Возврат СтруктураСотрудника;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
	
&НаСервере
//Обновление записей регистра сведений "Табель работы сотрудников (аутсорсинг)"
//
Процедура ОбновитьЗаписиРегистраСведений(ТекущаяСтрока, СтрокаДанных, ОшибкаПриЗаписи) //+++АК mika 2017.12.08 ИП-00017263.01
	
	Запись = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
	
	Запись.Период    = ТекущаяСтрока.Период;
	Запись.Сотрудник = ТекущаяСтрока.Сотрудник;
	Запись.Вид       = СтрокаДанных.Вид;
	Запись.Тип       = СтрокаДанных.Тип;
	
	Запись.ТорговаяТочка = СтрокаДанных.ТорговаяТочка;
	
    Запись.Значение = СтрокаДанных.Значение;

	Запись.КоличествоЧасов = СтрокаДанных.КоличествоЧасов;
	
	СтруктураСотрудника = ПолучитьСтруктуруТекущегоСотрудника(ТекущаяСтрока.Сотрудник);
	
	Если СтруктураСотрудника <> Неопределено Тогда
		Запись.Контрагент	     = СтруктураСотрудника.Контрагент;
		Запись.Должность	     = СтруктураСотрудника.Должность;
		Запись.ГруппаСотрудников = СтруктураСотрудника.ГруппаСотрудников;
	КонецЕсли;
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(СтрЗаменить("Данные за Период не записаны! ", "Период", Формат(Запись.Период, "ДФ=dd.MM.yyyy")) + ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
//Функция формирует и возвращает префикс для представления торговых точек
//
// Параметры
// Тип  - <Тип.Строка> - Тип сотрудника (Дневной, Ночной, Стажер)
//
// Возвращаемое значение:
//   <Тип.Строка>   - префикс
//
Функция ПолучитьПрефиксВыхода(Тип) //+++АК mika 2017.12.08 ИП-00017263.01
	
	Если Тип = "Ночной" Тогда
		Возврат "н, ";
	ИначеЕсли Тип = "Стажер" Тогда
		Возврат "ст, ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции //ПолучитьПрефиксВыхода()

&НаКлиенте
// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры
//  ИмяФормы  - - имя формы объекта
//
// Возвращаемое значение:
//      - полный путь к форме
//
Функция ПолучитьПолноеИмяФормы(ИмяФормы) //+++АК mika 2017.12.08 ИП-00017263.01

    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
//Обновление видимости группы дополнительных отборов
//
Процедура ОбновитьВидимостьДополнительныхОтборов() //+++АК mika 2018.01.12 ИП-00017263.01
	
	Элементы.ФормаДополнительныеОтборы.Пометка = НЕ Элементы.ФормаДополнительныеОтборы.Пометка;
	
	Элементы.Помощник.Видимость  = Элементы.ФормаДополнительныеОтборы.Пометка;	
	Элементы.Менеджер.Видимость  = Элементы.ФормаДополнительныеОтборы.Пометка;
	Элементы.Должность.Видимость = Элементы.ФормаДополнительныеОтборы.Пометка;
	Элементы.СотрудникМобильный.Видимость = Элементы.ФормаДополнительныеОтборы.Пометка;
	
КонецПроцедуры

&НаКлиенте
// Формирует массив идентификаторов для заполнения выбранных ячеек данными
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак сформирован массив или нет
//
Функция ОбновитьМассивИдентификаторовПериодовРасшифровки() //+++АК mika 2018.01.12 ИП-00017263.01
	
	МассивИдентификаторов = Новый Массив();
	МассивПериодов = Новый Массив();
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево <> Элементы.ТабличныйДокумент.ТекущаяОбласть.Право-1 Тогда
		Сообщить(НСтр("ru = 'Запрещено указывать торговые точки нескольким сотрудникам одновременно!';"));
		Возврат Ложь;
	КонецЕсли;
		
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;

	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;

	НачалоВыделеннойОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	КонецВыделеннойОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ;
	
	Пока НачалоВыделеннойОбласти <= КонецВыделеннойОбласти Цикл
		
		Расшифровка = ТабличныйДокумент.Область(НачалоВыделеннойОбласти, НомерКолонкиРасшифровки, НачалоВыделеннойОбласти, НомерКолонкиРасшифровки).Расшифровка;
		
		Если Расшифровка  <> Неопределено И Расшифровка.Свойство("Период") Тогда
			МассивПериодов.Добавить(Расшифровка.Период);
		КонецЕсли;
		
		НачалоВыделеннойОбласти = НачалоВыделеннойОбласти + 1;
		
	КонецЦикла;
	
	Для каждого ТекущийПериод из МассивПериодов Цикл
		НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекущийПериод));
		Если НайденныеСтроки.Количество() = 1 Тогда
			МассивИдентификаторов.Добавить(НайденныеСтроки[0].ПолучитьИдентификатор());     
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&Насервере
// Заполнение текущего помощника управляющего по функциональной роли
//
Процедура ЗаполнитьТекущегоПомощникаУправляющего();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизическоеЛицо
	|ИЗ
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	РолиПользователейСоставРоли.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийПомощник = Выборка.ФизическоеЛицо;
		
	Иначе
		
		ТекущийПомощник = Справочники.ФизическиеЛица.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбласть(Команда) //+++АК mika 2018.01.16 ИП-00017263.01
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьОбластьВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Выделенная область будет очищена! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбластьВопросЗавершение(Результат, ДопПараметры) Экспорт  //+++АК mika 2018.01.16 ИП-00017263.01
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
		
		НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
		Если НомерКолонкиРасшифровки > 1 Тогда
			НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
		КонецЕсли;
		
		Расшифровка = ТабличныйДокумент.Область(Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки, Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ, НомерКолонкиРасшифровки).Расшифровка;
		
		Если ОбновитьМассивИдентификаторовПериодовРасшифровки() Тогда	
			НайденнаяСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, ТекущийПродавец));
			Если НайденнаяСтроки.Количество() =  1 Тогда
				ТаблицаСотрудникПериодИзменитьДанные(НайденнаяСтроки[0], Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //+++АК mika 2018.01.16 ИП-00017263.01
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора", Новый Структура("Отбор, СформироватьПриОткрытии", 
			Новый Структура("Активное, ТипРозничнойТочки", Истина, ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин")), Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЖурналУчетаВнештатныхСотрудников(Команда) //+++АК mika 2018.02.15 ИП-00017263.04
	
	ОткрытьФорму("Обработка.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.Форма.Форма", Новый Структура("НачалоПериода, КонецПериода, Контрагент", Период.ДатаНачала, Период.ДатаОкончания, Контрагент),,,ВариантОткрытияОкна.ОтдельноеОкно); 
	
КонецПроцедуры

//+++АК mika 2018.07.09 ИП-00019215 запрет добаления записей, если не определена группа сотрудников и/или контрагент
&НаКлиенте
Процедура ВыборКонтрагентаЗавешение(Результат, ДопПараметры) Экспорт   
	
	Если Результат <> Неопределено Тогда
		Контрагент = Результат;

		Если ЗначениеЗаполнено(Контрагент) Тогда
			ГруппаСотрудников = ПолучитьГруппуСотрудников(Контрагент)
		Иначе
			ГруппаСотрудников = ПредопределенноеЗначение("Справочник.ГруппыСотрудниковАутсорсинг.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ГруппаСотрудников) Тогда
			Сообщить(СтрЗаменить("По контрагенту ТекущийКонтрагент не определена группа сотрудников (проверьте привязки в Группа сотрудников → Контрагент)!", "ТекущийКонтрагент", Контрагент));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры





