
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++АК mika 2018.01.19 ИП-00017263.02 
	//Подключение внештатных сотрудников с отбором по доступным группам  
	//(в запрос добавлены параметры ВсеГруппы и ГруппаСотрудников)
	Параметры.Свойство("ГруппаСотрудников", ГруппаСотрудников);
	
	Если ЗначениеЗаполнено(ГруппаСотрудников) Тогда
		
		//Корректировка элементов формы
		ЭтаФорма.АвтоЗаголовок = Ложь;
		Элементы.ТабДанные.ПодчиненныеЭлементы.ТабДанныеСотрудник.КнопкаСпискаВыбора = Ложь;
		Элементы.ТабДанные.ПодчиненныеЭлементы.ТабДанныеСотрудник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СотрудникиАутсорсинг");
		
	КонецЕсли;
	//---АК mika
	
	//+++АК mika 2018.03.29 ИП-00018000 Рефакторинг
    //Все содержимое процедуры вынесено в отдельную процедуру, 
	//т.к. у пользователя должна быть возможность обновить форму
	//(Продавцы не видят отметнок из Фронтола, поскольку форма у них открыты "весь день" 
	// и скорее всего даже не подозревают, что сотрудник уже отмечался)
	ЗаполнитьТаблицуОтметокСервер();  
	//---АК mika ИП-00018000
	
КонецПроцедуры

Процедура УдалитьДанные(idСтроки)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "DELETE FROM [srv-sql04].[frontol].[dbo].[CashierTime]
	|  where id = " + ВнешниеДанные.ФорматПоля(idСтроки);
	
	ADOСоединение.Execute(ТекстЗапроса);
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ОчиститьЗаписиЖурналаПоID(idСтроки);//+++АК mika 2018.03.29 ИП-00018000
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабДанныеПередУдалением(Элемент, Отказ)
	
	Если Элементы.ТабДанные.ТекущиеДанные = Неопределено Тогда
		Возврат; //+++АК mika 2018.06.08 Без задачи (оптимизация)
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.Сотрудник) Тогда
		Ответ = Вопрос("Вы действительно хотите удалить данные по сотруднику: " + Элементы.ТабДанные.ТекущиеДанные.Сотрудник + "?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.idЗаписиУход) Тогда
		УдалитьДанные(Элементы.ТабДанные.ТекущиеДанные.idЗаписиУход);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.idЗаписиПриход) Тогда
		УдалитьДанные(Элементы.ТабДанные.ТекущиеДанные.idЗаписиПриход);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуСервер()
	
	Возврат ТекущаяДата();
	
КонецФункции	

Процедура ЗаписатьДанныеПоСтроке(ИдентификаторСтроки, ДействиеПоШк = Ложь)
	
	ТекДанные = ТабДанные.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Если ЗначениеЗаполнено(ТекДанные.idЗаписиПриход) Тогда
		ТекстЗапроса = "DELETE FROM [srv-sql04].[frontol].[dbo].[CashierTime]
						|  where id = " + ВнешниеДанные.ФорматПоля(ТекДанные.idЗаписиПриход);
		ADOСоединение.Execute(ТекстЗапроса);
		РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ОчиститьЗаписиЖурналаПоID(ТекДанные.idЗаписиПриход);//+++АК mika 2018.03.29 ИП-00018000
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.idЗаписиУход) Тогда
		ТекстЗапроса = "DELETE FROM [srv-sql04].[frontol].[dbo].[CashierTime]
						|  where id = " + ВнешниеДанные.ФорматПоля(ТекДанные.idЗаписиУход);
		ADOСоединение.Execute(ТекстЗапроса);
		РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ОчиститьЗаписиЖурналаПоID(ТекДанные.idЗаписиУход);//+++АК mika 2018.03.29 ИП-00018000
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Сотрудник) Тогда
		Если ЗначениеЗаполнено(ТекДанные.idЗаписиПриход)
			И ЗначениеЗаполнено(ТекДанные.ДатаПрихода) Тогда
			ТекстЗапроса = "INSERT INTO [srv-sql04].[frontol].[dbo].[CashierTime]
							 |      ([id]
							 |      ,[CashierID]
							 |      ,[ShopNo]
							 |      ,[DateTimeAdd]
							 |      ,[Flag]
							 |      ,[Barcode]
							 |      ,[CashID]
							 |      ,[tt_format]
							 |      ,[input_type])
							 |VALUES
							 |      (" + ВнешниеДанные.ФорматПоля(ТекДанные.idЗаписиПриход) + "
							 |      ," + ВнешниеДанные.ФорматПоля(?(ТипЗнч(ТекДанные.Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица"), ТекДанные.Сотрудник.Код, ТекДанные.Сотрудник.ИД)) + "
							 |      ," + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + "
							 |      ," + ВнешниеДанные.ФорматПоля(ТекДанные.ДатаПрихода) + "
							 |      ,1
							 |      ,null
							 |      ,null
							 |      ,2
							 |      ," + ?(ДействиеПоШк, "1", "2") + "
							 |	)";
			ADOСоединение.Execute(ТекстЗапроса);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.idЗаписиУход)
			И ЗначениеЗаполнено(ТекДанные.ДатаУхода) Тогда
			ТекстЗапроса = "INSERT INTO [srv-sql04].[frontol].[dbo].[CashierTime]
							 |      ([id]
							 |      ,[CashierID]
							 |      ,[ShopNo]
							 |      ,[DateTimeAdd]
							 |      ,[Flag]
							 |      ,[Barcode]
							 |      ,[CashID]
							 |      ,[tt_format]
							 |      ,[input_type])
							 |VALUES
							 |      (" + ВнешниеДанные.ФорматПоля(ТекДанные.idЗаписиУход) + "
							 |      ," + ВнешниеДанные.ФорматПоля(?(ТипЗнч(ТекДанные.Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица"), ТекДанные.Сотрудник.Код, ТекДанные.Сотрудник.ИД)) + "
							 |      ," + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + "
							 |      ," + ВнешниеДанные.ФорматПоля(ТекДанные.ДатаУхода) + "
							 |      ,0
							 |      ,''
							 |      ,null
							 |      ,2
							 |      ," + ?(ДействиеПоШк, "1", "2") + "
							 |	)";
			ADOСоединение.Execute(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДатуПрихода(Команда)
	
	Если Элементы.ТабДанные.ТекущиеДанные = Неопределено Тогда
		Возврат; //+++АК mika 2018.06.08 Без задачи (оптимизация)
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.Сотрудник) Тогда
		Сообщить("Не указан сотрудник");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Установить/изменить дату прихода по сотруднику: " + Элементы.ТабДанные.ТекущиеДанные.Сотрудник + "?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТабДанные.ТекущиеДанные.ДатаПрихода = ПолучитьДатуСервер();
	Если Не ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.idЗаписиПриход) Тогда
		Элементы.ТабДанные.ТекущиеДанные.idЗаписиПриход = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;	
	ЗаписатьДанныеПоСтроке(Элементы.ТабДанные.ТекущаяСтрока);
	
КонецПроцедуры

Функция ПолучитьМассивСотрудников()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЗ_Запрос.Сотрудник
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТабельРаботыГрузчиков.Сотрудник КАК Сотрудник
	               |	ИЗ
	               |		РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыГрузчиков
	               |	ГДЕ
	               |		ТабельРаботыГрузчиков.Период = &Период
	               |		И ТабельРаботыГрузчиков.ТорговаяТочка = &ТорговаяТочка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТабельРаботыКассиров.Сотрудник
	               |	ИЗ
	               |		РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
	               |	ГДЕ
	               |		ТабельРаботыКассиров.Период = &Период
	               |		И ТабельРаботыКассиров.ТорговаяТочка = &ТорговаяТочка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТабельРаботыПродавцов.Сотрудник
	               |	ИЗ
	               |		РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	               |	ГДЕ
	               |		ТабельРаботыПродавцов.Период = &Период
	               |		И ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТабельРаботыПромоутеров.Сотрудник
	               |	ИЗ
	               |		РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПромоутеров
	               |	ГДЕ
	               |		ТабельРаботыПромоутеров.Период = &Период
	               |		И ТабельРаботыПромоутеров.ТорговаяТочка = &ТорговаяТочка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТабельРаботыСотрудниковАутсорсинг.Сотрудник
	               |	ИЗ
	               |		РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыСотрудниковАутсорсинг
	               |	ГДЕ
	               |		ТабельРаботыСотрудниковАутсорсинг.Период = &Период
	               |		И ТабельРаботыСотрудниковАутсорсинг.ТорговаяТочка = &ТорговаяТочка) КАК ВЗ_Запрос";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

&НаКлиенте
Процедура ТабДанныеСотрудникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСотрудников());
	
КонецПроцедуры

Функция ПолучитьСотрудникаПоШК(ШтрихКод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсоналККМ.Ссылка,
	               |	ПерсоналККМ.Код
	               |ИЗ
	               |	Справочник.ПерсоналККМ КАК ПерсоналККМ
	               |ГДЕ
	               |	ПерсоналККМ.Пароль = &Пароль";
				   
	Запрос.УстановитьПараметр("Пароль", СокрЛП(ШтрихКод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СотрудникПоШК = Справочники.ФизическиеЛица.НайтиПоКоду(Выборка.Код);
		Если НЕ ЗначениеЗаполнено(СотрудникПоШК) Тогда
			СотрудникПоШК = Справочники.СотрудникиАутсорсинг.НайтиПоРеквизиту("ИД", Число(Выборка.Код));
		КонецЕсли;	
		Возврат СотрудникПоШК;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СотрудникПоШК = ПолучитьСотрудникаПоШК(ШтрихКод);
		Если ЗначениеЗаполнено(СотрудникПоШК) Тогда
			СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("Сотрудник", СотрудникПоШК));
			Если СтрокиДанные.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(СтрокиДанные[0].ДатаПрихода)
					И НЕ ЗначениеЗаполнено(СтрокиДанные[0].ДатаУхода) Тогда
					СтрокиДанные[0].ДатаУхода = ТекущаяДата();
					Если Не ЗначениеЗаполнено(СтрокиДанные[0].idЗаписиУход) Тогда
						СтрокиДанные[0].idЗаписиУход = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;	
					ЗаписатьДанныеПоСтроке(СтрокиДанные[0].ПолучитьИдентификатор(), Истина);
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокиДанные[0].ДатаПрихода) Тогда
					СтрокиДанные[0].ДатаПрихода = ПолучитьДатуСервер();
					Если Не ЗначениеЗаполнено(СтрокиДанные[0].idЗаписиПриход) Тогда
						СтрокиДанные[0].idЗаписиПриход = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					ЗаписатьДанныеПоСтроке(СтрокиДанные[0].ПолучитьИдентификатор(), Истина);
				КонецЕсли;
			Иначе
				СтрокаДоб = ТабДанные.Добавить();
				СтрокаДоб.Сотрудник = СотрудникПоШК;
				СтрокаДоб.ДатаПрихода = ПолучитьДатуСервер();
				Если Не ЗначениеЗаполнено(СтрокаДоб.idЗаписиПриход) Тогда
					СтрокаДоб.idЗаписиПриход = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				ЗаписатьДанныеПоСтроке(СтрокаДоб.ПолучитьИдентификатор(), Истина);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуУхода(Команда)
	
	Если Элементы.ТабДанные.ТекущиеДанные = Неопределено Тогда
		Возврат; //+++АК mika 2018.06.08 Без задачи (оптимизация)
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.Сотрудник) Тогда
		Сообщить("Не указан сотрудник");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.ДатаПрихода) Тогда
		Сообщить("Не указана дата прихода");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Установить/изменить дату ухода по сотруднику: " + Элементы.ТабДанные.ТекущиеДанные.Сотрудник + "?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТабДанные.ТекущиеДанные.ДатаУхода = ТекущаяДата();
	Если Не ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.idЗаписиУход) Тогда
		Элементы.ТабДанные.ТекущиеДанные.idЗаписиУход = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;	
	ЗаписатьДанныеПоСтроке(Элементы.ТабДанные.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДанныеСотрудникПриИзменении(Элемент)
	
	СтрокиТаб = ТабДанные.НайтиСтроки(Новый Структура("Сотрудник", Элементы.ТабДанные.ТекущиеДанные.Сотрудник));
	Если СтрокиТаб.Количество() > 1 Тогда
		Для Каждого СтрокаТаб Из СтрокиТаб Цикл
			Если ТабДанные.Индекс(СтрокаТаб) <> ТабДанные.Индекс(Элементы.ТабДанные.ТекущиеДанные)
				И НЕ ЗначениеЗаполнено(Элементы.ТабДанные.ТекущиеДанные.ДатаУхода) Тогда
				Сообщить("Уже есть строка с данным сотрудником без указания даты окончания");
				Элементы.ТабДанные.ТекущиеДанные.Сотрудник = Неопределено;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ЗаписатьДанныеПоСтроке(Элементы.ТабДанные.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//СотрудникПред = Элементы.ТабДанные.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаСервере
//Процедура отображения данных из фронтол (Рефакторинг)
//(Процедура собрана из процедуры "ПриСозданииНаСервере()", Автор оригинала: mind)
//
Процедура ЗаполнитьТаблицуОтметокСервер(ТекущаяДата = Неопределено) //+++АК mika 2018.03.29 ИП-00018000

	//+++АК mika 2018.03.29 ИП-00018000
	Если НЕ ЗначениеЗаполнено(ТекущаяДата) Тогда
		ТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	ТабДанные.Очистить();
	//---АК mika
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Код
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	               |	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	               |	И &ВсеГруппы = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиАутсорсинг.Ссылка,
	               |	СотрудникиАутсорсинг.ИД
	               |ИЗ
	               |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
	               |ГДЕ
	               |	(&ВсеГруппы
	               |			ИЛИ СотрудникиАутсорсинг.ГруппаСотрудников = &ГруппаСотрудников)";
	
	//+++АК mika 2018.01.19 ИП-00017263.02 
	//Подключение внештатных сотрудников с отбором по доступным группам  
	//(в запрос добавлены параметры ВсеГруппы и ГруппаСотрудников)
	Запрос.УстановитьПараметр("ВсеГруппы", НЕ ЗначениеЗаполнено(ГруппаСотрудников));
	Запрос.УстановитьПараметр("ГруппаСотрудников", ГруппаСотрудников);
	//---АК mika
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПродавцы = Результаты[0].Выгрузить();
	ТабПродавцы.Индексы.Добавить("Код");
	
	ТабАутсорсинг = Результаты[1].Выгрузить();
	ТабАутсорсинг.Индексы.Добавить("ИД");
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT CAST(VZ_Zapros.id as nvarchar(36)) id, VZ_Zapros.CashierID, VZ_Zapros.DateTimeAdd, VZ_Zapros.Flag
					|FROM (SELECT CT.id
					|      ,CT.CashierID
					|      ,CT.DateTimeAdd
					|      ,CT.Flag
					|      ,ROW_NUMBER() OVER (PARTITION BY CashierID, Flag Order by DateTimeAdd desc) as rn
					|  FROM [srv-sql04].[frontol].[dbo].[CashierTime]  as CT (nolock)
					//+++АК mika 2018.03.29 ИП-00018000
					//|  where CT.DateTimeAdd >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата() - 86400)) + " and CT.ShopNo = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + ") as VZ_Zapros
					|  where CT.DateTimeAdd >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата - 86400)) + ?(НачалоДня(ТекущаяДата) <> НачалоДня(ТекущаяДата()), "
					|    and CT.DateTimeAdd <= " + ВнешниеДанные.ФорматПоля(КонецДня(ТекущаяДата)),"") + "
					|    and CT.ShopNo = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + ") as VZ_Zapros
					//---АК mika
					|  where VZ_Zapros.rn = 1
					|  order by Flag desc
					|";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			КодПродавец = Rs.Fields("CashierID").Value;
			Если ЗначениеЗаполнено(КодПродавец) Тогда
				Продавец = Неопределено;
				СтрокаТабПродавцы = ТабПродавцы.Найти(Прав("0000000000" + Формат(КодПродавец, "ЧГ=0"), 10), "Код");
				Если СтрокаТабПродавцы = Неопределено Тогда
					СтрокаТабАутсорс = ТабАутсорсинг.Найти(КодПродавец, "ИД");
					Если СтрокаТабАутсорс <> Неопределено Тогда
						Продавец = СтрокаТабАутсорс.Ссылка;
					КонецЕсли;	
				Иначе
					Продавец = СтрокаТабПродавцы.Ссылка;
				КонецЕсли;
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокиДоб = ТабДанные.НайтиСтроки(Новый Структура("Сотрудник", Продавец));
					Если СтрокиДоб.Количество() = 0 Тогда
						СтрокаДоб = ТабДанные.Добавить();
					Иначе
						СтрокаДоб = СтрокиДоб[0];
					КонецЕсли;
					СтрокаДоб.Сотрудник = Продавец;
					Если Rs.Fields("Flag").Value = 1 Тогда
						СтрокаДоб.ДатаПрихода = Rs.Fields("DateTimeAdd").Value;
						СтрокаДоб.idЗаписиПриход = Rs.Fields("id").Value;
					ИначеЕсли Rs.Fields("Flag").Value = 0
						И Rs.Fields("DateTimeAdd").Value >= СтрокаДоб.ДатаПрихода Тогда
						СтрокаДоб.ДатаУхода = Rs.Fields("DateTimeAdd").Value;	
						СтрокаДоб.idЗаписиУход = Rs.Fields("id").Value;
					КонецЕсли;
					//+++АК mika 2018.03.30 ИП-00018000
					СтрокаДоб.Внештатный = ТипЗнч(Продавец) = Тип("СправочникСсылка.СотрудникиАутсорсинг");  
					//---АК mika ИП-00018000
				КонецЕсли;	
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	КолвоСтрок = ТабДанные.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если НЕ ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаПрихода) Тогда
			ТабДанные.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаПрихода)
			И ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаУхода)
			И ТабДанные[КолвоСтрок - н].ДатаУхода < НачалоДня(ТекущаяДата()) Тогда
			ТабДанные.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьТаблицуОтметокСервер()

&НаКлиенте
Процедура КомандаОбновить(Команда) //+++АК mika 2018.03.29 ИП-00018000
	
	ЗаполнитьТаблицуОтметокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьЗаДату(Команда) //+++АК mika 2018.03.29 ИП-00018000

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
	
	ПоказатьВводДаты(ОписаниеОповещения,ТекущаяДата(),"Введите дату", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2018.03.29 ИП-00018000
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьТаблицуОтметокСервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

