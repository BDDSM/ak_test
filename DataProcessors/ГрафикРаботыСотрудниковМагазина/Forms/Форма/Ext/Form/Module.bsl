
//////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	Если Не ПроверитьЗаполнение()Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьГрафикНаСервере();
	ТабличныйДокумент.ФиксацияСлева = 3;
	ТабличныйДокумент.ФиксацияСверху = 7;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	ПорядокФормированияТабеля.Очистить();
	Если Не ГруппаСотрудников="Промоутеры" И Не ГруппаСотрудников="Аутсорс"
		И ГруппаСотрудников <> "Уборщицы" Тогда
		Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
			КлючСлово="";
		ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
			КлючСлово="Грузчиков";
		ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
			КлючСлово="Кассиров";
		ИначеЕсли ГруппаСотрудников="Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
			КлючСлово="Пекарей";
		КонецЕсли; 
		
		Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
			Свойство="СвойствоПродавца";
		Иначе
			Свойство="СвойствоСотрудника";
		КонецЕсли; 
		
		//+++АК MIND 2017.11.15 ИП-00017115 дорабатываю запрос для вывода в отчет двух телефонов сотрудника
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СпецификаФормированияТабеля.ФизическоеЛицо,
		|	СпецификаФормированияТабеля.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений.СпецификаФормированияТабеля"+КлючСлово+ " КАК СпецификаФормированияТабеля
		|ГДЕ
		|	СпецификаФормированияТабеля.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
		ПорядокФормированияТабеля.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник
		| Поместить вт
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода "
		+?(ГруппаСотрудников="СтаршиеПродавцы","И  ТабельРаботыПродавцов.СвойствоПродавца = 2","")+";
		|
		|
		//+++ЗНК Zionek 2018.11.16 ИП-00020474
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ТабельРаботыПродавцов.Период,
		//|	ТабельРаботыПродавцов.Сотрудник,
		//|	ТабельРаботыПродавцов.ТорговаяТочка,
		//|	ТабельРаботыПродавцов.Отсутствие,
		//|	ТабельРаботыПродавцов."+Свойство+" как СвойствоПродавца,
		//|	ТабельРаботыПродавцов.КоличествоЧасов,
		//|	МАКСИМУМ(ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0)) КАК Порядок,
		//|	ТабельРаботыПродавцов.Сотрудник.Код КАК КодСотрудника,
		//|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
		//|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
		//|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		//|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		//|	СтатусыПродавцовСрезПоследних.Статус,
		//|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
		//|	СтатусыПродавцовСрезПоследних.ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО,ТабельРаботыПродавцов.Тренинг,ТабельРаботыПродавцов.ЭкстренныйВызов
		//|ИЗ
		//|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов."+Свойство+" как СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ТабельРаботыПродавцов.Сотрудник.Код КАК КодСотрудника,
		|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		|	ТабельРаботыПродавцов.Тренинг,
		|	ТабельРаботыПродавцов.ЭкстренныйВызов
		|ПОМЕСТИТЬ ВТТабельРаботыПродавцовОтбор
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник в (Выбрать вт.Сотрудник из вт как вт)                                                     
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДобавленныеВручную.Сотрудник,
		|	ДобавленныеВручную.НомерУпорядочивания
		|ПОМЕСТИТЬ ВТДобавленныеВручную
		|ИЗ &ДобавленныеВручную КАК ДобавленныеВручную
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов.СвойствоПродавца как СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ТабельРаботыПродавцов.КодСотрудника КАК КодСотрудника,
		|	ТабельРаботыПродавцов.ТорговаяТочкаНаименование,
		|	ТабельРаботыПродавцов.ТорговаяТочкаТипРозничнойТочки,
		|	ТабельРаботыПродавцов.Тренинг,
		|	ТабельРаботыПродавцов.ЭкстренныйВызов,
		|	0 КАК НомерУпорядочивания
		|ПОМЕСТИТЬ ВТТабельРаботыПродавцов
		|ИЗ
		|	ВТТабельРаботыПродавцовОтбор КАК ТабельРаботыПродавцов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	ДобавленныеВручную.Сотрудник,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ДобавленныеВручную.Сотрудник.Код КАК КодСотрудника,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	9999999999 + ДобавленныеВручную.НомерУпорядочивания
		|ИЗ
		|	ВТДобавленныеВручную КАК ДобавленныеВручную
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|		ПО ДобавленныеВручную.Сотрудник = ТабельРаботыПродавцов.Сотрудник
		|			И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|ГДЕ
		|	ТабельРаботыПродавцов.Период ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов."+Свойство+" как СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ТабельРаботыПродавцов.Сотрудник.Код КАК КодСотрудника,
		|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		|	ТабельРаботыПродавцов.Тренинг,
		|	ТабельРаботыПродавцов.ЭкстренныйВызов,
		|	0
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник В (ВЫБРАТЬ ВТДобавленныеВручную.Сотрудник ИЗ ВТДобавленныеВручную как ВТДобавленныеВручную)                                                     
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов.СвойствоПродавца как СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ВЫБОР КОГДА ТабельРаботыПродавцов.НомерУпорядочивания = 0 ТОГДА
		|		МАКСИМУМ(ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0))
		|	ИНАЧЕ ТабельРаботыПродавцов.НомерУпорядочивания КОНЕЦ КАК Порядок,
		|	ТабельРаботыПродавцов.КодСотрудника КАК КодСотрудника,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
		|	ТабельРаботыПродавцов.ТорговаяТочкаНаименование,
		|	ТабельРаботыПродавцов.ТорговаяТочкаТипРозничнойТочки,
		|	СтатусыПродавцовСрезПоследних.Статус,
		|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
		|	СтатусыПродавцовСрезПоследних.ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО,ТабельРаботыПродавцов.Тренинг,ТабельРаботыПродавцов.ЭкстренныйВызов
		|ИЗ
		|	ВТТабельРаботыПродавцов КАК ТабельРаботыПродавцов
		//---ЗНК Zionek 2018.11.16 ИП-00020474
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеля"+КлючСлово+" КАК СпецификаФормированияТабеля
		|		ПО СпецификаФормированияТабеля.Группа = &Группа  И 
		|			ТабельРаботыПродавцов.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ТабельРаботыПродавцов.Сотрудник = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
		|		ПО ТабельРаботыПродавцов.Сотрудник = КонтактнаяИнформацияДопНомер.Объект
		|			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
		|		ПО ТабельРаботыПродавцов.Сотрудник = СтатусыПродавцовСрезПоследних.Продавец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ) КАК ЦФОСтруктурныхЕдиниц
		|		ПО ТабельРаботыПродавцов.ТорговаяТочка = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
		//+++ЗНК Zionek 2018.11.16 ИП-00020474
		//|ГДЕ
		//|	ТабельРаботыПродавцов.Сотрудник в (Выбрать вт.Сотрудник из вт как вт)                                                     
		//|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		//---ЗНК Zionek 2018.11.16 ИП-00020474
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		//+++ЗНК Zionek 2018.11.16 ИП-00020474
		//|	ТабельРаботыПродавцов."+Свойство+",
		//|	ТабельРаботыПродавцов.КоличествоЧасов,
		//|	ТабельРаботыПродавцов.Сотрудник.Код,
		|	ТабельРаботыПродавцов.СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ТабельРаботыПродавцов.КодСотрудника,
		|	ТабельРаботыПродавцов.НомерУпорядочивания,
		//---ЗНК Zionek 2018.11.16 ИП-00020474
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)),
		//+++ЗНК Zionek 2018.11.16 ИП-00020474
		//|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		//|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		|	ТабельРаботыПродавцов.ТорговаяТочкаНаименование,
		|	ТабельРаботыПродавцов.ТорговаяТочкаТипРозничнойТочки,
		//---ЗНК Zionek 2018.11.16 ИП-00020474
		|	СтатусыПродавцовСрезПоследних.Статус,
		|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
		|	СтатусыПродавцовСрезПоследних.ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО,ТабельРаботыПродавцов.Тренинг,ТабельРаботыПродавцов.ЭкстренныйВызов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Период.ДатаНачала));
		Запрос.УстановитьПараметр("КонецПериода", 	НачалоДня(Период.ДатаОкончания));
		Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
		Запрос.УстановитьПараметр("ТорговаяТочка", 		Магазин);
		Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
		//+++ЗНК Zionek 2018.11.16 ИП-00020474
		Запрос.УстановитьПараметр("ДобавленныеВручную", знк_ДобавленныеВручную.Выгрузить());
		//---ЗНК Zionek 2018.11.16 ИП-00020474
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			
			ЗаполнитьЗначенияСвойств(ВходящиеДанные.Добавить(), Выборка);
			
			НоваяСтр = ОсновнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("СвойствоПродавца", 	Выборка.СвойствоПродавца);
			СтруктураДанных.Вставить("ТорговаяТочка", 		Выборка.ТорговаяТочка);
			СтруктураДанных.Вставить("ТорговаяТочкаНаименование", 		Выборка.ТорговаяТочкаНаименование);
			СтруктураДанных.Вставить("ТорговаяТочкаТипРозничнойТочки", 		Выборка.ТорговаяТочкаТипРозничнойТочки);
			СтруктураДанных.Вставить("Отсутствие", 			Выборка.Отсутствие);
			СтруктураДанных.Вставить("КоличествоЧасов", 	Выборка.КоличествоЧасов);
			//Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
			СтруктураДанных.Вставить("Тренинг", 	Выборка.Тренинг);
			СтруктураДанных.Вставить("ЭкстренныйВызов", 	Выборка.ЭкстренныйВызов);
			//КонецЕсли;			
			Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
			
			НоваяСтр.Представление = Представление;
			
		КонецЦикла;
		
		ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		
		Макет = ОбъектОбработка.ПолучитьМакет("График");
		ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
		ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
		
		ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
		
		ТЗСотрудники = ТЗОсновная.Скопировать();
		//АК БЕЛ 26.05.2017+
		//ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон");
		//Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
		//	ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон,Статус,БлижайшийМагазин,ПЧ,Тренинг");
		//Иначе
		//+++АК MIND 2017.11.15 
		//ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон,Статус,БлижайшийМагазин,ПЧ");
		ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон,ДопТелефон,Статус,БлижайшийМагазин,ПЧ");
		//---АК MIND 
		//КонецЕсли;
		//АК БЕЛ 26.05.2017-
		ТЗСотрудники.Сортировать("Порядок");
		КоличествоСотрудников = ТЗСотрудники.Количество();
		
		// Вывод шапки
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Для Каждого СтрТЗ Из ТЗСотрудники Цикл
			
			ОбластьШапкаСотрудник.Параметры.Сотрудник 	= Строка(СтрТЗ.Сотрудник);
			ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон",
			СтрТЗ.Сотрудник, СтрТЗ.КодСотрудника, СтрТЗ.Телефон);
			ОбластьШапкаСотрудник.Параметры.КодСотрудника = СтрТЗ.КодСотрудника;
			ОбластьШапкаСотрудник.Параметры.Телефон		  = СтрТЗ.Телефон + ?(ЗначениеЗаполнено(СтрТЗ.ДопТелефон), "; " + СтрТЗ.ДопТелефон, ""); //+++АК MIND 2017.11.15 
			//АК БЕЛ 26.05.2017+
			ОбластьШапкаСотрудник.Параметры.Магазин		  = СтрТЗ.БлижайшийМагазин;
			ОбластьШапкаСотрудник.Параметры.Статус		  = Строка(СтрТЗ.Статус)+" "+?(СтрТЗ.ПЧ,"п/ч","");
			//АК БЕЛ 26.05.2017-
			ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
			
		КонецЦикла;
		
		ЗаполнитьТаблицуЦветовТТ();
		ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
		
		ТаблицаВыходных = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
		НачалоПериода 	= НачалоДня(Период.ДатаНачала);
		
		Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
			
			Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
			
			Если Выходной Тогда
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
			Иначе	
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
			
			ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
			//ОбластьСтрокаПериод.Параметры.Период1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода) ;
			ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
			
			Для Каждого СтрТЗ Из ТЗСотрудники Цикл
				
				ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
				
				НайденныеСтроки = ТЗОсновная.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
				
				Если НайденныеСтроки.Количество()Тогда
					
					СтрокаСДанными = НайденныеСтроки[0];
					
					СтруктураДанных = Новый Структура();
					СтруктураДанных.Вставить("СвойствоПродавца", 	СтрокаСДанными.СвойствоПродавца);
					СтруктураДанных.Вставить("ТорговаяТочка", 		СтрокаСДанными.ТорговаяТочка);
					СтруктураДанных.Вставить("ТорговаяТочкаНаименование", 		СтрокаСДанными.ТорговаяТочкаНаименование);
					СтруктураДанных.Вставить("ТорговаяТочкаТипРозничнойТочки", 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки);
					СтруктураДанных.Вставить("Отсутствие", 			СтрокаСДанными.Отсутствие);
					СтруктураДанных.Вставить("КоличествоЧасов", 	СтрокаСДанными.КоличествоЧасов);
					//Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
					СтруктураДанных.Вставить("Тренинг", 	СтрокаСДанными.Тренинг);
					СтруктураДанных.Вставить("ЭкстренныйВызов", 	СтрокаСДанными.ЭкстренныйВызов);
					//КонецЕсли; 
					
					Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
					
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = Представление;
					
					
					НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТорговаяТочка, "ТорговаяТочка");
					
					Если НайденнаяСтрокаЦвет <> Неопределено Тогда
						
						ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
						
					КонецЕсли;
					//ЦФО=Неопределено;
					//МасСтрЦФО=ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник,Период",СтрТЗ.Сотрудник,НачалоПериода));
					//Если МасСтрЦФО.Количество() Тогда
					//	ЦФО=МасСтрЦФО[0].ЦФО;
					//КонецЕсли; 
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период,Отсутствие,Группа,Тренинг,ЭкстренныйВызов",
					СтрТЗ.Сотрудник, НачалоПериода,СтрокаСДанными.Отсутствие,СтрокаСДанными.ЦФО,СтрокаСДанными.Тренинг,СтрокаСДанными.ЭкстренныйВызов);
				Иначе
					
					// Добавим пустую строку с периодом
					НоваяСтрока = ОсновнаяТаблица.Добавить();
					НоваяСтрока.Сотрудник = СтрТЗ.Сотрудник;
					НоваяСтрока.Период = НачалоПериода;
					
					СтрВход = ВходящиеДанные.Добавить();
					СтрВход.Сотрудник = СтрТЗ.Сотрудник;
					СтрВход.Период = НачалоПериода;
					
					//ЦФО=Неопределено;
					//МасСтрЦФО=ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник,Период",СтрТЗ.Сотрудник,НачалоПериода));
					//Если МасСтрЦФО.Количество() Тогда
					//	ЦФО=МасСтрЦФО[0].ЦФО;
					//КонецЕсли; 
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период,Отсутствие,Группа",
					СтрТЗ.Сотрудник, НачалоПериода,Неопределено,Неопределено);
					
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
				
			КонецЦикла;
			
			НачалоПериода = НачалоПериода + 86400;
			
		КонецЦикла;
	Иначе
		Если  ГруппаСотрудников="Промоутеры" Тогда
			ОчиститьДанныеНаСервере();
			
			ЗаполнитьТаблицуСотрудникПериодНаСервере();
			
			Макет = ПолучитьМакетНаСервере();
			ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
			ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
			
			// Вывод угла шапки
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
			
			// Вывод сотрудников
			Для Каждого Сотр Из ИнформацияПоСотрудникам Цикл
				
				ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Сотрудник);
				ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
				ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
				ОбластьШапкаСотрудник.Параметры.Сотрудник = ФИО;
				ОбластьШапкаСотрудник.Параметры.Магазин = Строка(Сотр.Магазин)+" "+?(Сотр.ПЧ,"п/ч","");
				ОбластьШапкаСотрудник.Параметры.Телефон = Сотр.Телефон + ?(ЗначениеЗаполнено(Сотр.ДопТелефон), "; " + Сотр.ДопТелефон, ""); //+++АК MIND 2017.11.15 
				
				ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
				
				ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
				
			КонецЦикла;
			
			ЗаполнитьТаблицуЦветовТТ();
			ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
			
			// Вывод Периодов
			Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
			НачалоПериода = НачалоДня(Период.ДатаНачала);
			
			Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
				
				Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
				
				Если Выходной Тогда
					ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
				Иначе	
					ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
				КонецЕсли;
				
				ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
				ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
				
				Для Каждого СтрТЗ Из ИнформацияПоСотрудникам Цикл
					
					ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
					
					НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
					
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
						
						
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка=СтрокаСДанными.Представление+"("+Строка(СтрокаСДанными.КоличествоЧасов)+"ч.)";
						// Имеет смысл если есть точки
						Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
							
							НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
							
							Если НайденнаяСтрокаЦвет <> Неопределено Тогда
								ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
							КонецЕсли;
							
						КонецЕсли;
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период",
						СтрТЗ.Сотрудник, НачалоПериода);
					Иначе
						
						// Добавим пустую строку с периодом
						СтрВход = ТаблицаСотрудникПериод.Добавить();
						СтрВход.Сотрудник = СтрТЗ.Сотрудник;
						СтрВход.Период = НачалоПериода;
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период",
						СтрТЗ.Сотрудник, НачалоПериода);
						
					КонецЕсли;
					
					
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
					
				КонецЦикла;
				
				НачалоПериода = НачалоПериода + 86400;
				
			КонецЦикла;
			
			ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");
			
		//+++АК MIND 2017.11.08 
		ИначеЕсли  ГруппаСотрудников = "Уборщицы" Тогда
			ОчиститьДанныеНаСервере();
			
			ЗаполнитьТаблицуСотрудникПериодНаСервере_Уборщицы();
			
			Макет = ПолучитьМакетНаСервере();
			ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
			ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
			
			// Вывод угла шапки
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
			
			// Вывод сотрудников
			Для Каждого Сотр Из ИнформацияПоСотрудникам Цикл
				
				ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Сотрудник);
				ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
				ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
				ОбластьШапкаСотрудник.Параметры.Сотрудник = ФИО;
				ОбластьШапкаСотрудник.Параметры.Магазин = Строка(Сотр.Магазин) + " " + ?(Сотр.ПЧ, "п/ч", "");
				ОбластьШапкаСотрудник.Параметры.Телефон = Сотр.Телефон + ?(ЗначениеЗаполнено(Сотр.ДопТелефон), "; " + Сотр.ДопТелефон, ""); //+++АК MIND 2017.11.15 
				
				ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
				
				ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
				
			КонецЦикла;
			
			ЗаполнитьТаблицуЦветовТТ();
			ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
			
			// Вывод Периодов
			Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
			НачалоПериода = НачалоДня(Период.ДатаНачала);
			
			Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
				
				Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
				
				Если Выходной Тогда
					ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
				Иначе	
					ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
				КонецЕсли;
				
				ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
				ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
				
				Для Каждого СтрТЗ Из ИнформацияПоСотрудникам Цикл
					
					ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
					
					НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
					
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
						
						
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = СтрокаСДанными.Представление + "(" + Строка(СтрокаСДанными.КоличествоЧасов) + "ч.)";
						// Имеет смысл если есть точки
						Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
							
							НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
							
							Если НайденнаяСтрокаЦвет <> Неопределено Тогда
								ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
							КонецЕсли;
							
						КонецЕсли;
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода);
					Иначе
						
						// Добавим пустую строку с периодом
						СтрВход = ТаблицаСотрудникПериод.Добавить();
						СтрВход.Сотрудник = СтрТЗ.Сотрудник;
						СтрВход.Период = НачалоПериода;
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода);
						
					КонецЕсли;
					
					
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
					
				КонецЦикла;
				
				НачалоПериода = НачалоПериода + 86400;
				
			КонецЦикла;
			
			ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");
		//---АК MIND 
	
		ИначеЕсли  ГруппаСотрудников="Аутсорс" Тогда

			
			
			ОбновитьГрафикНаСервереАут();
			//УстановитьВидимостьАут();
			
			// Фиксация областей
			ТабличныйДокумент.ФиксацияСлева  = 3;
			ТабличныйДокумент.ФиксацияСверху = 7;			
		КонецЕсли; 
	КонецЕсли; 
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура ОчиститьДанныеНаСервереАут()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериодАут.Очистить();
	ИнформацияПоСотрудникамАут.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервереАут()
	
		
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыВнештатныхСотрудников.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&КонецПериода, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) или ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ПО ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.ТорговаяТочка =(&Магазин)
	//|	И (ТабельРаботыВнештатныхСотрудников.ТорговаяТочка = &Магазин
	//|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка))
	//|	И (СоответствиеОбъектРольСрезПоследних.РольПользователя = &Помощник
	//|			ИЛИ &Помощник = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Пустаяссылка))
	//|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент = &Контрагент
	//|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка))
	//|	И (ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность = &Должность
	//|			ИЛИ &Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиВнештатныхСотрудников.Пустаяссылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельРаботыВнештатныхСотрудников.Период КАК Период,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник КАК Сотрудник,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыВнештатныхСотрудников.ТорговаяТочка,
	|	ТабельРаботыВнештатныхСотрудников.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0) КАК Порядок,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Контрагент КАК Контрагент,
	|	ТабельРаботыВнештатныхСотрудников.Сотрудник.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыВнештатныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляАутсорсинг КАК СпецификаФормированияТабеля
	|		ПО (&ГруппаТорговыхТочек = СпецификаФормированияТабеля.Группа)
	|			И ТабельРаботыВнештатныхСотрудников.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыВнештатныхСотрудников.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|ГДЕ
	|	ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыВнештатныхСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				вт.Сотрудник
	|			ИЗ
	|				вт)
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Телефон),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Должность)
	|ПО
	|	Сотрудник,
	|	Период");
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ГруппаТорговыхТочек", ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий()Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникамАут.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий()Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериодАут.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры




&НаСервере
Процедура ОбновитьГрафикНаСервереАут()
	
	ОчиститьДанныеНаСервереАут();
	
	ЗаполнитьТаблицуСотрудникПериодНаСервереАут();
	
	Макет = Обработки.ГрафикРаботыВнештатныхСотрудников.ПолучитьМакет("График");
	ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод угла шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ИнформацияПоСотрудникамАут.Сортировать("Порядок, Сотрудник");
	
	// Вывод сотрудников
	Для Каждого Сотр Из ИнформацияПоСотрудникамАут Цикл
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Сотрудник);
		ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
		ОбластьШапкаСотрудник.Параметры.ФИО = ФИО;
		ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	// Вывод Периодов
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ИнформацияПоСотрудникамАут Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период",
				СтрТЗ.Сотрудник, НачалоПериода);
		
			НайденныеСтроки = ТаблицаСотрудникПериодАут.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество()Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
				
				// Имеет смысл если есть точки
				Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
					
					НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
					
					Если НайденнаяСтрокаЦвет <> Неопределено Тогда
						ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				СтрВход = ТаблицаСотрудникПериодАут.Добавить();
				СтрВход.Сотрудник = СтрТЗ.Сотрудник;
				СтрВход.Период = НачалоПериода;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
		КонецЦикла;

		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериодАут.Сортировать("Сотрудник, Период");	
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере()
	
	//+++АК MIND 2017.11.15 ИП-00017115 дорабатываю запрос под еще один телефон
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТабельРаботыПродавцов.Период,
	                      |	ТабельРаботыПродавцов.Сотрудник
	                      |ПОМЕСТИТЬ вт
	                      |ИЗ
	                      |	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПродавцов
	                      |ГДЕ
	                      |	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
	                      |	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТабельРаботыПромоутеров.Период КАК Период,
	                      |	ТабельРаботыПромоутеров.Сотрудник КАК Сотрудник,
	                      |	ТабельРаботыПромоутеров.Сотрудник.Код КАК КодСотрудника,
	                      |	ТабельРаботыПромоутеров.ТорговаяТочка,
	                      |	ТабельРаботыПромоутеров.КоличествоЧасов КАК КоличествоЧасов,
	                      |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
						  |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
	                      |	ЕСТЬNULL(СпецификаФормированияТабеляПромоутеров.Порядок, 0) КАК Порядок,
	                      |	СтатусыПродавцовСрезПоследних.Статус КАК Статус,
	                      |	СтатусыПродавцовСрезПоследних.БлижайшийМагазин КАК Магазин,
	                      |	СтатусыПродавцовСрезПоследних.ПЧ КАК ПЧ,
	                      |	ЦФОСтруктурныхЕдиниц.ЦФО
	                      |ИЗ
	                      |	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПромоутеров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляПромоутеров КАК СпецификаФормированияТабеляПромоутеров
	                      |		ПО ТабельРаботыПромоутеров.Группа = СпецификаФормированияТабеляПромоутеров.Группа
	                      |			И ТабельРаботыПромоутеров.Сотрудник = СпецификаФормированияТабеляПромоутеров.ФизическоеЛицо
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |		ПО ТабельРаботыПромоутеров.Сотрудник = КонтактнаяИнформация.Объект
	                      |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
	                      |		ПО ТабельРаботыПромоутеров.Сотрудник = КонтактнаяИнформацияДопНомер.Объект
	                      |			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
	                      |		ПО ТабельРаботыПромоутеров.Сотрудник = СтатусыПродавцовСрезПоследних.Продавец
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ) КАК ЦФОСтруктурныхЕдиниц
	                      |		ПО ТабельРаботыПромоутеров.ТорговаяТочка = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
	                      |ГДЕ
	                      |	ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	                      |	И ТабельРаботыПромоутеров.Сотрудник В
	                      |			(ВЫБРАТЬ
	                      |				вт.Сотрудник
	                      |			ИЗ
	                      |				вт КАК вт)
	                      |ИТОГИ
	                      |	МАКСИМУМ(КодСотрудника),
	                      |	СУММА(КоличествоЧасов),
	                      |	МАКСИМУМ(Телефон),
						  |	МАКСИМУМ(ДопТелефон),
	                      |	МАКСИМУМ(Порядок),
	                      |	МАКСИМУМ(Статус),
	                      |	МАКСИМУМ(Магазин),
	                      |	МАКСИМУМ(ПЧ)
	                      |ПО
	                      |	Сотрудник,
	                      |	Период");
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("ТорговаяТочка", 		Магазин);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий()Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий()Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК MIND 2017.11.08 
&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере_Уборщицы()
	
	//+++АК MIND 2017.11.15 ИП-00017115 дорабатываю запрос под еще один телефон
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТабельРаботыУборщиц.Период,
	               |	ТабельРаботыУборщиц.Сотрудник
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
	               |ГДЕ
	               |	ТабельРаботыУборщиц.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ТабельРаботыУборщиц.ТорговаяТочка = &ТорговаяТочка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабельРаботыУборщиц.Период КАК Период,
	               |	ТабельРаботыУборщиц.Сотрудник КАК Сотрудник,
	               |	ТабельРаботыУборщиц.Сотрудник.Код КАК КодСотрудника,
	               |	ТабельРаботыУборщиц.ТорговаяТочка,
	               |	ТабельРаботыУборщиц.КоличествоЧасов КАК КоличествоЧасов,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
	               |	ЕСТЬNULL(СпецификаФормированияТабеляУборщиц.Порядок, 0) КАК Порядок,
	               |	СтатусыПродавцовСрезПоследних.Статус КАК Статус,
	               |	СтатусыПродавцовСрезПоследних.БлижайшийМагазин КАК Магазин,
	               |	СтатусыПродавцовСрезПоследних.ПЧ КАК ПЧ,
	               |	ЦФОСтруктурныхЕдиниц.ЦФО
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляУборщиц КАК СпецификаФормированияТабеляУборщиц
	               |		ПО ТабельРаботыУборщиц.Группа = СпецификаФормированияТабеляУборщиц.Группа
	               |			И ТабельРаботыУборщиц.Сотрудник = СпецификаФормированияТабеляУборщиц.ФизическоеЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО ТабельРаботыУборщиц.Сотрудник = КонтактнаяИнформация.Объект
	               |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
	               |		ПО ТабельРаботыУборщиц.Сотрудник = КонтактнаяИнформацияДопНомер.Объект
	               |			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
	               |		ПО ТабельРаботыУборщиц.Сотрудник = СтатусыПродавцовСрезПоследних.Продавец
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ) КАК ЦФОСтруктурныхЕдиниц
	               |		ПО ТабельРаботыУборщиц.ТорговаяТочка = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ТабельРаботыУборщиц.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ТабельРаботыУборщиц.Сотрудник В
	               |			(ВЫБРАТЬ
	               |				вт.Сотрудник
	               |			ИЗ
	               |				вт КАК вт)
	               |ИТОГИ
	               |	МАКСИМУМ(КодСотрудника),
	               |	СУММА(КоличествоЧасов),
	               |	МАКСИМУМ(Телефон),
	               |	МАКСИМУМ(ДопТелефон),
	               |	МАКСИМУМ(Порядок),
	               |	МАКСИМУМ(Статус),
	               |	МАКСИМУМ(Магазин),
	               |	МАКСИМУМ(ПЧ)
	               |ПО
	               |	Сотрудник,
	               |	Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("ТорговаяТочка", 	Магазин);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий()Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий()Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
//---АК MIND 

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	
	//+++АК mika 2018.03.15 Без задачи (запрет старого варианта печати бейджа) 
	//Если ГруппаСотрудников="Аутсорс" Тогда
	////
	//	ТабДок = ПечатьБейджаНаСервере();
	//	
	//	ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, УстановитьЗаголовок", ТабДок, "Бэйдж"));
	//Иначе	
	//	ОткрытьФорму("Обработка.ПечатьБейджейПродавцов.Форма.Форма",,, "ТД_ПечатьБейджей");
	//КонецЕсли;   
	ОткрытьФорму("Обработка.ПечатьБейджейПродавцов.Форма.Форма",,, "ТД_ПечатьБейджей");
	//---АК mika 
	
КонецПроцедуры



Функция ПечатьБейджаНаСервере()
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(ТекущийПродавец);
	
	Возврат Справочники.СотрудникиАутсорсинг.ПечатьБейджейНаСервере(МассивСотрудников);
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))");
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериод.Очистить();
	ИнформацияПоСотрудникам.Очистить();
	
КонецПроцедуры


&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.ПолучитьМакет("График");
	
КонецФункции



&НаКлиенте
Процедура БухгалтераРасчетчики(Команда)
	
	ПараметрыОткрытия = Новый Структура("ГоловноеПодразделение", ГруппаТорговыхТочек);
	ОткрытьФорму("РегистрСведений.БухгалтераРасчетчикиВТорговыхТочках.Форма.ФормаСпискаУправляемая", ПараметрыОткрытия, ЭтаФорма);	
	
КонецПроцедуры


&НаКлиенте
Процедура ВывестиОшибкиВЗаполненииПродавцов(Команда)
	
	ОткрытьФорму("Отчет.ОшибкиВЗаполненииПродавцовВЛистахУчета.Форма");
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ДобавитьПервогоПродавцаВГрафик(Результат);
		//ИзменитьПорядокПродавцовВТабеле(Результат, ТекущийПродавец);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПервогоПродавцаВГрафик(Результат)
	
	ТабличныйДокумент.Очистить();
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектОбработка.ПолучитьМакет("График");
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкаСотрудник.Параметры.Сотрудник 	= Строка(Результат);
	ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Результат, Результат.Код, "");
	ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
	
	ТаблицаВыходных = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
		
		
		// Добавим пустую строку с периодом
		НоваяСтрока = ОсновнаяТаблица.Добавить();
		НоваяСтрока.Сотрудник = Результат;
		НоваяСтрока.Период = НачалоПериода;
		
		СтрВход = ВходящиеДанные.Добавить();
		СтрВход.Сотрудник = Результат;
		СтрВход.Период = НачалоПериода;
		
		ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
		
		ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	УстановитьВидимостьЭлементовФормы();
	
	УстановитьВидимостьЭлементовФормы();	
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПродавцаСлева(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
		Если НаличиеСотрудника Тогда
			Предупреждение("В табеле уже присутствует сотрудник " + Результат);
			Возврат;	
		КонецЕсли;
		
		РаздвинутьОбластьНаСервере(НомерВыделеннойКолонки, Результат);
		
		// Порядок
		//ИзменитьПорядокПродавцовВТабеле(Результат, ТекущийПродавец);		
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РаздвинутьОбластьНаСервере(КолонкаИсточник, Сотрудник)
	
	// Заполним пустые строки в Основной таблице
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НовСтр = ОсновнаяТаблица.Добавить();
		НовСтр.Сотрудник 	= Сотрудник;
		НовСтр.Период 		= НачалоПериода;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	КолонкаПриемник = КолонкаИсточник; 
	
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + КолонкаИсточник), ТабличныйДокумент.Область("C" + КолонкаПриемник), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Очистим новую область
	ТекОбласть = ТабличныйДокумент.Область("C"+КолонкаПриемник);
	ТекОбласть.Очистить();
	ТекОбласть.ЦветФона 	= WebЦвета.Белый;
	ТекОбласть.ЦветТекста 	= WebЦвета.Черный;
	
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Параметр = Строка(Сотрудник);
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Значение = Строка(Сотрудник);
	ТабличныйДокумент.Область("R3"+"C"+КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотрудник, Сотрудник.Код, "");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьПродавцовЛУПоГрафику(Команда)
	
	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияЛУПоГрафикам", Новый Структура("ДатаНачала, ДатаОкончания, МассивПродавцов", Период.ДатаНачала, Период.ДатаОкончания, ПолучитьМассивПродавцов()));
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКарточкуФизЛица(Команда)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		ОткрытьЗначение(ТекущийПродавец);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчетПоОтклонениюГрафиковРаботыПродавцовОтРеальныхВыходов(Команда)
	
	ОткрытьФорму("Отчет.ОтчетОтклонениеГрафиковРаботыПродавцовОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма);	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтктытьРегистрСведений_ТабельРаботыПродавцов(Команда)
	
	Форма = ПолучитьФорму("РегистрСведений."+ВидТабеля+".Форма.ФормаСписка");
	
	Форма.Список.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = ГруппаТорговыхТочек;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = Период.ДатаНачала;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = КонецДня(Период.ДатаОкончания);
	
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	форма.ПодчиненныеЭлементы.Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьБейджев(Команда)
	
	АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище();
	
	ПараметрыОткрытия = Новый Структура("Адрес", АдресВоВременномХранилище);
	
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаПодбораПродавцов", ПараметрыОткрытия);
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ТабДокумент = ПолучитьТабличныйДокумент(Результат);
		
		ТабДокумент.ОтображатьСетку = Ложь;
		ТабДокумент.Защита = Истина;
		ТабДокумент.ТолькоПросмотр = Истина;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		ТабДокумент.Показать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	МассивФизЛиц = ПолучитьМассивПродавцов();
	
	Адрес = ПоместитьВоВременноеХранилище(МассивФизЛиц);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокумент(МассивФизическихЛиц)
	
	Возврат Обработки.ГрафикРаботыПродавцов_ТЗ.СформироватьТабличныйДокумент(МассивФизическихЛиц);
	
КонецФункции


&НаКлиенте
Процедура ПомощникиУправляющих(Команда)
	
	ПараметрыОткрытия = Новый Структура("ГоловноеПодразделение", ГруппаТорговыхТочек);
	ОткрытьФорму("РегистрСведений.ПомощникиУправляющихВТорговыхТочках.Форма.ФормаСпискаУправляемая", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоставитьСотрудникаПеред(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	
	ЗначениеОтбора = Новый Структура("Ссылка", СписокСотрудников);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ПеренестиПродавцаНаСервере(НомерВыделеннойКолонки, Результат);
		
		//ИзменитьПорядокПродавцовВТабеле(ТекущийПродавец, Результат);
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		//ДанныеИзменены = Истина;
		//УстановитьДоступностьЭлементовФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	МассивСотрудников = ПолучитьМассивПродавцов();
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.ЗагрузитьЗначения(МассивСотрудников);
	
	Возврат СписокСотрудников;
	
КонецФункции

//////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//открыть форму выбора структурных единиц
	ПараметрыОтбора = Новый Структура("НаименованиеГруппы", "Управление розницей.");
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораСтруктурнойЕдиницы", ПараметрыОтбора);
	
	Если Результат <> Неопределено Тогда
		ГруппаТорговыхТочек = Результат;
		ОчиститьДанныеДаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	РасшПериод=ТабличныйДокумент.Область(8, НомерВыделеннойКолонки, 8, НомерВыделеннойКолонки).расшифровка;
	//Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(, НомерВыделеннойКолонки,, НомерВыделеннойКолонки);
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ПредставлениеТекущийПродавец = "";
		ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;
	
	Элементы.ОсновнаяТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, 2) КАК ДатаОкончания");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Период.ДатаНачала = Макс(ГраницаЗапретаРедактирования+86400, НачалоДня(Выборка.ДатаНачала));
		Период.ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
	// Скроем кнопки при открытии
	Элементы.ДобавитьПродавца.Видимость 		= Ложь;
	Элементы.ДобавитьПродавцаСлева.Видимость 	= Ложь;
	Элементы.ПоставитьСотрудникаПеред.Видимость = Ложь;
	Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = Ложь;
	ГруппаСотрудников="Продавцы";
	ВидТабеля="ТабельРаботыПродавцов";
	Магазин=ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Магазин);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ГруппаТорговыхТочек=ВыборкаДетальныеЗаписи.ЦФО;
	КонецЦикла;
	
	//+++ mika Без задачи. Скрытие пункта "Аутсорсинг" (он не должен использоваться, но кто-то все же запускает)
	Элементы.ГруппаСотрудников.СписокВыбора.Удалить(5);
	//--- mika 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = Выборка.ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОсновнаяТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	// НЕ УДАЛЯТЬ
	Возврат;
	
	//Отказ = Истина;
	//
	//МассивВыделенныхСтрок = Элементы.ОсновнаяТаблица.ВыделенныеСтроки;
	//
	//Если ТипЗнч(Элементы.ОсновнаяТаблица.ОтборСтрок) = Тип("ФиксированнаяСтруктура")Тогда
	//	
	//	ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	//	
	//	ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца",
	//										ТекДанные.Сотрудник, ТекДанные.ТорговаяТочка, ТекДанные.Отсутствие, ТекДанные.СвойствоПродавца);
	//	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
	//	
	//	Если ТипЗнч(Результат) = Тип("Структура")Тогда
	//		
	//		СтруктураДанных = Новый Структура();
	//		СтруктураДанных.Вставить("СвойствоПродавца", 	Результат.СвойствоПродавца);
	//		СтруктураДанных.Вставить("ТорговаяТочка", 		Результат.ТорговаяТочка);
	//		СтруктураДанных.Вставить("Отсутствие", 			Результат.Отсутствие);
	//		
	//		Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
	//		
	//		Для Каждого СтрокаМассива Из МассивВыделенныхСтрок Цикл
	//			
	//			ТекСтр = ОсновнаяТаблица.НайтиПоИдентификатору(СтрокаМассива);
	//			
	//			ЗаполнитьЗначенияСвойств(ТекСтр, Результат);
	//			ТекСтр.Представление = Представление;
	//			
	//			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, Представление, Результат.ТорговаяТочка);
	//			
	//		КонецЦикла;
	//		
	//		ДанныеИзменены = Истина;
	//		
	//	КонецЕсли;
	//			
	//КонецЕсли;
	//
	//УстановитьДоступностьЭлементовФормы();
	//
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеТорговойТочки(СтруктураДанных)
	Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
		Представление 	= "";
		СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоПродавца = 1 Тогда
			Представление = "пч, ";	
		ИначеЕсли СвойствоПродавца = 2 Тогда
			Представление = "сп, ";
		ИначеЕсли СвойствоПродавца = 3 Тогда
			Представление = "пр, ";
		ИначеЕсли СвойствоПродавца = 4 Тогда
			Представление = "ст, ";
		ИначеЕсли СвойствоПродавца = 5 Тогда
			Представление = "нп, ";
		ИначеЕсли СвойствоПродавца = 6 Тогда
			Представление = "снп, ";
		КонецЕсли;
		
		//Если СтруктураДанных.ЭкстренныйВызов Тогда
		//	Представление = Представление + "экстр. вызов, ";
		//КонецЕсли;	
		
		ПредставлениеТТ = "";
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг)Тогда
			Представление ="Тренинг";
		КонецЕсли;	
		
		//Если СтруктураДанных.ТорговаяТочкаТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И СвойствоПродавца = 1 Тогда
		Если ЗначениеЗаполнено(Отсутствие) ИЛИ ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
			Представление = Представление;
		Иначе	
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		КонецЕсли;	
		//КонецЕсли;
	ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
		Представление 	   = "";
		СвойствоСотрудника = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоСотрудника = 1 Тогда
			Представление = "ст, ";	
		КонецЕсли;
		
		//Если СтруктураДанных.ЭкстренныйВызов Тогда
		//	Представление = Представление + "экстр. вызов, ";
		//КонецЕсли;
		
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
			//Если СвойствоСотрудника = 0 Тогда 
				Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
			//КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг)Тогда
			Представление ="Тренинг";
			
		КонецЕсли;	
		
	//+++АК mika 2018.04.12 ИП-00018000	
	ИначеЕсли ГруппаСотрудников = "Пекари" Тогда
		Представление 	   = "";
		СвойствоСотрудника = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоСотрудника = 1 Тогда
			Представление = "ст, ";	
		КонецЕсли;
		
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг)Тогда
			Представление ="Тренинг";
		КонецЕсли;	
	//---АК mika 2018.04.12 ИП-00018000
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		Представление 	   = "";
		СвойствоСотрудника = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоСотрудника = 1 Тогда
			Представление = "н, ";
		ИначеЕсли СвойствоСотрудника = 2 Тогда
			Представление = "ст, ";
		ИначеЕсли СвойствоСотрудника = 3 Тогда //+++АК mika 2018.09.19 ИП-00019805 
			Представление = "вх, ";
		ИначеЕсли СвойствоСотрудника = 4 Тогда //+++АК mika 2018.11.20 ИП-00020498 
			Представление = "нвх, ";
		ИначеЕсли СвойствоСотрудника = 5 Тогда //+++АК mika 2018.12.05 ИП-00020643 
			Представление = "свх, ";
		КонецЕсли;
		
		//Если СтруктураДанных.ЭкстренныйВызов Тогда
		//	Представление = Представление + "экстр. вызов, ";
		//КонецЕсли;
		
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
			//Если СвойствоСотрудника <> 2 Тогда 
				Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
			//КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг)Тогда
			Представление ="Тренинг";
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция ПолучитьСвободныеДатыВПериодеРедактирования(Сотрудник)
	
	СвободныеДаты = Новый Массив;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", Сотрудник, НачалоПериода));
		
		Если Не НайденныеСтроки.Количество() Тогда
			СвободныеДаты.Добавить(НачалоПериода);
		КонецЕсли;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	Возврат СвободныеДаты;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ФормаОбновитьГрафик.Доступность = Не ДанныеИзменены;
	Элементы.ГруппаТорговыхТочек.Доступность = Не ДанныеИзменены;
	
	Элементы.Период.Доступность = Не ДанныеИзменены;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	ЕстьПродавцы = (ОсновнаяТаблица.Количество() > 0);
	//
	//Элементы.ДобавитьПродавца.Видимость 		= Не ЕстьПродавцы;
	//Элементы.ДобавитьПродавцаСлева.Видимость 	= ЕстьПродавцы;
	//Элементы.ПоставитьСотрудникаПеред.Видимость = ЕстьПродавцы;
	//Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = ЕстьПродавцы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе(ДеньВыхода, Представление = "", ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 7;
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ТекОбласть.Значение = Представление;
		ТекОбласть.ЦветФона = WebЦвета.Белый;
		
	Иначе                     
		
		ТаблицаЦветов = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
		НайденнаяСтрока = ТаблицаЦветов.Найти(ТорговаяТочка, "ТорговаяТочка");
		Если НайденнаяСтрока = Неопределено Тогда
			ЧерныйЦвет = Новый Цвет(0,0,0);
			ЦветТТ = ТорговаяТочка.ЦветТорговойТочки.Получить();
			Если ЦветТТ <> Неопределено И ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			Иначе
				ЦветТТ = WebЦвета.Белый;
			КонецЕсли;
		Иначе
			ЦветТТ = НайденнаяСтрока.Цвет;
		КонецЕсли;
		
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		ТекОбласть.Значение = Представление;
		ТекОбласть.ЦветФона = ЦветТТ;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМассивПродавцов()
	
	Таб = ОсновнаяТаблица.Выгрузить();
	Таб.Свернуть("Сотрудник");
	Возврат Таб.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

&НаСервере
Функция ПроверитьНаличиеСотрудникаВГрафике(Сотрудник)
	
	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 1;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 1;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаКлиенте
Процедура ТелефонТекущегоПродавцаПриИзменении(Элемент)
	
	ЗаписатьТелефонВКИНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТелефоны(Сотрудник)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТабельРаботыПродавцов.Телефон) КАК Телефон
	|ИЗ
	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Сотрудник = &Сотрудник
	|	И ТабельРаботыПродавцов.Группа = &Группа
	|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период.ДатаОкончания));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Телефон;
	КонецЕсли;
	
	Возврат "";
	
	//ПредставлениеТелефона = "";
	//МассивТелефонов = Новый Массив;
	
	//НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	//
	//Если НайденныеСтроки.Количество()Тогда
	//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		
	//		Телефон = СокрЛП(НайденнаяСтрока.Телефон);
	//		Если Телефон <> "" Тогда
	//			Возврат Телефон;
	//		КонецЕсли;	
	//			
	//		//Если МассивТелефонов.Найти(Телефон) = Неопределено Тогда
	//		//	МассивТелефонов.Добавить(Телефон);
	//		//КонецЕсли;
	//		
	//	КонецЦикла;
	//КонецЕсли;
	
	//Для Каждого Стр Из МассивТелефонов Цикл
	//	ПредставлениеТелефона = ПредставлениеТелефона + ?(ПредставлениеТелефона = "", "", ", ") + Стр;
	//КонецЦикла;
	//
	//Возврат ПредставлениеТелефона;
	
КонецФункции

&НаСервере
Процедура ПроверитьРаботуСотрудниковВДругихГруппах(ТЗ, ГруппаТорговыхТочек, Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.Сотрудник КАК ФизическоеЛицо,
	|	ТЗ.Период
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ.ФизическоеЛицо,
	|	ВТ.Период,
	|	ТабельРаботыПродавцов.Группа
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	|		ПО ВТ.ФизическоеЛицо = ТабельРаботыПродавцов.Сотрудник
	|			И ВТ.Период = ТабельРаботыПродавцов.Период
	|			И (ТабельРаботыПродавцов.ТорговаяТочка <> &ТорговаяТочка)
	|			И (ТабельРаботыПродавцов.Группа <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|			И (ТабельРаботыПродавцов.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ТабельРаботыПродавцов.Группа ЕСТЬ НЕ NULL "
	);
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	
	Запрос.УстановитьПараметр("ТорговаяТочка", Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		Отказ = Истина;
		Сообщить(" - сотрудник " + Выборка.ФизическоеЛицо + " " + Формат(Выборка.Период, "ДЛФ=DD") + " уже работает в группе " + Выборка.Группа + ".");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПродавцаНаСервере(ТекущаяКолонка, ФизЛицо)
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	ИскомаяКолонкаФЛ = 4;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 1;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = ФизЛицо Тогда
			ИскомаяКолонкаФЛ = НачальнаяКолонка;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 1;
		
	КонецЦикла;	
	
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка), ТабличныйДокумент.Область("C" + ИскомаяКолонкаФЛ), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Удалим область
	Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
		ТекущаяКолонка = ТекущаяКолонка+1;
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+ТекущаяКолонка), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C"+ТекущаяКолонка), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольПереработки()
	
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТЗ_ТорговыеТочки = ТЗ.Скопировать();
	ТЗ_ТорговыеТочки.Свернуть("Период, Сотрудник, ТорговаяТочка");
	ТЗ_ТорговыеТочки.Сортировать("Сотрудник, Период");
	
	Сотрудник = Неопределено;
	СчНепрерывногоЦикла = 0;
	МассивСотрудников = Новый Массив;
	
	Для Каждого СтрТЗ Из ТЗ_ТорговыеТочки Цикл
		
		Если Сотрудник <> СтрТЗ.Сотрудник Тогда
			Сотрудник = СтрТЗ.Сотрудник;
			СчНепрерывногоЦикла = 0;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрТЗ.ТорговаяТочка)Тогда
			СчНепрерывногоЦикла = 0;
			Продолжить;
		КонецЕсли;
		
		СчНепрерывногоЦикла = СчНепрерывногоЦикла + 1;
		
		Если СчНепрерывногоЦикла > 5 Тогда
			Если МассивСотрудников.Найти(Сотрудник)=Неопределено Тогда
				МассивСотрудников.Добавить(Сотрудник);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрМассива Из МассивСотрудников Цикл
		Сообщить("У физического лица " + СтрМассива + " имеется непрерывный цикл работы более 5 дней", СтатусСообщения.Внимание);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольТочекБезПомощников()
	
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	ТЗ.Свернуть("Период, ТорговаяТочка");
	
	Для Каждого Строка Из ТЗ Цикл
		
		Если ЗначениеЗаполнено(Строка.ТорговаяТочка)Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РолиПользователейСоставРоли.Сотрудник КАК ФизическоеЛицо
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|			&Период,
			//+++ AK suvv 2018.06.08 ИП-00018376.01
			//|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
			|			(ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
			|           ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
			//--- AK suvv
			|				И Объект = &СтруктурнаяЕдиница) КАК СоответствиеОбъектРольСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка");
			Запрос.УстановитьПараметр("Период", Строка.Период);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Строка.ТорговаяТочка);
			
			Если Запрос.Выполнить().Пустой()Тогда
				Сообщить(Формат(Строка.Период, "ДЛФ=D") + " у торговой точки " + Строка.ТорговаяТочка.Наименование + " не установлен помощник управляющего");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеДаСервере()
	
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	ПорядокФормированияТабеля.Очистить();
	//+++ЗНК Zionek 2018.11.16 ИП-00020474
	знк_ДобавленныеВручную.Очистить();
	//---ЗНК Zionek 2018.11.16 ИП-00020474
	
	ПредставлениеТекущийПродавец = "";
	ТекущийПродавец = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТелефонТекущегоПродавца = "";
	
	Элементы.ДобавитьПродавца.Видимость 		= Ложь;
	Элементы.ДобавитьПродавцаСлева.Видимость 	= Ложь;
	Элементы.ПоставитьСотрудникаПеред.Видимость = Ложь;
	Элементы.СкопироватьГрафикСДругогоПродавца.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОчиститьДанныеДаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТелефонВКИНаСервере()
	
	Если ЗначениеЗаполнено(ТелефонТекущегоПродавца) И ЗначениеЗаполнено(ТекущийПродавец)Тогда
		
		ЗаписьКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		
		ЗаписьКИ.Объект 	= ТекущийПродавец;
		ЗаписьКИ.Вид 		= Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный;
		ЗаписьКИ.Тип    	= Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		ЗаписьКИ.Поле3 	= ТелефонТекущегоПродавца;
		ЗаписьКИ.Представление = ТелефонТекущегоПродавца;
		
		Попытка
			ЗаписьКИ.Записать();
		Исключение
		КонецПопытки;
		
		ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		НомерКолонки = ТекОбл.Лево;
		
		ТекОбласть = ТабличныйДокумент.Область(5, НомерКолонки,5, НомерКолонки);
		ТекОбласть.Значение = ТелефонТекущегоПродавца;
		
		Расшифровка = ТабличныйДокумент.Область(3, НомерКолонки, 3, НомерКолонки).Расшифровка;
		
		Если ТипЗнч(Расшифровка) = Тип("ФиксированнаяСтруктура") тогда
			ТабличныйДокумент.Область(3, НомерКолонки, 3, НомерКолонки).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Расшифровка.Сотрудник, Расшифровка.КодСотрудника, ТелефонТекущегоПродавца);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ГруппаСотрудников="Продавцы" ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
		ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
		ТекДанныеПредставление = ТекДанные.Представление;
		
		Если Текст <> "" Тогда
			
			ТекстКОбработке = НРег(Текст);
			ТекстКОбработке = СтрЗаменить(ТекстКОбработке, ".", ",");
			Если Найти(ТекстКОбработке, "пч,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "пч,", ""));
				СвойствоПродавца = 1;
			ИначеЕсли Найти(ТекстКОбработке, "сп,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "сп,", ""));
				СвойствоПродавца = 2;
			ИначеЕсли Найти(ТекстКОбработке, "пр,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "пр,", ""));
				СвойствоПродавца = 3;
			ИначеЕсли Найти(ТекстКОбработке, "ст,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "ст,", ""));
				СвойствоПродавца = 4;
			ИначеЕсли Найти(ТекстКОбработке, "нп,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "нп,", ""));
				СвойствоПродавца = 5;
			ИначеЕсли Найти(ТекстКОбработке, "снп,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "снп,", ""));
				СвойствоПродавца = 6;	
			Иначе
				СвойствоПродавца = 0;
			КонецЕсли;	
			СписокТТ = Новый СписокЗначений;
			СписокТТ.ЗагрузитьЗначения(ПолучитьМассивВариантов(ТекстКОбработке));
			
			Если СписокТТ.Количество() = 1 Тогда
				ВыбранноеЗначение = СписокТТ[0];
			Иначе	
				ВыбранноеЗначение = ВыбратьИзСписка(СписокТТ);
			КонецЕсли;	
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				
				ДанныеВыбораПользователя = ВыбранноеЗначение.Значение;
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
				СтруктураДанных.Вставить("СвойствоПродавца", 	СвойствоПродавца);
				СтруктураДанных.Вставить("ТорговаяТочка", 		ДанныеВыбораПользователя);
				СтруктураДанных.Вставить("Отсутствие", 			ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка"));
				
				Представление	 = "";
				Отсутствие 		 = СтруктураДанных.Отсутствие;
				ТорговаяТочка 	 = СтруктураДанных.ТорговаяТочка;
				СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
				
				Если ЗначениеЗаполнено(Отсутствие)Тогда
					
					ТекДанныеПредставление = Строка(Отсутствие);	
					
				ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоПродавца = 1 Тогда
						Представление = "пч, ";	
					ИначеЕсли СвойствоПродавца = 2 Тогда
						Представление = "сп, ";
					ИначеЕсли СвойствоПродавца = 3 Тогда
						Представление = "пр, ";
					ИначеЕсли СвойствоПродавца = 4 Тогда
						Представление = "ст, ";
					ИначеЕсли СвойствоПродавца = 5 Тогда
						Представление = "нп, ";
					ИначеЕсли СвойствоПродавца = 6 Тогда
						Представление = "снп, ";
					КонецЕсли;
					
					ТекДанныеПредставление = Представление + Строка(ТорговаяТочка);
					
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			КонецЕсли;
		Иначе
			ТекДанныеПредставление = "";
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
			СтруктураДанных.Вставить("ТорговаяТочка", 		ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			СтруктураДанных.Вставить("Отсутствие", 			ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка"));
			СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		КонецЕсли;
	ИначеЕсли ГруппаСотрудников="Кассиры" ИЛИ ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000 (Добавлено условие "ИЛИ ГруппаСотрудников = "Пекари"")
		
		ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
		ТекДанныеПредставление = ТекДанные.Представление;
		
		Если Текст <> "" Тогда
			
			ТекстКОбработке = НРег(Текст);
			ТекстКОбработке = СтрЗаменить(ТекстКОбработке, ".", ",");
			
			Если Найти(ТекстКОбработке, "ст,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "ст,", ""));
				СвойствоСотрудника = 1;
			Иначе
				СвойствоСотрудника = 0;
			КонецЕсли;
			
			СписокТТ = Новый СписокЗначений;
			СписокТТ.ЗагрузитьЗначения(ПолучитьМассивВариантов(ТекстКОбработке));
			
			Если СписокТТ.Количество() = 1 Тогда
				ВыбранноеЗначение = СписокТТ[0];
			Иначе	
				ВыбранноеЗначение = ВыбратьИзСписка(СписокТТ);
			КонецЕсли;	
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				
				ДанныеВыбораПользователя = ВыбранноеЗначение.Значение;
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"		 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"	 , ДанныеВыбораПользователя);
				СтруктураДанных.Вставить("СвойствоСотрудника", СвойствоСотрудника);
				
				Представление	 	= "";
				ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				
				Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоСотрудника = 1 Тогда
						Представление = "ст, ";
					КонецЕсли;
					
					ТекДанныеПредставление = Представление + Строка(ТорговаяТочка);
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			КонецЕсли;
		Иначе
			ТекДанныеПредставление = "";
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Сотрудник"	, ТекущийПродавец);
			СтруктураДанных.Вставить("ТорговаяТочка", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		КонецЕсли;
		
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
		ТекДанныеПредставление = ТекДанные.Представление;
		
		Если Текст <> "" Тогда
			
			ТекстКОбработке = НРег(Текст);
			ТекстКОбработке = СтрЗаменить(ТекстКОбработке, ".", ",");
			
			Если Найти(ТекстКОбработке, "н,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "н,", ""));
				СвойствоСотрудника = 1;
			ИначеЕсли Найти(ТекстКОбработке, "ст,") Тогда
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "ст,", ""));
				СвойствоСотрудника = 2;
			ИначеЕсли Найти(ТекстКОбработке, "вх,") Тогда //+++АК mika 2018.09.19 ИП-00019805 
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "вх,", ""));
				СвойствоСотрудника = 3;
			ИначеЕсли Найти(ТекстКОбработке, "нвх,") Тогда //+++АК mika 2018.11.20 ИП-00020498 
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "нвх,", ""));
				СвойствоСотрудника = 4;
			ИначеЕсли Найти(ТекстКОбработке, "свх,") Тогда //+++АК mika 2018.12.05 ИП-00020643 
				ТекстКОбработке = СокрЛП(СтрЗаменить(ТекстКОбработке, "свх,", ""));
				СвойствоСотрудника = 5;
			Иначе
				СвойствоСотрудника = 0;
			КонецЕсли;
			
			СписокТТ = Новый СписокЗначений;
			СписокТТ.ЗагрузитьЗначения(ПолучитьМассивВариантов(ТекстКОбработке));
			
			Если СписокТТ.Количество() = 1 Тогда
				ВыбранноеЗначение = СписокТТ[0];
			Иначе	
				ВыбранноеЗначение = ВыбратьИзСписка(СписокТТ);
			КонецЕсли;	
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				
				ДанныеВыбораПользователя = ВыбранноеЗначение.Значение;
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"		 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"	 , ДанныеВыбораПользователя);
				СтруктураДанных.Вставить("СвойствоСотрудника", СвойствоСотрудника);
				
				Представление	 	= "";
				ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				
				Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоСотрудника = 1 Тогда
						Представление = "н, ";
					ИначеЕсли СвойствоСотрудника = 2 Тогда
						Представление = "ст, ";
					ИначеЕсли СвойствоСотрудника = 3 Тогда //+++АК mika 2018.09.19 ИП-00019805 
						Представление = "вх, ";
					ИначеЕсли СвойствоСотрудника = 4 Тогда //+++АК mika 2018.11.20 ИП-00020498 
						Представление = "нвх, ";
					ИначеЕсли СвойствоСотрудника = 5 Тогда //+++АК mika 2018.12.05 ИП-00020643 
						Представление = "свх, ";
					КонецЕсли;
					
					ТекДанныеПредставление = Представление + Строка(ТорговаяТочка);
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			КонецЕсли;
		Иначе
			ТекДанныеПредставление = "";
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Сотрудник"	, ТекущийПродавец);
			СтруктураДанных.Вставить("ТорговаяТочка", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			СтруктураДанных.Вставить("Представление", ТекДанныеПредставление);
			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
	ТекДанные.Представление = ТекДанныеПредставление;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВариантов(Текст)
	
	Если Найти("1234567890", Лев(Текст, 1)) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование ПОДОБНО &ТекстПоиска + ""%""");
		
		Запрос.УстановитьПараметр("ТекстПоиска", Текст);
		МассивВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
		
	Иначе
		
		МассивВариантов = Новый Массив;
		
		СтруктураПеречислений = Новый Структура();
		Для Каждого Стр Из Метаданные.Перечисления.ВидыОтсутствия.ЗначенияПеречисления Цикл
			
			СтруктураПеречислений.Вставить(Стр.Имя, Перечисления.ВидыОтсутствия[Стр.Имя]);	
			
		КонецЦикла;
		
		Для Каждого СтрокаСтр Из СтруктураПеречислений Цикл
			
			Если Найти(ВРег(СтрокаСтр.Ключ), ВРег(Текст)) Тогда
				МассивВариантов.Добавить(СтрокаСтр.Значение);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВариантов;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Если Не ОтменаРедактирования Тогда
	//	
	//	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
	//		
	//		ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
	//		
	//		ТТ = ТекДанные.ТорговаяТочка;
	//		Отсутствие = ТекДанные.Отсутствие;
	//		СвойствоПродавца = ТекДанные.СвойствоПродавца;
	//		
	//		Если ЗначениеЗаполнено(ДанныеВыбораПользователя) Тогда
	//			
	//			Если ТипЗнч(ДанныеВыбораПользователя) = Тип("СправочникСсылка.СтруктурныеЕдиницы")Тогда
	//				
	//				ТТ = ДанныеВыбораПользователя;
	//				Отсутствие = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка");
	//				СвойствоПродавца = 0;
	//				
	//			Иначе
	//				
	//				ТТ = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	//				Отсутствие = ДанныеВыбораПользователя;
	//				СвойствоПродавца = 0;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца",
	//											ТекущийПродавец, ТТ, Отсутствие, СвойствоПродавца);
	//		
	//		Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
	//		
	//		Если ТипЗнч(Результат) = Тип("Структура")Тогда
	//			
	//			СтруктураДанных = Новый Структура();
	//			СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
	//			СтруктураДанных.Вставить("СвойствоПродавца", 	Результат.СвойствоПродавца);
	//			СтруктураДанных.Вставить("ТорговаяТочка", 		Результат.ТорговаяТочка);
	//			СтруктураДанных.Вставить("Отсутствие", 			Результат.Отсутствие);
	//			
	//			Представление	 = "";
	//			Отсутствие 		 = СтруктураДанных.Отсутствие;
	//			ТорговаяТочка 	 = СтруктураДанных.ТорговаяТочка;
	//			СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
	//			
	//			Если ЗначениеЗаполнено(Отсутствие)Тогда
	//				
	//				Представление = Строка(Отсутствие);	
	//				
	//			ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
	//				
	//				Если СвойствоПродавца = 1 Тогда
	//					Представление = "пч, ";	
	//				ИначеЕсли СвойствоПродавца = 2 Тогда
	//					Представление = "сп, ";
	//				ИначеЕсли СвойствоПродавца = 3 Тогда
	//					Представление = "пр, ";
	//				ИначеЕсли СвойствоПродавца = 4 Тогда
	//					Представление = "ст, ";
	//				КонецЕсли;
	//				
	//				Представление = Представление + Строка(ТорговаяТочка);
	//				
	//			КонецЕсли;
	//			
	//			СтруктураДанных.Вставить("Представление", Представление);
	//			ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	//
	//ДанныеВыбораПользователя = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных)
	
	//+++АК mika 2018.02.14 ИП-00017263.02
	СтруктураДанных.Вставить("ГруппаСотрудника", ПолучитьЦФОПомощникаСервер(ТекущийПродавец));
	//---АК mika

	МассивСтрок = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Период,Сотрудник",СтруктураДанных.Период,СтруктураДанных.Сотрудник));
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = СтрокаМассива;
		
		СтруктураДанных.Вставить("Период", ТекСтр.Период);
		
		Если Не ЗаписатьИзмененияВРегистр(СтруктураДанных) Тогда
			
			Если  СтруктураДанных.Свойство("Удаление") Тогда
				Если ЗначениеЗаполнено(СтруктураДанных.Удаление) Тогда
					СпрОб=СтруктураДанных.Сотрудник.ПолучитьОбъект();
					
					НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",СтруктураДанных.Удаление,СтруктураДанных.Период));
					Если НайденнаяСтрока.Количество() Тогда
						
						СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
					КонецЕсли;
					СпрОб.Записать();
				КонецЕсли; 
			КонецЕсли; 
			
			
			ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураДанных);
			ТекСтр.Представление = СтруктураДанных.Представление;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, СтруктураДанных.Представление, СтруктураДанных.ТорговаяТочка);
		Иначе	
			Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьМенеджерЗаписи();
	Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	//+++АК mika 2018.02.14 ИП-00017263.02
	Запись.ГруппаСотрудника = ПолучитьЦФОПомощникаСервер(Запись.Сотрудник);
	//---АК mika
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

Процедура ЗаписатьИзмененияВРегистр_Уборщицы(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыУборщиц.СоздатьМенеджерЗаписи();
	Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	//+++АК mika 2018.02.14 ИП-00017263.02
	Запись.ГруппаСотрудника = ПолучитьЦФОПомощникаСервер(Запись.Сотрудник);
	//---АК mika
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры


&НаСервере
Функция ЗаписатьИзмененияВРегистр(ПараметрыСотрудника)
	
	ОшибкиПриЗаписи = Ложь;
	
	//mind закомментировал этот участок - правильнее сначала вычистить записи по периоду и сотруднику
	//mind начало коммента
	//
	//// РАБОТА В ДРУГОЙ ГРУППЕ
	//Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) Тогда
	//	
	//	Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	ТабельРаботыПродавцов.Группа
	//	|ИЗ
	//	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	//	|ГДЕ
	//	|	ТабельРаботыПродавцов.Сотрудник = &Сотрудник
	//	|	И ТабельРаботыПродавцов.Период = &Период
	//	|	И ТабельРаботыПродавцов.ТорговаяТочка <> &ТорговаяТочка
	//	|	И ТабельРаботыПродавцов.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)");
	//	
	//	Запрос.УстановитьПараметр("Сотрудник", 	ТекущийПродавец);
	//	Запрос.УстановитьПараметр("Группа", 	ГруппаТорговыхТочек);
	//	Запрос.УстановитьПараметр("Период", 	ПараметрыСотрудника.Период);
	//	Запрос.УстановитьПараметр("ТорговаяТочка", 	Магазин);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий()Цикл
	//		ОшибкиПриЗаписи = Истина;
	//		Сообщить(" - сотрудник " + ТекущийПродавец + " " + Формат(ПараметрыСотрудника.Период, "ДЛФ=DD") + " уже работает в группе " + Выборка.Группа + ".");
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//Если ОшибкиПриЗаписи Тогда
	//	Возврат ОшибкиПриЗаписи;
	//КонецЕсли;
	//
	//// Очистим запись по полям Период, Группа, Сотрудник
	//Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
	//	
	//	НЗ = РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();
	//	НЗ.Отбор.Период.Установить(ПараметрыСотрудника.Период);
	//	НЗ.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
	//	НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	//	НЗ.Записать();
	//	
	//КонецЕсли;
	//mind конец коммента
	
	Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
		
		НЗ = РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(ПараметрыСотрудника.Период);
		НЗ.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
		НЗ.Записать();
		
	КонецЕсли;
	
	Если ПараметрыСотрудника.Свойство("ГруппаУдалить") Тогда
		Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
			НЗ = РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(ПараметрыСотрудника.Период);
			НЗ.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
			
			Если ПараметрыСотрудника.Свойство("ОтсутствиеУдалить") И ЗначениеЗаполнено(ПараметрыСотрудника.ОтсутствиеУдалить) Тогда
			Иначе	
				НЗ.Отбор.Группа.Установить(ПараметрыСотрудника.ГруппаУдалить);
			КонецЕсли;
			НЗ.Записать();
		КонецЕсли; 
	КонецЕсли; 
	
	
	
	////Запись удалили
	//Если Не ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) И Не ЗначениеЗаполнено(ПараметрыСотрудника.Отсутствие) Тогда
	//	
	//	Запись = РегистрыСведений.ТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
	//	Запись.Группа 	 = ГруппаТорговыхТочек;
	//	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСотрудника);
	//	
	//	Попытка
	//		Запись.Удалить();
	//	Исключение
	//		ОшибкиПриЗаписи = Истина;
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//Иначе
	
	Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) ИЛИ ЗначениеЗаполнено(ПараметрыСотрудника.Отсутствие) ИЛИ ЗначениеЗаполнено(ПараметрыСотрудника.Тренинг) Тогда	
		
		Запись = РегистрыСведений[ВидТабеля].СоздатьМенеджерЗаписи();
		Запись.Группа 	 = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыСотрудника);
		
		Попытка
			Запись.Записать();
		Исключение
			ОшибкиПриЗаписи = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	//mind 2017-09-12 журнал переделан на универсальный и запись производит из модуля
	//// Добавим запись в журнал
	//ЗаписьЖурнала = РегистрыСведений.ЖурналТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
	//ЗаписьЖурнала.ДатаИзменения = ТекущаяДата();
	//ЗаписьЖурнала.Пользователь  = ПараметрыСеанса.ТекущийПользователь;
	//ЗаписьЖурнала.Группа 		= ГруппаТорговыхТочек;
	//ЗаписьЖурнала.Дата			= ПараметрыСотрудника.Период;
	//ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, ПараметрыСотрудника);
	//
	//Попытка
	//	ЗаписьЖурнала.Записать();
	//Исключение
	//КонецПопытки;	
	
	Возврат ОшибкиПриЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиНаСервере();
	
	ОшибкиПриУдалении = Ложь;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Сотрудник", 			ТекущийПродавец);
	СтруктураДанных.Вставить("Группа", 	  			ГруппаТорговыхТочек);
	СтруктураДанных.Вставить("СвойствоПродавца", 	0);
	СтруктураДанных.Вставить("ТорговаяТочка", 		Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	СтруктураДанных.Вставить("Отсутствие", 			Перечисления.ВидыОтсутствия.ПустаяСсылка());
	
	МассивВыделенныхСтрок = Элементы.ОсновнаяТаблица.ВыделенныеСтроки;
	
	Для Каждого СтрокаМассива Из МассивВыделенныхСтрок Цикл
		
		ТекСтр = ОсновнаяТаблица.НайтиПоИдентификатору(СтрокаМассива);
		
		СтруктураДанных.Вставить("Период", 	ТекСтр.Период);
		
		// Очистим запись по полям Период, Группа, Сотрудник
		Если ЗначениеЗаполнено(СтруктураДанных.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(СтруктураДанных.Сотрудник)Тогда
			
			
			НЗ = РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(СтруктураДанных.Период);
			НЗ.Отбор.Сотрудник.Установить(СтруктураДанных.Сотрудник);
			НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
			
			Попытка
				НЗ.Записать();
			Исключение
				ОшибкиПриУдалении = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		//Запись = РегистрыСведений.ТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
		//Запись.Группа 	 = ГруппаТорговыхТочек;
		//ЗаполнитьЗначенияСвойств(Запись, СтруктураДанных);
		//
		//Попытка
		//	Запись.Удалить();
		//Исключение
		//	ОшибкиПриУдалении = Истина;
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		
		//mind 2017-09-12 журнал переделан на универсальный и запись производит из модуля
		//// Добавим запись в журнал
		//ЗаписьЖурнала = РегистрыСведений.ЖурналТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
		//ЗаписьЖурнала.ДатаИзменения = ТекущаяДата();
		//ЗаписьЖурнала.Пользователь  = ПараметрыСеанса.ТекущийПользователь;
		//ЗаписьЖурнала.Группа 		= ГруппаТорговыхТочек;
		//ЗаписьЖурнала.Дата			= СтруктураДанных.Период;
		//ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураДанных);
		//
		//Попытка
		//	ЗаписьЖурнала.Записать();
		//Исключение
		//КонецПопытки;
		
		Если Не ОшибкиПриУдалении Тогда
			
			ТекСтр.ТорговаяТочка = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			ТекСтр.Отсутствие = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка");
			ТекСтр.СвойствоПродавца = 0;
			ТекСтр.Представление = "";
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПродавцовВТабеле(НовоеФизЛицо, ТекущееФизЛицо)
	
	ТЗПорядок = РеквизитФормыВЗначение("ПорядокФормированияТабеля");
	ТЗПорядок.Сортировать("Порядок");
	
	НайденнаяСтрока = ТЗПорядок.Найти(ТекущееФизЛицо, "ФизическоеЛицо");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	ВсегоСтрок = ТЗПорядок.Количество()-1;
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			
			Стр.Порядок = Стр.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	СтрНовогоФЛ =  ТЗПорядок.Найти(НовоеФизЛицо, "ФизическоеЛицо");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗПорядок.Добавить();
		НовСтр.ФизическоеЛицо = НовоеФизЛицо;
		НовСтр.Порядок = ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗПорядок.Сортировать("Порядок");
	Порядок = 1;
	Для Каждого Стр Из ТЗПорядок Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	// Запишем в регистр
	
	Если ВидТабеля="Продавцы" Тогда
		КлючСлово="";
	ИначеЕсли ВидТабеля="Грузчики" Тогда
		КлючСлово="Грузчиков";
	ИначеЕсли ВидТабеля="Кассиры" Тогда
		КлючСлово="Кассиров";
	КонецЕсли; 
	НаборЗаписей = РегистрыСведений["СпецификаФормированияТабеля"+КлючСлово].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	
	Для Каждого Стр Из ТЗПорядок Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Группа = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗначениеВРеквизитФормы(ТЗПорядок, "ПорядокФормированияТабеля");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафикСДругогоПродавца(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом для которго необходимо скопировать график. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	
	ЗначениеОтбора = Новый Структура("Ссылка", СписокСотрудников);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ПараметрыОткрытия = Новый Структура("ФизическоеЛицо, НачалоПериода, КонецПериода", Результат, Период.ДатаНачала, Период.ДатаОкончания);
		
		ДанныеКопирования = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаКопированияГрафика", ПараметрыОткрытия, ЭтаФорма);
		
		Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
			
			СкопироватьГрафикСДругогоПродавцаНаСервере(ДанныеКопирования);
			
			//ПеренестиПродавцаНаСервере(НомерВыделеннойКолонки, Результат);
			//
			//ИзменитьПорядокПродавцовВТабеле(ТекущийПродавец, Результат);
			//
			ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
			//ДанныеИзменены = Истина;
			//УстановитьДоступностьЭлементовФормы();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикСДругогоПродавцаНаСервере(ДанныеКопирования)
	
	ТЗ = РеквизитФормыВЗначение("ОсновнаяТаблица");
	
	ТаблицаДанных = ТЗ.СкопироватьКолонки("Период, ТорговаяТочка, Отсутствие, СвойствоПродавца, Представление");
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Сотрудник", ТекущийПродавец);
	СтруктураДанных.Вставить("СвойствоПродавца");
	СтруктураДанных.Вставить("ТорговаяТочка");
	СтруктураДанных.Вставить("Отсутствие");
	СтруктураДанных.Вставить("Представление");
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеКопирования.ФизическоеЛицо));
	Если НайденныеСтроки.Количество()Тогда
		
		НП = НачалоДня(ДанныеКопирования.НачалоПериода);
		КП = КонецДня(ДанныеКопирования.КонецПериода);
		
		Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
			
			Если СтрокаМассива.Период >= НП И СтрокаМассива.Период <= КП Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Сотрудник с которого производится копирование не найден в графике");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДанных.Количество()Тогда
		
		Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
			
			Строки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, СтрокаТЗ.Период));
			Если Строки.Количество()Тогда
				
				СтруктураДанных.Вставить("Период", СтрокаТЗ.Период);
				
				ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТЗ);
				
				Если Не ЗаписатьИзмененияВРегистр(СтруктураДанных) Тогда
					
					ИскомаяСтрока = Строки[0];
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока, СтрокаТЗ);
					
					ОбновитьДанныеВТабличномДокументе(СтрокаТЗ.Период, СтруктураДанных.Представление, СтруктураДанных.ТорговаяТочка);
				Иначе	
					Сообщить("Данные за период " + Формат(СтрокаТЗ.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТЗ, "ОсновнаяТаблица");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетУкомплектованностьТорговыхТочек(Команда)
	
	ОткрытьФорму("Отчет.УкомплектованностьТорговыхТочек.Форма.ФормаОтчета",, ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		Если ГруппаСотрудников="Продавцы"  ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
			ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
			
			ТТ = ТекДанные.ТорговаяТочка;
			Отсутствие 		 = ТекДанные.Отсутствие;
			СвойствоПродавца = ТекДанные.СвойствоПродавца;
			КоличествоЧасов  = ТекДанные.КоличествоЧасов;
			
			ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов",
			ТекущийПродавец, ТТ, Отсутствие, СвойствоПродавца, КоличествоЧасов);
			
			Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
			
			Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
				СтруктураДанных.Вставить("СвойствоПродавца", 	Результат.СвойствоПродавца);
				СтруктураДанных.Вставить("ТорговаяТочка", 		Результат.ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие", 			Результат.Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов", 	Результат.КоличествоЧасов);
				
				Представление	 = "";
				Отсутствие 		 = СтруктураДанных.Отсутствие;
				ТорговаяТочка 	 = СтруктураДанных.ТорговаяТочка;
				СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
				КоличествоЧасов  = СтруктураДанных.КоличествоЧасов;
				
				Если ЗначениеЗаполнено(Отсутствие)Тогда
					
					Представление = Строка(Отсутствие);	
					
				ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоПродавца = 1 Тогда
						Представление = "пч, ";	
					ИначеЕсли СвойствоПродавца = 2 Тогда
						Представление = "сп, ";
					ИначеЕсли СвойствоПродавца = 3 Тогда
						Представление = "пр, ";
					ИначеЕсли СвойствоПродавца = 4 Тогда
						Представление = "ст, ";
					ИначеЕсли СвойствоПродавца = 5 Тогда
						Представление = "нп, ";
					ИначеЕсли СвойствоПродавца = 6 Тогда
						Представление = "снп, ";	
					КонецЕсли;
					
					Представление = Представление + Строка(ТорговаяТочка);
					
				КонецЕсли;
				
				Если ЭтоМагазин(ТорговаяТочка) И СвойствоПродавца = 1 Тогда
					Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ТекДанные.Представление = Представление;
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			КонецЕсли;
		ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
			ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
			
			ТТ = ТекДанные.ТорговаяТочка;
			Отсутствие 		 = ТекДанные.Отсутствие;
			КоличествоЧасов  = ТекДанные.КоличествоЧасов;
			СвойствоСотрудника = ТекДанные.СвойствоПродавца;
			
			ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
			ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
			
			Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
			
			Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
				
				Представление	 	= "";
				ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				Отсутствие 		 	= СтруктураДанных.Отсутствие;
				КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
				СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				
				Если ЗначениеЗаполнено(Отсутствие)Тогда
					
					Представление = Строка(Отсутствие);	
					
				ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоСотрудника = 1 Тогда
						Представление = "ст, ";
					КонецЕсли;
					
					Представление = Представление + Строка(ТорговаяТочка);
					
				КонецЕсли;
				
				Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
					Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ТекДанные.Представление = Представление;
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
			КонецЕсли;
			
		//+++АК mika 2018.04.12 ИП-00018000
		ИначеЕсли ГруппаСотрудников = "Пекари" Тогда
			ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
			
			ТТ = ТекДанные.ТорговаяТочка;
			Отсутствие 		 = ТекДанные.Отсутствие;
			КоличествоЧасов  = ТекДанные.КоличествоЧасов;
			СвойствоСотрудника = ТекДанные.СвойствоПродавца;
			
			ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
			ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
			
			Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПекарей.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
			
			Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
				
				Представление	 	= "";
				ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				Отсутствие 		 	= СтруктураДанных.Отсутствие;
				КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
				СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				
				Если ЗначениеЗаполнено(Отсутствие)Тогда
					
					Представление = Строка(Отсутствие);	
					
				ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоСотрудника = 1 Тогда
						Представление = "ст, ";
					КонецЕсли;
					
					Представление = Представление + Строка(ТорговаяТочка);
					
				КонецЕсли;
				
				Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
					Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ТекДанные.Представление = Представление;
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
			КонецЕсли;
		//---АК mika 2018.04.12 ИП-00018000
		ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
			ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
			
			ТТ = ТекДанные.ТорговаяТочка;
			Отсутствие 		 = ТекДанные.Отсутствие;
			КоличествоЧасов  = ТекДанные.КоличествоЧасов;
			СвойствоСотрудника = ТекДанные.СвойствоПродавца;
			
			ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
			ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
			
			Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыГрузчиков.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
			
			Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
				
				Представление	 	= "";
				ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				Отсутствие 		 	= СтруктураДанных.Отсутствие;
				КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
				СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				
				Если ЗначениеЗаполнено(Отсутствие)Тогда
					
					Представление = Строка(Отсутствие);	
					
				ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
					
					Если СвойствоСотрудника = 1 Тогда
						Представление = "н, ";
					ИначеЕсли СвойствоСотрудника = 2 Тогда
						Представление = "ст, ";
					ИначеЕсли СвойствоСотрудника = 3 Тогда //+++АК mika 2018.09.19 ИП-00019805 
						Представление = "вх, ";
					ИначеЕсли СвойствоСотрудника = 4 Тогда //+++АК mika 2018.11.20 ИП-00020498 
						Представление = "нвх, ";
					ИначеЕсли СвойствоСотрудника = 5 Тогда //+++АК mika 2018.12.05 ИП-00020643 
						Представление = "свх, ";
					КонецЕсли;
					
					Представление = Представление + Строка(ТорговаяТочка);
					
				КонецЕсли;
				
				Если СвойствоСотрудника <> 2 И Не ЗначениеЗаполнено(Отсутствие) Тогда
					Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ТекДанные.Представление = Представление;
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикРаботыЗазывал(Команда)
	
	ВП = Новый Структура("Вариант, ДатаНачала, ДатаОкончания", Период.Вариант, Период.ДатаНачала, Период.ДатаОкончания);
	ПараметрыФормы = Новый Структура("ГруппаТорговыхТочек, ВП", ГруппаТорговыхТочек, ВП);
	ОткрытьФорму("Обработка.ГрафикРаботыПромоутеров.Форма.Форма", ПараметрыФормы, ЭтаФорма); 
	
КонецПроцедуры

&НаСервере
Функция ЭтоМагазин(пТорговаяТочка)
	
	Возврат пТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин;	
	
КонецФункции

&НаКлиенте
Процедура ЗаморозитьРазморозитьЗП(Команда)
	
	ОткрытьФорму("РегистрСведений.ЗамороженнаяЗарплатаПродавцов.Форма.ФормаЗаморозкаРазморозка");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСотрудниковПриИзменении(Элемент)
	Если ГруппаСотрудников="Кассиры" Тогда
		ВидТабеля="ТабельРаботыКассиров";
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		ВидТабеля="ТабельРаботыГрузчиков";
	ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
		ВидТабеля="ТабельРаботыПромоутеров";
	ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
		ВидТабеля="ТабельРаботыУборщиц";
	ИначеЕсли ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
		ВидТабеля="ТабельРаботыПекарей";
	Иначе 
		ВидТабеля="ТабельРаботыПродавцов";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКандидатовВГрафик(Команда)
	ОткрытьФорму("Обработка.ПодборПродавцаВГрафик.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура Статусы(Команда)
	ОткрытьФорму("РегистрСведений.СтатусыПродавцов.ФормаСписка");
КонецПроцедуры



&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ТекущийПродавец) 
		И (ТабличныйДокумент.ТекущаяОбласть.Верх = 3 ИЛИ ТабличныйДокумент.ТекущаяОбласть.Верх = 6  ИЛИ ТабличныйДокумент.ТекущаяОбласть.Верх = 7) Тогда //+++АК MIND 2017.11.15 ИП-00017115
		
		СтруктураЗаполнения=Новый Структура("Продавец",ТекущийПродавец);
		//Период1=ПолучитьПоследнююДату(ТекущийПродавец);
		//Если Период1=Неопределено Тогда
		//	Период1=НачалоДня(ТекущаяДата());
		//Иначе	
		//	Ответ = Вопрос("Внести новую запись?", РежимДиалогаВопрос.ДаНет);
		
		//	Если (Ответ = КодВозвратаДиалога.Да) Тогда
		//		Период1=НачалоДня(ТекущаяДата());
		//	КонецЕсли; 
		//КонецЕсли; 
		//СтруктураЗаполнения.Вставить("Период",Период1);
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуЗаписи(СтруктураЗаполнения);
		
		ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		НомерКолонки = ТекОбл.Лево;
		
		НомерСтроки = 7;
		
		
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		МасСтр=ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник",ТекущийПродавец));	
		СтрТЗ=МасСтр[0];
		Представление		  = Строка(СтрТЗ.Статус)+" "+?(СтрТЗ.ПЧ,"п/ч","");
		ТекОбласть.Значение = Представление;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущийПродавец) 
		И ТабличныйДокумент.ТекущаяОбласть.Верх = 5 Тогда //+++АК MIND 2017.11.15 ИП-00017115 не согласен с таким определнием какую расшифровку надо сделать, надо было по значение какому-нито специальному в самой структуре расшифровки определять, но коли уж так сделано изначально ..	
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура("ФизЛицо, СтрокаТелефоны", ТекущийПродавец, Элементы.ТабличныйДокумент.ТекущаяОбласть.Текст);
		РезультатОткрытия = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаУказанияТелефона", СтруктураОткрытия);
		Если РезультатОткрытия <> Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть.Значение = РезультатОткрытия;
		КонецЕсли;	
		//---АК MIND 
	Иначе
		
		Если ТипЗнч(Расшифровка)=Тип("ФиксированнаяСтруктура") И Расшифровка.Свойство("Период") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
				Если ГруппаСотрудников="Продавцы"  ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
					//ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
					//+++АК BELN 2017.12.11 ИП-00017037 
					ТекДата=ТекущаяДата();
					Если (День(ТекДата)>17 И День(Расшифровка.Период)<16 И НачалоМесяца(Расшифровка.Период)=НачалоМесяца(ТекДата)) ИЛИ 
						(День(ТекДата)>2 И НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))=НачалоМесяца(ТекДата)) ИЛИ
						НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))<НачалоМесяца(ТекДата) Тогда
						Сообщить(НСтр("ru = 'Внести изменения нельзя, так как данный период отправлен на расчет заработной платы, по всем вопросам обращайтесь к помощнику вашего магазина!'"));
						Возврат;
					КонецЕсли; 
					//---АК BELN 2017.12.11 
					НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
					
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						
						Если ПроверитьВозможностьУдаленияПрогула(СтрокаСДанными) Тогда //+++АК mika 2018.11.09 ИП-00019541.02 
							Возврат;
						КонецЕсли;

						СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
						ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
						ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
						ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
						Отсутствие= 			СтрокаСДанными.Отсутствие;
						КоличествоЧасов= 	СтрокаСДанными.КоличествоЧасов;
						Тренинг=СтрокаСДанными.Тренинг;
						ЭкстренныйВызов = СтрокаСДанными.ЭкстренныйВызов;
						
					Иначе	
						СвойствоПродавца= 	Неопределено;
						ТорговаяТочка= 		Неопределено;
						ТорговаяТочкаНаименование= 		Неопределено;
						ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
						Отсутствие= 			Неопределено;
						Тренинг=Неопределено;
						ЭкстренныйВызов = Ложь;
						КоличествоЧасов= 	0;
					КонецЕсли;	
					
					//ТТ = ТорговаяТочка;
					//Отсутствие 		 = Отсутствие;
					//СвойствоПродавца = СвойствоПродавца;
					//КоличествоЧасов  = КоличествоЧасов;
					
					ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов,ТекДата,Тренинг, ЭкстренныйВызов",
					ТекущийПродавец, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов,Расшифровка.Период,Тренинг, ЭкстренныйВызов);
					
					Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						СтруктураДанных = Новый Структура();
						СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
						СтруктураДанных.Вставить("СвойствоПродавца", 	Результат.СвойствоПродавца);
						СтруктураДанных.Вставить("ТорговаяТочка", 		Результат.ТорговаяТочка);
						СтруктураДанных.Вставить("Отсутствие", 			Результат.Отсутствие);
						СтруктураДанных.Вставить("КоличествоЧасов", 	Результат.КоличествоЧасов);
						СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
						СтруктураДанных.Вставить("Тренинг", 	Результат.Тренинг);
						СтруктураДанных.Вставить("ЭкстренныйВызов", 	Результат.ЭкстренныйВызов);
						
						Представление	 = "";
						Отсутствие 		 = СтруктураДанных.Отсутствие;
						ТорговаяТочка 	 = СтруктураДанных.ТорговаяТочка;
						СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
						КоличествоЧасов  = СтруктураДанных.КоличествоЧасов;
						
						Если ЗначениеЗаполнено(Отсутствие)Тогда
							
							Представление = Строка(Отсутствие);	
							
						ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
							
							Если СвойствоПродавца = 1 Тогда
								Представление = "пч, ";	
							ИначеЕсли СвойствоПродавца = 2 Тогда
								Представление = "сп, ";
							ИначеЕсли СвойствоПродавца = 3 Тогда
								Представление = "пр, ";
							ИначеЕсли СвойствоПродавца = 4 Тогда
								Представление = "ст, ";
							ИначеЕсли СвойствоПродавца = 5 Тогда
								Представление = "нп, ";
							ИначеЕсли СвойствоПродавца = 6 Тогда
								Представление = "снп, ";	
							КонецЕсли;
							
							//Если СтруктураДанных.ЭкстренныйВызов Тогда
							//	Представление = Представление + "экстр. вызов, ";
							//КонецЕсли;
							
							Представление = Представление + Строка(ТорговаяТочка);
						ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
							Представление="Тренинг";	
						КонецЕсли;
						
						Если ЭтоМагазин(ТорговаяТочка) И СвойствоПродавца = 1 Тогда
							Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
						КонецЕсли;
						
						СтруктураДанных.Вставить("Представление", Представление);
						Представление = Представление;
						ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
						
					КонецЕсли;
				ИначеЕсли ГруппаСотрудников = "Кассиры" ИЛИ ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000 (Добавлено условие "ИЛИ ГруппаСотрудников = "Пекари"")
					НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
					//+++АК BELN 2017.12.11 ИП-00017037 
					ТекДата=ТекущаяДата();
					Если (День(ТекДата)>17 И День(Расшифровка.Период)<16 И НачалоМесяца(Расшифровка.Период)=НачалоМесяца(ТекДата)) ИЛИ 
						(День(ТекДата)>2 И НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))=НачалоМесяца(ТекДата)) ИЛИ
						НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))<НачалоМесяца(ТекДата) Тогда
						Сообщить(НСтр("ru = 'Внести изменения нельзя, так как данный период отправлен на расчет заработной платы, по всем вопросам обращайтесь к помощнику вашего магазина!'"));
						Возврат;
					КонецЕсли; 
					//---АК BELN 2017.12.11 
					
					
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						
						СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
						ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
						ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
						ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
						Отсутствие= 			СтрокаСДанными.Отсутствие;
						КоличествоЧасов= 	СтрокаСДанными.КоличествоЧасов;
						Тренинг= 	СтрокаСДанными.Тренинг;
						ЭкстренныйВызов = СтрокаСДанными.ЭкстренныйВызов;
						
					Иначе	
						СвойствоПродавца= 	Неопределено;
						ТорговаяТочка= 		Неопределено;
						ТорговаяТочкаНаименование= 		Неопределено;
						ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
						Отсутствие= 			Неопределено;
						КоличествоЧасов= 	0;
						Тренинг= 			Неопределено;
						ЭкстренныйВызов = Ложь;
					КонецЕсли;	
					
					
					ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов,ТекДата,Тренинг, ЭкстренныйВызов",
					ТекущийПродавец,ТорговаяТочка,Отсутствие,СвойствоПродавца,КоличествоЧасов,Расшифровка.Период,Тренинг, ЭкстренныйВызов);
					
					Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						СтруктураДанных = Новый Структура();
						СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
						СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
						СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
						СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
						СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
						СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
						СтруктураДанных.Вставить("Тренинг", 	Результат.Тренинг);
						СтруктураДанных.Вставить("ЭкстренныйВызов", 	Результат.ЭкстренныйВызов);
						
						Представление	 	= "";
						ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
						Отсутствие 		 	= СтруктураДанных.Отсутствие;
						КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
						СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
						
						Если ЗначениеЗаполнено(Отсутствие)Тогда
							
							Представление = Строка(Отсутствие);	
							
						ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
							
							Если СвойствоСотрудника = 1 Тогда
								Представление = "ст, ";
							КонецЕсли;
							
							//Если СтруктураДанных.ЭкстренныйВызов Тогда
							//	Представление = Представление + "экстр. вызов, ";
							//КонецЕсли;
							
							Представление = Представление + Строка(ТорговаяТочка);
						ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
							Представление = "Тренинг";
							
						КонецЕсли;
						
						Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) И  Не ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
							Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
						КонецЕсли;
						
						СтруктураДанных.Вставить("Представление", Представление);
						ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
					КонецЕсли;
				ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
					НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
					//+++АК BELN 2017.12.11 ИП-00017037 
					ТекДата=ТекущаяДата();
					Если (День(ТекДата)>17 И День(Расшифровка.Период)<16 И НачалоМесяца(Расшифровка.Период)=НачалоМесяца(ТекДата)) ИЛИ 
						(День(ТекДата)>2 И НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))=НачалоМесяца(ТекДата)) ИЛИ
						НачалоМесяца(ДобавитьМесяц(Расшифровка.Период,1))<НачалоМесяца(ТекДата) Тогда
						Сообщить(НСтр("ru = 'Внести изменения нельзя, так как данный период отправлен на расчет заработной платы, по всем вопросам обращайтесь к помощнику вашего магазина!'"));
						Возврат;
					КонецЕсли; 
					//---АК BELN 2017.12.11 
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						
						СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
						ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
						ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
						ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
						Отсутствие= 			СтрокаСДанными.Отсутствие;
						КоличествоЧасов= 	СтрокаСДанными.КоличествоЧасов;
						Тренинг= 	СтрокаСДанными.Тренинг;
						ЭкстренныйВызов = СтрокаСДанными.ЭкстренныйВызов;
					Иначе	
						СвойствоПродавца= 	Неопределено;
						ТорговаяТочка= 		Неопределено;
						ТорговаяТочкаНаименование= 		Неопределено;
						ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
						Отсутствие= 			Неопределено;
						КоличествоЧасов= 	0;
						Тренинг= 	Неопределено;
						ЭкстренныйВызов = Ложь;
					КонецЕсли;	
					
					
					ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов,ТекДата,Тренинг, ЭкстренныйВызов",
					ТекущийПродавец,ТорговаяТочка,Отсутствие,СвойствоПродавца,КоличествоЧасов,Расшифровка.Период,Тренинг, ЭкстренныйВызов);
					
					Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыГрузчиков.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						СтруктураДанных = Новый Структура();
						СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
						СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
						СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
						СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
						СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
						СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
						СтруктураДанных.Вставить("Тренинг", Результат.Тренинг);
						СтруктураДанных.Вставить("ЭкстренныйВызов", Результат.ЭкстренныйВызов);
						
						Представление	 	= "";
						ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
						Отсутствие 		 	= СтруктураДанных.Отсутствие;
						КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
						СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
						
						Если ЗначениеЗаполнено(Отсутствие)Тогда
							
							Представление = Строка(Отсутствие);	
							
						ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
							
							Если СвойствоСотрудника = 1 Тогда
								Представление = "н, ";
							ИначеЕсли СвойствоСотрудника = 2 Тогда
								Представление = "ст, ";
							ИначеЕсли СвойствоСотрудника = 3 Тогда //+++АК mika 2018.09.19 ИП-00019805 
								Представление = "вх, ";
							ИначеЕсли СвойствоСотрудника = 4 Тогда //+++АК mika 2018.11.20 ИП-00020498 
								Представление = "нвх, ";
							ИначеЕсли СвойствоСотрудника = 5 Тогда //+++АК mika 2018.12.05 ИП-00020643 
								Представление = "свх, ";
							КонецЕсли;
							
							//Если СтруктураДанных.ЭкстренныйВызов Тогда
							//	Представление = Представление + "экстр. вызов, ";
							//КонецЕсли;
							
							Представление = Представление + Строка(ТорговаяТочка);
						ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
							Представление="Тренинг";	
						КонецЕсли;
						
						Если СвойствоСотрудника <> 2 И Не ЗначениеЗаполнено(Отсутствие) И Не ЗначениеЗаполнено(СтруктураДанных.Тренинг) Тогда
							Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
						КонецЕсли;
						
						СтруктураДанных.Вставить("Представление", Представление);
						ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
						
					КонецЕсли;
				ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
					МасСтр = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период,Сотрудник",Расшифровка.Период,Расшифровка.Сотрудник));
					Если МасСтр.Количество() = 0 Тогда
						Возврат;
					КонецЕсли;
					ТекДанные=МасСтр[0];
					
					ТЗ1.Очистить();
					//ТЗ = ТЗ1.Выгрузить();
					Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
						Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка)Тогда
							ЗаполнитьЗначенияСвойств(ТЗ1.Добавить(), СтрМассива);
						КонецЕсли;
					КонецЦикла;
					
					МассивСтрок = МасСтр;
					//Если МассивСтрок.Количество() = 1 Тогда
					
					ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекДанные.Период);
					//+++АК MIND 2017.11.08 походу здесь неправильный вызов, нужно делать вызов для промоутеров
					//Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
					Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаРедактированияПериода_ИзМагазина", ПараметрыОткрытия, ЭтаФорма);	
					//---АК MIND 
					
					//Иначе
					//	
					//	// Без привязки к периоду
					//	ПараметрыОткрытия = Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец);
					//	Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаРедактированияПериодаМассивСтрок", ПараметрыОткрытия, ЭтаФорма);
					//	
					//КонецЕсли;
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							
							ТекСтр = СтрокаМассива;
							
							Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
							
							// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
							Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период)Тогда
								ОчиститьЗаписиВРегистре(Данные);
							КонецЕсли;
							
							ТД = ТекСтр.ТаблицаДанных;
							ТД.Очистить();
							
							//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
							Представление   = "";
							КоличествоЧасов = 0;
							ТорговаяТочка = Неопределено;
							
							Для Каждого Стр Из Результат.ТаблицаДанных Цикл
								
								// Берем первую для раскраски макета
								Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
									ТорговаяТочка = Стр.ТорговаяТочка;	
								КонецЕсли;
								
								Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
								Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
						
								ОшибкаПриЗаписи = Ложь;
								ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи);
								
								Если Не ОшибкаПриЗаписи Тогда
									
									НовСтр=ТД.Добавить();
									НовСтр.ТорговаяТочка=Стр.ТорговаяТочка;
									НовСтр.КоличествоЧасов=Стр.КоличествоЧасов;
									
									//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
									Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
									КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
									
								Иначе
									Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
								КонецЕсли;
								
							КонецЦикла;
							
							ПредставлениеТабличныйДокумент = Представление;
							
							ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
							ТекСтр.Представление   = Представление;
							ТекСтр.КоличествоЧасов = КоличествоЧасов;
							
							ОбновитьДанныеВТабличномДокументе1(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
							
						КонецЦикла;
						
					КонецЕсли;
					
				//+++АК MIND 2017.11.08 
				ИначеЕсли ГруппаСотрудников = "Уборщицы" Тогда
					МасСтр = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, Расшифровка.Сотрудник));
					Если МасСтр.Количество() = 0 Тогда
						Возврат;
					КонецЕсли;
					ТекДанные = МасСтр[0];
					
					ТЗ1.Очистить();
					Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
						Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка) Тогда
							ЗаполнитьЗначенияСвойств(ТЗ1.Добавить(), СтрМассива);
						КонецЕсли;
					КонецЦикла;
					
					МассивСтрок = МасСтр;
					
					ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекДанные.Период);
					Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыУборщиц.Форма.ФормаРедактированияПериода_ИзМагазина", ПараметрыОткрытия, ЭтаФорма);	
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							
							ТекСтр = СтрокаМассива;
							
							Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
							
							// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
							Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период) Тогда
								ОчиститьЗаписиВРегистре_Уборщицы(Данные);
							КонецЕсли;
							
							ТД = ТекСтр.ТаблицаДанных;
							ТД.Очистить();
							
							Представление   = "";
							КоличествоЧасов = 0;
							ТорговаяТочка = Неопределено;
							
							Для Каждого Стр Из Результат.ТаблицаДанных Цикл
								
								// Берем первую для раскраски макета
								Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
									ТорговаяТочка = Стр.ТорговаяТочка;	
								КонецЕсли;
								
								Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
								Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
								
								ОшибкаПриЗаписи = Ложь;
								ЗаписатьИзмененияВРегистр_Уборщицы(Данные, ОшибкаПриЗаписи);
								
								Если Не ОшибкаПриЗаписи Тогда
									
									НовСтр = ТД.Добавить();
									НовСтр.ТорговаяТочка = Стр.ТорговаяТочка;
									НовСтр.КоличествоЧасов = Стр.КоличествоЧасов;
									
									Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
									КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
									
								Иначе
									Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
								КонецЕсли;
								
							КонецЦикла;
							
							ПредставлениеТабличныйДокумент = Представление;
							
							ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
							ТекСтр.Представление   = Представление;
							ТекСтр.КоличествоЧасов = КоличествоЧасов;
							
							ОбновитьДанныеВТабличномДокументе1(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
							
						КонецЦикла;
						
					КонецЕсли;
				//---АК MIND 	
				ИначеЕсли ГруппаСотрудников="Аутсорс" Тогда
					МасСтр = ТаблицаСотрудникПериодАут.НайтиСтроки(Новый Структура("Период,Сотрудник",Расшифровка.Период,Расшифровка.Сотрудник));
					Если МасСтр.Количество() = 0 ИЛИ НачалоДня(Расшифровка.Период)<>НачалоДня(ТекущаяДата()) Тогда
						Возврат;
					КонецЕсли;
					
					ТекДанные=МасСтр[0];
					
					ТЗ1.Очистить();
					//ТЗ = ТЗ1.Выгрузить();
					Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
						Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка)Тогда
							ЗаполнитьЗначенияСвойств(ТЗ1.Добавить(), СтрМассива);
						КонецЕсли;
					КонецЦикла;
					
					МассивСтрок = МасСтр;
					//Если МассивСтрок.Количество() = 1 Тогда
					
					ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекДанные.Период);
					Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
					
					//Иначе
					//	
					//	// Без привязки к периоду
					//	ПараметрыОткрытия = Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец);
					//	Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаРедактированияПериодаМассивСтрок", ПараметрыОткрытия, ЭтаФорма);
					//	
					//КонецЕсли;
					
					Если ТипЗнч(Результат) = Тип("Структура")Тогда
						
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							
							ТекСтр = СтрокаМассива;
							
							Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
							
							// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
							Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период)Тогда
								ОчиститьЗаписиВРегистреАут(Данные);
							КонецЕсли;
							
							ТД = ТекСтр.ТаблицаДанных;
							ТД.Очистить();
							
							//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
							Представление   = "";
							КоличествоЧасов = 0;
							ТорговаяТочка = Неопределено;
							
							Для Каждого Стр Из Результат.ТаблицаДанных Цикл
								
								// Берем первую для раскраски макета
								Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
									ТорговаяТочка = Стр.Ключ;	
								КонецЕсли;
								
								Данные.Вставить("ТорговаяТочка"	 , Стр.Ключ);
								Данные.Вставить("КоличествоЧасов", Стр.Значение);
								
								ОшибкаПриЗаписи = Ложь;
								ЗаписатьИзмененияВРегистрАут(Данные, ОшибкаПриЗаписи);
								
								Если Не ОшибкаПриЗаписи Тогда
									
									НовСтр=ТД.Добавить();
									НовСтр.ТорговаяТочка=Стр.Ключ;
									НовСтр.КоличествоЧасов=Стр.Значение;
									
									//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
									Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.Ключ);
									КоличествоЧасов = КоличествоЧасов + Стр.Значение;
									
								Иначе
									Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
								КонецЕсли;
								
							КонецЦикла;
							
							ПредставлениеТабличныйДокумент = Представление;
							
							ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
							ТекСтр.Представление   = Представление;
							ТекСтр.КоличествоЧасов = КоличествоЧасов;
							
							ОбновитьДанныеВТабличномДокументеАут(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
							
						КонецЦикла;
						
					КонецЕсли;

					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеВТабличномДокументеАут(ДеньВыхода, Представление = "", КоличествоЧасов = 0, ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 7;
	
	// Четные колонки Представление, не четные КоличествоЧасов
	КолонкаПредставления = Цел(НомерКолонки/2)*2;
	КолонкаКоличество = НомерКолонки;
	Если КолонкаПредставления = КолонкаКоличество Тогда
		КолонкаКоличество = КолонкаКоличество + 1;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
	ТекОбласть.Значение = Представление;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаКоличество, НомерСтроки, КолонкаКоличество);
	ТекОбласть.Значение = КоличествоЧасов;
	
	// Цвет
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	НайденнаяСтрокаЦвет = ЦветаТТ.Найти(ТорговаяТочка, "ТорговаяТочка");
	
	Если НайденнаяСтрокаЦвет <> Неопределено Тогда
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = НайденнаяСтрокаЦвет.Цвет;
		
	Иначе
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона =  WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВРегистрАут(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
	//Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	Запись.Контрагент=Запись.Сотрудник.Контрагент;
	Запись.Должность=Запись.Сотрудник.Должность;
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьЗаписиВРегистреАут(Данные)
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	//	|ИЗ
	//	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	//	|ГДЕ
	//	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = &ЦФО";
	//
	//Запрос.УстановитьПараметр("Дата", КонецДня(Данные.Период));
	//Запрос.УстановитьПараметр("ЦФО", Данные.Группа);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//МасТТ=Новый Массив;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	МасТТ.Добавить(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
	//КонецЦикла;
	
	//Для каждого Эл Из МасТТ Цикл
		НЗ = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(Данные.Период);
		НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
		//НЗ.Отбор.ТорговаяТочка.Установить(Эл);
		НЗ.Записать();
	//КонецЦикла; 	
	
КонецПроцедуры


Функция ПолучитьТаблицу()
	Возврат ТЗ1.Выгрузить();
	
	
КонецФункции // ()


&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе1(ДеньВыхода, Представление = "", КоличествоЧасов = 0, ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 7;
	
	// Четные колонки Представление, не четные КоличествоЧасов
	КолонкаПредставления = Цел(НомерКолонки/2)*2;
	КолонкаКоличество = НомерКолонки;
	Если КолонкаПредставления = КолонкаКоличество Тогда
		КолонкаКоличество = КолонкаКоличество + 1;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
	Если ТорговаяТочка=Неопределено Тогда
		ТекОбласть.Значение = "";
	Иначе	
		ТекОбласть.Значение = Представление+ "("+Строка(КоличествоЧасов)+"ч.)";
	КонецЕсли; 
	
	
	//ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаКоличество, НомерСтроки, КолонкаКоличество);
	//ТекОбласть.Значение = КоличествоЧасов;
	
	// Цвет
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	НайденнаяСтрокаЦвет = ЦветаТТ.Найти(ТорговаяТочка, "ТорговаяТочка");
	
	Если НайденнаяСтрокаЦвет <> Неопределено Тогда
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
		ТекОбласть.ЦветФона = НайденнаяСтрокаЦвет.Цвет;
	Иначе
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
		ТекОбласть.ЦветФона =  WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗаписиВРегистре(Данные)
	
	НЗ = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(Данные.Период);
	НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
	НЗ.Отбор.Группа.Установить(Данные.Группа);
	НЗ.Записать();
	
КонецПроцедуры

Процедура ОчиститьЗаписиВРегистре_Уборщицы(Данные)
	
	НЗ = РегистрыСведений.ТабельРаботыУборщиц.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(Данные.Период);
	НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
	//НЗ.Отбор.Группа.Установить(Данные.Группа);
	НЗ.Записать();
	
КонецПроцедуры


&НаКлиенте
Процедура Удалить(Команда)
	Расшифровка=Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка;
	Если ТипЗнч(Расшифровка)=Тип("ФиксированнаяСтруктура") И Расшифровка.Свойство("Период") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
			Если ГруппаСотрудников="Продавцы"  ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
				//ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
				НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
				УдалитьТренинг=Неопределено;
				Если НайденныеСтроки.Количество()Тогда
					//	
					СтрокаСДанными = НайденныеСтроки[0];
					Если ПроверитьВозможностьУдаленияПрогула(СтрокаСДанными) Тогда //+++АК mika 2018.11.09 ИП-00019541.02 
						Возврат;
					КонецЕсли;
					//	
					//	СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
					//	ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
					//	ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
					//	ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
					//	Отсутствие= 			СтрокаСДанными.Отсутствие;
					УдалитьТренинг= 	СтрокаСДанными.Тренинг;
					//Иначе	
				КонецЕсли;	
				СвойствоПродавца= 	Неопределено;
				ТорговаяТочка= 		Неопределено;
				ТорговаяТочкаНаименование= 		Неопределено;
				ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
				Отсутствие= 			Неопределено;
				КоличествоЧасов= 	0;
				Тренинг= 	Неопределено;
				
				//ТТ = ТорговаяТочка;
				//Отсутствие 		 = Отсутствие;
				//СвойствоПродавца = СвойствоПродавца;
				//КоличествоЧасов  = КоличествоЧасов;
				
				//ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов",
				//ТекущийПродавец, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов);
				//
				//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				//
				//Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
				СтруктураДанных.Вставить("СвойствоПродавца", 	СвойствоПродавца);
				СтруктураДанных.Вставить("ТорговаяТочка", 		ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие", 			Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов", 	КоличествоЧасов);
				СтруктураДанных.Вставить("Тренинг", 	Тренинг);
				СтруктураДанных.Вставить("ЭкстренныйВызов", 	Ложь);
				СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
				СтруктураДанных.Вставить("ОтсутствиеУдалить", 			Расшифровка.Отсутствие);
				СтруктураДанных.Вставить("ГруппаУдалить", 			Расшифровка.Группа);
				СтруктураДанных.Вставить("Удаление", 			УдалитьТренинг);
				Представление	 = "";
				
				СтруктураДанных.Вставить("Представление", Представление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
				//КонецЕсли;
			ИначеЕсли ГруппаСотрудников = "Кассиры" ИЛИ ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000 (Добавлено условие "ИЛИ ГруппаСотрудников = "Пекари"")
				НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
				
				НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
				УдалитьТренинг=Неопределено;
				Если НайденныеСтроки.Количество()Тогда
					//
					СтрокаСДанными = НайденныеСтроки[0];
					Если ПроверитьВозможностьУдаленияПрогула(СтрокаСДанными) Тогда //+++АК mika 2018.11.09 ИП-00019541.02 
						Возврат;
					КонецЕсли;
					//	СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
					//	ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
					//	ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
					//	ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
					//	Отсутствие= 			СтрокаСДанными.Отсутствие;
					УдалитьТренинг= 	СтрокаСДанными.Тренинг;
					//Иначе	
				КонецЕсли;	
				СвойствоПродавца= 	Неопределено;
				ТорговаяТочка= 		Неопределено;
				ТорговаяТочкаНаименование= 		Неопределено;
				ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
				Отсутствие= 			Неопределено;
				КоличествоЧасов= 	0;
				Тренинг= 	Неопределено;
				
				
				
				//ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
				//ТекущийПродавец,ТорговаяТочка,Отсутствие,СвойствоПродавца,КоличествоЧасов);
				//
				//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				//
				//Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"  	 , ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие"		 , Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов"	 , КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника", СвойствоПродавца);
				СтруктураДанных.Вставить("Тренинг", Неопределено);
				СтруктураДанных.Вставить("ЭкстренныйВызов", 	Ложь);
				СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
				СтруктураДанных.Вставить("ОтсутствиеУдалить", 			Расшифровка.Отсутствие);
				СтруктураДанных.Вставить("ГруппаУдалить", 			Расшифровка.Группа);
				СтруктураДанных.Вставить("Удаление", 			УдалитьТренинг);
				
				
				Представление	 	= "";
				//ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				//Отсутствие 		 	= СтруктураДанных.Отсутствие;
				//КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
				//СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				//
				//Если ЗначениеЗаполнено(Отсутствие)Тогда
				//	
				//	Представление = Строка(Отсутствие);	
				//	
				//ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
				//	
				//	Если СвойствоСотрудника = 1 Тогда
				//		Представление = "ст, ";
				//	КонецЕсли;
				//	
				//	Представление = Представление + Строка(ТорговаяТочка);
				//	
				//КонецЕсли;
				//
				//Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
				//	Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				//КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				//КонецЕсли;
			ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
				НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник, Период", Расшифровка.Сотрудник, Расшифровка.Период));
				УдалитьТренинг=Неопределено;
				Если НайденныеСтроки.Количество()Тогда
					//
					СтрокаСДанными = НайденныеСтроки[0];
					Если ПроверитьВозможностьУдаленияПрогула(СтрокаСДанными) Тогда //+++АК mika 2018.11.09 ИП-00019541.02 
						Возврат;
					КонецЕсли;
					//	СвойствоПродавца= 	СтрокаСДанными.СвойствоПродавца;
					//	ТорговаяТочка= 		СтрокаСДанными.ТорговаяТочка;
					//	ТорговаяТочкаНаименование= 		СтрокаСДанными.ТорговаяТочкаНаименование;
					//	ТорговаяТочкаТипРозничнойТочки= 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки;
					//	Отсутствие= 			СтрокаСДанными.Отсутствие;
					УдалитьТренинг= 	СтрокаСДанными.Тренинг;
					//Иначе	
				КонецЕсли;	
				СвойствоПродавца= 	Неопределено;
				ТорговаяТочка= 		Неопределено;
				ТорговаяТочкаНаименование= 		Неопределено;
				ТорговаяТочкаТипРозничнойТочки= 		Неопределено;
				Отсутствие= 			Неопределено;
				КоличествоЧасов= 	0;
				Тренинг= 	Неопределено;
				
				
				
				//ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
				//ТекущийПродавец,ТорговаяТочка,Отсутствие,СвойствоПродавца,КоличествоЧасов);
				//
				//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				//
				//Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
				СтруктураДанных.Вставить("ТорговаяТочка"  	 , ТорговаяТочка);
				СтруктураДанных.Вставить("Отсутствие"		 , Отсутствие);
				СтруктураДанных.Вставить("КоличествоЧасов"	 , КоличествоЧасов);
				СтруктураДанных.Вставить("СвойствоСотрудника", СвойствоПродавца);
				СтруктураДанных.Вставить("Период", 	Расшифровка.Период);
				СтруктураДанных.Вставить("ОтсутствиеУдалить", 			Расшифровка.Отсутствие);
				СтруктураДанных.Вставить("ГруппаУдалить", 			Расшифровка.Группа);
				СтруктураДанных.Вставить("Тренинг", Неопределено);
				СтруктураДанных.Вставить("ЭкстренныйВызов", 	Ложь);
				СтруктураДанных.Вставить("Удаление", 			УдалитьТренинг);
				
				Представление	 	= "";
				//ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
				//Отсутствие 		 	= СтруктураДанных.Отсутствие;
				//КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
				//СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
				//
				//Если ЗначениеЗаполнено(Отсутствие)Тогда
				//	
				//	Представление = Строка(Отсутствие);	
				//	
				//ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
				//	
				//	Если СвойствоСотрудника = 1 Тогда
				//		Представление = "ст, ";
				//	КонецЕсли;
				//	
				//	Представление = Представление + Строка(ТорговаяТочка);
				//	
				//КонецЕсли;
				//
				//Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
				//	Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
				//КонецЕсли;
				
				СтруктураДанных.Вставить("Представление", Представление);
				ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				
			ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
				МасСтр = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период,Сотрудник",Расшифровка.Период,Расшифровка.Сотрудник));
				Если МасСтр.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				ТекДанные=МасСтр[0];
				ТЗ1.Очистить();
				//Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
				//	Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка)Тогда
				//		ЗаполнитьЗначенияСвойств(ТЗ1.Добавить(), СтрМассива);
				//	КонецЕсли;
				//КонецЦикла;
				//
				МассивСтрок = МасСтр;
				//
				//ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекДанные.Период);
				//Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
				
				
				//Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					
					ТекСтр = СтрокаМассива;
					
					Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
					
					// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
					Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период)Тогда
						ОчиститьЗаписиВРегистре(Данные);
					КонецЕсли;
					
					ТД = ТекСтр.ТаблицаДанных;
					ТД.Очистить();
					
					//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
					Представление   = "";
					КоличествоЧасов = 0;
					ТорговаяТочка = Неопределено;
					
					//Для Каждого Стр Из Результат.ТаблицаДанных Цикл
					//	
					//	// Берем первую для раскраски макета
					//	Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					//		ТорговаяТочка = Стр.Ключ;	
					//	КонецЕсли;
					//	
					//	Данные.Вставить("ТорговаяТочка"	 , Стр.Ключ);
					//	Данные.Вставить("КоличествоЧасов", Стр.Значение);
					//	
					//	ОшибкаПриЗаписи = Ложь;
					//	ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи);
					//	
					//	Если Не ОшибкаПриЗаписи Тогда
					//		
					//		НовСтр=ТД.Добавить();
					//		НовСтр.ТорговаяТочка=Стр.Ключ;
					//		НовСтр.КоличествоЧасов=Стр.Значение;
					//		
					//		//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
					//		Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.Ключ);
					//		КоличествоЧасов = КоличествоЧасов + Стр.Значение;
					//		
					//	Иначе
					//		Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
					//	КонецЕсли;
					//	
					//КонецЦикла;
					
					ПредставлениеТабличныйДокумент = Представление;
					
					ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
					ТекСтр.Представление   = Представление;
					ТекСтр.КоличествоЧасов = КоличествоЧасов;
					
					ОбновитьДанныеВТабличномДокументе1(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
					
				КонецЦикла;
				
				//КонецЕсли;
				
			//+++АК MIND 2017.11.08 
			ИначеЕсли ГруппаСотрудников = "Уборщицы" Тогда
				МасСтр = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Период, Сотрудник", Расшифровка.Период, Расшифровка.Сотрудник));
				Если МасСтр.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				ТекДанные=МасСтр[0];
				ТЗ1.Очистить();
				
				МассивСтрок = МасСтр;
				
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					
					ТекСтр = СтрокаМассива;
					
					Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
					
					// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
					Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период) Тогда
						ОчиститьЗаписиВРегистре_Уборщицы(Данные);
					КонецЕсли;
					
					ТД = ТекСтр.ТаблицаДанных;
					ТД.Очистить();
					
					Представление   = "";
					КоличествоЧасов = 0;
					ТорговаяТочка = Неопределено;
					
					ПредставлениеТабличныйДокумент = Представление;
					
					ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
					ТекСтр.Представление   = Представление;
					ТекСтр.КоличествоЧасов = КоличествоЧасов;
					
					ОбновитьДанныеВТабличномДокументе1(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
					
				КонецЦикла;
				
			//---АК MIND 	
			ИначеЕсли ГруппаСотрудников="Аутсорс" Тогда
				МасСтр = ТаблицаСотрудникПериодАут.НайтиСтроки(Новый Структура("Период,Сотрудник",Расшифровка.Период,Расшифровка.Сотрудник));
				Если МасСтр.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				ТекДанные=МасСтр[0];
				ТЗ1.Очистить();
				//Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
				//	Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка)Тогда
				//		ЗаполнитьЗначенияСвойств(ТЗ1.Добавить(), СтрМассива);
				//	КонецЕсли;
				//КонецЦикла;
				//
				МассивСтрок = МасСтр;
				//
				//ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, ТекДанные.Период);
				//Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
				
				
				//Если ТипЗнч(Результат) = Тип("Структура")Тогда
				
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					
					ТекСтр = СтрокаМассива;
					
					Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
					
					// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
					Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период)Тогда
						ОчиститьЗаписиВРегистреАут(Данные);
					КонецЕсли;
					
					ТД = ТекСтр.ТаблицаДанных;
					ТД.Очистить();
					
					//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
					Представление   = "";
					КоличествоЧасов = 0;
					ТорговаяТочка = Неопределено;
					
					//Для Каждого Стр Из Результат.ТаблицаДанных Цикл
					//	
					//	// Берем первую для раскраски макета
					//	Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					//		ТорговаяТочка = Стр.Ключ;	
					//	КонецЕсли;
					//	
					//	Данные.Вставить("ТорговаяТочка"	 , Стр.Ключ);
					//	Данные.Вставить("КоличествоЧасов", Стр.Значение);
					//	
					//	ОшибкаПриЗаписи = Ложь;
					//	ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи);
					//	
					//	Если Не ОшибкаПриЗаписи Тогда
					//		
					//		НовСтр=ТД.Добавить();
					//		НовСтр.ТорговаяТочка=Стр.Ключ;
					//		НовСтр.КоличествоЧасов=Стр.Значение;
					//		
					//		//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
					//		Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.Ключ);
					//		КоличествоЧасов = КоличествоЧасов + Стр.Значение;
					//		
					//	Иначе
					//		Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
					//	КонецЕсли;
					//	
					//КонецЦикла;
					
					ПредставлениеТабличныйДокумент = Представление;
					
					ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
					ТекСтр.Представление   = Представление;
					ТекСтр.КоличествоЧасов = КоличествоЧасов;
					
					ОбновитьДанныеВТабличномДокументеАут(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьЗапись(Сотрудник,Период)
	НЗ=РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();	
	НЗ.Отбор.Период.Установить(Период);
	НЗ.Отбор.Сотрудник.Установить(Сотрудник);
	НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	НЗ.Записать();	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСотрудника(Команда)
	//Если ЗначениеЗаполнено(ТекущийПродавец) Тогда
	//
	//	СтруктураЗаполнения=Новый Структура("Продавец",ТекущийПродавец);
	//	Период1=ПолучитьПоследнююДату(ТекущийПродавец);
	//	Если Период1=Неопределено Тогда
	//		Период1=НачалоДня(ТекущаяДата());
	//	Иначе	
	//		Ответ = Вопрос("Внести новую запись?", РежимДиалогаВопрос.ДаНет);
	
	//		Если (Ответ = КодВозвратаДиалога.Да) Тогда
	//			Период1=НачалоДня(ТекущаяДата());
	//		КонецЕсли; 
	//	КонецЕсли; 
	//	СтруктураЗаполнения.Вставить("Период",Период1);
	//	ОткрытьФормуЗаписи(СтруктураЗаполнения);	                              
	//
	//КонецЕсли; 
	ОткрытьФорму("РегистрСведений.СтатусыПродавцов.ФормаСписка");
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуЗаписи(СтруктураЗаполнения)
	
	Если Не ЕстьЗапись(СтруктураЗаполнения) Тогда
		СтруктураДанных=Новый Структура("ЗначенияЗаполнения",СтруктураЗаполнения);		
	Иначе
		ЭтотМассив=Новый Массив;
		ЭтотМассив.Добавить(СтруктураЗаполнения);
		КлючЗаписи       =    Новый("РегистрСведенийКлючЗаписи.СтатусыПродавцов", ЭтотМассив);
		СтруктураДанных=Новый Структура("Ключ,ОграничитьДоступность",КлючЗаписи,Истина)		
	КонецЕсли;
	
	ОткрытьФормуМодально("РегистрСведений.СтатусыПродавцов.ФормаЗаписи",СтруктураДанных,ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнююДату(ТекущийПродавец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПродавцовСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.СтатусыПродавцов.СрезПоследних(&Дата, Продавец = &Продавец) КАК СтатусыПродавцовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Продавец", ТекущийПродавец);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Период;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ЕстьЗапись(СтруктураЗаполнения)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыПродавцов.Продавец
	|ИЗ
	|	РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцов
	|ГДЕ
	|	 СтатусыПродавцов.Продавец = &Продавец";
	
	Запрос.УстановитьПараметр("Продавец", СтруктураЗаполнения.Продавец);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат  Ложь;
КонецФункции


&НаКлиенте
Процедура ЗарплатаСотрудников(Команда)
	ОткрытьФорму("ОбщаяФорма.ЗарплатаПродавцов");
КонецПроцедуры


&НаКлиенте
Процедура ПриходУход(Команда)
	//+++АК mika 2018.03.30 ИП-00018000
	//Пока оставлена возможность держать вкладку открытой
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаПриходИУходСотрудников"); 
	//ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаПриходИУходСотрудников",,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	//---АК mika ИП-00018000
КонецПроцедуры


//+++АК MIND 2017.11.01 
&НаКлиенте
Процедура ВыгрузкаСотрудниковНаКассы(Команда)
	
	ОткрытьФорму("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаПерсоналВыгружаемыйНаФронтол");
	
КонецПроцедуры
//---АК MIND 

&НаСервереБезКонтекста
// Вызывает функцию получения ЦФО помощника управляющего
//
// Параметры:
//  Сотрудник  - <Тип.СправочникСсылка.ФизическиеЛица> - Ссылка на физического лица
//
// Возвращаемое значение:
//   <Тип.СправочникСсылка.Структурные еденицы>   - ЦФО к которому относится сотрудник (через помощника)
//
Функция ПолучитьЦФОПомощникаСервер(Сотрудник) //+++АК mika 2018.01.19 В этой обработке не заполняется группа по помощнику (как в обр. "График работы продавцов")
	
	//+++АК mika 2018.05.24 ИП-00018578 Добавлена проверка для Помощников Развития
	//Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьЦФОПомощникаУправляющего(Сотрудник);
	Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(Сотрудник, Истина, Истина); 
		
	
КонецФункции // ПолучитьЦФОПомощникаСервер()

&НаКлиенте
// Проверяет возможность удаления прогрула для Продавцов //+++АК mika 2018.11.09 ИП-00019541.02 
//
// Параметры:
//  <СтрокаСДанными>  - <Тип.ДанныеФормыКоллекция> - Улаляемая строка
// Возвращаемое значение:
//   <Отказ> - <Тип.Булево>  - отказ
//
Функция ПроверитьВозможностьУдаленияПрогула(СтрокаСДанными) 

	Если СтрокаСДанными.Отсутствие = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.Прогул") Тогда
		ПоказатьПредупреждение(, "Запрещено удалять отсутствия с видом ""Прогул"" (обратитесь к Помощнику управляющего)!");
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции // ПроверитьВозможностьУдаленияПрогула()

&НаКлиенте
//+++ЗНК Zionek 2018.11.16 ИП-00020474
Процедура знк_ДобавитьПродавца(Команда)
	ПараметрыФормы = Новый Структура("ЦФО, ТекущийПомощник, ПоказыватьКодФизическогоЛица, ОтображатьПоиск", ГруппаТорговыхТочек, Неопределено, Истина, Истина);
	Описание = Новый ОписаниеОповещения("ДобавитьПродавцаЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", ПараметрыФормы, ЭтаФорма,,,, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры //---ЗНК Zionek 2018.11.16 ИП-00020474

&НаКлиенте
//+++ЗНК Zionek 2018.11.16 ИП-00020474
Процедура ДобавитьПродавцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		НоваяСтрока = знк_ДобавленныеВручную.Добавить();
		НоваяСтрока.Сотрудник 			= Результат;
		НоваяСтрока.НомерУпорядочивания = знк_ДобавленныеВручную.Количество();
		
		ГруппаСотрудников = "Продавцы";
		
		ОбновитьГрафикНаСервере();
		ТабличныйДокумент.ФиксацияСлева = 3;
		ТабличныйДокумент.ФиксацияСверху = 7;
	КонецЕсли;
КонецПроцедуры //---ЗНК Zionek 2018.11.16 ИП-00020474


