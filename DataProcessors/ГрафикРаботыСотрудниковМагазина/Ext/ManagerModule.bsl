
Функция СформироватьТабличныйДокумент(МассивФизическихЛиц)Экспорт
	
	//ВнешняяКомпонента = ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	//
	//ТабДок = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("Бэйдж");
	//
	//Для Каждого СтрокаМассива Из МассивФизическихЛиц Цикл
	//	
	//	ОбластьМакета = Макет.ПолучитьОбласть("Строка|Столбец");
	//	ОбластьМакета.Параметры.ФИО = СокрЛП(СтрокаМассива.Наименование);
	//	ОбластьМакета.Параметры.Должность = СтрокаМассива.Должность;
	//	ОбластьМакета.Параметры.Код = ПолучитьКодПродавца(СтрокаМассива.Код);
	//	
	//	Если ВнешняяКомпонента <> Неопределено Тогда
	//		
	//		ВнешняяКомпонента.АвтоТип = Ложь;
	//		ВнешняяКомпонента.ТипКода = 1; // указан тип EAN13
	//		
	//		//Штрихкод = "3010372" + Прав(СтрокаМассива.Код, 5);
	//		Штрихкод = "30" + Прав(СтрокаМассива.Код, 10);
	//		ОбластьМакета.Рисунки.Штрихкод.Картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Штрихкод);
	//		
	//	КонецЕсли;
	//	
	//	Если Не ТабДок.ПроверитьВывод(ОбластьМакета) Тогда
	//		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	//	КонецЕсли;
	//	
	//	ТабДок.Вывести(ОбластьМакета);
	//	
	//КонецЦикла;
	//
	//Возврат ТабДок;
	
	МассивСотрудники = Новый Массив();
	Для Каждого ЭлементФизЛицо Из МассивФизическихЛиц Цикл
		Сотрудник = Справочники.ПерсоналККМ.НайтиПоКоду(ЭлементФизЛицо.Код);
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Сообщить(Строка(ЭлементФизЛицо) + " не найден среди персонала ККМ");
		Иначе
			МассивСотрудники.Добавить(Сотрудник);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Обработки.ПечатьБейджейПродавцов.ПолучитьТабДокБейджей(МассивСотрудники);
	
КонецФункции

Функция СформироватьТабличныйДокумент_Сборщики(МассивФизическихЛиц)Экспорт
	
	ВнешняяКомпонента = ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Бэйдж");
	
	Для Каждого СтрокаМассива Из МассивФизическихЛиц Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка|Столбец");
		ОбластьМакета.Параметры.ФИО = СокрЛП(СтрокаМассива.Наименование);
		ОбластьМакета.Параметры.Должность = СтрокаМассива.Должность;
		ОбластьМакета.Параметры.Код = ПолучитьКодПродавца(СтрокаМассива.Код);
		
		Если ВнешняяКомпонента <> Неопределено Тогда
			
			ВнешняяКомпонента.АвтоТип = Ложь;
			ВнешняяКомпонента.ТипКода = 1; // указан тип EAN13
			
			//Штрихкод = "3010372" + Прав(СтрокаМассива.Код, 5);
			Штрихкод = "30" + Прав(СтрокаМассива.Код, 10);
			ОбластьМакета.Рисунки.Штрихкод.Картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Штрихкод);
			
		КонецЕсли;
		
		Если Не ТабДок.ПроверитьВывод(ОбластьМакета) Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьКодПродавца(Знач КодПродавца)
	
	ОбработатьСтроку = Истина;
	
	Пока ОбработатьСтроку Цикл
		Если Лев(КодПродавца, 1) = "0" Тогда
			КодПродавца = Прав(КодПродавца, СтрДлина(КодПродавца)-1);
		Иначе
			ОбработатьСтроку = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если СтрДлина(КодПродавца) <= 3 Тогда
		КодПродавца = "000" + КодПродавца;
		КодПродавца = "0." + Прав(КодПродавца, 3);
	Иначе
		КодПродавца = "00000" + КодПродавца;
		КодПродавца = Прав(КодПродавца, 5);
		КодПродавца = Лев(КодПродавца, 2) + "." + Прав(КодПродавца, 3);
	КонецЕсли;
	
	Возврат КодПродавца;
	
КонецФункции

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ГрафикРаботыПродавцов_ТЗ.Макет.КомпонентаПечатиШтрихкодов", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	
	// Создадим объект внешней компоненты
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");                  
	Иначе                                                                            
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты
		// Если в системе установлен шрифт Tahoma
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") = Истина Тогда
			// Выбираем его как шрифт для формирования картинки
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			// Шрифт Tahoma в системе отсутствует
			// Обойдем все доступные компоненте шрифты
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штрихкода
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Установим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Штрихкод) Экспорт
	
	// Если код содержит контрольный символ, обязательно указываем
	ВнешняяКомпонента.СодержитКС = СтрДлина(Штрихкод) = 13;
	
	// Если отображать контрольный символ не нужно
	// ВнешняяКомпонента.ВидимостьКС = Ложь;
	
	// Формируем картинку штрихкода
	ВнешняяКомпонента.ЗначениеКода = Штрихкод;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		// Скорректируем ширину
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМассивФизЛиц(Период, ТипПомощника)Экспорт
	
	Если ТипПомощника = "ПОМОЩНИК" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
		//--- AK suvv
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка");
		Запрос.УстановитьПараметр("Период", Период);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
	ИначеЕсли ТипПомощника = "БУХГАЛТЕРРАСЧЕТЧИК" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.БухгалтераРасчетчикиВТорговыхТочках.СрезПоследних(&Период, ) КАК БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних");
		Запрос.УстановитьПараметр("Период", Период);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаличиеПомощникаВТТ(ПараметрыОткрытия, Знач ТТ, Знач МассивФЛ, Период, ТипПомощника)Экспорт
	
	Если ТипПомощника = "ПОМОЩНИК" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник КАК ФизическоеЛицо,
		|	СоответствиеОбъектРольСрезПоследних.Период,
		|	СоответствиеОбъектРольСрезПоследних.Объект КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|			(ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|           ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
		//--- AK suvv
		|				И Объект = &СтруктурнаяЕдиница) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|ГДЕ
		|	НЕ РолиПользователейСоставРоли.Сотрудник В (&МассивФЛ)");
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ТТ);
		Запрос.УстановитьПараметр("МассивФЛ", МассивФЛ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			
			ПараметрыОткрытия.Вставить("Период", Выборка.Период);
			ПараметрыОткрытия.Вставить("ТорговаяТочка", Выборка.СтруктурнаяЕдиница);
			ПараметрыОткрытия.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипПомощника = "БУХГАЛТЕРРАСЧЕТЧИК" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.Период,
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.СтруктурнаяЕдиница,
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.БухгалтераРасчетчикиВТорговыхТочках.СрезПоследних(&Период, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних
		|ГДЕ
		|	НЕ БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.ФизическоеЛицо В (&МассивФЛ)");
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ТТ);
		Запрос.УстановитьПараметр("МассивФЛ", МассивФЛ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			
			ПараметрыОткрытия.Вставить("Период", Выборка.Период);
			ПараметрыОткрытия.Вставить("ТорговаяТочка", Выборка.СтруктурнаяЕдиница);
			ПараметрыОткрытия.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции