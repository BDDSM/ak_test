
&НаКлиенте
Процедура ОтрегулироватьФорму()
	
	//Если ВидЗаполненияРасчетов = 0 Тогда
	//	Элементы.СписокТоваров.Видимость = Ложь;
	//ИначеЕсли ВидЗаполненияРасчетов = 1 Тогда
		Элементы.СписокТоваров.Видимость = Истина;
	//КонецЕсли;	
	
КонецПроцедуры	

Процедура ПересчитатьСтроку(СтрокаТаб)
	
	Если ТипЗнч(СтрокаТаб) = Тип("Число") Тогда
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(СтрокаТаб);
	Иначе
		СтрокаТаблицы = СтрокаТаб;
	КонецЕсли;
	
	//пересчет новой себестоимости
	Если СтрокаТаблицы.ЦенаЗакупкиСНДС <> 0 Тогда
		Если СтрокаТаблицы.НоваяЦенаЗакупкиСНДС = 0 Тогда
			СтрокаТаблицы.НоваяСебестоимостьНаКг = 0;
		Иначе
			ПроцентИзмененияЦеныЗакупки = СтрокаТаблицы.НоваяЦенаЗакупкиСНДС / СтрокаТаблицы.ЦенаЗакупкиСНДС;
			Себест = СтрокаТаблицы.Себестоимость - СтрокаТаблицы.Транспорт - СтрокаТаблицы.СтоимостьУпаковки;
			Себест = Себест * ПроцентИзмененияЦеныЗакупки;
			СтрокаТаблицы.НоваяСебестоимостьНаКг = (Себест + СтрокаТаблицы.Транспорт + СтрокаТаблицы.СтоимостьУпаковки) / СтрокаТаблицы.Коэф;
		КонецЕсли;	
	КонецЕсли;
	
	//пересчет новой выручки
	Если СтрокаТаблицы.НоваяЦенаВыгрузкиНаСайт = 0
			ИЛИ СтрокаТаблицы.ПрогнозКоличествоПроданногоВВИТТ = 0
			ИЛИ СтрокаТаблицы.ЦенаВыгрузкиНаСайт = 0
			ИЛИ СтрокаТаблицы.КоличествоПроданногоВВИТТ = 0 Тогда
		СтрокаТаблицы.НоваяВыручка = СтрокаТаблицы.ВыручкаСейчас;
	Иначе	
		ПроцентИзмененияЦеныРеал = СтрокаТаблицы.НоваяЦенаВыгрузкиНаСайт / СтрокаТаблицы.ЦенаВыгрузкиНаСайт * СтрокаТаблицы.ПрогнозКоличествоПроданногоВВИТТ / СтрокаТаблицы.КоличествоПроданногоВВИТТ;
		СтрокаТаблицы.НоваяВыручка = СтрокаТаблицы.ВыручкаСейчас * ПроцентИзмененияЦеныРеал;
	КонецЕсли;
	
	//пересчет предполагаемой доли
	СтрокиКеш = Объект.Товары.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаТаблицы.НомерГруппы));
	ОбщаяСумма = 0;
	Для Каждого СтрокаКеш Из СтрокиКеш Цикл
		ОбщаяСумма = ОбщаяСумма + СтрокаКеш.ВыручкаСейчас
	КонецЦикла;
	Для Каждого СтрокаКеш Из СтрокиКеш Цикл
		СтрокаКеш.ПредполагаемаяДоля = ?(ОбщаяСумма = 0, 0, СтрокаКеш.НоваяВыручка / ОбщаяСумма * 100);
	КонецЦикла;	
	
	//пересчет новой маржи и наценки
	Если СтрокаТаблицы.ПрогнозКоличествоПроданногоВВИТТ = 0
			ИЛИ СтрокаТаблицы.НоваяЦенаВыгрузкиНаСайт = 0
			ИЛИ СтрокаТаблицы.НоваяСебестоимостьНаКг = 0 Тогда
		СтрокаТаблицы.НоваяМаржа = СтрокаТаблицы.МаржаСейчас;
		СтрокаТаблицы.НоваяНаценка = СтрокаТаблицы.НаценкаСейчас;
	Иначе	
		СтрокаТаблицы.НоваяМаржа = СтрокаТаблицы.ПрогнозКоличествоПроданногоВВИТТ * СтрокаТаблицы.НоваяЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)/100) - СтрокаТаблицы.ПрогнозКоличествоПроданногоВВИТТ * СтрокаТаблицы.НоваяСебестоимостьНаКг * СтрокаТаблицы.Коэф;
		СтрокаТаблицы.НоваяНаценка = ?(СтрокаТаблицы.НоваяСебестоимостьНаКг <> 0, ((СтрокаТаблицы.НоваяЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)/100)) / (СтрокаТаблицы.НоваяСебестоимостьНаКг * СтрокаТаблицы.Коэф) - 1) * 100, 0);
	КонецЕсли;
	
	
	//расчет прогнозной доли
	СтрокиТаблицы = Объект.Товары.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаТаблицы.НомерГруппы));
	Если СтрокиТаблицы.Количество() = 1 Тогда
		СтрокаТаблицы.ПрогнозДоляПослеИзмененияЗакупки = 100;
	Иначе
		МаксПоказательЧастоты = 0;
		Для Каждого СтрокаГруппы Из СтрокиТаблицы Цикл
			МаксПоказательЧастоты = Макс(МаксПоказательЧастоты, СтрокаГруппы.ЧастотаВкусвилл);
		КонецЦикла;
		Для Каждого СтрокаГруппы Из СтрокиТаблицы Цикл
			Если СтрокаГруппы.НоваяМаржа <= 0
					ИЛИ МаксПоказательЧастоты = 0 Тогда
				СтрокаГруппы.ДоляОтЛучшейЧастоты = 0;
			Иначе
				СтрокаГруппы.ДоляОтЛучшейЧастоты = СтрокаГруппы.НоваяМаржа * СтрокаГруппы.ЧастотаВкусвилл / МаксПоказательЧастоты;
				//СтрокаГруппы.ДоляОтЛучшейЧастоты = POW(СтрокаГруппы.ДоляОтЛучшейЧастоты, СтрокиТаблицы.Количество());
			КонецЕсли;	
		КонецЦикла;
		
		ТабКРасчету = Новый ТаблицаЗначений();
		ТабКРасчету.Колонки.Добавить("СтрокаТаб");
		ТабКРасчету.Колонки.Добавить("Сумма");
		Для Каждого СтрокаКеш Из СтрокиТаблицы Цикл
			СтрокаДоб = ТабКРасчету.Добавить();
			СтрокаДоб.СтрокаТаб = СтрокаКеш;
			СтрокаДоб.Сумма 	= СтрокаКеш.ДоляОтЛучшейЧастоты;
		КонецЦикла;
		РаспределенныеПроценты = ОбщегоНазначения.РаспределитьПропорционально(100, ТабКРасчету.ВыгрузитьКолонку("Сумма"), 1);
		Если ЗначениеЗаполнено(РаспределенныеПроценты) Тогда
			ТабКРасчету.ЗагрузитьКолонку(РаспределенныеПроценты, "Сумма");
		КонецЕсли;
		Для Каждого СтрокаРасчитанная Из ТабКРасчету Цикл
			СтрокаРасчитанная.СтрокаТаб.ПрогнозДоляПослеИзмененияЗакупки = СтрокаРасчитанная.Сумма;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоговыеЗначения()
	
	Элементы.ТоварыВыручкаСейчас.ТекстПодвала 	= Объект.Товары.Итог("ВыручкаСейчас");
	Элементы.ТоварыНоваяВыручка.ТекстПодвала 	= Объект.Товары.Итог("НоваяВыручка");
	Элементы.ТоварыМаржаСейчас.ТекстПодвала 	= Объект.Товары.Итог("МаржаСейчас");
	Элементы.ТоварыНоваяМаржа.ТекстПодвала 		= Объект.Товары.Итог("НоваяМаржа");
	КолвоСтарое = 0;
	КолвоНовое = 0;
	СуммаСтарая = 0;
	СуммаНовая = 0;
	СебестоимостьСтарая = 0;
	СебестоимостьНовая = 0;
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Если СтрокаТовар.ЦенаВыгрузкиНаСайт <> 0
				И СтрокаТовар.Себестоимость <> 0 Тогда
			КолвоСтарое = КолвоСтарое + СтрокаТовар.КоличествоПроданногоВВИТТ;
			СуммаСтарая = СуммаСтарая + СтрокаТовар.КоличествоПроданногоВВИТТ * СтрокаТовар.ЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС) / 100);
			СебестоимостьСтарая = СебестоимостьСтарая + СтрокаТовар.КоличествоПроданногоВВИТТ * СтрокаТовар.Себестоимость;
		КонецЕсли;
		Если СтрокаТовар.НоваяЦенаВыгрузкиНаСайт <> 0
				И СтрокаТовар.НоваяСебестоимостьНаКг <> 0 Тогда
			КолвоНовое = КолвоНовое + СтрокаТовар.ПрогнозКоличествоПроданногоВВИТТ;
			СуммаНовая = СуммаНовая + СтрокаТовар.ПрогнозКоличествоПроданногоВВИТТ * СтрокаТовар.НоваяЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС) / 100);
			СебестоимостьНовая = СебестоимостьНовая + СтрокаТовар.ПрогнозКоличествоПроданногоВВИТТ * СтрокаТовар.НоваяСебестоимостьНаКг * СтрокаТовар.Коэф;
		Иначе
			Если СтрокаТовар.ЦенаВыгрузкиНаСайт <> 0
					И СтрокаТовар.Себестоимость <> 0 Тогда
				КолвоНовое = КолвоНовое + СтрокаТовар.КоличествоПроданногоВВИТТ;
				СуммаНовая = СуммаНовая + СтрокаТовар.КоличествоПроданногоВВИТТ * СтрокаТовар.ЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС) / 100);
				СебестоимостьНовая = СебестоимостьНовая + СтрокаТовар.КоличествоПроданногоВВИТТ * СтрокаТовар.Себестоимость;
			КонецЕсли;	
		КонецЕсли;	
		//?(СтрокаТаб.Себестоимость <> 0, (СтрокаТаб.ЦенаВыгрузкиНаСайт / СтрокаТаб.Себестоимость - 1) * 100, 0);
	КонецЦикла;
	
	Элементы.ТоварыНаценкаСейчас.ТекстПодвала 	= "";
	Элементы.ТоварыНоваяНаценка.ТекстПодвала 	= "";
	Если СебестоимостьСтарая <> 0 Тогда
		Элементы.ТоварыНаценкаСейчас.ТекстПодвала 	= Окр((СуммаСтарая / СебестоимостьСтарая - 1) * 100, 1);
		Элементы.ТоварыНоваяНаценка.ТекстПодвала 	= Окр((СуммаНовая / СебестоимостьНовая - 1) * 100, 1);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьЗначенияСервер()
	
	//Объект.Товары.Очистить();
	ТабПотерянныеПродажи.Очистить();
	
	//
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаСреза", Объект.ПериодРасчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаСреза"	, Объект.ПериодРасчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачГр"	, Новый Граница(НачалоМесяца(ДобавитьМесяц(Объект.ПериодРасчета.ДатаНачала, -2)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКонГр"	, Новый Граница(КонецДня(Объект.ПериодРасчета.ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Товары"		, СписокТоваров);
	//Запрос.УстановитьПараметр("ПоВсемТоварам", ВидЗаполненияРасчетов = 0);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЗ_Запрос.Ссылка,
	|	ВЗ_Запрос.id_tov,
	|	ВЗ_Запрос.СтавкаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		Номенклатура.id_tov КАК id_tov,
	|		Номенклатура.СтавкаНДС КАК СтавкаНДС
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&Товары)
	|		И НЕ Номенклатура.ЭтоГруппа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АналогиНоменклатурыТовары.Номенклатура,
	|		АналогиНоменклатурыТовары.Номенклатура.id_tov,
	|		АналогиНоменклатурыТовары.Номенклатура.СтавкаНДС
	|	ИЗ
	|		Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|	ГДЕ
	|		АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И АналогиНоменклатурыТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					АналогиНоменклатурыТовары.Ссылка
	|				ИЗ
	|					Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|				ГДЕ
	|					АналогиНоменклатурыТовары.Номенклатура В ИЕРАРХИИ (&Товары))) КАК ВЗ_Запрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВЗ_Запрос.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	МАКСИМУМ(ЦеныПоставщиков.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_Макс
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|ГДЕ
	|	ЦеныПоставщиков.Период <= &ДатаСреза
	|	И ЦеныПоставщиков.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Ссылка
	|			ИЗ
	|				ВТ_Товары КАК ВТ_Товары)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Поставщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Номенклатура,
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ЦеныПоставщиков.Период КАК Период,
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЦеныПоставщиков.Характеристика,
	|	ЦеныПоставщиков.Цена,
	|	ЦеныПоставщиков.Номенклатура.СтавкаНДС,
	|	ЦеныПоставщиков.Поставщик.СтавкаНДС
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	ВТ_Макс КАК ВТ_Макс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПО ВТ_Макс.Период = ЦеныПоставщиков.Период
	|			И ВТ_Макс.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И ВТ_Макс.Поставщик = ЦеныПоставщиков.Поставщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйДвиженияССубконто.СубконтоДт2 КАК Номенклатура,
	|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма,
	|	СУММА(ФинансовыйДвиженияССубконто.КоличествоДт) КАК КоличествоДт,
	|	СУММА(ВЫБОР
	|			КОГДА ФинансовыйДвиженияССубконто.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	|				ТОГДА ФинансовыйДвиженияССубконто.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУпаковки,
	|	ВЫРАЗИТЬ(ФинансовыйДвиженияССубконто.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент КАК Контрагент,
	|	ВТ_Характеристики.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_БухДвижения
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
	|			&ДатаНачГр,
	|			&ДатаКонГр,
	|			Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				И СубконтоДт2 В
	|					(ВЫБРАТЬ
	|						ВТ_Товары.Ссылка
	|					ИЗ
	|						ВТ_Товары КАК ВТ_Товары),
	|			,
	|			) КАК ФинансовыйДвиженияССубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО (ВЫРАЗИТЬ(ФинансовыйДвиженияССубконто.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент = ВТ_Характеристики.Поставщик
	|				ИЛИ ВЫРАЗИТЬ(ФинансовыйДвиженияССубконто.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент = ВТ_Характеристики.Поставщик.ГоловнойКонтрагент)
	|			И ФинансовыйДвиженияССубконто.СубконтоДт2 = ВТ_Характеристики.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйДвиженияССубконто.СубконтоДт2,
	|	ВЫРАЗИТЬ(ФинансовыйДвиженияССубконто.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Контрагент,
	|	ВТ_Характеристики.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗатратыНаДоставкуПоПоставщикамОбороты.Контрагент,
	|	ЗатратыНаДоставкуПоПоставщикамОбороты.Номенклатура,
	|	ЗатратыНаДоставкуПоПоставщикамОбороты.Характеристика,
	|	ЗатратыНаДоставкуПоПоставщикамОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТ_Транспорт
	|ИЗ
	|	РегистрНакопления.ЗатратыНаДоставкуПоПоставщикам.Обороты(
	|			&ДатаНачГр,
	|			&ДатаКонГр,
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_Товары.Ссылка
	|				ИЗ
	|					ВТ_Товары КАК ВТ_Товары)) КАК ЗатратыНаДоставкуПоПоставщикамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Контрагент,
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.Характеристика,
	|	СУММА(ВЗ_Запрос.Сумма) КАК Сумма,
	|	СУММА(ВЗ_Запрос.КоличествоДт) КАК Количество,
	|	СУММА(ВЗ_Запрос.СуммаУпаковки) КАК СуммаУпаковки,
	|	СУММА(ВЗ_Запрос.СуммаТранспорт) КАК СуммаТранспорт,
	|	ВЫРАЗИТЬ(ВЗ_Запрос.Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков.Вес КАК Вес,
	|	ВЫРАЗИТЬ(ВЗ_Запрос.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_БухДвижения.Контрагент КАК Контрагент,
	|		ВТ_БухДвижения.Номенклатура КАК Номенклатура,
	|		ВТ_БухДвижения.Характеристика КАК Характеристика,
	|		ВТ_БухДвижения.Сумма КАК Сумма,
	|		ВТ_БухДвижения.КоличествоДт КАК КоличествоДт,
	|		ВТ_БухДвижения.СуммаУпаковки КАК СуммаУпаковки,
	|		0 КАК СуммаТранспорт
	|	ИЗ
	|		ВТ_БухДвижения КАК ВТ_БухДвижения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Транспорт.Контрагент,
	|		ВТ_Транспорт.Номенклатура,
	|		ВТ_Транспорт.Характеристика,
	|		ВТ_Транспорт.СуммаОборот,
	|		0,
	|		0,
	|		ВТ_Транспорт.СуммаОборот
	|	ИЗ
	|		ВТ_Транспорт КАК ВТ_Транспорт) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Контрагент,
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.Характеристика,
	|	ВЫРАЗИТЬ(ВЗ_Запрос.Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков.Вес,
	|	ВЫРАЗИТЬ(ВЗ_Запрос.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Характеристики.Поставщик,
	|	ВТ_Характеристики.Номенклатура,
	|	ВТ_Характеристики.Характеристика,
	|	ВТ_Характеристики.Цена,
	|	ВТ_Характеристики.НоменклатураСтавкаНДС,
	|	ВТ_Характеристики.ПоставщикСтавкаНДС
	|ИЗ
	|	ВТ_Характеристики КАК ВТ_Характеристики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВТ_Характеристики.Период) КАК Период,
	|			ВТ_Характеристики.Номенклатура КАК Номенклатура,
	|			ВТ_Характеристики.Характеристика КАК Характеристика
	|		ИЗ
	|			ВТ_Характеристики КАК ВТ_Характеристики
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_Характеристики.Номенклатура,
	|			ВТ_Характеристики.Характеристика) КАК ВЗ_Макс
	|		ПО ВТ_Характеристики.Период = ВЗ_Макс.Период
	|			И ВТ_Характеристики.Номенклатура = ВЗ_Макс.Номенклатура
	|			И ВТ_Характеристики.Характеристика = ВЗ_Макс.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаСреза,
	|			ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|				И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_Товары.Ссылка
	|					ИЗ
	|						ВТ_Товары КАК ВТ_Товары)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка,
	|	ВТ_Товары.id_tov,
	|	ВТ_Товары.СтавкаНДС
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец КАК Товар,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИдКонтр
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Ссылка
	|			ИЗ
	|				ВТ_Товары КАК ВТ_Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Ссылка,
	|	АналогиНоменклатурыТовары.Номенклатура
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|ГДЕ
	|	АналогиНоменклатурыТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Ссылка
	|			ИЗ
	|				ВТ_Товары КАК ВТ_Товары)
	|	И НЕ АналогиНоменклатурыТовары.Ссылка.ПометкаУдаления";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка 				= Результаты[5].Выбрать();
	ТабКешТовары 			= Результаты[8].Выгрузить();
	ТабКешТовары.Индексы.Добавить("id_tov");
	ТабКешХарактеристики 	= Результаты[9].Выгрузить();
	ТабКешХарактеристики.Индексы.Добавить("Товар, ИдКонтр");
	ТабАналогиТоваров 		= Результаты[10].Выгрузить();
	//себестоимость
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокиТаб = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокаТаб = СтрокиТаб[0];
		Иначе	
			СтрокаТаб = Объект.Товары.Добавить();
		КонецЕсли;
		СтрокаТаб.Номенклатура 		= Выборка.Номенклатура;
		СтрокаТаб.Характеристика 	= Выборка.Характеристика;
		СтрокаТаб.СтавкаНДС 		= Выборка.СтавкаНДС;
		СтрокаТаб.Себестоимость 	= ?(Выборка.Количество = 0, 0, Выборка.Сумма / Выборка.Количество);
		СтрокаТаб.СебестоимостьНаКг = СтрокаТаб.Себестоимость;
		СтрокаТаб.Транспорт 		= ?(Выборка.Количество = 0, 0, Выборка.СуммаТранспорт / Выборка.Количество);
		СтрокаТаб.ТранспортЗаКг 	= ?(Выборка.Количество = 0, 0, Выборка.СуммаТранспорт / Выборка.Количество);
		СтрокаТаб.Коэф 				= ?(ЗначениеЗаполнено(Выборка.Вес), Выборка.Вес, 1);
		СтрокаТаб.ТранспортЗаКг 	= СтрокаТаб.ТранспортЗаКг / СтрокаТаб.Коэф;
		СтрокаТаб.СебестоимостьНаКг = СтрокаТаб.СебестоимостьНаКг / СтрокаТаб.Коэф;
		СтрокаТаб.СтоимостьУпаковки = ?(Выборка.Количество = 0, 0, Выборка.СуммаУпаковки / Выборка.Количество);
	КонецЦикла;
	
	ТекстИдТовары = "";
	Для Каждого СтрокаТовар Из ТабКешТовары Цикл
		ТекстИдТовары = ТекстИдТовары + ?(ЗначениеЗаполнено(ТекстИдТовары), ",", "") + Формат(СтрокаТовар.id_tov, "ЧГ=0");
	КонецЦикла;	
	
	//ТабПотерянныеПродажи = Новый ТаблицаЗначений();
	//ТабПотерянныеПродажи.Колонки.Добавить("Номенклатура");
	//ТабПотерянныеПродажи.Колонки.Добавить("Характеристика");
	//ТабПотерянныеПродажи.Колонки.Добавить("частота_изб");
	//ТабПотерянныеПродажи.Колонки.Добавить("частота_вв");
	//ТабПотерянныеПродажи.Колонки.Добавить("Колво_изб");
	//ТабПотерянныеПродажи.Колонки.Добавить("Колво_вв");
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса =
	"Select
	|	ls.id_tov_ls,
	|	ls.id_tt_ls,
	|   ls.date_ls,
	|   MAX(Case When ISNULL(ls.id_kontr_ls, 0) = 0
	|   		Then Case When ISNULL(ls.id_kontr_fp, 0) = 0
	|   				Then ISNULL(ls.id_kontr_matrix, 0)
	|   				Else ISNULL(ls.id_kontr_fp, 0)
	|   			End
	|   		Else ls.id_kontr_ls
	|   	End) as id_kontr_ls 
	|	 
	|INTO #VT_Lost_Dates					  
	|From M2..Lost_sales as ls (nolock)
	|	Inner join M2..tt as tt
	|	On tt.id_TT = ls.id_tt_ls
	|Where
	|	ls.date_ls Between " + ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаНачала, Истина) + " and "
								+ ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаОкончания, Истина) + "
	|	And ls.sales_fact > 0"
		+ ?(НЕ ТекстИдТовары = "", "
	|	And ls.id_tov_ls IN (" + ТекстИдТовары + ")", "") + "
	|Group by
	|	ls.id_tov_ls,
	|	ls.id_tt_ls,
	|	ls.date_ls
	|
	//+++АК SHEP 2018.09.19 ИП-00019306
	//|create table #Dtt (date_tt datetime, id_tt int, id_tov int, summa numeric(15, 3), SummaMarga numeric(15, 3), KolvoMarga numeric(15, 3)) 
	|create table #Dtt (date_tt datetime, id_tt int, id_tov int, summa numeric(15, 3), SummaMarga numeric(15, 3), KolvoMarga numeric(15, 3)
	|					, discount50_qty numeric(15, 3), discount50_sum numeric(20, 2)
	|					, spisanie_srok_qty numeric(15, 3), spisanie_srok_sum numeric(20, 2)
	|					, spisanie_kach_qty numeric(15, 3), spisanie_kach_sum numeric(20, 2)
	|	)
	//---АК SHEP 2018.09.19
	|					
	|Insert into #Dtt
	|Exec ('Select
	|			DTT.date_tt,
	|			DTT.id_tt,
	|			DTT.id_tov,
	|			SUM(dtt.summa) as summa,
	|			SUM((dtt.quantity - dtt.discount50_qty - dtt.discount50_sms_qty) * dtt.price) as SummaMarga,
	|			SUM(dtt.quantity - dtt.discount50_qty - dtt.discount50_sms_qty) as KolvoMarga
	//+++АК SHEP 2018.09.19 ИП-00019306
	|			, SUM(dtt.discount50_qty) as discount50_qty
	|			, SUM(dtt.discount50_qty * dtt.price) as discount50_sum
	|			, SUM(dtt.spisanie) as spisanie_srok_qty
	|			, SUM(dtt.spisanie * dtt.price) as spisanie_srok_sum
	|			, SUM(dtt.spisanie_kach) as spisanie_kach_qty
	|			, SUM(dtt.spisanie_kach * dtt.price) as spisanie_kach_sum
	//---АК SHEP 2018.09.19
	|		From [vv03].[dbo].[DTT] as DTT (nolock) 
	|		Where
	|			DTT.date_tt Between '" + ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаНачала, Истина) + "' And '"
										+ ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаОкончания, Истина) + "'"
				+ ?(НЕ ТекстИдТовары = "", "
	|			And DTT.id_tov IN (" + ТекстИдТовары + ")", "") + "
	|		Group by
	|			DTT.id_tt,
	|			DTT.id_tov,
	|			DTT.date_tt') at [SRV-SQL03]
	|						
	|Select
	|	ls.id_tov_ls,
	|	ls.id_kontr_ls,
	|	SUM(summa) as Summa,
	|	SUM(SummaMarga) as SummaMarga,
	|	SUM(KolvoMarga) as KolvoMarga
	//+++АК SHEP 2018.09.19 ИП-00019306
	|	, SUM(discount50_qty) as discount50_qty
	|	, SUM(discount50_sum) as discount50_sum
	|	, SUM(spisanie_srok_qty) as spisanie_srok_qty
	|	, SUM(spisanie_srok_sum) as spisanie_srok_sum
	|	, SUM(spisanie_kach_qty) as spisanie_kach_qty
	|	, SUM(spisanie_kach_sum) as spisanie_kach_sum
	//---АК SHEP 2018.09.19
	|Into #VT_Ls_Marga	
	|From #VT_Lost_Dates as Ls
	|	Left outer join #Dtt as Dtt
	|	On Ls.date_ls = Dtt.date_tt
	|		And Ls.id_tt_ls = Dtt.id_tt
	|		And Ls.id_tov_ls = Dtt.id_tov
	|Group by
	|	ls.id_tov_ls,
	|	ls.id_kontr_ls
	|
	|Select
	|	ls.id_tov_ls, 
	|	Case When ISNULL(ls.id_kontr_ls, 0) = 0
	|		Then Case When ISNULL(ls.id_kontr_fp, 0) = 0
	|					Then ISNULL(ls.id_kontr_matrix, 0)
	|					Else ISNULL(ls.id_kontr_fp, 0)
	|			End
	|		Else ls.id_kontr_ls
	|	End as id_kontr_ls,
	|	Case When SUM ( case when tt.tt_format = 1 then ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end else 0 end) > 0 then
	|							SUM (case when tt.tt_format = 1 then ls.sales_fact else 0 end )  / 
	|							SUM ( case when tt.tt_format = 1 then ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end else 0 end)  * 10 else 0 end частота_изб 
	|						  , case when SUM ( case when tt.tt_format = 2 then ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end else 0 end) > 0 then
	|							SUM (case when tt.tt_format = 2 then ls.sales_fact else 0 end )  / 
	|							SUM ( case when tt.tt_format = 2 then ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end else 0 end)  * 10 else 0 end частота_вв
	|						  ,SUM(case when tt.tt_format = 1 then case when isnull(ls.id_kontr_ls,0)<>0 then isnull(ls.sales_fact_scan, ls.sales_fact) end else 0 end ) kolvo_изб 
	|						  ,SUM(case when tt.tt_format = 2 then case when isnull(ls.id_kontr_ls,0)<>0 then isnull(ls.sales_fact_scan, ls.sales_fact) end else 0 end ) kolvo_вв       
	|INTO #VT_Ls
	|From m2..Lost_sales as ls (nolock)
	|	Inner join M2..tt
	|	On tt.id_TT = ls.id_tt_ls
	|Where
	|	ls.date_ls Between " + ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаНачала, Истина) + " And "
								+ ВнешниеДанные.ФорматПоля(Объект.ПериодРасчета.ДатаОкончания, Истина) + "
	|	And ls.sales_fact > 0"
		+ ?(НЕ ТекстИдТовары = "", "
	|	And ls.id_tov_ls IN (" + ТекстИдТовары + ")", "") + "
	|Group by
	|	ls.id_tov_ls, 
	|	Case When ISNULL(ls.id_kontr_ls, 0) = 0
	|		Then Case When ISNULL(ls.id_kontr_fp, 0) = 0
	|					Then ISNULL(ls.id_kontr_matrix, 0)
	|					Else ISNULL(ls.id_kontr_fp, 0)
	|			End
	|		Else ls.id_kontr_ls
	|	End
	|					 
	|SELECT
	|	VT_Ls.id_tov_ls,
	|	VT_Ls.id_kontr_ls,
	|	VT_Ls.частота_изб,
	|	VT_Ls.частота_вв,
	|	VT_Ls.kolvo_изб,
	|	VT_Ls.kolvo_вв,
	|	VT_Ls_Marga.Summa,
	|	VT_Ls_Marga.SummaMarga,
	|	VT_Ls_Marga.KolvoMarga
	//+++АК SHEP 2018.09.19 ИП-00019306
	|	, VT_Ls_Marga.discount50_qty AS discount50_qty
	|	, VT_Ls_Marga.discount50_sum AS discount50_sum
	|	, VT_Ls_Marga.spisanie_srok_qty AS spisanie_srok_qty
	|	, VT_Ls_Marga.spisanie_srok_sum AS spisanie_srok_sum
	|	, VT_Ls_Marga.spisanie_kach_qty AS spisanie_kach_qty
	|	, VT_Ls_Marga.spisanie_kach_sum AS spisanie_kach_sum
	//---АК SHEP 2018.09.19
	|FROM #VT_Ls as VT_Ls
	|	LEFT OUTER JOIN #VT_Ls_Marga as VT_Ls_Marga
	|	ON VT_Ls.id_tov_ls = VT_Ls_Marga.id_tov_ls
	|		And VT_Ls.id_kontr_ls = VT_Ls_Marga.id_kontr_ls";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено
			И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаКешТовар = ТабКешТовары.Найти(Rs.Fields("id_tov_ls").Value, "id_tov");
			Если СтрокаКешТовар = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;
			СтрокиКешХарактеристика = ТабКешХарактеристики.НайтиСтроки(Новый Структура("Товар, ИдКонтр", СтрокаКешТовар.Ссылка, Rs.Fields("id_kontr_ls").Value));
			Если СтрокиКешХарактеристика.Количество() = 0 Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабПотерянныеПродажи.Добавить();
			СтрокаДоб.Номенклатура 		= СтрокаКешТовар.Ссылка;
			СтрокаДоб.Характеристика 	= СтрокиКешХарактеристика[0].Ссылка;
			СтрокаДоб.СтавкаНДС 		= СтрокаКешТовар.СтавкаНДС;
			СтрокаДоб.частота_изб 		= Rs.Fields("частота_изб").Value;
			СтрокаДоб.частота_вв 		= Rs.Fields("частота_вв").Value;
			СтрокаДоб.Колво_изб 		= Rs.Fields("kolvo_изб").Value;   
			СтрокаДоб.Колво_вв 			= Rs.Fields("kolvo_вв").Value;
			СтрокаДоб.ОбщаяВыручка 		= Rs.Fields("Summa").Value;
			СтрокаДоб.СуммаМаржа 		= Rs.Fields("SummaMarga").Value;
			СтрокаДоб.КолвоМаржа 		= Rs.Fields("KolvoMarga").Value;
			//+++АК SHEP 2018.09.19 ИП-00019306
			СтрокаДоб.КолвоСкидка50 	= Rs.Fields("discount50_qty").Value;
			СтрокаДоб.СуммаСкидка50 	= Rs.Fields("discount50_sum").Value;
			СтрокаДоб.КолвоСписанияСрок = Rs.Fields("spisanie_srok_qty").Value;
			СтрокаДоб.СуммаСписанияСрок	= Rs.Fields("spisanie_srok_sum").Value;
			СтрокаДоб.КолвоСписанияКачество	= Rs.Fields("spisanie_kach_qty").Value;
			СтрокаДоб.СуммаСписанияКачество	= Rs.Fields("spisanie_kach_sum").Value;
			//---АК SHEP 2018.09.19
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//
	Для каждого СтрокаПотерянные Из ТабПотерянныеПродажи Цикл
		СтрокиТаб = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаПотерянные.Номенклатура, СтрокаПотерянные.Характеристика));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокаТаб = СтрокиТаб[0];
		Иначе	
			СтрокаТаб = Объект.Товары.Добавить();
			СтрокаТаб.Номенклатура 	= СтрокаПотерянные.Номенклатура;
			СтрокаТаб.Коэф 			= СтрокаПотерянные.Номенклатура.ЕдиницаХраненияОстатков.Вес;
		КонецЕсли;
		СтрокаТаб.Номенклатура 						= СтрокаПотерянные.Номенклатура;
		СтрокаТаб.Характеристика 					= СтрокаПотерянные.Характеристика;
		СтрокаТаб.ЧастотаИзбенка 					= СтрокаПотерянные.частота_изб;
		СтрокаТаб.ЧастотаВкусвилл 					= СтрокаПотерянные.частота_вв;
		СтрокаТаб.КоличествоПроданногоВВИТТ 		= СтрокаПотерянные.Колво_изб + СтрокаПотерянные.Колво_вв;
		СтрокаТаб.ПрогнозКоличествоПроданногоВВИТТ 	= СтрокаТаб.КоличествоПроданногоВВИТТ;
		СтрокаТаб.ВыручкаСейчас 					= СтрокаПотерянные.ОбщаяВыручка;
		Если СтрокаПотерянные.КолвоМаржа <> 0 Тогда
			//СтрокаТаб.МаржаСейчас = СтрокаПотерянные.СуммаМаржа * (1 - УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)/100) - СтрокаПотерянные.КолвоМаржа * СтрокаТаб.Себестоимость;
			//СтрокаТаб.МаржаСейчас = СтрокаТаб.КоличествоПроданногоВВИТТ * СтрокаТаб.ЦенаВыгрузкиНаСайт * (1 - УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)/100) - СтрокаТаб.КоличествоПроданногоВВИТТ * СтрокаТаб.Себестоимость;
			//СтрокаТаб.НоваяМаржа = СтрокаТаб.МаржаСейчас;
		КонецЕсли;	
		
		//+++АК SHEP 2018.09.19 ИП-00019306
		ЗаполнитьЗначенияСвойств(СтрокаТаб, СтрокаПотерянные, "КолвоСкидка50,СуммаСкидка50,КолвоСписанияСрок,СуммаСписанияСрок,КолвоСписанияКачество,СуммаСписанияКачество");
		//---АК SHEP 2018.09.19
		
	КонецЦикла;
	
	//цена закупки
	ТабЦеныЗакупки = Результаты[6].Выгрузить();
	Для Каждого СтрокаКеш Из ТабЦеныЗакупки Цикл
		СтрокиТаб = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаКеш.Номенклатура, СтрокаКеш.Характеристика));
		Если СтрокиТаб.Количество() > 0 Тогда
			Если СтрокаКеш.ПоставщикСтавкаНДС = Перечисления.СтавкиНДС.БезНДС
					ИЛИ СтрокаКеш.ПоставщикСтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокиТаб[0].ЦенаЗакупкиСНДС 	= СтрокаКеш.Цена + СтрокаКеш.Цена * УчетНДС.ПолучитьСтавкуНДС(СтрокаКеш.НоменклатураСтавкаНДС) / 100;
			Иначе
				СтрокиТаб[0].ЦенаЗакупкиСНДС 	= СтрокаКеш.Цена;
			КонецЕсли;	
			СтрокиТаб[0].НоваяЦенаЗакупкиСНДС 	= СтрокиТаб[0].ЦенаЗакупкиСНДС;
		КонецЕсли;
	КонецЦикла;
	
	//цена продажи
	ТабЦеныПродажи = Результаты[7].Выгрузить();
	Для Каждого СтрокаКеш Из ТабЦеныПродажи Цикл
		СтрокиТаб = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКеш.Номенклатура));
		Для Каждого СтрокаТаб Из СтрокиТаб Цикл
			СтрокаТаб.ЦенаВыгрузкиНаСайт 		= СтрокаКеш.Цена;
			СтрокаТаб.НоваяЦенаВыгрузкиНаСайт 	= СтрокаКеш.Цена;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.НаценкаСейчас 		= ?(СтрокаТаб.Себестоимость <> 0, (СтрокаТаб.ЦенаВыгрузкиНаСайт / СтрокаТаб.Себестоимость - 1) * 100, 0);
		СтрокаТаб.МаржаСейчас 			= СтрокаТаб.КоличествоПроданногоВВИТТ * СтрокаТаб.ЦенаВыгрузкиНаСайт / (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС) / 100)
											- СтрокаТаб.КоличествоПроданногоВВИТТ * СтрокаТаб.Себестоимость;
		//СтрокаТаб.НоваяНаценка = СтрокаТаб.НаценкаСейчас;
		СтрокаГруппаАналогов = ТабАналогиТоваров.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
		Если СтрокаГруппаАналогов <> Неопределено Тогда
			СтрокаТаб.ГруппаАналогов 	= СтрокаГруппаАналогов.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	НомерГруппы = 0;
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.НомерГруппы) Тогда
			Продолжить;
		КонецЕсли;	
		ОбщаяСумма = 0;
		Если ЗначениеЗаполнено(СтрокаТаб.ГруппаАналогов) Тогда
			СтрокиКешТовары = Объект.Товары.НайтиСтроки(Новый Структура("ГруппаАналогов", СтрокаТаб.ГруппаАналогов));
			Для Каждого СтрокаКеш Из СтрокиКешТовары Цикл
				СтрокаКеш.НомерГруппы = НомерГруппы;
			КонецЦикла;
			НомерГруппы = НомерГруппы + 1;
		Иначе
			СтрокиКешТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
			Для Каждого СтрокаКеш Из СтрокиКешТовары Цикл
				СтрокаКеш.НомерГруппы = НомерГруппы;
			КонецЦикла;	
			НомерГруппы = НомерГруппы + 1;
		КонецЕсли;	
		
		//Если ОбщаяСумма <> 0 Тогда
		//	СтрокаТаб.ТекущаяДоля = СтрокаТаб.ВыручкаСейчас / ОбщаяСумма * 100;
		//	СтрокаТаб.ПредполагаемаяДоля = СтрокаТаб.ТекущаяДоля;
		//КонецЕсли;	
	КонецЦикла;
	
	ТабОбщиеТовары = Объект.Товары.Выгрузить();
	ТабОбщиеТовары.Свернуть("НомерГруппы");
	Для Каждого СтрокаГруппа Из ТабОбщиеТовары Цикл
		ТабКРасчету = Новый ТаблицаЗначений();
		ТабКРасчету.Колонки.Добавить("СтрокаТаб");
		ТабКРасчету.Колонки.Добавить("Сумма");
		СуммаВсего = 0;
		СтрокиКеш = Объект.Товары.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаГруппа.НомерГруппы));
		Для Каждого СтрокаКеш Из СтрокиКеш Цикл
			СтрокаДоб = ТабКРасчету.Добавить();
			СтрокаДоб.СтрокаТаб = СтрокаКеш;
			СтрокаДоб.Сумма 	= СтрокаКеш.ВыручкаСейчас;
		КонецЦикла;
		РаспределенныеПроценты = ОбщегоНазначения.РаспределитьПропорционально(100, ТабКРасчету.ВыгрузитьКолонку("Сумма"), 1);
		Если ЗначениеЗаполнено(РаспределенныеПроценты) Тогда
			ТабКРасчету.ЗагрузитьКолонку(РаспределенныеПроценты, "Сумма");
		КонецЕсли;
		Для Каждого СтрокаРасчитанная Из ТабКРасчету Цикл
			СтрокаРасчитанная.СтрокаТаб.ТекущаяДоля = СтрокаРасчитанная.Сумма;
			СтрокаРасчитанная.СтрокаТаб.ПредполагаемаяДоля = СтрокаРасчитанная.СтрокаТаб.ТекущаяДоля;
		КонецЦикла;	
	КонецЦикла;	
	
	//
	Объект.Товары.Сортировать("Номенклатура");
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		ПересчитатьСтроку(СтрокаТаб);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРасчета.ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодРасчета.ДатаОкончания) Тогда
		Сообщить("Не заполнен период расчета");
		Возврат;
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0
		 	И Вопрос("Табличная часть не пуста. Очистить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	//
	ЗаполнитьЗначенияСервер();
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНач = НачалоНедели(ТекущаяДата() - 7 * 86400);
	ДатаКон = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтрегулироватьФорму();
	
КонецПроцедуры


&НаКлиенте
Процедура ВидЗаполненияРасчетовПриИзменении(Элемент)
	
	ОтрегулироватьФорму();
	
КонецПроцедуры

Процедура ЗаполнитьПоПоставщикуСервер()

	ЕстьСписокТоваров = (СписокТоваров.Количество() > 0);
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент"	, Объект.Поставщик);
	Если ЕстьСписокТоваров Тогда
		Запрос.УстановитьПараметр("Товары"	, СписокТоваров);
	КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|			И (ЗначенияСвойствОбъектов.Значение = &Контрагент)
	|ГДЕ
	|	&УсловиеПоТоварам
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец.Наименование,
	|	ХарактеристикиНоменклатуры.Наименование";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТоварам
	|	И ",
		?(ЕстьСписокТоваров, "ХарактеристикиНоменклатуры.Владелец В ИЕРАРХИИ(&Товары)
	|	И ", ""));
	Запрос.Текст = ТекстЗапроса;
	
	//
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоставщику(Команда)
	
	Если Объект.Поставщик.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//
	ЗаполнитьПоПоставщикуСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элементы.Товары.ТекущиеДанные.СтрокаРедактировалась = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоваяЦенаЗакупкиСНДСПриИзменении(Элемент)
	
	ПересчитатьСтроку(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоваяЦенаВыгрузкиНаСайтПриИзменении(Элемент)
	
	ПересчитатьСтроку(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПрогнозКоличествоПроданногоВВИТТПриИзменении(Элемент)
	
	ПересчитатьСтроку(Элементы.Товары.ТекущаяСтрока);
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяРозничнаяПроцентомОтСтарой(Команда)
	
	ПроцентИзменения = 0;
	ВвестиЧисло(ПроцентИзменения, "Укажите процент изменения", 10, 2);
	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТекДанные.НоваяЦенаВыгрузкиНаСайт = ТекДанные.ЦенаВыгрузкиНаСайт * (100 + ПроцентИзменения) / 100;
		ПересчитатьСтроку(ВыделеннаяСтрока);
	КонецЦикла;	
	
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЦенаЗакупкиПроцентомОтСтарой(Команда)
	
	ПроцентИзменения = 0;
	ВвестиЧисло(ПроцентИзменения, "Укажите процент изменения", 10, 2);
	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТекДанные.НоваяЦенаЗакупкиСНДС = ТекДанные.ЦенаЗакупкиСНДС * (100 + ПроцентИзменения) / 100;
		ПересчитатьСтроку(ВыделеннаяСтрока);
	КонецЦикла;	
	
	ПересчитатьИтоговыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредполагаемаяДоляОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//
	МассивДанные = Новый Массив;
	СтрокиГруппы = Объект.Товары.НайтиСтроки(Новый Структура("НомерГруппы", Элементы.Товары.ТекущиеДанные.НомерГруппы));
	Для Каждого СтрокаГруппы Из СтрокиГруппы Цикл
		МассивДанные.Добавить(Новый Структура("Идентификатор, Номенклатура, Характеристика, Доля", СтрокаГруппы.ПолучитьИдентификатор(), СтрокаГруппы.Номенклатура, СтрокаГруппы.Характеристика, СтрокаГруппы.ПредполагаемаяДоля));
	КонецЦикла;
	
	Результат = ОткрытьФормуМодально("Обработка.КалькуляторНаценкиНовый.Форма.ФормаДоли", Новый Структура("СтруктураДанные", МассивДанные), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из Результат Цикл
			СтрокаТаб = Объект.Товары.НайтиПоИдентификатору(ЭлементМассива.Идентификатор);
			СтрокаТаб.ПредполагаемаяДоля = ЭлементМассива.Доля;
		КонецЦикла;	
		Для Каждого ЭлементМассива Из Результат Цикл
			ПересчитатьСтроку(ЭлементМассива.Идентификатор);
		КонецЦикла;
		ПересчитатьИтоговыеЗначения();
	КонецЕсли;	
	
КонецПроцедуры
//ziga(
&НаКлиенте
Процедура СписокТоваровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	СтруктураПараметров=Новый Структура();
	СтруктураПараметров.Вставить("Товары",СписокТоваров);
	Оповещение=Новый ОписаниеОповещения("ЗаписьТоваров",ЭтаФорма);
	ОткрытьФорму("Обработка.КалькуляторНаценкиНовый.Форма.ФормаПодбора",СтруктураПараметров,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьТоваров(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат=Неопределено Тогда
		СписокТоваров.Очистить();
		Если НЕ Результат=Неопределено Тогда
			Для каждого стр из Результат Цикл
				Товар=Объект.Товары.Добавить();
				Товар.Номенклатура=Стр.Значение;
				СписокТоваров.Добавить(Стр.значение);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//)ziga