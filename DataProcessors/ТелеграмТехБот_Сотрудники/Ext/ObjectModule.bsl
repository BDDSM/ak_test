//+++АК KOPA +Модуль 2018.02.02 ИП-00017608
//Для задачи ИП-00017608


#Область ___Тесты

Функция ___Переходы()
	Массив = Новый Массив;
	Массив.Добавить(Справочники.ФизическиеЛица);
	Массив.Добавить(Документы.Обещание);
	Массив.Добавить(Справочники.РолиПользователей);
	Массив.Добавить(РегистрыСведений.СоответствиеОбъектРоль);

	Возврат Массив;
КонецФункции

Функция ___ДобавитьТестВТаблицу(Таблица, Ключ, Значение)
	Строка = Таблица.Добавить();
	Строка.Ключ = Ключ;
	Строка.Значение = ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ___ПолучитьТесты()
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	Таблица.Колонки.Добавить("Ключ", ТипСтрока);
	Таблица.Колонки.Добавить("Значение", ТипСтрока);
		
	Данные = Новый Структура("ИмяКоманды", "ПоискСотрудникаФИО"); 
	Данные.Вставить("СтрокаПоиска", "абе");
	Данные.Вставить("Первые",10);
	___ДобавитьТестВТаблицу(Таблица, "По ФИО абе 10", Данные);
	
	Данные = Новый Структура("ИмяКоманды", "ПоискСотрудникаФИО"); 
	Данные.Вставить("СтрокаПоиска",	"Абляева Гольфия Идрисовна");
	Данные.Вставить("Первые",	10);
	___ДобавитьТестВТаблицу(Таблица, "По ФИО Абляева Гольфия Идрисовна", Данные);
	
	Данные = Новый Структура("ИмяКоманды", "ПоискСотрудникаТелефон"); 
	Данные.Вставить("СтрокаПоиска",	"904");
	Данные.Вставить("Первые",	10);
	___ДобавитьТестВТаблицу(Таблица, "Поиск по телефону 904", Данные);	
	
	Данные = Новый Структура("ИмяКоманды", "ДанныеСотрудника");
	Данные.Вставить("СтрокаПоиска", "Абляева Гольфия Идрисовна" );
	Данные.Вставить("Код","0000000535");
	___ДобавитьТестВТаблицу(Таблица, "Данные по Абляева Гольфия Идрисовна", Данные);
	
	Данные = Новый Структура("ИмяКоманды,ФизЛицо", 
		"СписокПодразделений",
		"1739b3fd-5c66-11e1-a4a0-000c29e4e68a");
	___ДобавитьТестВТаблицу(Таблица, "Список подразделений", Данные);
	
	Данные = Новый Структура("ИмяКоманды,Код,ФизЛицо", 
		"ИзменитьПодразделение",
		"000000006",
		"1739b3fd-5c66-11e1-a4a0-000c29e4e68a");
	___ДобавитьТестВТаблицу(Таблица, "Изменим подразделение Абляева Гольфия Идрисовна на 000000006", Данные);
	
//Обещания
	Данные = Новый Структура("ИмяКоманды", "ПолучитьОбещания");
	Данные.Вставить("УИДЗаказчик", "" + Справочники.ФизическиеЛица.НайтиПоНаименованию("Машкина Олеся Сергеевна", Истина).УникальныйИдентификатор());
	Данные.Вставить("УИДИсполнитель", "" + Справочники.ФизическиеЛица.НайтиПоНаименованию("Юраш Рената Владимировна", Истина).УникальныйИдентификатор());

	___ДобавитьТестВТаблицу(Таблица, "Обещания для Машкина Олеся Сергеевна от Юраш Рената Владимировна", Данные);
	
	Данные = Новый Структура("ИмяКоманды", "ЗаписатьОбещание");
	Данные.Вставить("УИДОбещание", "" + Документы.Обещание.НайтиПоНомеру("000000172", '20160101').УникальныйИдентификатор());
	Данные.Вставить("Оценка", 1);
	___ДобавитьТестВТаблицу(Таблица, "Обещание 000000172 ПолностьюНеИсполняется", Данные);
	
	Данные = Новый Структура("ИмяКоманды", "ИзменитьЕмаил");
	Данные.Вставить("ФизЛицо", "1739b3fd-5c66-11e1-a4a0-000c29e4e68a");
	Данные.Вставить("Емаил", "777");
	___ДобавитьТестВТаблицу(Таблица, "Изменить Емаил у Абляева Гольфия Идрисовна", Данные);
	
	Возврат Таблица;
КонецФункции

Функция ___ПолучитьОписание() Экспорт 
	Структура = Новый Структура;
	Структура.Вставить("ИдЗадача", "ИП-00017173");
	Структура.Вставить("НаименованиеВнешнейОбработки", "___СОТРУДНИКИ");
	Структура.Вставить("Переходы", ___Переходы());
	Структура.Вставить("ТаблицаТесты", ___ПолучитьТесты());
	
	Возврат Структура;
КонецФункции

#КонецОбласти




















Функция ВыполнитьДействие(Данные) Экспорт 
	Если Данные.ИмяКоманды = "Тест" Тогда
		Возврат Новый Структура("Ответ", "Тест пройден");
	ИначеЕсли Данные.ИмяКоманды = "ПоискСотрудникаФИО" Тогда 
		Возврат НайтиСотрудникаДляТелеграмБота_ФИО(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ПоискСотрудникаТелефон" Тогда 
		Возврат НайтиСотрудникаДляТелеграмБота_Телефон(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "ДанныеСотрудника" Тогда 
		Возврат ПолучитьДанныеСотрудника(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "СписокПодразделений" Тогда 
		Возврат ПолучитьДанныеДЛяИзмененияПодразделения(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ИзменитьПодразделение" Тогда 
		Возврат ИзменитьПодразделение(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "ПолучитьОбещания" Тогда 
		Возврат ПолучитьОбещания(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ЗаписатьОбещание" Тогда 
		Возврат ЗаписатьОбещание(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "ИзменитьЕмаил" Тогда 
		Возврат ИзменитьЕмаилФизЛица(Данные);		
	Иначе
		Возврат Новый Структура("Ошибка", "Не зашли");	
	КонецЕсли;
КонецФункции

Функция СоединитьСтроки(Массив, Разделитель)
	Текст = "";
	
	Для каждого элем Из Массив Цикл			
		Текст = Текст + ?(Текст = "", "", Разделитель) + элем;			
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
//СОТРУДНИКИ

#Область Сотрудники

Функция НайтиСотрудникаДляТелеграмБота_ФИО(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Тип,
		|	&Вид
		|ПОМЕСТИТЬ тТипВид
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Тип1,
		|	&Вид1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.ЦФО,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Код
		|ПОМЕСТИТЬ тФизлица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование ПОДОБНО &СтрокаПоиска
		|	И НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.Активный
		|	И ФизическиеЛица.ДатаУвольнения = &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	тФизлица.Наименование КАК Наименование,
		|	тФизлица.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид,
		|	тФизлица.Код КАК Код
		|ПОМЕСТИТЬ тФизЛицаДоПроверкиСотрудников
		|ИЗ
		|	тФизлица КАК тФизлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО тФизлица.Ссылка = КонтактнаяИнформация.Объект
		|			И ((КонтактнаяИнформация.Тип, КонтактнаяИнформация.Вид) В
		|				(ВЫБРАТЬ
		|					тТипВид.Тип,
		|					тТипВид.Вид
		|				ИЗ
		|					тТипВид КАК тТипВид))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	тФизЛицаДоПроверкиСотрудников.Наименование КАК Наименование,
		|	тФизЛицаДоПроверкиСотрудников.Ссылка КАК Ссылка,
		|	тФизЛицаДоПроверкиСотрудников.Тип,
		|	тФизЛицаДоПроверкиСотрудников.Вид,
		|	тФизЛицаДоПроверкиСотрудников.Код КАК Код,
		|	ВЫРАЗИТЬ(тФизЛицаДоПроверкиСотрудников.Представление КАК СТРОКА(50)) КАК Представление
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тФизЛицаДоПроверкиСотрудников КАК тФизЛицаДоПроверкиСотрудников
		|		ПО СотрудникиОрганизаций.Физлицо = тФизЛицаДоПроверкиСотрудников.Ссылка
		|			И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
		|			И (СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		|				ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &ТекДата)
		|			И (СотрудникиОрганизаций.Организация.Наименование = &Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	тФизЛицаДоПроверкиСотрудников.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Код)
		|ПО
		|	Ссылка";
	
	ТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;	
	ТипЕМэил = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "100", "" + Данные.Первые);
	Запрос.УстановитьПараметр("Тип", ТипТелефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Запрос.УстановитьПараметр("Тип1", ТипЕМэил);
	Запрос.УстановитьПараметр("Вид1", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Данные.СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", "Вкусвилл");

	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСотрудники = Новый Массив;
	Результат = Новый Структура;	
	Результат.Вставить("Сотрудники", МассивСотрудники);
	
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Сотрудник = Выборка.Наименование; 
		
		ВыборкаДЗ = Выборка.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл			
			Если ЗначениеЗаполнено(ВыборкаДЗ.Представление) Тогда			
				Сотрудник = Сотрудник + " (" + ВыборкаДЗ.Представление + ")";								
			КонецЕсли;		
		КонецЦикла;
		
		МассивСотрудники.Добавить(Новый Структура("Представление, Код", Сотрудник, Выборка.Код));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НайтиСотрудникаДляТелеграмБота_Телефон(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.ЦФО,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Код
		|ПОМЕСТИТЬ тФизлица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.Активный
		|	И ФизическиеЛица.ДатаУвольнения = &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	тФизлица.Наименование КАК Наименование,
		|	тФизлица.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид,
		|	тФизлица.Код КАК Код
		|ПОМЕСТИТЬ тФизЛицаДоПроверкиСотрудников
		|ИЗ
		|	тФизлица КАК тФизлица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО тФизлица.Ссылка = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = &ТипТелефон
		|				И КонтактнаяИнформация.Вид = &ВидТелефонаСлужебный)
		|			И (КонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	тФизЛицаДоПроверкиСотрудников.Наименование КАК Наименование,
		|	тФизЛицаДоПроверкиСотрудников.Ссылка КАК Ссылка,
		|	тФизЛицаДоПроверкиСотрудников.Тип,
		|	тФизЛицаДоПроверкиСотрудников.Вид,
		|	тФизЛицаДоПроверкиСотрудников.Код КАК Код,
		|	ВЫРАЗИТЬ(тФизЛицаДоПроверкиСотрудников.Представление КАК СТРОКА(50)) КАК Представление
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тФизЛицаДоПроверкиСотрудников КАК тФизЛицаДоПроверкиСотрудников
		|		ПО СотрудникиОрганизаций.Физлицо = тФизЛицаДоПроверкиСотрудников.Ссылка
		|			И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
		|			И (СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		|				ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &ТекДата)
		|			И (СотрудникиОрганизаций.Организация.Наименование = &Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	тФизЛицаДоПроверкиСотрудников.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Код)
		|ПО
		|	Ссылка";
	
	ТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;	
	ТипЕМэил = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "100", "" + Данные.Первые);
	Запрос.УстановитьПараметр("ТипТелефон", ТипТелефон);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Данные.СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", "Вкусвилл");
	Запрос.УстановитьПараметр("ВидТелефонаСлужебный", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСотрудники = Новый Массив;
	Результат = Новый Структура;	
	Результат.Вставить("Сотрудники", МассивСотрудники);
	
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Сотрудник = Выборка.Наименование; 
		
		ВыборкаДЗ = Выборка.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл			
			Если ЗначениеЗаполнено(ВыборкаДЗ.Представление) Тогда			
				Сотрудник = Сотрудник + " (" + ВыборкаДЗ.Представление + ")";								
			КонецЕсли;		
		КонецЦикла;
		
		МассивСотрудники.Добавить(Новый Структура("Представление, Код", Сотрудник, Выборка.Код));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеСотрудника(Данные) Экспорт 
	Результат = Новый Структура;
	
	Если Данные.Свойство("Код") Тогда
		Код = Данные.Код;
	Иначе 
		ФизЛицо = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИД, Справочники.ФизическиеЛица);
		
		Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
			Результат.Вставить("Ошибка", "Данные о сотруднике не найдены");
		
			Возврат Результат;	
		КонецЕсли;
		
		Код = ФизЛицо.Код;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Тип,
		|	&Вид
		|ПОМЕСТИТЬ тТипВид
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Тип1,
		|	&Вид1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Тип,
		|	&Вид2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Должность КАК Должность,
		|	""Обещания"" КАК Обещания,
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Код
		|ПОМЕСТИТЬ тСотрудник
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Активный
		|	И ФизическиеЛица.Код = &Код
		|	И ФизическиеЛица.ДатаУвольнения = &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(50)) КАК КИ,
		|	тСотрудник.Наименование КАК Наименование,
		|	тСотрудник.Ссылка КАК Ссылка,
		|	тСотрудник.Должность КАК Должность,
		|	тСотрудник.Обещания,
		|	тСотрудник.Код КАК Код,
		|	МАКСИМУМ(СотрудникиОрганизаций.ПодразделениеОрганизации.Наименование) КАК ПодразделениеОрганизацииНаименование
		|ИЗ
		|	тСотрудник КАК тСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО тСотрудник.Ссылка = КонтактнаяИнформация.Объект
		|			И ((КонтактнаяИнформация.Тип, КонтактнаяИнформация.Вид) В
		|				(ВЫБРАТЬ
		|					тТипВид.Тип,
		|					тТипВид.Вид
		|				ИЗ
		|					тТипВид КАК тТипВид))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО тСотрудник.Ссылка = СотрудникиОрганизаций.Физлицо
		|			И (СотрудникиОрганизаций.Организация = &Организация)
		|			И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
		|			И (СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата)
		|
		|СГРУППИРОВАТЬ ПО
		|	тСотрудник.Код,
		|	тСотрудник.Должность,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Тип,
		|	тСотрудник.Наименование,
		|	тСотрудник.Ссылка,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(50)),
		|	тСотрудник.Обещания
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Должность),
		|	МАКСИМУМ(Код),
		|	МАКСИМУМ(ПодразделениеОрганизацииНаименование)
		|ПО
		|	Ссылка";
	
	ТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;	
	ТипЕМэил = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Тип", ТипТелефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	Запрос.УстановитьПараметр("Тип1", ТипЕМэил);
	Запрос.УстановитьПараметр("Вид1", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	// +++ golv ИП-00019287 18.07.2018
	Запрос.УстановитьПараметр("Вид2", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	// --- golv ИП-00019287 18.07.2018
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоНаименованию("Вкусвилл", Истина));
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("Ошибка", "Данные о сотруднике не найдены");
		
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить("УИДИсполнитель", "" + Выборка.Ссылка.УникальныйИдентификатор());
		
		Массив.Добавить("Код: " + Выборка.Код);
		Массив.Добавить("ФИО: " + Выборка.Наименование);
		Массив.Добавить("Должность: " + Выборка.Должность);
		Массив.Добавить("Подразделение: " + Выборка.ПодразделениеОрганизацииНаименование);
		
		ВыборкаДЗ = Выборка.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл
			// +++ golv ИП-00019287 18.07.2018     
			Если ВыборкаДЗ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда		
				Массив.Добавить("Телефон: " + ВыборкаДЗ.КИ);
			ИначеЕсли ВыборкаДЗ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный Тогда		
				Массив.Добавить("Служебный телефон: " + ВыборкаДЗ.КИ);
			// --- golv ИП-00019287 
			ИначеЕсли ВыборкаДЗ.Тип = ТипЕМэил Тогда		
				Массив.Добавить("EMail: " + ВыборкаДЗ.КИ);			
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Текст = СоединитьСтроки(Массив, Символы.ПС);
	
	Результат.Вставить("ДанныеСотрудника", Текст);
	
	Возврат Результат;
КонецФункции 

#КонецОбласти

#Область Обещания

Функция ПолучитьОбещанияИсполнителя(Данные)
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	тОбещание.Срочное,
	//	|	тОбещание.Обещание,
	//	|	тОбещание.Ссылка,
	//	|	тОбещание.ДатаИзменения,
	//	|	тОбещание.Дата
	//	|ИЗ
	//	|	Документ.Обещание КАК тОбещание
	//	|ГДЕ
	//	|	тОбещание.Проведен
	//	|	И тОбещание.Заказчик = &Заказчик
	//	|	И тОбещание.Исполнитель = &Исполнитель
	//	|	И тОбещание.Статус = &Статус";
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тОбещание.Обещание,
		|	тОбещание.Ссылка,
		|	тОбещание.ДатаИзменения,
		|	тОбещание.Дата,
		|	1 КАК ВидОбещания,
		|	тОбещание.Оценка
		|ПОМЕСТИТЬ втОбещанияКонкретномуИсполнителю
		|ИЗ
		|	Документ.Обещание КАК тОбещание
		|ГДЕ
		|	тОбещание.Проведен
		|	И тОбещание.Заказчик = &Заказчик
		|	И тОбещание.Исполнитель = &Исполнитель
		|	И тОбещание.Статус = &Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейТипыРолей.ТипРоли
		|ПОМЕСТИТЬ втТипРоли
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
		|			И (РолиПользователейСоставРоли.Сотрудник = &Исполнитель)
		|			И (НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тОбещание.Ссылка,
		|	тОбещание.Заказчик,
		|	тОбещание.Обещание,
		|	тОбещание.ДатаИзменения,
		|	тОбещание.Дата,
		|	тОбещание.Исполнитель,
		|	тОбещание.Оценка
		|ПОМЕСТИТЬ втОбещанияПоТипуРоли
		|ИЗ
		|	Документ.Обещание КАК тОбещание
		|ГДЕ
		|	тОбещание.Исполнитель ССЫЛКА ПланВидовХарактеристик.ТипыРолейПользователя
		|	И тОбещание.Проведен
		|	И тОбещание.Статус = &Статус
		|	И тОбещание.Заказчик = &Заказчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОбещанияПоТипуРоли.Обещание,
		|	втОбещанияПоТипуРоли.Ссылка,
		|	втОбещанияПоТипуРоли.ДатаИзменения,
		|	втОбещанияПоТипуРоли.Дата,
		|	2 КАК ВидОбещания,
		|	втОбещанияПоТипуРоли.Оценка
		|ПОМЕСТИТЬ втИтог
		|ИЗ
		|	втОбещанияПоТипуРоли КАК втОбещанияПоТипуРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТипРоли КАК втТипРоли
		|		ПО (втТипРоли.ТипРоли = втОбещанияПоТипуРоли.Исполнитель)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втОбещанияКонкретномуИсполнителю.Обещание,
		|	втОбещанияКонкретномуИсполнителю.Ссылка,
		|	втОбещанияКонкретномуИсполнителю.ДатаИзменения,
		|	втОбещанияКонкретномуИсполнителю.Дата,
		|	втОбещанияКонкретномуИсполнителю.ВидОбещания,
		|	втОбещанияКонкретномуИсполнителю.Оценка
		|ИЗ
		|	втОбещанияКонкретномуИсполнителю КАК втОбещанияКонкретномуИсполнителю
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	втИтог.Обещание,
		|	втИтог.Ссылка,
		|	втИтог.ДатаИзменения,
		|	втИтог.Дата,
		|	втИтог.ВидОбещания,
		|	ПРЕДСТАВЛЕНИЕ(втИтог.Оценка)
		|ИЗ
		|	втИтог КАК втИтог";
	
	Запрос.УстановитьПараметр("Заказчик", Данные.Заказчик);
	Запрос.УстановитьПараметр("Исполнитель", Данные.Исполнитель);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусОбещания.ДостигнутаяДоговоренность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	е = 0;
	Пока Выборка.Следующий() Цикл
		Обещание = Новый Структура;
		Обещание.Вставить("Представление", Выборка.Обещание);
		Обещание.Вставить("Ссылка", "" + Выборка.Ссылка.УникальныйИдентификатор());
		Обещание.Вставить("ДатаИзменения", Выборка.ДатаИзменения);
		Обещание.Вставить("Дата", Выборка.Дата);
		Обещание.Вставить("ИД", е);
		Обещание.Вставить("ВидОбещания", Выборка.ВидОбещания);
		Обещание.Вставить("ОценкаПредставление", "" + Выборка.ОценкаПредставление);
		
		е = е + 1;
		
		Результат.Добавить(Обещание);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбещания(Данные)
	Результат = Новый Структура;
	
	Попытка
		Заказчик = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИДЗаказчик, Справочники.ФизическиеЛица);	
		Исполнитель = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИДИсполнитель, Справочники.ФизическиеЛица);	
	Исключение
		Результат.Вставить("Ошибка", "Не удалось определить заказчика/исполнителя");
		
		Возврат Результат;
	КонецПопытки;
	
	Данные.Вставить("Заказчик", Заказчик);
	Данные.Вставить("Исполнитель", Исполнитель);
	
	РезультатОбещаяния = ПолучитьОбещанияИсполнителя(Данные);
	
	Результат.Вставить("Обещания", РезультатОбещаяния);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОценкуОбещанияПоНомеру(Номер)
	Результат = Перечисления.ОценкаКачестваИсполнения.ПустаяСсылка();
	
	Если Номер = 1 Тогда
		Результат = Перечисления.ОценкаКачестваИсполнения.ПолностьюНеИсполняется;
	ИначеЕсли Номер = 2 Тогда
	    Результат = Перечисления.ОценкаКачестваИсполнения.ЧастичноИсполняется;
	ИначеЕсли Номер = 3 Тогда
		Результат = Перечисления.ОценкаКачестваИсполнения.ПолностьюИсполняется;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьОбещание(Данные)
	Результат = Новый Структура;
	
	Попытка
	    Документ = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИДОбещание, Документы.Обещание);
		Исполнитель = ТелеграмТехБот.ПолучитьФизЛицоПоУИД(Данные.Исполнитель);
	Исключение
		Результат.Вставить("Ошибка", "Не удалось определить документ обещание");
		
		Возврат Результат;
	КонецПопытки;	
		
	обк = Документ.ПолучитьОбъект();
	
	//обк = Документы.Обещание.СоздатьДокумент();	
	//обк.Статус = Перечисления.СтатусОбещания.ДостигнутаяДоговоренность;	
	
	Если обк.Исполнитель = Исполнитель Тогда	
		обк.Оценка = ПолучитьОценкуОбещанияПоНомеру(Данные.Оценка);		
	Иначе		
	    Строка = обк.Исполнители.Добавить();
		Строка.Оценка = ПолучитьОценкуОбещанияПоНомеру(Данные.Оценка);
		Строка.Заказчик = обк.Заказчик;
		Строка.Исполнитель = Исполнитель;
		Строка.ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	обк.Записать(РежимЗаписиДокумента.Проведение);
	обк.ДатаИсполнения = ТекущаяДата();
	
	Результат.Вставить("Ок", Истина);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////////////
//ПОДРАЗДЕЛЕНИЯ

#Область Подразделения
//СТАРТ
Функция ПолучитьДанныеДЛяИзмененияПодразделения(Данные)
	Результат = Новый Структура;
	ФизЛицо = ПолучитьФизЛицоПоГУИД(Данные.ФизЛицо);

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Результат.Вставить("Ошибка", "Физ лицо не найдено!");
		
		Возврат Результат;
	КонецЕсли;
	
	Данные.Вставить("Владелец", Справочники.Организации.НайтиПоКоду("000000006"));//Вкусвилл	
	Данные.Вставить("ФизЛицо", ФизЛицо);
		
	Сотрудник = ПолучитьДанныеСотрудника_1(Данные);
	
	Если Сотрудник.Количество() = 0 Тогда
		Результат.Вставить("Ошибка", "Сотрудник не найден");
		
		Возврат Результат;
	КонецЕсли;
	
	Данные.Вставить("КодПодразделения", Сотрудник.КодПодразделения);
	
	Результат.Вставить("Сотрудник",  Сотрудник);
	Результат.Вставить("Подразделения", ПолучитьСписокПодразделений(Данные));
	
	//ИдентифицироватьТекущееПодразделениеСотрудника(Результат);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСсылкуПоГУИД_Строка(Знач ГУИД, Менеджер)
	ГУИД = Новый УникальныйИдентификатор(ГУИД);	
	
	Ссылка = Менеджер.ПолучитьСсылку(ГУИД);	
		
	Возврат Ссылка;
КонецФункции

Функция ПолучитьФизЛицоПоГУИД(ГУИДСтрока)
	Попытка	
		Результат = ПолучитьСсылкуПоГУИД_Строка(ГУИДСтрока, Справочники.ФизическиеЛица);		
	Исключение
	    Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеСотрудника_1(Данные, ДанныеСсылки = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.ПодразделениеОрганизации.Наименование КАК Наименование,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации.Код КАК Код,
		|	СотрудникиОрганизаций.Наименование КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо.Наименование КАК Физлицо,
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Физлицо = &Физлицо
		|	И СотрудникиОрганизаций.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Данные.Владелец);
	Запрос.УстановитьПараметр("Физлицо", Данные.Физлицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить("НаименованиеПодразделения", ?(Выборка.Наименование = null, "", Выборка.Наименование));
		Результат.Вставить("КодПодразделения", ?(Выборка.Код = null,"", Выборка.Код));
		Результат.Вставить("Сотрудник", Выборка.Сотрудник);
		Результат.Вставить("ФизЛицо", Выборка.Физлицо);
		
		Если Не ДанныеСсылки = Неопределено Тогда		
			ДанныеСсылки.Вставить("Ссылка", Выборка.Ссылка);
			ДанныеСсылки.Вставить("ПодразделениеОрганизации", Выборка.ПодразделениеОрганизации);			
		КонецЕсли;		
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПолучитьСписокПодразделений(Данные) Экспорт 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		|	ПодразделенияОрганизаций.Код,
		|	ПодразделенияОрганизаций.Наименование КАК Наименование,
		|	ПодразделенияОрганизаций.Код = &КодПодразделения КАК ПодразделениеСотрудника
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И НЕ ПодразделенияОрганизаций.Наименование ПОДОБНО ""%[_]%""
		|	И ПодразделенияОрганизаций.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("КодПодразделения", Данные.КодПодразделения);
	Запрос.УстановитьПараметр("Владелец", Данные.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
		
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	е = 0;
	Пока Выборка.Следующий() Цикл
		Подразделение = Новый Структура;
		Подразделение.Вставить("Представление", Выборка.Наименование);
		
		Если Выборка.ПодразделениеСотрудника Тогда		
			Подразделение.Представление	= "" + Символ(10084) + Подразделение.Представление; 		
		КонецЕсли;
		
		Подразделение.Вставить("ПодразделениеСотрудника", Формат(Выборка.ПодразделениеСотрудника, "БЛ=0; БИ=1"));
		Подразделение.Вставить("Код", "" + Выборка.Код);
		Подразделение.Вставить("УИД", "" + Выборка.Ссылка.УникальныйИдентификатор());
		Подразделение.Вставить("ИД", е);
		
		е = е + 1;
		
		Результат.Добавить(Подразделение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

Функция ИзменитьПодразделение(Данные) Экспорт 
	Результат = Новый Структура;
	ФизЛицо = ПолучитьФизЛицоПоГУИД(Данные.ФизЛицо);

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Результат.Вставить("Ошибка", "Физ лицо не найдено!");
		
		Возврат Результат;
	КонецЕсли;
	
	Данные.Вставить("Владелец", Справочники.Организации.НайтиПоКоду("000000006"));//Вкусвилл	
	Данные.Вставить("ФизЛицо", ФизЛицо);
		
	ДанныеСсылки = Новый Структура;
	Сотрудник = ПолучитьДанныеСотрудника_1(Данные, ДанныеСсылки);
	
	Если Сотрудник.Количество() = 0 Тогда
		Результат.Вставить("Ошибка", "Сотрудник не найден");
		
		Возврат Результат;
	КонецЕсли;
	
	НовоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Данные.Код, Истина,,Данные.Владелец);
	обк = ДанныеСсылки.Ссылка.ПолучитьОбъект();
	обк.ПодразделениеОрганизации = НовоеПодразделение;
	
	Попытка
		обк.Записать();
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
		
		Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("Ок", Истина);
	
	Возврат Результат;
КонецФункции 

#КонецОбласти

#Область МзменитьЕмаил

Функция ИзменитьЕмаилФизЛица(Данные)
	Результат = Новый Структура;
	ФизЛицо = ПолучитьФизЛицоПоГУИД(Данные.ФизЛицо);

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Результат.Вставить("Ошибка", "Физ лицо не найдено!");
		
		Возврат Результат;
	КонецЕсли;
	
	Попытка	
		запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		запись.Объект = ФизЛицо;
		запись.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		запись.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;
		запись.Представление = Данные.Емаил;		
	    запись.Записать();
	Исключение
		Ошибка = ОписаниеОшибки();
		
		Результат.Вставить("Ошибка", Ошибка);
		
		Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("Результат", Истина);
	
	Возврат Результат;
КонецФункции

	
#КонецОбласти







