Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета
Перем ВсеДокументы Экспорт; // Таблица значений для хранения com объектов отсканированных документов
//Перем fillinAX Экспорт; // COM объект Fillin для запуска процедуры сравнения

//++ АК luza 
Перем ВсеДокументыXML Экспорт; // Таблица значений для хранения com объектов отсканированных документов


// Функция возвращает сведения о внешней обработке
// 
// Возвращаемое значение:
//  Структура заполненная параметрами 
//
Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Наименование", "Сканирование Fillin");
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Информация", "Сканирование Fillin");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Версия", "1.6");
	
	///////////// команды /////////////////////////
    тзКоманд = Новый ТаблицаЗначений;
    тзКоманд.Колонки.Добавить("Идентификатор",             Новый ОписаниеТипов("Строка"));
    тзКоманд.Колонки.Добавить("Представление",             Новый ОписаниеТипов("Строка"));
    тзКоманд.Колонки.Добавить("Модификатор",             Новый ОписаниеТипов("Строка"));
    тзКоманд.Колонки.Добавить("ПоказыватьОповещение",     Новый ОписаниеТипов("Булево"));
    тзКоманд.Колонки.Добавить("Использование",             Новый ОписаниеТипов("Строка"));
    
    строкаКоманды = тзКоманд.Добавить();
    строкаКоманды.Идентификатор         = "Идентификатор1"; 
    строкаКоманды.Представление         = "Сканирование Fillin";
    строкаКоманды.ПоказыватьОповещение     = Истина;
    строкаКоманды.Использование         = "ОткрытиеФормы";
    
    ПараметрыРегистрации.Вставить("Команды", тзКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

// Процедура загружает информацию из файла XML в табличные части словарей соответствий
//
// Параметры:
//  ПолноеИмя - строка, путь к открываемому файлу, если не указано, то считывает данные из базы 
//
Процедура ОткрытьФайлСловаряСоответствий(ПолноеИмя = Неопределено) Экспорт 
	//ФайлXML = Новый ЧтениеXML;
	//НужноУдалятьФайл = Ложь;
	//Попытка
	//	Если ПолноеИмя = Неопределено Тогда 
	//		// Получаем путь к истории
	//		WSH=Новый COMobject("wscript.shell"); 
	//		ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
	//		ПолноеИмя = ПутьКИстории+"\Dictionary.xml";
	//		СозданныйФайл = Неопределено;
	//		ХранилищеФайла = ЭтотОбъект.ОбработкаСловарьСоответствий.Ссылка;
	//		
	//		#Если ТолстыйКлиентОбычноеПриложение Тогда
	//			СозданныйФайл = ХранилищеФайла.ХранилищеВнешнейОбработки.Получить();
	//		#Иначе
	//			СозданныйФайл = ХранилищеФайла.ХранилищеОбработки.Получить();
	//		#КонецЕсли
	//		Если СозданныйФайл = Неопределено Тогда
	//			ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
	//			ТекстФайл.Записать(Неопределено);
	//			ТекстФайл.Закрыть();
	//			ЗаписьXML = Новый ЗаписьXML;
	//			ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//	    	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
	//			ЗаписьXML.ЗаписатьКонецЭлемента();
	//			ЗаписьXML.Закрыть();
	//		Иначе
	//			СозданныйФайл.Записать(ПолноеИмя);
	//		КонецЕсли;
	//		НужноУдалятьФайл = Истина;
	//	КонецЕсли;
	//	
	//	ФайлXML.ОткрытьФайл(ПолноеИмя);
	//	ФайлXML.Прочитать();
	//	ЭтотОбъект.СловарьСоответствийНоменклатуры.Очистить();
	//	ЭтотОбъект.СловарьСоответствийКонтрагентов.Очистить();
	//	ЭтотОбъект.СловарьСоответствийОрганизаций.Очистить();
	//    Пока ФайлXML.Прочитать() Цикл
	//		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//			Если ФайлXML.Имя = "ЭлементСловаряНоменклатуры" тогда
	//				НоваяСтрокаСловаряСоответствий = ЭтотОбъект.СловарьСоответствийНоменклатуры.Добавить();
	//				НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
	//				ГУИД = ФайлXML.ЗначениеАтрибута("Контрагент");
	//				УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	//				НоваяСтрокаСловаряСоответствий.Контрагент = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники.Контрагенты,УникальныйИдентификатор);
	//				ГУИД = ФайлXML.ЗначениеАтрибута("Номенклатура");
	//				УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	//				НоваяСтрокаСловаряСоответствий.Номенклатура = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники.Номенклатура,УникальныйИдентификатор);
	//			ИначеЕсли ФайлXML.Имя = "ЭлементСловаряОрганизаций" тогда
	//				НоваяСтрокаСловаряСоответствий = ЭтотОбъект.СловарьСоответствийОрганизаций.Добавить();
	//				НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
	//				ГУИД = ФайлXML.ЗначениеАтрибута("Организация");
	//				УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	//				НоваяСтрокаСловаряСоответствий.Организация = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники.Организации,УникальныйИдентификатор);
	//			ИначеЕсли ФайлXML.Имя = "ЭлементСловаряКонтрагентов" тогда
	//				НоваяСтрокаСловаряСоответствий = ЭтотОбъект.СловарьСоответствийКонтрагентов.Добавить();
	//				НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
	//				ГУИД = ФайлXML.ЗначениеАтрибута("Контрагент");
	//				УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	//				НоваяСтрокаСловаряСоответствий.Контрагент = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники.Контрагенты,УникальныйИдентификатор);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	ФайлXML.Закрыть();
	//	Если НужноУдалятьФайл Тогда 
	//		УдалитьФайлы(ПолноеИмя);
	//	КонецЕсли;
	//	ЭтотОбъект.ОшибкаЧтенияСловаряСоответствий = Ложь;
	//Исключение
	//	ЭтотОбъект.ОшибкаЧтенияСловаряСоответствий = Истина;
	//	ВызватьИсключение("Не удалось прочитать файл словаря соответствий");
	//КонецПопытки;
КонецПроцедуры

// Процедура сохраняет информацию в файла XML из табличных части словарей соответствий
//
// Параметры:
//  ПолноеИмя - строка, путь к сохраняемому файлу, если не заполнено, то сохраняет данные в саму базу данных 
//
Процедура СохранитьФайлСловаряСоответствий(ПолноеИмя = Неопределено) Экспорт 
	//Если ЭтотОбъект.ОшибкаЧтенияСловаряСоответствий Тогда
	//	ВызватьИсключение("Словарь соответствий прочитался не корректно, его запись в файл невозможна.");
	//	Возврат;
	//КонецЕсли;
	//ПеремещатьВХранилище = Ложь;
	//Если ПолноеИмя = Неопределено Тогда 
	//	ЗаписьXML = Новый ЗаписьXML;
	//	// Получаем путь к истории
	//	WSH=Новый COMobject("wscript.shell"); 
	//	ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
	//	ПолноеИмя = ПутьКИстории+"\Dictionary.xml";
	//	ПеремещатьВХранилище = Истина;
	//КонецЕсли;
	//Попытка
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//	ЗаписьXML.Закрыть();
	//Исключение
	//	ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
	//	ТекстФайл.Записать(Неопределено);
	//	ТекстФайл.Закрыть();
	//	ЗаписьXML = Новый ЗаписьXML;
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//    ЗаписьXML.ЗаписатьОбъявлениеXML();
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//	ЗаписьXML.Закрыть();
	//КонецПопытки;
	//Попытка
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//    ЗаписьXML.ЗаписатьОбъявлениеXML();
	//	//СловарьНоменклатуры
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьСоответствий");
	//	Для Каждого Строка из ЭтотОбъект.СловарьСоответствийНоменклатуры Цикл
	//		Если ЗначениеЗаполнено(Строка.Контрагент) и ЗначениеЗаполнено(Строка.Номенклатура) Тогда
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряНоменклатуры");
	//				ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
	//				ЗаписьXML.ЗаписатьАтрибут("Контрагент",Строка(Строка.Контрагент.УникальныйИдентификатор()));
	//				ЗаписьXML.ЗаписатьАтрибут("Номенклатура",Строка(Строка.Номенклатура.УникальныйИдентификатор()));
	//			ЗаписьXML.ЗаписатьКонецЭлемента();
	//		КонецЕсли;
	//	КонецЦикла;
	//	// СловарьОрганизаций
	//	Для Каждого Строка из ЭтотОбъект.СловарьСоответствийОрганизаций Цикл
	//		Если ЗначениеЗаполнено(Строка.Организация) Тогда
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряОрганизаций");
	//				ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
	//				ЗаписьXML.ЗаписатьАтрибут("Организация",Строка(Строка.Организация.УникальныйИдентификатор()));
	//			ЗаписьXML.ЗаписатьКонецЭлемента();
	//		КонецЕсли;
	//	КонецЦикла;
	//	// СловарьКонтрагентов
	//	Для Каждого Строка из ЭтотОбъект.СловарьСоответствийКонтрагентов Цикл
	//		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряКонтрагентов");
	//				ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
	//				ЗаписьXML.ЗаписатьАтрибут("Контрагент",Строка(Строка.Контрагент.УникальныйИдентификатор()));
	//			ЗаписьXML.ЗаписатьКонецЭлемента();
	//		КонецЕсли;
	//	КонецЦикла;
	//	// Закрываем
	//	Если Не ЗаписьXML=Null Тогда
	//		ЗаписьXML.ЗаписатьКонецЭлемента();
	//        ЗаписьXML.Закрыть();
	//	КонецЕсли;
	//	Если ПеремещатьВХранилище Тогда 
	//		// Перемещение файла в хранилище в базу
	//		Файлик = Новый Файл(ПолноеИмя);
	//		Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлик.ПолноеИмя));
	//		МоеХранилище = ЭтотОбъект.ОбработкаСловарьСоответствий.ПолучитьОбъект();
	//		#Если ТолстыйКлиентОбычноеПриложение Тогда
	//			МоеХранилище.ХранилищеВнешнейОбработки = Хранилище;
	//		#Иначе
	//			МоеХранилище.ХранилищеОбработки = Хранилище;
	//		#КонецЕсли
	//		МоеХранилище.Записать();
	//		УдалитьФайлы(ПолноеИмя);
	//	КонецЕсли;
	//Исключение
	//	ВызватьИсключение("Не удалось записать файл словаря соответствий");
	//КонецПопытки;
КонецПроцедуры

// Функция возвращает ссылку на документ из базы данных
//
// Параметры:
//  ТипДокумента			 - строка с названием документа 
//  УникальныйИдентификатор	 - уникальный идентификатор, из которого будет формироваться ссылка
// 
// Возвращаемое значение:
//  Ссылка на документ
//
Функция ПолучитьСсылкуПоТипуДокумента(ТипДокумента,УникальныйИдентификатор) Экспорт
	Если ТипДокумента = "Поступление товаров и услуг" Тогда
		СсылкаНаОбъектГуид = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УникальныйИдентификатор);
  		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   			Возврат СсылкаНаОбъектГуид;
		КонецЕсли;	
	ИначеЕсли ТипДокумента = "Реализация товаров и услуг" Тогда
		СсылкаНаОбъектГуид = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УникальныйИдентификатор);
  		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   			Возврат СсылкаНаОбъектГуид;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Счет-фактура выданный" Тогда
		СсылкаНаОбъектГуид = Документы.СчетФактураВыданный.ПолучитьСсылку(УникальныйИдентификатор);
  		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   			Возврат СсылкаНаОбъектГуид;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Счет-фактура полученный" Тогда
		СсылкаНаОбъектГуид = Документы.СчетФактураПолученный.ПолучитьСсылку(УникальныйИдентификатор);
  		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   			Возврат СсылкаНаОбъектГуид;
  		КонецЕсли;
	КонецЕсли;
	Для Каждого Менеджер Из Документы Цикл
  		СсылкаНаОбъектГуид = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
  		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   			Возврат СсылкаНаОбъектГуид;
  		КонецЕсли;
 	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция возвращает ссылку на объект базы данных
//
// Параметры:
//  Менеджер				 - менеджер объекта 
//  УникальныйИдентификатор	 - уникальный идентификатор, из которого будет формироваться ссылка
// 
// Возвращаемое значение:
//  Ссылка на объект базы данных 
//
Функция ПолучитьСсылкуПоМенеджеруОбъекта(Менеджер,УникальныйИдентификатор) Экспорт
  	СсылкаНаОбъектГуид = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
  	Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
   		Возврат СсылкаНаОбъектГуид;
  	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Функция позволяет найти организацию в базе данных
//
// Параметры:
//  Наименование - строка с искомым наименованием
//  ИНН			 - строка 
//  КПП			 - строка
// 
// Возвращаемое значение:
//  Ссылка на справочник Организации 
//
Функция НайтиОрганизацию(Наименование,ИНН,КПП = Неопределено) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|{ГДЕ
	|	(Организации.КПП = &КПП)}";
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Если (КПП <> "") И (КПП <> Неопределено) Тогда 
		Запрос.Параметры.Вставить("КПП", КПП);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Если КПП = Неопределено Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Строка", Наименование);
			ПоискСтрок = ЭтотОбъект.СловарьСоответствийОрганизаций.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				Возврат ПоискСтрок[0].Организация;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
	  		Возврат НайтиОрганизацию(Наименование,ИНН);
		КонецЕсли;
	Иначе
	  	Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

// Функция позволяет найти контрагента в базе данных
//
// Параметры:
//  Наименование - строка с искомым наименованием
//  ИНН			 - строка 
//  КПП			 - строка
// 
// Возвращаемое значение:
//  Ссылка на справочник Контрагенты 
//
Функция НайтиКонтрагента(Наименование,ИНН,КПП = Неопределено) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	(Контрагенты.КПП = &КПП) КАК Поле2}";
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Если (КПП <> "") И (КПП <> Неопределено) Тогда 
		Запрос.Параметры.Вставить("КПП", КПП);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
	  	Если КПП = Неопределено Тогда 
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Строка", Наименование);
			ПоискСтрок = ЭтотОбъект.СловарьСоответствийКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				Возврат ПоискСтрок[0].Контрагент;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
	  		Возврат НайтиКонтрагента(Наименование,ИНН);
		КонецЕсли;
	Иначе
	  	Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

// Функция возвращает значение поля из Com объекта
//
// Параметры:
//  Поля		 - Com объект 
//  ИскомоеИмя	 - строка с названием искомого поля 
// 
// Возвращаемое значение:
//  значение поля простого типа
//
Функция ВзятьЗначениеПоля(Поля, ИскомоеИмя) Экспорт 
	//++ АК luza
	Если ТипЗнч(Поля) = Тип("Структура") Тогда
		Возврат ПолучитьРеквизитПоКлючу(Поля, ИскомоеИмя);
	Иначе
	//-- АК luza	
		
		Для Счетчик = 0 To Поля.Count - 1 Цикл
			Поле = Поля.GetItem(Счетчик);
			Если (Поле.Name = ИскомоеИмя) Тогда
				Возврат СокрЛП(Поле.Value);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат "";
КонецФункции

// Функция возвращает Com объект с определенным наименованием
//
// Параметры:
//  Поля		 - Com объект 
//  ИскомоеИмя	 - строка с названием искомого поля 
// 
// Возвращаемое значение:
//  Com объект
//
Функция ПолучитьПоле(Поля, ИскомоеИмя) Экспорт 
	Для Счетчик = 0 To Поля.Count - 1 Цикл
		Поле = Поля.GetItem(Счетчик);
		Если (Поле.Name = ИскомоеИмя) Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Процедура обновляет индекс для полнотекстового поиска
//
Процедура ОбновитьПолнотекстовыйИндекс() Экспорт
	Если Не ПолнотекстовыйПоиск.ИндексАктуален() Тогда
		Попытка
			ПолнотекстовыйПоиск.ОбновитьИндекс(Истина, Ложь);
		Исключение
			ВызватьИсключение(("Упс! Ошибка при обновлении индекса!") + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Процедура считывает данные из подключения к Fillin
//
// Параметры:
//  fillinAX - COMОбъект 
//
Процедура Сканировать(fillinAX = Неопределено) Экспорт
	//Если fillinAX = Неопределено Тогда 
	//	всеХорошо = Истина;
	//	Попытка
	//		fillinAX = Новый COMОбъект("Eurekabpo.Fillin");
	//		fillinAX.Run();
	//	Исключение
	//		всеХорошо = Ложь;
	//		ош = ИнформацияОбОшибке();
	//		Сообщить(ош.ИсходнаяСтрока);
	//		Сообщить(ош.Описание);
	//		Сообщить("Причина:" + ош.Причина);
	//		
	//		ВызватьИсключение(ОписаниеОшибки());
	//		fillinAX = Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	//// Сюда мы попадаем, когда филлин уже закрыт
	//Если (всеХорошо) Тогда
	//	Если Сканирование.Количество() = 0 Тогда
	//		ЗагуженныеДокументы = fillinAX.LockedDocuments;
	//		Для Счетчик = 0 по fillinAX.LockedDocuments.Count-1 Цикл
	//			Документ = fillinAX.LockedDocuments.GetItem(Счетчик);
	//			ДанныеОЗаказчике = Новый Структура;
	//			ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
	//			ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
	//			ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
	//			ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
	//			ДанныеОПоставщике = Новый Структура;
	//			ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
	//			ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
	//			ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
	//			ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
	//			НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
	//			Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
	//			Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
	//			ЗанестиДанныеПоДокументу(Документ.DocumentType,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике);
	//			Строка = ЭтотОбъект.ВсеДокументы.Добавить();
	//			Строка.Документ = Документ;
	//			Строка.НомерВТЧСканирование =  Сканирование.Количество()-1;
	//		КонецЦикла;
	//	Иначе
	//		ЗагуженныеДокументы = fillinAX.Documents;
	//		Для Счетчик = 0 по fillinAX.Documents.Count-1 Цикл
	//			Документ = fillinAX.Documents.GetItem(Счетчик);
	//			ДанныеОЗаказчике = Новый Структура;
	//			ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
	//			ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
	//			ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
	//			ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
	//			ДанныеОПоставщике = Новый Структура;
	//			ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
	//			ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
	//			ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
	//			ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
	//			НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
	//			Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
	//			Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
	//			ЗанестиДанныеПоДокументу(Документ.DocumentType,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике);
	//			Строка = ВсеДокументы.Добавить();
	//			Строка.Документ = Документ;
	//			Строка.НомерВТЧСканирование = Сканирование.Количество()-1;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

// Заносит в таблицу все документы из первой таблицы документа
//
// Параметры:
//  DocumentType		 - строка с названием типа документа 
//  Статус				 - строка, значение 1 обозначает передаточный документ и СФ, остальные значения - только передаточный документ 
//  Дата				 - строка с датой документа
//  Номер				 - строка с номером документа 
//  ДанныеОЗаказчике	 - структура с данными о заказчике
//  ДанныеОПоставщике	 - структура с данными о поставщике
//
Процедура ЗанестиДанныеПоДокументу(DocumentType,Статус,Дата,Номер,ДанныеОЗаказчике,ДанныеОПоставщике, НоваяСтрока = Неопределено)Экспорт
	
	Если НоваяСтрока = Неопределено Тогда 
		НоваяСтрока = Сканирование.Добавить();
	КонецЕсли;
	
	НоваяСтрока.НомерДокумента = Номер;
	//СтрокаМесяц = Лев(Дата,2); 
	//СтрокаДень = Сред(Дата,4,2);
	//СтрокаГод = Прав(Дата,4);
	//Дата = СтрокаДень+"/"+СтрокаМесяц+"/"+СтрокаГод;
	//Если Дата <> "" Тогда 
	//	//НоваяСтрока.ДатаДокумента = Дата;//ПреобразоватьДату(Дата);
	//	Попытка
	//	НоваяСтрока.ДатаДокумента = ПреобразоватьДату(Дата);
	//    Исключение
	//	КонецПопытки
	//	//НоваяСтрока.ДатаДокумента = Дата(Дата);
	//КонецЕсли;
	Попытка
		Дата = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьДатуИзПроизвольнойСтроки(Дата);
	Исключение
		Дата = Дата(1,1,1);
	КонецПопытки;	
	НоваяСтрока.ДатаДокумента = Дата;
	
	Заказчик = ДанныеОЗаказчике.Заказчик;
	ЗаказчикИНН = ДанныеОЗаказчике.ЗаказчикИНН;
	ЗаказчикКПП = ДанныеОЗаказчике.ЗаказчикКПП;
	АдресЗаказчика = ДанныеОЗаказчике.АдресЗаказчика;
	
	Поставщик = ДанныеОПоставщике.Поставщик;
	ПоставщикИНН = ДанныеОПоставщике.ПоставщикИНН;
	ПоставщикКПП = ДанныеОПоставщике.ПоставщикКПП;
	АдресПоставщика = ДанныеОПоставщике.АдресПоставщика;
	
	Если ПоставщикИНН = "" Тогда 
		ПоставщикИНН = Неопределено;
	КонецЕсли;
	Если ЗаказчикИНН = "" Тогда 
		ЗаказчикИНН = Неопределено;
	КонецЕсли;
	
	Организация = НайтиОрганизацию(Заказчик,ЗаказчикИНН);
	// Если нашли заказчика в организациях - это поступление
	Если ЗначениеЗаполнено(Организация) Тогда
		// Заполнение данных по организации
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ОрганизацияСтрока = Строка(Организация);
		ОрганизацияИсходная = Заказчик;
		НоваяСтрока.ОрганизацияИНН = ЗаказчикИНН;
		НоваяСтрока.ОрганизацияКПП = ЗаказчикКПП;
		НоваяСтрока.АдресОрганизации = АдресЗаказчика;
		НоваяСтрока.ВидДокумента = "Поступление";
		// Заполнение данных по контрагенту
		Контрагент = НайтиКонтрагента(Поставщик,ПоставщикИНН,ПоставщикКПП);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
			КонтрагентИсходный = Поставщик;
			НоваяСтрока.КонтрагентИНН = ПоставщикИНН;
			НоваяСтрока.КонтрагентКПП = ПоставщикКПП;
			НоваяСтрока.АдресКонтрагента = АдресПоставщика;
		Иначе
			Если ЗначениеЗаполнено(КонтрагентПокупка) Тогда
				НоваяСтрока.Контрагент = КонтрагентПокупка;
				НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
				КонтрагентИсходный = Поставщик;
				НоваяСтрока.КонтрагентИНН = КонтрагентПокупка.ИНН;
				НоваяСтрока.КонтрагентКПП = КонтрагентПокупка.КПП;
			Иначе
				НоваяСтрока.Контрагент = Поставщик;
				НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
				КонтрагентИсходный = Поставщик;
				НоваяСтрока.КонтрагентИНН = ПоставщикИНН;
				НоваяСтрока.КонтрагентКПП = ПоставщикКПП;
				НоваяСтрока.АдресКонтрагента = АдресПоставщика;
			КонецЕсли;
		КонецЕсли;
	// Если не нашли заказчика в организациях - ищем там поставщика	
	Иначе
		Организация = НайтиОрганизацию(Поставщик,ПоставщикИНН,ПоставщикКПП);
		// Нашли поставщика в организациях - это реализация
		Если ЗначениеЗаполнено(Организация) Тогда
			// Заполнение данных по оранизации
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ОрганизацияСтрока = Строка(Организация);
			Если ЗначениеЗаполнено(Поставщик) Тогда 
				ОрганизацияИсходная = Поставщик;
			Иначе
				ОрганизацияИсходная = Организация;
			КонецЕсли;
			НоваяСтрока.ОрганизацияИНН = ПоставщикИНН;
			НоваяСтрока.ОрганизацияКПП = ПоставщикКПП;
			НоваяСтрока.АдресОрганизации = АдресПоставщика;
			НоваяСтрока.ВидДокумента = "Реализация";
			// Заполнение данных по контрагенту
			Контрагент = НайтиКонтрагента(Заказчик,ЗаказчикИНН,ЗаказчикКПП);
			Если ЗначениеЗаполнено(Контрагент) Тогда
				НоваяСтрока.Контрагент = Контрагент;
				НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
				КонтрагентИсходный = Заказчик;
				НоваяСтрока.КонтрагентИНН = ЗаказчикИНН;
				НоваяСтрока.КонтрагентКПП = ЗаказчикКПП;
				НоваяСтрока.АдресКонтрагента = АдресЗаказчика;
			Иначе
				Если ЗначениеЗаполнено(КонтрагентПокупка) Тогда
					НоваяСтрока.Контрагент = КонтрагентПродажа;
					НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
					КонтрагентИсходный = Заказчик;
					НоваяСтрока.КонтрагентИНН = КонтрагентПродажа.ИНН;
					НоваяСтрока.КонтрагентКПП = КонтрагентПродажа.КПП;
				Иначе
					НоваяСтрока.Контрагент = Заказчик;
					НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
					КонтрагентИсходный = Заказчик;
					НоваяСтрока.КонтрагентИНН = ЗаказчикИНН;
					НоваяСтрока.КонтрагентКПП = ЗаказчикКПП;
					НоваяСтрока.АдресКонтрагента = АдресЗаказчика;
				КонецЕсли;
			КонецЕсли;
		// Вариант когда не нашли в организациях и заказчика и поставщика заполняем строками
		Иначе
			Контрагент = НайтиКонтрагента(Заказчик,ЗаказчикИНН,ЗаказчикКПП);
			Если ЗначениеЗаполнено(Контрагент) Тогда
				// Заполнение данных по оранизации
				Если ЗначениеЗаполнено(ОрганизацияПродажа) Тогда
					НоваяСтрока.Организация = ОрганизацияПродажа;
					НоваяСтрока.ОрганизацияСтрока = Строка(НоваяСтрока.Организация);
					ОрганизацияИсходная = Поставщик;
					НоваяСтрока.ОрганизацияИНН = ОрганизацияПродажа.ИНН;
					НоваяСтрока.ОрганизацияКПП = ОрганизацияПродажа.КПП;
				Иначе
					НоваяСтрока.Организация = Поставщик;
					НоваяСтрока.ОрганизацияСтрока = Строка(НоваяСтрока.Организация);
					ОрганизацияИсходная = Поставщик;
					НоваяСтрока.ОрганизацияИНН = ПоставщикИНН;
					НоваяСтрока.ОрганизацияКПП = ПоставщикКПП;
					НоваяСтрока.АдресОрганизации = АдресПоставщика;
				КонецЕсли;
				НоваяСтрока.ВидДокумента = "Реализация";
				// Заполнение данных по контрагенту
				НоваяСтрока.Контрагент = Контрагент;
				НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
				КонтрагентИсходный = Заказчик;
				НоваяСтрока.КонтрагентИНН = ЗаказчикИНН;
				НоваяСтрока.КонтрагентКПП = ЗаказчикКПП;
				НоваяСтрока.АдресКонтрагента = АдресЗаказчика;
			Иначе
				//Заполнение данных по организации
				Если ЗначениеЗаполнено(ОрганизацияПокупка) Тогда
					НоваяСтрока.Организация = ОрганизацияПокупка;
					НоваяСтрока.ОрганизацияСтрока = Строка(НоваяСтрока.Организация);
					ОрганизацияИсходная = Заказчик;
					НоваяСтрока.ОрганизацияИНН = ОрганизацияПокупка.ИНН;
					НоваяСтрока.ОрганизацияКПП = ОрганизацияПокупка.КПП;
				Иначе
					НоваяСтрока.Организация = Заказчик;
					НоваяСтрока.ОрганизацияСтрока = Строка(НоваяСтрока.Организация);
					ОрганизацияИсходная = Заказчик;
					НоваяСтрока.ОрганизацияИНН = ЗаказчикИНН;
					НоваяСтрока.ОрганизацияКПП = ЗаказчикКПП;
					НоваяСтрока.АдресОрганизации = АдресЗаказчика;
				КонецЕсли;
				НоваяСтрока.ВидДокумента = "Поступление";
				// Заполнение данных по контрагенту
				Контрагент = НайтиКонтрагента(Поставщик,ПоставщикИНН,ПоставщикКПП);
				Если ЗначениеЗаполнено(Контрагент) Тогда
					НоваяСтрока.Контрагент = Контрагент;
					НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
					КонтрагентИсходный = Поставщик;
					НоваяСтрока.КонтрагентИНН = ПоставщикИНН;
					НоваяСтрока.КонтрагентКПП = ПоставщикКПП;
					НоваяСтрока.АдресКонтрагента = АдресПоставщика;
				Иначе
					Если ЗначениеЗаполнено(КонтрагентПокупка) Тогда
						НоваяСтрока.Контрагент = КонтрагентПокупка;
						НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
						КонтрагентИсходный = Поставщик;
						НоваяСтрока.КонтрагентИНН = КонтрагентПокупка.ИНН;
						НоваяСтрока.КонтрsагентКПП = КонтрагентПокупка.КПП;
					Иначе
						НоваяСтрока.Контрагент = Поставщик;
						НоваяСтрока.КонтрагентСтрока = НоваяСтрока.Контрагент;
						КонтрагентИсходный = Поставщик;
						НоваяСтрока.КонтрагентИНН = ПоставщикИНН;
						НоваяСтрока.КонтрагентКПП = ПоставщикКПП;
						НоваяСтрока.АдресКонтрагента = АдресПоставщика;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	НоваяСтрока.ОрганизацияИсходная = ОрганизацияИсходная;
	НоваяСтрока.КонтрагентИсходный = КонтрагентИсходный;
	НомерДокументаИсходный = Номер; //kalb - исходный номер документа
	ДатаДокументаИсходная = Дата;//kalb - исходная дата документа
	НоваяСтрока.НомерДокументаИсходный = НомерДокументаИсходный;
    НоваяСтрока.ДатаДокументаИсходная = ДатаДокументаИсходная;
	Если DocumentType = "Накладная_торг_12" ИЛИ DocumentType = "Накладная_торг-12_1С" Тогда 
		НоваяСтрока.ТипДокумента = "Накладная";
	ИначеЕсли DocumentType = "Счет_фактура" Тогда 
		НоваяСтрока.ТипДокумента = "Счет-фактура";
	ИначеЕсли DocumentType = "Универсальный передаточный документ" Тогда
		Если Статус = "1" Тогда 
			НоваяСтрока.ТипДокумента = "УПД (Передаточный документ и СФ)";
		Иначе
			НоваяСтрока.ТипДокумента = "УПД (Передаточный документ)";
		КонецЕсли;
	ИначеЕсли DocumentType = "Акт" Тогда 
		НоваяСтрока.ТипДокумента = "Акт";
	Иначе
		НоваяСтрока.ТипДокумента = "НеопределенныйТипДокумента";
	КонецЕсли;
	НоваяСтрока.Экспортировать = Истина;
КонецПроцедуры

// Функция преобразует строку в дату
//
// Параметры:
//  Дата - строка с датой
// 
// Возвращаемое значение:
//  Дата
//
Функция ПреобразоватьДату(Дата)
	Дата = СтрЗаменить(Дата,"/",",");
	Дата = СтрЗаменить(Дата,",",Символы.ПС);
	//Дата = СтрПолучитьСтроку(Дата,3);
	Дата = СтрПолучитьСтроку(Дата,3)+СтрПолучитьСтроку(Дата,1)+СтрПолучитьСтроку(Дата,2);
	Дата = СтрЗаменить(Дата," ","");
	Возврат Дата(Дата);
КонецФункции // ПреобразоватьДату()

// Заполнение вкладки значений по умолчанию
//
Процедура СформироватьЗначенияПоУмолчанию() Экспорт
	// Заполняем склады
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Склады.Ссылка
	//	|ИЗ
	//	|	Справочник.Склады КАК Склады
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Склады.Код";

	//РезультатЗапроса = Запрос.Выполнить();
	//Если не РезультатЗапроса.Пустой() Тогда
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	//ЭтотОбъект.СкладПокупка = ВыборкаДетальныеЗаписи.Ссылка;
	//	//ЭтотОбъект.СкладПродажа = ВыборкаДетальныеЗаписи.Ссылка;
	//КонецЕсли;

	////// Заполняем счета
	////#Если ТолстыйКлиентОбычноеПриложение Тогда
	////	Счета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Неопределено,Неопределено);
	////	СчетаУслуг = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Неопределено,Справочники.Номенклатура.НайтиПоНаименованию("Услуги",Истина));
	////#Иначе
	////	Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Неопределено,Справочники.Номенклатура.ПустаяСсылка());
	////	СчетаУслуг = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Неопределено,Справочники.Номенклатура.НайтиПоНаименованию("Услуги",Истина));
	////#КонецЕсли
	////
	////ЭтотОбъект.СчетУчетаПокупка = Счета.СчетУчета;
	////ЭтотОбъект.СчетЗатратБУПокупка = СчетаУслуг.СчетУчета;
	////ЭтотОбъект.СчетЗатратНУПокупка = СчетаУслуг.СчетУчета;
	////ЭтотОбъект.СчетУчетаНДСПокупка = Счета.СчетУчетаНДС;
	////ЭтотОбъект.СчетУчетаНДСУслугиПокупка = СчетаУслуг.СчетУчетаНДС;
	////ЭтотОбъект.СчетРасчетаСКонтрагентомПокупка = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	////ЭтотОбъект.СчетРасчетаПоАвансамПокупка = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	////
	////ЭтотОбъект.СчетУчетаПродажа = Счета.СчетУчета;
	////ЭтотОбъект.СчетДоходов = Счета.СчетДоходов;
	////ЭтотОбъект.СчетУчетаНДСПоРеализации = Счета.СчетУчетаНДСПродажи;
	////ЭтотОбъект.СчетРасходовПоУмолчанию = Счета.СчетРасходов;
	////ЭтотОбъект.СчетРасчетаСКонтрагентомПродажа = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	////ЭтотОбъект.СчетРасчетаПоАвансамПродажа = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	////ЭтотОбъект.ТекущаяДатаПроведенияДокументаПокупки = Истина;
	////ЭтотОбъект.ТекущаяДатаПроведенияДокументаПродажи = Истина;
КонецПроцедуры

// Процедура загружает информацию в файл XML из табличные части истории
//
// Параметры:
//  ПолноеИмя - строка, путь к сохраняемому файлу, если не указано, то записывает данные в базы данных 
//
Процедура ЗаписатьИсториюВФайл(ПолноеИмя = Неопределено) Экспорт 
	//Если ЭтотОбъект.ОшибкаЧтенияИстории Тогда
	//	ВызватьИсключение("Файл истории прочитался не корректно, его запись в файл невозможна.");
	//	Возврат;
	//КонецЕсли;
	//ПеремещатьВХранилище = Ложь;
	//Если ПолноеИмя = Неопределено Тогда
	//	ЗаписьXML = Новый ЗаписьXML;
	//	// Получаем путь к истории
	//	WSH=Новый COMobject("wscript.shell"); 
	//	ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
	//	ПолноеИмя = ПутьКИстории+"\History.xml";
	//	ПеремещатьВХранилище = Истина;
	//КонецЕсли;
	//Попытка
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//	ЗаписьXML.Закрыть();
	//Исключение
	//	ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
	//	ТекстФайл.Записать(Неопределено);
	//	ТекстФайл.Закрыть();
	//	ЗаписьXML = Новый ЗаписьXML;
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//    ЗаписьXML.ЗаписатьОбъявлениеXML();
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//	ЗаписьXML.Закрыть();
	//КонецПопытки;
	//Попытка
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//    ЗаписьXML.ЗаписатьОбъявлениеXML();
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("История");
	//	Для Каждого Строка из ЭтотОбъект.История Цикл
	//		ЗаписьXML.ЗаписатьНачалоЭлемента("СтрокаИстории");
	//			ЗаписьXML.ЗаписатьАтрибут("ДатаЗанесения",Строка(Строка.Дата));
	//			ЗаписьXML.ЗаписатьАтрибут("ТипДокумента",Строка(ТипЗнч(Строка.Ссылка)));
	//			ЗаписьXML.ЗаписатьАтрибут("УникальныйИдентификатор",Строка(Строка.Ссылка.УникальныйИдентификатор()));
	//		ЗаписьXML.ЗаписатьКонецЭлемента();
	//	КонецЦикла;
	//	Если Не ЗаписьXML=Null Тогда
	//		ЗаписьXML.ЗаписатьКонецЭлемента();
	//        ЗаписьXML.Закрыть();
	//	КонецЕсли;
	//	// Перемещение файла в хранилище в базу
	//	Если ПеремещатьВХранилище Тогда
	//		Файлик = Новый Файл(ПолноеИмя);
	//		Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлик.ПолноеИмя));
	//		МоеХранилище = ЭтотОбъект.ОбработкаИстории.ПолучитьОбъект();
	//		#Если ТолстыйКлиентОбычноеПриложение Тогда
	//			МоеХранилище.ХранилищеВнешнейОбработки = Хранилище;
	//		#Иначе
	//			МоеХранилище.ХранилищеОбработки = Хранилище;
	//		#КонецЕсли
	//		МоеХранилище.Записать();
	//		УдалитьФайлы(ПолноеИмя);
	//	КонецЕсли;
	//Исключение
	//	ВызватьИсключение("Не удалось записать файл истории");
	//КонецПопытки;
КонецПроцедуры

// Процедура загружает информацию из файла XML в табличную часть истории
//
// Параметры:
//  ПолноеИмя - строка, путь к открываемому файлу, если не указано, то считывает данные из базы 
//
Процедура ПрочитатьИсториюИзФайла(ПолноеИмя = Неопределено) Экспорт 
	//ФайлXML = Новый ЧтениеXML;
	//НужноУдалятьФайл = Ложь;
	//Попытка
	//	Если ПолноеИмя = Неопределено Тогда
	//	    // Получаем путь к истории
	//		WSH = Новый COMobject("wscript.shell"); 
	//		ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
	//		ПолноеИмя = ПутьКИстории+"\History.xml";
	//		
	//		СозданныйФайл = Неопределено;
	//		ХранилищеФайла = ЭтотОбъект.ОбработкаИстории.Ссылка;
	//		#Если ТолстыйКлиентОбычноеПриложение Тогда
	//			СозданныйФайл = ХранилищеФайла.ХранилищеВнешнейОбработки.Получить();
	//		#Иначе
	//			СозданныйФайл = ХранилищеФайла.ХранилищеОбработки.Получить();
	//		#КонецЕсли
	//		Если СозданныйФайл = Неопределено Тогда
	//			ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
	//			ТекстФайл.Записать(Неопределено);
	//			ТекстФайл.Закрыть();
	//			ЗаписьXML = Новый ЗаписьXML;
	//			ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	//	    	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
	//			ЗаписьXML.ЗаписатьКонецЭлемента();
	//			ЗаписьXML.Закрыть();
	//		Иначе
	//			СозданныйФайл.Записать(ПолноеИмя);
	//		КонецЕсли;
	//		НужноУдалятьФайл = Истина;
	//	КонецЕсли;
	//	
	//	ФайлXML.ОткрытьФайл(ПолноеИмя);
	//	ФайлXML.Прочитать();
	//	ЭтотОбъект.История.Очистить();
	//    Пока ФайлXML.Прочитать() Цикл
	//		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//			Если ФайлXML.Имя = "СтрокаИстории" тогда
	//				ДатаЗанесения = ФайлXML.ЗначениеАтрибута("ДатаЗанесения"); 
	//				ГУИД = ФайлXML.ЗначениеАтрибута("УникальныйИдентификатор");
	//				ТипДокумента = ФайлXML.ЗначениеАтрибута("ТипДокумента");
	//				УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	//				НужныйДокумент = ПолучитьСсылкуПоТипуДокумента(ТипДокумента,УникальныйИдентификатор);
	//				Если НужныйДокумент<>Неопределено Тогда 
	//					НоваяСтрокаИстории = ЭтотОбъект.История.Добавить();
	//					НоваяСтрокаИстории.Дата = ДатаЗанесения;
	//					НоваяСтрокаИстории.Ссылка = НужныйДокумент;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	ФайлXML.Закрыть();
	//	Если НужноУдалятьФайл Тогда 
	//		УдалитьФайлы(ПолноеИмя);
	//	КонецЕсли;
	//	ЭтотОбъект.ОшибкаЧтенияИстории = Ложь;
	//Исключение
	//	ЭтотОбъект.ОшибкаЧтенияИстории = Истина;
	//	ВызватьИсключение("Не удалось прочитать файл истории");
	//КонецПопытки;
КонецПроцедуры

// Процедура заполняет для всей табличной части Сканирование флаг экспортировать
//
// Параметры:
//  Экспортировать	 -  Булево, значение флага  
//
Процедура Экспортировать(Экспортировать) Экспорт  
	Для Каждого СтрокаСканирования из Сканирование Цикл
		СтрокаСканирования.Экспортировать = Экспортировать;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает адрес из контактной информации
//
// Параметры:
//  Объект			 - СправочникСсылка.КонтактныеЛица, СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты, СправочникСсылка.Пользователи, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица
//  ВидИнформации	 - Строка, СправочникСсылка.ВидыКонтактнойИнформации
// 
// Возвращаемое значение:
//  Строка с адресом
//
Функция ПолучитьАдресИзБазы(Объект,ВидИнформации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";

	Запрос.УстановитьПараметр("Вид", ВидИнформации);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	Возврат "";
КонецФункции

// Функция преобразует строку в число
//
// Параметры:
//  стрЧисло - строка для преобразования 
// 
// Возвращаемое значение:
//  Число 
//
Функция ПарсингЧисла(стрЧисло) Экспорт 
	стрБезБукв = СтрокаТолькоИзЦифр(стрЧисло);
	стрСРазделителем = СтрЗаменить(СтрЗаменить(СтрЗаменить(стрБезБукв,",","."), "-","."),"'","");
	стрСРазделителем = СтрЗаменить(стрСРазделителем, Символы.НПП, "");
	стрСРазделителем = СтрЗаменить(стрСРазделителем, Символы.Таб, "");
	Если ЗначениеЗаполнено(стрСРазделителем) Тогда
		Попытка
			Возврат Число(стрСРазделителем);
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
КонецФункции

// Функция преобразует ошибочно распознанные буквы в числах
//
// Параметры:
//  строка	 - Строка
// 
// Возвращаемое значение:
//  Строка, состоящая из цифр
//
Функция СтрокаТолькоИзЦифр(строка)
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(строка, "О", "0"), "о","0"), "В", "8"), "O", "0"), "o","0"), " ","");	
КонецФункции

// Функция получает значени из таблицы COM объекта
//
// Параметры:
//  ЗаписиТабличнойЧасти - таблица COM объекта
//  СтрокаТЧ			 - числовое значение номера строки 
//  ИмяКолонки			 - строковое имя колонки для получения значения 
// 
// Возвращаемое значение:
//  Строка или число 
//
Функция ВзятьЗначениИзТаблицыПоИмени(ЗаписиТабличнойЧасти, СтрокаТЧ, ИмяКолонки) Экспорт
	Если ТипЗнч(СтрокаТЧ) = Тип("СтрокаТаблицыЗначений") И ТипЗнч(ЗаписиТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
		Если ЗаписиТабличнойЧасти.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда			
			Возврат СтрокаТЧ[ИмяКолонки];
		КонецЕсли;
	Иначе
		
		Если ЗаписиТабличнойЧасти.Records.Count > СтрокаТЧ Тогда
			Результат = ЗаписиТабличнойЧасти.GetCell(СтрокаТЧ, ИмяКолонки);
			Если ЗначениеЗаполнено(Результат) Тогда 
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

// Функция преобразует ставку НДС в перечисление
//
// Параметры:
//  СтрСтавка	 - преобразуемая строка
// 
// Возвращаемое значение:
//  Перечисление СтавкиНДС 
//
Функция ПарсингСтавкиНДС(СтрСтавка) Экспорт
	СтрСтавка = СтрЗаменить(СтрСтавка," ","");
	Если Найти(СтрСтавка,"18") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(СтрСтавка,"20") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Найти(СтрСтавка,"10") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС10;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
КонецФункции

// Функция преобразует перечисление СтавкиНДС в число
//
// Параметры:
//  стрСтавкаНДС - Перечисление СтавкиНДС 
// 
// Возвращаемое значение:
//  Число 
//
Функция СтавкаНДСВЧисло(стрСтавкаНДС) Экспорт
	Если Перечисления.СтавкиНДС.НДС18 = стрСтавкаНДС Тогда
		Возврат 18;
	ИначеЕсли Перечисления.СтавкиНДС.НДС20 = стрСтавкаНДС Тогда
		Возврат 20;
	ИначеЕсли Перечисления.СтавкиНДС.НДС10 = стрСтавкаНДС Тогда
		Возврат 10;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Функция осуществляет поиск номенклатуры в номенклатуре поставщиков, или просто в номенклатуре для БП 2.0
//
// Параметры:
//  Контрагент		 - Ссылка на элемент справочника контрагенты
//  Наименование	 - Строка 
//  ЕдиницаИзмерения - Единица измерения
// 
// Возвращаемое значение:
//  Ссылка на справочник Номенклатура 
//
Функция ПоискНоменклатурыПоставщика(Контрагент, Наименование,ЕдиницаИзмерения) Экспорт
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
		НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		НужныйКонтрагент = Контрагент;
	КонецЕсли;
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("Строка")или не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
		ЕдиницаИзмеренияЗапрос = Неопределено;
	Иначе
		ЕдиницаИзмеренияЗапрос = ЕдиницаИзмерения;
	КонецЕсли;
	ПодходящаяНоменклатура = Неопределено;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(НужныйКонтрагент) Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатураПоставщиков.Номенклатура
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Контрагент
			|	И (НоменклатураПоставщиков.Наименование = &Наименование
			|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда		
			Запрос.Текст = Запрос.Текст+" И НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", НужныйКонтрагент);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодходящаяНоменклатура = Выборка.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодходящаяНоменклатура = Неопределено Тогда
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//|	СловарьСоответствийНоменклатуры.Номенклатура
		//|ИЗ
		//|	РегистрСведений.СловарьСоответствийНоменклатуры КАК СловарьСоответствийНоменклатуры
		//|ГДЕ
		//|	СловарьСоответствийНоменклатуры.СтрокаПоиска = &СтрокаПоиска";
		//
		//Запрос.УстановитьПараметр("СтрокаПоиска", Наименование); 
		//Выборка = Запрос.Выполнить().Выбрать();
		//Если Выборка.Количество() > 0 Тогда
		//	Выборка.Следующий();
		//	ПодходящаяНоменклатура = Выборка.Номенклатура;
		//КонецЕсли;
		
		
		НоменклатураНаименование = Наименование;
		НоменклатураНаименование = нрег(НоменклатураНаименование);
		НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		Фильтр = Новый Структура("Строка", НоменклатураНаименование);
		
		НайденныеСтроки = СловарьСоответствийНоменклатуры.НайтиСтроки(Фильтр); 
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПодходящаяНоменклатура = НайденныеСтроки[0].Номенклатура;
		КонецЕсли;		
		
	КонецЕсли;	
		
		//ПараметрыОтбора = Новый Структура;
		//ПараметрыОтбора.Вставить("Строка", Наименование);
		//Если ЗначениеЗаполнено(Контрагент) Тогда
		//	ПараметрыОтбора.Вставить("Контрагент", НужныйКонтрагент);
		//КонецЕсли;
		//ПоискСтрок = СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		//Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда
		//	Для Каждого Строка из ПоискСтрок Цикл
		//		Если Строка.Номенклатура = Неопределено Тогда 
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		//Если ПоискСтрок.Количество() = 1 Тогда 
		//	ПодходящаяНоменклатура = ПоискСтрок[0].Номенклатура;
		//ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
		//	ПараметрыОтбора = Новый Структура;
		//	ПараметрыОтбора.Вставить("Строка", Наименование);
		//	ПоискСтрок = СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		//	Если ПоискСтрок.Количество() = 1 Тогда 
		//		ПодходящаяНоменклатура = ПоискСтрок[0].Номенклатура;
		//	КонецЕсли;
		//КонецЕсли;
	//КонецЕсли;
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		              |	Номенклатура.Ссылка
		              |ИЗ
		              |	Справочник.Номенклатура КАК Номенклатура
		              |ГДЕ
		              |	Номенклатура.Наименование = &Номенклатура";
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда 
			Запрос.Текст = Запрос.Текст+" И Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
	    Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		              |	Номенклатура.Ссылка
		              |ИЗ
		              |	Справочник.Номенклатура КАК Номенклатура
		              |ГДЕ
		              |	Номенклатура.Наименование = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
	    Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		Иначе
			ПодходящаяНоменклатура = Наименование
		КонецЕсли;
	КонецЕсли;
	Возврат ПодходящаяНоменклатура;
КонецФункции // ПоискНоменклатурыПоставщика()

// Функция осуществляет поиск номенклатуры в номенклатуре поставщиков, или просто в номенклатуре для БП 3.0
//
// Параметры:
//  Контрагент		 - Ссылка на элемент справочника контрагенты
//  Наименование	 - Строка 
//  ЕдиницаИзмерения - Единица измерения
// 
// Возвращаемое значение:
//  Ссылка на справочник Номенклатура 
//
Функция ПоискНоменклатурыПоставщика30(Контрагент,Наименование,ЕдиницаИзмерения) Экспорт
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
		НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		НужныйКонтрагент = Контрагент;
	КонецЕсли;
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("Строка")или не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
		ЕдиницаИзмеренияЗапрос = Неопределено;
	Иначе
		ЕдиницаИзмеренияЗапрос = ЕдиницаИзмерения;
	КонецЕсли;
	ПодходящаяНоменклатура = Неопределено;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(НужныйКонтрагент) Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатураПоставщиков.Номенклатура
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Контрагент
			|	И (НоменклатураПоставщиков.Наименование = &Наименование
			|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда		
			Запрос.Текст = Запрос.Текст+" И НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", НужныйКонтрагент);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодходящаяНоменклатура = Выборка.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	Если ПодходящаяНоменклатура = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Строка", Наименование);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", НужныйКонтрагент);
		КонецЕсли;
		ПоискСтрок = СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда
			Для Каждого Строка из ПоискСтрок Цикл
				Если Строка.Номенклатура = Неопределено Тогда 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПоискСтрок.Количество() = 1 Тогда 
			ПодходящаяНоменклатура = ПоискСтрок[0].Номенклатура;
		ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Строка", Наименование);
			ПоискСтрок = СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				ПодходящаяНоменклатура = ПоискСтрок[0].Номенклатура;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		              |	Номенклатура.Ссылка
		              |ИЗ
		              |	Справочник.Номенклатура КАК Номенклатура
		              |ГДЕ
		              |	Номенклатура.Наименование = &Номенклатура";
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда 
			Запрос.Текст = Запрос.Текст+" И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
	    Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		              |	Номенклатура.Ссылка
		              |ИЗ
		              |	Справочник.Номенклатура КАК Номенклатура
		              |ГДЕ
		              |	Номенклатура.Наименование = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
	    Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		Иначе
			ПодходящаяНоменклатура = Наименование
		КонецЕсли;
	КонецЕсли;
	Возврат ПодходящаяНоменклатура;
КонецФункции // ПоискНоменклатурыПоставщика30()



//++ АК luza ИП-00017231
Процедура ПрочитатьXMLФайлыОтФилина() Экспорт
	// Сюда мы попадаем, когда филлин уже закрыт
	Каталог = ЭтотОбъект.ПутьКВыходнойПапке;
	
	НайденныеФайлы = НайтиФайлы(Каталог, "*.xml");
	
	//ВсеДокументыXML = Новый ТаблицаЗначений;
	//ВсеДокументыXML.Колонки.Вставить(0, "Документ",,"Документ",0);
	//ВсеДокументыXML.Колонки.Добавить("НомерВТЧСканирование");
	а = 0;
	
	Для каждого Файл Из НайденныеФайлы Цикл
		Документ = ПолучитьСтруктуруXML(Файл);
		
		
		Строка = ВсеДокументыXML.Добавить();
		Строка.Документ = Документ;
		Строка.НомерВТЧСканирование = а;
		а = а + 1;

	КонецЦикла;	
	

	Для Счетчик = 0 по ВсеДокументыXML.Количество() - 1 Цикл
		Документ = ВсеДокументыXML.Получить(Счетчик).Документ;
		//ДанныеОЗаказчике = Новый Структура;
		//ДанныеОЗаказчике.Вставить("Заказчик", ПолучитьРеквизитПоКлючу(Документ, "Заказчик"));
		//ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ПолучитьРеквизитПоКлючу(Документ, "ИННЗаказчика"));
		//ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ПолучитьРеквизитПоКлючу(Документ, "КППЗаказчика"));
		//ДанныеОЗаказчике.Вставить("АдресЗаказчика", ПолучитьРеквизитПоКлючу(Документ, "АдресЗаказчика"));
		//ДанныеОПоставщике = Новый Структура;
		//ДанныеОПоставщике.Вставить("Поставщик", ПолучитьРеквизитПоКлючу(Документ, "Поставщик"));
		//ДанныеОПоставщике.Вставить("ПоставщикИНН", ПолучитьРеквизитПоКлючу(Документ, "ИННПоставщика"));
		//ДанныеОПоставщике.Вставить("ПоставщикКПП", ПолучитьРеквизитПоКлючу(Документ, "КПППоставщика"));
		//ДанныеОПоставщике.Вставить("АдресПоставщика", ПолучитьРеквизитПоКлючу(Документ, "АдресПоставщика"));
		//НомерДокумента = ПолучитьРеквизитПоКлючу(Документ, "Номер");
		//Дата = ПолучитьРеквизитПоКлючу(Документ, "Дата");
		//Статус = ПолучитьРеквизитПоКлючу(Документ, "Статус");
		
		ДанныеОЗаказчике = Новый Структура;
		ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
		ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
		ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
		ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
		ДанныеОПоставщике = Новый Структура;
		ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
		ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
		ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
		ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
		НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
		Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
		Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
		ЗанестиДанныеПоДокументу(Документ.Document_Type,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике);
		Строка = ЭтотОбъект.ВсеДокументы.Добавить();
		Строка.Документ = Документ;
		Строка.НомерВТЧСканирование =  Сканирование.Количество()-1;
	
		
		Строка = ЭтотОбъект.ВсеДокументы.Добавить();
		Строка.Документ = Документ;
		Строка.НомерВТЧСканирование =  Счетчик;

	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтруктуруXML(Файл) Экспорт	
	Документ = Новый Структура;	
	Fields = Новый Структура;  
	Tables = Новый ТаблицаЗначений;
	Если Файл.Существует() Тогда
		ДеревоЗначенией = ПрочитатьXMLВДеревоЗначений(Файл);		
		ОбработатьКоллекциюСтрокДерева(ДеревоЗначенией, Fields, Tables, Документ);		
	КонецЕсли;
		
	Документ.Вставить("Fields", Fields); 
	Документ.Вставить("Tables", Tables); 
	
	Возврат Документ;	
КонецФункции

Функция ПолучитьСтруктуруXMLВерификации(Файл) Экспорт	
	Документ = Новый Структура;	
	Fields = Новый Структура;  
	Tables = Новый Массив;
	
	Table = Новый ТаблицаЗначений;
	Если Файл.Существует() Тогда
		ДеревоЗначенией = ПрочитатьXMLВДеревоЗначений(Файл);		
		ОбработатьКоллекциюСтрокДереваВерификации(ДеревоЗначенией, Fields, Tables, Table, Документ);		
	КонецЕсли;
		
	Документ.Вставить("Fields", Fields); 
	Документ.Вставить("Tables", Tables); 
	
	Возврат Документ;	
КонецФункции

Процедура ОбработатьКоллекциюСтрокДерева(КолСтрок, Fields, Tables, Документ, НСтрока = Неопределено)
	
	СписокДопустимыхИменКолонок = Новый СписокЗначений;
	СписокДопустимыхИменКолонок.Добавить("description");
	СписокДопустимыхИменКолонок.Добавить("quantity");
	СписокДопустимыхИменКолонок.Добавить("price");
	СписокДопустимыхИменКолонок.Добавить("cost");
	СписокДопустимыхИменКолонок.Добавить("stavka");
	СписокДопустимыхИменКолонок.Добавить("nalogsum");
	СписокДопустимыхИменКолонок.Добавить("sumnds");
	СписокДопустимыхИменКолонок.Добавить("ed");
	
	
	Для каждого Строка Из КолСтрок.Строки Цикл
		Если Строка.Элемент = "exportDocument" Тогда
			//Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			
			Документ.Вставить("document_type", Строка.Атрибуты.Получить("document-type"));
			Документ.Вставить("file_name", Строка.Name);
			
			//ИмяФайла = Строка.Аттрибуты.Получить("name1");					
			//
			//Документ.Вставить("file_name", ИмяФайла);
		ИначеЕсли Строка.Элемент = "field" Тогда
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "“", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "?", "_");
			Строка.Name = СтрЗаменить(Строка.Name, """", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "!", "_");
			
			
			СтрокаЧисел = "1234567890";
			Если Найти(СтрокаЧисел, Лев(Строка.Name, 1)) > 0 Тогда
				Строка.Name = "_" + Строка.Name;
			КонецЕсли;


			Fields.Вставить(Строка.Name, Строка.Value);
		ИначеЕсли Строка.Элемент = "tables" Тогда	
			Tables = Новый ТаблицаЗначений;
		ИначеЕсли Строка.Элемент = "row" Тогда				
			НСтрока = Tables.Добавить(); 
		ИначеЕсли Строка.Элемент = "cell" Тогда	                      
			
			Если ЗначениеЗаполнено(Строка.Name) = Истина Тогда
				Если СписокДопустимыхИменКолонок.НайтиПоЗначению(Строка.Name) <> Неопределено Тогда				
					
					Если Tables.Колонки.Найти(Строка.Name) = Неопределено Тогда
						Tables.Колонки.Добавить(Строка.Name);
					КонецЕсли;	
					
					НСтрока[Строка.Name] = Строка.Value;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		ОбработатьКоллекциюСтрокДерева(Строка, Fields, Tables, Документ, НСтрока);
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработатьКоллекциюСтрокДереваВерификации(КолСтрок, Fields, Tables, Table, Документ, НСтрока = Неопределено)
	
	Для каждого Строка Из КолСтрок.Строки Цикл
		Если Строка.Элемент = "exportDocument" Тогда
			//Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			//Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			
			Документ.Вставить("document_type", Строка.Атрибуты.Получить("document-type"));
			Документ.Вставить("file_name", Строка.Name);
			
			//ИмяФайла = Строка.Аттрибуты.Получить("name1");					
			//
			//Документ.Вставить("file_name", ИмяФайла);
		ИначеЕсли Строка.Элемент = "field" Тогда
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			
			value_type = Строка.Атрибуты.Получить("value_type");
			Если ЗначениеЗаполнено(value_type) = Ложь Тогда 
				value_type = "Строка";	
			КонецЕсли;
			
			Значение = ПривестиЗначениеПоТипу(value_type, Строка.Value);

			Fields.Вставить(Строка.Name, Значение);
		ИначеЕсли Строка.Элемент = "tables" Тогда	
			//Tables = Новый ТаблицаЗначений;
		ИначеЕсли Строка.Элемент = "table" Тогда	
			Table = Новый ТаблицаЗначений;	
			Tables.Добавить(Table);
			
			Table = Tables.Получить(Tables.Количество() - 1);
			
			
		ИначеЕсли Строка.Элемент = "row" Тогда				
			НСтрока = Table.Добавить(); 
		ИначеЕсли Строка.Элемент = "cell" Тогда				
			Строка.Name = СтрЗаменить(Строка.Name, "-", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ".", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ",", "_");
			Строка.Name = СтрЗаменить(Строка.Name, " ", "");
			Строка.Name = СтрЗаменить(Строка.Name, "№", "НС");
			Строка.Name = СтрЗаменить(Строка.Name, ":", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ";", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "`", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "'", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "(", "_");
			Строка.Name = СтрЗаменить(Строка.Name, ")", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "“", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "?", "_");
			Строка.Name = СтрЗаменить(Строка.Name, """", "_");
			Строка.Name = СтрЗаменить(Строка.Name, "!", "_");
			
			
			СтрокаЧисел = "1234567890";
			Если Найти(СтрокаЧисел, Лев(Строка.Name, 1)) > 0 Тогда
				Строка.Name = "_" + Строка.Name;
			КонецЕсли;	
			
			value_type = Строка.Атрибуты.Получить("value_type");
			Если ЗначениеЗаполнено(value_type) = Ложь Тогда 
				value_type = "Строка";	
			КонецЕсли;	
						
			Если ЗначениеЗаполнено(Строка.Name) = Истина Тогда
				Если Table.Колонки.Найти(Строка.Name) = Неопределено Тогда
					Table.Колонки.Добавить(Строка.Name);
				КонецЕсли;	
				
				НСтрока[Строка.Name] = ПривестиЗначениеПоТипу(value_type, Строка.Value);
			КонецЕсли;
		КонецЕсли;	
		ОбработатьКоллекциюСтрокДереваВерификации(Строка, Fields, Tables, Table, Документ, НСтрока);
	КонецЦикла;
КонецПроцедуры

Функция ПривестиЗначениеПоТипу(ТипПриемника, Значение)
	
	вЗначение = Неопределено;
	Если Значение = Неопределено Тогда
		Возврат вЗначение;
	КонецЕсли;  	
	
	Если ТипПриемника = "Строка"  Тогда		
		вЗначение = СокрЛП(Значение); 		
	ИначеЕсли ТипПриемника = "Число"  Тогда		
		вЗначение = Число(Значение);		
	ИначеЕсли ТипПриемника = "Булево"  Тогда 		
		вЗначение = Булево(Значение);   		
	ИначеЕсли ТипПриемника = "Дата"  Тогда 		
		Значение = СтрЗаменить(Значение, ":", "");
		Значение = СтрЗаменить(Значение, "-", "");
		Значение = СтрЗаменить(Значение, "T", "");
		вЗначение = Дата(Значение);    		
	Иначе	 	
		Если ТипПриемника = "Склады (места хранения)" Тогда
			ТипПриемника = "Склады";
		ИначеЕсли ТипПриемника = "Классификатор единиц измерения" Тогда
			ТипПриемника = "КлассификаторЕдиницИзмерения"; 
		КонецЕсли;
		
		Если Метаданные.Справочники.Найти(ТипПриемника) <> Неопределено Тогда 
			вЗначение = Справочники[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		ИначеЕсли ТипПриемника = "Ставки НДС" Тогда			
			вЗначение = Перечисления.СтавкиНДС[Значение];
		КонецЕсли; 		
	КонецЕсли;
	
	Возврат вЗначение;
КонецФункции	

Функция ПрочитатьXMLВДеревоЗначений(Файл)	
	ДЗ = Парсинг(Файл);
	Возврат ДЗ;	
КонецФункции

Функция Парсинг(Файл) 
	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(Файл.ПолноеИмя);  
	ДеревоЗначений = Новый ДеревоЗначений();
	Попытка 
		Чтение.Прочитать();
	Исключение
		//Предупреждение("Документ XML поврежден");
		Возврат ДеревоЗначений;
	КонецПопытки;
	ДеревоЗначений.Колонки.Добавить("Элемент");
	ДеревоЗначений.Колонки.Добавить("Value");
	ДеревоЗначений.Колонки.Добавить("Атрибуты");
	ДеревоЗначений.Колонки.Добавить("Name");
		
	Корень         = ДеревоЗначений.Строки.Добавить();
	Корень.Элемент = Чтение.Имя;
	Рекурсия(Корень, Чтение);
	Возврат ДеревоЗначений;
КонецФункции

Процедура Рекурсия(СтрокаДерева, Чтение)
	АтрибутыСоответствие = Новый Соответствие();
	Пока Чтение.ПрочитатьАтрибут() Цикл
		АтрибутыСоответствие.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	Если АтрибутыСоответствие.Количество() > 0 Тогда
		СтрокаДерева.Атрибуты = АтрибутыСоответствие;
		СтрокаДерева.Name = АтрибутыСоответствие.Получить("name");		
	Иначе
		АтрибутыСоответствие = 0;
	КонецЕсли;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаДерева.Value = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Дочерний         = СтрокаДерева.Строки.Добавить();
			Дочерний.Элемент = Чтение.Имя;
			Рекурсия(Дочерний, Чтение);
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьРеквизитПоКлючу(Документ, Ключ)
	   Результат = "";
	   Документ.Свойство(Ключ, Результат);
	   Возврат СокрЛП(Результат);
   КонецФункции
   
Функция ПолучитьЗначениеРеквизитаИзТаблицы(Таблица,ИмяРеквизита) Экспорт
	вЗначение = "";
	Фильтр = Новый Структура("Название", ИмяРеквизита);
	Если Таблица.Колонки.Найти("Название") <> Неопределено Тогда
		МассивСтрок = Таблица.НайтиСтроки(Фильтр);
		Если МассивСтрок.Количество() > 0 Тогда
			вЗначение = МассивСтрок[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат вЗначение;
КонецФункции
  //-- АК luza ИП-00017231

//++ АК luza 

// Возвращает коэффициент корреляции двух строк.
// 
// Параметры:
//	Строка1_ - Строка
//	Строка2_ - Строка
//
// Возвращаемое значение:
//	Число - коэффициент корреляции строк.
Функция КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2) Экспорт
	
	Строка1_ = ВРег(Строка1);
	Строка2_ = ВРег(Строка2);
	
	ДлинаСтроки1 = СтрДлина(Строка1_);
	ДлинаСтроки2 = СтрДлина(Строка2_);
	
	//Запишем строки в массивы
	Если ДлинаСтроки1 >= ДлинаСтроки2 Тогда
		Массив1 = Новый Массив(ДлинаСтроки1);
		Массив2 = Новый Массив(ДлинаСтроки2);
		Для ш = 0 По ДлинаСтроки1 - 1 Цикл
			Массив1[ш] = Сред(Строка1_,ш+1,1);	
		КонецЦикла;
		Для ш = 0 По ДлинаСтроки2 - 1 Цикл
			Массив2[ш] = Сред(Строка2_,ш+1,1);
		КонецЦикла;
	Иначе	
		Массив1 = Новый Массив(ДлинаСтроки2);
		Массив2 = Новый Массив(ДлинаСтроки1);
		Для ш = 0 По ДлинаСтроки2 - 1 Цикл
			Массив1[ш] = Сред(Строка2_,ш+1,1);	
		КонецЦикла;
		Для ш = 0 По ДлинаСтроки1 - 1 Цикл
			Массив2[ш] = Сред(Строка1_,ш+1,1);
		КонецЦикла;
	КонецЕсли; 
	
	//Сначала вычислим автокорреляцию
	КоэфАвтокор1 = ВернутьКорреляциюМассивовКвадр(Массив1,Массив1);
	КоэфАвтокор2 = ВернутьКорреляциюМассивовКвадр(Массив2,Массив2);
	
	//Нормировать будем бОльшим коэффициентом автокорреляции
	КоэфАвтокор = ?(КоэфАвтокор1 >= КоэфАвтокор2,КоэфАвтокор1,КоэфАвтокор2); 
	
	//Теперь вычислим взаимную корреляцию массивов
	КоэфКор = ВернутьКорреляциюМассивовКвадр(Массив1,Массив2);
	
	Возврат КоэфКор / КоэфАвтокор;	
	
КонецФункции

// Корреляция массивов.
//
// Параметры:
//  Б - Массив
//  А - Массив - 
// Возвращаемое значение:
//   Число   - корреляция массивов.
//
Функция ВернутьКорреляциюМассивовКвадр(Б,А)
	
	//Размер массива А больше или равен размеру Б
	
	РзмА = А.Количество()-1; //Короткий
	РзмБ = Б.Количество()-1; //Длинный
	
	СуммаКор = 0;
	Для ш = 0 По РзмА Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По ш Цикл
			Если А[РзмА - ш + у] = Б[у] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли; 	
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;
	
	Для ш = 1 По РзмБ - РзмА Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По РзмА Цикл
			Если А[у] = Б[у + ш] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли;			
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;	
	
	Для ш = 0 По РзмА-1 Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По ш Цикл
			Если А[у] = Б[РзмБ-ш+у] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли; 			
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;		
	
	Возврат СуммаКор;
	
КонецФункции

// Удаляет двойные пробелы из строки с пробелами.//
// Параметры:
//  СтрокаСПробелами  - Строка
//
Процедура УдалитьДвойныеПробелы(СтрокаСПробелами)
	
	Пока Найти(СтрокаСПробелами, "  ") Цикл
		СтрокаСПробелами = СтрЗаменить(СтрокаСПробелами, "  ", " ");
	КонецЦикла;
	
КонецПроцедуры




//Создает документы
//ТипДокумента - Строка, определяет Тип создаваемого документа
//ТаблицаРеквизитов - ТаблицаЗначений, содержащая реквизиты шапки
//ТабличнаяЧасть - ТаблицаЗначений, содержащая табличную часть
Процедура СоздатьДокумент(ТипДокумента, Знач ТаблицаРеквизитов, Знач ТабличнаяЧасть, Знач ТабличнаяЧастьИсходная, Знач Файл, УчитыватьНДС, СуммаВклНДС) Экспорт
	
	//Может быть вызвана как из формы верификации так из из формы сканирования, если из формы верификации, должны быть колонка пометка определяющая перечень строк
	Если ТабличнаяЧасть.Колонки.Найти("Пометка") <> Неопределено Тогда
		Фильтр = Новый Структура("Пометка", Истина);
		ТабличнаяЧасть = ТабличнаяЧасть.Скопировать(Фильтр);
	КонецЕсли;	
	
	Если ТабличнаяЧасть.Колонки.Найти("Исходная") <> Неопределено Тогда
		Фильтр = Новый Структура("Исходная", Ложь);
		ТабличнаяЧасть = ТабличнаяЧасть.Скопировать(Фильтр);
	КонецЕсли;	
	
	
	Если ТипДокумента = "ПоступлениеТоваровУслуг" Тогда
		СоздатьПоступлениеТоваровУслуг(ТаблицаРеквизитов, ТабличнаяЧасть, ТабличнаяЧастьИсходная, Файл, УчитыватьНДС, СуммаВклНДС);
	ИначеЕсли ТипДокумента = "ПоступлениеДопРасходов" Тогда	
		СоздатьПоступлениеДопРасходов(ТаблицаРеквизитов, ТабличнаяЧасть, ТабличнаяЧастьИсходная, Файл, УчитыватьНДС, СуммаВклНДС);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьПоступлениеТоваровУслуг(ТаблицаРеквизитов, ТабличнаяЧасть, ТабличнаяЧастьИсходная, Файл, УчитыватьНДС, СуммаВклНДС)
	
	Фильтр = Новый Структура("ТипДокумента", "ПТУ");
	ТабличнаяЧасть = ТабличнаяЧасть.Скопировать(Фильтр);	
	
	НовыйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
	
	НовыйДокумент.Комментарий = "##Создан " + Строка(ТекущаяДата()) + ", пользователем: " + Строка(ПараметрыСеанса.ТекущийПользователь) + ", из обработки верификации документов ##";
	
	Если ТекущаяДатаВДокументеПокупки = Истина Тогда
		НовыйДокумент.Дата = ТекущаяДата();
	Иначе
		НовыйДокумент.Дата = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
	КонецЕсли;	
	
	ТипДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Тип документа");
 
	Если ТипДокумента = "Счет-фактура" ИЛИ ТипДокумента = "УПД (Передаточный документ и СФ)" Тогда
		НовыйДокумент.НомерВходящегоСчетаФактуры = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Номер");
		НовыйДокумент.ДатаВходящегоСчетаФактуры = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
		
		НовыйДокумент.СчетФактура = Файл;
	ИначеЕсли ТипДокумента = "Накладная" Или ТипДокумента = "Акт" ИЛИ ТипДокумента = "УПД (Передаточный документ)" Тогда	
		НовыйДокумент.НомерВходящегоДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Номер");
		НовыйДокумент.ДатаВходящегоДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
		
		НовыйДокумент.Акт = Файл; 	
	КонецЕсли;	
	
	НовыйДокумент.Организация = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Организация");
	НовыйДокумент.Контрагент = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Контрагент");
	
	НовыйДокумент.Склад = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Склад");
	
	Форма = НовыйДокумент.ПолучитьФорму("ФормаДокумента");
	ФиктЭлемент = Новый Структура("Значение", НовыйДокумент.Контрагент);
	Форма.КонтрагентПриИзменении(ФиктЭлемент);
	
	
	
	Если УчитыватьНДС = Ложь Тогда
		НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	Иначе
		Если СуммаВклНДС = Истина Тогда
			НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;			
		Иначе
			НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху;			
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого Стр Из ТабличнаяЧасть Цикл
		Если Стр.ТипНоменклатуры = "Товар" Тогда
			НСтрДокумента = НовыйДокумент.Товары.Добавить();
			НСтрДокумента.Номенклатура = Стр.Номенклатура;
			ПриходныйОрдерПриИзмененииНоменклатурыТовары(НСтрДокумента, НовыйДокумент);
			
			НСтрДокумента.Количество = Стр.Количество;
			НСтрДокумента.ПоПриходнымОрдерам = Стр.Количество;
			НСтрДокумента.Цена = Стр.Цена;
			НСтрДокумента.СуммаНДС = Стр.СуммаНДС;
			
			Если ТипЗнч(Стр.СтавкаНДС) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
				НСтрДокумента.СтавкаНДС = Стр.СтавкаНДС;
			Иначе	
				Если Стр.СтавкаНДС = "18%" Тогда
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ИначеЕсли Стр.СтавкаНДС = "10%" Тогда	
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
				ИначеЕсли Стр.СтавкаНДС = "13%" Тогда	
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС13;
				Иначе
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;	
			КонецЕсли;
			НСтрДокумента.Сумма = Стр.Сумма;
		ИначеЕсли Стр.ТипНоменклатуры = "Оборудование" Тогда
			Для а = 1 По Стр.Количество Цикл
				НСтрДокумента = НовыйДокумент.Оборудование.Добавить();
				НСтрДокумента.Номенклатура = Стр.Номенклатура;
				НСтрДокумента.Сумма = Стр.Цена;
				
				
				ПриходныйОрдерПриИзмененииНоменклатурыОборудование(НСтрДокумента, НовыйДокумент)
			КонецЦикла;	
				
		Иначе			
			НСтрДокумента = НовыйДокумент.Услуги.Добавить();
			НСтрДокумента.Номенклатура = Стр.Номенклатура;			
			ПриходныйОрдерПриИзмененииНоменклатурыУслуги(НСтрДокумента, НовыйДокумент, Форма);
			
			
			Фильтр = Новый Структура("НомерСтроки, Исходная", Стр.НомерСтроки, Истина);

			МассивСтрок = ТабличнаяЧастьИсходная.НайтиСтроки(Фильтр);
			Если МассивСтрок.Количество() > 0 Тогда 
				ИсходнаяСтрока = МассивСтрок[0];
				НСтрДокумента.Содержание = ИсходнаяСтрока.Номенклатура;
			Иначе
				НСтрДокумента.Содержание = Стр.Номенклатура;
			КонецЕсли;	
			
			
			НСтрДокумента.Количество = Стр.Количество;
			НСтрДокумента.Цена = Стр.Цена;
			НСтрДокумента.СуммаНДС = Стр.СуммаНДС;
			
			Если ТипЗнч(Стр.СтавкаНДС) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
				НСтрДокумента.СтавкаНДС = Стр.СтавкаНДС;
			Иначе	
				Если Стр.СтавкаНДС = "18%" Тогда
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ИначеЕсли Стр.СтавкаНДС = "10%" Тогда	
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
				ИначеЕсли Стр.СтавкаНДС = "13%" Тогда	
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС13;
				Иначе
					НСтрДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;	
			КонецЕсли;	
			
			НСтрДокумента.Сумма = Стр.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	НовыйДокумент.ПосчитатьСуммуТабличнойЧасти();
	
	СтрукутраПараметров = Новый Структура("Контрагент, Организация, СуммаДокумента, Номер, Дата", НовыйДокумент.Контрагент, НовыйДокумент.Организация, НовыйДокумент.СуммаДокумента);	
	
	Форма.Открыть();
	
	Заявка = Документы.ЗаявкаНаУслугиМатериалы.ПустаяСсылка();
	ВыборЗаявкиНаОплату(СтрукутраПараметров, Форма, Заявка);	
	
	Если ЗначениеЗаполнено(Заявка) = Истина Тогда
		НовыйДокумент.Заявка = Заявка;
		
		НовыйДокумент.ДокументОснование = НовыйДокумент.Заявка;
		НовыйДокумент.СчетУчетаРасчетовСКонтрагентом = НовыйДокумент.Заявка.СчетУчетаРасчетов;			
		НовыйДокумент.СтруктурнаяЕдиница 	= НовыйДокумент.Заявка.ЦФО;	
		
		НовыйДокумент.СтатьяДДС = НовыйДокумент.Заявка.СтатьяДДС;									
				
		//РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(СтатьяДДС);
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.СтатьяДДС) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;	
		//+++АК SUVV 2018.02.28 ИП-00017941
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС,
		//|	СоответствияСтатейСчетов.СтатьяДР,
		//|	СоответствияСтатейСчетов.Счет
		//|ИЗ
		//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		//|ГДЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС = &Ссылка";
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
		|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &Ссылка) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияСтатейСчетов.СтатьяДДС,
		|	СоответствияСтатейСчетов.СтатьяДР,
		|	СоответствияСтатейСчетов.Счет		
		|ИЗ
		|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
		|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";

		Запрос.УстановитьПараметр("ВыбДата", НовыйДокумент.Дата);
		//---АК SUVV 				   
		
		Запрос.УстановитьПараметр("Ссылка", НовыйДокумент.СтатьяДДС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.СтатьяДР) Тогда
				НовыйДокумент.СтатьяЗатрат = Выборка.СтатьяДР;
			Иначе
				НовыйДокумент.СтатьяЗатрат = НовыйДокумент.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Счет) Тогда					
				НовыйДокумент.СчетУчетаРасчетовСКонтрагентом = Выборка.Счет; 					
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура СоздатьПоступлениеДопРасходов(ТаблицаРеквизитов, ТабличнаяЧасть, ТабличнаяЧастьИсходная, Файл, УчитыватьНДС, СуммаВклНДС)
	
	Фильтр = Новый Структура("ТипДокумента", "ПТУ");
	ТабличнаяЧастьТовары = ТабличнаяЧасть.Скопировать(Фильтр);	
	
	Фильтр = Новый Структура("ТипДокумента", "ПДР");
	ТабличнаяЧастьДопРасходы = ТабличнаяЧасть.Скопировать(Фильтр);	
	
	НовыйДокумент = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		
	НовыйДокумент.Комментарий = "##Создан " + Строка(ТекущаяДата()) + ", пользователем: " + Строка(ПараметрыСеанса.ТекущийПользователь) + ", из обработки верифиукации документов ##";
	
	Если ТекущаяДатаВДокументеПокупки = Истина Тогда
		НовыйДокумент.Дата = ТекущаяДата();
	Иначе
		НовыйДокумент.Дата = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
	КонецЕсли;	
	
	ТипДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Тип документа");
 
	Если ТипДокумента = "Счет-фактура" Тогда
		НовыйДокумент.НомерВходящегоСчетаФактуры = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Номер");
		НовыйДокумент.ДатаВходящегоСчетаФактуры = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
		
		НовыйДокумент.СчетФактура = Файл;
	ИначеЕсли ТипДокумента = "Накладная" Или ТипДокумента = "Акт" Тогда	
		НовыйДокумент.НомерВходящегоДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Номер");
		НовыйДокумент.ДатаВходящегоДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Дата");
		
		НовыйДокумент.Акт = Файл; 	
	КонецЕсли;	
	
	НовыйДокумент.Организация = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Организация");
	НовыйДокумент.Контрагент = ПолучитьЗначениеРеквизитаИзТаблицы(ТаблицаРеквизитов, "Контрагент");
	
	//ДоговорКонтрагента
	Если ЗначениеЗаполнено(НовыйДокумент.Организация) И  ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец"	, НовыйДокумент.Контрагент);
		Запрос.УстановитьПараметр("Организация"	, НовыйДокумент.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Дата УБЫВ";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() = Ложь Тогда
			Если НовыйДокумент.ДоговорКонтрагента.Пустая() Тогда
				НовыйДокумент.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Организация, НовыйДокумент.Контрагент, ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			КонецЕсли;
			Если НовыйДокумент.ДоговорКонтрагента.Пустая() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					НовыйДокумент.ДоговорКонтрагента = Выборка.Ссылка;
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			НовыйДокумент.Контрагент 			= Справочники.Контрагенты.ПустаяСсылка();
			НовыйДокумент.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Сообщить("Запрещено выбирать контрагента, у которого нет договора с организацией """ + НовыйДокумент.Организация + """");
		КонецЕсли;
	КонецЕсли;

	
	Если УчитыватьНДС = Ложь Тогда
		НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	Иначе
		Если СуммаВклНДС = Истина Тогда
			НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;			
		Иначе
			НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху;			
		КонецЕсли;
	КонецЕсли;	
	 
	Для каждого Стр Из ТабличнаяЧастьТовары Цикл
		НСтрДокумента = НовыйДокумент.Товары.Добавить();
		НСтрДокумента.Номенклатура = Стр.Номенклатура;	
		НСтрДокумента.Количество = Стр.Количество;
		НСтрДокумента.СтоимостьПартии = Стр.Всего;
		НСтрДокумента.СуммаНДС = Стр.СуммаНДС;
	КонецЦикла;	
	
	НовыйДокумент.Сумма = ТабличнаяЧастьДопРасходы.Итог("Всего");
	НовыйДокумент.СуммаНДС = ТабличнаяЧастьДопРасходы.Итог("СуммаНДС"); 
	
	Содержание = "";
	Для каждого Стр Из ТабличнаяЧастьДопРасходы Цикл
		Содержание = Содержание + Строка(Стр.Номенклатура) + "; "; 
	КонецЦикла;	
	
	НовыйДокумент.Содержание = Содержание;
	
	
	ТабличнаяЧастьДопРасходы.Свернуть("СтавкаНДС");
	Если ТабличнаяЧастьДопРасходы.Количество() > 1 Тогда
		Сообщить("Выбраны строки с разной ставкой НДС. Нельзя создать поступление доп расходов");
		Возврат;
	ИначеЕсли ТабличнаяЧастьДопРасходы.Количество() = 1 Тогда
		НовыйДокумент.СтавкаНДС = ТабличнаяЧастьДопРасходы[0].СтавкаНДС;
	Иначе
		Возврат;
	КонецЕсли;	
		
	
	
	
	//
	СуммаДокументаБезТЧ = ?(НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле,
								НовыйДокумент.Сумма,
								НовыйДокумент.Сумма + НовыйДокумент.СуммаНДС);
	
	НовыйДокумент.СуммаДокумента = СуммаДокументаБезТЧ;

	НовыйДокумент.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	
	МассивКоэф = НовыйДокумент.Товары.ВыгрузитьКолонку("СтоимостьПартии");
	
	СуммаКРаспределению = ?(НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле, НовыйДокумент.Сумма - НовыйДокумент.СуммаНДС, НовыйДокумент.Сумма);
	РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению, МассивКоэф);
	РаспредНДС   = ОбщегоНазначения.РаспределитьПропорционально(НовыйДокумент.СуммаНДС, МассивКоэф);
	Если РаспредСумма <> Неопределено Тогда
		НовыйДокумент.Товары.ЗагрузитьКолонку(РаспредСумма, "СуммаРаспределено");
	КонецЕсли;
	Если РаспредНДС <> Неопределено Тогда
		НовыйДокумент.Товары.ЗагрузитьКолонку(РаспредНДС, "СуммаНДСРаспределено");
	КонецЕсли;       	
	
	Форма = ПолучитьФорму("Документ.ПоступлениеДопРасходов.Форма.ФормаДокумента");
	ДанныеФормы = Форма.Объект;
	ЗначениеВДанныеФормы(НовыйДокумент,ДанныеФормы);	
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ПриходныйОрдерПриИзмененииНоменклатурыТовары(СтрокаТабличнойЧасти, НовыйДокумент)
	ТекНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(ТекНоменклатура, НовыйДокумент.Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);
 		
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		#Область КомментКод_ПриходныйОрдерПриИзмененииНоменклатурыТовары
		//Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//		ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
		//ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//КонецЕсли;
		//
		//Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//КонецЕсли;
		//
		//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ТекНоменклатура, НовыйДокумент.Дата);
		//Если ТабСчетаУчета.Количество() > 0
		//	И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
		//	ТекСчетУчета = ТабСчетаУчета[0].СчетУчета;
		//КонецЕсли;	
		//
		//СтрокаТабличнойЧасти.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), ПланыСчетов.Финансовый.Товары, ТекСчетУчета);
		#КонецОбласти
		
		//---АК Susk (Суслин К.В.) 
		
		Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
			СтрокаТабличнойЧасти.СтатьяТовародвижения 	= ?(НовыйДокумент.Дата >= '20150801',
															Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика,
															Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
		Иначе
			СтрокаТабличнойЧасти.СтатьяТовародвижения 	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		КонецЕсли;	
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ТекНоменклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент 			= ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Если НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
		Иначе
		//	СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(ТекНоменклатура);
		//
		//	Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
		//		
		//	ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
		//		СтрокаТабличнойЧасти.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
		//	Иначе
		//		СтрокаТабличнойЧасти.СтавкаНДС = ТекНоменклатура.СтавкаНДС;
		//	КонецЕсли;
		КонецЕсли;
		//АК БЕЛН 27.04.2016++
		//ЗаполнитьСписокВыбораТовары();
		//АК БЕЛН 27.04.2016--
	КонецЕсли
КонецПроцедуры	

Процедура ПриходныйОрдерПриИзмененииНоменклатурыУслуги(СтрокаТабличнойЧасти, НовыйДокумент, Форма)
	
	мКолонки = Форма.ЭлементыФормы.Услуги.Колонки;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, НовыйДокумент);
	Контрагент = НовыйДокумент.Контрагент;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Контрагент.СтавкаНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура, НовыйДокумент.Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);
 		
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		//СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура);
		//ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СчетаЗатрат);
		//
		//Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
		//	СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
		//КонецЕсли;
		//
		//Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
		//	//СтрокаТабличнойЧасти.СчетЗатратБУ = ПолучитьСчетБУПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);	
		//КонецЕсли;
		
		//---АК Susk (Суслин К.В.) 
		
	Иначе	
		
		СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
		
	КонецЕсли;	
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
	СтрокаТабличнойЧасти.СубконтоБУ1, мКолонки.СубконтоБУ1,
	СтрокаТабличнойЧасти.СубконтоБУ2, мКолонки.СубконтоБУ2,
	СтрокаТабличнойЧасти.СубконтоБУ3, мКолонки.СубконтоБУ3);
	
КонецПроцедуры

Процедура ПриходныйОрдерПриИзмененииНоменклатурыОборудование(СтрокаТабличнойЧасти, НовыйДокумент)
	
	
	СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ОсновноеСредство.Номенклатура Тогда
		СтрокаТабличнойЧасти.ОсновноеСредство 	= Справочники.ОсновныеСредства.ПустаяСсылка();
		СтрокаТабличнойЧасти.ЗаводскойНомер 	= "";
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= "";
	КонецЕсли;
		
	ПТУРасчетСуммыНДСПоОборудованию(СтрокаТабличнойЧасти, НовыйДокумент);
	
КонецПроцедуры

Процедура ПТУРасчетСуммыНДСПоОборудованию(СтрокаТабличнойЧасти, НовыйДокумент)
	
	//1. Сперва пересчитаем суммы НДС по конкретной номенклатуре
	НайдСтроки = НовыйДокумент.Оборудование.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
	
	Для Каждого НСтр Из НайдСтроки Цикл
		НовыйДокумент.РассчитатьСуммуНДСТабЧасти(НСтр, НовыйДокумент.ВариантРасчетаНДС);
	КонецЦикла;
	
	//2. Теперь просчитаем сколько должен быть НДС по сумме номенклатуры
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	
	НайдСтроки = НовыйДокумент.Оборудование.НайтиСтроки(СтруктураПоиска);
	
	Если НайдСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщСумма = 0;
	ОБщСуммаНДС = 0;
	
	Для Каждого НСтр Из НайдСтроки Цикл
		ОбщСумма = ОбщСумма + НСтр.Сумма;
		ОбщСуммаНДС = ОбщСуммаНДС + НСтр.СуммаНДС;
	КонецЦикла;
	
	// Рассчитаем сумму НДС
	СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(ОбщСумма, Истина, НовыйДокумент.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)), 2);
													   
	
	РазницаСуммыНДС = СуммаНДС - ОБщСуммаНДС;
	
	// прилепим разницу на первую-попавшуюся позицию
	НайдСтроки[0].СуммаНДС = НайдСтроки[0].СуммаНДС + РазницаСуммыНДС;	
	
КонецПроцедуры


Процедура ВыборЗаявкиНаОплату(СтруктураПараметров, Форма, Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалы.Ссылка,
	|	ЗаявкаНаУслугиМатериалы.Организация,
	|	ЗаявкаНаУслугиМатериалы.Контрагент,
	|	ЗаявкаНаУслугиМатериалы.СуммаДокумента
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалы.Организация = &Организация
	|	И ЗаявкаНаУслугиМатериалы.Контрагент = &Контрагент
	|	И ЗаявкаНаУслугиМатериалы.СуммаДокумента = &СуммаДокумента";
	
	
	Запрос.УстановитьПараметр("Контрагент", СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СуммаДокумента", СтруктураПараметров.СуммаДокумента);
	ТЗЗаявок = Запрос.Выполнить().Выгрузить();
	
	Если ТЗЗаявок.Количество() = 1 Тогда
		Заявка = ТЗЗаявок[0].Ссылка;
		Возврат;
	КонецЕсли;	
	
	ФормаВыбора = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьФормуВыбора(, Форма.ЭлементыФормы.Заявка);
	ФормаВыбора.Заголовок = "Не удалось автоматически найти заявку. Выберите вручную.";
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Отбор =ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.Использование = Истина; 
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация"); 
		Отбор.ПравоеЗначение = СтруктураПараметров.Организация; 
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		Отбор =ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.Использование = Истина; 
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
		Отбор.ПравоеЗначение = СтруктураПараметров.Контрагент; 
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры	

//
Процедура ПодготовитьЗначениеДляПроверки(Значение) Экспорт
	
	Значение = ВРЕГ(Значение);
	Значение = СтрЗаменить(Значение, """", " ");
	Значение = СтрЗаменить(Значение, ":", " ");
	Значение = СтрЗаменить(Значение, "ООО ", "");
	Значение = СтрЗаменить(Значение, "ИП ", "");
	Значение = СтрЗаменить(Значение, "ЗАО ", "");
	
	Значение = СтрЗаменить(Значение, "АДРЕС ", "");
	
	Значение = СтрЗаменить(Значение, " ", "");
	
	
				
				
КонецПроцедуры	


//

Процедура  ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СтрокаПоиска) Экспорт
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"""","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"«","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"“","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"|","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"'","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,".","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"+","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"-","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"/","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"\","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"!","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"(","");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,")","");
КонецПроцедуры

Функция ПолучитьВерсиюФайла(ФайлРодитель) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Файл_Родитель
	|ПОМЕСТИТЬ ВТ_Все_ВерифицированныеФайлы
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
	|	И ЗначенияСвойствОбъектов.Значение = &ФайлРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Вер_Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Версия,
	|	ВТ_Все_ВерифицированныеФайлы.Файл_Родитель
	|ПОМЕСТИТЬ ВТ_Версии_Вер_Файлов
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Все_ВерифицированныеФайлы КАК ВТ_Все_ВерифицированныеФайлы
	|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Все_ВерифицированныеФайлы.Файл
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Версия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель,
	|	МАКСИМУМ(ВТ_Версии_Вер_Файлов.Версия) КАК Версия
	|ПОМЕСТИТЬ ВТ_Макс_Версия_Вер_Файла
	|ИЗ
	|	ВТ_Версии_Вер_Файлов КАК ВТ_Версии_Вер_Файлов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Версии_Вер_Файлов.Вер_Файл,
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель,
	|	ЕСТЬNULL(ВТ_Версии_Вер_Файлов.Версия, 0) КАК Версия
	|ИЗ
	|	ВТ_Версии_Вер_Файлов КАК ВТ_Версии_Вер_Файлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Макс_Версия_Вер_Файла КАК ВТ_Макс_Версия_Вер_Файла
	|		ПО ВТ_Версии_Вер_Файлов.Файл_Родитель = ВТ_Макс_Версия_Вер_Файла.Файл_Родитель
	|			И ВТ_Версии_Вер_Файлов.Версия = ВТ_Макс_Версия_Вер_Файла.Версия";
	
	Запрос.УстановитьПараметр("ФайлРодитель", ФайлРодитель);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ТЗ[0].Версия;
	КонецЕсли;	
		
КонецФункции	

Функция ЗаполнитьТаблицуИзДвухСтруктур(СтруктураИсходная, СтруктураТекущая)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Название");
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("ИсходноеЗначение");
	
	СоответсвиеДанныхВТбалицеДаннымВШапке = Новый СписокЗначений;
	
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Тип документа", "Document_Type");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Номер", "Номер");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Дата", "Дата");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Организация", "Заказчик");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("ИНН организации", "ИННЗаказчика");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Адрес организации", "АдресЗаказчика");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Контрагент", "Поставщик");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("ИНН контрагента", "ИННПоставщика");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("КПП контрагента", "КПППоставщика");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Адрес контрагента", "АдресПоставщика");
	СоответсвиеДанныхВТбалицеДаннымВШапке.Добавить("Склад", "Склад");
	
	Для каждого Стр Из СоответсвиеДанныхВТбалицеДаннымВШапке Цикл
		НСтр = ТЗ.Добавить();
		НСтр.Название = Стр.Значение;
		
		СтруктураИсходная.Свойство(Стр.Представление, НСтр.ИсходноеЗначение);
		СтруктураТекущая.Свойство(Стр.Представление, НСтр.Значение);
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции	

Функция ОбъединитьДвеТаблицы(Знач ТабЧастьИсходная, Знач ТабЧастьТекущая)
	
	ОбъединеннаяТаблица = ТабЧастьТекущая.Скопировать(); 	
	ОбъединеннаяТаблица.Очистить();
	
	СоответсвиеСтрок = Новый Соответствие;			  
	СоответсвиеСтрок.Вставить("Номенклатура", "description");
	СоответсвиеСтрок.Вставить("ЕдиницаИзмерения", "ed");
	СоответсвиеСтрок.Вставить("Количество", "quantity");
	СоответсвиеСтрок.Вставить("Цена", "price");
	СоответсвиеСтрок.Вставить("Сумма", "cost");
	СоответсвиеСтрок.Вставить("СтавкаНДС", "stavka");
	СоответсвиеСтрок.Вставить("СуммаНДС", "nalogsum");
	СоответсвиеСтрок.Вставить("Всего", "sumnds");

	
	Для каждого Стр Из ТабЧастьТекущая Цикл
		НСтр = ОбъединеннаяТаблица.Добавить();
		НСтр.Исходная = Истина;
		НСтр.НомерСтроки = Стр.НомерСтроки;
		
		Если ЗначениеЗаполнено(Стр.НомерСтроки) И Стр.НомерСтроки <= ТабЧастьИсходная.Количество() Тогда
			  СтрИсходая = ТабЧастьИсходная.Получить(Стр.НомерСтроки - 1);	  			  
			  
			  Если ЗначениеЗаполнено(СтрИсходая) = Истина Тогда
				  
				  Для каждого ЗначСоотв Из СоответсвиеСтрок Цикл
					  Если ТабЧастьИсходная.Колонки.Найти(ЗначСоотв.Значение) <> Неопределено Тогда
						  НСтр[ЗначСоотв.Ключ] = СтрИсходая[ЗначСоотв.Значение];
						 КонецЕсли; 
				  КонецЦикла; 
				  
				  //НСтр.Номенклатура = СтрИсходая.description;
				  //НСтр.ЕдиницаИзмерения	= СтрИсходая.ed;
				  //НСтр.Количество = СтрИсходая.quantity;
				  //НСтр.Цена = СтрИсходая.price;
				  ////НСтр.ЦенаСНДС	= СтрИсходая.cost;
				  //НСтр.Сумма = СтрИсходая.cost;
				  //НСтр.СтавкаНДС = СтрИсходая.stavka;
				  //НСтр.СуммаНДС = СтрИсходая.nalogsum;
				  //НСтр.Всего = СтрИсходая.sumnds;
			  КонецЕсли;
		Иначе
			ЗаполнитьЗНаченияСвойств(НСтр, Стр);  
			НСтр.Исходная = Истина;
		КонецЕсли;	
		
		НСтр = ОбъединеннаяТаблица.Добавить();
		НСтр.Исходная = Ложь;
		НСтр.НомерСтроки = Стр.НомерСтроки;
		ЗаполнитьЗНаченияСвойств(НСтр, Стр);
	КонецЦикла;	
	
	Если ОбъединеннаяТаблица.Колонки.Найти("НомерСтроки") <> Неопределено 
		И ОбъединеннаяТаблица.Колонки.Найти("Исходная") <> Неопределено Тогда
		ОбъединеннаяТаблица.Сортировать("НомерСтроки, Исходная"); 
	КонецЕсли;
	Возврат  ОбъединеннаяТаблица;
КонецФункции	

//Словарь 
Процедура ЗаполнитьСловарьСоответствий() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеСтрокОбъектам.Строка КАК Строка,
	|	СоответствиеСтрокОбъектам.Объект КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеСтрокОбъектам КАК СоответствиеСтрокОбъектам
	|ГДЕ
	|	СоответствиеСтрокОбъектам.Объект ССЫЛКА Справочник.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Строка";
	СловарьСоответствийНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры	


//Основная процедуры заполнения/обновления списка
Процедура ЗаполнитьОбновитьСписокСканирования(СтрукутраОтбора, ТекСтрока = Неопределено) Экспорт
	
	Если ЭтотОбъект.Сканирование.Количество() = 0 Тогда
		Режим = "Заполнение"
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Файл_Родитель
	|ПОМЕСТИТЬ ВТ_Все_ВерифицированныеФайлы
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Вер_Файл,
	|	ЗначенияСвойствОбъектов.Значение КАК Версия,
	|	ВТ_Все_ВерифицированныеФайлы.Файл_Родитель
	|ПОМЕСТИТЬ ВТ_Версии_Вер_Файлов
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Все_ВерифицированныеФайлы КАК ВТ_Все_ВерифицированныеФайлы
	|		ПО ЗначенияСвойствОбъектов.Объект = ВТ_Все_ВерифицированныеФайлы.Файл
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Версия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель,
	|	МАКСИМУМ(ВТ_Версии_Вер_Файлов.Версия) КАК Версия
	|ПОМЕСТИТЬ ВТ_Макс_Версия_Вер_Файла
	|ИЗ
	|	ВТ_Версии_Вер_Файлов КАК ВТ_Версии_Вер_Файлов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Версии_Вер_Файлов.Вер_Файл,
	|	ВТ_Версии_Вер_Файлов.Файл_Родитель,
	|	ЕСТЬNULL(ВТ_Версии_Вер_Файлов.Версия, 0) КАК Версия,
	|	ЕСТЬNULL(АК_ОчередьРаспознаванияФайлов.ОбъектСравнения, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)) КАК Документ
	|ПОМЕСТИТЬ ВТ_Последние_Версии_Вер_Файлов_И_Документы
	|ИЗ
	|	ВТ_Версии_Вер_Файлов КАК ВТ_Версии_Вер_Файлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Макс_Версия_Вер_Файла КАК ВТ_Макс_Версия_Вер_Файла
	|		ПО ВТ_Версии_Вер_Файлов.Файл_Родитель = ВТ_Макс_Версия_Вер_Файла.Файл_Родитель
	|			И ВТ_Версии_Вер_Файлов.Версия = ВТ_Макс_Версия_Вер_Файла.Версия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|		ПО ВТ_Версии_Вер_Файлов.Вер_Файл = АК_ОчередьРаспознаванияФайлов.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл,
	|	АК_ОчередьРаспознаванияФайлов.ДатаДобавления,
	|	АК_ОчередьРаспознаванияФайлов.Автор
	|ПОМЕСТИТЬ ВТ_Файлы
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	 АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезFillin = ИСТИНА
	//| И АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА	
	|	И АК_ОчередьРаспознаванияФайлов.Автор = &Автор
	|	И АК_ОчередьРаспознаванияФайлов.ДатаДобавления МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Файлы.Файл КАК ФайлРодитель,
	|	ВТ_Файлы.ДатаДобавления,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Объект, ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)) КАК ФайлРаспознанный,
	|	ВТ_Файлы.Автор
	|ПОМЕСТИТЬ ВТ_Файлы_С_ХМЛ
	|ИЗ
	|	ВТ_Файлы КАК ВТ_Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_Файлы.Файл = ЗначенияСвойствОбъектов.Значение
	|		И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)	
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Файлы_С_ХМЛ.ДатаДобавления КАК ДатаДобавления,
	|	ВТ_Файлы_С_ХМЛ.ФайлРодитель,
	|	ВТ_Файлы_С_ХМЛ.ФайлРаспознанный,
	|	ЕСТЬNULL(ВТ_Последние_Версии_Вер_Файлов_И_Документы.Вер_Файл, ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)) КАК ВерифицированныйФайл,
	|	ЕСТЬNULL(ВТ_Последние_Версии_Вер_Файлов_И_Документы.Документ, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)) КАК Документ,
	|	ВТ_Файлы_С_ХМЛ.Автор
	|ИЗ
	|	ВТ_Файлы_С_ХМЛ КАК ВТ_Файлы_С_ХМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Последние_Версии_Вер_Файлов_И_Документы КАК ВТ_Последние_Версии_Вер_Файлов_И_Документы
	|		ПО ВТ_Файлы_С_ХМЛ.ФайлРаспознанный = ВТ_Последние_Версии_Вер_Файлов_И_Документы.Файл_Родитель
	|			И (ВТ_Файлы_С_ХМЛ.ФайлРаспознанный <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДобавления";
	
	Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.УстановитьПараметр("ДатаНач", СтрукутраОтбора.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", СтрукутраОтбора.ДатаКон);
	
	Если СтрукутраОтбора.Свойство("Автор") = Истина Тогда
		Если ЗначениеЗаполнено(СтрукутраОтбора.Автор) = Ложь Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АК_ОчередьРаспознаванияФайлов.Автор = &Автор", "И ИСТИНА");
		Иначе		
			Запрос.УстановитьПараметр("Автор", СтрукутраОтбора.Автор);		
		КонецЕсли;	
	Иначе
		Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если Режим = "Заполнение" Тогда
		Для каждого Стр Из ТЗ Цикл
			НСтр = Сканирование.Добавить();
			НСтр.Файл = Стр.ФайлРодитель;
			НСтр.ФайлXML = Стр.ФайлРаспознанный;
			НСтр.ФайлXMLВерификация = Стр.ВерифицированныйФайл;
			НСтр.ПрикрепленныйДокумент = Стр.Документ;
			НСтр.Автор = Стр.Автор;
			НСтр.ДатаСканирования = Стр.ДатаДобавления;
		КонецЦикла;
	КонецЕсли;	
	
	
	Для каждого НСтр Из ЭтотОбъект.Сканирование Цикл
		
		Если ЗначениеЗаполнено(НСтр.ФайлXML) = Ложь Тогда
			Фильтр = Новый Структура("ФайлРодитель", НСтр.Файл);
			МассивСтрок = ТЗ.НайтиСтроки(Фильтр);
			
			Если МассивСтрок.Количество() > 0 Тогда
				//НСтр.Статус = "Распознан";
				а = 0;
				Для каждого СтрМассива Из МассивСтрок Цикл
					Если а = 0 Тогда
						
						НСтр.ФайлXML = СтрМассива.ФайлРаспознанный;
						НСтр.ФайлXMLВерификация = СтрМассива.ВерифицированныйФайл;
						НСтр.ПрикрепленныйДокумент = СтрМассива.Документ;
						НСтр.Автор = СтрМассива.Автор;
						НСтр.ДатаСканирования = СтрМассива.ДатаДобавления;
						
						а = а + 1;
					Иначе
						НСтр = ЭтотОбъект.Сканирование.Добавить();
						НСтр.Файл = СтрМассива.ФайлРодитель;
						
						НСтр.ФайлXML = СтрМассива.ФайлРаспознанный;
						НСтр.ФайлXMLВерификация = СтрМассива.ВерифицированныйФайл;
						НСтр.ПрикрепленныйДокумент = СтрМассива.Документ;
						НСтр.Автор = Стр.Автор;
						НСтр.ДатаСканирования = СтрМассива.ДатаДобавления;

						//НСтр.Статус = "Распознан";
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(НСтр.Файл) = Истина И ЗначениеЗаполнено(НСтр.ФайлXML) = Истина Тогда
			Фильтр = Новый Структура("ФайлРодитель, ФайлРаспознанный", НСтр.Файл, НСтр.ФайлXML); 
			МассивСтрок = ТЗ.НайтиСтроки(Фильтр);
			Для каждого СтрМассива Из МассивСтрок Цикл
				НСтр.ФайлXMLВерификация = СтрМассива.ВерифицированныйФайл;
				НСтр.ПрикрепленныйДокумент = СтрМассива.Документ;
				НСтр.Автор = СтрМассива.Автор;
				НСтр.ДатаСканирования = СтрМассива.ДатаДобавления;
			КонецЦикла;	
		КонецЕсли;     			
			         	
		
		Если ЗначениеЗаполнено(Нстр.ПрикрепленныйДокумент) = Истина Тогда
			НСтр.Статус = "Прикреплен к документу";
		ИначеЕсли ЗначениеЗаполнено(Нстр.ФайлXMLВерификация) = Истина Тогда
			НСтр.Статус = "Верифицирован";
		ИначеЕсли ЗначениеЗаполнено(Нстр.ФайлXML) = Истина Тогда
			НСтр.Статус = "Распознан";
		Иначе
			НСтр.Статус = "В обработке";
		КонецЕсли;	
			
		
		Если ЗначениеЗаполнено(Нстр.ФайлXML) = Истина Тогда
			НСтрВсеДокументы = ВсеДокументыXML.Добавить();
			НСтрВсеДокументы.Файл = НСтр.Файл;
			НСтрВсеДокументы.ФайлXML = НСтр.ФайлXML;
			ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(НСтр.ФайлXML);
			
			ТекФайлXML = Новый Файл(ПутьКФайлу);			
			НСтрВсеДокументы.Документ = ПолучитьСтруктуруXML(ТекФайлXML);
			
			Документ = НСтрВсеДокументы.Документ;
			
			//Сообщить(Строка(Нстр.НомерСтроки) + " " + ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
			
			ДанныеОЗаказчике = Новый Структура;
			ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
			ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
			ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
			ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
			ДанныеОПоставщике = Новый Структура;
			ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
			ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
			ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
			ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
			НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
			Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
			Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
			ЗанестиДанныеПоДокументу(Документ.Document_Type,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике, НСтр);
			
			ТабЧастьИсходная = Документ.Tables;
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.ПреобразоватьИсходнуюТаблицу(ТабЧастьИсходная);
			
			Если ЗначениеЗаполнено(Нстр.ФайлXMLВерификация) = Истина Тогда
				ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(НСтр.ФайлXMLВерификация);			
				ТекФайлXML = Новый Файл(ПутьКФайлу);			
				ТекДокумент = ПолучитьСтруктуруXMLВерификации(ТекФайлXML);
				
				
				ВерсияВерификации = ВзятьЗначениеПоля(ТекДокумент.Fields, "ВерсияВерификации");
				
				Если ЗначениеЗаполнено(ВерсияВерификации) = Истина Тогда
					НСтрВсеДокументы.Реквизиты = ЗаполнитьТаблицуИзДвухСтруктур(Документ.Fields, ТекДокумент.Fields);
					                                        					
					ТабЧастьТекущая = ТекДокумент.Tables[0];
					
					НСтрВсеДокументы.ТабличнаяЧасть = ОбъединитьДвеТаблицы(ТабЧастьИсходная, ТабЧастьТекущая);
					
					Если НСтрВсеДокументы.ТабличнаяЧасть.Колонки.Найти("ТипДокумента") = Неопределено Тогда
						НСтрВсеДокументы.ТабличнаяЧасть.Колонки.Добавить("ТипДокумента");
					КонецЕсли;	
					Для каждого Стр Из НСтрВсеДокументы.ТабличнаяЧасть Цикл
						Если ЗначениеЗаполнено(Стр.ТипДокумента) = Ложь Тогда
							Стр.ТипДокумента = "ПТУ";
						КонецЕсли;	
					КонецЦикла;
				
				Иначе
					
					//старая версия верификации надо удалить, после очитски всех старых версий
					Если ТекДокумент.Tables.Количество() > 0 Тогда
						НСтрВсеДокументы.Реквизиты = ТекДокумент.Tables[0];
					КонецЕсли;
					
					Если ТекДокумент.Tables.Количество() > 1 Тогда
						НСтрВсеДокументы.ТабличнаяЧасть = ТекДокумент.Tables[1];
					КонецЕсли;	
					Если ЗначениеЗаполнено(НСтрВсеДокументы.Реквизиты) = Истина Тогда
						
						НСтр.НомерДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(НСтрВсеДокументы.Реквизиты, "Номер");
						НСтр.ДатаДокумента = ПолучитьЗначениеРеквизитаИзТаблицы(НСтрВсеДокументы.Реквизиты, "Дата");					
						НСтр.Организация = ПолучитьЗначениеРеквизитаИзТаблицы(НСтрВсеДокументы.Реквизиты, "Организация");
						НСтр.Контрагент = ПолучитьЗначениеРеквизитаИзТаблицы(НСтрВсеДокументы.Реквизиты, "Контрагент");
					КонецЕсли;	
				КонецЕсли;				
					
			КонецЕсли;	
			
		КонецЕсли; 			
	КонецЦикла;	

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ВсеДокументы = Новый ТаблицаЗначений;
ВсеДокументы.Колонки.Вставить(0, "Документ",,"Документ",0);
ВсеДокументы.Колонки.Добавить("НомерВТЧСканирование");



ВсеДокументыXML= Новый ТаблицаЗначений;
ВсеДокументыXML.Колонки.Вставить(0, "Документ",,"Документ",0);
ВсеДокументыXML.Колонки.Вставить(1, "Реквизиты",,"Реквизиты",0);
ВсеДокументыXML.Колонки.Вставить(2, "ТабличнаяЧасть",,"ТабличнаяЧасть",0);
ВсеДокументыXML.Колонки.Добавить("НомерВТЧСканирование");
ВсеДокументыXML.Колонки.Добавить("Файл");
ВсеДокументыXML.Колонки.Добавить("ФайлXML");