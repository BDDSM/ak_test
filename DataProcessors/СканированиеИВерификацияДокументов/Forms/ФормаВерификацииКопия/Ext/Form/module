
Перем НомерТекущегоДокумента; // Переменная хранит номер текущего обрабатываемого документа
Перем ТипТекущегоДокумента; // Переменная хранит тип текущего обрабатываемого документа (Акт, ПоступлениеТиУ и т.д.)
Перем ВидТекущегоДокумента; // Переменная хранит вид текущего обрабатываемого документа (Поступление/Реализация)
Перем НомерВТЧСканирование; //Переменная хранит номер обрабатываемого документа из ТЧ Сканирование


Перем ТекСтрокаСканирование Экспорт;

// Кнопка создания документа в базе на основании заполненных данных
//
Процедура КнопкаВыполнитьНажатие(Кнопка)
	//ДокументСоздан = Ложь;
	//ДокументСоздан = СоздатьДокумент();
	//Если ДокументСоздан = Ложь Тогда 
	//	Возврат;
	//КонецЕсли;
	//ДобавитьСоответствияВСловарь();
	//КомДокумент = ОбработкаОбъект.ВсеДокументы[НомерВТЧСканирование].Документ;
	//ГУИДПоле = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields,"guid");
	//ГУИДПоле.Value  = Строка(ДокументСоздан.УникальныйИдентификатор());
	//УчетИзмененийНаСтадииВерификации(КомДокумент);
	//КомДокумент.SubmitDocument();
	////КомДокумент.RemoveDocument();
	//ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	//номерТекущегоДокумента = номерТекущегоДокумента + 1;
	//Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
	//	Предупреждение("Все документы отправлены, форма будет закрыта");
	//	ЭтаФорма.Закрыть();
	//Иначе
	//	ПерейтиКСледующемуДокументу();
	//КонецЕсли;
КонецПроцедуры

// Отправка измененных данных при верификации документа обратно в Fillin
//
// Параметры:
//  КомДокумент	 - COM объект документа в Fillin
//
Процедура УчетИзмененийНаСтадииВерификации(КомДокумент)
	//зн_номер = Реквизиты.Найти("Номер","Название").Значение; 
	//поле_номер = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields,"Номер");
	//Если (зн_номер <> Неопределено И поле_номер <> Неопределено) Тогда 
	//	поле_номер.Value = зн_номер; 
	//КонецЕсли;
	//зн_дата = Реквизиты.Найти("Дата","Название").Значение;
	//поле_дата = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields,"Дата");
	//Если (зн_дата <> Неопределено И поле_дата <> Неопределено) Тогда 
	//	поле_дата.Value = зн_дата; 
	//КонецЕсли;
	//зн_организация = Реквизиты.Найти("Организация","Название").Значение; 
	//поле_организация = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields,"Заказчик");
	//Если (зн_организация <> Неопределено И поле_организация <> Неопределено) Тогда 
	//	поле_организация.Value = Строка(зн_организация); 
	//КонецЕсли;
	//зн_контрагент = Реквизиты.Найти("Контрагент","Название").Значение; 
	//поле_контрагент = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields,"Поставщик");
	//Если (зн_контрагент <> Неопределено И поле_контрагент <> Неопределено) Тогда 
	//	поле_контрагент.Value = Строка(зн_контрагент); 
	//КонецЕсли;
	//поле_всего = ОбработкаОбъект.ПолучитьПоле(КомДокумент.Fields, "ОбщаяСтоимость"); 
	//Если (поле_всего <> Неопределено) Тогда 
	//	поле_всего.Value = ВсегоРасчетное; 
	//КонецЕсли;
	//зн_тип = Реквизиты.Найти("Тип документа","Название").Значение;
	//зн_тип_преобразованное = "UNKNOWN";
	//Если зн_тип = "Накладная" Тогда 
	//	зн_тип_преобразованное = "Накладная_торг_12"; 
	//КонецЕсли;
	//Если зн_тип = "Счет-фактура" Тогда 
	//	зн_тип_преобразованное = "Счет-фактура"; 
	//КонецЕсли;
	//Если Найти(зн_тип, "Передаточный документ") <> 0 Тогда 
	//	зн_тип_преобразованное = "Универсальный передаточный документ"; 
	//КонецЕсли;
	//Если зн_тип = "Акт" Тогда 
	//	зн_тип_преобразованное = "Акт"; 
	//КонецЕсли;
	//Если (зн_тип <> Неопределено) Тогда 
	//	КомДокумент.DocumentType = зн_тип_преобразованное; 
	//КонецЕсли;
КонецПроцедуры

// Процедура добавления новых пар соответствия в словарь из реквизитов и ТЧ
//
Процедура ДобавитьСоответствияВСловарь()
	Для Каждого Строка из ТабличнаяЧасть Цикл
		Если Строка.Исходная или ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда 
			Продолжить;
		КонецЕсли;
		// Поиск исходной строки
		НомерСтроки = Строка.НомерСтроки;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
		ПараметрыОтбора.Вставить("Исходная", Истина);
		ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
		Если ИсходнаяСтрока.Номенклатура = Строка.Номенклатура или не ЗначениеЗаполнено(ИсходнаяСтрока.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		Контрагент = Реквизиты.Найти("Контрагент","Название").Значение;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
			НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			НужныйКонтрагент = Контрагент;
		КонецЕсли;
		Наименование = ИсходнаяСтрока.Номенклатура;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Очистить();
		ПараметрыОтбора.Вставить("Строка", Наименование);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", НужныйКонтрагент);
		КонецЕсли;
		ПоискСтрок = ОбработкаОбъект.СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если ПоискСтрок.Количество() = 1 Тогда 
			ПодходящаяСтрока = ПоискСтрок[0];
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
		ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
			ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийНоменклатуры.Добавить();
			ПодходящаяСтрока.Контрагент = Контрагент;
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
			ПодходящаяСтрока.Строка = Наименование;
		Иначе
			Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
				ОбработкаОбъект.СловарьСоответствийНоменклатуры.Удалить(НайденнаяСтрока);
			КонецЦикла;
			ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийНоменклатуры.Добавить();
			ПодходящаяСтрока.Контрагент = Контрагент;
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
			ПодходящаяСтрока.Строка = Наименование;
		КонецЕсли;
	КонецЦикла;
	СтрокаДляСловаря = Реквизиты.Найти("Организация","Название");
	Если СтрокаДляСловаря <> Неопределено Тогда
		Если ТипЗнч(СтрокаДляСловаря.Значение)<>Тип("Строка")и ЗначениеЗаполнено(СтрокаДляСловаря.ИсходноеЗначение) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Строка", СтрокаДляСловаря.ИсходноеЗначение);
			ПоискСтрок = ОбработкаОбъект.СловарьСоответствийОрганизаций.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				ПодходящаяСтрока = ПоискСтрок[0];
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
			ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийОрганизаций.Добавить();
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			Иначе
				Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
					ОбработкаОбъект.СловарьСоответствийОрганизаций.Удалить(НайденнаяСтрока);
				КонецЦикла;
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийОрганизаций.Добавить();
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтрокаДляСловаря = Реквизиты.Найти("Контрагент","Название");
	Если СтрокаДляСловаря <> Неопределено Тогда
		Если ТипЗнч(СтрокаДляСловаря.Значение)<>Тип("Строка")и ЗначениеЗаполнено(СтрокаДляСловаря.ИсходноеЗначение) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Строка", СтрокаДляСловаря.ИсходноеЗначение);
			ПоискСтрок = ОбработкаОбъект.СловарьСоответствийКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				ПодходящаяСтрока = ПоискСтрок[0];
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
			ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийКонтрагентов.Добавить();
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			Иначе
				Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
					ОбработкаОбъект.СловарьСоответствийКонтрагентов.Удалить(НайденнаяСтрока);
				КонецЦикла;
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийКонтрагентов.Добавить();
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - Перед открытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//Если (ОбработкаОбъект.ВсеДокументы.Количество() = 0)Тогда  
	//	Предупреждение("Нет документов для отображения");
	//	ЭтаФорма.Закрыть();
	//Иначе
	//	ЗаполнитьСписокВыбораТиповНоменклатуры();
	//	//НомерТекущегоДокумента = 0;
	//	//НомерВТЧСканирование = НомерТекущегоДокумента;
	//	//Пока не ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать Цикл
	//	//	номерТекущегоДокумента = номерТекущегоДокумента + 1;
	//	//	Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
	//	//		Предупреждение("Все документы отправлены, форма будет закрыта");
	//	//		ЭтаФорма.Закрыть();
	//	//		Возврат;
	//	//	Иначе
	//	//		НомерВТЧСканирование = НомерТекущегоДокумента;
	//	//	КонецЕсли;
	//	//КонецЦикла;
	//	ТипТекущегоДокумента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ТипДокумента;
	//	ВидТекущегоДокумента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ВидДокумента;
	//	// Заполняем форму значениями из сканированнного документа
	//	ЗаполнитьТаблицуДокументом();
	//	УчитыватьНДС = Истина;
	//КонецЕсли;
	//УчитыватьНДСПриИзменении(Неопределено);
	
	Если ЗначениеЗаполнено(ТекСтрокаСканирование) = Истина Тогда
		НомерВТЧСканирование = ТекСтрокаСканирование.НомерСтроки - 1;
		ЗаполнитьСписокВыбораТиповНоменклатуры();

		ТипТекущегоДокумента = ТекСтрокаСканирование.ТипДокумента;
		ВидТекущегоДокумента = ТекСтрокаСканирование.ВидДокумента;
		
		ЗаполнитьТаблицуДокументом();
		УчитыватьНДС = Истина;
	Иначе	
		Предупреждение("Нет документов для отображения");
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - Заполнить список выбора типов номенклатуры
//
Процедура ЗаполнитьСписокВыбораТиповНоменклатуры()
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ТипНоменклатуры.ЭлементУправления.СписокВыбора.Добавить("Товар","Товар");
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ТипНоменклатуры.ЭлементУправления.СписокВыбора.Добавить("Услуга","Услуга");
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ТипНоменклатуры.ЭлементУправления.СписокВыбора.Добавить("Материал","Материал");
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ТипНоменклатуры.ЭлементУправления.СписокВыбора.Добавить("Оборудование","Оборудование");
КонецПроцедуры

// Пересчет данных ТЧ при изменении количества или цены
//
Процедура ПриОкончанииРедактирования(Элемент)
	//Строка = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Строка = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;

	Если Строка.Цена<>0 и Строка.Количество<>0 Тогда 
		Если ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
			Ответ = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Вопрос("Пересчитать сумму?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			Строка.Сумма = Окр(Строка.Цена * Строка.Количество, 2);
			Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Сумма,УчитыватьНДС,Ложь,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			Строка.Всего = Строка.Сумма+Строка.СуммаНДС*Число(УчитыватьНДС);
			Если СуммаВклНДС Тогда 
				Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Всего,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			КонецЕсли;
			Если Строка.Количество<>0 Тогда 
				Строка.ЦенаСНДС = Окр(Строка.Всего/Строка.Количество,2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Цветовове оформление строк ТЧ
//
Процедура ТабличнаяЧастьПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		// Оформление исходных значений
		ЦветПанели = Новый Цвет(245,242,221);
		Если ОформлениеСтроки.ДанныеСтроки.Исходная Тогда 
			ОформлениеСтроки.ЦветФона = ЦветПанели;
			Продолжить;
		КонецЕсли;
		// Окраска номенклатуры
	    ЗначениеЯчейки = ОформлениеСтроки.ДанныеСтроки.Номенклатура; 
	    Если ТипЗнч(ЗначениеЯчейки)=Тип("Строка") Тогда 
	        ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.Лосось;
		ИначеЕсли не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда 
			ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.Лосось;
		КонецЕсли;
		// Окраска единиц измерения
	    ЗначениеЯчейки = ОформлениеСтроки.ДанныеСтроки.ЕдиницаИзмерения;
		Если ОформлениеСтроки.ДанныеСтроки.ТипНоменклатуры = "Товар" Тогда 
		    Если ТипЗнч(ЗначениеЯчейки)=Тип("Строка") Тогда 
		        ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ЦветФона = WebЦвета.Лосось;
			ИначеЕсли не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда 
				ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ЦветФона = WebЦвета.Лосось;
			КонецЕсли;
		КонецЕсли;
		// Остальное
		Количество = ОформлениеСтроки.ДанныеСтроки.Количество;
		Цена = ОформлениеСтроки.ДанныеСтроки.Цена;
		ЦенаСНДС = ОформлениеСтроки.ДанныеСтроки.ЦенаСНДС;
		Сумма = ОформлениеСтроки.ДанныеСтроки.Сумма;
		СтавкаНДС = ПреобразованиеСтавкиНДС(ОформлениеСтроки.ДанныеСтроки.СтавкаНДС);
		СуммаНДС = ОформлениеСтроки.ДанныеСтроки.СуммаНДС;
		Всего = ОформлениеСтроки.ДанныеСтроки.Всего;
		// Окраска значений измененных относительно исходных
		// Поиск исходной строки
		НомерСтроки = ОформлениеСтроки.ДанныеСтроки.НомерСтроки;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
		ПараметрыОтбора.Вставить("Исходная", Истина);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(Цена) = Ложь Тогда
			Цена = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Количество) = Ложь Тогда
			Количество = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сумма) = Ложь Тогда
			Сумма = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Всего) = Ложь Тогда
			Всего = 0;
		КонецЕсли;

		Если ЗначениеЗаполнено(СуммаНДС) = Ложь Тогда
			СуммаНДС = 0;
		КонецЕсли;


		
		
		Если НайденныеСтроки.Количество()>0 Тогда 
			ИсходнаяСтрока = НайденныеСтроки[0];
			Если ОформлениеСтроки.ДанныеСтроки.Номенклатура <> ИсходнаяСтрока.Номенклатура и 
					ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = Новый Цвет Тогда
					//Если ОформлениеСтроки.ДанныеСтроки.Номенклатура.БазоваяЕдиницаИзмерения <> ИсходнаяСтрока.ЕдиницаИзмерения и ЗначениеЗаполнено(ИсходнаяСтрока.ЕдиницаИзмерения)Тогда
					//	ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.ТемноОранжевый;
					//Иначе
				ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.НейтральноЗеленый;
					//КонецЕсли;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.ЕдиницаИзмерения <> ИсходнаяСтрока.ЕдиницаИзмерения и 
					ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.ЕдиницаИзмерения <> ИсходнаяСтрока.ЕдиницаИзмерения и ЗначениеЗаполнено(ИсходнаяСтрока.ЕдиницаИзмерения)и ТипЗнч(ИсходнаяСтрока.ЕдиницаИзмерения)=Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда 
				ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.ТемноОранжевый;	
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.Количество <> ИсходнаяСтрока.Количество и 
					ОформлениеСтроки.Ячейки.Количество.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.Количество.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.Цена <> ИсходнаяСтрока.Цена и 
					ОформлениеСтроки.Ячейки.Цена.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.Цена.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			//Если ОформлениеСтроки.ДанныеСтроки.ЦенаСНДС <> ИсходнаяСтрока.ЦенаСНДС и 
			//		ОформлениеСтроки.Ячейки.ЦенаСНДС.ЦветФона = Новый Цвет Тогда
			//	ОформлениеСтроки.Ячейки.ЦенаСНДС.ЦветФона = WebЦвета.НейтральноЗеленый;
			//КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.Сумма <> ИсходнаяСтрока.Сумма и 
					ОформлениеСтроки.Ячейки.Сумма.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.Сумма.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.СтавкаНДС <> ИсходнаяСтрока.СтавкаНДС и 
					ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.СуммаНДС <> ИсходнаяСтрока.СуммаНДС и 
					ОформлениеСтроки.Ячейки.СуммаНДС.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.СуммаНДС.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
			Если ОформлениеСтроки.ДанныеСтроки.Всего <> ИсходнаяСтрока.Всего и 
					ОформлениеСтроки.Ячейки.Всего.ЦветФона = Новый Цвет Тогда
				ОформлениеСтроки.Ячейки.Всего.ЦветФона = WebЦвета.НейтральноЗеленый;
			КонецЕсли;
		КонецЕсли;
		// Окраска количества
		Если Количество = 0 Тогда 
			ОформлениеСтроки.Ячейки.Количество.ЦветФона = WebЦвета.Персиковый;
		КонецЕсли;
		// Окраска цены
		Если Цена = 0 Тогда 
			ОформлениеСтроки.Ячейки.Цена.ЦветФона = WebЦвета.Персиковый;
		КонецЕсли;
		// Окраска суммы
		Если Сумма <> Окр(Цена*Количество, 2) Тогда
			ОформлениеСтроки.Ячейки.Сумма.ЦветФона = WebЦвета.Персиковый;
		КонецЕсли;
		// Окраска цены с НДС
		Если Количество <> 0 Тогда 
			Если ЦенаСНДС <> Окр(Всего/Количество, 2) Тогда  
				ОформлениеСтроки.Ячейки.ЦенаСНДС.ЦветФона = WebЦвета.Персиковый;
			КонецЕсли;
		КонецЕсли;
		// Окраска ставки НДС
		Если СуммаВклНДС Тогда 
			СуммаДляПроверки = Всего;
		Иначе
			СуммаДляПроверки = Сумма;
		КонецЕсли;
		Если не СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаДляПроверки,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(ОформлениеСтроки.ДанныеСтроки.СтавкаНДС)), 2) Тогда
			Если СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаДляПроверки,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18)), 2) И СтавкаНДС<>0.18 Тогда
				ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = WebЦвета.Персиковый;
			ИначеЕсли СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаДляПроверки,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20)), 2) И СтавкаНДС<>0.2 Тогда
				ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = WebЦвета.Персиковый;
			ИначеЕсли СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаДляПроверки,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС10)), 2) И СтавкаНДС<>0.1 Тогда
				ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = WebЦвета.Персиковый;
			ИначеЕсли СуммаНДС = 0 И СтавкаНДС<>0 Тогда
				ОформлениеСтроки.Ячейки.СтавкаНДС.ЦветФона = WebЦвета.Персиковый;
				ОформлениеСтроки.Ячейки.СуммаНДС.ЦветФона = WebЦвета.Персиковый;
			Иначе 
				ОформлениеСтроки.Ячейки.СуммаНДС.ЦветФона = WebЦвета.Персиковый;
			КонецЕсли;
		КонецЕсли;
		// Окраска "всего"
		Если Всего<>Сумма+СуммаНДС*Число(УчитыватьНДС) Тогда
			ОформлениеСтроки.Ячейки.Всего.ЦветФона = WebЦвета.Персиковый;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция - Преобразование ставки НДС в число
//
// Параметры:
//  СтавкаНДС	 - перечисление СтавкиНДС
// 
// Возвращаемое значение:
//  Число
//
Функция ПреобразованиеСтавкиНДС(СтавкаНДС)
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда 
		Возврат 0.2;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
		Возврат 0.18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 или СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда 
		Возврат 0.1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПреобразованиеСтавкиНДС()

// Процедура заполнения формы данными из COM объекта
//
Процедура ЗаполнитьТаблицуДокументом()
	//Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
	//	Предупреждение("Все документы отправлены, форма будет закрыта");
	//	ЭтаФорма.Закрыть();
	//Иначе
	//	Документ = ОбработкаОбъект.ВсеДокументы[НомерТекущегоДокумента].Документ;
	//	Реквизиты.Очистить();
	//	ТабличнаяЧасть.Очистить();
	//	Если ТипТекущегоДокумента = "НеопределенныйТипДокумента" Тогда 
	//		Предупреждение("Не реализован данный тип документа: "+ТипТекущегоДокумента);
	//		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	//		ПерейтиКСледующемуДокументу();
	//	Иначе
	//		Если ВидТекущегоДокумента = "Поступление" или ВидТекущегоДокумента = "Реализация" Тогда 
	//			ЗаполнитьРеквизитыШапки();
	//		Иначе
	//			Предупреждение("Не выбран вид документа");
	//			ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	//			ПерейтиКСледующемуДокументу();
	//		КонецЕсли;
	//	КонецЕсли;
	//	ЗаполнитьТабличнуюЧасть();
	//КонецЕсли;
	Фильтр = Новый Структура("Файл, ФайлXML", ТекСтрокаСканирование.Файл,ТекСтрокаСканирование.ФайлXML);
	МассивСтрок = ОбработкаОбъект.ВсеДокументыXML.НайтиСтроки(Фильтр);			
	Если МассивСтрок.Количество() = 0 Тогда
		
	Иначе
		Документ = МассивСтрок[0].Документ;
		Реквизиты.Очистить();
		ТабличнаяЧасть.Очистить();
		Если ЗначениеЗаполнено(МассивСтрок[0].Реквизиты) = Истина Тогда
			Реквизиты = МассивСтрок[0].Реквизиты;
		Иначе
			Если ТипТекущегоДокумента = "НеопределенныйТипДокумента" Тогда 
				Предупреждение("Не реализован данный тип документа: "+ТипТекущегоДокумента);
				//ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
				//ПерейтиКСледующемуДокументу();
			Иначе
				Если ВидТекущегоДокумента = "Поступление" или ВидТекущегоДокумента = "Реализация" Тогда 
					ЗаполнитьРеквизитыШапки(Документ);
				Иначе
					Предупреждение("Не выбран вид документа");
					//ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
					//ПерейтиКСледующемуДокументу();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МассивСтрок[0].Реквизиты) = Истина Тогда
			ТабличнаяЧасть = МассивСтрок[0].ТабличнаяЧасть;
		Иначе
			ЗаполнитьТабличнуюЧасть(Документ);
		КонецЕсли;

		
		
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизиты документа данными из COM объекта
//
Процедура ЗаполнитьРеквизитыШапки(Документ = Неопределено)
	ДобавитьРеквизит("Вид документа", ВидТекущегоДокумента, ВидТекущегоДокумента);
	ДобавитьРеквизит("Тип документа", ТипТекущегоДокумента, ТипТекущегоДокумента);
	ДобавитьРеквизит("Номер", ОбработкаОбъект.Сканирование[НомерВТЧСканирование].НомерДокумента, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].НомерДокумента);
	ДобавитьРеквизит("Дата", ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ДатаДокумента, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ДатаДокумента);
	ДобавитьРеквизит("Организация", ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ОрганизацияИсходная);
	Если ЗначениеЗаполнено(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация) = Истина И ТипЗнч(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацияИНН = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация.ИНН;
	Иначе
		ОрганизацияИНН = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ОрганизацияИНН;
	КонецЕсли;	
	ДобавитьРеквизит("ИНН организации",  ОрганизацияИНН, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ОрганизацияИНН);
	
	ДобавитьРеквизит("Адрес организации", ОбработкаОбъект.ПолучитьАдресИзБазы(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ОбработкаОбъект.Сканирование[НомерВТЧСканирование].АдресОрганизации);
	ДобавитьРеквизит("Контрагент", ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].КонтрагентИсходный);
	Если ЗначениеЗаполнено(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент) = Истина И ТипЗнч(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИННКонтрагента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент.ИНН;
	Иначе
		ИННКонтрагента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].КонтрагентИНН;
	КонецЕсли;	
	ДобавитьРеквизит("ИНН контрагента",  ИННКонтрагента, ОбработкаОбъект.Сканирование[НомерВТЧСканирование].КонтрагентИНН);
	
	ДобавитьРеквизит("Адрес контрагента", ОбработкаОбъект.ПолучитьАдресИзБазы(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ОбработкаОбъект.Сканирование[НомерВТЧСканирование].АдресКонтрагента);
	ДобавитьРеквизит("Склад", ОбработкаОбъект.СкладПокупка, ОбработкаОбъект.СкладПокупка);
	
	ВсегоИсходное = ОбработкаОбъект.ПарсингЧисла(ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "ОбщаяСтоимость"));
	НДСИсходное = ОбработкаОбъект.ПарсингЧисла(ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "СуммаНалога"));
	
	
	ПредъявленСчетФактура = Ложь;
КонецПроцедуры

// Процедура добавления нового реквизита в список
//
// Параметры:
//  Название		 - Строка с названием реквизита 
//  Значение		 - Строка/Ссылка на справочник 
//  ИсходноеЗначение - Строка/Ссылка на справочник 
//
Процедура ДобавитьРеквизит(Название, Значение, ИсходноеЗначение=Неопределено)
	СтрокаРеквизитов = Реквизиты.Добавить();	
	СтрокаРеквизитов.Название = Название;
	СтрокаРеквизитов.Значение = Значение;
	Если ЗначениеЗаполнено(ИсходноеЗначение) Тогда 
		СтрокаРеквизитов.ИсходноеЗначение = ИсходноеЗначение;
	КонецЕсли;
КонецПроцедуры
	
// Процедура заполняет табличную часть данными из COM объекта
//
Процедура ЗаполнитьТабличнуюЧасть(Документ = Неопределено)
	Попытка
		//ТабЧасть = ОбработкаОбъект.ВсеДокументы[номерТекущегоДокумента].Документ.Tables;
		ТабЧасть = Документ.Tables;
		Если ТипЗнч(ТабЧасть) = Тип("ТаблицаЗначений") Тогда
			а = 1;
			Для каждого СтрТЧ из ТабЧасть Цикл
				
				НоваяСтрокаТЧ = ТабличнаяЧасть.Добавить();
				Наименование = ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "description");
				стрКоличество = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "quantity"));
				стрЦена = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "price"));
				стрСумма = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "cost"));
				стрСтавкаНДС = ПарсингСтавкиНДС(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "stavka"));
				стрСуммаНДС = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "nalogsum"));
				стрВсего = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "sumnds"));
				ЕдиницаИзмерения = ВзятьЗначениИзТаблицыПоИмени(ТабЧасть, СтрТЧ, "ed");
				
				
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ПоискЕД = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения,Истина);
						Если ЗначениеЗаполнено(ПоискЕД) Тогда 
							ЕдиницаИзмерения = ПоискЕД;
						КонецЕсли;
					КонецЕсли;
					Если стрВсего = 0 Тогда 
						стрВсего = стрСумма+стрСуммаНДС;
					КонецЕсли;
					
					//Разбираемся с номенклатурой
					НоваяСтрокаТЧ.Номенклатура = ПоискНоменклатурыПоставщика(Реквизиты.Найти("Контрагент","Название").Значение,Наименование,ЕдиницаИзмерения);
					// Заполняем остальное
					Если ТипТекущегоДокумента = "Акт" Тогда
						НоваяСтрокаТЧ.ТипНоменклатуры = "Услуга";
					Иначе
						НоваяСтрокаТЧ.ТипНоменклатуры = "Материал";
					КонецЕсли;
					Если ТипЗнч(НоваяСтрокаТЧ.Номенклатура) = Тип("Строка") Тогда 
						НоваяСтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
					Иначе
						НоваяСтрокаТЧ.ЕдиницаИзмерения = НоваяСтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
					КонецЕсли;
					НоваяСтрокаТЧ.Количество = Окр(?(стрКоличество=Неопределено,0,стрКоличество), 3);
					НоваяСтрокаТЧ.Цена = Окр(?(стрЦена=Неопределено,0,стрЦена), 2);
					НоваяСтрокаТЧ.Сумма = Окр(?(стрСумма=Неопределено,0,стрСумма), 2);
					НоваяСтрокаТЧ.СтавкаНДС = стрСтавкаНДС;
					НоваяСтрокаТЧ.СуммаНДС = Окр(?(стрСуммаНДС=Неопределено,0,стрСуммаНДС), 2);
					НоваяСтрокаТЧ.Всего = Окр(?(стрВсего=Неопределено,0,стрВсего), 2);
					Если НоваяСтрокаТЧ.Количество<>0 Тогда 
						НоваяСтрокаТЧ.ЦенаСНДС = Окр(НоваяСтрокаТЧ.Всего/НоваяСтрокаТЧ.Количество,2);
					КонецЕсли;
					НоваяСтрокаТЧ.Исходная = Ложь;
					НоваяСтрокаТЧ.НомерСтроки = а;
					а = а + 1;
					// Заполняем исходные значения
					НоваяСтрокаТЧИсходная = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Количество()-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧИсходная,НоваяСтрокаТЧ);
					НоваяСтрокаТЧИсходная.ЦенаСНДС = 0;
					НоваяСтрокаТЧИсходная.ЕдиницаИзмерения = ЕдиницаИзмерения;
					НоваяСтрокаТЧИсходная.Исходная = Истина;

				
			КонецЦикла;	
		Иначе	
			ЗаписиТабличнойЧасти = ОбработкаОбъект.ВсеДокументы[номерТекущегоДокумента].Документ.Tables.GetItem(0).Records;
			ТабличнаяЧастьКомОбъекта = ОбработкаОбъект.ВсеДокументы[номерТекущегоДокумента].Документ.Tables.GetItem(0);
			
			Для СчетчикСтрокТЧ = 0 по ЗаписиТабличнойЧасти.Count - 1 Цикл
				Имя = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "description");
				Если (Найти(Имя, "оварная накладная") = 0) Тогда 
					НоваяСтрокаТЧ = ТабличнаяЧасть.Добавить();
					//Код для просмотря значений всех ячеек
					//Для счетч=0 по ЗаписиТабличнойЧасти.GetItem(0).Count-1 Цикл
					//	стр = ВзятьЗначениИзТаблицыФиллина(ЗаписиТабличнойЧасти, СчетчикСтрокТЧ, счетч);
					//КонецЦикла;
					
					Наименование = Имя;
					стрКоличество = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "quantity"));
					стрЦена = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "price"));
					стрСумма = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "cost"));
					стрСтавкаНДС = ПарсингСтавкиНДС(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "stavka"));
					стрСуммаНДС = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "nalogsum"));
					стрВсего = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "sumnds"));
					ЕдиницаИзмерения = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "ed");
					Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ПоискЕД = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения,Истина);
						Если ЗначениеЗаполнено(ПоискЕД) Тогда 
							ЕдиницаИзмерения = ПоискЕД;
						КонецЕсли;
					КонецЕсли;
					Если стрВсего = 0 Тогда 
						стрВсего = стрСумма+стрСуммаНДС;
					КонецЕсли;
					
					//Разбираемся с номенклатурой
					НоваяСтрокаТЧ.Номенклатура = ПоискНоменклатурыПоставщика(Реквизиты.Найти("Контрагент","Название").Значение,Наименование,ЕдиницаИзмерения);
					// Заполняем остальное
					Если ТипТекущегоДокумента = "Акт" Тогда
						НоваяСтрокаТЧ.ТипНоменклатуры = "Услуга";
					Иначе
						НоваяСтрокаТЧ.ТипНоменклатуры = "Товар";
					КонецЕсли;
					Если ТипЗнч(НоваяСтрокаТЧ.Номенклатура) = Тип("Строка") Тогда 
						НоваяСтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
					Иначе
						НоваяСтрокаТЧ.ЕдиницаИзмерения = НоваяСтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
					КонецЕсли;
					НоваяСтрокаТЧ.Количество = Окр(?(стрКоличество=Неопределено,0,стрКоличество), 3);
					НоваяСтрокаТЧ.Цена = Окр(?(стрЦена=Неопределено,0,стрЦена), 2);
					НоваяСтрокаТЧ.Сумма = Окр(?(стрСумма=Неопределено,0,стрСумма), 2);
					НоваяСтрокаТЧ.СтавкаНДС = стрСтавкаНДС;
					НоваяСтрокаТЧ.СуммаНДС = Окр(?(стрСуммаНДС=Неопределено,0,стрСуммаНДС), 2);
					НоваяСтрокаТЧ.Всего = Окр(?(стрВсего=Неопределено,0,стрВсего), 2);
					Если НоваяСтрокаТЧ.Количество<>0 Тогда 
						НоваяСтрокаТЧ.ЦенаСНДС = Окр(НоваяСтрокаТЧ.Всего/НоваяСтрокаТЧ.Количество,2);
					КонецЕсли;
					НоваяСтрокаТЧ.Исходная = Ложь;
					НоваяСтрокаТЧ.НомерСтроки = СчетчикСтрокТЧ;
					// Заполняем исходные значения
					НоваяСтрокаТЧИсходная = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Количество()-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧИсходная,НоваяСтрокаТЧ);
					НоваяСтрокаТЧИсходная.ЦенаСНДС = 0;
					НоваяСтрокаТЧИсходная.ЕдиницаИзмерения = ЕдиницаИзмерения;
					НоваяСтрокаТЧИсходная.Исходная = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Предупреждение("Не распозналась табличная часть документа");
	КонецПопытки;
КонецПроцедуры

// Функция создания нового документа в базе данных
// 
// Возвращаемое значение:
//  Ссылка на созданный документ 
//
Функция СоздатьДокументСтарый()
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	// Создаем номенклатуру по распознанным значениям
	Для Каждого Строка из ТабличнаяЧасть Цикл
		Если Строка.Исходная Тогда 
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Строка.Номенклатура) = Тип("Строка") и Строка.Номенклатура <> "" Тогда
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			НоваяНоменклатура.Наименование = Строка.Номенклатура;
			НоваяНоменклатура.НаименованиеПолное = Строка.Номенклатура;
			Если Строка.ТипНоменклатуры = "Товар" Тогда 
				Если ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда 
					НоваяНоменклатура.БазоваяЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				Иначе
					МассивОтбор = Новый Массив();
					МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
					СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
					СписокПоиска.ПолучатьОписание = Истина;
					ПоказыватьОписания = Истина;
					СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
					// Поиск исходной строки
					НомерСтроки = Строка.НомерСтроки;
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
					ПараметрыОтбора.Вставить("Исходная", Истина);
					ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
					// Заполнение единицы измерения
					Если ИсходнаяСтрока.ЕдиницаИзмерения="" Тогда
						НоваяНоменклатура.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
					Иначе
						СписокПоиска.СтрокаПоиска = Лев(Строка(ИсходнаяСтрока.ЕдиницаИзмерения),99); // текст поиска можно задать и так
						СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
						МассивОтбор = Новый Массив();
						МассивОтбор.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
						СписокПоиска.ОбластьПоиска = МассивОтбор;
						ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
						СписокПоиска.ПерваяЧасть();
						СписокЗначений = Новый СписокЗначений;
						ТаблицаДляСортировки = Новый ТаблицаЗначений;
						ТаблицаДляСортировки.Колонки.Добавить("Значение");
						ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
						ТаблицаДляСортировки.Очистить();
						Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
							Значение = СписокПоиска.Получить(Индекс).Значение;
							Если не Значение.ПометкаУдаления Тогда
								Строка1 = Строка(Значение.Наименование); 
								Строка2 = Строка(ИсходнаяСтрока.ЕдиницаИзмерения);
								Если Строка1 = "" или Строка2 = "" Тогда 
									Продолжить;
								КонецЕсли;
								//++АК luza
								//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
								ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
								//--АК luza
								СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
								СтрокаТаблицы.Значение = Значение;
								СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
							КонецЕсли;
						КонецЦикла;
						ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
						Если ТаблицаДляСортировки.Количество()=0 Тогда 
							ПоискЕдиницыИзмерения = Неопределено
						Иначе
							ПоискЕдиницыИзмерения = ТаблицаДляСортировки[0];
						КонецЕсли;
						Если ЗначениеЗаполнено(ПоискЕдиницыИзмерения) Тогда 
							НоваяНоменклатура.БазоваяЕдиницаИзмерения = ПоискЕдиницыИзмерения.Значение;
						Иначе
							НоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
							НоваяЕдиницаИзмерения.Наименование = Строка.ЕдиницаИзмерения;
							НоваяЕдиницаИзмерения.НаименованиеПолное = Строка.ЕдиницаИзмерения;
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	КлассификаторЕдиницИзмерения.Код КАК Код
								|ИЗ
								|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
								|
								|УПОРЯДОЧИТЬ ПО
								|	Код УБЫВ";

							РезультатЗапроса = Запрос.Выполнить();
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							ВыборкаДетальныеЗаписи.Следующий();
							НовыйКод = Число(ВыборкаДетальныеЗаписи.Код)+1;
							НоваяЕдиницаИзмерения.Код = Лев(Строка(НовыйКод),3);
							НоваяЕдиницаИзмерения.Записать();
							НоваяНоменклатура.БазоваяЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяНоменклатура.Услуга = Истина;
			КонецЕсли;
			НоваяНоменклатура.Записать();
			Строка.Номенклатура = НоваяНоменклатура.Ссылка;
		КонецЕсли;
	КонецЦикла;
	// Проверка корректности заполнения верифицированного документа
	ОрганизацияПроверка = Реквизиты.Найти("Организация","Название").Значение;
	КонтрагентПроверка = Реквизиты.Найти("Контрагент","Название").Значение;
	Если ТипЗнч(ОрганизацияПроверка)=Тип("Строка") Тогда  
		Ответ = Вопрос("Значение организации некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КонтрагентПроверка)=Тип("Строка") Тогда 
		Ответ = Вопрос("Значение контрагента некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Для Каждого Строка из ТабличнаяЧасть Цикл
			Если Строка.Исходная Тогда 
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Строка.Номенклатура)=Тип("Строка") Тогда 
				Ответ = Вопрос("Значения номенклатуры в одной из строк табличной части некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли Строка.Количество=0 Тогда 
				Ответ = Вопрос("Значение количества в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли Строка.Цена=0 Тогда 
				Ответ = Вопрос("Значение цены в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли Строка.Сумма=0 Тогда 
				Ответ = Вопрос("Значение суммы в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли Строка.Всего=0 Тогда 
				Ответ = Вопрос("Значение ""всего"" в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли Строка.Номенклатура.Услуга и Строка.ТипНоменклатуры="Товар" Тогда 
				Ответ = Вопрос("В одной из строк табличной части находится услуга помеченная как товар, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Механизм создания документов в базе
	Если ТипТекущегоДокумента = "Счет-фактура" или ТипТекущегоДокумента = "УПД (Передаточный документ и СФ)" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ();
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка;
			// Создаем к нему счет-фактуру
			НоваяСчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
			НоваяСчетФактура.Заполнить(НовоеПоступление.Ссылка);
			НоваяСчетФактура.ДатаВходящегоДокумента = Реквизиты.Найти("Дата","Название").Значение;
			НоваяСчетФактура.НомерВходящегоДокумента = Реквизиты.Найти("Номер","Название").Значение;
			Попытка
				НоваяСчетФактура.Записать();
				Сообщить("Создан документ "+НоваяСчетФактура.Ссылка);
				// Добавление записи на вкладку история
				НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
				НоваяСтрокаИстории.Дата = ТекущаяДата();
				НоваяСтрокаИстории.Ссылка = НоваяСчетФактура.Ссылка;
			Исключение
				Предупреждение("Не уникален номер счета фактуры, запись невозможна: "+НоваяСчетФактура.Ссылка);
			КонецПопытки;
			ОткрытьЗначение(НоваяСчетФактура);
			ОткрытьЗначение(НовоеПоступление);
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ();
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			ОткрытьЗначение(НоваяРеализация);
			// Создаем к нему счет-фактуру
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			НоваяСчетФактура.Заполнить(НоваяРеализация.Ссылка);
			НоваяСчетФактура.ДатаВыставления = Реквизиты.Найти("Дата","Название").Значение;
			НоваяСчетФактура.Дата = Реквизиты.Найти("Дата","Название").Значение;
			НоваяСчетФактура.Номер = Реквизиты.Найти("Номер","Название").Значение;
			Попытка
				НоваяСчетФактура.Записать();
				Сообщить("Создан документ "+НоваяСчетФактура.Ссылка);
				// Добавление записи на вкладку история
				НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
				НоваяСтрокаИстории.Дата = ТекущаяДата();
				НоваяСтрокаИстории.Ссылка = НоваяСчетФактура.Ссылка;
			Исключение
				Предупреждение("Не уникален номер счета фактуры, запись невозможна: "+НоваяСчетФактура.Ссылка);
			КонецПопытки;
			ОткрытьЗначение(НоваяСчетФактура);
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Накладная" или ТипТекущегоДокумента = "УПД (Передаточный документ)"Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ(Истина, Истина);
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ();
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка; 
			ОткрытьЗначение(НовоеПоступление);
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ();
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			ОткрытьЗначение(НоваяРеализация);
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Акт" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ(Истина, Истина);
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка;
			ОткрытьЗначение(НовоеПоступление);
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			Если не НайтиСуществующийДокумент() Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация = СоздатьИЗаполнитьАктОбОказании();
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			ОткрытьЗначение(НоваяРеализация);
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Функция проверки существования документа с такими реквизитами в базе данных
// 
// Возвращаемое значение:
//  Булево
//
Функция НайтиСуществующийДокумент()
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	Номер = Реквизиты.Найти("Номер","Название").Значение;
	Организация = Реквизиты.Найти("Организация","Название").Значение;
	Контрагент = Реквизиты.Найти("Контрагент","Название").Значение;
	Если ТипТекущегоДокумента = "Акт" или ТипТекущегоДокумента = "Накладная" или ТипТекущегоДокумента = "УПД (Передаточный документ)"Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда 
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПоступлениеТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Организация = &Организация
				|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И ПоступлениеТоваровУслуг.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+ВыборкаДетальныеЗаписи.Ссылка+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" и ТипТекущегоДокумента = "Акт" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	АктОбОказанииПроизводственныхУслуг.Ссылка
				|ИЗ
				|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
				|ГДЕ
				|	АктОбОказанииПроизводственныхУслуг.Организация = &Организация
				|	И АктОбОказанииПроизводственныхУслуг.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И АктОбОказанииПроизводственныхУслуг.Дата = &Дата"; 
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+ВыборкаДетальныеЗаписи.Ссылка+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда 
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	РеализацияТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|ГДЕ
				|	РеализацияТоваровУслуг.Организация = &Организация
				|	И РеализацияТоваровУслуг.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И РеализацияТоваровУслуг.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+ВыборкаДетальныеЗаписи.Ссылка+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Счет-фактура" или ТипТекущегоДокумента = "УПД (Передаточный документ и СФ)" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураПолученный.Ссылка
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|ГДЕ
				|	СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураПолученный.ДатаВходящегоДокумента = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+ВыборкаДетальныеЗаписи.Ссылка+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураВыданный.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураВыданный.Номер = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+ВыборкаДетальныеЗаписи.Ссылка+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Функция создания нового документа Акт об оказании производственных услуг в базе данных
// 
// Возвращаемое значение:
//  Ссылка на созданный документ 
//
Функция СоздатьИЗаполнитьАктОбОказании()
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	Организация = Реквизиты.Найти("Организация","Название").Значение;
	Контрагент = Реквизиты.Найти("Контрагент","Название").Значение;
	
	НоваяРеализация = Документы.АктОбОказанииПроизводственныхУслуг.СоздатьДокумент();
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаВДокументеПродажи Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НоваяРеализация.Дата = Дата;
	НоваяРеализация.Организация = Организация;
	НоваяРеализация.Контрагент = Контрагент;
	НоваяРеализация.УчитыватьНДС = УчитыватьНДС;
	НоваяРеализация.СуммаВключаетНДС = СуммаВклНДС;
	НоваяРеализация.КурсВзаиморасчетов = 1;
	НоваяРеализация.ВалютаДокумента = мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НоваяРеализация,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НоваяРеализация.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НоваяРеализация.Контрагент) и ТипЗнч(НоваяРеализация.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НоваяРеализация.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НоваяРеализация.Организация) и ТипЗнч(НоваяРеализация.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НоваяРеализация.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Предупреждение("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НоваяРеализация.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансовАкт(НоваяРеализация);
	// Заполнение счетов
	НоваяРеализация.СчетЗатрат = ОбработкаОбъект.СчетУчетаПродажа;
	НоваяРеализация.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПродажа;
	НоваяРеализация.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПродажа;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.Исходная Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			Продолжить;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
									   НоваяРеализация.Контрагент, НоваяРеализация.ТипЦен, НоваяРеализация.ДоговорКонтрагента, НоваяРеализация.Дата, 
									   НоваяРеализация.ВалютаДокумента, НоваяРеализация.УчитыватьНДС, НоваяРеализация.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаТЧДокумента, НоваяРеализация, мВалютаРегламентированногоУчета);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.ПлановаяСтоимость = НоваяСтрокаТЧДокумента.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
				НоваяСтрокаТЧДокумента.СуммаПлановая = НоваяСтрокаТЧДокумента.Сумма;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.ПлановаяСтоимость = НоваяСтрокаТЧДокумента.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
				НоваяСтрокаТЧДокумента.СуммаПлановая = НоваяСтрокаТЧДокумента.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяРеализация;	
КонецФункции

// Функция создания нового документа РеализацияТиУ в базе данных
// 
// Возвращаемое значение:
//  Ссылка на созданный документ 
//
Функция СоздатьИЗаполнитьРеализациюТиУ()
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	Организация = Реквизиты.Найти("Организация","Название").Значение;
	Контрагент = Реквизиты.Найти("Контрагент","Название").Значение;
	
	НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	НоваяРеализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаВДокументеПродажи Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НоваяРеализация.Дата = Дата;
	НоваяРеализация.Организация = Организация;
	НоваяРеализация.Контрагент = Контрагент;
	НоваяРеализация.Склад = Реквизиты.Найти("Склад","Название").Значение;
	НоваяРеализация.УчитыватьНДС = УчитыватьНДС;
	НоваяРеализация.СуммаВключаетНДС = СуммаВклНДС;
	НоваяРеализация.КурсВзаиморасчетов = 1;
	НоваяРеализация.ВалютаДокумента = мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если НЕ НоваяРеализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НоваяРеализация,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НоваяРеализация.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НоваяРеализация.Контрагент) и ТипЗнч(НоваяРеализация.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НоваяРеализация.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НоваяРеализация.Организация) и ТипЗнч(НоваяРеализация.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НоваяРеализация.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Предупреждение("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НоваяРеализация.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансовРеализация(НоваяРеализация);
	// Заполнение счетов
	НоваяРеализация.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПродажа;
	НоваяРеализация.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПродажа;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.Исходная Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Товары.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
									   НоваяРеализация.Контрагент, НоваяРеализация.ТипЦен, НоваяРеализация.ДоговорКонтрагента, НоваяРеализация.Дата, 
									   НоваяРеализация.ВалютаДокумента, НоваяРеализация.УчитыватьНДС, НоваяРеализация.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаТЧДокумента, НоваяРеализация, мВалютаРегламентированногоУчета);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчета = ОбработкаОбъект.СчетУчетаПродажа;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			Если НоваяСтрокаТЧДокумента.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
				НоваяСтрокаТЧДокумента.Субконто = Новый(НоваяСтрокаТЧДокумента.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
				Если ТипЗнч(НоваяСтрокаТЧДокумента.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					НоваяСтрокаТЧДокумента.Субконто = НоваяСтрокаТЧДокумента.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			Иначе
				НоваяСтрокаТЧДокумента.Субконто = Неопределено;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Содержание = Строка(СтрокаТЧ.Номенклатура.НаименованиеПолное);
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
									   НоваяРеализация.Контрагент, НоваяРеализация.ТипЦен, НоваяРеализация.ДоговорКонтрагента, НоваяРеализация.Дата, 
									   НоваяРеализация.ВалютаДокумента, НоваяРеализация.УчитыватьНДС, НоваяРеализация.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаТЧДокумента, НоваяРеализация, мВалютаРегламентированногоУчета);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяРеализация;
КонецФункции // СоздатьИЗаполнитьРеализациюТиУ()

// Функция создания нового документа ПоступлениеТиУ в базе данных
//
// Параметры:
//  ВходящийНомер	 - булевская переменная, отвечает за заполнение входящего номера
//  ВходящаяДата	 - булевская переменная, отвечает за заполнение входящей даты
// 
// Возвращаемое значение:
//  Ссылка на созданный документ
//
Функция СоздатьИЗаполнитьПостплениеТиУ(ВходящийНомер = Ложь, ВходящаяДата = Ложь)
	Дата = Реквизиты.Найти("Дата","Название").Значение;
	Номер = Реквизиты.Найти("Номер","Название").Значение;
	Организация = Реквизиты.Найти("Организация","Название").Значение;
	Контрагент = Реквизиты.Найти("Контрагент","Название").Значение;
	
	НовоеПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовоеПоступление.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаВДокументеПокупки Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НовоеПоступление.Дата = Дата;
	Если ВходящаяДата и не ПредъявленСчетФактура Тогда 
		НовоеПоступление.ДатаВходящегоДокумента = Дата;
	КонецЕсли;
	Если ВходящийНомер и не ПредъявленСчетФактура Тогда 
		НовоеПоступление.НомерВходящегоДокумента = Номер;
	КонецЕсли;
	НовоеПоступление.Организация = Организация;
	НовоеПоступление.Контрагент = Контрагент;
	НовоеПоступление.Склад = Реквизиты.Найти("Склад","Название").Значение;
	НовоеПоступление.УчитыватьНДС = УчитыватьНДС;
	НовоеПоступление.СуммаВключаетНДС = СуммаВклНДС;
	НовоеПоступление.КурсВзаиморасчетов = 1;
	НовоеПоступление.ВалютаДокумента = мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НовоеПоступление,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НовоеПоступление.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НовоеПоступление.Контрагент) и ТипЗнч(НовоеПоступление.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НовоеПоступление.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НовоеПоступление.Организация) и ТипЗнч(НовоеПоступление.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НовоеПоступление.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				НовыйДоговор.Наименование = "Договор с поставщиком от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Предупреждение("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НовоеПоступление.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансов(НовоеПоступление);
	// Заполнение счетов
	НовоеПоступление.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПокупка;
	НовоеПоступление.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПокупка;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.Исходная Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			НоваяСтрокаТЧДокумента = НовоеПоступление.Товары.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
									   НовоеПоступление.Контрагент, НовоеПоступление.ТипЦен, НовоеПоступление.ДоговорКонтрагента, НовоеПоступление.Дата, 
									   НовоеПоступление.ВалютаДокумента, НовоеПоступление.УчитыватьНДС, НовоеПоступление.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрокаТЧДокумента, НовоеПоступление, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчета = ОбработкаОбъект.СчетУчетаПокупка;
			НоваяСтрокаТЧДокумента.СчетУчетаНДС = ОбработкаОбъект.СчетУчетаНДСПокупка;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НовоеПоступление.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Содержание = Строка(СтрокаТЧ.Номенклатура.НаименованиеПолное);
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
									   НовоеПоступление.Контрагент, НовоеПоступление.ТипЦен, НовоеПоступление.ДоговорКонтрагента, НовоеПоступление.Дата, 
									   НовоеПоступление.ВалютаДокумента, НовоеПоступление.УчитыватьНДС, НовоеПоступление.СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрокаТЧДокумента, НовоеПоступление, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетЗатрат = ОбработкаОбъект.СчетЗатратБУПокупка;
			НоваяСтрокаТЧДокумента.СчетЗатратНУ = ОбработкаОбъект.СчетЗатратНУПокупка;
			НоваяСтрокаТЧДокумента.СчетУчетаНДС = ОбработкаОбъект.СчетУчетаНДСУслугиПокупка;
		КонецЕсли;
	КонецЦикла;
	Если ПредъявленСчетФактура Тогда
		НовоеПоступление.ПредъявленСчетФактура = ПредъявленСчетФактура;
		НовоеПоступление.НомерВходящегоСчетаФактуры = Номер;
		НовоеПоступление.ДатаВходящегоСчетаФактуры = Дата;
		НовоеПоступление.КодВидаОперации = "01";
		НовоеПоступление.НДСПредъявленКВычету = Истина;
	КонецЕсли;
	Возврат НовоеПоступление;
КонецФункции // СоздатьПостплениеТиУ()

// Процедура - Установить способ зачета авансов для документа Акт об оказании производственных услуг
//
// Параметры:
//  Документ - ссылка на документ 
//
Процедура УстановитьСпособЗачетаАвансовАкт(Документ)
	Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Документ.ЗачетАвансов.Очистить();	
КонецПроцедуры

// Процедура - Установить способ зачета авансов для документа ПоступлениеТиУ
//
// Параметры:
//  Документ - ссылка на документ 
//
Процедура УстановитьСпособЗачетаАвансов(Документ)

	Если (Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		ИЛИ (Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		Документ.СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Документ.ЗачетАвансов.Очистить();

КонецПроцедуры

// Процедура - Установить способ зачета авансов для документа РеализацияТиУ
//
// Параметры:
//  Документ - ссылка на документ 
//
Процедура УстановитьСпособЗачетаАвансовРеализация(Документ)

	Если (Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		ИЛИ (Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		Документ.СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Документ.ЗачетАвансов.Очистить();

КонецПроцедуры

// Цветовое оформление списка реквизитов
//
Процедура РеквизитыПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл 
	    ЗначениеЯчейки = ОформлениеСтроки.Ячейки.Значение.Значение;
		ИсходноеЗначениеЯчейки = ОформлениеСтроки.Ячейки.ИсходноеЗначение.Значение;
		Если не ЗначениеЯчейки = ИсходноеЗначениеЯчейки Тогда 
	        ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.НейтральноЗеленый; 
		КонецЕсли;
		Если ОформлениеСтроки.ДанныеСтроки.Название = "Организация" Тогда
			Если ТипЗнч(ОформлениеСтроки.ДанныеСтроки.Значение)=Тип("Строка") Тогда 
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.Лосось;
			ИначеЕсли не ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Значение) Тогда 
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.Лосось;
			КонецЕсли;
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Название = "Контрагент" Тогда
			Если ТипЗнч(ОформлениеСтроки.ДанныеСтроки.Значение)=Тип("Строка") Тогда 
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.Лосось;
			ИначеЕсли не ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Значение) Тогда 
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.Лосось;
			КонецЕсли;
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Название = "Дата" Тогда
			Если не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = WebЦвета.Лосось;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Кнопка возвращения исходного значения реквизита
//
Процедура КоманднаяПанельРеквизитыВернутьИсходноеЗначение(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	ТекущаяСтрока.Значение = ТекущаяСтрока.ИсходноеЗначение;
КонецПроцедуры

// Кнопка подбора рекомендуемого значения для ячейки ТЧ
//
Процедура КоманднаяПанельТЧРекомендуемоеЗначение(Кнопка)
	//ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	//Если ТекущаяСтрока.Исходная Тогда 
	//	Возврат;
	//КонецЕсли;
	//Если ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Количество Тогда 
	//	Если ТекущаяСтрока.Цена = 0 Тогда 
	//		РекомендуемоеЗначение = 1;
	//		Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.Количество = РекомендуемоеЗначение;
	//			ПриОкончанииРедактирования(Неопределено);
	//		КонецЕсли;
	//	Иначе
	//		РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Цена,3);
	//		Если РекомендуемоеЗначение = 0 Тогда 
	//			Предупреждение("Не удалось посчитать рекомендуемое значение");
	//		Иначе
	//			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да Тогда 
	//				ТекущаяСтрока.Количество = РекомендуемоеЗначение;
	//				ПриОкончанииРедактирования(Неопределено);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Цена Тогда
	//	Если ТекущаяСтрока.Количество = 0 Тогда 
	//		РекомендуемоеЗначение = 1;
	//		Ответ = Вопрос("Рекомендуемое значение ячейки количество = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.Количество = РекомендуемоеЗначение;
	//			ПриОкончанииРедактирования(Неопределено);
	//		КонецЕсли;
	//	Иначе
	//		РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,2);
	//		Если РекомендуемоеЗначение = 0 Тогда 
	//			Предупреждение("Не удалось посчитать рекомендуемое значение");
	//		Иначе
	//			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да Тогда 
	//				ТекущаяСтрока.Цена = РекомендуемоеЗначение;
	//				ПриОкончанииРедактирования(Неопределено);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.ЦенаСНДС Тогда
	//	Если ТекущаяСтрока.Количество = 0 Тогда 
	//		РекомендуемоеЗначение = 1;
	//		Ответ = Вопрос("Рекомендуемое значение ячейки количество = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.Количество = РекомендуемоеЗначение;
	//			ПриОкончанииРедактирования(Неопределено);
	//		КонецЕсли;
	//	Иначе
	//		РекомендуемоеЗначение = Окр(ТекущаяСтрока.Всего/ТекущаяСтрока.Количество,2);
	//		Если РекомендуемоеЗначение = 0 Тогда 
	//			Предупреждение("Не удалось посчитать рекомендуемое значение");
	//		Иначе
	//			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да Тогда 
	//				ТекущаяСтрока.ЦенаСНДС = РекомендуемоеЗначение;
	//				ПриОкончанииРедактирования(Неопределено);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Сумма Тогда 
	//	РекомендуемоеЗначение = Окр(ТекущаяСтрока.Цена*ТекущаяСтрока.Количество,2);
	//	Если РекомендуемоеЗначение = 0 Тогда 
	//		Предупреждение("Не удалось посчитать рекомендуемое значение");
	//	Иначе
	//		Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.Сумма = РекомендуемоеЗначение;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.СтавкаНДС Тогда
	//	Если ТекущаяСтрока.Сумма = 0 Тогда 
	//		Предупреждение("Сумма = 0, определение процентной ставки НДС невозможно,");
	//	Иначе
	//		Если ТекущаяСтрока.СуммаНДС = 0 и ТекущаяСтрока.Всего<>ТекущаяСтрока.Сумма Тогда 
	//			РекомендуемоеЗначение = Окр((ТекущаяСтрока.Всего-ТекущаяСтрока.Сумма)/ТекущаяСтрока.Сумма*100,0);
	//		Иначе
	//			РекомендуемоеЗначение = Окр(ТекущаяСтрока.СуммаНДС/ТекущаяСтрока.Сумма*100,0);
	//		КонецЕсли;
	//		Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+"%. Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			Если РекомендуемоеЗначение = 0 Тогда 
	//				ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//				ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
	//			ИначеЕсли РекомендуемоеЗначение = 10 Тогда
	//				ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	//				ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
	//			ИначеЕсли РекомендуемоеЗначение = 18 Тогда
	//				ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//				ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
	//			ИначеЕсли РекомендуемоеЗначение = 20 Тогда
	//				ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	//				ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.СуммаНДС Тогда
	//	Если СуммаВклНДС Тогда 
	//		РекомендуемоеЗначение = Окр(УчетНДС.РассчитатьСуммуНДС(ТекущаяСтрока.Всего,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС)),2);
	//	Иначе
	//		РекомендуемоеЗначение = Окр(УчетНДС.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС)),2);
	//	КонецЕсли;
	//	Если РекомендуемоеЗначение = 0 Тогда 
	//		Предупреждение("Не удалось посчитать рекомендуемое значение");
	//	Иначе
	//		Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.СуммаНДС = РекомендуемоеЗначение;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Всего Тогда 
	//	РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма+ТекущаяСтрока.СуммаНДС*Число(УчитыватьНДС),2);
	//	Если РекомендуемоеЗначение = 0 Тогда 
	//		Предупреждение("Не удалось посчитать рекомендуемое значение");
	//	Иначе
	//		Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда 
	//			ТекущаяСтрока.Всего = РекомендуемоеЗначение;
	//			ТабличнаяЧастьВсегоПриИзменении(Неопределено);
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Номенклатура Тогда
	//	МассивОтбор = Новый Массив();
	//	МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
	//	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	//	СписокПоиска.ПолучатьОписание = Истина;
	//	ПоказыватьОписания = Истина;
	//	СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	//	// Поиск исходной строки
	//	НомерСтроки = ТекущаяСтрока.НомерСтроки;
	//	ПараметрыОтбора = Новый Структура;
	//	ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
	//	ПараметрыОтбора.Вставить("Исходная", Истина);
	//	ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
	//	Если ЗначениеЗаполнено(ИсходнаяСтрока.Номенклатура) Тогда 
	//		СписокПоиска.СтрокаПоиска = Лев(Строка(ИсходнаяСтрока.Номенклатура),99); // текст поиска можно задать и так
	//		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
	//		СписокПоиска.ОбластьПоиска = МассивОтбор;
	//		СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"""","");
	//		СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"«","");
	//		СписокПоиска.ПерваяЧасть();
	//		Колво = СписокПоиска.ПолноеКоличество();
	//		Если СписокПоиска.ПолноеКоличество() = 0 Тогда
	//			Предупреждение("Ничего не найдено!" );
	//			Если СписокПоиска.СлишкомМногоРезультатов() Тогда
	//				Предупреждение("Найдено слишком много результатов!");
	//			КонецЕсли;
	//			Возврат;
	//		КонецЕсли;
	//		ФормаПохожейНоменклатуры = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораПохожейНоменклатуры");
	//		СписокПохожейНоменклатуры = ФормаПохожейНоменклатуры.СписокПохожейНоменклатуры;
	//		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
	//			Значение = СписокПоиска.Получить(Индекс).Значение;
	//			Если не Значение.ПометкаУдаления Тогда 
	//				СтрокаСпискаПохожейНоменклатуры = СписокПохожейНоменклатуры.Добавить();
	//				СтрокаСпискаПохожейНоменклатуры.Номенклатура = Значение;
	//			КонецЕсли;
	//		КонецЦикла;
	//		ФормаПохожейНоменклатуры.ИсходнаяСтрока = ИсходнаяСтрока.Номенклатура; 
	//		РекомендуемоеЗначение = ФормаПохожейНоменклатуры.ОткрытьМодально();
	//		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
	//			ТекущаяСтрока.Номенклатура = РекомендуемоеЗначение;
	//			ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Неопределено)
	//		КонецЕсли;		
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

// Процедура - Обновление отображения
//
Процедура ОбновлениеОтображения()
	ВсегоРасчетное = 0;
	НДСРасчетное = 0;
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если не Строка.Исходная Тогда
			Если не ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(Строка.Номенклатура)Тогда 
					Строка.ЕдиницаИзмерения = Строка.Номенклатура.БазоваяЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			ВсегоРасчетное = ВсегоРасчетное+Строка.Всего;
			НДСРасчетное = НДСРасчетное+Строка.СуммаНДС;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Кнопка возвращения исходного значения в ячейку ТЧ
//
Процедура КоманднаяПанельТЧВернутьИсходноеЗначение(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если ТекущаяСтрока.Исходная Тогда 
		Возврат;
	КонецЕсли;
	НомерСтроки = ТекущаяСтрока.НомерСтроки;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыОтбора.Вставить("Исходная", Истина);
	ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
	Если ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Номенклатура Тогда 
		ТекущаяСтрока.Номенклатура = ИсходнаяСтрока.Номенклатура;
		ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Неопределено);
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Количество Тогда 
		ТекущаяСтрока.Количество = ИсходнаяСтрока.Количество;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Цена Тогда
		ТекущаяСтрока.Цена = ИсходнаяСтрока.Цена;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.ЦенаСНДС Тогда
		ТекущаяСтрока.ЦенаСНДС = ИсходнаяСтрока.ЦенаСНДС;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Сумма Тогда
		ТекущаяСтрока.Сумма = ИсходнаяСтрока.Сумма;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.СтавкаНДС Тогда 
		ТекущаяСтрока.СтавкаНДС = ИсходнаяСтрока.СтавкаНДС;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.СуммаНДС Тогда
		ТекущаяСтрока.СуммаНДС = ИсходнаяСтрока.СуммаНДС;
	ИначеЕсли ЭлементыФормы.ТабличнаяЧасть.ТекущаяКолонка = ЭлементыФормы.ТабличнаяЧасть.Колонки.Всего Тогда
		ТекущаяСтрока.Всего = ИсходнаяСтрока.Всего;
	КонецЕсли;
КонецПроцедуры

// Кнопка позволяет создать новую номенклатуру по строковым значениям в колонках ТЧ и заполнить ссskre на нее вместо строки с названием
//
Процедура КоманднаяПанельТЧСоздатьНовуюНоменклатуру(Кнопка)
	НужнаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если НужнаяСтрока = Неопределено или НужнаяСтрока.Исходная Тогда 
		Возврат;
	КонецЕсли;
	Если ТипЗнч(НужнаяСтрока.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("В данной строке уже выбрана существующая номенклатура");
	Иначе
		ФормаНовойНоменклатуры = ОбработкаОбъект.ПолучитьФорму("ФормаНовойНоменклатуры");
		ФормаНовойНоменклатуры.Наименование = НужнаяСтрока.Номенклатура;
		ФормаНовойНоменклатуры.НаименованиеПолное = НужнаяСтрока.Номенклатура;
		Если НужнаяСтрока.ТипНоменклатуры = "Товар" Тогда 
			Если ТипЗнч(НужнаяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда 
				ФормаНовойНоменклатуры.БазоваяЕдиницаИзмерения = НужнаяСтрока.ЕдиницаИзмерения;
			КонецЕсли;
		Иначе
			ФормаНовойНоменклатуры.Услуга = Истина;
		КонецЕсли;
		НоваяНоменклатура = ФормаНовойНоменклатуры.ОткрытьМодально();
		Если ЗначениеЗаполнено(НоваяНоменклатура) Тогда
			НужнаяСтрока.Номенклатура = НоваяНоменклатура.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "Ставка НДС"
//
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	Строка = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать сумму НДС?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Строка.Цена<>0 и Строка.Количество<>0 Тогда
			Строка.Сумма = Окр(Строка.Цена * Строка.Количество, 2);
		КонецЕсли;
		Если Строка.Сумма<>0 Тогда
			Если СуммаВклНДС Тогда 
				Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Всего,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			Иначе
				Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Сумма,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			КонецЕсли;
			Строка.Всего = Строка.Сумма+Строка.СуммаНДС*Число(УчитыватьНДС);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "Сумма НДС"
//
Процедура ТабличнаяЧастьСуммаНДСПриИзменении(Элемент)
	Строка = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать общую сумму", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Строка.Сумма<>0 Тогда
			Строка.Всего = Строка.Сумма+Строка.СуммаНДС*Число(УчитыватьНДС);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Кнопка открытия формы словаря соответствий
//
Процедура КоманднаяПанель1ОткрытьСловарьСоответствийНоменклатуры(Кнопка)
	ФормаСловаряСоответствий = ОбработкаОбъект.ПолучитьФорму("ФормаСловаряСоответствийНоменклатуры");
	Если не ФормаСловаряСоответствий.Открыта() Тогда 
		ФормаСловаряСоответствий.Открыть();
	КонецЕсли;
КонецПроцедуры

// Процедура открывает форму создания организации и заполняет ссылку на нее в реквизитах, если она в итоге создана
//
Процедура КоманднаяПанельВерхняяКнопкаДобавитьОрганизацию(Кнопка)
	НужнаяСтрока = ОбработкаОбъект.Сканирование[НомерВТЧСканирование];
	НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
	НоваяОрганизация.ИНН = НужнаяСтрока.ОрганизацияИНН;
	НоваяОрганизация.Наименование = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПолное = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПлательщикаПриПеречисленииВБюджет = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеСокращенное = НужнаяСтрока.Организация;
	НоваяОрганизация.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();
	//Организация = НайтиОрганизацию(НужнаяСтрока.КонтрагентИНН,НужнаяСтрока.КонтрагентКПП);
	Если ЗначениеЗаполнено(НоваяОрганизация.Ссылка) Тогда
		СтрокаОрганизации = Реквизиты.Найти("Организация","Название");
		СтрокаОрганизации.Значение = НоваяОрганизация.Ссылка;
	КонецЕсли;
КонецПроцедуры

// Процедура открывает форму создания контрагента и заполняет ссылку на него в реквизитах, если контрагент в итоге создана
//
Процедура КоманднаяПанельВерхняяКнопкаДобавитьКонтрагента(Кнопка)
	НужнаяСтрока = ОбработкаОбъект.Сканирование[НомерВТЧСканирование];
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.ИНН = НужнаяСтрока.КонтрагентИНН;
	НовыйКонтрагент.КПП = НужнаяСтрока.КонтрагентКПП;
	НовыйКонтрагент.Наименование = НужнаяСтрока.Контрагент;
	НовыйКонтрагент.НаименованиеПолное = НужнаяСтрока.Контрагент;
	НовыйКонтрагент.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();
	//Контрагент = НайтиКонтрагента(НужнаяСтрока.КонтрагентИНН,НужнаяСтрока.КонтрагентКПП);
	Если ЗначениеЗаполнено(НовыйКонтрагент.Ссылка) Тогда
		СтрокаКонтрагента = Реквизиты.Найти("Контрагент","Название");
		СтрокаКонтрагента.Значение = НовыйКонтрагент.Ссылка;
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = НовыйКонтрагент.Ссылка;
		Если ЗначениеЗаполнено(НужнаяСтрока.Организация) и ТипЗнч(НужнаяСтрока.Организация)<>Тип("Строка") Тогда 
			НовыйДоговор.Организация = НужнаяСтрока.Организация;
			НовыйДоговор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета; 
			Если НужнаяСтрока.ВидДокумента = "Поступление" Тогда 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				НовыйДоговор.Наименование = "Договор с поставщиком от "+ТекущаяДата();
				НовыйДоговор.Записать();
			ИначеЕсли НужнаяСтрока.ВидДокумента = "Реализация" Тогда
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Предупреждение("Не определен вид документа, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Кнопка подбора рекомендуемого значения для реквизита документа
//
Процедура КоманднаяПанельРеквизитыРекомендуемоеЗначение(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	Если не ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда 
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		МассивОтбор = Новый Массив();
		МассивОтбор.Добавить(Метаданные.Справочники.Организации);
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
		СписокПоиска.ПолучатьОписание = Истина;
		ПоказыватьОписания = Истина;
		СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
		Если ТипЗнч(ТекущаяСтрока.Значение) = Тип("Строка") Тогда 
			ОрганизацияНаименование = ТекущаяСтрока.Значение;
		Иначе
			ОрганизацияНаименование = ТекущаяСтрока.Значение.Наименование;
		КонецЕсли;
		СписокПоиска.СтрокаПоиска = Лев(Строка(ОрганизацияНаименование),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		СписокПоиска.ПерваяЧасть();
		Колво = СписокПоиска.ПолноеКоличество();
		Если СписокПоиска.ПолноеКоличество() = 0 Тогда
			Предупреждение("Ничего не найдено!" );
			Если СписокПоиска.СлишкомМногоРезультатов() Тогда
				Предупреждение("Найдено слишком много результатов!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ФормаПохожихОрганизаций = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораОрганизации");
		ФормаПохожихОрганизаций.Заголовок = "Список подходящих организаций";
		СписокПохожихОрганизаций = ФормаПохожихОрганизаций.СписокПохожихОрганизаций;
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда 
				СтрокаСпискаПохожихОрганизаций = СписокПохожихОрганизаций.Добавить();
				СтрокаСпискаПохожихОрганизаций.Название = Значение;
			КонецЕсли;
		КонецЦикла;
		ФормаПохожихОрганизаций.ИсходнаяСтрока = ОрганизацияНаименование; 
		РекомендуемоеЗначение = ФормаПохожихОрганизаций.ОткрытьМодально();
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Значение = РекомендуемоеЗначение;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		МассивОтбор = Новый Массив();
		МассивОтбор.Добавить(Метаданные.Справочники.Контрагенты);
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
		СписокПоиска.ПолучатьОписание = Истина;
		ПоказыватьОписания = Истина;
		СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
		Если ТипЗнч(ТекущаяСтрока.Значение) = Тип("Строка") Тогда 
			КонтрагентНаименование = ТекущаяСтрока.Значение;
		Иначе
			КонтрагентНаименование = ТекущаяСтрока.Значение.Наименование;
		КонецЕсли;
		СписокПоиска.СтрокаПоиска = Лев(Строка(КонтрагентНаименование),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		СписокПоиска.ПерваяЧасть();
		Колво = СписокПоиска.ПолноеКоличество();
		Если СписокПоиска.ПолноеКоличество() = 0 Тогда
			Предупреждение("Ничего не найдено!" );
			Если СписокПоиска.СлишкомМногоРезультатов() Тогда
				Предупреждение("Найдено слишком много результатов!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ФормаПохожихКонтрагентов = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораОрганизации");
		ФормаПохожихКонтрагентов.Заголовок = "Список подходящих контрагентов";
		СписокПохожихОрганизаций = ФормаПохожихКонтрагентов.СписокПохожихОрганизаций;
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда 
				СтрокаСпискаПохожихОрганизаций = СписокПохожихОрганизаций.Добавить();
				СтрокаСпискаПохожихОрганизаций.Название = Значение;
			КонецЕсли;
		КонецЦикла;
		ФормаПохожихКонтрагентов.ИсходнаяСтрока = КонтрагентНаименование; 
		РекомендуемоеЗначение = ФормаПохожихКонтрагентов.ОткрытьМодально();
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Значение = РекомендуемоеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Кнопка удаления документа из списка обрабатываемых документов
//
Процедура ОсновныеДействияФормыУдалитьДокумент(Кнопка)
	//Ответ = Вопрос("Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет);
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ОбработкаОбъект.Сканирование.Удалить(НомерВТЧСканирование);
	//	КомДокумент = ОбработкаОбъект.ВсеДокументы[НомерВТЧСканирование].Документ;
	//	КомДокумент.RemoveDocument();
	//	ОбработкаОбъект.ВсеДокументы.Удалить(НомерВТЧСканирование);
	//	Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
	//		Предупреждение("Все документы отправлены, форма будет закрыта");
	//		ЭтаФорма.Закрыть();
	//	Иначе
	//		ПерейтиКСледующемуДокументу();
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

// Переход к следующему документу
//
Процедура ПерейтиКСледующемуДокументу()
	Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
		Предупреждение("Все документы отправлены, форма будет закрыта");
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	НомерВТЧСканирование = НомерТекущегоДокумента;
	Пока не ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать Цикл
		номерТекущегоДокумента = номерТекущегоДокумента + 1;
		Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
			Предупреждение("Все документы отправлены, форма будет закрыта");
			ЭтаФорма.Закрыть();
			Возврат;
		Иначе
			НомерВТЧСканирование = НомерТекущегоДокумента;
		КонецЕсли;
	КонецЦикла;
	ТипТекущегоДокумента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ТипДокумента;
	ВидТекущегоДокумента = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ВидДокумента;
	ЗаполнитьТаблицуДокументом();
КонецПроцедуры

// Кнопка пропускает текущий документ и переходит к обработке следующего
//
Процедура ОсновныеДействияФормыПропуститьДокумент(Кнопка)
	//ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	//НомерТекущегоДокумента = НомерТекущегоДокумента + 1;
	//Если (НомерТекущегоДокумента = ОбработкаОбъект.ВсеДокументы.Количество()) Тогда 
	//	Предупреждение("Все документы отправлены, форма будет закрыта");
	//	ЭтаФорма.Закрыть();
	//Иначе
	//	ПерейтиКСледующемуДокументу();
	//КонецЕсли;
КонецПроцедуры

// Формирование списка значений для дальнейшего выбора в колонке "номенклатура" ТЧ
//
Процедура ТабличнаяЧастьНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	СписокПоиска.ПолучатьОписание = Истина;
	ПоказыватьОписания = Истина;
	СписокПоиска.ПорогНечеткости = 40; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	// Поиск исходной строки
	НомерСтроки = ТекущаяСтрока.НомерСтроки;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыОтбора.Вставить("Исходная", Истина);
	ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
	Если не ЗначениеЗаполнено(ИсходнаяСтрока.Номенклатура) Тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Номенклатура,"Оставить текущее значение");
	Иначе
		СписокПоиска.СтрокаПоиска = Лев(Строка(ИсходнаяСтрока.Номенклатура),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		
		СписокПоиска.ПерваяЧасть();
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Номенклатура,"Оставить текущее значение");
		ТаблицаДляСортировки = Новый ТаблицаЗначений;
		ТаблицаДляСортировки.Колонки.Добавить("Значение");
		ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
		ТаблицаДляСортировки.Очистить();
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда
				Строка1 = Значение.Наименование; 
				Строка2 = Строка(ИсходнаяСтрока.Номенклатура);
				//++АК luza
				//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
				ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
				//--АК luza
				
				СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
				СтрокаТаблицы.Значение = Значение;
				СтрокаТаблицы.ЗначениеДляСортировки = Окр(ПроцентПохожести, 2);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДляСортировки.Количество()>5 Тогда 
			Счетчик = 5;
		Иначе
			Счетчик = ТаблицаДляСортировки.Количество();
		КонецЕсли;
		ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
		Для Индекс = 0 По Счетчик-1 Цикл
			СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
			Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
			СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
		КонецЦикла;	
	КонецЕсли;
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	//Элемент.Значение = Справочники.Номенклатура.ПустаяСсылка();
	Элемент.СписокВыбора = СписокЗначений;
КонецПроцедуры

// Формирование списка значений для выбора в списке реквизитов
//
Процедура РеквизитыЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	// Текущая строка
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	Если ТекущаяСтрока.Название = "Организация" или ТекущаяСтрока.Название = "Контрагент"Тогда
		// Обновляем индекс
		МассивОтбор = Новый Массив();
		Если ТекущаяСтрока.Название = "Организация" Тогда
			МассивОтбор.Добавить(Метаданные.Справочники.Организации);
		ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда 
			МассивОтбор.Добавить(Метаданные.Справочники.Контрагенты);
		КонецЕсли;
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
		СписокПоиска.ПолучатьОписание = Истина;
		ПоказыватьОписания = Истина;
		СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
		Если ТипЗнч(ТекущаяСтрока.ИсходноеЗначение) = Тип("Строка") Тогда 
			ОрганизацияНаименование = ТекущаяСтрока.ИсходноеЗначение;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИсходноеЗначение) Тогда 
				ОрганизацияНаименование = ТекущаяСтрока.ИсходноеЗначение.Наименование;
			Иначе
				ОрганизацияНаименование = ТекущаяСтрока.ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ОрганизацияНаименование) Тогда 
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Очистить();
			//СписокЗначений.Добавить(ТекущаяСтрока.Значение,"Оставить текущее значение");
		Иначе
			СписокПоиска.СтрокаПоиска = Лев(Строка(ОрганизацияНаименование),99); // текст поиска можно задать и так
			СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
			СписокПоиска.ОбластьПоиска = МассивОтбор;
			ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
			СписокПоиска.ПерваяЧасть();
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Очистить();
			//СписокЗначений.Добавить(ТекущаяСтрока.Значение,"Оставить текущее значение");
			ТаблицаДляСортировки = Новый ТаблицаЗначений;
			ТаблицаДляСортировки.Колонки.Добавить("Значение");
			ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
			ТаблицаДляСортировки.Очистить();
			Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
				Значение = СписокПоиска.Получить(Индекс).Значение;
				Если не Значение.ПометкаУдаления Тогда
					Строка1 = Значение.Наименование; 
					Строка2 = Строка(ТекущаяСтрока.ИсходноеЗначение); 
					
					//++АК luza
					//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);					
					ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
					//--АК luza
					
					СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
					СтрокаТаблицы.Значение = Значение;
					СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
				КонецЕсли;
			КонецЦикла;
			Если ТаблицаДляСортировки.Количество()>5 Тогда 
				Счетчик = 5;
			Иначе
				Счетчик = ТаблицаДляСортировки.Количество();
			КонецЕсли;
			ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
			Для Индекс = 0 По Счетчик-1 Цикл
				СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
				Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
				СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
			КонецЦикла;
			//Если ТекущаяСтрока.Название = "Организация" Тогда
			//	Элемент.Значение = Справочники.Организации.ПустаяСсылка();
			//ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда 
			//	Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
			//КонецЕсли;	
		КонецЕсли;
		СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
		Элемент.СписокВыбора = СписокЗначений;
	ИначеЕсли ТекущаяСтрока.Название = "Вид документа" Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		СписокЗначений.Добавить("Поступление","Поступление");
		СписокЗначений.Добавить("Реализация","Реализация");
		Элемент.СписокВыбора = СписокЗначений;
	ИначеЕсли ТекущаяСтрока.Название = "Тип документа" Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		СписокЗначений.Добавить("Накладная","Накладная");
		СписокЗначений.Добавить("Счет-фактура","Счет-фактура");
		СписокЗначений.Добавить("УПД (Передаточный документ)","УПД (Передаточный документ)");
		СписокЗначений.Добавить("УПД (Передаточный документ и СФ)","УПД (Передаточный документ и СФ)");
		СписокЗначений.Добавить("Акт","Акт");
		Элемент.СписокВыбора = СписокЗначений;
	Иначе
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		Элемент.СписокВыбора = СписокЗначений;
	КонецЕсли;
КонецПроцедуры

// Запрет изменения исходных данных для строки ТЧ
//
Процедура ТабличнаяЧастьПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Исходная = ТекущаяСтрока.Исходная;
	
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Пометка.ТолькоПросмотр = Исходная;

	ЭлементыФормы.ТабличнаяЧасть.Колонки.ТипНоменклатуры.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Номенклатура.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Количество.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Цена.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ЦенаСНДС.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Сумма.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.СтавкаНДС.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.СуммаНДС.ТолькоПросмотр = Исходная;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.Всего.ТолькоПросмотр = Исходная;
	Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
			ЭлементыФормы.ТабличнаяЧасть.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ТабличнаяЧасть.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Исходная;
	КонецЕсли;
КонецПроцедуры

// Удаление строки с исходными данными при удалении строки в ТЧ
//
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Вы действительно хотите удалить строку?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	НомерУдаляемойСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерУдаляемойСтроки);
	СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из СтрокиДляУдаления Цикл
		ТабличнаяЧасть.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

// Формирование кнопок элемента управления для разных строк в списке реквизитов
//
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	Если ТекущаяСтрока.Название = "Организация" или ТекущаяСтрока.Название = "Контрагент" или ТекущаяСтрока.Название = "Тип документа" или ТекущаяСтрока.Название = "Вид документа" Тогда
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаСпискаВыбора = Истина;
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаОчистки = Истина;
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаОткрытия = Истина;
	Иначе
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаСпискаВыбора = Ложь;
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаОчистки = Ложь;
		ЭлементыФормы.Реквизиты.Колонки.Значение.ЭлементУправления.КнопкаОткрытия = Ложь;
	КонецЕсли;
КонецПроцедуры

// Добавление строки с исходными данными для новой строки ТЧ
//
Процедура ТабличнаяЧастьПередНачаломДобавления(Элемент, Отказ, Копирование)
	Если не Копирование Тогда
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			НовыйНомер = 0;
		Иначе
			НовыйНомер = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-1].НомерСтроки+1;
		КонецЕсли;
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.НомерСтроки = НовыйНомер;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		НоваяСтрока.Исходная = Ложь;
		НоваяСтрока.Всего = 0;
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.СуммаНДС = 0;
		НоваяСтрока.Цена = 0;

		
		НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Количество()-1);
		НоваяСтрока.НомерСтроки = НовыйНомер;
		НоваяСтрока.Исходная = Истина;
		Отказ = Истина;
		ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-2];
	Иначе
		СтрокаДляКопирования = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			НовыйНомер = 0;
		Иначе
			НовыйНомер = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-1].НомерСтроки+1;
		КонецЕсли;
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования);
		НоваяСтрока.НомерСтроки = НовыйНомер;
		НоваяСтрока.Исходная = Ложь;
		НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Количество() - 1);
		НоваяСтрока.НомерСтроки = НовыйНомер;
		НоваяСтрока.Исходная = Истина;
		ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-2];
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Формирование списка значений для дальнейшего выбора в колонке "единица измерения" ТЧ
//
Процедура ТабличнаяЧастьЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	СписокПоиска.ПолучатьОписание = Истина;
	ПоказыватьОписания = Истина;
	СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	// Поиск исходной строки
	НомерСтроки = ТекущаяСтрока.НомерСтроки;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыОтбора.Вставить("Исходная", Истина);
	ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
	Если не ЗначениеЗаполнено(ИсходнаяСтрока.ЕдиницаИзмерения) Тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.ЕдиницаИзмерения,"Оставить текущее значение");
	Иначе
		СписокПоиска.СтрокаПоиска = Лев(Строка(ИсходнаяСтрока.ЕдиницаИзмерения),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		СписокПоиска.ПерваяЧасть();
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.ЕдиницаИзмерения,"Оставить текущее значение");
		ТаблицаДляСортировки = Новый ТаблицаЗначений;
		ТаблицаДляСортировки.Колонки.Добавить("Значение");
		ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
		ТаблицаДляСортировки.Очистить();
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда
				Строка1 = Значение.Наименование; 
				Строка2 = Строка(ИсходнаяСтрока.ЕдиницаИзмерения); 
				
				//++АК luza
				//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
				ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
				//--АК luza

				СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
				СтрокаТаблицы.Значение = Значение;
				СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДляСортировки.Количество()>5 Тогда 
			Счетчик = 5;
		Иначе
			Счетчик = ТаблицаДляСортировки.Количество();
		КонецЕсли;
		ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
		Для Индекс = 0 По Счетчик-1 Цикл
			СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
			Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
			СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
		КонецЦикла;
	КонецЕсли;	
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	//Элемент.Значение = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	Элемент.СписокВыбора = СписокЗначений;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "единица измерения"
//
Процедура ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если не ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)Тогда 
			ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
			ЭлементыФормы.ТабличнаяЧасть.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "номенклатура"
//
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент);
КонецПроцедуры

// Обработка выбора значения из списка в колонке "Номенклатура" ТЧ
//
Процедура ТабличнаяЧастьНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда 
		ВыбранноеЗначение = Справочники.Номенклатура.ПолучитьФормуВыбора().ОткрытьМодально();
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока.Номенклатура = ВыбранноеЗначение;
КонецПроцедуры

// Обработка выбора значения из списка в колонке "единица измерения" ТЧ
//
Процедура ТабличнаяЧастьЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда 
		ВыбранноеЗначение = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуВыбора().ОткрытьМодально();
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока.ЕдиницаИзмерения = ВыбранноеЗначение;
КонецПроцедуры

// Открытие нужной формы при выборе значения в реквизитах
//
Процедура РеквизитыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		Если ТекущаяСтрока.Название = "Организация" Тогда
			ВыбранноеЗначение = Справочники.Организации.ПолучитьФормуВыбора().ОткрытьМодально();
			Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
				ВыбранноеЗначение = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
			ВыбранноеЗначение = Справочники.Контрагенты.ПолучитьФормуВыбора().ОткрытьМодально();
			Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
				ВыбранноеЗначение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТекущаяСтрока.Название = "Тип документа" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ТипДокумента = ВыбранноеЗначение;
	ИначеЕсли ТекущаяСтрока.Название = "Вид документа" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ВидДокумента = ВыбранноеЗначение;
	КонецЕсли;
	ТекущаяСтрока.Значение = ВыбранноеЗначение;
КонецПроцедуры

// Заполнение измененных данных документа из списка реквизитов
//
Процедура РеквизитыЗначениеПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.Реквизиты.ТекущаяСтрока;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация = Неопределено;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация = ТекущаяСтрока.Значение;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) = Истина Тогда
			ТекИНН = ТекущаяСтрока.Значение.ИНН;
			ТекАдрес = ОбработкаОбъект.ПолучитьАдресИзБазы(ТекущаяСтрока.Значение,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Иначе
			ТекИНН = "";
			ТекАдрес = "";
		КонецЕсли;	
				
		СтрокаАдреса = Реквизиты.Найти("Адрес организации","Название");
		Если ЗначениеЗаполнено(СтрокаАдреса) = Истина Тогда
			СтрокаАдреса.Значение = ТекАдрес;
		КонецЕсли;	
		
		СтрокаИНН = Реквизиты.Найти("ИНН организации","Название");
		Если ЗначениеЗаполнено(СтрокаАдреса) = Истина Тогда
			СтрокаИНН.Значение = ТекИНН;
		КонецЕсли;	
		
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент = Неопределено;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент = ТекущаяСтрока.Значение;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) = Истина Тогда
			ТекИНН = ТекущаяСтрока.Значение.ИНН;
			ТекАдрес = ОбработкаОбъект.ПолучитьАдресИзБазы(ТекущаяСтрока.Значение,Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Иначе
			ТекИНН = "";
			ТекАдрес = "";
		КонецЕсли;	
				
		СтрокаАдреса = Реквизиты.Найти("Адрес контрагента","Название");
		Если ЗначениеЗаполнено(СтрокаАдреса) = Истина Тогда
			СтрокаАдреса.Значение = ТекАдрес;
		КонецЕсли;	
		
		СтрокаИНН = Реквизиты.Найти("ИНН контрагента","Название");
		Если ЗначениеЗаполнено(СтрокаАдреса) = Истина Тогда
			СтрокаИНН.Значение = ТекИНН;
		КонецЕсли;	
		
	ИначеЕсли ТекущаяСтрока.Название = "Вид документа" Тогда
		ВидТекущегоДокумента = ТекущаяСтрока.Значение;
	ИначеЕсли ТекущаяСтрока.Название = "Тип документа" Тогда
		ТипТекущегоДокумента = ТекущаяСтрока.Значение;
	КонецЕсли;
КонецПроцедуры

// Запрет удаления строк в списке реквизитов документа
//
Процедура РеквизитыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "НДС"
//
Процедура УчитыватьНДСПриИзменении(Элемент)
	ЭлементыФормы.ТабличнаяЧасть.Колонки.СтавкаНДС.Видимость = УчитыватьНДС;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.СуммаНДС.Видимость = УчитыватьНДС;
	ЭлементыФормы.ТабличнаяЧасть.Колонки.ЦенаСНДС.Видимость = УчитыватьНДС;
КонецПроцедуры

// Процедура корректировки данных в ТЧ при изменении значения в колонке "всего"
//
Процедура ТабличнаяЧастьВсегоПриИзменении(Элемент)
	Строка = ЭлементыФормы.ТабличнаяЧасть.ТекущаяСтрока;
	Если ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать цену с НДС?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Строка.Количество<>0 Тогда
			Строка.ЦенаСНДС = Окр(Строка.Всего/Строка.Количество,2);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Кнопка пометки всей номенклатуры в ТЧ как товары
//
Процедура КоманднаяПанельТЧВсеТовары(Кнопка)
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Строка.ТипНоменклатуры = "Товар";	
	КонецЦикла;
КонецПроцедуры

// Кнопка пометки всей номенклатуры в ТЧ как услуги
//
Процедура КоманднаяПанельТЧВсеУслуги(Кнопка)
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Строка.ТипНоменклатуры = "Услуга";	
	КонецЦикла;
КонецПроцедуры

// Кнопка проверки соответствия типа номенклатуры указанного в ТЧ и в базе данных
//
Процедура КоманднаяПанельТЧПроверитьСоответствиеТиповНоменклатуры(Кнопка)
	Для Каждого Строка из ТабличнаяЧасть Цикл
		Если Строка.Исходная Тогда 
			Продолжить;
		КонецЕсли;
		//Если Строка.Номенклатура.Услуга и Строка.ТипНоменклатуры="Товар" Тогда 
		//	Ответ = Вопрос(""+Строка.Номенклатура+" помечена как товар, но является услугой. Изменить тип номенклатуры?",РежимДиалогаВопрос.ДаНет);
		//	Если Ответ = КодВозвратаДиалога.Да Тогда 
		//		Строка.ТипНоменклатуры = "Услуга";
		//	КонецЕсли;
		//ИначеЕсли не Строка.Номенклатура.Услуга и Строка.ТипНоменклатуры="Услуга" Тогда 
		//	Ответ = Вопрос(""+Строка.Номенклатура+" помечена как услуга, но является товаром. Изменить тип номенклатуры?",РежимДиалогаВопрос.ДаНет);
		//	Если Ответ = КодВозвратаДиалога.Да Тогда 
		//		Строка.ТипНоменклатуры = "Товар";
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Изменение шрифта для строк ТЧ
//
Процедура ТабличнаяЧастьПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если не ДанныеСтроки.Исходная Тогда
		МойШрифт = Новый Шрифт("MS Shell Dlg", 8, Истина);
		ОформлениеСтроки.Шрифт = МойШрифт; 	
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Не ДанныеСтроки.Исходная;
КонецПроцедуры

// Процедура обновления полнотекстового индекса
//
Процедура КоманднаяПанельВерхняяОбновитьПолнотекстовыйИндекс(Кнопка)
	ОбработкаОбъект.ОбновитьПолнотекстовыйИндекс();
КонецПроцедуры

// Кнопка замены адреса организации в базе на адрес из текущих данных
//
Процедура КоманднаяПанель1ЗаменитьАдресОрганизацииВБазе(Кнопка)
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация);
	НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		НоваяЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяЗапись.Объект = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация;
	КонецЕсли;
	Для Каждого Запись из НаборЗаписей Цикл
		Запись.Представление = Реквизиты.Найти("Адрес организации","Название").Значение;
	КонецЦикла;
	НаборЗаписей.Записать();
	Реквизиты.Найти("Адрес организации","Название").ИсходноеЗначение = Реквизиты.Найти("Адрес организации","Название").Значение;
КонецПроцедуры

// Кнопка замены адреса контрагента в базе на адрес из текущих данных
//
Процедура КоманднаяПанель1ЗаменитьАдресКонтрагентаВБазе(Кнопка)
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент);
	НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяЗапись.Объект = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент;
	КонецЕсли;
	Для Каждого Запись из НаборЗаписей Цикл
		Запись.Представление = Реквизиты.Найти("Адрес контрагента","Название").Значение;
	КонецЦикла;
	НаборЗаписей.Записать();
	Реквизиты.Найти("Адрес контрагента","Название").ИсходноеЗначение = Реквизиты.Найти("Адрес контрагента","Название").Значение;
КонецПроцедуры

Процедура КоманднаяПанель1ОткрытьДокумент(Кнопка)
	Если ЗначениеЗаполнено(ТекСтрокаСканирование) И ЗначениеЗаполнено(ТекСтрокаСканирование.Файл) = Истина Тогда
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ТекСтрокаСканирование.Файл);
		Файл = Новый Файл(ПутьКФайлу);
		Если Файл.Существует() = Истина Тогда
			Попытка
				ЗапуститьПриложение(ПутьКФайлу);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;				
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранитьДанные(Кнопка)
		
	Если ЗначениеЗаполнено(ТекСтрокаСканирование) = Истина Тогда
		
		Если ЗначениеЗаполнено(ТекСтрокаСканирование.ФайлXMLВерификация) = Ложь Тогда
			НСпр = Справочники.Файлы.СоздатьЭлемент();
			НСпр.Расширение = ".xml";
			НСпр.Наименование = "Верифицированный файл";
			НСпр.Записать();
			
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = НСпр.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель;
			Запись.Значение = ТекСтрокаСканирование.ФайлXML;
			Запись.Записать();
			
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = НСпр.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип;
			Запись.Значение = "Верифицированный файл";
			Запись.Записать();        
			
			
			ВерФайл = НСпр.Ссылка;
			ТекСтрокаСканирование.ФайлXMLВерификация = ВерФайл;
		Иначе
			ВерФайл = ТекСтрокаСканирование.ФайлXMLВерификация;
		КонецЕсли;	
		
		
		ПутьЗаписи = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ВерФайл);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьЗаписи);
		ЗаписьXML.ЗаписатьОбъявлениеXML();  
		ЗаписьXML.ЗаписатьНачалоЭлемента("V8Data");
		
		//ЗаписьXML.ЗаписатьНачалоЭлемента("fields");

		//Для каждого Стр Из ЭтаФорма.Реквизиты Цикл
		//	//Для каждого Колонка Из ЭтаФорма.ТабличнаяЧасть.Колонки Цикл
		//	//	
		//	//			
		//	//КонецЦикла;			
		//	
		//	ЗаписьXML.ЗаписатьНачалоЭлемента("field");
		//	ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Стр.Название));
		//	ЗаписьXML.ЗаписатьАтрибут("original_value", XMLСтрока(Стр.ИсходноеЗначение));
		//	ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Стр.Значение))));
		//	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Стр.Значение));
		//	ЗаписьXML.ЗаписатьКонецЭлемента();  //field
		//	
		//КонецЦикла;
		//
		//ЗаписьXML.ЗаписатьКонецЭлемента(); //("fields");
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("tables");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("table");
		ЗаписьXML.ЗаписатьНачалоЭлемента("rows");
		Для каждого Стр Из ЭтаФорма.Реквизиты Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("row");
			ЗаписьXML.ЗаписатьНачалоЭлемента("cells");
			Для каждого Колонка Из ЭтаФорма.Реквизиты.Колонки Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("cell");
				ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Колонка.Имя));
				
				ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Стр[Колонка.Имя]))));
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(Стр[Колонка.Имя]));

				ЗаписьXML.ЗаписатьКонецЭлемента(); //("cell");
			КонецЦикла;	
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("cells");			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("row");
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("rows");
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("table");

		
		ЗаписьXML.ЗаписатьНачалоЭлемента("table");
		ЗаписьXML.ЗаписатьНачалоЭлемента("rows");
		Для каждого Стр Из ЭтаФорма.ТабличнаяЧасть Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("row");
			ЗаписьXML.ЗаписатьНачалоЭлемента("cells");
			Для каждого Колонка Из ЭтаФорма.ТабличнаяЧасть.Колонки Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("cell");
				ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Колонка.Имя));
				
				ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Стр[Колонка.Имя]))));
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(Стр[Колонка.Имя]));

				ЗаписьXML.ЗаписатьКонецЭлемента(); //("cell");
			КонецЦикла;	
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("cells");			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("row");
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("rows");
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("table");
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("tables");
		
		
		//
		ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Data 
		ЗаписьXML.Закрыть();
		
		
		ТекСтрокаСканирование.Статус = "Верифицирован";
		
		НовТабРекизиты = Реквизиты.Скопировать();
		НовТабЧасть = ТабличнаяЧасть.Скопировать();
		
		Фильтр = Новый Структура("Файл, ФайлXML", ТекСтрокаСканирование.Файл,ТекСтрокаСканирование.ФайлXML);
		МассивСтрок = ОбработкаОбъект.ВсеДокументыXML.НайтиСтроки(Фильтр);
		Для каждого ЗначМассива Из МассивСтрок Цикл
			 ЗначМассива.Реквизиты = НовТабРекизиты;
			 ЗначМассива.ТабличнаяЧасть = НовТабЧасть;		
		КонецЦикла;	
		
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПоступлениеТоваровИУслуг(Кнопка)
	ОбработкаОбъект.СоздатьДокумент("ПоступлениеТоваровУслуг", Реквизиты, ТабличнаяЧасть, ТекСтрокаСканирование.Файл); 
КонецПроцедуры



Процедура ОсновныеДействияФормыПоступлениеДопРасходов(Кнопка)
	ОбработкаОбъект.СоздатьДокумент("ПоступлениеДопРасходов", Реквизиты, ТабличнаяЧасть, ТекСтрокаСканирование.Файл);
КонецПроцедуры

Процедура КоманднаяПанель2УстановитьВсе(Кнопка)
	Для каждого Стр Из ТабличнаяЧасть Цикл
		Если Стр.Исходная = Ложь Тогда
			Стр.Пометка = Истина;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


Процедура КоманднаяПанель2СнятьВсе(Кнопка)
	Для каждого Стр Из ТабличнаяЧасть Цикл
		Если Стр.Исходная = Ложь Тогда
			Стр.Пометка = Ложь;
		КонецЕсли;	
	КонецЦикла;	    
КонецПроцедуры


Процедура КоманднаяПанельТЧВсеМатериал(Кнопка)
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Строка.ТипНоменклатуры = "Материал";	
	КонецЦикла;
КонецПроцедуры


Процедура КоманднаяПанельТЧВсеОборудование(Кнопка)
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Строка.ТипНоменклатуры = "Оборудование";	
	КонецЦикла;
КонецПроцедуры

