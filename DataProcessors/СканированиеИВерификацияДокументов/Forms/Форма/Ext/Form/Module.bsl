&НаКлиенте
Перем ВсеДокументы Экспорт; // Массив COM объектов полученных из Fillin

// Процедура заполняет реквизиты обработки 
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьЗначенияПоУмолчанию();
	ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы = Истина;
	// Заполнение или создание хранилища истории
	УстановитьПривилегированныйРежим(Истина);
	Если Метаданные.ПодробнаяИнформация = "Бухгалтерия предприятия, редакция 3.0" или Метаданные.ПодробнаяИнформация = "Бухгалтерия предприятия (базовая), редакция 3.0" Тогда
		ВнОбработки = Справочники.ДополнительныеОтчетыИОбработки;
	ИначеЕсли Метаданные.ПодробнаяИнформация = "Бухгалтерия предприятия, редакция 2.0" Тогда
		ВнОбработки = Справочники.ВнешниеОбработки;
	Иначе
		Отказ = Истина;
		ВызватьИсключение("Данная обработка не поддерживает работу на Вашей конфигурации");
	КонецЕсли;
	ОбработкаОбъект.ОбработкаИстории = ВнОбработки.НайтиПоНаименованию("ХранилищеИсторииДляFILLIN",Истина);
	Если ОбработкаОбъект.ОбработкаИстории.Пустая() Тогда 
		НоваяОбработка = ВнОбработки.СоздатьЭлемент();
		НоваяОбработка.Наименование = "ХранилищеИсторииДляFILLIN";
		НоваяОбработка.Комментарий = "Здесь хранится история загрузки документов FILLIN, НЕ УДАЛЯТЬ!";
		НоваяОбработка.Записать();
		ОбработкаОбъект.ОбработкаИстории = НоваяОбработка.Ссылка;
	КонецЕсли;
	// Заполнение или создание хранилища справочника соответствий
	ОбработкаОбъект.ОбработкаСловарьСоответствий = ВнОбработки.НайтиПоНаименованию("ХранилищеСправочникаСоответствийFILLIN",Истина);
	Если ОбработкаОбъект.ОбработкаСловарьСоответствий.Пустая() Тогда 
		НоваяОбработка = ВнОбработки.СоздатьЭлемент();
		НоваяОбработка.Наименование = "ХранилищеСправочникаСоответствийFILLIN";
		НоваяОбработка.Комментарий = "Здесь справочник соответствий FILLIN, НЕ УДАЛЯТЬ!";
		НоваяОбработка.Записать();
		ОбработкаОбъект.ОбработкаСловарьСоответствий = НоваяОбработка.Ссылка;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	ОбработкаОбъект.ПрочитатьИсториюИзФайла();
	ОбработкаОбъект.ОткрытьФайлСловаряСоответствий();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Заполнение списка вариантов типов документов
&НаКлиенте
Процедура ЗаполнитьСписокВыбораТиповДокументов()
	//Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Накладная","Накладная");
	//ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Счет фактура","Счет фактура");
	//ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("УПД (Передаточный документ)","УПД (Передаточный документ)");
	//ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("УПД (Передаточный документ и СФ)","УПД (Передаточный документ и СФ)");
	//ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Акт","Акт");
	//ЭлементыФормы.Сканирование.Колонки.ВидДокумента.ЭлементУправления.СписокВыбора.Добавить("Поступление","Поступление");
	//ЭлементыФормы.Сканирование.Колонки.ВидДокумента.ЭлементУправления.СписокВыбора.Добавить("Реализация","Реализация");
КонецПроцедуры

// Процедура выполняет заполнения значений, смену страниц необходимые при открытии обработки
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Открытие()
КонецПроцедуры

// Процедура выполняет заполнения значений, смену страниц необходимые при открытии обработки
//
&НаКлиенте
Процедура ПриПовторномОткрытии()
	Открытие()
КонецПроцедуры

// Процедура выполняет заполнения значений, смену страниц необходимые при открытии обработки
//
&НаКлиенте
Процедура Открытие()
	ЗаполнитьСписокВыбораТиповДокументов();
	ВидимостьВерификация(Ложь);
	Элементы.ОбщаяГруппа.ТекущаяСтраница = Элементы.ОбщаяГруппа.ПодчиненныеЭлементы.СтраницаЗначенияПоУмолчанию;
	//СтрокаАнлогаТаблицы = Новый Структура("Документ, НомерВТЧСканирование");
	ВсеДокументы = Новый Массив;
	//ВсеДокументы.Колонки.Вставить(0, "Документ",,"Документ",0);
	//ВсеДокументы.Колонки.Добавить("НомерВТЧСканирование");
КонецПроцедуры

// Команда открытия истории из файла, открывает список выбора файла и заполняет оттуда историю
//
&НаКлиенте
Процедура ПрочитатьИсториюИзФайла(Команда)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	ВыборФайла.ПроверятьСуществованиеФайла=Истина;
	ВыборФайла.МножественныйВыбор = Ложь;
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	ИмяФайла = ВыборФайла.ВыбранныеФайлы[0];
	//ПрочитатьИсториюИзФайлаНаСервере(ИмяФайла)
	ПрочитатьИсториюИзФайлаКлиент(ИмяФайла);
КонецПроцедуры

// Процедура загружает информацию из файла XML в табличную часть истории
//
// Параметры:
//  ПолноеИмя - строка, путь к открываемому файлу, если не указано, то считывает данные из базы 
//
&НаКлиенте
Процедура ПрочитатьИсториюИзФайлаКлиент(ПолноеИмя = Неопределено) 
	ФайлXML = Новый ЧтениеXML;
	НужноУдалятьФайл = Ложь;
	Попытка
		Если ПолноеИмя = Неопределено Тогда
		    // Получаем путь к истории
			WSH = Новый COMobject("wscript.shell"); 
			ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
			ПолноеИмя = ПутьКИстории+"\History.xml";
			
			СозданныйФайл = Неопределено;
			ХранилищеФайла = Объект.ОбработкаИстории.Ссылка;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СозданныйФайл = ХранилищеФайла.ХранилищеВнешнейОбработки.Получить();
			#Иначе
				СозданныйФайл = ХранилищеФайла.ХранилищеОбработки.Получить();
			#КонецЕсли
			Если СозданныйФайл = Неопределено Тогда
				ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
				ТекстФайл.Записать(Неопределено);
				ТекстФайл.Закрыть();
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ОткрытьФайл(ПолноеИмя);
		    	ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.Закрыть();
			Иначе
				СозданныйФайл.Записать(ПолноеИмя);
			КонецЕсли;
			НужноУдалятьФайл = Истина;
		КонецЕсли;
		
		ФайлXML.ОткрытьФайл(ПолноеИмя);
		ФайлXML.Прочитать();
		Объект.История.Очистить();
	    Пока ФайлXML.Прочитать() Цикл
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ФайлXML.Имя = "СтрокаИстории" тогда
					ДатаЗанесения = ФайлXML.ЗначениеАтрибута("ДатаЗанесения"); 
					ГУИД = ФайлXML.ЗначениеАтрибута("УникальныйИдентификатор");
					ТипДокумента = ФайлXML.ЗначениеАтрибута("ТипДокумента");
					УникальныйИдентификаторЭлемента = Новый УникальныйИдентификатор(ГУИД);
					НужныйДокумент = ПолучитьСсылкуПоТипуДокументаКлиент(ТипДокумента,УникальныйИдентификаторЭлемента);
					Если НужныйДокумент<>Неопределено Тогда 
						НоваяСтрокаИстории = Объект.История.Добавить();
						НоваяСтрокаИстории.Дата = ДатаЗанесения;
						НоваяСтрокаИстории.Ссылка = НужныйДокумент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ФайлXML.Закрыть();
		Если НужноУдалятьФайл Тогда 
			УдалитьФайлы(ПолноеИмя);
		КонецЕсли;
		Объект.ОшибкаЧтенияИстории = Ложь;
	Исключение
		Объект.ОшибкаЧтенияИстории = Истина;
		ВызватьИсключение("Не удалось прочитать файл истории");
	КонецПопытки;
КонецПроцедуры

// Функция возвращает ссылку на документ из базы данных
//
// Параметры:
//  ТипДокумента			 - строка с названием документа 
//  УникальныйИдентификатор	 - уникальный идентификатор, из которого будет формироваться ссылка
// 
// Возвращаемое значение:
//  Ссылка на документ
//
&НаСервере
Функция ПолучитьСсылкуПоТипуДокументаКлиент(ТипДокумента,УникальныйИдентификаторЭлемента)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьСсылкуПоТипуДокумента(ТипДокумента,УникальныйИдентификаторЭлемента);
КонецФункции // ПолучитьСсылкуПоТипуДокументаКлиент()

// Процедура загружает информацию в файл XML из табличные части истории
//
// Параметры:
//  ПолноеИмя - строка, путь к сохраняемому файлу, если не указано, то записывает данные в базы данных 
//
&НаКлиенте
Процедура ЗаписатьИсториюВФайл(ПолноеИмя = Неопределено) 
	Если Объект.ОшибкаЧтенияИстории Тогда
		ВызватьИсключение("Файл истории прочитался не корректно, его запись в файл невозможна.");
		Возврат;
	КонецЕсли;
	ПеремещатьВХранилище = Ложь;
	Если ПолноеИмя = Неопределено Тогда
		ЗаписьXML = Новый ЗаписьXML;
		// Получаем путь к истории
		WSH=Новый COMobject("wscript.shell"); 
		ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
		ПолноеИмя = ПутьКИстории+"\History.xml";
		ПеремещатьВХранилище = Истина;
	КонецЕсли;
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
		ЗаписьXML.Закрыть();
	Исключение
		ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайл.Записать(Неопределено);
		ТекстФайл.Закрыть();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	    ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
	КонецПопытки;
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	    ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("История");
		Для Каждого Строка из Объект.История Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СтрокаИстории");
				ЗаписьXML.ЗаписатьАтрибут("ДатаЗанесения",Строка(Строка.Дата));
				ЗаписьXML.ЗаписатьАтрибут("ТипДокумента",Строка(ТипЗнч(Строка.Ссылка)));
				ЗаписьXML.ЗаписатьАтрибут("УникальныйИдентификатор",Строка(Строка.Ссылка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		Если Не ЗаписьXML=Null Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
	        ЗаписьXML.Закрыть();
		КонецЕсли;
		// Перемещение файла в хранилище в базу
		Если ПеремещатьВХранилище Тогда
			Файлик = Новый Файл(ПолноеИмя);
			ПереместитьВХранилище(Файлик, Объект.ОбработкаИстории);
			УдалитьФайлы(ПолноеИмя);
		КонецЕсли;
	Исключение
		ВызватьИсключение("Не удалось записать файл истории");
	КонецПопытки;
КонецПроцедуры

// Процедура помещает файл в хранилище значений в БД
//
// Параметры:
//  Файлик			 - Файл 
//  ПолучаемыйОбъект - СправочникСсылка 
//
&НаСервере
Процедура ПереместитьВХранилище(Файлик, ПолучаемыйОбъект)

	Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлик.ПолноеИмя));
	МоеХранилище = ПолучаемыйОбъект.ПолучитьОбъект();
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МоеХранилище.ХранилищеВнешнейОбработки = Хранилище;
	#Иначе
		МоеХранилище.ХранилищеОбработки = Хранилище;
	#КонецЕсли
	МоеХранилище.Записать();	

КонецПроцедуры // ПереместитьВХранилище()

// Команда записи истории в файл, открывает список выбора файла и сохраняет туда историю
//
&НаКлиенте
Процедура СохранитьИсториюВФайл(Команда)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.ПолноеИмяФайла = "History.xml";
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	Файл = Новый Файл(ВыборФайла.ВыбранныеФайлы[0]);
	ЗаписатьИсториюВФайл(ВыборФайла.ВыбранныеФайлы[0]);
КонецПроцедуры

// Процедура отключает COM соединение и записывает в базу файл истории
//
&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры

// Процедура отключает COM соединение и записывает в базу файл истории
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
	fillinAX = Неопределено;
	// Сохранение истории a файл
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьИсториюВФайл();
	ОбработкаОбъект.СохранитьФайлСловаряСоответствий();
КонецПроцедуры

// Команда открытия документа из истории в alfresco
//
&НаКлиенте
Процедура ОткрытьДокументВAlfresco(Команда)
	СтрокаПодключения = Неопределено;
	ПутьКФайлуНастроек = СтрокаСоединенияИнформационнойБазы();
	ПутьКФайлуНастроек = СтрЗаменить(ПутьКФайлуНастроек,"File=""","");
	ПутьКФайлуНастроек = СтрЗаменить(ПутьКФайлуНастроек,""";","");
	ПутьКФайлуНастроек = ПутьКФайлуНастроек+"\alfresco.ini";
	Попытка
		ФайлСНастройками = Новый ЧтениеТекста(ПутьКФайлуНастроек);
		Строка = ФайлСНастройками.ПрочитатьСтроку();
		Пока Строка<>Неопределено Цикл
			Если Строка = "[Alfresco]" Тогда 
				СтрокаПодключения = ФайлСНастройками.ПрочитатьСтроку();
				СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"ShareSearchPage=","");
				Прервать;
			КонецЕсли;
			Строка = ФайлСНастройками.ПрочитатьСтроку();
		КонецЦикла;
	Исключение
		СтрокаПодключения = "http://127.0.0.1:8080/share/service/fillin-search"
	КонецПопытки;
	Если СтрокаПодключения = Неопределено Тогда 
		Сообщить("Не удалось прочитать файл настроек alfresco.ini, проверьте наличие файла в папке с базой данных");
	Иначе
		ЗапуститьПриложение(СтрокаПодключения+"?guid="+Строка(Элементы.История.ТекущиеДанные.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
КонецПроцедуры

// Команда загружает информацию из файла XML в табличные части словарей соответствий
//
&НаКлиенте
Процедура ОткрытьФайлСловаряСоответствий(Команда)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	ВыборФайла.ПроверятьСуществованиеФайла=Истина;
	ВыборФайла.МножественныйВыбор = Ложь;
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	ИмяФайла = ВыборФайла.ВыбранныеФайлы[0];
	ОткрытьФайлСловаряСоответствийНаКлиенте(ИмяФайла);
КонецПроцедуры

// Процедура загружает информацию из файла XML в табличные части словарей соответствий
//
// Параметры:
//  ПолноеИмя - строка, путь к открываемому файлу, если не указано, то считывает данные из базы 
//
&НаКлиенте
Процедура ОткрытьФайлСловаряСоответствийНаКлиенте(ПолноеИмя = Неопределено) Экспорт 
	ФайлXML = Новый ЧтениеXML;
	НужноУдалятьФайл = Ложь;
	Попытка
		Если ПолноеИмя = Неопределено Тогда 
			// Получаем путь к истории
			WSH=Новый COMobject("wscript.shell"); 
			ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
			ПолноеИмя = ПутьКИстории+"\Dictionary.xml";
			СозданныйФайл = Неопределено;
			ХранилищеФайла = Объект.ОбработкаСловарьСоответствий.Ссылка;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СозданныйФайл = ХранилищеФайла.ХранилищеВнешнейОбработки.Получить();
			#Иначе
				СозданныйФайл = ХранилищеФайла.ХранилищеОбработки.Получить();
			#КонецЕсли
			Если СозданныйФайл = Неопределено Тогда
				ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
				ТекстФайл.Записать(Неопределено);
				ТекстФайл.Закрыть();
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ОткрытьФайл(ПолноеИмя);
		    	ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.Закрыть();
			Иначе
				СозданныйФайл.Записать(ПолноеИмя);
			КонецЕсли;
			НужноУдалятьФайл = Истина;
		КонецЕсли;
		
		ФайлXML.ОткрытьФайл(ПолноеИмя);
		ФайлXML.Прочитать();
		Объект.СловарьСоответствийНоменклатуры.Очистить();
		Объект.СловарьСоответствийКонтрагентов.Очистить();
		Объект.СловарьСоответствийОрганизаций.Очистить();
	    Пока ФайлXML.Прочитать() Цикл
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ФайлXML.Имя = "ЭлементСловаряНоменклатуры" тогда
					НоваяСтрокаСловаряСоответствий = Объект.СловарьСоответствийНоменклатуры.Добавить();
					НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
					ГУИД = ФайлXML.ЗначениеАтрибута("Контрагент");
					УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(ГУИД);
					НоваяСтрокаСловаряСоответствий.Контрагент = ПолучитьСсылкуПоМенеджеруОбъектаКлиент("Контрагенты",УникальныйИдентификаторОбъекта);
					ГУИД = ФайлXML.ЗначениеАтрибута("Номенклатура");
					УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(ГУИД);
					НоваяСтрокаСловаряСоответствий.Номенклатура = ПолучитьСсылкуПоМенеджеруОбъектаКлиент("Номенклатура",УникальныйИдентификаторОбъекта);
				ИначеЕсли ФайлXML.Имя = "ЭлементСловаряОрганизаций" тогда
					НоваяСтрокаСловаряСоответствий = Объект.СловарьСоответствийОрганизаций.Добавить();
					НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
					ГУИД = ФайлXML.ЗначениеАтрибута("Организация");
					УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(ГУИД);
					НоваяСтрокаСловаряСоответствий.Организация = ПолучитьСсылкуПоМенеджеруОбъектаКлиент("Организации",УникальныйИдентификаторОбъекта);
				ИначеЕсли ФайлXML.Имя = "ЭлементСловаряКонтрагентов" тогда
					НоваяСтрокаСловаряСоответствий = Объект.СловарьСоответствийКонтрагентов.Добавить();
					НоваяСтрокаСловаряСоответствий.Строка = ФайлXML.ЗначениеАтрибута("Строка");
					ГУИД = ФайлXML.ЗначениеАтрибута("Контрагент");
					УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(ГУИД);
					НоваяСтрокаСловаряСоответствий.Контрагент = ПолучитьСсылкуПоМенеджеруОбъектаКлиент("Контрагенты",УникальныйИдентификаторОбъекта);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ФайлXML.Закрыть();
		Если НужноУдалятьФайл Тогда 
			УдалитьФайлы(ПолноеИмя);
		КонецЕсли;
		Объект.ОшибкаЧтенияСловаряСоответствий = Ложь;
	Исключение
		Объект.ОшибкаЧтенияСловаряСоответствий = Истина;
		ВызватьИсключение("Не удалось прочитать файл словаря соответствий");
	КонецПопытки;
КонецПроцедуры

// Функция возвращает ссылку на объект базы данных
//
// Параметры:
//  Менеджер				 - менеджер объекта 
//  УникальныйИдентификатор	 - уникальный идентификатор, из которого будет формироваться ссылка
// 
// Возвращаемое значение:
//  Ссылка на объект базы данных 
//
&НаСервере
Функция ПолучитьСсылкуПоМенеджеруОбъектаКлиент(ТипДокумента,УникальныйИдентификаторЭлемента)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьСсылкуПоМенеджеруОбъекта(Справочники[ТипДокумента],УникальныйИдентификаторЭлемента);
КонецФункции // ПолучитьСсылкуПоТипуДокументаКлиент()

// Команда сохраняет информацию в файла XML из табличных части словарей соответствий
//
&НаКлиенте
Процедура СохранитьФайлСловаряСоответствий(Команда)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.ПолноеИмяФайла = "Dictionary.xml";
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	Файл = Новый Файл(ВыборФайла.ВыбранныеФайлы[0]);
	ИмяФайла = ВыборФайла.ВыбранныеФайлы[0];	
	СохранитьФайлСловаряСоответствийНаКлиенте(ИмяФайла);
КонецПроцедуры

// Процедура сохраняет информацию в файла XML из табличных части словарей соответствий
//
// Параметры:
//  ПолноеИмя - строка, путь к сохраняемому файлу, если не заполнено, то сохраняет данные в саму базу данных 
//
&НаКлиенте
Процедура СохранитьФайлСловаряСоответствийНаКлиенте(ПолноеИмя) 
	Если Объект.ОшибкаЧтенияСловаряСоответствий Тогда
		ВызватьИсключение("Словарь соответствий прочитался не корректно, его запись в файл невозможна.");
		Возврат;
	КонецЕсли;
	ПеремещатьВХранилище = Ложь;
	Если ПолноеИмя = Неопределено Тогда 
		ЗаписьXML = Новый ЗаписьXML;
		// Получаем путь к истории
		WSH=Новый COMobject("wscript.shell"); 
		ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
		ПолноеИмя = ПутьКИстории+"\Dictionary.xml";
		ПеремещатьВХранилище = Истина;
	КонецЕсли;
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
		ЗаписьXML.Закрыть();
	Исключение
		ТекстФайл = Новый ЗаписьТекста(ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайл.Записать(Неопределено);
		ТекстФайл.Закрыть();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	    ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьНоменклатуры");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
	КонецПопытки;
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолноеИмя);
	    ЗаписьXML.ЗаписатьОбъявлениеXML();
		//СловарьНоменклатуры
		ЗаписьXML.ЗаписатьНачалоЭлемента("СловарьСоответствий");
		Для Каждого Строка из Объект.СловарьСоответствийНоменклатуры Цикл
			Если ЗначениеЗаполнено(Строка.Контрагент) и ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряНоменклатуры");
					ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
					ЗаписьXML.ЗаписатьАтрибут("Контрагент",Строка(Строка.Контрагент.УникальныйИдентификатор()));
					ЗаписьXML.ЗаписатьАтрибут("Номенклатура",Строка(Строка.Номенклатура.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		// СловарьОрганизаций
		Для Каждого Строка из Объект.СловарьСоответствийОрганизаций Цикл
			Если ЗначениеЗаполнено(Строка.Организация) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряОрганизаций");
					ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
					ЗаписьXML.ЗаписатьАтрибут("Организация",Строка(Строка.Организация.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		// СловарьКонтрагентов
		Для Каждого Строка из Объект.СловарьСоответствийКонтрагентов Цикл
			Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлементСловаряКонтрагентов");
					ЗаписьXML.ЗаписатьАтрибут("Строка",Строка(Строка.Строка));
					ЗаписьXML.ЗаписатьАтрибут("Контрагент",Строка(Строка.Контрагент.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		// Закрываем
		Если Не ЗаписьXML=Null Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
	        ЗаписьXML.Закрыть();
		КонецЕсли;
		Если ПеремещатьВХранилище Тогда 
			// Перемещение файла в хранилище в базу
			Файлик = Новый Файл(ПолноеИмя);
			ПереместитьВХранилище(Файлик, Объект.ОбработкаСловарьСоответствий);
			
			//Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлик.ПолноеИмя));
			//МоеХранилище = ЭтотОбъект.ОбработкаСловарьСоответствий.ПолучитьОбъект();
			//#Если ТолстыйКлиентОбычноеПриложение Тогда
			//	МоеХранилище.ХранилищеВнешнейОбработки = Хранилище;
			//#Иначе
			//	МоеХранилище.ХранилищеОбработки = Хранилище;
			//#КонецЕсли
			//МоеХранилище.Записать();
			УдалитьФайлы(ПолноеИмя);
		КонецЕсли;
	Исключение
		ВызватьИсключение("Не удалось записать файл словаря соответствий");
	КонецПопытки;
КонецПроцедуры

// Команда считывает данные из подключения к Fillin
//
&НаКлиенте
Процедура Сканировать(Команда)
	всеХорошо = Истина;
	Попытка
		fillinAX = Новый COMОбъект("Eurekabpo.Fillin");
		fillinAX.Run();
	Исключение
		всеХорошо = Ложь;
		ош = ИнформацияОбОшибке();
		Сообщить(ош.ИсходнаяСтрока);
		Сообщить(ош.Описание);
		Сообщить("Причина:" + ош.Причина);
		
		ВызватьИсключение(ОписаниеОшибки());
		fillinAX = Неопределено;
	КонецПопытки;
	Если (всеХорошо) Тогда
		Если Объект.Сканирование.Количество() = 0 Тогда
			ЗагуженныеДокументы = fillinAX.LockedDocuments;
			Для Счетчик = 0 по fillinAX.LockedDocuments.Count-1 Цикл
				Документ = fillinAX.LockedDocuments.GetItem(Счетчик);
				
				ДанныеОЗаказчике = Новый Структура;
				ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
				ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
				ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
				ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
				
				ДанныеОПоставщике = Новый Структура;
				ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
				ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
				ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
				ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
				
				НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
				Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
				Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
								
				ЗанестиДанныеПоДокументуСервер(Документ.DocumentType,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике);
				ВсеДокументы.Вставить(Объект.Сканирование.Количество()-1,Документ);
			КонецЦикла;
		Иначе
			ЗагуженныеДокументы = fillinAX.Documents;
			Для Счетчик = 0 по fillinAX.Documents.Count-1 Цикл
				Документ = fillinAX.Documents.GetItem(Счетчик);
				
				ДанныеОЗаказчике = Новый Структура;
				ДанныеОЗаказчике.Вставить("Заказчик", ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
				ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
				ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
				ДанныеОЗаказчике.Вставить("АдресЗаказчика", ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
				
				ДанныеОПоставщике = Новый Структура;
				ДанныеОПоставщике.Вставить("Поставщик", ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
				ДанныеОПоставщике.Вставить("ПоставщикИНН", ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
				ДанныеОПоставщике.Вставить("ПоставщикКПП", ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
				ДанныеОПоставщике.Вставить("АдресПоставщика", ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
				
				НомерДокумента = ВзятьЗначениеПоля(Документ.Fields, "Номер");
				Дата = ВзятьЗначениеПоля(Документ.Fields, "Дата");
				Статус = ВзятьЗначениеПоля(Документ.Fields, "Статус");
				
				ЗанестиДанныеПоДокументуСервер(Документ.DocumentType,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике);
				СтрокаАнлогаТаблицы = Новый Структура("Документ, НомерВТЧСканирование");
				//Строка = ВсеДокументы.Добавить();
				//Строка.Документ = ПоместитьВоВременноеХранилище(Документ,ЭтаФорма.УникальныйИдентификатор);
				//СтрокаАнлогаТаблицы.Документ = Документ;
				//СтрокаАнлогаТаблицы.НомерВТЧСканирование = Объект.Сканирование.Количество()-1;
				//ВсеДокументы.Добавить(СтрокаАнлогаТаблицы);
				ВсеДокументы.Вставить(Объект.Сканирование.Количество()-1,Документ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ВидимостьВерификация(Ложь);
КонецПроцедуры

// Функция возвращает значение поля из Com объекта
//
// Параметры:
//  Поля		 - Com объект 
//  ИскомоеИмя	 - строка с названием искомого поля 
// 
// Возвращаемое значение:
//  значение поля простого типа
//
&НаКлиенте
Функция ВзятьЗначениеПоля(Поля, ИскомоеИмя) 
	Для Счетчик = 0 To Поля.Count - 1 Цикл
		Поле = Поля.GetItem(Счетчик);
		Если (Поле.Name = ИскомоеИмя) Тогда
			Возврат Поле.Value;
		КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции

// Заносит в ТЧ сканирование все документы из первой таблицы документа
//
// Параметры:
//  DocumentType		 - строка с названием типа документа 
//  Статус				 - строка, значение 1 обозначает передаточный документ и СФ, остальные значения - только передаточный документ 
//  Дата				 - строка с датой документа
//  Номер				 - строка с номером документа 
//  ДанныеОЗаказчике	 - структура с данными о заказчике
//  ДанныеОПоставщике	 - структура с данными о поставщике
//
&НаСервере
Процедура ЗанестиДанныеПоДокументуСервер(DocumentType,Статус,Дата,Номер,ДанныеОЗаказчике,ДанныеОПоставщике)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗанестиДанныеПоДокументу(DocumentType,Статус,Дата,Номер,ДанныеОЗаказчике,ДанныеОПоставщике);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	

КонецПроцедуры // ЗанестиДанныеПоДокументуСервер()

// Процедура устанавливает флаг экспортировать в ТЧ Сканирование
//
&НаСервере
Процедура ЭкспортироватьВсеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Экспортировать(Истина);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда устанавливает флаг экспортировать в ТЧ Сканирование
//
&НаКлиенте
Процедура ЭкспортироватьВсе(Команда)
	ЭкспортироватьВсеНаСервере();
КонецПроцедуры

// Процедура снимает флаг экспортировать в ТЧ Сканирование
//
&НаСервере
Процедура НеЭкспортироватьНичегоНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Экспортировать(Ложь);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда снимает флаг экспортировать в ТЧ Сканирование
//
&НаКлиенте
Процедура НеЭкспортироватьНичего(Команда)
	НеЭкспортироватьНичегоНаСервере();
КонецПроцедуры

// Запрет удаления строк из ТЧ Сканирование
//
&НаКлиенте
Процедура СканированиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Команда отправки документов на стадию верификации
//
&НаКлиенте
Процедура Верифицировать(Команда)
	//Ошибка = ВерифицироватьНаСервере();
	Если (ВсеДокументы <> Неопределено) Тогда 
		Если (ВсеДокументы.Количество() = 0) Тогда
			Предупреждение("Нет данных для отправки");
			Возврат;
		Иначе
			НомерТекущегоДокумента = 0;
			НомерВТЧСканирование = НомерТекущегоДокумента;
			
			Попытка   //kalb - изменения для того, чтобы нельзя было ввести дату больше 3999 сразу после сканирования
			Для каждого ТекущаяСтрока из Объект.Сканирование  Цикл
			Если Год(ТекущаяСтрока.ДатаДокумента) > 3999 Тогда
		    ВызватьИсключение("В проводимом документе год должен иметь значение не более 3999");
			КонецЕсли;
		    КонецЦикла;
		    Исключение
			Предупреждение("В проводимых документах год должен иметь значение не более 3999");
			Возврат;
			КонецПопытки;
			
			Пока не Объект.Сканирование[НомерВТЧСканирование].Экспортировать Цикл
				НомерТекущегоДокумента = НомерТекущегоДокумента + 1;
				Если (НомерТекущегоДокумента = ВсеДокументы.Количество()) Тогда 
					Предупреждение("Все документы отправлены, форма будет закрыта");
					ВидимостьВерификация(Ложь);
					Возврат;
				Иначе
					НомерВТЧСканирование = НомерТекущегоДокумента;
				КонецЕсли;
			КонецЦикла;
			ТипТекущегоДокумента = Объект.Сканирование[НомерВТЧСканирование].ТипДокумента;
			ВидТекущегоДокумента = Объект.Сканирование[НомерВТЧСканирование].ВидДокумента;
			// Заполняем форму значениями из сканированнного документа
			Документ = ВсеДокументы[НомерТекущегоДокумента];
			Реквизиты.Очистить();
			ТабличнаяЧасть.Очистить();
			Если ТипТекущегоДокумента = "НеопределенныйТипДокумента" Тогда 
				Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
				ПерейтиКСледующемуДокументу();
				Предупреждение("Не реализован данный тип документа: "+ТипТекущегоДокумента);
				Возврат;
			Иначе
				Если ВидТекущегоДокумента = "Поступление" или ВидТекущегоДокумента = "Реализация" Тогда
					ОбщаяСтоимость = ВзятьЗначениеПоля(Документ.Fields, "ОбщаяСтоимость");
					СуммаНалога = ВзятьЗначениеПоля(Документ.Fields, "СуммаНалога");
    				Если ТипТекущегоДокумента = "Акт" Тогда
	                НДСРасчетное = СуммаНалога;  	
				    КонецЕсли;
					Если ТипТекущегоДокумента = "Счет фактура" Тогда
						 ТипТекущегоДокумента = "Счет-фактура"
				    КонецЕсли;
					ЗаполнитьРеквизитыШапки(ВидТекущегоДокумента,ТипТекущегоДокумента,НомерВТЧСканирование,ОбщаяСтоимость,СуммаНалога);
				Иначе
					Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
					ПерейтиКСледующемуДокументу();
					Предупреждение("Не выбран вид документа");
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьТабличнуюЧасть(Документ);
			ТабличнаяЧастьПриИзмененииНаСервере();
			
			УчитыватьНДС = Истина;
			//Ошибка = Верификация(ОбработкаОбъект);
			//Если ЗначениеЗаполнено(Ошибка) Тогда
				//ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
				//Возврат Ошибка;
			//КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ВидимостьВерификация(Истина);
КонецПроцедуры

// Функция преобразует строку в число
//
// Параметры:
//  стрЧисло - Строка
// 
// Возвращаемое значение:
//  Число 
//
&НаКлиенте
Функция ПарсингЧисла(стрЧисло) Экспорт 
	стрБезБукв = СтрокаТолькоИзЦифр(стрЧисло);
	стрСРазделителем = СтрЗаменить(СтрЗаменить(СтрЗаменить(стрБезБукв,",","."), "-","."),"'","");
	Если ЗначениеЗаполнено(стрСРазделителем) Тогда 
		Попытка
			Возврат Число(стрСРазделителем);
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
КонецФункции

// Функция возвращает строку только из цифр
//
// Параметры:
//  строка	 - Строка 
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция СтрокаТолькоИзЦифр(строка)
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(строка, "О", "0"), "о","0"), "В", "8"), "O", "0"), "o","0"), " ","");	
КонецФункции

// Процедура добавлячет и заполняет новую строку ТЧ
//
// Параметры:
//  Имя				 - 	Строка/Справочник
//  стрКоличество	 - 	Число 
//  стрЦена			 - 	Число 
//  стрСумма		 - 	Число 
//  стрСтавкаНДС	 - 	Число 
//  стрСуммаНДС		 - 	Число
//  стрВсего		 - 	Число
//  ЕдиницаИзмерения - 	Строка
//  КодОКЕИ			 - 	Строка 
//  СчетчикСтрокТЧ	 - 	Число, номер строки ТЧ
//
&НаСервере
Процедура ДобавитьСтрокуТЧНакладная(Имя,стрКоличество,стрЦена,стрСумма,стрСтавкаНДС,стрСуммаНДС,стрВсего,ЕдиницаИзмерения,КодОКЕИ,СчетчикСтрокТЧ)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	НоваяСтрокаТЧ = ТабличнаяЧасть.Добавить();
	//Код для просмотря значений всех ячеек
	//Для счетч=0 по ЗаписиТабличнойЧасти.GetItem(0).Count-1 Цикл
	//	стр = ВзятьЗначениИзТаблицыФиллина(ЗаписиТабличнойЧасти, СчетчикСтрокТЧ, счетч);
	//КонецЦикла;
	           
	Наименование = Имя;
	стрСтавкаНДС = ОбработкаОбъект.ПарсингСтавкиНДС(стрСтавкаНДС);
	ставкаНДСЧислом = ОбработкаОбъект.СтавкаНДСВЧисло(стрСтавкаНДС);
	
	// Почему 4 - секрет
	Для Счетчик = 1 По 4 Цикл
		стрКоличество = ИсправитьКоличество(стрКоличество, стрСумма, стрЦена, стрСуммаНДС, стрВсего);
		стрСумма = ИсправитьСуммуБезНДС(стрСумма, стрВсего, стрСуммаНДС, стрКоличество, стрЦена, ставкаНДСЧислом);
		стрСуммаНДС = ИсправитьСуммуСНДС(стрСуммаНДС, стрСумма, ставкаНДСЧислом, стрВсего);
		стрВсего = ИсправитьВсего(стрВсего, стрСумма, стрСуммаНДС, стрКоличество, стрЦена, ставкаНДСЧислом);
	КонецЦикла;
	
	// Если распознался код ОКЕИ, достанем инфу из справочника
	ЕдиницаПоКоду = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодОКЕИ); 
					
	ЕСЛИ ЗначениеЗаполнено(ЕдиницаПоКоду) ТОГДА
		ЕдиницаИзмерения = ЕдиницаПоКоду.Наименование;		
	КОНЕЦЕСЛИ;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПоискЕД = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения,Истина);
		Если ЗначениеЗаполнено(ПоискЕД) Тогда 
			ЕдиницаИзмерения = ПоискЕД;
		КонецЕсли;
	КонецЕсли;
	Если стрВсего = 0 Тогда 
		стрВсего = стрСумма+стрСуммаНДС;
	КонецЕсли;
	
	//Разбираемся с номенклатурой
	НоваяСтрокаТЧ.Номенклатура = ОбработкаОбъект.ПоискНоменклатурыПоставщика30(Объект.Сканирование[НомерВТЧСканирование].Контрагент,Наименование,ЕдиницаИзмерения);
	// Заполняем остальное
	Если ТипТекущегоДокумента = "Акт" Тогда
		НоваяСтрокаТЧ.ТипНоменклатуры = "Услуга";
	Иначе
		НоваяСтрокаТЧ.ТипНоменклатуры = "Товар";
	КонецЕсли;
	Если ТипЗнч(НоваяСтрокаТЧ.Номенклатура) = Тип("Строка") Тогда 
		НоваяСтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Иначе
		НоваяСтрокаТЧ.ЕдиницаИзмерения = НоваяСтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	НоваяСтрокаТЧ.Количество = Окр(стрКоличество, 3);
	НоваяСтрокаТЧ.Цена = Окр(стрЦена, 2);
	НоваяСтрокаТЧ.Сумма = Окр(стрСумма, 2);
	НоваяСтрокаТЧ.СтавкаНДС = стрСтавкаНДС;
	НоваяСтрокаТЧ.СуммаНДС = Окр(стрСуммаНДС, 2);
	НоваяСтрокаТЧ.Всего = Окр(стрВсего, 2);
	Если НоваяСтрокаТЧ.Количество<>0 Тогда 
		НоваяСтрокаТЧ.ЦенаСНДС = Окр(НоваяСтрокаТЧ.Всего/НоваяСтрокаТЧ.Количество,2);
	КонецЕсли;
	НоваяСтрокаТЧ.НомерСтроки = СчетчикСтрокТЧ;
	// Заполняем исходные значения
	НоваяСтрокаТЧ.НоменклатураИсходная = НоваяСтрокаТЧ.Номенклатура;
	НоваяСтрокаТЧ.ТипНоменклатурыИсходный = НоваяСтрокаТЧ.ТипНоменклатуры;
	НоваяСтрокаТЧ.ЕдиницаИзмеренияИсходная = НоваяСтрокаТЧ.ЕдиницаИзмерения;
	НоваяСтрокаТЧ.КоличествоИсходное = НоваяСтрокаТЧ.Количество;
	НоваяСтрокаТЧ.ЦенаИсходная = НоваяСтрокаТЧ.Цена;
	НоваяСтрокаТЧ.СуммаИсходная = НоваяСтрокаТЧ.Сумма;
	НоваяСтрокаТЧ.СтавкаНДСИсходная = НоваяСтрокаТЧ.СтавкаНДС;
	НоваяСтрокаТЧ.СуммаНДСИсходная = НоваяСтрокаТЧ.СуммаНДС;
	НоваяСтрокаТЧ.ВсегоИсходное = НоваяСтрокаТЧ.Всего;

КонецПроцедуры // ДобавитьСтрокуТЧНакладная()

// Процедура переключает страницы формы и меняет видимость
//
// Параметры:
//  Видимость	 - Булево
//
&НаКлиенте
Процедура ВидимостьВерификация(Видимость)
	Элементы.СтраницаВерификация.Видимость = Видимость;
	Элементы.СтраницаСканирование.Видимость = не Видимость;
	Элементы.СтраницаЗначенияПоУмолчанию.Видимость = не Видимость;
	Элементы.СтраницаИстория.Видимость = не Видимость;
	Элементы.ФормаЗакрытьВерификацию.Видимость = Видимость;
	Если не Видимость Тогда 
		Элементы.ОбщаяГруппа.ТекущаяСтраница = Элементы.ОбщаяГруппа.ПодчиненныеЭлементы.СтраницаСканирование;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет реквизиты и ТЧ документа на верификации данными из COM объекта
//
&НаКлиенте
Процедура ЗаполнитьТаблицуДокументом()
	Если (НомерТекущегоДокумента = ВсеДокументы.Количество()) Тогда 
		Предупреждение("Все документы отправлены, форма будет закрыта");
		ВидимостьВерификация(Ложь);
		Возврат;
	Иначе
		Документ = ВсеДокументы[НомерТекущегоДокумента];
		Реквизиты.Очистить();
		ТабличнаяЧасть.Очистить();
		Если ТипТекущегоДокумента = "НеопределенныйТипДокумента" Тогда 
			Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
			ПерейтиКСледующемуДокументу();
			Предупреждение("Не реализован данный тип документа: "+ТипТекущегоДокумента);
			Возврат;
		Иначе
			Если ВидТекущегоДокумента = "Поступление" или ВидТекущегоДокумента = "Реализация" Тогда
				ОбщаяСтоимость = ВзятьЗначениеПоля(Документ.Fields, "ОбщаяСтоимость");
				СуммаНалога = ВзятьЗначениеПоля(Документ.Fields, "СуммаНалога");
				ЗаполнитьРеквизитыШапки(ВидТекущегоДокумента,ТипТекущегоДокумента,НомерВТЧСканирование,ОбщаяСтоимость,СуммаНалога);
			Иначе
				Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
				ПерейтиКСледующемуДокументу();
				Предупреждение("Не выбран вид документа");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьТабличнуюЧасть(Документ);
		ТабличнаяЧастьПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры // ЗаполнитьТаблицуДокументом()

// Процедура отправки на стадию верификации следующего документа из ТЧ Сканирование
//
&НаКлиенте
Процедура  ПерейтиКСледующемуДокументу()
	Если (НомерТекущегоДокумента = ВсеДокументы.Количество()) Тогда 
		Предупреждение("Все документы отправлены, форма будет закрыта");
		ВидимостьВерификация(Ложь);
		Возврат;
	КонецЕсли;
	НомерВТЧСканирование = НомерТекущегоДокумента;
	Пока не Объект.Сканирование[НомерВТЧСканирование].Экспортировать Цикл
		номерТекущегоДокумента = номерТекущегоДокумента + 1;
		Если (НомерТекущегоДокумента = ВсеДокументы.Количество()) Тогда 
			Предупреждение("Все документы отправлены, форма будет закрыта");
			ВидимостьВерификация(Ложь);
			Возврат;
		Иначе
			НомерВТЧСканирование = НомерТекущегоДокумента;
		КонецЕсли;
	КонецЦикла;
	ТипТекущегоДокумента = Объект.Сканирование[НомерВТЧСканирование].ТипДокумента;
	ВидТекущегоДокумента = Объект.Сканирование[НомерВТЧСканирование].ВидДокумента;
	ЗаполнитьТаблицуДокументом();
КонецПроцедуры // ПерейтиКСледующемуДокументу()

// Процедура заполняет все возможные реквизиты документа
//
// Параметры:
//  ВидТекущегоДокумента - Строка
//  ТипТекущегоДокумента - Строка
//  НомерВТЧСканирование - Число
//  ОбщаяСтоимость		 - Число
//  СуммаНалога			 - Число
//
&НаСервере
Процедура ЗаполнитьРеквизитыШапки(ВидТекущегоДокумента,ТипТекущегоДокумента,НомерВТЧСканирование,ОбщаяСтоимость,СуммаНалога)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДобавитьРеквизит("Вид документа", ВидТекущегоДокумента, ВидТекущегоДокумента);
	ДобавитьРеквизит("Тип документа", ТипТекущегоДокумента, ТипТекущегоДокумента);
	ДобавитьРеквизит("Номер", Объект.Сканирование[НомерВТЧСканирование].НомерДокумента, Объект.Сканирование[НомерВТЧСканирование].НомерДокумента);
	ДобавитьРеквизит("Дата", Объект.Сканирование[НомерВТЧСканирование].ДатаДокумента, Объект.Сканирование[НомерВТЧСканирование].ДатаДокумента);
	ДобавитьРеквизит("Организация", Объект.Сканирование[НомерВТЧСканирование].Организация, Объект.Сканирование[НомерВТЧСканирование].ОрганизацияИсходная);
	Если ЗначениеЗаполнено(Объект.Сканирование[НомерВТЧСканирование].Организация) и ТипЗнч(Объект.Сканирование[НомерВТЧСканирование].Организация)<>Тип("Строка") Тогда 
		АдресОрганизации = Объект.Сканирование[НомерВТЧСканирование].Организация.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Если ЗначениеЗаполнено(АдресОрганизации) Тогда 
			АдресОрганизации = АдресОрганизации.Представление;
		Иначе
			АдресОрганизации = Неопределено;
		КонецЕсли;
	Иначе
		АдресОрганизации = Неопределено;
	КонецЕсли;
	ДобавитьРеквизит("Адрес организации", Объект.Сканирование[НомерВТЧСканирование].АдресОрганизации, АдресОрганизации);
	// Обновление контрагента, если он был занесен в прошлом документе
	Если ТипЗнч(Объект.Сканирование[НомерВТЧСканирование].Контрагент)=Тип("Строка") Тогда  	
		Объект.Сканирование[НомерВТЧСканирование].Контрагент = ОбработкаОбъект.НайтиКонтрагента(
							Объект.Сканирование[НомерВТЧСканирование].КонтрагентИсходный,
							Объект.Сканирование[НомерВТЧСканирование].КонтрагентИНН,
							Объект.Сканирование[НомерВТЧСканирование].КонтрагентКПП);
	КонецЕсли;

	ДобавитьРеквизит("Контрагент", Объект.Сканирование[НомерВТЧСканирование].Контрагент, Объект.Сканирование[НомерВТЧСканирование].КонтрагентИсходный);
	Если ЗначениеЗаполнено(Объект.Сканирование[НомерВТЧСканирование].Контрагент) и ТипЗнч(Объект.Сканирование[НомерВТЧСканирование].Контрагент)<>Тип("Строка") Тогда 
		АдресКонтрагента = Объект.Сканирование[НомерВТЧСканирование].Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Если ЗначениеЗаполнено(АдресКонтрагента) Тогда 
			АдресКонтрагента = АдресКонтрагента.Представление;
		Иначе
			АдресКонтрагента = Неопределено;
		КонецЕсли;
	Иначе
		АдресКонтрагента = Неопределено;
	КонецЕсли;
	ДобавитьРеквизит("Адрес контрагента", Объект.Сканирование[НомерВТЧСканирование].АдресКонтрагента, АдресКонтрагента);
	ДобавитьРеквизит("Склад", Объект.СкладПокупка, Объект.СкладПокупка);
	ВсегоИсходное = ОбработкаОбъект.ПарсингЧисла(ОбщаяСтоимость);
	НДСИсходное = ОбработкаОбъект.ПарсингЧисла(СуммаНалога);
	ПредъявленСчетФактура = Ложь;
КонецПроцедуры // ЗаполнитьРеквизитыШапки()

// Процедура добавляет новый реквизит
//
// Параметры:
//  Название		 - Строка 
//  Значение		 - Строка/Справочник 
//  ИсходноеЗначение - Строка/Справочник 
//
&НаСервере
Процедура ДобавитьРеквизит(Название, Значение, ИсходноеЗначение=Неопределено)
	СтрокаРеквизитов = Реквизиты.Добавить();	
	СтрокаРеквизитов.Название = Название;
	СтрокаРеквизитов.Значение = Значение;
	Если ЗначениеЗаполнено(ИсходноеЗначение) Тогда 
		СтрокаРеквизитов.ИсходноеЗначение = ИсходноеЗначение;
	КонецЕсли;
	Если Название = "Организация" Тогда
		СтрокаРеквизитов.ЗначениеСтрокой = Строка(Значение);
	ИначеЕсли Название = "Контрагент" Тогда
		СтрокаРеквизитов.ЗначениеСтрокой = Строка(Значение);
	КонецЕсли;
КонецПроцедуры // ДобавитьРеквизит()

// Функция возвращает значени из таблицы COM объекта
//
// Параметры:
//  ЗаписиТабличнойЧасти - COM объект  
//  СтрокаТЧ			 - Число, номер строки
//  ИмяКолонки			 - Строка 
// 
// Возвращаемое значение:
//  Строка/Число 
//
&НаКлиенте
Функция ВзятьЗначениИзТаблицыПоИмени(ЗаписиТабличнойЧасти, СтрокаТЧ, ИмяКолонки) Экспорт
	Если ЗаписиТабличнойЧасти.Records.Count > СтрокаТЧ Тогда
		Результат = ЗаписиТабличнойЧасти.GetCell(СтрокаТЧ, ИмяКолонки);
		Если ЗначениеЗаполнено(Результат) Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

// Процедура заполняет табличную часть документа данными из COM объекта
//
// Параметры:
//  Документ - COM объект  
//
&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Документ)
	Попытка
		ЗаписиТабличнойЧасти = Документ.Tables.GetItem(0).Records;
		ТабличнаяЧастьКомОбъекта = Документ.Tables.GetItem(0);
		
		Для СчетчикСтрокТЧ = 0 по ЗаписиТабличнойЧасти.Count - 1 Цикл
			Имя = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "description");
			Если (Найти(Имя, "оварная накладная") = 0) Тогда
				стрКоличество = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "quantity"));
			//	Если ТипТекущегоДокумента = "Акт" Тогда
			//		стрСуммаНДС = ПарсингЧисла(ВзятьЗначениеПоля(Документ.Fields, "СуммаНалога"));
			//		стрЦена = ПарсингЧисла(ВзятьЗначениеПоля(Документ.Fields, "ОбщаяСтоимость")) - стрСуммаНДС;
			//		стрСумма = стрЦена;
			//		Если стрСумма <> 0 Тогда
			//			стрСтавкаНДС = Окр(стрСуммаНДС/стрСумма, 2);
			//		КонецЕсли;
			//	Иначе
	                стрСуммаНДС = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "nalogsum"));
					стрЦена = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "price"));
					стрСумма = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "cost"));
					стрСтавкаНДС = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "stavka");
            //  КонецЕсли;
				стрВсего = ПарсингЧисла(ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "sumnds"));
				ЕдиницаИзмерения = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "ed");
				КодОКЕИ = ВзятьЗначениИзТаблицыПоИмени(ТабличнаяЧастьКомОбъекта, СчетчикСтрокТЧ, "codOKEI");
				
				ДобавитьСтрокуТЧНакладная(Имя,стрКоличество,стрЦена,стрСумма,стрСтавкаНДС,стрСуммаНДС,стрВсего,ЕдиницаИзмерения,КодОКЕИ,СчетчикСтрокТЧ);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Не распозналась табличная часть документа");
	КонецПопытки;
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

&НаСервере
Функция ИсправитьКоличество(ТекущееКоличество, СтоимостьБезНДС, Цена, СуммаНДС, Всего)
	Если ТипЗнч(ТекущееКоличество)<>Тип("Число") Тогда
		ТекущееКоличество = 0;
	КонецЕсли;
	Если ТипЗнч(СтоимостьБезНДС)<>Тип("Число") Тогда
		СтоимостьБезНДС = 0;
	КонецЕсли;
	Если ТипЗнч(Цена)<>Тип("Число") Тогда
		Цена = 0;
	КонецЕсли;
	Если ТипЗнч(СуммаНДС)<>Тип("Число") Тогда
		СуммаНДС = 0;
	КонецЕсли;
	Если ТипЗнч(Всего)<>Тип("Число") Тогда
		Всего = 0;
	КонецЕсли;
	
	ТекущееКоличество = Окр(ТекущееКоличество,3);
	
	Если ТекущееКоличество < 100 Тогда
		Возврат ТекущееКоличество;
	КонецЕсли;
	
	ТекущееНаСто = Окр(ТекущееКоличество / 100, 3);
	
	ВременноеКоличество = Окр(СтоимостьБезНДС / Цена, 3);
	Если ТребуетсяЗаменаЧисла(ТекущееНаСто, ВременноеКоличество) Тогда
		Возврат ТекущееНаСто;
	КонецЕсли;
		
	ВременноеКоличество = Окр((Всего - СуммаНДС) / Цена, 3);
	Если ТребуетсяЗаменаЧисла(ТекущееНаСто, ВременноеКоличество) Тогда
		Возврат ТекущееНаСто;
	КонецЕсли;	
	
	Возврат ТекущееКоличество;
КонецФункции

&НаСервере
Функция ИсправитьСуммуБезНДС(ТекущаяСуммаБезНДС, Всего, СуммаНДС, Количество, Цена, СтавкаНалога)
	Если ТипЗнч(ТекущаяСуммаБезНДС)<>Тип("Число") Тогда
		ТекущаяСуммаБезНДС = 0;
	КонецЕсли;
	Если ТипЗнч(Всего)<>Тип("Число") Тогда
		Всего = 0;
	КонецЕсли;
	Если ТипЗнч(СуммаНДС)<>Тип("Число") Тогда
		СуммаНДС = 0;
	КонецЕсли;
	Если ТипЗнч(Количество)<>Тип("Число") Тогда
		Количество = 0;
	КонецЕсли;
	Если ТипЗнч(Цена)<>Тип("Число") Тогда
		Цена = 0;
	КонецЕсли;
	Если ТипЗнч(СтавкаНалога)<>Тип("Число") Тогда
		СтавкаНалога = 0;
	КонецЕсли;
	
	ТекущаяСуммаБезНДС = Окр(ТекущаяСуммаБезНДС, 2);
	
	Если ТекущаяСуммаБезНДС < 100 Тогда
		Возврат ТекущаяСуммаБезНДС;
	КонецЕсли;
	
	ТекущаяНаСто = Окр(ТекущаяСуммаБезНДС / 100, 2);
	
	ВременнаяСуммаБезНДС = Окр(Всего - СуммаНДС, 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаБезНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;
	
	ВременнаяСуммаБезНДС = Окр(Количество * Цена, 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаБезНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;
	
	ВременнаяСуммаБезНДС = Окр(Всего / (1 + (СтавкаНалога / 100)), 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаБезНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;
	
	Возврат ТекущаяСуммаБезНДС;
КонецФункции

&НаСервере
Функция ИсправитьСуммуСНДС(ТекущаяСуммаСНДС, СтоимостьБезНДС, СтавкаНДС, Всего)
	Если ТипЗнч(ТекущаяСуммаСНДС)<>Тип("Число") Тогда
		ТекущаяСуммаСНДС = 0;
	КонецЕсли;
	Если ТипЗнч(СтоимостьБезНДС)<>Тип("Число") Тогда
		СтоимостьБезНДС = 0;
	КонецЕсли;
	Если ТипЗнч(СтавкаНДС)<>Тип("Число") Тогда
		СтавкаНДС = 0;
	КонецЕсли;
	Если ТипЗнч(Всего)<>Тип("Число") Тогда
		Всего = 0;
	КонецЕсли;
	
	ТекущаяСуммаСНДС = Окр(ТекущаяСуммаСНДС, 2);
		
	Если ТекущаяСуммаСНДС < 100 Тогда
		Возврат ТекущаяСуммаСНДС;
	КонецЕсли;
	
	ТекущаяНаСто = Окр(ТекущаяСуммаСНДС / 100, 2);
	
	ВременнаяСуммаСНДС = Окр(СтоимостьБезНДС * СтавкаНДС, 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаСНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;
	
	ВременнаяСуммаСНДС = Окр(Всего - СтоимостьБезНДС, 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаСНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;

	ВременнаяСуммаСНДС = Окр(Всего * СтавкаНДС / (СтавкаНДС + 100), 2);
	Если ТребуетсяЗаменаЧисла(ТекущаяНаСто, ВременнаяСуммаСНДС) Тогда
		Возврат ТекущаяНаСто;
	КонецЕсли;
	
	Возврат ТекущаяСуммаСНДС;
КонецФункции

&НаСервере
Функция ИсправитьВсего(ТекущееВсего, СтоимостьБезНДС, СуммаНалога, Количество, Цена, СтавкаНалога)
	Если ТипЗнч(ТекущееВсего)<>Тип("Число") Тогда
		ТекущееВсего = 0;
	КонецЕсли;
	Если ТипЗнч(СтоимостьБезНДС)<>Тип("Число") Тогда
		СтоимостьБезНДС = 0;
	КонецЕсли;
	Если ТипЗнч(СуммаНалога)<>Тип("Число") Тогда
		СуммаНалога = 0;
	КонецЕсли;
	Если ТипЗнч(Количество)<>Тип("Число") Тогда
		Количество = 0;
	КонецЕсли;
	Если ТипЗнч(Цена)<>Тип("Число") Тогда
		Цена = 0;
	КонецЕсли;
	Если ТипЗнч(СтавкаНалога)<>Тип("Число") Тогда
		СтавкаНалога = 0;
	КонецЕсли;
	
	ТекущееВсего = Окр(ТекущееВсего, 2);
			
	Если ТекущееВсего < 100 Тогда
		Возврат ТекущееВсего;
	КонецЕсли;
	
	ТекущееНаСто = Окр(ТекущееВсего / 100, 2);
	
	ВременноеВсего = Окр(СтоимостьБезНДС + СуммаНалога, 2);
	Если (ТребуетсяЗаменаЧисла(ТекущееНаСто, ВременноеВсего)) Тогда
		Возврат ТекущееНаСто;
	КонецЕсли;
	
	ВременноеВсего = Окр(Количество * Цена * (1 + (СтавкаНалога/100)), 2);
	Если (ТребуетсяЗаменаЧисла(ТекущееНаСто, ВременноеВсего)) Тогда
		Возврат ТекущееНаСто;
	КонецЕсли;
	
	Возврат ТекущееВсего;
КонецФункции

&НаСервере
Функция МодульЧисла(Число)
	Если ТипЗнч(Число)<>Тип("Число") Тогда
		Число = 0;
	КонецЕсли;
    Возврат Макс(Число, -Число);
КонецФункции

&НаСервере
Функция ТребуетсяЗаменаЧисла(ТекущееНаСто, Временное)
	Если ТипЗнч(ТекущееНаСто)<>Тип("Число") Тогда
		ТекущееНаСто = 0;
	КонецЕсли;
	Если ТипЗнч(Временное)<>Тип("Число") Тогда
		Временное = 0;
	КонецЕсли;
	Возврат 1 > (МодульЧисла(ТекущееНаСто - Временное));
КонецФункции

// Команда заканчивает верификацию для списка документов
//
&НаКлиенте
Процедура ЗакрытьВерификацию(Команда)
	ВидимостьВерификация(Ложь);
КонецПроцедуры

// Процедура обновления полнотекстового индекса
//
&НаСервере
Процедура ОбновитьПолнотекстовыйИндексНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьПолнотекстовыйИндекс();
КонецПроцедуры

// Команда обновления полнотекстового индекса
//
&НаКлиенте
Процедура ОбновитьПолнотекстовыйИндекс(Команда)
	ОбновитьПолнотекстовыйИндексНаСервере();
КонецПроцедуры

// Процедура создания новой организации в БД по данным из текущей строки в ТЧ Сканирование
//
// Параметры:
//  НомерСтроки	 - Число, номер строки в ТЧ
//
&НаСервере
Процедура ДобавитьОрганизациюНаСервере(НомерСтроки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НужнаяСтрока = ОбработкаОбъект.Сканирование[НомерСтроки-1];
	НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
	НоваяОрганизация.ИНН = НужнаяСтрока.ОрганизацияИНН;
	НоваяОрганизация.КПП = НужнаяСтрока.ОрганизацияКПП;
	НоваяОрганизация.Наименование = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПолное = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПлательщикаПриПеречисленииВБюджет = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеСокращенное = НужнаяСтрока.Организация;
	НоваяОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	НоваяОрганизация.Записать();
	НужнаяСтрока.Организация = Неопределено;
	НужнаяСтрока.Организация = НоваяОрганизация.Ссылка;
	НужнаяСтрока.ОрганизацияСтрока = Строка(НоваяОрганизация.Ссылка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда создания новой организации в БД по данным из текущей строки в ТЧ Сканирование
//
&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)
	НужнаяСтрока = Элементы.Сканирование.ТекущиеДанные.НомерСтроки;
	Если НужнаяСтрока<>Неопределено Тогда 
		ДобавитьОрганизациюНаСервере(НужнаяСтрока);
		П = Новый Структура("Ключ", Элементы.Сканирование.ТекущиеДанные.Организация);
		ОткрытьФорму("Справочник.Организации.Форма.ФормаОрганизации",П);
	КонецЕсли;
КонецПроцедуры

// Команда пропускает документ для обработки и переходит к следующему
//
&НаКлиенте
Процедура ПропуститьДокумент(Команда)
	Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	//НомерТекущегоДокумента = НомерТекущегоДокумента + 1;
	Если (НомерТекущегоДокумента >= ВсеДокументы.Количество()) Тогда
		Предупреждение("Все документы отправлены, форма будет закрыта");
		ВидимостьВерификация(Ложь);
		Возврат;
	Иначе
		ПерейтиКСледующемуДокументу();
	КонецЕсли;
КонецПроцедуры

// Процедура удаления документа из списка документов для обработки
//
&НаКлиенте
Функция  УдалитьДокументКлиент()
	Объект.Сканирование.Удалить(НомерВТЧСканирование);
	КомДокумент = ВсеДокументы[НомерВТЧСканирование];
	КомДокумент.RemoveDocument();
	ВсеДокументы.Удалить(НомерВТЧСканирование);
	НомерВТЧСканирование = НомерВТЧСканирование-1;
	Если (НомерТекущегоДокумента = ВсеДокументы.Количество()) Тогда
		Возврат("Все документы отправлены, форма будет закрыта");
	Иначе
		ПерейтиКСледующемуДокументу();
	КонецЕсли;
	Возврат Неопределено;	
КонецФункции

// Команда удаления документа из списка документов для обработки
//
&НаКлиенте
Процедура УдалитьДокумент(Команда)
	Ответ = Вопрос("Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Ошибка = УдалитьДокументКлиент();
		Если ЗначениеЗаполнено(Ошибка) Тогда 
			Предупреждение(Ошибка);
			ВидимостьВерификация(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура запуска процедуры создания документа в базе данных
//
&НаКлиенте
Процедура ВыполнитьВерификациюНаКлиенте()
	
	Попытка     //kalb - добавление проверки года на ВерификацииКлиента
	Для Каждого реквизит из Реквизиты Цикл
	Если реквизит.Название = "Дата" Тогда
		Если Год(реквизит.Значение)>3999 Тогда
		ВызватьИсключение("Год документа больше 3999");
	КонецЕсли;
	КонецЕсли;
	КонецЦикла;
	Исключение
	НевернаяДата();
	Возврат;
    КонецПопытки;  //kalb

	ДокументСоздан = Ложь;
	ДокументСоздан = СоздатьДокумент();
	Если ДокументСоздан = Ложь Тогда 
		Возврат;
	КонецЕсли;
	ДобавитьСоответствияВСловарь();
	КомДокумент = ВсеДокументы[НомерВТЧСканирование];
	ГУИДПоле = ПолучитьПоле(КомДокумент.Fields,"guid");
	ГУИДПоле.Value  = Строка(ДокументСоздан.УникальныйИдентификатор());
	УчетИзмененийНаСтадииВерификации(КомДокумент);
	КомДокумент.SubmitDocument();
	//КомДокумент.RemoveDocument();
	Объект.Сканирование[НомерВТЧСканирование].Экспортировать = Ложь;
	номерТекущегоДокумента = номерТекущегоДокумента + 1;
	Если (НомерТекущегоДокумента >= ВсеДокументы.Количество()) Тогда
		Предупреждение("Все документы отправлены, форма будет закрыта");
		ВидимостьВерификация(Ложь);
		Возврат;
	Иначе
		ПерейтиКСледующемуДокументу();
	КонецЕсли;
КонецПроцедуры

// Функция получает поле COM объекта по имени поля
//
// Параметры:
//  Поля		 - COM объект 
//  ИскомоеИмя	 - Строка
// 
// Возвращаемое значение:
//  COM j,]trn
//
&НаКлиенте
Функция ПолучитьПоле(Поля, ИскомоеИмя) 
	Для Счетчик = 0 To Поля.Count - 1 Цикл
		Поле = Поля.GetItem(Счетчик);
		Если (Поле.Name = ИскомоеИмя) Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция создает новый документ в БД
// 
// Возвращаемое значение:
//  Ссылка на документ 
//
&НаСервере
Функция СоздатьДокумент()
ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыТЗ = Реквизиты.Выгрузить();
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	// Подключаем компоненту вычисления похожести
	//WSH=Новый COMobject("wscript.shell"); 
	//ПутьКИстории = WSH.ExpandEnvironmentStrings("%ALLUSERSPROFILE%");
	//ПолноеИмя = ПутьКИстории+"\1C\StrMatch.dll";
	//Компонента = ПодключитьВнешнююКомпоненту(ПолноеИмя, "Comp", ТипВнешнейКомпоненты.COM);
	//Адин = Новый ("Addin.Comp.StrMatchExtension");	
	// Создаем номенклатуру по распознанным значениям
	Для Каждого Строка из ТабличнаяЧасть Цикл
		Если ТипЗнч(Строка.Номенклатура) = Тип("Строка") и Строка.Номенклатура <> "" Тогда
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			НоваяНоменклатура.Наименование = Строка.Номенклатура;
			НоваяНоменклатура.НаименованиеПолное = Строка.Номенклатура;
			Если Строка.ТипНоменклатуры = "Товар" Тогда 
				Если ТипЗнч(Строка.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда 
					НоваяНоменклатура.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				Иначе
					МассивОтбор = Новый Массив();
					МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
					СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
					СписокПоиска.ПолучатьОписание = Истина;
					ПоказыватьОписания = Истина;
					СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
					// Поиск исходной строки
					//НомерСтроки = Строка.НомерСтроки;
					//ПараметрыОтбора = Новый Структура;
					//ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
					//ПараметрыОтбора.Вставить("Исходная", Истина);
					//ИсходнаяСтрока = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
					// Заполнение единицы измерения
					Если Строка.ЕдиницаИзмеренияИсходная="" Тогда
						НоваяНоменклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
					Иначе
						СписокПоиска.СтрокаПоиска = Лев(Строка(Строка.ЕдиницаИзмеренияИсходная),99); // текст поиска можно задать и так
						СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
						МассивОтбор = Новый Массив();
						МассивОтбор.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
						СписокПоиска.ОбластьПоиска = МассивОтбор;
						СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"""","");
						СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"«","");
						СписокПоиска.ПерваяЧасть();
						СписокЗначений = Новый СписокЗначений;
						ТаблицаДляСортировки = Новый ТаблицаЗначений;
						ТаблицаДляСортировки.Колонки.Добавить("Значение");
						ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
						ТаблицаДляСортировки.Очистить();
						Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
							Значение = СписокПоиска.Получить(Индекс).Значение;
							Если не Значение.ПометкаУдаления Тогда
								Строка1 = Строка(Значение.Наименование); 
								Строка2 = Строка(Строка.ЕдиницаИзмеренияИсходная);
								Если Строка1 = "" или Строка2 = "" Тогда 
									Продолжить;
								КонецЕсли;
								//МаксимумПохожести = Адин.Сравнить(Строка2,Строка2);
								//МаксимумПохожести = fillinUtils.StrCompare(Строка2,Строка2);
								МаксимумПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
								//МаксимумПохожести = 0;
								Если МаксимумПохожести=0 Тогда 
									ПроцентПохожести = 100;
								Иначе
									ПроцентПохожести = Окр(ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2)/МаксимумПохожести*100,0);
								КонецЕсли;
								СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
								СтрокаТаблицы.Значение = Значение;
								СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
							КонецЕсли;
						КонецЦикла;
						ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
						Если ТаблицаДляСортировки.Количество()=0 Тогда 
							ПоискЕдиницыИзмерения = Неопределено
						Иначе
							ПоискЕдиницыИзмерения = ТаблицаДляСортировки[0];
						КонецЕсли;
						Если ЗначениеЗаполнено(ПоискЕдиницыИзмерения) Тогда 
							НоваяНоменклатура.ЕдиницаИзмерения = ПоискЕдиницыИзмерения.Значение;
						Иначе
							НоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
							НоваяЕдиницаИзмерения.Наименование = Строка.ЕдиницаИзмерения;
							НоваяЕдиницаИзмерения.НаименованиеПолное = Строка.ЕдиницаИзмерения;
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	КлассификаторЕдиницИзмерения.Код КАК Код
								|ИЗ
								|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
								|
								|УПОРЯДОЧИТЬ ПО
								|	Код УБЫВ";

							РезультатЗапроса = Запрос.Выполнить();
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							ВыборкаДетальныеЗаписи.Следующий();
							НовыйКод = Число(ВыборкаДетальныеЗаписи.Код)+1;
							НоваяЕдиницаИзмерения.Код = Лев(Строка(НовыйКод),3);
							НоваяЕдиницаИзмерения.Записать();
							НоваяНоменклатура.ЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяНоменклатура.Услуга = Истина;
			КонецЕсли;
			НоваяНоменклатура.Записать();
			Строка.Номенклатура = НоваяНоменклатура.Ссылка;
		КонецЕсли;
	КонецЦикла;
	// Механизм создания документов в базе
	Если ТипТекущегоДокумента = "Счет-фактура" или ТипТекущегоДокумента = "УПД (Передаточный документ и СФ)" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ(ОбработкаОбъект);   
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка;
			// Создаем к нему счет-фактуру
			НоваяСчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
			НоваяСчетФактура.Заполнить(НовоеПоступление.Ссылка);
			НоваяСчетФактура.ДатаВходящегоДокумента = РеквизитыТЗ.Найти("Дата","Название").Значение;
			НоваяСчетФактура.НомерВходящегоДокумента = РеквизитыТЗ.Найти("Номер","Название").Значение;
			Попытка
				НоваяСчетФактура.Записать();
				Сообщить("Создан документ "+НоваяСчетФактура.Ссылка);
				// Добавление записи на вкладку история
				НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
				НоваяСтрокаИстории.Дата = ТекущаяДата();
				НоваяСтрокаИстории.Ссылка = НоваяСчетФактура.Ссылка;
			Исключение
				Сообщить("Не уникален номер счета-фактуры, запись невозможна: "+НоваяСчетФактура.Ссылка);
			КонецПопытки;
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НоваяСчетФактура.Ссылка;
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НовоеПоступление.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ(ОбработкаОбъект);
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			// Заполнение таблицы для открытия созданных документов
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НоваяРеализация.Ссылка;
			// Создаем к нему счет-фактуру
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			НоваяСчетФактура.Заполнить(НоваяРеализация.Ссылка);
			НоваяСчетФактура.ДатаВыставления = РеквизитыТЗ.Найти("Дата","Название").Значение;
			НоваяСчетФактура.Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
			НоваяСчетФактура.Номер = РеквизитыТЗ.Найти("Номер","Название").Значение;
			Попытка
				НоваяСчетФактура.Записать();
				Сообщить("Создан документ "+НоваяСчетФактура.Ссылка);
				// Добавление записи на вкладку история
				НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
				НоваяСтрокаИстории.Дата = ТекущаяДата();
				НоваяСтрокаИстории.Ссылка = НоваяСчетФактура.Ссылка;
			Исключение
				Сообщить("Не уникален номер счета-фактуры, запись невозможна: "+НоваяСчетФактура.Ссылка);
			КонецПопытки;
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НоваяСчетФактура.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Накладная" или ТипТекущегоДокумента = "УПД (Передаточный документ)"Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ(ОбработкаОбъект, Истина, Истина);
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ(ОбработкаОбъект);
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка; 
			
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НовоеПоступление.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			НоваяРеализация = СоздатьИЗаполнитьРеализациюТиУ(ОбработкаОбъект);
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НоваяРеализация.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Акт" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			// Создаем новый документ поступления
			НовоеПоступление = СоздатьИЗаполнитьПостплениеТиУ(ОбработкаОбъект, Истина, Истина);
			Если НовоеПоступление = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НовоеПоступление.Записать();
			Сообщить("Создан документ "+НовоеПоступление.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НовоеПоступление.Ссылка;
			
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НовоеПоступление.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НовоеПоступление.Ссылка;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			НоваяРеализация = СоздатьИЗаполнитьАктОбОказании(ОбработкаОбъект);
			Если НоваяРеализация = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;
			НоваяРеализация.Записать();
			Сообщить("Создан документ "+НоваяРеализация.Ссылка);
			// Добавление записи на вкладку история
			НоваяСтрокаИстории = ОбработкаОбъект.История.Добавить();
			НоваяСтрокаИстории.Дата = ТекущаяДата();
			НоваяСтрокаИстории.Ссылка = НоваяРеализация.Ссылка;
			
			ТаблицаДокументов.Очистить();
			НоваяСтрокаДляОткрытия = ТаблицаДокументов.Добавить();
			НоваяСтрокаДляОткрытия.Документ = НоваяРеализация.Ссылка;
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			Возврат НоваяРеализация.Ссылка;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Функция создает и заполняет новый документ РеализациюТиУ
//
// Параметры:
//  ОбработкаОбъект	 - Обработка 
// 
// Возвращаемое значение:
//  Ссылка на документ РеализациюТиУ
//
&НаСервере
Функция СоздатьИЗаполнитьРеализациюТиУ(ОбработкаОбъект)
	РеквизитыТЗ = Реквизиты.Выгрузить();
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	Организация = РеквизитыТЗ.Найти("Организация","Название").Значение;
	Контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение;
	
	НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	НоваяРеализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаПроведенияДокументаПродажи Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НоваяРеализация.Дата = Дата;
	Если Не ОбработкаОбъект.ТекущаяДатаВДокументеПродажи Тогда
	    Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	Иначе 
	    Дата = ТекущаяДата();
	КонецЕсли;
	НоваяРеализация.Организация = Организация;
	НоваяРеализация.Контрагент = Контрагент;
	НоваяРеализация.Склад = РеквизитыТЗ.Найти("Склад","Название").Значение;
	//НоваяРеализация.ДокументБезНДС = не УчитыватьНДС;
	НоваяРеализация.СуммаВключаетНДС = СуммаВклНДС;
	НоваяРеализация.КурсВзаиморасчетов = 1;
	НоваяРеализация.ВалютаДокумента = ОбработкаОбъект.мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если НЕ НоваяРеализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НоваяРеализация,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НоваяРеализация.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НоваяРеализация.Контрагент) и ТипЗнч(НоваяРеализация.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НоваяРеализация.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НоваяРеализация.Организация) и ТипЗнч(НоваяРеализация.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НоваяРеализация.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = ОбработкаОбъект.мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				//переписать
				//Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			//переписать
			//Предупреждение("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НоваяРеализация.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансовРеализация(НоваяРеализация);
	// Заполнение счетов
	НоваяРеализация.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПродажа;
	НоваяРеализация.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПродажа;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Товары.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчета = ОбработкаОбъект.СчетУчетаПродажа;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			Если НоваяСтрокаТЧДокумента.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
				НоваяСтрокаТЧДокумента.Субконто = Новый(НоваяСтрокаТЧДокумента.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
				Если ТипЗнч(НоваяСтрокаТЧДокумента.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					НоваяСтрокаТЧДокумента.Субконто = НоваяСтрокаТЧДокумента.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			Иначе
				НоваяСтрокаТЧДокумента.Субконто = Неопределено;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Содержание = Строка(СтрокаТЧ.Номенклатура.НаименованиеПолное);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяРеализация;
КонецФункции // СоздатьИЗаполнитьРеализациюТиУ()

// Функция создает и заполняет новый документ Оказание производственных услуг
//
// Параметры:
//  ОбработкаОбъект	 - Обработка 
// 
// Возвращаемое значение:
//  Ссылка на документ Оказание производственных услуг
//
&НаСервере
Функция СоздатьИЗаполнитьАктОбОказании(ОбработкаОбъект)
	РеквизитыТЗ = Реквизиты.Выгрузить();
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	Организация = РеквизитыТЗ.Найти("Организация","Название").Значение;
	Контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение;
	
	НоваяРеализация = Документы.АктОбОказанииПроизводственныхУслуг.СоздатьДокумент();
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаВДокументеПродажи Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НоваяРеализация.Дата = Дата;
	НоваяРеализация.Организация = Организация;
	НоваяРеализация.Контрагент = Контрагент;
	//НоваяРеализация.НДСВключенВСтоимость = не УчитыватьНДС;
	НоваяРеализация.СуммаВключаетНДС = СуммаВклНДС;
	НоваяРеализация.КурсВзаиморасчетов = 1;
	НоваяРеализация.ВалютаДокумента = ОбработкаОбъект.мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НоваяРеализация,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НоваяРеализация.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НоваяРеализация.Контрагент) и ТипЗнч(НоваяРеализация.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НоваяРеализация.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НоваяРеализация.Организация) и ТипЗнч(НоваяРеализация.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НоваяРеализация.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = ОбработкаОбъект.мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				//Переписать
				//Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			//переписать
			//Предупреждение("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НоваяРеализация.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансовАкт(НоваяРеализация);
	// Заполнение счетов
	НоваяРеализация.СчетЗатрат = ОбработкаОбъект.СчетУчетаПродажа;
	НоваяРеализация.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПродажа;
	НоваяРеализация.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПродажа;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			Продолжить;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НоваяРеализация.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.ПлановаяСтоимость = НоваяСтрокаТЧДокумента.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
				НоваяСтрокаТЧДокумента.СуммаПлановая = НоваяСтрокаТЧДокумента.Сумма;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.ПлановаяСтоимость = НоваяСтрокаТЧДокумента.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
				НоваяСтрокаТЧДокумента.СуммаПлановая = НоваяСтрокаТЧДокумента.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчетаНДСПоРеализации = ОбработкаОбъект.СчетУчетаНДСПоРеализации;
			НоваяСтрокаТЧДокумента.СчетДоходов = ОбработкаОбъект.СчетДоходов;
			НоваяСтрокаТЧДокумента.СчетРасходов = ОбработкаОбъект.СчетРасходовПоУмолчанию
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяРеализация;	
КонецФункции

// Процедура заполнения строки ТЧ
//
// Параметры:
//  СтрокаТабЧасти	 - строка ТЧ 
//  СуммаВключаетНДС - Булево 
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиУслуги(СтрокаТабЧасти, СуммаВключаетНДС)
	
	СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
	
	СтрокаТабЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТабЧасти.СчетДоходов);
	
КонецПроцедуры

// Функция поиска существующего документ в базе по реквизитам текущего документа на стадии верификации
// 
// Возвращаемое значение:
//   Ссылка на документ 
//
&НаСервере
Функция НайтиСуществующийДокумент()
	РеквизитыТЗ = Реквизиты.Выгрузить();
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
            //
	Номер = РеквизитыТЗ.Найти("Номер","Название").Значение;
	Организация = РеквизитыТЗ.Найти("Организация","Название").Значение;
	Контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение;
	Если ТипТекущегоДокумента = "Акт" или ТипТекущегоДокумента = "Накладная" или ТипТекущегоДокумента = "УПД (Передаточный документ)"Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда 
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПоступлениеТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Организация = &Организация
				|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент";
				Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И ПоступлениеТоваровУслуг.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			Попытка
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
			Исключение 
			КонецПопытки;
		ИначеЕсли ВидТекущегоДокумента = "Реализация" и ТипТекущегоДокумента = "Акт" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	АктОбОказанииПроизводственныхУслуг.Ссылка
				|ИЗ                            kalbakhtin
				
				|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
				|ГДЕ
				|	АктОбОказанииПроизводственныхУслуг.Организация = &Организация
				|	И АктОбОказанииПроизводственныхУслуг.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И АктОбОказанииПроизводственныхУслуг.Дата = &Дата"; 
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;	
		ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда 
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	РеализацияТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|ГДЕ
				|	РеализацияТоваровУслуг.Организация = &Организация
				|	И РеализацияТоваровУслуг.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И РеализацияТоваровУслуг.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ТипТекущегоДокумента = "Счет-фактура" или ТипТекущегоДокумента = "УПД (Передаточный документ и СФ)" Тогда
		Если ВидТекущегоДокумента = "Поступление" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураПолученный.Ссылка
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
				|ГДЕ
				|	СчетФактураПолученный.Организация = &Организация
				|	И СчетФактураПолученный.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураПолученный.ДатаВходящегоДокумента = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Попытка       //kalb - добавил на всякий случай
				Если Год(Дата)>3999 Тогда
				ВызватьИсключение("Год>3999")
				КонецЕсли;
			РезультатЗапроса = Запрос.Выполнить();
		    Исключение
			Возврат неопределено;
		    КонецПопытки;     //kalb
		
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		    ИначеЕсли ВидТекущегоДокумента = "Реализация" Тогда
			// Ищем существующие документы
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.Организация = &Организация
				|	И СчетФактураВыданный.Контрагент = &Контрагент";
			Если ЗначениеЗаполнено(Дата) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураВыданный.Дата = &Дата";
				Запрос.УстановитьПараметр("Дата", Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(Номер) Тогда
				Запрос.Текст = Запрос.Текст+" И СчетФактураВыданный.Номер = &НомерВходящегоДокумента";
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
			КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Функция создает и заполняет новый документ Постпление ТиУ
//
// Параметры:
//  ОбработкаОбъект	 - Обработка 
//  ВходящийНомер	 - Булево, необходимость заполнения реквизита входящий номер 
//  ВходящаяДата	 - Булево, необходимость заполнения реквизита входящая дата 
// 
// Возвращаемое значение:
//  Ссылка на документ Поступление ТиУ
//
&НаСервере
Функция СоздатьИЗаполнитьПостплениеТиУ(ОбработкаОбъект, ВходящийНомер = Ложь, ВходящаяДата = Ложь)
	РеквизитыТЗ = Реквизиты.Выгрузить();
	Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	Номер = РеквизитыТЗ.Найти("Номер","Название").Значение;
	Организация = РеквизитыТЗ.Найти("Организация","Название").Значение;
	Контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение;
	НовоеПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовоеПоступление.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	// В документе дата не может быть пустой, поэтому заполняем пустую дату текущей
	Если Не ЗначениеЗаполнено(Дата) или ОбработкаОбъект.ТекущаяДатаПроведенияДокументаПокупки Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	НовоеПоступление.Дата = Дата;
	Если Не ОбработкаОбъект.ТекущаяДатаВДокументеПокупки Тогда
	     Дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
    Иначе 
	     Дата = ТекущаяДата();
	КонецЕсли;
	Если ВходящаяДата и не ПредъявленСчетФактура Тогда 
		НовоеПоступление.ДатаВходящегоДокумента = Дата;
	КонецЕсли;
	Если ВходящийНомер и не ПредъявленСчетФактура Тогда 
		НовоеПоступление.НомерВходящегоДокумента = Номер;
	КонецЕсли;
	НовоеПоступление.Организация = Организация;
	НовоеПоступление.Контрагент = Контрагент;
	НовоеПоступление.Склад = РеквизитыТЗ.Найти("Склад","Название").Значение; 
	//НовоеПоступление.НДСВключенВСтоимость = не УчитыватьНДС;   
	НовоеПоступление.СуммаВключаетНДС = СуммаВклНДС;
	НовоеПоступление.КурсВзаиморасчетов = 1;
	НовоеПоступление.ВалютаДокумента = ОбработкаОбъект.мВалютаРегламентированногоУчета;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	// Заполнение Договора
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НовоеПоступление,мСписокВидовДоговоров);
	Если не ЗначениеЗаполнено(НовоеПоступление.ДоговорКонтрагента) Тогда
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(НовоеПоступление.Контрагент) и ТипЗнч(НовоеПоступление.Контрагент)<>Тип("Строка")Тогда 
			НовыйДоговор.Владелец = НовоеПоступление.Контрагент.Ссылка;
			Если ЗначениеЗаполнено(НовоеПоступление.Организация) и ТипЗнч(НовоеПоступление.Организация)<>Тип("Строка") Тогда 
				НовыйДоговор.Организация = НовоеПоступление.Организация.Ссылка;
				НовыйДоговор.ВалютаВзаиморасчетов = ОбработкаОбъект.мВалютаРегламентированногоУчета; 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				НовыйДоговор.Наименование = "Договор с поставщиком от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Сообщить("Не определена организация, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Сообщить("Не определен контрагент, нет возможности создать договор контрагента.");
		КонецЕсли;
		НовоеПоступление.ДоговорКонтрагента = НовыйДоговор.Ссылка;	
	КонецЕсли;
	// Заполнение типа авансов
	УстановитьСпособЗачетаАвансов(НовоеПоступление);
	// Заполнение счетов
	НовоеПоступление.СчетУчетаРасчетовСКонтрагентом = ОбработкаОбъект.СчетРасчетаСКонтрагентомПокупка;
	НовоеПоступление.СчетУчетаРасчетовПоАвансам = ОбработкаОбъект.СчетРасчетаПоАвансамПокупка;
	// Заполнение ТЧ
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.ТипНоменклатуры = "Товар" Тогда 
			НоваяСтрокаТЧДокумента = НовоеПоступление.Товары.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетУчета = ОбработкаОбъект.СчетУчетаПокупка;
			НоваяСтрокаТЧДокумента.СчетУчетаНДС = ОбработкаОбъект.СчетУчетаНДСПокупка;
		ИначеЕсли СтрокаТЧ.ТипНоменклатуры = "Услуга" Тогда 
			НоваяСтрокаТЧДокумента = НовоеПоступление.Услуги.Добавить();
			НоваяСтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧДокумента.Содержание = Строка(СтрокаТЧ.Номенклатура.НаименованиеПолное);
			НоваяСтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
			Если СуммаВклНДС и УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.ЦенаСНДС;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Всего;
			Иначе
				НоваяСтрокаТЧДокумента.Цена = СтрокаТЧ.Цена;
				НоваяСтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
			КонецЕсли;
			Если УчитыватьНДС Тогда 
				НоваяСтрокаТЧДокумента.СуммаНДС = СтрокаТЧ.СуммаНДС;
				НоваяСтрокаТЧДокумента.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			КонецЕсли;
			НоваяСтрокаТЧДокумента.СчетЗатрат = ОбработкаОбъект.СчетЗатратБУПокупка;
			НоваяСтрокаТЧДокумента.СчетЗатратНУ = ОбработкаОбъект.СчетЗатратНУПокупка;
			НоваяСтрокаТЧДокумента.СчетУчетаНДС = ОбработкаОбъект.СчетУчетаНДСУслугиПокупка;
		КонецЕсли;
	КонецЦикла;
	
   
	Если ПредъявленСчетФактура Тогда    //kalb - начал редактирование
	    Попытка
		НовоеПоступление.ПредъявленСчетФактура = ПредъявленСчетФактура;     
		НовоеПоступление.НомерВходящегоСчетаФактуры = Номер;
		НовоеПоступление.ДатаВходящегоСчетаФактуры = Дата;
		НовоеПоступление.КодВидаОперации = "01";
		НовоеПоступление.НДСПредъявленКВычету = Истина;
	Исключение

	КонецПопытки;   // 
	
	КонецЕсли;
	Возврат НовоеПоступление;
КонецФункции // СоздатьПостплениеТиУ()

// Команда запуска процедуры создания документа в базе данных
//
&НаКлиенте
Процедура ВыполнитьВерификацию(Команда)
	НайденныйДокумент = НайтиСуществующийДокумент();
	Ответ = Вопрос("В базе найден документ с такими же реквизитами: "+НайденныйДокумент+". Создать новый документ?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Проверка корректности заполнения верифицированного документа
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Название", "Организация");	
		ОрганизацияПроверка = Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].Значение;
		ПараметрыОтбора.Очистить();
		ПараметрыОтбора.Вставить("Название", "Контрагент");
		КонтрагентПроверка = Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].Значение;
		Если ТипЗнч(ОрганизацияПроверка)=Тип("Строка") Тогда  
			Ответ = Вопрос("Значение организации некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда 
				Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(КонтрагентПроверка)=Тип("Строка") Тогда 
			Ответ = Вопрос("Значение контрагента некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда 
				Возврат;
			КонецЕсли;
		Иначе
			Для Каждого Строка из ТабличнаяЧасть Цикл
				Если ТипЗнч(Строка.Номенклатура)=Тип("Строка") Тогда 
					Ответ = Вопрос("Значения номенклатуры в одной из строк табличной части некорректно, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли Строка.Количество=0 Тогда 
					Ответ = Вопрос("Значение количества в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли Строка.Цена=0 Тогда 
					Ответ = Вопрос("Значение цены в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли Строка.Сумма=0 Тогда 
					Ответ = Вопрос("Значение суммы в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли Строка.Всего=0 Тогда 
					Ответ = Вопрос("Значение ""всего"" в одной из строк табличной части некорректны, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли НоменклатураУслуга(Строка.Номенклатура) и Строка.ТипНоменклатуры="Товар" Тогда 
					Ответ = Вопрос("В одной из строк табличной части находится услуга помеченная как товар, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли не НоменклатураУслуга(Строка.Номенклатура) и Строка.ТипНоменклатуры="Услуга" Тогда 
					Ответ = Вопрос("В одной из строк табличной части находится товар помеченный как услуга, проведение документа может быть невозможно. Вы действительно ходите записать документ в систему?",РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда 
						Возврат;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;                              
		КонецЕсли;
		
		Попытка
		ВыполнитьВерификациюНаКлиенте();
	    Исключение
		Возврат
		КонецПопытки;
		//Ошибка = ВыполнитьВерификациюНаСервере();
		//Если ЗначениеЗаполнено(Ошибка) Тогда 
		//	Предупреждение(Ошибка);
		//	ВидимостьВерификация(Ложь);
		//КонецЕсли;
		Для Каждого Строка из ТаблицаДокументов Цикл
			ОткрытьЗначение(Строка.Документ); 
		КонецЦикла;	                                        
	КонецЕсли;
КонецПроцедуры

// Функция возвращает результат проверки, что номенклатура является услугой
//
// Параметры:
//  Номенклатура - ссылка на номенклатуру 
// 
// Возвращаемое значение:
//  Булево 
//
&НаСервереБезКонтекста
Функция НоменклатураУслуга(Номенклатура)
	Если Номенклатура.Услуга Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // НоменклатураУслуга()

// Процедура добавляет пары строка-ссылка в словарь соответствий
//
&НаСервере
Процедура ДобавитьСоответствияВСловарь()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыТЗ = Реквизиты.Выгрузить();
	Для Каждого Строка из ТабличнаяЧасть Цикл
		Если ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда 
			Продолжить;
		КонецЕсли;
		// Поиск исходной строки
		Если Строка.НоменклатураИсходная = Строка.Номенклатура или не ЗначениеЗаполнено(Строка.НоменклатураИсходная) Тогда 
			Продолжить;
		КонецЕсли;
		Контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
			НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			НужныйКонтрагент = Контрагент;
		КонецЕсли;
		Наименование = Строка.НоменклатураИсходная;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Очистить();
		ПараметрыОтбора.Вставить("Строка", Наименование);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", НужныйКонтрагент);
		КонецЕсли;
		ПоискСтрок = ОбработкаОбъект.СловарьСоответствийНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если ПоискСтрок.Количество() = 1 Тогда 
			ПодходящаяСтрока = ПоискСтрок[0];
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
		ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
			ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийНоменклатуры.Добавить();
			ПодходящаяСтрока.Контрагент = Контрагент;
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
			ПодходящаяСтрока.Строка = Наименование;
		Иначе
			Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
				ОбработкаОбъект.СловарьСоответствийНоменклатуры.Удалить(НайденнаяСтрока);
			КонецЦикла;
			ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийНоменклатуры.Добавить();
			ПодходящаяСтрока.Контрагент = Контрагент;
			ПодходящаяСтрока.Номенклатура = Строка.Номенклатура;
			ПодходящаяСтрока.Строка = Наименование;
		КонецЕсли;
	КонецЦикла;
	СтрокаДляСловаря = РеквизитыТЗ.Найти("Организация","Название");
	Если СтрокаДляСловаря <> Неопределено Тогда
		Если ТипЗнч(СтрокаДляСловаря.Значение)<>Тип("Строка")и ЗначениеЗаполнено(СтрокаДляСловаря.ИсходноеЗначение) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Строка", СтрокаДляСловаря.ИсходноеЗначение);
			ПоискСтрок = ОбработкаОбъект.СловарьСоответствийОрганизаций.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				ПодходящаяСтрока = ПоискСтрок[0];
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
			ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийОрганизаций.Добавить();
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			Иначе
				Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
					ОбработкаОбъект.СловарьСоответствийОрганизаций.Удалить(НайденнаяСтрока);
				КонецЦикла;
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийОрганизаций.Добавить();
				ПодходящаяСтрока.Организация = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтрокаДляСловаря = РеквизитыТЗ.Найти("Контрагент","Название");
	Если СтрокаДляСловаря <> Неопределено Тогда
		Если ТипЗнч(СтрокаДляСловаря.Значение)<>Тип("Строка")и ЗначениеЗаполнено(СтрокаДляСловаря.ИсходноеЗначение) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("Строка", СтрокаДляСловаря.ИсходноеЗначение);
			ПоискСтрок = ОбработкаОбъект.СловарьСоответствийКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			Если ПоискСтрок.Количество() = 1 Тогда 
				ПодходящаяСтрока = ПоискСтрок[0];
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
			ИначеЕсли ПоискСтрок.Количество() = 0 Тогда 
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийКонтрагентов.Добавить();
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			Иначе
				Для Каждого НайденнаяСтрока из ПоискСтрок Цикл
					ОбработкаОбъект.СловарьСоответствийКонтрагентов.Удалить(НайденнаяСтрока);
				КонецЦикла;
				ПодходящаяСтрока = ОбработкаОбъект.СловарьСоответствийКонтрагентов.Добавить();
				ПодходящаяСтрока.Контрагент = СтрокаДляСловаря.Значение;
				ПодходящаяСтрока.Строка = СтрокаДляСловаря.ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Процедура воздращает изменения в реквизитах документа на стадии верификации обратно через COM соединение
//
// Параметры:
//  КомДокумент	 - COM объект для записи в него измененных данных 
//
&НаКлиенте
Процедура УчетИзмененийНаСтадииВерификации(КомДокумент)
	//РеквизитыТЗ = Реквизиты.Выгрузить();
	РеквизитыТЗ = Реквизиты;
	Отбор = Новый Структура;
	Отбор.Вставить("Название", "Номер");
	РезультатПоиска = РеквизитыТЗ.НайтиСтроки(Отбор);
	зн_номер = РезультатПоиска[0].Значение;
	//зн_номер = РеквизитыТЗ.Найти("Номер","Название").Значение; 
	поле_номер = ПолучитьПоле(КомДокумент.Fields,"Номер");
	Если (зн_номер <> Неопределено И поле_номер <> Неопределено) Тогда 
		поле_номер.Value = зн_номер; 
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Название", "Дата");
	РезультатПоиска = РеквизитыТЗ.НайтиСтроки(Отбор);
	зн_дата = РезультатПоиска[0].Значение;
	//зн_дата = РеквизитыТЗ.Найти("Дата","Название").Значение;
	поле_дата = ПолучитьПоле(КомДокумент.Fields,"Дата");
	Если (зн_дата <> Неопределено И поле_дата <> Неопределено) Тогда 
		поле_дата.Value = зн_дата; 
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Название", "Организация");
	РезультатПоиска = РеквизитыТЗ.НайтиСтроки(Отбор);
	зн_организация = РезультатПоиска[0].Значение;
	//зн_организация = РеквизитыТЗ.Найти("Организация","Название").Значение; 
	поле_организация = ПолучитьПоле(КомДокумент.Fields,"Заказчик");
	Если (зн_организация <> Неопределено И поле_организация <> Неопределено) Тогда 
		поле_организация.Value = Строка(зн_организация); 
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Название", "Контрагент");
	РезультатПоиска = РеквизитыТЗ.НайтиСтроки(Отбор);
	зн_контрагент = РезультатПоиска[0].Значение;
	//зн_контрагент = РеквизитыТЗ.Найти("Контрагент","Название").Значение; 
	поле_контрагент = ПолучитьПоле(КомДокумент.Fields,"Поставщик");
	Если (зн_контрагент <> Неопределено И поле_контрагент <> Неопределено) Тогда 
		поле_контрагент.Value = Строка(зн_контрагент); 
	КонецЕсли;
	поле_всего = ПолучитьПоле(КомДокумент.Fields, "ОбщаяСтоимость"); 
	Если (поле_всего <> Неопределено) Тогда 
		поле_всего.Value = ВсегоРасчетное; 
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Название", "Тип документа");
	РезультатПоиска = РеквизитыТЗ.НайтиСтроки(Отбор);
	зн_тип = РезультатПоиска[0].Значение;	
	//зн_тип = РеквизитыТЗ.Найти("Тип документа","Название").Значение;
	зн_тип_преобразованное = "UNKNOWN";
	Если зн_тип = "Накладная" Тогда 
		зн_тип_преобразованное = "Накладная_торг_12"; 
	КонецЕсли;
	Если зн_тип = "Счет-фактура" Тогда 
		зн_тип_преобразованное = "Счет-фактура"; 
	КонецЕсли;
	Если Найти(зн_тип, "Передаточный документ") <> 0 Тогда 
		зн_тип_преобразованное = "Универсальный передаточный документ"; 
	КонецЕсли;
	Если зн_тип = "Акт" Тогда 
		зн_тип_преобразованное = "Акт"; 
	КонецЕсли;
	Если (зн_тип <> Неопределено) Тогда 
		КомДокумент.DocumentType = зн_тип_преобразованное; 
	КонецЕсли;
КонецПроцедуры

// Установка способа зачета авансов в докумене Оказание производственных услуг
//
// Параметры:
//  Документ - ссылка на документ Оказание производственных услуг
//
&НаСервере
Процедура УстановитьСпособЗачетаАвансовАкт(Документ)
	Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Документ.ЗачетАвансов.Очистить();	
КонецПроцедуры

// Установка способа зачета авансов в докумене Поступление ТиУ
//
// Параметры:
//  Документ - ссылка на документ поступления
//
&НаСервере
Процедура УстановитьСпособЗачетаАвансов(Документ)
	Если (Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		ИЛИ (Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		Документ.СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	Документ.ЗачетАвансов.Очистить();
КонецПроцедуры

// Установка способа зачета авансов в докумене Реализация ТиУ
//
// Параметры:
//  Документ - ссылка на документ реализации
//
&НаСервере
Процедура УстановитьСпособЗачетаАвансовРеализация(Документ)
	Если (Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		ИЛИ (Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		Документ.СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	Документ.ЗачетАвансов.Очистить();
КонецПроцедуры

// Открытие созданного документа из истории
//
&НаКлиенте
Процедура ИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элементы.История.ТекущиеДанные.Ссылка);
КонецПроцедуры

// Запрет удаления реквизитов
//
&НаКлиенте
Процедура РеквизитыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Процедура активизации различных кнопок для элементов управления реквизитов
//
&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
//	Если ТекущаяСтрока.Название = "Дата" Тогда  //kalb - если год более 3999 -то вызываем окно с сообщением (процедура невернаяДата)
  //  Если Год(ТекущаяСтрока.Значение) > 3999 Тогда
	//	 НевернаяДата();
	//КонецЕсли;
	//КонецЕсли;
	Если ТекущаяСтрока.Название = "Организация" или ТекущаяСтрока.Название = "Контрагент" Тогда
		Элементы.РеквизитыЗначение.КнопкаОчистки = Истина;
		Элементы.РеквизитыЗначение.КнопкаОткрытия = Истина;
		Элементы.РеквизитыЗначение.КнопкаВыбора = Истина;
	ИначеЕсли ТекущаяСтрока.Название = "Тип документа" или ТекущаяСтрока.Название = "Вид документа" Тогда
		Элементы.РеквизитыЗначение.КнопкаОчистки = Ложь;
		Элементы.РеквизитыЗначение.КнопкаОткрытия = Ложь;
		Элементы.РеквизитыЗначение.КнопкаВыбора = Истина;
	Иначе
		Элементы.РеквизитыЗначение.КнопкаОчистки = Ложь;
		Элементы.РеквизитыЗначение.КнопкаОткрытия = Ложь;
		Элементы.РеквизитыЗначение.КнопкаВыбора = Ложь;
	КонецЕсли;
КонецПроцедуры

// Процедура изменения реквизитов ТЧ сканирование при изменении реквизитов документа на стадии верификации
//
&НаКлиенте
Процедура РеквизитыЗначениеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		РеквизитыЗначениеПриИзмененииНаСервере(ТекущаяСтрока.Название,ТекущаяСтрока.Значение);
		ТекущаяСтрока.ЗначениеСтрокой = Строка(ТекущаяСтрока.Значение);
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		РеквизитыЗначениеПриИзмененииНаСервере(ТекущаяСтрока.Название,ТекущаяСтрока.Значение);
		ТекущаяСтрока.ЗначениеСтрокой = Строка(ТекущаяСтрока.Значение);
	ИначеЕсли ТекущаяСтрока.Название = "Вид документа" Тогда
		РеквизитыЗначениеПриИзмененииНаСервере(ТекущаяСтрока.Название,ТекущаяСтрока.Значение);
		ВидТекущегоДокумента = ТекущаяСтрока.Значение;
	ИначеЕсли ТекущаяСтрока.Название = "Тип документа" Тогда
		РеквизитыЗначениеПриИзмененииНаСервере(ТекущаяСтрока.Название,ТекущаяСтрока.Значение);
		ТипТекущегоДокумента = ТекущаяСтрока.Значение;
	КонецЕсли;
КонецПроцедуры

// Процедура изменения реквизитов ТЧ сканирование при изменении реквизитов документа на стадии верификации
//
// Параметры:
//  Название - строка, название реквизита
//  Значение - справочник, значение реквизита 
//
&НаСервере
Процедура РеквизитыЗначениеПриИзмененииНаСервере(Название,Значение)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если Название = "Организация" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация = Неопределено;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация = Значение;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ОрганизацияСтрока = Строка(Значение);
	ИначеЕсли Название = "Контрагент" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент = Неопределено;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент = Значение;
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].КонтрагентСтрока = Строка(Значение);
	ИначеЕсли Название = "Вид документа" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ВидДокумента = Значение;
	ИначеЕсли Название = "Тип документа" Тогда
		ОбработкаОбъект.Сканирование[НомерВТЧСканирование].ТипДокумента = Значение;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Процедура очистки ТЧ Сканирование
//
&НаСервере
Процедура ОчиститьСканированиеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если ЗначениеЗаполнено(ВсеДокументыВрем) Тогда 
		ОбработкаОбъект.ВсеДокументы = ПолучитьИзВременногоХранилища(ВсеДокументыВрем);
	КонецЕсли;
	
	ОбработкаОбъект.Сканирование.Очистить();
	ОбработкаОбъект.ВсеДокументы.Очистить();
	
	ВсеДокументыВрем = ПоместитьВоВременноеХранилище(ОбработкаОбъект.ВсеДокументы,ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда очистки ТЧ Сканирование
//
&НаКлиенте
Процедура ОчиститьСканирование(Команда)
	Если Элементы.Сканирование.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Вы действительно хотите очистить список?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВсеДокументы.Очистить();
		ОчиститьСканированиеНаСервере();
	КонецЕсли;
КонецПроцедуры

// Команда возвращения исходного значения в ТЧ Сканирование
//
&НаКлиенте
Процедура СканированиеВернутьИсходноеЗначение(Команда)
	Если Элементы.Сканирование.ТекущийЭлемент.Имя = "СканированиеОрганизация" Тогда
		ТекущаяСтрока = Элементы.Сканирование.ТекущиеДанные;
		ТекущаяСтрока.Организация = ТекущаяСтрока.ОрганизацияИсходная;
		ТекущаяСтрока.ОрганизацияСтрока = Строка(ТекущаяСтрока.Организация);
	ИначеЕсли Элементы.Сканирование.ТекущийЭлемент.Имя = "СканированиеКонтрагент" Тогда
		ТекущаяСтрока = Элементы.Сканирование.ТекущиеДанные;
		ТекущаяСтрока.Контрагент = ТекущаяСтрока.КонтрагентИсходный;
		ТекущаяСтрока.КонтрагентСтрока = Строка(ТекущаяСтрока.Контрагент);
	ИначеЕсли Элементы.Сканирование.ТекущийЭлемент.Имя = "СканированиеНомерДокумента" Тогда
			ТекущаяСтрока = Элементы.Сканирование.ТекущиеДанные;
			ТекущаяСтрока.НомерДокумента = ТекущаяСтрока.НомерДокументаисходный;
	ИначеЕсли Элементы.Сканирование.ТекущийЭлемент.Имя = "СканированиеДатаДокумента" Тогда
			ТекущаяСтрока = Элементы.Сканирование.ТекущиеДанные;
			ТекущаяСтрока.ДатаДокумента = ТекущаяСтрока.ДатаДокументаИсходная;
    КонецЕсли;
КонецПроцедуры

// Процедура заполняет список значений элементами справочника подходящими под неполное соответствие исходному значению
//
// Параметры:
//  СписокЗначений	 - 	Список значений 
//  ЗначениеИсходное - 	Строка/Справочник с исходным значением для сравнения
//  Справочник		 - 	Строка типа "Справочник.Организации"
//
&НаСервереБезКонтекста
Процедура ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеИсходное,Справочник)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.НайтиПоПолномуИмени(Справочник));
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	СписокПоиска.ПолучатьОписание = Истина;
	ПоказыватьОписания = Истина;
	СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	Если не ЗначениеЗаполнено(ЗначениеИсходное) Тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Организация,"Оставить текущее значение");
	Иначе
		СписокПоиска.СтрокаПоиска = Лев(Строка(ЗначениеИсходное),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"""","");
		СписокПоиска.СтрокаПоиска = СтрЗаменить(СписокПоиска.СтрокаПоиска,"«","");
		СписокПоиска.СтрокаПоиска = СокрЛП(СписокПоиска.СтрокаПоиска);
		Попытка
			СписокПоиска.ПерваяЧасть();                 
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Очистить();
			ТаблицаДляСортировки = Новый ТаблицаЗначений;
			ТаблицаДляСортировки.Колонки.Добавить("Значение");
			ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
			ТаблицаДляСортировки.Очистить();
			Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
				Значение = СписокПоиска.Получить(Индекс).Значение;
				Если не Значение.ПометкаУдаления Тогда
					Строка1 = Значение.Наименование; 
					Строка2 = Строка(ЗначениеИсходное); 
					//МаксимумПохожести = fillinUtils.StrCompare(Строка2,Строка2);
					МаксимумПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
					Если МаксимумПохожести=0 Тогда 
						ПроцентПохожести = 0;
					Иначе
						ПроцентПохожести = Окр(ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2)/МаксимумПохожести*100,0);
					КонецЕсли;
					СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
					СтрокаТаблицы.Значение = Значение;
					СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
				КонецЕсли;
			КонецЦикла;
			Счетчик = ТаблицаДляСортировки.Количество();
			ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
			Для Индекс = 0 По Счетчик-1 Цикл
				СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
				Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
				СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
			КонецЦикла;
			//СписокЗначений.Добавить(ТекущаяСтрока.Организация,"Оставить текущее значение");			
		Исключение
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Очистить();
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьСписокЗначенийСервер(СписокЗначений)()

// Процедура формирования списка выбора для организации в ТЧ Сканирование
//
&НаКлиенте
Процедура СканированиеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	СтандартнаяОбработка = Ложь;
	// Текущая строка
	Организация = Элементы.Сканирование.ТекущиеДанные.Организация;
	ОрганизацияИсходная = Элементы.Сканирование.ТекущиеДанные.ОрганизацияИсходная;
	Если не ЗначениеЗаполнено(ОрганизацияИсходная) Тогда 
		ОрганизацияИсходная = Элемент.ТекстРедактирования;
	КонецЕсли;
	СписокЗначений = Новый СписокЗначений;
	ЗаполнитьСписокЗначенийСервер(СписокЗначений,ОрганизацияИсходная,"Справочник.Организации");
	//Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		Строка1 = Строка(СтрокаСписка.Значение); 
		Строка2 = Строка(ОрганизацияИсходная);
		//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
		ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
		СтрокаСписка.Представление = ПроцентПохожести;
	КонецЦикла;
	СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
	КонецЦикла;

	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	ДанныеВыбора = СписокЗначений;
КонецПроцедуры

// Процедура заполнения организации выбранным значением
//
&НаКлиенте
Процедура СканированиеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Организации.ФормаВыбора");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Элементы.Сканирование.ТекущиеДанные.Организация;
	КонецЕсли;
КонецПроцедуры

// Процедура формирования списка выбора для контрагента в ТЧ Сканирование
//
&НаКлиенте
Процедура СканированиеКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	СтандартнаяОбработка = Ложь;
	// Текущая строка
	КонтрагентИсходный = Элементы.Сканирование.ТекущиеДанные.КонтрагентИсходный;
	СписокЗначений = Новый СписокЗначений;
	Если не ЗначениеЗаполнено(КонтрагентИсходный) Тогда 
		КонтрагентИсходный = Элемент.ТекстРедактирования;
	КонецЕсли;
	ЗаполнитьСписокЗначенийСервер(СписокЗначений,КонтрагентИсходный,"Справочник.Контрагенты");
	//Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		Строка1 = Строка(СтрокаСписка.Значение); 
		Строка2 = Строка(КонтрагентИсходный);
		//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
		ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
		СтрокаСписка.Представление = ПроцентПохожести;
	КонецЦикла;
	СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
	КонецЦикла;
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	ДанныеВыбора = СписокЗначений;
КонецПроцедуры

// Процедура заполнения контрагента выбранным значением
//
&НаКлиенте
Процедура СканированиеКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Элементы.Сканирование.ТекущиеДанные.Контрагент;
	КонецЕсли;
КонецПроцедуры

// Процедура формирования доступности единиц измерения для изменения в зависимости от значения номенклатуры
//
&НаКлиенте
Процедура ТабличнаяЧастьПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда 
		Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура удаления строк из ТЧ
//
&НаКлиенте
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Ответ = Вопрос("Вы действительно хотите удалить строку?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	НомерУдаляемойСтроки = ТекущаяСтрока.НомерСтроки;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерУдаляемойСтроки);
	СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из СтрокиДляУдаления Цикл
		ТабличнаяЧасть.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения номенклатуры выбранным значением
//
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Номенклатура.ФормаВыбора");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура;
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения единицы измерения выбранным значением
//
&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.КлассификаторЕдиницИзмерения.ФормаВыбора");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Элементы.ТабличнаяЧасть.ТекущиеДанные.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

// Процедура формирует список выбора для единиц измерения в строке ТЧ
//
&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	СтандартнаяОбработка = Ложь;
	// Текущая строка
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	ЗначениеИсходное = ТекущаяСтрока.ЕдиницаИзмеренияИсходная;
	Если не ЗначениеЗаполнено(ЗначениеИсходное) Тогда 
		ЗначениеИсходное = Элемент.ТекстРедактирования;
	КонецЕсли;
	СписокЗначений = Новый СписокЗначений;
	Текст = ЗначениеИсходное;
	ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеИсходное,"Справочник.КлассификаторЕдиницИзмерения");
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		Строка1 = Строка(СтрокаСписка.Значение); 
		Строка2 = Строка(ЗначениеИсходное);
		//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
		ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
		СтрокаСписка.Представление = ПроцентПохожести;
	КонецЦикла;
	СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
	КонецЦикла;
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	ДанныеВыбора = СписокЗначений;
КонецПроцедуры

// Процедура заполнения реквизита выбранным значением
//
&НаКлиенте
Процедура РеквизитыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
			ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Организации.ФормаВыбора");
		КонецЕсли;
		Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
			ВыбранноеЗначение = ТекущаяСтрока.Значение;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
			ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора");
		КонецЕсли;
		Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
			ВыбранноеЗначение = ТекущаяСтрока.Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура формирует список выбора для реквизита
//
&НаКлиенте
Процедура РеквизитыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	ЗначениеИсходное = ТекущаяСтрока.ИсходноеЗначение;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		СписокЗначений = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеИсходное,"Справочник.Организации");
		Для Каждого СтрокаСписка из СписокЗначений Цикл
			Строка1 = Строка(СтрокаСписка.Значение); 
			Строка2 = Строка(ЗначениеИсходное);
			//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
			ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
			СтрокаСписка.Представление = ПроцентПохожести;
		КонецЦикла;
		СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		Для Каждого СтрокаСписка из СписокЗначений Цикл
			СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
		КонецЦикла;
		СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
		ДанныеВыбора = СписокЗначений;
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		СписокЗначений = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеИсходное,"Справочник.Контрагенты");
		Для Каждого СтрокаСписка из СписокЗначений Цикл
			Строка1 = Строка(СтрокаСписка.Значение); 
			Строка2 = Строка(ЗначениеИсходное);
			//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
			ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
			СтрокаСписка.Представление = ПроцентПохожести;
		КонецЦикла;
		СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		Для Каждого СтрокаСписка из СписокЗначений Цикл
			СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
		КонецЦикла;
		СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
		ДанныеВыбора = СписокЗначений;
	ИначеЕсли ТекущаяСтрока.Название = "Вид документа" Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить("Поступление","Поступление");
		СписокЗначений.Добавить("Реализация","Реализация");
		ДанныеВыбора = СписокЗначений;
	ИначеЕсли ТекущаяСтрока.Название = "Тип документа" Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить("Накладная","Накладная");
		СписокЗначений.Добавить("Счет-фактура","Счет-фактура");
		СписокЗначений.Добавить("УПД (Передаточный документ)","УПД (Передаточный документ)");
		СписокЗначений.Добавить("УПД (Передаточный документ и СФ)","УПД (Передаточный документ и СФ)");
		СписокЗначений.Добавить("Акт","Акт");
		ДанныеВыбора = СписокЗначений;
	КонецЕсли;
КонецПроцедуры

// Процедура призводит начальное заполнение данных для новой строки ТЧ
//
&НаКлиенте
Процедура ТабличнаяЧастьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если не Копирование Тогда
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			НовыйНомер = 0;
		Иначе
			НовыйНомер = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-1].НомерСтроки+1;
		КонецЕсли;
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.НомерСтроки = НовыйНомер;
		НоваяСтрока.Номенклатура = "";//Справочники.Номенклатура.ПустаяСсылка();
		НоваяСтрока.ЕдиницаИзмерения = "";//Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		Отказ = Истина;
		Элементы.ТабличнаяЧасть.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		СтрокаДляКопирования = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			НовыйНомер = 0;
		Иначе
			НовыйНомер = ТабличнаяЧасть[ТабличнаяЧасть.Количество()-1].НомерСтроки+1;
		КонецЕсли;
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования);
		НоваяСтрока.НомерСтроки = НовыйНомер;
		Элементы.ТабличнаяЧасть.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура формирует список выбора для номенклатуры в строке ТЧ
//
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	СтандартнаяОбработка = Ложь;
	// Текущая строка
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	ЗначениеИсходное = ТекущаяСтрока.НоменклатураИсходная;
	Если не ЗначениеЗаполнено(ЗначениеИсходное) Тогда 
		ЗначениеИсходное = Элемент.ТекстРедактирования;
	КонецЕсли;
	СписокЗначений = Новый СписокЗначений;
	Текст = ЗначениеИсходное;
	ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеИсходное,"Справочник.Номенклатура");
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		Строка1 = Строка(СтрокаСписка.Значение); 
		Строка2 = Строка(ЗначениеИсходное);
		//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
		ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);
		СтрокаСписка.Представление = ПроцентПохожести;
	КонецЦикла;
	СписокЗначений.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	Для Каждого СтрокаСписка из СписокЗначений Цикл
		СтрокаСписка.Представление = Строка(СтрокаСписка.Представление)+"% | "+Строка(СтрокаСписка.Значение);
	КонецЦикла;
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	ДанныеВыбора = СписокЗначений;
КонецПроцедуры

// Процедура пересчета значений в ТЧ при изменении количества
//
&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	Строка = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Строка.Цена<>0 и Строка.Количество<>0 Тогда 
		Если Объект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
			Ответ = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Вопрос("Пересчитать сумму?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(Строка, 0);
			//Строка.Сумма = Окр(Строка.Цена * Строка.Количество, 2);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, СуммаВклНДС, Ложь);
			Строка.Всего = Строка.Сумма + ?(СуммаВклНДС, 0, Строка.СуммаНДС);
			//Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Сумма,УчитыватьНДС,Ложь,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			//Строка.Всего = Строка.Сумма+Строка.СуммаНДС*Число(УчитыватьНДС);
			//Если СуммаВклНДС Тогда 
			//	Строка.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Всего,УчитыватьНДС,СуммаВклНДС,УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)),2);
			//КонецЕсли;
			Если Строка.Количество<>0 Тогда 
				Строка.ЦенаСНДС = Окр(Строка.Всего/Строка.Количество,2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура пересчета значений в ТЧ при изменении суммы
//
&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	Строка = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Объект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать общую сумму", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если (Строка.Количество = 0) Тогда
			Строка.Цена = 0;
		Иначе
			Строка.Цена = Строка.Сумма / Строка.Количество;
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, СуммаВклНДС, Ложь);
		Строка.Всего = Строка.Сумма + ?(СуммаВклНДС, 0, Строка.СуммаНДС);
		//Если Строка.Сумма<>0 Тогда
		//	Строка.Всего = Строка.Сумма+Строка.СуммаНДС*Число(УчитыватьНДС);
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура пересчета значений в ТЧ при изменении суммы НДС
//
&НаКлиенте
Процедура ТабличнаяЧастьСуммаНДСПриИзменении(Элемент)
	Строка = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Строка.Всего = Строка.Сумма + ?(СуммаВклНДС, 0, Строка.СуммаНДС);
КонецПроцедуры

// Процедура пересчета сумм при изменении ставки НДС
//
&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	Строка = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Строка.Цена<>0 и Строка.Количество<>0 Тогда 
		Если Объект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
			Ответ = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Вопрос("Пересчитать сумму НДС?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, СуммаВклНДС, Ложь);
			Строка.Всего = Строка.Сумма + ?(СуммаВклНДС, 0, Строка.СуммаНДС);
			Если Строка.Количество<>0 Тогда 
				Строка.ЦенаСНДС = Окр(Строка.Всего/Строка.Количество,2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура пересчета НДС при изменении флага СуммаВклНДС
//
&НаКлиенте
Процедура СуммаВклНДСПриИзменении(Элемент)
	Если Объект.ВсегдаАвтоматическиПересчитыватьСуммы Тогда 
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать сумму?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		СуммаВклНДСПриИзмененииНаСервере();	
	КонецЕсли;
	ТабличнаяЧастьПриИзменении(Неопределено);
КонецПроцедуры

// Процедура пересчета НДС
//
&НаСервере
Процедура СуммаВклНДСПриИзмененииНаСервере()
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, СуммаВклНДС, Ложь);
		Строка.Всего = Строка.Сумма + ?(СуммаВклНДС, 0, Строка.СуммаНДС);
		Если Строка.Количество<>0 Тогда 
			Строка.ЦенаСНДС = Окр(Строка.Всего/Строка.Количество,2);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура цветовой индикации табличной части
//
&НаКлиенте
Процедура ТабличнаяЧастьПриИзменении(Элемент)
	ТабличнаяЧастьПриИзмененииНаСервере();
КонецПроцедуры

// Процедура цветовой индикации табличной части
//
&НаСервере
Процедура ТабличнаяЧастьПриИзмененииНаСервере()
	ВсегоРасчетное = 0;
	НДСРасчетное = 0;
	ДополнительныйИндекс=0;            //kalb change
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если не ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда
			Если ЗначениеЗаполнено(Строка.Номенклатура)Тогда 
				Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;
		ДополнителныйИндекс=ДополнительныйИндекс+1;//kalb change 
		ВсегоРасчетное = ВсегоРасчетное+Строка.Всего;
		НДСРасчетное = НДСРасчетное+Строка.СуммаНДС;
		// Окраска номенклатуры
		Если ТипЗнч(Строка.Номенклатура)=Тип("Строка") Тогда
			Строка.НоменклатураЦвет = 2;
		ИначеЕсли Строка.Номенклатура <> Строка.НоменклатураИсходная Тогда
			Строка.НоменклатураЦвет = 1;
		Иначе
			Строка.НоменклатураЦвет = 0;
		КонецЕсли;
		// Окраска единиц измерения
		Если Строка.ЕдиницаИзмерения <> Строка.ЕдиницаИзмеренияИсходная и ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияИсходная) Тогда 
			Строка.ЕдиницаЦвет = 3;
		ИначеЕсли Строка.ТипНоменклатуры = "Товар" Тогда 
		    Если ТипЗнч(Строка.ЕдиницаИзмерения)=Тип("Строка") Тогда 
		        Строка.ЕдиницаЦвет = 2;
			ИначеЕсли не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда 
				Строка.ЕдиницаЦвет = 2;
			Иначе
				Строка.ЕдиницаЦвет = 0;	
			КонецЕсли;
		Иначе
			Строка.ЕдиницаЦвет = 0;
		КонецЕсли;
		// Остальная окраска
		Если Строка.ТипНоменклатуры <> Строка.ТипНоменклатурыИсходный Тогда
			Строка.ТипНоменклатурыЦвет = 1;
		Иначе
			Строка.ТипНоменклатурыЦвет = 0;
		КонецЕсли;
		// Окраска количества
		Если Строка.Количество = 0 Тогда
			Строка.КоличествоЦвет = 3;
		ИначеЕсли Строка.Количество <> Строка.КоличествоИсходное Тогда
			Строка.КоличествоЦвет = 1;
		Иначе
			Строка.КоличествоЦвет = 0;
		КонецЕсли;
		// Окраска цены
		Если Строка.Цена = 0 Тогда
			Строка.ЦенаЦвет = 3;
		ИначеЕсли Строка.Цена <> Строка.ЦенаИсходная Тогда
			Строка.ЦенаЦвет = 1;
		Иначе
			Строка.ЦенаЦвет = 0;
		КонецЕсли;
		// Окраска цены с ндс
		Если Строка.Количество <> 0 и Строка.ЦенаСНДС <> Окр(Строка.Всего/Строка.Количество, 2) Тогда  
			Строка.ЦенаСНДСЦвет = 3;
		ИначеЕсли Строка.ЦенаСНДС <> Строка.ЦенаСНДСИсходная Тогда
			Строка.ЦенаСНДСЦвет = 1;
		Иначе
			Строка.ЦенаСНДСЦвет = 0;
		КонецЕсли;
		// Окраска суммы
		Если Строка.Сумма<>Окр(Строка.Цена*Строка.Количество, 2) Тогда
			Строка.СуммаЦвет = 3;
		ИначеЕсли Строка.Сумма <> Строка.СуммаИсходная Тогда
			Строка.СуммаЦвет = 1;
		Иначе
			Строка.СуммаЦвет = 0;
		КонецЕсли;
		// Окраска ставки ндс
		// добавить
		Если Строка.СтавкаНДС <> Строка.СтавкаНДСИсходная Тогда
			Строка.СтавкаНДСЦвет = 1;
		Иначе
			Строка.СтавкаНДСЦвет = 0;
		КонецЕсли;
		// Окраска суммы ндс
		НоваяСуммаНДС = ПроверитьНДСТабличнойЧасти(ДополнительныйИндекс);
		ДополнительныйИндекс = ДополнительныйИндекс+1;//kalb change
		Если НоваяСуммаНДС <> Строка.СуммаНДС Тогда 
			Строка.СуммаНДСЦвет = 3;
		ИначеЕсли Строка.СуммаНДС <> Строка.СуммаНДСИсходная Тогда
			Строка.СуммаНДСЦвет = 1;
		Иначе
			Строка.СуммаНДСЦвет = 0;
		КонецЕсли;
		// Окраска всего
		Если Строка.Всего<>Окр(Строка.Сумма+Строка.СуммаНДС*Число(не СуммаВклНДС),2) Тогда
			Строка.ВсегоЦвет = 3;
		ИначеЕсли Строка.Всего <> Строка.ВсегоИсходное Тогда
			Строка.ВсегоЦвет = 1;
		Иначе
			Строка.ВсегоЦвет = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

	
// Функция возвращает рассчитанный НДС для строки ТЧ
//
// Параметры:
//  Индекс	 - число, номер строки ТЧ
// 
// Возвращаемое значение:
//  Число 
//
&НаСервере
Функция ПроверитьНДСТабличнойЧасти(Индекс)	
	a=Индекс;                       //k change
	//Индекс=ДополнительныйИндекс;
	ВремТЗ = ТабличнаяЧасть.Выгрузить();
	СтрокаДляСравнения = ВремТЗ[Индекс];
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаДляСравнения, СуммаВклНДС, Ложь);
	Возврат СтрокаДляСравнения.СуммаНДС;
КонецФункции // ПолучитьСтрокуТабличнойЧасти()

// Процедура изменения адреса организации в базе на адрес из текущего значения реквизита Адрес
//
&НаСервере
Процедура ЗаменитьАдресОрганизацииВБазеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Название", "Адрес организации");
	НовыйАдрес = Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].Значение;
	Если ЗначениеЗаполнено(НовыйАдрес) Тогда 
		Если ЗначениеЗаполнено(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация) и ТипЗнч(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация)=Тип("СправочникСсылка.Организации") Тогда 
			ОрганизацияОбъект = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Организация.ПолучитьОбъект(); 
			АдресОрганизации = ОрганизацияОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Если ЗначениеЗаполнено(АдресОрганизации) Тогда 
				АдресОрганизации.Представление = НовыйАдрес;
			Иначе
				АдресОрганизации = ОрганизацияОбъект.КонтактнаяИнформация.Добавить();
				АдресОрганизации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
				АдресОрганизации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдресОрганизации.Представление = НовыйАдрес;
			КонецЕсли;
			ОрганизацияОбъект.Записать();
			Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].ИсходноеЗначение = НовыйАдрес;
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда изменения адреса организации в базе на адрес из текущего значения реквизита Адрес
//
&НаКлиенте
Процедура ЗаменитьАдресОрганизацииВБазе(Команда)
	ЗаменитьАдресОрганизацииВБазеНаСервере();
КонецПроцедуры

// Процедура изменения адреса контрагента в базе на адрес из текущего значения реквизита Адрес
//
&НаСервере
Процедура ЗаменитьАдресКонтрагентаВБазеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Название", "Адрес контрагента");
	НовыйАдрес = Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].Значение;
	Если ЗначениеЗаполнено(НовыйАдрес) Тогда 
		Если ЗначениеЗаполнено(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент) и ТипЗнч(ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда 
			ОрганизацияОбъект = ОбработкаОбъект.Сканирование[НомерВТЧСканирование].Контрагент.ПолучитьОбъект(); 
			АдресОрганизации = ОрганизацияОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Если ЗначениеЗаполнено(АдресОрганизации) Тогда 
				АдресОрганизации.Представление = НовыйАдрес;
			Иначе
				АдресОрганизации = ОрганизацияОбъект.КонтактнаяИнформация.Добавить();
				АдресОрганизации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				АдресОрганизации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдресОрганизации.Представление = НовыйАдрес;
			КонецЕсли;
			ОрганизацияОбъект.Записать();
			Реквизиты.НайтиСтроки(ПараметрыОтбора)[0].ИсходноеЗначение = НовыйАдрес;
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

// Команда изменения адреса контрагента в базе на адрес из текущего значения реквизита Адрес
//
&НаКлиенте
Процедура ЗаменитьАдресКонтрагентаВБазе(Команда)
	ЗаменитьАдресКонтрагентаВБазеНаСервере();
КонецПроцедуры

// Команда добавления нового контрагента по данным в строке ТЧ
//
&НаКлиенте
Процедура ДобавитьКонтрагента(Команда)
	НужнаяСтрока = Элементы.Сканирование.ТекущиеДанные.НомерСтроки;
	Если НужнаяСтрока<>Неопределено Тогда 
		ДобавитьКонтрагентаНаСервере(НужнаяСтрока);
		П = Новый Структура("Ключ", Элементы.Сканирование.ТекущиеДанные.Контрагент);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента",П);
	КонецЕсли;
КонецПроцедуры

// Процедура создает и заполняет нового контрагента по наименованию в строке ТЧ
//
// Параметры:
//  НомерСтроки	 - число, номер строки в ТЧ, в которой необходимо создать контрагента 
//
&НаСервере
Процедура ДобавитьКонтрагентаНаСервере(НомерСтроки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НужнаяСтрока = ОбработкаОбъект.Сканирование[НомерСтроки-1];
	НоваяОрганизация = Справочники.Контрагенты.СоздатьЭлемент();
	НоваяОрганизация.ИНН = НужнаяСтрока.КонтрагентИНН;
	НоваяОрганизация.КПП = НужнаяСтрока.КонтрагентКПП;
	НоваяОрганизация.Наименование = НужнаяСтрока.Контрагент;
	НоваяОрганизация.НаименованиеПолное = НужнаяСтрока.Контрагент;
	НоваяОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	НоваяОрганизация.Записать();
	НужнаяСтрока.Контрагент = Неопределено;
	НужнаяСтрока.Контрагент = НоваяОрганизация.Ссылка;
	НужнаяСтрока.КонтрагентСтрока = Строка(НоваяОрганизация.Ссылка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ДобавитьКонтрагентаНаСервере()

// Команда возвращения исходного значения реквизиту
//
&НаКлиенте
Процедура ВернутьИсходноеЗначениеРеквизита(Команда)
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	ТекущаяСтрока.Значение = ТекущаяСтрока.ИсходноеЗначение;
КонецПроцедуры

// Команда возвращения рекизиту ТЧ исходного значения
//
&НаКлиенте
Процедура ВернутьИсходноеЗначениеТабличнойЧасти(Команда)
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьНоменклатура" Тогда 
		ТекущаяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураИсходная;
		ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьКоличество" Тогда 
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоИсходное;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьЦена" Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаИсходная;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьЦенаСНДС" Тогда
		ТекущаяСтрока.ЦенаСНДС = ТекущаяСтрока.ЦенаСНДСИсходная;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСумма" Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаИсходная;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСтавкаНДС" Тогда 
		ТекущаяСтрока.СтавкаНДС = ТекущаяСтрока.СтавкаНДСИсходная;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСуммаНДС" Тогда
		ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДСИсходная;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьВсего" Тогда
		ТекущаяСтрока.Всего = ТекущаяСтрока.ВсегоИсходное;
	КонецЕсли;
	ТабличнаяЧастьПриИзменении(Неопределено);
КонецПроцедуры

// Процедура заполнения единиц измерения при изменении номенклатуры
//
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если не ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)Тогда 
			ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(ТекущаяСтрока.Номенклатура);
			Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ЕдиницаИзмерения.ПодчиненныеЭлементы.ТабличнаяЧастьЕдиницаИзмерения.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ЕдиницаИзмерения.ПодчиненныеЭлементы.ТабличнаяЧастьЕдиницаИзмерения.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ЕдиницаИзмерения.ПодчиненныеЭлементы.ТабличнаяЧастьЕдиницаИзмерения.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

// Функция получает единицу измерения номенклатуры
//
// Параметры:
//  Номенклатура - 	ссылка на номенклатуру
// 
// Возвращаемое значение:
//  ссылка на справочник клссификатор единиц измерения
//
&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНоменклатуры(Номенклатура)
	Возврат Номенклатура.ЕдиницаИзмерения;
КонецФункции

// Команда создания новой номенклатуры
//
&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	НужнаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если НужнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТипЗнч(НужнаяСтрока.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("В данной строке уже выбрана существующая номенклатура");
	Иначе
		П = Новый Структура("Наименование", НужнаяСтрока.Номенклатура);
		П.Вставить("ЕдиницаИзмерения", НужнаяСтрока.ЕдиницаИзмерения);
		Если НужнаяСтрока.ТипНоменклатуры = "Товар" Тогда
			П.Вставить("Услуга", Ложь);
		Иначе
			П.Вставить("Услуга", Истина);
		КонецЕсли;
		НоваяНоменклатура = ОткрытьФормуМодально("ВнешняяОбработка.СканированиеFillin.Форма.ФормаНовойНоменклатурыУправляемая",П);
		Если ЗначениеЗаполнено(НоваяНоменклатура) Тогда 
			НужнаяСтрока.Номенклатура = НоваяНоменклатура;
			ПроверкаУслуги = ПроверитьУслугуСервер(НоваяНоменклатура);
			Если ПроверкаУслуги Тогда
				НужнаяСтрока.ТипНоменклатуры = "Услуга" 
			Иначе
				НужнаяСтрока.ТипНоменклатуры = "Товар"
			КонецЕсли;
			ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
			ТабличнаяЧастьПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Функция проверяет является ли номенклатура услугой
//
// Параметры:
//  НоваяНоменклатура	 - 	ссылка на номенклатуру
// 
// Возвращаемое значение:
//  Булево 
//
&НаСервереБезКонтекста
Функция ПроверитьУслугуСервер(НоваяНоменклатура)
	Если НоваяНоменклатура.Услуга Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПроверитьУслугуСервер()

// Команда подбора рекомендуемого значения для реквизита 
//
&НаКлиенте
Процедура ПодобратьРекомендуемоеЗначениеРеквизита(Команда)
	ТекущаяСтрока = Элементы.Реквизиты.ТекущиеДанные;
	Если не ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда 
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Название = "Организация" Тогда
		Если ТипЗнч(ТекущаяСтрока.Значение) = Тип("Строка") Тогда 
			ЗначениеНаименование = ТекущаяСтрока.Значение;
		Иначе
			ЗначениеНаименование = Строка(ТекущаяСтрока.Значение);
		КонецЕсли;
		СписокЗначений = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеНаименование,"Справочник.Организации");
		П = Новый Структура("СписокЗначений", СписокЗначений);
		РекомендуемоеЗначение = ОткрытьФормуМодально("ВнешняяОбработка.СканированиеFillin.Форма.ФормаПодбораУправляемая",П);
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Значение = РекомендуемоеЗначение;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.Название = "Контрагент" Тогда
		Если ТипЗнч(ТекущаяСтрока.Значение) = Тип("Строка") Тогда 
			ЗначениеНаименование = ТекущаяСтрока.Значение;
		Иначе
			//ЗначениеНаименование = ТекущаяСтрока.Значение.Наименование;
			ЗначениеНаименование = ТекущаяСтрока.ЗначениеСтрокой;
		КонецЕсли;
		СписокЗначений = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеНаименование,"Справочник.Контрагенты");
		П = Новый Структура("СписокЗначений", СписокЗначений);
		РекомендуемоеЗначение = ОткрытьФормуМодально("ВнешняяОбработка.СканированиеFillin.Форма.ФормаПодбораУправляемая",П);
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Значение = РекомендуемоеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Команда подбора рекомендуемого значения для реквизита табличной части
//
&НаКлиенте
Процедура ПодобратьРекомендуемоеЗначениеТабличнойЧасти(Команда)
	ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьКоличество" Тогда
		Если ТекущаяСтрока.Цена = 0 Тогда 
			РекомендуемоеЗначение = 1;
			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.Количество = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		Иначе
			РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Цена,3);
			Если РекомендуемоеЗначение = 0 Тогда 
				Предупреждение("Не удалось посчитать рекомендуемое значение");
			Иначе
				Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда 
					ТекущаяСтрока.Количество = РекомендуемоеЗначение;
					ТабличнаяЧастьПриИзменении(Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьЦена" Тогда
		Если ТекущаяСтрока.Количество = 0 Тогда 
			РекомендуемоеЗначение = 1;
			Ответ = Вопрос("Рекомендуемое значение ячейки количество = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.Количество = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		Иначе
			РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,2);
			Если РекомендуемоеЗначение = 0 Тогда 
				Предупреждение("Не удалось посчитать рекомендуемое значение");
			Иначе
				Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда 
					ТекущаяСтрока.Цена = РекомендуемоеЗначение;
					ТабличнаяЧастьПриИзменении(Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьЦенаСНДС" Тогда
		Если ТекущаяСтрока.Количество = 0 Тогда 
			РекомендуемоеЗначение = 1;
			Ответ = Вопрос("Рекомендуемое значение ячейки количество = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.Количество = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		Иначе
			РекомендуемоеЗначение = Окр(ТекущаяСтрока.Всего/ТекущаяСтрока.Количество,2);
			Если РекомендуемоеЗначение = 0 Тогда 
				Предупреждение("Не удалось посчитать рекомендуемое значение");
			Иначе
				Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда 
					ТекущаяСтрока.ЦенаСНДС = РекомендуемоеЗначение;
					ТабличнаяЧастьПриИзменении(Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСумма" Тогда 
		РекомендуемоеЗначение = Окр(ТекущаяСтрока.Цена*ТекущаяСтрока.Количество,2);
		Если РекомендуемоеЗначение = 0 Тогда 
			Предупреждение("Не удалось посчитать рекомендуемое значение");
		Иначе
			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.Сумма = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСтавкаНДС" Тогда
		Если ТекущаяСтрока.Сумма = 0 Тогда 
			Предупреждение("Сумма = 0, определение процентной ставки НДС невозможно,");
		Иначе
			Если ТекущаяСтрока.СуммаНДС = 0 и ТекущаяСтрока.Всего<>ТекущаяСтрока.Сумма Тогда 
				РекомендуемоеЗначение = Окр((ТекущаяСтрока.Всего-ТекущаяСтрока.Сумма)/ТекущаяСтрока.Сумма*100,0);
			Иначе
				РекомендуемоеЗначение = Окр(ТекущаяСтрока.СуммаНДС/ТекущаяСтрока.Сумма*100,0);
			КонецЕсли;
			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+"%. Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если РекомендуемоеЗначение = 0 Тогда 
					ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
					ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
				ИначеЕсли РекомендуемоеЗначение = 10 Тогда
					ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10");
					ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
				ИначеЕсли РекомендуемоеЗначение = 18 Тогда
					ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
					ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
				ИначеЕсли РекомендуемоеЗначение = 20 Тогда
					ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
					ТабличнаяЧастьСтавкаНДСПриИзменении(Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьСуммаНДС" Тогда
		РекомендуемоеЗначение = ПроверитьНДСТабличнойЧасти(ТекущаяСтрока.НомерСтроки);
		Если РекомендуемоеЗначение = 0 Тогда 
			Предупреждение("Не удалось посчитать рекомендуемое значение");
		Иначе
			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.СуммаНДС = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьВсего" Тогда 
		РекомендуемоеЗначение = Окр(ТекущаяСтрока.Сумма+ТекущаяСтрока.СуммаНДС*Число(не СуммаВклНДС),2);
		Если РекомендуемоеЗначение = 0 Тогда 
			Предупреждение("Не удалось посчитать рекомендуемое значение");
		Иначе
			Ответ = Вопрос("Рекомендуемое значение ячейки = "+РекомендуемоеЗначение+". Установить это значение в ячейку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ТекущаяСтрока.Всего = РекомендуемоеЗначение;
				ТабличнаяЧастьПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущийЭлемент.Имя = "ТабличнаяЧастьНоменклатура" Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
			ЗначениеНаименование = Строка(ТекущаяСтрока.Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураИсходная) Тогда
			ЗначениеНаименование = Строка(ТекущаяСтрока.НоменклатураИсходная);
		Иначе
			Возврат;
		КонецЕсли;
		СписокЗначений = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийСервер(СписокЗначений,ЗначениеНаименование,"Справочник.Номенклатура");
		П = Новый Структура("СписокЗначений", СписокЗначений);
		РекомендуемоеЗначение = ОткрытьФормуМодально("ВнешняяОбработка.СканированиеFillin.Форма.ФормаПодбораУправляемая",П);
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Номенклатура = РекомендуемоеЗначение;
			ТабличнаяЧастьПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Сортировка истории для хронологического отображения
//
&НаКлиенте
Процедура ОбщаяГруппаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ОбщаяГруппа.ПодчиненныеЭлементы.СтраницаИстория Тогда 
		Объект.История.Сортировать("Дата Убыв");	
	КонецЕсли;
КонецПроцедуры

// kalb - процедура для вывода сообщения, что год имеет неверное значение
&НаКлиенте
Процедура НевернаяДата()
Предупреждение("Год должен иметь значение не более 3999");
КонецПроцедуры
