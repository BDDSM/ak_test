
// Процедура нажатия на кнопку сканирования
//
// Параметры:
//  Элемент	 - кнопка 
//
Процедура СканироватьНажатие(Элемент) 
	
	//++АК luza 
	//Закоментировал
	//ОбработкаОбъект.Сканировать();
	//ЭлементыФормы.панельТабов.ТекущаяСтраница = ЭлементыФормы.панельТабов.Страницы.Сканирование;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	
	ДиалогОткрытияФайла.Фильтр = "Все файлы(*.*)|*.*|PDF(*.pdf)|*.pdf|TIFF(*.tif)|*.tif";
	
	
	Если ДиалогОткрытияФайла.Выбрать() = Истина Тогда
		Для каждого ВыбФайл Из ДиалогОткрытияФайла.ВыбранныеФайлы Цикл
			Файл = Новый Файл(ВыбФайл);
			Если Файл.Существует() Тогда				
				НФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", Файл.Имя, Новый ДвоичныеДанные(ВыбФайл)), Файл.Расширение);			
				НСТр = ОбработкаОбъект.Сканирование.Добавить();
				НСтр.Файл = НФайл;
				НСтр.Статус = "В обработке";
				НСтр.Автор = ПараметрыСеанса.ТекущийПользователь;
				НСтр.ДатаСканирования = ТекущаяДата();
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ЭлементыФормы.панельТабов.ТекущаяСтраница = ЭлементыФормы.панельТабов.Страницы.Сканирование;

КонецПроцедуры


// Процедура нажатия на кнопку верификации
//
// Параметры:
//  Элемент	 - кнопка 
//
Процедура ВерифицироватьНажатие(Элемент)
	Если (ОбработкаОбъект.ВсеДокументы <> Неопределено) Тогда 
		ФормаВерификации = ОбработкаОбъект.ПолучитьФорму("ФормаВерификации");
		Если (ОбработкаОбъект.ВсеДокументы.Количество() = 0) И ОбработкаОбъект.ВсеДокументыXML.Количество() = 0 Тогда 
			Предупреждение("Нет данных для отправки");
		Иначе
			ФормаВерификации.Открыть();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект.СформироватьЗначенияПоУмолчанию();
	ЗаполнитьСписокВыбораТиповДокументов();
	ОбработкаОбъект.ВсегдаАвтоматическиПересчитыватьСуммы = Истина;
	// Заполнение или создание хранилища истории
	//УстановитьПривилегированныйРежим(Истина);
	//ОбработкаОбъект.ОбработкаИстории = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ХранилищеИсторииДляFILLIN",Истина);
	//Если ОбработкаОбъект.ОбработкаИстории.Пустая() Тогда 
	//	НоваяОбработка = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	//	НоваяОбработка.Наименование = "ХранилищеИсторииДляFILLIN";
	//	НоваяОбработка.Комментарий = "Здесь хранится история загрузки документов FILLIN, НЕ УДАЛЯТЬ!";
	//	НоваяОбработка.Записать();
	//	ОбработкаОбъект.ОбработкаИстории = НоваяОбработка.Ссылка;
	//КонецЕсли;
	//// Заполнение или создание хранилища справочника соответствий
	//ОбработкаОбъект.ОбработкаСловарьСоответствий = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ХранилищеСправочникаСоответствийFILLIN",Истина);
	//Если ОбработкаОбъект.ОбработкаСловарьСоответствий.Пустая() Тогда 
	//	НоваяОбработка = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	//	НоваяОбработка.Наименование = "ХранилищеСправочникаСоответствийFILLIN";
	//	НоваяОбработка.Комментарий = "Здесь справочник соответствий FILLIN, НЕ УДАЛЯТЬ!";
	//	НоваяОбработка.Записать();
	//	ОбработкаОбъект.ОбработкаСловарьСоответствий = НоваяОбработка.Ссылка;
	//КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	//ОбработкаОбъект.ПрочитатьИсториюИзФайла();
	//ОбработкаОбъект.ОткрытьФайлСловаряСоответствий();
	
	ОбработкаОбъект.ЗаполнитьСловарьСоответствий();
	Автор = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

// Заполнение списка выбора вариантов типов документов
//
Процедура ЗаполнитьСписокВыбораТиповДокументов()
	ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Накладная","Накладная");
	ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Счет-фактура","Счет-фактура");
	ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("УПД (Передаточный документ)","УПД (Передаточный документ)");
	ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("УПД (Передаточный документ и СФ)","УПД (Передаточный документ и СФ)");
	ЭлементыФормы.Сканирование.Колонки.ТипДокумента.ЭлементУправления.СписокВыбора.Добавить("Акт","Акт");
	ЭлементыФормы.Сканирование.Колонки.ВидДокумента.ЭлементУправления.СписокВыбора.Добавить("Поступление","Поступление");
	ЭлементыФормы.Сканирование.Колонки.ВидДокумента.ЭлементУправления.СписокВыбора.Добавить("Реализация","Реализация");
КонецПроцедуры

// Окраска ячеек
//
Процедура СканированиеПриПолученииДанных(Элемент, ОформленияСтрок)
	//Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл 
	//    ЗначениеЯчейки = ОформлениеСтроки.Ячейки.Организация.Значение; 
	//	//Если ТипЗнч(ЗначениеЯчейки)=Тип("Строка") Тогда 
	//	//    ОформлениеСтроки.Ячейки.Организация.ЦветФона = WebЦвета.Лосось;
	//	//ИначеЕсли не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда 
	//	//	ОформлениеСтроки.Ячейки.Организация.ЦветФона = WebЦвета.Лосось;
	//	//КонецЕсли;
	//	//ЗначениеЯчейки = ОформлениеСтроки.Ячейки.Контрагент.Значение; 
	//	//Если ТипЗнч(ЗначениеЯчейки)=Тип("Строка") Тогда 
	//	//    ОформлениеСтроки.Ячейки.Контрагент.ЦветФона = WebЦвета.Лосось;
	//	//ИначеЕсли не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
	//	//	ОформлениеСтроки.Ячейки.Контрагент.ЦветФона = WebЦвета.Лосось;
	//	//КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

// Запрет удаления данных в табличной части "отсканированные документы"
Процедура СканированиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Процедура открывает форму создания организации и заполняет ссылку на нее в реквизитах, если она в итоге создана
//
Процедура КоманднаяПанельВерхняяКнопкаДобавитьОрганизацию(Кнопка)
	НужнаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если НужнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
	НоваяОрганизация.ИНН = НужнаяСтрока.ОрганизацияИНН;
	НоваяОрганизация.Наименование = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПолное = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеПлательщикаПриПеречисленииВБюджет = НужнаяСтрока.Организация;
	НоваяОрганизация.НаименованиеСокращенное = НужнаяСтрока.Организация;
	НоваяОрганизация.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();
	//Организация = ОбработкаОбъект.НайтиОрганизацию(НужнаяСтрока.Контрагент,НужнаяСтрока.КонтрагентИНН,НужнаяСтрока.КонтрагентКПП);
	Если ЗначениеЗаполнено(НоваяОрганизация.Ссылка) Тогда
		НужнаяСтрока.Организация = НоваяОрганизация.Ссылка;
	КонецЕсли;
КонецПроцедуры

// Процедура открывает форму создания контрагента и заполняет ссылку на него в реквизитах, если контрагент в итоге создана
//
Процедура КоманднаяПанельВерхняяКнопкаДобавитьКонтрагента(Кнопка)
	НужнаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если НужнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.ИНН = НужнаяСтрока.КонтрагентИНН;
	НовыйКонтрагент.КПП = НужнаяСтрока.КонтрагентКПП;
	НовыйКонтрагент.Наименование = НужнаяСтрока.Контрагент;
	НовыйКонтрагент.НаименованиеПолное = НужнаяСтрока.Контрагент;
	НовыйКонтрагент.ПолучитьФорму("ФормаЭлемента").ОткрытьМодально();
	//Контрагент = ОбработкаОбъект.НайтиКонтрагента(НужнаяСтрока.Контрагент,НужнаяСтрока.КонтрагентИНН,НужнаяСтрока.КонтрагентКПП);
	Если ЗначениеЗаполнено(НовыйКонтрагент.Ссылка) Тогда
		НужнаяСтрока.Контрагент = НовыйКонтрагент.Ссылка;
		// Создание договора
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = НовыйКонтрагент.Ссылка;
		Если ЗначениеЗаполнено(НужнаяСтрока.Организация) и ТипЗнч(НужнаяСтрока.Организация)<>Тип("Строка") Тогда 
			НовыйДоговор.Организация = НужнаяСтрока.Организация;
			НовыйДоговор.ВалютаВзаиморасчетов = ОбработкаОбъект.мВалютаРегламентированногоУчета; 
			Если НужнаяСтрока.ВидДокумента = "Поступление" Тогда 
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				НовыйДоговор.Наименование = "Договор с поставщиком от "+ТекущаяДата();
				НовыйДоговор.Записать();
			ИначеЕсли НужнаяСтрока.ВидДокумента = "Реализация" Тогда
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовыйДоговор.Наименование = "Договор с покупателем от "+ТекущаяДата();
				НовыйДоговор.Записать();
			Иначе
				Предупреждение("Не определен вид документа, нет возможности создать договор контрагента.");
			КонецЕсли;
		Иначе
			Предупреждение("Не определена организация, нет возможности создать договор контрагента.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	fillinAX = Неопределено;
	// Сохранение истории a файл
	ОбработкаОбъект.ЗаписатьИсториюВФайл();
	ОбработкаОбъект.СохранитьФайлСловаряСоответствий();
КонецПроцедуры

// Кнопка очистки табличной части Сканирование
//
Процедура КонтекстноеМенюСканироватьОчистить(Кнопка)
	Ответ = Вопрос("Вы действительно хотите очистить список?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбработкаОбъект.Сканирование.Очистить();
		ОбработкаОбъект.ВсеДокументы.Очистить();
	КонецЕсли;
КонецПроцедуры

// Кнопка записи истории в файл, открывает список выбора файла и сохраняет туда историю
//
Процедура КоманднаяПанельВерхняяЗаписатьИсторию(Кнопка)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.ПолноеИмяФайла = "History.xml";
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	Файл = Новый Файл(ВыборФайла.ВыбранныеФайлы[0]);
	Если Файл.Существует() Тогда
		Ответ = Вопрос("Файл " + ВыборФайла.ВыбранныеФайлы[0] + " существует. Заменить?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Сообщить("Сохранение отменено.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ОбработкаОбъект.ЗаписатьИсториюВФайл(ВыборФайла.ВыбранныеФайлы[0]);
КонецПроцедуры

// Процедура открытия значения в табличной части История
//
Процедура ИсторияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ЭлементыФормы.История.ТекущаяСтрока.Ссылка);
КонецПроцедуры

// Кнопка открытия документа из истории в alfresco
//
Процедура КонтекстноеМенюИсторииОткрытьДокументВAlfresco(Кнопка)
	//СтрокаПодключения = Неопределено;
	//ПутьКФайлуНастроек = СтрокаСоединенияИнформационнойБазы();
	//ПутьКФайлуНастроек = СтрЗаменить(ПутьКФайлуНастроек,"File=""","");
	//ПутьКФайлуНастроек = СтрЗаменить(ПутьКФайлуНастроек,""";","");
	//ПутьКФайлуНастроек = ПутьКФайлуНастроек+"\alfresco.ini";
	//Попытка
	//	ФайлСНастройками = Новый ЧтениеТекста(ПутьКФайлуНастроек);
	//	Строка = ФайлСНастройками.ПрочитатьСтроку();
	//	Пока Строка<>Неопределено Цикл
	//		Если Строка = "[Alfresco]" Тогда 
	//			СтрокаПодключения = ФайлСНастройками.ПрочитатьСтроку();
	//			СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"ShareSearchPage=","");
	//			Прервать;
	//		КонецЕсли;
	//		Строка = ФайлСНастройками.ПрочитатьСтроку();
	//	КонецЦикла;
	//Исключение
	//	СтрокаПодключения = "http://127.0.0.1:8080/share/service/fillin-search"
	//КонецПопытки;
	//Если СтрокаПодключения = Неопределено Тогда 
	//	Предупреждение("Не удалось прочитать файл настроек alfresco.ini, проверьте наличие файла в папке с базой данных");
	//Иначе
	//	ЗапуститьПриложение(СтрокаПодключения+"?guid="+Строка(ЭлементыФормы.История.ТекущаяСтрока.Ссылка.УникальныйИдентификатор()));
	//КонецЕсли;
КонецПроцедуры

// Кнопка открытия формы словаря соответствий
//
Процедура КоманднаяПанельВерхняяОткрытьСловарьСоответствий(Кнопка)
	//ФормаСловаряСоответствий = ОбработкаОбъект.ПолучитьФорму("ФормаСловаряСоответствийНоменклатуры");
	//Если не ФормаСловаряСоответствий.Открыта() Тогда 
	//	ФормаСловаряСоответствий.Открыть();
	//КонецЕсли;
	
	ФормаСловаряСоответствий = РегистрыСведений.СоответствиеСтрокОбъектам.ПолучитьФормуСписка();
	Если не ФормаСловаряСоответствий.Открыта() Тогда 
		ФормаСловаряСоответствий.Открыть();
	Иначе
		ФормаСловаряСоответствий.Активизировать();
	КонецЕсли;
	
	
КонецПроцедуры

// Кнопка подбора рекомендуемого значения в табличной части Сканирование
//
Процедура КонтекстноеМенюСканироватьРекомендуемоеЗначение(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если ЭлементыФормы.Сканирование.ТекущаяКолонка = ЭлементыФормы.Сканирование.Колонки.Организация Тогда
		МассивОтбор = Новый Массив();
		МассивОтбор.Добавить(Метаданные.Справочники.Организации);
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
		СписокПоиска.ПолучатьОписание = Истина;
		ПоказыватьОписания = Истина;
		СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
		Если ТипЗнч(ТекущаяСтрока.Организация) = Тип("Строка") Тогда 
			ОрганизацияНаименование = ТекущаяСтрока.Организация;
		Иначе
			ОрганизацияНаименование = ТекущаяСтрока.Организация.Наименование;
		КонецЕсли;
		СписокПоиска.СтрокаПоиска = Лев(Строка(ОрганизацияНаименование),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		
		СписокПоиска.ПерваяЧасть();
		Колво = СписокПоиска.ПолноеКоличество();
		Если СписокПоиска.ПолноеКоличество() = 0 Тогда
			Предупреждение("Начего не найдено!" );
			Если СписокПоиска.СлишкомМногоРезультатов() Тогда
				Предупреждение("Найдено слишком много результатов!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ФормаПохожихОрганизаций = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораОрганизации");
		ФормаПохожихОрганизаций.Заголовок = "Список подходящих организаций";
		СписокПохожихОрганизаций = ФормаПохожихОрганизаций.СписокПохожихОрганизаций;
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда 
				СтрокаСпискаПохожихОрганизаций = СписокПохожихОрганизаций.Добавить();
				СтрокаСпискаПохожихОрганизаций.Название = Значение;
			КонецЕсли;
		КонецЦикла;
		ФормаПохожихОрганизаций.ИсходнаяСтрока = ОрганизацияНаименование; 
		РекомендуемоеЗначение = ФормаПохожихОрганизаций.ОткрытьМодально();
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Организация = РекомендуемоеЗначение;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.Сканирование.ТекущаяКолонка = ЭлементыФормы.Сканирование.Колонки.Контрагент Тогда
		МассивОтбор = Новый Массив();
		МассивОтбор.Добавить(Метаданные.Справочники.Контрагенты);
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
		СписокПоиска.ПолучатьОписание = Истина;
		ПоказыватьОписания = Истина;
		СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
		Если ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("Строка") Тогда 
			КонтрагентНаименование = ТекущаяСтрока.Контрагент;
		Иначе
			КонтрагентНаименование = ТекущаяСтрока.Контрагент.Наименование;
		КонецЕсли;
		СписокПоиска.СтрокаПоиска = Лев(Строка(КонтрагентНаименование),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		
		СписокПоиска.ПерваяЧасть();
		Колво = СписокПоиска.ПолноеКоличество();
		Если СписокПоиска.ПолноеКоличество() = 0 Тогда
			Предупреждение("Начего не найдено!" );
			Если СписокПоиска.СлишкомМногоРезультатов() Тогда
				Предупреждение("Найдено слишком много результатов!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ФормаПохожихКонтрагентов = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораОрганизации");
		ФормаПохожихКонтрагентов.Заголовок = "Список подходящих контрагентов";
		СписокПохожихОрганизаций = ФормаПохожихКонтрагентов.СписокПохожихОрганизаций;
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда 
				СтрокаСпискаПохожихОрганизаций = СписокПохожихОрганизаций.Добавить();
				СтрокаСпискаПохожихОрганизаций.Название = Значение;
			КонецЕсли;
		КонецЦикла;
		ФормаПохожихКонтрагентов.ИсходнаяСтрока = КонтрагентНаименование; 
		РекомендуемоеЗначение = ФормаПохожихКонтрагентов.ОткрытьМодально();
		Если ЗначениеЗаполнено(РекомендуемоеЗначение) Тогда 
			ТекущаяСтрока.Контрагент = РекомендуемоеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - формирования списка выбора организаций в табличной части Сканирование
//
Процедура СканированиеОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.Организации);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	СписокПоиска.ПолучатьОписание = Истина;
	ПоказыватьОписания = Истина;
	СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	Если не ЗначениеЗаполнено(ТекущаяСтрока.ОрганизацияИсходная) Тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Организация,"Оставить текущее значение");
	Иначе
		СписокПоиска.СтрокаПоиска = Лев(Строка(ТекущаяСтрока.ОрганизацияИсходная),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов       		
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		
		СписокПоиска.ПерваяЧасть();
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Организация,"Оставить текущее значение");
		ТаблицаДляСортировки = Новый ТаблицаЗначений;
		ТаблицаДляСортировки.Колонки.Добавить("Значение");
		ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
		ТаблицаДляСортировки.Очистить();
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда
				Строка1 = Значение.Наименование; 
				Строка2 = Строка(ТекущаяСтрока.Организация); 
  				//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
				ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
				СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
				СтрокаТаблицы.Значение = Значение;
				СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДляСортировки.Количество()>5 Тогда 
			Счетчик = 5;
		Иначе
			Счетчик = ТаблицаДляСортировки.Количество();
		КонецЕсли;
		ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
		Для Индекс = 0 По Счетчик-1 Цикл
			СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
			Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
			СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
		КонецЦикла;	
	КонецЕсли;
	//Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	Элемент.СписокВыбора = СписокЗначений;
КонецПроцедуры

// Процедура - формирования списка выбора контрагента в табличной части Сканирование
//
Процедура СканированиеКонтрагентНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//fillinUtils = Новый COMОбъект("Eurekabpo.Utils");
	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.Контрагенты);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 30); // первый параметр строка поиска, второй размер списка
	СписокПоиска.ПолучатьОписание = Истина;
	ПоказыватьОписания = Истина;
	СписокПоиска.ПорогНечеткости = 25; //процент нечеткости для слова из 4 букв, одна может быть неправильной
	Если не ЗначениеЗаполнено(ТекущаяСтрока.КонтрагентИсходный) Тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Контрагент,"Оставить текущее значение");
	Иначе
		СписокПоиска.СтрокаПоиска = Лев(Строка(ТекущаяСтрока.КонтрагентИсходный),99); // текст поиска можно задать и так
		СписокПоиска.РазмерПорции = 30; // а это, сколько стандартно будет вывожится результатов
		СписокПоиска.ОбластьПоиска = МассивОтбор;
		
		ОбработкаОбъект.ЗаменитьНедопустимыеСимволыДляПолнотекстовогоПоиска(СписокПоиска.СтрокаПоиска);
		
		СписокПоиска.ПерваяЧасть();
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Очистить();
		//СписокЗначений.Добавить(ТекущаяСтрока.Контрагент,"Оставить текущее значение");
		ТаблицаДляСортировки = Новый ТаблицаЗначений;
		ТаблицаДляСортировки.Колонки.Добавить("Значение");
		ТаблицаДляСортировки.Колонки.Добавить("ЗначениеДляСортировки");
		ТаблицаДляСортировки.Очистить();
		Для Индекс = 0 По СписокПоиска.Количество()-1 Цикл
			Значение = СписокПоиска.Получить(Индекс).Значение;
			Если не Значение.ПометкаУдаления Тогда
				Строка1 = Значение.Наименование; 
				Строка2 = Строка(ТекущаяСтрока.Контрагент); 
				//ПроцентПохожести = fillinUtils.StrCompare(Строка1,Строка2);
				ПроцентПохожести = ОбработкаОбъект.КоэффициентКорреляцииСтрок_Массивы_Квадр(Строка1,Строка2);				
				СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
				СтрокаТаблицы.Значение = Значение;
				СтрокаТаблицы.ЗначениеДляСортировки = ПроцентПохожести;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДляСортировки.Количество()>5 Тогда 
			Счетчик = 5;
		Иначе
			Счетчик = ТаблицаДляСортировки.Количество();
		КонецЕсли;
		ТаблицаДляСортировки.Сортировать("ЗначениеДляСортировки УБЫВ");
		Для Индекс = 0 По Счетчик-1 Цикл
			СтрокаТаблицы = ТаблицаДляСортировки[Индекс];
			Представление = Строка(СтрокаТаблицы.ЗначениеДляСортировки)+"% | "+Строка(СтрокаТаблицы.Значение.Наименование);
			СписокЗначений.Добавить(СтрокаТаблицы.Значение,Представление);
		КонецЦикла;	
	КонецЕсли;
	//Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	СписокЗначений.Добавить("ВыбратьИзСправочника","Выбрать значение из справочника");
	Элемент.СписокВыбора = СписокЗначений;
КонецПроцедуры

// Процедура - обработка выбора организации в табличной части Сканирование
//
Процедура СканированиеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = Справочники.Организации.ПолучитьФормуВыбора().ОткрытьМодально();
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ТекущаяСтрока.Организация = ВыбранноеЗначение;
КонецПроцедуры

// Процедура - обработка выбора контрагента в табличной части Сканирование
//
Процедура СканированиеКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если ВыбранноеЗначение = "ВыбратьИзСправочника" Тогда
		ВыбранноеЗначение = Справочники.Контрагенты.ПолучитьФормуВыбора().ОткрытьМодально();
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ВыбранноеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	ТекущаяСтрока.Контрагент = ВыбранноеЗначение;
КонецПроцедуры

// Кнопка заполняет значение в текущей колонке табличной части Сканирование исходным 
//
Процедура КонтекстноеМенюСканироватьВернутьИсходноеЗначение(Кнопка)
	//Если ЭлементыФормы.Сканирование.ТекущаяКолонка = ЭлементыФормы.Сканирование.Колонки.Организация Тогда 
	//	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	//	ТекущаяСтрока.Организация = ТекущаяСтрока.ОрганизацияИсходная;
	//ИначеЕсли ЭлементыФормы.Сканирование.ТекущаяКолонка = ЭлементыФормы.Сканирование.Колонки.Контрагент Тогда 
	//	ТекущаяСтрока = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	//	ТекущаяСтрока.Контрагент = ТекущаяСтрока.КонтрагентИсходный;
	//КонецЕсли;
	
	ТекСтрокаСканирование = ЭлементыФормы.Сканирование.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрокаСканирование.ФайлXMLВерификация) = Истина Тогда
		Файл = ТекСтрокаСканирование.ФайлXMLВерификация;		
		СсылкаНаФайл = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);		
		УдалитьФайлы(СсылкаНаФайл);
		
		Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Файл);		
		Набор.Записать();
		
		Набор = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьНаборЗаписей();
		Набор.Отбор.Файл.Установить(Файл);		
		Набор.Записать();
		
		
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.Удалить();
		ТекСтрокаСканирование.ФайлXMLВерификация = Справочники.Файлы.ПустаяСсылка();
		ТекСтрокаСканирование.Статус = "Распознан";
		
		
		Фильтр = Новый Структура("Файл, ФайлXML", ТекСтрокаСканирование.Файл,ТекСтрокаСканирование.ФайлXML);
		МассивСтрок = ОбработкаОбъект.ВсеДокументыXML.НайтиСтроки(Фильтр);
		Для каждого СтрМассива Из МассивСтрок Цикл
			СтрМассива.Реквизиты = Неопределено;
			СтрМассива.ТабличнаяЧасть = Неопределено;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

// Процедура - Обновление отображения
//
Процедура ОбновлениеОтображения()
	ЭлементыФормы.Сканирование.Колонки.ОрганизацияИсходная.Видимость = Ложь;
	ЭлементыФормы.Сканирование.Колонки.КонтрагентИсходный.Видимость = Ложь;
КонецПроцедуры

// Процедура сортировки строк по дате в табличной части История
//
Процедура ИсторияПриПолученииДанных(Элемент, ОформленияСтрок)
	ОбработкаОбъект.История.Сортировать("Дата УБЫВ, Ссылка ВОЗР");
КонецПроцедуры

// Кнопка удаления строки из табличной части История
//
Процедура КонтекстноеМенюИсторииУдалитьИзИстории(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.История.ТекущаяСтрока;
	ОбработкаОбъект.История.Удалить(ТекущаяСтрока);
КонецПроцедуры

// Кнопка открытия истории из файла, открывает список выбора файла и заполняет оттуда историю
//
Процедура КоманднаяПанельВерхняяПрочитатьИсториюИзФайла(Кнопка)
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "XML (*.xml)|*.xml";
	ВыборФайла.ПроверятьСуществованиеФайла=Истина;
	ВыборФайла.МножественныйВыбор = Ложь;
	Выбор = ВыборФайла.Выбрать();
	Если Не Выбор Тогда
		Возврат;	                
	КонецЕсли;
	ИмяФайла = ВыборФайла.ВыбранныеФайлы[0];
	ОбработкаОбъект.ПрочитатьИсториюИзФайла(ИмяФайла);
КонецПроцедуры

// Кнопка заполняет колонку экспортировать в табличной части сканирование на истину
//
Процедура КоманднаяПанель1ЭкспортироватьВсе(Кнопка)
	ОбработкаОбъект.Экспортировать(Истина);
КонецПроцедуры

// Кнопка заполняет колонку экспортировать в табличной части сканирование на ложь
//
Процедура КоманднаяПанель1НеЭкспортироватьНичего(Кнопка)
	ОбработкаОбъект.Экспортировать(Ложь);
КонецПроцедуры

// Кнопка обновления полнотекстового поиска
//
Процедура КоманднаяПанельВерхняяОбновитьПолнотекстовыйИндекс(Кнопка)
	ОбработкаОбъект.ОбновитьПолнотекстовыйИндекс();
КонецПроцедуры


//++ АК luza
Процедура КоманднаяПанель1ПолучитьТаблицуШапки(Кнопка)
	ТС = ЭлементыФормы.Сканирование.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТС) = Истина Тогда
		Документ = ОбработкаОбъект.ВсеДокументы.Получить(ТС.НомерСтроки - 1).Документ;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Name");
		ТЗ.Колонки.Добавить("Value");
		
		Поля = Документ.Fields; 
		Для Счетчик = 0 To Поля.Count - 1 Цикл
			Поле = Поля.GetItem(Счетчик);
			Стр = ТЗ.Добавить();
			Стр.Name = Поле.Name;
			Стр.Value = Поле.Value;		
		КонецЦикла;
				
		ТЧ = Документ.Tables;		
		МассивТЧ = Новый Массив;
		
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
		Построитель.Выполнить();
		Построитель.Вывести();
		
		
		Для Счетчик = 0 To ТЧ.Count - 1 Цикл
			ТЗТЧ = Новый ТаблицаЗначений;					
			Колонки =  Документ.Tables.GetItem(Счетчик).Headers;
			Для Счетчик1 = 0 To Колонки.Count - 1 Цикл
				ТЗТЧ.Колонки.Добавить("К_" + Строка(Счетчик1),,Колонки.GetItem(Счетчик1));				
			КонецЦикла;
			
			Строки = Документ.Tables.GetItem(Счетчик).Records;
			Для Счетчик2 = 0 To Строки.Count - 1 Цикл
				СтрТЧ = ТЗТЧ.Добавить();
				Строка = Строки.GetItem(Счетчик2);
				Для Счетчик3 = 0 To Строка.Count - 1 Цикл
					СтрТЧ["К_" + Строка(Счетчик3)] = Строка.GetItem(Счетчик3);
				КонецЦикла;	
			КонецЦикла;

			Построитель = Новый ПостроительОтчета;
			Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗТЧ);
			Построитель.Выполнить();
			Построитель.Вывести();
			МассивТЧ.Добавить(ТЗТЧ);
		КонецЦикла;	 	         		
 
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбработатьПапкуНажатие(Элемент)
	ОбработкаОбъект.ПрочитатьXMLФайлыОтФилина();
	ЭлементыФормы.панельТабов.ТекущаяСтраница = ЭлементыФормы.панельТабов.Страницы.Сканирование;

КонецПроцедуры

Процедура ПутьКВыходнойПапкеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() = Истина Тогда
		ОбработкаОбъект.ПутьКВыходнойПапке = Диалог.Каталог;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанельВерхняяИмитацияРегламентногоЗадания(Кнопка)
	Справочники.АК_АлгоритмыРаспознаванияФайлов.АК_РаспознованиеФайлов();
КонецПроцедуры

Процедура СканированиеПриАктивизацииСтроки(Элемент)
	//Если 
КонецПроцедуры



Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	//СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	Если Лев(НРег(РасширениеРезультата),4)=".doc" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;	
	Если ЗначениеЗаполнено(Константы.АК_КаталогДляРаспознаванияФайлов.Получить()) = Истина Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("ОтправлятьНаРаспознованиеФилин", Истина);
	КонецЕсли;	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Процедура ВерифицироватьСтрокуНажатие(Элемент)
	ТС = ЭлементыФормы.Сканирование.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТС) = Истина Тогда
		Если ЗначениеЗаполнено(ТС.Файл) И ЗначениеЗаполнено(ТС.ФайлXML) = Истина Тогда
			ФормаВерификации = ОбработкаОбъект.ПолучитьФорму("ФормаВерификации", ЭтаФорма);
			ФормаВерификации.ТекСтрокаСканирование = ТС;
			
			ФормаВерификации.Открыть();

		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры



Процедура КонтекстноеМенюСканироватьСоздатьПоступлениеТоваров(Кнопка)
	ТС = ЭлементыФормы.Сканирование.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТС) И ЗначениеЗаполнено(ТС.ФайлXMLВерификация) = Истина Тогда
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ТС.ФайлXMLВерификация);			
		ТекФайлXML = Новый Файл(ПутьКФайлу);			
		ТекДокумент = ОбработкаОбъект.ПолучитьСтруктуруXMLВерификации(ТекФайлXML);
		
		ДанныеВерификации = ТекДокумент.Tables;
		
		Если ДанныеВерификации.Количество() = 0 Тогда
			Предупреждение("Нет верифицированных данных");
			Возврат;			
		КонецЕсли;	
		
		Реквизиты = ДанныеВерификации[0];
		
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		Если ДанныеВерификации.Количество() > 1 Тогда
			ТабличнаяЧасть = ДанныеВерификации[1];
		КонецЕсли;
		
		ОбработкаОбъект.СоздатьДокумент("ПоступлениеТоваровУслуг", Реквизиты, ТабличнаяЧасть, ТС.Файл);
		
		 
	Иначе
		Предупреждение("Нет верифицированных данных");
		Возврат;
	КонецЕсли;	
КонецПроцедуры

Процедура СканированиеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ТС = ЭлементыФормы.Сканирование.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТС) = Истина Тогда
		Если ЗначениеЗаполнено(ТС.Файл) И ЗначениеЗаполнено(ТС.ФайлXML) = Истина Тогда
			ФормаВерификации = ОбработкаОбъект.ПолучитьФорму("ФормаВерификации", ЭтаФорма);
			ФормаВерификации.ТекСтрокаСканирование = ТС;
			
			ФормаВерификации.Открыть();

		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


//Процедуры заполнения и обновления
Процедура ОбновитьНажатие(Элемент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ОчередьРаспознаванияФайлов.Файл
	|ПОМЕСТИТЬ ВТ_Файлы
	|ИЗ
	|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	|ГДЕ
	|	АК_ОчередьРаспознаванияФайлов.Распознан = ИСТИНА
	|	И АК_ОчередьРаспознаванияФайлов.РаспознаватьЧерезFillin = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК ФайлРаспознанный,
	|	ЗначенияСвойствОбъектов.Значение КАК ФайлРодитель
	|ПОМЕСТИТЬ ВТ_Файлы_С_ХМЛ
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Файлы КАК ВТ_Файлы
	|		ПО ЗначенияСвойствОбъектов.Значение = ВТ_Файлы.Файл
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Файлы_С_ХМЛ.ФайлРаспознанный,
	|	ВТ_Файлы_С_ХМЛ.ФайлРодитель,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Объект, ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)) КАК ВерифицированныйФайл
	|ИЗ
	|	ВТ_Файлы_С_ХМЛ КАК ВТ_Файлы_С_ХМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ВТ_Файлы_С_ХМЛ.ФайлРаспознанный = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель))";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ОбработкаОбъект.Сканирование Цикл
		Если ЗначениеЗаполнено(Стр.ФайлXML) = Ложь Тогда
			Фильтр = Новый Структура("ФайлРодитель", Стр.Файл);
			МассивСтрок = ТЗ.НайтиСтроки(Фильтр);
			
			Если МассивСтрок.Количество() > 0 Тогда
				Стр.Статус = "Распознан";
				а = 0;
				Для каждого СтрМассива Из МассивСтрок Цикл
					Если а = 0 Тогда
						Стр.ФайлXML = СтрМассива.ФайлРаспознанный;
						Стр.ФайлXMLВерификация = СтрМассива.ВерифицированныйФайл;

						а = а + 1;
					Иначе
						НСтр = ОбработкаОбъект.Сканирование.Добавить();
						НСтр.Файл = СтрМассива.ФайлРодитель;
						НСтр.ФайлXML = СтрМассива.ФайлРаспознанный;
						Стр.ФайлXMLВерификация = СтрМассива.ВерифицированныйФайл;
						НСтр.Статус = "Распознан";
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого Стр Из ОбработкаОбъект.Сканирование Цикл
		Если ЗначениеЗаполнено(Стр.Файл) И ЗначениеЗаполнено(Стр.ФайлXML) = Истина Тогда			
			Фильтр = Новый Структура("Файл, ФайлXML", Стр.Файл,Стр.ФайлXML);
			МассивСтрок = ОбработкаОбъект.ВсеДокументыXML.НайтиСтроки(Фильтр);			
			Если МассивСтрок.Количество() = 0 Тогда
				НСтр = ОбработкаОбъект.ВсеДокументыXML.Добавить();
				НСтр.Файл = Стр.Файл;
				НСтр.ФайлXML = Стр.ФайлXML;
				ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.ФайлXML);
				
				ТекФайлXML = Новый Файл(ПутьКФайлу);
				
				НСтр.Документ = ОбработкаОбъект.ПолучитьСтруктуруXML(ТекФайлXML);
			Иначе
				НСтр = МассивСтрок.Получить(0);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НСтр) = Истина Тогда
				
				Документ = НСтр.Документ;
				
				ДанныеОЗаказчике = Новый Структура;
				ДанныеОЗаказчике.Вставить("Заказчик", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "Заказчик"));
				ДанныеОЗаказчике.Вставить("ЗаказчикИНН", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "ИННЗаказчика"));
				ДанныеОЗаказчике.Вставить("ЗаказчикКПП", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "КППЗаказчика"));
				ДанныеОЗаказчике.Вставить("АдресЗаказчика", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "АдресЗаказчика"));
				ДанныеОПоставщике = Новый Структура;
				ДанныеОПоставщике.Вставить("Поставщик", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "Поставщик"));
				ДанныеОПоставщике.Вставить("ПоставщикИНН", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "ИННПоставщика"));
				ДанныеОПоставщике.Вставить("ПоставщикКПП", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "КПППоставщика"));
				ДанныеОПоставщике.Вставить("АдресПоставщика", ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "АдресПоставщика"));
				НомерДокумента = ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "Номер");
				Дата = ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "Дата");
				Статус = ОбработкаОбъект.ВзятьЗначениеПоля(Документ.Fields, "Статус");
				ОбработкаОбъект.ЗанестиДанныеПоДокументу(Документ.Document_Type,Статус,Дата,НомерДокумента,ДанныеОЗаказчике,ДанныеОПоставщике, Стр);
				
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	СтрукутраОтбора = Новый Структура("ДатаНач, ДатаКон, Автор", Дата(1,1,1), КонецГода(ТекущаяДата()), Автор);
	ОбработкаОбъект.ЗаполнитьОбновитьСписокСканирования(СтрукутраОтбора);

КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	
	Если ОбработкаОбъект.Сканирование.Количество() <> 0 Тогда
		ОбработкаОбъект.Сканирование.Очистить();
		ОбработкаОбъект.ВсеДокументыXML.Очистить();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаКон) = Ложь Тогда
		ДатаОкончания = КонецГода(ТекущаяДата());
	Иначе
		ДатаОкончания = КонецДня(ЭтаФорма.ДатаКон);
	КонецЕсли;	
	СтрукутраОтбора = Новый Структура("ДатаНач, ДатаКон, Автор", НачалоДня(ЭтаФорма.ДатаНач), ДатаОкончания, Автор);
	
	ОбработкаОбъект.ЗаполнитьОбновитьСписокСканирования(СтрукутраОтбора);
		
	ЭлементыФормы.панельТабов.ТекущаяСтраница = ЭлементыФормы.панельТабов.Страницы.Сканирование;
	
	Если ЗначениеЗаполнено(ЭтаФорма.Статус) = Истина Тогда
		Фильтр = Новый Структура("Статус", ЭтаФорма.Статус);		
		ЭлементыФормы.Сканирование.ОтборСтрок.Статус.Установить(ЭтаФорма.Статус);		
	Иначе
		ЭлементыФормы.Сканирование.ОтборСтрок.Статус.Установить(, Ложь);
	КонецЕсли;	
		

КонецПроцедуры


Процедура НастройкаПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();		
	КонецЕсли;
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ЭтаФорма.Статус) = Истина Тогда
		Фильтр = Новый Структура("Статус", ЭтаФорма.Статус);		
		ЭлементыФормы.Сканирование.ОтборСтрок.Статус.Установить(ЭтаФорма.Статус);		
	Иначе
		ЭлементыФормы.Сканирование.ОтборСтрок.Статус.Установить(, Ложь);
	КонецЕсли;	  
КонецПроцедуры




//-- АК luza
