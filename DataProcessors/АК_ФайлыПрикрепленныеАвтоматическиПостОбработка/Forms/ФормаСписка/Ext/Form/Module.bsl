
&НаКлиенте
// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Представление           - Строка - представление элемента компоновки данных
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

&НаКлиенте
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Добавить или заменить существующий элемент отбора.
//
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Представление           - Строка - представление элемента компоновки данных
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								знач РежимОтображения = Неопределено,
								знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(ИсходныйСписок, ИмяПоля, ПравоеЗначение, Использование = Истина, ВидСравнения = Неопределено) Экспорт
	
	//НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	НаборЭлементов = ИсходныйСписок.Отбор;
	УстановитьЭлементОтбора(НаборЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения,, Использование);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

&НаКлиенте
// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  Представление           - Строка - представление элемента компоновки данных
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьПолныйПутьКФайлу(Файл)
	
	//
	Возврат Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);
	
КонецФункции

&НаСервере
Функция ОбновитьПолеПредпросмотра(ТекущийФайл, ТекущийОбъект, ЭтоУПД, ЭтоСФ, ЭтоАктНакладная)
	
	//
	ТекстHTML = "<HTML><HEAD>
					|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
					|<META name=GENERATOR content=""MSHTML 8.00.7601.18870""></HEAD>
					|<BODY><TABLE cellpadding=5 border=1><TR>";
	//
	ТекстHTML1 = "<HEAD>
					|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
					|<META name=GENERATOR content=""MSHTML 8.00.7601.18870""></HEAD>
					|<BODY><TABLE cellpadding=5 border=1><TR>";				
	//
	ТекстHTML2 = "<BODY><TABLE cellpadding=5 border=1><TR>";								
	
	//
	стрИзображение = "";
					
	//				
	Если ЗначениеЗаполнено(ТекущийФайл) Тогда				
		
		//
		ИмяФайла = ПолучитьПолныйПутьКФайлу(ТекущийФайл);					
		
		//
		стрИзображение = "<TD><DIV>ТЕКУЩИЙ ФАЙЛ</DIV>"; 
		
		//
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
			
			//
			Если нрег(Файл.Расширение) = ".pdf" Тогда
				
				//
				стрИзображение = стрИзображение + "<DIV><EMBED width=600 height=800 src=""#REF""></DIV></TD>";
				
				
			Иначе
				
				//
				стрИзображение = стрИзображение + "<DIV><IMG width=600 src=""#REF""></DIV></TD>";
				
			КонецЕсли;							
			
			//
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			//
			ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", Файл.ПолноеИмя);
			
		Иначе
			
			//
			ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", "");
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//				
	Если ЭтоУПД И ЗначениеЗаполнено(ТекущийОбъект) Тогда				
		
		//
		Если ЗначениеЗаполнено(ТекущийОбъект.УПД) Тогда
		
			//
			ИмяФайла = ПолучитьПолныйПутьКФайлу(ТекущийОбъект.УПД);					
			
			//
			Если ТекущийОбъект.УПД <> ТекущийФайл Тогда 
				стрИзображение = "<TD bgcolor=#FF9090><DIV>УПД (" + ТекущийОбъект.УПД + ")" + "</DIV>"; 
			Иначе
				стрИзображение = "<TD bgcolor=#B4FFB4><DIV>УПД (" + ТекущийОбъект.УПД + ")" + "</DIV>"; 
			КонецЕсли;	
			
			//
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
				
				//
				Если нрег(Файл.Расширение) = ".pdf" Тогда
					
					//
					стрИзображение = стрИзображение + "<DIV><EMBED width=600 height=800 src=""#REF""></DIV></TD>";
					
				Иначе
					
					//
					стрИзображение = стрИзображение + "<DIV><IMG width=600 src=""#REF""></DIV></TD>";
					
				КонецЕсли;							
				
				//
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
				ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", Файл.ПолноеИмя);
				
			Иначе
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", "");
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	//				
	Если ЭтоСФ И ЗначениеЗаполнено(ТекущийОбъект) Тогда				
		
		//
		Если ЗначениеЗаполнено(ТекущийОбъект.СчетФактура) Тогда
		
			//
			ИмяФайла = ПолучитьПолныйПутьКФайлу(ТекущийОбъект.СчетФактура);					
			
			//
			Если ТекущийОбъект.СчетФактура <> ТекущийФайл Тогда 
				стрИзображение = "<TD bgcolor=#FF9090><DIV>СЧЕТ-ФАКТУРА (" + ТекущийОбъект.СчетФактура + ")" + "</DIV>"; 
			Иначе
				стрИзображение = "<TD bgcolor=#B4FFB4><DIV>СЧЕТ-ФАКТУРА (" + ТекущийОбъект.СчетФактура + ")" + "</DIV>"; 
			КонецЕсли;
			
			//
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
				
				//
				Если Файл.Расширение = ".pdf" Тогда
					
					//
					стрИзображение = стрИзображение + "<DIV><EMBED width=600 height=800 src=""#REF""></DIV></TD>";
					
				Иначе
					
					//
					стрИзображение = стрИзображение + "<DIV><IMG width=600 src=""#REF""></DIV></TD>";
					
				КонецЕсли;							
				
				//
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
				ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", Файл.ПолноеИмя);
				
			Иначе
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", "");
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	//				
	Если ЭтоАктНакладная И ЗначениеЗаполнено(ТекущийОбъект) Тогда				
		
		//
		Если ЗначениеЗаполнено(ТекущийОбъект.Акт) Тогда
		
			//
			ИмяФайла = ПолучитьПолныйПутьКФайлу(ТекущийОбъект.Акт);					
			
			//
			Если ТекущийОбъект.Акт <> ТекущийФайл Тогда 
				стрИзображение = "<TD bgcolor=#FF9090><DIV>АКТ/НАКЛАДНАЯ (" + ТекущийОбъект.Акт + ")" + "</DIV>"; 
			Иначе
				стрИзображение = "<TD bgcolor=#B4FFB4><DIV>АКТ/НАКЛАДНАЯ (" + ТекущийОбъект.Акт + ")" + "</DIV>"; 
			КонецЕсли;
			
			//
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
				
				//
				Если Файл.Расширение = ".pdf" Тогда
					
					//
					стрИзображение = стрИзображение + "<DIV><EMBED width=600 height=800 src=""#REF""></DIV></TD>";
					
				Иначе
					
					//
					стрИзображение = стрИзображение + "<DIV><IMG width=600 src=""#REF""></DIV></TD>";
					
				КонецЕсли;							
				
				//
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
				ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", Файл.ПолноеИмя);
				
			Иначе
				
				//
				ТекстHTML = ТекстHTML + СтрЗаменить(стрИзображение, "#REF", "");
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//
	ТекстHTML = ТекстHTML + "</TR></TABLE></BODY>";
	//ТекстHTML = ТекстHTML + "</TR></TABLE></BODY></HTML>";

	//
	Возврат ТекстHTML;
	
КонецФункции


&НаКлиенте
Процедура ОбновитьПолеПредпросмотраОбработчикОжидания()
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если _ТекущийФайл = ТекущаСтрока.Файл Тогда
		//Возврат;
	КонецЕсли;
	
	//
	ТекстHTML = ОбновитьПолеПредпросмотра(ТекущаСтрока.Файл, ТекущаСтрока.Объект, ТекущаСтрока.ПризнакЭтоУПД, ТекущаСтрока.ПризнакЭтоСФ, ТекущаСтрока.ПризнакЭтоАктНакладная);
	Если Элементы.HTMLПредпросмотр.Документ.body.innerHTML <> ТекстHTML Тогда
		
		Элементы.HTMLПредпросмотр.Документ.open();
		Элементы.HTMLПредпросмотр.Документ.write(ТекстHTML);
		Элементы.HTMLПредпросмотр.Документ.close();
		
		//Элементы.HTMLПредпросмотр.Документ.parentWindow.document.open();
		//Элементы.HTMLПредпросмотр.Документ.body.innerHTML = ТекстHTML;
		//Элементы.HTMLПредпросмотр.Документ.body.innerHTML = ТекстHTML;
		//Элементы.HTMLПредпросмотр.Документ.parentWindow.document.close();
		
		//HTMLПредпросмотр = ТекстHTML;
		//Элементы.HTMLПредпросмотр.Обн
	КонецЕсли;	
	
	//
	//Оповестить("ТекстHTML", ТекущаСтрока);
	
КонецПроцедуры	


&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если _ТекущийФайл = ТекущаСтрока.Файл И _ТекущийДокумент = ТекущаСтрока.Объект Тогда
		Возврат;
	КонецЕсли;	
	
	//
	_ТекущийФайл = ТекущаСтрока.Файл;
	_ТекущийДокумент = ТекущаСтрока.Объект;
	
	//
	Элементы.СписокКонтекстноеМенюПрикрепитьКакУПД.Доступность = ТекущаСтрока.ПризнакЭтоУПД И ЗначениеЗаполнено(_ТекущийДокумент);
	Элементы.СписокКонтекстноеМенюПрикрепитьКакСФ.Доступность = ТекущаСтрока.ПризнакЭтоСФ И ЗначениеЗаполнено(_ТекущийДокумент);
	Элементы.СписокКонтекстноеМенюПрикрепитьКакАктНакладная.Доступность = ТекущаСтрока.ПризнакЭтоАктНакладная И ЗначениеЗаполнено(_ТекущийДокумент);
	
	//
	Элементы.СписокКонтекстноеМенюОтменитьСвязь.Доступность = ЗначениеЗаполнено(ТекущаСтрока.Объект);
	
	//
	Элементы.ПрикрепитьКакУПД.Доступность = ТекущаСтрока.ПризнакЭтоУПД И ЗначениеЗаполнено(_ТекущийДокумент);
	Элементы.ПрикрепитьКакСФ.Доступность = ТекущаСтрока.ПризнакЭтоСФ И ЗначениеЗаполнено(_ТекущийДокумент);
	Элементы.ПрикрепитьКакАктНакладная.Доступность = ТекущаСтрока.ПризнакЭтоАктНакладная И ЗначениеЗаполнено(_ТекущийДокумент);
	
	//
	Элементы.ОтменитьСвязь.Доступность = ЗначениеЗаполнено(_ТекущийДокумент);
	
	//
	//Элементы.HTMLПредпросмотр.Документ.body.innerHTML = "<BODY></BODY>";
	ПодключитьОбработчикОжидания("ОбновитьПолеПредпросмотраОбработчикОжидания", 0.1, Истина);
	
	//
	//ОбновитьПолеПредпросмотраОбработчикОжидания();
	//Активизировать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция ВыбратьПТУ(ТекущееЗначение, Отбор)
	
	//
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	//
	ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы);
	Результат = ФормаВыбора.ОткрытьМодально();
	
	//
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ВыбратьПДР(ТекущееЗначение, Отбор)
	
	//
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	//
	ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеДопРасходов.ФормаВыбора", ПараметрыФормы);
	Результат = ФормаВыбора.ОткрытьМодально();
	
	//
	Возврат Результат;
	
КонецФункции	


&НаСервере
Процедура ИзменитьЗначениеВСтрокеСписка(Знач Объект, Знач Файл, ИмяРеквизита, ЗначениеРеквизита = Неопределено)
	
	//
	Если ИмяРеквизита = "Объект" Тогда
		
		//
		ВсеОК = Истина;
		
		//
		МЗ_Исходная = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
		МЗ_Исходная.Объект = Объект;
		МЗ_Исходная.Файл = Файл;
		МЗ_Исходная.Прочитать();
		
		//
		МЗ = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, МЗ_Исходная);
		
		//
		МЗ.Файл = Файл;
		МЗ.Объект = ЗначениеРеквизита;
		
		//
		Попытка
			МЗ.Записать();
		Исключение
			ВсеОК = Ложь;
		КонецПопытки;	
		
		//
		Если ВсеОК И НЕ ЗначениеЗаполнено(Объект) Тогда
			МЗ_Исходная.Удалить();
		КонецЕсли;	
		
	Иначе
	
		//
		МЗ = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
		МЗ.Объект = Объект;
		МЗ.Файл = Файл;
		МЗ.Прочитать();
		
		//
		Если ИмяРеквизита = "ПризнакЭтоСФ" Тогда
			
			//
			Если МЗ.ПризнакЭтоСФ Тогда
				
				//
				МЗ.ПризнакЭтоСФ = Ложь;
				
			Иначе
				
				//
				МЗ.ПризнакЭтоСФ = Истина;
				МЗ.ПризнакЭтоУПД = Ложь;
				
			КонецЕсли;	
			
		ИначеЕсли ИмяРеквизита = "ПризнакЭтоУПД" Тогда
			
			//
			Если МЗ.ПризнакЭтоУПД Тогда
				
				//
				МЗ.ПризнакЭтоУПД = Ложь;
				
			Иначе
				
				//
				МЗ.ПризнакЭтоСФ = Ложь;
				МЗ.ПризнакЭтоУПД = Истина;
				
			КонецЕсли	
			
		ИначеЕсли ИмяРеквизита = "ПризнакЭтоАктНакладная" Тогда
			
			//
			МЗ.ПризнакЭтоАктНакладная = НЕ МЗ.ПризнакЭтоАктНакладная;
			
		ИначеЕсли ИмяРеквизита = "СтатусПолученныхДокументов" И ЗначениеЗаполнено(Объект) Тогда	
			
			//
			ДокументОбъект = Объект.ПолучитьОбъект();
			ДокументОбъект.СтатусПолученныхДокументов = ЗначениеРеквизита;
			
			//
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		Иначе
			
			//
			МЗ[ИмяРеквизита] = ЗначениеРеквизита;
			
		КонецЕсли;	
		
		//
		МЗ.Объект = Объект;
		МЗ.Файл = Файл;
		МЗ.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	ПолеИмя = СтрЗаменить(Поле.Имя, "Список", "");
	Значение = Элемент.ТекущиеДанные[ПолеИмя];
	
	//
	_Объект = Элемент.ТекущиеДанные.Объект;
	_Файл = Элемент.ТекущиеДанные.Файл;
	
	//
	Если Найти("ПризнакЭтоСФ|ПризнакЭтоУПД|ПризнакЭтоАктНакладная", ПолеИмя) > 0 Тогда
		
		//
		ИзменитьЗначениеВСтрокеСписка(_Объект, _Файл, ПолеИмя);
	//
	ИначеЕсли Найти("ОбъектНомер|ОбъектДата", ПолеИмя) > 0 Тогда
	
		//
		ОткрытьЗначение(_Объект);
		
	ИначеЕсли Найти("ДействиеПТУ", ПолеИмя) > 0 Тогда
	
		//
		Значение = Элемент.ТекущиеДанные.Объект;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Значение = ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка");
		КонецЕсли;	
		
		//
		СтруктураОтбора = Новый Структура;
		
		//
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Элемент.ТекущиеДанные.Организация);
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент) Тогда
			СтруктураОтбора.Вставить("Контрагент", Элемент.ТекущиеДанные.Контрагент);
		КонецЕсли;	
		
		//
		Значение = ВыбратьПТУ(Значение, СтруктураОтбора);
		Если Значение <> Неопределено И Значение <> Элемент.ТекущиеДанные.Объект Тогда
			ИзменитьЗначениеВСтрокеСписка(_Объект, _Файл, "Объект", Значение);	
		КонецЕсли;	
		
		
	ИначеЕсли Найти("ДействиеПДР", ПолеИмя) > 0 Тогда
	
		//
		Значение = Элемент.ТекущиеДанные.Объект;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Значение = ПредопределенноеЗначение("Документ.ПоступлениеДопРасходов.ПустаяСсылка");
		КонецЕсли;	
		
		//
		СтруктураОтбора = Новый Структура;
		
		//
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Элемент.ТекущиеДанные.Организация);
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент) Тогда
			СтруктураОтбора.Вставить("Контрагент", Элемент.ТекущиеДанные.Контрагент);
		КонецЕсли;	
		
		//
		Значение = ВыбратьПДР(Значение, СтруктураОтбора);
		Если Значение <> Неопределено И Значение <> Элемент.ТекущиеДанные.Объект Тогда
			ИзменитьЗначениеВСтрокеСписка(_Объект, _Файл, "Объект", Значение);	
		КонецЕсли;
		
	Иначе
		
		//
		Если ВвестиЗначение(Значение) Тогда
			ИзменитьЗначениеВСтрокеСписка(_Объект, _Файл, ПолеИмя, Значение);	
		КонецЕсли;	
		
	КонецЕсли;	
	
	//
	Элементы.Список.Обновить();
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура НайтиДокументыНаСервере()
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	Таблица.Объект,
	     |	Таблица.Файл,
	     |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	     |ИЗ
	     |	РегистрСведений.ФайлыПрикрепленныеАвтоматически КАК Таблица
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	     |			Таблица.Ссылка КАК Ссылка,
	     |			Таблица.Организация КАК Организация,
	     |			Таблица.Контрагент КАК Контрагент,
	     |			Таблица.НомерВходящегоСчетаФактуры КАК НомерВходящегоСчетаФактуры,
	     |			Таблица.ДатаВходящегоСчетаФактуры КАК ДатаВходящегоСчетаФактуры,
	     |			Таблица.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	     |			Таблица.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	     |		ИЗ
	     |			Документ.ПоступлениеТоваровУслуг КАК Таблица
	     |		ГДЕ
	     |			Таблица.Проведен
	     |		
	     |		ОБЪЕДИНИТЬ ВСЕ
	     |		
	     |		ВЫБРАТЬ
	     |			Таблица.Ссылка,
	     |			Таблица.Организация,
	     |			Таблица.Контрагент,
	     |			Таблица.НомерВходящегоСчетаФактуры,
	     |			Таблица.ДатаВходящегоСчетаФактуры,
	     |			Таблица.НомерВходящегоДокумента,
	     |			Таблица.ДатаВходящегоДокумента
	     |		ИЗ
	     |			Документ.ПоступлениеДопРасходов КАК Таблица
	     |		ГДЕ
	     |			Таблица.Проведен) КАК ПоступлениеТоваровУслуг
	     |		ПО Таблица.Организация = ПоступлениеТоваровУслуг.Организация
	     |			И Таблица.Контрагент = ПоступлениеТоваровУслуг.Контрагент
	     |			И (ВЫБОР
	     |					КОГДА (Таблица.ПризнакЭтоУПД
	     |							ИЛИ Таблица.ПризнакЭтоСФ)
	     |							И Таблица.СФ_Номер <> """"
	     |							И Таблица.СФ_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |							И Таблица.СФ_Номер = ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры
	     |							И Таблица.СФ_Дата = ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры
	     |						ТОГДА ИСТИНА
	     |					ИНАЧЕ ЛОЖЬ
	     |				КОНЕЦ
	     |				ИЛИ ВЫБОР
	     |					КОГДА Таблица.ПризнакЭтоАктНакладная
	     |							И Таблица.АктНакладная_Номер <> """"
	     |							И Таблица.АктНакладная_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |							И Таблица.АктНакладная_Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	     |							И Таблица.АктНакладная_Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	     |						ТОГДА ИСТИНА
	     |					ИНАЧЕ ЛОЖЬ
	     |				КОНЕЦ)
	     |ГДЕ
	     |	ВЫБОР
	     |			КОГДА Таблица.Объект.Ссылка ЕСТЬ NULL 
	     |				ТОГДА ИСТИНА
	     |			КОГДА Таблица.Объект.Ссылка <> ПоступлениеТоваровУслуг.Ссылка
	     |				ТОГДА ИСТИНА
	     |			ИНАЧЕ ЛОЖЬ
	     |		КОНЕЦ
	     |	И НЕ Таблица.Организация.Ссылка ЕСТЬ NULL 
	     |	И НЕ Таблица.Контрагент.Ссылка ЕСТЬ NULL 
	     |
	     |ДЛЯ ИЗМЕНЕНИЯ";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ВсеОК = Истина;
		
		//
		НачатьТранзакцию();
		
		//
		МЗ_Исходная = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
		МЗ_Исходная.Объект = Выборка.Объект;
		МЗ_Исходная.Файл = Выборка.Файл;
		МЗ_Исходная.Прочитать();
		
		//
		МЗ = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, МЗ_Исходная);
		
		//
		МЗ.Объект = Выборка.Ссылка;
		МЗ.Файл = Выборка.Файл;
		
		//
		Если НЕ ЗначениеЗаполнено(МЗ.Объект) Тогда
			Продолжить;
		конецЕсли;	
		
		//
		Попытка
			МЗ.Записать();
		Исключение
			ВсеОК = Ложь;
		КонецПопытки;	
		
		//
		Если ВсеОК И НЕ ЗначениеЗаполнено(МЗ_Исходная.Объект) Тогда
			
			//
			Попытка
				МЗ_Исходная.Удалить();
			Исключение
				ВсеОК = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
		//
		Если ВсеОК Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура НайтиДокументы(Команда)
	
	//
	НайтиДокументыНаСервере();
	
	//
	Элементы.Список.Обновить();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ОтменитьСвязьНаСервере(ТекущийФайл, ТекущийОбъект)
	
	//
	ВсеОК = Истина;
	
	//
	НачатьТранзакцию();
	
	//
	МЗ_Исходная = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
	МЗ_Исходная.Объект = ТекущийОбъект;
	МЗ_Исходная.Файл = ТекущийФайл;
	МЗ_Исходная.Прочитать();
	
	//
	МЗ = РегистрыСведений.ФайлыПрикрепленныеАвтоматически.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, МЗ_Исходная);
	
	//
	МЗ.Объект = Неопределено;
	МЗ.Файл = ТекущийФайл;
	
	//
	Попытка
		МЗ.Записать();
	Исключение
		ВсеОК = Ложь;
	КонецПопытки;	
	
	//
	Если ВсеОК Тогда
		
		//
		Попытка
			МЗ_Исходная.Удалить();
		Исключение
			ВсеОК = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	//
	Если ВсеОК Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтменитьСвязь(Команда)
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОтменитьСвязьНаСервере(ТекущаСтрока.Файл, ТекущаСтрока.Объект);	
	
	//
	Элементы.Список.Обновить();
	
КонецПроцедуры

//
&НаСервере
Процедура ПрикрепитьНаСервере(ТекущийФайл, ТекущийОбъект, ЭтоУПД, ЭтоСФ, ЭтоАктНакладная)
	
	//
	ДокументОбъект = ТекущийОбъект.ПолучитьОбъект();
	
	//
	Если ЭтоУПД Тогда
		
		Если ДокументОбъект.УПД = ТекущийФайл Тогда
			ДокументОбъект.УПД = Неопределено;
		Иначе
			ДокументОбъект.УПД = ТекущийФайл;
		КонецЕсли;	
		
	КонецЕсли;
	
	//
	Если ЭтоСФ Тогда
		
		Если ДокументОбъект.СчетФактура = ТекущийФайл Тогда
			ДокументОбъект.СчетФактура = Неопределено;
		Иначе	
			ДокументОбъект.СчетФактура = ТекущийФайл;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	Если ЭтоАктНакладная Тогда
		
		Если ДокументОбъект.Акт = ТекущийФайл Тогда
			ДокументОбъект.Акт = Неопределено;
		Иначе	
			ДокументОбъект.Акт = ТекущийФайл;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрикрепитьКакУПД(Команда)
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//
	Если ЗначениеЗаполнено(ТекущаСтрока.Объект) Тогда
		ПрикрепитьНаСервере(ТекущаСтрока.Файл, ТекущаСтрока.Объект, Истина, Ложь, Ложь);
	КонецЕсли;
	
	//
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьКакСФ(Команда)
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//
	Если ЗначениеЗаполнено(ТекущаСтрока.Объект) Тогда
		ПрикрепитьНаСервере(ТекущаСтрока.Файл, ТекущаСтрока.Объект, Ложь, Истина, Ложь);
	КонецЕсли;
	
	//
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьКакАктНакладная(Команда)
	
	//
	ТекущаСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//
	Если ЗначениеЗаполнено(ТекущаСтрока.Объект) Тогда
		ПрикрепитьНаСервере(ТекущаСтрока.Файл, ТекущаСтрока.Объект, Ложь, Ложь, Истина);
	КонецЕсли;
	
	//
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтборПриИзменении(Элемент)
	
	//
	ТекстHTML = "";
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПрикрепитьВсеНеприкрепленноеНаСервере()
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Объект КАК Объект,
	     |	Таблица.Файл,
	     |	Таблица.Файл.Наименование КАК ФайлНаименование,
	     |	МАКСИМУМ(ПоступлениеТоваровУслуг.Ссылка) КАК Ссылка,
	     |	Таблица.ПризнакЭтоУПД,
	     |	Таблица.ПризнакЭтоСФ,
	     |	Таблица.ПризнакЭтоАктНакладная
	     |ИЗ
	     |	РегистрСведений.ФайлыПрикрепленныеАвтоматически КАК Таблица
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	     |		ПО Таблица.Организация = ПоступлениеТоваровУслуг.Организация
	     |			И Таблица.Контрагент = ПоступлениеТоваровУслуг.Контрагент
	     |			И (ПоступлениеТоваровУслуг.Проведен)
	     |			И (ВЫБОР
	     |				КОГДА (Таблица.ПризнакЭтоУПД
	     |						ИЛИ Таблица.ПризнакЭтоСФ)
	     |						И Таблица.СФ_Номер = ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры
	     |						И Таблица.СФ_Дата = ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры
	     |					ТОГДА ИСТИНА
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.АктНакладная_Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	     |						И Таблица.АктНакладная_Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |ГДЕ
	     |	НЕ Таблица.Объект.Ссылка ЕСТЬ NULL 
	     |	И НЕ Таблица.Организация.Ссылка ЕСТЬ NULL 
	     |	И НЕ Таблица.Контрагент.Ссылка ЕСТЬ NULL 
	     |	И (ВЫБОР
	     |				КОГДА (Таблица.ПризнакЭтоУПД
	     |						ИЛИ Таблица.ПризнакЭтоСФ)
	     |						И Таблица.СФ_Номер <> """"
	     |						И Таблица.СФ_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.АктНакладная_Номер <> """"
	     |						И Таблица.АктНакладная_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |	И (ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоУПД
	     |						И Таблица.Объект.УПД.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоСФ
	     |						И Таблица.Объект.СчетФактура.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.Объект.Акт.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Объект,
	     |	Таблица.Файл,
	     |	Таблица.ПризнакЭтоУПД,
	     |	Таблица.ПризнакЭтоСФ,
	     |	Таблица.ПризнакЭтоАктНакладная,
	     |	Таблица.Файл.Наименование
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Таблица.Объект,
	     |	Таблица.Файл,
	     |	Таблица.Файл.Наименование,
	     |	МАКСИМУМ(ПоступлениеДопРасходов.Ссылка),
	     |	Таблица.ПризнакЭтоУПД,
	     |	Таблица.ПризнакЭтоСФ,
	     |	Таблица.ПризнакЭтоАктНакладная
	     |ИЗ
	     |	РегистрСведений.ФайлыПрикрепленныеАвтоматически КАК Таблица
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	     |		ПО Таблица.Организация = ПоступлениеДопРасходов.Организация
	     |			И Таблица.Контрагент = ПоступлениеДопРасходов.Контрагент
	     |			И (ПоступлениеДопРасходов.Проведен)
	     |			И (ВЫБОР
	     |				КОГДА (Таблица.ПризнакЭтоУПД
	     |						ИЛИ Таблица.ПризнакЭтоСФ)
	     |						И Таблица.СФ_Номер = ПоступлениеДопРасходов.НомерВходящегоСчетаФактуры
	     |						И Таблица.СФ_Дата = ПоступлениеДопРасходов.ДатаВходящегоСчетаФактуры
	     |					ТОГДА ИСТИНА
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.АктНакладная_Номер = ПоступлениеДопРасходов.НомерВходящегоДокумента
	     |						И Таблица.АктНакладная_Дата = ПоступлениеДопРасходов.ДатаВходящегоДокумента
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |ГДЕ
	     |	НЕ Таблица.Объект.Ссылка ЕСТЬ NULL 
	     |	И НЕ Таблица.Организация.Ссылка ЕСТЬ NULL 
	     |	И НЕ Таблица.Контрагент.Ссылка ЕСТЬ NULL 
	     |	И (ВЫБОР
	     |				КОГДА (Таблица.ПризнакЭтоУПД
	     |						ИЛИ Таблица.ПризнакЭтоСФ)
	     |						И Таблица.СФ_Номер <> """"
	     |						И Таблица.СФ_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.АктНакладная_Номер <> """"
	     |						И Таблица.АктНакладная_Дата <> ДАТАВРЕМЯ(1, 1, 1)
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |	И (ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоУПД
	     |						И Таблица.Объект.УПД.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоСФ
	     |						И Таблица.Объект.СчетФактура.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ
	     |			ИЛИ ВЫБОР
	     |				КОГДА Таблица.ПризнакЭтоАктНакладная
	     |						И Таблица.Объект.Акт.Ссылка ЕСТЬ NULL 
	     |					ТОГДА ИСТИНА
	     |				ИНАЧЕ ЛОЖЬ
	     |			КОНЕЦ)
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Объект,
	     |	Таблица.Файл,
	     |	Таблица.ПризнакЭтоУПД,
	     |	Таблица.ПризнакЭтоСФ,
	     |	Таблица.ПризнакЭтоАктНакладная,
	     |	Таблица.Файл.Наименование
	     |
	     |ДЛЯ ИЗМЕНЕНИЯ
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ФайлНаименование
	     |ИТОГИ ПО
	     |	Объект";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Объект.ПолучитьОбъект();
		
		//
		ВыборкаДЗ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДЗ.Следующий() Цикл
			
			//
			Если ВыборкаДЗ.ПризнакЭтоУПД И НЕ ЗначениеЗаполнено(ДокументОбъект.УПД) Тогда
				ДокументОбъект.УПД = ВыборкаДЗ.Файл;
			КонецЕсли;
			
			//
			Если ВыборкаДЗ.ПризнакЭтоСФ И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетФактура) Тогда
				ДокументОбъект.СчетФактура = ВыборкаДЗ.Файл;
			КонецЕсли;	
			
			//
			Если ВыборкаДЗ.ПризнакЭтоАктНакладная И НЕ ЗначениеЗаполнено(ДокументОбъект.Акт) Тогда
				ДокументОбъект.Акт = ВыборкаДЗ.Файл;
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрикрепитьВсеНеприкрепленное(Команда)
	
	//
	ПрикрепитьВсеНеприкрепленноеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТолькоПроблемы(Команда)
	
	//
	Элементы.ФормаОтборТолькоПроблемы.Пометка = НЕ Элементы.ФормаОтборТолькоПроблемы.Пометка;
	
	//
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоПроблемы", Элементы.ФормаОтборТолькоПроблемы.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	HTMLПредпросмотр = "<HTML></HTML>";
	
	//
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоПроблемы", ЛОЖЬ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуПросмотра(Команда)
	
	//
	Элементы.КомандаОткрытьФормуПросмотра.Пометка = НЕ Элементы.КомандаОткрытьФормуПросмотра.Пометка;
	
	//
	Форма = ПолучитьФорму("ВнешняяОбработка.АК_ФайлыПрикрепленныеАвтоматическиПостОбработка.Форма.ФормаПредпросмотра",, ЭтаФорма, "111", ВариантОткрытияОкна.ОтдельноеОкно);
	Если НЕ Форма.Открыта() Тогда
		
		//
		Форма.Открыть();
		
		//
		ТекущаСтрока = Элементы.Список.ТекущиеДанные;
		Если ТекущаСтрока <> Неопределено Тогда
			Оповестить("ТекстHTML", ТекущаСтрока);
		КонецЕсли;
		
	Иначе	
		Форма.Закрыть();
	КонецЕсли;	
	
	
	//ОткрытьФорму("ВнешняяОбработка.АК_ФайлыПрикрепленныеАвтоматическиПостОбработка.Форма.ФормаПредпросмотра",, ЭтаФорма, "111", ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLПредпросмотрДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
