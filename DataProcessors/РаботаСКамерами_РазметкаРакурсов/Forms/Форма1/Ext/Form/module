
/////////////////////////////////////////////

//
Процедура СинхронизироватьПризнаки()
	
	//
	Если Ракурсы.Количество() > 0 Тогда
		
		//
		ЭлементыФормы.Камеры.ТекущаяСтрока.ПризнакПривязан = Ракурсы[0].ПризнакПривязан;
		ЭлементыФормы.Камеры.ТекущаяСтрока.ПризнакРазмечен = Ракурсы[0].ПризнакРазмечен;
		
	КонецЕсли;	
	
КонецПроцедуры	

//
//
Процедура ЗаполнитьКамеры(Камера = Неопределено);
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	Таблица.Ссылка КАК Камера,
	     |	ПривязкаКОбъектам.Магазин КАК Магазин,
	     |	ПривязкаКОбъектам.Магазин.Наименование КАК МагазинНаименование,
	     |	МАКСИМУМ(ВЫБОР
	     |			КОГДА ЕСТЬNULL(ПривязкаКОбъектам.X3, 0) <> 0
	     |					И ЕСТЬNULL(ПривязкаКОбъектам.Y3, 0) <> 0
	     |				ТОГДА ИСТИНА
	     |			ИНАЧЕ ЛОЖЬ
	     |		КОНЕЦ) КАК ПризнакРазмечен,
	     |	МАКСИМУМ(ВЫБОР
	     |			КОГДА НЕ ПривязкаКОбъектам.ОбъектНаблюдения.Ссылка ЕСТЬ NULL
	     |					И ПривязкаКОбъектам.ОбъектНаблюдения <> НЕОПРЕДЕЛЕНО
	     |				ТОГДА ИСТИНА
	     |			ИНАЧЕ ЛОЖЬ
	     |		КОНЕЦ) КАК ПризнакПривязан
	     |ИЗ
	     |	Справочник.АК_ID_Камеры КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних КАК ПривязкаКОбъектам
	     |		ПО Таблица.Ссылка = ПривязкаКОбъектам.IDКамеры
	     |			И (ПривязкаКОбъектам.ДатаПо = ДАТАВРЕМЯ(1, 1, 1))
	     |ГДЕ
	     |	НЕ Таблица.ПометкаУдаления
	     |	И НЕ ПривязкаКОбъектам.Магазин.Ссылка ЕСТЬ NULL
	     |{ГДЕ
	     |	Таблица.Ссылка.* КАК Камера,
	     |	ПривязкаКОбъектам.Магазин.* КАК Магазин}
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Ссылка,
	     |	ПривязкаКОбъектам.Магазин,
	     |	ПривязкаКОбъектам.Магазин.Наименование
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	МагазинНаименование,
	     |	Камера,
	     |	ПризнакПривязан УБЫВ,
	     |	ПризнакРазмечен УБЫВ";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	Если ЗначениеЗаполнено(Камера) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("Камера", Камера);
		ЭлементОтбора.Установить(Камера);
		
	КонецЕсли;	
	
	//
	ПЗ.Выполнить();
	
	//
	Камеры.Загрузить(ПЗ.Результат.Выгрузить());
	
КонецПроцедуры	

//
//
Процедура ЗаполнитьРакурсы(Камера, Магазин)
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	&Камера КАК Камера,
	     |	&Магазин КАК Магазин,
	     |	Таблица.Ссылка КАК Ракурс,
	     |	Таблица.Наименование КАК РакурсНаименование,
	     |	ЕСТЬNULL(ПривязкаКОбъектам.Терминал, 0) + 1 КАК Индекс,
	     |	ПривязкаКОбъектам.X1,
	     |	ПривязкаКОбъектам.X2,
	     |	ПривязкаКОбъектам.X3,
	     |	ПривязкаКОбъектам.X4,
	     |	ПривязкаКОбъектам.Y1,
	     |	ПривязкаКОбъектам.Y2,
	     |	ПривязкаКОбъектам.Y3,
	     |	ПривязкаКОбъектам.Y4,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(ПривязкаКОбъектам.X3, 0) <> 0
	     |				И ЕСТЬNULL(ПривязкаКОбъектам.Y3, 0) <> 0
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК ПризнакРазмечен,
	     |	ВЫБОР
	     |		КОГДА НЕ ПривязкаКОбъектам.ОбъектНаблюдения.Ссылка ЕСТЬ NULL
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК ПризнакПривязан,
	     |	ВЫБОР
	     |		КОГДА НЕ ПривязкаКОбъектам.ОбъектНаблюдения.Ссылка ЕСТЬ NULL
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК ТолькоПросмотр
	     |ИЗ
	     |	Справочник.МП_Ракурсы КАК Таблица
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних(, IDКамеры = &Камера) КАК ПривязкаКОбъектам
	     |		ПО Таблица.Ссылка = ПривязкаКОбъектам.ОбъектНаблюдения
	     |			И (ПривязкаКОбъектам.ДатаПо = ДАТАВРЕМЯ(1, 1, 1))
	     |ГДЕ
	     |	НЕ Таблица.ПометкаУдаления
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	&Камера,
	     |	&Магазин,
	     |	Таблица.Ссылка,
	     |	Таблица.Наименование,
	     |	0,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	NULL,
	     |	ЛОЖЬ,
	     |	ЛОЖЬ,
	     |	ЛОЖЬ
	     |ИЗ
	     |	Справочник.МП_Ракурсы КАК Таблица
	     |ГДЕ
	     |	НЕ Таблица.ПометкаУдаления";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Камера", Камера);
	ПЗ.Параметры.Вставить("Магазин", Магазин);
	
	//
	ПЗ.Выполнить();
	
	//
	ТЗ = ПЗ.Результат.Выгрузить();
	
	//
	ТЗ_Копия = ТЗ.Скопировать();
	ТЗ_Копия.Свернуть("Ракурс");
	
	//
	Для Каждого СтрокаТЗ Из ТЗ_Копия Цикл
		
		//
		СП = Новый Структура;
		СП.Вставить("Ракурс", СтрокаТЗ.Ракурс);
		
		//
		ИндексМАКС = 0;
		
		//
		НайденныеСтроки = ТЗ.НайтиСтроки(СП);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			ИндексМАКС = МАКС(ИндексМАКС, НайденнаяСтрока.Индекс);
			Если НайденнаяСтрока.Индекс = 0 Тогда
				
				//
				НайденнаяСтрока.Индекс = ИндексМАКС + 1;
				ИндексМАКС = НайденнаяСтрока.Индекс;
				
			КонецЕсли;	
				
		КонецЦикла;	
		
	КонецЦикла;	
	 
	//
	ТЗ.Сортировать("ПризнакРазмечен УБЫВ, ПризнакПривязан УБЫВ, РакурсНаименование, Индекс");
	
	//
	Ракурсы.Загрузить(ТЗ);
	
	//
	СП = Новый Структура;
	СП.Вставить("Ракурс", ТекущийОбъектНаблюдения);
	СП.Вставить("Индекс", ТекущийИндекс);
	
	//
	НайденныеСтроки = Ракурсы.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементыФормы.Ракурсы.ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////

//
//
Функция ПолучитьСтруктураImageAreas(X1, X2, X3, X4, Y1, Y2, Y3, Y4)
	
	//
	img_TOP = ЭлементыФормы.ПолеHTMLДокумента.Документ.getElementById("img-container").clientTop;
	img_LEFT = ЭлементыФормы.ПолеHTMLДокумента.Документ.getElementById("img-container").clientLeft;
	
	//
	img_WIDTH = ЭлементыФормы.ПолеHTMLДокумента.Документ.getElementById("img-container").clientWidth;
	img_HEIGHT = ЭлементыФормы.ПолеHTMLДокумента.Документ.getElementById("img-container").clientHeight;
	
	//
	img_X = img_WIDTH * X1; 
	img_Y = img_HEIGHT * Y1;
	
	//
	img_WIDTH =  (img_WIDTH * X2 - img_X);
	img_HEIGHT =  (img_HEIGHT * Y4 - img_Y);
	
	//
	СтруктураКоординат = Новый Структура;
	СтруктураКоординат.Вставить("x", img_X);
	СтруктураКоординат.Вставить("y", img_Y);
	СтруктураКоординат.Вставить("width", img_WIDTH);
	СтруктураКоординат.Вставить("height", img_HEIGHT);
	СтруктураКоординат.Вставить("img_top", img_TOP);
	СтруктураКоординат.Вставить("img_left",  img_LEFT);
	СтруктураКоординат.Вставить("rr", 1);
	
	//
	СтруктураКоординат.Вставить("X1", X1);
	СтруктураКоординат.Вставить("Y1", Y1);
	СтруктураКоординат.Вставить("X2", X2);
	СтруктураКоординат.Вставить("Y4", Y4);
	
	//
	Возврат СтруктураКоординат;
	
КонецФункции

////////////////////////////////////////////

//
//
Процедура УстановитьТекстHTML(ИмяФайла, СтруктураImageAreas = Неопределено, ТолькоПросмотр = Ложь)
	
	//
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ТекстHTML = "<html></html>";	
		Возврат;
	КонецЕсли;	
	
	//
	ТекстHTML = ПолучитьМакет("МакетHTML1").ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML, "&file", "'" + ИмяФайла + "'");
	
	//
	Если СтруктураImageAreas <> Неопределено Тогда
		
		//
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		//
		ЗаписатьJSON(ЗаписьJSON, СтруктураImageAreas);
		
		//
		ТекстJSON = ЗаписьJSON.Закрыть();
		
		//
		Если ТолькоПросмотр Тогда
			ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = false;
		Иначе	
			ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = true;
		КонецЕсли;	
		
		//
		ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.drawMyArea(ТекстJSON);
		
	Иначе
		
		//
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстHTML);
				
	КонецЕсли;	
	
КонецПроцедуры

//
//
Процедура ПолеHTMLДокумента_onclick(Элемент, pEvtObj)
	
	//
	ДанныеВыделения = pEvtObj.data;

	//
	Если НЕ ЗначениеЗаполнено(ДанныеВыделения) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(ДанныеВыделения);
	
	//
	Структура = ПрочитатьJSON(ЧтениеJSON);
	
	//
	СтруктураКоординат = Новый Структура;
	СтруктураКоординат.Вставить("X1", Структура.X);
	СтруктураКоординат.Вставить("X2", СтруктураКоординат.X1 + Структура.width);
	СтруктураКоординат.Вставить("X3", СтруктураКоординат.X2);
	СтруктураКоординат.Вставить("X4", СтруктураКоординат.X1);
	СтруктураКоординат.Вставить("Y1", Структура.Y);
	СтруктураКоординат.Вставить("Y2", СтруктураКоординат.Y1);
	СтруктураКоординат.Вставить("Y3", СтруктураКоординат.Y2 + Структура.height);
	СтруктураКоординат.Вставить("Y4", СтруктураКоординат.Y3);
	
	//
	СтруктураКоординат.Вставить("width", Структура.width);
	СтруктураКоординат.Вставить("height", Структура.height);
	
	//
	СтруктураКоординат.Вставить("image_left", Структура.img_left);
	СтруктураКоординат.Вставить("image_top", Структура.img_top);
	СтруктураКоординат.Вставить("image_bottom", Структура.img_bottom);
	СтруктураКоординат.Вставить("image_right", Структура.img_right);
	
	//
	ШиринаИзображения = (СтруктураКоординат.image_right - СтруктураКоординат.image_left);
	ВысотаИзображения = (СтруктураКоординат.image_bottom - СтруктураКоординат.image_top);
	
	//
	X1 = СтруктураКоординат.X1/ШиринаИзображения;
	X2 = СтруктураКоординат.X2/ШиринаИзображения;
	X3 = СтруктураКоординат.X3/ШиринаИзображения;
	X4 = СтруктураКоординат.X4/ШиринаИзображения;
	
	//
	Y1 = СтруктураКоординат.Y1/ВысотаИзображения;
	Y2 = СтруктураКоординат.Y2/ВысотаИзображения;
	Y3 = СтруктураКоординат.Y3/ВысотаИзображения;
	Y4 = СтруктураКоординат.Y4/ВысотаИзображения;
	
	//
	ВладелецФормы = ЭтаФорма;
	Если ВладелецФормы <> Неопределено Тогда
		
		//
		СП = Новый Структура;
		СП.Вставить("Камера", ТекущаяКамера);
		СП.Вставить("Ракурс", ТекущийОбъектНаблюдения);
		СП.Вставить("Индекс", ТекущийИндекс);
		
		//
		НайденныеСтроки = Ракурсы.НайтиСтроки(СП);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			НайденнаяСтрока.ПризнакРазмечен = (ЗначениеЗаполнено(X4) И ЗначениеЗаполнено(Y4));
			
			//
			НайденнаяСтрока.X1 = X1;
			НайденнаяСтрока.X2 = X2;
			НайденнаяСтрока.X3 = X3;
			НайденнаяСтрока.X4 = X4;
			
			//
			НайденнаяСтрока.Y1 = Y1;
			НайденнаяСтрока.Y2 = Y2;
			НайденнаяСтрока.Y3 = Y3;
			НайденнаяСтрока.Y4 = Y4;
			
			//
			Если НайденнаяСтрока.ПризнакРазмечен Тогда
			
				//
				ТЗ = "ВЫБРАТЬ
				     |	Таблица.Период,
				     |	Таблица.ОбъектНаблюдения,
				     |	Таблица.IDКамеры,
				     |	Таблица.Терминал,
				     |	Таблица.АктивностьЗаписи,
				     |	Таблица.Магазин,
				     |	Таблица.ДатаПо,
				     |	Таблица.X1,
				     |	Таблица.X4,
				     |	Таблица.X2,
				     |	Таблица.X3,
				     |	Таблица.Y1,
				     |	Таблица.Y2,
				     |	Таблица.Y3,
				     |	Таблица.Y4,
				     |	Таблица.cash_num
				     |ИЗ
				     |	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних(
				     |			,
				     |			IDКамеры = &Камера
				     |				И ОбъектНаблюдения = &Ракурс
				     |				И Терминал = &Терминал) КАК Таблица";
				
				
				//
				ПЗ = Новый ПостроительЗапроса;
				ПЗ.Текст = ТЗ;
				
				//
				ПЗ.Параметры.Вставить("Камера", НайденнаяСтрока.Камера);
				ПЗ.Параметры.Вставить("Ракурс", НайденнаяСтрока.Ракурс);
				ПЗ.Параметры.Вставить("Терминал", МАКС(0, НайденнаяСтрока.Индекс - 1));
				
				//
				ПЗ.Выполнить();
				
				//
				Если НЕ ПЗ.Результат.Пустой() Тогда
					
					//
					НЗ = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьНаборЗаписей();
					НЗ.Отбор.IDКамеры.Установить(НайденнаяСтрока.Камера);
					НЗ.Отбор.ОбъектНаблюдения.Установить(НайденнаяСтрока.Ракурс);
					НЗ.Отбор.Терминал.Установить(МАКС(0, НайденнаяСтрока.Индекс - 1));
				
					//
					Выборка = ПЗ.Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						//
						НоваяЗапись = НЗ.Добавить();
						
						//
						ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
						
						//
						ЗаполнитьЗначенияСвойств(НоваяЗапись, НайденнаяСтрока);
						
					КонецЦикла;	
					
					//
					Попытка
						
						//
						НЗ.Записать();
						
						//
						НайденнаяСтрока.ПризнакПривязан = Истина;
						ЭлементыФормы.Ракурсы.ОбновитьСтроки();
						
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				Иначе	
					
					//
					НЗ = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьНаборЗаписей();
					НЗ.Отбор.IDКамеры.Установить(НайденнаяСтрока.Камера);
					НЗ.Отбор.ОбъектНаблюдения.Установить(НайденнаяСтрока.Ракурс);
					НЗ.Отбор.Терминал.Установить(МАКС(0, НайденнаяСтрока.Индекс - 1));
					
					//
					НоваяЗапись = НЗ.Добавить();
					
					//
					НоваяЗапись.Период = ТекущаяДата();
					НоваяЗапись.IDКамеры = НайденнаяСтрока.Камера;
					НоваяЗапись.ОбъектНаблюдения = НайденнаяСтрока.Ракурс;
					НоваяЗапись.Терминал = МАКС(0, НайденнаяСтрока.Индекс - 1);
					
					//
					НоваяЗапись.Магазин = НайденнаяСтрока.Магазин;
					
					//
					ЗаполнитьЗначенияСвойств(НоваяЗапись, НайденнаяСтрока);
					
					//
					Попытка
						
						//
						НЗ.Записать();
						
						//
						НайденнаяСтрока.ПризнакПривязан = Истина;
						ЭлементыФормы.Ракурсы.ОбновитьСтроки();
						
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;	
				
			Иначе
				
				//
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		//Ракурсы.Сортировать("ПризнакПривязан Убыв, ПризнакРазмечен Убыв, РакурсНаименование, Индекс");
		ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
		СинхронизироватьПризнаки();
		
		//
		СтруктураКоординат = ПолучитьСтруктураImageAreas(X1, X2, X3, X4, Y1, Y2, Y3, Y4);
		
		//
		УстановитьТекстHTML(ПутьКИзображению, СтруктураКоординат);
		
	Иначе
	
		//
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.ОбъектНаблюдения
		     |ИЗ
		     |	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения КАК Таблица
		     |ГДЕ
		     |	Таблица.IDКамеры = &ТекущаяКамера";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("ТекущаяКамера", ТекущаяКамера);
		
		//
		ПЗ.Выполнить();
		
		//
		Если НЕ ПЗ.Результат.Пустой() Тогда
		
			//
			ФормаСписка = ПолучитьФорму("РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.Форма.ФормаСпискаУпр", ПараметрыФормы);
		
			//
			ФормаСписка.ОтборКамера = ТекущаяКамера;
		    ФормаСписка.ПризнакНеИгнорироватьПустыеОбъектыНаблюдения = Истина;
			
			//
			ФормаСписка.X1 = X1;
			ФормаСписка.X2 = X2;
			ФормаСписка.X3 = X3;
			ФормаСписка.X4 = X4;
			
			//
			ФормаСписка.Y1 = Y1;
			ФормаСписка.Y2 = Y2;
			ФормаСписка.Y3 = Y3;
			ФормаСписка.Y4 = Y4;
			
			//
			ЗначениеВыбора = ФормаСписка.ОткрытьМодально();
			
		Иначе
			
			//
			ЗначениеВыбора = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();
			
			//
			ЗначениеВыбора.Период = ТекущаяДата();
			ЗначениеВыбора.IDКамеры = ТекущаяКамера;
			
		КонецЕсли;	
		
		//
		Если ЗначениеВыбора <> Неопределено Тогда
			
			
			//
			Форма = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.ПолучитьФорму("ФормаЗаписи",,ЗначениеВыбора);  
			
			//
			Форма.РегистрСведенийМенеджерЗаписи = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();
			
			//
			ЗаполнитьЗначенияСвойств(Форма.РегистрСведенийМенеджерЗаписи, ЗначениеВыбора);
			Форма.РегистрСведенийМенеджерЗаписи.Прочитать();
			
			//
			Форма.РегистрСведенийМенеджерЗаписи.IDКамеры = ТекущаяКамера;
			Форма.РегистрСведенийМенеджерЗаписи.ОбъектНаблюдения = ЗначениеВыбора.ОбъектНаблюдения;
			
			//
			Если НЕ ЗначениеЗаполнено(Форма.РегистрСведенийМенеджерЗаписи.ОбъектНаблюдения) Тогда
				Форма.РегистрСведенийМенеджерЗаписи.ОбъектНаблюдения = Справочники.МП_Ракурсы.ПустаяСсылка();
			КонецЕсли;	
			
			//
			Форма.РегистрСведенийМенеджерЗаписи.X1 = X1;
			Форма.РегистрСведенийМенеджерЗаписи.X2 = X2;
			Форма.РегистрСведенийМенеджерЗаписи.X3 = X3;
			Форма.РегистрСведенийМенеджерЗаписи.X4 = X4;
			
			//
			Форма.РегистрСведенийМенеджерЗаписи.Y1 = Y1;
			Форма.РегистрСведенийМенеджерЗаписи.Y2 = Y2;
			Форма.РегистрСведенийМенеджерЗаписи.Y3 = Y3;
			Форма.РегистрСведенийМенеджерЗаписи.Y4 = Y4;
			
			//
			_Результат = Форма.ОткрытьМодально();
			
		КонецЕсли;	
		
		//
		УстановитьТекстHTML(ПутьКИзображению);
		
	КонецЕсли;	
	
КонецПроцедуры

//
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

////////////////////////////////////////////

//
//
Процедура КамерыПриАктивизацииСтроки(Элемент)
	
	//
	Ракурсы.Очистить();
	
	//
	ТекущийОбъектНаблюдения = Неопределено;
	ТекущийИндекс = 0;
	
	//
	ТекущаяСтрока = ЭлементыФормы.Камеры.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ТекущийМагазин = ТекущаяСтрока.Магазин; 
	ТекущаяКамера = ТекущаяСтрока.Камера; 
	
	//
	Если ЗначениеЗаполнено(ТекущаяКамера) Тогда
		//+++АК ЛЕБВ ПутьКИзображению = "http://10.0.0.190/photos/" + ТекущаяКамера.IDКамеры;
		ПутьКИзображению = "file://10.0.0.51/1c$/MagazinBudush/Work/" + СтрЗаменить(СокрЛП(ТекущаяКамера.IDКамеры),".","-") + ".jpg";
		//---АК ЛЕБВ
	Иначе
		ПутьКИзображению = "";
	КонецЕсли;
	
	//
	УстановитьТекстHTML(ПутьКИзображению);
	
КонецПроцедуры

//
//
Процедура РакурсыПриАктивизацииСтроки()
	
	//
	ТекущаяСтрока = ЭлементыФормы.Ракурсы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ЭлементыФормы.ПолеHTMLДокумента.Документ.scripts.length = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Если (ЭлементыФормы.ПолеHTMLДокумента.Документ.readyState = "complete") Тогда
		
		//
		ТекущийОбъектНаблюдения = ТекущаяСтрока.Ракурс; 
		ТекущийИндекс = ТекущаяСтрока.Индекс;
		
		//
		Если ЗначениеЗаполнено(ТекущаяКамера) Тогда
			//+++АК ЛЕБВ ПутьКИзображению = "http://10.0.0.190/photos/" + ТекущаяКамера.IDКамеры;
			ПутьКИзображению = "file://10.0.0.51/1c$/MagazinBudush/Work/" + СтрЗаменить(СокрЛП(ТекущаяКамера.IDКамеры),".","-") + ".jpg";
			//---АК ЛЕБВ
		Иначе
			ПутьКИзображению = "";
		КонецЕсли;	
		
		//
		СтруктураImageAreas = Неопределено;
		Если ТекущаяСтрока.ПризнакРазмечен Тогда
			
			//
			СтруктураImageAreas = ПолучитьСтруктураImageAreas(ТекущаяСтрока.X1, ТекущаяСтрока.X2, ТекущаяСтрока.X3, ТекущаяСтрока.X4, ТекущаяСтрока.Y1, ТекущаяСтрока.Y2, ТекущаяСтрока.Y3, ТекущаяСтрока.Y4);
			УстановитьТекстHTML(ПутьКИзображению, СтруктураImageAreas, ТекущаяСтрока.ТолькоПросмотр);
			
		Иначе
			
			//
			Если ТекущаяСтрока.ТолькоПросмотр Тогда
				ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = false;
			Иначе	
				ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = true;
			КонецЕсли;	
			
			//
			ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.killMyArea();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура РакурсыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		//
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		//
		Если НЕ ДанныеСтроки.ПризнакПривязан Тогда
			
			//
			ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоСерый;
			
			//
			ОформлениеСтроки.Ячейки.Привязка.УстановитьТекст("+");
			ОформлениеСтроки.Ячейки.Привязка.Выравнивание = ГоризонтальноеПоложение.Центр;
			
		КонецЕсли;	
		
		//
		Если ДанныеСтроки.ПризнакРазмечен Тогда
			ОформлениеСтроки.Ячейки.Ракурс.Шрифт = Новый Шрифт(ОформлениеСтроки.Ячейки.Ракурс.Шрифт,,,Истина);
		КонецЕсли;
		
		//
		ОформлениеСтроки.Ячейки.Привязка.ОтображатьКартинку = ДанныеСтроки.ПризнакПривязан;
		ОформлениеСтроки.Ячейки.Привязка.ИндексКартинки = 0;
		
		//
		ОформлениеСтроки.Ячейки.Отступ.ОтображатьТекст = Ложь;
		
		//
		ОформлениеСтроки.Ячейки.Отступ.ОтображатьКартинку = ДанныеСтроки.ПризнакПривязан;
		Если ДанныеСтроки.ТолькоПросмотр Тогда
			ОформлениеСтроки.Ячейки.Отступ.ИндексКартинки = 1;
		Иначе	
			ОформлениеСтроки.Ячейки.Отступ.ИндексКартинки = 0;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

//
//
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	//
	ТекущаяСтрока = ЭлементыФормы.Ракурсы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		
		//
		ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
		Если Ракурсы.Количество() > 0 Тогда
			
			//
			ЭлементыФормы.Ракурсы.ТекущаяСтрока = Ракурсы[0];
			ПодключитьОбработчикОжидания("РакурсыПриАктивизацииСтроки", 0.1, Истина);
			
		КонецЕсли;	
		
		//
		Возврат;
		
	КонецЕсли;
	
	//
	Если ТекущийОбъектНаблюдения = ТекущаяСтрока.Ракурс И ТекущийИндекс = ТекущаяСтрока.Индекс Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Если Ракурсы.Количество() > 0 Тогда
		
		//
		ЭлементыФормы.Ракурсы.ТекущаяСтрока = Ракурсы[0];
		
		//
		РакурсыПриАктивизацииСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура РакурсыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//
	Если Колонка.Имя = "Индекс" Тогда
		
		//
		_ТекущийИндекс = МАКС(0, ВыбраннаяСтрока.Индекс - 1);
		
		//
		НовыйИндекс = _ТекущийИндекс + 1;
		Если ВвестиЗначение(НовыйИндекс, "Номер") Тогда
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.Период,
			     |	Таблица.ОбъектНаблюдения,
			     |	Таблица.IDКамеры,
			     |	Таблица.Терминал,
			     |	Таблица.АктивностьЗаписи,
			     |	Таблица.Магазин,
			     |	Таблица.ДатаПо,
			     |	Таблица.X1,
			     |	Таблица.X2,
			     |	Таблица.X3,
			     |	Таблица.X4,
			     |	Таблица.Y1,
			     |	Таблица.Y2,
			     |	Таблица.Y3,
			     |	Таблица.Y4,
			     |	Таблица.cash_num
			     |ИЗ
			     |	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних КАК Таблица
			     |ГДЕ
			     |	Таблица.IDКамеры = &IDКамеры
			     |	И Таблица.ОбъектНаблюдения = &ОбъектНаблюдения
			     |	И Таблица.Терминал = &НовыйИндекс
			     |";
			
			//
			ПЗ = Новый ПостроительЗапроса;
			ПЗ.Текст = ТЗ;
			
			//
			ПЗ.Параметры.Вставить("IDКамеры", ТекущаяКамера); 
			ПЗ.Параметры.Вставить("ОбъектНаблюдения", ТекущийОбъектНаблюдения);
			ПЗ.Параметры.Вставить("НовыйИндекс", МАКС(0, НовыйИндекс - 1));
			
			//
			ПЗ.Выполнить();
			
			//
			Выборка = ПЗ.Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Предупреждение("Ракурс с Номером: " +  НовыйИндекс + " уже зарегистрирован");
				Возврат;
			КонецЕсли;
			
			//
			ВыбраннаяСтрока.Индекс = НовыйИндекс;
			ТекущийИндекс = ВыбраннаяСтрока.Индекс;
			
			//
			НовыйИндекс = МАКС(0, НовыйИндекс - 1);
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.Период,
			     |	Таблица.ОбъектНаблюдения,
			     |	Таблица.IDКамеры,
			     |	Таблица.Терминал,
			     |	Таблица.АктивностьЗаписи,
			     |	Таблица.Магазин,
			     |	Таблица.ДатаПо,
			     |	Таблица.X1,
			     |	Таблица.X2,
			     |	Таблица.X3,
			     |	Таблица.X4,
			     |	Таблица.Y1,
			     |	Таблица.Y2,
			     |	Таблица.Y3,
			     |	Таблица.Y4,
			     |	Таблица.cash_num
			     |ИЗ
			     |	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних КАК Таблица
			     |ГДЕ
			     |	Таблица.IDКамеры = &IDКамеры
			     |	И Таблица.ОбъектНаблюдения = &ОбъектНаблюдения
			     |	И Таблица.Терминал = &ТекущийИндекс
			     |	И Таблица.Терминал <> &НовыйИндекс";
			
			//
			ПЗ = Новый ПостроительЗапроса;
			ПЗ.Текст = ТЗ;
			
			//
			ПЗ.Параметры.Вставить("IDКамеры", ТекущаяКамера); 
			ПЗ.Параметры.Вставить("ОбъектНаблюдения", ТекущийОбъектНаблюдения);
			ПЗ.Параметры.Вставить("ТекущийИндекс", _ТекущийИндекс);
			ПЗ.Параметры.Вставить("НовыйИндекс", НовыйИндекс);
			
			//
			ПЗ.Выполнить();
			
			//
			Выборка = ПЗ.Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				
				//
				МЗ = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МЗ, Выборка);
				
				//
				МЗ.Прочитать();
				
				//
				ЗаполнитьЗначенияСвойств(МЗ, Выборка);
				
				//
				МЗ.Терминал = НовыйИндекс;
				
				//
				Попытка
					
					//
					МЗ.Записать();
					
					//
					ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
					СинхронизироватьПризнаки();
					
				Исключение
				КонецПопытки;	
				
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли Колонка.Имя = "Отступ" Тогда
		
		//
		Если ВыбраннаяСтрока.ПризнакПривязан Тогда
			ВыбраннаяСтрока.ТолькоПросмотр = НЕ ВыбраннаяСтрока.ТолькоПросмотр;
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(ТекущаяКамера) Тогда
			//+++АК ЛЕБВ ПутьКИзображению = "http://10.0.0.190/photos/" + ТекущаяКамера.IDКамеры;
			ПутьКИзображению = "file://10.0.0.51/1c$/MagazinBudush/Work/" + СтрЗаменить(СокрЛП(ТекущаяКамера.IDКамеры),".","-") + ".jpg";
			//---АК ЛЕБВ
		Иначе
			ПутьКИзображению = "";
		КонецЕсли;	
		
		//
		СтруктураImageAreas = Неопределено;
		Если ВыбраннаяСтрока.ПризнакРазмечен Тогда
			
			//
			СтруктураImageAreas = ПолучитьСтруктураImageAreas(ВыбраннаяСтрока.X1, ВыбраннаяСтрока.X2, ВыбраннаяСтрока.X3, ВыбраннаяСтрока.X4, ВыбраннаяСтрока.Y1, ВыбраннаяСтрока.Y2, ВыбраннаяСтрока.Y3, ВыбраннаяСтрока.Y4);
			УстановитьТекстHTML(ПутьКИзображению, СтруктураImageAreas, ВыбраннаяСтрока.ТолькоПросмотр);
			
		Иначе	
			
			//
			Если ВыбраннаяСтрока.ТолькоПросмотр Тогда
				ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = false;
			Иначе	
				ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.editable = true;
			КонецЕсли;
			
			//
			ЭлементыФормы.ПолеHTMLДокумента.Документ.parentWindow.killMyArea();
			
		КонецЕсли;
		
	//	
	ИначеЕсли Колонка.Имя = "Привязка" Тогда	
		
		//
		Если НЕ ВыбраннаяСтрока.ПризнакПривязан Тогда
		
		    //
			МЗ = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, ВыбраннаяСтрока);
			
			//
			МЗ.Период = ТекущаяДата();
			МЗ.IDКамеры = ТекущаяКамера;
			МЗ.ОбъектНаблюдения = ТекущийОбъектНаблюдения;
			МЗ.Терминал = МАКС(0, ВыбраннаяСтрока.Индекс - 1);
			
			//
			Попытка
				
				//
				МЗ.Записать();
			
				//
				ВыбраннаяСтрока.ПризнакПривязан = Истина;
				ВыбраннаяСтрока.ТолькоПросмотр = Истина;
				
				//
				//Ракурсы.Сортировать("ПризнакПривязан Убыв, ПризнакРазмечен Убыв, РакурсНаименование");
				ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
				СинхронизироватьПризнаки();
				
			Исключение
			КонецПопытки;	
			
			//
			Возврат;
			
		КонецЕсли;
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.Период,
		     |	Таблица.ОбъектНаблюдения,
		     |	Таблица.IDКамеры,
		     |	Таблица.Терминал,
		     |	Таблица.АктивностьЗаписи,
		     |	Таблица.Магазин,
		     |	Таблица.ДатаПо,
		     |	Таблица.X1,
		     |	Таблица.X4,
		     |	Таблица.X2,
		     |	Таблица.X3,
		     |	Таблица.Y1,
		     |	Таблица.Y2,
		     |	Таблица.Y3,
		     |	Таблица.Y4,
		     |	Таблица.cash_num
		     |ИЗ
		     |	РегистрСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СрезПоследних(
		     |			,
		     |			IDКамеры = &Камера
		     |				И ОбъектНаблюдения = &Ракурс
		     |				И Терминал = &Терминал) КАК Таблица";
		
		
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Камера", ВыбраннаяСтрока.Камера);
		ПЗ.Параметры.Вставить("Ракурс", ВыбраннаяСтрока.Ракурс);
		ПЗ.Параметры.Вставить("Терминал", МАКС(0, ВыбраннаяСтрока.Индекс - 1));
		
		//
		ПЗ.Выполнить();
		
		//
		Если НЕ ПЗ.Результат.Пустой() Тогда
			
			//
			Выборка = ПЗ.Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				//
				МЗ = РегистрыСведений.АК_ПривязкаКамерыКОбъектуНаблюдения.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МЗ, Выборка);
				
				//
				Если ВыбраннаяСтрока.ПризнакРазмечен Тогда
				
					//
					МЗ.Прочитать();
					
					//
					ЗаполнитьЗначенияСвойств(МЗ, Выборка);
					
					//
					МЗ.X1 = 0;
					МЗ.X2 = 0;
					МЗ.X3 = 0;
					МЗ.X4 = 0;
					
					//
					МЗ.Y1 = 0;
					МЗ.Y2 = 0;
					МЗ.Y3 = 0;
					МЗ.Y4 = 0;
					
					//
					Попытка
						
						//
						МЗ.Записать();
						
						//
						ЗаполнитьЗначенияСвойств(ВыбраннаяСтрока, МЗ);
						
						//
						ВыбраннаяСтрока.ПризнакРазмечен = Ложь;
						ВыбраннаяСтрока.ТолькоПросмотр = Истина;
						
						//
						//Ракурсы.Сортировать("ПризнакПривязан Убыв, ПризнакРазмечен Убыв, РакурсНаименование");
						ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
						СинхронизироватьПризнаки();
						
					Исключение
					КонецПопытки;	
					
				ИначеЕсли ВыбраннаяСтрока.ПризнакПривязан Тогда
					
					//
					Попытка 
						
						//
						МЗ.Удалить();
						
						//
						ВыбраннаяСтрока.ПризнакПривязан = Ложь;
						ВыбраннаяСтрока.ПризнакРазмечен = Ложь;
						ВыбраннаяСтрока.ТолькоПросмотр = Ложь;
						
						//
						//Ракурсы.Сортировать("ПризнакПривязан Убыв, ПризнакРазмечен Убыв, РакурсНаименование");
						ЗаполнитьРакурсы(ТекущаяКамера, ТекущийМагазин);
						СинхронизироватьПризнаки();
						
					Исключение
					КонецПопытки;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

//
//
Процедура ПриОткрытии()
	
	//
	ЗаполнитьКамеры(ВыбраннаяКамера);
	
КонецПроцедуры

//
//
Процедура ПолеHTMLДокументаonactivate(Элемент, pEvtObj)
	// Вставить содержимое обработчика.
КонецПроцедуры

//
//
Процедура КамерыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		//
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		//
		Если НЕ ДанныеСтроки.ПризнакПривязан Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоСерый;
		КонецЕсли;	
		
		//
		Если ДанныеСтроки.ПризнакРазмечен Тогда
			ОформлениеСтроки.Ячейки.Камера.Шрифт = Новый Шрифт(ОформлениеСтроки.Ячейки.Камера.Шрифт,,,Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

