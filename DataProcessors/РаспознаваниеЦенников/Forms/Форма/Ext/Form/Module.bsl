
&НаСервере
Процедура ОбновитьСписок()
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

	СтрокаЗапроса = "SELECT  id_photo, recognized_text, recognized_text_rotated1, recognized_text_rotated2, recognized_text_rotated3, id_tov, id
			|, recognized_text_invert, recognized_text_invert_rotated1, recognized_text_invert_rotated2, recognized_text_invert_rotated3
			|FROM SMS_Repl.dbo.Photo_move  (nolock)
			|WHERE ISNULL(without_photo,0)<>1 and date_add >= " + ВнешниеДанные.ФорматПоля(Период.ДатаНачала) + " and date_add <= " + ВнешниеДанные.ФорматПоля(КонецДня(Период.ДатаОкончания)) + "
			|order by date_add desc
			|";
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	ТаблицаЦенников = Новый ТаблицаЗначений;
	
	ТаблицаЦенников.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	ТаблицаЦенников.Колонки.Добавить("Текст", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст1", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст2", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст3", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("Текст_Инвертация", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст_Инвертация1", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст_Инвертация2", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ПеревернутыйТекст_Инвертация3", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаЦенников.Колонки.Добавить("ИдТовара", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаЦенников.Колонки.Добавить("Id", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТаблицаЦенников.Добавить();
			
			НоваяСтрока.Идентификатор = rs.Fields("id_photo").Value;			
			НоваяСтрока.Текст 		  = rs.Fields("recognized_text").Value;			
			НоваяСтрока.ПеревернутыйТекст1 		  = rs.Fields("recognized_text_rotated1").Value;
			НоваяСтрока.ПеревернутыйТекст2 		  = rs.Fields("recognized_text_rotated2").Value;
			НоваяСтрока.ПеревернутыйТекст3 		  = rs.Fields("recognized_text_rotated3").Value;
			НоваяСтрока.Текст_Инвертация 		  = rs.Fields("recognized_text_invert").Value;
			НоваяСтрока.ПеревернутыйТекст_Инвертация1 		  = rs.Fields("recognized_text_invert_rotated1").Value;
			НоваяСтрока.ПеревернутыйТекст_Инвертация2 		  = rs.Fields("recognized_text_invert_rotated2").Value;
			НоваяСтрока.ПеревернутыйТекст_Инвертация3 		  = rs.Fields("recognized_text_invert_rotated3").Value;
			НоваяСтрока.ИдТовара	  = rs.Fields("id_tov").Value;			
			НоваяСтрока.Id	  = rs.Fields("Id").Value;			
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ценники.Идентификатор,
	                      |	Ценники.Текст,
						  |	Ценники.ПеревернутыйТекст1,
						  |	Ценники.ПеревернутыйТекст2,
						  |	Ценники.ПеревернутыйТекст3,
						  |	Ценники.Текст_Инвертация,
						  |	Ценники.ПеревернутыйТекст_Инвертация1,
						  |	Ценники.ПеревернутыйТекст_Инвертация2,
						  |	Ценники.ПеревернутыйТекст_Инвертация3,
						  |	Ценники.Id,
	                      |	Ценники.ИдТовара
	                      |ПОМЕСТИТЬ ВТ_Ценники
	                      |ИЗ
	                      |	&Ценники КАК Ценники
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
	                      |	ПрикрепленныеФотоКОбъектам.ДатаДобавления,
	                      |	ПрикрепленныеФотоКОбъектам.СтруктурнаяЕдиница КАК Магазин,
	                      |	ПрикрепленныеФотоКОбъектам.УинЗаписи КАК Идентификатор,
	                      |	ВТ_Ценники.Текст,
						  |	ВТ_Ценники.ПеревернутыйТекст1,
						  |	ВТ_Ценники.ПеревернутыйТекст2,
						  |	ВТ_Ценники.ПеревернутыйТекст3,
						  |	ВТ_Ценники.Текст_Инвертация,
						  |	ВТ_Ценники.ПеревернутыйТекст_Инвертация1,
						  |	ВТ_Ценники.ПеревернутыйТекст_Инвертация2,
						  |	ВТ_Ценники.ПеревернутыйТекст_Инвертация3,
						  |	ВТ_Ценники.Id,
	                      |	ВТ_Ценники.ИдТовара
	                      |ПОМЕСТИТЬ Промежуточная
	                      |ИЗ
	                      |	РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ценники КАК ВТ_Ценники
	                      |		ПО ПрикрепленныеФотоКОбъектам.УинЗаписи = ВТ_Ценники.Идентификатор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Промежуточная.ОтносительноеИмяФайла,
	                      |	Промежуточная.ДатаДобавления КАК ДатаДобавления,
	                      |	Промежуточная.Магазин,
	                      |	Промежуточная.Идентификатор,
	                      |	Промежуточная.Текст,
						  |	Промежуточная.ПеревернутыйТекст1,
						  |	Промежуточная.ПеревернутыйТекст2,
						  |	Промежуточная.ПеревернутыйТекст3,
						  |	Промежуточная.Текст_Инвертация,
						  |	Промежуточная.ПеревернутыйТекст_Инвертация1,
						  |	Промежуточная.ПеревернутыйТекст_Инвертация2,
						  |	Промежуточная.ПеревернутыйТекст_Инвертация3,
	                      |	Промежуточная.ИдТовара,
						  |	Промежуточная.Id,
	                      |	Номенклатура.Ссылка КАК Товар
	                      |ИЗ
	                      |	Промежуточная КАК Промежуточная
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	                      |		ПО Промежуточная.ИдТовара = Номенклатура.id_tov
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаДобавления");
	
	Запрос.УстановитьПараметр("Ценники", ТаблицаЦенников);
	
	ТаблицаФайлов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	ОбновитьСписок();
	ОбновитьСписокРакурсовСервер();
		
	//
	КаталогФайнРидер = Константы.КаталогФайнРидер.Получить();
	
	Если Прав(КаталогФайнРидер, 1) <> "\" Тогда
		КаталогФайнРидер = КаталогФайнРидер + "\";
	КонецЕсли;	

	КаталогХранения = Константы.КаталогХраненияФайловКартинок.Получить();
	
	Если Прав(КаталогХранения, 1) <> "\" Тогда
		КаталогХранения = КаталогХранения + "\";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//	
	//ОбновитьСтатусы();
	
	ПодключитьОбработчикОжидания("ПроверитьРаспознаваемыеЦенники", 3);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьСписок();
	ОбновитьСписокРакурсовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтр Из Элементы.ТаблицаФайлов.ВыделенныеСтроки Цикл
	
	//	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
		ТекущиеДанные= ТаблицаФайлов.НайтиПоИдентификатору(ТекСтр);
	
		КопироватьФайл(КаталогХранения+ТекущиеДанные.ОтносительноеИмяФайла, КаталогФайнРидер + ТекущиеДанные.Идентификатор + ".jpg");
	
		ТекущиеДанные.Распознается = Истина;

		
	
	КонецЦикла;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаспознаваемыеЦенники()
	
	ЕстьЗавершенные = Ложь;
	
	Для Каждого Строка Из ТаблицаФайлов Цикл
		Если НЕ Строка.Распознается Тогда 
			Продолжить;
		КонецЕсли; 
		
		ИсходныйФайл = Новый Файл(КаталогФайнРидер + Строка.Идентификатор + ".jpg");
		ФайлXLS = Новый Файл(КаталогФайнРидер + "XLS_OK\" + Строка.Идентификатор + ".xls");
		
		Если НЕ ИсходныйФайл.Существует() И НЕ ФайлXLS.Существует() Тогда
			Строка.Распознается = Ложь;
			
			ЕстьЗавершенные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗавершенные Тогда
		ТекущийИдентификатор = Элементы.ТаблицаФайлов.ТекущиеДанные.Идентификатор;
	
		ОбновитьСписок();
		
		НС = ТаблицаФайлов.НайтиСтроки(Новый Структура("Идентификатор", ТекущийИдентификатор));
		
		Если НС.Количество()>0 Тогда                                                                                         
			Элементы.ТаблицаФайлов.ТекущаяСтрока = НС[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура АктивизацияСтроки() Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Фото = Неопределено;
		ПолеHtmlКартинка = "";
		РаспознанныйТекст = "";
		РаспознанныйТекст1 = "";
		РаспознанныйТекст2 = "";
		РаспознанныйТекст3 = "";
		РаспознанныйТекст4 = "";
		РаспознанныйТекст5 = "";
		РаспознанныйТекст6 = "";
		РаспознанныйТекст7 = "";
	Иначе
		//Картинка = Новый Картинка(КаталогХранения+ТекущиеДанные.ОтносительноеИмяФайла);
		//Фото = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		ПолеHtmlКартинка = "<html><body><body><img width=""350"" height=""250"" src=""file:///" + КаталогХранения+ ТекущиеДанные.ОтносительноеИмяФайла + """></body></html>";
		РаспознанныйТекст = СтрЗаменить(ТекущиеДанные.Текст, "&&", Символы.ПС);
		РаспознанныйТекст1 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст1, "&&", Символы.ПС);
		РаспознанныйТекст2 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст2, "&&", Символы.ПС);
		РаспознанныйТекст3 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст3, "&&", Символы.ПС);
		РаспознанныйТекст4 = СтрЗаменить(ТекущиеДанные.Текст_Инвертация, "&&", Символы.ПС);
		РаспознанныйТекст5 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст_Инвертация1, "&&", Символы.ПС);
		РаспознанныйТекст6 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст_Инвертация2, "&&", Символы.ПС);
		РаспознанныйТекст7 = СтрЗаменить(ТекущиеДанные.ПеревернутыйТекст_Инвертация3, "&&", Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаФайловПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("АктивизацияСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЦенников(Команда)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРакурсовСервер()
	
	ТаблицаФайловПоРакурсам.Очистить();
	
	КаталогФайлов = Константы.МП_КаталогХраненияФайловЗадачМП.Получить();
	Если Прав(КаталогФайлов, 1) <> "\" Тогда
		КаталогФайлов = КаталогФайлов + "\";
	КонецЕсли;	
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

	СтрокаЗапроса = "SELECT DISTINCT [ShopNo]
			  |	,[date_photo]
			  |	,[id_photo]
			  |	
			  |FROM [SMS_REPL].[dbo].[Photo_response] (nolock)
			  |WHERE [date_photo] >= " + ВнешниеДанные.ФорматПоля(Период.ДатаНачала) + " and [date_photo] <= " + ВнешниеДанные.ФорматПоля(Период.ДатаОкончания) + "
			  |order by [date_photo]";
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТаблицаФайловПоРакурсам.Добавить();
			
			НоваяСтрока.Дата = rs.Fields("date_photo").Value;			
			НоваяСтрока.УинФото 		  = СокрЛП(rs.Fields("id_photo").Value);			
			НоваяСтрока.Расположение 		  = КаталогФайлов + Формат(НоваяСтрока.Дата, "ДФ=yyyyMMdd") + "\" + НоваяСтрока.УинФото + ".jpg";
			Попытка
				НоваяСтрока.МП_Фото = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(НоваяСтрока.УинФото));
			Исключение
			КонецПопытки;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Фото", ТаблицаФайловПоРакурсам.Выгрузить().ВыгрузитьКолонку("МП_Фото"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ФотографииКЗадачам.Ссылка,
	               |	МП_ФотографииКЗадачам.Ракурс,
	               |	МП_ФотографииКЗадачам.Задача.Магазин КАК Магазин
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Ссылка В(&Фото)";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТаблицаФайловПоРакурсам Цикл
		СтрокаВКеше = ТабКеш.Найти(СтрокаТаб.МП_Фото, "Ссылка");
		Если СтрокаВКеше <> Неопределено Тогда
			СтрокаТаб.Ракурс = СтрокаВКеше.Ракурс;
			СтрокаТаб.Магазин = СтрокаВКеше.Магазин;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьСписокРакурсов(Команда)
	ОбновитьСписокРакурсовСервер();
КонецПроцедуры

&НаКлиенте
Процедура АктивизацияСтрокиРакурсы() Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаФайловПоРакурсам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПолеHtmlКартинкаРакурсы = "";
	Иначе
		ПолеHtmlКартинкаРакурсы = "<html><body><body><img width=""800"" height=""600"" src=""file:///" + ТекущиеДанные.Расположение + """></body></html>";
	КонецЕсли;
	
	ЗаполнитьТабДок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабДок()
	
	ТабДокРаспознано.Очистить();
	Если Элементы.ТаблицаФайловПоРакурсам.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = ТаблицаФайловПоРакурсам.НайтиПоИдентификатору(Элементы.ТаблицаФайловПоРакурсам.ТекущаяСтрока);
	
	Макет = Обработки.РаспознаваниеЦенников.ПолучитьМакет("Распознанное");
	Если ТекущиеДанные <> Неопределено Тогда
		
		
		
		ТабРезультаты = Новый ТаблицаЗначений();
		ТабРезультаты.Колонки.Добавить("Ряд");
		ТабРезультаты.Колонки.Добавить("ТипЦенника");
		ТабРезультаты.Колонки.Добавить("Текст");
		ТабРезультаты.Колонки.Добавить("СверхуПикселей");
		ТабРезультаты.Колонки.Добавить("СлеваПикселей");
		ТабРезультаты.Колонки.Добавить("Цена");
		ТабРезультаты.Колонки.Добавить("id_tov");
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса = "SELECT 
					  |	[row]
					  |	,[type_price]
					  |	,[text]
					  |	,[DistanceFromTop]
					  |	,[DistanceFromLeft]
					  |	,[Price]
					  |	,[id_tov]
					  |FROM [SMS_REPL].[dbo].[Photo_response] (nolock)
					  |Where [date_photo] = " + ВнешниеДанные.ФорматПоля(ТекущиеДанные.Дата) + " and [id_photo] = " + ВнешниеДанные.ФорматПоля(ТекущиеДанные.УинФото);
		
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				Если ЗначениеЗаполнено(rs.Fields("text").Value) Тогда
					НоваяСтрока = ТабРезультаты.Добавить();
					
					НоваяСтрока.Ряд = rs.Fields("row").Value;
					НоваяСтрока.ТипЦенника = rs.Fields("type_price").Value;
					НоваяСтрока.Текст 		  = СокрЛП(rs.Fields("text").Value);
					НоваяСтрока.СверхуПикселей 		  = rs.Fields("DistanceFromTop").Value;
					НоваяСтрока.СлеваПикселей 		  = rs.Fields("DistanceFromLeft").Value;
					НоваяСтрока.Цена 		  = rs.Fields("Price").Value;
					НоваяСтрока.id_tov 		  = rs.Fields("id_tov").Value;
				КонецЕсли;	
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ТабРезультаты.Сортировать("Ряд, СлеваПикселей");
		
		ПредРяд = -1;
		Счетчик = 1;
		МаксКолвоЯчеек = 0;
		Для Каждого СтрокаТаб Из ТабРезультаты Цикл
			Если ПредРяд <> СтрокаТаб.Ряд Тогда
				Счетчик = 1;
			КонецЕсли;
			МаксКолвоЯчеек = Макс(МаксКолвоЯчеек, Счетчик);
			ПредРяд = СтрокаТаб.Ряд;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗапросКеш = Новый Запрос();
		ЗапросКеш.Текст = "ВЫБРАТЬ
		                  |	Номенклатура.Наименование,
		                  |	Номенклатура.id_tov
		                  |ИЗ
		                  |	Справочник.Номенклатура КАК Номенклатура
		                  |ГДЕ
		                  |	Номенклатура.id_tov В (&МассивАйди)";
						  
		ЗапросКеш.УстановитьПараметр("МассивАйди", ТабРезультаты.ВыгрузитьКолонку("id_tov"));
		ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
		
		Область = Макет.ПолучитьОбласть("Шапка|Основное");
		ТабДокРаспознано.Вывести(Область);
		Для н = 1 По МаксКолвоЯчеек Цикл
			Область = Макет.ПолучитьОбласть("Шапка|Ячейка");
			Область.Параметры.НомерЯчейки = н;
			ТабДокРаспознано.Присоединить(Область);
		КонецЦикла;
		
		ПредРяд = -1;
		Для Каждого СтрокаТаб Из ТабРезультаты Цикл
			Если ПредРяд <> СтрокаТаб.Ряд Тогда
				Область = Макет.ПолучитьОбласть("Строка|Основное");
				Область.Параметры.НомерРяда = СтрокаТаб.Ряд;
				ТабДокРаспознано.Вывести(Область);
			КонецЕсли;
			Область = Макет.ПолучитьОбласть("Строка|Ячейка");
			Область.Параметры.ТекстЦенника = СтрокаТаб.Текст;
			Область.Параметры.ЦенаТипЦенника = Формат(СтрокаТаб.Цена, "ЧГ=0") + " / " + СтрокаТаб.ТипЦенника;
			Область.Параметры.СверхуПикселей = СтрокаТаб.СверхуПикселей;
			Область.Параметры.СлеваПикселей = СтрокаТаб.СлеваПикселей;
			Если ЗначениеЗаполнено(СтрокаТаб.id_tov) Тогда
				СтрокаКеш = ТабКеш.Найти(СтрокаТаб.id_tov, "id_tov");
				Если СтрокаКеш <> Неопределено Тогда
					Область.Параметры.РаспознанныйТовар = СокрЛП(СтрокаКеш.Наименование);
				КонецЕсли;	
			КонецЕсли;	
			ТабДокРаспознано.Присоединить(Область);
			ПредРяд = СтрокаТаб.Ряд;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаФайловПоРакурсамПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("АктивизацияСтрокиРакурсы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHtmlКартинкаРакурсыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаФайловПоРакурсам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗапуститьПриложение(ТекущиеДанные.Расположение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	
	ТабДок = Новый ТабличныйДокумент();
	ТабДок.Вывести(ТабДокРаспознано);
	ТабДок.Показать();
	
КонецПроцедуры


//&НаКлиенте
//Процедура ОбновитьСтатусы()
//	
//	ВсеОбработано = Истина;
//	
//	РаспознанныеСтроки = Новый Массив;
//	
//	Для Каждого Строка Из ТаблицаФайлов Цикл
//		ИсходныйФайл = Новый Файл(КаталогВходящий + Строка.Идентификатор + ".jpg");
//		ФайлXLS = Новый Файл(КаталогXLS + Строка.Идентификатор + ".xls");
//		
//		Если ИсходныйФайл.Существует() Тогда
//			Строка.Статус = "Ожидание распознавания";
//			ВсеОбработано = Ложь;
//			
//		ИначеЕсли ФайлXLS.Существует() Тогда
//			ОбработкаПрерыванияПользователя();
//			
//			ОбработаноФайлов = ОбработаноФайлов + 1;
//			Состояние("Анализ файла: " + ОбработаноФайлов + " из " + ТаблицаФайлов.Количество());
//			
//			Результат = Распознать(ФайлXLS.ПолноеИмя, Строка.Идентификатор);
//			
//			Если Результат = Неопределено Тогда
//				Строка.Статус = "Не распознан";				
//			Иначе
//				ЗаполнитьЗначенияСвойств(Строка, Результат);
//				Строка.Статус = "Распознан";
//				РаспознанныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
//				
//			КонецЕсли; 
//			
//			Попытка 
//				УдалитьФайлы(КаталогСканов + Строка.Идентификатор + ".jpg");
//				УдалитьФайлы(КаталогXLS + Строка.Идентификатор + ".xls");				
//			Исключение
//			КонецПопытки; 
//	
//		ИначеЕсли Строка.Статус <> "Распознан" Тогда
//			Строка.Статус = "Не распознан";
//			
//		КонецЕсли; 
//		
//	КонецЦикла;  
//	
//	//
//	СохранитьРезультатыНаСервере(РаспознанныеСтроки);
//	
//	//
//	Если ВсеОбработано Тогда
//		ОтключитьОбработчикОжидания("ОбновитьСтатусы");
//		Элементы.ДекорацияЗаголовок.Заголовок = "Распознавание завершено";
//		Предупреждение("Процесс распознавания завершен!");
//	КонецЕсли; 
//	
//КонецПроцедуры 

