
//+++АК SHEP 2018.07.31 ИП-00019254
Функция ДобавитьРаспределениеВОчередь(СтруктураПараметры) Экспорт
	
	УИДРаспределения = РегистрыСведений.РаспределенияТоваров.ДобавитьРаспределение(СтруктураПараметры);
	
	РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ВОчереди"));
	
	Возврат УИДРаспределения;
	
КонецФункции

//+++АК SHEP 2018.07.31 ИП-00019254
Процедура ПодключитьФоновыеЗадания() Экспорт
	
	СтруктураОтборФЗ = Новый Структура("Наименование,Состояние", "РаспределениеТоваровПоТорговымТочкамПлюс", СостояниеФоновогоЗадания.Активно);
	МассивАктивныхФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтборФЗ);
	
	Если МассивАктивныхФЗ.Количество() = 0 Тогда
		ТекущееФЗ = ФоновыеЗадания.Выполнить("ДопМодульСервер.ОбработатьРаспределенияВОчереди",,, "РаспределениеТоваровПоТорговымТочкамПлюс");
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.10.15 ИП-00019616
Функция ДобавитьРаспределение(СтруктураПараметры, флВызыватьИсключение = Ложь) Экспорт
	
	//+++АК SHEP 2018.10.16 ИП-00020169
	мМассивТорговыхТочек		= СтруктураПараметры.МассивТорговыхТочек;
	Если НЕ ЗначениеЗаполнено(мМассивТорговыхТочек) Тогда
		ТекстОшибки = "Список торговых точек пуст. Распределение не выполнено!";
		Если флВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 2018.10.16
	
	мДокумент = "";
	Если СтруктураПараметры.Свойство("Документ", мДокумент) И ЗначениеЗаполнено(мДокумент) Тогда
		
		Если РегистрыСведений.РаспределенияТоваров.СуществуетРаспределениеПоДокументу(мДокумент) Тогда
			ТекстОшибки = "По документу «" + мДокумент + "» уже было выполнено распределение!";
			Если флВызыватьИсключение Тогда
				ВызватьИсключение ТекстОшибки;
			Иначе
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	мМассивНоменклатуры			= СтруктураПараметры.МассивНоменклатуры;
	мСтруктурноеПодразделение	= СтруктураПараметры.СтруктурноеПодразделение;
	мСклад						= СтруктураПараметры.Склад;
	
	ПроверятьБлокировку			= Истина;
	Если СтруктураПараметры.Свойство("ПроверятьБлокировку") Тогда
		СтруктураПараметры.Свойство("ПроверятьБлокировку", ПроверятьБлокировку);
	КонецЕсли;
	
	мДатаРаспределения = ТекущаяДата();
	Если СтруктураПараметры.Свойство("ДатаРаспределения") Тогда
		СтруктураПараметры.Свойство("ДатаРаспределения", мДатаРаспределения);
	Иначе
		СтруктураПараметры.Вставить("ДатаРаспределения", мДатаРаспределения);
	КонецЕсли;
	
	ТекстИДТТ = "";
	СтруктураПараметры.Свойство("ИдентификаторыТТ", ТекстИДТТ);
	Если НЕ ЗначениеЗаполнено(ТекстИДТТ) Тогда
		СтруктураПараметры.Свойство("ТекстИДТТ", ТекстИДТТ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстИДТТ) Тогда
		ТекстИДТТ = ИдентификаторыТорговыхТочек(мМассивТорговыхТочек);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ТекстИДТТ", ТекстИДТТ);
	СтруктураПараметры.Вставить("ИдентификаторыТТ", ТекстИДТТ);
	
	ТекстИДТоваров = "";
	СтруктураПараметры.Свойство("ИдентификаторыТоваров", ТекстИДТоваров);
	Если НЕ ЗначениеЗаполнено(ТекстИДТоваров) Тогда
		СтруктураПараметры.Свойство("ТекстИДТоваров", ТекстИДТоваров);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстИДТоваров) Тогда
		ТекстИДТоваров = ИдентификаторыТоваров(мМассивНоменклатуры);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ТекстИДТоваров", ТекстИДТоваров);
	СтруктураПараметры.Вставить("ИдентификаторыТоваров", ТекстИДТоваров);
	
	мОстаткиСледДнем = Ложь;
	Если СтруктураПараметры.Свойство("ОстаткиСледДнем") Тогда
		СтруктураПараметры.Свойство("ОстаткиСледДнем", мОстаткиСледДнем);
	Иначе
		СтруктураПараметры.Вставить("ОстаткиСледДнем", мОстаткиСледДнем);
	КонецЕсли;
	
	мЗагружатьФОПередРаспределением = Истина;
	Если СтруктураПараметры.Свойство("ЗагружатьФОПередРаспределением") Тогда
		СтруктураПараметры.Свойство("ЗагружатьФОПередРаспределением", мЗагружатьФОПередРаспределением);
	Иначе
		СтруктураПараметры.Вставить("ЗагружатьФОПередРаспределением", мЗагружатьФОПередРаспределением);
	КонецЕсли;
	
	ЭтоПредварительноеРаспределение = 0;
	Если СтруктураПараметры.Свойство("ЭтоПредварительноеРаспределение") Тогда
		СтруктураПараметры.Свойство("ЭтоПредварительноеРаспределение", ЭтоПредварительноеРаспределение);
	КонецЕсли;
	
	ТекстНомер_Р = ДопМодульСервер.ПолучитьНомерРаспределенияПоТТ(мДатаРаспределения, мМассивНоменклатуры, мСтруктурноеПодразделение,, ПроверятьБлокировку, мСклад, ЭтоПредварительноеРаспределение, СтруктураПараметры);
	Если ТекстНомер_Р = "" Тогда Возврат ТекстНомер_Р; КонецЕсли;
	СтруктураПараметры.Вставить("Номер", ТекстНомер_Р);
	
	СтруктураПараметры.Вставить("ДатаРаспределения", мДатаРаспределения + 86400); // на завтра распределяем
	СтруктураПараметры.Вставить("УИД", ДобавитьРаспределениеВОчередь(СтруктураПараметры));
	
	ПодключитьФоновыеЗадания();
	
	Возврат ТекстНомер_Р;
	
КонецФункции

//+++АК SHEP 2018.10.15 ИП-00019616
Функция ИдентификаторыТорговыхТочек(мМассивТорговыхТочек) Экспорт
	
	ДанныеТТ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(мМассивТорговыхТочек, "id_TT");
	
	ТекстИДТТ = "";
	Для Каждого ТекТорговаяТочка Из мМассивТорговыхТочек Цикл
		ТекстИДТТ = ТекстИДТТ + "," + Формат(ДанныеТТ.Получить(ТекТорговаяТочка), "ЧГ=0");
	КонецЦикла;
	
	ТекстИДТТ = Сред(ТекстИДТТ, 2);
	ТекстИДТТ = ?(ТекстИДТТ = "", "NULL", "'" + ТекстИДТТ + "'");
	
	Возврат ТекстИДТТ;
	
КонецФункции

//+++АК SHEP 2018.10.15 ИП-00019616
Функция ИдентификаторыТоваров(мМассивНоменклатуры) Экспорт
	
	ДанныеТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(мМассивНоменклатуры, "id_tov");
	
	ТекстИДТоваров = "";
	Для Каждого ТекТовар Из мМассивНоменклатуры Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(ДанныеТоваров.Получить(ТекТовар), "ЧГ=0");
	КонецЦикла;
	
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	ТекстИДТоваров = ?(ТекстИДТоваров = "", "NULL", "'" + ТекстИДТоваров + "'");
	
	Возврат ТекстИДТоваров;
	
КонецФункции

// Выполняет снятие признака "Ожидаемый приход", Проведение и запуск "Распределения по ТТ +" //+++АК mika 2018.11.01 ИП-00019964 
// с предварительным сворачиванием номенклатуры в табличных частях документов в разрезе Склада
//
// Параметры:
//  МассивДокументов  - <Тип.Массив> - Массив документов Приходный ордер (Склад)
//  СтрокаУведомления  - <Тип.Строка> - Строка уведомления
//
Процедура СнятиеОжидаемогоПриходаЗапускРаспределения(МассивДокументов, СтрокаУведомления) Экспорт

	СформированоРаспределений = 0;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		МассивПроведенныхДокументов = ПровестиДокументыПриходныйОрдерОжидаемыйПриход(МассивДокументов, СтрокаУведомления);
		
		Если МассивПроведенныхДокументов.Количество() > 0 Тогда 
			СформироватьРаспределенияПоСкладам(МассивПроведенныхДокументов, СтрокаУведомления, СформированоРаспределений);
		КонецЕсли; 
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СформированоРаспределений) И НЕ ЗначениеЗаполнено(СтрокаУведомления) Тогда
		СтрокаУведомления = "Не выбраны документы, у которых установлен признак ""Ожидаемый приход""!
				|(при необходимости повторного запуска распределения запустите ""Распределения по ТТ +"" из формы конкретного документа) "
	КонецЕсли;

КонецПроцедуры // СнятиеОжидаемогоПриходаЗапускРаспределения()

// Проверяет наличие ожидающих прихода документов Приходный ордер (Склад) //+++АК mika 2018.11.01 ИП-00019964
//
// Параметры:
//  МассивДокументов  - <Тип.Массив> - Массив документов Приходный ордер (Склад)
//  СтрокаУведомления  - <Тип.Строка> - Строка уведомления
//
// Возвращаемое значение:
//   <Тип.Массив> - Массив проведенных документов Приходный ордер (Склад)
//
Функция ПровестиДокументыПриходныйОрдерОжидаемыйПриход(МассивДокументов, СтрокаУведомления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка Как Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.Ссылка В(&МассивДокументов)
	|	И ПриходныйОрдерСклад.Ссылка.ОжидаемыйПриход
	|	И НЕ ПриходныйОрдерСклад.Ссылка.Отменен";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Формирование массива документов для проведения
	МассивДокументовПроведение = Новый Массив();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОжидаемыйПриход = Ложь;
			ДокументОбъект.Дата = ТекущаяДата();
			Попытка 
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				МассивДокументовПроведение.Добавить(Выборка.Ссылка);
			Исключение
				СтрокаУведомления = СтрокаУведомления + Выборка.Ссылка + Символы.ПС;
			КонецПопытки; 
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаУведомления) Тогда
		СтрокаУведомления = СтрЗаменить("Ошибка проведения! Документы: 
		|СтрокаУведомления 
		|(следует провести вышеуказанные документы и запустить ""Распределения по ТТ +"" из формы документа)", 
		"СтрокаУведомления", СтрокаУведомления) + Символы.ПС + Символы.ПС; 
	КонецЕсли;
	
	Возврат МассивДокументовПроведение;
	
КонецФункции // ПровестиДокументыПриходныйОрдерОжидаемыйПриход()

// Формирует структуры параметров по документам Приходный ордер (Склад) в разрезе складов и запускает распределения //+++АК mika 2018.11.01 ИП-00019964
//
// Параметры:
//  МассивДокументов  - <Тип.Массив> - Массив документов Приходный ордер (Склад)
//  СтрокаУведомления  - <Тип.Строка> - Строка уведомления
//  СформированоРаспределений -  <Тип.Число> - Количество сформированных распределений
//
Процедура СформироватьРаспределенияПоСкладам(МассивДокументов, СтрокаУведомления, СформированоРаспределений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка.Организация КАК Организация,
	|	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СтруктурноеПодразделение,
	|	ПриходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Ссылка.Организация,
	|	ПриходныйОрдерСкладТовары.Ссылка.Склад,
	|	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	|	ПриходныйОрдерСкладТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	СтруктурноеПодразделение,
	|	Номенклатура
	|ИТОГИ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			ВыборкаСтруктурноеПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСтруктурноеПодразделение.Следующий() Цикл
				
				ВыборкаСклад = ВыборкаСтруктурноеПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаСклад.Следующий() Цикл
					
					//Подготовка структуры распределения
					ДанныеРаспределения = Новый Структура("Организация, СтруктурноеПодразделение, Склад, ДатаРаспределения", ВыборкаОрганизация.Организация, ВыборкаСтруктурноеПодразделение.СтруктурноеПодразделение);
					
					ДанныеРаспределения.Склад = ВыборкаСклад.Склад;
					
					ВыборкаДетальныеЗаписи = ВыборкаСклад.Выбрать();
					
					//Формирование массива номенталуры
					МассивНоменклатуры = Новый Массив();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						МассивНоменклатуры.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
					КонецЦикла;
					
					//Формирование списка ТТ 
					МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(ДанныеРаспределения.СтруктурноеПодразделение, МассивНоменклатуры,, ДанныеРаспределения.Склад);
					
					//Добавление аналогов
					ДопМодульСервер.ДобавитьАналогиИКомплекты(МассивНоменклатуры);
					
					//Заполнение дополнительных параметров распределения
					ДанныеРаспределения.ДатаРаспределения = ТекущаяДата();
					ДанныеРаспределения.Вставить("МассивТорговыхТочек", МассивТТ);
					ДанныеРаспределения.Вставить("МассивНоменклатуры", МассивНоменклатуры);
					ДанныеРаспределения.Вставить("Документ", СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивДокументов));
					
					ТекстИДТоваров = ДопМодульСервер.ИдентификаторыТоваров(МассивНоменклатуры);
					ДанныеРаспределения.Вставить("ТекстИДТоваров", ТекстИДТоваров);
					
					Если ДопМодульСервер.ЕстьПодобноеРаспределениеТовара(ТекстИДТоваров, ДанныеРаспределения.Склад) Тогда
						СтрокаУведомления  = СтрокаУведомления + СтрЗаменить("Уже есть подобное распределение товара по складу ТекущийСклад","ТекущийСклад", ДанныеРаспределения.Склад);
						Возврат;
					КонецЕсли;	
					
					НомерРаспределения = Обработки.РаспределениеТоваровПоТорговымТочкамПлюс.ДобавитьРаспределение(ДанныеРаспределения);
					
					Если ЗначениеЗаполнено(НомерРаспределения) Тогда
						ШаблонУведомления = "Сформировано распределение: Склад: %1, Номер распределения: %2";
						СтрокаУведомления = СтрокаУведомления + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУведомления, ДанныеРаспределения.Склад, НомерРаспределения) + Символы.ПС;   
					Иначе
						ШаблонУведомления = "Не сформировано распределение: Склад: %1 (дополнительная информация в сообщениях)";
						СтрокаУведомления = СтрокаУведомления + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУведомления, ДанныеРаспределения.Склад, НомерРаспределения) + Символы.ПС;   
					КонецЕсли;
					
					СформированоРаспределений = СформированоРаспределений + 1; 
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СформироватьРаспределенияПоСкладам()
