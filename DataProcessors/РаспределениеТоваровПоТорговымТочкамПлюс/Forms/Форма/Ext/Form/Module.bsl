
&НаСервереБезКонтекста
Функция ПолучитьХарактеристикуНоменклатуры(мПоставщик, мНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик"	, мПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПроизводителиТоваров.Объект КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|ГДЕ
	|	ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
	|	И (ВЫРАЗИТЬ(ПроизводителиТоваров.Значение КАК Справочник.Контрагенты)) = &Поставщик";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикаНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокиВДеревоТоваров(мСтрокиДереваНоменклатуры, мДеревоЗапроса)
	
	Перем СтрокиДереваЗапроса, СтрокаНоменклатуры;
	
	СтрокиДереваЗапроса = мДеревоЗапроса.Строки;
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗапроса Цикл
		
		СтрокаНоменклатуры = мСтрокиДереваНоменклатуры.Строки.Добавить();
		СтрокаНоменклатуры.Номенклатура = СтрокаДерева.Номенклатура;
		СтрокаНоменклатуры.Аналог 		= СтрокаДерева.Аналог;
		
		ДобавитьСтрокиВДеревоТоваров(СтрокаНоменклатуры, СтрокаДерева);
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьДеревоТоваров()
	
	Перем Запрос, ДеревоЗапроса;
	
	// доступная номенклатура
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры"		, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("МассивПолныхАналогов"	, ЭтаФорма.СписокПолныхАналоговТоваров);
	Запрос.УстановитьПараметр("МассивСоставаКомплекта"	, ЭтаФорма.СписокСоставаКомплекта);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Ссылка В (&МассивПолныхАналогов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Аналог
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	(СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
	|			ИЛИ СпрНоменклатура.Ссылка В (&МассивПолныхАналогов)
	|			ИЛИ СпрНоменклатура.Ссылка В (&МассивСоставаКомплекта))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	
	// служебная переменная
	мДеревоНоменклатуры = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	мДеревоНоменклатуры.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов(МассивТипов));
	мДеревоНоменклатуры.Колонки.Добавить("Аналог"		, Новый ОписаниеТипов("Булево"));
	
	// пустой товар - т.е. все товары
	СтрокаДерева = мДеревоНоменклатуры.Строки.Добавить();
	СтрокаДерева.Номенклатура = "<Все>";
	
	// подчиненные группы
	ДобавитьСтрокиВДеревоТоваров(СтрокаДерева, ДеревоЗапроса);
	
	
	// вывод на экран
	ЗначениеВРеквизитФормы(мДеревоНоменклатуры, "ДеревоТоваров");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи)

	Если СтруктураЗаписи.Характеристика = Неопределено Тогда
		СтруктураЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
    Возврат РегистрыСведений.ОстаткиРаспределенныеПоТТ.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

Процедура ПриИзмененииДатыЗаказов()
	
	ТекНомерНедели = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ЭтаФорма.ДатаЗаказов);
	Элементы.НадписьТекНомерНеделиПоказателиЗаказов.Заголовок 		= Формат(ТекНомерНедели, "ЧГ=");
	
	Элементы.ВыводитьПоказательФактическийОстаток.Заголовок 		= "Факт. остаток (" +
																	Лев(Формат(ЭтаФорма.ДатаЗаказов - 86400, "ДЛФ=Д"), 5) + ")";
	
	Элементы.ВыводитьПоказательПлановыйОстатокНаКонецДня.Заголовок 	= "План. остаток (" +
																	Лев(Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д"), 5) + ")";
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуМаршрутов()
	
	ЕстьСклад = НЕ Объект.Склад.Пустая();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокМаршрутов", ЭтаФорма.СписокМаршрутов);
	Если ЕстьСклад Тогда
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
	КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Маршруты.Ссылка В (&СписокМаршрутов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка,
	|	Маршруты.Ссылка КАК Маршрут
	|ИЗ
	|	Справочник.Маршруты КАК Маршруты
	|ГДЕ
	|	&УсловиеПоСкладу
	|	И Маршруты.Организация = &Организация
	|	И НЕ Маршруты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Маршруты.Наименование";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу", ?(ЕстьСклад, "Маршруты.СтруктурноеПодразделение = &Склад", "ИСТИНА"));
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ЭтаФорма.ТаблицаМаршрутов.Загрузить(ТаблицаЗапроса);
	
	Если ЭтаФорма.СписокМаршрутов.Количество() > 0 Тогда
		ЭтаФорма.СписокМаршрутов.Очистить();
		Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл 
			Если СтрокаТаблицы.Отметка Тогда
				ЭтаФорма.СписокМаршрутов.Добавить(СтрокаТаблицы.Маршрут);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьМаршрутов()
	
	Элементы.КнопкаОбновитьМаршруты.Видимость = ЭтаФорма.ОтборПоМаршрутам;
	Элементы.ГруппаОтборПоМаршрутам.Видимость = ЭтаФорма.ОтборПоМаршрутам;
	
КонецПроцедуры

Процедура УстановитьОтборМаршрутов()
	
	ПолеКомпоновкиСклад = Новый ПолеКомпоновкиДанных("СтруктурноеПодразделение");
	
	ОтборНаФорме = ЭтаФорма.Маршруты.Отбор;
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение  = ПолеКомпоновкиСклад;
	    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	    ЭлементОтбора.Использование  = Истина;
	    ЭлементОтбора.ПравоеЗначение = Объект.Склад;
	    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСклад Тогда
				ЭлементОтбора.ПравоеЗначение = Объект.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьОтборТТМаршрута(ТекМаршрут)
	
	Перем ОтборНаФорме, ЭлементОтбора;
	
	ОтборНаФорме = ЭтаФорма.ТорговыеТочкиМаршрутов.Отбор;
	
	ПолеКомпоновкиМаршрут = Новый ПолеКомпоновкиДанных("Маршрут");
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиМаршрут;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= ТекМаршрут;
	Иначе
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиМаршрут Тогда
				ЭлементОтбора.ПравоеЗначение 	= ТекМаршрут;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ТорговыеТочкиМаршрутов.Обновить();	
		
КонецПроцедуры

Процедура УстановитьТекстЗапросаПоказателиЗаказа()
	
	//
	ТекстЗапроса = ЭтаФорма.ТекстЗапросаПоказателиДляЗаказа;
	Если НЕ ЭтаФорма.ВыводитьПоказательЗаказТовара Тогда
		ПозицияНачало 		= Найти(ТекстЗапроса, "// Заказ товара (начало)");
		ПозицияОкончание 	= Найти(ТекстЗапроса, "// Заказ товара (окончание)");
		
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
	КонецЕсли;
	Если НЕ ЭтаФорма.ВыводитьПоказательФактическийОстаток Тогда
		ПозицияНачало 		= Найти(ТекстЗапроса, "// Факт. остатки (начало)");
		ПозицияОкончание 	= Найти(ТекстЗапроса, "// Факт. остатки (окончание)");
		
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 28);
	КонецЕсли;
	Если НЕ ЭтаФорма.ВыводитьПоказательРаспределено Тогда
		ПозицияНачало 		= Найти(ТекстЗапроса, "// Распределено (начало)");
		ПозицияОкончание 	= Найти(ТекстЗапроса, "// Распределено (окончание)");
		
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
	КонецЕсли;
	Если НЕ ЭтаФорма.ВыводитьПоказательПланПродаж Тогда
		ПозицияНачало 		= Найти(ТекстЗапроса, "// Планы продаж (начало)");
		ПозицияОкончание 	= Найти(ТекстЗапроса, "// Планы продаж (окончание)");
		
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
	КонецЕсли;
	
	ЭтаФорма.ПоказателиДляЗаказаТоваров.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура УстановитьОтборПоказателиДляЗаказаПоДате()
		
	ПараметрыЗапроса = ЭтаФорма.ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаПоказателей"	, ЭтаФорма.ДатаЗаказов);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаАссортимента"	, КонецДня(ЭтаФорма.ДатаЗаказов));// + 86400));
	
КонецПроцедуры

Процедура УстановитьОтборПоказателиДляЗаказаПоСкладу()
	
	Если ЭтаФорма.ВыводитьПоказательЗаказТовара Тогда
		ПараметрыЗапроса = ЭтаФорма.ПоказателиДляЗаказаТоваров.Параметры;
		ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад", Объект.Склад);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборПоказателиДляЗаказаПоТоварам(мНоменклатура = Неопределено, ЭтоПолныйАналог = Ложь)
	
	//
	ПараметрыЗапроса = ЭтаФорма.ПоказателиДляЗаказаТоваров.Параметры;
	
	мМассивНоменклатуры 	= Новый Массив;
	Если НЕ ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры 	= ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
		мМассивПолныхАналогов 	= ЭтаФорма.СписокПолныхАналоговТоваров.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивПолныхАналогов Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
		мМассивСоставаКомплекта	= ЭтаФорма.СписокСоставаКомплекта.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивСоставаКомплекта Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
	Иначе
		мМассивНоменклатуры.Добавить(мНоменклатура);
	КонецЕсли;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, мМассивНоменклатуры);
		
КонецПроцедуры

//+++АК LATV 2018.07.02 ИП-00019101
&НаСервере
Процедура УстановитьОтборПоказателиДляЗаказаПоТТ(мТорговаяТочка = Неопределено)

	мМассив = Новый Массив;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ТорговыеТочки = Новый Массив;
		ТорговыеТочки.Добавить(мТорговаяТочка);
	Иначе
		ТорговыеТочки = СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЭтаФорма.ОсновнойСкладТорговыхТочек.Пустая() Тогда
		мМассив = ТорговыеТочки;
	Иначе
		ДанныеТорговыхТочек = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТорговыеТочки, "ОсновнойСклад");
		Для Каждого ТорговаяТочка Из ТорговыеТочки Цикл
			Если ДанныеТорговыхТочек.Получить(ТорговаяТочка) = ЭтаФорма.ОсновнойСкладТорговыхТочек Тогда
				мМассив.Добавить(ТорговаяТочка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыЗапроса = ЭтаФорма.ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТорговыхТочек", мМассив);

КонецПроцедуры

//+++АК SHEP 2018.07.24 ИП-00019254
&НаСервере
Процедура УстановитьОтборПоказателиДляЗаказаПоТТиТоварам(мТорговаяТочка = Неопределено, мНоменклатура = Неопределено, ЭтоПолныйАналог = Ложь)

	УстановитьОтборПоказателиДляЗаказаПоТТ(мТорговаяТочка);
	УстановитьОтборПоказателиДляЗаказаПоТоварам(мНоменклатура, ЭтоПолныйАналог);
	
КонецПроцедуры


//////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//+++АК LATV 2018.07.02 ИП-00019101
&НаСервере
Процедура ЗаполнитьТаблицуТорговыхТочек()

	Если ЭтаФорма.ТаблицаТорговыхТочек.Количество() > 0 Тогда
		ЭтаФорма.ТаблицаТорговыхТочек.Очистить();
	КонецЕсли;
	
	ДанныеТорговыхТочек = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокТорговыхТочек.ВыгрузитьЗначения(), "ОсновнойСклад, НеУчаствуетВРаспределении");
	
	НоваяСтрока = ЭтаФорма.ТаблицаТорговыхТочек.Добавить();
	НоваяСтрока.ТорговаяТочка = "<Все>";
	Для Каждого ЭлементСписка Из ЭтаФорма.СписокТорговыхТочек Цикл
		
		ТорговаяТочка = ЭлементСписка.Значение;
		ДанныеТорговойТочки = ДанныеТорговыхТочек.Получить(ТорговаяТочка);
		
		Если Не ЭтаФорма.ОсновнойСкладТорговыхТочек.Пустая()
		   И ДанныеТорговойТочки.ОсновнойСклад = ЭтаФорма.ОсновнойСкладТорговыхТочек Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтаФорма.ТаблицаТорговыхТочек.Добавить();
		НоваяСтрока.ТорговаяТочка				= ТорговаяТочка;
		НоваяСтрока.НеУчаствуетВРаспределении	= ДанныеТорговойТочки.НеУчаствуетВРаспределении;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьРеквизитСписокТТ()
	
	// список доступных торговых точек
	//+++АК KIRN 2018.09.05 ИП-00019657 
	//мМассив	= ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучаст(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов);
	мМассив	= ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов,Объект.СкладХранения, Истина);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокТорговыхТочек = ТекСписок;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСпискиСервер()
	
	// список доступной номенклатуры
	мМассив	= ДопМодульСервер.ПолучитьМассивДоступнойНоменклатурыПоСкладуХранения(Объект.СкладХранения);
	//АК БЕЛН 15.09.16++
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		мМассив=ПолучитьНоменклатуруКонтрагента(мМассив);
	КонецЕсли; 
	//АК БЕЛН 15.09.16--
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокНоменклатуры = ТекСписок;
	
	// список полных аналогов товаров
	мМассив	= ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(ЭтаФорма.СписокНоменклатуры);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокПолныхАналоговТоваров = ТекСписок;
	
	// список состава комплекта
	мМассив	= ДопМодульСервер.ПолучитьМассивСоставаКомплекта(ЭтаФорма.СписокНоменклатуры);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокСоставаКомплекта = ТекСписок;
	
	// список доступных торговых точек
	ЗаполнитьРеквизитСписокТТ();
	
	// таблица доступных торговых точек
	ЗаполнитьТаблицуТорговыхТочек();
	
КонецПроцедуры

//АК БЕЛН 15.09.16++
&НаСервере
Функция ПолучитьНоменклатуруКонтрагента(мМассив)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыНаСкладахОбороты.Номенклатура
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			&НачалоПериода,
		|			,
		|			Регистратор,
		|			Номенклатура В (&Номенклатура)
		|				И Склад = &Склад) КАК ТоварыНаСкладахОбороты
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
		|	И ТоварыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|	И ТоварыНаСкладахОбороты.Регистратор.Поставщик = &Поставщик";

	//+++АК SHEP 2018.06.05 ИП-00018905: выбирались не все товары, увеличил период
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()-7*24*60*60));   
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДобавитьМесяц(ТекущаяДата(), -1)));   
	//---АК SHEP 2018.06.05
	Запрос.УстановитьПараметр("Номенклатура", мМассив);
	//Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Поставщик", Объект.Поставщик);
	Запрос.УстановитьПараметр("Склад", Объект.СкладХранения);

	Результат = Запрос.Выполнить();

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");

КонецФункции // ()
//АК БЕЛН 15.09.16--

Функция ПолучитьСкладТекущегоПользователя()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоступностьСкладов.Склад.Владелец КАК Склад
	|ИЗ
	|	Справочник.ГруппыПользователей.ДоступностьСкладов КАК ДоступностьСкладов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	|		ПО (ПользователиГруппы.Ссылка = ДоступностьСкладов.Ссылка)
	|			И (ПользователиГруппы.Пользователь = &Пользователь)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Склад;
	КонецЕсли;
	
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Кавказский_1"); // Кавказский_1 - по умолчанию
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК KIRN 2018.04.10 ИП-00018330
	Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	//---АК KIRN 
	
	//
	Объект.Склад = ПолучитьСкладТекущегоПользователя();
	//УстановитьОтборМаршрутов();
	
	ЭтаФорма.ЗагружатьФОПередРаспределением = Истина;
	
	ЗаполнитьРеквизитыСпискиСервер();
	
	Если ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8 Тогда
		ЭтаФорма.ДатаЗаказов = ТекущаяДата() - 86400;
	Иначе
		ЭтаФорма.ДатаЗаказов = ТекущаяДата();
	КонецЕсли;	
	Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
	
	ЗаполнитьДеревоТоваров();
	
	ПриИзмененииДатыЗаказов();
	
	ЭтаФорма.ТекстЗапросаПоказателиДляЗаказа 	= ЭтаФорма.ПоказателиДляЗаказаТоваров.ТекстЗапроса;
	ЭтаФорма.ВыводитьПоказательРаспределено 	= Истина;
	УстановитьТекстЗапросаПоказателиЗаказа();
	
	УстановитьВидимостьМаршрутов();
	
	УстановитьОтборПоказателиДляЗаказаПоДате();
	УстановитьОтборПоказателиДляЗаказаПоСкладу();
	УстановитьОтборПоказателиДляЗаказаПоТоварам();
	УстановитьОтборПоказателиДляЗаказаПоТТ();

	Элементы.ПоказателиДляЗаказаТоваровМинимальныйОстаток.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровФактическийОстаток.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспределено.Видимость 				= Истина;
	Элементы.ПоказателиДляЗаказаТоваровКоличествоПланПродаж.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровКоличествоЗаказ.Видимость 			= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровПлановыйОстатокНаКонецДня.Видимость 	= Ложь;
	
	Элементы.ЗаблокированныеТовары.Видимость = (РольДоступна("ПолныеПрава")
													ИЛИ РольДоступна("ОператорСклада")
													ИЛИ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Ворошилов Сергей", Истина));
	
	//
	ЭтаФорма.ДатаОстатков = ЭтаФорма.ДатаЗаказов;
	Элементы.ДатаОстатков.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаОстатков);
	
	ОбновитьСписокРаспределений(); //+++АК SHEP 2018.07.19 ИП-00019254
	
КонецПроцедуры

//+++АК SHEP 2018.07.25 ИП-00019254
&НаКлиенте
Процедура ОбновитьСостоянияРаспределений()
	ОбновитьСостоянияРаспределенийНаСервере();
КонецПроцедуры

//+++АК SHEP 2018.07.25 ИП-00019254
&НаСервереБезКонтекста
Процедура ОбновитьСостоянияРаспределенийНаСервере()
	РегистрыСведений.РаспределенияТоваров.ОбновитьСостояния();
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

//+++АК LATV 2018.12.02 ИП-00020364
&НаСервере
Процедура ОбновитьСписокРаспределений()

	СписокРаспределений.Параметры.УстановитьЗначениеПараметра("НачалоПериода",				ТекущаяДата() - 24*60*60); // минус 24 часа
	СписокРаспределений.Параметры.УстановитьЗначениеПараметра("СтруктурноеПодразделение",	Объект.Склад);

КонецПроцедуры

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЭтаФорма.СписокМаршрутов.Очистить();
	
	//---АК SHEP 2018.07.25 ИП-00019254
	//ЗаполнитьРеквизитыСпискиСервер();
	//
	//ЗаполнитьДеревоТоваров();
	//
	//УстановитьОтборПоказателиДляЗаказаПоСкладу();
	//УстановитьОтборПоказателиДляЗаказаПоТТ();
	
	СкладПриИзмененииНаСервере();
	//---АК SHEP 2018.07.25
	
КонецПроцедуры

//+++АК SHEP 2018.07.25 ИП-00019254
&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыСпискиСервер();
	
	ЗаполнитьДеревоТоваров();
	
	УстановитьОтборПоказателиДляЗаказаПоСкладу();
	УстановитьОтборПоказателиДляЗаказаПоТТ();
	
	ОбновитьСписокРаспределений(); //+++АК SHEP 2018.10.10 ИП-00020026
	
КонецПроцедуры

//+++АК LATV 2018.07.04 ИП-00019101
&НаКлиенте
Процедура СкладХраненияПриИзменении(Элемент)

	//+++АК SHEP 2018.07.25 ИП-00019254
	//ЗаполнитьРеквизитыСпискиСервер();
	//
	//ЗаполнитьДеревоТоваров();
	//
	//УстановитьОтборПоказателиДляЗаказаПоТТ();
	
	СкладХраненияПриИзмененииНаСервере();
	//---АК SHEP 2018.07.25

КонецПроцедуры

//+++АК SHEP 2018.07.25 ИП-00019254
&НаСервере
Процедура СкладХраненияПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыСпискиСервер();
	
	ЗаполнитьДеревоТоваров();
	
	УстановитьОтборПоказателиДляЗаказаПоТТ();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоказателейЗаказовПриИзменении(Элемент)
	
	ПриИзмененииДатыЗаказов();
	
	// перерисовка показателей для заказа товаров
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСкладТорговыхТочекПриИзменении(Элемент)
	
	ЗаполнитьТаблицуТорговыхТочек();
	
	Элементы.ТаблицаТорговыхТочекЗначения.Обновить();
	ТекДанные = Элементы.ТаблицаТорговыхТочекЗначения.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборПоказателиДляЗаказаПоТТ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательМинимальныйОстатокПриИзменении(Элемент)

	Элементы.ПоказателиДляЗаказаТоваровМинимальныйОстаток.Видимость = ЭтаФорма.ВыводитьПоказательМинимальныйОстаток;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательФактическийОстатокПриИзменении(Элемент)

	УстановитьТекстЗапросаПоказателиЗаказа();
	
	Элементы.ПоказателиДляЗаказаТоваровФактическийОстаток.Видимость = ЭтаФорма.ВыводитьПоказательФактическийОстаток;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательРаспределеноПриИзменении(Элемент)

	УстановитьТекстЗапросаПоказателиЗаказа();
	
	Элементы.ПоказателиДляЗаказаТоваровРаспределено.Видимость = ЭтаФорма.ВыводитьПоказательРаспределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательПланПродажПриИзменении(Элемент)

	УстановитьТекстЗапросаПоказателиЗаказа();
	
	Элементы.ПоказателиДляЗаказаТоваровКоличествоПланПродаж.Видимость = ЭтаФорма.ВыводитьПоказательПланПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательЗаказТовараПриИзменении(Элемент)

	УстановитьТекстЗапросаПоказателиЗаказа();
	УстановитьОтборПоказателиДляЗаказаПоСкладу();

	Элементы.ПоказателиДляЗаказаТоваровКоличествоЗаказ.Видимость = ЭтаФорма.ВыводитьПоказательЗаказТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПоказательПлановыйОстатокНаКонецДняПриИзменении(Элемент)

	Элементы.ПоказателиДляЗаказаТоваровПлановыйОстатокНаКонецДня.Видимость = ЭтаФорма.ВыводитьПоказательПлановыйОстатокНаКонецДня;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаКлиентТовары()
	
	Перем ТекДанныеНом, ТекНоменклатура;
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыПоказателиЗаказов.ТекущиеДанные;
	ТекНоменклатура = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Номенклатура	, Неопределено);
	ЭтоПолныйАналог = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Аналог			, Ложь);
	
	УстановитьОтборПоказателиДляЗаказаПоТоварам(ТекНоменклатура, ЭтоПолныйАналог);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаКлиентТТ()
	
	Перем ТекДанныеТТ, ТекТТ;
	
	ТекДанныеТТ	= Элементы.ТаблицаТорговыхТочекЗначения.ТекущиеДанные;
	ТекТТ 		= ?(НЕ ТекДанныеТТ = Неопределено, ТекДанныеТТ.ТорговаяТочка, Неопределено);
	
	УстановитьОтборПоказателиДляЗаказаПоТТ(ТекТТ);	
	
КонецПроцедуры

//+++АК SHEP 2018.07.24 ИП-00019254: совместил УстановитьОтборПоказателиДляЗаказаКлиентТТ() и УстановитьОтборПоказателиДляЗаказаКлиентТовары()
&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаКлиентТТиТовары()
	
	Перем ТекДанныеТТ, ТекТТ;
	Перем ТекДанныеНом, ТекНоменклатура;
	
	ТекДанныеТТ	= Элементы.ТаблицаТорговыхТочекЗначения.ТекущиеДанные;
	ТекТТ 		= ?(НЕ ТекДанныеТТ = Неопределено, ТекДанныеТТ.ТорговаяТочка, Неопределено);
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыПоказателиЗаказов.ТекущиеДанные;
	ТекНоменклатура = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Номенклатура	, Неопределено);
	ЭтоПолныйАналог = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Аналог			, Ложь);
	
	УстановитьОтборПоказателиДляЗаказаПоТТиТоварам(ТекТТ, ТекНоменклатура, ЭтоПолныйАналог);
	
КонецПроцедуры

//+++АК LATV 2018.07.11 ИП-00019101
&НаСервереБезКонтекста
Процедура ЗагрузитьПрогнозныеОстаткиСервер(ВыбранныеТорговыеТочки, ВыбранныеТовары, ДатаЗаказов)

	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Загрузка фактических остатков");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ОстаткиТТ = АктуальныеОстаткиТТ(ВыбранныеТорговыеТочки, ВыбранныеТовары, ДатаЗаказов);
	
	// Проверка наличия актуальных остатков в регистре
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	АктуальныеОстатки.Дата КАК Дата,
		|	АктуальныеОстатки.ТорговаяТочка КАК ТорговаяТочка,
		|	АктуальныеОстатки.Номенклатура КАК Номенклатура,
		|	АктуальныеОстатки.Количество КАК Количество
		|ПОМЕСТИТЬ втАктуальныеОстатки
		|ИЗ
		|	&ОстаткиТТ КАК АктуальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ТорговаяТочка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втАктуальныеОстатки.Дата КАК Дата,
		|	втАктуальныеОстатки.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втИзмененныеОстатки
		|ИЗ
		|	втАктуальныеОстатки КАК втАктуальныеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактическиеОстаткиТоваров КАК ФактическиеОстаткиТоваров
		|		ПО втАктуальныеОстатки.ТорговаяТочка = ФактическиеОстаткиТоваров.ТорговаяТочка
		|			И втАктуальныеОстатки.Номенклатура = ФактическиеОстаткиТоваров.Номенклатура
		|			И втАктуальныеОстатки.Дата = ФактическиеОстаткиТоваров.Дата
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ФактическиеОстаткиТоваров.Количество ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ втАктуальныеОстатки.Количество <> ФактическиеОстаткиТоваров.Количество
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОстаткиТоваров.Дата КАК Дата,
		|	ФактическиеОстаткиТоваров.ТорговаяТочка КАК ТорговаяТочка,
		|	ФактическиеОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ФактическиеОстаткиТоваров.Количество КАК Количество,
		|	ФактическиеОстаткиТоваров.id_TT КАК id_TT
		|ПОМЕСТИТЬ втФактическиеОстатки
		|ИЗ
		|	РегистрСведений.ФактическиеОстаткиТоваров КАК ФактическиеОстаткиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИзмененныеОстатки КАК втИзмененныеОстатки
		|		ПО ФактическиеОстаткиТоваров.Номенклатура = втИзмененныеОстатки.Номенклатура
		|			И ФактическиеОстаткиТоваров.Дата = втИзмененныеОстатки.Дата
		|ГДЕ
		|	ФактическиеОстаткиТоваров.Дата = &Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ТорговаяТочка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втАктуальныеОстатки.Дата, втФактическиеОстатки.Дата) КАК Дата,
		|	ЕСТЬNULL(втАктуальныеОстатки.ТорговаяТочка, втФактическиеОстатки.ТорговаяТочка) КАК ТорговаяТочка,
		|	ЕСТЬNULL(втАктуальныеОстатки.Номенклатура, втФактическиеОстатки.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(втАктуальныеОстатки.Количество, втФактическиеОстатки.Количество) КАК Количество,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(втАктуальныеОстатки.ТорговаяТочка КАК Справочник.СтруктурныеЕдиницы).id_TT, втФактическиеОстатки.id_TT) КАК id_TT
		|ИЗ
		|	втАктуальныеОстатки КАК втАктуальныеОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИзмененныеОстатки КАК втИзмененныеОстатки
		|		ПО втАктуальныеОстатки.Номенклатура = втИзмененныеОстатки.Номенклатура
		|			И втАктуальныеОстатки.Дата = втИзмененныеОстатки.Дата
		|		ПОЛНОЕ СОЕДИНЕНИЕ втФактическиеОстатки КАК втФактическиеОстатки
		|		ПО втАктуальныеОстатки.ТорговаяТочка = втФактическиеОстатки.ТорговаяТочка
		|			И втАктуальныеОстатки.Номенклатура = втФактическиеОстатки.Номенклатура
		|			И втАктуальныеОстатки.Дата = втФактическиеОстатки.Дата
		|ИТОГИ ПО
		|	Номенклатура");
	
	Запрос.УстановитьПараметр("ОстаткиТТ", ОстаткиТТ);
	Запрос.УстановитьПараметр("Дата",	   ДатаЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Запись отсутствующих актуальных остатков
	НаборЗаписей = РегистрыСведений.ФактическиеОстаткиТоваров.СоздатьНаборЗаписей();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаНоменклатура.Номенклатура);
		НаборЗаписей.Отбор.Дата.Установить(ДатаЗаказов);
		
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать актуальные остатки для товара ""%1"": %2'")
				, ВыборкаНоменклатура.Номенклатура, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);

КонецПроцедуры

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура ЗагрузитьФактическиеОстаткиПоТТ()

	//
	ВыбранныеТорговыеТочки = ТекущиеТорговыеТочки();
	
	//
	ВыбранныеТовары = ТекущиеТовары();
	
	//
	ЗагрузитьПрогнозныеОстаткиСервер(ВыбранныеТорговыеТочки, ВыбранныеТовары, ДатаЗаказов);

КонецПроцедуры

//+++АК LATV 2018.07.02 ИП-00019101
&НаКлиенте
Функция ТекущиеТорговыеТочки(ИспользоватьВсеЕслиНеВыбраны = Ложь);

	МассивТТ = Новый Массив;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекЗначения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТекДанные <> Неопределено
			   И ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			   И Не ТекДанные.НеУчаствуетВРаспределении Тогда
				МассивТТ.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				//+++АК KIRN 2018.09.05 ИП-00019657 
				//МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов);
				МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов, Объект.СкладХранения);
				//---АК KIRN 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ИспользоватьВсеЕслиНеВыбраны Тогда
			//+++АК KIRN 2018.09.05 ИП-00019657 
			//МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов);
			МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов, Объект.СкладХранения);
			//---АК KIRN 
		КонецЕсли;
	КонецЕсли;
	
	мСписокТорговыхТочек = Новый СписокЗначений;
	мСписокТорговыхТочек.ЗагрузитьЗначения(МассивТТ);
	
	Возврат мСписокТорговыхТочек;

КонецФункции

//+++АК SHEP 2018.07.25 ИП-00019254: добавил такую же функцию для сервера
//+++АК LATV 2018.07.02 ИП-00019101
&НаСервере
Функция ТекущиеТорговыеТочкиНаСервере(ИспользоватьВсеЕслиНеВыбраны = Ложь)

	МассивТТ = Новый Массив;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекЗначения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТекДанные <> Неопределено
			   И ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			   И Не ТекДанные.НеУчаствуетВРаспределении Тогда
				МассивТТ.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				//+++АК KIRN 2018.09.05  
				//МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов);
				МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов,Объект.СкладХранения);
				//---АК KIRN 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ИспользоватьВсеЕслиНеВыбраны Тогда
			//+++АК KIRN 2018.09.05  
			//МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов);
			МассивТТ = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад, ЭтаФорма.СписокНоменклатуры, ЭтаФорма.СписокМаршрутов,Объект.СкладХранения);
			//---АК KIRN 
		КонецЕсли;
	КонецЕсли;
	
	мСписокТорговыхТочек = Новый СписокЗначений;
	мСписокТорговыхТочек.ЗагрузитьЗначения(МассивТТ);
	
	Возврат мСписокТорговыхТочек;

КонецФункции

//+++АК LATV 2018.07.02 ИП-00019101
&НаСервереБезКонтекста
Функция ИдентификаторыТорговыхТочек(ТорговыеТочки);

	ТекстИДТТ = "";
	
	ДанныеТТ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТорговыеТочки.ВыгрузитьЗначения(), "id_TT");
	Для Каждого ТекТорговаяТочка Из ТорговыеТочки Цикл
		ТекстИДТТ = ТекстИДТТ + "," + Формат(ДанныеТТ.Получить(ТекТорговаяТочка.Значение), "ЧГ=0");
	КонецЦикла;
	
	ТекстИДТТ = Сред(ТекстИДТТ, 2);
	Если НЕ ТекстИДТТ = "" Тогда
		ТекстИДТТ = "'" + ТекстИДТТ + "'";
	Иначе
		ТекстИДТТ = "NULL";
	КонецЕсли;
	
	Возврат ТекстИДТТ;

КонецФункции

//+++АК LATV 2018.07.02 ИП-00019101
&НаКлиенте
Функция ТекущиеТовары(ИспользоватьВсеЕслиНеВыбраны = Ложь);

	мСписокНоменклатуры = Новый СписокЗначений;
	
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыПоказателиЗаказов.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
			ТекДанные = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТекДанные <> Неопределено
			   И ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользоватьВсеЕслиНеВыбраны Тогда
			мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мСписокНоменклатуры;

КонецФункции

//+++АК SHEP 2018.07.25 ИП-00019254: добавил такую же функцию для сервера
//+++АК LATV 2018.07.02 ИП-00019101
&НаСервере
Функция ТекущиеТоварыНаСервере(ИспользоватьВсеЕслиНеВыбраны = Ложь)

	мСписокНоменклатуры = Новый СписокЗначений;
	
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыПоказателиЗаказов.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
			ТекДанные = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТекДанные <> Неопределено
			   И ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользоватьВсеЕслиНеВыбраны Тогда
			мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидСкладируемости) Тогда 
		мСписокНоменклатуры = ОтфильтроватьНоменклатуруПоВидуСкладируемости(мСписокНоменклатуры, Объект.ВидСкладируемости);
	КонецЕсли;
	
	Возврат мСписокНоменклатуры;

КонецФункции

&НаСервере
Функция ОтфильтроватьНоменклатуруПоВидуСкладируемости(мСписокНоменклатуры, ВидСкладируемости);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Ссылка)
		|	И Номенклатура.ВидСкладируемости = &ВидСкладируемости";
	
	Запрос.УстановитьПараметр("ВидСкладируемости", ВидСкладируемости);
	Запрос.УстановитьПараметр("Ссылка", мСписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый СписокЗначений;
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Результат;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//+++АК SHEP 2018.07.25 ИП-00019254: сделал на &НаСервере, т.к. идёт вызов серверных методов, немного оптимизировал
//+++АК LATV 2018.07.02 ИП-00019101
&НаСервере
Функция АналогиИКомплекты(ВыбранныеТовары)

	мСписокНоменклатуры = Новый СписокЗначений;
	
	мМассивВыбранныхТоваров = ВыбранныеТовары.ВыгрузитьЗначения();
	Если мМассивВыбранныхТоваров.Количество() > 0 Тогда
		
		мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мМассивВыбранныхТоваров);
		Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
			Если ВыбранныеТовары.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
				мСписокНоменклатуры.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мМассивВыбранныхТоваров);
		Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
			Если ВыбранныеТовары.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
				мСписокНоменклатуры.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат мСписокНоменклатуры;

КонецФункции

//+++АК LATV 2018.07.02 ИП-00019101
&НаКлиенте
Функция АналогиИКомплектыНаСервере(ВыбранныеТовары)

	мСписокНоменклатуры = Новый СписокЗначений;
	
	мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(ВыбранныеТовары.ВыгрузитьЗначения());
	Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
		Если ВыбранныеТовары.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(ВыбранныеТовары.ВыгрузитьЗначения());
	Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
		Если ВыбранныеТовары.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мСписокНоменклатуры;

КонецФункции

//+++АК LATV 2018.07.02 ИП-00019101
&НаСервереБезКонтекста
Функция ИдентификаторыТоваров(Товары);

	ТекстИДТоваров = "";
	
	ДанныеТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Товары.ВыгрузитьЗначения(), "id_tov");
	Для Каждого ТекТовар Из Товары Цикл
		ТекстИДТоваров = ТекстИДТоваров + "," + Формат(ДанныеТоваров.Получить(ТекТовар.Значение), "ЧГ=0");
	КонецЦикла;
	
	ТекстИДТоваров = Сред(ТекстИДТоваров, 2);
	Если НЕ ТекстИДТоваров = "" Тогда
		ТекстИДТоваров = "'" + ТекстИДТоваров + "'";
	Иначе
		ТекстИДТоваров = "NULL";
	КонецЕсли;
	
	Возврат ТекстИДТоваров;

КонецФункции

//+++АК LATV 2018.07.02 ИП-00019101
&НаСервереБезКонтекста
Функция АктуальныеОстаткиТТ(ВыбранныеТорговыеТочки, ВыбранныеТовары, ДатаЗаказов)

	ОстаткиТТ = Новый ТаблицаЗначений;
	ОстаткиТТ.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОстаткиТТ.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ОстаткиТТ.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	ОстаткиТТ.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	
	//
	ИдентификаторыТТ		= ИдентификаторыТорговыхТочек(ВыбранныеТорговыеТочки);
	ИдентификаторыТоваров	= ИдентификаторыТоваров(ВыбранныеТовары);
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut	= 0;
	ADOСоединение.CommandTimeOut	= 0;
	ADOСоединение.ConnectionString	= ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	Попытка
		Выборка = ADOСоединение.Execute("exec M2..ostatki_tt_tov_currdate " + ИдентификаторыТоваров + "," + ИдентификаторыТТ + ",1");
		
		СпрНоменклатура		= Справочники.Номенклатура;
		СпрТорговыеТочки	= Справочники.СтруктурныеЕдиницы;
		
		Если НЕ Выборка.EOF() Тогда
			
			Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF() Цикл
				
				ТекНоменклатура = Неопределено;
				ТекНомУИД 	= Выборка.Fields("TovarUID").Value;
				Если НЕ ТекНомУИД = NULL Тогда
					ТекНоменклатура = СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекНомУИД));
				Иначе
					Выборка.MoveNext();
					Продолжить;
				КонецЕсли;
				
				ТекОстаток = Макс(Выборка.Fields("kol").Value, 0);
				Если НЕ ТекОстаток = 0 Тогда
					НоваяСтрока = ОстаткиТТ.Добавить();
					НоваяСтрока.Номенклатура		= ТекНоменклатура;
					Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
						НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Fields("TTUID").Value));
					КонецЕсли;
					НоваяСтрока.Количество			= ТекОстаток;
					НоваяСтрока.Дата				= ДатаЗаказов;
				КонецЕсли;
				
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Возврат ОстаткиТТ;

КонецФункции

//+++АК LATV 2018.07.04 ИП-00019101
&НаСервереБезКонтекста
Функция МожноВыполнятьРаспределение()
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "select raspr_disable, CAST(date_add as datetime) date_add, d.date1 					
					|from (SELECT 
					|	  [raspr_disable], date_add, 
					|	  row_number() over (order by [date_add] desc) rn
					|	  FROM [M2].[dbo].[raspr_disable] as a with(nolock)) b
					|	  cross join (select MAX(date_add) as date1 from m2..raspr_disable with(nolock) where date_add < '"+Формат(НачалоДня(ТекущаяДата()),"ДФ='yyyyMMdd'")+"') d 
					|	  where b.rn=1";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			Если Rs.Fields("raspr_disable").Value = 1 Тогда				
				Сообщить("Все действия по распределения пока запрещены. В SQL идет пересчет данных. Примерное время окончания работ " + Формат(Rs.Fields("date1").Value, "ДФ='HH:mm'"));				
				Возврат Ложь;
			КонецЕсли;	
			rs.MoveNext();
		КонецЕсли;
	Исключение
	КонецПопытки;

	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат Истина;
	
КонецФункции	

//+++АК LATV 2018.07.04 ИП-00019101
&НаКлиенте
Процедура ЗагрузитьОстаткиПоТТ(Команда)

	Если Не МожноВыполнятьРаспределение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФактическиеОстаткиПоТТ();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРаспределениеПоТТКлиент()
	
	мЕстьДанныеРаспределения = ДопМодульСервер.ЕстьДанныеРаспределенияПоТТНаSQL(ЭтаФорма.НомерРаспределенияПоТТ);
	Если НЕ мЕстьДанныеРаспределения Тогда
		Если ТекущаяДата() > (ЭтаФорма.ДатаЗапускаРаспределенияПоТТ + 15 * 60) Тогда
			ОтключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент");
			Сообщить("Данные распределения не получены из SQL!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//
	ОтключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент");
	Сообщить("Данные распределения появились в SQL.");
	
	ЭтаФорма.ДатаЗаказов = ЭтаФорма.ДатаЗаказов + 86400;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРаспределениеПоТТ()

	ПодключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент", 60);
	
КонецПроцедуры

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура ОтправитьДанныеДляРаспределенияПоТТ(ПризнакТТ, мСписокТорговыхТочек, мСписокНоменклатуры, ПроверятьБлокировку = Истина)

	ТекстНомер_Р = ОтправитьДанныеДляРаспределенияПоТТСервер(ПризнакТТ, ЭтаФорма.ДатаЗаказов
		, мСписокТорговыхТочек, мСписокНоменклатуры, Объект.Склад, ЭтаФорма.ОстаткиСледДнем, ПроверятьБлокировку);
	
	Элементы.НадписьТекНомерРаспределенияПоТТ.Заголовок = ТекстНомер_Р;
	Если НЕ ТекстНомер_Р = "" Тогда
		ЭтаФорма.НомерРаспределенияПоТТ = Число(ТекстНомер_Р);
	Иначе
		ЭтаФорма.НомерРаспределенияПоТТ = 0;
	КонецЕсли;

КонецПроцедуры

//+++АК MIND 2017.12.17 
Процедура ВывестиИзАссортиментаАлкогольГдеНельзяТорговать()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ТТ
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НеТоргуетАлкольнойПродукцией = ИСТИНА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	               |	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	               |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	               |	ТоварныйАссортиментТочекСрезПоследних.id_TT
	               |ИЗ
	               |	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |			&ТекДата,
	               |			ТорговаяТочка В
	               |					(ВЫБРАТЬ
	               |						ВТ_ТТ.Ссылка
	               |					ИЗ
	               |						ВТ_ТТ КАК ВТ_ТТ)
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Товары.Ссылка
	               |					ИЗ
	               |						ВТ_Товары КАК ВТ_Товары)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |ГДЕ
	               |	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	               |	И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//запись приходистя делать через набор, чтобы пеедать признак ОбменДанными.Загрузка
		Набор = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
		Набор.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Движение = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период = ТекущаяДата();
		Движение.Комментарий = "У магазина стоит признак ""Не торгует алкогольной продукцией""";
		Движение.Выведена = Истина;
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

//+++АК BELN 2018.02.15 ИП-00017951
&НаСервереБезКонтекста
Функция ПолучитьСкладыИсключения()
	Мас=Новый Массив;
	Мас.Добавить(Справочники.Склады.НайтиПоКоду("000000296")); //склад заморозки
	Мас.Добавить(Справочники.Склады.НайтиПоКоду("000001511"));
	Возврат Мас;
КонецФункции // ()

&НаСервереБезКонтекста
Процедура ИсключитьНоменклатуруСЗаданиямиНаРазборку(Дата, СписокНоменклатуры)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокЗаданиеНаРазборку.Номенклатура КАК Товар
		|ПОМЕСТИТЬ ТоварыВВедомости
		|ИЗ
		//+++АК SHEP 2018.05.22 ИП-00018767 ЗаданиеНаРазборку переименовано в ДокЗаданиеНаРазборку (из-за расходника), добавлено соединение
		//|	Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
		|	Документ.ЗаданиеНаРазборку КАК ДокЗаданиеНаРазборку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ПО (РасходныйОрдерСкладТовары.ЗаданиеНаРазборку = ДокЗаданиеНаРазборку.Ссылка)
		//---АК SHEP 2018.05.22
		|ГДЕ
		|	ДокЗаданиеНаРазборку.Дата МЕЖДУ &Дата И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И НЕ ДокЗаданиеНаРазборку.ПометкаУдаления
		|	И ДокЗаданиеНаРазборку.Напечатан
		//+++АК SHEP 2018.05.22 ИП-00018767: нужно исключать не всю номенклатуру, что в заданиях на разборку,
		// а тольку ту, что имеется в расходниках, в которых есть ссылка на задания на разборку и эти расходники в состоянии необработан
		|	И ДокЗаданиеНаРазборку.Номенклатура В(&СписокНоменклатуры)
		|	И ЕСТЬNULL(РасходныйОрдерСкладТовары.Ссылка.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.НеОбработан)
		//---АК SHEP 2018.05.22
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВВедомости КАК ТоварыВВедомости
		|		ПО Номенклатура.Ссылка = ТоварыВВедомости.Товар
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокНоменклатуры)
		|	И ТоварыВВедомости.Товар ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата + 24*60*60));
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		СписокНоменклатуры.ЗагрузитьЗначения(Новый Массив);
	Иначе
		СписокНоменклатуры.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));	
	КонецЕсли;	

КонецПроцедуры

//+++АК SHEP 2018.06.08 ИП-00018624
&НаСервереБезКонтекста
Функция СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры, Отказ = Ложь)
	Обработки.РаспределениеТоваровПоТорговымТочкам.СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры, Отказ);
КонецФункции

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура СделатьРаспределениеПоТТ2016(Команда)

	СделатьРаспределениеПоТТ("2016");

КонецПроцедуры

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура СделатьРаспределениеПоТТ_18421(Команда)

	СделатьРаспределениеПоТТ("18421");

КонецПроцедуры

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура СделатьРаспределениеПоТТ(ПризнакТТ)

	Если НЕ МожноВыполнятьРаспределение() Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК MIND 2017.12.17 заглушка на случай различных косяков с ассортиментом алкоголя
	//есть магазины где алкоголем торговать нельзя, выведем из ассортимента все косячные позиции
	ВывестиИзАссортиментаАлкогольГдеНельзяТорговать();
	//---АК MIND 
	
	Если ЭтаФорма.ДатаЗаказов > ТекущаяДата()
			И Вопрос("Будет запущено распределение на " + Формат(ЭтаФорма.ДатаЗаказов + 86400, "ДЛФ=Д") +
						", а завтра " + Формат(ТекущаяДата() + 86400, "ДЛФ=Д") + ". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК BELN 2018.02.15 ИП-00017951
	МасИскл=ПолучитьСкладыИсключения();
	//Если ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8 Тогда
	Если ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8 И МасИскл.Найти(Объект.СкладХранения)=Неопределено Тогда
	//---АК BELN 2018.02.15 
		ТекДатаЗаказов = НачалоДня(ТекущаяДата() - 86400);
	Иначе
		ТекДатаЗаказов = НачалоДня(ТекущаяДата());
	КонецЕсли;	
	Если НЕ ЭтаФорма.ДатаЗаказов = ТекДатаЗаказов Тогда
		ЭтаФорма.ДатаЗаказов = ТекДатаЗаказов;
		Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Очистить();
		Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
		ПриИзмененииДатыЗаказов();
		УстановитьОтборПоказателиДляЗаказаПоДате();
	КонецЕсли;
	
	//
	мСписокТорговыхТочек = ТекущиеТорговыеТочки(Истина);
	
	//
	мСписокНоменклатуры = ТекущиеТовары(Истина);
	ВыбранныеТовары = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(мСписокНоменклатуры);
	
	ИсключитьНоменклатуруСЗаданиямиНаРазборку(ТекДатаЗаказов, мСписокНоменклатуры);
	АналогиИКомплекты = АналогиИКомплекты(мСписокНоменклатуры);
	
	Для Каждого СтрокаНоменклатуры Из АналогиИКомплекты Цикл
		мСписокНоменклатуры.Добавить(СтрокаНоменклатуры.Значение);
		ВыбранныеТовары.Добавить(СтрокаНоменклатуры.Значение);
	КонецЦикла;
	
	//+++АК SHEP 2018.06.08 ИП-00018624
	СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры);
	//---АК SHEP 2018.06.08
	
	//
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Загрузка фактических остатков...'"));
	Если ЭтаФорма.ЗагружатьФОПередРаспределением Тогда
		ЗагрузитьПрогнозныеОстаткиСервер(мСписокТорговыхТочек, ВыбранныеТовары, ДатаЗаказов);
	КонецЕсли;
	
	//
	Сообщить("Подготовка данных для отправки...");
	ОтправитьДанныеДляРаспределенияПоТТ(ПризнакТТ, мСписокТорговыхТочек, мСписокНоменклатуры);
	
	Если ЭтаФорма.НомерРаспределенияПоТТ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Создание распределения");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ЭтаФорма.РаспределениеПоТТВыполнено 	= Ложь;
	ЭтаФорма.ДатаЗапускаРаспределенияПоТТ 	= ТекущаяДата();
	
	//
	Сообщить("Получение данных распределения из SQL...");
	ПолучитьРаспределениеПоТТ();
	
	//
	ДопМодульСервер.УстановитьПризнакБлокировкиДляРаспределения(мСписокНоменклатуры.ВыгрузитьЗначения(), Объект.Склад, Ложь);
	
	//
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	//Минеев отключил из-за ошибки
	//СформироватьГрафикВодителейНаСервере();
	
КонецПроцедуры

//+++АК SHEP 2018.04.17 ИП-00017959: оставил для совместимости при переносе
&НаКлиенте
Функция ПолучитьСкладРасчетчикаСервер(мРасчетчик)
	
	Возврат Объект.Склад;
	
КонецФункции

//+++АК LATV 2018.07.05 ИП-00019101
&НаКлиенте
Процедура СделатьПредварительноеРаспределениеПоТТ(Команда)

	Если ЭтаФорма.ДатаЗаказов > ТекущаяДата()
			И Вопрос("Будет запущено распределение на " + Формат(ЭтаФорма.ДатаЗаказов + 86400, "ДЛФ=Д") +
						", а завтра " + Формат(ТекущаяДата() + 86400, "ДЛФ=Д") + ". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//
	мСписокТорговыхТочек = ТекущиеТорговыеТочки(Истина);
	
	//
	мСписокНоменклатуры = ТекущиеТовары(Истина);
	АналогиИКомплекты = АналогиИКомплекты(мСписокНоменклатуры);
	
	Для Каждого СтрокаНоменклатуры Из АналогиИКомплекты Цикл
		мСписокНоменклатуры.Добавить(СтрокаНоменклатуры.Значение);
	КонецЦикла;
	
	//
	Сообщить("Подготовка данных для отправки...");
	ОтправитьДанныеДляРаспределенияПоТТ("2016", мСписокТорговыхТочек, мСписокНоменклатуры, Ложь);
	Если ЭтаФорма.НомерРаспределенияПоТТ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Создание распределения");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ЭтаФорма.РаспределениеПоТТВыполнено 	= Ложь;
	ЭтаФорма.ДатаЗапускаРаспределенияПоТТ 	= ТекущаяДата();
	
	//
	Сообщить("Получение данных распределения из SQL...");
	ПолучитьРаспределениеПоТТ();
	
	//
	ДопМодульСервер.УстановитьПризнакБлокировкиДляРаспределения(мСписокНоменклатуры.ВыгрузитьЗначения(), ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик), Ложь);
	
	//
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПоказателиЗаказовПриАктивизацииСтроки(Элемент)
Перем ТекДанные;
	
	Возврат; //+++АК SHEP 2018.08.16 ИП-00019254: пока отключил
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТовары", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекЗначенияПриАктивизацииСтроки(Элемент)
Перем ТекДанные;
	
	Возврат; //+++АК SHEP 2018.08.16 ИП-00019254: пока отключил
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТТ", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиДляЗаказаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.ПоказателиДляЗаказаТоваров.ТекущийЭлемент = Элементы.ПоказателиДляЗаказаТоваровРаспределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПоказателиДляЗаказаТоваров.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Дата"				, ТекДанные.Дата);
	СтруктураЗаписи.Вставить("Расчетчик"		, Объект.Расчетчик);
	СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
	ТекХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекДанные.Поставщик, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("Характеристика"	, ТекХарактеристика);
	
	СтруктураПараметров = Новый Структура("Ключ");
	СтруктураПараметров.Вставить("п_Склад"	, Объект.Склад);
	СтруктураПараметров.Вставить("СписокТТ"	, ЭтаФорма.СписокТорговыхТочек);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи);
		СтруктураПараметров.Ключ = мКлючЗаписи;
		ОткрытьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.ФормаЗаписи", СтруктураПараметров);
	Исключение
		СтруктураЗаписи.Вставить("Характеристика", Неопределено);
		Попытка
			мКлючЗаписи = ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи);
			СтруктураПараметров.Ключ = мКлючЗаписи;
			ОткрытьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.ФормаЗаписи", СтруктураПараметров);
		Исключение
			
			// новая запись в регистре
			ФормаНового = ПолучитьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.Форма.ФормаЗаписи");
			ФормаНового.Запись.Дата 			= ТекДанные.Дата;
			ФормаНового.Запись.Расчетчик 		= Объект.Расчетчик;
			ФормаНового.Запись.ТорговаяТочка 	= ТекДанные.ТорговаяТочка;
			ФормаНового.Запись.Номенклатура 	= ТекДанные.Номенклатура;
			ФормаНового.Запись.Характеристика 	= ТекХарактеристика;
			ФормаНового.Запись.Количество 		= ТекДанные.Распределено;
			ФормаНового.ОткрытьМодально();

		КонецПопытки;
	КонецПопытки;
	
	//+++АК SHEP 2018.07.24 ИП-00019254
	//ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТовары"	, 0.1, Истина);
	//ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТТ"		, 0.1, Истина);
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТТиТовары"		, 0.1, Истина);
	//---АК SHEP 2018.07.24
	
КонецПроцедуры

Процедура УдалитьРаспределениеСервер(мСписокТорговыхТочек, мСписокНоменклатуры, мДатаРаспределения)
	
	мРегистр = РегистрыСведений.ОстаткиРаспределенныеПоТТ;
	
	Для Каждого ТекТорговаяТочка Из мСписокТорговыхТочек Цикл
		Для Каждого ТекНоменклатура Из мСписокНоменклатуры Цикл
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(мДатаРаспределения);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТорговаяТочка);
			НаборЗаписей.Отбор.Номенклатура.Установить(ТекНоменклатура);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				Попытка
					НаборЗаписей.Записать();
				Исключение
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""ОстаткиРаспределенныеПоТТ""";
					СообщениеПользователю.Сообщить();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРаспределениеПоТТ(Команда)
	
	//
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыПоказателиЗаказов.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокНоменклатуры = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
	КонецЕсли;
	мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мСписокНоменклатуры);
	Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
		Если мСписокНоменклатуры.Найти(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мСписокНоменклатуры);
	Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
		Если мСписокНоменклатуры.Найти(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекЗначения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокТорговыхТочек = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				мСписокТорговыхТочек.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				мСписокТорговыхТочек = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокТорговыхТочек = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	//Если мСписокТорговыхТочек.Количество() > 1
	//		И мСписокНоменклатуры.Количество() > 1 Тогда
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Необходимо выбрать одну торговую точку или один товар";
	//	СообщениеПользователю.Сообщить();
	//	Возврат;
	//КонецЕсли;
	
	//
	Если Вопрос("Данные распределения будут удалены. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьРаспределениеСервер(мСписокТорговыхТочек, мСписокНоменклатуры, ЭтаФорма.ДатаЗаказов);
		Элементы.ПоказателиДляЗаказаТоваров.Обновить();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Отчет по складам"

Процедура РазблокироватьТоварыСервер(МассивСтруктур)
	
	мРегистр = РегистрыСведений.БлокируемыеТовары;
	
	Для Каждого СтруктураДанных Из МассивСтруктур Цикл

		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СтруктураДанных.Период);
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктураДанных.СтруктурнаяЕдиница);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураДанных.Номенклатура);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();
			Исключение
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""БлокируемыеТовары""";
				СообщениеПользователю.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьВыделенныеТовары(Команда)
	
	//
	ТекВыделенныеСтроки = Элементы.ЗаблокированныеТовары.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтруктур 	= Новый Массив;
	Для Каждого ИДСтроки Из ТекВыделенныеСтроки Цикл	
		ТекДанные = Элементы.ЗаблокированныеТовары.ДанныеСтроки(ИДСтроки);
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Период"				, ТекДанные.Период);
		СтруктураДанных.Вставить("СтруктурнаяЕдиница"	, ТекДанные.СтруктурнаяЕдиница);
		СтруктураДанных.Вставить("Номенклатура"			, ТекДанные.Номенклатура);
		МассивСтруктур.Добавить(СтруктураДанных);
	КонецЦикла;
	
	//
	Если Вопрос("Товары будут разблокированы. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		РазблокироватьТоварыСервер(МассивСтруктур);
		Элементы.ЗаблокированныеТовары.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура РазблокироватьВсеТоварыСервер()
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БлокируемыеТоварыСрезПоследних.Период,
	|	БлокируемыеТоварыСрезПоследних.Номенклатура,
	|	БлокируемыеТоварыСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.БлокируемыеТовары.СрезПоследних КАК БлокируемыеТоварыСрезПоследних
	|ГДЕ
	|	БлокируемыеТоварыСрезПоследних.Заблокировано";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//
	мРегистр = РегистрыСведений.БлокируемыеТовары;
	
	Пока Выборка.Следующий() Цикл

		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();
			Исключение
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""БлокируемыеТовары""";
				СообщениеПользователю.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьВсеТовары(Команда)
	
	//
	Если Вопрос("Товары будут разблокированы. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		РазблокироватьВсеТоварыСервер();
		Элементы.ЗаблокированныеТовары.Обновить();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Отчет по складам"

Процедура СформироватьОтчетПоСкладамСервер()
	
	ЭтаФорма.ТабДокументОтчетПоСкладам.Очистить();
	
	Если Объект.Склад.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКомпоновкиДатаОстатков 			= Новый ПараметрКомпоновкиДанных("ДатаОстатков");
	ПараметрКомпоновкиСклад 				= Новый ПараметрКомпоновкиДанных("Склад");
	ПараметрКомпоновкиСписокНоменклатуры 	= Новый ПараметрКомпоновкиДанных("СписокНоменклатуры");
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	мСхемаКомпоновкиДанных = ОбъектОбработки.ПолучитьМакет("ОтчетПоСкладам");
	
	мНастройкиОтчета = мСхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
	
	мПараметрыОтчета = мНастройкиОтчета.ПараметрыДанных;
	Для Каждого ЭлементПараметров Из мПараметрыОтчета.Элементы Цикл
		Если ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаОстатков Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= ?(НЕ ЭтаФорма.ОстаткиСледДнем, ЭтаФорма.ДатаОстатков, ЭтаФорма.ДатаОстатков + 86400);
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиСклад Тогда
			ЭлементПараметров.Использование 	= Истина;
			ЭлементПараметров.Значение 			= Объект.Склад;
			ЭлементПараметров.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиСписокНоменклатуры Тогда
			ЭлементПараметров.Использование 	= Истина;
			ЭлементПараметров.Значение 			= ЭтаФорма.СписокНоменклатуры;
			ЭлементПараметров.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЦикла;
	
	
	// Макет компоновки
	мКомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	мМакетКомпоновки = мКомпоновщикМакета.Выполнить(мСхемаКомпоновкиДанных, мНастройкиОтчета);	
	
	// Компоновка данных
	мПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	мПроцессорКомпоновки.Инициализировать(мМакетКомпоновки);	
	
	// Вывод на форму
	мПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	мПроцессорВывода.УстановитьДокумент(ЭтаФорма.ТабДокументОтчетПоСкладам);
	мПроцессорВывода.Вывести(мПроцессорКомпоновки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоСкладам(Команда)

	СформироватьОтчетПоСкладамСервер();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ Маршрутов

&НаКлиенте
Процедура ОтборПоМаршрутамПриИзменении(Элемент)
	
	Если ЭтаФорма.ОтборПоМаршрутам Тогда
		ЗаполнитьТаблицуМаршрутов();
	Иначе
		ЭтаФорма.СписокМаршрутов.Очистить();
		ЭтаФорма.ТаблицаМаршрутов.Очистить();
		//Элементы.СписокМаршрутов.Обновить();	
	КонецЕсли;
	
	ЗаполнитьРеквизитСписокТТ();
	ЗаполнитьТаблицуТорговыхТочек();
	УстановитьОтборПоказателиДляЗаказаПоТТ();
	
	УстановитьВидимостьМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуМаршрутов(Команда)
	
	ЗаполнитьТаблицуМаршрутов();
	ЗаполнитьРеквизитСписокТТ();
	ЗаполнитьТаблицуТорговыхТочек();
	УстановитьОтборПоказателиДляЗаказаПоТТ();
	
КонецПроцедуры

Процедура ЗаполнитьСписокМаршрутовСервер()
	
	Если ЭтаФорма.СписокМаршрутов.Количество() > 0 Тогда
		ЭтаФорма.СписокМаршрутов.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаМаршрутов Цикл 
		Если СтрокаТаблицы.Отметка Тогда
			ЭтаФорма.СписокМаршрутов.Добавить(СтрокаТаблицы.Маршрут);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутовПриАктивизацииСтрокиКлиент()
	
	ТекДанные = Элементы.ТаблицаМаршрутов.ТекущиеДанные;
	ТекМаршрут = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Маршрут);
	
	УстановитьОтборТТМаршрута(ТекМаршрут);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Ключ = Новый Структура("Ключ", Элементы.ТаблицаМаршрутов.ДанныеСтроки(ВыбраннаяСтрока).Маршрут);
	ФормаЭлемента = ПолучитьФорму("Справочник.Маршруты.Форма.ФормаЭлемента", Ключ);    
	ФормаЭлемента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутовПриАктивизацииСтроки(Элемент)

	ЭтаФорма.ПодключитьОбработчикОжидания("ТаблицаМаршрутовПриАктивизацииСтрокиКлиент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСписокМаршрутовСервер();
	ЗаполнитьРеквизитСписокТТ();
	ЗаполнитьТаблицуТорговыхТочек();
	УстановитьОтборПоказателиДляЗаказаПоТТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	СкладХраненияПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура СформироватьГрафикВодителейНаСервере()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Макет = Обработки.РаспределениеТоваровПоТорговымТочкам.ПолучитьМакет("ГрафикВодителей");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Номенклатура
		|ПОМЕСТИТЬ ТоварыНаСкладе
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыНаСкладахОстатки.Склад КАК Склад,
		|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				&ДатаРаспределения,
		|				Склад.Владелец = &СкладВладелец
		|					И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПУстаяСсылка)
		|						ИЛИ &Склад = Склад)) КАК ТоварыНаСкладахОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТоварыНаСкладахОстатки.Номенклатура,
		|		ТоварыНаСкладахОстатки.Склад
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоступностьТоваровНаСкладах.Склад,
		|		ДоступностьТоваровНаСкладах.Номенклатура
		|	ИЗ
		|		РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
		|	ГДЕ
		|		ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СкладВладелец
		|		И (ДоступностьТоваровНаСкладах.Склад = &Склад
		|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)
		|			КОГДА 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ((Товары.КоличествоУРЗ - 0.5) / КоличествоВКоробкеСрезПоследних.Количество + 0.5 КАК ЧИСЛО(15, 0))
		|		КОНЕЦ) КАК КоличествоКоробок,
		|	Товары.Склад КАК Склад,
		|	Товары.Получатель,
		|	Маршруты.Ссылка КАК Маршрут,
		|	Маршруты.Ссылка.ПорядокСортировки КАК ПорядокСортировки,
		|	Маршруты.ТорговаяТочка.Адрес КАК Адрес,
		|	Маршруты.ТорговаяТочка.НомерТочки КАК НомерТочки,
		|	Маршруты.Ссылка.Представление КАК МаршрутПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
		|		ОстаткиРаспределенныеПоТТ.Характеристика КАК Характеристика,
		|		ОстаткиРаспределенныеПоТТ.Количество КАК КоличествоУРЗ,
		|		ТоварыНаСкладе.Склад КАК Склад,
		|		ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК Получатель
		|	ИЗ
		|		РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыНаСкладе КАК ТоварыНаСкладе
		|			ПО ОстаткиРаспределенныеПоТТ.Номенклатура = ТоварыНаСкладе.Номенклатура
		|	ГДЕ
		|		НАЧАЛОПЕРИОДА(ОстаткиРаспределенныеПоТТ.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
		|		И ОстаткиРаспределенныеПоТТ.Количество > 0
		|		И (&ВсеТТ
		|				ИЛИ ОстаткиРаспределенныеПоТТ.ТорговаяТочка В (&СписокТТ))
		|		И ОстаткиРаспределенныеПоТТ.Номенклатура В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура
		|				ИЗ
		|					ТоварыНаСкладе КАК Т)) КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаРаспределения, СтруктурнаяЕдиница = &СкладВладелец) КАК КоличествоВКоробкеСрезПоследних
		|		ПО Товары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
		|			И Товары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаршрутыСклады.Склад КАК Склад,
		|			МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|			МаршрутыСклады.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
		|				ПО МаршрутыТорговыеТочки.Ссылка = МаршрутыСклады.Ссылка
		|		ГДЕ
		|			(&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИЛИ МаршрутыСклады.Склад = &Склад)
		|			И МаршрутыСклады.Склад.Владелец = &СкладВладелец) КАК Маршруты
		|		ПО Товары.Получатель = Маршруты.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Получатель,
		|	Маршруты.Ссылка.ПорядокСортировки,
		|	Маршруты.Ссылка,
		|	Товары.Склад,
		|	Маршруты.ТорговаяТочка.Адрес,
		|	Маршруты.ТорговаяТочка.НомерТочки,
		|	Маршруты.Ссылка.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСортировки
		|ИТОГИ
		|	СУММА(КоличествоКоробок)
		|ПО
		|	ОБЩИЕ,
		|	Склад,
		|	Маршрут";

	Запрос.УстановитьПараметр("ДатаРаспределения", НачалоДня(ДатаЗаказов));
	Запрос.УстановитьПараметр("Склад", Объект.СкладХранения);
	Запрос.УстановитьПараметр("СкладВладелец",Объект.Склад);
	Запрос.УстановитьПараметр("СписокТТ",ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ВсеТТ",СписокТорговыхТочек.Количество()=0);

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад = Макет.ПолучитьОбласть("Склад");
	ОбластьМаршрут = Макет.ПолучитьОбласть("Маршрут");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвалИтоги = Макет.ПолучитьОбласть("Подвал");
	

	ГрафикВодителей.Очистить();

	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ОбластьПодвалИтоги.Параметры.Заполнить(ВыборкаИтоги);
	ВыборкаСклад = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаСклад.Следующий() Цикл
		ОбластьСклад.Параметры.Заполнить(ВыборкаСклад);
		ОбластьПодвал.Параметры.Заполнить(ВыборкаСклад);
		ГрафикВодителей.Вывести(ОбластьСклад);

		ВыборкаМаршрут = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НПП=0;

		Пока ВыборкаМаршрут.Следующий() Цикл
			ОбластьМаршрут.Параметры.Заполнить(ВыборкаМаршрут);
			ГрафикВодителей.Вывести(ОбластьМаршрут);

			ВыборкаДетальныеЗаписи = ВыборкаМаршрут.Выбрать();
			НПП=НПП+1;
			ВывестиНомер = Истина;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				Если ВывестиНомер Тогда
					ОбластьДетальныхЗаписей.Параметры.НПП=НПП;
					ВывестиНомер = Ложь
				Иначе
					ОбластьДетальныхЗаписей.Параметры.НПП="";
				КонецЕсли;
					
				ГрафикВодителей.Вывести(ОбластьДетальныхЗаписей);
			КонецЦикла;
		КонецЦикла;
		ГрафикВодителей.Вывести(ОбластьПодвал);
	КонецЦикла;
	
	ГрафикВодителей.Вывести(ОбластьПодвалИтоги);


	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура СформироватьГрафикВодителей(Команда)
	СформироватьГрафикВодителейНаСервере()
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл КАК АдресПочты
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГРуппыРассылки.ГрафикВодителей)";
	
	Получатели = Запрос.Выполнить().Выбрать();
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты","no-reply@vkusvill.ru");
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.Тема = "График развоза на "+Формат(ДатаЗаказов, "ДФ=dd.MM.yyyy");
	
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	СтрПолучатели = "";
	
	Пока Получатели.Следующий()Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес=Получатели.АдресПочты;
		Если СокрЛП(Получатель.Адрес)="" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен адрес для "+Строка(Получатели.ФизЛицо)+". Уведомление не отправлено";
			Сообщение.Сообщить();
		Иначе
			СтрПолучатели = СтрПолучатели+Получатель.Адрес+"; "
		КонецЕсли;
	КонецЦикла;
	
	Если СтрПолучатели = "" Тогда
		Возврат
	КонецЕсли;
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла("HTML");
	ГрафикВодителей.Записать(ИмяВремФайла,ТипФайлаТабличногоДокумента.HTML3);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВремФайла);
	ТекстХТМЛ = Текст.ПолучитьТекст();
	ТекстПисьма.Текст = ТекстХТМЛ;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
	
КонецПроцедуры // ОтправитьПисьмаНаСервере()

&НаКлиенте
Процедура ОтправитьГрафик(Команда)
	ГрафикВодителей.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	Если Вопрос("Отправить отчет на эл.почту?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		ОтправитьПисьмаНаСервере()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДляРассылки(Команда)
	Группы = Новый Массив;
	Группы.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.ГрафикВодителей"));
	П = Новый Структура("Группы",Группы);
	ОткрытьФорму("РегистрСведений.АК_ГруппыРассылки.Форма.ФормаСпискаУправляемая",П,ЭтаФорма);

КонецПроцедуры

//+++АК LATV 2018.07.05 ИП-00019101
&НаСервереБезКонтекста
Функция ОтправитьДанныеДляРаспределенияПоТТСервер(ПризнакТТ, ДатаЗаказов, мСписокТорговыхТочек, мСписокНоменклатуры, Склад, ОстаткиСледДнем, ПроверятьБлокировку = Истина)

	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Подготовка распределения");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	Если ПризнакТТ = "2016" Тогда
		ТекстНомер_Р = ДопМодульСервер.ОтправитьДанныеДляРаспределенияПоТТ(ДатаЗаказов
			, мСписокТорговыхТочек, мСписокНоменклатуры, Склад,, ОстаткиСледДнем, ПроверятьБлокировку);
	ИначеЕсли ПризнакТТ = "18421" Тогда
		ТекстНомер_Р = ДопМодульСервер.ОтправитьДанныеДляРаспределенияПоТТ_18421(ДатаЗаказов
			, мСписокТорговыхТочек, мСписокНоменклатуры, Склад,, ОстаткиСледДнем, ПроверятьБлокировку);
	КонецЕсли;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	Возврат ТекстНомер_Р;

КонецФункции

//+++АК SHEP 2018.07.17 ИП-00019254
&НаКлиенте
Процедура СписокРаспределенийЗагрузитьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокРаспределений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
КонецПроцедуры

//+++АК LATV 2018.12.02 ИП-00020364
&НаСервереБезКонтекста
Функция ЕстьПодобноеРаспределениеТовара(ДатаРаспределения, Склад, ТекстИДТоваров)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияРаспределенийТоваровСрезПоследних.Период КАК Дата,
		|	РегистрСведенийРаспределенияТоваров.УИД,
		|	РегистрСведенийРаспределенияТоваров.Номер,
		|	РегистрСведенийРаспределенияТоваров.СтруктурноеПодразделение,
		|	РегистрСведенийРаспределенияТоваров.Склад,
		|	РегистрСведенийРаспределенияТоваров.ИдентификаторыТТ,
		|	РегистрСведенийРаспределенияТоваров.ИдентификаторыТоваров,
		|	РегистрСведенийРаспределенияТоваров.ПоВсемТоварам,
		|	РегистрСведенийРаспределенияТоваров.Автор,
		|	ПРЕДСТАВЛЕНИЕ(РегистрСведенийРаспределенияТоваров.Автор) КАК ПредставлениеАвтора,
		|	СостоянияРаспределенийТоваровСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияРаспределенийТоваров.СрезПоследних(, Период >= &НачалоПериода) КАК СостоянияРаспределенийТоваровСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределенияТоваров КАК РегистрСведенийРаспределенияТоваров
		|		ПО СостоянияРаспределенийТоваровСрезПоследних.УИД = РегистрСведенийРаспределенияТоваров.УИД
		|ГДЕ
		|	РегистрСведенийРаспределенияТоваров.Склад = &Склад
		|	И НЕ РегистрСведенийРаспределенияТоваров.ЭтоПредварительноеРаспределение
		|	И НЕ СостоянияРаспределенийТоваровСрезПоследних.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.РасходникиЗагружены), ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияТоваров.ОшибкаРаспределения))
		|	И РегистрСведенийРаспределенияТоваров.ДатаРаспределения = &ДатаРаспределения");
	
	Запрос.УстановитьПараметр("ДатаРаспределения",	ДатаРаспределения);
	Запрос.УстановитьПараметр("Склад",				Склад);
	Запрос.УстановитьПараметр("НачалоПериода",		ТекущаяДата() - 6 * 60*60); // минус 6 часов
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоВсемТоварам = ПустаяСтрока(ТекстИДТоваров) Или ВРег(СокрЛП(ТекстИДТоваров)) = "NULL";
	мМассивТоваров = ?(ПоВсемТоварам, Новый Массив
		, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстИДТоваров, ",", Истина, Истина));
	
	БылиСовпадения = Ложь;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Если НЕ ПоВсемТоварам И НЕ ВыборкаЗапроса.ПоВсемТоварам Тогда
			
			// определяем, совпадают ли товары
			мМассивТоваровРаспределения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаЗапроса.ИдентификаторыТоваров, ",", Истина, Истина);
			
			мЕстьСовпадение = Ложь;
			Для Каждого СтрокаТовара Из мМассивТоваров Цикл
				Если мМассивТоваровРаспределения.Найти(СтрокаТовара) <> Неопределено Тогда
					мЕстьСовпадение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			мЕстьСовпадение = Истина;
		КонецЕсли;
		
		БылиСовпадения = БылиСовпадения Или мЕстьСовпадение;
		Если мЕстьСовпадение Тогда
			Сообщить("Есть подобное распределение: №" + ВыборкаЗапроса.Номер + ", запустил: " + ВыборкаЗапроса.ПредставлениеАвтора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылиСовпадения;

КонецФункции

//+++АК SHEP 2018.07.17 ИП-00019254: делаем вызов серверных процедур на серевере
&НаКлиенте
Процедура ДобавитьРаспределение(Команда)
	
	Если ЭтаФорма.ДатаЗаказов > ТекущаяДата()
			И Вопрос("Будет запущено распределение на " + Формат(ЭтаФорма.ДатаЗаказов + 86400, "ДЛФ=Д") +
						", а завтра " + Формат(ТекущаяДата() + 86400, "ДЛФ=Д") + ". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьРаспределениеНаСервере();
	
КонецПроцедуры

//+++АК KIRN 2018.08.09 ИП-00019516 
Процедура УстановитьДатуЗаказовСервер()
	Если объект.Склад.id_TT = 8 и объект.СкладХранения.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда	
		Если ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*3 Тогда
			ЭтаФорма.ДатаЗаказов = ТекущаяДата() - 86400;
		Иначе
			ЭтаФорма.ДатаЗаказов = ТекущаяДата();
		КонецЕсли;
	Иначе		
		Если ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8 Тогда
			ЭтаФорма.ДатаЗаказов = ТекущаяДата() - 86400;
		Иначе
			ЭтаФорма.ДатаЗаказов = ТекущаяДата();
		КонецЕсли;
	КонецЕСли;
КонецПроцедуры

//+++АК LATV 2018.12.02 ИП-00020364
&НаСервере
Процедура ДобавитьРаспределениеНаСервере()

	Если Не МожноВыполнятьРаспределение() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДатаРаспределения	= ЭтаФорма.ДатаЗаказов + 86400; // на завтра распределяем
	мСписокТорговыхТочек	= ТекущиеТорговыеТочкиНаСервере(Истина);
	мСписокНоменклатуры		= ТекущиеТоварыНаСервере(Истина);
	
	ТекстИДТТ = ИдентификаторыТорговыхТочек(мСписокТорговыхТочек);
	
	//есть магазины где алкоголем торговать нельзя, выведем из ассортимента все косячные позиции
	ВывестиИзАссортиментаАлкогольГдеНельзяТорговать();
	
	// Дата заказов
	ТекДатаЗаказов = ЭтаФорма.ДатаЗаказов;
	УстановитьДатуЗаказовСервер();
	
	Если ЭтаФорма.ДатаЗаказов <> ТекДатаЗаказов Тогда
		ЭтаФорма.ДатаЗаказов = ТекДатаЗаказов;
		Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Очистить();
		Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
		ПриИзмененииДатыЗаказов();
		УстановитьОтборПоказателиДляЗаказаПоДате();
	КонецЕсли;
	
	ДопМодульСервер.ДобавитьАналогиИКомплекты(мСписокНоменклатуры);
	ТекстИДТоваров = ИдентификаторыТоваров(мСписокНоменклатуры);
	
	Если ЕстьПодобноеРаспределениеТовара(ТекДатаРаспределения, Объект.СкладХранения, ТекстИДТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры);
	
	ПроверятьБлокировку = Истина;
	СтруктураПараметры = Новый Структура("ДатаРаспределения, Организация, СтруктурноеПодразделение, Склад"
		, ТекДатаРаспределения, Объект.Организация, Объект.Склад, Объект.СкладХранения);
	СтруктураПараметры.Вставить("ИдентификаторыТТ",					ТекстИДТТ);
	СтруктураПараметры.Вставить("ИдентификаторыТоваров",			ТекстИДТоваров);
	СтруктураПараметры.Вставить("ТекстИДТТ",						ТекстИДТТ);
	СтруктураПараметры.Вставить("ТекстИДТоваров",					ТекстИДТоваров);
	СтруктураПараметры.Вставить("ОстаткиСледДнем",					ОстаткиСледДнем);
	СтруктураПараметры.Вставить("ЗагружатьФОПередРаспределением",	ЗагружатьФОПередРаспределением);
	
	ТекстНомер_Р = ДопМодульСервер.ПолучитьНомерРаспределенияПоТТ(ДатаЗаказов, мСписокНоменклатуры, Объект.Склад,, ПроверятьБлокировку, Объект.СкладХранения, Число(Формат(ЭтоПредварительноеРаспределение, "БЛ=0; БИ=1")), СтруктураПараметры);
	Если ПустаяСтрока(ТекстНомер_Р) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("Номер", ТекстНомер_Р);
	
	УИДРаспределения = ДобавитьРаспределениеВОчередьНаСервере(СтруктураПараметры);
	ОбновитьСписокРаспределений();

КонецПроцедуры

//+++АК SHEP 2018.07.17 ИП-00019254
&НаСервереБезКонтекста
Функция ДобавитьРаспределениеВОчередьНаСервере(СтруктураПараметры)
	
	Обработки.РаспределениеТоваровПоТорговымТочкамПлюс.ДобавитьРаспределениеВОчередь(СтруктураПараметры);
	
	Обработки.РаспределениеТоваровПоТорговымТочкамПлюс.ПодключитьФоновыеЗадания();
	
КонецФункции

//+++АК SHEP 2018.07.25 ИП-00019254
&НаКлиенте
Процедура СписокРаспределенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокРаспределений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Поле.Имя = "СписокРаспределенийЗагрузить" И ЗначениеЗаполнено(ТекущиеДанные.Загрузить) Тогда
		СтруктураПараметры = Новый Структура("Номер, ДатаРаспределения,Организация,СтруктурноеПодразделение,Склад");
		ЗаполнитьЗначенияСвойств(СтруктураПараметры, ТекущиеДанные);
		СтруктураПараметры.Вставить("УИДРаспределения", ТекущиеДанные.УИД);
		ОткрытьФорму("Обработка.ЗагрузитьРаспределение1.Форма", СтруктураПараметры, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.08.28 ИП-00019254
&НаКлиенте
Процедура ПредварительноеРаспределение(Команда)
	ЭтоПредварительноеРаспределение = НЕ ЭтоПредварительноеРаспределение;
	Элементы.СписокРаспределенийПредварительноеРаспределение.Пометка = ЭтоПредварительноеРаспределение;
КонецПроцедуры

//+++АК SHEP 2018.10.11 ИП-00020026
&НаКлиенте
Процедура СписокРаспределенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокРаспределений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Элементы.СписокРаспределенийЗавершитьРаспределениеСОшибкой.Доступность = ВозможноЗавершитьРаспределениеСОшибкой(ТекущиеДанные.Состояние);
	
КонецПроцедуры

//+++АК SHEP 2018.10.11 ИП-00020026
&НаКлиентеНаСервереБезКонтекста
Функция ВозможноЗавершитьРаспределениеСОшибкой(Состояние)
	
	МассивНедоступныхСостоянийДляОщибки = Новый Массив;
	МассивНедоступныхСостоянийДляОщибки.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.РаспределениеЗавершено"));
	МассивНедоступныхСостоянийДляОщибки.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ОшибкаРаспределения"));
	МассивНедоступныхСостоянийДляОщибки.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ЗагрузкаРасходников"));
	МассивНедоступныхСостоянийДляОщибки.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.РасходникиЗагружены"));
	
	Возврат (МассивНедоступныхСостоянийДляОщибки.Найти(Состояние) = Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРаспределениеСОшибкой(Команда)
	
	ОбновитьСостоянияРаспределенийНаСервере();
	Элементы.СписокРаспределений.Обновить();
	
	ТекущиеДанные = Элементы.СписокРаспределений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ВозможноЗавершитьРаспределениеСОшибкой(ТекущиеДанные.Состояние) Тогда
		ЗавершитьРаспределениеСОшибкойНаСервере(ТекущиеДанные.УИД);
		Элементы.СписокРаспределений.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьРаспределениеСОшибкойНаСервере(УИДРаспределения)
	
	РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(
		УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ОшибкаРаспределения"), "Установлено вручную");
	
КонецПроцедуры
