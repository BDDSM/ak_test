
&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНачала = СтандартныйПериод.ДатаНачала;
		Объект.ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИтогоСумма=0;
	
	ОтборВозвратПолучен = "Все";
	ОтборВыгружен = "Все";
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ДатаЗакрытияРедактированияКМ3 = ПолучитьКонстанту();
	
	Элементы.ДатаЗакрытияРедактированияКМ3.Доступность = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеКонстантыРедактированияАктовКМ3, Ложь);
	
	ПерестроитьДеревоДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонстанту()
	
	Возврат Константы.ДатаЗапретаРедактированияАктовКМ3.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьКонстанту(Дата)
	
	Константы.ДатаЗапретаРедактированияАктовКМ3.Установить(Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗакрытияРедактированияКМ3ПриИзменении(Элемент)
	
	УстановитьКонстанту(ДатаЗакрытияРедактированияКМ3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПеречитатьКонстанту", 60);
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКонстанту()
	ДатаЗакрытияРедактированияКМ3 = ПолучитьКонстанту();
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока
		И Элементы.ДеревоДанных.ТекущиеДанные.Группировка <= ДатаЗакрытияРедактированияКМ3 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Данные находятся в закрытом периоде"
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока
		И Элементы.ДеревоДанных.ТекущиеДанные.Группировка <= ДатаЗакрытияРедактированияКМ3 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Данные находятся в закрытом периоде. Редактирование запрещено";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьДеревоДанных()
	
	ДеревоДанных.ПолучитьЭлементы().Очистить();
	ДанныеИзменены = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка
	               |ПОМЕСТИТЬ ВТ_Листы
	               |ИЗ
	               |	Документ.ЛистУчета.ВозвратыИзСейфа КАК ЛистУчетаВозвратыИзСейфа
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаКон, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
	               |		ПО ЛистУчетаВозвратыИзСейфа.Ссылка.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект
	               |ГДЕ
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаВозвратыИзСейфа.Ссылка.Проведен = ИСТИНА
	               |	И (ЛистУчетаВозвратыИзСейфа.Сумма <> 0
	               |			ИЛИ ЛистУчетаВозвратыИзСейфа.ПолученаСумма <> 0)
	               |	И (ЛистУчетаВозвратыИзСейфа.Ссылка.Организация = &Организация
	               |			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |	И (ЛистУчетаВозвратыИзСейфа.Ссылка.ТорговаяТочка В (&СписокТТ)
	               |			ИЛИ &ЕстьОтборПоТТ = ЛОЖЬ)
				   |	И (СоответствиеОбъектРольСрезПоследних.РольПользователя = &РольПользователя
	               |			ИЛИ &РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВозвратыИзСейфа.Сумма,
	               |	ЛистУчетаВозвратыИзСейфа.ВозвратПолучен,
	               |	ЛистУчетаВозвратыИзСейфа.ПолученаСумма,
	               |	ЛистУчетаВозвратыИзСейфа.ВыгруженВБухгалтерию,
	               |	ЛистУчетаВозвратыИзСейфа.ВозвратПолучилCотрудник,
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка.Организация КАК Организация,
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаВозвратыИзСейфа.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ЛистУчетаВозвратыИзСейфа.НомерСтроки,
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка,
	               |	ЛистУчетаВозвратыИзСейфа.КлючСтроки,
	               |	ЛистУчетаВозвратыИзСейфа.СуммаПоНДС10,
	               |	ЛистУчетаВозвратыИзСейфа.СуммаПоНДС18,
	               |	ЛистУчетаВозвратыИзСейфа.Комментарий,
	               |	ВЗ_Товары.Сумма КАК СуммаПоТоварам
	               |ИЗ
	               |	Документ.ЛистУчета.ВозвратыИзСейфа КАК ЛистУчетаВозвратыИзСейфа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЛистУчетаТоварыПоВозвратам.Ссылка КАК Ссылка,
	               |			ЛистУчетаТоварыПоВозвратам.КлючСтрокиВозврата КАК КлючСтрокиВозврата,
	               |			СУММА(ЛистУчетаТоварыПоВозвратам.Сумма) КАК Сумма
	               |		ИЗ
	               |			Документ.ЛистУчета.ТоварыПоВозвратам КАК ЛистУчетаТоварыПоВозвратам
	               |		ГДЕ
	               |			ЛистУчетаТоварыПоВозвратам.Ссылка В
	               |					(ВЫБРАТЬ
	               |						ВТ_Листы.Ссылка
	               |					ИЗ
	               |						ВТ_Листы КАК ВТ_Листы)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЛистУчетаТоварыПоВозвратам.Ссылка,
	               |			ЛистУчетаТоварыПоВозвратам.КлючСтрокиВозврата) КАК ВЗ_Товары
	               |		ПО ЛистУчетаВозвратыИзСейфа.Ссылка = ВЗ_Товары.Ссылка
	               |			И ЛистУчетаВозвратыИзСейфа.КлючСтроки = ВЗ_Товары.КлючСтрокиВозврата
	               |ГДЕ
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Листы.Ссылка
	               |			ИЗ
	               |				ВТ_Листы КАК ВТ_Листы)
				   |	И (ЛистУчетаВозвратыИзСейфа.ВозвратПолучен = &ОтборВозвраты
	               |			ИЛИ &ОтборВозвраты = НЕОПРЕДЕЛЕНО)
				   |	И (ЛистУчетаВозвратыИзСейфа.ВыгруженВБухгалтерию = &ОтборВыгружен
	               |			ИЛИ &ОтборВыгружен = НЕОПРЕДЕЛЕНО)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Дата,
	               |	ЛистУчетаВозвратыИзСейфа.Ссылка.ТорговаяТочка.НомерТочки,
	               |	ТорговаяТочка";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокТТ", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("РольПользователя", БухгалтерРасчетчик);
	Запрос.УстановитьПараметр("ЕстьОтборПоТТ", СтруктурныеЕдиницы.Количество() > 0);
	Если ОтборВозвратПолучен = "Все" Тогда
		Запрос.УстановитьПараметр("ОтборВозвраты", Неопределено);
	ИначеЕсли ОтборВозвратПолучен = "Полученные" Тогда
		Запрос.УстановитьПараметр("ОтборВозвраты", Истина);
	ИначеЕсли ОтборВозвратПолучен = "Не полученные" Тогда
		Запрос.УстановитьПараметр("ОтборВозвраты", Ложь);	
	КонецЕсли;
	Если ОтборВыгружен = "Все" Тогда
		Запрос.УстановитьПараметр("ОтборВыгружен", Неопределено);
	ИначеЕсли ОтборВыгружен = "Выгруженные" Тогда
		Запрос.УстановитьПараметр("ОтборВыгружен", Истина);
	ИначеЕсли ОтборВыгружен = "Не выгруженные" Тогда
		Запрос.УстановитьПараметр("ОтборВыгружен", Ложь);	
	КонецЕсли;
	
	ОргВкусвилл = Справочники.Организации.НайтиПоКоду("000000006");
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[1].Выбрать();
	ИтогоСумма=0;
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		СтрокаОрганизация = ДеревоДанных.ПолучитьЭлементы().Добавить();
		СтрокаОрганизация.Группировка = Выборка.Организация;
		Пока Выборка.Следующий() Цикл
			СтрокаДетальная = СтрокаОрганизация.ПолучитьЭлементы().Добавить();
			СтрокаДетальная.ЭтоДетальнаяСтрока = Истина;
			СтрокаДетальная.Группировка = Выборка.Дата;
			
			СтрокаДетальная.Организация = Выборка.Организация;
			СтрокаДетальная.Сумма = Выборка.Сумма;
			СтрокаДетальная.СуммаПолучено = Выборка.ПолученаСумма;
			СтрокаДетальная.ВозвратПолучен = Выборка.ВозвратПолучен;
			СтрокаДетальная.ВозвратПолучилCотрудник = Выборка.ВозвратПолучилCотрудник;
			СтрокаДетальная.ВыгруженВБухгалтерию = Выборка.ВыгруженВБухгалтерию;
			СтрокаДетальная.ЛистУчета = Выборка.Ссылка;
			СтрокаДетальная.НомерСтроки = Выборка.НомерСтроки;
			СтрокаДетальная.СтруктурнаяЕдиница = Выборка.ТорговаяТочка;
			СтрокаДетальная.СуммаПоНДС10 = Выборка.СуммаПоНДС10;
			СтрокаДетальная.СуммаПоНДС18 = Выборка.СуммаПоНДС18;
			СтрокаДетальная.КлючСтроки = Выборка.КлючСтроки;
			СтрокаДетальная.СуммаПоТоварам = Выборка.СуммаПоТоварам;
			Если ЗначениеЗаполнено(СтрокаДетальная.СуммаПолучено) Тогда
				Если СтрокаДетальная.СуммаПолучено <> СтрокаДетальная.СуммаПоТоварам Тогда
					СтрокаДетальная.СуммаТовараОтличаетсяОтСуммы = Истина;
				КонецЕсли;
			Иначе
				Если СтрокаДетальная.Сумма <> СтрокаДетальная.СуммаПоТоварам Тогда
					СтрокаДетальная.СуммаТовараОтличаетсяОтСуммы = Истина;
				КонецЕсли;
			КонецЕсли;	
			СтрокаДетальная.Комментарий = Выборка.Комментарий;
			ИтогоСумма=ИтогоСумма+СтрокаДетальная.СуммаПоТоварам;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева)
	
	Для Каждого СтрокаВложенная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанных.Развернуть(СтрокаВложенная.ПолучитьИдентификатор());
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если ДанныеИзменены Тогда
		Ответ = Вопрос("Сохранить выполненные изменения?", РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзмененияСервер();
		КонецЕсли;	
	КонецЕсли;
	
	ПерестроитьДеревоДанных();
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции	

&НаКлиенте
Процедура ДеревоДанныхВозвратПолученПриИзменении(Элемент)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.ВозвратПолучен Тогда
		Элементы.ДеревоДанных.ТекущиеДанные.ВозвратПолучилCотрудник = ПолучитьТекущегоПользователя();
	Иначе
		Элементы.ДеревоДанных.ТекущиеДанные.ВозвратПолучилCотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛистУчета(Команда)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные = Неопределено
		ИЛИ НЕ Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(Элементы.ДеревоДанных.ТекущиеДанные.ЛистУчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСервер()
	
	ТаблицаИзмененияПоЛистам = Новый ТаблицаЗначений();
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ЛистУчета", Новый ОписаниеТипов("ДокументСсылка.ЛистУчета"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("НомерСтрокиКМ", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ПолученаСумма", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ВозвратПолучен", Новый ОписаниеТипов("Булево"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ВыгруженВБухгалтерию", Новый ОписаниеТипов("Булево"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ВозвратПолучилCотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			Если СтрокаВложенная.СтрокаИзменена Тогда
				Если ЗначениеЗаполнено(СтрокаВложенная.НомерСтроки) Тогда
					СтрокаДоб = ТаблицаИзмененияПоЛистам.Добавить();
					СтрокаДоб.ЛистУчета = СтрокаВложенная.ЛистУчета;
					СтрокаДоб.НомерСтрокиКМ = СтрокаВложенная.НомерСтроки;
					СтрокаДоб.Комментарий = СтрокаВложенная.Комментарий;
					СтрокаДоб.ПолученаСумма = СтрокаВложенная.СуммаПолучено;
					СтрокаДоб.ВозвратПолучен = СтрокаВложенная.ВозвратПолучен;
					СтрокаДоб.ВозвратПолучилCотрудник = СтрокаВложенная.ВозвратПолучилCотрудник;
					СтрокаДоб.ВыгруженВБухгалтерию = СтрокаВложенная.ВыгруженВБухгалтерию;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ЛистУчета,
	               |	Таб.НомерСтрокиКМ,
	               |	Таб.Комментарий,
	               |	Таб.ПолученаСумма,
	               |	Таб.ВозвратПолучен,
	               |	Таб.ВыгруженВБухгалтерию,
	               |	Таб.ВозвратПолучилCотрудник
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ЛистУчета КАК ЛистУчета,
	               |	ВТ_Данные.НомерСтрокиКМ,
	               |	ВТ_Данные.Комментарий,
	               |	ВТ_Данные.ПолученаСумма,
	               |	ВТ_Данные.ВозвратПолучен,
	               |	ВТ_Данные.ВыгруженВБухгалтерию,
	               |	ВТ_Данные.ВозвратПолучилCотрудник
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаИзмененияПоЛистам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ЛистУчета") Цикл
		ЛистОбъект = Выборка.ЛистУчета.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			СтрокаДок = ЛистОбъект.ВозвратыИзСейфа[Выборка.НомерСтрокиКМ - 1];
			СтрокаДок.ВозвратПолучен = Выборка.ВозвратПолучен;
			СтрокаДок.Комментарий = Выборка.Комментарий;
			СтрокаДок.ПолученаСумма = Выборка.ПолученаСумма;
			СтрокаДок.ВыгруженВБухгалтерию = Выборка.ВыгруженВБухгалтерию;
			СтрокаДок.ВозвратПолучилCотрудник = Выборка.ВозвратПолучилCотрудник;
		КонецЦикла;
		ЛистОбъект.ВозвратыРедактировались = Истина;
		ЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			СтрокаВложенная.СтрокаИзменена = Ложь;
		КонецЦикла;	
	КонецЦикла;
	
	ДанныеИзменены = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	ЗаписатьИзмененияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ДанныеИзменены Тогда
		Ответ = Вопрос("Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзмененияСервер();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуВБухгалтерию()
	
	МасивОрг = Новый Массив();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		МасивОрг.Добавить(Объект.Организация);
	КонецЕсли;	
	Обработки.ВозвратыИзСейфа.ВыгрузитьВозвратыВБухгалтерию(Объект.ДатаНачала, Объект.ДатаОкончания, МасивОрг, СтруктурныеЕдиницы.ВыгрузитьЗначения());
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьВБухгалтерию(Команда)
	
	Ответ = Вопрос("Будет выполнена выгрузка данных в бухгалтерию по настроенному отбору. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Сохранить данные?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзмененияСервер();
	КонецЕсли;

	//+++АК Susk (Суслин К.В.) 2018.05.07 ИП-00017910
	МайМесяц = Дата("20180501");
	
	Если Объект.ДатаНачала >= МайМесяц Или Объект.ДатаОкончания >= МайМесяц Тогда
		Предупреждение("Период не может пересекаться с маем 2018 года. С мая 2018 года выгрузка будет производиться другой обработкой!");
		Возврат;
	КонецЕсли;	
	//---АК Susk (Суслин К.В.) 
	
	ВыполнитьВыгрузкуВБухгалтерию();
	ПерестроитьДеревоДанных();
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоТоварамВозвратаСервер(ТекСтрока)
	
	ТекДанные = ДеревоДанных.НайтиПоИдентификатору(ТекСтрока);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ТекДанные.ЛистУчета);
	Запрос.УстановитьПараметр("КлючСтрокиВозврата", ТекДанные.КлючСтроки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаТоварыПоВозвратам.Номенклатура,
	               |	ЛистУчетаТоварыПоВозвратам.Сумма,
	               |	ЛистУчетаТоварыПоВозвратам.СуммаПоНДС10,
	               |	ЛистУчетаТоварыПоВозвратам.СуммаПоНДС18,
	               |	ЛистУчетаТоварыПоВозвратам.Количество
	               |ИЗ
	               |	Документ.ЛистУчета.ТоварыПоВозвратам КАК ЛистУчетаТоварыПоВозвратам
	               |ГДЕ
	               |	ЛистУчетаТоварыПоВозвратам.Ссылка = &Ссылка
	               |	И ЛистУчетаТоварыПоВозвратам.КлючСтрокиВозврата = &КлючСтрокиВозврата
	               |	И ЛистУчетаТоварыПоВозвратам.Номенклатура.СлужебныйТовар = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТоварыПоВозврату.Добавить(), Выборка);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоТоварамВозврата()
	
	ОбновитьДанныеПоТоварамВозвратаСервер(Элементы.ДеревоДанных.ТекущаяСтрока);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоДанныхПриАктивизацииСтроки(Элемент)
	
	ТоварыПоВозврату.Очистить();
	Если Элементы.ДеревоДанных.ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(Элементы.ДеревоДанных.ТекущиеДанные.ЛистУчета) Тогда
		Возврат;
	КонецЕсли;	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоТоварамВозврата", 0.1, Истина);
	
КонецПроцедуры

Функция ПолучитьСписокРасчетчиков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	РолиПользователейТипыРолей.Ссылка
				   |ИЗ
				   |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
				   |ГДЕ
				   |	РолиПользователейТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура БухгалтерРасчетчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокРасчетчиков());
	
КонецПроцедуры


&НаКлиенте
Процедура СверитьСБухгалтерией(Команда)
	
	ОткрытьФорму("Обработка.ВозвратыИзСейфа.Форма.ФормаСверкаСБухгалтерией");
	
КонецПроцедуры

