Перем ОсновнойМодуль Экспорт;
Перем РеквизитыПересчета Экспорт;
Перем ДанныеОтладки Экспорт;

Перем КонвертацияBase64; //для плагина  Плагин_ВзаимодействиеСМодулем1сДиадок
//основные методы ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура Инициализировать(ОбработкаКонтурEDI) Экспорт
	
	ОсновнойМодуль = ОбработкаКонтурEDI;
	
	РеквизитыПересчета = Истина;//оставлен для совместимости со старыми версиями
	
	//кэшируем настройки отладки ПМ
	ДанныеОтладки = ОсновнойМодуль.ПолучитьСписокСвойствEDI("ПодключаемыйМодульСообщатьОСобытиях,ПодключаемыйМодульИспользоватьОтладку,ПодключаемыйМодульСобытиеОтладки");
	
КонецПроцедуры

Функция ОбработатьСобытиеКонтурEDI(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина) Экспорт
	
	// Данная функция - основная точка входа в ПМ, здесь происходит обработка всех возможных событий.
	// Если вам нужно что-то изменить в типовой логике модуля, но вы не знаете, каким событием воспользоваться, просто напишите здесь 
	// Сообщить(ИмяСобытия);
	// И в пользовательском режиме отслеживайте, какие события вызываются при действиях пользователя.
	
	//отладчик - конструктор -----------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------
	
	ОткрытьКонструктор(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//плагины --------------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------	
		
	Результат = ПрименитьПлагины(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	Если Не Результат = Неопределено Тогда 
		Возврат Результат 
	КонецЕсли;
	
	//дополнительные обработчики -------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------	
	Если ИмяСобытия = "ПолучитьВиртуальныеСвязанныеORDERS" Тогда
		
		////Таб = Новый ТаблицаЗначений;
		////ДобавитьКолонкиВТаблицуЗначений(Таб,"ORDERS,ORDERS_ТипСообщения,ORDERS_Статус,Документ,ORDRSP,ORDRSP_Статус,ЭтоТекущийДокумент");
		//
		//Если Параметры.ДокументСсылка = Неопределено Тогда
		//	Возврат Неопределено
		//КонецЕсли;	
		//	
		//СтандартнаяОбработкаEDI = Ложь;
		//
		//Если ТипЗнч(Параметры.ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//	Документ_ORDERS = Параметры.ДокументСсылка.ДокументОснование;
		//ИначеЕсли ТипЗнч(Параметры.ДокументСсылка) = Тип("ДокументСсылка.МОЛ_ЗаказПоМаршруту") Тогда
		//	Документ_ORDERS = Параметры.ДокументСсылка;
		//КонецЕсли;
		//
		//
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("Документ_ORDERS", Документ_ORDERS);
		//
		//Запрос.Текст = 
		//"ВЫБРАТЬ ПЕРВЫЕ 1
		//|	КонтурEDI_Сообщения.Ссылка,
		//|	КонтурEDI_Сообщения.ID
		//|ПОМЕСТИТЬ ВТ_ИД_ORDERS
		//|ИЗ
		//|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		//|ГДЕ
		//|	КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
		//|	И КонтурEDI_Сообщения.Документ = &Документ_ORDERS
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	КонтурEDI_Сообщения_ORDERS.Ссылка КАК ORDERS,
		//|	КонтурEDI_Сообщения_ORDERS.ТипСообщения КАК ORDERS_ТипСообщения,
		//|	КонтурEDI_Сообщения_ORDERS.Статус КАК ORDERS_Статус,
		//|	ВЫРАЗИТЬ(КонтурEDI_Сообщения_ORDERS.Документ КАК Документ.МОЛ_ЗаказПоМаршруту) КАК Документ,
		//|	ВЫБОР
		//|		КОГДА КонтурEDI_Сообщения_ORDERS.Документ = &Документ_ORDERS
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ КАК ЭтоТекущийДокумент
		//|ПОМЕСТИТЬ ВТ_ORDERS
		//|ИЗ
		//|	ВТ_ИД_ORDERS КАК ВТ_ИД_ORDERS
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_ORDERS
		//|		ПО ВТ_ИД_ORDERS.ID = КонтурEDI_Сообщения_ORDERS.ID
		//|			И (КонтурEDI_Сообщения_ORDERS.ТипСообщения = ""ORDERS""
		//|				ИЛИ КонтурEDI_Сообщения_ORDERS.ТипСообщения = ""#ORDERS"")
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Документ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЗаказПокупателя.Ссылка КАК Док_ORDRSP,
		//|	МОЛ_ЗаказПоМаршруту.Ссылка КАК Док_ORDERS
		//|ПОМЕСТИТЬ ВТ_Док_ORDRSP
		//|ИЗ
		//|	ВТ_ORDERS КАК ВТ_ORDERS
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МОЛ_ЗаказПоМаршруту КАК МОЛ_ЗаказПоМаршруту
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		//|			ПО (ЗаказПокупателя.ДокументОснование = МОЛ_ЗаказПоМаршруту.Ссылка)
		//|		ПО ВТ_ORDERS.Документ = МОЛ_ЗаказПоМаршруту.Ссылка
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	КонтурEDI_Сообщения_ORDRSP.Ссылка КАК ORDRSP,
		//|	КонтурEDI_Сообщения_ORDRSP.Статус КАК ORDRSP_Статус,
		//|	ВТ_ORDERS.ORDERS,
		//|	ВТ_ORDERS.ORDERS_ТипСообщения,
		//|	ВТ_ORDERS.ORDERS_Статус,
		//|	ВТ_ORDERS.Документ,
		//|	ВТ_ORDERS.ЭтоТекущийДокумент
		//|ИЗ
		//|	ВТ_ORDERS КАК ВТ_ORDERS
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Док_ORDRSP КАК ВТ_Док_ORDRSP
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_ORDRSP
		//|			ПО ВТ_Док_ORDRSP.Док_ORDRSP = КонтурEDI_Сообщения_ORDRSP.Документ
		//|		ПО ВТ_Док_ORDRSP.Док_ORDERS = ВТ_ORDERS.Документ
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВТ_ORDERS.ORDERS";
		//
		//Таб = Запрос.Выполнить().Выгрузить();
		//
		//Возврат Таб;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьСтавкуНДС" Тогда
		
		// СтандартнаяОбработкаEDI = Ложь;
		// СтавкаНДС = Параметры.СтавкаНДС;
		//
		//Если СтавкаНДС = Справочники.СтавкиНДС.Ставка10 Тогда
		//	Возврат 10
		//ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.Ставка18 Тогда
		//	Возврат 18
		//ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.Ставка20 Тогда
		//	Возврат 20
		//Иначе
		//	Возврат 0
		//КонецЕсли;
			
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавитьОсобенностиСообщений" Тогда
		//Это универсальный добавлятель полей в EDI, ключ поиска мест использования по:
		//	"Для каждого ОсобенностьСообщения Из ОсобенностиСообщений Цикл"
		//Это событие не добавляет поле объекта XDTO!!! убедитесь что xsd схема в макете СхемыСообщений знает про ваше поле

		////пример///////////////////////////////////
		//НоваяОсобенность = Параметры.ТаблицаОсобенностей.Добавить();
		//НоваяОсобенность.Партнер = "";                    //можно оставить пустым - тогда по всем будет, можно просто через запятую псевдонимы вида: tander, billa
		//НоваяОсобенность.ТипыСообщения = "DESADV";
		//НоваяОсобенность.Наименование = "ВСДUUID" ;  //наименование по сути только для представления пользователю. Везде обращаться следует только по идентификатору!
		//НоваяОсобенность.Идентификатор = "ВСДUUID" ;
		//НоваяОсобенность.Путьxml = "lineItem.vsdUUID" ;  //XDTO путь!
		//НоваяОсобенность.Направление = "Исходящее" ;	
		//НоваяОсобенность.ЭтоСтруктура = ложь; 
		//
		//НоваяОсобенность.Ревенство1СEDI = "=" ; // = / 1С / EDI	//
		//НоваяОсобенность.ТипЗначения1С = "Строка255" ;	
		//НоваяОсобенность.ТипЗначенияEDI = "Строка255" ;	
		//
		//НоваяОсобенность.ВыводитьВКарточке = Истина;
		//НоваяОсобенность.ВалидироватьЗаполнение = Истина;
		//НоваяОсобенность.ДобавитьНастройкуПартнера = Истина;     //галочку Булево  или или 
		
		////еще пример///////////////////////////////////
		//НоваяОсобенность = Параметры.ТаблицаОсобенностей.Добавить();
		//НоваяОсобенность.Партнер = "";
		//НоваяОсобенность.ТипыСообщения = "DESADV";
		//НоваяОсобенность.Наименование = "ТестовыйРеквизит" ;  
		//НоваяОсобенность.Идентификатор = "ТестовыйРеквизит" ;
		//НоваяОсобенность.Путьxml = "testUnit" ;                
		//НоваяОсобенность.Направление = "Исходящее" ;	
		//НоваяОсобенность.ЭтоСтруктура = ложь; 
		//
		//НоваяОсобенность.Ревенство1СEDI = "=" ; // = / 1С / EDI	//
		//НоваяОсобенность.ТипЗначения1С = "Строка255" ;	
		//НоваяОсобенность.ТипЗначенияEDI = "Строка255" ;	
		//
		//НоваяОсобенность.ВыводитьВКарточке = Истина;
		//НоваяОсобенность.ВалидироватьЗаполнение = Истина;
		//НоваяОсобенность.ДобавитьНастройкуПартнера = Ложь;     //галочку Булево  //или или 
		
	КонецЕсли;
	
	
	//+обработчики для учета особенностей текущей конфигурации
	//----------------------------------------------------------------------------------------------------------------
	
	Если ИмяСобытия = "ПередСвязываниемСообщенияСДокументомЧерезФорму" Тогда

		//// Параметры: Документ, Сообщение, Форма
		//// В результате необходимо вернуть СтруктураВозврата

		//СтруктураВозврата = Новый Структура;
		//СтруктураВозврата.Вставить("Успешно", 			Ложь);
		//СтруктураВозврата.Вставить("ОписаниеОшибки", 	"");

		//Документ = Параметры.Документ;
		//Сообщение = Параметры.Сообщение;
		//ТоварыСообщения = Параметры.Форма.Товары;
		//КоличествоОшибок = 0;

		//// Проверка на наличие сопоставленной точки доставки
		//Если НЕ ЗначениеЗаполнено(Сообщение.Грузополучатель1С.СвязанныйСправочник1) 
		//	ИЛИ НЕ ЗначениеЗаполнено(Сообщение.Грузополучатель1С.СвязанныйСправочник2) Тогда
		//	
		//	КоличествоОшибок = КоличествоОшибок + 1;
		//	СтруктураВозврата.ОписаниеОшибки = "Необходимо сопоставить точку доставки." + Символы.ПС;
		//	
		//КонецЕсли;
		//
		//// Проверка на наличие номенклатуры документа в сопоставлениях товаров из сообщения
		//// Написано для УФ_УТ, при необходимости внести изменения
		//ВсеСоответствияСообщения = Новый ТаблицаЗначений;
		//ВсеСоответствияСообщения.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		//ВсеСоответствияСообщения.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		//Массив = Новый Массив;
		//Массив.Добавить(Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		//Массив.Добавить(Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		//ОписаниеТиповЕдиницаИзмерения = Новый ОписаниеТипов(Массив); 
		//ВсеСоответствияСообщения.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТиповЕдиницаИзмерения);
		//
		//Для каждого Строка Из ТоварыСообщения Цикл
		//	
		//	СоответствияСтроки = ОсновнойМодуль.СоответствиеТоваров_НайтиНоменклатуру(Строка.GTIN, Строка.КодТовараПокупателя, Сообщение.Партнер);		 
		//	
		//	Для каждого Стр Из СоответствияСтроки Цикл
		//		НоваяСтрока = ВсеСоответствияСообщения.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		//	КонецЦикла;
		//	
		//КонецЦикла;
		//
		//Для каждого Строка Из Документ.Товары Цикл
		//	
		//	СтруктураПоиска = Новый Структура(
		//						"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения",
		//						Строка.Номенклатура,
		//						Строка.Характеристика,
		//						?(ЗначениеЗаполнено(Строка.Упаковка), Строка.Упаковка, Строка.Номенклатура.ЕдиницаИзмерения));
		//	
		//	НайденныеСтроки = ВсеСоответствияСообщения.НайтиСтроки(СтруктураПоиска);
		//	
		//	Если НайденныеСтроки.Количество() = 0 Тогда
		//		КоличествоОшибок = КоличествоОшибок + 1;
		//		
		//		Если Найти(СтруктураВозврата.ОписаниеОшибки, "В товарах сообщения не найдены товары из документа:") = 0 Тогда
		//			СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + "В товарах сообщения не найдены товары из документа:" + Символы.ПС;
		//		КонецЕсли;
		//		
		//		СтруктураВозврата.ОписаниеОшибки = 	СтруктураВозврата.ОписаниеОшибки + """" + Строка.Номенклатура.Наименование + """"
		//			+ ?(ЗначениеЗаполнено(Строка.Характеристика), ", Характеристика: """ + Строка.Характеристика, "")
		//			+ ", ед. изм.: """ + ?(ЗначениеЗаполнено(Строка.Упаковка), Строка.Упаковка.Наименование, Строка.Номенклатура.ЕдиницаИзмерения.Наименование) + """." + Символы.ПС;					
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//Если КоличествоОшибок = 0 Тогда
		//	СтруктураВозврата.Успешно = Истина;
		//Иначе
		//	СтруктураВозврата.ОписаниеОшибки = "Документ не привязан по причинам:" + Символы.ПС + СтруктураВозврата.ОписаниеОшибки;
		//КонецЕсли;
		//
		//// необходимо вернуть структуру 
		//Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПередАвтоотправкойСообщения" Тогда
		
		////Параметры: СтрокаСообщения, ТипСообщения
		////Используется для гибкой настройки автоотправки сообщений в разрезе организаций поставщика
		//
		//Организация		= Параметры.СтрокаСообщения.Организация;
		//ТипСообщения	= Параметры.ТипСообщения;	
		//
		//ЗаблокированныеСообщения = "PORDERS,ORDRSP,DESADV,INVOIC"; //Укажите какие сообщения заблокированы по организации
		//Если Найти(ЗаблокированныеСообщения,ТипСообщения)>0 Тогда
		//	Если Организация=Справочники.Организации.НайтиПоКоду("ВашКодОрганизацииПоКоторойЗаблокировано") Тогда  //Укажите Код организации по которой применять блокирование
		//		СтандартнаяОбработкаEDI = Ложь;  //Сам отказ от автоотправки этого сообщения
		//		Возврат Неопределено;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//////Блок можно повторять, тем самым накладывая проверки на несколько организааций.
		//////В общем случае у каждой организации могут быть заблокированы к автоотправке разные типы сообщений
		////ЗаблокированныеСообщения = "DESADV,INVOIC";  //например эти 2 сообщения
		////Если Найти(ЗаблокированныеСообщения,ТипСообщения)>0 Тогда
		////	Если Организация=Справочники.Организации.НайтиПоКоду("ВашКодДругойОрганизацииПоКоторойЗаблокированоИначе") Тогда  //Укажите Код организации по которой применять блокирование
		////		СтандартнаяОбработкаEDI = Ложь;  //Сам отказ от автоотправки этого сообщения
		////		Возврат Неопределено;
		////	КонецЕсли;
		////КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьРеквизитДокументаДляСообщения" Тогда
		
		//Параметры: Документ, Реквизит
		//Допустимые варианты реквизитов сейчас:
		//Договор, Контрагент, ВалютаДокумента, СуммаВключаетНДС, ДатаОтгрузки
		
		//Документ		= Параметры.Документ;
		//ИмяРеквизита	= Параметры.ИмяРеквизита;	
		//
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//	
		//	Если ИмяРеквизита = "СуммаВключаетНДС" Тогда
		//		СтандартнаяОбработкаEDI = Ложь;
		//		Если ЗначениеЗаполнено(Документ.Магазин)
		//			И Документ.Магазин.Владелец.Код = "ук0007532" Тогда 
		//			Возврат Ложь;
		//		Иначе
		//			Возврат Истина;
		//		КонецЕсли;
		//	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		//		СтандартнаяОбработкаEDI = Ложь;
		//		Возврат Неопределено;
		//	ИначеЕсли ИмяРеквизита = "Валюта" Тогда
		//		СтандартнаяОбработкаEDI = Ложь;
		//		Возврат Неопределено;	
		//	КонецЕсли;
		//	
		//Иначе			
		//	
		//	Если ИмяРеквизита = "Валюта" Тогда
		//		СтандартнаяОбработкаEDI = Ложь;
		//		Возврат Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФинальныйЗапросПостроенияСписка" Тогда
		
		// ******** Событие используется для изменения финального запроса построения списка 
		//- изменение этого запроса позволяет не терять в производительности при тяжелых кастомных операциях фильтрации списка
		
		//Можно построить дополнительные временные таблицы, размещая их до ВЫБРАТЬ РАЗРЕШЕННЫЕ основного запроса.
		//И использовать их данные для редактирования запроса
		
		
		////Пример 1 - Исключим строки с типом сообщения INVOIC по контрагентам, у которых в КонтурEDI_ДополнительныеРеквизиты установлено НетЭДО ИСТИНА
		////!!!Не работает на внешнем хранилище!!!
		//
		//ЗапросСКэшемПартнеров	= Параметры.ЗапросСКэшемПартнеров; //сам запрос, готовый к исполнению
		//РежимРаботы				= Параметры.РежимРаботы;           //Мы в этот момент поставщик или сеть?
		//
		////Замены в тексте запроса
		//ЧтоМеняем1="ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		//
		//НаЧтоМеняем1="ВЫБРАТЬ
		//|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК КонтрагентБезINVOIC
		//|ПОМЕСТИТЬ ВТ_КонтрагентыБезINVOIC
		//|ИЗ
		//|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		//|ГДЕ
		//|	КонтурEDI_ДополнительныеРеквизиты.Свойство = ""НетЭДО""
		//|	И КонтурEDI_ДополнительныеРеквизиты.Значение = ИСТИНА
		//|;
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		//ЗапросСКэшемПартнеров.Текст=СтрЗаменить(ЗапросСКэшемПартнеров.Текст,ЧтоМеняем1,НаЧтоМеняем1);
		//
		//ЧтоМеняем2="ВТ_ТабСообщений_Внешняя КАК ВТ_ТабСообщений_Внешняя";
		//
		//НаЧтоМеняем2="ВТ_ТабСообщений_Внешняя КАК ВТ_ТабСообщений_Внешняя
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыБезINVOIC КАК ВТ_КонтрагентыБезINVOIC
		//|		ПО ВТ_ТабСообщений_Внешняя.Документ.Контрагент = ВТ_КонтрагентыБезINVOIC.КонтрагентБезINVOIC
		//|";
		//ЗапросСКэшемПартнеров.Текст=СтрЗаменить(ЗапросСКэшемПартнеров.Текст,ЧтоМеняем2,НаЧтоМеняем2);
		//
		//ЧтоМеняем3="&УсловиеОрганизации";
		//
		//НаЧтоМеняем3="&УсловиеОрганизации 
		//|		 И (ВТ_КонтрагентыБезINVOIC.КонтрагентБезINVOIC ЕСТЬ NULL 
		//|		ИЛИ ВТ_ТабСообщений_Внешняя.ТипСообщения<>""INVOIC"")";
		//ЗапросСКэшемПартнеров.Текст=СтрЗаменить(ЗапросСКэшемПартнеров.Текст,ЧтоМеняем3,НаЧтоМеняем3);
		
		//Конец примера 1
		
		//Возможно требуется установка доп. параметров
		//ЗапросСКэшемПартнеров.УстановитьПараметр("НовыйПараметр1",ЗначениеПараметра1);
		
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПринятьВходящееСообщение" Тогда
		// ******** Можно создать целиком документ здесь на основании входящего сообщения
		// ВходящееСообщение	= Параметры.Сообщение;
		// ..... необходимо написать свой алгоритм создания документа
		// необходимо вернуть ссылку на созданный документ и изменить СтандартнаяОбработкаEDI на Ложь
		// СтандартнаяОбработкаEDI = Ложь;  // чтобы не вызывался стандартный алгоритм создания документа
		// Возврат ДокументСсылка;
	КонецЕсли;
		
	Если ИмяСобытия = "ПриЗагрузкеВходящегоСообщения" Тогда
		// вызывается, когда документ нашим модулем уже заполнен, но еще НЕ Записан
		
		// ВходящееСообщение	= Параметры.Сообщение;
		// ДокументСсылка		= Параметры.ДокументСсылка;    // - уже созданный по типовым правилам заказ покупателя, у которого можно дозаполнить свои поля
	
		Если Параметры.Сообщение.ТипСообщения = "ORDERS" Тогда
			
			//установка в документ заказа основного подразделения, установленного для текущего пользователя
			//Параметры.ДокументСсылка.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
			
			//установка в документ заказа основного склада, установленного для текущего пользователя
			//Если ЗначениеЗаполнено(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад")) Тогда
			//	Параметры.ДокументСсылка.СкладГруппа = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			//КонецЕсли;
			
			//дописать в комментарий документа заказа номер заказа
			//Параметры.ДокументСсылка.Комментарий = Параметры.ДокументСсылка.Комментарий + ". Заказ № " + Параметры.Сообщение.ДокументEDI.Номер;
			
			//дописать в комментарий документа заказа дату поставки
			//Параметры.ДокументСсылка.Комментарий = Параметры.ДокументСсылка.Комментарий + ". Дата поставки " + Строка(Параметры.Сообщение.ДатаПоставки);
			
			////Если хочется потестировать создание входящего заказа без его сохранения в базу, раскомментировать текст ниже
			////Это замена старой настройки "ОткрыватьФормуЗаказаПередЗаписью"
			
			//ФормаДокумента = Параметры.ДокументСсылка.ПолучитьФорму();
			//ФормаДокумента.ЭлементыФормы.Склад.ОграничениеТипа = Новый ОписаниеТипов(ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя"));
			//ФормаДокумента.ОткрытьМодально(); 
			//
			//СсылкаНаДокумент = Параметры.ДокументСсылка.Ссылка;		
			//
			//Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			//	ВызватьИсключение "Отменяем создание заказа";
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ИмяСобытия = "ПослеЗагрузкиВходящегоСообщения" Тогда
		// вызывается, когда документ нашим модулем уже заполнен и записан. Вызывается сразу после записи документа
		
		// ВходящееСообщение	= Параметры.Сообщение;
		// ДокументСсылка		= Параметры.ДокументСсылка;    // - уже созданный по типовым правилам заказ покупателя, у которого можно дозаполнить свои поля
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПередЗаписьюОбъектаСообщения" Тогда
		//Сразу после этого элемент справочника КонтурEDI_Сообщения будет записан в базу данных.
		//Здесь можно изменить логику сохранения, в том числе изменить статус/требуемое дуствие/ и любой реквизит
		//Обратите внимание что передается СообщениеОбъект - элемент справочника а не структура сообщения. 
		//Сама структура сообщения может быть получена так:  СообщениеСтруктура=Параметры.СообщениеОбъект.Хранилище.Получить();
		
		//Пример - пропуск DESADV если по части РТУ не нужно отправлять desadv, но нужно получать recadv
		//СообщениеОбъект = Параметры.СообщениеОбъект;
		
		//Если  СообщениеОбъект.ТипСообщения = "DESADV" Тогда
		//	Если СообщениеОбъект.Документ.ДоговорКонтрагента.Код = "УТ0000028" Тогда
		//		СообщениеОбъект.Статус = "Доставлен";
		//		СообщениеОбъект.ТребуемоеДействие = "РаботаЗавершена";
		//		СообщениеОбъект.Архив = 1;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьРезультатВалидацииСообщения" Тогда
		
		//Сообщение = Параметры.Сообщение;
		//
		//РезультатВалидации = Новый Структура;
		//
		//Успешно 	  	= Истина;
		//ТаблицаОшибок 	= Новый ТаблицаЗначений;
		//ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
		
		//пример валидации ORDRSP (проверяется наличие незаказанного товара)
		//Если Сообщение.ТипСообщения = "ORDRSP" Тогда
		//	Заказ1С = Документы.ЗаказПоставщику.НайтиПоНомеру( Сообщение.ЗаказEDI.Номер, ?( ЗначениеЗаполнено(Сообщение.ЗаказEDI.Дата), Сообщение.ЗаказEDI.Дата, ТекущаяДата() ) ); 
		//	Если ЗначениеЗаполнено(Заказ1С) Тогда
		//		ТоварыЗаказа 		= Заказ1С.Товары;
		//		ТоварыПодтверждения = Сообщение.Товары;
		//		Для Каждого Строка Из ТоварыПодтверждения Цикл
		//			Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры,Строка.ЕдиницаИзмерения);
		//			НайденныеСтроки = ТоварыЗаказа.НайтиСтроки(Отбор);
		//			Если НайденныеСтроки.Количество() = 0 Тогда
		//				Успешно 	= Ложь;
		//				НоваяСтрока = ТаблицаОшибок.Добавить();
		//				НоваяСтрока.ОписаниеОшибки = "Товар: " + Строка.Номенклатура + ?(ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры),Строка.ХарактеристикаНоменклатуры+" "," ") + "(" + Строка.ЕдиницаИзмерения + ") (GTIN: " + Строка.GTIN + ", код покупателя: " + Строка.КодТовараПокупателя + ", код поставщика: " + Строка.КодТовараПоставщика + ")" + " отсутствовал в заказе № " + Сообщение.ЗаказEDI.Номер + " от " + Формат(Сообщение.ЗаказEDI.Дата,"ДФ=dd.MM.yyyy");	
		//			КонецЕсли;
		//		КонецЦикла;
		//	Иначе
		//		Успешно 	= Ложь;
		//		НоваяСтрока = ТаблицаОшибок.Добавить();
		//		НоваяСтрока.ОписаниеОшибки = "Не определен документ ""Заказ покупателя"" по переданным реквизитам (заказ № " + Сообщение.ЗаказEDI.Номер + " от " + Формат(Сообщение.ЗаказEDI.Дата,"ДФ=dd.MM.yyyy" + ")");
		//	КонецЕсли;
		//	Если Не Успешно Тогда
		//		Сообщить("Валидация подтверждения заказа №" + СокрЛП(Сообщение.ЗаказEDI.Номер) + " от " + Формат(Сообщение.ЗаказEDI.Дата, "ДФ=dd.MM.yyyy") + " прошла неудачно:");
		//		Для Каждого Строка Из ТаблицаОшибок Цикл
		//			Сообщить(Символы.Таб + Строка.ОписаниеОшибки);
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
		//пример вализации на DESADV (проверяется, что по валидируемому уведомлению об отгрузке определился документ заказ поставщику)
		//Если Сообщение.ТипСообщения = "DESADV" Тогда
		//	Заказ = Документы.Заказ.НайтиПоНомеру( Сообщение.ЗаказEDI.Номер, ?( ЗначениеЗаполнено(Сообщение.ЗаказEDI.Дата), Сообщение.ЗаказEDI.Дата, ТекущаяДата() ) );
		//	Если Не ЗначениеЗаполнено(Заказ) Тогда
		//		Успешно 	= Ложь;
		//		НоваяСтрока = ТаблицаОшибок.Добавить();
		//		НоваяСтрока.ОписаниеОшибки = "В данном магазине не найден заказ: номер """ + Строка(Сообщение.ЗаказEDI.Номер) + """, дата заказа """ + ?( ЗначениеЗаполнено(Сообщение.ЗаказEDI.Дата), Сообщение.ЗаказEDI.Дата, ТекущаяДата() ) + """." ;
		//	КонецЕсли;
		//	Если Не Успешно Тогда
		//		Сообщить("Валидация уведомления об отгрузке по заказу №" + СокрЛП(Сообщение.ЗаказEDI.Номер) + " от " + Формат(Сообщение.ЗаказEDI.Дата, "ДФ=dd.MM.yyyy") + " прошла неудачно:");
		//		Для Каждого Строка Из ТаблицаОшибок Цикл
		//			Сообщить(Символы.Таб + Строка.ОписаниеОшибки);
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
		//РезультатВалидации.Вставить("Успешно", 			Успешно);
		//РезультатВалидации.Вставить("ТаблицаОшибок", 	ТаблицаОшибок);
		//
		//Возврат РезультатВалидации;
		
	КонецЕсли;
	
	
	Если ИмяСобытия = "ПолучитьНомерНаПечать" Тогда
		
		//ДокументДляПолученияНомера = Параметры.ДокументСсылка;
		//Возврат ДокументДляПолученияНомера.Номер;//вернем номер именно в таком виде, как он выглядит в журнале документов, не обрезая префиксы / лидирующие нули.
		
	КонецЕсли;
		
	Если ИмяСобытия = "ИзменитьТекстЗапроса" Тогда
		
		////можно изменить тексты некоторых запросов.
		////Например, в новом интерфейсе можно отправлять PORDERS не из документа ЗаказПокупателя, а из РеализацииТоваровУслуг
		//Если Параметры.ИдентификаторЗапроса = "Заказы_ДляОтправкиPORDERS" Тогда
		//	Если Параметры.ЗаменятьСсылкиВнешнегоХранилища Тогда
		//		//...
		//	Иначе
		//		Параметры.ТекстЗапроса = СтрЗаменить(Параметры.ТекстЗапроса,"Документ.ЗаказПокупателя","Документ.РеализацияТоваровУслуг");
		//	КонецЕсли;	
		//КонецЕсли;	
		
	КонецЕсли;
	
	
	Если ИмяСобытия = "ПослеОбработкиРасхожденияРезультатовПриемки" Тогда
		//Можно выполнить какие-то еще действия. Например, обработать возвратную тару, если выбрали действие "Создать корректировку реализации".
		//Документ - это сама Реализация, или Возврат - в тех случаях, когда создается возврат. 
		//ВыбранноеДействие = Параметры.ВыбранноеДействие;
		//ТаблицаРасхождений = Параметры.ТаблицаРасхождений;
		//ДокументСсылка = Параметры.Накладная;
		
		
		//дальше смотрим в исходный документ, и либо создаем новый документ ВозвратТоваровОтПокупателя, либо правим прямо в исходной реализации.
		
		
		//вариант 1: перенесем расхождения по таре в РеализациюТоваровУслуг
		//пройдемся по ТаблицаРасхождений, поищем строки в таб.части ВозвратнаяТара документа, и скорректируем /удалим их при необходимости
		
		//Если ВыбранноеДействие = "КорректировкаРеализации" Тогда
		//
		//	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		//	ЗаписатьДокумент = Ложь;
		//	Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		//		
		//		МассивУдаляемыхСтрок = Новый Массив;
		//		СтрокаДокумента = ДокументОбъект.ВозвратнаяТара.Найти(СтрокаРасхождений.Номенклатура);
		//		Если СтрокаДокумента<>Неопределено Тогда
		//			
		//			Если СтрокаРасхождений.КоличествоПринято = 0 Тогда
		//				//в RECADV по данной позиции 0, удалим эту строку вообще
		//				//тут мы предполагаем, что строка только одна! Иначе алгоритм будет на 3 этажа
		//				ЗаписатьДокумент = Истина;
		//				Если МассивУдаляемыхСтрок.Найти(СтрокаДокумента)=Неопределено Тогда
		//					МассивУдаляемыхСтрок.Добавить(СтрокаДокумента);
		//				КонецЕсли;
		//				
		//			Иначе
		//				//проверим расхождение цен/сумм
		//				Если 
		//					СтрокаДокумента.Количество<>СтрокаРасхождений.КоличествоПринято
		//					Или (СтрокаДокумента.Цена<>СтрокаРасхождений.ЦенаСНДСПринято и СтрокаРасхождений.ЦенаСНДСПринято<>0)
		//					Или (СтрокаДокумента.Сумма<>СтрокаРасхождений.СуммаСНДСПринято и СтрокаРасхождений.СуммаСНДСПринято<>0)
		//				Тогда
		//					СтрокаДокумента.Количество=СтрокаРасхождений.КоличествоПринято;
		//					СтрокаДокумента.Цена=СтрокаРасхождений.ЦенаСНДСПринято;
		//					СтрокаДокумента.Сумма=СтрокаРасхождений.СуммаСНДСПринято;
		//					//а если сеть не прислала цены/суммы?
		//					ЗаписатьДокумент = Истина;
		//				КонецЕсли;
		//				
		//			КонецЕсли;
		//		КонецЕсли;	
		//		
		//	КонецЦикла;	
		//	
		//	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		//		ДокументОбъект.ВозвратнаяТара.Удалить(УдаляемаяСтрока);
		//	КонецЦикла;	
		//	
		//	Если ЗаписатьДокумент Тогда
		//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//	КонецЕсли;	
		//КонецЕсли; //ВыбранноеДействие = "КорректировкаРеализации"	
		//
		////конец варианта 1
		
		
		///////////////////////////////-------------------------------------------------------//////////////////////////////////////////
		
		
		//вариант 2: создадим документ ВозвратТоваровОтПокупателя
		//пройдемся по ТаблицаРасхождений, поищем строки в таб.части ВозвратнаяТара документа, и скорректируем /удалим их при необходимости
		
		//Если ВыбранноеДействие = "КорректировкаРеализации" Тогда
		//	
		//	НовДок = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		//	НовДок.Дата = ТекущаяДата();
		//	НовДок.УстановитьНовыйНомер();
		//	
		//	ЗаписатьДокумент = Ложь;
		//	НовДок.Заполнить(ДокументСсылка);
		//	НовДок.Товары.Очистить();//из товаров ничего не возвращаем
		//	
		//	Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		//		
		//		СтрокаДокумента = НовДок.ВозвратнаяТара.Найти(СтрокаРасхождений.Номенклатура);
		//		Если СтрокаДокумента<>Неопределено Тогда
		//			
		//			Если 
		//				СтрокаДокумента.Количество<>СтрокаРасхождений.КоличествоПринято
		//				Или (СтрокаДокумента.Цена<>СтрокаРасхождений.ЦенаСНДСПринято и СтрокаРасхождений.ЦенаСНДСПринято<>0)
		//				Или (СтрокаДокумента.Сумма<>СтрокаРасхождений.СуммаСНДСПринято и СтрокаРасхождений.СуммаСНДСПринято<>0)
		//			Тогда
		//				СтрокаДокумента.Количество = (СтрокаРасхождений.КоличествоВНакладной - СтрокаРасхождений.КоличествоПринято);
		//				СтрокаДокумента.Цена = СтрокаРасхождений.ЦенаСНДСВНакладной;
		//				СтрокаДокумента.Сумма = СтрокаДокумента.Цена*СтрокаДокумента.Количество;
		//				ЗаписатьДокумент = Истина;
		//			ИначеЕсли СтрокаДокумента.Количество=СтрокаРасхождений.КоличествоПринято Тогда
		//				СтрокаДокумента.Количество = 0;//эта строка принята полностью, поставим в возврате 0, потом удалим
		//			КонецЕсли;
		//		КонецЕсли;	
		//		
		//	КонецЦикла;	
		//	
		//	Для Каждого Стр Из НовДок.ВозвратнаяТара Цикл
		//		Если Стр.Количество=0 Тогда//удалим пустые строки
		//			НовДок.ВозвратнаяТара.Удалить(Стр);
		//		КонецЕсли;	
		//	КонецЦикла;	
		//	
		//	Если ЗаписатьДокумент Тогда
		//		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		//		НовДок.Комментарий = "Создан из модуля Контур.EDI при обработке расхождений приемки";
		//		НовДок.ПолучитьФорму().ОткрытьМодально();//и покажем документ пользователю
		//	КонецЕсли;	
		//КонецЕсли; //ВыбранноеДействие = "КорректировкаРеализации"	
		////конец варианта 2
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбработатьРасхожденияРезультатовПриемки" Тогда
				
		//// если необходимо выполнять нестандартную обработку расхождения о приемке, то старую просто пропускаем и отображаем на экране инфу о расхождениях
		//
		//Для Каждого Стр из Параметры.ТаблицаРасхождений Цикл 
		//	Если Стр.КоличествоВНакладной <> Стр.КоличествоПринято Тогда 
		//		Сообщить ("Расхождения в товаре " + Стр.Номенклатура + "; В накладной " + Стр.КоличествоВНакладной + ", в приемке " + Стр.КоличествоПринято);	
		//	КонецЕсли;
		//КонецЦикла;
		//ОсновнойМодуль.УстановитьСтатусДокумента(Параметры.Накладная,"НакладнаяПринятЧастичноОбработан","Приемка");
		//СтандартнаяОбработкаEDI = Ложь;	
		
		//// если необходимо делать пересчет, т.к. в RECADV приходят коробки, а хранится в штуках.
		//// Часть №1. Часть вторая в ИмяСобытия = "ПослеПолученияТоваровДокумента1С"
		//Если Параметры.Накладная.Контрагент = Справочники.Контрагенты.НайтиПоКоду("КодМетроСС") Тогда
		//	Для Каждого Стр из Параметры.ТаблицаРасхождений Цикл 
		//		Стр.КоличествоПринято = Стр.КоличествоПринято * 10; // на самом деле вместо 10 д.б. Стр.Номенклатура.<КоэффПересчета>
		//		//Если Стр.КоличествоВНакладной <> Стр.КоличествоПринято Тогда 
		//		//            Сообщить ("Расхождения в товаре " + Стр.Номенклатура + "; В накладной " + Стр.КоличествоВНакладной + ", в приемке " + Стр.КоличествоПринято);    
		//		//КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
	КонецЕсли;
	
	
	Если ИмяСобытия = "ИзменитьНастройкуТиповОбъектов" Тогда
		
		////установим собственные типы объектов
		//ТаблицаТипов	= Параметры.ТаблицаТипов;
		//
		//Для каждого СтрокаТипов Из ТаблицаТипов Цикл
		//	
		//	Если СтрокаТипов.ИмяОбъекта ="ЮрФизЛицоСвое" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.Фирмы";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="Грузоотправитель" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.Фирмы";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="Договор" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.Договоры";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="РасчетныйСчет" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.РасчетныеСчета";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="ЕдиницаИзмерения" Тогда
		//		
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.ЕдИзм";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="ХарактеристикаНоменклатуры" Тогда
		//		СтрокаТипов.ИмяТипа	= Неопределено;
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="НомерГТД" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.ГТД";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="Страна" Тогда
		//		СтрокаТипов.ИмяТипа	= "СправочникСсылка.Страны";
		//		
		//	ИначеЕсли СтрокаТипов.ИмяОбъекта ="ВходящийВозврат" Тогда
		//		СтрокаТипов.ИмяТипа	= "ДокументСсылка.ВозвратОтПокупателя";
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;

	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПолученияТоваровДокумента1С" Тогда
		//// если необходимо делать пересчет, т.к. в RECADV приходят коробки, а хранится в штуках.
		//// Часть №2. Часть первая в ИмяСобытия = "ОбработатьРасхожденияРезультатовПриемки"
		//Если (Параметры.Источник = "ЗагрузкаУведомленияОПриемке") ИЛИ (Параметры.Источник = "ОбработкаРасхожденийПриемки") Тогда
		//	Если Параметры.ДокументСсылка.Контрагент = Справочники.Контрагенты.НайтиПоКоду("КодМетроСС") Тогда
		//		Для Каждого Стр Из Параметры.ТаблицаТоваров Цикл
		//			Стр.Количество = Стр.Количество / 10; // на самом деле вместо 10 д.б. Стр.Номенклатура.<КоэффПересчета>
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
		
	Если ИмяСобытия = "ПриУстановкеСтатусаСообщения" Тогда
		////Параметры: СообщениеСсылка,ДокументСсылка,ТипСообщения,Статус
		//
		////Когда сообщение успешно подписано в Диадок, поставим в исходном документе "Счет-фактура выданный" способ выставления "Электронно"
		////и заполним дату выставления
		//Если Параметры.Статус = "ИсходящийПодписанВДиадок" Тогда
		//	
		//	_Документ = Параметры.ДокументСсылка;
		//	Если ЗначениеЗаполнено(_Документ) 
		//		И _Документ.Метаданные().Реквизиты.Найти("КодСпособаВыставления")<>Неопределено
		//		И _Документ.КодСпособаВыставления <> 2
		//	Тогда
		//		//установим нужные реквизиты в счет-фактуре
		//		
		//		СФОбъект = _Документ.ПолучитьОбъект();
		//		СФОбъект.КодСпособаВыставления = 2; //Электронно
		//		СФОбъект.Выставлен = Истина;
		//		СФОбъект.ДатаВыставления = ОсновнойМодуль.ДатаXML_в_Дата1С(Сообщение.ДатаОтправки);
		//		Если Не ЗначениеЗаполнено(СФОбъект.ДатаВыставления) Тогда
		//			СФОбъект.ДатаВыставления = Сообщение.ДатаДокумента;
		//		КонецЕсли;	
		//		СФОбъект.Записать();
		//		
		//	КонецЕсли;	
		//	
		//КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьОписаниеПравилУстановкиСтатусаИТребуемогоДействия" Тогда
		
	КонецЕсли;
		
	Если ИмяСобытия = "ПолучитьТекстЗапросаДляТаблицы" Тогда
		//Используется для построения основного списка документов и для поиска связанных друг с другом документов
		//Параметры: ИмяТаблицы,		ТаблицаСоединенийДокументов,	НазначениеЗапроса
		
		
		////Пример: Плагин для Астора, который сильно не укладывается в текущую логику
		//Если Параметры.НазначениеЗапроса = "ПостроениеСписка" Тогда
		//	Если Параметры.ИмяТаблицы = "Заказ" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	Документы.Ссылка КАК Док_Заказ,
		//		|	Документы.Проведен КАК Док_Проведен,
		//		|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
		//		|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
		//		|	Документы.ИтогоСумма КАК СуммаДокумента,
		//		|	ВЫРАЗИТЬ(ЗакрытиеЗаказов.ДокументЗакрытия КАК Документ.ПриходнаяНакладная) КАК Док_ПриходнаяНакладная
		//		|ПОМЕСТИТЬ ВТ_Заказ
		//		|ИЗ
		//		|	Документ.Заказ КАК Документы
		//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
		//		|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = Документы.Контрагент)
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|		ПО (ЗакрытиеЗаказов.ПоДокументу = Документы.Ссылка)
		//		|ГДЕ
		//		|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		//		|	И НЕ Документы.ПометкаУдаления
		//		|	И &Условия
		//		|
		//		|ИНДЕКСИРОВАТЬ ПО
		//		|	Партнер,
		//		|	Док_Заказ,
		//		|	Док_ПриходнаяНакладная";
		//		;
		//	ИначеЕсли Параметры.ИмяТаблицы = "ПриходнаяНакладная" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
		//		|	ПриходнаяНакладная.Проведен КАК Док_Проведен,
		//		|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
		//		|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
		//		|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_Заказ,
		//		|	ПриходнаяНакладная.ИтогоВсего КАК СуммаДокумента,
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры
		//		|ПОМЕСТИТЬ ВТ_ПриходнаяНакладная
		//		|ИЗ
		//		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
		//		|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = ПриходнаяНакладная.Контрагент)
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|		ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
		//		|		ПО ПриходнаяНакладная.Ссылка = РегистрацияСчетаФактурыСоставНДС.Основание
		//		|ГДЕ
		//		|	ПриходнаяНакладная.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		//		|	И НЕ ПриходнаяНакладная.ПометкаУдаления
		//		|	И &Условия
		//		|
		//		|ИНДЕКСИРОВАТЬ ПО
		//		|	Партнер,
		//		|	Док_ПриходнаяНакладная,
		//		|	Док_Заказ,
		//		|	Док_РегистрацияСчетаФактуры";
		//		;
		//	ИначеЕсли Параметры.ИмяТаблицы = "РегистрацияСчетаФактурыСоставНДС" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка.Проведен КАК Док_Проведен,
		//		|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
		//		|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
		//		|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
		//		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
		//		|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_ПриходнаяНакладная,
		//		|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ,
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка.ИтогоВсего КАК СуммаДокумента
		//		|ПОМЕСТИТЬ ВТ_РегистрацияСчетаФактуры
		//		|ИЗ
		//		|	Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
		//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
		//		|		ПО РегистрацияСчетаФактурыСоставНДС.Ссылка.Контрагент = ТаблицаКэшПартнеровКонтрагентов.Контрагент
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|			ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
		//		|		ПО РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка
		//		|ГДЕ
		//		|	&Условия
		//		|
		//		|ИНДЕКСИРОВАТЬ ПО
		//		|	Партнер,
		//		|	Док_РегистрацияСчетаФактуры,
		//		|	Док_ПриходнаяНакладная,
		//		|	Док_Заказ";
		//		;
		//	КонецЕсли;	
		//КонецЕсли;	
		//
		//Если Параметры.НазначениеЗапроса = "СвязанныеСообщения" Тогда
		//	Если Параметры.ИмяТаблицы = "Заказ" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
		//		|	Заказ.Ссылка КАК Док_Заказ,
		//		|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_ПриходнаяНакладная
		//		|ИЗ
		//		|	Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		//		|			ПО ЗакрытиеЗаказов.ПоДокументу = Заказ.Ссылка
		//		|		ПО РегистрацияСчетаФактурыСоставНДС.Основание = ЗакрытиеЗаказов.ДокументЗакрытия
		//		|ГДЕ
		//		|	Заказ.Ссылка В(&Ссылка)";
		//	ИначеЕсли Параметры.ИмяТаблицы = "ПриходнаяНакладная" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
		//		|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
		//		|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ
		//		|ИЗ
		//		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|		ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
		//		|		ПО (РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка)
		//		|ГДЕ
		//		|	ПриходнаяНакладная.Ссылка В(&Ссылка)";
		//	ИначеЕсли Параметры.ИмяТаблицы = "РегистрацияСчетаФактурыСоставНДС" Тогда
		//		ПолныйТекстЗапроса = 
		//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
		//		|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
		//		|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ
		//		|ИЗ
		//		|	РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		//		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
		//		|			ПО (РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка)
		//		|		ПО (ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия)
		//		|ГДЕ
		//		|	РегистрацияСчетаФактурыСоставНДС.Ссылка В(&Ссылка)";
		//	КонецЕсли;	
		//КонецЕсли;	
		//СтандартнаяОбработкаEDI = Ложь;
		//Возврат ПолныйТекстЗапроса;
		
	КонецЕсли;	
	
	
	//----------------------------------------------------------------------------------------------------------------	
	//-обработчики для учета особенностей текущей конфигурации
	
	
	Если ИмяСобытия = "ПослеКонвертацииСообщения1СвEDI" Тогда
		
		//// если товар весовой и INVOIC отбивается по валидации GTIN, то для Х5 заменим все GTIN на фейковый одинаковый
		//// на текущий момент валидации на GTIN отключены на ядре
		//Сообщение = Параметры.Сообщение;
		//Если Сообщение.ТипСообщения = "INVOIC" Тогда
		//	Если Сообщение.ПолучательEDI.GLN = "4606038000003" Тогда 
		//		Для Каждого Строка Из Сообщение.Товары Цикл
		//			Строка.GTIN = "02000000000008";
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		//Возврат Сообщение;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеКонвертацииСообщенияEDIв1С" Тогда
		
		// если в RECADV не пришел номер DESADV, то надо поискать по номеру заказа и привязаться к нужной реализации
		// данный кусок для бухгалтериии, где по ORDERS создаются реализации
		//
		//Сообщение = Параметры.Сообщение;
		//Если Сообщение.ТипСообщения= "RECADV" Тогда 
		//	Если не ЗначениеЗаполнено(Сообщение.Накладная1С) Тогда 
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = "ВЫБРАТЬ
		//					   |	КонтурEDI_Сообщения.Документ КАК Ссылка
		//					   |ИЗ
		//					   |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		//					   |ГДЕ
		//					   |	КонтурEDI_Сообщения.НомерДокумента ПОДОБНО &НомерЗаказа
		//					   |	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""";
		//		Запрос.УстановитьПараметр("НомерЗаказа", "_"+Сред(СокрЛП(Сообщение.ЗаказEDI.Номер),2));   
		//		Результат = Запрос.Выполнить();
		//		Выборка = Результат.Выбрать();
		//		Если Выборка.Следующий() Тогда 
		//			Попытка 
		//				Накладная=Выборка.Ссылка;
		//				Если Накладная<>Неопределено Тогда 
		//					Сообщение.Документ1С=Накладная;
		//					Сообщение.Накладная1С=Накладная;
		//					Сообщение.Приемка1С=Накладная;
		//				КонецЕсли;
		//			Исключение
		//				Сообщить("ПМ: Не удалось сопоставить");
		//			КонецПопытки;
		//		КонецЕсли;
		//		Возврат Сообщение;
		//	КонецЕсли;
		//КонецЕсли;
	
	КонецЕсли;
	
	Если ИмяСобытия = "ОбработатьОтменуЗаказа" Тогда
		
		// пришла отмена заказа от сети - сообщаем об этом окошком и отправляем уведомление на почту
		//СтандартнаяОбработкаEDI = Истина;
		//Сообщение = Параметры.Сообщение;
		////модальное предупреждение
		//Сообщить("Внимание! Заказ №"+Сообщение.ДокументEDI.Номер+" ("+Сообщение.НомерСерииЗаказов +") был отменен!",СтатусСообщения.ОченьВажное);
		////отправим почту
		//ОтправитьEmail(АдресЭлектроннойПочты,"Внимание! Заказ №"+Сообщение.ДокументEDI.Номер+" ("+Сообщение.НомерСерииЗаказов +") был отменен!","Внимание! Заказ №"+Сообщение.ДокументEDI.Номер+" ("+Сообщение.НомерСерииЗаказов +") был отменен!"+Символы.ПС+"Сообщение отправлено роботом сервиса Контур-EDI, пожалуйста не отвечайте на него.",);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		////Porders ТС Низкоцен поле Контракт (Ранее КонтрактEDI) теперь доступно для всех сообщений
		//  Сообщение = Параметры.Сообщение;
		//Если Сообщение.ТипСообщения= "PORDERS" И Сообщение.ПолучательEDI.GLN = "2000000005768"  Тогда 
		//	Документ = Сообщение.Документ1С.ПолучитьОбъект();
		// 	Сообщение.Контракт.Номер = Документ.ДоговорКонтрагента.Номер;  //Убедиться что договор лежит именно по адресу:  Документ.ДоговорКонтрагента
		//  Сообщение.Контракт.Дата = Документ.ДоговорКонтрагента.Дата;
		//КонецЕсли;

		//// Если необходимо изменить ИНН/КПП организации в плательщике, в которую отправляется INVOIC.
		//// Используется для поставщиков МетроСС
		//Если (Параметры.Сообщение.ТипСообщения= "INVOIC") И ((Параметры.Сообщение.ПолучательEDI.GLN = "4607070199991") ИЛИ (Параметры.Сообщение.ПолучательEDI.GLN = "4007731000008") ИЛИ (Параметры.Сообщение.ПолучательEDI.GLN = "4607070198888"))  Тогда 
		//	Параметры.Сообщение.ПокупательEDI.GLN = Параметры.Сообщение.ПлательщикEDI.GLN;
		//	// Установим название юр лица Метро
		//	Параметры.Сообщение.ПлательщикEDI.Наименование = "ООО Метро Кэш энд Керри";
		//	// Установим ИНН Метро Можно, в принципе, забить ИНН всегда постоянным 7704218694, а можно взять из справочников в 1С
		//	Параметры.Сообщение.ПлательщикEDI.ИНН = Параметры.Сообщение.ДокументСсылка.Контрагент.ИНН;
		//	// Установим правильный КПП. Здесь должен встать КПП магазина. Где он лежит в структуре справочников поставщика - надо выяснить.
		//	// У Хладокомбината №3 каждый магазин встает в Контрагенты в документе, поэтому у них всё просто.
		//	Параметры.Сообщение.ПлательщикEDI.КПП = Параметры.Сообщение.ДокументСсылка.Контрагент.КПП;
		//	Параметры.Сообщение.ПлательщикEDI.Вид = "ЮрЛицо";
		//КонецЕсли;
		
		
		//// Если необходимо выпилить internalSupplierCode из всех исходящих сообщений для Х5, т.к. он в RECADV шлет GTIN в этом поле и мерж падает
		//// в текущей версии коробки есть соответствующая галочка для запрета отправки КодаПоставщика
		//Если Параметры.Сообщение.ПолучательEDI.GLN = "4606038000003" Тогда 
		//	Для Каждого Стр Из Параметры.Сообщение.Товары Цикл
		//		Стр.КодТовараПоставщика = "";
		//	КонецЦикла;
		//КонецЕсли;
		
		
		////ТС Линия просит в DESADV передавать порядковый номер строки исходного сообщения (в теге "Комментарий")
		//Если Параметры.Сообщение.ТипСообщения= "DESADV"
		//	И Параметры.Сообщение.ПолучательEDI.GLN = "4607811439997" //Линия
		//Тогда 
		//
		//	//Параметры.Сообщение.Товары.Сортировать("Наименование");
		//	Накладная = Параметры.Сообщение.Документ1С;
		//	Для Каждого Стр Из Параметры.Сообщение.Товары Цикл
		//		СтрокаНакладной = Накладная.Товары.Найти(Стр.Номенклатура);
		//		Если СтрокаНакладной<>Неопределено Тогда
		//			Стр.Комментарий = Формат(СтрокаНакладной.НомерСтроки,"ЧГ=");
		//		КонецЕсли;	
		//	КонецЦикла;
		//КонецЕсли;
		
		//отправка количества в одном месте (тег onePlaceQuantity)
		//Сообщение 	 = Параметры.Сообщение;
		//ТипСообщения = Сообщение.ТипСообщения;
		//Если ТипСообщения = "ORDRSP" или ТипСообщения = "DESADV" Тогда
		//	Для Каждого Строка Из Сообщение.Товары Цикл
		//		Строка.КоличествоВОдномМесте = 1;
		//	КонецЦикла;
		//КонецЕсли;
				
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаполнитьТоварнуюГруппуТаблицыТоваров" Тогда
		
		//Используется в том случае, если из одного сообщения ORDERS требуется создать несколько документов.
		//Можно, например, разбить по группам товаров, или по складам, на которых есть остатки.
		//В этом случае для каждого РАЗЛИЧНОГО значения колонки "ТоварнаяГруппа" будет создан отдельный документ в 1С.
		
		//Товары = Параметры.Товары; //Внимание! на УФ в Товарах приезжает ДанныеФормыКоллекция!
		//Сообщение = Параметры.Сообщение;
		//
		//Если Товары.Колонки.Найти("ТоварнаяГруппа")=Неопределено Тогда
		//	Товары.Колонки.Добавить("ТоварнаяГруппа");
		//КонецЕсли;	
		//
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	спрНоменклатура.Ссылка КАК Номенклатура,
		//|	спрНоменклатура.ВидНоменклатуры КАК ТоварнаяГруппа
		//|ИЗ
		//|	Справочник.Номенклатура КАК спрНоменклатура
		//|ГДЕ
		//|	спрНоменклатура.Ссылка В(&Товары)"
		//);
		//Запрос.УстановитьПараметр("Товары",Товары.ВыгрузитьКолонку("Номенклатура"));
		//ТабЗапроса = Запрос.Выполнить().Выгрузить();
		//Для Каждого СтрокаТоваров Из Товары Цикл
		//	СтрокаЗапроса = ТабЗапроса.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
		//	Если СтрокаЗапроса = Неопределено Тогда
		//		СтрокаТоваров.ТоварнаяГруппа = Неопределено;
		//	Иначе
		//		СтрокаТоваров.ТоварнаяГруппа = СтрокаЗапроса.ТоварнаяГруппа;
		//	КонецЕсли;	
		//КонецЦикла;
		
	КонецЕсли;
	
	
	Если ИмяСобытия = "КнопкаФормыСообщенияНажатие" Тогда
		
		//// если хочется обработать событие по кнопке из формы сообщения, например, если сделали свою кнопку
		//// также см документацию по созданию ПМ
		//// Часть №1. Вторая часть в ПриОткрытииФормыСообщения
						
	КонецЕсли;
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" Тогда
		
		////// если хочется добавить кнопку на форму сообщения и, например, распечатать сообщение.
		////// работает на всех вариациях формы сообщения
		////// Часть №2. Первая часть в КнопкаФормыСообщенияНажатие
		////Если Параметры.Сообщение.Направление = "Входящее" и Параметры.Сообщение.ТипСообщения = "ORDERS" Тогда
		////	ТЗКнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
		////	НоваяСтрока                    = ТЗКнопкиКоманднойПанели.Вставить(1);
		////	НоваяСтрока.ВидКнопки          = "Кнопка";
		////	НоваяСтрока.Имя                         = "РаспечататьЗаказНовый";
		////	НоваяСтрока.ИмяКартинки     = "КартинкаСохранить";
		////	НоваяСтрока.ИсточникКартинки          = "ЭлементФормы";
		////	НоваяСтрока.КнопкаПоУмолчанию    = Ложь;
		////	НоваяСтрока.Представление                 = "Распечатать заказ";
		////	НоваяСтрока.ПроверятьПоля                = Ложь;
		////	НоваяСтрока.СохранятьСоответствия               = Ложь;                                              
		////	
		////	ДействиеКнопки = Новый Действие("КнопкаДействияФормыНажатие");
		////	КнопкиСписка = Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		////	НоваяКнопка = КнопкиСписка.Добавить("РаспечататьЗаказНовый",                ТипКнопкиКоманднойПанели.Действие,       "Тест", ДействиеКнопки);
		////	КоличествоКнопок = КнопкиСписка.Количество();
		////	КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
		////КонецЕсли;
		
		////Заполним произвольный реквизит формы сообщения 
		//Если ЗначениеЗаполнено(Параметры.Сообщение.ПродавецEDI.КодВСистемеПокупателя) Тогда
		//	ФормаСообщения=Параметры.ФормаСообщения;
		//	ФормаСообщения.ЭлементыФормы.НадписьПроизвольныйРеквизит.Заголовок="Код продавца";
		//	ФормаСообщения.ЭлементыФормы.НадписьПроизвольныйРеквизит.Видимость=истина;
		//	ФормаСообщения.ПроизвольныйРеквизит=Параметры.Сообщение.ПродавецEDI.КодВСистемеПокупателя;
		//	ФормаСообщения.ЭлементыФормы.ПроизвольныйРеквизит.Видимость=истина;
		//	
		//КонецЕсли;

	КонецЕсли;
	 	
	
	Если ИмяСобытия = "ПриОткрытииФормыОбработкиРасхождений" Тогда
		//Параметры: СообщениеСсылка, ФормаОбработкиРасхождений
		
		// Когда нужно запретить пользователю некоторые варианты обработки расхождений
		//Форма = Параметры.ФормаОбработкиРасхождений;
		//
		//// Для УФ
		//СкрытыеКнопки = Новый Массив;
		//СкрытыеКнопки.Добавить("ФормаСоздатьВозвратОтПокупателя");
		//СкрытыеКнопки.Добавить("ФормаСоздатьКорректировку");
		//СкрытыеКнопки.Добавить("ФормаПеренестиВДокументРеализация");
		//
		//Для каждого ИмяКнопки Из СкрытыеКнопки Цикл
		//	ЭлементФормы = Форма.Элементы.Найти(ИмяКнопки);
		//	Если ЭлементФормы <> Неопределено Тогда
		//		ЭлементФормы.Видимость = Ложь;
		//	КонецЕсли;
		//КонецЦикла;
		//
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеСравненияТаблицыТоваров" Тогда
		//Пример 1.
		//Сравним таблицы только по количеству.
		
		//СравниваемыеПоля = Параметры.СравниваемыеПоля;
		//РезультатСравнения = Параметры.РезультатСравнения;
		//Если СравниваемыеПоля.НайтиПоЗначению("Количество")<>Неопределено Тогда
		//	СтандартнаяОбработкаEDI = Ложь;
		//	РезультатСравнения.ЕстьРасхождения	= Ложь;
		//	Для Каждого СтрокаТаблицыСравнения Из РезультатСравнения.ТаблицаСравнения Цикл
		//		СтрокаТаблицыСравнения.ЕстьРасхождения = (СтрокаТаблицыСравнения.Количество1 <> СтрокаТаблицыСравнения.Количество2);
		//		РезультатСравнения.ЕстьРасхождения = РезультатСравнения.ЕстьРасхождения	Или СтрокаТаблицыСравнения.ЕстьРасхождения;
		//	КонецЦикла;
		//	
		//	Возврат РезультатСравнения;
		//КонецЕсли;	
		
		//Пример 2.
		//Если входящий RECADV не отличается от документа в 1С по количеству в каждой строке товаров, а общая сумма документа отличается от приемки не более чем на 1 рубль,
		//то не будем считать такой RECADV отличающимся от документа.
		
		//Если Параметры.СтруктураТаблицы1.ТипСообщения = "RECADV"
		//	И Параметры.СтруктураТаблицы2.ТипСообщения = "DESADV" Тогда
		//	
		//	РезультатСравнения = Параметры.РезультатСравнения;
		//	СтандартнаяОбработкаEDI = Ложь;
		//	
		//	РезультатСравнения.ЕстьРасхождения = Ложь;
		//	Для Каждого СтрокаТаблицыСравнения Из РезультатСравнения.ТаблицаСравнения Цикл
		//		СтрокаТаблицыСравнения.ЕстьРасхождения = (СтрокаТаблицыСравнения.Количество1 <> СтрокаТаблицыСравнения.Количество2);
		//		РезультатСравнения.ЕстьРасхождения = РезультатСравнения.ЕстьРасхождения	Или СтрокаТаблицыСравнения.ЕстьРасхождения;
		//	КонецЦикла;
		//	
		//	РазницаСумм = Параметры.СтруктураТаблицы1.Товары.Итог("СуммаСНДС") - Параметры.СтруктураТаблицы2.Товары.Итог("СуммаСНДС");
		//	Если РазницаСумм<-1 или РазницаСумм>1 Тогда
		//		РезультатСравнения.ЕстьРасхождения = Истина;
		//	КонецЕсли;
		//	Возврат РезультатСравнения;
		//	
		//КонецЕсли;	
		
		
		
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЧтенияСообщенияИзФайла" Тогда	
		
		//Сообщение = Параметры.Сообщение;
		//Если Сообщение.ТипСообщения = "ORDERS" 
		//	И Сообщение.ОтправительEDI.GLN="4607081909992"//Дикси
		//	И Сообщение.Свойство("ОбратныйЗаказEDI")
		//Тогда
		//
		//	Сообщение.ОбратныйЗаказEDI.Дата = Сообщение.ЗаказEDI.Дата;//Дикси ленится слать дату PORDERS, сделаем за них
		//			
		//	Если Сообщение.ОбратныйЗаказEDI.Свойство("Номер")
		//		И Сообщение.ОбратныйЗаказEDI.Номер="CS_"
		//	Тогда
		//		//А в поле "Номер", наоборот, всегда что-то пишет. Или реальный номер, или "CS_". Во втором случае имеется в виду, что на самом деле PORDERS не было.
		//		Сообщение.Удалить("ОбратныйЗаказEDI");
		//		Сообщение.Удалить("ОбратныйЗаказ1С");
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
		
	
	Если ИмяСобытия = "ПередВыполнениемОбмена" Тогда
		
		// Если необходимо автоматом отправить DESADV, то надо выполнить следующее
		// А из двух запросов надо выбрать только один!!
		//
		//Если ЗначениеЗаполнено(ОсновнойМодуль.ПараметрыПользователяEDI.ЭтоАвтообмен) И ОсновнойМодуль.ПараметрыПользователяEDI.ЭтоАвтообмен Тогда
		//	Если Параметры.ИмяСписка = "РеализацияТоваров" Тогда
		//
		//      // Начало запроса 1 (на выбор)
		//		// Это общий запрос, который работает всегда. 
		//		// Суть запроса в том, что он отбирает все реализации за последние 3 дня по тем контрагентам, которые настроены у нас в админке
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = "ВЫБРАТЬ
		//			|              РеализацияТоваровУслуг.Ссылка КАК Объект,
		//			|              РеализацияТоваровУслуг.Представление
		//			|ИЗ
		//			|              Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//			|                              ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		//			|                              ПО (КонтурEDI_Сообщения.ТипСообщения = ""DESADV"")
		//			|                                             И РеализацияТоваровУслуг.Ссылка = КонтурEDI_Сообщения.Документ
		//			|ГДЕ
		//			|              КонтурEDI_Сообщения.Документ ЕСТЬ NULL 
		//			|              И РеализацияТоваровУслуг.Контрагент В
		//			|                                             (ВЫБРАТЬ РАЗЛИЧНЫЕ
		//			|                                                             КонтурEDI_ДополнительныеРеквизиты.Объект
		//			|                                             ИЗ
		//			|                                                             РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		//			|                                             ГДЕ
		//			|                                                             КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Контрагента"")
		//			|              И РеализацияТоваровУслуг.Дата >= &ДатаМинус3Дня";
		//		Запрос.УстановитьПараметр("ДатаМинус3Дня",ТекущаяДата()-3*24*60*60);
		//		// Конец запроса 1
		//		
		//		// Начало запроса 2 (на выбор)
		//		// Если запрос надо построить по определенному свойству документа (в котором устанавливается дата отгрузки) и автоматом отправить DESADV
		//		// Это старая версия, нужно использовать аккуратно, осторожно
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = "ВЫБРАТЬ
		//			|	ЗначенияСвойствОбъектов.Объект,
		//			|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Объект)
		//			|ИЗ
		//			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		//			|		ПО (КонтурEDI_Сообщения.Документ = ЗначенияСвойствОбъектов.Объект)
		//			|		И КонтурEDI_Сообщения.ТипСообщения = ""DESADV""
		//			|ГДЕ
		//			|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		//			|	И НЕ (ЗначенияСвойствОбъектов.Значение = &ПустаяДата)
		//			|	И КонтурEDI_Сообщения.Документ ЕСТЬ NULL";
		//		Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("<название свойства документа>"));
		//		Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
		//      // Конец запроса 2
		//
		//
		//		ТЗ = Запрос.Выполнить().Выгрузить();
		//		Для каждого Стр из ТЗ Цикл
		//			Если ОсновнойМодуль.МожноОтправлятьУведомлениеОбОтгрузке(Стр.Объект,Ложь) Тогда
		//				ТекущийСтатус = ОсновнойМодуль.ПолучитьСтатусСообщения(, Стр.Объект, "DESADV");
		//				Если НЕ (ЗначениеЗаполнено(ТекущийСтатус) И НЕ СокрЛП(ТекущийСтатус)="Ожидает исправления ошибок") Тогда
		//					Сообщение = ОсновнойМодуль.ПодготовитьИсходящееСообщение("DESADV", Стр.Объект);  
		//					Если НЕ (Сообщение.СодержитОшибки = Истина) Тогда
		//						Параметры = Новый Структура();
		//						Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		//						Параметры.Вставить("Сообщение",					Сообщение);
		//						ОсновнойМодуль.ОтправитьСообщение("DESADV",Стр.Объект,Параметры);
		//					КонецЕсли;
		//				КонецЕсли;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполнитьАвтообмен" Тогда
		
		//Используется в том случае, если необходимо настроить автоматический обмен сообщениями в режиме служебного
		//пользователя, отличный от стандартного.
		//В приведенном примере модуль сначала загрузит статусные и обычные сообщения по всем активным учетным записям,
		//затем отправит все ожидающие отправки сообщения, уведомления о прочтении и ALCRPT; об успешных или неудачных 
		//операциях информация будет занесена в журнал регистрации.
		//Здесь можно реализовать загрузку или отправку только в определенные промежутки времени; в сочетании с событием
		//"ПолучитьСообщенияОжидающиеОтправкиПоТипу" можно отбирать сообщения для автоматической отправки по типам.
		//
		//СтандартнаяОбработкаEDI = Ложь;
		////загрузка сообщений
		//УчетныеЗаписи = ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
		//Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		//	Если УчетнаяЗапись.НеАктивна Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Попытка
		//		ОсновнойМодуль.ЗагрузитьНовыеСообщения(УчетнаяЗапись,Истина);
		//		ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Информация, , , "Успешно загружены статусные сообщения", );
		//	Исключение
		//		ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось загрузить статусные сообщения: " + ОписаниеОшибки(), );
		//	КонецПопытки;
		//	Попытка
		//		ОсновнойМодуль.ЗагрузитьНовыеСообщения(УчетнаяЗапись,Ложь);
		//		ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Информация, , , "Успешно загружены сообщения", );
		//	Исключение
		//		ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось загрузить сообщения: " + ОписаниеОшибки(), );
		//	КонецПопытки;
		//КонецЦикла;
		////отправка сообщений
		//Попытка
		//	ОсновнойМодуль.ОтправитьСообщенияОжидающиеОтправки();
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Информация, , , "Успешно отправлены сообщения, ожидающие отправки", );
		//Исключение
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось отправить сообщения, ожидающие отправки: " + ОписаниеОшибки(), );
		//КонецПопытки;
		//Попытка
		//	ОсновнойМодуль.ОтправитьУведомленияОПрочтенииСообщений();
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Информация, , , "Успешно отправлены уведомления о прочтении сообщений", );
		//Исключение
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось отправить уведомления о прочтении сообщений: " + ОписаниеОшибки(), );
		//КонецПопытки;
		//Попытка
		//	ОсновнойМодуль.ОтправитьALCRPT();
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Информация, , , "Успешно отправлены сообщения ALCRPT", );
		//Исключение
		//	ЗаписьЖурналаРегистрации("Контур.EDI: Автообмен", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось отправить сообщения ALCRPT: " + ОписаниеОшибки(), );
		//КонецПопытки;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьСообщенияОжидающиеОтправкиПоТипу" Тогда
		
		//Используется в том случае, если необходимо изменить стандартную функцию получения
		//ожидающих отправки сообщений. 
		//В данном примере в режиме служебного пользователя для автообмена производится отбор 
		//сообщений на отправку по типам (по всем возможным). 
		//
		//ЭтоАвтообмен 		= ОсновнойМодуль.ПараметрыПользователяEDI.ЭтоАвтообмен = Истина;
		//Если ЭтоАвтообмен Тогда
		//	СтандартнаяОбработкаEDI = Ложь;
		//	ТаблицаДокументов = Новый ТаблицаЗначений;
		//	ТаблицаДокументов.Колонки.Добавить("ТипСообщения");
		//	ТаблицаДокументов.Колонки.Добавить("Документ");
		//	ТаблицаДокументов.Колонки.Добавить("Параметры");
		//	ОтправляемыеТипыСообщений = Новый Массив;
		//	ОтправляемыеТипыСообщений.Добавить("PORDERS");                 
		//	ОтправляемыеТипыСообщений.Добавить("ORDRSP");
		//	ОтправляемыеТипыСообщений.Добавить("DESADV");
		//	ОтправляемыеТипыСообщений.Добавить("INVOIC");
		//	ОтправляемыеТипыСообщений.Добавить("ORDERS_Canceled");
		//	Для Каждого ТипСообщения Из ОтправляемыеТипыСообщений Цикл
		//		ЗначениеСвойства = ?(ТипСообщения = "ORDERS_Canceled", "Отменен, ожидает отправки", "Ожидает отправки");
		//		ОсновнойМодуль.ПолучитьСообщенияОжидающиеОтправкиПоТипу(ТаблицаДокументов, ТипСообщения, ЗначениеСвойства);
		//	КонецЦикла;
		//	Возврат ТаблицаДокументов;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПроверитьНеобходимостьЗагрузкиСохраненияСообщения" Тогда
		
		//При получении входящих сообщений с сервера можно отказаться от загрузки некоторых из них.
		//Например, при работе в РБД входящие RECADV должны грузиться только в периферийные базы, а в центральную не должны.
		
		//Если Параметры.Сообщение.ТипСообщения="RECADV" и ЭтоЦентральнаяБаза() Тогда
		//	Параметры.СтруктураВозврата.СохранятьСообщениеВБазу = Ложь;
		//	Параметры.СтруктураВозврата.МожноУдалятьСообщение = Истина;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПередВыборомТочкиДоставкиСвойСправочник" Тогда
		
		//Вызывается в ФормаТочкиДоставкиСторонние_Элемент при выборе поля "ТочкаДоставкиСвойСправочник".
		//Используется в случае, если данное поле слишком уж нестандартное.
		
		//ЮрФилЗицо = Параметры.ЮрФизлицо;
		//ТекущееЗначение = Параметры.ТекущееЗначение;
		//ФРМ = Справочники.ХитрыеТочкиДоставки.ПолучитьФормуСписка();
		////... установим параметры формы
		//ВыбранноеЗначение = ФРМ.ОткрытьМодально();
		//Возврат ВыбранноеЗначение;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаполнения_EdiMessage_XDTO" Тогда
		
		////Вызывается при записи исходящего сообщения в XML через XDTO, после заполнения всего сообщения.
		////Позволяет изменить теги записываемого файла, добавить новые, удалить существующие.
		////Параметры: EdiMessage,Сообщение
		//
		//EdiMessage = Параметры.EdiMessage;//вытащим поближе для удобства
		//
		//EdiMessage.Interchangeheader.sender = "123333";//поменяем значение существующего тега
		//
		////добавим новый тег в сообщение
		//Если EdiMessage.Тип().Свойства.Получить("NewTag")=Неопределено Тогда
		//	//Но для начала проверим, что его еще нет в схеме
		//	_Фабрика = ОсновнойМодуль.ФабрикаXDTO_EdiXml();
		//	_ТипСтрока = _Фабрика.Тип("http://www.w3.org/2001/XMLSchema","string");//Строка в терминах XML
		//	_Знач = _Фабрика.Создать(_ТипСтрока);
		//	EdiMessage.Добавить(ФормаXML.Элемент,EdiMessage.Тип().URIПространстваИмен,"NewTag",_Знач);//При использовании "ФормаXML.Атрибут" возникают артефакты в тексте полученного XML
		//КонецЕсли;
		//EdiMessage.NewTag = "123";//и теперь запишем значение нашего нового тега
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаполнения_LineItem_XDTO" Тогда
		
		//Вызывается при записи исходящего сообщения в XML через XDTO, после заполнения каждого lineItem.
		//Позволяет изменить теги записываемого файла, добавить новые, удалить существующие.
		//Параметры: lineItem,СтрокаТоваров,Сообщение
		
		//Сообщить(""+Параметры.lineItem.GTIN);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПроверкиСообщенияEDI" Тогда
		
		//Вызывается после проверки сообщения на предмет заполненности обязательных полей, соответствия классификаторам и т.д.
		//Позволяет дополнить/переопределить результат проверки
		//Параметры: Сообщение,ТаблицаОшибок
		
		////Пример: для исходящих DESADV вызовем дополнительную проверку на готовность к отгрузке
		//Если Параметры.Сообщение.ТипСообщения = "DESADV"
		//	И Параметры.Сообщение.Направление = "Исходящее" Тогда
		//	
		//	Если Не ОбщийМодуль.НакладнаяГотоваКОтгрузке(Параметры.Сообщение.Документ1С) Тогда
		//		
		//		НовОшибка = Параметры.ТаблицаОшибок.Добавить();
		//		//НовОшибка.ИмяПоля				= "Накладная1С";//имя элемента управления на форме. Не обязательно.
		//		//НовОшибка.ИмяТабличнойЧасти		= "";
		//		//НовОшибка.НомерСтроки			= "";
		//		НовОшибка.СведенияОбОшибках		= "Накладная не готова к отгрузке";// или текст строкой, или таблица с ошибками подчиненных полей
		//		НовОшибка.СодержитОписаниеПоля	= Ложь;
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЧтенияСообщения_XDTO" Тогда
		
		//// Здесь можно добавить в Сообщение любые теги из XML, о которых основной модуль еще не знает.
		//// Рекомендуется имена создаваемых элементов Структуры начинать с "_".
		//// Это позволит избежать пересечения с именами элементов в Структуре при обновлениях модуля.
		
		//ВНИМАНИЕ! Весь пример ниже уже реализован в коробке! поле сообщения КонтрактEDI переименовано в Контракт
		//Если Параметры.Сообщение.ТипСообщения="ORDERS" Тогда
		//	
		//	Параметры.Сообщение.Вставить("_КонтрактEDI",Новый Структура("Номер,Дата"));
		//	КонтрактХМЛ = ОсновнойМодуль.ПолучитьЗначениеСвойстваXDTO(Параметры.Данные.order,"contractIdentificator");
		//	
		//	Если НЕ КонтрактХМЛ=Неопределено Тогда
		//		Параметры.Сообщение.КонтрактEDI.Вставить("Дата",	ОсновнойМодуль.ДатаXML_в_ДатаВремя1С(Параметры.Данные.order.contractIdentificator.date));
		//		Параметры.Сообщение.КонтрактEDI.Вставить("Номер",	Параметры.Данные.order.contractIdentificator.number);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПриОткрытииОсновнойФормы" Тогда
		//включить в основной форме отображение итогов по колонке "Сумма"
		
		//Форма = Параметры.Форма;
		//Форма.ЭлементыФормы.ТабСообщения.Подвал = Истина;
		//Форма.ЭлементыФормы.ТабСообщения.Колонки.Сумма.ОтображатьИтогиВПодвале = Истина;
		//Возврат Неопределено;
		
	КонецЕсли;
	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПрименитьПлагины(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//Результат = Плагин_ВзаимодействиеСМодулем1сДиадок(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//Только ОФ! В карточке сообщения DESADV будут добавлены колонки с пересчитанным количеством мест по коэффициенту основной единицы измерения мест для каждой номенклатуры----------------------------------------------------------------------------------------------
	//Результат = Плагин_ДобавитьКолонкуМестВДанныеПоУпаковкамДляРаспределенияПоПаллетам(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//передача данных ЕГАИС в DESADV ----------------------------------------------------------------------------------------------
	//Результат = Плагин_ПередачаДанныхЕГАИСвDESADV(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	////ТС Магнит работа с despatchParty -------------------------------------------------------------------------------------------------------------
	//Результат = Плагин_ВыбратьТочкуСамовывоза(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат; 
	//КонецЕсли;
	
	////ТС Детский Мир работа с ultimateCustomer в ТЧ Товары-------------------------------------------------------------------------------------------------------------
	//Результат = Плагин_ДетскийДир_ultimateCustomer(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//Плагин_Призма_РЦ_КонсолидированныеЗаказы работа с ultimateCustomer в ТЧ Товары-------------------------------------------------------------------------------------------------------------
	//Результат = Плагин_Призма_РЦ_КонсолидированныеЗаказы(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//агентская схема -------------------------------------------------------------------------------------------------------------
	//Результат = Плагин_АгентскаяСхема(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//пересчет единиц измерения ---------------------------------------------------------------------------------------------------
	//Результат = Плагин_ПересчетЕдиницИзмерения(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//отправка фарма-данных (в плагине необходимо указать, где хранятся фарма-данные)-----------------------------------------------
	//Результат = Плагин_ОтправкаФармаДанных(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//отправка данных об акцизе (в плагине необходимо указать, где хранятся данные об акцизе)---------------------------------------
	//Результат = Плагин_ОтправкаДанныхОбАкцизе(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//заполнение алко-реквизитов (в плагине необходимо указать, где хранятся алко-данные)-------------------------------------------
	//Результат = Плагин_ЗаполнениеАлкоРеквизитов(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//Исправление запросов для Астор Торговый Дом 7-------------------------------------------
	//Результат = Плагин_АсторТорговыйДом7(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//печать палетного листа ------------------------------------------------------------------------------------------------------
	//Результат = Плагин_ПечатьПалетногоЛиста(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;

	//отправка информацию о транспорте в DESADV (в плагине необходимо указать, где хранятся данные о трнспорте)---------------------
	//Результат = Плагин_ОтправитьИнформациюПроТранспортВDESADV(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//заполнение кода в системе покупателя (для ТС АШАН) (в плагине необходимо указать, где хранятся данные о коде) ----------------
	//Результат = Плагин_ЗаполнитьКодВСистемеПокупателя(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//заполнение данных о воротах, дате и времени прибытия (для ТС X5)
	//Результат = Плагин_ВратаВремени(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//заполнение данных серии номенклатуры (в уведомлении об отгрузке) -------------------------------------------------------------
	//Результат = Плагин_ОтправкаДанныхСерииНоменклатуры(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//заполнение факторинговых данных (в плагине необходимо указать текст уступочной надписи) --------------------------------------
	//Результат = Плагин_ОтправкаДанныхФакторинга(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//Код для нестандартных конфигураций лучше разместить здесь
	Результат = Плагин_НестандартнаяКонфигурация(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	Если Не Результат = Неопределено Тогда
		Возврат Результат 
	КонецЕсли;
	
	//Результат = Плагин_ВывестиДополнительнуюКолонкуОсновногоСписка(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	//Результат = Плагин_МаршрутизацияСообщенийТорговойСети(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	//Результат = Плагин_УФ_ПропускДействияОжидайтеУведомленияОПриемкеУФ(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда
	//	Возврат Результат 
	//КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//плагины - наборы обработчиков событий, объединенных единым функционалом (например, пересчет единиц измерения) --
//для включения плагина необходимо раскомментировать код его вызова в функции ПрименитьПлагины() -----------------
//----------------------------------------------------------------------------------------------------------------

Функция Плагин_ВзаимодействиеСМодулем1сДиадок(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)

	Если ИмяСобытия = "ПриУстановкеСтатусаСообщения" Тогда
		
		СообщениеОбъект =Параметры.СообщениеСсылка;
		
		Если Параметры.СообщениеСсылка.ТипСообщения = "INVOIC" 
			ИЛИ Параметры.СообщениеСсылка.ТипСообщения = "COINVOIC" Тогда
			Если ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЯщикДиадокДляОрганизации").Пустая() Тогда 
				Возврат Неопределено; //вообще не работаем в модуле ДД
			КонецЕсли;
			
			ИсходныеID = ОсновнойМодуль.ПолучитьСписокСвойствEDI("messageID,invoiceId,torg12Id,UniversalTransferDocumentId",СообщениеОбъект.Документ);
			
			//id СФ или УПД/УКД, смотря что по сети
			ИдентификаторEntity=?(ЗначениеЗаполнено(СокрЛП(ИсходныеID.invoiceId)),СокрЛП(ИсходныеID.invoiceId),СокрЛП(ИсходныеID.UniversalTransferDocumentId));
			
			Если ЗначениеЗаполнено(СокрЛП(ИсходныеID.messageID))
				И ЗначениеЗаполнено(ИдентификаторEntity) Тогда
				
				ДиадокID = СокрЛП(ИсходныеID.messageID) + ИдентификаторEntity;
				ИдентификаторEntity64 =  КонвертироватьГуидВЧисло64(ДиадокID);
				
				Запрос= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект = &Объект И Свойство = &НаименованиеСвойства");
				Запрос.УстановитьПараметр("Объект", СообщениеОбъект.Организация);
				Запрос.УстановитьПараметр("НаименованиеСвойства", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЯщикДиадокДляОрганизации"));
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда //если же нет ящика организации - значит ничего не делаем
					
					ЯщикОрганизацииДД =  Результат.Значение;
					
					НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.установить(СообщениеОбъект.Документ);
					
					СвойствоДокументДД = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ИдентификаторДокументаВДиадок");
					СвойствоЯщикДД = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ИдентификаторЯщикДокументаВДиадок");
					МассивСвойств = Новый Массив;
					МассивСвойств.Добавить(СвойствоДокументДД);
					МассивСвойств.Добавить(СвойствоЯщикДД);
					
					Для  Каждого стр из МассивСвойств цикл
						
						Запись =  НаборЗаписей.Добавить();
						Запись.Объект = СообщениеОбъект.Документ; 
						Запись.Свойство = стр.Ссылка;
						Если стр.Ссылка= СвойствоДокументДД Тогда 
							Запись.Значение = ИдентификаторEntity64;
						Иначе
							Запись.Значение = ЯщикОрганизацииДД;
						КонецЕсли;
					КонецЦикла;
					
					НаборЗаписей.Записать();
					
					Если ЗначениеЗаполнено(СокрЛП(ИсходныеID.torg12Id)) Тогда
						
						ДиадокТоргID = СокрЛП(ИсходныеID.messageID) + (СокрЛП(ИсходныеID.torg12Id));
						ЗначениеТорг = КонвертироватьГуидВЧисло64(ДиадокТоргID);
						
						НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Объект.установить(СообщениеОбъект.Документ.ДокументОснование);
						
						Для  Каждого стр из МассивСвойств цикл
							Запись =  НаборЗаписей.Добавить();
							Запись.Объект = СообщениеОбъект.Документ.ДокументОснование; 
							Запись.Свойство = стр.Ссылка;
							Если стр.Ссылка= СвойствоДокументДД Тогда 
								Запись.Значение = ЗначениеТорг;
							Иначе
								Запись.Значение = ЯщикОрганизацииДД;
							КонецЕсли;
						КонецЦикла;  				
						НаборЗаписей.Записать();
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция Плагин_ДобавитьКолонкуМестВДанныеПоУпаковкамДляРаспределенияПоПаллетам(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
//Внимание!
//Плагин работает только на ОФ!

Если ИмяСобытия = "ПриОткрытииФормыСообщения" Тогда
	Если Параметры.Сообщение.ТипСообщения = "DESADV" Тогда 
		Форма=Параметры.ФормаСообщения;
		
		#Если Клиент Тогда
			Форма.ТоварныеПозиции.Колонки.Добавить("Мест");
			НоваяКолонка = Форма.ЭлементыФормы.ТоварныеПозиции.Колонки.Добавить("Мест"); 
			НоваяКолонка.Данные = "Мест"; 
			НоваяКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
			
			Действие1 = Новый Действие("АкцепторСобытий3Параметра");
			Форма.ЭлементыФормы.ТоварныеПозиции.УстановитьДействие("ПриВыводеСтроки", Действие1);
			
			ТЗКнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
			НоваяСтрока = ТЗКнопкиКоманднойПанели.Вставить(1);
			НоваяСтрока.ВидКнопки= "ВызовСобытияВПМ";
			НоваяСтрока.Имя="ТоварныеПозиции";   //без этого ключа, равного имени элемента ничего не взлетит
			НоваяСтрока.КнопкаПоУмолчанию=Ложь;
			НоваяСтрока.Представление="";
			НоваяСтрока.ПроверятьПоля=Ложь;
			НоваяСтрока.СохранятьСоответствия=Ложь;
			
			/////////////////////////////////
			Если Форма.ТранспортныеУпаковки.Колонки.Найти("Мест")=Неопределено Тогда 
				Форма.ТранспортныеУпаковки.Колонки.Добавить("Мест");
			КонецЕсли;
			НоваяКолонка = Форма.ЭлементыФормы.ТранспортныеУпаковки.Колонки.Добавить("Мест"); 
			НоваяКолонка.Данные = "Мест"; 
			НоваяКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
			
			Действие2 = Новый Действие("АкцепторСобытий3Параметра");
			Форма.ЭлементыФормы.ТранспортныеУпаковки.УстановитьДействие("ПриВыводеСтроки", Действие2);
			
			ТЗКнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
			НоваяСтрока = ТЗКнопкиКоманднойПанели.Вставить(2);
			НоваяСтрока.ВидКнопки= "ВызовСобытияВПМ";
			НоваяСтрока.Имя="ТранспортныеУпаковки";   //без этого ключа, равного имени элемента ничего не взлетит
			НоваяСтрока.КнопкаПоУмолчанию=Ложь;
			НоваяСтрока.Представление="";
			НоваяСтрока.ПроверятьПоля=Ложь;
			НоваяСтрока.СохранятьСоответствия=Ложь;
		#КонецЕсли

	КонецЕсли;
КонецЕсли;

Если ИмяСобытия = "КнопкаФормыСообщенияНажатие" Тогда
	Если Параметры.Сообщение.ТипСообщения = "DESADV" Тогда 
		Если Параметры.ИмяКнопки = "ТоварныеПозиции" Тогда
			Попытка
				Параметры.Параметр3.Мест=Параметры.Параметр3.Количество/Параметры.Параметр3.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент;
			Исключение
			КонецПопытки;
		ИначеЕсли Параметры.ИмяКнопки = "ТранспортныеУпаковки" Тогда
			//Параметры.Параметр3.Мест=Параметры.Параметр3.Количество/Параметры.Параметр3.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент;
			Для Каждого СтркаДерева Из Параметры.Параметр3.Строки Цикл
				Попытка
					СтркаДерева.Мест=СтркаДерева.Количество/Параметры.Форма.Товары.Найти(СтркаДерева.НомерСтроки,"НомерСтроки").Номенклатура.ЕдиницаИзмеренияМест.Коэффициент;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
	
КонецФункции

Функция Плагин_ДетскийДир_ultimateCustomer(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
//Внимание!
//Плагин работаем с основным модулем версии не ниже 4.03.007.48 (5.03.007.48, 3.03.007.48)
//Плагин использует блок функций, размещенный в Этом контексте ниже: //Блок Вспомогательных функций для Детского мира ultimateCustomer
//В Плагин встроена проверка GLN получателя сообщения (ДетскийМир и ДетскийМирТест) Если Вы хотите попробовать на другой тестовой сети - пройдите в событие плагина ПриОткрытииФормыСообщения и откорректируйте условие
//Плагин не отключает встроенную в модуль проверку на валидность SSCC кода!
//Плагин не совместим с включенной настройкой "Использовать XDTO сериализацию"! (но планируется снять это ограничение)
	//Запись в xml значения
	Если ИмяСобытия = "ЗаписатьЭлементХМЛ" и Параметры.ИмяЭлемента = "lineItem" Тогда
		Сообщение = Параметры.Параметры.Сообщение;
		//ДМ_
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			Стр=Параметры.Параметры.Строка;
			
			Если Стр.КонечныйГрузополучательGLN.Свойство("GLN") и ЗначениеЗаполнено(Стр.КонечныйГрузополучательGLN) Тогда
				ЗаписьХМЛ=Параметры.ЗаписьХМЛ;
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ultimateCustomer");
				ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gln", СокрЛП(Стр.КонечныйГрузополучательGLN));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда  //добавляем КонечныйГрузополучательGLN в Товары для этих типов сообщений
		
		ТабМетаданных 			= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		
		Если 	(ТипСообщения = "ORDERS" И Направление = "Входящее")  
			//Или (ТипСообщения = "ORDRSP" И Направление = "Исходящее")  //на исходящий ORDRSP пока не применяем
			Или (ТипСообщения = "DESADV" И Направление = "Исходящее")
			Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КонечныйГрузополучательGLN", "Товары"				, "EDI" , "Строка13"		, , 	, , );	
		КонецЕсли;
		
		Если ТипСообщения = "DESADV" Тогда
			//этот идентификатор позволит нам в desadv знать к какому ultimateCustomer относится паллета
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДопИдентификатор"		, "ТранспортныеУпаковки", "EDI"	, "Строка20"		,					,		,								);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" Тогда
		Сообщение		= Параметры.Сообщение;
		ФормаСообщения	= Параметры.ФормаСообщения;
		
		//Манипуляции только для DESADV и только для детского мира (возможно еще можно добавить условие только на конкретные gln shipto!)
		Если Сообщение.ТипСообщения="DESADV" 
			И Сообщение.Свойство("Транспортныеупаковки")
			И (Сообщение.ПолучательEDI.GLN = "4607149599998" или Сообщение.ПолучательEDI.GLN ="2000000006628") Тогда        //ДМ и тестовый ДМ
			//И Истина Тогда //<<--Для отладки на другой ТС заменить предыдущую строку этой 
			//все ок
		Иначе
			Возврат Неопределено;//так проще для понимания условий
		КонецЕсли;
		
		ТоварыРеализацииОстатки = Сообщение.Товары.скопировать();  //Здесь будем отражать остатки товаров после их "раскидывания" по строкам заказа SSCC/+/UltimateCustomerGln
		//нужно пронумеровать!
		ТекНом=0;
		Для каждого СтрокаРТУ ИЗ ТоварыРеализацииОстатки Цикл
			ТекНом=ТекНом+1;
			СтрокаРТУ.НомерСтроки= ТекНом;
		КонецЦикла;
		
		//Если не указаны паллеты то раскидаем, иначе считаем что перед нами сохраненное сообщение
		Если ФормаСообщения.ТранспортныеУпаковки.Строки.Количество() = 0 Тогда
			//Нам нужно входящее сообщение ORDERS
			ВходящийЗаказДокумент1С = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"ORDERS");
			СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
			//Теперь получим все UltimateCustomerGln и составим из них список
			Если ЗначениеЗаполнено(СообщениеORDERS) и СообщениеORDERS.Свойство("Товары") и СообщениеORDERS.Товары.Количество()>0 Тогда
				ТоварыЗаказа = СообщениеORDERS.Товары;
				ПреобразоватьКонечныйГрузополучательGLNВТоварахЗаказа(ТоварыЗаказа);
				
				
				ТаблицаUltimateCustomerGln= СоставитьТЗСписокUltimateCustomerGln(СообщениеORDERS);
				Если ТаблицаUltimateCustomerGln.Количество()>0 Тогда
					
					//Обойдем уникальные UltimateCustomerGln и раскидаем в упаковки те товары которые найдутся и в заказе и в реализации
					Для Каждого СтрокаUltimateCustomerGln Из ТаблицаUltimateCustomerGln Цикл
						ТекUltimateCustomerGln=СтрокаUltimateCustomerGln.UltimateCustomerGln;
						
						ОтборПоUltimateCustomerGln=Новый Структура();
						ОтборПоUltimateCustomerGln.Вставить("UltimateCustomerGln",ТекUltimateCustomerGln);
						
						НайденныеСтрокиТоваровЗаказа=СообщениеORDERS.Товары.НайтиСтроки(ОтборПоUltimateCustomerGln);
						//Создадим паллету				
						Упаковка = ДМ_ДобавитьУпаковкуUltimateCustomerGln(ФормаСообщения,ТекUltimateCustomerGln);
						// и положим туда товары если они еще остались в ТоварыРеализацииОстатки
						Для Каждого СтрокаТоваровЗаказаПоUltimateCustomerGln Из НайденныеСтрокиТоваровЗаказа Цикл
							НоваяСтрока = Упаковка.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТоваровЗаказаПоUltimateCustomerGln);
							НоваяСтрока.СоставУпаковки = ДМ_ПолучитьРазвернутоеНаименованиеТовара(СтрокаТоваровЗаказаПоUltimateCustomerGln);
							НоваяСтрока.Количество = СтрокаТоваровЗаказаПоUltimateCustomerGln.Количество;
							//!!! НУЖНО ПОДМЕНИТЬ НОМЕР СТРОКИ НА НОМЕР СТРОКИ РТУ!!!!
							ОтборСтрокРТУ = Новый Структура();
							ОтборСтрокРТУ.Вставить("Номенклатура",СтрокаТоваровЗаказаПоUltimateCustomerGln.Номенклатура);
							ОтборСтрокРТУ.Вставить("ЕдиницаИзмерения",СтрокаТоваровЗаказаПоUltimateCustomerGln.ЕдиницаИзмерения);
							НайденныеСтрокиРТУ=ТоварыРеализацииОстатки.НайтиСтроки(ОтборСтрокРТУ);
							НоваяСтрока.НомерСтроки=0;
							
							НайденаВалиднаяСтрокаРТУ=Ложь;
							
							Для каждого НайденнаяСтрокаРТУ ИЗ НайденныеСтрокиРТУ ЦИкл   //ищем строку РТУ, где количество точь-в-точь как в заказе! (на случай если поставщик в РТУ оставил разбивку по количеству)
								Если НайденнаяСтрокаРТУ.Количество=СтрокаТоваровЗаказаПоUltimateCustomerGln.Количество ТОгда	
									НоваяСтрока.НомерСтроки=НайденнаяСтрокаРТУ.НомерСтроки;
									//обнулим остатки товаров в рту по этой строке
									НайденнаяСтрокаРТУ.Количество = 0;
									НайденаВалиднаяСтрокаРТУ=Истина;
								КонецЕсли;
							КонецЦикла;
							Если Не НайденаВалиднаяСтрокаРТУ Тогда 
								Для каждого НайденнаяСтрокаРТУ ИЗ НайденныеСтрокиРТУ ЦИкл   //ищем строку РТУ, где хватает количества (на случай если поставщик в РТУ свернул номенклатуру в количество)
									Если НайденнаяСтрокаРТУ.Количество>=СтрокаТоваровЗаказаПоUltimateCustomerGln.Количество ТОгда	
										НоваяСтрока.НомерСтроки=НайденнаяСтрокаРТУ.НомерСтроки;
										//сминусуем остатки товаров в рту по этой строке
										НайденнаяСтрокаРТУ.Количество = НайденнаяСтрокаРТУ.Количество-СтрокаТоваровЗаказаПоUltimateCustomerGln.Количество;
										НайденаВалиднаяСтрокаРТУ=Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если Не НайденаВалиднаяСтрокаРТУ Тогда 
								Для каждого НайденнаяСтрокаРТУ ИЗ НайденныеСтрокиРТУ ЦИкл   //ищем строку РТУ, где !!НЕ!! хватает количества (на случай если поставщик в РТУ свернул номенклатуру в количество и у него не хватает номенклатуры к отгрузке)
									Если НайденнаяСтрокаРТУ.Количество>0 ТОгда	
										НоваяСтрока.НомерСтроки=НайденнаяСтрокаРТУ.НомерСтроки;
										//обнулим остатки товаров в рту по этой строке  - вот по идее надо бы и другие обнулить!
										НайденнаяСтрокаРТУ.Количество = 0;
										НайденаВалиднаяСтрокаРТУ=Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;	
							Если Не НайденаВалиднаяСтрокаРТУ Тогда 
								Для каждого НайденнаяСтрокаРТУ ИЗ НайденныеСтрокиРТУ ЦИкл   //ищем строку РТУ, где !!НЕ!! хватает количества (на случай если поставщик в РТУ свернул номенклатуру в количество и у него не хватает номенклатуры к отгрузке)
									Если НайденнаяСтрокаРТУ.Количество=0 ТОгда
										НоваяСтрока.НомерСтроки=НайденнаяСтрокаРТУ.НомерСтроки;
										//тут и так было 0 кол-во
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;	
							//Мы не ставим здесь цель 100%верного распределения количества, нам важно - верный номер строки РТУ проставить в Транспортные упаковки чтобы потом верно обработался функционал в форме
						КонецЦикла;
					КонецЦикла;
					
					ДМ_ВычислитьКоличествоВУпаковках(ФормаСообщения.ТранспортныеУпаковки.Строки);
					
					ДМ_ПронумероватьУпаковкиСквознымПорядковымНомером(ФормаСообщения);
					ДМ_ПроименоватьУпаковки(ФормаСообщения);
					ФормаСообщения.ТоварныеПозиции.Очистить();
					ДМ_ОбновитьДанныеРазмещения(ФормаСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

//Внимание! Плагин работаем с основным модулем версии не ниже 4.03.013.15 !!!
Функция Плагин_Призма_РЦ_КонсолидированныеЗаказы(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	//Запись в xml значения
	Если ИмяСобытия = "ЗаписатьЭлементХМЛ" и Параметры.ИмяЭлемента = "lineItem" Тогда
		Сообщение = Параметры.Параметры.Сообщение;
		
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			Стр=Параметры.Параметры.Строка;
			
			Если Стр.КонечныйГрузополучательGLN.Свойство("GLN") и ЗначениеЗаполнено(Стр.КонечныйГрузополучательGLN) Тогда
				ЗаписьХМЛ=Параметры.ЗаписьХМЛ;
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ultimateCustomer");
				ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gln", СокрЛП(Стр.КонечныйГрузополучательGLN));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаполнения_LineItem_XDTO" Тогда
		Сообщение = Параметры.Сообщение;
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			Если Сообщение.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено Тогда
				ОсновнойМодуль.xmlСоздатьДочернийЭлементXDTO(Параметры.lineItem,	"ultimateCustomer");
				Параметры.lineItem["ultimateCustomer"].gln = Строка(Параметры.СтрокаТоваров.КонечныйГрузополучательGLN);
            КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	  
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда  //добавляем КонечныйГрузополучательGLN в Товары для этих типов сообщений
		
		ТабМетаданных 			= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		
		Если 	(ТипСообщения = "ORDERS" И Направление = "Входящее")  
			Или (ТипСообщения = "ORDRSP" И Направление = "Исходящее")  
			Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КонечныйГрузополучательGLN", "Товары"				, "EDI" , "Строка13"		, , 	, , );	
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" Тогда
		Сообщение		= Параметры.Сообщение;
		ФормаСообщения	= Параметры.ФормаСообщения;
		
		//Манипуляции только для DESADV и только для детского мира (возможно еще можно добавить условие только на конкретные gln shipto!)
		Если Сообщение.ТипСообщения="ORDRSP"
			И Сообщение.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено
			И ОсновнойМодуль.КонечныйГрузополучательЗаполнен(Сообщение.Товары) Тогда
			//И (Сообщение.ПолучательEDI.GLN = "1111111111" или Сообщение.ПолучательEDI.GLN ="1111111111") Тогда        
			//И Истина Тогда //<<--Для отладки  
			//все ок
		Иначе
			Возврат Неопределено;//так проще для понимания условий
		КонецЕсли;
		Параметры.ФормаСообщения.ЭлементыФормы.Товары.Колонки.Количество.Видимость=Истина;
		#Если Клиент Тогда
			//Выведем кнопку Редактирования таблицы
			КнопкиКоманднойПанели = ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
			НоваяСтрока = КнопкиКоманднойПанели.Добавить();
			НоваяСтрока.ВидКнопки 					= "Кнопка";
			НоваяСтрока.Имя 						= "ИзменитьРаспределениепоконечнымгрузополучателям";
			НоваяСтрока.ИсточникКартинки			= "ЭлементФормы";
			НоваяСтрока.КнопкаПоУмолчанию 			= Ложь;
			НоваяСтрока.Представление				= "Изменить распределение по конечным грузополучателям";
			НоваяСтрока.ПроверятьПоля 				= Ложь;
			НоваяСтрока.СохранятьСоответствия 		= Ложь;
			ДействиеКнопки 			= Новый Действие("КнопкаДействияФормыНажатие");
			КнопкиСписка 			= Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
			НоваяКнопка 			= КнопкиСписка.Добавить("ИзменитьРаспределениепоконечнымгрузополучателям", ТипКнопкиКоманднойПанели.Действие, "Изменить распределение по конечным грузополучателям", ДействиеКнопки);
			НоваяКнопка.Картинка 	= БиблиотекаКартинок.Изменить;
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КоличествоКнопок 		= КнопкиСписка.Количество();
			КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
			
			//Выведем кнопку Печати паллетных ведомостей 
			КнопкиКоманднойПанели = ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
			НоваяСтрока = КнопкиКоманднойПанели.Добавить();
			НоваяСтрока.ВидКнопки 					= "Кнопка";
			НоваяСтрока.Имя 						= "ПечатьПаллетныхВедомостей";
			НоваяСтрока.ИсточникКартинки			= "ЭлементФормы";
			НоваяСтрока.КнопкаПоУмолчанию 			= Ложь;
			НоваяСтрока.Представление				= "Печать паллетных ведомостей";
			НоваяСтрока.ПроверятьПоля 				= Ложь;
			НоваяСтрока.СохранятьСоответствия 		= Ложь;
			ДействиеКнопки 			= Новый Действие("КнопкаДействияФормыНажатие");
			КнопкиСписка 			= Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
			НоваяКнопка 			= КнопкиСписка.Добавить("ПечатьПаллетныхВедомостей", ТипКнопкиКоманднойПанели.Действие, "Печать паллетных ведомостей", ДействиеКнопки);
			НоваяКнопка.Картинка 	= БиблиотекаКартинок.Печать;
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КоличествоКнопок 		= КнопкиСписка.Количество();
			КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
		#КонецЕсли
	КонецЕсли;
	
	
	
	Если ИмяСобытия = "КнопкаФормыСообщенияНажатие" Тогда
		Если Параметры.ИмяКнопки = "ИзменитьРаспределениепоконечнымгрузополучателям" Тогда
			Попытка
				ФормаРедактированияUC=ПолучитьФорму("ФормаРедактированияUltimatecustomer");
				ФормаРедактированияUC.Сообщение=Параметры.Сообщение;
				ТоварыНовоеРаспределение=ФормаРедактированияUC.ОткрытьМодально();
				//Добавим колонку СтавкаНДС и Пометка для того чтобы механизм из ПодготовитьИсходящееСообщение мог отработать
				Если ТоварыНовоеРаспределение<>Неопределено Тогда 
					ТоварыНовоеРаспределение.Колонки.Добавить("Пометка");
					ТоварыНовоеРаспределение.Колонки.Добавить("СтавкаНДС");
					ТоварыНовоеРаспределение.ЗагрузитьКолонку(ТоварыНовоеРаспределение.ВыгрузитьКолонку("СтавкаНДС1С"),"СтавкаНДС");
					
					//заново понять каки строки мы уточнили а какие нет
					СообщениеНовое=ОсновнойМодуль.ПодготовитьИсходящееСообщение("ORDRSP",Параметры.Форма.Документ1С,Новый Структура("ИзмененноеПользователемРаспределение",ТоварыНовоеРаспределение));
					//переинициализировать карточку ORDRSP
					Параметры.Форма.Сообщение=СообщениеНовое;
					Параметры.Форма.ЗаполнитьПоляНаФорме();
				КонецЕсли;
			Исключение
				_ошибка = ОписаниеОшибки();
				Сообщить("Не удалось перейти к редактированию по причине:
				|"+_ошибка);
				//ОсновнойМодуль.ОтменитьТранзакцию_КонтурEDI();
			КонецПопытки;
		ИначеЕсли Параметры.ИмяКнопки = "ПечатьПаллетныхВедомостей" Тогда
			
			//Компонента печати ШК
			Компонент = Неопределено;
			КомпонентаЗагружена  = Ложь;
			КомпонентаПодключена = Ложь;
			КомпонентУстановлена = Ложь;
			Попытка
				Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
				КомпонентУстановлена = Истина;
			Исключение
			Компонент = УстановитьКомпонентуПечатиШК(КомпонентаЗагружена,КомпонентаПодключена,КомпонентУстановлена);
			КонецПопытки;
			///////////////////////////////////////////////////////////////////////////////////
			
			Попытка
				ТабДокумент 				   	= Новый ТабличныйДокумент;
				ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
				Макет = ПолучитьМакет("ПаллетнаяВедомостьРЦПризма");
				
				ТаблицаКонечныхГрузополучателей=Параметры.Сообщение.Товары.Скопировать();
				ТаблицаКонечныхГрузополучателей.Свернуть("КонечныйГрузополучательGLN");
				
				Для Каждого СтрКонечныйГрузополучательGLN Из ТаблицаКонечныхГрузополучателей Цикл
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					
					АдресДоставкипоТД = ОсновнойМодуль.НайтиОбъектПоЗначениюСвойства("GLN_ТочкиДоставки",СтрКонечныйГрузополучательGLN.КонечныйГрузополучательGLN);
					Если ЗначениеЗаполнено(АдресДоставкипоТД) Тогда
						ОбластьМакета.Параметры.АдресДоставки			=АдресДоставкипоТД.АдресДоставки;		
					Иначе	
						ОбластьМакета.Параметры.АдресДоставки			=СтрКонечныйГрузополучательGLN.КонечныйГрузополучательGLN;		
					КонецЕсли;
					
					ОбластьМакета.Параметры.НазваниеПоставщика		=Параметры.Сообщение.Продавец1С;		
					ОбластьМакета.Параметры.ДатаПоставки			=Формат(Параметры.Сообщение.ДатаПоставки,"ДФ=dd.MM.yy");		
				    ТабДокумент.Вывести(ОбластьМакета);
					НайденныеСтрокиСЭтимГрузополучателем= Параметры.Сообщение.Товары.НайтиСтроки(Новый Структура("КонечныйГрузополучательGLN",СтрКонечныйГрузополучательGLN.КонечныйГрузополучательGLN));
					Для Каждого СтрокаТовара ИЗ НайденныеСтрокиСЭтимГрузополучателем Цикл
						ОбластьСтрокаТовара = Макет.ПолучитьОбласть("Строка");
						ОбластьСтрокаТовара.Параметры.КодТовараПокупателя	=СтрокаТовара.КодТовараПокупателя;		
						ОбластьСтрокаТовара.Параметры.GTIN					=СтрокаТовара.GTIN;		
						ОбластьСтрокаТовара.Параметры.Наименование			=ВРег(СтрокаТовара.Наименование);
						
						Квант=1;//СтрокаТовара.Номенклатура.Квант; //<<<<<Укажите источник данных
						
						ОбластьСтрокаТовара.Параметры.Квант					=Квант;		
						ОбластьСтрокаТовара.Параметры.Мест					=СтрокаТовара.Количество/?(Квант=0 или Квант=Неопределено,1,Квант);		
						ОбластьСтрокаТовара.Параметры.Количество			=СтрокаТовара.Количество;
						
						КартинкаШКода 								= ПолучитьКартинкуШтрихкода(Компонент, СтрокаТовара.GTIN);
						Если Не КартинкаШКода = Неопределено Тогда
							Рисунок = ОбластьСтрокаТовара.Область("КартинкаШК");
							Рисунок.Картинка = КартинкаШКода;
						КонецЕсли;
						
						ТабДокумент.Вывести(ОбластьСтрокаТовара);
					КонецЦикла;
					
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЦикла;
				ТабДокумент.Показать();
				
			Исключение
				_ошибка = ОписаниеОшибки();
				Сообщить("Не удалось напечатать по причине:
				|"+_ошибка);
				//ОсновнойМодуль.ОтменитьТранзакцию_КонтурEDI();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция Плагин_ПередачаДанныхЕГАИСвDESADV(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ПослеКонвертацииСообщения1СвEDI" Тогда
		
		Если Параметры.Сообщение.ТипСообщения = "DESADV" Тогда

			Сообщение = Параметры.Сообщение;
			Товары = Сообщение.Товары;
			
			//заполнение данных тега egaisRegistrationIdentificator (Идентификатор фиксации ТТН в ЕГАИС)
			//	Номер ТТН в ЕГАИС (egaisRegistrationIdentificator.number), тип Строка(35)
			Если Сообщение.Свойство("ТТНвЕГАИС") Тогда
				Сообщение.ТТНвЕГАИС = Новый Структура("Номер,Дата", ,Дата(1,1,1));
				// Номер ТТН в ЕГАИС (заполните этот элемент)(*)
				Сообщение.ТТНвЕГАИС.Номер = "";
				
				//при заполнении данных вам могут потребоваться:
				//Сообщение.Документ1С - ссылка на документ (накладную)
			КонецЕсли;

			//заполнение данных тега codeOfEgais (Код товара в ЕГАИС), тип Строка(35)
			Если Не Товары.Колонки.Найти("КодТовараВЕГАИС") = Неопределено Тогда
				Для Каждого Строка Из Товары Цикл
					// Код товара в ЕГАИС (заполните этот элемент)(*)
					Строка.КодТовараВЕГАИС = "";
					
					//при заполнении данных вам могут потребоваться:
					//Сообщение.Документ1С				- ссылка на документ (накладную)
					//Строка.Номенклатура				- ссылка на товар
					//Строка.ХарактеристикаНоменклатуры - ссылка на характеристику товара
					//Строка.ЕдиницаИзмерения			- ссылка на единицу измерения товара
					//Строка.GTIN						- ссылка на штрихкод товара
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция Плагин_АгентскаяСхема(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ПриЗагрузкеВходящегоСообщения" Тогда
		
		//агентская схема ТЗС (заполнение реквизита документа "Адрес доставки" адресом реальной точки доставки)
		Сообщение = Параметры.Сообщение;
		Если Не Сообщение.Свойство("ПромежуточныйГрузополучательEDI") или Не Сообщение.Свойство("ПромежуточныйГрузополучатель1С") Тогда
			Возврат Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучательEDI.GLN) Тогда
			Возврат Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучатель1С) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Документ = Параметры.ДокументСсылка;
		Если Документ.Метаданные().Реквизиты.Найти("АдресДоставки") = Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли Не Документ.Метаданные().Реквизиты.АдресДоставки.Тип = Новый ОписаниеТипов("Строка") Тогда
			Возврат Неопределено;
		КонецЕсли;
		Документ.АдресДоставки = Сообщение.ПромежуточныйГрузополучатель1С.АдресДоставки;
				
	КонецЕсли;

	Если ИмяСобытия = "ПослеКонвертацииСообщения1СвEDI" Тогда
		
		//агентская схема ТЗС (вывод адреса доставки в комментарий в карточке сообщения)
		Сообщение = Параметры.Сообщение;
		Если Не Сообщение.Свойство("ПромежуточныйГрузополучательEDI") или Не Сообщение.Свойство("ПромежуточныйГрузополучатель1С") Тогда
			Возврат Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучатель1С) Тогда //должен быть обязательно заполнен при агентской поставке
			Возврат Неопределено;
		КонецЕсли;
		Если Найти(Сообщение.Комментарий,"Адрес доставки: ")=0 Тогда
			Если Сообщение.Свойство("Комментарий") Тогда
				Сообщение.Комментарий = "Адрес доставки: " + Сообщение.ПромежуточныйГрузополучатель1С.АдресДоставки + " (GLN: " + Сообщение.ПромежуточныйГрузополучатель1С.GLN + ") " + Сообщение.Комментарий;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеКонвертацииСообщенияEDIв1С" Тогда
		
		//агентская схема ТЗС (отображение реальной точки (адреса) доставки в списке задач, вывод адреса доставки в комментарий в карточке сообщения)
		Сообщение = Параметры.Сообщение;
		Если Не Сообщение.Свойство("ПромежуточныйГрузополучательEDI") или Не Сообщение.Свойство("ПромежуточныйГрузополучатель1С") Тогда
			Возврат Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучательEDI.GLN) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сообщение.ТочкаДоставки = Сообщение.ПромежуточныйГрузополучатель1С;
		Если Не Сообщение.Свойство("Комментарий") Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Найти(Сообщение.Комментарий,"Адрес доставки: ")=0 Тогда
			Если ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучатель1С) Тогда
				Сообщение.Комментарий = "Адрес доставки: " + Сообщение.ПромежуточныйГрузополучатель1С.АдресДоставки + " (GLN: " + Сообщение.ПромежуточныйГрузополучатель1С.GLN + ") " + Сообщение.Комментарий;
			Иначе
				Сообщение.Комментарий = "Адрес доставки: " + "не определен" + " (GLN: " + Сообщение.ПромежуточныйГрузополучательEDI.GLN + ") " + Сообщение.Комментарий;
			КонецЕсли;
		КонецЕсли;
						
	КонецЕсли;		
	
КонецФункции

Функция Плагин_ПересчетЕдиницИзмерения(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	
	Перем фСообщение;
	
	Если Не РеквизитыПересчета = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ИмяСобытия = "ПрочитатьСообщение" Тогда
		//прочитаем входящий заказ, пересчитаем количества и цены, чтобы сравнить входящий заказ и документ заказ
		Если Параметры.ТипСообщения = "ORDERS" Тогда
			Если ЗначениеЗаполнено(Параметры.Параметры) И Параметры.Параметры.Свойство("Действие") И Параметры.Параметры.Действие = "ПодготовитьОтветНаЗаказ" Тогда
				СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение_БМИ(Параметры.СообщениеСсылка, Параметры.ДокументСсылка, Параметры.ТипСообщения, Параметры.Направление, Параметры.Статусное);
				Если Не ЗначениеЗаполнено(СообщениеORDERS) Тогда
					Возврат Неопределено 
				КонецЕсли;
				УстанавливатьСобственныеЦеныВЗаказах = ПолучитьПараметрПартнераУстанавливатьСобственныеЦеныВЗаказах(СообщениеORDERS.Отправитель1С);
				фСообщениеORDERS = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СообщениеORDERS));
				ПересчитатьСообщение(фСообщениеORDERS,,УстанавливатьСобственныеЦеныВЗаказах);
				Если Не ЗначениеЗаполнено(фСообщениеORDERS) Тогда
					Возврат Неопределено;	
				КонецЕсли;
				СтандартнаяОбработкаEDI = Ложь;
				Возврат фСообщениеORDERS;
			КонецЕсли;
		//прочитаем входящую приемку, пересчитаем количества и цены, чтобы сравнить входящую приемку и документ накладную	
		ИначеЕсли Параметры.ТипСообщения = "RECADV" Тогда
			Если ЗначениеЗаполнено(Параметры.Параметры) 			 И ТипЗнч(Параметры.Параметры) = Тип("Структура") И 
				 Параметры.Параметры.Свойство("ИсточникРасхождений") И Параметры.Параметры.ИсточникРасхождений = "Приемка" Тогда
				СообщениеRECADV = ОсновнойМодуль.ПрочитатьСообщение_БМИ(Параметры.СообщениеСсылка, Параметры.ДокументСсылка, Параметры.ТипСообщения, Параметры.Направление, Параметры.Статусное);					 
				ПересчитатьСообщение(СообщениеRECADV);
				Если НЕ СообщениеRECADV = Неопределено Тогда
					Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда
						СообщениеRECADV.СообщениеСсылка = Параметры.СообщениеСсылка;
					КонецЕсли;
					Если ЗначениеЗаполнено(Параметры.ДокументСсылка) Тогда
						СообщениеRECADV.ДокументСсылка = Параметры.ДокументСсылка;
					КонецЕсли;
				КонецЕсли;
				СтандартнаяОбработкаEDI = Ложь;
				Возврат СообщениеRECADV;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПринятьВходящееСообщение" Тогда
		//пересчитаем количества и цены в orders
		Если Параметры.Сообщение.ТипСообщения = "ORDERS" Тогда
			УстанавливатьСобственныеЦеныВЗаказах = ПолучитьПараметрПартнераУстанавливатьСобственныеЦеныВЗаказах(Параметры.Сообщение.Отправитель1С);
			ПересчитатьСообщение(Параметры.Сообщение,,УстанавливатьСобственныеЦеныВЗаказах);
		ИначеЕсли Параметры.Сообщение.ТипСообщения = "RECADV" Тогда//пересчитаем количества и цены в recadv
			ПересчитатьСообщение(Параметры.Сообщение);		
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		Если Параметры.Сообщение.ТипСообщения = "PORDERS" Тогда			//пересчитаем количества и цены в porders
			ПересчитатьСообщение(Параметры.Сообщение, Параметры.ДокументСсылка);	
		ИначеЕсли Параметры.Сообщение.ТипСообщения = "ORDRSP" Тогда 	//пересчитаем количества и цены в ordrsp
			ПересчитатьСообщение(Параметры.Сообщение, Параметры.ДокументСсылка);	
		ИначеЕсли Параметры.Сообщение.ТипСообщения = "DESADV" Тогда		//пересчитаем количества и цены в desadv
			Если Не (ЗначениеЗаполнено(Параметры.Параметры) И Параметры.Параметры.Свойство("Действие") И Параметры.Параметры.Действие = "ПринятьУведомлениеОПриемке") Тогда
				ПересчитатьСообщение(Параметры.Сообщение);
			КонецЕсли;
		ИначеЕсли Параметры.Сообщение.ТипСообщения = "INVOIC" Тогда		//пересчитаем количества и цены в invoic
			ПересчитатьСообщение(Параметры.Сообщение);	
		КонецЕсли;
	КонецЕсли;
	
	// Начиная с версии 4.03.007.01 пересчет единиц измерения внесен в типовой модуль и активируется флагом "ИспользоватьПересчетЕдиницИзмерения" в общих настройках.
	// 1) При снятом флаге необходимо закомментировать код ниже этих строк. Пересчеты будут происходить в событиях "ПрочитатьСообщение", "ПринятьВходящееСообщение" и "ПослеПодготовкиИсходящегоСообщения" (выше).
	// 2) При установленном флаге - наоборот, закомментировать/удалить код выше этих строк. Пересчеты будут происходить в процедуре "ПересчитатьТоварыСообщения" основного модуля. Если необходимо подправить
	//    логику работы функции "ПересчитатьТоварыСообщения", то раскомментируйте код ниже.
	// Одновременное использование обработчиков из п.1 и п.2 не рекомендуется.
	
	Если ИмяСобытия = "ПересчитатьТоварыСообщения" Тогда

		//СтандартнаяОбработкаEDI = Ложь;
		//
		//Для Каждого СтрокаСообщения Из Параметры.ТаблицаТоваров Цикл
		//	
		//	ДействиеПересчета = "";
		//	КоэффициентEDIВ1С = 1;

		//	Если ЗначениеЗаполнено(СтрокаСообщения.КоэффициентEDIВ1С) Тогда
		//		ДействиеПересчета = ?(СтрокаСообщения.КоэффициентEDIВ1С>0, "умножить", "разделить");
		//		КоэффициентEDIВ1С = Макс(-СтрокаСообщения.КоэффициентEDIВ1С,СтрокаСообщения.КоэффициентEDIВ1С);
		//	КонецЕсли;
		//	
		//	Если ДействиеПересчета = "умножить" Тогда
		//		Коэффициент = 1/КоэффициентEDIВ1С;
		//	ИначеЕсли ДействиеПересчета = "разделить" Тогда
		//		Коэффициент = КоэффициентEDIВ1С;
		//	Иначе
		//		Коэффициент = 1;
		//	КонецЕсли;
		//	
		//	Если Параметры.Направление = "ВEDI" Тогда
		//		Коэффициент = 1/Коэффициент;//для исходящих будет обратный пересчет
		//	КонецЕсли;
		//	
		//	//теперь собственно расчеты
		//	СтрокаСообщения.Количество			= СтрокаСообщения.Количество / Коэффициент;
		//	
		//	//В некоторых случаях, возможно, придется пересчитывать только количество. Это зависит от специфики торговой сети.
		//	СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС * Коэффициент;
		//	СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   * Коэффициент;
		//	
		//КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_ОтправкаФармаДанных(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда
		
		ТаблицаМетаданных 		= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		Если ТипСообщения = "DESADV" И Направление = "Исходящее" Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "ФармаДекларацияСоответствия",	"Товары",		"=",	"Структура"	,	,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "ФармаПроизводитель",				"Товары",	 	"=",	"Структура"	,	,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "ФармаПредельнаяОтпускнаяЦена",	"Товары",		"=",				,	,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "ФармаФактическаяОтпускнаяЦена",	"Товары",		"=",				,	,	,	);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		
		Сообщение 		= Параметры.Сообщение;
		ДокументСсылка  = Параметры.ДокументСсылка;
		ДопПараметры	= Параметры.Параметры;
		Если Не Сообщение.ТипСообщения = "DESADV" Тогда
			Возврат Неопределено;
		ИначеЕсли Сообщение.Товары.Колонки.Найти("ФармаДекларацияСоответствия") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Для Каждого Строка Из Сообщение.Товары Цикл
			ФармаДекларацияСоответствия = Новый Структура;
			ФармаДекларацияСоответствия.Вставить("СерияНомер", 				"РОСС АТ.ФМ14.Д13559");
			ФармаДекларацияСоответствия.Вставить("ДатаНачалаДействия", 		Дата(2014,6,14));
			ФармаДекларацияСоответствия.Вставить("ДатаОкончанияДействия", 	Дата(2017,6,14));
			ФармаДекларацияСоответствия.Вставить("ДекларантДержатель", 		"ООО ""ЛДФ ""МЕДИК"". Код-ОКПО: 20870795. ИНН: 6658001364 620014, Л-14, г.Екатеринбург, ул.А.Валека, 15, ком.303, тел. 8 (34369) 25253 (доб. 118) 8 (34369) 44971");
			ФармаДекларацияСоответствия.Вставить("КемВыдан", 				"ООО ""Уральский центр сертификации и испытаний ""УРАЛСЕРТИФИКАТ""");
			ФармаПроизводитель = Новый Структура;
			ФармаПроизводитель.Вставить("GLN",								"0000000000000");
			ФармаПроизводитель.Вставить("Организация",						Новый Структура("Наименование,ИНН,КПП", "ООО ""ЛДФ ""МЕДИК""", "6658001364", "667201001"));
			ФармаПроизводитель.Вставить("ИндивидуальныйПредприниматель",	Новый Структура);//Новый Структура("Наименование,ИНН", "Иванов Петр Сидорович", "6658001568"));
			ФармаПроизводитель.Вставить("ИностраннаяОрганизация",			Новый Структура);//Новый Структура("КодСтраны,ИНН,Наименование","KZ","600900110466","ООО ""КОРПОРАЦИЯ СВЯЗЬ"""));
			ФармаПредельнаяОтпускнаяЦена 	= 103.25;
			ФармаФактическаяОтпускнаяЦена 	= 97.54;	
			Строка.ФармаДекларацияСоответствия 		= ФармаДекларацияСоответствия;
			Строка.ФармаПроизводитель 				= ФармаПроизводитель;
			Строка.ФармаПредельнаяОтпускнаяЦена 	= ФармаПредельнаяОтпускнаяЦена;
			Строка.ФармаФактическаяОтпускнаяЦена	= ФармаФактическаяОтпускнаяЦена;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписатьЭлементХМЛ" Тогда
		
		ИмяЭлемента = Параметры.ИмяЭлемента;
		Если ИмяЭлемента = "lineItem" Тогда
			Если Не ТипЗнч(Параметры.Параметры) = Тип("Структура") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Сообщение") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Строка") Тогда
				Возврат Неопределено;	
			КонецЕсли;
			ЗаписьХМЛ = Параметры.ЗаписьХМЛ;
			Строка 	  = Параметры.Параметры.Строка;
			Сообщение = Параметры.Параметры.Сообщение;
			Если Не Сообщение.ТипСообщения = "DESADV" или Не Сообщение.Направление = "Исходящее" Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("ФармаДекларацияСоответствия") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия) Тогда
					ЗаписьХМЛ.ЗаписатьНачалоЭлемента("declaration");
						Если Строка.ФармаДекларацияСоответствия.Свойство("СерияНомер") И ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия.СерияНомер) Тогда
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "number",		Строка.ФармаДекларацияСоответствия.СерияНомер);
						КонецЕсли;
						Если Строка.ФармаДекларацияСоответствия.Свойство("ДатаНачалаДействия") И ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия.ДатаНачалаДействия) Тогда	
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "startDate",	ОсновнойМодуль.Дата1С_в_ДатаXML(Строка.ФармаДекларацияСоответствия.ДатаНачалаДействия));
						КонецЕсли;
						Если Строка.ФармаДекларацияСоответствия.Свойство("ДатаОкончанияДействия") И ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия.ДатаОкончанияДействия) Тогда
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "endDate",		ОсновнойМодуль.Дата1С_в_ДатаXML(Строка.ФармаДекларацияСоответствия.ДатаОкончанияДействия));
						КонецЕсли;
						Если Строка.ФармаДекларацияСоответствия.Свойство("ДекларантДержатель") И ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия.ДекларантДержатель) Тогда
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "holder",		Строка.ФармаДекларацияСоответствия.ДекларантДержатель);
						КонецЕсли;
						Если Строка.ФармаДекларацияСоответствия.Свойство("КемВыдан") И ЗначениеЗаполнено(Строка.ФармаДекларацияСоответствия.КемВыдан) Тогда
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "issuerOf",	Строка.ФармаДекларацияСоответствия.КемВыдан);
						КонецЕсли;
					ЗаписьХМЛ.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("ФармаПроизводитель") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ФармаПроизводитель) Тогда
					ЗаписьХМЛ.ЗаписатьНачалоЭлемента("manufacturer");
						Если Строка.ФармаПроизводитель.Свойство("GLN") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.GLN) Тогда
							ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gln",		Строка.ФармаПроизводитель.GLN);
						КонецЕсли;
						Если Строка.ФармаПроизводитель.Свойство("Организация") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.Организация) Тогда
							ЗаписьХМЛ.ЗаписатьНачалоЭлемента("organization");
								Если Строка.ФармаПроизводитель.Организация.Свойство("Наименование") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.Организация.Наименование) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "name",		Строка.ФармаПроизводитель.Организация.Наименование);
								КонецЕсли;
								Если Строка.ФармаПроизводитель.Организация.Свойство("ИНН") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.Организация.ИНН) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "inn",		Строка.ФармаПроизводитель.Организация.ИНН);
								КонецЕсли;
								Если Строка.ФармаПроизводитель.Организация.Свойство("КПП") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.Организация.КПП) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "kpp",		Строка.ФармаПроизводитель.Организация.КПП);
								КонецЕсли;
							ЗаписьХМЛ.ЗаписатьКонецЭлемента();
						КонецЕсли;
						Если Строка.ФармаПроизводитель.Свойство("ИндивидуальныйПредприниматель") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель) Тогда
							ЗаписьХМЛ.ЗаписатьНачалоЭлемента("selfEmployed");
								Если Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.Свойство("Наименование") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.Наименование) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "name",		Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.Наименование);
								КонецЕсли;
								Если Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.Свойство("ИНН") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.ИНН) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "inn",		Строка.ФармаПроизводитель.ИндивидуальныйПредприниматель.ИНН);
								КонецЕсли;
							ЗаписьХМЛ.ЗаписатьКонецЭлемента();
						КонецЕсли;
						Если Строка.ФармаПроизводитель.Свойство("ИностраннаяОрганизация") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИностраннаяОрганизация) Тогда
							ЗаписьХМЛ.ЗаписатьНачалоЭлемента("foreignOrganization");
								Если Строка.ФармаПроизводитель.ИностраннаяОрганизация.Свойство("КодСтраны") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИностраннаяОрганизация.КодСтраны) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "countryCode",		Строка.ФармаПроизводитель.ИностраннаяОрганизация.КодСтраны);
								КонецЕсли;
								Если Строка.ФармаПроизводитель.ИностраннаяОрганизация.Свойство("ИНН") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИностраннаяОрганизация.ИНН) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "tin",		Строка.ФармаПроизводитель.ИностраннаяОрганизация.ИНН);
								КонецЕсли;
								Если Строка.ФармаПроизводитель.ИностраннаяОрганизация.Свойство("Наименование") И ЗначениеЗаполнено(Строка.ФармаПроизводитель.ИностраннаяОрганизация.Наименование) Тогда
									ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "name",		Строка.ФармаПроизводитель.ИностраннаяОрганизация.Наименование);
								КонецЕсли;
							ЗаписьХМЛ.ЗаписатьКонецЭлемента();
						КонецЕсли;
					ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				КонецЕсли; 
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("ФармаПредельнаяОтпускнаяЦена") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ФармаПредельнаяОтпускнаяЦена) Тогда
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "registeredPrice",		ОсновнойМодуль.Число1С_в_СуммаXML(Строка.ФармаПредельнаяОтпускнаяЦена));	
				КонецЕсли;	
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("ФармаФактическаяОтпускнаяЦена") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.ФармаФактическаяОтпускнаяЦена) Тогда
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "landedPrice",		ОсновнойМодуль.Число1С_в_СуммаXML(Строка.ФармаФактическаяОтпускнаяЦена));	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_ОтправкаДанныхОбАкцизе(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//добавляем в таблицу Товары Сообщения поле СуммаАкциза
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда
		ТаблицаМетаданных 		= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		Если ТипСообщения = "INVOIC" И Направление = "Исходящее" Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СуммаАкциза", "Товары", "=", "ЧислоСумма", , , );
		КонецЕсли;
	КонецЕсли;
	
	//заполняем сумму акциза в строках таблицы Товары
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		Сообщение 		= Параметры.Сообщение;
		ДокументСсылка  = Параметры.ДокументСсылка;
		Если Не Сообщение.ТипСообщения = "INVOIC" Тогда
			Возврат Неопределено;
		ИначеЕсли Сообщение.Товары.Колонки.Найти("СуммаАкциза") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Для Каждого Строка Из Сообщение.Товары Цикл
			Строка.СуммаАкциза = 0;	//указать путь к реквизиту (функцию вычисления) "Сумма акциза"
		КонецЦикла;
	КонецЕсли;
	
	//записываем сумму акциза в XML
	Если ИмяСобытия = "ЗаписатьЭлементХМЛ" Тогда
		ИмяЭлемента = Параметры.ИмяЭлемента;
		Если ИмяЭлемента = "lineItem" Тогда
			Если Не ТипЗнч(Параметры.Параметры) = Тип("Структура") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Сообщение") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Строка") Тогда
				Возврат Неопределено;	
			КонецЕсли;
			ЗаписьХМЛ = Параметры.ЗаписьХМЛ;
			Строка 	  = Параметры.Параметры.Строка;
			Сообщение = Параметры.Параметры.Сообщение;
			Если Не Сообщение.ТипСообщения = "INVOIC" или Не Сообщение.Направление = "Исходящее" Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("СуммаАкциза") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.СуммаАкциза) Тогда
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "exciseDuty", ОсновнойМодуль.Число1С_в_СуммаXML(Строка.СуммаАкциза));
				Иначе
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "exciseDuty", "Без акциза");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_ЗаполнениеАлкоРеквизитов(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ЗаполнитьАлкогольныеРеквизиты" Тогда
		МассивУдаляемыхСтрок=Новый Массив;
		ТабЧасть = Параметры.Сообщение.Товары;

		//заполнение ALCRPT
		//подходит для многих типовых конфигураций, поддерживающих хранение информации об алкогольной продукции и лицензий
		
		////УФ БЛОК ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////!!! Заполнение Реквизитов для УФ конфигураций выненсено в УФ_ЗаполнитьАлкоСведенияОНоменклатуре()
		//Если ОсновнойМодуль.Имяконфигурации1С= "УФ_УТ" Тогда 
		//	
		//	Для каждого Стр Из ТабЧасть Цикл
		//		УФ_ЗаполнитьАлкоСведенияОНоменклатуре(Стр,МассивУдаляемыхСтрок);
		//	КонецЦикла;
		//	
		//	Для Каждого Эл Из МассивУдаляемыхСтрок Цикл
		//		ТабЧасть.Удалить(Эл);
		//	КонецЦикла;
		//	
		//	ПередаватьСерииВALCRPT=Истина;    //ВНИМАНИЕ! Уточните, нужно ли передавать серии!
		//	Если ПередаватьСерииВALCRPT Тогда
		//		УФ_УТ11_РаспределитьПоСериям(Параметры,ТабЧасть);
		//	КонецЕсли;

		//КонецЕсли;
		//
		////Если ОсновнойМодуль.Имяконфигурации1С= "УФ_УТ" Тогда 
		////	ТабЧасть = Параметры.Сообщение.Товары;
		////	Для каждого Стр Из ТабЧасть Цикл
		////		Стр.АлкоПроизводитель1С = Параметры.Сообщение.Грузополучатель1С;
		////	КонецЦикла;
		////	РезультатЗаполнения = Новый Структура;
		////	Параметры.Сообщение.ТранспортнаяНакладнаяEDI.Номер = ОсновнойМодуль.ПолучитьНомерНаПечать_КонтурEDI(Параметры.Сообщение.ДокументСсылка);
		////	Параметры.Сообщение.ТранспортнаяНакладнаяEDI.Дата  = Параметры.Сообщение.ДокументEDI.Дата;
		////	РезультатЗаполнения.Вставить("Успешно",		Истина);
		////	РезультатЗаполнения.Вставить("Сообщение",	Параметры.Сообщение);

		////Возврат РезультатЗаполнения;

		////КонецЕсли;
		//
		////УФ БЛОК КОНЕЦ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		
		//
		//
		//Сообщение = Параметры.Сообщение;
		//
		//Запрос=Новый Запрос(
		//"ВЫБРАТЬ
		//|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		//|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания,
		//|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.СерияНомер, """") КАК Серия,
		//|	ЕСТЬNULL(ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.КемВыдана, """") КАК КемВыдана,
		//|	СведенияОбАлкогольнойПродукции.ВидПродукции.КодВидаПродукции КАК КодВидаПродукции,
		//|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффициентПересчета,
		//|	спрНоменклатура.Производитель КАК Производитель,
		//|	спрНоменклатура.Ссылка КАК Номенклатура
		//|ИЗ
		//|	Справочник.Номенклатура КАК спрНоменклатура
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
		//|		ПО (СведенияОбАлкогольнойПродукции.Номенклатура = спрНоменклатура.Ссылка)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции.СрезПоследних(&Период, ) КАК ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних
		//|		ПО (ЛицензииПоставщиковАлкогольнойПродукцииСрезПоследних.Поставщик = спрНоменклатура.Производитель)
		//|ГДЕ
		//|	спрНоменклатура.Ссылка В(&Товары)"
		//);

		//Запрос.УстановитьПараметр("Товары", Параметры.Сообщение.Товары.ВыгрузитьКолонку("Номенклатура"));
		//Запрос.УстановитьПараметр("Период", Параметры.Сообщение.Документ1С.Дата);
		//ВыборкаАлко = Запрос.Выполнить().Выгрузить();
		//
		//ТабЧасть = Сообщение.Товары;
		//
		//МассивУдаляемыхСтрок=Новый Массив;
		//Для каждого Стр Из ТабЧасть Цикл
		//	
		//	СтрокаАлкоСведений=ВыборкаАлко.Найти(Стр.Номенклатура,"Номенклатура");
		//	
		//	Если СтрокаАлкоСведений=Неопределено Тогда
		//		МассивУдаляемыхСтрок.Добавить(Стр);
		//		Продолжить;
		//	КонецЕсли;	
		//	
		//	// Объем
		//	
		//	Стр.АлкоОбъем = СтрокаАлкоСведений.КоэффициентПересчета*10; //в ALCRPT всегда ставятся литры. Здесь имеется в виду тег volumeOfUnitInLiter, т.е. объем единицы
		//	
		//	// Производитель
		//	
		//	Стр.АлкоПроизводитель1С = СтрокаАлкоСведений.Производитель;
		//	
		//	Стр.АлкоКодПродукции = СокрЛП(СтрокаАлкоСведений.КодВидаПродукции);
		//	
		//	Стр.АлкоДатаРозлива = ТекущаяДата();//подставить нужную дату!!!   //тег bottlingDate
		//	
		//	// лицензия поставщика

		//	СтруктураЛицензии = Новый Структура();
		//	СтруктураЛицензии.Вставить("Серия",			"");
		//	СтруктураЛицензии.Вставить("ДатаНачала",	"");
		//	СтруктураЛицензии.Вставить("ДатаОкончания",	"");
		//	СтруктураЛицензии.Вставить("КемВыдана",		"");
		//	ЗаполнитьЗначенияСвойств(СтруктураЛицензии,СтрокаАлкоСведений);

		//	Стр.АлкоЛицензияПоставщика = СтруктураЛицензии;
		//
		
		//	//ЕГАИС
		//	Если Не ТабЧасть.Колонки.Найти("ЕГАИС") = Неопределено Тогда
		//		ДанныеЕГАИС = Неопределено;
		//		// Код товара в ЕГАИС
		//		КодТовараВЕГАИС = "";	// заполнить код товара с системе ЕГАИС (тег "codeOfEgais")
		//		// Номер товара в ТТН ЕГАИС
		//		ИдентификаторТовараВТТНЕГАИС = "";	// заполнить идентификатор товара в ТТН в системе ЕГАИС (тег "lotNumberEgais")
		//		Если ЗначениеЗаполнено(КодТовараВЕГАИС) и ЗначениеЗаполнено(ИдентификаторТовараВТТНЕГАИС) Тогда
		//			ДанныеЕГАИС = Новый Структура;
		//			ДанныеЕГАИС.Вставить("КодТовараВЕГАИС", 				КодТовараВЕГАИС);
		//			ДанныеЕГАИС.Вставить("ИдентификаторТовараВТТНЕГАИС",	ИдентификаторТовараВТТНЕГАИС);
		//		КонецЕсли;
		//		Стр.ЕГАИС = ДанныеЕГАИС;
		//	КонецЕсли;
		
		//КонецЦикла;
		//
		//
		////удалим строки, не являющиеся алкоголем
		//Для Каждого Эл Из МассивУдаляемыхСтрок Цикл
		//	ТабЧасть.Удалить(Эл);
		//КонецЦикла;	
		//
		//// Номер и дата ТТН
		//
		//Сообщение.ТранспортнаяНакладнаяEDI.Номер = ОсновнойМодуль.ПолучитьНомерНаПечать_КонтурEDI(Параметры.Сообщение.ДокументСсылка);
		//Сообщение.ТранспортнаяНакладнаяEDI.Дата  = Сообщение.ДокументEDI.Дата;
		//
		//РезультатЗаполнения = Новый Структура;
		//РезультатЗаполнения.Вставить("Успешно",		Истина);
		//РезультатЗаполнения.Вставить("Сообщение",	Сообщение);
		//
		//Возврат РезультатЗаполнения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Здесь был "Плагин_ПечатьПалетногоЛиста"
// Теперь следует пользоваться расширением "Печать палетных листов из карточки DESADV" или для массовой печати функцией по кнопке "Еще" -> "Распечатать палетные листы"

Функция Плагин_ОтправитьИнформациюПроТранспортВDESADV(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//// если необходимо отправить информацию про транспорт в DESADV
	//// хотят РЦ Х5, 
	//// возможно, хочет Магнит, но в ORDRSP
	//// в коде ниже нужно изменить названия реквизитов документа, в которых содержится необходимая информация
		
	Если ИмяСобытия = "ПослеКонвертацииСообщения1СвEDI" Тогда
		//Сообщение = Параметры.Сообщение;
		//Если Сообщение.ТипСообщения = "DESADV" Тогда
		//	Если ЗначениеЗаполнено(Параметры.Сообщение.Документ1С.<Автомобиль>) 
		//		и ЗначениеЗаполнено(Параметры.Сообщение.Документ1С.<ГосНомер>)
		//		и ЗначениеЗаполнено(Параметры.Сообщение.Документ1С.<Водитель>) Тогда
		//		Параметры.Сообщение.Транспортировка.ИмяВодителя	= СокрЛП(Параметры.Сообщение.Документ1С.<Водитель>);
		//		Параметры.Сообщение.Транспортировка.МаркаТранспортногоСредства = СокрЛП(Параметры.Сообщение.Документ1С.<Автомобиль>);
		//		Параметры.Сообщение.Транспортировка.НомерТранспортногоСредства	= СокрЛП(Параметры.Сообщение.Документ1С.<ГосНомер>);
		//		Параметры.Сообщение.Транспортировка.РежимПеревозки	= "roadTransport";
		//		// Сообщить("заполняем");
		//	КонецЕсли;		
		//КонецЕсли;
	КонецЕсли;	
	
	Возврат Неопределено;	
	
КонецФункции

Функция Плагин_ЗаполнитьКодВСистемеПокупателя(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//Для Ашана запишем поле "additionalIdentificator" в шапку сообщения ALCRPT
	
	Если ИмяСобытия = "ПослеКонвертацииСообщения1СвEDI" Тогда
		//Если Параметры.Сообщение.ТипСообщения = "ALCRPT" Тогда
		//	//создадим такое свойство, если его вдруг не было
		//	Если Не Параметры.Сообщение.ГрузополучательEDI.Свойство("КодВСистемеПокупателя") Тогда
		//		Параметры.Сообщение.ГрузополучательEDI.Вставить("КодВСистемеПокупателя");
		//	КонецЕсли;
		//	Параметры.Сообщение.ГрузополучательEDI.КодВСистемеПокупателя = "нужный_код";
		//КонецЕсли;		
	КонецЕсли;	
	
	Возврат Неопределено;	
	
КонецФункции

Функция Плагин_ВратаВремени(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "КнопкаФормыСообщенияНажатие" Тогда
		
		Если Параметры.ИмяКнопки = "ВыбратьВрата" Тогда
			
			//переведем дату и время в читаемый вид
			для каждого элемент из Параметры.Сообщение.Транспортировка.ДатаВремяПрибытия цикл
				элемент.Представление=ОсновнойМодуль.ДатаXML_в_ДатаВремя1С(элемент.Значение);
			конеццикла;
			
			//открытие формы для выбора и добавления даты, времени прибытия.
			форма=ЭтотОбъект.ПолучитьФорму("ФормаСписка");
			ОригинальныйСписок=Параметры.Сообщение.Транспортировка.ДатаВремяПрибытия.Скопировать();
			если ОригинальныйСписок[0].значение="" тогда
				ОригинальныйСписок.удалить(0);
			конецесли;
			форма.списокВрат=ОригинальныйСписок;
			РезультатОбработкиСписка="";
			если форма.ОткрытьМодально()="Ок" тогда
				Параметры.Сообщение.Транспортировка.ДатаВремяПрибытия=ОригинальныйСписок;
				сообщение = Справочники.КонтурEDI_Сообщения.НайтиПоРеквизиту("ID",параметры.сообщение.ID);
				если сообщение.ID<>"" тогда
					СообщениеСсылка=Сообщение.ПолучитьОбъект();
					СообщениеСсылка.Хранилище = Новый ХранилищеЗначения(Параметры.Сообщение,Новый СжатиеДанных(9));
					СообщениеСсылка.записать();
				конецесли;
			конецесли;
			
			//если не нужно добавлять новые значения даты-времени в список, то можно воспользоватся таким кодом:
			//если Параметры.Сообщение.Транспортировка.ДатаВремяПрибытия.ОтметитьЭлементы("Выберите врата времени") тогда
			//	сообщение = Справочники.КонтурEDI_Сообщения.НайтиПоРеквизиту("ID",параметры.сообщение.ID);
			//	СообщениеСсылка=Сообщение.ПолучитьОбъект();
			//	СообщениеСсылка.Хранилище = Новый ХранилищеЗначения(Параметры.Сообщение,Новый СжатиеДанных(9));
			//	СообщениеСсылка.записать();
			//конецесли;
			
		КонецЕсли;
						
	КонецЕсли;
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" Тогда
		
		попытка
			Если (Параметры.Сообщение.Типсообщения="ORDERS" или Параметры.Сообщение.Типсообщения="ORDRSP") и Параметры.Сообщение.Транспортировка.ДатаВремяПрибытия.Количество()>0 тогда
				#Если Клиент Тогда
				ТЗКнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
				НоваяСтрока = ТЗКнопкиКоманднойПанели.Вставить(1);
				НоваяСтрока.ВидКнопки= "Кнопка";
				НоваяСтрока.Имя="ВыбратьВрата";
				НоваяСтрока.КнопкаПоУмолчанию=Ложь;
				НоваяСтрока.Представление="Выбрать врата времени";
				НоваяСтрока.ПроверятьПоля=Ложь;
				НоваяСтрока.СохранятьСоответствия=Ложь;                                              
				ДействиеКнопки = Новый Действие("КнопкаДействияФормыНажатие");
				КнопкиСписка = Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
				НоваяКнопка = КнопкиСписка.Добавить("ВыбратьВрата",ТипКнопкиКоманднойПанели.Действие, "Выбрать врата времени", ДействиеКнопки);
				КоличествоКнопок = КнопкиСписка.Количество();
				КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
				#КонецЕсли
			конецесли;
		исключение
		конецпопытки;		
				
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
	
Функция Плагин_АсторТорговыйДом7(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//В Астор: Торговый Дом 7 документ "Приходная накладная" связан с "Заказом поставщику" по регистру сведений "Закрытие заказов".
	//Это не укладывается в логику работы модуля, так что делаем через подключаемый модуль.
	Если ИмяСобытия = "ПолучитьТекстЗапросаДляТаблицы" Тогда
		//Используется для построения основного списка документов и для поиска связанных друг с другом документов
		//Параметры: ИмяТаблицы,		ТаблицаСоединенийДокументов,	НазначениеЗапроса
		
		
		//Пример: Плагин для Астора, который сильно не укладывается в текущую логику
		Если Параметры.НазначениеЗапроса = "ПостроениеСписка" Тогда
			
			Если Параметры.ИмяТаблицы = "Заказ" Тогда
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Документы.Ссылка КАК Док_Заказ,
				|	Документы.Проведен КАК Док_Проведен,
				|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
				|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
				|	Документы.ИтогоСумма КАК СуммаДокумента,
				|	ВЫРАЗИТЬ(ЗакрытиеЗаказов.ДокументЗакрытия КАК Документ.ПриходнаяНакладная) КАК Док_ПриходнаяНакладная
				|ПОМЕСТИТЬ ВТ_Заказ
				|ИЗ
				|	Документ.Заказ КАК Документы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
				|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = Документы.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|		ПО (ЗакрытиеЗаказов.ПоДокументу = Документы.Ссылка)
				|ГДЕ
				|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И НЕ Документы.ПометкаУдаления
				|	И &Условия
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Партнер,
				|	Док_Заказ,
				|	Док_ПриходнаяНакладная";
				;
				
			ИначеЕсли Параметры.ИмяТаблицы = "ПриходнаяНакладная" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
				|	ПриходнаяНакладная.Проведен КАК Док_Проведен,
				|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
				|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
				|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_Заказ,
				|	ПриходнаяНакладная.ИтогоВсего КАК СуммаДокумента,
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры
				|ПОМЕСТИТЬ ВТ_ПриходнаяНакладная
				|ИЗ
				|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
				|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = ПриходнаяНакладная.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|		ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
				|		ПО ПриходнаяНакладная.Ссылка = РегистрацияСчетаФактурыСоставНДС.Основание
				|ГДЕ
				|	ПриходнаяНакладная.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И НЕ ПриходнаяНакладная.ПометкаУдаления
				|	И &Условия
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Партнер,
				|	Док_ПриходнаяНакладная,
				|	Док_Заказ,
				|	Док_РегистрацияСчетаФактуры";
				;
				
			ИначеЕсли Параметры.ИмяТаблицы = "РегистрацияСчетаФактурыСоставНДС" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка.Проведен КАК Док_Проведен,
				|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
				|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
				|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
				|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_ПриходнаяНакладная,
				|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ,
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка.ИтогоВсего КАК СуммаДокумента
				|ПОМЕСТИТЬ ВТ_РегистрацияСчетаФактуры
				|ИЗ
				|	Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
				|		ПО РегистрацияСчетаФактурыСоставНДС.Ссылка.Контрагент = ТаблицаКэшПартнеровКонтрагентов.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|			ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
				|		ПО РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка
				|ГДЕ
				|	&Условия
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Партнер,
				|	Док_РегистрацияСчетаФактуры,
				|	Док_ПриходнаяНакладная,
				|	Док_Заказ";
				;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Параметры.НазначениеЗапроса = "СвязанныеСообщения" Тогда
			
			Если Параметры.ИмяТаблицы = "Заказ" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
				|	Заказ.Ссылка КАК Док_Заказ,
				|	ЗакрытиеЗаказов.ДокументЗакрытия КАК Док_ПриходнаяНакладная
				|ИЗ
				|	Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
				|			ПО ЗакрытиеЗаказов.ПоДокументу = Заказ.Ссылка
				|		ПО РегистрацияСчетаФактурыСоставНДС.Основание = ЗакрытиеЗаказов.ДокументЗакрытия
				|ГДЕ
				|	Заказ.Ссылка В(&Ссылка)";
				
			ИначеЕсли Параметры.ИмяТаблицы = "ПриходнаяНакладная" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
				|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
				|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ
				|ИЗ
				|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|		ПО ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
				|		ПО (РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка)
				|ГДЕ
				|	ПриходнаяНакладная.Ссылка В(&Ссылка)";
				
			ИначеЕсли Параметры.ИмяТаблицы = "РегистрацияСчетаФактурыСоставНДС" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка КАК Док_РегистрацияСчетаФактуры,
				|	ПриходнаяНакладная.Ссылка КАК Док_ПриходнаяНакладная,
				|	ЗакрытиеЗаказов.ПоДокументу КАК Док_Заказ
				|ИЗ
				|	РегистрСведений.ЗакрытиеЗаказов КАК ЗакрытиеЗаказов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСчетаФактуры.СоставНДС КАК РегистрацияСчетаФактурыСоставНДС
				|			ПО (РегистрацияСчетаФактурыСоставНДС.Основание = ПриходнаяНакладная.Ссылка)
				|		ПО (ПриходнаяНакладная.Ссылка = ЗакрытиеЗаказов.ДокументЗакрытия)
				|ГДЕ
				|	РегистрацияСчетаФактурыСоставНДС.Ссылка В(&Ссылка)";
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтандартнаяОбработкаEDI = Ложь;
		Возврат ПолныйТекстЗапроса;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_ОтправкаДанныхСерииНоменклатуры(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда
		ТаблицаМетаданных 		= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		Если ТипСообщения = "DESADV" И Направление = "Исходящее" Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СерияНоменклатуры",				"Товары",		"1С",				,				,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СерийныйНомер",					"Товары",		"=",				,	"Строка178"	,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СрокГодности",					"Товары",		"=",				,	"Дата"		,	,	);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		Сообщение 		= Параметры.Сообщение;
		ДокументСсылка  = Параметры.ДокументСсылка;
		ДопПараметры	= Параметры.Параметры;
		Если Не Сообщение.ТипСообщения = "DESADV" И Не Направление = "Исходящее" Тогда
			Возврат Неопределено;
		ИначеЕсли Сообщение.Товары.Колонки.Найти("СерияНоменклатуры") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Для Каждого Строка Из Сообщение.Товары Цикл
			Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			ОбъектМетеданных = Метаданные.НайтиПоТипу(ТипЗнч(Строка.СерияНоменклатуры));
			Если Не ОбъектМетеданных.Реквизиты.Найти("СерийныйНомер") = Неопределено Тогда
				Строка.СерийныйНомер = Строка.СерияНоменклатуры.СерийныйНомер;
			КонецЕсли;
			Если Не ОбъектМетеданных.Реквизиты.Найти("СрокГодности") = Неопределено Тогда
				Строка.СрокГодности  = Строка.СерияНоменклатуры.СрокГодности;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписатьЭлементХМЛ" Тогда
		ИмяЭлемента = Параметры.ИмяЭлемента;
		Если ИмяЭлемента = "lineItem" Тогда
			Если Не ТипЗнч(Параметры.Параметры) = Тип("Структура") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Сообщение") Тогда
				Возврат Неопределено;
			ИначеЕсли Не Параметры.Параметры.Свойство("Строка") Тогда
				Возврат Неопределено;	
			КонецЕсли;
			ЗаписьХМЛ = Параметры.ЗаписьХМЛ;
			Строка 	  = Параметры.Параметры.Строка;
			Сообщение = Параметры.Параметры.Сообщение;
			Если Не Сообщение.ТипСообщения = "DESADV" или Не Сообщение.Направление = "Исходящее" Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("СерийныйНомер") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.СерийныйНомер) Тогда
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "serialNumber",	Строка.СерийныйНомер);	
				КонецЕсли;	
			КонецЕсли;
			Если Не Сообщение.Товары.Колонки.Найти("СрокГодности") = Неопределено Тогда
				Если ЗначениеЗаполнено(Строка.СрокГодности) Тогда
					ОсновнойМодуль.ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "expireDate",		ОсновнойМодуль.Дата1С_в_ДатаXML(Строка.СрокГодности));	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Плагин_ОтправкаДанныхФакторинга(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда
		ТаблицаМетаданных 		= Параметры.ТаблицаМетаданных;
		ТипСообщения 			= Параметры.ТипСообщения;
		Направление 			= Параметры.Направление;
		Если ТипСообщения = "INVOIC" И Направление = "Исходящее" Тогда
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "ФакторингУступочнаяНадпись",		,	"=",	,	"Строка2000",	,	);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда
		Сообщение 		= Параметры.Сообщение;
		ДопПараметры	= Параметры.Параметры;
		ДокументСсылка  = Параметры.ДокументСсылка;
		Если Не Сообщение.ТипСообщения = "INVOIC" И Не Направление = "Исходящее" Тогда
			Возврат Неопределено;
		ИначеЕсли Не Сообщение.Свойство("ФакторингУступочнаяНадпись") Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сообщение.ФакторингУступочнаяНадпись = "Уведомление! Денежное требование по оплате нижеуказанных поставленных товаров уступлено Поставщиком ..."; //введите необходимую уступочную надпись
	КонецЕсли;
		
КонецФункции

Функция Плагин_НестандартнаяКонфигурация(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//Для переопределения типов объектов "раскомментировать" и настроить макет "_ТипыОбъектов" в данном подключаемом модуле.
	//Для переопределения связей между документами в цепочке "раскомментировать" и настроить макет "_ШаблоныЗапросов" в данном подключаемом модуле.
	
	//Здесь собраны основные события, используемые для настройки работы модуля в нестандартных конфигурациях
	
	Если ИмяСобытия = "ПолучитьРеквизитДокументаДляСообщения" Тогда
		
		//Параметры: Документ, Реквизит
		//Допустимые варианты реквизитов сейчас:
		//Договор, Контрагент, ВалютаДокумента, СуммаВключаетНДС, ДатаОтгрузки
		
		Документ		= Параметры.Документ;
		ИмяРеквизита	= Параметры.ИмяРеквизита;	
		
		Результат = Неопределено;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			
			Если ИмяРеквизита = "Договор" Тогда
				Результат = Документ.Контрагент.ОсновнойДоговорКонтрагента;
				
			ИначеЕсли ИмяРеквизита = "СуммаВключаетНДС" Тогда
				Результат = (Документ.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
				
			ИначеЕсли ИмяРеквизита = "Грузополучатель" Тогда
				Результат = Документ.EDI_ТочкаДоставки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяРеквизита = "Валюта" Тогда
			Результат = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли; 
		
		Если Результат <> Неопределено Тогда
			СтандартнаяОбработкаEDI = Ложь;
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьТекстЗапросаДляТаблицы" Тогда
		//Используется для построения основного списка документов и для поиска связанных друг с другом документов
		//Параметры: ИмяТаблицы,		ТаблицаСоединенийДокументов,	НазначениеЗапроса
		
		//Используется редко, пример можно найти в "Плагин_АсторТорговыйДом7"
		
		ПолныйТекстЗапроса = Неопределено;
		
		Если Параметры.НазначениеЗапроса = "ПостроениеСписка" Тогда
			
			Если 	Параметры.ИмяТаблицы = "ПриходныйОрдерСклад" Тогда
				
				ПолныйТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	докВозврат.Ссылка КАК Док_ПриходныйОрдерСклад,
				|	докВозврат.Проведен КАК Док_Проведен,
				|	ТаблицаКэшПартнеровКонтрагентов.Партнер,
				|	ТаблицаКэшПартнеровКонтрагентов.RETANN,
				|	ТаблицаКэшПартнеровКонтрагентов.RETINS,
				|	ТаблицаКэшПартнеровКонтрагентов.RETDES,
				|	ТаблицаКэшПартнеровКонтрагентов.RETREC,
				|	"""" КАК СообщениеБлокирующееRETANN,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRETINS,
				|	"""" КАК СообщениеБлокирующееRETDES,
				|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRETREC,
				|	0 КАК СуммаДокумента
				|ПОМЕСТИТЬ ВТ_ПриходныйОрдерСклад
				|ИЗ
				|	Документ.ПриходныйОрдерСклад КАК докВозврат
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
				|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = докВозврат.Поставщик)
				|ГДЕ
				|	докВозврат.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И НЕ докВозврат.ПометкаУдаления
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Док_ПриходныйОрдерСклад";
				
			КонецЕсли;				
			
		КонецЕсли;				
		
		Если ПолныйТекстЗапроса <> Неопределено Тогда
			СтандартнаяОбработкаEDI = Ложь;
		КонецЕсли; 
		
		Возврат ПолныйТекстЗапроса;
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ПолучитьТоварыПоШтрихкоду" Тогда
		СтандартнаяОбработкаEDI = Ложь;
		Возврат Неопределено;
	КонецЕсли;			
	
	Если ИмяСобытия = "ФинальныйЗапросПостроенияСписка" Тогда
		СтандартнаяОбработкаEDI = Ложь;
		
		Параметры.ЗапросСКэшемПартнеров.Текст =  Параметры.ЗапросСКэшемПартнеров.Текст + "
		| И (Документ.EDI_ГотовКОбмену = Истина ИЛИ Документ.Ссылка Есть NULL)";
		
		Возврат Неопределено;
	КонецЕсли; 	
	
	Если ИмяСобытия = "ЗагрузитьРасхождения" Тогда

		// С X5 согласованы цены без НДС
		Если Параметры.ВызовИзФормы Тогда
			ИмяПоляКоличествоВНакладной = "КоличествоВНакладной";
			ИмяПоляКоличествоПринято = "КоличествоПринято";
			ИмяПоляЦенаБезНДСВНакладной = "ЦенаБезНДСВНакладной";
			ИмяПоляЦенаБезНДСПринято = "ЦенаБезНДСПринято";
		Иначе
			ИмяПоляКоличествоВНакладной = "Количество2";
			ИмяПоляКоличествоПринято = "Количество1";
			ИмяПоляЦенаБезНДСВНакладной = "ЦенаБезНДС2";
			ИмяПоляЦенаБезНДСПринято = "ЦенаБезНДС1";
		КонецЕсли; 
		
		ДокументОбъект = Параметры.ДокументСсылка.ПолучитьОбъект();
		
		ТаблицаСравнения = Параметры.ТаблицаСравнения;
		
		// Переносим цены в документ
		СуммаВключаетНДС = (ДокументОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		
		Для Каждого Строка Из ТаблицаСравнения Цикл
			Если Строка[ИмяПоляЦенаБезНДСПринято] = Строка[ИмяПоляЦенаБезНДСВНакладной] Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = Параметры.ТипСообщения + ". " + "Номенклатура: <" + Строка.Номенклатура + ">. Характеристика: <" + Строка.ХарактеристикаНоменклатуры + ">" + Символы.ПС +
										"Цена без НДС. В документе: " + Строка[ИмяПоляЦенаБезНДСВНакладной] + ". Принято: " + Строка[ИмяПоляЦенаБезНДСПринято];
			
			ЗаписьЖурналаРегистрации("EDI. Расхождения при загрузке", УровеньЖурналаРегистрации.Предупреждение, , Параметры.ДокументСсылка, ТекстОшибки);				
			
			НайденныеСтроки = ДокументОбъект.EDI_Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));					
			НайденныеСтрокиСУчетомХарактеристики = ДокументОбъект.EDI_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));					
			
			// Если по одной номенклатуре разные хар-ки - оставляем для ручного разбирательства
			Если НайденныеСтроки.Количество() <> НайденныеСтрокиСУчетомХарактеристики.Количество() Тогда
				Продолжить;
			КонецЕсли; 
			
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				СтрокаТовара.Цена = ?(СуммаВключаетНДС, Строка[ИмяПоляЦенаБезНДСПринято] * (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС)/100), Строка[ИмяПоляЦенаБезНДСПринято]); 
				ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(СтрокаТовара);
			КонецЦикла;  
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));										
			
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				СтрокаТовара.Цена = ?(СуммаВключаетНДС, Строка[ИмяПоляЦенаБезНДСПринято] * (1 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС)/100), Строка[ИмяПоляЦенаБезНДСПринято]); 
				ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(СтрокаТовара);
			КонецЦикла;  
			
		КонецЦикла;
		
		// Корректируем количество. Если по одной характеристике будут разные даты производства - списываем в произвольном порядке
		ТаблицаСравнения.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", ИмяПоляКоличествоПринято + ", " +ИмяПоляКоличествоВНакладной);
		
		ЕстьОшибки = Ложь;
		
		Для Каждого Строка Из ТаблицаСравнения Цикл
			Если Строка[ИмяПоляКоличествоВНакладной] = Строка[ИмяПоляКоличествоПринято] Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекстОшибки =  Параметры.ТипСообщения + ". "  + "Номенклатура: <" + Строка.Номенклатура + ">. Характеристика: <" + Строка.ХарактеристикаНоменклатуры + ">" + Символы.ПС +
										"Количество. В документе: " + Строка[ИмяПоляКоличествоВНакладной] + ". Принято: " + Строка[ИмяПоляКоличествоПринято];
			
			ЗаписьЖурналаРегистрации("EDI. Расхождения при загрузке", УровеньЖурналаРегистрации.Предупреждение, , Параметры.ДокументСсылка, ТекстОшибки);				
			
			НайденныеСтроки = ДокументОбъект.EDI_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли; 
			
			Если Строка[ИмяПоляКоличествоПринято] > Строка[ИмяПоляКоличествоВНакладной] Тогда
				// По идее принять больше чем было в предзаказе не должны, но на всякий случай заложимся
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка[ИмяПоляКоличествоПринято] - Строка[ИмяПоляКоличествоВНакладной];
				ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(НайденныеСтроки[0]);
				
			Иначе
				ОсталосьРасхождение = Строка[ИмяПоляКоличествоВНакладной] - Строка[ИмяПоляКоличествоПринято];
				
				Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
					Списываем = Мин(ОсталосьРасхождение, СтрокаТовара.Количество);
					
					СтрокаТовара.Количество = СтрокаТовара.Количество - Списываем;
					ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(СтрокаТовара);
					
					ОсталосьРасхождение = ОсталосьРасхождение - Списываем;
					
					Если ОсталосьРасхождение = 0 Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла;  
			КонецЕсли; 
			
		КонецЦикла;  

		// Корректируем количество в основной ТЧ
		ТаблицаСравнения.Свернуть("Номенклатура", ИмяПоляКоличествоПринято + ", " +ИмяПоляКоличествоВНакладной);
		
		Для Каждого Строка Из ТаблицаСравнения  Цикл
			Если Строка[ИмяПоляКоличествоВНакладной] = Строка[ИмяПоляКоличествоПринято] Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТовара = ДокументОбъект.Товары.Найти(Строка.Номенклатура, "Номенклатура"); 
			
			Если СтрокаТовара = Неопределено Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли; 
			
			СтрокаТовара.Количество = Строка[ИмяПоляКоличествоПринято];
			ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(СтрокаТовара);
		КонецЦикла;  
		
		Попытка 
			ДокументОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			ЕстьОшибки = Истина;
		КонецПопытки; 
		
		Если ЕстьОшибки Тогда
			Сообщить("Не удалось перенести корректировки по " + Параметры.ТипСообщения + " в документ " + Параметры.ДокументСсылка); 
			Возврат Ложь;
		Иначе
			Если Параметры.ТипСообщения = "ORDERS" Тогда
				ОсновнойМодуль.УстановитьСтатусДокумента(Параметры.ДокументСсылка, "НетРасхождений", "ОбратныйЗаказ");
			Иначе
				ОсновнойМодуль.УстановитьСтатусДокумента(Параметры.ДокументСсылка, "НакладнаяПринятЧастичноОбработан", "Приемка");
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли; 
		
	КонецЕсли;		
	
	Если ИмяСобытия = "ИзменитьМетаданныеСообщения" Тогда
		ТаблицаМетаданных	= Параметры.ТаблицаМетаданных;
		ТипСообщения 		= Параметры.ТипСообщения;
		Направление 		= Параметры.Направление;

		Если ТипСообщения = "DESADV" И Направление = "Исходящее" Тогда
			//ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СерияНоменклатуры",				"Товары",		"1С",				,				,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СерийныйНомер",					"Товары",		"=",				,	"Строка178"	,	,	);
			ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТаблицаМетаданных, "СрокГодности",					"Товары",		"=",				,	"Дата"		,	,	);
		КонецЕсли;		
	КонецЕсли;		
	
			
	Если ИмяСобытия = "ПослеЗаполнения_LineItem_XDTO" Тогда
		Сообщение = Параметры.Сообщение;
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			Если НЕ Сообщение.Товары.Колонки.Найти("СерийныйНомер") = Неопределено Тогда
				Если ЗначениеЗаполнено(Параметры.СтрокаТоваров.СерийныйНомер) Тогда
					ЗначениеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string"),Параметры.СтрокаТоваров.СерийныйНомер);
					Параметры.lineItem.Добавить(ФормаXML.Элемент, xmlПространствоИменСообщений(), "serialNumber",ЗначениеXDTO); 
				КонецЕсли; 
		    КонецЕсли;
			Если НЕ Сообщение.Товары.Колонки.Найти("СрокГодности") = Неопределено Тогда
				Если ЗначениеЗаполнено(Параметры.СтрокаТоваров.СрокГодности) Тогда
					ЗначениеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string"),ОсновнойМодуль.Дата1С_в_ДатаXML(Параметры.СтрокаТоваров.СрокГодности));
					Параметры.lineItem.Добавить(ФормаXML.Элемент, xmlПространствоИменСообщений(), "expireDate",ЗначениеXDTO); 
					
		ДатаПроизводства = НачалоДня(Сообщение.ДатаСоздания - 24*60*60);					
		ЗначениеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string"),ОсновнойМодуль.Дата1С_в_ДатаXML(ДатаПроизводства));
		Параметры.lineItem.Добавить(ФормаXML.Элемент, xmlПространствоИменСообщений(), "manufactoringDate",ЗначениеXDTO); 
					
				КонецЕсли;  
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеПодготовкиИсходящегоСообщения" Тогда	
		
		// Т.к. от X5 в заказе может приходить некорректая дата поставки - поменяем ее на текущую
		Если Параметры.Сообщение.ТипСообщения= "DESADV" Тогда 
			Параметры.Сообщение.ДатаПоставки = НачалоДня(ТекущаяДата());
		КонецЕсли;				
		
	КонецЕсли;				
	
	Если ИмяСобытия = "ЗаполнитьВходящийДокументПоСообщению_ORDERS" Тогда
		//Используется для построения основного списка документов и для поиска связанных друг с другом документов
		//Параметры: Документ (инициализированный объект для заполнения),		Сообщение (Структура)
		//Возвращать/записывать ничего не надо.
		//СтандартнаяОбработкаEDI выставить в Ложь, чтобы не отрабатывал штатный алгоритм из функции ПринятьЗаказПокупателя() основного модуля.
		
		//Документ	= Параметры.Документ;
		//Сообщение	= Параметры.Сообщение;
		//
		//Документ.Дата = ТекущаяДата();
		//
		//Документ.Организация	= Сообщение.Продавец1С;
		//Документ.Контрагент	= Сообщение.Покупатель1С;
		//
		//Документ.ДоговорКонтрагента = Сообщение.Договор;
		//
		//Документ.Товары.Очистить();
		//
		//Для Каждого Стр Из Сообщение.Товары Цикл
		//	
		//	НоваяСтрока = Документ.Товары.Добавить();
		//	
		//	НоваяСтрока.Номенклатура		= Стр.Номенклатура;
		//	//...
		//	
		//КонецЦикла;
		//
		//СтандартнаяОбработкаEDI = Ложь;
		
	КонецЕсли;	
	
	Если ИмяСобытия = "КонвертироватьЗначениеEDIв1С" Тогда
		
		//переопределим правила преобразования примитивных типов EDI в ссылочные в 1С
		
		//ЗначениеEDI	= Параметры.ЗначениеEDI;
		//ТипПоляEDI	= Параметры.ТипПоляEDI;
		//ТипПоля1C	= Параметры.ТипПоля1C;
		//Сообщение	= Параметры.Сообщение;
		//
		//Если ТипПоляEDI = "Валюта" Тогда
		//	СтандартнаяОбработкаEDI = Ложь;
		//	_Результат = Константы.ВалютаУчета.Получить();
		//	Возврат _Результат;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "КонвертироватьЗначение1СвEDI" Тогда
		
		//переопределим правила преобразования ссылочных типов 1С в примитивные типы EDI
		
		//Значение1С	= Параметры.Значение1С;
		//ТипПоляEDI	= Параметры.ТипПоляEDI;
		//ТипПоля1C	= Параметры.ТипПоля1C;
		//Сообщение	= Параметры.Сообщение;
		//
		//Если Параметры.ТипПоля1C = "СтавкаНДС" Тогда
		//	СтандартнаяОбработкаEDI = Ложь;
		//	
		//	Если Параметры.Значение1С = Перечисления.СтавкиНДС.БезНДС Тогда
		//		_Результат = "NOT_APPLICABLE";
		//	ИначеЕсли Параметры.Значение1С = Перечисления.СтавкиНДС.НДС18 Тогда
		//		_Результат = "18";
		//	ИначеЕсли Параметры.Значение1С = Перечисления.СтавкиНДС.НДС10 Тогда
		//		_Результат = "10";
		//	ИначеЕсли Параметры.Значение1С = Перечисления.СтавкиНДС.НДС0 Тогда
		//		_Результат = "0";
		//	КонецЕсли;			
		//	
		//	Возврат _Результат;
		//КонецЕсли;
		//
		//Если Параметры.ТипПоля1C = "Страна" Тогда
		//	СтандартнаяОбработкаEDI = Ложь;
		//	
		//	Если НЕ ЗначениеЗаполнено(Параметры.Значение1С) Тогда
		//		Возврат Параметры.Значение1С;
		//	КонецЕсли;
		//	
		//	Если Параметры.Значение1С = Неопределено ИЛИ Параметры.Значение1С = "" Тогда
		//		Возврат Параметры.Значение1С; 
		//	КонецЕсли;
		//	
		//	СписокАльфа2	= ОсновнойМодуль.ЗагрузитьКлассификаторИзМакета("КодСтраныАльфа2");
		//	КодАльфа2		= СписокАльфа2.НайтиПоЗначению(Параметры.Значение1С.Код);
		//	
		//	Возврат ?(КодАльфа2 = Неопределено, "", КодАльфа2.Представление);
		//	
		//КонецЕсли;
		//
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьТекущегоПользователя1С" Тогда
		//переопределение одноименной функции основного модуля.
		
		//Возврат глТекущийПользователь;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьДоговорКонтрагентаДляСообщения" Тогда
		
		//Если Параметры.КтоМы = "Поставщик" Тогда
		//	
		//	СтандартнаяОбработкаEDI = Ложь;
		//	
		//	Запрос = Новый Запрос(
		//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	|	ДоговорыКонтрагентов.Ссылка,
		//	|	0 КАК Порядок
		//	|ИЗ
		//	|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыКонтрагентов
		//	|ГДЕ
		//	|	ДоговорыКонтрагентов.Организация = &Организация
		//	|	И ДоговорыКонтрагентов.Владелец = &Владелец
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	Порядок УБЫВ");
		//	
		//	Запрос.УстановитьПараметр("Организация",	Параметры.Сообщение.Продавец1С);
		//	Запрос.УстановитьПараметр("Владелец",		Параметры.Сообщение.Покупатель1С);
		//	
		//	Возврат ОсновнойМодуль.ПолучитьРезультатЗапроса(Запрос);
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Неопределено;
			
КонецФункции

Функция Плагин_ВывестиДополнительнуюКолонкуОсновногоСписка(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//Позволяет вывести в список задач основной формы дополнительные колонки (не более 3).
	//Ниже пример: предполагаем, что в каждом заказе находятся товары с одинаковым значением реквизита "Вид номенклатуры", и выводим вид номенклатуры в список.
	
	//1. Добавим поле "Вид продукции" в основной список
	
	Если ИмяСобытия = "ПриОткрытииОсновнойФормы" Тогда
		
		Форма = Параметры.Форма;
		
		Если Лев(ОсновнойМодуль.ИмяКонфигурации1С,2)="УФ" Тогда 
			КолонкаДопРеквизит1 = Форма.Элементы.ТабСообщенияДопРеквизит1;
			КолонкаДопРеквизит1.Заголовок = "Вид продукции";
		иначе
			КолонкаДопРеквизит1 = Форма.ЭлементыФормы.ТабСообщения.Колонки.ДопРеквизит1;
			КолонкаДопРеквизит1.ТекстШапки = "Вид продукции";
		КонецЕсли;
		КолонкаДопРеквизит1.Видимость = Истина;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	//2. В момент сохранения объекта сообщения допишем в табличную часть справочника наш собственный реквизит, чтобы потом можно было быстро получить его одним запросом.
	Если ИмяСобытия = "ПередЗаписьюОбъектаСообщения" Тогда
		
		СообщениеОбъект = Параметры.СообщениеОбъект;
		
		СтрокаРеквизита = СообщениеОбъект.ДополнительныеРеквизиты.Найти("мВидНоменклатуры");
		Если СтрокаРеквизита = Неопределено Тогда
			//добавим эту строку
			СообщениеСтруктура = СообщениеОбъект.Хранилище.Получить();

			//возможно, понадобится еще сконвертировать товары
			Если НЕ СообщениеСтруктура.Товары.Найти(Справочники.Номенклатура.ПустаяСсылка(),"Номенклатура") = Неопределено Тогда
				ОсновнойМодуль.КонвертироватьТабличнуюЧастьСообщенияEDIв1С(СообщениеСтруктура,"Товары");
			КонецЕсли;
			
			ЗапросВидовНоменклатуры = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Номенклатура.ВидНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&СписокНоменклатуры)"
			);
			ЗапросВидовНоменклатуры.УстановитьПараметр("СписокНоменклатуры",СообщениеСтруктура.Товары.ВыгрузитьКолонку("Номенклатура"));
			ТабВидовНоменклатурыСообщения = ЗапросВидовНоменклатуры.Выполнить().Выгрузить();
			
			Если ТабВидовНоменклатурыСообщения.Количество()=1 Тогда
				//добавляем запись
				НовСтрока = СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
				
				НовСтрока.ИмяРеквизита	= "мВидНоменклатуры";
				НовСтрока.Значение		= ТабВидовНоменклатурыСообщения[0].ВидНоменклатуры;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	//3. После того, как список задач выведен в табличную часть "ТабСообщения" обработки, дозаполним еще одну колонку "ДопРеквизит1".
	Если ИмяСобытия = "ПослеОбновленияСпискаЗадач" Тогда
		
		ЗапросПоСообщениям = Новый Запрос;
		ЗапросПоСообщениям.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(_Таб.СообщениеСсылка КАК Справочник.КонтурEDI_Сообщения) КАК СообщениеСсылка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК _Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СообщениеСсылка,
		|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение КАК ДопРеквизит1
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
		|		ПО ВТ.СообщениеСсылка = КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
		|			И (КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""мВидНоменклатуры"")"
		;
		ЗапросПоСообщениям.УстановитьПараметр("Таб",ОсновнойМодуль.ТабСообщения.Выгрузить(,"СообщениеСсылка"));
		ВидыНоменклатурыСообщений = ЗапросПоСообщениям.Выполнить().Выгрузить();
		
		//ОсновнойМодуль.ТабСообщения.ЗагрузитьКолонку(ВидыНоменклатурыСообщений.ВыгрузитьКолонку("ДопРеквизит1"),"ДопРеквизит1");
		
		Для каждого Стр ИЗ ВидыНоменклатурыСообщений Цикл
            Если ЗначениеЗаполнено(Стр.ДопРеквизит1) Тогда
                НайденнаяСтрока = ОсновнойМодуль.ТабСообщения.Найти(Стр.СообщениеСсылка,"СообщениеСсылка");
                НайденнаяСтрока.ДопРеквизит1 = Стр.ДопРеквизит1;
            КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_МаршрутизацияСообщенийТорговойСети(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//Предназначен для торговых сетей, работающих через API в режиме РБД с полной миграцией всех объектов Контур.EDI, кроме справочника сообщений.
	//Очень часто в этом случае периферийные базы забирают документы только из "своего" ящика, а центральная - из всех.
	//Но просто так отключить в периферийной базе "лишние" транспортные ящики не получится. Для этого как раз можно воспользоваться следующими двумя событиями ПМ.
	
	Если ИмяСобытия = "ОтфильтроватьЯщикиДляПолученияСообщений" Тогда
		
		////Здесь можно подправить список транспортных ящиков API, из которых модуль будет получать новые сообщения
		////Для этого надо проставить Истина/Ложь в колонке "Неактивный"
		//
		////Параметры:
		////СтрокиЯщиков - ТаблицаЗначений, получаемая в основном модуле функцией "ПолучитьСписокЭлементовСправочника("ТранспортныеЯщики"")"
		//
		//СкладТекущейБД = ПланыОбмена.Полный.ЭтотУзел().Склад;
		//СписокТочекДоставки = ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСвои");
		//GLNТекущейБД = СписокТочекДоставки.Найти(складТекущейБД, "ТочкаДоставки").GLN;

		//Для Каждого СтрокаЯщика Из Параметры.СтрокиЯщиков Цикл
		//	//принудительно включим ящики, относящиеся к текущей базе, и отключим все остальные
		//	СтрокаЯщика.НеАктивный = (СтрокаЯщика.GLNЯщика = GLNТекущейБД) 
		//								или СтрокаЯщика.Тестовый;//а тестовые будем выключать в любом случае
		//КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолучитьЯщикДляОтправкиСообщения" Тогда
		
		////Определение транспортного ящика API для отправки исходящего сообщения
		//
		////Параметры:
		////GLN
		//
		//СтандартнаяОбработкаEDI = Ложь;//отключаем штатный алгоритм
		//
		////это бы вынести в отдельный метод
		//складТекущейБД = ПланыОбмена.Полный.ЭтотУзел().Склад;
		//СписокТочекДоставки = ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСвои");
		//
		//СписокОрганизаций = ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("НашиОрганизации");
		//
		//СтрокиОрганизаций = СписокОрганизаций.НайтиСтроки(Новый Структура("GLN,Неактивная",Параметры.GLN,Ложь));
		//Если СтрокиОрганизаций.Количество()<>1 Тогда
		//	Возврат "";
		//КонецЕсли;
		//
		//СтрокиЯщиков = ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("ТранспортныеЯщики",СтрокиОрганизаций[0].Ссылка);
		//Для Каждого СтрокаЯщика Из СтрокиЯщиков Цикл
		//	GLNТекущейБД = СписокТочекДоставки.Найти(складТекущейБД, "ТочкаДоставки").GLN;
		//	Если СтрокаЯщика.GLNЯщика = GLNТекущейБД Тогда
		//		Возврат СтрокаЯщика.id;
		//	КонецЕсли;
		//КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_УФ_ПропускДействияОжидайтеУведомленияОПриемкеУФ(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" тогда
		
		Если Параметры.Сообщение.Направление = "Исходящее" и Параметры.Сообщение.ТипСообщения = "DESADV" И ЗначениеЗаполнено(Параметры.Сообщение.СообщениеСсылка) Тогда
			
			ДокументРеализация = Параметры.Сообщение.Документ1С;
			ЕстьRECADV = (ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(Параметры.Сообщение.Получатель1С, "RECADV") = Истина);
			СообщениеRECADV = ОсновнойМодуль.НайтиСообщениеДокумента(ДокументРеализация,"RECADV","Исходящее");
			
			Если ЕстьRECADV И НЕ ЗначениеЗаполнено(СообщениеRECADV) Тогда
				
				
				
				
				КомандаПропускRecadv			= Параметры.ФормаСообщения.Команды.Добавить("ПропуститьRECADV");
				КомандаПропускRecadv.Действие 	= "КнопкаДополнительныеДействияФормыНажатие";
				КомандаПропускRecadv.Заголовок 	= "Пропуск сообщения RECADV";
				КнопкаПропускRecadv 			= Параметры.ФормаСообщения.Элементы.Добавить("КнопкаПропускRecadv",Тип("КнопкаФормы"),Параметры.ФормаСообщения.КоманднаяПанель);
				КнопкаПропускRecadv.Вид 		= ВидКнопкиФормы.ОбычнаяКнопка;
				КнопкаПропускRecadv.ИмяКоманды 	= "ПропуститьRECADV";
				//КнопкаПропускRecadv.Картинка 	= БиблиотекаКартинок.Печать;
				КнопкаПропускRecadv.Отображение = ОтображениеКнопки.КартинкаИТекст;
				ОсновнойМодуль.ДобавитьКнопкуФормыСообщения(Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели,"Кнопка",	"ПропуститьRECADV", "ПропуститьRECADV",	Ложь,	,"ЭлементФормы",	,Истина);
	
				
				
				
				
				//код из расширения для обычных форм
//				ТЗКнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
//				НоваяСтрока							= ТЗКнопкиКоманднойПанели.Вставить(1);
//				НоваяСтрока.ВидКнопки				= "Кнопка";
//				НоваяСтрока.Имя						= "ПропуститьRECADV";
//				НоваяСтрока.ИмяКартинки				= "КартинкаСохранить";
//				НоваяСтрока.ИсточникКартинки		= "ЭлементФормы";
//				НоваяСтрока.КнопкаПоУмолчанию		= Ложь;
//				НоваяСтрока.Представление			= "Пропустить RECADV";
//				НоваяСтрока.ПроверятьПоля			= Ложь;
//				НоваяСтрока.СохранятьСоответствия	= Ложь;                                              
//				
//				ДействиеКнопки = Новый Действие("КнопкаДействияФормыНажатие");
//				КнопкиСписка = Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
//				НоваяКнопка = КнопкиСписка.Добавить("ПропуститьRECADV",                ТипКнопкиКоманднойПанели.Действие,       "Пропустить RECADV", ДействиеКнопки);
//				КоличествоКнопок = КнопкиСписка.Количество();
//				КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	
	Если ИмяСобытия =  "КнопкаФормыСообщенияНажатие" тогда
		
		Если Параметры.ИмяКоманды = "ПропуститьRECADV" Тогда
			
			ДокументРеализация = Параметры.Сообщение.Документ1С;
			СообщениеСсылка = Параметры.Сообщение.СообщениеСсылка;
			
			Попытка
				
				ОбъектDESADV = ОсновнойМодуль.ПолучитьОбъектСообщения(СообщениеСсылка);
				ОбъектRECADV = ОбъектDESADV.Скопировать();
				ОбъектDESADV = Неопределено;
				ОбъектRECADV.ТипСообщения = "RECADV";
				ОбъектRECADV.Направление = "Входящее";
				ОбъектRECADV.Статус = "Пропущен";//фейковый RECADV
				ОбъектRECADV.Архив = Истина;
				
				Если ОсновнойМодуль.ВнешнееХранилище Тогда
					_Сообщение = ЗначениеИзСтрокиВнутр(ОбъектRECADV.Хранилище.Получить());
				Иначе
					_Сообщение = ОбъектRECADV.Хранилище.Получить();
				КонецЕсли;
				
				_Сообщение.Направление = "Входящее";
				_Сообщение.ТипСообщения = "RECADV";
				_Сообщение.Вставить("Комментарий","Фиктивный RECADV");
				_Сообщение.Вставить("НакладнаяEDI",Новый Структура("Дата,Номер"));
				ЗаполнитьЗначенияСвойств(_Сообщение.НакладнаяEDI,_Сообщение.ДокументEDI);
				
				//следует переконвертировать товары с ТЧ документа с тем чтобы получить в RECADV слепок текущего (по состоянию в момент нажатия) состава товаров ТЧ РТУ
				ТекТоварыРТУ = ОсновнойМодуль.ПолучитьТоварыДокумента1С(ДокументРеализация,"ПодготовитьУведомлениеОбОтгрузке");
				//зачистим товары
				_Сообщение.Товары.Очистить();
				//заполним вновь так как бы это сделал DESADV
				Для Каждого Стр Из ТекТоварыРТУ Цикл
					НоваяСтрока = _Сообщение.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
					НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
					НоваяСтрока.НомерГТД1С = Стр.НомерГТД;
					НоваяСтрока.Страна1С = Стр.Страна;
				КонецЦикла;
				
				ОсновнойМодуль.ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(_Сообщение.Товары);
				
				//Если ОсновнойМодуль.ВнешнееХранилище Тогда
				//	ОбъектRECADV.Хранилище = ОсновнойМодуль.СоединениеСХранилищем.NewObject("ХранилищеЗначения",ЗначениеВСтрокуВнутр(_Сообщение));
				//Иначе  
					ОбъектRECADV.Хранилище = Новый ХранилищеЗначения(_Сообщение);
				//КонецЕсли;       
				
				ОбъектRECADV.Записать();//принудительно  //надо отражать статистику такого сообщения
				ОсновнойМодуль.Отчетность_ОтразитьСтатистикуСообщения(ОбъектRECADV,_Сообщение); //т.к. запись делается в обход СохранитьОбъектСообщения() то статистику отразим самостоятельно
				
				Сообщить("Фиктивный RECADV создан. Закройте форму сообщения.");
				
			Исключение
				
				_ошибка = ОписаниеОшибки();
				Сообщить("Не удалось пропустить RECADV по причине:
				|"+_ошибка);
				//ОсновнойМодуль.ОтменитьТранзакцию_КонтурEDI();
			КонецПопытки;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	
	
	Возврат Неопределено;
	
КонецФункции

Функция Плагин_ВыбратьТочкуСамовывоза(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//ВНИМАНИЕ! Если пользователю нужно отображение точки самовывоза в основном списке
	//Включите Расширение "Точки самовывоза в основном списке"  
	
	Если ИмяСобытия = "ПослеПроверкиСообщенияEDI" тогда
		Если Параметры.Сообщение.ТипСообщения = "ORDRSP"
			//И Параметры.Сообщение.ПолучательEDI.GLN = "4607164999995"    //для отладки закомментируй эту строку   и еще 1 такую же ниже
			И Параметры.Сообщение.Направление = "Исходящее" Тогда
			
			ВходящийЗаказДокумент1С = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(Параметры.Сообщение.Документ1С,"ORDERS");
			СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
			
			Если СообщениеORDERS.Свойство("ТочкиСамовывоза")
				И ЗначениеЗаполнено(СообщениеORDERS.ТочкиСамовывоза) Тогда
				Если СообщениеORDERS.ТочкиСамовывоза.Количество()>0 Тогда
					//а указана ли в текущем сообщении точка самовывоза?
					Если Параметры.Сообщение.Свойство("ТочкиСамовывоза")
						И Параметры.Сообщение.ТочкиСамовывоза<>Неопределено
						И Параметры.Сообщение.ОтветственныйЗаДоставку<>"TransportBySupplier"     //не указали что сами и не указали что сторонней организацией
						И Параметры.Сообщение.ОтветственныйЗаДоставку<>"TransportByLogisticProvider" Тогда 
						
						Если Параметры.Сообщение.ТочкиСамовывоза.Количество()=0 Тогда
							НовОшибка = Параметры.ТаблицаОшибок.Добавить();
							НовОшибка.ИмяПоля				= "Точка самовывоза";//имя элемента управления на форме. Не обязательно.
							НовОшибка.СведенияОбОшибках		= "Укажите точку самовывоза";// или текст строкой, или таблица с ошибками подчиненных полей
							НовОшибка.СодержитОписаниеПоля	= Ложь;
						ИначеЕсли Параметры.Сообщение.ТочкиСамовывоза.Количество()>1 Тогда
							НовОшибка = Параметры.ТаблицаОшибок.Добавить();
							НовОшибка.ИмяПоля				= "Точка самовывоза";//имя элемента управления на форме. Не обязательно.
							НовОшибка.СведенияОбОшибках		= "Выбрано более 1 точки самовывоза";// или текст строкой, или таблица с ошибками подчиненных полей
							НовОшибка.СодержитОписаниеПоля	= Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СообщениеORDERS.Свойство("Транспортировка")
				И ЗначениеЗаполнено(СообщениеORDERS.Транспортировка)
				И СообщениеORDERS.Транспортировка.Свойство("ТипТранспортногоСредства")
				И СообщениеORDERS.Транспортировка.ТипТранспортногоСредства.Количество()>0 Тогда
				//из списка должен быть ОДИН выбранный галочкой тип
				УжеВыбран=Ложь;
				ВыбраноБолее1=Ложь;
				Для Каждого ЭлементТипаТС Из Параметры.Сообщение.Транспортировка.ТипТранспортногоСредства Цикл
					ВыбраноБолее1 = УжеВыбран И ЭлементТипаТС.Пометка;
					УжеВыбран = УжеВыбран ИЛИ ЭлементТипаТС.Пометка;
				КонецЦикла;
				Если УжеВыбран = Ложь или ВыбраноБолее1 = Истина  Тогда 
					НовОшибка = Параметры.ТаблицаОшибок.Добавить();
					НовОшибка.ИмяПоля				= "Тип ТС";//имя элемента управления на форме. Не обязательно.
					НовОшибка.СведенияОбОшибках		= "Выберите один тип транспортного средства";// или текст строкой, или таблица с ошибками подчиненных полей
					НовОшибка.СодержитОписаниеПоля	= Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ИмяСобытия = "ПриОткрытииФормыСообщения" тогда
		Если Параметры.Сообщение.Направление = "Исходящее" 
			//И Параметры.Сообщение.ПолучательEDI.GLN = "4607164999995"    //для отладки закомментируй эту строку    и еще 1 такую же выше
			И Параметры.Сообщение.ТипСообщения = "ORDRSP" Тогда 
			
			Если Не ЗначениеЗаполнено(Параметры.Сообщение.СообщениеСсылка) Тогда //это подготовка к отправке
				//получим исходный заказ
				ВходящийЗаказДокумент1С = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(Параметры.Сообщение.Документ1С,"ORDERS");
				СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
				
				Если СообщениеORDERS.Свойство("Транспортировка")
					И ЗначениеЗаполнено(СообщениеORDERS.Транспортировка)
					И СообщениеORDERS.Транспортировка.Свойство("ТипТранспортногоСредства")
					И СообщениеORDERS.Транспортировка.ТипТранспортногоСредства.Количество()>0 Тогда
					
					#Если Клиент Тогда
						
						КнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
						НоваяСтрока = КнопкиКоманднойПанели.Добавить();
						НоваяСтрока.ВидКнопки 					= "Кнопка";
						НоваяСтрока.Имя 						= "ВыбратьТипТС";
						НоваяСтрока.ИсточникКартинки			= "ЭлементФормы";
						НоваяСтрока.КнопкаПоУмолчанию 			= Ложь;
						НоваяСтрока.Представление				= "Выбрать тип ТС";
						НоваяСтрока.ПроверятьПоля 				= Ложь;
						НоваяСтрока.СохранятьСоответствия 		= Ложь;
						ДействиеКнопки 			= Новый Действие("КнопкаДействияФормыНажатие");
						КнопкиСписка 			= Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
						НоваяКнопка 			= КнопкиСписка.Добавить("ВыбратьТипТС", ТипКнопкиКоманднойПанели.Действие, "Выбрать тип ТС", ДействиеКнопки);
						НоваяКнопка.Картинка 	= БиблиотекаКартинок.ВыбратьИзСписка;
						НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
						КоличествоКнопок 		= КнопкиСписка.Количество();
						КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
						
					#Иначе
						
						КомандаВыбратьТипТС			= Параметры.ФормаСообщения.Команды.Добавить("ВыбратьТипТС");
						КомандаВыбратьТипТС.Действие 	= "ВыбратьТипТС";
						КомандаВыбратьТипТС.Заголовок 	= "Выбрать тип ТС";
						ОсновнойМодуль.ДобавитьКнопкуФормыСообщения(Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели,"Кнопка",	"ВыбратьТипТС", "Выбрать тип ТС",	Ложь,	,"ЭлементФормы",	,Ложь);
						
					#КонецЕсли
					
				КонецЕсли;
				
				Если 
					СообщениеORDERS.Свойство("ТочкиСамовывоза") 
					И СообщениеORDERS.ТочкиСамовывоза<>Неопределено 
					И СообщениеORDERS.ТочкиСамовывоза.Количество()>0  Тогда
					#Если Клиент Тогда
						КнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
						НоваяСтрока = КнопкиКоманднойПанели.Добавить();
						НоваяСтрока.ВидКнопки 					= "Кнопка";
						НоваяСтрока.Имя 						= "ВыбратьТочкуСамовывоза";
						НоваяСтрока.ИсточникКартинки			= "ЭлементФормы";
						НоваяСтрока.КнопкаПоУмолчанию 			= Ложь;
						НоваяСтрока.Представление				= "Выбрать точку самовывоза";
						НоваяСтрока.ПроверятьПоля 				= Ложь;
						НоваяСтрока.СохранятьСоответствия 		= Ложь;
						ДействиеКнопки 			= Новый Действие("КнопкаДействияФормыНажатие");
						КнопкиСписка 			= Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
						НоваяКнопка 			= КнопкиСписка.Добавить("ВыбратьТочкуСамовывоза", ТипКнопкиКоманднойПанели.Действие, "Выбрать точку самовывоза", ДействиеКнопки);
						НоваяКнопка.Картинка 	= БиблиотекаКартинок.ВыбратьИзСписка;
						НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
						КоличествоКнопок 		= КнопкиСписка.Количество();
						КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
						
						КнопкиКоманднойПанели = Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели;
						НоваяСтрока = КнопкиКоманднойПанели.Добавить();
						НоваяСтрока.ВидКнопки 					= "Кнопка";
						НоваяСтрока.Имя 						= "ОтказОтСамовывоза";
						НоваяСтрока.ИсточникКартинки			= "ЭлементФормы";
						НоваяСтрока.КнопкаПоУмолчанию 			= Ложь;
						НоваяСтрока.Представление				= "Отказ от самовывоза";
						НоваяСтрока.ПроверятьПоля 				= Ложь;
						НоваяСтрока.СохранятьСоответствия 		= Ложь;
						ДействиеКнопки 			= Новый Действие("КнопкаДействияФормыНажатие");
						КнопкиСписка 			= Параметры.ФормаСообщения.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
						НоваяКнопка 			= КнопкиСписка.Добавить("ОтказОтСамовывоза", ТипКнопкиКоманднойПанели.Действие, "Отказ от самовывоза", ДействиеКнопки);
						НоваяКнопка.Картинка 	= БиблиотекаКартинок.Удалить;
						НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
						КоличествоКнопок 		= КнопкиСписка.Количество();
						КнопкиСписка.Сдвинуть(КнопкиСписка[КоличествоКнопок-1],-КоличествоКнопок+1);
						
						
					#Иначе
						
						КомандаВыбратьТочкуСамовывоза			= Параметры.ФормаСообщения.Команды.Добавить("ОтказОтСамовывоза");
						КомандаВыбратьТочкуСамовывоза.Действие 	= "ОтказОтСамовывоза";
						КомандаВыбратьТочкуСамовывоза.Заголовок 	= "Отказ от самовывоза";
						ОсновнойМодуль.ДобавитьКнопкуФормыСообщения(Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели,"Кнопка",	"ОтказОтСамовывоза", "Отказ от самовывоза",	Ложь,	,"ЭлементФормы",	,Ложь);
						
						КомандаВыбратьТочкуСамовывоза			= Параметры.ФормаСообщения.Команды.Добавить("ВыбратьТочкуСамовывоза");
						КомандаВыбратьТочкуСамовывоза.Действие 	= "ВыбратьТочкуСамовывоза";
						КомандаВыбратьТочкуСамовывоза.Заголовок 	= "Выбрать точку самовывоза";
						ОсновнойМодуль.ДобавитьКнопкуФормыСообщения(Параметры.ФормаСообщения.НастройкаФормы.КнопкиКоманднойПанели,"Кнопка",	"ВыбратьТочкуСамовывоза", "Выбрать точку самовывоза",	Ложь,	,"ЭлементФормы",	,Ложь);
						
					#КонецЕсли
					
				КонецЕсли;
				

				Иначе
					//открыта только на просмотр - значит форма уже отправленного сообщения (или как минимум сохраненного в справочнике и готового отправляться)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//"Обработчик нажатия кнопки на УФ размещен в самой форме Сообщения Здесь только для ОФ
	#Если Клиент Тогда
		
		Если ИмяСобытия = "КнопкаФормыСообщенияНажатие" Тогда
			
			Если Параметры.ИмяКнопки = "ВыбратьТочкуСамовывоза" 
				И Параметры.Сообщение.Свойство("ТочкиСамовывоза") 
				И ЗначениеЗаполнено(Параметры.Сообщение) ТОгда
				
				ВходящийЗаказДокумент1С = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(Параметры.Сообщение.Документ1С,"ORDERS");
				СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
				
				Если ЗначениеЗаполнено(СообщениеORDERS.ТочкиСамовывоза) 
					И СообщениеORDERS.ТочкиСамовывоза.Количество()>0 Тогда
					
					//через ВХ - для универсальности ОФ/УФ
					АдресвВХ=ПоместитьВоВременноеХранилище(СообщениеORDERS.ТочкиСамовывоза);
					форма=ОсновнойМодуль.ПолучитьФорму("УниверсальнаяФормаВыбора");
					форма.АдресТаблицыВХранилище = АдресвВХ;
					форма.ВыборНесколькихЗначений = Ложь;
					форма.ВыборОбязателен = Истина;
					
					НовоеХранилищеСРезультатом=форма.ОткрытьМодально();
					
					Если НовоеХранилищеСРезультатом<>Неопределено Тогда
						НоваяТЗТочкиСамовывоза = ПолучитьИзВременногоХранилища(НовоеХранилищеСРезультатом);
						//Положить в сообщение без колонки "Выбор"
						ВсегоТочекСамовывоза=НоваяТЗТочкиСамовывоза.Количество();
						Для й=1 По ВсегоТочекСамовывоза Цикл
							Если НоваяТЗТочкиСамовывоза[ВсегоТочекСамовывоза-й].Выбор=Ложь Тогда
								НоваяТЗТочкиСамовывоза.Удалить(ВсегоТочекСамовывоза-й);
							КонецЕсли;
						КонецЦикла;
						
						Параметры.Сообщение.ТочкиСамовывоза=НоваяТЗТочкиСамовывоза;
						Параметры.Сообщение.ОтветственныйЗаДоставку = "TransportByCustomer";
						Параметры.Форма.ЭлементыФормы.НадписьИнформация.Значение = "Выбрана точка самовывоза: "+НоваяТЗТочкиСамовывоза[0].Наименование+", "+ НоваяТЗТочкиСамовывоза[0].Улица+", " + НоваяТЗТочкиСамовывоза[0].Дом;
						//перепроверить сообщение
						Параметры.Форма.ПроверитьЗаполнениеПолей();
						РезультатПроверки = ОсновнойМодуль.ПроверитьПоляСообщения(Параметры.Сообщение);
						Параметры.Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
					Иначе
						//Отказ от выбора
					Конецесли;
				Конецесли;
				//Решили доставить сами	
			ИначеЕсли Параметры.ИмяКнопки = "ОтказОтСамовывоза" Тогда
				
				ТекстВопроса ="Доставка будет осуществляться:";
				КнопкиВопроса=новый СписокЗначений;
				КнопкиВопроса.Добавить("Самостоятельно");
				КнопкиВопроса.Добавить("Силами стороннего перевозчика");
				КнопкиВопроса.Добавить("ОТМЕНА операции");
				РезультатВопроса = Неопределено;
				
				РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"EDI.Контур");
				
				Если РезультатВопроса="Самостоятельно" Тогда 
					Параметры.Сообщение.ОтветственныйЗаДоставку = "TransportBySupplier";
				ИначеЕсли РезультатВопроса="Силами стороннего перевозчика" Тогда 
					Параметры.Сообщение.ОтветственныйЗаДоставку = "TransportByLogisticProvider";
				Иначе
					Параметры.Сообщение.ОтветственныйЗаДоставку = "TransportByCustomer";
				КонецЕсли;
				Параметры.Форма.ПроверитьЗаполнениеПолей();
				РезультатПроверки = ОсновнойМодуль.ПроверитьПоляСообщения(Параметры.Сообщение);
				Параметры.Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
				
			ИначеЕсли Параметры.ИмяКнопки = "ВыбратьТипТС" Тогда
				
				ВходящийЗаказДокумент1С = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(Параметры.Сообщение.Документ1С,"ORDERS");
				СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
				//открытие формы для выбора и добавления даты, времени прибытия.
				ОригинальныйСписок=СообщениеORDERS.Транспортировка.ТипТранспортногоСредства.Скопировать();
				ТекущийСписок=Параметры.Сообщение.Транспортировка.ТипТранспортногоСредства.Скопировать();
				Если ТекущийСписок.Количество()>0 Тогда 
					ОригинальныйСписок=ТекущийСписок;
				КонецЕсли;
				
				Если ОригинальныйСписок.ОтметитьЭлементы("Выберите тип транспортного средства") Тогда 			
					Параметры.Сообщение.Транспортировка.ТипТранспортногоСредства=ОригинальныйСписок;
				КонецЕсли;
				
				Параметры.Форма.ПроверитьЗаполнениеПолей();
				РезультатПроверки = ОсновнойМодуль.ПроверитьПоляСообщения(Параметры.Сообщение);
				Параметры.Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
				
			Конецесли; //ВыбратьТочкуСамовывоза
		Конецесли;
		
	#КонецЕсли
КонецФункции

//вспомогательные методы -----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

//Конвертация to_Base64 для Плагина Плагин_ВзаимодействиеСМодулем1сДиадок
Функция КонвертироватьГуидВЧисло64(GUID) Экспорт 
	
	СтрокаHex= Convert_GUID_to_Hex(GUID);
	
	СтрокаBase64= Convert_Hex_to_Base64(СтрокаHex);
	
	Если СтрокаBase64 = Неопределено Тогда
		ВызватьИсключение "Не удалось конвертировать идентификатор """ + GUID + """ в строку Base64";
	Иначе
		Возврат Прав(СтрокаBase64, Окр(СтрДлина(СтрокаHex) / 1.5));
	КонецЕсли;
	
КонецФункции
Функция Convert_GUID_to_Hex(GUID)
	
	Возврат СтрЗаменить(GUID, "-", "");
	
КонецФункции
Функция Convert_Hex_to_Base64(Знач СтрокаHex)
	
	Результат= "";
	
	СтрокаHex= ДобавитьЛидирующиеНули(СтрокаHex, (3-СтрДлина(СтрокаHex)%3)%3);
	ДлинаСтроки= СтрДлина(СтрокаHex);
	
	Позиция= 1;
	Пока Позиция < ДлинаСтроки Цикл
		
		СтрокаBase64= КонвертацияBase64().Convert_Hex_to_Base64[Сред(СтрокаHex, Позиция, 3)];
		
		Если СтрокаBase64 <> Неопределено Тогда
			Результат= Результат + СтрокаBase64;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Позиция= Позиция + 3;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
Функция КонвертацияBase64() 
	
	Если КонвертацияBase64 = Неопределено Тогда
		
		ЧтениеXML= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ПолучитьМакет("КонвертацияBase64").ПолучитьТекст());
		КонвертацияBase64= СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	Возврат КонвертацияBase64;
	
КонецФункции
Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, КоличествоНулей)
	
	Если КоличествоНулей > 0 Тогда
		Возврат Формат(0, "ЧЦ="+КоличествоНулей+"; ЧН=; ЧВН=; ЧГ=") + ИсходнаяСтрока;
	Иначе
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
КонецФункции


//\\



Процедура СконвертироватьТоварыИсходящегоСообщенияПовторноСУчетомЕдиницИзмеренияИзВходящегоСообщения(Сообщение)
//E1C_in-28073	
	
//если осилил название - пол дела уже сделано

//суть - если  торговая сеть шлет в заказах то PCE то CT (например) и при этом все по 1 GTIN,BC,SC и должно попадать в 1 единицу
//измерения 1С, например штуки, но с разными коэффициентами, ТО
//мы не сможем с документа 1С сконвертировать в EDI без вспомогательных данных - предыдущего входящего сообщения или какого-либо признака в строке товаров документа 1С,
//по причине того что 1 номенклатуре1С и единице измерения1С будут соответствовать и СТ и РСЕ. 
//и мы не будем знать в которую из них конвертировать.

//Нужно:
//либо переконвертировать товары с учетом какого-либо признака

//либо надо посмотреть предыдущее сообщение и в товарах сообщения проставить нужную единицу измерения EDI а не ту которая сконвертировалась автоматически

//ПредыдущееВходящееСообщение=ПолучитьПредыдущееВходящееСообщение(Сообщение);  //не реализовано

//Если ПредыдущееВходящееСообщение=Неопределено Тогда 
//	ВызватьИсключение "Не найдено входящее сообщение - не могу сконвертировать товары";
//КонецЕсли;



Конецпроцедуры

Функция ПересчитатьСообщение(Сообщение, Документ = Неопределено,  УстанавливатьСобственныеЦеныВЗаказах = Ложь) Экспорт
	//СконвертироватьТоварыИсходящегоСообщенияПовторноСУчетомЕдиницИзмеренияИзВходящегоСообщения(Сообщение)// осторожно, определение требует усилий	
	
	Для Каждого СтрокаСообщения Из Сообщение.Товары Цикл
		
		Партнер 			= ?(Сообщение.Направление = "Входящее", Сообщение.Отправитель1С, Сообщение.Получатель1С);
		ДанныеСоответствия  = ПолучитьДанныеСоответствия(Партнер, СтрокаСообщения); 
		
		Если Сообщение.Направление = "Входящее" Тогда
		
			Если ДанныеСоответствия.ДействиеПересчета = "умножить" Тогда
				СтрокаСообщения.Количество				= СтрокаСообщения.Количество * ДанныеСоответствия.КоэффициентEDIВ1С;																 					                                                                                 	
				Если Не УстанавливатьСобственныеЦеныВЗаказах Тогда
					СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС / ДанныеСоответствия.КоэффициентEDIВ1С;
					СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   / ДанныеСоответствия.КоэффициентEDIВ1С;
				КонецЕсли;
			ИначеЕсли ДанныеСоответствия.ДействиеПересчета = "разделить" Тогда
				СтрокаСообщения.Количество				= СтрокаСообщения.Количество / ДанныеСоответствия.КоэффициентEDIВ1С;																 					                                                                                 	
				Если Не УстанавливатьСобственныеЦеныВЗаказах Тогда
					СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС * ДанныеСоответствия.КоэффициентEDIВ1С;
					СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   * ДанныеСоответствия.КоэффициентEDIВ1С;
				КонецЕсли;
			КонецЕсли;
		    				
		ИначеЕсли Сообщение.Направление = "Исходящее" Тогда
			
			Если ДанныеСоответствия.ДействиеПересчета = "умножить" Тогда
				СтрокаСообщения.Количество			= СтрокаСообщения.Количество / ДанныеСоответствия.КоэффициентEDIВ1С;                                                              				
				СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС * ДанныеСоответствия.КоэффициентEDIВ1С;                                                                            
				СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   * ДанныеСоответствия.КоэффициентEDIВ1С;
			ИначеЕсли ДанныеСоответствия.ДействиеПересчета = "разделить" Тогда
				СтрокаСообщения.Количество			= СтрокаСообщения.Количество * ДанныеСоответствия.КоэффициентEDIВ1С;                                                              				
				СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС / ДанныеСоответствия.КоэффициентEDIВ1С;                                                                            
				СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   / ДанныеСоответствия.КоэффициентEDIВ1С;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСоответствия.ДействиеПересчета) Тогда
				Если ЗначениеЗаполнено(ДанныеСоответствия.ЕдиницаEDI) Тогда
					СтрокаСообщения.КодЕдиницыИзмеренияEDI = ДанныеСоответствия.ЕдиницаEDI;
				КонецЕсли;
			КонецЕсли;	
						
		КонецЕсли;
			
		
	КонецЦикла;
					
	Возврат Сообщение;
	
КонецФункции

Функция ПолучитьДанныеСоответствия(Владелец, СтрокаТовара) Экспорт
	//смотрится костыльно, но зато понятно	
	
	Результат = Новый Структура;
	Результат.Вставить("ЕдиницаEDI", 			"");
	Результат.Вставить("ДействиеПересчета", 	"");
	Результат.Вставить("КоэффициентEDIВ1С", 	1);
	Результат.Вставить("ОсновноеСоответствие", 	Ложь);
	
	РезультатСУчетомЕИ_EDI = Новый Структура;
	РезультатСУчетомЕИ_EDI.Вставить("ЕдиницаEDI", 			"");
	РезультатСУчетомЕИ_EDI.Вставить("ДействиеПересчета", 	"");
	РезультатСУчетомЕИ_EDI.Вставить("КоэффициентEDIВ1С", 	1);
	РезультатСУчетомЕИ_EDI.Вставить("ОсновноеСоответствие", 	Ложь);
	
	GTIN 				= СтрокаТовара.GTIN;
	КодТовараПартнера 	= СтрокаТовара.КодТовараПокупателя;
	Номенклатура 		= СтрокаТовара.Номенклатура;
	Характеристика 		= СтрокаТовара.ХарактеристикаНоменклатуры;
	ЕдиницаИзмерения 	= СтрокаТовара.ЕдиницаИзмерения;
	
	ХарактеристикаНоменклатуры = Неопределено;
	Если Не Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") = Неопределено Тогда
		Если ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Если Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
				ХарактеристикаНоменклатуры = Характеристика;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоответствияНомерклатуры = ОсновнойМодуль.СоответствиеТоваров_НайтиНоменклатуру(GTIN, КодТовараПартнера, Владелец);
	НайденоОсновноеСоответствие=Ложь;
	Для Каждого Строка Из СоответствияНомерклатуры Цикл

		Если Строка.Номенклатура = Номенклатура и
			ХарактеристикаНоменклатуры = Характеристика и
			Строка.ЕдиницаИзмерения = ЕдиницаИзмерения ТОГДА
			
			//алгоритм разбит на 2 части - с поиском по КодЕдиницыИзмеренияEDI и без такого поиска
			//все равно плохо будет с отправкой - т.к. мы не сможем сконвертировать ЕИ 1С в ЕИ EDI в случае если на 1 ЕИ1С есть 2 ИЕ EDI по той же комбинации gtin+bc+sc
			//тащить из предыдущего сообщения? если нет то в основную? если нет основной? если там 2 разных
			Если ЗначениеЗаполнено(Строка.ЕдиницаEDI) и ЗначениеЗаполнено(СтрокаТовара.КодЕдиницыИзмеренияEDI) и
				СтрокаТовара.КодЕдиницыИзмеренияEDI=Строка.ЕдиницаEDI Тогда
				
				РезультатСУчетомЕИ_EDI.Вставить("ЕдиницаEDI", 			Строка.ЕдиницаEDI);
				Если Строка.КоэффициентEDIВ1С = 0 Тогда
					РезультатСУчетомЕИ_EDI.Вставить("ДействиеПересчета",		"");
				Иначе
					РезультатСУчетомЕИ_EDI.Вставить("ДействиеПересчета", 	?(Строка.КоэффициентEDIВ1С>0, "умножить", "разделить"));
				КонецЕсли;
				РезультатСУчетомЕИ_EDI.Вставить("КоэффициентEDIВ1С", 	Макс(-Строка.КоэффициентEDIВ1С,Строка.КоэффициентEDIВ1С));
				РезультатСУчетомЕИ_EDI.Вставить("ОсновноеСоответствие", 	Строка.Основной);
				Если Строка.Основной= истина Тогда
					Возврат РезультатСУчетомЕИ_EDI;   //нашли основное соответствие с учетом еиEDI
				КонецЕсли;
				
			Иначе  //у нас нет возможности пересчитать с учетом еиEDI
				Если Не НайденоОсновноеСоответствие Тогда  //как только найдем основное соответствие - более не будем искать без учета еиEDI
					Результат.Вставить("ЕдиницаEDI", 			Строка.ЕдиницаEDI);
					Если Строка.КоэффициентEDIВ1С = 0 Тогда
						Результат.Вставить("ДействиеПересчета",		"");
					Иначе
						Результат.Вставить("ДействиеПересчета", 	?(Строка.КоэффициентEDIВ1С>0, "умножить", "разделить"));
					КонецЕсли;
					Результат.Вставить("КоэффициентEDIВ1С", 	Макс(-Строка.КоэффициентEDIВ1С,Строка.КоэффициентEDIВ1С));
					Результат.Вставить("ОсновноеСоответствие", 	Строка.Основной);
				КонецЕсли;
			КонецЕсли;
			Если Строка.Основной= истина Тогда НайденоОсновноеСоответствие=Истина;КонецЕсли;


		КонецЕсли;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(РезультатСУчетомЕИ_EDI.ЕдиницаEDI) Тогда 
		Возврат РезультатСУчетомЕИ_EDI; //было найдено неосновное соответствие с учетом еиEDI
	Иначе
		Возврат Результат; //было найдено основное или неосновное соответствие без учета еиEDI
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрПартнераУстанавливатьСобственныеЦеныВЗаказах(Отправитель)
	
	Возврат (ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(Отправитель,"УстанавливатьСобственныеЦеныВЗаказах")=Истина);
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(Компонент, SSCCКод)
		
	Если НЕ Компонент.ГрафикаУстановлена Тогда
		Возврат Неопределено;
    КонецЕсли;

	Если Компонент.НайтиШрифт("Tahoma") = Истина Тогда
		Компонент.Шрифт = "Tahoma";
   	Иначе
		Для Сч = 0 По Компонент.КоличествоШрифтов -1 Цикл
        	ТекущийШрифт = Компонент.ШрифтПоИндексу(Сч);
            Если ТекущийШрифт <> Неопределено Тогда
                Компонент.Шрифт = ТекущийШрифт;
				Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
 
	Компонент.РазмерШрифта = 12;

	Компонент.Ширина = 100;
	Компонент.Высота = 90;

	Компонент.АвтоТип = Ложь;
	Компонент.ТипКода = 4;
	
	Компонент.СодержитКС = СтрДлина(SSCCКод) = 18;

	Компонент.ЗначениеКода = SSCCКод;

	Если Компонент.Ширина < Компонент.МинимальнаяШиринаКода Тогда
    	Компонент.Ширина = Компонент.МинимальнаяШиринаКода + 10;
    КонецЕсли;
 
	ДвоичныеДанныеКартинки = Компонент.ПолучитьШтрихкод();
 
	Если НЕ ДвоичныеДанныеКартинки = Неопределено Тогда
        Возврат Новый Картинка(ДвоичныеДанныеКартинки);
    КонецЕсли;

	Возврат Неопределено;	
	
КонецФункции

Процедура ОтправитьEmail(АдресЭлектроннойПочты,Тема="",ТекстПисьма="",ФайлыВложений=Неопределено) Экспорт
//	
//	Письмо = Новый ИнтернетПочтовоеСообщение;
//	Письмо.Отправитель.Адрес = "yourrobotname@yourpost.ru";                                                               //<<------------------
//	Письмо.Получатели.Добавить("deliveryadress@yourpost.ru"); //лучше сразу указать группу                                //<<------------------
//	Письмо.Тема 			= Тема;
//	Письмо.Тексты.Добавить(ТекстПисьма);
//
//	Если ФайлыВложений<>Неопределено Тогда
//		Для Каждого ФЛ из ФайлыВложений Цикл
//			Письмо.Вложения.Добавить(ФЛ);
//		КонецЦикла;
//	КонецЕсли;
//	
//	ПрофильОтправки = Новый ИнтернетПочтовыйПрофиль;                                                                        
//	ПрофильОтправки.АдресСервераSMTP 			= "smtp.yourpost.ru";                                                         //<<------------------
//	ПрофильОтправки.ПортSMTP 					= 25;                                                                         //<<------------------
//	ПрофильОтправки.ПользовательSMTP 				= "youruser@yourpost.ru";                                                 //<<------------------
//	ПрофильОтправки.ПарольSMTP 						= "yourpass";                                                             //<<------------------
//	ПрофильОтправки.АутентификацияSMTP = СпособSMTPАутентификации.Login; //??? если не надо - можно выключить                 //<<------------------
//
//	Почта = Новый ИнтернетПочта;
//	Попытка
//		Почта.Подключиться(ПрофильОтправки);
//	Исключение
//		Сообщить("Электронное сообщение не отправлено: "+ОписаниеОшибки());
//		Возврат;
//	КонецПопытки;
//
//	Попытка
//		Почта.Послать(Письмо);
//	Исключение
//		Сообщить("Электронное сообщение не отправлено: "+ОписаниеОшибки());
//		Возврат;
//	КонецПопытки;
//
//	Почта.Отключиться();		
//	
КонецПроцедуры

Функция УстановитьКомпонентуПечатиШК(КомпонентаЗагружена,КомпонентаПодключена,КомпонентУстановлена)
	
	КомпонентаЗагружена  = Ложь;
	КомпонентаПодключена = Ложь;
	КомпонентУстановлена = Ложь;
	
	Если Не КомпонентУстановлена Тогда
		НаименованиеКомпоненты = "";
		ИнформацияОСистеме = Новый СистемнаяИнформация;
		Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			НаименованиеКомпоненты = "КомпонентаПечатиШтрихкодовWindows32.dll";
		ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			НаименованиеКомпоненты = "КомпонентаПечатиШтрихкодовWindows64.dll";
		КонецЕсли;
		Файл = Новый Файл(КаталогВременныхФайлов()+НаименованиеКомпоненты);
		Если Файл.Существует() Тогда
			КомпонентаЗагружена = Истина;
			Файл = Неопределено;
		КонецЕсли;
		Если Не КомпонентаЗагружена Тогда
			#Если Клиент Тогда
				Состояние("Загрузка компоненты печати штрихкодов...");
			#КонецЕсли
			Если Не	ОсновнойМодуль.ПолучитьФайлHTTP(ОсновнойМодуль.ПолучитьСоединениеHTTP(ОсновнойМодуль.Адрес_edi_kontur_ru),
				"/1c/support/"+НаименованиеКомпоненты,
				КаталогВременныхФайлов()+НаименованиеКомпоненты) Тогда 
				СП = Новый СообщениеПользователю;
				СП.Текст = "Не удалось загрузить компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + " с сервера.";
				СП.Сообщить();
			Иначе
				КомпонентаЗагружена = Истина;
			КонецЕсли;
			#Если Клиент Тогда
				Состояние("");
			#КонецЕсли
			Если Не КомпонентаЗагружена Тогда
				Возврат ложь;
			КонецЕсли;
		КонецЕсли;
		Если КомпонентаЗагружена Тогда
			Попытка
				КомпонентаПодключена = ПодключитьВнешнююКомпоненту(КаталогВременныхФайлов()+НаименованиеКомпоненты, "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
			Исключение
			КонецПопытки;
			Если Не КомпонентаПодключена Тогда
				СП = Новый СообщениеПользователю;
				СП.Текст = "Не удалось подключить компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + ".";
				СП.Сообщить();
				Возврат ложь;
			Иначе
				Попытка
					Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
					КомпонентУстановлена = Истина;
					Возврат Компонент;
				Исключение
				КонецПопытки;
				Если Не КомпонентУстановлена Тогда
					СП = Новый СообщениеПользователю;
					СП.Текст = "Не удалось использовать компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + " по причине: не может быть создан объект ""AddIn.КартинкаШтрихкода.Barcode"".";
					СП.Сообщить();
					Возврат ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Процедура УФ_ЗаполнитьАлкоСведенияОНоменклатуре(Стр)
	////раскомментировать для использования
	//
	//Если ОсновнойМодуль.ИмяКонфигурации1С="УФ_БП" Тогда 
	//	Если ЗначениеЗаполнено(Стр.Номенклатура.Импортер) Тогда        //<----------------------Проверить==========
	//		Стр.АлкоПроизводитель1С = Стр.Номенклатура.Импортер;       //<----------------------Проверить==========
	//	Иначе
	//		Стр.АлкоПроизводитель1С = Стр.Номенклатура.Производитель;
	//	КонецЕсли;
	//	
	//	//Стр.АлкоПроизводительEDI = ПреобразоватьЮрФизЛицо_1С_в_EDI(Стр.АлкоПроизводитель1С,"Юридический",ложь);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	СведенияОбАлкогольнойПродукции.ВидПродукции,
	//	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	//	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал,
	//	|	СведенияОбАлкогольнойПродукции.ВидПродукции.КодВидаПродукции КАК КодВидаПродукции
	//	|ИЗ
	//	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	//	|ГДЕ
	//	|	СведенияОбАлкогольнойПродукции.Номенклатура = &Номенклатура";
	//	
	//	Запрос.УстановитьПараметр("Номенклатура",Стр.Номенклатура);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	
	//	Если Выборка.Следующий() Тогда 
	//		Стр.АлкоОбъем = Выборка.КоэффПересчетаДал*10;//литры                               		         //<----------------------Проверить==========
	//		Стр.АлкоКодПродукции = СокрЛП(Выборка.КодВидаПродукции);                                         //<----------------------Проверить==========
	//	иначе
	//		//не указан код продукциии объем
	//	КонецЕсли;
	//	
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С="УФ_УТ" и Найти(Метаданные.Синоним,"Управление торговлей алкогольной продукцией")>0  Тогда  //кейс для управления торговлей алкогольной продукцией 11
	//	//алко УТАП
	//	
	//		Стр.АлкоКодПродукции=Стр.Номенклатура.алкВидПродукции.ЛокальныйКод;
	//		Стр.АлкоОбъем = Стр.Номенклатура.алкЕмкость;   //в Л.
	//		
	//		Если Стр.Номенклатура.ИмпортнаяАлкогольнаяПродукция Тогда 
	//			Стр.АлкоПроизводитель1С=Стр.Номенклатура.алкИмпортер;
	//		иначе
	//			Стр.АлкоПроизводитель1С=Стр.Номенклатура.алкПроизводитель;
	//		КонецЕсли;
	//		//Стр.АлкоПроизводительEDI = ПреобразоватьЮрФизЛицо_1С_в_EDI(Стр.АлкоПроизводитель1С,"Юридический",ложь);
	//	
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С="УФ_УТ" Тогда
	//	
	//			
	//	//алко код продукции в стандартных настройках УТ11.0 отсутствует, есть только в УТ11.1.
	//	Если ОсновнойМодуль.ОпределитьРелизКонфигурации()="11.1" Тогда
	//		Стр.АлкоКодПродукции=Стр.Номенклатура.ВидАлкогольнойПродукции.Код;
	//		Стр.АлкоОбъем = Стр.Номенклатура.ОбъемДАЛ*10; //в литрах в 10 раз больше 
	//		
	//		Стр.АлкоПроизводитель1С=Стр.Номенклатура.ПроизводительИмпортерДляДекларацийАлко;
	//	Иначе
	//		Стр.АлкоПроизводитель1С=Справочники.Контрагенты.ПустаяСсылка();//Стр.Номенклатура.Производитель; //но производитель в 11.0 это просто заглушка какая-то                      

	//		Стр.АлкоКодПродукции="500"; //Пиво по умолчанию
	//		Стр.АлкоОбъем = Стр.Номенклатура.Объем*1000; //литры, а в карточке м3
	//	КонецЕсли;
	//		//Стр.АлкоПроизводительEDI = ПреобразоватьЮрФизЛицо_1С_в_EDI(Стр.АлкоПроизводитель1С,"Юридический",ложь);
	//	
	//КонецЕсли;
	
КонецПроцедуры
//Процедура работает только на конфигурациях семейства УТ11 с сериями в отдельной таб части
//призвана раскидать серии из ТЧ по таблице товаров ALCRPT
Процедура УФ_УТ11_РаспределитьПоСериям(Параметры,ТабЧасть)
	Если ОсновнойМодуль.ИмяКонфигурации1С="УФ_УТ" Тогда
	НераспределенныеСерииИзДокумента=Параметры.Сообщение.Документ1С.Серии.Выгрузить();//тут будем крыжить серии
		//табличная часть Серии у документа РТУ. поиск соотв. строк в этой ТЧ идет по Номенклатуре и характеристике. Количество в ТЧ Серии указано в базовых единицах.
		
		//КопияТекТЧАлко = ТабЧасть.Скопировать();
		
		Для Каждого СтрокаТЧАлко Из ТабЧасть Цикл
			Если ЗначениеЗаполнено(СтрокаТЧАлко.СерияНоменклатуры) Тогда Продолжить; КонецЕсли;
			
			ОтборСтрок=Новый Структура;
			ОтборСтрок.Вставить("Номенклатура",СтрокаТЧАлко.Номенклатура);
			ОтборСтрок.Вставить("Характеристика",СтрокаТЧАлко.ХарактеристикаНоменклатуры);
			
			НайденныеСтрокиСерий=НераспределенныеСерииИзДокумента.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтрокиСерий.Количество()=0 Тогда
				//нет серий по строке - ну, значит указыват нечего
			ИначеЕсли НайденныеСтрокиСерий.Количество()=1 Тогда
				//одна такая позиция - это полное соответствие, берем серию из этой строки
				СтрокаТЧАлко.СерияНоменклатуры = НайденныеСтрокиСерий[0].Серия; //проверить что тип верный   !!!!!                        !!!!!
				НайденныеСтрокиСерий[0].количество=0;
			ИначеЕсли НайденныеСтрокиСерий.Количество()>1 Тогда
				//ПЕРВЫЙ ОБХОД СЕРИЙ
				//несколько строк с сериями - там уже могут быть строки с количеством 0 или строки с ровно тем же количеством!
				СтрокаРаспределена=ложь;
				Для Каждого НайденнаяСтрокаСерии Из НайденныеСтрокиСерий Цикл
					Если НайденнаяСтрокаСерии.Количество = СтрокаТЧАлко.Количество Тогда
						СтрокаТЧАлко.СерияНоменклатуры = НайденнаяСтрокаСерии.Серия;
						НайденнаяСтрокаСерии.Количество = 0;
						СтрокаРаспределена=Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//ВТОРОЙ ОБХОД СЕРИЙ
				Если Не СтрокаРаспределена Тогда // не нашлось нужной строки с равным количеством, будем распределять
					Для Каждого НайденнаяСтрокаСерии Из НайденныеСтрокиСерий Цикл
						Если Не СтрокаРаспределена Тогда 
							Если НайденнаяСтрокаСерии.Количество > СтрокаТЧАлко.Количество Тогда
								//выберем всё из этой строки
								СтрокаТЧАлко.СерияНоменклатуры = НайденнаяСтрокаСерии.Серия;
								НайденнаяСтрокаСерии.Количество = НайденнаяСтрокаСерии.Количество - СтрокаТЧАлко.Количество;
								СтрокаРаспределена=Истина;
								Прервать;
							ИначеЕсли НайденнаяСтрокаСерии.Количество < СтрокаТЧАлко.Количество Тогда
								//этой строки серий уже не хватает для полного распределения этой строки, но не факт что нам надо именно сейчас распределять, т.к. возможно подойдет другая строка ТЧ серий
								//т.е. возможно первый кейс пройдет дальше
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				//ТРЕТИЙ ОБХОД СЕРИЙ
				Если Не СтрокаРаспределена Тогда // если мы зашли внутрь - то надо понимать что в документе АД! это значит что какую-то строку нам надо распределить на несколько серий!
					Для Каждого НайденнаяСтрокаСерии Из НайденныеСтрокиСерий Цикл
						Если Не СтрокаРаспределена Тогда  
							Если НайденнаяСтрокаСерии.Количество < СтрокаТЧАлко.Количество Тогда
								//этой строки серий  не хватает для полного распределения этой строки
								//и мы уже уверены что следует распределить строку алко на несколько серий
								//Добавим Строку и в ней отразим распределяемое количество
								ДобавленнаяСтрокаТЧАлко= ТабЧасть.Добавить();   //мы можем добавить строку в таб часть которую сейчас обходим - т.к. в ней будет заполнена серия и новая строка не будет повторно обработана
								ЗаполнитьЗначенияСвойств(ДобавленнаяСтрокаТЧАлко,СтрокаТЧАлко,,"Количество, СуммаБезНДС, СуммаСНДС, СуммаНДС");
								ДобавленнаяСтрокаТЧАлко.Количество=НайденнаяСтрокаСерии.Количество;
								ДобавленнаяСтрокаТЧАлко.СерияНоменклатуры = НайденнаяСтрокаСерии.Серия;
								
								СтрокаТЧАлко.Количество = СтрокаТЧАлко.Количество - НайденнаяСтрокаСерии.Количество;
								НайденнаяСтрокаСерии.Количество = 0;
							ИначеЕсли НайденнаяСтрокаСерии.Количество = СтрокаТЧАлко.Количество Тогда
								//доберем всё из этой строки
								СтрокаТЧАлко.СерияНоменклатуры = НайденнаяСтрокаСерии.Серия;
								НайденнаяСтрокаСерии.Количество = 0;
								СтрокаРаспределена=Истина;
								Прервать;
							ИначеЕсли НайденнаяСтрокаСерии.Количество > СтрокаТЧАлко.Количество Тогда
								//нам удалось распределить строку алко товаров, правда в ТЧ серий по этой строке еще осталось
								СтрокаТЧАлко.СерияНоменклатуры = НайденнаяСтрокаСерии.Серия;
								НайденнаяСтрокаСерии.Количество = НайденнаяСтрокаСерии.Количество - СтрокаТЧАлко.Количество;
								СтрокаРаспределена=Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				//КОНЕЦ ОБХОДОВ - если осталось нераспределенное количество - значит не судьба
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Блок Вспомогательных функций для Детского мира ultimateCustomer
Процедура ДМ_ВычислитьКоличествоВУпаковках(Строки)
	
	Для Каждого Строка Из Строки Цикл
						
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Строка.ТипУпаковки) И Строка.Строки.Количество() > 0 Тогда
			ДМ_ВычислитьКоличествоВУпаковках(Строка.Строки);
		КонецЕсли;
		
		Строка.Количество = Строка.Строки.Итог("Количество");
		
	КонецЦикла;
	
КонецПроцедуры
Функция ДМ_ДобавитьНераспределеннуюТоварнуюПозицию(ФормаСообщения,Строка)
	
	НоваяСтрока = ФормаСообщения.ТоварныеПозиции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	
	Возврат НоваяСтрока;
	
КонецФункции
Функция ДМ_ДобавитьУпаковкуUltimateCustomerGln(ФормаСообщения,ТекUltimateCustomerGln)
	
	НоваяСтрока = ФормаСообщения.ТранспортныеУпаковки.Строки.Добавить();
	
	НоваяСтрока.ТипУпаковки		 = "201";
	НоваяСтрока.ДопИдентификатор = ТекUltimateCustomerGln;
		
	ДМ_ПронумероватьУпаковкиСквознымПорядковымНомером(ФормаСообщения); 
	ДМ_ПроименоватьУпаковки(ФормаСообщения);
	
	
	Возврат НоваяСтрока;
		
КонецФункции
Процедура ДМ_ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, Строки)
	
	Для Каждого Строка Из Строки Цикл
		
		Если ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			ДМ_ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, Строка.Строки);
		ИначеЕсли Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			НоваяСтрока = ТаблицаРазмещенныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРазмещенныеТовары.Свернуть("НомерСтроки","Количество");
	
КонецПроцедуры
Функция ДМ_ИнициализироватьТаблицуРазмещенныхТоваров()
	
	ТаблицаРазмещенныеТовары = Новый ТаблицаЗначений;
	ТаблицаРазмещенныеТовары.Колонки.Добавить("НомерСтроки");
	ТаблицаРазмещенныеТовары.Колонки.Добавить("Количество");
		
	Возврат ТаблицаРазмещенныеТовары;
	
КонецФункции
Процедура ДМ_ОбновитьДанныеРазмещения(ФормаСообщения)

	ТаблицаРазмещенныеТовары = ДМ_ИнициализироватьТаблицуРазмещенныхТоваров();
	
	ДМ_ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, ФормаСообщения.ТранспортныеУпаковки.Строки);
	
	ТаблицаТовары = ФормаСообщения.Товары.Скопировать(,"НомерСтроки,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество");
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		КоличествоПозицийВсего		 = Строка.Количество;
		СтрокаРазмещенныхПозиций 	 = ТаблицаРазмещенныеТовары.Найти(Строка.НомерСтроки,"НомерСтроки");
		КоличествоРазмещенныхПозиций = 0;
		Если Не СтрокаРазмещенныхПозиций = Неопределено Тогда
			КоличествоРазмещенныхПозиций = СтрокаРазмещенныхПозиций.Количество;
		КонецЕсли;
		СтрокаНеразмещенныхТоваров 	 = ФормаСообщения.ТоварныеПозиции.Найти(Строка.НомерСтроки,"НомерСтроки");
		
		Если КоличествоПозицийВсего = КоличествоРазмещенныхПозиций Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				ФормаСообщения.ТоварныеПозиции.Удалить(СтрокаНеразмещенныхТоваров);	
			КонецЕсли;
		ИначеЕсли КоличествоРазмещенныхПозиций = 0 Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				СтрокаНеразмещенныхТоваров.Количество = КоличествоПозицийВсего;
			Иначе
				НоваяСтрока = ДМ_ДобавитьНераспределеннуюТоварнуюПозицию(ФормаСообщения,Строка);
				НоваяСтрока.Количество = КоличествоПозицийВсего;
			КонецЕсли;
		ИначеЕсли КоличествоПозицийВсего > КоличествоРазмещенныхПозиций Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				СтрокаНеразмещенныхТоваров.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;		
			Иначе
				НоваяСтрока = ДМ_ДобавитьНераспределеннуюТоварнуюПозицию(ФормаСообщения,Строка);
				НоваяСтрока.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;
			КонецЕсли;
		Иначе // КоличествоПозицийВсего < КоличествоРазмещенныхПозиций //переразмещение - нехватка товара в РТУ по отношению к заказу
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				СтрокаНеразмещенныхТоваров.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;		
			Иначе
				НоваяСтрока = ДМ_ДобавитьНераспределеннуюТоварнуюПозицию(ФормаСообщения,Строка); //перераспределенную
				НоваяСтрока.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ДМ_ВычислитьКоличествоВУпаковках(ФормаСообщения.ТранспортныеУпаковки.Строки);
		
	ФормаСообщения.ТоварныеПозиции.Сортировать("НомерСтроки");	

		
	ДМ_ПронумероватьУпаковкиСквознымПорядковымНомером(ФормаСообщения);
	ДМ_ПроименоватьУпаковки(ФормаСообщения);
	
КонецПроцедуры
Функция ДМ_ПолучитьРазвернутоеНаименованиеТовара(Строка)
	
	Наименование = "";
	
	Номенклатура = Строка(Строка.Номенклатура); 
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Наименование = Наименование + Номенклатура;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Строка(Строка.ХарактеристикаНоменклатуры); 
		
	ЕдиницаИзменения = Строка(Строка.ЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) 
		 ИЛИ ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
		 
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры)
			 И ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
			Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + "," + " " + ЕдиницаИзменения + " )";
		Иначе
			Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
				Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + " )";
			ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
				Наименование = Наименование + " " + "( " + ЕдиницаИзменения + " )";
			КонецЕсли;				 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции
Функция ДМ_ПолучитьТипУпаковки(КодТипа)
	
	ТипУпаковки = "Упаковка";
	
	Если КодТипа = "201" Тогда
		ТипУпаковки = "Евро-паллета";
	КонецЕсли;
	
	Возврат ТипУпаковки;
	
КонецФункции
Процедура ДМ_ПроименоватьУпаковки(ФормаСообщения)
	
	Для Каждого Строка Из ФормаСообщения.ТранспортныеУпаковки.Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДМ_УстановитьСоставУпаковки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ДМ_ПронумероватьТоварыУпаковки(Упаковка)
	
	Для Каждого Товар Из Упаковка.Строки Цикл
		
		Товар.НомерУпаковки = Упаковка.НомерУпаковки;	
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ДМ_ПронумероватьУпаковкиСквознымПорядковымНомером(ФормаСообщения)
	
	//на будущее: когда появятся вложения - тогда здесь рекурсивно проваливаться вниз
	
	НомерУпаковки = 1; 
	
	Для Каждого Строка Из ФормаСообщения.ТранспортныеУпаковки.Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.НомерУпаковки = НомерУпаковки + 1; //делаем +1 - поскольку в формате имеется корневой узел, начинаем нумеровать упаковки с 2-ки
		
		ДМ_ПронумероватьТоварыУпаковки(Строка);
		
		НомерУпаковки = НомерУпаковки + 1;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ДМ_УстановитьСоставУпаковки(Упаковка)
	
	ТекстSSCC = ?(ЗначениеЗаполнено(Упаковка.SSCC), " (" + Упаковка.SSCC + ")", "");
	
	РасшифровкаТипУпаковки = ДМ_ПолучитьТипУпаковки(Упаковка.ТипУпаковки);
	
	Упаковка.СоставУпаковки = РасшифровкаТипУпаковки + " " + "№" + Строка(Упаковка.НомерУпаковки-1) + ТекстSSCC;
	
КонецПроцедуры
Процедура ПреобразоватьКонечныйГрузополучательGLNВТоварахЗаказа(ТоварыЗаказа)
	ТоварыЗаказа.Колонки.Добавить("UltimateCustomerGln");
	Для каждого СтрокаТоваров Из ТоварыЗаказа Цикл
		Попытка //могли быть старые сообщения у которых нет такой колонки
			Строкатоваров.UltimateCustomerGln=Строкатоваров.КонечныйГрузополучательGLN;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
Функция СоставитьТЗСписокUltimateCustomerGln(СообщениеORDERS)
	
	ТаблицаUltimateCustomerGln=новый ТаблицаЗначений;
	ТаблицаUltimateCustomerGln.Колонки.Добавить("UltimateCustomerGln");
	Для каждого СтрокаЗаказа Из СообщениеORDERS.Товары Цикл
		Если Значениезаполнено(СтрокаЗаказа.UltimateCustomerGln) тогда
			СтрокаUltimateCustomerGln = ТаблицаUltimateCustomerGln.Добавить();
			СтрокаUltimateCustomerGln.UltimateCustomerGln = СтрокаЗаказа.КонечныйГрузополучательGLN;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаUltimateCustomerGln.Свернуть("UltimateCustomerGln");
	
	Возврат ТаблицаUltimateCustomerGln;
	
КонецФункции
//\\КонецБлока Вспомогательных функций для Детского мира ultimateCustomer 

//служебные методы ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура ОткрытьКонструктор(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Если ДанныеОтладки.ПодключаемыйМодульСообщатьОСобытиях = Истина Тогда
		Сообщить(ИмяСобытия);
	КонецЕсли;
	
	Если Не ДанныеОтладки.ПодключаемыйМодульИспользоватьОтладку = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОтладки.ПодключаемыйМодульСобытиеОтладки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеОтладки.ПодключаемыйМодульСобытиеОтладки = ИмяСобытия Тогда
		Возврат;
	КонецЕсли;
		
	ФормаКонструктор = ПолучитьФорму("Конструктор");
	ТаблицаПараметры = Новый ТаблицаЗначений;
	ТаблицаПараметры.Колонки.Добавить("Имя");
	ТаблицаПараметры.Колонки.Добавить("Значение");
	Для Каждого Элемент Из Параметры Цикл
		НоваяСтрока = ТаблицаПараметры.Добавить();
		НоваяСтрока.Имя 	 = Элемент.Ключ;
		НоваяСтрока.Значение = Элемент.Значение;		
	КонецЦикла;
	ФормаКонструктор.ТаблицаПараметры 		 = ТаблицаПараметры;
	ФормаКонструктор.СтандартнаяОбработкаEDI = СтандартнаяОбработкаEDI;
	ФормаКонструктор.ИмяСобытия 			 = ИмяСобытия;
	ПутьОсновногоМодуля = "";
	Если Не Найти( Строка(ТипЗнч(ОсновнойМодуль)), "Внешняя обработка объект") = 0 Тогда
		ПутьОсновногоМодуля = ОсновнойМодуль.ИспользуемоеИмяФайла;
	КонецЕсли;
	ФормаКонструктор.ПутьОсновногоМодуля = ПутьОсновногоМодуля;
	ФормаКонструктор.ОткрытьМодально();	
	
КонецПроцедуры

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
// Предусмотрено 2 команды:
// 1. "Открыть форму обработки" для загрузки прайс-листа в диалоговом режиме
// 2. "Загрузить прайс-лист и сохранить протокол в файл" для загрузки прайс-листа по регламентному заданию и
// сохранения протокола в файл.
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Контур.EDI подключаемый модуль");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.00.01");
	//Если Найти(Метаданные.Синоним,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
	//	//нет регистрации по ВерсииБСП
	//иначе
	//	РегистрационныеДанные.Вставить("ВерсияБСП", "нет");
	//КонецЕсли;

	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	РегистрационныеДанные.Вставить("Информация", "Обработка подключаемого модуля для Контур.EDI");
	
	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Идентификатор");
	ТЗКоманд.Колонки.Добавить("Представление");
	ТЗКоманд.Колонки.Добавить("Модификатор");
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманд.Колонки.Добавить("Использование");
	
	
	РегистрационныеДанные.Вставить("Команды", ТЗКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции




//----------------------------------------------------------------------------------------------------------------
Функция xmlПространствоИменСообщений()//для XDTO
	
	Возврат "http://edi.kontur.ru/1c/ediXml/v01_4b";
	
	//http://edi.kontur.ru/1c/ediXml/v01_4b
	// Выпущено в 4.03.011
	// Добавлен тег "egaisFixationIdentificator"
	
	//http://edi.kontur.ru/1c/ediXml/v01_3b
	// Выпущено в 4.03.010
	// Широко задействован тип xs:Date
	// Тип xs:DateTime исключен из-за непредсказуемой обработки механизмом XDTO и заменен на xs:string
	// DeliveryInfo прописан в каждом сообщении свой, с ограниченным набором реквизитов.
	// Тело каждого документа описано независимо, убран тип doc_common.
	
	//http://edi.kontur.ru/1c/ediXml/v01_2b
	// Выпущено в 4.03.009.
	// Задействованы корневые свойства, PRICELIST влит сюда же.
	
	//http://edi.kontur.ru/1c/ediXml/v01
	// Выпущено в 4.03.008.
	
КонецФункции
