
Перем НачальныеВходныеДанные;
Перем Параметры;
Перем ЗначениеПоляДоПеретаскивания;
Перем ЗначениеЗначенияДоПеретаскивания;
Перем СписокРазвернутыхТипов;

Перем ПутьКаталогаКонтейнераМодуля;
Перем ПутьКаталогаКонтейнераПМ;

Перем ПозицияФункцияОбработатьСобытие;
Перем НачальнаяСтрока;
Перем КонечнаяСтрока;

Перем ПоказанныеДанные;


//обработчики --------------------------------------------------------------

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьПеременные();
	
	//проверим заполненность пути подключаемого модуля
	Если Не ЗначениеЗаполнено(ПутьПодключаемогоМодуля) Тогда
		Предупреждение("Не удалось выполнить отладку обработчика события (возможно ПМ не является файлом внешней обработки).");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//проверим отсутствие атрибута файла "Только чтение"
	Файл = Новый Файл(ПутьПодключаемогоМодуля);
	Если Файл.ПолучитьТолькоЧтение() Тогда
		Предупреждение("Не удалось открыть отладку обработчика события (возможно у ПМ установлен атрибут ""Только чтение"").");
		Файл = Неопределено;
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	                     
КонецПроцедуры

Процедура ПриОткрытии()

	Заголовок = Заголовок + """" + ИмяСобытия + """";
	
	//подготовим структуру параметров
	Параметры = Новый Структура();
	Для Каждого Строка Из ТаблицаПараметры Цикл
		Параметры.Вставить(Строка.Имя,Строка.Значение);
	КонецЦикла;
		
	//сохраним начальные параметры
	СохранитьНачальныеВходныеДанные();
		
	//очистим каталог для распаковки
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов() + "unpack\");
		
	//заполняем Если КонецЕсли
	ЗаполнитьТекстСобытия();
			
КонецПроцедуры

Процедура ВходныеДанныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	//запоминаем начальное значение поля
	ТекущаяСтрока 	  = ПараметрыПеретаскивания.Значение;
	ИмяТекущейКолонки = Элемент.ТекущаяКолонка.Имя;	
	
	Если ИмяТекущейКолонки = "Поле" Тогда
		
		Если ТекущаяСтрока.Тип = "Функция" или ТекущаяСтрока.Тип = "Процедура" Тогда
			ЗначениеПоляДоПеретаскивания 	 = ТекущаяСтрока.Поле;
			ЗначениеЗначенияДоПеретаскивания = ТекущаяСтрока.Значение;
			ЗначениеПеретаскивания = СобратьСтрокуПеременнойРекурсивноВверх(ТекущаяСтрока, ТекущаяСтрока.Значение);
			ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
		Иначе	
			ЗначениеПоляДоПеретаскивания 	 = ТекущаяСтрока.Поле;
			ЗначениеЗначенияДоПеретаскивания = ТекущаяСтрока.Значение;
			ЗначениеПеретаскивания = СобратьСтрокуПеременнойРекурсивноВверх(ТекущаяСтрока, ТекущаяСтрока.Поле);
			ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейКолонки = "Значение" Тогда
		         
		ЗначениеПоляДоПеретаскивания 	 = ТекущаяСтрока.Поле;
		ЗначениеЗначенияДоПеретаскивания = ТекущаяСтрока.Значение;
		Если ТекущаяСтрока.Тип = "Булево" Тогда
			ЗначениеПеретаскивания = Формат(ЗначениеЗначенияДоПеретаскивания,"БЛ=Ложь; БИ=Истина");
		Иначе
			ЗначениеПеретаскивания = ЗначениеЗначенияДоПеретаскивания;
		КонецЕсли;
		ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
		
	ИначеЕсли ИмяТекущейКолонки = "Тип" Тогда
		
		ЗначениеПоляДоПеретаскивания 	 = ТекущаяСтрока.Поле;
		ЗначениеЗначенияДоПеретаскивания = ТекущаяСтрока.Значение;
		Если ТекущаяСтрока.Тип = "Строка" или
			 ТекущаяСтрока.Тип = "Число"  или
			 ТекущаяСтрока.Тип = "Булево" или
			 ТекущаяСтрока.Тип = "Массив" или
			 ТекущаяСтрока.Тип = "Структура" Тогда
			ЗначениеПеретаскивания = "ТипЗнч(""" + ТекущаяСтрока.Тип + """)";
		ИначеЕсли ТекущаяСтрока.Тип = "Список значений" Тогда
			ЗначениеПеретаскивания = "ТипЗнч(""СписокЗначений"")";
		ИначеЕсли ТекущаяСтрока.Тип = "Таблица значений" Тогда
			ЗначениеПеретаскивания = "ТипЗнч(""ТаблицаЗначений"")";
		Иначе
			ЗначениеПеретаскивания = ТекущаяСтрока.Тип;
		КонецЕсли;
		ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;	
		
	КонецЕсли;
	
	//Если ТекущаяСтрока.Значение = "Табличная часть" Тогда
	//	СписокДействий = Новый СписокЗначений;
	//	СписокДействий.Добавить("Цикл", 	"Цикл по табличной части """ + ЗначениеПоляДоПеретаскивания + """");
	//	СписокДействий.Добавить("Значение", "Выбранное значение");
	//	ВыборПользователя = СписокДействий.ВыбратьЭлемент("Выберите вставляемый код");
	//	Если Не ВыборПользователя = Неопределено Тогда
	//		Если ВыборПользователя.Значение = "Цикл" Тогда
	//			ЗначениеПеретаскивания = "Для каждого Строка" + ЗначениеПоляДоПеретаскивания + " из " + ЗначениеПеретаскивания + " Цикл" + Символы.ПС + Символы.ПС + Символы.ПС + "КонецЦикла;";
	//		КонецЕсли;				
	//	КонецЕсли;
	//КонецЕсли;
			
КонецПроцедуры

Процедура ВходныеДанныеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	//восствнвыливаем начальное значение поля
	Элемент.ТекущаяСтрока.Поле 	 		= ЗначениеПоляДоПеретаскивания;
	Элемент.ТекущаяСтрока.Значение 		= ЗначениеЗначенияДоПеретаскивания;
	
	//чистим
	ЗначениеПоляДоПеретаскивания 		= "";
	ЗначениеЗначенияДоПеретаскивания    = "";
	
КонецПроцедуры

Процедура ЗаписатьКодСохранитьКодВТекущийПМ(Кнопка)
	
	ЗаписатьКод(Истина);				
	
КонецПроцедуры

Процедура ЗаписатьКодСохранитьВКопиюПМ(Кнопка)
	
	ЗаписатьКод(Ложь);			
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов()+"unpack");
	Исключение
		Предупреждение("Не удалось очистить корневую папку распаковки модулей.");
	КонецПопытки;
	
КонецПроцедуры

Процедура ПоказатьДанныеПоказатьПараметрыСобытия(Кнопка)
	
	Если Не ПоказанныеДанные.Параметры = Истина Тогда
		Состояние("Добавляем входные параметры обработчика события...");
		Для Каждого Элемент Из НачальныеВходныеДанные Цикл
			ДобавитьПараметрыРекурсивно(Неопределено, Элемент.Ключ, Элемент.Значение, , "ВходныеДанные");
		КонецЦикла;
		ПоказанныеДанные.Параметры = Истина;
		Состояние("");
	Иначе
		СообщитьВКомментарий("Выбранные данные уже были добавлены ранее...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьДанныеПоказатьКонтекстМодуля(Кнопка)
	
	Если Не ПоказанныеДанные.КонтекстМодуля = Истина Тогда
		Состояние("Добавляем экспортный контекст основного модуля...");
		Успешно = ДобавитьЭкспортныеМетодыОсновногоМодуля();
		Если Успешно = Истина Тогда
			ПоказанныеДанные.КонтекстМодуля = Истина;
		КонецЕсли;
		Состояние("");
	Иначе
		СообщитьВКомментарий("Выбранные данные уже были добавлены ранее...");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказатьДанныеПоказатьКонтекстПодключаемогоМодуля(Кнопка)
	
	Если Не ПоказанныеДанные.КонтекстПМ = Истина Тогда
		Состояние("Добавляем экспортный контекст подключаемого модуля...");
		Успешно = ДобавитьЭкспортныеМетодыПодключаемогоМодуля();
		Если Успешно = Истина Тогда
			ПоказанныеДанные.КонтекстПМ = Истина;
		КонецЕсли;
		Состояние("");
	Иначе
		СообщитьВКомментарий("Выбранные данные уже были добавлены ранее...");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказатьДанныеПоказатьДеревоКонфигурации(Кнопка)
	
	Если Не ПоказанныеДанные.Конфигурация = Истина Тогда
		Состояние("Добавляем описание объектов конфигурации...");
		ДобавитьВеткуДеревоКонфигурации();
		ПоказанныеДанные.Конфигурация = Истина;
		Состояние("");
	Иначе
		СообщитьВКомментарий("Выбранные данные уже были добавлены ранее...");
	КонецЕсли;
	
КонецПроцедуры


//добавление / изменение / восстановление данных в деревья -----------------------
                                                                                                                                                          
Функция ДобавитьСтрокуВДерево(Родитель, Имя, Значение, ТипЗначения = "", Приемник)
	
	Если Родитель = Неопределено Тогда
		Если Приемник = "ВходныеДанные" Тогда
			НоваяСтрока = ВходныеДанные.Строки.Добавить();
		ИначеЕсли Приемник = "ВыходныеДанные" Тогда
			НоваяСтрока = ВыходныеДанные.Строки.Добавить();
		КонецЕсли;
	Иначе
		НоваяСтрока = Родитель.Строки.Добавить();
	КонецЕсли;
	
	//имя
	НоваяСтрока.Поле 		= Имя;
	
	//значение
	Если ТипЗнч(Значение) = Тип("Строка") И 
		 Не (ТипЗначения = "Процедура" или ТипЗначения = "Функция" или ТипЗначения = "Группа") Тогда
		НоваяСтрока.Значение = """" + Строка(Значение) + """";	
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		НоваяСтрока.Значение = Значение;	
	Иначе
		НоваяСтрока.Значение = Строка(Значение);
	КонецЕсли;
	
	//тип
	Если ТипЗначения = "" Тогда
		НоваяСтрока.Тип	= Строка(ТипЗнч(Значение));
	Иначе
		НоваяСтрока.Тип = ТипЗначения;
	КонецЕсли;
		
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьПараметрыРекурсивно(Родитель, Имя, Значение, Тип = "", Приемник)
	
	НоваяСтрока = ДобавитьСтрокуВДерево(Родитель, Имя, Значение, Тип, Приемник);

	//значение принадлежить к простому типу
	ЭтоПростоеЗначение = ЗначениеПринадлежитКПростомуТипу(Значение);
	Если ЭтоПростоеЗначение.Принадлежит Тогда
		Возврат;
	КонецЕсли;
	
	//значение принадлежит к "многострочному" типу
	ЭтоМногострочноеЗначение = ЗначениеПринадлежитКМногострочномуТипу(Значение);
	Если ЭтоМногострочноеЗначение.Принадлежит Тогда
		
		Если ЭтоМногострочноеЗначение.ИмяТипа = "Структура" Тогда
			Для Каждого Элемент Из Значение Цикл
				ДобавитьПараметрыРекурсивно(НоваяСтрока,Элемент.Ключ,Элемент.Значение,,Приемник);
			КонецЦикла;
		ИначеЕсли ЭтоМногострочноеЗначение.ИмяТипа = "СписокЗначений" Тогда
			
		ИначеЕсли ЭтоМногострочноеЗначение.ИмяТипа = "ТаблицаЗначений" Тогда
			Счетчик = 0;			
			Для Каждого Строка Из Значение Цикл
				НоваяСтрокаСтрокаТЧ = ДобавитьСтрокуВДерево(НоваяСтрока, "Строка №"+Строка(Счетчик), "Строка таблицы значений", "Группа", "ВходныеДанные");
				Для Каждого Колонка Из Значение.Колонки Цикл
					ДобавитьПараметрыРекурсивно(НоваяСтрокаСтрокаТЧ,Колонка.Имя,Строка[Колонка.Имя],,Приемник);
				КонецЦикла;
				Счетчик = Счетчик + 1;
			КонецЦикла;
		ИначеЕсли ЭтоМногострочноеЗначение.ИмяТипа = "Массив" Тогда
			
		КонецЕсли;	
		
		НоваяСтрока.Строки.Сортировать("Поле");
		
		Возврат;
		
	КонецЕсли;
	
	//значение принадлежит к объектному типу		
	ЭтоОбъектМетаданных = (Не Метаданные.НайтиПоТипу(ТипЗнч(Значение)) = Неопределено);
	Если ЭтоОбъектМетаданных Тогда
				
		ОпределениеОбъектаМетеданных = ПолучитьОпределениеОбъектаМетаданных(Значение);
				
		//разбираем справочник
		Если ОпределениеОбъектаМетеданных.ВидОбъектаМетеданных = "Справочник" Тогда
			
			ТекТип = ОпределениеОбъектаМетеданных.ВидОбъектаМетеданных + "." + ОпределениеОбъектаМетеданных.ИмяОбъектаМетеданных; 
			Если СписокРазвернутыхТипов.НайтиПоЗначению(ТекТип) = Неопределено Тогда
				СписокРазвернутыхТипов.Добавить(ТекТип);
			Иначе
				Возврат;
			КонецЕсли;
			
			//владелец и родитель
			Если Имя = "Владелец" или Имя = "Родитель" Тогда
				ЭлементТекТип = СписокРазвернутыхТипов.НайтиПоЗначению(ТекТип);
				Если Не ЭлементТекТип = Неопределено Тогда
					СписокРазвернутыхТипов.Удалить(ЭлементТекТип);
				КонецЕсли;
				Возврат;
			КонецЕсли;
            			
			НоваяСтрокаРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрока, "Реквизиты", "Список реквизитов справочника", "Группа", Приемник);
			//стандартные реквизиты
			Для Каждого СтандРеквизит Из ОпределениеОбъектаМетеданных.ОбъектМетеданных.СтандартныеРеквизиты Цикл
				//ссылка
				Если СтандРеквизит.Имя = "Ссылка" Тогда
					Продолжить;
				Иначе
					ДобавитьПараметрыРекурсивно(НоваяСтрокаРеквизиты, СтандРеквизит.Имя, Значение[СтандРеквизит.Имя], , Приемник);
				КонецЕсли;
			КонецЦикла;
			//реквизиты
			Для Каждого Реквизит Из ОпределениеОбъектаМетеданных.ОбъектМетеданных.Реквизиты Цикл 
				//аналогичные имена
 				Если Реквизит.Имя = Имя Тогда
					ДобавитьПараметрыРекурсивно(НоваяСтрокаРеквизиты, Реквизит.Имя, Строка(Значение[Реквизит.Имя]), ТипЗнч(Значение[Реквизит.Имя]), Приемник);
				Иначе
					ДобавитьПараметрыРекурсивно(НоваяСтрокаРеквизиты, Реквизит.Имя, Значение[Реквизит.Имя], , Приемник);	
				КонецЕсли;
			КонецЦикла;
			НоваяСтрокаРеквизиты.Строки.Сортировать("Поле");
			
			ЭлементТекТип = СписокРазвернутыхТипов.НайтиПоЗначению(ТекТип);
			Если Не ЭлементТекТип = Неопределено Тогда
				СписокРазвернутыхТипов.Удалить(ЭлементТекТип);
			КонецЕсли;
			
		//разбираем документ
		ИначеЕсли ОпределениеОбъектаМетеданных.ВидОбъектаМетеданных = "Документ" Тогда
			
			НоваяСтрокаРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрока, "Реквизиты", "Список реквизитов документа", "Группа", Приемник);
			//стандартные реквизиты
			Для Каждого СтандРеквизит Из ОпределениеОбъектаМетеданных.ОбъектМетеданных.СтандартныеРеквизиты Цикл
				Если СтандРеквизит.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьПараметрыРекурсивно(НоваяСтрокаРеквизиты, СтандРеквизит.Имя, Значение[СтандРеквизит.Имя], , Приемник);
			КонецЦикла;
			//реквизиты
			Для Каждого Реквизит Из ОпределениеОбъектаМетеданных.ОбъектМетеданных.Реквизиты Цикл 
				ДобавитьПараметрыРекурсивно(НоваяСтрокаРеквизиты, Реквизит.Имя, Значение[Реквизит.Имя], , Приемник);
			КонецЦикла;
			НоваяСтрокаРеквизиты.Строки.Сортировать("Поле");
			
			//табличные части
			Если Не ОпределениеОбъектаМетеданных.ОбъектМетеданных.ТабличныеЧасти.Количество() = 0 Тогда
				НоваяСтрокаТЧасти = ДобавитьСтрокуВДерево(НоваяСтрока, "Табличные части", "Список табличных частей документа", "Группа", Приемник);
				Для Каждого ТабЧасть Из ОпределениеОбъектаМетеданных.ОбъектМетеданных.ТабличныеЧасти Цикл 
					НоваяСтрокаТЧастиТЧасть = ДобавитьСтрокуВДерево(НоваяСтрокаТЧасти, ТабЧасть.Имя, "Табличная часть", "Группа", Приемник);
					Если Значение[ТабЧасть.Имя].Количество() = 0 Тогда
						НоваяСтрокаТЧастиТЧастьРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаТЧастиТЧасть,"Реквизиты", "Реквизиты табличной части", "Группа", Приемник);
						Для Каждого Реквизит Из ТабЧасть.Реквизиты Цикл
							ДобавитьПараметрыРекурсивно(НоваяСтрокаТЧастиТЧастьРеквизиты, Реквизит.Имя, ПолучитьПустоеЗначение(Реквизит.Тип), ТипЗнч(ПолучитьПустоеЗначение(Реквизит.Тип)), Приемник);
						КонецЦикла;
						НоваяСтрокаТЧастиТЧастьРеквизиты.Строки.Сортировать("Поле");
					Иначе
						НоваяСтрокаТЧастиТЧастьРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаТЧастиТЧасть, "Реквизиты", "Реквизиты табличной части", "Группа", Приемник);
						НомерСтроки = 0;
						Для Каждого Строка Из Значение[ТабЧасть.Имя] Цикл
							НоваяСтрокаТЧастиТЧастьРеквизитыСтрока = ДобавитьСтрокуВДерево(НоваяСтрокаТЧастиТЧастьРеквизиты, "Строка №" + Строка(НомерСтроки), "Строка табличной части", "Группа", Приемник);
							Для Каждого Реквизит Из ТабЧасть.Реквизиты Цикл
								ДобавитьПараметрыРекурсивно(НоваяСтрокаТЧастиТЧастьРеквизитыСтрока, Реквизит.Имя, Строка[Реквизит.Имя], ТипЗнч(Строка[Реквизит.Имя]), Приемник);
							КонецЦикла;
							НоваяСтрокаТЧастиТЧастьРеквизитыСтрока.Строки.Сортировать("Поле");
							НомерСтроки = НомерСтроки + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НоваяСтрокаТЧасти.Строки.Сортировать("Поле");
			КонецЕсли;
						
		ИначеЕсли ОпределениеОбъектаМетеданных.ВидОбъектаМетеданных = "Перечисление" Тогда
			//нечего разворачивать		
		ИначеЕсли ОпределениеОбъектаМетеданных.ВидОбъектаМетеданных = "ПланВидовХарактеристик" Тогда
			//нужно ли разворачивать?
		КонецЕсли;
				
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьЭкспортныйКонтекстВДерево(Контекст, ТипМодуля)
	
	НоваяСтрока = ДобавитьСтрокуВДерево(Неопределено, "Контекст " + ?(ТипМодуля="основной","основного","подключаемого") + " модуля", "Контекст", "Группа", "ВходныеДанные");
	
		//добавляем переменные
		НоваяСтрокаПеременные = ДобавитьСтрокуВДерево(НоваяСтрока, "Переменные " + ?(ТипМодуля="основной","основного","подключаемого") + " модуля", "Переменные", "Группа", "ВходныеДанные");
		Для Каждого Строка Из Контекст.Переменные Цикл
			Значение = "";
			Попытка
				Выполнить("Значение = ЭтотОбъект.ОсновнойМодуль." + Строка.Наименование + ";");
			Исключение
				_Ошибка = ОписаниеОшибки();
			КонецПопытки;
			ДобавитьПараметрыРекурсивно(НоваяСтрокаПеременные, Строка.Наименование, Значение, , "ВходныеДанные");	
		КонецЦикла;
		
		//добавляем методы
		НоваяСтрокаМетоды = ДобавитьСтрокуВДерево(НоваяСтрока, "Методы " + ?(ТипМодуля="основной","основного","подключаемого") + " модуля", "Методы", "Группа", "ВходныеДанные");
		Для Каждого Строка Из Контекст.Методы Цикл
			ДобавитьПараметрыРекурсивно(НоваяСтрокаМетоды, Строка.Наименование, Строка.Наименование+"("+Строка.Параметры+")", Строка.Тип, "ВходныеДанные");	
		КонецЦикла;		
	    	
КонецПроцедуры

Функция ДобавитьЭкспортныеМетодыОсновногоМодуля()
	
	Успешно = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьОсновногоМодуля) Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контекст основного модуля.");
		Возврат Успешно;
	КонецЕсли;
	
	//проверим отсутствие атрибута файла "Только чтение"
	Файл = Новый Файл(ПутьОсновногоМодуля);
	Если Файл.ПолучитьТолькоЧтение() Тогда
		Предупреждение("Не удалось подгрузить экспортный контент основного модуля (у основного модуля установлен атрибут ""Только чтение"").");
		Файл = Неопределено;
		Возврат Успешно;	
	КонецЕсли;
	
	ПутьКаталогаКонтейнераМодуля = "";	
	ПутьКаталогаКонтейнераМодуля = РаспаковатьОбработку(ПутьОсновногоМодуля, "KonturEDI");
	
	Если ПутьКаталогаКонтейнераМодуля = "" Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контент основного модуля (контейнер не разобран).");
		Возврат Успешно;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаКонтейнераМодуля, "text", Истина);
	
	Если МассивФайлов.Количество() <> 1 Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контент основного модуля (неоднозначно найден модуль объекта).");
		Возврат Успешно;
	КонецЕсли;
	
	ЭкспортныйКонтекстМодуляОбъекта = ПолучитьЭкспортныйКонтекстМодуля(МассивФайлов[0].ПолноеИмя, "основной");
	
	ДобавитьЭкспортныйКонтекстВДерево(ЭкспортныйКонтекстМодуляОбъекта, "основной");
	
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов() + "unpack\");
	
	Успешно = Истина;
	
	Возврат Успешно;
	
КонецФункции

Функция ДобавитьЭкспортныеМетодыПодключаемогоМодуля()
	
	Успешно = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьПодключаемогоМодуля) Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контекст подключаемого модуля.");
		Возврат Успешно;
	КонецЕсли;
	
	//проверим отсутствие атрибута файла "Только чтение"
	Файл = Новый Файл(ПутьПодключаемогоМодуля);
	Если Файл.ПолучитьТолькоЧтение() Тогда
		Предупреждение("Не удалось подгрузить экспортный контент подключаемого модуля (у ПМ установлен атрибут ""Только чтение"").");
		Файл = Неопределено;
		Возврат Успешно;	
	КонецЕсли;
	
	ПутьКаталогаКонтейнераПМ = "";
	ПутьКаталогаКонтейнераПМ = РаспаковатьОбработку(ПутьПодключаемогоМодуля, "KonturEDI_AM");
	
	Если ПутьКаталогаКонтейнераПМ = "" Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контент подключаемого модуля (контейнер не разобран).");
		Возврат Успешно;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаКонтейнераПМ, "text", Истина);
	
	Если МассивФайлов.Количество() <> 1 Тогда
		СообщитьВКомментарий("Не удалось подгрузить экспортный контент подключаемого модуля (неоднозначно найден модуль объекта).");
		Возврат Успешно;
	КонецЕсли;
	
	ЭкспортныйКонтекстМодуляОбъекта = ПолучитьЭкспортныйКонтекстМодуля(МассивФайлов[0].ПолноеИмя, "пм");
	
	ДобавитьЭкспортныйКонтекстВДерево(ЭкспортныйКонтекстМодуляОбъекта, "пм");
	
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов() + "unpack\");
	
	Успешно = Истина;
	
	Возврат Успешно;
	
КонецФункции

Процедура СохранитьНачальныеВходныеДанные()
	
	НачальныеВходныеДанные = Новый Структура();
	
	НачальныеВходныеДанные.Вставить("ИмяСобытия", 				ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ИмяСобытия)));
	НачальныеВходныеДанные.Вставить("СтандартнаяОбработкаEDI", 	ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтандартнаяОбработкаEDI)));
	НачальныеВходныеДанные.Вставить("Параметры", 				ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Параметры)));
	
КонецПроцедуры

Процедура ВосстановитьНачальныеВходныеДанные()
	
	ИмяСобытия 				= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(НачальныеВходныеДанные.ИмяСобытия));
	СтандартнаяОбработкаEDI	= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(НачальныеВходныеДанные.СтандартнаяОбработкаEDI));
	Параметры 				= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(НачальныеВходныеДанные.Параметры));	
	
КонецПроцедуры

Процедура ДобавитьВДеревоВозвращаемоеЗначение(Значение)
	
	Состояние("Выводим возвращаемое значение обработчика события...");
	ДобавитьПараметрыРекурсивно(Неопределено, "Возвращаемое значение", Значение, ТипЗнч(Значение), "ВыходныеДанные");	
	Состояние("");
	
КонецПроцедуры

Процедура ДобавитьВеткуДеревоКонфигурации()
	
	НоваяСтрока = ДобавитьСтрокуВДерево(Неопределено, "Конфигурация", "Конфигурация", "Группа", "ВходныеДанные");
	
	//константы
	НоваяСтрокаКонстанты = ДобавитьСтрокуВДерево(НоваяСтрока, "Константы", "Список констант конфигурации", "Группа", "ВходныеДанные");
	Для Каждого Константа Из Метаданные.Константы Цикл
		НоваяСтрокаКонстанта = ДобавитьСтрокуВДерево(НоваяСтрокаКонстанты, Константа.Имя, Константы[Константа.Имя].Получить(), ТипЗнч(Константы[Константа.Имя].Получить()), "ВходныеДанные");		
	КонецЦикла;
	НоваяСтрокаКонстанты.Строки.Сортировать("Поле");
	
	//справочники
	НоваяСтрокаСправочники = ДобавитьСтрокуВДерево(НоваяСтрока, "Справочники", "Список справочников конфигурации", "Группа", "ВходныеДанные");
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		НоваяСтрокаСправочник = ДобавитьСтрокуВДерево(НоваяСтрокаСправочники, Справочник.Имя, "Справочник конфигкрации", "Группа", "ВходныеДанные");
		НоваяСтрокаСправочникРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаСправочник, "Реквизиты", "Список реквизитов справочника", "Группа", "ВходныеДанные");
		Для Каждого СтандРеквизит Из Справочник.СтандартныеРеквизиты Цикл
			НоваяСтрокаСправочникРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаСправочникРеквизиты, СтандРеквизит.Имя, ПолучитьПустоеЗначение(СтандРеквизит.Тип), ТипЗнч(ПолучитьПустоеЗначение(СтандРеквизит.Тип)), "ВходныеДанные");		
		КонецЦикла;
		Для Каждого Реквизит Из Справочник.Реквизиты Цикл
			НоваяСтрокаСправочникРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаСправочникРеквизиты, Реквизит.Имя, ПолучитьПустоеЗначение(Реквизит.Тип), ТипЗнч(ПолучитьПустоеЗначение(Реквизит.Тип)), "ВходныеДанные");		
		КонецЦикла;
		НоваяСтрокаСправочникРеквизиты.Строки.Сортировать("Поле");
		Если Справочник.ТабличныеЧасти.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаСправочникТабличныеЧасти = ДобавитьСтрокуВДерево(НоваяСтрокаСправочник, "Табличные части", "Список табличных частей справочника", "Группа", "ВходныеДанные");
		Для Каждого ТабличнаяЧасть Из Справочник.ТабличныеЧасти Цикл
			НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧасть = ДобавитьСтрокуВДерево(НоваяСтрокаСправочникТабличныеЧасти, ТабличнаяЧасть.Имя, "Табличная часть", "Группа", "ВходныеДанные");
			НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧастьРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧасть, "Реквизиты", "Реквизиты табличной части", "Группа", "ВходныеДанные");	 	
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
				НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧастьРеквизитыРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧастьРеквизиты, РеквизитТЧ.Имя, ПолучитьПустоеЗначение(РеквизитТЧ.Тип), ТипЗнч(ПолучитьПустоеЗначение(РеквизитТЧ.Тип)), "ВходныеДанные");				
			КонецЦикла;
			НоваяСтрокаСправочникТабличныеЧастиТабличнаяЧастьРеквизиты.Строки.Сортировать("Поле");
		КонецЦикла;
		НоваяСтрокаСправочникТабличныеЧасти.Строки.Сортировать("Поле");
	КонецЦикла;
	НоваяСтрокаСправочники.Строки.Сортировать("Поле");
	
	//документы
	НоваяСтрокаДокументы = ДобавитьСтрокуВДерево(НоваяСтрока, "Документы", "Список документов конфигурации", "Группа", "ВходныеДанные");
	Для Каждого Документ Из Метаданные.Документы Цикл
		НоваяСтрокаДокумент = ДобавитьСтрокуВДерево(НоваяСтрокаДокументы, Документ.Имя, "Документ конфигурации", "Группа", "ВходныеДанные");
		НоваяСтрокаДокументРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаДокумент, "Реквизиты", "Список реквизитов документа", "Группа", "ВходныеДанные");
		Для Каждого СтандРеквизит Из Документ.СтандартныеРеквизиты Цикл
			НоваяСтрокаДокументРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаДокументРеквизиты, СтандРеквизит.Имя, ПолучитьПустоеЗначение(СтандРеквизит.Тип), ТипЗнч(ПолучитьПустоеЗначение(СтандРеквизит.Тип)), "ВходныеДанные");		
		КонецЦикла;
		Для Каждого Реквизит Из Документ.Реквизиты Цикл
			НоваяСтрокаДокументРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаДокументРеквизиты, Реквизит.Имя, ПолучитьПустоеЗначение(Реквизит.Тип), ТипЗнч(ПолучитьПустоеЗначение(Реквизит.Тип)), "ВходныеДанные");		
		КонецЦикла;
		Если Документ.ТабличныеЧасти.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаДокументРеквизиты.Строки.Сортировать("Поле");
		НоваяСтрокаДокументТабличныеЧасти = ДобавитьСтрокуВДерево(НоваяСтрокаДокумент, "Табличные части", "Список табличных частей документа", "Группа", "ВходныеДанные");
		Для Каждого ТабличнаяЧасть Из Документ.ТабличныеЧасти Цикл
			НоваяСтрокаДокументТабличныеЧастиТабличнаяЧасть = ДобавитьСтрокуВДерево(НоваяСтрокаДокументТабличныеЧасти, ТабличнаяЧасть.Имя, "Табличная часть", "Группа", "ВходныеДанные");
			НоваяСтрокаДокументТабличныеЧастиТабличнаяЧастьРеквизиты = ДобавитьСтрокуВДерево(НоваяСтрокаДокументТабличныеЧастиТабличнаяЧасть, "Реквизиты", "Реквизиты табличной части", "Группа", "ВходныеДанные");	 	
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
				НоваяСтрокаДокументТабличныеЧастиТабличнаяЧастьРеквизитыРеквизит = ДобавитьСтрокуВДерево(НоваяСтрокаДокументТабличныеЧастиТабличнаяЧастьРеквизиты, РеквизитТЧ.Имя, ПолучитьПустоеЗначение(РеквизитТЧ.Тип), ТипЗнч(ПолучитьПустоеЗначение(РеквизитТЧ.Тип)), "ВходныеДанные");				
			КонецЦикла;
			НоваяСтрокаДокументТабличныеЧастиТабличнаяЧастьРеквизиты.Строки.Сортировать("Поле");
		КонецЦикла;
		НоваяСтрокаДокументТабличныеЧасти.Строки.Сортировать("Поле");
	КонецЦикла;
	НоваяСтрокаДокументы.Строки.Сортировать("Поле");
	
КонецПроцедуры

Процедура СообщитьВКомментарий(ТекстСообщения)
	
	ЭлементыФормы.Комментарий.ДобавитьСтроку(ТекстСообщения);		
	
КонецПроцедуры


//валидации значений --------------------------------------------------------------

Функция ЗначениеПринадлежитКПростомуТипу(Значение)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Принадлежит");
	СтруктураРезультата.Вставить("ИмяТипа");
	
	Принадлежит = Ложь;
	ИмяТипа 	= "";
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Неопределено";
	ИначеЕсли ТипЗнч(Значение) = Тип("Null") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Null";
	КонецЕсли;
	
	СтруктураРезультата.Вставить("Принадлежит", Принадлежит);
	СтруктураРезультата.Вставить("ИмяТипа", 	ИмяТипа);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ЗначениеПринадлежитКМногострочномуТипу(Значение)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Принадлежит");
	СтруктураРезультата.Вставить("ИмяТипа");
	
	Принадлежит = Ложь;
	ИмяТипа 	= "";
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Структура";
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "СписокЗначений";
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "ТаблицаЗначений";
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Принадлежит = Истина;
		ИмяТипа 	= "Массив";		
	КонецЕсли;
	
	СтруктураРезультата.Вставить("Принадлежит", Принадлежит);
	СтруктураРезультата.Вставить("ИмяТипа", 	ИмяТипа);
	
	Возврат СтруктураРезультата;
	
КонецФункции
	
Функция ПолучитьОпределениеОбъектаМетаданных(Значение)
	
	СтруктураОпределения = Новый Структура();
	СтруктураОпределения.Вставить("ВидОбъектаМетеданных");
	СтруктураОпределения.Вставить("ИмяОбъектаМетеданных");
	СтруктураОпределения.Вставить("ОбъектМетеданных");
	
	ВидОбъектаМетеданных = "";
	ИмяОбъектаМетеданных = "";
	
	ОбъектМетеданных = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	ИмяОбъектаМетеданных = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя;
	
	Если Не Метаданные.Справочники.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя) = Неопределено Тогда
		ВидОбъектаМетеданных = "Справочник";
	ИначеЕсли Не Метаданные.Документы.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя) = Неопределено Тогда
		ВидОбъектаМетеданных = "Документ";
	ИначеЕсли Не Метаданные.Перечисления.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя) = Неопределено Тогда
		ВидОбъектаМетеданных = "Перечисление";
	ИначеЕсли Не Метаданные.ПланыВидовХарактеристик.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя) = Неопределено Тогда
		ВидОбъектаМетеданных = "ПланВидовХарактеристик";
	ИначеЕсли Не Метаданные.Константы.Найти(Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя) = Неопределено Тогда
		ВидОбъектаМетеданных = "Константа";		
	КонецЕсли;
			
	СтруктураОпределения.Вставить("ВидОбъектаМетеданных", ВидОбъектаМетеданных);
	СтруктураОпределения.Вставить("ИмяОбъектаМетеданных", ИмяОбъектаМетеданных);
	СтруктураОпределения.Вставить("ОбъектМетеданных", 	  ОбъектМетеданных);
	
	Возврат СтруктураОпределения;
			
КонецФункции

Функция ЗначениеЗакомментировано(Строка, Значение)
	
	Результат = Ложь;
	
	ПозицияЗначения 	= Найти(Строка,Значение);
	ПозицияКомментария  = Найти(Строка,"//");
	
	Если Не ПозицияКомментария = 0 И ПозицияКомментария < ПозицияЗначения Тогда
		Результат = Истина;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//подготовка данных --------------------------------------------------------------

Функция ПолучитьЭкспортныйКонтекстМодуля(ПолноеИмяФайла, ТипМодуля)
	
	СписокИсключаемыхПеременных	= ПолучитьНаименованияИсключаемыхПеременных(ТипМодуля);
	СписокИсключаемыхМетодов	= ПолучитьНаименованияИсключаемыхМетодов(ТипМодуля);
	
	КонтекстМодуля = Новый Структура;
	КонтекстМодуля.Вставить("Переменные");
	КонтекстМодуля.Вставить("Методы");
	
	Переменные = Новый ТаблицаЗначений;
	Переменные.Колонки.Добавить("Наименование");
		
	Методы = Новый ТаблицаЗначений;
	Методы.Колонки.Добавить("Тип");
	Методы.Колонки.Добавить("Наименование");
	Методы.Колонки.Добавить("Параметры");
	
	ТекстМодуля = Новый ТекстовыйДокумент();
	ТекстМодуля.Прочитать(ПолноеИмяФайла);
	
	КоличествоСтрок = ТекстМодуля.КоличествоСтрок();
	Для К = 1 По КоличествоСтрок Цикл
		
		ТекСтрока = ТекстМодуля.ПолучитьСтроку(К);
		
		ПозицияЭкспорт = Найти(ТекСтрока, "Экспорт");
		Если ПозицияЭкспорт = 0 Тогда
			Продолжить; 
		КонецЕсли;
		
		ПозицияПерем = 0;
		Если Не Найти(ТекСтрока,"Перем")=0 Тогда
			ПозицияПерем = Найти(ТекСтрока,"Перем");
		ИначеЕсли Не Найти(ТекСтрока,"перем")=0 Тогда
			ПозицияПерем = Найти(ТекСтрока,"перем");
		КонецЕсли;
					
		Если Не ПозицияПерем = 0 Тогда
			
			ПозицияНачало = ПозицияПерем   + 5;
			ПозицияКонец  = ПозицияЭкспорт - 1;
			
			Наименование = СокрЛП( Сред(ТекСтрока, ПозицияНачало, ПозицияКонец - ПозицияНачало) );
			
			Если СписокИсключаемыхПеременных.НайтиПоЗначению(Наименование) = Неопределено Тогда
				НоваяПеременная = Переменные.Добавить();
				НоваяПеременная.Наименование = Наименование;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ПозицияМетод = 0;
		ТипМетода = "";
		Если Не Найти(ТекСтрока, "Функция") = 0 Тогда
			ПозицияМетод = Найти(ТекСтрока, "Функция");
			ТипМетода = "Функция";
		ИначеЕсли Не Найти(ТекСтрока, "функция") = 0 Тогда
			ПозицияМетод = Найти(ТекСтрока, "функция");
			ТипМетода = "Функция";
		ИначеЕсли Не Найти(ТекСтрока, "Процедура") = 0 Тогда
			ПозицияМетод = Найти(ТекСтрока, "Процедура");
			ТипМетода = "Процедура";
		ИначеЕсли Не Найти(ТекСтрока, "процедура") = 0 Тогда
			ПозицияМетод = Найти(ТекСтрока, "процедура");
			ТипМетода = "Процедура";
		КонецЕсли;
		
		Если Не ПозицияМетод = 0 Тогда
			ПозицияНачало 		 = ПозицияМетод + СтрДлина(ТипМетода) + 1;
			ПозицияОткрытаяСкоба = Найти(ТекСтрока,"(");
			ПозицияЗакрытаяСкоба = Найти(ТекСтрока,")");
			
			Наименование = СокрЛП( Сред(ТекСтрока, ПозицияНачало, 			ПозицияОткрытаяСкоба - ПозицияНачало) );
			Параметры 	 = СокрЛП( Сред(ТекСтрока, ПозицияОткрытаяСкоба + 1, ПозицияЗакрытаяСкоба - ПозицияОткрытаяСкоба - 1) );
			
			Если СписокИсключаемыхМетодов.НайтиПоЗначению(Наименование) = Неопределено Тогда
				НовыйМетод = Методы.Добавить();
				НовыйМетод.Тип 			= ТипМетода;
				НовыйМетод.Наименование = Наименование;
				НовыйМетод.Параметры 	= Параметры;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Переменные.Сортировать("Наименование");
	Методы.Сортировать("Наименование");
	
	КонтекстМодуля.Вставить("Переменные", Переменные);
	КонтекстМодуля.Вставить("Методы",	 Методы);
	
	Возврат КонтекстМодуля;
	
КонецФункции

Функция ПолучитьНаименованияИсключаемыхПеременных(ТипМодуля)
	
	Список = Новый СписокЗначений;
	
	Если ТипМодуля = "основной" Тогда
			
	ИначеЕсли ТипМодуля = "пм" Тогда
		Список.Добавить("ОсновнойМодуль");	
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьНаименованияИсключаемыхМетодов(ТипМодуля)
	
	Список = Новый СписокЗначений;
	
	Если ТипМодуля = "основной" Тогда
			
	ИначеЕсли ТипМодуля = "пм" Тогда
		Список.Добавить("Инициализировать");	
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция СобратьСтрокуПеременнойРекурсивноВверх(СтрокаДерева, СтрокаПеременной)
				
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		ПолеРодитель = СтрокаДерева.Родитель.Поле;
		Если НЕ (ПолеРодитель = "Конфигурация"						или
				 ПолеРодитель = "Табличные части"					или
			 	 ПолеРодитель = "Реквизиты" 						или
			 	 ПолеРодитель = "Методы основного модуля"			или
				 ПолеРодитель = "Методы подключаемого модуля"		или
				 ПолеРодитель = "Переменные основного модуля"		или
				 ПолеРодитель = "Переменные подключаемого модуля"	или
				 Не Найти(ПолеРодитель,"Строка №") = 0) 			Тогда
				 
				СтрокаПеременной = СтрокаДерева.Родитель.Поле + "." + СтрокаПеременной;
			
		КонецЕсли;
		СобратьСтрокуПеременнойРекурсивноВверх(СтрокаДерева.Родитель, СтрокаПеременной);
	Иначе
		Возврат СтрокаПеременной; 					
	КонецЕсли;
	
	ВыполнитьЗаменуТекста(СтрокаПеременной);
	
	Возврат СтрокаПеременной;
	
КонецФункции

Процедура ВыполнитьЗаменуТекста(СтрокаПеременной)
	
	СтрокаПеременной = СтрЗаменить(СтрокаПеременной, "Контекст подключаемого модуля.", 	"");
	СтрокаПеременной = СтрЗаменить(СтрокаПеременной, "Контекст основного модуля", 		"ЭтотОбъект.ОсновнойМодуль");
		
КонецПроцедуры

Функция ПолучитьПустоеЗначение(ОписаниеТипа)
	
	ПустоеЗначение = ОписаниеТипа.ПривестиЗначение(Неопределено);
	
	Возврат ПустоеЗначение;  
	
КонецФункции

Процедура ЗаполнитьТекстСобытия()
	
	Если Не ЗначениеЗаполнено(ПутьПодключаемогоМодуля) Тогда
		СообщитьВКомментарий("Не удалось подгрузить обработчик события отлаживаеиого ПМ (ПМ не является файлом внешней обработки).");
		Возврат;
	КонецЕсли;
	
	ПутьКаталогаКонтейнераПМ = "";
	ПутьКаталогаКонтейнераПМ = РаспаковатьОбработку(ПутьПодключаемогоМодуля, "KonturEDI_AM");
	Если Не ЗначениеЗаполнено(ПутьКаталогаКонтейнераПМ) Тогда
		СообщитьВКомментарий("Не удалось подгрузить существующий код обработчика события (контейнер ПМ не был разобран).");
		СообщитьВКомментарий("Сформирован ""пустой"" обработчик события по умолчанию.");
		ЗаполнитьТекстСобытияПоУмолчанию();
		Возврат;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаКонтейнераПМ, "text", Истина);
	Если МассивФайлов.Количество() <> 1 Тогда
		СообщитьВКомментарий("Не удалось подгрузить существующий код обработчика события (неоднозначно найден модуль объекта ПМ).");
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(МассивФайлов[0].ПолноеИмя);
	
	КоличествоСтрок 	= ТекстовыйДокумент.КоличествоСтрок();
	СтрокаПоискаСобытия = "Если ИмяСобытия = """ + ИмяСобытия + """";
	НачальнаяСтрока 	= 0;
	КонечнаяСтрока  	= 0;
	КоличествоЕсли  	= 0;
	КоличествоКонецЕсли = 0;
	Для К = 1 По КоличествоСтрок Цикл
		
		ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(К);
				
		Если Не Найти(ТекСтрока,СтрокаПоискаСобытия) = 0 Тогда
			НачальнаяСтрока = К;
			КоличествоЕсли = КоличествоЕсли + 1;
			ТекСтрока = СтрЗаменить(ТекСтрока, СтрокаПоискаСобытия, "");
		КонецЕсли;
		
		//запоминаем начало функции обработки событий - потом будем вставлять туда обработчик собятия
		ПозицияФрагмента = Найти(ТекСтрока, "ОткрытьКонструктор(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);");
		Если Не ПозицияФрагмента = 0 Тогда
			ПозицияФункцияОбработатьСобытие = К;
		КонецЕсли;
		
		Если Не НачальнаяСтрока = 0 Тогда
		    Пока Истина Цикл
				
				ПозицияЕсли = 0;
				СтрокаПоискаЕсли = "";
				Если Не Найти(ТекСтрока,"Если ") = 0 Тогда
					СтрокаПоискаЕсли = "Если ";
				ИначеЕсли Не Найти(ТекСтрока,"если ") = 0 Тогда
					СтрокаПоискаЕсли = "если ";
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПоискаЕсли) И Не ЗначениеЗакомментировано(ТекСтрока,СтрокаПоискаЕсли) Тогда
					ПозицияЕсли = Найти(ТекСтрока, СтрокаПоискаЕсли);	
				КонецЕсли;	
				Если Не ПозицияЕсли = 0 Тогда
					КоличествоЕсли = КоличествоЕсли + 1;
					ТекСтрока = Лев(ТекСтрока, ПозицияЕсли-1) + Прав(ТекСтрока, СтрДлина(ТекСтрока)-ПозицияЕсли+1-4);
				КонецЕсли;
				
				ПозицияКонецЕсли = 0;
				СтрокаПоискаКонецЕсли = "";
				Если Не Найти(ТекСтрока,"КонецЕсли") = 0 Тогда
					СтрокаПоискаКонецЕсли = "КонецЕсли";
				ИначеЕсли Не Найти(ТекСтрока,"конецесли") = 0 Тогда
					СтрокаПоискаКонецЕсли = "конецесли";
				ИначеЕсли Не Найти(ТекСтрока,"Конецесли") = 0 Тогда
					СтрокаПоискаКонецЕсли = "Конецесли";
				ИначеЕсли Не Найти(ТекСтрока,"конецЕсли") = 0 Тогда
					СтрокаПоискаКонецЕсли = "конецЕсли";
				КонецЕсли;
                Если ЗначениеЗаполнено(СтрокаПоискаКонецЕсли) И Не ЗначениеЗакомментировано(ТекСтрока,СтрокаПоискаКонецЕсли) Тогда
					ПозицияКонецЕсли = Найти(ТекСтрока,СтрокаПоискаКонецЕсли);	
				КонецЕсли;
				Если Не ПозицияКонецЕсли = 0 Тогда
					КоличествоКонецЕсли = КоличествоКонецЕсли + 1;
					ТекСтрока = Лев(ТекСтрока, ПозицияКонецЕсли-1) + Прав(ТекСтрока, СтрДлина(ТекСтрока)-ПозицияКонецЕсли+1-9);
				КонецЕсли;
				
				Если ПозицияЕсли = 0 и ПозицияКонецЕсли = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоЕсли > 0 И КоличествоЕсли = КоличествоКонецЕсли Тогда
			КонечнаяСтрока = К;
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НачальнаяСтрока) И ЗначениеЗаполнено(КонечнаяСтрока) Тогда
		ЭлементыФормы.КодСобытияПМ.Очистить();
		Для К = НачальнаяСтрока По КонечнаяСтрока Цикл
			ЭлементыФормы.КодСобытияПМ.ДобавитьСтроку(ТекстовыйДокумент.ПолучитьСтроку(К));
		КонецЦикла;
	Иначе
		СообщитьВКомментарий("В отлаживаемом ПМ не удалось найти обработчик текущего события.");
		СообщитьВКомментарий("Сформирован ""пустой"" обработчик события по умолчанию.");
		ЗаполнитьТекстСобытияПоУмолчанию();
	КонецЕсли;

	//заполним текст ПМ
	ЭлементыФормы.КодПМ.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
		
	//очистим каталог для распаковки
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов() + "unpack\");
			
КонецПроцедуры

Процедура ЗаполнитьТекстСобытияПоУмолчанию()
	
	ЭлементыФормы.КодСобытияПМ.Очистить();
	ЭлементыФормы.КодСобытияПМ.ВставитьСтроку(1, "Если ИмяСобытия = """ + ИмяСобытия + """ Тогда");
	ЭлементыФормы.КодСобытияПМ.ВставитьСтроку(3, Символы.ПС + Символы.ПС);	
	ЭлементыФормы.КодСобытияПМ.ВставитьСтроку(5, "КонецЕсли;");
	
КонецПроцедуры

Процедура ИнициализироватьПеременные()
	
	ПутьПодключаемогоМодуля = "";
	Попытка
		ПутьПодключаемогоМодуля = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
	КонецПопытки;
	
	ПоказанныеДанные = Новый Структура;
	ПоказанныеДанные.Вставить("Параметры");
	ПоказанныеДанные.Вставить("КонтекстМодуля");
	ПоказанныеДанные.Вставить("КонтекстПМ");
	ПоказанныеДанные.Вставить("Конфигурация");
	
КонецПроцедуры


//работа с тестируемым кодом --------------------------------------------------------------

Процедура ВыполнитьКодВыполнитьКодИПоказатьРезультат(Кнопка)
	
	ВыполнитьКод(Истина);	
	
КонецПроцедуры

Процедура ВыполнитьКодНажатие(Элемент)
	
	ВыполнитьКод();	
	
КонецПроцедуры

Функция ВыполнитьКод(ПоказатьРезультат=Ложь)
	
	ВосстановитьНачальныеВходныеДанные();
	
	Успешно = Ложь;
	
	ТестируемыйКод = ВыполнитьЗаменыВКоде(ЭлементыФормы.КодСобытияПМ.ПолучитьТекст(), ПоказатьРезультат);
		
	Попытка
		ВыходныеДанные.Строки.Очистить();
		ЭлементыФормы.Комментарий.Очистить();
		Выполнить(ТестируемыйКод);
		Успешно = Истина;
		СообщитьОбУспешностиВыполнения(Успешно);
	Исключение
		_Ошибка = ОписаниеОшибки();
		ЭлементыФормы.Комментарий.ДобавитьСтроку("Код выполнен с ошибками:");
		ЭлементыФормы.Комментарий.ДобавитьСтроку(_Ошибка);
		Успешно = Ложь;
		СообщитьОбУспешностиВыполнения(Успешно);
	КонецПопытки;
	
	Если ПоказатьРезультат Тогда 
	    Если Успешно Тогда
			Состояние("Выводим выходные параметры обработчика события...");
			ДобавитьПараметрыРекурсивно(Неопределено, "ИмяСобытия", 				ИмяСобытия			   ,	,	"ВыходныеДанные");
			ДобавитьПараметрыРекурсивно(Неопределено, "СтандартнаяОбработкаEDI", 	СтандартнаяОбработкаEDI, 	,	"ВыходныеДанные");
			ДобавитьПараметрыРекурсивно(Неопределено, "Параметры", 					Параметры			   ,	,	"ВыходныеДанные");
			Состояние("");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ВыполнитьЗаменыВКоде(Код, ПоказатьРезультат)
		
	//заменяем Сообщить
	Код = СтрЗаменить(Код, "Сообщить(""", "ЭлементыФормы.Комментарий.ДобавитьСтроку(""");

	//заменяем Возврат
	КоличествоСтрок = СтрЧислоСтрок(Код);
	Для К = 1 По КоличествоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(Код, К);
		Выражение = СтрПолучитьСтроку(Код, К);
		ТекстВозврат   = "";
		ПозицияВозврат = 0;
		Если Не Найти(Выражение, "Возврат ") = 0 Тогда
			ТекстВозврат = "Возврат ";
		ИначеЕсли Не Найти(Выражение, "возврат ") = 0 Тогда
			ТекстВозврат = "возврат ";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстВозврат) Тогда
			ПозицияВозврат = Найти(Выражение, ТекстВозврат);
		КонецЕсли;
		Если Не ПозицияВозврат = 0 И Не ЗначениеЗакомментировано(Выражение, ТекстВозврат) Тогда
			Выражение = Прав(Выражение, СтрДлина(Выражение)-ПозицияВозврат+1);
			ПозицияТочСЗпт = Найти(Выражение, ";");
			Если ПозицияТочСЗпт = 0 Тогда
				Продолжить;
			КонецЕсли;
			Выражение = Лев( Выражение, ПозицияТочСЗпт );
			Значение  = Прав( Выражение, СтрДлина(Выражение)-Найти(Выражение,ТекстВозврат)-СтрДлина(ТекстВозврат)+1 );
			Значение  = Лев( Значение, СтрДлина(Значение)-1 );
			Если ПоказатьРезультат = Истина Тогда
				Код = СтрЗаменить(Код, Выражение, "ДобавитьВДеревоВозвращаемоеЗначение(" + Значение + ");");
			Иначе
				Код = СтрЗаменить(Код, Выражение, "");
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
    
	Возврат Код;
	
КонецФункции

Процедура СообщитьОбУспешностиВыполнения(Успешно)
	
	Если Успешно Тогда
		ЭлементыФормы.УспешноеВыполнение.Заголовок = "Код выполнен успешно!";
		ЭлементыФормы.УспешноеВыполнение.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		ЭлементыФормы.УспешноеВыполнение.Заголовок = "Код выполнен с ошибками!";
		ЭлементыФормы.УспешноеВыполнение.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры


//работа с файлами --------------------------------------------------------------

Функция РаспаковатьОбработку(ПолноеИмяФайла, ПодкаталогОбработки = "KonturEDI")
	
	Файл = Новый Файл(ПолноеИмяФайла);
	ИмяФайла = Файл.Имя;
	Файл = Неопределено;
	
	//копируем основной модуль во временную папку
	ПапкаРазбораМодуля 	= КаталогВременныхФайлов() + "unpack\";
	Попытка
		СоздатьКаталог( Лев(ПапкаРазбораМодуля,СтрДлина(ПапкаРазбораМодуля)-1) );
	Исключение
		_Ошибка = ОписаниеОшибки();
		Предупреждение("Не удалось создать корневую папку распаковки модулей: " + _Ошибка);
		Возврат "";
	КонецПопытки;
		
	ПутьРазбираемогоОсновногоМодуля = ПапкаРазбораМодуля + ИмяФайла;
	Попытка
		КопироватьФайл(ПолноеИмяФайла, ПутьРазбираемогоОсновногоМодуля);
	Исключение
		_Ошибка = ОписаниеОшибки();
		Предупреждение("Не удалось разобрать основной модуль по причине: " + _Ошибка);
		Возврат "";	
	КонецПопытки;
	
	//копируем компоненту во временную папку
	ПутьКомпоненты = ПапкаРазбораМодуля + "V8Unpack.exe";
	ПутьБиблиотеки = ПапкаРазбораМодуля + "zlib1.dll";
	ПолучитьМакет("V8Unpack").Записать(ПутьКомпоненты);
	ПолучитьМакет("zlib1").Записать(ПутьБиблиотеки);	
	
	ПапкаКонтейнер = ПапкаРазбораМодуля + ПодкаталогОбработки;
	СоздатьКаталог(ПапкаКонтейнер);
	
	Попытка
		ВыполнитьКомандуСистемы("V8Unpack.exe" + " -PARSE """ + ПутьРазбираемогоОсновногоМодуля + """ """ + ПапкаКонтейнер + """", ПапкаРазбораМодуля);
	Исключение
		ПапкаКонтейнер = "";
	КонецПопытки;
	
	Возврат ПапкаКонтейнер;
	
КонецФункции

Функция СобратьОбработку(ПодкаталогОбработки, ПолноеИмяФайла)
	
	Успешно = Ложь;
	
	ПапкаСборкиМодуля 	= КаталогВременныхФайлов() 	+ "unpack\";
	ПапкаКонтейнер		= ПапкаСборкиМодуля 		+ ПодкаталогОбработки;
	
	Попытка
		ВыполнитьКомандуСистемы("V8Unpack.exe -BUILD """ + ПапкаКонтейнер + """ """ + ПолноеИмяФайла + """", ПапкаСборкиМодуля);
		Успешно = Истина;
	Исключение
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Процедура ОчиститьКаталогРаспаковки(Каталог)
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ОбновитьКодМодуляОбъекта()
	
	Успешно = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьПодключаемогоМодуля) Тогда
		СообщитьВКомментарий("Не удалось обновить код ПМ (ПМ не является файлом внешней обработки).");
		Возврат Успешно;
	КонецЕсли;
	
	ПутьКаталогаКонтейнераПМ = "";
	ПутьКаталогаКонтейнераПМ = РаспаковатьОбработку(ПутьПодключаемогоМодуля, "KonturEDI_AM");
	Если Не ЗначениеЗаполнено(ПутьКаталогаКонтейнераПМ) Тогда
		СообщитьВКомментарий("Не удалось распаковать отлаживаемый ПМ (контейнер ПМ не был разобран).");
		Возврат Успешно;
	КонецЕсли;
	
	//получаем файл модуля объекта
	МассивФайлов = НайтиФайлы(ПутьКаталогаКонтейнераПМ, "text", Истина);
	Если МассивФайлов.Количество() <> 1 Тогда
		СообщитьВКомментарий("Не удалось найти модуль объекта ПМ (неоднозначность поиска).");
		Возврат Успешно;
	КонецЕсли;
	ПолноеИмяФайла = МассивФайлов[0].ПолноеИмя; 
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(ПолноеИмяФайла);
	
	//замена
	Если ЗначениеЗаполнено(НачальнаяСтрока) и ЗначениеЗаполнено(КонечнаяСтрока) Тогда
		
		//удаляем старое
		Для К = НачальнаяСтрока По КонечнаяСтрока Цикл
			Файл.УдалитьСтроку(НачальнаяСтрока);
		КонецЦикла;
		
		//вставляем новое
		Файл.ВставитьСтроку(НачальнаяСтрока, ЭлементыФормы.КодСобытияПМ.ПолучитьТекст());
								
	//добавление
	ИначеЕсли ЗначениеЗаполнено(ПозицияФункцияОбработатьСобытие) Тогда
	
		//вставляем новое
		КоличествоСтрок = ЭлементыФормы.КодСобытияПМ.КоличествоСтрок();
		Файл.ВставитьСтроку(ПозицияФункцияОбработатьСобытие+1,"");
		Для К = 1 По КоличествоСтрок Цикл 
			Файл.ВставитьСтроку(ПозицияФункцияОбработатьСобытие+К+1, Символы.Таб+ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(К));
		КонецЦикла;
			
	КонецЕсли;
	
	//записываем результат
	Попытка
		Файл.Записать(ПолноеИмяФайла);
		Успешно = Истина;
	Исключение
		_Ошибка = ОписаниеОшибки();
		Предупреждение("Не удалось записать обновленный файл модуля объекта ПМ: " + _Ошибка);
	КонецПопытки;
			
	Возврат Успешно;
	
КонецФункции

Процедура ЗаписатьКод(ПерезаписыватьФайл)
	
	//проверим отсутствие атрибута файла "Только чтение"
	Файл = Новый Файл(ПутьПодключаемогоМодуля);
	Если Файл.ПолучитьТолькоЧтение() Тогда
		Предупреждение("Невозможно выполнить сохранение подключаемого модуля (у ПМ установлен атрибут ""Только чтение"").");
		Файл = Неопределено;
		Возврат;	
	КонецЕсли;
	
	//переспрашиваем пользователя, уверен ли он
	Ответ = Вопрос("Вы действительно хотите сохранить код в " + ?(ПерезаписыватьФайл,"текущий ПМ","копию ПМ") + "?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Сохранить код ...");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//проверяем на ошибки при выполнении
	УспешноеВыполнение = Ложь;
	Попытка	
		УспешноеВыполнение = ВыполнитьКод(Ложь);	
	Исключение
	КонецПопытки;
	Если Не УспешноеВыполнение Тогда
		ЭлементыФормы.Комментарий.Очистить();
		ЭлементыФормы.Комментарий.ДобавитьСтроку("При выполнении кода обнаружены ошибки! Сохранение невозможно.");
		Возврат;
	КонецЕсли;
			
	//проверяем, что в первой строке Если, а в последней КонецЕсли
	ПерваяСтрокаКорректна = ( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(1),"Если ")=0 ) 
							или 
							( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(1),"если ")=0 );
	ВтораяСтрокаКорректна = ( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(ЭлементыФормы.КодСобытияПМ.КоличествоСтрок()),"КонецЕсли;")=0 ) 
							или 
							( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(ЭлементыФормы.КодСобытияПМ.КоличествоСтрок()),"конецесли;")=0 )
							или
							( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(ЭлементыФормы.КодСобытияПМ.КоличествоСтрок()),"Конецесли;")=0 ) 
							или 
							( Не Найти(ЭлементыФормы.КодСобытияПМ.ПолучитьСтроку(ЭлементыФормы.КодСобытияПМ.КоличествоСтрок()),"конецЕсли;")=0 );
	Если Не ПерваяСтрокаКорректна или Не ВтораяСтрокаКорректна Тогда
		Предупреждение("Попытка записать некорректный код:" + Символы.ПС + " - первая строка должна с фразы ""Если"";" + Символы.ПС + " - вторая строка с фразы ""КонецЕсли"".");
		Возврат;
	КонецЕсли;
	
	//проверяем, можно ли записать (обновить) код в ПМ ---------------------------------------
	Если Не ЗначениеЗаполнено(ПозицияФункцияОбработатьСобытие) Тогда
		Предупреждение("Запись кода невозможна. Не определена функция-обработчик событий.");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(НачальнаяСтрока) и Не ЗначениеЗаполнено(КонечнаяСтрока) Тогда
		Предупреждение("Не удалось найти окончание обработчика собятия. Запись кода невозможна.");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НачальнаяСтрока) и Не ЗначениеЗаполнено(КонечнаяСтрока) Тогда
		Ответ = Вопрос("В ПМ не был найден обработчик отлаживаемого события. Добавить его?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Добавление обработчика события");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	//делаем бэкап ПМа ---------------------------------------
	Файл = Новый Файл(ПутьПодключаемогоМодуля);
	ИмяФайла 		= Файл.Имя;
	ПутьФайла 		= Файл.Путь;
	ПолноеИмяФайла  = Файл.ПолноеИмя;
	КаталогРезервнойКопии = ПутьФайла + "BackUp_ПМ " + СтрЗаменить(Строка(ТекущаяДата()),":",".");
	Файл = Неопределено;
	Попытка
		СоздатьКаталог(КаталогРезервнойКопии);
	Исключение
		_Ошибка = ОписаниеОшибки();
	    Предупреждение("Не удалось создать каталог резервной копии по причине: " + _Ошибка);
		Возврат;
	КонецПопытки;	
	Попытка
		КопироватьФайл(ПолноеИмяФайла, КаталогРезервнойКопии+"\"+ИмяФайла);
	Исключение
		_Ошибка = ОписаниеОшибки();
	    Предупреждение("Не удалось сделать резервную копию по причине: " + _Ошибка);
		Возврат;
	КонецПопытки;
	
	//понимаем куда сохранять ---------------------------------------
	Если ПерезаписыватьФайл Тогда
		ПолноеИмяФайла  = ПутьПодключаемогоМодуля;
		ПерезаписыватьФайл = Истина;
	ИначеЕсли Не ПерезаписыватьФайл Тогда
		Файл = Новый Файл(ПутьПодключаемогоМодуля);
		ИмяФайла 	= Файл.Имя;
		ПутьФайла 	= Файл.Путь;
		Файл = Неопределено;
		ПолноеИмяФайла = ПутьФайла + "копия_" + ИмяФайла;
	КонецЕсли;
		
	//обновляем код в модуле объекта ---------------------------------------
	УспешноОбновленКод = Ложь;
	УспешноОбновленКод = ОбновитьКодМодуляОбъекта();
	Если Не УспешноОбновленКод Тогда
		Предупреждение("Не удалось обновить код модуля объекта подключаемого модуля");
		Возврат;
	КонецЕсли;
	
	//собираем обновленный ПМ ---------------------------------------
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		УспешноСобранПМ = Ложь;
		УспешноСобранПМ = СобратьОбработку("KonturEDI_AM", ПолноеИмяФайла);
	КонецЕсли;
	Если УспешноСобранПМ Тогда
		Предупреждение("Сборка ПМ прошла успешно!");	
	Иначе
		Предупреждение("Не удалось собрать ПМ с внесенными изменениями.");
	КонецЕсли;

	//перечитываем
	Если УспешноОбновленКод и УспешноСобранПМ Тогда
		ПутьКаталогаКонтейнераПМ = РаспаковатьОбработку(ПутьПодключаемогоМодуля, "KonturEDI_AM");
		Если ПерезаписыватьФайл Тогда
			ЗаполнитьТекстСобытия();
			ЭтотОбъект.ОсновнойМодуль.ИнициализироватьВнешнийПодключаемыйМодуль();
		КонецЕсли;
	КонецЕсли;
	
	//очистим каталог для распаковки
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов() + "unpack\");
	
КонецПроцедуры


//windows --------------------------------------------------------------

Процедура ВыполнитьКомандуСистемы(Команда, ТекущийКаталог)
	
	Попытка
		WSH = Новый COMОбъект("Wscript.Shell");
		WindowStyle = 0;
		bWaitOnReturn = 1;
		WSH.Run(ТекущийКаталог + Команда, WindowStyle, bWaitOnReturn);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

ЗначениеПоляДоПеретаскивания = "";
СписокРазвернутыхТипов = Новый СписокЗначений;

ПозицияФункцияОбработатьСобытие = 0;
НачальнаяСтрока 				= 0;
КонечнаяСтрока 					= 0;
