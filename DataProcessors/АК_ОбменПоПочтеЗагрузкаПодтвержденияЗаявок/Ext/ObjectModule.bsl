Процедура ПолучитьПочтуПоЗаявкам() Экспорт 
	Попытка
		//ЗаписьЖурналаРегистрации("ЗапуститьОбмен");//Для тестирования
		ЗапуститьОбмен();
	Исключение
		//ЗаписьЖурналаРегистрации(ОписаниеОшибки());//Для тестирования
		//+++АК mika 2018.03.05 ИП-00018068 Контроль работы системы
		ЗаписьЖурналаРегистрации("Акцепт.ОшибкаЧтенияПочты", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		//---АК mika 
	КонецПопытки;
	Попытка
		//ЗаписьЖурналаРегистрации("ОтработатьПодтвержденияСервер");//Для тестирования
		ОтработатьПодтвержденияСервер();
	Исключение
		//ЗаписьЖурналаРегистрации(ОписаниеОшибки());//Для тестирования
		//+++АК mika 2018.03.05 ИП-00018068 Контроль работы системы
		ЗаписьЖурналаРегистрации("Акцепт.ОшибкаПодтвержденияДокументов", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		//---АК mika 
	КонецПопытки;
КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ЗапуститьОбмен() Экспорт
	
	БПР = Новый Структура();

	ПодключитьсяКПочте(БПР);

	Если БПР.Свойство("Почта") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПолучитьДатаПоследнегоПисьмаАкцепт(БПР);

	ПолучитьМассивЗаголовковПисем(БПР);
	
	Если БПР.МассивЗаголовковПисем.Количество() = 0 Тогда
		БПР.Почта.Отключиться();
		Возврат;
	КонецЕсли;

	ПолучитьМассивДанныхИзПисем(БПР);
	ОбработатьДанныеПисем(БПР);
	ЗаписатьДанныеПисемВРегистр(БПР);
	
КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ПолучитьДатаПоследнегоПисьмаАкцепт(БПР)
	
	ИсточникОбращения = Справочники.ИсточникиОбращений.ДатаПоследнегоПисьмаАкцепт;
	РегСведПараметрыРаботыССоцСетями = РегистрыСведений.ПараметрыРаботыССоцСетями;
	
	ДатаПоследнегоПисьмаАкцепт = РегСведПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(ИсточникОбращения, "ДатаПоследнегоПисьмаАкцепт");
	Если ТипЗнч(ДатаПоследнегоПисьмаАкцепт) <> Тип("Дата") Тогда
		ДатаПоследнегоПисьмаАкцепт = НачалоДня(ТекущаяДата()) - 864000; // Это - 60*60*24*10;
	КонецЕсли;
	
	БПР.Вставить("ДатаПоследнегоПисьмаАкцепт", ДатаПоследнегоПисьмаАкцепт);
	БПР.Вставить("РегСведПараметрыРаботыССоцСетями", РегСведПараметрыРаботыССоцСетями); 
	БПР.Вставить("ИсточникОбращения", ИсточникОбращения);
	
КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ПодключитьсяКПочте(БПР)
	
	АдресЭПОтправителя = "accept@izbenka.msk.ru";
	УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
		УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу("m@gmail.com");
		Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Почта 						= Новый ИнтернетПочта;
	Профиль 					= УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаЭлектроннойПочты);
	Профиль.Пользователь 		= АдресЭПОтправителя;
	Профиль.ПользовательSMTP 	= "vkusvill.333@gmail.com"; //АдресЭПОтправителя;
	Профиль.ПользовательIMAP 	= "vkusvill.333@gmail.com"; //АдресЭПОтправителя;
	Профиль.Пароль 				= "v352aa44";
	Профиль.ПарольSMTP 			= Профиль.Пароль;
	Профиль.ПарольIMAP 			= Профиль.Пароль;
	Профиль.ПортIMAP 			= 993;
	Профиль.ИспользоватьSSLIMAP = Истина;
	Профиль.АдресСервераIMAP 	= "imap.gmail.com";
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	 
	БПР.Вставить("Почта", Почта);
	
КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ПолучитьМассивЗаголовковПисем(БПР)
	
	ДатаПоследнегоПисьмаАкцепт = БПР.ДатаПоследнегоПисьмаАкцепт;
	
	МассивЗаголовковПисемВЯщике = БПР.Почта.ПолучитьЗаголовки();
	МассивЗаголовковПисем = Новый Массив();
	
	Для Каждого ЗаголовокПисьма Из МассивЗаголовковПисемВЯщике Цикл
		Если ЗаголовокПисьма.ДатаОтправления > ДатаПоследнегоПисьмаАкцепт Тогда
			МассивЗаголовковПисем.Добавить(ЗаголовокПисьма);
		КонецЕсли;
	КонецЦикла;
	
	БПР.Вставить("МассивЗаголовковПисем", МассивЗаголовковПисем);

КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ПолучитьМассивДанныхИзПисем(БПР)
	
	ДатаПоследнегоПисьмаАкцепт = БПР.ДатаПоследнегоПисьмаАкцепт; 
	
	мДанныеИзПисем = Новый Массив();
	
	ФорматированныйДокумент	= Новый ФорматированныйДокумент;
	КартинкиФорматДок = Новый Структура();

	Письма = БПР.Почта.Выбрать(Ложь, БПР.МассивЗаголовковПисем);
	
	// считываем записи с конца
	Инд = Письма.Количество();
	
	Пока Инд > 0 Цикл
		Инд = Инд - 1;
		
		Письмо = Письма[Инд];
		ДатаПисьма = Письмо.ДатаОтправления;
		
		Если ДатаПисьма <= ДатаПоследнегоПисьмаАкцепт Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекстПисьмаПростой = "";
		
		Для Каждого ТекстПисьма Из Письмо.Тексты Цикл
			
			Если ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
				ТекстПисьмаПростой = СокрЛП(ТекстПисьма.Текст);
				Прервать;
			КонецЕсли;
			
			Если ТекстПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
				ФорматированныйДокумент.УстановитьHTML(ТекстПисьма.Текст, КартинкиФорматДок);
				ТекстПисьмаПростой = СокрЛП(ФорматированныйДокумент.ПолучитьТекст());
				Прервать;
			КонецЕсли;
			
		КонецЦикла;  
		
		Если Не ЗначениеЗаполнено(ТекстПисьмаПростой) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Новый Структура
			(
				"ДатаПисьма, ИдентификаторСообщения, email, ТекстПисьмаПростой, Тема",
				ДатаПисьма,
				Письмо.ИдентификаторСообщения,
				Письмо.Отправитель.Адрес,	
			    ТекстПисьмаПростой,
				Письмо.Тема
			);
			
		мДанныеИзПисем.Добавить(Запись);
		
	КонецЦикла;	
	
	БПР.Вставить("мДанныеИзПисем", мДанныеИзПисем);
	
	БПР.Почта.Отключиться();
КонецПроцедуры

//+++АК sole 2018.09.27 ИП-00019785.02
Процедура ОбработатьДанныеПисем(БПР)
	Для Каждого Элем Из БПР.мДанныеИзПисем Цикл
		
		Текст = Элем.ТекстПисьмаПростой;
		НачалоКомментария = Найти(Текст, "{");
		
		Если НачалоКомментария > 0 Тогда
			СлужебныйЗаголовокТекст = Лев(Текст, НачалоКомментария - 1);
		Иначе
			СлужебныйЗаголовокТекст = Текст;
		КонецЕсли;
		
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст,Символ(10), " ");  //+++АК LAGP 2018.10.15 ИП-00020142 В этом месте была ошибка, вместо " ", знак удалялся совсем.
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст,Символ(13), " ");
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст, Символы.ПС, " ");
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст, Символы.ВК, " ");
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст, "¶", " "); //+++АК LAGP 2018.10.18 ИП-00020142 Подозрение что этот символ сбивает загрузку, видел в строке регистра сведений в примечании.	
		СлужебныйЗаголовокТекст = СтрЗаменить(СлужебныйЗаголовокТекст, "  ", " ");
		
		ПарсерТекста = АК_Инструменты.ПолучитьПарсерТекста(СлужебныйЗаголовокТекст, " ");
		
		ОсталосьПараметров = 4;
		
		ПредБлок = "";
		
		Пока Не ПарсерТекста.КонецТекста И ОсталосьПараметров > 0 Цикл
			
			ТекущийБлок = АК_Инструменты.ПолучитьСледующийБлокТекста(ПарсерТекста);
			
			Пока Истина Цикл
					
				Если ПредБлок = "GUID" Тогда
					
					Элем.Вставить("ID", ТекущийБлок);
					ОсталосьПараметров = ОсталосьПараметров - 1;	
					Прервать;
					
				КонецЕсли;
				
				Если ПредБлок = "ID_MESSAGE" Тогда
					
					Элем.Вставить("GUID_Загрузки", ТекущийБлок);
					ОсталосьПараметров = ОсталосьПараметров - 1;	
					Прервать;
					
				КонецЕсли;
				
				Если ПредБлок = "TYPE_MESSAGE" Тогда
					
					Попытка
						Элем.Вставить("ТипЗаявки", Число(ТекущийБлок));
					Исключение
						Элем.Вставить("ТипЗаявки", -1 );
					КонецПопытки;
					
					ОсталосьПараметров = ОсталосьПараметров - 1;	
					Прервать;
					
				КонецЕсли;
				
				Если Найти(ТекущийБлок, "Акцептировано") > 0 Тогда
					
					Элем.Вставить("Акцептировано", Истина);
					Элем.Вставить("Отклонено", Ложь);
					ОсталосьПараметров = ОсталосьПараметров - 1;
					Прервать;
					
				КонецЕсли;
				
				Если Найти(ТекущийБлок, "Отклонено") > 0 Тогда
					
					Элем.Вставить("Акцептировано", Ложь);
					Элем.Вставить("Отклонено", Истина);
					ОсталосьПараметров = ОсталосьПараметров - 1;
					Прервать;
					
				КонецЕсли;
				
				Прервать;
			КонецЦикла;
				
			ПредБлок = ТекущийБлок;
				
		КонецЦикла;
		
		Если НачалоКомментария = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		КонецКомментария = Найти(Текст, "}");
		
		Если КонецКомментария = 0 Или НачалоКомментария > КонецКомментария Тогда
			Продолжить;
		КонецЕсли; 
				
		Текст = СокрЛП
			(
				Сред
				(
					Текст, 
					НачалоКомментария + 1, 
					КонецКомментария - НачалоКомментария - 1
				)
			);
				
		Элем.Вставить("Комментарий");
		
	КонецЦикла;
		
КонецПроцедуры

//+++АК sole 2018.10.01 ИП-00019785.02
Процедура ЗаписатьДанныеПисемВРегистр(БПР)
	
	РегСведПараметрыРаботыССоцСетями = БПР.РегСведПараметрыРаботыССоцСетями;
	ИсточникОбращения = БПР.ИсточникОбращения;
	
	Для Каждого Элем Из БПР.мДанныеИзПисем Цикл
		
		Если Не Элем.Свойство("ТипЗаявки") Тогда
			Продолжить;
		КонецЕсли; 
		
		ТипЗаявки = Элем.ТипЗаявки;
		
		Если ТипЗаявки = -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Запись = РегистрыСведений.АкцептЗаявок.СоздатьМенеджерЗаписи();
			
			Запись.ДатаПолучения = Элем.ДатаПисьма;
			Запись.ДатаОтправки = Элем.ДатаПисьма;
			Запись.ИсточникОбращения = ИсточникОбращения;
			Запись.ИдентификаторСообщения = Элем.ИдентификаторСообщения;
			Запись.email = Элем.email;
			Запись.Примечание = Лев(Элем.Тема + " " + Элем.ТекстПисьмаПростой, 250);
			
			Если Элем.Свойство("ID") Тогда
				УИД = Новый УникальныйИдентификатор(Элем.ID);
			Иначе
				УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
		
			Пока Истина Цикл
				
				Если ТипЗаявки = 0 Тогда
					ОбъектСсылка = Документы.АК_ЗаявкаНаПеревозку.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 1 Тогда
					ОбъектСсылка = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;

				Если ТипЗаявки = 2 Тогда
					ОбъектСсылка = Документы.НачислениеПремииОфиснымРаботникам.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 3 Тогда
					ОбъектСсылка = Документы.НачислениеПремии.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 4 Тогда
					ОбъектСсылка = Документы.ПриказНаКомандировку.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 5 Тогда
					ОбъектСсылка = Неопределено; //СистемаУчетаСтопОплаты// Документы.ПриказНаКомандировку.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 6 Тогда
					ОбъектСсылка = Неопределено; //СистемаУчетаСтопОплаты// Документы.ПриказНаКомандировку.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 7 Тогда
					ОбъектСсылка = Документы.ЗаявкаНаРемонт.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 8 Тогда
					ОбъектСсылка = Документы.ЗаданиеТехнологаМагазинам.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 9 Тогда
					ОбъектСсылка = Документы.ИзменениеЗакупочныхЦен.ПолучитьСсылку(УИД);
					ЗаполнитьПримечаниеЗаписиАкцептаЗаявок(Запись, Элем.ТекстПисьмаПростой); //+++АК mika 2017.12.06 ИП-00016603.03
					Прервать;
				КонецЕсли;
				
				Если ТипЗаявки = 11 Тогда
					ОбъектСсылка = Документы.АК_ЗаявкаНаПеревозку.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				
				//+++АК sole 2018.10.02 ИП-00019785.02
				Если ТипЗаявки = 12 Тогда
					ОбъектСсылка = Документы.НачислениеВознагражденийПоДоговорамГПХ.ПолучитьСсылку(УИД);
					Запись.Примечание = Лев(ПолучитьСвойствоСтруктуры(Элем, "Комментарий", ""),250); 
					Прервать;
				КонецЕсли;
				//---АК sole 2018.10.02 ИП-00019785.02
				
				//++K&C 07.11.2018 VKUS-1
				Если ТипЗаявки = 13 Тогда 
					ОбъектСсылка 			= Документы.ЗаявкаНаКомпенсациюСпортаИМедицины.ПолучитьСсылку(УИД);
					Прервать;
				КонецЕсли;
				//--K&C 07.11.2018 VKUS-1
				
				ОбъектСсылка = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьСсылку(УИД);
				Прервать;
			КонецЦикла;
			
			Если Элем.Свойство("ID") Тогда
				Запись.ЗаявкаНаУслугиМатериалы = ОбъектСсылка;
			КонецЕсли;
			
			Запись.ТипЗаявки = ТипЗаявки;
			Запись.ИдентификаторЗаявки = ПолучитьСвойствоСтруктуры(Элем, "ID", ""); 
			Запись.Акцептировано = ПолучитьСвойствоСтруктуры(Элем, "Акцептировано", Ложь);
			Запись.Отклонено =  ПолучитьСвойствоСтруктуры(Элем, "Отклонено", Ложь);

			Запись.ДатаЗагрузкиСПочты = ТекущаяДата();
			Запись.GUID_Загрузки = ПолучитьСвойствоСтруктуры(Элем, "GUID_Загрузки","");
			Запись.Записать();
			
		Исключение
			
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
				ЗаписьЖурналаРегистрации("ОШИБКА-" + ОписаниеОшибки());
			#КонецЕсли
			Продолжить;
		КонецПопытки;
		
		РегСведПараметрыРаботыССоцСетями.УстановитьЗначениеПараметра(ИсточникОбращения, "ДатаПоследнегоПисьмаАкцепт", Элем.ДатаПисьма);		
		
	КонецЦикла;		
	
КонецПроцедуры

//+++АК sole 2018.10.01 ИП-00019785.02
Функция ПолучитьСвойствоСтруктуры(Стр, ИмяСвойства, ЗначениеПоУмолчанию)
	
	Перем Значение;
	
	Если Стр.Свойство(ИмяСвойства, Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
КонецФункции



//&НаСервере
Процедура ОтработатьПодтвержденияСервер() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцептЗаявок.GUID_Загрузки,
	|	АкцептЗаявок.ДатаПолучения КАК ДатаПолучения,
	|	АкцептЗаявок.GUID_Заявки,
	|	АкцептЗаявок.Отработано,
	|	АкцептЗаявок.Акцептировано,
	|	АкцептЗаявок.Отклонено,
	|	АкцептЗаявок.ИдентификаторЗаявки,
	|	АкцептЗаявок.ДатаОтправки,
	|	АкцептЗаявок.Акцептант,
	|	АкцептЗаявок.ЗаявкаНаУслугиМатериалы,
	|	АкцептЗаявок.ТипЗаявки,
	|	АкцептЗаявок.НеЗакрыватьАвтоматически,
	|	АкцептЗаявок.ПлюсОдинДень,
	|	АкцептЗаявок.ПлюсТриДня
	|ПОМЕСТИТЬ ЗаявкиОжидаютАкцепт
	|ИЗ
	|	РегистрСведений.АкцептЗаявок КАК АкцептЗаявок
	|ГДЕ
	|	АкцептЗаявок.ОтправленаНаАкцепт
	|	И НЕ АкцептЗаявок.Отработано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцептЗаявок.GUID_Загрузки,
	|	АкцептЗаявок.ДатаПолучения,
	|	АкцептЗаявок.GUID_Заявки,
	|	АкцептЗаявок.Отработано,
	|	АкцептЗаявок.Акцептировано,
	|	АкцептЗаявок.Отклонено,
	|	АкцептЗаявок.ИдентификаторЗаявки,
	|	АкцептЗаявок.ДатаОтправки,
	|	АкцептЗаявок.ИдентификаторСообщения,
	|	АкцептЗаявок.ТипЗаявки,
	|	АкцептЗаявок.НеЗакрыватьАвтоматически,
	|	АкцептЗаявок.ПлюсОдинДень,
		//АК БЕЛН 09.10.2017 ИП-00015602.02+
	|	(АкцептЗаявок.Примечание) КАК Примечание,
		//АК БЕЛН 09.10.2017 -
	|	АкцептЗаявок.ПлюсТриДня
	|ПОМЕСТИТЬ ЗаявкиПолученныеАкцепт
	|ИЗ
	|	РегистрСведений.АкцептЗаявок КАК АкцептЗаявок
	|ГДЕ
	|	НЕ АкцептЗаявок.ОтправленаНаАкцепт
	|	И НЕ АкцептЗаявок.Отработано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиОжидаютАкцепт.GUID_Загрузки,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.GUID_Заявки) КАК GUID_Заявки,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Отработано) КАК Отработано,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Акцептировано) КАК Акцептировано,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Отклонено) КАК Отклонено,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.ДатаОтправки) КАК ДатаОтправки,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.GUID_Загрузки) КАК GUID_Загрузки1,
	|	МИНИМУМ(ЗаявкиПолученныеАкцепт.ДатаПолучения) КАК ДатаПолучения1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Отработано) КАК Отработано1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Акцептировано) КАК Акцептировано1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Отклонено) КАК Отклонено1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.ИдентификаторЗаявки) КАК ИдентификаторЗаявки1,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.ЗаявкаНаУслугиМатериалы) КАК ЗаявкаНаУслугиМатериалы,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Акцептант) КАК Акцептант,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.ИдентификаторСообщения) КАК ИдентификаторСообщения,
		//АК БЕЛН 09.10.2017 ИП-00015602.02+
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Примечание) КАК Примечание,
		//АК БЕЛН 09.10.2017 -
	|	ЗаявкиПолученныеАкцепт.ТипЗаявки,
	|	ЗаявкиОжидаютАкцепт.НеЗакрыватьАвтоматически,
	|	ЗаявкиОжидаютАкцепт.ПлюсОдинДень,
	|	ЗаявкиОжидаютАкцепт.ПлюсТриДня,
	|	ЗаявкиПолученныеАкцепт.НеЗакрыватьАвтоматически КАК НеЗакрыватьАвтоматически1,
	|	ЗаявкиПолученныеАкцепт.ПлюсОдинДень КАК ПлюсОдинДень1,
	|	ЗаявкиПолученныеАкцепт.ПлюсТриДня КАК ПлюсТриДня1
	|ИЗ
	|	ЗаявкиОжидаютАкцепт КАК ЗаявкиОжидаютАкцепт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиПолученныеАкцепт КАК ЗаявкиПолученныеАкцепт
	|		ПО ЗаявкиОжидаютАкцепт.GUID_Загрузки = ЗаявкиПолученныеАкцепт.GUID_Загрузки
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиОжидаютАкцепт.GUID_Загрузки,
	|	ЗаявкиПолученныеАкцепт.ТипЗаявки,
	|	ЗаявкиОжидаютАкцепт.НеЗакрыватьАвтоматически,
	|	ЗаявкиОжидаютАкцепт.ПлюсОдинДень,
	|	ЗаявкиОжидаютАкцепт.ПлюсТриДня,
	|	ЗаявкиПолученныеАкцепт.НеЗакрыватьАвтоматически,
	|	ЗаявкиПолученныеАкцепт.ПлюсОдинДень,
	|	ЗаявкиПолученныеАкцепт.ПлюсТриДня
	//+++АК mika 2018.03.05 ИП-00018068 (Оптимизация)
	|   ИМЕЮЩИЕ
	|      НЕ МАКСИМУМ(ЗаявкиПолученныеАкцепт.GUID_Загрузки) ЕСТЬ NULL
	//---АК mika 
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолучения1";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//ЗаписьЖурналаРегистрации("Следующий");
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.GUID_Загрузки1) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектДляПодтверждения = "";
		
		Попытка
			ОбъектДляПодтверждения = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы;
		Исключение
		КонецПопытки;
		
		РезультатПроцесса = "";
		
		//+++АК LAGP 2018.10.15 ИП-00020142 Добавлена проверка на наличие Заказа, предположительно что система без этой проверки получает пустое значение и падает 
		
		Если ВыборкаДетальныеЗаписи.ТипЗаявки = 1 Тогда 
			
			//+++АК mika 2018.03.05 ИП-00018068 Дополнительный контроль заполненности ЗаявкаНаУслугиМатериалы
			//Несоответствующие типы заявок полностью блокируют с-му Акцепта (Требуется полный рефакторинг подсистемы!)
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//---АК mika 
				
				ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
				Попытка
					Для Каждого Стр Из ЗаявкаНаПодтвреждение.Услуги Цикл
						Если Стр.Акцептована Тогда
							Продолжить;
						КонецЕсли;
						Если Стр.Акцептант	= ВыборкаДетальныеЗаписи.Акцептант ИЛИ ЗаявкаНаПодтвреждение.Акцептант = ВыборкаДетальныеЗаписи.Акцептант Тогда
							Если УслугиАкцептованиеДоступноКлиент(Стр, ВыборкаДетальныеЗаписи.Акцептант) Тогда
								Стр.Акцептована 	= ВыборкаДетальныеЗаписи.Акцептировано1; //Истина;
								Стр.Акцептовал 		= ВыборкаДетальныеЗаписи.Акцептант;
								Стр.АкцептовалДата	= ТекущаяДата();
								Стр.АвтоАкцепт 		= Ложь;
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;
					
					ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
					РезультатПроцесса = "УДАЧА";
					Попытка
						ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
					Исключение
					КонецПопытки;
				Исключение
					ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
					РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
					Попытка
						ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
					Исключение
					КонецПопытки;
				КонецПопытки;
				
			//+++АК mika 2018.03.05 ИП-00018068 Дополнительный контроль заполненности ЗаявкаНаУслугиМатериалы
			//Несоответствующие типы заявок полностью блокируют с-му Акцепта (Требуется полный рефакторинг подсистемы!)
			Иначе
				
				//Может есть отчет на эти "УДАЧИ/НЕУДАЧИ"
				РезультатПроцесса = "НЕУДАЧА Неверно определен Тип заявки!!! 
				|Тип заявки: ТипЗаявки, Дата отправки: ДатаОтправки, Дата получения: ДатаПолучения
				|Примечание: ПримечаниеТекст
				|(детальная информация в регистре сведений АкцептЗаявок) ";
				
				РезультатПроцесса = СтрЗаменить(РезультатПроцесса, "ТипЗаявки", ВыборкаДетальныеЗаписи.ТипЗаявки);
				РезультатПроцесса = СтрЗаменить(РезультатПроцесса, "ДатаОтправки", ВыборкаДетальныеЗаписи.ДатаОтправки);
				РезультатПроцесса = СтрЗаменить(РезультатПроцесса, "ДатаПолучения", ВыборкаДетальныеЗаписи.ДатаПолучения1);
				РезультатПроцесса = СтрЗаменить(РезультатПроцесса, "ПримечаниеТекст", ВыборкаДетальныеЗаписи.Примечание);
				
				ЗаписьЖурналаРегистрации("Акцепт.ОшибкаОпределенияТипаЗаявки", УровеньЖурналаРегистрации.Ошибка,,,РезультатПроцесса);
				
			КонецЕсли;
            //---АК mika 
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 2 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//НачислениеПремииОфиснымРаботникам
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Утверждено = Истина;
			//ЗаявкаНаПодтвреждение.Утверждено = Ложь;
			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 3 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//ПриказНаКомандировку
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Утверждено = Истина;
			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 4 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//НачислениеПремии
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			//ЗаявкаНаПодтвреждение.Утверждено = Истина;
			ЗаявкаНаПодтвреждение.АК_Статус = Перечисления.АК_СтаусыПриказаНаКомандировку.Согласован;   
			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
				//+++ AK suvv 26.07.2018 ИП-00019056
				АдресПолучателя = "kadri@izbenka.msk.ru; buh37@vkusvill.ru; buhzp2@gmail.com";
				Акцептант = ВыборкаДетальныеЗаписи.Акцептант;
				Документы.ПриказНаКомандировку.ОтправитьПисьмо(ЗаявкаНаПодтвреждение.Ссылка, ЗаявкаНаПодтвреждение.АК_Статус, АдресПолучателя, Акцептант);
				//--- AK suvv
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				Попытка
					ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			КонецПопытки;
			
		//СистемаУчетаСтопОплаты
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЗаявки = 5 ИЛИ ВыборкаДетальныеЗаписи.ТипЗаявки = 6 Тогда
			Обработка = Обработки.СистемаУчетаСтопОплаты.Создать();
			Обработка.ОбработатьАвтоматическоеПодтверждениеСтопОплаты(ВыборкаДетальныеЗаписи);
				//АК БЕЛН 09.10.2017 ИП-00015602.02+
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЗаявки = 7 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			Если Найти(ВыборкаДетальныеЗаписи.Примечание,"(подтверждение+помощнику)")=0 И Найти(ВыборкаДетальныеЗаписи.Примечание,"(подтверждение помощнику)")=0 Тогда
				Если ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ЗаявкаНаПодтвреждение.ПодтвержденоИсполнителем = Истина;
					ЗаявкаНаПодтвреждение.ОтветПолучен=Истина;
				Иначе
					ЗаявкаНаПодтвреждение.ПодтвержденоИсполнителем = Ложь;
					ЗаявкаНаПодтвреждение.ОтветПолучен=Истина;
				КонецЕсли; 
			Иначе
				Если ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ЗаявкаНаПодтвреждение.ПодтвержденоПомощником = Перечисления.ПодтверждениеПомощником.ПодтвержденоПомощником;
				Иначе
					ЗаявкаНаПодтвреждение.ПодтвержденоПомощником = Перечисления.ПодтверждениеПомощником.ОтклоненоПомощником;
				КонецЕсли; 
			КонецЕсли; 
			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
				ИД=ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ИД;
				Если ЗначениеЗаполнено(ИД) И ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ADOСоединение = Новый COMОбъект("ADODB.Connection");
					ADOСоединение.ConnectionTimeOut = 0;
					ADOСоединение.CommandTimeOut    = 0;
					СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
					ADOСоединение.ConnectionString  = СтрПодкл;
					ADOСоединение.Open();
					СтрЗапрос = "UPDATE [M2].[dbo].[TemraSensorData_Notification_bot]
					|SET [repair_order_accepted] = 1
					|WHERE id = " + (ИД);
					rs1 = ADOСоединение.Execute(СтрЗапрос);
				
				КонецЕсли; 
					
				ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
			КонецПопытки;
		//АК БЕЛН 09.10.2017 ИП-00015602.02-			
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЗаявки = 8 Тогда
			Обработка = Обработки.СистемаУчетаЗаявкиТехногогаМагазина.Создать();
			Обработка.ОбработатьУчетаЗаявкиТехногогаМагазина(ВыборкаДетальныеЗаписи);		
		//mika Дата: 2017.09.27
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЗаявки = 9 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//ИзменениеЗакупочныхЦен
			Документы.ИзменениеЗакупочныхЦен.ОбработатьСогласованиеДокументаИзПисьма(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы, 
					Новый Структура("Согласовано, Отклонено, Примечание", ВыборкаДетальныеЗаписи.Акцептировано1, ВыборкаДетальныеЗаписи.Отклонено1, ВыборкаДетальныеЗаписи.Примечание));
		//mika
		//+++АК LAGP 2017.12.21 ИП-00017453 Смена статуса заявки на роуминг
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 0 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//+++АК sole 2018.08.01 ИП-00018320.06
			Документы.АК_ЗаявкаНаПеревозку.ОбработатьСогласованиеДокументаИзПисьма(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы, 
					Новый Структура("Согласовано, Отклонено", ВыборкаДетальныеЗаписи.Акцептировано1, ВыборкаДетальныеЗаписи.Отклонено1));
			//---АК sole 2018.08.01 ИП-00018320.06
		//---АК LAGP
		//+++AK GREK 05.08.2018 ИП-00019354
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 11 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
				Справочники.СтруктурныеЕдиницы.ОбработатьПодтверждениеПередачиИзПисьма(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы, 
					Новый Структура("Согласовано, Отклонено", ВыборкаДетальныеЗаписи.Акцептировано1, ВыборкаДетальныеЗаписи.Отклонено1));
		//+++АК sole 2018.10.02 ИП-00019785.02			
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 12 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			Документы.НачислениеВознагражденийПоДоговорамГПХ.ОбработатьСогласованиеДокументаИзПисьма
				(
					ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы, 
					Новый Структура
						(
							"Согласовано, Отклонено, Примечание", 
							ВыборкаДетальныеЗаписи.Акцептировано1, 
							ВыборкаДетальныеЗаписи.Отклонено1, 
							ВыборкаДетальныеЗаписи.Примечание
						)
					);
		//---АК sole 2018.10.02 ИП-00019785.02

		//---АК
		//++K&C 07.11.2018 VKUS-1		
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЗаявки = 13 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы) Тогда
			//Заявка на компенсацию спорта и медицины
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Акцептовано = ВыборкаДетальныеЗаписи.Акцептировано1;
			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "УДАЧА";
				Попытка
					//ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				Попытка
					//ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
				Исключение
				КонецПопытки;
			КонецПопытки;
		//--K&C 07.11.2018 VKUS-1	
		КонецЕсли;
		
		НаборЗаписей 					= РегистрыСведений.АкцептЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(ВыборкаДетальныеЗаписи.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Запись ИЗ НаборЗаписей Цикл
			Запись.Отработано 			= Истина;
			//Запись.РезультатПроцесса 	= РезультатПроцесса;
			//Запись.ДатаПопыткиАкцепта 	= ТекущаяДата();
			
			Попытка
				Запись.РезультатПроцесса 	= РезультатПроцесса;
				Запись.ОбъектДляПодтверждения = ОбъектДляПодтверждения;
				Запись.ДатаПопыткиАкцепта 	= ТекущаяДата();
			Исключение
			КонецПопытки;

			
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		
	КонецЦикла;
	
КонецПроцедуры




Процедура ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-16");
	ЗаписатьXML(ЗаписьХМЛ, ЗаявкаНаПодтвреждение);
	ОбъектХМЛ = ЗаписьХМЛ.Закрыть();
	Параметры = Новый Массив;
	Параметры.Добавить(ЗначениеВСтрокуВнутр(ОбъектХМЛ));
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("УправлениеЭлектроннойПочтой.КонтрольАкцептРассылки", Параметры, Строка(Новый УникальныйИдентификатор), "ОС_ОТПАБОТКА_АКЦЕПТ");
КонецПроцедуры                                                            

/////////////////////////////////////////////////////////////
//СОСТАВ БЛОКА
//АкцептЗаявок
//ОбменПоПочтеЗагрузкаПодтвержденияЗаявок
//РегламентныеЗаданияСервер
//УправлениеЭлектроннойПочтой.ОтправитьЗаявкуНаПодтверждение

/////////////////////////////////////////////////////////////
//&НаСервере
Процедура ОтработатьПодтвержденияСерверТест() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцептЗаявок.GUID_Загрузки,
	|	АкцептЗаявок.ДатаПолучения КАК ДатаПолучения,
	|	АкцептЗаявок.GUID_Заявки,
	|	АкцептЗаявок.Отработано,
	|	АкцептЗаявок.Акцептировано,
	|	АкцептЗаявок.Отклонено,
	|	АкцептЗаявок.ИдентификаторЗаявки,
	|	АкцептЗаявок.ДатаОтправки,
	|	АкцептЗаявок.Акцептант,
	|	АкцептЗаявок.ЗаявкаНаУслугиМатериалы,
	|	АкцептЗаявок.ТипЗаявки
	|ПОМЕСТИТЬ ЗаявкиОжидаютАкцепт
	|ИЗ
	|	РегистрСведений.АкцептЗаявок КАК АкцептЗаявок
	|ГДЕ
	|	АкцептЗаявок.ОтправленаНаАкцепт
	|	И НЕ АкцептЗаявок.Отработано
	//|	И (АкцептЗаявок.ТипЗаявки = 1
	//|			ИЛИ АкцептЗаявок.ТипЗаявки = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцептЗаявок.GUID_Загрузки,
	|	АкцептЗаявок.ДатаПолучения,
	|	АкцептЗаявок.GUID_Заявки,
	|	АкцептЗаявок.Отработано,
	|	АкцептЗаявок.Акцептировано,
	|	АкцептЗаявок.Отклонено,
	|	АкцептЗаявок.ИдентификаторЗаявки,
	|	АкцептЗаявок.ДатаОтправки,
	|	АкцептЗаявок.ИдентификаторСообщения,
	|	АкцептЗаявок.ТипЗаявки
	|ПОМЕСТИТЬ ЗаявкиПолученныеАкцепт
	|ИЗ
	|	РегистрСведений.АкцептЗаявок КАК АкцептЗаявок
	|ГДЕ
	|	НЕ АкцептЗаявок.ОтправленаНаАкцепт
	|	И НЕ АкцептЗаявок.Отработано
	//|	И (АкцептЗаявок.ТипЗаявки = 1
	//|			ИЛИ АкцептЗаявок.ТипЗаявки = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиОжидаютАкцепт.GUID_Загрузки,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.GUID_Заявки) КАК GUID_Заявки,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Отработано) КАК Отработано,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Акцептировано) КАК Акцептировано,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Отклонено) КАК Отклонено,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.ДатаОтправки) КАК ДатаОтправки,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.GUID_Загрузки) КАК GUID_Загрузки1,
	|	МИНИМУМ(ЗаявкиПолученныеАкцепт.ДатаПолучения) КАК ДатаПолучения1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Отработано) КАК Отработано1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Акцептировано) КАК Акцептировано1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.Отклонено) КАК Отклонено1,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.ИдентификаторЗаявки) КАК ИдентификаторЗаявки1,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.ЗаявкаНаУслугиМатериалы) КАК ЗаявкаНаУслугиМатериалы,
	|	МАКСИМУМ(ЗаявкиОжидаютАкцепт.Акцептант) КАК Акцептант,
	|	МАКСИМУМ(ЗаявкиПолученныеАкцепт.ИдентификаторСообщения) КАК ИдентификаторСообщения,
	|	ЗаявкиПолученныеАкцепт.ТипЗаявки
	|ИЗ
	|	ЗаявкиОжидаютАкцепт КАК ЗаявкиОжидаютАкцепт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиПолученныеАкцепт КАК ЗаявкиПолученныеАкцепт
	|		ПО ЗаявкиОжидаютАкцепт.GUID_Загрузки = ЗаявкиПолученныеАкцепт.GUID_Загрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиОжидаютАкцепт.GUID_Загрузки,
	|	ЗаявкиПолученныеАкцепт.ТипЗаявки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолучения1";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//ЗаписьЖурналаРегистрации("Следующий");
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.GUID_Загрузки1) Тогда
			Сообщить("Пропуск");
			Сообщить(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы);
			Сообщить(ВыборкаДетальныеЗаписи.ТипЗаявки);
			Продолжить;
		КонецЕсли;
		
		Сообщить(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы);
		Сообщить(ВыборкаДетальныеЗаписи.ТипЗаявки);
		
		РезультатПроцесса = "";
		ОбъектДляПодтверждения = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы;
		
		Если ВыборкаДетальныеЗаписи.ТипЗаявки = 1 ИЛИ ВыборкаДетальныеЗаписи.ТипЗаявки = 0 Тогда 
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			
			Для Каждого Стр Из ЗаявкаНаПодтвреждение.Услуги Цикл
				Если Стр.Акцептована Тогда
					Продолжить;
				КонецЕсли;
				Если Стр.Акцептант	= ВыборкаДетальныеЗаписи.Акцептант ИЛИ ЗаявкаНаПодтвреждение.Акцептант = ВыборкаДетальныеЗаписи.Акцептант Тогда
					Если УслугиАкцептованиеДоступноКлиент(Стр, ВыборкаДетальныеЗаписи.Акцептант) Тогда
						Стр.Акцептована 	= ВыборкаДетальныеЗаписи.Акцептировано1; //Истина;
						Стр.Акцептовал 		= ВыборкаДетальныеЗаписи.Акцептант;
						Стр.АкцептовалДата	= ТекущаяДата();
						Стр.АвтоАкцепт 		= Ложь;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Попытка
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				//РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
			КонецПопытки;
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 2 Тогда
			//НачислениеПремииОфиснымРаботникам
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Утверждено = Истина;
			//ЗаявкаНаПодтвреждение.Утверждено = Ложь;
			Попытка
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
			Исключение
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
			КонецПопытки;
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 3 Тогда
			//ПриказНаКомандировку
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Утверждено = Истина;
			Попытка
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
			Исключение
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
			КонецПопытки;
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 4 Тогда
			//НачислениеПремии
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			ЗаявкаНаПодтвреждение.Утверждено = Истина;
			Попытка
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
			Исключение
				//ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
			КонецПопытки;
			
		//СистемаУчетаСтопОплаты
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 5 ИЛИ ВыборкаДетальныеЗаписи.ТипЗаявки = 6 Тогда
			//Обработка = Обработки.СистемаУчетаСтопОплаты.Создать();
			//Обработка.ОбработатьАвтоматическоеПодтверждениеСтопОплаты(ВыборкаДетальныеЗаписи);
			ОбъектДляПодтверждения = "ОбработатьАвтоматическоеПодтверждениеСтопОплаты";
			
			
			
		//mika Дата: 2017.09.27
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 9 Тогда
			//ИзменениеЗакупочныхЦен
			//Документы.ИзменениеЗакупочныхЦен.ОбработатьСогласованиеДокументаИзПисьма(ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы, 
					//Новый Структура("Согласовано, Отклонено", ВыборкаДетальныеЗаписи.Акцептировано1, ВыборкаДетальныеЗаписи.Отклонено1));
		//mika
		
		//АК БЕЛН 09.10.2017 ИП-00015602.02+
		ИначеЕсли  ВыборкаДетальныеЗаписи.ТипЗаявки = 7 Тогда
			ЗаявкаНаПодтвреждение = ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ПолучитьОбъект();
			Если Найти(ВыборкаДетальныеЗаписи.Примечание,"(подтверждение+помощнику)")=0 И Найти(ВыборкаДетальныеЗаписи.Примечание,"(подтверждение помощнику)")=0 Тогда
				Если ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ЗаявкаНаПодтвреждение.ПодтвержденоИсполнителем = Истина;
					ЗаявкаНаПодтвреждение.ОтветПолучен=Истина;
				Иначе
					ЗаявкаНаПодтвреждение.ПодтвержденоИсполнителем = Ложь;
					ЗаявкаНаПодтвреждение.ОтветПолучен=Истина;
				КонецЕсли; 
			Иначе
				Если ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ЗаявкаНаПодтвреждение.ПодтвержденоПомощником = Перечисления.ПодтверждениеПомощником.ПодтвержденоПомощником;
				Иначе
					ЗаявкаНаПодтвреждение.ПодтвержденоПомощником = Перечисления.ПодтверждениеПомощником.ОтклоненоПомощником;
				КонецЕсли; 
			КонецЕсли; 

			Попытка
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Проведение);
				РезультатПроцесса = "УДАЧА";
				ИД=ВыборкаДетальныеЗаписи.ЗаявкаНаУслугиМатериалы.ИД;
				Если ЗначениеЗаполнено(ИД) И ВыборкаДетальныеЗаписи.Акцептировано1=Истина Тогда
					ADOСоединение = Новый COMОбъект("ADODB.Connection");
					ADOСоединение.ConnectionTimeOut = 0;
					ADOСоединение.CommandTimeOut    = 0;
					СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
					ADOСоединение.ConnectionString  = СтрПодкл;
					ADOСоединение.Open();
					СтрЗапрос = "UPDATE [M2].[dbo].[TemraSensorData_Notification_bot]
					|SET [repair_order_accepted] = 1
					|WHERE id = " + (ИД);
					rs1 = ADOСоединение.Execute(СтрЗапрос);
				
				КонецЕсли; 
					
				ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
			Исключение
				ЗаявкаНаПодтвреждение.Записать(РежимЗаписиДокумента.Запись);
				РезультатПроцесса = "НЕУДАЧА " + ОписаниеОшибки();
				ОтправитьПисьмоАналитику(ЗаявкаНаПодтвреждение, РезультатПроцесса);
			КонецПопытки;
		//АК БЕЛН 09.10.2017 ИП-00015602.02-
		
		КонецЕсли;
		
		НаборЗаписей 					= РегистрыСведений.АкцептЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(ВыборкаДетальныеЗаписи.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Запись ИЗ НаборЗаписей Цикл
			Запись.Отработано 			= Истина;
			Попытка
				Запись.РезультатПроцесса 	= РезультатПроцесса;
				Запись.ОбъектДляПодтверждения = ОбъектДляПодтверждения;
				Запись.ДатаПопыткиАкцепта 	= ТекущаяДата();
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		Сообщить(РезультатПроцесса);
		Сообщить(ОбъектДляПодтверждения);
		
		//НаборЗаписей.Записать();
		
		
	КонецЦикла;
	
КонецПроцедуры

//&НаКлиенте
Функция УслугиАкцептованиеДоступноКлиент(ДанныеСтроки, ТП)
	//ТП = ПолучитьТекущегоПользователя();
	//Если РасширенныеПрава ИЛИ ТП = Объект.Акцептант ИЛИ ДанныеСтроки.Акцептант = ТП Тогда
	//	
	Возврат Истина;
	//	
	//Иначе
	//	Если ЗначениеЗаполнено(ТП)
	//		И НЕ Объект.Акцептант = ТП Тогда
	//		Если ПользовательВВеткеАкцептанта(ТП,Объект.Акцептант) Тогда
	//			Возврат Истина;
	//		Иначе	
	//			Сообщить("Для заявки выбран другой акцептант. Он и должен акцептовать");
	//			Возврат Ложь;
	//		КонецЕсли;
	//
	//	
	//ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Акцептант)
	//		И НЕ ДанныеСтроки.Акцептант = ТП Тогда
	//		Если ПользовательВВеткеАкцептанта(ТП,ДанныеСтроки.Акцептант) Тогда
	//			Возврат Истина;
	//		Иначе	
	//			Сообщить("Для точки " + ДанныеСтроки.СтруктурнаяЕдиница + " выбран другой акцептант. Он и должен акцептовать");
	//			Возврат Ложь;
	//		КонецЕсли;
	//Иначе // Проверка по схеме, но её пока нет
	//	
	//	Возврат Ложь;
	//	
	//КонецЕсли;
	
КонецФункции

//&НаКлиенте
Функция ПроверкаЛимитовАвансовУспешна(Объект_, ТП)
	//Возврат Истина;
	//ТП = ПараметрыСеанса.ТекущийПользователь;
	Попытка  // пока в режиме отладки
		ТабОстатковЛимитов = АК_КонтрольЗадолженности.ПолучитьТаблицуОстатковЛимитовАкцептантов();
		СтрокаТекущегоАкцептанта = ТабОстатковЛимитов.Найти(ТП,"Акцептант");
		Если СтрокаТекущегоАкцептанта = Неопределено Тогда
			ОстатокЛимитаПоАвансамАкцептанта = 0;
		Иначе
			ОстатокЛимитаПоАвансамАкцептанта = СтрокаТекущегоАкцептанта.ОстатокЛимита;
		КонецЕсли;	
	Исключение
		ОстатокЛимитаПоАвансамАкцептанта = 0;
	КонецПопытки;	
	АвансыОплат = Объект_.Оплата.НайтиСтроки(Новый Структура("Аванс",Истина));
	Если АвансыОплат.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СуммаАвансов = 0;
	Для Каждого Аванс Из АвансыОплат Цикл
		СуммаАвансов = СуммаАвансов + Аванс.СуммаОплаты;
	КонецЦикла;	
	СуммаПоступленийПоДокументу = СуммаПоступленийПоДокументу(Объект_);
	
	Если СуммаПоступленийПоДокументу>СуммаАвансов Тогда
		Возврат Истина;
	КонецЕсли;	
	ТабРаспределения = ПолучитьТабРаспределенияАвансовПоАкцептантам(Объект_);
	
	СтрокиТП = ТабРаспределения.НайтиСтроки(Новый Структура("Акцептант",ТП));
	СуммаВЭтомДокументе = 0;
	Для Каждого СтрокаТП ИЗ СтрокиТП Цикл
		СуммаВЭтомДокументе = СуммаВЭтомДокументе + СтрокаТП.Сумма;
	КонецЦикла;	
	ОстатокСУчетомСтроки = ОстатокЛимитаПоАвансамАкцептанта - СуммаВЭтомДокументе;
	Если ОстатокСУчетомСтроки < 0 Тогда
		Сообщить("Внимание! Превышена сумма установленных Вам лимитов авансов на "+(-ОстатокСУчетомСтроки),СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;
КонецФункции	

//&НаСервере
Функция ПолучитьТабРаспределенияАвансовПоАкцептантам(Объект_)
	//	Док = РеквизитФормыВЗначение("Объект_");
	//	Возврат Док.ПолучитьТабРаспределенияАвансовПоАкцептантам();
	//КонецФункции	
	
	//Функция ПолучитьТабРаспределенияАвансовПоАкцептантам() Экспорт
	СтрокиАванса = Объект_.Оплата.Выгрузить(Новый Структура("Аванс",Истина));
	СуммаАванса = СтрокиАванса.Итог("СуммаОплаты");
	ТабРезультата = Новый ТаблицаЗначений;
	ТабРезультата.Колонки.Добавить("Акцептант");
	ТабРезультата.Колонки.Добавить("Сумма");
	//ТабРезультата.Колонки.Добавить("Акцептовано");
	Если СуммаАванса = 0 Тогда
		Возврат ТабРезультата;
	КонецЕсли;	
	
	Для Каждого СтрокаУслуг Из Объект_.Услуги Цикл
		
		НС=ТабРезультата.Добавить();
		Если ЗначениеЗаполнено(СтрокаУслуг.Акцептовал) Тогда
			НС.Акцептант = СтрокаУслуг.Акцептовал;
		КонецЕсли;	
		НС.Сумма = СтрокаУслуг.Сумма;
		//КонецЕсли;	
	КонецЦикла;	
	
	ТабРезультата.Свернуть("Акцептант","Сумма");
	ИтогПоБазе = ТабРезультата.Итог("Сумма");
	Если ИтогПоБазе = 0 Тогда 
		Возврат ТабРезультата;
	КонецЕсли;	
	Для Каждого СтрокаРезультата Из ТабРезультата Цикл
		СтрокаРезультата.Сумма = СуммаАванса * СтрокаРезультата.Сумма / ИтогПоБазе;
	КонецЦикла;	
	ТабРезультата[0].Сумма = ТабРезультата[0].Сумма + СуммаАванса - ТабРезультата.Итог("Сумма");
	
	Возврат ТабРезультата;
КонецФункции

Функция СуммаПоступленийПоДокументу(Объект_)
	Запрос = Новый Запрос;
	СписокТиповРолей = Новый Массив;
	СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Запрос.УстановитьПараметр("ТипыРолей", СписокТиповРолей);
	Запрос.УстановитьПараметр("Платёжки", Объект_.Оплата.Выгрузить().ВыгрузитьКолонку("РасходИзБанка"));
	Запрос.УстановитьПараметр("Заявка", Объект_.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//+++АК SUVV 2018.02.28 ИП-00017941
	Запрос.УстановитьПараметр("ВыбДата", Объект_.Дата);
	//---АК SUVV
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Объект КАК Точка,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК Роль,
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизЛицо,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользователиРуководители.Ссылка КАК РуководительПользователя
	|ПОМЕСТИТЬ НазначенноеВРегистре
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			,
	|			Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	|				И ТипРоли В (&ТипыРолей)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиРуководители
	|				ПО Пользователи.ФизЛицо.Руководитель = ПользователиРуководители.ФизЛицо
	|					И (Пользователи.ФизЛицо.Руководитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	НазначенноеВРегистре.ТипРоли,
	|	НазначенноеВРегистре.Роль,
	|	НазначенноеВРегистре.ФизЛицо,
	|	НазначенноеВРегистре.Пользователь,
	|	НазначенноеВРегистре.РуководительПользователя
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	ТипыРолейПользователя.Ссылка,
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	Пользователи.Ссылка,
	|	NULL
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО НазначенноеВРегистре.Роль.Родитель = РолиПользователейСоставРоли.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО (ТипыРолейПользователя.Код = ""UpravlyayushchiiPoRoznice"")
	|ГДЕ
	|	НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	|   ИЛИ НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)
	//--- AK suvv
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Руководитель,
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Руководитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиСПравомАкцептаОплат.Пользователь КАК Акцептант,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо КАК ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь КАК Родитель,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь КАК Дед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь КАК Прадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрапрадед
	|ИЗ
	|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	|ГДЕ
	|	ПользователиСПравомАкцептаОплат.Активен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиСПравомАкцептаОплат.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СтатьяДДС,
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеТребоватьЗаполненияСчетовНаОплату,
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеКонтролироватьПлатёжныйДень
	|ИЗ
	|	РегистрСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы КАК ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы
	|ГДЕ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.Документ = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.Ссылка,
	|	РасходИзБанка.Оплачено,
	|	РасходИзБанка.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Ссылка В(&Платёжки)
	|	И РасходИзБанка.Проведен
	|	И РасходИзБанка.Оплачено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиСПравомАкцептаОплат.ЛимитПоАвансам - ЕСТЬNULL(ВложенныйЗапрос.ВыбраноЛимитаПоАвансамАкцептанта, 0) КАК ОстатокЛимитаПоАвансамАкцептанта
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(АвансыПоАкцептантамОстатки.СуммаОстаток) КАК ВыбраноЛимитаПоАвансамАкцептанта
	|	ИЗ
	|		РегистрНакопления.АвансыПоАкцептантам.Остатки(
	|				,
	|				Акцептант = &ТекущийПользователь
	|					И Заявка <> &Заявка) КАК АвансыПоАкцептантамОстатки) КАК ВложенныйЗапрос,
	|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	|ГДЕ
	|	ПользователиСПравомАкцептаОплат.Пользователь = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоставкаНаТТ.Ссылка,
	|	ДоставкаНаТТ.Дата,
	|	ДоставкаНаТТ.СуммаДокумента
	|ИЗ
	|	Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
	|ГДЕ
	|	ДоставкаНаТТ.Проведен
	|	И ДоставкаНаТТ.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Дата,
	|	МаршрутныйЛист.Сумма + ВЫБОР
	|		КОГДА МаршрутныйЛист.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА МаршрутныйЛист.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Проведен
	|	И МаршрутныйЛист.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеТранспортныеРасходы.Ссылка,
	|	ОбщиеТранспортныеРасходы.Дата,
	|	ОбщиеТранспортныеРасходы.Сумма + ВЫБОР
	|		КОГДА ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА ОбщиеТранспортныеРасходы.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
	|ГДЕ
	|	ОбщиеТранспортныеРасходы.Проведен
	|	И ОбщиеТранспортныеРасходы.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Проведен
	|	И ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств = &Заявка
	|;
	|
	//+++АК SUVV 2018.02.28 ИП-00017941
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствияСтатейСчетов.СтатьяДДС,
	//|	СоответствияСтатейСчетов.Счет,
	//|	СоответствияСтатейСчетов.ВидОперацииЗаявки КАК ВидОперации
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов";	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	СоответствияСтатейСчетовСрезПоследних.Счет,
	|	СоответствияСтатейСчетовСрезПоследних.ВидОперацииЗаявки КАК ВидОперации
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, ) КАК СоответствияСтатейСчетовСрезПоследних";
	//---АК SUVV
	
	Результат = Запрос.ВыполнитьПакет();
	
	СуммаПоступленийПоДокументу = 0;
	Выборка = Результат[8].Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПоступленийПоДокументу = СуммаПоступленийПоДокументу + Выборка.СуммаДокумента;
	КонецЦикла;
	
	Возврат СуммаПоступленийПоДокументу;
КонецФункции

// Процедура заполняет "Примечание" записи регистра АкцептЗаявок
//
// Параметры:
//  ТекущаяЗапись  - <Тип.РегистрСведенийМенеджерЗаписи.АкцептЗаявок> - Запись регистра
//  ТекстПисьма    - <Тип.Строка> - текст отправленного акцептантом письма
//
Процедура ЗаполнитьПримечаниеЗаписиАкцептаЗаявок(ТекущаяЗапись, ТекстПисьма) //+++АК mika 2017.12.06 ИП-00016603.03
	
	ТекущаяЗапись.Примечание = "";
	
	НачалоКомментария = Найти(ТекстПисьма, "{");
	КонецКомментария  = Найти(ТекстПисьма, "}");
	
	Если НачалоКомментария > 0 И КонецКомментария > 0 И КонецКомментария > НачалоКомментария Тогда
		ТекущаяЗапись.Примечание = СокрЛП(Лев(Сред(ТекстПисьма, НачалоКомментария + 1, КонецКомментария - НачалоКомментария - 1), 150));
	КонецЕсли;
	
КонецПроцедуры
