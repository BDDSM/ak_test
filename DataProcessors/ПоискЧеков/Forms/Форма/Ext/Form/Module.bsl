
&НаКлиенте
Процедура НайтиЧеки(Команда)
	
	Объект.ТаблицаЧеков.Очистить();
	Состояние("Идёт выборка данных. Ожидайте...");
	База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений();
	
КонецПроцедуры

// Выполянет запрос и резульатат запроса возвращает в таблицу значений
//
&НаСервере
Процедура База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(допПараметры = Неопределено)  
	
	Если ЗначениеЗаполнено(лкДатаНач)
		И НЕ ЗначениеЗаполнено(лкДата) Тогда
		лкДата = лкДатаНач;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(лкДата)
		И НЕ ЗначениеЗаполнено(лкДатаНач) Тогда
		лкДатаНач = лкДата;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(НомерЧека) Тогда
		Если лкДата = '00010101' Тогда 
			
			Сообщить("Не задана дата!");
			Возврат;
			
		КонецЕсли;
	//КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.id_TT,
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки > 0";
	
	ТабКешТТ = Запрос.Выполнить().Выгрузить();
	
	ДатаНач = Формат(НачалоДня(лкДатаНач), "ДФ='yyyy-dd-MM HH:mm:ss'");
	ДатаКон = Формат(КонецДня(лкДата), "ДФ='yyyy-dd-MM HH:mm:ss'");
	
	ТекстЗапроса = "select 
	|ch.CheckUID _IDRRef,
	|TT_telefon.id_tt id_tt, 
	|ch.BONUSCARD НомерКарты , 
	|ch.BaseSum  СуммаЧека , 
	|ch.SummBank  СуммаБезнал , 
	|ch.SummBonus  ОплатаБонус , 
	|ch.CloseDate лкДата,
	|rtrim(c.Фамилия) + ' ' + rtrim(c.FullName) ФИО,
	|ch.CashCheckNo номерЧека,
	|Cast(ch.CashId as nvarchar(50)) as НомерМеста,
	|Cast('' as nvarchar(50)) as НомерТерминала
	|
	|from sms_izbenka..Checks (nolock) ch
	|inner join SMS_IZBENKA..TT_telefon on TT_telefon.ShopNo=ch.ShopNo
	|
	|left join [Loyalty].[dbo].[DiscountCard] d on d.Number=ch.BONUSCARD
	|left join [Loyalty].[dbo].[Customer] c on d.CustomerUID=c.CustomerUID";
	Если ЗначениеЗаполнено(НомерЧека) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	where ch.CashCheckNo = " + ВнешниеДанные.ФорматПоля(НомерЧека);
		Если ЗначениеЗаполнено(лкДата) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				| and ch.CloseDate >= CONVERT(datetime, '"+ДатаНач+"')
				|and	ch.CloseDate  <= CONVERT(datetime, '"+ДатаКон+"') ";
		КонецЕсли;		
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		| where ch.CloseDate >= CONVERT(datetime, '"+ДатаНач+"')
		|and	ch.CloseDate  <= CONVERT(datetime, '"+ДатаКон+"') ";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТекстЗапроса = ТекстЗапроса + " and /**BPar1**/ TT_telefon.id_tt= "+ Формат(ТорговаяТочка.id_TT, "ЧГ=0") +"/**FPar**/ ";
	КонецЕсли;
	
	Если лкЧас <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + " and /**BPar2**/DATEPART(hour, ch.CloseDate )= "+ Формат(лкЧас,"ЧЦ=2; ЧН=00; ЧВН=") +"/**FPar**/ ";
	КонецЕсли;
	Если Сумма <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + " and /**BPar3**/ ch.BaseSum BETWEEN "+ ВнешниеДанные.ФорматПоля(Сумма - СуммаРазброс) + " and " + ВнешниеДанные.ФорматПоля(Сумма + СуммаРазброс) +" /**FPar**/ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерКарты) Тогда
		ТекстЗапроса = ТекстЗапроса + " and ch.BONUSCARD = '" + НомерКарты + "'";
	КонецЕсли;
	
	//+++АК MIND 2018.01.09 
	ТекстЗапроса = ТекстЗапроса + " and OperationType IN (1, 3, 201, 211, 202, 203)";
	Если ЗначениеЗаполнено(НомерРабочегоМеста) Тогда
		ТекстЗапроса = ТекстЗапроса + " and CAST(ch.CashId as nvarchar(50)) = " + ВнешниеДанные.ФорматПоля(НомерРабочегоМеста);
	КонецЕсли;	
	//---АК MIND 
	
	ТекстЗапроса = ТекстЗапроса + " order by ch.CloseDate; ";
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_Izbenka");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	тзРезультат.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	тзРезультат.Колонки.Добавить("Проект", Новый ОписаниеТипов("Строка"));
	
	Для каждого ТекСтрока Из тзРезультат Цикл
		
		СтрокаТабКеш = ТабКешТТ.Найти(ТекСтрока.id_tt, "id_TT");
		Если СтрокаТабКеш <> Неопределено Тогда
			ТекСтрока.ТорговаяТочка = СтрокаТабКеш.Ссылка;
		КонецЕсли;	
		ТекСтрока.Проект = "Избенка";
		
	КонецЦикла;	
	//тзРезультат.Сортировать("Дата Убыв");
	
	Объект.ТаблицаЧеков.Загрузить(тзРезультат);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT
			|	CAST(dbo_Checks.CheckUID as nvarchar(36)) as _IDRRef,
			|	dbo_Checks.BONUSCARD as НомерКарты,
			|	dbo_Checks.ShopNo,
			|	dbo_Checks.BaseSum as СуммаЧека,
			|	dbo_Checks.SummBonus as ОплатаБонус,
			|	dbo_Checks.SummBank as СуммаБезнал,
			|	dbo_Checks.CloseDate as лкДата,
			|	dbo_Checks.CashCheckNo as НомерЧека,
			|	DATEPART(HOUR, dbo_Checks.CloseDate) as Час,
			|	dbo_Customer.FullName as ФИО,
			|	Cast(dbo_Checks.CashId as nvarchar(50)) as НомерМеста,
			|	Cast(ISNULL(dbo_Checks.terminal_bank, '') as nvarchar(50)) as НомерТерминала
			|FROM
			|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
			|	LEFT OUTER JOIN Loyalty.dbo.Customer as dbo_Customer (nolock)
			|		ON dbo_Checks.BONUSCARD = dbo_Customer.Email
			|WHERE
			|	1 = 1
			|	" + ?(ЗначениеЗаполнено(лкДата), "and dbo_Checks.CloseDate BETWEEN " + ВнешниеДанные.ФорматПоля(НачалоДня(лкДатаНач)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(лкДата)), "") + "
			|	" + ?(ЗначениеЗаполнено(ТорговаяТочка), "and dbo_Checks.ShopNo = " + ВнешниеДанные.ФорматПоля(ТорговаяТочка.НомерТочки), "") + "
			|   " + ?(ЗначениеЗаполнено(НомерЧека), "and dbo_Checks.CashCheckNo = " + ВнешниеДанные.ФорматПоля(НомерЧека), "") + "
			|   " + ?(ЗначениеЗаполнено(лкЧас), "and DATEPART(HOUR, dbo_Checks.CloseDate) = " + ВнешниеДанные.ФорматПоля(лкЧас), "") + "
			|   " + ?(ЗначениеЗаполнено(Сумма), "and dbo_Checks.BaseSum between " + ВнешниеДанные.ФорматПоля(Сумма - СуммаРазброс) + " and " + ВнешниеДанные.ФорматПоля(Сумма + СуммаРазброс), "") + "
			|   " + ?(ЗначениеЗаполнено(НомерКарты), "and dbo_Checks.BONUSCARD = " + ВнешниеДанные.ФорматПоля(НомерКарты), "") + "
			|   " + ?(ЗначениеЗаполнено(НомерРабочегоМеста), "and CAST(dbo_Checks.Cashid as nvarchar(50)) = " + ВнешниеДанные.ФорматПоля(НомерРабочегоМеста), "") + "
			|ORDER BY dbo_Checks.CloseDate";
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	dbo_Checks.CheckUID КАК _IDRRef,
	//|	dbo_Checks.BONUSCARD КАК НомерКарты,
	//|	dbo_Checks.BaseSum КАК СуммаЧека,
	//|	dbo_Checks.SummBonus КАК ОплатаБонус,
	//|	dbo_Checks.SummBank КАК СуммаБезнал,
	//|	dbo_Checks.CloseDate КАК лкДата,
	//|	dbo_Checks.CashCheckNo КАК НомерЧека,
	//|	ЧАС(dbo_Checks.CloseDate) КАК Час
	//|ИЗ
	//|	ВнешнийИсточникДанных.SMS_Union.Таблица.dbo_Checks КАК dbo_Checks
	//|ГДЕ ИСТИНА"
	//+ ?(ЗначениеЗаполнено(НомерЧека), " И dbo_Checks.CashCheckNo = &НомерЧека ", " ")
	//+ ?(ЗначениеЗаполнено(лкДата), " И dbo_Checks.CloseDate МЕЖДУ &ДатаНачала И &ДатаОкончания ", " ")
	//+?(ЗначениеЗаполнено(ТорговаяТочка), " И dbo_Checks.ShopNo = &НомерТТ "," ")
	//+?(лкЧас <> 0, " И ЧАС(dbo_Checks.CloseDate) = &лкЧас "," ")
	//+?(Сумма <> 0, " И dbo_Checks.BaseSum = &BaseSum "," ") 
	//+" УПОРЯДОЧИТЬ ПО лкДата";
	//
	//Запрос.УстановитьПараметр("BaseSum", Сумма);
	//Запрос.УстановитьПараметр("НомерЧека", НомерЧека);
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(лкДата));
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(лкДата));
	//Запрос.УстановитьПараметр("НомерТТ", ТорговаяТочка.НомерТочки);
	//Запрос.УстановитьПараметр("лкЧас", лкЧас);
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	ТЗ_Результат = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	
	Если ТЗ_Результат.Количество() > 1000 Тогда
		Сообщить("Результат отбора содержит большое количество чеков. Уточните поиск.");
		Возврат;
	КонецЕсли;	
	
	//СписокНомеров = Новый СписокЗначений();
	//СписокНомеров.ЗагрузитьЗначения(ТЗ_Результат.ВыгрузитьКолонку("НомерКарты"));
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Покупатели.FullName КАК ФИО,
	//	|	КартыПокупателей.Number КАК НомерКарты
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
	//	|		ПО КартыПокупателей.CustomerUID = Покупатели.CustomerUID
	//	|ГДЕ
	//	|	КартыПокупателей.Number В(&СписокНомеров)
	//	|	И КартыПокупателей.Number <> """"";

	//Запрос.УстановитьПараметр("СписокНомеров", СписокНомеров);

	//РезультатФИО = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтр Из ТЗ_Результат Цикл
		
		НоваяСтр = Объект.ТаблицаЧеков.Добавить();
		СтрокаТабКеш = ТабКешТТ.Найти(ТекСтр.ShopNo, "НомерТочки");
		Если СтрокаТабКеш <> Неопределено Тогда
			НоваяСтр.ТорговаяТочка = СтрокаТабКеш.Ссылка;
		КонецЕсли;
		НоваяСтр.НомерКарты  = ТекСтр.НомерКарты;
		НоваяСтр.СуммаЧека  = ТекСтр.СуммаЧека;
		НоваяСтр.СуммаБезнал  = ТекСтр.СуммаБезнал;
		НоваяСтр.ОплатаБонус  = ТекСтр.ОплатаБонус;
		НоваяСтр.лкДата  = ТекСтр.лкДата;
		НоваяСтр.НомерЧека  = ТекСтр.НомерЧека;
		
		НоваяСтр.ФИО  = ТекСтр.ФИО;
		НоваяСтр.Проект = "ВкусВилл";
		
		НоваяСтр._IDRRef  = ТекСтр._IDRRef;
		
		//+++АК MIND 2018.01.09 
		НоваяСтр.ЭтоВозврат = (НоваяСтр.СуммаЧека < 0);
		НоваяСтр.НомерМеста = ТекСтр.НомерМеста;
		НоваяСтр.НомерТерминала = ТекСтр.НомерТерминала;
		//---АК MIND 
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
			Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуЧеков(ТекАйди)
	
	Возврат Обработки.ОтчетыПоКартам.ФинОперациВыборНаСервере(ТекАйди);
	
КонецФункции	

&НаКлиенте
Процедура ТаблицаЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТабДок = ПолучитьРасшифровкуЧеков(" " + Объект.ТаблицаЧеков.НайтиПоИдентификатору(ВыбраннаяСтрока)._IDRRef + " ");
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыбранныйНаПочту(Команда)
	
	МассивЧеков = Новый Массив();
	Для Каждого СтрокаВыделенная Из Элементы.ТаблицаЧеков.ВыделенныеСтроки Цикл
		МассивЧеков.Добавить(Элементы.ТаблицаЧеков.ДанныеСтроки(СтрокаВыделенная)._IDRRef);
	КонецЦикла;	
	
	Если МассивЧеков.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано чеков к отправке");
		Возврат;
	ИначеЕсли МассивЧеков.Количество() > 20 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя отправлять за раз более 20 чеков");
		Возврат;	
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.ПоискЧеков.Форма.ФормаОтправкиЧекаНаПочту", Новый Структура("МассивЧеков", МассивЧеков));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	СуммаРазброс = Сумма * 0.1;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++АК MIND 2018.01.09 
	ТорговаяТочка = Параметры.ТорговаяТочка;
	лкДатаНач = Параметры.Дата;
	лкДата = Параметры.Дата;
	НомерРабочегоМеста = Параметры.НомерМеста;
	
	Если Параметры.Свойство("СформироватьПриОткрытии") Тогда
		База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений();
	КонецЕсли;	
	//---АК MIND 
	
КонецПроцедуры
