
&НаКлиенте
Процедура ДвиженияДенежныхСредств(Команда)
	
	//ПараметрыФормы = Новый Структура("КлючНазначенияИспользования", "Основной");
	//Форма = ПолучитьФорму("Отчет.ДвиженияДенежныхСредств_Магазины.Форма.ФормаОтчета", ПараметрыФормы);
	//
	//КомпоновщикНастроекКомпоновкиДанных = Форма.Отчет.КомпоновщикНастроек;
	//ПН = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;
	//
	//ЭлементОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	//Элемент = ПН.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
	//Элемент.Значение = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	//Элемент.Использование = Истина;
	//
	//Форма.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	//ОткрытьФорму(Форма,,, "ДвиженияДенСредств");
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуДвиженияДенСредств();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("ИмяВнешнейОбработки, СформироватьПриОткрытии", ИмяОбработки, Истина),, "КО_ДвиженияДенСредств");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма)")); 
	//---АК mika
	
КонецПроцедуры

&НаКлиенте
Процедура ПрепроводительнаяВедомость(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуПрепроводительнаяВедомость();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ПрепроводВедомость");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма)")); 
	//---АК mika
КонецПроцедуры

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("КассовыеОперации_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуДвиженияДенСредств()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ДвиженияДенежныхСредств_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуПрепроводительнаяВедомость()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПрепроводительнаяВедомость_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЖурналКассовыхОпераций(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ЖурналКассовыхОпераций");
	//ОткрытьФорму("ВнешнийИсточникД.КассовыеОперации.Форма.ФормаСписка");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РольДоступна("ПродавецТолькоПросмотр") Тогда
		Элементы.ПрепроводительнаяВедомость.Доступность = Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОпераций.code_operation,
	               |	ТипыОпераций.name_operation,
	               |	ТипыОпераций.Ссылка
	               |ИЗ
	               |	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	               |ГДЕ
	               |	ТипыОпераций.table_operation = &table_operation
	               |	И ТипыОпераций.field_operation = &field_operation";
				   
	Запрос.УстановитьПараметр("table_operation", "Cash_move");
	Запрос.УстановитьПараметр("field_operation", "operation_type");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаб = ТабОперации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		
	КонецЦикла;
	
	ОбновитьОстаткиПоКассам();
	
	ДатаНачДанныеПоМагазину = ТекущаяДата() - 86400 * 7;
	ДатаКонДанныеПоМагазину = ТекущаяДата();
	
	Таб = ТабДанныеПоМагазину.Выгрузить();
	Для н = 1 По Таб.Колонки.Количество() - 1 Цикл
		Элементы["ТабДанныеПоМагазинуКолонка" + н].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПередалиИнкассаторам(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 3));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПринялиОтИнкассаторов(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 4));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМинусКорректировкаДенег(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 5));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПлюсКорректировкаДенег(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 6));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПрочиеВыплатыИзКассы(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 7));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ЖурналКассовыхОпераций");
	Оповестить("ЗапросНаОткрытиеКассовойОперации", Новый Структура("РежимСозданияОперации, id_doc, КодОперации", Истина, Строка(Новый УникальныйИдентификатор()), СтрокиКод[0].Ссылка));
	//ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПрочиеПолученияВКассу(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 8));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ЖурналКассовыхОпераций");
	Оповестить("ЗапросНаОткрытиеКассовойОперации", Новый Структура("РежимСозданияОперации, id_doc, КодОперации", Истина, Строка(Новый УникальныйИдентификатор()), СтрокиКод[0].Ссылка));
	//ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("РежимСозданияОперации, КодОперации", Истина, ?(СтрокиКод.Количество() = 0, Неопределено, СтрокиКод[0].Ссылка)), ЭтаФорма, "КО_КассоваяОперация");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИнвентаризацию(Команда)
	
	СтрокиКод = ТабОперации.НайтиСтроки(Новый Структура("code_operation", 9));
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ЖурналКассовыхОпераций");
	Оповестить("ЗапросНаОткрытиеКассовойОперации", Новый Структура("РежимСозданияОперации, id_doc, КодОперации", Истина, Строка(Новый УникальныйИдентификатор()), СтрокиКод[0].Ссылка));
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНеПроведеннуюОперациюНаСервере()
	
	id_doc = "";
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT TOP 1 CAST(CM.id_doc as NVARCHAR(36)) as id_doc
					|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
					|WHERE CM.operation_type < 0 and CM.cash_id = 0";
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			id_doc = rs.Fields("id_doc").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	Возврат id_doc;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНеПроведеннуюОперацию(Команда)
	
	id_doc = ПолучитьНеПроведеннуюОперациюНаСервере();
	Если НЕ ЗначениеЗаполнено(id_doc) Тогда
		Предупреждение("Нет не проведенных операций");
		Возврат;
	КонецЕсли;
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуКассовыеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "КО_ЖурналКассовыхОпераций");
	Оповестить("ЗапросНаОткрытиеКассовойОперации", Новый Структура("РежимСозданияОперации, Ссылка, id_doc", Ложь, Неопределено, id_doc));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиПоКассам()
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Обновление данных по кассам рабочий стол");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	//ДопКлючЗамер = Число(Формат(ТекущаяДата(), "ДФ=Hmmss") + Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0"));
	ТабОстаткиКасс.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT *
					|FROM SMS_Repl.dbo.Cash_form_function (" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM
					|order by CM.rn";
					
	//СтруктураЗамер = Новый Структура("Событие, ДатаНачала, Шаг, ДополнительныйКлюч, ТекстЗапроса"
	//			, "Обновление данных по кассам рабочий стол", ТекущаяДата(), "Обновление остатков по кассам на форме рабочего стола", ДопКлючЗамер, СтрокаЗапроса);
	//ЗамерПроизводительностиSQLЗапросов.НачатьЗамерSQLЗапроса(ТекущаяДата(), "Обновление остатков по кассам на форме рабочего стола", СтрокаЗапроса,,, "Обновление данных по кассам рабочий стол", ДопКлючЗамер);
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	//ЗамерПроизводительностиSQLЗапросов.ЗакончитьЗамерSQLЗапроса("Обновление остатков по кассам на форме рабочего стола", "Обновление данных по кассам рабочий стол", ДопКлючЗамер, ТекущаяДата());
	//СтруктураЗамер.Вставить("ДатаОкончания", ТекущаяДата());
	//ЗамерПроизводительностиSQLЗапросов.ЗаписатьДанныеЗамераВРегистр(СтруктураЗамер);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабОстаткиКасс.Добавить();
			Касса = rs.Fields("Касса").Value;
			СтрокаДоб.Касса = ?(Касса = 0, "Ц", Формат(Касса, "ЧГ=0"));
			СтрокаДоб.Остаток = rs.Fields("Остаток").Value;
			СтрокаДоб.СуммаZ = rs.Fields("Сумма_зет").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТоварныеОперацииОжидаетИсправления = 0;
	СтрокаЗапроса = "SELECT COUNT(CM.id_doc) as kolvo
					|FROM SMS_REPL..Td_move_Await_err_Doc_List(" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM";
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			ТоварныеОперацииОжидаетИсправления = rs.Fields("kolvo").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	КассовыеОперацииОжидаетИсправления = 0;
	СтрокаЗапроса = "SELECT COUNT(CM.id_doc) as kolvo
					|FROM SMS_Repl.dbo.Cash_move_function (" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM
					|WHERE CM.Await_err = 1";
	
	//+++АК mika 2018.10.29 ИП-00020270 (добавление доп. условий по просьбе Диговцовой Ольги)
	СтрокаЗапроса = СтрокаЗапроса + " and operation_type  in (select code_operation 
									|from SMS_REPL..Types_Operation with(nolock)
									|where table_operation='Cash_move' 
									|and field_operation='operation_type' 
									|and isnull(No_await_err,0)<>1)";  
	//---АК mika 
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			КассовыеОперацииОжидаетИсправления = rs.Fields("kolvo").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	НепрочитанныеСообщения = МеханизмОбменаСообщениями.ПолучитьКоличествоНепрочитанныхСообщений();
	
	//+++АК SHEP 20160922: добавил "маячок" ) о неотработанных задачах технолога
	НеотработанныхЗадачТехнолога = Отчеты.НеотработанныеЗадачиТехнолога.НеотработанныхЗадачТехнолога();
	Элементы.НадписьЕстьНеотработанныеЗадачиТехнолога.Видимость = (НеотработанныхЗадачТехнолога > 0);
	Элементы.НадписьЕстьНеотработанныеЗадачиТехнолога.Заголовок = "Есть неотработанные задачи технолога (" + Формат(НеотработанныхЗадачТехнолога, "ЧГ=0") + ") !";
	//---АК SHEP 20160922
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОстаткиКасс(Команда)
	
	ОбновитьОстаткиПоКассам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиПоКассамПодписка()
	
	ОбновитьОстаткиПоКассам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоМагазину()
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Обновление данных по магазину (кассовые операции)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	//ДопКлючЗамер = Число(Формат(ТекущаяДата(), "ДФ=Hmmss") + Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0"));
	ТабДанныеПоМагазину.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT *, CONVERT(datetime, Дата) as Data
					|FROM SMS_Repl.dbo.Cash_form_view_FromDate(" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "," + ВнешниеДанные.ФорматПоля(ДатаНачДанныеПоМагазину, Истина) + "," + ВнешниеДанные.ФорматПоля(ДатаКонДанныеПоМагазину, Истина) + ")
					|order by Дата Desc";
					
	//ЗамерПроизводительностиSQLЗапросов.НачатьЗамерSQLЗапроса(ТекущаяДата(), "Обновление данных по магазину", СтрокаЗапроса,,, "Обновление данных по магазину", ДопКлючЗамер);				
	//СтруктураЗамер = Новый Структура("Событие, ДатаНачала, Шаг, ДополнительныйКлюч, ТекстЗапроса"
	//			, "Обновление данных по магазину", ТекущаяДата(), "Обновление данных по магазину", ДопКлючЗамер, СтрокаЗапроса);
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	//ЗамерПроизводительностиSQLЗапросов.ЗакончитьЗамерSQLЗапроса("Обновление данных по магазину", "Обновление данных по магазину", ДопКлючЗамер, ТекущаяДата());
	//СтруктураЗамер.Вставить("ДатаОкончания", ТекущаяДата());
	//ЗамерПроизводительностиSQLЗапросов.ЗаписатьДанныеЗамераВРегистр(СтруктураЗамер);
	
	Таб = ТабДанныеПоМагазину.Выгрузить();
	Для н = 1 По Таб.Колонки.Количество() - 1 Цикл
		Элементы["ТабДанныеПоМагазинуКолонка" + н].Видимость = Ложь;
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанныеПоМагазину.Добавить();
			СчетчикИспользованных = 1;
			Для н = 0 По rs.Fields.Count() - 1 Цикл
				Если rs.Fields(н).Name = "Data" Тогда
					СтрокаДоб.Дата = rs.Fields("Data").Value;
				ИначеЕсли rs.Fields(н).Name = "Дата" Тогда
					Продолжить;
				Иначе
					СтрокаДоб["Колонка" + СчетчикИспользованных] = rs.Fields(н).Value;
					Элементы["ТабДанныеПоМагазинуКолонка" + СчетчикИспользованных].Заголовок = rs.Fields(н).Name;
					Элементы["ТабДанныеПоМагазинуКолонка" + СчетчикИспользованных].Видимость = Истина;
					СчетчикИспользованных = СчетчикИспользованных + 1;
				КонецЕсли;	
			КонецЦикла;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс,, СтрокаЗапроса);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьCashОперации" Тогда
		ОбновитьОстаткиПоКассам();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьОстаткиПоКассамПодписка", 1800, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоМагазину1(Команда)
	
	ОбновитьДанныеПоМагазину();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодДанныхПоМагазину(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	СтандПериод = Новый СтандартныйПериод(ДатаНачДанныеПоМагазину, ДатаКонДанныеПоМагазину);
	СтандПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период = СтандПериод;
	Если Диалог.Редактировать() Тогда
		ДатаНачДанныеПоМагазину = Диалог.Период.ДатаНачала;
		ДатаКонДанныеПоМагазину = Диалог.Период.ДатаОкончания;
		ОбновитьДанныеПоМагазину();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьНеотработанныеЗадачиТехнологаНажатие(Элемент)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.ОтчётПоЗадачамТехнолога.Форма.ФормаОтчета)")); 
	//---АК mika
	ОткрытьФорму("Отчет.ОтчётПоЗадачамТехнолога.Форма.ФормаОтчета", Новый Структура("СформироватьПриОткрытии,Активные,Неотработанные", Истина, Истина, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ЖалобыПокупателей(Команда)
	
	ОткрытьФорму("Отчет.ОтчетПоСервису_Магазины.Форма.ФормаОтчета");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМагазинИзПараметров()
	
	Возврат ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	
КонецФункции	

//+++ AK BARA ИП-00015405.000.00000001
&НаКлиенте
Процедура ОткрытьКартуРазмена(Команда)
	
	ТорговаяТочка =   ПолучитьМагазинИзПараметров();
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда 
		АК_Размен = АК_РАЗМЕННайти(ТорговаяТочка);
		Если ЗначениеЗаполнено(АК_Размен) Тогда   			 
			ОткрытьФорму("Справочник.АК_Размен.Форма.ФормаЭлемента",Новый Структура("Ключ",АК_Размен));
		Иначе
			Сообщить("Карта размена не найдена, обратитесь к помощнику управляющего.");
		КонецЕсли;
	Иначе Сообщить("Не указана текущая торговая точка.");
	КонецЕсли;
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Справочник.АК_Размен.Форма.ФормаЭлемента)")); 
	//---АК mika
КонецПроцедуры

&НаСервере
Функция АК_РАЗМЕННайти(ТорговаяТочка)
	АК_Размен =   Справочники.АК_Размен.НайтиПоРеквизиту("Магазин",ТорговаяТочка);
	 
	Возврат АК_Размен;
КонецФункции // АК_РАЗМЕННайти()
//--- AK BARA ИП-00015405.000.00000001

//+++ AK MALV ИП-00015825
&НаКлиенте
Процедура ПоискЧеков(Команда)
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.АК_ПоискЧеков.Форма.ФормаОтчета)")); 
	//---АК mika
	
	ОткрытьФорму("Отчет.АК_ПоискЧеков.Форма.ФормаОтчета");
КонецПроцедуры //--- AK MALV ИП-00015825

&НаКлиенте
Процедура ПоискФИОПоНомеруКарты(Команда)
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"Обработка.РабочийСтолПродавца.Форма.ФормаПоискПокупателяПоКарте")); 
	//---АК mika
	
	//+++ЗНК Zionek 2018.11.16 ИП-00020476
	//ОткрытьФорму("Обработка.РабочийСтолПродавца.Форма.ФормаПоискПокупателяПоКарте", , , ,);
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаОтчетыПоКартам", , , ,);
	//---ЗНК Zionek 2018.11.16 ИП-00020476
КонецПроцедуры

//+++АК POZM 2018.04.25 ИП-00018310.01
&НаКлиенте
Процедура ПечатьШтрихкодовНаКонверты(Команда)

	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.ПечатьШтрихкодовНаКонверты.Форма.Форма)")); 
	//---АК mika
	
	ОткрытьФорму("Обработка.ПечатьШтрихкодовНаКонверты.Форма.Форма");
КонецПроцедуры
//---АК POZM 