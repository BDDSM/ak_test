
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не РольДоступна("ПомощникСторонняяРозница") И НЕ РольДоступна("КонтролерСторонняяРозницаПросмотр") Тогда
	    Сообщить(НСтр("ru = 'Текущая форма доступна только пользователям с ролью «Помощник (Сторонняя розница)» или «Контролер (Сторонняя розница, Просмотр)»!';"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ТорговаяТочкаПоАйпи.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.СторонняяРозница Тогда
		Сообщить(НСтр("ru = 'Текущая форма предназначена для работы только по магазинам с типом «Сторонняя розница»!';"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Товародвижения(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистУчета(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуЛистУчета();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("ИмяВнешнейОбработки, СформироватьПриОткрытии", ИмяОбработки, Истина),, "ТД_ЛистУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграничения(Команда)
	
	ОткрытьФорму("Обработка.УстановкаТоварныхОграничений_Магазины.Форма.Форма", ,, "ТД_ТоварныеОграничения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетРасшифровкаРаспределения(Команда)
	
	ОткрытьФорму("Отчет.РасшифровкаРаспределенияТоваровВТорговойТочке.Форма.ФормаОтчета",, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПомощникУправляющего()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.08 ИП-00018376.01
				   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
	               |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователейСоставРоли.Ссылка
	               |			ИЗ
	               |				Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |					ПО
	               |						Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |			ГДЕ
	               |				Пользователи.Ссылка = &Сотрудник)";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

Функция ЭтоУправляющий()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.05 ИП-00018376.01
				   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
	               |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователей.Ссылка
	               |			ИЗ
	               |				Справочник.РолиПользователей КАК РолиПользователей
	               |			ГДЕ
	               |				РолиПользователей.Родитель В
	               |					(ВЫБРАТЬ
	               |						РолиПользователейСоставРоли.Ссылка
	               |					ИЗ
	               |						Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |							ПО
	               |								Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |					ГДЕ
	               |						Пользователи.Ссылка = &Сотрудник))";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ТоварныеОперации_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуЛистУчета()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ЛистУчета_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуПодготовитьДокументыНаСклад()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПодготовитьДокументыНаСклад_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуРасхожденияПоставки()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("РасхожденияПоставкиСоСкладом_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

#КонецОбласти







