&НаКлиенте
Процедура Товародвижения(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка.ТоварныеОперации_Магазины.Форма.ФормаСписка)")); 
	//---АК mika	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.ПечатьБейджейПродавцов.Форма.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.ПечатьБейджейПродавцов.Форма.Форма",,, "ТД_ПечатьБейджей");
	
КонецПроцедуры


&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации()
	
	//+++АК SHEP 2018.07.06 ИП-00019140: поместил в модуль менеджера
	Возврат Обработки.РабочийСтолПродавца.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	//+++АК SHEP 2018.07.06
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ТоварныеОперации_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуПодготовитьДокументыНаСклад()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПодготовитьДокументыНаСклад_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуЛистУчета()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ЛистУчета_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключитьВнешнююОбработкуРасхожденияПоставки()
	
	Ссылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("РасхожденияПоставкиСоСкладом_Магазины");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
	
	ВнешниеОбработки.Создать(ИмяОбработки);
	
	Возврат ИмяОбработки;
	
КонецФункции

Функция ЭтоПомощникУправляющего()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.08 ИП-00018376.01
				   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
	               |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователейСоставРоли.Ссылка
	               |			ИЗ
	               |				Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |					ПО
	               |						Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |			ГДЕ
	               |				Пользователи.Ссылка = &Сотрудник)";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

Функция ЭтоУправляющий()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.05 ИП-00018376.01
				   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
	               |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователей.Ссылка
	               |			ИЗ
	               |				Справочник.РолиПользователей КАК РолиПользователей
	               |			ГДЕ
	               |				РолиПользователей.Родитель В
	               |					(ВЫБРАТЬ
	               |						РолиПользователейСоставРоли.Ссылка
	               |					ИЗ
	               |						Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |							ПО
	               |								Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |					ГДЕ
	               |						Пользователи.Ссылка = &Сотрудник))";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи; //+++АК SHEP 2018.12.12 ИП-00017103.02: зачем всё время её получать, если достаточно запомнить один раз!
	
	Если РольДоступна("ПродавецТолькоПросмотр") Тогда
		Элементы.ВвестиИнвентаризацию.Доступность = Ложь;
		//Элементы.ЗагрузитьПриходные.Доступность = Ложь; //mind пусть грузят кто хотят
	КонецЕсли;
	
	Если РольДоступна("Продавец") Тогда
		Элементы.ОткрытьОбещания.Видимость = ложь;
		//+++АК SHEP 2018.07.06 ИП-00019140
		//Элементы.СоздатьПеремещениеВсехОстатковНаСклад.Видимость = ложь;
		//Элементы.СозданиеПеремещенийПоЗакрытымМагазинам.Видимость = ложь;
		//---АК SHEP 2018.07.06
		Элементы.ПечатьБейджей.Видимость = ложь;
		Элементы.ПодготовитьДокументыНаСклад.Видимость = ложь;            
	КонецЕсли;
	
	ОбновитьДанные();
	ОбновитьНадписьОЦенникахСервер();
	
	//+++АК SHEP 2018.07.06 ИП-00019140
	//Элементы.СозданиеПеремещенийПоЗакрытымМагазинам.Видимость = ЭтоПомощникУправляющего() ИЛИ ЭтоУправляющий();
	//Элементы.СоздатьПеремещениеВсехОстатковНаСклад.Видимость = ЭтоПомощникУправляющего() ИЛИ ЭтоУправляющий();
	РольДоступнаПродавецУправляющийПомощник = РольДоступна("Продавец") ИЛИ ЭтоПомощникУправляющего() ИЛИ ЭтоУправляющий();
	Элементы.ЗагрузитьПеремещения.Видимость = РольДоступнаПродавецУправляющийПомощник;
	Элементы.СоздатьПеремещениеОстатков.Видимость = РольДоступнаПродавецУправляющийПомощник;
	//---АК SHEP 2018.07.06
	//Элементы.РазрешениеПриходованияСРасхождениями.Видимость = ЭтоУправляющий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДокументыНаСклад(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуПодготовитьДокументыНаСклад();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаПечати", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ДокументыНаСклад");
	//ОткрытьФорму("Обработка.ПодготовитьДокументыНаСклад.Форма.ФормаПечати", ,ЭтаФорма);
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаПечати)")); 
	//---АК mika	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПриходныеСервер(ДатаПоставки)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Загрузка поставки со склада в магазин");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
	ОбработкаОбъект.ЗагрузитьПриходные(, ДатаПоставки);
	ОбработкаОбъект.ЗагрузитьПриходные(ТекущаяДата() - 86400, ДатаПоставки);
	ОбработкаОбъект.ЗагрузитьПриходные(ТекущаяДата() - 86400*2, ДатаПоставки);
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

Функция ЕстьИнвентаризация()
	
	//+++АК mika 2018.06.09 ИП-00018980
	//Отключить контроль для инветаризации по кассе для Микромаркета
	Если ПараметрыСеанса.ТорговаяТочкаПоАйпи.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Микромаркет Тогда
		Возврат Истина;
	КонецЕсли;
	//---АК mika 
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
	СтрокаЗапроса = "SELECT TOP 1 CM.id_doc
					|FROM SMS_Repl.dbo.Cash_move as CM (nolock)
					|WHERE CM.cash_id = 0 and CM.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
					|	and CM.closedate >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата()) - 7 * 3600) + " and CM.operation_type = 9";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Возврат Истина;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДатуСервера()
	
	Возврат ТекущаяДата();
	
КонецФункции	

Функция ЕстьДокументыСкладаНеВСборке()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(РасходныйОрдерСклад.СборкаТерминаломЗакончена) КАК СборкаТерминаломЗакончена
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.ДатаРаспределения = &ДатаРаспределения
	               |	И РасходныйОрдерСклад.Получатель = &Получатель
	               |	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И РасходныйОрдерСклад.Склад.ЭтоСкладРеклМатериалов = ЛОЖЬ";
	Запрос.УстановитьПараметр("Получатель", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("ДатаРаспределения", НачалоДня(ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СборкаТерминаломЗакончена;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьПриходные(Команда)
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка.ТоварныеОперации_Магазины.Форма.ФормаСписка)")); 
	//---АК mika
	
	Если Не ЕстьИнвентаризация() Тогда
		Предупреждение("Нельзя выполнить загрузку! Нет инвентаризации по центральной кассе");
		Возврат;
	КонецЕсли;	
	
	//Если Не ЕстьДокументыСкладаНеВСборке() Тогда
	//	Предупреждение("Не все складские документы в статусе ""Сборка терминалом закончена"". Скорее всего склад еще не закончил сборку. Уточните информацию у склада.");
	//	Возврат;
	//КонецЕсли;	
	
	//ДатаНаСервере = ПолучитьДатуСервера();
	//Если Час(ДатаНаСервере) < 7 ИЛИ Час(ДатаНаСервере) > 21 Тогда
	//	Предупреждение("Нельзя выполнить загрузку ранее 7 и позднее 21 часа! Текущее время сервера " + ДатаНаСервере);
	//	Возврат;
	//КонецЕсли;	
	
	ДатаПоставки = ТекущаяДата();
	ВвестиДату(ДатаПоставки, "Укажите время поставки в магазин", ЧастиДаты.Время);
	
	ЗагрузитьПриходныеСервер(ДатаПоставки);
	ОбновитьНадписьОПриходникахСервер();
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистУчета(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуЛистУчета();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("ИмяВнешнейОбработки, СформироватьПриОткрытии", ИмяОбработки, Истина),, "ТД_ЛистУчета");
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма)")); 
	//---АК mika
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНеПроведеннуюОперациюНаСервере()
	
	id_doc = "";
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "SELECT TOP 1 CAST(CM.id_doc as NVARCHAR(36)) as id_doc
					|FROM SMS_Repl.dbo.TD_move as CM (nolock)
					|WHERE CM.operation_type < 0 and ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			id_doc = rs.Fields("id_doc").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	Возврат id_doc;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНеПроведеннуюОперацию(Команда)
	
	id_doc = ПолучитьНеПроведеннуюОперациюНаСервере();
	Если НЕ ЗначениеЗаполнено(id_doc) Тогда
		Предупреждение("Нет не проведенных операций");
		Возврат;
	КонецЕсли;
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД", id_doc));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДегустацию(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Документ.ЗадачаНаДегустациюНовинки.Форма.ЗадачиНаДегустацию)")); 
	//---АК mika	
	ОткрытьФорму("Документ.ЗадачаНаДегустациюНовинки.Форма.ЗадачиНаДегустацию",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаДегустации(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 111));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписаниеПоСроку(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 102));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаСписаниеПоСроку(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 112));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписаниеПоКачеству(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 103));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаСписанияПоКачеству(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 113));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписаниеПоБою(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 104));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаСписанияПоБою(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 114));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписаниеНаДоставку(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 105));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаСписанияНаДоставку(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 115));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиВозвратПокупателю(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 201));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаВозвратаПокупателю(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 211));
	
КонецПроцедуры

Функция ВвестиИнвентаризацииПоГрафикуИнвентаризации(СообщениеВозврат)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстSQL = "exec [SMS_Repl].[dbo].[InsertTDMoveOperations] @ShopNo = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ", @Data = " + ВнешниеДанные.ФорматПоля(ТекущаяДата()) 
				+ ", @CashierId = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТекущийПродавец.Код) + ", @Type = 2, @Time_delivery = NULL";
				
	флУспешно = Истина;
	
	Попытка			
		ADOСоединение.Execute(ТекстSQL);
	Исключение
		Сообщить("Операция выполнена с ошибками, попробуйте выполнить позже");
		ЗаписьЖурналаРегистрации("Ошибка загрузки инвентаризации", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстSQL);
		флУспешно = Ложь;
	КонецПопытки;
	
	ТекстSQL = "exec [SMS_Repl].[dbo].[CreateInventarNotPerformedYesterday] @ShopNo = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи);
				
	флУспешно = Истина;
	
	Попытка			
		ADOСоединение.Execute(ТекстSQL);
	Исключение
		Сообщить("Операция выполнена с ошибками, попробуйте выполнить позже");
		ЗаписьЖурналаРегистрации("Ошибка загрузки инвентаризации", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстSQL);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
	Возврат флУспешно;
	
	//КолвоВведенных = 0;
	//График = ПараметрыСеанса.ТорговаяТочкаПоАйпи.ГрафикИнвентаризации;
	//Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ГрафикиИнвентаризацииМагазиновДниПоМестамВыкладкам.МестоВыкладки,
	//			   |	ГрафикиИнвентаризацииМагазиновДниПоМестамВыкладкам.МестоВыкладки.ИД КАК ИД
	//			   |ИЗ
	//			   |	Справочник.ГрафикиИнвентаризацииМагазинов.ДниПоМестамВыкладкам КАК ГрафикиИнвентаризацииМагазиновДниПоМестамВыкладкам
	//			   |ГДЕ
	//			   |	ГрафикиИнвентаризацииМагазиновДниПоМестамВыкладкам.Ссылка = &Ссылка
	//			   |	И ГрафикиИнвентаризацииМагазиновДниПоМестамВыкладкам.ДниНедели ПОДОБНО &ДниНедели";
	//			   
	//Запрос.УстановитьПараметр("Ссылка", График);
	//Запрос.УстановитьПараметр("ДниНедели", "%" + ДеньНедели(ТекущаяДата()) + "%");
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Количество() = 0 Тогда
	//	СообщениеВозврат = "По графику инвентаризации для торговой точки не установлено мест выкладки для инвентаризации сегодня";
	//	Возврат КолвоВведенных;
	//КонецЕсли;
	//
	//ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	//ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
	//
	//ТекстЗапросаSQL = "SELECT DISTINCT
	//				  |	[id_vikl]
	//				  |FROM " + Константы.DB.Получить() + ".[dbo].[TD_move] (nolock) where CONVERT(date, opendate) = " + ВнешниеДанные.ФорматПоля(ТекущаяДата(), Истина) + " and operation_type IN (300, -300) and ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки);
	//
	//ТабЕстьИнв = Новый ТаблицаЗначений();
	//ТабЕстьИнв.Колонки.Добавить("id_vikl", Новый ОписаниеТипов("Число"));
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	//Попытка
	//	rs.MoveFirst();
	//	Пока НЕ rs.Eof() Цикл
	//		НовСтр = ТабЕстьИнв.Добавить();
	//		НовСтр.id_vikl = rs.Fields("id_vikl").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//	
	//Исключение
	//КонецПопытки;
	//
	//ТекстЗапросаSQL = "SELECT DISTINCT
	//				  |	[id_tov]
	//				  |FROM " + Константы.DB.Получить() + ".[dbo].[TD_move] (nolock) where CONVERT(date, opendate) = " + ВнешниеДанные.ФорматПоля(ТекущаяДата(), Истина) + " and operation_type IN (300, -300) and ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки);
	//
	//ТабТоварыЕстьВИнв = Новый ТаблицаЗначений();
	//ТабТоварыЕстьВИнв.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	//Попытка
	//	rs.MoveFirst();
	//	Пока НЕ rs.Eof() Цикл
	//		НовСтр = ТабТоварыЕстьВИнв.Добавить();
	//		НовСтр.id_tov = rs.Fields("id_tov").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//	
	//Исключение
	//КонецПопытки;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если ТабЕстьИнв.Найти(Выборка.Ид, "id_vikl") <> Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	// Теперь добавляем.
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("Таб", ТабТоварыЕстьВИнв);
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	Таб.Id_tov
	//				   |ПОМЕСТИТЬ ВТ_Товары
	//				   |ИЗ
	//				   |	&Таб КАК Таб
	//				   |;
	//				   |
	//				   |////////////////////////////////////////////////////////////////////////////////
	//				   |ВЫБРАТЬ
	//				   |	Номенклатура.Ссылка КАК Номенклатура,
	//				   |	Номенклатура.id_tov КАК ИдТовара,
	//				   |	ДАТАВРЕМЯ(1900, 1, 1) КАК ДатаПодтверждения
	//				   |ИЗ
	//				   |	Справочник.Номенклатура КАК Номенклатура
	//				   |ГДЕ
	//				   |	Номенклатура.Ссылка В
	//				   |			(ВЫБРАТЬ
	//				   |				ВыкладкаПланограммы.Номенклатура
	//				   |			ИЗ
	//				   |				РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	//				   |			ГДЕ
	//				   |				ВыкладкаПланограммы.МестоВыкладки = &МестоВыкладки
	//				   |				И ВыкладкаПланограммы.Планограмма = &Планограмма)
	//				   |	И НЕ Номенклатура.id_tov В
	//				   |				(ВЫБРАТЬ
	//				   |					ВТ_Товары.Id_tov
	//				   |				ИЗ
	//				   |					ВТ_Товары КАК ВТ_Товары)
	//				   |
	//				   |УПОРЯДОЧИТЬ ПО
	//				   |	Номенклатура.Наименование";
	//	
	//	Запрос.УстановитьПараметр("МестоВыкладки", Выборка.МестоВыкладки);
	//	Запрос.УстановитьПараметр("Планограмма", ПараметрыСеанса.ТорговаяТочкаПоАйпи.Планограмма);
	//	
	//	ТабТовары = Запрос.Выполнить().Выгрузить();
	//	ТабТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	//	ТекДата = ТекущаяДата();
	//	УинДокумента = Строка(Новый УникальныйИдентификатор());
	//	
	//	МассивИД = ТабТовары.ВыгрузитьКолонку("ИдТовара");
	//	
	//	ТаблицаОстатков = ВнешниеДанные.ВернутьТаблицуОстатковНоменклатурыДляИнвентаризации(МассивИД);
	//	
	//	Для Каждого Стр Из ТаблицаОстатков Цикл
	//		НайдСтрТовары = ТабТовары.НайтиСтроки(Новый Структура("ИдТовара", Стр.Ид));
	//		
	//		Если НайдСтрТовары.Количество() > 0 Тогда
	//			НайдСтрТовары[0].Количество = Стр.Остаток;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Счетчик = 1;
	//	Для Каждого Стр Из ТабТовары Цикл
	//		ОбработкаОбъект.ДобавитьНовуюСтрокуТовародвижения(Стр.ИдТовара, Стр.КОличество, Счетчик, ТекДата, УинДокумента, 300, 0, 0,, Строка(Новый УникальныйИдентификатор()),,,, Выборка.ИД);
	//		Счетчик = Счетчик + 1;
	//	КонецЦикла;
	//	
	//	КолвоВведенных = КолвоВведенных + ?(ТабТовары.Количество() = 0, 0, 1);
	//КонецЦикла;
	//
	//Если КолвоВведенных = 0 Тогда
	//	ТаблицаККорректировке = Новый ТаблицаЗначений();
	//	ТаблицаККорректировке.Колонки.Добавить("ИдТовара", Новый ОписаниеТипов("Число"));
	//	ТаблицаККорректировке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	//	ТекстЗапросаSQL = "SELECT TD.id_tov,
	//					 |   ABS(TD.Quantity) * VZ_Price.Price as Summ      
	//					 | FROM " + Константы.DB.Получить() + ".[dbo].[TD_move] AS TD (nolock)
	//					 | INNER JOIN (SELECT
	//					 |   		T1._Fld2713 as Price,
	//					 |   		T4._Fld760 as id_tov
	//					 |   		FROM IzbenkaFin.dbo._InfoRg2707 T1 WITH(NOLOCK)
	//					 |   		INNER JOIN (SELECT
	//					 |   		T3._Fld2710RRef AS Q_001_F_000RRef,
	//					 |   		MAX(T3._Period) AS Q_001_F_001_
	//					 |   		FROM IzbenkaFin.dbo._InfoRg2707 T3 WITH(NOLOCK)
	//					 |   		WHERE (T3._Fld2709RRef = 0) AND (T3._Fld2708RRef = 0xA6B33D43A24268434AF4B89CCE709D7B) AND (DATEADD(YEAR, -2000, T3._Period) <= " + ВнешниеДанные.ФорматПоля(КонецДня(ТекущаяДата())) + ")
	//					 |   		GROUP BY T3._Fld2710RRef) T2
	//					 |   		ON ((((T1._Period = T2.Q_001_F_001_) AND (T1._Fld2710RRef = T2.Q_001_F_000RRef)) AND (T1._Fld2708RRef = 0xA6B33D43A24268434AF4B89CCE709D7B)) AND (T1._Fld2709RRef = 0))
	//					 |   		LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 T4 WITH(NOLOCK)
	//					 |   		ON T1._Fld2710RRef = T4._IDRRef) as VZ_Price
	//					 |   		ON TD.id_tov = VZ_Price.id_tov
	//					 |WHERE CONVERT(date, TD.closedate) = " + ВнешниеДанные.ФорматПоля(ТекущаяДата(), Истина) + " and TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + " and TD.operation_type = 510 and ABS(TD.Quantity) * VZ_Price.Price >= 100
	//					 |	and not TD.id_tov IN (SELECT TD.id_tov FROM " + Константы.DB.Получить() + ".[dbo].[TD_move] AS TD (nolock) where TD.operation_type IN (300, -300) and Isnull(TD.id_vikl, 0) = 0)";
	//					 
	//	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	//	Попытка
	//		rs.MoveFirst();
	//		Пока НЕ rs.Eof() Цикл
	//			НовСтр = ТаблицаККорректировке.Добавить();
	//			НовСтр.ИдТовара = rs.Fields("id_tov").Value;
	//			rs.MoveNext();
	//		КонецЦикла;
	//		
	//	Исключение
	//	КонецПопытки;
	//	
	//	ТекДата = ТекущаяДата();
	//	УинДокумента = Строка(Новый УникальныйИдентификатор());
	//	
	//	МассивИД = ТаблицаККорректировке.ВыгрузитьКолонку("ИдТовара");
	//	
	//	ТаблицаОстатков = ВнешниеДанные.ВернутьТаблицуОстатковНоменклатурыДляИнвентаризации(МассивИД);
	//	
	//	Для Каждого Стр Из ТаблицаККорректировке Цикл
	//		НайдСтрТовары = ТабТовары.НайтиСтроки(Новый Структура("ИдТовара", Стр.ИдТовара));
	//		
	//		Если НайдСтрТовары.Количество() > 0 Тогда
	//			НайдСтрТовары[0].Количество = Стр.Остаток;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Счетчик = 1;
	//	ОбработкаОбъект.Комментарий = "Пересчет отклонений превысивших 100 руб.";
	//	Для Каждого Стр Из ТаблицаККорректировке Цикл
	//		ОбработкаОбъект.ДобавитьНовуюСтрокуТовародвижения(Стр.ИдТовара, Стр.КОличество, Счетчик, ТекДата, УинДокумента, 300, 0, 0,, Строка(Новый УникальныйИдентификатор()));
	//		Счетчик = Счетчик + 1;
	//	КонецЦикла;
	//	
	//	КолвоВведенных = КолвоВведенных + ?(ТаблицаККорректировке.Количество() = 0, 0, 1);
	//	
	//КонецЕсли;	
	//
	//ADOСоединение.Close();
	//
	//Возврат КолвоВведенных;
	
Конецфункции

&НаКлиенте
Процедура ВвестиИнвентаризацию(Команда)

	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.ТоварныеОперации_Магазины.Форма.ФормаСписка)")); 
	//---АК mika
	
	Если Не ЕстьИнвентаризация() Тогда
		Предупреждение("Нельзя создавать инвентаризации! Нет инвентаризации по центральной кассе");
		Возврат;
	КонецЕсли;
	
	Если ВнешниеДанные.ЕстьНеПроведенныеДокументыПоТоварам() Тогда
		Предупреждение("Есть не проведенные документы в базе. Нельзя создавать инвентаризации!");
		Возврат;
	КонецЕсли;
	
	//+++АК KIRN 2018.05.17  ИП-00018237
	Если ПолныеПрава.СозданиеИнвентаризацииЗаблокировано() ТОгда
		Предупреждение("Идет процесс очистки таблиц. Нельзя создавать инвентаризации!");
		Возврат;
	КонецЕсли;
	//---АК KIRN 
	
	СообщениеВозврат = "";
	Если ВвестиИнвентаризацииПоГрафикуИнвентаризации(СообщениеВозврат) Тогда
		ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
		ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	КонецЕсли;	
	//Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 300));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоставкаТовараСоСклада(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 400));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаПоставкиНаСклад(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 401));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРасходПоПеремещению(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 410));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПриходПоПеремещению(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 411));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМинусКорректировка(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 500));
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПлюсКорректировка(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 501));
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка)")); 
	//---АК mika
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаказХозТоваров(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 700));
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.ТоварныеОперации_Магазины.Форма.ФормаОтчета)")); 
	//---АК mika
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаЗаказаХозТоваров(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 701));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиУцененныйДляПродажи(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 900));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаУценкиДляПродажи(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 901));
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПоставкиСоСкладом(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуРасхожденияПоставки();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.Форма", Новый Структура("ИмяВнешнейОбработки, СформироватьПриОткрытии", ИмяОбработки, Истина),, "ТД_РасхожденияПоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.ПечатьЦенниковМагазин.Форма.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.ПечатьЦенниковМагазин.Форма.Форма", ,, "ТД_ПечатьЦенников");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Обновление данных по товарам на рабочем столе");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ТабДанные.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ДопКлючЗамер = Число(Формат(ТекущаяДата(), "ДФ=Hmmss") + Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0"));
	
	ПакетЗапросов = "";
	
	СтрокаЗапроса = "SELECT *
					|FROM SMS_Repl.dbo.Td_form_function (" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM
					|order by CM.rn";
					
	ПакетЗапросов = ПакетЗапросов + СтрокаЗапроса;
					
	//ЗамерПроизводительностиSQLЗапросов.НачатьЗамерSQLЗапроса(ТекущаяДата(), "Обновление данных по товарам на рабочем столе", СтрокаЗапроса,,, "Обновление данных по товарам на рабочем столе", ДопКлючЗамер);								
	//СтруктураЗамер = Новый Структура("Событие, ДатаНачала, Шаг, ДополнительныйКлюч, ТекстЗапроса"
	//			, "Обновление данных по товарам на рабочем столе", ТекущаяДата(), "Обновление данных по товарам на рабочем столе", ДопКлючЗамер, СтрокаЗапроса);
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	//ЗамерПроизводительностиSQLЗапросов.ЗакончитьЗамерSQLЗапроса("Обновление данных по товарам на рабочем столе", "Обновление данных по товарам на рабочем столе", ДопКлючЗамер, ТекущаяДата());
	//СтруктураЗамер.Вставить("ДатаОкончания", ТекущаяДата());
	//ЗамерПроизводительностиSQLЗапросов.ЗаписатьДанныеЗамераВРегистр(СтруктураЗамер);
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Товар = rs.Fields("Товар").Value;
			СтрокаДоб.Количество = rs.Fields("Колво").Value;
			СтрокаДоб.Показатель = rs.Fields("Показатель").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТоварныеОперацииОжидаетИсправления = 0;
	СтрокаЗапроса = "SELECT COUNT(CM.id_doc) as kolvo
					|FROM SMS_REPL..Td_move_Await_err_Doc_List(" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM";
					
	ПакетЗапросов = ПакетЗапросов + Символы.ПС + СтрокаЗапроса;
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			ТоварныеОперацииОжидаетИсправления = rs.Fields("kolvo").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	КассовыеОперацииОжидаетИсправления = 0;
	СтрокаЗапроса = "SELECT COUNT(CM.id_doc) as kolvo
					|FROM SMS_Repl.dbo.Cash_move_function (" + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + ") as CM
					|WHERE CM.Await_err = 1";
	
	//+++АК mika 2018.10.29 ИП-00020270 (добавление доп. условий по просьбе Диговцовой Ольги)
	СтрокаЗапроса = СтрокаЗапроса + " and operation_type  in (select code_operation 
									|from SMS_REPL..Types_Operation with(nolock)
									|where table_operation='Cash_move' 
									|and field_operation='operation_type' 
									|and isnull(No_await_err,0)<>1)";  
	//---АК mika 

	ПакетЗапросов = ПакетЗапросов + Символы.ПС + СтрокаЗапроса;
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			КассовыеОперацииОжидаетИсправления = rs.Fields("kolvo").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	НепрочитанныеСообщения = МеханизмОбменаСообщениями.ПолучитьКоличествоНепрочитанныхСообщений();
	
	//+++АК SHEP 20160922: добавил "маячок" ) о неотработанных задачах технолога
	НеотработанныхЗадачТехнолога = Отчеты.НеотработанныеЗадачиТехнолога.НеотработанныхЗадачТехнолога();
	Элементы.НадписьЕстьНеотработанныеЗадачиТехнолога.Видимость = (НеотработанныхЗадачТехнолога > 0);
	Элементы.НадписьЕстьНеотработанныеЗадачиТехнолога.Заголовок = "Есть неотработанные задачи технолога (" + Формат(НеотработанныхЗадачТехнолога, "ЧГ=0") + ") !";
	//---АК SHEP 20160922
	//+++АК SHEP 20170505
	НеотработанныхЗадачНаДегустацию = Документы.ЗадачаНаДегустациюНовинки.КоличествоНеотработанныхЗадач() + Документы.ЗадачаТехнологаНаДегустацию.КоличествоНеотработанныхЗадач();
	Элементы.НадписьЕстьЗадачиНаДегустацию.Видимость = (НеотработанныхЗадачНаДегустацию > 0);
	Элементы.НадписьЕстьЗадачиНаДегустацию.Заголовок = "Есть задачи на дегустацию (" + Формат(НеотработанныхЗадачНаДегустацию, "ЧГ=0") + ") !";
	//---АК SHEP 20170505
	
	ОбновитьНадписьЕстьЗаказыПокупателейНаСегодняСервер(); //+++АК SHEP 2018.12.12 ИП-00017103.02
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс,, ПакетЗапросов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПодписка() Экспорт
	
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ОбновитьНадписьОЦенникахСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЦенникиКПечатиВМагазинах.Номенклатура) КАК КолвоТовар
	               |ИЗ
	               |	РегистрСведений.ЦенникиКПечатиВМагазинах КАК ЦенникиКПечатиВМагазинах
	               |ГДЕ
	               |	ЦенникиКПечатиВМагазинах.Магазин = &Магазин";
					   
	Запрос.УстановитьПараметр("Магазин", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	
	КолвоКПечати = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КолвоКПечати = Выборка.КолвоТовар;
	КонецЕсли;
	
	Если ТипЗнч(КолвоКПечати) <> Тип("Число") Тогда
		КолвоКПечати = 0;
	КонецЕсли;	
	
	Элементы.НадписьЕстьНовыеЦенники.Видимость = КолвоКПечати > 0;
	Элементы.НадписьЕстьНовыеЦенники.Заголовок = "Есть новые ценники на товары! " + Формат(КолвоКПечати, "ЧГ=0");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОЦенникахПодписка()
	
	ОбновитьНадписьОЦенникахСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОПриходникахПодписка()
	
	ОбновитьНадписьОПриходникахСервер();
	
КонецПроцедуры

//+++ mind 2017-10-23
Процедура ОбновитьНадписьОПриходникахСервер()
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата() - 86400));
	ЗапросКеш.УстановитьПараметр("Получатель", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	ЗапросКеш.УстановитьПараметр("ДатаРаспределения", НачалоДня(ТекущаяДата()));
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	РасходныйОрдерСклад.Ссылка,
	                  |	РасходныйОрдерСклад.СборкаТерминаломЗакончена
	                  |ИЗ
	                  |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	                  |		ПО (РасходныйОрдерСклад.Ссылка = РасходныйОрдерСкладТовары.Ссылка
	                  |				И РасходныйОрдерСкладТовары.НомерСтроки = 1)
	                  |ГДЕ
	                  |	РасходныйОрдерСклад.Дата >= &Дата
	                  |	И РасходныйОрдерСклад.Получатель = &Получатель
	                  |	И РасходныйОрдерСклад.ДатаРаспределения = &ДатаРаспределения
	                  |	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	                  |	И РасходныйОрдерСклад.Проведен = ИСТИНА";
	
	ТабДокСклада = ЗапросКеш.Выполнить().Выгрузить();
	ТабДокСклада.Колонки.Добавить("УинСтроки");
	Для Каждого СтрокаТаб Из ТабДокСклада Цикл
		СтрокаТаб.УинСтроки = ВРег(СтрокаТаб.Ссылка.УникальныйИдентификатор());
	КонецЦикла;	
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапросаSQL = "SELECT DISTINCT CAST([Id_doc] as nvarchar(36)) as Id_doc
					  |FROM [SMS_REPL].[dbo].[TD_move] (nolock)
					  |where ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + " and opendate >= " + ВнешниеДанные.ФорматПоля(НачалоДня(ТекущаяДата())) + " and operation_type IN (400, -400)";
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			СтрокаТаб = ТабДокСклада.Найти(rs.Fields("Id_doc").Value, "УинСтроки");
			Если СтрокаТаб <> Неопределено Тогда
				ТабДокСклада.Удалить(СтрокаТаб);
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ТабДокСклада.Количество() = 0 Тогда
		Элементы.НадписьОПоставках.Видимость = Ложь;
	Иначе
		КолвоНеПодтверждено = 0;
		КолвоМожноЗагрузить = 0;
		Для Каждого СтрокаТаб Из ТабДокСклада Цикл
			Если СтрокаТаб.СборкаТерминаломЗакончена Тогда
				КолвоМожноЗагрузить = КолвоМожноЗагрузить + 1;
			Иначе
				КолвоНеПодтверждено = КолвоНеПодтверждено + 1;
			КонецЕсли;	
		КонецЦикла;
		Элементы.НадписьОПоставках.Заголовок = "Доступно приходников к загрузке: " + Формат(КолвоМожноЗагрузить, "ЧН=0; ЧГ=0") + ?(КолвоНеПодтверждено > 0, ". Склад не закончил сборку: " + КолвоНеПодтверждено, "");
	КонецЕсли;	
	
	ADOСоединение.Close();
	
	ADOСоединение = Неопределено;
	
КонецПроцедуры
//--- mind 2017-10-23

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПодписка", 1800, Ложь);
	
	ПодключитьОбработчикОжидания("ОбновитьНадписьОЦенникахПодписка", 1800, Ложь);
	
	ПодключитьОбработчикОжидания("ОбновитьНадписьОПриходникахПодписка", 1800, Ложь);
	ОбновитьНадписьОПриходникахПодписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКоманда(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьНовыеЦенникиНажатие(Элемент)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.ПечатьЦенниковМагазин.Форма.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.ПечатьЦенниковМагазин.Форма.Форма", ,, "ТД_ПечатьЦенников");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаДоставку(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Документ.ВебЗаказПокупателя.Форма.ФормаСпискаДляМагазинов)")); 
	//---АК mika	
	ОткрытьФорму("Документ.ВебЗаказПокупателя.Форма.ФормаСпискаДляМагазинов", ,, "ТД_ЗаказыНаДоставку");
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеПеремещенийПоЗакрытымМагазинам(Команда)
	
	ОткрытьФорму("Обработка.РабочийСтолПродавца.Форма.ФормаСозданияПеремещенийПоЗакрытымМагазинам", ,, "ТД_СозданиеПеремещений");
	
КонецПроцедуры

//+++АК SHEP 2018.07.06 ИП-00019140
&НаКлиенте
Процедура ЗагрузитьПеремещения(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.РабочийСтолПродавца.Форма.ФормаЗагрузитьПеремещения)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.РабочийСтолПродавца.Форма.ФормаЗагрузитьПеремещения", ,, "ТД_СозданиеПеремещений");
КонецПроцедуры

&НаСервере
Функция ЧекиПоКассамЗагружены(ДатаПроверки)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Проверка загруженности чеков по кассам (пинговка касс)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	СтатусВозврата = Истина;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();	
	
	СтрокаДоступныхКасс = "99999999";
	ТаблицаКассы = Новый ТаблицаЗначений();
	ТаблицаКассы.Колонки.Добавить("Касса");
	ТаблицаКассы.Колонки.Добавить("Ip");
	
	Запрос = "declare @ShopNo int = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
			|declare @Ip nvarchar(max) = ''
			|
			|SELECT @Ip = IpSE._Fld5623 + '.%' FROM IzbenkaFin.dbo._Reference42_VT5621 as IpSE (nolock)
			|INNER JOIN IzbenkaFin.dbo._Reference42 as SE (nolock)
			|	ON IpSE._Reference42_IDRRef = SE._IDRRef
			|WHERE SE._Fld2756 = @ShopNo
			|
			|SELECT *  FROM SMS_REPL..CashIP WHERE ip LIKE @Ip";
			
	rs = ADOСоединение.Execute(Запрос);

	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаКассы.Добавить();
			СтрокаДоб.Касса = rs.Fields("CashId").Value;
			СтрокаДоб.Ip = rs.Fields("Ip").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Для Каждого СтрокаКасса Из ТаблицаКассы Цикл
		objWMIService = ПолучитьCOMОбъект("winmgmts://./root/cimv2");
		colItems = objWMIService.ExecQuery("Select StatusCode From Win32_PingStatus where Address = '" + СтрокаКасса.Ip + "'");
		
		Для Каждого objPingResult Из colItems Цикл

			Попытка
				Если objPingResult.StatusCode = 0 Тогда
					СтрокаДоступныхКасс = СтрокаДоступныхКасс + ", " + ВнешниеДанные.ФорматПоля(СтрокаКасса.Касса);
				Иначе
					ЗаписьЖурналаРегистрации("Недоступность кассы при инвентаризации", УровеньЖурналаРегистрации.Предупреждение,,, "Из-за недоступности кассы " + Формат(СтрокаКасса.Касса, "ЧГ=0") + " инвентаризация будет проведена без проверки загрузки чеков по этой кассе");
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации("Недоступность кассы при инвентаризации", УровеньЖурналаРегистрации.Предупреждение,,, "Из-за недоступности кассы " + Формат(СтрокаКасса.Касса, "ЧГ=0") + " инвентаризация будет проведена без проверки загрузки чеков по этой кассе");
			КонецПопытки;	
		КонецЦикла;	
	КонецЦикла;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Проверка загруженности максимального чека");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	Запрос = "declare @Date datetime = " + ВнешниеДанные.ФорматПоля(ДатаПроверки) + "
			|declare @DateStart datetime = " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаПроверки)) + "
			|SELECT PN.CashID, PN.Nomer FROM(Select PN.CashID, MAX(PN.ChequeNum) as Nomer FROM Loyalty.dbo.PurchaseNotification as PN (nolock)
			|WHERE PN.CashID IN (" + СтрокаДоступныхКасс + ")  and PN.DateTime >= @DateStart and PN.DateTime <= @Date
			|GROUP BY PN.CashID) as PN
			|LEFT OUTER JOIN (SELECT VZ_Zapros.CashID, MAX(VZ_Zapros.Nomer) as Nomer FROM (Select Ch.CashID, Ch.CashCheckNo as Nomer FROM SMS_REPL.dbo.Checks as Ch (nolock)
			|WHERE Ch.CashID IN (" + СтрокаДоступныхКасс + ") and Ch.CloseDate <= @Date
			|
			|UNION ALL
			|
			|Select Ch.Cash_ID, Ch.CashCheckNo as Nomer FROM SMS_REPL.dbo.Cash_move as Ch (nolock)
			|WHERE Ch.Cash_ID IN (" + СтрокаДоступныхКасс + ") and Ch.CloseDate <= @Date
			|
			|UNION ALL
			|
			|Select Ch.CashID, Ch.N_Int as Nomer FROM SMS_REPL.dbo.TD_move as Ch (nolock)
			|WHERE Ch.CashID IN (" + СтрокаДоступныхКасс + ") and Ch.CloseDate <= @Date) as VZ_Zapros
			|
			|GROUP BY VZ_Zapros.CashID) as Ch ON PN.CashID = Ch.CashID
			|WHERE PN.Nomer > Ch.Nomer";
			
	//СтруктураЗамер = Новый Структура("ДатаНачала, Шаг, Событие, ДополнительныйКлюч, ТекстЗапроса"
	//			, ТекущаяДата(), "Определение загружен ли максимальный чек по кассам", "Проведение инвентаризации товаров", Число(Формат(ТекущаяДата(), "ДФ=Hmmss") + Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0")), Запрос);		
			
	rs = ADOСоединение.Execute(Запрос);

	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		//rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтатусВозврата = Ложь;
			Прервать;
		КонецЦикла;
	Исключение
	КонецПопытки;				
	
	//СтруктураЗамер.Вставить("ДатаОкончания", ТекущаяДата());
	//ЗамерПроизводительностиSQLЗапросов.ЗаписатьДанныеЗамераВРегистр(СтруктураЗамер);
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
	ADOСоединение.Close();
	
	Возврат СтатусВозврата;
	
КонецФункции	

//+++АК KIRN 2018.05.22 ИП-00018269
&НаСервере
Процедура СоздатьПеремещениеВсехОстатков(УинОперации)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "declare @id_doc as uniqueidentifier= " + ВнешниеДанные.ФорматПоля(УинОперации) + "
					|, @ShopNo as int= " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.НомерТочкиПоАйпи) + "
					|,@Operation_Type int= -411
					|,@id_sklad int =10
					|,@CashierID int = 111
					|,@Descr varchar(200)=''
					|insert into SMS_REPL..TD_move (Id_doc,opendate,closedate, line_no, id_tov,operation_type,operation_type_orig,Quantity, CashierID,Corr_id_tt,Basesum,Descr,ShopNo_rep,Confirm_type,tduid )
					|select @id_doc id_doc,GETDATE() opendate,'1900-01-01T00:00:00',ROW_NUMBER() over (order by МестоВыкладки) line_no
					|,id_tov,@Operation_Type operation_Type,@Operation_Type operation_type_orig, КонОст Quantity, @CashierID CashierID, @id_sklad Corr_id_tt,0 basesum,@Descr,@ShopNo ShopNo_Rep,0 Confirm_type,NEWID()
					|from SMS_REPL..List_Ucheta (@ShopNo,CONVERT(date,getdate()),convert(date,getdate()))
					|where КонОст>0";
					
	ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + СтрокаЗапроса + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";				
					
	rs = ADOСоединение.Execute(ЗапросПолный);
КонецПроцедуры	
//---АК KIRN 

&НаКлиенте
Процедура СоздатьПеремещениеВсехОстатковНаСклад(Команда)
	//+++АК KIRN 2018.05.22 ИП-00018269 
	Если ЧекиПоКассамЗагружены(ТекущаяДата()) Тогда
	Иначе
		Ответ = Вопрос("Не все чеки по кассам загружены. Продолжить?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕСли;
	КонецЕСлИ;
	//---АК KIRN 	
	
	УинНовойОперации = Строка(Новый УникальныйИдентификатор());
	СоздатьПеремещениеВсехОстатков(УинНовойОперации);
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД", УинНовойОперации));
	
КонецПроцедуры

//+++АК SHEP 2018.07.05 ИП-00019140: вместо СоздатьПеремещениеВсехОстатковНаСклад()
// Проверку наличия не прогруженных чеков нужно убрать, она теперь реализована на стороне SQL
&НаКлиенте
Процедура СоздатьПеремещениеОстатков(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.РабочийСтолПродавца.Форма.ФормаСоздатьПеремещениеОстатков)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.РабочийСтолПродавца.Форма.ФормаСоздатьПеремещениеОстатков",, ЭтаФорма, "ТД_ЖурналТовародвижения");
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаказРеклМатериалов(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 800));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтменаЗаказРеклМатериалов(Команда)
	
	ИмяОбработки = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.ФормаСписка", Новый Структура("ИмяВнешнейОбработки", ИмяОбработки),, "ТД_ЖурналТовародвижения");
	Оповестить("ЗапросНаОткрытиеТоварнойОперации", Новый Структура("ИД, КодОперацииПриСоздании", "", 801));
	
КонецПроцедуры

Процедура УстановитьКонстантуПриходаСРазницей(Значение)
	
	Если Константы.МагазинамМожноПроводитьПриходСРазницейПоСкладу.Получить() <> Значение Тогда
		Константы.МагазинамМожноПроводитьПриходСРазницейПоСкладу.Установить(Значение);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РазрешениеПриходованияСРасхождениями(Команда)
	
	СписокКнопок = Новый СписокЗначений();
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Разрешить");
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Запретить");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Закрыть");
	Ответ = Вопрос("Выберите действие", СписокКнопок, 120, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКонстантуПриходаСРазницей(Истина);
		Предупреждение("Разрешен приход с расхождением");
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		УстановитьКонстантуПриходаСРазницей(Ложь);
		Предупреждение("Отменено разрешение прихода с расхождением");	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграничения(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.УстановкаТоварныхОграничений_Магазины.Форма.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.УстановкаТоварныхОграничений_Магазины.Форма.Форма", ,, "ТД_ТоварныеОграничения");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьНовыеЦенники1Нажатие(Элемент)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.ПечатьЦенниковМагазин.Форма.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.ПечатьЦенниковМагазин.Форма.Форма", Новый Структура("ПечатьНаЗавтра", Истина),, "ТД_ПечатьЦенников");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьНеотработанныеЗадачиТехнологаНажатие(Элемент)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.ОтчётПоЗадачамТехнолога.Форма.ФормаОтчета)")); 
	//---АК mika
	ОткрытьФорму("Отчет.ОтчётПоЗадачамТехнолога.Форма.ФормаОтчета", Новый Структура("СформироватьПриОткрытии,Активные,Неотработанные", Истина, Истина, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиТехнолога(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Документ.МП_ЗадачаТехнолога.ФормаСписка)")); 
	//---АК mika
	ОткрытьФорму("Документ.МП_ЗадачаТехнолога.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтчётПоЗадачамТехнолога(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.ОтчётПоЗадачамТехнолога.Форма)")); 
	//---АК mika	
	ОткрытьФорму("Отчет.ОтчётПоЗадачамТехнолога.Форма", Новый Структура("СформироватьПриОткрытии", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментМагазина(Команда)
	
	ОткрытьФорму("Обработка.ТоварныйАссортимент_Магазины.Форма.Форма", ,, "ТД_ТоварныеОграничения");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьЗадачиНаДегустациюНажатие(Элемент)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Документ.ЗадачаНаДегустациюНовинки.Форма.ЗадачиНаДегустацию)")); 
	//---АК mika	
	ОткрытьФорму("Документ.ЗадачаНаДегустациюНовинки.Форма.ЗадачиНаДегустацию",, ЭтаФорма);
КонецПроцедуры

//АК БЕЛН 27.04.2017+
&НаКлиенте
Процедура Обещания(Команда)
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Документ.Обещание.ФормаСписка)")); 
	//---АК mika	
	ОткрытьФорму("Документ.Обещание.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетРасшифровкаРаспределения(Команда)
	
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Отчет.РасшифровкаРаспределенияТоваровВТорговойТочке.Форма.ФормаОтчета)")); 
	//---АК mika
	
	ОткрытьФорму("Отчет.РасшифровкаРаспределенияТоваровВТорговойТочке.Форма.ФормаОтчета",, ЭтаФорма);
	
КонецПроцедуры

//АК БЕЛН 27.04.2017-


&НаКлиенте
Процедура КонтрольПросрочкиПоТоварам(Команда) //mind
	//+++АК mika 2018.08.09 ИП-00019475 "Статистика использования(Удалить)"↓
	ОбщегоНазначенияСервер.СтатистикаИспользованияПодсистемДобавитьЗапись(Новый Структура("Подсистема, ИмяОбъекта, ИмяФормы, ИмяЭлемента, ДопИнформация", 
			"Магазины", Лев(Этаформа.ИмяФормы,Найти(Этаформа.ИмяФормы,".Форма")-1) , Этаформа.ИмяФормы, СокрЛП(Этаформа.ТекущийЭлемент) +"."+?(Этаформа.ТекущийЭлемент <> Неопределено, Этаформа.ТекущийЭлемент.Имя, "Неопределено"), 
					"ОткрытьФорму(Обработка.РабочийСтолПродавца.Форма.ФормаРедактированияПросрочек)")); 
	//---АК mika	
	ОткрытьФорму("Обработка.РабочийСтолПродавца.Форма.ФормаРедактированияПросрочек",,, "ТД_РедактированиеПросрочек");
	
КонецПроцедуры

//mind 2017-10-23
&НаКлиенте
Процедура НадписьОПоставкахНажатие(Элемент)
	
	ЗагрузитьПриходные(Неопределено);
	
КонецПроцедуры

//+++АК SHEP 2018.12.12 ИП-00017103.02
&НаКлиенте
Процедура НадписьЕстьЗаказыПокупателейНаСегодняНажатие(Элемент)
	ПараметрыФормы = Новый Структура("ДатаНачала,ДатаОкончания,Магазин", НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()), ТорговаяТочка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ЗаказыПокупателейВМагазинах.Форма", ПараметрыФормы);
КонецПроцедуры

//+++АК SHEP 2018.12.12 ИП-00017103.02
&НаКлиенте
Процедура ОбновитьНадписьЕстьЗаказыПокупателейНаСегодня()
	ОбновитьНадписьЕстьЗаказыПокупателейНаСегодняСервер();
КонецПроцедуры

//+++АК SHEP 2018.12.12 ИП-00017103.02
&НаСервере
Процедура ОбновитьНадписьЕстьЗаказыПокупателейНаСегодняСервер()
	Элементы.НадписьЕстьЗаказыПокупателейНаСегодня.Видимость = Отчеты.ЗаказыПокупателейВМагазинах.Создать().ТаблицаДанных(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()), ТорговаяТочка, Истина);
КонецПроцедуры
