
//mika Дата: 2017.08.09


//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 
/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьНастройкиРежимаТестирования();

	ЗаполнитьДанныеПоТоварамSQLСервер();

	ПрименитьОтборыПоКатегории();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИзмененияПередЗакрытиемВопросЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Есть несохраненные данные! Сохранить перед закрытием?'", "ru"), РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнениеОсновныхПараметровРабочегоМеста();
	
КонецПроцедуры

//ОБРАБОТЧИКИ КОММАНД
/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПоказатьИсторию(Команда)
	
	ОбновитьВидимостьЭлементов();
	
	ОбновитьТаблицуИсторииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиSQL(Команда)
	
	Если ТабОстатковТоваров.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьВопросЗавершение", ЭтаФорма);
        ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена, а несохраненные данные утеряны! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбновитьОтборПоНоменклатуре(Ложь);
		
		ЗаполнитьДанныеПоТоварамSQLСервер();
		
		ОбновитьМодифицированностьФормы(Ложь);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбновитьОтборПоНоменклатуре(Ложь);
		
		ЗаполнитьДанныеПоТоварамSQLСервер();
		
		ОбновитьМодифицированностьФормы(Ложь);

	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИзмененияВопросЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать изменения?'", "ru"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьИзмененияСервер();
		
		ОбновитьТаблицуИсторииКлиент();
		
		ОбновитьМодифицированностьФормы(Ложь);
		
		ОбновитьОтборПоНоменклатуре(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияПередЗакрытиемВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьИзмененияСервер();
		
		ОбновитьМодифицированностьФормы(Ложь);
		
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ОбновитьМодифицированностьФормы(Ложь);
		
		ЭтаФорма.Закрыть();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеКолонки(Команда)
	
	Если Элементы.ТабОстатковТоваров.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(Элементы.ТабОстатковТоваров.ТекущиеДанные[СтрЗаменить(Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя, "ТабОстатковТоваров","")]);     	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор0(Команда)
	ОбновитьПризнакОтбораКатегории(0);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор1(Команда)
	ОбновитьПризнакОтбораКатегории(1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор2(Команда)
	ОбновитьПризнакОтбораКатегории(2);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор3(Команда)
	ОбновитьПризнакОтбораКатегории(3);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор4(Команда)
	ОбновитьПризнакОтбораКатегории(4);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломРаботы(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборНоменклатура(Команда)
	
	ОбновитьОтборПоНоменклатуре(НЕ ЗначениеЗаполнено(АдресСтруктурыОтборов));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФактическийОстатокСтрока(Команда)
	
	ТекущиеДанные = Элементы.ТабОстатковТоваров.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ОбновитьФактическийОстатокКлиент(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры


// ОБРАБОТЧИКИ СОБЫТИЙ ШАПКИ
/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	id_TT = ПолучитьЗначениеРеквизита(ТекущийМагазин, "НомерТочки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСрокамПриИзменении(Элемент)

	ОтборСтрок = Новый Структура(Элементы.ТабОстатковТоваров.ОтборСтрок);
	
	Если ЗначениеЗаполнено(ОтборПоСрокам) И НЕ ЗначениеЗаполнено(АдресСтруктурыОтборов)Тогда
		ОтборСтрок.Вставить("ОтметкаПоСрокам", ОтборПоСрокам);
	Иначе
		ОтборСтрок.Удалить("ОтметкаПоСрокам");
	КонецЕсли;
	
	Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

//+++АК LATV 2018.10.31 ИП-00020211
&НаКлиенте
Процедура БыстрыйОтбор_НоменклатураПриИзменении(Элемент)

	ОтборСтрок = Новый Структура(Элементы.ТабОстатковТоваров.ОтборСтрок);
	
	Если БыстрыйОтбор_Номенклатура.Пустая() Тогда
		ОтборСтрок.Удалить("Номенклатура");
	Иначе
		ОтборСтрок.Вставить("Номенклатура", БыстрыйОтбор_Номенклатура);
	КонецЕсли;
	
	Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ
/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТабОстатковТоваровДатаПроизводстваПриИзменении(Элемент)
	
	ПроверкаАктуальностиВводаДанных();
	
	ОбновлитьПоследнийДеньПродажи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровСрокГодностиДнейПриИзменении(Элемент)
	
	ОбновлитьПоследнийДеньПродажи ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьТаблицуИсторииКлиент", 0.1, Истина);
    ПодключитьОбработчикОжидания("ОбновитьСостояниеСтрокиОбработчик", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ТабОстатковТоваров.ТекущийЭлемент <> Неопределено Тогда 
		Если Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя = "ТабОстатковТоваровНоменклатура" 
			ИЛИ Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя = "ТабОстатковТоваровПроизводитель" Тогда
			Если ЗначениеЗаполнено(Элементы.ТабОстатковТоваров.ТекущиеДанные.TD_ost_detail_ID) Тогда
				Отказ = Истина;
				Если  Элемент.ТекущийЭлемент.Имя = "ТабОстатковТоваровНоменклатура" Тогда
					ОбновитьОтборПоНоменклатуре(Истина);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя = "ТабОстатковТоваровКомментарий" Тогда 
			Если Не Элементы.ТабОстатковТоваров.ТекущиеДанные.Изменена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.TD_ost_detail_ID)Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Элементы.ТабОстатковТоваров.ВыделенныеСтроки.Количество() > 20 Тогда
		ПоказатьПредупреждение(,"Запрещено удалять более 20-ти строк одновременно!");
		Возврат;
	КонецЕсли;
	
	ТекстВопросаRu = ?(Элемент.ТекущиеДанные.Удалена, "Отменить удаление строк", "Удалить строки");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуВопросЗавершение", ЭтаФорма), 
				НСтр("ru = '" + ТекстВопросаRu + "?'"), РежимДиалогаВопрос.ДаНет);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьПризнакУдаленияВыделенныеСтроки();
		ОбновитьСостояниеСтроки(Элементы.ТабОстатковТоваров.ТекущийЭлемент, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		СтрокаРедактирования = Элемент.ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если СтрокаРедактирования = Элемент.ТекущаяСтрока Тогда
		
		ОбновитьПризнакПросроченногоТовара(Элементы.ТабОстатковТоваров.ТекущиеДанные, НоваяСтрока);
		ОбновитьПризнакМодифицированностиСтроки(Элементы.ТабОстатковТоваров.ТекущиеДанные, НоваяСтрока);
		
		ОбновитьСостояниеСтроки(Элемент.ТекущийЭлемент, Истина);
		
		ОбновитьМодифицированностьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрТовары = Элементы.ТабОстатковТоваров.ТекущиеДанные;
	ТекСтрТовары.Номенклатура = ВыбранноеЗначение;
	
	ОбновлятьСписокВыбора = Истина;
	
	Если ОбработатьВыборНоменклатуры() Тогда
		
		ТекСтрТовары.НоваяСтрока = Истина;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрТовары.IDСтроки) Тогда
			ТекСтрТовары.IDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		ЗаполнитьДанныеПоТоварам(ВыбранноеЗначение, ТекСтрТовары.IDСтроки);

		Элементы.ТабОстатковТоваров.ЗакончитьРедактированиеСтроки(Ложь);
		
		Элементы.ТабОстатковТоваров.ТекущийЭлемент = Элементы.ТабОстатковТоваров.ПодчиненныеЭлементы.ТабОстатковТоваровДатаПроизводства;
		
	Иначе
		
		ОбновлятьСписокВыбора = Ложь;
		
	КонецЕсли;

	Если ОбновлятьСписокВыбора Тогда
		ОбновитьСписокВыбораПроизводителей(ТекСтрТовары);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьНоменклатуруПоЧастиТекста(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		КэшСпискаПроизводителей = Элементы.ТабОстатковТоваров.ПодчиненныеЭлементы.ТабОстатковТоваровПроизводитель.СписокВыбора; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ОбновитьЗначениеСкопированнойСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ
/////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнениеОсновныхПараметровРабочегоМеста()
	
	id_user = ПолучитьАвтора().УникальныйИдентификатор();
	
	ТекущийМагазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	
	id_TT = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийМагазин, "НомерТочки");
	
	Если НЕ ЗначениеЗаполнено(id_TT) Тогда
		Сообщить(НСтр("ru = 'Не удалось определелить текущий магазин пользователя, заполнение табличной части невозможно!'", "ru"));
		Возврат;
	КонецЕсли;
	
	//+++АК mika 2018.08.30 ИП-00019496
	НомерСтороннейТочки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийМагазин, "НомерСтороннейТочки"); 
	Если ЗначениеЗаполнено(НомерСтороннейТочки) Тогда
		Заголовок = СтрЗаменить(СтрЗаменить("Заголовок (Сторонняя розница: НомерСтороннейТочки)", "Заголовок", Заголовок), "НомерСтороннейТочки", Формат(НомерСтороннейТочки, "ЧГ=0"));
		Элементы.ТабОстатковТоваровPLU.Видимость = Истина;
	КонецЕсли;
	//---АК mika
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкиРежимаТестирования()
	
	Если Первые = 0 Тогда
		Первые = 100000;
	КонецЕсли;
	
	ОтборПоМагазину = Истина;

	Тестирование    = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	// Группа история
	Элементы.ТабДанныеПоказатьИсторию.Пометка = НЕ Элементы.ТабДанныеПоказатьИсторию.Пометка;
	Элементы.ГруппаИстория.Видимость = Элементы.ТабДанныеПоказатьИсторию.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоТоварамSQLСервер()

	Если НЕ ЗначениеЗаполнено(id_TT) Тогда
		Возврат;
	КонецЕсли;
	
	ТабОстатковТоваров.Очистить();
	
	ТаблицаОстатков = Новый ТаблицаЗначений();
	
	ТаблицаОстатков.Колонки.Добавить("TD_ost_detail_ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("date_proizv", Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("balance_ost", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаОстатков.Колонки.Добавить("Ost_kon", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаОстатков.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("ID_user" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	ТаблицаОстатков.Колонки.Добавить("comment" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Обработки.РабочийСтолПродавца.ОбнулениеПозицийБезОстатка(id_TT, ADOСоединение, id_user); 
	
	TOP = ?(ЗначениеЗаполнено(Первые), "TOP " + Формат(Первые,"ЧН=; ЧГ=0"), "");
	
	ТекстЗапросаОстатки = "SELECT " + TOP + "
	| ShopNo
	|,TD_ost_detail.id_tov
	|,id_kontr
	|,date_proizv
	|,SUM(balance_ost) as balance_ost
	|,MAX(TD_ost.Ost_kon) as Ost_kon
	|,MAX(1) as TD_ost_detail_ID
	|,MAX('') as comment
	|,MAX('') as ID_user
	|FROM [SMS_REPL].[dbo].[TD_ost_detail] TD_ost_detail (nolock)
	|	LEFT JOIN [SMS_REPL].[dbo].[TD_ost] TD_ost (nolock) 
	|		ON [ShopNo] = [ShopNo_rep] AND TD_ost_detail.id_tov = TD_ost.id_tov 
	|&Where 
	|GROUP BY ShopNo,TD_ost_detail.id_tov,id_kontr,date_proizv
	|HAVING SUM(TD_ost_detail.balance_ost)<>0
	|ORDER BY TD_ost_detail.id_tov,date_proizv";  
	
	УсловиеЗапроса = "";
	
	Если ОтборПоМагазину Тогда
		УсловиеЗапроса = " TD_ost_detail.ShopNo=" + Формат(id_TT,"ЧН=; ЧГ=0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоТовару) Тогда
		УсловиеЗапроса = УсловиеЗапроса + ?(ЗначениеЗаполнено(УсловиеЗапроса), " AND ", "") + " TD_ost_detail.id_tov=" + Формат(ОтборПоТовару,"ЧН=; ЧГ=0");
	КонецЕсли;

	ТекстЗапросаОстатки = СтрЗаменить(ТекстЗапросаОстатки,"&Where", ?(ЗначениеЗаполнено(УсловиеЗапроса), " WHERE " + УсловиеЗапроса + " AND ISNULL([balance_ost], 0) <> 0"," WHERE ISNULL([balance_ost], 0) <> 0")) ;
	
	rs = ADOСоединение.Execute(ТекстЗапросаОстатки);
	
	Попытка
		rs.MoveFirst();
		Сч = 1;
		Пока НЕ rs.EOF() Цикл

			НоваяСтрокаОстатков = ТаблицаОстатков.Добавить();
			
			Для каждого Колонка Из ТаблицаОстатков.Колонки Цикл
				НоваяСтрокаОстатков[Колонка.Имя] = rs.Fields(Колонка.Имя).Value;
			КонецЦикла;
			
			Сч = Сч+1;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(НСтр("ru = 'Нет записей по магазину " + id_TT + "!'", "ru"));
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ОбновитьТабличнуюЧастьОстатков(ТаблицаОстатков);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабличнуюЧастьОстатков(ТаблицаОстатков)

	ОбязательныеПоля = Новый Массив();
	ОбязательныеПоля.Добавить("ДатаПроизводства");  
	ОбязательныеПоля.Добавить("Остаток");   
	ОбязательныеПоля.Добавить("СрокГодностиДней");
	ОбязательныеПоля.Добавить("Комментарий");
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|   ВременнаяТаблица.TD_ost_detail_ID,
	|	ВременнаяТаблица.id_tov,
	|	ВременнаяТаблица.id_kontr,
	|	ВременнаяТаблица.date_proizv,
	|	ВременнаяТаблица.balance_ost, 
	|	ВременнаяТаблица.Ost_kon,
	|	ВременнаяТаблица.comment
	|ПОМЕСТИТЬ ВТ_Общая
	|ИЗ
	|	&ВременнаяТаблица КАК ВременнаяТаблица";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаОстатков);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Общая.TD_ost_detail_ID) КАК TD_ost_detail_ID,
	|	ВТ_Общая.id_tov,
	|	ВТ_Общая.id_kontr,
	|	ВТ_Общая.date_proizv,
	|	СУММА(ВТ_Общая.balance_ost) КАК balance_ost,
	|	СУММА(ВТ_Общая.Ost_kon) КАК Ost_kon,
	|	МИНИМУМ("""") КАК comment
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_Общая КАК ВТ_Общая
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Общая.date_proizv,
	|	ВТ_Общая.id_tov,
	|	ВТ_Общая.id_kontr
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Общая.balance_ost) <> 0";
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабИтоговая.id_tov,
	|	ЕСТЬNULL(ТабИтоговая.Номенклатура, СпрНоменклатура.Ссылка) КАК Номенклатура,
	|	ТабИтоговая.Сортировка,
	|	ТабИтоговая.МестоВыкладки,
	|	ТабИтоговая.СрокГодностиДней,
	|	ТабИтоговая.ДатаПроизводства КАК ДатаПроизводства,
	|	ТабИтоговая.Остаток,
	|	ТабИтоговая.ОстатокФакт,
	|	ТабИтоговая.id_kontr,
	|	ТабИтоговая.id_kontr1С,
	|	ТабИтоговая.ПоследнийДеньПродажи КАК ПоследнийДеньПродажи,
	|	ТабИтоговая.ОтметкаМесяцев,
	|	ТабИтоговая.ОтметкаПоСрокам,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ПоследнийДеньПродажи <> &ПустаяДата
	|				И ТабИтоговая.ПоследнийДеньПродажи < &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварПросрочен,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ПоследнийДеньПродажи <> &ПустаяДата
	|					И ТабИтоговая.ПоследнийДеньПродажи = &ТекущаяДата
	|				ИЛИ ТабИтоговая.ОтметкаМесяцев
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоследнийДень,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ДатаПроизводства = &ПустаяДата
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СортировкаДаты,
	|	Контрагенты.Ссылка КАК Производитель,
	|	ТабИтоговая.TD_ost_detail_ID КАК TD_ost_detail_ID,
	|	ТабИтоговая.Comment КАК Комментарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.id_tov КАК id_tov,
	|		Таб_Характеристики.Товар КАК Номенклатура,
	|		Таб_Характеристики.Сортировка КАК Сортировка,
	|		Таб_Выкладка.МестоВыкладки КАК МестоВыкладки,
	|		ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0)) КАК СрокГодностиДней,
	|		ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) КАК ДатаПроизводства,
	|		ЕСТЬNULL(ВТ.balance_ost, 0) КАК Остаток,
	|		ЕСТЬNULL(ВТ.Ost_kon, 0) КАК ОстатокФакт,
	|		ВТ.id_kontr КАК id_kontr,
	|		Таб_Характеристики.id_kontr1С КАК id_kontr1С,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 0
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1)
	|			ИНАЧЕ &ПустаяДата
	|		КОНЕЦ КАК ПоследнийДеньПродажи,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) >= 180
	|								И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) < 360
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 20
	|							ТОГДА ИСТИНА
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) >= 360
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 50
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОтметкаМесяцев,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) >= 8
	|								И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) < 31
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 3
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) > 0
	|							ТОГДА ""8_30_Дней""
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 30
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 7
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) > 0
	|							ТОГДА ""31_ИБолее_Дней""
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ОтметкаПоСрокам,
	|		ВТ.TD_ost_detail_ID КАК TD_ost_detail_ID,
	|		ВТ.comment КАК Comment
	|	ИЗ
	|		ВТ КАК ВТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках) КАК СрокГодности,
	|				0 КАК Сортировка,
	|				ХарактеристикиНоменклатуры.Владелец КАК Товар,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr КАК id_kontr1С
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	|				И ХарактеристикиНоменклатуры.Владелец.id_tov В
	|						(ВЫБРАТЬ
	|							ВТ.id_tov
	|						ИЗ
	|							ВТ КАК ВТ)
	|				И ХарактеристикиНоменклатуры.Владелец.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках),
	|				1,
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))
	|				И ХарактеристикиНоменклатуры.Владелец.id_tov В
	|						(ВЫБРАТЬ
	|							ВТ.id_tov
	|						ИЗ
	|							ВТ КАК ВТ)
	|				И ХарактеристикиНоменклатуры.Владелец.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr) КАК Таб_Характеристики
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки) КАК МестоВыкладки,
	|					ВыкладкаПланограммы.Номенклатура КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|				ГДЕ
	|					НЕ ВыкладкаПланограммы.Планограмма.НеАктуальная
	|					И НЕ ВыкладкаПланограммы.ТоварВыведен
	|					И НЕ ВыкладкаПланограммы.Номенклатура.Выведена
	|					И ВыкладкаПланограммы.Номенклатура.id_tov В
	|							(ВЫБРАТЬ
	|								ВТ.id_tov
	|							ИЗ
	|								ВТ КАК ВТ)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВыкладкаПланограммы.Номенклатура) КАК Таб_Выкладка
	|				ПО Таб_Характеристики.Товар = Таб_Выкладка.Ссылка
	|			ПО (Таб_Характеристики.id_tov = ВТ.id_tov)
	|				И (Таб_Характеристики.id_kontr1С = ВТ.id_kontr)) КАК ТабИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ВЫБОР
	|				КОГДА ТабИтоговая.id_kontr <> 0
	|					ТОГДА ТабИтоговая.id_kontr = Контрагенты.ИД
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТабИтоговая.id_tov = СпрНоменклатура.id_tov
	|ГДЕ
	|	СпрНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаДаты,
	|	ПоследнийДеньПродажи,
	|	ДатаПроизводства";
	
	//+++АК mika 2018.08.30 ИП-00019496	
	Если ЗначениеЗаполнено(НомерСтороннейТочки) Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ТабИтоговая.Comment КАК Комментарий", 
		"ТабИтоговая.Comment КАК Комментарий, Таб_PLU.PLU КАК PLU");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ПО ТабИтоговая.id_tov = СпрНоменклатура.id_tov", 
		"ПО ТабИтоговая.id_tov = СпрНоменклатура.id_tov
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov КАК Id_tov,
		|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ID_kontr,
		|			МАКСИМУМ(КонтурEDI_СоответствияТоваров.КодТовараПартнера) КАК PLU
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|				ПО КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov,
		|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД) КАК Таб_PLU
		|		ПО ТабИтоговая.id_tov = Таб_PLU.Id_tov
		|			И ТабИтоговая.id_kontr = Таб_PLU.ID_kontr");
		
	КонецЕсли;
	//---АК mika
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТабОстатковТоваров.Добавить();
			НоваяСтрока.IDСтроки = Новый УникальныйИдентификатор();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Для каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
				НоваяСтрока[Строка(ОбязательноеПоле) + 1] = НоваяСтрока[ОбязательноеПоле];      
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИсторииКлиент()
	
    ОбновитьДоступностьКнопокБыстрыхОтборовНоменклатуры();

	Если Элементы.ТабДанныеПоказатьИсторию.Пометка Тогда
		Если ОбновлятьИсториюИзменений(Элементы.ТабОстатковТоваров.ТекущиеДанные) Тогда
			ОбновитьТаблицуИстории(Элементы.ТабОстатковТоваров.ТекущиеДанные.id_tov, Элементы.ТабОстатковТоваров.ТекущиеДанные.id_kontr);
		Иначе
			TD_ost_detail_History.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСтрокиОбработчик()
	
	ОбновитьСостояниеСтроки(Элементы.ТабОстатковТоваров.ТекущийЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуИстории(id_tov, id_kontr)
	
	TD_ost_detail_History.Очистить();
	
	//Если НЕ ЗначениеЗаполнено(id_tov) ИЛИ НЕ ЗначениеЗаполнено(id_kontr) Тогда // Выводить историю по id_tov вцелом
	Если НЕ ЗначениеЗаполнено(id_tov) Тогда
		Возврат;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТаблицаИстории = Новый ТаблицаЗначений();
	ТаблицаИстории.Колонки.Добавить("ChangeDate", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИстории.Колонки.Добавить("deleted", Новый ОписаниеТипов("Булево"));
	ТаблицаИстории.Колонки.Добавить("TD_ost_detail_ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаИстории.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаИстории.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаИстории.Колонки.Добавить("date_proizv", Новый ОписаниеТипов("Дата"));
	ТаблицаИстории.Колонки.Добавить("balance_ost", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаИстории.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаИстории.Колонки.Добавить("ID_user" , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(38, ДопустимаяДлина.Фиксированная)));
	ТаблицаИстории.Колонки.Добавить("comment" , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	ТаблицаИстории.Колонки.Добавить("id_doc" , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(38, ДопустимаяДлина.Фиксированная)));
	
	ТекстЗапросаИстория = "SELECT   
	| [ChangeDate]
	|,[deleted]
	|,[TD_ost_detail_ID]
	|,[id_tov]
	|,ISNULL([id_kontr], 0) as id_kontr
	|,[date_proizv]
	|,[balance_ost]
	|,[ShopNo]
	|,[ID_user]
	|,[comment]
	|,[id_doc]
	|FROM [SMS_REPL].[dbo].[TD_ost_detail_History] (nolock)
	|&Where";
	
	ТекстЗапросаИстория = ?(ОтборПоМагазину, СтрЗаменить(ТекстЗапросаИстория,"&Where",
			" WHERE TD_ost_detail_History.ShopNo = " + Формат(id_TT,"ЧН=; ЧГ=0")+  
			" and TD_ost_detail_History.id_tov = " + Формат(id_tov,"ЧН=; ЧГ=0")+
	        // Отображать данные в таблице истории по номенклатуре вцелом
			//" and TD_ost_detail_History.id_kontr = " + Формат(id_kontr,"ЧН=; ЧГ=0")+ 
	        "" ),
	СтрЗаменить(ТекстЗапросаИстория,"&Where",""));
	
	rs = ADOСоединение.Execute(ТекстЗапросаИстория);
	
	Попытка
		rs.MoveFirst();
		Сч = 1;
		Пока НЕ rs.EOF() Цикл
			НоваяСтрокаИстории = ТаблицаИстории.Добавить();
			Для каждого Колонка Из ТаблицаИстории.Колонки Цикл
				НоваяСтрокаИстории[Колонка.Имя] = rs.Fields(Колонка.Имя).Value;
			КонецЦикла;
			Сч = Сч+1;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Если Тестирование Тогда
			Сообщить(НСтр("ru = 'Не удалось получить данные!'", "ru") + " " + ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Если ТаблицаИстории.Количество() Тогда
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВременнаяТаблица.ChangeDate,
		|	ВременнаяТаблица.deleted,
		|	ВременнаяТаблица.TD_ost_detail_ID,
		|	ВременнаяТаблица.id_tov,
		|	ВременнаяТаблица.id_kontr,
		|	ВременнаяТаблица.date_proizv,
		|	ВременнаяТаблица.balance_ost,
		|	ВременнаяТаблица.id_user,
		|	ВременнаяТаблица.ShopNo,
		|	ВременнаяТаблица.comment,
		|   ВременнаяТаблица.id_doc
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ВременнаяТаблица КАК ВременнаяТаблица";
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаИстории);
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));             
		
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВТ.ChangeDate КАК ChangeDate,
		|	ВТ.deleted,
		|	ВТ.TD_ost_detail_ID,
		|	ВТ.id_tov,
		|	ВТ.id_kontr,
		|	ВТ.date_proizv,
		|	ВТ.balance_ost,
		|	ВТ.ShopNo,
		|	ВТ.comment,
		|	ВТ.ID_user,
		|	ВТ.id_doc,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Контрагенты.Ссылка КАК Производитель
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ.id_tov = Номенклатура.id_tov
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (ВЫБОР
		|				КОГДА ВТ.id_kontr = 0
		|						ИЛИ ВТ.id_kontr ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ВТ.id_kontr = Контрагенты.ИД
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ChangeDate УБЫВ,
		|	id_kontr УБЫВ,
		|   date_proizv,
		|	ВТ.balance_ost УБЫВ";
		
		Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = TD_ost_detail_History.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.id_doc = СокрЛП(НоваяСтрока.id_doc);
			
			Если ЗначениеЗаполнено(Выборка.ID_user) Тогда
				НоваяСтрока.ID_user = Выборка.ID_user;
				НоваяСтрока.АвторИзменения = ПолучитьАвтораИзменения(Выборка.ID_user);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Иначе
		TD_ost_detail_History.Очистить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновлятьИсториюИзменений(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.id_tov) Тогда
		//ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.id_kontr)Тогда  // Выводить историю по id_tov вцелом
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОбновлитьПоследнийДеньПродажи();
	
	ТекущиеДанные = Элементы.ТабОстатковТоваров.ТекущиеДанные; 
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПроизводства) И ЗначениеЗаполнено(ТекущиеДанные.СрокГодностиДней) Тогда
			ТекущиеДанные.ПоследнийДеньПродажи = ТекущиеДанные.ДатаПроизводства + 86400 * (ТекущиеДанные.СрокГодностиДней - 1);
			ТекущиеДанные.ПоследнийДень = ТекущиеДанные.ПоследнийДеньПродажи = НачалоДня(ТекущаяДата());
		Иначе
			ТекущиеДанные.ПоследнийДеньПродажи = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПризнакПросроченногоТовара(ТекущиеДанные, НоваяСтрока = Ложь)
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.ТоварПросрочен = Не НоваяСтрока 
			И ЗначениеЗаполнено(ТекущиеДанные.ПоследнийДеньПродажи) 
				И ТекущиеДанные.ПоследнийДеньПродажи < НачалоДня(ТекущаяДата());
	КонецЕсли;	
			
КонецПроцедуры
		
&НаКлиенте
Процедура ОбновитьПризнакМодифицированностиСтроки(ТекущиеДанные, НоваяСтрока = Ложь, МассивИдентификаторов = Неопределено)
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.Изменена = ТекущиеДанные.ДатаПроизводства <> ТекущиеДанные.ДатаПроизводства1 
			ИЛИ ТекущиеДанные.Остаток <> ТекущиеДанные.Остаток1 
				ИЛИ ТекущиеДанные.СрокГодностиДней <> ТекущиеДанные.СрокГодностиДней1
						ИЛИ ТекущиеДанные.Комментарий <> ТекущиеДанные.Комментарий1
							 	ИЛИ НоваяСтрока ИЛИ ТекущиеДанные.Копирована; 
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакМодифицированностиСтроки(МассивИдентификаторов)
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		
		Для каждого ЭлементМассива Из МассивИдентификаторов Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("IDСтроки", ЭлементМассива);
			НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого ТекущиеДанные Из НайденныеСтроки Цикл
				
				ТекущиеДанные.Изменена = Ложь;
				ТекущиеДанные.НоваяСтрока = Ложь;
				ТекущиеДанные.Копирована  = Ложь;
				ТекущиеДанные.ДатаПроизводства1 = ТекущиеДанные.ДатаПроизводства;
				ТекущиеДанные.Остаток1 			= ТекущиеДанные.Остаток; 
				ТекущиеДанные.СрокГодностиДней1 = ТекущиеДанные.СрокГодностиДней;
				ТекущиеДанные.Комментарий1 		= ТекущиеДанные.Комментарий;
				
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.TD_ost_detail_ID) Тогда
					ТекущиеДанные.TD_ost_detail_ID = Новый УникальныйИдентификатор();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУдаленныеСтроки()
	
	НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(Новый Структура("Удалена", Истина));
	
	Для Каждого ТекущиеДанные Из НайденныеСтроки Цикл
		ТабОстатковТоваров.Удалить(ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакУдаленияВыделенныеСтроки()
	
	Для каждого Идентификатор Из Элементы.ТабОстатковТоваров.ВыделенныеСтроки Цикл
		ОбновитьПризнакУдаленияСтроки(ТабОстатковТоваров.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНоменклатуруПоЧастиТекста(Текст)
	
    ПараметрыПодбора    =    Новый Структура("ДополнительныеПараметры, ТекстПоиска", "ПодборДляМагазина", Текст);
    Возврат ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ПараметрыПодбора);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначениеСкопированнойСтроки(Элемент)
	
	Элемент.ТекущиеДанные.IDСтроки          = Новый УникальныйИдентификатор();
	Элемент.ТекущиеДанные.Изменена          = Истина;
	Элемент.ТекущиеДанные.НоваяСтрока 		= Истина;
	Элемент.ТекущиеДанные.Копирована 		= Истина;
	Элемент.ТекущиеДанные.Удалена  			= Ложь;
	Элемент.ТекущиеДанные.ТоварПросрочен 	= Ложь;
	Элемент.ТекущиеДанные.ПоследнийДень  	= Ложь;
	Элемент.ТекущиеДанные.ОтметкаМесяцев  	= Ложь;
	Элемент.ТекущиеДанные.ДатаПроизводства  = Дата(1,1,1);
	Элемент.ТекущиеДанные.ДатаПроизводства1 = Дата(1,1,1);
	Элемент.ТекущиеДанные.Остаток           = 0;
	Элемент.ТекущиеДанные.Остаток1          = 0;
	Элемент.ТекущиеДанные.ПоследнийДеньПродажи = Дата(1,1,1); 
	Элемент.ТекущиеДанные.ДатаПоследнегоИзменения  = Дата(1,1,1);
	Элемент.ТекущиеДанные.АвторИзменения    = Неопределено;
	Элемент.ТекущиеДанные.ID_User           = "";
	Элемент.ТекущиеДанные.Комментарий       = "";
	Элемент.ТекущиеДанные.Комментарий1      = "";
	Элемент.ТекущиеДанные.TD_ost_detail_ID  = "";
	
	ОбновитьСписокВыбораПроизводителей(Элемент.ТекущиеДанные);
	
	Элементы.ТабОстатковТоваров.ТекущийЭлемент = Элемент.ТекущиеДанные.ДатаПроизводства;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакУдаленияСтроки(СтрокаОстатков)
	
	Если СтрокаОстатков <> Неопределено Тогда
		
		СтрокаОстатков.Удалена  = НЕ СтрокаОстатков.Удалена;
		
		Если СтрокаОстатков.Удалена Тогда
			СтрокаОстатков.Изменена = Истина;
		Иначе
			ОбновитьПризнакМодифицированностиСтроки(СтрокаОстатков, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСервер()
	
	ПодключениеУстановлено = Ложь;	
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТабОстатковТоваров.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ *,
	| ВТ.Производитель.ИД КАК ПроизводительИД 
	|ИЗ
	| ВТ КАК ВТ
	|ГДЕ
	| ВТ.Изменена";
	
	Результат = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура();
	
	Для каждого Колонка ИЗ Результат.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	СтруктураДанных.Вставить("date", Неопределено);
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Не ПодключениеУстановлено Тогда

			ADOСоединение 	= ВнешниеДанные.ПолучитьADOСоединение();
			МассивИдентификаторов  = Новый Массив();
			ПодключениеУстановлено = Истина;
			
		КонецЕсли;
		   
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗаполненыВсеОбязательныеПоля(Выборка)Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);

			ДатаПроизводстваИзменение = Ложь;
			ОстатокИзменение = Ложь;

			Если СтруктураДанных.ДатаПроизводства <> СтруктураДанных.ДатаПроизводства1 Тогда
		        ДатаПроизводстваИзменение = Истина;
			КонецЕсли;
			
			Если СтруктураДанных.Остаток <> СтруктураДанных.Остаток1 Тогда
		        ОстатокИзменение = Истина;
			КонецЕсли;
			
			СтруктураДанных.date = ТекущаяДата();

			//Добавление новой строки или удаление существующей
			Если СтруктураДанных.НоваяСтрока ИЛИ СтруктураДанных.Удалена Тогда 
				
				Обработки.РабочийСтолПродавца.ЗаписьInsert(id_TT, СтруктураДанных, ADOСоединение, МассивИдентификаторов, id_user);
				
			//Редактирование остатка (приход/расход)	
			ИначеЕсли ОстатокИзменение И Не ДатаПроизводстваИзменение Тогда 
				
				СтруктураДанных.Остаток = СтруктураДанных.Остаток - СтруктураДанных.Остаток1; 
				
				Обработки.РабочийСтолПродавца.ЗаписьInsert(id_TT, СтруктураДанных, ADOСоединение, МассивИдентификаторов, id_user);
				
			//Если изменены несколько показателей одновлеменно (Удаление старой строки/Добавление новой строки)
			Иначе	

				СтруктураДанных.Удалена = Истина;
				
				//Удаление старой строки
				СтруктураДанных.ДатаПроизводства = СтруктураДанных.ДатаПроизводства1;
				СтруктураДанных.Остаток = СтруктураДанных.Остаток1;

				Обработки.РабочийСтолПродавца.ЗаписьInsert(id_TT, СтруктураДанных, ADOСоединение, МассивИдентификаторов, id_user);
				
				//Добавление новой строки
			    ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
					
				Обработки.РабочийСтолПродавца.ЗаписьInsert(id_TT, СтруктураДанных, ADOСоединение, МассивИдентификаторов, id_user)
				
			КонецЕсли;
			
		КонецЦикла;
		
		СнятьПризнакМодифицированностиСтроки(МассивИдентификаторов);
		
	КонецЕсли;
	
	ОчиститьУдаленныеСтроки();
	
	Если ПодключениеУстановлено Тогда
		ADOСоединение.Close();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполненыВсеОбязательныеПоля(Выборка)
	
	Возврат Тестирование ИЛИ 
		(ЗначениеЗаполнено(Выборка.id_tov)
			И ЗначениеЗаполнено(Выборка.ПроизводительИД)
				И ЗначениеЗаполнено(Выборка.ДатаПроизводства)
					И ЗначениеЗаполнено(Выборка.Остаток))
					    ИЛИ Выборка.Удалена;
							 
КонецФункции

&НаСервере
Функция ФорматПоля(Поле, ФорматДатыБезВремени = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Если ФорматДатыБезВремени Тогда
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-dd") + "'";
		Иначе	
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + Поле + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТабДанныеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрТовары = Элементы.ТабДанные.ТекущиеДанные;
	ТекСтрТовары.Номенклатура = ВыбранноеЗначение;
	Если ОбработатьВыборНоменклатуры() Тогда
		ЗаполнитьДанныеПоТоварам(ВыбранноеЗначение, ТекСтрТовары.IDСтроки);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДоступныхПроизводителей(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	СправочникХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Значение,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение)
	|	КОНЕЦ КАК Представление,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение.ИД
	|	КОНЕЦ КАК id_kontr,
	|	ИСТИНА КАК Пометка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = СправочникХарактеристикиНоменклатуры.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	СправочникХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И НЕ СправочникХарактеристикиНоменклатуры.Неактивная
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшТаблицыДоступныхПроизводителей()
	
	Запрос = Новый Запрос;
	
	//+++АК mika 2018.08.30 ИП-00019496
	Если ЗначениеЗаполнено(НомерСтороннейТочки) Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Таб_Итоговая.Номенклатура,
		|	Таб_Итоговая.Характеристика,
		|	Таб_Итоговая.Значение,
		|	Таб_Итоговая.Представление,
		|	Таб_Итоговая.id_kontr,
		|	Таб_Итоговая.Пометка,
		|	Таб_Итоговая.id_tov,
		|	Таб_PLU.PLU
		|ИЗ
		|	(ВЫБРАТЬ
		|		СправочникХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|		СправочникХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|		ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Значение,
		|		ВЫБОР
		|			КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
		|				ТОГДА """"
		|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение)
		|		КОНЕЦ КАК Представление,
		|		СправочникХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
		|		ВЫБОР
		|			КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ЗначенияСвойствОбъектов.Значение.ИД
		|		КОНЕЦ КАК id_kontr,
		|		ИСТИНА КАК Пометка
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО (ЗначенияСвойствОбъектов.Объект = СправочникХарактеристикиНоменклатуры.Ссылка)
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|	ГДЕ
		|		СправочникХарактеристикиНоменклатуры.Владелец = &Владелец
		|		И НЕ СправочникХарактеристикиНоменклатуры.Неактивная) КАК Таб_Итоговая
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov КАК Id_tov,
		|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ID_kontr,
		|			МАКСИМУМ(КонтурEDI_СоответствияТоваров.КодТовараПартнера) КАК PLU
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|				ПО КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov,
		|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД) КАК Таб_PLU
		|		ПО Таб_Итоговая.id_tov = Таб_PLU.Id_tov
		|			И Таб_Итоговая.id_kontr = Таб_PLU.ID_kontr
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таб_Итоговая.Представление";
    //---АК mika
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СправочникХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	СправочникХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Значение,
		|	ВЫБОР
		|		КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
		|			ТОГДА """"
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение)
		|	КОНЕЦ КАК Представление,
		|	ВЫБОР
		|		КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение.ИД
		|	КОНЕЦ КАК id_kontr,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = СправочникХарактеристикиНоменклатуры.Ссылка)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	СправочникХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И НЕ СправочникХарактеристикиНоменклатуры.Неактивная
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", КэшТекущаяНоменклатура);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		КэшТаблицыПроизводителей.Загрузить(Результат.Выгрузить());
		//Возврат Результат.Выгрузить();
	Иначе
		КэшТаблицыПроизводителей.Очистить();
		//Возврат Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораПроизводителей(ТекущиеДанные);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ТабОстатковТоваров.ПодчиненныеЭлементы.ТабОстатковТоваровПроизводитель.СписокВыбора.Очистить();
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			
			КэшТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
			ЗаполнитьКэшТаблицыДоступныхПроизводителей();
			
			Если КэшТаблицыПроизводителей <> Неопределено Тогда
				УстановленоЗначение = Ложь;
				Для каждого Строка Из КэшТаблицыПроизводителей Цикл
					Если Не УстановленоЗначение Тогда
						ТекущиеДанные.Производитель = Строка.Значение;
						ТекущиеДанные.id_kontr = Строка.id_kontr;
						Если ЗначениеЗаполнено(НомерСтороннейТочки) Тогда
							ТекущиеДанные.PLU = Строка.PLU; //+++АК mika 2018.08.30 ИП-00019496
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Элементы.ТабОстатковТоваров.ПодчиненныеЭлементы.ТабОстатковТоваровПроизводитель.СписокВыбора.Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАвтораИзменения(ID_user)
	
	ID_userСтрока = СтрЗаменить(СтрЗаменить(ID_user,"{",""), "}",""); 
	
	АвторИзменения = Справочники.ПерсоналККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(ID_userСтрока));
	
	Если НЕ ЗначениеЗаполнено(АвторИзменения.Код) Тогда
		АвторИзменения = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ID_userСтрока));
	КонецЕсли;
	
	Возврат АвторИзменения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизвита)
	
	Возврат СсылкаНаОбъект[ИмяРеквизвита];
	
КонецФункции

&НаКлиенте
Процедура РежимТестирования(Команда)
	
	Элементы.ГруппаТестирование.Видимость = НЕ Элементы.ГруппаТестирование.Видимость;
	
	Тестирование = Не Тестирование;
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ТабОстатковТоваровИзменена");
	СтруктураПолей.Вставить("ТабОстатковТоваровНоваяСтрока");
	СтруктураПолей.Вставить("ТабОстатковТоваровКопирована");
	СтруктураПолей.Вставить("ТабОстатковТоваровУдалена");
	СтруктураПолей.Вставить("ТабОстатковТоваровТоварПросрочен");
	СтруктураПолей.Вставить("ТабОстатковТоваровПоследнийДень");
	СтруктураПолей.Вставить("ТабОстатковТоваровОтметкаМесяцев");
	СтруктураПолей.Вставить("ТабОстатковТоваровОтметкаПоСрокам");
	СтруктураПолей.Вставить("ТабОстатковТоваровid_tov");
	СтруктураПолей.Вставить("ТабОстатковТоваровid_kontr");
	
	Для каждого ЭлементСтруктуры ИЗ СтруктураПолей Цикл
		Элементы[ЭлементСтруктуры.Ключ].Видимость = Не Элементы [ЭлементСтруктуры.Ключ].Видимость;     
	КонецЦикла;
	
	Если НЕ Элементы.ГруппаТестирование.Видимость Тогда
		ЗаполнениеОсновныхПараметровРабочегоМеста();
	КонецЕсли;
	 	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСтроки(Элемент, ОбновлятьСостояние = Ложь)
	
	Если НЕ ОбновлятьСостояние И НЕ ОбновлятьСостояниеСтроки() Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеСтроки = "";
	
	Если Элементы.ТабОстатковТоваров.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТабОстатковТоваров.ТекущиеДанные.НоваяСтрока Тогда
		СостояниеСтроки = "Новая";
	ИначеЕсли Элементы.ТабОстатковТоваров.ТекущиеДанные.Удалена Тогда
		СостояниеСтроки = "Удалена";
	ИначеЕсли Элементы.ТабОстатковТоваров.ТекущиеДанные.Изменена Тогда
		СостояниеСтроки = "Изменена";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеСтроки) Тогда
		СостояниеСтроки = "Состояние строки: Не редактировалась";
		Возврат;
	КонецЕсли;
	
	ИзначальноеЗначение = "";
	
	Если Элемент <> Неопределено Тогда
		Если Элемент.Имя = "ТабОстатковТоваровДатаПроизводства" 
			ИЛИ Элемент.Имя = "ТабОстатковТоваровОстаток" Тогда
			
			КолонкаИмя = СтрЗаменить(Элемент.Имя, "ТабОстатковТоваров","");
			
			Если Элементы.ТабОстатковТоваров.ТекущиеДанные[КолонкаИмя]  <> Элементы.ТабОстатковТоваров.ТекущиеДанные[КолонкаИмя + 1] Тогда 
				ИзначальноеЗначение = " (изначальное знач. ячейки: " + ПреобразоватьЗначениеЯчейки(Элементы.ТабОстатковТоваров.ТекущиеДанные[КолонкаИмя + 1]) + ")";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СостояниеСтроки = "Состояние строки: " + СостояниеСтроки + ИзначальноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПриАктивизацииПоля(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСостояниеСтрокиОбработчик", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ОбновлятьСостояниеСтроки()
	
	Если ТекущаяСтрока = Неопределено 
		ИЛИ ТекущаяКолонка = Неопределено Тогда
		
			ТекущаяСтрока = Элементы.ТабОстатковТоваров.ТекущаяСтрока;
			ТекущаяКолонка = ?(Элементы.ТабОстатковТоваров.ТекущийЭлемент = Неопределено, 
						Неопределено, Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя);
			
			Возврат Истина;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Элементы.ТабОстатковТоваров.ТекущаяСтрока
		ИЛИ ТекущаяКолонка <> Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя Тогда
		
			ТекущаяСтрока = Элементы.ТабОстатковТоваров.ТекущаяСтрока;
			ТекущаяКолонка = ?(Элементы.ТабОстатковТоваров.ТекущийЭлемент = Неопределено, 
						Неопределено, Элементы.ТабОстатковТоваров.ТекущийЭлемент.Имя);
			
			Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьЗначениеЯчейки(ТекущееЗначение)
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Дата") Тогда
		Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
			Возврат "Не установлена";
		Иначе
			Возврат Формат(ТекущееЗначение, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	Иначе
		Возврат СокрЛП(ТекущееЗначение);
	КонецЕсли;
	
КонецФункции                                 

&НаКлиенте
Процедура ОбновитьМодифицированностьФормы(ПризнакМодификации)
	 
	ЭтаФорма.Модифицированность = ПризнакМодификации;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОстатковТоваровПослеУдаления(Элемент)
	
	ОбновитьМодифицированностьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакОтбораКатегории(ПризнакОтбора)
	
	ОтборПоКатегории = ПризнакОтбора;
	
	ПрименитьОтборыПоКатегории(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборыПоКатегории()
	
	СтруктураЦветовСтиля = Новый Структура("ЦветТекстаФормы, ЦветРамки");
	СтруктураЦветовСтиля = ПолучитьСтруктуруЦветовСтиляСервер(СтруктураЦветовСтиля);
	
	Сч = 0;
	Пока Сч < 5 Цикл
		Элементы["КомандаОтбор" + Сч].ЦветРамки = ?(Сч = ОтборПоКатегории, СтруктураЦветовСтиля.ЦветТекстаФормы, СтруктураЦветовСтиля.ЦветРамки);
		Сч = Сч + 1;
	КонецЦикла;
	
	Если ОтборПоКатегории = 1 Тогда
		Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("ДатаПроизводства", Дата(1,1,1));
	ИначеЕсли ОтборПоКатегории = 2 Тогда
		Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("ТоварПросрочен", Истина);
	ИначеЕсли ОтборПоКатегории = 3 Тогда
		Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("ПоследнийДень", Истина);
	ИначеЕсли ОтборПоКатегории = 4 Тогда
		Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("Изменена", Истина);
	Иначе
		Элементы.ТабОстатковТоваров.ОтборСтрок = Неопределено;
	КонецЕсли;

	ОтборПоСрокамПриИзменении(Истина);
	
	Этаформа.ТекущийЭлемент = Элементы.ТабОстатковТоваров;
	
	ОбновитьДоступностьКнопокБыстрыхОтборовНоменклатуры();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЦветовСтиляСервер(СтруктураЦветов)
	
	СтруктураЦветовСтиля = Новый Структура();
	Для каждого ЭлементСтруктуры Из СтруктураЦветов Цикл
		СтруктураЦветовСтиля.Вставить(ЭлементСтруктуры.Ключ, ЦветаСтиля[ЭлементСтруктуры.Ключ]);     
	КонецЦикла;
	
	Возврат СтруктураЦветовСтиля;
	
КонецФункции	

&НаСервере
Процедура Удалить_ОбнулениеПозицийБезОстатка(ADOСоединение);
	
	ТекстЗапроса = 
	
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	//Основной текст запроса
	|INSERT INTO SMS_REPL.dbo.TD_ost_detail
	|                      (ShopNo, id_tov, id_kontr, date_proizv, balance_ost, comment, id_user)
	|SELECT TD_ost_detail.ShopNo
	|, TD_ost_detail.id_tov
	|, TD_ost_detail.id_kontr
	|, TD_ost_detail.date_proizv
	|, - SUM(TD_ost_detail.balance_ost) AS balance_ost
	|, 'correction' AS comment
	|, " + ВнешниеДанные.ФорматПоля(id_user) + " AS id_user
	|FROM (SELECT id_tov, ShopNo_rep
	|          FROM SMS_REPL.dbo.TD_ost WITH (nolock)
	|          WHERE(ShopNo_rep = " + ВнешниеДанные.ФорматПоля(id_TT) + ")
	|          GROUP BY id_tov, ShopNo_rep
	|          HAVING(SUM(Ost_kon) = 0)) AS Tab_ost LEFT JOIN
	|          SMS_REPL.dbo.TD_ost_detail AS TD_ost_detail WITH (nolock) ON 
	|                   Tab_ost.ShopNo_rep = TD_ost_detail.ShopNo 
	|								AND Tab_ost.id_tov = TD_ost_detail.id_tov
	|WHERE (TD_ost_detail.ShopNo = " + ВнешниеДанные.ФорматПоля(id_TT) + ") 
	|--AND (TD_ost_detail.id_tov = '371')
	|GROUP BY TD_ost_detail.ShopNo, TD_ost_detail.id_tov, TD_ost_detail.id_kontr, TD_ost_detail.date_proizv
	|HAVING (SUM(TD_ost_detail.balance_ost) <> 0)	
	//Основной текст запроса
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка создания записей Correction", УровеньЖурналаРегистрации.Ошибка,,, 
							ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстЗапроса);
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАвтора()
	
	Попытка
		АвторИзменения = ПараметрыСеанса.ТекущийПродавец;
	Исключение
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(АвторИзменения) Тогда
		АвторИзменения = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Возврат АвторИзменения;
	
КонецФункции	

&НаКлиенте
Функция ОбработатьВыборНоменклатуры()
	
	ТекДанные = Элементы.ТабОстатковТоваров.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
		Если НайденныеСтроки.Количество() > 1 Тогда
			Ответ = Вопрос("Уже есть строка с данной номенклатурой. Показать?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Истина;
			Иначе
				ТабОстатковТоваров.Удалить(Элементы.ТабОстатковТоваров.ТекущиеДанные);
				НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
				Элементы.ТабОстатковТоваров.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				Элементы.ТабОстатковТоваров.ВыделенныеСтроки.Добавить(НайденныеСтроки[0]);
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоТоварам(Товар = Неопределено, IDСтроки)
	
	МассивТовары = Новый Массив();
	Если ЗначениеЗаполнено(Товар) Тогда
		МассивТовары.Добавить(Товар);
	Иначе	
		Для Каждого СтрокаТаб Из ТабОстатковТоваров Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.СрокГодностиДней) Тогда
				МассивТовары.Добавить(СтрокаТаб.Номенклатура);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Товары", МассивТовары);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЗ_Запрос.СрокГодности,
	|	ВЗ_Запрос.Сортировка,
	|	ВЗ_Запрос.Товар КАК Товар,
	|	ВЗ_Запрос.Товар.id_tov КАК id_tov
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках) КАК СрокГодности,
	|		0 КАК Сортировка,
	|		ХарактеристикиНоменклатуры.Владелец КАК Товар
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.Владелец В(&Товары)
	|		И ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХарактеристикиНоменклатуры.Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках),
	|		1,
	|		ХарактеристикиНоменклатуры.Владелец
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.Владелец В(&Товары)
	|		И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХарактеристикиНоменклатуры.Владелец) КАК ВЗ_Запрос
	|ГДЕ
	|	НЕ ВЗ_Запрос.СрокГодности ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар,
	|	ВЗ_Запрос.Сортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.МестоВыкладки,
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки) КАК МестоВыкладки,
	|			ВыкладкаПланограммы.Номенклатура КАК Ссылка
	|		ИЗ
	|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|		ГДЕ
	|			ВыкладкаПланограммы.Планограмма.НеАктуальная = ЛОЖЬ
	|			И ВыкладкаПланограммы.ТоварВыведен = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыкладкаПланограммы.Номенклатура) КАК ВЗ_Запрос
	|		ПО Номенклатура.Ссылка = ВЗ_Запрос.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ВЗ_Запрос.МестоВыкладки, ЗНАЧЕНИЕ(Справочник.МестаВыкладки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.МестаВыкладки.ПустаяСсылка)
	|	И Номенклатура.Выведена = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	Результаты = Запрос.ВыполнитьПакет();			   
	ТабКешМеста = Результаты[1].Выгрузить();
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Товар") Цикл
		Если Выборка.Следующий() Тогда
			НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(Новый Структура("IDСтроки", IDСтроки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].СрокГодностиДней = Выборка.СрокГодности;
				НайденныеСтроки[0].id_tov = Выборка.id_tov;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТабОстатковТоваров Цикл
		СтрокаКеш = ТабКешМеста.Найти(СтрокаТаб.Номенклатура, "Ссылка");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаТаб.МестоВыкладки = СтрокаКеш.МестоВыкладки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) Тогда
			СтрокаТаб.ПоследнийДеньПродажи = СтрокаТаб.ДатаПроизводства + 86400 * (СтрокаТаб.СрокГодностиДней - 1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.ПоследнийДеньПродажи)
			И СтрокаТаб.ПоследнийДеньПродажи <= НачалоДня(ТекущаяДата()) Тогда
			СтрокаТаб.ТоварПросрочен = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Печать(Команда)
	
	МассивИдентификаторов = Новый Массив();
	
	Для Каждого СтрокаТаб Из ТабОстатковТоваров Цикл
		ИдентификаторСтроки = СтрокаТаб.ПолучитьИдентификатор();
		Если Элементы.ТабОстатковТоваров.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			МассивИдентификаторов.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;	

	ТабличныйДокумент = ПечатьНаСервере(МассивИдентификаторов);
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабличныйДокумент, Истина, Истина, "Контроль просрочки"),, Новый УникальныйИдентификатор());
		
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(МассивИдентификаторов)
	
	ТабДокумент = Новый ТабличныйДокумент();
	
	Макет   = Обработки.РабочийСтолПродавца.ПолучитьМакет("ПечатьТаблицы");
	Область = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент.Вывести(Область);
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторов Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ТабОстатковТоваров.НайтиПоИдентификатору(ИдентификаторСтроки));
		ТабДокумент.Вывести(Область);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции	

&НаКлиенте
Процедура ПроверкаАктуальностиВводаДанных()
	
	Если Элементы.ТабОстатковТоваров.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяДата = НачалоДня(ТекущаяДата());
		
		//Проверка ввода Даты производства 
		Если Элементы.ТабОстатковТоваров.ТекущиеДанные.ДатаПроизводства < ДобавитьМесяц(ТекущаяДата, - 12 * 3)// 3 года 
			ИЛИ Элементы.ТабОстатковТоваров.ТекущиеДанные.ДатаПроизводства > ТекущаяДата + 86400 * 10 Тогда   // 10 дней запаса, на "всякий" случай.  
			
			  Сообщить(СтрЗаменить(НСтр("ru = 'Указана неверная ""Дата производства"" (ДатаПроизводства) !'"), 
							"ДатаПроизводства", Формат(Элементы.ТабОстатковТоваров.ТекущиеДанные.ДатаПроизводства,"ДФ=dd.MM.yyyy")));
			  
			  Элементы.ТабОстатковТоваров.ТекущиеДанные.ДатаПроизводства = ТекущаяДата;
			  
		КонецЕсли;
		
		//Запретит ввода отрицательных остатков
		Если Элементы.ТабОстатковТоваров.ТекущиеДанные.Остаток < 0 Тогда
			Элементы.ТабОстатковТоваров.ТекущиеДанные.Остаток = 1;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоНоменклатуре(СохранитьОтбор);
	
	Если Элементы.ТабОстатковТоваров.ТекущиеДанные <> Неопределено Тогда
		
		Если СохранитьОтбор Тогда
			
			Если НЕ ЗначениеЗаполнено(АдресСтруктурыОтборов) Тогда
				
				АдресСтруктурыОтборов = ПоместитьВоВременноеХранилище(Новый Структура("ИдентификаторСтроки, ОтборСтрок", Элементы.ТабОстатковТоваров.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ТабОстатковТоваров.ОтборСтрок));
				
				
				Элементы.ТабОстатковТоваров.ОтборСтрок = Неопределено;
				Элементы.ТабОстатковТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура", Элементы.ТабОстатковТоваров.ТекущиеДанные.Номенклатура);
				
			Иначе
				
				ОбновитьОтборПоНоменклатуре(Ложь);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(АдресСтруктурыОтборов) Тогда
				
				СтруктураОтборов = ПолучитьИзВременногоХранилища(АдресСтруктурыОтборов);
				
				Если СтруктураОтборов = Неопределено Тогда
					Элементы.ТабОстатковТоваров.ОтборСтрок = Неопределено;
					ПрименитьОтборыПоКатегории();
				Иначе
					Элементы.ТабОстатковТоваров.ОтборСтрок 	  = СтруктураОтборов.ОтборСтрок;
					Элементы.ТабОстатковТоваров.ТекущаяСтрока = СтруктураОтборов.ИдентификаторСтроки;
				КонецЕсли;
				
				АдресСтруктурыОтборов  = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТабОстатковТоваров.ОтборСтрок = Неопределено;
		ПрименитьОтборыПоКатегории();
		
	КонецЕсли;
	
	ОбновитьПометкиЭлементовБыстрыхОтборов();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПометкиЭлементовБыстрыхОтборов()
	
	ОтборУстановлен = ЗначениеЗаполнено(АдресСтруктурыОтборов);
	
	Элементы.ТабОстатковТоваровКомандаОтборНоменклатура.Пометка = ОтборУстановлен;
	Элементы.ТабОстатковТоваровКонтекстноеМенюКомандаОтборНоменклатура.Пометка = ОтборУстановлен;

	ОбновитьЗаголовокФормыОтборы(ОтборУстановлен);
	
	ОбновитьДоступностьЭлементновБыстрыхОтборов(ОтборУстановлен);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДоступностьЭлементновБыстрыхОтборов(ОтборУстановлен)
	
	Сч = 0;
	Пока Сч < 5 Цикл
		Элементы["КомандаОтбор" + Сч].Доступность = НЕ ОтборУстановлен;
		Сч = Сч + 1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДоступностьКнопокБыстрыхОтборовНоменклатуры()
	
	РазрешитьОтбор = Элементы.ТабОстатковТоваров.ТекущиеДанные <> Неопределено;
	
	Элементы.ТабОстатковТоваровКомандаОтборНоменклатура.Доступность = РазрешитьОтбор;
	Элементы.ТабОстатковТоваровКонтекстноеМенюКомандаОтборНоменклатура.Доступность = РазрешитьОтбор;

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗаголовокФормыОтборы(ОтборУстановлен)
	
	ТекущийЗаголовок = "Контроль просроченного товара (Отбор: ТекущийОтбор)";
	
	Если ОтборУстановлен И Элементы.ТабОстатковТоваров.ТекущиеДанные <> Неопределено Тогда
		ТекущийЗаголовок = СтрЗаменить(ТекущийЗаголовок, "ТекущийОтбор", Элементы.ТабОстатковТоваров.ТекущиеДанные.Номенклатура);
	Иначе
		ТекущийЗаголовок = СтрЗаменить(ТекущийЗаголовок, " (Отбор: ТекущийОтбор)", "");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекущийЗаголовок;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьФактическийОстатокКлиент(ТекущиеДанные)

	ОстатокФакт = ПолучитьФактическийОстатокСервер(id_TT, ТекущиеДанные.id_tov);
	
	НайденныеСтроки = ТабОстатковТоваров.НайтиСтроки(Новый Структура("id_tov", ТекущиеДанные.id_tov));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.ОстатокФакт = ОстатокФакт;
		КонецЦикла;
	КонецЕсли;

    ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Обновлен фактический остаток по номенклатуре %1!", ТекущиеДанные.Номенклатура)); 	
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьФактическийОстатокСервер(id_TT, id_tov)
	
	//••ВРЕМЕННЫЙ ЗАПРОС (УДАЛИТЬ 25.11.2018)↓
	//(в конфигурации есть вызов получения остатка через хранимую прецедуру, не могу найти...)
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаОстатки = "SELECT 
	|Ost_kon
	|FROM [SMS_REPL].[dbo].[TD_ost](nolock)
	|WHERE ShopNo_rep = %1 AND id_tov = %2";  
	
	ТекстЗапросаОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапросаОстатки, ВнешниеДанные.ФорматПоля(id_TT), ВнешниеДанные.ФорматПоля(id_tov));
	
	rs = ADOСоединение.Execute(ТекстЗапросаОстатки);
	ФактОстаток = 0;
	Попытка
		rs.MoveFirst();
		Сч = 1;
		Пока НЕ rs.EOF() Цикл
			ФактОстаток = rs.Fields("Ost_kon").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();

	Возврат ФактОстаток;
	
КонецФункции



