
&НаСервереБезКонтекста
Функция ПолучитьТипРолиФизЛиц(мФизЛицо)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекФизЛицо", мФизЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.ТипРоли
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейТипыРолей.ТипРоли
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.РольПользователя
	|			И (ВЫБОР
	|				КОГДА РолиПользователейТипыРолей.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ТОГДА НЕ РолиПользователейТипыРолей.Объект.Неактивная
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо
	|	И НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТипРоли;
	КонецЕсли;
	
	Возврат ПланыВидовХарактеристик.ТипыРолейПользователя.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьМассивХарактеристик(Номенклатура, Характеристика)
	
	МасХ = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	 ХарактеристикиНоменклатуры.Владелец = &Владелец";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МасХ.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе	
		МасХ.Добавить(Характеристика);
	КонецЕсли;
	
	Возврат МасХ;
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьЗначРекв(ТекСсылка, ИмяРекв)
	
	Возврат ТекСсылка[ИмяРекв]
	
КонецФункции

Процедура ЗаписатьВХарактеристикиСервер()
	
	Выб = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Объект.Номенклатура);
	Пока Выб.Следующий() Цикл
		ОбъектСпр = Выб.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектСпр, Объект);
		ОбъектСпр.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОстатки(Номенклатура, Характеристика)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"			, КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныПоставщиковСрезПоследних.Номенклатура,
	|	МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Цена) КАК Цена
	|ПОМЕСТИТЬ втЦены
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК ЦеныПоставщиковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.Владелец КАК Номенклатура,
	|	СпецификацииПоставщиковСрезПоследних.Ссылка КАК Характеристика,
	|	ЦеныПоставщиков.Цена
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК СпецификацииПоставщиковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
	|			ЦеныПоставщиковСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|					&Период,
	|					Номенклатура = &Номенклатура
	|						И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
	|		ПО СпецификацииПоставщиковСрезПоследних.Владелец = ЦеныПоставщиков.Номенклатура
	|			И СпецификацииПоставщиковСрезПоследних.Ссылка = ЦеныПоставщиков.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	втЦены.Цена
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Номенклатура = &Номенклатура) КАК СпецификацииПоставщиковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
	|			ЦеныПоставщиковСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|					&Период,
	|					Номенклатура = &Номенклатура
	|						И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
	|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
	|			СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|			СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК НоменклатураСырье,
	|			СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК СпецификацииПоставщиковСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
	|				ИЗ
	|					РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|							&Период,
	|							Номенклатура = &Номенклатура
	|								И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
	|				ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
	|					И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СпецификацииПоставщиковСрезПоследних.Номенклатура,
	|			СпецификацииПоставщиковСрезПоследних.НоменклатураСырье,
	|			СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
	|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И СпецификацииПоставщиковСрезПоследних.НоменклатураСырье = ВложенныйЗапрос.НоменклатураСырье
	|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ВложенныйЗапрос.Характеристика
	|			И СпецификацииПоставщиковСрезПоследних.Период = ВложенныйЗапрос.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	|		ПО СпецификацииПоставщиковСрезПоследних.НоменклатураСырье = втЦены.Номенклатура
	|ГДЕ
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца > &Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	вт.Номенклатура,
	|	вт.Характеристика,
	|	вт.Цена,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) * вт.Цена КАК Сумма
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|		ПО вт.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И вт.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Склад " + Выборка.Склад + ": " + Выборка.Номенклатура + " " + Выборка.Характеристика + " количество: " +
					Строка(Выборка.Количество) + " цена: " + Строка(Выборка.Цена) + " сумма: " + Строка(Выборка.Сумма));
	КонецЦикла; 	
	
КонецПроцедуры

Процедура СообщитьПредзаказы(Характеристика, ДатаВывода)
	
	Если НЕ ЗначениеЗаполнено(ДатаВывода)
			ИЛИ ДатаВывода < НачалоДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбработки"	, НачалоДня(ДатаВывода - 86400));
	Запрос.УстановитьПараметр("Ссылка"			, Характеристика); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ВЗ_Запрос.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ВЗ_Запрос.ДатаПоступления) КАК ДатаПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредзаказТовары.Характеристика КАК Характеристика,
	|		ПредзаказТовары.Ссылка КАК Ссылка,
	|		ЗаказПоставщикуПредзаказы.ДатаПоступления КАК ДатаПоступления
	|	ИЗ
	|		Документ.Предзаказ.Товары КАК ПредзаказТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаказПоставщикуПредзаказы.Документ КАК Документ,
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления КАК ДатаПоступления
	|			ИЗ
	|				Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|			ГДЕ
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления >= &ДатаОбработки
	|				И ЗаказПоставщикуПредзаказы.Ссылка.Проведен = ИСТИНА) КАК ЗаказПоставщикуПредзаказы
	|			ПО ПредзаказТовары.Ссылка = ЗаказПоставщикуПредзаказы.Документ
	|	ГДЕ
	|		ПредзаказТовары.Характеристика В
	|				(ВЫБРАТЬ
	|					ВТ_Характеристики.Ссылка
	|				ИЗ
	|					ВТ_Характеристики КАК ВТ_Характеристики)
	|		И ПредзаказТовары.Количество > 0) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаОбработки, ) КАК СоставКомплектаСрезПоследних
	|		ПО ВЗ_Запрос.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Есть " + Строка(Выборка.Ссылка) + " по этой характеристике с датой поступления " + Строка(Выборка.ДатаПоступления));	
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.05.28 ИП-00018185: добавил ПричинаПриостановки
//Процедура ОтправитьПисьмоОбИзмененииСтатусаСервер(Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ПоТовару = Ложь)
Процедура ОтправитьПисьмоОбИзмененииСтатусаСервер(Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ПричинаПриостановки = "", ПоТовару = Ложь)
//---АК SHEP 2018.05.28
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Сообщить("Не указан статус! Письмо с информацией об измененном статусе не отправлено.");
		Возврат;
	КонецЕсли;
	
	//
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
	СписокФайловВложений 	= Новый СписокЗначений;
	//
	//СтруктураНовогоПисьма.Вставить("Тема", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	Если ПоТовару Тогда
		СтрХар = "";
		Для каждого Эл Из Ссылка Цикл
			СтрХар = СтрХар + Строка(Эл) + ", ";
		КонецЦикла; 
		СтрХар = Лев(СтрХар, СтрДлина(СтрХар) - 2);
	КонецЕсли; 
	
	
	Если Статус = Перечисления.СтатусыХарактеристик.НаВывод Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Выводим " 			+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Приостанавливаем " 	+ ?(ПоТовару, "продукт", "поставщика") +
		" с " + Строка(Формат(ДатаВывода, "ДФ=dd.MM.yyyy")) + " " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	ИначеЕсли Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
		СтруктураНовогоПисьма.Вставить("Тема", "Оживляем " 			+ ?(ПоТовару, "продукт", "поставщика") +" " +
		Строка(Номенклатура) + " " + ?(ПоТовару, СтрХар, Строка(Ссылка)));
	КонецЕсли; 	
	СтруктураНовогоПисьма.Вставить("Тело", ?(ЗначениеЗаполнено(СтруктураНовогоПисьма.Тема), СтруктураНовогоПисьма.Тема, "") +
	//+++АК SHEP 2018.05.28 ИП-00018185
	//?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", Символы.ПС + "Причина - " + Причина));
		?(Статус = Перечисления.СтатусыХарактеристик.Рабочая, "", "
		|Причина приостановки - " + ПричинаПриостановки + ?(ПустаяСтрока(Причина), "", "
		|Комментарий к причине: " + Причина)));
	//---АК SHEP 2018.05.28
	
	//СтруктураНовогоПисьма.Вставить("Тело", ?(Ссылка.Статус= Перечисления.СтатусыХарактеристик.НаВывод,"Выводим с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")),"Приостанавливаем с "+Строка(Формат(Ссылка.ДатаВывода,"ДФ=dd.MM.yyyy")))+" "+
	//Строка(Ссылка.Владелец)+" "+Строка(Ссылка)+Символы.ПС+"Причина - "+Ссылка.Причина);
	//
	//Если Ссылка.Статус= Перечисления.СтатусыХарактеристик.Рабочая Тогда
	//	СтруктураНовогоПисьма.Вставить("Тело","Оживляем"+" "+
	//	Строка(Ссылка.Владелец)+" "+Строка(Ссылка));
	//КонецЕсли; 	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	
	Кому 			= Новый СписокЗначений;
	МассивАдресов	= Новый Массив;
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	МасФЛ = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству, null, Ссылка, null, null, ТекущаяДата(), Неопределено, Истина);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	// помощники технолога
	МасФЛ = ДопМодульСервер.ПолучитьПомощниковТехнологаПоХарактеристике(Ссылка);
	Для каждого Эл Из МасФЛ Цикл
		МассивАдресов.Добавить(Эл);
	КонецЦикла; 
	
	//+++АК SHEP 2017.12.26 ИП-00017537: перенёс сюда (ниже) и добавил условие
	Если МассивАдресов.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
		Запрос.Текст =     
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Пользователь КАК Справочник.Пользователи).ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Право = &Настройка
		|	И НастройкиПользователей.Значение = ИСТИНА";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПользователей.Следующий() Цикл
			МассивАдресов.Добавить(ВыборкаПользователей.ФизЛицо);
		КонецЦикла; 
	КонецЕсли;
	//---АК SHEP 2017.12.26
	
	//+++АК SHEP 2018.06.04 ИП-00017814: передали задачу мне
	//+++АК BARA 2018.03.19  ИП-00017814      
	//ЗапросР = Новый Запрос;
	//ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Ссылка.Владелец);
	//ЗапросР.Текст = 
	//"ВЫБРАТЬ
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	//|ГДЕ
	//|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
	//|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РасчетчикиГруппыНоменклатуры.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствиеОбъектРольСрезПоследних.РольПользователя
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка";
	//Выборка = ЗапросР.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Для каждого Стр Из Выборка.РольПользователя.СоставРоли Цикл
	//		МассивАдресов.Добавить(Стр.Сотрудник);
	//	КонецЦикла; 
	//КонецЦикла;
	//---АК BARA 2018.03.19  ИП-00017814   
	
	ЗапросР = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетчикиГруппыНоменклатуры.Ссылка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетчикиГруппыНоменклатуры.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.Расчетчики)) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Номенклатура);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивАдресов.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
	КонецЕсли;
	//---АК SHEP 2018.06.04
	
	//+++АК SHEP 2018.09.18 ИП-00017814.01: разкомментировал, подправил, переместил выше (сюда)
	ЗапросР = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Расчетчики.УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК АдресЭлектроннойПочты,
		|	ЕСТЬNULL(Расчетчики.ОсновнойПользователь.ФизЛицо, """") КАК ОсновнойПользовательФизЛицо
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расчетчики КАК Расчетчики
		|		ПО РасчетчикиГруппыНоменклатуры.Ссылка = Расчетчики.Ссылка
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И Расчетчики.ПометкаУдаления = ЛОЖЬ");
	ЗапросР.УстановитьПараметр("ГруппаНоменклатуры", Номенклатура);
	
	РезультатЗапросаР = ЗапросР.Выполнить();
	Если НЕ РезультатЗапросаР.Пустой() Тогда
		
		Выборка = РезультатЗапросаР.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ОсновнойПользовательФизЛицо) Тогда
				МассивАдресов.Добавить(Выборка.ОсновнойПользовательФизЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
				МассивКомуВрем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.АдресЭлектроннойПочты, ";", Истина, Истина);
				Для Каждого ЭлтМассива Из МассивКомуВрем Цикл
					Если Кому.НайтиПоЗначению(ЭлтМассива) = Неопределено Тогда
						Кому.Добавить(ЭлтМассива);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.09.18
	
	//Если ПоТовару Тогда
	//	Мерч = Справочники.РолиПользователей.НайтиПоНаименованию("Мерчендайзинг");
	//	Если ЗначениеЗаполнено(Мерч) Тогда
	//		Для каждого Стр Из Мерч.СоставРоли Цикл
	//			МассивАдресов.Добавить(Стр.Сотрудник);
	//		КонецЦикла; 
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
				Кому.Добавить(Выборка.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Кому.Добавить("sp@vkusvill.ru");
	КонецЕсли;
	
	//+++АК SHEP 2018.06.04 ИП-00017814: расчётчикам отправляем с привязкой по номенклатуре (см. выше)
	//Кому.Добавить("izbenka.msv@gmail.com");
	//Кому.Добавить("izbenkaet@gmail.com");
	//Кому.Добавить("izbenka.d.t.v@gmail.com");
	//Кому.Добавить("zakaz01@vkusvill.ru"); 
	//Кому.Добавить("zakaz02@vkusvill.ru");
	//Кому.Добавить("zakaz03@vkusvill.ru");
	//---АК SHEP 2018.06.04
	Кому.Добавить("zakaz04@vkusvill.ru");
	Кому.Добавить("zakaz05@vkusvill.ru");
	Кому.Добавить("zakaz06@vkusvill.ru");
	
	//Если ПоТовару Тогда
	//	Кому.Добавить("masher_33@mail.ru");
	//	Кому.Добавить("gnytovadg@rambler.ru"); 
	//	Кому.Добавить("dotsenko_89@list.ru");
	//	Кому.Добавить("poly.stepanyuk@yandex.ru");
	//	Кому.Добавить("e-tutmina@mail.ru");
	//	Кому.Добавить("yulya.parfenova.00@bk.ru");
	//	Кому.Добавить("yuliashev04@mail.ru");
	//	Кому.Добавить("marie.petrovskaya@yandex.ru");
	//	Кому.Добавить("irissokolova@yandex.ru"); 
	//	Кому.Добавить("annyllat@gmail.com");
	//КонецЕсли; 
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело", "Изменен статус характеристики "+Строка(Ссылка)+" номенклатуры - "+Строка(Владелец)+" на "+Строка(Статус)+".");
	
	
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
		СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Характеристика", Ссылка);                                                
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	//|ИЗ
	//|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	//|ГДЕ
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика";
	//Выборка = Запрос.Выполнить().Выбрать();
	
	//Кому = Новый СписокЗначений;
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(СокрЛП(Выборка.АдресЭлектроннойПочты)) Тогда
	//		Кому.Добавить(СокрЛП(Выборка.АдресЭлектроннойПочты));
	//	КонецЕсли; 
	//КонецЦикла;
	//Кому.Добавить(СокрЛП("reklama@izbenka.msk.ru"));
	//
	////
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Характеристика", Ссылка); 
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	//|ГДЕ
	//|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РолиПользователейСоставРоли.Сотрудник
	//|ИЗ
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	//|				ИЛИ СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	//|		ПО СоответствиеОбъектРольСрезПоследних.Объект = вт.ТорговаяТочка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//МассивАдресов = Новый Массив;
	//Пока Выборка.Следующий() Цикл
	//	МассивАдресов.Добавить(Выборка.Сотрудник);
	//КонецЦикла;
	//	
	////
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Объект", МассивАдресов);
	//Запрос.Текст =                                                                                   
	//"ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект В(&Объект)
	//|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Количество() > 0 Тогда
	//	Пока Выборка.Следующий() Цикл
	//		Если Кому.НайтиПоЗначению(Выборка.Представление) = Неопределено Тогда
	//			Кому.Добавить(Выборка.Представление);
	//		КонецЕсли; 
	//	КонецЦикла;
	//Иначе
	//	Кому.Добавить("sp@vkusvill.ru");
	//КонецЕсли; 
	//СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//
	//СтрКому = "";
	//Для каждого Эл Из Кому Цикл
	//	СтрКому = СтрКому + Эл.Значение + "; ";
	//КонецЦикла; 
	//Попытка
	//	ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	//	Сообщить("Отправлено письмо с информацией об измененном статусе на " + СтрКому);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

Процедура ВыводИлиПриостановкаСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	мСтатусАктивностиНовая 		= Перечисления.СтатусыАктивностиХарактеристик.Новая;
	мСтатусАктивностиВыведена 	= Перечисления.СтатусыАктивностиХарактеристик.Выведена;
	мСтатусАктивностиНеактивная = Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
	
	МасНом = Новый Массив;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ СтрокаТЧ.Отметка Тогда
			Продолжить;
		КонецЕсли; 
			
		Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			ОбХар = СтрокаТЧ.Характеристика.ПолучитьОбъект();
			//ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиВыведена;
			ТекСтатус = ?(ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиНовая, мСтатусАктивностиНеактивная, мСтатусАктивностиВыведена);
			ОбХар.СтатусАктивностиХарактеристики = ТекСтатус;
			//ОбХар.Статус=Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			//ОбХар.Неактивная=Истина;
			//ОбХар.ДатаВывода=Дата(1,1,1);
			//ОбХар.ДатаОжидаемогоВозврата=Дата(1,1,1);
			ОбХар.Записать();
			//Сообщить("Переведена в статус Выведена " + Строка(СтрокаТЧ.Характеристика));
			Сообщить("Переведена в статус """ + Строка(ТекСтатус) + """ " + Строка(СтрокаТЧ.Характеристика));
		Иначе
			МасНом.Добавить(СтрокаТЧ.Номенклатура);	
		КонецЕсли; 
	КонецЦикла; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", МасНом);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&Владелец)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбХар = Выборка.Ссылка.ПолучитьОбъект();
		//ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиВыведена;
		ТекСтатус = ?(ОбХар.СтатусАктивностиХарактеристики = мСтатусАктивностиНовая, мСтатусАктивностиНеактивная, мСтатусАктивностиВыведена);
		ОбХар.СтатусАктивностиХарактеристики = ТекСтатус;
		//ОбХар.Статус=Перечисления.СтатусыХарактеристик.ПустаяСсылка();
		//ОбХар.Неактивная=Истина;
		//ОбХар.ДатаВывода=Дата(1,1,1);
		//ОбХар.ДатаОжидаемогоВозврата=Дата(1,1,1);
		ОбХар.Записать();
		//Сообщить("Переведена в статус Выведена " + Строка(Выборка.Ссылка));
		Сообщить("Переведена в статус """ + Строка(ТекСтатус) + """ " + Строка(Выборка.Ссылка));
	КонецЦикла;
	
КонецПроцедуры

Процедура ВводОтмеченныхСервер(МасСтрок, ФлНовая = Истина, СменаДатыВывода = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МасНом = Новый Массив;
	МасХар = Новый Массив;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		Если МасСтрок.Найти(СтрокаТЧ.НомерСтроки)=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			МасХар.Добавить(СтрокаТЧ.Характеристика);	
		Иначе
			МасНом.Добавить(СтрокаТЧ.Номенклатура);	
		КонецЕсли; 
	КонецЦикла; 
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", МасНом);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&Владелец)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МасХар.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	
	МасНомДляПроверки = Новый Массив;
	Для каждого Эл Из МасХар Цикл
		МасНомДляПроверки.Добавить(Эл.Владелец);	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
	|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОсновная.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
	|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
	|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
	|ГДЕ
	|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
	
	Выб = Запрос.Выполнить().Выбрать();
	МасНомИскл = Новый Массив;
	Пока Выб.Следующий() Цикл
		Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
		Сообщить(Выб.Номенклатура);
		МасНомИскл.Добавить(Выб.Номенклатура);
	КонецЦикла; 
		
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МасХар"			, МасХар);
	Запрос.УстановитьПараметр("МасНомИскл"		, МасНомИскл);
	Запрос.УстановитьПараметр("СменаДатыВывода"	, СменаДатыВывода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ХарактеристикиНоменклатуры1.Ссылка КАК Нехватка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры1
	|		ПО ХарактеристикиНоменклатуры.Владелец = ХарактеристикиНоменклатуры1.Владелец
	|			И (ХарактеристикиНоменклатуры1.Наименование = ""Нехватка товара"")
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&МасХар)
	|	И НЕ ХарактеристикиНоменклатуры.Владелец В (&МасНомИскл)
	|	И (ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|				И &СменаДатыВывода
	|			ИЛИ НЕ &СменаДатыВывода)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МасНом = Новый Массив;
	мНоменклатураАрхив = Справочники.Номенклатура.НайтиПоНаименованию("Архив");
	Пока Выборка.Следующий() Цикл
		
		ОбХар = Выборка.Ссылка.ПолучитьОбъект();
		Если НЕ СменаДатыВывода Тогда
			ОбХар.СтатусАктивностиХарактеристики	= ?(ФлНовая, Перечисления.СтатусыАктивностиХарактеристик.Новая, Перечисления.СтатусыАктивностиХарактеристик.Активна);
			ОбХар.Статус							= Перечисления.СтатусыХарактеристик.Рабочая;
			ОбХар.ДатаОжидаемогоВозврата			= Дата(1, 1, 1);
			ОбХар.ДатаВывода						= Дата(1, 1, 1);
			ОбХар.Неактивная				        = Ложь;
			ОбХар.Причина				        	= "";
			ОбХар.ПричинаПриостановки	        	= ""; //+++АК SHEP 2018.05.28 ИП-00018185
			ОбХар.ПоТовару 							= Ложь; //+++АК CISA 2018.09.14 ИП-00019507
		Иначе	
			ОбХар.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Активна;
		КонецЕсли; 
		ОбХар.ДатаПовторнойРассылки = ТекущаяДата() + 24*60*60;
		ОбХар.Записать();
		
		Если НЕ СменаДатыВывода Тогда
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ОбХар.Ссылка, Перечисления.СтатусыХарактеристик.Рабочая, Дата(1, 1, 1), Выборка.Ссылка.Владелец, "");
			Сообщить("Переведена в статус Рабочая " + Строка(Выборка.Ссылка));
		КонецЕсли; 
		
		Нехватка = Выборка.Нехватка;
		Если ЗначениеЗаполнено(Нехватка) Тогда
			ОбНехватка = Выборка.Нехватка.ПолучитьОбъект();
			ОбНехватка.СтатусАктивностиХарактеристики	= Перечисления.СтатусыАктивностиХарактеристик.Неактивная;
			ОбНехватка.Неактивная						= Истина;
			ОбНехватка.Записать();
		КонецЕсли;
		
		ОбНом = Выборка.Владелец.ПолучитьОбъект();
		ОбНом.Выведена			= Ложь;
		ОбНом.ПометкаУдаления	= Ложь;
		Если ОбНом.ПринадлежитЭлементу(мНоменклатураАрхив) Тогда
			ОбНом.Родитель 		= ОбНом.ГруппаДоПомещенияВАрхив;
		КонецЕсли;
		ОбНом.Записать();
		
		МасНом.Добавить(Выборка.Владелец);
		
	КонецЦикла;
	
	// Планограммы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МасНом);
	Запрос.УстановитьПараметр("МасНомИскл"	, МасНомИскл);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Планограммы.Ссылка КАК Планограмма,
	|	ВЗ_Выкладка.МестоВыкладки КАК МестоВыкладки,
	|	ВЗ_Выкладка.ТоварВыведен,
	|	Планограммы.НеАктуальная КАК НеАктуальная,
	|	ВЗ_Выкладка.Номенклатура
	|ИЗ
	|	Справочник.Планограммы КАК Планограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыкладкаПланограммы.Планограмма КАК Планограмма,
	|			ВыкладкаПланограммы.МестоВыкладки КАК МестоВыкладки,
	|			ВыкладкаПланограммы.ТоварВыведен КАК ТоварВыведен,
	|			ВыкладкаПланограммы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|		ГДЕ
	|			ВыкладкаПланограммы.Номенклатура В(&Номенклатура)
	|			И НЕ ВыкладкаПланограммы.Номенклатура В (&МасНомИскл)) КАК ВЗ_Выкладка
	|		ПО Планограммы.Ссылка = ВЗ_Выкладка.Планограмма
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеАктуальная";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбПланограмма = Выборка.Планограмма.ПолучитьОбъект();
		ОбПланограмма.НеАктуальная		= Ложь;
		ОбПланограмма.ПометкаУдаления	= Ложь;
		ОбПланограмма.Записать();
		
		МенеджерЗаписи = РегистрыСведений.ВыкладкаПланограммы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Планограмма	= Выборка.Планограмма;
		МенеджерЗаписи.Номенклатура	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ТоварВыведен	= Ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФлажки(ЗначФлажка)
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Отметка = ЗначФлажка;	                                      
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицуСервер()
	
	ЕстьНоменклатура 	= НЕ ЭтаФорма.ОтборНоменклатура.Пустая();
	ЕстьХарактеристика 	= НЕ ЭтаФорма.ОтборХарактеристика.Пустая();
	ЕстьСтатус 			= НЕ ЭтаФорма.ОтборСтатус.Пустая();
	ЕстьАвтор			= НЕ ЭтаФорма.ОтборАвторПоследнегоИзменения.Пустая();
	ЕстьДатаВыводаС			= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаВыводаС);
	ЕстьДатаВыводаПо		= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаВыводаПо);
	ЕстьДатаОжидВозратаС 	= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаОжидаемогоВозвратаС);
	ЕстьДатаОжидВозратаПо	= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаОжидаемогоВозвратаПо);
	ЕстьДатаПослИзмененияС	= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаПоследнегоИзмененияС);
	ЕстьДатаПослИзмененияПо	= ЗначениеЗаполнено(ЭтаФорма.ОтборДатаПоследнегоИзмененияПо);
	
	//
	Запрос = Новый Запрос;
	Если ЕстьНоменклатура Тогда
		Запрос.УстановитьПараметр("Номенклатура"	, ЭтаФорма.ОтборНоменклатура);
	КонецЕсли;
	Если ЕстьХарактеристика Тогда
		Запрос.УстановитьПараметр("Характеристика"	, ЭтаФорма.ОтборХарактеристика);
	КонецЕсли;
	Если ЕстьСтатус Тогда
		Запрос.УстановитьПараметр("Статус"			, ЭтаФорма.ОтборСтатус);
	КонецЕсли;
	Если ЕстьАвтор Тогда
		Запрос.УстановитьПараметр("Автор"			, ЭтаФорма.ОтборАвторПоследнегоИзменения);
	КонецЕсли;
	Если ЕстьДатаВыводаС Тогда
		Запрос.УстановитьПараметр("ДатаВыводаС"		, ЭтаФорма.ОтборДатаВыводаС);
	КонецЕсли;
	Если ЕстьДатаВыводаПо Тогда
		Запрос.УстановитьПараметр("ДатаВыводаПо"	, ЭтаФорма.ОтборДатаВыводаПо);
	КонецЕсли;
	Если ЕстьДатаОжидВозратаС Тогда
		Запрос.УстановитьПараметр("ДатаОжидаемогоВозвратаС"		, ЭтаФорма.ОтборДатаОжидаемогоВозвратаС);
	КонецЕсли;
	Если ЕстьДатаОжидВозратаПо Тогда
		Запрос.УстановитьПараметр("ДатаОжидаемогоВозвратаПо"	, ЭтаФорма.ОтборДатаОжидаемогоВозвратаПо);
	КонецЕсли;
	Если ЕстьДатаПослИзмененияС Тогда
		Запрос.УстановитьПараметр("ДатаПоследнегоИзмененияС"	, ЭтаФорма.ОтборДатаПоследнегоИзмененияС);
	КонецЕсли;
	Если ЕстьДатаПослИзмененияПо Тогда
		Запрос.УстановитьПараметр("ДатаПоследнегоИзмененияПо"	, ЭтаФорма.ОтборДатаПоследнегоИзмененияПо);
	КонецЕсли;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ФлХарактеристика,
	|	СпрХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	СпрХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	СпрХарактеристикиНоменклатуры.Статус,
	|	СпрХарактеристикиНоменклатуры.Причина,
	//+++АК SHEP 2018.05.28 ИП-00018185
	|	СпрХарактеристикиНоменклатуры.ПричинаПриостановки,
	//---АК SHEP 2018.05.28
	|	СпрХарактеристикиНоменклатуры.ДатаВывода,
	|	СпрХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата,
	|	СпрХарактеристикиНоменклатуры.ДатаПоследнегоИзменения,
	|	СпрХарактеристикиНоменклатуры.АвторПоследнегоИзменения
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	|ГДЕ
	|	СпрХарактеристикиНоменклатуры.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод), ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена))
	|	И НЕ СпрХарактеристикиНоменклатуры.Наименование = ""Нехватка товара""
	|	И НЕ СпрХарактеристикиНоменклатуры.ПометкаУдаления
	|	И &УсловиеПоНоменклатуре
	|	И &УсловиеПоХарактеристике
	|	И &УсловиеПоСтатусу
	|	И &УсловиеПоПричине
	//+++АК SHEP 2018.05.28 ИП-00018185
	|	И &УсловиеПоПричинеПриостановки
	//---АК SHEP 2018.05.28
	|	И &УсловиеПоДатеВывода
	|	И &УсловиеПоДатеОжидаемогоВозврата
	|	И &УсловиеПоДатеПоследнегоИзменения
	|	И &УсловиеПоАвтору
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоНоменклатуре",
	?(ЕстьНоменклатура, "
	|	И СпрХарактеристикиНоменклатуры.Владелец = &Номенклатура", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоХарактеристике",
	?(ЕстьХарактеристика, "
	|	И СпрХарактеристикиНоменклатуры.Ссылка = &Характеристика", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоСтатусу",
	?(ЕстьСтатус, "
	|	И СпрХарактеристикиНоменклатуры.Статус = &Статус", ""));
	
	//+++АК SHEP 2018.05.28 ИП-00018185
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоПричинеПриостановки",
	?(ЗначениеЗаполнено(ЭтаФорма.ОтборПричинаПриостановки), "
	|	И СпрХарактеристикиНоменклатуры.ПричинаПриостановки = &ПричинаПриостановки", ""));
	Запрос.УстановитьПараметр("ПричинаПриостановки", ЭтаФорма.ОтборПричинаПриостановки);
	//---АК SHEP 2018.05.28
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоПричине",
	?(ЗначениеЗаполнено(ЭтаФорма.ОтборПричина), "
	|	И СпрХарактеристикиНоменклатуры.Причина ПОДОБНО ""%" + СокрЛП(ЭтаФорма.ОтборПричина) + "%""", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоАвтору",
	?(ЕстьАвтор, "
	|	И СпрХарактеристикиНоменклатуры.АвторПоследнегоИзменения = &Автор", ""));
	
	ТекстЗамены = "";
	Если ЕстьДатаВыводаС Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаВывода >= &ДатаВыводаС";
	КонецЕсли;
	Если ЕстьДатаВыводаПо Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаВывода <= &ДатаВыводаПо";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоДатеВывода", ТекстЗамены);
	
	ТекстЗамены = "";
	Если ЕстьДатаОжидВозратаС Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата >= &ДатаОжидаемогоВозвратаС";
	КонецЕсли;
	Если ЕстьДатаОжидВозратаПо Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата <= &ДатаОжидаемогоВозвратаПо";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоДатеОжидаемогоВозврата", ТекстЗамены);
	
	ТекстЗамены = "";
	Если ЕстьДатаПослИзмененияС Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаПоследнегоИзменения >= &ДатаПоследнегоИзмененияС";
	КонецЕсли;
	Если ЕстьДатаПослИзмененияПо Тогда
		ТекстЗамены = ТекстЗамены + "
		|	И СпрХарактеристикиНоменклатуры.ДатаПоследнегоИзменения <= &ДатаПоследнегоИзмененияПо";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоДатеПоследнегоИзменения", ТекстЗамены);
	
	Запрос.Текст = ТекстЗапроса;
	
	//
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыводИлиПриостановка(Команда)
	
	ВыводИлиПриостановкаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводОтмеченных(Команда)
	
	МасСтрок = Новый Массив;	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.Отметка Тогда
			МасСтрок.Добавить(СтрокаТЧ);	
		КонецЕсли; 
	КонецЦикла; 
	Мас = Новый Массив;
	Для каждого Эл Из МасСтрок Цикл
		Мас.Добавить(Эл.НомерСтроки);	
	КонецЦикла; 
	ВводОтмеченныхСервер(Мас);
	
	//
	ОбновитьТаблицуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	
	УстановитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	
	ОбновитьТаблицуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВХарактеристики(Команда)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ЗаписатьВХарактеристикиСервер();
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	//+++AK ziga 0017211 20171110
	Если Не РольДоступнаСервер() Тогда
		Элементы.ОтборСтатус.КнопкаСпискаВыбора=Истина;
		элементы.ОтборСтатус.РедактированиеТекста=Ложь;
		//Элементы.ОтборСтатус.РежимВыбораИзСписка=Истина;
		Элементы.ОтборСтатус.КнопкаВыбора=Ложь;
		Элементы.ОтборСтатус.КнопкаВыпадающегоСписка=Истина;
		
		//Элементы.ТоварыСтатус.РежимВыбораИзСписка=Истина;
		СписокСтатусов=Новый Массив;
		Элементы.ТоварыСтатус.РедактированиеТекста=Ложь;
		Элементы.ТоварыСтатус.РежимВыбораИзСписка=Истина;
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод"));
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена"));
		Элементы.ТоварыСтатус.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);
	КонецЕсли;
	//---AK ziga

	//Изменение=Истина;
	ЭтаФорма.ТекФизЛицо = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	ЭтаФорма.ТекРоль 	= ПолучитьТипРолиФизЛиц(ЭтаФорма.ТекФизЛицо);
	//+++ziga ИП-00016835 01122017 
	// Если нет роли, ищет у родительской функциональной роли
	Если ЭтаФорма.ТекРоль=ПланыВидовХарактеристик.ТипыРолейПользователя.ПустаяСсылка()  Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	РодительПервый.Сотрудник,
		             |	РодительПервый.Ссылка.Наименование
		             |ИЗ
		             |	Справочник.РолиПользователей.СоставРоли КАК Текущий
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РодительПервый
		             |		ПО Текущий.Ссылка.Родитель.Ссылка = РодительПервый.Ссылка
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК Родитель
		             |		ПО Текущий.Ссылка.Родитель.Родитель = Родитель.Ссылка
		             |ГДЕ
		             |	Текущий.Сотрудник = &Сотрудник
		             |	И Родитель.Сотрудник ЕСТЬ НЕ NULL ";
		Запрос.УстановитьПараметр("Сотрудник", ЭтаФорма.ТекФизЛицо);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтаФорма.ТекРоль=ПолучитьТипРолиФизЛиц(Выборка.Сотрудник);
			ЭтаФорма.ФизЛицоРодителя=Выборка.Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	//---ziga ИП-00016835 01122017

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка"	, ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Сезонный вывод"));
	Запрос.УстановитьПараметр("ФизЛицо"		, ЭтаФорма.ТекФизЛицо);
	Запрос.Текст =     
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Право = &Настройка
	|	И НастройкиПользователей.Значение = ИСТИНА
	|	И НастройкиПользователей.Пользователь.ФизЛицо = &ФизЛицо";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПользователей = Результат.Выбрать();
	ЭтаФорма.ФлПолныеПрава = Ложь;
	Если ВыборкаПользователей.Следующий() Тогда
		ЭтаФорма.ФлПолныеПрава = Истина;
	КонецЕсли; 
	ЭтаФорма.ФлПолныеПрава = ЭтаФорма.ФлПолныеПрава
								ИЛИ РольДоступна("ПолныеПрава");
								
	//
	ОбновитьТаблицуСервер();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура пРедактироватьПериод(ИмяРеквизитаДатаС, ИмяРеквизитаДатаПо)
	
	//
	СтандартныйПериод = Новый СтандартныйПериод(ЭтаФорма[ИмяРеквизитаДатаС], ЭтаФорма[ИмяРеквизитаДатаПо]);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		ЭтаФорма[ИмяРеквизитаДатаС] 	= СтандартныйПериод.ДатаНачала;
		ЭтаФорма[ИмяРеквизитаДатаПо] 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	//
	Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаДатаС])
		И ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаДатаПо]) Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаДатаПо])
			И ЭтаФорма[ИмяРеквизитаДатаС] > ЭтаФорма[ИмяРеквизитаДатаПо] Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			ЭтаФорма[ИмяРеквизитаДатаС] = ЭтаФорма[ИмяРеквизитаДатаПо];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РедактироватьДатыВывода(Команда)
	
	пРедактироватьПериод("ОтборДатаВыводаС", "ОтборДатаВыводаПо");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДатыОжидаемогоВозврата(Команда)
	
	пРедактироватьПериод("ОтборДатаОжидаемогоВозвратаС", "ОтборДатаОжидаемогоВозвратаПо");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДатыПоследнегоИзменения(Команда)
	
	пРедактироватьПериод("ОтборДатаПоследнегоИзмененияС", "ОтборДатаПоследнегоИзмененияПо");
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////

Процедура ТоварыПриАктивизацииСтрокиСервер(Номенклатура, Характеристика)
	
	Если ЭтаФорма.ФлПолныеПрава Тогда
		Возврат;
	КонецЕсли; 
	
	//
	МасХ 	= ВернутьМассивХарактеристик(Номенклатура, Характеристика);
	//+++ziga ИП-00016835 01122017
	//МасФЛ 	= ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ЭтаФорма.ТекРоль, null, МасХ, null, null, ТекущаяДата(),ЭтаФорма.ТекФизЛицо, Истина);
	МасФЛ 	= ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ЭтаФорма.ТекРоль, null, МасХ, null, null, ТекущаяДата(),?(ЭтаФорма.ФизЛицоРодителя=Справочники.ФизическиеЛица.ПустаяСсылка(), ЭтаФорма.ТекФизЛицо,ЭтаФорма.ФизЛицоРодителя), Истина);
	мТолькоПросмотр =  (МасФЛ.Найти(?(ЭтаФорма.ФизЛицоРодителя=Справочники.ФизическиеЛица.ПустаяСсылка(), ЭтаФорма.ТекФизЛицо,ЭтаФорма.ФизЛицоРодителя)) = Неопределено);
	//мТолькоПросмотр =  (МасФЛ.Найти(ЭтаФорма.ТекФизЛицо) = Неопределено);	
	//---ziga ИП-00016835 01122017
	Элементы.ТоварыНоменклатура.ТолькоПросмотр 				= мТолькоПросмотр;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр			= мТолькоПросмотр;
	Элементы.ТоварыСтатус.ТолькоПросмотр					= мТолькоПросмотр;
	Элементы.ТоварыПричина.ТолькоПросмотр					= мТолькоПросмотр;
	Элементы.ТоварыПричинаПриостановки.ТолькоПросмотр		= мТолькоПросмотр; //+++АК SHEP 2018.05.28 ИП-00018185
	Элементы.ТоварыДатаВывода.ТолькоПросмотр				= мТолькоПросмотр;
	Элементы.ТоварыДатаОжидаемогоВозврата.ТолькоПросмотр	= мТолькоПросмотр;
	Элементы.ТоварыОтметка.ТолькоПросмотр					= мТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено
		ИЛИ ЭтаФорма.Изменение Тогда
		Возврат;	
	КонецЕсли;
	
	//
	ЭтаФорма.ТекНоменклатура	= ТекДанные.Номенклатура;
	ЭтаФорма.ТекХарактеристика	= ТекДанные.Характеристика;
	ЭтаФорма.ТекДатаВывода		= ТекДанные.ДатаВывода;
	
	Если НЕ (ТекДанные = Неопределено
				ИЛИ (ЭтаФорма.ТекНоменклатура.Пустая()
						И ЭтаФорма.ТекХарактеристика.Пустая())) Тогда
		ЭтаФорма.Изменение = Истина;
		ТоварыПриАктивизацииСтрокиСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика);
		ЭтаФорма.Изменение = Ложь;
	Иначе	
		Элементы.ТоварыНоменклатура.ТолькоПросмотр				= Ложь;
		Элементы.ТоварыХарактеристика.ТолькоПросмотр			= Ложь;
		Элементы.ТоварыСтатус.ТолькоПросмотр					= Ложь;
		Элементы.ТоварыПричина.ТолькоПросмотр					= Ложь;
		Элементы.ТоварыПричинаПриостановки.ТолькоПросмотр		= Ложь; //+++АК SHEP 2018.05.28 ИП-00018185
		Элементы.ТоварыДатаВывода.ТолькоПросмотр				= Ложь;
		Элементы.ТоварыДатаОжидаемогоВозврата.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Элементы.ТоварыНоменклатура.ТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ЭтаФорма.ТекРоль = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству") Тогда
		Отказ = (ТекФизЛицо <> ТекДанные.АвторПоследнегоИзменения
					И ЗначениеЗаполнено(ТекДанные.АвторПоследнегоИзменения));
		Возврат;
	КонецЕсли;
	
	ТоварыСтатусПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика,
	//+++АК SHEP 2018.02.01 ИП-00017757
	//ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.ПустаяСсылка"), ТекДанные.Причина, ТекДанные.ДатаВывода);
	//+++АК SHEP 2018.05.28 ИП-00018185
	//	ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.ПустаяСсылка"), ТекДанные.Причина, Дата(1,1,1));
		ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.ПустаяСсылка"), ТекДанные.Причина, ТекДанные.ПричинаПриостановки, Дата(1,1,1));
	//---АК SHEP 2018.05.28
	//---АК SHEP 2018.02.01
	
КонецПроцедуры

Процедура ТоварыПриИзмененииСтрокиСервер(Номенклатура, Характеристика, ФлОшибки)
	
	МасХ 	= ВернутьМассивХарактеристик(Номенклатура,Характеристика);
	//+++ziga ИП-00016835 01122017
	МасФЛ 	= ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ТекРоль, null, МасХ, null, null,	ТекущаяДата(), ТекФизЛицо, Истина);
	//МасФЛ 	= ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ТекРоль, null, МасХ, null, null,	ТекущаяДата(),?(ФизЛицоРодителя=Справочники.ФизическиеЛица.ПустаяСсылка(), ТекФизЛицо,ФизЛицоРодителя), Истина);
	//Если МасФЛ.Найти(ТекФизЛицо)=Неопределено
	//---ziga ИП-00016835 01122017
	Если МасФЛ.Найти(?(ФизЛицоРодителя=Справочники.ФизическиеЛица.ПустаяСсылка(), ТекФизЛицо,ФизЛицоРодителя))=Неопределено
			И НЕ ФлПолныеПрава Тогда
		ФлОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзмененииСтроки(Номенклатура, Характеристика)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика)).Количество() > 1 Тогда
		ТекДанные.Номенклатура		= ЭтаФорма.ТекНоменклатура;
		ТекДанные.Характеристика	= ЭтаФорма.ТекХарактеристика;
		Сообщить("Такая позиция уже есть в таблице");
		Возврат;
	КонецЕсли; 
	
	//
	Если НЕ (ТекДанные = Неопределено
			ИЛИ (НЕ ЗначениеЗаполнено(Номенклатура)
					И НЕ ЗначениеЗаполнено(Характеристика))) Тогда
		Если НЕ ЭтаФорма.ФлПолныеПрава Тогда
			ФлОшибки = Ложь;
			ЭтаФорма.Изменение = Истина;
			ТоварыПриИзмененииСтрокиСервер(Номенклатура, Характеристика, ФлОшибки);
			ЭтаФорма.Изменение = Ложь;
			Если ФлОшибки Тогда
				ТекДанные.Номенклатура		= ЭтаФорма.ТекНоменклатура;
				ТекДанные.Характеристика	= ЭтаФорма.ТекХарактеристика;
				Сообщить("Вы не ответственны за данную позицию");
			Иначе	
				ЭтаФорма.ТекНоменклатура	= ТекДанные.Номенклатура;
				ЭтаФорма.ТекХарактеристика	= ТекДанные.Характеристика;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДатуВыводаПоУмолчанию(мХарактеристика)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", мХарактеристика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредзаказТовары.Характеристика,
	|	МАКСИМУМ(ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления) КАК ДатаПоступления
	|ИЗ
	|	Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Предзаказ.Товары КАК ПредзаказТовары
	|		ПО (ПредзаказТовары.Ссылка = ЗаказПоставщикуПредзаказы.Документ)
	|			И (ПредзаказТовары.Характеристика = &Характеристика)
	|			И (ПредзаказТовары.Количество > 0)
	|ГДЕ
	|	ЗаказПоставщикуПредзаказы.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредзаказТовары.Характеристика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоступления + 86400; // дата, последующая за последней датой поступления в проведенном заказе поставщику
	КонецЕсли;
	
	Возврат Дата(1, 1, 1);
	
КонецФункции

//+++АК SHEP 2018.05.28 ИП-00018185
&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровТоварыПриИзмененииСервер(ДанныеДляЗаполнения = Неопределено)
	
	СтруктураПараметров = Новый Структура("Номенклатура,Характеристика,Причина,ПричинаПриостановки,ДатаВывода,ДатаОжидаемогоВозврата,Статус");
	Если ДанныеДляЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДанныеДляЗаполнения);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

//+++АК SHEP 2018.05.28 ИП-00018185: параметры передаём структурой
//Процедура ТоварыПриИзмененииСервер(Знач Номенклатура, Знач Характеристика, Знач Причина, Знач ДатаВывода, Знач ДатаОжидаемогоВозврата, Знач Статус)
Процедура ТоварыПриИзмененииСервер(СтруктураПараметров)
Перем Номенклатура, Характеристика, Причина, ПричинаПриостановки, ДатаВывода, ДатаОжидаемогоВозврата, Статус;
	
	Номенклатура = СтруктураПараметров.Номенклатура;
	Характеристика = СтруктураПараметров.Характеристика;
	Причина = СтруктураПараметров.Причина;
	ПричинаПриостановки = СтруктураПараметров.ПричинаПриостановки;
	ДатаВывода = СтруктураПараметров.ДатаВывода;
	ДатаОжидаемогоВозврата = СтруктураПараметров.ДатаОжидаемогоВозврата;
	Статус = СтруктураПараметров.Статус;
//---АК SHEP 2018.05.28
	
	ФлСброс = Ложь;
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		ОбХар = Характеристика.ПолучитьОбъект();
		ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
		ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
		ОбХар.Причина					= Причина;
		ОбХар.ПричинаПриостановки		= ПричинаПриостановки; //+++АК SHEP 2018.05.28 ИП-00018185
		Если ЗначениеЗаполнено(ДатаВывода) Тогда
			Если НЕ ОбХар.ДатаВывода = ДатаВывода Тогда
				ТоварыДатаВыводаПриИзмененииСервер(Характеристика, ДатаВывода);
				ОбХар.ДатаВывода		= ДатаВывода;
			КонецЕсли;
		Иначе
			ОбХар.ДатаВывода 			= ПолучитьДатуВыводаПоУмолчанию(Характеристика);
		КонецЕсли; 
		
		ОбХар.ДатаОжидаемогоВозврата	= ДатаОжидаемогоВозврата;
		
		//
		Если ЗначениеЗаполнено(ДатаВывода)
			И (ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"		, ДатаВывода);
			Запрос.УстановитьПараметр("Составляющая", Характеристика);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Составляющая = &Составляющая";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Сообщить("Данная позиция входит в состав комплекта на дату вывода - " + Выборка.ХарактеристикаВладелец + " " + Выборка.Характеристика);
				Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			КонецЦикла;
			
		КонецЕсли;
		
		ОбХар.Статус = Статус;
		
		//
		Если ЗначениеЗаполнено(ДатаВывода)
			И (ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"			, ДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, )  КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Характеристика = &Характеристика";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период			= ДатаВывода;
				МенеджерЗаписи.Характеристика	= Характеристика;
				МенеджерЗаписи.Составляющая		= Выборка.Составляющая;
				МенеджерЗаписи.Количество		= 0;
				МенеджерЗаписи.Комплект			= Характеристика.Владелец;
				МенеджерЗаписи.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
				МенеджерЗаписи.Записать();
				Сообщить("Создана запись по очистке состава комплекта " + Номенклатура + " " + Характеристика);
			КонецЦикла;
			
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(ТекДатаВывода)
			И НЕ ТекДатаВывода = ДатаВывода 
			И (ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"			, ТекДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество = 0
			|	И СоставКомплектаСрезПоследних.Период = &Дата
			|	И СоставКомплектаСрезПоследних.Характеристика = &Характеристика";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НаборЗаписей = РегистрыСведений.СоставКомплекта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ТекДатаВывода);
				НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		//ОбХар.Статус=Статус;	
		ОбХар.ДатаПовторнойРассылки = ТекущаяДата() + 24*60*60;
		ОбХар.ПоТовару 				= Ложь;
		ОбХар.Записать();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Характеристика = Характеристика Тогда
				СтрокаТЧ.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
				СтрокаТЧ.ДатаПоследнегоИзменения	= ТекущаяДата();
				СтрокаТЧ.Статус						= Статус;
			КонецЕсли; 		
		КонецЦикла; 
		
		//Если ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
		//		ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ОбХар.Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ПричинаПриостановки);
		//КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		МасХар = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МасХар.Добавить(Выборка.Ссылка);
		КонецЦикла;		
		
		//
		ФлСброс = Ложь;
		Если ЗначениеЗаполнено(ДатаВывода)
			И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"		, ДатаВывода);
			Запрос.УстановитьПараметр("Составляющая", МасХар);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Составляющая в (&Составляющая)";
			Выборка1 = Запрос.Выполнить().Выбрать();
			
			Пока Выборка1.Следующий() Цикл
				Сообщить("Позиция " + Выборка1.СоставляющаяВладелец + " " + Выборка1.Составляющая +
				" входит в состав комплекта на дату вывода - " + Выборка1.ХарактеристикаВладелец + " " + Выборка1.Характеристика);
				Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
				ФлСброс = Истина;
			КонецЦикла;
		КонецЕсли;
		
		
		Выборка.Сбросить();
		
		//
		Пока Выборка.Следующий() Цикл
			
			Если ФлСброс Тогда
				Прервать;
			КонецЕсли; 
			
			ОбХар = Выборка.Ссылка.ПолучитьОбъект();
			ОбХар.Причина = Причина;
			ОбХар.ПричинаПриостановки = ПричинаПриостановки; //+++АК SHEP 2018.05.28 ИП-00018185
			
			Если НЕ ОбХар.ДатаВывода = ДатаВывода Тогда
				ТоварыДатаВыводаПриИзмененииСервер(Выборка.Ссылка, ДатаВывода);
				ОбХар.ДатаВывода = ДатаВывода;
			КонецЕсли; 
			
			ОбХар.ДатаОжидаемогоВозврата	= ДатаОжидаемогоВозврата;
			ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
			ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
			//ОбХар.Статус=Статус;
			ОбХар.ДатаПовторнойРассылки = ТекущаяДата() + 24*60*60;
			ОбХар.ПоТовару 				= Истина;
			Попытка
				ОбХар.Записать();
			Исключение
			КонецПопытки; 
			
		КонецЦикла;
		
		Если Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
			
			ОбНом = Номенклатура.ПолучитьОбъект();
			ОбНом.НеобходимаРассылка = Истина;
			ОбНом.Записать();
			//ОтправитьПисьмоОбИзмененииСтатусаСервер(МасХар,Статус,ДатаВывода,Номенклатура,Причина, Истина);
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(ДатаВывода)
			И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
			И НЕ ФлСброс Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"			, ДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, МасХар);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Характеристика В(&Характеристика)
			|	И (СоставКомплектаСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)
			|			ИЛИ СоставКомплектаСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена))";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период			= ДатаВывода;
				МенеджерЗаписи.Характеристика	= Выборка.Характеристика;
				МенеджерЗаписи.Составляющая		= Выборка.Составляющая;
				МенеджерЗаписи.Количество		= 0;
				МенеджерЗаписи.Комплект			= Выборка.ХарактеристикаВладелец;
				МенеджерЗаписи.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
				МенеджерЗаписи.Записать();
				Сообщить("Создана запись по очистке состава комплекта " + Номенклатура + " " + Выборка.Характеристика);
			КонецЦикла;
			
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(ТекДатаВывода)
			И НЕ ТекДатаВывода = ДатаВывода
			И НЕ ФлСброс Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"			, ТекДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, МасХар);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Характеристика
			|ИЗ
			|	РегистрСведений.СоставКомплекта КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество = 0
			|	И СоставКомплектаСрезПоследних.Период = &Дата
			|	И СоставКомплектаСрезПоследних.Характеристика В(&Характеристика)
			|	И (СоставКомплектаСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод)
			|			ИЛИ СоставКомплектаСрезПоследних.Характеристика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена))
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставКомплектаСрезПоследних.Характеристика";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.СоставКомплекта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ТекДатаВывода);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли; 
		
		//
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Номенклатура = Номенклатура Тогда
				Если ФлСброс Тогда
					СтрокаТЧ.ДатаВывода = ТекДатаВывода;
				Иначе
					СтрокаТЧ.Причина					= Причина;
					СтрокаТЧ.ПричинаПриостановки		= ПричинаПриостановки; //+++АК SHEP 2018.05.28 ИП-00018185
					СтрокаТЧ.ДатаВывода					= ДатаВывода;
					СтрокаТЧ.ДатаОжидаемогоВозврата		= ДатаОжидаемогоВозврата;
					СтрокаТЧ.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
					СтрокаТЧ.ДатаПоследнегоИзменения	= ТекущаяДата();
				КонецЕсли; 
			КонецЕсли; 		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ТекДанные.Статус					= Неопределено;
	ТекДанные.Причина					= Неопределено;
	ТекДанные.ПричинаПриостановки		= Неопределено; //+++АК SHEP 2018.05.28 ИП-00018185
	ТекДанные.Датавывода				= Неопределено;
	ТекДанные.ДатаОжидаемогоВозврата	= Неопределено;
	ТекДанные.АвторПоследнегоИзменения	= Неопределено;
	ТекДанные.ДатаПоследнегоИзменения	= Неопределено;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТоварыПриИзмененииСтроки(ТекДанные.Номенклатура, ТекДанные.Характеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	ТоварыПриИзмененииСтроки(ТекДанные.Номенклатура, ТекДанные.Характеристика);
	
	Если ЗначениеЗаполнено(ТекДанные.Характеристика) Тогда
		//+++АК SHEP 2018.05.28 ИП-00018185
		//ТекДанные.Статус					= ПолучитьЗначРекв(ТекДанные.Характеристика, "Статус");
		//ТекДанные.Причина					= ПолучитьЗначРекв(ТекДанные.Характеристика, "Причина");
		//ТекДанные.Датавывода				= ПолучитьЗначРекв(ТекДанные.Характеристика, "Датавывода");
		//ТекДанные.ДатаОжидаемогоВозврата	= ПолучитьЗначРекв(ТекДанные.Характеристика, "ДатаОжидаемогоВозврата");
		//ТекДанные.АвторПоследнегоИзменения	= ПолучитьЗначРекв(ТекДанные.Характеристика, "АвторПоследнегоИзменения");
		//ТекДанные.ДатаПоследнегоИзменения	= ПолучитьЗначРекв(ТекДанные.Характеристика, "ДатаПоследнегоИзменения");
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДанные.Характеристика,
			"Статус,Причина,ПричинаПриостановки,ДатаВывода,ДатаОжидаемогоВозврата,АвторПоследнегоИзменения,ДатаПоследнегоИзменения");
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
		//---АК SHEP 2018.05.28
	Иначе
		ТекДанные.Статус					= Неопределено;
		ТекДанные.Причина					= Неопределено;
		ТекДанные.ПричинаПриостановки		= Неопределено; //+++АК SHEP 2018.05.28 ИП-00018185
		ТекДанные.Датавывода				= Неопределено;
		ТекДанные.ДатаОжидаемогоВозврата	= Неопределено;
		ТекДанные.АвторПоследнегоИзменения	= Неопределено;
		ТекДанные.ДатаПоследнегоИзменения	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.05.28 ИП-00018185 добавил ПричинаПриостановки
//Процедура ТоварыСтатусПриИзмененииСервер(Знач Номенклатура, Знач Характеристика, Знач Статус, Знач Причина, Знач ДатаВывода)
Процедура ТоварыСтатусПриИзмененииСервер(Знач Номенклатура, Знач Характеристика, Знач Статус, Знач Причина, Знач ПричинаПриостановки, Знач ДатаВывода)
//---АК SHEP 2018.05.28
	
	УстановитьПривилегированныйРежим(Истина);
	ФлСброс = Ложь;
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		Если (Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) 
				И НЕ ЗначениеЗаполнено(ДатаВывода) Тогда
			ДатаВывода = ТекущаяДата() + 7*24*60*60;
		КонецЕсли; 
		
		ОбХар = Характеристика.ПолучитьОбъект();
		//Если (Статус = Перечисления.СтатусыХарактеристик.НаВывод
		//		ИЛИ	Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
		
		//+++АК SHEP 2018.05.28 ИП-00018185
		//Если НЕ ЗначениеЗаполнено(Причина)
		//		И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
		Если НЕ ЗначениеЗаполнено(ПричинаПриостановки)
				И (Ложь
		//---АК SHEP 2018.05.28
					ИЛИ	Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда 
			Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			Сообщить("Необходимо указать причину");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаВывода)
			И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"		, ДатаВывода);
			Запрос.УстановитьПараметр("Составляющая", Характеристика);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Составляющая = &Составляющая";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Сообщить("Данная позиция входит в состав комплекта на дату вывода - " + Выборка.ХарактеристикаВладелец + " " + Выборка.Характеристика);
				Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			КонецЦикла;
			
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
			Запрос = Новый Запрос;
			МасНомДляПроверки = Новый Массив;
			МасНомДляПроверки.Добавить(Номенклатура);
			Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	ЗначенияСвойствОбъектов.Значение КАК Производитель
			|ПОМЕСТИТЬ ВТОсновная
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
			|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
			|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
			|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТОсновная.Номенклатура КАК Номенклатура
			|ИЗ
			|	ВТОсновная КАК ВТОсновная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
			|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
			|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
			|ГДЕ
			|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
			
			Выб = Запрос.Выполнить().Выбрать();
			МасНомИскл = Новый Массив;
			Пока Выб.Следующий() Цикл
				Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
				Сообщить(Выб.Номенклатура);
				Статус = Перечисления.СтатусыХарактеристик.ПустаяСсылка();
			КонецЦикла; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаВывода)
			И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос.УстановитьПараметр("Дата"			, ДатаВывода);
			Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Характеристика = &Характеристика";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период			= ДатаВывода;
				МенеджерЗаписи.Характеристика	= Характеристика;
				МенеджерЗаписи.Составляющая		= Выборка.Составляющая;
				МенеджерЗаписи.Количество		= 0;
				МенеджерЗаписи.Комплект			= Характеристика.Владелец;
				МенеджерЗаписи.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
				
				МенеджерЗаписи.Записать();
				Сообщить("Создана запись по очистке состава комплекта " + Номенклатура + " " + Характеристика);
			КонецЦикла;
		КонецЕсли; 
		//КонецЕсли;
		
		ОбХар.Статус 	= Статус;
		ОбХар.ПоТовару 	= Ложь;
		
		Если Статус = Перечисления.СтатусыХарактеристик.НаВывод
			ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена  Тогда
			
			ОбХар.ДатаВывода = ДатаВывода;
		//+++АК SHEP 2018.02.01 ИП-00017757
		ИначеЕсли НЕ ЗначениеЗаполнено(Статус) И НЕ ЗначениеЗаполнено(ДатаВывода) Тогда
			ОбХар.ДатаВывода = ДатаВывода;
		//---АК SHEP 2018.02.01
		КонецЕсли;	
		
		ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
		ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
		ОбХар.ДатаПовторнойРассылки 	= ТекущаяДата() + 24*60*60;
		ОбХар.Записать();
		
		Если Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
			МасСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
			Мас = Новый Массив;
			Для каждого Эл Из МасСтрок Цикл
				Мас.Добавить(Эл.НомерСтроки);	
			КонецЦикла; 
			ВводОтмеченныхСервер(Мас,Ложь);
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
			ОтправитьПисьмоОбИзмененииСтатусаСервер(ОбХар.Ссылка, Статус, ДатаВывода, Номенклатура, Причина, ПричинаПриостановки);
		КонецЕсли; 
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Характеристика = Характеристика Тогда
				СтрокаТЧ.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
				СтрокаТЧ.ДатаПоследнегоИзменения	= ТекущаяДата();
				СтрокаТЧ.ДатаОжидаемогоВозврата		= Характеристика.ДатаОжидаемогоВозврата;
				СтрокаТЧ.ДатаВывода					= Характеристика.ДатаВывода;
				СтрокаТЧ.Статус						= Статус;
				Если Статус = Перечисления.СтатусыХарактеристик.НаВывод 
						ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
					СтрокаТЧ.ДатаВывода				= ДатаВывода;
				КонецЕсли; 
			КонецЕсли; 		
		КонецЦикла; 
		
		СообщитьОстатки(Номенклатура, Характеристика);
		
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если (Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
				И НЕ ЗначениеЗаполнено(ДатаВывода) Тогда
			ДатаВывода = ТекущаяДата() + 7*24*60*60;
		КонецЕсли;
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МасХар = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Масхар.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		//
		ФлСброс = Ложь;
		Если ЗначениеЗаполнено(ДатаВывода)
			И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
				ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата"		, ДатаВывода);
			Запрос.УстановитьПараметр("Составляющая", МасХар);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставКомплектаСрезПоследних.Период,
			|	СоставКомплектаСрезПоследних.Характеристика,
			|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
			|	СоставКомплектаСрезПоследних.Составляющая,
			|	СоставКомплектаСрезПоследних.Количество,
			|	СоставКомплектаСрезПоследних.Комплект,
			|	СоставКомплектаСрезПоследних.ТоварКомплекта
			|ИЗ
			|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, ) КАК СоставКомплектаСрезПоследних
			|ГДЕ
			|	СоставКомплектаСрезПоследних.Количество > 0
			|	И СоставКомплектаСрезПоследних.Составляющая В(&Составляющая)";
			Выборка1 = Запрос.Выполнить().Выбрать();
			
			Пока Выборка1.Следующий() Цикл
				Сообщить("Позиция " + Выборка1.Составляющая.Владелец + " " + Выборка1.Составляющая +
				" входит в состав комплекта на дату вывода - " + Выборка1.ХарактеристикаВладелец + " " + Выборка1.Характеристика);
				//Статус=Перечисления.СтатусыХарактеристик.ПустаяСсылка();
				ФлСброс = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если (Статус = Перечисления.СтатусыХарактеристик.Рабочая) Тогда
			Запрос = Новый Запрос;
			МасНомДляПроверки = Новый Массив;
			МасНомДляПроверки.Добавить(Номенклатура);
			Запрос.УстановитьПараметр("МассивТоваров", МасНомДляПроверки);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	ЗначенияСвойствОбъектов.Значение КАК Производитель
			|ПОМЕСТИТЬ ВТОсновная
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО (ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка)
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец В(&МассивТоваров)
			|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.НеАктивная)
			|	И НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
			|	И НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТОсновная.Номенклатура КАК Номенклатура
			|ИЗ
			|	ВТОсновная КАК ВТОсновная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК Дубли
			|		ПО (Дубли.Производитель = ВТОсновная.Производитель)
			|			И (НЕ Дубли.Номенклатура = ВТОсновная.Номенклатура)
			|ГДЕ
			|	НЕ Дубли.Номенклатура ЕСТЬ NULL ";
			
			Выб = Запрос.Выполнить().Выбрать();
			МасНомИскл = Новый Массив;
			Пока Выб.Следующий() Цикл
				Сообщить("Имеются товары с одинаковыми производителями в активных характеристиках:");
				Сообщить(Выб.Номенклатура);
				ФлСброс = Истина;
			КонецЦикла; 
		КонецЕсли;
		
		
		//+++АК SHEP 2018.05.28 ИП-00018185
		//Если НЕ ЗначениеЗаполнено(Причина)
		//	И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
		Если НЕ ЗначениеЗаполнено(ПричинаПриостановки)
			И (Ложь
		//---АК SHEP 2018.05.28
				ИЛИ	Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда 
			Сообщить("Необходимо указать причину");
			ФлСброс = Истина;
		КонецЕсли;
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если ФлСброс Тогда
				Прервать;
			КонецЕсли; 
			ОбХар = Выборка.Ссылка.ПолучитьОбъект();
			ОбХар.Статус			= Статус;
			Если ОбХар.Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ ОбХар.Статус = Перечисления.СтатусыХарактеристик.Приостановлена  Тогда
				ОбХар.ДатаВывода 	= ДатаВывода;
			КонецЕсли;
			Если ОбХар.Статус = Перечисления.СтатусыХарактеристик.Рабочая Тогда
				ОбХар.СтатусАктивностиХарактеристики= Перечисления.СтатусыАктивностиХарактеристик.Новая;
				ОбХар.ДатаОжидаемогоВозврата		= Дата(1, 1, 1);
				ОбХар.ДатаВывода					= Дата(1, 1, 1);
				ОбХар.Неактивная					= Ложь;
			КонецЕсли;
			ОбХар.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
			ОбХар.ДатаПоследнегоИзменения	= ТекущаяДата();
			ОбХар.ПоТовару 					= Истина;
			ОбХар.ДатаПовторнойРассылки 	= ТекущаяДата() + 24*60*60;
			Попытка
				ОбХар.Записать();                                                 
			Исключение
				Продолжить;
			КонецПопытки; 
		КонецЦикла;
		Если НЕ ФлСброс
				И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
					ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена) Тогда
			ОбНом = Номенклатура.ПолучитьОбъект();
			ОбНом.НеобходимаРассылка=Истина;
			ОбНом.Записать();
			//ОтправитьПисьмоОбИзмененииСтатусаСервер(МасХар,Статус,ДатаВывода,Номенклатура,Причина, Истина);
		КонецЕсли;		                                                                                       
		Если Статус = Перечисления.СтатусыХарактеристик.Рабочая
				И НЕ ФлСброс Тогда
			МасСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
			Мас = Новый Массив;
			Для каждого Эл Из МасСтрок Цикл
				Мас.Добавить(Эл.НомерСтроки);	
			КонецЦикла; 
			
			ВводОтмеченныхСервер(Мас, Ложь);
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Номенклатура = Номенклатура Тогда
				СтрокаТЧ.Статус = ?(ФлСброс, Перечисления.СтатусыХарактеристик.ПустаяСсылка(), Статус);
				Если СтрокаТЧ.Статус = Перечисления.СтатусыХарактеристик.НаВывод 
						ИЛИ СтрокаТЧ.Статус = Перечисления.СтатусыХарактеристик.Приостановлена Тогда
					СтрокаТЧ.ДатаВывода = ДатаВывода;
				КонецЕсли;
				Если НЕ ФлСброс Тогда
					СтрокаТЧ.АвторПоследнегоИзменения	= глЗначениеПеременной("глТекущийПользователь");
					СтрокаТЧ.ДатаПоследнегоИзменения	= ТекущаяДата();
				КонецЕсли; 
			КонецЕсли; 		
		КонецЦикла; 
		Если ЗначениеЗаполнено(ДатаВывода)
		И (Статус = Перечисления.СтатусыХарактеристик.НаВывод
			ИЛИ Статус = Перечисления.СтатусыХарактеристик.Приостановлена)
		И НЕ ФлСброс Тогда
		
		Запрос.УстановитьПараметр("Дата"			, ДатаВывода);
		Запрос.УстановитьПараметр("Характеристика"	, МасХар);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.Период,
		|	СоставКомплектаСрезПоследних.Характеристика,
		|	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК ХарактеристикаВладелец,
		|	СоставКомплектаСрезПоследних.Составляющая,
		|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК СоставляющаяВладелец,
		|	СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.Комплект,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(&Дата, )  КАК СоставКомплектаСрезПоследних
		|ГДЕ
		|	СоставКомплектаСрезПоследних.Количество > 0
		|	И СоставКомплектаСрезПоследних.Характеристика в (&Характеристика)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Мен = РегистрыСведений.СоставКомплекта.СоздатьМенеджерЗаписи();
			Мен.Период			= ДатаВывода;
			Мен.Характеристика	= Выборка.Характеристика;
			Мен.Составляющая	= Выборка.Составляющая;
			Мен.Количество		= 0;
			Мен.Комплект		= Выборка.ХарактеристикаВладелец;
			Мен.ТоварКомплекта	= Выборка.СоставляющаяВладелец;
			Мен.Записать();
			
			Сообщить("Создана запись по очистке состава комплекта " + Номенклатура + " " + Выборка.Характеристика);
		КонецЦикла;
		
	КонецЕсли; 
	
	КонецЕсли;
	
	Если (Статус = Перечисления.СтатусыХарактеристик.Приостановлена
			ИЛИ Статус = Перечисления.СтатусыХарактеристик.НаВывод)
		И НЕ ФлСброс Тогда
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		|	И ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование <> ""Нехватка товара""";
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Мас = ТЗ.НайтиСтроки(Новый Структура("СтатусАктивностиХарактеристики", Перечисления.СтатусыАктивностиХарактеристик.Выведена));
		Если Мас.Количество() = ТЗ.Количество() Тогда
			
			ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Нехватка товара",,, Номенклатура);
			
			Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
				ХарактеристикаОбъект = ХарактеристикаСсылка.ПолучитьОбъект();
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.Неактивная			= Ложь;
			Иначе	
				ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаОбъект.Владелец 			= Номенклатура;
				ХарактеристикаОбъект.Наименование 		= "Нехватка товара";
				ХарактеристикаОбъект.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна;
				ХарактеристикаОбъект.ДополнительныеСвойства.Вставить("НадоЗаписать");
				ХарактеристикаОбъект.СрокГодности		= 1;
				ХарактеристикаОбъект.ТипСрокаГодности	= Справочники.ТипыСроковГодности.НайтиПоНаименованию("Месяц");
				ХарактеристикаОбъект.Неактивная			= Ложь;
			КонецЕсли; 
			Попытка
				ХарактеристикаОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатусПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если (ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод")
		ИЛИ ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена")) И Не ЗначениеЗаполнено(ТекДанные.ДатаВывода)  Тогда
		Сообщить("Необходимо сначала заполнить дату вывода");
		ТекДанные.Статус=ПолучитьЗначРекв(ТекДанные.Характеристика, "Статус");				
		Возврат;
	КонецЕсли; 
	
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		//+++АК SHEP 2018.05.28 ИП-00018185
		//ТоварыСтатусПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.Статус, ТекДанные.Причина, ТекДанные.ДатаВывода);
		ТоварыСтатусПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.Статус, ТекДанные.Причина, ТекДанные.ПричинаПриостановки, ТекДанные.ДатаВывода);
		//---АК SHEP 2018.05.28
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПричинаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	//
	//+++АК SHEP 2018.05.28 ИП-00018185
	//ТоварыПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.Причина, ТекДанные.ДатаВывода, ТекДанные.ДатаОжидаемогоВозврата, ТекДанные.Статус);
	ТоварыПриИзмененииСервер(СтруктураПараметровТоварыПриИзмененииСервер(ТекДанные));
	//---АК SHEP 2018.05.28
	
КонецПроцедуры

//+++АК SHEP 2018.05.28 ИП-00018185
&НаКлиенте
Процедура ТоварыПричинаПриостановкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ТоварыПриИзмененииСервер(СтруктураПараметровТоварыПриИзмененииСервер(ТекДанные));
	
КонецПроцедуры

Процедура ТоварыДатаВыводаПриИзмененииСервер(Характеристика, ДатаВывода)
	
	Если НЕ ЗначениеЗаполнено(ДатаВывода)
			ИЛИ ДатаВывода < НачалоДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбработки"	, НачалоДня(ДатаВывода - 86400));
	Запрос.УстановитьПараметр("Ссылка"			, Характеристика); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ШтриховыеКоды.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ВЗ_Запрос.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ВЗ_Запрос.ДатаПоступления) КАК ДатаПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредзаказТовары.Характеристика КАК Характеристика,
	|		ПредзаказТовары.Ссылка КАК Ссылка,
	|		ЗаказПоставщикуПредзаказы.ДатаПоступления КАК ДатаПоступления
	|	ИЗ
	|		Документ.Предзаказ.Товары КАК ПредзаказТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаказПоставщикуПредзаказы.Документ КАК Документ,
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления КАК ДатаПоступления
	|			ИЗ
	|				Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|			ГДЕ
	|				ЗаказПоставщикуПредзаказы.Ссылка.ДатаПоступления >= &ДатаОбработки
	|				И ЗаказПоставщикуПредзаказы.Ссылка.Проведен) КАК ЗаказПоставщикуПредзаказы
	|			ПО ПредзаказТовары.Ссылка = ЗаказПоставщикуПредзаказы.Документ
	|	ГДЕ
	|		ПредзаказТовары.Характеристика В
	|				(ВЫБРАТЬ
	|					ВТ_Характеристики.Ссылка
	|				ИЗ
	|					ВТ_Характеристики КАК ВТ_Характеристики)
	|		И ПредзаказТовары.Количество > 0) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаОбработки, ) КАК СоставКомплектаСрезПоследних
	|		ПО ВЗ_Запрос.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СоставКомплектаСрезПоследних.Составляющая, ВЗ_Запрос.Характеристика)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Есть " + Строка(Выборка.Ссылка) + " по этой характеристике " + Строка(Характеристика) + " с датой поступления " + Строка(Выборка.ДатаПоступления));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаВыводаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если (ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод")
				ИЛИ ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена"))
			И НЕ ЗначениеЗаполнено(ТекДанные.ДатаВывода)  Тогда
		ТекДанные.ДатаВывода = ПолучитьЗначРекв(ТекДанные.Характеристика, "ДатаВывода");				
		Сообщить("Необходимо заполнить дату вывода");
		Возврат;
	КонецЕсли; 
	
	//+++АК SHEP 2017.12.08 ИП-00017349
	ДатаВыводаБыло = ПолучитьЗначРекв(ТекДанные.Характеристика, "ДатаВывода");
	Если ТекДанные.ДатаВывода <> ДатаВыводаБыло И ЗначениеЗаполнено(ТекДанные.ДатаВывода) И ТекДанные.ДатаВывода < НачалоДня(ТекущаяДата()) Тогда
		ТекДанные.ДатаВывода = ДатаВыводаБыло;
		Сообщить("Дата вывода должна быть не меньше текущей!");
		Возврат;
	КонецЕсли;
	//---АК SHEP 2017.12.08
	
	//
	//+++АК SHEP 2018.05.28 ИП-00018185
	//ТоварыПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.Причина, ТекДанные.ДатаВывода, ТекДанные.ДатаОжидаемогоВозврата, ТекДанные.Статус);
	ТоварыПриИзмененииСервер(СтруктураПараметровТоварыПриИзмененииСервер(ТекДанные));
	//---АК SHEP 2018.05.28
	
	СообщитьОстатки(ТекДанные.Номенклатура, ТекДанные.Характеристика);
	СообщитьПредзаказы(ТекДанные.Характеристика, ТекДанные.ДатаВывода);
	
	Если ТекДанные.ДатаВывода > ЭтаФорма.ТекДатаВывода
			И ЗначениеЗаполнено(ЭтаФорма.ТекДатаВывода) 
			И (ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена") 
				ИЛИ ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод")) Тогда
		МасСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика));
		Мас = Новый Массив;
		Для каждого Эл Из МасСтрок Цикл
			Мас.Добавить(Эл.НомерСтроки);	
		КонецЦикла; 
		ВводОтмеченныхСервер(Мас, Ложь, Истина);
	КонецЕсли; 
	
	ЭтаФорма.ТекДатаВывода = ТекДанные.ДатаВывода;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаОжидаемогоВозвратаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	//+++АК SHEP 2018.05.28 ИП-00018185
	//ТоварыПриИзмененииСервер(ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.Причина, ТекДанные.ДатаВывода, ТекДанные.ДатаОжидаемогоВозврата, ТекДанные.Статус);
	ТоварыПриИзмененииСервер(СтруктураПараметровТоварыПриИзмененииСервер(ТекДанные));
	//---АК SHEP 2018.05.28
	
КонецПроцедуры


Функция ПолучитьОтчетПриВыводе()
	
	// Вставить содержимое обработчика.
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	Иначе         
	КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	//	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	//	|	ХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
	//	|	ХарактеристикиНоменклатуры.Причина,
	//	|	ХарактеристикиНоменклатуры.Статус,
	//	|	ХарактеристикиНоменклатуры.ДатаВывода
	//	|ИЗ
	//	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатуры.Владелец.НеобходимаРассылка
	//	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	
	//Результат = Запрос.Выполнить();
	//ТЗНом=Результат.Выгрузить();
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МасНом = Новый Массив;
	МасНом.Добавить(ТекНоменклатура.id_tov);
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если МасНом.Найти(ВыборкаДетальныеЗаписи.id_tov)=Неопределено Тогда
	//			МасНом.Добавить(ВыборкаДетальныеЗаписи.id_tov);
	//		КонецЕсли; 
	//	КонецЦикла;
	
	Если МасНом.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли; 
	
	
	
	Дата1 = НачалоНедели(ТекущаяДата()) - 7*7*24*60*60;
	Дата2 = КонецНедели(ТекущаяДата());
	
	СтрНом = "";
	Для каждого Эл Из МасНом Цикл
		СтрНом = СтрНом + СтрЗаменить(Строка(ВнешниеДанные.ФорматПоля(Эл)), " ", "") + ",";
	КонецЦикла;
	СтрНом = Лев(СтрНом, СтрДлина(СтрНом) - 1);
	
	
	СтрЗапрос = "
	|if OBJECT_ID('tempdb..##reportsmarge_chast_total') is not null drop table ##reportsmarge_chast_total
	|--declare @tt_format as int = 2


	|if OBJECT_ID ('tempdb..#Kontr') is not null drop table #Kontr
	|if OBJECT_ID ('tempdb..#tk_new') is not null drop table #tk_new
	|if OBJECT_ID ('tempdb..#chast') is not null drop table #chast
	|if OBJECT_ID ('tempdb..#d') is not null drop table #d
	|if OBJECT_ID ('tempdb..#sebest_pr') is not null drop table #sebest_pr
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#email_tk_assist') is not null drop table #email_tk_assist
	|if OBJECT_ID ('tempdb..#email') is not null drop table #email
	|if OBJECT_ID ('tempdb..#email_tk') is not null drop table #email_tk
	|if OBJECT_ID ('tempdb..#email_teh') is not null drop table #email_teh
	|if OBJECT_ID ('tempdb..#email_assist') is not null drop table #email_assist
	|if OBJECT_ID ('tempdb..#generalUK') is not null drop table #generalUK
	|if OBJECT_ID ('tempdb..#TCorrect') is not null drop table #TCorrect
	|if OBJECT_ID ('tempdb..#VTSums') is not null drop table #VTSums

	|declare @date1 as datetime , @date2 as datetime, @tov as int
	|set @date1="+ВнешниеДанные.ФорматПоля(Дата1)+"
	|set @date2 = "+ВнешниеДанные.ФорматПоля(Дата2)+"
	|set @tov = "+ВнешниеДанные.ФорматПоля(999)+"
	|	  
	|select DTT.id_tov , sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)*price) summa 
	|	, sum((quantity-dtt.discount50_qty-dtt.discount50_sms_qty)) post, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime) date_ls
	|into #d
	|from Reports..dtt (nolock)
	|where DTT.date_tt between @date1 and @date2 and dtt.id_tov=@tov
	|group by DTT.id_tov, cast(cast( Cast(DTT.date_tt as datetime)-datepart(weekday, Cast(DTT.date_tt as datetime))+1 as date)as datetime)
	|-------------------------------------------

	|if OBJECT_ID ('tempdb..#chast2') is not null drop table #chast2
	|create table #chast2 ( id_tov_ls int, частота decimal(15,3),date_ls datetime)
	|
	|
	|insert into #chast2( id_tov_ls , частота,date_ls)

	|select ls.id_tov_ls  
	|, case when SUM ( ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end) > 0 then
	|						  SUM (ls.sales_fact)  / 
	|						  SUM (ls.checks_1 + case when ls.konost_ls>=0.1 then ls.checks_2 else 0 end)  * 10 else 0 end частота 
	|, cast(cast( Cast(ls.date_ls as datetime)-datepart(weekday, Cast(ls.date_ls as datetime))+1 as date)as datetime) date_ls
	|																				 
	|	  from m2..Lost_sales (nolock) ls
	|	  where ls.date_ls between @date1 and @date2 and ls.sales_fact>0 --and ls.chastota >0 
	|	  group by ls.id_tov_ls,cast(cast( Cast(ls.date_ls as datetime)-datepart(weekday, Cast(ls.date_ls as datetime))+1 as date)as datetime) 


	|-------------------------------------------------------------------------
	|SELECT id_tov ,  convert(decimal(15,2),sum(Summa+transp) / sum(kolvo))  Себест ,convert(decimal(15,2),sum(transp) / sum(kolvo)) Трансп
	|			,  convert(decimal(15,2),sum(SummUpakovka) / sum(kolvo)) [Стоимость Упак], convert(decimal(15,2),AVG(price)) [ЦенаЗакупки с НДС]
	|, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) date_ls

	|into #sebest_pr
	|FROM [Reports].[dbo].[Sebest_proizvod_old] sp with(nolock)
	|where date_r between @date1 and @date2	 and id_tov=@tov

	|group by  id_tov, cast(cast( Cast(sp.date_r as datetime)-datepart(weekday, Cast(sp.date_r as datetime))+1 as date)as datetime) 
	|having sum(kolvo)>0
	|--------------------------------------------
	|if OBJECT_ID ('tempdb..#povtpok') is not null drop table #povtpok
	|create table #povtpok (  id_tov_cl int, cn int, cntotal int, date_ls datetime)
	|
	|
	|insert into #povtpok( id_tov_cl, cn,cntotal, date_ls)

	|select  a.id_tov_cl, sum(case when cn=1 then 0 else 1 end) cn, count(a.BonusCard_cl) cntotal, a.date_ls
	|From(
	|select a.BonusCard_cl, a.id_tov_cl, count(a.rn) cn, a.date_ls
	|from (
	|select BonusCard_cl, id_tov_cl, BonusCard_cl rn 
	|, cast(cast( Cast(date_ch as datetime)-datepart(weekday, Cast(date_ch as datetime))+1 as date)as datetime)  date_ls
	|from SMS_UNION..Checkline as cl with(nolock)
	|where OperationType_cl=1  and date_ch between @date1 and @date2  and id_tov_cl=@tov

	|union all
	|select BonusCard_cl, id_tov_cl, BonusCard_cl 
	|, cast(cast( Cast(date_ch as datetime)-datepart(weekday, Cast(date_ch as datetime))+1 as date)as datetime) 

	|from SMS_izbenka..Checkline as cl with(nolock)
	|where OperationType_cl=1  and date_ch between @date1 and @date2  and   id_tov_cl=@tov

	|) a
	//|where a.rn>1
	|group by a.BonusCard_cl, a.id_tov_cl,a.date_ls
	|)a  group by  a.id_tov_cl,a.date_ls
	|----------------------------------------------------
	|create table #ls (Period datetime,  id_tov int--, post numeric(15, 3), digust numeric(15, 3)
	|	, spisanie numeric(15, 3), spisanie_kach numeric(15, 3),spisanieavg numeric(15, 3), spisanie_kachavg numeric(15, 3)--, boi numeric(15, 3)
	|	--, akcia numeric(15, 3), razniza numeric(15, 3), raznizaRaschet numeric(15, 3)
	|	, rashod numeric(15, 3), rashodavg numeric(15, 3)--, rashodKKM numeric(15, 3)
	|	--, vozvrat_pok numeric(15, 3), polucheno numeric(15, 3), peremesheno numeric(15, 3), complect numeric(15, 3)
	|, discount50 numeric(15, 3), Vyruchka numeric(15, 3), Summaavg numeric(15, 3)
	|) 
	|
	|Insert into #ls
	|exec ('
	|declare @date1 as datetime , @date2 as datetime, @tov as int

	|set @date1='"+ВнешниеДанные.ФорматПоля(Дата1)+"'
	|set @date2 = '"+ВнешниеДанные.ФорматПоля(Дата2)+"'
	|set @tov = "+ВнешниеДанные.ФорматПоля(999)+"
	|
	|Select dtt.period,DTT.id_tov,sum(dtt.spisanie) spisanie,sum(dtt.spisanie_kach) spisanie_kach ,avg(dtt.spisanie) spisanieavg,
	|avg(dtt.spisanie_kach) spisanie_kachavg
	|,sum(dtt.rashod) rashod,
	|avg(dtt.rashod) rashodavg,SUM(dtt.discount50) discount50,SUM(dtt.Summa) Vyruchka,avg(dtt.Summa) Summaavg
	| from(
	|
	|SELECT cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime) as Period
	|	,DTT.id_tov
	|	,DTT.id_tt
	|	,SUM([post]) post
	|	,SUM([digust]) digust
	|	,SUM(([spisanie] + [spisanie_dost])*[price]) spisanie
	|	,SUM([spisanie_kach]*[price]) spisanie_kach
	|	,SUM([boi]) boi
	|	,SUM([akcia]) akcia
	|	,SUM([razniza]) razniza
	|	,SUM([razniza]) raznizaRaschet
	|	,SUM([quantity]) rashod
	| ,SUM([quantity]) rashodKKM
	|	,SUM([vozvrat_pok]) vozvrat_pok
	|	,SUM([peremPlus]) polucheno
	|	,SUM([peremMinus]) peremesheno
	|	,SUM([complect]) complect,SUM([discount50]) discount50,SUM([Summa]) Summa
	|FROM [vv03].[dbo].[DTT] DTT (nolock) 
	|
	|where date_tt between @date1 and @date2 and id_tov=@tov
	|
	|GROUP BY 
	|	 DTT.id_tov,DTT.id_tt, cast(cast( Cast([date_tt] as datetime)-datepart(weekday, Cast([date_tt] as datetime))+1 as date)as datetime)) as dtt
	| GROUP BY dtt.period,  DTT.id_tov') at [SRV-SQL03]
	|-----------------------------------------------
	|
	|select  t.id_tov,t.Name_tov ТОВ   
	|		 ,UINTov._Fld4946 as TovarUID,
	|		round(a.частота,3) частота 
	//|		,round(a.частота*pr.Price,3) частота_руб
	|		,isnull(povtpok.cn,0) ПовтПокупки
	|		,isnull(povtpok.cntotal,0) ПокупкиОбщие
	|		,convert(decimal(15,1),round(b.Себест,1)) Себестоим		 
	|		,round(case when d.post >0 then summa / (1 + isnull(t.nds,0.18) ) /d.post - b.Себест end*isnull(dtt.rashodavg,0),1) Маржа
	|		,round(isnull(dtt.spisanie,0),3) СписаниеСрок
	|		,round(isnull(dtt.spisanie_kach,0),3)  СписаниеКачество
	|		,isnull(dtt.summaavg,0)  СредВыручка
	|		,isnull(dtt.Vyruchka,0)  Выручка
	|		,round(isnull(dtt.rashodavg,0),3) Оборот
	|		,round(isnull(dtt.Discount50,0),3) СуммаСкидки
	|		,round(isnull(vt.SalesCountavg,0),3) СлучаевПродаж
	|		,a.date_ls НачалоНедели
	|from #chast2 a
	|	inner join M2..Tovari t on a.id_tov_ls=t.id_tov 
	//|	inner join Reports..Price_1C_tov as pr on a.id_tov_ls=pr.id_tov
	|	inner join #d d on d.id_tov=a.id_tov_ls and d.date_ls=a.date_ls
	|	left join #povtpok povtpok on povtpok.id_tov_cl=a.id_tov_ls  and povtpok.date_ls=a.date_ls
	|	left join #sebest_pr b on a.id_tov_ls=b.id_tov  and b.date_ls=a.date_ls
	|
	|left outer join #ls DTT (nolock)  on  DTT.id_tov=a.id_tov_ls  and DTT.Period=a.date_ls
	|inner join(
	| select
	|	Checks.id_tov,
	|	sum(Checks.BaseSum) BaseSum,
	|	sum(Checks.Quantity) Quantity,
	|	sum(Checks.Discount) Discount,
	|	avg(Checks.BaseSum) BaseSumavg,
	|	avg(Checks.Quantity) Quantityavg,
	|	avg(Checks.Discount) Discountavg, avg(Checks.SalesCount) SalesCountavg,
	|   Checks.CloseDate
	|   from(
	|SELECT
	|	Checks.id_tov_cl  id_tov,
	|	Checks.id_tt,
	|	sum(Checks.BaseSum) BaseSum,
	|	sum(Checks.Quantity) Quantity,sum(Checks.SalesCount) SalesCount,
	|	sum(Checks.Discount) Discount,
	|   cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime) CloseDate
	|   from(
	|		Select  dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl id_tt,
	|   Sum(dbo_CheckLine.BaseSum) BaseSum,
	|   Sum(dbo_CheckLine.Quantity) Quantity,Count(dbo_CheckLine.Quantity) SalesCount,
	|	Sum(Case when dbo_Checks.Discount_all=0 then 0 else dbo_CheckLine.BaseSum end) Discount,
	|   cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime) CloseDate
	| FROM [SMS_UNION].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	|	inner join 	 SMS_Union.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	|	and dbo_Checks.CloseDate between @date1 and @date2  and dbo_CheckLine.id_tov_cl=@tov
	| and dbo_Checks.OperationType IN (1))
	|group by dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl,
	|cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime)
	| Union all

	|	
	|		Select  dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl , 
	|   Sum(dbo_CheckLine.BaseSum) ,
	|   Sum(dbo_CheckLine.Quantity) , Count(dbo_CheckLine.Quantity),
	|	Sum(Case when dbo_Checks.Discount=0 then 0 else dbo_CheckLine.BaseSum end) ,
	|   cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime) 
	| FROM [SMS_Izbenka].[dbo].[CheckLine] (nolock) as dbo_CheckLine
	|	inner join 	 SMS_Izbenka.dbo.Checks (nolock) as dbo_Checks on (dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	|	and dbo_Checks.CloseDate between @date1 and @date2  and dbo_CheckLine.id_tov_cl=@tov
	| and dbo_Checks.OperationType IN (1))
	|group by dbo_CheckLine.id_tov_cl,
	|	dbo_CheckLine.id_tt_cl,
	|cast(cast(dbo_Checks.CloseDate-datepart(weekday,dbo_Checks.CloseDate)+1 as date)as datetime)
	|) Checks
	|
	|
	|
	|group by Checks.id_tov_cl,
	|	Checks.id_tt,
	|cast(cast(Checks.CloseDate-datepart(weekday,Checks.CloseDate)+1 as date)as datetime)) Checks
	|group by Checks.id_tov,
	|	Checks.CloseDate
	|) vt  on  vt.id_tov=a.id_tov_ls   and vt.CloseDate=a.date_ls
	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON a.id_tov_ls = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
	|";
	
	СтрЗапрос = СтрЗаменить(СтрЗапрос, "=@tov", " in (" + СтрНом + ")");
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	//ТЗ=Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("Место");
	//ТЗ.Колонки.Добавить("Сенсор");
	//ТЗ.Колонки.Добавить("Shop_name");
	//ТЗ.Колонки.Добавить("mest_name");
	//ТЗ.Колонки.Добавить("Ответ");
	//ТЗ.Колонки.Добавить("Дата");
	//ТЗ.Колонки.Добавить("is_made");
	//ТЗ.Колонки.Добавить("ShopNo");
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	
	ТабДанные = Новый ТаблицаЗначений();
	//ТабДанные.Колонки.Добавить("TTUID"	, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("TovarUID"		, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТабДанные.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Неделя"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ДатаНачала"		, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ДатаОкончания"	, Новый ОписаниеТипов("Дата"));
	
	
	ТабДанные.Колонки.Добавить("Выручка"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВыручкаОбщ"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Оборот"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Маржа"			, Новый ОписаниеТипов("Число"));
	
	ТабДанные.Колонки.Добавить("ПроцентПродажСоСкидкойКВыручке"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПроцентСписанийПоСрокуКВыручке"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПроцентСписанийПоКачествуКВыручке"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПовторныеПокупки"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПокупкиОбщие"		, Новый ОписаниеТипов("Число"));
	
	ТабДанные.Колонки.Добавить("Частота"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ПродажиСоСкидкой"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписанияПоСроку"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СписанияПоКачеству"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СлучаевПродаж"		, Новый ОписаниеТипов("Число"));
	
	
	ТабДанные.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
	
	Попытка
	rs.MoveFirst();
	//
	Сч=0;
	Пока НЕ rs.EOF() Цикл
		СтрокаДоб = ТабДанные.Добавить();
		Если Rs.Fields("TovarUID").Value <> NULL Тогда
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
		КонецЕсли;
		//Если Rs.Fields("TTUID").Value <> NULL Тогда
		//	СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TTUID").Value));
		//КонецЕсли;
		СтрокаДоб.Неделя=	(НачалоНедели(ТекущаяДата())-Rs.Fields("НачалоНедели").Value)/(7*24*60*60);
		СтрокаДоб.ДатаНачала=	НачалоНедели(Rs.Fields("НачалоНедели").Value);
		СтрокаДоб.ДатаОкончания=	КонецНедели(Rs.Fields("НачалоНедели").Value);
		
		
		СтрокаДоб.Выручка = Rs.Fields("СредВыручка").Value;
		СтрокаДоб.ВыручкаОбщ = Rs.Fields("Выручка").Value;
		СтрокаДоб.Оборот = Rs.Fields("Оборот").Value;
		СтрокаДоб.Маржа = Rs.Fields("Маржа").Value;   
		СтрокаДоб.ПроцентПродажСоСкидкойКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,(Rs.Fields("СуммаСкидки").Value)/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПроцентСписанийПоСрокуКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,Rs.Fields("СписаниеСрок").Value/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПроцентСписанийПоКачествуКВыручке = 100*?(Rs.Fields("Выручка").Value=0,0,Rs.Fields("СписаниеКачество").Value/Rs.Fields("Выручка").Value);
		СтрокаДоб.ПовторныеПокупки = Rs.Fields("ПовтПокупки").Value;
		СтрокаДоб.ПокупкиОбщие = Rs.Fields("ПокупкиОбщие").Value;
		СтрокаДоб.ПродажиСоСкидкой = Rs.Fields("СуммаСкидки").Value;
		СтрокаДоб.СписанияПоСроку = Rs.Fields("СписаниеСрок").Value;
		СтрокаДоб.СписанияПоКачеству = Rs.Fields("СписаниеКачество").Value;
		СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
		СтрокаДоб.Частота = Rs.Fields("частота").Value;
		СтрокаДоб.СлучаевПродаж = Rs.Fields("СлучаевПродаж").Value;
		
		rs.MoveNext();
	КонецЦикла;
	Исключение
	КонецПопытки;
	
	
	Для каждого Эл Из МасНом Цикл
		ТЗОтп=ТабДанные.СкопироватьКолонки();
		Для каждого Стр Из ТабДанные Цикл
			Если Стр.id_tov=Эл Тогда
				НовСтр=ТЗОтп.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			КонецЕсли; 
		КонецЦикла; 
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗОтп);
		ДокументРезультат=Новый ТабличныйДокумент;
		//Макет компоновки 
		
		Мак = ПолучитьОбщийМакет("МакетРассылкиПриВыводеТовара");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Мак, Мак.НастройкиПоУмолчанию, );
		
		//Компоновка данных
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );
		
		//Вывод результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);          	
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

&НаКлиенте
Процедура ОтчетПриВыводе(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТекНоменклатура) Тогда
		Возврат;	
	КонецЕсли; 
	
	ТабДокумент = ПолучитьОтчетПриВыводе();
	ТабДокумент.Показать();
	
КонецПроцедуры


Процедура ПодборПоПоставщикамСервер(СтруктураПараметров)
	
	мТоварыПоставщиков = СтруктураПараметров.ТоварыПоставщиков;
	Если мТоварыПоставщиков.Количество() = 0 Тогда
		Сообщить("Не выбран ни один товар!");
		Возврат;
	КонецЕсли;
	
	//+++АК SHEP 2018.05.28 ИП-00018185
	//ТекСтатус 		= СтруктураПараметров.Статус;
	//ТекПричина 		= СтруктураПараметров.Причина;
	//ТекДатаВывода 	= СтруктураПараметров.ДатаВывода;
	//ТекДатаВозврата = СтруктураПараметров.ДатаОжидаемогоВозврата;
	//---АК SHEP 2018.05.28
	
	Для Каждого СтрокаТаблицы Из мТоварыПоставщиков Цикл
		
		Если НЕ СтрокаТаблицы.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		//
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Отметка 				= Истина;
		НоваяСтрока.флХарактеристика 		= Истина;
		//---АК SHEP 2018.05.28 ИП-00018185
		//НоваяСтрока.Номенклатура 			= СтрокаТаблицы.Номенклатура;
		//НоваяСтрока.Характеристика 			= СтрокаТаблицы.Характеристика;
		//НоваяСтрока.Статус 					= ТекСтатус;
		//НоваяСтрока.Причина					= ТекПричина;
		//НоваяСтрока.ДатаВывода				= ТекДатаВывода;
		//НоваяСтрока.ДатаОжидаемогоВозврата	= ТекДатаВозврата;
		//
		//ТоварыПриИзмененииСервер(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, ТекПричина, ТекДатаВывода, ТекДатаВозврата, ТекСтатус);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Номенклатура,Характеристика");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров, "Статус,Причина,ПричинаПриостановки,ДатаВывода,ДатаОжидаемогоВозврата");
		ТоварыПриИзмененииСервер(СтруктураПараметровТоварыПриИзмененииСервер(НоваяСтрока));
		//---АК SHEP 2018.05.28
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПоставщикам(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	//
	СтруктураПараметров = ОткрытьФормуМодально("Обработка.СезонныйВывод.Форма.ФормаПодбораПоПоставщикам");
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ПодборПоПоставщикамСервер(СтруктураПараметров);
	
КонецПроцедуры

//AK ziga 23102017...

Функция РольДоступнаСервер()
	//+++AK ziga ИП-00016835.01 20171118
	//НаименованиеДопПрава="Возможность выбирать статус рабочая";
	Если Не  РольДоступна("ПолныеПрава") Тогда
		МассивПрава=УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ВыборСтатусовПоХарактеристике,Ложь,ПараметрыСеанса.ТекущийПользователь);	
		ПравоИзм=МассивПрава[0];
		Возврат Не ПравоИзм;
	Иначе
		Возврат Истина;
	КонецЕсли;
	//---AK ziga ИП-00016835.01 20171118
КонецФункции

//+++AK ziga ИП-00017211 20171110
&НаКлиенте
Процедура ОтборСтатусНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не РольДоступнаСервер() Тогда		
		СписокСтатусов=Новый Массив;
		Элементы.ОтборСтатус.РежимВыбораИзСписка=Истина;
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод"));
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена"));
		Элемент.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);
		
	КонецЕсли;
КонецПроцедуры
//---AK ziga ИП-00017211 20171110
//...AK ziga

//+++АК SHEP 2017.11.15 ИП-00016064
&НаСервереБезКонтекста
Процедура ТоварыРазрешённоеКоличествоЗаказаПриИзмененииНаСервере(Характеристика, РазрешённоеКоличествоЗаказа, ДатаПоследнегоИзменения, АвторПоследнегоИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоследнегоИзменения = ТекущаяДата();
	АвторПоследнегоИзменения = глЗначениеПеременной("глТекущийПользователь");
	
	СпрХарактеристикаОбъект = Характеристика.ПолучитьОбъект();
	СпрХарактеристикаОбъект.РазрешённоеКоличествоЗаказа = РазрешённоеКоличествоЗаказа;
	СпрХарактеристикаОбъект.АвторПоследнегоИзменения	= АвторПоследнегоИзменения;
	СпрХарактеристикаОбъект.ДатаПоследнегоИзменения	= ТекущаяДата();
	СпрХарактеристикаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//+++АК SHEP 2017.11.15 ИП-00016064
&НаКлиенте
Процедура ТоварыРазрешённоеКоличествоЗаказаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Характеристика) Тогда Возврат; КонецЕсли;
	
	ТоварыРазрешённоеКоличествоЗаказаПриИзмененииНаСервере(ТекДанные.Характеристика, ТекДанные.РазрешённоеКоличествоЗаказа, ТекДанные.ДатаПоследнегоИзменения, ТекДанные.АвторПоследнегоИзменения);
	
КонецПроцедуры
