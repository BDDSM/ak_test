
Процедура СоздатьЗадачи(пОрганизация = Неопределено, пДатаНачала = Неопределено, пДатаОкончания = Неопределено) Экспорт
	ВыполнитьЗадачиСОтправленнымиПлатежками();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(?(пДатаНачала <> Неопределено, пДатаНачала, ПолучитьПредыдущийРабочийДень(ТекущаяДата()))));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(?(пДатаОкончания <> Неопределено, пДатаОкончания, ПолучитьПредыдущийРабочийДень(ТекущаяДата()))));
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходИзБанка.Ссылка
	               |ИЗ
	               |	Документ.РасходИзБанка КАК РасходИзБанка
	               |ГДЕ
	               |	РасходИзБанка.Проведен
	               |	И НЕ РасходИзБанка.Оплачено
	               |	И РасходИзБанка.Дата >= &НачалоПериода
	               |	И РасходИзБанка.Дата <= &КонецПериода
	               |	И (РасходИзБанка.Организация = &Организация
	               |			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьЗадачуПоДокументу(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗадачуПоДокументу(пДокумент)
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи = Справочники.ВидыЗадачПользователей.НеотправленныеПлатежи;
	обЗадача.Дата = ТекущаяДата();
	обЗадача.ОбъектЗадачи = пДокумент;
	обЗадача.Ответственный = Константы.ОтветственныйЗаБанковскиеОперации.Получить();	
	обЗадача.Исполнитель = Константы.ОтветственныйЗаБанковскиеОперации.Получить();	
	обЗадача.Организация = пДокумент.Организация;
	обЗадача.Оповещение = Истина;
	обЗадача.СрокИсполнения = НачалоДня(ТекущаяДата());
	обЗадача.СрокОповещения = НачалоДня(ТекущаяДата());
	обЗадача.Наименование = "Документ " + пДокумент + " не отправлен в банк";
	обЗадача.Записать();
КонецПроцедуры

Процедура ВыполнитьЗадачиСОтправленнымиПлатежками()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачаИсполнителя.Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.НеотправленныеПлатежи)
	               |	И НЕ ЗадачаИсполнителя.Выполнена";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		обЗадача = Выборка.Ссылка.ПолучитьОбъект();
		обЗадача.ВыполнитьЗадачу();
		обЗадача.Записать();
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьПредыдущийРабочийДень(пДата)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", пДата);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	(РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	               |			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	               |	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря < &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаКалендаря УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаКалендаря;
	Иначе
		Возврат пДата - 86400;
	КонецЕсли;
КонецФункции