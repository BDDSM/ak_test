//Функция получает с почты письма содержащие сообщения об ошибках. Обрабатывает их и возвращает ТЗ в удобной для дальнейшей работы с ошибками форме.
Функция ПолучитьТаблицуОшибокОтправкиПочтовыхСообщений(УчетнаяЗаписьЭлектроннойПочты, ДатаНачало, ДатаКонец) Экспорт
	//Подключаемся к почте
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = УчетнаяЗаписьЭлектроннойПочты.SMTPСервер;
	Профиль.АдресСервераPOP3 = УчетнаяЗаписьЭлектроннойПочты.POP3Сервер;
	Профиль.ПортSMTP = УчетнаяЗаписьЭлектроннойПочты.ПортSMTP;
	Профиль.ПортPOP3 = УчетнаяЗаписьЭлектроннойПочты.ПортPOP3;
	Профиль.Пользователь = УчетнаяЗаписьЭлектроннойПочты.Логин;
	Профиль.Пароль = УчетнаяЗаписьЭлектроннойПочты.Пароль;
	Профиль.ИспользоватьSSLPOP3 = Истина;
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
	
	//ПОлучаем и обрабатываем заголовки писем
	Заголовки = Почта.ПолучитьЗаголовки();
	ПолучаемоеСообщение = новый массив;
	ПолученыеОшибки = новый ТаблицаЗначений;
	ПолученыеОшибки.Колонки.Добавить("ТекстОшибки");
	ПолученыеОшибки.Колонки.Добавить("Email");
	ПолученыеОшибки.Колонки.Добавить("ОписаниеОшибки");
	ПолученыеОшибки.Колонки.Добавить("ЗначениеОшибки");
	сч=0;
	Пока сч<Заголовки.Количество() цикл
		Если Найти(Заголовки[сч].Тема, "Undelivered Mail Returned to Sender") > 0 
			И Заголовки[сч].ДатаОтправления >=ДатаНачало И Заголовки[сч].ДатаОтправления <=ДатаКонец Тогда
			ПолучаемоеСообщение.Добавить(Заголовки[сч]);
			//Если заголовок сообшает о том что письмо содержит сообщение об ошибке получим его и разберем
			Попытка
				ПолученноеСообщение = Почта.Выбрать(ложь,  ПолучаемоеСообщение);
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
			
			Если ПолученноеСообщение.Количество() = 1 Тогда
				Для каждого ТекстСообщения из ПолученноеСообщение[0].Тексты цикл
					НайденыйНомер = Найти(ТекстСообщения.Текст,"The mail system");
					Если НайденыйНомер>0 Тогда
						НачальныйНомер = НайденыйНомер+17;
						ТекстСОшибками = СокрЛП(Сред(ТекстСообщения.Текст, НачальныйНомер));
						
						//Может быть несколько ошибок
						НайденыйНомер = Найти(ТекстСОшибками, Символы.ПС+ Символы.ВК);
						Пока НайденыйНомер>0 Цикл
							ТекстОшибки = Лев(ТекстСОшибками,НайденыйНомер-1);
							Если НЕ ПустаяСТрока(ТекстОшибки) Тогда
								Стр = ПолученыеОшибки.Добавить();
								Стр.ТекстОшибки = СокрЛП(ТекстОшибки);
							КонецЕсли;	
							ТекстСОшибками = Сред(ТекстСОшибками, НайденыйНомер+3);
							НайденыйНомер = Найти(ТекстСОшибками, Символы.ПС+ Символы.ВК);
						КонецЦикла;
						
						Если Не ПустаяСтрока(ТекстСОшибками) Тогда
							Стр = ПолученыеОшибки.Добавить();
							Стр.ТекстОшибки = СокрЛП(ТекстСОшибками);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПолучаемоеСообщение.Очистить();
		КонецЕсли;
		сч=сч+1;
	КонецЦикла;
	
	//Если были получены ошибки их нужно обработать, и представить в более удобной форме.
	Если ПолученыеОшибки.Количество()>0 Тогда	
		Для каждого Стр из ПолученыеОшибки цикл
			//Выделим Email
			НачальныйНомер = Найти(Стр.ТекстОшибки,"<")+1;
			ЧислоСимволов = Найти(Стр.ТекстОшибки,">") - НайденыйНомер-2;
			Стр.Email = Сред(Стр.ТекстОшибки, НачальныйНомер, ЧислоСимволов);
			
			//Выделим описание ошибки
			Стр.ОписаниеОшибки = Сред(Стр.ТекстОшибки,НачальныйНомер + ЧислоСимволов +2);
			НачальныйНомер = Найти(Стр.ОписаниеОшибки,":")+1;
			Стр.ОписаниеОшибки = СокрЛП(Сред(Стр.ОписаниеОшибки, НачальныйНомер));
			
			//Классифицируем описание ошибки
			Если Найти(Стр.ОписаниеОшибки, "invalid mailbox")>0 Тогда
				Стр.ЗначениеОшибки = "Письмо отправлено на несуществующий адрес";
				Продолжить;	
			КонецЕсли;
			
			Если Найти(Стр.ОписаниеОшибки, "rejected because not seems FQDN like")>0 Тогда
				Стр.ЗначениеОшибки = "Письмо отправлено на несуществующий адрес";
				Продолжить;	
			КонецЕсли;

			
		КонецЦикла;
		
	КонецЕсли;
	Почта.Отключиться();	
	
	Возврат ПолученыеОшибки;
КонецФункции

//Процедура убирает из контактной информации несуществующие адреса
Процедура ОбработатьТаблицуОшибокОтправкиПочтовыхСообщений(ТаблицаОшибок, УдалятьНесуществующиеАдреса = Истина) Экспорт
	//
	Если УдалятьНесуществующиеАдреса Тогда
		Отбор = Новый Структура;	
		Отбор.Вставить("ЗначениеОшибки", "Письмо отправлено на несуществующий адрес");
		ТЗ = ТаблицаОшибок.Скопировать(Отбор);
		
		Если ТЗ.Количество() > 0 Тогда
			Запрос = новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			               |	КонтактнаяИнформация.Объект КАК Объект,
			               |	КонтактнаяИнформация.Тип КАК Тип,
			               |	КонтактнаяИнформация.Вид КАК Вид,
			               |	""&Email"" КАК Email
						   |ИЗ
			               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |ГДЕ
			               |	КонтактнаяИнформация.Вид <> ""Удалить""
			               |	И КонтактнаяИнформация.Представление ПОДОБНО ""%&Email%""";
					   
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Email", ТЗ[0].Email);		   
			Для сч = 1 по ТЗ.Количество()-1 Цикл
				Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ"+ Символы.ПС + СтрЗаменить(ТекстЗапроса, "&Email", ТЗ[Сч].Email);	
			КонецЦикла;
			Выборка = Запрос.Выполнить().Выбрать();
			МенеджерЗаписиИсточник = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи(); //Та запись откуда удаляем Email
			МенеджерЗаписиПриемник = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи(); //Та запись куда вставляем Email
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписиИсточник.Объект = Выборка.Объект;
				МенеджерЗаписиИсточник.Тип = Выборка.Тип;
				МенеджерЗаписиИсточник.Вид = Выборка.Вид;
				МенеджерЗаписиИсточник.Прочитать();
				Если НЕ МенеджерЗаписиИсточник.Выбран() Тогда
					Продолжить;	
				КонецЕсли;
				
				МенеджерЗаписиПриемник.Объект = Выборка.Объект;
				МенеджерЗаписиПриемник.Тип = Выборка.Тип;
				МенеджерЗаписиПриемник.Вид = "Удалить";
				МенеджерЗаписиПриемник.Прочитать();
				Если НЕ МенеджерЗаписиПриемник.Выбран() Тогда
					МенеджерЗаписиПриемник.Объект = МенеджерЗаписиИсточник.Объект;
					МенеджерЗаписиПриемник.Тип = МенеджерЗаписиИсточник.Тип;
					МенеджерЗаписиПриемник.Вид = "Удалить";	
				КонецЕсли;
				
				Если Найти(МенеджерЗаписиИсточник.Представление, Выборка.Email) Тогда
					Email = Выборка.Email;
				Иначе
					Продолжить;
				КонецЕсли;
				//Проверим не является ли найденный email частью более длинного email, который удалять нельзя
				НомерПредСимвола = Найти(МенеджерЗаписиИсточник.Представление, Email)-1;
				НомерСледСимвола = Найти(МенеджерЗаписиИсточник.Представление, Email)+СтрДлина(Email);
				Если НомерПредСимвола>0 Тогда
					ПредСимвол = Сред(МенеджерЗаписиИсточник.Представление,НомерПредСимвола,1);
				Иначе
					ПредСимвол = "";
				КонецЕсли;
				Если НомерСледСимвола<=СтрДлина(МенеджерЗаписиИсточник.Представление) Тогда
					СледСимвол = Сред(МенеджерЗаписиИсточник.Представление,НомерСледСимвола,1);
				Иначе
					СледСимвол = "";
				КонецЕсли;
				Если НЕ(ПредСимвол = "" ИЛИ ПредСимвол = " " ИЛИ ПредСимвол = ";") ИЛИ НЕ(СледСимвол = "" ИЛИ СледСимвол = " " ИЛИ СледСимвол = ";") Тогда
					Продолжить;	
				КонецЕсли;
				
				Если Найти(МенеджерЗаписиИсточник.Представление, Email + ";") Тогда
					Email = Email + ";";
				КонецЕсли;
				Если Найти(МенеджерЗаписиИсточник.Представление, " " + Email) Тогда
					Email = " " + Email;
				Иначе	
					Если Найти(МенеджерЗаписиИсточник.Представление, Email + " ") Тогда
						Email = Email + " ";
					КонецЕсли;
				КонецЕсли;

				
				МенеджерЗаписиИсточник.Представление =  СтрЗаменить(МенеджерЗаписиИсточник.Представление, Email, "");
				МенеджерЗаписиПриемник.Представление =  МенеджерЗаписиПриемник.Представление + Выборка.Email + ";";
				
				НачатьТранзакцию();
				МенеджерЗаписиИсточник.Записать();
				МенеджерЗаписиПриемник.Записать();
				ЗафиксироватьТранзакцию();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	