
Функция ПолучитьГраницуЗапретаИзменений() Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Границы.ГраницаЗапретаИзменений
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
	|ГДЕ
	|	Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Границы.Пользователь = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГраницаЗапретаИзменений;    
	Иначе
		Возврат Дата("20111001000000");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююДатуРКОВкусвилл()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходИзКассы.Дата КАК Дата
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация.ИНН = ""7734675810""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.Дата);
	Иначе
		Возврат Дата("20130714");
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьРКО(пНачалоПериода = Неопределено, пКонецПериода = Неопределено) Экспорт

	бд = Новый COMобъект("V82.ComConnector");
	Попытка 
		астор = бд.Connect("Srvr=""SRV-SQL01"";Ref=""VV"";Usr=""Обмен"";Pwd=""123321""");
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	Запрос = астор.NewObject("Запрос");
	//
	Если пНачалоПериода = Неопределено Тогда
		пНачалоПериода = Макс(Мин(НачалоМесяца(ТекущаяДата()), НачалоДня(ТекущаяДата()) - 5*86400), ПолучитьГраницуЗапретаИзменений());
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода"	, пНачалоПериода);
	//Запрос.УстановитьПараметр("НачалоПериода"	, ?(пНачалоПериода = Неопределено	, 
	//								Макс(ПолучитьПоследнююДатуРКОВкусвилл(), ПолучитьГраницуЗапретаИзменений()), НачалоДня(пНачалоПериода)));
	Запрос.УстановитьПараметр("КонецПериода"	, ?(пКонецПериода = Неопределено	, КонецДня(ТекущаяДата()), КонецДня(пКонецПериода)));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.КлассификацияОперации КАК КлассификацияДенежнойОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата >= &НачалоПериода
	|	И РасходныйКассовыйОрдер.Дата <= &КонецПериода
	|	И РасходныйКассовыйОрдер.КлассификацияОперации В (ЗНАЧЕНИЕ(Перечисление.КлассификаторДенежныхОпераций.ПеремещениеКассаБанк), ЗНАЧЕНИЕ(Перечисление.КлассификаторДенежныхОпераций.ПрочиеВыплатыИПоступления))
	|	И НЕ РасходныйКассовыйОрдер.КоррСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	И НЕ РасходныйКассовыйОрдер.КоррСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БезвозмездныеПоступления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СравнениеЗначенийV8 = астор.NewObject("СравнениеЗначений");
	
	//НачатьТранзакцию();
	//Попытка
	Пока Выборка.Следующий() Цикл
		ЗагрузитьДокумент(астор, Выборка.Ссылка, Выборка.КлассификацияДенежнойОперации, СравнениеЗначенийV8);	
	КонецЦикла;
		//ЗафиксироватьТранзакцию();
		
	//Исключение
	//	#Если Клиент Тогда
	//		Сообщить(ОписаниеОшибки());
	//	#КонецЕсли
		//ОтменитьТранзакцию();
	//КонецПопытки;
	
	астор 	= Неопределено;
	бд 		= Неопределено;
	Запрос 	= Неопределено;
	СравнениеЗначенийV8 = Неопределено;
	
КонецПроцедуры

Функция НайтиДокумент(астор, пДокументИсточник, ГУИДРКОАстор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СвойствоГУИД", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00000000012"));
	Запрос.УстановитьПараметр("ГУИД"		, ГУИДРКОАстор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &СвойствоГУИД
	|	И ЗначенияСвойствОбъектов.Значение = &ГУИД";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Объект;
	Иначе
		Возврат Документы.РасходИзКассы.ПустаяСсылка();
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Номер"	, пНомер);
	//Запрос.УстановитьПараметр("НачДата"	, Макс(НачалоГода(пДата), НачалоМесяца(ДобавитьМесяц(пДата, -1))));
	//Запрос.УстановитьПараметр("КонДата"	, Мин(КонецМесяца(ДобавитьМесяц(пДата, 1)), КонецГода(пДата)));
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	РасходИзКассы.Ссылка
	//|ИЗ
	//|	Документ.РасходИзКассы КАК РасходИзКассы
	//|ГДЕ
	//|	РасходИзКассы.НомерВАсторе = &Номер
	//|	И РасходИзКассы.Дата МЕЖДУ &НачДата И &КонДата";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка.Ссылка;
	//Иначе
	//	Возврат Документы.РасходИзКассы.ПустаяСсылка();
	//КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьДокумент(астор, пДокументИсточник, пКлассификацияДенежнойОперации, пСравнениеЗначенийV8)
	
	Счет5001 = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Счет5701 = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	
	мДатаДок = пДокументИсточник.Дата;
	
	ОрганизацияВкусВилл 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"); // "Вкусвилл"
	ТекСтруктурнаяЕдиница 	= Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(пДокументИсточник.ДенежнаяЯчейка.Владелец.Наименование);
	ТекЦФО 					= ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ТекСтруктурнаяЕдиница, мДатаДок);
	ТекКомментарий = "Загружен из Астора" + ?(СокрЛП(пДокументИсточник.Комментарий) <> "", ". " + СокрЛП(пДокументИсточник.Комментарий), "");
	
	ЭтоПеремещениеКассаБанк =
	 (пСравнениеЗначенийV8.Сравнить(пКлассификацияДенежнойОперации, астор.Перечисления.КлассификаторДенежныхОпераций.ПеремещениеКассаБанк) = 0);
	ЭтоПрочийРасходДС =
	 (пСравнениеЗначенийV8.Сравнить(пКлассификацияДенежнойОперации, астор.Перечисления.КлассификаторДенежныхОпераций.ПрочиеВыплатыИПоступления) = 0);
	
	// поиск документа РКО по номеру (Астор) и году даты
	ГУИДРКОАстор = астор.string(пДокументИсточник.УникальныйИдентификатор());
	
	//сДок = НайтиДокумент(пДокументИсточник.Номер, мДатаДок);
	сДок = НайтиДокумент(астор, пДокументИсточник, ГУИДРКОАстор);
	
	НадоЗаписывать = Ложь;
	
	Если сДок.Пустая() Тогда  // новый документ
		
		НадоЗаписывать = Истина;
		
		обДок = Документы.РасходИзКассы.СоздатьДокумент();
		обДок.Дата 			= мДатаДок;
		обДок.Организация 	= ОрганизацияВкусВилл;
		обДок.УстановитьНовыйНомер(обДок.Организация.Префикс);
		
		обДок.НомерВАсторе 	= пДокументИсточник.Номер;
		
		пОперация = "Создан";
		
		обДок.СтруктурнаяЕдиница 	= ТекСтруктурнаяЕдиница;
		обДок.СчетКасса 			= Счет5001;
		обДок.СуммаДокумента 		= пДокументИсточник.Сумма;
		обДок.Комментарий 			= ТекКомментарий;
		
		обДок.Основание 			= пДокументИсточник.Основание;
		
		Если ЭтоПеремещениеКассаБанк Тогда
			
			обДок.ВидОперации 						= Перечисления.ВидыОперацийРКО.Инкассация;
			обДок.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010"); //Перемещения денежных средств
			обДок.СчетУчетаРасчетовСКонтрагентомБУ 	= Счет5701;
			обДок.СчетУчетаРасчетовПоАвансамБУ 		= Счет5701;
			обДок.НомерСумки 						= пДокументИсточник.НомерСумки;
			
			//+++АК LAGP 2018.06.30 ИП-00018925 Подтягивать контрагента в РКО из стр. единицы магазина
			//обДок.Выдать 							= "НКО ""Бринкс"" (ООО)";
			обДок.Выдать 							= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтруктурнаяЕдиница, "ИнкассируемыйБанк");
			//---АК LAGP
			
			обДок.Приложение 						= "Квитанция к сумке № " + пДокументИсточник.НомерСумки;
			
		ИначеЕсли ЭтоПрочийРасходДС Тогда
			
			обДок.ВидОперации 						= Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			обДок.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102"); //Возврат покупателю
			обДок.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями; //60.01
			обДок.СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным; //60.02
			обДок.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек; //90.4
			обДок.ЦФО 								= ТекЦФО;
			обДок.СубконтоДт1 						= ТекСтруктурнаяЕдиница;
			обДок.СубконтоДт2 						= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
			обДок.СубконтоДт3 						= ТекЦФО;
			
		КонецЕсли;
		
		обДок.ПометкаУдаления = пДокументИсточник.ПометкаУдаления;
		
		мСсылкаНового = Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДРКОАстор));
		обДок.УстановитьСсылкуНового(мСсылкаНового);
		
	Иначе
		
		#Если Клиент Тогда
			Сообщить(" документ " + сДок + " уже создан");
		#КонецЕсли
		////
		//Если сДок.Дата < мДатаОтсечки Тогда
		//	Возврат;
		//КонецЕсли;
		////
		обДок = сДок.ПолучитьОбъект();
		Если НЕ обДок.Дата = мДатаДок Тогда
			НадоЗаписывать = Истина;
			обДок.Дата 	= мДатаДок;
		КонецЕсли;
		Если НЕ обДок.Организация = ОрганизацияВкусВилл Тогда
			НадоЗаписывать = Истина;
			обДок.Организация 	= ОрганизацияВкусВилл;
		КонецЕсли;
		//Если НЕ обДок.ПометкаУдаления = пДокументИсточник.ПометкаУдаления Тогда
		//	НадоЗаписывать = Истина;
		//	обДок.ПометкаУдаления = пДокументИсточник.ПометкаУдаления;
		//	Если пДокументИсточник.ПометкаУдаления Тогда
		//		обДок.Проведен = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		////Если обДок.ПометкаУдаления Тогда
		////	НадоЗаписывать = Истина;
		////	обДок.ПометкаУдаления = Ложь;
		////КонецЕсли;
		
		пОперация = "Перезаполнен";
		
		Если НЕ обДок.СтруктурнаяЕдиница = ТекСтруктурнаяЕдиница Тогда
			НадоЗаписывать = Истина;
			обДок.СтруктурнаяЕдиница 	= ТекСтруктурнаяЕдиница;
		КонецЕсли;
		Если НЕ обДок.СчетКасса = Счет5001 Тогда
			НадоЗаписывать = Истина;
			обДок.СчетКасса 			= Счет5001;
		КонецЕсли;
		//Если НЕ обДок.СуммаДокумента = пДокументИсточник.Сумма Тогда
		//	НадоЗаписывать = Истина;
		//	обДок.СуммаДокумента 		= пДокументИсточник.Сумма;
		//КонецЕсли;
		Если НЕ обДок.Комментарий = ТекКомментарий Тогда
			НадоЗаписывать = Истина;
			обДок.Комментарий 			= ТекКомментарий;
		КонецЕсли;
		Если НЕ обДок.Основание = пДокументИсточник.Основание Тогда
			НадоЗаписывать = Истина;
			обДок.Основание 			= пДокументИсточник.Основание;
		КонецЕсли;
		
		Если ЭтоПеремещениеКассаБанк Тогда
			
			ТекВидОперации = Перечисления.ВидыОперацийРКО.Инкассация;
			Если НЕ обДок.ВидОперации = ТекВидОперации Тогда
				НадоЗаписывать = Истина;
				обДок.ВидОперации = ТекВидОперации;
			КонецЕсли;
			ТекСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010"); //Перемещения денежных средств
			Если НЕ обДок.СтатьяДвиженияДенежныхСредств = ТекСтатьяДДС Тогда
				НадоЗаписывать = Истина;
				обДок.СтатьяДвиженияДенежныхСредств 	= ТекСтатьяДДС;
			КонецЕсли;
			Если НЕ обДок.СчетУчетаРасчетовСКонтрагентомБУ = Счет5701 Тогда
				НадоЗаписывать = Истина;
				обДок.СчетУчетаРасчетовСКонтрагентомБУ 	= Счет5701;
			КонецЕсли;
			Если НЕ обДок.СчетУчетаРасчетовПоАвансамБУ = Счет5701 Тогда
				НадоЗаписывать = Истина;
				обДок.СчетУчетаРасчетовПоАвансамБУ 		= Счет5701;
			КонецЕсли;
			Если НЕ обДок.НомерСумки = пДокументИсточник.НомерСумки Тогда
				НадоЗаписывать = Истина;
				обДок.НомерСумки 						= пДокументИсточник.НомерСумки;
			КонецЕсли;
			
			//+++АК LAGP 2018.06.30 ИП-00018925 Подтягивать контрагента в РКО из стр. единицы магазина
			//Если НЕ обДок.Выдать = "НКО ""Бринкс"" (ООО)" Тогда
			//	НадоЗаписывать = Истина;
			//	обДок.Выдать 							= "НКО ""Бринкс"" (ООО)";
			//КонецЕсли;
			Если НЕ ЗначениеЗаполнено(обДок.Выдать) Тогда
				НадоЗаписывать = Истина;
				обДок.Выдать 							= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтруктурнаяЕдиница, "ИнкассируемыйБанк");
			КонецЕсли;
			//+++АК LAGP
			
			Если НЕ обДок.Приложение = "Квитанция к сумке № " + пДокументИсточник.НомерСумки Тогда
				НадоЗаписывать = Истина;
				обДок.Приложение 						= "Квитанция к сумке № " + пДокументИсточник.НомерСумки;
			КонецЕсли;
			
		ИначеЕсли ЭтоПрочийРасходДС Тогда
			
			ТекВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			Если НЕ обДок.ВидОперации = ТекВидОперации Тогда
				НадоЗаписывать = Истина;
				обДок.ВидОперации = ТекВидОперации;
			КонецЕсли;
			ТекСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102"); //Возврат покупателю
			Если НЕ обДок.СтатьяДвиженияДенежныхСредств = ТекСтатьяДДС Тогда
				НадоЗаписывать = Истина;
				обДок.СтатьяДвиженияДенежныхСредств 	= ТекСтатьяДДС;
			КонецЕсли;
			Если НЕ обДок.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
				НадоЗаписывать = Истина;
				обДок.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями; //60.01
			КонецЕсли;
			Если НЕ обДок.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным Тогда
				НадоЗаписывать = Истина;
				обДок.СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным; //60.02
			КонецЕсли;
			Если НЕ обДок.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ВыручкаТорговыхТочек Тогда
				НадоЗаписывать = Истина;
				обДок.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек; //90.4
			КонецЕсли;
			Если НЕ обДок.ЦФО = ТекЦФО Тогда
				НадоЗаписывать = Истина;
				обДок.ЦФО 								= ТекЦФО;
			КонецЕсли;
			Если НЕ обДок.СубконтоДт1 = ТекСтруктурнаяЕдиница Тогда
				НадоЗаписывать = Истина;
				обДок.СубконтоДт1 						= ТекСтруктурнаяЕдиница;
			КонецЕсли;
			Если НЕ обДок.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.РозничнаяВыручка Тогда
				НадоЗаписывать = Истина;
				обДок.СубконтоДт2 						= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
			КонецЕсли;
			Если НЕ обДок.СубконтоДт3 = ТекЦФО Тогда
				НадоЗаписывать = Истина;
				обДок.СубконтоДт3 						= ТекЦФО;
			КонецЕсли;
			
		КонецЕсли;
		Если НЕ обДок.ПометкаУдаления = пДокументИсточник.ПометкаУдаления Тогда
			Если НадоЗаписывать Тогда // нельзя устанавливать / снимать пометку удаления в измененном документе, сначала запись в этом случае
				Попытка
					обДок.Записать();
				Исключение
					#Если Клиент Тогда
						Сообщить(ОписаниеОшибки());
					#КонецЕсли
				КонецПопытки;
			КонецЕсли;
			Попытка
				обДок.УстановитьПометкуУдаления(пДокументИсточник.ПометкаУдаления);
				НадоЗаписывать = пДокументИсточник.Проведен;
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	обДок.СтатьяДвиженияДенежныхСредствБУ=ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(обДок.СтатьяДвиженияДенежныхСредств,обДок.ВидОперации);
	
	Если НадоЗаписывать Тогда
		
		Попытка
			Если обДок.Проведен Тогда
				обДок.Записать(?(пДокументИсточник.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
			Иначе	
				обДок.Записать(?(пДокументИсточник.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;	
			#Если Клиент Тогда
				Сообщить(пОперация + " документ " + обДок.Ссылка);
			#КонецЕсли
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
		
	КонецЕсли;
	
	Если сДок.Пустая() Тогда  // новый документ
		МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект 	= обДок.Ссылка;
		МенеджерЗаписи.Свойство	= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00000000012");
		МенеджерЗаписи.Значение = ГУИДРКОАстор;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры
