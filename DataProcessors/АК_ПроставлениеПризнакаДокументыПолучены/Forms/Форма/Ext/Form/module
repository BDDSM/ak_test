
Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	//ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	ПроставитьРаспечатан = (Вопрос("Проставить признак ""Распечатан"" для новых вложений?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да);
	Печать(Истина);
КонецПроцедуры

Процедура КоманднаяПанель1Действие(Кнопка)
	СнятьУстановитьГалки(Истина);
КонецПроцедуры

Процедура СнятьУстановитьГалки(ЗначениеФлага)
	Для Каждого Стр Из Заявки Цикл
		Стр.Проставить = ЗначениеФлага;	
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1СнятьФлажки(Кнопка)
	СнятьУстановитьГалки(Ложь);
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть()
	Заявки.Очистить();
	ЗаявкиОбщая = Заявки.Выгрузить();
	ЗаявкиВременная = Заявки.Выгрузить();
	РезультатЗапроса = РеузльтатЗапроса();
	ВыборкаГруппа = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппа.Следующий() Цикл 
		Если ВыборкаГруппа.ДокументыНеПолучены Тогда
			ЗаявкиВременная.Очистить();
			Выборка = ВыборкаГруппа.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ЗаявкиОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				Если Выборка.НомерСтрокиТЧ = 1 Тогда
					Остаток = Выборка.АктСверки.ОстатокНаНачало;
				КонецЕсли;
				Остаток = Остаток + Выборка.Дебет - Выборка.Кредит;
				НоваяСтрока.Остаток = Остаток;
				Если ЗначениеЗаполнено(Выборка.ЗаявкаНаРасходованиеСредств) и Выборка.ДокументыНеПолучены Тогда	
					НоваяСтрокаВременная = ЗаявкиВременная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВременная,НоваяСтрока);
					Если Остаток = 0 Тогда
						Для Каждого Стр Из ЗаявкиВременная Цикл
							НоваяСтрокаИтог = Заявки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаИтог,Стр);
							НоваяСтрокаИтог.ДатаНулевогоСальдо = Выборка.Дата;
							НоваяСтрокаИтог.ПериодСверки = "с "+Формат(Стр.ДатаНачала, "ДФ=dd.MM.yy") + " по "+Формат(Стр.ДатаОкончания, "ДФ=dd.MM.yy");
						КонецЦикла;
						ЗаявкиВременная.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Если НЕ РезультатЗапроса = Неопределено Тогда
	//	//Документы.Загрузить(РезультатЗапроса);
	//	
	//КонецЕсли;
КонецПроцедуры

Функция РеузльтатЗапроса()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Ссылка КАК АктСверки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ПометкаУдаления,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Номер,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Проведен,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Организация,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Контрагент,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ДатаНачала,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ДатаОкончания,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Комментарий,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Ответственный,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ВалютаДокумента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ПредставительОрганизации,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ОстатокНаНачало,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Расхождение,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.СверкаСогласована,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ТорговаяТочка,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.СвереноСБухгалтерией,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки КАК НомерСтрокиТЧ,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК Дата,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Представление,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств,
	|	ВЫБОР
	|		КОГДА АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор.ЗаявкаНаРасходованиеСредств.ВсеДокументыВНаличии ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НЕ АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор.ЗаявкаНаРасходованиеСредств.ВсеДокументыВНаличии
	|	КОНЕЦ КАК ДокументыНеПолучены
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	НЕ АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ПометкаУдаления
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.СвереноСБухгалтерией
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.СверкаСогласована
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.ДатаОкончания МЕЖДУ &НачПериода И ВЫБОР
	|			КОГДА &КонПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(2099, 1, 1)
	|			ИНАЧЕ &КонПериода
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|ИТОГИ
	|	МАКСИМУМ(ДокументыНеПолучены)
	|ПО
	|	АктСверки";
	возврат Запрос.Выполнить();
КонецФункции

Процедура НачПериодаПриИзменении(Элемент)
	//ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура КонПериодаПриИзменении(Элемент)
	//ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура ДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	УстановитьОтображениеОтборов();
КонецПроцедуры

Процедура УстановитьОтображениеОтборов()
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Использование Тогда
		ВсеВложения = 2;
	Иначе
		ВсеВложения = Число(ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Значение);
	КонецЕсли;
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Использование Тогда
		ВсеСогласованные = 2;
	Иначе
		ВсеСогласованные = Число(ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Значение);
	КонецЕсли;
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Использование Тогда
		ВсеНовые = 2;
	Иначе
		ВсеНовые = Число(ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()	
	//ЗаполнитьНажатие(Неопределено);
КонецПроцедуры

Процедура Печать(ПечатьСразу)
	//ОтборСтрок = ЭлементыФормы.Документы.ОтборСтрок;
	//ПостроительЗапроса = Новый ПостроительЗапроса;
	//ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Документы);	
	//Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
	//	Если ЭлементОтбора.Использование Тогда
	//		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя);
	//		НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
	//		НовыйОтбор.Значение = ЭлементОтбора.Значение;
	//		НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
	//		НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
	//		НовыйОтбор.Использование = ЭлементОтбора.Использование;
	//	КонецЕсли;
	//КонецЦикла;
	//НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Печатать");
	//НовыйОтбор.Значение = Истина;
	//НовыйОтбор.Использование = Истина;
	//ПостроительЗапроса.Выполнить();
	//ТаблицаИтог = ПостроительЗапроса.Результат.Выгрузить();	
	//
	////Таблица изображений
	//Если НЕ ВсеВложения = 0 Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("МассивОбъектов",ТаблицаИтог.ВыгрузитьКолонку("Документ"));
	//	Запрос.УстановитьПараметр("ПечатьРаспечатаных",ПечатьРаспечатаных);
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ХранилищеДополнительнойИнформации.Ссылка,
	//	|	ХранилищеДополнительнойИнформации.ВерсияДанных,
	//	|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
	//	|	ХранилищеДополнительнойИнформации.Предопределенный,
	//	|	ХранилищеДополнительнойИнформации.Наименование,
	//	|	ХранилищеДополнительнойИнформации.ВидДанных,
	//	|	ХранилищеДополнительнойИнформации.ИмяФайла,
	//	|	ХранилищеДополнительнойИнформации.Объект,
	//	|	ХранилищеДополнительнойИнформации.Хранилище,
	//	|	ХранилищеДополнительнойИнформации.ТекстФайла
	//	|ИЗ
	//	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//	|ГДЕ
	//	|	ХранилищеДополнительнойИнформации.Объект В(&МассивОбъектов)
	//	|	И ВЫБОР
	//	|			КОГДА &ПечатьРаспечатаных
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ХранилищеДополнительнойИнформации.Распечатан = ЛОЖЬ
	//	|		КОНЕЦ";
	//	ТаблицаИзображений = Запрос.Выполнить().Выгрузить();
	//Иначе 
	//	ТаблицаИзображений = Новый ТаблицаЗначений;
	//КонецЕсли;
	//
	//Для Каждого СтрокаТЧ из ТаблицаИтог Цикл 
	//	Если НЕ СтрокаТЧ.ЕстьВложения Тогда
	//		Обкт = СтрокаТЧ.Документ.ПолучитьОбъект();
	//		Обкт.Печать("АктСверки",,ПечатьСразу);
	//	Иначе 
	//		СтрокиИзображений = ТаблицаИзображений.НайтиСтроки(Новый Структура("Объект", СтрокаТЧ.Документ));
	//		Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
	//			ПечатьФайла(СтрокаИзображения.Ссылка, ПечатьСразу);	
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ПроставитьРаспечатан Тогда
	//	ПодключитьОбработчикОжидания("ПроставитьРаспечатан",1,Истина);	
	//КонецЕсли;
КонецПроцедуры

Процедура ТаблицаСФильтрами()
	ОтборСтрок = ЭлементыФормы.Документы.ОтборСтрок;
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Заявки);	
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если ЭлементОтбора.Использование Тогда
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя);
			НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение = ЭлементОтбора.Значение;
			НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
			НовыйОтбор.Использование = Истина;
		КонецЕсли;
	КонецЦикла;

	ТаблицаИтог = ПостроительЗапроса.Результат.Выгрузить();	
КонецПроцедуры
	
Процедура ПечатьНажатие(Элемент)
	ПроставитьРаспечатан = (Вопрос("Проставить признак ""Распечатан"" для новых вложений?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да);
	Печать(Ложь);
КонецПроцедуры

Процедура ПечатьФайла(СсылкаФайл, ПечатьСразу) Экспорт
	
	пИмяФайла = СсылкаФайл.ИмяФайла;
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".html") > 0 Тогда	
		пПрограмма = """C:\Program Files (x86)\Internet Explorer\iexplore.exe"" /p ""пИмяФайла""";
		пПрограмма = """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" /p ""пИмяФайла""";
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат;
	КонецЕсли;
	ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога();
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
    ДанныеВХранилище = СсылкаФайл.Хранилище.Получить();
	Если ДанныеВХранилище = Неопределено Тогда
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СсылкаФайл.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(СсылкаФайл.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		пХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	Иначе	
		пХранилище = СсылкаФайл.Хранилище;
	КонецЕсли;	
	//ДанныеВХранилище = пХранилище.Получить();
	Если РаботаСФайлами.СохранитьФайлНаДиске(пХранилище, ИмяВременногоФайла, Ложь, "", Ложь) Тогда
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		Если ПечатьСразу Тогда
			ЗапуститьПриложение(пПрограмма);
		иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ЭлементыФормы.Документы.ТекущиеДанные.Документ);
КонецПроцедуры

Процедура КоманднаяПанель1Действие3(Кнопка)
	//ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//// Получить расширение файла.
	//РасширениеВременногоФайла = Прав(ВыбраннаяСтрока.ИмяФайла, 4);
	//
	//Если Лев(РасширениеВременногоФайла, 1) = "." Тогда
	//	// Получить имя временного файла. Установить расширение временного файла.
	//	РасширениеВременногоФайла = Прав(ВыбраннаяСтрока.ИмяФайла, 3);
	//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
	//Иначе
	//	// Получить имя временного файла с расширением по умолчанию.
	//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	//КонецЕсли;
	//
	//// Сохранить файл на диске. Запустить приложение.
	//СохранитьЗапуститьФайл(ВыбраннаяСтрока,ИмяВременногоФайла, Истина);
КонецПроцедуры

// Процедура сохраняет значение реквизита Хранилище (двоичные данные) на диск.
// При необходимости открывает файл с использованием ассоциированного с ним приложения.
//
// Параметры:
//  ИмяВнешнегоФайла - путь, имя файла дле сохранения на диске
//  Запустить - булево, признак запускать ассоциированное с файлом приложение.
//
Процедура СохранитьЗапуститьФайл(ВыбраннаяСтрока,ИмяВнешнегоФайла, Запустить = Ложь)
	
	Обкт = ВыбраннаяСтрока.ПолучитьОбъект();
	// Если не указано имя файла прервать выполнение процедуры
	Если ПустаяСтрока(ИмяВнешнегоФайла) Тогда
		Предупреждение("Не указано имя файла!");
		Возврат;
	КонецЕсли;
	
	// Сохранить файл на диске
	ВнешнийФайл = Обкт.Хранилище.Получить();
	Попытка
		Если ТипЗнч(ВнешнийФайл) <> Тип("ДвоичныеДанные") Тогда
			КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
			Файлы = НайтиФайлы(КаталогСохранения, Строка(Обкт.Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(Обкт.ИмяФайла), Истина);
			Если Файлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВнешнегоФайла);
		Иначе	
			ВнешнийФайл.Записать(ИмяВнешнегоФайла);
		КонецЕсли;	
	Исключение
		Сообщить("Ошибка при сохранении файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// Запустить ассоциированное с файлом приложение. Открыть файл.
	Если Запустить Тогда
		
		Файл = Новый Файл(ИмяВнешнегоФайла);
		
		Если Файл.Существует() Тогда
			Попытка
				ЗапуститьПриложение("explorer " + ИмяВнешнегоФайла);
			Исключение
				Сообщить("Ошибка при запуске файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
		Иначе
			Предупреждение("Не удалось найти файл " + ИмяВнешнегоФайла + " на диске!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапуститьФайл()

Процедура ЗаполнитьНажатие(Элемент)
	ЗаполнитьТабличнуюЧасть();
	//ТаблицаСФильтрами();
КонецПроцедуры

Процедура ПроставитьНажатие(Элемент)
	Если НЕ РольДоступна("ПравоУказанияДокументовВЗаявкахНаРасходование") Тогда
		Сообщить("Нет прав для выполнения операции!");
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = ЭлементыФормы.Расшифровка.ОтборСтрок;
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Заявки);	
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если ЭлементОтбора.Использование Тогда
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя);
			НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение = ЭлементОтбора.Значение;
			НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
			НовыйОтбор.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Проставить");
	НовыйОтбор.Значение = Истина;
	НовыйОтбор.Использование = Истина;
	ТаблицаИтог = ПостроительЗапроса.Результат.Выгрузить();
	Для Каждого Стр из ТаблицаИтог Цикл
		ЗаявкаОбъект = Стр.ЗаявкаНаРасходованиеСредств.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ЗаявкаОбъект.СтатусПолученныхДокументов ) Тогда
			Сообщить(Строка(ЗаявкаОбъект.Ссылка) + " Нельзя изменить признак, так как установлен статус прикрепленных документов");
			Продолжить;
		КонецЕсли; 
		ЗаявкаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаявкаОбъект.ВсеДокументыВНаличии = Истина;
		Попытка
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры




