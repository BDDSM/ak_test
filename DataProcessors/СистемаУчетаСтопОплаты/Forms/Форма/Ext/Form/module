Перем СЗ_РуководителиСтопОплаты;
Перем ТекПользователь;
Перем ФинМенеджер;
Перем УчёткаДляНастройки, Почта;
Перем АдресОтправки;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	ФинМенеджер = ПроверкаНаМенеждера();
	
	Отказ = не ПроверкаДоступностиИнструмента();
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУчета = ТекущаяДата();
	ОбновитьДанные();
	
	АдресОтправки = "no-reply@vkusvill.ru";
	Почта = Новый ИнтернетПочта;   	
	УчёткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу(АдресОтправки);	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	Фильтр = 0;
КонецПроцедуры

Процедура ПриОткрытии()
	Сообщить("Запуск");
	
	Попытка
		ИмяФайла 		= ПолучитьИмяВременногоФайла();
		ДвичныеДанные 	= Справочники.ВнешниеОбработки.НайтиПоКоду("000000116").ХранилищеВнешнейОбработки.Получить();
		ДвичныеДанные.Записать(ИмяФайла);
		Обработка 	= ВнешниеОбработки.Создать(ИмяФайла);
		Форма = Обработка.ПолучитьФорму();
		Форма.Открыть();
		//Возврат; 
		Закрыть();
	Исключение
	
		УстановкаФильтра();
		
		Если СокрЛП(ТекПользователь) = "Светлана Силина" или СокрЛП(ТекПользователь) = "Абдишев Рустем" Тогда
			ЭлементыФормы.ОтправлятьПисьмаНаОдинАдрес.Видимость = Истина;
		Иначе
			ЭлементыФормы.ОтправлятьПисьмаНаОдинАдрес.Видимость = Ложь;
		КонецЕсли;
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Почта.Отключиться();
КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	ОбновитьДанные();
КонецПроцедуры

Процедура ДействияФормыИстория(Кнопка)
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	
	ФормаСпискаСведений = РегистрыСведений.СведенияОСтопОплате.ПолучитьФормуСписка();
	ФормаСпискаСведений.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	ФормаСпискаСведений.Отбор.Контрагент.Использование = Истина;
	ФормаСпискаСведений.Отбор.Контрагент.Значение = ТекСтр.Контрагент;
	ФормаСпискаСведений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
	//+++АК sils 06.09.2018 ИП-00019634
	ФормаСпискаСведений.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	ФормаСпискаСведений.Отбор.Организация.Использование = Истина;
	ФормаСпискаСведений.Отбор.Организация.Значение = ТекСтр.Организация;
	ФормаСпискаСведений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	//---АК
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ФормаСпискаСведений.ТолькоПросмотр = Ложь;
	Иначе
		ФормаСпискаСведений.ТолькоПросмотр = Истина;
	КонецЕсли;	
	ФормаСпискаСведений.Открыть();
КонецПроцедуры

Процедура ДействияФормыРуководители(Кнопка)
	ФормаСпискаРуководителей = РегистрыСведений.РуководителиСтопОплаты.ПолучитьФормуСписка();
	ФормаСпискаРуководителей.Открыть();
КонецПроцедуры

Процедура КнопкаОтчетНажатие(Элемент)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СтопОплата";
	Макет = ПолучитьМакет("СтопОплата");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Титул");
	ОбластьМакета.Параметры.Дата = Формат(ДатаУчета, "ДЛФ=DD");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для каждого стр из Данные Цикл
		Если стр.СтопОплата и стр.Подтверждено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(стр);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Контрагенты в стоп оплате", Ложь);
КонецПроцедуры

//**************************************************************************************

Функция ПроверкаДоступностиИнструмента()
	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", ТекПользователь);
	Выборка = РегистрыСведений.РуководителиСтопОплаты.Выбрать(Отбор);
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ПометкаУдаления = ЛОЖЬ
	               |	И (Контрагенты.ОсновнойБухгалтерПокупателя = &Пользователь
	               |			ИЛИ Контрагенты.ОсновнойМенеджерПокупателя = &Пользователь)";
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаУчета) + 1);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольДоступна("ИнструментСтопОплаты") Тогда
		Возврат Истина;
	Иначе
		Сообщить("Инструмент не доступен!");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ОбновитьДанные()
	ФинМенеджер = ПроверкаНаМенеждера();
	ОбновитьСписокРуководителей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОСтопОплатеСрезПоследних.Контрагент,
				   //+++АК sils 06.09.2018 ИП-00019634
	               |	СведенияОСтопОплатеСрезПоследних.Организация,
				   //---АК
	               |	СведенияОСтопОплатеСрезПоследних.СтопОплата,
	               |	СведенияОСтопОплатеСрезПоследних.Подтверждено,
	               |	СведенияОСтопОплатеСрезПоследних.Руководитель,
	               |	СведенияОСтопОплатеСрезПоследних.Комментарий,
	               |	СведенияОСтопОплатеСрезПоследних.Контрагент.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
	               |	СведенияОСтопОплатеСрезПоследних.Контрагент.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
	               |	СведенияОСтопОплатеСрезПоследних.ЭлАдрес,
	               |	СведенияОСтопОплатеСрезПоследних.УстановилВСтопОплату,
	               |	СведенияОСтопОплатеСрезПоследних.БлокироватьДо
	               |ПОМЕСТИТЬ втРезультат
	               |ИЗ
	               |	РегистрСведений.СведенияОСтопОплате.СрезПоследних КАК СведенияОСтопОплатеСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СведенияОСтопОплатеСрезПоследних.Контрагент КАК Контрагент,
				   //+++АК sils 07.09.2018 ИП-00019634
	               |			СведенияОСтопОплатеСрезПоследних.Организация КАК Организация,
				   //---АК
	               |			МАКСИМУМ(СведенияОСтопОплатеСрезПоследних.Период) КАК Период
	               |		ИЗ
	               |			РегистрСведений.СведенияОСтопОплате.СрезПоследних(&Дата, ) КАК СведенияОСтопОплатеСрезПоследних
	               |		
	               |		СГРУППИРОВАТЬ ПО
				   //+++АК sils 07.09.2018 ИП-00019634
	               |			СведенияОСтопОплатеСрезПоследних.Организация,
				   //---АК
	               |			СведенияОСтопОплатеСрезПоследних.Контрагент) КАК ВложенныйЗапрос
	               |		ПО СведенияОСтопОплатеСрезПоследних.Контрагент = ВложенныйЗапрос.Контрагент
				   //+++АК sils 07.09.2018 ИП-00019634
	               |			И СведенияОСтопОплатеСрезПоследних.Организация = ВложенныйЗапрос.Организация
				   //---АК
	               |			И СведенияОСтопОплатеСрезПоследних.Период = ВложенныйЗапрос.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация КАК Рекомендация1Cont,
	               |	ВЫРАЗИТЬ(СведенияОПроверкеКонтрагентовСрезПоследних.Пояснения КАК СТРОКА(150)) КАК Пояснения1Cont,
	               |	NULL КАК РекомендацияУФК,
	               |	NULL КАК ПоясненияУФК,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.Рекомендация.Отрицательная,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
	               |	NULL КАК ДатаОтправки,
	               |	NULL КАК ЗавершениеСотрудничества,
	               |	NULL КАК ОтветПолучен
	               |ПОМЕСТИТЬ втРекомендации
	               |ИЗ
	               |	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(&Дата, ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.Сведения1Cont), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	NULL,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияВВ,
	               |	ВЫРАЗИТЬ(СведенияОПроверкеКонтрагентовСрезПоследних.ПоясненияВВ КАК СТРОКА(150)),
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.РекомендацияВВ.Отрицательная,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.Контрагент,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.ДатаОтправки,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.ЗавершениеСотрудничества,
	               |	СведенияОПроверкеКонтрагентовСрезПоследних.ОтветПолучен
	               |ИЗ
	               |	РегистрСведений.СведенияОПроверкеКонтрагентов.СрезПоследних(&Дата, ТипСведений В (ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияУФК), ЗНАЧЕНИЕ(Перечисление.СведенияОПроверке.СведенияОбщие))) КАК СведенияОПроверкеКонтрагентовСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(втРекомендации.Рекомендация1Cont) КАК Рекомендация1Cont,
	               |	МАКСИМУМ(втРекомендации.Пояснения1Cont) КАК Пояснения1Cont,
	               |	МАКСИМУМ(втРекомендации.РекомендацияУФК) КАК РекомендацияУФК,
	               |	МАКСИМУМ(втРекомендации.ПоясненияУФК) КАК ПоясненияУФК,
	               |	МАКСИМУМ(втРекомендации.РекомендацияОтрицательная) КАК Отрицательная,
	               |	втРекомендации.Контрагент,
	               |	МАКСИМУМ(втРекомендации.ДатаОтправки) КАК ДатаОтправки,
	               |	МАКСИМУМ(втРекомендации.ЗавершениеСотрудничества) КАК ЗавершениеСотрудничества,
	               |	МАКСИМУМ(втРекомендации.ОтветПолучен) КАК ОтветПолучен
	               |ПОМЕСТИТЬ втРекомендацииСГруппировкой
	               |ИЗ
	               |	втРекомендации КАК втРекомендации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втРекомендации.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезультат.Контрагент,
				   //+++АК sils 06.09.2018 ИП-00019634
	               |	втРезультат.Организация,
				   //---АК
	               |	втРезультат.СтопОплата,
	               |	втРезультат.Подтверждено,
	               |	втРезультат.Руководитель,
	               |	втРезультат.Комментарий,
	               |	втРезультат.ОсновнойБухгалтерПокупателя,
	               |	втРезультат.ОсновнойМенеджерПокупателя,
	               |	втРезультат.ЭлАдрес,
	               |	втРезультат.УстановилВСтопОплату,
	               |	втРекомендацииСГруппировкой.Рекомендация1Cont,
	               |	втРекомендацииСГруппировкой.РекомендацияУФК,
	               |	втРезультат.БлокироватьДо
	               |ИЗ
	               |	втРезультат КАК втРезультат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРекомендацииСГруппировкой КАК втРекомендацииСГруппировкой
	               |		ПО втРезультат.Контрагент = втРекомендацииСГруппировкой.Контрагент";

				   //+ ?(ФинМенеджер, "", "
				   //|ГДЕ
				   //|	(СведенияОСтопОплатеСрезПоследних.Контрагент.ОсновнойБухгалтерПокупателя = &Пользователь
				   //|			ИЛИ СведенияОСтопОплатеСрезПоследних.Контрагент.ОсновнойМенеджерПокупателя = &Пользователь
				   //|			ИЛИ СведенияОСтопОплатеСрезПоследних.Руководитель = &Пользователь)");
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаУчета) + 1);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Если не ФинМенеджер Тогда
	//	ТекКол = ТЗ.Количество();
	//	Пока ТекКол <> 0 Цикл
	//		стр = ТЗ[ТекКол - 1];
	//		Если стр.ОсновнойБухгалтерПокупателя <> ТекПользователь и стр.ОсновнойМенеджерПокупателя <> ТекПользователь и стр.Руководитель <> ТекПользователь Тогда
	//			ТЗ.Удалить(стр);
	//		КонецЕсли;
	//		ТекКол = ТекКол - 1;
	//	КонецЦикла;
	//КонецЕсли;
	
	Данные.Очистить();
	Данные.Загрузить(ТЗ);
	Данные.Сортировать("Контрагент");
	Для каждого стр из Данные Цикл
		Если стр.СтопОплата и не стр.Подтверждено Тогда
			стр.Статус = "Заявка на стоп оплату";
		ИначеЕсли стр.СтопОплата и стр.Подтверждено Тогда
			стр.Статус = "Подтверждена стоп оплата";
		ИначеЕсли не стр.СтопОплата и стр.Подтверждено Тогда
			стр.Статус = "Заявка на отмену стоп оплаты";
		ИначеЕсли не стр.СтопОплата и не стр.Подтверждено Тогда
			стр.Статус = "Не в стоп оплате";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСписокРуководителей()
	СЗ_РуководителиСтопОплаты = Новый СписокЗначений;
	СЗ_РуководителиСтопОплаты.Очистить();
	НаборЗаписей = РегистрыСведений.РуководителиСтопОплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого Элем из НаборЗаписей Цикл
		Если Элем.Руководитель Тогда
			СЗ_РуководителиСтопОплаты.Добавить(Элем.Сотрудник, СокрЛП(Элем.Сотрудник) + " (" + СокрЛП(Элем.ЭлАдрес) + ")");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверкаНаМенеждера()
	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", ТекПользователь);
	Выборка = РегистрыСведений.РуководителиСтопОплаты.Выбрать(Отбор);
	Если Выборка.Следующий() Тогда
		Если Выборка.ФинМенеджер Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

//**************************************************************************************

Процедура ДатаУчетаПриИзменении(Элемент)
	ОбновитьДанные();
КонецПроцедуры

//**************************************************************************************

Процедура ДанныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда 
		Возврат;
	КонецЕсли;
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	Отказ = ПроверкаКонтрагента();

	Если ТекСтр.СтопОплата Тогда
		Если не ЗначениеЗаполнено(ТекСтр.Руководитель) Тогда
			Сообщить("Необходимо заполнить руководителя!");
			Отказ = Истина;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекСтр.Комментарий) Тогда
			Сообщить("Необходимо заполнить комментарий!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНовуюСтроку();
КонецПроцедуры

Процедура ДанныеПередУдалением(Элемент, Отказ)
     Отказ = Истина;
КонецПроцедуры

Процедура ДанныеПриИзмененииФлажка(Элемент, Колонка)
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	
	Если Колонка.Имя = "СтопОплата" Тогда
		Если ТекСтр.СтопОплата = Истина Тогда
			Если не ДоступностьФлагаСтопОплаты() Тогда
				ТекСтр.СтопОплата = Ложь;
			КонецЕсли;
			Если не ЗначениеЗаполнено(ТекСтр.Руководитель) Тогда
				Сообщить("Необходимо заполнить руководителя!");
				ТекСтр.СтопОплата = Ложь;
			КонецЕсли;
			Если не ЗначениеЗаполнено(ТекСтр.Комментарий) Тогда
				Сообщить("Необходимо заполнить комментарий!");
				ТекСтр.СтопОплата = Ложь;
			КонецЕсли;
			Если ТекСтр.СтопОплата = Истина Тогда
				ТекСтр.УстановилВСтопОплату = ТекПользователь;
				РассылкаПриУстановкеСтопОплаты();
			КонецЕсли;
		Иначе
			Если не ДоступностьФлагаСтопОплаты() Тогда
				ТекСтр.СтопОплата = Истина;
			КонецЕсли;
			Если ТекСтр.СтопОплата = Ложь Тогда
				ТекСтр.Подтверждено = Ложь;
				РассылкаПриСнятииСтопОплаты();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Колонка.Имя = "Подтверждено" Тогда
		Если ТекСтр.Подтверждено = Истина Тогда
			Если не ДоступностьФлагаПодтверждено() Тогда
				ТекСтр.Подтверждено = Ложь;
			КонецЕсли;
			Если не ЗначениеЗаполнено(ТекСтр.Руководитель) Тогда
				Сообщить("Необходимо заполнить руководителя!");
				ТекСтр.Подтверждено = Ложь;
			КонецЕсли;
			Если ТекСтр.СтопОплата = Ложь Тогда
				Сообщить("Не поставлен стоп оплаты!");
				ТекСтр.Подтверждено = Ложь;
			КонецЕсли;
		Иначе
			Если не ДоступностьФлагаПодтверждено() Тогда
				ТекСтр.Подтверждено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаписатьНовуюСтроку();
КонецПроцедуры

// Флаг доступен ответственному менеджеру или ответственному бухгалтеру
Функция ДоступностьФлагаСтопОплаты()
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	Если ТекСтр.ОсновнойБухгалтерПокупателя = ТекПользователь или ТекСтр.ОсновнойМенеджерПокупателя = ТекПользователь Тогда	
		Возврат Истина;
	Иначе
		Набор = РегистрыСведений.РуководителиСтопОплаты.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(ТекПользователь);
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Если Набор[0].ФинМенеджер Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Флаг доступен подтверждающему
Функция ДоступностьФлагаПодтверждено()
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	Если ТекСтр.Руководитель = ТекПользователь Тогда	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// При установке флага "Стоп оплата" должно отправляться письмо:
// руководителю,
// если установил флаг технолог - бухгалтеру,
// если установил бухгалтер - технологу и финансовому менеджеру,
// тем, у кого в регистре сведений "РуководителиСтопОплаты" стоит флаг "РассылкаСтопОплата".
Процедура РассылкаПриУстановкеСтопОплаты()
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	Сообщить("Установка флага стоп оплаты контрагенту " + СокрЛП(ТекСтр.Контрагент) + ":");
	
	Тема = "Установка стоп оплаты по " + СокрЛП(ТекСтр.Контрагент);
	ТекстПисьма = "По контрагенту " + СокрЛП(ТекСтр.Контрагент) + " установлена стоп оплаты. Ожидается подтверждение.";
	//+++АК sils 06.09.2018 ИП-00019634
	Если ЗначениеЗаполнено(ТекСтр.Организация) Тогда
		Тема = Тема + " ( Организация " + СокрЛП(ТекСтр.Организация) + ")";
		ТекстПисьма = СтрЗаменить(ТекстПисьма, " установлена стоп опл", "(Организация " + СокрЛП(ТекСтр.Организация) + ") установлена стоп опл");
	КонецЕсли;
	//---АК
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Сотрудник");
	ТЗ.Колонки.Добавить("ЭлАдрес");
	
	// руководителю
	Если ТекСтр.Руководитель <> ТекПользователь Тогда	
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник = ТекСтр.Руководитель;
		НовСтр.ЭлАдрес = СокрЛП(ТекСтр.ЭлАдрес);
	КонецЕсли;
	
	СЗ = Новый СписокЗначений;
	Если ТекСтр.ОсновнойМенеджерПокупателя = ТекПользователь Тогда
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной бухгалтер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойБухгалтерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо);
		КонецЕсли;
	ИначеЕсли ТекСтр.ОсновнойБухгалтерПокупателя = ТекПользователь Тогда
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной менеджер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойМенеджерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо);
		КонецЕсли;
	Иначе
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной бухгалтер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойБухгалтерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо);
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной менеджер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойМенеджерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	ТЗ1 = НайтиЭлАдрес(СЗ);
	Для каждого стр из ТЗ1 Цикл
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник = стр.Сотрудник;
		НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
	КонецЦикла;
	
	Набор = РегистрыСведений.РуководителиСтопОплаты.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Для каждого стр из Набор Цикл
		Если стр.Руководитель = ТекПользователь Тогда
			Продолжить;
		КонецЕсли;
		стр1 = ТЗ.Найти(стр.Сотрудник);
		Если стр1 <> Неопределено Тогда
			стр1.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
			Продолжить;
		КонецЕсли;
		Если стр.ФинМенеджер Тогда
			НовСтр = ТЗ.Добавить();
			НовСтр.Сотрудник = стр.Сотрудник;
			НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
		ИначеЕсли стр.РассылкаСтопОплата Тогда
			НовСтр = ТЗ.Добавить();
			НовСтр.Сотрудник = стр.Сотрудник;
			НовСтр.ЭлАдрес = СокрЛП(стр.ЭлАдрес);
		КонецЕсли;
	КонецЦикла;
	ТЗ.Свернуть("Сотрудник, ЭлАдрес", "");
	
	Для каждого стр из ТЗ Цикл
		ТекЭлем = СЗ.НайтиПоЗначению(стр.Сотрудник);
		Если ТекЭлем <> Неопределено Тогда
			СЗ.Удалить(ТекЭлем);
		КонецЕсли;
		ОтправкаПисьма(Тема, СокрЛП(стр.ЭлАдрес), ТекстПисьма, стр.Сотрудник)
	КонецЦикла;
	Для каждого стр из СЗ Цикл
		Сообщить("Не получилось найти эл.адрес " + СокрЛП(стр.Значение));
	КонецЦикла;
КонецПроцедуры

// При снятии флага "Стоп оплата" должно отправляться письмо:
// финансовому менеджеру
// если снял технолог - бухгалтеру
// если снял бухгалтер - технологу
Процедура РассылкаПриСнятииСтопОплаты()
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	Сообщить("Снятие флага стоп оплаты контрагенту " + СокрЛП(ТекСтр.Контрагент) + ":");
	
	Тема = "Снятие стоп оплаты по " + СокрЛП(ТекСтр.Контрагент);
	ТекстПисьма = "По контрагенту " + СокрЛП(ТекСтр.Контрагент) + " снята стоп оплаты.";
	//+++АК sils 06.09.2018 ИП-00019634
	Если ЗначениеЗаполнено(ТекСтр.Организация) Тогда
		Тема = Тема + " ( Организация " + СокрЛП(ТекСтр.Организация) + ")";
		ТекстПисьма = СтрЗаменить(ТекстПисьма, " снята стоп опл", "(Организация " + СокрЛП(ТекСтр.Организация) + ") снята стоп опл");
	КонецЕсли;
	//---АК
	
	СЗ = Новый СписокЗначений;
	Если ТекСтр.ОсновнойМенеджерПокупателя = ТекПользователь Тогда
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной бухгалтер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойБухгалтерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо);
		КонецЕсли;
	ИначеЕсли ТекСтр.ОсновнойБухгалтерПокупателя = ТекПользователь Тогда
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной менеджер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойМенеджерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо);
		КонецЕсли;
	Иначе
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной бухгалтер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойБухгалтерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойБухгалтерПокупателя.ФизЛицо);
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя) Тогда
			Сообщить("У контрагента не заполнен основной менеджер!");
		ИначеЕсли не ЗначениеЗаполнено(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
			Сообщить("Не получилось найти эл.адрес " + СокрЛП(ТекСтр.ОсновнойМенеджерПокупателя));
		Иначе
			СЗ.Добавить(ТекСтр.ОсновнойМенеджерПокупателя.ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Сотрудник");
	ТЗ.Колонки.Добавить("ЭлАдрес");
	ТЗ = НайтиЭлАдрес(СЗ);
	
	Для каждого стр из ТЗ Цикл
		ТекЭлем = СЗ.НайтиПоЗначению(стр.Сотрудник);
		Если ТекЭлем <> Неопределено Тогда
			СЗ.Удалить(ТекЭлем);
		КонецЕсли;
		ОтправкаПисьма(Тема, СокрЛП(стр.ЭлАдрес), ТекстПисьма, стр.Сотрудник)
	КонецЦикла;
	Для каждого стр из СЗ Цикл
		Сообщить("Не удалось установить электронную почту " + стр.Значение + "!");
	КонецЦикла;
КонецПроцедуры

Процедура ОтправкаПисьма(Тема, EmailАдрес, ТекстПисьма, ФизЛицо)
	Если СокрЛП(EmailАдрес) = "" Тогда
		Сообщить("Не найден эл.адрес " + ФизЛицо);
		Возврат;
	КонецЕсли;
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	Письмо.ИмяОтправителя = СокрЛП(УчёткаДляНастройки);
	Письмо.Отправитель.Адрес = АдресОтправки;
	
	МногострочнаяСтрока = СокрЛП(EmailАдрес);
	МногострочнаяСтрока = СтрЗаменить(МногострочнаяСтрока, ",", Символы.ПС);
	МногострочнаяСтрока = СтрЗаменить(МногострочнаяСтрока, ";", Символы.ПС);
	
	Для й = 1 По СтрЧислоСтрок(МногострочнаяСтрока) Цикл;
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(СтрПолучитьСтроку(МногострочнаяСтрока, й));
	КонецЦикла;
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Если ОтправлятьПисьмаНаОдинАдрес Тогда
		Если СокрЛП(ТекПользователь) = "Светлана Силина" Тогда
			Письмо.Получатели.Очистить();
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = "sils@automacon.ru";
			ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма+ ". Информация по флагу: письмо для адресата: " + СокрЛП(ФизЛицо) + " (" + СокрЛП(EmailАдрес) + ")");
			Сообщить("Все письма перенаправляются на sils@automacon.ru");
		ИначеЕсли СокрЛП(ТекПользователь) = "Абдишев Рустем" Тогда
			Письмо.Получатели.Очистить();
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = "abdr@automacon.ru";
			ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма+ ". Информация по флагу: письмо для адресата: " + СокрЛП(ФизЛицо) + " (" + СокрЛП(EmailАдрес) + ")");
			Сообщить("Все письма перенаправляются на abdr@automacon.ru");
		КонецЕсли;
	КонецЕсли;
	Попытка
		Почта.Послать(Письмо);
		Сообщить("Письмо отправлено " +СокрЛП(ФизЛицо) + ".");
	Исключение
		Сообщить("Письмо не отправлено " +СокрЛП(ФизЛицо) + ". " + ОписаниеОшибки());
	КонецПопытки;		
КонецПроцедуры

Функция НайтиЭлАдрес(СЗ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Сотрудник,
	|	КонтактнаяИнформация.Представление КАК ЭлАдрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Объект В(&Объект)";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Объект", СЗ);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//**************************************************************************************

Процедура ДанныеКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ФлагРазрешено = Ложь;
	
	стр = Данные.Найти(ВыбранноеЗначение, "Контрагент");
	Если стр <> Неопределено Тогда
		Сообщить("Контрагент уже есть в табличной части!");
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ВыбранноеЗначение.ОсновнойБухгалтерПокупателя) Тогда
		Сообщить("У контрагента не заполнен основной бухгалтер! Подбор не выполнен!");
		Возврат;
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВыбранноеЗначение.ОсновнойМенеджерПокупателя) Тогда
		Сообщить("У контрагента не заполнен основной менеджер! Подбор не выполнен!");
		Возврат;
	КонецЕсли;
	
	Если не ФинМенеджер Тогда
		Если ВыбранноеЗначение.ОсновнойБухгалтерПокупателя = ТекПользователь или ВыбранноеЗначение.ОсновнойМенеджерПокупателя = ТекПользователь Тогда
			ФлагРазрешено = Истина;
		Иначе
			Сообщить("Пользователь не является финансовым менеджером, основным менеждером или бухгалтером контрагента. Контрагент не выбран!");
		КонецЕсли;
	Иначе
		ФлагРазрешено = Истина;
	КонецЕсли;
	
	//Теперь проверим а может этот контрагент уже есть в регистре сведений
	Если ФлагРазрешено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", ВыбранноеЗначение); 
		ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(, Отбор);
		
		Если ТЗ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекСтр, ТЗ[0]);
		Иначе
			ТекСтр.Контрагент = ВыбранноеЗначение;
		КонецЕсли;
		Текстр.ОсновнойБухгалтерПокупателя = ТекСтр.Контрагент.ОсновнойБухгалтерПокупателя;
		Текстр.ОсновнойМенеджерПокупателя = ТекСтр.Контрагент.ОсновнойМенеджерПокупателя;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

//**************************************************************************************

Процедура ДанныеРуководительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора = СЗ_РуководителиСтопОплаты;
	ТекЭлем = СЗ_РуководителиСтопОплаты.НайтиПоЗначению(Элемент.Значение);
	Если ТекЭлем <> Неопределено Тогда
		Элемент.Значение = ТекЭлем.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеРуководительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	ВыбрЗначение = СЗ_РуководителиСтопОплаты.НайтиПоЗначению(ВыбранноеЗначение);
	Если ВыбрЗначение <> Неопределено Тогда
		ТекАдрес = Сред(ВыбрЗначение.Представление, Найти(ВыбрЗначение.Представление, "(") + 1);
		ТекАдрес = Лев(ТекАдрес, СтрДлина(ТекАдрес) - 1);
		ТекСтр.Руководитель = ВыбрЗначение.Значение;
		ТекСтр.ЭлАдрес = ТекАдрес;
		
		ЗаписатьНовуюСтроку();
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеРуководительОчистка(Элемент, СтандартнаяОбработка)
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	ТекСтр.ЭлАдрес = "";
КонецПроцедуры

Процедура ДанныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.СтопОплата и не ДанныеСтроки.Подтверждено Тогда
		ОформлениеСтроки.Ячейки.Статус.ЦветФона = Новый Цвет(255, 215, 0);
	ИначеЕсли ДанныеСтроки.СтопОплата и ДанныеСтроки.Подтверждено Тогда
		ОформлениеСтроки.Ячейки.Статус.ЦветФона = Новый Цвет(175, 238, 238);
	ИначеЕсли не ДанныеСтроки.СтопОплата и ДанныеСтроки.Подтверждено Тогда
		ОформлениеСтроки.Ячейки.Статус.ЦветФона = Новый Цвет(144, 238, 144);
	ИначеЕсли не ДанныеСтроки.СтопОплата и не ДанныеСтроки.Подтверждено Тогда
		ОформлениеСтроки.Ячейки.Статус.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	Если ДанныеСтроки.Руководитель = ДанныеСтроки.УстановилВСтопОплату Тогда
		ОформлениеСтроки.Ячейки.Руководитель.Шрифт = Новый Шрифт(,, Истина);
	Иначе
		ОформлениеСтроки.Ячейки.Руководитель.Шрифт = Новый Шрифт(,,);
	КонецЕсли;
	Если ДанныеСтроки.ОсновнойБухгалтерПокупателя = ДанныеСтроки.УстановилВСтопОплату Тогда
		ОформлениеСтроки.Ячейки.ОсновнойБухгалтерПокупателя.Шрифт = Новый Шрифт(,, Истина);
	Иначе
		ОформлениеСтроки.Ячейки.ОсновнойБухгалтерПокупателя.Шрифт = Новый Шрифт(,,);
	КонецЕсли;
	Если ДанныеСтроки.ОсновнойМенеджерПокупателя = ДанныеСтроки.УстановилВСтопОплату Тогда
		ОформлениеСтроки.Ячейки.ОсновнойМенеджерПокупателя.Шрифт = Новый Шрифт(,, Истина);
	Иначе
		ОформлениеСтроки.Ячейки.ОсновнойМенеджерПокупателя.Шрифт = Новый Шрифт(,,);
	КонецЕсли;
	
	//28.11.17 koro 15834 Подсветим отрицательные рекомендации
	Если ЗначениеЗаполнено(ДанныеСтроки.РекомендацияУФК)  Тогда
		Если ДанныеСтроки.РекомендацияУФК.Отрицательная	= Истина Тогда
			ОформлениеСтроки.Ячейки.РекомендацияУФК.ЦветТекста = WebЦвета.Красный;				
		КонецЕсли;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДанныеСтроки.Рекомендация1Cont)  Тогда
		Если ДанныеСтроки.Рекомендация1Cont.Отрицательная	= Истина Тогда
			ОформлениеСтроки.Ячейки.Рекомендация1Cont.ЦветТекста = WebЦвета.Красный;				
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

//**************************************************************************************

Функция ПроверкаКонтрагента()
	ФлагВозврата = Ложь;
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтр.Контрагент) Тогда
		ТекКонтрагент = ТекСтр.Контрагент;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", ТекКонтрагент);
		
		Массив = Данные.НайтиСтроки(Отбор);
		Если Массив.Количество() > 1 Тогда
			Сообщить("Такой контрагент уже есть!");
			ФлагВозврата = Истина;
		КонецЕсли;
	Иначе
		Сообщить("Контрагент не может быть пустым!");
		ФлагВозврата = Истина;
	КонецЕсли;
	Возврат ФлагВозврата;
Конецфункции

Процедура ЗаписатьНовуюСтроку()
	ТекСтр = ЭлементыФормы.Данные.ТекущиеДанные;
	
	НаборЗаписей = РегистрыСведений.СведенияОСтопОплате.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(ТекСтр.Контрагент);
	//+++АК sils 06.09.2018 ИП-00019634
	НаборЗаписей.Отбор.Организация.Установить(ТекСтр.Организация);
	//---АК
	НаборЗаписей.Отбор.Период.Установить(ДатаУчета);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НовЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НовЗапись, ТекСтр);
	НовЗапись.Период = ДатаУчета;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Нет доступа к регистру сведений! Изменения не записаны!");
	КонецПопытки
КонецПроцедуры

Процедура ДанныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ФормаЗаписи = ЭтотОбъект.ПолучитьФорму("ФормаЗаписи");
	ФормаЗаписи.Контрагент = ВыбраннаяСтрока.Контрагент;
	//+++АК sils 06.09.2018 ИП-00019634
	ФормаЗаписи.Организация = ВыбраннаяСтрока.Организация;
	//---АК
	ФормаЗаписи.ОсновнойБухгалтерПокупателя = ВыбраннаяСтрока.ОсновнойБухгалтерПокупателя;
	ФормаЗаписи.ОсновнойМенеджерПокупателя = ВыбраннаяСтрока.ОсновнойМенеджерПокупателя;
	ФормаЗаписи.Комментарий = ВыбраннаяСтрока.Комментарий;
	ФормаЗаписи.Руководитель = ВыбраннаяСтрока.Руководитель;
	ФормаЗаписи.УстановилВСтопОплату = ВыбраннаяСтрока.УстановилВСтопОплату;
	ФормаЗаписи.СтопОплата = ВыбраннаяСтрока.СтопОплата;
	ФормаЗаписи.Подтверждено = ВыбраннаяСтрока.Подтверждено;
	ФормаЗаписи.ЭлАдрес = ВыбраннаяСтрока.ЭлАдрес;
	ФормаЗаписи.БлокироватьДо = ВыбраннаяСтрока.БлокироватьДо;
	//+++АК sils 06.09.2018 ИП-00019634
	//ВыбранныйКонтрагент = ФормаЗаписи.ОткрытьМодально();
	ВыбранныеДанные = ФормаЗаписи.ОткрытьМодально();
	Если ВыбранныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбранныйКонтрагент = ВыбранныеДанные.Контрагент;
	//---АК
	
	ТекНомерСтроки = Данные.Индекс(ЭлементыФормы.Данные.ТекущаяСтрока);
	ОбновитьДанные();
	Если ВыбранныйКонтрагент <> Неопределено и ЗначениеЗаполнено(ВыбранныйКонтрагент) Тогда
		//+++АК sils 06.09.2018 ИП-00019634
		//ЭлементыФормы.Данные.ТекущаяСтрока = Данные.Найти(ВыбранныйКонтрагент, "Контрагент"); 
		НайденныеСтроки = Данные.НайтиСтроки(ВыбранныеДанные);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.Данные.ТекущаяСтрока = НайденныеСтроки[0]; 
		Иначе
			Если Данные.Количество() >= ТекНомерСтроки + 1 Тогда
				ЭлементыФормы.Данные.ТекущаяСтрока = Данные[ТекНомерСтроки];
			КонецЕсли;
		КонецЕсли;
		//---АК
	Иначе
		Если Данные.Количество() >= ТекНомерСтроки + 1 Тогда
			ЭлементыФормы.Данные.ТекущаяСтрока = Данные[ТекНомерСтроки];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1Добавить(Кнопка)
	ФормаЗаписи = ЭтотОбъект.ПолучитьФорму("ФормаЗаписи");
	//+++АК sils 06.09.2018 ИП-00019634
	//ВыбранныйКонтрагент = ФормаЗаписи.ОткрытьМодально();
	ВыбранныеДанные = ФормаЗаписи.ОткрытьМодально();
	Если ВыбранныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбранныйКонтрагент = ВыбранныеДанные.Контрагент;
	//---АК
	
	ТекНомерСтроки = Данные.Индекс(ЭлементыФормы.Данные.ТекущаяСтрока);
	ОбновитьДанные();
	Если ВыбранныйКонтрагент <> Неопределено и ЗначениеЗаполнено(ВыбранныйКонтрагент) Тогда
		//+++АК sils 06.09.2018 ИП-00019634
		//ЭлементыФормы.Данные.ТекущаяСтрока = Данные.Найти(ВыбранныйКонтрагент, "Контрагент"); 
		НайденныеСтроки = Данные.НайтиСтроки(ВыбранныеДанные);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.Данные.ТекущаяСтрока = НайденныеСтроки[0]; 
		Иначе
			Если Данные.Количество() >= ТекНомерСтроки + 1 Тогда
				ЭлементыФормы.Данные.ТекущаяСтрока = Данные[ТекНомерСтроки];
			КонецЕсли;
		КонецЕсли;
		//---АК
	Иначе
		Если Данные.Количество() >= ТекНомерСтроки + 1 Тогда
			ЭлементыФормы.Данные.ТекущаяСтрока = Данные[ТекНомерСтроки];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановкаФильтра()
	Если Фильтр = 0 Тогда
		ЭлементыФормы.Все.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
		ЭлементыФормы.Все.Картинка = БиблиотекаКартинок.Утвердить;
	Иначе
		ЭлементыФормы.Все.ЦветФонаКнопки = Новый Цвет();
		ЭлементыФормы.Все.Картинка = Новый Картинка();
	КонецЕсли;
	Если Фильтр = 1 Тогда
		ЭлементыФормы.Активные.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
		ЭлементыФормы.Активные.Картинка = БиблиотекаКартинок.Утвердить;
	Иначе
		ЭлементыФормы.Активные.ЦветФонаКнопки = Новый Цвет();
		ЭлементыФормы.Активные.Картинка = Новый Картинка();
	КонецЕсли;
	Если Фильтр = 2 Тогда
		ЭлементыФормы.Неактивные.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
		ЭлементыФормы.Неактивные.Картинка = БиблиотекаКартинок.Утвердить;
	Иначе
		ЭлементыФормы.Неактивные.ЦветФонаКнопки = Новый Цвет();
		ЭлементыФормы.Неактивные.Картинка = Новый Картинка();
	КонецЕсли;
	Если Фильтр = 3 Тогда
		ЭлементыФормы.БезПрекратилиРаботу.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
		ЭлементыФормы.БезПрекратилиРаботу.Картинка = БиблиотекаКартинок.Утвердить;
	Иначе
		ЭлементыФормы.БезПрекратилиРаботу.ЦветФонаКнопки = Новый Цвет();
		ЭлементыФормы.БезПрекратилиРаботу.Картинка = Новый Картинка();
	КонецЕсли;
	//Если Фильтр = 4 Тогда
	//	ЭлементыФормы.НаПроверке.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
	//	ЭлементыФормы.НаПроверке.Картинка = БиблиотекаКартинок.Утвердить;
	//Иначе
	//	ЭлементыФормы.НаПроверке.ЦветФонаКнопки = Новый Цвет();
	//	ЭлементыФормы.НаПроверке.Картинка = Новый Картинка();
	//КонецЕсли;
	//Если Фильтр = 5 Тогда
	//	ЭлементыФормы.Отрицательные.ЦветФонаКнопки = Новый Цвет(179, 172, 134);
	//	ЭлементыФормы.Отрицательные.Картинка = БиблиотекаКартинок.Утвердить;
	//Иначе
	//	ЭлементыФормы.Отрицательные.ЦветФонаКнопки = Новый Цвет();
	//	ЭлементыФормы.Отрицательные.Картинка = Новый Картинка();
	//КонецЕсли;

КонецПроцедуры


//++++ 28.11.17 koro 15834 изменена работа фильтров 
Процедура ВсеНажатие(Элемент)
		
	ОчиститьОтбор();
	Фильтр = 0;
	УстановкаФильтра();
	
КонецПроцедуры

Процедура ОчиститьОтбор()
	
	ЭлементыФормы.Данные.ОтборСтрок.Статус.Использование = Ложь;
	ЭлементыФормы.Данные.ОтборСтрок.Комментарий.Использование = Ложь;
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Использование = Ложь; 	
	
КонецПроцедуры	

Процедура АктивныеНажатие(Элемент)
	
	ОчиститьОтбор();
	ЭлементыФормы.Данные.ОтборСтрок.Статус.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.Статус.ВидСравнения = ВидСравнения.Равно;
	ЭлементыФормы.Данные.ОтборСтрок.Статус.Значение = "Не в стоп оплате";	
	Фильтр = 1;
	УстановкаФильтра();
	
КонецПроцедуры

Процедура НеактивныеНажатие(Элемент)
	
	ОчиститьОтбор();
	ЭлементыФормы.Данные.ОтборСтрок.Статус.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.Статус.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементыФормы.Данные.ОтборСтрок.Статус.Значение = "Не в стоп оплате";
	
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.ВидСравнения = ВидСравнения.ВСписке;
	СписокОтбор = Новый СписокЗначений;
	ДополнитьСписокРекомендаций("ЗавершениеСотрудничества",СписокОтбор);
	ДополнитьСписокРекомендаций("Отрицательная",СписокОтбор);
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Значение = СписокОтбор;	
	
	Фильтр = 2;
	УстановкаФильтра();
	
КонецПроцедуры

Процедура БезПрекратилиРаботуНажатие(Элемент)
	
	ОчиститьОтбор();
	// +++ АК mirv 08.12.2017 [ИП-00015990]
	// Убрал отбор по комментариям - пожелания Анастасии
	//ЭлементыФормы.Данные.ОтборСтрок.Комментарий.Использование = Истина;
	//ЭлементыФормы.Данные.ОтборСтрок.Комментарий.ВидСравнения = ВидСравнения.ВСписке;
	//СписокРаботающие = Новый СписокЗначений;
	//СписокРаботающие.Добавить(Справочники.ПричиныСтопОплаты.НайтиПоКоду("000000001"));
	//СписокРаботающие.Добавить(Справочники.ПричиныСтопОплаты.НайтиПоКоду("000000002"));
	//СписокРаботающие.Добавить(Справочники.ПричиныСтопОплаты.НайтиПоКоду("000000003"));
	//СписокРаботающие.Добавить(Справочники.ПричиныСтопОплаты.НайтиПоКоду("000000004"));
	////СписокРаботающие.Добавить(Справочники.ПричиныСтопОплаты.НайтиПоКоду("000000005"));
	//ЭлементыФормы.Данные.ОтборСтрок.Комментарий.Значение = СписокРаботающие;
	// --- АК mirv  
	
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.ВидСравнения = ВидСравнения.НеВСписке;
	СписокОтбор = Новый СписокЗначений;
	ДополнитьСписокРекомендаций("ЗавершениеСотрудничества",СписокОтбор);
	ДополнитьСписокРекомендаций("Отрицательная",СписокОтбор);
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Значение = СписокОтбор;	
	
	Фильтр = 3;
	УстановкаФильтра();
	
КонецПроцедуры

Процедура НаПроверкеНажатие(Элемент)

	ОчиститьОтбор();
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.ВидСравнения = ВидСравнения.ВСписке;
	СписокОтбор = Новый СписокЗначений;
	ДополнитьСписокРекомендаций("Проверка",СписокОтбор);	
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Значение = СписокОтбор;	

	Фильтр = 4;
	УстановкаФильтра();
	
КонецПроцедуры

Процедура ОтрицательныеНажатие(Элемент)
	
	ОчиститьОтбор();
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Использование = Истина;
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.ВидСравнения = ВидСравнения.ВСписке;
	СписокОтбор = Новый СписокЗначений;
	ДополнитьСписокРекомендаций("Отрицательная",СписокОтбор);	
	ЭлементыФормы.Данные.ОтборСтрок.РекомендацияУФК.Значение = СписокОтбор;	
	Фильтр = 5;
	УстановкаФильтра();

КонецПроцедуры

Функция ДополнитьСписокРекомендаций(ИмяРеквизита,Список);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рекомендации.Ссылка
		|ИЗ
		|	Справочник.Рекомендации КАК Рекомендации
		|ГДЕ
		|	Рекомендации."+ИмяРеквизита+" = Истина";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
		
КонецФункции	

//---- 28.11.17 koro 15834 изменена работа фильтров 

