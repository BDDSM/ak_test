
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	ПостроитьТаблицу(ПараметрКоманды);
КонецПроцедуры


&НаКлиенте
Процедура ПостроитьТаблицу(ПараметрКоманды) Экспорт
	
	Состояние("Идет выборка данных. Ожидайте...");
	ПостроитьТаблицуНаСервере(ПараметрКоманды);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОтборы(ТаблицаОтборов, ТекОтборы, ТаблицаЭлементов)
	
	ТаблицаОтборов.Элементы.Очистить();
	
	Если ТекОтборы <> Неопределено Тогда
		
		Для каждого ТекСтр Из ТекОтборы.Элементы Цикл
			
			
			
			Для каждого ТекЭлКоллекции Из ТаблицаЭлементов Цикл
				
				Если ТекЭлКоллекции.Поле = ТекСтр.ЛевоеЗначение Тогда
					
					НовыйОтбор = ТаблицаОтборов.Элементы.Добавить(ТипЗнч(ТекСтр));
					ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
					Попытка
						Если ТекСтр.Элементы.Количество() > 0 Тогда
							ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);
						КонецЕсли;	
					Исключение
					КонецПопытки;
					
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПодчинённыеОтборы(ТекСтрРодитель, НовыйОтборРодитель)
	
	Для каждого ТекСтр Из ТекСтрРодитель.Элементы Цикл
	    		
	    НовыйОтбор = НовыйОтборРодитель.Элементы.Добавить(ТипЗнч(ТекСтр));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
		
		Попытка
		Если ТекСтр.Элементы.Количество() > 0 Тогда
			ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);	
		КонецЕсли;	
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПостроитьТаблицуНаСервере(ПараметрКоманды) Экспорт
	
	// ПОЛУЧАЕМ ПОКУПЕТЕЛЕЙ
	//СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("Loyalty");
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.Loyality.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
		
	//Получение самой СКД из макета
	СхемаКомпоновкиДанныхПокупатели = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетПокупатели");
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтборПокупатели.Получить(), СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Покупатели.Настройки.Выбор.Элементы);
	
	НоваяСтрОтбора = СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерКарты");
	НоваяСтрОтбора.ПравоеЗначение = "";	
	НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	НоваяСтрОтбора.Использование = Истина;

	//Макет компоновки
	КомпоновщикМакетаПокупатели = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиПокупатели = КомпоновщикМакетаПокупатели.Выполнить(СхемаКомпоновкиДанныхПокупатели, СхемаКомпоновкиДанныхПокупатели.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиПокупатели);	
	ТабПокупатели = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабПокупатели);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
	
	// ПОЛУЧАЕМ ТОВАРЫ	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанныхТОВАРЫ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетТовары");
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтборТовары.Получить(), СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
	//Макет компоновки
	КомпоновщикМакетаТОВАРЫ = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиТОВАРЫ = КомпоновщикМакетаТОВАРЫ.Выполнить(СхемаКомпоновкиДанныхТОВАРЫ, СхемаКомпоновкиДанныхТОВАРЫ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиТОВАРЫ);	
	Таб_ТОВАРЫ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Таб_ТОВАРЫ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	
	// ПОЛУЧАЕМ Производетяля	
	//Получение самой СКД из макета
	СхемаКомпоновкиДанныхПроизводитель = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетПроизводители");
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтборТовары.Получить(), СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
	//Макет компоновки
	КомпоновщикМакетаПроизводитель = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиПроизводитель = КомпоновщикМакетаПроизводитель.Выполнить(СхемаКомпоновкиДанныхПроизводитель, СхемаКомпоновкиДанныхПроизводитель.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиПроизводитель);	
	Таб_ПРОИЗВОДИТЕЛИ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Таб_ПРОИЗВОДИТЕЛИ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

 
	// ПОЛУЧАЕМ ЧЕКИ	
	//Получение самой СКД из макета
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		СхемаКомпоновкиДанныхЧЕКИ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетЧЕКИ");
	Иначе
		СхемаКомпоновкиДанныхЧЕКИ = Справочники.СохраненныеВыборкиПоПокупателям.ПолучитьМакет("МакетЧЕКИ_ВкусВилл");
	КонецЕсли;	
	
	ЗаполнитьОтборы(СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор, ПараметрКоманды.ВыборкаЗП.ХранилищеОтборТовары.Получить(), СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Выбор.Элементы);
	
	//// Добавляем фильтры по номенклатуре, картам, типам операций, номеру карты
		
	Если ПараметрКоманды.Проект = Перечисления.Проекты.Избенка Тогда
		НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперации");
		НоваяСтрОтбора.ПравоеЗначение = 1;	
		НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НоваяСтрОтбора.Использование = Истина;
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений();
	ТабПокупатели.Свернуть("НомерКарты","");
	СписокОтбора.ЗагрузитьЗначения(ТабПокупатели.ВыгрузитьКолонку("НомерКарты"));	
	Если СписокОтбора.Количество() > 0 Тогда
		НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерКарты");
		НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
		НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НоваяСтрОтбора.Использование = Истина;
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений();
	Таб_ТОВАРЫ.Свернуть("ИдентификаторТовара","");
	СписокОтбора.ЗагрузитьЗначения(Таб_ТОВАРЫ.ВыгрузитьКолонку("ИдентификаторТовара"));	
	Если СписокОтбора.Количество() > 0 Тогда
		НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("id_tov_cl");
		НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
		НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НоваяСтрОтбора.Использование = Истина;
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений();
	Таб_ПРОИЗВОДИТЕЛИ.Свернуть("ИД","");
	СписокОтбора.ЗагрузитьЗначения(Таб_ПРОИЗВОДИТЕЛИ.ВыгрузитьКолонку("ИД"));	
	Если СписокОтбора.Количество() > 0 Тогда
		НоваяСтрОтбора = СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		НоваяСтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИД_Производитель");
		НоваяСтрОтбора.ПравоеЗначение = СписокОтбора;	
		НоваяСтрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НоваяСтрОтбора.Использование = Истина;
	КонецЕсли;
	
	//Макет компоновки
	КомпоновщикМакетаЧЕКИ = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиЧЕКИ = КомпоновщикМакетаЧЕКИ.Выполнить(СхемаКомпоновкиДанныхЧЕКИ, СхемаКомпоновкиДанныхЧЕКИ.ВариантыНастроек.Получить(0).Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), ,);	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиЧЕКИ);	
	Таб_ЧЕКИ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Таб_ЧЕКИ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Таб_ЧЕКИ.Свернуть("НомерКарты", "");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб_ЧЕКИ.НомерКарты
		|ПОМЕСТИТЬ Врем1
		|ИЗ
		|	&Таб_ЧЕКИ КАК Таб_ЧЕКИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабПокупатели.НомерКарты
		|ПОМЕСТИТЬ Врем2
		|ИЗ
		|	&ТабПокупатели КАК ТабПокупатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Врем2.НомерКарты
		|ИЗ
		|	Врем1 КАК Врем1
		|		ПОЛНОЕ СОЕДИНЕНИЕ Врем2 КАК Врем2
		|		ПО Врем1.НомерКарты = Врем2.НомерКарты";

	Запрос.УстановитьПараметр("Таб_ЧЕКИ", Таб_ЧЕКИ);
	Запрос.УстановитьПараметр("ТабПокупатели", ТабПокупатели);	
	ТЗСписокКлиентов = Запрос.Выполнить().Выгрузить();
    	
	
КонецПроцедуры