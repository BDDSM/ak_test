
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ТестВнешнегоЗапускаПериодическогоЗадания()
	
	ВнешняяОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Добавление операции 400 (Сторонняя розница)");
	
	Если ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВнешняяОбработкаСсылка.ХранилищеВнешнейОбработки.Получить());
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
		
		ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
		
		Если Час(ТекущаяДата()) < 7 Тогда 
			ДатаОбработки = НачалоДня(ТекущаяДата())-86400;
		Иначе
			ДатаОбработки = НачалоДня(ТекущаяДата());
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("Дата, НомерТочки, ЗаписьTD_Move, ЗаписьTD_ost_detail, Очистка, ПросмотрТаблиц, ТолькоНезаполненные", 
					ДатаОбработки, ВнешняяОбработкаОбъект.ПолучитьТочкиПерекресток(), Истина, Ложь, Ложь, Ложь, Ложь);
		
		ВнешняяОбработкаОбъект.ОбновитьОперации400ПоМагазинамСтороннейРозницы(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТочкиПерекресток() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки В (ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток), ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка)) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТочки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НомерТочкиСтрока = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерТочкиСтрока = НомерТочкиСтрока +  Формат(ВыборкаДетальныеЗаписи.НомерТочки, "ЧГ=0") + ",";
	КонецЦикла;
	
	НомерТочкиСтрока = Лев(НомерТочкиСтрока, СтрДлина(НомерТочкиСтрока)-1);

	Возврат НомерТочкиСтрока;
	
КонецФункции

Процедура ОбновитьОперации400ПоМагазинамСтороннейРозницы(СтруктураПараметров) Экспорт
	
	ТаблицаTD_Move    = ПолучитьТаблицуTD_TD_Move(СтруктураПараметров);
	ТаблицаРеализаций = ПолучитьТаблицуРеализаций(СтруктураПараметров);
	
	ИтоговаяТаблица   = ЗаполнитьДатыПроизводства(ТаблицаTD_Move, ТаблицаРеализаций);
	
	Если СтруктураПараметров.ПросмотрТаблиц Тогда
		СтруктураПараметров.Вставить("ТаблицаTD_Move", ТаблицаTD_Move);
		СтруктураПараметров.Вставить("ТаблицаРеализаций", ТаблицаРеализаций);
		СтруктураПараметров.Вставить("ИтоговаяТаблица", ИтоговаяТаблица);
	КонецЕсли;
	
	ОбновитьЗаписиДатамиПроизводстваTD_Move(СтруктураПараметров, ИтоговаяТаблица);
	
КонецПроцедуры

Функция ПолучитьТаблицуTD_TD_Move(СтруктураПараметров)
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "
	
	|SELECT 
	|Id_doc, 
	|CAST(CAST(closedate as date) as datetime) as DateDay, 
	|id_tov,
	|id_kontr, 
	|Date_proizv, 
	|closedate,
	|Quantity as balance_ost,
	|ShopNo_rep as ShopNo,
	|Descr as comment, 
	|tduid  
	|          FROM [SMS_Repl].[dbo].TD_move (nolock) WHERE 1=1
	|          AND TD_move.operation_type = '400' 
	|          --AND TD_move.ShopNo_rep IN (1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1606,1607,1687,1718,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1776,1777,1786)
	|          AND TD_move.ShopNo_rep IN ("+СтруктураПараметров.НомерТочки+")
	|          --AND id_doc = 'B8C24AF8-C392-40DC-A737-D38CD20AA531'
	|          AND TD_move.Quantity <> 0 "+ ?(СтруктураПараметров.ТолькоНезаполненные, " AND Descr is null","")+"
	|          --AND closedate > '2018-24-04' AND closedate < '2018-24-08'
	|          AND CAST(CAST(closedate as date) as datetime) = "+ФорматПоля(СтруктураПараметров.Дата)+"";
	
	ТаблицаДвижений = Новый ТаблицаЗначений();
	
	ТаблицаДвижений.Колонки.Добавить("Id_doc" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(38, ДопустимаяДлина.Фиксированная)));
	ТаблицаДвижений.Колонки.Добавить("DateDay", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(10, 0)));
	ТаблицаДвижений.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаДвижений.Колонки.Добавить("date_proizv", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("closedate", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("balance_ost", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаДвижений.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	//ТаблицаДвижений.Колонки.Добавить("ID_user" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	ТаблицаДвижений.Колонки.Добавить("comment" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	ТаблицаДвижений.Колонки.Добавить("tduid" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(38, ДопустимаяДлина.Фиксированная)));
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	Попытка
		rs.MoveFirst();
		Сч = 1;
		Пока НЕ rs.EOF() Цикл

			НоваяСтрокаДвижений = ТаблицаДвижений.Добавить();
			
			Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
				НоваяСтрокаДвижений[Колонка.Имя] = rs.Fields(Колонка.Имя).Value;
			КонецЦикла;
			
			Сч = Сч+1;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());

		Сообщить(НСтр("ru = 'Нет записей по магазину " + СтруктураПараметров.НомерТочки + "!'", "ru"));
	КонецПопытки;
	
	ТаблицаДвижений.Сортировать("ShopNo, Id_doc, tduid");
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ОбновитьОперации400ПоМагазинамСтороннейРозницы()

Функция ПолучитьТаблицуРеализаций(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугEDI_Товары.Ссылка.EDI_ТочкаДоставки.НомерТочки КАК НомерТочки,
	|	РеализацияТоваровУслугEDI_Товары.Ссылка,
	|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслугEDI_Товары.Ссылка.Дата, ДЕНЬ) КАК День,
	|	РеализацияТоваровУслугEDI_Товары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугEDI_Товары.Номенклатура.id_tov КАК id_tov,
	|	РеализацияТоваровУслугEDI_Товары.Характеристика.id_kontr КАК id_kontr,
	|	РеализацияТоваровУслугEDI_Товары.Номенклатура,
	|	РеализацияТоваровУслугEDI_Товары.Характеристика,
	|	РеализацияТоваровУслугEDI_Товары.Количество,
	|	РеализацияТоваровУслугEDI_Товары.КоличествоОтгружено,
	|	РеализацияТоваровУслугEDI_Товары.ДатаПроизводства КАК ДатаПроизводства
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.EDI_Товары КАК РеализацияТоваровУслугEDI_Товары
	|ГДЕ
	|	РеализацияТоваровУслугEDI_Товары.Ссылка.EDI_ТочкаДоставки.НомерТочки В(&НомерТочки)
	|	И НАЧАЛОПЕРИОДА(РеализацияТоваровУслугEDI_Товары.Ссылка.Дата, ДЕНЬ) = &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТочки,
	|	РеализацияТоваровУслугEDI_Товары.Ссылка,
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Дата", СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("НомерТочки", РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.НомерТочки));
	
	ТаблицаРеализаций = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРеализаций; 
	
КонецФункции

Функция ЗаполнитьДатыПроизводства(ТаблицаTD_Move, ТаблицаРеализаций)
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ТаблицаTD_Move Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаTD_Move);
	Запрос.Выполнить();
	
	Запрос.Текст = "Выбрать * ПОМЕСТИТЬ ТаблицаРеализаций Из &ВременнаяТаблица Как ВременнаяТаблица";
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаРеализаций);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаTD_Move.ShopNo,
	               |	ТаблицаTD_Move.DateDay,
	               |	ТаблицаTD_Move.Id_doc,
	               |	ТаблицаРеализаций.НомерСтроки,
	               |	ТаблицаTD_Move.tduid,
	               |	ТаблицаTD_Move.id_tov,
	               |	ТаблицаTD_Move.id_kontr,
	               |	ТаблицаTD_Move.balance_ost КАК balance_ost,
	               |	ТаблицаРеализаций.Количество КАК Количество,
	               |	ТаблицаРеализаций.ДатаПроизводства,
	               |	ТаблицаРеализаций.Ссылка.ПРЕДСТАВЛЕНИЕ КАК comment,
	               |	ТаблицаРеализаций.Ссылка
	               |ИЗ
	               |	ТаблицаTD_Move КАК ТаблицаTD_Move
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРеализаций КАК ТаблицаРеализаций
	               |		ПО ТаблицаTD_Move.DateDay = ТаблицаРеализаций.День
	               |			И ТаблицаTD_Move.ShopNo = ТаблицаРеализаций.НомерТочки
	               |			И ТаблицаTD_Move.id_tov = ТаблицаРеализаций.id_tov
	               |			И ТаблицаTD_Move.id_kontr = ТаблицаРеализаций.id_kontr
	               |ГДЕ
	               |	ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТаблицаTD_Move.ShopNo,
	               |	ТаблицаTD_Move.DateDay,
	               |	ТаблицаTD_Move.Id_doc,
	               |	ТаблицаРеализаций.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ФорматПоля(Поле, ФорматДатыБезВремени = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Если ФорматДатыБезВремени Тогда
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-dd") + "'";
		Иначе	
			Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + Поле + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

Функция ФорматСсылки(Поле) Экспорт
	
	ПолеЗамена = Поле;
	ПолеЗамена = СтрЗаменить(ПолеЗамена, "{","");
	ПолеЗамена = СтрЗаменить(ПолеЗамена, "}","");
	
	Возврат "'" + ПолеЗамена + "'";
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Число(Стр));
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Число(Лев(Стр,Поз-1)));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Стр = СокрЛП(Стр);
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Число(Стр));
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Число(Лев(Стр,Поз-1)));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

КонецФункции //

Процедура ОбновитьЗаписиДатамиПроизводстваTD_Move(СтруктураПараметров, ИтоговаяТаблица)
	
	Если ИтоговаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ИтоговаяТаблица);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ShopNo,
	|	DateDay,
	|	Id_doc
	|ИТОГИ ПО
	|	ShopNo,
	|	DateDay,
	|	Id_doc";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаShopNo = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаShopNo.Следующий() Цикл
	
		ВыборкаDateDay = ВыборкаShopNo.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаDateDay.Следующий() Цикл
	
			ВыборкаId_doc = ВыборкаDateDay.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаId_doc.Следующий() Цикл
				
				Если СтруктураПараметров.ЗаписьTD_Move Тогда
					
					ВыборкаДетальныеЗаписи = ВыборкаId_doc.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбновитьДатуПроизводстваTD_Move(ADOСоединение, ВыборкаДетальныеЗаписи);
					КонецЦикла;
					
				КонецЕсли;
				//Очистка записей по документу (при перезаписи)
				Если СтруктураПараметров.Очистка Тогда
					УдалитьЗаписиTD_ost_detail (ADOСоединение,"TD_ost_detail",ФорматСсылки(ВыборкаId_doc.Id_doc), ВнешниеДанные.ФорматПоля(ВыборкаShopNo.ShopNo));
					УдалитьЗаписиTD_ost_detail (ADOСоединение,"TD_ost_detail_History",ФорматСсылки(ВыборкаId_doc.Id_doc), ВнешниеДанные.ФорматПоля(ВыборкаShopNo.ShopNo));
				КонецЕсли;
				
				//Добавление записи в TD_ost_detail
				Если СтруктураПараметров.ЗаписьTD_ost_detail Тогда
					ДобавитьЗаписиTD_ost_detail(ADOСоединение, ФорматСсылки(ВыборкаId_doc.Id_doc), ВнешниеДанные.ФорматПоля(ВыборкаShopNo.ShopNo));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ADOСоединение.Close();
	 
	ADOСоединение = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//РАБОТА С ТАБЛИЦЕЙ TD_MOVE

Процедура ОбновитьДатуПроизводстваTD_Move(ADOСоединение, Выборка)
	
	ТекстЗапроса = "UPDATE [SMS_Repl].[dbo].[ИмяТаблицы]
	|SET СписокПолейSET
	|FROM [SMS_Repl].[dbo].[ИмяТаблицы] with (rowlock, index (PK_TD_move))
	|WHERE СписокПолейWhere";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", "TD_Move"); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейSET", "Date_proizv = " + ВнешниеДанные.ФорматПоля(Выборка.ДатаПроизводства) + ", Descr = 'Загружен по " + Выборка.comment + "'");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейWhere", "Id_doc = " + ФорматСсылки(Выборка.Id_doc) + " AND tduid = " + ФорматСсылки(Выборка.tduid));
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		Сообщить("Ошибка редактирования строки товародвижений "  + ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстЗапроса);
	КонецПопытки;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//РАБОТА С ТАБЛИЦЕЙ TD_OST_DETAIL

Процедура ДобавитьЗаписиTD_ost_detail(ADOСоединение, Id_doc, ShopNo)
	
	ТекстЗапроса = 
	
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	//Основной текст запроса
	| INSERT INTO [SMS_Repl].[dbo].[TD_ost_detail]
	|(id_doc, date, balance_ost, id_kontr, id_tov, Date_proizv, comment, ShopNo, id_user)
	|	SELECT Id_doc, closedate as date, Quantity as balance_ost, id_kontr, id_tov, Date_proizv, Descr as comment, ShopNo_rep as ShopNo, "+  ВнешниеДанные.ФорматПоля(ПолучитьGUIDАвтора()) + " as id_user  
	|	   FROM [SMS_Repl].[dbo].TD_move (nolock) WHERE TD_move.Id_doc = " + Id_doc + " 
	|			AND TD_move.operation_type = '400' 
	|		       AND TD_move.ShopNo_rep = "+ ShopNo + "
	|                  AND TD_move.Quantity <> 0
	//Основной текст запроса
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка проведения документа", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстЗапроса);
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписиTD_ost_detail(ADOСоединение, ИмяТаблицы, Id_doc, ShopNo = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ShopNo) Тогда
		ShopNo = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	КонецЕсли;
	
	ТекстЗапроса = 
	
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	//Основной текст запроса
	|DELETE  
	|FROM [SMS_REPL].[dbo].["+ИмяТаблицы+"]
	|Where id_doc = " + Id_doc + " 
	| 	and ShopNo = "+ ShopNo + " 
	//Основной текст запроса
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";	
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка проведения документа", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстЗапроса);
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьВсеЗаписиTD_ost_detail(ADOСоединение, ИмяТаблицы, ShopNo = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ShopNo) Тогда
		Возврат;
		ShopNo = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	КонецЕсли;
	
	ТекстЗапроса = 
	
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	//Основной текст запроса
	|DELETE  
	|FROM [SMS_REPL].[dbo].["+ИмяТаблицы+"]
	|Where ShopNo IN ("+ ShopNo + ")
	| 	  
	//Основной текст запроса
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";	
	
	Попытка	
		ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка проведения документа", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ТекстЗапроса);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьGUIDАвтора()
	
	Попытка
		АвторИзменения = ПараметрыСеанса.ТекущийПродавец;
	Исключение
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(АвторИзменения) Тогда
		АвторИзменения = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Возврат Строка(АвторИзменения.УникальныйИдентификатор());
	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////
//ОТПРАВКА ОТЧЕТА ПО ПРОСРОЧКЕ

// Выполняет формирование табличных документов для рассылки по помощникам //+++АК mika 2018.11.16 ИП-00020415
// (от 20181116 отчет отравляется с информацией по всем магазинам для произвольного списка получателей)
//
// Параметры:
//  НомерТочки  - <Тип.Строка, Число> - Номер точки
//  ТолькоПросмотр - <Тип.Булево> - Технический реквизит при запуске отчета пользователем (для просмотра без отправки)
//  ТабДокумент  - <Тип.ТабличныйДокумен> - Переменная в которую будет возвращен результат при простмотре 
//  РассылкаПомощникам - <Тип.Булево> - Значение = Истина - помощники будут получать отчеты каждый по своим магазинам
//  ПереносОстатков - <Тип.Булево> - Значение = Истина запуск процедура SQL по переносу остатков (признак всегда должен быть установлен в Истина при регламентной отправке)
//  СтрокаПолучателей - <Тип.Строка> - Перечень произвольных получателей, с разделителем ";"
//
Процедура СформироватьОтчетОПросроченныхПозицияхМагазиновСтороннейРозницы(НомерТочки = Неопределено, ТолькоПросмотр = Ложь, ТабДокумент = Неопределено, РассылкаПомощникам = Ложь, ПереносОстатков = Ложь, СтрокаПолучателей = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НомерТочки) Тогда
		НомерТочки = ПолучитьТочкиПерекресток();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерТочки) Тогда
		Возврат;
	КонецЕсли;                     
	
	//Поскольку редактировать просроченные позиции пользователи не будут,
	//была поставлениа задача перезаполнять остатки непосредственно перед отправлением отчета
	Если ПереносОстатков Тогда
		ПереносОстатковПоВсемМагазинамСтороннейРозницы(НомерТочки); 
	КонецЕсли;

	ТаблицаОстатков = ЗаполнитьДанныеПоТоварамSQLСервер(НомерТочки);	
	
	Если РассылкаПомощникам Тогда
		
		ТаблицаПомощников = ТаблицаОстатков.Скопировать();
		
		ТаблицаПомощников.Свернуть("ТорговаяТочка, Получатель");
		
		Для каждого Строка ИЗ ТаблицаПомощников Цикл
			
			СформироватьМакетСКД(ТаблицаОстатков, ТабДокумент, Строка.ТорговаяТочка);
			
			Если ТолькоПросмотр Тогда
				Возврат;
			КонецЕсли;
			
			ОтправитьПисьмаПолучателям(ТабДокумент, Строка.ТорговаяТочка, Строка.Получатель);
			
		КонецЦикла;
		
	Иначе
		СформироватьМакетСКД(ТаблицаОстатков, ТабДокумент);
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмаПолучателям(ТабДокумент, НомерТочки,, СтрокаПолучателей); 

КонецПроцедуры

Функция ЗаполнитьДанныеПоТоварамSQLСервер(НомерМагазина)

	Первые = Неопределено;
	
	ОтборПоМагазину = Истина;
	ОтборПоТовару   = Ложь;
	
	ТаблицаОстатков = Новый ТаблицаЗначений();
	
	ТаблицаОстатков.Колонки.Добавить("TD_ost_detail_ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("date_proizv", Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("balance_ost", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаОстатков.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОстатков.Колонки.Добавить("ID_user" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	ТаблицаОстатков.Колонки.Добавить("comment" , Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//Обработки.РабочийСтолПродавца.ОбнулениеПозицийБезОстатка(id_TT, ADOСоединение, id_user); 
	
	TOP = ?(ЗначениеЗаполнено(Первые), "TOP " + Формат(Первые,"ЧН=; ЧГ=0"), "");
	ТекстЗапросаОстатки = "SELECT " + TOP + " 
	| [TD_ost_detail_ID]
	|,[id_tov] 
	|,ISNULL([id_kontr], 0) as id_kontr 
	|,[date_proizv]
	|,[balance_ost]
	|,[ShopNo]
	|,[ID_user]
	|,[comment]
	|FROM [SMS_REPL].[dbo].[TD_ost_detail] (nolock)
	|&Where";
	
	//+++АК mika 2018.01.14 Нет задачи. Сворачивание данных перед формированием основной таблицы "ТаблицаОстатков"
    //(иначе формируется излишне большая таблица, которая свочачивается только перед сравнением, дальше по коду).
	ТекстЗапросаОстатки = "SELECT " + TOP + "
	|[ShopNo]
	|,[id_tov]
	|,[id_kontr]
	|,[date_proizv]
	|,SUM([balance_ost]) as balance_ost
    |,MAX(1) as TD_ost_detail_ID
	|,MAX('') as comment
	|,MAX('') as ID_user
	|FROM [SMS_REPL].[dbo].[TD_ost_detail] (nolock)
	|&Where 
	|GROUP BY [ShopNo],[id_tov],[id_kontr],[date_proizv]
	|HAVING SUM([balance_ost])<>0
	|ORDER BY [id_tov],[date_proizv]";  
 
	УсловиеЗапроса = "";
	
	Если ОтборПоМагазину Тогда
		УсловиеЗапроса = СтрЗаменить(" TD_ost_detail.ShopNo IN (id_TT)", "id_TT", НомерМагазина);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ОтборПоТовару) Тогда
	//	УсловиеЗапроса = УсловиеЗапроса + ?(ЗначениеЗаполнено(УсловиеЗапроса), " AND ", "") + " TD_ost_detail.id_tov=" + Формат(ОтборПоТовару,"ЧН=; ЧГ=0");
	//КонецЕсли;

	ТекстЗапросаОстатки = СтрЗаменить(ТекстЗапросаОстатки,"&Where", ?(ЗначениеЗаполнено(УсловиеЗапроса), " WHERE " + УсловиеЗапроса + " AND ISNULL([balance_ost], 0) <> 0"," WHERE ISNULL([balance_ost], 0) <> 0")) ;
	
	rs = ADOСоединение.Execute(ТекстЗапросаОстатки);
	
	Попытка
		rs.MoveFirst();
		Сч = 1;
		Пока НЕ rs.EOF() Цикл

			НоваяСтрокаОстатков = ТаблицаОстатков.Добавить();
			
			Для каждого Колонка Из ТаблицаОстатков.Колонки Цикл
				НоваяСтрокаОстатков[Колонка.Имя] = rs.Fields(Колонка.Имя).Value;
			КонецЦикла;
			
			Сч = Сч+1;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(НСтр("ru = 'Нет записей по магазину " + НомерМагазина + "!'", "ru"));
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Возврат ЗаполнитьТаблицуОстатков(ТаблицаОстатков);
	
КонецФункции

Функция ЗаполнитьТаблицуОстатков(ТаблицаОстатков)

	ОбязательныеПоля = Новый Массив();
	ОбязательныеПоля.Добавить("ДатаПроизводства");  
	ОбязательныеПоля.Добавить("Остаток");   
	ОбязательныеПоля.Добавить("СрокГодностиДней");
	ОбязательныеПоля.Добавить("Комментарий");
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|   ВременнаяТаблица.ShopNo,
	|   ВременнаяТаблица.TD_ost_detail_ID,
	|	ВременнаяТаблица.id_tov,
	|	ВременнаяТаблица.id_kontr,
	|	ВременнаяТаблица.date_proizv,
	|	ВременнаяТаблица.balance_ost,
	|	ВременнаяТаблица.comment
	|ПОМЕСТИТЬ ВТ_Общая
	|ИЗ
	|	&ВременнаяТаблица КАК ВременнаяТаблица";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаОстатков);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Общая.TD_ost_detail_ID) КАК TD_ost_detail_ID,
	|   ВТ_Общая.ShopNo,
	|	ВТ_Общая.id_tov,
	|	ВТ_Общая.id_kontr,
	|	ВТ_Общая.date_proizv,
	|	СУММА(ВТ_Общая.balance_ost) КАК balance_ost,
	|	МИНИМУМ("""") КАК comment
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_Общая КАК ВТ_Общая
	|
	|СГРУППИРОВАТЬ ПО
	|   ВТ_Общая.ShopNo,
	|	ВТ_Общая.date_proizv,
	|	ВТ_Общая.id_tov,
	|	ВТ_Общая.id_kontr
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Общая.balance_ost) <> 0";
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабИтоговая.ShopNo,
	|	ТабИтоговая.id_tov,
	|	ЕСТЬNULL(ТабИтоговая.Номенклатура, СпрНоменклатура.Ссылка) КАК Номенклатура,
	|	ТабИтоговая.Сортировка,
	|	ТабИтоговая.МестоВыкладки,
	|	ТабИтоговая.СрокГодностиДней,
	|	ТабИтоговая.ДатаПроизводства КАК ДатаПроизводства,
	|	ТабИтоговая.Остаток,
	|	ТабИтоговая.id_kontr,
	|	ТабИтоговая.id_kontr1С,
	|	ТабИтоговая.ПоследнийДеньПродажи КАК ПоследнийДеньПродажи,
	|	ТабИтоговая.ОтметкаМесяцев,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ПоследнийДеньПродажи <> &ПустаяДата
	|				И ТабИтоговая.ПоследнийДеньПродажи < &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварПросрочен,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ПоследнийДеньПродажи <> &ПустаяДата
	|					И ТабИтоговая.ПоследнийДеньПродажи = &ТекущаяДата
	|				ИЛИ ТабИтоговая.ОтметкаМесяцев
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоследнийДень,
	|	ВЫБОР
	|		КОГДА ТабИтоговая.ДатаПроизводства = &ПустаяДата
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СортировкаДаты,
	|	Контрагенты.Ссылка КАК Производитель,
	|	ТабИтоговая.TD_ost_detail_ID КАК TD_ost_detail_ID,
	|	ТабИтоговая.Comment КАК Комментарий,
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	Таб_PLU.PLU
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.ShopNo КАК ShopNo,
	|		ВТ.id_tov КАК id_tov,
	|		Таб_Характеристики.Товар КАК Номенклатура,
	|		Таб_Характеристики.Сортировка КАК Сортировка,
	|		Таб_Выкладка.МестоВыкладки КАК МестоВыкладки,
	|		ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0)) КАК СрокГодностиДней,
	|		ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) КАК ДатаПроизводства,
	|		ЕСТЬNULL(ВТ.balance_ost, 0) КАК Остаток,
	|		ВТ.id_kontr КАК id_kontr,
	|		Таб_Характеристики.id_kontr1С КАК id_kontr1С,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 0
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1)
	|			ИНАЧЕ &ПустаяДата
	|		КОНЕЦ КАК ПоследнийДеньПродажи,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ.date_proizv, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) >= 180
	|								И ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) < 360
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 20
	|							ТОГДА ИСТИНА
	|						КОГДА ЕСТЬNULL(Таб_Характеристики.СрокГодности, 0) >= 360
	|								И РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ВТ.date_proizv, ДЕНЬ, (ВЫРАЗИТЬ(Таб_Характеристики.СрокГодности КАК ЧИСЛО(10, 0))) - 1), ДЕНЬ) <= 50
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОтметкаМесяцев,
	|		ВТ.TD_ost_detail_ID КАК TD_ost_detail_ID,
	|		ВТ.comment КАК Comment
	|	ИЗ
	|		ВТ КАК ВТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках) КАК СрокГодности,
	|				0 КАК Сортировка,
	|				ХарактеристикиНоменклатуры.Владелец КАК Товар,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr КАК id_kontr1С
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	|				И ХарактеристикиНоменклатуры.Владелец.id_tov В
	|						(ВЫБРАТЬ
	|							ВТ.id_tov
	|						ИЗ
	|							ВТ КАК ВТ)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				МИНИМУМ(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках),
	|				1,
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				НЕ ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))
	|				И ХарактеристикиНоменклатуры.Владелец.id_tov В
	|						(ВЫБРАТЬ
	|							ВТ.id_tov
	|						ИЗ
	|							ВТ КАК ВТ)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХарактеристикиНоменклатуры.Владелец,
	|				ХарактеристикиНоменклатуры.Владелец.id_tov,
	|				ХарактеристикиНоменклатуры.id_kontr) КАК Таб_Характеристики
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(ВыкладкаПланограммы.МестоВыкладки) КАК МестоВыкладки,
	|					ВыкладкаПланограммы.Номенклатура КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|				ГДЕ
	|					НЕ ВыкладкаПланограммы.Планограмма.НеАктуальная
	|					И НЕ ВыкладкаПланограммы.ТоварВыведен
	|					И НЕ ВыкладкаПланограммы.Номенклатура.Выведена
	|					И ВыкладкаПланограммы.Номенклатура.id_tov В
	|							(ВЫБРАТЬ
	|								ВТ.id_tov
	|							ИЗ
	|								ВТ КАК ВТ)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВыкладкаПланограммы.Номенклатура) КАК Таб_Выкладка
	|				ПО Таб_Характеристики.Товар = Таб_Выкладка.Ссылка
	|			ПО (Таб_Характеристики.id_tov = ВТ.id_tov)
	|				И (Таб_Характеристики.id_kontr1С = ВТ.id_kontr)) КАК ТабИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ВЫБОР
	|				КОГДА ТабИтоговая.id_kontr <> 0
	|					ТОГДА ТабИтоговая.id_kontr = Контрагенты.ИД
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТабИтоговая.id_tov = СпрНоменклатура.id_tov
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ТабИтоговая.ShopNo = СтруктурныеЕдиницы.НомерТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov КАК Id_tov,
	|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ID_kontr,
	|			МАКСИМУМ(КонтурEDI_СоответствияТоваров.КодТовараПартнера) КАК PLU
	|		ИЗ
	|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ПО КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КонтурEDI_СоответствияТоваров.Номенклатура.id_tov,
	|			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД) КАК Таб_PLU
	|		ПО ТабИтоговая.id_tov = Таб_PLU.Id_tov
	|			И ТабИтоговая.id_kontr = Таб_PLU.ID_kontr
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабИтоговая.ShopNo,
	|	СортировкаДаты,
	|	ПоследнийДеньПродажи,
	|	ДатаПроизводства";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьМакетСКД(ТаблицаОстатков, ТабДокумент, ТорговаяТочка = Неопределено);
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ПросроченныеТоварыСторонняяРозница");
	
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ЭлементОтбора = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТорговаяТочка"); 
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно; 
		ЭлементОтбора.ПравоеЗначение = ТорговаяТочка; 
		ЭлементОтбора.Использование  = Истина; 
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,Тип("ГенераторМакетаКомпоновкиДанных")); 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("НаборДанныхПросрочка", ТаблицаОстатков)); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	
	ТабДокумент = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ОтправитьПисьмаПолучателям(ТабДокумент, ТорговаяТочка, Получатель = Неопределено, СтрокаПолучателей = Неопределено)
	
	Если ЗначениеЗаполнено(СтрокаПолучателей) Тогда
	    Получатель = СтрокаПолучателей;
	ИначеЕсли НЕ ЗначениеЗаполнено(Получатель) Тогда
		Возврат;
	КонецЕсли;
	
    //Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	
	СтруктураПисьма.Вставить("Отправитель",    Документы.ИзменениеЗакупочныхЦен.ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru")); 
	СтруктураПисьма.Вставить("Получатели",     Получатель);
	СтруктураПисьма.Вставить("Тема", СтрЗаменить(СтрЗаменить("Период Просроченные позиции (Сторонняя розница): ТорговаяТочка", 
												"ТорговаяТочка", ТорговаяТочка),
												"Период", Формат(ТекущаяДата(), "ДФ=yyyyMMdd"))); 
	СтруктураПисьма.Вставить("Текст", "");
	СтруктураПисьма.Вставить("ВложениеПуть");
	СтруктураПисьма.Вставить("ИмяФайла");
	
	//Запись в HTML файл (заполнение тела письма)
	МассивДляУдаления = Новый Массив();
	
	ВременныйКаталог = КаталогВременныхФайлов(); 
	ИмяФайла = Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ?(ТипЗнч(ТорговаяТочка) = Тип("Строка"), "_ВсеМагазины", "_"+ ТорговаяТочка)+".xls";
	ПолноеИмяФайла = ВременныйКаталог + ИмяФайла;
	
	МассивДляУдаления.Добавить(ПолноеИмяФайла);
	
	ТабДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.xls);
	
	СтруктураПисьма.ВложениеПуть = ПолноеИмяФайла;
	СтруктураПисьма.ИмяФайла     = ИмяФайла;
	
	Текст = "
	|<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://577dda85-0a04-496d-bb0b-b8464746a435/mdobject/id40b6f892-1b1f-4eb1-a139-816d8a0540b2/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
	|<META name=GENERATOR content=""MSHTML 11.00.9600.19003""></HEAD>
	|<BODY><SPAN lang=RU><SPAN lang=RU>
	|<P dir=ltr align=left>Данные о просроченных товарах в приложении (ИмяФайла)* <BR><FONT size=2 face=Calibri><FONT size=2 face=Calibri><FONT color=#595959>(ежедневная рассылка в 9:30)</FONT></P></FONT></FONT><I><FONT size=1 face=Calibri><FONT size=1 face=Calibri>
	|<P dir=ltr align=left><FONT color=#595959>*Для выполнения работ проверки/редактирования дат производств воспользуйтесь формой:<BR>База Финансы(Управляемое приложение)&nbsp;→ Товародвижения → Контроль просрочки по товарам</FONT></P></I></FONT></FONT></SPAN></SPAN></BODY></HTML>";
	
	СтруктураПисьма.Текст = СтрЗаменить(Текст, "ИмяФайла", ИмяФайла); 	
	
	//Отправка письма
	Документы.ИзменениеЗакупочныхЦен.ОтправитьПисьмо(СтруктураПисьма);
	
	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьПисьмо_Временно(СтруктураПисьма) Экспорт
	
	МассивПолучатели = Документы.ЗапросОстатковУпаковкиУПоставщиков.РазложитьСтрокуВМассивПодстрок(СтруктураПисьма.Получатели,";");
	
	Почта   = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(СтруктураПисьма.Отправитель);
	
	Письмо  = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	
	Письмо.Тема = СтруктураПисьма.Тема;
	
	Письмо.ИмяОтправителя  = СокрЛП(СтруктураПисьма.Отправитель);
	Письмо.Отправитель     = СокрЛП(СтруктураПисьма.Отправитель);
	
	//Удаление дублей электронынх адресов
	СоответствиеАдресов = Новый Соответствие();
	
	Для Каждого ЭлементПолучатель Из МассивПолучатели Цикл
		Если ЗначениеЗаполнено(ЭлементПолучатель) Тогда
			СоответствиеАдресов.Вставить(СокрЛП(ЭлементПолучатель),СокрЛП(ЭлементПолучатель));
		КонецЕсли;	
	КонецЦикла;	
	
	//Добавление получателей
	СтрокаПолучателейТест = "";
	Для Каждого ЭлементПолучатель Из СоответствиеАдресов Цикл
		Если ЗначениеЗаполнено(ЭлементПолучатель.Ключ) Тогда
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = СокрЛП(ЭлементПолучатель.Ключ);
			Получатель.ОтображаемоеИмя = СокрЛП(ЭлементПолучатель.Значение);
			СтрокаПолучателейТест      = СтрокаПолучателейТест + Получатель.Адрес + "; ";
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	
	ТекстСообщения.Текст = СтруктураПисьма.Текст; 
	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;

	Если СтруктураПисьма.Свойство("ВложениеПуть") Тогда
		Письмо.Вложения.Добавить(Новый ДвоичныеДанные(СтруктураПисьма.ВложениеПуть), СтруктураПисьма.ИмяФайла);
	КонецЕсли;
	
	Если СтруктураПисьма.Свойство("Копии") Тогда
		Получатель = Письмо.Копии.Добавить();
		Получатель.Адрес           = СокрЛП(СтруктураПисьма.Копии);
		Получатель.ОтображаемоеИмя = СокрЛП(СтруктураПисьма.Копии);
	КонецЕсли;

	СтруктураПисьма.Вставить("ОшибкаОтправки", Ложь);
	СтруктураПисьма.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Почта.Послать(Письмо);
		Почта.Отключиться();

		//Если СтруктураПисьма.Свойство("ПараметрыКнопок") Тогда
		//	
		//	СтруктураПисьма.Вставить("ИдентификаторСообщения", Лев(Письмо.ИдентификаторСообщения, 36));

		//	ДобавитьЗаписьРегистрАкцептЗаявок(СтруктураПисьма);
		//	
		//	РегистрыСведений.ОчередьДокументовДляОтправки.УдалитьЗаписьИзДокументыДляОтправки(СтруктураПисьма.ДокументСсылка);
		//	
		//КонецЕсли;
		
		#Если Не ФоновыеЗадания Тогда
		Сообщить(НСтр("ru = 'Письмо отправлено успешно!'"));
		#КонецЕсли
		
	Исключение
		
		ОписаниеОшибки =  СтрЗаменить("ТекущаяДата : ТекущийПользователь " + Строка(ОписаниеОшибки()), "ТекущаяДата", Строка(ТекущаяДата())); 
		ОписаниеОшибки =  СтрЗаменить(ОписаниеОшибки, "ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
		СтруктураПисьма.ОшибкаОтправки = Истина;
		СтруктураПисьма.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		#Если Не ФоновыеЗадания Тогда
			Сообщить(НСтр("ru = 'Ошибка при отправке письма'") + ОписаниеОшибки);
		#КонецЕсли

	КонецПопытки;
	
КонецПроцедуры

Процедура ПереносОстатковПоВсемМагазинамСтороннейРозницы(НомерТочки)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

 	ТекстЗапросаSQL = СтрЗаменить("exec SMS_REPL..sp_recalc_dateProizv
	 		       |@Shops = НомерТочки", "НомерТочки", "'" + НомерТочки +"'");
	
	Попытка
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Исключение
		ЗаписьЖурналаРегистрации("СторонняяРозница.ПереносОстатков", УровеньЖурналаРегистрации.Ошибка, , , 
				СтрЗаменить("Ошибка переноса остатков по магазину НомерТочки", "НомерТочки", НомерТочки ) + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры
