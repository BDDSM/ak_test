&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружатьКоличество = ?(Параметры.Свойство("ЗагружатьКоличество"), Параметры.ЗагружатьКоличество, Истина);
	
	
	ЗагружатьЦены                         = Параметры.ЗагружатьЦены;
	ЗагружатьСуммы                        = Параметры.ЗагружатьСуммы;
	ИспользоватьНоменклатуруПоставщиков   = Истина;
	ЦенаВключаетНДС                       = Параметры.ВариантРасчетаНДС=Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	ИмяТЧ                                 = Параметры.ИмяТЧ;
	НеПересчитыватьСуммовыеПоказатели     = Параметры.НеПересчитыватьСуммовыеПоказатели;
	Партнер                               = Параметры.Партнер;
	Если ЗначениеЗаполнено(Партнер) Тогда
		ПартнерСтавкаНДС 					  = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Партнер,"СтавкаНДС");
	КонецЕсли;	
	
	ВариантРасчетаНДС = Параметры.ВариантРасчетаНДС;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СегментНоменклатуры) Тогда
		МассивПараметров = Новый Массив;
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.УслугиНоменклатура.ПараметрыВыбора = ПараметрыВыбора;
	КонецЕсли;
	
	СопоставлятьПоНоменклатуреПоставщиков = Параметры.СопоставлятьПоНоменклатуреПоставщиков
	И ИспользоватьНоменклатуруПоставщиков
	И ЗначениеЗаполнено(Партнер);
	
	Валюта     = Параметры.Валюта;
	Дата       = Параметры.Дата;
	Соглашение = Параметры.Соглашение;
	
	НалогообложениеНДС = ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС;
	
	ИнициализироватьТабличныйДокумент();
	ИнициализироватьТабличныйДокументФорматаТаблица();
	//УстановитьДоступностьКомандБуфераОбмена();
	//УстановитьДоступностьКолонок();
	БуферОбмена = Новый Структура;
	БуферОбмена.Вставить("Данные",Неопределено);
	//БуферОбмена.Вставить("Данные",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		//УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		УпаковочныеЛистыПоНомерамСтрок = Новый Соответствие;
		Для ТекИндекс = 0 По Объект.Услуги.Количество()-1 Цикл
			
			ТекущаяСтрока = Объект.Услуги[ТекИндекс];
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
				И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнены данные по товару или упаковочному листу в строке %НомерСтроки%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Услуги", ТекущаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				Если УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист] = Неопределено Тогда
					УпаковочныеЛистыПоНомерамСтрок.Вставить(ТекущаяСтрока.УпаковочныйЛист, ТекущаяСтрока.НомерСтроки);
				Иначе
					ТекстОшибки = НСтр("ru='В строке %НомерСтроки% повторяется %УпаковочныйЛист% из строки %НомерПовторяемойСтроки%.
					|Измените или удалите одну из строк.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ТекущаяСтрока.УпаковочныйЛист);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерПовторяемойСтроки%",
					УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист]);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Услуги", ТекущаяСтрока.НомерСтроки, "УпаковочныйЛист");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если СоздатьНомераГТД Или ПроверятьЗаполнениеХарактеристик Тогда
		Для ТекИндекс = 0 По Объект.Услуги.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Услуги""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Услуги[ТекИндекс].НомерСтроки);
			
			Если Объект.Услуги[ТекИндекс].СоздатьНомерГТД И Объект.Услуги[ТекИндекс].ВедетсяУчетПоГТД И Не ЗначениеЗаполнено(Объект.Услуги[ТекИндекс].СтранаПроисхождения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Страна происхождения""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", Объект.Услуги[ТекИндекс].НомерСтроки, "СтранаПроисхождения"),
				,
				Отказ);
				
			КонецЕсли;
			
			// Проверка заполнения характеристик.
			Если Объект.Услуги[ТекИндекс].ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Услуги[ТекИндекс].Характеристика) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Характеристика""'") + " " + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", Объект.Услуги[ТекИндекс].НомерСтроки, "Характеристика"),
				,
				Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Услуги.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	//СтруктураДействий.Вставить(
	//	"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	//	СтруктураПараметровСопоставленнияНоменклатуры);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	//Если Не НеПересчитыватьСуммовыеПоказатели Тогда
	//	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСумму");
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//КонецЕсли;
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//
	//Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
	//	ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПоставщикаПриИзменении(Элемент)
	
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	//СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	//СтруктураДействий.Вставить(
	//	"ПроверитьСопоставленнуюНоменклатуруПоставщика",
	//	СтруктураПараметровСопоставленнияНоменклатуры);
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	//Если Не НеПересчитыватьСуммовыеПоказатели Тогда
	//	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСумму");
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//КонецЕсли;
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//
	//Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
	//	ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУпаковочныйЛистПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
		ТекущаяСтрока.Номенклатура       = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущаяСтрока.Характеристика     = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ТекущаяСтрока.Упаковка           = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Количество         = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоУпаковокПриИзменении(Элемент)
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//СтруктураДействий = Новый Структура;
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУпаковкаПриИзменении(Элемент)
	
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//СтруктураДействий = Новый Структура;
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Истина);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаРучнойСкидкиПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", 
	//	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(
	//		Объект, 
	//		Истина));
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	//Если НеПересчитыватьСуммовыеПоказатели Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "УслугиНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "УслугиХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
		//ИначеЕсли Элемент.ТекущийЭлемент.Имя = "УслугиУпаковочныйЛист" Тогда
		//	ЗаполнитьСписокВыбораУпаковочныхЛистов(ТекущаяСтрока.КодСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНомерГТДПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекущаяСтрока.СоздатьНомерГТД = НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтранаПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекущаяСтрока.ЗагружаемаяСтранаПроисхождения = "";
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ПоместитьВыделенныеСтрокиВБуферОбменаСервер(Элементы.Услуги.ВыделенныеСтроки, Объект.Услуги);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ПолучитьСтрокиИзБуфераОбменаСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		//КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	Объект.Услуги.Очистить();
	
	ЗаполнитьТаблицуНоменклатурыИТочек();
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаСтруктурнаяЕдиница", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	
	НомераКолонок.Вставить("КолонкаШтрихкод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаКод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	Если ЗагружатьКоличество Тогда
		НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		Если ВариантРасчетаНДС <> Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			НомераКолонок.Вставить("КолонкаСуммаНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			Если НЕ ЦенаВключаетНДС Тогда
				НомераКолонок.Вставить("КолонкаСуммаСНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
				НомерКолонки = НомерКолонки +1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.СтруктурнаяЕдиница = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСтруктурнаяЕдиница")).Текст;
			НоваяСтрока.Штрихкод = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
			НоваяСтрока.Код = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст;
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
			//Если ИспользоватьХарактеристикиНоменклатуры Тогда
			//	НоваяСтрока.ХарактеристикаНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаХарактеристика")).Текст;
			//КонецЕсли;
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗагружатьКоличество Тогда
			Попытка
				НоваяСтрока.Количество = Число(СтрЗаменить(Количество, " ", "")); 
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Цена = Число(СтрЗаменить(Цена, " ", ""));
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Сумма = Число(СтрЗаменить(Сумма, " ", "")); 
			Исключение
				
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаНДС = Число(СтрЗаменить(СуммаНДС, " ", "")); 
			Исключение
				
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаСНДС = Число(СтрЗаменить(СуммаСНДС, " ", ""));
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
		
		СтрокаПоискаКод            = ВРег(СтрЗаменить(НоваяСтрока.Код, " ", "")); 
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")); 
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		СтрокаПоискаХарактеристика = ВРег(СтрЗаменить(НоваяСтрока.ХарактеристикаНаименование, " ", ""));
		
		Если ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			ШтрихКодБезПробелов = СтрЗаменить(НоваяСтрока.Штрихкод, " ", "");
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", ШтрихКодБезПробелов));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПоиск",
			СтрокаПоискаКод,
			СтрокаПоискаНоменклатура));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПолноеПоиск",
				СтрокаПоискаКод,
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", 
					СтрокаПоискаКод));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееУслуги = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееУслуги.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск",
			СтрокаПоискаАртикул,
			СтрокаПоискаНоменклатура));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", 
					СтрокаПоискаАртикул));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НаименованиеПоставщикаПоиск", 
						СтрокаПоискаАртикул, 
						СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
							СтрокаПоискаАртикул));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееУслуги = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееУслуги.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск",
			СтрокаПоискаАртикул));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
				СтрокаПоискаАртикул));
			КонецЕсли;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееУслуги = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееУслуги.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",
			СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоставщикаПоиск", 
					СтрокаПоискаНоменклатура));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПартнераEDIПоиск", 
						СтрокаПоискаНоменклатура));
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееУслуги = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееУслуги.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,);
				КонецЕсли;
			КонецЦикла;
			
			
			
		КонецЕсли;
		
		
		
		// Заполнение тч Услуги.
		НоваяСтрокаУслуги = Объект.Услуги.Добавить();
		
		НоваяСтрокаУслуги.СтруктурнаяЕдиница = НайтиТочку(НоваяСтрока.СтруктурнаяЕдиница);
		
		НоваяСтрокаУслуги.ЗагружаемаяНоменклатура    = НоваяСтрока.НоменклатураНаименование;
		НоваяСтрокаУслуги.ЗагружаемаяСтруктурнаяЕдиница  = НоваяСтрока.СтруктурнаяЕдиница;
		НоваяСтрокаУслуги.ЗагружаемыйАртикул         = НоваяСтрока.Артикул;
		НоваяСтрокаУслуги.ЗагружаемыйШтрихкод        = НоваяСтрока.Штрихкод;
		НоваяСтрокаУслуги.ЗагружаемыйКод             = НоваяСтрока.Код;
		
		Если ЗагружатьКоличество Тогда
			НоваяСтрокаУслуги.Количество        = НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрокаУслуги.КодСтроки                  = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, НоваяСтрока,,"Артикул,СтруктурнаяЕдиница");
		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
		
		Если МассивПодобраннойНоменклатуры.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, МассивПодобраннойНоменклатуры.Получить(0));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПартнерСтавкаНДС) Тогда
			НоваяСтрокаУслуги.СтавкаНДС = ПартнерСтавкаНДС;
		ИначеЕсли НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрокаУслуги.СтавкаНДС = НайденнаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) Тогда
			ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И Не ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Сумма) Тогда		
			НоваяСтрокаУслуги.Количество = НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Цена;
			ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Сумма) Тогда		
			НоваяСтрокаУслуги.Цена = НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Количество;
			ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);	
		ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И  НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.ЦенаПоставщика) Тогда
			
			
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
				НоваяСтрокаУслуги.Цена = НайденнаяСтрока.ЦенаПоставщика;
			Иначе		
				
				
				
				ЦенаБезНДС = (НайденнаяСтрока.ЦенаПоставщика / (100 + УчетНДС.ПолучитьСтавкуНДС(НоваяСтрокаУслуги.СтавкаНДС))) * 100;
				
				НоваяСтрокаУслуги.Цена = ЦенаБезНДС;
				
				
			КонецЕсли;
			
			ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
			
			
		КонецЕсли;
		
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ТаблицаНоменклатуры.Очистить();
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * (СтрокаТабличнойЧасти.Количество );
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, мВариантРасчета) Экспорт
	
	УчитыватьНДС 		= Истина;
	СуммаВключаетНДС 	= (мВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	СтрокаТабличнойЧасти.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)),2);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыИТочек()
	
	ТаблицаНоменклатуры.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	СпрНоменклатура.Ссылка КАК Номенклатура,
	              |	СпрНоменклатура.Код,
	              |	СпрНоменклатура.Наименование,
	              |	СпрНоменклатура.Артикул,
	              |	НоменклатураПоставщиков.Владелец КАК Поставщик,
	              |	НоменклатураПоставщиков.Наименование КАК НаименованиеПоставщика,
	              |	НоменклатураПоставщиков.Код КАК КодПоставщика,
	              |	НоменклатураПоставщиков.Артикул КАК АртикулПоставщика,
	              |	ШтриховыеКоды.ШтрихКод,
	              |	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнераEDI,
	              |	КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнераEDI,
	              |	СпрНоменклатура.НаименованиеПолное,
	              |	ЦеныПоставщиковСрезПоследних.Цена КАК ЦенаПоставщика,
	              |	СпрНоменклатура.СтавкаНДС
	              |ИЗ
	              |	Справочник.Номенклатура КАК СпрНоменклатура
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	              |		ПО СпрНоменклатура.Ссылка = ШтриховыеКоды.Номенклатура
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК ЦеныПоставщиковСрезПоследних
	              |			ПО НоменклатураПоставщиков.Владелец = ЦеныПоставщиковСрезПоследних.Поставщик
	              |				И НоменклатураПоставщиков.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	              |		ПО (НоменклатураПоставщиков.Номенклатура = СпрНоменклатура.Ссылка)
	              |			И (НоменклатураПоставщиков.Владелец = &Контрагент
	              |				ИЛИ &ВсеКонтрагенты)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	              |		ПО СпрНоменклатура.Ссылка = КонтурEDI_СоответствияТоваров.Номенклатура
	              |			И (КонтурEDI_СоответствияТоваров.Контрагент = &Контрагент
	              |				ИЛИ &ВсеКонтрагенты)
	              |ГДЕ
	              |	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СтруктурныеЕдиницы.Наименование,
	              |	СтруктурныеЕдиницы.НомерТочки,
	              |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	              |	"""" КАК НомерТочкиСтрокой
	              |ИЗ
	              |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы"; 
	
	Запрос.УстановитьПараметр("Контрагент",Партнер);
	Запрос.УстановитьПараметр("ВсеКонтрагенты",Не ЗначениеЗаполнено(Партнер));
	Результат = Запрос.ВыполнитьПакет();
	
	
	ТаблицаНоменклатуры.Загрузить(Результат[0].Выгрузить());
	ТаблицаТочек.Загрузить(Результат[1].Выгрузить());
	
	Для каждого СтрокаТочек Из ТаблицаТочек Цикл
		
		СтрокаТочек.НомерТочкиСтрокой = Формат(СтрокаТочек.НомерТочки,"ЧГ=0");
		//СтрокаТочек.id_TTСтрокой = Формат(СтрокаТочек.id_TT,"ЧГ=0");
		
	КонецЦикла; 
	
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код = ВРег(СтрЗаменить(ТекСтрока.Код, " ", ""));
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		ТекСтрока.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПолное, " ", ""));
		ТекСтрока.НаименованиеПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПоставщика, " ", ""));
		ТекСтрока.КодПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.КодПоставщика, " ", ""));
		ТекСтрока.АртикулПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.АртикулПоставщика, " ", ""));
		ТекСтрока.ШтрихКод = ВРег(СтрЗаменить(ТекСтрока.ШтрихКод, " ", ""));
		ТекСтрока.КодТовараПартнераEDIПоиск = ВРег(СтрЗаменить(ТекСтрока.КодТовараПартнераEDI, " ", ""));
		ТекСтрока.НаименованиеПартнераEDIПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПартнераEDI, " ", ""));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанныхСписок");
	ТабличныйДокумент.Очистить();
	
	ОбластьСтруктурнаяЕдиница = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СтруктурнаяЕдиница");
	ТабличныйДокумент.Присоединить(ОбластьСтруктурнаяЕдиница);
	
	ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
	ТабличныйДокумент.Присоединить(ОбластьУслуги);
	ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
	ТабличныйДокумент.Присоединить(ОбластьУслуги);
	ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
	ТабличныйДокумент.Присоединить(ОбластьУслуги);
	ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	
	ОбластьУслуги.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура'");
	
	ТабличныйДокумент.Присоединить(ОбластьУслуги);
	
	Если ЗагружатьКоличество Тогда
		ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьУслуги);
	КонецЕсли;
	
	Если ЗагружатьЦены Тогда
		ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьУслуги);
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		
		ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьУслуги);
		
		Если ВариантРасчетаНДС <> Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаНДС");
			ТабличныйДокумент.Присоединить(ОбластьУслуги);
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
				ОбластьУслуги = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаСНДС");
				ТабличныйДокумент.Присоединить(ОбластьУслуги);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

Процедура ИнициализироватьТабличныйДокументФорматаТаблица()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанныхТаблица");
	ТабличныйДокументТаблица.Очистить();
	
	ТабличныйДокументТаблица.Вывести(МакетЗаполненияПоВнешнемуИсточнику);		
	ТабличныйДокументТаблица.ФиксацияСверху = 2;
	ТабличныйДокументТаблица.ФиксацияСлева = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели)
	
	СтруктураПересчетаСуммы = Новый Структура;
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	СписокВыбораНоменклатура  = Элементы.УслугиНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		
		Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
			СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
		КонецЕсли;
		
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПоместитьУслугиВХранилище()
	
	Услуги = Объект.Услуги.Выгрузить();
	
	УслугиДляПереноса = Услуги.СкопироватьКолонки();
	//УслугиДляПереноса.Колонки.Добавить("НоменклатураНабора", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//УслугиДляПереноса.Колонки.Добавить("ХарактеристикаНабора", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//УслугиДляПереноса.Колонки.Добавить("ИндексНабора", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10,0));
	
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из Услуги Цикл
		
		
		ЗаполнитьЗначенияСвойств(УслугиДляПереноса.Добавить(), СтрокаТЧ)
		
		
	КонецЦикла;
	
	УслугиДляПереноса.Свернуть("СтруктурнаяЕдиница,Номенклатура,Цена,СтавкаНДС,Комментарий","Количество,Сумма,СуммаНДС");
	
	Возврат ПоместитьВоВременноеХранилище(УслугиДляПереноса);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C5").Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
	
	//Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
	//	СопоставитьДанныеТабличногоДокументаСДаннымиИБФорматТаблицы();
	//Иначе
		СопоставитьДанныеТабличногоДокументаСДаннымиИБ();
	//КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиУслуги(Команда)
	
	ОчиститьСообщения();
	//СоздатьНомераГТД = Ложь;
	
	ПеренестиУслугиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиУслугиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Отмена" Тогда
		Отказ = Истина;
		Возврат
	ИначеЕсли ОтветНаВопрос = "Создать" Тогда
		СоздатьНомераГТД = Истина;
	КонецЕсли;
	ПеренестиУслугиФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиУслугиФрагмент()
	
	Перем СтруктураВыбора;
	
	Если ПроверитьЗаполнение() Тогда
		Закрыть();
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьУслугиВХранилище());
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
		КонецЕсли;
		ОповеститьОВыборе(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Услуги.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Услуги.Количество()-КоличествоТоваровДоВставки;
	ОповеститьПользователяОВставкеСтрокКлиент(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ВозможноКопированиеСтрокКлиент(Элементы.Услуги.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОповеститьПользователяОКопированииСтрокКлиент(Элементы.Услуги.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс
&НаКлиенте
// Проверяет заполненность реквизитов, необходимых для копирования
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции  - Элемент табличной части, которую надо проверить на заполненность
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены.
//
Функция ВозможноКопированиеСтрокКлиент(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
// Вызывается в формах документов и справочников при копировании строк.
// 
// Параметры:
//     КоличествоВыделенных - Число - количество выделенных строк табличной части.
//
Процедура ОповеститьПользователяОКопированииСтрокКлиент(КоличествоВыделенных) Экспорт
	
	ТекстСообщения = НСтр("ru='В буфер обмена скопировано строк (%КоличествоВыделенных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВыделенных%", КоличествоВыделенных);
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры
&НаКлиенте
// Вызывается в формах документов и справочников при вставке строк.
// 
// Параметры:
//     КоличествоВставленных - Число - количество вставленных строк в табличную часть.
//
Процедура ОповеститьПользователяОВставкеСтрокКлиент(КоличествоВставленных) Экспорт
	
	ТекстСообщения = НСтр("ru='Из буфера обмена вставлено строк (%КоличествоВставленных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВставленных%", КоличествоВставленных);
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс
&НаСервере
// Помещает данные в буфер обмена
//
// Параметры:
//   ВыделенныеСтроки - Массив - Массив идентификаторов выделенных строк
//   ТабЧасть -ТабличнаяЧасть - Табличная часть объекта с копируемыми строками.
//
Процедура ПоместитьВыделенныеСтрокиВБуферОбменаСервер(ВыделенныеСтроки, ТабЧасть) Экспорт
	ТаблицаБуфераОбмена = ИнициализироватьТаблицуБуфераОбменаСервер();
	
	ВыделенныеСтрокиТЧ = Новый Массив;
	Если ВыделенныеСтроки <> Неопределено Тогда
		
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТабЧасть.НайтиПоИдентификатору(ТекСтрока);
			ВыделенныеСтрокиТЧ.Добавить(СтрокаТаблицы);
		КонецЦикла;
		
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделенныеСтрокиТЧ) Тогда
		Для каждого СтрокаТаблицы Из ВыделенныеСтрокиТЧ Цикл
			
			НоваяСтрока = ТаблицаБуфераОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ТабЧасть Цикл
			
			НоваяСтрока = ТаблицаБуфераОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
	СкопироватьТаблицуВБуферОбменаСервер(ТаблицаБуфераОбмена, "Строки");
	
КонецПроцедуры 
&НаСервере
// Получает данные из буфера обмена.
//
// Параметры:
//   ПараметрыОтбора - Структура - Параметры отбора строк
//
// Возвращаемое значение:
//   ТаблицаЗначений - Строки, полученные из буфера обмена
//
Функция ПолучитьСтрокиИзБуфераОбменаСервер(ПараметрыОтбора = Неопределено) Экспорт
	
	ДанныеИзБуфераОбмена = СтрокиИзБуфераОбмена();
	Если ДанныеИзБуфераОбмена.Источник = "Строки" Тогда
		СтрокиДляВставки = ДанныеИзБуфераОбмена.Данные;
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат СтрокиДляВставки
КонецФункции 
&НаСервере
// Помещает данные в буфер обмена.
//
// Параметры:
//   ЯчейкиБюджета - Массив - массив с копируемыми ячейками.
//
Процедура ПоместитьВыделенныеЯчейкиБюджетаВБуферОбменаСервер(ЯчейкиБюджета) Экспорт
	СкопироватьТаблицуВБуферОбменаСервер(ЯчейкиБюджета, "ЯчейкиБюджета");
КонецПроцедуры 
&НаСервере
// Получает данные из буфера обмена.
//
// Возвращаемое значение:
//   Массив - массив с вставляемыми ячейками.
//
Функция ПолучитьЯчейкиБюджетаИзБуфераОбменаСервер() Экспорт
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	
	Если ДанныеИзБуфераОбмена = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ДанныеИзБуфераОбмена.Источник <> "ЯчейкиБюджета" Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ДанныеИзБуфераОбмена.Данные;
	
КонецФункции
&НаСервере
Функция СтрокиИзБуфераОбмена() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Источник", Неопределено);
	Результат.Вставить("Данные", Неопределено);
	
	Если ПустойБуферОбмена() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБуферОбмена = БуферОбмена;
	Результат.Источник = ТекущийБуферОбмена.Источник;
	Результат.Данные = ПолучитьИзВременногоХранилища(ТекущийБуферОбмена.Данные);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПустойБуферОбмена(Источник = Неопределено) Экспорт
	
	ТекущийБуферОбмена = БуферОбмена;
	ИсточникСовпадает = Истина;
	Если Источник <> Неопределено Тогда
		ИсточникСовпадает = (Источник = ТекущийБуферОбмена.Источник);
	КонецЕсли;
	Возврат (Не ИсточникСовпадает Или Не ЗначениеЗаполнено(ТекущийБуферОбмена.Данные));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ИнициализироватьТаблицуБуфераОбменаСервер()
	
	ТаблицаСтрок = Новый ТаблицаЗначений();
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
	ТаблицаСтрок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСтрок.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаСтрок.Колонки.Добавить("Количество", ОписаниеТиповЧисло15_3);
	ТаблицаСтрок.Колонки.Добавить("Цена", ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("Сумма", ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаБезНДС", ОписаниеТиповЧисло15_2);
	
	Возврат ТаблицаСтрок;
	
КонецФункции 
&НаСервере
Процедура СкопироватьТаблицуВБуферОбменаСервер(Таблица, Источник = Неопределено)
	ТекущийБуферОбмена = БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(Таблица, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить("Источник", Источник);
	СтруктураБуфераОбмена.Вставить("Данные", ДанныеВХранилище);
	
	БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	УслугиНоменклатураПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииСервер()
	
	СтрокаТабличнойЧасти = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ПартнерСтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПартнерСтавкаНДС;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС;
	КонецЕсли;
	ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчетТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчетТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ПересчетТекущейСтроки();
КонецПроцедуры

&НаСервере
Процедура ПересчетТекущейСтроки()
	СтрокаТабличнойЧасти = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры	
#КонецОбласти



Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБФорматТаблицы()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	Объект.Услуги.Очистить();
	
	ЗаполнитьТаблицуНоменклатурыИТочек();
	
	
	НомерПервойКолонки = 2;
	НомерПервойСтроки = 3;
	
	НомерКолонки = НомерПервойКолонки;
	НомерСтроки = НомерПервойСтроки;
	
	ТЗНоменклатуры = Новый ТаблицаЗначений;
	ТЗНоменклатуры.Колонки.Добавить("Номенклатура");
	ТЗНоменклатуры.Колонки.Добавить("НоменклатураПоиск");
	ТЗНоменклатуры.Колонки.Добавить("Цена");
	ТЗНоменклатуры.Колонки.Добавить("ИндексНайденнойСтрокиКэша");
	ТЗТочек = Новый ТаблицаЗначений;
	ТЗТочек.Колонки.Добавить("Точка");
	ТЗТочек.Колонки.Добавить("ТочкаПоиск");
	
	Пока Истина Цикл
		
		
		ИмяНоменклатуры = ТабличныйДокументТаблица.Область(1, НомерКолонки).Текст;
		
		
		Если ПустаяСтрока(ИмяНоменклатуры) Тогда
			
			
			Прервать;
			
			
		КонецЕсли; 
		
		
		НС = ТЗНоменклатуры.Добавить();
		НС.НоменклатураПоиск = ИмяНоменклатуры;
		Попытка
			НС.Цена = Число(ТабличныйДокументТаблица.Область(2, НомерКолонки).Текст);
		Исключение
			НС.Цена = 0;
		КонецПопытки;	
		
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(ИмяНоменклатуры, " ", ""));
				
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",СтрокаПоискаНоменклатура));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
			СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоставщикаПоиск", 
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПартнераEDIПоиск", 
					СтрокаПоискаНоменклатура));
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НС.Номенклатура = НайденнаяСтрока.Номенклатура;
			НС.ИндексНайденнойСтрокиКэша = ТаблицаНоменклатуры.Индекс(НайденнаяСтрока);
		КонецЕсли;	
		
		НомерКолонки = НомерКолонки + 1; 
		
	КонецЦикла;
	
	Пока Истина Цикл
		
		
		ИмяТочки = ТабличныйДокументТаблица.Область(НомерСтроки,1).Текст;
		
		
		Если ПустаяСтрока(ИмяТочки) Тогда
			
			
			Прервать;
			
			
		КонецЕсли; 
		НомерСтроки = НомерСтроки + 1; 
		
		НС = ТЗТочек.Добавить();
		НС.ТочкаПоиск = ИмяТочки;
		НС.Точка = НайтиТочку(ИмяТочки);
	КонецЦикла;
	
	Для НомерСтроки = 0 По ТЗТочек.Количество() - 1 Цикл
		ИмяТочки = ТЗТочек[НомерСтроки].ТочкаПоиск;
		Точка = ТЗТочек[НомерСтроки].Точка;
		Для НомерКолонки = 0 По ТЗНоменклатуры.Количество()-1 Цикл
			Попытка
				Количество = Число(ТабличныйДокументТаблица.Область(НомерСтроки+НомерПервойСтроки, НомерКолонки+НомерПервойКолонки).Текст);
			Исключение
				Количество = 0;
			КонецПопытки;
			
			ИмяНоменклатуры = ТЗНоменклатуры[НомерКолонки].НоменклатураПоиск;
			Номенклатура = ТЗНоменклатуры[НомерКолонки].Номенклатура;
			ЦенаНоменклатуры = ТЗНоменклатуры[НомерКолонки].Цена;
			Если ЗначениеЗаполнено(Количество) Тогда
				// Заполнение тч Услуги.
				НоваяСтрокаУслуги = Объект.Услуги.Добавить();
				
				НоваяСтрокаУслуги.СтруктурнаяЕдиница = Точка;
								
				НоваяСтрокаУслуги.ЗагружаемаяНоменклатура    = ИмяНоменклатуры;
				НоваяСтрокаУслуги.ЗагружаемаяСтруктурнаяЕдиница  = ИмяТочки;
								
				НоваяСтрокаУслуги.Количество        = Количество;
				
				НоваяСтрокаУслуги.Цена = ЦенаНоменклатуры;
												
				НоваяСтрокаУслуги.Номенклатура = ТЗНоменклатуры[НомерКолонки].Номенклатура;
				Если ЗначениеЗаполнено(НоваяСтрокаУслуги.Номенклатура) Тогда
					НайденнаяСтрока = ТаблицаНоменклатуры[ТЗНоменклатуры[НомерКолонки].ИндексНайденнойСтрокиКэша]
				КонецЕсли;	
					
							
				Если ЗначениеЗаполнено(ПартнерСтавкаНДС) Тогда
					НоваяСтрокаУслуги.СтавкаНДС = ПартнерСтавкаНДС;
				ИначеЕсли НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрокаУслуги.СтавкаНДС = НайденнаяСтрока.СтавкаНДС;
				КонецЕсли;
				
				
				
				Если ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) Тогда
					ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
				ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И Не ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Сумма) Тогда		
					НоваяСтрокаУслуги.Количество = НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Цена;
					ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
				ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Количество) И ЗначениеЗаполнено(НоваяСтрокаУслуги.Сумма) Тогда		
					НоваяСтрокаУслуги.Цена = НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Количество;
					ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);	
				ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрокаУслуги.Цена) И  НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.ЦенаПоставщика) Тогда
					
					
					Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
						НоваяСтрокаУслуги.Цена = НайденнаяСтрока.ЦенаПоставщика;
					Иначе		
						
						
						
						ЦенаБезНДС = (НайденнаяСтрока.ЦенаПоставщика / (100 + УчетНДС.ПолучитьСтавкуНДС(НоваяСтрокаУслуги.СтавкаНДС))) * 100;
						
						НоваяСтрокаУслуги.Цена = ЦенаБезНДС;
						
						
					КонецЕсли;
					
					ПосчитатьСуммуСтрокиТЧ(НоваяСтрокаУслуги);
					
					
				КонецЕсли;
				
				
				//НомерСтроки = НомерСтроки + 1;
				//СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
				//
				//Попытка
				//	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				//	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				//	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				//	Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
				//Исключение
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				//КонецПопытки;
				
				
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	 
	
	
	
	
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ТаблицаНоменклатуры.Очистить();
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

Функция НайтиТочку(ИмяТочки)
	Точка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ТТ = РеквизитФормыВЗначение("ТаблицаТочек");
	СтрокаТочки = ТТ.Найти(ИмяТочки);
	Если СтрокаТочки <> Неопределено Тогда
		Точка = СтрокаТочки.СтруктурнаяЕдиница;
	Иначе
		НомерВИмени="";
		Для й=0 По СтрДлина(ИмяТочки)-1 Цикл
			Симв = Сред(ИмяТочки,й+1,1);
			Если Найти("0123456789",Симв) > 0 Тогда
				НомерВИмени = НомерВИмени + Симв;
			Иначе
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если ЗначениеЗаполнено(НомерВИмени) Тогда
			СтрокаТочки = ТТ.Найти(НомерВИмени);
			Если СтрокаТочки <> Неопределено Тогда
				Точка = СтрокаТочки.СтруктурнаяЕдиница;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	Возврат Точка;
КонецФункции	

&НаСервере
Процедура КонвертироватьТаблицуВСписокНаСервере()
	НомерПервойКолонки = 2;
	НомерПервойСтроки = 3;
	
	НомерКолонки = НомерПервойКолонки;
	НомерСтроки = НомерПервойСтроки;
	
	ТЗНоменклатуры = Новый ТаблицаЗначений;
	ТЗНоменклатуры.Колонки.Добавить("НоменклатураПоиск");
	ТЗНоменклатуры.Колонки.Добавить("Цена");
	
	ТЗТочек = Новый ТаблицаЗначений;
	ТЗТочек.Колонки.Добавить("ТочкаПоиск");
	
	Пока Истина Цикл
		
		
		ИмяНоменклатуры = ТабличныйДокументТаблица.Область(1, НомерКолонки).Текст;
		
		
		Если ПустаяСтрока(ИмяНоменклатуры) Тогда
			
			
			Прервать;
			
			
		КонецЕсли; 
		
		
		НС = ТЗНоменклатуры.Добавить();
		
		НС.НоменклатураПоиск = ИмяНоменклатуры;
		НС.Цена = ТабличныйДокументТаблица.Область(2, НомерКолонки).Текст;
								
		НомерКолонки = НомерКолонки + 1; 
		
	КонецЦикла;
	
	Пока Истина Цикл
		
		
		ИмяТочки = ТабличныйДокументТаблица.Область(НомерСтроки,1).Текст;
		
		
		Если ПустаяСтрока(ИмяТочки) Тогда
			
			
			Прервать;
			
			
		КонецЕсли; 
		НомерСтроки = НомерСтроки + 1; 
		
		НС = ТЗТочек.Добавить();
		
		НС.ТочкаПоиск = ИмяТочки;
		
	КонецЦикла;
	
	ИнициализироватьТабличныйДокумент();
	НомерСтрокиТаблицы = 2;
	Для НомерСтроки = 0 По ТЗТочек.Количество() - 1 Цикл
		ИмяТочки = ТЗТочек[НомерСтроки].ТочкаПоиск;
		Для НомерКолонки = 0 По ТЗНоменклатуры.Количество()-1 Цикл
			
			Количество = ТабличныйДокументТаблица.Область(НомерСтроки+НомерПервойСтроки, НомерКолонки+НомерПервойКолонки).Текст;
			
			Если СокрЛП(Количество) = "" Тогда
				Продолжить;
			КонецЕсли;	
			
			ИмяНоменклатуры = ТЗНоменклатуры[НомерКолонки].НоменклатураПоиск;
			ЦенаНоменклатуры = ТЗНоменклатуры[НомерКолонки].Цена;
			ТабличныйДокумент.Область(НомерСтрокиТаблицы,1,НомерСтрокиТаблицы,1).Текст = ИмяТочки;
			ТабличныйДокумент.Область(НомерСтрокиТаблицы,5,НомерСтрокиТаблицы,5).Текст = ИмяНоменклатуры;
			ТабличныйДокумент.Область(НомерСтрокиТаблицы,6,НомерСтрокиТаблицы,6).Текст = Количество;
			ТабличныйДокумент.Область(НомерСтрокиТаблицы,7,НомерСтрокиТаблицы,7).Текст = ЦенаНоменклатуры;
			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;		
		КонецЦикла;
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьТаблицуВСписок(Команда)
	КонвертироватьТаблицуВСписокНаСервере();
	Элементы.СтраницыФорматов.ТекущаяСтраница = Элементы.СтраницаФорматСписок;
КонецПроцедуры
