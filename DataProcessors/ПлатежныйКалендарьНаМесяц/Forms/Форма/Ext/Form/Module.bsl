
&НаСервереБезКонтекста
Функция ПолучитьПоследнийРабочийДень(ДатаПолучения = Неопределено)
	
	Запрос = Новый Запрос();
	Если НЕ ЗначениеЗаполнено(ДатаПолучения) Тогда
		Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(ТекущаяДата() - 86400));
	Иначе	
		Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(ДатаПолучения - 86400));
	КонецЕсли;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаКалендаря
	               |	И РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаКалендаря;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура СчитатьДанныеПоЧекамСервер_()
	
	ДатаНач = ПолучитьПоследнийРабочийДень();
	ДатаКон = ТекущаяДата() - 86400;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("НомерМагазина", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("Безнал", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Инкассация", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "
				|	SELECT VZ_Zapros.ShopNo,
				|	VZ_Zapros.data,
				|	SUM(VZ_Zapros.Beznal) as Beznal,
				|	SUM(VZ_Zapros.Inkass) as Inkass
				|FROM (SELECT Ch.ShopNo, CAST(CONVERT(date, Ch.CloseDate) as datetime) as data,
				|				  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.SummBank ELSE 0 END - CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummBank ELSE 0 END) as Beznal,
				|				  SUM(0) as Inkass
				|				FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
				|				LEFT OUTER JOIN (SELECT Chl.CheckUID,
				|				  				SUM(CASE WHEN Chl.OperationType_cl IN (1, 3, 202, 203) and Chl.BaseSum <> 0 THEN Chl.BaseSum - Chl.BasePrice * Chl.Quantity ELSE 0 END * (-1)) as SkidkaKopeek
				|				  				FROM [SMS_IZBENKA].[dbo].[Checkline] as Chl (nolock) where Chl.date_ch between " + ВнешниеДанные.ФорматПоля(ДатаНач, Истина) + " and " + ВнешниеДанные.ФорматПоля(ДатаКон, Истина) + "
				|				
				|									GROUP BY Chl.CheckUID) as Chl
				|				  				ON Ch.CheckUID = Chl.CheckUID
				|				where Ch.CloseDate between " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНач)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаКон)) + " and Ch.OperationType IN (1, 3, 201, 211, 202, 203) 
				|				
				|				GROUP BY Ch.ShopNo, CAST(CONVERT(date, Ch.CloseDate) as datetime)
				|				
				|UNION ALL
                |
				|SELECT
				|	dbo_Pokazat_800_kod.ShopNo,
				|	dbo_Pokazat_800_kod.дата, 0,
				|					dbo_Pokazat_800_kod.Inkass
				|				FROM
				|					SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
				|				WHERE
				|					dbo_Pokazat_800_kod.дата between " + ВнешниеДанные.ФорматПоля(ДатаНач, Истина) + " and " + ВнешниеДанные.ФорматПоля(ДатаКон, Истина) + "
				|					
				|UNION ALL
                |
				|SELECT
				|	dbo_Checks.ShopNo as ShopNo,
				|	CAST(CONVERT(date, dbo_Checks.CloseDate) as datetime) as data,			
				|				
				|				
				|				
				//+++АК ILIK 2018.06.25 ИП-00018883
				|					  SUM(ISNULL(CASE
				|										WHEN dbo_Checks.SummBank > 0
				|											 THEN dbo_Checks.SummBank
				|										ELSE 0
				|								  END, 0) - CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 and ISNULL(dbo_Checks.SummBank, 0) < 0 THEN dbo_Checks.SummBank * (-1) ELSE 0 END) as Beznal,
				//---АК ILIK
				|					  0
				|				FROM
				|					  SMS_Union.dbo.Checks as dbo_Checks with (index(IX_Checks_1),nolock)
				|				WHERE
				|					dbo_Checks.CloseDate between " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаНач)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаКон)) + "
				|					  
				|				GROUP BY
				|					  CAST(CONVERT(date, dbo_Checks.CloseDate) as datetime),
				|					  dbo_Checks.ShopNo) as VZ_Zapros
				|					  
				|GROUP BY VZ_Zapros.ShopNo,
				|	VZ_Zapros.data";
				
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.НомерМагазина 			= Rs.Fields("ShopNo").Value;
			СтрокаДоб.Дата 		= Rs.Fields("data").Value;
			СтрокаДоб.Безнал 		= Rs.Fields("Beznal").Value;   
			СтрокаДоб.Инкассация 			= Rs.Fields("Inkass").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДанные);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102"));
	Запрос.УстановитьПараметр("Фальшивка", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39311"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Дата,
	               |	Таб.Безнал,
	               |	Таб.Инкассация,
	               |	Таб.НомерМагазина КАК НомерМагазина
	               |ПОМЕСТИТЬ ВТ_Данные_Скл
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.Дата,
	               |	Таб.Безнал,
	               |	Таб.Инкассация,
	               |	СтруктурныеЕдиницы.Ссылка КАК Магазин
	               |ПОМЕСТИТЬ ВТ_Данные_Врем
	               |ИЗ
	               |	ВТ_Данные_Скл КАК Таб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО Таб.НомерМагазина = СтруктурныеЕдиницы.НомерТочки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЗ_Суммы.Дата,
	               |	0,
	               |	ВЗ_Суммы.СуммаДокумента,
	               |	ВЗ_Суммы.ТТ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РасходИзКассы.СтруктурнаяЕдиница КАК ТТ,
	               |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК Дата,
	               |		РасходИзКассы.СуммаДокумента КАК СуммаДокумента
	               |	ИЗ
	               |		Документ.РасходИзКассы КАК РасходИзКассы
	               |	ГДЕ
	               |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	               |		И РасходИзКассы.Проведен = ИСТИНА
	               |		И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		РасходИзКассы.СтруктурнаяЕдиница,
	               |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ),
	               |		РасходИзКассы.СуммаДокумента
	               |	ИЗ
	               |		Документ.РасходИзКассы КАК РасходИзКассы
	               |	ГДЕ
	               |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	               |		И РасходИзКассы.Проведен = ИСТИНА
	               |		И РасходИзКассы.СубконтоДт2 = &Фальшивка) КАК ВЗ_Суммы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные_Врем.Дата,
	               |	СУММА(ВТ_Данные_Врем.Безнал) КАК Безнал,
	               |	СУММА(ВТ_Данные_Врем.Инкассация) КАК Инкассация,
	               |	ВТ_Данные_Врем.Магазин
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	ВТ_Данные_Врем КАК ВТ_Данные_Врем
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные_Врем.Дата,
	               |	ВТ_Данные_Врем.Магазин
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Дата,
	               |	ВТ_Данные.Безнал,
	               |	ВТ_Данные.Инкассация,
	               |	ВТ_Данные.Магазин,
	               |	МАКСИМУМ(ЦФОСтруктурныхЕдиниц.Период) КАК МаксДатаПоРегистру
	               |ПОМЕСТИТЬ ВТ_ДанныеМаксДата
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц КАК ЦФОСтруктурныхЕдиниц
	               |		ПО (ВТ_Данные.Магазин = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
	               |				И ВТ_Данные.Дата >= ЦФОСтруктурныхЕдиниц.Период)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные.Дата,
	               |	ВТ_Данные.Безнал,
	               |	ВТ_Данные.Инкассация,
	               |	ВТ_Данные.Магазин
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВТ_ДанныеМаксДата.Безнал) КАК Безнал,
	               |	СУММА(ВТ_ДанныеМаксДата.Инкассация) КАК Инкассация,
	               |	ЦФОСтруктурныхЕдиниц.Организация
	               |ИЗ
	               |	ВТ_ДанныеМаксДата КАК ВТ_ДанныеМаксДата
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц КАК ЦФОСтруктурныхЕдиниц
	               |		ПО ВТ_ДанныеМаксДата.Магазин = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
	               |			И ВТ_ДанныеМаксДата.МаксДатаПоРегистру = ЦФОСтруктурныхЕдиниц.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЦФОСтруктурныхЕдиниц.Организация";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТаб = ПредварительныеДанные.НайтиСтроки(Новый Структура("Организация", Выборка.Организация));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].Эквайринг = Выборка.Безнал;
			СтрокиТаб[0].Инкассация = Выборка.Инкассация;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаДанные Из ПредварительныеДанные Цикл
		СтрокаДанные.Эквайринг = СтрокаДанные.Эквайринг * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СчитатьДанныеПоЧекамСервер()
	
	//чтение из чеков что-то себя не очень хорошо показало, поэтому переделал на чтение среднего
	
	ДатаНач = ПолучитьПоследнийРабочийДень();
	ДатаКон = ТекущаяДата() - 86400;
	КолВоДней = 0;
	Пока ДатаНач <= ДатаКон Цикл
		КолВоДней = КолВоДней + 1;
		ДатаНач = ДатаНач + 86400;
	КонецЦикла;	
	
	ТабСредниеИнкассЭквайринг = ПолучитьТаблицуСредних();
	
	Для Каждого СтрокаСреднее Из ТабСредниеИнкассЭквайринг Цикл
		СтрокиТаб = ПредварительныеДанные.НайтиСтроки(Новый Структура("Организация", СтрокаСреднее.Организация));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].Эквайринг = СтрокаСреднее.Эквайринг * КолВоДней;
			СтрокиТаб[0].Инкассация = СтрокаСреднее.Инкассация * КолВоДней;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаДанные Из ПредварительныеДанные Цикл
		СтрокаДанные.Эквайринг = СтрокаДанные.Эквайринг * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДанныеПоЧекам(Команда)
	
	СчитатьДанныеПоЧекамСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ФормироватьДоДаты = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), 1));
	МесяцСтрокой = Формат(Объект.ФормироватьДоДаты, "ДФ='MMMM yyyy'");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ОргВкус", Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	Запрос.УстановитьПараметр("ОргЛуг", Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.КомментарийКЭквайрингуИИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Автор,
	               |	ВЗ_Орг.Ссылка КАК Организация
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Организации.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.Организации КАК Организации
	               |	ГДЕ
	               |		Организации.Ссылка В (&ОргВкус, &ОргЛуг)) КАК ВЗ_Орг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |		ПО ВЗ_Орг.Ссылка = СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |			И (СлужебныеДанныеДляПлатежногоКалендаряМесяц.Период = &Период)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ПредварительныеДанные.Добавить();
		СтрокаДоб.Организация = Выборка.Организация;
		СтрокаДоб.Эквайринг = Выборка.СуммаЭквайринг;
		СтрокаДоб.Инкассация = Выборка.СуммаИнкассации;
		СтрокаДоб.Комментарий = Выборка.КомментарийКЭквайрингуИИнкассации;
		СтрокаДоб.Автор = Выборка.Автор;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПредварительныеДанные()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ПредварительныеДанные.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Организация,
	               |	Таб.Эквайринг,
	               |	Таб.Инкассация,
	               |	Таб.Комментарий
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Организация,
	               |	ВТ_Данные.Эквайринг,
	               |	ВТ_Данные.Инкассация,
	               |	ВТ_Данные.Комментарий
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |		ПО ВТ_Данные.Организация = СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |ГДЕ
	               |	(ВТ_Данные.Эквайринг <> ЕСТЬNULL(СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг, 0)
	               |			ИЛИ ВТ_Данные.Инкассация <> ЕСТЬNULL(СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации, 0)
	               |			ИЛИ (ВЫРАЗИТЬ(ВТ_Данные.Комментарий КАК СТРОКА(500))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СлужебныеДанныеДляПлатежногоКалендаряМесяц.КомментарийКЭквайрингуИИнкассации, """") КАК СТРОКА(500))))";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц.СоздатьМенеджерЗаписи();
		Запись.Период = НачалоДня(ТекущаяДата());
		Запись.Организация = Выборка.Организация;
		Запись.СуммаЭквайринг = Выборка.Эквайринг;
		Запись.СуммаИнкассации = Выборка.Инкассация;
		Запись.КомментарийКЭквайрингуИИнкассации = Выборка.Комментарий;
		Запись.Автор = ПараметрыСеанса.ТекущийПользователь;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПерейтиВКалендарь(Команда)
	
	ЗаписатьПредварительныеДанные();
	Элементы.ГруппаКалендарь.Видимость = Истина;
	Элементы.ГруппаПредварительныеДанные.Видимость = Ложь;
	ЗаполнитьДанныеКалендаря();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКалендаря_ПерваяВерсия()
	
	ДанныеКалендаря.Очистить();
	РасшифровкаПоказателей.Очистить();
	
	МассивОрганизации = Новый Массив();
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031"));
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	
	//получим средние значения инкассации и эквайринга по листам учета
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(КоличествоМесяцевДляОценкиСреднего * 30, "ЧГ=0") + "
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Проведен = ИСТИНА
	               |	И ЛистУчета.Дата <= &ТекДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_Данные.Дата) КАК МинДата,
	               |	МАКСИМУМ(ВТ_Данные.Дата) КАК МаксДата
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	МинДата = ТекущаяДата();
	МаксДата = ТекущаяДата();
	Если Выборка.Следующий() Тогда
		МинДата = Выборка.МинДата;
		МаксДата = Выборка.МаксДата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(МинДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(МаксДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК КолвоПериодов,
	               |	СУММА(ЛистУчета.СуммаИнкассации) КАК СуммаИнкассации,
	               |	СУММА(ЛистУчета.СуммаЭквайринг) КАК СуммаЭквайринг,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчета.Организация";
				   
	ТабСредниеИнкассЭквайринг = Новый ТаблицаЗначений();
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Организация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Инкассация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Эквайринг");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабСредниеИнкассЭквайринг.Добавить();
		СтрокаТаб.Организация = Выборка.Организация;
		СтрокаТаб.Инкассация = Цел(Выборка.СуммаИнкассации / Выборка.КолвоПериодов);
		СтрокаТаб.Эквайринг = Цел(Выборка.СуммаЭквайринг / Выборка.КолвоПериодов * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100);
	КонецЦикла;
	
	//Начнем с текущего дня, берем остаток в приход ставим
	ЗапросОстатки = Новый Запрос();
	ЗапросОстатки.УстановитьПараметр("ДатаОстатки", НачалоДня(ТекущаяДата()));
	ЗапросОстатки.УстановитьПараметр("Счет51_1", ПланыСчетов.Финансовый.РасчетныйСчет);
	ЗапросОстатки.УстановитьПараметр("Организации", МассивОрганизации);
	ЗапросОстатки.Текст = "ВЫБРАТЬ
	                      |	ФинансовыйОстатки.Организация,
	                      |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток
	                      |ИЗ
	                      |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = &Счет51_1, , ) КАК ФинансовыйОстатки
	                      |ГДЕ
	                      |	ФинансовыйОстатки.Организация В (&Организации)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФинансовыйОстатки.Организация";
						  
	Выборка = ЗапросОстатки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ДанныеКалендаря.Добавить();
		СтрокаДоб.Дата = ТекущаяДата();
		СтрокаДоб.Организация = Выборка.Организация;
		СтрокаДоб.НачальныйОстаток = Выборка.СуммаОстаток;
	КонецЦикла;
	
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация", ЭлементОрг));
		Если СтрокиТаб.Количество() = 0 Тогда
			СтрокаДоб = ДанныеКалендаря.Добавить();
			СтрокаДоб.Дата = ТекущаяДата();
			СтрокаДоб.Организация = Выборка.Организация;
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |ИЗ
	               |	РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |ГДЕ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, НачалоДня(ТекущаяДата())));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].ПриходЭквайринг = Выборка.СуммаЭквайринг;
			СтрокиТаб[0].ПриходИнкассация = Выборка.СуммаИнкассации;
		КонецЕсли;	
	КонецЦикла;	
	
    ДатаОбработки = ТекущаяДата() + 86400;
	Пока ДатаОбработки <= Объект.ФормироватьДоДаты Цикл
		Для Каждого ЭлементОрг Из МассивОрганизации Цикл
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаОбработки));
			Если СтрокиТаб.Количество() = 0 Тогда
				СтрокаТаб = ДанныеКалендаря.Добавить();
				СтрокаТаб.Дата = ДатаОбработки;
				СтрокаТаб.Организация = ЭлементОрг;
				СтрокаИнкассСредняя = ТабСредниеИнкассЭквайринг.Найти(ЭлементОрг, "Организация");
				Если СтрокаИнкассСредняя <> Неопределено Тогда
					СтрокаТаб.ПриходЭквайринг = СтрокаИнкассСредняя.Эквайринг * ?(ДобавитьМесяц(НачалоДня(ТекущаяДата()), 1) < ДатаОбработки, 1 + (ПроцентУвеличенияОборотовЕжемесячно / 100), 1);
					СтрокаТаб.ПриходИнкассация = СтрокаИнкассСредняя.Инкассация * ?(ДобавитьМесяц(НачалоДня(ТекущаяДата()), 1) < ДатаОбработки, 1 + (ПроцентУвеличенияОборотовЕжемесячно / 100), 1);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;
	
	МассивКонтровИсключить = Новый Массив(); //нужно выкинут внутренние перепродажи
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031"));
	
	//считывание данные по расчету платежей поставщикам
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		//определим ближайший четверг или вторник
		ТабСуммыУжеБыли = Новый ТаблицаЗначений();
		ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
		ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
		СуммаУжеУчаствовала = 0;
		ДатаОбработки = НачалоДня(ТекущаяДата());
		Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
			Если ДеньНедели(ДатаОбработки) = 2
				ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
				СуммаИтерации = 0;
				ТабДанные = Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ДатаОбработки, ЭлементОрг, Неопределено);
				ТабДанные.Свернуть("Контрагент", "СуммаКОплате");
				Для Каждого СтрокаКОплате Из ТабДанные Цикл
					Если СтрокаКОплате.СуммаКОплате = 0
						ИЛИ МассивКонтровИсключить.Найти(СтрокаКОплате.Контрагент) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Найти(СтрокаКОплате.Контрагент, "Контрагент");
					СуммаИтерации = СтрокаКОплате.СуммаКОплате;
					Если СтрокаСуммаУжеБыла <> Неопределено Тогда
						СуммаИтерации = СуммаИтерации - СтрокаСуммаУжеБыла.Сумма;
					КонецЕсли;
					Если СуммаИтерации <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаДоб = РасшифровкаПоказателей.Добавить();
					СтрокаДоб.Организация = ЭлементОрг;
					СтрокаДоб.Дата = ДатаОбработки;
					СтрокаДоб.ИмяПоказателя = "Поставщики";
					СтрокаДоб.Источник = "Данные обработки расчет платежей поставщикам";
					СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаДоб.Сумма = СуммаИтерации;
					Если СтрокаСуммаУжеБыла = Неопределено Тогда
						СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
						СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
						СтрокаСуммаУжеБыла.Сумма = 0;
					КонецЕсли;	
					СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
					СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", ЭлементОрг, ДатаОбработки));
					Если СтрокиТаб.Количество() > 0 Тогда
						СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	//считывание данные по расчету платежей поставщикам по упаковке
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		//определим ближайший четверг или вторник
		ТабСуммыУжеБыли = Новый ТаблицаЗначений();
		ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
		ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
		СуммаУжеУчаствовала = 0;
		ДатаОбработки = НачалоДня(ТекущаяДата());
		Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
			Если ДеньНедели(ДатаОбработки) = 2
				ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
				СуммаИтерации = 0;
				ТабДанные = Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ДатаОбработки, ЭлементОрг, Неопределено, "ПоставщикиУпаковки");
				ТабДанные.Свернуть("Контрагент", "СуммаКОплате");
				Для Каждого СтрокаКОплате Из ТабДанные Цикл
					Если СтрокаКОплате.СуммаКОплате = 0
						ИЛИ МассивКонтровИсключить.Найти(СтрокаКОплате.Контрагент) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Найти(СтрокаКОплате.Контрагент, "Контрагент");
					СуммаИтерации = СтрокаКОплате.СуммаКОплате;
					Если СтрокаСуммаУжеБыла <> Неопределено Тогда
						СуммаИтерации = СуммаИтерации - СтрокаСуммаУжеБыла.Сумма;
					КонецЕсли;
					Если СуммаИтерации <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаДоб = РасшифровкаПоказателей.Добавить();
					СтрокаДоб.Организация = ЭлементОрг;
					СтрокаДоб.Дата = ДатаОбработки;
					СтрокаДоб.ИмяПоказателя = "Поставщики";
					СтрокаДоб.Источник = "Данные обработки расчет платежей поставщикам (упаковка)";
					СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаДоб.Сумма = СуммаИтерации;
					Если СтрокаСуммаУжеБыла = Неопределено Тогда
						СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
						СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
						СтрокаСуммаУжеБыла.Сумма = 0;
					КонецЕсли;	
					СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
					СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", ЭлементОрг, ДатаОбработки));
					Если СтрокиТаб.Количество() > 0 Тогда
						СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	//теперь обработаем данные по сделкам с поставщиками
	ДатаОбработки = НачалоДня(ТекущаяДата());
	ТабСуммыУжеБыли = Новый ТаблицаЗначений();
	ТабСуммыУжеБыли.Колонки.Добавить("Организация");
	ТабСуммыУжеБыли.Колонки.Добавить("Сделка");
	ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
	ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
	Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
		Если ДеньНедели(ДатаОбработки) = 2
			ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
			ТЗПлатежей = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуПоСделкамСПоставщиком(ДатаОбработки);
			ТЗПлатежей.Свернуть("Организация, Контрагент, Сделка", "СуммаОстаток");
			Для Каждого СтрокаКОплате Из ТЗПлатежей Цикл
				Если СтрокаКОплате.Организация = Null Тогда
					СтрокаКОплате.Организация = ОргВкусвилл;
				КонецЕсли;	
				Если СтрокаКОплате.СуммаОстаток <= 0
					ИЛИ МассивОрганизации.Найти(СтрокаКОплате.Организация) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтрокиСуммаУжеБыла = ТабСуммыУжеБыли.НайтиСтроки(Новый Структура("Организация, Сделка, Контрагент", СтрокаКОплате.Организация, СтрокаКОплате.Сделка, СтрокаКОплате.Контрагент));
				СуммаИтерации = СтрокаКОплате.СуммаОстаток;
				Если СтрокиСуммаУжеБыла.Количество() > 0 Тогда
					СуммаИтерации = СуммаИтерации - СтрокиСуммаУжеБыла[0].Сумма;
				КонецЕсли;
				Если СуммаИтерации <= 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДоб = РасшифровкаПоказателей.Добавить();
				СтрокаДоб.Организация = СтрокаКОплате.Организация;
				СтрокаДоб.Дата = ДатаОбработки;
				СтрокаДоб.ИмяПоказателя = "Поставщики";
				СтрокаДоб.Источник = "Данные обработки расчета платежей по сделкам";
				СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
				СтрокаДоб.Документ = СтрокаКОплате.Сделка;
				СтрокаДоб.Сумма = СуммаИтерации;
				Если СтрокиСуммаУжеБыла.Количество() = 0 Тогда
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
					СтрокаСуммаУжеБыла.Организация = СтрокаКОплате.Контрагент;
					СтрокаСуммаУжеБыла.Сделка = СтрокаКОплате.Сделка;
					СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаСуммаУжеБыла.Сумма = 0;
				Иначе
					СтрокаСуммаУжеБыла = СтрокиСуммаУжеБыла[0];
				КонецЕсли;	
				СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
				СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаКОплате.Организация, ДатаОбработки));
				Если СтрокиТаб.Количество() > 0 Тогда
					СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ТЗПлатежейПоСтатьям = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуЗаявокКОплате(ТекущаяДата());
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если МассивОрганизации.Найти(ТЗПлатежейПоСтатьям[КолвоСтрок - н].Организация) = Неопределено Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
		Если ТЗПлатежейПоСтатьям[КолвоСтрок - н].ДатаПлатежа >= НачалоДня(ТекущаяДата() + 86400*7) Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТЗПлатежейПоСтатьям[КолвоСтрок - н].Аванс = Истина Тогда
			СуммаПлатежа = Мин(ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ОстатокПоЗаявке);
		Иначе	
			СуммаПлатежа = Мин(ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ПолученоНеОплачено, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ОстатокПоЗаявке);
		КонецЕсли;	
		Если СуммаПлатежа <= 0 Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
		Иначе
			ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток = СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;	
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если СтатьиДДСПоставщики.НайтиСтроки(Новый Структура("Статья", ТЗПлатежейПоСтатьям[КолвоСтрок - н].СтатьяДДС)).Количество() > 0 Тогда
			СтрокаДоб = РасшифровкаПоказателей.Добавить();
			СтрокаДоб.Организация = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Организация;
			СтрокаДоб.Дата = НачалоДня(ТЗПлатежейПоСтатьям[КолвоСтрок - н].ДатаПлатежа);
			СтрокаДоб.ИмяПоказателя = "Поставщики";
			СтрокаДоб.Источник = "Данные обработки календаря платежей по заявкам на услуги/материалы";
			СтрокаДоб.Контрагент = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Контрагент;
			СтрокаДоб.Статья = ТЗПлатежейПоСтатьям[КолвоСтрок - н].СтатьяДДС;
			СтрокаДоб.Документ = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Заявка;
			СтрокаДоб.Сумма = ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток;
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаДоб.Организация, СтрокаДоб.Дата));
			Если СтрокиТаб.Количество() > 0 Тогда
				СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СтрокаДоб.Сумма;
			КонецЕсли;
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	//заполним данные по аренде
	ОбрВрем = Обработки.ПлатежныйКалендарьПоАренде.Создать();
	ОбрВрем.НачалоПериода = НачалоДня(ТекущаяДата());
	ОбрВрем.КонецПериода = КонецДня(ТекущаяДата() + 6*86400);
	
	ДанныеКалендаря.Сортировать("Дата, Организация");
	ПересчитатьДанныеКалендаря();
		
КонецПроцедуры

&НаСервере
Процедура СчитатьСтатьиПоставщиков()
	
	ДанныеКалендаря.Очистить();
	РасшифровкаПоказателей.Очистить();
	
	МассивОрганизации = Новый Массив();
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031"));
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	
	//получим средние значения инкассации и эквайринга по листам учета
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(КоличествоМесяцевДляОценкиСреднего * 30, "ЧГ=0") + "
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Проведен = ИСТИНА
	               |	И ЛистУчета.Дата <= &ТекДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_Данные.Дата) КАК МинДата,
	               |	МАКСИМУМ(ВТ_Данные.Дата) КАК МаксДата
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	МинДата = ТекущаяДата();
	МаксДата = ТекущаяДата();
	Если Выборка.Следующий() Тогда
		МинДата = Выборка.МинДата;
		МаксДата = Выборка.МаксДата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(МинДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(МаксДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК КолвоПериодов,
	               |	СУММА(ЛистУчета.СуммаИнкассации) КАК СуммаИнкассации,
	               |	СУММА(ЛистУчета.СуммаЭквайринг) КАК СуммаЭквайринг,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчета.Организация";
				   
	ТабСредниеИнкассЭквайринг = Новый ТаблицаЗначений();
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Организация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Инкассация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Эквайринг");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабСредниеИнкассЭквайринг.Добавить();
		СтрокаТаб.Организация = Выборка.Организация;
		СтрокаТаб.Инкассация = Цел(Выборка.СуммаИнкассации / Выборка.КолвоПериодов);
		СтрокаТаб.Эквайринг = Цел(Выборка.СуммаЭквайринг / Выборка.КолвоПериодов * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100);
	КонецЦикла;
	
	//Начнем с текущего дня, берем остаток в приход ставим
	ЗапросОстатки = Новый Запрос();
	ЗапросОстатки.УстановитьПараметр("ДатаОстатки", НачалоДня(ТекущаяДата()));
	ЗапросОстатки.УстановитьПараметр("Счет51_1", ПланыСчетов.Финансовый.РасчетныйСчет);
	ЗапросОстатки.УстановитьПараметр("Организации", МассивОрганизации);
	ЗапросОстатки.Текст = "ВЫБРАТЬ
	                      |	ФинансовыйОстатки.Организация,
	                      |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток
	                      |ИЗ
	                      |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = &Счет51_1, , ) КАК ФинансовыйОстатки
	                      |ГДЕ
	                      |	ФинансовыйОстатки.Организация В (&Организации)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФинансовыйОстатки.Организация";
						  
	Выборка = ЗапросОстатки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ДанныеКалендаря.Добавить();
		СтрокаДоб.Дата = ТекущаяДата();
		СтрокаДоб.Организация = Выборка.Организация;
		СтрокаДоб.НачальныйОстаток = Выборка.СуммаОстаток;
	КонецЦикла;
	
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация", ЭлементОрг));
		Если СтрокиТаб.Количество() = 0 Тогда
			СтрокаДоб = ДанныеКалендаря.Добавить();
			СтрокаДоб.Дата = ТекущаяДата();
			СтрокаДоб.Организация = Выборка.Организация;
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |ИЗ
	               |	РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |ГДЕ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, НачалоДня(ТекущаяДата())));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].ПриходЭквайринг = Выборка.СуммаЭквайринг;
			СтрокиТаб[0].ПриходИнкассация = Выборка.СуммаИнкассации;
		КонецЕсли;	
	КонецЦикла;	
	
    ДатаОбработки = ТекущаяДата() + 86400;
	Пока ДатаОбработки <= Объект.ФормироватьДоДаты Цикл
		Для Каждого ЭлементОрг Из МассивОрганизации Цикл
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаОбработки));
			Если СтрокиТаб.Количество() = 0 Тогда
				СтрокаТаб = ДанныеКалендаря.Добавить();
				СтрокаТаб.Дата = ДатаОбработки;
				СтрокаТаб.Организация = ЭлементОрг;
				СтрокаИнкассСредняя = ТабСредниеИнкассЭквайринг.Найти(ЭлементОрг, "Организация");
				Если СтрокаИнкассСредняя <> Неопределено Тогда
					СтрокаТаб.ПриходЭквайринг = СтрокаИнкассСредняя.Эквайринг * ?(ДобавитьМесяц(НачалоДня(ТекущаяДата()), 1) < ДатаОбработки, 1 + (ПроцентУвеличенияОборотовЕжемесячно / 100), 1);
					СтрокаТаб.ПриходИнкассация = СтрокаИнкассСредняя.Инкассация * ?(ДобавитьМесяц(НачалоДня(ТекущаяДата()), 1) < ДатаОбработки, 1 + (ПроцентУвеличенияОборотовЕжемесячно / 100), 1);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;
	
	МассивКонтровИсключить = Новый Массив(); //нужно выкинут внутренние перепродажи
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031"));
	
	//считывание данные по расчету платежей поставщикам
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		//определим ближайший четверг или вторник
		ТабСуммыУжеБыли = Новый ТаблицаЗначений();
		ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
		ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
		СуммаУжеУчаствовала = 0;
		ДатаОбработки = НачалоДня(ТекущаяДата());
		Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
			Если ДеньНедели(ДатаОбработки) = 2
				ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
				СуммаИтерации = 0;
				ТабДанные = Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ДатаОбработки, ЭлементОрг, Неопределено);
				ТабДанные.Свернуть("Контрагент", "СуммаКОплате");
				Для Каждого СтрокаКОплате Из ТабДанные Цикл
					Если СтрокаКОплате.СуммаКОплате = 0
						ИЛИ МассивКонтровИсключить.Найти(СтрокаКОплате.Контрагент) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Найти(СтрокаКОплате.Контрагент, "Контрагент");
					СуммаИтерации = СтрокаКОплате.СуммаКОплате;
					Если СтрокаСуммаУжеБыла <> Неопределено Тогда
						СуммаИтерации = СуммаИтерации - СтрокаСуммаУжеБыла.Сумма;
					КонецЕсли;
					Если СуммаИтерации <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаДоб = РасшифровкаПоказателей.Добавить();
					СтрокаДоб.Организация = ЭлементОрг;
					СтрокаДоб.Дата = ДатаОбработки;
					СтрокаДоб.ИмяПоказателя = "Поставщики";
					СтрокаДоб.Источник = "Данные обработки расчет платежей поставщикам";
					СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаДоб.Сумма = СуммаИтерации;
					Если СтрокаСуммаУжеБыла = Неопределено Тогда
						СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
						СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
						СтрокаСуммаУжеБыла.Сумма = 0;
					КонецЕсли;	
					СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
					СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", ЭлементОрг, ДатаОбработки));
					Если СтрокиТаб.Количество() > 0 Тогда
						СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	//считывание данные по расчету платежей поставщикам по упаковке
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		//определим ближайший четверг или вторник
		ТабСуммыУжеБыли = Новый ТаблицаЗначений();
		ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
		ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
		СуммаУжеУчаствовала = 0;
		ДатаОбработки = НачалоДня(ТекущаяДата());
		Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
			Если ДеньНедели(ДатаОбработки) = 2
				ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
				СуммаИтерации = 0;
				ТабДанные = Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ДатаОбработки, ЭлементОрг, Неопределено, "ПоставщикиУпаковки");
				ТабДанные.Свернуть("Контрагент", "СуммаКОплате");
				Для Каждого СтрокаКОплате Из ТабДанные Цикл
					Если СтрокаКОплате.СуммаКОплате = 0
						ИЛИ МассивКонтровИсключить.Найти(СтрокаКОплате.Контрагент) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Найти(СтрокаКОплате.Контрагент, "Контрагент");
					СуммаИтерации = СтрокаКОплате.СуммаКОплате;
					Если СтрокаСуммаУжеБыла <> Неопределено Тогда
						СуммаИтерации = СуммаИтерации - СтрокаСуммаУжеБыла.Сумма;
					КонецЕсли;
					Если СуммаИтерации <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаДоб = РасшифровкаПоказателей.Добавить();
					СтрокаДоб.Организация = ЭлементОрг;
					СтрокаДоб.Дата = ДатаОбработки;
					СтрокаДоб.ИмяПоказателя = "Поставщики";
					СтрокаДоб.Источник = "Данные обработки расчет платежей поставщикам (упаковка)";
					СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаДоб.Сумма = СуммаИтерации;
					Если СтрокаСуммаУжеБыла = Неопределено Тогда
						СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
						СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
						СтрокаСуммаУжеБыла.Сумма = 0;
					КонецЕсли;	
					СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
					СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", ЭлементОрг, ДатаОбработки));
					Если СтрокиТаб.Количество() > 0 Тогда
						СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	//теперь обработаем данные по сделкам с поставщиками
	ДатаОбработки = НачалоДня(ТекущаяДата());
	ТабСуммыУжеБыли = Новый ТаблицаЗначений();
	ТабСуммыУжеБыли.Колонки.Добавить("Организация");
	ТабСуммыУжеБыли.Колонки.Добавить("Сделка");
	ТабСуммыУжеБыли.Колонки.Добавить("Контрагент");
	ТабСуммыУжеБыли.Колонки.Добавить("Сумма");
	Пока ДатаОбработки <= ТекущаяДата() + 6*86400 Цикл
		Если ДеньНедели(ДатаОбработки) = 2
			ИЛИ ДеньНедели(ДатаОбработки) = 4 Тогда
			ТЗПлатежей = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуПоСделкамСПоставщиком(ДатаОбработки);
			ТЗПлатежей.Свернуть("Организация, Контрагент, Сделка", "СуммаОстаток");
			Для Каждого СтрокаКОплате Из ТЗПлатежей Цикл
				Если СтрокаКОплате.Организация = Null Тогда
					СтрокаКОплате.Организация = ОргВкусвилл;
				КонецЕсли;	
				Если СтрокаКОплате.СуммаОстаток <= 0
					ИЛИ МассивОрганизации.Найти(СтрокаКОплате.Организация) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтрокиСуммаУжеБыла = ТабСуммыУжеБыли.НайтиСтроки(Новый Структура("Организация, Сделка, Контрагент", СтрокаКОплате.Организация, СтрокаКОплате.Сделка, СтрокаКОплате.Контрагент));
				СуммаИтерации = СтрокаКОплате.СуммаОстаток;
				Если СтрокиСуммаУжеБыла.Количество() > 0 Тогда
					СуммаИтерации = СуммаИтерации - СтрокиСуммаУжеБыла[0].Сумма;
				КонецЕсли;
				Если СуммаИтерации <= 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДоб = РасшифровкаПоказателей.Добавить();
				СтрокаДоб.Организация = СтрокаКОплате.Организация;
				СтрокаДоб.Дата = ДатаОбработки;
				СтрокаДоб.ИмяПоказателя = "Поставщики";
				СтрокаДоб.Источник = "Данные обработки расчета платежей по сделкам";
				СтрокаДоб.Контрагент = СтрокаКОплате.Контрагент;
				СтрокаДоб.Документ = СтрокаКОплате.Сделка;
				СтрокаДоб.Сумма = СуммаИтерации;
				Если СтрокиСуммаУжеБыла.Количество() = 0 Тогда
					СтрокаСуммаУжеБыла = ТабСуммыУжеБыли.Добавить();
					СтрокаСуммаУжеБыла.Организация = СтрокаКОплате.Контрагент;
					СтрокаСуммаУжеБыла.Сделка = СтрокаКОплате.Сделка;
					СтрокаСуммаУжеБыла.Контрагент = СтрокаКОплате.Контрагент;
					СтрокаСуммаУжеБыла.Сумма = 0;
				Иначе
					СтрокаСуммаУжеБыла = СтрокиСуммаУжеБыла[0];
				КонецЕсли;	
				СтрокаСуммаУжеБыла.Сумма = СтрокаСуммаУжеБыла.Сумма + СуммаИтерации;
				СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаКОплате.Организация, ДатаОбработки));
				Если СтрокиТаб.Количество() > 0 Тогда
					СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СуммаИтерации;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ТЗПлатежейПоСтатьям = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуЗаявокКОплате(ТекущаяДата());
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если МассивОрганизации.Найти(ТЗПлатежейПоСтатьям[КолвоСтрок - н].Организация) = Неопределено Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
		Если ТЗПлатежейПоСтатьям[КолвоСтрок - н].ДатаПлатежа >= НачалоДня(ТекущаяДата() + 86400*7) Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТЗПлатежейПоСтатьям[КолвоСтрок - н].Аванс = Истина Тогда
			СуммаПлатежа = Мин(ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ОстатокПоЗаявке);
		Иначе	
			СуммаПлатежа = Мин(ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ПолученоНеОплачено, ТЗПлатежейПоСтатьям[КолвоСтрок - н].ОстатокПоЗаявке);
		КонецЕсли;	
		Если СуммаПлатежа <= 0 Тогда
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
		Иначе
			ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток = СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;	
	
	КолвоСтрок = ТЗПлатежейПоСтатьям.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если СтатьиДДСПоставщики.НайтиСтроки(Новый Структура("Статья", ТЗПлатежейПоСтатьям[КолвоСтрок - н].СтатьяДДС)).Количество() > 0 Тогда
			СтрокаДоб = РасшифровкаПоказателей.Добавить();
			СтрокаДоб.Организация = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Организация;
			СтрокаДоб.Дата = НачалоДня(ТЗПлатежейПоСтатьям[КолвоСтрок - н].ДатаПлатежа);
			СтрокаДоб.ИмяПоказателя = "Поставщики";
			СтрокаДоб.Источник = "Данные обработки календаря платежей по заявкам на услуги/материалы";
			СтрокаДоб.Контрагент = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Контрагент;
			СтрокаДоб.Статья = ТЗПлатежейПоСтатьям[КолвоСтрок - н].СтатьяДДС;
			СтрокаДоб.Документ = ТЗПлатежейПоСтатьям[КолвоСтрок - н].Заявка;
			СтрокаДоб.Сумма = ТЗПлатежейПоСтатьям[КолвоСтрок - н].СуммаОстаток;
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаДоб.Организация, СтрокаДоб.Дата));
			Если СтрокиТаб.Количество() > 0 Тогда
				СтрокиТаб[0].Поставщики = СтрокиТаб[0].Поставщики + СтрокаДоб.Сумма;
			КонецЕсли;
			ТЗПлатежейПоСтатьям.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	//заполним данные по аренде
	ОбрВрем = Обработки.ПлатежныйКалендарьПоАренде.Создать();
	ОбрВрем.НачалоПериода = НачалоДня(ТекущаяДата());
	ОбрВрем.КонецПериода = КонецДня(ТекущаяДата() + 6*86400);
	
	ДанныеКалендаря.Сортировать("Дата, Организация");
	ПересчитатьДанныеКалендаря();
		
КонецПроцедуры



Функция РазницаВМесяцах(ДоДаты)
	
	КолвоМесяцев = 0;
	ДатаОбработки = КонецМесяца(ТекущаяДата());
	Пока ДатаОбработки < КонецМесяца(ДоДаты) Цикл
		КолвоМесяцев = КолвоМесяцев + 1;
		ДатаОбработки = ДобавитьМесяц(ДатаОбработки, 1);
	КонецЦикла;	
	
	Возврат КолвоМесяцев;
	
КонецФункции

Функция ПересчитатьДатуНаСтатичную(Статья, МесяцОбработки, ДатаОбработки)
	
	НайденаСтатья = Ложь;
	СтрокиДДС = СтатьиДДСАренда.НайтиСтроки(Новый Структура("Статья", Статья));
	Если СтрокиДДС.Количество() > 0 Тогда
		Если СтрокиДДС[0].ДеньПлатежа > 0 Тогда
			ДатаОбработки = МесяцОбработки + 86400 * (СтрокиДДС[0].ДеньПлатежа - 1);
		КонецЕсли;	
		НайденаСтатья = Истина;
	КонецЕсли;
	
	Если НЕ НайденаСтатья Тогда
		СтрокиДДС = СтатьиДДСЗарплата.НайтиСтроки(Новый Структура("Статья", Статья));
		Если СтрокиДДС.Количество() > 0 Тогда
			Если СтрокиДДС[0].ДеньПлатежа > 0 Тогда
				ДатаОбработки = МесяцОбработки + 86400 * (СтрокиДДС[0].ДеньПлатежа - 1);
			КонецЕсли;	
			НайденаСтатья = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НайденаСтатья Тогда
		СтрокиДДС = СтатьиДДСНалоги.НайтиСтроки(Новый Структура("Статья", Статья));
		Если СтрокиДДС.Количество() > 0 Тогда
			Если СтрокиДДС[0].ДеньПлатежа > 0 Тогда
				ДатаОбработки = МесяцОбработки + 86400 * (СтрокиДДС[0].ДеньПлатежа - 1);
			КонецЕсли;	
			НайденаСтатья = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДеньНедели(ДатаОбработки) = 6 Тогда
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЕсли;
	
	Если ДеньНедели(ДатаОбработки) = 7 Тогда
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЕсли;
	
	Возврат ДатаОбработки;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДанныеКалендаря_()
	
	ДанныеКалендаря.Очистить();
	РасшифровкаПоказателей.Очистить();
	
	МассивОрганизации = Новый Массив();
	Для Каждого СтрокаОрг Из Организации Цикл
		МассивОрганизации.Добавить(СтрокаОрг.Организация);
	КонецЦикла;	
	
	//получим средние значения инкассации и эквайринга по листам учета
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(КоличествоДнейДляОценкиСреднегоЭквИнкас, "ЧГ=0") + "
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Проведен = ИСТИНА
	               |	И ЛистУчета.Дата <= &ТекДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_Данные.Дата) КАК МинДата,
	               |	МАКСИМУМ(ВТ_Данные.Дата) КАК МаксДата
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	МинДата = ТекущаяДата();
	МаксДата = ТекущаяДата();
	Если Выборка.Следующий() Тогда
		МинДата = Выборка.МинДата;
		МаксДата = Выборка.МаксДата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(МинДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(МаксДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК КолвоПериодов,
	               |	СУММА(ЛистУчета.СуммаИнкассации) КАК СуммаИнкассации,
	               |	СУММА(ЛистУчета.СуммаЭквайринг) КАК СуммаЭквайринг,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчета.Организация";
				   
	ТабСредниеИнкассЭквайринг = Новый ТаблицаЗначений();
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Организация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Инкассация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Эквайринг");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабСредниеИнкассЭквайринг.Добавить();
		СтрокаТаб.Организация = Выборка.Организация;
		СтрокаТаб.Инкассация = Цел(Выборка.СуммаИнкассации / Выборка.КолвоПериодов);
		СтрокаТаб.Эквайринг = Цел(Выборка.СуммаЭквайринг / Выборка.КолвоПериодов * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100);
	КонецЦикла;
	
	//Начнем с текущего дня, берем остаток в приход ставим
	ЗапросОстатки = Новый Запрос();
	ЗапросОстатки.УстановитьПараметр("ДатаОстатки", НачалоДня(ТекущаяДата()));
	ЗапросОстатки.УстановитьПараметр("Счет51_1", ПланыСчетов.Финансовый.РасчетныйСчет);
	ЗапросОстатки.УстановитьПараметр("Организации", МассивОрганизации);
	ЗапросОстатки.Текст = "ВЫБРАТЬ
	                      |	ФинансовыйОстатки.Организация,
	                      |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток
	                      |ИЗ
	                      |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = &Счет51_1, , ) КАК ФинансовыйОстатки
	                      |ГДЕ
	                      |	ФинансовыйОстатки.Организация В (&Организации)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФинансовыйОстатки.Организация";
						  
	Выборка = ЗапросОстатки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ДанныеКалендаря.Добавить();
		СтрокаДоб.Дата = ТекущаяДата();
		СтрокаДоб.Организация = Выборка.Организация;
		СтрокаДоб.НачальныйОстаток = Выборка.СуммаОстаток;
	КонецЦикла;
	
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация", ЭлементОрг));
		Если СтрокиТаб.Количество() = 0 Тогда
			СтрокаДоб = ДанныеКалендаря.Добавить();
			СтрокаДоб.Дата = ТекущаяДата();
			СтрокаДоб.Организация = Выборка.Организация;
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |ИЗ
	               |	РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |ГДЕ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, НачалоДня(ТекущаяДата())));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].ПриходЭквайринг = Выборка.СуммаЭквайринг;
			СтрокиТаб[0].ПриходИнкассация = Выборка.СуммаИнкассации;
		КонецЕсли;	
	КонецЦикла;	
	
    ДатаОбработки = ТекущаяДата() + 86400;
	Пока ДатаОбработки <= Объект.ФормироватьДоДаты Цикл
		Для Каждого ЭлементОрг Из МассивОрганизации Цикл
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаОбработки));
			Если СтрокиТаб.Количество() = 0 Тогда
				СтрокаТаб = ДанныеКалендаря.Добавить();
				СтрокаТаб.Дата = ДатаОбработки;
				СтрокаТаб.Организация = ЭлементОрг;
				СтрокаИнкассСредняя = ТабСредниеИнкассЭквайринг.Найти(ЭлементОрг, "Организация");
				Если СтрокаИнкассСредняя <> Неопределено Тогда
					СтрокаТаб.ПриходЭквайринг = СтрокаИнкассСредняя.Эквайринг * (1 + ПроцентУвеличенияОборотовЕжемесячно * РазницаВМесяцах(ДатаОбработки) / 100);
					СтрокаТаб.ПриходИнкассация = СтрокаИнкассСредняя.Инкассация * (1 + ПроцентУвеличенияОборотовЕжемесячно * РазницаВМесяцах(ДатаОбработки) / 100);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;
	
	МассивКонтровИсключить = Новый Массив(); //нужно выкинут внутренние перепродажи
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031"));
	
	КонПредМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
	ДатаНачНорма = НачалоМесяца(ДобавитьМесяц(КонПредМесяца, (КоличествоМесяцевДляОценкиСреднего - 1) * -1));
	Если ДатаНачНорма > КонПредМесяца Тогда
		ДатаНачНорма = НачалоМесяца(КонПредМесяца);
	КонецЕсли;	
	ДатаНачТекМесяц = НачалоМесяца(ТекущаяДата());
	
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ЗапросСреднихЗначений = Новый Запрос();
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНач", НачалоДня(ДобавитьМесяц(ТекущаяДата() - 86400, -1))); 
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата() - 86400));
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНачНорма", ДатаНачНорма);
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаКонНорма", КонПредМесяца);
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНачТек", ДатаНачТекМесяц);
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяИсключить", СтатьиДДСИсключить.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("КонтрагентыИсключить", МассивКонтровИсключить);
	ЗапросСреднихЗначений.УстановитьПараметр("Организации", МассивОрганизации);
	ЗапросСреднихЗначений.УстановитьПараметр("ОргВкусвилл", ОргВкусвилл);
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяПоставщики", СтатьиДДСПоставщики.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяАренда", СтатьиДДСАренда.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяЗарплата", СтатьиДДСЗарплата.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяНалоги", СтатьиДДСНалоги.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.Текст = "ВЫБРАТЬ
	                              |	РасходИзБанка.Ссылка КАК Ссылка
	                              |ПОМЕСТИТЬ ВТ_Ссылки
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяИсключить)
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	Ссылка
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	МАКСИМУМ(ВЫБОР
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |				ТОГДА 0
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяАренда)
	                              |				ТОГДА 1
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяЗарплата)
	                              |				ТОГДА 2
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяНалоги)
	                              |				ТОГДА 3
	                              |			ИНАЧЕ 4
	                              |		КОНЕЦ) КАК Тип,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНачНорма И &ДатаКонНорма
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяИсключить)
								  |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента,
	                              |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ) КАК Месяц
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата >= &ДатаНачТек
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяИсключить)
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ)
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	МАКСИМУМ(ВЫБОР
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |				ТОГДА 0
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяАренда)
	                              |				ТОГДА 1
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяЗарплата)
	                              |				ТОГДА 2
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяНалоги)
	                              |				ТОГДА 3
	                              |			ИНАЧЕ 4
	                              |		КОНЕЦ) КАК Тип,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента,
	                              |	ДЕНЬ(РасходИзБанка.Дата) КАК День
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНачНорма И &ДатаКонНорма
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяИсключить)
	                              |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&ОргВкусвилл)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	ДЕНЬ(РасходИзБанка.Дата)
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента,
	                              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НЕДЕЛЯ(РасходИзБанка.Дата)) КАК КолвоНедель,
	                              |	ВЫБОР
	                              |		КОГДА ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) >= 1
	                              |				И ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) < 4
	                              |			ТОГДА 2
	                              |		КОГДА ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) >= 4
	                              |			ТОГДА 4
	                              |	КОНЕЦ КАК ДеньНедели
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНачНорма И &ДатаКонНорма
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И РасходИзБанка.СтатьяДвиженияДенежныхСредств В(&СтатьяПоставщики)
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&ОргВкусвилл)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	ВЫБОР
	                              |		КОГДА ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) >= 1
	                              |				И ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) < 4
	                              |			ТОГДА 2
	                              |		КОГДА ДЕНЬНЕДЕЛИ(РасходИзБанка.Дата) >= 4
	                              |			ТОГДА 4
	                              |	КОНЕЦ";
								  
								  
	Результаты = ЗапросСреднихЗначений.ВыполнитьПакет();
	ТабНормаНаМесяц = Результаты[1].Выгрузить();
	ТабНормаНаМесяц.Колонки.Добавить("СуммаНаМесяц");
	ТабБылоВТекМесяце = Результаты[2].Выгрузить();
	ТабРаспределениеПоДням = Результаты[3].Выгрузить();
	ТабДанныеПоСтатьеПоставщиков = Результаты[4].Выгрузить();
	
	Для Каждого СтрокаСтатьяПоставщик Из ТабДанныеПоСтатьеПоставщиков Цикл
		СтрокаСтатьяПоставщик.СуммаДокумента = Цел(СтрокаСтатьяПоставщик.СуммаДокумента / СтрокаСтатьяПоставщик.КолвоНедель);
	КонецЦикла;	
	
	Для Каждого СтрокаСредний Из ТабНормаНаМесяц Цикл
		СтрокаСредний.СуммаНаМесяц = Цел(СтрокаСредний.СуммаДокумента / КоличествоМесяцевДляОценкиСреднего);
	КонецЦикла;	
	
	МесяцОбработки = НачалоМесяца(ТекущаяДата());
	Пока МесяцОбработки <= НачалоМесяца(Объект.ФормироватьДоДаты) Цикл
		
		ЗапросВыходные = Новый Запрос();
		ЗапросВыходные.УстановитьПараметр("ДатаНач", НачалоМесяца(МесяцОбработки));
		ЗапросВыходные.УстановитьПараметр("ДатаКон", КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)));
		ЗапросВыходные.Текст = "ВЫБРАТЬ
		                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		                       |ИЗ
		                       |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		                       |ГДЕ
		                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
		                       |	И РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		                       |
		                       |УПОРЯДОЧИТЬ ПО
		                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря УБЫВ";
							   
		ТабРабочиеДни = ЗапросВыходные.Выполнить().Выгрузить();
		
		Для Каждого ЭлементОрг Из МассивОрганизации Цикл
			СтрокиНорма = ТабНормаНаМесяц.НайтиСтроки(Новый Структура("Организация", ЭлементОрг));
			Для Каждого СтрокаНорма Из СтрокиНорма Цикл
				СуммаПоСтатье = СтрокаНорма.СуммаНаМесяц * (1 + ПроцентУвеличенияОборотовЕжемесячно * (РазницаВМесяцах(МесяцОбработки) + 1) / 100);
				СтрокиУжеБылоВТекМесяце = ТабБылоВТекМесяце.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств, Месяц"
									, СтрокаНорма.Организация, СтрокаНорма.СтатьяДвиженияДенежныхСредств, МесяцОбработки));
				Для Каждого СтрокаУжеБыло Из СтрокиУжеБылоВТекМесяце Цикл
					СуммаПоСтатье = СуммаПоСтатье - СтрокаУжеБыло.СуммаДокумента;
				КонецЦикла;
				Если СуммаПоСтатье <= 0 Тогда
					Продолжить;
				КонецЕсли;
				ТабПоДням = Новый ТаблицаЗначений();
				ТабПоДням.Колонки.Добавить("День");
				ТабПоДням.Колонки.Добавить("База");
				ТабПоДням.Колонки.Добавить("Сумма");
				
				СтрокиРаспределениеПоДням = ТабРаспределениеПоДням.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств", СтрокаНорма.Организация, СтрокаНорма.СтатьяДвиженияДенежныхСредств));
				Для Каждого СтрокаДень Из СтрокиРаспределениеПоДням Цикл
					ДатаРасчетная = МесяцОбработки + 86400 * (СтрокаДень.День - 1);
					Если ДатаРасчетная < НачалоДня(ТекущаяДата()) Тогда
						Продолжить;
					ИначеЕсли ДатаРасчетная > КонецМесяца(МесяцОбработки) Тогда
						Продолжить;
					КонецЕсли;
					ДатаРасчетная = ПересчитатьДатуНаСтатичную(СтрокаНорма.СтатьяДвиженияДенежныхСредств, МесяцОбработки, ДатаРасчетная);
					СтрокаДоб = ТабПоДням.Добавить();
					СтрокаДоб.День = ДатаРасчетная;
					//если это статья по поставщикам, то раскладываем оплаты на вторник и четверг
					Если СтрокаДень.Тип = 0 Тогда
						Пока СтрокаДоб.День <= КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)) Цикл
							Если ДеньНедели(СтрокаДоб.День) = 2
								ИЛИ ДеньНедели(СтрокаДоб.День) = 4 Тогда
								Если ТабРабочиеДни.Найти(СтрокаДоб.День, "ДатаКалендаря") <> Неопределено Тогда
									Прервать;
								КонецЕсли;	
							КонецЕсли;
							СтрокаДоб.День = СтрокаДоб.День + 86400;
						КонецЦикла;
					КонецЕсли;	
					СтрокаДоб.База = СтрокаДень.СуммаДокумента;
				КонецЦикла;
				
				ТабПоДням.Свернуть("День", "База, Сумма");
				
				//распределим оплаты по неделе в пропорции, вторник 1/3, четверг 2/3
				Если СтрокаНорма.Тип = 0 Тогда
					СуммаНаНеделю = 0;
					ДатаОбработкиВрем = НачалоНедели(МесяцОбработки);
					Пока ДатаОбработкиВрем <= КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)) Цикл
						СтрокаВторник = ТабПоДням.Найти(ДатаОбработкиВрем + 86400, "День");
						СтрокаЧетверг = ТабПоДням.Найти(ДатаОбработкиВрем + 86400 * 3, "День");
						СуммаНаНеделю = ?(СтрокаВторник <> Неопределено, СтрокаВторник.База, 0) + ?(СтрокаЧетверг <> Неопределено, СтрокаЧетверг.База, 0);
						Если СуммаНаНеделю <> 0
							И СтрокаВторник <> Неопределено
							И СтрокаЧетверг <> Неопределено Тогда
							СтрокаВторник.База = Цел(СуммаНаНеделю * 0.33);
							СтрокаЧетверг.База = Цел(СуммаНаНеделю * 0.67);
						КонецЕсли;	
						ДатаОбработкиВрем = ДатаОбработкиВрем + 86400*7;
					КонецЦикла;	
				КонецЕсли;	
				
				Если ТабПоДням.Количество() = 0 Тогда
					СтрокаДоб = ТабПоДням.Добавить();
					СтрокаДоб.День = КонецМесяца(МесяцОбработки);
					СтрокаДоб.База = 1;
				КонецЕсли;	
				
				РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаПоСтатье, ТабПоДням.ВыгрузитьКолонку("База"), 0);
				Если Не РаспределениеРег = Неопределено Тогда
					ТабПоДням.ЗагрузитьКолонку(РаспределениеРег, "Сумма");
				КонецЕсли;
				
				Для Каждого СтрокаДень Из ТабПоДням Цикл
					Если СтрокаДень.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокиДанные = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаНорма.Организация, НачалоДня(СтрокаДень.День)));
					Если СтрокиДанные.Количество() > 0 Тогда
						СтрокаРасшифровка = РасшифровкаПоказателей.Добавить();
						СтрокаРасшифровка.Дата = СтрокиДанные[0].Дата;
						СтрокаРасшифровка.Организация = СтрокиДанные[0].Организация;
						СтрокаРасшифровка.Статья = СтрокаНорма.СтатьяДвиженияДенежныхСредств;
						СтрокаРасшифровка.Сумма = СтрокаДень.Сумма;
						Если СтрокаНорма.Тип = 0 Тогда
							СтрокиДанные[0].Поставщики = СтрокиДанные[0].Поставщики + СтрокаДень.Сумма;
							СтрокаРасшифровка.ИмяПоказателя = "Поставщики";
						ИначеЕсли СтрокаНорма.Тип = 1 Тогда
							СтрокиДанные[0].Аренда = СтрокиДанные[0].Аренда + СтрокаДень.Сумма;
							СтрокаРасшифровка.ИмяПоказателя = "Аренда";
						ИначеЕсли СтрокаНорма.Тип = 2 Тогда
							СтрокиДанные[0].Зарплата = СтрокиДанные[0].Зарплата + СтрокаДень.Сумма;
							СтрокаРасшифровка.ИмяПоказателя = "Зарплата";
						ИначеЕсли СтрокаНорма.Тип = 3 Тогда
							СтрокиДанные[0].Налоги = СтрокиДанные[0].Налоги + СтрокаДень.Сумма;
							СтрокаРасшифровка.ИмяПоказателя = "Налоги";
						Иначе	                                                               
							СтрокиДанные[0].Прочее = СтрокиДанные[0].Прочее + СтрокаДень.Сумма;
							СтрокаРасшифровка.ИмяПоказателя = "Прочее";
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
		МесяцОбработки = ДобавитьМесяц(МесяцОбработки, 1);
	КонецЦикла;	
	
	Для Каждого СтрокаКалендарь Из ДанныеКалендаря Цикл
		СтрокиПоПоставщикам = ТабДанныеПоСтатьеПоставщиков.НайтиСтроки(Новый Структура("Организация, ДеньНедели", СтрокаКалендарь.Организация, ДеньНедели(СтрокаКалендарь.Дата)));
		Для Каждого СтрокаПоставщик Из СтрокиПоПоставщикам Цикл
			СтрокаРасшифровка = РасшифровкаПоказателей.Добавить();
			СтрокаРасшифровка.Дата = СтрокаКалендарь.Дата;
			СтрокаРасшифровка.Организация = СтрокаКалендарь.Организация;
			СтрокаРасшифровка.Статья = СтрокаПоставщик.СтатьяДвиженияДенежныхСредств;
			СтрокаРасшифровка.Сумма = СтрокаПоставщик.СуммаДокумента;
			СтрокаКалендарь.Поставщики = СтрокаКалендарь.Поставщики + СтрокаПоставщик.СуммаДокумента;
			СтрокаРасшифровка.ИмяПоказателя = "Поставщики";
		КонецЦикла;	
	КонецЦикла;	
	
	//добавим депозиты
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.ФормироватьДоДаты));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Организация,
	               |	ФинансовыйОстатки.Субконто2,
	               |	ФинансовыйОстатки.СуммаОстаток,
	               |	ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия КАК СрокДействия
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаКон, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеЗаймыВыданные), , ) КАК ФинансовыйОстатки
	               |ГДЕ
	               |	ФинансовыйОстатки.СуммаОстаток > 0
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Финансовый)
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ТипДоговораФинансы = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровФинансы.Депозит)
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия <= &ДатаКон
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия > ДАТАВРЕМЯ(1, 1, 1)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаДоговора = ПолучитьПоследнийРабочийДень(Выборка.СрокДействия);
		ДатаДоговора = ?(ДатаДоговора < НачалоДня(ТекущаяДата()), НачалоДня(ТекущаяДата()), ДатаДоговора);
		СтрокиДанные = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаДоговора));
		Если СтрокиДанные.Количество() > 0 Тогда
			СтрокаРасшифровка = РасшифровкаПоказателей.Добавить();
			СтрокаРасшифровка.Дата = ДатаДоговора;
			СтрокаРасшифровка.Организация = Выборка.Организация;
			СтрокаРасшифровка.Статья = Выборка.Субконто2;
			СтрокаРасшифровка.Сумма = Выборка.СуммаОстаток;
			СтрокаРасшифровка.ДопДанные = "Договор действует до: " + Формат(Выборка.СрокДействия, "ДФ=dd.MM.yyyy");
			СтрокиДанные[0].Депозиты = СтрокиДанные[0].Депозиты + Выборка.СуммаОстаток;
			СтрокаРасшифровка.ИмяПоказателя = "Депозиты";
		КонецЕсли;
	КонецЦикла;	
				   
	ДанныеКалендаря.Сортировать("Дата, Организация");
	ПересчитатьДанныеКалендаря();
		
КонецПроцедуры

Процедура ОпределитьМинимальнуюДату(ТаблицаСтатей, МинДата)
	
	Для Каждого СтрокаТаб Из ТаблицаСтатей Цикл
		СтруктураНастройки = ПолучитьСтруктуруИзСтроки(СтрокаТаб.СтрокаСтруктура);
		Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
			ДатаРасчетная = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
			Если СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1 Тогда
				ДатаРасчетная = НачалоМесяца(ДобавитьМесяц(ДатаРасчетная, (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * -1));
			КонецЕсли;
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
			ДатаРасчетная = НачалоНедели(ТекущаяДата() - 86400*7);
			Если СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1 Тогда
				ДатаРасчетная = НачалоНедели(ДатаРасчетная - (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * 86400*7);
			КонецЕсли;
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
			ДатаРасчетная = НачалоКвартала(ДобавитьМесяц(ТекущаяДата(), -3));
			Если СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1 Тогда
				ДатаРасчетная = НачалоКвартала(ДобавитьМесяц(ДатаРасчетная, (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * -3));
			КонецЕсли;	
		КонецЕсли;	
		МинДата = Мин(МинДата, ДатаРасчетная);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьСредниеЗначения(ТаблицаСтатей, ТабСредниеЗначения, ТабДанныеРасходников)
	
	Для Каждого СтрокаТаб Из ТаблицаСтатей Цикл
		СтруктураНастройки = ПолучитьСтруктуруИзСтроки(СтрокаТаб.СтрокаСтруктура);
		Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
			ДатаРасчетная = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
			ДатаОбработки = ?(СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1, НачалоМесяца(ДобавитьМесяц(ДатаРасчетная, (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * -1)), ДатаРасчетная);
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
			ДатаРасчетная = НачалоНедели(ТекущаяДата() - 86400*7);
			ДатаОбработки = ?(СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1, НачалоНедели(ДатаРасчетная - (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * 86400 * 7), ДатаРасчетная);
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
			ДатаРасчетная = НачалоКвартала(ДобавитьМесяц(ТекущаяДата(), -3));
			ДатаОбработки = ?(СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы > 1, НачалоКвартала(ДобавитьМесяц(ДатаРасчетная, (СтруктураНастройки.КоличествоПериодовДляОпределенияСуммы - 1) * -3)), ДатаРасчетная);
		КонецЕсли;
		
		КолвоПериодов = 0;
		Пока ДатаОбработки <= ДатаРасчетная Цикл
			Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
				СтрокиДанные = ТабДанныеРасходников.НайтиСтроки(Новый Структура("СтатьяДвиженияДенежныхСредств, ДатаМесяц", СтрокаТаб.Статья, ДатаОбработки));
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
				СтрокиДанные = ТабДанныеРасходников.НайтиСтроки(Новый Структура("СтатьяДвиженияДенежныхСредств, ДатаНеделя", СтрокаТаб.Статья, ДатаОбработки));
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
				СтрокиДанные = ТабДанныеРасходников.НайтиСтроки(Новый Структура("СтатьяДвиженияДенежныхСредств, ДатаКвартал", СтрокаТаб.Статья, ДатаОбработки));
			КонецЕсли;
			ТабВремСвертка = Новый ТаблицаЗначений();
			ТабВремСвертка.Колонки.Добавить("Организация");
			ТабВремСвертка.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
			ТабВремСвертка.Колонки.Добавить("СуммаДокумента");
			Для Каждого СтрокаДанные Из СтрокиДанные Цикл
				ЗаполнитьЗначенияСвойств(ТабВремСвертка.Добавить(), СтрокаДанные);
			КонецЦикла;
			ТабВремСвертка.Свернуть("Организация, СтатьяДвиженияДенежныхСредств", "СуммаДокумента");
			ТабВремСвертка.Колонки.Добавить("КолвоПериодов");
			ТабВремСвертка.ЗаполнитьЗначения(1, "КолвоПериодов");
				
			Для Каждого СтрокаДанные Из ТабВремСвертка Цикл
				СтрокаДоб = ТабСредниеЗначения.Добавить();
				СтрокаДоб.Организация = СтрокаДанные.Организация;
				СтрокаДоб.Статья = СтрокаДанные.СтатьяДвиженияДенежныхСредств;
				СтрокаДоб.СредняяСуммаНаПериод = СтрокаДанные.СуммаДокумента + СтрокаДанные.СуммаДокумента * СтруктураНастройки.УвеличиватьРасчитаннуюСуммуНаПроцент / 100;
				СтрокаДоб.КолвоПериодов = СтрокаДанные.КолвоПериодов;
			КонецЦикла;
			
			Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
				ДатаОбработки = НачалоМесяца(ДобавитьМесяц(ДатаОбработки, 1));
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда	
				ДатаОбработки = НачалоНедели(ДатаОбработки + 7*86400);
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда	
				ДатаОбработки = НачалоКвартала(ДобавитьМесяц(ДатаОбработки, 3));
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

Процедура РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(ТаблицаСтатей, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, Тип)
	
	Для Каждого СтрокаСтатья Из ТаблицаСтатей Цикл
		СтруктураНастройки = ПолучитьСтруктуруИзСтроки(СтрокаСтатья.СтрокаСтруктура);
		Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
			ДатаРасчетная = НачалоМесяца(ТекущаяДата());
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
			ДатаРасчетная = НачалоНедели(ТекущаяДата());
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
			ДатаРасчетная = НачалоКвартала(ТекущаяДата());
		КонецЕсли;
		
		Пока ДатаРасчетная <= Объект.ФормироватьДоДаты Цикл
			
			Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
				ДатаСледующая = ДобавитьМесяц(ДатаРасчетная, 1);
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
				ДатаСледующая = ДатаРасчетная + 86400*7;
			ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
				ДатаСледующая = ДобавитьМесяц(ДатаРасчетная, 3);
			КонецЕсли;
			
			ТаблицаРаспределенияСуммы = Новый ТаблицаЗначений();
			ТаблицаРаспределенияСуммы.Колонки.Добавить("Дата");
			ТаблицаРаспределенияСуммы.Колонки.Добавить("База");
			ТаблицаРаспределенияСуммы.Колонки.Добавить("РаспределенаСумма");
			
			Пока ДатаРасчетная < ДатаСледующая Цикл
				КоэфДляДня = 0;
				Если СтруктураНастройки.СпособОплатыВМесяце = 0 Тогда
					КоэфДляДня = 1;
				ИначеЕсли СтруктураНастройки.СпособОплатыВМесяце = 1 Тогда
					СтрокаНастройка = СтруктураНастройки.ТабДниНедели.Найти(ДеньНедели(ДатаРасчетная), "ДеньЧислом");
					Если СтрокаНастройка <> Неопределено Тогда
						КоэфДляДня = СтрокаНастройка.ПроцентОтСуммы;
					Иначе
						КоэфДляДня = 0;
					КонецЕсли;
				ИначеЕсли СтруктураНастройки.СпособОплатыВМесяце = 2 Тогда
					СтрокаНастройка = СтруктураНастройки.ТабДниМесяца.Найти(День(ДатаРасчетная), "ДеньЧислом");
					Если СтрокаНастройка <> Неопределено Тогда
						КоэфДляДня = СтрокаНастройка.ПроцентОтСуммы;
					Иначе
						КоэфДляДня = 0;
					КонецЕсли;	
				КонецЕсли;	
				Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
					СтрокаКвартал = СтруктураНастройки.ТабПоКварталу.Найти(Месяц(ДатаРасчетная) - Месяц(НачалоКвартала(ДатаРасчетная)) + 1, "МесяцЧислом");
					ОбщийКоэффициент = КоэфДляДня * ?(СтрокаКвартал = Неопределено, 0, СтрокаКвартал.ПроцентОтСуммы);
				Иначе	
					ОбщийКоэффициент = КоэфДляДня;
				КонецЕсли;
				СтрокаДоб = ТаблицаРаспределенияСуммы.Добавить();
				СтрокаДоб.Дата = ДатаРасчетная;
				СтрокаДоб.База = ОбщийКоэффициент;
				ДатаРасчетная = ДатаРасчетная + 86400;
			КонецЦикла;
			
			СтрокиДанныеСредние = ТабСредниеЗначения.НайтиСтроки(Новый Структура("Статья", СтрокаСтатья.Статья));
			Для Каждого СтрокаДанныеСреднего Из СтрокиДанныеСредние Цикл
				ТабРаспределениеПоОрг = ТаблицаРаспределенияСуммы.Скопировать();
				МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаДанныеСреднего.СредняяСуммаНаПериод, ТабРаспределениеПоОрг.ВыгрузитьКолонку("База"));
				Если МассивРаспределения <> Неопределено Тогда
					ТабРаспределениеПоОрг.ЗагрузитьКолонку(МассивРаспределения, "РаспределенаСумма");
				КонецЕсли;
				ТабРаспределениеПоОрг.Сортировать("Дата");
				Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
					СтрокиУжеЕстьОплата = ТабДанныеРасходников.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств, ДатаМесяц", СтрокаДанныеСреднего.Организация, СтрокаСтатья.Статья, НачалоМесяца(ДатаРасчетная)));
				ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
					СтрокиУжеЕстьОплата = ТабДанныеРасходников.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств, ДатаНеделя", СтрокаДанныеСреднего.Организация, СтрокаСтатья.Статья, НачалоНедели(ДатаРасчетная)));
				ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
					СтрокиУжеЕстьОплата = ТабДанныеРасходников.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств, ДатаКвартал", СтрокаДанныеСреднего.Организация, СтрокаСтатья.Статья, НачалоКвартала(ДатаРасчетная)));
				КонецЕсли;
				СуммаОплачено = 0;
				Для Каждого СтрокаУжеОплачено Из СтрокиУжеЕстьОплата Цикл
					СуммаОплачено = СуммаОплачено + СтрокаУжеОплачено.СуммаДокумента;
				КонецЦикла;	
				Для Каждого СтрокаРаспределено Из ТабРаспределениеПоОрг Цикл
					Если СуммаОплачено <= 0 Тогда
						Прервать;
					КонецЕсли;
					МинСумма = Мин(СтрокаРаспределено.РаспределенаСумма, СуммаОплачено);
					СтрокаРаспределено.РаспределенаСумма = СтрокаРаспределено.РаспределенаСумма - МинСумма;
					СуммаОплачено = СуммаОплачено - МинСумма;
				КонецЦикла;
				
				//передвинем выходные и праздничные дни на оплату позже
				Для Каждого СтрокаРаспределено Из ТабРаспределениеПоОрг Цикл
					СтрокаРабДень = ТабРабочиеДни.Найти(СтрокаРаспределено.Дата, "ДатаКалендаря");
					Пока СтрокаРабДень = Неопределено
						И СтрокаРаспределено.Дата < ДатаСледующая Цикл
						СтрокаРаспределено.Дата = СтрокаРаспределено.Дата + 86400;
						СтрокаРабДень = ТабРабочиеДни.Найти(СтрокаРаспределено.Дата, "ДатаКалендаря");
					КонецЦикла;	
				КонецЦикла;
				
				ТабРаспределениеПоОрг.Свернуть("Дата", "РаспределенаСумма");
				
				Для Каждого СтрокаРаспределено Из ТабРаспределениеПоОрг Цикл
					СтрокиДанные = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", СтрокаДанныеСреднего.Организация, НачалоДня(СтрокаРаспределено.Дата)));
					Если СтрокиДанные.Количество() > 0 Тогда
						СтрокаРасшифровка = РасшифровкаПоказателей.Добавить();
						СтрокаРасшифровка.Дата = СтрокиДанные[0].Дата;
						СтрокаРасшифровка.Организация = СтрокиДанные[0].Организация;
						СтрокаРасшифровка.Статья = СтрокаСтатья.Статья;
						СтрокаРасшифровка.Сумма = СтрокаРаспределено.РаспределенаСумма;
						Если Тип = "Поставщики" Тогда
							СтрокиДанные[0].Поставщики = СтрокиДанные[0].Поставщики + СтрокаРаспределено.РаспределенаСумма;
						ИначеЕсли Тип = "Аренда" Тогда
							СтрокиДанные[0].Аренда = СтрокиДанные[0].Аренда + СтрокаРаспределено.РаспределенаСумма;
						ИначеЕсли Тип = "Зарплата" Тогда
							СтрокиДанные[0].Зарплата = СтрокиДанные[0].Зарплата + СтрокаРаспределено.РаспределенаСумма;
						ИначеЕсли Тип = "Налоги" Тогда
							СтрокиДанные[0].Налоги = СтрокиДанные[0].Налоги + СтрокаРаспределено.РаспределенаСумма;
						ИначеЕсли Тип = "Прочее" Тогда	                                                               
							СтрокиДанные[0].Прочее = СтрокиДанные[0].Прочее + СтрокаРаспределено.РаспределенаСумма;
						КонецЕсли;	
						СтрокаРасшифровка.ИмяПоказателя = Тип;
					КонецЕсли;
				КонецЦикла;	
				
			КонецЦикла;	
			
			ДатаРасчетная = ДатаСледующая;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьТаблицуСредних()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(КоличествоДнейДляОценкиСреднегоЭквИнкас, "ЧГ=0") + "
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Проведен = ИСТИНА
	               |	И ЛистУчета.Дата <= &ТекДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_Данные.Дата) КАК МинДата,
	               |	МАКСИМУМ(ВТ_Данные.Дата) КАК МаксДата
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	МинДата = ТекущаяДата();
	МаксДата = ТекущаяДата();
	Если Выборка.Следующий() Тогда
		МинДата = Выборка.МинДата;
		МаксДата = Выборка.МаксДата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(МинДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(МаксДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК КолвоПериодов,
	               |	СУММА(ЛистУчета.СуммаИнкассации) КАК СуммаИнкассации,
	               |	СУММА(ЛистУчета.СуммаЭквайринг) КАК СуммаЭквайринг,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчета.Организация";
				   
	ТабСредниеИнкассЭквайринг = Новый ТаблицаЗначений();
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Организация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Инкассация");
	ТабСредниеИнкассЭквайринг.Колонки.Добавить("Эквайринг");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабСредниеИнкассЭквайринг.Добавить();
		СтрокаТаб.Организация = Выборка.Организация;
		СтрокаТаб.Инкассация = Цел(Выборка.СуммаИнкассации / Выборка.КолвоПериодов);
		СтрокаТаб.Эквайринг = Цел(Выборка.СуммаЭквайринг / Выборка.КолвоПериодов * (100 - ПроцентКомиссииБанкаПоЭквайрингу) / 100);
	КонецЦикла;
	
	Возврат ТабСредниеИнкассЭквайринг;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДанныеКалендаря()
	
	ДанныеКалендаря.Очистить();
	РасшифровкаПоказателей.Очистить();
	
	МассивОрганизации = Новый Массив();
	Для Каждого СтрокаОрг Из Организации Цикл
		МассивОрганизации.Добавить(СтрокаОрг.Организация);
	КонецЦикла;	
	
	//получим средние значения инкассации и эквайринга по листам учета
	ТабСредниеИнкассЭквайринг = ПолучитьТаблицуСредних();
	
	//Начнем с текущего дня, берем остаток в приход ставим
	ЗапросОстатки = Новый Запрос();
	ЗапросОстатки.УстановитьПараметр("ДатаОстатки", НачалоДня(ТекущаяДата()));
	ЗапросОстатки.УстановитьПараметр("Счет51_1", ПланыСчетов.Финансовый.РасчетныйСчет);
	ЗапросОстатки.УстановитьПараметр("Организации", МассивОрганизации);
	ЗапросОстатки.Текст = "ВЫБРАТЬ
	                      |	ФинансовыйОстатки.Организация,
	                      |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток
	                      |ИЗ
	                      |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = &Счет51_1, , ) КАК ФинансовыйОстатки
	                      |ГДЕ
	                      |	ФинансовыйОстатки.Организация В (&Организации)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФинансовыйОстатки.Организация";
						  
	Выборка = ЗапросОстатки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ДанныеКалендаря.Добавить();
		СтрокаДоб.Дата = ТекущаяДата();
		СтрокаДоб.Организация = Выборка.Организация;
		СтрокаДоб.НачальныйОстаток = Выборка.СуммаОстаток;
	КонецЦикла;
	
	Для Каждого ЭлементОрг Из МассивОрганизации Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация", ЭлементОрг));
		Если СтрокиТаб.Количество() = 0 Тогда
			СтрокаДоб = ДанныеКалендаря.Добавить();
			СтрокаДоб.Дата = ТекущаяДата();
			СтрокаДоб.Организация = Выборка.Организация;
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаИнкассации,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.СуммаЭквайринг,
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Организация
	               |ИЗ
	               |	РегистрСведений.СлужебныеДанныеДляПлатежногоКалендаряМесяц КАК СлужебныеДанныеДляПлатежногоКалендаряМесяц
	               |ГДЕ
	               |	СлужебныеДанныеДляПлатежногоКалендаряМесяц.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, НачалоДня(ТекущаяДата())));
		Если СтрокиТаб.Количество() > 0 Тогда
			СтрокиТаб[0].ПриходЭквайринг = Выборка.СуммаЭквайринг;
			СтрокиТаб[0].ПриходИнкассация = Выборка.СуммаИнкассации;
		КонецЕсли;	
	КонецЦикла;	
	
    ДатаОбработки = ТекущаяДата() + 86400;
	Пока ДатаОбработки <= Объект.ФормироватьДоДаты Цикл
		Для Каждого ЭлементОрг Из МассивОрганизации Цикл
			СтрокиТаб = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаОбработки));
			Если СтрокиТаб.Количество() = 0 Тогда
				СтрокаТаб = ДанныеКалендаря.Добавить();
				СтрокаТаб.Дата = ДатаОбработки;
				СтрокаТаб.Организация = ЭлементОрг;
				СтрокаИнкассСредняя = ТабСредниеИнкассЭквайринг.Найти(ЭлементОрг, "Организация");
				Если СтрокаИнкассСредняя <> Неопределено Тогда
					СтрокаТаб.ПриходЭквайринг = СтрокаИнкассСредняя.Эквайринг * (1 + ПроцентУвеличенияОборотовЕжемесячно * РазницаВМесяцах(ДатаОбработки) / 100);
					СтрокаТаб.ПриходИнкассация = СтрокаИнкассСредняя.Инкассация * (1 + ПроцентУвеличенияОборотовЕжемесячно * РазницаВМесяцах(ДатаОбработки) / 100);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;
	
	МассивКонтровИсключить = Новый Массив(); //нужно выкинут внутренние перепродажи
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031"));
	
	//определим самую минимальную дату для начала определния расходов
	МинДата = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
	ОпределитьМинимальнуюДату(СтатьиДДСПоставщики, МинДата);
	ОпределитьМинимальнуюДату(СтатьиДДСАренда, МинДата);
	ОпределитьМинимальнуюДату(СтатьиДДСЗарплата, МинДата);
	ОпределитьМинимальнуюДату(СтатьиДДСНалоги, МинДата);
	
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачОценки", МинДата); 
	Запрос.УстановитьПараметр("СтатьяИсключить", СтатьиДДСИсключить.Выгрузить().ВыгрузитьКолонку("Статья"));
	Запрос.УстановитьПараметр("СтатьяПоставщики", СтатьиДДСПоставщики.Выгрузить().ВыгрузитьКолонку("Статья"));
	Запрос.УстановитьПараметр("СтатьяАренда", СтатьиДДСАренда.Выгрузить().ВыгрузитьКолонку("Статья"));
	Запрос.УстановитьПараметр("СтатьяЗарплата", СтатьиДДСЗарплата.Выгрузить().ВыгрузитьКолонку("Статья"));
	Запрос.УстановитьПараметр("СтатьяНалоги", СтатьиДДСНалоги.Выгрузить().ВыгрузитьКолонку("Статья"));
	Запрос.УстановитьПараметр("КонтрагентыИсключить", МассивКонтровИсключить);
	Запрос.УстановитьПараметр("Организации", МассивОрганизации);
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.ФормироватьДоДаты));
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходИзБанка.Организация КАК Организация,
	               |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, НЕДЕЛЯ) КАК ДатаНеделя,
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ) КАК ДатаМесяц,
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, КВАРТАЛ) КАК ДатаКвартал,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	               |				ТОГДА ЛОЖЬ
	               |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяАренда)
	               |				ТОГДА ЛОЖЬ
	               |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяЗарплата)
	               |				ТОГДА ЛОЖЬ
	               |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяНалоги)
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ) КАК ЭтоПрочее,
	               |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента
	               |ИЗ
	               |	Документ.РасходИзБанка КАК РасходИзБанка
	               |ГДЕ
	               |	РасходИзБанка.Дата >= &ДатаНачОценки
	               |	И РасходИзБанка.Проведен = ИСТИНА
	               |	И НЕ РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяИсключить)
	               |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	               |	И РасходИзБанка.Организация В(&Организации)
	               |	И РасходИзБанка.Оплачено = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходИзБанка.Организация,
	               |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, НЕДЕЛЯ),
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ),
	               |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, КВАРТАЛ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	               |ИЗ
	               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачОценки И &ДатаКон
	               |	И РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря УБЫВ";
								  
								  
	Результаты = Запрос.ВыполнитьПакет();
	ТабДанныеРасходников = Результаты[0].Выгрузить();
	ТабРабочиеДни = Результаты[1].Выгрузить();
	ТабСредниеЗначения = Новый ТаблицаЗначений();
	ТабСредниеЗначения.Колонки.Добавить("Организация");
	ТабСредниеЗначения.Колонки.Добавить("Статья");
	ТабСредниеЗначения.Колонки.Добавить("СредняяСуммаНаПериод", Новый ОписаниеТипов("Число"));
	ТабСредниеЗначения.Колонки.Добавить("КолвоПериодов", Новый ОписаниеТипов("Число"));
	
	ТабПрочие = Новый ТаблицаЗначений();
	ТабПрочие.Колонки.Добавить("Статья");
	ТабПрочие.Колонки.Добавить("СтрокаСтруктура");
	СтрокиПрочие = ТабДанныеРасходников.НайтиСтроки(Новый Структура("ЭтоПрочее", Истина));
	Для Каждого СтрокаПрочего Из СтрокиПрочие Цикл
		СтрокаДоб = ТабПрочие.Добавить();
		СтрокаДоб.Статья = СтрокаПрочего.СтатьяДвиженияДенежныхСредств;
		СтрокаДоб.СтрокаСтруктура = "";
	КонецЦикла;
	
	ТабПрочие.Свернуть("Статья, СтрокаСтруктура");
	
	ЗаполнитьСредниеЗначения(СтатьиДДСПоставщики, ТабСредниеЗначения, ТабДанныеРасходников);
	ЗаполнитьСредниеЗначения(СтатьиДДСАренда, ТабСредниеЗначения, ТабДанныеРасходников);
	ЗаполнитьСредниеЗначения(СтатьиДДСЗарплата, ТабСредниеЗначения, ТабДанныеРасходников);
	ЗаполнитьСредниеЗначения(СтатьиДДСНалоги, ТабСредниеЗначения, ТабДанныеРасходников);
	ЗаполнитьСредниеЗначения(ТабПрочие, ТабСредниеЗначения, ТабДанныеРасходников);
	
	ТабСредниеЗначения.Свернуть("Организация, Статья", "СредняяСуммаНаПериод, КолвоПериодов");
	Для Каждого СтрокаСредние Из ТабСредниеЗначения Цикл
		Если СтрокаСредние.КолвоПериодов = 0 Тогда
			СтрокаСредние.СредняяСуммаНаПериод = 0;
		Иначе
			СтрокаСредние.СредняяСуммаНаПериод = СтрокаСредние.СредняяСуммаНаПериод / СтрокаСредние.КолвоПериодов;
		КонецЕсли;	
	КонецЦикла;
	
	РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(СтатьиДДСПоставщики, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, "Поставщики");
	РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(СтатьиДДСАренда, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, "Аренда");
	РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(СтатьиДДСЗарплата, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, "Зарплата");
	РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(СтатьиДДСНалоги, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, "Налоги");
	РазнестиДанныеВКалендарьСогласноПолитикеПоСтатье(ТабПрочие, ТабСредниеЗначения, ТабДанныеРасходников, ТабРабочиеДни, "Прочее");
	
	//добавим депозиты
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.ФормироватьДоДаты));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Организация,
	               |	ФинансовыйОстатки.Субконто2,
	               |	ФинансовыйОстатки.СуммаОстаток,
	               |	ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия КАК СрокДействия
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаКон, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеЗаймыВыданные), , ) КАК ФинансовыйОстатки
	               |ГДЕ
	               |	ФинансовыйОстатки.СуммаОстаток > 0
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Финансовый)
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ТипДоговораФинансы = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровФинансы.Депозит)
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия <= &ДатаКон
	               |	И ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокДействия > ДАТАВРЕМЯ(1, 1, 1)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаДоговора = ПолучитьПоследнийРабочийДень(Выборка.СрокДействия);
		ДатаДоговора = ?(ДатаДоговора < НачалоДня(ТекущаяДата()), НачалоДня(ТекущаяДата()), ДатаДоговора);
		СтрокиДанные = ДанныеКалендаря.НайтиСтроки(Новый Структура("Организация, Дата", Выборка.Организация, ДатаДоговора));
		Если СтрокиДанные.Количество() > 0 Тогда
			СтрокаРасшифровка = РасшифровкаПоказателей.Добавить();
			СтрокаРасшифровка.Дата = ДатаДоговора;
			СтрокаРасшифровка.Организация = Выборка.Организация;
			СтрокаРасшифровка.Статья = Выборка.Субконто2;
			СтрокаРасшифровка.Сумма = Выборка.СуммаОстаток;
			СтрокаРасшифровка.ДопДанные = "Договор действует до: " + Формат(Выборка.СрокДействия, "ДФ=dd.MM.yyyy");
			СтрокиДанные[0].Депозиты = СтрокиДанные[0].Депозиты + Выборка.СуммаОстаток;
			СтрокаРасшифровка.ИмяПоказателя = "Депозиты";
		КонецЕсли;
	КонецЦикла;	
				   
	ДанныеКалендаря.Сортировать("Дата, Организация");
	ПересчитатьДанныеКалендаря();
		
КонецПроцедуры

Процедура ПересчитатьДанныеКалендаря()
	
	ИтогНачОстаток = 0;
	ИтогЭквайринг = 0;
	ИтогИнкассация = 0;
	ИтогПоставщики = 0;
	ИтогАренда = 0;
	ИтогПрочее = 0;
	ИтогЗарплата = 0;
	ИтогНалоги = 0;
	ИтогДепозиты = 0;
	Для Каждого СтрокаТаб Из ДанныеКалендаря Цикл
		СтрокиПред = ДанныеКалендаря.НайтиСтроки(Новый Структура("Дата, Организация", НачалоДня(СтрокаТаб.Дата - 86400), СтрокаТаб.Организация));
		Если СтрокиПред.Количество() > 0 Тогда
			СтрокаТаб.НачальныйОстаток = СтрокиПред[0].КонечныйОстаток;
		Иначе
			ИтогНачОстаток = ИтогНачОстаток + СтрокаТаб.НачальныйОстаток;
		КонецЕсли;	
		СтрокаТаб.КонечныйОстаток = СтрокаТаб.НачальныйОстаток + СтрокаТаб.ПриходЭквайринг + СтрокаТаб.ПриходИнкассация + СтрокаТаб.Депозиты - СтрокаТаб.Поставщики - СтрокаТаб.Аренда - СтрокаТаб.Прочее - СтрокаТаб.Зарплата - СтрокаТаб.Налоги;
		ИтогЭквайринг = ИтогЭквайринг + СтрокаТаб.ПриходЭквайринг;
		ИтогИнкассация = ИтогИнкассация + СтрокаТаб.ПриходИнкассация;
		ИтогПоставщики = ИтогПоставщики + СтрокаТаб.Поставщики;
		ИтогАренда = ИтогАренда + СтрокаТаб.Аренда;
		ИтогПрочее = ИтогПрочее + СтрокаТаб.Прочее;
		ИтогЗарплата = ИтогЗарплата + СтрокаТаб.Зарплата;
		ИтогНалоги = ИтогНалоги + СтрокаТаб.Налоги;
		ИтогДепозиты = ИтогДепозиты + СтрокаТаб.Депозиты;
	КонецЦикла;
	
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряОрганизация.ТекстПодвала = "Итого";
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряНачальныйОстаток.ТекстПодвала = ИтогНачОстаток;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряПриходЭквайринг.ТекстПодвала = ИтогЭквайринг;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряПриходИнкассация.ТекстПодвала = ИтогИнкассация;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряОплатаПоставщикам.ТекстПодвала = ИтогПоставщики;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряАренда.ТекстПодвала = ИтогАренда;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряПрочее.ТекстПодвала = ИтогПрочее;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряЗарплата.ТекстПодвала = ИтогЗарплата;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряНалоги.ТекстПодвала = ИтогНалоги;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряДепозиты.ТекстПодвала = ИтогДепозиты;
	Элементы.ДанныеКалендаря.ПодчиненныеЭлементы.ДанныеКалендаряКонечныйОстаток.ТекстПодвала = ИтогНачОстаток + ИтогЭквайринг + ИтогИнкассация + ИтогДепозиты - ИтогПоставщики - ИтогАренда - ИтогПрочее - ИтогЗарплата - ИтогНалоги;
	
КонецПроцедуры	

Процедура ЗаполнитьСтатьиПоставщика()
	
	СтрокаДоб = СтатьиДДСПоставщики.Добавить();
	СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110");
	СтрокаДоб = СтатьиДДСПоставщики.Добавить();
	СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120111");
	СтрокаДоб = СтатьиДДСПоставщики.Добавить();
	СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120210");
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиАренда()
	
	МассивСтатья = Новый Массив();
	МассивСтатья.Добавить("135011"); //Оплата Аренда склада Строгино + доп. Расходы
	МассивСтатья.Добавить("135010"); //Оплата Аренда склада Марьино +доп. Расходы
	МассивСтатья.Добавить("181014"); //Оплата Аренды офиса (для Финансовой службы)
	МассивСтатья.Добавить("210111"); //Оплата Аренды части склада для оборудования Управления развития
	МассивСтатья.Добавить("135023"); //Оплата Аренда части склада Кавказский для хранения оборудования
	МассивСтатья.Добавить("200613"); //Оплата Аренды части офиса для Отдела персонала
	МассивСтатья.Добавить("135028"); //Оплата Депозит Аренда склада Кавказский
	МассивСтатья.Добавить("135029"); //Оплата Депозит Аренда склада Адмирала Макарова
	МассивСтатья.Добавить("137119"); //Оплата Депозит Аренды офисов
	МассивСтатья.Добавить("131010"); //Оплата аренды (торговых точек и магазинов)
	МассивСтатья.Добавить("137120"); //Оплата Аренды офисов
	МассивСтатья.Добавить("135018"); //Оплата Аренда части склада Кавказский для фасовки товаров
	
	Для Каждого ЭлементСтатья Из МассивСтатья Цикл
		СтрокаДоб = СтатьиДДСАренда.Добавить();
		СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(ЭлементСтатья);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиЗарплата()
	
	МассивСтатья = Новый Массив();
	МассивСтатья.Добавить("134010"); //Оплата Зарплаты (Зарплата Управления расчета заказов)
	МассивСтатья.Добавить("133010"); //Оплата Зарплаты (Управляющих ТТ и помощников)
	МассивСтатья.Добавить("135012"); //Оплата Зарплаты (Зарплата Складских работников)
	МассивСтатья.Добавить("181010"); //Оплата Зарплаты Управления финансами
	МассивСтатья.Добавить("138111"); //Оплата Зарплаты Управления по общей рекламе
	МассивСтатья.Добавить("200610"); //Оплата Зарплаты Отдела персонала (поиск продавцов на новые ТТ)
	МассивСтатья.Добавить("133121"); //Оплата зарплаты (постоянная часть - проезд, экскурсии, )
	МассивСтатья.Добавить("120525"); //Оплата Услуг аутсорсинга продавцов
	МассивСтатья.Добавить("136210"); //Оплата Зарплаты (Проект "Магазины")
	МассивСтатья.Добавить("137193"); //Оплата Зарплаты (Управления развития)
	МассивСтатья.Добавить("120213"); //Оплата зарплаты менеджеров по упаковке 
	МассивСтатья.Добавить("131012"); //Оплата Зарплаты менеджера по аренде
	МассивСтатья.Добавить("120510"); //Оплата зарплаты продавцов (бонусная часть)
	МассивСтатья.Добавить("133110"); //Оплата зарплаты (постоянная часть)
	МассивСтатья.Добавить("136110"); //Оплата Зарплаты (Зарплата Управления качества)
	МассивСтатья.Добавить("137110"); //Оплата Зарплаты (Офис)
	МассивСтатья.Добавить("139210"); //Оплата Зарплаты (Управления Персонала)
	МассивСтатья.Добавить("141010"); //Оплата Зарплаты УЕК
	МассивСтатья.Добавить("200210"); //Оплата Зарплаты сотрудников Управления развития (премии)
	МассивСтатья.Добавить("220110"); //Оплата зарплаты (Проект "Доставка")
	МассивСтатья.Добавить("135017"); //Оплата Аутсорсинга складских работников
	МассивСтатья.Добавить("135019"); //Оплата Зарплаты (Зарплата Склада Фасовки)
	МассивСтатья.Добавить("181016"); //Оплата Зарплаты Управления по финансовому контролю и учету
	
	Для Каждого ЭлементСтатья Из МассивСтатья Цикл
		СтрокаДоб = СтатьиДДСЗарплата.Добавить();
		СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(ЭлементСтатья);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиНалоги()
	
	МассивСтатья = Новый Массив();
	МассивСтатья.Добавить("134011"); //Оплата налогов ФОТ (Управления расчета заказов)
	МассивСтатья.Добавить("133011"); //Оплата налоги ФОТ(Управляющих ТТ и помощников)
	МассивСтатья.Добавить("135013"); //Оплата налогов ФОТ (Складских работников)
	МассивСтатья.Добавить("181011"); //Оплата налогов ФОТ(Управление финансами)
	МассивСтатья.Добавить("138112"); //Налоги ФОТ(Управления по общей рекламе)
	МассивСтатья.Добавить("200111"); //Оплата налогов ФОТ (Премии Управления по общей рекламе)
	МассивСтатья.Добавить("230102"); //Налоги от ФОТ проекта "Магазины"
	МассивСтатья.Добавить("200611"); //Оплата Налогов ФОТ Отдела персонала (поиск продавцов на новые ТТ)
	МассивСтатья.Добавить("220111"); //Оплата налогов от ФОТ (Проект "Доставка")
	МассивСтатья.Добавить("120524"); //Оплата Резерва на налоги ФОТ (отпускные продавцов)
	МассивСтатья.Добавить("137198"); //Оплата Резерва на налоги ФОТ (отпускные прочего персонала)
	МассивСтатья.Добавить("120741"); //Оплата Налога на имущество
	МассивСтатья.Добавить("139404"); //НЕ ИСПОЛЬЗОВАТЬ ! Оплата Налогов от ФОТ менеджера по аренде (Магазины)
	МассивСтатья.Добавить("139351"); //Оплата Подотчет налоги с ФОТ
	МассивСтатья.Добавить("138114"); //Налоги ФОТ с Премий (Управления по общей рекламе)
	МассивСтатья.Добавить("136220"); //Оплата налогов ФОТ (Проект "Магазины")
	МассивСтатья.Добавить("137194"); //Оплата налогов ФОТ (Управление развития)
	МассивСтатья.Добавить("131013"); //Оплата налогов ФОТ(менеджер по аренде)
	МассивСтатья.Добавить("120214"); //Оплата налогов ФОТ менеджеров по упаковке
	МассивСтатья.Добавить("131014"); //Оплата налогов ФОТ(менеджер по аренде)
	МассивСтатья.Добавить("120710"); //Оплата налога УСН
	МассивСтатья.Добавить("120520"); //Оплата налогов ФОТ(бонусная часть продавцов)
	МассивСтатья.Добавить("120720"); //Оплата Налога ЕНВД
	МассивСтатья.Добавить("120740"); //Оплата налога на прибыль
	МассивСтатья.Добавить("133120"); //Оплата налогов от ФОТ(постоянная часть)
	МассивСтатья.Добавить("136120"); //Оплата налогов ФОТ (Управления качества)
	МассивСтатья.Добавить("137115"); //Оплата налогов ФОТ (Офис)
	МассивСтатья.Добавить("139220"); //Оплата Налогов ФОТ(Управление Персонала)
	МассивСтатья.Добавить("141020"); //Оплата налогов ФОТ УЕК
	МассивСтатья.Добавить("151020"); //Оплата налогов ФОТ (от Бонусов управляющих ТТ)
	МассивСтатья.Добавить("152020"); //Оплата налогов ФОТ Бонусов от Прибыли
	МассивСтатья.Добавить("200220"); //Оплата налогов ФОТ Управления развития (оплата поиска ТТ)
	МассивСтатья.Добавить("135020"); //Оплата налогов ФОТ (Склад Фасовки)
	МассивСтатья.Добавить("121302"); //Оплата Резерва на налоги ФОТ (отпускные)
	МассивСтатья.Добавить("181015"); //Оплата налогов ФОТ(Управление по финансовому контролю и учету)
	
	Для Каждого ЭлементСтатья Из МассивСтатья Цикл
		СтрокаДоб = СтатьиДДСНалоги.Добавить();
		СтрокаДоб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(ЭлементСтатья);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьОрганизации()
	
	СтрокаДоб = Организации.Добавить();
	СтрокаДоб.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	СтрокаДоб = Организации.Добавить();
	СтрокаДоб.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
КонецПроцедуры	

Процедура ЗаполнитьНастройкиСтатейСРегистра()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлатежныйКалендарьНаМесяц_НастройкаСтатей.Статья,
	               |	ПлатежныйКалендарьНаМесяц_НастройкаСтатей.ВидЗатрат,
	               |	ПлатежныйКалендарьНаМесяц_НастройкаСтатей.СтатичнаяДатаПлатежа,
	               |	ПлатежныйКалендарьНаМесяц_НастройкаСтатей.СтруктураПолитикиРасчетаИОплаты
	               |ИЗ
	               |	РегистрСведений.ПлатежныйКалендарьНаМесяц_НастройкаСтатей КАК ПлатежныйКалендарьНаМесяц_НастройкаСтатей";
	
	ТабНастройка = Запрос.Выполнить().Выгрузить();
	Если ТабНастройка.Количество() > 0 Тогда
		СтатьиДДСПоставщики.Очистить();
		СтрокиДДС = ТабНастройка.НайтиСтроки(Новый Структура("ВидЗатрат", "Поставщики"));
		Для Каждого СтрокаДДС Из СтрокиДДС Цикл
			СтрокаДоб = СтатьиДДСПоставщики.Добавить();
			СтрокаДоб.Статья = СтрокаДДС.Статья;
			СтрокаДоб.СтрокаСтруктура = СтрокаДДС.СтруктураПолитикиРасчетаИОплаты.Получить();
			СтрокаДоб.СтрокаОписание = ПолучитьОписаниеНастроек(СтрокаДоб.СтрокаСтруктура);
		КонецЦикла;
		
		СтатьиДДСАренда.Очистить();
		СтрокиДДС = ТабНастройка.НайтиСтроки(Новый Структура("ВидЗатрат", "Аренда"));
		Для Каждого СтрокаДДС Из СтрокиДДС Цикл
			СтрокаДоб = СтатьиДДСАренда.Добавить();
			СтрокаДоб.Статья = СтрокаДДС.Статья;
			СтрокаДоб.СтрокаСтруктура = СтрокаДДС.СтруктураПолитикиРасчетаИОплаты.Получить();
			СтрокаДоб.СтрокаОписание = ПолучитьОписаниеНастроек(СтрокаДоб.СтрокаСтруктура);
		КонецЦикла;
		
		СтатьиДДСЗарплата.Очистить();
		СтрокиДДС = ТабНастройка.НайтиСтроки(Новый Структура("ВидЗатрат", "Зарплата"));
		Для Каждого СтрокаДДС Из СтрокиДДС Цикл
			СтрокаДоб = СтатьиДДСЗарплата.Добавить();
			СтрокаДоб.Статья = СтрокаДДС.Статья;
			СтрокаДоб.СтрокаСтруктура = СтрокаДДС.СтруктураПолитикиРасчетаИОплаты.Получить();
			СтрокаДоб.СтрокаОписание = ПолучитьОписаниеНастроек(СтрокаДоб.СтрокаСтруктура);
		КонецЦикла;
		
		СтатьиДДСИсключить.Очистить();
		СтрокиДДС = ТабНастройка.НайтиСтроки(Новый Структура("ВидЗатрат", "Исключить"));
		Для Каждого СтрокаДДС Из СтрокиДДС Цикл
			СтрокаДоб = СтатьиДДСИсключить.Добавить();
			СтрокаДоб.Статья = СтрокаДДС.Статья;
		КонецЦикла;
		
		СтатьиДДСНалоги.Очистить();
		СтрокиДДС = ТабНастройка.НайтиСтроки(Новый Структура("ВидЗатрат", "Налоги"));
		Для Каждого СтрокаДДС Из СтрокиДДС Цикл
			СтрокаДоб = СтатьиДДСНалоги.Добавить();
			СтрокаДоб.Статья = СтрокаДДС.Статья;
			СтрокаДоб.СтрокаСтруктура = СтрокаДДС.СтруктураПолитикиРасчетаИОплаты.Получить();
			СтрокаДоб.СтрокаОписание = ПолучитьОписаниеНастроек(СтрокаДоб.СтрокаСтруктура);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКалендарь.Видимость = Ложь;
	
	Если КоличествоМесяцевДляОценкиСреднего = 0 Тогда
		КоличествоМесяцевДляОценкиСреднего = 3;
	КонецЕсли;
	
	Если КоличествоДнейДляОценкиСреднегоЭквИнкас = 0 Тогда
		КоличествоДнейДляОценкиСреднегоЭквИнкас = 5;
	КонецЕсли;
	
	//Если ПроцентУвеличенияОборотовЕжемесячно = 0 Тогда
	//	ПроцентУвеличенияОборотовЕжемесячно = 10;
	//КонецЕсли;	
	
	//Если СтатьиДДСПоставщики.Количество() = 0 Тогда
	//	ЗаполнитьСтатьиПоставщика();
	//КонецЕсли;
	//
	//Если СтатьиДДСАренда.Количество() = 0 Тогда
	//	ЗаполнитьСтатьиАренда();
	//КонецЕсли;
	//
	//Если СтатьиДДСЗарплата.Количество() = 0 Тогда
	//	ЗаполнитьСтатьиЗарплата();
	//КонецЕсли;
	//
	//Если СтатьиДДСНалоги.Количество() = 0 Тогда
	//	ЗаполнитьСтатьиНалоги();
	//КонецЕсли;
	
	Если Организации.Количество() = 0 Тогда
		ЗаполнитьОрганизации();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ПроцентКомиссииБанкаПоЭквайрингу) Тогда
		ПроцентКомиссииБанкаПоЭквайрингу = 1;
	КонецЕсли;
	
	//заполним настройки статей, если есть настроенные данные в регистре
	ЗаполнитьНастройкиСтатейСРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанные(Команда)
	
	ЗаполнитьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКалендаряПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ПересчитатьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеРасшифровки()
	
	РасшифровкаПоказателейНаФорме.Очистить();
	ТекДанные = Элементы.ДанныеКалендаря.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряОплатаПоставщикам" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Поставщики"));
		//Элементы.Отчет.Видимость = Истина;
	ИначеЕсли Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряАренда" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Аренда"));
		//Элементы.Отчет.Видимость = Истина;
	ИначеЕсли Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряПрочее" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Прочее"));
		//Элементы.Отчет.Видимость = Истина;
	ИначеЕсли Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряЗарплата" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Зарплата"));
		//Элементы.Отчет.Видимость = Истина;
	ИначеЕсли Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряНалоги" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Налоги"));
		//Элементы.Отчет.Видимость = Истина;
	ИначеЕсли Элементы.ДанныеКалендаря.ТекущийЭлемент.Имя = "ДанныеКалендаряДепозиты" Тогда
		СтрокиТаб = РасшифровкаПоказателей.НайтиСтроки(Новый Структура("Дата, Организация, ИмяПоказателя", ТекДанные.Дата, ТекДанные.Организация, "Депозиты"));
		//Элементы.Отчет.Видимость = Ложь;
	Иначе
		//Элементы.Отчет.Видимость = Ложь;
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаТаб Из СтрокиТаб Цикл
		ЗаполнитьЗначенияСвойств(РасшифровкаПоказателейНаФорме.Добавить(), СтрокаТаб);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДанныеКалендаряПриАктивизацииЯчейки(Элемент)
	
	ОтобразитьДанныеРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ФормироватьДоДаты = КонецМесяца(ДобавитьМесяц(Объект.ФормироватьДоДаты, Направление));
	МесяцСтрокой = Формат(Объект.ФормироватьДоДаты, "ДФ='MMMM yyyy'");
	
КонецПроцедуры

Функция СформироватьОтчет(Статья, Организация, ДатаРасшифровки)
	
	ТабДокумент = Новый ТабличныйДокумент();
	
	МассивКонтровИсключить = Новый Массив(); //нужно выкинут внутренние перепродажи
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810"));
	МассивКонтровИсключить.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031"));
	
	КонПредМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
	ДатаНачНорма = НачалоМесяца(ДобавитьМесяц(КонПредМесяца, КоличествоМесяцевДляОценкиСреднего * -1));
	ДатаНачТекМесяц = НачалоМесяца(ТекущаяДата());
	
	ЗапросСреднихЗначений = Новый Запрос();
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНач", НачалоДня(ДобавитьМесяц(ТекущаяДата() - 86400, -1))); 
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата() - 86400));
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНачНорма", ДатаНачНорма);
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаКонНорма", КонПредМесяца);
	ЗапросСреднихЗначений.УстановитьПараметр("ДатаНачТек", ДатаНачТекМесяц);
	ЗапросСреднихЗначений.УстановитьПараметр("КонтрагентыИсключить", МассивКонтровИсключить);
	ЗапросСреднихЗначений.УстановитьПараметр("Организации", Организация);
	ЗапросСреднихЗначений.УстановитьПараметр("Статья", Статья);
	
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяПоставщики", СтатьиДДСПоставщики.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяАренда", СтатьиДДСАренда.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяЗарплата", СтатьиДДСЗарплата.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.УстановитьПараметр("СтатьяНалоги", СтатьиДДСНалоги.Выгрузить().ВыгрузитьКолонку("Статья"));
	ЗапросСреднихЗначений.Текст = "ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	МАКСИМУМ(ВЫБОР
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |				ТОГДА 0
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяАренда)
	                              |				ТОГДА 1
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяЗарплата)
	                              |				ТОГДА 2
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяНалоги)
	                              |				ТОГДА 3
	                              |			ИНАЧЕ 4
	                              |		КОНЕЦ) КАК Тип,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНачНорма И &ДатаКонНорма
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И РасходИзБанка.СтатьяДвиженияДенежныхСредств = &Статья
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента,
	                              |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ) КАК Месяц
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата >= &ДатаНачТек
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И РасходИзБанка.СтатьяДвиженияДенежныхСредств = &Статья
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, МЕСЯЦ)
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РасходИзБанка.Организация КАК Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                              |	СУММА(РасходИзБанка.СуммаДокумента) КАК СуммаДокумента,
	                              |	МАКСИМУМ(ВЫБОР
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяПоставщики)
	                              |				ТОГДА 0
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяАренда)
	                              |				ТОГДА 1
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяЗарплата)
	                              |				ТОГДА 2
	                              |			КОГДА РасходИзБанка.СтатьяДвиженияДенежныхСредств В (&СтатьяНалоги)
	                              |				ТОГДА 3
	                              |			ИНАЧЕ 4
	                              |		КОНЕЦ) КАК Тип,
	                              |	ДЕНЬ(РасходИзБанка.Дата) КАК День
	                              |ИЗ
	                              |	Документ.РасходИзБанка КАК РасходИзБанка
	                              |ГДЕ
	                              |	РасходИзБанка.Дата МЕЖДУ &ДатаНачНорма И &ДатаКонНорма
	                              |	И РасходИзБанка.Проведен = ИСТИНА
	                              |	И РасходИзБанка.СтатьяДвиженияДенежныхСредств = &Статья
	                              |	И НЕ РасходИзБанка.Контрагент В (&КонтрагентыИсключить)
	                              |	И РасходИзБанка.Организация В(&Организации)
	                              |	И РасходИзБанка.Оплачено = ИСТИНА
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РасходИзБанка.Организация,
	                              |	РасходИзБанка.СтатьяДвиженияДенежныхСредств,
	                              |	ДЕНЬ(РасходИзБанка.Дата)";
								  
								  
	Результаты = ЗапросСреднихЗначений.ВыполнитьПакет();
	ТабНормаНаМесяц = Результаты[0].Выгрузить();
	ТабНормаНаМесяц.Колонки.Добавить("СуммаНаМесяц");
	ТабБылоВТекМесяце = Результаты[1].Выгрузить();
	ТабРаспределениеПоДням = Результаты[2].Выгрузить();
	
	Для Каждого СтрокаСредний Из ТабНормаНаМесяц Цикл
		СтрокаСредний.СуммаНаМесяц = Цел(СтрокаСредний.СуммаДокумента / КоличествоМесяцевДляОценкиСреднего);
	КонецЦикла;	
	
	ТабОбщиеДанные = Новый ТаблицаЗначений();
	ТабОбщиеДанные.Колонки.Добавить("ПоказателиЗатраты");
	ТабОбщиеДанные.Колонки.Добавить("Значение");
	
	СтрокаДоб = ТабОбщиеДанные.Добавить();
	СтрокаДоб.ПоказателиЗатраты = "Норма расхода по статье на месяц исходя из среднего значения за выбранный период оценки среднего";
	Если ТабНормаНаМесяц.Количество() > 0 Тогда
		СтрокаДоб.Значение = ТабНормаНаМесяц[0].СуммаНаМесяц;
	КонецЕсли;	
	
	МесяцОбработки = НачалоМесяца(ДатаРасшифровки);
		
	ЗапросВыходные = Новый Запрос();
	ЗапросВыходные.УстановитьПараметр("ДатаНач", НачалоМесяца(МесяцОбработки));
	ЗапросВыходные.УстановитьПараметр("ДатаКон", КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)));
	ЗапросВыходные.Текст = "ВЫБРАТЬ
	                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	                       |ИЗ
	                       |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	                       |ГДЕ
	                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
	                       |	И РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря УБЫВ";
						   
	ТабРабочиеДни = ЗапросВыходные.Выполнить().Выгрузить();
	
	СтрокиНорма = ТабНормаНаМесяц.НайтиСтроки(Новый Структура("Организация", Организация));
	Для Каждого СтрокаНорма Из СтрокиНорма Цикл
		СуммаПоСтатье = СтрокаНорма.СуммаНаМесяц * (1 + ПроцентУвеличенияОборотовЕжемесячно * (РазницаВМесяцах(МесяцОбработки) + 1) / 100);
		СтрокиУжеБылоВТекМесяце = ТабБылоВТекМесяце.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств, Месяц"
						, СтрокаНорма.Организация, СтрокаНорма.СтатьяДвиженияДенежныхСредств, МесяцОбработки));
		СтрокаОбщДанные = ТабОбщиеДанные.Добавить();
		СтрокаОбщДанные.ПоказателиЗатраты = "Уже было оплат в этом месяце по статье";
		СтрокаОбщДанные.Значение = 0;
		Для Каждого СтрокаУжеБыло Из СтрокиУжеБылоВТекМесяце Цикл
			СуммаПоСтатье = СуммаПоСтатье - СтрокаУжеБыло.СуммаДокумента;
			СтрокаОбщДанные.Значение = СтрокаОбщДанные.Значение + СтрокаУжеБыло.СуммаДокумента;
		КонецЦикла;
		Если СуммаПоСтатье <= 0 Тогда
			Продолжить;
		КонецЕсли;
		ТабПоДням = Новый ТаблицаЗначений();
		ТабПоДням.Колонки.Добавить("День");
		ТабПоДням.Колонки.Добавить("База");
		ТабПоДням.Колонки.Добавить("Сумма");
		
		СтрокиРаспределениеПоДням = ТабРаспределениеПоДням.НайтиСтроки(Новый Структура("Организация, СтатьяДвиженияДенежныхСредств", СтрокаНорма.Организация, СтрокаНорма.СтатьяДвиженияДенежныхСредств));
		Для Каждого СтрокаДень Из СтрокиРаспределениеПоДням Цикл
			ДатаРасчетная = МесяцОбработки + 86400 * (СтрокаДень.День - 1);
			Если ДатаРасчетная < НачалоДня(ТекущаяДата()) Тогда
				Продолжить;
			ИначеЕсли ДатаРасчетная > КонецМесяца(МесяцОбработки) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДоб = ТабПоДням.Добавить();
			СтрокаДоб.День = ДатаРасчетная;
			//если это статья по поставщикам, то раскладываем оплаты на вторник и четверг
			Если СтрокаДень.Тип = 0 Тогда
				Пока СтрокаДоб.День <= КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)) Цикл
					Если ДеньНедели(СтрокаДоб.День) = 2
						ИЛИ ДеньНедели(СтрокаДоб.День) = 4 Тогда
						Если ТабРабочиеДни.Найти(СтрокаДоб.День, "ДатаКалендаря") <> Неопределено Тогда
							Прервать;
						КонецЕсли;	
					КонецЕсли;
					СтрокаДоб.День = СтрокаДоб.День + 86400;
				КонецЦикла;
			КонецЕсли;	
			СтрокаДоб.База = СтрокаДень.СуммаДокумента;
		КонецЦикла;
		
		ТабПоДням.Свернуть("День", "База, Сумма");
		
		//распределим оплаты по неделе в пропорции, вторник 1/3, четверг 2/3
		Если СтрокаНорма.Тип = 0 Тогда
			СуммаНаНеделю = 0;
			ДатаОбработкиВрем = НачалоНедели(МесяцОбработки);
			Пока ДатаОбработкиВрем <= КонецМесяца(ДобавитьМесяц(МесяцОбработки, 3)) Цикл
				СтрокаВторник = ТабПоДням.Найти(ДатаОбработкиВрем + 86400, "День");
				СтрокаЧетверг = ТабПоДням.Найти(ДатаОбработкиВрем + 86400 * 3, "День");
				СуммаНаНеделю = ?(СтрокаВторник <> Неопределено, СтрокаВторник.База, 0) + ?(СтрокаЧетверг <> Неопределено, СтрокаЧетверг.База, 0);
				Если СуммаНаНеделю <> 0
					И СтрокаВторник <> Неопределено
					И СтрокаЧетверг <> Неопределено Тогда
					СтрокаВторник.База = Цел(СуммаНаНеделю * 0.33);
					СтрокаЧетверг.База = Цел(СуммаНаНеделю * 0.67);
				КонецЕсли;	
				ДатаОбработкиВрем = ДатаОбработкиВрем + 86400*7;
			КонецЦикла;	
		КонецЕсли;	
		
		Если ТабПоДням.Количество() = 0 Тогда
			СтрокаДоб = ТабПоДням.Добавить();
			СтрокаДоб.День = КонецМесяца(МесяцОбработки);
			СтрокаДоб.База = 1;
		КонецЕсли;	
		
		РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаПоСтатье, ТабПоДням.ВыгрузитьКолонку("База"), 0);
		Если Не РаспределениеРег = Неопределено Тогда
			ТабПоДням.ЗагрузитьКолонку(РаспределениеРег, "Сумма");
		КонецЕсли;
		
		ТабПоДням.Колонки.День.Имя = "Дата";
		
	КонецЦикла;
	
	СхемаКомпоновки = Обработки.ПлатежныйКалендарьНаМесяц.ПолучитьМакет("РасшифровкаЗатраты");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, СхемаКомпоновки.НастройкиПоУмолчанию, ДанныеРасшифровки);
	
	СтруктураВнешниеДанные = Новый Структура("ТабДанныеОбщие, ТабРазбиениеПоДням", ТабОбщиеДанные, ТабПоДням);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураВнешниеДанные, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабДокумент;
	
КонецФункции	

&НаКлиенте
Процедура Отчет(Команда)
	
	ТабОтчет = СформироватьОтчет(Элементы.РасшифровкаПоказателей.ТекущиеДанные.Статья
			, Элементы.ДанныеКалендаря.ТекущиеДанные.Организация
			, Элементы.ДанныеКалендаря.ТекущиеДанные.Дата);
			
	ТабОтчет.ОтображатьСетку = Ложь;
	ТабОтчет.ОтображатьЗаголовки = Ложь;
	ТабОтчет.Показать(Элементы.РасшифровкаПоказателей.ТекущиеДанные.Статья);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	Набор = РегистрыСведений.ПлатежныйКалендарьНаМесяц_НастройкаСтатей.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаб Из СтатьиДДСПоставщики Цикл
		Движение = Набор.Добавить();
		Движение.Статья = СтрокаТаб.Статья;
		Движение.ВидЗатрат = "Поставщики";
		Движение.СтруктураПолитикиРасчетаИОплаты = Новый ХранилищеЗначения(СтрокаТаб.СтрокаСтруктура, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из СтатьиДДСАренда Цикл
		Движение = Набор.Добавить();
		Движение.Статья = СтрокаТаб.Статья;
		Движение.СтатичнаяДатаПлатежа = СтрокаТаб.ДеньПлатежа;
		Движение.ВидЗатрат = "Аренда";
		Движение.СтруктураПолитикиРасчетаИОплаты = Новый ХранилищеЗначения(СтрокаТаб.СтрокаСтруктура, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из СтатьиДДСЗарплата Цикл
		Движение = Набор.Добавить();
		Движение.Статья = СтрокаТаб.Статья;
		Движение.СтатичнаяДатаПлатежа = СтрокаТаб.ДеньПлатежа;
		Движение.ВидЗатрат = "Зарплата";
		Движение.СтруктураПолитикиРасчетаИОплаты = Новый ХранилищеЗначения(СтрокаТаб.СтрокаСтруктура, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из СтатьиДДСНалоги Цикл
		Движение = Набор.Добавить();
		Движение.Статья = СтрокаТаб.Статья;
		Движение.СтатичнаяДатаПлатежа = СтрокаТаб.ДеньПлатежа;
		Движение.ВидЗатрат = "Налоги";
		Движение.СтруктураПолитикиРасчетаИОплаты = Новый ХранилищеЗначения(СтрокаТаб.СтрокаСтруктура, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из СтатьиДДСИсключить Цикл
		Движение = Набор.Добавить();
		Движение.Статья = СтрокаТаб.Статья;
		Движение.ВидЗатрат = "Исключить";
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеНастроек(СтруктураСтрокой)
	
	НастройкаПоУмолчанию = Ложь;
	Если НЕ ЗначениеЗаполнено(СтруктураСтрокой) Тогда
		НастройкаПоУмолчанию = Истина;
	Иначе
		Попытка
			СтруктураНастройки = ЗначениеИзСтрокиВнутр(СтруктураСтрокой);
		Исключение
			НастройкаПоУмолчанию = Истина;
		КонецПопытки;	
	КонецЕсли;	
	
	Если НастройкаПоУмолчанию Тогда
		СтрокаРезультат =  "Способ определения: среднедн. значение за месяц
				|Способ оплаты: ежедневно";
	Иначе
		СтрокаРезультат = "Способ определения: ";
		Если СтруктураНастройки.СпособОпределенияСуммыОплаты = 0 Тогда
			СтрокаРезультат = СтрокаРезультат + "среднедн. значение за месяц";
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 1 Тогда
			СтрокаРезультат = СтрокаРезультат + "среднедн. значение за неделю";
		ИначеЕсли СтруктураНастройки.СпособОпределенияСуммыОплаты = 2 Тогда
			СтрокаРезультат = СтрокаРезультат + "среднедн. значение за квартал";		
		КонецЕсли;
		СтрокаРезультат = СтрокаРезультат + Символы.ПС;
		Если СтруктураНастройки.СпособОплатыВМесяце = 0 Тогда
			СтрокаРезультат = СтрокаРезультат + "Способ оплаты: ежедневно";
		ИначеЕсли СтруктураНастройки.СпособОплатыВМесяце = 1 Тогда
			СтрокаРезультат = СтрокаРезультат + "Способ оплаты: по опред. дням недели";
		ИначеЕсли СтруктураНастройки.СпособОплатыВМесяце = 2 Тогда
			СтрокаРезультат = СтрокаРезультат + "Способ оплаты: по опред. дням месяца";	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтрокаРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруНастроекСтрокой()
	
	СтруктураНастройки = Новый Структура();
	СтруктураНастройки.Вставить("СпособОпределенияСуммыОплаты", СпособОпределенияСуммыОплаты);
	СтруктураНастройки.Вставить("КоличествоПериодовДляОпределенияСуммы", КоличествоПериодовДляОпределенияСуммы);
	СтруктураНастройки.Вставить("УвеличиватьРасчитаннуюСуммуНаПроцент", УвеличиватьРасчитаннуюСуммуНаПроцент);
	СтруктураНастройки.Вставить("СпособОплатыВМесяце", СпособОплатыВМесяце);
	СтруктураНастройки.Вставить("ТабПоКварталу", ТабПоКварталу.Выгрузить());
	СтруктураНастройки.Вставить("ТабДниНедели", ТабДниНедели.Выгрузить());
	СтруктураНастройки.Вставить("ТабДниМесяца", ТабДниМесяца.Выгрузить());
	
	Возврат ЗначениеВСтрокуВнутр(СтруктураНастройки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуройИзСтроки(СтруктураСтрокой)
	
	НастройкаПоУмолчанию = Ложь;
	Если НЕ ЗначениеЗаполнено(СтруктураСтрокой) Тогда
		НастройкаПоУмолчанию = Истина;
	Иначе
		Попытка
			СтруктураНастройки = ЗначениеИзСтрокиВнутр(СтруктураСтрокой);
		Исключение
			НастройкаПоУмолчанию = Истина;
		КонецПопытки;	
	КонецЕсли;
	
	Если НастройкаПоУмолчанию Тогда
		СпособОпределенияСуммыОплаты = 0;
		СпособОплатыВМесяце = 0;
		КоличествоПериодовДляОпределенияСуммы = 2;
		УвеличиватьРасчитаннуюСуммуНаПроцент = 0;
		ТабПоКварталу.Очистить();
		ТабДниНедели.Очистить();
		ТабДниМесяца.Очистить();
	Иначе
		СтруктураНастройки.Свойство("СпособОпределенияСуммыОплаты", СпособОпределенияСуммыОплаты);
		СтруктураНастройки.Свойство("СпособОплатыВМесяце", СпособОплатыВМесяце);
		СтруктураНастройки.Свойство("КоличествоПериодовДляОпределенияСуммы", КоличествоПериодовДляОпределенияСуммы);
		СтруктураНастройки.Свойство("УвеличиватьРасчитаннуюСуммуНаПроцент", УвеличиватьРасчитаннуюСуммуНаПроцент);
		Если СтруктураНастройки.Свойство("ТабПоКварталу") Тогда
			ТабПоКварталу.Загрузить(СтруктураНастройки.ТабПоКварталу);
		КонецЕсли;
		Если СтруктураНастройки.Свойство("ТабДниНедели") Тогда
			ТабДниНедели.Загрузить(СтруктураНастройки.ТабДниНедели);
		КонецЕсли;
		Если СтруктураНастройки.Свойство("ТабДниМесяца") Тогда
			ТабДниМесяца.Загрузить(СтруктураНастройки.ТабДниМесяца);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруИзСтроки(СтруктураСтрокой)
	
	НастройкаПоУмолчанию = Ложь;
	Если НЕ ЗначениеЗаполнено(СтруктураСтрокой) Тогда
		НастройкаПоУмолчанию = Истина;
	Иначе
		Попытка
			СтруктураНастройки = ЗначениеИзСтрокиВнутр(СтруктураСтрокой);
		Исключение
			НастройкаПоУмолчанию = Истина;
		КонецПопытки;	
	КонецЕсли;
	
	Если НастройкаПоУмолчанию Тогда
		СтруктураНастройки = Новый Структура();
		СтруктураНастройки.Вставить("СпособОпределенияСуммыОплаты", 0);
		СтруктураНастройки.Вставить("СпособОплатыВМесяце", 0);
		СтруктураНастройки.Вставить("КоличествоПериодовДляОпределенияСуммы", 2);
		СтруктураНастройки.Вставить("УвеличиватьРасчитаннуюСуммуНаПроцент", 0);
		СтруктураНастройки.Вставить("ТабПоКварталу", ТабПоКварталу.Выгрузить().СкопироватьКолонки());
		СтруктураНастройки.Вставить("ТабДниНедели", ТабДниНедели.Выгрузить().СкопироватьКолонки());
		СтруктураНастройки.Вставить("ТабДниМесяца", ТабДниМесяца.Выгрузить().СкопироватьКолонки());
	КонецЕсли;	
	
	Возврат СтруктураНастройки;
	
КонецФункции

&НаКлиенте
Процедура НастройкаВидимостиЭлементов()
	
	Элементы.ГруппаНастройкаПолитикиОплаты.Видимость = (Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяПоставщики
															ИЛИ Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяАренда
															ИЛИ Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПокатазателяЗарплата
															ИЛИ Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяНалоги);
															
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяПоставщики Тогда
		Элементы.ГруппаНастройкаПолитикиОплаты.Видимость = Элементы.СтатьиДДСПоставщики.ТекущаяСтрока <> Неопределено;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяАренда Тогда
		Элементы.ГруппаНастройкаПолитикиОплаты.Видимость = Элементы.СтатьиДДСАренда.ТекущаяСтрока <> Неопределено;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПокатазателяЗарплата Тогда
		Элементы.ГруппаНастройкаПолитикиОплаты.Видимость = Элементы.СтатьиДДСЗарплата.ТекущаяСтрока <> Неопределено;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяНалоги Тогда
		Элементы.ГруппаНастройкаПолитикиОплаты.Видимость = Элементы.СтатьиДДСНалоги.ТекущаяСтрока <> Неопределено;	
	КонецЕсли;
															
	Если Элементы.ГруппаНастройкаПолитикиОплаты.Видимость Тогда
		Элементы.ТабПоКварталу.Видимость = (СпособОпределенияСуммыОплаты = 2);
		Элементы.ТабДниНедели.Видимость = (СпособОплатыВМесяце = 1);
		Элементы.ТабДниМесяца.Видимость = (СпособОплатыВМесяце = 2);
	КонецЕсли;
	
	Если СпособОпределенияСуммыОплаты <> 2 Тогда
		ТабПоКварталу.Очистить();
	Иначе
		Если ТабПоКварталу.Количество() = 0 Тогда
			СтрокаДоб = ТабПоКварталу.Добавить();
			СтрокаДоб.Месяц = "1-ый месяц квартала";
			СтрокаДоб.МесяцЧислом = 1;
			СтрокаДоб.ПроцентОтСуммы = 33;
			
			СтрокаДоб = ТабПоКварталу.Добавить();
			СтрокаДоб.Месяц = "2-ой месяц квартала";
			СтрокаДоб.МесяцЧислом = 2;
			СтрокаДоб.ПроцентОтСуммы = 33;
			
			СтрокаДоб = ТабПоКварталу.Добавить();
			СтрокаДоб.Месяц = "3-ий месяц квартала";
			СтрокаДоб.МесяцЧислом = 3;
			СтрокаДоб.ПроцентОтСуммы = 34;
		КонецЕсли;	
	КонецЕсли;
	
	Если СпособОплатыВМесяце <> 2 Тогда
		ТабДниМесяца.Очистить();
	Иначе
		Если ТабДниМесяца.Количество() = 0 Тогда
			СтрокаДоб = ТабДниМесяца.Добавить();
			СтрокаДоб.ДеньЧислом = 30;
			СтрокаДоб.ПроцентОтСуммы = 100;
		КонецЕсли;	
	КонецЕсли;	
	
	Если СпособОплатыВМесяце <> 1 Тогда
		ТабДниНедели.Очистить();
	Иначе
		Если ТабДниНедели.Количество() = 0 Тогда
			СтрокаДоб = ТабДниНедели.Добавить();
			СтрокаДоб.День = "Понедельник";
			СтрокаДоб.ДеньЧислом = 1;
			СтрокаДоб.ПроцентОтСуммы = 20;
			
			СтрокаДоб = ТабДниНедели.Добавить();
			СтрокаДоб.День = "Вторник";
			СтрокаДоб.ДеньЧислом = 2;
			СтрокаДоб.ПроцентОтСуммы = 20;
			
			СтрокаДоб = ТабДниНедели.Добавить();
			СтрокаДоб.День = "Среда";
			СтрокаДоб.ДеньЧислом = 3;
			СтрокаДоб.ПроцентОтСуммы = 20;
			
			СтрокаДоб = ТабДниНедели.Добавить();
			СтрокаДоб.День = "Четверг";
			СтрокаДоб.ДеньЧислом = 4;
			СтрокаДоб.ПроцентОтСуммы = 20;
			
			СтрокаДоб = ТабДниНедели.Добавить();
			СтрокаДоб.День = "Пятница";
			СтрокаДоб.ДеньЧислом = 5;
			СтрокаДоб.ПроцентОтСуммы = 20;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СтатьиДДСПоставщикиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяПоставщики Тогда
		ЗаполнитьСтруктуройИзСтроки(Элементы.СтатьиДДСПоставщики.ТекущиеДанные.СтрокаСтруктура);
		НастройкаВидимостиЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтруктуруВВыбранныеСтрокиСтатей()
	
	СтрокаНастройки = ПолучитьСтруктуруНастроекСтрокой();
	ОписаниеНастройки = ПолучитьОписаниеНастроек(СтрокаНастройки);
	
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяПоставщики Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СтатьиДДСПоставщики.ВыделенныеСтроки Цикл
			ТекДанные = СтатьиДДСПоставщики.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекДанные.СтрокаСтруктура = СтрокаНастройки;
			ТекДанные.СтрокаОписание = ОписаниеНастройки;
		КонецЦикла;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяАренда Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СтатьиДДСАренда.ВыделенныеСтроки Цикл
			ТекДанные = СтатьиДДСАренда.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекДанные.СтрокаСтруктура = СтрокаНастройки;
			ТекДанные.СтрокаОписание = ОписаниеНастройки;
		КонецЦикла;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПокатазателяЗарплата Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СтатьиДДСЗарплата.ВыделенныеСтроки Цикл
			ТекДанные = СтатьиДДСЗарплата.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекДанные.СтрокаСтруктура = СтрокаНастройки;
			ТекДанные.СтрокаОписание = ОписаниеНастройки;
		КонецЦикла;
	ИначеЕсли Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяНалоги Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СтатьиДДСНалоги.ВыделенныеСтроки Цикл
			ТекДанные = СтатьиДДСНалоги.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекДанные.СтрокаСтруктура = СтрокаНастройки;
			ТекДанные.СтрокаОписание = ОписаниеНастройки;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СпособОпределенияСуммыОплатыПриИзменении(Элемент)
	
	НастройкаВидимостиЭлементов();
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовДляОпределенияСуммыПриИзменении(Элемент)
	
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличиватьРасчитаннуюСуммуНаПроцентПриИзменении(Элемент)
	
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПоКварталуПроцентВКварталеПриИзменении(Элемент)
	
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОплатыВМесяцеПриИзменении(Элемент)
	
	НастройкаВидимостиЭлементов();
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДниМесяцаПриИзменении(Элемент)
	
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНастроекСтатейПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НастройкаВидимостиЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиДДСАрендаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяАренда Тогда
		ЗаполнитьСтруктуройИзСтроки(Элементы.СтатьиДДСАренда.ТекущиеДанные.СтрокаСтруктура);
		НастройкаВидимостиЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиДДСЗарплатаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПокатазателяЗарплата Тогда
		ЗаполнитьСтруктуройИзСтроки(Элементы.СтатьиДДСЗарплата.ТекущиеДанные.СтрокаСтруктура);
		НастройкаВидимостиЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиДДСНалогиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппыНастроекСтатей.ТекущаяСтраница = Элементы.ГруппаПоказателяНалоги Тогда
		ЗаполнитьСтруктуройИзСтроки(Элементы.СтатьиДДСНалоги.ТекущиеДанные.СтрокаСтруктура);
		НастройкаВидимостиЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыОсновныеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НастройкаВидимостиЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДниНеделиПриИзменении(Элемент)
	
	СохранитьСтруктуруВВыбранныеСтрокиСтатей();
	
КонецПроцедуры
