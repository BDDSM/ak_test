
&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)

	ОтправитьПисьмаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	
	СоответствиеШаблонов = Новый Соответствие;
	МассивСообщений = Новый Массив;
	Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
		
		Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы()  Цикл
			Отказ = Ложь;
			Если Не	ПодчиненнаяСтрока.Пометка Тогда
				Продолжить;	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
			
				МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
			    Отказ = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
			
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
			    Отказ = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ПочтаБухгалтера) Тогда
			
				МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнен учетная запись электронной почты!");	
			    Отказ = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
			    Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ТекстHTML = СоответствиеШаблонов.Получить(ПодчиненнаяСтрока.Организация);
			
			Если ТекстHTML = Неопределено Тогда
				
				ТекстHTML = ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки.ОписаниеHTML;
				
				ЧтениеHTML = Новый ЧтениеHTML;
				ЧтениеHTML.УстановитьСтроку(ТекстHTML);
				ПостроительDOM = Новый ПостроительDOM;
				ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
				
				Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
					
					ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ХранилищеДополнительнойИнформации.Ссылка
					|ИЗ
					|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
					|ГДЕ
					|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
					
					Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
					
					Результат = Запрос.Выполнить();
					
					Если Результат.Пустой() Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
						Сообщение.Сообщить();
						
						Продолжить;
						
					КонецЕсли;
					
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					
					ВыборкаДетальныеЗаписи.Следующий();
					
					ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
					
					ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
					
					ЗначениеКартинка.Записать(ИмяВременногоФайла);
					
					//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
					
					ТекстHTML = СтрЗаменить(ТекстHTML,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
					
				КонецЦикла;
				
				СоответствиеШаблонов.Вставить(ПодчиненнаяСтрока.Организация,ТекстHTML);
				
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			
			Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ПодчиненнаяСтрока.Организация,ТекущаяДата());
			
			СтруктураПараметров.Вставить("КонтрагентПолноеНаименование",ПодчиненнаяСтрока.Контрагент.НаименованиеПолное);
			СтруктураПараметров.Вставить("ПериодОбработки","с "+Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			
			СтруктураПараметров.Вставить("Организация",ПодчиненнаяСтрока.Организация.НаименованиеСокращенное);
			СтруктураПараметров.Вставить("ГенеральныйДиректор",Руководители.Руководитель);
			
			Для каждого ТекПараметр Из СтруктураПараметров Цикл
			
				ТекстHTML = СтрЗаменить(ТекстHTML,"%"+ТекПараметр.Ключ,ТекПараметр.Значение);
			
			КонецЦикла;
			
			СтруктураПараметровМногострочные = Новый Структура;  		
			
			ДанныеФизЛицаМенеджера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя.ФизЛицо);
			ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя.ФизЛицо);
			
			ФамилияИмяМенеджера = ДанныеФизЛицаМенеджера[0] + " "+ДанныеФизЛицаМенеджера[1];
			ФамилияИмяБухгалтера = ДанныеФизЛицаБухгалтера[0] + " "+ДанныеФизЛицаБухгалтера[1];
			
			Телефоны =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
			,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера);
			Телефоны1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
			,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера);
			
			ФИОEMAIL =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
			,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера,Истина);
			ФИОEMAIL1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
			,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера,Истина);
			
			СтруктураПараметровМногострочные.Вставить("Телефоны",Телефоны);
			СтруктураПараметровМногострочные.Вставить("Телефоны1",Телефоны1);
			
			СтруктураПараметровМногострочные.Вставить("ФИОEmail",ФИОEMAIL);
			СтруктураПараметровМногострочные.Вставить("ФИОEmail1",ФИОEMAIL1);
			
			Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
				
				ЖирныйШрифтНач = "";
				ЖирныйШрифтКонец = "";
				Если Не Найти(ТекстHTML,"<P>%"+ТекПараметр.Ключ+"</P>") Тогда
					ЖирныйШрифтНач = "<STRONG>";
					ЖирныйШрифтКонец = "</STRONG>";  					
				КонецЕсли;
				
				ТекстHTML = СтрЗаменить(ТекстHTML,"<P>"+ЖирныйШрифтНач+"%"+ТекПараметр.Ключ+ЖирныйШрифтКонец+"</P>",ТекПараметр.Значение);
			
			КонецЦикла;
			
			ТаблицаОбъектовКому = СтрЗаменить(ПодчиненнаяСтрока.Почта, ";",Символы.ПС);
			
			МаксимальноеЗначение = СтрЧислоСтрок(ТаблицаОбъектовКому);
			
			Для сч=1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
				АдресПолучателя=СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому,сч));
				Послать(АдресПолучателя,ТекстHTML,ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки.Тема,ФамилияИмяБухгалтера);
			КонецЦикла;
			
			
		КонецЦикла;
		
	КонецЦикла;                                 
	
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
	
	КонецЦикла;
	
КонецПроцедуры // ОтправитьПисьмаНаСервере()

&НаСервере
Функция СформироватьПредставленияКонтакта(Контакт,ОсновнойБухгалтерПокупателя,ОсновнойМенеджерПокупателя,Должность,ФамилияИмяМенеджера,Жирным = Ложь)
	ЖирныйШрифтНач = "";
	ЖирныйШрифтКонец = "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач = "<STRONG>";
		ЖирныйШрифтКонец = "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
	И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя Или Должность = "Бухгалтер")
	,"<P>"+ЖирныйШрифтНач+Должность+" " +ФамилияИмяМенеджера + " "+Контакт+ЖирныйШрифтКонец+"</P>",""); 
	
КонецФункции // СформироватьПредставленияКонтакта()


&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Если Объект.СписокРассылки.Количество() Тогда
		
		Объект.СписокРассылки.Очистить();
		
	КонецЕсли;
	
	СчетаПоУмолчанию = Новый Массив();
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
	|	ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
	|	ЛОЖЬ КАК Пометка,
	|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
	|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
	|	ФинансовыйОстаткиИОбороты.Субконто1.ШаблонЗапросаАктаСверки КАК ШаблонЗапросаАктаСверки
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			,
	|			Счет В (&МассивСчетов),
	|			,
	|			Субконто2 ССЫЛКА Справочник.Контрагенты
	|				И Субконто2.НеОтправлятьУведомления = ЛОЖЬ
	|				И Субконто1 ССЫЛКА Справочник.Организации
	|				И Субконто1 = &Субконто1
	|				И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя) КАК ФинансовыйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойБухгалтерПокупателя,
	|	ОсновнойМенеджерПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Пометка,
	|	Данные.ОсновнойБухгалтерПокупателя,
	|	Данные.ОсновнойМенеджерПокупателя,
	|	Данные.ШаблонЗапросаАктаСверки,
	|	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	|	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	|	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	|	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	|	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	|			И (ТелефонМенеджер.Тип = &ТипТелефон)
	|			И (ТелефонМенеджер.Вид = &ТелефонФизЛица)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	|		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	|			И (ТелефонБухгалтера.Тип = &ТипТелефон)
	|			И (ТелефонБухгалтера.Вид = &ТелефонФизЛица)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = &Настройка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	|			И (ПочтаМенеджера.Тип = &ТипПочта)
	|			И (ПочтаМенеджера.Вид = &ПочтаФизЛица)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	|		ПО (ПочтаБухгалтера.Вид = &ПочтаФизЛица)
	|			И (ПочтаБухгалтера.Тип = &ТипПочта)
	|			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект
	|ИТОГИ ПО
	|	Контрагент";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто1 = &Субконто1","");
		
	Иначе
		
		Запрос.УстановитьПараметр("Субконто1",Организация);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОсновнойБухгалтер) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя","");
		
	Иначе
		
		Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя",ОсновнойБухгалтер);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПочтаФизЛица",Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТипПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТелефонФизЛица",Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("МассивСчетов",СчетаПоУмолчанию);
	Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТЗ_Результа =  Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Почта,
	|	КонтактнаяИнформация.Объект КАК Контрагент
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект.Ссылка В(&Массив)
	|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Запрос.УстановитьПараметр("Массив", ТЗ_Результа.ВыгрузитьКолонку("Контрагент"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта",Новый ОписаниеТипов("Строка", ,
									   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Для каждого ТекСтрока Из Результат.Строки Цикл
		
		Для каждого ТекСтрокаПодчиненная Из ТекСтрока.Строки Цикл
			
			Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент",ТекСтрокаПодчиненная.Контрагент)) Тогда
				
				ТекСтрока.Почта =  ВыборкаДетальныеЗаписи.Почта;
				ТекСтрокаПодчиненная.Почта = ВыборкаДетальныеЗаписи.Почта;
				
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи.Сбросить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Результат, "Дерево");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
		
		Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
			
			ПодчиненнаяСтрока.Пометка = ТекСтрока.Пометка;	
			
		КонецЦикла;
		//ПолучитьСтрокиНаСервере(ТекСтрока.Контрагент,ТекСтрока.Пометка);			
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиНаСервере(Контрагент,Пометка)
	
	//ДеревоЗначений = РеквизитФормыВЗначение("Дерево");
	//
	//НайденнаяСтрока = ДеревоЗначений.Строки.Найти(Контрагент);
	//
	//Для каждого ТекСтрока Из НайденнаяСтрока.Строки Цикл
	//
	//	ТекСтрока.Пометка = Пометка;
	//
	//КонецЦикла;
	
	//ЗначениеВРеквизитФормы(ДеревоЗначений, "Дерево");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьСнятьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьСнятьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(Пометка)
	
	Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
		
		ТекСтрока.Пометка = Пометка;
		
		Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы()  Цикл
			
			ПодчиненнаяСтрока.Пометка = Пометка;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьСнятьПометки()

&НаСервере
Процедура ИнициализироватьСКД()
	
	////Получаем схему из макета
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//
	//СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("Макет");
	//
	////создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
	//КомпоновщикНастроек = МакетКомпоновкиОтчет.КомпоновщикНастроек;
	//КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//Настройки = КомпоновщикНастроек.Настройки;
	//
	////установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	////Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СвойствоВодитель",         мСвойствоВодитель);
	////Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок",            Заголовок);
	//
	////Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//
	////Формируем макет, с помощью компоновщика макета
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//
	////Передаем в макет компоновки схему, настройки и данные расшифровки
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//
	////Выполним компоновку с помощью процессора компоновки
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	//
	////Очищаем поле табличного документа
	//Результат = Новый ДеревоЗначений();
	////Выводим результат в табличный документ
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.УстановитьОбъект(Результат);
	//
	////ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	////
	////Результат.ОтображатьЗаголовки = Ложь;
	////Результат.ОтображатьСетку = Ложь;
	////Результат.Показать();
	
	
КонецПроцедуры // ИнициализироватьСКД()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ИнициализироватьСКД();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаНаличиеОшибок(Команда)
	
	МассивСообщений = Новый Массив;
	
	Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
		
		Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы()  Цикл
			Если Не	ПодчиненнаяСтрока.Пометка Тогда
				Продолжить;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
			
				МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
			
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
			
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
			
			КонецЕсли;
			

			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.УчетнаяЗаписьЭлектроннойПочты) Тогда
			
				МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнена учетная запись электронной почты!");	
			
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
			
				МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
	
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура Послать(АдресПолучателя,ТекстПисьма,УЗ,Тема,Пользователь)
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP="10.0.0.30";
	ИПП.Пользователь=Пользователь;
	ИПП.ПортSMTP=25;
	//
	//Если УЗ.ТребуетсяSMTPАутентификация Тогда
	//	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
	//	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	//Иначе
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	//КонецЕсли;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ;
	Письмо.Получатели.Добавить(АдресПолучателя);
	
	//Для Каждого ТекАдр Из Вложения Цикл
	//	Письмо.Вложения.Добавить(ТекАдр.АдресФайла);
	//КонецЦикла;
	
	Письмо.Тема=Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	
	Почта=Новый ИнтернетПочта;
	
	Почта.Подключиться(ИПП);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры




