
Процедура ОбновитьТоварыКПечати(МассивНоменклатуры = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(МассивНоменклатуры) = Тип("Массив") Тогда
		Для Каждого ЭлементНоменклатура Из Параметры.МассивНоменклатура Цикл
			СтрокаТаб = Объект.Товары.Добавить();
			СтрокаТаб.Пометка = Истина;
			СтрокаТаб.Номенклатура = ЭлементНоменклатура.Номенклатура;
			СтрокаТаб.Характеристика = ЭлементНоменклатура.Характеристика;
		КонецЦикла;
	Иначе
		Если ПечатьНаЗавтра Тогда
			НачатьТранзакцию();
			Набор = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьНаборЗаписей();
			Набор.Отбор.Магазин.Установить(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
			Набор.Записать();
			
			РегламентныеЗаданияСервер.ПересчитатьНеобходимостьПечатиЦенников(ПараметрыСеанса.ТорговаяТочкаПоАйпи, , ТекущаяДата() + 86400);
		КонецЕсли;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦенникиКПечатиВМагазинах.Номенклатура КАК Товар,
		               |	ЦенникиКПечатиВМагазинах.ОписаниеПричиныПечати,
		               |	ВЫБОР
		               |		КОГДА ЦенникиКПечатиВМагазинах.ОписаниеПричиныПечати ПОДОБНО &НоваяЦена
		               |			ТОГДА 1
		               |		КОГДА ЦенникиКПечатиВМагазинах.ОписаниеПричиныПечати ПОДОБНО &АкцияЗакончена
		               |			ТОГДА 2
		               |		ИНАЧЕ 3
		               |	КОНЕЦ КАК Сортировка,
		               |	ЦенникиКПечатиВМагазинах.Характеристика
		               |ИЗ
		               |	РегистрСведений.ЦенникиКПечатиВМагазинах КАК ЦенникиКПечатиВМагазинах
		               |ГДЕ
		               |	ЦенникиКПечатиВМагазинах.Магазин = &Магазин
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Сортировка,
		               |	ЦенникиКПечатиВМагазинах.Номенклатура.Наименование";
					   
		Запрос.УстановитьПараметр("Магазин", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
		Запрос.УстановитьПараметр("НоваяЦена", "%Новая цена%");
		Запрос.УстановитьПараметр("АкцияЗакончена", "%Акция закончена%");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаб = Объект.Товары.Добавить();
			СтрокаТаб.Пометка = Истина;
			СтрокаТаб.Номенклатура = Выборка.Товар;
			СтрокаТаб.Характеристика = Выборка.Характеристика;
			СтрокаТаб.Описание = Выборка.ОписаниеПричиныПечати;
			СтрокаТаб.Сортировка = Выборка.Сортировка;
		КонецЦикла;	
		Если ПечатьНаЗавтра Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		СоотвествиеРезультат = ВнешниеДанные.ПолучитьХарактеристикуДляМассиваНоменклатуры(Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Для Каждого СтрокаТаб Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаб.Характеристика) Тогда
				Харка = СоотвествиеРезультат.Получить(СтрокаТаб.Номенклатура);
				Если ЗначениеЗаполнено(Харка) Тогда
					СтрокаТаб.Характеристика = Харка;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПризнакЦенника();
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПечатьНаЗавтра = Параметры.ПечатьНаЗавтра;
	ОбновитьТоварыКПечати(Параметры.МассивНоменклатура);
	Объект.ПечататьДробныеЦенники = Истина; //mind закомментировал этот код, так как попросила Электра и Паша
											//mind 2017-06-20 обратно расскоментировал, Паша попросил включить
											
	//+++АК KIRN 2018.04.26 ИП-00018243 											
	Если ПараметрыСеанса.ТорговаяТочкаПоАйпи = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("295М_Волгоградский133") Тогда
		Объект.ЦенникСРейтингом = Истина;		
		Элементы.ЦенникСРейтингом.Видимость = Истина;
	Иначе
		Объект.ЦенникСРейтингом = Ложь;		
		Элементы.ЦенникСРейтингом.Видимость = ЛОжь;
	КонецЕСли;
	
	//Объект.ЦенникСРейтингом = Истина;
	//---АК KIRN 
	
КонецПроцедуры

&НаСервере
Функция ПечатьСервер(ПоАкции = Ложь)
	
	МассивТовары = Новый Массив();
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Если СтрокаТаб.Пометка Тогда
			МассивТовары.Добавить(СтрокаТаб.Номенклатура);
		КонецЕсли;	
	КонецЦикла;	
	
	//определение печать ли загружает сервак
	
	//+++АК mika 2018.06.08 Без задачи (Оптимизация)
	//(запись в Журнал добавлялась разработчиком mind 13.12.2017 18:22:50) 
	
	//Попытка
	//	ЗаписьЖурналаРегистрации("Отладка.ПечатьЦенниковМагазин", УровеньЖурналаРегистрации.Ошибка, ,, "Магазин: " + ПараметрыСеанса.ТорговаяТочкаПоАйпи + ". Кол-во ценников: " + МассивТовары.Количество());
	//Исключение
	//КонецПопытки;	
	
	//---АК mika Без задачи (Оптимизация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата"			, ?(НЕ ПечатьНаЗавтра, НачалоДня(ТекущаяДата()), НачалоДня(ТекущаяДата() + 86400)));
	Запрос.УстановитьПараметр("ДействуетВМагазине"	, ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("Товары"				, МассивТовары);
	Запрос.УстановитьПараметр("УпаковкаДляЦенника"	, ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("УпаковкаДляЦенника"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|ГДЕ
	|	НоменклатураСпр.Ссылка В(&Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СрокГодности)
	|				ТОГДА ЗначенияСвойствОбъектов.Значение
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК СрокГодности,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияСвойствОбъектов.Свойство = &УпаковкаДляЦенника
	|				ТОГДА ЗначенияСвойствОбъектов.Значение
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК УпаковкаДляЦенника,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения)
	|				ТОГДА ЗначенияСвойствОбъектов.Значение
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК СтранаПроисхождения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления
	|			ИНАЧЕ ХарактеристикиНоменклатуры.СрокГодности
	|		КОНЕЦ) КАК СрокГодностиНов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.ТипСрокаГодности_ПослеИзготовления.ПараметрыПрописиНаРусском, """")
	|			ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.ТипСрокаГодности.ПараметрыПрописиНаРусском, """")
	|		КОНЕЦ) КАК ТипСрокаГодностиПараметрыПрописиНаРусском,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.СрокГодности_ПослеИзготовления > 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.СрокГодностиНеограничен, ЛОЖЬ)
	|		КОНЕЦ) КАК СрокНеограничен
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					&ТекущаяДата,
	|					ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|						И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								Таб.Номенклатура
	|							ИЗ
	|								ВТ_Товары КАК Таб)) КАК ЦеныНоменклатурыСрезПоследних) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	Номенклатура.ПозицияРазделителяДляЦенника,
	|	Номенклатура.Фишка,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзмеренияНаименование,
	|	Номенклатура.ДатаНачалаВыводаНаСинийЦенник,
	|	Номенклатура.ДатаОкончанияВыводаНаСинийЦенник,
	|	Номенклатура.ТекстВместоФишки,
	|	ВЗ_Фишка1.ФишкаНаименование КАК ФишкаНаименование1,
	|	ВЗ_Фишка1.ФишкаПиктограмма КАК ФишкаПиктограмма1,
	|	ВЗ_Фишка2.ФишкаНаименование КАК ФишкаНаименование2,
	|	ВЗ_Фишка2.ФишкаПиктограмма КАК ФишкаПиктограмма2,
	|	ЕСТЬNULL(ВЗ_Фишка1.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко1,
	|	ЕСТЬNULL(ВЗ_Фишка2.Фишка, ЗНАЧЕНИЕ(Справочник.ФишкиКратко.ПустаяСсылка)) КАК ФишкаКратко2,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураФишкиНаЦенник.Ссылка КАК Ссылка,
	|			НоменклатураФишкиНаЦенник.Фишка.Наименование КАК ФишкаНаименование,
	|			НоменклатураФишкиНаЦенник.Фишка.Пиктограмма КАК ФишкаПиктограмма,
	|			НоменклатураФишкиНаЦенник.Фишка КАК Фишка
	|		ИЗ
	|			Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураФишкиНаЦенник
	|		ГДЕ
	|			НоменклатураФишкиНаЦенник.Ссылка В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|			И НоменклатураФишкиНаЦенник.НомерСтроки = 1) КАК ВЗ_Фишка1
	|		ПО Номенклатура.Ссылка = ВЗ_Фишка1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураФишкиНаЦенник.Ссылка КАК Ссылка,
	|			НоменклатураФишкиНаЦенник.Фишка.Наименование КАК ФишкаНаименование,
	|			НоменклатураФишкиНаЦенник.Фишка.Пиктограмма КАК ФишкаПиктограмма,
	|			НоменклатураФишкиНаЦенник.Фишка КАК Фишка
	|		ИЗ
	|			Справочник.Номенклатура.ФишкиНаЦенник КАК НоменклатураФишкиНаЦенник
	|		ГДЕ
	|			НоменклатураФишкиНаЦенник.Ссылка В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|			И НоменклатураФишкиНаЦенник.НомерСтроки = 2) КАК ВЗ_Фишка2
	|		ПО (Номенклатура.Ссылка = ВЗ_Фишка2.Ссылка)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.Характеристика,
	|	ШтриховыеКоды.ЛожныйШтрихКод
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|ГДЕ
	|	ШтриховыеКоды.Номенклатура В
	|			(ВЫБРАТЬ
	|				Таб.Номенклатура
	|			ИЗ
	|				ВТ_Товары КАК Таб)
	|	И ШтриховыеКоды.ЛожныйШтрихКод <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//+++АК KIRN 2018.04.25 товары с рейтингом
	//|ВЫБРАТЬ
	//|	РейтингиТоваров.Номенклатура,
	//|	РейтингиТоваров.Характеристика,
	//|	ЕСТЬNULL(РейтингиТоваров.Рейтинг, ВЗ_Общая.Рейтинг) КАК Рейтинг
	//|ИЗ
	//|	РегистрСведений.РейтингиТоваров КАК РейтингиТоваров
	//|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			РейтингиТоваров.Рейтинг КАК Рейтинг
	//|		ИЗ
	//|			РегистрСведений.РейтингиТоваров КАК РейтингиТоваров
	//|		ГДЕ
	//|			РейтингиТоваров.Номенклатура В
	//|					(ВЫБРАТЬ
	//|						Таб.Номенклатура
	//|					ИЗ
	//|						ВТ_Товары КАК Таб)
	//|			И РейтингиТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ВЗ_Общая
	//|		ПО (ИСТИНА)
	//|ГДЕ
	//|	РейтингиТоваров.Номенклатура В
	//|			(ВЫБРАТЬ
	//|				Таб.Номенклатура
	//|			ИЗ
	//|				ВТ_Товары КАК Таб)
	//|;
	//|
	|Выбрать 
	|	РейтингиТоваров.Номенклатура,
	|	РейтингиТоваров.Рейтинг КАК Рейтинг
	|ИЗ
	|	РегистрСведений.ТоварыСРейтингом.СрезПоследних(,Номенклатура В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)) КАК РейтингиТоваров
	|;
	|
	//---АК KIRN 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Данные.Номенклатура,
	|	ВЗ_Данные.ТипСкидки,
	|	ВЫБОР
	|		КОГДА ВЗ_Данные.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте)
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена - ВЗ_Данные.ДействуетЦена_Скидка * ЦеныНоменклатурыСрезПоследних.Цена / 100 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ ВЗ_Данные.ДействуетЦена_Скидка
	|	КОНЕЦ КАК Цена,
	|	ВЗ_Данные.НазваниеАкции,
	|	ВЗ_Данные.КомментарийНаЦенник
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ВЗ_Магазин.Ссылка, ВЗ_ВсеМагазины.Ссылка) КАК Номенклатура,
	|		ЕСТЬNULL(ВЗ_Магазин.ТипСкидки, ВЗ_ВсеМагазины.ТипСкидки) КАК ТипСкидки,
	|		ЕСТЬNULL(ВЗ_Магазин.ДействуетЦена_Скидка, ВЗ_ВсеМагазины.ДействуетЦена_Скидка) КАК ДействуетЦена_Скидка,
	|		ЕСТЬNULL(ВЗ_Магазин.НазваниеАкции, ВЗ_ВсеМагазины.НазваниеАкции) КАК НазваниеАкции,
	|		ЕСТЬNULL(ВЗ_Магазин.КомментарийНаЦенник, ВЗ_ВсеМагазины.КомментарийНаЦенник) КАК КомментарийНаЦенник
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НоменклатураАкции.Ссылка КАК Ссылка,
	|			НоменклатураАкции.ТипСкидки КАК ТипСкидки,
	|			МАКСИМУМ(НоменклатураАкции.ДействуетЦена_Скидка) КАК ДействуетЦена_Скидка,
	|			МАКСИМУМ(НоменклатураАкции.НазваниеАкции) КАК НазваниеАкции,
	|			МАКСИМУМ(НоменклатураАкции.КомментарийНаЦенник) КАК КомментарийНаЦенник
	|		ИЗ
	|			Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|		ГДЕ
	|			НоменклатураАкции.Ссылка В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|			И НоменклатураАкции.ДействуетВМагазине = &ДействуетВМагазине
	|			И НоменклатураАкции.ДатаНачала <= &ТекущаяДата
	|			И НоменклатураАкции.ДатаОкончания >= &ТекущаяДата
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураАкции.Ссылка,
	|			НоменклатураАкции.ТипСкидки) КАК ВЗ_Магазин
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НоменклатураАкции.Ссылка КАК Ссылка,
	|				НоменклатураАкции.ТипСкидки КАК ТипСкидки,
	|				МАКСИМУМ(НоменклатураАкции.ДействуетЦена_Скидка) КАК ДействуетЦена_Скидка,
	|				МАКСИМУМ(НоменклатураАкции.НазваниеАкции) КАК НазваниеАкции,
	|				МАКСИМУМ(НоменклатураАкции.КомментарийНаЦенник) КАК КомментарийНаЦенник
	|			ИЗ
	|				Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|			ГДЕ
	|				НоменклатураАкции.Ссылка В
	|						(ВЫБРАТЬ
	|							Таб.Номенклатура
	|						ИЗ
	|							ВТ_Товары КАК Таб)
	|				И НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И НоменклатураАкции.ДатаНачала <= &ТекущаяДата
	|				И НоменклатураАкции.ДатаОкончания >= &ТекущаяДата
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НоменклатураАкции.Ссылка,
	|				НоменклатураАкции.ТипСкидки) КАК ВЗ_ВсеМагазины
	|			ПО ВЗ_Магазин.Ссылка = ВЗ_ВсеМагазины.Ссылка
	|				И ВЗ_Магазин.ТипСкидки = ВЗ_ВсеМагазины.ТипСкидки) КАК ВЗ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Таб.Номенклатура
	|						ИЗ
	|							ВТ_Товары КАК Таб)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВЗ_Данные.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабОсновныеДанные = Результаты[1].Выгрузить(); 
	ТабОсновныеДанные.Индексы.Добавить("Номенклатура, Характеристика");
	ТабДанныеПоФишкам = Результаты[2].Выгрузить(); 
	ТабДанныеПоФишкам.Индексы.Добавить("Номенклатура");
	ТабЛожные = Результаты[3].Выгрузить();
	ТабЛожные.Индексы.Добавить("Номенклатура, Характеристика");
	ТабРейтинг = Результаты[4].Выгрузить();
	//+++АК KIRN 2018.04.27  
	ТабРейтинг.Индексы.Добавить("Номенклатура");
	//ТабРейтинг.Индексы.Добавить("Номенклатура, Характеристика");
	//---АК KIRN 
	ТоварыСАкцией = Результаты[5].Выгрузить(); 
	ТоварыСАкцией.Индексы.Добавить("Номенклатура");
	
	СпрНоменклатура = Справочники.Номенклатура;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ПолеСнизу = 3;
	ТабДок.ПолеСверху = 3;
	ТабДок.ПолеСлева = 3;
	ТабДок.ПолеСправа = 3;
	Счетчик = 0;
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Если НЕ СтрокаТаб.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		СтрокиВАкции = ТоварыСАкцией.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		Если ПоАкции
				И СтрокиВАкции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Если ПоАкции = Ложь
				И СтрокиВАкции.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолейДляЦенника = Новый Структура("СрокГодности, УпаковкаДляЦенника, Цена, СтранаПроисхождения, ФишкаКратко1, ФишкаКратко2
													|, ДатаНачалаВыводаНаСинийЦенник, ДатаОкончанияВыводаНаСинийЦенник, ТекстВместоФишки, ЕдИзмеренияНаименование
													|, Наименование, ПозицияРазделителяДляЦенника, ФишкаНаименование1, ФишкаНаименование2, ФишкаПиктограмма1, ФишкаПиктограмма2, Рейтинг",
													"", "", 0, "", "", ""
													, '00010101', '00010101', "", ""
													, "", 0, "", "", Неопределено, Неопределено);
		СтрокиОснДанные = ТабОсновныеДанные.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Если СтрокиОснДанные.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(СтрокиОснДанные[0].СрокГодностиНов) Тогда
				СрокГодности 	= ЧислоПрописью(СтрокиОснДанные[0].СрокГодностиНов, "НД=Ложь", СтрокиОснДанные[0].ТипСрокаГодностиПараметрыПрописиНаРусском);
				СрокГодности 	= СтрЗаменить(СрокГодности, " ", Символы.ПС);
				Если СтрЧислоСтрок(СрокГодности) > 0 Тогда
					СрокГодности = Формат(СтрокиОснДанные[0].СрокГодностиНов, "ЧГ=0") + " " + СтрПолучитьСтроку(СрокГодности, СтрЧислоСтрок(СрокГодности));
				КонецЕсли;
			КонецЕсли;	
			Если СтрокиОснДанные[0].СрокНеограничен = Истина Тогда
				СрокГодности = "Не ограничен";
			КонецЕсли;
			СтруктураПолейДляЦенника.Вставить("СрокГодности", СрокГодности);
			СтруктураПолейДляЦенника.Вставить("УпаковкаДляЦенника", СтрокиОснДанные[0].УпаковкаДляЦенника);
			СтруктураПолейДляЦенника.Вставить("Цена", СтрокиОснДанные[0].Цена);
			СтруктураПолейДляЦенника.Вставить("СтранаПроисхождения", СтрокиОснДанные[0].СтранаПроисхождения);
		КонецЕсли;
		
		СтрокиФишки = ТабДанныеПоФишкам.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		Фишка1 = "";
		Фишка2 = "";
		ДопТекст = "";
		Пиктограмма1 = Неопределено;
		Пиктограмма2 = Неопределено;
		Если СтрокиФишки.Количество() > 0 Тогда
			СтруктураПолейДляЦенника.Вставить("ФишкаКратко1", СтрокиФишки[0].ФишкаКратко1);
			СтруктураПолейДляЦенника.Вставить("ФишкаКратко2", СтрокиФишки[0].ФишкаКратко2);
			СтруктураПолейДляЦенника.Вставить("ДатаНачалаВыводаНаСинийЦенник", СтрокиФишки[0].ДатаНачалаВыводаНаСинийЦенник);
			СтруктураПолейДляЦенника.Вставить("ДатаОкончанияВыводаНаСинийЦенник", СтрокиФишки[0].ДатаОкончанияВыводаНаСинийЦенник);
			СтруктураПолейДляЦенника.Вставить("ТекстВместоФишки", СтрокиФишки[0].ТекстВместоФишки);
			СтруктураПолейДляЦенника.Вставить("ЕдИзмеренияНаименование", СтрокиФишки[0].ЕдИзмеренияНаименование);
			СтруктураПолейДляЦенника.Вставить("Наименование", СтрокиФишки[0].Наименование);
			СтруктураПолейДляЦенника.Вставить("ПозицияРазделителяДляЦенника", СтрокиФишки[0].ПозицияРазделителяДляЦенника);
			СтруктураПолейДляЦенника.Вставить("ФишкаНаименование1", СтрокиФишки[0].ФишкаНаименование1);
			СтруктураПолейДляЦенника.Вставить("ФишкаНаименование2", СтрокиФишки[0].ФишкаНаименование2);
			СтруктураПолейДляЦенника.Вставить("ФишкаПиктограмма1", СтрокиФишки[0].ФишкаПиктограмма1);
			СтруктураПолейДляЦенника.Вставить("ФишкаПиктограмма2", СтрокиФишки[0].ФишкаПиктограмма2);
		КонецЕсли;
		 //+++АК KIRN 2018.04.27 ИП-00018243
		 СтрокиРейтинг = ТабРейтинг.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		//СтрокиРейтинг = ТабРейтинг.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		//---АК KIRN 
		Рейтинг = 0;
		Если СтрокиРейтинг.Количество() > 0 Тогда
			Рейтинг = СтрокиРейтинг[0].Рейтинг;
		Иначе
			СтрокиРейтинг = ТабРейтинг.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
			Если СтрокиРейтинг.Количество() > 0 Тогда
				Рейтинг = СтрокиРейтинг[0].Рейтинг;
			КонецЕсли;	
		КонецЕсли;
		СтруктураПолейДляЦенника.Вставить("Рейтинг", Рейтинг);
		
		СтрокиДробныйЦенник = ТабЛожные.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Если СтрокиДробныйЦенник.Количество() > 0 Тогда
			СтруктураПолейДляЦенника.Вставить("ЛожныйШтрихКод", СтрокиДробныйЦенник[0].ЛожныйШтрихКод);
		Иначе
			СтруктураПолейДляЦенника.Вставить("ЛожныйШтрихКод", "");
		КонецЕсли;
		
		Если ПоАкции Тогда
			Для Каждого СтрокаВАкции Из СтрокиВАкции Цикл
				СтруктураРаспечатанногоЦенника = Неопределено;
				НеПомещатьЗаписьВРаспечатанные = Ложь;
				Если Объект.СШтрихкодом Тогда
					Область = СпрНоменклатура.ПолучитьЦенник_80_60_ШтрихКод(СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика);
					НеПомещатьЗаписьВРаспечатанные = Истина;
				Иначе
					СтруктураАкции = Новый Структура("Название, ТипАкции, Цена, КомментарийАкции", СтрокаВАкции.НазваниеАкции, СтрокаВАкции.ТипСкидки, СтрокаВАкции.Цена, СтрокаВАкции.КомментарийНаЦенник);
					Область = СпрНоменклатура.ПолучитьЦенник_80_60_ПоАкции(СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика, СтруктураАкции, СтруктураРаспечатанногоЦенника, Объект.ПечататьДробныеЦенники,, Объект.ЦенникСРейтингом, СтруктураПолейДляЦенника);
				КонецЕсли;
				//+++АК MIND 2017.12.13 массовые вызовы убивают проц
				//Если НЕ ТабДок.ПроверитьВывод(Область) Тогда
				Если Счетчик%5 = 0 Тогда
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ТабДок.Вывести(Область);
				Счетчик = Счетчик + 1;
				Если НеПомещатьЗаписьВРаспечатанные = Ложь Тогда
					Запись = РегистрыСведений.РаспечатанныеЦенникиМагазинов.СоздатьМенеджерЗаписи();
					Запись.ДатаПечати = ?(НЕ ПечатьНаЗавтра, ТекущаяДата(), НачалоДня(ТекущаяДата() + 86400));
					Запись.Номенклатура = СтрокаТаб.Номенклатура;
					Запись.Характеристика = СтрокаТаб.Характеристика;
					Запись.Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
					Если ТипЗнч(СтруктураРаспечатанногоЦенника) = Тип("Структура") Тогда
						ЗаполнитьЗначенияСвойств(Запись, СтруктураРаспечатанногоЦенника);
					КонецЕсли;	
					Запись.Записать();
					
					Набор = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьНаборЗаписей();
					Набор.Отбор.Магазин.Установить(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
					Набор.Отбор.Номенклатура.Установить(СтрокаТаб.Номенклатура);
					Набор.Записать();
				КонецЕсли;	
			КонецЦикла;
		Иначе
			СтруктураРаспечатанногоЦенника = Неопределено;
			НеПомещатьЗаписьВРаспечатанные = Ложь;
			Если Объект.СШтрихкодом Тогда
				Область = СпрНоменклатура.ПолучитьЦенник_80_60_ШтрихКод(СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика);
				НеПомещатьЗаписьВРаспечатанные = Истина;
			Иначе
				Область = СпрНоменклатура.ПолучитьЦенник_80_60(СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика,,,, СтруктураРаспечатанногоЦенника, Объект.ПечататьДробныеЦенники,,, Объект.ЦенникСРейтингом, СтруктураПолейДляЦенника);
				//Область = Справочники.Номенклатура.ПолучитьМакет("Ценник_Новый").ПолучитьОбласть("Область");
			КонецЕсли;
			Если Счетчик%3 = 0 Тогда
				//+++АК MIND 2017.12.13 массовые вызовы убивают проц
				//Если НЕ ТабДок.ПроверитьВывод(Область) Тогда
				Если Счетчик%(3*5) = 0 Тогда
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				ТабДок.Вывести(Область);
			Иначе
				ТабДок.Присоединить(Область);
			КонецЕсли;
			Счетчик = Счетчик + 1;
			Если НеПомещатьЗаписьВРаспечатанные = Ложь Тогда
				Запись = РегистрыСведений.РаспечатанныеЦенникиМагазинов.СоздатьМенеджерЗаписи();
				Запись.ДатаПечати 		= ?(НЕ ПечатьНаЗавтра, ТекущаяДата(), НачалоДня(ТекущаяДата() + 86400));
				Запись.Номенклатура 	= СтрокаТаб.Номенклатура;
				Запись.Характеристика 	= СтрокаТаб.Характеристика;
				Запись.Магазин 			= ПараметрыСеанса.ТорговаяТочкаПоАйпи;
				Если ТипЗнч(СтруктураРаспечатанногоЦенника) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(Запись, СтруктураРаспечатанногоЦенника);
				КонецЕсли;	
				Запись.Записать();
				
				Набор = РегистрыСведений.ЦенникиКПечатиВМагазинах.СоздатьНаборЗаписей();
				Набор.Отбор.Магазин.Установить(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
				Набор.Отбор.Номенклатура.Установить(СтрокаТаб.Номенклатура);
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати на магазинах
	Возврат ПоместитьВоВременноеХранилище(ТабДок);
	//Возврат ТабДок;
		
КонецФункции

&НаСервере
Функция ПечатьСертификаты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Сертификаты");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");	
	ОбластьРисунок   = Макет.ПолучитьОбласть("Рисунок");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Объект.ТоварыСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Номенклатура,
	               |	Таб.Характеристика,
	               |	Таб.НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	               |	СертификатыНаПродукциюСрезПоследних.Характеристика,
	               |	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер,
	               |	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	               |				&ДатаСреза,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_Данные.Номенклатура
	               |						ИЗ
	               |							ВТ_Данные КАК ВТ_Данные)
	               |					И Характеристика В
	               |						(ВЫБРАТЬ
	               |							ВТ_Данные.Характеристика
	               |						ИЗ
	               |							ВТ_Данные КАК ВТ_Данные)) КАК СертификатыНаПродукциюСрезПоследних
	               |		ПО ВТ_Данные.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
	               |			И ВТ_Данные.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
	               |			И (СертификатыНаПродукциюСрезПоследних.Удален = ЛОЖЬ)
	               |ГДЕ
	               |	СертификатыНаПродукциюСрезПоследних.ДействуетДо >= &ДатаСреза
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_Данные.НомерСтроки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаИменФайлов = Выборка.ХранилищеСертификатов.Получить();
		Если ТаблицаИменФайлов = Неопределено Тогда
			Продолжить;			
		КонецЕсли; 
		Если ТаблицаИменФайлов.Количество() = 0 Тогда
			Продолжить;			
		КонецЕсли; 
		СчетчикСтраниц = 1;
		РазмерФайлов = 0;
		ВсегоСтраниц = ТаблицаИменФайлов.Количество();			
		Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
			ОбластьЗаголовок.Параметры.ТорговаяТочка = Строка(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
			ОбластьЗаголовок.Параметры.Номенклатура = Строка(Выборка.Номенклатура) + Символы.ПС + Строка(Выборка.Характеристика);   
			ОбластьЗаголовок.Параметры.НомерСтр = СчетчикСтраниц;	
			ОбластьЗаголовок.Параметры.ВсегоСтр = ВсегоСтраниц;
			ТабДок.Вывести(ОбластьЗаголовок);
			
			Попытка
				ОбластьРисунок.Рисунки.D1.Картинка = Новый Картинка(СтрокаИмяФайла.ИмяФайла);
				ФайлКартинка = Новый Файл(СтрокаИмяФайла.ИмяФайла);
				РазмерФайлов = РазмерФайлов + ФайлКартинка.Размер();
			Исключение
				Сообщить("По товару " + Строка(Выборка.Номенклатура) + " не найден сертификат  в файле " + СтрокаИмяФайла.ИмяФайла);
				Продолжить;
			КонецПопытки;	
			//Сообщить(СтрокаИмяФайла.ИмяФайла);
			ТабДок.Вывести(ОбластьРисунок);
			
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЦикла;
		
		Запись = РегистрыСведений.ОтправленныеСертификаты.СоздатьМенеджерЗаписи();
		Запись.Номенклатура = Выборка.Номенклатура;
		Запись.Характеристика = Выборка.Характеристика;
		Запись.РегистрационныйНомер = Выборка.РегистрационныйНомер;
		Запись.ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Запись.ДатаОтправки = ТекущаяДата();
		Запись.РазмерФайла = РазмерФайлов;
		Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Запись.Записать();
	КонецЦикла;	
	
	Возврат ТабДок;
	
КонецФункции	

Процедура УдалитьКомплектыИзТабЧасти()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоКомплект = ИСТИНА";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();
	КолвоСтрок = Объект.Товары.Количество();
	Для н = 1 По КолвоСтрок Цикл
		СтрокаКеш = ТабКеш.Найти(Объект.Товары[КолвоСтрок - н].Номенклатура, "Ссылка");
		Если СтрокаКеш <> Неопределено Тогда
			Объект.Товары.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьШтрихКодыВХарактеристике(ОтказПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.Характеристика
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.Пометка = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Номенклатура,
	|	Данные.Характеристика,
	|	ЕСТЬNULL(ШтриховыеКоды.ШтрихКод, """") КАК ШтрихКод
	|ИЗ
	|	ВТ_Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО Данные.Номенклатура = ШтриховыеКоды.Номенклатура
	|			И Данные.Характеристика = ШтриховыеКоды.Характеристика
	|			И (ШтриховыеКоды.ВыведенИзМагазинов = ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ШтрихКод) Тогда
			Сообщить("Для товара: " + Выборка.Номенклатура + " с характеристикой: " + Выборка.Характеристика + " не определен штрих-код. Печать невозможна.");
			ОтказПечати = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Печать(Команда)
	
	Если Элементы.Группа1.ТекущаяСтраница.Имя = "ГруппаПрайсЛист" Тогда
		ТабПрайс.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	ИначеЕсли Элементы.Группа1.ТекущаяСтраница.Имя = "ГруппаСертификаты" Тогда
		ТабДок = ПечатьСертификаты();
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	ИначеЕсли Элементы.Группа1.ТекущаяСтраница.Имя = "ГруппаОвощи" Тогда
		ТабДок = СформироватьЭтикеткиНаСервере();
		Парам=Новый Структура("ТабДок",ТабДок);
		ОткрытьФорму("ОбщаяФорма.ФормаПечати",Парам);
		//табдок.показать();
		//ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	ИначеЕсли Элементы.Группа1.ТекущаяСтраница.Имя = "ГруппаПротоколыПроверкиКачества" Тогда
		МассивСтруктура = ПолучитьПротоколыПроверкиКачества();
		Если ПротоколыСразуНаПринтер Тогда
			Shell = Новый COMОбъект("Shell.Application");
			Для Каждого ЭлементМассива Из МассивСтруктура Цикл
				ИмяВремФайла = ПолучитьИмяВременногоФайла(ЭлементМассива.Расширение);
				ДвДанные = ПолучитьИзВременногоХранилища(ЭлементМассива.АдресДанных);
				ДвДанные.Записать(ИмяВремФайла);
				УдалитьИзВременногоХранилища(ЭлементМассива.АдресДанных);
				
				Shell = Новый COMОбъект("Shell.Application");
	    		Shell.ShellExecute(ИмяВремФайла, "", "", "print", 0);
			КонецЦикла;	
			Shell = Неопределено;
		Иначе
			Для Каждого ЭлементМассива Из МассивСтруктура Цикл
				ИмяВремФайла = ПолучитьИмяВременногоФайла(ЭлементМассива.Расширение);
				ДвДанные = ПолучитьИзВременногоХранилища(ЭлементМассива.АдресДанных);
				ДвДанные.Записать(ИмяВремФайла);
				УдалитьИзВременногоХранилища(ЭлементМассива.АдресДанных);
				ЗапуститьПриложение(ИмяВремФайла);
			КонецЦикла;
		КонецЕсли;	
	Иначе
		УдалитьКомплектыИзТабЧасти();
		
		ОтказПечати = Ложь;
		Для Каждого СтрокаТаб Из Объект.Товары Цикл
			Если СтрокаТаб.Пометка И НЕ ЗначениеЗаполнено(СтрокаТаб.Характеристика) Тогда
				Сообщить("В строке с товаром: " + СтрокаТаб.Номенклатура + " не заполнена характеристика");
				ОтказПечати = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если Объект.СШтрихкодом Тогда
			ПроверитьШтрихКодыВХарактеристике(ОтказПечати);
		КонецЕсли;	
		
		//+++АК MIND 2017.12.05 при большом количестве ценников к печати сразу отправляем на принтер полученный таб док
		СразуНаПринтер = Ложь;
		Если НЕ ОтказПечати Тогда
			Если Объект.Товары.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() > 35 Тогда
				Ответ = Вопрос("Общее количество помеченных строк к печати превысило 35 штук, полученный документ будет сразу отправлен на печать. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					ОтказПечати = Истина;
				Иначе
					СразуНаПринтер = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ОтказПечати Тогда
			Возврат;
		КонецЕсли;	
		
		СписокТипов = Новый СписокЗначений;
		Если Объект.Товары.НайтиСтроки(Новый Структура("ПризнакЦенника", 0)).Количество() > 0 Тогда
			СписокТипов.Добавить("Обычные ценники");
		КонецЕсли;	
		Если Объект.Товары.НайтиСтроки(Новый Структура("ПризнакЦенника", 1)).Количество() > 0 Тогда
			СписокТипов.Добавить("Желтые ценники");
		КонецЕсли;
		
		Если Объект.Товары.НайтиСтроки(Новый Структура("ПризнакЦенника", 2)).Количество() > 0 Тогда
			СписокТипов.Добавить("Оранжевые ценники");
		КонецЕсли;
		
		Если Объект.Товары.НайтиСтроки(Новый Структура("ПризнакЦенника", 3)).Количество() > 0 Тогда
			СписокТипов.Добавить("Синие ценники");
		КонецЕсли;
		
		Если СписокТипов.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли СписокТипов.Количество() = 1 Тогда
			Элемент = СписокТипов[0];
		Иначе	
			Элемент = СписокТипов.ВыбратьЭлемент("Выберите тип ценника");
		КонецЕсли;	
		Если Элемент <> Неопределено Тогда
			Если Элемент.Значение = "Обычные ценники" Тогда
				МассивНомераПомеченные = Новый Массив;
				Для Каждого СтрокаТаб Из Объект.Товары Цикл
					Если СтрокаТаб.Пометка Тогда
						МассивНомераПомеченные.Добавить(СтрокаТаб.НомерСтроки);
					КонецЕсли;	
					Если СтрокаТаб.ПризнакЦенника <> 0 Тогда
						СтрокаТаб.Пометка = Ложь;
					КонецЕсли;	
				КонецЦикла;
				
				//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати
				//ТабДок = ПечатьСервер();
				//разбиваем печать на порции, таким приемом сервер не засирает сам в себе память
				КолвоПорций = Цел(МассивНомераПомеченные.Количество() / 45) + ?(МассивНомераПомеченные.Количество() % 45 = 0, 0, 1);
				Для НомерПорции = 1 По КолвоПорций Цикл
					Для Каждого СтрокаТаб Из Объект.Товары Цикл
						СтрокаТаб.Пометка = Ложь;
					КонецЦикла;	
					Для ЭлементВПорции = 1 По 45 Цикл
						ТекИндекс = (НомерПорции - 1) * 45 + ЭлементВПорции;
						Если ТекИндекс > МассивНомераПомеченные.Количество() Тогда
							Прервать;
						КонецЕсли;
						Объект.Товары[МассивНомераПомеченные[ТекИндекс - 1] - 1].Пометка = Истина;
					КонецЦикла;	
					АдресТабДок = ПечатьСервер();
					ТабДок = ПолучитьИзВременногоХранилища(АдресТабДок);
					УдалитьИзВременногоХранилища(АдресТабДок);
					Если ТабДок <> Неопределено
						И ТабДок.ВысотаТаблицы > 0 Тогда
						Если СразуНаПринтер Тогда
							ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
						Иначе		
							ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабДок, Истина, Истина, "Ценники"),, Новый УникальныйИдентификатор());
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
				
				Для Каждого ЭлементМассива Из МассивНомераПомеченные Цикл
					Объект.Товары[ЭлементМассива - 1].Пометка = Истина;
				КонецЦикла;
			КонецЕсли;
			
			Если Элемент.Значение = "Желтые ценники" Тогда
				МассивНомераПомеченные = Новый Массив;
				Для Каждого СтрокаТаб Из Объект.Товары Цикл
					Если СтрокаТаб.Пометка Тогда
						МассивНомераПомеченные.Добавить(СтрокаТаб.НомерСтроки);
					КонецЕсли;	
					Если СтрокаТаб.ПризнакЦенника <> 1 Тогда
						СтрокаТаб.Пометка = Ложь;
					КонецЕсли;	
				КонецЦикла;
				
				//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати
				//ТабДок = ПечатьСервер(Истина);
				АдресТабДок = ПечатьСервер(Истина);
				ТабДок = ПолучитьИзВременногоХранилища(АдресТабДок);
				УдалитьИзВременногоХранилища(АдресТабДок);
				Если ТабДок <> Неопределено
						И ТабДок.ВысотаТаблицы > 0 Тогда
					Если СразуНаПринтер Тогда
						ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					Иначе
						ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабДок, Истина, Истина, "Ценники"),, Новый УникальныйИдентификатор());
					КонецЕсли;	
				КонецЕсли;
				
				Для Каждого ЭлементМассива Из МассивНомераПомеченные Цикл
					Объект.Товары[ЭлементМассива - 1].Пометка = Истина;
				КонецЦикла;	
				
			КонецЕсли;
			
			Если Элемент.Значение = "Оранжевые ценники" Тогда
				МассивНомераПомеченные = Новый Массив;
				Для Каждого СтрокаТаб Из Объект.Товары Цикл
					Если СтрокаТаб.Пометка Тогда
						МассивНомераПомеченные.Добавить(СтрокаТаб.НомерСтроки);
					КонецЕсли;	
					Если СтрокаТаб.ПризнакЦенника <> 2 Тогда
						СтрокаТаб.Пометка = Ложь;
					КонецЕсли;	
				КонецЦикла;
				
				//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати
				//ТабДок = ПечатьСервер(Истина);
				АдресТабДок = ПечатьСервер(Истина);
				ТабДок = ПолучитьИзВременногоХранилища(АдресТабДок);
				УдалитьИзВременногоХранилища(АдресТабДок);
				Если ТабДок <> Неопределено
						И ТабДок.ВысотаТаблицы > 0 Тогда
					Если СразуНаПринтер Тогда
						ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					Иначе
						ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабДок, Истина, Истина, "Ценники"),, Новый УникальныйИдентификатор());
					КонецЕсли;	
				КонецЕсли;
				
				Для Каждого ЭлементМассива Из МассивНомераПомеченные Цикл
					Объект.Товары[ЭлементМассива - 1].Пометка = Истина;
				КонецЦикла;	
				
			КонецЕсли;
			
			Если Элемент.Значение = "Синие ценники" Тогда
				МассивНомераПомеченные = Новый Массив;
				Для Каждого СтрокаТаб Из Объект.Товары Цикл
					Если СтрокаТаб.Пометка Тогда
						МассивНомераПомеченные.Добавить(СтрокаТаб.НомерСтроки);
					КонецЕсли;	
					Если СтрокаТаб.ПризнакЦенника <> 3 Тогда
						СтрокаТаб.Пометка = Ложь;
					КонецЕсли;	
				КонецЦикла;
				
				//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати
				//ТабДок = ПечатьСервер(Истина);
				АдресТабДок = ПечатьСервер(Истина);
				ТабДок = ПолучитьИзВременногоХранилища(АдресТабДок);
				УдалитьИзВременногоХранилища(АдресТабДок);
				Если ТабДок <> Неопределено
						И ТабДок.ВысотаТаблицы > 0 Тогда
					Если СразуНаПринтер Тогда
						ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					Иначе
						ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабДок, Истина, Истина, "Ценники"),, Новый УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;
				
				//+++АК MIND 2017.12.05 борьба с падением сервера при массовой печати
				//ТабДок = ПечатьСервер();
				АдресТабДок = ПечатьСервер();
				ТабДок = ПолучитьИзВременногоХранилища(АдресТабДок);
				УдалитьИзВременногоХранилища(АдресТабДок);
				Если ТабДок <> Неопределено
						И ТабДок.ВысотаТаблицы > 0 Тогда
					Если СразуНаПринтер Тогда
						ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					Иначе
						ОткрытьФорму("ОбщаяФорма.ФормаОтображенияТабДокумента", Новый Структура("ТабДок, ОтображатьСетку, РазрешитьРедактирование, УстановитьЗаголовок", ТабДок, Истина, Истина, "Ценники"),, Новый УникальныйИдентификатор());
					КонецЕсли;	
				КонецЕсли;
				
				Для Каждого ЭлементМассива Из МассивНомераПомеченные Цикл
					Объект.Товары[ЭлементМассива - 1].Пометка = Истина;
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьПротоколыПроверкиКачества()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Товары", Объект.ТоварыПротоколы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СрокДействия", НачалоДня(ТекущаяДата()));
	
	//+++АК KIRN 2018.04.27 
	Запрос.УстановитьПараметр("ДАтаНач", НачалоДня(ДобавитьМесяц(ТекущаяДата(),-6)));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроверкаКачестваТоваров.Номенклатура КАК Номенклатура,
	               |	ПроверкаКачестваТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПроверкаКачестваТоваров.ИмяФайла,
	               |	ПроверкаКачестваТоваров.ИмяФайлаСРасширением,
	               |	ПроверкаКачестваТоваров.ДатаПовторнойПроверки,
	               |	ПроверкаКачестваТоваров.Дата КАК Дата,
	               |	ПроверкаКачестваТоваров.ДатаПрикрепления
	               |ИЗ
	               |	Документ.ПроверкаКачестваТоваров КАК ПроверкаКачестваТоваров
	               |ГДЕ
	               |	ПроверкаКачестваТоваров.Дата <= &ТекДата
	               |	И ПроверкаКачестваТоваров.ДатаПрикрепления МЕЖДУ &ДАтаНач И &ТекДата
	               |	И ПроверкаКачестваТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЖурналаПроверкиКачестваТоваров.ПроверкаВыполнена)
	               |	И ПроверкаКачестваТоваров.Номенклатура В ИЕРАРХИИ(&Товары)
   				   //+++АК sole 2018.08.31 ИП-00019718
				   |	И ПроверкаКачестваТоваров.Лаборатория.ИД <> 152
				   //---АК sole 2018.08.31 ИП-00019718
	               |	И ПОДСТРОКА(ПроверкаКачестваТоваров.ИмяФайла, 1, 1) <> "" ""
	               //|	И ПроверкаКачестваТоваров.ДатаПовторнойПроверки >= &СрокДействия
	               |	И НЕ ПроверкаКачестваТоваров.Ссылка В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ПроверкаКачестваТоваровСоставПоказателей.Ссылка
	               |				ИЗ
	               |					Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваровСоставПоказателей
	               |				ГДЕ
	               |					ПроверкаКачестваТоваровСоставПоказателей.Нарушение = ИСТИНА)
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	ПроверкаКачестваТоваров.Дата УБЫВ";
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПроверкаКачестваТоваров.Номенклатура КАК Номенклатура,
	//               |	ПроверкаКачестваТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//               |	МАКСИМУМ(ПроверкаКачестваТоваров.Дата) КАК Дата
	//               |ПОМЕСТИТЬ ВТ_МаксЗаписи
	//               |ИЗ
	//               |	Документ.ПроверкаКачестваТоваров КАК ПроверкаКачестваТоваров
	//               |ГДЕ
	//               |	ПроверкаКачестваТоваров.Дата <= &ТекДата
	//               |	И ПроверкаКачестваТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЖурналаПроверкиКачестваТоваров.ПроверкаВыполнена)
	//               |	И ПроверкаКачестваТоваров.Номенклатура В ИЕРАРХИИ(&Товары)
	//               |	И ПОДСТРОКА(ПроверкаКачестваТоваров.ИмяФайла, 1, 1) <> "" ""
	//               |	И НЕ ПроверкаКачестваТоваров.Ссылка В
	//               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |					ПроверкаКачестваТоваровСоставПоказателей.Ссылка
	//               |				ИЗ
	//               |					Документ.ПроверкаКачестваТоваров.СоставПоказателей КАК ПроверкаКачестваТоваровСоставПоказателей
	//               |				ГДЕ
	//               |					ПроверкаКачестваТоваровСоставПоказателей.Нарушение = ИСТИНА)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ПроверкаКачестваТоваров.Номенклатура,
	//               |	ПроверкаКачестваТоваров.ХарактеристикаНоменклатуры
	//               |
	//               |ИНДЕКСИРОВАТЬ ПО
	//               |	Дата,
	//               |	Номенклатура,
	//               |	ХарактеристикаНоменклатуры
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ПроверкаКачестваТоваров.Ссылка,
	//               |	ПроверкаКачестваТоваров.Номенклатура,
	//               |	ПроверкаКачестваТоваров.ХарактеристикаНоменклатуры,
	//               |	ПроверкаКачестваТоваров.ИмяФайла,
	//               |	ПроверкаКачестваТоваров.ИмяФайлаСРасширением,
	//               |	ПроверкаКачестваТоваров.ДатаПовторнойПроверки
	//               |ИЗ
	//               |	ВТ_МаксЗаписи КАК ВТ_МаксЗаписи
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроверкаКачестваТоваров КАК ПроверкаКачестваТоваров
	//               |		ПО ВТ_МаксЗаписи.Дата = ПроверкаКачестваТоваров.Дата
	//               |			И ВТ_МаксЗаписи.Номенклатура = ПроверкаКачестваТоваров.Номенклатура
	//               |			И ВТ_МаксЗаписи.ХарактеристикаНоменклатуры = ПроверкаКачестваТоваров.ХарактеристикаНоменклатуры
	//               |ГДЕ
	//               |	ПроверкаКачестваТоваров.ДатаПовторнойПроверки >= &СрокДействия
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ПроверкаКачестваТоваров.Дата УБЫВ";
	//---АК KIRN 
		   
	МассивВозврат = Новый Массив();
	
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из Объект.ТоварыПротоколы Цикл
		СтрокиПротокол = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Если СтрокиПротокол.Количество() = 0 Тогда
			СтрокиПротокол = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		КонецЕсли;	
		Если СтрокиПротокол.Количество() = 0 Тогда
			Сообщить("Не найден протокол для товара " + СтрокаТаб.Номенклатура);
			Продолжить;
		КонецЕсли;	
		Файл = Новый Файл(СтрокиПротокол[0].ИмяФайла);
		Если НЕ Файл.Существует() Тогда
			Сообщить("Не найден протокол для товара " + СтрокаТаб.Номенклатура);
			Продолжить;
		КонецЕсли;	
		// +++ АК mirv 29.11.2017 [ИП-00015990]
		//СтруктураФайл = Новый Структура("АдресДанных, Расширение", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтрокиПротокол[0].ИмяФайла), Новый УникальныйИдентификатор()), Файл.Расширение);
		//МассивВозврат.Добавить(СтруктураФайл);
		// Теперь выводим все протоколы
		Для каждого СтрокаПротокол Из СтрокиПротокол Цикл
			СтруктураФайл = Новый Структура("АдресДанных, Расширение", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтрокаПротокол.ИмяФайла), Новый УникальныйИдентификатор()), Файл.Расширение);
			МассивВозврат.Добавить(СтруктураФайл);
		КонецЦикла; 
		// --- АК mirv  
	КонецЦикла;	
	
	Возврат МассивВозврат;
	
КонецФункции	

Функция СформироватьЭтикеткиНаСервере()
	
	//Этикетки.Очистить();
	//ТаблицаМакетовЭтикеток.Очистить();
	
	//ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	Макет = Обработки.ПечатьЭтикетокНаОвощи.ПолучитьМакет("Этикетка");
	//+++ АК bara  ИП-00015387.000.00000001
	Макет = Обработки.ПечатьЭтикетокНаОвощи.ПолучитьМакет("АК_Этикетка");
	//--- АК bara
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	//Область = Макет.ПолучитьОбласть("Этикетка");
	//ОбластьСтр = Макет.ПолучитьОбласть("Строка");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", Объект.Товары1.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.Характеристика,
	|	ТЗ.ДатаПоставки
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура,
	|	вт.Характеристика,
	|	МАКСИМУМ(ЭтикеткиНаОвощи.Период) КАК Период,
	|	вт.ДатаПоставки
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи КАК ЭтикеткиНаОвощи
	|		ПО вт.Номенклатура = ЭтикеткиНаОвощи.Номенклатура
	|			И вт.Характеристика = ЭтикеткиНаОвощи.Характеристика
	|			И вт.ДатаПоставки >= ЭтикеткиНаОвощи.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Номенклатура,
	|	вт.Характеристика,
	|	вт.ДатаПоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура,
	|	втТовары.Характеристика,
	|	ЭтикеткиНаОвощи.СтранаПроисхождения,
	|	ЭтикеткиНаОвощи.Производитель,
	|	ЭтикеткиНаОвощи.Поставщик,
	|	ЭтикеткиНаОвощи.АдресИзготовителя,
	|	ЭтикеткиНаОвощи.ДатаСбора,
	|	ЭтикеткиНаОвощи.СрокГодности,
	|	ЭтикеткиНаОвощи.УсловияХранения,
	|	ЭтикеткиНаОвощи.Импортер,
	|	ЭтикеткиНаОвощи.АдресИмпортера,
	|	втТовары.ДатаПоставки,
	|	ЭтикеткиНаОвощи.АдресПоставщика,
	|	(втТовары.Характеристика.СрокГодности) КАК СрокГодностиНов,
	|ЕСТЬNULL(втТовары.Характеристика.ТипСрокаГодности.ПараметрыПрописиНаРусском, """") КАК ТипСрокаГодностиПараметрыПрописиНаРусском
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтикеткиНаОвощи КАК ЭтикеткиНаОвощи
	|		ПО втТовары.Номенклатура = ЭтикеткиНаОвощи.Номенклатура
	|			И втТовары.Характеристика = ЭтикеткиНаОвощи.Характеристика
	|			И втТовары.Период = ЭтикеткиНаОвощи.Период";
	ТабКеш = Запрос.Выполнить().Выгрузить();
	Для Каждого Выб Из Объект.Товары1 Цикл
		
		//Если ТабДок.ВысотаТаблицы > 0 Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;	
		
		СтрокиКеш = ТабКеш.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Выб.Номенклатура, Выб.Характеристика));
		Если СтрокиКеш.Количество() = 0 Тогда
			//Сообщить("Для сочетания " + Выб.Номенклатура + " " + Выб.Характеристика + " не присвоен Id по нумератору");
			Продолжить;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("Этикетка");
		ЗаполнитьЗначенияСвойств(Область.Параметры,СтрокиКеш[0]);
		
		//+++ АК bara  ИП-00015387.000.00000001
		Область.Параметры.ДатаСбора = Формат(СтрокиКеш[0].ДатаСбора,"ДФ=M.yy");
		Область.Параметры.ДатаПоставки = Формат(СтрокиКеш[0].ДатаПоставки,"ДФ=dd.MM.yyyy");
		//--- АК bara  ИП-00015387.000.00000001
		СрокГодности="";
		Если ЗначениеЗаполнено(СтрокиКеш[0].СрокГодностиНов) Тогда
			СрокГодности 	= ЧислоПрописью(СтрокиКеш[0].СрокГодностиНов, "НД=Ложь", СтрокиКеш[0].ТипСрокаГодностиПараметрыПрописиНаРусском);
			СрокГодности 	= СтрЗаменить(СрокГодности, " ", Символы.ПС);
			Если СтрЧислоСтрок(СрокГодности) > 0 Тогда
				СрокГодности = Формат(СтрокиКеш[0].СрокГодностиНов, "ЧГ=0") + " " + СтрПолучитьСтроку(СрокГодности, СтрЧислоСтрок(СрокГодности));
			КонецЕсли;
		КонецЕсли;	
		//Область.Параметры.СрокГодности = СрокГодности;
		//Для н = 1 По Выб.КоличествоКопий Цикл
		Если ТабДок.ПроверитьВывод(Область)=Ложь Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		ТабДок.Вывести(Область);
			//ТабДокИтог = Новый ТабличныйДокумент();
			//ТабДокИтог.ПолеСверху = 0;
			//ТабДокИтог.ПолеСнизу = 0;
			//ТабДокИтог.ПолеСлева = 0;
			//ТабДокИтог.ПолеСправа = 0;
			//ТабДокИтог.ШиринаСтраницы = 98;
			//ТабДокИтог.ВысотаСтраницы = 78;
			//ТабДокИтог.Вывести(ТабДок);
			//СтрокаДоб = ТаблицаМакетовЭтикеток.Добавить();
			//СтрокаДоб.ТабДокСтрокой = ЗначениеВСтрокуВнутр(ТабДокИтог);
		//КонецЦикла;
	КонецЦикла;	
	
	//Этикетки.Вывести(ТабДок);
	//Этикетки.КлючПараметровПечати = "ПараметрыПечати_ПечатьЭтикетокНаОвощи";
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			Предупреждение("По штрих-коду не найдена номенклатура");
		Иначе
			Если Элементы.Группа1.ТекущаяСтраница = Элементы.ГруппаСертификаты Тогда
				Элементы.ТоварыСертификаты.ДобавитьСтроку();
				ТекДанные = Элементы.ТоварыСертификаты.ТекущиеДанные;
				ТекДанные.Номенклатура = СтруктураДанных.Номенклатура;
				ТекДанные.Характеристика = СтруктураДанных.Характеристика;
			Иначе	
				Элементы.Товары.ДобавитьСтроку();
				ТекДанные = Элементы.Товары.ТекущиеДанные;
				ТекДанные.Номенклатура = СтруктураДанных.Номенклатура;
				ТекДанные.Характеристика = СтруктураДанных.Характеристика;
				ТекДанные.Пометка = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.Пометка = Истина;
	Элементы.Товары.ТекущиеДанные.Характеристика = ВнешниеДанные.ПолучитьХарактеристикуДляНоменклатуры(Элементы.Товары.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

Процедура ЗаполнитьПоВыкладке(МестоВыкладки)
	
	//+++АК MIND 2017.10.30 заполнять нужно по товарам только с остатками в магазине
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT
	                  |	TD.id_tov
	                  |FROM
	                  |	SMS_Repl.dbo.TD_ost as TD (nolock)
	                  |WHERE
					  |TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + "
	                  |	and TD.Ost_kon > 0";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТабОстаток = Новый ТаблицаЗначений();
	ТабОстаток.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабОстаток.Добавить();
			СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ТабОстаток.Индексы.Добавить("id_tov");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочаяДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка"	, ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("Планограмма"		, ПараметрыСеанса.ТорговаяТочкаПоАйпи.Планограмма);
	Запрос.УстановитьПараметр("ДатаТек"			, ТекущаяДата());
	Запрос.УстановитьПараметр("МестоВыкладки"	, МестоВыкладки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыкладкаПланограммы.Номенклатура,
	|	ВыкладкаПланограммы.Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				&ДатаТек,
	|				ТорговаяТочка = &ТорговаяТочка
	|					И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО ВыкладкаПланограммы.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ГДЕ
	|	(ВыкладкаПланограммы.Планограмма = &Планограмма
	|			ИЛИ &Планограмма = ЗНАЧЕНИЕ(Справочник.Планограммы.ПустаяСсылка))
	|	И ВыкладкаПланограммы.МестоВыкладки = &МестоВыкладки
	|	И ВыкладкаПланограммы.Номенклатура В
	|			(ВЫБРАТЬ
	|				ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|			ИЗ
	|				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&РабочаяДата, ТорговаяТочка = &ТорговаяТочка
	|					ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочекСрезПоследних
	|			ГДЕ
	|				ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ)
	|	И ВыкладкаПланограммы.Номенклатура В
	|			(ВЫБРАТЬ
	|				ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&РабочаяДата, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыкладкаПланограммы.Номенклатура.Наименование";
				   
	МассивТовары = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТабОстаток.Найти(Выборка.id_tov, "id_tov") = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаТаб = Объект.Товары.Добавить();
		СтрокаТаб.Пометка = Истина;
		СтрокаТаб.Номенклатура = Выборка.Номенклатура;
		МассивТовары.Добавить(СтрокаТаб.Номенклатура);
	КонецЦикла;
	
	СоотвествиеРезультат = ВнешниеДанные.ПолучитьХарактеристикуДляМассиваНоменклатуры(МассивТовары);
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Харка = СоотвествиеРезультат.Получить(СтрокаТаб.Номенклатура);
		Если ЗначениеЗаполнено(Харка) Тогда
			СтрокаТаб.Характеристика = Харка;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПоВыкладкеСертификаты(МестоВыкладки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("РабочаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыкладкаПланограммы.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |				&ДатаТек,
	               |				ТорговаяТочка = &ТорговаяТочка
	               |					И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	               |		ПО ВыкладкаПланограммы.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	               |ГДЕ
	               |	(ВыкладкаПланограммы.Планограмма = &Планограмма
	               |			ИЛИ &Планограмма = ЗНАЧЕНИЕ(Справочник.Планограммы.ПустаяСсылка))
	               |	И ВыкладкаПланограммы.МестоВыкладки = &МестоВыкладки
	               |	И ВыкладкаПланограммы.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&РабочаяДата, ТорговаяТочка = &ТорговаяТочка
	               |					ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |			ГДЕ
	               |				ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ)
	               |	И ВыкладкаПланограммы.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&РабочаяДата, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВыкладкаПланограммы.Номенклатура.Наименование";
				   
	Запрос.УстановитьПараметр("Планограмма", ПараметрыСеанса.ТорговаяТочкаПоАйпи.Планограмма);
	Запрос.УстановитьПараметр("ДатаТек", ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("МестоВыкладки", МестоВыкладки);
	
	МассивТовары = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = Объект.ТоварыСертификаты.Добавить();
//		СтрокаТаб.Пометка = Истина;
		СтрокаТаб.Номенклатура = Выборка.Номенклатура;
		МассивТовары.Добавить(СтрокаТаб.Номенклатура);
		//СтрокаТаб.Характеристика = ВнешниеДанные.ПолучитьХарактеристикуДляНоменклатуры(СтрокаТаб.Номенклатура);
	КонецЦикла;
	
	СоотвествиеРезультат = ВнешниеДанные.ПолучитьХарактеристикуДляМассиваНоменклатуры(МассивТовары);
	Для Каждого СтрокаТаб Из Объект.ТоварыСертификаты Цикл
		Харка = СоотвествиеРезультат.Получить(СтрокаТаб.Номенклатура);
		Если ЗначениеЗаполнено(Харка) Тогда
			СтрокаТаб.Характеристика = Харка;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПоВыкладкеПротоколы(МестоВыкладки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("РабочаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыкладкаПланограммы.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |				&ДатаТек,
	               |				ТорговаяТочка = &ТорговаяТочка
	               |					И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	               |		ПО ВыкладкаПланограммы.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	               |ГДЕ
	               |	(ВыкладкаПланограммы.Планограмма = &Планограмма
	               |			ИЛИ &Планограмма = ЗНАЧЕНИЕ(Справочник.Планограммы.ПустаяСсылка))
	               |	И ВыкладкаПланограммы.МестоВыкладки = &МестоВыкладки
	               |	И ВыкладкаПланограммы.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&РабочаяДата, ТорговаяТочка = &ТорговаяТочка
	               |					ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочекСрезПоследних
	               |			ГДЕ
	               |				ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ)
	               |	И ВыкладкаПланограммы.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			ИЗ
	               |				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&РабочаяДата, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВыкладкаПланограммы.Номенклатура.Наименование";
				   
	Запрос.УстановитьПараметр("Планограмма", ПараметрыСеанса.ТорговаяТочкаПоАйпи.Планограмма);
	Запрос.УстановитьПараметр("ДатаТек", ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("МестоВыкладки", МестоВыкладки);
	
	МассивТовары = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = Объект.ТоварыПротоколы.Добавить();
//		СтрокаТаб.Пометка = Истина;
		СтрокаТаб.Номенклатура = Выборка.Номенклатура;
		МассивТовары.Добавить(СтрокаТаб.Номенклатура);
		//СтрокаТаб.Характеристика = ВнешниеДанные.ПолучитьХарактеристикуДляНоменклатуры(СтрокаТаб.Номенклатура);
	КонецЦикла;
	
	СоотвествиеРезультат = ВнешниеДанные.ПолучитьХарактеристикуДляМассиваНоменклатуры(МассивТовары);
	Для Каждого СтрокаТаб Из Объект.ТоварыПротоколы Цикл
		Харка = СоотвествиеРезультат.Получить(СтрокаТаб.Номенклатура);
		Если ЗначениеЗаполнено(Харка) Тогда
			СтрокаТаб.Характеристика = Харка;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМестуВыкладки(Команда)
	
	МестоВыкладки = ПредопределенноеЗначение("Справочник.МестаВыкладки.ПустаяСсылка");
	Если ВвестиЗначение(МестоВыкладки, "Выберите место выкладки") Тогда
		ЗаполнитьПоВыкладке(МестоВыкладки);
		ЗаполнитьПризнакЦенника();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучитьПрайсСервер()
	
	ТабПрайс.Очистить();
	ТабПрайс.Вывести(Обработки.ПечатьЦенниковМагазин.ПолучитьТабДокПрайс(ТабМестаВыкладки.Выгрузить().ВыгрузитьКолонку("МестоВыкладки")));
	//ТабПрайс.ПовторятьПриПечатиСтроки = ТабПрайс.Область(7,,8,);
	
КонецПроцедуры

&НаКлиенте
Процедура Группа1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаПрайсЛист" Тогда
		ПолучитьПрайсСервер();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМестаВыкладкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПолучитьПрайсСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМестаВыкладкиПослеУдаления(Элемент)
	
	ПолучитьПрайсСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора    =    Новый Структура("ДополнительныеПараметры, ТекстПоиска", "ПодборДляМагазина", Текст);
    ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ПараметрыПодбора);
	
КонецПроцедуры

Процедура УбратьФактПечатиЦенниковЗаСегодняСервер()
	
	Набор = РегистрыСведений.РаспечатанныеЦенникиМагазинов.СоздатьНаборЗаписей();
	Набор.Отбор.ДатаПечати.Установить(НачалоДня(ТекущаяДата()));
	Набор.Отбор.Магазин.Установить(ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Набор.Записать();
	
	ОбновитьТоварыКПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьФактПечатиЦенниковЗаСегодня(Команда)
	
	УбратьФактПечатиЦенниковЗаСегодняСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПечатиЦенников(Команда)
	
	ОткрытьФорму("РегистрСведений.РаспечатанныеЦенникиМагазинов.Форма.ФормаСпискаИстории");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификатыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора    =    Новый Структура("ДополнительныеПараметры, ТекстПоиска", "ПодборДляМагазина", Текст);
    ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификатыНоменклатураПриИзменении(Элемент)
	
	Элементы.ТоварыСертификаты.ТекущиеДанные.Характеристика = ВнешниеДанные.ПолучитьХарактеристикуДляНоменклатуры(Элементы.ТоварыСертификаты.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда
			ШтрихКодОбработанФормой = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакЦенника()
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ПризнакЦенника = 0;
	КонецЦикла;
	
	НаДату = ?(ПечатьНаЗавтра, НачалоДня(ТекущаяДата() + 86400), НачалоДня(ТекущаяДата()));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", НаДату);
	Запрос.УстановитьПараметр("ДействуетВМагазине", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураАкции.Ссылка,
	               |	НоменклатураАкции.ТипСкидки
	               |ИЗ
	               |	Справочник.Номенклатура.Акции КАК НоменклатураАкции
	               |ГДЕ
	               |	НоменклатураАкции.ДатаНачала <= &ТекДата
	               |	И НоменклатураАкции.ДатаОкончания >= &ТекДата
	               |	И (НоменклатураАкции.ДействуетВМагазине = &ДействуетВМагазине
	               |			ИЛИ НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.ДатаНачалаВыводаНаСинийЦенник,
	               |	Номенклатура.ДатаОкончанияВыводаНаСинийЦенник,
	               |	Номенклатура.ТекстВместоФишки
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	&ТекДата МЕЖДУ Номенклатура.ДатаНачалаВыводаНаСинийЦенник И Номенклатура.ДатаОкончанияВыводаНаСинийЦенник";
				   
	Результаты = Запрос.ВыполнитьПакет();			   
	ТабКеш = Результаты[1].Выгрузить();
	Для Каждого СтрокаКеш Из ТабКеш Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКеш.ТекстВместоФишки) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКеш.Ссылка));
		Для Каждого СтрокаТаб Из СтрокиТовары Цикл
			СтрокаТаб.ПризнакЦенника = 3;
		КонецЦикла;
	КонецЦикла;
	
	ТабКеш = Результаты[0].Выгрузить();
	Для Каждого СтрокаКеш Из ТабКеш Цикл
		СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКеш.Ссылка));
		Для Каждого СтрокаТаб Из СтрокиТовары Цикл
			Если СтрокаКеш.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
				СтрокаТаб.ПризнакЦенника = 1;
			ИначеЕсли СтрокаКеш.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук Тогда
				СтрокаТаб.ПризнакЦенника = 2;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьПризнакЦенника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМестуВыкладкиСертификаты(Команда)
	
	МестоВыкладки = ПредопределенноеЗначение("Справочник.МестаВыкладки.ПустаяСсылка");
	Если ВвестиЗначение(МестоВыкладки, "Выберите место выкладки") Тогда
		ЗаполнитьПоВыкладкеСертификаты(МестоВыкладки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьШрифт()
	
	Возврат Обработки.ПечатьЦенниковМагазин.ПолучитьМакет("ШрифтЦенников");
	
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	////установка спец шрифта
	//СистемнаяИнформация = Новый СистемнаяИнформация; 
	//ВерсияОС = СистемнаяИнформация.ВерсияОС;
	//ИмяФайла = "PTS55F.ttf";
	//WshShell     = Новый COMОбъект("WScript.Shell");
	//FSO          = Новый COMОбъект("Scripting.FileSystemObject");
	//ПутьШрифты     = wshShell.SpecialFolders.Item("Fonts");
	//Файл = Новый Файл(ПутьШрифты + "\" + ИмяФайла);
	//Если Не Файл.Существует() Тогда
	//	Макет = ПолучитьШрифт();
	//	objShell = Новый COMОбъект("Shell.Application");
	//	Каталог = КаталогВременныхФайлов();
	//	ПолноеИмяФайла = Каталог + ИмяФайла;
	//	Макет.Записать(ПолноеИмяФайла);
	//	objNameSpace = objShell.Namespace(Каталог);
	//	objFont      = objNameSpace.ParseName(ИмяФайла);
	//	objFont.InvokeVerb("Install");
	//	objFont = Неопределено;
	//	УдалитьФайлы(ПолноеИмяФайла);
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШрифт(Команда)
	
	//установка спец шрифта
	ИмяФайла = "PTS55F.ttf";
	WshShell     = Новый COMОбъект("WScript.Shell");
	FSO          = Новый COMОбъект("Scripting.FileSystemObject");
	ПутьШрифты     = wshShell.SpecialFolders.Item("Fonts");
	Файл = Новый Файл(ПутьШрифты + "\" + ИмяФайла);
	Если Не Файл.Существует() Тогда
		Макет = ПолучитьШрифт();
		objShell = Новый COMОбъект("Shell.Application");
		Каталог = КаталогВременныхФайлов();
		ПолноеИмяФайла = Каталог + ИмяФайла;
		Макет.Записать(ПолноеИмяФайла);
		objNameSpace = objShell.Namespace(Каталог);
		objFont      = objNameSpace.ParseName(ИмяФайла);
		objFont.InvokeVerb("Install");
		objFont = Неопределено;
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Товары1НоменклатураПриИзменении(Элемент)
	Элементы.Товары1.ТекущиеДанные.ДатаПоставки=ТекущаяДата();
	Элементы.Товары1.ТекущиеДанные.Характеристика= ПолучитьХарактеристику(Элементы.Товары1.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристику(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Ссылка,
		|	РасходныйОрдерСкладТовары.Ссылка.Дата КАК Дата,
		|	РасходныйОрдерСкладТовары.Характеристика
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
		|	И РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
		|	И РасходныйОрдерСкладТовары.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Дата1", ТекущаяДата()-30*24*60*60);
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Получатель", ПараметрыСеанса.ТорговаяТочкаПоАйпи);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Характеристика;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТоварыПротоколыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора    =    Новый Структура("ДополнительныеПараметры, ТекстПоиска", "ПодборДляМагазина", Текст);
    ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПротоколыНоменклатураПриИзменении(Элемент)
	
	Элементы.ТоварыПротоколы.ТекущиеДанные.Характеристика = ВнешниеДанные.ПолучитьХарактеристикуДляНоменклатуры(Элементы.ТоварыПротоколы.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМестуВыкладкиПротоколы(Команда)
	
	МестоВыкладки = ПредопределенноеЗначение("Справочник.МестаВыкладки.ПустаяСсылка");
	Если ВвестиЗначение(МестоВыкладки, "Выберите место выкладки") Тогда
		ЗаполнитьПоВыкладкеПротоколы(МестоВыкладки);
	КонецЕсли;
	
КонецПроцедуры

//+++АК CISA 2018.10.24 ИП-00020054
&НаКлиенте
Процедура ЗаполнитьПоПризнакуЦенника(Команда)
	ВыбПризнакЦенника = 0;
	СписокВариантовЦенника = Новый СписокЗначений;
	СписокВариантовЦенника.Добавить(0,"Обычный");
	СписокВариантовЦенника.Добавить(1,"Желтый");
	СписокВариантовЦенника.Добавить(2,"Оранжевый");
	СписокВариантовЦенника.Добавить(3,"Синий");
	ВыбПризнакЦенника = СписокВариантовЦенника.ВыбратьЭлемент("Выберите признак ценника");
	Если ВыбПризнакЦенника <> Неопределено Тогда
		ЗаполнитьПоОстаткам();
		ЗаполнитьПризнакЦенника();
		ОтобратьПоПризнакуЦенника(ВыбПризнакЦенника.Значение);
	КонецЕсли;
КонецПроцедуры

//+++АК CISA 2018.10.24 ИП-00020054
&НаСервере
Процедура ЗаполнитьПоОстаткам()
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT
	                  |	TD.id_tov
	                  |FROM
	                  |	SMS_Repl.dbo.TD_ost as TD (nolock)
	                  |WHERE
					  |TD.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(ПараметрыСеанса.ТорговаяТочкаПоАйпи.НомерТочки) + "
	                  |	and TD.Ost_kon > 0";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТабОстаток = Новый ТаблицаЗначений();
	ТабОстаток.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабОстаток.Добавить();
			СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ТабОстаток.Индексы.Добавить("id_tov");
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("РабочаяДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("ТорговаяТочка"	, ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос.УстановитьПараметр("ДатаТек"			, ТекущаяДата());
	//Запрос.УстановитьПараметр("МестоВыкладки"	, МестоВыкладки);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			&ДатаТек,
		|			ТорговаяТочка = &ТорговаяТочка
		|				ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочекСрезПоследних
		|ГДЕ
		|	ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
		|	И ТоварныйАссортиментТочекСрезПоследних.Номенклатура В
		|			(ВЫБРАТЬ
		|				ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			ИЗ
		|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаТек, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.Наименование";
	
	МассивТовары = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТабОстаток.Найти(Выборка.id_tov, "id_tov") = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаТаб = Объект.Товары.Добавить();
		СтрокаТаб.Пометка = Истина;
		СтрокаТаб.Номенклатура = Выборка.Номенклатура;
		МассивТовары.Добавить(СтрокаТаб.Номенклатура);
	КонецЦикла;
	
	СоотвествиеРезультат = ВнешниеДанные.ПолучитьХарактеристикуДляМассиваНоменклатуры(МассивТовары);
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Харка = СоотвествиеРезультат.Получить(СтрокаТаб.Номенклатура);
		Если ЗначениеЗаполнено(Харка) Тогда
			СтрокаТаб.Характеристика = Харка;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

//+++АК CISA 2018.10.24 ИП-00020054
&НаСервере
Процедура ОтобратьПоПризнакуЦенника(ВыбПризнакЦенника)
	ОтборПоПризнакуЦенника = Новый Структура("ПризнакЦенника", ВыбПризнакЦенника);
	Объект.Товары.Загрузить(Объект.Товары.Выгрузить(ОтборПоПризнакуЦенника));		
КонецПроцедуры
