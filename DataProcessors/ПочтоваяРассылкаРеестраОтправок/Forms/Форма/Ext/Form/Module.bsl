
&НаСервере
Функция ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("id_ТТ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("ОстатокНаТочке", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	ЗапросРеквизиты = Новый Запрос();
	ЗапросРеквизиты.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	ЗапросРеквизиты.УстановитьПараметр("Номенклатура", СписокНоменклатурыДляОтбора);
	
	ТабНоменклатура = ЗапросРеквизиты.Выполнить().Выгрузить();
	СтрокаОтборНоменклатура = "99999999";
	
	Если СписокНоменклатурыДляОтбора.Количество() > 0 Тогда
		Для Каждого ЭлементНоменклатура Из СписокНоменклатурыДляОтбора Цикл
			СтрокаСпр = ТабНоменклатура.Найти(ЭлементНоменклатура.Значение, "Ссылка");
			СтрокаОтборНоменклатура = СтрокаОтборНоменклатура + ", " + Формат(СтрокаСпр.id_tov, "ЧГ=0");
		КонецЦикла;	
	КонецЕсли;	
	
	СтрЗапрос = "exec M2..ostatki_tt_tov_currdate " + ?(СписокНоменклатурыДляОтбора.Количество() > 0, "'" + СтрокаОтборНоменклатура + "'", "null") + ", null, 0";
	
	//СтрЗапрос = "SELECT Ostatki.ID_tov, Ostatki.ID_TT, Ostatki.Amount
	//|FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//|INNER JOIN (SELECT Ostatki.ID_TT as id_tt,
	//|	  Ostatki.ID_tov,
	//|	  MAX(Ostatki.Period) as MaxPeriod
	//|  FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//|  GROUP BY
	//|  Ostatki.ID_TT,
	//|	  Ostatki.ID_tov) as MaxOstatki
	//|	  ON Ostatki.ID_tov = MaxOstatki.ID_tov
	//|	  and Ostatki.ID_TT = MaxOstatki.id_tt
	//|	  and Ostatki.Period = MaxOstatki.MaxPeriod
	//|WHERE Ostatki.Amount > 0
	//|	  " + ?(СписокНоменклатурыДляОтбора.Количество() > 0, " and Ostatki.ID_tov IN (" + СтрокаОтборНоменклатура + ")", "");
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.id_ТТ 		= Rs.Fields("ID_TT").Value;
			СтрокаДоб.id_tov 		= Rs.Fields("ID_tov").Value;
			СтрокаДоб.ОстатокНаТочке 		= Rs.Fields("kol").Value;   
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.id_ТТ,
	|	Таб.ID_tov,
	|	Таб.ОстатокНаТочке
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.ОстатокНаТочке,
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ТорговаяТочка КАК ТТ,
	|	ТоварныйАссортиментТочекСрезПоследних.Значение КАК Поставщик
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Данные.ОстатокНаТочке КАК ОстатокНаТочке,
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка
	|	ИЗ
	|		ВТ_Данные КАК ВТ_Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ПО ВТ_Данные.id_ТТ = СтруктурныеЕдиницы.id_TT
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВТ_Данные.ID_tov = Номенклатура.id_tov) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ГДЕ
	|			ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО ВЗ_Запрос.ТорговаяТочка = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	|			И ВЗ_Запрос.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ГДЕ
	|	(ТоварныйАссортиментТочекСрезПоследних.Значение В (&Поставщики)
	|			ИЛИ &ЕстьОтборПоПоставщикам = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Данные";
	
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.УстановитьПараметр("ЕстьОтборПоПоставщикам", СписокПоставщиковДляОтбора.Количество() > 0);
	Запрос.УстановитьПараметр("Поставщики", СписокПоставщиковДляОтбора);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЗаголовокПисьма) Тогда
		Сообщить("Не заполнена тема письма!");
		Возврат;
	КонецЕсли;	
	
	ПостроитьСписокАдресатовНаСервере();
	//Объект.СписокПолучателей.Очистить();
	//СписокЭлАдресов=Обработки.ПочтоваяРассылкаРеестраОтправок.ПостроитьСписокАдресатовНаСервере(Объект.ВидРассылки);
	//Для каждого Эл Из СписокЭлАдресов Цикл
	//	НовСтр=Объект.СписокПолучателей.Добавить();
	//	НовСтр.АдресТе	
	//
	//КонецЦикла; 
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправки");
	лкФорма.Объект.СписокПолучателей.Очистить();
	Для каждого ТекСтр Из Объект.СписокПолучателей Цикл
		
		НовСтрока = лкФорма.Объект.СписокПолучателей.Добавить();
		НовСтрока.АдресТелефон = ТекСтр.АдресТелефон;
		
	КонецЦикла;
	
	Если Объект.СписокПолучателей.Количество() > 0 Тогда
		
		лкТекСписок = лкФорма.ОткрытьМодально();
		Если лкТекСписок = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		ТекКол = лкТекСписок.Количество();
		
		Если лкТекСписок <> Неопределено И ТекКол > 0 Тогда 
			
			ВремСписок = Новый СписокЗначений;
			Тек_it = 0;
			
			Для каждого ТекСтрлкТекСписок Из лкТекСписок Цикл
				
				Если Тек_it < 34 Тогда
					
					ВремСписок.Добавить(ТекСтрлкТекСписок.Значение);
									
					Тек_it = Тек_it + 1;
					
				Иначе
					
					ВремСписок.Добавить(ТекСтрлкТекСписок.Значение);
					
					Тек_it = 0;
					
					СоздатьПисьмо(ВремСписок);
					
					ВремСписок.Очистить();
					
				КонецЕсли;				
				  
   			КонецЦикла;
			
			Если ВремСписок.Количество() <> 0 Тогда
				СоздатьПисьмо(ВремСписок);
			КонецЕсли;	
			
		КонецЕсли;
	Иначе
		Сообщить("Нет адресов для отправки!");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВ1С(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЗаголовокПисьма) Тогда
		Сообщить("Не заполнена тема письма!");
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	ПостроитьСписокАдресатовНаСервере_1С(ТекДата);
	
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправкиПоРолям");
	лкФорма.Объект.СписокТТ.Очистить();
	лкФорма.Объект.СписокРолей.Очистить();
	Для каждого ТекСтр Из Объект.СписокТТ Цикл
		
		НовСтрока = лкФорма.Объект.СписокТТ.Добавить();
		НовСтрока.ТорговаяТочка = ТекСтр.ТорговаяТочка;
		
	КонецЦикла;
	Для каждого ТекСтр Из Объект.СписокРолей Цикл
		
		НовСтрока = лкФорма.Объект.СписокРолей.Добавить();
		НовСтрока.Роль = ТекСтр.Роль;
		
	КонецЦикла;
	
	Если лкФорма.Объект.СписокТТ.Количество() > 0 ИЛИ лкФорма.Объект.СписокРолей.Количество() > 0 Тогда
		
		лкТекСтруктураВозврата = лкФорма.ОткрытьМодально();
		
		Если лкТекСтруктураВозврата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		лкСписокТТ = лкТекСтруктураВозврата.ТТ;
		лкСписокРолей = лкТекСтруктураВозврата.Роли;
		лкВсемСменам = лкТекСтруктураВозврата.ВсемСменам;
		лкСрокАктуальностиСообщения = лкТекСтруктураВозврата.СрокАктуальностиСообщения;
		
		ОтправитьВ1СНаСервере(лкСписокТТ, лкСписокРолей, лкВсемСменам, лкСрокАктуальностиСообщения, ТекДата);
				
	Иначе
		Сообщить("Нет адресатов для отправки!");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьСписокАдресатовНаСервере_1С(ТекДата)
	
	Объект.СписокТТ.Очистить();
	Объект.СписокРолей.Очистить();
	
	Если ПроверитьЗаполнение() Тогда
		
		// Формируем список ТТ для отбора
		СписоТТДляОтбора = Новый СписокЗначений;
		
		лкСписокНоменклатуры = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Номенклатура Цикл
			
			лкСписокНоменклатуры.Добавить(ТекСтр.Номенклатура);
			
		КонецЦикла;
		
		лкСписокПроизв = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Производители Цикл
			
			лкСписокПроизв.Добавить(ТекСтр.Контрагент);
			
		КонецЦикла;
		
		Если  Объект.МожетПрисутствоватьНаОстатках Тогда
			
			Если Объект.Производители.Количество() > 0 ИЛИ Объект.Номенклатура.Количество() > 0 Тогда
				
				СписоТТДляОтбора.Очистить();
				
				лкСписокХарактеристик = Новый СписокЗначений;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект КАК Характеристика
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Значение В(&СписокПоставщиков)
				|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияСвойствОбъектов.Объект";
				
				Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
				Запрос.УстановитьПараметр("СписокПоставщиков", лкСписокПроизв);
				
				ТЗ_РезультатХаракт = Запрос.Выполнить();
				
				ВыборкаДетЗаписи = ТЗ_РезультатХаракт.Выбрать();
				
				Пока ВыборкаДетЗаписи.Следующий() Цикл
					лкСписокХарактеристик.Добавить(ВыборкаДетЗаписи.Характеристика);
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
				|ИЗ
				|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
				|			&НаДату, Выведена = ЛОЖЬ " +    												 
				?(Объект.Номенклатура.Количество() > 0," И Номенклатура В (&СписокНоменклатуры) ", " ") +				
				?(лкСписокХарактеристик.Количество() > 0," И Характеристика В (&лкСписокХарактеристик)", " ") +				
				" ) КАК ТоварныйАссортиментТочекСрезПоследних
				|
				|СГРУППИРОВАТЬ ПО
				|ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка";
				
				Запрос.УстановитьПараметр("СписокНоменклатуры", лкСписокНоменклатуры);				
				Запрос.УстановитьПараметр("лкСписокХарактеристик", лкСписокХарактеристик);
				Запрос.УстановитьПараметр("НаДату", ТекДата);
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ТорговаяТочка) = Неопределено Тогда
						СписоТТДляОтбора.Добавить(ВыборкаДетальныеЗаписи.ТорговаяТочка);	
					КонецЕсли;	
					
				КонецЦикла;
				
				Если СписоТТДляОтбора.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПрисутствуетНаОстатках Тогда
			
			ТЗОстатков = ПостроитьТЗОстатков(лкСписокНоменклатуры, лкСписокПроизв);	
			
			Для каждого ТекстрТЗОст Из ТЗОстатков Цикл
				
				Если СписоТТДляОтбора.НайтиПоЗначению(ТекстрТЗОст.ТТ) = Неопределено Тогда
					
					СписоТТДляОтбора.Добавить(ТекстрТЗОст.ТТ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТЗОстатков.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;				
		
		СписокТТ = Новый СписокЗначений;
		СписокРолей = Новый СписокЗначений;
		
		ТЗ_ЦФО = Объект.ЦФО.Выгрузить();
		массЦФО = ТЗ_ЦФО.ВыгрузитьКолонку("ЦФО");
		СписокЦФО = Новый СписокЗначений; 
		СписокЦФО.ЗагрузитьЗначения(массЦФО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
		|			&текДата,
		|			ЦФО В (&СписокЦФО)
		|				И СтруктурнаяЕдиница.Активное = ИСТИНА) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки";
		
		Запрос.УстановитьПараметр("СписокЦФО", СписокЦФО);
		Запрос.УстановитьПараметр("текДата", ТекДата);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипРозничнойТочки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
				
				Если НЕ Объект.Магазины Тогда
					Продолжить;
				КонецЕсли;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
				
				Если НЕ Объект.Избенка Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе 	
				
				Если Объект.Избенка ИЛИ Объект.Магазины Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СписоТТДляОтбора.Количество() > 0 И СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТТ = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница; 
			Если ЗначениеЗаполнено(ТекТТ) Тогда
				НоваяСтр = Объект.СписокТТ.Добавить();					
				НоваяСтр.ТорговаяТочка = ТекТТ
			КонецЕсли;
			
		КонецЦикла;
		
		ВремТЗ = Объект.СписокТТ.Выгрузить();
		ВремТЗ.Свернуть("ТорговаяТочка");
		Объект.СписокТТ.Очистить();
		Объект.СписокТТ.Загрузить(ВремТЗ);				
		
		Если Объект.ПомошникиТерриториальныхУправляющих ИЛИ Объект.ТерриториальныеУправляющие Тогда
			
			лкСписокТТ = Новый СписокЗначений;
			Для каждого ТекСтрТТ Из Объект.СписокТТ Цикл
   
   	        	лкСписокТТ.Добавить(ТекСтрТТ.ТорговаяТочка);
   
   			КонецЦикла;			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|			&ТекДата,
			|			Объект В (&СписокТТ)
			//+++ AK suvv 2018.06.08 ИП-00018376.01
			//|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
			|				И (ТипРоли = &ТипРоли ИЛИ ТипРоли = &ТипРолиСторонняяРозница)) КАК СоответствиеОбъектРольСрезПоследних
			//--- AK suvv
			|
			|СГРУППИРОВАТЬ ПО
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя";
			
			Запрос.УстановитьПараметр("СписокТТ", лкСписокТТ);
			Запрос.УстановитьПараметр("ТекДата", ТекДата);
			Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
			//+++ AK suvv 2018.06.08 ИП-00018376.01
			Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
			//--- AK suvv
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РольПользователя) Тогда
					НовСтр = Объект.СписокРолей.Добавить();	
					НовСтр.Роль = ВыборкаДетальныеЗаписи.РольПользователя;
				КонецЕсли;				
			КонецЦикла;
			
			ВремТЗ = Объект.СписокРолей.Выгрузить();
			ВремТЗ.Свернуть("Роль");
			Объект.СписокРолей.Очистить();
			Объект.СписокРолей.Загрузить(ВремТЗ);
			
		КонецЕсли;
		
		Если Объект.ТерриториальныеУправляющие Тогда
			
			лкСписокРолейУправляющих = Новый СписокЗначений;
			Для каждого ТекСтрРолей Из Объект.СписокРолей Цикл
   
				Если ЗначениеЗаполнено(ТекСтрРолей.Роль.Родитель) Тогда
					лкСписокРолейУправляющих.Добавить(ТекСтрРолей.Роль.Родитель);
				КонецЕсли;	
   
			КонецЦикла;
			
			Если НЕ Объект.ПомошникиТерриториальныхУправляющих Тогда
				Объект.СписокРолей.Очистить();	
			КонецЕсли;	
			
			Для каждого ТекРоль Из лкСписокРолейУправляющих Цикл
   
   	        	НовСтр = Объект.СписокРолей.Добавить();	
				НовСтр.Роль = ТекРоль.Значение;
   
   			КонецЦикла;
			
			ВремТЗ = Объект.СписокРолей.Выгрузить();
			ВремТЗ.Свернуть("Роль");
			Объект.СписокРолей.Очистить();
			Объект.СписокРолей.Загрузить(ВремТЗ);
			
		КонецЕсли;		
		
		Если НЕ Объект.ТорговыеТочки Тогда
			Объект.СписокТТ.Очистить();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьВ1СНаСервере(лкСписокТТ, лкСписокРолей, лкВсемСменам, лкСрокАктуальностиСообщения, ТекДата)
	
	Если лкСписокТТ.Количество() > 0 Тогда
		
		ТЗДок = Новый ТаблицаЗначений;
		ТЗДок.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТЗДок.Колонки.Добавить("СтаршийСмены", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
		
		
		Для каждого ТекТТ Из лкСписокТТ Цикл
			
			НоваяСтр = ТЗДок.Добавить();
  	   		НоваяСтр.СтруктурнаяЕдиница = ТекТТ.Значение;
			НоваяСтр.СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ТекТТ, ТекДата);
  
  		КонецЦикла;
		
		СтруктураДляСозданияДок = Новый Структура;
		СтруктураДляСозданияДок.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
		СтруктураДляСозданияДок.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
		СтруктураДляСозданияДок.Вставить("Тема", Объект.ЗаголовокПисьма);
		СтруктураДляСозданияДок.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
		СтруктураДляСозданияДок.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
		СтруктураДляСозданияДок.Вставить("ВсемСменам", лкВсемСменам);
		СтруктураДляСозданияДок.Вставить("ТекстСообщения", Объект.ТекстПисьма);
		СтруктураДляСозданияДок.Вставить("СрокАктуальностиСообщения", лкСрокАктуальностиСообщения);
		//СтруктураДляСозданияДок.Вставить("СтруктурныеЕдиницы", ТЗДок);
		СтруктураДляСозданияДок.Вставить("СписокМагазинов", ТЗДок.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
		СтруктураДляСозданияДок.Вставить("Дата", ТекДата);
		
		ТекСсылкаДок = МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СтруктураДляСозданияДок, ИСТИНА);
		
		Если ТипЗнч(ТекСсылкаДок) = Тип("ДокументСсылка.СообщениеМОС") Тогда			  
			Сообщить("(ТТ) Записан документ "+ТекСсылкаДок);
		Иначе	
			Сообщить("(ТТ) Ошибка записи: "+ТекСсылкаДок);  
		КонецЕсли;
		
				
	КонецЕсли;	
	
	Если лкСписокРолей.Количество() > 0 Тогда
		
		ТекАвтор = ПараметрыСеанса.ТекущийПользователь;
		ТекОтправитель = Справочники.РолиПользователей.Администратор;
		ТекТема = Объект.ЗаголовокПисьма;
		ТекТекст = Объект.ТекстПисьма; 
				
		Для каждого ТекСтрРолей Из лкСписокРолей Цикл
  
			СтруктураДляСозданияДок = Новый Структура;
			СтруктураДляСозданияДок.Вставить("Автор", ТекАвтор);
			СтруктураДляСозданияДок.Вставить("Отправитель", ТекОтправитель);
			СтруктураДляСозданияДок.Вставить("Тема", ТекТема);
			СтруктураДляСозданияДок.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
			СтруктураДляСозданияДок.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.УказаннаяРоль);			
			СтруктураДляСозданияДок.Вставить("ТекстСообщения", ТекТекст);
			СтруктураДляСозданияДок.Вставить("СрокАктуальностиСообщения", лкСрокАктуальностиСообщения);
			СтруктураДляСозданияДок.Вставить("Дата", ТекДата);
			СтруктураДляСозданияДок.Вставить("РольПолучателя", ТекСтрРолей.Значение);
			
			
			ТекСсылкаДок = МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СтруктураДляСозданияДок, ИСТИНА);
			
			Если ТипЗнч(ТекСсылкаДок) = Тип("ДокументСсылка.СообщениеМОС") Тогда			  
				Сообщить("(Р) Записан документ "+ТекСсылкаДок);
			Иначе	
				Сообщить("(Р) Ошибка записи: "+ТекСсылкаДок);  
			КонецЕсли;
			
  
  		КонецЦикла;
		
				
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПостроитьСписокАдресатовНаСервере()
	
	Объект.СписокПолучателей.Очистить();
	Объект.СписокТелефонов.Очистить();
	
	НовСтрока = Объект.СписокТелефонов.Добавить();
	НовСтрока.АдресТелефон = "9257861067";
	
	Если ПроверитьЗаполнение() Тогда
		
		// Формируем список ТТ для отбора
		СписоТТДляОтбора = Новый СписокЗначений;
		
		лкСписокНоменклатуры = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Номенклатура Цикл
			
			лкСписокНоменклатуры.Добавить(ТекСтр.Номенклатура);
			
		КонецЦикла;
		
		лкСписокПроизв = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Производители Цикл
			
			лкСписокПроизв.Добавить(ТекСтр.Контрагент);
			
		КонецЦикла;
		
		Если  Объект.МожетПрисутствоватьНаОстатках Тогда
			
			Если Объект.Производители.Количество() > 0 ИЛИ Объект.Номенклатура.Количество() > 0 Тогда
				
				СписоТТДляОтбора.Очистить();
				
				лкСписокХарактеристик = Новый СписокЗначений;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект КАК Характеристика
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Значение В(&СписокПоставщиков)
				|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияСвойствОбъектов.Объект";
				
				Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
				Запрос.УстановитьПараметр("СписокПоставщиков", лкСписокПроизв);
				
				ТЗ_РезультатХаракт = Запрос.Выполнить();
				
				ВыборкаДетЗаписи = ТЗ_РезультатХаракт.Выбрать();
				
				Пока ВыборкаДетЗаписи.Следующий() Цикл
					лкСписокХарактеристик.Добавить(ВыборкаДетЗаписи.Характеристика);
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
				|ИЗ
				|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
				|			&НаДату, Выведена = ЛОЖЬ " +    												 
				?(Объект.Номенклатура.Количество() > 0," И Номенклатура В (&СписокНоменклатуры) ", " ") +				
				?(лкСписокХарактеристик.Количество() > 0," И Характеристика В (&лкСписокХарактеристик)", " ") +				
				" ) КАК ТоварныйАссортиментТочекСрезПоследних
				|
				|СГРУППИРОВАТЬ ПО
				|ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка";
				
				Запрос.УстановитьПараметр("СписокНоменклатуры", лкСписокНоменклатуры);				
				Запрос.УстановитьПараметр("лкСписокХарактеристик", лкСписокХарактеристик);
				Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ТорговаяТочка) = Неопределено Тогда
						СписоТТДляОтбора.Добавить(ВыборкаДетальныеЗаписи.ТорговаяТочка);	
					КонецЕсли;	
					
				КонецЦикла;
				
				Если СписоТТДляОтбора.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПрисутствуетНаОстатках Тогда
			
			ТЗОстатков = ПостроитьТЗОстатков(лкСписокНоменклатуры, лкСписокПроизв);	
			
			Для каждого ТекстрТЗОст Из ТЗОстатков Цикл
				
				Если СписоТТДляОтбора.НайтиПоЗначению(ТекстрТЗОст.ТТ) = Неопределено Тогда
					
					СписоТТДляОтбора.Добавить(ТекстрТЗОст.ТТ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТЗОстатков.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;				
		
		СписокАдресатов = Новый СписокЗначений;
		СписокТелефонов = Новый СписокЗначений;
		
		ТЗ_ЦФО = Объект.ЦФО.Выгрузить();
		массЦФО = ТЗ_ЦФО.ВыгрузитьКолонку("ЦФО");
		СписокЦФО = Новый СписокЗначений; 
		СписокЦФО.ЗагрузитьЗначения(массЦФО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.АдресЭлектроннойПочты КАК ТекАдрес,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТелефонныйНомер1 КАК ТелефонныйНомер1,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
		|			&текДата,
		|			ЦФО В (&СписокЦФО)
		|				И СтруктурнаяЕдиница.Активное = ИСТИНА) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.АдресЭлектроннойПочты,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТелефонныйНомер1,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки";
		
		Запрос.УстановитьПараметр("СписокЦФО", СписокЦФО);
		Запрос.УстановитьПараметр("текДата", ТекущаяДата());
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если Объект.ТорговыеТочки Тогда
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
					
					Если НЕ Объект.Магазины Тогда
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
					
					Если НЕ Объект.Избенка Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе 	
					
					Если Объект.Избенка ИЛИ Объект.Магазины Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СписоТТДляОтбора.Количество() > 0 И СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекАдрес = ВыборкаДетальныеЗаписи.ТекАдрес; 
				Если СокрЛП(ТекАдрес) <> "" И СписокАдресатов.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
					СписокАдресатов.Добавить(СокрЛП(ТекАдрес));					
				КонецЕсли;
				
				ТекТелефон = ВыборкаДетальныеЗаписи.ТелефонныйНомер1; 
								
				ТекТелефон = СтрЗаменить(ТекТелефон, " ", "");
				ТекТелефон = СтрЗаменить(ТекТелефон, "-", "");
				ТекТелефон = СтрЗаменить(ТекТелефон, "(", "");
				ТекТелефон = СтрЗаменить(ТекТелефон, ")", "");
				
				Если СтрДлина(ТекТелефон) >= 10 И СокрЛП(ТекТелефон) <> "" И СписокТелефонов.НайтиПоЗначению(ТекТелефон) = Неопределено Тогда
					
					СписокТелефонов.Добавить(Прав(СокрЛП(ТекТелефон), 10));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.ПомошникиТерриториальныхУправляющих Тогда
			
			ВыборкаДетальныеЗаписи.Сбросить();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
					
					Если НЕ Объект.Магазины Тогда
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
					
					Если НЕ Объект.Избенка Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе 	
					
					Если Объект.Избенка ИЛИ Объект.Магазины Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СписоТТДляОтбора.Количество() > 0 И СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекТТ = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;			
				
				ЗапросПомошники = Новый Запрос;
				ЗапросПомошники.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЖурналИзмененийПомощниковУправляющих.ФизическоеЛицо,
				|	ЖурналИзмененийПомощниковУправляющих.Дата
				|ПОМЕСТИТЬ ВремТЗ
				|ИЗ
				|	РегистрСведений.ЖурналИзмененийПомощниковУправляющих КАК ЖурналИзмененийПомощниковУправляющих
				|ГДЕ
				|	ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
				|
				|СГРУППИРОВАТЬ ПО
				|	ЖурналИзмененийПомощниковУправляющих.ФизическоеЛицо,
				|	ЖурналИзмененийПомощниковУправляющих.Дата
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЖурналИзмененийПомощниковУправляющих.Дата УБЫВ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КонтактнаяИнформация.Представление КАК ТекАдрес
				|ИЗ
				|	ВремТЗ КАК ВремТЗ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО ВремТЗ.ФизическоеЛицо = КонтактнаяИнформация.Объект
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И КонтактнаяИнформация.Вид = &Вид";
				
				ЗапросПомошники.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросПомошники.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
				ЗапросПомошники.УстановитьПараметр("СтруктурнаяЕдиница", ТекТТ);
				
				РезультатПомошники = ЗапросПомошники.Выполнить();
				
				ВыборкаДетальныеЗаписиПомошники = РезультатПомошники.Выбрать();
				
				ТекАдрес = "";
				Пока ВыборкаДетальныеЗаписиПомошники.Следующий() Цикл
					ТекАдрес = СокрЛП(ВыборкаДетальныеЗаписиПомошники.ТекАдрес);
				КонецЦикла; 
				
				Если СокрЛП(ТекАдрес) <> "" И СписокАдресатов.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
					
					СписокАдресатов.Добавить(СокрЛП(ТекАдрес));
					
				КонецЕсли;
				
				ЗапросПомошникиТел = Новый Запрос;
				ЗапросПомошникиТел.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЖурналИзмененийПомощниковУправляющих.ФизическоеЛицо,
				|	ЖурналИзмененийПомощниковУправляющих.Дата
				|ПОМЕСТИТЬ ВремТЗ
				|ИЗ
				|	РегистрСведений.ЖурналИзмененийПомощниковУправляющих КАК ЖурналИзмененийПомощниковУправляющих
				|ГДЕ
				|	ЖурналИзмененийПомощниковУправляющих.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
				|
				|СГРУППИРОВАТЬ ПО
				|	ЖурналИзмененийПомощниковУправляющих.ФизическоеЛицо,
				|	ЖурналИзмененийПомощниковУправляющих.Дата
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЖурналИзмененийПомощниковУправляющих.Дата УБЫВ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КонтактнаяИнформация.Представление КАК ТекТел
				|ИЗ
				|	ВремТЗ КАК ВремТЗ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО ВремТЗ.ФизическоеЛицо = КонтактнаяИнформация.Объект
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И КонтактнаяИнформация.Вид = &Вид";
				
				ЗапросПомошникиТел.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
				ЗапросПомошникиТел.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
				ЗапросПомошникиТел.УстановитьПараметр("СтруктурнаяЕдиница", ТекТТ);
				
				РезультатПомошникиТел = ЗапросПомошникиТел.Выполнить();
				
				ВыборкаДетальныеЗаписиПомошникиТел = РезультатПомошникиТел.Выбрать();
				
				ТекТел = "";
				Пока ВыборкаДетальныеЗаписиПомошникиТел.Следующий() Цикл
					ТекТел = СокрЛП(ВыборкаДетальныеЗаписиПомошникиТел.ТекТел);
				КонецЦикла;
				
				ТекТел = СтрЗаменить(ТекТел, " ", "");
				ТекТел = СтрЗаменить(ТекТел, "-", "");
				ТекТел = СтрЗаменить(ТекТел, "(", "");
				ТекТел = СтрЗаменить(ТекТел, ")", "");
				
				Если СтрДлина(ТекТел) = 11 И СокрЛП(ТекТел) <> "" И СписокТелефонов.НайтиПоЗначению(ТекТел) = Неопределено Тогда
					
					СписокТелефонов.Добавить(Прав(СокрЛП(ТекТел), 10));
					
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.ТерриториальныеУправляющие Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо КАК Сотрудник
			|ПОМЕСТИТЬ ВремТЗ
			|ИЗ
			|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(
			|			&текДата,
			|			РуководительОтдела = ИСТИНА
			|				И ЦФО В (&СписокЦФО)) КАК ПользователиПоЦФОСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК ТекАдрес
			|ИЗ
			|	ВремТЗ КАК ВремТЗ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО ВремТЗ.Сотрудник = КонтактнаяИнформация.Объект
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Вид = &Вид";
			
			Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
			Запрос.УстановитьПараметр("СписокЦФО", СписокЦФО);
			Запрос.УстановитьПараметр("текДата", ТекущаяДата());
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТекАдрес = "";
				
				ТекАдрес = СокрЛП(ВыборкаДетальныеЗаписи.ТекАдрес);
				
				Если СокрЛП(ТекАдрес) <> "" И СписокАдресатов.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
					СписокАдресатов.Добавить(СокрЛП(ТекАдрес));
				КонецЕсли;
				
			КонецЦикла;			
			
			ЗапросТел = Новый Запрос;
			ЗапросТел.Текст = 
			"ВЫБРАТЬ
			|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо КАК Сотрудник
			|ПОМЕСТИТЬ ВремТЗ
			|ИЗ
			|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(
			|			&текДата,
			|			РуководительОтдела = ИСТИНА
			|				И ЦФО В (&СписокЦФО)) КАК ПользователиПоЦФОСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК ТекТел
			|ИЗ
			|	ВремТЗ КАК ВремТЗ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО ВремТЗ.Сотрудник = КонтактнаяИнформация.Объект
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Вид = &Вид";
			
			ЗапросТел.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
			ЗапросТел.УстановитьПараметр("СписокЦФО", СписокЦФО);
			ЗапросТел.УстановитьПараметр("текДата", ТекущаяДата());
			ЗапросТел.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			
			РезультатТел = ЗапросТел.Выполнить();
			
			ВыборкаДетальныеЗаписиПомошникиТел = РезультатТел.Выбрать();
			
			ТекТел = "";
			Пока ВыборкаДетальныеЗаписиПомошникиТел.Следующий() Цикл
				ТекТел = СокрЛП(ВыборкаДетальныеЗаписиПомошникиТел.ТекТел);
				ТекТел = СтрЗаменить(ТекТел, " ", "");
				ТекТел = СтрЗаменить(ТекТел, "-", "");
				ТекТел = СтрЗаменить(ТекТел, "(", "");
				ТекТел = СтрЗаменить(ТекТел, ")", "");
				
				Если СтрДлина(ТекТел) = 11 И СокрЛП(ТекТел) <> "" И СписокТелефонов.НайтиПоЗначению(ТекТел) = Неопределено Тогда
					
					СписокТелефонов.Добавить(Прав(СокрЛП(ТекТел), 10));
					
				КонецЕсли;			
				
			КонецЦикла;
						
		КонецЕсли;		
				
		Если Объект.УЕК Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	АК_ГруппыРассылки.Емейл КАК ТекАдрес
			|ИЗ
			|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
			|ГДЕ
			|	АК_ГруппыРассылки.Группа = &Группа
			|	И АК_ГруппыРассылки.Емейл <> """"
			|
			|СГРУППИРОВАТЬ ПО
			|	АК_ГруппыРассылки.Емейл";
			
			Запрос.УстановитьПараметр("Группа", Справочники.АК_ГруппыРассылки.УЕК);
						
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТекАдрес = "";
				
				ТекАдрес = СокрЛП(ВыборкаДетальныеЗаписи.ТекАдрес);
				
				Если СокрЛП(ТекАдрес) <> "" И СписокАдресатов.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
					СписокАдресатов.Добавить(СокрЛП(ТекАдрес));
				КонецЕсли;
				
			КонецЦикла;			
			
			ЗапросТел = Новый Запрос;
			ЗапросТел.Текст = 
			"ВЫБРАТЬ
			|	АК_ГруппыРассылки.Телефон КАК ТекТел
			|ИЗ
			|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
			|ГДЕ
			|	АК_ГруппыРассылки.Группа = &Группа
			|	И АК_ГруппыРассылки.Телефон <> """"
			|
			|СГРУППИРОВАТЬ ПО
			|	АК_ГруппыРассылки.Телефон";
			
			ЗапросТел.УстановитьПараметр("Группа", Справочники.АК_ГруппыРассылки.УЕК);
			
			РезультатТел = ЗапросТел.Выполнить();
			
			ВыборкаТел = РезультатТел.Выбрать();
			
			ТекТел = "";
			Пока ВыборкаТел.Следующий() Цикл
				
				ТекТел = СокрЛП(ВыборкаТел.ТекТел);
				ТекТел = СтрЗаменить(ТекТел, " ", "");
				ТекТел = СтрЗаменить(ТекТел, "-", "");
				ТекТел = СтрЗаменить(ТекТел, "(", "");
				ТекТел = СтрЗаменить(ТекТел, ")", "");
				
				Если СтрДлина(ТекТел) = 11 И СокрЛП(ТекТел) <> "" И СписокТелефонов.НайтиПоЗначению(ТекТел) = Неопределено Тогда
					
					СписокТелефонов.Добавить(Прав(СокрЛП(ТекТел), 10));
					
				КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;		
				
		Для каждого ТекСтр Из Объект.ДопАдресаты Цикл
			
			СписокАдресатов.Добавить(СокрЛП(ТекСтр.Адрес));
						
		КонецЦикла;
				
		Для каждого ТекСтрСп Из СписокАдресатов Цикл
            
  	    	новСтр = Объект.СписокПолучателей.Добавить();
			новСтр.АдресТелефон = ТекСтрСп.Значение;
  
		КонецЦикла;
		
		Для каждого ТекСтрСп Из СписокТелефонов Цикл
            
  	    	новСтр = Объект.СписокТелефонов.Добавить();
			новСтр.АдресТелефон = ТекСтрСп.Значение;
			
  		КонецЦикла;
		
		ВремТЗ = Объект.СписокТелефонов.Выгрузить();
		ВремТЗ.Свернуть("АдресТелефон");
		Объект.СписокТелефонов.Загрузить(ВремТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПисьмо(СписокАдресатов)
	
	// создаём письмо  ///////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресПользователя
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КонтактнаяИнформация.Объект = Пользователи.ФизЛицо
	|ГДЕ
	|	Пользователи.Ссылка = &ТекПользователь
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ТекАдресПользователя = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекАдресПользователя = СокрЛП(ВыборкаДетальныеЗаписи.АдресПользователя);
	КонецЦикла;
	
	Адрес = "";
	
	Для каждого ТекСтрСписка Из СписокАдресатов Цикл
		
		Если Адрес = "" Тогда
			Адрес = ТекСтрСписка.Значение;	
		Иначе
			Адрес = Адрес + ", " + ТекСтрСписка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	//Отправитель = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001"); 
	Отправитель = Объект.АдресОтправителя;
	
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.НеВыдаватьСообщенияПриЗаписиОбъекта = Истина;
	Письмо.Кому = Адрес;
	Письмо.ЗаголовокПисьма = Объект.ЗаголовокПисьма;
	Письмо.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Письмо.УчетнаяЗапись = Отправитель;
	Письмо.ОтправительАдресЭлектроннойПочты = Отправитель.АдресЭлектроннойПочты;
	Письмо.Дата = ТекущаяДата();
	Письмо.ТекстПисьма = Объект.ТекстПисьма;
	Письмо.Тема = Объект.ЗаголовокПисьма;
	Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	Письмо.КодировкаПисьма = "utf-8";
	
	Если ЗначениеЗаполнено(ТекАдресПользователя) Тогда
		Письмо.АК_ОбратныйАдрес = ТекАдресПользователя; 
	КонецЕсли;
	
	Для каждого ТекСтрСписка Из СписокАдресатов Цикл
		
		НоваяСтр = Письмо.КомуТЧ.Добавить();
		НоваяСтр.АдресЭлектроннойПочты = ТекСтрСписка.Значение;
		
	КонецЦикла;		
	
	ОтправитьПисьмо(Письмо);	
	
КонецПроцедуры

&НаСервере
// Процедура инициирует отправку письма.
//
Процедура ОтправитьПисьмо(ТекПисьмо)
	
	ШапкаСообщения = "Не отправлено: " + Строка(ТекПисьмо);
	
	Если ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекПисьмо.Кому) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан ни один получатель.",, ШапкаСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекПисьмо.ПометкаУдаления Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя отправлять помеченное на удаление письмо.",, ШапкаСообщения);
		Возврат;
	КонецЕсли;
	
	ТекПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
	Если НЕ ЗначениеЗаполнено(ТекПисьмо.Ответственный) Тогда
		ТекПисьмо.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли; 
	
	Попытка
		ТекПисьмо.Записать();
		Сообщить("Записан новый документ: "+ТекПисьмо.Ссылка);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
		Возврат;
	КонецПопытки;
	
	Для каждого СтрокаТаблицы Из Объект.ВложенныеФайлы Цикл
		
		НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
		НовыйОбъект.Объект                 = ТекПисьмо.Ссылка;
		НовыйОбъект.ИмяФайла               = СтрокаТаблицы.ИмяФайла;
		НовыйОбъект.Наименование = ТекПисьмо.Ссылка;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.СсылкаНаФайл);
		НовыйОбъект.Хранилище              = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
		Попытка
			НовыйОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, Строка(Объект));
			Отказ = Истина;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(ТекПисьмо.УчетнаяЗапись);
	Письма = Новый Соответствие;
	Письма.Вставить(ТекПисьмо.Ссылка, ТекПисьмо);
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	Сообщить("Список получателей: "+ТекПисьмо.Кому);
	Сообщить("Отправка завершена.");
	
КонецПроцедуры


&НаКлиенте
Процедура ВсеЦФО(Команда)
	
	ВсеЦФОНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВсеЦФОНаСервере()
	
	Объект.ЦФО.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|			&ТекДата,
	|			ЦФО.ПометкаУдаления = ЛОЖЬ
	|				И СтруктурнаяЕдиница.ПометкаУдаления = ЛОЖЬ
	|				И СтруктурнаяЕдиница.Активное = ИСТИНА) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	лкВыборка = Запрос.Выполнить().Выбрать();
	Пока лкВыборка.Следующий() Цикл
		
		//Если лкВыборка.ЦФО.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") И Объект.Избенка Тогда
			НоваяСтр = Объект.ЦФО.Добавить();	
			НоваяСтр.ЦФО = лкВыборка.ЦФО;
		//КонецЕсли;	
		
		//Если лкВыборка.ЦФО.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") И Объект.Магазины Тогда
		//	НоваяСтр = Объект.ЦФО.Добавить();	
		//	НоваяСтр.ЦФО = лкВыборка.ЦФО;
		//КонецЕсли;
		
	КонецЦикла;
	
	//Объект.ЦФО.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Перем ВыбранноеИмя,АдресВременногоХранилища;
	
	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		
		НоваяСтрокаТЗ = Объект.ВложенныеФайлы.Добавить();
		
		НоваяСтрокаТЗ.СсылкаНаФайл = АдресВременногоХранилища;
		НоваяСтрокаТЗ.ИмяФайла = ВыбранноеИмя;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлВложения(Команда)
	
	Если Элементы.ВложенныеФайлы.ТекущаяСтрока <> Неопределено Тогда
		Объект.ВложенныеФайлы.Удалить(Объект.ВложенныеФайлы[Элементы.ВложенныеФайлы.ТекущиеДанные.НомерСтроки - 1]);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Объект.АдресОтправителя = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	//НоваяСтр = Объект.ДопАдресаты.Добавить();
	//НоваяСтр.Адрес = "train@izbenka.msk.ru";
	//ВсеЦФОНаСервере();
	//
	Если Параметры.Свойство("Правило") Тогда
    	Объект.ВидРассылки=Параметры.Правило;
	КонецЕсли;
	ДнейАктуальностиНовинок=Константы.ДнейАктуальностиНовинок.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	
	ПостроитьСписокАдресатовНаСервере();
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправки");
	лкФорма.Объект.СписокПолучателей.Очистить();
	
	Для каждого ТекСтр Из Объект.СписокТелефонов Цикл
		
		НовСтрока = лкФорма.Объект.СписокПолучателей.Добавить();
		НовСтрока.АдресТелефон = ТекСтр.АдресТелефон;
		
	КонецЦикла;
	
	Если лкФорма.Объект.СписокПолучателей.Количество() > 0 Тогда
		
		лкТекСписок = лкФорма.ОткрытьМодально();
		
		Если лкТекСписок <> Неопределено И лкТекСписок.Количество() > 0 Тогда 
			
			ОтправитьСМСНаСервере(лкТекСписок);
			
		КонецЕсли;
	Иначе 	
		Сообщить("Нет номеров для отправки!");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьСМСНаСервере(ТекСписекТел)

	Для каждого ТекСтрСписка Из ТекСписекТел Цикл
		
		Телефон = ТекСтрСписка.Значение;
		СообщениеSMS = СокрЛП(Объект.ТекстПисьма);
		
		Если СтрДлина(Формат(Телефон,"ЧГ=0")) <> 10 Тогда
			Сообщить("Проверьте ещё раз формат номера телефона: "+Телефон);	
		Иначе	
			//ТекстЗапроса = "insert into [SMSGate].[dbo].[Incoming]
			//|      ([Date]
			//|      ,[nomer]
			//|      ,[text]
			//|      ,[Time]
			//|      ,[source])
			//|select convert(datetime,CONVERT(date,getdate())) , 
			//|/**BPar1**/'~~~~~'/**FPar**/ ,
			//|/**BPar2**/'^^^^^'/**FPar**/ ,
			//|CONVERT(time(7),getdate())  , 10 ;";
			
			ТекстЗапроса = "/****** Сценарий для команды SelectTopNRows среды SSMS  ******/
			|insert into [IES].[dbo].[Outgoing]
			|    ([Number]
			|    ,[Message]
			|    ,[AddDate]
			|    ,[DiscountCardUID]
			|    ,[type_BV]
			|    ,[Project]
			|    ,[user_add])
			|VALUES 
			|	 ('7' +left('"+Формат(Телефон,"ЧГ=0")+"',10), '"+СообщениеSMS+"','"+ТекущаяДата()+"',"+" NULL "+", '"+9+"', '"+"РассылкаТТ"+"', '"+СокрЛП(ПараметрыСеанса.ТекущийПользователь)+"') ;";
		
			
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Формат(Телефон,"ЧГ=0"));
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^",СообщениеSMS);
			
			//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=SMSGate;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
			//База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, , СтрокаПодключения);
			
			ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
			
			Если ADOСоединение = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ADOСоединение.Execute(ТекстЗапроса);	
			ADOСоединение.Close();
			
			Сообщить("Отправили СМС на номер +7"+Телефон);
			
		КонецЕсли;
 
 КонецЦикла;
	
	

КонецПроцедуры // ОтправитьСМСНаСервере()

&НаКлиенте
Процедура ТекстПисьмаПриИзменении(Элемент)
	РасчитатьКоличествоСМС();
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКоличествоСМС(исхТекст = Неопределено)
	
	Если исхТекст = Неопределено Тогда
		КоличествоСимволов = СтрДлина(Объект.ТекстПисьма);
	Иначе	
		КоличествоСимволов = СтрДлина(исхТекст);
	КонецЕсли;
	
	КолСМС = 0;
	КолМожно = 70;
	
	Если КоличествоСимволов <= 70 И КоличествоСимволов > 0 Тогда
		
		КолСМС = 1;
		КолМожно = 70;
		
	ИначеЕсли КоличествоСимволов > 70 тогда
		       
		КолСМС = Цел((КоличествоСимволов - 71) / 64) + 2;
		КолМожно = 70 + (КолСМС-1)*64;
		
	КонецЕсли;	
	
	Объект.КоличествоСимволов = "Количество СМС - "+КолСМС+"   (Использовано символов "+КоличествоСимволов+" из "+КолМожно+" возможных)";
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//РасчитатьКоличествоСМС();
	ВидРассылкиПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчитатьКоличествоСМС(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиУЕКНажатие(Элемент)
	
	П = Новый Структура("лкОтбор", "УЕК");
	Форма = ПолучитьФорму("РегистрСведений.АК_ГруппыРассылки.Форма.ФормаСпискаУправляемая", П);
	Форма.Открыть()
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРассылкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидРассылки) Тогда
		ЗаписатьНастройки();
		ЗаполнитьФорму();
		Элементы.ГруппаСФайлами.Доступность=Истина;
	Иначе
	    Объект.ЦФО.Очистить();
		Объект.ТорговыеТочки=Ложь;
		Объект.ТерриториальныеУправляющие=Ложь;
		Объект.ПомошникиТерриториальныхУправляющих=Ложь;
		Объект.УЕК=Ложь;
		Объект.Избенка=Ложь;
		Объект.Магазины=Ложь;
		Элементы.ГруппаСФайлами.Доступность=Ложь;
	КонецЕсли;
	ТекВидРассылки=Объект.ВидРассылки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорму()
	Объект.ЦФО.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРассылкиРеестраОтправок.ВидРассылки,
		|	НастройкиРассылкиРеестраОтправок.ТорговыеТочки,
		|	НастройкиРассылкиРеестраОтправок.ТерриториальныеУправляющие,
		|	НастройкиРассылкиРеестраОтправок.ПомошникиТерриториальныхУправляющих,
		|	НастройкиРассылкиРеестраОтправок.УЕК,
		|	НастройкиРассылкиРеестраОтправок.Избенка,
		|	НастройкиРассылкиРеестраОтправок.Магазины
		|ИЗ
		|	РегистрСведений.НастройкиРассылкиРеестраОтправок КАК НастройкиРассылкиРеестраОтправок
		|ГДЕ
		|	НастройкиРассылкиРеестраОтправок.ВидРассылки = &ВидРассылки";

	Запрос.УстановитьПараметр("ВидРассылки", Объект.ВидРассылки);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаДетальныеЗаписи);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРассылкиРеестраОтправокЦФО.ВидРассылки,
		|	НастройкиРассылкиРеестраОтправокЦФО.ЦФО
		|ИЗ
		|	РегистрСведений.НастройкиРассылкиРеестраОтправокЦФО КАК НастройкиРассылкиРеестраОтправокЦФО
		|ГДЕ
		|	НастройкиРассылкиРеестраОтправокЦФО.ВидРассылки = &ВидРассылки";

	Запрос.УстановитьПараметр("ВидРассылки", Объект.ВидРассылки);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтр=Объект.ЦФО.Добавить();
		НовСтр.ЦФО=ВыборкаДетальныеЗаписи.ЦФО;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ЗаписатьНастройки();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	Если ЗначениеЗаполнено(ТекВидРассылки) Тогда
		Мен=РегистрыСведений.НастройкиРассылкиРеестраОтправок.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Мен,Объект);
		Мен.ВидРассылки=ТекВидРассылки;
		Мен.Записать(Истина);
		НЗ=РегистрыСведений.НастройкиРассылкиРеестраОтправокЦФО.СоздатьНаборЗаписей();
		НЗ.Отбор.Видрассылки.Установить(ТекВидРассылки);
		НЗ.Прочитать();
		Нз.Очистить();
		НЗ.Записать();
		Для каждого Стр Из Объект.ЦФО Цикл
			Зап=Нз.Добавить();
			Зап.Видрассылки=ТекВидрассылки;
			Зап.ЦФО=Стр.ЦФО;
		КонецЦикла; 
	    НЗ.Записать(Истина);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДнейАктуальностиНовинокПриИзменении(Элемент)
	ДнейАктуальностиНовинокПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ДнейАктуальностиНовинокПриИзмененииСервер()
	Константы.ДнейАктуальностиНовинок.Установить(ДнейАктуальностиНовинок);
КонецПроцедуры
 
