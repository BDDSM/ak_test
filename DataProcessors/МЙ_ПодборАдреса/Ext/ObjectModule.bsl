
//
Перем Прокси;
Перем ФабрикаXD;

Перем ПроксиEnterprise;

//
//
Функция ПолучитьСписокРегионов(СтранаGUID = Неопределено) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПризнакЭтоРегион");
	Результат.Колонки.Добавить("ПризнакЭтоРайон");
	Результат.Колонки.Добавить("ПризнакЭтоГород");
	Результат.Колонки.Добавить("ПризнакЭтоУлица");
	
	//
	Если НЕ ЗначениеЗаполнено(СтранаGUID) Тогда
		СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b";
	КонецЕсли;	
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1500;
	
	//
	Список = Прокси.GetRegionListByCountry(ListOptions, "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b");
	Для Каждого xdОбъект Из Список.region Цикл
		
		//
		Если xdОбъект = Список.region[0] Тогда
			
			//
			Для Каждого Свойство Из xdОбъект.Свойства() Цикл
				Результат.Колонки.Добавить(Свойство.Имя);
			КонецЦикла;	
			
		КонецЕсли;	
		
		//
		
		//++ АК luza 27.05.2018 
		//изменил выбор регионов, было:
		//Если xdОбъект.GUID <> "0c5b2444-70a0-4932-980c-b4dc0d3f02b5"
		//	И xdОбъект.GUID <> "29251dcf-00a1-4e34-98d4-5c47484a36d4" Тогда
		//	
		//	//
		//	Продолжить;
		//	
		//КонецЕсли;	
		
		//стало:
		
		СтрРегион = ЭтотОбъект.ТаблицаВсехРегионов.Найти(xdОбъект.GUID, "GUID");
		Если СтрРегион = Неопределено Тогда
			Продолжить;
		ИначеЕсли СтрРегион.Использовать = Ложь Тогда
			Продолжить;
		КонецЕсли;	
		
		//-- АК luza 27.05.2018 
		
		//
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
		
		//
		НоваяСтрока.ПризнакЭтоРегион = Истина;
		НоваяСтрока.ПризнакЭтоРайон = Ложь;
		НоваяСтрока.ПризнакЭтоГород = Ложь;
		НоваяСтрока.ПризнакЭтоУлица = Ложь;
		
	КонецЦикла;	
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСписокРайоновИГородовПоРегиону(GUID) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПризнакЭтоРегион");
	Результат.Колонки.Добавить("ПризнакЭтоРайон");
	Результат.Колонки.Добавить("ПризнакЭтоГород");
	Результат.Колонки.Добавить("ПризнакЭтоУлица");
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1500;
	
	//
	Список = Прокси.GetLocalityListByRegion(ListOptions, GUID);
	Для Каждого xdОбъект Из Список.locality Цикл
		
		//
		Если xdОбъект = Список.locality[0] Тогда
			
			//
			Для Каждого Свойство Из xdОбъект.Свойства() Цикл
				
				//
				Попытка
					Результат.Колонки.Добавить(Свойство.Имя);
				Исключение
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
		
		//
		НоваяСтрока.ПризнакЭтоРегион = Ложь;
		НоваяСтрока.ПризнакЭтоРайон = Ложь;
		НоваяСтрока.ПризнакЭтоГород = Истина;
		НоваяСтрока.ПризнакЭтоУлица = Ложь;
		
	КонецЦикла;
	
	//
	Список = Прокси.GetDistrictListByRegion(ListOptions, GUID);
	Для Каждого xdОбъект Из Список.district Цикл
		
		//
		Если xdОбъект = Список.district[0] Тогда
			
			//
			Для Каждого Свойство Из xdОбъект.Свойства() Цикл
				
				//
				Попытка
					Результат.Колонки.Добавить(Свойство.Имя);
				Исключение
				КонецПопытки;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
		
		//
		НоваяСтрока.ПризнакЭтоРегион = Ложь;
		НоваяСтрока.ПризнакЭтоРайон = Истина;
		НоваяСтрока.ПризнакЭтоГород = Ложь;
		НоваяСтрока.ПризнакЭтоУлица = Ложь;
		
	КонецЦикла;
	
	//
	Результат.Сортировать("name");
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСписокРайоновИГородовПоРайону(GUID) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПризнакЭтоРегион");
	Результат.Колонки.Добавить("ПризнакЭтоРайон");
	Результат.Колонки.Добавить("ПризнакЭтоГород");
	Результат.Колонки.Добавить("ПризнакЭтоУлица");
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1500;
	
	//
	Список = Прокси.GetLocalityListByDistrict(ListOptions, GUID);
	Для Каждого xdОбъект Из Список.locality Цикл
		
		//
		Если xdОбъект = Список.locality[0] Тогда
			
			//
			Для Каждого Свойство Из xdОбъект.Свойства() Цикл
				
				//
				Попытка
					Результат.Колонки.Добавить(Свойство.Имя);
				Исключение
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
		
		//
		НоваяСтрока.ПризнакЭтоРегион = Ложь;
		НоваяСтрока.ПризнакЭтоРайон = Ложь;
		НоваяСтрока.ПризнакЭтоГород = Истина;
		НоваяСтрока.ПризнакЭтоУлица = Ложь;
		
	КонецЦикла;
	
	//
	//++ АК luza 27.05.2018  ИП-00018756
	//было 
	//Результат.Сортировать("name");
	
	//Добавил проверку
	Если Результат.Колонки.Найти("name") <> Неопределено Тогда
		Результат.Сортировать("name");
	Конецесли;	
	//-- АК luza 27.05.2018  ИП-00018756
	//
	Возврат Результат;
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСписокРайоновИГородовПоГороду(GUID) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПризнакЭтоРегион");
	Результат.Колонки.Добавить("ПризнакЭтоРайон");
	Результат.Колонки.Добавить("ПризнакЭтоГород");
	Результат.Колонки.Добавить("ПризнакЭтоУлица");
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1500;
	
	//
	Список = Прокси.GetLocalityListByLocality(ListOptions, GUID);
	Для Каждого xdОбъект Из Список.locality Цикл
		
		//
		Если xdОбъект = Список.locality[0] Тогда
			
			//
			Для Каждого Свойство Из xdОбъект.Свойства() Цикл
				
				//
				Попытка
					Результат.Колонки.Добавить(Свойство.Имя);
				Исключение
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
		
		//
		НоваяСтрока.ПризнакЭтоРегион = Ложь;
		НоваяСтрока.ПризнакЭтоРайон = Ложь;
		НоваяСтрока.ПризнакЭтоГород = Истина;
		НоваяСтрока.ПризнакЭтоУлица = Ложь;
		
	КонецЦикла;
	
	//   
	//++ АК luza 27.05.2018  ИП-00018756
	//было 
	//Результат.Сортировать("name");
	
	//Добавил проверку
	Если Результат.Колонки.Найти("name") <> Неопределено Тогда
		Результат.Сортировать("name");
	Конецесли;	
	//-- АК luza 27.05.2018  ИП-00018756
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСписокУлиц(GUID) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПризнакЭтоРегион");
	Результат.Колонки.Добавить("ПризнакЭтоРайон");
	Результат.Колонки.Добавить("ПризнакЭтоГород");
	Результат.Колонки.Добавить("ПризнакЭтоУлица");
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	//
	Пока Истина Цикл
		
		//
		Список = Прокси.GetStreetListByLocality(ListOptions, GUID);
		Для Каждого xdОбъект Из Список.street Цикл
			
			//
			Если xdОбъект = Список.street[0] Тогда
				
				//
				Для Каждого Свойство Из xdОбъект.Свойства() Цикл
					
					//
					Если Свойство.Имя = "name" Тогда
						
						//
						Попытка
							Результат.Колонки.Добавить(Свойство.Имя, Новый ОписаниеТипов("Строка"));
						Исключение
						КонецПопытки;
						
					Иначе
					
						//
						Попытка
							Результат.Колонки.Добавить(Свойство.Имя);
						Исключение
						КонецПопытки;
						
					КонецЕсли;	
					
				КонецЦикла;	
				
			КонецЕсли;	
			
			//
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, xdОбъект); 
			
			//
			НоваяСтрока.ПризнакЭтоРегион = Ложь;
			НоваяСтрока.ПризнакЭтоРайон = Ложь;
			НоваяСтрока.ПризнакЭтоГород = Ложь;
			НоваяСтрока.ПризнакЭтоУлица = Истина;
			
		КонецЦикла;
		
		//
		Если Список.offset + Список.count >= Список.total Тогда 
			Прервать;
		КонецЕсли;	
		
		//
		ListOptions.offset = ListOptions.offset + ListOptions.count;
		
	КонецЦикла;	
	
	//
	//++ АК luza 27.05.2018  ИП-00018756
	//было 
	//Результат.Сортировать("name");
	
	//Добавил проверку
	Если Результат.Колонки.Найти("name") <> Неопределено Тогда
		Результат.Сортировать("name");
	Конецесли;	
	//-- АК luza 27.05.2018  ИП-00018756
	//

	
	//
	Возврат Результат;
	
КонецФункции	


Функция ПолучитьСтруктуруАдресаСтруктурнойЕдиницы(СтруктурнаяЕдиница, ФабрикаXD)
	
	//
	Результат = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.СтруктурнаяЕдиница,
	     |	Таблица.GUID,
	     |	Таблица.UUID,
	     |	Таблица.РегионGUID,
	     |	Таблица.РегионUUID,
	     |	Таблица.РайонGUID,
	     |	Таблица.РайонUUID,
	     |	Таблица.ГородGUID,
	     |	Таблица.ГородUUID,
	     |	Таблица.УлицаGUID,
	     |	Таблица.УлицаUUID,
	     |	Таблица.Дом,
	     |	Таблица.Корпус,
	     |	Таблица.Строение,
	     |	Таблица.АдресПредставление
	     |ИЗ
	     |	РегистрСведений.МЙ_ПоднадзорныеОбъекты КАК Таблица
	     |ГДЕ
	     |	Таблица.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
//	     |	И Таблица.GUID = """"";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	//
	ПЗ.Выполнить();
	Если ПЗ.Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	
		//РФ
		xdCountry = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Country");
		xdCountry.guid = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b";
		
		//
		xdRegion = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Region");
		Если ЗначениеЗаполнено(Выборка.РегионGUID) Тогда
			xdRegion.guid = Выборка.РегионGUID;
		КонецЕсли;
		
		//
		xdLocality = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Locality");
		Если ЗначениеЗаполнено(Выборка.ГородGUID) Тогда
			xdLocality.guid = Выборка.ГородGUID;
		КонецЕсли;	
		
		//
		xdDistrict = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "District");
		Если ЗначениеЗаполнено(Выборка.РайонGUID) Тогда
			xdDistrict.guid = Выборка.РайонGUID;
		КонецЕсли;	
		
		//УЛИЦА
		xdStreet = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Street");
		Если ЗначениеЗаполнено(Выборка.УлицаGUID) Тогда
			xdStreet.guid = Выборка.УлицаGUID;
		КонецЕсли;	
		
		//АДРЕС
		стрАдрес = СокрЛП(Выборка.АдресПредставление);
		Если Прав(стрАдрес, 1) = "," Тогда
			стрАдрес = Лев(стрАдрес, СтрДлина(стрАдрес) - 1);
		КонецЕсли;	
		
		//
		стрАдрес = "Российская Федерация, " + стрАдрес;
		
		//ДОМ 
		стрДом = СокрЛП(Выборка.Дом);
		стрДом = стрДом + ?(ЗначениеЗаполнено(Выборка.Корпус), " корп. " + СокрЛП(Выборка.Корпус), "");
		
		//
		xdAddress = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address");
		xdAddress.country = xdCountry; 
		xdAddress.region = xdRegion; 
		xdAddress.district = xdDistrict; 
		xdAddress.locality = xdLocality; 
		xdAddress.street = xdStreet;
		xdAddress.building = СокрЛП(Выборка.Строение);
		xdAddress.house = стрДом;
		xdAddress.addressView = стрАдрес;
		
		//
		Результат = xdAddress;
		
	КонецЕсли;	
	
	//
	Возврат Результат;
	
КонецФункции	

Процедура ВыгрузитьСтруктурнуюЕдиницу(СтруктурнаяЕдиница) Экспорт
	
	
	Если ЗначениеЗаполнено(НастройкаAPI) = Ложь Тогда
		НастройкаПодключения  = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
	Иначе
		НастройкаПодключения  = НастройкаAPI;
	КонецЕсли;	
	
	
	
	МЗ = РегистрыСведений.МЙ_ПоднадзорныеОбъекты.СоздатьМенеджерЗаписи();
	МЗ.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	МЗ.Организация = НастройкаПодключения.Организация;	
	
	МЗ.Прочитать();
			
	//	
	
	ПользовательВетис = ОбменССистемойВетис.ПолучитьАссоциированногоПользователя(ПараметрыСеанса.ТекущийПользователь, НастройкаПодключения.Организация);
	
	Если ПользовательВетис = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	
	ПараметрыПодключения = ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаПодключения);
	
	/////////////////////////////////////////                                   
	
	//
	xdAddress = ПолучитьСтруктуруАдресаСтруктурнойЕдиницы(СтруктурнаяЕдиница, ФабрикаXD);
	Если xdAddress = Неопределено Тогда
		Сообщить("Не указан адрес структурной единицы!");
		Возврат;
	Конецесли;	
	
	/////////////////////////////////////////                                   
	
	//НАШЕ ЮР.ЛИЦО
	xdBusinessEntity = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	xdBusinessEntity.Guid = НастройкаПодключения.issuerId; 
	
	
	//СПИСОК ВИДОВ ДЕЯТЕЛЬНОСТИ
	xdActivity = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "EnterpriseActivity");	
	xdActivity.name = "Реализация пищевых продуктов";
	
	//
	xdActivityList = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "EnterpriseActivityList");
	xdActivityList.count = 1;
	xdActivityList.total = 1;
	xdActivityList.offset = 0;
	
	//
	xdActivityList.activity.Добавить(xdActivity);
		
	//
	xdEnterprise = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "Enterprise");
	
	//
	Если ЗначениеЗаполнено(МЗ.GUID) Тогда
		Ответ = ПроксиEnterprise.GetEnterpriseByGuid(МЗ.GUID);
		Если ТипЗнч(Ответ) = Тип("ОбъектXDTO") Тогда
			МЗ.UUID = ОбменССистемойВетис.ПолучитьСвойствоОбъектаXDTO(Ответ, "UUID"); 	
		КонецЕсли; 
		
		xdEnterprise.UUID = МЗ.UUID;
	КонецЕсли;
	
	xdEnterprise.name = СокрЛП(СтруктурнаяЕдиница) ; //предприятие
	xdEnterprise.type = 1; //предприятие
	xdEnterprise.activityList = xdActivityList;
	xdEnterprise.address = xdAddress;
	xdEnterprise.owner = xdBusinessEntity;
	
	//список организаций
	xdEnterpriseList = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "EnterpriseList");
	xdEnterpriseList.count = 1;
	xdEnterpriseList.total = 1;
	xdEnterpriseList.offset = 0;
	
	//
	xdEnterpriseList.enterprise.Добавить(xdEnterprise); //<---список
	
	
	//описание операции по модифицированию
	xdModifyEnterpriseOperation = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "ENTModificationOperation");
	
	//
	Если ЗначениеЗаполнено(МЗ.UUID) Тогда
		xdModifyEnterpriseOperation.type = "UPDATE";
		xdModifyEnterpriseOperation.reason = "Изменение адреса магазина компании";
	Иначе
		xdModifyEnterpriseOperation.type = "CREATE";
		xdModifyEnterpriseOperation.reason = "Добавление магазина компании";
	КонецЕсли; 
	
	//
	xdModifyEnterpriseOperation.resultingList = xdEnterpriseList;
	

	////////////////////////////////////////////////////////////////////////
	
	ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("ModifyEnterpriseRequest", ФабрикаXD, НастройкаПодключения);			
	
	ПараметрыФункции.Вставить("modificationOperation", xdModifyEnterpriseOperation);
	
	//
	Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, "modifyEnterpriseRequest");
	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		
		//тут какая-то ошибка
		Сообщить("Структурная единица не была выгружена в ""Ветис""!", СтатусСообщения.Важное);
	Иначе	
		
		//
		Попытка
		
			//
			Если ТипЗнч(Ответ.result.modifyEnterpriseResponse.enterprise) = Тип("СписокXDTO") Тогда
				Для Каждого ОбъектXDTO ИЗ Ответ.result.modifyEnterpriseResponse.enterprise Цикл
					Если ОбменССистемойВетис.ПривестиКБулеву(ОбъектXDTO.active) Тогда
						GUID = ОбъектXDTO.guid;
						UUID = ОбъектXDTO.uuid;
						
						Прервать;
					КонецЕсли; 
				КонецЦикла;  
			Иначе
				GUID = Ответ.result.modifyEnterpriseResponse.enterprise.guid;
				UUID = Ответ.result.modifyEnterpriseResponse.enterprise.uuid;
			КонецЕсли; 
			
			//
			МЗ.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			МЗ.Организация = НастройкаПодключения.Организация; 
			
			МЗ.GUID = GUID; 
			МЗ.UUID = UUID;
			
			//
			МЗ.Записать();
			
			Сообщить("Структурная единица успешно выгружена в ""Ветис"".");
		Исключение
		КонецПопытки;	
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокРегионовПоУмолчанию(СтранаGUID = Неопределено) Экспорт
	         
		
	//
	Если НЕ ЗначениеЗаполнено(СтранаGUID) Тогда
		СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b";
	КонецЕсли;	
	
	//
	ListOptions = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1500;
	
	//
	Список = Прокси.GetRegionListByCountry(ListOptions, "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b");
	
	ЭтотОбъект.ТаблицаВсехРегионов.Очистить();
	Для Каждого xdОбъект Из Список.region Цикл
		
			
			
		//
		НоваяСтрока = ЭтотОбъект.ТаблицаВсехРегионов.Добавить();
		НоваяСтрока.GUID = xdОбъект.GUID;
		НоваяСтрока.Регион = xdОбъект.name;
		Если xdОбъект.GUID <> "0c5b2444-70a0-4932-980c-b4dc0d3f02b5"
			И xdОбъект.GUID <> "29251dcf-00a1-4e34-98d4-5c47484a36d4" Тогда
			
			//
			НоваяСтрока.Использовать = Ложь;
		Иначе
			НоваяСтрока.Использовать = Истина;			
		КонецЕсли;	
		 
		
	КонецЦикла;	
	
	//
	
	
КонецПроцедуры


//
ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();

Прокси = ОбменССистемойВетис.ПолучитьПроксиIkar(ОбменССистемойВетис.ОсновнаяНастройкаАПИ());	
ПроксиEnterprise = ОбменССистемойВетис.ПолучитьПроксиEnterprise(ОбменССистемойВетис.ОсновнаяНастройкаАПИ());	
