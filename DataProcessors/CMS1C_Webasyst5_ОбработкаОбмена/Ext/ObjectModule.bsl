Перем Обработка;

//Обработчики подписок
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
Функция КонтрольРазмещенияНоменклатурыВКатегорииПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФункции 

Функция КонтрольСоответствияРодителяНоменклатурыВКатегории(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция СинхронизироватьСвойстваСайтаИзСвойств1CПриЗаписи(Источник, Отказ,Замещение) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция ЗаполнениеСвойствСайтаИзРеквизитовПриСозданииПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция ЗаполнениеКартинкиДопДанныхИзСпрНоменклатураПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция ЗаполнениеСвойствСайтаХарактеристикойПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция ЗаписьОписанияВДопДанныеПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция СинхронизироватьСвойства1СИзСвойствСайтаПриЗаписи(Источник, Отказ,Замещение) Экспорт
	Возврат Неопределено;
КонецФУнкции

Функция УдалитьВариантыНоменклатурыБезПривязокКХарактеристикамПриЗаписи(Источник, Отказ) Экспорт
	Возврат Неопределено;
КонецФУнкции 

Функция ЗаписатьВесНоменклатурыПриЗаписи(ТекЕдиница) Экспорт
	возврат Неопределено;
КонецФункции

Функция ПриЗаписиCMS1C_НоменклатурыЗаписатьДанныеНоменклатурыПриЗаписи(Источник,Отказ) Экспорт
	Возврат Истина;
КонецФункции

Функция ПриЗаписиНоменклатурыЗаписатьДанныеCMS1C_НоменклатурыПриЗаписи(Источник,Отказ) Экспорт
	Возврат Истина;
КонецФункции

//Обработчики обмена
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
Функция ЗагрузитьИзображения(Обработка,СтруктураПараметров) Экспорт
	ТаблицаФайловProtected = Неопределено;
	ТаблицаФайловPublic = Неопределено;
	
	
	ОбъектИзображение = СтруктураПараметров.ОбъектИзображение;
	
	
	НастройкаСайта = Обработка.НастройкаСайтаДляОбмена;
	
	Обработка.СтруктураПеременных.Свойство("ТаблицаФайловProtected",ТаблицаФайловProtected);
	Обработка.СтруктураПеременных.Свойство("ТаблицаФайловPublic",ТаблицаФайловPublic);
	
	
	СтруктураАдресаFTP = Обработка.СтруктураАдресаFTP;
	
	IDКартинки = формат(ОбъектИзображение.ID,"ЧГ=");
	IDТовара = Формат(ОбъектИзображение.ВЛаделец.ID,"ЧГ=");
	ЗагружаемКартинку = ОбъектИзображение.ЭтоНовый();
	
	ТаблицаДляПоискаКартинок = Обработка.ТаблицаДляПоискаКартинок;
	ТаблицаДляПоискаКартинок.Очистить();
	
	ПерваяПапка = "";
	ВтораяПапка = "";
	ТретьяПапка = IDТовара;
	
	ДлинаIDТовара = СтрДлина(IDТовара);
	Если ДлинаIDТовара =1 Тогда
		ПерваяПапка = "0"+IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 2 Тогда
		ПерваяПапка = IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 3 Тогда
		ПерваяПапка = Прав(IDТовара,2);
		втораяПапка = "0"+Лев(IDТовара,1);
	Иначе
		ПерваяПапка = Прав(IDТовара,2);
		ВтораяПапка = Прав(IDТовара,4);
		ВтораяПапка = Лев(ВтораяПапка,2);
	КонецЕсли;
	
	ТретьяПапка = IDТовара;
	ЧетвертаяПапка = "images";
	
	//ПутьКПапке = FTPОбменПутьКОригинальнымКартинкам+"/"+IDТовара;
	//ПутьКПапке = Обработка.FTPОбменПутьКОригинальнымКартинкам+ "/"+ПерваяПапка + "/" + ВтораяПапка;
	//ПутьКПапкеОтносительный = ПерваяПапка + "/" + ВтораяПапка;
	//ПутьКПапкеОтносительный = ПутьКПапкеОтносительный + "/" + IDТовара;
	//ПутьКПапкеОтносительный = ПутьКПапкеОтносительный + "/"+"images";
	
	ПерваяПапкаСайт = ПерваяПапка;
	ВтораяПапкаСайт = ПерваяПапкаСайт + "/"+ВтораяПапка;
	ТретьяПапкаСайт = ВтораяПапкаСайт + "/"+ТретьяПапка;
	ЧетвертаяПапкаСайт = ТретьяПапкаСайт + "/" + ЧетвертаяПапка;
	
	ФТППерваяПапкаСайт = Обработка.FTPОбменПутьКОригинальнымКартинкам+"/"+ПерваяПапка;
	ФТПВтораяПапкаСайт = ФТППерваяПапкаСайт+"/"+ВтораяПапка;
	ФТПТретьяПапкаСайт = ФТПВтораяПапкаСайт + "/"+ТретьяПапка;
	ФТПЧетвертаяПапкаСайт = ФТПТретьяПапкаСайт + "/"+ЧетвертаяПапка;
	
	ПерваяПапка1С = Обработка.ПутьКФайлам+"/wa-data/protected/shop/products/"+ПерваяПапка;
	ВтораяПапка1С = ПерваяПапка1С+"/"+ВтораяПапка;
	ТретьяПапка1С = ВтораяПапка1С + "/"+ТретьяПапка;
	ЧетвертаяПапка1С = ТретьяПапка1С + "/"+ЧетвертаяПапка;
	
	
	Если Обработка.НакладыватьWaterMark Тогда
		ИмяКартинки = IDКартинки + ".original." + ОбъектИзображение.Расширение;
	Иначе
		ИмяКартинки = IDКартинки + "." + ОбъектИзображение.Расширение;
	Конецесли;
	
	//НайдСтрокаТаблицыФайловProtected = ТаблицаФайловProtected.Найти(ПутьКПапкеОтносительный+"/"+ИмяКартинки);
	ДвоичныеСайта = Неопределено;
	
	СсылкаИзображение = ОбъектИзображение.Ссылка;
	Если НЕ СсылкаИзображение.Пустая() Тогда
		Двоичные1С = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(СсылкаИзображение,СсылкаИзображение.НастройкаСайта,"",Истина);
	Иначе
		Двоичные1С = Неопределено;
	КонецЕсли;
	
	ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ЧетвертаяПапка1С+"/"+ИмяКартинки,ЧетвертаяПапкаСайт+"/"+ИмяКартинки,ФТПЧетвертаяПапкаСайт+"/"+ИмяКартинки,Истина,Истина,Истина,Ложь,Ложь,"Загрузка",Двоичные1С,ДвоичныеСайта);
	ВыполнитьОбменКартинкамиПоТаблице(ТаблицаДляПоискаКартинок,ТаблицаФайловProtected,СтруктураАдресаFTP,"Загрузка",Обработка);
	ДвоичныеСайта = ТаблицаДляПоискаКартинок[0].ДвоичныеСайт;
	Если ДвоичныеСайта <> Неопределено Тогда
		Хран = Новый ХранилищеЗначения(ДвоичныеСайта);
		ОбъектИзображение.Хранилище = Хран;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
	//Если Не ЗагружаемКАртинку Тогда
	//	Двоичные = ОбъектИзображение.Хранилище.получить();
	//	Если Двоичные = Неопределено Тогда
	//   	 Если Обработка.ХранитьФайлыНаДиске Тогда
	//   		 ПутьКФайлу = Обработка.ПутьКФайлам+"\"+ПутьКПапкеОтносительный+"\"+ИмяКартинки;
	//   		 МассивНайденныхФайлов = НайтиФайлы(ПутьКФайлу);
	//   		 Если МассивНайденныхФайлов.Количество() = 0 ТОгда
	//   			 Двоичные = Неопределено;
	//   			 ЗагружаемКартинку = Истина;
	//   		 Иначе
	//   			 Двоичные = МассивНайденныхФайлов[0];
	//   		 КОнецЕсли;
	//   	 Иначе
	//   		 ЗагружаемКАртинку = Истина;
	//   	 КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если Не ЗагружаемКАртинку Тогда
	//   	 Размер = Двоичные.Размер();
	//   	 
	//   	 Если Размер <> ОбъектИзображение.Размер Тогда
	//   		 ЗагружаемКАртинку = Истина;
	//   	 КонецЕсли;
	//	КонецЕсли;
	//			 
	//	Если Размер <> НайдСтрокаТаблицыФайловProtected.Размер Тогда
	//   	 ЗагружаемКартинку = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	//ПутьКПапке = Обработка.FTPОбменПутьКОригинальнымКартинкам+ "/"+ПутьКПапкеОтносительный;
	//
	//ПутьКартинки = ПолучитьИмяВременногоФайла(ОбъектИзображение.Расширение);
	
	//Если Обработка.НаСайтеСохраняетсяОригинальноеИзображение Тогда
	//Загружен = Обработка.ПолучитьФайлСФТП(ПутьКПапке+"/"+ИмяКартинки,ПутьКартинки,СтруктураАдресаFTP);
	////КонецЕсли;
	//
	//Если Загружен Тогда
	//	Двоичные = Новый ДвоичныеДанные(ПутьКартинки);
	//	Хран = Новый ХранилищеЗначения(Двоичные);
	//	//ОбъектИзображение.Хранилище = Хран
	//	Возврат Истина;
	//Иначе
	//	ОбъектИзображение.Размер = 0;
	//	Возврат Ложь;
	//КонецЕсли;
КонецФункции

Функция ВыгрузитьИзображения(Обработка,СтруктураПараметров) Экспорт
	
	Действие = СтруктураПараметров.Действие;
	Если Действие = "Удаление" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаФайловProtected = Неопределено;
	ТаблицаФайловPublic = Неопределено;
	
	НастройкаСайта = Обработка.НастройкаСайтаДляОбмена;
	
	Обработка.СтруктураПеременных.Свойство("ТаблицаФайловProtected",ТаблицаФайловProtected);
	Обработка.СтруктураПеременных.Свойство("ТаблицаФайловPublic",ТаблицаФайловPublic);
	СтруктураАдресаFTP = Обработка.СтруктураАдресаFTP;
	
	МассивСтрок = СтруктураПараметров.МассивСтрокРедактирования;
	Для Каждого ЭлементМассиваСтрок из МассивСтрок Цикл
		
		//СсылкаИзображение = ЭлементМассиваСтрок.ДопКолонка.Ссылка;
		СтрокаТаблицыЗначений = ЭлементМассиваСтрок.ДопКолонка;
		
		IDКартинки = формат(СтрокаТаблицыЗначений.ID_1С,"ЧГ=");
		IDТовара = Формат(СтрокаТаблицыЗначений.product_id_1С,"ЧГ=");
		ВыгружаемКартинку = Ложь;
		
		ПерваяПапка = "";
		ВтораяПапка = "";
		ТретьяПапка = IDТовара;
		
		ДлинаIDТовара = СтрДлина(IDТовара);
		Если ДлинаIDТовара = 1 Тогда
			ПерваяПапка = "0"+IDТовара;
			ВтораяПапка = "00";
		ИначеЕсли ДлинаIDТовара = 2 Тогда
			ПерваяПапка = IDТовара;
			ВтораяПапка = "00";
		ИначеЕсли ДлинаIDТовара = 3 Тогда
			ПерваяПапка = Прав(IDТовара,2);
			ВтораяПапка = "0"+Лев(IDТовара,1);
		Иначе
			ПерваяПапка = Прав(IDТовара,2);
			ВтораяПапка = Прав(IDТовара,4);
			ВтораяПапка = Лев(ВтораяПапка,2);
		КонецЕсли;
		
		ТретьяПапка = IDТовара;
		ЧетвертаяПапка = "images";
		
		ПерваяПапкаСайт = ПерваяПапка;
		ВтораяПапкаСайт = ПерваяПапкаСайт + "/"+ВтораяПапка;
		ТретьяПапкаСайт = ВтораяПапкаСайт + "/"+ТретьяПапка;
		ЧетвертаяПапкаСайт = ТретьяПапкаСайт + "/" + ЧетвертаяПапка;
		
		ФТППерваяПапкаСайт = Обработка.FTPОбменПутьКОригинальнымКартинкам+"/"+ПерваяПапка;
		ФТПВтораяПапкаСайт = ФТППерваяПапкаСайт+"/"+ВтораяПапка;
		ФТПТретьяПапкаСайт = ФТПВтораяПапкаСайт + "/"+ТретьяПапка;
		ФТПЧетвертаяПапкаСайт = ФТПТретьяПапкаСайт + "/"+ЧетвертаяПапка;
		
		ПерваяПапка1С = Обработка.ПутьКФайлам+"/wa-data/protected/shop/products/"+ПерваяПапка;
		ВтораяПапка1С = ПерваяПапка1С+"/"+ВтораяПапка;
		ТретьяПапка1С = ВтораяПапка1С + "/"+ТретьяПапка;
		ЧетвертаяПапка1С = ТретьяПапка1С + "/"+ЧетвертаяПапка;
		
		ТаблицаДляПоискаКартинок = Обработка.ТаблицаДляПоискаКартинок;
		ТаблицаДляПоискаКартинок.Очистить();
		
		ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ПерваяПапка1С,ПерваяПапкаСайт,ФТППерваяПапкаСайт,Истина,Истина,Ложь,Истина,Истина,"Выгрузка");
		ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ВтораяПапка1С,ВтораяПапкаСайт,ФТПВтораяПапкаСайт,Истина,Истина,Ложь,Истина,Истина,"Выгрузка");
		ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ТретьяПапка1С,ТретьяПапкаСайт,ФТПТретьяПапкаСайт,Истина,Истина,Ложь,Истина,Истина,"Выгрузка");
		ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ЧетвертаяПапка1С,ЧетвертаяПапкаСайт,ФТПЧетвертаяПапкаСайт,Истина,Истина,Ложь,Истина,Истина,"Выгрузка");
		
		ИмяКартинкиРеал = IDКартинки + "." + СтрокаТаблицыЗначений.ext_1С;
		
		Если Обработка.НакладыватьWaterMark Тогда
			ИмяКартинкиОригинал = IDКартинки + ".original." + СтрокаТаблицыЗначений.ext_1С;
			ПутьКартинкиОригинал1С = ЧетвертаяПапка1С+"/"+ИмяКартинкиОригинал;
			ПутьКартинкиОригиналСайт = ЧетвертаяПапкаСайт + "/" + ИмяКартинкиОригинал;
			ФТППутьКартинкиОригиналСайт = ФТПЧетвертаяПапкаСайт + "/" + ИмяКартинкиОригинал;
			//ДвоичныеОригинал = CMS1C_ПроцедурыОбменаССайтом.ПолучитьИзображениеCMS1C_Изображения(СсылкаИзображение,СсылкаИзображение.НастройкаСайта,"",Истина);
			
			//+
			МассивНайденныхФайлов = НайтиФайлы(ПутьКартинкиОригинал1С);
			Если МассивНайденныхФайлов.Количество() = 0 ТОгда
				ДвоичныеОригинал = Неопределено;
			Иначе
				ДвоичныеОригинал = МассивНайденныхФайлов[0];
			КОнецЕсли;
			//-
			
			Если ДвоичныеОригинал <> Неопределено Тогда
				ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ПутьКартинкиОригинал1С,ПутьКартинкиОригиналСайт,ПутьКартинкиОригиналСайт,Истина,Истина,Ложь,Истина,Ложь,"Выгрузка",ДвоичныеОригинал);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВыгружаемКартинку Тогда
			ПутьКартинкиРеал1С = ЧетвертаяПапка1С + "/" +ИмяКартинкиРеал;
			ПутьКартинкиРеалСайт = ЧетвертаяПапкаСайт + "/" + ИмяКартинкиРеал;
			ФТППутьКартинкиРеалСайт = ФТПЧетвертаяПапкаСайт + "/" + ИмяКартинкиРеал;
			ДвоичныеРеал = ПолучитьИзображениеCMS1C_Изображения(СтрокаТаблицыЗначений.original_filename_1С);
			
			Если ДвоичныеРеал = Неопределено Тогда
				ВыгружаемКартинку = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ДвоичныеРеал <> Неопределено Тогда
				ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,ПутьКартинкиРеал1С,ПутьКартинкиРеалСайт,ФТППутьКартинкиРеалСайт,Истина,Истина,Ложь,Истина,Ложь,"Выгрузка",ДвоичныеРеал);
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьОбменКартинкамиПоТаблице(ТаблицаДляПоискаКартинок,ТаблицаФайловProtected,СтруктураАдресаFTP,"Выгрузка",Обработка);
		
		ТаблицаДляПоискаКартинок.Очистить();
		ПутьКПАпкеНаУдалениеСайт = ЧетвертаяПапкаСайт+"/"+IDКартинки;
		ФТППутьКПапкеНаУдалениеСайт = Обработка.FTPОбменПутьКОтформатированнымКартинкам+ "/"+ПутьКПАпкеНаУдалениеСайт;
		ДобавитьСтрокуВТаблицуКартинок(ТаблицаДляПоискаКартинок,"",ПутьКПапкеНаУдалениеСайт,ФТППутьКПапкеНаУдалениеСайт,Ложь,Истина,Ложь,Истина,Ложь,"Удаление");
		ВыполнитьОбменКартинкамиПоТаблице(ТаблицаДляПоискаКартинок,ТаблицаФайловPublic,СтруктураАдресаFTP,"Удаление",Обработка);
		//
		//Обработка.УдалитьФайлыНаФТП(Обработка.FTPОбменПутьКОтформатированнымКартинкам+"\"+ПутьКПапкеОтносительный,СтруктураАдресаFTP);
	КонецЦикла;
КонецФункции

ФУнкция ПолучитьИзображениеCMS1C_Изображения(ПутьКФайлу)
	Двоичные = НОвый ДвоичныеДанные(ПутьКФайлу);
	Возврат Двоичные;
КонецФункции


Функция ВыполнитьОбменКартинкамиПоТаблице(Таблица,ТаблицаФайловСайта,СтруктураАдресаFTP,ВидОбмена,Обработка)
	Для Каждого СтрТз из Таблица Цикл
		Если ВидОбмена = "Выгрузка" Тогда
			НадоДелатьВыгрузку = Ложь;
			Если ТаблицаФайловСайта <> Неопределено Тогда
				НайдСтрока = ТаблицаФайловСайта.Найти(СтрТз.СкриптПутьСайт);
				Если НайдСтрока = Неопределено Тогда
					Если СтрТз.СоздаватьСайт Тогда
						НадоДелатьВыгрузку = Истина;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если СтрТз.ЭтоКаталог Тогда
						СтрТз.Результат = Истина;
						Продолжить;
					Иначе
						Двоичные1с = СтрТз.Двоичные1С;
						
						Если Двоичные1С = Неопределено Тогда
							СтрТз.Результат = Ложь;
							Продолжить;
						КонецЕсли;
						
						Если Двоичные1С.Размер() = НайдСтрока.Размер Тогда
							НадоДелатьВыгрузку = Ложь;
							СтрТз.Результат = Истина;
							Продолжить;
						Иначе
							НадоДелатьВыгрузку = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе//Ищем по ФТП
				
				
				Если СтрТз.ЭтоКаталог Тогда
					СтрТз.Результат = Обработка.НайтиИлиСоздатьКаталогFTP(СтрТз.ФТППутьСайт,СтруктураАдресаFTP,СтрТз.СоздаватьСайт);
				Иначе
					НайдФайл = Обработка.НайтиФайлНаФТП(СтрТз.ФТППутьСайт);
					Если (НайдФайл = Ложь ИЛИ НайдФайл.Количество() = 0) И СтрТз.СоздаватьСайт Тогда
						НадоДелатьВыгрузку = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не НадоДелатьВыгрузку И не СтрТз.ЭтоКаталог Тогда //Проверяем размер файла
				Двоичные1С = СтрТз.Двоичные1С;
				ДвоичныеСайт = СтрТз.ДвоичныеСайт;
				
				Если ДвоичныеСайт = Неопределено Тогда
					НадоДелатьВыгрузку = Истина;
				КонецЕсли;
				
				Если Двоичные1С = Неопределено Тогда
					НадоДелатьВыгрузку = Ложь;
					Продолжить;
				Конецесли;
				
				Если Не НадоДелатьВыгрузку Тогда
					Если Двоичные1С.Размер() <> ДвоичныеСайт.Размер() Тогда
						НадоДелатьВыгрузку = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НадоДелатьВыгрузку Тогда
				Если СтрТз.ЭтоКаталог Тогда
					СтрТз.Результат = Обработка.НайтиИлиСоздатьКаталогFTP(СтрТз.ФТППутьСайт,СтруктураАдресаFTP,СтрТз.СоздаватьСайт);
				Иначе
					Двоичные = СтрТз.Двоичные1С;
					ПутьКВременным = ПолучитьИмяВременногоФайла();
					Двоичные.Записать(ПутьКВременным);
					СтрТз.Результат = Обработка.ОтправитьФайлНаФТП(ПутькВременным,СтрТз.ФТППутьСайт,СтруктураАдресаFTP);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидОбмена = "Удаление" Тогда
			Если ТаблицаФайловСайта <> Неопределено Тогда
				НайдСтрока = ТаблицаФайловСайта.Найти(СтрТз.СкриптПутьСайт);
				Если НайдСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Обработка.УдалитьФайлыНаФТП(СтрТз.ФТППутьСайт,СтруктураАдресаFTP);
			Иначе //Ищем по ФТП
				НайдФайл = Обработка.НайтиФайлНаФТП(СтрТз.ФТППутьСайт,,,Ложь);
				Если (НайдФайл <> Ложь И НайдФайл <> Неопределено И НайдФайл.Количество() <> 0) Тогда
					Обработка.УдалитьФайлыНаФТП(СтрТз.ФТППутьСайт,СтруктураАдресаFTP);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидОбмена = "Загрузка" Тогда
			//+
			Если ТаблицаФайловСайта <> Неопределено Тогда
				НайдСтрока = ТаблицаФайловСайта.Найти(СтрТз.СкриптПутьСайт);//1) находим есть или нет. Если нету до свидания
				Если НайдСтрока = Неопределено Тогда
					СтрТз.Результат = Ложь;
					Продолжить;
				КонецЕсли;
				РазмерФайлаНаСайте = НайдСтрока.Размер;
			Иначе //Ищем по ФТП
				МасНайдФайлы = Обработка.НайтиФайлНаФТП(СтрТз.ФТППутьСайт,,,Ложь);
				Если (МасНайдФайлы <> Ложь И МасНайдФайлы <> Неопределено И МасНайдФайлы.Количество() <> 0) Тогда
					РазмерФайлаНаСайте = МасНайдФайлы[0].Размер();
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Двоичные1с = СтрТз.Двоичные1С;
			
			НадоЗагружать = Ложь;
			Если Двоичные1С = Неопределено Тогда
				НадоЗагружать = Истина;
			КонецЕсли;
			
			Если Не НадоЗагружать Тогда
				РазмерФайлаВ1С = Двоичные1С.Размер();
				
				Если РазмерФайлаВ1С <> РазмерФайлаНаСайте Тогда
					НадоЗагружать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ НадоЗагружать Тогда
				СтрТз.Результат = Истина;
				Продолжить;
			КонецЕсли;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			Если Обработка.ПолучитьФайлСФТП(СтрТз.ФТППутьСайт,ИмяВременногоФайла,СтруктураАдресаFTP) Тогда
				СтрТз.ДвоичныеСайт = Новый ДвоичныеДанные(ИмяВременногоФайла);
				СтрТз.Результат = Истина;
				Продолжить;
			КонецЕсли;
			//-
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ДобавитьСтрокуВТаблицуКартинок(Таблица,СкриптПуть1С,СкриптПутьСайт,ФТППутьСайт,Проверять1С,ПроверятьСайт,Создавать1С,СоздаватьСайт,ЭтоКаталог,ВидОбмена,Двоичные1С = Неопределено,ДвоичныеСайт = Неопределено)
	ДобСтр = Таблица.Добавить();
	ДобСтр.СкриптПуть1С = СкриптПуть1С;
	ДобСтр.СкриптПутьСайт = СкриптПутьСайт;
	ДобСтр.ФТППутьСайт = ФТППутьСайт;
	ДобСтр.Проверять1С = Проверять1С;
	ДобСтр.ПроверятьСайт = ПроверятьСайт;
	ДобСтр.Создавать1С = Создавать1С;
	ДобСтр.СоздаватьСайт = СоздаватьСайт;
	ДобСтр.ЭтоКаталог = ЭтоКаталог;
	ДобСтр.ВидОбмена = ВидОбмена;
	ДобСтр.Двоичные1С = Двоичные1С;
	ДобСтр.ДвоичныеСайт = ДвоичныеСайт;
КонецФункции

Функция НайтиСтрокуТаблицыФайлов(ТаблицаФайлов,ПутьКФайлуОтносительноСкрипта,ПутьКФайлуФТП)
	Если ТаблицаФайлов <> Неопределено Тогда
		Возврат ТаблицаФайлов.Найти(ПутьКФайлуОтносительноСкрипта);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьТаблицыФайловНаСайте(Параметры) Экспорт
	Обработка = Параметры.Обработка;
	Если Не Обработка.ИспользоватьСкриптДляОбменаИзображениями Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПеременных = обработка.СтруктураПеременных;
	
	МаксКво = 0;
	ЕСли СтруктураПеременных.Свойство("МассивИзмененнойИДобавленнойНоменклатурыНаСайтеСУчетомОтборов") Тогда
		МаксКво = Макс(СтруктураПеременных.МассивИзмененнойИДобавленнойНоменклатурыНаСайтеСУчетомОтборов.Количество(),максКво);
	КонецЕСли;
	
	МаксКво = Макс(СтруктураПеременных.МассивИзмененийНоменклатуры.Количество(),МаксКво);
	
	Если МаксКво < Обработка.КоличествоТоваровПриКоторомНеИспользоватьСкриптДляОбменаИзображениями Тогда
		Возврат Истина;
	КонецЕсли;
	
	Соединение = Обработка.Соединение;
	
	Если Обработка.СтруктураПеременных.Свойство("ТаблицаФайловProtected") = Ложь ИЛИ Обработка.СтруктураПеременных.Свойство("ТаблицаФайловPublic") = Ложь Тогда
		СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(Обработка, Обработка.HTTPОбменАдресСайта);
	КонецЕсли;
	
	Если Обработка.СтруктураПеременных.Свойство("ТаблицаФайловProtected") = Ложь Тогда
		СтруктураПараметровСайта.Вставить("key",Обработка.ПарольДляПолученияСпискаКартинок);
		СтруктураПараметровСайта.Вставить("path",Обработка.ПутьКОригинальнымКартинкамОтносительноФайлаОбмена);
		
		ТаблицаФайловProtected = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("get_files","",Соединение,СтруктураПараметровСайта);
		Обработка.СтруктураПеременных.Вставить("ТаблицаФайловProtected",ТаблицаФайловProtected);
	КонецЕсли;
	
	Если Обработка.СтруктураПеременных.Свойство("ТаблицаФайловPublic") = Ложь Тогда
		СтруктураПараметровСайта.Вставить("key",Обработка.ПарольДляПолученияСпискаКартинок);
		СтруктураПараметровСайта.Вставить("path",Обработка.ПутьКОтформатированнымКартинкамОтносительноФайлаОбмена);
		
		ТаблицаФайловPublic = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("get_files","",Соединение,СтруктураПараметровСайта);
		Обработка.СтруктураПеременных.Вставить("ТаблицаФайловPublic",ТаблицаФайловPublic);
	КонецЕсли;
	Возврат Истина;
КонецФУнкции

Функция УстановитьФильтрДляПовторнойВыгрузкиТоваровСНовымиОсновнымиВариантамиИИзображениями(Обработка,СтруктураПараметров) Экспорт
	Если НЕ Обработка.СтруктураПеременных.Свойство("CMS1C_Номенклатура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = СтруктураПараметров.Запрос;
	
	//1) там где выгружался основной вариант NULL, загоняем в массив;
	Таблица1С = Обработка.СтруктураПеременных.CMS1C_Номенклатура;
	//ТаблицаНужных = Таблица1С.Скопировать(Новый Структура("ОсновнойВариантID",NULL));
	//
	МассивНоменклатуры = Новый Массив;
	//Для Каждого СТрТз из ТаблицаНужных Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрТз.ОсновнойВариант) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ТипЗнч(СтрТз.ОсновнойВариант) <> Тип("СправочникСсылка.CMS1C_ВариантыНоменклатуры") Тогда
	//		Продолжить;
	//	Конецесли;
	//	
	//	Если СтрТз.ОсновнойВариант.Код = "" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	МассивНоменклатуры.Добавить(СтрТз.Ссылка);
	//КонецЦикла;
	//
	////2) Если выгружаются изображения -- тогда дополним массив
	//Если Обработка.ВыгружатьИзображенияТоваров Тогда
	//	ТаблицаНужных = Таблица1С.Скопировать(Новый Структура("ОсновноеИзображениеID",0));
	//	Для Каждого СтрТз из ТаблицаНужных Цикл
	//		Если Не ЗначениеЗаполнено(СтрТз.ОсновноеИзображение) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ТипЗнч(СтрТз.ОсновноеИзображение) <> Тип("СправочникСсылка.CMS1C_Изображения") Тогда
	//			Продолжить;
	//		Конецесли;
	//		
	//		Если СтрТз.ОсновноеИзображение.Код = "" Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		
	//		Если МассивНоменклатуры.Найти(СтрТз.Ссылка) = Неопределено ТОгда
	//			МассивНоменклатуры.добавить(СтрТз.Ссылка);
	//		КонецЕсли;
	//		
	//	КонецЦИкла;
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИзмененийНоменклатуры",МассивНоменклатуры);
	Запрос.УстановитьПараметр("ВсяНоменклатура",Ложь);
	Обработка.ФильтрПоТаблицеСайта = Обработка.ПолучитьМассивВыгружаемыхID(Запрос.Параметры.МассивИзмененийНоменклатуры,"id","id_tov");
КонецФункции

ФУнкция СоздатьНоменклатуру(Обработка,СтруктураПараметров) Экспорт
	СтрокаТаблицыРезультатаСинхронизации = Структурапараметров.СтрокаТаблицыРезультатаСинхронизации;
	ОбНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	ОбНоменклатура.Наименование =  СтрокаТаблицыРезультатаСинхронизации.name_Сайт;
	ОбНоменклатура.НаименованиеПолное =  СтрокаТаблицыРезультатаСинхронизации.name_Сайт;
	ОбНоменклатура.ВидНоменклатуры = Обработка.ВидНоменклатуры;
	ОбНоменклатура.БазоваяЕдиницаИзмерения = Обработка.ЕдиницаИзмеренияНовойНоменклатуры;
	
	ОбНоменклатура.ДополнительноеОписаниеНоменклатуры =  СтрокаТаблицыРезультатаСинхронизации.description_Сайт;
	//ОбНоменклатура.Артикул = СокрЛП(СтрокаПродуктовСайта.product_code);
	ОбНоменклатура.СтавкаНДС = Обработка.СтавкаНДС;
	
	Попытка
		ОбНоменклатура.Записать();
		Обработка.УстановитьЕдиницуХраненияОстатковОтчетов(ОбНоменклатура);
		ОбНоменклатура.Записать();
		
		Сообщить("Создан новый элемент номенклатуры, наименование: "+СтрокаТаблицыРезультатаСинхронизации.name_Сайт);
		//Добавим элемент к загрузке.
		//МассивОбнов.Добавить(ОбНоменклатура.Ссылка);
		
		//Если МассивИзмененнойНоменклатуры <> Неопределено Тогда
		//	МассивИзмененнойНоменклатуры.Добавить(ОбНоменклатура.Ссылка);
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить("Не удалось записать новый элемент номенклатуры, наименование: "+СтрокаТаблицыРезультатаСинхронизации.name_Сайт);
		Возврат Неопределено;
	КонецПопытки;
	//ДатаМодификации = ТекущаяДата()+(КоррекцияВремениСервера*60);
	//ЗаписатьВИсториюВыгрузки(ОбНоменклатура.Ссылка,ДатаМодификации);
	Возврат ОбНоменклатура.Ссылка;
КонецФункции

Функция РазместитьНоменклатуруВПапке(НоменклатураОбъект) Экспорт
	Категория = НоменклатураОбъект.Категория;
	Владелец = номенклатураОбъект.Владелец;
	
	ТКатегорий = Новый ТаблицаЗначений;
	ТКатегорий.Колонки.Добавить("УровеньРодителя");
	ТКатегорий.Колонки.Добавить("Родитель");
	
	ТекРодитель = Категория;
	ТекУровень = 0;
	
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		
		СтрокаКат = ТКатегорий.Добавить();	
		СтрокаКат.УровеньРодителя = ТекУровень;	
		СтрокаКат.Родитель = ТекРодитель;			
		ТекРодитель = ТекРодитель.Родитель;
		ТекУровень = ТекУровень + 1;
	КонецЦикла;
	
	ТКатегорий.Сортировать("УровеньРодителя Убыв");              	
	ТекущийРодительНом = Справочники.Номенклатура.ПустаяСсылка();
	
	Для каждого стр из ТКатегорий Цикл
		
		ТекущийРодительНом = НайтиСоздатьВернутьКатегориюНоменклатуры(стр,ТекущийРодительНом,НоменклатураОбъект.Ссылка);			
		
	КонецЦикла;
	
	Если Владелец.Родитель <> ТекущийРодительНом Тогда
		Номенклатура = Владелец.ПолучитьОбъект();
		Номенклатура.Родитель =  ТекущийРодительНом;
		Номенклатура.ДополнительныеСвойства.Вставить("НадоЗаписать",Истина);
		Номенклатура.Записать();
	КонецЕсли;
КонецФУнкции

Функция НайтиСоздатьВернутьКатегориюНоменклатуры(стр,ТекущийРодительНом,НоменклатураСсылка)
	РодительНоменклатуры = ТекущийРодительНом;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.Родитель = &Родитель
	|	И Номенклатура.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Родитель",РодительНоменклатуры);
	Запрос.УстановитьПараметр("Наименование",СокрЛП(стр.Родитель.Наименование));
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	
	Если НЕ ВыборкаРезультат.Следующий() Тогда
		
		КатегорияНоменклатурыОбъект = Справочники.Номенклатура.СоздатьГруппу();		
		КатегорияНоменклатурыОбъект.Наименование = СокрЛП(стр.Родитель.Наименование);
		КатегорияНоменклатурыОбъект.Родитель = РодительНоменклатуры;
		КатегорияНоменклатурыОбъект.ДополнительныеСвойства.Вставить("НадоЗаписать");
		КатегорияНоменклатурыОбъект.Записать();
		КатегорияНоменклатуры = КатегорияНоменклатурыОбъект.Ссылка;
	Иначе
		КатегорияНоменклатуры = ВыборкаРезультат.Ссылка;
	КонецЕсли;
	
	СтрокаСопоставления = РегистрыСведений.CMS1C_Категории.Получить(Новый Структура("НастройкаСайта,ГруппаНоменклатуры",номенклатураСсылка,КатегорияНоменклатуры));
	
	Если СтрокаСопоставления.Категория<>стр.Родитель Тогда
		НоваяСтрокаСопоставлений = РегистрыСведений.CMS1C_Категории.СоздатьМенеджерЗаписи(); 
		НоваяСтрокаСопоставлений.ГруппаНоменклатуры =  КатегорияНоменклатуры;
		НоваяСтрокаСопоставлений.Категория = стр.Родитель;
		НоваяСтрокаСопоставлений.НастройкаСайта = НастройкаСайта;
		НоваяСтрокаСопоставлений.Записать();
	КонецЕсли;
	
	возврат КатегорияНоменклатуры;
КонецФункции

Функция РассчитатьЛефтРайтКейКатегорий(Обработка) Экспорт
	Возврат Неопределено;
	Запрос = Новый запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	|	CMS1C_Категории.Ссылка КАК Ссылка,
	|	CMS1C_Категории.Ссылка КАК КоличествоКатегорий,
	|	CMS1C_Категории.Сортировка КАК Сортировка
	|ИЗ
	|	Справочник.CMS1C_Категории КАК CMS1C_Категории
	|ГДЕ
	|	CMS1C_Категории.Владелец = &НастройкаСайта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка,
	|	Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоКатегорий)
	|ПО
	|	Ссылка ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("НастройкаСайта",Обработка.НастройкаСайтаДляОбмена);
	
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭтоПервыйРаз = Истина;
	
	МассивУжеБыли = Новый Массив;
	
	Для Каждого СтрокаДерева из Дерево.Строки Цикл
		ПолучитьLeftRightKey(СтрокаДерева,МассивУжеБыли);
	КонецЦикла;
КонецФункции

Функция ПолучитьLeftRightKey(СтрокаДерева,МассивУжеБыли)
	
	Если МассивУжеБыли.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивУжеБыли.Добавить(СтрокаДерева.Ссылка);
	Если ТипЗнч(СтрокаДерева.КоличествоКатегорий) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	//1) проверяем, вдруг строка верхнего уровня
	РодительскаяСтрока = СтрокаДерева.Родитель;
	
	
	//2) Ищем соседа
	
	Если РодительскаяСтрока <> Неопределено Тогда
		ИндексСтроки = РодительскаяСтрока.Строки.Индекс(СтрокаДерева);
	Иначе
		Дерево = СтрокаДерева.Владелец();
		ИндексСтроки = Дерево.Строки.Индекс(СтрокаДерева);
	КонецЕсли;
	
	Если ИндексСтроки = 0 Тогда//Соседа нету, значит добавляем +1 к родителю
		Если ЗначениеЗаполнено(РодительскаяСтрока) Тогда
			НашLeft_Key = РодительскаяСтрока.ссылка.left_key+1;
		Иначе
			НашLeft_Key = 1;
		КонецЕсли;
		
	Иначе
		Если РодительскаяСтрока <> Неопределено Тогда
			СоседскаяСтрока = РодительскаяСтрока.Строки[ИндексСтроки-1];
		Иначе
			СоседскаяСтрока = Дерево.Строки[ИндексСтроки-1];
		КонецЕсли;
		
		НашLeft_Key = СоседскаяСтрока.Ссылка.right_key + 1;
	КонецЕсли;
	НашRight_Key = НашLeft_Key +((СтрокаДерева.КоличествоКатегорий-1)*2)+1;
	
	Если СтрокаДерева.Ссылка.left_key <> НашLeft_Key
		ИЛИ СтрокаДерева.Ссылка.right_key <> Нашright_Key Тогда
		Об = Строкадерева.Ссылка.ПолучитьОБъект();
		Об.left_key = НашLeft_Key;
		Об.right_key = Нашright_Key;
		Об.Записать();
	КонецЕсли;
	спУд = новый СписокЗначений();
	Для Каждого ПодчиненнаяСтрокаДерева из СтрокаДерева.Строки Цикл
		УдалитьДвойниковИзДерева(ПодчиненнаяСтрокаДерева,МассивУжеБыли,спУд);
	КонецЦикла;
	
	Для Каждого ЭлСпУд из спУд Цикл
		Строкадерева.строки.Удалить(ЭлСпУд.Значение);
	КонецЦикла;
	
	
	Для Каждого ПодчиненнаяСтрокаДерева из СтрокаДерева.Строки Цикл
		ПолучитьLeftRightKey(ПодчиненнаяСтрокаДерева,МассивУжеБыли);
	КонецЦикла;
КонецФункции

Функция УдалитьДвойниковИзДерева(СтрокаДерева,МассивУжеБыли,спУд)
	
	Если МассивУжеБыли.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		спУд.Добавить(СтрокаДерева);
	КонецЕсли;
КонецФункции

Процедура ВариантыНоменклатуры_ПереборкаСтрокТаблицы1С(Параметры) Экспорт
	Обработка = Параметры.Обработка;
	СтрокаТаблицы1С = Параметры.СтрокаТаблицы1С;
	Элемент = СтрокаТаблицы1С.Номенклатура;
	Обработка = Параметры.Обработка;
	ТипЦен = Обработка.ТипЦен;
	ТипЦенЗакупочнаяЦена = Обработка.ТипЦенЗакупочнаяЦена;
	ТипЦенСтараяЦена = Обработка.ТипЦенСтараяЦена;
	СтруктураПеременных = Параметры.СтруктураПеременных;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		СтрокаТаблицы1С.Price = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,Элемент,ТипЦен,СтрокаТаблицы1С.ХарактеристикаНоменклатуры);
		СтрокаТаблицы1С.primary_price = СтрокаТаблицы1С.Price;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенЗакупочнаяЦена) Тогда
		СтрокаТаблицы1С.purchase_price = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,Элемент,ТипЦенЗакупочнаяЦена,СтрокаТаблицы1С.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенСтараяЦена) Тогда
		СтрокаТаблицы1С.compare_price = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,Элемент,ТипЦенСтараяЦена,СтрокаТаблицы1С.ХарактеристикаНоменклатуры);
		
		Если СтрокаТаблицы1С.compare_price <= СтрокаТаблицы1С.Price Тогда
			СтрокаТаблицы1С.compare_price = 0;
		КонецЕсли;
	КонецЕсли;
	
	//Остатки по вариантам расчитываем таким образом: если указана характеристика -- то ставим остаток по характеристике.
	//Если характеристика не указана -- то проверяем. Если вариант у номенклатуры основной -- выгружаем остаток по номенклатуре полностью
	Если ЗначениеЗаполнено(СтрокаТаблицы1С.ХарактеристикаНоменклатуры) Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("НоменклатураСсылка",СтрокаТаблицы1С.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаСсылка",СтрокаТаблицы1С.ХарактеристикаНоменклатуры);
		МасНайдСтрокаОстатков = СтруктураПеременных.ТаблицаОстатковПоНоменклатуреИХарактеристикам.НайтиСтроки(СтруктураПоиска);
		
		Если МасНайдСтрокаОстатков.Количество() = 0 Тогда
			СтрокаТаблицы1С.count = 0;
		ИНаче
			СтрокаТаблицы1С.count = Цел(МасНайдСтрокаОстатков[0].Остаток);
		КонецеСли;
	Иначе//Если СтрокаТаблицы1С.Ссылка = СтрокаТаблицы1С.Владелец.ОсновнойВариант Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("НоменклатураСсылка",СтрокаТаблицы1С.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаСсылка",СтрокаТаблицы1С.ХарактеристикаНоменклатуры);
		МасНайдСтрокаОстатков = СтруктураПеременных.ТаблицаОстатковПоНоменклатуреИХарактеристикам.НайтиСтроки(СтруктураПоиска);
		
		Если МасНайдСтрокаОстатков.Количество() = 0 Тогда
			СтрокаТаблицы1С.count = 0;
		ИНаче
			СтрокаТаблицы1С.count = ЦЕЛ(МасНайдСтрокаОстатков[0].Остаток);
		КонецеСли;
	//Иначе
	//	СтрокаТаблицы1С.count = 0;
	Конецесли;
	
	//Если СтрокаТаблицы1С.Виртуальный = 1 Тогда//У виртуальных характеристик остатки не ведутся
	//СтрокаТаблицы1С.count = NULL;
	//Иначе//список артикулов
	Если Обработка.ВыгружатьТолькоХарактеристикиСОстатками и СтрокаТаблицы1С.count <=0 Тогда
		СтрокаТаблицы1С.ДоступенДляЗаказа = 0;
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура Номенклатура_ПереборкаСтрокТаблицы1С(Параметры) Экспорт
	Обработка = Параметры.Обработка;
	СтрокаТаблицы1С = Параметры.СтрокаТаблицы1С;
	ТипЦен = Параметры.Обработка.ТипЦен;
	ТипЦенСтараяЦена = Параметры.Обработка.ТипЦенСтараяЦена;
	Обработка = Параметры.Обработка;
	СтруктураПеременных = Параметры.СтруктураПеременных;
	
	Об = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьОбработкуПоСистемеУправленияСайтом(Обработка.НастройкаСайтаДляОбмена);
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		СтрокаТаблицы1С.Price = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,СтрокаТаблицы1С.Номенклатура,ТипЦен);
		СтруктураМинМаксЦен = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,СтрокаТаблицы1С.Номенклатура,ТипЦен,,Истина);
		СтрокаТаблицы1С.min_price = СтруктураМинМаксЦен.МинимальнаяЦена;
		СтрокаТаблицы1С.max_price = СтруктураМинМаксЦен.МаксимальнаяЦена;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ТипЦенСтараяЦена) Тогда
		СтрокаТаблицы1С.compare_price = CMS1C_ПроцедурыОбменаССайтомСервер.ВычислитьЦену(Обработка,СтрокаТаблицы1С.Номенклатура,ТипЦенСтараяЦена);
		
		Если СтрокаТаблицы1С.compare_price < СтрокаТаблицы1С.price Тогда
			СтрокаТаблицы1С.compare_price = 0;
		КонецЕсли;
	КонецЕсли;
	
	// СтрокаТаблицы1С.Currency = СтруктураПеременных.НаименованиеВалютыНаСайте;
	
	Если Обработка.ЕстьОтборПоСкладу Тогда
		НайдСтрокаОстатков = СтруктураПеременных.ТаблицаОстатковПоНоменклатуре.Найти(СтрокаТаблицы1С.Номенклатура,"НоменклатураСсылка");
		Если НайдСтрокаОстатков = Неопределено Тогда
			СтрокаТаблицы1С.count = 0;
		Иначе
			СтрокаТаблицы1С.count = Цел(НайдСтрокаОстатков.Остаток);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы1С.ТоварПомеченНаУдаление Тогда
		Если Обработка.ОставлятьСкрыватьПерекладыватьПомеченныеУдалять = 2 Тогда//Скрывать
			СтрокаТаблицы1С.Статус = 0;
		ИначеЕсли Обработка.ОставлятьСкрыватьПерекладыватьПомеченныеУдалять = 3 Тогда
			СтрокаТаблицы1С.category_id = NULL;
		ИначеЕсли Обработка.ОставлятьСкрыватьПерекладыватьПомеченныеУдалять = 4 Тогда
			СтрокаТаблицы1С.Удалять = Истина;
		КонецЕсли;
	Иначе
		Если Обработка.ОставлятьСкрыватьПерекладыватьПомеченныеУдалять = 2 Тогда
			СтрокаТаблицы1С.Статус =1;
		КонецЕсли;
	КонецЕсли;
	
	Если Обработка.СкрыватьТоварБезОстатка Тогда
		Если СтрокаТаблицы1С.count <=0 Тогда
			СтрокаТаблицы1С.Статус = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияСвойствОбъектов_РегистрСведений_ПередЗаписьюЭлементаИлиЗаписи1СЗагрузка(Параметры) Экспорт
	СтрокаТаблицыРезультатаСинхронизации = Параметры.СтрокаТаблицыРезультатаСинхронизации;
	Мен = Параметры.ТекущийОбъект;
	НастройкаСайтаДляОбмена = Параметры.Обработка.НастройкаСайтаДляОбмена;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыРезультатаСинхронизации.sku_id_сайт) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|CMS1C_ВариантыНоменклатуры.Ссылка
		|ИЗ
		|Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
		|ГДЕ
		|CMS1C_ВариантыНоменклатуры.НастройкаСайта = &НастройкаСайта
		|И CMS1C_ВариантыНоменклатуры.ID = &ID";
		Запрос.УстановитьПараметр("ID",СтрокаТаблицыРезультатаСинхронизации.sku_id_Сайт);
		Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайтаДляОбмена);
		
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Мен.Объект  = Выб.Ссылка;
			Мен.Номенклатура = Мен.Объект.Владелец.Владелец;
		КонецЕсли;
	Иначе
		Если ТипЗнч(мен.Объект) = Тип("СправочникСсылка.CMS1C_Номенклатура") Тогда
			Мен.Номенклатура = Мен.Объект.Владелец;
		КонецЕсли;
	Конецесли;
КонецПроцедуры

Процедура СинхронизироватьИндексы(Параметры) Экспорт
	МассивLastID = Неопределено;
	МассивСтрокРедактирования = Неопределено;
	Обработка = Параметры.Обработка;
	
	Параметры.Свойство("МассивLastID",МассивLastID);
	Параметры.Свойство("МассивСтрокРедактирования",МассивСтрокРедактирования);
	
	Если МассивLastID = Неопределено тогда
		МассивLastID = Новый Массив;
		Для Каждого ЭлементМассива из МассивСтрокРедактирования Цикл
			Если Не ЗначениеЗаполнено(ЭлементМассива.ДопКолонка) Тогда
				Продолжить;
			КонецЕсли;
			МассивLastID.Добавить(ЭлементМассива.ДопКолонка.ID_1С);
		КонецЦикла;
	Конецесли;
	
	МассивДляОтправки = Новый Массив;
	ids = "";
	Для Каждого ЭлементМассива из МассивLastID Цикл
		Если ЭлементМассива = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ids = ids+ Формат(ЭлементМассива,"ЧГ=")+",";
	КонецЦикла;
	
	Если СтрДлина(ids) <> 0 Тогда
		Если Параметры.Действие = "Добавление" Тогда
			Обработка.СтруктураПараметровСайта.Вставить("method","onAdd");
		Иначе
			Обработка.СтруктураПараметровСайта.Вставить("method","onUpdate");
		КонецЕсли;
		ids = Лев(ids,СтрДлина(ids)-1);
		Обработка.СтруктураПараметровСайта.Вставить("ids",ids);
		Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("searchIndex","",Обработка.Соединение,Обработка.СтруктураПараметровСайта);
	КонецЕсли;
КонецПроцедуры

Процедура ХарактеристикиНоменклатуры_УстановкаХарактеристик_ВместоВыполненияЭтапа(Параметры) Экспорт
	ТаблицаСайта = Параметры.СтруктураПеременных.shop_product_skus;
	СтруктураПеременных = Параметры.СтруктураПеременных;
	
	КопияТаблицыСайта = ТаблицаСайта.Скопировать();
	КопияТаблицыСайта.Свернуть("ID","");
	
	Запрос = новый Запрос();
	Запрос.текст = "ВЫБРАТЬ
	|	CMS1C_ВариантыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
	|ГДЕ
	|	CMS1C_ВариантыНоменклатуры.ID = &ID
	|	И CMS1C_ВариантыНоменклатуры.НастройкаСайта = &НастройкаСайта";
	Запрос.УстановитьПараметр("НастройкаСайта",Параметры.НастройкаСайтаДляОбмена);
	
	Для Каждого СтрТз из КопияТаблицыСайта Цикл
		Запрос.УстановитьПараметр("ID",СтрТз.ID);
		Выб = Запрос.Выполнить().Выбрать();
		Если не Выб.Следующий() Тогда
			продолжить;
		КонецЕсли;
		
		ТекВариант = Выб.Ссылка;
		
		Если ЗначениеЗаполнено(ТекВариант.ХарактеристикаНоменклатуры) Тогда
			Продолжить;
		Конецесли;
		
		Об = ТекВариант.ПолучитьОБъект();
		Об.УстановитьХарактеристикуНоменклатуры();
		Если ЗначениеЗаполнено(Об.ХарактеристикаНоменклатуры) Тогда
			об.Записать();
		Конецесли;
	КонецЦикла;
КонецПРоцедуры

Функция ВыгрузкаОстатков_ВместоВыполненияЗапроса1С(Параметры) Экспорт
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЕстьCMS1C_Склад",Истина);
	//СтруктураПоиска.Вставить("ЕстьВариантНоменклатуры",Истина);
	СтруктураПоиска.Вставить("ЕстьCMS1C_Номенклатура",Истина);
	СтруктураПеременных  = Параметры.СтруктураПеременных;
	Таблица1С = СтруктураПеременных.ТаблицаРезультатаЗапроса.Скопировать(СтруктураПоиска);
	
	
	массивИзмененийНоменклатуры = Параметры.МассивИзмененийНоменклатуры;
	
	Запрос = Новый Запрос();
	Запрос.Текст ="ВЫБРАТЬ
	|	CMS1C_ВариантыНоменклатуры.Владелец.ID КАК id,
	|	CMS1C_ВариантыНоменклатуры.ID КАК sku_id,
	|	CMS1C_Склады.ID КАК stock_id,
	|	ВЫБОР
	|		КОГДА CMS1C_ВариантыНоменклатуры.Владелец.ПометкаУдаления
	|				ИЛИ CMS1C_ВариантыНоменклатуры.Владелец.Владелец.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПомеченНаУдаление,
	|	0 КАК Остаток
	|ИЗ
	|	Справочник.CMS1C_Склады КАК CMS1C_Склады,
	|	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
	|ГДЕ
	|	(CMS1C_ВариантыНоменклатуры.Владелец В (&МассивИзмененийНоменклатуры)
	|			ИЛИ &ВсяНоменклатура)
	|	И CMS1C_ВариантыНоменклатуры.ID <> 0
	|	И CMS1C_ВариантыНоменклатуры.Владелец.ID <> 0";
	
	Запрос.УстановитьПараметр("МассивИзмененийНоменклатуры",МассивИзмененийНоменклатуры);
	Запрос.УстановитьПараметр("ВсяНоменклатура",МассивИзмененийНоменклатуры = Неопределено);
	тзВсеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТз из тзВсеОстатки Цикл
		ДобСтр = Таблица1с.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
	КонецЦикла;
	
	МасНайдНолевойID = Таблица1С.НайтиСтроки(Новый Структура("id",0));
	Для Каждого ЭлМасНайд из МасНайдНолевойID Цикл
		ЭлМасНайд.ID = ЭлМасНайд.CMS1C_Номенклатура.ID;
	КонецЦикла;
	
	МасНайдНолевойID = Таблица1С.НайтиСтроки(Новый Структура("sku_id",0));
	Для Каждого ЭлМасНайд из МасНайдНолевойID Цикл
		ЭлМасНайд.sku_ID = ЭлМасНайд.ВариантНоменклатуры.ID;
	КонецЦикла;
	
	МасНайдНолевойID = Таблица1С.НайтиСтроки(Новый Структура("stock_ID",0));
	Для Каждого ЭлМасНайд из МасНайдНолевойID Цикл
		ЭлМасНайд.stock_ID = ЭлМасНайд.СкладСайта.ID;
	КонецЦикла;
	
	Таблица1С.Свернуть("id,sku_id,stock_id,ПомеченНаУдаление","Остаток");
	Параметры.Вставить("Таблица1С",Таблица1С);
КонецФункции

Функция НайтиВалютуСайта(НаименованиеВалютыНаСайте) Экспорт
  //Запрос = Новый Запрос();
  //Запрос.Текст = "ВЫБРАТЬ
  //| CMS1C_СоответствияВалютВ1СИНаСайте.Валюта1С
  //|ИЗ
  //| РегистрСведений.CMS1C_СоответствияВалютВ1СИНаСайте КАК CMS1C_СоответствияВалютВ1СИНаСайте
  //|ГДЕ
  //| CMS1C_СоответствияВалютВ1СИНаСайте.НаименованиеВалютыНаСайте = &НаименованиеВалютыНаСайте
  //| И CMS1C_СоответствияВалютВ1СИНаСайте.НастройкаСайта = &НастройкаСайта";
  //Запрос.УстановитьПараметр("НаименованиеВалютыНаСайте",НаименованиеВалютыНаСайте);
  //Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайтаДляОбмена);
  //Выб = Запрос.Выполнить().Выбрать();
  //Если Выб.Следующий() Тогда
  // Возврат Выб.Валюта1С;
  //Конецесли;
  //
  //НайдВалюта = Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалютыНаСайте);
  //Если Не НайдВалюта.Пустая() ТОгда
  // Возврат НайдВалюта;
  //КонецЕсли;
  //
  //Если ЗначениеЗаполнено(ВалютаЗаказаПоУмолчанию)  Тогда
  // Возврат ВалютаЗаказаПоУмолчанию;
  //конецЕСли;
  //
  //Сообщить("Невозможно определить валюту сайта "+НаименованиеВалютыНаСайте);
  //Возврат НаименованиеВалютыНаСайте;
  
  Возврат Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалютыНаСайте);
  
 КонецФУнкции


//Загрузка заказов
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
//********************************
Процедура ЗагрузитьЗаказы(ПоказатьФормуВыбораЗаказов,ФормаЗаказов = Неопределено) Экспорт
	Обработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(НастройкаСайта, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат;
	КонецЕсли;
	
	
	НачалоАдресаСкрипта = Обработка.HTTPОбменАдресСайта;
	СтруктураАдреса = Обработка.РазобратьАдресСайта(НачалоАдресаСкрипта);	
	HTTPОбменПорт = СтруктураАдреса.HTTPПорт;
	HTTPОбменСервер = СтруктураАдреса.HTTPСервер;
	НачалоАдресаСкрипта = СтруктураАдреса.HTTPАдресСкрипта;   
	
	СтруктураАдресаFTP = Обработка.РазобратьАдресСайта(Обработка.FTPОбменАдресСайта);
	Сервер = СтруктураАдресаFTP.HTTPСервер;
	//ПутьКФайлам = СтруктураАдресаFTP.HTTPАдресСкрипта;
	
	
	
	Обработка.ОтобразитьСостояние("Сбор статусов...");
	//Статусы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT * FROM SC_order_status",Соединение,СтруктураПараметровСайта);	
	//Для каждого строкаСт из Статусы Цикл
	//	строкаСт.status_name_ru = СокрЛП(строкаСт.status_name_ru);
	//КонецЦикла;
	//Если ТипЗнч(Статусы)<> Тип("ТаблицаЗначений") Тогда
	//		Сообщить("Ошибка при получении таблицы статусов, возможно неверно заполнены настройки подключения или нет соединения с интернетом.");
	//	возврат;
	//КонецЕсли;
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	Если ПоказатьФормуВыбораЗаказов Тогда
		
		Если Формазаказов = Неопределено Тогда
			ФормаЗаказов = Справочники.CMS1C_НастройкиСайтов.ПолучитьФормуЗагрузкиЗаказов();	
			ФормаЗаказов.Заголовок = "Заказы на сайте";// со статусом: "+СтатусЗаказаНовый;
			ФормаЗаказов.Настройка = ЭтотОбъект;
		Конецесли;
		//ТаблицаЗаказов = ФормаЗаказов.Заказы;
		
	Иначе
		//ТаблицаЗаказов.Колонки.Добавить("Загружать",Новый ОписаниеТипов("Булево"));
		//ТаблицаЗаказов.Колонки.Добавить("ЕстьВ1С",Новый ОписаниеТипов("Булево"));
		//ТаблицаЗаказов.Колонки.Добавить("IDЗаказа",Новый ОписаниеТипов("Число"));
		//ТаблицаЗаказов.Колонки.Добавить("СтатусИД",Новый ОписаниеТипов("Число"));
		//ТаблицаЗаказов.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка,СправочникСсылка.CMS1C_СтатусыЗаказа"));
		//ТаблицаЗаказов.Колонки.Добавить("ДатаИВремя",Новый ОписаниеТипов("Дата"));
		//ТаблицаЗаказов.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты,Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число"));
		//ТаблицаЗаказов.Колонки.Добавить("СуммаДоставки",Новый ОписаниеТипов("Число"));
		//ТаблицаЗаказов.Колонки.Добавить("ТипДоставки",Новый ОписаниеТипов("СправочникСсылка.Номенклатура,Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("IDКонтрагента",Новый ОписаниеТипов("Число"));
		//ТаблицаЗаказов.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты,Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("Адрес",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("Комментарий",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("Почта",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("ТипОплаты",Новый ОписаниеТипов("Строка"));
		//
		//ТаблицаЗаказов.Колонки.Добавить("АдресДоставкиЗаказа",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("АдресОплатыЗаказа",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("АдресДоставкиКонтрагента",Новый ОписаниеТипов("Строка"));
		//ТаблицаЗаказов.Колонки.Добавить("АдресОплатыКонтрагента",Новый ОписаниеТипов("Строка"));		 
		//ТаблицаЗаказов.Колонки.Добавить("Телефон",Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;
	
	ТаблицаЗаказов = Обработка.ТаблицаЗаказов.ВыгрузитьКолонки();
	
	ТаблицаЗаказов.Колонки.Удалить("НомерСтроки");
	ТаблицаЗаказов.Колонки.Добавить("id_shop", Новый ОписаниеТипов("Число"));
	
	Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("ТаблицаЗаказов") <> Неопределено Тогда
		ТаблицаКолонокДоп = ЭтотОбъект.ТаблицаЗАказов.ВыгрузитьКолонки();
		Для Каждого ТекКолонка из ТаблицаКОлонокДОп Цикл
			Если ТаблицаЗаказов.Колонки.Найти(ТекКолонка.ИМя) = Неопределено Тогда
				ТаблицаЗаказов.Колонки.Добавить(ТекКолонка.Имя,ТекКолонка.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТаблицаЗаказов.Очистить();
	//ЗапросПоДоставке = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	//|	CMS1C_НоменклатураДоставки.Номенклатура КАК Номенклатура
	//|ИЗ
	//|	РегистрСведений.CMS1C_НоменклатураДоставки КАК CMS1C_НоменклатураДоставки
	//|ГДЕ
	//|	CMS1C_НоменклатураДоставки.НастройкаСайта = &НастройкаСайта
	//|	И &НаСайте ПОДОБНО ""%"" + CMS1C_НоменклатураДоставки.НаСайте + ""%""
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Номенклатура");
	
	ОбщаяТаблицаЗаказов = Новый ТаблицаЗначений;
	
	Если НастройкаСайта.СтатусыДляЗагрузки.Количество() = 0 Тогда
		Сообщить("Нет статусов для загрузки");
		Возврат;
	КонецЕсли;
	
	ЗапросПоКонтрагентам = Новый Запрос("ВЫБРАТЬ
	|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Контрагент
	|ИЗ
	|	РегистрСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте КАК CMS1C_СоответствияКонтрагентовВ1СИНаСайте
	|ГДЕ
	|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Номер = &Номер");
	
	Обработка.ОтобразитьСостояние("Сбор данных о заказах на сайте "+НастройкаСайта+"....");
	
	СтрокаОтбораСтатусов = "";
	Для Каждого СтрТз Из НастройкаСайта.СтатусыДляЗагрузки Цикл
		СтрокаОтбораСтатусов = СтрокаОтбораСтатусов +"'"+ СтрТз.СтатусЗаказа.ID+"',";
	КонецЦикла;
	
	СтрокаОтбораСтатусов = Лев(СтрокаОтбораСтатусов,СтрДлина(СтрокаОтбораСтатусов)-1);
	
	
	ТекДата = ТекущаяДата()-(НастройкаСайта.ВыборкаЗаказовЧасов*60*60);
	
	//Заказы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT * FROM shop_order WHERE state_ID IN ("+СтрокаОтбораСтатусов+") AND create_datetime >='"+Строка(Формат(ТекущаяДата()-(ВыборкаЗаказовЧасов*60*60),"ДФ='yyyy-MM-dd HH:mm:ss'"))+"' ",Соединение,СтруктураПараметровСайта);
	//Заказы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT * FROM shop_order WHERE state_ID IN ("+СтрокаОтбораСтатусов+") AND "+
	//"create_datetime >='"+Строка(Формат(ТекДата,"ДФ='yyyy-MM-dd HH:mm:ss'; ДП="))+"' ",Соединение,СтруктураПараметровСайта);
	
	Заказы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT * FROM shop_order WHERE  "+
	"create_datetime >='"+Строка(Формат(ТекДата,"ДФ='yyyy-MM-dd HH:mm:ss'; ДП="))+"' ",Соединение,СтруктураПараметровСайта);

	
	//КопияЗаказов = Заказы.Скопировать();
	ТаблицаIDКонтрагентов = Заказы.Скопировать(,"contact_id");
	ТаблицаIDКонтрагентов.Свернуть("contact_id");
	МассивIDКонтрагентов = ТаблицаIDКонтрагентов.ВыгрузитьКолонку("contact_id");
	
	ТаблицаIDЗаказов = Заказы.Скопировать(,"id");
	ТаблицаIDЗАказов.Свернуть("id");
	МассивIDЗАказов = ТаблицаIDЗаказов.ВыгрузитьКолонку("id");
	
	СтрокаОтбораКонтактов = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьСтрокуОтборовПоПолюДляСайта(МассивIDКонтрагентов,"contact_id",,Истина);
	ТекстЗапроса  = "SELECT * FROM wa_contact_data"+СтрокаОтбораКонтактов;
	Таблица_wa_contact_data = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	
	ТекстЗапроса  = "SELECT * FROM wa_contact_emails"+СтрокаОтбораКонтактов;
	Таблица_wa_contact_emails = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	
	СтрокаОтбораКонтактов = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьСтрокуОтборовПоПолюДляСайта(МассивIDКонтрагентов,"id",,Истина);
	ТекстЗапроса  = "SELECT * FROM wa_contact"+СтрокаОтбораКонтактов;
	Таблица_wa_contact = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	
	
	//Доработки+
	
	//АК
	//НЗ = РегистрыСведений.CMS1C_СоответствияКодаИНазванияСтраны.СоздатьНаборЗаписей();
	//НЗ.Прочитать();
	//ТаблицаСоответствийКодНазваниеСтраны = НЗ.Выгрузить();
	ТаблицаСоответствийКодНазваниеСтраны = Новый ТаблицаЗначений();
	ТаблицаСоответствийКодНазваниеСтраны.Колонки.Добавить("КодСтраны");
	ТаблицаСоответствийКодНазваниеСтраны.Колонки.Добавить("НаименованиеСтраны");
	СтрокаДоб = ТаблицаСоответствийКодНазваниеСтраны.Добавить();
	СтрокаДоб.КодСтраны = "rus";
	СтрокаДоб.НаименованиеСтраны = "Россия";
	//
	//
	ТекстЗапроса  = "SELECT * FROM wa_region";
	Таблица_wa_region = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	//Доработки-
	
	
	СтрокаОтбораЗаказов = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьСтрокуОтборовПоПолюДляСайта(ТаблицаIDЗаказов.ВыгрузитьКолонку("id"),"order_id",,Истина);
	ТекстЗапроса  = "SELECT * FROM shop_order_params"+СтрокаОтбораЗаказов;
	Таблица_shop_order_params = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	
	
	
	//СтрокаОтбораЗаказов = CMS1C_ПроцедурыОбменаССайтомСервер.ПолучитьСтрокуОтборовПоПолюДляСайта(ТаблицаIDЗаказов.ВыгрузитьКолонку("id"),"id",,Истина);
	//ТекстЗапроса  = "SELECT * FROM shop_plugin_settings"+СтрокаОтбораЗаказов;
	//Таблица_shop_plugin_settings = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
	
	Если НЕ ОбщаяТаблицаЗаказов.Колонки.Количество() Тогда
		ОбщаяТаблицаЗаказов = Заказы.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Заказы,ОбщаяТаблицаЗаказов);
	КонецЕсли;
	
	Обработка.ОткрытьИндикатор("Загрузка заказов ",Заказы.Количество()); 
	
	НС = 0;
	Для каждого ст Из Заказы Цикл
		
		НС = НС + 1;
		Обработка.ИзменитьОтображениеИндикатора(НС,"Загрузка заказа № "+ ст.ID);
		//Таблица_shop_order_params
		//shipping_id = ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_id"))
		//shipping_rate_id
		//shipping_plugin
		shipping_name = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_name"),"value",Таблица_shop_order_params);
		//shipping_est_delivery
		//payment_id
		payment_name = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"payment_name"),"value",Таблица_shop_order_params);
		
		//payment_plugin
		//storefront
		//ip
		//user_agent
		shipping_addresscity = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_address.city"),"value",Таблица_shop_order_params);
		shipping_addresszip = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_address.zip"),"value",Таблица_shop_order_params);
		shipping_addressstreet = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_address.street"),"value",Таблица_shop_order_params);
		shipping_addressregion = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_address.region"),"value",Таблица_shop_order_params);
		shipping_addresscountry = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"shipping_address.country"),"value",Таблица_shop_order_params);
		
		shipping_addressregion  =Обработка.ПолучитьЗначениеТаблицы(Новый структура("country_iso3,code",shipping_addresscountry,shipping_addressregion),"name",Таблица_wa_region);
		shipping_addresscountry = Обработка.ПолучитьЗначениеТаблицы(Новый структура("КодСтраны,",shipping_addresscountry,"shipping"),"НаименованиеСтраны",ТаблицаСоответствийКодНазваниеСтраны);
		
		
		billing_addresscountry = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"billing_address.country"),"value",Таблица_shop_order_params);
		billing_addressregion = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"billing_address.region"),"value",Таблица_shop_order_params);
		billing_addressstreet = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"billing_address.street"),"value",Таблица_shop_order_params);
		billing_addresscity = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"billing_address.city"),"value",Таблица_shop_order_params);
		billing_addresszip = Обработка.ПолучитьЗначениеТаблицы(Новый структура("order_id,name",ст.id,"billing_address.zip"),"value",Таблица_shop_order_params);
		
		
		//Таблица_wa_contact_data
		//"phone";"work";"123456";"0"
		//"inn";;"ИНН";"0"
		//"address:street";"shipping";"ул. Бакулина 13";"0"
		//"address:city";"shipping";"Харьков";"0"
		//"address:indeks";"billing";"6464646";"1"
		//"address:region";"shipping";"21";"0"
		//"address:country";"billing";"ukr";"1"
		//"address:zip";"billing";"61123";"1"
		//"address:country";"shipping";"ukr";"0"
		//"address:region";"billing";"21";"1"
		//"address:zip";"shipping";"61123";"0"
		//"phone";"mobile";"0501122334";"1"
		//"phone";"ещё какой-то";"987654321";"2"
		//"im";"skype";"skype";"0"
		//"im";"Мгновеное";"Мгновеное_Сообщение";"1"
		//"address:city";"billing";"Харьков";"1"
		//"address:street";"billing";"ул. Бакулина 13";"1"
		//"kpp";;"КПП_КПП";"0"
		//"url";"work";"http://website.ru";"0"
		//"url";"Другой веб";"http://anothersite.ru";"1"
		
		//+++ZEZA
		НомерБонуснойКарты = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id, field",ст.contact_id, "bonusnaya-karta"),"value",Таблица_wa_contact_data);
		АдресДоставкиДополнительно = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id, field",ст.contact_id, "address:kommentariy-kak"),"value",Таблица_wa_contact_data);
		ДополнительнаяИнформация = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id, field",ст.contact_id, "dopolnitelnaya-"),"value",Таблица_wa_contact_data);
		//---ZEZA
		
		Телефон = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field",ст.contact_id,"phone"),"value",Таблица_wa_contact_data);
		inn = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field",ст.contact_id,"inn"),"value",Таблица_wa_contact_data);
		addressstreetshipping = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:street","shipping"),"value",Таблица_wa_contact_data);
		addresscityshipping = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:city","shipping"),"value",Таблица_wa_contact_data);
		addressregionshipping = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:region","shipping"),"value",Таблица_wa_contact_data);
		addresscountryshipping = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:country","shipping"),"value",Таблица_wa_contact_data);
		addresszipshipping = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:zip","shipping"),"value",Таблица_wa_contact_data);
		
		addressstreetbilling = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:street","billing"),"value",Таблица_wa_contact_data);
		addresscitybilling = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:city","billing"),"value",Таблица_wa_contact_data);
		addressregionbilling = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:region","billing"),"value",Таблица_wa_contact_data);
		addresscountrybilling = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:country","billing"),"value",Таблица_wa_contact_data);
		addresszipbilling = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id,field,ext",ст.contact_id,"address:zip","billing"),"value",Таблица_wa_contact_data);
		
		
		//Таблица_wa_contact
		//НаименованиеПокупателя = ПолучитьЗначениеТаблицы(Новый структура("id",ст.contact_id),"name",Таблица_wa_contact);
		ФамилияПокупателя = Обработка.ПолучитьЗначениеТаблицы(Новый структура("id",ст.contact_id),"lastname",Таблица_wa_contact);
		ОтчествоПокупателя = Обработка.ПолучитьЗначениеТаблицы(Новый структура("id",ст.contact_id),"middlename",Таблица_wa_contact);
		ИмяПокупателя = Обработка.ПолучитьЗначениеТаблицы(Новый структура("id",ст.contact_id),"firstname",Таблица_wa_contact);
		
		НаименованиеПокупателя = СокрЛП(ФамилияПокупателя);
		НаименованиеПокупателя = СокрЛП(НаименованиеПокупателя + " "+СокрЛП(ИмяПокупателя));
		НаименованиеПокупателя = СокрЛП(НаименованиеПокупателя + " " + СокрЛП(ОтчествоПокупателя));
		
		ЗапросЗаказа = Новый Запрос;
		ЗапросЗаказа.Текст = "ВЫБРАТЬ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Заказ как Ссылка,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Номер,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ТипОплаты
		|ИЗ
		|	РегистрСведений.CMS1C_ДополнительныеРеквизитыЗаказа КАК CMS1C_ДополнительныеРеквизитыЗаказа
		|ГДЕ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID = &ID
		|	И CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта = &НастройкаСайта";
		ЗапросЗаказа.УстановитьПараметр("ID",Число(СокрЛП(ст.ID)));
		ЗапросЗаказа.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		
		Результат = ЗапросЗаказа.Выполнить();
		Выборка = Результат.Выбрать();
		
		//
		СтрокаЗаказов = ТаблицаЗаказов.Добавить();
		
		//+++АК
		СтрокаЗаказов.НомерБонуснойКарты = НомерБонуснойКарты;
		СтрокаЗаказов.АдресДоставкиДополнительно = АдресДоставкиДополнительно;
		СтрокаЗаказов.ДополнительнаяИнформация = ДополнительнаяИнформация;
		//---АК
		
		СТрокаЗаказов.НАстройкаСайта = НастройкаСайта;
		СтрокаЗаказов.Загружать = истина;
		СтрокаЗаказов.ЕстьВ1С = Булево(Выборка.Количество());
		СтрокаЗаказов.IDЗаказа = ст.ID;
		СтрокаЗаказов.IDСтатуса = ст.state_ID;
		Попытка
			СтрокаЗаказов.ID_shop = Число(СтрЗаменить(ст.ID_shop, Символы.НПП, ""));
		Исключение
		КонецПопытки;	
		СтрокаЗаказов.Статус = НайтиСтатусПоID(ст.state_ID);
		СтрокаЗаказов.ДатаЗаказа = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ст.create_datetime," ",""),":",""),"-",""));
		
		СтрокаЗаказов.Валюта = НайтиВалютуСайта(ст.currency);
		
		
		//Валюта = Справочники.Валюты.НайтиПоНаименованию(ст.currency_code);
		//Если  ЗначениеЗаполнено(Валюта) Тогда
		//	СтрокаЗаказов.Валюта= Валюта;	
		//ИначеЕсли ЗначениеЗаполнено(ВалютаПоУмолчанию) Тогда			
		//	СтрокаЗаказов.Валюта= ВалютаПоУмолчанию;	
		//Иначе	
		//	СтрокаЗаказов.Валюта= ст.currency_code;
		//	СтрокаЗаказов.Загружать= Ложь;
		//КонецЕсли; 
		СтрокаЗаказов.Сумма= ст.total;
		СтрокаЗаказов.СуммаДоставки= ст.shipping;
		
		//ДоставкаВЗаказе =?(ПустаяСтрока(ст.shippingServiceInfo),ст.shipping_type,ст.shippingServiceInfo);
		
		Если ЗначениеЗаполнено(shipping_name) Тогда
			//ЗапросПоДоставке.УстановитьПараметр("НастройкаСайта",Ссылка);
			// ЗапросПоДоставке.УстановитьПараметр("НаСайте",shipping_name);
			
			ТекТипДоставки = CMS1C_ПроцедурыОбменаССайтомСервер.ВернутьСсылкуНаНоменклатуруДоставки(СокрЛП(shipping_name),НастройкаСайта.Ссылка);
			
			Если НЕ ЗначениеЗаполнено(ТекТипДоставки) Тогда
				СтрокаЗаказов.Загружать= Ложь;
				СтрокаЗаказов.ТипДоставки= СокрЛП(shipping_name);
			Иначе
				СтрокаЗаказов.ТипДоставки = ТекТипДоставки;
			КонецЕсли;
			СтрокаЗаказов.ТипДоставкиНаСайте = СокрЛП(shipping_name);
		Конецесли;
		
		Если СтрокаЗаказов.ТипДоставки = Неопределено Тогда
			СтрокаЗаказов.ТипДоставки = "";
		Конецесли;
		
		СтрокаЗаказов.IDКонтрагента = Число(ст.contact_ID);
		ЗапросПоКонтрагентам.УстановитьПараметр("НастройкаСайта",НастройкаСайта.Ссылка);
		ЗапросПоКонтрагентам.УстановитьПараметр("Номер",СтрокаЗаказов.IDКонтрагента);
		Результат = ЗапросПоКонтрагентам.Выполнить().Выбрать(); 
		Если Результат.Следующий() Тогда
			СтрокаЗаказов.Контрагент= Результат.Контрагент;
		Иначе
			СтрокаЗаказов.Контрагент = НаименованиеПокупателя;
			//СтрокаЗаказов.Контрагент= ст.customer_firstname +" "+ ст.customer_lastname;
			СтрокаЗаказов.Загружать= Ложь;
		КонецЕсли; 
		
		массивАдресаДоставкиКонтрагента = Новый Массив;
		массивАдресаДоставкиКонтрагента.Добавить(addresszipshipping);
		массивАдресаДоставкиКонтрагента.Добавить(addresscountryshipping);
		массивАдресаДоставкиКонтрагента.Добавить(addressregionshipping);
		массивАдресаДоставкиКонтрагента.Добавить(addresscityshipping);
		массивАдресаДоставкиКонтрагента.Добавить(addressstreetshipping); 
		
		массивАдресаОплатыКонтрагента = Новый Массив;
		массивАдресаОплатыКонтрагента.Добавить(addresszipbilling);
		массивАдресаОплатыКонтрагента.Добавить(addresscountrybilling);
		массивАдресаОплатыКонтрагента.Добавить(addressregionbilling);
		массивАдресаОплатыКонтрагента.Добавить(addresscitybilling);
		массивАдресаОплатыКонтрагента.Добавить(addressstreetbilling);
		
		массивАдресаДоставкиЗаказа = Новый Массив;
		массивАдресаДоставкиЗаказа.Добавить(shipping_addresszip);
		массивАдресаДоставкиЗаказа.Добавить(shipping_addresscountry);
		массивАдресаДоставкиЗаказа.Добавить(shipping_addressregion);
		массивАдресаДоставкиЗаказа.Добавить(shipping_addresscity);
		массивАдресаДоставкиЗаказа.Добавить(shipping_addressstreet);
		
		массивАдресаОплатыЗаказа = Новый Массив;
		массивАдресаОплатыЗаказа.Добавить(billing_addresszip);
		массивАдресаОплатыЗаказа.Добавить(billing_addresscountry);
		массивАдресаОплатыЗаказа.Добавить(billing_addressregion);
		массивАдресаОплатыЗаказа.Добавить(billing_addresscity);
		массивАдресаОплатыЗаказа.Добавить(billing_addressstreet);
		
		СтрокаЗаказов.АдресДоставки= Обработка.РазложитьМассивВАдрес(массивАдресаДоставкиЗаказа);//?(НЕ ПустаяСтрока(ст.shipping_zip),ст.shipping_zip,ст.billing_zip) +?(НЕ ПустаяСтрока(ст.shipping_zip)или НЕ ПустаяСтрока(ст.billing_zip),", ","")+?(НЕ ПустаяСтрока(ст.shipping_country),ст.shipping_country,ст.billing_country) +?(НЕ ПустаяСтрока(ст.shipping_country)или НЕ ПустаяСтрока(ст.billing_country),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_state),ст.shipping_state,ст.billing_state) +?(НЕ ПустаяСтрока(ст.shipping_state)или НЕ ПустаяСтрока(ст.billing_state),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_city),ст.shipping_city,ст.billing_city) +?(НЕ ПустаяСтрока(ст.shipping_city)или НЕ ПустаяСтрока(ст.billing_city),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_address),ст.shipping_address,ст.billing_address);
		СтрокаЗаказов.АдресОплаты = Обработка.РазложитьМассивВАдрес(массивАдресаОплатыЗаказа);
		//СтрокаЗаказов.АдресДоставкиКонтрагента= Обработка.РазложитьМассивВАдрес(массивАдресаДоставкиКонтрагента);//?(НЕ ПустаяСтрока(ст.shipping_zip),ст.shipping_zip,ст.billing_zip) +?(НЕ ПустаяСтрока(ст.shipping_zip)или НЕ ПустаяСтрока(ст.billing_zip),", ","")+?(НЕ ПустаяСтрока(ст.shipping_country),ст.shipping_country,ст.billing_country) +?(НЕ ПустаяСтрока(ст.shipping_country)или НЕ ПустаяСтрока(ст.billing_country),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_state),ст.shipping_state,ст.billing_state) +?(НЕ ПустаяСтрока(ст.shipping_state)или НЕ ПустаяСтрока(ст.billing_state),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_city),ст.shipping_city,ст.billing_city) +?(НЕ ПустаяСтрока(ст.shipping_city)или НЕ ПустаяСтрока(ст.billing_city),", ","")+ ?(НЕ ПустаяСтрока(ст.shipping_address),ст.shipping_address,ст.billing_address);
		//СтрокаЗаказов.АдресОплатыКонтрагента = Обработка.РазложитьМассивВАдрес(массивАдресаОплатыКонтрагента);
		
		СтрокаЗаказов.Комментарий= ст.comment;//ст.customers_comment;
		СтрокаЗаказов.Почта = Обработка.ПолучитьЗначениеТаблицы(Новый структура("contact_id",ст.contact_id),"email",Таблица_wa_contact_emails);
		СтрокаЗаказов.ТипОплаты = payment_name;//ст.payment_type; 
		СтрокаЗаказов.Телефон = Телефон;		 
		
		СтрокаЗаказов.ИндексДоставки = shipping_addresszip;
		СтрокаЗаказов.СтранаДоставки = shipping_addresscountry;
		СтрокаЗаказов.ГородДоставки = shipping_addresscity;
		СтрокаЗаказов.РегионДоставки = shipping_addressregion;
		СтрокаЗаказов.УлицаДоставки = shipping_addressstreet;
		
		Если НастройкаСайта.ПерезаписыватьКонтрагентовПриЗагрузкеЗаказов Тогда
			Если ТипЗнч(СтрокаЗаказов.Контрагент) = ТИп("СправочникСсылка.Контрагенты") Тогда
				ЗарегистрироватьКонтрагента(СтрокаЗаказов);
			Конецесли;
		КонецЕсли;
	КонецЦикла;  
	
	Обработка.ЗакрытьИндикатор();
	
	
	Если НЕ ТаблицаЗаказов.Количество() Тогда			
		Сообщить("За период с "+Строка(Формат(ТекущаяДата()-(НастройкаСайта.ВыборкаЗаказовЧасов*60*60),"ДФ='yyyy-MM-dd HH:mm:ss'"))+" заказов не найдено!",СтатусСообщения.Информация); 
		Обработка.SQLОтключиться(Соединение);	
		возврат;
	КонецЕсли; 
	
	Заказы = ОбщаяТаблицаЗаказов;
	
	Если ПоказатьФормуВыбораЗаказов Тогда
		//ФормаЗаказов.ТзЗаказовСайта.Загрузить(Заказы);
		//ФормаЗаказов.Открыть();
		
		//Для Каждого стрТз из
		
		//ДЛя Каждого ТекКолонка из ТаблицаЗаказов.Колонки Цикл
		//	Если ФормаЗаказов.Заказы.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
		//   	 ФОрмаЗаказов.Заказы.Колонки.Добавить(ТекКолонка.Имя,ТекКолонка.ТипЗначения);
		//	КонецЕсли;
		//КОнецЦикла;
		
		//УФ,ИмяТЗНаФорме,ТЗ
		ВывестиТаблицуНаФорму(ФормаЗаказов,"Заказы",ТаблицаЗаказов);
		
		Для Каждого СтрТз из ТаблицаЗаказов Цикл
			ДобСтр = ФормаЗаказов.ЗАказы.Добавить();
			ЗаполнитьЗначенияСвойств(ДобСтр,СтрТз);
		КонецЦИкла;
		//ФормаЗАказов.Открыть();
	Иначе
		//Рез = ТаблицаЗаказов.Скопировать(Новый Структура("ЕстьВ1С",Ложь));
		Рез = ТаблицаЗаказов.Скопировать();
	КонецЕсли;
	Если ТипЗнч(Рез)=Тип("ТаблицаЗначений") Тогда
		АК_ЗаписатьЗаказы(Рез,Заказы,Истина);
		ТаблицаЗаказов.Очистить();
	КонецЕсли; 
	Обработка.SQLОтключиться(Соединение);	
	
КонецПроцедуры

Процедура АК_ЗаписатьЗаказы(Рез,Заказы=Неопределено,Автообмен = Ложь) Экспорт
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Обработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(ОБработка, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат;
	КонецЕсли;
	
	ЗапросКешТовары = Новый Запрос();
	ЗапросКешТовары.Текст = "ВЫБРАТЬ
	                        |	Номенклатура.Ссылка,
	                        |	Номенклатура.id_tov,
	                        |	Номенклатура.ЕдиницаХраненияОстатков,
	                        |	Номенклатура.ОднаУпаковкаСодержит,
	                        |	Номенклатура.ЕдиницаХраненияОстатков.Вес,
	                        |	Номенклатура.Наименование
	                        |ИЗ
	                        |	Справочник.Номенклатура КАК Номенклатура
	                        |ГДЕ
	                        |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	СтруктурныеЕдиницы.Ссылка,
	                        |	СтруктурныеЕдиницы.id_TT,
	                        |	СтруктурныеЕдиницы.НомерТочки
	                        |ИЗ
	                        |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
							
	Результаты = ЗапросКешТовары.ВыполнитьПакет();
	ТабКешТовары = Результаты[0].Выгрузить();
	ТабКешТовары.Индексы.Добавить("id_tov");
	ТабКешТовары.Индексы.Добавить("Наименование");
	ТабКешТТ = Результаты[1].Выгрузить();
	ТабКешТТ.Индексы.Добавить("НомерТочки");
	
	/////Загрузим нужные заказы
	//Индикатор = Обработка.ПолучитьОбщуюФормуХодаНаКлиенте();
	//Индикатор.НаименованиеОбработкиДанных = "Загрузка заказов";
	//Индикатор.КомментарийОбработкиДанных  = "";
	//Индикатор.КомментарийЗначения         = "";
	//
	//Индикатор.МаксимальноеЗначение        = Рез.Количество();
	//Индикатор.Значение = 0;
	//Если Индикатор.МаксимальноеЗначение > 0 и ТипЗнч(Индикатор)<>Тип("Структура") Тогда
	//	Индикатор.Открыть();
	//КонецЕсли;
	Обработка.ОткрытьИндикатор("Загрузка заказов ",Заказы.Количество()); 
	ЗапросСменаСтатусов = "";
	ЗапросОбновлениеСтатусаВТабТоваров = "";
	КвоНовых = 0;
	НовыеЗаказы = Новый Массив;
	НС = 0;
	Для каждого Стр Из Рез Цикл
		НС = НС + 1;
		
		ТекОрганизацияДляЗаказов = Обработка.ПолучитьОрганизациюДляЗаказа(Стр.ТипОплаты);
		
		
		Обработка.ИзменитьОтображениеИндикатора(НС,"Загрузка заказа № "+ стр.IDЗаказа);
		//Если Автообмен Тогда
		//	Стр.Загружать = ПроверкаСтрокиЗаказаПриАвтообмене(Стр,Заказы);
		//КонецЕсли;
		//Если НЕ Стр.Загружать Тогда
		//	продолжить;	 
		//КонецЕсли;
		
		//Обновим регистр контрагентов сайта
		//Запись = РегистрыСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте.СоздатьМенеджерЗаписи();	
		//Запись.Контрагент = Стр.Контрагент;
		//Запись.НастройкаСайта = НастройкаСайта;
		//Запись.Номер = Стр.IDКонтрагента;
		//Запись.Записать(Истина);
		
		ТекстЗапроса = "SELECT * FROM shop_order_items WHERE order_id='"+Формат(Стр.IDЗаказа,"ЧН=0; ЧГ=")+"'";
		СтрокиЗаказа = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
		
		ТекстЗапроса = "SELECT * FROM shop_order WHERE id='"+Формат(Стр.IDЗаказа,"ЧН=0; ЧГ=")+"'";
		ТаблицаЗаказа = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
		СтрокаЗаказа = ТаблицаЗаказа[0];
		
		
		Для Каждого СтрТз из СтрокиЗаказа Цикл
			Если ЗначениеЗаполнено(СтрТз.parent_id) Тогда
				СтрокаТЗ = СтрокиЗаказа.Найти(СтрТз.parent_id,"id");
				//Тут с ней надо чё-то поделать ))))))
				СтрокаТз.price = Число(СтрокаТз.price) + Число(СтрТз.price);
			КонецЕсли;
		КонецЦикла;
		
		ЗапросЗаказа = Новый Запрос;
		ЗапросЗаказа.Текст = "ВЫБРАТЬ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Заказ КАК Ссылка,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Номер,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ТипОплаты
		|ИЗ
		|	РегистрСведений.CMS1C_ДополнительныеРеквизитыЗаказа КАК CMS1C_ДополнительныеРеквизитыЗаказа
		|ГДЕ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID = &ID
		|	И CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта = &НастройкаСайта";
		
		ЗапросЗаказа.УстановитьПараметр("ID",Стр.IDЗаказа);
		ЗапросЗаказа.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		
		Результат = ЗапросЗаказа.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда		
			НовыйЗаказ = Выборка.Ссылка;		
		Иначе
			НовыйЗаказ =Документы.ВебЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;                                              		
		
		Если НЕ ЗначениеЗаполнено(НовыйЗаказ) Тогда 
			НовыйЗаказ = Документы.ВебЗаказПокупателя.СоздатьДокумент();
		Иначе
			НовыйЗаказ = НовыйЗаказ.ПолучитьОбъект();
		КонецЕсли;
		// Заполнение шапки
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйЗаказ, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");
		//НовыйЗаказ.Организация =  ТекОрганизацияДляЗаказов;
		//НовыйЗаказ.ВалютаДокумента  = Стр.Валюта;
		//Если НовыйЗаказ.ЭтоНовый() или НастройкаСайта.ПерезаписыватьКонтрагентовПриЗагрузкеЗаказов Тогда
		//	НовыйЗаказ.Контрагент         = стр.Контрагент;
		//	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НовыйЗаказ);
		//	//УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(НовыйЗаказ,"ДоговорКонтрагента",НовыйЗаказ.ДоговорКонтрагента);
		//КонецЕсли;
		
		//Если (НЕ ЗначениеЗаполнено(НовыйЗаказ.ДоговорКонтрагента))
		//	И (ЗначениеЗаполнено(НовыйЗаказ.Контрагент))
		//	И (ЗначениеЗаполнено(НовыйЗаказ.Организация))
		//	Тогда
		//	НовыйЗаказ.ДоговорКонтрагента = CMS1C_ПроцедурыОбменаССайтомСервер.НайтиИлиСоздатьДоговорПоОрганизации(НовыйЗаказ.Контрагент,НовыйЗаказ.Организация,НастройкаСайта);
		//КонецеСли;
		
		//+++АК
		НовыйЗаказ.НомерБонуснойКарты = стр.НомерБонуснойКарты;
		НовыйЗаказ.АдресДоставкиДополнительно = стр.АдресДоставкиДополнительно;
		НовыйЗаказ.ДополнительнаяИнформация = стр.ДополнительнаяИнформация;
		//---АК
		
		НовыйЗаказ.Комментарий        = стр.Комментарий;
		НовыйЗаказ.АдресДоставки	  = стр.АдресДоставки;
		НовыйЗаказ.ФИОПокупателя	  = Стр.Контрагент;
		НовыйЗаказ.Телефон			  = Стр.Телефон;
		НовыйЗаказ.Email			  = Стр.Почта;
		Если ЗначениеЗаполнено(Стр.id_shop) Тогда
			СтрокаКеш = ТабКешТТ.Найти(Стр.id_shop, "НомерТочки");
			Если СтрокаКеш <> Неопределено Тогда
				НовыйЗаказ.ТорговаяТочка = СтрокаКеш.Ссылка;
			Иначе	
				НовыйЗаказ.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;	
		Иначе
			НовыйЗаказ.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЕсли;	
		//НовыйЗаказ.КурсВзаиморасчетов = ЗаполнениеДокументов.КурсДокумента(НовыйЗаказ,НовыйЗаказ.ВалютаДокумента); 
		//НовыйЗаказ.КратностьВзаиморасчетов = ЗаполнениеДокументов.КратностьДокумента(НовыйЗаказ, НовыйЗаказ.ВалютаДокумента);
		//НовыйЗаказ.СуммаВключаетНДС   = Ложь;
		НовыйЗаказ.СуммаДокумента     = стр.Сумма;
		//НовыйЗаказ.УчитыватьНДС       = Ложь;
		НовыйЗаказ.Дата				  = стр.ДатаЗаказа;
		//НовыйЗаказ.Номер            = стр.IDЗаказа;
		//НовыйЗаказ.Настройка        = Ссылка;
		НовыйЗаказ.ТипОплаты		  = стр.ТипОплаты;
		//УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(НовыйЗаказ);
		
		Если ЗначениеЗаполнено(НастройкаСайта.ПрефиксСайта) Тогда
			НовыйЗаказ.Номер = Обработка.ПолучитьНомерЗаказа(Формат(стр.IDЗаказа,"ЧГ="),НастройкаСайта.ПрефиксСайта);
		КонецЕсли;
		
		НовыйЗаказ.Товары.Очистить();
		НовыйЗаказ.Услуги.Очистить();
		//Вычислим скидку
		ИтогПоКорзинеЗаказа =0;
		Для каждого стрЗак Из СтрокиЗаказа Цикл
			ИтогПоКорзинеЗаказа = ИтогПоКорзинеЗаказа + (Число(стрЗак.Quantity)*Число(стрЗак.Price));
		КонецЦикла;	
		ИтогСоСкидкой =стр.Сумма-стр.СуммаДоставки;
		Скидка =  ИтогСоСкидкой/?(ИтогПоКорзинеЗаказа=0,1,ИтогПоКорзинеЗаказа);
		
		
		
		Для каждого стрЗак Из СтрокиЗаказа Цикл
			
			Если СтрЗак.type <> "product" Тогда
				Продолжить;
			КонецЕсли;
			
			product_ID = Число(стрЗак.product_ID);
			//sku_ID = Число(СтрЗак.sku_ID);
			//НаименованиеВариантаИНоменклатуры = СтрЗак.name;
			//АртикулНоменклатуры = СтрЗак.sku_code;
			
			////Ищем вариант. Не находим -- ищем товар. Не находим -- дасвидос
			//НайденныйВАриант = Обработка.найтиВариантНоменклатурыПоID(sku_ID,НастройкаСайта);
			//Если НайденныйВариант.Пустая() Тогда
			//	Сообщить("В справочнике ""Варианты номенклатуры"" не найден вариант "+sku_ID+" , из заказа № "+Стр.IDЗаказа);
			//	продолжить;
			//КонецЕсли;
			СтрокаКешТовар = ТабКешТовары.Найти(product_ID, "id_tov");
			НоваяСтрока = НовыйЗаказ.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаКешТовар.Ссылка;
			//НоваяСтрока.ХарактеристикаНоменклатуры = НайденныйВАриант.ХарактеристикаНоменклатуры;
			
			//Обработка.ПриИзмененииНоменклатурыТовары(НоваяСтрока,НовыйЗаказ);
			
			//+++ZEZA в попытке, т.к. пилю на горячую
			Попытка
				НоваяСтрока.Комментарий = стрЗак.comment;
			Исключение
			КонецПопытки;
			
			//
			НоваяСтрока.Цена                                = стрЗак.Price / ?(СтрокаКешТовар.ОднаУпаковкаСодержит = 0, 1, СтрокаКешТовар.ОднаУпаковкаСодержит);
			//НоваяСтрока.ПроцентСкидкиНаценки				= (1-Скидка)*100;
			НоваяСтрока.Количество                          = стрЗак.Quantity * ?(СтрокаКешТовар.ОднаУпаковкаСодержит = 0, 1, СтрокаКешТовар.ОднаУпаковкаСодержит);
			
			//
			НоваяСтрока.Масса = НоваяСтрока.Количество * СтрокаКешТовар.ЕдиницаХраненияОстатковВес;
			
			//
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			//ФормаЗаказа.ИзменениеСтрокиПрограммное(НоваяСтрока, "Количество");	
			//Обработка.ПриИзмененииКоличестваТовары(НоваяСтрока,НовыйЗаказ);
			
			
		КонецЦикла; 		
		//Проверим правильность распределения суммы
		СуммаВЗаказе = НовыйЗаказ.Товары.Итог("Сумма");
		
		//Погрешность = ИтогСоСкидкой-СуммаВЗаказе;
		//Если Погрешность<>0 и НовыйЗаказ.Товары.Количество() Тогда
		//	НоваяСтрока.Сумма = НоваяСтрока.Сумма+Погрешность;
		//	// Рассчитываем реквизиты табличной части.
		//	//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйЗаказ);
		//	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
		//	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, НовыйЗаказ, ПараметрыСеанса.ТекущийПользователь,,истина, ,истина,"Товары");
		//	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
		//КонецЕсли;
		
		Если Стр.СуммаДоставки>0 Тогда
			Если ТипЗнч(стр.ТипДоставки)=Тип("Строка") Тогда
				СтрокаКеш = ТабКешТовары.Найти(стр.ТипДоставки, "Наименование");
				Если СтрокаКеш <> Неопределено Тогда
					НомДоставки = СтрокаКеш.Ссылка;
				Иначе
					НомДоставки = Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;	
			Иначе
				НомДоставки = стр.ТипДоставки;
			КонецЕсли;
			
			Если НомДоставки.Пустая() Тогда
				Сообщить("В справочнике номенклатура не найдена услуга доставки "+стр.ТипДоставки);
			Иначе
				НовыйЗаказ.Услуги.Очистить();
				НоваяСтрока = НовыйЗаказ.Услуги.Добавить();
				НоваяСтрока.Количество                          = 1;
				НоваяСтрока.Номенклатура                        = НомДоставки;
				//Если ЗначениеЗаполнено(НомДоставки.наименованиеПолное) Тогда
				//	ТекСодержание = НомДоставки.наименованиеПолное;
				//Иначе
				//	ТекСодержание = НомДоставки.Наименование;
				//КонецЕсли;
				//НоваяСтрока.Содержание                          = ТекСодержание;
				НоваяСтрока.Цена                                = стр.СуммаДоставки;
				НоваяСтрока.Сумма                               = стр.СуммаДоставки;
				
				//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, НовыйЗаказ, "Реализация");
				//
				//// Рассчитываем реквизиты табличной части.
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйЗаказ);
				//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
			КонецЕсли;
		КонецЕсли; 
		флНовый = НовыйЗаказ.ЭтоНовый();
		Попытка
			НовыйЗаказ.Записать();
			Сообщить("Загружен заказ № "+стр.IDЗаказа);
		Исключение
			Сообщить("Не удалось загрузить заказ № "+стр.IDЗаказа+". Причина: "+ОписаниеОшибки());
			//Продолжить;
		КонецПопытки;
		
		Если флНовый Тогда
			//ТекСтатус = Справочники.CMS1C_СтатусыЗаказа.НайтиПоНаименованию(Стр.Статус,Истина);
			ТекСтатус = Стр.Статус;
			Если НЕ ЗначениеЗаполнено(ТекСтатус)ИЛИ ТипЗнч(текСтатус) <> ТИп("СправочникСсылка.CMS1C_СтатусыЗаказов") Тогда
				Сообщить("При попытке заполнить текущий статус заказа произошла ошибка: Статус ("+Стр.Статус+") не найден в справочнике статусов. Проверьте наличие именно такого наименования.");
			Иначе
				ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
				ЗаписьИзменения.Заказ = НовыйЗаказ.Ссылка;
				ЗаписьИзменения.Статус = ТекСтатус;
				ЗаписьИзменения.Период = Стр.ДатаЗаказа;
				ЗаписьИзменения.СинхронизироватьССайтом = Истина;
				ЗаписьИзменения.СинхронизированССайтом = Истина;
				ЗаписьИзменения.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если флНовый и НастройкаСайта.МенятьСтатусЗагруженногоЗаказа и ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке)
			И не НовыйЗаказ.ЭтоНовый()
			Тогда
			//ЗапросСменаСтатусов = ЗапросСменаСтатусов+ Символы.ПС+ "INSERT INTO SC_order_status_changelog (orderID,status_name,status_change_time,status_comment) values
			//|('"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"',
			//|'"+СокрЛП(СтатусЗаказаВОбработке)+"',
			//|'"+СокрЛП(Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH:mm:ss'"))+"',
			//|'"+СокрЛП(КомментарийКСменеСтатуса)+"')";
			//ЗапросСменаСтатусов = ЗапросСменаСтатусов + Символы.ПС + "INSERT INTO shop_order_log "
			//+"(order_id,contact_id,action_id,datetime,before_state_id,after_state_id,text) "
			//+"values ("+
			//"'"++"'
			Если Стр.Статус <> НастройкаСайта.СтатусЗаказаВОбработке
				И ТИпЗнч(Стр.Статус) = ТИп("СправочникСсылка.CMS1C_СтатусыЗаказов")
				Тогда
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "order_id";
				ДобСтр.Значение = "'"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "contact_id";
				ДобСтр.Значение = "'"+СокрЛП(Формат(стр.IDКонтрагента,"ЧН=0; ЧГ=0"))+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "action_id";
				ДобСтр.Значение = "'"+"process"+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "datetime";
				ДобСтр.Значение = "'"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "before_state_id";
				ДобСтр.Значение = "'"+Стр.Статус.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "after_state_id";
				ДобСтр.Значение = "'"+НастройкаСайта.СтатусЗаказаВОбработке.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "text";
				ДобСтр.Значение = "''";
				
				ТекстЗапроса = Обработка.ПолучитьТекстЗапросаИзТаблицыПолей(Обработка.ТаблицаДляСоставленияЗапроса,"load","shop_order_log");
				
				СтрокаТаблицыТекстов = Обработка.ТаблицаТекстовЗапросовНаВыполнение.Добавить();
				СтрокаТаблицыТекстов.ТекстЗапроса = ТекстЗапроса;
				СтрокаТаблицыТекстов.ВидЗапроса = "load";
				
				
				////Теперь в таблице заказов меняем состояние
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "state_id";
				ДобСтр.Значение = "'"+НастройкаСайта.СтатусЗаказаВОбработке.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "update_datetime";
				ДобСтр.Значение = "'"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"'";
				
				ТекстЗапроса = Обработка.ПолучитьТекстЗапросаИзТаблицыПолей(Обработка.ТаблицаДляСоставленияЗапроса,"loadu","shop_order");
				ТекстЗапроса = ТекстЗапроса + " WHERE id = '"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"'";
				СтрокаТаблицыТекстов = обработка.ТаблицаТекстовЗапросовНаВыполнение.Добавить();
				СтрокаТаблицыТекстов.ТекстЗапроса = ТекстЗапроса;
				СтрокаТаблицыТекстов.ВидЗапроса = "loadu";
				
				КвоНовых= КвоНовых+1;
				НовыеЗаказы.Добавить(НовыйЗаказ.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		
		Если Не НовыйЗаказ.ЭтоНовый() Тогда
			МенеджерЗаписиДопРеквизитовЗаказа = РегистрыСведений.CMS1C_ДополнительныеРеквизитыЗаказа.СоздатьМенеджерЗаписи();
			МенеджерЗаписиДопРеквизитовЗаказа.Заказ = НовыйЗаказ.Ссылка;
			МенеджерЗаписиДопРеквизитовЗаказа.НастройкаСайта = НастройкаСайта;
			МенеджерЗаписиДопРеквизитовЗаказа.Номер = СокрЛП(стр.IDЗаказа);
			МенеджерЗаписиДопРеквизитовЗаказа.ID = стр.IDЗаказа;
			МенеджерЗаписиДопРеквизитовЗаказа.ТипОплаты = СокрЛП(стр.ТипОплаты);
			МенеджерЗаписиДопРеквизитовЗаказа.ТипДоставки = СокрЛП(Стр.ТипДоставкиНаСайте);
			МенеджерЗаписиДопРеквизитовЗаказа.Записать();
		КонецЕсли;
		
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаАдресДоставки,СокрЛП(Стр.Адрес));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаТипДоставки,Стр.ТипДоставки);
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаКомментарийЗаказчика,СокрЛП(Стр.Комментарий));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаЭлАдрес,СокрЛП(Стр.Почта));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаТелефон,СокрЛП(Стр.Телефон));
		
		Если НастройкаСайта.МетодРезервированияЗаказов > 0 Тогда
			CMS1C_ПроцедурыОбменаССайтом.СоздатьРезервПоЗаказу(НовыйЗаказ,НастройкаСайта);
		Конецесли;
		
		//Если НастройкаСайта.РезервироватьИПроводитьЗаказы Тогда
		//	Если НовыйЗаказ.Проведен Тогда
		//   	 НовыйЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения,РежимПроведенияДокумента.Неоперативный);	
		//	КонецЕсли;
		//	
		//	Если НовыйЗаказ.ПометкаУдаления Тогда
		//   	 НовыйЗаказ.УстановитьПометкуУдаления(ЛОжь);
		//	Конецесли;
		//	
		//	Попытка
		//   	 
		//   	 БылаДата = НовыйЗаказ.Дата;
		//   	 НовыйЗаказ.Дата = ТекущаяДата();
		//   	 ОбособленныйУчет = ЗначениеЗаполнено(НовыйЗаказ.ДоговорКонтрагента)
		//   	 И НовыйЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		//   	 СтруктураПараметров = Новый Структура;
		//   	 СтруктураПараметров.Вставить("Заказ",НовыйЗаказ);
		//   	 СтруктураПараметров.Вставить("РезервироватьПоСериям",ЛОЖь);
		//   	 СтруктураПараметров.Вставить("ОбособленныйУчет",ОбособленныйУчет);
		//   	 СтруктураПараметров.Вставить("Авторазмещение",Истина);
		//   	 СтруктураПараметров.Вставить("Авторезервирование",Истина);			
		//   	 СтруктураПараметров.Вставить("ВидимостьСерии",     Ложь);
		//   	 СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаНаСкладахПотомВЗаказахПоставщикам);
		//   	 
		//   	 УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(СтруктураПараметров, НовыйЗаказ.Товары, НовыйЗаказ.ВозвратнаяТара);
		//   	 НовыйЗаказ.Дата = БылаДата;
		//   	 НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		//   	 
		//   	 Сообщить("Проведен заказ № "+стр.IDЗаказа);
		//   	 
		//	Исключение
		//   	 
		//   	 Сообщить("Не удалось зарезервировать и провести заказ № "+стр.IDЗаказа);
		//   	 Сообщить(ОписаниеОшибки());
		//	КонецПопытки;
		//КонецЕсли;
	КонецЦикла; 	
	
	
	Если НастройкаСайта.МенятьСтатусЗагруженногоЗаказа Тогда
		Обработка.ОтобразитьСостояние("Смена статуса загруженных заказов на сайте....");
		Если КвоНовых>0 Тогда
			//Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("loadu",ЗапросОбновлениеСтатусаВТабТоваров,Соединение,СтруктураПараметровСайта);
			//Если Результат<КвоНовых Тогда
			//	
			//	Сообщить("Количество обновленных статусов на сайте "+Результат+" меньше, чем количество загруженых заказов ("+КвоНовых+")...Проверьте установленные в 1с статусы.");
			//	
			//КонецЕсли;		 
			//Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("load",ЗапросСменаСтатусов,Соединение,СтруктураПараметровСайта);		
			Обработка.ВЫполнитьЗапросы();
			Для каждого Заказ Из НовыеЗаказы Цикл  
				ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
				ЗаписьИзменения.Заказ = Заказ.Ссылка;
				ЗаписьИзменения.Статус = НастройкаСайта.СтатусЗаказаВОбработке;
				
				ТекстСообщения =  ?(ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияКСменеСтатусаНаСайте),НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияКСменеСтатусаНаСайте,НастройкаСайта.ТекстУведомления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Получатель}",Заказ.Контрагент.Наименование);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Статус}",НастройкаСайта.СтатусЗаказаВОбработке);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Комментарий}","");
				
				ЗаписьИзменения.ТекстСообщения = ТекстСообщения;
				ЗаписьИзменения.Период = ТекущаяДата();
				ЗаписьИзменения.СинхронизироватьССайтом = Истина;
				ЗаписьИзменения.СинхронизированССайтом = Истина;
				//ЗаписьИзменения.Записать(Истина);					
				//КонецЦикла; 
				//
				//
				Если НастройкаСайта.УведомлятьПоПочте И НастройкаСайта.СтатусЗаказаВОбработке.ОтправлятьПоПочтеПоУмолчанию Тогда
					ЗаписьИзменения.ОтправлятьПоПочтеКлиенту = Истина;
					//	Для каждого Заказ Из НовыеЗаказы Цикл  			 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	КонтактнаяИнформация.Представление
					|ИЗ
					|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
					|ГДЕ
					|	КонтактнаяИнформация.Объект = &Объект
					|	И КонтактнаяИнформация.Тип = &Тип
					|	И КонтактнаяИнформация.Вид = &Вид";
					Запрос.УстановитьПараметр("Объект",Заказ.Контрагент);
					Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					АдресПолучателя = "";
					Если Выборка.Следующий() Тогда
						АдресПолучателя = Выборка.Представление;		   	 
					КонецЕсли;                                            
					ТекстСообщения =  ?(ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияДляОтправленияПоПочте),НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияДляОтправленияПоПочте,НастройкаСайта.ТекстУведомления);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Получатель}",Заказ.Контрагент.Наименование);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Статус}",НастройкаСайта.СтатусЗаказаВОбработке);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Комментарий}","");
					
					РезультатОтправки = CMS1C_ПроцедурыОбменаССайтомСервер.ОтправитьСообщениеОСменеСтатуса(НастройкаСайта,Заказ.Контрагент.Наименование,АдресПолучателя,ТекстСообщения);
					Если РезультатОтправки Тогда
						ЗаписьИзменения.ОтправленПоПочтеКлиенту = Истина;
					КонецЕсли;
				КонецЕсли;
				ЗаписьИзменения.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//mind 2015-07-30 отключил загрузку статусов, чтобы побыстрее загрузка шла
	//ЗагрузитьСтатусы();
	
	//Если ТипЗнч(Индикатор)<>Тип("Структура") Тогда	
	//	Если Индикатор.Открыта() Тогда
	//		Индикатор.Закрыть();
	//	КонецЕсли;
	//КонецЕсли;
	Обработка.ЗакрытьИндикатор();
КонецПроцедуры

Процедура ЗаписатьЗаказы(Рез,Заказы=Неопределено,Автообмен = Ложь) Экспорт
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Обработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(ОБработка, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат;
	КонецЕсли;
	
	/////Загрузим нужные заказы
	//Индикатор = Обработка.ПолучитьОбщуюФормуХодаНаКлиенте();
	//Индикатор.НаименованиеОбработкиДанных = "Загрузка заказов";
	//Индикатор.КомментарийОбработкиДанных  = "";
	//Индикатор.КомментарийЗначения         = "";
	//
	//Индикатор.МаксимальноеЗначение        = Рез.Количество();
	//Индикатор.Значение = 0;
	//Если Индикатор.МаксимальноеЗначение > 0 и ТипЗнч(Индикатор)<>Тип("Структура") Тогда
	//	Индикатор.Открыть();
	//КонецЕсли;
	Обработка.ОткрытьИндикатор("Загрузка заказов ",Заказы.Количество()); 
	ЗапросСменаСтатусов = "";
	ЗапросОбновлениеСтатусаВТабТоваров = "";
	КвоНовых = 0;
	НовыеЗаказы = Новый Массив;
	НС = 0;
	Для каждого Стр Из Рез Цикл
		НС = НС + 1;
		
		ТекОрганизацияДляЗаказов = Обработка.ПолучитьОрганизациюДляЗаказа(Стр.ТипОплаты);
		
		
		Обработка.ИзменитьОтображениеИндикатора(НС,"Загрузка заказа № "+ стр.IDЗаказа);
		Если Автообмен Тогда
			Стр.Загружать = ПроверкаСтрокиЗаказаПриАвтообмене(Стр,Заказы);
		КонецЕсли;
		Если НЕ Стр.Загружать Тогда
			продолжить;	 
		КонецЕсли;
		
		//Обновим регистр контрагентов сайта
		Запись = РегистрыСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте.СоздатьМенеджерЗаписи();	
		Запись.Контрагент = Стр.Контрагент;
		Запись.НастройкаСайта = НастройкаСайта;
		Запись.Номер = Стр.IDКонтрагента;
		Запись.Записать(Истина);
		
		ТекстЗапроса = "SELECT * FROM shop_order_items WHERE order_id='"+Формат(Стр.IDЗаказа,"ЧН=0; ЧГ=")+"'";
		СтрокиЗаказа = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
		
		ТекстЗапроса = "SELECT * FROM shop_order WHERE id='"+Формат(Стр.IDЗаказа,"ЧН=0; ЧГ=")+"'";
		ТаблицаЗаказа = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта);
		СтрокаЗаказа = ТаблицаЗаказа[0];
		
		
		Для Каждого СтрТз из СтрокиЗаказа Цикл
			Если ЗначениеЗаполнено(СтрТз.parent_id) Тогда
				СтрокаТЗ = СтрокиЗаказа.Найти(СтрТз.parent_id,"id");
				//Тут с ней надо чё-то поделать ))))))
				СтрокаТз.price = Число(СтрокаТз.price) + Число(СтрТз.price);
			КонецЕсли;
		КонецЦикла;
		
		ЗапросЗаказа = Новый Запрос;
		ЗапросЗаказа.Текст = "ВЫБРАТЬ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Заказ КАК Ссылка,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Номер,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ТипОплаты
		|ИЗ
		|	РегистрСведений.CMS1C_ДополнительныеРеквизитыЗаказа КАК CMS1C_ДополнительныеРеквизитыЗаказа
		|ГДЕ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID = &ID
		|	И CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта = &НастройкаСайта";
		
		ЗапросЗаказа.УстановитьПараметр("ID",Стр.IDЗаказа);
		ЗапросЗаказа.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		
		Результат = ЗапросЗаказа.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда		
			НовыйЗаказ = Выборка.Ссылка;		
		Иначе
			НовыйЗаказ =Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;                                              		
		
		Если НовыйЗаказ.Пустая() Тогда 
			НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
		Иначе
			НовыйЗаказ = НовыйЗаказ.ПолучитьОбъект();
		КонецЕсли;
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйЗаказ, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");
		НовыйЗаказ.Организация =  ТекОрганизацияДляЗаказов;
		НовыйЗаказ.ВалютаДокумента  = Стр.Валюта;
		Если НовыйЗаказ.ЭтоНовый() или НастройкаСайта.ПерезаписыватьКонтрагентовПриЗагрузкеЗаказов Тогда
			НовыйЗаказ.Контрагент         = стр.Контрагент;
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НовыйЗаказ);
			//УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(НовыйЗаказ,"ДоговорКонтрагента",НовыйЗаказ.ДоговорКонтрагента);
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(НовыйЗаказ.ДоговорКонтрагента))
			И (ЗначениеЗаполнено(НовыйЗаказ.Контрагент))
			И (ЗначениеЗаполнено(НовыйЗаказ.Организация))
			Тогда
			НовыйЗаказ.ДоговорКонтрагента = CMS1C_ПроцедурыОбменаССайтомСервер.НайтиИлиСоздатьДоговорПоОрганизации(НовыйЗаказ.Контрагент,НовыйЗаказ.Организация,НастройкаСайта);
		КонецеСли;
		
		НовыйЗаказ.Комментарий        = стр.Комментарий;
		НовыйЗаказ.КурсВзаиморасчетов = ЗаполнениеДокументов.КурсДокумента(НовыйЗаказ,НовыйЗаказ.ВалютаДокумента); 
		НовыйЗаказ.КратностьВзаиморасчетов = ЗаполнениеДокументов.КратностьДокумента(НовыйЗаказ, НовыйЗаказ.ВалютаДокумента);
		НовыйЗаказ.СуммаВключаетНДС   = Ложь;
		НовыйЗаказ.СуммаДокумента     = стр.Сумма;
		НовыйЗаказ.УчитыватьНДС       = Ложь;
		НовыйЗаказ.Дата				  = стр.ДатаЗаказа;
		//НовыйЗаказ.Номер            = стр.IDЗаказа;
		//НовыйЗаказ.Настройка        = Ссылка;
		//НовыйЗаказ.ТипОплаты		  = стр.ТипОплаты;
		//УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(НовыйЗаказ);
		
		Если ЗначениеЗаполнено(НастройкаСайта.ПрефиксСайта) Тогда
			НовыйЗаказ.Номер = Обработка.ПолучитьНомерЗаказа(Формат(стр.IDЗаказа,"ЧГ="),НастройкаСайта.ПрефиксСайта);
		КонецЕсли;
		
		НовыйЗаказ.Товары.Очистить();
		НовыйЗаказ.Услуги.Очистить();
		//Вычислим скидку
		ИтогПоКорзинеЗаказа =0;
		Для каждого стрЗак Из СтрокиЗаказа Цикл
			
			ИтогПоКорзинеЗаказа = ИтогПоКорзинеЗаказа + (Число(стрЗак.Quantity)*Число(стрЗак.Price));
		КонецЦикла;	
		ИтогСоСкидкой =стр.Сумма-стр.СуммаДоставки;
		Скидка =  ИтогСоСкидкой/?(ИтогПоКорзинеЗаказа=0,1,ИтогПоКорзинеЗаказа);
		
		
		
		Для каждого стрЗак Из СтрокиЗаказа Цикл
			
			Если СтрЗак.type <> "product" Тогда
				Продолжить;
			КонецЕсли;
			
			product_ID = Число(стрЗак.product_ID);
			sku_ID = Число(СтрЗак.sku_ID);
			НаименованиеВариантаИНоменклатуры = СтрЗак.name;
			АртикулНоменклатуры = СтрЗак.sku_code;
			
			//Ищем вариант. Не находим -- ищем товар. Не находим -- дасвидос
			НайденныйВАриант = Обработка.найтиВариантНоменклатурыПоID(sku_ID,НастройкаСайта);
			Если НайденныйВариант.Пустая() Тогда
				Сообщить("В справочнике ""Варианты номенклатуры"" не найден вариант "+sku_ID+" , из заказа № "+Стр.IDЗаказа);
				продолжить;
			КонецЕсли;
			НоваяСтрока = НовыйЗаказ.Товары.Добавить();
			НоваяСтрока.Номенклатура = НайденныйВАриант.Владелец.Владелец;
			НоваяСтрока.ХарактеристикаНоменклатуры = НайденныйВАриант.ХарактеристикаНоменклатуры;
			
			Обработка.ПриИзмененииНоменклатурыТовары(НоваяСтрока,НовыйЗаказ);
			
			НоваяСтрока.Цена                                = стрЗак.Price;
			НоваяСтрока.ПроцентСкидкиНаценки				= (1-Скидка)*100;
			НоваяСтрока.Количество                          = стрЗак.Quantity;
			//ФормаЗаказа.ИзменениеСтрокиПрограммное(НоваяСтрока, "Количество");	
			Обработка.ПриИзмененииКоличестваТовары(НоваяСтрока,НовыйЗаказ);
			
			
		КонецЦикла; 		
		//Проверим правильность распределения суммы
		СуммаВЗаказе = НовыйЗаказ.Товары.Итог("Сумма");
		
		Погрешность = ИтогСоСкидкой-СуммаВЗаказе;
		Если Погрешность<>0 и НовыйЗаказ.Товары.Количество() Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма+Погрешность;
			// Рассчитываем реквизиты табличной части.
			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйЗаказ);
			//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, НовыйЗаказ, ПараметрыСеанса.ТекущийПользователь,,истина, ,истина,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
		КонецЕсли;
		
		Если Стр.СуммаДоставки>0 Тогда
			Если ТипЗнч(стр.ТипДоставки)=Тип("Строка") Тогда  
				НомДоставки = Справочники.Номенклатура.НайтиПоНаименованию(стр.ТипДоставки);
			Иначе
				НомДоставки = стр.ТипДоставки;
			КонецЕсли;
			
			Если НомДоставки.Пустая() Тогда
				Сообщить("В справочнике номенклатура не найдена услуга доставки "+стр.ТипДоставки);
			Иначе
				НовыйЗаказ.Услуги.Очистить();
				НоваяСтрока = НовыйЗаказ.Услуги.Добавить();
				НоваяСтрока.Количество                          = 1;
				НоваяСтрока.Номенклатура                        = НомДоставки;
				Если ЗначениеЗаполнено(НомДоставки.наименованиеПолное) Тогда
					ТекСодержание = НомДоставки.наименованиеПолное;
				Иначе
					ТекСодержание = НомДоставки.Наименование;
				КонецЕсли;
				НоваяСтрока.Содержание                          = ТекСодержание;
				НоваяСтрока.Цена                                = стр.СуммаДоставки;
				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, НовыйЗаказ, "Реализация");
				
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйЗаказ);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйЗаказ);
			КонецЕсли;
		КонецЕсли; 
		флНовый = НовыйЗаказ.ЭтоНовый();
		Попытка
			НовыйЗаказ.Записать();
			Сообщить("Загружен заказ № "+стр.IDЗаказа);
		Исключение
			Сообщить("Не удалось загрузить заказ № "+стр.IDЗаказа+". Причина: "+ОписаниеОшибки());
			//Продолжить;
		КонецПопытки;
		
		Если флНовый Тогда
			//ТекСтатус = Справочники.CMS1C_СтатусыЗаказа.НайтиПоНаименованию(Стр.Статус,Истина);
			ТекСтатус = Стр.Статус;
			Если НЕ ЗначениеЗаполнено(ТекСтатус)ИЛИ ТипЗнч(текСтатус) <> ТИп("СправочникСсылка.CMS1C_СтатусыЗаказов") Тогда
				Сообщить("При попытке заполнить текущий статус заказа произошла ошибка: Статус ("+Стр.Статус+") не найден в справочнике статусов. Проверьте наличие именно такого наименования.");
			Иначе
				ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
				ЗаписьИзменения.Заказ = НовыйЗаказ.Ссылка;
				ЗаписьИзменения.Статус = ТекСтатус;
				ЗаписьИзменения.Период = Стр.ДатаЗаказа;
				ЗаписьИзменения.СинхронизироватьССайтом = Истина;
				ЗаписьИзменения.СинхронизированССайтом = Истина;
				ЗаписьИзменения.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если флНовый и НастройкаСайта.МенятьСтатусЗагруженногоЗаказа и ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке)
			И не НовыйЗаказ.ЭтоНовый()
			Тогда
			//ЗапросСменаСтатусов = ЗапросСменаСтатусов+ Символы.ПС+ "INSERT INTO SC_order_status_changelog (orderID,status_name,status_change_time,status_comment) values
			//|('"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"',
			//|'"+СокрЛП(СтатусЗаказаВОбработке)+"',
			//|'"+СокрЛП(Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH:mm:ss'"))+"',
			//|'"+СокрЛП(КомментарийКСменеСтатуса)+"')";
			//ЗапросСменаСтатусов = ЗапросСменаСтатусов + Символы.ПС + "INSERT INTO shop_order_log "
			//+"(order_id,contact_id,action_id,datetime,before_state_id,after_state_id,text) "
			//+"values ("+
			//"'"++"'
			Если Стр.Статус <> НастройкаСайта.СтатусЗаказаВОбработке
				И ТИпЗнч(Стр.Статус) = ТИп("СправочникСсылка.CMS1C_СтатусыЗаказов")
				Тогда
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "order_id";
				ДобСтр.Значение = "'"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "contact_id";
				ДобСтр.Значение = "'"+СокрЛП(Формат(стр.IDКонтрагента,"ЧН=0; ЧГ=0"))+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "action_id";
				ДобСтр.Значение = "'"+"process"+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "datetime";
				ДобСтр.Значение = "'"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "before_state_id";
				ДобСтр.Значение = "'"+Стр.Статус.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "after_state_id";
				ДобСтр.Значение = "'"+НастройкаСайта.СтатусЗаказаВОбработке.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "text";
				ДобСтр.Значение = "''";
				
				ТекстЗапроса = Обработка.ПолучитьТекстЗапросаИзТаблицыПолей(Обработка.ТаблицаДляСоставленияЗапроса,"load","shop_order_log");
				
				СтрокаТаблицыТекстов = Обработка.ТаблицаТекстовЗапросовНаВыполнение.Добавить();
				СтрокаТаблицыТекстов.ТекстЗапроса = ТекстЗапроса;
				СтрокаТаблицыТекстов.ВидЗапроса = "load";
				
				
				////Теперь в таблице заказов меняем состояние
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "state_id";
				ДобСтр.Значение = "'"+НастройкаСайта.СтатусЗаказаВОбработке.ID+"'";
				
				ДобСтр = Обработка.ТаблицаДляСоставленияЗапроса.Добавить();
				Добстр.ИмяРеквизита = "update_datetime";
				ДобСтр.Значение = "'"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"'";
				
				ТекстЗапроса = Обработка.ПолучитьТекстЗапросаИзТаблицыПолей(Обработка.ТаблицаДляСоставленияЗапроса,"loadu","shop_order");
				ТекстЗапроса = ТекстЗапроса + " WHERE id = '"+СокрЛП(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0"))+"'";
				СтрокаТаблицыТекстов = обработка.ТаблицаТекстовЗапросовНаВыполнение.Добавить();
				СтрокаТаблицыТекстов.ТекстЗапроса = ТекстЗапроса;
				СтрокаТаблицыТекстов.ВидЗапроса = "loadu";
				
				КвоНовых= КвоНовых+1;
				НовыеЗаказы.Добавить(НовыйЗаказ.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		
		Если Не НовыйЗаказ.ЭтоНовый() Тогда
			МенеджерЗаписиДопРеквизитовЗаказа = РегистрыСведений.CMS1C_ДополнительныеРеквизитыЗаказа.СоздатьМенеджерЗаписи();
			МенеджерЗаписиДопРеквизитовЗаказа.Заказ = НовыйЗаказ.Ссылка;
			МенеджерЗаписиДопРеквизитовЗаказа.НастройкаСайта = НастройкаСайта;
			МенеджерЗаписиДопРеквизитовЗаказа.Номер = СокрЛП(стр.IDЗаказа);
			МенеджерЗаписиДопРеквизитовЗаказа.ID = стр.IDЗаказа;
			МенеджерЗаписиДопРеквизитовЗаказа.ТипОплаты = СокрЛП(стр.ТипОплаты);
			МенеджерЗаписиДопРеквизитовЗаказа.ТипДоставки = СокрЛП(Стр.ТипДоставкиНаСайте);
			МенеджерЗаписиДопРеквизитовЗаказа.Записать();
		КонецЕсли;
		
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаАдресДоставки,СокрЛП(Стр.Адрес));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаТипДоставки,Стр.ТипДоставки);
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаКомментарийЗаказчика,СокрЛП(Стр.Комментарий));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаЭлАдрес,СокрЛП(Стр.Почта));
		//ЗаполнитьДополнительныйРеквизитВЗаказе(НовыйЗаказ,Ссылка.СвойствоЗаказаТелефон,СокрЛП(Стр.Телефон));
		
		Если НастройкаСайта.МетодРезервированияЗаказов > 0 Тогда
			CMS1C_ПроцедурыОбменаССайтом.СоздатьРезервПоЗаказу(НовыйЗаказ,НастройкаСайта);
		Конецесли;
		
		//Если НастройкаСайта.РезервироватьИПроводитьЗаказы Тогда
		//	Если НовыйЗаказ.Проведен Тогда
		//   	 НовыйЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения,РежимПроведенияДокумента.Неоперативный);	
		//	КонецЕсли;
		//	
		//	Если НовыйЗаказ.ПометкаУдаления Тогда
		//   	 НовыйЗаказ.УстановитьПометкуУдаления(ЛОжь);
		//	Конецесли;
		//	
		//	Попытка
		//   	 
		//   	 БылаДата = НовыйЗаказ.Дата;
		//   	 НовыйЗаказ.Дата = ТекущаяДата();
		//   	 ОбособленныйУчет = ЗначениеЗаполнено(НовыйЗаказ.ДоговорКонтрагента)
		//   	 И НовыйЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		//   	 СтруктураПараметров = Новый Структура;
		//   	 СтруктураПараметров.Вставить("Заказ",НовыйЗаказ);
		//   	 СтруктураПараметров.Вставить("РезервироватьПоСериям",ЛОЖь);
		//   	 СтруктураПараметров.Вставить("ОбособленныйУчет",ОбособленныйУчет);
		//   	 СтруктураПараметров.Вставить("Авторазмещение",Истина);
		//   	 СтруктураПараметров.Вставить("Авторезервирование",Истина);			
		//   	 СтруктураПараметров.Вставить("ВидимостьСерии",     Ложь);
		//   	 СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаНаСкладахПотомВЗаказахПоставщикам);
		//   	 
		//   	 УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(СтруктураПараметров, НовыйЗаказ.Товары, НовыйЗаказ.ВозвратнаяТара);
		//   	 НовыйЗаказ.Дата = БылаДата;
		//   	 НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		//   	 
		//   	 Сообщить("Проведен заказ № "+стр.IDЗаказа);
		//   	 
		//	Исключение
		//   	 
		//   	 Сообщить("Не удалось зарезервировать и провести заказ № "+стр.IDЗаказа);
		//   	 Сообщить(ОписаниеОшибки());
		//	КонецПопытки;
		//КонецЕсли;
	КонецЦикла; 	
	
	
	Если НастройкаСайта.МенятьСтатусЗагруженногоЗаказа Тогда
		Обработка.ОтобразитьСостояние("Смена статуса загруженных заказов на сайте....");
		Если КвоНовых>0 Тогда
			//Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("loadu",ЗапросОбновлениеСтатусаВТабТоваров,Соединение,СтруктураПараметровСайта);
			//Если Результат<КвоНовых Тогда
			//	
			//	Сообщить("Количество обновленных статусов на сайте "+Результат+" меньше, чем количество загруженых заказов ("+КвоНовых+")...Проверьте установленные в 1с статусы.");
			//	
			//КонецЕсли;		 
			//Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("load",ЗапросСменаСтатусов,Соединение,СтруктураПараметровСайта);		
			Обработка.ВЫполнитьЗапросы();
			Для каждого Заказ Из НовыеЗаказы Цикл  
				ЗаписьИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьМенеджерЗаписи();
				ЗаписьИзменения.Заказ = Заказ.Ссылка;
				ЗаписьИзменения.Статус = НастройкаСайта.СтатусЗаказаВОбработке;
				
				ТекстСообщения =  ?(ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияКСменеСтатусаНаСайте),НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияКСменеСтатусаНаСайте,НастройкаСайта.ТекстУведомления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Получатель}",Заказ.Контрагент.Наименование);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Статус}",НастройкаСайта.СтатусЗаказаВОбработке);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Комментарий}","");
				
				ЗаписьИзменения.ТекстСообщения = ТекстСообщения;
				ЗаписьИзменения.Период = ТекущаяДата();
				ЗаписьИзменения.СинхронизироватьССайтом = Истина;
				ЗаписьИзменения.СинхронизированССайтом = Истина;
				//ЗаписьИзменения.Записать(Истина);					
				//КонецЦикла; 
				//
				//
				Если НастройкаСайта.УведомлятьПоПочте И НастройкаСайта.СтатусЗаказаВОбработке.ОтправлятьПоПочтеПоУмолчанию Тогда
					ЗаписьИзменения.ОтправлятьПоПочтеКлиенту = Истина;
					//	Для каждого Заказ Из НовыеЗаказы Цикл  			 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	КонтактнаяИнформация.Представление
					|ИЗ
					|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
					|ГДЕ
					|	КонтактнаяИнформация.Объект = &Объект
					|	И КонтактнаяИнформация.Тип = &Тип
					|	И КонтактнаяИнформация.Вид = &Вид";
					Запрос.УстановитьПараметр("Объект",Заказ.Контрагент);
					Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					АдресПолучателя = "";
					Если Выборка.Следующий() Тогда
						АдресПолучателя = Выборка.Представление;		   	 
					КонецЕсли;                                            
					ТекстСообщения =  ?(ЗначениеЗаполнено(НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияДляОтправленияПоПочте),НастройкаСайта.СтатусЗаказаВОбработке.ТекстСообщенияДляОтправленияПоПочте,НастройкаСайта.ТекстУведомления);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Получатель}",Заказ.Контрагент.Наименование);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Статус}",НастройкаСайта.СтатусЗаказаВОбработке);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Комментарий}","");
					
					РезультатОтправки = CMS1C_ПроцедурыОбменаССайтомСервер.ОтправитьСообщениеОСменеСтатуса(НастройкаСайта,Заказ.Контрагент.Наименование,АдресПолучателя,ТекстСообщения);
					Если РезультатОтправки Тогда
						ЗаписьИзменения.ОтправленПоПочтеКлиенту = Истина;
					КонецЕсли;
				КонецЕсли;
				ЗаписьИзменения.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьСтатусы();
	
	//Если ТипЗнч(Индикатор)<>Тип("Структура") Тогда	
	//	Если Индикатор.Открыта() Тогда
	//		Индикатор.Закрыть();
	//	КонецЕсли;
	//КонецЕсли;
	Обработка.ЗакрытьИндикатор();
КонецПроцедуры

Функция УстановитьСтатусЗаказаНаСайте(Статус,Заказ,КомментарийКСмене="",СинхронизироватьССайтом,ОтправлятьПоПочтеКлиенту) Экспорт
	СтруктураДляВозврата = Новый Структура();
	СтруктураДляВозврата.Вставить("СинхронизированССайтом",Ложь);
	СтруктураДляВозврата.Вставить("ОтправленПоПочтеКлиенту",Ложь);
	
	
	
	СтруктураДопРеквизитов = РегистрыСведений.CMS1C_ДополнительныеРеквизитыЗаказа.Получить(Новый Структура("Заказ",Заказ.Ссылка));
	IDЗаказа = СтруктураДопРеквизитов.ID;
	
	Если СинхронизироватьССайтом Тогда
		РезультатСинхронизацииСтатусаНаСайте =  СинхронизироватьСтатусЗаказаНаСайте(статус,IDЗаказа,Заказ,КомментарийКСмене);
		СтруктураДляВозврата.Вставить("СинхронизированССайтом",РезультатСинхронизацииСтатусаНаСайте);
	КонецЕсли;
	
	Если НастройкаСайта.УведомлятьПоПочте И ОтправлятьПоПочтеКлиенту Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Объект",Заказ.Контрагент);
		Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		АдресПолучателя = "";
		Если Выборка.Следующий() Тогда
			АдресПолучателя = Выборка.Представление;		   	 
		КонецЕсли;                                            
		
		ТекстСообщения = ?(ЗначениеЗаполнено(Статус.ТекстСообщенияДляОтправленияПоПочте),Статус.ТекстСообщенияДляОтправленияПоПочте,НастройкаСайта.ТекстУведомления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Получатель}",Заказ.Контрагент.Наименование);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Статус}",Статус);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"{Комментарий}",КомментарийКСмене);
		
		РезультатОтправленияПоПочте = CMS1C_ПроцедурыОбменаССайтомСервер.ОтправитьСообщениеОСменеСтатуса(НастройкаСайта,Заказ.Контрагент.Наименование,АдресПолучателя,ТекстСообщения);	 
		Если РезультатОтправленияПоПочте = Истина Тогда
			СтруктураДляВозврата.Вставить("ОтправленПоПочте",Истина);
		КонецЕсли;
	КонецЕсли; 
	Возврат СтруктураДляВозврата; 
КонецФУнкции

Функция НайтиСтатусПоID(IDСтатуса)
	НайдСтатус = Справочники.CMS1C_СтатусыЗаказов.НайтиПоРеквизиту("ID",IDСтатуса);
	Если НайдСтатус.Пустая() ТОгда
		Сообщить("Не удалось найти статус по ID "+IDСтатуса);
	КонецеСли;
	
	Возврат НайдСтатус;
КонецФУнкции

Функция ПроверкаСтрокиЗаказаПриАвтообмене(Стр,Заказы)
	
	ст = Заказы.Найти(Строка(Формат(стр.IDЗаказа,"ЧН=0; ЧГ=0")),"ID");
	Если ст=Неопределено Тогда
		возврат Ложь; 
	КонецЕсли;  
	
	Если НЕ ТипЗнч(Стр.Контрагент)=Тип("СправочникСсылка.Контрагенты") или НЕ ЗначениеЗаполнено(Стр.Контрагент) Тогда
		//Попробуем найти контрагента
		ЗапросПоКонтрагентам = Новый Запрос("ВЫБРАТЬ
		|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Контрагент
		|ИЗ
		|	РегистрСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте КАК CMS1C_СоответствияКонтрагентовВ1СИНаСайте
		|ГДЕ
		|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.НастройкаСайта = &НастройкаСайта
		|	И CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Номер = &Номер");
		
		ЗапросПоКонтрагентам.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		ЗапросПоКонтрагентам.УстановитьПараметр("Номер",Стр.IDКонтрагента);
		Результат = ЗапросПоКонтрагентам.Выполнить().Выбрать(); 
		Если Результат.Следующий() Тогда
			Стр.Контрагент= Результат.Контрагент;
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Стр.Контрагент)=Тип("СправочникСсылка.Контрагенты") и ЗначениеЗаполнено(Стр.Контрагент) Тогда
		Запись = РегистрыСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте.СоздатьМенеджерЗаписи();	
		Запись.Контрагент = Стр.Контрагент;
		Запись.НастройкаСайта = НастройкаСайта;
		Запись.Номер = Ст.contact_ID;
		Запись.Записать(Истина); 			
	ИначеЕсли НастройкаСайта.СоздаватьКонтрагентов  Тогда
		Создавать = Ложь;
		ВыбранноеЗначение = Неопределено;
		
		Если Создавать или НастройкаСайта.СоздаватьКонтрагентовБезВопросов Тогда 
			
			Обработка.ОтобразитьСостояние("Создание контрагента");
			
			ЗарегистрироватьКонтрагента(стр);				
		ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
			Стр.Контрагент = ВыбранноеЗначение;
			Запись = РегистрыСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте.СоздатьМенеджерЗаписи();	
			Запись.Контрагент = Стр.Контрагент;
			Запись.НастройкаСайта = НастройкаСайта;
			Запись.Номер = Ст.contact_ID;
			Запись.Записать(Истина);
		Иначе		
			возврат Ложь;
		КонецЕсли;
	Иначе
		Сообщить("В строке "+Строка(стр.Владелец().Индекс(стр)+1)+" необходимо заполнить контрагента из справочника ""Контрагенты"".");
		возврат Ложь;
	КонецЕсли; 	
	
	Если ТипЗнч(Стр.Валюта)=Тип("СправочникСсылка.Валюты") и ЗначениеЗаполнено(Стр.Валюта) Тогда
	Иначе
		Сообщить("В строке "+Строка(стр.Владелец().Индекс(стр)+1)+" необходимо заполнить валюту из справочника ""Валюты"".");
		возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(стр.ТипДоставки)=Тип("Строка") Тогда
		стр.ТипДоставкиНаСайте = Стр.ТипДоставки;
		ТекТипДоставки = CMS1C_ПроцедурыОбменаССайтомСервер.ВернутьСсылкуНаНоменклатуруДоставки(СокрЛП(Стр.ТипДоставки),НастройкаСайта.Ссылка);
		Если НЕ ЗначениеЗаполнено(ТекТипДоставки) Тогда
			стр.Загружать= Ложь;
			//стр.ТипДоставки= СокрЛП(shipping_name);
		Иначе
			стр.ТипДоставки = ТекТипДоставки;
		КонецЕсли;
	КонецЕсли;
	
	НомДоставки = Справочники.Номенклатура.НайтиПоНаименованию(стр.ТипДоставки);
	Если НомДоставки.Пустая() Тогда
		Сообщить("В справочнике номенклатура не найдена номенклатура доставки "+стр.ТипДоставки);
		Если стр.СуммаДоставки > 0 Тогда 
			возврат Ложь;
		КонецЕсли;
	Иначе
		стр.ТипДоставки = НомДоставки;
	КонецЕсли;
	
	возврат Истина;
КонецФункции

Процедура ЗагрузитьСтатусы(ТекОбработка= Неопределено) Экспорт
	
	Если ТекОбработка <> Неопределено Тогда
		ОБработка = ТекОбработка;
	КонецЕсли;
	
	//Если НЕ НастройкаСайта.СинхронизироватьСтатусы Тогда
	//	возврат;
	//КонецЕсли;
	
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(НастройкаСайта, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат;
	КонецЕсли;
	
	Обработка.ОтобразитьСостояние("Обновление статусов...");
	
	Мен = РегистрыСведений.CMS1C_ИсторияОбменаСтатусовЗаказовНаСайте.СоздатьМенеджерЗаписи();
	Мен.НастройкаСайта = НастройкаСайта;
	Мен.Прочитать();
	Если ЗначениеЗаполнено(Мен.ДатаСинхронизацииСтатусов) Тогда
		ЕстьОтборПоДатеСинхронизации = Истина;
		ФорматДаты = Формат(Мен.ДатаСинхронизацииСтатусов,"ДФ='yyyy-MM-dd ЧЧ:мм:сс'");
		УсловиеОтбораПоДате = " WHERE create_datetime >= '"+ФорматДаты+"' OR update_datetime >= '"+ФорматДаты+"'";
	Иначе
		УсловиеОтбораПоДате = "";
		ЕстьОтборПоДатеСинхронизации = Ложь;
	Конецесли;
	
	
	
	ТаблицаНастроекДляКолонокИЗначений = Новый ТаблицаЗначений();
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ОписаниеТипов");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("НезаполненныеЗначенияNULL",Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ФорматироватьНРЕГ",Новый ОписаниеТипов("Булево"));
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "ПоУмолчанию";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Строка,NULL",,Новый КвалификаторыСтроки(255));
	ДобСтрокаТаблицыОписанийТиповКолонок.ФорматироватьНРЕГ = Ложь;
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "id";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(11));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "create_datetime";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Дата,NULL",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "update_datetime";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Дата,NULL",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "datetime";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Дата,NULL",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	
	
	
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Отладка",НастройкаСайта.Отладка);
	СтруктураПараметровЗапроса.Вставить("НастройкиДляКолонокИЗначений",ТаблицаНастроекДляКолонокИЗначений);
	Заказы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT id,state_id,create_datetime,update_datetime FROM shop_order"+УсловиеОтбораПоДате,Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
	
	
	МаксимальнаяДатаЗаказов = Мен.ДатаСинхронизацииСтатусов;
	Обработка.ОткрытьИндикатор("Синхронизация статусов заказов на сайте и в 1С",Заказы.Количество());
	НС = 0;
	Для каждого Ст Из Заказы Цикл
		НС = НС + 1;
		Обработка.ИзменитьОтображениеИндикатора(НС);
		Если НЕ ЗначениеЗаполнено(ст.state_id) Тогда
			Продолжить;
		КонецЕсли;
		МаксимальнаяДатаЗаказов = Макс(МаксимальнаяДатаЗаказов,ст.create_datetime,ст.update_datetime);
		
		
		СтатусЗаказа = Справочники.CMS1C_СтатусыЗаказов.НайтиПоРеквизиту("ID",Ст.state_id,,НастройкаСайта);
		
		Если СтатусЗаказа.Пустая() Тогда
			//Сообщить("В 1С не найден статус "+ст.state_id);
			//Продолжить;
			ОбъектСтатус = Справочники.CMS1C_СтатусыЗаказов.СоздатьЭлемент();
			ОбъектСтатус.Владелец = НастройкаСайта;
			ОбъектСтатус.Наименование = ст.state_id;
			ОбъектСтатус.ID = ст.state_id;
			
			ТаблицаAction_id = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT distinct action_id FROM shop_order_log WHERE after_state_id = '"+ст.state_id+"' AND before_state_id <>'"+ст.state_id+"'",Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
			Если ТаблицаAction_id.Количество() =1 Тогда
				ОбъектСтатус.IDСобытия = ТаблицаAction_id[0].action_id;
			ИначеЕсли ТаблицаAction_id.Количество() > 1 Тогда
				Сообщить("Для статуса "+ст.state_id+" не удалось правильно определить действие");
			КонецЕсли;
			
			//ОбъектСтатус.IDСобытия = ;
			ОбъектСтатус.Записать();
			СтатусЗаказа = ОбъектСтатус.Ссылка;
		КонецЕсли;
		
		ЗапросЗаказа = Новый Запрос;
		ЗапросЗаказа.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Заказ,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.Номер,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта,
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ТипОплаты
		|ПОМЕСТИТЬ НашлиЗаказ
		|ИЗ
		|	РегистрСведений.CMS1C_ДополнительныеРеквизитыЗаказа КАК CMS1C_ДополнительныеРеквизитыЗаказа
		|ГДЕ
		|	CMS1C_ДополнительныеРеквизитыЗаказа.ID = &ID
		|	И CMS1C_ДополнительныеРеквизитыЗаказа.НастройкаСайта = &НастройкаСайта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Заказ,
		|	CMS1C_ИзмененияСтатусовЗаказовСрезПоследних.Статус
		|ПОМЕСТИТЬ НашлиПоследнийСтатусЗаказа
		|ИЗ
		|	РегистрСведений.CMS1C_ИзмененияСтатусовЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					НАшлиЗАказ.Заказ
		|				ИЗ
		|					НАшлиЗАказ)) КАК CMS1C_ИзмененияСтатусовЗаказовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НашлиЗаказ.Заказ КАК Ссылка,
		|	НашлиПоследнийСтатусЗаказа.Статус
		|ИЗ
		|	НашлиЗаказ КАК НашлиЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ НашлиПоследнийСтатусЗаказа КАК НашлиПоследнийСтатусЗаказа
		|		ПО НашлиЗаказ.Заказ = НашлиПоследнийСтатусЗаказа.Заказ
		|ГДЕ
		|	(НашлиПоследнийСтатусЗаказа.Статус ЕСТЬ NULL 
		|			ИЛИ НашлиПоследнийСтатусЗаказа.Статус <> &Статус)";
		//ЗапросЗаказа.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//					 |	ЗаказПокупателя.Ссылка,
		//					 |	СтатусыПоследние.Статус
		//					 |ИЗ
		//					 |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		//					 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CMS1C_ИзмененияСтатусовЗаказов.СрезПоследних(, Заказ.Номер = &Номер) КАК СтатусыПоследние
		//					 |		ПО ЗаказПокупателя.Ссылка = СтатусыПоследние.Заказ
		//					 |ГДЕ
		//					 |	(ЗаказПокупателя.Настройка = &Настройка
		//					 |			ИЛИ ЗаказПокупателя.Настройка = &ПустаяНастройка)
		//					 |	И ЗаказПокупателя.Номер = &Номер
		//					 |	И (СтатусыПоследние.Статус <> &Статус
		//					 |			ИЛИ СтатусыПоследние.Статус ЕСТЬ NULL )";
		//поищем в регистре статусов статус как на сайте и если не найдем, то добавим.
		
		ЗапросЗаказа.УстановитьПараметр("ID",Ст.ID);
		ЗапросЗаказа.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		
		ЗапросЗаказа.УстановитьПараметр("Статус",СтатусЗаказа);
		Результат = ЗапросЗаказа.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ЗапросИзменения = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT * FROM shop_order_log WHERE order_id='"+Формат(Ст.ID,"ЧГ=")+"' ORDER BY datetime DESC LIMIT 1",Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);	
			
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ЗаписиИзменения = РегистрыСведений.CMS1C_ИзмененияСтатусовЗаказов.СоздатьНаборЗаписей();
			ЗаписиИзменения.Отбор.Заказ.Установить(Выборка.Ссылка);
			ЗаписиИзменения.Прочитать();
			
			НашлиЗапись = Ложь;
			Если ЗапросИзменения.Количество() > 0 Тогда
				ИзменениеНаСайте = ЗапросИзменения[0];
				ДатаПериод = ИзменениеНаСайте.datetime;
				Для Каждого СТрТзЗапись из ЗаписиИзменения Цикл
					Если СТрТзЗапись.Период = ДатаПериод Тогда
						НашлиЗапись = Истина;
						ЗаписьИзменения = СТрТзЗапись;
						Прервать;
					Конецесли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ НашлиЗапись Тогда
				ЗаписьИзменения = ЗаписиИзменения.Добавить();
			КонецЕсли;		
			
			Если ЗапросИзменения.Количество() Тогда		
				ЗаписьИзменения.ТекстСообщения = ИзменениеНаСайте.text;
				ЗаписьИзменения.Период = ДатаПериод;
			иначе
				ЗаписьИзменения.ТекстСообщения = "";
				ЗаписьИзменения.Период = ТекущаяДата();
			КонецЕсли;
			
			
			ЗаписьИзменения.Заказ = Выборка.Ссылка;
			ЗаписьИзменения.Статус = СтатусЗаказа;
			
			ЗаписьИзменения.СинхронизироватьССайтом = Истина;
			ЗаписьИзменения.СинхронизированССайтом = Истина;
			Попытка
				ЗаписиИзменения.ДополнительныеСвойства.Вставить("Обновление");
				ЗаписиИзменения.Записать(Истина);					
				Сообщить("Обновлен статус заказа № "+Ст.id+" с сайта "+НастройкаСайта,СтатусСообщения.Информация);
			Исключение
				Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОтборПоДатеСинхронизации Тогда
		Мен = РегистрыСВедений.CMS1C_ИсторияОбменаСтатусовЗаказовНаСайте.СоздатьМенеджерЗаписи();
		Мен.НастройкаСайта = НастройкаСайта;
		Мен.ДатаСинхронизацииСтатусов = МаксимальнаяДатаЗаказов;
		Мен.Записать();
	Конецесли;
КонецПроцедуры

Функция СинхронизироватьСтатусЗаказаНаСайте(Статус,IDЗаказа,Заказ,КомментарийКСмене)
	ВсеХорошо = Истина;
	Если Обработка = Неопределено Тогда
		Обработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
		ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
		Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
		Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	КонецЕсли;
	
	
	
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(НастройкаСайта, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат Ложь;
	КонецЕсли;
	
	НачалоАдресаСкрипта = НастройкаСайта.HTTPОбменАдресСайта;
	СтруктураАдреса = Обработка.РазобратьАдресСайта(НачалоАдресаСкрипта);
	HTTPОбменПорт = СтруктураАдреса.HTTPПорт;
	HTTPОбменСервер = СтруктураАдреса.HTTPСервер;
	НачалоАдресаСкрипта = СтруктураАдреса.HTTPАдресСкрипта;   
	
	СтруктураАдресаFTP = Обработка.РазобратьАдресСайта(НастройкаСайта.FTPОбменАдресСайта);
	Сервер = СтруктураАдресаFTP.HTTPСервер;
	//ПутьКФайлам = СтруктураАдресаFTP.HTTPАдресСкрипта;
	
	//ОтобразитьСостояние("Сбор статусов...");
	IDСтатуса = Статус.ID;
	НаименованиеСтатуса = Статус.Наименование;
	Заказы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT ID FROM shop_order WHERE id='"+СокрЛП(Формат(IDЗаказа,"ЧН=0; ЧГ=0"))+"' AND state_id='"+IDСтатуса+"'",Соединение,СтруктураПараметровСайта);
	
	МеняемСтатусВЗаказах = Истина;
	МеняемСтатусВЛогах = Истина;
	Если Заказы.Количество() Тогда
		Сообщить("Этот заказ на сайте уже имеет статус """+НаименованиеСтатуса+"""");
		//возврат; 
		МеняемСтатусВЗаказах = Ложь;
	КонецЕсли;
	
	Если МеняемСтатусВЗаказах Тогда
		ЗапросОбновлениеСтатусаВТабТоваров ="UPDATE shop_order SET 
		|state_id = '"+IDСтатуса+"',"+
		"update_datetime = '"+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd ЧЧ:мм:сс'")+"'"+
		" WHERE id='"+СокрЛП(Формат(IDЗаказа,"ЧН=0; ЧГ=0"))+"'";
		
		Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("loadu",ЗапросОбновлениеСтатусаВТабТоваров,Соединение,СтруктураПараметровСайта);
		Если Результат = 0 Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "SELECT after_state_id FROM shop_order_log WHERE order_id = '"+Формат(IDЗаказа,"ЧГ=")+"' ORDER BY datetime DESC LIMIT 1";
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Отладка",НастройкаСайта.Отладка);
	ТаблицаПоследнегоСтатусаНаСайте = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапроса,Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
	
	Если ТаблицаПоследнегоСтатусаНаСайте.Количество() =0 Тогда
		СтатусБыл = "";
	Иначе
		СтатусБыл = ТаблицаПоследнегоСтатусаНаСайте[0].after_state_id;
		Если СтатусБыл = IDСтатуса Тогда
			МеняемСтатусВЛогах = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если МеняемСтатусВЛогах Тогда	
		//id
		//order_id 
		//contact_id
		//action_id
		//datetime
		//before_state_id
		//after_state_id
		//text
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Номер
		|ИЗ
		|	РегистрСведений.CMS1C_СоответствияКонтрагентовВ1СИНаСайте КАК CMS1C_СоответствияКонтрагентовВ1СИНаСайте
		|ГДЕ
		|	CMS1C_СоответствияКонтрагентовВ1СИНаСайте.Контрагент = &Контрагент
		|	И CMS1C_СоответствияКонтрагентовВ1СИНаСайте.НастройкаСайта = &НастройкаСайта";
		Запрос.УстановитьПараметр("Контрагент",Заказ.Контрагент);
		Запрос.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
		ВЫб = Запрос.Выполнить().Выбрать();
		Если не Выб.Следующий() Тогда
			IDКонтрагента = "NULL";
		Иначе
			IDКонтрагента = "'"+Формат(Выб.Номер,"ЧГ=")+"'";
		КонецЕсли;
		
		КомментарийКСменеСоВставленнымиЗначениями = ?(ЗначениеЗаполнено(Статус.ТекстСообщенияКСменеСтатусаНаСайте),Статус.ТекстСообщенияКСменеСтатусаНаСайте,НастройкаСайта.ТекстУведомления);
		КомментарийКСменеСоВставленнымиЗначениями = СтрЗаменить(КомментарийКСменеСоВставленнымиЗначениями,"{Получатель}",Заказ.Контрагент.Наименование);
		КомментарийКСменеСоВставленнымиЗначениями = СтрЗаменить(КомментарийКСменеСоВставленнымиЗначениями,"{Статус}",Статус);
		КомментарийКСменеСоВставленнымиЗначениями = СтрЗаменить(КомментарийКСменеСоВставленнымиЗначениями,"{Комментарий}",КомментарийКСмене);
		
		ЗапросСменаСтатусов = "INSERT INTO shop_order_log (order_id,contact_id,action_id,datetime,before_state_id,after_state_id,text) values
		|('"+СокрЛП(Формат(IDЗаказа,"ЧН=0; ЧГ=0"))+"',
		|"+IDКонтрагента+",
		|'"+Статус.IDСобытия+"',
		|'"+СокрЛП(Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH:mm:ss'"))+"',
		|'"+СтатусБыл+"',
		|'"+IDСтатуса+"',
		|'"+СокрЛП(КомментарийКСменеСоВставленнымиЗначениями)+"')";
		Результат = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("load",ЗапросСменаСтатусов,Соединение,СтруктураПараметровСайта);
		Если Результат = 0 Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат ВсеХорошо;
КонецФункции

// Функция выполняет все действия по регистрации данных и возвращает форму созданного контрагента
// 
//
Функция ЗарегистрироватьКонтрагента(Стр) Экспорт
	Возврат CMS1C_ПроцедурыОбменаССайтомСервер.ЗарегистрироватьКонтрагента(Стр,НастройкаСайта);
КонецФункции

Процедура ВывестиТаблицуНаФорму(УФ,ИмяТЗНаФорме,ТЗ, ТЗОбработчиковСобытий = Неопределено) Экспорт
	
	// СОЗДАНИЕ РЕКВИЗИТОВ ФОРМЫ
	МассивДобавляемыхРеквизитов = Новый Массив; 
	
	МАссивРеквизитовКоторыеБыли = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
	
	Масс = новый Массив;
	Для Каждого ЭлементМассиваРеквизитовКоторыеБыли из МАссивРеквизитовКоторыеБыли Цикл
		Масс.Добавить(ЭлементМассиваРеквизитовКоторыеБыли.Имя);
	КонецЦИкла;
	
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Масс.Найти(КОлонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,ИмяТЗНаФорме ,Колонка.Заголовок));   
	КонецЦикла; 
	
	//МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
	// МассивИменУдаляемыхРеквизитов = Новый Массив;
	
	//Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
	//   МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + "." + Элемент.Имя);
	//КонецЦикла; 
	
	//УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,МассивИменУдаляемыхРеквизитов); 
	УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов); 
	
	// СОЗДАНИЕ ЭЛЕМЕНТОВ ФОРМЫ
	//Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
	//	УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
	//	Попытка
	// 	   УФ.Элементы.Удалить(УдаляемыйЭлемент);
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла; 
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Масс.Найти(КОлонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяКолонка = УФ.Элементы.Добавить(ИмяТЗНаФорме + Колонка.Имя, Тип("ПолеФормы"), УФ.Элементы[ИмяТЗНаФорме]); 
			НоваяКолонка.Заголовок = Колонка.Заголовок; 
			НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + "." + Колонка.Имя;
			Если Колонка.ТИпЗначения.СодержитТип(ТИп("Булево")) Тогда
				НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка; 
			Иначе
				НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
			КонецЕсли;
			
			НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
		Исключение
		КонецПопытки;
	КонецЦикла;    
	
	//УФ[ИмяТЗНаФорме].Загрузить(ТЗ);
	
	// Привязка обработчиков событий
	Если ТЗОбработчиковСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
		УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
	КонецЦикла;   
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыИзСайта()	Экспорт
	
	ОБработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	
	//Если НЕ НастройкаСайта.СинхронизироватьСтатусы Тогда
	//	возврат;
	//КонецЕсли;
	
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(НастройкаСайта, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат;
	КонецЕсли;
	
	Обработка.ОтобразитьСостояние("Загрузка статусов...");
	
	ТаблицаНастроекДляКолонокИЗначений = Новый ТаблицаЗначений();
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ОписаниеТипов");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("НезаполненныеЗначенияNULL",Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ФорматироватьНРЕГ",Новый ОписаниеТипов("Булево"));
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "ПоУмолчанию";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Строка,NULL",,Новый КвалификаторыСтроки(255));
	ДобСтрокаТаблицыОписанийТиповКолонок.ФорматироватьНРЕГ = Ложь;
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "id";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(11));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Отладка",НастройкаСайта.Отладка);
	СтруктураПараметровЗапроса.Вставить("НастройкиДляКолонокИЗначений",ТаблицаНастроекДляКолонокИЗначений);
	Статусы = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT DISTINCT state_id FROM shop_order",Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
	
	Обработка.ОткрытьИндикатор("Загрузка статусов в 1С",Статусы.Количество());
	НС = 0;
	Для каждого Ст Из Статусы Цикл
		НС = НС + 1;
		Обработка.ИзменитьОтображениеИндикатора(НС);
		Если НЕ ЗначениеЗаполнено(ст.state_id) Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусЗаказа = Справочники.CMS1C_СтатусыЗаказов.НайтиПоРеквизиту("ID",Ст.state_id,,НастройкаСайта);
		
		Если СтатусЗаказа.Пустая() Тогда
			//Сообщить("В 1С не найден статус "+ст.state_id);
			//Продолжить;
			ОбъектСтатус = Справочники.CMS1C_СтатусыЗаказов.СоздатьЭлемент();
		Иначе
			ОбъектСтатус = СтатусЗаказа.ПолучитьОбъект();
		КонецЕсли;
		
		ОбъектСтатус.Владелец = НастройкаСайта;
		ОбъектСтатус.Наименование = ст.state_id;
		ОбъектСтатус.ID = ст.state_id;
		
		ТаблицаAction_id = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list","SELECT distinct action_id FROM shop_order_log WHERE after_state_id = '"+ст.state_id+"' AND before_state_id <>'"+ст.state_id+"'",Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
		Если ТаблицаAction_id.Количество() =1 Тогда
			ОбъектСтатус.IDСобытия = ТаблицаAction_id[0].action_id;
		ИначеЕсли ТаблицаAction_id.Количество() > 1 Тогда
			Сообщить("Для статуса "+ст.state_id+" не удалось правильно определить действие");
		КонецЕсли;
		
		//ОбъектСтатус.IDСобытия = ;
		ОбъектСтатус.Записать();
		СтатусЗаказа = ОбъектСтатус.Ссылка;
		
	КонецЦикла;
	
	Обработка.ЗакрытьИндикатор();
	
КонецПроцедуры

ФУнкция ОтсортироватьПоУровню(Обработка,СтруктураПараметров)Экспорт
	ТаблицаСайта = СтруктураПараметров.ТаблицаСайта;
	МассивСимволовНачальныхСсылок = СтруктураПараметров.МассивНачальныхСсылок;
	ВидОбмена = Структурапараметров.ВидОбмена;
	ТаблицаСайта.Колонки.Добавить("СортировкаПоУровню");
	ТаблицаСайта.ЗаполнитьЗначения(9999999,"СортировкаПоУровню");
	
	ИмяПоля = "id";
	ИмяПоляРодителя = "parent_id";
	
	НС = 0;
	НС = НС + 1;
	
	НовыйМассив = Обработка.НайтиМассивСтрокПоРодителюИДобавитьВМассивНовых(ИмяПоляРодителя,ИмяПоля,ТаблицаСайта,МассивСимволовНачальныхСсылок,НС);
	
	
	Пока Истина Цикл
		Если НовыйМассив.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НС = НС + 1;
		НовыйМассив = Обработка.НайтиМассивСтрокПоРодителюИДобавитьВМассивНовых(ИмяПоляРодителя,ИмяПоля,ТаблицаСайта,НовыйМассив,НС);
		Если новыйМассив.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСайта.Сортировать("СортировкаПоУровню");
	ТаблицаСайта.Колонки.Удалить("СортировкаПоУровню");
КонецФункции

// Обработчики справочников
//*********************************************
//*********************************************

Процедура СохранитьИзображениеНаДиск(ОбъектИзображение) Экспорт
	Если НЕ ОбъектИзображение.НастройкаСайта.ХранитьФайлыНаДиске Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИзображение.Владелец) <> Тип("СправочникСсылка.CMS1C_Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИзображение.ID) ИЛИ Не ЗначениеЗаполнено(ОбъектИзображение.Владелец.ID) Тогда
		Возврат;
	КонецЕсли;
	
	IDТовара = Формат(ОбъектИзображение.Владелец.ID,"ЧГ=");
	IDКартинки = Формат(ОбъектИзображение.ID,"ЧГ=");
	
	Двоичные = ОбъектИзображение.Хранилище.Получить();
	
	Если ТипЗнч(Двоичные) = ТИп("Картинка") Тогда
		Двоичные = Двоичные.ПолучитьДвоичныеДанные();
	КонецЕСли;
	
	//Двоичные = СтрокаИзображения.Хранилище.ПОлучить();
	Если Двоичные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуWatermark = "";
	img = "";
	Если НастройкаСайта.НакладыватьWaterMark Тогда
		CMS1C_ПроцедурыОбменаССайтом.СохранитьФайлWatermarkНаДиск(ПутьКФайлуWatermark,img,ОбъектИзображение.НастройкаСайта);
	КонецЕсли;
	
	ПутьКФайлам = ОбъектИзображение.НастройкаСайта.ПутьКФайлам;
	
	Если НастройкаСайта.НаСайтеСохраняетсяОригинальноеИзображение Тогда
		ПутьКФайлам = ПутьКФайлам + "\wa-data\protected\shop\products";
	Иначе
		ПутьКФайлам = ПутьКФайлам + "\wa-data\public\shop\products";
	КонецЕсли;
	
	ПерваяПапка = "";
	ВтораяПапка = "";
	ТретьяПапка = IDТовара;
	
	ДлинаIDТовара = СтрДлина(IDТовара);
	Если ДлинаIDТовара =1 Тогда
		ПерваяПапка = "0"+IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 2 Тогда
		ПерваяПапка = IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 3 Тогда
		ПерваяПапка = Прав(IDТовара,2);
		втораяПапка = "0"+Лев(IDТовара,1);
	Иначе
		ПерваяПапка = Прав(IDТовара,2);
		ВтораяПапка = Прав(IDТовара,4);
		ВтораяПапка = Лев(ВтораяПапка,2);
	КонецЕсли;
	
	//C:\WebServers\home\wa5\www\wa-data\protected\shop\products\26\69\213606926\images
	
	//ПутьКПапке = IDТовара;
	
	//1) protected
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКФайлам+"\"+ПерваяПапка);
	ПутьКПапкеProtected = ПутьКФайлам+"\"+ПерваяПапка + "\" + ВтораяПапка;
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапкеProtected);
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\" + IDТовара;
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапкеProtected);
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\"+"images";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапкеProtected);
	
	
	Если НастройкаСайта.НакладыватьWaterMark И ЗначениеЗаполнено(ПутьКФайлуWatermark) Тогда
		//	//сначала выгрузим в оригинал и наложим вотермарку
		ИмяКартинкиОригинал = IDКартинки+".original."+ОбъектИзображение.Расширение;
		Попытка
			Двоичные.Записать(ПутьКПапкеProtected+"/"+ИмяКартинкиОригинал);
		Исключение
			Сообщить("Не удалось записать картинку товара "+ ОбъектИзображение.Владелец);
			Возврат;
		КонецПопытки;
		ИмяКартинки = IDКартинки+"."+ОбъектИзображение.Расширение;
		//Двоичные.Записать(ПутьКПапкеProtected+"/"+ИмяКартинки);
		Попытка
			Результат = img.composite("-dissolve",ОбъектИзображение.НастройкаСайта.ПрозрачностьМарки,"-gravity",НастройкаСайта.РасположениеМарки,ПутьКФайлуWatermark,ПутьКПапкеProtected+"\"+ИмяКартинкиОригинал,ПутьКПапкеProtected+"\"+ИмяКартинки);
		Исключение
			Сообщить("Не удалось записать картинку товара "+ ОбъектИзображение.Владелец+". "+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Если Результат = Неопределено Тогда
			Сообщить("Не удалось записать картинку товара "+ ОбъектИзображение.Владелец);
			Возврат;
		КонецЕсли;
		
	Иначе			
		ИмяКартинки = IDКартинки+"."+ОбъектИзображение.Расширение;
		Попытка Двоичные.Записать(ПутьКПапкеProtected+"/"+ИмяКартинки);
		Исключение
			Сообщить("Не удалось записать картинку товара "+ ОбъектИзображение.Владелец+". "+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ОбъектИзображение.Хранилище = НОвый ХранилищеЗначения(Неопределено);
КонецПроцедуры

Процедура СоздатьПапкиДляХраненияФайлов(НастройкаСайта) Экспорт
	ПутьКФайлам = НастройкаСайта.ПутьКФайлам;
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКФайлам);
	ПутьКПапке = ПутьКФайлам+"\"+"wa-data";
	
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	ПутьКПапке = ПутьКПапке+"\"+"protected";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	ПутьКПапке = ПутьКПапке+"\"+"shop";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	ПутьКПапке = ПутьКПапке+"\"+"products";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	
	ПутьКПапке = ПутьКФайлам+"\wa-data\public";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	ПутьКПапке = ПутьКПапке+"\"+"shop";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
	ПутьКПапке = ПутьКПапке+"\"+"products";
	CMS1C_ПроцедурыОбменаССайтом.НайтиИлиСоздатьКаталог(ПутьКПапке);
Конецпроцедуры

Функция ПолучитьПутьККартинке(ТекИзображение,НенужныйПараметрДобавкаКНаименованию) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекИзображение.Владелец.ID) иЛИ НЕ  ЗначениеЗаполнено(ТекИзображение.id) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	IDТовара = Формат(ТекИзображение.Владелец.ID,"ЧГ=");
	IDКартинки = Формат(ТекИзображение.ID,"ЧГ=");
	Расширение = ТекИзображение.Расширение;
	ПерваяПапка = "";
	ВтораяПапка = "";
	ТретьяПапка = IDТовара;
	
	ДлинаIDТовара = СтрДлина(IDТовара);
	Если ДлинаIDТовара =1 Тогда
		ПерваяПапка = "0"+IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 2 Тогда
		ПерваяПапка = IDТовара;
		ВтораяПапка = "00";
	ИначеЕсли ДлинаIDТовара = 3 Тогда
		ПерваяПапка = Прав(IDТовара,2);
		втораяПапка = "0"+Лев(IDТовара,1);
	Иначе
		ПерваяПапка = Прав(IDТовара,2);
		ВтораяПапка = Прав(IDТовара,4);
		ВтораяПапка = Лев(ВтораяПапка,2);
	КонецЕсли;
	
	Если НастройкаСайта.НаСайтеСохраняетсяОригинальноеИзображение Тогда
		ПутьКПапке = НастройкаСайта.ПутьКФайлам+"\wa-data\protected\shop\products\";
	Иначе
		ПутьКПапке = НастройкаСайта.ПутьКФайлам+"\wa-data\public\shop\products\";
	Конецесли;
	
	
	
	ПутьКПапкеProtected = ПутьКПапке+ПерваяПапка + "\" + ВтораяПапка;
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\" + IDТовара;
	ПутьКПапкеProtected = ПутьКПапкеProtected + "\"+"images";
	
	Если НастройкаСайта.НакладыватьWaterMark Тогда
		//	//сначала выгрузим в оригинал и наложим вотермарку
		ИмяКартинкиОригинал = IDКартинки+".original."+Расширение;
		ПутьККартинкеОригинал = ПутьКПапкеProtected+"\"+ИмяКартинкиОригинал;
		Если НайтиФайлы(ПутьККартинкеОригинал).Количество()>0 Тогда
			Возврат ПутьККартинкеОригинал;
		КонецЕсли;
	КонецЕсли;
	
	ИмяКартинки = IDКартинки+"."+Расширение;
	ПутьККартинке = ПутьКПапкеProtected+"\"+ИмяКартинки;
	Если НайтиФайлы(ПутьККартинке).Количество()>0 Тогда
		Возврат ПутьККартинке;
	КонецЕсли;
	Возврат Неопределено;
КонецФУнкции

Процедура ОтредактироватьИзображенияПриДобавленииИнтерактивно(стрТз,ТаблИзображений,img,ПутьКартинки,СсылкаНаОбъект,РедактированиеЭлементаСправочникаИзображение = Ложь) Экспорт
Конецпроцедуры

Процедура ПроверитьОсновноеИзображениеНоменклатуры(ИзображениеОбъект) Экспорт
	Если ИзображениеОбъект.ID = ИзображениеОбъект.Владелец.ОсновноеИзображение Тогда
		Об = ИзображениеОбъект.Владелец.ПолучитьОбъект();
		Об.ОсновноеИзображение = ИзображениеОбъект.Ссылка;
		Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
		//Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОсновнойВариантНоменклатуры(ВариантОбъект) Экспорт
	Если ВариантОбъект.ID = ВариантОбъект.Владелец.ОсновнойВариант Тогда
		Об = ВариантОбъект.Владелец.ПолучитьОбъект();
		Об.ОсновнойВариант = ВариантОбъект.Ссылка;
		Об.ДополнительныеСвойства.Вставить("НадоЗаписать");
		//Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииСистемыУправленияСайтом() Экспорт
	Мен = РегистрыСведений.CMS1C_ПараметрыФункциональныхОпций.СоздатьМенеджерЗаписи();
	Мен.СистемаУправленияСайтом = СистемаУправленияСайтом;
	Мен.ИспользоватьСвойства = Истина;
	Мен.ИспользоватьСклады = Истина;
	Мен.ИспользоватьВалюты = Истина;
	Мен.ИспользоватьВариантыНоменклатуры = Истина;
	Мен.ИспользоватьНалоги = Истина;
	Мен.ИспользоватьТипыТоваров = Истина;
	Мен.ИспользоватьПерекрестныеПродажи = Истина;
	Мен.ИспользоватьАльтернативныеТовары = Истина;
	Мен.ИспользоватьКартинкиСредМал = Ложь;
	Мен.Записать();
КонецПроцедуры

Функция ЗначенияСвойстваСсылочные(ТекСвойство) Экспорт
	Если ТекСвойство.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension Тогда
		Возврат Истина;
	ИначеЕсли ТекСвойство.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Range Тогда
		Возврат Истина;
	ИначеЕсли ТекСвойство.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Color Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


Процедура CMS1C_СвойстваОбъектов_ПередЗаписью(СвойствоОбъект) Экспорт
КонецПроцедуры

Процедура CMS1C_СвойстваОбъектов_ПередЗаписью_УстановитьТекстовыеПредставленияИсходяИзТипаНаСайте(СвойствоОбъект,Отказ) Экспорт
	СвойствоОбъект.ТипИЗначенияХарактеристики = "";
	СвойствоОбъект.ДополнительныйТип = "";
	
	СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.ПустаяСсылка();
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Текст");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("HTML");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Булево");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Цвет");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Вес");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Длина");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Диапазон");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение x Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение x Значение x Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Выпадающий список");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Чекбоксы (множественный выбор)");
	//
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Текст");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Произвольное число");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Длина (м, см, мм, дюйм, ...)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Вес (кг, г, фунт, унция)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Объем (л, мл, сл)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Частота (Гц, КГц, МГц,ГГц)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Мощность (Вт, КВт, МВт, мВт)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Память (Б, КБ, МБ, ГБ)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Площадь (кв. м., кв. фут., акр, га, ...)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Время (сек, мин, ч, дн.)");
	НайдТочка = Найти(СвойствоОбъект.НазваниеТипаНаСайте,".");
	Если НайдТочка = 0 Тогда
		Тип1 = СвойствоОбъект.НазваниеТипаНаСайте;
		Тип2 = Неопределено;
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = Тип1;
	Иначе
		Тип1 = Лев(СвойствоОбъект.НазваниеТипаНаСайте,НайдТочка-1);
		Тип2 = Сред(СвойствоОбъект.НазваниеТипаНаСайте,НайдТочка+1);
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = ТИп2;
	КонецЕсли;
	
	
	Если Тип1 = "varchar" Тогда
		Если Не ЗначениеЗаполнено(Тип2) Тогда
			Если НЕ СвойствоОбъект.ЕстьВыбор
				И НЕ СвойствоОбъект.МножественныйВыбор
				Тогда
				СвойствоОбъект.ТипИЗначенияХарактеристики = "Текст";
				СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar;
				Возврат;
			ИНачеЕсли СвойствоОбъект.ЕстьВыбор и СвойствоОбъект.МножественныйВыбор Тогда
				СвойствоОбъект.ТипИЗначенияХарактеристики = "Чекбоксы (множественный выбор)";
				СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar;
			ИначеЕсли СвойствоОбъект.ЕстьВыбор Тогда
				СвойствоОбъект.ТипИЗначенияХарактеристики = "Выпадающий список";
				СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Тип1 = "text" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "HTML";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Text;
	ИНачеЕсли ТИп1 = "boolean" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Булево";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.ПустаяСсылка();
	ИначеЕсли Тип1 = "color" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Цвет";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Color;
	ИначеЕсли Тип1 = "double" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение";
		СвойствоОбъект.ДополнительныйТип = "Произвольное число";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double;
		Возврат;
	ИначеЕсли Тип1 = "dimension" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
	ИначеЕсли Тип1 = "range" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Диапазон";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Range;
	ИначеЕсли Тип1 = "2d" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение x Значение";
	ИначеЕсли Тип1 = "3d" Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение x Значение x Значение";
	Иначе
		Сообщить(""+СвойствоОбъект+". Не получилось определить тип на сайте """+СвойствоОбъект.НазваниеТипаНаСайте+"""");
		Отказ = Истина;
	КонецЕсли;
	
	Если СвойствоОбъект.МножественныйВыбор и СвойствоОбъект.ЕстьВыбор Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Чекбоксы (множественный выбор)";
	ИначеЕсли СвойствоОбъект.ЕстьВыбор Тогда
		СвойствоОбъект.ТипИЗначенияХарактеристики = "Выпадающий список";
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Тип2) Тогда
		СвойствоОбъект.ДополнительныйТип = "Текст";
		Возврат;
	КонецЕсли;
	
	Если Тип2 = "varchar" Тогда
		СвойствоОбъект.ДополнительныйТип = "Текст";
	ИначеЕсли Тип2 = "double" Тогда
		СвойствоОбъект.ДополнительныйТип = "Произвольное число";
	ИначеЕсли Тип2 = "length" Тогда
		СвойствоОбъект.ДополнительныйТип = "Длина";
	ИначеЕсли Тип2 = "weight" Тогда
		СвойствоОбъект.ДополнительныйТип = "Вес";
	ИначеЕсли Тип2 = "volume" Тогда
		СвойствоОбъект.ДополнительныйТип = "Вес";
	ИначеЕсли Тип2 = "frequency" Тогда
		СвойствоОбъект.ДополнительныйТип = "Частота";
	ИначеЕсли Тип2 = "power" Тогда
		СвойствоОбъект.ДополнительныйТип = "Мощность";
	ИначеЕсли Тип2 = "memory" Тогда
		СвойствоОбъект.ДополнительныйТип = "Память";
	ИначеЕсли Тип2 = "area" Тогда
		СвойствоОбъект.ДополнительныйТип = "Площадь";
	ИначеЕсли Тип2 = "time" Тогда
		СвойствоОбъект.ДополнительныйТип = "Время";
	КонецЕсли;
КонецПроцедуры

Процедура CMS1C_СвойстваОбъектов_ПередЗаписью_УстановитьЗначениеТипаНаСайте(СвойствоОбъект,Отказ) Экспорт
	СвойствоОбъект.НазваниеТипаНаСайте = "";
	СвойствоОбъект.ЕстьВыбор = Ложь;
	СвойствоОбъект.МножественныйВыбор = Ложь;
	СвойствоОбъект.НеВыводитьВ1С = Ложь;
	
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Текст");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("HTML");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Булево");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Цвет");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Диапазон");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение x Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Значение x Значение x Значение");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Выпадающий список");
	//Элементы.ТипИЗначенияХарактеристики.СписокВыбора.Добавить("Чекбоксы (множественный выбор)");
	//
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Текст");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Произвольное число");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Длина (м, см, мм, дюйм, ...)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Вес (кг, г, фунт, унция)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Объем (л, мл, сл)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Частота (Гц, КГц, МГц,ГГц)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Мощность (Вт, КВт, МВт, мВт)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Память (Б, КБ, МБ, ГБ)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Площадь (кв. м., кв. фут., акр, га, ...)");
	//Элементы.ДополнительныйТип.СписокВыбора.Добавить("Время (сек, мин, ч, дн.)");
	
	Если СвойствоОбъект.ТипИЗначенияХарактеристики = "Текст" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "varchar";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "varchar";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
		Возврат;
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "HTML" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "text";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "text";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Text;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
		Возврат;
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Булево" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "boolean";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "boolean";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Boolean;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Булево");
		Возврат;
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Цвет" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "color";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "color";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Color;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
		СвойствоОбъект.ЕстьВыбор = Истина;
		СвойствоОбъект.МножественныйВыбор = Истина;
		Возврат;
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение" Тогда
		Если СвойствоОбъект.ДополнительныйТип = "Произвольное число" Тогда
			СвойствоОбъект.НазваниеТипаНаСайте = "double";
			СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
			Возврат;
		Иначе
			СвойствоОбъект.НазваниеТипаНаСайте = "dimension";
			СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
		Конецесли;
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Диапазон" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "range";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Range;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение x Значение" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "2d";
		СвойствоОбъект.НеВыводитьВ1С = Истина;
		Если СвойствоОбъект.ДополнительныйТип <> "Произвольное число" Тогда
			СвойствоОбъект.НазваниеТипаНаСайте = СвойствоОбъект.НазваниеТипаНаСайте + ".dimension";
		КонецЕсли;
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Значение x Значение x Значение" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "3d";
		СвойствоОбъект.НеВыводитьВ1С = Истина;
		Если СвойствоОбъект.ДополнительныйТип <> "Произвольное число" Тогда
			СвойствоОбъект.НазваниеТипаНаСайте = СвойствоОбъект.НазваниеТипаНаСайте + ".dimension";
		КонецЕсли;
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Выпадающий список" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "varchar";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "varchar";
		СвойствоОбъект.ЕстьВыбор = Истина;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
	ИначеЕсли СвойствоОбъект.ТипИЗначенияХарактеристики = "Чекбоксы (множественный выбор)" Тогда
		СвойствоОбъект.НазваниеТипаНаСайте = "varchar";
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "varchar";
		СвойствоОбъект.ЕстьВыбор = Истина;
		СвойствоОбъект.МножественныйВыбор = Истина;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CMS1C_ЗначенияСвойствОбъектов");
	Иначе
		Сообщить(""+СвойствоОбъект+". Не получилось определить тип на сайте """+СвойствоОбъект.НазваниеТипаНаСайте+"""");
		Отказ = Истина;
	КонецЕсли;
	
	Если СвойствоОбъект.ДополнительныйТип = "" Тогда
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Текст" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "varchar";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Varchar;
		Возврат;
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Произвольное число" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "double";
		СвойствоОбъект.НазваниеТипаНаСайте = СвойствоОбъект.НазваниеТипаНаСайте + ".double";
		Если Не ЗначениеЗаполнено(СвойствоОбъект.ТаблицаДляСвойства) Тогда
			СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Double;
		КонецЕсли;
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Длина" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "length";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.length";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Вес" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "weight";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.weight";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Объем" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "volume";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.volume";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Частота" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "frequency";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.frequency";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Мощность" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "power";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.power";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Память" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "memory";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.memory";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Площадь" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "area";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.area";
	ИначеЕсли СвойствоОбъект.ДополнительныйТип = "Время" Тогда
		СвойствоОбъект.НазваниеТипаДляЗначенийСвойств = "time";
		СвойствоОбъект.ТаблицаДляСвойства = Перечисления.CMS1C_ПринадлежностьСвойстваКТаблице.Dimension;
		СвойствоОбъект.НазваниеТипаНаСайте = "dimension.time";
	Иначе
		Сообщить(""+СвойствоОбъект+". Не получилось определить тип на сайте """+СвойствоОбъект.НазваниеТипаНаСайте+"""");
		Отказ = Истина;
	Конецесли;
КонецПроцедуры

Процедура CMS1C_НастройкиСайтов_ПриЗаписи(СправочникОбъект) Экспорт
	
КонецПроцедуры



&НаСервере
Функция ЗагрузитьУстановкуЦенОстатковИВернутьНезаписанныеОбъекты(ТекущаяНастройкаОбмена) Экспорт
	ОбработкаОбмена = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ОбработкаОбмена.НастройкаСайтаДляОбмена = НастройкаСайта;
	ОбработкаОбмена.НастройкаСайтаДляПодключения = НастройкаСайта;
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,НастройкаСайта);
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена,ТекущаяНастройкаОбмена);
	//Обработка.СохраненныеНастройкиПостроителя = Обработка.СохраненныеНастройкиПостроителя;
	//Обработка.WatermarkaMid = Обработка.WatermarkaMid;
	//Обработка.WatermarkaBig = Обработка.WatermarkaBig;
	СтруктураНовыхДокументов = СоздатьУстановкуЦенИПриход(ТекущаяНастройкаОбмена);
	Если СтруктураНовыхДокументов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураНовыхДокументов;
КонецФункции

Функция СоздатьУстановкуЦенИПриход(ТекущаяНастройкаОбмена) Экспорт
	Обработка = Обработки.CMS1C_ОбработкаОбмена.Создать();
	ЗаполнитьЗначенияСвойств(Обработка,НастройкаСайта);
	ЗаполнитьЗначенияСвойств(Обработка,ТекущаяНастройкаОбмена);
	
	Обработка.НастройкаСайтаДляОбмена = НастройкаСайта;
	Обработка.НастройкаСайтаДляПодключения = НастройкаСайта;
	
	СтруктураПараметровСайта = Обработка.ПолучитьСтруктуруПараметровДляСоединения(НастройкаСайта, НастройкаСайта.HTTPОбменАдресСайта);
	
	Соединение = Обработка.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Сообщить("Ошибка при установке соединения с сайтом.");
		Возврат Неопределено;
	КонецЕсли;
	
	Обработка.НастроитьСхемуКомпановки(Обработка.СхемаКомпоновки);
	ОБработка.ДобавитьФильтрыВСхемуКомпановкиСайта();
	ТаблицаНоменклатуры = Обработка.ВернутьРезультатЗапроса();
	ТаблицаНоменклатуры.Свернуть("CMS1C_Номенклатура");
	
	МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("CMS1C_Номенклатура");
	ФильтрПоТаблицеСайта = Обработка.ПолучитьМассивВыгружаемыхID(МассивНоменклатуры,"product_id");
	
	ТаблицаНастроекДляКолонокИЗначений = Новый ТаблицаЗначений();
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ОписаниеТипов");
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("НезаполненныеЗначенияNULL",Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекДляКолонокИЗначений.Колонки.Добавить("ФорматироватьНРЕГ",Новый ОписаниеТипов("Булево"));
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "id";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(11));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "product_id";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(11));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Истина;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "price";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(20,10));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "purchase_price";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(20,10));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "compare_price";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(20,10));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	
	ДобСтрокаТаблицыОписанийТиповКолонок = ТаблицаНастроекДляКолонокИЗначений.Добавить();
	ДобСтрокаТаблицыОписанийТиповКолонок.ИмяКолонки = "count";
	ДобСтрокаТаблицыОписанийТиповКолонок.ОписаниеТипов = Новый ОписаниеТипов("Число,NULL",Новый КвалификаторыЧисла(20,10));
	ДобСтрокаТаблицыОписанийТиповКолонок.НезаполненныеЗначенияNULL = Ложь;
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Отладка",НастройкаСайта.Отладка);
	СтруктураПараметровЗапроса.Вставить("НастройкиДляКолонокИЗначений",ТаблицаНастроекДляКолонокИЗначений);
	
	//+
	ТекстЗапросаСайта = "SELECT id,product_id, price, purchase_price,compare_price,count FROM shop_product_skus";
	ИмяПоляДляФильтраПоТаблицеСайта = "product_id";
	Если ТИпЗнч(ФильтрПоТаблицеСайта) = Тип("Массив") Тогда
		ТаблицаСайта = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапросаСайта,Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
		Обработка.ПослеПолученияТаблицыСайтаОтфильтроватьПоМассивуID(ТаблицаСайта,ФильтрПоТаблицеСайта,ИмяПоляДляФильтраПоТаблицеСайта);
	Иначе
		Если ФильтрПоТаблицеСайта = Неопределено ИЛИ ФильтрПоТаблицеСайта = "" Тогда
		ИначеЕсли Найти(ТекстЗапросаСайта,"WHERE")<> 0 Тогда
			//ТекстЗапросаСайта = ТекстЗапросаСайта+" AND ( "+Этап.ИмяКлючевогоПоляСайта+" "+ФильтрПоТаблицеСайта+")";
			ТекстЗапросаСайта = ТекстЗапросаСайта+" AND ( "+ФильтрПоТаблицеСайта+")";
		Иначе
			//ТекстЗапросаСайта = ТекстЗапросаСайта+" WHERE "+Этап.ИмяКлючевогоПоляСайта+" "+ФильтрПоТаблицеСайта;
			ТекстЗапросаСайта = ТекстЗапросаСайта+" WHERE "+ФильтрПоТаблицеСайта;
		КонецЕсли;
		ТаблицаСайта = CMS1C_ПроцедурыОбменаССайтомСервер.ЗапросSQL("list",ТекстЗапросаСайта,Соединение,СтруктураПараметровСайта,,СтруктураПараметровЗапроса);
	КонецЕсли;
	//-
	
	УстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	УстановкаЦен.Дата = ТекущаяДата();
	
	Оприходование = документы.ОприходованиеТоваров.СоздатьДокумент();
	Оприходование.Дата = ТекущаяДата();
	Оприходование.ОтражатьВУправленческомУчете = Истина;
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(УстановкаЦен, глЗначениеПеременной("глТекущийПользователь"));
	
	Если ЗначениеЗаполнено(ОБработка.ТипЦен) Тогда
		ДобСтр = УстановкаЦен.ТипыЦен.Добавить();
		ДобСтр.ТипЦен = Обработка.ТипЦен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОБработка.ТипЦенСтараяЦена) Тогда
		ДобСтр = УстановкаЦен.ТипыЦен.Добавить();
		ДобСтр.ТипЦен = Обработка.ТипЦенСтараяЦена;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОБработка.ТипЦенЗакупочнаяЦена) Тогда
		ДобСтр = УстановкаЦен.ТипыЦен.Добавить();
		ДобСтр.ТипЦен = Обработка.ТипЦенЗакупочнаяЦена;
	КонецЕсли;
	
	НомерИндекса = -1;
	ТоварыУстановкаЦен = УстановкаЦен.Товары;
	
	ЗапросТовар = Новый Запрос();
	ЗапросТовар.Текст = "ВЫБРАТЬ
	|	CMS1C_Номенклатура.Владелец
	|ИЗ
	|	Справочник.CMS1C_Номенклатура КАК CMS1C_Номенклатура
	|ГДЕ
	|	CMS1C_Номенклатура.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_Номенклатура.ID = &ID";
	ЗапросТовар.УстановитьПараметр("НАстройкаСайта",НастройкаСайта);
	
	ЗапросВариант = Новый Запрос();
	ЗапросВариант.Текст = "ВЫБРАТЬ
	|	CMS1C_ВариантыНоменклатуры.Ссылка КАК Вариант,
	|	CMS1C_ВариантыНоменклатуры.ХарактеристикаНоменклатуры,
	|	CMS1C_ВариантыНоменклатуры.Владелец КАК CMS1C_Номенклатура,
	|	CMS1C_ВариантыНоменклатуры.Владелец.Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.CMS1C_ВариантыНоменклатуры КАК CMS1C_ВариантыНоменклатуры
	|ГДЕ
	|	CMS1C_ВариантыНоменклатуры.НастройкаСайта = &НастройкаСайта
	|	И CMS1C_ВариантыНоменклатуры.ID = &id";
	ЗапросВариант.УстановитьПараметр("НастройкаСайта",НастройкаСайта);
	//ЗапросВариант.УстановитьПараметр("product_id");
	
	
	ИндексСтроки = -1;
	Для каждого СтрокаТоваров из ТаблицаСайта Цикл 
		
		ЗапросВариант.УстановитьПараметр("id",СтрокаТоваров.id);
		Выб = ЗапросВариант.Выполнить().Выбрать();
		
		//ТекХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		Если Выб.Следующий() Тогда
			//Если Выб.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			//	Если Не ЗначениеЗаполнено(выб.ХарактеристикаНоменклатуры) Тогда
			//		Сообщить("У номенклатуры "+Выб.Номенклатура+", варианта "+Выб.Вариант+" не указана характеристика номенклатуры");
			//	КонецЕСли;
			ТекХарактеристика = Выб.ХарактеристикаНОменклатуры;
			//КонецЕсли;
			ТекНоменклатура = Выб.Номенклатура;
		Иначе
			ЗапросТовар.УстановитьПараметр("id",СтрокаТоваров.id);
			Выб = ЗапросТовар.Выполнить().Выбрать();
			Если Выб.Следующий() Тогда
				ТекНоменклатура = Выб.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда
			Сообщить("Не найдена номенклатура с ID = " +СтрокаТоваров.ID);
			Продолжить;
		КонецеСли;
		
		//Если Выб.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		//	Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
		//		Сообщить("Номенклатура "+ТекНоменклатура+", код "+ТекНоменклатура.Код+". Выставлено использование характеристик, но характеристика не найдена");
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕСли;
		
		Если ЗначениеЗаполнено(Обработка.ТипЦен) Тогда
			Цена = СтрокаТоваров.Price;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обработка.ТипЦенЗакупочнаяЦена) Тогда
			ЦенаЗакупочная = СтрокаТоваров.purchase_price;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обработка.ТипЦенСтараяЦена) Тогда
			ЦенаСтарая = СтрокаТоваров.compare_price;
		КонецЕсли;		
		
		КоличествоОстаток = СтрокаТоваров.Count;
		
		ДобавлялиИндексСтроки = Ложь;
		
		Если ЗначениеЗаполнено(ОБработка.ТипЦен) И ЗначениеЗаполнено(Цена) Тогда
			Если НЕ ДобавлялиИндексСтроки Тогда
				ИндексСтроки = ИндексСтроки + 1;
				ДобавлялиИндексСтроки = Истина;
			КонецЕсли;
			
			НоваяСтрока = ТоварыУстановкаЦен.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен = ИндексСтроки;
			НоваяСтрока.Валюта = Обработка.ВалютаЗаказаПоУмолчанию;
			НоваяСтрока.Номенклатура = ТекНоменклатура;
			НоваяСтрока.ТипЦен = Обработка.ТипЦен;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
			НоваяСтрока.Цена = Цена;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.СпособРасчетаЦены=НоваяСтрока.ТипЦен.СпособРасчетаЦены;
			//НоваяСтрока.Упаковка = ТекНоменклатура.
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обработка.ТипЦенЗакупочнаяЦена) И ЗначениеЗаполнено(ЦенаЗакупочная) Тогда
			Если НЕ ДобавлялиИндексСтроки Тогда
				ИндексСтроки = ИндексСтроки + 1;
				ДобавлялиИндексСтроки = Истина;
			КонецЕсли;
			НоваяСтрока = ТоварыУстановкаЦен.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен = ИндексСтроки;
			НоваяСтрока.Валюта = Обработка.ВалютаЗаказаПоУмолчанию;
			НоваяСтрока.Номенклатура = ТекНоменклатура;
			НоваяСтрока.ТипЦен = Обработка.ТипЦенЗакупочнаяЦена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
			НоваяСтрока.Цена = ЦенаЗакупочная;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.СпособРасчетаЦены=НоваяСтрока.ТипЦен.СпособРасчетаЦены;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обработка.ТипЦенСтараяЦена) И ЗначениеЗаполнено(ЦенаСтарая) Тогда
			Если НЕ ДобавлялиИндексСтроки Тогда
				ИндексСтроки = ИндексСтроки + 1;
				ДобавлялиИндексСтроки = Истина;
			КонецЕсли;
			НоваяСтрока = ТоварыУстановкаЦен.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен = ИндексСтроки;
			НоваяСтрока.Валюта = Обработка.ВалютаЗаказаПоУмолчанию;
			НоваяСтрока.Номенклатура = ТекНоменклатура;
			НоваяСтрока.ТипЦен = Обработка.ТипЦенСтараяЦена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
			НоваяСтрока.Цена = ЦенаСтарая;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.СпособРасчетаЦены=НоваяСтрока.ТипЦен.СпособРасчетаЦены;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КоличествоОстаток)
			И КоличествоОстаток >0
			Тогда
			НоваяСтрока = Оприходование.Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения =ТекНоменклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Качество = Справочники.Качество.Новый;
			НоваяСтрока.Количество = КоличествоОстаток;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Номенклатура =ТекНоменклатура;
			Если ЗначениеЗаполнено(ЦенаЗакупочная)
				И ЦенаЗакупочная > 0 Тогда
				ТекЦена = ЦенаЗакупочная;
			Иначе
				ТекЦена = 0.01;
			КонецЕсли;
			
			НоваяСтрока.Цена = ТекЦена;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
		Конецесли;
	КонецЦикла;
	Стр = Новый Структура();
	Стр.Вставить("УстановкаЦен",УстановкаЦен);
	Стр.Вставить("Оприходование",Оприходование);
	
	Возврат Стр;
КонецФункции


СистемаУправленияСайтом = Перечисления.CMS1C_СистемыУправленияСайтами.Webasyst5;