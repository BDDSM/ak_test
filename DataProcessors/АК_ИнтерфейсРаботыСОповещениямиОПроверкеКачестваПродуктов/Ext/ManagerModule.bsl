//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Процедура РаботаСОповещениямиОПроверкеКачестваПродуктов() Экспорт
	
	ТЗПисем = ПолучитьТЗПисем("Вердикты");
	
	СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку;
	
	Для каждого СтрокаТЗПисем Из ТЗПисем Цикл 
		
		Если СтрокаТЗПисем.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.НеОтработано Тогда
			
			ОтборПисем = Новый Структура;
			ОтборПисем.Вставить("Контрагент", СтрокаТЗПисем.Контрагент);
			ОтборПисем.Вставить("Номенклатура", СтрокаТЗПисем.Номенклатура);
			ОтборПисем.Вставить("СтатусПисемРассылки", Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку);
			
			ОтправленныеПисьма = ТЗПисем.НайтиСтроки(ОтборПисем);
			
			Если ОтправленныеПисьма.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			МенеджерЗаписи 							= РегистрыСведений.ЛогиПисемListAnswer.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторСообщения 	= СтрЗаменить(СтрЗаменить(СтрокаТЗПисем.email_uid, "{", ""), "}", "");
			МенеджерЗаписи.text_email				= "Отправлено технологам";
			МенеджерЗаписи.Отправлено				= Истина;
			МенеджерЗаписи.Номенклатура				= СтрокаТЗПисем.Номенклатура;
			МенеджерЗаписи.Контрагент				= СтрокаТЗПисем.Контрагент;
			МенеджерЗаписи.СтатусПисемРассылки 		= СтатусПисемРассылки;
			МенеджерЗаписи.Записать();
			
			Если ЗначениеЗаполнено(МенеджерЗаписи.ИдентификаторСообщения) Тогда
				НаборЗаписейЛог = РегистрыСведений.ЛогиПисемGMAIL.СоздатьНаборЗаписей();
				НаборЗаписейЛог.Отбор.ИдентификаторСообщения.Установить(МенеджерЗаписи.ИдентификаторСообщения, Истина);
				НаборЗаписейЛог.Прочитать();
				Для каждого ЗаписьНабора Из НаборЗаписейЛог Цикл
					ЗаписьНабора.ID_Отчета = "800"; 
				КонецЦикла;
				НаборЗаписейЛог.Записать();
			КонецЕсли; 	
			
			Если СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку") Тогда			
				ОтправитьПисьмо_Т1НаСервере_регламент(СтрокаТЗПисем.email_uid, СтрокаТЗПисем.Номенклатура, СтрокаТЗПисем.Контрагент);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

//+++АК LAGP 2018.03.16 ИП-00017097.04 Авторабота с отправкой обращений покупателей.
Процедура РаботаСОбращениямиПокупателей_ОповещенияОПроверкеКачестваПродуктов() Экспорт
	
	ТЗПисемОтправленныхНаПроверку = ПолучитьТЗПисем("Обращения");
	
	ТипыОбращений = Новый Массив;
	ТипыОбращений.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("202"));
	ТипыОбращений.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("203"));
	
	СтруктураПараметровТЗЖалоб = Новый Структура;
	СтруктураПараметровТЗЖалоб.Вставить("ТипыОбращений", ТипыОбращений);
	СтруктураПараметровТЗЖалоб.Вставить("НачалоДня", НачалоДня(ТекущаяДата()));
	СтруктураПараметровТЗЖалоб.Вставить("КонецДня", КонецДня(ТекущаяДата()));	
	
	ТЗДетальныеЗаписи = ПолучитьТЗЖалоб(СтруктураПараметровТЗЖалоб);
	
	Для каждого СтрокаТЗДетальныеЗаписи Из ТЗДетальныеЗаписи Цикл
		
		СтруктураПоискаУжеОтправленныхНаПроверку = Новый Структура;
		СтруктураПоискаУжеОтправленныхНаПроверку.Вставить("Контрагент", СтрокаТЗДетальныеЗаписи.Контрагент);
		СтруктураПоискаУжеОтправленныхНаПроверку.Вставить("Номенклатура", СтрокаТЗДетальныеЗаписи.Номенклатура);
		
		НайденныеСтрокиВОтправленныхнаПроверку = ТЗПисемОтправленныхНаПроверку.НайтиСтроки(СтруктураПоискаУжеОтправленныхНаПроверку);
		Если НайденныеСтрокиВОтправленныхнаПроверку.Количество() > 0 Тогда
			ТЗДетальныеЗаписи.Удалить(СтрокаТЗДетальныеЗаписи);			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтправитьПочтуПоОбращениямНаСервере(ТЗДетальныеЗаписи);
	
КонецПроцедуры	

//+++АК LAGP 2018.03.16 ИП-00017097.04 Авторабота с отправкой обращений покупателей. Вынесена таблица писем в отдельную функцию
Функция ПолучитьТЗПисем(Приёмник)
	
	ТЗПисем = Новый ТаблицаЗначений;
	ТЗПисем.Колонки.Добавить("email_uid", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТЗПисем.Колонки.Добавить("date_add", Новый ОписаниеТипов("Строка"));
	ТЗПисем.Колонки.Добавить("type_email", Новый ОписаниеТипов("Строка"));
	ТЗПисем.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число"));
	ТЗПисем.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТЗПисем.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗПисем.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗПисем.Колонки.Добавить("СтатусПисемРассылки", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПисемРассылки"));
	ТЗПисем.Колонки.Добавить("Вердикт_uid", Новый ОписаниеТипов("Число"));	
	
	Если Приёмник = "Обращения" Тогда
		КолДней = 2;
	Иначе
		КолДней = 1;
	КонецЕсли;	
	
	ДатаНачала=НачалоДня(ТекущаяДата()-КолДней*24*60*60); //+++АК LAGP ограничение "за последние n-дней"
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапросаSQL = "SELECT TD.email_uid,  TD.date_add, TD.type_email, TD.id_kontr, TD.id_tov
	|FROM  SMS_Repl.dbo.List_emails as TD with (nolock)
	|WHERE TD.date_add >= " + ВнешниеДанные.ФорматПоля(ДатаНачала);	
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НоваяСтрока				 		= ТЗПисем.Добавить();
			НоваяСтрока.email_uid 	 		= СтрЗаменить(СтрЗаменить(rs.Fields("email_uid").Value, "{", ""), "}", "");
			НоваяСтрока.date_add 	 		= rs.Fields("date_add").Value;
			НоваяСтрока.type_email 	 		= rs.Fields("type_email").Value;
			НоваяСтрока.id_kontr 	 		= rs.Fields("id_kontr").Value;
			НоваяСтрока.id_tov 		 		= rs.Fields("id_tov").Value;		
			НоваяСтрока.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.НеОтработано;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	ЗапросКонтрагентов = Новый Запрос;
	ЗапросКонтрагентов.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИД КАК id_kontr
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИД В(&ИД)";
	ЗапросКонтрагентов.УстановитьПараметр("ИД", ТЗПисем.ВыгрузитьКолонку("id_kontr"));
	РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить().Выгрузить();

	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov В(&ИД)";
	ЗапросНоменклатуры.УстановитьПараметр("ИД", ТЗПисем.ВыгрузитьКолонку("id_tov"));
	РезультатЗапросаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗКонтрагентов Из РезультатЗапросаКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;	
		
		ОтборКонтрагента = Новый Структура;
		ОтборКонтрагента.Вставить("id_kontr", СтрокаТЗКонтрагентов.id_kontr);
		НайденныеСтрокиТЗПисем = ТЗПисем.НайтиСтроки(ОтборКонтрагента);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗПисем) Тогда
			Для каждого СтрокаТЗПисем Из НайденныеСтрокиТЗПисем Цикл
				СтрокаТЗПисем.Контрагент = СтрокаТЗКонтрагентов.Контрагент;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;	
	
	Для каждого СтрокаТЗНоменклатуры Из РезультатЗапросаНоменклатуры Цикл	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНоменклатуры = Новый Структура;
		ОтборНоменклатуры.Вставить("id_tov", СтрокаТЗНоменклатуры.id_tov);
		НайденныеСтрокиТЗПисем = ТЗПисем.НайтиСтроки(ОтборНоменклатуры);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗПисем) Тогда
			Для каждого СтрокаТЗПисем Из НайденныеСтрокиТЗПисем Цикл
				СтрокаТЗПисем.Номенклатура = СтрокаТЗНоменклатуры.Номенклатура;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	List_emails.Контрагент,
	|	List_emails.Номенклатура,
	|	List_emails.email_uid,
	|	List_emails.date_add,
	|	List_emails.type_email,
	|	List_emails.id_kontr,
	|	List_emails.id_tov,
	|	List_emails.Вердикт_uid,
	|	List_emails.СтатусПисемРассылки
	|ПОМЕСТИТЬ Т_1
	|ИЗ
	|	&Таблица КАК List_emails
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_1.Контрагент,
	|	Т_1.Номенклатура,
	|	Т_1.email_uid,
	|	Т_1.date_add,
	|	Т_1.type_email,
	|	Т_1.id_kontr,
	|	Т_1.id_tov,
	|	Т_1.Вердикт_uid,
	|	ВЫБОР
	|		КОГДА ЛогиПисемListAnswer.СтатусПисемРассылки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)
	|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ПустаяСсылка)
	|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.НеОтработано)
	|		ИНАЧЕ ЛогиПисемListAnswer.СтатусПисемРассылки
	|	КОНЕЦ КАК СтатусПисемРассылки,
	|	ЛогиПисемListAnswer.text_email,
	|	ЛогиПисемListAnswer.Отправлено КАК ОтправленоПисьмо
	|ИЗ
	|	Т_1 КАК Т_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогиПисемListAnswer КАК ЛогиПисемListAnswer
	|		ПО Т_1.email_uid = ЛогиПисемListAnswer.ИдентификаторСообщения";
	
	
	Если Приёмник = "Обращения" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ВЫБОР
		|		КОГДА ЛогиПисемListAnswer.СтатусПисемРассылки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)
		|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ПустаяСсылка)
		|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.НеОтработано)
		|		ИНАЧЕ ЛогиПисемListAnswer.СтатусПисемРассылки
		|	КОНЕЦ КАК СтатусПисемРассылки", 
		
		"ЛогиПисемListAnswer.СтатусПисемРассылки");	
		
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"ГДЕ
		 |	ЛогиПисемListAnswer.СтатусПисемРассылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Таблица", ТЗПисем);
	ТЗПисем = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗПисем;
	
КонецФункции	

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Процедура ОтправитьПисьмо_Т1НаСервере_регламент(email_uid, Номенклатура, Контрагент) Экспорт
	ДатаПисьма = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	Тема 			= "Оповещение о проверке качества продуктов " + " : " + Номенклатура + Контрагент + ДатаПисьма + " : " + "#RVV800_" + СтрЗаменить(СтрЗаменить(email_uid, "{", ""), "}", "") + "#";
	ВыборкаДетальныеЗаписи = ПолучитьТаблицуПозицийПисьма(email_uid, Номенклатура, Контрагент); 
	КопияВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи.Скопировать();
	КопияВыборкаДетальныеЗаписи.Очистить();
	Стр = КопияВыборкаДетальныеЗаписи.Добавить();
	Стр.Контрагент = Контрагент;
	Стр.Номенклатура = Номенклатура;
	СписокТехнологов = ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, Контрагент);
	Таблица 		= ВернутьТекстПисьма(email_uid, КопияВыборкаДетальныеЗаписи); 
	НомерЗаявки 	= "999";
	Адрес 			= "";
	//Адрес 			= "lagp@automacon.ru";	
	//Стр 				= СписокТехнологов.Добавить();
	//Стр.Адрес 			= Адрес;
	//Стр.РольТехнолог 	= "РольТехнолог";
	//Стр.Дневной 		= "Дневной";
	//Стр.Сотрудник 		= "Сотрудник";
	Для Каждого Строка ИЗ СписокТехнологов Цикл
		Если ЗначениеЗаполнено(СокрЛП(Строка.Адрес)) Тогда
			СписокКому		= Новый СписокЗначений;
			СписокКому.Добавить(СокрЛП(Строка.Адрес));
			
			Тема = Тема + "RVVTYPE_1" + СокрЛП(Строка.РольТехнолог);
			Тема = Тема + "RVVTYPE_2" + СокрЛП(Строка.Дневной);
			Тема = Тема + "RVVTYPE_3" + СокрЛП(Строка.Сотрудник);
			
			Попытка
				Тема = Тема + "RVVTYPE_4" + СокрЛП(СтрЗаменить(Строка.Номенклатура.id_tov, Символ(160), ""));
				Тема = Тема + "RVVTYPE_5" + СокрЛП(СтрЗаменить(Строка.Контрагент.ИД, Символ(160), ""));
			Исключение
			КонецПопытки;
			GUID_Заявки 	= Строка(Новый УникальныйИдентификатор);
			ID_MESSAGE 		= "999"; 
			TYPE_MESSAGE 	= "999";
			СсылкаАкцептант = "ТЕСТ";
			Объект_Ссылка	= Неопределено;
			ОтправитьЗаявкуНаПодтверждение(Тема, Таблица + "<br><br>", НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, Неопределено, Объект_Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	УИД_НовогоПисьма =  email_uid;
	Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка_ ИЗ НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(Строка_.GUID_ПисьмоТехнологам) Тогда
				Строка_.GUID_ПисьмоТехнологам = УИД_НовогоПисьма;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Insert_or_UpdateНажатие(УИД_НовогоПисьма, СтрЗаменить(Номенклатура.id_tov, Символ(160), ""), СтрЗаменить(Контрагент.ИД, Символ(160), ""));
	
КонецПроцедуры

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ПолучитьТаблицуПозицийПисьма(email_uid, Номенклатура, Контрагент) 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОтправленоНаПроверку,
	|	РегистрСведенийОбращенияПокупателей.id_OK,
	|	РегистрСведенийОбращенияПокупателей.GUID_Загрузки,
	|	РегистрСведенийОбращенияПокупателей.ДатаДок,
	|	РегистрСведенийОбращенияПокупателей.ИсточникОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипОбращения,
	|	РегистрСведенийОбращенияПокупателей.ФИО_Покупателя,
	|	РегистрСведенийОбращенияПокупателей.Телефон,
	|	РегистрСведенийОбращенияПокупателей.email,
	|	РегистрСведенийОбращенияПокупателей.СтруктурнаяЕдиница,
	|	РегистрСведенийОбращенияПокупателей.ДатаСобытия,
	|	РегистрСведенийОбращенияПокупателей.Продавец1,
	|	РегистрСведенийОбращенияПокупателей.Продавец2,
	|	РегистрСведенийОбращенияПокупателей.Продавец3,
	|	РегистрСведенийОбращенияПокупателей.Номенклатура,
	|	РегистрСведенийОбращенияПокупателей.Производитель КАК Контрагент,
	|	РегистрСведенийОбращенияПокупателей.Примечание,
	|	РегистрСведенийОбращенияПокупателей.ОтветПокупателю,
	|	РегистрСведенийОбращенияПокупателей.СсылкаНаСайт,
	|	РегистрСведенийОбращенияПокупателей.ДатаВопроса,
	|	РегистрСведенийОбращенияПокупателей.Вопрос,
	|	РегистрСведенийОбращенияПокупателей.ВопросКому,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтвета,
	|	РегистрСведенийОбращенияПокупателей.ПримечаниеОтвета,
	|	РегистрСведенийОбращенияПокупателей.РезультатОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипЖалобы,
	|	РегистрСведенийОбращенияПокупателей.Номер_Бланка,
	|	РегистрСведенийОбращенияПокупателей.Тип_Бланка,
	|	РегистрСведенийОбращенияПокупателей.ОтветПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.СтатусПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.ОтветПо,
	|	РегистрСведенийОбращенияПокупателей.id_Vizit,
	|	РегистрСведенийОбращенияПокупателей.Номер_Карты_ОК,
	|	РегистрСведенийОбращенияПокупателей.Ответственный,
	|	РегистрСведенийОбращенияПокупателей.НужноОбзвонить,
	|	РегистрСведенийОбращенияПокупателей.СтатусЖалобы,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтправкиОтветственным,
	|	РегистрСведенийОбращенияПокупателей.GUID_Связи,
	|	РегистрСведенийОбращенияПокупателей.Закрыт,
	|	РегистрСведенийОбращенияПокупателей.ОтменаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ПолучателиУведомления,
	|	РегистрСведенийОбращенияПокупателей.РегулярностьУведомления,
	|	РегистрСведенийОбращенияПокупателей.НачалоПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ОкончаниеПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ТипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ПодтипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ОтправленоСМСПокупателю,
	|	ВЫБОР
	|		КОГДА РегистрСведенийОбращенияПокупателей.КоличествоПрикрепленныхФайлов > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьПрикрепленные,
	|	РегистрСведенийОбращенияПокупателей.ТипВключения,
	|	РегистрСведенийОбращенияПокупателей.Технолог,
	|	РегистрСведенийОбращенияПокупателей.ПродактМенеджер,
	|	РегистрСведенийОбращенияПокупателей.ЦФО,
	|	РегистрСведенийОбращенияПокупателей.ТерриториальныйУправляющий,
	|	РегистрСведенийОбращенияПокупателей.ПомощникУправляющего,
	|	РегистрСведенийОбращенияПокупателей.КомментарийУКК,
	|	РегистрСведенийОбращенияПокупателей.Новинка,
	|	РегистрСведенийОбращенияПокупателей.Аутсорс
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК РегистрСведенийОбращенияПокупателей
	|ГДЕ
	|	РегистрСведенийОбращенияПокупателей.Производитель = &Производитель
	|	И РегистрСведенийОбращенияПокупателей.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Производитель", Контрагент);
	Запрос.УстановитьПараметр("GUID_Загрузки", email_uid);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса;
	
КонецФункции

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, Производитель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокТехнологовПолучателейРассылки.РольПользователя КАК Ссылка,
	|	ИСТИНА КАК Дневной
	|ПОМЕСТИТЬ ДневныеТехнологи
	|ИЗ
	|	РегистрСведений.СписокТехнологовПолучателейРассылки КАК СписокТехнологовПолучателейРассылки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|			ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
	|		ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
	|	КОНЕЦ КАК РольТехнолог
	|ПОМЕСТИТЬ ВТ_ТехнологРоли
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|		ЗначенияСвойствОбъектов.Значение КАК Производитель
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|	ГДЕ
	|		ХарактеристикиНоменклатуры.Ссылка = &Характеристика) КАК ВЗ_Характеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихХар
	|		ПО ВЗ_Характеристики.Характеристика = СоответствиеОбъектРольСрезПоследнихХар.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
	|		ПО ВЗ_Характеристики.Производитель = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|				ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
	|			ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЗ_Запрос.РольТехнолог,
	|	ЛОЖЬ КАК Дневной
	|ПОМЕСТИТЬ ВТ_ВсеТехнологиДляНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТехнологРоли.РольТехнолог.Родитель КАК РольТехнолог
	|	ИЗ
	|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли
	|	ГДЕ
	|		ЕСТЬNULL(ВТ_ТехнологРоли.РольТехнолог.Родитель, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РолиПользователей.Ссылка
	|	ИЗ
	|		Справочник.РолиПользователей КАК РолиПользователей
	|	ГДЕ
	|		РолиПользователей.Родитель В
	|				(ВЫБРАТЬ
	|					ВТ_ТехнологРоли.РольТехнолог
	|				ИЗ
	|					ВТ_ТехнологРоли КАК ВТ_ТехнологРоли)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ТехнологРоли.РольТехнолог
	|	ИЗ
	|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли) КАК ВЗ_Запрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДневныеТехнологи.Ссылка,
	|	ДневныеТехнологи.Дневной
	|ИЗ
	|	ДневныеТехнологи КАК ДневныеТехнологи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	ВТ_ВсеТехнологи.РольТехнолог,
	|	ВТ_ВсеТехнологи.Дневной
	|ПОМЕСТИТЬ ИтоговыйСписокТехнологов
	|ИЗ
	|	ВТ_ВсеТехнологиДляНоменклатуры КАК ВТ_ВсеТехнологи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО ВТ_ВсеТехнологи.РольТехнолог = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыйСписокТехнологов.Сотрудник.Код КАК Сотрудник,
	|	ИтоговыйСписокТехнологов.РольТехнолог.Код КАК РольТехнолог,
	|	ИтоговыйСписокТехнологов.Дневной,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	ИтоговыйСписокТехнологов КАК ИтоговыйСписокТехнологов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ИтоговыйСписокТехнологов.Сотрудник = КонтактнаяИнформация.Объект
	|			И (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) = КонтактнаяИнформация.Тип)";
	
	Запрос.УстановитьПараметр("ТекДата", 						КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Характеристика", 				?(ЗначениеЗаполнено(Производитель), Производитель, Номенклатура));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокАдресов = Новый ТаблицаЗначений;
	СписокАдресов.Колонки.Добавить("Адрес");
	СписокАдресов.Колонки.Добавить("РольТехнолог");
	СписокАдресов.Колонки.Добавить("Дневной");
	СписокАдресов.Колонки.Добавить("Сотрудник");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Представление) Тогда
			Стр 				= СписокАдресов.Добавить();
			Стр.Адрес 			= ВыборкаДетальныеЗаписи.Представление;
			Стр.РольТехнолог 	= ВыборкаДетальныеЗаписи.РольТехнолог;
			Стр.Дневной 		= ВыборкаДетальныеЗаписи.Дневной;
			Стр.Сотрудник 		= ВыборкаДетальныеЗаписи.Сотрудник;			
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат СписокАдресов;
	
КонецФункции

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ВернутьТекстПисьма(email_uid = "", ВыборкаДетальныеЗаписи)
	Таблица 									= ""; 
	//style 										= "<td style = ""background: #fff; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	ЦветШапки 									= "E5D4F2";
	ЦветШапки 									= "F0FFFF";
	TR 											= "<th style = ""background: #";
	TA											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	TA1											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	Инд 										= 1;
	НомерЗаявки 								= "";
	
	Таблица 							 		= Таблица + "<b>Запрос к технологам</b>";
	Таблица 							 		= Таблица + "<br><br>";
	Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;""><TR>";
	Таблица 							 		= Таблица + "<td>Номенклатура";
	Таблица 							 		= Таблица + "<td>Производитель";
	Таблица 							 		= Таблица + "<td>Обращение покупателей";
	Таблица 							 		= Таблица + "<td>Дата обращения";
	Таблица 							 		= Таблица + "</TR>";
	
	Попытка
		Документ_ПроверкаКачестваПродуктов = ВертутьДокументПроверкаКачестваПродуктов(email_uid); 
		Если Документ_ПроверкаКачестваПродуктов = Неопределено Тогда
			Документ_ПроверкаКачестваПродуктов = Документы.ПроверкаКачестваПродуктов.СоздатьДокумент();
		КонецЕсли;
		Документ_ПроверкаКачестваПродуктов.ИдентификаторСообщения = email_uid;
		Документ_ПроверкаКачестваПродуктов.Дата = ТекущаяДата();		
	Исключение
	КонецПопытки;
	
	Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл
		
		Таблица 							 		= Таблица + "<TR>";
		Таблица 							 		= Таблица + "<td>" + Строка.Номенклатура;
		Таблица 							 		= Таблица + "<td>" + Строка.Контрагент;
		Таблица 							 		= Таблица + "<td>" + Строка.Примечание;
		Попытка
			Таблица 							 		= Таблица + "<td>" + Строка.ДатаДок;
		Исключение
			Таблица 							 		= Таблица + "<td>";
		КонецПопытки;
		Таблица 							 		= Таблица + "</TR>";
		
		Попытка
			Стр 				= Документ_ПроверкаКачестваПродуктов.ДанныеДляПроверки.Добавить();
			Стр.Магазин 		= Строка.СтруктурнаяЕдиница; 
			Стр.ДатаПартии 		= Неопределено;
			Стр.Контрагент 		= Строка.Контрагент;
			Стр.Номенклатура 	= Строка.Номенклатура;
			Стр.Результат 		= Строка.Примечание;
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		Документ_ПроверкаКачестваПродуктов.Записать(РежимЗаписиДокумента.Запись);		
	Исключение
	КонецПопытки;
	
	Таблица 							 		= Таблица + "</Table>";
	
	Таблица 							 		= Таблица + "<BR><b>Ответы писать сюда:</b><BR>";
	Таблица 							 		= Таблица + "<br>";
	Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;""><TR>";
	Таблица 							 		= Таблица + "<td>№ п/п";
	Таблица 							 		= Таблица + "<td>Магазин ТТ";
	Таблица 							 		= Таблица + "<td>Дата партии";
	Таблица 							 		= Таблица + "<td>Плохой результат";
	Таблица 							 		= Таблица + "<td>Хороший результат";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>";
	Таблица 							 		= Таблица + "<td id=""ABC11#1"">1";
	Таблица 							 		= Таблица + "<td id=""ABC12#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC13#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC14#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC15#1"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC21#2"">2";
	Таблица 							 		= Таблица + "<td id=""ABC22#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC23#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC24#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC25#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC31#2"">3";
	Таблица 							 		= Таблица + "<td id=""ABC32#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC33#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC34#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC35#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC41#2"">4";
	Таблица 							 		= Таблица + "<td id=""ABC42#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC43#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC44#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC45#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC51#2"">5";
	Таблица 							 		= Таблица + "<td id=""ABC52#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC53#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC54#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC55#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	
	Таблица 							 		= Таблица + "</Table>";
	Таблица 							 		= Таблица + "<br>";
	
	Возврат Таблица;
	
КонецФункции

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ОтправитьЗаявкуНаПодтверждение(Тема, Таблица, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, УчетнаяЗапись = Неопределено, Объект_Ссылка) Экспорт 
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	КонецЕсли;
	
	Если Адрес<>"" Тогда
		СпАдресов								= Новый СписокЗначений;
		МассивАдресов							= Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СписокКому.Добавить(СокрЛП(Эл));
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		СообщениеПоОшибке = НСтр("ru = 'Письмо не отправлено! Не заполнен адрес электронной почты %Выборка_Акцептант%'");
		ЗаписьЖурналаРегистрации(СтрЗаменить(СообщениеПоОшибке, "%Выборка_Акцептант%", СсылкаАкцептант), УровеньЖурналаРегистрации.Ошибка);
		Возврат 0;
	КонецЕсли;
	
	Почта 										= Новый ИнтернетПочта;
	Профиль 									= УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо 										= Новый ИнтернетПочтовоеСообщение;
	Почта.Подключиться(Профиль);
	Письмо.Тема 								= Тема;
	Письмо.ИмяОтправителя  						= "vkusvill@it-stuff.ru";
	Письмо.Отправитель     						= "vkusvill@it-stuff.ru"; 
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель 								= Письмо.Получатели.Добавить();
		Получатель.Адрес 						= ПолучательЭлемент.Значение;
	КонецЦикла;	
	ТекстСообщения 								= Письмо.Тексты.Добавить();
	ТекстСообщения.Текст    					= ТекстСообщения.Текст + Таблица;
	ТекстСообщения.ТипТекста 					= ТипТекстаПочтовогоСообщения.HTML;
	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецФункции

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ВертутьДокументПроверкаКачестваПродуктов(ИдентификаторСообщения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверкаКачестваПродуктов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПроверкаКачестваПродуктов КАК ПроверкаКачестваПродуктов
	|ГДЕ
	|	ПроверкаКачестваПродуктов.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;       
КонецФункции

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Процедура Insert_or_UpdateНажатие(УИД_НовогоПисьма,id_tov,id_kontr) 
	
	//@email_uid		uniqueidentifier = NULL,
	//@id_kontr			int = NULL,
	//@id_tov			int = NULL,
	//@type_email		int = NULL
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение) Тогда
		Сообщить("Не удалось подключиться...", 30);
		Возврат;
	КонецЕсли; 
	
	email_uid 	= УИД_НовогоПисьма;
	id_kontr	= id_kontr;
	id_tov		= id_tov;
	type_email	= 823;
	
	Попытка
		rs = мСоединение.Execute("exec SMS_REPL..List_emails_insert_or_update @email_uid ="
		+ ФорматПоля(email_uid) 
		+ ", @id_kontr = " 
		+ ФорматПоля(id_kontr)
		+ ", @id_tov = " 
		+ ФорматПоля(id_tov)
		+ ", @type_email = " 
		+ ФорматПоля(type_email)
		);
	Исключение
		Сообщить("exec SMS_REPL..List_emails_insert_or_update @email_uid ="
		+ ФорматПоля(email_uid) 
		+ ", @id_kontr = " 
		+ ФорматПоля(id_kontr)
		+ ", @id_tov = " 
		+ ФорматПоля(id_tov)
		+ ", @type_email = " 
		+ ФорматПоля(type_email)
		);
		Сообщить(ОписаниеОшибки());			
	КонецПопытки;
	ОБщегоНазначения.СообщитьОбОшибке("Операция завершена успешно.", , , СтатусСообщения.Информация);
	мСоединение.Close();  
	
КонецПроцедуры

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция АДОДБ_УстановитьСоединение(Соединение, БД = "SMS_IZBENKA") Экспорт
	
	Строка = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(, , БД, , , "LANGUAGE=русский");
	
	Возврат Соединение.Open(Строка);
	
КонецФункции // АДОДБ_УстановитьСоединение()

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция АДОКоннекшн_СоздатьОбъект() Экспорт
	
	ADOСоединение = New ComObject("ADODB.Connection"); 
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionTimeOut = 0;
	
	Возврат ADOСоединение;
	
КонецФункции    // АДОКоннекшн_СоздатьОбъект

//+++АК LAGP 2018.02.26 ИП-00017097.02 Авторабота с оповещениями о проверке качества продуктов
Функция ФорматПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Если Лев(Поле,2)="$$" Тогда
			Возврат Сред(Поле,3)
		Иначе
			Возврат "'" + Поле + "'";
		КонецЕсли
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

//+++АК LAGP 2018.03.18 ИП-00017097.04 Авторабота с отправкой обращений покупателей.
Процедура ОтправитьПочтуПоОбращениямНаСервере(ВыделенныеСтрокиТЗ)
	
	Для каждого СтрокаТЗВыделенныеСтроки Из ВыделенныеСтрокиТЗ Цикл
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(СтрокаТЗВыделенныеСтроки);
		НеПрошлоПроверку = Ложь;
		
		СписокGUID = Новый СписокЗначений;
		
		УИД_НовогоПисьма = Строка(Новый УникальныйИдентификатор);
		
		//Проверка на наличие уже отправленных
		Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
			НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
			НаборЗаписей.Прочитать();
			Для Каждого Строка_ ИЗ НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Строка_.GUID_ПисьмоТехнологам) Тогда
					НеПрошлоПроверку = Истина;
					//ВыделенныеСтроки.Удалить(0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		БазовыйПроизводитель = Неопределено;
		Номенклатура = Неопределено;
		
		Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
			Строка_ = Строка.GUID_Загрузки;
			СписокGUID.Добавить(Строка_);
		КонецЦикла;
		
		Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
			НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
			НаборЗаписей.Прочитать();
			Для Каждого Строка_ ИЗ НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(БазовыйПроизводитель) Тогда
					БазовыйПроизводитель = Строка_.Производитель;
				КонецЕсли;
				Если БазовыйПроизводитель <> Строка_.Производитель Тогда
					НеПрошлоПроверку = Истина;
					//ВыделенныеСтроки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
						
		Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
			НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
			НаборЗаписей.Прочитать();
			Для Каждого Строка_ ИЗ НаборЗаписей Цикл		
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Номенклатура = Строка_.Номенклатура;
				КонецЕсли;
				Если Номенклатура <> Строка_.Номенклатура Тогда
					НеПрошлоПроверку = Истина;
					//ВыделенныеСтроки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НеПрошлоПроверку Тогда
			Продолжить;	
		КонецЕсли;	
		
		ДатаПисьма = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
				
		Тема 			= "Оповещение о проверке качества продуктов " + " : " + Номенклатура + БазовыйПроизводитель + ДатаПисьма + " : " + "#RVV800_" + УИД_НовогоПисьма + "#";
				
		ТипыОбращений = Новый Массив;
		ТипыОбращений.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("202"));
		ТипыОбращений.Добавить(Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("203"));
		
		СтруктураПараметровТЗЖалоб = Новый Структура;
		СтруктураПараметровТЗЖалоб.Вставить("ТипыОбращений", ТипыОбращений);
		СтруктураПараметровТЗЖалоб.Вставить("НачалоДня", НачалоДня(ТекущаяДата() - 3 * 24 * 60 * 60));
		СтруктураПараметровТЗЖалоб.Вставить("КонецДня", КонецДня(ТекущаяДата()));
		СтруктураПараметровТЗЖалоб.Вставить("Номенклатура", Номенклатура);
		СтруктураПараметровТЗЖалоб.Вставить("Поставщик", БазовыйПроизводитель);
		//СтруктураПараметровТЗЖалоб.Вставить("СписокGUID", СписокGUID);

		ВыборкаДетальныеЗаписи = ПолучитьТЗЖалоб(СтруктураПараметровТЗЖалоб);
			
		СписокТехнологов = ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, БазовыйПроизводитель);			
		
		//Оповещение о проверке качества продуктов ЧИСЛО #RVV829_9ed02cfb-e562-4dfb-a801-34ed193a30ea
		
		Таблица 		= ВернутьТекстПисьма("", ВыборкаДетальныеЗаписи);; //"Таблица";
		НомерЗаявки 	= "999";
		
		//Адрес 			= "lagp@automacon.ru";
		
		//Стр 				= СписокТехнологов.Добавить();
		//Стр.Адрес 			= Адрес;
		//Стр.РольТехнолог 	= "РольТехнолог";
		//Стр.Дневной 		= "Дневной";
		//Стр.Сотрудник 		= "Сотрудник";	
		
		//GUID_Заявки 	= Строка(Новый УникальныйИдентификатор);
		ID_MESSAGE 		= "999"; 
		TYPE_MESSAGE 	= "999";
		СсылкаАкцептант = "ТЕСТ";
		Объект_Ссылка	= Неопределено;
		
		Для Каждого Строка ИЗ СписокТехнологов Цикл
			Если ЗначениеЗаполнено(СокрЛП(Строка.Адрес)) Тогда
				СписокКому		= Новый СписокЗначений;
				СписокКому.Добавить(СокрЛП(Строка.Адрес));
				
				Тема = Тема + "RVVTYPE_1" + СокрЛП(Строка.РольТехнолог);
		        Тема = Тема + "RVVTYPE_2" + СокрЛП(Строка.Дневной);
				Тема = Тема + "RVVTYPE_3" + СокрЛП(Строка.Сотрудник);
							
				Попытка
					Тема = Тема + "RVVTYPE_4" + СокрЛП(СтрЗаменить(Строка.Номенклатура.id_tov, Символ(160), ""));
					Тема = Тема + "RVVTYPE_5" + СокрЛП(СтрЗаменить(Строка.БазовыйПроизводитель.ИД, Символ(160), ""));
				Исключение
				КонецПопытки;
				
				Если СписокКому.Количество() > 0 Тогда
					Адрес = СписокКому[0].Значение;
				Иначе
					Адрес = "lagp@automacon.ru";
				КонецЕсли;	
				
				ОтправитьЗаявкуНаПодтверждение(Тема, Таблица + "<br><br>", НомерЗаявки, СписокКому, УИД_НовогоПисьма, ID_MESSAGE, TYPE_MESSAGE, СокрЛП(Строка.Адрес), СсылкаАкцептант, Неопределено, Объект_Ссылка);
				
		    КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка_ ИЗ ВыделенныеСтроки Цикл
			НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка_.GUID_Загрузки);
			НаборЗаписей.Прочитать();
			Для Каждого Строка ИЗ НаборЗаписей Цикл								
				МенеджерЗаписи 							= РегистрыСведений.ЛогиПисемListAnswer.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ИдентификаторСообщения 	= УИД_НовогоПисьма;
				МенеджерЗаписи.text_email				= "Отправлено технологам";
				МенеджерЗаписи.Отправлено				= Истина;
				МенеджерЗаписи.Номенклатура				= Номенклатура;
				МенеджерЗаписи.Контрагент				= БазовыйПроизводитель;
				МенеджерЗаписи.СтатусПисемРассылки 		= Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЦикла;
			
		Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
			НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
			НаборЗаписей.Прочитать();
			Для Каждого Строка_ ИЗ НаборЗаписей Цикл
				Строка_.GUID_ПисьмоТехнологам = УИД_НовогоПисьма;				
				///-------СЮДА ДОБАЛЯЕМ ЗАПИСЬ НА SQL
				Insert_or_UpdateНажатие(УИД_НовогоПисьма, СтрЗаменить(Номенклатура.id_tov, Символ(160), ""), СтрЗаменить(БазовыйПроизводитель.ИД, Символ(160), ""));			
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

//+++АК LAGP 2018.03.18 ИП-00017097.04 Авторабота с отправкой обращений покупателей.
Функция ПолучитьТЗЖалоб(СтруктураПараметровТЗЖалоб = Неопределено)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК ОтправленоНаПроверку,
		|	РегистрСведенийОбращенияПокупателей.id_OK,
		|	РегистрСведенийОбращенияПокупателей.GUID_Загрузки,
		|	РегистрСведенийОбращенияПокупателей.ДатаДок,
		|	РегистрСведенийОбращенияПокупателей.ИсточникОбращения,
		|	РегистрСведенийОбращенияПокупателей.ТипОбращения,
		|	РегистрСведенийОбращенияПокупателей.ФИО_Покупателя,
		|	РегистрСведенийОбращенияПокупателей.Телефон,
		|	РегистрСведенийОбращенияПокупателей.email,
		|	РегистрСведенийОбращенияПокупателей.СтруктурнаяЕдиница,
		|	РегистрСведенийОбращенияПокупателей.ДатаСобытия,
		|	РегистрСведенийОбращенияПокупателей.Продавец1,
		|	РегистрСведенийОбращенияПокупателей.Продавец2,
		|	РегистрСведенийОбращенияПокупателей.Продавец3,
		|	РегистрСведенийОбращенияПокупателей.Номенклатура,
		|	РегистрСведенийОбращенияПокупателей.Производитель КАК Контрагент,
		|	РегистрСведенийОбращенияПокупателей.Примечание,
		|	РегистрСведенийОбращенияПокупателей.ОтветПокупателю,
		|	РегистрСведенийОбращенияПокупателей.СсылкаНаСайт,
		|	РегистрСведенийОбращенияПокупателей.ДатаВопроса,
		|	РегистрСведенийОбращенияПокупателей.Вопрос,
		|	РегистрСведенийОбращенияПокупателей.ВопросКому,
		|	РегистрСведенийОбращенияПокупателей.ДатаОтвета,
		|	РегистрСведенийОбращенияПокупателей.ПримечаниеОтвета,
		|	РегистрСведенийОбращенияПокупателей.РезультатОбращения,
		|	РегистрСведенийОбращенияПокупателей.ТипЖалобы,
		|	РегистрСведенийОбращенияПокупателей.Номер_Бланка,
		|	РегистрСведенийОбращенияПокупателей.Тип_Бланка,
		|	РегистрСведенийОбращенияПокупателей.ОтветПроизводителя,
		|	РегистрСведенийОбращенияПокупателей.СтатусПроизводителя,
		|	РегистрСведенийОбращенияПокупателей.ОтветПо,
		|	РегистрСведенийОбращенияПокупателей.id_Vizit,
		|	РегистрСведенийОбращенияПокупателей.Номер_Карты_ОК,
		|	РегистрСведенийОбращенияПокупателей.Ответственный,
		|	РегистрСведенийОбращенияПокупателей.НужноОбзвонить,
		|	РегистрСведенийОбращенияПокупателей.СтатусЖалобы,
		|	РегистрСведенийОбращенияПокупателей.ДатаОтправкиОтветственным,
		|	РегистрСведенийОбращенияПокупателей.GUID_Связи,
		|	РегистрСведенийОбращенияПокупателей.Закрыт,
		|	РегистрСведенийОбращенияПокупателей.ОтменаУведомления,
		|	РегистрСведенийОбращенияПокупателей.ПолучателиУведомления,
		|	РегистрСведенийОбращенияПокупателей.РегулярностьУведомления,
		|	РегистрСведенийОбращенияПокупателей.НачалоПериодаУведомления,
		|	РегистрСведенийОбращенияПокупателей.ОкончаниеПериодаУведомления,
		|	РегистрСведенийОбращенияПокупателей.ТипСписанияВозврата,
		|	РегистрСведенийОбращенияПокупателей.ПодтипСписанияВозврата,
		|	РегистрСведенийОбращенияПокупателей.ОтправленоСМСПокупателю,
		|	ВЫБОР
		|		КОГДА РегистрСведенийОбращенияПокупателей.КоличествоПрикрепленныхФайлов > 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьПрикрепленные,
		|	РегистрСведенийОбращенияПокупателей.ТипВключения,
		|	РегистрСведенийОбращенияПокупателей.Технолог,
		|	РегистрСведенийОбращенияПокупателей.ПродактМенеджер,
		|	РегистрСведенийОбращенияПокупателей.ЦФО,
		|	РегистрСведенийОбращенияПокупателей.ТерриториальныйУправляющий,
		|	РегистрСведенийОбращенияПокупателей.ПомощникУправляющего,
		|	РегистрСведенийОбращенияПокупателей.КомментарийУКК,
		|	РегистрСведенийОбращенияПокупателей.Новинка,
		|	РегистрСведенийОбращенияПокупателей.Аутсорс,
		|	РегистрСведенийОбращенияПокупателей.Оценка,
		|	РегистрСведенийОбращенияПокупателей.ОценкаЖалобы,
		|	РегистрСведенийОбращенияПокупателей.GUID_ПисьмоТехнологам
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК РегистрСведенийОбращенияПокупателей";
				
	Если ТипЗнч(СтруктураПараметровТЗЖалоб) = Тип("Структура") И СтруктураПараметровТЗЖалоб.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ";
		
		Если СтруктураПараметровТЗЖалоб.Свойство("ТипыОбращений") Тогда			
			Запрос.Текст = Запрос.Текст + Символы.ПС + ?(Прав(Запрос.Текст, 3) = "ГДЕ", "", "И ") + "РегистрСведенийОбращенияПокупателей.ТипОбращения В(&ТипыОбращений)";
			Запрос.УстановитьПараметр("ТипыОбращений", 	СтруктураПараметровТЗЖалоб.ТипыОбращений);
		КонецЕсли;	
		
		Если СтруктураПараметровТЗЖалоб.Свойство("НачалоДня") И СтруктураПараметровТЗЖалоб.Свойство("КонецДня") Тогда			
			Запрос.Текст = Запрос.Текст + Символы.ПС + ?(Прав(Запрос.Текст, 3) = "ГДЕ", "", "И ") + "РегистрСведенийОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоДня И &КонецДня";
			Запрос.УстановитьПараметр("НачалоДня", 		СтруктураПараметровТЗЖалоб.НачалоДня);
			Запрос.УстановитьПараметр("КонецДня", 		СтруктураПараметровТЗЖалоб.КонецДня);	
		КонецЕсли;
		
		Если СтруктураПараметровТЗЖалоб.Свойство("Номенклатура") Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + ?(Прав(Запрос.Текст, 3) = "ГДЕ", "", "И ") + "РегистрСведенийОбращенияПокупателей.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", 	СтруктураПараметровТЗЖалоб.Номенклатура);	
		КонецЕсли;
		
		Если СтруктураПараметровТЗЖалоб.Свойство("Поставщик") Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + ?(Прав(Запрос.Текст, 3) = "ГДЕ", "", "И ") + "РегистрСведенийОбращенияПокупателей.Производитель = &Производитель";
			Запрос.УстановитьПараметр("Производитель", 	СтруктураПараметровТЗЖалоб.Поставщик);	
		КонецЕсли;
		
		Если СтруктураПараметровТЗЖалоб.Свойство("СписокGUID") Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + ?(Прав(Запрос.Текст, 3) = "ГДЕ", "", "И ") + "РегистрСведенийОбращенияПокупателей.GUID_Загрузки В(&GUID_Загрузки)";
			Запрос.УстановитьПараметр("GUID_Загрузки", 	СтруктураПараметровТЗЖалоб.СписокGUID);	
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗДетальныеЗаписи = Запрос.Выполнить().Выгрузить();

	Возврат ТЗДетальныеЗаписи;
	
КонецФункции	

//+++АК LAGP 2018.03.23 ИП-00017097.05 Отправка месячной статистики.
Процедура ОтчётПоОповещениямПроверкиТовара() Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТЗПисем = Новый ТаблицаЗначений;
	ТЗПисем.Колонки.Добавить("email_uid", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТЗПисем.Колонки.Добавить("date_add", Новый ОписаниеТипов("Строка"));
	ТЗПисем.Колонки.Добавить("type_email", Новый ОписаниеТипов("Строка"));
	ТЗПисем.Колонки.Добавить("СтатусПисемРассылки", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПисемРассылки"));
	ТЗПисем.Колонки.Добавить("Вердикт_uid", Новый ОписаниеТипов("Число"));	
	
	//
	ДатаНачала 		= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-1));
	ДатаОкончания  	= НачалоМесяца(ТекущаяДата());
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	 
	ТекстЗапросаSQL = "SELECT TD.email_uid,  TD.date_add, TD.type_email, TD.id_kontr, TD.id_tov
	|FROM  SMS_Repl.dbo.List_emails as TD with (nolock)
	|WHERE TD.date_add >= " + ВнешниеДанные.ФорматПоля(ДатаНачала) + " AND TD.date_add < " + ВнешниеДанные.ФорматПоля(ДатаОкончания);	
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НоваяСтрока						= ТЗПисем.Добавить();
			НоваяСтрока.email_uid 			= СтрЗаменить(СтрЗаменить(rs.Fields("email_uid").Value, "{", ""), "}", "");					
			НоваяСтрока.date_add 			= rs.Fields("date_add").Value;
			НоваяСтрока.type_email 			= rs.Fields("type_email").Value;
			НоваяСтрока.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.НеОтработано;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	List_emails.email_uid,
	|	List_emails.date_add,
	|	List_emails.type_email,
	|	List_emails.Вердикт_uid,
	|	List_emails.СтатусПисемРассылки
	|ПОМЕСТИТЬ Т_1
	|ИЗ
	|	&Таблица КАК List_emails
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_1.email_uid,
	|	ВЫБОР
	|		КОГДА ЛогиПисемListAnswer.СтатусПисемРассылки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)
	|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ПустаяСсылка)
	|				ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.НеОтработано)
	|		ИНАЧЕ ЛогиПисемListAnswer.СтатусПисемРассылки
	|	КОНЕЦ КАК СтатусПисемРассылки
	|ПОМЕСТИТЬ ВтПисьмоСтатус
	|ИЗ
	|	Т_1 КАК Т_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогиПисемListAnswer КАК ЛогиПисемListAnswer
	|		ПО Т_1.email_uid = ЛогиПисемListAnswer.ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПисьмоСтатус.СтатусПисемРассылки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтПисьмоСтатус.email_uid) КАК Количество
	|ИЗ
	|	ВтПисьмоСтатус КАК ВтПисьмоСтатус
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПисьмоСтатус.СтатусПисемРассылки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусПисемРассылки";
	
	Запрос.УстановитьПараметр("Таблица", ТЗПисем.Скопировать());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Тема = "Статистика работы с оповещениями о проверке качества товара за " + Формат(ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ДатаОкончания - 1, "ДФ=dd.MM.yy");
	
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.Текст = 
		"ВЫБРАТЬ
		|	АК_ГруппыРассылки.Емейл
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	АК_ГруппыРассылки.Группа = &Группа
		|	И АК_ГруппыРассылки.ФизЛицо.Активный = ИСТИНА";
	
	ЗапросАдресов.УстановитьПараметр("Группа", Справочники.АК_ГруппыРассылки.РассылкаСтатистикиРаботыСОповещениямиОПроверкеКачестваТовара);
	
	РезультатЗапросаАдресов = ЗапросАдресов.Выполнить();
	
	ВыборкаДетальныеЗаписиАдресов = РезультатЗапросаАдресов.Выбрать();
	
	СписокКому = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписиАдресов.Следующий() Цикл		
		СписокКому.Добавить(ВыборкаДетальныеЗаписиАдресов.Емейл);		
	КонецЦикла;		
	
	Таблица = "";
	
	Для каждого СтрокаРезультата из РезультатЗапроса Цикл
		Таблица = Таблица + "<br>";
		Таблица = Таблица + СтрокаРезультата.СтатусПисемРассылки + "	- " + СтрокаРезультата.Количество;		
	КонецЦикла;
	Таблица = Таблица + "<br>";
	Таблица = Таблица + "<b>" + "Всего" + "			- " + РезультатЗапроса.Итог("Количество") + "</b>";
	
	НомерЗаявки 	= "";
	GUID_Заявки 	= "";
	ID_MESSAGE  	= "";
	TYPE_MESSAGE 	= "";
	СсылкаАкцептант = "";
	УчетнаяЗапись 	= "";
	Объект_Ссылка 	= "";

	Если СписокКому.Количество() > 0 Тогда
		Адрес = СписокКому[0].Значение;	
	Иначе
		Адрес = "lagp@automacon.ru"; 
	КонецЕсли;	
		
	ОтправитьЗаявкуНаПодтверждение(Тема, Таблица, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, Неопределено, Объект_Ссылка)
	
КонецПроцедуры