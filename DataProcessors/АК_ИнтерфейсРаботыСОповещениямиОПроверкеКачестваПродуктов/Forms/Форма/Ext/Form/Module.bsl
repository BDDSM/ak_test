//---АК ZHAS 16-09-17 ИП-00015200.02.000.00001
//Выложена в хранилище исключительно в ознакомительных целях
//Для получения ОС от пользователей

&НаСервере
Процедура ПрочитатьДанныеСSQLНаСервере()
	Объект.List_emails1.Очистить();
	
	ДатаНачала=НачалоДня(НачалоНедели(ТекущаяДата())-14*24*60*60); //+++АК LAGP 2018.02.20 ИП-00017097.02 ограничение в 2 недели
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	 
	ТекстЗапросаSQL = "SELECT TD.email_uid,  TD.date_add, TD.type_email, TD.id_kontr, TD.id_tov
	|FROM  SMS_Repl.dbo.List_emails as TD with (nolock)
	
	//+++АК LAGP 2018.02.20 ИП-00017097.02
	|WHERE TD.date_add >= " + ВнешниеДанные.ФорматПоля(ДатаНачала);	
	//---АК LAGP
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НоваяСтрока						= Объект.List_emails1.Добавить();
			//НоваяСтрока.email_uid 			= rs.Fields("email_uid").Value;			
			
			НоваяСтрока.email_uid 			= СтрЗаменить(СтрЗаменить(rs.Fields("email_uid").Value, "{", ""), "}", "");					
			НоваяСтрока.date_add 			= rs.Fields("date_add").Value;
			НоваяСтрока.type_email 			= rs.Fields("type_email").Value;
			НоваяСтрока.id_kontr 			= rs.Fields("id_kontr").Value;
			НоваяСтрока.id_tov 				= rs.Fields("id_tov").Value;
			
			//Надо будет переписать на одинзапрос
			
			//+++АК LAGP 2018.03.25 ИП-00017097.05 Игнорирование контрагентов с пустым ИД
			//НоваяСтрока.Контрагент 		= ВернутьКонтрагента(НоваяСтрока.id_kontr);
			//НоваяСтрока.Номенклатура 		= ВернутьНоменклатуру(НоваяСтрока.id_tov);
			//---АК LAGP
			
			НоваяСтрока.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.НеОтработано;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	//+++АК LAGP 2018.03.25 ИП-00017097.05 Игнорирование контрагентов с пустым ИД
	ТЗПисем = Объект.List_emails1.Выгрузить();
	
	ЗапросКонтрагентов = Новый Запрос;
	ЗапросКонтрагентов.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИД КАК id_kontr
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИД В(&ИД)";
	ЗапросКонтрагентов.УстановитьПараметр("ИД", ТЗПисем.ВыгрузитьКолонку("id_kontr"));
	РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить().Выгрузить();

	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov В(&ИД)";
	ЗапросНоменклатуры.УстановитьПараметр("ИД", ТЗПисем.ВыгрузитьКолонку("id_tov"));
	РезультатЗапросаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗКонтрагентов Из РезультатЗапросаКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;	
		
		ОтборКонтрагента = Новый Структура;
		ОтборКонтрагента.Вставить("id_kontr", СтрокаТЗКонтрагентов.id_kontr);
		НайденныеСтрокиТЗПисем = ТЗПисем.НайтиСтроки(ОтборКонтрагента);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗПисем) Тогда
			Для каждого СтрокаТЗПисем Из НайденныеСтрокиТЗПисем Цикл
				СтрокаТЗПисем.Контрагент = СтрокаТЗКонтрагентов.Контрагент;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;	
	
	Для каждого СтрокаТЗНоменклатуры Из РезультатЗапросаНоменклатуры Цикл	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНоменклатуры = Новый Структура;
		ОтборНоменклатуры.Вставить("id_tov", СтрокаТЗНоменклатуры.id_tov);
		НайденныеСтрокиТЗПисем = ТЗПисем.НайтиСтроки(ОтборНоменклатуры);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗПисем) Тогда
			Для каждого СтрокаТЗПисем Из НайденныеСтрокиТЗПисем Цикл
				СтрокаТЗПисем.Номенклатура = СтрокаТЗНоменклатуры.Номенклатура;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;
	//---АК LAGP	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	List_emails.Контрагент,
	|	List_emails.Номенклатура,
	|	List_emails.email_uid,
	|	List_emails.date_add,
	|	List_emails.type_email,
	|	List_emails.id_kontr,
	|	List_emails.id_tov,
	|	List_emails.Вердикт_uid,
	|	List_emails.СтатусПисемРассылки
	|ПОМЕСТИТЬ Т_1
	|ИЗ
	|	&Таблица КАК List_emails
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_1.Контрагент,
	|	Т_1.Номенклатура,
	|	Т_1.email_uid,
	|	Т_1.date_add,
	|	Т_1.type_email,
	|	Т_1.id_kontr,
	|	Т_1.id_tov,
	|	Т_1.Вердикт_uid,
	//|	ВЫБОР
	//|		КОГДА ЛогиПисемListAnswer.Отправлено
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.НеОтработано)
	//|	КОНЕЦ КАК СтатусПисемРассылки1,
	
	|	ВЫБОР
	|		КОГДА ЛогиПисемListAnswer.СтатусПисемРассылки
	|			<> ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку)
	
	|	ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ПустаяСсылка)
	|	ИЛИ ЛогиПисемListAnswer.СтатусПисемРассылки Есть NULL
	|	Тогда
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.НеОтработано) ИНАЧЕ  ЛогиПисемListAnswer.СтатусПисемРассылки
	|	КОНЕЦ КАК СтатусПисемРассылки,
	
	//|	ЛогиПисемListAnswer.СтатусПисемРассылки1,
	
	//|	ЗНАЧЕНИЕ(Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку) КАК СтатусПисемРассылки, 
	
	|	ЛогиПисемListAnswer.text_email,
	|	ЛогиПисемListAnswer.Отправлено КАК ОтправленоПисьмо
	|ИЗ
	|	Т_1 КАК Т_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогиПисемListAnswer КАК ЛогиПисемListAnswer
	|		ПО Т_1.email_uid = ЛогиПисемListAnswer.ИдентификаторСообщения";
	
	//Сообщить("22");
	
	//+++АК LAGP 2018.03.25 ИП-00017097.05 Игнорирование контрагентов с пустым ИД
	//Запрос.УстановитьПараметр("Таблица", Объект.List_emails1.Выгрузить());
	Запрос.УстановитьПараметр("Таблица", ТЗПисем);
	//---АК LAGP
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.List_emails.Загрузить(РезультатЗапроса);
	ПолучитьВердикты();
	Если НЕ ТЗВердикты = Неопределено Тогда
		Для каждого СтрокаТЗ Из Объект.List_emails Цикл
			ИскСтрокиТЗ = ТЗВердикты.НайтиСтроки(Новый Структура("email_uid", СтрокаТЗ.email_uid));
			Если ИскСтрокиТЗ.Количество() > 0 Тогда
				СтрокаТЗ.Вердикт_uid = Формат(ИскСтрокиТЗ[0].Отрицательный, "БЛ=Хороший; БИ=Плохой");
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	Объект.List_emails1.Загрузить(Объект.List_emails.Выгрузить());
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

//---ФУНКЦИИ НАДО СХЛОПНУТЬ (ЗАПРОС В ЦИКЛЕ)
Функция ВернутьКонтрагента(ИД)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИД = &ИД";
	Запрос.УстановитьПараметр("ИД", ИД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Контрагент;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

//---ФУНКЦИИ НАДО СХЛОПНУТЬ (ЗАПРОС В ЦИКЛЕ)
Функция ВернутьНоменклатуру(ИД)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Контрагенты
	|ГДЕ
	|	Контрагенты.id_tov = &ИД";
	Запрос.УстановитьПараметр("ИД", ИД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте        
Процедура ПрочитатьДанныеСSQL(Команда)
	ПрочитатьДанныеСSQLНаСервере();
КонецПроцедуры

Функция ВертутьДокументПроверкаКачестваПродуктов(ИдентификаторСообщения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверкаКачестваПродуктов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПроверкаКачестваПродуктов КАК ПроверкаКачестваПродуктов
	|ГДЕ
	|	ПроверкаКачестваПродуктов.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;       
КонецФункции

Функция ВертутьДокументВердиктыОценки(ИдентификаторСообщения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВердиктыОценки.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.ВердиктыОценки КАК ВердиктыОценки
	//|ГДЕ
	//|	ВердиктыОценки.ИдентификаторСообщения = &ИдентификаторСообщения";
	//
	//Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//КонецЦикла;
	//
	//Возврат Неопределено;       
КонецФункции

Функция ПолучитьВердикты(УИД = Неопределено)
	
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("email_uid");
	//ТЗ.Колонки.Добавить("Вердикт");
	//ТЗ.Колонки.Добавить("Отрицательный");
	ТЗВердикты.Очистить();
	
	Если Уид = Неопределено Тогда //По всем строкам ТЧ
		//ТЗ = Объект.List_emails.Выгрузить(, "email_uid");
		//ТЗ.Свернуть("email_uid");
		//ОтборУид = "'";
		//Для каждого СтрокаТЗ Из ТЗ Цикл
		//	ОтборУид = ОтборУид + "" + СтрокаТЗ.email_uid + ";";
		//КонецЦикла;
		//ОтборУид = Лев(ОтборУид, СтрДлина(ОтборУид) - 1) + "'";
	Иначе
		ОтборУид = "'" + УИД + "'";
	КонецЕсли; 
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапросаSQL = "SELECT [email_uid]
		 |     ,[result_uid]
		 | FROM [SMS_REPL].[dbo].[List_emails_results](nolock)";
		 //| WHERE email_uid in (" + ОтборУид + ")"; Возврат Неопределено;
	
	Попытка
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			 
			ИскВердикты = СоответствиеВердиктов.НайтиСтроки(Новый Структура("Идентификатор", СтрЗаменить(СтрЗаменить(rs.fields("result_uid").Value, "{", ""), "}", "")));
			Если ИскВердикты.Количество() = 0 Тогда
				Сообщить("Не найден вердикт с идентификатором " + СтрЗаменить(СтрЗаменить(rs.fields("result_uid").Value, "{", ""), "}", ""));
				rs.MoveNext();
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрока						= ТЗВердикты.Добавить();
			НоваяСтрока.email_uid = СтрЗаменить(СтрЗаменить(rs.fields("email_uid").Value, "{", ""), "}", "");
			
			НоваяСтрока.Вердикт = ИскВердикты[0].Ссылка;
			НоваяСтрока.Отрицательный = ИскВердикты[0].Отрицательный;
			rs.MoveNext();
		КонецЦикла;
		
		ADOСоединение.Close();
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура List_emailsОтправленоНаПроверкуПриИзмененииНаСервере(СтатусПисемРассылки, ТекущаяСтрока, НомерСтроки, email_uid, Номенклатура, Контрагент)
	//+++АК malv 2018.01.18 В транзакции всё это
	НачатьТранзакцию();
	//---АК malv
	СтрокиРедактирования = Объект.List_emails1.НайтиСтроки(Новый Структура("email_uid", email_uid));
	Для Каждого Строка ИЗ СтрокиРедактирования Цикл
		Строка.СтатусПисемРассылки = СтатусПисемРассылки; 
		Строка.ОтправленоПисьмо = СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку");
	КонецЦикла;
	СтрокиРедактирования = Объект.List_emails.НайтиСтроки(Новый Структура("email_uid", email_uid));
	Для Каждого Строка ИЗ СтрокиРедактирования Цикл
		Строка.СтатусПисемРассылки = СтатусПисемРассылки; 
		Строка.ОтправленоПисьмо = СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку");
	КонецЦикла;
	МенеджерЗаписи 							= РегистрыСведений.ЛогиПисемListAnswer.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторСообщения 	= СтрЗаменить(СтрЗаменить(email_uid, "{", ""), "}", ""); //email_uid;
	МенеджерЗаписи.text_email				= "Отправлено технологам";
	МенеджерЗаписи.Отправлено				= Истина;
	МенеджерЗаписи.Номенклатура				= Номенклатура;
	МенеджерЗаписи.Контрагент				= Контрагент;
	МенеджерЗаписи.СтатусПисемРассылки = СтатусПисемРассылки;
	МенеджерЗаписи.Записать();
	
//+++АК malv 2018.01.18 Не синхроним лог ГМаил! Надо исправить, иначе не заполняется ничего там дяльше по регламенту
	Если ЗначениеЗаполнено(МенеджерЗаписи.ИдентификаторСообщения) Тогда
		НаборЗаписейЛог = РегистрыСведений.ЛогиПисемGMAIL.СоздатьНаборЗаписей();
		НаборЗаписейЛог.Отбор.ИдентификаторСообщения.Установить(МенеджерЗаписи.ИдентификаторСообщения, Истина);
	    НаборЗаписейЛог.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписейЛог Цикл
			ЗаписьНабора.ID_Отчета = "800"; //В хранимке хардом - тут тоже хардом
		КонецЦикла;
		НаборЗаписейЛог.Записать();
	КонецЕсли; 	
//---АК malv
	
	Если СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку") Тогда
	
		ОтправитьПисьмо_Т1НаСервере(email_uid, Номенклатура, Контрагент);
	
	КонецЕсли;
	
	
	//--ТУТ НАДО ЕЩЕ ДОК СОЗДАВАТЬ?	
	
	
	
	////Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
	////	НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
	////	НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
	////	НаборЗаписей.Прочитать();
	////	Для Каждого Строка_ ИЗ НаборЗаписей Цикл
	////		Строка_.GUID_ПисьмоТехнологам = УИД_НовогоПисьма;
	////		//СтрокиОтправленные = Объект.List_emails1.НайтиСтроки(Новый Структура("email_uid, Номенклатура, Контрагент", Строка.GUID_Загрузки, Строка_.Номенклатура, Строка_.Производитель));
	////		//Для Каждого СтрОтправлено ИЗ СтрокиОтправленные Цикл
	////		//	Если 	НачалоДня(СтрОтправлено.date_add) - 60*60*24*3 <= Строка_.ДатаДок И 
	////		//			НачалоДня(СтрОтправлено.date_add) + 60*60*24*3 >= Строка_.ДатаДок
	////		//			Тогда
	////		//			Сообщить("Уже имеются отправленные письма для данной позиции по данному производителю");
	////		//			Возврат;
	////		//	КонецЕсли;
	////		//КонецЦикла;
	////	КонецЦикла;
	////	НаборЗаписей.Записать();
	////КонецЦикла;

	
	
//+++АК malv 2018.01.18 В транзакции всё это
	ЗафиксироватьТранзакцию();
//---АК malv
	
КонецПроцедуры                                              

&НаКлиенте
Процедура List_emailsОтправленоНаПроверкуПриИзменении(Элемент)
	СтатусПисемРассылки = Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки; // = Ложь;
	ТекущаяСтрока 		= Элементы.List_emails.ТекущаяСтрока;
	НомерСтроки 		= Элементы.List_emails.ТекущиеДанные.НомерСтроки;
	email_uid			= Элементы.List_emails.ТекущиеДанные.email_uid;
	
	Номенклатура		= Элементы.List_emails.ТекущиеДанные.Номенклатура;
	Контрагент			= Элементы.List_emails.ТекущиеДанные.Контрагент;
	
	List_emailsОтправленоНаПроверкуПриИзмененииНаСервере(СтатусПисемРассылки, ТекущаяСтрока, НомерСтроки, email_uid, Номенклатура, Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНач, Объект.ДатаКон);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНач 	= СтандартныйПериод.ДатаНачала;
		Объект.ДатаКон 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДатаНач)
		И ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаКон)
			И Объект.ДатаНач > Объект.ДатаКон Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			Объект.ДатаНач = НачалоМесяца(Объект.ДатаКон);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДатаНач = НачалоМесяца(Объект.ДатаНач) Тогда
			Объект.ДатаНач = НачалоМесяца(Объект.ДатаНач)
		КонецЕсли;
		Если НЕ Объект.ДатаКон = КонецМесяца(Объект.ДатаКон) Тогда
			Объект.ДатаКон = КонецМесяца(Объект.ДатаКон)
		КонецЕсли;
		
		//ПриИзмененииПериода();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНач) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаКон) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанныеПофильтруНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериод1(Команда)
	// Вставить содержимое обработчика.
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНач1, Объект.ДатаКон1);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНач1 	= СтандартныйПериод.ДатаНачала;
		Объект.ДатаКон1 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДатаКон1)
		И ЗначениеЗаполнено(Объект.ДатаКон1) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаКон1)
			И Объект.ДатаНач1 > Объект.ДатаОкончания Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			Объект.ДатаНач1 = НачалоМесяца(Объект.ДатаОкончания);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДатаНач1 = НачалоМесяца(Объект.ДатаНач1) Тогда
			Объект.ДатаНач1 = НачалоМесяца(Объект.ДатаНач1)
		КонецЕсли;
		Если НЕ Объект.ДатаКон1 = КонецМесяца(Объект.ДатаКон1) Тогда
			Объект.ДатаКон1 = КонецМесяца(Объект.ДатаКон1)
		КонецЕсли;
		
		//ПриИзмененииПериода();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНач1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаКон1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	//ДатаНачПриИзмененииНаСервере();
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПофильтруНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	List_emails.Контрагент,
	|	List_emails.Номенклатура,
	|	List_emails.email_uid,
	|	List_emails.date_add,
	|	List_emails.type_email,
	|	List_emails.id_kontr,
	|	List_emails.id_tov,
	
	|	List_emails.text_email,
	
	|	List_emails.Вердикт_uid,
	
	|	List_emails.СтатусПисемРассылки,
	|	List_emails.ОтправленоПисьмо
	|ПОМЕСТИТЬ Т_1
	|ИЗ
	|	&Таблица КАК List_emails
	|ГДЕ 1=1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_1.Контрагент КАК Контрагент,
	|	Т_1.Номенклатура КАК Номенклатура,
	|	Т_1.email_uid,
	|	Т_1.date_add КАК date_add,
	|	Т_1.type_email,
	|	Т_1.id_kontr,
	
	|	Т_1.text_email,
	
	|	Т_1.Вердикт_uid,
	
	|	Т_1.id_tov,
	|	Т_1.СтатусПисемРассылки,
	|	Т_1.ОтправленоПисьмо
	|ИЗ
	|	Т_1 КАК Т_1";
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	date_add,
	//|	Контрагент.Наименование,
	//|	Номенклатура";
	
	Запрос.УстановитьПараметр("Таблица", 		Объект.List_emails1.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(Объект.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("Дата3Дня", 		НачалоДня(ТекущаяДата()) - 60*60*24*3);
	Запрос.УстановитьПараметр("Контрагент", 	Объект.ОтборКонтрагент);
	Запрос.УстановитьПараметр("Номенклатура", 	Объект.ОтборНоменклатура);
	
	ТекстОтбора = "";
	Если ЗначениеЗаполнено(Объект.ДатаНач) Тогда
		ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора + " И ", ТекстОтбора);
		ТекстОтбора = ТекстОтбора + "List_emails.date_add >= &ДатаНач";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора + " И ", ТекстОтбора);
		ТекстОтбора = ТекстОтбора + "List_emails.date_add <= &ДатаКон";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтборКонтрагент) Тогда
		ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора + " И ", ТекстОтбора);
		ТекстОтбора = ТекстОтбора + "List_emails.Контрагент = &Контрагент";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтборНоменклатура) Тогда
		ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора + " И ", ТекстОтбора);
		ТекстОтбора = ТекстОтбора + "List_emails.Номенклатура = &Номенклатура";
	КонецЕсли;
	Если Объект.ЗаПоследние3Дня Тогда
		ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора + " И ", ТекстОтбора);
		ТекстОтбора = ТекстОтбора + "List_emails.date_add >= &Дата3Дня";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ 1=1", "ГДЕ " + ТекстОтбора);
	КонецЕсли;
	
	
	//Стр = ТаблицаПорядок.Добавить();
	//Стр.НаименованиеПорядка = "По дате";
	//Стр.ИмяПорядка = "date_add";
	//Стр = ТаблицаПорядок.Добавить();
	//Стр.НаименованиеПорядка = "По Контрагенту";
	//Стр.ИмяПорядка = "Контрагент.Наименование";
	//Стр = ТаблицаПорядок.Добавить();
	//Стр.НаименованиеПорядка = "По Номенклатуре";
	//Стр.ИмяПорядка = "Номенклатура.Наименование";
	
	
	
	ОтборПорядок = "";
	ОтборПорядок = ОтборПорядок + "date_add убыв" + ",";
	ОтборПорядок = ОтборПорядок + "Номенклатура.Наименование" + ",";
	ОтборПорядок = ОтборПорядок + "Контрагент.Наименование" + ",";
	Для Каждого Строка ИЗ ТаблицаПорядок Цикл
		ОтборПорядок = ОтборПорядок + Строка.ИмяПорядка + ",";
	КонецЦикла;
	ОтборПорядок = " УПОРЯДОЧИТЬ ПО " + Лев(ОтборПорядок, СтрДлина(ОтборПорядок) - 1);
	
	Запрос.Текст = Запрос.Текст + ОтборПорядок;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.List_emails.Загрузить(РезультатЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонПриИзменении(Элемент)
	//ДатаКонПриИзмененииНаСервере()
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатура1ПриИзменении(Элемент)
	//ОтборНоменклатура1ПриИзмененииНаСервере();
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	//ОтборКонтрагентПриИзмененииНаСервере();
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследние3Дня1ПриИзменении(Элемент)
	//ЗаПоследние3Дня1ПриИзмененииНаСервере();
	Объект.ДатаНач = НачалоДня(ТекущаяДата()) - 60*60*24*2;
	Объект.ДатаКон = КонецДня(ТекущаяДата());
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаСервере
Процедура List_emailsПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура List_emailsПриИзменении(Элемент)
	А = 1;
	//Элементы.List_emails.ТекущиеДанные.НомерСтроки
	//Элементы.List_emails.ТекущиеДанные.email_uid
	
	
	List_emailsПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьПоЗначениюВТекущейКолонке1НаСервере(ИмяКолонки, ДанныеДляФильтра)
	Если ИмяКолонки = "Контрагент" Тогда
		Объект.ОтборКонтрагент1 = ДанныеДляФильтра;
	ИначеЕсли ИмяКолонки = "Номенклатура" Тогда
		Объект.ОтборНоменклатура1 = ДанныеДляФильтра;
	КонецЕсли;
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтфильтроватьПоЗначениюВТекущейКолонке1(Команда)
	Если Элементы.List_emails.ТекущиеДанные <> Неопределено Тогда
		ИмяКолонки 			= СтрЗаменить(Элементы.Список.ТекущийЭлемент.Имя, "Список", "");
		ДанныеДляФильтра 	= Элементы.Список.ТекущиеДанные[ИмяКолонки];
		
		ОтфильтроватьПоЗначениюВТекущейКолонке1НаСервере(ИмяКолонки, ДанныеДляФильтра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПорядокПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПорядокПриИзменении(Элемент)
	ТаблицаПорядокПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборНаСервере()
	СтруктураОтборов = Новый Структура;
	//СтруктураОтборов.Вставить("date_add_Лево", ЗначениеЗаполнено(Объект.ДатаНач1));
	//СтруктураОтборов.Вставить("date_add_Право", ЗначениеЗаполнено(Объект.ДатаКон1));
	СтруктураОтборов.Вставить("Контрагент", 	?(ЗначениеЗаполнено(Объект.ОтборКонтрагент1),Объект.ОтборКонтрагент1, Неопределено));
	СтруктураОтборов.Вставить("Номенклатура", 	?(ЗначениеЗаполнено(Объект.ОтборНоменклатура1), Объект.ОтборНоменклатура1, Неопределено));
	СтруктураОтборов.Вставить("date_add_3_Дня", Объект.ЗаПоследние3Дня1);
	
	ОбновитьОтбор("Контрагент", 	?(ЗначениеЗаполнено(Объект.ОтборКонтрагент1),	Объект.ОтборКонтрагент1, 	Неопределено), ВидСравненияКомпоновкиДанных.Равно);
	ОбновитьОтбор("Номенклатура", 	?(ЗначениеЗаполнено(Объект.ОтборНоменклатура1), Объект.ОтборНоменклатура1, 	Неопределено), ВидСравненияКомпоновкиДанных.Равно);
	
	Список.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ОтборКонтрагент1) Тогда
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= Объект.ОтборКонтрагент1;
	КонецЕсли;
	
	ПолученныеПисьма.Отбор.Элементы.Очистить();
	//Если ЗначениеЗаполнено(Объект.GUID) Тогда     
		ЭлементыОтбора 					= ПолученныеПисьма.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("UID");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= Объект.GUID;
	//КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ОтборНоменклатура1) Тогда
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= Объект.ОтборНоменклатура1;
	КонецЕсли;
	
	
	Если Объект.ЗаПоследние3Дня1 Тогда
		//ОбновитьОтбор("ДатаДок", НачалоДня(ТекущаяДата()) - 60*60*24*3, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= НачалоДня(ТекущаяДата()) - 60*60*24*3;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаНач1) И ЗначениеЗаполнено(Объект.ДатаКон1) Тогда
		//ОбновитьОтбор("ДатаДок", Неопределено, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		
		ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементыОтбора.Родитель			= ГруппаОтбора;
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= Объект.ДатаНач1;
		
		ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементыОтбора.Родитель			= ГруппаОтбора;
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= КонецДня(Объект.ДатаКон1);
		
		
		//ЭтоУбрать
		//ИначеЕсли Объект.GUDI_отправленныеЗагрузки.Количество() > 0 Тогда	
		//	
		//	Если Объект.СкрытьОтправленные Тогда
		//	ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("GUID_Загрузки");
		//	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеВСписке;
		//	ЭлементыОтбора.Использование 	= Истина;
		//	ТЗ 								= Объект.GUDI_отправленныеЗагрузки.Выгрузить();
		//	
		//	Для Каждого Строка ИЗ ТЗ Цикл
		//		Строка.GUID_Загрузки = СтрЗаменить(Строка.GUID_Загрузки, "{", "");
		//		Строка.GUID_Загрузки = СтрЗаменить(Строка.GUID_Загрузки, "}", "");   //ad0149a1-756b-40f1-a98a-c52f60325ce3
		//	КонецЦикла;                                                              //ad0149a1-756b-40f1-a98a-c52f60325ce3
		//	
		//	
		//	
		//	ЭлементыОтбора.ПравоеЗначение 	= ТЗ.ВыгрузитьКолонку("GUID_Загрузки"); //Объект.GUDI_отправленныеЗагрузки.Выгрузить("GUID_Загрузки");
	КонецЕсли;	
	//ЭтоОставить
	Если Объект.СкрытьОтправленные Тогда	
		
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("GUID_ПисьмоТехнологам");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементыОтбора.Использование 	= Истина;
		
		
		
		//Иначе
		
	КонецЕсли;
	
	
	
	
	
	Если ЗначениеЗаполнено(Объект.ДатаНач1) И НЕ ЗначениеЗаполнено(Объект.ДатаКон1) Тогда
		//ОбновитьОтбор("ДатаДок", Объект.ДатаНач1, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= Объект.ДатаНач1
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДатаНач1) И ЗначениеЗаполнено(Объект.ДатаКон1) Тогда
		//ОбновитьОтбор("ДатаДок", Истина, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= КонецДня(Объект.ДатаКон1);
		
	КонецЕсли;
	
	Если Объект.Оценки_1и2 Тогда
		СписокОценок = Новый СписокЗначений;
		СписокОценок.Добавить(1);
		СписокОценок.Добавить(2);
		
		ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Оценка");
		ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементыОтбора.Использование 	= Истина;
		ЭлементыОтбора.ПравоеЗначение 	= СписокОценок;
		
	КонецЕсли;
	
	Если Объект.Исключить_3ю_Плохую_Оценку Тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияПокупателей.GUID_Загрузки,
		|	НАЧАЛОПЕРИОДА(ОбращенияПокупателей.ДатаДок, ДЕНЬ) КАК Дата,
		|	ОбращенияПокупателей.Номенклатура,
		|	ОбращенияПокупателей.Производитель
		|ПОМЕСТИТЬ ИсходнаяТаблицаОценок
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОбращенияПокупателей.Оценка МЕЖДУ 0 И 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблицаОценок.Дата,
		|	ИсходнаяТаблицаОценок.Номенклатура,
		|	ИсходнаяТаблицаОценок.Производитель,
		|	СУММА(1) КАК Всего
		|ПОМЕСТИТЬ СвернутоПоСКЮИКа
		|ИЗ
		|	ИсходнаяТаблицаОценок КАК ИсходнаяТаблицаОценок
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходнаяТаблицаОценок.Дата,
		|	ИсходнаяТаблицаОценок.Номенклатура,
		|	ИсходнаяТаблицаОценок.Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвернутоПоСКЮИКа.Номенклатура,
		|	СвернутоПоСКЮИКа.Производитель
		|ПОМЕСТИТЬ СписокСКЮИКА_С_3мяПлОценками
		|ИЗ
		|	СвернутоПоСКЮИКа КАК СвернутоПоСКЮИКа
		|ГДЕ
		|	СвернутоПоСКЮИКа.Всего >= 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблицаОценок.GUID_Загрузки КАК ИД_ЗАПИСЬ_С_СЛОХОЙ_ОЦЕНКОЙ
		|ИЗ
		|	СписокСКЮИКА_С_3мяПлОценками КАК СписокСКЮИКА_С_3мяПлОценками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходнаяТаблицаОценок КАК ИсходнаяТаблицаОценок
		|		ПО СписокСКЮИКА_С_3мяПлОценками.Номенклатура = ИсходнаяТаблицаОценок.Номенклатура
		|			И СписокСКЮИКА_С_3мяПлОценками.Производитель = ИсходнаяТаблицаОценок.Производитель
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходнаяТаблицаОценок.GUID_Загрузки";
		
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()) - 60*60*24*3);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СписокОценок = Новый СписокЗначений;
		//СписокОценок.Добавить(1);
		//СписокОценок.Добавить(2);
		//
		//ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Оценка");
		//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		//ЭлементыОтбора.Использование 	= Истина;
		//ЭлементыОтбора.ПравоеЗначение 	= СписокОценок;
		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			СписокОценок.Добавить(ВыборкаДетальныеЗаписи.ИД_ЗАПИСЬ_С_СЛОХОЙ_ОЦЕНКОЙ);
			//СписокОценок.Добавить(2);
			
			ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("GUID_Загрузки");
			ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементыОтбора.Использование 	= Истина;
			ЭлементыОтбора.ПравоеЗначение 	= СписокОценок;
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
	КонецЕсли;
	
	
	//СтруктураОтборов = Новый Структура;
	//СтруктураОтборов.Вставить("ДатаДок");
	//СтруктураОтборов.Вставить("Контрагент");
	//СтруктураОтборов.Вставить("Номенклатура");
	////СтруктураОтборов.Вставить("date_add_3_Дня");
	//Для Каждого КлючИЗнаение ИЗ СтруктураОтборов Цикл
	//	ИнициализироватьОтбор(КлючИЗнаение.Ключ, Ложь);
	//КонецЦикла;;
	
	
	//ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//
	//ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	////ЭлементыОтбора.Родитель			= ГруппаОтбора;
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	//ЭлементыОтбора.Использование 	= Ложь;
	//
	//ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	////ЭлементыОтбора.Родитель			= ГруппаОтбора;
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ЭлементыОтбора.Использование 	= Ложь;
	
	
	
	
	//ОтборПорядок = "";
	//Для Каждого Строка ИЗ ТаблицаПорядок Цикл
	//	ОтборПорядок = ОтборПорядок + Строка.ИмяПорядка + ",";
	//КонецЦикла;
	//ОтборПорядок = " УПОРЯДОЧИТЬ ПО " + Лев(ОтборПорядок, СтрДлина(ОтборПорядок) - 1);
	//
	//Запрос.Текст = Запрос.Текст + ОтборПорядок;
	
	//        	ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Номенклатура");
	//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементыОтбора.Использование 	= Истина;
	//ЭлементыОтбора.ПравоеЗначение 	= СтруктураОтборов.Номенклатура;
	
	//ИнфокомТиповыеОтчеты.УдалитьДублиОтбора(Список.КомпоновщикНастроек);
	
	//Для Каждого КлючИЗнаение ИЗ СтруктураОтборов Цикл
	//	ОбновитьОтбор(КлючИЗнаение.Ключ, КлючИЗнаение.Значение);
	//КонецЦикла;;
	//А = 1;
	
	
	//ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.Родитель			= ГруппаОтбора;
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	//ЭлементыОтбора.Использование 	= Ложь;
	//
	//ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.Родитель			= ГруппаОтбора;
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	//ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ЭлементыОтбора.Использование 	= Ложь;
	
	
	
	
	
	
КонецПроцедуры

Процедура ОбновитьОтбор(Отбор, Значение, ВидСравнения)
	//Для Каждого Строка ИЗ Список.Отбор.Элементы Цикл
	//	Если Строка(Строка.ЛевоеЗначение) = Отбор Тогда        //Строка.ТипГруппы
	//		//ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Отбор);
	//		Строка.ВидСравнения 	= ВидСравнения;
	//		Строка.Использование 	= ЗначениеЗаполнено(Значение);
	//		Строка.ПравоеЗначение 	= Значение;
	//	КонецЕсли;
	//КонецЦикла;;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтбор(Команда)
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаНач1ПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНач1ПриИзменении(Элемент)
	ДатаНач1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаКон1ПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаКон1ПриИзменении(Элемент)
	ДатаКон1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаПоследние3ДняПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследние3ДняПриИзменении(Элемент)
	
	
	Объект.ДатаНач1= НачалоДня(ТекущаяДата()) - 60*60*24*2;
	Объект.ДатаКон1= КонецДня(ТекущаяДата());
	//ОбновитьДанныеПофильтруНаСервере();
	ДобавитьОтборНаСервере();
	
	//Последние3ДняПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОдинПроизводительПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОдинПроизводительПриИзменении(Элемент)
	ОдинПроизводительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОднаНоменклатураПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОднаНоменклатураПриИзменении(Элемент)
	ОднаНоменклатураПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Оценки_1и2ПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Оценки_1и2ПриИзменении(Элемент)
	Оценки_1и2ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Исключить_3ю_Плохую_ОценкуПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Исключить_3ю_Плохую_ОценкуПриИзменении(Элемент)
	Исключить_3ю_Плохую_ОценкуПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборНоменклатураПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	ОтборНоменклатураПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборКонтрагент1ПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагент1ПриИзменении(Элемент)
	ОтборКонтрагент1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаПорядок1ПриИзмененииНаСервере()
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПорядок1ПриИзменении(Элемент)
	ТаблицаПорядок1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ДатаДок");
	СтруктураОтборов.Вставить("Контрагент");
	СтруктураОтборов.Вставить("Номенклатура");
	//СтруктураОтборов.Вставить("date_add_3_Дня");
	Для Каждого КлючИЗнаение ИЗ СтруктураОтборов Цикл
		ИнициализироватьОтбор(КлючИЗнаение.Ключ, Ложь);
	КонецЦикла;;
	
	
	ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.Родитель			= ГруппаОтбора;
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементыОтбора.Использование 	= Ложь;
	
	ЭлементыОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.Родитель			= ГруппаОтбора;
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаДок");
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементыОтбора.Использование 	= Ложь;
	
	Объект.Безопасность = РольДоступна("АК_СообщенияПроверкаКачестваПродуктов");
	
	Объект.ОтборПоОтветамТехнологов = Истина;
	
	//+++АК malv 20180129 Вердикты
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	AK_КритерииОценкиДляВердикта.Ссылка,
	                      |	AK_КритерииОценкиДляВердикта.ФлагДа
	                      |ИЗ
	                      |	Справочник.AK_КритерииОценкиДляВердикта КАК AK_КритерииОценкиДляВердикта
	                      |ГДЕ
	                      |	НЕ AK_КритерииОценкиДляВердикта.ПометкаУдаления");
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеВердиктов.Очистить();
	Пока Выборка.Следующий() Цикл
		НовВерд = СоответствиеВердиктов.Добавить();
		НовВерд.Ссылка = Выборка.Ссылка;
		НовВерд.Идентификатор = ВРег("" + Выборка.Ссылка.УникальныйИдентификатор());
		НовВерд.Отрицательный = НЕ Выборка.ФлагДа;
	КонецЦикла; 
	//---АК malv
	
	Объект.ДатаНач = НачалоДня(ТекущаяДата() - 14*24*60*60);
	Объект.ДатаКон = КонецДня(ТекущаяДата());
	
	ОбновитьДанныеВердикта();
	
	ПрочитатьДанныеСSQLНаСервере();
	
	//Объект.РежимОтладки = Истина;
	
	
	
КонецПроцедуры

Процедура ОбновитьДанныеВердикта()  
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	AK_КритерииОценкиДляВердикта.Ссылка
	//|ПОМЕСТИТЬ ТаблицаИтого
	//|ИЗ
	//|	Справочник.AK_КритерииОценкиДляВердикта КАК AK_КритерииОценкиДляВердикта
	//|ГДЕ
	//|	AK_КритерииОценкиДляВердикта.Использовать
	//|	И AK_КритерииОценкиДляВердикта.ФлагДа
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаИтого.Ссылка КАК Критерий
	//|ИЗ
	//|	ТаблицаИтого КАК ТаблицаИтого
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаИтого.Ссылка";
	//
	//РезультатЗапроса1 = Запрос.Выполнить().Выгрузить();
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	AK_КритерииОценкиДляВердикта.Ссылка КАК Ссылка1
	//|ПОМЕСТИТЬ ТаблицаИтого
	//|ИЗ
	//|	Справочник.AK_КритерииОценкиДляВердикта КАК AK_КритерииОценкиДляВердикта
	//|ГДЕ
	//|	AK_КритерииОценкиДляВердикта.Использовать
	//|	И НЕ AK_КритерииОценкиДляВердикта.ФлагДа
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаИтого.Ссылка1 КАК Критерий
	//|ИЗ
	//|	ТаблицаИтого КАК ТаблицаИтого
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаИтого.Ссылка1";
	//
	//РезультатЗапроса2 = Запрос.Выполнить().Выгрузить();
	//
	////Для Каждого Строка Из РезультатЗапроса1 Цикл
	//	Объект.ТаблицаВердиктаХороший.Загрузить(РезультатЗапроса1);
	//	Объект.ТаблицаВердиктаПлохой.Загрузить(РезультатЗапроса2);
	////	Стр.КритерийДа = Строка.Критерий;
	////КонецЦикла;
	//
	////Для Каждого Строка Из РезультатЗапроса2 Цикл
	////	Стр = Объект.ТаблицаВердиктаПлохой.Добавить();
	////	Стр.КритерийДа = Строка.Критерий;
	////КонецЦикла;
КонецПроцедуры

Процедура ИнициализироватьОтбор(Отбор, Использование)
	ЭлементыОтбора 					= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Отбор);
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементыОтбора.Использование 	= Использование;
	//ЭлементыОтбора.ПравоеЗначение 	= Использование;
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьПоЗначениюВТекущейКолонкеНаСервере(ИмяКолонки, ДанныеДляФильтра)
	Если ИмяКолонки = "Контрагент" Тогда
		Объект.ОтборКонтрагент1 = ДанныеДляФильтра;
	ИначеЕсли ИмяКолонки = "Номенклатура" Тогда
		Объект.ОтборНоменклатура1 = ДанныеДляФильтра;
	КонецЕсли;
	ДобавитьОтборНаСервере();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтфильтроватьПоЗначениюВТекущейКолонке(Команда)
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ИмяКолонки 			= СтрЗаменить(Элементы.Список.ТекущийЭлемент.Имя, "Список", "");
		ДанныеДляФильтра 	= Элементы.Список.ТекущиеДанные[ИмяКолонки];
		ОтфильтроватьПоЗначениюВТекущейКолонкеНаСервере(ИмяКолонки, ДанныеДляФильтра);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура List_emailsПриАктивизацииСтрокиНаСервере(GUID, Номенклатура, Контрагент)
	// Вставить содержимое обработчика.
	
	//Объект.GUID 				= Сред(GUID, 2, 37);
	//Объект.ОтборНоменклатура1 	= Номенклатура;
	//Объект.ОтборКонтрагент1 	= Контрагент;
	//ДобавитьОтборНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура GUIDПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ДобавитьОтборНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура GUIDПриИзменении(Элемент)
	GUIDПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПереместитьЭлементНаСервере()
	// Вставить содержимое обработчика.
	//Элементы.Переместить(Элементы.ОтборНоменклатура, Элементы.Группа15, Элементы.ТипИмейл1);
	Элементы.Переместить(Элементы.СортировкаДатаУбывание, Элементы.Группа16, Элементы.СортировкаНоменклатураУбывание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлемент(Команда)
	ПереместитьЭлементНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураВверх(Команда)
	// Вставить содержимое обработчика.
	ПереместитьЭлементНаСервере();
	//Элементы.Переместить(Элементы.СортировкаДатаУбывание, Элементы.Группа16, Элементы.СортировкаНоменклатураУбывание);
	
КонецПроцедуры

&НаСервере
Процедура СортировкаДатаУбываниеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаДатаУбываниеПриИзменении(Элемент)
	СортировкаДатаУбываниеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СортировкаНоменклатураУбываниеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаНоменклатураУбываниеПриИзменении(Элемент)
	СортировкаНоменклатураУбываниеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СортировкаКонтрагентыУбываниеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	ОбновитьДанныеПофильтруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаКонтрагентыУбываниеПриИзменении(Элемент)
	СортировкаКонтрагентыУбываниеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеПисьмаПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.        
	Если Элементы.ПолученныеПисьма.ТекущиеДанные <> Неопределено Тогда
		ТекстПисьма = Элементы.ПолученныеПисьма.ТекущиеДанные.text_email;
		ПолученныеПисьмаПриАктивизацииСтрокиНаСервере(ТекстПисьма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолученныеПисьмаПриАктивизацииСтрокиНаСервере(ТекстПисьма_)
	// Вставить содержимое обработчика.
	//ОбновитьДанныеПофильтруНаСервере();
	//ПолеТД = Элементы.ТекстПисьма;
	//ПолеТД.
	
	ТекстПисьма = ТекстПисьма_;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьФильтр1ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьФильтр1ПриИзменении(Элемент)
	РазвернутьФильтр1ПриИзмененииНаСервере();
КонецПроцедуры

Процедура СписокПриАктивизацииСтрокиНаСервере()
	
	
	//Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
	//	//GUID = Элементы.Список.ТекущиеДанные.email_uid;
	//	Объект.ОтборНоменклатура1 	= Элементы.Список.ТекущиеДанные.Номенклатура;
	//	Объект.ОтборКонтрагент1 		= Элементы.Список.ТекущиеДанные.Контрагент;
	//	ДобавитьОтборНаСервере();
	//КонецЕсли;
	
	
	
	// Вставить содержимое обработчика.
	//Если Объект.ОтборПоОтветамТехнологов Тогда
	//Объект.GUID 				= Сред(GUID, 2, 37);
	//Объект.ОтборНоменклатура1 	= Неопределено;
	//Объект.ОтборКонтрагент1 	= Неопределено;
	//ДобавитьОтборНаСервере();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.Список.ТекущиеДанные 				<> Неопределено Тогда
		Если НЕ Объект.ОтборПоОтветамТехнологов Тогда
			Если 	Объект.ОтборНоменклатура 		<> Элементы.Список.ТекущиеДанные.Номенклатура ИЛИ
					Объект.ОтборКонтрагент 			<> Элементы.Список.ТекущиеДанные.Контрагент Тогда
					Объект.ОтборНоменклатура 		= Элементы.Список.ТекущиеДанные.Номенклатура;
					Объект.ОтборКонтрагент 			= Элементы.Список.ТекущиеДанные.Контрагент;
					ФлагОбновить 					= Истина;
			КонецЕсли;
				
			//Если 	Объект.GUID 					<> Элементы.List_emails.ТекущиеДанные.email_uid Тогда
			//		GUID 							= Элементы.List_emails.ТекущиеДанные.email_uid;
			//		Объект.GUID 					= GUID;
			//		ФлагОбновить 					= Истина;
			//КонецЕсли;
				
			//Если 	Объект.ТекущийВердикт 			<> Элементы.List_emails.ТекущиеДанные.Вердикт_uid Тогда
			//	Попытка
			//		Объект.ТекущийВердикт 			= Элементы.List_emails.ТекущиеДанные.Вердикт_uid;
			//		ПереключитьНаВердиктНаСервере();
			//	Исключение
			//	КонецПопытки;			
			//КонецЕсли;
			Если ФлагОбновить Тогда
				//ДобавитьОтборНаСервере();
				ОбновитьДанныеПофильтруНаСервере();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура List_emailsПриАктивизацииСтроки(Элемент)
	Если Элементы.List_emails.ТекущиеДанные 		<> Неопределено Тогда
		ФлагОбновить = Ложь;
		Если Объект.ОтборПоОтветамТехнологов Тогда
			Если 	Объект.ОтборНоменклатура1 		<> Элементы.List_emails.ТекущиеДанные.Номенклатура ИЛИ
					Объект.ОтборКонтрагент1 		<> Элементы.List_emails.ТекущиеДанные.Контрагент Тогда
					Объект.ОтборНоменклатура1 		= Элементы.List_emails.ТекущиеДанные.Номенклатура;
					Объект.ОтборКонтрагент1 		= Элементы.List_emails.ТекущиеДанные.Контрагент;
					ФлагОбновить 					= Истина;
				КонецЕсли;
			КонецЕсли;
				
			Если 	Объект.GUID 					<> Элементы.List_emails.ТекущиеДанные.email_uid Тогда
					GUID 							= Элементы.List_emails.ТекущиеДанные.email_uid;
					Объект.GUID 					= GUID;
					ФлагОбновить = Истина;
			КонецЕсли;
				
			//Если 	
				//Объект.ТекущийВердикт 			<> Элементы.List_emails.ТекущиеДанные.Вердикт_uid Тогда
				//Попытка
				//	Объект.ТекущийВердикт 			= Элементы.List_emails.ТекущиеДанные.Вердикт_uid;
				//	
				//	
				//	
				//	//Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки <> Неопределено Тогда
			Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку") Тогда		
				Элементы.Группа18.ТекущаяСтраница = Элементы.Группа18.ПодчиненныеЭлементы.ГруппаВердикт;
				ПереключитьНаВердиктНаСервере(Элементы.List_emails.ТекущиеДанные.email_uid);
			Иначе
				Элементы.Группа18.ТекущаяСтраница = Элементы.Группа18.ПодчиненныеЭлементы.Группа20;
				//+++АК malv 20180123 делаем
				ОчиститьВердиктНаСервере();
				//---АК malv
			КонецЕсли;
				//	//КонецЕсли;

				//	
				//	
				//	
				//	
				//	//ПереключитьНаВердиктНаСервере();
				//Исключение
				//КонецПопытки;			
			//КонецЕсли;
			
			
			//Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку") Тогда		
			//	//Элементы.Группа18.ТекущаяСтраница = Элементы.Группа18.ПодчиненныеЭлементы.ГруппаВердикт;
			//	//ПереключитьНаВердиктНаСервере();
			//Иначе
			//	Элементы.Группа18.ТекущаяСтраница = Элементы.Группа18.ПодчиненныеЭлементы.Группа20;
			//	ОчиститьВердиктНаСервере();
			//КонецЕсли;

			
			Если ФлагОбновить Тогда
				ДобавитьОтборНаСервере();
				//ОбновитьДанныеПофильтруНаСервере();
			КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура РазвернутьФильтрПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	//Если Объект.ОтборПоОтветамТехнологов Тогда
	//	Объект.GUID 				= "";//Сред(GUID, 2, 37);
	//	Объект.ОтборНоменклатура1 	= Неопределено;
	//	Объект.ОтборКонтрагент1 	= Неопределено;
	//	
	//	
	//	Если Элементы.List_emails.ТекущиеДанные <> Неопределено Тогда
	//	GUID = Элементы.List_emails.ТекущиеДанные.email_uid;
	//	Номенклатура 	= Элементы.List_emails.ТекущиеДанные.Номенклатура;
	//	Контрагент 		= Элементы.List_emails.ТекущиеДанные.Контрагент;
	//	List_emailsПриАктивизацииСтрокиНаСервере(GUID, Номенклатура, Контрагент);
	//КонецЕсли;
	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	ДобавитьОтборНаСервере();
	//	
	//	
	//	
	//	
	//Иначе
	//	
	//	
	//	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
	//	//GUID = Элементы.Список.ТекущиеДанные.email_uid;
	//	Если Объект.ОтборПоОтветамТехнологов Тогда
	//		Объект.ОтборНоменклатура 	= Неопределено;
	//	Объект.ОтборКонтрагент 		= Неопределено;
	
	//	Иначе
	//	
	//	
	//	Объект.ОтборНоменклатура 	= Элементы.Список.ТекущиеДанные.Номенклатура;
	//	Объект.ОтборКонтрагент 		= Элементы.Список.ТекущиеДанные.Контрагент;
	//	КонецЕсли;
	//	ДобавитьОтборНаСервере();
	//КонецЕсли;
	
	//	
	//	
	//	Объект.GUID 				= "";//Сред(GUID, 2, 37);
	//	Объект.ОтборНоменклатура 	= Неопределено;
	//	Объект.ОтборКонтрагент 	= Неопределено;
	//	ДобавитьОтборНаСервере();
	
	//КонецЕсли;
	
	
	
	//Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
	//	//GUID = Элементы.Список.ТекущиеДанные.email_uid;
	//	Объект.ОтборНоменклатура1 	= Элементы.List_emails.ТекущиеДанные.Номенклатура;
	//	Объект.ОтборКонтрагент1 		= Элементы.List_emails.ТекущиеДанные.Контрагент;
	//	ДобавитьОтборНаСервере();
	//КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьФильтрПриИзменении(Элемент)
	
	Если Объект.ОтборПоОтветамТехнологов Тогда
		Объект.GUID 				= "";//Сред(GUID, 2, 37);
		Объект.ОтборНоменклатура 	= Неопределено;
		//Сообщить("2");
		Объект.ОтборКонтрагент 	= Неопределено;
		Если Элементы.List_emails.ТекущиеДанные <> Неопределено Тогда
			GUID = Элементы.List_emails.ТекущиеДанные.email_uid;
			Номенклатура 	= Элементы.List_emails.ТекущиеДанные.Номенклатура;
			Контрагент 		= Элементы.List_emails.ТекущиеДанные.Контрагент;
			Объект.GUID 				= Сред(GUID, 2, 37);
			Объект.ОтборНоменклатура1 	= Номенклатура;
			Объект.ОтборКонтрагент1 	= Контрагент;
			//List_emailsПриАктивизацииСтрокиНаСервере(GUID, Номенклатура, Контрагент);
		КонецЕсли;
		ДобавитьОтборНаСервере();
	Иначе
		Объект.ОтборНоменклатура1 	= Неопределено;
		Объект.ОтборКонтрагент1 		= Неопределено;
		Объект.GUID 				= "";
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			Объект.ОтборНоменклатура 	= Элементы.Список.ТекущиеДанные.Номенклатура;
			//Сообщить("3");
			Объект.ОтборКонтрагент 	= Элементы.Список.ТекущиеДанные.Контрагент;
		КонецЕсли;
		ДобавитьОтборНаСервере();
	КонецЕсли;
	
	ОбновитьДанныеПофильтруНаСервере();
	//РазвернутьФильтрПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокПриОкончанииРедактированияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СписокПриОкончанииРедактированияНаСервере();    
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаписиНовогоНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	//ОбработкаЗаписиНовогоНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокПередНачаломДобавленияНаСервере()
	// Вставить содержимое обработчика.
	//Форма = РегистрыСведений.ОбращенияПокупателей.ПолучитьФормуРедактированияЗаписи();
	//Форма.Открыть();
	//Возврат 
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	
	//Отказ = Истина;
	//СписокПередНачаломДобавленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбработкаОповещенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокОбработкаЗаписиНовогоНаСервере(НовыйОбъект, Источник)
	// Вставить содержимое обработчика.
	НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.GUID_Загрузки.Установить(НовыйОбъект.GUID_Загрузки);
	НаборЗаписей.Прочитать();
	Для Каждого Строка ИЗ НаборЗаписей Цикл
		Стр = Объект.List_emails.Добавить();
		Стр1 = Объект.List_emails1.Добавить();
		Стр.Номенклатура = Строка.Номенклатура;
		Стр.Контрагент = Строка.Производитель;
		Стр1.Номенклатура = Строка.Номенклатура;
		Стр1.Контрагент = Строка.Производитель;
		
		Объект.ОтборКонтрагент1 = Строка.Производитель;
		Объект.ОтборНоменклатура1 = Строка.Номенклатура;
		
		ДобавитьОтборНаСервере();   
		ОбновитьДанныеПофильтруНаСервере();
		
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СписокОбработкаЗаписиНовогоНаСервере(НовыйОбъект, Неопределено);
КонецПроцедуры

&НаСервере
Процедура СкрытьОтправленные1ПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	List_emails.Контрагент,
	|	List_emails.Номенклатура,
	|	List_emails.email_uid,
	|	List_emails.date_add,
	|	List_emails.type_email,
	|	List_emails.id_kontr,
	|	List_emails.id_tov,
	|	List_emails.text_email,
	|	List_emails.СтатусПисемРассылки,
	|	List_emails.ОтправленоПисьмо
	|ПОМЕСТИТЬ Т_1
	|ИЗ
	|	&Таблица КАК List_emails
	|ГДЕ
	|	1 = 1
	|	И List_emails.СтатусПисемРассылки = &СтатусПисемРассылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_1.Контрагент КАК Контрагент,
	|	Т_1.Номенклатура КАК Номенклатура,
	|	Т_1.email_uid,
	|	НАЧАЛОПЕРИОДА(Т_1.date_add, ДЕНЬ) КАК date_add,
	|	Т_1.type_email,
	|	Т_1.id_kontr,
	|	Т_1.text_email,
	|	Т_1.id_tov,
	|	Т_1.СтатусПисемРассылки,
	|	Т_1.ОтправленоПисьмо,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Т_1.date_add, ДЕНЬ), ДЕНЬ, 2) КАК ДатаПлюс2Дня
	|ПОМЕСТИТЬ Т_2
	|ИЗ
	|	Т_1 КАК Т_1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбращенияПокупателей.GUID_Загрузки,
	|	Т_2.Контрагент,
	|	Т_2.Номенклатура,
	|	Т_2.email_uid,
	|	Т_2.date_add,
	|	Т_2.type_email,
	|	Т_2.id_kontr,
	|	Т_2.id_tov,
	|	Т_2.text_email,
	|	Т_2.СтатусПисемРассылки,
	|	Т_2.ДатаПлюс2Дня,
	|	Т_2.ОтправленоПисьмо
	|ПОМЕСТИТЬ Т3
	|ИЗ
	|	Т_2 КАК Т_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|		ПО Т_2.Номенклатура = ОбращенияПокупателей.Номенклатура
	|			И Т_2.Контрагент = ОбращенияПокупателей.Производитель
	|			И Т_2.date_add <= ОбращенияПокупателей.ДатаДок
	|			И Т_2.ДатаПлюс2Дня >= ОбращенияПокупателей.ДатаДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т3.GUID_Загрузки
	|ИЗ
	|	Т3 КАК Т3
	|ГДЕ
	|	НЕ Т3.GUID_Загрузки ЕСТЬ NULL";
	
	
	
	
	Запрос.УстановитьПараметр("СтатусПисемРассылки", Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку);
	
	
	Запрос.УстановитьПараметр("Таблица", 		Объект.List_emails1.Выгрузить());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.GUDI_отправленныеЗагрузки.Загрузить(Результат);
	
	ДобавитьОтборНаСервере();
	
	
	
	//
	
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтправленные1ПриИзменении(Элемент)
	СкрытьОтправленные1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокВыборНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыборНаСервере();
КонецПроцедуры

Функция ВернутьТекстПисьмаСписок(СписокGUID)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОтправленоНаПроверку,
	|	РегистрСведенийОбращенияПокупателей.id_OK,
	|	РегистрСведенийОбращенияПокупателей.GUID_Загрузки,
	|	РегистрСведенийОбращенияПокупателей.ДатаДок,
	|	РегистрСведенийОбращенияПокупателей.ИсточникОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипОбращения,
	|	РегистрСведенийОбращенияПокупателей.ФИО_Покупателя,
	|	РегистрСведенийОбращенияПокупателей.Телефон,
	|	РегистрСведенийОбращенияПокупателей.email,
	|	РегистрСведенийОбращенияПокупателей.СтруктурнаяЕдиница,
	|	РегистрСведенийОбращенияПокупателей.ДатаСобытия,
	|	РегистрСведенийОбращенияПокупателей.Продавец1,
	|	РегистрСведенийОбращенияПокупателей.Продавец2,
	|	РегистрСведенийОбращенияПокупателей.Продавец3,
	|	РегистрСведенийОбращенияПокупателей.Номенклатура,
	|	РегистрСведенийОбращенияПокупателей.Производитель КАК Контрагент,
	|	РегистрСведенийОбращенияПокупателей.Примечание,
	|	РегистрСведенийОбращенияПокупателей.ОтветПокупателю,
	|	РегистрСведенийОбращенияПокупателей.СсылкаНаСайт,
	|	РегистрСведенийОбращенияПокупателей.ДатаВопроса,
	|	РегистрСведенийОбращенияПокупателей.Вопрос,
	|	РегистрСведенийОбращенияПокупателей.ВопросКому,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтвета,
	|	РегистрСведенийОбращенияПокупателей.ПримечаниеОтвета,
	|	РегистрСведенийОбращенияПокупателей.РезультатОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипЖалобы,
	|	РегистрСведенийОбращенияПокупателей.Номер_Бланка,
	|	РегистрСведенийОбращенияПокупателей.Тип_Бланка,
	|	РегистрСведенийОбращенияПокупателей.ОтветПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.СтатусПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.ОтветПо,
	|	РегистрСведенийОбращенияПокупателей.id_Vizit,
	|	РегистрСведенийОбращенияПокупателей.Номер_Карты_ОК,
	|	РегистрСведенийОбращенияПокупателей.Ответственный,
	|	РегистрСведенийОбращенияПокупателей.НужноОбзвонить,
	|	РегистрСведенийОбращенияПокупателей.СтатусЖалобы,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтправкиОтветственным,
	|	РегистрСведенийОбращенияПокупателей.GUID_Связи,
	|	РегистрСведенийОбращенияПокупателей.Закрыт,
	|	РегистрСведенийОбращенияПокупателей.ОтменаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ПолучателиУведомления,
	|	РегистрСведенийОбращенияПокупателей.РегулярностьУведомления,
	|	РегистрСведенийОбращенияПокупателей.НачалоПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ОкончаниеПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ТипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ПодтипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ОтправленоСМСПокупателю,
	|	ВЫБОР
	|		КОГДА РегистрСведенийОбращенияПокупателей.КоличествоПрикрепленныхФайлов > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьПрикрепленные,
	|	РегистрСведенийОбращенияПокупателей.ТипВключения,
	|	РегистрСведенийОбращенияПокупателей.Технолог,
	|	РегистрСведенийОбращенияПокупателей.ПродактМенеджер,
	|	РегистрСведенийОбращенияПокупателей.ЦФО,
	|	РегистрСведенийОбращенияПокупателей.ТерриториальныйУправляющий,
	|	РегистрСведенийОбращенияПокупателей.ПомощникУправляющего,
	|	РегистрСведенийОбращенияПокупателей.КомментарийУКК,
	|	РегистрСведенийОбращенияПокупателей.Новинка,
	|	РегистрСведенийОбращенияПокупателей.Аутсорс
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК РегистрСведенийОбращенияПокупателей
	|ГДЕ
	|	РегистрСведенийОбращенияПокупателей.GUID_Загрузки В(&GUID_Загрузки)";
	
	Запрос.УстановитьПараметр("GUID_Загрузки", СписокGUID);
	//Запрос.УстановитьПараметр("Производитель", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат  РезультатЗапроса;
КонецФункции

&НаСервере
Процедура ОтправитьПочтуПоОбращениямНаСервере(ВыделенныеСтроки)
	СписокGUID = Новый СписокЗначений;
	
	УИД_НовогоПисьма = Строка(Новый УникальныйИдентификатор);
	
	//Проверка на наличие уже отправленных
	Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка_ ИЗ НаборЗаписей Цикл
			Если ЗначениеЗаполнено(Строка_.GUID_ПисьмоТехнологам) Тогда
				Сообщить("Уже имеются отправленные письма для данной позиции по данному производителю");
				Если НЕ Объект.ОбойтиБлокКонтроляОтправки Тогда
					Возврат;
				Иначе
					Сообщить("Активирован обход отправки");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	БазовыйПроизводитель = Неопределено;
	Номенклатура = Неопределено;
	//Строка_GUID_Загрузки = "";
	Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
		Строка_ = Строка.GUID_Загрузки;
		СписокGUID.Добавить(Строка_);
	КонецЦикла;
	
	Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка_ ИЗ НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(БазовыйПроизводитель) Тогда
				БазовыйПроизводитель = Строка_.Производитель;
			КонецЕсли;
			Если БазовыйПроизводитель <> Строка_.Производитель Тогда
				//Если НЕ Объект.ОбойтиБлокКонтроляОтправки Тогда
					Сообщить("Разные производители");
					Возврат;
				//Иначе
				//	Сообщить("Активирован обход отправки Разные производители");
				//КонецЕсли;
			КонецЕсли;
			//Если НЕ ЗначениеЗаполнено(Строка_GUID_Загрузки) Тогда
				//Строка_GUID_Загрузки = УИД_НовогоПисьма; //Строка.GUID_Загрузки;
			//КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = Строка_.Номенклатура;
			КонецЕсли;
			Если Номенклатура <> Строка_.Номенклатура Тогда
				//Если НЕ Объект.ОбойтиБлокКонтроляОтправки Тогда
					Сообщить("Разные Номенклатуры");
					Возврат;
				//Иначе
				//	Сообщить("Активирован обход отправки Разные производители");
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Тема 			= "ОтправитьПисьмо_Т1НаСервере";
	
	ДатаПисьма = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	
	//Тема 			= "Плохой Рейтинг " + ДатаПисьма + " : " + Номенклатура + " " + БазовыйПроизводитель + "#RVV800_" + Строка_GUID_Загрузки + "#";
	
	Фаза = 1;
	Сообщить ("Фаза" + Фаза);
	Фаза = Фаза + 1;
	
	Тема 			= "Оповещение о проверке качества продуктов " + " : " + Номенклатура + БазовыйПроизводитель + ДатаПисьма + " : " + "#RVV800_" + УИД_НовогоПисьма + "#";
	
	ВыборкаДетальныеЗаписи = ВернутьТекстПисьмаСписок(СписокGUID);
	
	Сообщить ("Фаза" + Фаза);
	Фаза = Фаза + 1;
	
	
	СписокТехнологов = ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, БазовыйПроизводитель);	
	
	
	Сообщить ("Фаза" + Фаза);
	Фаза = Фаза + 1;
	//Оповещение о проверке качества продуктов ЧИСЛО #RVV829_9ed02cfb-e562-4dfb-a801-34ed193a30ea
	
	
	
	Таблица 		= ВернутьТекстПисьма("", ВыборкаДетальныеЗаписи);; //"Таблица";
	НомерЗаявки 	= "999";
	
	
	Адрес 			= "zhas@automacon.ru";
	//Адрес 		= "zsergei2000@gmail.com";
	//Адрес 		= "abdr@automacon.ru";
	//СписокКому		= Новый СписокЗначений;
	//СписокКому.Добавить(СокрЛП(Адрес));
	
	Стр 				= СписокТехнологов.Добавить();
	Стр.Адрес 			= Адрес;
	Стр.РольТехнолог 	= "РольТехнолог";
	Стр.Дневной 		= "Дневной";
	Стр.Сотрудник 		= "Сотрудник";
	//
	//Адрес 				= "zsergei2000@gmail.com";
	//Стр 				= СписокТехнологов.Добавить();
	//Стр.Адрес 			= Адрес;
	//Стр.РольТехнолог 	= "zsergei2000@gmail.com";
	//Стр.Дневной 		= "zsergei2000@gmail.com";
	//Стр.Сотрудник 		= "zsergei2000@gmail.com";
	//
	//Адрес 				= "abdr@automacon.ru";
	//Стр 				= СписокТехнологов.Добавить();
	//Стр.Адрес 			= Адрес;
	//Стр.РольТехнолог 	= "abdr@automacon.ru";
	//Стр.Дневной 		= "abdr@automacon.ru";
	//Стр.Сотрудник 		= "abdr@automacon.ru";

	
	
	//Для Каждого Строка ИЗ СписокТехнологов Цикл
	//	Если ЗначениеЗаполнено(СокрЛП(Строка)) Тогда
	//		Сообщить ("-----" + Строка);
	//		СписокКому.Добавить(СокрЛП(Строка));
	//	КонецЕсли;
	//КонецЦикла;
	
	
	//GUID_Заявки 	= Строка(Новый УникальныйИдентификатор);
	ID_MESSAGE 		= "999"; 
	TYPE_MESSAGE 	= "999";
	СсылкаАкцептант = "ТЕСТ";
	Объект_Ссылка	= Неопределено;
	
	Сообщить ("Фаза" + Фаза);
	Фаза = Фаза + 1;
	
	Для Каждого Строка ИЗ СписокТехнологов Цикл
		
		Сообщить ("Фаза - П1");
		//Фаза = Фаза + 1;
		
		Если ЗначениеЗаполнено(СокрЛП(Строка.Адрес)) Тогда
			СписокКому		= Новый СписокЗначений;
			СписокКому.Добавить(СокрЛП(Строка.Адрес));
			
			//Адрес 				= "abdr@automacon.ru";
			//СписокКому.Добавить(СокрЛП(Адрес));
			//
			//Адрес 			= "zhas@automacon.ru";
			//СписокКому.Добавить(СокрЛП(Адрес));
			
			Сообщить ("Фаза - П2");
			Сообщить ("" + Строка.Адрес);
			
			
			                         
			
			
			Тема = Тема + "RVVTYPE_1" + СокрЛП(Строка.РольТехнолог);
			Сообщить ("Фаза - П3");
	        Тема = Тема + "RVVTYPE_2" + СокрЛП(Строка.Дневной);
			Сообщить ("Фаза - П3");
			Тема = Тема + "RVVTYPE_3" + СокрЛП(Строка.Сотрудник);
			Сообщить ("Фаза - П3");
			
			
			Попытка
				Тема = Тема + "RVVTYPE_4" + СокрЛП(СтрЗаменить(Строка.Номенклатура.id_tov, Символ(160), ""));
				Тема = Тема + "RVVTYPE_5" + СокрЛП(СтрЗаменить(Строка.БазовыйПроизводитель.ИД, Символ(160), ""));
			Исключение
			КонецПопытки;
			
	
			ОтправитьЗаявкуНаПодтверждение(Тема, Таблица + "<br><br>", НомерЗаявки, СписокКому, УИД_НовогоПисьма, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, Неопределено, Объект_Ссылка);
	    КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка_ ИЗ ВыделенныеСтроки Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка_.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка ИЗ НаборЗаписей Цикл
			Стр = Объект.List_emails.Добавить();
			Стр1 = Объект.List_emails1.Добавить();
			Стр.Номенклатура = Номенклатура; //Строка.Номенклатура;
			Стр.Контрагент = БазовыйПроизводитель; //Строка.Производитель;
			Стр1.Номенклатура = Номенклатура; ///Строка.Номенклатура;
			Стр1.Контрагент = БазовыйПроизводитель; ///Строка.Производитель;
			
			//Стр.email_uid = Строка_.GUID_Загрузки;
			//Стр1.email_uid = Строка_.GUID_Загрузки;
			
			Стр.email_uid = УИД_НовогоПисьма;
			Стр1.email_uid = УИД_НовогоПисьма;
			
			Стр.date_add = ТекущаяДата();
			Стр1.date_add = ТекущаяДата();
			
			
			Стр.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку;
			Стр1.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку;
			
			//СтатусПисемРассылки", Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку
			
			
			
			
			МенеджерЗаписи 							= РегистрыСведений.ЛогиПисемListAnswer.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторСообщения 	= УИД_НовогоПисьма;
			МенеджерЗаписи.text_email				= "Отправлено технологам";
			МенеджерЗаписи.Отправлено				= Истина;
			МенеджерЗаписи.Номенклатура				= Номенклатура;
			МенеджерЗаписи.Контрагент				= БазовыйПроизводитель;
			МенеджерЗаписи.СтатусПисемРассылки 		= Перечисления.СтатусыПисемРассылки.ОтправленоНаПроверку;
			МенеджерЗаписи.Записать();

			
			
			
			//Объект.ОтборКонтрагент1 = Строка.Производитель;
			//Объект.ОтборНоменклатура1 = Строка.Номенклатура;
			
			//ДобавитьОтборНаСервере();   
			//ОбновитьДанныеПофильтруНаСервере();
			
			
			
		КонецЦикла;
		//Прервать;
	КонецЦикла;
	
	
	Объект.ОтборКонтрагент1 = БазовыйПроизводитель;
			Объект.ОтборНоменклатура1 = Номенклатура;
	
	ДобавитьОтборНаСервере();   
	ОбновитьДанныеПофильтруНаСервере();
	
	
	
	Для Каждого Строка ИЗ ВыделенныеСтроки Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка_ ИЗ НаборЗаписей Цикл
			Строка_.GUID_ПисьмоТехнологам = УИД_НовогоПисьма;
			//СтрокиОтправленные = Объект.List_emails1.НайтиСтроки(Новый Структура("email_uid, Номенклатура, Контрагент", Строка.GUID_Загрузки, Строка_.Номенклатура, Строка_.Производитель));
			//Для Каждого СтрОтправлено ИЗ СтрокиОтправленные Цикл
			//	Если 	НачалоДня(СтрОтправлено.date_add) - 60*60*24*3 <= Строка_.ДатаДок И 
			//			НачалоДня(СтрОтправлено.date_add) + 60*60*24*3 >= Строка_.ДатаДок
			//			Тогда
			//			Сообщить("Уже имеются отправленные письма для данной позиции по данному производителю");
			//			Возврат;
			//	КонецЕсли;   
			//КонецЦикла;
			
			///-------СЮДА ДОБАЛЯЕМ ЗАПИСЬ НА SQL
			Insert_or_UpdateНажатие(УИД_НовогоПисьма, СтрЗаменить(Номенклатура.id_tov, Символ(160), ""), СтрЗаменить(БазовыйПроизводитель.ИД, Символ(160), ""));
			
			
			
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры


Функция АДОДБ_УстановитьСоединение(Соединение, БД = "SMS_IZBENKA") Экспорт
	
	Строка = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(, , БД, , , "LANGUAGE=русский");
	
	Возврат Соединение.Open(Строка);
	
КонецФункции // АДОДБ_УстановитьСоединение()

Функция АДОКоннекшн_СоздатьОбъект() Экспорт
	
	ADOСоединение = New ComObject("ADODB.Connection"); 
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionTimeOut = 0;
	
	Возврат ADOСоединение;
	
КонецФункции    // АДОКоннекшн_СоздатьОбъект


Функция ФорматПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Если Лев(Поле,2)="$$" Тогда
			Возврат Сред(Поле,3)
		Иначе
			Возврат "'" + Поле + "'";
		КонецЕсли
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции


Процедура Insert_or_UpdateНажатие(УИД_НовогоПисьма,id_tov,id_kontr) Экспорт 
	
	//@email_uid		uniqueidentifier = NULL,
	//@id_kontr		int = NULL,
	//@id_tov			int = NULL,
	//@type_email		int = NULL
	
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение) Тогда
		Сообщить("Не удалось подключиться...", 30);
		Возврат;
	КонецЕсли; 
	
	//Кол = ВыборкаДетальныеЗаписи.Количество();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Кол 		= Кол -1;
		email_uid 	= УИД_НовогоПисьма;
		id_kontr	= id_kontr;
		id_tov		= id_tov;
		type_email	= 823;
		
		Попытка
			rs = мСоединение.Execute("exec SMS_REPL..List_emails_insert_or_update @email_uid ="
			+ ФорматПоля(email_uid) 
			+ ", @id_kontr = " 
			+ ФорматПоля(id_kontr)
			+ ", @id_tov = " 
			+ ФорматПоля(id_tov)
			+ ", @type_email = " 
			+ ФорматПоля(type_email)
			);
			//МенеджерЗаписи = РегистрыСведений.ЛогиПисемGMAIL.СоздатьМенеджерЗаписи();
			//МенеджерЗаписи.ИдентификаторСообщения = УИД_НовогоПисьма;
			//МенеджерЗаписи.Прочитать();
			//МенеджерЗаписи.Заархивировано = Истина;
			////МенеджерЗаписи.ТекстПисьма = Новый ХранилищеЗначения(МенеджерЗаписи.text_email, Новый СжатиеДанных(9));
			//МенеджерЗаписи.text_email = "";
			//МенеджерЗаписи.Записать();
			//МенеджерЗаписи = Неопределено;
		Исключение
			Сообщить("exec SMS_REPL..List_emails_insert_or_update @email_uid ="
			+ ФорматПоля(email_uid) 
			+ ", @id_kontr = " 
			+ ФорматПоля(id_kontr)
			+ ", @id_tov = " 
			+ ФорматПоля(id_tov)
			+ ", @type_email = " 
			+ ФорматПоля(type_email)
			);
			Сообщить(ОписаниеОшибки());
			//мСоединение.Close();
		КонецПопытки;
	//КонецЦикла;
	ОБщегоНазначения.СообщитьОбОшибке("Операция завершена успешно.", , , СтатусСообщения.Информация);
	мСоединение.Close();  
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьПочтуПоОбращениям(Команда)
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;	
	ОтправитьПочтуПоОбращениямНаСервере(ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмо_Т1НаСервере(email_uid, Номенклатура, Контрагент)
	ДатаПисьма = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	//Тема 			= "Оповещение о проверке качества продуктов " + ДатаПисьма + " : " + Номенклатура + Контрагент + "#RVV800_CEEDC2EB-E2DF-4EB2-B8C2-912F68839128#";
	Тема 			= "Оповещение о проверке качества продуктов " + " : " + Номенклатура + Контрагент + ДатаПисьма + " : " + "#RVV800_" + СтрЗаменить(СтрЗаменить(email_uid, "{", ""), "}", "") + "#";
	ВыборкаДетальныеЗаписи = ПолучитьТаблицуПозицийПисьма(email_uid, Номенклатура, Контрагент); 
	КопияВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи.Скопировать();
	КопияВыборкаДетальныеЗаписи.Очистить();
	Стр = КопияВыборкаДетальныеЗаписи.Добавить();
	Стр.Контрагент = Контрагент;
	Стр.Номенклатура = Номенклатура;
	СписокТехнологов = ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, Контрагент);
	Таблица 		= ВернутьТекстПисьма(email_uid, КопияВыборкаДетальныеЗаписи); //"Таблица";
	НомерЗаявки 	= "999";
	Адрес 			= "zhas@automacon.ru";
	Стр 				= СписокТехнологов.Добавить();
	Стр.Адрес 			= Адрес;
	Стр.РольТехнолог 	= "РольТехнолог";
	Стр.Дневной 		= "Дневной";
	Стр.Сотрудник 		= "Сотрудник";
	Для Каждого Строка ИЗ СписокТехнологов Цикл
		Если ЗначениеЗаполнено(СокрЛП(Строка.Адрес)) Тогда
			СписокКому		= Новый СписокЗначений;
			СписокКому.Добавить(СокрЛП(Строка.Адрес));
			
			//Адрес 				= "abdr@automacon.ru";
			//СписокКому.Добавить(СокрЛП(Адрес));
			//
			//Адрес 			= "zhas@automacon.ru";
			//СписокКому.Добавить(СокрЛП(Адрес));
			
			Тема = Тема + "RVVTYPE_1" + СокрЛП(Строка.РольТехнолог);
	        Тема = Тема + "RVVTYPE_2" + СокрЛП(Строка.Дневной);
			Тема = Тема + "RVVTYPE_3" + СокрЛП(Строка.Сотрудник);
			
			Попытка
				Тема = Тема + "RVVTYPE_4" + СокрЛП(СтрЗаменить(Строка.Номенклатура.id_tov, Символ(160), ""));
				Тема = Тема + "RVVTYPE_5" + СокрЛП(СтрЗаменить(Строка.Контрагент.ИД, Символ(160), ""));
			Исключение
			КонецПопытки;
			GUID_Заявки 	= Строка(Новый УникальныйИдентификатор);
			ID_MESSAGE 		= "999"; 
			TYPE_MESSAGE 	= "999";
			СсылкаАкцептант = "ТЕСТ";
			Объект_Ссылка	= Неопределено;
			ОтправитьЗаявкуНаПодтверждение(Тема, Таблица + "<br><br>", НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, Неопределено, Объект_Ссылка);
	   КонецЕсли;
	КонецЦикла;
	
	УИД_НовогоПисьма =  email_uid;
	Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл
		НаборЗаписей = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GUID_Загрузки.Установить(Строка.GUID_Загрузки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка_ ИЗ НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(Строка_.GUID_ПисьмоТехнологам) Тогда
				Строка_.GUID_ПисьмоТехнологам = УИД_НовогоПисьма;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

	Элементы.Список.Обновить();
	
	Insert_or_UpdateНажатие(УИД_НовогоПисьма, СтрЗаменить(Номенклатура.id_tov, Символ(160), ""), СтрЗаменить(Контрагент.ИД, Символ(160), ""));
	
КонецПроцедуры

Функция ПолучитьТаблицуПозицийПисьма(email_uid, Номенклатура, Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОтправленоНаПроверку,
	|	РегистрСведенийОбращенияПокупателей.id_OK,
	|	РегистрСведенийОбращенияПокупателей.GUID_Загрузки,
	|	РегистрСведенийОбращенияПокупателей.ДатаДок,
	|	РегистрСведенийОбращенияПокупателей.ИсточникОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипОбращения,
	|	РегистрСведенийОбращенияПокупателей.ФИО_Покупателя,
	|	РегистрСведенийОбращенияПокупателей.Телефон,
	|	РегистрСведенийОбращенияПокупателей.email,
	|	РегистрСведенийОбращенияПокупателей.СтруктурнаяЕдиница,
	|	РегистрСведенийОбращенияПокупателей.ДатаСобытия,
	|	РегистрСведенийОбращенияПокупателей.Продавец1,
	|	РегистрСведенийОбращенияПокупателей.Продавец2,
	|	РегистрСведенийОбращенияПокупателей.Продавец3,
	|	РегистрСведенийОбращенияПокупателей.Номенклатура,
	|	РегистрСведенийОбращенияПокупателей.Производитель КАК Контрагент,
	|	РегистрСведенийОбращенияПокупателей.Примечание,
	|	РегистрСведенийОбращенияПокупателей.ОтветПокупателю,
	|	РегистрСведенийОбращенияПокупателей.СсылкаНаСайт,
	|	РегистрСведенийОбращенияПокупателей.ДатаВопроса,
	|	РегистрСведенийОбращенияПокупателей.Вопрос,
	|	РегистрСведенийОбращенияПокупателей.ВопросКому,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтвета,
	|	РегистрСведенийОбращенияПокупателей.ПримечаниеОтвета,
	|	РегистрСведенийОбращенияПокупателей.РезультатОбращения,
	|	РегистрСведенийОбращенияПокупателей.ТипЖалобы,
	|	РегистрСведенийОбращенияПокупателей.Номер_Бланка,
	|	РегистрСведенийОбращенияПокупателей.Тип_Бланка,
	|	РегистрСведенийОбращенияПокупателей.ОтветПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.СтатусПроизводителя,
	|	РегистрСведенийОбращенияПокупателей.ОтветПо,
	|	РегистрСведенийОбращенияПокупателей.id_Vizit,
	|	РегистрСведенийОбращенияПокупателей.Номер_Карты_ОК,
	|	РегистрСведенийОбращенияПокупателей.Ответственный,
	|	РегистрСведенийОбращенияПокупателей.НужноОбзвонить,
	|	РегистрСведенийОбращенияПокупателей.СтатусЖалобы,
	|	РегистрСведенийОбращенияПокупателей.ДатаОтправкиОтветственным,
	|	РегистрСведенийОбращенияПокупателей.GUID_Связи,
	|	РегистрСведенийОбращенияПокупателей.Закрыт,
	|	РегистрСведенийОбращенияПокупателей.ОтменаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ПолучателиУведомления,
	|	РегистрСведенийОбращенияПокупателей.РегулярностьУведомления,
	|	РегистрСведенийОбращенияПокупателей.НачалоПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ОкончаниеПериодаУведомления,
	|	РегистрСведенийОбращенияПокупателей.ТипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ПодтипСписанияВозврата,
	|	РегистрСведенийОбращенияПокупателей.ОтправленоСМСПокупателю,
	|	ВЫБОР
	|		КОГДА РегистрСведенийОбращенияПокупателей.КоличествоПрикрепленныхФайлов > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьПрикрепленные,
	|	РегистрСведенийОбращенияПокупателей.ТипВключения,
	|	РегистрСведенийОбращенияПокупателей.Технолог,
	|	РегистрСведенийОбращенияПокупателей.ПродактМенеджер,
	|	РегистрСведенийОбращенияПокупателей.ЦФО,
	|	РегистрСведенийОбращенияПокупателей.ТерриториальныйУправляющий,
	|	РегистрСведенийОбращенияПокупателей.ПомощникУправляющего,
	|	РегистрСведенийОбращенияПокупателей.КомментарийУКК,
	|	РегистрСведенийОбращенияПокупателей.Новинка,
	|	РегистрСведенийОбращенияПокупателей.Аутсорс
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК РегистрСведенийОбращенияПокупателей
	|ГДЕ
	|	РегистрСведенийОбращенияПокупателей.Производитель = &Производитель
	|	И РегистрСведенийОбращенияПокупателей.Номенклатура = &Номенклатура";
	//|	И РегистрСведенийОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНач И &ДатаКон";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Производитель", Контрагент);
	Запрос.УстановитьПараметр("GUID_Загрузки", email_uid);
	
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(НачалоДня(ТекущаяДата()) + 60 * 60* 24 * 2));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат  РезультатЗапроса;
КонецФункции

Функция ОтправитьЗаявкуНаПодтверждение(Тема, Таблица, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, УчетнаяЗапись = Неопределено, Объект_Ссылка) Экспорт 
	
	//АдресВозврат 			= "zhas@automacon.ru";
	//АдресВозврат 			= "zsergei2000@gmail.com";
	//АдресВозврат 			= "abdr@automacon.ru";
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	КонецЕсли;
	
	Если Адрес<>"" Тогда
		СпАдресов								= Новый СписокЗначений;
		МассивАдресов							= Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СписокКому.Добавить(СокрЛП(Эл));
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		СообщениеПоОшибке = НСтр("ru = 'Письмо не отправлено! Не заполнен адрес электронной почты %Выборка_Акцептант%'");
		ЗаписьЖурналаРегистрации(СтрЗаменить(СообщениеПоОшибке, "%Выборка_Акцептант%", СсылкаАкцептант), УровеньЖурналаРегистрации.Ошибка);
		Возврат 0;
	КонецЕсли;
	
	Почта 										= Новый ИнтернетПочта;
	Профиль 									= УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо 										= Новый ИнтернетПочтовоеСообщение;
	Почта.Подключиться(Профиль);
	Письмо.Тема 								= Тема;
	Письмо.ИмяОтправителя  						= "vkusvill@it-stuff.ru";
	Письмо.Отправитель     						= "vkusvill@it-stuff.ru"; ////accept@izbenka.msk.ru";
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель 								= Письмо.Получатели.Добавить();
		Получатель.Адрес 						= ПолучательЭлемент.Значение;
	КонецЦикла;	
	ТекстСообщения 								= Письмо.Тексты.Добавить();
	ТекстСообщения.Текст    					= ТекстСообщения.Текст + Таблица;
	ТекстСообщения.ТипТекста 					= ТипТекстаПочтовогоСообщения.HTML;
	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	//Запись 										= РегистрыСведений.АкцептЗаявок.СоздатьМенеджерЗаписи();
	//Запись.GUID_Загрузки 						= ID_MESSAGE;
	//Запись.GUID_Заявки 							= GUID_Заявки;
	//Запись.ДатаОтправки 						= ТекущаяДата();
	//Запись.ЗаявкаНаУслугиМатериалы 				= Объект_Ссылка;
	//Запись.Акцептант							= СсылкаАкцептант;
	//Запись.ИдентификаторСообщения 				= Письмо.ИдентификаторСообщения;
	//Запись.ОтправленаНаАкцепт					= Истина;
	//Запись.email 								= Адрес;
	//Запись.ТипЗаявки 							= TYPE_MESSAGE;
	//Запись.Записать();
	
	СообщениеПоОтправке 						= НСтр("ru = 'Отправлено письмо по акцептанту:  %Выборка_Акцептант% и документу %РезЗапросДокиСсылка%'");
	СообщениеПоОтправке 						= СтрЗаменить(СообщениеПоОтправке, "%РезЗапросДокиСсылка%", Объект_Ссылка);
	Сообщить(СтрЗаменить(СообщениеПоОтправке, "%Выборка_Акцептант%", СсылкаАкцептант));
КонецФункции

Функция ВернутьТекстПисьма(email_uid = "", ВыборкаДетальныеЗаписи)
	Таблица 									= ""; 
	style 										= "<td style = ""background: #fff; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	ЦветШапки 									= "E5D4F2";
	ЦветШапки 									= "F0FFFF";
	TR 											= "<th style = ""background: #";
	TA											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	TA1											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	Инд 										= 1;
	НомерЗаявки 								= "";
	//Таблица = Таблица + "<BR>";
	//Таблица = Таблица + "<BR>";
	Таблица 							 		= Таблица + "<b>Запрос к технологам</b>";
	Таблица 							 		= Таблица + "<br><br>";
	Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;""><TR>";
	Таблица 							 		= Таблица + "<td>Номенклатура";
	Таблица 							 		= Таблица + "<td>Производитель";
	Таблица 							 		= Таблица + "<td>Обращение покупателей";
	Таблица 							 		= Таблица + "<td>Дата обращения";
	Таблица 							 		= Таблица + "</TR>";
	
	Попытка
		Документ_ПроверкаКачестваПродуктов = ВертутьДокументПроверкаКачестваПродуктов(email_uid); 
		Если Документ_ПроверкаКачестваПродуктов = Неопределено Тогда
			Документ_ПроверкаКачестваПродуктов = Документы.ПроверкаКачестваПродуктов.СоздатьДокумент();
		КонецЕсли;
		Документ_ПроверкаКачестваПродуктов.ИдентификаторСообщения = email_uid;
		Документ_ПроверкаКачестваПродуктов.Дата = ТекущаяДата();
		
	Исключение
	КонецПопытки;
	
	
	//Таблица 							 		= Таблица + "<BR><b>Ответы писать сюда:</b><BR>";
	
	Для Каждого Строка ИЗ ВыборкаДетальныеЗаписи Цикл
		
		Таблица 							 		= Таблица + "<TR>";
		Таблица 							 		= Таблица + "<td>" + Строка.Номенклатура;
		Таблица 							 		= Таблица + "<td>" + Строка.Контрагент;
		Таблица 							 		= Таблица + "<td>" + Строка.Примечание;
		Попытка
			Таблица 							 		= Таблица + "<td>" + Строка.ДатаДок;
		Исключение
			Таблица 							 		= Таблица + "<td>";
		КонецПопытки;
		Таблица 							 		= Таблица + "</TR>";
		
		Попытка
			Стр 				= Документ_ПроверкаКачестваПродуктов.ДанныеДляПроверки.Добавить();
			Стр.Магазин 		= Строка.СтруктурнаяЕдиница; 
			Стр.ДатаПартии 		= Неопределено;
			Стр.Контрагент 		= Строка.Контрагент;
			Стр.Номенклатура 	= Строка.Номенклатура;
			Стр.Результат 		= Строка.Примечание;
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		Документ_ПроверкаКачестваПродуктов.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
	КонецПопытки;
	
	
	//ДатаДок
	
	
	Таблица 							 		= Таблица + "</Table>";
	
	Таблица 							 		= Таблица + "<BR><b>Ответы писать сюда:</b><BR>";
	Таблица 							 		= Таблица + "<br>";
	Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;""><TR>";
	Таблица 							 		= Таблица + "<td>№ п/п";
	Таблица 							 		= Таблица + "<td>Магазин ТТ";
	Таблица 							 		= Таблица + "<td>Дата партии";
	Таблица 							 		= Таблица + "<td>Плохой результат";
	Таблица 							 		= Таблица + "<td>Хороший результат";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>";
	Таблица 							 		= Таблица + "<td id=""ABC11#1"">1";
	Таблица 							 		= Таблица + "<td id=""ABC12#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC13#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC14#1"">";
	Таблица 							 		= Таблица + "<td id=""ABC15#1"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC21#2"">2";
	Таблица 							 		= Таблица + "<td id=""ABC22#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC23#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC24#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC25#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC31#2"">3";
	Таблица 							 		= Таблица + "<td id=""ABC32#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC33#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC34#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC35#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC41#2"">4";
	Таблица 							 		= Таблица + "<td id=""ABC42#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC43#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC44#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC45#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	
	Таблица 							 		= Таблица + "<TR>"; //-------------------
	Таблица 							 		= Таблица + "<td id=""ABC51#2"">5";
	Таблица 							 		= Таблица + "<td id=""ABC52#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC53#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC54#2"">";
	Таблица 							 		= Таблица + "<td id=""ABC55#2"">";
	Таблица 							 		= Таблица + "</TR>";
	
	
	Таблица 							 		= Таблица + "</Table>";
	Таблица 							 		= Таблица + "<br>";
	Возврат Таблица;
КонецФункции

&НаСервере
Функция ВынестиВердиктНаСервере(email_uid)
	// Вставить содержимое обработчика.
	
	ИскСтрокиПлохой = Объект.ТаблицаВердиктаПлохой.НайтиСтроки(Новый Структура("Пометка", Истина));
	ИскСтрокиХороший = Объект.ТаблицаВердиктаХороший.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если ИскСтрокиХороший.Количество() > 0 И ИскСтрокиПлохой.Количество() > 0 Тогда
		Сообщить("Вы умудрились отметить и хорошее, и плохое решение! Так нельзя! Определитесь!");
		Возврат "";
	ИначеЕсли ИскСтрокиХороший.Количество() = 0 И ИскСтрокиПлохой.Количество() = 0 Тогда
		Сообщить("Не выбрано ни одно решение! Так нельзя! Определитесь!");
		Возврат "";
	ИначеЕсли ИскСтрокиХороший.Количество() > 0 Тогда
		МассивРешений = ИскСтрокиХороший;
		СтрокаВозврата = "Хороший";
	Иначе
		МассивРешений = ИскСтрокиПлохой;
		СтрокаВозврата = "Плохой";
	КонецЕсли; 
	
	Попытка
		мСоединение = АДОКоннекшн_СоздатьОбъект();
		Если 0 = АДОДБ_УстановитьСоединение(мСоединение) Тогда
			Сообщить("Не удалось подключиться...", 30);
			Возврат "";
		КонецЕсли; 
		
		Очищать = Истина; //Очистим все записи для первого прохода
		Для каждого СтрокаРешение Из МассивРешений Цикл
			ИскВердикты = СоответствиеВердиктов.НайтиСтроки(Новый Структура("Ссылка", СтрокаРешение.Критерий));
			Если ИскВердикты.Количество() = 0 Тогда
				ИскСоответствие = СоответствиеВердиктов.Добавить();
				ИскСоответствие.Ссылка = СтрокаРешение.Критерий;
				ИскСоответствие.Идентификатор = СтрокаРешение.Критерий.УникальныйИдентификатор();
				ИскСоответствие.Отрицательный = НЕ СтрокаРешение.Критерий.ФлагДа;
			Иначе
				ИскСоответствие = ИскВердикты[0];
			КонецЕсли;
			
			//+++АК LAGP 2018.03.14 ИП-00017097.04 Была изменена система хранения вердиктов, которая теперь позволяет хранить историю изменения вердиктов.
			//rs = мСоединение.Execute("exec SMS_REPL..Set_emails_results @email_uid ="
			//+ ФорматПоля(email_uid) 
			//+ ", @result_uid = " 
			//+ ФорматПоля(ИскСоответствие.Идентификатор)
			//+ ", @result_name = " 
			//+ ФорматПоля("" + ИскСоответствие.Ссылка)
			//+ ", @isBad = " 
			//+ ФорматПоля(ИскСоответствие.Отрицательный)
			//+ ", @toClear = " 
			//+ ФорматПоля(Очищать)
			//);
			rs = мСоединение.Execute("exec SMS_REPL.dbo.[sp_List_email_results_Add_Del] @email_uid ="
			+ ФорматПоля(email_uid) 
			+ ", @email_results = " 
			+ ФорматПоля(ИскСоответствие.Идентификатор)
			);
			//---АК LAGP
			
			Очищать = Ложь;
		КонецЦикла;
		
		Возврат СтрокаВозврата;
		
		//ВердиктыОценкиДок = ВертутьДокументВердиктыОценки(ДанныеДляФильтра); 
		//Если ВердиктыОценкиДок = Неопределено Тогда
		//	ВердиктыОценкиДок = Документы.ВердиктыОценки.СоздатьДокумент();
		//Иначе
			
		//КонецЕсли;
		//ВердиктыОценкиДок.ИдентификаторСообщения = ДанныеДляФильтра;
		//ВердиктыОценкиДок.Дата = ТекущаяДата();
		//ВердиктыОценкиДок.ТаблицаВердиктаХороший.Загрузить(Объект.ТаблицаВердиктаХороший.Выгрузить());
		//ВердиктыОценкиДок.ТаблицаВердиктаПлохой.Загрузить(Объект.ТаблицаВердиктаПлохой.Выгрузить());
		//ВердиктыОценкиДок.Записать();
		//
		//
		//
		//СтрокиРедактирования = Объект.List_emails.НайтиСтроки(Новый Структура("email_uid", ДанныеДляФильтра));
		//Для Каждого Строка ИЗ СтрокиРедактирования Цикл
		//	//Строка.СтатусПисемРассылки = СтатусПисемРассылки; 
		//	Строка.Вердикт_uid = ВердиктыОценкиДок.Ссылка;
		//КонецЦикла;
		//
		//СтрокиРедактирования = Объект.List_emails1.НайтиСтроки(Новый Структура("email_uid", ДанныеДляФильтра));
		//Для Каждого Строка ИЗ СтрокиРедактирования Цикл
		//	//Строка.СтатусПисемРассылки = СтатусПисемРассылки; 
		//	Строка.Вердикт_uid = ВердиктыОценкиДок.Ссылка;
		//КонецЦикла;
		
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте        
Процедура ВынестиВердикт(Команда)
	
	Если Элементы.List_emails.ТекущиеДанные <> Неопределено Тогда
		//ИмяКолонки 			= СтрЗаменить(Элементы.Список.ТекущийЭлемент.Имя, "Список", "");
		ДанныеДляФильтра 	= Элементы.List_emails.ТекущиеДанные.email_uid; //[ИмяКолонки];
		
		//ОтфильтроватьПоЗначениюВТекущейКолонке1НаСервере(ИмяКолонки, ДанныеДляФильтра);
		
		//+++АК LAGP 2018.03.14 ИП-00017097.04 Была изменена система хранения вердиктов, которая теперь позволяет хранить историю изменения вердиктов, следовательно возврат больше не нужен.
		//Если ЗначениеЗаполнено(Элементы.List_emails.ТекущиеДанные.Вердикт_uid) Тогда
		//	Сообщить("Вердикт Ранее Был Вынесен");
		//	Возврат;
		//КонецЕсли; 
		//---АК LAGP
		
		Элементы.List_emails.ТекущиеДанные.Вердикт_uid = ВынестиВердиктНаСервере(ДанныеДляФильтра);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереключитьНаВердиктНаСервере(УИД)
	// Вставить содержимое обработчика.
	//Если ЗначениеЗаполнено(Объект.ТекущийВердикт) Тогда
	//	
	//	
	//	Объект.ТаблицаВердиктаПлохой.Загрузить(Объект.ТекущийВердикт.ТаблицаВердиктаПлохой.Выгрузить());
	//	Объект.ТаблицаВердиктаХороший.Загрузить(Объект.ТекущийВердикт.ТаблицаВердиктаХороший.Выгрузить());
	//Иначе
	//	ОбновитьДанныеВердикта();
	//КонецЕсли;
	
	ВердиктыМыла = ТЗВердикты.Выгрузить(Новый Структура("email_uid", УИД));
	
	Объект.ТаблицаВердиктаПлохой.Очистить();
	Объект.ТаблицаВердиктаХороший.Очистить();
	
	Для каждого СсылВердикт Из СоответствиеВердиктов Цикл
		Если СсылВердикт.Отрицательный Тогда
			НовСтрока = Объект.ТаблицаВердиктаПлохой.Добавить();
		Иначе
			НовСтрока = Объект.ТаблицаВердиктаХороший.Добавить();
		КонецЕсли;
		Если НЕ ТЗВердикты = Неопределено Тогда
			НовСтрока.Пометка = НЕ (ВердиктыМыла.Найти(СсылВердикт.Ссылка, "Вердикт") = Неопределено);
		КонецЕсли;
		НовСтрока.Критерий = СсылВердикт.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

//+++АК malv 20180123 делаем
//
&НаСервере
Процедура ОчиститьВердиктНаСервере();
	Объект.ТаблицаВердиктаПлохой.Очистить();
	Объект.ТаблицаВердиктаХороший.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаВердикт(Команда)
	Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки <> Неопределено Тогда
		Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки = ПредопределенноеЗначение("Перечисление.СтатусыПисемРассылки.ОтправленоНаПроверку") Тогда		
			Элементы.Группа18.ТекущаяСтраница = Элементы.Группа18.ПодчиненныеЭлементы.ГруппаВердикт;
			ПереключитьНаВердиктНаСервере(Элементы.List_emails.ТекущиеДанные.email_uid);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТаблицаВердиктаХорошийПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	Если 		Объект.ТаблицаВердиктаХороший.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() > 0
		И 	Объект.ТаблицаВердиктаПлохой.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество()> 0 Тогда
		Сообщить("Нельзя отмечать сразу в 2х колонках");
		Элементы.ТаблицаВердиктаХороший.ТекущиеДанные.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВердиктаХорошийПриИзменении(Элемент)
	ТаблицаВердиктаХорошийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаВердиктаПлохойПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	Если 		Объект.ТаблицаВердиктаХороший.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() > 0
		И 	Объект.ТаблицаВердиктаПлохой.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество()> 0 Тогда
		Сообщить("Нельзя отмечать сразу в 2х колонках");
		Элементы.ТаблицаВердиктаПлохой.ТекущиеДанные.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВердиктаПлохойПриИзменении(Элемент)
	ТаблицаВердиктаПлохойПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.Группа28.Видимость = Ложь;
	Элементы.Группа35.Видимость = Ложь;
	Элементы.Группа36.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Функция ВернутьСписокТехнологовПоНоменклатуре(Номенклатура, Производитель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокТехнологовПолучателейРассылки.РольПользователя КАК Ссылка,
		|	ИСТИНА КАК Дневной
		|ПОМЕСТИТЬ ДневныеТехнологи
		|ИЗ
		|	РегистрСведений.СписокТехнологовПолучателейРассылки КАК СписокТехнологовПолучателейРассылки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	РолиПользователей.Ссылка,
		//|	ИСТИНА КАК Дневной
		//|ПОМЕСТИТЬ ДневныеТехнологи1
		//|ИЗ
		//|	Справочник.РолиПользователей КАК РолиПользователей
		//|ГДЕ
		//|	РолиПользователей.Ссылка = &ДневнойТехнологБС
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РолиПользователей.Ссылка,
		//|	ИСТИНА
		//|ИЗ
		//|	Справочник.РолиПользователей КАК РолиПользователей
		//|ГДЕ
		//|	РолиПользователей.Ссылка = &ДневнойТехнологКозноваОльга
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РолиПользователей.Ссылка,
		//|	ИСТИНА
		//|ИЗ
		//|	Справочник.РолиПользователей КАК РолиПользователей
		//|ГДЕ
		//|	РолиПользователей.Ссылка = &ДневнойТехнологРябоваИрина
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РолиПользователей.Ссылка,
		//|	ИСТИНА
		//|ИЗ
		//|	Справочник.РолиПользователей КАК РолиПользователей
		//|ГДЕ
		//|	РолиПользователей.Ссылка = &ДневнойТехнологЧуркинаЕкатерина
		//|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|			ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|		ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|	КОНЕЦ КАК РольТехнолог
		|ПОМЕСТИТЬ ВТ_ТехнологРоли
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|		ЗначенияСвойствОбъектов.Значение КАК Производитель
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|	ГДЕ
		|		ХарактеристикиНоменклатуры.Ссылка = &Характеристика) КАК ВЗ_Характеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихХар
		|		ПО ВЗ_Характеристики.Характеристика = СоответствиеОбъектРольСрезПоследнихХар.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
		|		ПО ВЗ_Характеристики.Производитель = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|				ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|			ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЗ_Запрос.РольТехнолог,
		|	ЛОЖЬ КАК Дневной
		|ПОМЕСТИТЬ ВТ_ВсеТехнологиДляНоменклатуры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог.Родитель КАК РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли
		|	ГДЕ
		|		ЕСТЬNULL(ВТ_ТехнологРоли.РольТехнолог.Родитель, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РолиПользователей.Ссылка
		|	ИЗ
		|		Справочник.РолиПользователей КАК РолиПользователей
		|	ГДЕ
		|		РолиПользователей.Родитель В
		|				(ВЫБРАТЬ
		|					ВТ_ТехнологРоли.РольТехнолог
		|				ИЗ
		|					ВТ_ТехнологРоли КАК ВТ_ТехнологРоли)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли) КАК ВЗ_Запрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДневныеТехнологи.Ссылка,
		|	ДневныеТехнологи.Дневной
		|ИЗ
		|	ДневныеТехнологи КАК ДневныеТехнологи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВТ_ВсеТехнологи.РольТехнолог,
		|	ВТ_ВсеТехнологи.Дневной
		|ПОМЕСТИТЬ ИтоговыйСписокТехнологов
		|ИЗ
		|	ВТ_ВсеТехнологиДляНоменклатуры КАК ВТ_ВсеТехнологи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО ВТ_ВсеТехнологи.РольТехнолог = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыйСписокТехнологов.Сотрудник.Код КАК Сотрудник,
		|	ИтоговыйСписокТехнологов.РольТехнолог.Код КАК РольТехнолог,
		|	ИтоговыйСписокТехнологов.Дневной,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	ИтоговыйСписокТехнологов КАК ИтоговыйСписокТехнологов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ИтоговыйСписокТехнологов.Сотрудник = КонтактнаяИнформация.Объект
		|			И (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) = КонтактнаяИнформация.Тип)";
	
	Запрос.УстановитьПараметр("ТекДата", 						КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Характеристика", 				?(ЗначениеЗаполнено(Производитель), Производитель, Номенклатура));
	
		//Запрос.УстановитьПараметр("Характеристика", 				?(ЗначениеЗаполнено(Производитель), Номенклатура, Производитель));
	
	//ТУТ НАДО НАСТРОЙУ ДОБАВИТЬ!!!! -заменить найти по коду
	//Запрос.УстановитьПараметр("ДневнойТехнологБС", 				Справочники.РолиПользователей.НайтиПоКоду("00036"));
	//Запрос.УстановитьПараметр("ДневнойТехнологКозноваОльга", 	Справочники.РолиПользователей.НайтиПоКоду("00038"));
	//Запрос.УстановитьПараметр("ДневнойТехнологРябоваИрина", 	Справочники.РолиПользователей.НайтиПоКоду("00184"));
	//Запрос.УстановитьПараметр("ДневнойТехнологЧуркинаЕкатерина",Справочники.РолиПользователей.НайтиПоКоду("00037"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов = Новый ТаблицаЗначений;
	СписокАдресов.Колонки.Добавить("Адрес");
	СписокАдресов.Колонки.Добавить("РольТехнолог");
	СписокАдресов.Колонки.Добавить("Дневной");
	СписокАдресов.Колонки.Добавить("Сотрудник");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Представление) Тогда
			Стр 				= СписокАдресов.Добавить();
			Стр.Адрес 			= ВыборкаДетальныеЗаписи.Представление;
			Стр.РольТехнолог 	= ВыборкаДетальныеЗаписи.РольТехнолог;
			Стр.Дневной 		= ВыборкаДетальныеЗаписи.Дневной;
			Стр.Сотрудник 		= ВыборкаДетальныеЗаписи.Сотрудник;
			//СписокАдресов.Добавить(ВыборкаДетальныеЗаписи.Представление);
			
			Сообщить("Письма будут отправлены: " + ВыборкаДетальныеЗаписи.Сотрудник + " Дневной:" ++ ВыборкаДетальныеЗаписи.Дневной + " Роль:"  + ВыборкаДетальныеЗаписи.РольТехнолог + " Адрес: " + ВыборкаДетальныеЗаписи.Представление);
		
		
		//СписокАдресов = Запрос.Выполнить().Выгрузить();
		//
		//Если СписокАдресов.Количество() > 0 Тогда
		//	АдресПолучателя = СписокАдресов [0].Представление; 
		//Иначе
		//	АдресПолучателя = "";
		КонецЕсли; 

		
		
		
	КонецЦикла;
	
	Если Объект.РежимОтладки Тогда
	
		СписокАдресов.Очистить();
		
	КонецЕсли;
	
	Возврат СписокАдресов;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
	
	//Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	КонтактнаяИнформация.Объект,
	//	|	КонтактнаяИнформация.Тип,
	//	|	КонтактнаяИнформация.Вид,
	//	|	КонтактнаяИнформация.Представление
	//	|ИЗ
	//	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|ГДЕ
	//	|	КонтактнаяИнформация.Объект  = &Руководитель
	//	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	//	
	//	
	//	Запрос.УстановитьПараметр("Руководитель", РуководительПодразделения);

КонецФункции

//+++АК malv 20180123 делаем
//
&НаКлиенте
Процедура List_emailsПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.List_emails.ТекущиеДанные.СтатусПисемРассылки = Перечисления.СтатусыПисемРассылки.НеОтработано Тогда
		Элементы.List_emailsВердикт_uid.ТолькоПросмотр = Истина;
	КонецЕсли; 
КонецПроцедуры

//+++АК LAGP 2018.02.21 ИП-00017097.02 Открывает расписания регламентного задания, чтобы пользователь сам мог задать выполнение как сочтёт необходимым
&НаСервере
Функция НастройкаАвторассылкиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина); //метод РегламентныеЗадания.ПолучитьРегламентныеЗадания возможен только для администратора
	РегламентноеЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Наименование", "Работа с оповещениями о проверке качества продуктов"));
	
	Если РегламентноеЗадание.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	РегламентноеЗаданиеРасписание = РегламентноеЗадание[0].Расписание;
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат РегламентноеЗаданиеРасписание;
	
КонецФункции

//+++АК LAGP 2018.02.21 ИП-00017097.02 Открывает расписания регламентного задания, чтобы пользователь сам мог задать выполнение как сочтёт необходимым
&НаКлиенте
Процедура НастройкаАвторассылки(Команда)
	
	РегламентноеЗаданиеРасписание = НастройкаАвторассылкиНаСервере();
	
	Если НЕ РегламентноеЗаданиеРасписание = Неопределено Тогда 
		ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РегламентноеЗаданиеРасписание);
		ДиалогРасписания.Показать(Новый ОписаниеОповещения("ОкончаниеРедактированияРасписание", ЭтаФорма));
	КонецЕсли;	
	
КонецПроцедуры

//+++АК LAGP 2018.02.21 ИП-00017097.02 Открывает расписания регламентного задания, чтобы пользователь сам мог задать выполнение как сочтёт необходимым
&НаСервере
Процедура ОкончаниеРедактированияРасписание(РегламентноеЗаданиеРасписание, ДопПараметры)
	
    Если РегламентноеЗаданиеРасписание = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); //метод РегламентныеЗадания.ПолучитьРегламентныеЗадания возможен только для администратора
    РегламентноеЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Наименование", "Работа с оповещениями о проверке качества продуктов"))[0];  	
    РегламентноеЗадание.Расписание  = РегламентноеЗаданиеРасписание;
    РегламентноеЗадание.Записать();
	УстановитьПривилегированныйРежим(Истина);
	
КонецПроцедуры

//УчетнаяЗапись.POP3Сервер  = "10.0.0.30";
//110
//УчетнаяЗапись.Логин = "no-reply@vkusvill.ru"
//УчетнаяЗапись.Пароль = "gtkmvtym";

