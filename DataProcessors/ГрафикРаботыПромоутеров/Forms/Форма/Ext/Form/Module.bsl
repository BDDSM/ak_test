
//////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отктытие из обработки График работы продавцов
	
	Если Параметры.Свойство("ГруппаТорговыхТочек")Тогда
		ГруппаТорговыхТочек = Параметры.ГруппаТорговыхТочек;	
	КонецЕсли;
	
	Если Параметры.Свойство("ВП")Тогда
		Период.Вариант 			= Параметры.ВП.Вариант;	
		Период.ДатаНачала 		= Параметры.ВП.ДатаНачала;	
		Период.ДатаОкончания	= Параметры.ВП.ДатаОкончания;
	Иначе
		УстановитьПериодПоУмолчанию();
	КонецЕсли;
	
	ЗаполнениеОтветственныхПользователейСервер(); //+++АК mika 2018.07.17 ИП-00019185
	
	ОбновитьВидимостьЭлементовФормы();//+++АК mika 2018.07.17 ИП-00019185
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость(Истина);
	
	ОбновитьВозможностьИзмененияГруппыТорговыйТочек() //+++АК mika 2017.12.27 ИП-00016863.01
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЧНЫМ ДОКУМЕНТОМ

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки / 2) * 2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ПредставлениеТекущийПродавец = "";
		ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;
	
	Элементы.ТаблицаСотрудникПериод.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТабличномДокументе(ДеньВыхода, Представление = "", КоличествоЧасов = 0, ТорговаяТочка = Неопределено)
	
	ТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	НомерКолонки = ТекОбл.Лево;
	
	НачалоПериода 	= НачалоДня(Период.ДатаНачала);
	НомерСтроки 	= 0;
	
	Пока НачалоПериода <= ДеньВыхода Цикл 
		
		НомерСтроки 	= НомерСтроки + 1;
		НачалоПериода 	= НачалоПериода + 86400;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 5;
	
	// Четные колонки Представление, не четные КоличествоЧасов
	КолонкаПредставления = Цел(НомерКолонки/2)*2;
	КолонкаКоличество = НомерКолонки;
	Если КолонкаПредставления = КолонкаКоличество Тогда
		КолонкаКоличество = КолонкаКоличество + 1;
	КонецЕсли;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаПредставления);
	ТекОбласть.Значение = Представление;
	
	ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаКоличество, НомерСтроки, КолонкаКоличество);
	ТекОбласть.Значение = КоличествоЧасов;
	
	// Цвет
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	НайденнаяСтрокаЦвет = ЦветаТТ.Найти(ТорговаяТочка, "ТорговаяТочка");
	
	Если НайденнаяСтрокаЦвет <> Неопределено Тогда
		ТекОбласть = ТабличныйДокумент.Область(НомерСтроки, КолонкаПредставления, НомерСтроки, КолонкаКоличество);
		ТекОбласть.ЦветФона = НайденнаяСтрокаЦвет.Цвет;
	КонецЕсли;
	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьГрафикНаСервере();
	УстановитьВидимость();
	
	// Фиксация областей
	ТабличныйДокумент.ФиксацияСлева  = 3;
	ТабличныйДокумент.ФиксацияСверху = 5;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромоутера(Команда)
	
	ПараметрыОтбора = Новый Структура("ЦФО, ТекущийПомощник", ГруппаТорговыхТочек, ТекущийПомощник);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		ДобавитьПервоеФизЛицоВГрафик(Результат);
		ИзменитьПорядокПромоутеровВТабеле(Результат, ТекущийПродавец);
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромоутераСлева(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с промоутером относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЦФО, ТекущийПомощник", ГруппаТорговыхТочек, ТекущийПомощник);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(Результат)Тогда
		
		НаличиеСотрудника = ПроверитьНаличиеСотрудникаВГрафике(Результат);
		Если НаличиеСотрудника Тогда
			Предупреждение("В табеле уже присутствует сотрудник " + Результат);
			Возврат;	
		КонецЕсли;
		
		РаздвинутьОбластьНаСервере(НомерКолонкиРасшифровки, Результат);
		
		// Порядок
		ИзменитьПорядокПромоутеровВТабеле(Результат, ТекущийПродавец);		
		
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	ТаблицаСотрудникПериодИзменитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтроку(Команда)
	
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
		
		Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
		
		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
		Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ТекСтр.Период)Тогда
			ОчиститьЗаписиВРегистре(Данные);
		КонецЕсли;
		
		ТекСтр.Представление = "";
		ТекСтр.КоличествоЧасов = 0;
		ТекСтр.ПредставлениеТабличныйДокумент = "";
		ТекСтр.ТаблицаДанных.Очистить();
		
		ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, "", 0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФизЛица(Команда)
	
	Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
		ОткрытьЗначение(ТекущийПродавец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТорговыхТочекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//открыть форму выбора структурных единиц
	ПараметрыОтбора = Новый Структура("НаименованиеГруппы", "Управление розницей.");
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаВыбораСтруктурнойЕдиницы", ПараметрыОтбора);
	
	Если Результат <> Неопределено Тогда
		ГруппаТорговыхТочек = Результат;
		ОчиститьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТекущегоПромоутера(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом относительно котрой необходимо выполнить действие. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор промоутера");
	Если Результат <> Неопределено Тогда
		
		//+++АК mika 2018.07.25 ИП-00019350 Некорректный порядок
		//ПеренестиПромоутераВТабеле(НомерКолонкиРасшифровки, Результат.Значение);
		Попытка
			ПеренестиПромоутераВТабеле(НомерКолонкиРасшифровки, Результат.Значение);
		Исключение
			ПоказатьПредупреждение(, СтрЗаменить(" У сотрудника «ФизЛицо» неактуален индекс порядка сортировки!
			                                      |Для актуализации индекса переместите сотрудника к любому другому (предпочтительно выбирать сотрудников справа от вышеуказанного).
												  |(После актуализации индекса появится возможность ставить перед «ФизЛицо» других сотрудников)", "ФизЛицо", Результат));
			Возврат;
		КонецПопытки;
		//---АК mika 
		
		ИзменитьПорядокПромоутеровВТабеле(ТекущийПродавец, Результат.Значение);
		ОбновитьГрафикНаСервере();
		УстановитьВидимость();
		
		// Фиксация областей
		ТабличныйДокумент.ФиксацияСлева  = 3;
		ТабличныйДокумент.ФиксацияСверху = 5;
		ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафик(Команда)
	
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	// Смотрим расшифровку по четной колонке
	НомерКолонкиРасшифровки = НомерВыделеннойКолонки;
	Если НомерКолонкиРасшифровки > 1 Тогда
		НомерКолонкиРасшифровки = Цел(НомерВыделеннойКолонки/2)*2;
	КонецЕсли;
	
	Расшифровка = ТабличныйДокумент.Область(3, НомерКолонкиРасшифровки, 3, НомерКолонкиРасшифровки).Расшифровка;
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Предупреждение("Встаньте в колонку с продавцом для которго необходимо скопировать график. Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ПолучитьСписокСотрудников();
	Результат = СписокСотрудников.ВыбратьЭлемент("Выбор промоутера с которого копируется график");
	Если Результат <> Неопределено Тогда
	
		ПараметрыОткрытия = Новый Структура("ФизическоеЛицо, НачалоПериода, КонецПериода", Результат.Значение, Период.ДатаНачала, Период.ДатаОкончания);
		ДанныеКопирования = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаКопированияГрафика", ПараметрыОткрытия, ЭтаФорма);
		
		Если ТипЗнч(ДанныеКопирования) = Тип("Структура")Тогда
			
			СкопироватьГрафикНаСервере(ДанныеКопирования);
			
			ТабличныйДокументПриАктивизацииОбласти(Элементы.ТабличныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаГрафика(Команда)
	
	Форма = ПолучитьФорму("РегистрСведений.ТабельРаботыПромоутеров.Форма.ФормаСписка");
	
	Форма.Список.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = ГруппаТорговыхТочек;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = Период.ДатаНачала;
	
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементОтбора.ПравоеЗначение = КонецДня(Период.ДатаОкончания);
	
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	форма.ПодчиненныеЭлементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджев(Команда)
	
	АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище();
	
	ПараметрыФормы = Новый Структура("Адрес", АдресВоВременномХранилище);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаПодбораПродавцов", ПараметрыФормы);
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ТабДокумент = ПолучитьТабличныйДокумент(Результат);
		
		ТабДокумент.ОтображатьСетку = Ложь;
		ТабДокумент.Защита = Истина;
		ТабДокумент.ТолькоПросмотр = Истина;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		ТабДокумент.Показать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОтклонениеГрафиковРаботыОтРеальныхВыходов(Команда)
	ОткрытьФорму("Отчет.ОтклонениеГрафиковРаботыПромоутеровОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма);	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

Процедура ОбновитьГрафикНаСервере()
	
	ОчиститьДанныеНаСервере();
	
	ЗаполнитьТаблицуСотрудникПериодНаСервере();
	
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод угла шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
	
	// Вывод сотрудников
	Для Каждого Сотр Из ИнформацияПоСотрудникам Цикл
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Сотрудник);
		ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
		ОбластьШапкаСотрудник.Параметры.ФИО 		= ФИО;
		ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,КодСотрудника,Телефон", Сотр.Сотрудник, Сотр.КодСотрудника, Сотр.Телефон);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуЦветовТТ();
	ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
	
	// Вывод Периодов
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		Для Каждого СтрТЗ Из ИнформацияПоСотрудникам Цикл
			
			ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
			
			НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
			
			Если НайденныеСтроки.Количество()Тогда
				
				СтрокаСДанными = НайденныеСтроки[0];
				ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
				
				// Имеет смысл если есть точки
				Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
					
					НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
					
					Если НайденнаяСтрокаЦвет <> Неопределено Тогда
						ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Добавим пустую строку с периодом
				СтрВход = ТаблицаСотрудникПериод.Добавить();
				СтрВход.Сотрудник 	= СтрТЗ.Сотрудник;
				СтрВход.Период 		= НачалоПериода;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			
		КонецЦикла;

		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода"	, НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Группа"			, ГруппаТорговыхТочек);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельРаботыПромоутеров.Период КАК Период,
	|	ТабельРаботыПромоутеров.Сотрудник КАК Сотрудник,
	|	ТабельРаботыПромоутеров.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыПромоутеров.ТорговаяТочка,
	|	ТабельРаботыПромоутеров.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеляПромоутеров.Порядок, 0) КАК Порядок
	|ИЗ
	|	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПромоутеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляПромоутеров КАК СпецификаФормированияТабеляПромоутеров
	|		ПО ТабельРаботыПромоутеров.Группа = СпецификаФормированияТабеляПромоутеров.Группа
	|			И ТабельРаботыПромоутеров.Сотрудник = СпецификаФормированияТабеляПромоутеров.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыПромоутеров.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|ГДЕ
	|	ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыПромоутеров.Группа = &Группа
	//|	И НЕ ТабельРаботыПромоутеров.Сотрудник.ВнештатныйСотрудник
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Телефон),
	|	МАКСИМУМ(Порядок)
	|ПО
	|	Сотрудник,
	|	Период";
	
	//+++АК mika 2018.02.09.30 ИП-00016863.02
	//Возможность "Помощнику" формировать график по "своим" подчиненным сотрудникам,
	//независимо от группы на которую было распределение 
	Если ВариантПостроения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабельРаботыПромоутеров.Группа", "ТабельРаботыПромоутеров.ГруппаСотрудника");
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабельРаботыПромоутеров.Период,","ТабельРаботыПромоутеров.Период, ТабельРаботыПромоутеров.Группа,");
		//Отбор сотрудников по помощнику
		Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
			//Для управляющего использовать отбор по помощнику если он установлен, иначе отображать данные по группе сотрудника "в целом".
			Если ЗначениеЗаполнено(ТекущийПомощник) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботыПромоутеров.Сотрудник.ПомощникТУ = &ТекущийПомощник");
				Запрос.УстановитьПараметр("ТекущийПомощник", ТекущийПомощник);
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода","И ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботыПромоутеров.Сотрудник.ПомощникТУ = &ТекущийПомощник");
			Запрос.УстановитьПараметр("ТекущийПомощник", ТекущийПомощник);
		КонецЕсли;
	КонецЕсли;
	//+++АК mika

	//+++АК mika 2018.07.17 ИП-00019209
	Если ВариантПостроения = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СпецификаФормированияТабеляПромоутеров", "РегистрСведений.СпецификаФормированияТабеляПромоутеровПомощники");
	КонецЕсли;
	//---АК mika
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий() Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))");
	
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериод.Очистить();
	ИнформацияПоСотрудникам.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникПериодВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицаСотрудникПериодИзменитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникПериодИзменитьДанные()
	
	ТекДанные = Элементы.ТаблицаСотрудникПериод.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТорговаяТочка");
	ТЗ.Колонки.Добавить("КоличествоЧасов");
	
	Для Каждого СтрМассива Из ТекДанные.ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрМассива.ТорговаяТочка) Тогда
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрМассива);
		КонецЕсли;
	КонецЦикла;

 	МассивСтрок = Элементы.ТаблицаСотрудникПериод.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 1 Тогда
		
		ПараметрыОткрытия = Новый Структура("Сотрудник, Период, ТаблицаДанных", ТекущийПродавец, ТекДанные.Период, ТЗ);
		Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
		
	Иначе
		
		// Без привязки к периоду
		ПараметрыОткрытия = Новый Структура("Сотрудник, ТаблицаДанных", ТекущийПродавец, ТЗ);
		Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыПромоутеров.Форма.ФормаРедактированияПериодаМассивСтрок", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТекСтр = ТаблицаСотрудникПериод.НайтиПоИдентификатору(СтрокаМассива);
			
			Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, ТекСтр.Период);
			
			// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
			Если ЗначениеЗаполнено(ТекущийПродавец)
					И ЗначениеЗаполнено(ГруппаТорговыхТочек)
					И ЗначениеЗаполнено(ТекСтр.Период) Тогда
				ОчиститьЗаписиВРегистре(Данные);
			КонецЕсли;
			
			ТД = ТекСтр.ТаблицаДанных;
			ТД.Очистить();
			
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			Представление   = "";
			КоличествоЧасов = 0;
			ТорговаяТочка = Неопределено;
						
			Для Каждого Стр Из Результат.ТаблицаДанных Цикл
				
				// Берем первую для раскраски макета
				Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					ТорговаяТочка = Стр.ТорговаяТочка;	
				КонецЕсли;
				
				Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
				Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
				//+++АК mika 2018.07.17 ИП-00019185
				Данные.Вставить("ЦФО"			 , Стр.ЦФО); 
				
				//Если ЗначениеЗаполнено(ТекущийПродавец)
				//	И ЗначениеЗаполнено(Стр.ЦФО)
				//		И ЗначениеЗаполнено(ТекСтр.Период) Тогда
				//	ОчиститьЗаписиВРегистре(Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, Стр.ЦФО, ТекСтр.Период));
				//КонецЕсли;
				//---АК mika
				
				ОшибкаПриЗаписи = Ложь;
				ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
				
				Если Не ОшибкаПриЗаписи Тогда
					
					ЗаполнитьЗначенияСвойств(ТД.Добавить(), Стр);
					
					//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
					Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
					КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
					
				Иначе
					Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЦикла;
			
			ПредставлениеТабличныйДокумент = Представление;
			
			ТекСтр.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент;
			ТекСтр.Представление   = Представление;
			ТекСтр.КоличествоЧасов = КоличествоЧасов;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗаписиВРегистре(Данные)
	
	//+++АК mika 2018.09.13 ИП-00019819
	ОчиститьЗаписиВРегистреЗапрос(Данные);
	Возврат;
	//---АК mika 
	
	НЗ = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(Данные.Период);
	НЗ.Отбор.Сотрудник.Установить(Данные.Сотрудник);
	НЗ.Отбор.Группа.Установить(Данные.Группа);
	НЗ.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьМенеджерЗаписи();
	Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	
	//+++АК mika 2018.07.17 ИП-00019185
	Если ВариантПостроения = 1 Тогда
		Запись.Группа = Данные.ЦФО;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.ГруппаСотрудника) Тогда
		Запись.ГруппаСотрудника = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(Запись.Сотрудник, Истина, Истина); 
	КонецЕсли;
	//---АК mika
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость(Открытие = Ложь)
	
	ЕстьДанные = (ТаблицаСотрудникПериод.Количество() > 0);
	
	Элементы.ДобавитьПромоутера.Видимость 			= НЕ ЕстьДанные
														И НЕ Открытие;
	Элементы.ДобавитьПромоутераСлева.Видимость 		= ЕстьДанные;
	Элементы.ПереместитьТекущегоПромоутера.Видимость= ЕстьДанные;
	Элементы.СкопироватьГрафик.Видимость 			= ЕстьДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервоеФизЛицоВГрафик(Знач ФизЛицо)
	
	ТабличныйДокумент.Очистить();
	                                
	Макет = ПолучитьМакетНаСервере();
	ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
	ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
	ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
	
	// Вывод шапки
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкаСотрудник.Параметры.ФИО 			= ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицо);
	ОбластьШапкаСотрудник.Параметры.КодСотрудника 	= ФизЛицо.Код;
	ОбластьШапкаСотрудник.Параметры.Расшифровка 	= Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", ФизЛицо, ФизЛицо.Код, "");
	ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
	
	Выходные	  = ЗаполнитьТаблицуВыходных(Период.ДатаНачала, Период.ДатаОкончания);
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
		
		Если Выходной Тогда
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
		Иначе	
			ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		ОбластьСтрокаПериод.Параметры.Период 			= Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		ОбластьСтрокаПериод.Параметры.ПериодПрописью 	= Формат(НачалоПериода, "ДФ=ддд");
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
		
		ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
		
		// Добавим пустую строку с периодом
		СтрВход = ТаблицаСотрудникПериод.Добавить();
		СтрВход.Сотрудник 	= ФизЛицо;
		СтрВход.Период 		= НачалоПериода;
		
		ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");
		
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ПолучитьМакет("График");
	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеСотрудникаВГрафике(Сотрудник)
	
	НаличиеСотрудника = Ложь;
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	// Расшифровка всегда в четной колонке
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = Сотрудник Тогда
			НаличиеСотрудника = Истина;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;
	
	Возврат НаличиеСотрудника;
	
КонецФункции

&НаСервере
Процедура РаздвинутьОбластьНаСервере(КолонкаИсточник, Сотрудник)
	
	// Заполним пустые строки в Основной таблице
	НачалоПериода = НачалоДня(Период.ДатаНачала);
	Пока НачалоПериода <= НачалоДня(Период.ДатаОкончания) Цикл
		
		НовСтр = ТаблицаСотрудникПериод.Добавить();
		НовСтр.Сотрудник 	= Сотрудник;
		НовСтр.Период 		= НачалоПериода;
		
		НачалоПериода = НачалоПериода + 86400;
		
	КонецЦикла;
	
	КолонкаПриемник = КолонкаИсточник; 
	
	// Колонка источник всегда четная, в области 2 колонки
	ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + КолонкаИсточник + ":C" + (КолонкаИсточник+1)), ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	//Очистим новую область
	ТекОбласть = ТабличныйДокумент.Область("C" + КолонкаПриемник + ":C" + (КолонкаПриемник+1));
	ТекОбласть.Очистить();
	
	// Цвет
	ТекОбласть.ЦветФона = WebЦвета.Белый;
	
	ТабличныйДокумент.Область("R3" + "C" + КолонкаПриемник).Параметр 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотрудник);
	ТабличныйДокумент.Область("R3" + "C" + КолонкаПриемник).Значение 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотрудник);
	ТабличныйДокумент.Область("R3" + "C" + КолонкаПриемник).Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник, КодСотрудника, Телефон", Сотрудник, Сотрудник.Код, "");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПромоутеровВТабеле(НовоеФизЛицо, ТекущееФизЛицо)
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	НайденнаяСтрока = ТЗ.Найти(ТекущееФизЛицо, "Сотрудник");
	Если НайденнаяСтрока = Неопределено Тогда
		ПорядокТекПродавца = 1;
	Иначе	
		ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	КонецЕсли;
	
	Для Каждого Стр Из ТЗ Цикл
		Если ПорядокТекПродавца <= Стр.Порядок Тогда
			Стр.Порядок = Стр.Порядок + 1;
		КонецЕсли;
	КонецЦикла;	
		
	// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	СтрНовогоФЛ =  ТЗ.Найти(НовоеФизЛицо, "Сотрудник");
	Если СтрНовогоФЛ = Неопределено Тогда
		НовСтр = ТЗ.Добавить();
		НовСтр.Сотрудник 	 = НовоеФизЛицо;
		НовСтр.КодСотрудника = НовоеФизЛицо.Код;
		НовСтр.Порядок   	 = ПорядокТекПродавца;
	Иначе
		СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	КонецЕсли;
	
	ТЗ.Сортировать("Порядок, Сотрудник");
	
	// Обновим порядок
	Порядок = 1;
	Для Каждого Стр Из ТЗ Цикл
		Стр.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// Запишем в регистр
	
	//+++АК mika 2018.07.17 ИП-00019209
	//НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляПромоутеров.СоздатьНаборЗаписей();
	Если ВариантПостроения = 1 Тогда
		НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляПромоутеровПомощники.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыСведений.СпецификаФормированияТабеляПромоутеров.СоздатьНаборЗаписей();
	КонецЕсли;
	//---АК mika 
	
	НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	НаборЗаписей.Записать();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		
		Запись.Группа = ГруппаТорговыхТочек;
		Запись.ФизическоеЛицо = Стр.Сотрудник;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
 
	ЗначениеВРеквизитФормы(ТЗ, "ИнформацияПоСотрудникам");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	СписокСотрудников = Новый СписокЗначений;
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	СписокСотрудников.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Сотрудник"));
	
	Возврат СписокСотрудников;
	
КонецФункции

&НаСервере
Процедура ПеренестиПромоутераВТабеле(ТекущаяКолонка, ФизЛицо)
	
	НачальнаяКолонка 	= 4;
	КонечнаяКолонка 	= ТабличныйДокумент.ШиринаСтраницы;
	
	ИскомаяКолонкаФЛ = 4;
	
	Пока НачальнаяКолонка <= КонечнаяКолонка Цикл
		
		Расшифровка = ТабличныйДокумент.Область(3, НачальнаяКолонка, 3, НачальнаяКолонка).Расшифровка;
		
		Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") Тогда
			НачальнаяКолонка = НачальнаяКолонка + 2;
			Продолжить;
		КонецЕсли;
		
		Если Расшифровка.Сотрудник = ФизЛицо Тогда
			ИскомаяКолонкаФЛ = НачальнаяКолонка;
			Прервать;
		КонецЕсли;
		
		НачальнаяКолонка = НачальнаяКолонка + 2;
		
	КонецЦикла;	
	
	Если ТекущаяКолонка <> ИскомаяКолонкаФЛ Тогда
		
		// Колонка Искомая всегда четная, в области 2 колонки
		ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТабличныйДокумент.Область("C" + ИскомаяКолонкаФЛ + ":C" + (ИскомаяКолонкаФЛ+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		//Удалим область
		Если ТекущаяКолонка > ИскомаяКолонкаФЛ Тогда
			ТекущаяКолонка = ТекущаяКолонка+2;
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("C" + ТекущаяКолонка + ":C" + (ТекущаяКолонка+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикНаСервере(ДанныеКопирования)
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаСотрудникПериод");
	
	ТаблицаДанных = ТЗ.Скопировать();
	ТаблицаДанных.Очистить();
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеКопирования.ФизическоеЛицо));
	Если НайденныеСтроки.Количество()Тогда
		
		НП = НачалоДня(ДанныеКопирования.НачалоПериода);
		КП = КонецДня(ДанныеКопирования.КонецПериода);
		
		Для Каждого СтрокаМассива Из НайденныеСтроки Цикл
			
			Если СтрокаМассива.Период >= НП И СтрокаМассива.Период <= КП Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Промоутер с которого производится копирование не найден в графике");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Данные = Новый Структура();
		Данные.Вставить("Сотрудник", ТекущийПродавец);
		
		// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
		Если ЗначениеЗаполнено(ТекущийПродавец) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(СтрокаТЗ.Период)Тогда
			ДанныеОчистки = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, СтрокаТЗ.Период);
			ОчиститьЗаписиВРегистре(ДанныеОчистки);
		КонецЕсли;
		
		Строки = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Период", ТекущийПродавец, СтрокаТЗ.Период));
		Если Строки.Количество()Тогда
			
			Данные.Вставить("Период", СтрокаТЗ.Период);
			
			ТекСтр = Строки[0];
			ТД = ТекСтр.ТаблицаДанных;
			ТД.Очистить();
			
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			Представление   = "";
			КоличествоЧасов = 0;
			ТорговаяТочка = Неопределено;
			
			Для Каждого Стр Из СтрокаТЗ.ТаблицаДанных Цикл
				
				// Берем первую для раскраски макета
				Если Не ЗначениеЗаполнено(ТорговаяТочка)Тогда
					ТорговаяТочка = Стр.ТорговаяТочка;	
				КонецЕсли;
				
				Данные.Вставить("ТорговаяТочка"	 , Стр.ТорговаяТочка);
				Данные.Вставить("КоличествоЧасов", Стр.КоличествоЧасов);
				
				ОшибкаПриЗаписи = Ложь;
				ЗаписатьИзмененияВРегистр(Данные, ОшибкаПриЗаписи);
				
				Если Не ОшибкаПриЗаписи Тогда
					
					ЗаполнитьЗначенияСвойств(ТД.Добавить(), Стр);
					
					//ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(Стр.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
					Представление   = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(Стр.ТорговаяТочка);
					КоличествоЧасов = КоличествоЧасов + Стр.КоличествоЧасов;
					
				Иначе
					Сообщить("Данные за период " + Формат(ТекСтр.Период, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
				КонецЕсли;
				
			КонецЦикла;
			
			ПредставлениеТабличныйДокумент = Представление;
			
			ТекСтр.ПредставлениеТабличныйДокумент   = ПредставлениеТабличныйДокумент;
			ТекСтр.Представление   = Представление;
			ТекСтр.КоличествоЧасов = КоличествоЧасов;
			
			ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, ПредставлениеТабличныйДокумент, КоличествоЧасов, ТорговаяТочка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаСотрудникПериод");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	ТЗ = РеквизитФормыВЗначение("ИнформацияПоСотрудникам");
	МассивФизЛиц = ТЗ.ВыгрузитьКолонку("Сотрудник");
	
	Адрес = ПоместитьВоВременноеХранилище(МассивФизЛиц);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокумент(МассивФизическихЛиц)
	
	Возврат Обработки.ГрафикРаботыПродавцов_ТЗ.СформироватьТабличныйДокумент(МассивФизическихЛиц);
	
КонецФункции

&НаСервере
Процедура УстановитьПериодПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, 2) КАК ДатаОкончания");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияГрафикаПродавцов.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Период.ДатаНачала = Макс(ГраницаЗапретаРедактирования+86400, НачалоДня(Выборка.ДатаНачала));
		Период.ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	ТаблицаЦветовТТ.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = Выборка.ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ТекущийПродавец)  И ТабличныйДокумент.ТекущаяОбласть.верх=3 Тогда
	    СтандартнаяОбработка=Ложь;
		СтруктураЗаполнения=Новый Структура("Продавец",ТекущийПродавец);
		//Период1=ПолучитьПоследнююДату(ТекущийПродавец);
		//Если Период1=Неопределено Тогда
		//	Период1=НачалоДня(ТекущаяДата());
		//Иначе	
		//	Ответ = Вопрос("Внести новую запись по статусу?", РежимДиалогаВопрос.ДаНет);

		//	Если (Ответ = КодВозвратаДиалога.Да) Тогда
		//		Период1=НачалоДня(ТекущаяДата());
		//	КонецЕсли; 
		//КонецЕсли; 
		//СтруктураЗаполнения.Вставить("Период",Период1);
		ОткрытьФормуЗаписи(СтруктураЗаполнения);	                              
	
	КонецЕсли; 
КонецПроцедуры
  
&НаКлиенте
Процедура ОткрытьФормуЗаписи(СтруктураЗаполнения)
	
	Если Не ЕстьЗапись(СтруктураЗаполнения) Тогда
		СтруктураДанных=Новый Структура("ЗначенияЗаполнения",СтруктураЗаполнения);		
	Иначе
		ЭтотМассив=Новый Массив;
		ЭтотМассив.Добавить(СтруктураЗаполнения);
		КлючЗаписи       =    Новый("РегистрСведенийКлючЗаписи.СтатусыПродавцов", ЭтотМассив);
		СтруктураДанных=Новый Структура("Ключ,ОграничитьДоступность",КлючЗаписи,Истина)		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.СтатусыПродавцов.ФормаЗаписи",СтруктураДанных,ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнююДату(ТекущийПродавец)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыПродавцовСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.СтатусыПродавцов.СрезПоследних(&Дата, Продавец = &Продавец) КАК СтатусыПродавцовСрезПоследних";

	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Продавец", ТекущийПродавец);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Период;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ЕстьЗапись(СтруктураЗаполнения)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПродавцов.Продавец
	               |ИЗ
	               |	РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцов
	               |ГДЕ
	               |	 СтатусыПродавцов.Продавец = &Продавец";
	
	Запрос.УстановитьПараметр("Продавец", СтруктураЗаполнения.Продавец);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат  Ложь;
КонецФункции

&НаКлиенте
Процедура ВариантПостроенияПриИзменении(Элемент) //+++АК mika 2018.07.17 ИП-00019185 
												   
	Если ИнформацияПоСотрудникам.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросСменитьВариантПостроленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные будут очищены! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
		
	Иначе
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСменитьВариантПостроленияЗавершение(Результат, ДопПараметры) Экспорт //+++АК mika 2018.07.17 ИП-00019185
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
		ОчиститьДанныеНаСервере();
		
	Иначе
		
		ВариантПостроения = ВариантПостроения <> 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обновление видимость и доступность элементов формы для помощников ТУ
// Помощники ТУ должны иметь возможность формировать график с отбором по стандартному алгоритму (ЦФО торговых точек),
// а такжепо ЦФО, к котрому привязаны его подчиенные сотрудники (физ. лицо "продавец", реквизит ПомощникТУ)
//
Процедура ОбновитьВозможностьИзмененияВариантаПостроения(ОбновитьГруппу) //+++АК mika 2018.07.17 ИП-00019185

	РасширенныйВариант = ЗначениеЗаполнено(ТекущийПомощник) ИЛИ ЗначениеЗаполнено(ТекущийУправляющий) ИЛИ РольДоступна("ПолныеПрава");
	
	Элементы.ВариантПостроения.Видимость = РасширенныйВариант;
	
	Если НЕ РасширенныйВариант Тогда
		ВариантПостроения = 0;
	Иначе
		ВариантПостроения = 1;
		Если ОбновитьГруппу Тогда
			ГруппаТорговыхТочек = ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьВозможностьИзмененияВариантаПостроения()

&НаКлиенте
// Перезаполняет группу торговых точек для разных вариантов построения
//
Процедура ОбновитьГруппуТорговыхТочекКлиент() //+++АК mika 2018.07.17 ИП-00019185

	ОбновитьВозможностьИзмененияГруппыТорговыйТочек();
	
	ГруппаТорговыхТочек = ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник); 

КонецПроцедуры // ОбновитьГруппуТорговыхТочекКлиент()

&НаСервереБезКонтекста
// Вызывает функцию получения ЦФО по помощнику управляющего
//
// Параметры:
//  ТекущийПомощник  - <Тип.СправочникСсылка.ФизическиеЛица> - Помощник управляющего
//
// Возвращаемое значение:
//   <Тип.СтруктурныеЕдиницы>   - ЦФО помощника управляющего
//
Функция ПолучитьГруппуТорговыхТочекСерверБезКонтекста(ТекущийПомощник) //+++АК mika 2018.07.17 ИП-00019185

	//+++АК mika 2018.05.24 ИП-00018578 Добавлена проверка для Помощников Развития
	//Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьЦФОПомощникаУправляющего(ТекущийПомощник, Ложь);
	Возврат РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ТекущийПомощник, Ложь, Истина); 

КонецФункции // ПолучитьГруппуТорговыхТочекСерверБезКонтекста()

&НаКлиенте
// Обновление возможности изменения группы торговых точек Помощниками
//
Процедура ОбновитьВозможностьИзмененияГруппыТорговыйТочек() //+++АК mika 2018.07.17 ИП-00019185

	Элементы.ГруппаТорговыхТочек.ТолькоПросмотр = ЗначениеЗаполнено(ТекущийПомощник) И ВариантПостроения = 1;
	
	Элементы.ГруппаТорговыхТочек.КнопкаВыбора = НЕ Элементы.ГруппаТорговыхТочек.ТолькоПросмотр; //+++АК mika 2018.05.24 Без задачи. Перестала автоматически отображаться кнопка выбора.

	Элементы.ТекущийПомощник.Видимость = ВариантПостроения = 1;
	
	ВозможностьРедактирвания = (ВариантПостроения <> 1) ИЛИ (ВариантПостроения = 1 И ТекущийПомощник = ТекущийПомощникАвто) ИЛИ ЗначениеЗаполнено(ТекущийУправляющий);
	
    Элементы.ТаблицаСотрудникПериод.ПодчиненныеЭлементы.ТаблицаСотрудникПериодПредставление.ТолькоПросмотр = Не ВозможностьРедактирвания;
	
	Элементы.КоманднаяПанельТабличногоДокумента.Доступность = ВозможностьРедактирвания;
	
КонецПроцедуры // ОбновитьВозможностьИзмененияГруппыТорговыйТочек()

&НаСервере
// Очищает записи в регистре по ранее распределенной группе торговых точек
//
// Параметры:
//  ПараметрыСотрудника  - <Тип.Структура> - Структура параметров сотрудника
//
Процедура ОчиститьЗаписиПоСтаройГруппеТорговыхТочек(ПараметрыСотрудника) //+++АК mika 2018.07.17 ИП-00019185
	
	Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ПараметрыСотрудника.ГруппаСтарая) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник) И ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) Тогда
		
		НаборЗаписей = РегистрыСведений.ТабельРаботыКассиров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыСотрудника.Период);
		НаборЗаписей.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
		НаборЗаписей.Отбор.Группа.Установить(ПараметрыСотрудника.ГруппаСтарая);
		НаборЗаписей.Отбор.ТорговаяТочка.Установить(ПараметрыСотрудника.ТорговаяТочка);
		
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры // ОчиститьЗаписиПоСтаройГруппеТорговыхТочек()

&НаКлиенте
Процедура ТекущийПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //+++АК mika 2018.07.17 ИП-00019185
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПомощника", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", Новый Структура("ТекущийПомощник, ВсеПомощники", ТекущийПомощник, Истина),
				ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПомощника(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2018.07.17 ИП-00019185
	
	Если Результат <> Неопределено Тогда
		
		ТекущийПомощник = Результат;
		
		ОбновитьГруппуТорговыхТочекКлиент();
		
		ОчиститьДанныеНаСервере();
		
		ОбновитьГрафик(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&Насервере
Процедура ЗаполнениеОтветственныхПользователейСервер() //+++АК mika 2018.07.17 ИП-00019185
	
	СтрукрураПараметров = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(ПараметрыСеанса.ТекущийПользователь, Ложь);
	
	Если СтрукрураПараметров <> Неопределено Тогда
		
		СтрукрураПараметров.Свойство("ЦФО", ГруппаТорговыхТочек);
		
		Если СтрукрураПараметров.ЭтоУправляющий Тогда
			ТекущийУправляющий = СтрукрураПараметров.Сотрудник;
		ИначеЕсли СтрукрураПараметров.ЭтоПомощник Тогда
			ТекущийПомощник = СтрукрураПараметров.Сотрудник;
			ТекущийПомощникАвто = ТекущийПомощник; 
		КонецЕсли;
		
		ОбновитьВозможностьИзмененияВариантаПостроения(Ложь);
		
		ОбновитьЗаголовокФормы();
		
	КонецЕсли;		
	
КонецПроцедуры

&Насервере
Функция ПолучитьСтруктуруТекущегоУправляющегоПользователиПоЦФО() //+++АК mika 2018.07.17 ИП-00019185
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо КАК ТекущийУправляющий,
	|	ПользователиПоЦФОСрезПоследних.ЦФО КАК ГруппаТорговыхТочек
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&ТекущаяДата, РуководительОтдела) КАК ПользователиПоЦФОСрезПоследних
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураПараметров = Новый Структура();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Для Каждого Колонка Из  РезультатЗапроса.Колонки Цикл
			СтруктураПараметров.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);     
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьЭлементовФормы()//+++АК mika 2018.07.17 ИП-00019185
	
	Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
		Элементы.ГруппаТорговыхТочек.КнопкаВыбора = НЕ ЗначениеЗаполнено(ТекущийПомощник);
		Элементы.ТекущийПомощник.КнопкаОчистки = Истина;
		Элементы.ТекущийПомощник.АвтоОтметкаНезаполненного = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ТекущийПомощник) Тогда
		Элементы.ГруппаТорговыхТочек.КнопкаВыбора = Ложь;
		Элементы.ТекущийПомощник.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТекущийПомощник.КнопкаОчистки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПомощникОчистка(Элемент, СтандартнаяОбработка) //+++АК mika 2018.07.17 ИП-00019185
	
	//Принудительная очистка, поскольку переменная формы очищается не всегда в режиме упр. приложения
	ТекущийПомощник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	
	ОбновитьВозможностьИзмененияГруппыТорговыйТочек();
	
	ОбновитьВидимостьЭлементовФормы();
	
	ОчиститьДанныеНаСервере();
	
	ОбновитьГрафик(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы() //+++АК mika 2018.07.17 ИП-00019185 
	
	Если ЗначениеЗаполнено(ТекущийУправляющий) Тогда
		ТекущийЗаголовок = СтрЗаменить("(Управляющий: ТекущийУправляющий)","ТекущийУправляющий",ТекущийУправляющий);
	ИначеЕсли ЗначениеЗаполнено(ТекущийПомощник) Тогда
		ТекущийЗаголовок = СтрЗаменить("(Помощник: ТекущийПомощник)","ТекущийПомощник",ТекущийПомощник) ;
	Иначе
		ТекущийЗаголовок = "";
	КонецЕсли;
	
	Этаформа.Заголовок = Этаформа.Заголовок + ТекущийЗаголовок; 
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьЗаписиВРегистреЗапрос(Данные) //+++АК mika 2018.09.13 ИП-00019819
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботы.Период,
	|	ТабельРаботы.Сотрудник,
	|	ТабельРаботы.Группа,
	|	ТабельРаботы.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботы
	|ГДЕ
	|	ТабельРаботы.Период = &Период
	|	И ТабельРаботы.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Период", Данные.Период);
	Запрос.УстановитьПараметр("Сотрудник", Данные.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.Группа.Установить(Выборка.Группа);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);

			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


























