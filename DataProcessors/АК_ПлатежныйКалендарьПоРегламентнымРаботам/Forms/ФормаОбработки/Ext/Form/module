Перем ДоговорыКэш;
Перем ВалютаРегл;
//+++АК 31.07.2017 sils ИП-00015834
//+++АК sils 04.09.2018 ИП-00019634
//Перем СЗ_СтопОплата;
Перем ТЗ_СтопОплата;
//---АК
//---АК

Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиПоДатеОплаты(мДатаОплаты, ОписаниеТиповЧисло, ОписаниеТиповДокументы)
	
	Если НЕ ЭтаФорма.Договоры.Колонки.Найти("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd")) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мДатаОплаты<НачалоМесяца(НачалоПериода) Тогда
		ЗаголовокКолонки = "Оплачено в прошлых периодах";
		ЗаголовокКолонкиДокумент = "Документ";
	Иначе
		ЗаголовокКолонки = Формат(мДатаОплаты, "ДФ=dd.MM.yyyy");
		ЗаголовокКолонкиДокумент = "Документ (" + Формат(мДатаОплаты, "ДФ=dd.MM.yyyy") + ")";			
	КонецЕсли; 
	
	КолонкаВставлена = Ложь;
	
	пИнд = 0;
	Для Каждого Колонка Из ЭтаФорма.Договоры.Колонки Цикл
		
		Если Лев(Колонка.Имя, 5) = "Дата_"
			И Дата(Прав(Колонка.Имя, 8)) > мДатаОплаты Тогда
			
			ЭтаФорма.Договоры.Колонки.Вставить(пИнд, "Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповЧисло);
			Колонка = ЭлементыФормы.Договоры.Колонки.Вставить(пИнд, ЗаголовокКолонки);
			Колонка.Имя = "Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
			
			ЭтаФорма.Договоры.Колонки.Вставить(пИнд + 1, "Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповДокументы);
			Колонка2 = ЭлементыФормы.Договоры.Колонки.Вставить(пИнд + 1, ЗаголовокКолонкиДокумент);
			Колонка2.Имя = "Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
			
			КолонкаВставлена = Истина;
			
			Прервать;
		КонецЕсли;
		
		пИнд = пИнд + 1;
	КонецЦикла;
	
	Если (НЕ КолонкаВставлена) И ЭтаФорма.Договоры.Колонки.Найти("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd")) = Неопределено Тогда
		
		ЭтаФорма.Договоры.Колонки.Добавить("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповЧисло);
		Колонка = ЭлементыФормы.Договоры.Колонки.Добавить("Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ЗаголовокКолонки);
		
		ЭтаФорма.Договоры.Колонки.Добавить("Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ОписаниеТиповДокументы);
		Колонка2 = ЭлементыФормы.Договоры.Колонки.Добавить("Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd"), ЗаголовокКолонкиДокумент);
	КонецЕсли;
	
	Колонка.ОтображатьИтогиВПодвале = Истина;
	Колонка.Данные = "Дата_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	//Колонка.ЭлементУправления.ТолькоПросмотр = Истина;
	
	Колонка2.Данные = "Документ_" + Формат(мДатаОплаты, "ДФ=yyyyMMdd");
	Колонка2.УстановитьЭлементУправления(Тип("ПолеВвода"));
	Колонка2.ЭлементУправления.ТолькоПросмотр 	= Истина;
	Колонка2.ЭлементУправления.ВыбиратьТип 		= Ложь;
	Колонка2.ЭлементУправления.КнопкаВыбора 	= Ложь;
	Колонка2.ЭлементУправления.КнопкаОчистки 	= Ложь;
	Колонка2.ЭлементУправления.КнопкаОткрытия 	= Истина;
	
КонецПроцедуры

Процедура УсловияДоговора(Кнопка)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пОтчет = Отчеты.УсловияДоговоровАренды.Создать();
	пФорма = пОтчет.ПолучитьФорму();
	пФорма.Открыть();
	
	НЭлемент = пОтчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
	НЭлемент.ПравоеЗначение = ТекДанные.ДоговорКонтрагента;
	
	пОтчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	
	пОтчет.СформироватьОтчет(пФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ИсторияУсловийДоговора(Кнопка)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пОтчет = Отчеты.ИсторияУсловийДоговора.Создать();
	пФорма = пОтчет.ПолучитьФорму();
	пФорма.Открыть();
	
	пОтчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	пОтчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДоговорКонтрагента", ТекДанные.ДоговорКонтрагента);
	
	пОтчет.СформироватьОтчет(пФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

Функция ПолучитьПериодОплаты(пНачалоПериода, пПериодОплатыАренды, пПериодичность)
	
	Если пПериодичность = Перечисления.Периодичность.День Тогда
		Если пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Текущий Тогда
			Возврат пНачалоПериода;
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Предыдущий Тогда
			Возврат НачалоДня(пНачалоПериода - 86400);
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий Тогда
			Возврат НачалоДня(пНачалоПериода + 86400);
		КонецЕсли;
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Неделя Тогда
		Если пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Текущий Тогда
			Возврат пНачалоПериода;
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Предыдущий Тогда
			Возврат НачалоДня(пНачалоПериода - 86400 * 7);
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий Тогда
			Возврат НачалоДня(пНачалоПериода + 86400 * 7);
		КонецЕсли;
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Месяц Тогда
		Если пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Текущий Тогда
			Возврат пНачалоПериода;
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Предыдущий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, -1);
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, 1);
		КонецЕсли;
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Квартал Тогда
		Если пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Текущий Тогда
			Возврат пНачалоПериода;
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Предыдущий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, -3);
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, 3);
		КонецЕсли;
	ИначеЕсли пПериодичность = Перечисления.Периодичность.Год Тогда
		Если пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Текущий Тогда
			Возврат пНачалоПериода;
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Предыдущий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, -12);
		ИначеЕсли пПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий Тогда
			Возврат ДобавитьМесяц(пНачалоПериода, 12);
		КонецЕсли;
	Иначе
		Возврат пНачалоПериода;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьНазначениеПлатежа(обДок, ТипАренднойПлаты=неопределено,ПереченьУслуг)
	
	АдресСуммы = Найти(обДок.НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(обДок.НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = обДок.НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" Тогда
		Если НЕ ПустаяСтрока(обДок.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию) Тогда
			ТекстНазначение = обДок.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию;
			ТекстНазначение = СтрЗаменить(ТекстНазначение, "%Месяц%" , НРег(Формат(обДок.ПериодРегистрации, "ДФ='ММММ'"))); 
			ТекстНазначение = СтрЗаменить(ТекстНазначение, "%МесяцГод%" , НРег(РаботаСДиалогами.ДатаКакМесяцПредставление(обДок.ПериодРегистрации))); 
		Иначе
			Если ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				ТекстНазначение = "Оплата постоянной части арендной платы за ";
			ИначеЕсли ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
				Если ПереченьУслуг="" или Нрег(СтрЗаменить(ПереченьУслуг," ",""))="переменнаячасть," Тогда
					ТекстНазначение = "Оплата переменной части арендной платы за ";
				Иначе
					ТекстНазначение = "Оплата переменной части арендной платы"+"("+Лев(ПереченьУслуг,СтрДлина(ПереченьУслуг)-1)+")"+" за ";
				КонецЕсли;	
			КонецЕсли;
			
			ТекстНазначение = ТекстНазначение + НРег(РаботаСДиалогами.ДатаКакМесяцПредставление(обДок.ПериодРегистрации)) +
			" по договору " + обДок.ДоговорКонтрагента.Номер + " от " + Формат(обДок.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(обДок.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(обДок.ВидОперации);
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		ТекстНДС = "";
		
		//ТабНДС=РасшифровкаПлатежа.Выгрузить();
		//ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		//Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
		//	ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
		Если НЕ ЗначениеЗаполнено(обДок.СтавкаНДС)
			ИЛИ обДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = ТекстНДС + "Без налога (НДС)";
		Иначе
			ТекстНДС = ТекстНДС + "НДС(" + обДок.СтавкаНДС + ") " + Формат(обДок.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
		
		//КонецЦикла;
		
		Если обДок.СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		
	КонецЕсли;
	
	обДок.НазначениеПлатежа = СокрЛП(ТекстНазначение) + Символы.ПС + ТекстСумма;
	
КонецПроцедуры


Процедура ЗаполнитьСтарыйВариант(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НачалоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала периода");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КонецПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата конца периода");
		Возврат;
	КонецЕсли;
	
	Инд = Договоры.Колонки.Количество() - 1;
	Пока Инд > 0 Цикл
		Если Лев(Договоры.Колонки[Инд].Имя, 5) = "Дата_"
			ИЛИ Лев(Договоры.Колонки[Инд].Имя, 9) = "Документ_" Тогда
			Договоры.Колонки.Удалить(Инд);
			ЭлементыФормы.Договоры.Колонки.Удалить(Инд);
		КонецЕсли;
		
		Инд = Инд - 1;
	КонецЦикла;
	
	КонецПериода = КонецМесяца(ЭтотОбъект.НачалоПериода);
	
	
	
	Выборка = ПолучитьРезультатВыборкуСтарыйВариант();
	
	ЭтаФорма.Договоры.Очистить();
	
	Инд = 1;
	МассивТ = Новый Массив;
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзБанка"));
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	
	ОписаниеТиповЧисло 		= Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТиповДокументы 	= Новый ОписаниеТипов(МассивТ);
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьКолонкиПоДатеОплаты(Выборка.ДатаОплаты		, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
		
		мДатаОплатыПервыйМесяц = Выборка.ДатаНачалаАренды + (Выборка.СрокОплатыАренды * 86400);
		
		мКурсВалюты = ПроцедурыНачисления.ПолучитьКурсВалютыПоДоговору(Выборка.ДатаОплаты, Выборка).Курс;
		
		// когда авансом, кусок от даты начала аренды до следующего после нее месяца ("хвост оплаты")
		Если Выборка.ДоговорКонтрагента.ПериодОплатыАренды = Перечисления.ВидыПериодовОплатыАренды.Следующий
			И Выборка.ДатаНачалаАренды < ДобавитьМесяц(ЭтотОбъект.НачалоПериода, 1)
			И (НЕ Выборка.ДатаНачалаАренды < ЭтотОбъект.НачалоПериода)
			И (НЕ Выборка.ЭтоХвостОплаты)
			И НЕ ЗначениеЗаполнено(Выборка.ПлатежныйДокумент) Тогда
			
			ДобавитьКолонкиПоДатеОплаты(мДатаОплатыПервыйМесяц, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
			
			НСтрока = ЭтаФорма.Договоры.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, Выборка);
			
			НСтрока.ЭтоХвостОплаты = Истина;
			
			СуммаХвост = Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал;
			СуммаХвост = Окр(СуммаХвост * (1 - (День(Выборка.ДатаНачалаАренды) - 1) / День(КонецМесяца(Выборка.ДатаНачалаАренды))), 2);
			//НСтрока["Дата_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			НСтрока["Дата_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			
			НСтрока.НомерСтроки 	= Инд;
			НСтрока.Использование 	= Истина;
			
			Инд = Инд + 1;
			
		КонецЕсли;
		
		
		НСтрока = ЭтаФорма.Договоры.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, Выборка);
		Если НЕ Выборка.ЭтоХвостОплаты Тогда
			НСтрока["Дата_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] =
			(Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал) * мКурсВалюты;
			НСтрока["Документ_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = Выборка.ПлатежныйДокумент;
		Иначе
			ДобавитьКолонкиПоДатеОплаты(мДатаОплатыПервыйМесяц	, ОписаниеТиповЧисло, ОписаниеТиповДокументы);
			СуммаХвост = Выборка.СуммаПланБезналичныеВал + Выборка.СуммаПланНаличныеВал;
			СуммаХвост = Окр(СуммаХвост * (1 - (День(Выборка.ДатаНачалаАренды) - 1) / День(КонецМесяца(Выборка.ДатаНачалаАренды))), 2);
			//НСтрока["Дата_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			НСтрока["Дата_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = СуммаХвост * мКурсВалюты;
			//НСтрока["Документ_" + Формат(Выборка.ДатаОплаты, "ДФ=yyyyMMdd")] = Выборка.ПлатежныйДокумент;
			НСтрока["Документ_" + Формат(мДатаОплатыПервыйМесяц, "ДФ=yyyyMMdd")] = Выборка.ПлатежныйДокумент;
		КонецЕсли;
		НСтрока.НомерСтроки 	= Инд;
		НСтрока.Использование 	= Истина;
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Заполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НачалоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала периода");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КонецПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата конца периода");
		Возврат;
	КонецЕсли;
	
	Инд = Договоры.Колонки.Количество() - 1;
	Пока Инд > 0 Цикл
		Если Лев(Договоры.Колонки[Инд].Имя, 5) = "Дата_"
			ИЛИ Лев(Договоры.Колонки[Инд].Имя, 9) = "Документ_" Тогда
			ЭлементыФормы.Договоры.Колонки.Удалить(ЭлементыФормы.Договоры.Колонки[Договоры.Колонки[Инд].Имя]);
			Договоры.Колонки.Удалить(Инд);
		КонецЕсли;
		
		Инд = Инд - 1;
	КонецЦикла;
	
	
	///////////////////////
	
	
	ЭтаФорма.Договоры.Очистить();
	
	Инд = 1;
	МассивТ = Новый Массив;
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзБанка"));
	МассивТ.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	МассивТ.Добавить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств"));
	МассивТ.Добавить(Тип("ДокументСсылка.ЗачетОплатыАренды"));	
	
	ОписаниеТиповЧисло 		= Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТиповДокументы 	= Новый ОписаниеТипов(МассивТ);
	
	ТаблицаРезультат = ПолучитьРезультатТаблицу();
	
	Для Каждого Строка Из ТаблицаРезультат Цикл
		ДобавитьКолонкиПоДатеОплаты(Строка.ДатаОплаты		, ОписаниеТиповЧисло, ОписаниеТиповДокументы);							
		НСтрока = ЭтаФорма.Договоры.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, Строка);
		
		НСтрока["Дата_" + Формат(Строка.ДатаОплаты, "ДФ=yyyyMMdd")] = Строка.Сумма;
		НСтрока["Документ_" + Формат(Строка.ДатаОплаты, "ДФ=yyyyMMdd")] = Строка.ПлатежныйДокумент;
		
		НСтрока.НомерСтроки 	= Инд;
		НСтрока.Использование 	= ?(Кнопка=неопределено,ложь,истина);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	//+++АК 31.07.2017 sils ИП-00015834
	//+++АК sils 04.09.2018 ИП-00019634
	//СЗ_СтопОплата.Очистить();
	//ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.ДатаОтчета), );
	//Для каждого стр из ТЗ Цикл
	//	Если стр.Подтверждено Тогда
	//		Отбор = Новый Структура;
	//		Отбор.Вставить("Контрагент", стр.Контрагент);
	//		Массив2 = ЭтаФорма.Договоры.НайтиСтроки(Отбор);
	//		Для каждого стр1 из Массив2 Цикл
	//			стр1.Использование = Ложь;
	//		КонецЦикла;
	//		Если Массив2.Количество() > 0 Тогда
	//			СЗ_СтопОплата.Добавить(стр.Контрагент);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	ТЗ_СтопОплата.Очистить();
	ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.ДатаОтчета), );
	
	Для каждого стр из ЭтаФорма.Договоры Цикл
		флНайденаСтрока = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", стр.Контрагент);
		Если ЗначениеЗаполнено(стр.Организация) Тогда
			Отбор.Вставить("Организация", стр.Организация);
			Массив2 = ТЗ.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив2 Цикл
				флНайденаСтрока = Истина;
				Если стр1.Подтверждено Тогда
					стр.Использование = Ложь;
					
					НовСтр = ТЗ_СтопОплата.Добавить();
					НовСтр.Контрагент = стр.Контрагент;
					НовСтр.Организация = стр.Организация;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если не флНайденаСтрока Тогда
			//+++АК sils 09.11.2018 ИП-00019634.02
			флЕстьСтрокиСОрганизацией = Ложь;
			МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Контрагент", стр.Контрагент));
			Для каждого стр2 из МассивСтрок Цикл
				Если стр2.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
					флЕстьСтрокиСОрганизацией = Истина;
				КонецЕсли;
			КонецЦикла;
			Если не флЕстьСтрокиСОрганизацией Тогда
			//---АК
			Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			Массив2 = ТЗ.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив2 Цикл
				Если стр1.Подтверждено Тогда
					стр.Использование = Ложь;
					
					НовСтр = ТЗ_СтопОплата.Добавить();
					НовСтр.Контрагент = стр.Контрагент;
					НовСтр.Организация = стр.Организация;
				КонецЕсли;
			КонецЦикла;
			//+++АК sils 09.11.2018 ИП-00019634.02
			КонецЕсли;
			//---АК
		КонецЕсли;
	КонецЦикла;
	//---АК
	//---АК
	ДоговорыКэш = Договоры.Скопировать();
	
КонецПроцедуры

Процедура СоздатьПлатежныеДокументы(Кнопка)
	
	Отказ = Ложь;
	мСтатусОплатыПриостановлен = Перечисления.СтатусыОплатыДоговоровКонтрагентов.Приостановлен;
	
	
	Для Каждого СтрокаТаблицы Из Этаформа.Договоры Цикл
		Если НЕ СтрокаТаблицы.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.СтатусОплаты = мСтатусОплатыПриостановлен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки +
			" отмечен к оплате договор, по которому оплата приостановлена");
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Вопрос("Создать платежные документы?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКОплате = Договоры.Скопировать(Договоры.НайтиСтроки(Новый Структура("Использование", Истина)));
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКалендаря.ДоговорКонтрагента,
	|	ТаблицаКалендаря.МесяцОплаты
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ТаблицаКалендаря КАК ТаблицаКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Период) КАК Период,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор КАК Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ПериодыПланируемыхПлатежейПредварительно
	|ИЗ
	|	РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды.СрезПоследних КАК ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	|		ПО ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор = ВТ_Данные.ДоговорКонтрагента
	|			И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата >= ДОБАВИТЬКДАТЕ(ВТ_Данные.МесяцОплаты, МЕСЯЦ, 1))
	|ГДЕ
	|	(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
	|			ИЛИ ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Период,
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Договор,
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата
	|ПОМЕСТИТЬ ВТ_ПериодыПланируемыхПлатежей
	|ИЗ
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно КАК ВТ_ПериодыПланируемыхПлатежейПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды.СрезПоследних КАК СтатусыДоговоровАрендыСрезПоследних
	|		ПО ВТ_ПериодыПланируемыхПлатежейПредварительно.Договор = СтатусыДоговоровАрендыСрезПоследних.Договор
	|			И ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата >= СтатусыДоговоровАрендыСрезПоследних.ДатаНачалаАренды
	|			И ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата <= СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыПланируемыхПлатежей.Договор,
	|	ВТ_ПериодыПланируемыхПлатежей.Дата,
	|	МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РегистраторыПланируемыхПлатежей
	|ИЗ
	|	РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды.СрезПоследних КАК ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПланируемыхПлатежей КАК ВТ_ПериодыПланируемыхПлатежей
	|		ПО ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Период = ВТ_ПериодыПланируемыхПлатежей.Период
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор = ВТ_ПериодыПланируемыхПлатежей.Договор
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата = ВТ_ПериодыПланируемыхПлатежей.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыПланируемыхПлатежей.Договор,
	|	ВТ_ПериодыПланируемыхПлатежей.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ДоговорКонтрагента,
	|	ВТ_Данные.МесяцОплаты,
	|	ВЫБОР
	|		КОГДА СУММА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.СуммаВал) > 0
	|			ТОГДА СУММА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.СуммаВал)
	|		ИНАЧЕ СУММА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Сумма)
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОставшиесяПлатежи
	|ИЗ
	|	РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды.СрезПоследних КАК ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РегистраторыПланируемыхПлатежей КАК ВТ_РегистраторыПланируемыхПлатежей
	|		ПО ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор = ВТ_РегистраторыПланируемыхПлатежей.Регистратор
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор = ВТ_РегистраторыПланируемыхПлатежей.Договор
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата = ВТ_РегистраторыПланируемыхПлатежей.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	|		ПО ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор = ВТ_Данные.ДоговорКонтрагента
	|			И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата >= ДОБАВИТЬКДАТЕ(ВТ_Данные.МесяцОплаты, МЕСЯЦ, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.ДоговорКонтрагента,
	|	ВТ_Данные.МесяцОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ДоговорКонтрагента,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ВалютаДепозита,
	|	ДепозитыПоДоговорамАрендыСрезПоследних.СуммаЗалогаБезналичные + ДепозитыПоДоговорамАрендыСрезПоследних.СуммаЗалогаНаличные КАК СуммаДепозита,
	|	0 КАК ЗачтеноИзДепозита
	|ПОМЕСТИТЬ ВТ_ОстаткиПоДепозитамПредварительно
	|ИЗ
	|	РегистрСведений.ДепозитыПоДоговорамАренды.СрезПоследних(
	|			,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Данные.ДоговорКонтрагента
	|				ИЗ
	|					ВТ_Данные)) КАК ДепозитыПоДоговорамАрендыСрезПоследних
	|ГДЕ
	|	ДепозитыПоДоговорамАрендыСрезПоследних.ВалютаДепозита = ДепозитыПоДоговорамАрендыСрезПоследних.Регистратор.ВалютаСпособаНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.ДоговорКонтрагента,
	|	NULL,
	|	0,
	|	ЗачетОплатыАрендыЗачетДепозита.Сумма
	|ИЗ
	|	Документ.ЗачетОплатыАренды.ЗачетДепозита КАК ЗачетОплатыАрендыЗачетДепозита
	|ГДЕ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.Проведен
	|	И ЗачетОплатыАрендыЗачетДепозита.Ссылка.ДоговорКонтрагента В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_Данные.ДоговорКонтрагента
	|			ИЗ
	|				ВТ_Данные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоДепозитамПредварительно.ДоговорКонтрагента,
	|	МАКСИМУМ(ВТ_ОстаткиПоДепозитамПредварительно.ВалютаДепозита) КАК ВалютаДепозита,
	|	СУММА(ВТ_ОстаткиПоДепозитамПредварительно.СуммаДепозита) КАК СуммаДепозита,
	|	СУММА(ВТ_ОстаткиПоДепозитамПредварительно.ЗачтеноИзДепозита) КАК ЗачтеноИзДепозита
	|ПОМЕСТИТЬ ВТ_ОстаткиПоДепозитам
	|ИЗ
	|	ВТ_ОстаткиПоДепозитамПредварительно КАК ВТ_ОстаткиПоДепозитамПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиПоДепозитамПредварительно.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ДоговорКонтрагента,
	|	ВТ_Данные.МесяцОплаты,
	|	ВТ_ОстаткиПоДепозитам.ВалютаДепозита,
	|	ВТ_ОстаткиПоДепозитам.СуммаДепозита,
	|	ВТ_ОстаткиПоДепозитам.ЗачтеноИзДепозита,
	|	ЕСТЬNULL(ВТ_ОставшиесяПлатежи.Сумма, 0) КАК СуммаОставшихсяПлатежей
	|ИЗ
	|	ВТ_ОстаткиПоДепозитам КАК ВТ_ОстаткиПоДепозитам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	|		ПО ВТ_ОстаткиПоДепозитам.ДоговорКонтрагента = ВТ_Данные.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОставшиесяПлатежи КАК ВТ_ОставшиесяПлатежи
	|		ПО (ВТ_Данные.ДоговорКонтрагента = ВТ_ОставшиесяПлатежи.ДоговорКонтрагента)
	|			И (ВТ_Данные.МесяцОплаты = ВТ_ОставшиесяПлатежи.МесяцОплаты)
	|ГДЕ
	|	ВТ_ОстаткиПоДепозитам.СуммаДепозита - ВТ_ОстаткиПоДепозитам.ЗачтеноИзДепозита > ЕСТЬNULL(ВТ_ОставшиесяПлатежи.Сумма, 0)"); 
	
	Запрос.УстановитьПараметр("ТаблицаКалендаря", ТаблицаКОплате);
	
	ТаблицаДепозитов = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаКалендаря.НомерСтроки,
	|	ТаблицаКалендаря.ДоговорКонтрагента,
	|	ТаблицаКалендаря.МесяцОплаты,
	|	ТаблицаКалендаря.ТипАренднойПлаты,
	|	ТаблицаКалендаря.ФормаОплаты
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ТаблицаКалендаря КАК ТаблицаКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(РасходИзБанка.ПериодРегистрации, МЕСЯЦ) КАК МесяцОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные) КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ КАК ТипАренднойПлаты,
	|	РасходИзБанка.Ссылка
	|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.ПериодРегистрации, МЕСЯЦ),
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные),
	|	ВЫБОР
	|		КОГДА РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ,
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.ДоговорКонтрагента,
	|	ЗачетОплатыАрендыЗачетДепозита.ПериодРегистрации,
	|	ЗачетОплатыАрендыЗачетДепозита.ФормаОплаты,
	|	ЗачетОплатыАрендыЗачетДепозита.ТипАренднойПлаты,
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка
	|ИЗ
	|	Документ.ЗачетОплатыАренды.ЗачетДепозита КАК ЗачетОплатыАрендыЗачетДепозита
	|ГДЕ
	|	ЗачетОплатыАрендыЗачетДепозита.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.НомерСтроки,
	|	ВТ_ПлатежныеДокументы.Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
	|		ПО ВТ_Данные.ДоговорКонтрагента = ВТ_ПлатежныеДокументы.ДоговорКонтрагента
	|			И ВТ_Данные.ТипАренднойПлаты = ВТ_ПлатежныеДокументы.ТипАренднойПлаты
	|			И ВТ_Данные.ФормаОплаты = ВТ_ПлатежныеДокументы.ФормаОплаты
	|			И ВТ_Данные.МесяцОплаты = ВТ_ПлатежныеДокументы.МесяцОплаты"; 
	
	ТаблицаКОплате = Договоры.Скопировать(Договоры.НайтиСтроки(Новый Структура("Использование", Истина)));
	
	Запрос.УстановитьПараметр("ТаблицаКалендаря", ТаблицаКОплате);
	
	ТаблицаНайденныхОплат = Запрос.Выполнить().Выгрузить();
	
	ТекстЗапроса="ВЫБРАТЬ
	|	УслугиПоДоговорамАрендыСрезПоследних.Договор,
	|	УслугиПоДоговорамАрендыСрезПоследних.Услуга,
	|	ВЫБОР
	|		КОГДА УслугиПоДоговорамАрендыСрезПоследних.Регистратор ССЫЛКА Документ.ЗаключениеДоговораАренды
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	РегистрСведений.УслугиПоДоговорамАренды.СрезПоследних(
	|			,
	|			Договор В (&СписокДоговоров)
	|				И ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)) КАК УслугиПоДоговорамАрендыСрезПоследних
	|ГДЕ
	|	УслугиПоДоговорамАрендыСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	УслугиПоДоговорамАрендыСрезПоследних.Услуга,
	|	УслугиПоДоговорамАрендыСрезПоследних.Договор,
	|	ВЫБОР
	|		КОГДА УслугиПоДоговорамАрендыСрезПоследних.Регистратор ССЫЛКА Документ.ЗаключениеДоговораАренды
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДоговоров",ТаблицаКОплате.ВыгрузитьКолонку("ДоговорКонтрагента"));
	КэшУслугДоговоров=Запрос.Выполнить().Выгрузить();
	
	СозданоДокументов = 0;
	
	ТаблицаДоговоров = Договоры.Скопировать(Договоры.НайтиСтроки(Новый Структура("Использование", Истина)),"Контрагент, ДатаОплаты, ДоговорКонтрагента, МесяцОплаты, Организация, ФормаОплаты");
	ТаблицаДоговоров.Свернуть("Контрагент, ДатаОплаты, ДоговорКонтрагента, МесяцОплаты, Организация, ФормаОплаты");
	
	Для Каждого Строка Из ТаблицаДоговоров Цикл
		
		//Если НЕ Строка.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		
		//СтрокаОплаты = ТаблицаНайденныхОплат.Найти(Строка.НомерСтроки, "НомерСтроки");
		//Если СтрокаОплаты <>Неопределено Тогда
		//	Если Вопрос("Для строки № " + СтрокаОплаты.НомерСтроки + " найден проведенный платежный документ <" + СтрокаОплаты.Ссылка + ">! Создать новый документ?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		//		Продолжить;
		//	КонецЕсли; 				
		//КонецЕсли;
		СтруктураПоиска = Новый Структура;
		Для Каждого КолонкаТаблицы из ТаблицаДоговоров.Колонки Цикл
			СтруктураПоиска.Вставить(КолонкаТаблицы.Имя,Строка[КолонкаТаблицы.Имя]);	
		КонецЦикла;
		СтруктураПоиска.Вставить("Использование",Истина);
		// 
		пСуммаОбщ = 0;
		БылЗачетОплаты = Ложь;
		СтруктураСумм = Новый Структура;
		
		МассивСтрок = Договоры.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлементМассива из МассивСтрок Цикл
			Индекс = МассивСтрок.Найти(ЭлементМассива);
			Переменная = "Сумма"+строка(Индекс); 
			СтруктураСумм.Вставить(Переменная,0);
			
			Для Каждого Колонка Из Договоры.Колонки Цикл
				Если Лев(Колонка.Имя, 5) = "Дата_"
					И ЭлементМассива[Колонка.Имя] > 0 Тогда
					СтруктураСумм[Переменная] = СтруктураСумм[Переменная] + ЭлементМассива[Колонка.Имя];
					//пДата = Дата(Прав(Колонка.Имя, 8));
				КонецЕсли;
			КонецЦикла;
			
			
			Если СтруктураСумм[Переменная] = 0 Тогда	 
				Продолжить;
			КонецЕсли;
			
			// Проверяем возможность зачета депозита
			Если ЭлементМассива.ТипАренднойПлаты <> Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ Тогда		
				СтрокаДепозит = ТаблицаДепозитов.Найти(ЭлементМассива.ДоговорКонтрагента);
				
				Если  СтрокаДепозит<>Неопределено Тогда
					ФормаЗачетаОплаты = ПолучитьФорму("ФормаЗачетаОплаты");
					
					ФормаЗачетаОплаты.СуммаДепозита = СтрокаДепозит.СуммаДепозита;
					ФормаЗачетаОплаты.ЗачтеноИзДепозита = СтрокаДепозит.ЗачтеноИзДепозита;
					ФормаЗачетаОплаты.ПлатежиБудущихПериодов = СтрокаДепозит.СуммаОставшихсяПлатежей;
					ФормаЗачетаОплаты.ВозможноЗачестьИзДепозита = СтрокаДепозит.СуммаДепозита - СтрокаДепозит.ЗачтеноИзДепозита - СтрокаДепозит.СуммаОставшихсяПлатежей;
					ФормаЗачетаОплаты.СуммаКОплате = СтруктураСумм[Переменная];
					ФормаЗачетаОплаты.ВалютаДепозита = СтрокаДепозит.ВалютаДепозита;
					ФормаЗачетаОплаты.СтрокаОплаты = ЭлементМассива;
					
					Если  СтрокаДепозит.ВалютаДепозита = ВалютаРегл Тогда
						
						ФормаЗачетаОплаты.ЗачестьВРублях = Мин(ФормаЗачетаОплаты.СуммаКОплате,  ФормаЗачетаОплаты.ВозможноЗачестьИзДепозита);
						ФормаЗачетаОплаты.ЗачестьВВалютеДепозита = ФормаЗачетаОплаты.ЗачестьВРублях;
					Иначе
						ФормаЗачетаОплаты.ЗачестьВРублях = ФормаЗачетаОплаты.СуммаКОплате;
						ФормаЗачетаОплаты.ЗачестьВВалютеДепозита = ФормаЗачетаОплаты.ВозможноЗачестьИзДепозита;
					КонецЕсли; 
					
					РезультатЗачета = ФормаЗачетаОплаты.ОткрытьМодально();
					
					Если РезультатЗачета = Истина Тогда 
						СтруктураСумм[Переменная] = СтруктураСумм[Переменная] - ФормаЗачетаОплаты.ЗачестьВРублях; 
						БылЗачетОплаты = Истина;
						СозданоДокументов = СозданоДокументов + 1;
					ИначеЕсли РезультатЗачета = Неопределено Тогда 						
						СтруктураСумм[Переменная] =  0;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		//
		//Если НЕ ЗначениеЗаполнено(пСумма) Тогда
		//	Продолжить;
		//КонецЕсли; 
		//ПРОДОЛЖИТЬ;
		
		//	Создаем платежку
		Если Строка.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
			//пСумма = 0;
			//Для Каждого Колонка Из Этаформа.Договоры.Колонки Цикл
			//	Если Лев(Колонка.Имя, 5) = "Дата_"
			//			И Строка[Колонка.Имя] > 0 Тогда
			//		пСумма = пСумма + Строка[Колонка.Имя];
			//		пДата = Дата(Прав(Колонка.Имя, 8));
			//	КонецЕсли;
			//КонецЦикла;
			
			//Если пСумма > 0 Тогда		
			
			
			обДок = Документы.РасходИзБанка.СоздатьДокумент();
			обДок.Дата = ?(Час(ТекущаяДата())>=12, ЗаполнениеДокументов.ОпределитьДату(ТекущаяДата(), 1) + 12*60*60, ТекущаяДата());
			
			обДок.Организация 		= Строка.Организация;
			обДок.СчетОрганизации 	= Строка.Организация.ОсновнойБанковскийСчет;
			обДок.ВалютаДокумента 	= ВалютаРегл;
			
			//Если Строка.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
			обДок.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			//ИначеЕсли Строка.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			//	обДок.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю;
			//КонецЕсли;
			обДок.Контрагент 		= Строка.Контрагент;
			обДок.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
			обДок.СчетКонтрагента 	= ?(ЗначениеЗаполнено(обДок.Контрагент.ОсновнойБанковскийСчет)
											И обДок.Контрагент.ОсновнойБанковскийСчет.Владелец = обДок.Контрагент,
										обДок.Контрагент.ОсновнойБанковскийСчет,
										Справочники.БанковскиеСчета.ПустаяСсылка());
			обДок.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
			//ТоргогвыеТочки
			СуммаДок = 0;
			Для Каждого ЭлементМассива из МассивСтрок Цикл
				стр = обДок.СтруктурныеЕдиницы.Добавить();
				стр.СтруктурнаяЕдиница = ЭлементМассива.ТорговаяТочка;
				стр.Сумма = СтруктураСумм["Сумма"+строка(МассивСтрок.Найти(ЭлементМассива))];
				СуммаДок = СуммаДок+стр.Сумма;
			КонецЦикла;
			обДок.СуммаДокумента 	= СуммаДок;
			обДок.СчетБанк 			= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			обДок.УстановитьСчетаУчетаБУ();
			обДок.ЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"); //Управление исполнительное
			обДок.ОчередностьПлатежа 	= 5;
			//обДок.ПериодРегистрации 	= ПолучитьПериодОплаты(НачалоПериода, Строка.ДоговорКонтрагента.ПериодОплатыАренды, Строка.ДоговорКонтрагента.Периодичность);
			обДок.ПериодРегистрации 	= Строка.МесяцОплаты;
			
			обДок.АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			обДок.Организация, обДок.СчетОрганизации, обДок.Контрагент, обДок.СчетКонтрагента, обДок.ВидОперации, обДок.ПеречислениеВБюджет);
			
			Если НЕ обДок.Контрагент.СтавкаНДС.Пустая() Тогда
				обДок.СтавкаНДС = обДок.Контрагент.СтавкаНДС;
			КонецЕсли;
			//Если НЕ обДок.Контрагент.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			//обДок.СтатьяДвиженияДенежныхСредств = обДок.Контрагент.СтатьяДвиженияДенежныхСредств;
			обДок.СтатьяДвиженияДенежныхСредств = обДок.Контрагент.СтатьяДвиженияДенежныхСредств;//Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010");
			обДок.СтатьяДвиженияДенежныхСредствБУ=ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(обДок.СтатьяДвиженияДенежныхСредств,обДок.ВидОперации);
			//+++АК SUVV 2018.02.28 ИП-00017941
			//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.СтатьяДвиженияДенежныхСредств);
			МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.Дата, обДок.СтатьяДвиженияДенежныхСредств);
			//---АК SUVV
			Если МассивСчетов.Количество() = 1 Тогда
				обДок.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
				
				Для Каждого СтрокаВидСубконто Из обДок.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Организации Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Организация;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.СтатьяДвиженияДенежныхСредств;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Контрагент;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			//КонецЕсли;
			
			обДок.ПересчитатьСуммуНДСДокумент();
			
			обДок.ТекстПлательщика = обДок.АвтоЗначенияРеквизитов.ТекстПлательщика;
			обДок.ИННПлательщика = обДок.АвтоЗначенияРеквизитов.ИННПлательщика;
			обДок.КПППлательщика = обДок.АвтоЗначенияРеквизитов.КПППлательщика;
			
			обДок.ТекстПолучателя = обДок.АвтоЗначенияРеквизитов.ТекстПолучателя;
			обДок.ИННПолучателя   = обДок.АвтоЗначенияРеквизитов.ИННПолучателя;
			обДок.КПППолучателя   = обДок.АвтоЗначенияРеквизитов.КПППолучателя;
			
			ПереченьУслуг="";
			ФильтрУслуг=Новый Структура("Договор",обДок.ДоговорКонтрагента);
			ФильтрУслуг.Вставить("Порядок",1);
			СтрокиУслугДоговора=КэшУслугДоговоров.НайтиСтроки(ФильтрУслуг);
			Если СтрокиУслугДоговора.Количество()=0 Тогда
				ФильтрУслуг.Вставить("Порядок",2);
				СтрокиУслугДоговора=КэшУслугДоговоров.НайтиСтроки(ФильтрУслуг);
			КонецЕсли;	
			Для каждого СтрокаУслуг Из СтрокиУслугДоговора Цикл
				ПереченьУслуг=ПереченьУслуг+СокрЛП(СтрокаУслуг.Услуга.НаименованиеПолное)+",";
			КонецЦикла;	
			
			СформироватьНазначениеПлатежа(обДок, ,ПереченьУслуг);
			
			обДок.УстановитьСчетаУчетаБУ();
			
			
			Отказ = Ложь;
			
			//	Если Строка.ТипАренднойПлаты <> Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ Тогда
			//		ПроцедурыНачисления.ПроверитьЛимитыПоАрендеЗаявкиИОплаты(обДок.Ссылка, обДок.ЗаявкаНаРасходованиеСредств, обДок.СуммаДокумента, Строка.ТорговаяТочка, Строка.ТипАренднойПлаты, Строка.МесяцОплаты, Отказ);			
			//
			//		Если Отказ Тогда
			//			Продолжить;
			//		КонецЕсли; 
			//	КонецЕсли;
			
			Попытка
				обДок.Записать(РежимЗаписиДокумента.Проведение);
				ОбщегоНазначения.СообщитьИнформациюПользователю("По строке № " + Строка.ДоговорКонтрагента + " создан документ " + обДок);
				Если НЕ БылЗачетОплаты Тогда
					СозданоДокументов = СозданоДокументов + 1;					
				КонецЕсли; 
			Исключение
				обДок.Записать(РежимЗаписиДокумента.Запись);
				ОбщегоНазначения.СообщитьИнформациюПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			//КонецЕсли;
			
		ИначеЕсли Строка.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда		
			
			//пСумма = 0;
			//Для Каждого Колонка Из Договоры.Колонки Цикл
			//	Если Лев(Колонка.Имя, 5) = "Дата_" Тогда
			//		пСумма = пСумма + Строка[Колонка.Имя];
			//	КонецЕсли;
			//КонецЦикла;
			
			//Если пСумма > 0 Тогда		
			
			обДок = Документы.РасходИзКассы.СоздатьДокумент();
			обДок.Дата 				= ТекущаяДата();
			обДок.Организация 		= Строка.Организация;
			обДок.СчетОрганизации 	= Строка.Организация.ОсновнойБанковскийСчет;
			//обДок.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Если Строка.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				обДок.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю;
			ИначеЕсли Строка.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				обДок.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю;
			КонецЕсли;
			обДок.Контрагент 		= Строка.Контрагент;
			обДок.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
			обДок.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
			//ТоргогвыеТочки
			СуммаДок = 0;
			Для Каждого ЭлементМассива из МассивСтрок Цикл
				стр = обДок.СтруктурныеЕдиницы.Добавить();
				стр.СтруктурнаяЕдиница = ЭлементМассива.ТорговаяТочка;
				стр.Сумма = СтруктураСумм[МассивСтрок.Найти(ЭлементМассива)];
				СуммаДок = СуммаДок+стр.Сумма;
			КонецЦикла;
			обДок.СуммаДокумента 	= СуммаДок;
			обДок.СчетКасса 		= ПланыСчетов.Хозрасчетный.КассаОрганизации;
			обДок.УстановитьСчетаУчетаБУ();
			обДок.ЦФО 				= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"); //Управление исполнительное
			обДок.СтруктурнаяЕдиница = Строка.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			//обДок.ПериодРегистрации = ПолучитьПериодОплаты(НачалоПериода, Строка.ДоговорКонтрагента.ПериодОплатыАренды, Строка.ДоговорКонтрагента.Периодичность);
			обДок.ПериодРегистрации = Строка.МесяцОплаты;				
			
			//Если НЕ обДок.Контрагент.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			//обДок.СтатьяДвиженияДенежныхСредств = обДок.Контрагент.СтатьяДвиженияДенежныхСредств;
			обДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139113");
			//+++АК SUVV 2018.02.28 ИП-00017941
			//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.СтатьяДвиженияДенежныхСредств);
			МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.Дата, обДок.СтатьяДвиженияДенежныхСредств);
			//---АК SUVV
			Если МассивСчетов.Количество() = 1 Тогда
				обДок.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
				
				Для Каждого СтрокаВидСубконто Из обДок.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Организации Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Организация;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.СтатьяДвиженияДенежныхСредств;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Контрагент;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.СтруктурнаяЕдиница;
					КонецЕсли;
				КонецЦикла;				                                                                      
			КонецЕсли;
			//КонецЕсли;
			
			обДок.УстановитьСчетаУчетаБУ();
			обДок.СтатьяДвиженияДенежныхСредствБУ=ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(обДок.СтатьяДвиженияДенежныхСредств,обДок.ВидОперации);
			Попытка
				обДок.Записать(РежимЗаписиДокумента.Проведение);
				ОбщегоНазначения.СообщитьИнформациюПользователю("По строке № " + Строка.НомерСтроки + " создан документ " + обДок);
				Если НЕ БылЗачетОплаты Тогда
					СозданоДокументов = СозданоДокументов + 1;					
				КонецЕсли; 
			Исключение
				ОбщегоНазначения.СообщитьИнформациюПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Заполнить(Неопределено);
	Если СозданоДокументов<>ТаблицаКОплате.Количество() Тогда
		Предупреждение("Внимание! Не по всем выбранным договорам были созданы новые документы (выбрано " + ТаблицаКОплате.Количество() + ", создано " + СозданоДокументов + ")!");
	Иначе		
		Предупреждение("Платежные документы созданы успешно!");
	КонецЕсли;
	
КонецПроцедуры


Процедура ОтметитьВсе(Кнопка)
	
	Для Каждого Строка Из Договоры Цикл
		Если НЕ ЭлементыФормы.КоманднаяПанель2.Кнопки.ПоказатьТолькоСРасчетамВВалюте.Пометка ИЛИ Строка.ЕстьРасчетыВВалюте Тогда
			Строка.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьВсе(Кнопка)
	
	Для Каждого Строка Из Договоры Цикл
		Строка.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьТолькоСРасчетамВВалюте(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	Обновить();
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	ВидПериода = Истина;
	
	Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичные;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОтчета) Тогда
		ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	Если ВидПериода Тогда
		Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		КонецПериода = КонецМесяца(НачалоПериода);
	Иначе
		ДатаОтчетаПриИзменении(Неопределено);
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	
	ЗаМесяцПриИзменении(Неопределено);
	
	ДоговорыКэш = Договоры.Скопировать();
	
	//+++АК 31.07.2017 sils ИП-00015834
	//+++АК sils 04.09.2018 ИП-00019634
	//СЗ_СтопОплата = Новый СписокЗначений;
	ТЗ_СтопОплата = Новый ТаблицаЗначений;
	ТЗ_СтопОплата.Колонки.Добавить("Контрагент");
	ТЗ_СтопОплата.Колонки.Добавить("Организация");
	//---АК
	//---АК
КонецПроцедуры


Процедура ПеренестиДатуОплаты(Кнопка)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пДата = Неопределено;
	Если НЕ ВвестиДату(пДата, "Укажите дату оплаты", ЧастиДаты.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ДатыОплатыПоДоговорамАренды.СоздатьНаборЗаписей();
	Набор.Отбор.Договор.Значение 		= ТекДанные.ДоговорКонтрагента;
	Набор.Отбор.Договор.Использование 	= Истина;
	Набор.Отбор.ПериодРегистрации.Значение 		= НачалоПериода;
	Набор.Отбор.ПериодРегистрации.Использование = Истина;
	
	Запись = Набор.Добавить();
	Запись.Договор 				= ТекДанные.ДоговорКонтрагента;
	Запись.ПериодРегистрации 	= НачалоПериода;
	Запись.Дата 				= пДата;
	
	Попытка
		Набор.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Заполнить(Неопределено);
	
КонецПроцедуры

Процедура ИсторияСтатусовОплаты(Кнопка)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пФорма = РегистрыСведений.СтатусыОплатыПоДоговорамАренды.ПолучитьФормуСписка();
	пФорма.РегистрСведенийСписок.Отбор.Договор.Значение 		= ТекДанные.ДоговорКонтрагента;
	пФорма.РегистрСведенийСписок.Отбор.Договор.Использование 	= Истина;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура ИзменитьСтатусОплаты(Кнопка)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пФорма = РегистрыСведений.СтатусыОплатыПоДоговорамАренды.ПолучитьФормуРедактированияЗаписи();
	пФорма.РегистрСведенийМенеджерЗаписи.Период 	= ТекущаяДата();
	пФорма.РегистрСведенийМенеджерЗаписи.Договор 	= ТекДанные.ДоговорКонтрагента;
	пФорма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, НачалоПериода);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	КонецПериода = КонецМесяца(НачалоПериода);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НачалоПериода = ДобавитьМесяц(НачалоПериода, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	КонецПериода = КонецМесяца(НачалоПериода);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, НачалоПериода, ЭтаФорма);
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДатаОтчетаПриИзменении(Элемент)
	
	НачалоПериода 	= НачалоМесяца(ДатаОтчета);
	КонецПериода 	= КонецМесяца(ДатаОтчета);
	
КонецПроцедуры

Процедура ЗаМесяцПриИзменении(Элемент)
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = ?(ВидПериода, ЭлементыФормы.Панель1.Страницы.ЗаМесяц, ЭлементыФормы.Панель1.Страницы.НаДату);
	
КонецПроцедуры


Процедура ДоговорыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		
		//Если ЭлементыФормы.КоманднаяПанель2.Кнопки.ПоказатьТолькоСРасчетамВВалюте.Пометка И НЕ ТекДанные.ЕстьРасчетыВВалюте Тогда
		//	ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоСерый;
		//	Продолжить;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.ТорговаяТочка.ДатаЗакрытия)
			И ТекДанные.ТорговаяТочка.ДатаЗакрытия < НачалоПериода Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Красный;
			
		ИначеЕсли ТекДанные.СтатусОплаты = Перечисления.СтатусыОплатыДоговоровКонтрагентов.Приостановлен Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Фиолетовый;
			
		ИначеЕсли ТекДанные.ЕстьНепроведенныйПлатеж Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Хаки;
			
		КонецЕсли;
		
		
		Для Каждого ТекКолонка Из ЭтаФорма.Договоры.Колонки Цикл
			Просрочено = Ложь;
			Если Лев(ТекКолонка.Имя, 5) = "Дата_" Тогда
				Если ТекДанные[ТекКолонка.Имя] > 0
					И ЗначениеЗаполнено(ТекДанные["Документ_" + Прав(ТекКолонка.Имя, 8)])
					И Не Просрочено
					Тогда
					ОформлениеСтроки.ЦветФона = WebЦвета.ЗеленаяЛужайка;
				иначе
					Если НачалоДня(ТекущаяДата()) > дата(Сред(ТекКолонка.Имя,6)) Тогда
						Просрочено = Истина;
						ОформлениеСтроки.ЦветФона = WebЦвета.Красный;
					иначе
						ОформлениеСтроки.ЦветФона = WebЦвета.Желтый;
						//ОформлениеСтроки.Ячейки["Дата_" + Прав(ТекКолонка.Имя, 8)].ЦветФона = WebЦвета.Желтый;
					КонецЕсли;
				КонецЕсли;
				//ОформлениеСтроки.Ячейки["Дата_" + Прав(ТекКолонка.Имя, 8)].ЦветФона = WebЦвета.Желтый;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекДанные.ПлатежПросрочен Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт( , , Истина);
		КонецЕсли;
		
		Если ТекДанные.Эффективность<0 Тогда
			ОформлениеСтроки.Ячейки.ТорговаяТочка.Шрифт = Новый Шрифт( , , Истина);
			ОформлениеСтроки.Ячейки.ТорговаяТочка.ЦветТекста = WebЦвета.Красный;
			ОформлениеСтроки.Ячейки.Эффективность.Шрифт = Новый Шрифт( , , Истина);
			ОформлениеСтроки.Ячейки.Эффективность.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоговорыКомментарийПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	обСпр = ТекДанные.ДоговорКонтрагента.ПолучитьОбъект();
	обСпр.Комментарий = ТекДанные.Комментарий;
	обСпр.Записать();
	
КонецПроцедуры

Процедура ИзменитьФильтр()
	
	Для Каждого СтрокаИзмененная ИЗ Договоры Цикл
		Строка = ДоговорыКэш.Найти(СтрокаИзмененная.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(Строка, СтрокаИзмененная);
	КонецЦикла;  
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Договоры.ПлатежаНет,
	                      |	Договоры.ПлатежПросрочен,
	                      |	Договоры.ЕстьРасчетыВВалюте,
	                      |	Договоры.Эффективность,
	                      |	Договоры.НомерСтроки,
	                      |	Договоры.Контрагент
	                      |ПОМЕСТИТЬ ВТ_Договоры
	                      |ИЗ
	                      |	&Договоры КАК Договоры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Договоры.НомерСтроки
	                      |ИЗ
	                      |	ВТ_Договоры КАК ВТ_Договоры
	                      |ГДЕ
	                      |	(ВТ_Договоры.ЕстьРасчетыВВалюте
	                      |			ИЛИ НЕ &ТолькоВалютные)
	                      |	И (ВТ_Договоры.ПлатежаНет
	                      |			ИЛИ НЕ &ТолькоНеоплаченные)
	                      |	И (ВТ_Договоры.ПлатежПросрочен
	                      |			ИЛИ НЕ &ТолькоПросроченные)
	                      |	И (ВТ_Договоры.Эффективность < 0
	                      |			ИЛИ НЕ &ТолькоМинусоваяЭффективность)
	                      |	И ВЫБОР
	                      |			КОГДА &Контрагент = ЗНАЧЕНИЕ(справочник.контрагенты.пустаяссылка)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ВТ_Договоры.Контрагент = &Контрагент
	                      |		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ТолькоНеоплаченные", ТолькоНеоплаченные); 
	Запрос.УстановитьПараметр("ТолькоПросроченные", ТолькоПросроченные); 
	Запрос.УстановитьПараметр("ТолькоВалютные", ТолькоВалютные); 	
	Запрос.УстановитьПараметр("ТолькоМинусоваяЭффективность", ТолькоМинусоваяЭффективность); 		
	Запрос.УстановитьПараметр("Договоры", ДоговорыКэш);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	МассивСтрок = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСтрок.Добавить(ДоговорыКэш.Найти(Выборка.НомерСтроки, "НомерСтроки"));
	КонецЦикла;  
	
	Договоры = ДоговорыКэш.Скопировать(МассивСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанель2ТолькоНеоплаченные(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ТолькоНеоплаченные = Кнопка.Пометка;	
	
	ИзменитьФильтр();
	
КонецПроцедуры

Процедура КоманднаяПанель2ТолькоПросроченные(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ТолькоПросроченные = Кнопка.Пометка;
	
	ИзменитьФильтр();
	
КонецПроцедуры

Процедура КоманднаяПанель2ТолькоВалютные(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ТолькоВалютные = Кнопка.Пометка;
	
	ИзменитьФильтр();
	
КонецПроцедуры

Процедура КоманднаяПанель2ТолькоМинусоваяЭффективность(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ТолькоМинусоваяЭффективность = Кнопка.Пометка;
	
	ИзменитьФильтр();
	
КонецПроцедуры


Процедура ДоговорыПримечаниеПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Договоры.ТекущиеДанные;
	
	Если НЕ ПустаяСтрока(Элемент.Значение) Тогда
		МЗ = РегистрыСведений.ПримечанияПоДоговорамАренды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ТекДанные);
		МЗ.Прочитать();
		ЗаполнитьЗначенияСвойств(МЗ, ТекДанные);
		МЗ.Записать();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	ИзменитьФильтр();
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Ссылка = ПолучитьИПодключитьВнешнююОбработкуПлатежныйКалендарь();
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = Ссылка.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	ТекущаяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
	Форма = ТекущаяОбработка.ПолучитьФорму("ФормаОбработки");                                 
	Форма.Открыть();
    отказ=истина;
КонецПроцедуры

Функция ПолучитьИПодключитьВнешнююОбработкуПлатежныйКалендарь()	
	Возврат  Справочники.ВнешниеОбработки.НайтиПоНаименованию("Платежный календарь по регламентным работам в торговых точках");
КонецФункции

//+++АК 31.07.2017 sils ИП-00015834
Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ТекКонтрагент = ДанныеСтроки.Контрагент;
	
	//+++АК sils 04.09.2018 ИП-00019634
	//Если СЗ_СтопОплата.НайтиПоЗначению(ТекКонтрагент) <> Неопределено Тогда
	Отбор = Новый Структура;
	Отбор.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	Отбор.Вставить("Организация", ДанныеСтроки.Организация);
	Если ТЗ_СтопОплата.НайтиСтроки(Отбор).Количество() <> 0 Тогда
	//---АК	
		ОформлениеСтроки.ЦветФона = Новый Цвет(220, 220, 220);
	КонецЕсли;
КонецПроцедуры

Процедура ДоговорыПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка.Имя = "Использование" Тогда
		ТекСтр = Элемент.ТекущиеДанные;
		//+++АК sils 04.09.2018 ИП-00019634
		//Если СЗ_СтопОплата.НайтиПоЗначению(ТекСтр.Контрагент) <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", ТекСтр.Контрагент);
		Отбор.Вставить("Организация", ТекСтр.Организация);
		Если ТЗ_СтопОплата.НайтиСтроки(Отбор).Количество() <> 0 Тогда
		//---АК	
			ТекСтр.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//---АК





ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();