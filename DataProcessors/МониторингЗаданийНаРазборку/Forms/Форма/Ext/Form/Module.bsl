
&НаКлиенте
Процедура ЗаданияПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить()
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить(НСтр("ru = 'Выберите организацию'"));
		Возврат;
	КонецЕсли; 
	Если Элементы.Задания.ТекущиеДанные=Неопределено Тогда
		СформироватьСервер();
	Иначе	
		СформироватьСерверСТекСтрокой();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура СформироватьСервер()
	ТД=ЗаполнитьСервер();
	Объект.Задания.Очистить();	
	Для каждого Стр Из ТД Цикл
		НовСтр=Объект.Задания.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура СформироватьСерверСТекСтрокой()
  	ТЗ=ЗаполнитьСервер();
	Если ЗначениеЗаполнено(ТекЗадание) Тогда
		Сч=-1;
		Инд=-1;
		Для каждого Стр Из ТЗ Цикл
			Сч=Сч+1;
			Если Стр.ЗаданиеНаРазборку=ТекЗадание Тогда
				Инд=Сч;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если Инд>=0 Тогда
		    СтрокаВыгруженнойТаблицы = ТЗ.Получить(Инд);
			
		    ИндексСтрокиПослеСортировки = ТЗ.Индекс(СтрокаВыгруженнойТаблицы);
		    
		    Объект.Задания.Загрузить(ТЗ);
		    
		    СтрокаКоллекции = Объект.Задания.Получить(ИндексСтрокиПослеСортировки);
		    Элементы.Задания.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		Иначе
			Объект.Задания.Очистить();	
			Для каждого Стр Из ТЗ Цикл
				НовСтр=Объект.Задания.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			КонецЦикла; 
		КонецЕсли; 
	Иначе
		Объект.Задания.Очистить();	
		Для каждого Стр Из ТЗ Цикл
			НовСтр=Объект.Задания.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		КонецЦикла; 
	КонецЕсли; 
                                    
КонецПроцедуры    

&НаСервере
Функция ЗаполнитьСервер()
	Объект.Задания.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК Магазин,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).id_TT КАК id_TT,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Расходник,
	|	РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена КАК СборкаТерминаломЗакончена,
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика КАК Характеристика,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.КоличествоПаллет КАК КоличествоПаллет,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Сборщик Сборщик,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Сборщик <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК СборщикЗаполнен
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	|	И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Владелец
	|	И (РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	И РасходныйОрдерСкладТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы),
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто,
	|	РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).id_TT,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.Ссылка.КоличествоПаллет,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Сборщик,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Сборщик <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	РасходныйОрдерСкладТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин,
	|	Склад,
	|	Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика";
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата.ДатаОкончания));
	Запрос.УстановитьПараметр("Владелец", Склад);
	Запрос.УстановитьПараметр("Склад", ВиртСклад);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	
	ТабТовары=Запрос.Выполнить().Выгрузить();
	Возврат ТабТовары;
	//Пока ТабТовары.Следующий() Цикл
	//	ЗаполнитьЗначенияСвойств(Объект.Задания.Добавить(),ТабТовары);
	//КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ПечатьШКПаллеты(Команда)
	МасДок=Новый Массив;
	Для каждого Стр Из Элементы.Задания.ВыделенныеСтроки Цикл
		Если МасДок.Найти(Объект.Задания[Стр].Расходник)=Неопределено Тогда
			МасДок.Добавить(Объект.Задания[Стр].Расходник);
		КонецЕсли; 	
	КонецЦикла;
	ТабДок=ПечатьШКПаллетыСервер(МасДок);
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьШКПаллетыСервер(МасДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО СоставПаллеты.РасходныйОрдер = РасходныйОрдерСклад.Ссылка И СоставПаллеты.ПометкаУдаления=Ложь
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)
		|	И СоставПаллеты.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Ссылка", МасДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
		ОбъектПаллеты.РасходныйОрдер=ВыборкаДетальныеЗаписи.Ссылка;
		ОбъектПаллеты.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставПаллеты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = РасходныйОрдерСклад.Ссылка)
		|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", МасДок);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасПал=Новый Массив;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасПал.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	ТабДок=Справочники.СоставПаллеты.ПечатьШК(МасПал);
	Возврат ТабДок;
КонецФункции


&НаКлиенте
Процедура ЗаданияКоличествоПаллетПриИзменении(Элемент)
	ЗаданияКоличествоПаллетПриИзмененииСервер(Элементы.Задания.ТекущиеДанные.Расходник,Элементы.Задания.ТекущиеДанные.КоличествоПаллет);
КонецПроцедуры
	
&НаСервере
Процедура ЗаданияКоличествоПаллетПриИзмененииСервер(Док,КолПал)
	ОбДок=Док.ПолучитьОбъект();
	ОбДок.КоличествоПаллет=КолПал;
	ОбДок.Записать(РежимЗаписиДокумента.Запись);
	Для каждого Стр Из Объект.Задания Цикл
		Если Стр.Расходник=Док Тогда
			Стр.КоличествоПаллет=КолПал;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасходники(Команда)
	ОбработатьРасходникиСервер();
КонецПроцедуры

&НаСервере
Процедура ОбработатьРасходникиСервер()
	РегламентныеЗаданияСервер.ЗаполнитьРасходникиПоданнымРазборки();
	Сообщить("Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("Заполнить",60);
	Автообновление=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПриАктивизацииСтроки(Элемент)
	Если не Элементы.Задания.ТекущиеДанные=Неопределено Тогда
		ТекЗадание=Элементы.Задания.ТекущиеДанные.ЗаданиеНаРазборку;
	КонецЕсли; 
КонецПроцедуры
