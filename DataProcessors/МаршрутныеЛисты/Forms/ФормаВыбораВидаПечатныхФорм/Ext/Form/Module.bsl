
Функция ПреобразоватьНомерДокВТекстНомераТТН(НомерДок)
	
	ТекстНомераТТН = "";
	ДлинаНомера = СтрДлина(НомерДок);
	Для н = 1 По ДлинаНомера Цикл
		Если Сред(НомерДок, н, 1) = "0"
			И НЕ н = ДлинаНомера Тогда
			ТекстНомераТТН = Сред(НомерДок, н + 1);
			Продолжить;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Возврат ТекстНомераТТН;
	
КонецФункции

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
		ТекСтрока.Печатать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
		ТекСтрока.Печатать = Ложь;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Расходный ордер
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "РасходныйОрдер";
	НовСтр.Представление 	= "Расходный ордер";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Истина;
	
	
	// Накладная
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "Накладная";
	НовСтр.Представление 	= "Накладная";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Истина;
	
	//АК БЕЛН 13.07.2016++
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "Приложение";
	НовСтр.Представление 	= "Приложение к накладной";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Истина;	
	//АК БЕЛН 13.07.2016++
	
	// Сертификаты
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "Сертификат";
	НовСтр.Представление 	= "Сертификат";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Истина;
	
	//+++АК KIRN 2018.04.13 ИП-00018209^01 
	// Сертификаты
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "ВсеСертификаты";
	НовСтр.Представление 	= "Все сертификаты";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= ЛОжь;
	//---АК KIRN 
	
	
	//+++ak GOLV
	
	// ТТН
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "ТТН";
	НовСтр.Представление 	= "ТТН";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Ложь;	
	
	// ТТН с подписями
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "ТТНсПодписями";
	НовСтр.Представление 	= "ТТН с подписями";
	НовСтр.Экземпляров 		= 2;
	НовСтр.Печатать 		= Истина;	
	
	//+++АК BELN 2018.04.26 
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "Паллета";
	НовСтр.Представление 	= "Паллета";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Истина;	
	//---АК BELN 2018.04.26 
	
	//---ak GOLV
	// Требование-накладная
	//НовСтр = КомплектПечатныхФорм.Добавить();
	//НовСтр.Имя = "ТребованиеНакладная";
	//НовСтр.Представление = "Требование-накладная";
	//НовСтр.Экземпляров = 1;
	//НовСтр.Печатать = Истина;
	
	//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "УПД";
	НовСтр.Представление 	= "УПД";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Ложь;
	//---АК Susk (Суслин К.В.) 	 
	
	//+++shae 2018.10.15 ИП-00020073 
	НовСтр = КомплектПечатныхФорм.Добавить();
	НовСтр.Имя 				= "РаспределениеНаВендинги";
	НовСтр.Представление 	= "Распределение на вендинги";
	НовСтр.Экземпляров 		= 1;
	НовСтр.Печатать 		= Ложь;	 	
	//---shae 2018.10.15 ИП-00020073 	
	
	Для Каждого СтрокаМассива Из Параметры.РасходныеОрдера Цикл
		НовСтр = РасходныеОрдера.Добавить();
		НовСтр.Ордер = СтрокаМассива;
	КонецЦикла;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КаталогВременныхФайловКлиент = КаталогВременныхФайлов() + "\";
	СразуНаПринтер = Истина;
	
КонецПроцедуры

//+++АК BELN 2018.07.04 
&НаСервере
Процедура ЗаполнитьНомераТТ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка,
	|	ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК НомерТТ
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТТ";
	Запрос.УстановитьПараметр("Ссылка", РасходныеОрдера.Выгрузить().ВыгрузитьКолонку("Ордер"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСтр=РасходныеОрдера.НайтиСтроки(Новый Структура("Ордер",ВыборкаДетальныеЗаписи.Ссылка));	
		Если МасСтр.Количество() Тогда
			МасСтр[0].НомерТТ=ВыборкаДетальныеЗаписи.НомерТТ;
		КонецЕсли; 
	КонецЦикла;
	РасходныеОрдера.Сортировать("НомерТТ");
	
КонецПроцедуры

//---АК BELN 2018.07.04 

&НаКлиенте
Процедура СформироватьПечатныеФормы(Команда)
	//+++АК BELN 2018.07.04
	Если ПоНомеруТТ Тогда
		ЗаполнитьНомераТТ();
		
		
	КонецЕсли; 
	//---АК BELN 2018.07.04 
	ЭтаФорма.Закрыть(Истина);
	
	//mind 2017-09-21 с переходом на платформу 8.3 стала падать общая печать документов
	//пробуем побороть этот эффект, формируя по пачке документов и отправляя их сразу на печать
	Если СразуНаПринтер Тогда
		РазмерПорции = 15;
		КолвоПорций = Цел(РасходныеОрдера.Количество()) / РазмерПорции + ?(РасходныеОрдера.Количество() % РазмерПорции <> 0, 1, 0);
		Для н = 0 По КолвоПорций - 1 Цикл
			//+++АК BELN 2018.07.19 ИП-00019201
			Если СтараяПроцедура Тогда
				СписокДоки = СформироватьПечатныеФормыПоПорядкуСерверСтарая(н, РазмерПорции);
			Иначе	
				СписокДоки = СформироватьПечатныеФормыПоПорядкуСервер(н, РазмерПорции);
			КонецЕсли; 
			//Для Каждого ЭлементДок Из СписокДоки Цикл
			//	Сообщить(ЭлементДок.представление);
			//КонецЦикла;	
			//---АК BELN 2018.07.19 
			Для Каждого ЭлементДок Из СписокДоки Цикл
				//ЭлементДок.Значение.Показать();
				ЭлементДок.Значение.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
				//ЭлементДок.Значение.Показать();
			КонецЦикла;	
		КонецЦикла;	
	Иначе	
		// Получим ключ уникальности открываемой формы
		КлючУникальности = Строка(Новый УникальныйИдентификатор);
		
		ПараметрыОткрытия = ПолучитьПараметрыОткрытияФормыПечати();
		
		Для Каждого СтрокаТаблицы Из ЭтаФорма.ФайлыДляКопирования Цикл
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресХранилища);
			ФайлКартинка = Новый Файл(СтрокаТаблицы.ПолноеИмяФайла);
			Если НЕ ФайлКартинка.Существует() Тогда
				Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
					ДвоичныеДанные.Записать(СтрокаТаблицы.ПолноеИмяФайла);				
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументовУправляемая", ПараметрыОткрытия,, КлючУникальности);
	КонецЕсли;	
	//+++АК BELN 2018.09.13 ИП-00019771.01
	Если КомплектПечатныхФорм.НайтиСтроки(Новый Структура("Печатать,Имя",Истина,"Паллета")).Количество() Тогда
		МасРО=Новый Массив;
		Для каждого Эл Из РасходныеОрдера Цикл
			МасРО.Добавить(Эл.Ордер);
		КонецЦикла; 
		ОткрытьФорму("Документ.РасходныйОрдерСклад.Форма.ФормаНеобработанныхРО",Новый Структура("Расходники",МасРО));	
		
	
	КонецЕсли; 
	//---АК BELN 2018.09.13 
	
КонецПроцедуры

&НаСервере              
Функция ПолучитьПараметрыОткрытияФормыПечати()
	
	Возврат Новый Структура("ПечатьИзМаршрутногоЛиста, АдресВоВременномХранилище, АдресВоВременномХранилищеСпискаПоПорядку, АдресТаблицыСертификатов",
	Истина,
	ПоместитьВоВременноеХранилище(СформироватьПечатныеФормыСервер()),
	ПоместитьВоВременноеХранилище(?(СтараяПроцедура,СформироватьПечатныеФормыПоПорядкуСерверСтарая(),СформироватьПечатныеФормыПоПорядкуСервер())),
	ПоместитьВоВременноеХранилище(ТаблицаОтправленныхСертификатов.Выгрузить()));	
	
КонецФункции

&НаСервере
Функция СформироватьПечатныеФормыСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("Экземпляров");
	КоллекцияПечатныхФорм.Колонки.Добавить("Картинка");
	//КоллекцияПечатныхФорм.Колонки.Добавить("ПолноеИмяФайла");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТекстHTML");
	
	МассивОрдеров = РасходныеОрдера.Выгрузить().ВыгрузитьКолонку("Ордер");
	
	//+++АК KIRN 2018.04.11 ИП-00018209   
	мсДокиДляРТУ = Новый Массив;
	//---АК KIRN 
	
	
	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
		
		Если НЕ ТекСтрока.Печатать Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если ТекСтрока.Имя = "РасходныйОрдер" Тогда
			
			//+++АК KIRN 2018.08.30 ИП-00019710
			Обработки.ЗаполнитьРасходникиПоЗаданиямНаРазборку.ЗаполнитьРасходники(Новый Структура("СписокРасходников, ДатаРаспределения, ОбновлятьТолькоЗакрытые",МассивОрдеров,МассивОрдеров[0].Дата, Истина));
			//---АК KIRN 
			
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.АвтоМасштаб 			= Истина;
			ТабличныйДокумент.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
			
			ВыводитьРазделительСтраниц = Ложь;
			Для Каждого ЭлементМассива Из МассивОрдеров Цикл
				
				Если ВыводитьРазделительСтраниц Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// 1й расходник
				ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_Товары(ЭлементМассива);
				ТабличныйДокумент.Вывести(ТабДок);
				
				ВыводитьРазделительСтраниц = Истина;
				
			КонецЦикла;
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 		= ТекСтрока.Имя;
			НовСтр.ИмяВРЕГ 			= ВРег(ТекСтрока.Имя);
			НовСтр.СинонимМакета 	= "Расходные ордера";
			НовСтр.ТабличныйДокумент= ТабличныйДокумент;
			НовСтр.Экземпляров 		= ТекСтрока.Экземпляров;
			
			//
		ИначеЕсли ТекСтрока.Имя = "Приложение" Тогда
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.АвтоМасштаб 			= Истина;
			ТабличныйДокумент.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
			
			ВыводитьРазделительСтраниц = Ложь;
			Для Каждого ЭлементМассива Из МассивОрдеров Цикл
				
				Если ВыводитьРазделительСтраниц Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// 1й расходник
				
				//++ luza 11.07.2018 ИП-00019221    
				//ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_ТоварыССертификатами(ЭлементМассива);
				ТабДок = Документы.РасходныйОрдерСклад.ПечатьПреложениеКНакладной_Пакет(ЭлементМассива);
				//-- luza 11.07.2018 ИП-00019221    
				ТабличныйДокумент.Вывести(ТабДок);
				
				ВыводитьРазделительСтраниц = Истина;
				
			КонецЦикла;
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 		= ТекСтрока.Имя;
			НовСтр.ИмяВРЕГ 			= ВРег(ТекСтрока.Имя);
			НовСтр.СинонимМакета 	= "Приложение";
			НовСтр.ТабличныйДокумент= ТабличныйДокумент;
			НовСтр.Экземпляров 		= ТекСтрока.Экземпляров;
			
			//	
		ИначеЕсли ТекСтрока.Имя = "ТТН"
			ИЛИ ТекСтрока.Имя = "ТТНсПодписями" Тогда
			
			ТабличныйДокумент	= ПечатьТТН(МассивОрдеров, ТекСтрока.Имя = "ТТНсПодписями");
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 			= ТекСтрока.Имя;
			НовСтр.ИмяВРЕГ 				= ВРег(ТекСтрока.Имя);
			НовСтр.СинонимМакета 		= "ТТН" + ?(ТекСтрока.Имя = "ТТНсПодписями", " с подписями", "");
			НовСтр.ТабличныйДокумент	= ТабличныйДокумент;
			НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;
			
			//	
		ИначеЕсли ТекСтрока.Имя = "Накладная" Тогда
			
			ВыборкаДокумент = ПолучитьВыборкуПоТоварам(МассивОрдеров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ТабДокТОРГ12 = Новый ТабличныйДокумент;
			ТабДокТОРГ12.ПолеСверху         	= 4;
			ТабДокТОРГ12.ПолеСлева          	= 4;
			ТабДокТОРГ12.ПолеСнизу          	= 4;
			ТабДокТОРГ12.ПолеСправа         	= 4;
			ТабДокТОРГ12.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
			ТабДокТОРГ12.АвтоМасштаб 			= Истина;
			ТабДокТОРГ12.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
			
			ТабДокМ11	 = Новый ТабличныйДокумент;
			ТабДокМ11.АвтоМасштаб 			= Истина;
			ТабДокМ11.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
			
			ВыводитьРазделительСтраницТОРГ12 = Ложь;
			ВыводитьРазделительСтраницМ11	 = Ложь;
			
			ПечататьТОРГ12 = Ложь;
			ПечататьМ11	  = Ложь;
			
			Пока ВыборкаДокумент.Следующий() Цикл
				
				СсылкаНаДокумент = ВыборкаДокумент.Ссылка;
				//+++АК SHEP 2018.10.04 ИП-00020060
				//+++АК SHEP 2018.10.05 ИП-00020071
				//ЭтоВнешняяОрганизация = (ВыборкаДокумент.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница"));
				ЭтоВнешняяОрганизация = ВыборкаДокумент.ЭтоСторонняяРозница;
				//---АК SHEP 2018.10.04
				
				ВыборкаОрганизации = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаОрганизации.Следующий()Цикл
					
					ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
					
					МассивТоваровТОРГ12 = Новый Массив;
					МассивТоваровМ11 	= Новый Массив;
					
					Организация = ВыборкаОрганизации.Организация;
					//+++АК KIRN 2018.04.11 ИП-00018209         
					//+++АК SHEP 2018.10.04 ИП-00020060: закомментировал
					//ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
					//---АК SHEP 2018.10.04
					Если ЭтоВнешняяОрганизация Тогда
						мсДокиДляРТУ.Добавить(СсылкаНаДокумент);
					КонецЕСли;
					//---АК KIRN 
					
					//ОрганизацияПолучатель = ВыборкаОрганизации.ОрганизацияПолучатель;
					ОрганизацияПолучатель = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ВыборкаОрганизации.ДатаРегистратора,
					Новый Структура("СтруктурнаяЕдиница", ВыборкаОрганизации.Получатель)).Организация;
					Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель)Тогда
						ОрганизацияПолучатель = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
					КонецЕсли;
					
					
					Пока ВыборкаНоменклатура.Следующий()Цикл
						
						Если Организация = ОрганизацияПолучатель Тогда
							//+++АК KIRN 2018.04.11 ИП-00018209       
							Если ЭтоВнешняяОрганизация Тогда
								МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
							Иначе
								МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
							КонецЕСли;
							//МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
							//---АК KIRN 
						Иначе
							МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
						КонецЕсли;
						
					КонецЦикла;
					
					//// Печать М11
					//Если МассивТоваровМ11.Количество()Тогда
					//	
					//	Если ВыводитьРазделительСтраницМ11 Тогда
					//		ТабДокМ11.ВывестиГоризонтальныйРазделительСтраниц();
					//	КонецЕсли;
					//	
					//	ТабДок = ПечатьМ11(СсылкаНаДокумент, МассивТоваровМ11, Организация);
					//	ТабДокМ11.Вывести(ТабДок);
					//	
					//	ПечататьМ11 = Истина;
					//	ВыводитьРазделительСтраницМ11 = Истина;
					//	
					//КонецЕсли;
					
					// Печать Торг-13
					Если МассивТоваровМ11.Количество() Тогда
						
						Если ВыводитьРазделительСтраницМ11 Тогда
							ТабДокМ11.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ТабДок = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(СсылкаНаДокумент, МассивТоваровМ11);
						ТабДокМ11.Вывести(ТабДок);
						
						ПечататьМ11 = Истина;
						ВыводитьРазделительСтраницМ11 = Истина;
						
					КонецЕсли;
					
					// Печать ТОРГ12
					Если МассивТоваровТОРГ12.Количество() Тогда
						//+++АК KIRN 2018.05.03  
						//Если ВыводитьРазделительСтраницТОРГ12 Тогда
						//	ТабДокТОРГ12.ВывестиГоризонтальныйРазделительСтраниц();
						//КонецЕсли;
						//
						//ТабДок = ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваровТОРГ12, Организация);
						//ТабДокТОРГ12.Вывести(ТабДок);
						//
						//ПечататьТОРГ12 = Истина;
						//ВыводитьРазделительСтраницТОРГ12 = Истина;
						//---АК KIRN 
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			
			//+++АК KIRN 2018.04.11  
			Если мсДокиДляРТУ.Количество()>0 ТОгда
				мсРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДокиДляРТУ);
				
				Если ВыводитьРазделительСтраницТОРГ12 Тогда
					ТабДокТОРГ12.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДЛя Каждого РТУ из мсРТУ цикл
					Если НЕ ЗначениеЗаполнено(РТУ) ТОгда
						Сообщить("Запись реализации не выполнена!");
						Продолжить;
						
					Иначе
						
						Если НЕ РТУ.Проведен Тогда
							Попытка
								Об = РТУ.ПолучитьОбъект();
								Об.Записать(РежимЗаписиДокумента.Проведение);
							Исключение
							КонецПопытки;
						КонецЕСли;
					КОнецЕСли;
					
					
					ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(РТУ);
					ТабДокТОРГ12.Вывести(ТабДок);
					ПечататьТОРГ12 = Истина;
					ВыводитьРазделительСтраницТОРГ12 = Истина;
				КонецЦикла;
			КонецЕСли;
			//---АК KIRN 
			
			
			Если ПечататьМ11 Тогда
				НовСтр = КоллекцияПечатныхФорм.Добавить();
				НовСтр.ИмяМакета 			= "ТребованиеНакладные";
				НовСтр.ИмяВРЕГ 				= ВРег("ТребованиеНакладные");
				НовСтр.СинонимМакета 		= "Требование-накладные";
				НовСтр.ТабличныйДокумент	= ТабДокМ11;
				НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;
			КонецЕсли;
			
			Если ПечататьТОРГ12 Тогда
				НовСтр = КоллекцияПечатныхФорм.Добавить();
				НовСтр.ИмяМакета 			= "Накладные";
				НовСтр.ИмяВРЕГ 				= ВРег("Накладные");
				НовСтр.СинонимМакета 		= "ТОРГ-12";
				НовСтр.ТабличныйДокумент	= ТабДокТОРГ12;
				НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Имя = "Сертификат" Тогда
			
			ТабДокСертификат = Новый ТабличныйДокумент;
			ТабДокСертификат.ПолеСверху = 4;
			ТабДокСертификат.ПолеСлева  = 4;
			ТабДокСертификат.ПолеСнизу  = 4;
			ТабДокСертификат.ПолеСправа = 4;
			ТабДокСертификат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
			ТабДокСертификат.АвтоМасштаб 			= Истина;
			ТабДокСертификат.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
			
			//ТабДокСертификат = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатов(МассивОрдеров);  				
			//ПолноеИмяТабДок = ПолучитьИмяВременногоФайла("XLSX");
			//ПолноеИмяТабДок = ПолучитьИмяВременногоФайла("xls");
			//ТабДокСертификат.Записать("\\server00\PDF-сертификаты\Для печати\5551.mxl", ТипФайлаТабличногоДокумента.MXL);
			//ТабДокСертификат.Записать(ПолноеИмяТабДок, ТипФайлаТабличногоДокумента.XLSX);//.DOCX);
			
			//Файл = Новый Файл(ПолноеИмяТабДок);
			//Файл = Новый Файл(ПолноеИмяТабДок);
			//Если Файл.Существует() Тогда
			//	КопироватьФайл(ПолноеИмяТабДок, "\\server00\Temp\" + Файл.Имя);
			//	Попытка 					
			//		УдалитьФайлы(ПолноеИмяТабДок); 					
			//	Исключение 					
			//	КонецПопытки;
			//КонецЕсли;
			
			//ТабДокСертификатДляВывода = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатовСтрока("\\server00\PDF-сертификаты\Для печати\" + Файл.Имя);
			
			СтрокаHTML = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатовHTML(МассивОрдеров, КаталогВременныхФайловКлиент, ФайлыДляКопирования, ТаблицаОтправленныхСертификатов);
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 		= "Сертификаты";
			НовСтр.ИмяВРЕГ 			= ВРег("Сертификаты");
			НовСтр.СинонимМакета 	= "Сертификаты";
			//НовСтр.ТабличныйДокумент= ТабДокСертификатДляВывода;
			НовСтр.Экземпляров 		= ТекСтрока.Экземпляров;
			НовСтр.ТекстHTML        = СтрокаHTML;
			
			//НовСтр.ПолноеИмяФайла   = "\\server00\PDF-сертификаты\Для печати\" + Файл.Имя;
			
			//ИмяФайлаСертификатов = "\\server00\PDF-сертификаты\Для печати\" + Файл.Имя;
			//Сообщить("Ввв");	
			
			//+++АК KIRN 2018.04.13 ИП-00018209^01 		
		ИначеЕсли ТекСтрока.Имя = "ВсеСертификаты" Тогда
			
			ТабДокСертификат = Новый ТабличныйДокумент;
			ТабДокСертификат.ПолеСверху = 4;
			ТабДокСертификат.ПолеСлева  = 4;
			ТабДокСертификат.ПолеСнизу  = 4;
			ТабДокСертификат.ПолеСправа = 4;
			ТабДокСертификат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
			ТабДокСертификат.АвтоМасштаб 			= Истина;
			ТабДокСертификат.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
			
			СтрокаHTML = Документы.РасходныйОрдерСклад.ПечатьВсехСертификатовHTML(МассивОрдеров, КаталогВременныхФайловКлиент, ФайлыДляКопирования, ТаблицаОтправленныхСертификатов);
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 		= "Сертификаты";
			НовСтр.ИмяВРЕГ 			= ВРег("Сертификаты");
			НовСтр.СинонимМакета 	= "Сертификаты";
			//НовСтр.ТабличныйДокумент= ТабДокСертификатДляВывода;
			НовСтр.Экземпляров 		= ТекСтрока.Экземпляров;
			НовСтр.ТекстHTML        = СтрокаHTML;
			//---АК KIRN  
			
			//+++АК BELN 2018.04.26 
		ИначеЕсли ТекСтрока.Имя = "Паллета"
			Тогда
			
			ТабличныйДокумент	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(МассивОрдеров,ПоНомеруТТ);
			
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 			= ТекСтрока.Имя;
			НовСтр.ИмяВРЕГ 				= ВРег(ТекСтрока.Имя);
			НовСтр.СинонимМакета 		= "ШК Паллеты";
			НовСтр.ТабличныйДокумент	= ТабличныйДокумент;
			НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;
			//---АК BELN 2018.04.26 
			
		//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
		//интересно, зачем вообще 2 процедуры, нельзя было универсально сделать?
		ИначеЕсли ТекСтрока.Имя = "УПД" И НЕ СразуНаПринтер Тогда
			
			СоотУпд = ПечатьУПД(МассивОрдеров);
			
			Для Каждого ЭлСоответствия Из СоотУпд Цикл
				
				НовСтр = КоллекцияПечатныхФорм.Добавить();
				НовСтр.ИмяМакета 			= ТекСтрока.Имя;
				НовСтр.ИмяВРЕГ 				= ВРег(ТекСтрока.Имя);
				НовСтр.СинонимМакета 		= "УПД";
				НовСтр.ТабличныйДокумент	= ЭлСоответствия.Значение;
				НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;
			КонецЦикла;
		//---АК Susk (Суслин К.В.) 	
		
		//+++shae 2018.10.15 ИП-00020073 
		ИначеЕсли ТекСтрока.Имя = "РаспределениеНаВендинги" Тогда
			
			ТабличныйДокумент = Обработки.МаршрутныеЛисты.ПечатьРаспределениеНаВендинги(МассивОрдеров);
		
			НовСтр = КоллекцияПечатныхФорм.Добавить();
			НовСтр.ИмяМакета 			= ТекСтрока.Имя;
			НовСтр.ИмяВРЕГ 				= ВРег(ТекСтрока.Имя);
			НовСтр.СинонимМакета 		= "Распределение на вендинги";
			НовСтр.ТабличныйДокумент	= ТабличныйДокумент;
			НовСтр.Экземпляров 			= ТекСтрока.Экземпляров;		
		//---shae 2018.10.15 ИП-00020073 
		
		КонецЕсли;    		
		
	КонецЦикла;	
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

&НаСервере
Функция СформироватьПечатныеФормыПоПорядкуСерверСтарая(НомерПорции = -1, РазмерПорции = 0)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	Если НомерПорции = -1 Тогда
		МассивОрдеров = РасходныеОрдера.Выгрузить().ВыгрузитьКолонку("Ордер");
	Иначе
		МассивОрдеров = Новый Массив();
		Для н = НомерПорции * РазмерПорции По (НомерПорции + 1) * РазмерПорции - 1 Цикл
			Если н > РасходныеОрдера.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			МассивОрдеров.Добавить(РасходныеОрдера[н].Ордер);
		КонецЦикла;	
	КонецЕсли;	
	
	//+++АК KIRN 2018.04.11 
	мсДокиРТУВсе = Новый Массив;
	мсДокиДляРТУ = Новый Массив;
	//---АК KIRN 
	//+++АК BELN 2018.07.06 
	ФлТолькоПаллеты=Ложь;
	ИмяПринтераПеч="";
	МасСтр=КомплектПечатныхФорм.НайтиСтроки(Новый Структура("Печатать",Истина));
	Если МасСтр.Количество()=1 Тогда
		Если МасСтр[0].Имя="Паллета" Тогда
			ФлТолькоПаллеты=Истина;
			ИмяПринтераПеч=МасСтр[0].ИмяПринтера;
		
		КонецЕсли; 
	КонецЕсли; 
	Если ФлТолькоПаллеты Тогда
		ТабличныйДокумент	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(МассивОрдеров,ПоНомеруТТ);
		Если ЗначениеЗаполнено(ИмяПринтераПеч) Тогда
			ТабличныйДокумент.ИмяПринтера = ИмяПринтераПеч;
		КонецЕсли;
		//
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			СписокПечатныхФорм.Добавить(ТабличныйДокумент, "Паллета"); 
		КонецЕсли;
		
	Иначе	
	//---АК BELN 2018.07.06 
	
	
	Для Каждого ЭлементМассива Из МассивОрдеров Цикл
		
		Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
			
			Если ТекСтрока.Печатать Тогда
				
				Если ТекСтрока.Имя = "РасходныйОрдер" Тогда
					
					ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_Товары(ЭлементМассива, Ложь);
					ТабДок.АвтоМасштаб 				= Истина;
					ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;	
					
					СписокПечатныхФорм.Добавить(ТабДок, "Расходный ордер");
					
				КонецЕсли;
				//АК БЕЛН 13.07.2016++
				Если ТекСтрока.Имя = "Приложение" Тогда
					                                                                                                         					                                                                                                         					
					//++ luza 11.07.2018 ИП-00019221    
					//ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_ТоварыССертификатами(ЭлементМассива, Ложь);
					ТабДок = Документы.РасходныйОрдерСклад.ПечатьПреложениеКНакладной_Пакет(ЭлементМассива);
					//-- luza 11.07.2018 ИП-00019221    				
					
					
					ТабДок.АвтоМасштаб 				= Истина;
					ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;
					
					СписокПечатныхФорм.Добавить(ТабДок, "Приложение");
					
				КонецЕсли;
				//АК БЕЛН 13.07.2016--
				
				Если ТекСтрока.Имя = "ТТН"
						ИЛИ ТекСтрока.Имя = "ТТНсПодписями" Тогда
				
	                ТабличныйДокумент = ПечатьТТН(МассивОрдеров, ТекСтрока.Имя = "ТТНсПодписями");
					ТабличныйДокумент.АвтоМасштаб 			= Истина;
					ТабличныйДокумент.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;
					
					СписокПечатныхФорм.Добавить(ТабличныйДокумент, "ТТН" + ?(ТекСтрока.Имя = "ТТНсПодписями", " с подписями", ""));
					
				КонецЕсли;
				
				Если ТекСтрока.Имя = "Накладная" Тогда
					
					МассивДок = Новый Массив;
					МассивДок.Добавить(ЭлементМассива);
					
					ВыборкаДокумент = ПолучитьВыборкуПоТоварам(МассивДок).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДокумент.Следующий() Цикл
						
						СсылкаНаДокумент = ВыборкаДокумент.Ссылка;
						
						ВыборкаОрганизации = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаОрганизации.Следующий()Цикл
							
							ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
							
							МассивТоваровТОРГ12 = Новый Массив;
							МассивТоваровМ11 	= Новый Массив;
							
							Организация 			= ВыборкаОрганизации.Организация;
							
							//+++АК KIRN 2018.04.11 ИП-00018209         
							ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
							Если ЭтоВнешняяОрганизация Тогда
								мсДокиДляРТУ.Добавить(СсылкаНаДокумент);
							КонецЕСли;
							//---АК KIRN 
							
							ОрганизацияПолучатель 	= РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ВыборкаОрганизации.ДатаРегистратора,
																								Новый Структура("СтруктурнаяЕдиница", ВыборкаОрганизации.Получатель)).Организация;
							//ОрганизацияПолучатель = ВыборкаОрганизации.ОрганизацияПолучатель;
							Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель)Тогда
								ОрганизацияПолучатель = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
							КонецЕсли;
							
							Пока ВыборкаНоменклатура.Следующий() Цикл
								
								Если Организация = ОрганизацияПолучатель Тогда
									//+++АК KIRN 2018.04.11 ИП-00018209       
									Если ЭтоВнешняяОрганизация Тогда
										МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
									Иначе
										МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
									КонецЕСли;
									//МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
									//---АК KIRN 
									
								Иначе
									МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
								КонецЕсли;
								
							КонецЦикла;
							
							//// Печать М11
							//Если МассивТоваровМ11.Количество()Тогда
							//	
							//	ТабДок = ПечатьМ11(СсылкаНаДокумент, МассивТоваровМ11, Организация);
							//	ТабДок.АвтоМасштаб = Истина;
							//	ТабДок.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
							//	
							//	СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
							//	
							//КонецЕсли;
							
							// Печать Торг-13
							Если МассивТоваровМ11.Количество() Тогда
								
								ТабДок = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(СсылкаНаДокумент, МассивТоваровМ11);
								ТабДок.АвтоМасштаб 				= Истина;
								ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
								Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
									ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
								КонецЕсли;
								
								СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
								
							КонецЕсли;
							
							// Печать ТОРГ12
							Если МассивТоваровТОРГ12.Количество() Тогда
								
								//+++АК KIRN 2018.05.03  							
								//ТабДок = ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваровТОРГ12, Организация);
								//ТабДок.АвтоМасштаб 				= Истина;
								//ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
								//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
								//	ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
								//КонецЕсли;
								//
								//СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
								//---АК KIRN 
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					//+++АК KIRN 2018.04.11  
					Если мсДокиДляРТУ.Количество()>0 ТОгда
						мсРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДокиДляРТУ);
						ДЛя Каждого РТУ из мсРТУ цикл
							ЗначениеРТУ = мсДокиРТУВсе.Найти(РТУ);
							Если ЗначениеЗаполнено(ЗначениеРТУ) Тогда
								Продолжить;
							Иначе
								мсДокиРТУВсе.Добавить(РТУ);								
							КонецЕСли;
							
							Если НЕ ЗначениеЗаполнено(РТУ) ТОгда
								Сообщить("Запись реализации не выполнена!");
								Продолжить;
							Иначе
								
								Если НЕ РТУ.Проведен Тогда
									Попытка
										Об = РТУ.ПолучитьОбъект();
										Об.Записать(РежимЗаписиДокумента.Проведение);
									Исключение
									КонецПопытки;
								КонецЕСли;
							КонецЕСли;
							
							ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(РТУ);
							ТабДок.АвтоМасштаб 				= Истина;
							ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
							Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
								ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
							КонецЕсли;
							
							СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
						КонецЦикла;
						
						мсДокиДляРТУ.Очистить();
					КонецЕСли;
					//---АК KIRN 

				КонецЕсли;
				Если ТекСтрока.Имя = "Сертификат" Тогда
				
					//ТабДокСертификат = Новый ТабличныйДокумент;
					//ТабДокСертификат.Показать();
					МассивДокумента = Новый Массив;
					МассивДокумента.Добавить(ЭлементМассива);
					ТабДокСертификат = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатов(МассивДокумента);
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабДокСертификат.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;
					//
					Если НЕ ТабДокСертификат = Неопределено Тогда
						СписокПечатныхФорм.Добавить(ТабДокСертификат, "Сертификаты"); 
					КонецЕсли;
					//бДокСертификат..Показать();	
				КонецЕсли;
				
				//+++АК KIRN 2018.04.13 ИП-00018209^01 
				Если ТекСтрока.Имя = "ВсеСертификаты" Тогда
					
					//ТабДокСертификат = Новый ТабличныйДокумент;
					//ТабДокСертификат.Показать();
					МассивДокумента = Новый Массив;
					МассивДокумента.Добавить(ЭлементМассива);
					ТабДокСертификат = Документы.РасходныйОрдерСклад.ПечатьВсехСертификатов(МассивДокумента);
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабДокСертификат.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;
					//
					Если НЕ ТабДокСертификат = Неопределено Тогда
						СписокПечатныхФорм.Добавить(ТабДокСертификат, "Сертификаты"); 
					КонецЕсли;
					//бДокСертификат..Показать();	
				КонецЕсли;	
				//---АК KIRN 
				//+++АК BELN 2018.04.26 
				Если ТекСтрока.Имя = "Паллета"
					 Тогда
					Мас=Новый Массив; 
					Мас.Добавить(ЭлементМассива); 
					ТабличныйДокумент	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(Мас,ПоНомеруТТ);
					Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
						ТабличныйДокумент.ИмяПринтера = ТекСтрока.ИмяПринтера;
					КонецЕсли;
					//
					Если НЕ ТабличныйДокумент = Неопределено Тогда
						СписокПечатныхФорм.Добавить(ТабличныйДокумент, "Паллета"); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				//---АК BELN 2018.04.26 
			
		КонецЦикла;
		
	КонецЦикла;
	КонецЕсли; 
		
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция СформироватьПечатныеФормыПоПорядкуСервер(НомерПорции = -1, РазмерПорции = 0)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	Если НомерПорции = -1 Тогда
		МассивОрдеров = РасходныеОрдера.Выгрузить().ВыгрузитьКолонку("Ордер");
	Иначе
		МассивОрдеров = Новый Массив();
		Для н = НомерПорции * РазмерПорции По (НомерПорции + 1) * РазмерПорции - 1 Цикл
			Если н > РасходныеОрдера.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			МассивОрдеров.Добавить(РасходныеОрдера[н].Ордер);
		КонецЦикла;	
	КонецЕсли;	
	
	//+++АК KIRN 2018.04.11 
	мсДокиРТУВсе = Новый Массив;
	//---АК KIRN 
	//+++АК BELN 2018.07.06 
	//ФлТолькоПаллеты=Ложь;
	//ИмяПринтераПеч="";
	//МасСтр=КомплектПечатныхФорм.НайтиСтроки(Новый Структура("Печатать",Истина));
	//Если МасСтр.Количество()=1 Тогда
	//	Если МасСтр[0].Имя="Паллета" Тогда
	//		ФлТолькоПаллеты=Истина;
	//		ИмяПринтераПеч=МасСтр[0].ИмяПринтера;
	//	
	//	КонецЕсли; 
	//КонецЕсли; 
	//Если ФлТолькоПаллеты Тогда
	//	ТабличныйДокумент	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(МассивОрдеров,ПоНомеруТТ);
	//	Если ЗначениеЗаполнено(ИмяПринтераПеч) Тогда
	//		ТабличныйДокумент.ИмяПринтера = ИмяПринтераПеч;
	//	КонецЕсли;
	//	//
	//	Если НЕ ТабличныйДокумент = Неопределено Тогда
	//		СписокПечатныхФорм.Добавить(ТабличныйДокумент, "Паллета"); 
	//	КонецЕсли;
	//	
	//Иначе	
	//---АК BELN 2018.07.06 
	
	//+++АК BELN 2018.07.17 ИП-00019201 
	СоотРТУ=Новый Соответствие;
	ТЗМ11=Новый ТаблицаЗначений;
	ТЗМ11.Колонки.Добавить("ссылка",Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	ТЗМ11.Колонки.Добавить("номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОрганизацияПолучательПоУмолчанию = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
		
		Если ТекСтрока.Печатать Тогда
			
			Если ТекСтрока.Имя = "Накладная" Тогда
				
				
				ВыборкаДокумент = ПолучитьВыборкуПоТоварам(МассивОрдеров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДокумент.Следующий() Цикл
					мсДокиДляРТУ = Новый Массив;
					
					СсылкаНаДокумент = ВыборкаДокумент.Ссылка;
					
					ВыборкаОрганизации = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОрганизации.Следующий()Цикл
						
						ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
						
						МассивТоваровТОРГ12 = Новый Массив;
						МассивТоваровМ11 	= Новый Массив;
						
						Организация 			= ВыборкаОрганизации.Организация;
						
						//+++АК KIRN 2018.04.11 ИП-00018209         
						ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
						Если ЭтоВнешняяОрганизация Тогда
							мсДокиДляРТУ.Добавить(СсылкаНаДокумент);
						КонецЕСли;
						//---АК KIRN 
						
						ОрганизацияПолучатель 	= РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ВыборкаОрганизации.ДатаРегистратора,
						Новый Структура("СтруктурнаяЕдиница", ВыборкаОрганизации.Получатель)).Организация;
						//ОрганизацияПолучатель = ВыборкаОрганизации.ОрганизацияПолучатель;
						Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель)Тогда
							ОрганизацияПолучатель = ОрганизацияПолучательПоУмолчанию;
						КонецЕсли;
						
						Пока ВыборкаНоменклатура.Следующий() Цикл
							
							Если Организация = ОрганизацияПолучатель Тогда
								//+++АК KIRN 2018.04.11 ИП-00018209       
								Если ЭтоВнешняяОрганизация Тогда
									МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
								Иначе
									МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
								КонецЕСли;
								//МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
								//---АК KIRN 
								
							Иначе
								МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
							КонецЕсли;
							
						КонецЦикла;
						
						//// Печать М11
						//Если МассивТоваровМ11.Количество()Тогда
						//	
						//	ТабДок = ПечатьМ11(СсылкаНаДокумент, МассивТоваровМ11, Организация);
						//	ТабДок.АвтоМасштаб = Истина;
						//	ТабДок.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
						//	
						//	СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
						//	
						//КонецЕсли;
						
						// Печать Торг-13
						Если МассивТоваровМ11.Количество() Тогда
							
							//ТабДок = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(СсылкаНаДокумент, МассивТоваровМ11);
							//ТабДок.АвтоМасштаб 				= Истина;
							//ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
							//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
							//	ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
							//КонецЕсли;
							//
							//СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
							
						КонецЕсли;
						
						// Печать ТОРГ12
						Если МассивТоваровТОРГ12.Количество() Тогда
							
							//+++АК KIRN 2018.05.03  							
							//ТабДок = ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваровТОРГ12, Организация);
							//ТабДок.АвтоМасштаб 				= Истина;
							//ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
							//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
							//	ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
							//КонецЕсли;
							//
							//СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
							//---АК KIRN 
							
						КонецЕсли;
						
					КонецЦикла;
					Для каждого Эл Из МассивТоваровМ11 Цикл
						НовСтр=ТЗМ11.Добавить();
						НовСтр.Ссылка=СсылкаНаДокумент;
						НовСтр.Номенклатура=Эл;
					КонецЦикла; 
					
					Если мсДокиДляРТУ.Количество()>0 ТОгда
						мсРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДокиДляРТУ);
						ДЛя Каждого РТУ из мсРТУ цикл
							ЗначениеРТУ = мсДокиРТУВсе.Найти(РТУ);
							Если ЗначениеЗаполнено(ЗначениеРТУ) Тогда
								Продолжить;
							Иначе
								мсДокиРТУВсе.Добавить(РТУ);								
							КонецЕСли;
							
							Если НЕ ЗначениеЗаполнено(РТУ) ТОгда
								Сообщить("Запись реализации не выполнена!");
								Продолжить;
							Иначе
								
								Если НЕ РТУ.Проведен Тогда
									Попытка
										Об = РТУ.ПолучитьОбъект();
										Об.Записать(РежимЗаписиДокумента.Проведение);
									Исключение
									КонецПопытки;
								КонецЕСли;
							КонецЕСли;
							
						КонецЦикла;
						
						мсДокиДляРТУ.Очистить();
						СоотРТУ.Вставить(СсылкаНаДокумент,мсРТУ);
					КонецЕСли;
					
					//---АК KIRN 
				КонецЦикла;
				
				//+++АК KIRN 2018.04.11  
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	
	
	
	МасТД=Новый СписокЗначений;
	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
		
		Если ТекСтрока.Печатать Тогда
			Если ТекСтрока.Имя = "РасходныйОрдер" Тогда
				
				Соот = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_Товары(МассивОрдеров, Ложь);
				
				МасТД.Добавить(Соот,ТекСтрока.Имя);

				
			КонецЕсли;
			//АК БЕЛН 13.07.2016++
			Если ТекСтрока.Имя = "Приложение" Тогда
				
				//++ luza 11.07.2018 ИП-00019221    
				//ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_ТоварыССертификатами(ЭлементМассива, Ложь);
				Соот = Документы.РасходныйОрдерСклад.ПечатьПреложениеКНакладной_Пакет(МассивОрдеров,Истина);
				//-- luza 11.07.2018 ИП-00019221    				
				
				МасТД.Добавить(Соот,ТекСтрока.Имя);

				
			КонецЕсли;
			//АК БЕЛН 13.07.2016--
			
			Если ТекСтрока.Имя = "ТТН"
				ИЛИ ТекСтрока.Имя = "ТТНсПодписями" Тогда
				
				Соот = ПечатьТТН(МассивОрдеров, ТекСтрока.Имя = "ТТНсПодписями",Истина);
				МасТД.Добавить(Соот,ТекСтрока.Имя);

				
				
			КонецЕсли;
			
			Если ТекСтрока.Имя = "Накладная" Тогда
				Соот = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(МассивОрдеров, ТЗМ11);
				МасТД.Добавить(Соот,ТекСтрока.Имя);

				
				СоотТОРГ12=Новый Соответствие;
				Для каждого Эл Из МассивОрдеров Цикл
					МасРТУ=СоотРТУ.Получить(Эл);
					Если МасРТУ<>Неопределено Тогда
						Если МасРТУ.Количество() Тогда
							ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(МасРТУ);
							СоотТОРГ12.Вставить(Эл,ТабДок);	
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла; 
				МасТД.Добавить(СоотТОРГ12,"ТОРГ-12");
				
				//ВыборкаДокумент = ПолучитьВыборкуПоТоварам(МассивОрдеров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				//
				//Пока ВыборкаДокумент.Следующий() Цикл
				//	
				//	СсылкаНаДокумент = ВыборкаДокумент.Ссылка;
				//	
				//	ВыборкаОрганизации = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				//	Пока ВыборкаОрганизации.Следующий()Цикл
				//		
				//		ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
				//		
				//		МассивТоваровТОРГ12 = Новый Массив;
				//		МассивТоваровМ11 	= Новый Массив;
				//		
				//		Организация 			= ВыборкаОрганизации.Организация;
				//		
				//		//+++АК KIRN 2018.04.11 ИП-00018209         
				//		ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
				//		Если ЭтоВнешняяОрганизация Тогда
				//			мсДокиДляРТУ.Добавить(СсылкаНаДокумент);
				//		КонецЕСли;
				//		//---АК KIRN 
				//		
				//		ОрганизацияПолучатель 	= РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ВыборкаОрганизации.ДатаРегистратора,
				//																			Новый Структура("СтруктурнаяЕдиница", ВыборкаОрганизации.Получатель)).Организация;
				//		//ОрганизацияПолучатель = ВыборкаОрганизации.ОрганизацияПолучатель;
				//		Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель)Тогда
				//			ОрганизацияПолучатель = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
				//		КонецЕсли;
				//		
				//		Пока ВыборкаНоменклатура.Следующий() Цикл
				//			
				//			Если Организация = ОрганизацияПолучатель Тогда
				//				//+++АК KIRN 2018.04.11 ИП-00018209       
				//				Если ЭтоВнешняяОрганизация Тогда
				//					МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
				//				Иначе
				//					МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
				//				КонецЕСли;
				//				//МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
				//				//---АК KIRN 
				//				
				//			Иначе
				//				МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
				//			КонецЕсли;
				//			
				//		КонецЦикла;
				//		
				//		//// Печать М11
				//		//Если МассивТоваровМ11.Количество()Тогда
				//		//	
				//		//	ТабДок = ПечатьМ11(СсылкаНаДокумент, МассивТоваровМ11, Организация);
				//		//	ТабДок.АвтоМасштаб = Истина;
				//		//	ТабДок.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
				//		//	
				//		//	СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
				//		//	
				//		//КонецЕсли;
				//		
				//		// Печать Торг-13
				//		Если МассивТоваровМ11.Количество() Тогда
				//			
				//			ТабДок = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(СсылкаНаДокумент, МассивТоваровМ11);
				//			ТабДок.АвтоМасштаб 				= Истина;
				//			ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
				//			Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
				//				ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
				//			КонецЕсли;
				//			
				//			СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
				//			
				//		КонецЕсли;
				//		
				//		// Печать ТОРГ12
				//		Если МассивТоваровТОРГ12.Количество() Тогда
				//			
				//			//+++АК KIRN 2018.05.03  							
				//			//ТабДок = ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваровТОРГ12, Организация);
				//			//ТабДок.АвтоМасштаб 				= Истина;
				//			//ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
				//			//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
				//			//	ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
				//			//КонецЕсли;
				//			//
				//			//СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
				//			//---АК KIRN 
				//			
				//		КонецЕсли;
				//		
				//	КонецЦикла;
				//	
				//КонецЦикла;
				//
				////+++АК KIRN 2018.04.11  
				//Если мсДокиДляРТУ.Количество()>0 ТОгда
				//	мсРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДокиДляРТУ);
				//	ДЛя Каждого РТУ из мсРТУ цикл
				//		ЗначениеРТУ = мсДокиРТУВсе.Найти(РТУ);
				//		Если ЗначениеЗаполнено(ЗначениеРТУ) Тогда
				//			Продолжить;
				//		Иначе
				//			мсДокиРТУВсе.Добавить(РТУ);								
				//		КонецЕСли;
				//		
				//		Если НЕ ЗначениеЗаполнено(РТУ) ТОгда
				//			Сообщить("Запись реализации не выполнена!");
				//			Продолжить;
				//		Иначе
				//			
				//			Если НЕ РТУ.Проведен Тогда
				//				Попытка
				//					Об = РТУ.ПолучитьОбъект();
				//					Об.Записать(РежимЗаписиДокумента.Проведение);
				//				Исключение
				//				КонецПопытки;
				//			КонецЕСли;
				//		КонецЕСли;
				//		
				//		ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(РТУ);
				//		ТабДок.АвтоМасштаб 				= Истина;
				//		ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
				//		Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
				//			ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
				//		КонецЕсли;
				//		
				//		СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
				//	КонецЦикла;
				//	
				//	мсДокиДляРТУ.Очистить();
				//КонецЕСли;
				////---АК KIRN 
				
			КонецЕсли;
			Если ТекСтрока.Имя = "Сертификат" Тогда
				
				Соот = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатов(МассивОрдеров,Истина);
				МасТД.Добавить(Соот,ТекСтрока.Имя);


			КонецЕсли;
			
			//+++АК KIRN 2018.04.13 ИП-00018209^01 
			Если ТекСтрока.Имя = "ВсеСертификаты" Тогда
				
				Соот = Документы.РасходныйОрдерСклад.ПечатьВсехСертификатов(МассивОрдеров,Истина);
				МасТД.Добавить(Соот,ТекСтрока.Имя);

				
			КонецЕсли;	
			//---АК KIRN 
			//+++АК BELN 2018.04.26 
			Если ТекСтрока.Имя = "Паллета"
				Тогда
				Соот	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(МассивОрдеров,ПоНомеруТТ,Истина);
				МасТД.Добавить(Соот,ТекСтрока.Имя);
				//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
				//	ТабличныйДокумент.ИмяПринтера = ТекСтрока.ИмяПринтера;
				//КонецЕсли;
				////
				//Если НЕ ТабличныйДокумент = Неопределено Тогда
				//	СписокПечатныхФорм.Добавить(ТабличныйДокумент, "Паллета"); 
				//КонецЕсли;
			КонецЕсли;
			
			//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
			Если ТекСтрока.Имя = "УПД" И СразуНаПринтер Тогда
				СоотУпд = ПечатьУПД(МассивОрдеров);
				
				Если СоотУпд <> Неопределено Тогда
					МасТД.Добавить(Соот, ТекСтрока.Имя);					
				КонецЕсли;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 			 
			
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементМассива Из МассивОрдеров Цикл
		Для Каждого ПечФорма из МасТД Цикл
			Если ТипЗнч(ПечФорма.Значение)=Тип("Соответствие") Тогда
				ТабДок=ПечФорма.Значение.Получить(ЭлементМассива);
				Если ТабДок<>Неопределено И ТипЗнч(ТабДок)=Тип("ТабличныйДокумент") Тогда
					МасСтр=КомплектПечатныхФорм.НайтиСтроки(Новый Структура("Имя",ПечФорма.Представление));
					ИмяПринтераПеч="";
					ИмяПеч="";
					Если МасСтр.Количество()=1 Тогда
						ИмяПринтераПеч=МасСтр[0].ИмяПринтера;
						ИмяПеч=МасСтр[0].Представление;
						
					КонецЕсли;					
					
					Если ЗначениеЗаполнено(ИмяПринтераПеч) Тогда
						ТабДок.ИмяПринтера = ИмяПринтераПеч;
					КонецЕсли;	
					
					СписокПечатныхФорм.Добавить(ТабДок,?(ИмяПеч="",ПечФорма.Представление, ИмяПеч));
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 		
	
	//
	//
	//
	//Для Каждого ЭлементМассива Из МассивОрдеров Цикл
	//	
	//	Для Каждого ТекСтрока Из КомплектПечатныхФорм Цикл
	//		
	//		Если ТекСтрока.Печатать Тогда
	//			
	//			Если ТекСтрока.Имя = "РасходныйОрдер" Тогда
	//				
	//				ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_Товары(ЭлементМассива, Ложь);
	//				ТабДок.АвтоМасштаб 				= Истина;
	//				ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;	
	//				
	//				СписокПечатныхФорм.Добавить(ТабДок, "Расходный ордер");
	//				
	//			КонецЕсли;
	//			//АК БЕЛН 13.07.2016++
	//			Если ТекСтрока.Имя = "Приложение" Тогда
	//				                                                                                                         					                                                                                                         					
	//				//++ luza 11.07.2018 ИП-00019221    
	//				//ТабДок = Документы.РасходныйОрдерСклад.ПечатьРасходныйОрдер_ТоварыССертификатами(ЭлементМассива, Ложь);
	//				ТабДок = Документы.РасходныйОрдерСклад.ПечатьПреложениеКНакладной_Пакет(ЭлементМассива);
	//				//-- luza 11.07.2018 ИП-00019221    				
	//				
	//				
	//				ТабДок.АвтоМасштаб 				= Истина;
	//				ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;
	//				
	//				СписокПечатныхФорм.Добавить(ТабДок, "Приложение");
	//				
	//			КонецЕсли;
	//			//АК БЕЛН 13.07.2016--
	//			
	//			Если ТекСтрока.Имя = "ТТН"
	//					ИЛИ ТекСтрока.Имя = "ТТНсПодписями" Тогда
	//			
	//                ТабличныйДокумент = ПечатьТТН(МассивОрдеров, ТекСтрока.Имя = "ТТНсПодписями");
	//				ТабличныйДокумент.АвтоМасштаб 			= Истина;
	//				ТабличныйДокумент.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;
	//				
	//				СписокПечатныхФорм.Добавить(ТабличныйДокумент, "ТТН" + ?(ТекСтрока.Имя = "ТТНсПодписями", " с подписями", ""));
	//				
	//			КонецЕсли;
	//			
	//			Если ТекСтрока.Имя = "Накладная" Тогда
	//				
	//				МассивДок = Новый Массив;
	//				МассивДок.Добавить(ЭлементМассива);
	//				
	//				ВыборкаДокумент = ПолучитьВыборкуПоТоварам(МассивДок).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//				
	//				Пока ВыборкаДокумент.Следующий() Цикл
	//					
	//					СсылкаНаДокумент = ВыборкаДокумент.Ссылка;
	//					
	//					ВыборкаОрганизации = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//					Пока ВыборкаОрганизации.Следующий()Цикл
	//						
	//						ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
	//						
	//						МассивТоваровТОРГ12 = Новый Массив;
	//						МассивТоваровМ11 	= Новый Массив;
	//						
	//						Организация 			= ВыборкаОрганизации.Организация;
	//						
	//						//+++АК KIRN 2018.04.11 ИП-00018209         
	//						ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
	//						Если ЭтоВнешняяОрганизация Тогда
	//							мсДокиДляРТУ.Добавить(СсылкаНаДокумент);
	//						КонецЕСли;
	//						//---АК KIRN 
	//						
	//						ОрганизацияПолучатель 	= РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ВыборкаОрганизации.ДатаРегистратора,
	//																							Новый Структура("СтруктурнаяЕдиница", ВыборкаОрганизации.Получатель)).Организация;
	//						//ОрганизацияПолучатель = ВыборкаОрганизации.ОрганизацияПолучатель;
	//						Если НЕ ЗначениеЗаполнено(ОрганизацияПолучатель)Тогда
	//							ОрганизацияПолучатель = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	//						КонецЕсли;
	//						
	//						Пока ВыборкаНоменклатура.Следующий() Цикл
	//							
	//							Если Организация = ОрганизацияПолучатель Тогда
	//								//+++АК KIRN 2018.04.11 ИП-00018209       
	//								Если ЭтоВнешняяОрганизация Тогда
	//									МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
	//								Иначе
	//									МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
	//								КонецЕСли;
	//								//МассивТоваровМ11.Добавить(ВыборкаНоменклатура.Номенклатура);
	//								//---АК KIRN 
	//								
	//							Иначе
	//								МассивТоваровТОРГ12.Добавить(ВыборкаНоменклатура.Номенклатура);
	//							КонецЕсли;
	//							
	//						КонецЦикла;
	//						
	//						//// Печать М11
	//						//Если МассивТоваровМ11.Количество()Тогда
	//						//	
	//						//	ТабДок = ПечатьМ11(СсылкаНаДокумент, МассивТоваровМ11, Организация);
	//						//	ТабДок.АвтоМасштаб = Истина;
	//						//	ТабДок.КоличествоЭкземпляров = ТекСтрока.Экземпляров;
	//						//	
	//						//	СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
	//						//	
	//						//КонецЕсли;
	//						
	//						// Печать Торг-13
	//						Если МассивТоваровМ11.Количество() Тогда
	//							
	//							ТабДок = Документы.РасходныйОрдерСклад.ПечатьТОРГ13(СсылкаНаДокумент, МассивТоваровМ11);
	//							ТабДок.АвтоМасштаб 				= Истина;
	//							ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
	//							Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//								ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//							КонецЕсли;
	//							
	//							СписокПечатныхФорм.Добавить(ТабДок, "Требование-накладная");
	//							
	//						КонецЕсли;
	//						
	//						// Печать ТОРГ12
	//						Если МассивТоваровТОРГ12.Количество() Тогда
	//							
	//							//+++АК KIRN 2018.05.03  							
	//							//ТабДок = ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваровТОРГ12, Организация);
	//							//ТабДок.АвтоМасштаб 				= Истина;
	//							//ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
	//							//Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//							//	ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//							//КонецЕсли;
	//							//
	//							//СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
	//							//---АК KIRN 
	//							
	//						КонецЕсли;
	//						
	//					КонецЦикла;
	//					
	//				КонецЦикла;
	//				
	//				//+++АК KIRN 2018.04.11  
	//				Если мсДокиДляРТУ.Количество()>0 ТОгда
	//					мсРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДокиДляРТУ);
	//					ДЛя Каждого РТУ из мсРТУ цикл
	//						ЗначениеРТУ = мсДокиРТУВсе.Найти(РТУ);
	//						Если ЗначениеЗаполнено(ЗначениеРТУ) Тогда
	//							Продолжить;
	//						Иначе
	//							мсДокиРТУВсе.Добавить(РТУ);								
	//						КонецЕСли;
	//						
	//						Если НЕ ЗначениеЗаполнено(РТУ) ТОгда
	//							Сообщить("Запись реализации не выполнена!");
	//							Продолжить;
	//						Иначе
	//							
	//							Если НЕ РТУ.Проведен Тогда
	//								Попытка
	//									Об = РТУ.ПолучитьОбъект();
	//									Об.Записать(РежимЗаписиДокумента.Проведение);
	//								Исключение
	//								КонецПопытки;
	//							КонецЕСли;
	//						КонецЕСли;
	//						
	//						ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(РТУ);
	//						ТабДок.АвтоМасштаб 				= Истина;
	//						ТабДок.КоличествоЭкземпляров 	= ТекСтрока.Экземпляров;
	//						Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//							ТабДок.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//						КонецЕсли;
	//						
	//						СписокПечатныхФорм.Добавить(ТабДок, "ТОРГ-12");
	//					КонецЦикла;
	//					
	//					мсДокиДляРТУ.Очистить();
	//				КонецЕСли;
	//				//---АК KIRN 
	
	//			КонецЕсли;
	//			Если ТекСтрока.Имя = "Сертификат" Тогда
	//			
	//				//ТабДокСертификат = Новый ТабличныйДокумент;
	//				//ТабДокСертификат.Показать();
	//				МассивДокумента = Новый Массив;
	//				МассивДокумента.Добавить(ЭлементМассива);
	//				ТабДокСертификат = Документы.РасходныйОрдерСклад.ПечатьНовыхСертификатов(МассивДокумента);
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабДокСертификат.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;
	//				//
	//				Если НЕ ТабДокСертификат = Неопределено Тогда
	//					СписокПечатныхФорм.Добавить(ТабДокСертификат, "Сертификаты"); 
	//				КонецЕсли;
	//				//бДокСертификат..Показать();	
	//			КонецЕсли;
	//			
	//			//+++АК KIRN 2018.04.13 ИП-00018209^01 
	//			Если ТекСтрока.Имя = "ВсеСертификаты" Тогда
	//				
	//				//ТабДокСертификат = Новый ТабличныйДокумент;
	//				//ТабДокСертификат.Показать();
	//				МассивДокумента = Новый Массив;
	//				МассивДокумента.Добавить(ЭлементМассива);
	//				ТабДокСертификат = Документы.РасходныйОрдерСклад.ПечатьВсехСертификатов(МассивДокумента);
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабДокСертификат.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;
	//				//
	//				Если НЕ ТабДокСертификат = Неопределено Тогда
	//					СписокПечатныхФорм.Добавить(ТабДокСертификат, "Сертификаты"); 
	//				КонецЕсли;
	//				//бДокСертификат..Показать();	
	//			КонецЕсли;	
	//			//---АК KIRN 
	//			//+++АК BELN 2018.04.26 
	//			Если ТекСтрока.Имя = "Паллета"
	//				 Тогда
	//				Мас=Новый Массив; 
	//				Мас.Добавить(ЭлементМассива); 
	//				ТабличныйДокумент	= Документы.РасходныйОрдерСклад.ПечатьШКПаллеты(Мас,ПоНомеруТТ);
	//				Если ЗначениеЗаполнено(ТекСтрока.ИмяПринтера) Тогда
	//					ТабличныйДокумент.ИмяПринтера = ТекСтрока.ИмяПринтера;
	//				КонецЕсли;
	//				//
	//				Если НЕ ТабличныйДокумент = Неопределено Тогда
	//					СписокПечатныхФорм.Добавить(ТабличныйДокумент, "Паллета"); 
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//			//---АК BELN 2018.04.26 
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//---АК BELN 2018.07.17 
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ПолучитьВыборкуПоТоварам(МассивОрдеров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("Вкусвилл"		, Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	//Запрос.УстановитьПараметр("Луг", 			Справочники.Организации.НайтиПоРеквизиту("ИНН","7726660031"));
	//Запрос.УстановитьПараметр("СельскиеПродукты",	Справочники.Организации.НайтиПоРеквизиту("ИНН","7731626420"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура,
	//+++АК KIRN 2018.04.02 ИП-00018240
	//|	&Вкусвилл КАК Организация,
	|	ВЫБОР КОГДА МаршрутныйЛистРасходныеОрдера.Документ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяССылка) Тогда &Вкусвилл Иначе  МаршрутныйЛистРасходныеОрдера.Документ.Организация Конец КАК Организация,
	//---АК KIRN 
	|	ЛОЖЬ КАК ЭтоИсключение,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО Товары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|ГДЕ
	|	Товары.Ссылка В(&МассивОрдеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка КАК Ссылка,
	|	ВТ.Ссылка.Дата КАК ДатаРегистратора,
	|	ВТ.Номенклатура,
	|	ВТ.Получатель КАК Получатель,
	//+++АК SHEP 2018.10.04 ИП-00020060
	//+++АК SHEP 2018.10.05 ИП-00020071
	//|	ВЫРАЗИТЬ(ВТ.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипСтруктурнойЕдиницы В
	|		  (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница), ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСторонняяРозница,
	//---АК SHEP 2018.10.05
	//---АК SHEP 2018.10.04
	|	ВТ.Организация КАК Организация,
	|	ВТ.ЭтоИсключение
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ.МаршрутныйЛист,
	|	ВТ.Получатель.Код
	|ИТОГИ
	//+++АК SHEP 2018.10.04 ИП-00020060
	//+++АК SHEP 2018.10.05 ИП-00020071
	//|	МАКСИМУМ(ТипСтруктурнойЕдиницы),
	|	МАКСИМУМ(ЭтоСторонняяРозница),
	//---АК SHEP 2018.10.05
	//---АК SHEP 2018.10.04
	|	МАКСИМУМ(Получатель)
	|ПО
	|	Ссылка,
	|	Организация";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//2017-05-11 mind переделал печать, ниже новая процедура
Функция ПечатьТТН_(МассивОрдеров, СПодписью = Ложь)
	
	//
	ТабДокумент	= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_МаршрутныеЛисты_ТТН";
	
	Макет = Обработки.АК_ПечатьТТН.ПолучитьМакет("ТранспортнаяНакладная");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	
	ЗапросДатаИСтруктурнаяЕдиница = Новый Запрос;
	ЗапросДатаИСтруктурнаяЕдиница.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаМаршрутногоЛиста, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ КАК Ордер,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Сумма КАК Сумма,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель КАК Водитель,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Перевозчик КАК Перевозчик,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Номер КАК НомерМаршрутногоЛиста,
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛистРасходныеОрдера.Ссылка.Дата, ДЕНЬ) КАК ДатаМаршрутногоЛиста
	|ПОМЕСТИТЬ ВТРасходныеОрдера
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ В(&МассивОрдеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ордер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииОбъектов.Объект КАК МаршрутныйЛист,
	|	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	|	СпрФизическиеЛица.Ссылка КАК ФизЛицо
	|ПОМЕСТИТЬ ВТОператорыМаршрутныхЛистов
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасходныеОрдера КАК ВТРасходныеОрдера
	|		ПО (ВТРасходныеОрдера.МаршрутныйЛист = ВерсииОбъектов.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
	|		ПО (СпрФизическиеЛица.Ссылка = ВерсииОбъектов.АвторВерсии.ФизЛицо)
	|			И (СпрФизическиеЛица.Должность = ""Оператор""
	|				ИЛИ СпрФизическиеЛица.Должность = ""Старший оператор склада"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерСклад.Ссылка КАК Ссылка,
	|	ВТРасходныеОрдера.Сумма КАК Сумма,
	|	ВТРасходныеОрдера.Маршрут КАК Маршрут,
	|	ВТРасходныеОрдера.ДатаМаршрутногоЛиста,
	|	ВТРасходныеОрдера.НомерМаршрутногоЛиста КАК НомерМаршрутногоЛиста,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Автомобиль
	|		ИНАЧЕ ВТРасходныеОрдера.Автомобиль
	|	КОНЕЦ КАК Автомобиль,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Водитель = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Водитель
	|		ИНАЧЕ ВТРасходныеОрдера.Водитель
	|	КОНЕЦ КАК Водитель,
	|	РасходныйОрдерСклад.Получатель КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Автомобиль.Перевозчик
	|		ИНАЧЕ ВТРасходныеОрдера.Перевозчик
	|	КОНЕЦ КАК Перевозчик,
	|	ВТРасходныеОрдера.Ордер,
	|	ЕСТЬNULL(ВТОператорыМаршрутныхЛистов.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Оператор
	|ПОМЕСТИТЬ БазоваяИнформация
	|ИЗ
	|	ВТРасходныеОрдера КАК ВТРасходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ПО ВТРасходныеОрдера.Ордер = РасходныйОрдерСклад.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТОператорыМаршрутныхЛистов.МаршрутныйЛист КАК МаршрутныйЛист,
	|			ВТОператорыМаршрутныхЛистов.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			ВТОператорыМаршрутныхЛистов КАК ВТОператорыМаршрутныхЛистов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВТОператорыМаршрутныхЛистов.МаршрутныйЛист КАК МаршрутныйЛист,
	|					МАКСИМУМ(ВТОператорыМаршрутныхЛистов.НомерВерсии) КАК НомерВерсии
	|				ИЗ
	|					ВТОператорыМаршрутныхЛистов КАК ВТОператорыМаршрутныхЛистов
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВТОператорыМаршрутныхЛистов.МаршрутныйЛист) КАК МаксНомераВерсий
	|				ПО (МаксНомераВерсий.МаршрутныйЛист = ВТОператорыМаршрутныхЛистов.МаршрутныйЛист)
	|					И (МаксНомераВерсий.НомерВерсии = ВТОператорыМаршрутныхЛистов.НомерВерсии)) КАК ВТОператорыМаршрутныхЛистов
	|		ПО (ВТОператорыМаршрутныхЛистов.МаршрутныйЛист = ВТРасходныеОрдера.МаршрутныйЛист)
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивОрдеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(БазоваяИнформация.Перевозчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Перевозчик,
	|	ЕСТЬNULL(БазоваяИнформация.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль,
	|	ЕСТЬNULL(БазоваяИнформация.Водитель, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)) КАК Водитель,
	|	БазоваяИнформация.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес, 0) * РасходныйОрдерСкладТовары.Количество КАК Вес
	|ПОМЕСТИТЬ ВТСлужебная
	|ИЗ
	|	БазоваяИнформация КАК БазоваяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ПО БазоваяИнформация.Ссылка = РасходныйОрдерСкладТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСлужебная.Перевозчик КАК Перевозчик,
	|	ВТСлужебная.Автомобиль КАК Автомобиль,
	|	ВТСлужебная.Водитель КАК Водитель,
	|	ВТСлужебная.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	ВТСлужебная.ГруппаТоваров КАК ГруппаТоваров
	|ПОМЕСТИТЬ ВыборкаТоваров
	|ИЗ
	|	ВТСлужебная КАК ВТСлужебная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазоваяИнформация.НомерМаршрутногоЛиста КАК НомерМаршрутногоЛиста,
	|	БазоваяИнформация.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	БазоваяИнформация.Перевозчик КАК Перевозчик,
	|	БазоваяИнформация.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	БазоваяИнформация.Маршрут КАК Маршрут,
	|	БазоваяИнформация.Водитель КАК Водитель,
	|	БазоваяИнформация.Автомобиль КАК Автомобиль,
	|	БазоваяИнформация.Ссылка КАК РасходныйОрдер,
	|	БазоваяИнформация.Оператор КАК Оператор,
	|	БазоваяИнформация.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВТСлужебная.Вес, 0) КАК Вес
	|ИЗ
	|	БазоваяИнформация КАК БазоваяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТСлужебная.Ссылка КАК Ссылка,
	|			СУММА(ВТСлужебная.Вес) КАК Вес
	|		ИЗ
	|			ВТСлужебная КАК ВТСлужебная
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТСлужебная.Ссылка) КАК ВТСлужебная
	|		ПО (ВТСлужебная.Ссылка = БазоваяИнформация.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаМаршрутногоЛиста,
	|	Перевозчик,
	|	Водитель,
	|	Автомобиль
	|ИТОГИ
	|	МАКСИМУМ(Маршрут),
	|	МАКСИМУМ(Оператор)
	|ПО
	|	ДатаМаршрутногоЛиста,
	|	НомерМаршрутногоЛиста,
	|	Перевозчик,
	|	СтруктурнаяЕдиница,
	|	Водитель,
	|	Автомобиль";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДатаМаршрутногоЛиста = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	мЮрЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Если СПодписью Тогда
		КартинкаПодписьКривенко 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович")).Получить();
		КартинкаПодписьФарафонов 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович")).Получить();
	КонецЕсли;
	ОрганизацияВкусВилл 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ОрганизацияЛугДаПоле 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Пока ВыборкаДатаМаршрутногоЛиста.Следующий() Цикл
		
		мДатаТТН = ВыборкаДатаМаршрутногоЛиста.ДатаМаршрутногоЛиста;
		ДатаНаПечать = Формат(мДатаТТН, "ДФ=""дд.ММ.гг""");
		
		
		ВыборкаНомерМаршрутногоЛиста = ВыборкаДатаМаршрутногоЛиста.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерМаршрутногоЛиста.Следующий() Цикл
			
			ТекстНомераТТН = "";
			Если ЗначениеЗаполнено(ВыборкаНомерМаршрутногоЛиста.НомерМаршрутногоЛиста) Тогда
				ТекстНомераТТН = ПреобразоватьНомерДокВТекстНомераТТН(ВыборкаНомерМаршрутногоЛиста.НомерМаршрутногоЛиста);
			КонецЕсли;
			
			ТекОператор = ВыборкаНомерМаршрутногоЛиста.Оператор;
			ТекМаршрут 	= ВыборкаНомерМаршрутногоЛиста.Маршрут;
			
			ВыборкаПеревозчик = ВыборкаНомерМаршрутногоЛиста.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПеревозчик.Следующий() Цикл
				
				ТекПеревозчик = ВыборкаПеревозчик.Перевозчик;
				Если НЕ ЗначениеЗаполнено(ТекПеревозчик) тогда
					ТекПеревозчик = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;
				Если ТекПеревозчик.ЮрФизЛицо = мЮрЛицо Тогда
					ТекИсполнитель 		= СокрЛП(ТекПеревозчик.ГенеральныйДиректор);
					ЮрАдресПеревозчика 	= ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(ТекПеревозчик, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				Иначе
					ТекИсполнитель 		= СокрЛП(ТекПеревозчик.Наименование);
					ЮрАдресПеревозчика 	= ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(ТекПеревозчик, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				КонецЕсли;
				
				ВыборкаСтруктурнаяЕдиница = ВыборкаПеревозчик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
					
					ЗапросДатаИСтруктурнаяЕдиница.УстановитьПараметр("ДатаМаршрутногоЛиста"	, мДатаТТН);
					ЗапросДатаИСтруктурнаяЕдиница.УстановитьПараметр("СтруктурнаяЕдиница"		, ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница);
					Результат = ЗапросДатаИСтруктурнаяЕдиница.Выполнить();
					ВыборкаОрганизации = Результат.Выбрать();
					Если ВыборкаОрганизации.Следующий() Тогда
						ОрганизацияПолучатель = ВыборкаОрганизации.Организация;
					иначе                      
						ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
					КонецЕсли;
					
					СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияПолучатель, мДатаТТН);
					мТекстГрузоотправителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
					СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
					мТекстГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
					СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
					
					ВыборкаВодитель = ВыборкаСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВодитель.Следующий() Цикл
						
						ТекВодитель = ВыборкаВодитель.Водитель;
						
						ВыборкаАвтомобиль = ВыборкаВодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаАвтомобиль.Следующий() Цикл
							
							ТекАвтомобиль = ВыборкаАвтомобиль.Автомобиль;
							
							// получим выборку групп, используя временную таблицу
							Запрос.УстановитьПараметр("ДатаМаршрутногоЛиста", мДатаТТН);
							Запрос.УстановитьПараметр("Автомобиль"			, ТекАвтомобиль);
							Запрос.УстановитьПараметр("Водитель"			, ТекВодитель);
							Запрос.УстановитьПараметр("Перевозчик"			, ТекПеревозчик);
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	ВыборкаТоваров.ГруппаТоваров КАК ГруппаТоваров
							//|	ВыборкаТоваров.Перевозчик,
							//|	ВыборкаТоваров.Автомобиль,
							//|	ВыборкаТоваров.Водитель,
							//|	ВыборкаТоваров.ДатаМаршрутногоЛиста,
							//|	ВыборкаТоваров.Вес
							|ИЗ
							|	ВыборкаТоваров КАК ВыборкаТоваров
							|ГДЕ
							|	ВыборкаТоваров.Перевозчик = &Перевозчик
							|	И ВыборкаТоваров.Автомобиль = &Автомобиль
							|	И ВыборкаТоваров.Водитель = &Водитель
							|	И ВыборкаТоваров.ДатаМаршрутногоЛиста = &ДатаМаршрутногоЛиста
							|
							|УПОРЯДОЧИТЬ ПО
							|	ГруппаТоваров
							|АВТОУПОРЯДОЧИВАНИЕ";
							
							СтрокаГрупп = "";
							обВес = 0;
							ВыборкаГруппТоваров = Запрос.Выполнить().Выбрать();
							Пока ВыборкаГруппТоваров.Следующий() Цикл
								СтрокаГрупп = СтрокаГрупп + "; " + ВыборкаГруппТоваров.ГруппаТоваров;
							КонецЦикла;
							
							Если НЕ СтрокаГрупп = "" Тогда
								СтрокаГрупп = Сред(СтрокаГрупп, 3);
							КонецЕсли;							
							
							ТекстОрдеров = "";
							ТекСумма = 0;
							МассивОрдеров = Новый Массив;
							
							ВыборкаДетальныеЗаписи = ВыборкаАвтомобиль.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								ТекстОрдеров = ТекстОрдеров + "; " + ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаДетальныеЗаписи.РасходныйОрдер) + " от " + ДатаНаПечать;
								МассивОрдеров.Добавить(ВыборкаДетальныеЗаписи.РасходныйОрдер);
								ТекСумма = ТекСумма + ВыборкаДетальныеЗаписи.Сумма;
								обВес = обВес + ВыборкаДетальныеЗаписи.Вес;
							КонецЦикла;
							Если НЕ ТекстОрдеров = "" Тогда
								ТекстОрдеров = Сред(ТекстОрдеров, 3);
							КонецЕсли;
							
							//
							ОбластьМакета.Параметры.ДатаТТН 			= ДатаНаПечать;
							ОбластьМакета.Параметры.НомерТТН 			= ТекстНомераТТН;
							ОбластьМакета.Параметры.Маршрут 			= ?(ЗначениеЗаполнено(ТекМаршрут), СокрЛП(ТекМаршрут.Наименование), "");
							ОбластьМакета.Параметры.Грузополучатель 	= мТекстГрузополучателя;
							//ОбластьМакета.Параметры.НаименованиеГруза 	= СтрокаГрупп;
							ОбластьМакета.Параметры.НаименованиеГруза 	= "Согласно накладных: " + ТекстОрдеров + ".";
							ОбластьМакета.Параметры.ПереченьДокументов 	= "Накладные: " + ТекстОрдеров + ".";
							ОбластьМакета.Параметры.Грузоотправитель	= мТекстГрузоотправителя;
							
							ПечПеревозчик = СокрЛП(ТекПеревозчик.Наименование);
							Если ЮрАдресПеревозчика.Свойство("Представление") Тогда
								ПечПеревозчик = ПечПеревозчик + ?(СокрЛП(ЮрАдресПеревозчика.Представление) = "", "", "; " + СокрЛП(ЮрАдресПеревозчика.Представление));
							КонецЕсли;								
							ОбластьМакета.Параметры.Перевозчик 			= ПечПеревозчик;
							
							ОбластьМакета.Параметры.Дата_ПриемГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 09:00";
							ОбластьМакета.Параметры.ДатаПрибытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 08:50";
							ОбластьМакета.Параметры.ДатаУбытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:20";
							ОбластьМакета.Параметры.Дата_СдачаГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 10:00";
							ОбластьМакета.Параметры.ДатаПрибытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:50";
							ОбластьМакета.Параметры.ДатаУбытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 10:20";
							ОбластьМакета.Параметры.ДатаПринятияКИсполнению	= Формат(мДатаТТН - 2 * 86400, "ДЛФ=Д");
							ОбластьМакета.Параметры.МассаГруза				= Формат(обВес, "ЧГ=") + " кг";
							ОбластьМакета.Параметры.Исполнитель				= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекИсполнитель);
							
							ОбластьМакета.Параметры.НадписьОператор				= "Оператор";
							ОбластьМакета.Параметры.НадписьПродавецКонсультант	= "Продавец-консультант";
							Если ЗначениеЗаполнено(ТекОператор) Тогда
								ОбластьМакета.Параметры.Оператор				= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекОператор);
								ОбластьМакета.Параметры.Грузоотправитель16_1	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекОператор);
								ОбластьМакета.Рисунки.Очистить();
								ПодписьОператора = ОбщегоНазначения.ПолучитьПодписьФизлица(ТекОператор).Получить();
								Если ТипЗнч(ПодписьОператора) = Тип("Картинка") Тогда
									РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
									РисунокПодписи.Расположить(ОбластьМакета.Область(44, 3, 44, 4));
									РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
									РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
									РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
									РисунокПодписи.Картинка 	= ПодписьОператора;
									РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
									РисунокПодписи.Расположить(ОбластьМакета.Область(105, 11, 107, 12));
									РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
									РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
									РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
									РисунокПодписи.Картинка 	= ПодписьОператора;
								КонецЕсли;
							КонецЕсли;
							
							Адреса = Документы.АктПеревозчика.ПолучитьТекстыАдресов(МассивОрдеров);
							ОбластьМакета.Параметры.Заполнить(Адреса);
							
							ИмяВодителя = СокрЛП(ТекВодитель.Наименование);
							ОбластьМакета.Параметры.Водитель 			= "";//ИмяВодителя;
							//ОбластьМакета.Параметры.ГосНомерАвтомобиля 	= СокрЛП(ТекАвтомобиль.Наименование);
							ОбластьМакета.Параметры.Автомобиль 			= СокрЛП(ТекАвтомобиль.Марка) +
							?(ТекАвтомобиль.Тоннаж > 0, ", " + Формат(Окр(ТекАвтомобиль.Тоннаж, 1), "ЧГ=") + "т", "");
							
							//ТекСтавкаНДС = ?(НЕ ТекМаршрут = Неопределено, УчетНДС.ПолучитьСтавкуНДС(ТекМаршрут.СтавкаНДС), 0);
							//Если НЕ ТекСумма = 0 Тогда
							//	ОбластьМакета.Параметры.Стоимость = Строка(ТекСумма +
							//		?((НЕ ТекМаршрут = Неопределено)
							//				И ТекМаршрут.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,
							//			УчетНДС.РассчитатьСуммуНДС(ТекСумма, Истина, Ложь, ТекСтавкаНДС), 0)) + 
							//		?((НЕ ТекМаршрут = Неопределено) И НЕ ТекСтавкаНДС = 0, ", в т.ч. НДС " + Строка(ТекСтавкаНДС) + "%", "");
							//Иначе
							ОбластьМакета.Параметры.Стоимость = "";	
							//КонецЕсли;
							
							//ОбластьМакета.Параметры.Руководитель 		= ОбщегоНазначения.ФамилияИнициалыФизЛица(СокрЛП(ОрганизацияПолучатель.ГенеральныйДиректор));
							ОбластьМакета.Параметры.ДатаТТН 			= ДатаНаПечать;
							
							ТабДокумент.Вывести(ОбластьМакета);
							
							ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
	//// группы товаров
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекДата"				, ТекущаяДата());
	//Запрос.УстановитьПараметр("МассивДокументов"	, МассивОрдеров);
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТТ,
	//|	РасходныйОрдерСкладТовары.Ссылка.Перевозчик КАК Перевозчик,
	//|	РасходныйОрдерСкладТовары.Ссылка.Водитель КАК Водитель,
	//|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|ГДЕ
	//|	РасходныйОрдерСкладТовары.Ссылка В(&МассивДокументов)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РасходныйОрдерСклад.Получатель КАК ТТ,
	//|	РасходныйОрдерСклад.Перевозчик КАК Перевозчик,
	//|	РасходныйОрдерСклад.Водитель КАК Водитель,
	//|	ЦФОСтруктурныхЕдиниц.Организация КАК ОрганизацияТТ,
	//|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
	//|	РасходныйОрдерСклад.Дата КАК Дата
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, ) КАК ЦФОСтруктурныхЕдиниц
	//|		ПО (ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница = РасходныйОрдерСклад.Получатель)
	//|ГДЕ
	//|	РасходныйОрдерСклад.Ссылка В(&МассивДокументов)
	//|	И НЕ ЦФОСтруктурныхЕдиниц.Организация ЕСТЬ NULL 
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	РасходныйОрдерСклад.Номер
	//|ИТОГИ
	//|	МАКСИМУМ(ОрганизацияТТ),
	//|	МАКСИМУМ(Дата)
	//|ПО
	//|	ТТ,
	//|	Перевозчик,
	//|	Водитель";
	////|	И РасходныйОрдерСклад.Склад.Владелец.Организация = &Организация";
	//
	//РезультатыЗапроса = Запрос.ВыполнитьПакет();
	//ТаблицаГруппТоваров = РезультатыЗапроса[0].Выгрузить();
	//
	//
	//Если СПодписью Тогда
	//	КартинкаПодписьКривенко 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович")).Получить();
	//	КартинкаПодписьФарафонов 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович")).Получить();
	//КонецЕсли;
	//ОрганизацияВкусВилл 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	//ОрганизацияЛугДаПоле 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	//
	//СтруктураОтбора = Новый Структура("ТТ, Перевозчик, Водитель");
	////ДатаНаПечать = Формат(ЭтотОбъект.ДатаТТН, "ДФ=""дд.ММ.гг""");
	//
	//Макет = Обработки.МаршрутныеЛисты.ПолучитьМакет("ТТН");
	//ОбластьМакета1 = Макет.ПолучитьОбласть("Страница1");
	//ОбластьМакета2 = Макет.ПолучитьОбласть("Страница2");
	//
	//ВыборкаПоТТ = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТТ");
	//Пока ВыборкаПоТТ.Следующий() Цикл
	//	
	//	ТекТТ = ВыборкаПоТТ.ТТ;
	//	
	//	ВыборкаПоПеревозчикам = ВыборкаПоТТ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Перевозчик");
	//	Пока ВыборкаПоПеревозчикам.Следующий() Цикл
	//		
	//		ТекПеревозчик = ВыборкаПоПеревозчикам.Перевозчик;
	//		
	//		ВыборкаПоВодителям = ВыборкаПоПеревозчикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Водитель");
	//		Пока ВыборкаПоВодителям.Следующий() Цикл
	//			
	//			ТекВодитель 		= ВыборкаПоВодителям.Водитель;
	//			ТекОрганизацияТТ 	= ВыборкаПоВодителям.ОрганизацияТТ;				
	//			ДатаНаПечать 		= Формат(ВыборкаПоВодителям.Дата, "ДФ=""дд.ММ.гг""");
	//			
	//			//+++ak golv
	//			ЭтоЛугДаПоле 	= (ТекОрганизацияТТ = ОрганизацияЛугДаПоле);
	//			ЭтоВкусВилл 	= (ТекОрганизацияТТ = ОрганизацияВкусВилл);
	//			Если ЭтоЛугДаПоле Тогда
	//				ПодписьДиректора = КартинкаПодписьКривенко;
	//			ИначеЕсли ЭтоВкусВилл Тогда
	//				ПодписьДиректора = КартинкаПодписьФарафонов;
	//			КонецЕсли;				
	//			
	//			//ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(ЭтотОбъект.Организация.ГенеральныйДиректор).Получить();
	//			//---ak golv				
	//			
	//			//
	//			ТабДокумент = Новый ТабличныйДокумент;
	//			
	//			// Страница 1
	//			ОбластьМакета1.Параметры.ДатаТТН = ДатаНаПечать;
	//			
	//			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекОрганизацияТТ, ВыборкаПоВодителям.Дата);
	//			ОбластьМакета1.Параметры.Грузоотправитель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
	//													СведенияОбОрганизации, "НаименованиеСокращенное,ФактическийАдрес,Телефоны");
	//			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекОрганизацияТТ, ВыборкаПоВодителям.Дата);
	//			ОбластьМакета1.Параметры.Грузополучатель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
	//													СведенияОбОрганизации, "НаименованиеСокращенное,ФактическийАдрес,Телефоны");
	//			
	//			СтруктураОтбора.ТТ 			= ТекТТ;
	//			СтруктураОтбора.Перевозчик 	= ТекПеревозчик;
	//			СтруктураОтбора.Водитель 	= ТекВодитель;
	//			СтрокиТаблицыГрупп = ТаблицаГруппТоваров.НайтиСтроки(СтруктураОтбора);
	//			СтрокаГрупп = "";
	//			Для Каждого СтрокаТаблицы Из СтрокиТаблицыГрупп Цикл
	//				СтрокаГрупп = СтрокаГрупп + "; " + СокрЛП(СтрокаТаблицы.ГруппаТоваров);
	//			КонецЦикла;
	//			Если НЕ СтрокаГрупп = "" Тогда
	//				СтрокаГрупп = Сред(СтрокаГрупп, 3);
	//			КонецЕсли;
	//			ОбластьМакета1.Параметры.НаименованиеГруза = СтрокаГрупп;
	//			
	//			ТекстОрдеров 	= "";
	//			МассивОрдеров 	= Новый Массив;
	//			Выборка = ВыборкаПоВодителям.Выбрать();
	//			Пока Выборка.Следующий() Цикл
	//				ТекстОрдеров = ТекстОрдеров + "; " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.РасходныйОрдер) + " от " + Формат(Выборка.Дата, "ДФ=""дд.ММ.гг""");
	//				МассивОрдеров.Добавить(Выборка.РасходныйОрдер);											
	//			КонецЦикла;
	//			Если НЕ ТекстОрдеров = "" Тогда
	//				ТекстОрдеров = Сред(ТекстОрдеров, 3);
	//			КонецЕсли;
	//			Адреса = Документы.АктПеревозчика.ПолучитьТекстыАдресов(МассивОрдеров);
	//			ОбластьМакета1.Параметры.Заполнить(Адреса);				
	//			ОбластьМакета1.Параметры.ПереченьДокументов = "Накладные: " + ТекстОрдеров + ".";
	//			ТабДокумент.Вывести(ОбластьМакета1);
	//			
	//			// Страница 2
	//			ИмяВодителя = СокрЛП(ТекВодитель.Наименование);
	//			ОбластьМакета2.Параметры.Перевозчик 	= СокрЛП(ТекПеревозчик.Наименование);
	//			ОбластьМакета2.Параметры.Водитель 		= ИмяВодителя;
	//			ОбластьМакета2.Параметры.Руководитель 	=
	//								ОбщегоНазначения.ФамилияИнициалыФизЛица(СокрЛП(ТекОрганизацияТТ.ГенеральныйДиректор));
	//			ОбластьМакета2.Параметры.ФИОВодителя 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ИмяВодителя);
	//			ОбластьМакета2.Параметры.ДатаТТН 		= ДатаНаПечать;
	//			
	//			Если СПодписью
	//					И (ЭтоЛугДаПоле
	//						ИЛИ ЭтоВкусВилл)
	//					И ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
	//				//+++ak golv
	//				ОбластьМакета2.Рисунки.Очистить();
	//				//---ak golv
	//				РисунокПодписи = ОбластьМакета2.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	//				РисунокПодписи.Расположить(ОбластьМакета2.Область(40, 11, 42, 13));
	//				РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
	//				РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
	//				РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	//				РисунокПодписи.Картинка 	= ПодписьДиректора;
	//			КонецЕсли;
	//			
	//			
	//			ТабДокумент.Вывести(ОбластьМакета2);
	//			
	//			//ТабДокумент.АвтоМасштаб = Истина;			
	//			//ТабДокумент.Показать("Печать ТТН");
	//			
	//			Возврат ТабДокумент;
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;	
	
КонецФункции

Функция ПечатьТТН(МассивОрдеров, СПодписью = Ложь,Пакетная=Ложь)
	
	//
	ТабДокумент	= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_МаршрутныеЛисты_ТТН";
	
	Макет = Обработки.АК_ПечатьТТН.ПолучитьМакет("ТранспортнаяНакладная");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	//ЗапросДатаИСтруктурнаяЕдиница = Новый Запрос;
	//ЗапросДатаИСтруктурнаяЕдиница.Текст = 
	//"ВЫБРАТЬ
	//|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	//|ИЗ
	//|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаМаршрутногоЛиста, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	ЗапросДатаИСтруктурнаяЕдиница = Новый Запрос;
	ЗапросДатаИСтруктурнаяЕдиница.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцовСрезПоследних.Период КАК Период,
	|	ТабельРаботыПродавцовСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТТабель
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов.СрезПоследних(&ДатаМаршрутногоЛиста, ) КАК ТабельРаботыПродавцовСрезПоследних
	|ГДЕ
	|	ТабельРаботыПродавцовСрезПоследних.ТорговаяТочка = &СтруктурнаяЕдиница
	|	И ТабельРаботыПродавцовСрезПоследних.СвойствоПродавца = 2
	|	И ТабельРаботыПродавцовСрезПоследних.Отсутствие = ЗНАЧЕНИЕ(Перечисление.ВидыОтсутствия.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаМаршрутногоЛиста, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТТабель.Сотрудник) КАК Сотрудник
	|ИЗ
	|	ВТТабель КАК ВТТабель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВТТабель.Период) КАК Период
	|		ИЗ
	|			ВТТабель КАК ВТТабель) КАК ВТТабель2
	|		ПО (ВТТабель2.Период = ВТТабель.Период)";
	
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ КАК Ордер,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Оператор.ФизЛицо КАК ФизЛицо,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Сумма КАК Сумма,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель КАК Водитель,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Перевозчик КАК Перевозчик,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Номер КАК НомерМаршрутногоЛиста,
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛистРасходныеОрдера.Ссылка.Дата, ДЕНЬ) КАК ДатаМаршрутногоЛиста,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК МаршрутПорядокСортировки,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование КАК МаршрутНаименование
	|ПОМЕСТИТЬ ВТРасходныеОрдера
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ В(&МассивОрдеров)
	|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ордер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерСклад.Ссылка КАК Ссылка,
	|	ВТРасходныеОрдера.Сумма КАК Сумма,
	|	ВТРасходныеОрдера.Маршрут КАК Маршрут,
	|	ВТРасходныеОрдера.ДатаМаршрутногоЛиста,
	|	ВТРасходныеОрдера.МаршрутПорядокСортировки,
	|	ВТРасходныеОрдера.МаршрутНаименование,
	|	РасходныйОрдерСклад.Получатель.Код КАК ПолучательКод,
	|	ВТРасходныеОрдера.НомерМаршрутногоЛиста КАК НомерМаршрутногоЛиста,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Автомобиль
	|		ИНАЧЕ ВТРасходныеОрдера.Автомобиль
	|	КОНЕЦ КАК Автомобиль,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Водитель = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Водитель
	|		ИНАЧЕ ВТРасходныеОрдера.Водитель
	|	КОНЕЦ КАК Водитель,
	|	РасходныйОрдерСклад.Получатель КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ВТРасходныеОрдера.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Автомобиль.Перевозчик
	|		ИНАЧЕ ВТРасходныеОрдера.Перевозчик
	|	КОНЕЦ КАК Перевозчик,
	|	ВТРасходныеОрдера.Ордер,
	|	ЕСТЬNULL(ВТРасходныеОрдера.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Оператор
	|ПОМЕСТИТЬ БазоваяИнформация
	|ИЗ
	|	ВТРасходныеОрдера КАК ВТРасходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ПО ВТРасходныеОрдера.Ордер = РасходныйОрдерСклад.Ссылка
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивОрдеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(БазоваяИнформация.Перевозчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Перевозчик,
	|	ЕСТЬNULL(БазоваяИнформация.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль,
	|	ЕСТЬNULL(БазоваяИнформация.Водитель, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.ПустаяСсылка)) КАК Водитель,
	|	БазоваяИнформация.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес, 0) * РасходныйОрдерСкладТовары.Количество КАК Вес
	|ПОМЕСТИТЬ ВТСлужебная
	|ИЗ
	|	БазоваяИнформация КАК БазоваяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ПО БазоваяИнформация.Ссылка = РасходныйОрдерСкладТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСлужебная.Перевозчик КАК Перевозчик,
	|	ВТСлужебная.Автомобиль КАК Автомобиль,
	|	ВТСлужебная.Водитель КАК Водитель,
	|	ВТСлужебная.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	ВТСлужебная.ГруппаТоваров КАК ГруппаТоваров
	|ПОМЕСТИТЬ ВыборкаТоваров
	|ИЗ
	|	ВТСлужебная КАК ВТСлужебная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазоваяИнформация.НомерМаршрутногоЛиста КАК НомерМаршрутногоЛиста,
	|	БазоваяИнформация.ДатаМаршрутногоЛиста КАК ДатаМаршрутногоЛиста,
	|	БазоваяИнформация.Перевозчик КАК Перевозчик,
	|	БазоваяИнформация.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	БазоваяИнформация.Маршрут КАК Маршрут,
	|	БазоваяИнформация.Водитель КАК Водитель,
	|	БазоваяИнформация.Автомобиль КАК Автомобиль,
	|	БазоваяИнформация.Ссылка КАК РасходныйОрдер,
	|	БазоваяИнформация.Оператор КАК Оператор,
	|	БазоваяИнформация.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВТСлужебная.Вес, 0) КАК Вес,
	|	БазоваяИнформация.МаршрутПорядокСортировки КАК МаршрутПорядокСортировки,
	|	БазоваяИнформация.МаршрутНаименование КАК МаршрутНаименование,
	|	БазоваяИнформация.ПолучательКод КАК ПолучательКод
	|ИЗ
	|	БазоваяИнформация КАК БазоваяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТСлужебная.Ссылка КАК Ссылка,
	|			СУММА(ВТСлужебная.Вес) КАК Вес
	|		ИЗ
	|			ВТСлужебная КАК ВТСлужебная
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТСлужебная.Ссылка) КАК ВТСлужебная
	|		ПО (ВТСлужебная.Ссылка = БазоваяИнформация.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутПорядокСортировки,
	|	МаршрутНаименование,
	|	ПолучательКод,
	|	Перевозчик,
	|	Водитель,
	|	Автомобиль
	|ИТОГИ
	|	МАКСИМУМ(Маршрут),
	|	МАКСИМУМ(Оператор)
	|ПО
	|	ДатаМаршрутногоЛиста,
	|	НомерМаршрутногоЛиста,
	|	Перевозчик,
	|	СтруктурнаяЕдиница,
	|	Водитель,
	|	Автомобиль";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДатаМаршрутногоЛиста = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	мЮрЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Если СПодписью Тогда
		КартинкаПодписьКривенко 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович")).Получить();
		КартинкаПодписьФарафонов 	= ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович")).Получить();
	КонецЕсли;
	ОрганизацияВкусВилл 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ОрганизацияЛугДаПоле 	= Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	//+++АК BELN 2018.07.17 ИП-00019201      
	Соот=Новый Соответствие;
	
	//---АК BELN 2018.07.17 
	
	Пока ВыборкаДатаМаршрутногоЛиста.Следующий() Цикл
		
		мДатаТТН = ВыборкаДатаМаршрутногоЛиста.ДатаМаршрутногоЛиста;
		ДатаНаПечать = Формат(мДатаТТН, "ДФ=""дд.ММ.гг""");
		
		
		ВыборкаНомерМаршрутногоЛиста = ВыборкаДатаМаршрутногоЛиста.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерМаршрутногоЛиста.Следующий() Цикл
			
			ТекстНомераТТН = "";
			Если ЗначениеЗаполнено(ВыборкаНомерМаршрутногоЛиста.НомерМаршрутногоЛиста) Тогда
				ТекстНомераТТН = ПреобразоватьНомерДокВТекстНомераТТН(ВыборкаНомерМаршрутногоЛиста.НомерМаршрутногоЛиста);
			КонецЕсли;
			
			ТекОператор = ВыборкаНомерМаршрутногоЛиста.Оператор;
			ТекМаршрут 	= ВыборкаНомерМаршрутногоЛиста.Маршрут;
			
			ВыборкаПеревозчик = ВыборкаНомерМаршрутногоЛиста.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПеревозчик.Следующий() Цикл
				
				ТекПеревозчик = ВыборкаПеревозчик.Перевозчик;
				Если НЕ ЗначениеЗаполнено(ТекПеревозчик) тогда
					ТекПеревозчик = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;
				Если ТекПеревозчик.ЮрФизЛицо = мЮрЛицо Тогда
					ТекИсполнитель 		= СокрЛП(ТекПеревозчик.ГенеральныйДиректор);
					ЮрАдресПеревозчика 	= ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(ТекПеревозчик, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				Иначе
					ТекИсполнитель 		= СокрЛП(ТекПеревозчик.Наименование);
					ЮрАдресПеревозчика 	= ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(ТекПеревозчик, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				КонецЕсли;
				
				ВыборкаСтруктурнаяЕдиница = ВыборкаПеревозчик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
					
					ЗапросДатаИСтруктурнаяЕдиница.УстановитьПараметр("ДатаМаршрутногоЛиста"	, мДатаТТН);
					ЗапросДатаИСтруктурнаяЕдиница.УстановитьПараметр("СтруктурнаяЕдиница"		, ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница);
					Результаты = ЗапросДатаИСтруктурнаяЕдиница.ВыполнитьПакет();
					ВыборкаОрганизации = Результаты[1].Выбрать();
					Если ВыборкаОрганизации.Следующий() Тогда
						ОрганизацияПолучатель = ВыборкаОрганизации.Организация;
					Иначе                      
						ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
					КонецЕсли;
					ВыборкаСтаршийПродавец = Результаты[2].Выбрать();
					Если ВыборкаСтаршийПродавец.Следующий() Тогда
						СтаршийПродавец = ВыборкаСтаршийПродавец.Сотрудник;
					Иначе                      
						СтаршийПродавец = Справочники.ФизическиеЛица.ПустаяСсылка();
					КонецЕсли;
					
					СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияПолучатель, мДатаТТН);
					
					мТекстГрузоотправителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
					СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
					
					//+++АК KIRN 2018.04.12 ИП-0001820
					СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница.КонтрагентСтороннейРозницы, мДатаТТН);
					
					Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(ОрганизацияПолучатель) ТОгда
						мТекстГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
					Иначе
						мТекстГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
						СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
					КонецЕСли;
					//---АК KIRN 
					
					
					//+++АК SHEP 2018.01.12 ИП-00017659
					мТекстГрузоотправителя15 = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
					СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,НомерСчета,Банк,КоррСчет,БИК");
					//---АК SHEP 2018.01.12
					
					ВыборкаВодитель = ВыборкаСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВодитель.Следующий() Цикл
						
						ТекВодитель = ВыборкаВодитель.Водитель;
						
						ВыборкаАвтомобиль = ВыборкаВодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаАвтомобиль.Следующий() Цикл
							
							ТекАвтомобиль = ВыборкаАвтомобиль.Автомобиль;
							
							// получим выборку групп, используя временную таблицу
							Запрос.УстановитьПараметр("ДатаМаршрутногоЛиста", мДатаТТН);
							Запрос.УстановитьПараметр("Автомобиль"			, ТекАвтомобиль);
							Запрос.УстановитьПараметр("Водитель"			, ТекВодитель);
							Запрос.УстановитьПараметр("Перевозчик"			, ТекПеревозчик);
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	ВыборкаТоваров.ГруппаТоваров КАК ГруппаТоваров
							//|	ВыборкаТоваров.Перевозчик,
							//|	ВыборкаТоваров.Автомобиль,
							//|	ВыборкаТоваров.Водитель,
							//|	ВыборкаТоваров.ДатаМаршрутногоЛиста,
							//|	ВыборкаТоваров.Вес
							|ИЗ
							|	ВыборкаТоваров КАК ВыборкаТоваров
							|ГДЕ
							|	ВыборкаТоваров.Перевозчик = &Перевозчик
							|	И ВыборкаТоваров.Автомобиль = &Автомобиль
							|	И ВыборкаТоваров.Водитель = &Водитель
							|	И ВыборкаТоваров.ДатаМаршрутногоЛиста = &ДатаМаршрутногоЛиста
							|
							|УПОРЯДОЧИТЬ ПО
							|	ГруппаТоваров
							|АВТОУПОРЯДОЧИВАНИЕ";
							
							СтрокаГрупп = "";
							обВес = 0;
							ВыборкаГруппТоваров = Запрос.Выполнить().Выбрать();
							Пока ВыборкаГруппТоваров.Следующий() Цикл
								СтрокаГрупп = СтрокаГрупп + "; " + ВыборкаГруппТоваров.ГруппаТоваров;
							КонецЦикла;
							
							Если НЕ СтрокаГрупп = "" Тогда
								СтрокаГрупп = Сред(СтрокаГрупп, 3);
							КонецЕсли;							
							
							ТекстОрдеров = "";
							ТекСумма = 0;
							МассивОрдеров = Новый Массив;
							
							ВыборкаДетальныеЗаписи = ВыборкаАвтомобиль.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								ТекстОрдеров = ТекстОрдеров + "; " + ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаДетальныеЗаписи.РасходныйОрдер) + " от " + ДатаНаПечать;
								МассивОрдеров.Добавить(ВыборкаДетальныеЗаписи.РасходныйОрдер);
								ТекСумма = ТекСумма + ВыборкаДетальныеЗаписи.Сумма;
								обВес = обВес + ВыборкаДетальныеЗаписи.Вес;
							КонецЦикла;
							Если НЕ ТекстОрдеров = "" Тогда
								ТекстОрдеров = Сред(ТекстОрдеров, 3);
							КонецЕсли;
							//+++АК BELN 2018.07.17  ИП-00019201      
							Если Пакетная Тогда
								ТабДокумент	= Новый ТабличныйДокумент;
								ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_МаршрутныеЛисты_ТТН";
								ТабДокумент.ПолеСнизу 			= 5;
								ТабДокумент.ПолеСверху 			= 5;	
								ТабДокумент.АвтоМасштаб 		= Истина;
								ТабДокумент.ОтображатьСетку 	= Ложь;
								ТабДокумент.Защита 				= Ложь;
								ТабДокумент.ТолькоПросмотр 		= Ложь;
								ТабДокумент.ОтображатьЗаголовки = Ложь;
								
							КонецЕсли; 
							//---АК BELN 2018.07.17 
							
							
							//
							ОбластьМакета.Параметры.ДатаТТН 			= ДатаНаПечать;
							ОбластьМакета.Параметры.НомерТТН 			= ТекстНомераТТН;
							ОбластьМакета.Параметры.Маршрут 			= ?(ЗначениеЗаполнено(ТекМаршрут), СокрЛП(ТекМаршрут.Наименование), "");
							ОбластьМакета.Параметры.Грузополучатель 	= мТекстГрузополучателя;
							//ОбластьМакета.Параметры.НаименованиеГруза 	= СтрокаГрупп;
							ОбластьМакета.Параметры.НаименованиеГруза 	= "Согласно накладных: " + ТекстОрдеров + ".";
							ОбластьМакета.Параметры.ПереченьДокументов 	= "Накладные: " + ТекстОрдеров + ".";
							ОбластьМакета.Параметры.Грузоотправитель	= мТекстГрузоотправителя;
							ОбластьМакета.Параметры.ОрганизацияПлательщик = мТекстГрузоотправителя15; //+++АК SHEP 2018.01.12 ИП-00017659
							
							ПечПеревозчик = СокрЛП(ТекПеревозчик.Наименование);
							Если ЮрАдресПеревозчика.Свойство("Представление") Тогда
								ПечПеревозчик = ПечПеревозчик + ?(СокрЛП(ЮрАдресПеревозчика.Представление) = "", "", "; " + СокрЛП(ЮрАдресПеревозчика.Представление));
							КонецЕсли;								
							ОбластьМакета.Параметры.Перевозчик 			= ПечПеревозчик;
							
							ОбластьМакета.Параметры.Дата_ПриемГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 09:00";
							ОбластьМакета.Параметры.ДатаПрибытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 08:50";
							ОбластьМакета.Параметры.ДатаУбытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:20";
							ОбластьМакета.Параметры.Дата_СдачаГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 10:00";
							ОбластьМакета.Параметры.ДатаПрибытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:50";
							ОбластьМакета.Параметры.ДатаУбытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 10:20";
							ОбластьМакета.Параметры.ДатаПринятияКИсполнению	= Формат(мДатаТТН - 2 * 86400, "ДЛФ=Д");
							ОбластьМакета.Параметры.МассаГруза				= Формат(обВес, "ЧГ=") + " кг";
							ОбластьМакета.Параметры.Исполнитель				= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекИсполнитель);
							
							ОбластьМакета.Параметры.НадписьОператор				= "Оператор";
							ОбластьМакета.Параметры.НадписьПродавецКонсультант	= "Продавец-консультант";
							ОбластьМакета.Параметры.СтаршийПродавец				= СтаршийПродавец;
							
							Если ЗначениеЗаполнено(ТекОператор) Тогда
								ОбластьМакета.Параметры.Оператор				= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекОператор);
								ОбластьМакета.Параметры.Грузоотправитель16_1	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекОператор);
								ОбластьМакета.Рисунки.Очистить();
								//mind 2017-06-19 по просьбе ворошилва отключил подписи
								//ПодписьОператора = ОбщегоНазначения.ПолучитьПодписьФизлица(ТекОператор).Получить();
								//Если ТипЗнч(ПодписьОператора) = Тип("Картинка") Тогда
								//	РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
								//	РисунокПодписи.Расположить(ОбластьМакета.Область(44, 3, 44, 4));
								//	РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
								//	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
								//	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
								//	РисунокПодписи.Картинка 	= ПодписьОператора;
								//	РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
								//	РисунокПодписи.Расположить(ОбластьМакета.Область(105, 11, 107, 12));
								//	РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
								//	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
								//	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
								//	РисунокПодписи.Картинка 	= ПодписьОператора;
								//КонецЕсли;
							КонецЕсли;
							
							Адреса = Документы.АктПеревозчика.ПолучитьТекстыАдресов(МассивОрдеров);
							ОбластьМакета.Параметры.Заполнить(Адреса);
							
							ИмяВодителя = СокрЛП(ТекВодитель.Наименование);
							ИмяВодителя = СтрЗаменить(ИмяВодителя, " ", Символы.ПС);
							ОбластьМакета.Параметры.Водитель 			= СтрПолучитьСтроку(ИмяВодителя, 1) + " " 
							+ ?(СтрЧислоСтрок(ИмяВодителя) > 1, Лев(СтрПолучитьСтроку(ИмяВодителя, 2), 1) + ".", "")
							+ ?(СтрЧислоСтрок(ИмяВодителя) > 2, Лев(СтрПолучитьСтроку(ИмяВодителя, 3), 1) + ".", "");
							//ОбластьМакета.Параметры.ГосНомерАвтомобиля 	= СокрЛП(ТекАвтомобиль.Наименование);
							//ОбластьМакета.Параметры.Автомобиль 			= СокрЛП(ТекАвтомобиль.Марка) +
							//						?(ТекАвтомобиль.Тоннаж > 0, ", " + Формат(Окр(ТекАвтомобиль.Тоннаж, 1), "ЧГ=") + "т", "");
							//					
							//ТекСтавкаНДС = ?(НЕ ТекМаршрут = Неопределено, УчетНДС.ПолучитьСтавкуНДС(ТекМаршрут.СтавкаНДС), 0);
							//Если НЕ ТекСумма = 0 Тогда
							//	ОбластьМакета.Параметры.Стоимость = Строка(ТекСумма +
							//		?((НЕ ТекМаршрут = Неопределено)
							//				И ТекМаршрут.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,
							//			УчетНДС.РассчитатьСуммуНДС(ТекСумма, Истина, Ложь, ТекСтавкаНДС), 0)) + 
							//		?((НЕ ТекМаршрут = Неопределено) И НЕ ТекСтавкаНДС = 0, ", в т.ч. НДС " + Строка(ТекСтавкаНДС) + "%", "");
							//Иначе
							ОбластьМакета.Параметры.Стоимость = "";	
							//КонецЕсли;
							
							//ОбластьМакета.Параметры.Руководитель 		= ОбщегоНазначения.ФамилияИнициалыФизЛица(СокрЛП(ОрганизацияПолучатель.ГенеральныйДиректор));
							ОбластьМакета.Параметры.ДатаТТН 			= ДатаНаПечать;
							
							ТабДокумент.Вывести(ОбластьМакета);
							//+++АК BELN 2018.07.17 ИП-00019201      
							Если НЕ Пакетная Тогда
								ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							КонецЕсли; 
							Для каждого Эл Из МассивОрдеров Цикл
								Соот.Вставить(Эл,ТабДокумент);
								
								
							КонецЦикла; 
							//---АК BELN 2018.07.17 
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	//+++АК BELN 2018.07.17 ИП-00019201      
	Если Пакетная Тогда
		Возврат Соот;
	Иначе	
		Возврат ТабДокумент;
	КонецЕсли; 
	//---АК BELN 2018.07.17 
КонецФункции

&НаСервере
Функция ПечатьТОРГ12(СсылкаНаДокумент, МассивТоваров, Организация, ЭтоИсключение = Ложь)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	&Организация КАК Организация,
	|	&Организация КАК ЮрФизЛицо,
	|	&Организация КАК Поставщик,
	|	&Организация КАК Контрагент,
	|	&Организация КАК Руководители,
	|	РасходныйОрдер.Получатель.Адрес КАК АдресДоставки,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Грузополучатель,
	|	&Организация КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Покупатель,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Плательщик,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель.Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ТекДата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдер.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, СсылкаНаДокумент);
	Запрос.УстановитьПараметр("МассивТоваров"	, МассивТоваров);
	Запрос.УстановитьПараметр("Период"			, СсылкаНаДокумент.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК Номер,
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Товары.Номенклатура.Код КАК ТоварКод,
	|	Товары.Количество,
	|	Товары.Количество КАК КоличествоМест,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	Товары.ЕдиницаИзмерения КАК ВидУпаковки,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоВОдномМесте,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК Сумма,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество - 100 * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество / 110 КАК СуммаНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК СуммаВВалютеДокумента,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество - 100 * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество / 110 КАК СуммаНДСВВалютеДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения,
	|	Товары.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	//+++АК KIRN 2018.04.12  ???
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних
	//---АК KIRN 
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И Товары.Ссылка.Получатель = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|	И Товары.Номенклатура В(&МассивТоваров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 4;
	ТабДокумент.ПолеСлева          = 4;
	ТабДокумент.ПолеСнизу          = 4;
	ТабДокумент.ПолеСправа         = 4;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
	
	ОбластьМакетаМаршрут          = Макет.ПолучитьОбласть("НаименованиеМаршрута");
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("ШапкаТочка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("ПодвалТочка");
	
	ОбластьМакетаМаршрут.Параметры.Маршрут = Шапка.Маршрут;
	ТабДокумент.Вывести(ОбластьМакетаМаршрут);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если ЭтоИсключение Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = "МТО МООИ ДИОН, ИНН 7706162951, КПП 770601001, 119180, Москва, Б Полянка, д28, стр1, р/с 40703810803000140293 в АКБ РосЕвроБанк";
	Иначе	
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = Шапка.Получатель + ", " + Шапка.АдресДоставки;
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Если ЭтоИсключение Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = "МТО МООИ ДИОН, ИНН 7706162951, КПП 770601001, 119180, Москва, Б Полянка, д28, стр1, р/с 40703810803000140293 в АКБ РосЕвроБанк";
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
	КонецЕсли;
	
	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = Шапка.ДатаДокумента;
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		НаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		
		//+++ gusd
		Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
			И НЕ ВРег(НаименованиеТовара) = ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
			
			НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		//--- gusd
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.Производитель) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Производитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.СтранаПроисхождения) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.СтранаПроисхождения;
		КонецЕсли;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = НаименованиеТовара;
		
		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;
		
		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		Если НЕ Шапка.СуммаВключаетНДС
			ИЛИ СуммаНДС = 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		//Если НомерСтроки = 1 Тогда
		//	СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		//КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		#Если Клиент Тогда
			Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
			#Иначе	
				Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
				#КонецЕсли
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице       = 0;
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаНаСтранице      = 0;
					ИтогоНДСНаСтранице        = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоМест       = ИтогоМест       + КоличествоМест;
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		
		Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
		ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
		ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецФункции
	
&НаСервере
Функция ПечатьМ11(Ссылка, МассивТоваров, Организация)
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
		Запрос.УстановитьПараметр("МассивНоменклатуры"	, МассивТоваров);
		Запрос.УстановитьПараметр("Организация"			, Организация);
		Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(Ссылка.Дата));
		Запрос.УстановитьПараметр("СсылкаДата"			, Ссылка.МоментВремени());	//SelV в рамках СОД№18521 2012-01-31 : // 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Ссылка.Номер,
		|	РасходныйОрдерСкладТовары.Ссылка.Дата,
		|	"" КАК Фирма,
		|						"" КАК КодПоОКПО,
		|	РасходныйОрдерСкладТовары.Номенклатура.Код КАК НоменклатураКод,
		|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	РасходныйОрдерСкладТовары.Количество,
		|	0 КАК СуммаБезНДС,
		|	0 КАК СуммаНДС,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	РасходныйОрдерСкладТовары.Ссылка.Склад,
		|	РасходныйОрдерСкладТовары.Ссылка.Получатель,
		|	РасходныйОрдерСкладТовары.Ссылка.Автор,
		|	РасходныйОрдерСкладТовары.Ссылка.Комментарий,
		|	&Организация КАК Организация,
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО РасходныйОрдерСкладТовары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов1.Объект
		|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
		|	И РасходныйОрдерСкладТовары.Номенклатура В(&МассивНоменклатуры)";
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Первая = Истина;
		СуммаИтого = 0;
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("М11");
		ТабДок = Новый ТабличныйДокумент;
		
		Маршрут = Макет.ПолучитьОбласть("Маршрут");
		Шапка 	= Макет.ПолучитьОбласть("Шапка");
		Подвал 	= Макет.ПолучитьОбласть("Подвал");
		
		// Зададим параметры макета
		ТабДок.АвтоМасштаб = Истина;
		
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М11";
		
		КоличествоСтрок = Выборка.Количество();
		НомерСтроки     = 0;
		
		Пока Выборка.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если Первая Тогда
				
				Шапка.Параметры.Фирма 	= Организация.НаименованиеПолное + " ИНН:" + Строка(Организация.ИНН) + "; " +
				СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата()).ЮридическийАдрес); 
				Шапка.Параметры.Номер 	= Выборка.Номер;
				Шапка.Параметры.КодОКПО = Организация.КодПоОКПО;
				Шапка.Параметры.ДатаДок = Выборка.Дата;
				Шапка.Параметры.ПодразделениеОтправитель 	= Выборка.Склад;
				Шапка.Параметры.ПодразделениеПолучатель 	= Выборка.Получатель;
				
				Шапка.Параметры.ДатаПодразделение = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + " " + Выборка.Получатель;
				Строка = Макет.ПолучитьОбласть("Строка");
				
				Маршрут.Параметры.Маршрут = Выборка.Маршрут;
				ТабДок.Вывести(Маршрут);
				
				ТабДок.Вывести(Шапка);
				Первая = Ложь;
				
				//ВетВрач = Выборка.ВетеринарныйВрач;
				//ВетНомер = Выборка.ВетНомер + Цел((Ссылка.Дата - Выборка.Период) / 86400);
				//ВетСерия = Выборка.Серия;
				
			КонецЕсли;
			
			НаименованиеТовара = СокрЛП(Выборка.Номенклатура);
			Если ЗначениеЗаполнено(Выборка.Производитель) Тогда
				НаименованиеТовара = НаименованиеТовара + ", " + Выборка.Производитель;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.СтранаПроисхождения) Тогда
				НаименованиеТовара = НаименованиеТовара + ", " + Выборка.СтранаПроисхождения;
			КонецЕсли;
			Строка.Параметры.МатЦенность 			= НаименованиеТовара;
			Строка.Параметры.Код 					= Выборка.НоменклатураКод;
			Строка.Параметры.ЕдиницаИзмеренияКод 	= Выборка.ЕдиницаИзмеренияКод;
			Строка.Параметры.ЕдиницаИзмерения 		= Выборка.ЕдиницаИзмерения;
			Строка.Параметры.КоличествоЗатребовано 	= Выборка.Количество;
			Строка.Параметры.КоличествоОтпущено 	= Выборка.Количество;
			Если Выборка.Количество = 0 Тогда
				Строка.Параметры.МатериалЦенаБезНДС = 0;
			Иначе
				Строка.Параметры.МатериалЦенаБезНДС = Выборка.СуммаБезНДС / Выборка.Количество;
			КонецЕсли;
			Строка.Параметры.МатериалСумма = Выборка.СуммаБезНДС;
			СуммаИтого = СуммаИтого + Выборка.СуммаБезНДС;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(Строка);
			Если НомерСтроки = КоличествоСтрок Тогда           
				СтрокаСПодвалом.Добавить(Подвал);
			КонецЕсли;
			
			#Если Клиент Тогда
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, СтрокаСПодвалом) Тогда	
				#Иначе	
					Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, СтрокаСПодвалом) Тогда
					#КонецЕсли
					
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
				
				ТабДок.Вывести(Строка);
				
			КонецЦикла; 
			
			Подвал.Параметры.СуммаИтого = СуммаИтого;
			//Подвал.Параметры.ВетНомер = Строка(ВетСерия) + " №" + Строка(ВетНомер);			
			//Подвал.Параметры.Врач = ВетВрач;	
			
			ТабДок.Вывести(Подвал);
			
			Возврат ТабДок;
			
		КонецФункции
		
&НаКлиенте
Процедура КомплектПечатныхФормИмяПринтераНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
			
			Элемент.СписокВыбора.Очистить();
			
			Попытка
				objWMIService = ПолучитьCOMОбъект("winmgmts:\\.\root\CIMV2"); 
			Исключение
				ТекстСообщения = НСтр("ru = 'Список принтеров не доступен!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецПопытки;
			
			Выборка = objWMIService.ExecQuery("SELECT * FROM Win32_Printer",,48);    
			
			Для Каждого objItem Из Выборка Цикл  
				Элемент.СписокВыбора.Добавить(objItem.Caption);
			КонецЦикла;
			
		КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Функция ПечатьУПД(МассивОрдеров)
	
	Лог("Получаю список РТУ по ордерам");
	СписокРТУ = ПолучитьСписокРТУПоОрдерам(МассивОрдеров);
	
	ПодключениеУстановлено = Ложь;
	Лог("Подключаюсь к базе Бухгалтерии");
	ПодключениеКБазеБП = ОбменСБП2_0.ВернутьПодключениеКБазеБУ(ПодключениеУстановлено);
	
	Если НЕ ПодключениеУстановлено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Лог("Выгружаю РТУ в базу бухгалтерии");
	ВыгрузитьРТУВБазуБухгалтерии(СписокРТУ, ПодключениеКБазеБП); //в правилах обмена проставлена проверка реквизитов, если доки одинаковые, то не будут записываться. 
										// поэтому проще выгрузить всё, чем лезть сейчас в буху и сравнивать что выгружено, что не выгружено
										
										
	Лог("Проставляю номера счет-фактур в РТУ фин. базы");
	ПроставитьВРТУНомераСчетФактур(СписокРТУ, ПодключениеКБазеБП); // в рту тек. базы проставляю номера счет-фактур из бух
	
	Лог("Формирую печатную форму УПД");
	Возврат СформироватьУПДПоСпискуРТУ(СписокРТУ);
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Функция ПолучитьСписокРТУПоОрдерам(МассивОрдеров)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	РеализацияТоваровУслуг.Ссылка КАК Рту
	              |ИЗ
	              |	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              |		ПО РеализацияТоваровУслугРасходныеОрдера.Ссылка = РеализацияТоваровУслуг.Ссылка
	              |ГДЕ
	              |	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер В(&МассивОрдеров)
	              |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	РеализацияТоваровУслуг.Ссылка";
	
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Рту");
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Процедура ВыгрузитьРТУВБазуБухгалтерии(СписокРТУ, ПодключениеКБазеБП)
	
	ОбработкаОбмена = ОбменСБП2_0.ИнициализироватьОбработкуОбмена();
	ОбработкаОбмена.ПодключениеУстановлено = Истина; //сразу проставляю в обработку результат подключения, чтобы она заново не подключалась
	ОбработкаОбмена.ОбъектПодключения = ПодключениеКБазеБП;	
		
	НазваниеДляОтбора = "Документ_РеализацияТоваровУслуг";
	ИмяСтрокиДерева = "Документы";
	ОбменСБП2_0.ВыгрузитьОбъектВБухгалтериюПоОтбору(ОбработкаОбмена, "Документ_РеализацияТоваровУслуг", "Документы", "РеализацияТоваровУслуг", СписокРТУ, Истина);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Процедура ПроставитьВРТУНомераСчетФактур(СписокРТУ, ПодключениеКБазеБП)
	
	МетаданныеРТУ = ПодключениеКБазеБП.XMLTypeOf(ПодключениеКБазеБП.Документы.РеализацияТоваровУслуг.ПустаяСсылка()); 
	
	СоответствиеФинБух = Новый Соответствие;
	МассивВЗапрос = ПодключениеКБазеБП.NewObject("Массив");
	
	Для Каждого РТУ Из СписокРТУ Цикл
		
		ГуидФинСтрокой = Строка(РТУ.УникальныйИдентификатор());		
		ДокВБух	= ПодключениеКБазеБП.XMLValue(ПодключениеКБазеБП.FromXMLType(МетаданныеРТУ), ГуидФинСтрокой); //по гуиду РТУ получаю док в бух. Они всегда равны по гуидам
		
		СоответствиеФинБух.Вставить(ГуидФинСтрокой, Рту); //делаю соответствие доков между собой
		МассивВЗапрос.Добавить(ДокВБух);
		
	КонецЦикла;
	
	СоответствиеНомеровСчФ = ПолучитьИзБПСоответствиеНомеровСчФДляРТУ(СоответствиеФинБух, ПодключениеКБазеБП, МассивВЗапрос); //получаю номера счет-фактур
	ЗнакРеквФин = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокРТУ, "НомерИсходящегоСчетаФактуры");
	
	//прописываю номера в РТУ фина, если они не совпадают с теми, что в базе.
	Для Каждого Рту Из СписокРТУ Цикл
		НомерСчФБух = СоответствиеНомеровСчФ.Получить(Рту);        
		
		Если НомерСчФБух = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для документа " + Строка(Рту) + " не удалось получить номер счет-фактуры. Попробуйте выгрузить его еще раз");
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизитаНомерСчФ = ЗнакРеквФин.Получить(Рту);
		
		Если СокрЛП(ЗначениеРеквизитаНомерСчФ["НомерИсходящегоСчетаФактуры"]) <> СокрЛП(НомерсчФБух) Тогда
			ДокОб = Рту.ПолучитьОбъект();
			ДокОб.НомерИсходящегоСчетаФактуры = НомерСчФБух;
			ДокОб.ОбменДанными.Загрузка = Истина;
			ДокОб.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Функция ПолучитьИзБПСоответствиеНомеровСчФДляРТУ(СоответствиеФинБух, ПодключениеКБазеБП, МассивВЗапрос)
	
	Запрос = ПодключениеКБазеБП.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
|	СчетФактураВыданный.Номер КАК НомерСчФ,
|	СчетФактураВыданный.ДокументОснование
|ИЗ
|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
|ГДЕ
|	НЕ СчетФактураВыданный.ПометкаУдаления
|	И СчетФактураВыданный.ДокументОснование В(&МассивРТУ)";
	
	Запрос.УстановитьПараметр("МассивРТУ", МассивВЗапрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеНомеровСчФ = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ДокФин = СоответствиеФинБух.Получить(ПодключениеКБазеБП.XMLСтрока(Выборка.ДокументОснование));		
		СоответствиеНомеровСчФ.Вставить(ДокФин, Выборка.НомерСчФ);
	КонецЦикла;
	
	Возврат СоответствиеНомеровСчФ;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Функция СформироватьУПДПоСпискуРТУ(СписокРТУ)
	
	СоотУПД = Новый Соответствие;
	
	Для Каждого Рту Из СписокРТУ Цикл
		ТабДок = Рту.ПолучитьОбъект().ПечатьУниверсальныйПередаточныйДокумент(Рту);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.АвтоМасштаб = Истина;
		СоотУПД.Вставить(РТУ, ТабДок);		
	КонецЦикла;
	
	Возврат СоотУПД;		
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
&НаСервере
Процедура Лог(ТекстСообщения)
	
	Сообщить(ТекстСообщения, СтатусСообщения.Информация);
	
КонецПроцедуры
