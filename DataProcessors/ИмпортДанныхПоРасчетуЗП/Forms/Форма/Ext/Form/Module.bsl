
&НаКлиенте
Процедура СобратьДанные(Команда)
	СобратьДанныеСервер();
КонецПроцедуры

&НаСервере
Процедура СобратьДанныеСервер()
	ТекстЗапроса="ВЫБРАТЬ
	|	НастройкаОтраженияЗарплатыПоВидамНачисления.ЦФО,
	|	НастройкаОтраженияЗарплатыПоВидамНачисления.ВидНачисления,
	|	НастройкаОтраженияЗарплатыПоВидамНачисления.СтатьяДР,
	|	НастройкаОтраженияЗарплатыПоВидамНачисления.Счет,
	|	НастройкаОтраженияЗарплатыПоВидамНачисления.ФизЛицо
	|ИЗ
	|	РегистрСведений.НастройкаОтраженияЗарплатыПоВидамНачисления КАК НастройкаОтраженияЗарплатыПоВидамНачисления";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	НастройкиОтраженияЗП=Запрос.Выполнить().Выгрузить();
	
	
	ТекстЗапроса="ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	Начисления.ФизЛицо.Код КАК ФизЛицоКод,
	|	СУММА(Начисления.Результат) КАК Сумма,
	|	Начисления.Организация.ИНН КАК ИННОрганизации,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета = ""НДФЛ""
	|			ТОГДА ""НДФЛ""
	|		ИНАЧЕ Начисления.ВидРасчета.Наименование
	|	КОНЕЦ КАК ВидРасчетаНаименование,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение КАК Подразделение,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	Начисления.Организация.Наименование КАК ОрганизацияНаименование,
	|	РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|ПОМЕСТИТЬ ПервичнаяВыборка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
	|		ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
	|		ОсновныеНачисленияРаботниковОрганизаций.Организация КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ОсновныеНачисленияРаботниковОрганизаций.Результат <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
	|		ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
	|		ДополнительныеНачисленияРаботниковОрганизаций.Результат,
	|		ДополнительныеНачисленияРаботниковОрганизаций.Организация,
	|		ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ДополнительныеНачисленияРаботниковОрганизаций.Результат <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		НДФЛРасчетыСБюджетом.ФизЛицо,
	|		НДФЛРасчетыСБюджетом.Налог,
	|		НДФЛРасчетыСБюджетом.Организация,
	|		""НДФЛ""
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|	ГДЕ
	|		НДФЛРасчетыСБюджетом.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|		И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СотрудникиУпрПодразделений.СрезПоследних(&ДатаНачала, ) КАК АК_СотрудникиУпрПодразделенийСрезПоследних
	|		ПО Начисления.ФизЛицо = АК_СотрудникиУпрПодразделенийСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Начисления.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|			И Начисления.Организация = РаботникиОрганизацийСрезПоследних.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ФизЛицо.Наименование,
	|	Начисления.ФизЛицо.Код,
	|	Начисления.Организация.ИНН,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета = ""НДФЛ""
	|			ТОГДА ""НДФЛ""
	|		ИНАЧЕ Начисления.ВидРасчета.Наименование
	|	КОНЕЦ,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение,
	|	Начисления.Организация.Наименование,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение.Наименование,
	|	РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервичнаяВыборка.Сотрудник,
	|	ПервичнаяВыборка.ФизЛицоНаименование,
	|	ПервичнаяВыборка.ФизЛицоКод,
	|	ПервичнаяВыборка.Сумма,
	|	ПервичнаяВыборка.ИННОрганизации,
	|	ПервичнаяВыборка.ВидРасчетаНаименование,
	|	ПервичнаяВыборка.Подразделение,
	|	ПервичнаяВыборка.ПодразделениеНаименование,
	|	ПервичнаяВыборка.ОрганизацияНаименование,
	|	ПервичнаяВыборка.ДолжностьНаименование
	|ИЗ
	|	ПервичнаяВыборка КАК ПервичнаяВыборка
	|ГДЕ
	|	(ПервичнаяВыборка.Подразделение = &Подразделение
	|			ИЛИ &ПоВсемПодразделениям)
	|	И (ПервичнаяВыборка.ИННОрганизации = &ИННОрганизации
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПервичнаяВыборка.ОрганизацияНаименование,
	|	ПервичнаяВыборка.Подразделение";
	
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Зуп();
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
	
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено=Истина;
	Исключение
		
		ПодключениеУстановлено=Ложь;
		Сообщить("Не удалось подключиться к базе зарплаты");
		Возврат;
		
	КонецПопытки;
	
	ТекстЗапросаКФ="ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Код,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	Запрос = Новый Запрос(ТекстЗапросаКФ);
	КэшФизЛиц = Запрос.Выполнить().Выгрузить();
	
	запрос=v82.NewObject("Запрос");  
	запрос.текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ИННОрганизации",Организация_фильтр.ИНН);
	Запрос.УстановитьПараметр("Подразделение",v82.Справочники.Подразделения.ПолучитьСсылку(V82.NewObject("УникальныйИдентификатор",Строка(ЦФО_фильтр.УникальныйИдентификатор()))));
	Если ЗначениеЗаполнено(Организация_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",истина);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ЦФО_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемПодразделениям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемПодразделениям",истина);
	КонецЕсли;	
	Выборка=Запрос.Выполнить().Выбрать();
	Начисления.Очистить();
	Налоги.Очистить();
	Пока выборка.следующий() Цикл
		Если Выборка.Сумма=0 Тогда
			продолжить;
		КонецЕсли;	
		Если Выборка.ВидРасчетаНаименование="НДФЛ" Тогда
			НС=Налоги.Добавить();
			ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Код",Выборка.ФизЛицоКод));
			Если ФизЛицаКандидаты.Количество()>0 Тогда
				НС.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
			Иначе
				ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Наименование",Выборка.ФизЛицоНаименование));
				Если ФизЛицаКандидаты.Количество()>0 Тогда
					НС.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;	
			//НС.ФизЛицо=Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.ФизЛицоНаименование);
			НС.организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
			НС.Сумма=Выборка.Сумма;
			Если ЗначениеЗаполнено(Выборка.ПодразделениеНаименование) Тогда
				НС.ЦФО=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(Выборка.Подразделение.УникальныйИдентификатор())));
			КонецЕсли;	
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.НДФЛ;
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ЦФО",НС.ЦФО);
			СтруктураОтбора.Вставить("ВидНачисления",НС.ВидНачисления);
			СтруктураОтбора.Вставить("ФизЛицо",НС.ФизЛицо);
			Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
			Если Найденные.Количество()=0 Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",НС.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",НС.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора.Вставить("ЦФО",НС.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Справочники.ВидыНачисленийЗУП.ПустаяСсылка());
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()>0 Тогда
						НС.СтатьяДР=Найденные[0].СтатьяДР;
						НС.Счет=Найденные[0].Счет;
					КонецЕсли;	
				Иначе	
					НС.СтатьяДР=Найденные[0].СтатьяДР;
					НС.Счет=Найденные[0].Счет;
				КонецЕсли;		
			Иначе	
				НС.СтатьяДР=Найденные[0].СтатьяДР;
				НС.Счет=Найденные[0].Счет;
			КонецЕсли;	
		Иначе
			Стр=Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			Если ЗначениеЗаполнено(Выборка.ПодразделениеНаименование) Тогда
				Стр.ЦФО=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(Выборка.Подразделение.УникальныйИдентификатор())));
			КонецЕсли;
			Стр.Должность = Выборка.ДолжностьНаименование;
			Стр.Организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
			//Стр.ФизЛицо=Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.ФизЛицоНаименование);
			
			ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Код",Выборка.ФизЛицоКод));
			Если ФизЛицаКандидаты.Количество()>0 Тогда
				Стр.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
			Иначе
				ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Наименование",Выборка.ФизЛицоНаименование));
				Если ФизЛицаКандидаты.Количество()>0 Тогда
					Стр.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;	
			
			Стр.сотрудник=НайтиСотрудника(Стр.ФизЛицо,Стр.Организация);
			Если ЗначениеЗаполнено(Выборка.ВидРасчетаНаименование) Тогда
				Начисление=Справочники.ВидыНачисленийЗУП.НайтиПоРеквизиту("НаименованиеЗУП",Выборка.ВидРасчетаНаименование);
				Если Начисление.Пустая() Тогда
					Начисление=Справочники.ВидыНачисленийЗУП.СоздатьЭлемент();
					Начисление.Наименование=Выборка.ВидРасчетаНаименование;
					Начисление.НаименованиеЗУП=Выборка.ВидРасчетаНаименование;
					Начисление.ОблагаетсяНДФЛ=истина;
					Начисление.родитель=Справочники.ВидыНачисленийЗУП.Начисления;
					Начисление.Записать();
					Начисление=Начисление.Ссылка;
				КонецЕсли;	
				Стр.ВидНачисления=Начисление;
				Если СокрЛП(Стр.ВидНачисления.Наименование)="Месячная премия-3" ИЛИ СокрЛП(Стр.ВидНачисления.Наименование)="Материальная помощь в связи со смертью"
					ИЛИ СокрЛП(Стр.ВидНачисления.Наименование)="Материальная помощь при рождении ребёнка"  Тогда
					Стр.МатПомощь=Истина;
				КонецЕсли;	
			КонецЕсли;	
			Если ЗначениеЗаполнено(Стр.ЦФО) Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Стр.ФизЛицо);
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
						СтруктураОтбора.Вставить("ВидНачисления",Справочники.ВидыНачисленийЗУП.ПустаяСсылка());
						СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
						Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
						Если Найденные.Количество()>0 Тогда
							Стр.СтатьяДР=Найденные[0].СтатьяДР;
							Стр.Счет=Найденные[0].Счет;
						КонецЕсли;	
					Иначе	
						Стр.СтатьяДР=Найденные[0].СтатьяДР;
						Стр.Счет=Найденные[0].Счет;
					КонецЕсли;		
				Иначе	
					Стр.СтатьяДР=Найденные[0].СтатьяДР;
					Стр.Счет=Найденные[0].Счет;
				КонецЕсли;	
			КонецЕсли;
			
			Если Стр.ВидНачисления.ОблагаетсяНДФЛ Тогда
				//	Стр.СуммаБезНДФЛ=стр.Сумма-стр.Сумма*0.13;
				//	
				//	//Если ЗначениеЗаполнено(Стр.СтатьяДР) и Стр.СтатьяДР.Код="20510" Тогда
				//	//	Стр.СуммаБезНДФЛ=Окр(Стр.СуммаБезНДФЛ);
				//	//КонецЕсли;	
				Стр.ОблагаетсяНДФЛ=истина;
				//Иначе
				//	Стр.СуммаБезНДФЛ=стр.Сумма;
			КонецЕсли;	
			
		КонецЕсли;		
	КонецЦикла;	
	
	НачисленияБезПравил.Очистить();
	ТЗ=Начисления.Выгрузить();
	ТЗ.Свернуть("СтатьяДР,Счет,ЦФО,ВидНачисления");
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("СтатьяДР",неопределено);
	Найденные=ТЗ.НайтиСтроки(СтруктураОтбора);
	Для каждого стр из Найденные Цикл
		НС=НачисленияБезПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Стр);
	КонецЦикла;	
	
	// налоги
	ТекстЗапроса="ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо.Код КАК ФизЛицоКод,
	|	СтраховыеВзносыИсчисленныеОбороты.Организация.ИНН КАК ИННОрганизации,
	//|	СтраховыеВзносыИсчисленныеОбороты.ПФРПоСуммарномуТарифуОборот КАК ПФР,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРДоПредельнойВеличиныОборот + СтраховыеВзносыИсчисленныеОбороты.ПФРСПревышенияОборот КАК ПФР,
	|	СтраховыеВзносыИсчисленныеОбороты.ФССОборот КАК ФСС,
	|	СтраховыеВзносыИсчисленныеОбороты.ФФОМСОборот КАК ФФОМС,
	|	СтраховыеВзносыИсчисленныеОбороты.ФССНесчастныеСлучаиОборот КАК ФСС_НС,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ПервичнаяВыборка
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК СтраховыеВзносыИсчисленныеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СотрудникиУпрПодразделений.СрезПоследних(&ДатаНачала, ) КАК АК_СотрудникиУпрПодразделенийСрезПоследних
	|		ПО СтраховыеВзносыИсчисленныеОбороты.ФизЛицо = АК_СотрудникиУпрПодразделенийСрезПоследних.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервичнаяВыборка.ФизЛицоНаименование,
	|	ПервичнаяВыборка.ФизЛицоКод,
	|	ПервичнаяВыборка.ИННОрганизации,
	|	ПервичнаяВыборка.ПФР,
	|	ПервичнаяВыборка.ФСС,
	|	ПервичнаяВыборка.ФФОМС,
	|	ПервичнаяВыборка.ФСС_НС,
	|	ПервичнаяВыборка.ПодразделениеНаименование,
	|	ПервичнаяВыборка.Подразделение
	|ИЗ
	|	ПервичнаяВыборка КАК ПервичнаяВыборка
	|ГДЕ
	|	(ПервичнаяВыборка.ИННОрганизации = &ИННОрганизации
	|			ИЛИ &ПоВсемОрганизациям)
	|	И (ПервичнаяВыборка.Подразделение = &Подразделение
	|			ИЛИ &ПоВсемПодразделениям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПервичнаяВыборка.Подразделение,
	|	ПервичнаяВыборка.ИННОрганизации,
	|	ПервичнаяВыборка.ФизЛицоКод,
	|	ПервичнаяВыборка.ФизЛицоНаименование";
	
	
	запрос=v82.NewObject("Запрос");  
	запрос.текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ИННОрганизации",Организация_фильтр.ИНН);
	Запрос.УстановитьПараметр("Подразделение",v82.Справочники.Подразделения.ПолучитьСсылку(V82.NewObject("УникальныйИдентификатор",Строка(ЦФО_фильтр.УникальныйИдентификатор()))));
	Если ЗначениеЗаполнено(Организация_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",истина);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ЦФО_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемПодразделениям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемПодразделениям",истина);
	КонецЕсли;	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока выборка.следующий() Цикл		 
		СтруктураСвойств=Новый Структура;
		СтруктураСвойств.Вставить("Организация",Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации));
		//СтруктураСвойств.Вставить("ФизЛицо",Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.ФизЛицоНаименование));
		ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Код",Выборка.ФизЛицоКод));
		Если ФизЛицаКандидаты.Количество()>0 Тогда
			СтруктураСвойств.Вставить("ФизЛицо",ФизЛицаКандидаты[0].Ссылка);
		Иначе
			ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Наименование",Выборка.ФизЛицоНаименование));
			Если ФизЛицаКандидаты.Количество()>0 Тогда
				СтруктураСвойств.Вставить("ФизЛицо",ФизЛицаКандидаты[0].Ссылка);
			КонецЕсли;	
		КонецЕсли;	
		ЦФО=неопределено;
		Если ЗначениеЗаполнено(Выборка.ПодразделениеНаименование) Тогда
			ЦФО=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(Выборка.Подразделение.УникальныйИдентификатор())));
		КонецЕсли;	
		СтруктураСвойств.Вставить("ЦФО",ЦФО);
		Если Выборка.ПФР<>0 тОГДА
			Стр=Налоги.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			ЗаполнитьЗначенияСвойств(Стр,СтруктураСвойств);
			Стр.Сумма=Выборка.ПФР;
			Стр.ВидНачисления=Справочники.ВидыНачисленийЗУП.ПФР;
			Если ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.ВидНачисления)  Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Стр.ФизЛицо);
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						
					Иначе	
						Стр.СтатьяДР=Найденные[0].СтатьяДР;
						Стр.Счет=Найденные[0].Счет;
					КонецЕсли;	
				Иначе	
					Стр.СтатьяДР=Найденные[0].СтатьяДР;
					Стр.Счет=Найденные[0].Счет;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ФСС<>0 тОГДА
			Стр=Налоги.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			ЗаполнитьЗначенияСвойств(Стр,СтруктураСвойств);
			Стр.Сумма=Выборка.ФСС;
			Стр.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС;
			
			Если ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.ВидНачисления)  Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Стр.ФизЛицо);
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						
					Иначе	
						Стр.СтатьяДР=Найденные[0].СтатьяДР;
						Стр.Счет=Найденные[0].Счет;
					КонецЕсли;	
				Иначе	
					Стр.СтатьяДР=Найденные[0].СтатьяДР;
					Стр.Счет=Найденные[0].Счет;
				КонецЕсли;	
			КонецЕсли;
			
			
		КонецЕсли;
		Если Выборка.ФФОМС<>0 тОГДА
			Стр=Налоги.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			ЗаполнитьЗначенияСвойств(Стр,СтруктураСвойств);
			Стр.Сумма=Выборка.ФФОМС;
			Стр.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФФОМС;
			Если ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.ВидНачисления)  Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Стр.ФизЛицо);
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						
					Иначе	
						Стр.СтатьяДР=Найденные[0].СтатьяДР;
						Стр.Счет=Найденные[0].Счет;
					КонецЕсли;	
				Иначе	
					Стр.СтатьяДР=Найденные[0].СтатьяДР;
					Стр.Счет=Найденные[0].Счет;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		Если Выборка.ФСС_НС<>0 тОГДА
			Стр=Налоги.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			ЗаполнитьЗначенияСвойств(Стр,СтруктураСвойств);
			Стр.Сумма=Выборка.ФСС_НС;
			Стр.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС_НС;
			Если ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.ВидНачисления)  Тогда
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
				СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
				СтруктураОтбора.Вставить("ФизЛицо",Стр.ФизЛицо);
				Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
				Если Найденные.Количество()=0 Тогда
					СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Стр.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						
					Иначе	
						Стр.СтатьяДР=Найденные[0].СтатьяДР;
						Стр.Счет=Найденные[0].Счет;
					КонецЕсли;	
				Иначе	
					Стр.СтатьяДР=Найденные[0].СтатьяДР;
					Стр.Счет=Найденные[0].Счет;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	ТЗ=Налоги.Выгрузить();
	ТЗ.Свернуть("СтатьяДР,Счет,ЦФО,ВидНачисления");
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("СтатьяДР",неопределено);
	Найденные=ТЗ.НайтиСтроки(СтруктураОтбора);
	Для каждого стр из Найденные Цикл
		НС=НачисленияБезПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Стр);
	КонецЦикла;	
	
	// оценочные обязательства и прочее
	
	ПрочиеПроводки.Очистить();
	//+++АК POZM 2018.05.11 ИП-00018582
	
	Сч96=ПланыСчетов.Финансовый.РезервПоОтпускам;
	Сч68=ПланыСчетов.Финансовый.НайтиПоКоду("68.1");
	Сч44_3=ПланыСчетов.Финансовый.НайтиПоКоду("44.3");
	Сч44_2=ПланыСчетов.Финансовый.НайтиПоКоду("44.2");
	Все=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	УпрИнф=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15");
	
	ТабРАсчетаРезервовЗУП = v82.АК_ОбщийМодульКлиентСервер.ПолучитьРасчетСтраховыхВзносовПоУпрПодразделениям(Период,v82.Справочники.Организации.НайтиПоРеквизиту("ИНН",Организация_фильтр.ИНН));
	
	/////////////////////
	//Для каждого управляющих и помощников своя аналитика 
	  
	СтатьяНалогиФОТПомУпр = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("33011");
	СтатьяЗарплатаПомУпр = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("33010");
	СтатьяРезервПомУпр = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("37197");
		  
	  
	///////////////////
	
	Для каждого СтрокаРезервов из ТабРАсчетаРезервовЗУП Цикл
		Подразделение = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(СтрокаРезервов.УпрПодразделение.УникальныйИдентификатор())));
		Настройки96=НастройкиОтраженияЗП.НайтиСтроки(Новый Структура("Счет, ЦФО, ФизЛицо",Сч96,Подразделение,Справочники.ФизическиеЛица.ПустаяСсылка()));
		НастройкиПодразделения=НастройкиОтраженияЗП.НайтиСтроки(Новый Структура("ВидНачисления, ЦФО, ФизЛицо",Справочники.ВидыНачисленийЗУП.НайтиПоКоду("000000010"),Подразделение,Справочники.ФизическиеЛица.ПустаяСсылка()));
		
		Статья96 = Неопределено;
		//Статья44 = Неопределено;
		Счет = Неопределено;
		
		
		Если СтрокаРезервов.ЭтоПомощник = Истина Тогда
			Статья96 = СтатьяРезервПомУпр;
		ИначеЕсли Настройки96.Количество() > 0 Тогда
			Статья96 = Настройки96[0].СтатьяДР;
			//Счет = Настройки96[0].Счет
		Иначе
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заданы настройки отражения по счету 96 для "+Подразделение;
			Сообщение.Сообщить();
		КонецЕсли;
		//Если СтрокаРезервов.ЭтоПомощник Тогда
			//Статья44 = СтатьяЗарплатаПомУпр;
		//	Если НастройкиПодразделения.Количество() > 0 Тогда
		//		Счет = НастройкиПодразделения[0].Счет
		//	Иначе
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не заданы настройки отражения оклада по дням для "+Подразделение;
		//		Сообщение.Сообщить();
		//	КонецЕсли;	
		//Иначе
		Если НастройкиПодразделения.Количество() > 0 Тогда
			//Статья44 = НастройкиПодразделения[0].СтатьяДР;
			Счет = НастройкиПодразделения[0].Счет
		Иначе
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заданы настройки отражения оклада по дням для "+Подразделение;
			Сообщение.Сообщить();
		КонецЕсли;
		
		
		Для й = 1 По 2 Цикл
			НС=ПрочиеПроводки.Добавить();
			
			Если й = 1 Тогда	
				НС.Сумма=СтрокаРезервов.СуммаРезерваПоОтпуску;
				НС.Содержание="Резерв по отпускам";
				НС.СубконтоКт2=Статья96;
			Иначе	
				НС.Сумма=СтрокаРезервов.СуммаРезерваПоНалогам;
				НС.Содержание="Взносы на резерв по отпускам";
				НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
			КонецЕсли;	
			
			НС.Организация=Организация_фильтр;
			НС.Период=КонецМесяца(Период)+1;
			//+++АК sils 15.05.2018 ИП-00018466
			//НС.СубконтоДт1 = Все;
			НС.СубконтоДт1 = ПолучитьТТПоОрганизации(НС.Организация);
			//---АК
			НС.СчДт=Счет;
			НС.СубконтоДт2=НС.СубконтоКт2;
			НС.СубконтоДт3=Подразделение;		;
			НС.СчКт=Сч96;
			НС.СубконтоКт1=Организация_фильтр;
			Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
				НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
			ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
				НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
			ИначеЕсли НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
				НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
			КонецЕсли;	
		КонецЦикла;	
		
		
		
	КонецЦикла;
	
	БазаПоНачислениям96=Новый ТаблицаЗначений;
	БазаПоНачислениям96.Колонки.Добавить("СтатьяДР");
	БазаПоНачислениям96.Колонки.Добавить("Сумма");
	
	СтруктураОтбораСумм96=Новый Структура;
	СтруктураОтбораСумм96.Вставить("Счет",Сч96);
	
	Строки96=Начисления.НайтиСтроки(СтруктураОтбораСумм96);
	Для каждого Строка96 из Строки96 Цикл
		НС=БазаПоНачислениям96.Добавить();
		НС.СтатьяДР=Строка96.СтатьяДР;
		НС.Сумма=Строка96.Сумма;
	КонецЦикла;	
	БазаПоНачислениям96.Свернуть("СтатьяДР","Сумма");

	
	ТекстЗапроса="ВЫБРАТЬ
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код КАК СчДт,
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт.Код КАК СчКт,
				|	СУММА(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма) КАК Сумма,
				|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение
				|ИЗ
				|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СотрудникиУпрПодразделений.СрезПоследних(&ПериодРегистрации, ) КАК АК_СотрудникиУпрПодразделенийСрезПоследних
				|		ПО ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 = АК_СотрудникиУпрПодразделенийСрезПоследних.ФизЛицо
				|ГДЕ
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации = &ПериодРегистрации
				|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Проведен
				|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код = ""96""
				|	И (ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН = &ИННОрганизации
				|			ИЛИ &ПоВсемОрганизациям)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт,
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код,
				|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт.Код,
				|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение";
	
	
	
	запрос=v82.NewObject("Запрос");  
	запрос.текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПериодРегистрации",Период);
	Запрос.УстановитьПараметр("ИННОрганизации",Организация_фильтр.ИНН);
	Если ЗначениеЗаполнено(Организация_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",истина);
	КонецЕсли;		
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Пока выборка.следующий() Цикл	// начисления на 96 и налоги с них
		Подразделение = Неопределено;
		Если Выборка.Подразделение = NULL Тогда
			
		Иначе	
			Подразделение = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(Выборка.Подразделение.УникальныйИдентификатор())));
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Подразделение) Тогда  
			НС=ПрочиеПроводки.Добавить();
			НС.Организация=Организация_фильтр;
			НС.Период=КонецМесяца(Период);
			НС.СчДт=Сч96;
			НС.СубконтоДт1=Организация_фильтр;
			НС.СчКт=Сч68;
			НС.СубконтоКт1=Организация_фильтр;
			НС.СубконтоКт2=ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(Выборка.СчКт);
			НС.Содержание="Перенос "+НС.СубконтоКт2+" на резервы по отпускам";
			Настройки96 = НастройкиОтраженияЗП.НайтиСтроки(Новый Структура("Счет, ЦФО, ФизЛицо",Сч96,Подразделение,Справочники.ФизическиеЛица.ПустаяСсылка()));
			НС.СубконтоДт2 = Настройки96[0].СтатьяДР;
			НС.Сумма = Выборка.Сумма;
		Иначе
			Распределено=0;
			Для каждого СтатьяДР из БазаПоНачислениям96 Цикл
				НС=ПрочиеПроводки.Добавить();
				НС.Организация=Организация_фильтр;
				НС.Период=КонецМесяца(Период);
				НС.СчДт=Сч96;
				НС.СубконтоДт1=Организация_фильтр;
				НС.СчКт=Сч68;
				НС.СубконтоКт1=Организация_фильтр;
				НС.СубконтоКт2=ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(Выборка.СчКт);
				НС.Содержание="Перенос "+НС.СубконтоКт2+" на резервы по отпускам";
				Статья96=СтатьяДР.СтатьяДР;
				НС.Сумма=Выборка.Сумма*СтатьяДР.Сумма/БазаПоНачислениям96.Итог("Сумма");
				Распределено=Распределено+НС.Сумма;
				НС.СубконтоДт2=Статья96;
			КонецЦикла;	
			Если ПрочиеПроводки.Количество()<>0 Тогда
				ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма=ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма-(Распределено-Выборка.Сумма)*?(НС.СубконтоКт2.Код="000000010",0.13,1);
			КонецЕсли;	
		КонецЕсли;
		
		Если Выборка.СчКт="70" Тогда // Надо сторнировать НДФЛ
			НС=ПрочиеПроводки.Добавить();
			НС.Период=КонецМесяца(Период);
			НС.Организация=Организация_фильтр;
			НС.Сумма=-Выборка.Сумма;
			НС.Сумма=Цел(НС.Сумма*0.13);
				
			ЦФО=неопределено;
			Если ЗначениеЗаполнено(Подразделение) Тогда
				ЦФО = Подразделение;
			КонецЕсли;
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ЦФО",ЦФО);
			СтруктураОтбора.Вставить("ВидНачисления",Справочники.ВидыНачисленийЗУП.НДФЛ);
			СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
			Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
			Если Найденные.Количество()=0 Тогда
				
			Иначе	
				НС.СубконтоДт2=Найденные[0].СтатьяДР;
				НС.СчДт=Найденные[0].Счет;
			КонецЕсли;	
			//+++АК sils 15.05.2018 ИП-00018466
			//НС.СубконтоДт1=Все;
			НС.СубконтоДт1=ПолучитьТТПоОрганизации(НС.Организация);
			//---АК
			НС.СубконтоДт3=ЦФО;
			НС.СчКт=Сч68;
			НС.СубконтоКт1=Организация_фильтр;
			НС.СубконтоКт2=ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(Выборка.СчКт);
			НС.Содержание="Корректировка начисленных сумм с резервов ";
				
				
		КонецЕсли;	

		
	КонецЦикла;		
	
	#Область АК_ОтключенныйКод 
	////+++АК пмм 05.05.16  12421
	//ТекстЗапроса="ВЫБРАТЬ
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН КАК ИННОрганизации,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код КАК СчДт,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт.Код КАК СчКт,
	//|	СУММА(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма) КАК Сумма,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.Наименование КАК Субконто,
	//|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СотрудникиУпрПодразделений.СрезПоследних(&ПериодРегистрации, ) КАК АК_СотрудникиУпрПодразделенийСрезПоследних
	//|		ПО ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 = АК_СотрудникиУпрПодразделенийСрезПоследних.ФизЛицо
	//|ГДЕ
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации = &ПериодРегистрации
	//|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Проведен
	//|	И (ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код = ""96""
	//|			ИЛИ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт.Код = ""96"")
	//|	И (ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН = &ИННОрганизации
	//|			ИЛИ &ПоВсемОрганизациям)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт.Код,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт.Код,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1,
	//|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.Наименование,
	//|	АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение";
	//
	//запрос=v82.NewObject("Запрос");  
	//запрос.текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ПериодРегистрации",Период);
	//Запрос.УстановитьПараметр("ИННОрганизации",Организация_фильтр.ИНН);
	//Если ЗначениеЗаполнено(Организация_фильтр) Тогда
	//	Запрос.УстановитьПараметр("ПоВсемОрганизациям",Ложь);
	//Иначе
	//	Запрос.УстановитьПараметр("ПоВсемОрганизациям",истина);
	//КонецЕсли;		
	//
	//Выборка=Запрос.Выполнить().Выбрать();
	//Сч96=ПланыСчетов.Финансовый.РезервПоОтпускам;
	//Сч68=ПланыСчетов.Финансовый.НайтиПоКоду("68.1");
	//Сч44_3=ПланыСчетов.Финансовый.НайтиПоКоду("44.3");
	//Сч44_2=ПланыСчетов.Финансовый.НайтиПоКоду("44.2");
	//Все=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	//УпрИнф=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15");
	//РезервНаНалоги=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21302");
	//РезервНаОтпускные=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21301");
	//
	//Статья96=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20524");
	//СчНастроек=Сч44_3;
	//
	////+++АК пмм 05.05.16  12421
	//БазаПоНачислениям96=Новый ТаблицаЗначений;
	//БазаПоНачислениям96.Колонки.Добавить("СтатьяДР");
	//БазаПоНачислениям96.Колонки.Добавить("Сумма");
	//
	//СтруктураОтбораСумм96=Новый Структура;
	//СтруктураОтбораСумм96.Вставить("Счет",Сч96);
	//
	//Строки96=Начисления.НайтиСтроки(СтруктураОтбораСумм96);
	//Для каждого Строка96 из Строки96 Цикл
	//	НС=БазаПоНачислениям96.Добавить();
	//	НС.СтатьяДР=Строка96.СтатьяДР;
	//	НС.Сумма=Строка96.Сумма;
	//КонецЦикла;	
	//БазаПоНачислениям96.Свернуть("СтатьяДР","Сумма");
	//
	//БазаПоРезервам96=Новый ТаблицаЗначений;
	//БазаПоРезервам96.Колонки.Добавить("СтатьяДР");
	//БазаПоРезервам96.Колонки.Добавить("Сумма");
	//БазаПоРезервам96.Колонки.Добавить("Счет");
	//Для каждого стр из Начисления Цикл
	//	Если Стр.ВидНачисления.Код="000000008" или Стр.ВидНачисления.Код="000000013" или Стр.ВидНачисления.Код="000000010" или Стр.ВидНачисления.Код="000000009" или Стр.ВидНачисления.Код="000000023" Тогда//База оценочных резервов
	//		СтруктураОтбора=Новый Структура;
	//		СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
	//		СтруктураОтбора.Вставить("Счет",Сч96);	
	//		Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
	//		Если Найденные.Количество()=0 Тогда
	//			Сообщить("Не найдена настройка отражения резервов по "+Стр.ЦФО);
	//		Иначе	
	//			НС=БазаПоРезервам96.Добавить();
	//			НС.Сумма=Стр.Сумма;
	//			НС.СтатьяДР=Найденные[0].СтатьяДР;
	//			НС.Счет=стр.Счет;
	//			//Если не ЗначениеЗаполнено(НС.Счет) Тогда
	//			//	НС.Счет=Сч44_3;
	//			//КонецЕсли;	
	//		КонецЕсли;	
	//	КонецЕсли;
	//КонецЦикла;	
	//
	//БазаПоРезервам96.Свернуть("Счет,СтатьяДР","Сумма");
	//
	//Пока выборка.следующий() Цикл	
	//	Если Выборка.СчДт="96" Тогда  // начисления на 96 и налоги с них
	//		Распределено=0;
	//		Для каждого СтатьяДР из БазаПоНачислениям96 Цикл
	//			Статья96=СтатьяДР.СтатьяДР;
	//			НС=ПрочиеПроводки.Добавить();
	//			Организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
	//			НС.Организация=Организация;
	//			НС.Сумма=Выборка.Сумма*СтатьяДР.Сумма/БазаПоНачислениям96.Итог("Сумма");
	//			Распределено=Распределено+НС.Сумма;
	//			НС.Период=КонецМесяца(Период);
	//			НС.СчДт=Сч96;
	//			НС.СубконтоДт1=Организация;
	//			НС.СубконтоДт2=Статья96;
	//			НС.СчКт=Сч68;
	//			НС.СубконтоКт1=Организация;
	//			НС.СубконтоКт2=ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(Выборка.СчКт);
	//			НС.Содержание="Перенос "+НС.СубконтоКт2+" на резервы по отпускам";
	//			//Если НС.СубконтоКт2.Код="000000010" Тогда //НДФЛ
	//			//	НС.Сумма=Цел(НС.Сумма*0.13);
	//			//КонецЕсли;	
	//		КонецЦикла;	
	//		Если ПрочиеПроводки.Количество()<>0 Тогда
	//			ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма=ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма-(Распределено-Выборка.Сумма)*?(НС.СубконтоКт2.Код="000000010",0.13,1);
	//		КонецЕсли;	
	//	Иначе // начисления резервов
	//		Распределено=0;
	//		Для каждого СтатьяДР из БазаПоРезервам96 Цикл
	//			Статья96=СтатьяДР.СтатьяДР;
	//			НС=ПрочиеПроводки.Добавить();
	//			Организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
	//			НС.Организация=Организация;
	//			НС.Сумма=Выборка.Сумма*СтатьяДР.Сумма/БазаПоРезервам96.Итог("Сумма");
	//			//НС.Сумма=Выборка.Сумма*СтатьяДР.Сумма/БазаПоРезервам96Итог(СтатьяДР.Счет,БазаПоРезервам96);
	//			Распределено=Распределено+НС.Сумма;
	//			НС.Период=КонецМесяца(Период)+1;
	//			НС.СчДт=СтатьяДР.Счет;
	//			НС.СубконтоДт1=Все;
	//			Если Выборка.Субконто="Оплата труда" Тогда
	//				//НС.СубконтоДт2=РезервНаОтпускные;
	//				НС.Содержание="Резерв по отпускам";
	//				//НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
	//				НС.СубконтоКт2=Статья96;
	//			Иначе	
	//				//НС.СубконтоДт2=РезервНаНалоги;
	//				НС.Содержание="Взносы на резерв по отпускам";
	//				НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
	//			КонецЕсли;	
	//			НС.СубконтоДт2=НС.СубконтоКт2;
	//			НС.СубконтоДт3=УпрИнф;
	//			НС.СчКт=Сч96;
	//			НС.СубконтоКт1=Организация;
	//			Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
	//				НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
	//			ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
	//				НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
	//			ИначеЕсли НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
	//				НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
	//			КонецЕсли;	
	//		КонецЦикла;	
	//		ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма=ПрочиеПроводки[ПрочиеПроводки.Количество()-1].Сумма-(Распределено-Выборка.Сумма);
	//	КонецЕсли;
	//	
	//	/////
	//	Если Выборка.СчДт="96" И Выборка.СчКт="70" Тогда // Надо сторнировать НДФЛ
	//		НС=ПрочиеПроводки.Добавить();
	//		НС.Период=КонецМесяца(Период);
	//		НС.Организация=Организация;
	//		НС.Сумма=-Выборка.Сумма;
	//		НС.Сумма=Цел(НС.Сумма*0.13);
	//		
	//		ЦФО=неопределено;
	//		Если ЗначениеЗаполнено(Выборка.Подразделение.Наименование) Тогда
	//			ЦФО=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(v82.XmlСтрока(Выборка.Подразделение.УникальныйИдентификатор())));
	//		КонецЕсли;
	//		
	//		СтруктураОтбора=Новый Структура;
	//		СтруктураОтбора.Вставить("ЦФО",ЦФО);
	//		СтруктураОтбора.Вставить("ВидНачисления",Справочники.ВидыНачисленийЗУП.НДФЛ);
	//		СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
	//		Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
	//		Если Найденные.Количество()=0 Тогда
	//			
	//		Иначе	
	//			НС.СубконтоДт2=Найденные[0].СтатьяДР;
	//			НС.СчДт=Найденные[0].Счет;
	//		КонецЕсли;	
	//		НС.СубконтоДт1=Все;
	//		НС.СубконтоДт3=ЦФО;
	//		НС.СчКт=Сч68;
	//		НС.СубконтоКт1=Организация;
	//		НС.СубконтоКт2=ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(Выборка.СчКт);
	//		НС.Содержание="Корректировка начисленных сумм с резервов ";
	//		
	//		
	//	КонецЕсли;	
	//	////
	//КонецЦикла;
	#КонецОбласти 
	//---АК POZM 
	
	// Надо сторнировать остальные налоги
	///////////////////////////////////
	СтруктураОтбораСумм96=Новый Структура;
	СтруктураОтбораСумм96.Вставить("Счет",Сч96);
	
	Строки96=Начисления.НайтиСтроки(СтруктураОтбораСумм96);
	Для каждого Строка96 из Строки96 Цикл
		База=Новый ТаблицаЗначений;
		База.Колонки.Добавить("Организация");
		База.Колонки.Добавить("ЦФО");
		База.Колонки.Добавить("СтатьяДР");
		База.Колонки.Добавить("ВидНачисления");
		База.Колонки.Добавить("Счет");
		База.Колонки.Добавить("Сумма");
		ОтборПоФизлицу=Новый Структура;
		ОтборПоФизлицу.Вставить("ФизЛицо",Строка96.ФизЛицо);
		НачисленияФизЛица=Начисления.НайтиСтроки(ОтборПоФизЛицу);
		Для каждого начисление из НачисленияФизЛица Цикл
			НС=База.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Начисление);
		КонецЦикла;	
		НалогиФИзЛица=Налоги.НайтиСтроки(ОтборПоФизлицу);
		
		Для Каждого Налог из НалогиФИзЛица Цикл
			Если Налог.ВидНачисления=Справочники.ВидыНачисленийЗУП.НДФЛ Тогда // уже сторнирован
				продолжить;
			КонецЕсли;	
			ВсегоБаза=База.Итог("Сумма");
			Для каждого стр из База Цикл
				Если Стр.Счет=Сч96 Тогда
					СуммаОтнесения=Налог.Сумма*Стр.Сумма/ВсегоБаза;
					//
					НС=ПрочиеПроводки.Добавить();
					НС.Период=КонецМесяца(Период);
					НС.Организация=Налог.Организация;
					НС.Сумма=-СуммаОтнесения;
					ЦФО=Налог.ЦФО;
					
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("ЦФО",ЦФО);
					СтруктураОтбора.Вставить("ВидНачисления",Налог.ВидНачисления);
					СтруктураОтбора.Вставить("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка());
					Найденные=НастройкиОтраженияЗП.НайтиСтроки(СтруктураОтбора);
					Если Найденные.Количество()=0 Тогда
						
					Иначе	
						НС.СубконтоДт2=Найденные[0].СтатьяДР;
						НС.СчДт=Найденные[0].Счет;
					КонецЕсли;	
					//+++АК sils 15.05.2018 ИП-00018466
					//НС.СубконтоДт1=Все;
					НС.СубконтоДт1=ПолучитьТТПоОрганизации(НС.Организация);
					//---АК
					НС.СубконтоДт3=ЦФО;
					НС.СчКт=Сч68;
					НС.СубконтоКт1=Налог.Организация;
					НС.СубконтоКт2=Налог.ВидНачисления.ВидНалогов;
					НС.Содержание="Корректировка начисленных сумм с резервов ";
					//
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	// на 44.4 субконто перепутаны
	Сч44_4=ПланыСчетов.Финансовый.НайтиПоКоду("44.4");
	Для каждого стр из ПрочиеПроводки Цикл
		Если Стр.СчДт=Сч44_4 Тогда
			Стр.СубконтоДт1=Стр.СубконтоДт2;
			Стр.СубконтоДт2=Стр.СубконтоДт3;
			Стр.СубконтоДт3=неопределено;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ПП=ПрочиеПроводки.Выгрузить();
	ПП.Свернуть("СчДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,Содержание,Организация,Период","Сумма");
	ПрочиеПроводки.Загрузить(ПП);
	//////////////////////////////////
	ТекстЗапроса="ВЫБРАТЬ
	|	УдержанияРаботниковОрганизаций.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	УдержанияРаботниковОрганизаций.ФизЛицо.Код КАК ФизЛицоКод,
	|	УдержанияРаботниковОрганизаций.Организация.ИНН КАК ИННОрганизации,
	|	СУММА(УдержанияРаботниковОрганизаций.Результат) КАК Результат
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|		ПО УдержанияРаботниковОрганизаций.ДокументОснование = ИсполнительныйЛист.Ссылка
	|ГДЕ
	|	УдержанияРаботниковОрганизаций.ПериодРегистрации = &ПериодРегистрации
	|	И (УдержанияРаботниковОрганизаций.Организация.ИНН = &ИННОрганизации
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанияРаботниковОрганизаций.ФизЛицо,
	|	УдержанияРаботниковОрганизаций.Организация";
	
	запрос=v82.NewObject("Запрос");  
	запрос.текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПериодРегистрации",Период);
	Запрос.УстановитьПараметр("ИННОрганизации",Организация_фильтр.ИНН);
	Если ЗначениеЗаполнено(Организация_фильтр) Тогда
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",истина);
	КонецЕсли;		
	
	Выборка=Запрос.Выполнить().Выбрать();
	УдержанияПоИсполнительнымЛистам.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Результат<>0 Тогда
			НС=УдержанияПоИсполнительнымЛистам.Добавить();
			НС.Организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
			//НС.ФизЛицо=Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.ФизЛицоНаименование);
			ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Код",Выборка.ФизЛицоКод));
			Если ФизЛицаКандидаты.Количество()>0 Тогда
				НС.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
			Иначе
				ФизЛицаКандидаты = КэшФизЛиц.НайтиСтроки(Новый Структура("Наименование",Выборка.ФизЛицоНаименование));
				Если ФизЛицаКандидаты.Количество()>0 Тогда
					НС.ФизЛицо = ФизЛицаКандидаты[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;
			НС.Сумма=Выборка.Результат;
		КонецЕсли;	
	КонецЦикла;	
	
	УдержанияПоИсполнительнымЛистам.Сортировать("Организация, ФизЛицо");
	
	СуммыМесячнаяПремия5.Очистить();
	ОстаткиПодотчета.Очистить();
	ПрочиеПроводкиПремия5.Очистить();
	
	ТекстЗапроса="ВЫБРАТЬ
	|СУММА(РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Результат) КАК Результат,
	|РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Организация,
	|РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Организация.ИНН КАК ИННОрганизации
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|	И РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета.Наименование = ""Месячная премия-5""
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Организация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Организация.ИНН";
	
	запрос=v82.NewObject("Запрос");  
	запрос.текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаС",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаПо",КонецМесяца(Период));
	
	Выборка=Запрос.Выполнить().Выбрать();
	СуммыМесячнаяПремия5.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Справочники.Организации.НайтиПоРеквизиту("ИНН",Выборка.ИННОрганизации);
		НС.Сумма=Выборка.Результат;
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.НайтиПоНаименованию("Месячная премия-5");
	КонецЦикла;	
	ТЗ=СуммыМесячнаяПремия5.Выгрузить();
	УправлениеРозницей=Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление розницей");
	Рогожова=Справочники.ФизическиеЛица.НайтиПоКоду("0000003254");
	НалогиПодотчет=Справочники.СтатьиДоходовРасходов.НайтиПоНаименованию("Подотчет налоги с ФОТ");
	ПромоНаТочке=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20610");
	Для каждого Стр Из ТЗ Цикл
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Стр.Организация;
		НС.Сумма=Окр(Стр.Сумма*0.13);
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.НДФЛ;
		
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Стр.Организация;
		НС.Сумма=Стр.Сумма*0.22;
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ПФР;
		
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Стр.Организация;
		НС.Сумма=Стр.Сумма*0.029;
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС;
		
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Стр.Организация;
		НС.Сумма=Стр.Сумма*0.051;
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФФОМС;
		
		НС=СуммыМесячнаяПремия5.Добавить();
		НС.Организация=Стр.Организация;
		НС.Сумма=Стр.Сумма*0.002;
		НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС_НС;
		
		Если Не ЗначениеЗаполнено(Организация_фильтр) или Организация_фильтр=Стр.Организация Тогда
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=НалогиПодотчет;
			НС.Счет=Сч44_3;
			НС.Сумма=Окр(Стр.Сумма*0.13);
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.НДФЛ;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=НалогиПодотчет;
			НС.Счет=Сч44_3;
			НС.Сумма=Стр.Сумма*0.22;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ПФР;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=НалогиПодотчет;
			НС.Счет=Сч44_3;
			НС.Сумма=Стр.Сумма*0.029;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=НалогиПодотчет;
			НС.Счет=Сч44_3;
			НС.Сумма=Стр.Сумма*0.051;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФФОМС;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=НалогиПодотчет;
			НС.Счет=Сч44_3;
			НС.Сумма=Стр.Сумма*0.002;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС_НС;
			/////////////////////////////////////////////////////////
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=ПромоНаТочке;
			НС.Счет=Сч44_3;
			НС.Сумма=-Окр(Стр.Сумма*0.13);
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.НДФЛ;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=ПромоНаТочке;
			НС.Счет=Сч44_3;
			НС.Сумма=-Стр.Сумма*0.22;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ПФР;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=ПромоНаТочке;
			НС.Счет=Сч44_3;
			НС.Сумма=-Стр.Сумма*0.029;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=ПромоНаТочке;
			НС.Счет=Сч44_3;
			НС.Сумма=-Стр.Сумма*0.051;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФФОМС;
			
			НС=Налоги.Добавить();
			НС.Организация=Стр.Организация;
			НС.ЦФО=УправлениеРозницей;
			НС.ФизЛицо=Рогожова;
			НС.СтатьяДР=ПромоНаТочке;
			НС.Счет=Сч44_3;
			НС.Сумма=-Стр.Сумма*0.002;
			НС.ВидНачисления=Справочники.ВидыНачисленийЗУП.ФСС_НС;
		КонецЕсли;	
		
	КонецЦикла;	
	ТекстЗапроса="ВЫБРАТЬ
	|	ФинансовыйОстатки.Субконто2 КАК ФизЛицо,
	|	СУММА(-ФинансовыйОстатки.СуммаОстаток) КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&НаДату, Счет.Код = ""71.1"", , Субконто1 = &Организация) КАК ФинансовыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОстатки.Субконто2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	Запрос=Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("НаДату",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("НаДату",КонецМесяца(Период)+1);
	Запрос.УстановитьПараметр("Организация",Справочники.Организации.Избенка);
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ОстаткиПодотчета");
	ИтогОстатокПодотчета=ОстаткиПодотчета.Итог("Остаток");
	Сч77_1=ПланыСчетов.Финансовый.НайтиПоКоду("71.1");
	СтруктураПоиска=Новый Структура("ВидНачисления",Справочники.ВидыНачисленийЗУП.НайтиПоНаименованию("Месячная премия-5"));
	СтрокиМС5=Начисления.НайтиСтроки(СтруктураПоиска);
	СтатьяМС5="";
	ЦФОМС5="";
	Если СтрокиМС5.Количество()>0 Тогда
		СтатьяМС5=СтрокиМС5[0].СтатьяДР;
		ЦФОМС5=СтрокиМС5[0].ЦФО;
	КонецЕсли;	
	Для Каждого Стр Из ОстаткиПодотчета Цикл
		НС=ПрочиеПроводкиПремия5.Добавить();
		НС.Период=КонецМесяца(Период);
		НС.Организация=Справочники.Организации.Избенка;
		НС.Сумма=Стр.Остаток;
		НС.СубконтоДт1=Справочники.Организации.Избенка;
		НС.СубконтоДт2=Стр.ФизЛицо;
		НС.СчДт=Сч77_1;
		
		НС.СубконтоКт1=Все;
		//НС.СубконтоДт3=ЦФО;
		НС.СчКт=Сч44_3;
		//НС.СубконтоКт1=Налог.Организация;
		НС.СубконтоКт2=СтатьяМС5;
		НС.СубконтоКт3=ЦФОМС5;
		НС.Содержание="Корректировка подотчета по месячной премии ";
		
	КонецЦикла;	
	ИтогПроводокМС5=ПрочиеПроводкиПремия5.Итог("Сумма");
	
	
	///////////////резервы
	//+++АК POZM 2018.05.13 ИП-00018582 
	
	ТабОтчетаЗУП = v82.АК_ОбщийМодульКлиентСервер.ПолучитьРасчетРезервовПоОтчету(Период,v82.Справочники.Организации.НайтиПоРеквизиту("ИНН",Организация_фильтр.ИНН));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Сотр");
	ТЗ.Колонки.Добавить("ИмяСотра");
	ТЗ.Колонки.Добавить("Продавец");
	ТЗ.Колонки.Добавить("Счет");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНалогов");
	
	Для каждого Стр Из ТабОтчетаЗУП Цикл
		Если Не ЗначениеЗаполнено(Стр.СуммаРезерваПоОтпуску) Тогда
			Продолжить;
		КонецЕсли;	
		ИмяСотра = Стр.ФизЛицо.Наименование;
		
		Сумма = Стр.СуммаРезерваПоОтпуску; 
		СуммаНалогов = Стр.СуммаРезерваПоНалогам;
		Если Сумма=0 Тогда
			Продолжить;
		КонецЕсли;	
		НС=ТЗ.Добавить();
		НС.Сумма = Сумма;
		НС.СуммаНалогов = СуммаНалогов;
		НС.ИмяСотра = ИмяСотра;
		Для Каждого Стр Из Начисления Цикл
			Если СокрЛП(Стр.ФизЛицо)=ИмяСотра И (Стр.Счет.Код="44.2" или Стр.Счет.Код="44.3") Тогда
				НС.Сотр=Стр.ФизЛицо;
				НС.Счет = Стр.Счет;
				Если Найти(нРег(Стр.Должность),"продавец")>0 Тогда
					НС.Продавец = Истина;
					НС.Счет = Сч44_3;
				Иначе
					НС.Продавец = Ложь;
				КонецЕсли;	
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если Не Значениезаполнено(НС.Сотр) Тогда
			НС.Счет = планыСчетов.Финансовый.НайтиПоКоду("44.3");
			НС.Продавец = истина;
		КонецЕсли;	
	КонецЦикла;	
	
	#Область АК_ОтключенныйКод 
	//СсылкаНаОтчет = v82.Справочники.ВнешниеОбработки.НайтиПоКоду("000000045");
	//
	//ИмяФайла = v82.ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные = СсылкаНаОтчет.ХранилищеВнешнейОбработки.Получить();
	//ДвоичныеДанные.Записать(ИмяФайла);
	//
	//ОтчетОбъект = v82.ВнешниеОтчеты.Создать(ИмяФайла);
	//
	//Для Каждого Эл Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
	//	Если СокрЛП(ЗначениеИЗСтрокиВнутр(v82.ЗначениеВСтрокуВнутр(Эл.Параметр)))="Организация" Тогда
	//		Эл.Значение = v82.Справочники.Организации.НайтиПоРеквизиту("ИНН",Организация_фильтр.ИНН);
	//		Эл.Использование = Истина;
	//		ОтчетОбъект.Организация = Эл.Значение;
	//	ИначеЕсли СокрЛП(ЗначениеИЗСтрокиВнутр(v82.ЗначениеВСтрокуВнутр(Эл.Параметр)))="ДатаНачала" Тогда
	//		Эл.Значение = НачалоМесяца(ДобавитьМесяц(Период,-12));
	//		Эл.Использование = Истина;
	//		ОтчетОбъект.ПериодРегистрации = Период;
	//	ИначеЕсли СокрЛП(ЗначениеИЗСтрокиВнутр(v82.ЗначениеВСтрокуВнутр(Эл.Параметр)))="ДатаОкончания" Тогда
	//		Эл.Значение = КонецМесяца(ДобавитьМесяц(Период,-1));	
	//		Эл.Использование = Истина;
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//ТабДок = v82.NewObject("ТабличныйДокумент");  
	//ОтчетОбъект.СкомпоноватьРезультат(ТабДок);
	//
	////ТабДок.Показать();
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("Сотр");
	//ТЗ.Колонки.Добавить("ИмяСотра");
	//ТЗ.Колонки.Добавить("Продавец");
	//ТЗ.Колонки.Добавить("Счет");
	//ТЗ.Колонки.Добавить("Сумма");
	//ТЗ.Колонки.Добавить("СуммаНалогов");
	//Для а = 2 по ТабДок.ВысотаТаблицы-1 Цикл
	//	ИмяСотра = ТабДок.Область(а,1,а,1).Текст;
	//	Если ТабДок.Область(а,4,а,4).Текст="" И ТабДок.Область(а,5,а,5).Текст="" Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	Сумма = Число(ТабДок.Область(а,4,а,4).Текст); 
	//	СуммаНалогов = Число(ТабДок.Область(а,5,а,5).Текст);
	//	Если Сумма=0 Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	НС=ТЗ.Добавить();
	//	НС.Сумма = Сумма;
	//	НС.СуммаНалогов = СуммаНалогов;
	//	НС.ИмяСотра = ИмяСотра;
	//	Для Каждого Стр Из Начисления Цикл
	//		Если СокрЛП(Стр.ФизЛицо)=ИмяСотра И (Стр.Счет.Код="44.2" или Стр.Счет.Код="44.3") Тогда
	//			НС.Сотр=Стр.ФизЛицо;
	//			НС.Счет = Стр.Счет;
	//			Если Найти(нРег(Стр.Должность),"продавец")>0 Тогда
	//				НС.Продавец = Истина;
	//				НС.Счет = Сч44_3;
	//			Иначе
	//				НС.Продавец = Ложь;
	//			КонецЕсли;	
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//	Если Не Значениезаполнено(НС.Сотр) Тогда
	//		НС.Счет = планыСчетов.Финансовый.НайтиПоКоду("44.3");
	//		НС.Продавец = истина;
	//	КонецЕсли;	
	//КонецЦикла;	
	#КонецОбласти 
	ТЗ.Свернуть("Счет,Продавец","Сумма,СуммаНалогов");	
	НачислениеРезервов.Очистить();
	Для каждого Стр Из ТЗ Цикл
		НС=НачислениеРезервов.Добавить();
		НС.Период=КонецМесяца(Период);
		НС.СчДт = Стр.Счет;
		//+++АК sils 15.05.2018 ИП-00018466
		//НС.СубконтоДт1 = Все;
		НС.СубконтоДт1 = ПолучитьТТПоОрганизации(Организация_фильтр);
		//---АК
		НС.СубконтоДт3 = УпрИнф;
		НС.СчКт = Сч96;
		НС.СубконтоКт1 = Организация_фильтр;
		НС.Организация = Организация_фильтр;
		Если Стр.Продавец Тогда
			НС.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20523");
		Иначе	
			НС.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("37197");
		КонецЕсли;
		НС.СубконтоКт2 = НС.СубконтоДт2;
		НС.Сумма = Стр.Сумма;
		НС.Содержание = "Резерв по отпускам";
		Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
			НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
			//ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			//	НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
		Иначе//Если НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
		КонецЕсли;	
		/////
		НС=НачислениеРезервов.Добавить();
		
		НС.Период=КонецМесяца(Период);
		НС.СчДт = Стр.Счет;
		//+++АК sils 15.05.2018 ИП-00018466
		//НС.СубконтоДт1 = Все;
		НС.СубконтоДт1 = ПолучитьТТПоОрганизации(Организация_фильтр);
		//---АК
		НС.СубконтоДт3 = УпрИнф;
		НС.СчКт = Сч96;
		НС.СубконтоКт1 = Организация_фильтр;
		НС.Организация = Организация_фильтр;
		Если Стр.Продавец Тогда
			НС.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20524");
		Иначе	
			НС.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("37198");
		КонецЕсли;
		НС.СубконтоКт2 = НС.СубконтоДт2;
		НС.Сумма = Стр.СуммаНалогов;
		НС.Содержание = "Взносы на резерв по отпускам";
		Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
			НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
			//ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			//	НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
		Иначе//Если НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
		КонецЕсли;	
	КонецЦикла;	
	
	//+++АК ILIK 2018.07.30 ИП-00019022.01
	УдержанияПоОбучению.Очистить();
	
	Запрос = v82.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН КАК ОрганизацияИНН,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1,
				   |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.Код,
				   |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.Наименование,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ПодразделениеДт,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ПодразделениеКт,
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СуммаНУ
	               |ИЗ
	               |	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете" + ?(ЗначениеЗаполнено(ЦФО_фильтр), "
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АК_СотрудникиУпрПодразделений.СрезПоследних(&ПериодРегистрации, ) КАК АК_СотрудникиУпрПодразделенийСрезПоследних
	               |		ПО ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 = АК_СотрудникиУпрПодразделенийСрезПоследних.ФизЛицо
				   |			И (АК_СотрудникиУпрПодразделенийСрезПоследних.Подразделение = &Подразделение)", "") + "
	         	   |ГДЕ
	               |	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Проведен
	               |	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации = &ПериодРегистрации
	               |	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)
	               |	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПрочимОперациям)" + ?(ЗначениеЗаполнено(Организация_фильтр), "
	               |	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация.ИНН = &ИННОрганизации", "") + "
	               |ИТОГИ ПО
	               |	ОрганизацияИНН";
	Запрос.УстановитьПараметр("ПериодРегистрации", Период);
	Если ЗначениеЗаполнено(Организация_фильтр) Тогда
		Запрос.УстановитьПараметр("ИННОрганизации", Организация_фильтр.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЦФО_фильтр) Тогда
		Запрос.УстановитьПараметр("Подразделение", v82.Справочники.Подразделения.ПолучитьСсылку(V82.NewObject("УникальныйИдентификатор", Строка(ЦФО_фильтр.УникальныйИдентификатор()))));
	КонецЕсли;
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(v82.ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		СпрОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ВыборкаОрганизаций.ОрганизацияИНН);
		
		Выборка = ВыборкаОрганизаций.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = УдержанияПоОбучению.Добавить();
			НовСтр.Организация = СпрОрганизация;
			НайденнаяСтрока = КэшФизЛиц.Найти(Выборка.СубконтоДт1Код, "Код");
			Если НайденнаяСтрока <> Неопределено Тогда
				НовСтр.ФизЛицо = НайденнаяСтрока.Ссылка;
			Иначе
				НайденнаяСтрока = КэшФизЛиц.Найти(Выборка.СубконтоДт1Наименование, "Наименование");
				Если НайденнаяСтрока <> Неопределено Тогда
					НовСтр.ФизЛицо = НайденнаяСтрока.Ссылка;
				КонецЕсли;
			КонецЕсли;
			НовСтр.Сумма = Выборка.Сумма;
		КонецЦикла;
	КонецЦикла;
	//---АК ILIK
КонецПроцедуры	

Функция БазаПоРезервам96Итог(Счет,БазаПоРезервам96)
	Сумма=0;
	Для каждого стр из БазаПоРезервам96 Цикл
		Если Стр.Счет=Счет Тогда
			Сумма=Сумма+Стр.Сумма;
		КонецЕсли;	
	КонецЦикла;
	Возврат Сумма;
КонецФункции	

Функция ПолучитьСубконтоВидаНалоговПоКодуСчетаЗУП(КодСчета)
	Если КодСчета="69.01" Тогда
		ВидНалогов=Справочники.ВидыНалогов.НайтиПоКоду("000000011");//ФСС 2,9
	ИначеЕсли КодСчета="69.02.7" Тогда	
		ВидНалогов=Справочники.ВидыНалогов.НайтиПоКоду("000000004");//ПФР страховая
	ИначеЕсли КодСчета="69.03.1" Тогда		
		ВидНалогов=Справочники.ВидыНалогов.НайтиПоКоду("000000006");//ФФОМС
	ИначеЕсли КодСчета="69.11" Тогда
		ВидНалогов=Справочники.ВидыНалогов.НайтиПоКоду("000000008");//НС
	ИначеЕсли КодСчета="70" Тогда	
		ВидНалогов=Справочники.ВидыНалогов.НайтиПоКоду("000000010");//НДФЛ
	Иначе	
		Сообщить("Счета с кодом "+КодСчета+" не описано в алгоритме по оценочным обязательствам");
		ВидНалогов=Справочники.ВидыНалогов.ПустаяСсылка();
	КонецЕсли;	
	Возврат ВидНалогов; 
КонецФункции	

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СоздатьДокументыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводныеНачисления()
	НачисленияСводно.Очистить();
	
	ТЗ=Начисления.Выгрузить();
	ТЗ.Свернуть("ФизЛицо,Сотрудник,СтатьяДР,Счет,ЦФО,Организация,ОблагаетсяНДФЛ","Сумма,СуммаБезНДФЛ");
	
	Для каждого стр из ТЗ Цикл
		Если Стр.ОблагаетсяНДФЛ Тогда
			Стр.СуммаБезНДФЛ=стр.Сумма-стр.Сумма*0.13;
			
			Если ЗначениеЗаполнено(Стр.СтатьяДР) и Стр.СтатьяДР.Код="20510" Тогда
				Стр.СуммаБезНДФЛ=Цел(Стр.СуммаБезНДФЛ);
			КонецЕсли;	
			
		Иначе
			Стр.СуммаБезНДФЛ=стр.Сумма;
		КонецЕсли;	
		
	КонецЦикла;	
	НачисленияСводно.Загрузить(ТЗ);
	
	НачисленияСводно.Сортировать("Организация,ФизЛицо,ОблагаетсяНДФЛ,Сумма");
	ФизЛицо="";
	ПредСтрока=неопределено;
	СуммаНДФЛ=0;
	НДФЛПоСотру=0;
	Предстрока=неопределено;
	Для каждого стр из НачисленияСводно Цикл // корректируем НДФЛ
		Если ФизЛицо<>Стр.ФизЛицо Тогда
			Если ФизЛицо<>"" и ПредСтрока<>неопределено и ФизЛицо=ПредСтрока.ФизЛицо Тогда
				ПредСтрока.СуммаБезНДФЛ=ПредСтрока.СуммаБезНДФЛ-(СуммаНДФЛ-НДФЛПоСотру);
			КонецЕсли;	
			Отбор=Новый Структура();
			Отбор.Вставить("ФизЛицо",Стр.ФизЛицо);
			Отбор.Вставить("Организация",Стр.Организация);
			Отбор.Вставить("ВидНачисления",Справочники.ВидыНачисленийЗУП.НДФЛ);
			нашли = Налоги.НайтиСтроки(Отбор);
			СуммаНДФЛ=0;
			Если нашли.количество()>0 Тогда
				СуммаНДФЛ=нашли[0].Сумма;
			КонецЕсли;	
			//ФизЛицо=Стр.ФизЛицо;
			НДФЛПоСотру=0;
		КонецЕсли;	
		НДФЛПоСотру=НДФЛПоСотру+Стр.Сумма-Стр.СуммаБезНДФЛ;
		Если ЗначениеЗаполнено(Стр.СтатьяДР) и Стр.СтатьяДР.Код<>"20510" и Стр.ОблагаетсяНДФЛ Тогда
			ПредСтрока=Стр;
		КонецЕсли;
		ФизЛицо=Стр.ФизЛицо;
		
	КонецЦикла;	
	Если ФизЛицо<>"" Тогда
		НачисленияСводно[НачисленияСводно.Количество()-1].СуммаБезНДФЛ=НачисленияСводно[НачисленияСводно.Количество()-1].СуммаБезНДФЛ+СуммаНДФЛ-НДФЛПоСотру;
	КонецЕсли;
	
	Для каждого стр из НачисленияСводно Цикл
		Стр.Отклонение=Стр.СуммаБезНДФЛ-Стр.СуммаБезНДФЛ_В_ИБ;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьДокументыНаСервере()
	/////////////////////////////////////////////
	ЗаполнитьСводныеНачисления();
	/////////////////////////////////////////////////
	ТЗ=НачисленияСводно.Выгрузить();
	ТЗ.Свернуть("ФизЛицо,Сотрудник,Организация,ЦФО,СтатьяДР,Счет","Сумма,СуммаБезНДФЛ");
	ТЗ.Сортировать("Организация,ЦФО,СтатьяДР,Счет,ФизЛицо");
	Док=Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(Стр.Организация) и ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.СтатьяДР)и ЗначениеЗаполнено(Стр.Счет)и ЗначениеЗаполнено(Стр.ФизЛицо) и Стр.Сумма<>0 Тогда
			Если Док.Организация<>Стр.Организация или (Док.СубконтоДт3<>Стр.ЦФО и ТипЗнч(Стр.СтатьяДР)=Тип("СправочникСсылка.СтатьиДоходовРасходов")) или Док.СчетЗатрат<>Стр.Счет или Док.СубконтоДт2<>Стр.СтатьяДР Тогда
				Если Док.Начисления.Количество()>0 Тогда
					Док.Записать();
					Сообщить("Сформирован документ "+Док);
				КонецЕсли;
				Док=НайтиИлиСоздатьДокументНачисления(Стр.Организация,Стр.ЦФО,Стр.СтатьяДР);
				Док.СчетЗатрат=Стр.Счет;
				Если Док.СчетЗатрат.Код="96" Тогда  //96й ведется по организациям, в отличие от остальных
					Док.СубконтоДт1=Стр.Организация;
				КонецЕсли;	
			КонецЕсли;	
			НС=Док.Начисления.Добавить();
			НС.Сотрудник=Стр.Сотрудник;
			НС.Физлицо=Стр.ФизЛицо;
			//НС.Результат=Стр.СуммаБезНДФЛ;
			НС.Результат=Стр.Сумма;
		КонецЕсли;	
		
	КонецЦикла;	
	Если Док.Начисления.Количество()>0 Тогда
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
КонецПроцедуры	

Функция НайтиИлиСоздатьДокументНачисления(Организация,ЦФО,СтатьяДР)
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
	//			 |ИЗ
	//			 |	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	//			 |ГДЕ
	//			 |	НачислениеЗарплатыРаботникамОрганизаций.Организация = &Организация
	//			 |	И НачислениеЗарплатыРаботникамОрганизаций.СубконтоДт1 = &СубконтоДт1
	//			 |	И НачислениеЗарплатыРаботникамОрганизаций.СубконтоДт2 = &СубконтоДт2
	//			 |	И (НачислениеЗарплатыРаботникамОрганизаций.СубконтоДт3 = &СубконтоДт3
	//			 |			ИЛИ &ЭтоНалог)
	//			 |	И НачислениеЗарплатыРаботникамОрганизаций.Комментарий ПОДОБНО &Комментарий
	//			 |	И НачислениеЗарплатыРаботникамОрганизаций.Дата МЕЖДУ &ДатаС И &ДатаПо
	//			 |	И НачислениеЗарплатыРаботникамОрганизаций.СубконтоДт2.Наименование <> ""ФСС 2,9%""";
	//Запрос=Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("Организация",Организация);
	//Если ТипЗнч(СтатьяДР)=Тип("СправочникСсылка.ВидыНалогов") Тогда
	//	Запрос.УстановитьПараметр("СубконтоДт1",Организация);
	//	Запрос.УстановитьПараметр("СубконтоДт2",СтатьяДР);
	//	Запрос.УстановитьПараметр("СубконтоДт3",NULL);
	//	Запрос.УстановитьПараметр("ЭтоНалог",истина);
	//Иначе	
	//	Запрос.УстановитьПараметр("СубконтоДт1",Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"));
	//	Запрос.УстановитьПараметр("СубконтоДт2",СтатьяДР);
	//	Запрос.УстановитьПараметр("СубконтоДт3",ЦФО);
	//	Запрос.УстановитьПараметр("ЭтоНалог",Ложь);
	//КонецЕсли;	
	//Запрос.УстановитьПараметр("Комментарий","Сформирован автоматически, загрузкой данных из ЗУП");
	//Запрос.УстановитьПараметр("ДатаС",НачалоМесяца(Период));
	//Запрос.УстановитьПараметр("ДатаПо",КонецМесяца(Период));
	//Выборка=Запрос.Выполнить().Выбрать();
	//Если выборка.Следующий() Тогда
	//	Док=Выборка.ссылка.получитьОбъект();
	//	док.начисления.очистить();
	//Иначе	
	Док=Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	//КонецЕсли;	
	Док.Дата=КонецМесяца(Период);
	Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП";
	Док.Организация=организация;
	Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	
	Если ТипЗнч(СтатьяДР)=Тип("СправочникСсылка.ВидыНалогов") Тогда
		Док.СубконтоДт1=Организация;
		Док.СубконтоДт2=СтатьяДР;
	Иначе	
		Док.СубконтоДт2=СтатьяДР;
		Док.СубконтоДт3=ЦФО;
		//+++АК sils 15.05.2018 ИП-00018466
		//Док.СубконтоДт1=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
		Док.СубконтоДт1=ПолучитьТТПоОрганизации(Док.Организация);
	КонецЕсли;	
	Возврат Док;
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Период=НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	ПроцентПоНалогам=28.1;
	//+++АК sils 15.05.2018 ИП-00018466
	ТилсиОбщий = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", 10080);
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	Период=НачалоМесяца(Период);
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьНастройкиОтраженияЗарплаты(Команда)
	ОткрытьФОрму("РегистрСведений.НастройкаОтраженияЗарплатыПоВидамНачисления.ФормаСписка");
КонецПроцедуры

&НаСервере
Функция НайтиСотрудника(ФизЛицо,Организация)
	ТекстЗапроса="ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.Организация = &Организация
	|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
	|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ДОБАВИТЬКДАТЕ(СотрудникиОрганизаций.ДатаУвольнения, МЕСЯЦ, 6) >= &ПериодНачислений)";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПериодНачислений",Период);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	КонецЕсли;	
	Возврат справочники.СотрудникиОрганизаций.ПустаяСсылка();
КонецФункции	

&НаКлиенте
Процедура СформироватьДокументыПоНалогам(Команда)
	СформироватьДокументыПоНалогамНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПоНалогамНаСервере()
	ТабНалогов=Налоги.Выгрузить();
	ТабНалогов.Свернуть("Организация,ЦФО,ВидНачисления,СтатьяДР,Счет","Сумма");
	ТабНалогов.Сортировать("Организация,ЦФО,ВидНачисления,СтатьяДР,Счет");
	Док=Документы.Операция.СоздатьДокумент();
	Для каждого стр из ТабНалогов Цикл
		Если Стр.ВидНачисления.Код<>"000000001" Тогда // Не НДФЛ
			Если ЗначениеЗаполнено(Стр.Организация) и ЗначениеЗаполнено(Стр.ЦФО)и ЗначениеЗаполнено(Стр.СтатьяДР)и ЗначениеЗаполнено(Стр.Счет) и Стр.Сумма<>0 Тогда
				Если Док.Организация<>Стр.Организация Тогда
					Если Док.Движения.Финансовый.Количество()>0 Тогда
						Док.Записать();
						Сообщить("Сформирован документ "+Док);
					КонецЕсли;
					Док=НайтиИлиСоздатьДокументНачисленияНалогов(Стр.Организация);
				КонецЕсли;	
				Проводка=Док.Движения.Финансовый.Добавить();
				Проводка.Период=Док.Дата;
				Проводка.Содержание="";
				Проводка.Сумма=Стр.Сумма;
				Проводка.СчетДт=Стр.Счет;
				Если Проводка.СчетДт.Код="44.4" Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.СтатьяДР);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Стр.ЦФО);
				Иначе	
					//+++АК sils 15.05.2018 ИП-00018466
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"));
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПолучитьТТПоОрганизации(Стр.Организация));
					//---АК
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Стр.СтатьяДР);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Стр.ЦФО);
				КонецЕсли;	
				Проводка.СчетКт=ПланыСчетов.Финансовый.НалогиСФОТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Стр.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Стр.ВидНачисления.ВидНалогов);
				
			КонецЕсли;
		Иначе	
			Cч70 = ПланыСчетов.Финансовый.НайтиПоКоду("70");
			Сч68 = ПланыСчетов.Финансовый.НалогиСФОТ;
			Если ЗначениеЗаполнено(Стр.Организация) и Стр.Сумма<>0 Тогда
				Если Док.Организация<>Стр.Организация Тогда
					Если Док.Движения.Финансовый.Количество()>0 Тогда
						Док.Записать();
						Сообщить("Сформирован документ "+Док);
					КонецЕсли;
					Док=НайтиИлиСоздатьДокументНачисленияНалогов(Стр.Организация);
				КонецЕсли;	
				Проводка=Док.Движения.Финансовый.Добавить();
				Проводка.Период=Док.Дата;
				Проводка.Содержание="";
				Проводка.Сумма=Стр.Сумма;
				Проводка.СчетДт=Cч70;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.Организация);
				
				Проводка.СчетКт=ПланыСчетов.Финансовый.НалогиСФОТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Стр.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Стр.ВидНачисления.ВидНалогов);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Если Док.Движения.Финансовый.Количество()>0 Тогда
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
	
КонецПроцедуры	


Функция НайтиИлиСоздатьДокументНачисленияНалогов(Организация)
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	Операция.Ссылка
	//			 |ИЗ
	//			 |	Документ.Операция КАК Операция
	//			 |ГДЕ
	//			 |	Операция.Организация = &Организация
	//			 |	И Операция.Комментарий ПОДОБНО &Комментарий
	//			 |	И Операция.Дата МЕЖДУ &ДатаС И &ДатаПо";
	//Запрос=Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("Организация",Организация);
	//Запрос.УстановитьПараметр("Комментарий","Сформирован автоматически, загрузкой данных из ЗУП");
	//Запрос.УстановитьПараметр("ДатаС",НачалоМесяца(Период));
	//Запрос.УстановитьПараметр("ДатаПо",КонецМесяца(Период));
	//Выборка=Запрос.Выполнить().Выбрать();
	//Если выборка.Следующий() Тогда
	//	Док=Выборка.ссылка.получитьОбъект();
	//	док.движения.Финансовый.очистить();
	//Иначе	
	Док=Документы.Операция.СоздатьДокумент();
	//КонецЕсли;	
	Док.Дата=КонецМесяца(Период);
	Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП";
	Док.Организация=организация;
	Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	Док.Содержание="Начисление налогов с ФОТ";
	Возврат Док;
КонецФункции	


&НаКлиенте
Процедура СопоставитьСДаннымиИБ(Команда)
	СопоставитьСервер();
КонецПроцедуры

&НаСервере
Процедура СопоставитьСервер()
	ЗаполнитьСводныеНачисления();
	ТЗ=НачисленияСводно.Выгрузить();
	ТекстЗапроса="ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	СУММА(ВложенныйЗапрос.Результат) КАК Результат,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.СчетЗатрат КАК Счет,
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.СтатьяДР
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат КАК Результат,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|		ВЫБОР
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код <> ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт3
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код = ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ЦФО,
	|		ВЫБОР
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код <> ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код = ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт1
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч68)
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СтатьяДР
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|	ГДЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|		И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.СчетЗатрат,
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.СтатьяДР";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ДатаС",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаПо",КонецМесяца(Период));
	Запрос.УстановитьПараметр("Сч44",ПланыСчетов.Финансовый.НайтиПоКоду("44"));
	Запрос.УстановитьПараметр("Сч68",ПланыСчетов.Финансовый.НайтиПоКоду("68"));
	Выборка=Запрос.Выполнить().Выбрать();
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Сотрудник");
	СтруктураОтбора.Вставить("Организация");
	СтруктураОтбора.Вставить("Счет");
	//СтруктураОтбора.Вставить("ЦФО");
	СтруктураОтбора.Вставить("СтатьяДР");
	Пока выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Организация_фильтр)и выборка.Организация<>Организация_фильтр Тогда 
			продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦФО_фильтр)и выборка.ЦФО<>ЦФО_фильтр Тогда 
			продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,Выборка);
		найденные=ТЗ.НайтиСтроки(СтруктураОтбора);
		Если найденные.количество()>0 Тогда
			Если ЗначениеЗаполнено(выборка.ЦФО)Тогда
				былосовпадение=ложь;
				Для каждого найденный из найденные цикл
					Если найденный.ЦФО=Выборка.ЦФО Тогда
						найденный.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
						найденный.Отклонение=найденный.СуммаБезНДФЛ-найденный.СуммаБезНДФЛ_В_ИБ;
						былосовпадение=истина;
					КонецЕсли;
				КонецЦикла;
				если не былосовпадение тогда
					НС=ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НС,выборка);
					НС.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
					НС.Отклонение=НС.СуммаБезНДФЛ-НС.СуммаБезНДФЛ_В_ИБ;
				КонецЕсли;	
			Иначе
				найденные[0].СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
				найденные[0].Отклонение=найденные[0].СуммаБезНДФЛ-найденные[0].СуммаБезНДФЛ_В_ИБ;
			КонецЕсли;	
			
		Иначе
			НС=ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС,выборка);
			НС.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
			НС.Отклонение=НС.СуммаБезНДФЛ-НС.СуммаБезНДФЛ_В_ИБ;
		КонецЕсли;	
	КонецЦикла;	
	ТЗ.Сортировать("Сотрудник");
	НачисленияСводно.Загрузить(ТЗ);
КонецПроцедуры	


&НаКлиенте
Процедура СформироватьДокументыПоПрочимПроводкам(Команда)
	СформироватьДокументыПоПрочимПроводкамНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПоПрочимПроводкамНаСервере()
	Таб=ПрочиеПроводки.Выгрузить();
	Таб.Сортировать("Период,Организация");
	Док=Документы.Операция.СоздатьДокумент();
	Для каждого стр из Таб Цикл
		Если ЗначениеЗаполнено(Стр.Организация) и ЗначениеЗаполнено(Стр.Период) и Стр.Сумма<>0 Тогда
			Если Док.Организация<>Стр.Организация или Док.Дата<>Стр.Период  Тогда
				Если Док.Движения.Финансовый.Количество()>0 Тогда
					Док.СуммаОперации=Док.Движения.Финансовый.Итог("Сумма");
					Док.Записать();
					Сообщить("Сформирован документ "+Док);
				КонецЕсли;
				Док=НайтиИлиСоздатьДокументПрочихПроводок(Стр.Организация,Стр.Период);
			КонецЕсли;	
			Проводка=Док.Движения.Финансовый.Добавить();
			Проводка.Период=Док.Дата;
			Проводка.Содержание=Стр.Содержание;
			Проводка.Сумма=Стр.Сумма;
			Проводка.СчетДт=Стр.СчДт;
			Если ЗначениеЗаполнено(Стр.СубконтоДт1) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.СубконтоДт1);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.СубконтоДт2) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Стр.СубконтоДт2);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.СубконтоДт3) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Стр.СубконтоДт3);
			КонецЕсли;
			Проводка.СчетКт=Стр.СчКт;
			Если ЗначениеЗаполнено(Стр.СубконтоКт1) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Стр.СубконтоКт1);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.СубконтоКт2) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Стр.СубконтоКт2);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.СубконтоКт3) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Стр.СубконтоКт3);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	Если Док.Движения.Финансовый.Количество()>0 Тогда
		Док.СуммаОперации=Док.Движения.Финансовый.Итог("Сумма");
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
КонецПроцедуры	

Функция НайтиИлиСоздатьДокументПрочихПроводок(Организация,Дата)
	Док=Документы.Операция.СоздатьДокумент();
	
	Док.Дата=Дата;
	Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП";
	Док.Организация=организация;
	Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	Если Док.Дата=НачалоМесяца(Док.Дата) Тогда
		Док.Содержание="Начисление резерва на отпуска на "+Формат(Дата,"ДФ='MMMM yyyy'");
	Иначе	
		Док.Содержание="Начисление налогов ФОТ от отпускных (использование резерва) за "+Формат(Дата,"ДФ='MMMM yyyy'");;
	КонецЕсли;	
	Возврат Док;
КонецФункции

Функция НайтиИлиСоздатьДокументПрочихПроводокПремия5(Организация,Дата)
	Док=Документы.Операция.СоздатьДокумент();
	
	Док.Дата=Дата;
	Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП, корректировка по премии 5";
	Док.Организация=организация;
	Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	//Если Док.Дата=НачалоМесяца(Док.Дата) Тогда
	//	Док.Содержание="Начисление резерва на отпуска на "+Формат(Дата,"ДФ='MMMM yyyy'");
	//Иначе	
	//	Док.Содержание="Начисление налогов ФОТ от отпускных (использование резерва) за "+Формат(Дата,"ДФ='MMMM yyyy'");;
	//КонецЕсли;
	Док.Содержание=Док.Комментарий;
	Возврат Док;
КонецФункции


&НаКлиенте
Процедура СформироватьИсполнительныеЛисты(Команда)
	СформироватьИсполнительныеЛистыСервер();
КонецПроцедуры

&НаСервере
Процедура СформироватьИсполнительныеЛистыСервер()
	ТЗ=УдержанияПоИсполнительнымЛистам.Выгрузить();
	ТЗ.Свернуть("ФизЛицо,Организация","Сумма");
	ТЗ.Сортировать("Организация,ФизЛицо");
	Док=Документы.УдержаниеПоИсполнительнымЛистам.СоздатьДокумент();
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(Стр.Организация) и ЗначениеЗаполнено(Стр.ФизЛицо) и Стр.Сумма<>0 Тогда
			Если Док.Организация<>Стр.Организация Тогда
				Если Док.ФизическиеЛица.Количество()>0 Тогда
					Док.Записать();
					Сообщить("Сформирован документ "+Док);
				КонецЕсли;
				Док=Документы.УдержаниеПоИсполнительнымЛистам.СоздатьДокумент();
				Док.Дата=КонецМесяца(Период);
				Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП";
				Док.Организация=Стр.организация;
				Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;	
			НС=Док.ФизическиеЛица.Добавить();
			НС.Физлицо=Стр.ФизЛицо;
			НС.Сумма=Стр.Сумма;
		КонецЕсли;	
		
	КонецЦикла;	
	Если Док.ФизическиеЛица.Количество()>0 Тогда
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(СтатьяНаОтпуск)
	Если СтатьяНаОтпуск.Код="20523" Тогда 
		Возврат Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20524");
	ИначеЕсли СтатьяНаОтпуск.Код="37197" Тогда 	
		Возврат Справочники.СтатьиДоходовРасходов.НайтиПоКоду("37198");
	КонецЕсли;	
	Возврат справочники.СтатьиДоходовРасходов.ПустаяСсылка();
КонецФункции	

&НаКлиенте
Процедура СопоставитьНачисления(Команда)
	СопоставитьНачисленияСервер();
	Элементы.Группа12.ТекущаяСтраница=Элементы.Группа7;
КонецПроцедуры

&НаСервере
Процедура СопоставитьНачисленияСервер()
	ЗаполнитьСводныеНачисления();
	ТЗ=НачисленияСводно.Выгрузить();
	ТекстЗапроса="ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	СУММА(ВложенныйЗапрос.Результат) КАК Результат,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.СчетЗатрат КАК Счет,
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.СтатьяДР
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат КАК Результат,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|		ВЫБОР
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код <> ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт3
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код = ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ЦФО,
	|		ВЫБОР
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код <> ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч44)
	|					И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат.Код = ""44.4""
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт1
	|			КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СчетЗатрат В ИЕРАРХИИ (&Сч68)
	|				ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.СубконтоДт2
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СтатьяДР
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|	ГДЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|		И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.СчетЗатрат,
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.СтатьяДР";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ДатаС",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаПо",КонецМесяца(Период));
	Запрос.УстановитьПараметр("Сч44",ПланыСчетов.Финансовый.НайтиПоКоду("44"));
	Запрос.УстановитьПараметр("Сч68",ПланыСчетов.Финансовый.НайтиПоКоду("68"));
	Выборка=Запрос.Выполнить().Выбрать();
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Сотрудник");
	СтруктураОтбора.Вставить("Организация");
	СтруктураОтбора.Вставить("Счет");
	//СтруктураОтбора.Вставить("ЦФО");
	СтруктураОтбора.Вставить("СтатьяДР");
	Пока выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Организация_фильтр)и выборка.Организация<>Организация_фильтр Тогда 
			продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦФО_фильтр)и выборка.ЦФО<>ЦФО_фильтр Тогда 
			продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,Выборка);
		найденные=ТЗ.НайтиСтроки(СтруктураОтбора);
		Если найденные.количество()>0 Тогда
			Если ЗначениеЗаполнено(выборка.ЦФО)Тогда
				былосовпадение=ложь;
				Для каждого найденный из найденные цикл
					Если найденный.ЦФО=Выборка.ЦФО Тогда
						найденный.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
						найденный.Отклонение=найденный.СуммаБезНДФЛ-найденный.СуммаБезНДФЛ_В_ИБ;
						былосовпадение=истина;
					КонецЕсли;
				КонецЦикла;
				если не былосовпадение тогда
					НС=ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НС,выборка);
					НС.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
					НС.Отклонение=НС.СуммаБезНДФЛ-НС.СуммаБезНДФЛ_В_ИБ;
				КонецЕсли;	
			Иначе
				найденные[0].СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
				найденные[0].Отклонение=найденные[0].СуммаБезНДФЛ-найденные[0].СуммаБезНДФЛ_В_ИБ;
			КонецЕсли;	
			
		Иначе
			НС=ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС,выборка);
			НС.СуммаБезНДФЛ_В_ИБ=Выборка.Результат;
			НС.Отклонение=НС.СуммаБезНДФЛ-НС.СуммаБезНДФЛ_В_ИБ;
		КонецЕсли;	
	КонецЦикла;	
	ТЗ.Сортировать("Сотрудник");
	НачисленияСводно.Загрузить(ТЗ);
	
	
	// Вывод отчета
	ДанныеРасшифровки=Новый ДанныеРасшифровкиКомпоновкиДанных;
	Схема=Отчеты.СопоставлениеНачислений_ЗУП_УПР.ПолучитьМакет("ПроверкаНачислений");
	АдресСхемыОтчета = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//МакетКомпоновки.
	
	ПроцессорКомпоновки 	= Новый ПроцессорКомпоновкиДанных;
	
	ВнешниеНаборыДанных 	= Новый Структура;
	ВнешниеНаборыДанных.Вставить("Начисления", ТЗ);
	
	МакетКомпоновки=КомпоновщикМакета.Выполнить(Схема,КомпоновщикНастроек.ПолучитьНастройки(),ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"),Ложь);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	
	ТаблицаОтчета.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода 		= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТаблицаОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ТаблицаОтчета.ПоказатьУровеньГруппировокСтрок(1);
КонецПроцедуры	


&НаКлиенте
Процедура НастроитьСопоставлениеНачислений(Команда)
	НастроитьОтчетНаКлиенте(НСтр("ru= 'Сопоставление начислений'"),"Основной");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчетНаКлиенте(ПредставлениеОтчета,ИмяВарианта)
	ИмяОтчетаВарианта = Новый Структура("ИмяОтчета, ПредставлениеОтчета, ИмяВариантаОтчета");
	ИмяОтчетаВарианта.ИмяОтчета				= "СопоставлениеНачислений_ЗУП_УПР";
	ИмяОтчетаВарианта.ПредставлениеОтчета	= ПредставлениеОтчета ;
	ИмяОтчетаВарианта.ИмяВариантаОтчета		= ИмяВарианта;
	//
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вариант",                               КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(ИмяОтчетаВарианта.ИмяВариантаОтчета));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 ИмяОтчетаВарианта.ПредставлениеОтчета);
	//
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "Представленияяя");
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыОтчета));
	ПараметрыФормы.Вставить("ФиксированныеНастройки", КомпоновщикНастроек.ФиксированныеНастройки);
	
	ФормаНастроек=ПолучитьФорму("Отчет." + ИмяОтчетаВарианта.ИмяОтчета + ".ФормаНастроек", ПараметрыФормы,ЭтаФорма );
	ФормаНастроек.ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	Если ФормаНастроек.ОткрытьМодально() = Истина Тогда
		//КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаНастроек.ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
		КомпоновщикНастроек.ЗагрузитьНастройки(ФормаНастроек.ОтчетОбъект.КомпоновщикНастроек.настройки);
		СформироватьОтчетНаСервере(Ложь);
	КонецЕсли;
КонецПроцедуры	


&НаСервере
Процедура СформироватьОтчетНаСервере(СброситьНастройки)
	
	УстановитьПривилегированныйРежим(истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных=ПолучитьИзВременногоХранилища(АдресСхемыОтчета);
	Если СброситьНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КонецЕсли;	
	ДанныеРасшифровки=Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),ДанныеРасшифровки , , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ВнешниеНаборыДанных 	= Новый Структура;
	ВнешниеНаборыДанных.Вставить("Начисления", НачисленияСводно.Выгрузить());
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТаблицаОтчета.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТаблицаОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРасшифровку(Расшифровка) Экспорт
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки,
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыОтчета));
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия,,);
	
	ОписаниеОбработкиРасшифровки = Неопределено;
	
	Если Не (ПараметрВыполненногоДействия = Неопределено) Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрВыполненногоДействия);
			
		Иначе
			
			ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрВыполненногоДействия);
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	Возврат ОписаниеОбработкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ОбработатьРасшифровкуСервер(ОписаниеОбработкиРасшифровки) Экспорт
	//ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыОтчета);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	// Получить таблицу для вывода отчета.
	ТаблицаРезультатаОтчета = ТаблицаОтчета;
	ТаблицаРезультатаОтчета.Очистить();
	
	// Вывести отчет.
	//ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	СформироватьОтчетНаСервере(Ложь);
	//АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОписаниеОбработкиРасшифровки = ОбработатьРасшифровку(Расшифровка); 
	Если ОписаниеОбработкиРасшифровки<>неопределено Тогда
		ОбработатьРасшифровкуСервер(ОписаниеОбработкиРасшифровки);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФильтрМатПомощь(Команда)
	Если Элементы.НачисленияУстановитьСнятьФильтрМатПомощь.Пометка Тогда
		Элементы.НачисленияУстановитьСнятьФильтрМатПомощь.Пометка=Ложь;
		Элементы.Начисления.ОтборСтрок=Неопределено;
	Иначе
		Элементы.НачисленияУстановитьСнятьФильтрМатПомощь.Пометка=Истина;
		Элементы.Начисления.ОтборСтрок = Новый ФиксированнаяСтруктура("МатПомощь",Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДолиОтпусковВФОТ(Команда)
	ОткрытьФОрму("РегистрСведений.ДолиРезервовВФОТ.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуДоКонцаГода(Команда)
	РаспределитьСуммуДоКонцаГодаСервер();
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуДоКонцаГодаСервер()
	
	Сч96=ПланыСчетов.Финансовый.РезервПоОтпускам;
	Сч68=ПланыСчетов.Финансовый.НайтиПоКоду("68.1");
	Сч44_3=ПланыСчетов.Финансовый.НайтиПоКоду("44.3");
	Сч44_2=ПланыСчетов.Финансовый.НайтиПоКоду("44.2");
	//+++АК sils 15.05.2018 ИП-00018466
	//Все=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	Все=ПолучитьТТПоОрганизации(Организация_фильтр);
	//---АК
	УпрИнф=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15");
	РезервНаНалоги=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21302");
	РезервНаОтпускные=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21301");
	
	
	ТекстЗапроса="ВЫБРАТЬ
	|	ДолиРезервовВФОТ.Период,
	|	ДолиРезервовВФОТ.Продавцы,
	|	ДолиРезервовВФОТ.ЦФО,
	|	ДолиРезервовВФОТ.Организация,
	|	ДолиРезервовВФОТ.Коэффициент,
	|	ДолиРезервовВФОТ.СуммаОтпусков,
	|	ДолиРезервовВФОТ.СуммаФОТ
	|ИЗ
	|	РегистрСведений.ДолиРезервовВФОТ КАК ДолиРезервовВФОТ
	|ГДЕ
	|	ДолиРезервовВФОТ.Организация = &Организация
	|	И ДолиРезервовВФОТ.Период МЕЖДУ &ПериодС И &ПериодПо";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ПериодС",ДобавитьМесяц(КонецМесяца(Период)+1,-12));
	Запрос.УстановитьПараметр("ПериодПо",ДобавитьМесяц(КонецГода(Период),-12));
	Запрос.УстановитьПараметр("Организация",Организация_фильтр);
	ТЗДолей=Запрос.Выполнить().Выгрузить();
	ТЗДолей.Свернуть("Период,Продавцы","СуммаФОТ,СуммаОтпусков");
	
	ИтогоСумма=ТЗДолей.Итог("СуммаОтпусков");
	Для Каждого Стр Из ТЗДолей Цикл
		СуммаПроводки=Стр.СуммаОтпусков/ИтогоСумма*СуммаРезервовКРаспределению;
		Если СуммаПроводки=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Статья96Продавцов=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20523");
		Статья96Прочих=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("37197");
		
		НС=ПрочиеПроводки.Добавить();
		НС.Организация=Организация_фильтр;
		НС.Сумма=СуммаПроводки;
		НС.Период=ДобавитьМесяц(Стр.Период,12);
		НС.СубконтоДт1=Все;
		
		Если Стр.Продавцы Тогда
			Статья96=Статья96Продавцов;
			НС.СчДт=Сч44_3;
		Иначе
			Статья96=Статья96Прочих;
			НС.СчДт=Сч44_2;
		КонецЕсли;	
		
		//Если Выборка.Субконто="Оплата труда" Тогда
		//НС.СубконтоДт2=РезервНаОтпускные;
		НС.Содержание="Резерв по отпускам";
		//НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
		НС.СубконтоКт2=Статья96;
		//Иначе	
		//	//НС.СубконтоДт2=РезервНаНалоги;
		//	НС.Содержание="Взносы на резерв по отпускам";
		//	НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
		//КонецЕсли;	
		НС.СубконтоДт2=НС.СубконтоКт2;
		НС.СубконтоДт3=УпрИнф;
		
		НС.СчКт=Сч96;
		НС.СубконтоКт1=Организация_фильтр;
		//Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
		//	НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
		//ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
		//	НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
		//ИначеЕсли НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
		//	НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
		//КонецЕсли;	
		
		// Резерв по налогам
		
		НС=ПрочиеПроводки.Добавить();
		НС.Организация=Организация_фильтр;
		НС.Сумма=СуммаПроводки*ПроцентПоНалогам/100;
		НС.Период=ДобавитьМесяц(Стр.Период,12);
		НС.СубконтоДт1=Все;
		
		Если Стр.Продавцы Тогда
			Статья96=Статья96Продавцов;
			НС.СчДт=Сч44_3;
		Иначе
			Статья96=Статья96Прочих;
			НС.СчДт=Сч44_2;
		КонецЕсли;	
		
		//Если Выборка.Субконто="Оплата труда" Тогда
		//НС.СубконтоДт2=РезервНаОтпускные;
		//	НС.Содержание="Резерв по отпускам";
		//НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
		//	НС.СубконтоКт2=Статья96;
		//Иначе	
		//	//НС.СубконтоДт2=РезервНаНалоги;
		НС.Содержание="Взносы на резерв по отпускам";
		НС.СубконтоКт2=СоответствиеСтатьиРезерваНаОтпускСтатьеРезерваНаНалоги(Статья96);
		//КонецЕсли;	
		НС.СубконтоДт2=НС.СубконтоКт2;
		НС.СубконтоДт3=УпрИнф;
		
		НС.СчКт=Сч96;
		НС.СубконтоКт1=Организация_фильтр;
		Если Найти(НС.СубконтоКт2.Наименование,"продавцов")>0 Тогда
			НС.Содержание="ПРОДАВЦЫ "+НС.Содержание;
		ИначеЕсли НС.СчДт=Сч44_3 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ СКЛАД "+НС.Содержание;
		ИначеЕсли НС.СчДт=Сч44_2 И Найти(НС.СубконтоКт2.Наименование,"прочего персонала")>0 Тогда
			НС.Содержание="ПРОЧИЙ ПЕРСОНАЛ "+НС.Содержание;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ОстаткиПодотчетаПриИзменении(Элемент)
	ПересчитатьИтогиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПроводки5ПриИзменении(Элемент)
	ПересчитатьИтогиСервер();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиСервер();
	ИтогОстатокПодотчета=ОстаткиПодотчета.Итог("Остаток");
	ИтогПроводокМС5=ПрочиеПроводкиПремия5.Итог("Сумма");
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьДокументыПоПрочимПроводкамПремия5(Команда)
	СформироватьДокументыПоПрочимПроводкамПремия5Сервер();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПоПрочимПроводкамПремия5Сервер()
	Таб=ПрочиеПроводкиПремия5.Выгрузить();
	//Таб.Сортировать("Период,Физлицо");
	Док=Документы.Операция.СоздатьДокумент();
	Док=НайтиИлиСоздатьДокументПрочихПроводокПремия5(Справочники.Организации.Избенка,КонецМесяца(Период));
	Для каждого стр из Таб Цикл
		//Если ЗначениеЗаполнено(Стр.Организация) и ЗначениеЗаполнено(Стр.Период) и Стр.Сумма<>0 Тогда
		//	Если Док.Организация<>Стр.Организация или Док.Дата<>Стр.Период  Тогда
		//		Если Док.Движения.Финансовый.Количество()>0 Тогда
		//	Док.СуммаОперации=Док.Движения.Финансовый.Итог("Сумма");
		//	Док.Записать();
		//	Сообщить("Сформирован документ "+Док);
		//КонецЕсли;
		//	Док=НайтиИлиСоздатьДокументПрочихПроводокПремия5(Стр.Организация,Стр.Период);
		//КонецЕсли;	
		Проводка=Док.Движения.Финансовый.Добавить();
		Проводка.Период=Док.Дата;
		Проводка.Содержание=Док.Содержание;
		Проводка.Сумма=Стр.Сумма;
		Проводка.СчетДт=Стр.СчДт;
		Если ЗначениеЗаполнено(Стр.СубконтоДт1) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.СубконтоДт1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоДт2) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Стр.СубконтоДт2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоДт3) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Стр.СубконтоДт3);
		КонецЕсли;
		Проводка.СчетКт=Стр.СчКт;
		Если ЗначениеЗаполнено(Стр.СубконтоКт1) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Стр.СубконтоКт1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоКт2) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Стр.СубконтоКт2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоКт3) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Стр.СубконтоКт3);
		КонецЕсли;
		
		//КонецЕсли;	
		
	КонецЦикла;	
	Если Док.Движения.Финансовый.Количество()>0 Тогда
		Док.СуммаОперации=Док.Движения.Финансовый.Итог("Сумма");
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыПоПрочимПроводкамИнвентаризацияРезервов(Команда)
	СформироватьДокументыПоПрочимПроводкамИнвентаризацияРезервовСервер();
КонецПроцедуры
&НаСервере
Процедура СформироватьДокументыПоПрочимПроводкамИнвентаризацияРезервовСервер()
	Таб=НачислениеРезервов.Выгрузить();
	//Таб.Сортировать("Период,Физлицо");
	Док=Документы.Операция.СоздатьДокумент();
	Док=НайтиИлиСоздатьДокументПрочихПроводокПоРезервам(Организация_фильтр,КонецМесяца(Период));
	Для каждого стр из Таб Цикл
		Проводка=Док.Движения.Финансовый.Добавить();
		Проводка.Период=Док.Дата;
		Проводка.Содержание=Стр.Содержание;
		Проводка.Сумма=Стр.Сумма;
		Проводка.СчетДт=Стр.СчДт;
		Если ЗначениеЗаполнено(Стр.СубконтоДт1) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.СубконтоДт1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоДт2) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Стр.СубконтоДт2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоДт3) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Стр.СубконтоДт3);
		КонецЕсли;
		Проводка.СчетКт=Стр.СчКт;
		Если ЗначениеЗаполнено(Стр.СубконтоКт1) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Стр.СубконтоКт1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоКт2) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Стр.СубконтоКт2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СубконтоКт3) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Стр.СубконтоКт3);
		КонецЕсли;
		
		//КонецЕсли;	
		
	КонецЦикла;	
	Если Док.Движения.Финансовый.Количество()>0 Тогда
		Док.СуммаОперации=Док.Движения.Финансовый.Итог("Сумма");
		Док.Записать();
		Сообщить("Сформирован документ "+Док);
	КонецЕсли;
КонецПроцедуры

Функция НайтиИлиСоздатьДокументПрочихПроводокПоРезервам(Организация,Дата)
	Док=Документы.Операция.СоздатьДокумент();
	
	Док.Дата=Дата;
	Док.Комментарий="Сформирован автоматически, загрузкой данных из ЗУП";
	Док.Организация=организация;
	Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	//Если Док.Дата=НачалоМесяца(Док.Дата) Тогда
	//	Док.Содержание="Начисление резерва на отпуска на "+Формат(Дата,"ДФ='MMMM yyyy'");
	//Иначе	
	//	Док.Содержание="Начисление налогов ФОТ от отпускных (использование резерва) за "+Формат(Дата,"ДФ='MMMM yyyy'");;
	//КонецЕсли;
	Док.Содержание="Инвентаризация резервов на отпуск.";
	Возврат Док;
КонецФункции

//+++АК sils 15.05.2018 ИП-00018466
&НаСервере
Функция ПолучитьТТПоОрганизации(ТекОрганизация)
	// Если Тилси, то тт - "Тилси (общий)"
	Если Период >= '20180401' и ЗначениеЗаполнено(ТекОрганизация) и СокрЛП(ТекОрганизация.ИНН) = "7734410589" Тогда
		Если ТилсиОбщий <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
			Возврат ТилсиОбщий;
		КонецЕсли;
	КонецЕсли;
	
	// Если же нет - то все как раньше
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
КонецФункции

//+++АК ILIK 2018.07.30 ИП-00019022.01
&НаСервере
Процедура СформироватьУдержанияПоОбучениюНаСервере()
	Счет70 = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
	Счет73_03 = ПланыСчетов.Финансовый.РасчетыПоПрочимОперациям;
			
	ТаблицаОрганизаций = УдержанияПоОбучению.Выгрузить(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	Для Каждого Стр Из ТаблицаОрганизаций Цикл
		ДокОперация = Документы.Операция.СоздатьДокумент();
		ДокОперация.Дата = КонецМесяца(Период);
		ДокОперация.Комментарий = "Сформирован автоматически, загрузкой данных из ЗУП";
		ДокОперация.Организация = Стр.Организация;
		ДокОперация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокОперация.Содержание = "Удержание из зп сотрудников за обучение";
		
		НайденныеСтроки = УдержанияПоОбучению.НайтиСтроки(Новый Структура("Организация", Стр.Организация));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Проводка = ДокОперация.Движения.Финансовый.Добавить();
			Проводка.Период = ДокОперация.Дата;
			//Проводка.Содержание = ДокОперация.Содержание;
			Проводка.Сумма = НайденнаяСтрока.Сумма;
			
			Проводка.СчетДт = Счет70;
			Если ЗначениеЗаполнено(ДокОперация.Организация) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ДокОперация.Организация);
			КонецЕсли;
			
			Проводка.СчетКт = Счет73_03;
			Если ЗначениеЗаполнено(ДокОперация.Организация) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ДокОперация.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденнаяСтрока.ФизЛицо) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ФизическиеЛица", НайденнаяСтрока.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОперация.Движения.Финансовый.Количество() > 0 Тогда
			ДокОперация.СуммаОперации = ДокОперация.Движения.Финансовый.Итог("Сумма");
			ДокОперация.Записать();
			Сообщить("Сформирован документ " + ДокОперация);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++АК ILIK 2018.07.30 ИП-00019022.01
&НаКлиенте
Процедура СформироватьУдержанияПоОбучению(Команда)
	СформироватьУдержанияПоОбучениюНаСервере();
КонецПроцедуры
