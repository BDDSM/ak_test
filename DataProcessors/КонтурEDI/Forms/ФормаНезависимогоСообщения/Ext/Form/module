

//обработчики формы и элементов шапки -----------------------------------------------------

Процедура ПриОткрытии()
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ТипСообщения 	= Сообщение.ТипСообщения;
		Направление 	= Сообщение.Направление;
	Иначе
		Сообщение = Новый Структура; //заглушка
	КонецЕсли;
	
	ТолькоПросмотрСообщения = (ТолькоПросмотрСообщения = Истина);
	
	СторонаЮрФизЛицаПартнера = ОпределитьСторонуЮрФизЛица(ТипСообщения, Направление, Истина);
	СторонаЮрФизЛицаОрганизации = ОпределитьСторонуЮрФизЛица(ТипСообщения, Направление, Ложь);
	
	НастройкаФормы = ПолучитьНастройкиФормыНезависимогоСообщения(ТипСообщения, Направление);
	ВыполнитьНастройкиФормы();
	
	ПриОткрытииФормы(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
			И Сообщение.СодержитОшибки = Истина Тогда
			Сообщение = ПрочитатьСообщение(Сообщение.ПереотправляемоеСообщениеСсылка, , Сообщение.ТипСообщения, "Исходящее");
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка", Сообщение.СообщениеСсылка);
		КонецЕсли;
					
		ЗаполнитьПоляНаФорме();
		ПредставлениеПолучателя = ПолучитьПредставлениеЭлементаСправочника(Получатель);
	Иначе
		
		ЗаполнитьПоляНаФормеЗначениямиПоУмолчанию();
		
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьНастройкиФормы()

	ЗаполнитьСпискиВыбораПолей();
	ЗаполнитьСпискиВыбораКолонок();
  	УстановитьДоступностьЭлементов();
    УстановитьВидимостьЭлементов();
	УстановитьТипыПолей1С();
	УстановитьНадписиЭлементов();
	
	ЭтаФорма.Заголовок = НастройкаФормы.Заголовок + " (" + ТипСообщения + ")";
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораПолей()
	
	СпискиВыбораПолей = НастройкаФормы.СпискиВыбораПолей;
	
	Для каждого ТекСписок Из СпискиВыбораПолей Цикл
	    ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы[ТекСписок.Ключ], ТекСписок.Значение);
	КонецЦикла;
	
	СписокЮрФизЛицСвоих = Новый СписокЗначений;
	СписокЮрФизЛицСвоих.ЗагрузитьЗначения(ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои").ВыгрузитьКолонку("ЮрФизЛицо"));
	
	ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы.Отправитель, СписокЮрФизЛицСвоих);
	ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы[СторонаЮрФизЛицаОрганизации], СписокЮрФизЛицСвоих);
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораКолонок()
	
	СпискиВыбораКолонок = НастройкаФормы.СпискиВыбораКолонок;
	
	Для каждого ТекСписок Из СпискиВыбораКолонок Цикл
	    ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы.Товары.Колонки[ТекСписок.Ключ].ЭлементУправления, ТекСписок.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораЭлемента(Элемент, Список)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Эл Из Список Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;	

КонецПроцедуры

Процедура УстановитьНадписиЭлементов()
	
	Если ТипСообщения = "PRICELIST" Тогда
		
		ЭлементыФормы.НадписьДатаНачалаПериода.Заголовок = "Дата начала действия цен:";
		ЭлементыФормы.НадписьДатаОкончанияПериода.Заголовок = "Дата окончания действия цен:";
		
	ИначеЕсли ТипСообщения = "SLSRPT" ИЛИ ТипСообщения = "INVRPT" Тогда
		
		ЭлементыФормы.НадписьОтправитель.Заголовок = "Отправитель отчета:";
		ЭлементыФормы.НадписьПокупатель.Заголовок = "Отчитывающаяся сторона:";
		ЭлементыФормы.НадписьПродавец.Заголовок = "Получатель отчета:";
		
		ЭлементыФормы.НадписьДатаНачалаПериода.Заголовок = "Начало периода отчета:";
		ЭлементыФормы.НадписьДатаОкончанияПериода.Заголовок = "Окончание периода отчета:";
		
	КонецЕсли;
	
	Если ТипСообщения = "SLSRPT" Тогда	
		ЭлементыФормы.НадписьТипЦен.Заголовок = "Тип цен закупки:";
	КонецЕсли;
		
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка")
		И НЕ ТолькоПросмотрСообщения Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОтправить.Текст = "Переотправить сообщение"; 
	КонецЕсли;	

КонецПроцедуры

Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	Отправитель = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСвое");	
	
КонецПроцедуры

Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(ВыбранноеЗначение, "ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = ВыбранноеЗначение.ЦенаВключаетНДС;
	КонецЕсли;		
	
	Если ТипСообщения = "PRICELIST" Тогда
		
		Если НЕ ЗначениеЗаполнено(НомерПрайсЛиста) Тогда  //E1C_in-30790
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Код) Тогда  
				НомерПрайсЛиста = ВыбранноеЗначение.Код;
			Иначе
				НомерПрайсЛиста = ВыбранноеЗначение.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипЦенОчистка(Элемент, СтандартнаяОбработка)
	
	ЦенаВключаетНДС = Ложь;
	
КонецПроцедуры

//обработчики табличной части -------------------------------------------------------------

Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыборПоВладельцу = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура;

КонецПроцедуры

Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьНомераСтрок();
	ПроверитьЗаполнениеТаблицыТоваров();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерСтроки = Товары.Количество();
		ПроверитьСтрокуТаблицыТоваров(Элемент.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИмяКолонки 	= Элемент.ТекущаяКолонка.Имя;
	ТекСтрока 	= Элемент.ТекущиеДанные;
	
	Если ИмяКолонки = "ЦенаБезНДС" 
		ИЛИ ИмяКолонки = "ЦенаСНДС" Тогда
		ПересчитатьЦенуПослеИнтерактивногоРедактирования(ИмяКолонки, ТекСтрока);
	КонецЕсли;	
		
	ПроверитьЗаполнениеТаблицыТоваров();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуПослеИнтерактивногоРедактирования(ИмяКолонки, Строка)

	Если ИмяКолонки = "ЦенаБезНДС" Тогда 
		ПересчитатьЦенуСНДС(Строка);	
	ИначеЕсли ИмяКолонки = "ЦенаСНДС" Тогда
		ПересчитатьЦенуБезНДС(Строка);	
	КонецЕсли;
	
	ПересчитатьСтрокуТоваровНезависимогоСообщения(Строка, "ВEDI");

КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(Строка)
	
	СтавкаНДС = ПолучитьСтавкуНДС_КонтурEDI(Строка.СтавкаНДС1С);
	Строка.ЦенаСНДС = Окр((Строка.ЦенаБезНДС * (100 + СтавкаНДС)) / 100, 2, 1);
	
КонецПроцедуры

Процедура ПересчитатьЦенуБезНДС(Строка)

	СтавкаНДС = ПолучитьСтавкуНДС_КонтурEDI(Строка.СтавкаНДС1С);
	Строка.ЦенаБезНДС = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДС), 2, 1);

КонецПроцедуры

Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ИмяКолонки = Колонка.Имя;
	
	Если ИмяКолонки = "Номенклатура"
		ИЛИ ИмяКолонки = "ЕдиницаИзмерения"
		ИЛИ ИмяКолонки = "КоэффициентEDIВ1С"
		ИЛИ ИмяКолонки = "КодЕдиницыИзмеренияEDI" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
		
		Если ТипСообщения = "PRICELIST" Тогда
			КодТовараПартнера = ТекСтрока.КодТовараПокупателя;
		ИначеЕсли ТипСообщения = "SLSRPT" 
			ИЛИ ТипСообщения = "INVRPT" Тогда
			КодТовараПартнера = ТекСтрока.КодТовараПоставщика;
		КонецЕсли;
		
		СписокВыбора = СоставитьСписокВыбораПоСтрокеТоваров(ТекСтрока.GTIN, КодТовараПартнера, Получатель);
		
		ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора, Элемент);
		ОбработчикВыбораСоответствияИзМеню(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоставитьСписокВыбораПоСтрокеТоваров(GTIN, КодТовараПартнера, Партнер)
	
	СоответствиеТоваров = СоответствиеТоваров_НайтиНоменклатуру(GTIN, КодТовараПартнера, Партнер);
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Стр Из СоответствиеТоваров Цикл
		
		СтруктураТовара = Новый Структура();
		
		СтруктураТовара.Вставить("Номенклатура",				Стр.Номенклатура);
		СтруктураТовара.Вставить("ХарактеристикаНоменклатуры",	Стр.ХарактеристикаНоменклатуры);
		СтруктураТовара.Вставить("ЕдиницаИзмерения",			Стр.ЕдиницаИзмерения);
		СтруктураТовара.Вставить("КодЕдиницыИзмеренияEDI",		Стр.ЕдиницаEDI);
		СтруктураТовара.Вставить("КоэффициентEDIВ1С",			Стр.КоэффициентEDIВ1С);
		
		Представление = СокрЛП(Стр.Номенклатура);
		Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
			Представление = Представление+", "+СокрЛП(Стр.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
			Представление = Представление + ", " + СокрЛП(Стр.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ЕдиницаEDI) Тогда
			Представление = Представление + ", " + СокрЛП(Стр.ЕдиницаEDI);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.КоэффициентEDIВ1С) Тогда
			Представление = Представление + ", коэф. " + СокрЛП(Стр.КоэффициентEDIВ1С);
		КонецЕсли;
		
		СписокВыбора.Добавить(СтруктураТовара, Представление);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("Настроить соответствие товаров",,,);
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура ОбработчикВыбораСоответствияИзМеню(ВыбранноеЗначение)
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ТекСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
		
		Если ТипСообщения = "PRICELIST" Тогда
			КодТовараПартнера = ТекСтрока.КодТовараПокупателя;
		ИначеЕсли ТипСообщения = "SLSRPT" 
			ИЛИ ТипСообщения = "INVRPT" Тогда
			КодТовараПартнера = ТекСтрока.КодТовараПоставщика;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Значение = "Настроить соответствие товаров" Тогда
			
			ФормаНоменклатуры = ПолучитьФорму("ФормаНоменклатура_Элемент");
			
			ФормаНоменклатуры.Партнер			= Получатель;
			ФормаНоменклатуры.GTIN				= ТекСтрока.GTIN;
			ФормаНоменклатуры.Наименование		= ТекСтрока.Наименование;
			ФормаНоменклатуры.КодТовараПартнера	= КодТовараПартнера;
			
			ФормаНоменклатуры.ОткрытьМодально();
				
			ОбработчикПослеИнтерактивнойНастройкиСоответствий(ТекСтрока)
			
		Иначе
			СтруктураТовара = ВыбранноеЗначение.Значение;
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТовара, "Номенклатура,ЕдиницаИзмерения,КодЕдиницыИзмеренияEDI,КоэффициентEDIВ1С");
			ПересчитатьСтрокуТоваровНезависимогоСообщения(ТекСтрока, "ВEDI");	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПослеИнтерактивнойНастройкиСоответствий(ВыбраннаяСтрока)
	
	Если ТипСообщения = "PRICELIST" Тогда
		КодТовараПартнера = ВыбраннаяСтрока.КодТовараПокупателя;
	ИначеЕсли ТипСообщения = "SLSRPT" 
		ИЛИ ТипСообщения = "INVRPT" Тогда
		КодТовараПартнера = ВыбраннаяСтрока.КодТовараПоставщика;
	КонецЕсли;
	
	СоответствиеТоваров = СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN, КодТовараПартнера, Получатель);
	
	Для каждого Стр Из СоответствиеТоваров Цикл
		Если Стр.Номенклатура = ВыбраннаяСтрока.Номенклатура Тогда
			
			ВыбраннаяСтрока.Номенклатура 			= Стр.Номенклатура;
			ВыбраннаяСтрока.ЕдиницаИзмерения 		= Стр.ЕдиницаИзмерения;
			ВыбраннаяСтрока.КодЕдиницыИзмеренияEDI 	= Стр.ЕдиницаEDI;
			ВыбраннаяСтрока.КоэффициентEDIВ1С 		= Стр.КоэффициентEDIВ1С;
			
			ПересчитатьСтрокуТоваровНезависимогоСообщения(ВыбраннаяСтрока, "ВEDI");	
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//кнопки верхней командной панели ---------------------------------------------------------

Процедура КоманднаяПанельДобавитьНоменклатуру(Кнопка)
	
	ПроверитьЗаполнениеШапки();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	Если Кнопка.Имя = "КнопкаДобавитьЭлемент" Тогда
		ФормаВыбора  = Справочники[ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина)].ПолучитьФормуВыбора();
	ИначеЕсли Кнопка.Имя = "КнопкаДобавитьГруппу" Тогда
		ФормаВыбора  = Справочники[ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина)].ПолучитьФормуВыбораГруппы();
	КонецЕсли;
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если Номенклатура <> Неопределено Тогда
		
		СтруктураДопПараметры = Новый Структура("Номенклатура", Номенклатура);
		Результат = ЗаполнитьТовары(ТипСообщения, СтруктураДопПараметры);
	
		Если НЕ Результат.Успешно Тогда
			ТекстПодсказки = Результат.ОписаниеОшибки;
			ЗаголовокПодсказки = "Контур.EDI. Заполнение товаров сообщения " + ТипСообщения;
			ВывестиПредупреждение_КонтурEDI(ТекстПодсказки, , ЗаголовокПодсказки);
		КонецЕсли;
	
	КонецЕсли;
	
	ОбновитьНомераСтрок();
	ПроверитьЗаполнениеТаблицыТоваров();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСоставТоваровОчиститьТаблицуТовары(Кнопка)
	
	Если Товары.Количество() <> 0 Тогда
	
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		
		Ответ = Вопрос("Данные таблицы товаров будут очищены. Продолжить?", СписокКнопок, , КодВозвратаДиалога.Отмена, "Очистка данных");
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Товары.Очистить();
		ПроверитьЗаполнениеТаблицыТоваров();
		
		Если ФормаСодержитОшибки Тогда
			ОткрытьПанельОшибок();
		Иначе
			ЗакрытьПанельОшибок();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСоставТоваровКакиеТоварыНеПопадутВТаблицу(Кнопка)
	
	ТекстПодсказки = "При стандартном заполнении не будут добавлены товары:
					|
					| - которые помечены на удаление;
					| - с нулевой ценой для выбранного типа цен;
					| - которые по виду номенклатуры относятся к услугам.
					|
					|Для разработки своего алгоритма заполнения товаров можно
					|воспользоваться событием ""ПолучитьТоварыДляНезависимогоСообщения"" 
					|подключаемого модуля или расширения.";
	
	ВывестиПредупреждение_КонтурEDI(ТекстПодсказки,,"Какие товары не попадут в таблицу? ");
	
КонецПроцедуры
    
Процедура КоманднаяПанельСоставТоваровЗаполнитьТовары(Кнопка)
	
	ПроверитьЗаполнениеШапки();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	ВыбратьТипЦен();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() <> 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		Ответ = Вопрос("Данные таблицы товаров будут очищены. Продолжить?", СписокКнопок, , КодВозвратаДиалога.Отмена, "Контур.EDI. Заполнение товаров сообщения " + ТипСообщения);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ЗаполнитьТовары(ТипСообщения);
	
	Если НЕ Результат.Успешно Тогда
		ТекстПодсказки = Результат.ОписаниеОшибки;
		ЗаголовокПодсказки = "Контур.EDI. Заполнение товаров сообщения " + ТипСообщения;
		ВывестиПредупреждение_КонтурEDI(ТекстПодсказки, , ЗаголовокПодсказки);
	КонецЕсли;
	
	ОбновитьНомераСтрок();
	ПроверитьЗаполнениеТаблицыТоваров();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьТовары(ТипСообщения, ДопПараметры = Неопределено)
	
	СохранитьНастройкиЗаполнения();
	
	Результат = Новый Структура("Успешно, ОписаниеОшибки", Ложь, "");

	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("Номенклатура") Тогда
		// это добавление одной/группы номенклатуры для Pricelist
	Иначе
		Товары.Очистить();
    КонецЕсли;

	СтруктураПараметры = ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения, ДопПараметры);
	РезультатПолучения = ПолучитьТоварыДляНезависимогоСообщения(ТипСообщения, СтруктураПараметры);
	
	Если РезультатПолучения.Успешно Тогда
		
		Для каждого Стр Из РезультатПолучения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			ПересчитатьСтрокуТоваровНезависимогоСообщения(НоваяСтрока, "ВEDI");	
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПолучения);
	
	Возврат Результат;

КонецФункции

Процедура СохранитьНастройкиЗаполнения()

	КлючОбъекта  = "КонтурEDI/НастройкиЗаполненияНезависимогоСообщения";
	КлючНастроек = ТипСообщения + "/" + ПредставлениеПолучателя;
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, ПолучитьСтруктуруНастроекДляСохранения());

КонецПроцедуры

Процедура ВосстановитьНастройкиЗаполнения()

	КлючОбъекта  = "КонтурEDI/НастройкиЗаполненияНезависимогоСообщения";
	КлючНастроек = ТипСообщения + "/" + ПредставлениеПолучателя;
	
	НастройкиДляВосстановления = Неопределено;
    НастройкиДляВосстановления = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);

	Если НЕ НастройкиДляВосстановления = Неопределено Тогда
		Для каждого Эл Из НастройкиДляВосстановления Цикл
			ЭтаФорма[Эл.Ключ] = Эл.Значение;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦенОбработкаВыбора(Неопределено, ТипЦен, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруНастроекДляСохранения()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Отправитель", 		Отправитель);
	СтруктураНастроек.Вставить("Получатель", 		Получатель);
	СтруктураНастроек.Вставить("Покупатель", 		Покупатель);
	СтруктураНастроек.Вставить("Продавец", 			Продавец);
	СтруктураНастроек.Вставить("ТипЦен", 			ТипЦен);
	СтруктураНастроек.Вставить("НомерДоговора", 	НомерДоговора);
	СтруктураНастроек.Вставить("ДатаДоговора", 		ДатаДоговора);
	
	Если ТипСообщения = "PRICELIST" Тогда
		СтруктураНастроек.Вставить("СтатусТовараПоУмолчанию", 	СтатусТовараПоУмолчанию);
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции
  
//кнопки нижней командной панели ----------------------------------------------------------

Процедура КнопкаОтправитьНажатие(Кнопка)
	
	ПроверитьЗаполнениеФормы();
	
	Если ФормаСодержитОшибки Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	ТоварыКопия = Товары.Скопировать();
	СтруктураПараметры = ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения);
	ОтправитьНезависимоеСообщение(ТипСообщения, ТоварыКопия, СтруктураПараметры);
	
	Закрыть();	
	
КонецПроцедуры

//получение и вывод данных ----------------------------------------------------------------

Процедура ЗаполнитьПоляНаФорме()
	
	//заголовок
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " № " + Сообщение.ДокументEDI.Номер + " от " + Формат(Сообщение.ДокументEDI.Дата, "ДЛФ=Д");
	
	//шапка
	Отправитель = Сообщение.Отправитель1С;
	
	Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
		Получатель = Сообщение.Получатель1С;
	Иначе
		Получатель = Сообщение.Партнер;
	КонецЕсли;
	
	ЗаполнитьСписокЮрФизЛицПартнера(Получатель);
	
	Продавец 	= Сообщение.Продавец1С;
	Покупатель 	= Сообщение.Покупатель1С;
	
	Если ТипСообщения = "PRICELIST" Тогда
		ДатаНачалаПериода		= Сообщение.ДатаНачалаДействияЦен;
		ДатаОкончанияПериода 	= Сообщение.ДатаОкончанияДействияЦен;
		НомерПрайсЛиста 		= Сообщение.ДокументEDI.Номер;
		
	ИначеЕсли ТипСообщения = "SLSRPT" 
		ИЛИ ТипСообщения = "INVRPT" Тогда
		ДатаНачалаПериода		= Сообщение.ДатаНачалаПериодаОтчета;
		ДатаОкончанияПериода 	= Сообщение.ДатаОкончанияПериодаОтчета;
	
	КонецЕсли;
	
	Если ТипСообщения = "INVRPT" Тогда
		ДатаИнвентаризации		= Сообщение.ДатаИнвентаризации;
		
	КонецЕсли;
	
	Валюта	= Сообщение.Валюта1С;
	
	Если ЗначениеЗаполнено(Сообщение.Контракт.Номер) Тогда 
		НомерДоговора 	= Сообщение.Контракт.Номер;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Сообщение.Контракт.Дата) Тогда 
		ДатаДоговора 	= Сообщение.Контракт.Дата;
	КонецЕсли;	
	
	Если Сообщение.Свойство("ТипЦен") Тогда //для совместимости со старыми сообщениями
		ТипЦен = Сообщение.ТипЦен;
	КонецЕсли;
	
	ПересчитатьТоварыСообщения(Сообщение.Товары, Получатель, "В1С", Сообщение);
	
	// товары
	Для Каждого Строка Из Сообщение.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		ПересчитатьСтрокуТоваровНезависимогоСообщения(НоваяСтрока, "ВEDI");
	КонецЦикла;
	
	ОбновитьНомераСтрок();
	
	//описание ошибки
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		СообщениеСсылка = Сообщение.СообщениеСсылка;
		Если ВнешнееХранилище Тогда
			СообщениеСсылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(СообщениеСсылка);
		КонецЕсли;
		ОписаниеОшибки = СообщениеСсылка.ОписаниеОшибки;
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоляНаФормеЗначениямиПоУмолчанию()
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЭлементыФормы.Отправитель.СписокВыбора.Количество() = 1 Тогда
		Отправитель = ЭлементыФормы.Отправитель.СписокВыбора.Получить(0).Значение;
		ЭтаФорма[СторонаЮрФизЛицаОрганизации] = Отправитель;
	КонецЕсли;
	
	Если ТипСообщения = "PRICELIST" Тогда
		СтатусТовараПоУмолчанию = ЭлементыФормы.СтатусТовараПоУмолчанию.СписокВыбора.НайтиПоЗначению("Changed").Значение;		
	КонецЕсли;
	
КонецПроцедуры

//валидация значений полей ----------------------------------------------------------------

Процедура ПроверитьЗаполнениеФормы()

	ТаблицаОшибок.Очистить();
	РезультатПроверкиШапки 			= ПроверитьЗаполнениеПолейШапки();
	РезультатПроверкиТаблицыТоваров = ПроверитьЗаполнениеПолейТаблицыТоваров();
	ФормаСодержитОшибки 			= НЕ (РезультатПроверкиШапки.Успешно И РезультатПроверкиТаблицыТоваров.Успешно); 

КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки()
	
	ТаблицаОшибок.Очистить();
	РезультатПроверкиШапки 	= ПроверитьЗаполнениеПолейШапки();
	ФормаСодержитОшибки 	= НЕ РезультатПроверкиШапки.Успешно; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыТоваров()
	
	ТаблицаОшибок.Очистить();
	РезультатПроверкиТаблицыТоваров = ПроверитьЗаполнениеПолейТаблицыТоваров();
	ФормаСодержитОшибки 			= НЕ РезультатПроверкиТаблицыТоваров.Успешно; 
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПолейШапки()
	
	Результат = Новый Структура("Успешно", Истина);
		
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		Если ТипСообщения = "PRICELIST" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Отправитель""";
		ИначеЕсли ТипСообщения = "SLSRPT" 
			ИЛИ ТипСообщения = "INVRPT" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Отправитель отчета""";
		КонецЕсли;
		Результат.Успешно = Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Партнер""";
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Покупатель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		Если ТипСообщения = "PRICELIST" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Покупатель""";
		ИначеЕсли ТипСообщения = "SLSRPT" 
			ИЛИ ТипСообщения = "INVRPT" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Отчитывающаяся сторона""";
		КонецЕсли;
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Продавец) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		Если ТипСообщения = "PRICELIST" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Продавец""";
		ИначеЕсли ТипСообщения = "SLSRPT" 
			ИЛИ ТипСообщения = "INVRPT" Тогда
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Получатель отчета""";
		КонецЕсли;
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Если ТипСообщения = "SLSRPT" 
		ИЛИ ТипСообщения = "INVRPT" Тогда
		
		Если Не ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Начало периода отчета""";
			Результат.Успешно = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Окончание периода отчета""";
			Результат.Успешно = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Заполните поле ""Валюта""";
			Результат.Успешно = Ложь;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗаполнениеПолейТаблицыТоваров()
	
	Результат = Новый Структура("Успешно", Истина);
		
	Если Товары.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Таблица товаров пуста. Нет данных для отправки.";
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		Результат.Успешно = ?(ПроверитьСтрокуТаблицыТоваров(Стр).Успешно, Результат.Успешно, Ложь);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСтрокуТаблицыТоваров(СтрокаТовара)
	
	Результат = Новый Структура("Успешно", Истина);
	
	Если ТипСообщения = "PRICELIST" Тогда
		Если ЭтаФорма.ОбязателенGTIN 
			И Не ЗначениеЗаполнено(СтрокаТовара.GTIN) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""GTIN"" в строке № " + СтрокаТовара.НомерСтроки;
			Результат.Успешно = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС1С) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""Ставка НДС"" в строке № " + СтрокаТовара.НомерСтроки;
			Результат.Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыбратьТипЦен()
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Да, заполнить без цен");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, 		"Выбрать тип цен");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		
		Ответ = Вопрос("Не выбран тип цен. Заполнить товар(ы) без цен?", СписокКнопок, , КодВозвратаДиалога.Да, "Контур.EDI. Заполнение типа цен");
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			ИмяСправочникаТипыЦен = ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
			
			Если Не ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
				//Не смогли определить тип справочника
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен."
											+ Символы.ПС + "Не определено имя справочника ""Типы цен"" в таблице типов";
				ФормаСодержитОшибки = Истина;
			Иначе	
				ВыбранныйТипЦен = Справочники[ИмяСправочникаТипыЦен].ПолучитьФормуВыбора().ОткрытьМодально();
				Если ЗначениеЗаполнено(ВыбранныйТипЦен) Тогда
					ТипЦен = ВыбранныйТипЦен;
					Если ЕстьРеквизитОбъекта_Контур(ВыбранныйТипЦен, "ЦенаВключаетНДС") Тогда
						ЦенаВключаетНДС = ВыбранныйТипЦен.ЦенаВключаетНДС;
					КонецЕсли;						
				Иначе
					//Пользователь не выбрал элемент справочника или не смогли определить имя справочника типа цен
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен";
					ФормаСодержитОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			ФормаСодержитОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

//управление доступностью полей формы -----------------------------------------------------

Процедура УстановитьТипыПолей1С()
	
	ТипТипыЦен 				= ПолучитьТипЗначенияОбъекта("ТипыЦен");
	ТипВалюта 				= ПолучитьТипЗначенияОбъекта("Валюта");
	ТипЮрФизЛицоСвое 		= ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое");
    ТипЮрФизЛицоСтороннее	= ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее");
	
	Если ЗначениеЗаполнено(ТипТипыЦен) Тогда
		
		ЭлементыФормы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов(ТипТипыЦен);
		ТипЦен = ПолучитьПустуюСсылкуОбъекта("ТипыЦен");
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипВалюта) Тогда
		
		ЭлементыФормы.Валюта.ОграничениеТипа = Новый ОписаниеТипов(ТипВалюта);
		Валюта = ПолучитьПустуюСсылкуОбъекта("Валюта");
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЮрФизЛицоСвое) Тогда
		
		ЭлементыФормы.Отправитель.ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСвое);
		ЭлементыФормы[СторонаЮрФизЛицаОрганизации].ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСвое);

		ПустаяСсылкаЮрФизЛицоСвое = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСвое");
		Отправитель = ПустаяСсылкаЮрФизЛицоСвое;
		ЭтаФорма[СторонаЮрФизЛицаОрганизации] = ПустаяСсылкаЮрФизЛицоСвое;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЮрФизЛицоСтороннее) Тогда
		
		ЭлементыФормы[СторонаЮрФизЛицаПартнера].ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСтороннее);

		ПустаяСсылкаЮрФизЛицоСтороннее = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = ПустаяСсылкаЮрФизЛицоСтороннее;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементов()
	
	// только просмотр	
	
	ЭлементыФормы.Отправитель.ТолькоПросмотр 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.ПредставлениеПолучателя.ТолькоПросмотр  	= ТолькоПросмотрСообщения;
	ЭлементыФормы.Покупатель.ТолькоПросмотр  				= ТолькоПросмотрСообщения;
	ЭлементыФормы.Продавец.ТолькоПросмотр  					= ТолькоПросмотрСообщения;
	ЭлементыФормы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.СтатусТовараПоУмолчанию.ТолькоПросмотр	= ТолькоПросмотрСообщения;
	ЭлементыФормы.Товары.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр      	= ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаОкончанияПериода.ТолькоПросмотр   	= ТолькоПросмотрСообщения;
	ЭлементыФормы.НомерДоговора.ТолькоПросмотр              = ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаДоговора.ТолькоПросмотр               = ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаИнвентаризации.ТолькоПросмотр      	= ТолькоПросмотрСообщения;
	ЭлементыФормы.Валюта.ТолькоПросмотр     		 		= ТолькоПросмотрСообщения;
	ЭлементыФормы.НомерПрайсЛиста.ТолькоПросмотр     		= ТолькоПросмотрСообщения;
	
	// доступность
	
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ПодменюДобавить.Кнопки.КнопкаДобавитьГруппу.Доступность   = Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ПодменюДобавить.Кнопки.КнопкаДобавитьЭлемент.Доступность  = Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ТоварыСкопировать.Доступность 			= Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ТоварыИзменить.Доступность 				= Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ТоварыУдалить.Доступность 				= Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ЗаполнитьТовары.Доступность 				= Не ТолькоПросмотрСообщения;
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ТоварыОчиститьТаблицуТовары.Доступность 	= Не ТолькоПросмотрСообщения;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов()
	
	// кнопки
	
	КнопкаКакиеТоварыНеПопадутВТаблицу = ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.КакиеТоварыНеПопадутВТаблицу;
	КнопкаПодменюДобавить = ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.ПодменюДобавить;
	
	Если НЕ ТипСообщения = "PRICELIST" Тогда
		ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.Удалить(КнопкаКакиеТоварыНеПопадутВТаблицу);	
		ЭлементыФормы.КоманднаяПанельСоставТоваров.Кнопки.Удалить(КнопкаПодменюДобавить);
	КонецЕсли;
	
	Если ТолькоПросмотрСообщения Тогда
		КнопкиОсновныеДействияФормы = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.ОсновныеДействияФормыОтправить);
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.РазделительЗакрыть);
	КонецЕсли;
	
	// видимость полей
	
	НевидимыеПоля = НастройкаФормы.НевидимыеПоля;
	
	Для каждого ИмяПоля Из НевидимыеПоля Цикл
		СделатьНевидимымЭлементФормы(ИмяПоля);	
	КонецЦикла;
	
	// видимость колонок товаров
	
	НевидимыеКолонки = НастройкаФормы.НевидимыеКолонки;
	
	Для каждого Колонка Из ЭлементыФормы.Товары.Колонки Цикл
	
		НайденнаяКолонка = НевидимыеКолонки.Найти(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено Тогда
			Колонка.Видимость	= Истина;
			Колонка.Доступность = Истина;
		Иначе
			Колонка.Видимость	= Ложь;
			Колонка.Доступность	= Ложь;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура СделатьНевидимымЭлементФормы(ИмяЭлементаФормы)
	
	НайденныйЭлемент = ЭлементыФормы.Найти(ИмяЭлементаФормы);
	Если НайденныйЭлемент <> Неопределено Тогда
		
		НайденныйЭлемент.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПанельОшибок()
	
	ЭлементыФормы.ТаблицаОшибок.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

Процедура ЗакрытьПанельОшибок()
	
	ЭлементыФормы.ТаблицаОшибок.Свертка = РежимСверткиЭлементаУправления.Право;
	
КонецПроцедуры

//инициализация ---------------------------------------------------------------------------

Процедура ПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЭлементСправочника(Получатель,"Партнер",,СтандартнаяОбработка);
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		
		ПредставлениеПолучателя = ПолучитьПредставлениеЭлементаСправочника(Получатель);
		ЗаполнитьСписокЮрФизЛицПартнера(Получатель);
		ВыбратьЮрФизЛицоПоУмолчанию(СторонаЮрФизЛицаПартнера);
		ПриИзмененииПолучателя();
		ВосстановитьНастройкиЗаполнения();
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСписокЮрФизЛицПартнера(Получатель)

   	СписокЮрФизЛицПартнера = ПолучитьСписокЮрФизЛицПартнера(Получатель);
	ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы[СторонаЮрФизЛицаПартнера], СписокЮрФизЛицПартнера);	
	
КонецПроцедуры

Процедура ПриИзмененииПолучателя()

	ОбязателенGTIN 	= Не (ЗначениеЗаполнено(Получатель)
						И (ПолучитьЗначениеСвойстваОбъектаEDI(Получатель, "РазрешитьПустыеКодыGTINВИсходящихСообщениях") = Истина));
	//только в этом случае можно говорить о том можно отправить без GTIN
	
	ТипЦен 			= ПолучитьПустуюСсылкуОбъекта("ТипыЦен");
	ЦенаВключаетНДС = Ложь;
	НомерДоговора	= "";
	ДатаДоговора	= Дата(1, 1, 1);
	
	Если ТипСообщения = "PRICELIST" Тогда
		НомерПрайсЛиста = "";		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокЮрФизЛицПартнера(Получатель)
		
	СписокЮрФизЛицПартнера = Новый СписокЗначений;
	
	ДанныеПартнера = ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер", Получатель));
	Для Каждого Элемент Из ДанныеПартнера Цикл
		СписокЮрФизЛицПартнера.Добавить(Элемент.Контрагент);		
	КонецЦикла;
	
	Возврат СписокЮрФизЛицПартнера;
	
КонецФункции

Процедура ВыбратьЮрФизЛицоПоУмолчанию(СторонаЮрФизЛицаПартнера)
		
	Если ЭлементыФормы[СторонаЮрФизЛицаПартнера].СписокВыбора.Количество() = 1 Тогда
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = ЭлементыФормы[СторонаЮрФизЛицаПартнера].СписокВыбора.Получить(0).Значение;
	Иначе
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьНомераСтрок()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыКаналСбыта1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекМестоПродаж = Элементыформы.Товары.ТекущаяСтрока.МестоПродаж1С;
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("МестоПродаж1С", ТекМестоПродаж));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		Строка.КаналСбыта1С = ВыбранноеЗначение;	
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения, ДопПараметры = Неопределено)
	
	СтруктураПараметры = Новый Структура;
	
	СтруктураПараметры.Вставить("Отправитель", 				Отправитель);
	СтруктураПараметры.Вставить("Получатель", 				Получатель);
	СтруктураПараметры.Вставить("Покупатель", 				Покупатель); 
	СтруктураПараметры.Вставить("Продавец", 				Продавец);
	СтруктураПараметры.Вставить("Партнер", 					Получатель);
	СтруктураПараметры.Вставить("ДатаНачалаПериода", 		ДатаНачалаПериода);
	СтруктураПараметры.Вставить("ДатаОкончанияПериода", 	ДатаОкончанияПериода);
	СтруктураПараметры.Вставить("ТипЦен", 					ТипЦен);
	СтруктураПараметры.Вставить("ЦенаВключаетНДС", 			ЦенаВключаетНДС);
	СтруктураПараметры.Вставить("ОбязателенGTIN",			ОбязателенGTIN);
	СтруктураПараметры.Вставить("Валюта", 					Валюта);
	СтруктураПараметры.Вставить("НомерДоговора", 			НомерДоговора);
	СтруктураПараметры.Вставить("ДатаДоговора", 			ДатаДоговора);
	
	Если ТипСообщения = "PRICELIST" Тогда
		СтруктураПараметры.Вставить("Номенклатура", 			Неопределено);
		СтруктураПараметры.Вставить("СтатусТовараПоУмолчанию", 	СтатусТовараПоУмолчанию);
		СтруктураПараметры.Вставить("НомерПрайсЛиста", 			СокрЛП(НомерПрайсЛиста));
		
	ИначеЕсли ТипСообщения = "INVRPT" Тогда 
		СтруктураПараметры.Вставить("ДатаИнвентаризации", 		ДатаИнвентаризации);
		
	КонецЕсли;
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
		СтруктураПараметры.Вставить("ПереотправляемоеСообщениеСсылка", Сообщение.ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено 
		И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Для каждого Эл Из ДопПараметры Цикл
			СтруктураПараметры.Вставить(Эл.Ключ, Эл.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметры;
	
КонецФункции	

Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭтаФорма[СторонаЮрФизЛицаОрганизации] = ВыбранноеЗначение;

КонецПроцедуры

Процедура ПредставлениеПолучателяОчистка(Элемент, СтандартнаяОбработка)
	
	ПустойСписок = Новый СписокЗначений;
	ЗаполнитьСписокВыбораЭлемента(ЭлементыФормы[СторонаЮрФизЛицаПартнера], ПустойСписок);	
	ЭтаФорма[СторонаЮрФизЛицаПартнера] = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
	
КонецПроцедуры



