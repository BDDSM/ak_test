Перем ТекстЗаголовкаФормы;
Перем НастройкаПериода;
Перем НастройкаОформленияТребуемогоДействия;
Перем РежимРаботы;//	"Покупатель"/"Поставщик" - показываем те или другие сообщения/задачи
Перем СверткаБыстрыхОтборов;
Перем СверткаТипыСообщений;
Перем СверткаПартнеры;
Перем СверткаТребуемыеДействия;

Перем СчетаФактурыНаПодписание;
Перем МодульМеркурийКлиент;


//{#Область ПостроениеСписков

//общая точка входа для заполнения всего и всем
//дальше разбивается на разные блоки
Процедура ОбновитьСписокЗадач()
	
	Если РежимРаботы="Неизвестно" Тогда
		Возврат;
	КонецЕсли;
	
	//запомним текущую строку
	Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1
		И ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0]<>Неопределено 
		Тогда
		ТекСообщение = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0].СообщениеСсылка;
		ТекДокумент = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0].Документ;
	Иначе
		ТекСообщение = Неопределено;
		ТекДокумент = Неопределено;
	КонецЕсли;	
	
	//подготовим параметры для заполнения списка задач
	НачалоПериода = НастройкаПериода.ДатаНачала;
	Если Не ЗначениеЗаполнено(НастройкаПериода.ДатаОкончания) Тогда
		КонецПериода = КонецДня(Дата("39990101"));
	Иначе	
		КонецПериода = КонецДня(НастройкаПериода.ДатаОкончания);
	КонецЕсли;	
	
	МассивПартнеров = ПолучитьПартнеровОтбора(Ложь);
	МассивТиповСообщений = ПолучитьТипыСообщенийОтбора(Ложь);
	МассивТребуемыхДействий = ПолучитьТребуемыеДействияОтбора(Ложь);
	МассивОрганизаций = ПолучитьОрганизацииОтбора(Ложь);
	
	//заполним список задач
	ПодсчитанныеКоличестваВОтборах = ПостроитьСписокЗадач_Сервер(РежимРаботы,НачалоПериода,КонецПериода,МассивПартнеров,МассивТиповСообщений,МассивТребуемыхДействий,МассивОрганизаций,ПоказыватьЗавершенные);
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеОбновленияСпискаЗадач");
	
	//проставим количества строк в отборах
	Если ПодсчитанныеКоличестваВОтборах<>Неопределено Тогда
		
		ТабКоличествоПартнеров = ПодсчитанныеКоличестваВОтборах.ТабКоличествоПартнеров;
		СтрокаГруппыПартнеров = ПолучитьРодителяГруппыНастроек("Партнеры");
		Если ЗначениеЗаполнено(СтрокаГруппыПартнеров) Тогда
			Для Каждого СтрокаОтбора Из СтрокаГруппыПартнеров.Строки Цикл
				СтрокаОтбора.Количество = 0;//обнулим сначала
				НайденнаяСтрока = ТабКоличествоПартнеров.Найти(СтрокаОтбора.Значение);
				Если НайденнаяСтрока<>Неопределено Тогда
					СтрокаОтбора.Количество = НайденнаяСтрока.Количество;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
			
		ТабКоличествоСообщений = ПодсчитанныеКоличестваВОтборах.ТабКоличествоСообщений;
		СтрокаГруппыТиповСообщений = ПолучитьРодителяГруппыНастроек("ТипыСообщений");
		Для Каждого СтрокаОтбора Из СтрокаГруппыТиповСообщений.Строки Цикл
			СтрокаОтбора.Количество = 0;//обнулим сначала
			НайденнаяСтрока = ТабКоличествоСообщений.Найти(СтрокаОтбора.Значение);
			Если НайденнаяСтрока<>Неопределено Тогда
				СтрокаОтбора.Количество = НайденнаяСтрока.Количество;
			КонецЕсли;	
		КонецЦикла;	
		
		ТабКоличествоТребуемыхДействий = ПодсчитанныеКоличестваВОтборах.ТабКоличествоТребуемыхДействий;
		СтрокаГруппыДействий = ПолучитьРодителяГруппыНастроек("ТребуемыеДействия");
		Для Каждого СтрокаОтбора1 Из СтрокаГруппыДействий.Строки Цикл
			СтрокаОтбора1.Количество = 0;
			Для Каждого СтрокаОтбора2 Из СтрокаОтбора1.Строки Цикл
				СтрокаОтбора2.Количество = 0;//обнулим сначала
				НайденнаяСтрока = ТабКоличествоТребуемыхДействий.Найти(СтрокаОтбора2.Значение);
				Если НайденнаяСтрока<>Неопределено Тогда
					СтрокаОтбора2.Количество = НайденнаяСтрока.Количество;
					СтрокаОтбора1.Количество = СтрокаОтбора1.Количество+НайденнаяСтрока.Количество;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
		ТабКоличествоОрганизаций = ПодсчитанныеКоличестваВОтборах.ТабКоличествоОрганизаций;
		СтрокаГруппыОрганизаций = ПолучитьРодителяГруппыНастроек("Организации");
		Для Каждого СтрокаОтбора Из СтрокаГруппыОрганизаций.Строки Цикл
			СтрокаОтбора.Количество = 0;//обнулим сначала
			НайденнаяСтрока = ТабКоличествоОрганизаций.Найти(СтрокаОтбора.Значение);
			Если НайденнаяСтрока<>Неопределено Тогда
				СтрокаОтбора.Количество = НайденнаяСтрока.Количество;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	//вернем курсор на выбранное перед обновлением списка сообщение
	Если РежимРаботы = "Покупатель"
		Или РежимРаботы = "Поставщик" Тогда
		
		НайденаСтараяСтрока = Ложь;
		Если ТекСообщение<>Неопределено Тогда
			ТекСтрокаСписка = ТабСообщения.Найти(ТекСообщение,"СообщениеСсылка");
			Если ТекСтрокаСписка <> Неопределено Тогда
				ЭлементыФормы.ТабСообщения.ТекущаяСтрока = ТекСтрокаСписка;
				НайденаСтараяСтрока = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		//а если не нашли старое сообщение, то можем попробовать спозиционировать на документе, привязанном к старому сообщению
		Если Не НайденаСтараяСтрока 
			И ТекДокумент<>Неопределено Тогда
			ТекСтрокаСписка = ТабСообщения.Найти(ТекДокумент,"Документ");
			Если ТекСтрокаСписка <> Неопределено Тогда
				ЭлементыФормы.ТабСообщения.ТекущаяСтрока = ТекСтрокаСписка;
				НайденаСтараяСтрока = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		//и заполним меню "Еще" нужными действиями
		ТабСообщенияПриАктивизацииСтроки(ЭлементыФормы.ТабСообщения);		
		
	КонецЕсли;
	
	//перезаполним списки доступных вариантов в быстрых отборах
	Если ТабСообщения.Количество() <= 100 Тогда
		ВариантыДатПоставки = ТабСообщения.Выгрузить(,"ДатаПоставки");
		ВариантыДатПоставки.Свернуть("ДатаПоставки");
		ВариантыДатПоставки.Сортировать("ДатаПоставки ВОЗР");
		ЭлементыФормы.ОтборДатаПоставки.СписокВыбора.Очистить();
		Для Каждого Стр Из ВариантыДатПоставки Цикл
			ЭлементыФормы.ОтборДатаПоставки.СписокВыбора.Добавить(Стр.ДатаПоставки,Формат(Стр.ДатаПоставки,"ДФ=dd.MM.yyyy; ДП=-"));
		КонецЦикла;	
		
		ВариантыНомеровЗаказов = ТабСообщения.Выгрузить(,"НомерЗаказа");
		ВариантыНомеровЗаказов.Свернуть("НомерЗаказа");
		ВариантыНомеровЗаказов.Сортировать("НомерЗаказа ВОЗР");
		ЭлементыФормы.ОтборНомерЗаказа.СписокВыбора.Очистить();
		Для Каждого Стр Из ВариантыНомеровЗаказов Цикл
			ЭлементыФормы.ОтборНомерЗаказа.СписокВыбора.Добавить(Стр.НомерЗаказа);
		КонецЦикла;	
		
		ВариантыДатЗаказов = ТабСообщения.Выгрузить(,"ДатаЗаказа");
		ВариантыДатЗаказов.Свернуть("ДатаЗаказа");
		ВариантыДатЗаказов.Сортировать("ДатаЗаказа ВОЗР");
		ЭлементыФормы.ОтборДатаЗаказа.СписокВыбора.Очистить();
		Для Каждого Стр Из ВариантыДатЗаказов Цикл
			ЭлементыФормы.ОтборДатаЗаказа.СписокВыбора.Добавить(Стр.ДатаЗаказа,Формат(Стр.ДатаЗаказа,"ДФ=dd.MM.yyyy; ДП=-"));
		КонецЦикла;	
	Иначе
		ЭлементыФормы.ОтборДатаПоставки.СписокВыбора.Очистить();
		ЭлементыФормы.ОтборНомерЗаказа.СписокВыбора.Очистить();
		ЭлементыФормы.ОтборДатаЗаказа.СписокВыбора.Очистить();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры	

//получает массив требуемых действий, которые отмечены флажками в отборе левой панели
//верхние строки не включает
Функция ПолучитьТребуемыеДействияОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	МассивТД = Новый Массив;
	
	СтрокаГруппыДействий = ПолучитьРодителяГруппыНастроек("ТребуемыеДействия");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр1 Из СтрокаГруппыДействий.Строки Цикл
		//Если Стр1.Пометка Тогда
		//	МассивТД.Добавить(Стр1.Значение);
		//КонецЕсли;	
		Для Каждого Стр2 Из Стр1.Строки Цикл
			Если Стр2.Пометка Тогда
				МассивТД.Добавить(Стр2.Значение);
			Иначе
				ЕстьПропуски = Истина;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
	
	Если ДляВнешнегоХранилища Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивТД Цикл
			МассивВнешнейБазы.Добавить(Эл);
		КонецЦикла;	
		Возврат МассивВнешнейБазы;
	КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

//получает массив партнеров, которые отмечены флажками в отборе левой панели
Функция ПолучитьПартнеровОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	
	МассивТД = Новый Массив;
	
	СтрокаГруппыПартнеров = ПолучитьРодителяГруппыНастроек("Партнеры");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыПартнеров.Строки Цикл
		Если Стр.Пометка Тогда
			МассивТД.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
		
	Если ДляВнешнегоХранилища Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивТД Цикл
			МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
		КонецЦикла;	
		Возврат МассивВнешнейБазы;
	КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

//получает массив типов сообщений, которые отмечены флажками в отборе левой панели
Функция ПолучитьТипыСообщенийОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	МассивТД = Новый Массив;
	
	СтрокаГруппыТиповСообщений = ПолучитьРодителяГруппыНастроек("ТипыСообщений");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыТиповСообщений.Строки Цикл
		Если Стр.Пометка Тогда
			МассивТД.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
	
	Если ДляВнешнегоХранилища Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивТД Цикл
			МассивВнешнейБазы.Добавить(Эл);
		КонецЦикла;	
		Возврат МассивВнешнейБазы;
	КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

//получает массив партнеров, которые отмечены флажками в отборе левой панели
Функция ПолучитьОрганизацииОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	
	МассивОрганизаций = Новый Массив;
	
	СтрокаГруппыОрганизации = ПолучитьРодителяГруппыНастроек("Организации");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыОрганизации.Строки Цикл
		Если Стр.Пометка Тогда
			МассивОрганизаций.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивОрганизаций = Новый Массив;
		КонецЕсли;
		
		Возврат МассивОрганизаций;
		
	КонецЕсли;
		
	Если ДляВнешнегоХранилища Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивОрганизаций Цикл
			МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
		КонецЦикла;	
		Возврат МассивВнешнейБазы;
	КонецЕсли;	
	
	Возврат МассивОрганизаций;
	
КонецФункции	

//для действий вроде "Создать документ: Реализация товаров и услуг" возвращает "СоздатьДокумент_РеализацияТоваровУслуг"
Функция ПолучитьКодДействияПоПредставлению(ПредставлениеДействия)
	
	НужнаяСтрока = НастройкаОформленияТребуемогоДействия.Найти(ПредставлениеДействия,"Значение");
	Если НужнаяСтрока=Неопределено Тогда
		ВызватьИсключение "Проблемы с требуемыми действиями";
	КонецЕсли;
	Возврат НужнаяСтрока.КодДействия;
	
КонецФункции	

//}#КонецОбласти //ПостроениеСписков


//{#Область ЛеваяПанель

//заполняет первоначальные настройки отборов в левой панели
Процедура ЗаполнитьНастройкиОтборов(ПерезаполнятьТипыСообщений=Истина,ПерезаполнятьПартнеров=Истина,ПерезаполнятьТребуемыеДействия=Истина,ПерезаполнятьОрганизации = Истина)
	
	НастройкиПерезаполнения = Новый Структура;
	НастройкиПерезаполнения.Вставить("ПерезаполнятьТипыСообщений",		ПерезаполнятьТипыСообщений);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьПартнеров",			ПерезаполнятьПартнеров);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьТребуемыеДействия",	ПерезаполнятьТребуемыеДействия);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьОрганизации",		ПерезаполнятьОрганизации);
	
	ЗаполнитьДеревоОтборовОсновнойФормы(ДеревоФильтров,НастройкиПерезаполнения,РежимРаботы,ПоказыватьЗавершенные,НастройкаОформленияТребуемогоДействия);

	Для Каждого Стр Из ДеревоФильтров.Строки Цикл
		ЭлементыФормы.ДеревоФильтров.Развернуть(Стр,Истина);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьРодителяГруппыНастроек(ИмяГруппыНастроек)
	
	Возврат ДеревоФильтров.Строки.Найти(ИмяГруппыНастроек,"ГруппаНастроек");
	
КонецФункции

Процедура СнятьУстановитьФлажкиВеткиДерева(ВеткаДерева,Пометка)
	
	Для Каждого Стр Из ВеткаДерева.Строки Цикл
		Стр.Пометка = Пометка;
		СнятьУстановитьФлажкиВеткиДерева(Стр,Пометка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОставитьТолькоВыбраннуюСтроку(ВеткаДерева,ВыбраннаяСтрока)
	
	Для Каждого Стр Из ВеткаДерева.Строки Цикл
		Если Стр = ВыбраннаяСтрока Тогда
			Стр.Пометка = Истина;
			СнятьУстановитьФлажкиВеткиДерева(Стр,Истина);
			ТекРодитель = Стр.Родитель;
			Пока НЕ ТекРодитель = Неопределено Цикл
				ТекРодитель.Пометка = Истина;
				ТекРодитель = ТекРодитель.Родитель;
			КонецЦикла;
		Иначе
			Стр.Пометка = Ложь;
			ОставитьТолькоВыбраннуюСтроку(Стр,ВыбраннаяСтрока);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

Процедура ДеревоФильтровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаНастроек = ВыбраннаяСтрока.ГруппаНастроек;
	
	Если ГруппаНастроек = "Партнеры" И Колонка.Имя = "Изменить" Тогда
		
		Если ВыбраннаяСтрока.Родитель = Неопределено Тогда
			
			Если ПараметрыПользователяEDI.РольПользователяEDI<>"ПолныеПрава" Тогда
				Возврат;//пользователю с ограниченными правами не разрешено добавлять партнеров
			ИначеЕсли РежимРаботы = "Поставщик" Тогда
				ПолучитьФорму("ФормаСервис_ПодключениеКТорговымСетям",ЭтаФорма).ОткрытьМодально();
			ИначеЕсли РежимРаботы = "Покупатель" Тогда
				ОткрытьФормуЭлементаСправочника("Партнеры");
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуЭлементаСправочника("Партнеры",ВыбраннаяСтрока.Значение);
			
		КонецЕсли;
		
		//ЗаполнитьНастройкиОтборов();
		//ВосстановитьНастройкиФормы();
		
	ИначеЕсли ГруппаНастроек = "ТипыСообщений" 
		И Колонка.Имя = "Изменить" 
		И (ВыбраннаяСтрока.Значение = "PRICELIST" 
		ИЛИ ВыбраннаяСтрока.Значение = "SLSRPT"
		ИЛИ ВыбраннаяСтрока.Значение = "INVRPT") Тогда
 
		ФРМ = ПолучитьФорму("ФормаНезависимогоСообщения", ЭтаФорма);
		ФРМ.ТипСообщения = ВыбраннаяСтрока.Значение;
		ФРМ.Направление = "Исходящее";
		ФРМ.ОткрытьМодально();
		ОбновитьСписокЗадач();
		
	Иначе
		
		Если ГруппаНастроек = "Организации" Тогда
			Если НЕ ЕстьМетаданныеХраненияОрганизации Тогда
				ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(,"Для возможности фильтровать по организации необходимо обновить объекты Контур.EDI. Сохранить файл обновления?");
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		ГруппаНастроек = ПолучитьРодителяГруппыНастроек(ВыбраннаяСтрока.ГруппаНастроек);
		
		Если ЗначениеЗаполнено(ГруппаНастроек) Тогда
			Если ВыбраннаяСтрока = ГруппаНастроек Тогда
				СнятьУстановитьФлажкиВеткиДерева(ВыбраннаяСтрока,Истина);
			Иначе
				ОставитьТолькоВыбраннуюСтроку(ГруппаНастроек,ВыбраннаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьРодительскиеФлажкиДереваФильтров();

	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры


//свертка/открытие левой панели с отборами
Процедура ПолеКартинкиОткрывашкаНажатие(Элемент)
	
	Если ЭлементыФормы.ПанельОтбораСообщений.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
		ЭлементыФормы.ПанельОтбораСообщений.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.РазделительПанелиОтборов.Лево = 0;
		ЭлементыФормы.РазделительПанелиОтборов.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.ПолеКартинкиОткрывашка.Картинка = ЭлементыФормы.КартинкаВправо.Картинка;
	Иначе	
		ЭлементыФормы.РазделительПанелиОтборов.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительПанелиОтборов.Лево = 328;//эмпирически высчитанное значение
		ЭлементыФормы.ПанельОтбораСообщений.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПолеКартинкиОткрывашка.Картинка = ЭлементыФормы.КартинкаВлево.Картинка;
	КонецЕсли;	
	
	ТекущийЭлемент = ЭлементыФормы.ТабСообщения; // уберем рамку выделения у картинки
	
КонецПроцедуры


//сюда со временем встроим сохранение отборов по требуемым действиям
Процедура КнопкаСохраненныеОтборыНажатие(Элемент)
	
	СписокОтборов = Новый СписокЗначений;
	СписокОтборов.Добавить("Только активные");
	СписокОтборов.Добавить("Новые заказы");
	СписокОтборов.Добавить("----------------------");
	СписокОтборов.Добавить("Сохранить настройку");
	
	Если НЕ ВыбратьИзМеню(СписокОтборов,Элемент) = Неопределено Тогда
		Предупреждение("Не работает, попробуйте нажать позже");
	КонецЕсли;
	
КонецПроцедуры

//включает/выключает режим групповой обработки действий
Процедура ИзменитьРежимГрупповойОбработки()
	
	ТребуемыеДействия = ПолучитьТребуемыеДействияОтбора(Ложь);
	Если ТребуемыеДействия.Количество()=1 Тогда
		Включена = Истина;
	Иначе
		Включена = Ложь;
	КонецЕсли;	
	
	Если Включена Тогда
		
		//ЭлементыФормы.ТабСообщения.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
		//ЭлементыФормы.ТабСообщения.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		НайденнаяСтрока = НастройкаОформленияТребуемогоДействия.Найти(ТребуемыеДействия[0],"Значение");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ЭлементыФормы.КартинкаГрупповогоДействия.Картинка = ПолучитьКартинкуEDI("ЭлементФормы",НайденнаяСтрока.ИмяКартинки);
			//ЭлементыФормы.КнопкаВыполнитьДействия.Картинка = ПолучитьКартинкуEDI("ЭлементФормы",НайденнаяСтрока.ИмяКартинки);
		КонецЕсли;	
		
	Иначе
		
		ЭлементыФормы.КартинкаГрупповогоДействия.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаДействиеПоУмолчанию");
		//ЭлементыФормы.ТабСообщения.РежимВыделения = РежимВыделенияТабличногоПоля.Одиночный;
		//ЭлементыФормы.ТабСообщения.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
		
	КонецЕсли;	
	//
	//ЭлементыФормы.КартинкаГрупповогоДействия.Видимость = Включена;
	//ЭлементыФормы.КнопкаВыполнитьДействия.Видимость = Включена;
	
КонецПроцедуры	



//переключение режима сеть/поставщик
Процедура КоманднаяПанельОтборВидыСообщенийПоставщик(Кнопка)
	Если Не Кнопка.Пометка Тогда
		Кнопка.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Ложь;
		РежимРаботы = "Поставщик";
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		ОбновитьСписокЗадач();
	КонецЕсли;	
КонецПроцедуры

//переключение режима сеть/поставщик
Процедура КоманднаяПанельОтборВидыСообщенийСеть(Кнопка)
	Если Не Кнопка.Пометка Тогда
		Кнопка.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Ложь;
		РежимРаботы = "Покупатель";
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		ОбновитьСписокЗадач();
	КонецЕсли;	
КонецПроцедуры


//быстрые отборы: дата поставки
Процедура ОтборДатаПоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборДатаПоставки) Тогда 
		ЭлементыФормы.ОтборДатаПоставки.ЦветФонаПоля = Новый Цвет(255, 215, 0);
	Иначе
		ЭлементыФормы.ОтборДатаПоставки.ЦветФонаПоля = Новый Цвет();
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыФормы.ТабСообщения.ОтборСтрок.ДатаПоставки;
	ЭлементОтбора.Значение = ОтборДатаПоставки;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборДатаПоставки);
	
КонецПроцедуры

//быстрые отборы: дата заказа
Процедура ОтборДатаЗаказаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборДатаЗаказа) Тогда 
		ЭлементыФормы.ОтборДатаЗаказа.ЦветФонаПоля = Новый Цвет(255, 215, 0);
	Иначе
		ЭлементыФормы.ОтборДатаЗаказа.ЦветФонаПоля = Новый Цвет();
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыФормы.ТабСообщения.ОтборСтрок.ДатаЗаказа;
	ЭлементОтбора.Значение = ОтборДатаЗаказа;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборДатаЗаказа);
	
КонецПроцедуры

//быстрые отборы: номер заказа
Процедура ОтборНомерЗаказаПриИзменении(Элемент)
	
	Если НЕ СокрЛП(ОтборНомерЗаказа) = "" Тогда 
		ЭлементыФормы.ОтборНомерЗаказа.ЦветФонаПоля = Новый Цвет(255, 215, 0);
	Иначе
		ЭлементыФормы.ОтборНомерЗаказа.ЦветФонаПоля = Новый Цвет();
	КонецЕсли;
		
	ЭлементОтбора = ЭлементыФормы.ТабСообщения.ОтборСтрок.НомерЗаказа;
	ЭлементОтбора.Значение = ОтборНомерЗаказа;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборНомерЗаказа);
	
	//Пасха же на носу!
	Если ВРЕГ(ОтборНомерЗаказа)="IDDQD" Тогда
		Предупреждение("Включено бессмертие");
		ЭлементыФормы.ВыполнитьОбмен.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","IDDQD");
		ЭлементыФормы.ВыполнитьОбмен.Заголовок = "ОБМЕН!!!";
		
		ЭлементыФормы.ВыполнитьОбмен.ЦветФонаКнопки = WebЦвета.Красный;
		
	ИначеЕсли ВРЕГ(ОтборНомерЗаказа)="ИГОРЬ" Тогда
		Предупреждение("С днем рождения, Игорь!");
		ЭлементыФормы.ВыполнитьОбмен.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","ДРРукВнедрения");
		ЭлементыФормы.ВыполнитьОбмен.Заголовок = "ОБМЕН!!!";
		
		ЭлементыФормы.ВыполнитьОбмен.ЦветФонаКнопки = WebЦвета.ОранжевоКрасный;
		
	ИначеЕсли ВРЕГ(ОтборНомерЗаказа)="IDKFA" Тогда
		Предупреждение("Включено бесконечное оружие");
	ИначеЕсли ВРЕГ(ОтборНомерЗаказа)="12345" Тогда
		Предупреждение("Возможно, вы имели в виду ""54321""");
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекЗначениеВБыстрыйОтборДатаЗаказа(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда 
		ОтборДатаЗаказа = ТекСтрока.ДатаЗаказа;
		ОтборДатаЗаказаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекЗначениеВБыстрыйОтборДатаПоставки(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда 
		ОтборДатаПоставки = ТекСтрока.ДатаПоставки;
		ОтборДатаПоставкиПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекЗначениеВБыстрыйОтборНомерЗаказа(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда 
		ОтборНомерЗаказа = ТекСтрока.НомерЗаказа;
		ОтборНомерЗаказаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоФильтровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Значение = "Партнеры" Тогда
		ОформлениеСтроки.Ячейки.Изменить.УстановитьКартинку(БиблиотекаКартинок.ДобавитьЭлементСписка);
	ИначеЕсли ДанныеСтроки.ГруппаНастроек = "Партнеры" Тогда
		ОформлениеСтроки.Ячейки.Изменить.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы","КартинкаРедактировать"));
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок Тогда
		
		Если ДанныеСтроки.ГруппаНастроек = "ТребуемыеДействия" Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ИмяКартинки) Тогда
				ОформлениеСтроки.Ячейки.Значение.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы",ДанныеСтроки.ИмяКартинки));
			КонецЕсли;	
			
		КонецЕсли;	
		
		ОформлениеСтроки.Ячейки.Значение.УстановитьФлажок(ДанныеСтроки.Пометка);
		ОформлениеСтроки.Ячейки.Пометка.УстановитьТекст("");
		
	КонецЕсли;
	
	ТекстСтроки = ДанныеСтроки.Значение;
	Если ДанныеСтроки.ГруппаНастроек = "Партнеры" Тогда
		ТекстСтроки = ДанныеСтроки.Представление;
	КонецЕсли;	
	
	Если ДанныеСтроки.ГруппаНастроек = "ТипыСообщений" Тогда
		
		Если НЕ (ДанныеСтроки.Значение = "Типы сообщений") Тогда
			ТекстСтроки = ПеревестиТипСообщения(ТекстСтроки) + " ("+ТекстСтроки+")";
		КонецЕсли;
		
		Если ДанныеСтроки.Значение = "PRICELIST"
			ИЛИ ДанныеСтроки.Значение = "SLSRPT"
			ИЛИ ДанныеСтроки.Значение = "INVRPT" Тогда
			ОформлениеСтроки.Ячейки.Изменить.УстановитьКартинку(БиблиотекаКартинок.ДобавитьЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Количество>0 Тогда
		ОформлениеСтроки.Ячейки.Значение.УстановитьТекст(""+ТекстСтроки+" ("+ДанныеСтроки.Количество+")");
	Иначе
		ОформлениеСтроки.Ячейки.Значение.УстановитьТекст(""+ТекстСтроки);
	КонецЕсли;	
	
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		
		ОформлениеСтроки.Ячейки.Значение.Шрифт = Новый Шрифт(ОформлениеСтроки.Ячейки.Значение.Шрифт,,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	
	ЗаполнитьНастройкиОтборов(Ложь,Ложь,);
	ОбновитьСписокЗадач();

КонецПроцедуры

Процедура ДеревоФильтровПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока.ГруппаНастроек = "Организации" Тогда
		Если НЕ ЕстьМетаданныеХраненияОрганизации Тогда
			ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(,"Для возможности фильтровать по организации необходимо обновить объекты Контур.EDI. Сохранить файл обновления?");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекСтрока.Пометка = НЕ ТекСтрока.Пометка;
	
	СнятьУстановитьФлажкиВеткиДерева(ТекСтрока,ТекСтрока.Пометка);
	
	ПроверитьРодительскиеФлажкиДереваФильтров();
	
	//вернем табличное поле обратно в режим одиночного выбора
	ИзменитьРежимГрупповойОбработки();
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура ДеревоФильтровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоФильтровПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура СвернутьРазвернутьДеревоФильтров(СвернутьДеревоФильтров)
	
	ЭлементыФормы.ДеревоФильтров.Свертка = ?(СвернутьДеревоФильтров,РежимСверткиЭлементаУправления.Верх,РежимСверткиЭлементаУправления.Нет);
    ЭлементыФормы.КоманднаяПанельСохраненияНастроек.Видимость = НЕ СвернутьДеревоФильтров;
	
	Если НЕ СвернутьДеревоФильтров Тогда
		ЭлементыФормы.НадписьСвернутьНастройки.Заголовок = "скрыть";	
	Иначе
		ЭлементыФормы.НадписьСвернутьНастройки.Заголовок = "показать";
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьСвернутьНастройкиНажатие(Элемент)
	
	СвернутьДеревоФильтров = (ЭлементыФормы.НадписьСвернутьНастройки.Заголовок = "скрыть");
	
	СвернутьРазвернутьДеревоФильтров(СвернутьДеревоФильтров);

КонецПроцедуры

Процедура ЗаполнитьСохраненнымиНастройками()
	
	СохраненныеФильтры.Очистить();
	
	СписокНастроекОтбора = ПолучитьСписокНастроекОтбора();
	
	Для Каждого Стр Из СписокНастроекОтбора Цикл
		НоваяСтрока = СохраненныеФильтры.Добавить();
		НоваяСтрока.Настройка = Стр.Значение;
	КонецЦикла;
		
	НоваяСтрока = СохраненныеФильтры.Добавить();
	НоваяСтрока.Настройка = "Все документы";
	
КонецПроцедуры

Процедура СохраненныеФильтрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Жирный = (ДанныеСтроки = Элемент.ТекущиеДанные);	
	
	ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,Жирный);
	
КонецПроцедуры

Процедура УстановитьСохраненныеНастройки()
	
	ТекНастройка = ЭлементыФормы.СохраненныеФильтры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекНастройка) Тогда
		
		Если ТекНастройка.Настройка = "Все документы" Тогда
			ПоказыватьЗавершенные = Ложь;
			ЗаполнитьНастройкиОтборов();
		Иначе
			
			СохраненнаяНастройка = ПолучитьНастройкуОтбора(ТекНастройка.Настройка);
			
			Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
				ПоказыватьЗавершенные = Ложь;
				ЗаполнитьНастройкиОтборов();
			Иначе
				
				ПоказыватьЗавершенные = СохраненнаяНастройка.ПоказыватьЗавершенные;
				ЗаполнитьНастройкиОтборов();
				
				МассивОтмеченныхПартнеров		= СохраненнаяНастройка.МассивОтмеченныхПартнеров;
				МассивОтмеченныхТиповСообщений	= СохраненнаяНастройка.МассивОтмеченныхТиповСообщений;
				МассивОтмеченныхДействий		= СохраненнаяНастройка.МассивОтмеченныхДействий;
				
				МассивОтмеченныхОрганизаций	= Новый Массив;
				Если СохраненнаяНастройка.Свойство("МассивОтмеченныхОрганизаций") Тогда
					МассивОтмеченныхОрганизаций = СохраненнаяНастройка.МассивОтмеченныхОрганизаций;
				КонецЕсли;	
				
				Если МассивОтмеченныхПартнеров.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроек("Партнеры");
					Для Каждого Стр Из СтрокаГруппы.Строки Цикл
						Если МассивОтмеченныхПартнеров.Найти(Стр.Значение) = Неопределено Тогда
							Стр.Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Если МассивОтмеченныхТиповСообщений.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроек("ТипыСообщений");
					Для Каждого Стр Из СтрокаГруппы.Строки Цикл
						Если МассивОтмеченныхТиповСообщений.Найти(Стр.Значение) = Неопределено Тогда
							Стр.Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Если МассивОтмеченныхДействий.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроек("ТребуемыеДействия");
					Для Каждого Стр1 Из СтрокаГруппы.Строки Цикл
						Для Каждого Стр2 Из Стр1.Строки Цикл
							Если МассивОтмеченныхДействий.Найти(Стр2.Значение) = Неопределено Тогда
								Стр2.Пометка = Ложь;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;	
				КонецЕсли;
				
				Если МассивОтмеченныхОрганизаций.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроек("Организации");
					Для Каждого Стр Из СтрокаГруппы.Строки Цикл
						Если МассивОтмеченныхОрганизаций.Найти(Стр.Значение) = Неопределено Тогда
							Стр.Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьРодительскиеФлажкиДереваФильтров();

КонецПроцедуры
	
Процедура ПроверитьРодительскиеФлажкиДереваФильтров()
	
	Для Каждого Стр1 ИЗ ДеревоФильтров.Строки Цикл
		
		Для Каждого Стр2 Из Стр1.Строки Цикл
			
			Если Стр2.Строки.Количество()>0 Тогда
				Стр2.Пометка = (Стр2.Строки.Найти(Ложь,"Пометка") = Неопределено);
			КонецЕсли;
				
		КонецЦикла;
		
		Если Стр1.Строки.Количество()>0 Тогда
			Стр1.Пометка = (Стр1.Строки.Найти(Ложь,"Пометка") = Неопределено);
		КонецЕсли;
					
	КонецЦикла;
			
КонецПроцедуры


Процедура СохраненныеФильтрыПриАктивизацииСтроки(Элемент)
	
	УстановитьСохраненныеНастройки();
	
	ОбновитьСписокЗадач();
		
КонецПроцедуры

Процедура КоманднаяПанельСохраненияНастроекСохранитьНастройку(Кнопка)
	
	СписокНастроекОтбора = ПолучитьСписокНастроекОтбора();
	
	СписокВыбораНастроек = Новый СписокЗначений();
	Для Каждого Стр Из СписокНастроекОтбора Цикл
		СписокВыбораНастроек.Добавить(Стр.Значение,,,БиблиотекаКартинок.ЗагрузитьНастройкиОтчета);
	КонецЦикла;
	
	СписокВыбораНастроек.Добавить("Новый отбор",,,БиблиотекаКартинок.НовоеОкно);
	
	Если СписокВыбораНастроек.Количество()=1 Тогда
		ВыбранноеЗначение = СписокВыбораНастроек[0];
	Иначе
		ВыбранноеЗначение = СписокВыбораНастроек.ВыбратьЭлемент("Укажите, куда сохранить настройку");
	КонецЕсли;
		
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Если ВыбранноеЗначение.Значение = "Новый отбор" Тогда
			
			ТекНастройка = "";
			Если ВвестиСтроку(ТекНастройка,"Введите название нового отбора") Тогда
				
				СохранитьНастройкуОтбора(ТекНастройка,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПолучитьОрганизацииОтбора(Ложь,Истина),ПоказыватьЗавершенные,РежимРаботы);
                ЗаполнитьСохраненнымиНастройками();
				
			КонецЕсли;
			
		Иначе
			
			ТекНастройка = ВыбранноеЗначение.Значение;
			
			Если ЗначениеЗаполнено(ТекНастройка) Тогда
				
				СохранитьНастройкуОтбора(ТекНастройка,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПолучитьОрганизацииОтбора(Ложь,Истина),ПоказыватьЗавершенные,РежимРаботы);
	
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанельСохраненныхФильтровУдалитьНастройку(Кнопка)
	
	ТекСтрока = ЭлементыФормы.СохраненныеФильтры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока) Тогда
		ТекНастройка = ТекСтрока.Настройка;
		Если НЕ МожноИзменятьНастройкуОтбора(ТекНастройка,"Удалить") Тогда
			ВывестиПредупреждение_КонтурEDI("Нельзя изменять предопределенную настройку.");
		Иначе
			//Если ВыбранноеЗначение.Значение = "Сохранить" Тогда
			//	
			//	СохранитьНастройкуОтбора(ТекНастройка,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПоказыватьЗавершенные,РежимРаботы);
			//	
			//ИначеЕсли ВыбранноеЗначение.Значение = "Удалить" Тогда
				
				УдалитьНастройкуОтбора(ТекНастройка);
				ЗаполнитьСохраненнымиНастройками();
				
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоФильтровПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

//}#КонецОбласти //ЛеваяПанель


//{#Область Интерфейс

Процедура ПриОткрытии()
	
	РезультатИнициализации = ИнициализироватьПодключаемыеМодули();
	
	Если НЕ РезультатИнициализации.Успешно Тогда
		
		//Проверим, может, надо добавить наши объекты
		Если РезультатИнициализации.ТекстОшибки = "Не выбран режим хранения данных модуля" Тогда
			
			ФормаНастройкиХраненияДанных = ПолучитьФорму("ФормаСервис_НастройкаХраненияДанных");
			ФормаНастройкиХраненияДанных.ОткрытьМодально();
			
		//Или указать наиболее близкую конфигурацию для кастомов
		ИначеЕсли РезультатИнициализации.ТекстОшибки = "Не определена конфигурация" Тогда	
			
			ФормаВыбораКонфигурации = ПолучитьФорму("ФормаСервис_ВыборКонфигурации");
			ФормаВыбораКонфигурации.ТекстОшибки = РезультатИнициализации.ТекстОшибки;
			ФормаВыбораКонфигурации.ОткрытьМодально();
			
		Иначе
			
			ВывестиПредложениеОбновитьКонфигурацию(РезультатИнициализации.ТекстОшибки);
			
		КонецЕсли;
		
		ЭтаФорма.Закрыть();
		Возврат;
		
	КонецЕсли;
	
	Попытка
		РезультатПроверки = ПроверитьКорректностьМетаданных_EDI();
		
		Если РезультатПроверки="ЗакрытьМодуль" Тогда
			
			Закрыть();
			Возврат;
			
		ИначеЕсли РезультатПроверки="АвтообновлениеВХ" Тогда
			
			ЭтаФорма.ЗапуститьОбновлениеВХПриЗакрытии = Истина;
			ЭтаФорма.Закрыть();
			Возврат;
			
		ИначеЕсли РезультатПроверки="НеОбновленыСообщения" Тогда
			
			//Если Не ВнешнееХранилище Тогда
			//	КоманднаяПанельСообщенияВернутьСтандартныйИнтерфейс("");
			//Иначе
			//	ЭтаФорма.Закрыть();
			//	Возврат;
			//КонецЕсли;
			ЭтаФорма.Закрыть();
			Возврат;

		//ИначеЕсли РезультатПроверки="ПервыйЗапускМодуля"
		//ИначеЕсли РезультатПроверки="ОК"
		КонецЕсли;	
		
	Исключение
		Предупреждение("Не удалость проверить корректность метаданных.
		|Возможно, модуль запускается на нестандартной конфигурации.
		|Выполните настройку типов справочников и документов в подключаемом модуле.");
	КонецПопытки;	

		
	УчетныеЗаписи=ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
	ПриОткрытииФормы(ЭтаФорма);
	
	ОбработкаСобытияПодключаемогоМодуля("ПриОткрытииОсновнойФормы",, Новый Структура("Форма", ЭтаФорма));
	
	НеПоказыватьПомощник = ПолучитьКонстантуEDI("НеПоказыватьПомощникаПриЗапуске");
	
	ЭтоПервыйЗапуск = Ложь;
	
	Если НеПоказыватьПомощник <> Истина Тогда
		
		ПодключитьОбработчикОжидания("ЗапуститьСтартовыйПомощник",0.1,Истина);
		ЭтоПервыйЗапуск = Истина;
		
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗапускНовойВерсииМодуля(ЭтоПервыйЗапуск);
	
	Если НЕ РезультатПроверки.ПродолжитьЗапуск Тогда
		ВывестиПредупреждение_КонтурEDI(РезультатПроверки.ТекстОшибки);
		ЭтаФорма.Закрыть();
		ФинализироватьПодключаемыеМодули();
		Возврат;
	КонецЕсли;
	
	ОпределитьРежимРаботы();
	Если РежимРаботы = "Неизвестно" Тогда
		
		ПодключитьОбработчикОжидания("ЗапуститьСтартовыйПомощник",0.1,Истина);
		ЭтоПервыйЗапуск = Истина;
		
	КонецЕсли;	
	
	//проверим обновления данных торговых сетей
	Если Не ЭтоПервыйЗапуск 
		И ОпределитьНеобходимостьПроверкиОбновленийPARTIN() Тогда
		ПодключитьОбработчикОжидания("ПроверитьОбновленияПартнеров",0.1,Истина);
	КонецЕсли;	
	
	//запустим автообмен при необходимости
	Если ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		
		СтандартнаяОбработкаEDI = Истина;
		ОбработкаСобытияПодключаемогоМодуля("ВыполнитьАвтообмен",СтандартнаяОбработкаEDI);
		
		Если СтандартнаяОбработкаEDI Тогда
			ЗаполнитьНастройкиОтборов();
			ВосстановитьНастройкиФормы();
			КоманднаяПанельСообщенияВыполнитьОбмен("");
		КонецЕсли;
		
		ПрекратитьРаботуСистемы();
		Возврат;
		
	КонецЕсли;
	
	Попытка
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		Если РежимРаботы <> "Неизвестно" Тогда
			Если ТабСообщения.Количество() = 0 Тогда // список мог уже построиться при восстановлении настроек формы
				ОбновитьСписокЗадач();
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Предупреждение("Не удалось заполнить список документов");
	КонецПопытки;
	
	ИмяНастройкиПоказаОбновлений="ПоказатьОбновления_НомерРелиза";
	
	// Автотестирование
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		
		ОтключитьОбработчикОжидания("ЗапуститьСтартовыйПомощник");
		
		ПодключитьОбработчикОжидания("ЗапуститьАвтотесты",0.1,Истина);
		
		СохранитьЗначение(ИмяНастройкиПоказаОбновлений,ПолучитьНомерРелиза_КонтурEDI());
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		ПроверитьИзмененностьМодуля();
	КонецЕсли;
	
	//дополнительно выведем описание изменений в текущей версии модуля
	НомерРелизаПоследнихОбновлений = ВосстановитьЗначение(ИмяНастройкиПоказаОбновлений);
	ТекущийРелиз = ПолучитьНомерРелиза_КонтурEDI();
	Если Лев(НомерРелизаПоследнихОбновлений,8)<>Лев(ТекущийРелиз,8) Тогда
		ПолучитьФорму("ФормаСервис_НовоеВРелизе",ЭтаФорма).Открыть();
	КонецЕсли;	
	
	ПроставитьСрокДействияСертификатов = (ПолучитьКонстантуEDI("СрокДействияСертификатовПроставлен") <> Истина);
	
	Если ПроставитьСрокДействияСертификатов Тогда
		МодульОбменКлиент().ПроставитьСрокДействияСертификатов();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ПредупредитьОбИстекающихСертификатах", 0.1, Истина);
	КонецЕсли;
	
	// предложим подключиться к другим торговым сетям
	
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		ПредлагатьПодключиться = Ложь;
	Иначе
		ПредлагатьПодключиться = Истина;
		ДатаПредложенияПодключенияТС = ВосстановитьЗначение("КонтурEDI_ДатаПредложенияПодключенияТС");
		Если ТипЗнч(ДатаПредложенияПодключенияТС) = Тип("Дата") Тогда
			Если ТекущаяДата() < ДатаПредложенияПодключенияТС Тогда
				ПредлагатьПодключиться = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредлагатьПодключиться Тогда
   		ПодключитьОбработчикОжидания("ПредложитьПодключитьсяКДругимТорговымСетям",0.1,Истина);
	КонецЕсли;
	
	ТематическиеИконкиКПраздникам();
	
	ИнтерфейсныеПравкиДляПлатформы83();
	
	//Интеграция с ГИС Меркурий
	Если ИспользуетсяМеркурий Тогда
		ДобавитьКнопкуНастройкиМеркурий();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтерфейсныеПравкиДляПлатформы83()
	
	ВерсияПлатформы = ВерсияПлатформы1С_КонтурEDI();

	// >= 8.3.10 и < 8.3.10.2561
	Если ВерсияПлатформы.Младшая = 3 
		И ВерсияПлатформы.Релиз = 10 
		И ВерсияПлатформы.Сборка < 2561 Тогда
		
		ЭлементыФормы.ВыполнитьОбмен.ЦветТекстаКнопки = Новый Цвет(58, 74, 135);
		ЭлементыФормы.КартинкаГрупповогоДействия.ЦветФона = Новый Цвет(246, 243, 224);
		
	КонецЕсли;	

КонецПроцедуры

Процедура ДобавитьКнопкуНастройкиМеркурий()
	
	//добавляем разделитель и кнопку
	КнопкиПодменюНастройки 	= ЭлементыФормы.КнопкаНастройки.Кнопки;
	Индекс = КнопкиПодменюНастройки.Количество() - 1;
	Если КнопкиПодменюНастройки.Найти("МеркурийРазделитель") = Неопределено Тогда
		КнопкиПодменюНастройки.Вставить(Индекс+1,"МеркурийРазделитель", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;
	Если КнопкиПодменюНастройки.Найти("Меркурий") = Неопределено Тогда
		КнопкиПодменюНастройки.Вставить(Индекс+2,"Меркурий", ТипКнопкиКоманднойПанели.Действие, "Настройки ГИС Меркурий", Новый Действие("КнопкаНастройкиМеркурий"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредупредитьОбИстекающихСертификатах()
	
	Если ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		Возврат;
	КонецЕсли;

	МассивИстекающихСертификатов = ПодготовитьМассивИстекающихСертификатов();
	
	Если МассивИстекающихСертификатов.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ФормаПредупреждения = ПолучитьФорму("Сертификаты_Предупреждение", ЭтаФорма);
		
		Для каждого Сертификат Из МассивИстекающихСертификатов Цикл
			НоваяСтрока = ФормаПредупреждения.СписокСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сертификат); 
		КонецЦикла;
		
		ПриОткрытииФормы(ФормаПредупреждения);
		ФормаПредупреждения.ОткрытьМодально();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьИзмененностьМодуля()

	Если НужноПроверитьИзмененностьМодуляEDI()=Истина Тогда
		Состояние("Проверяю целостность модуля Контур.EDI");
		ПараметрыФормы = Новый Структура;
		ФормаПроверкиТекРелиза=ПолучитьФорму("ФормаСервис_Обновление",ЭтаФорма);
		ФормаПроверкиТекРелиза.ОбновитьФорму();
		ФормаПроверкиТекРелиза.ПроверитьНаличиеИВозможностьОбновления("Заглушка");
		Состояние("Целостность модуля проверена!");
	КонецЕсли;

КонецПроцедуры // ПроверитьИзмененностьМодуля()

Процедура ТематическиеИконкиКПраздникам()
	
	//тематически иконки к праздникам  , жаль что УФ не дает так же картинки установить
	
	ТекДень=День(ТекущаяДата());
	ТекМесяц=Месяц(ТекущаяДата());
	
	Если (ТекМесяц=12 И ТекДень>20)  
		ИЛИ (ТекМесяц=1 И ТекДень<8) Тогда
		ЭлементыФормы.ВыполнитьОбмен.Картинка=БиблиотекаКартинокEDI().НовыйГод;
	ИначеЕсли ТекМесяц=2 И ТекДень>21 И ТекДень<24 Тогда 
		ЭлементыФормы.ВыполнитьОбмен.Картинка=БиблиотекаКартинокEDI().Звезда23февраля;
	ИначеЕсли ТекМесяц=3 И ТекДень>=7 И ТекДень<=8 Тогда 
		ЭлементыФормы.ВыполнитьОбмен.Картинка=БиблиотекаКартинокEDI().Букет8Марта;
	ИначеЕсли ТекМесяц=5 И ТекДень>6 И ТекДень<10 Тогда 
		ЭлементыФормы.ВыполнитьОбмен.Картинка=БиблиотекаКартинокEDI().Лента9Мая;
	КонецЕсли;

КонецПроцедуры


Процедура ПредложитьПодключитьсяКДругимТорговымСетям()
	
	НеподключенныеСети =  ПолучитьСписокНеподключенныхТорговыхСетей();
	Если НеподключенныеСети.Количество()>0 Тогда
		ФормаСетей = ПолучитьФорму("ФормаСервис_ПредложениеПодключитьсяКСетям",ЭтаФорма);
		ФормаСетей.ОсновнойGLN = ПолучитьКонстантуEDI("GLN_Основной");
		Для Каждого Сеть Из НеподключенныеСети Цикл
            НоваяСтрока = ФормаСетей.ТаблицаСетей.Добавить();
			НоваяСтрока.ТорговаяСеть = Сеть.Наименование;
			НоваяСтрока.Кнопка = "Подключиться";
			НоваяСтрока.СсылкаНаСайте = Сеть.СсылкаНаСайте;
		КонецЦикла;
		ФормаСетей.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбновленияПартнеров()

	Если ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическаяПроверкаОбновлений=(ПолучитьКонстантуEDI("АвтоматическаяПроверкаОбновлений")=Истина);
	Если Не АвтоматическаяПроверкаОбновлений Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДиалога = ПроверитьОбновлениеТочекДоставки();
	УстановитьКонстантуEDI("ДатаПоследнейПроверкиОбновленийPARTIN", Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy HH:mm:ss'"));
	
	Если ПараметрыДиалога<>Неопределено
		И ПараметрыДиалога.ТаблицаСообщений.Количество()>0 Тогда
		
		ФормаДиалог = ПолучитьФорму("УниверсальныйДиалог",ЭтаФорма);
		
		ФормаДиалог.Заголовок = ПараметрыДиалога.Заголовок;
		ФормаДиалог.ТекстЗаголовка = ПараметрыДиалога.ТекстЗаголовка;
		ФормаДиалог.ТаблицаСообщений = ПараметрыДиалога.ТаблицаСообщений;
		ФормаДиалог.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьАвтотесты()
	
	Автотесты_УстановитьНачальныеНастройки();
	
	Для Каждого Действие ИЗ ПараметрыАвтотестирования.ВыполняемыеДействия Цикл
		
		Если Действие.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Действие.ФормаОбработки = "Форма" Тогда
			
			Выполнить(Действие.ВыполняемыйКод);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	//заодно проверим, можно ли отключить загрузку старых статусных сообщений по API
	Если ПротоколОбмена_КонтурEDI = "API" 
		И Сред(ПолучитьКонстантуEDI("НомерВерсии"),3,2) >= "03"//релиз новее 4.03.001.01
		И ПолучитьКонстантуEDI("НеЗагружатьСтатусныеСообщения") <> Истина
		И ПроверитьВозможностьОтключенияСтатусныхСообщений() 
		Тогда
		УстановитьКонстантуEDI("НеЗагружатьСтатусныеСообщения",Истина);
	КонецЕсли;
	
	ФинализироватьПодключаемыеМодули();	
	//Модуль_СлужебныеФункции	= Неопределено;//+
	//Модуль_ОтраслеваяЛогика	= Неопределено;//+

	НастройкиГлавнойФормы = ПолучитьСтруктуруНастроекГлавнойФормы();
	НастройкиГлавнойФормы.НастройкаПериода = НастройкаПериода;
	НастройкиГлавнойФормы.СверткаДереваФильтров = (ЭлементыФормы.НадписьСвернутьНастройки.Заголовок = "скрыть");
	
	ТекНастройка = ЭлементыФормы.СохраненныеФильтры.ТекущиеДанные;
	Если НЕ ТекНастройка = Неопределено Тогда
		НастройкиГлавнойФормы.ТекущаяНастройкаФильтра = ТекНастройка.Настройка;
	КонецЕсли;
	
	СохранитьЗначение("КонтурEDI_НастройкиГлавнойФормы",НастройкиГлавнойФормы);
	СоединениеСХранилищем = Неопределено;
	
	Если ЗапуститьОбновлениеВХПриЗакрытии Тогда
		ОбновитьВнешнееХранилище();
	КонецЕсли;	
	
КонецПроцедуры

//обновляет конфигурацию базы ВХ
Процедура ОбновитьВнешнееХранилище()
	
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	
	ИмяФайлаКонфигурации = ПолучитьИмяВременногоФайла("cf");
	ПолучитьМакет("ОбновлениеДляХраненияДанных_ВнешнееХранилище").Записать(ИмяФайлаКонфигурации);
	
	ПутьКПриложению = """"+КаталогПрограммы()+"1cv8.exe""";
	КоманднаяСтрока = "PING 127.0.0.1 -n 5 >NUL";//ждем 5 секунд
	
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		
		_СтрокаСоединения = "/F """+_ПараметрыБазы.КаталогБазы+"KonturEDI_Data\""";
		
	ИначеЕсли _ПараметрыБазы.ТипСоединения = "Сервер" Тогда
		
		_СтрокаСоединения = "/S """+_ПараметрыБазы.ИмяСервера+""" ref """+_ПараметрыБазы.ИмяБазы+"_KonturEDI_Data""";
		
	КонецЕсли;	
	
	//Обновим базу из CF
	КоманднаяСтрока = КоманднаяСтрока+Символы.ПС+
	ПутьКПриложению+" CONFIG "+_СтрокаСоединения+" /LoadCfg  """               //LoadCfg
		+ ИмяФайлаКонфигурации+""" /UpdateDBCfg /DisableStartupMessages" ;//загрузить конфиг   
		
	
	ИмяБатФайла = КаталогВременныхФайлов()+"KonturEDI_UpdateExternalStore.bat";	
	Бат=Новый ТекстовыйДокумент;
	Бат.УстановитьТекст(КоманднаяСтрока);
	Бат.Записать(ИмяБатФайла,КодировкаТекста.OEM);
	
	#Если Клиент Тогда
	ЗапуститьПриложение(ИмяБатФайла,,Ложь);
//	КомандаСистемы(""""+ИмяБатФайла+"""");
	#Иначе
	ЗапуститьПриложение(ИмяБатФайла,,Ложь);
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_ОбновитьСписокПартнеров" 
		Или ИмяСобытия = "КонтурEDI_НастроитьФорму" Тогда
		ОпределитьРежимРаботы();
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		ОбновитьСписокЗадач();
	КонецЕсли;
	
	Если Источник = "ОбработкаСобытияПодключаемогоМодуля" Тогда
		ОбработкаСобытияПодключаемогоМодуля("ОбработкаОповещенияОсновнойФормы",,Новый Структура("Форма, ИмяСобытия, Параметр", ЭтаФорма, ИмяСобытия, Параметр));
	КонецЕсли;
	
	Если ИмяСобытия = "КонтурEDI_АвтообновлениеВХ" Тогда
		ЗапуститьОбновлениеВХПриЗакрытии = Истина;
	КонецЕсли;
	
КонецПроцедуры


//Проверим, какие типы выбраны в реквизите Документ справочника КонтурEDI_Сообщения
//Если чего-то не хватает, то закроем модуль (а как тогда перевыбрать шаблон цепочки?)
//Если не используется RETANN, все равно придется добавить типы
Функция ПроверитьКорректностьМетаданных_EDI()
	
	//1. Проверим, хватает ли реквизитов в справочниках
	
	_Метаданные = ?(ВнешнееХранилище,СоединениеСХранилищем.Метаданные,Метаданные);
	
	Если _Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("ТребуемоеДействие")=Неопределено Тогда
		//надо обновить основную базу или внешнее хранилище
		
		Если ВнешнееХранилище Тогда
			ТекстПредупреждения = "Для запуска модуля необходимо обновить внешнее хранилище.";
		Иначе
			ТекстПредупреждения = "Для запуска модуля необходимо обновить конфигурацию.";
		КонецЕсли;	
		
		ДействиеПослеВопроса = ВывестиПредложениеОбновитьКонфигурацию(ТекстПредупреждения);
		
		Возврат ДействиеПослеВопроса; 





				







































	КонецЕсли;
	
	
	//2. Реквизит есть, надо проверить, заполнен ли он в существующих сообщениях.
	Если ПолучитьКонстантуEDI("Сообщения_ЗаполненоТребуемоеДействие")<>Истина Тогда
		
		Если Не ЗаполнитьТребуемоеДействиеВСообщениях() Тогда
			Возврат "НеОбновленыСообщения";
		КонецЕсли;
		
	КонецЕсли;
	
	//3. Проверим типы данных, необходимые для реквизита "Документ" в справочнике "Сообщения".
	Если ВнешнееХранилище Тогда
		//ВХ нет смысла проверять
		Возврат "ОК";
	КонецЕсли;	
		
	МыПоставщик = (ПолучитьКонстантуEDI("МыПоставщик")=Истина);
	МыПокупатель = (ПолучитьКонстантуEDI("МыТорговаяСеть")=Истина);
	
	Если Не (МыПокупатель или МыПоставщик) Тогда
		Возврат "ПервыйЗапускМодуля";//не будем выдавать такие сообщения на не настроенном модуле
	КонецЕсли;	
	
	ТекстПредупреждения = ПроверитьРеквизитДокументСправочникаСообщений();
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		Предупреждение(ТекстПредупреждения);
 	КонецЕсли;	
		
	Возврат "ОК";
	
КонецФункции

Функция ВывестиПредложениеОбновитьКонфигурацию(ТекстОшибки)
	
	Если ВнешнееХранилище Тогда
		Если Вопрос(ТекстОшибки + "
			|
			|Попытаться обновить внешнее хранилище?
			|Перед этим все пользователи, кроме вас, должны закрыть модуль Kontur.EDI
			|В данный момент в базе работает пользователей (включая вас): "+СоединениеСХранилищем.ПолучитьСеансыИнформационнойБазы().Количество(),
			РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			
			Предупреждение("Перезапустите модуль через 10 секунд");
			
			Возврат "АвтообновлениеВХ";
		КонецЕсли;
		
	Иначе//не ВнешнееХранилище. Объекты добавлены в базу, надо обновить конфигурацию БД либо продолжить работу в старом интерфейсе
		
		Если Вопрос(ТекстОшибки + "
			|
			|Сохранить файл обновления на диск?",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
			ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
			ДиалогВыбора.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
			ДиалогВыбора.ПолноеИмяФайла = "КонтурEDI_upd.cf";
			
			Если ДиалогВыбора.Выбрать() Тогда      
				
				ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
				
				ПолучитьМакет("ОбновлениеДляХраненияДанных").Записать(ПутьКФайлу);
				
				//еще высветим на экране текстовый документ с описанием того, что надо делать
				Чтиво=Новый ТекстовыйДокумент;
				Чтиво.УстановитьТекст(
				"ВНИМАНИЕ! 
				|При добавлении оптимизированных объектов хранения данных в окне ""Сравнение, объединение"" НЕОБХОДИМО снять флажок с раздела ""Свойства""!
				|Кроме того, в справочнике ""КонтурEDI_Сообщения"" для реквизита ""Документ"" желательно установить составной тип данных
				|и указать только необходимые документы: заказы, реализации/поступления, возвраты и т.д."
				);
				//				Чтиво.Записать(ПутьКФайлу+".README.txt");
				Чтиво.Показать();
				
				Предупреждение("Запустите модуль после обновления конфигурации базы из файла");
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат "ЗакрытьМодуль";
	
КонецФункции

Процедура ЗапуститьСтартовыйПомощник()
	
	ПолучитьФорму("ФормаСервис_СтартовыйПомощник").ОткрытьМодально();
	
	ЗаполнитьНастройкиОтборов();
	ВосстановитьНастройкиФормы();
	ОбновитьСписокЗадач(); 
	
КонецПроцедуры

//определяет, кто мы: сеть или поставщик
Функция ОпределитьРежимРаботы()
	
	УстановитьАктивнуюКнопкуРежимов();
	
	//Удалить
	////разделить на доступность и непосредственно установку режима
	//// скинем
	//ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Ложь;
	//ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Ложь;
	//ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Ложь;
	//ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Ложь;
	//	
	//РежимРаботы = "Неизвестно";
	//
	////в первую очередь прикинемся поставщиком
	//Если НастройкиМодуля.МыПоставщик
	//	И СокрЛП(ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик"))<>""
	//Тогда
	//	РежимРаботы = "Поставщик";
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Истина;
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Истина;
	//Иначе
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Ложь;
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Ложь;
	//КонецЕсли;
	//
	//Если НастройкиМодуля.МыТорговаяСеть
	//	И СокрЛП(ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель"))<>""
	//Тогда
	//	//дадим возможность переключения режима работы на "Покупатель"
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Истина;
	//	Если РежимРаботы <> "Поставщик" Тогда
	//		//и если сейчас мы не поставщик, то тогда уже постараемся работать как сеть
	//		РежимРаботы = "Покупатель";
	//		Если Не ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка Тогда
	//			ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Истина;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	
	//Иначе
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Ложь;
	//	ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Ложь;
	//КонецЕсли;	
	
	Возврат "";
	
КонецФункции

Процедура УстановитьДоступностьКнопокРежимов()
	
	Если НастройкиМодуля.МыПоставщик 
		И СокрЛП(ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик"))<>"" Тогда
		
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Ложь;
	КонецЕсли;
	
	Если НастройкиМодуля.МыТорговаяСеть
		И СокрЛП(ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель"))<>""  Тогда
		
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьАктивнуюКнопкуРежимов()
	
	УстановитьДоступностьКнопокРежимов();
	//теперь можем опираться на доступность
	
	Если РежимРаботы = "Поставщик" Тогда
		
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Истина;
		Если ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность <> Истина Тогда   //мы не поставщик
			ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Ложь;
			
			//при этом пробуем поставить сеть
			Если ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Истина Тогда
				РежимРаботы = "Покупатель";
				ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимРаботы = "Покупатель" Тогда 
		
		ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Истина;
		Если ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность <> Истина Тогда        //мы не сеть
			ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Ложь;
			
			//при этом пробуем поставить поставщик
			Если ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Истина Тогда
				РежимРаботы = "Поставщик";
				ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе  //не знаем какой режим был до этого (возможно это начало работы)
		
		РежимРаботы = "Неизвестно";
		
		Если ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Доступность = Истина Тогда 
			РежимРаботы = "Поставщик";
			ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Поставщик.Пометка = Истина;
			
		ИначеЕсли ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Доступность = Истина Тогда
			РежимРаботы = "Покупатель";
			ЭлементыФормы.КоманднаяПанельОтборВидыСообщений.Кнопки.Сеть.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//обновим сообщения: заполним поле "Требуемое действие"
Функция ЗаполнитьТребуемоеДействиеВСообщениях()
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТребуемоеДействие = """""
	;
	Если Запрос.Выполнить().Пустой() Тогда
		УстановитьКонстантуEDI("Сообщения_ЗаполненоТребуемоеДействие",Истина);
		Возврат Истина;
	КонецЕсли;	
	
	
	Если Вопрос("Необходимо сконвертировать сообщения для использования нового интерфейса. 
				|Это займет некоторое время, в зависимости от их количества.
				|Конвертация сообщений не влияет на работоспособность старого интерфейса.
				|Конвертацию можно прервать в любой момент нажатием Ctrl+Break и продолжить в следующий раз.
				|Продолжить?"
		,РежимДиалогаВопрос.ОКОтмена)<>КодВозвратаДиалога.ОК Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	//конвертация
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТребуемоеДействие = """""
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		Сч=Сч+1;
		Состояние("Сконвертировано: "+Сч+" из "+Выборка.Количество());
		
		ОбъектСообщения = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураСообщения = ПрочитатьСообщение(?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Выборка.Ссылка),Выборка.Ссылка));
		СохранитьОбъектСообщения(ОбъектСообщения,СтруктураСообщения);//перезаполним реквизиты справочника
		
		СтруктураСообщения	= Неопределено;
		ОбъектСообщения		= Неопределено;
		
	КонецЦикла;
	
	УстановитьКонстантуEDI("Сообщения_ЗаполненоТребуемоеДействие",Истина);
	
	Возврат Истина;
	
КонецФункции

//обновляет список задач
Процедура КоманднаяПанельСообщенияОбновитьСписокСообщений(Кнопка)
	ОбновитьСписокЗадач();
КонецПроцедуры

//открывает карточку сообщения СообщениеСсылка
Процедура мОткрытьКарточкуСообщения(СтрокаСообщения)
	
	Если Лев(СтрокаСообщения.ТипСообщения,2) = "M_" Тогда
		ОткрытьКарточкуМеркурий(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	СообщениеСсылка = СтрокаСообщения.СообщениеСсылка;
	
	Если ЭтоТипНезависимогоСообщения(СтрокаСообщения.ТипСообщения) > 0 Тогда
		ФормаСообщения = ПолучитьФорму("ФормаНезависимогоСообщения", ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе	
		ФормаСообщения = ПолучитьФорму("ФормаСообщения", ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ПодготовитьСообщение = Истина;
	Если ЗначениеЗаполнено(СообщениеСсылка) Тогда 
		
		Если НЕ СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение" Тогда
			ПодготовитьСообщение = Ложь
		Иначе
			Если Найти("\RETREC\ORDRSP\","\"+СтрокаСообщения.ТипСообщения+"\")>0 Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаСообщения.ДОкумент) Тогда
					ПодготовитьСообщение = ЛОжь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодготовитьСообщение Тогда
		
		Сообщение = ПодготовитьИсходящееСообщение(СтрокаСообщения.ТипСообщения, СтрокаСообщения.Документ);
		
		Если СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение" Тогда
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",СообщениеСсылка);
		КонецЕсли;
		
	Иначе
		
		Сообщение = ПрочитатьСообщение(СообщениеСсылка,,,);
		
	КонецЕсли;	
	
	ФормаСообщения.Сообщение=Сообщение;
	
	Если СтрокаСообщения.ТребуемоеДействие = "Обработать входящее сообщение"
		Или СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение"
		Или СтрокаСообщения.ТребуемоеДействие = "Обработать новую версию"
		Или (СтрокаСообщения.ТребуемоеДействие = "Не прошло валидацию" И РежимРаботы = "Поставщик")
	Тогда
		ТолькоПросмотр = Ложь;
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	ФормаСообщения.ТолькоПросмотрСообщения = ТолькоПросмотр;
	
	Попытка
		ФормаСообщения.ОткрытьМодально();
	Исключение
		Сообщить(ОписаниеОшибки());
		ФормаСообщения=Неопределено;
	КонецПопытки;	
	
КонецПроцедуры

//настройка интервала дат
Процедура КоманднаяПанельСообщенияВыбратьПериод(Кнопка)
	
	Если НастройкаПериода.Редактировать() Тогда
		ОбновитьСписокЗадач();
		УстановитьЗаголовокФормы();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТабСообщенияПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
	Если Элемент.ТекущаяКолонка.Имя="Обработан" Тогда
		Элемент.ТекущаяСтрока.Обработан = Не Элемент.ТекущаяСтрока.Обработан;
		Возврат;
	КонецЕсли;	
	Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
		мОткрытьКарточкуСообщения(ЭлементыФормы.ТабСообщения.ТекущаяСтрока);
	КонецЕсли;	
КонецПроцедуры

//сюда будем закидывать всякие настройки формы - выбранные действия/партнеры в отборах, период и т.д.
Процедура ВосстановитьНастройкиФормы()
	
	Если ПараметрыПользователяEDI.ВариантОбмена <> "Ручной" Тогда
		ЭлементыФормы.ВыполнитьОбмен.Доступность = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.КнопкаНастройки.Кнопки.Сервис.Кнопки.ОткрытьВнешнееХранилище.Доступность = ВнешнееХранилище;
	
	Если ПараметрыПользователяEDI.РольПользователяEDI<>"ПолныеПрава" Тогда
		
		//запретим открытие настроек и т.д.
		ЭлементыФормы.КнопкаНастройки.Кнопки.СтруктураКомпании.Доступность								= Ложь;
		ЭлементыФормы.КнопкаНастройки.Кнопки.Партнеры.Доступность										= Ложь;
		ЭлементыФормы.КнопкаНастройки.Кнопки.Настройка.Доступность										= Ложь;
		ЭлементыФормы.КнопкаНастройки.Кнопки.Сервис.Кнопки.СтартовыйПомощник.Доступность				= Ложь;
		ЭлементыФормы.КнопкаНастройки.Кнопки.Сервис.Кнопки.ОтправитьПроизвольноеСообщение.Доступность	= Ложь;

		Для Каждого Кнопка Из ЭлементыФормы.КнопкаНастройки.Кнопки.Администрирование.Кнопки Цикл
			Кнопка.Доступность	= Ложь;
		КонецЦикла;	
		
		//ЭлементыФормы.ДеревоФильтров.Колонки.Изменить.Видимость = Ложь;
		
	КонецЕсли;	
	
	ЗаполнитьСохраненнымиНастройками();
	
	_СохраненноеЗначение = ВосстановитьЗначение("КонтурEDI_НастройкиГлавнойФормы");
	
	НастройкиГлавнойФормы = ПолучитьСтруктуруНастроекГлавнойФормы();
	Если _СохраненноеЗначение<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиГлавнойФормы,_СохраненноеЗначение);
	КонецЕсли;	
	
	Если НЕ НастройкиГлавнойФормы.СверткаДереваФильтров = Неопределено Тогда
		СвернутьРазвернутьДеревоФильтров(НЕ НастройкиГлавнойФормы.СверткаДереваФильтров);
	Иначе
		СвернутьРазвернутьДеревоФильтров(Истина);
	КонецЕсли;
	
	Если НастройкаПериода = Неопределено Тогда
		Если НастройкиГлавнойФормы.НастройкаПериода = Неопределено Тогда
			//выведем документы/задачи только за текущий день
			//в противном случае попадем в ситуацию, когда будет выводиться вся история полностью
			НастройкаПериода = Новый НастройкаПериода;
		Иначе
			НастройкаПериода = НастройкиГлавнойФормы.НастройкаПериода;
		КонецЕсли;
		
		// при открытии установим период за последние три дня
		ПериодВСекундах = ТекущаяДата() - НастройкаПериода.ДатаНачала;
		
		Если ПериодВСекундах > 2 * 24 * 3600
			ИЛИ ПериодВСекундах < 0 Тогда
			НастройкаПериода.ВариантНастройки 	= ВариантНастройкиПериода.Интервал;
			НастройкаПериода.ВариантНачала 		= ВариантГраницыИнтервала.КонкретнаяДата;
			НастройкаПериода.ВариантОкончания 	= ВариантГраницыИнтервала.БезОграничения;
			НастройкаПериода.ДатаНачала  		= НачалоДня(ТекущаяДата() - 2 * 24 * 3600); // установим период за последние три дня
			НастройкаПериода.ДатаОкончания 		= Дата("00010101");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиГлавнойФормы.ТекущаяНастройкаФильтра) Тогда
		НайденнаяСтрока = СохраненныеФильтры.Найти(НастройкиГлавнойФормы.ТекущаяНастройкаФильтра,"Настройка");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ЭлементыФормы.СохраненныеФильтры.ТекущаяСтрока = НайденнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_Статистика") Тогда 
		ЭлементыФормы.КнопкаНастройки.Кнопки.Сервис.Кнопки.ПересчитатьСтатистикуSL.Доступность = Ложь;
	КонецЕсли;
		
	УстановитьЗаголовокФормы();
	
КонецПроцедуры	

//структура, в которой будем хранить настройки формы: текущие отборы, интервал дат и т.д.
Функция ПолучитьСтруктуруНастроекГлавнойФормы()
	Настройки = Новый Структура();
	Настройки.Вставить("НастройкаПериода");
	Настройки.Вставить("СверткаДереваФильтров");
	Настройки.Вставить("ТекущаяНастройкаФильтра");
	
	//Настройки.Вставить("СверткаПанелиОтборовПартнеров",РежимСверткиЭлементаУправления.Нет);
	//Настройки.Вставить("СверткаПанелиОтборовТребуемыхДействий",РежимСверткиЭлементаУправления.Нет);
	//Настройки.Вставить("СверткаПанелиОтборовСообщений",РежимСверткиЭлементаУправления.Нет);
	//Настройки.Вставить("Парам2",Парам2);
	//Настройки.Вставить("Парам3",Парам3);
	Возврат Настройки;
КонецФункции	

//раскрасим строку, переведем названия сообщений и т.д.
Процедура ТабСообщенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	КолонкаТД = ОформлениеСтроки.Ячейки.ТипСообщения;
	
	//ОформлениеСтроки.Ячейки.Пометка.УстановитьТекст("");
	
	//Если ДанныеСтроки.Статус = "Загружен" Тогда
	//	КолонкаТД.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСтатусПодтвержден"));
	//ИначеЕсли ДанныеСтроки.Статус = "Отклонен" Тогда
	//	КолонкаТД.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСтатусОтклонен"));
	//ИначеЕсли ДанныеСтроки.Статус = "ВходящийОжидаетУстановкиСоответствий" Тогда
	//	КолонкаТД.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы","КартинкаПринятьСообщение"));
	//	ОформлениеСтроки.Ячейки.Статус.УстановитьТекст("Требует обработки");
	//	//ОформлениеСтроки.Ячейки.Пометка.УстановитьФлажок(ДанныеСтроки.Пометка);
	//КонецЕсли;
	
	//переведем на русский язык типы сообщений
	//КолонкаТД.УстановитьТекст(ДанныеСтроки.ТипСообщения + " ("+ПеревестиТипСообщения(ДанныеСтроки.ТипСообщения)+")");
	
	КолонкаТД.УстановитьТекст(ПеревестиТипСообщения(ДанныеСтроки.ТипСообщения) + " (" + ДанныеСтроки.ТипСообщения + ")");
	
	//оформим колонку "Направление". Скорей всего, от этого откажемся
	КолонкаТД = ОформлениеСтроки.Ячейки.Направление;
	Если ДанныеСтроки.Направление = "Входящее" Тогда
//		КолонкаТД.УстановитьКартинку(БиблиотекаКартинок.ПереместитьВлево);
		КолонкаТД.УстановитьТекст("--> Входящее");
	Иначе
//		КолонкаТД.УстановитьКартинку(БиблиотекаКартинок.ПереместитьВправо);
		КолонкаТД.УстановитьТекст("Исходящее -->");
	//	КолонкаТД.УстановитьКартинку(БиблиотекаКартинок.Вперед);
	КонецЕсли;	
	
	
	//теперь раскрасим "Требуемое действие"
	КолонкаТД = ОформлениеСтроки.Ячейки.ТребуемоеДействие;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ТребуемоеДействие) Тогда
		
		НайденнаяСтрока = НастройкаОформленияТребуемогоДействия.Найти(ДанныеСтроки.ТребуемоеДействие,"Значение");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			КолонкаТД = ОформлениеСтроки.Ячейки.ТребуемоеДействие;
			
			Если НайденнаяСтрока.Гиперссылка Тогда
				КолонкаТД.Гиперссылка = Истина;
				КолонкаТД.ЦветТекста = Новый Цвет( 83, 106, 194);
			КонецЕсли;
			
			КолонкаТД.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы",НайденнаяСтрока.ИмяКартинки));
			
		КонецЕсли;
		
	КонецЕсли;
	
	//раскрасим строки с "выполненным" действием
	Если ДанныеСтроки.Обработан Тогда
		Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
			Шрифт_Зачеркнутый = Новый Шрифт(Ячейка.Шрифт,,,,,,Истина);
			Ячейка.Шрифт = Шрифт_Зачеркнутый;
			//Ячейка.ЦветФона = WebЦвета.СветлоГрифельноСерый;
			//Ячейка.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
			Ячейка.ЦветТекста = Новый Цвет(141, 161, 181);
			Ячейка.Гиперссылка = Ложь;
		КонецЦикла;
	КонецЕсли;	
	
	
	//выведем пиктограмму документа
	Ячейки = ОформлениеСтроки.Ячейки;	
	
	ЯчейкаКартинки = Ячейки.Документ;
	ЯчейкаКартинки.ОтображатьКартинку = Истина;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		
		ЯчейкаКартинки.ИндексКартинки = 3;
		
	Иначе
		
		Если ДанныеСтроки.Проведен Тогда
			ЯчейкаКартинки.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.ПометкаУдаления Тогда
			ЯчейкаКартинки.ИндексКартинки = 1;
		Иначе
			ЯчейкаКартинки.ИндексКартинки = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	//скроем лишние нули в дате поставки
	Если ДанныеСтроки.ДатаПоставки = НачалоДня(ДанныеСтроки.ДатаПоставки) Тогда
		ОформлениеСтроки.Ячейки.ДатаПоставки.УстановитьТекст(Формат(ДанныеСтроки.ДатаПоставки,"ДФ=dd.MM.yyyy"));
	Иначе
		ОформлениеСтроки.Ячейки.ДатаПоставки.УстановитьТекст(Формат(ДанныеСтроки.ДатаПоставки,"ДЛФ=DT"));
	КонецЕсли;	
	
	//Для строк по которым подключено расширение "Отображать ворота времени в основном списке вместо слова "ворота" выведем иконку шлагбаум и поставим подсказку про ворота
	Если ДанныеСтроки.ДопРеквизит3 = "Ворота" Тогда
		ЯчейкаШлагбаум=ОформлениеСтроки.Ячейки.ДопРеквизит3;
		ЯчейкаШлагбаум.УстановитьКартинку(ПолучитьКартинкуEDI("ЭлементФормы","КартинкаШлагбаум"));
		ЯчейкаШлагбаум.ОтображатьТекст=ложь;
	КонецЕсли;	

КонецПроцедуры

//обработка двойного нажатия строки списка или нажатия на "Требуемое действие"
Процедура ТабСообщенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ДлительнаяОперация_Завершить(); // на всякий случай, вдруг выполнение обмена было прервано
	
	СтандартнаяОбработка=Ложь;
	
	ТекКолонка = Колонка;
	ТекСтрока = ВыбраннаяСтрока;
	
	Если ТекКолонка.Имя="ТребуемоеДействие" Тогда
		
		//Подпись в ДД по 1 строке с 16 релиза будет происходить через модуль если есть соотв. Общая настройка
		Если ТекСтрока.ТребуемоеДействие = "Подписать в Диадоке"
			И ПолучитьКонстантуEDI("ОткрыватьВебИнтерфейсДляПодписанияЕдиничнойПачки")<>Истина Тогда 
			//нажмем кнопку групповых вместо открытия в вебе
			СчетаФактурыНаПодписание = Новый ТаблицаЗначений;
			ДобавитьКолонкиВТаблицуЗначений(СчетаФактурыНаПодписание,"Ссылка,BoxId,MessageId,ДокументПредставление");
			ВыполнитьЗадачу(ТекСтрока,Истина);
			ЗапроситьСертификатИПодписатьСФ();
		Иначе
			ПакетнаяОбработка=Ложь;
			
			///////////////Наиболее вероятный путь отладки//////////////////////////
			ВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка);
			///////////////////////////////////////////////////////////////////////
			
		КонецЕсли;
		
	ИначеЕсли ТекКолонка.Имя = "Документ"
		И ЗначениеЗаполнено(ТекСтрока.Документ)
		Тогда
		//откроем сам документ
		ТекСтрока.Документ.ПолучитьФорму().Открыть();
		Возврат;
		
	Иначе	
		//откроем сообщение
		Если ЗначениеЗаполнено(ТекСтрока.СообщениеСсылка) Тогда
			мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
		Иначе
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если НастройкиМодуля.ОбновлятьВесьСписокПриРаботеСЗаказами=Истина Тогда
		ОбновитьСписокЗадач();//обновим список. Иначе - зачеркнем текущую строку
	КонецЕсли;
		
КонецПроцедуры

//заполним меню "Еще"
Процедура ТабСообщенияПриАктивизацииСтроки(Элемент)
	
	ЭлементыФормы.КнопкаЕще.Кнопки.Очистить();
	ЭлементыФормы.МенюСпискаДокументов.Кнопки.Очистить();
	
	//заполним общие действия
	Если не ВнешнееХранилище=Истина и РежимРаботы = "Поставщик" Тогда 
		СкопироватьКнопкуЕще("НаЯндексКарте");
	КонецЕсли;

	СкопироватьКнопкуЕще("ВыделитьВсе");
	СкопироватьКнопкуЕще("ПереотправитьПоРеестру");
	СкопироватьКнопкуЕще("СверкаДокументов");
	СкопироватьКнопкуЕще("ПроверитьНаличиеОтказовЗапросовНаУточнение");
	СкопироватьКнопкуЕще("Разделитель");
	
	Если РежимРаботы = "Поставщик" Тогда
		СкопироватьКнопкуЕще("РаспечататьЗаказы");
		СкопироватьКнопкуЕще("РаспечататьПалетныеЛисты");
	КонецЕсли;
	
	Если РежимРаботы = "Покупатель" Тогда
		СкопироватьКнопкуЕще("СоздатьЗаказ");
	КонецЕсли;
	
	//теперь действия, зависящие от конкретной строки
	
	
	Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1
		И ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0]<>Неопределено 
		Тогда
		
		ВыбраннаяСтрока = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0];
		
		//установим доступность каждой кнопки
		
		//Кнопка "Открыть карточку сообщения"
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) Тогда
			СкопироватьКнопкуЕще("ОткрытьКарточкуСообщения");
		КонецЕсли;	
		
		//Кнопка "Связанные сообщения"
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
			СкопироватьКнопкуЕще("СвязанныеСообщения");
		КонецЕсли;	
		
		//кнопки для поставщика
		
		Если РежимРаботы = "Поставщик" Тогда
			
			//Кнопки "Показать расхождения входящего заказа и заказа в 1С"
			//	"Отклонить заказ полностью"
			Если (ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				Или ВыбраннаяСтрока.ТипСообщения = "ORDRSP")
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				И ВыбраннаяСтрока.ТребуемоеДействие<>"Ожидайте заказ"
				Тогда
				СкопироватьКнопкуЕще("ПоказатьРасхожденияВходящегоЗаказаИЗаказаВ1С");
				Если ВыбраннаяСтрока.ТребуемоеДействие<>"Обработать уточнение обратного заказа" Тогда
					СкопироватьКнопкуЕще("ОтклонитьЗаказПолностью");
				КонецЕсли;
			КонецЕсли;
			
			Если (ВыбраннаяСтрока.ТипСообщения = "RETDES" 
				ИЛИ ВыбраннаяСтрока.ТипСообщения = "RETANN")
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) Тогда
				СкопироватьКнопкуЕще("КнопкаЕщеОтклонитьВозвратПолностью");
			КонецЕсли;
				
			//Кнопка "Показать расхождения приемки"
			Если ВыбраннаяСтрока.ТипСообщения = "RECADV"
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				И ВыбраннаяСтрока.ТребуемоеДействие<>"Ожидайте уведомление о приемке"
				Тогда
				СкопироватьКнопкуЕще("ПоказатьРасхожденияПриемки");
			КонецЕсли;
			
			//Кнопка "Переотправить"
			Если ВыбраннаяСтрока.Направление = "Исходящее"
				И Найти(ВыбраннаяСтрока.ТребуемоеДействие, "Создать") = 0 
				И Найти(ВыбраннаяСтрока.ТребуемоеДействие, "Провести") = 0 
				И Найти(ВыбраннаяСтрока.ТребуемоеДействие, "Ожидается проведение") = 0 
				И Найти(ВыбраннаяСтрока.ТребуемоеДействие, "Ожидается создание") = 0 Тогда
				СкопироватьКнопкуЕще("Переотправить");
			КонецЕсли;	
			
			Если (ВыбраннаяСтрока.ТипСообщения = "INVOIC" или ВыбраннаяСтрока.ТипСообщения = "COINVOIC") 
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) 
			Тогда
				
				//как отфильтровать?
				Если ВыбраннаяСтрока.ТребуемоеДействие <> "Создать счет-фактуру" 
					И ВыбраннаяСтрока.ТребуемоеДействие <> "Отправить счет-фактуру" 
					//И ВыбраннаяСтрока.ТребуемоеДействие <> "Подписать в Диадоке"    //c 16 релиза можно открыть
				Тогда
					СкопироватьКнопкуЕще("ОткрытьЭлДокументыВДиадоке");
				КонецЕсли;	
				
			КонецЕсли;

		//кнопки для сети	
		ИначеЕсли РежимРаботы = "Покупатель" Тогда
			
			//Кнопка "Переотправить"
			Если (ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				Или ВыбраннаяСтрока.ТипСообщения = "RECADV"
				Или ВыбраннаяСтрока.ТипСообщения = "RETANN")
				
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				
				И (ВыбраннаяСтрока.ТребуемоеДействие = "Работа завершена"
					или ВыбраннаяСтрока.ТребуемоеДействие = "Переотправить сообщение")
			Тогда
				СкопироватьКнопкуЕще("Переотправить");
			КонецЕсли;
			
			//Кнопка "Скопировать"
			Если ЗначениеЗаполнено(ВыбраннаяСтрока.Документ)
				И (ВыбраннаяСтрока.ТипСообщения = "ORDERS" или ВыбраннаяСтрока.ТипСообщения = "ORDRSP")
			Тогда
				СкопироватьКнопкуЕще("СкопироватьЗаказ");
			КонецЕсли;
			
			//Кнопка "Отменить заказ"
			Если ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ)
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				//нужна ли проверка на то, что сообщение отправлено
			Тогда
				СкопироватьКнопкуЕще("ОтменитьЗаказ");
			КонецЕсли;
			
			//Кнопка "Отправить RECADV"
			Если (ВыбраннаяСтрока.ТипСообщения = "ORDERS" 
				ИЛИ ВыбраннаяСтрока.ТипСообщения = "ORDRSP"
				ИЛИ ВыбраннаяСтрока.ТипСообщения = "DESADV")
				
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				И ЗначениеЗаполнено(ВыбраннаяСтрока.Партнер)
				Тогда
				СкопироватьКнопкуЕще("ОтправитьRECADV");
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	ОбработкаСобытияПодключаемогоМодуля("ИзменитьСоставКнопкиЕще",,Новый Структура("КнопкаЕще, ЭтоУФ", ЭлементыФормы.КнопкаЕще, Ложь));
	//установить доступность пунктов из "Еще"
КонецПроцедуры

//Копирует кнопку с заданным именем из скрытого меню "Еще" в видимое меню
//Такие навороты нужны для того, чтобы в меню "Еще" были только доступные для выбранной строки действия
Процедура СкопироватьКнопкуЕще(ИмяКнопки)
	
	Источник = ЭлементыФормы.КнопкаЕщеСкрытая.Кнопки.Найти(ИмяКнопки);
	
	Нов = ЭлементыФормы.КнопкаЕще.Кнопки.Добавить(Источник.Имя, Источник.ТипКнопки,Источник.Текст, Источник.Действие);
	Нов.Картинка = Источник.Картинка;
	Нов.СочетаниеКлавиш = Источник.СочетаниеКлавиш;
	Нов.Доступность = Истина;
	
	Нов = ЭлементыФормы.МенюСпискаДокументов.Кнопки.Добавить(Источник.Имя, Источник.ТипКнопки,Источник.Текст, Источник.Действие);
	Нов.Картинка = Источник.Картинка;
	Нов.СочетаниеКлавиш = Источник.СочетаниеКлавиш;
	Нов.Доступность = Истина;
	
КонецПроцедуры	

//эту кнопку создал ПМ, ему и возвращаем управление
Процедура КнопкаЕщеОбработчикПодключаемогоМодуля(Кнопка) Экспорт//КнЕще
	
	ПараметрыВызоваПМ = Новый Структура("Кнопка, ЭлементыФормы, НужноОбновитьСписокЗадач", Кнопка, ЭлементыФормы, Ложь);
	ОбработкаСобытияПодключаемогоМодуля("НажатиеКнопкиЕщеПодключаемогоМодуля",,ПараметрыВызоваПМ);
	
	Если ПараметрыВызоваПМ.НужноОбновитьСписокЗадач = Истина Тогда 
		ОбновитьСписокЗадач();
	КонецЕсли;
	
КонецПроцедуры

//сформируем заголовок формы
Процедура УстановитьЗаголовокФормы()
	
	_ПредставлениеПериода = ПредставлениеПериода(НастройкаПериода.ДатаНачала,НастройкаПериода.ДатаОкончания);
	ТекстЗаголовкаФормы = "Контур.EDI "+ПолучитьНомерРелиза_КонтурEDI() + " "+ПредставлениеОсобенностейМодуля()+" / ";
	ТекстПериода = ?(_ПредставлениеПериода="","<период не установлен>",_ПредставлениеПериода);
	
	ЭтаФорма.Заголовок = ТекстЗаголовкаФормы + " "+ТекстПериода + " / Последний обмен с сервером: " + ПолучитьКонстантуEDI("ДатаПоследнегоВыполненияОбмена");
	
КонецПроцедуры	

//}#КонецОбласти //Интерфейс


//{#Область КнопкиВерхнейПанели
Процедура КнопкаДействияФормыНажатие(Элемент)
	
	ОбработкаСобытияПодключаемогоМодуля("КнопкаОсновнойФормыНажатие",,Новый Структура("ИмяКнопки,Форма",Элемент.Имя,ЭтаФорма));
    	
КонецПроцедуры

Процедура ДействияФормыПодменюСправочники(Кнопка)
	
	ПолучитьФорму("ФормаСтруктураКомпании_Элемент",ЭтаФорма).ОткрытьМодально();
	//НастроитьФорму();
	ОпределитьРежимРаботы();
	
	ЗаполнитьНастройкиОтборов();
	ВосстановитьНастройкиФормы();
	ОбновитьСписокЗадач(); //пока отключу
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ПолучитьФорму("ФормаСервис_Настройка",ЭтаФорма).ОткрытьМодально();
	
	//УстановитьДоступностьСтраниц();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыТорговыеСети(Кнопка)
	
	ПолучитьФорму("ФормаПартнеры_Список",ЭтаФорма).Открыть();
		
КонецПроцедуры

Процедура КоманднаяПанельФормыСтартовыйПомощник(Кнопка)
	
	ПолучитьФорму("ФормаСервис_СтартовыйПомощник",ЭтаФорма).ОткрытьМодально();
	//НастроитьФорму();

КонецПроцедуры

Процедура КоманднаяПанельФормыWebИнтерфейс(Кнопка)
	
//	ПолучитьФорму("ФормаСервис_Web",ЭтаФорма).Открыть();
	ЗапуститьПриложение("http://edi.kontur.ru");
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОПрограмме(Кнопка)
	
	ПолучитьФорму("ФормаСервис_ОПрограмме",ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры                            

Процедура ДействияФормыУчетныеЗаписи(Кнопка)

	ПолучитьФорму("ФормаУчетныеЗаписи_Список",ЭтаФорма).Открыть();
	
КонецПроцедуры

Процедура ДействияФормыПользователи(Кнопка)

	ПолучитьФорму("ФормаПользователи_Список",ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

Процедура КнопкаНастройкиНашиОрганизации(Кнопка)
	ПолучитьФорму("НашиОрганизации_Список",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура КоманднаяПанельСообщенияВыполнитьОбмен(Кнопка)
	
	ПараметрыОбмена = ПараметрыОбменаССервером();
	ПараметрыОбмена.Вставить("ТипыСообщенийОтбор",ПолучитьТипыСообщенийОтбора(Ложь));
	ПараметрыОбмена.Вставить("ЭтоФоновоеЗадание",Ложь);
	
	ВыполнитьОбменССервером(,ПараметрыОбмена);
	ПодписатьДокументыВДиадок();
	ОтправитьИзвещенияОПолучении();
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура ПодписатьДокументыВДиадок()

	МассивСообщений = ПолучитьМассивСообщенийДляАвтоматическогоПодписания(НастройкаПериода.ДатаНачала, НастройкаПериода.ДатаОкончания);
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПодписания = МодульОбменКлиент();	
	ФормаПодписания.Действие = "ПодписатьСчетаФактуры";
	ФормаПодписания.МассивСообщений = МассивСообщений;
	ФормаПодписания.ОткрытьМодально();

КонецПроцедуры

Процедура ОтправитьИзвещенияОПолучении()
	
	ОтправлятьИзвещения = НЕ (ПолучитьКонстантуEDI("ОтправлятьИзвещенияОПолучении") = Ложь);
		
	Если НЕ ОтправлятьИзвещения Тогда
		Возврат;
	КонецЕсли;
	
	ТабСФДляОтправкиИзвещений = ПолучитьТаблицуСчетовФактурДляОтправкиИзвещений();
	
	Если ТабСФДляОтправкиИзвещений.Количество() > 0 Тогда
		
		ФормаПодписания = МодульОбменКлиент();	
		ФормаПодписания.Действие = "ОтправитьИзвещенияОПолучении";
		ФормаПодписания.СчетаФактурыНаПодписание = ТабСФДляОтправкиИзвещений;
		ФормаПодписания.ОткрытьМодально();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьОбменТолькоОтправка(Кнопка)
	
	ПараметрыОбмена = ПараметрыОбменаССервером();
	ПараметрыОбмена.Вставить("ТипыСообщенийОтбор",ПолучитьТипыСообщенийОтбора(Ложь));
	ПараметрыОбмена.Вставить("ТолькоОтправка"	,Истина);
	
	//до рефакторинга вызывали ОтправитьСообщенияОжидающиеОтправки();
	ВыполнитьОбменССервером(,ПараметрыОбмена);
	
	ОбновитьСписокЗадач();
//	Состояние("Сообщения отправлены");
КонецПроцедуры

Процедура ДействияФормыПроверитьНаличиеОбновлений(Кнопка)
	ПолучитьФорму("ФормаСервис_Обновление",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура НадписьТехподдержкаПочтаНажатие(Элемент)
	
	Попытка
		темаОбращения="Проблема в модуле ("+ПолучитьНомерРелиза_КонтурEDI()+")";
		текстОбращения="<шаблон> В форме ________ происходит_________ если__________ при этом________";
		
		ЗапуститьПриложение("mailto:edi@skbkontur.ru&subject="+темаОбращения+"&body="+текстОбращения);//&subject=тема&body=текст""c:\Io.sys""");
	Исключение
		Сообщить("Не получилось подключиться к вашей почтовой программе по-умолчанию."+Символы.ПС+"Мы по-прежнему хотим решить вашу проблему, звоните: 8 800 500-33-51")
	КонецПопытки;
	
КонецПроцедуры

Процедура НадписьТехподдержкаТелеграмЧатНажатие(Элемент)
	
	ЗапуститьПриложение("https://telegram.me/Modul_EDI_bot");
	
КонецПроцедуры

Процедура НадписьТехподдержкаТелефонНажатие(Элемент)
	
	ЗапуститьПриложение("callto:+78005003351");
	
КонецПроцедуры

Процедура НадписьТехподдержкаСправкаНажатие(Элемент)
	
	ЗапуститьПриложение("https://support.kontur.ru/display/EDIDoc1C8");	
	
КонецПроцедуры

Процедура ДействияФормыЗапуститьКонфигуратор(Кнопка)

	ЗапуститьСистему("DESIGNER /RunModeOrdinaryApplication"); 
	
КонецПроцедуры

Процедура ДействияФормыЗапуститьДиагностику(Кнопка)
	
	ЗапуститьПриложение("https://help.kontur.ru/diadoc");

КонецПроцедуры

Процедура ДействияФормыОтправитьМодульДляАнализаВКонтур(Кнопка)
	
	Префикс = СокрЛП(ПолучитьКонстантуEDI("GLN_Основной"));
	СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	Если СписокЮрЛиц.Количество()>0 Тогда
		Префикс = Префикс+"_"+УбратьНедопустимыеСимволы(СокрЛП(СписокЮрЛиц[0].ЮрФизЛицо));
	КонецЕсли;

	ИмяАрхива = Префикс+"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hh-mm-ss")+"._zip";
	
	ПутьКАрхиву = КаталогВременныхФайлов()+ИмяАрхива;
	
	ПутьКОбработке = КаталогВременныхФайлов()+"КонтурEDI_Копия.epf";
	ПутьКПМ = КаталогВременныхФайлов()+"КонтурEDI_ПМ_Копия.epf";
	
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПутьКАрхиву);
	
	// добавляем файл настроек
	ЗаписьАрхива.Добавить(ПодготовитьФайлНастроекМодуля());
	
	ИспИмяФайла = Неопределено;
	Попытка
		Выполнить("ИспИмяФайла = ИспользуемоеИмяФайла");
	Исключение
	КонецПопытки;
	
	Если ИспИмяФайла = Неопределено Тогда
		ВывестиПредупреждение_КонтурEDI("На вашей версии платформы 1С этот механизм не поддерживается!");
	КонецЕсли;
	
	// добавляем файл обработки
	Если Прав(ИспИмяФайла,3) = "tmp" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВнешниеОбработки.Ссылка
		               |ИЗ
		               |	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		               |ГДЕ
		               |	ВнешниеОбработки.ВидОбработки = &ВидОбработки
		               |    И НЕ ВнешниеОбработки.ПометкаУдаления
		               |УПОРЯДОЧИТЬ ПО
		               |	ВнешниеОбработки.Наименование";
					   
		Запрос.УстановитьПараметр("ВидОбработки",Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка);	
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		ВыбраннаяСтрока = ТЗ.ВыбратьСтроку("Выберите обработку с модулем Контур-EDI");
		Если НЕ ВыбраннаяСтрока = Неопределено Тогда
			
			МодульОбъект = ВыбраннаяСтрока.Ссылка.ПолучитьОбъект();
			
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = МодульОбъект.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ПутьКОбработке);
			
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Попытка
			_ИспользуемоеИмяФайла=ОбработкаОбъект.ИспользуемоеИмяФайла;
			КопироватьФайл(_ИспользуемоеИмяФайла,ПутьКОбработке);
		Исключение
			ВывестиПредупреждение_КонтурEDI("Не удалось отправить файл внешней обработки. Возможно, обработка встроена в конфигурацию.");
		КонецПопытки;	
	КонецЕсли;	
	ЗаписьАрхива.Добавить(ПутьКОбработке);
	
	// добавляем файл подключаемого модуля
	Если ИспользуетсяПодключаемыйМодуль Тогда
		
		ИспользуемоеИмяФайлаПМ = ВнешнийМодуль.ИспользуемоеИмяФайла;
		
		Если Прав(ИспользуемоеИмяФайлаПМ,3) = "tmp" Тогда
			
			Модуль = ПолучитьСсылкуНаПодключаемыйМодуль();
			
			Если ЗначениеЗаполнено(Модуль) Тогда
				
				ИмяРеквизита = "";
				
				МетаданныеСправочника = Модуль.Метаданные();
				Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
					
					Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
						ИмяРеквизита = Реквизит.Имя;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					
					МодульОбъект = Модуль.ПолучитьОбъект();
					
					ИмяФайла = ПолучитьИмяВременногоФайла();
					ДвоичныеДанные = МодульОбъект[ИмяРеквизита].Получить();
					ДвоичныеДанные.Записать(ПутьКПМ);
					
					ЗаписьАрхива.Добавить(ПутьКПМ);
					
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			
			КопироватьФайл(ВнешнийМодуль.ИспользуемоеИмяФайла,ПутьКПМ);
			ЗаписьАрхива.Добавить(ПутьКПМ);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЗаписьАрхива.Записать();
	
	// выкладываем на служебный ftp
	Сервер				= ПолучитьКонстантуEDI("Сервер");
	Порт				= ПолучитьКонстантуEDI("Порт");
	ПассивныйРежим	   	= ПолучитьКонстантуEDI("ПассивныйРежим");
	
	Если Порт = Неопределено Тогда
		Порт = 21;
	КонецЕсли;
	
	Если ПассивныйРежим = Неопределено Тогда
		ПассивныйРежим = Истина;
	КонецЕсли;

	Попытка
		Соединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, "2000000004792", "a66k8pi7p6tpz25", , ПассивныйРежим);
		Соединение.Записать(ПутьКАрхиву,"outbox/"+ИмяАрхива);	
	Исключение
		ВывестиПредупреждение_КонтурEDI("Не удалось отправить данные, пожалуйста, попробуйте еще раз!");
	КонецПопытки;
	
	ВывестиПредупреждение_КонтурEDI("Данные успешно отправлены!");

КонецПроцедуры

Процедура ДействияФормыУдаленнаяПоддержка(Кнопка)
	
	//тим будем при первом запуске качать с файла и пытаться сохранить в конфигурации
	ПолныйПутьКФайлу = КаталогВременныхФайлов() + "КонтурEDI_TeamViewer.exe";
	СохраненныйФайл = ПолучитьФайлИзБазы("КонтурEDI.TeamViewer");
	
	//в первую очередь будем пытаться взять файл из базы
	Если СохраненныйФайл<>Неопределено Тогда
		СохраненныйФайл.Записать(ПолныйПутьКФайлу);
	Иначе	//а если в базе нет, то попробуем загрузить из временного каталога
		
		Ф=Новый Файл(ПолныйПутьКФайлу);
		Если Не ф.Существует() Тогда//не нашли, будем качать с сервера
			
			Состояние("Загрузка модуля удаленного доступа...");
			Сообщить("Загрузка модуля удаленного доступа...");//продублируем в окно сообщений
			Если Не	ПолучитьФайлHTTP(
				ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
				"/1c/support/КонтурEDI_TeamViewer.exe",
				ПолныйПутьКФайлу) 
			Тогда
				Предупреждение("Не удалось загрузить модуль техподдержки с сервера. 
				|Вы можете попытаться самостоятельно скачать модуль с сайта www.teamviewer.com
				|или обратиться к системному администратору");
				Состояние("");
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Состояние("Сохранение модуля удаленного доступа...");
		Если Не СохранитьФайлВБазу(ПолныйПутьКФайлу,"КонтурEDI.TeamViewer") Тогда
			Сообщить("Не удалось сохранить модуль удаленной поддержки в базе, в следующий раз модуль будет повторно загружен с сайта или локального каталога");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Состояние("Запуск модуля удаленного доступа...");
	ЗапуститьПриложение(ПолныйПутьКФайлу);
	
КонецПроцедуры

Процедура КнопкаНастройкиПредоставитьУдаленныйДоступКонтурVNC(Кнопка)
	
	//vnc будем при первом запуске качать с файла и пытаться сохранить в конфигурации
	ПолныйПутьКФайлу = КаталогВременныхФайлов() + "Kontur-Help-VNC.exe";
	СохраненныйФайл	 = ПолучитьФайлИзБазы("КонтурEDI.VNC");
	
	//в первую очередь будем пытаться взять файл из базы
	Если СохраненныйФайл<>Неопределено Тогда
		СохраненныйФайл.Записать(ПолныйПутьКФайлу);
	Иначе	//а если в базе нет, то попробуем загрузить из временного каталога
		
		Ф=Новый Файл(ПолныйПутьКФайлу);
		Если Не ф.Существует() Тогда//не нашли, будем качать с сервера
			
			Состояние("Загрузка модуля удаленного доступа...");
			Сообщить("Загрузка модуля удаленного доступа...");//продублируем в окно сообщений

			Адрес_help_kontur_ru = "help.kontur.ru";
			
			Если Не	ПолучитьФайлHTTP(
				ПолучитьСоединениеHTTP(Адрес_help_kontur_ru),
				"/content/components/helpers/Kontur-Help-VNC.exe",
				ПолныйПутьКФайлу) 
			Тогда
				Предупреждение("Не удалось загрузить модуль техподдержки с сервера. 
				|Вы можете попытаться самостоятельно скачать модуль с сайта www.help.kontur.ru/vnc
				|или обратиться к системному администратору");
				Состояние("");
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Состояние("Сохранение модуля удаленного доступа...");
		Если Не СохранитьФайлВБазу(ПолныйПутьКФайлу,"КонтурEDI.VNC") Тогда
			Сообщить("Не удалось сохранить модуль удаленной поддержки в базе, в следующий раз модуль будет повторно загружен с сайта");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Состояние("Запуск модуля удаленного доступа...");
	ЗапуститьПриложение(ПолныйПутьКФайлу);
	
КонецПроцедуры

Процедура ДействияФормыГрупповаяПереотправкаALCRPT(Кнопка)

	ПолучитьФорму("ФормаСервис_ГрупповаяПереотправкаALCRPT",ЭтаФорма).Открыть();
	
КонецПроцедуры

Процедура КнопкаНастройкиОткрытьВнешнееХранилище(Кнопка)
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		//	Внешним хранилищем считаем папку с именем "KonturEDI_Data", которая находится в каталоге ИБ
		
		ПутьКВнешнемуХранилищу = _ПараметрыБазы.КаталогБазы+"KonturEDI_Data\";
		
		_СтрокаСоединения = "/F"""+СокрЛП(ПутьКВнешнемуХранилищу)+"""";
		
		
	ИначеЕсли _ПараметрыБазы.ТипСоединения = "Сервер" Тогда
		//	Внешним хранилищем считаем базу на том же сервере, но с именем <Имябазы+Постфикс "KonturEDI_Data">
		
		_СтрокаСоединения = "/S"""+_ПараметрыБазы.ИмяСервера+"\"+_ПараметрыБазы.ИмяБазы+"_KonturEDI_Data""";
		
	КонецЕсли;
	
	ПутьКПриложению = """"+КаталогПрограммы()+"1cv8.exe""";
	ЗапуститьПриложение(ПутьКПриложению+" ENTERPRISE "+_СтрокаСоединения);
	
КонецПроцедуры

Процедура КнопкаНастройкиНовоеВРелизе(Кнопка)
	ПолучитьФорму("ФормаСервис_НовоеВРелизе",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура КнопкаНастройкиСКакимиЕщеСетямиЯМогуРаботать(Кнопка)
	ПредложитьПодключитьсяКДругимТорговымСетям();
КонецПроцедуры

Процедура КнопкаАнализЗаказов(Кнопка)
	
	Если не ВнешнееХранилище Тогда 
		ПолучитьФорму("Отчет_АнализЗаказов",ЭтаФорма).ОткрытьМодально();
	иначе
		ВывестиПредупреждение_КонтурEDI("Функционал анализа заказов доступен только для режима работы с добавлением объектов в конфигурацию.");
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкиОтправитьПроизвольноеСообщение(Кнопка)
	ПолучитьФорму("ОтправкаПроизвольногоСообщения",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура КнопкаНастройкиОтчетность(Кнопка)
	//проверить доступность метаданных по отчетности
	//и либо вызвать отчет либо сказать обратитесь в контур
	Если (ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_Статистика") 
			И ЕстьНеобходимыеМетаданные("Отчеты.КонтурEDI_АнализДанных")) Тогда 
			
		КоличествоНерасчитанных = Отчетность_НеотраженнаяСтатистика_ПолучитьКоличествоСообщений();
		Если КоличествоНерасчитанных > 0 Тогда
			Если Вопрос("Есть новые сообщения ("+КоличествоНерасчитанных+"). Рассчитать по ним статистику?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда 
				Отчетность_НеотраженнаяСтатистика_Рассчитать();
			КонецЕсли;
		КонецЕсли;
			
		ОткрытьФорму("Отчет.КонтурEDI_АнализДанных.Форма");
		
	Иначе
		Если Вопрос("Для работы с подсистемой отчетности, необходимо обновить объекты Контур.EDI"+Символы.ПС+"Сохранить файл обновления на диск?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда 
			//предлагаем сохранить файл обновления и инструкцию
			ПредложитьОбновитьОбъектыМетаданныхКонтурEDI("ОбновлениеДляХраненияДанных");
			ЗапуститьПриложение("https://edi.kontur.ru/1c/konturEDI_82/КонтурEDI_УстановкаИЗапускОтчетности.pdf");
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаНастройкиПересчитатьСтатистикуSL(Кнопка)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = НастройкаПериода.ДатаНачала;
	Диалог.Период.ДатаОкончания = НастройкаПериода.ДатаОкончания;
	
	Если Диалог.Редактировать() Тогда 
		Обработчик_ПересчитатьСтатичтикуSL(Диалог.Период,неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура Обработчик_ПересчитатьСтатичтикуSL(ПериодSL,ДопПараметр1=Неопределено)
	
	Если ПериодSL<>Неопределено  Тогда 
		Состояние("Рассчитываю статистику сообщений за период...",50);
		
		ДатаС = ПериодSL.ДатаНачала;
		Если Не ЗначениеЗаполнено(ПериодSL.ДатаОкончания) Тогда
			ДатаПо = КонецДня(Дата("39990101"));
		Иначе	
			ДатаПо = КонецДня(ПериодSL.ДатаОкончания);
		КонецЕсли;	
		
		Отчетность_ПересчитатьСтатичтикуSLСервер(ДатаС,ДатаПо);
		Предупреждение("Статистика по сообщениям за период с "+Формат(ДатаС,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаПо,"ДФ=dd.MM.yyyy")+" обновлена");
		
	КонецЕсли;
КонецПроцедуры


//убирает из строки символы, недопустимые в имени файла 
Функция УбратьНедопустимыеСимволы(знач Значение)
	
	Результат = СтрЗаменить(Значение,"\","");
	Результат = СтрЗаменить(Результат,"/","");
	Результат = СтрЗаменить(Результат,"~","");
	Результат = СтрЗаменить(Результат,"`","");
	Результат = СтрЗаменить(Результат,"!","");
	Результат = СтрЗаменить(Результат,"|","");
	Результат = СтрЗаменить(Результат,".","");
	Результат = СтрЗаменить(Результат,"""","");
	Результат = СтрЗаменить(Результат,"?","");
	Результат = СтрЗаменить(Результат,"*","");
	
	Возврат Результат;
	
КонецФункции



//Действия подменю "Еще"

//покажем сообщения, связанные с текущим документом
Процедура КнопкаЕщеСвязанныеСообщения(Кнопка)
	//показать форму "Связанные сообщения" по текущему документу
	ТекСтрока = Неопределено;
	Если ЭлементыФормы.ТабСообщения.РежимВыделения = РежимВыделенияТабличногоПоля.Одиночный Тогда
		ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	Иначе
		Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
			ТекСтрока = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0];
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекСтрока)
		И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
		
		ФормаСвязанныхСообщений = ПолучитьФорму("ФормаСервис_СвязанныеСообщения",ЭтаФорма);
		ФормаСвязанныхСообщений.ДокументСсылка = ТекСтрока.Документ;
		ФормаСвязанныхСообщений.СообщениеСсылка = ТекСтрока.СообщениеСсылка;
		ФормаСвязанныхСообщений.ОткрытьМодально();
		
	КонецЕсли;	
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеПоказатьРасхожденияВходящегоЗаказаИЗаказаВ1С(Кнопка)
		
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	Если НЕ ТекСтрока = Неопределено Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ВидРасхождения", 	"РасхожденияЗаказа");
		Параметры.Вставить("Заказ",				ТекСтрока.Документ);
		Параметры.Вставить("Параметры",			Неопределено);
		ФормаПросмотра = ПолучитьФорму("ФормаСервис_ПросмотрРасхождений",ЭтаФорма,ТекСтрока.Документ);
		ФормаПросмотра.Параметры = Параметры;
		ФормаПросмотра.Открыть();
	КонецЕсли;
	//ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеСкрытаяКнопкаЕщеОтклонитьВозвратПолностью(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Действие", "Отклонить");
	Параметры.Вставить("ВходящийВозврат", ТекСтрока.СообщениеСсылка);
	
	Если ТекСтрока.ТипСообщения = "RETANN" Тогда
		ТипОтправляемогоСообщения = "RETINS";
	ИначеЕсли ТекСтрока.ТипСообщения = "RETDES" Тогда	
		ТипОтправляемогоСообщения = "RETREC";
    КонецЕсли;
	
	МожноОтклонитьВозврат = (ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Партнер, ТипОтправляемогоСообщения) = Истина);
	Если Не МожноОтклонитьВозврат Тогда
		ПредставлениеПартнера = ПолучитьПредставлениеЭлементаСправочника(Параметры.ВходящийВозврат.Партнер);
		ВывестиПредупреждение_КонтурEDI("Настройки торговой сети """ + ПредставлениеПартнера + """ не позволяют отклонить возврат.");
		Возврат;
	КонецЕсли;
	
	Сообщение = ПодготовитьИсходящееСообщение(ТипОтправляемогоСообщения, ТекСтрока.Документ, Параметры);
	
	ФормаСообщения = ПолучитьФорму("ФормаСообщения", ЭтаФорма);
	ФормаСообщения.Сообщение = Сообщение;
	ФормаСообщения.Параметры = Параметры;
	ФормаСообщения.ОткрытьМодально();
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеОтклонитьЗаказПолностью(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	
	//проверим наличие возможности отправлять ORDRSP у этого партнера
	//Если Параметры.Свойство("ВходящийЗаказ") и ЗначениеЗаполнено(Параметры.ВходящийЗаказ) Тогда
	
    МожноОтклонитьЗаказ = (ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Партнер,"ORDRSP")=Истина);
	Если Не МожноОтклонитьЗаказ Тогда
		ПредставлениеПартнера = ПолучитьПредставлениеЭлементаСправочника(ТекСтрока.Партнер);
		ВывестиПредупреждение_КонтурEDI("Настройки торговой сети """ + ПредставлениеПартнера + """ не позволяют отклонить заказ.");
		Возврат;
	КонецЕсли;
	//КонецЕсли;
	
	Если ТекСтрока.ТипСообщения = "ORDERS" Тогда
		ВходящийЗаказСсылка = ТекСтрока.СообщениеСсылка;
	ИначеЕсли ТекСтрока.ТипСообщения = "ORDRSP" Тогда
		ВходящийЗаказСсылка = НайтиСообщениеДокумента(НайтиСвязанныйДокументПоТипуСообщения(ТекСтрока.Документ,"ORDERS"), "ORDERS", "Входящее");
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Статус","Отклонить");
	Параметры.Вставить("ВходящийЗаказ", ВходящийЗаказСсылка);
	//Если ЗначениеЗаполнено(ТекСтрока.СообщениеСсылка) Тогда
		
		//СообщениеЗаказ = ПрочитатьСообщение(ТекСтрока.СообщениеСсылка,,"ORDERS","Входящее");
		//Если ЗначениеЗаполнено(СообщениеЗаказ) Тогда
		//	
		//	КонвертироватьСообщениеEDIв1С(СообщениеЗаказ);
		//	
		//	Параметры.Вставить("ВходящийЗаказ", СообщениеЗаказ);
		//	
		//КонецЕсли;
		
	//КонецЕсли;
	
	Сообщение = ПодготовитьИсходящееСообщение("ORDRSP",ТекСтрока.Документ,Параметры);
	
	ПереотправляемоеСообщениеСсылка = НайтиСообщениеДокумента(ТекСтрока.Документ, "ORDRSP", "Исходящее");
	Если ПереотправляемоеСообщениеСсылка <> Неопределено Тогда
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",	ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	ФормаСообщения = ПолучитьФорму("ФормаСообщения",ЭтаФорма);
	ФормаСообщения.Сообщение = Сообщение;
	ФормаСообщения.Параметры = Параметры;
	ФормаСообщения.ОткрытьМодально();
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеПереотправить(Кнопка)
	
	_РежимГрупповойОбработки = (ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()>1);
	
	Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=0 Тогда
		
		Возврат;
		
	ИначеЕсли ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0]=Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
		
		//одиночная переотправка
		ВыбраннаяСтрока = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0];
		Сообщение = ПодготовитьИсходящееСообщение(ВыбраннаяСтрока.ТипСообщения, ВыбраннаяСтрока.Документ);
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ВыбраннаяСтрока.СообщениеСсылка);
		
		ФормаСообщения = ПолучитьФорму("ФормаСообщения",ЭтаФорма);
		ФормаСообщения.Сообщение = Сообщение;
		ФормаСообщения.ОткрытьМодально();
		
	Иначе
		//групповые действия для нескольких строк
		ВсегоДействий = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество();
		Если Вопрос("Будет выполнена переотправка: "+ВсегоДействий+" сообщений. Продолжить?",РежимДиалогаВопрос.ОКОтмена)<>КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		Переотправлено=0;
		сч=0;
		Для Каждого Стр Из ЭлементыФормы.ТабСообщения.ВыделенныеСтроки Цикл
			
			сч=сч+1;
			Если Стр.Направление<>"Исходящее"
				ИЛИ Лев(ПолучитьКодДействияПоПредставлению(Стр.ТребуемоеДействие),9)="Отправить" тогда 
				Продолжить; //не будем переотправлять входящие и те, которые и так к отправке
			КонецЕсли;
			Состояние(""+сч +" из "+ВсегоДействий+" Выполняю действие: "+Стр.ТребуемоеДействие);
			Стр.Обработан = _ПереотправитьСообщение(Стр,Истина);
			Если Стр.Обработан Тогда 
				Переотправлено=Переотправлено+1;
			КонецЕсли;
			
		КонецЦикла;	
		Если Переотправлено=0 Тогда 
			ВывестиПредупреждение_КонтурEDI("Не удалось переотправить ни одного сообщения");
		Иначе
			ВывестиПредупреждение_КонтурEDI("Успешно переотправлено "+Переотправлено+" сообщений");
		КонецЕсли;
	
	КонецЕсли;
	
	ОбновитьСписокЗадач();

КонецПроцедуры

Процедура КнопкаЕщеОткрытьЭлДокументыВДиадоке(Кнопка)
	
	//ДанныеФормы = Новый Структура("ЭлементыФормы",Новый Структура);
	//ДанныеФормы.ЭлементыФормы.Вставить("СписокДокументов",Новый Структура);
	//ДанныеФормы.ЭлементыФормы.СписокДокументов.Вставить("ТекущиеДанные",Новый Структура("СчетФактура",ЭлементыФормы.ТабСообщения.ТекущаяСтрока.Документ));
	//
	//КнопкаФормыСпискаДокументовНажатие("ПоказатьДокументыВДиадок", "ФормаСпискаДокументов", "", ДанныеФормы);//маскируемся под штатную функцию
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	
	boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Документ, "boxId"));
	messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Документ, "messageId"));
	invoiceId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Документ, "invoiceId"));
	torg12Id = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Документ, "torg12Id"));
	UniversalTransferDocumentId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ТекСтрока.Документ, "UniversalTransferDocumentId"));
	
	Если ПустаяСтрока(boxId) 
		ИЛИ ПустаяСтрока(messageId) 
		ИЛИ (ПустаяСтрока(invoiceId)
			И ПустаяСтрока(torg12Id)
			И ПустаяСтрока(UniversalTransferDocumentId)) Тогда
		ВывестиПредупреждение_КонтурEDI("Не удалось найти ссылки на созданные документы в Диадок.
		|Попробуйте зайти в Диадок через ваш веб браузер.");
	Иначе
		
		НачалоСсылки = "https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId;
		
		Если ПолучитьКодДействияПоПредставлению(ТекСтрока.ТребуемоеДействие) = "ПодписатьВДиадок" Тогда 
			СсылкаНаЧерновик = "https://diadoc.kontur.ru/ShowDraft?boxId=" + boxId + "&draftId=" + messageId;
			ЗапуститьПриложение(СсылкаНаЧерновик);
            Возврат;
		КонецЕсли;

		СписокСсылок = Новый СписокЗначений;
		
		Если НЕ ПустаяСтрока(torg12Id) Тогда
			СсылкаНаТорг12		= НачалоСсылки + "&documentId="+torg12Id;
			СписокСсылок.Добавить(СсылкаНаТорг12,"Торг-12");
		КонецЕсли;
		
		Если Не ПустаяСтрока(invoiceId) Тогда
			СсылкаНаСчетФактуру = НачалоСсылки + "&documentId="+invoiceId;
			СписокСсылок.Добавить(СсылкаНаСчетФактуру,"Счет-фактура");
		КонецЕсли;
		
		Если Не ПустаяСтрока(UniversalTransferDocumentId) Тогда
			СсылкаНаСчетФактуру = НачалоСсылки + "&documentId="+UniversalTransferDocumentId;
			СписокСсылок.Добавить(СсылкаНаСчетФактуру,"УПД (или УКД)");
		КонецЕсли;
		
		СсылкаНаДокумент = "";
		
		Если СписокСсылок.Количество() = 0 
			ИЛИ СписокСсылок.Количество()= 1 Тогда
			СсылкаНаДокумент = СписокСсылок[0].Значение;
		Иначе
			ВыбранноеЗначение = СписокСсылок.ВыбратьЭлемент("Выберите документ для его просмотра в Диадоке");
			Если НЕ ВыбранноеЗначение = Неопределено Тогда
				СсылкаНаДокумент = ВыбранноеЗначение.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СсылкаНаДокумент = "" Тогда
			
			ЗапуститьПриложение(СсылкаНаДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//ПолныйДубль ОФ-УФ
//Поведение различается в МодульОбменКлиент() - управление передастся в Обычную или управляемую форму
//код отличается в Предупреждение(ТекстПредупреждения,,"Контур.EDI")
Процедура КнопкаЕщеПроверитьНаличиеОтказовЗапросовНаУточнение(Кнопка)
	
	МассивДляУточнения = ПолучитьДокументыСУточнениями(); //сервер
	МассивУточненных = новый Массив; //сложим сюда те, по которым уточнили
	ДокументыПоКоторымНеУдалосьОбновитьСтатус=новый Массив;
	
	ПодлежитУточнению=МассивДляУточнения.Количество();
	Если ПодлежитУточнению>0 Тогда
		сч=0;
		МодульОбменКлиент().СброситьПроверкиДанныхАвторизации();

		Для Каждого ДокументСУточнением Из МассивДляУточнения Цикл
			сч=сч+1;
			
			Состояние("Получение статусов из Диадока: "+сч+" из "+ПодлежитУточнению);
			Отправитель1С=ДокументСУточнением.Отправитель1С;
			//отказ от компоненты
			//если к оргнизации привязан сертификат в настройках, то мы можем просто сходить в ДД за статусом
			
			СтатусыЮЗДО = МодульОбменКлиент().УзнатьСостояниепоСФ(Отправитель1С,ДокументСУточнением.boxId,ДокументСУточнением.messageId);
			              
			Если СтатусыЮЗДО.Успешно=Истина Тогда
				
				//Интерпретируем статусы ДД в статус сообщения INVOIC (элемента справочника)         АктуальноеСостояниеСообщенияINVOIC - имеется в виду по тек. данным Диадока
				АктуальноеСостояниеСообщенияINVOIC=МодульОбменКлиент().ПолучитьСостояниеСообщенияINVOICПоСостояниюЮЗДО(СтатусыЮЗДО);  
				
				Если (ЗначениеЗаполнено(АктуальноеСостояниеСообщенияINVOIC.ТребуемоеДействие)
						И ДокументСУточнением.ТребуемоеДействие<>АктуальноеСостояниеСообщенияINVOIC.ТребуемоеДействие)
					ИЛИ (ЗначениеЗаполнено(АктуальноеСостояниеСообщенияINVOIC.Статус)
						И ДокументСУточнением.Статус<>АктуальноеСостояниеСообщенияINVOIC.Статус)
					Тогда 
					Попытка
						ОбновитьСтатусСообщенияINVOICИзДД(ДокументСУточнением.СообщениеСсылка,АктуальноеСостояниеСообщенияINVOIC);
						МассивУточненных.Добавить(ДокументСУточнением.Документ);
					Исключение
						//скорее всего документ заблокирован
					КонецПопытки;
				КонецЕсли;
				
				//действия со статусом
			Иначе
				Если ЗначениеЗаполнено(СтатусыЮЗДО.ОписаниеОшибки) Тогда
					Сообщить(СтатусыЮЗДО.ОписаниеОшибки);
				КонецЕсли;
				ДокументыПоКоторымНеУдалосьОбновитьСтатус.Добавить(ДокументСУточнением.Документ);
			КонецЕсли;
			
		КонецЦикла;
		
		МодульОбменКлиент().СброситьПарольКонтейнераДанныхАвторизации();
		
		//сообщить что получилось, а что нет
		ТекстПредупреждения=?(МассивУточненных.Количество()=0,"Нет обновлений статусов.","Количество обновленных статусов: "+МассивУточненных.Количество());
		Если ДокументыПоКоторымНеУдалосьОбновитьСтатус.Количество()<>0 Тогда 
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + "Не удалось определить статус в Диадоке по " + ДокументыПоКоторымНеУдалосьОбновитьСтатус.Количество() + " документам." 
								+ Символы.ПС + "Возможно, не указаны логин и пароль или не назначен сертификат по организации.";
		КонецЕсли;
		
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		
		//обновить список
		ОбновитьСписокЗадач();
		
	Иначе
		ТекстПредупреждения="По текущему списку нет доступных для проверки счетов-фактур.";
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЕщеПереотправитьПоРеестру(Кнопка)

	ПереотправитьINVOICПоРеестру();
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеСверкаДокументов(Кнопка)
	ФормаОтчета = ПолучитьФорму("ФормаСервис_Отчет_СверкаДокументов",ЭтаФорма);
	//РезультатВыбора.ОбновитьСписок = Ложь;
	ФормаОтчета.ДатаНачала 		= НастройкаПериода.ДатаНачала;
	ФормаОтчета.ДатаОкончания 	= НастройкаПериода.ДатаОкончания;
	ФормаОтчета.ОткрытьМодально();
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеОтменитьЗаказ(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущаяСтрока;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Статус","Отменить");
	
	Сообщение = ПодготовитьИсходящееСообщение("ORDERS", ТекСтрока.Документ, Параметры);
	Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ТекСтрока.СообщениеСсылка);
	
	ПараметрыОтправки = Новый Структура("ОтправитьСообщениеИзФормы,Сообщение",Истина,Сообщение);
	ОтправитьСообщение("ORDERS",ТекСтрока.Документ,ПараметрыОтправки);
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеСкопироватьЗаказ(Кнопка)
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
		НовыйЗаказ = ТекСтрока.Документ.Скопировать();
		НовыйЗаказ.ПолучитьФорму().ОткрытьМодально();
	КонецЕсли;	
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

Процедура КнопкаЕщеСкрытаяПоказатьРасхожденияПриемки(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ВидРасхождения", 	"РасхожденияПриемки");
		Параметры.Вставить("Накладная",			ТекСтрока.Документ);
		Параметры.Вставить("Параметры",			Неопределено);
		ФормаПросмотра = ПолучитьФорму("ФормаСервис_ПросмотрРасхождений",ЭтаФорма);
		ФормаПросмотра.Параметры = Параметры;
		ФормаПросмотра.Открыть();		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЕщеСкрытаяОткрытьКарточкуСообщения(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТабСообщения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.СообщениеСсылка) Тогда
    	мОткрытьКарточкуСообщения(ТекСтрока);
	КонецЕсли;	
	ОбновитьСписокЗадач();

КонецПроцедуры

Процедура КнопкаЕщеВыделитьВсе(Кнопка)
	ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Очистить();
	Для Каждого Стр Из ТабСообщения Цикл
		ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Добавить(Стр);
	КонецЦикла;	
	ЭлементыФормы.ТабСообщения.ОбновитьСтроки();
КонецПроцедуры

Процедура КнопкаЕщеСкрытаяСоздатьЗаказ(Кнопка)
	ТипДокументаЗаказ = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина);
	Если ТипДокументаЗаказ<>Неопределено Тогда
		НовДокумент = Документы[ТипДокументаЗаказ].СоздатьДокумент();
		НовДокумент.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаЕщеРаспечататьЗаказы(Кнопка)
	
	МассивСообщений = Новый Массив;
	
	Для Каждого Строка Из ЭлементыФормы.ТабСообщения.ВыделенныеСтроки Цикл
		Если Строка.СообщениеСсылка <> Неопределено 
			И Строка.ТипСообщения = "ORDERS" Тогда
			МассивСообщений.Добавить(Строка.СообщениеСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСообщений.Количество() = 0 Тогда
		ТекстПредупреждения="В выбранных строках нет заказов для печати.";
		ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТабДокОбщий = ОбработатьМассовуюПечатьЗаказов(МассивСообщений);
	
	ТабДокОбщий.Показать("Новые заявки ("+МассивСообщений.Количество()+" шт) - "+Формат(ТекущаяДата(),"ДЛФ=Д"));
	
КонецПроцедуры

Процедура КнопкаЕщеРаспечататьПалетныеЛисты(Кнопка)
	
	МассивСообщений = Новый Массив;
	
	Для Каждого Строка Из ЭлементыФормы.ТабСообщения.ВыделенныеСтроки Цикл
		Если Строка.ТипСообщения = "DESADV"
			И ЗначениеЗаполнено(Строка.СообщениеСсылка) Тогда
			МассивСообщений.Добавить(Строка.СообщениеСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Результат = ОбработатьМассовуюПечатьПалетныхЛистов(МассивСообщений);
	
	Если Не Результат.Успешно Тогда
		ТекстПредупреждения="Не удалось подключить внешнюю компоненту для формирования картинки штрихкода.";
		ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения);
	Иначе
		Если Результат.КоличествоЛистов = 0 Тогда
			ТекстПредупреждения="В выбранных строках нет палетных листов для печати.";
			ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения);
		Иначе
			Результат.ТабДокОбщий.Показать("Палетные листы ("+Результат.КоличествоЛистов+" шт) - "+Формат(ТекущаяДата(),"ДЛФ=Д"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЕщеОтправитьRECADV(Кнопка)
	
	//если уже был отправлен RECADV то переотправим его
	
	//проверим что цепочка предусматривает RECADV
	Если ПолучитьЗначениеСвойстваОбъектаEDI(ЭлементыФормы.ТабСообщения.ТекущиеДанные.Партнер,"RECADV")<>Истина Тогда
		ВывестиПредупреждение_КонтурEDI("Сообщение RECADV не предусмотрено цепочкой сообщений партнера " + ЭлементыФормы.ТабСообщения.ТекущиеДанные.Партнер);
		Возврат;
	КонецЕсли;
	
	ТипСообщения = "RECADV";
	
	Параметры = Новый Структура();
	Если ЗначениеЗаполнено(ЭлементыФормы.ТабСообщения.ТекущиеДанные.СообщениеСсылка) Тогда
		Параметры.Вставить("СообщениеСсылка", ЭлементыФормы.ТабСообщения.ТекущиеДанные.СообщениеСсылка);
	КонецЕсли;
	
	ДокументПриемки = НайтиСвязанныйДокументПоТипуСообщения(ЭлементыФормы.ТабСообщения.ТекущиеДанные.Документ,"RECADV");
	
	Если Не ЗначениеЗаполнено(ДокументПриемки) Тогда
		ВывестиПредупреждение_КонтурEDI("Не введен документ Поступления");
		Возврат;
	КонецЕсли;
	
	Сообщение = ПодготовитьИсходящееСообщение(ТипСообщения, ДокументПриемки, Параметры);
	
	ФормаСообщения = ПолучитьФорму("ФормаСообщения",ЭтаФорма);
	ФормаСообщения.Сообщение = Сообщение;
	ФормаСообщения.ОткрытьМодально();
	
	ЭлементыФормы.ТабСообщения.ТекущиеДанные.Обработан = ЗначениеЗаполнено(Сообщение.СообщениеСсылка);
	Если НастройкиМодуля.ОбновлятьВесьСписокПриРаботеСЗаказами=Истина Тогда
		ОбновитьСписокЗадач();//обновим список. Иначе - зачеркнем текущую строку
	КонецЕсли;
	
КонецПроцедуры

//}#КонецОбласти //КнопкиВерхнейПанели


//{#Область ГрупповоеПодписаниеСчетовФактур
	
Процедура ЗапроситьСертификатИПодписатьСФ()
	
	ФормаПодписания = МодульОбменКлиент();	
	ФормаПодписания.Действие = "ПодписатьСчетаФактуры";
	ФормаПодписания.МассивСообщений = СчетаФактурыНаПодписание.ВыгрузитьКолонку("Ссылка");
	ФормаПодписания.ОткрытьМодально();
	
КонецПроцедуры

//}#КонецОбласти //ГрупповоеПодписаниеСчетовФактур


//{#Область ДействияСДокументамиСообщениями

//здесь располагается куча процедур/функций для обработки "Требуемых действий"
//каждая процедура работает в 2 режимах: "единичном" и "массовом".
//"массовый" режим подразумевает, что обработка необходимого действия происходит без открытия форм для каждой строки

//процедура массово выполняет задачи с документами
Процедура КоманднаяПанельСообщенияВыполнитьДействия(Кнопка)
	
	_РежимГрупповойОбработки = (ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()>1);
	
	Если ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=0 Тогда
		
		Возврат;
		
	ИначеЕсли ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0]=Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
		//одиночное действие для одной строки
		ВыполнитьЗадачу(ЭлементыФормы.ТабСообщения.ВыделенныеСтроки[0],Ложь);
		
	Иначе
		//групповые действия для нескольких строк
		ВсегоДействий = ЭлементыФормы.ТабСообщения.ВыделенныеСтроки.Количество();
		Если Вопрос("Будет выполнено действий: "+ВсегоДействий+". Продолжить?",РежимДиалогаВопрос.ОКОтмена)<>КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
			
		СчетаФактурыНаПодписание = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(СчетаФактурыНаПодписание,"Ссылка,BoxId,MessageId,ДокументПредставление");
		
		сч=0;
		Для Каждого Стр Из ЭлементыФормы.ТабСообщения.ВыделенныеСтроки Цикл
			сч=сч+1;
			Состояние(""+сч +" из "+ВсегоДействий+" Выполняю действие: "+Стр.ТребуемоеДействие);
			ВыполнитьЗадачу(Стр,Истина);
		КонецЦикла;	
		
		//если были выбраны строки с действием "Подписать в Диадок", тогда выполним это действие здесь.
		Если СчетаФактурыНаПодписание.Количество()>0 Тогда
			
			//запросить сертификат, а уже после выбора сделать подписание
			ЗапроситьСертификатИПодписатьСФ();
			
		КонецЕсли;
		
		Если ИспользуетсяМеркурий Тогда
			ОтправитьТранзакцииМеркурийМассово(ЭлементыФормы.ТабСообщения.ВыделенныеСтроки); //если они конечно есть
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиМодуля.ОбновлятьВесьСписокПриРаботеСЗаказами=Истина Тогда
		ОбновитьСписокЗадач();
	КонецЕсли;
		
КонецПроцедуры

//Общая точка входа для действий ниже
//Выполняет задачу в строке ВыбраннаяСтрока.
//Работает в 2 режимах - "Пакетном", когда дополнительные формы не открываются,
//	и "Основном", с открытием окон
Процедура ВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка=Ложь)
	
	Если ВыбраннаяСтрока.Обработан Тогда
		Возврат;//незачем еще раз делать
	КонецЕсли;	
	
	Результат = Ложь;
	
	КодДействия = ПолучитьКодДействияПоПредставлению(ВыбраннаяСтрока.ТребуемоеДействие);
	//здесь у нас и будет работа с кодами действий. Сюда же прокинем ПМ - продумать работу в УФ и ОФ сразу
	
	
	//прокинем ПМ
	СтандартнаяОбработкаEDI = Истина;
	Результат = ОбработкаСобытияПодключаемогоМодуля("ВыполнениеДействия_НовыйИнтерфейс",СтандартнаяОбработкаEDI,
						Новый Структура("Строка,КодДействия,ПакетнаяОбработка",ВыбраннаяСтрока,КодДействия,ПакетнаяОбработка));
						
	Если Лев(ВыбраннаяСтрока.ТипСообщения,2) = "M_" Тогда
		Если ПакетнаяОбработка = Истина Тогда
			Возврат;//пакетная обработка осуществляется отдельно
		Иначе
			МеркурийВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);
			Если КодДействия = "РаботаЗавершена" Тогда
				Если Не ПакетнаяОбработка Тогда
					мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
						
	//хорошо бы еще продумать более детальные события - на создание нового документа, на проведение, на обработку входящего, отправку исходящего, обработку расхождений, ...
						
	Если Не СтандартнаяОбработкаEDI Тогда
		//сработал ПМ
		ВыбраннаяСтрока.Обработан = Результат;
		
	Иначе	
 		//ПМ ничего не перехватывал		
		
		//общие действия
		Если КодДействия = "ПринятьСообщение" Тогда
			
			Результат = _ОбработатьВходящееСообщение(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли КодДействия = "ОбработатьНовуюВерсию" Тогда
			
			Результат = _ОбработатьВходящееСообщение(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли КодДействия = "ИсправитьОшибки" Тогда
			
			Результат = _ПереотправитьСообщение(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли КодДействия = "РаботаЗавершена"
			Или КодДействия = "РаботаЗавершенаСУточнением"
			Или КодДействия = "ДождатьсяДоставки"
			Или КодДействия = "ОжидайтеПодписьПартнера"
			Или КодДействия = "НеПрошлоВалидацию" Тогда			
			
			Если Не ПакетнаяОбработка Тогда
				мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
			КонецЕсли;	
			
			Результат = Ложь;
			
		ИначеЕсли Лев(КодДействия,16) = "ПровестиДокумент" Тогда
			
			Результат = _ПровестиДокумент(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли Лев(КодДействия,15) = "СоздатьДокумент" Тогда
			
			Результат = _СоздатьДокументНаОсновании(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли Лев(КодДействия,10) = "Отправить_" Тогда
			
			Результат = _ОтправитьИсходящееСообщение(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		КонецЕсли;	
				
		//теперь действия, разделяющиеся для поставщика и для сети
		
		Если РежимРаботы = "Поставщик" Тогда
			
			Если КодДействия = "ОбработатьРасхождения_RECADV" Тогда
				
				Результат = _ОбработатьРезультатПриемки(ВыбраннаяСтрока,ПакетнаяОбработка);
				
			ИначеЕсли КодДействия = "ОбработатьРасхождения_ORDERS" Тогда
				
				Результат = _ОбработатьУточнениеОбратногоЗаказа(ВыбраннаяСтрока,ПакетнаяОбработка);
				
			ИначеЕсли КодДействия = "ПодписатьВДиадок" Тогда
				
				Результат = _ПодписатьИОтправить(ВыбраннаяСтрока,ПакетнаяОбработка);
				
			КонецЕсли;	
			
		ИначеЕсли РежимРаботы = "Покупатель" Тогда
			
			Если КодДействия = "ОбработатьРасхождения_ORDRSP" Тогда
				
				Результат = _ОбработатьУточнениеЗаказа(ВыбраннаяСтрока,ПакетнаяОбработка);
				
			КонецЕсли;
			
		КонецЕсли;	
	
		ВыбраннаяСтрока.Обработан = Результат;
		
	КонецЕсли;//продумать Результат
	
	
	//Если Не ПакетнаяОбработка Тогда
	//	Если НастройкиМодуля.ОбновлятьВесьСписокПриРаботеСЗаказами=Истина Тогда
	//		ОбновитьСписокЗадач();
	//	КонецЕсли;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ПриНажатииКнопки(Кнопка)
	
	Параметры = Новый Структура();
	Параметры.Вставить("НастройкаПериода",НастройкаПериода);
	
	ОбработкаСобытияПодключаемогоМодуля("ПриНажатииКнопки",, Новый Структура("ИмяФормы,ИмяКнопки,Параметры", "ОсновнаяФорма", Кнопка.Имя, Параметры));

КонецПроцедуры

//обработка входящих сообщений
Функция _ОбработатьВходящееСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	Если НеОткрыватьФормы Тогда
		Если ВыбраннаяСтрока.ТипСообщения = "ORDERS" ИЛИ ВыбраннаяСтрока.ТипСообщения = "RETDES" Тогда
			
			ВходящееСообщение = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка,,ВыбраннаяСтрока.ТипСообщения,"Входящее");
			КонвертироватьСообщениеEDIв1С(ВходящееСообщение);
			
			Если Не ЗначениеЗаполнено(ВходящееСообщение.Партнер) Тогда
				ВходящееСообщение.Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,Сообщение","Сообщение",ВходящееСообщение));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВходящееСообщение.Партнер) Тогда
				Если ВходящееСообщение.Направление = "Входящее" Тогда
					Если НЕ ЗначениеЗаполнено(ВходящееСообщение.Отправитель1С) Тогда
						ВходящееСообщение.Отправитель1С = ВходящееСообщение.Партнер;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			РезультатПроверкиДанных = ПроверитьПоля1С(ВходящееСообщение);
			
			Если РезультатПроверкиДанных.Успешно Тогда
				
				РезультатВыполненияДействия = ПринятьВходящееСообщение(ВходящееСообщение);
				
				Возврат РезультатВыполненияДействия.Успешно;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
			
		Иначе //ВыбраннаяСтрока.ТипСообщения = "ORDERS" Тогда
			//пока не обрабатываем другие сообщения
			Возврат Ложь;
			
		КонецЕсли;	
	Иначе
		Сообщение_До = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
		
		//теперь проверим, что произошло с сообщением после закрытия его формы
		Сообщение_После = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		Если Сообщение_После<>Неопределено
			И (Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
					Или Сообщение_До.Архив<>Сообщение_После.Архив)
		Тогда
			Возврат Истина;//что-то произошло, вычеркиваем эту строку
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции

//отправка исходящих сообщений
Функция _ОтправитьИсходящееСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	ТипСообщения = ВыбраннаяСтрока.ТипСообщения;
	
	Параметры = Новый Структура();
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) Тогда
		Параметры.Вставить("СообщениеСсылка", ВыбраннаяСтрока.СообщениеСсылка);
	КонецЕсли;
	Сообщение = ПодготовитьИсходящееСообщение(ТипСообщения, ВыбраннаяСтрока.Документ, Параметры);
		
	Если НеОткрыватьФормы Тогда
		
		Параметры = Новый Структура();
		Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		Параметры.Вставить("Сообщение",					Сообщение);
		
		Если ТипСообщения="DESADV" Тогда
			//DESADV может отправляться вместе с INVOIC
			ОтправлятьINVOICсDESADV = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьINVOICсDESADV");
			
			Если ОтправлятьINVOICсDESADV = Истина Тогда
				СчетФактура = ПолучитьСчетФактуруНакладной(ВыбраннаяСтрока.Документ);
				Если Не ЗначениеЗаполнено(СчетФактура) Тогда
					Сообщить("Не удалось найти счет-фактуру для отправки по документу "+ВыбраннаяСтрока.Документ);
					//если в партнере стоит флаг "Отправлять INVOIC вместе с DESADV", и мы не нашли документ для отправки INVOIC, то не будем отправлять и DESADV.
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;	
			
			Если НужноПропуститьСообщениеСУслугами_DESADV(Сообщение) Тогда
				
				Если НЕ Сообщение.СодержитОшибки Тогда
					
					Если ОтправлятьINVOICсDESADV = Истина Тогда
						СообщениеINVOIC = ПодготовитьИсходящееСообщение("INVOIC", СчетФактура);
						Если СообщениеINVOIC.СодержитОшибки Тогда
							Сообщить("Ошибки проверки связанного сообщения INVOIC по документу: " + СчетФактура);
							Возврат Ложь;
						Иначе
							Параметры.Вставить("Сообщение",	СообщениеINVOIC);
							ОтправитьСообщение("INVOIC", СчетФактура, Параметры);
						КонецЕсли;
					КонецЕсли;
					
					СохранитьСообщение(Сообщение, "Пропущен");
					Сообщить("Сообщение DESADV по документу с услугами: " + ВыбраннаяСтрока.Документ + " было автоматически пропущено.");
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			//DESADV может отправляться вместе с ALCRPT
			ОтправлятьALCRPTсDESADV = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьALCRPT");
			ОтправлятьALCRPTсINVOIC = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьALCRPTсINVOIC");
			Если ОтправлятьALCRPTсDESADV Или ОтправлятьALCRPTсINVOIC Тогда 
				//следует проверить валидность ALCRPT
				Сообщение = ПодготовитьИсходящееСообщение("ALCRPT", ВыбраннаяСтрока.Документ, Параметры);
				Если Сообщение.СодержитОшибки Тогда
					Сообщить_КонтурEDI("Ошибки проверки связанного сообщения ALCRPT по документу: "+ВыбраннаяСтрока.Документ);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ОтправитьСообщение(ТипСообщения,ВыбраннаяСтрока.Документ,Параметры);
		
	Иначе
		
		ФормаСообщения = ПолучитьФорму("ФормаСообщения",ЭтаФорма);
		ФормаСообщения.Сообщение = Сообщение;
		ФормаСообщения.ОткрытьМодально();
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Сообщение.СообщениеСсылка);
	
КонецФункции

//переотправляем сообщения, упавшие с ошибкой на сервере
Функция _ПереотправитьСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	Если НеОткрыватьФормы Тогда
		
		Сообщение = ПодготовитьИсходящееСообщение(ВыбраннаяСтрока.ТипСообщения, ВыбраннаяСтрока.Документ);
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ВыбраннаяСтрока.СообщениеСсылка);
			
		Параметры = Новый Структура();
		Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		Параметры.Вставить("Сообщение",					Сообщение);
			
		ОтправитьСообщение(ВыбраннаяСтрока.ТипСообщения,ВыбраннаяСтрока.Документ,Параметры);
		
		Возврат Истина;
		
	Иначе
		Сообщение_До = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
		
		//теперь проверим, что произошло с сообщением после закрытия его формы
		Сообщение_После = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		Если Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
			Или Сообщение_До.Архив<>Сообщение_После.Архив Тогда
			Возврат Истина;//что-то произошло, вычеркиваем эту строку
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

//если документ сегодняшний, то пытаемся провести оперативно
Функция _ПровестиДокумент(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	ДокОбъект = ВыбраннаяСтрока.Документ.ПолучитьОбъект();
	Если ДокОбъект.Проведен Тогда
		//уже проведен
		Возврат Истина;
	КонецЕсли;
	
	Если НеОткрыватьФормы Тогда
		                                                                
		//Проводить = (ДокОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
		ПроводитьОперативно = 
					(ДокОбъект.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить)
					//проверим, проводится ли данный документ оперативно
					И (НачалоДня(ДокОбъект.Дата) = НачалоДня(ТекущаяДата()));
					//оперативно проводим только сегодняшние документы
		
		Попытка
			РежимПроведения  =?(ПроводитьОперативно,РежимПроведенияДокумента.Оперативный,РежимПроведенияДокумента.Неоперативный);
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведения);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ДокОбъект.ПолучитьФорму().ОткрытьМодально();
		
		Возврат ДокОбъект.Проведен;
	КонецЕсли;
	
	
КонецФункции

//создать Реализацию из Заказа, Счет-Фактуру из Реализации и т.д.
Функция _СоздатьДокументНаОсновании(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	//заполнялку прокинуть в ПМ
	
	КодДействия = ПолучитьКодДействияПоПредставлению(ВыбраннаяСтрока.ТребуемоеДействие);
	ИмяСоздаваемогоДокумента = Сред(КодДействия,17);
	
	
	//проверим, вдруг этот документ уже был создан кем-то
	ИменаГруппировок = "";
	ТекстЗапроса = ПолучитьТекстЗапросаПоСвязаннымДокументам(ВыбраннаяСтрока.Документ,РежимРаботы,ИменаГруппировок);
	ЗапросПроверка = Новый Запрос(ТекстЗапроса);
	ЗапросПроверка.УстановитьПараметр("Ссылка",ВыбраннаяСтрока.Документ);
	ТабЗапроса = ЗапросПроверка.Выполнить().Выгрузить();
	ИмяКолонкиТекущегоДокумента = "Док_"+ВыбраннаяСтрока.Документ.Метаданные().Имя;
	ИмяКолонкиСоздаваемогоДокумента = "Док_"+ИмяСоздаваемогоДокумента;
	СтрокаТекущегоДокумента = ТабЗапроса.Найти(ВыбраннаяСтрока.Документ,ИмяКолонкиТекущегоДокумента);
	Если НЕ СтрокаТекущегоДокумента=Неопределено 
		И ЗначениеЗаполнено(СтрокаТекущегоДокумента[ИмяКолонкиСоздаваемогоДокумента])
		И Не СтрокаТекущегоДокумента[ИмяКолонкиСоздаваемогоДокумента].ПометкаУдаления
		Тогда
		Сообщить("Уже был создан документ: "+СтрокаТекущегоДокумента[ИмяКолонкиСоздаваемогоДокумента]);
		Возврат Ложь;
	КонецЕсли;	
	
	НовДок = Документы[ИмяСоздаваемогоДокумента].СоздатьДокумент();
	НовДок.Заполнить(ВыбраннаяСтрока.Документ);
	
	//теперь кастомные заполнялки
	Если ИмяСоздаваемогоДокумента = "СчетФактураВыданный" Тогда
		Попытка
			Выполнить("НовДок.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию");
		Исключение
		КонецПопытки;	
		
		Попытка
			//в некоторых конфигурациях еще надо заполнить табличную часть "ДатаНомерДокументовОплаты"
			Выполнить("
			|Если НовыйДокумент.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			|	НовыйДокумент.ДатаНомерДокументовОплаты.Добавить();
			|	НовыйДокумент.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = НовыйДокумент.ДатаПлатежноРасчетногоДокумента;
			|	НовыйДокумент.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = НовыйДокумент.НомерПлатежноРасчетногоДокумента;
			|КонецЕсли;
			|");
		Исключение
		КонецПопытки;
		Если ИмяКонфигурации1С = "УТ_10_2" Тогда
			// в УТ 10.2 если используется шаблон Реализация_СФ нужен этот костыль, 
			// иначе ОбработкаЗаполнения не заполняет Организацию
			Попытка
				НовДок.Организация = ВыбраннаяСтрока.Документ.Организация;		
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	//конец заполнялок
	
	Если НеОткрыватьФормы Тогда
		
		Если НЕ ЗначениеЗаполнено(НовДок.Дата) Тогда // могли заполнить в "обработке заполнения"
			НовДок.Дата = ТекущаяДата();
		КонецЕсли;
		НовДок.УстановитьНовыйНомер();
		
		//еще кастомные проверки. Сюда тоже прокинуть ПМ
		Если ИмяСоздаваемогоДокумента = "РеализацияТоваровУслуг"
			Или ИмяСоздаваемогоДокумента = "схРеализацияТоваровУслуг"
			Тогда
			
			НетТоваров 			= НовДок.Товары.Количество() = 0;
			ЕстьТабЧастьУслуги 	= НЕ (НовДок.Метаданные().ТабличныеЧасти.Найти("Услуги") = Неопределено);
			НетУслуг 			= НЕ ЕстьТабЧастьУслуги ИЛИ (ЕстьТабЧастьУслуги И НовДок.Услуги.Количество() = 0);
			
			Если НетТоваров 
				И НетУслуг
				Тогда
				Возврат Ложь;
			КонецЕсли;

		КонецЕсли;	
		
		НовДок.Записать(РежимЗаписиДокумента.Запись);
		Возврат Истина;
		
	Иначе
		Если ИмяКонфигурации1С = "ДалионУМ" Тогда
			ФормаДокумента = НовДок.ПолучитьФорму();
			ФормаДокумента.ПараметрОснование = ВыбраннаяСтрока.Документ;
			ФормаДокумента.ОткрытьМодально();
		Иначе
			НовДок.ПолучитьФорму().ОткрытьМодально();	
		КонецЕсли;
		Возврат Не НовДок.ЭтоНовый();
	КонецЕсли;
КонецФункции


//поставщик отправил ORDRSP в ответ на наш ORDERS, и есть расхождения между этими сообщениями
Функция _ОбработатьУточнениеЗаказа(ВыбраннаяСтрока,НеОткрыватьФормы =  Ложь)
	
	Если НеОткрыватьФормы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсходящийЗаказ			= ПрочитатьСообщение(,ВыбраннаяСтрока.Документ,"ORDERS","Исходящее");
	ВходящийОтветНаЗаказ	= ПрочитатьСообщение(,ВыбраннаяСтрока.Документ,"ORDRSP","Входящее");
	
	//КонвертироватьТабличнуюЧастьСообщенияEDIв1С(ИсходящийЗаказ,			"Товары");
	КонвертироватьТабличнуюЧастьСообщенияEDIв1С(ВходящийОтветНаЗаказ,	"Товары");
	
	СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы1.Вид			= "Сообщение";
	СтруктураТаблицы1.ТипСообщения	= "ORDERS";
	СтруктураТаблицы1.Товары		= ИсходящийЗаказ.Товары;
	
	СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы2.Вид			= "Сообщение";
	СтруктураТаблицы2.ТипСообщения	= "ORDRSP";
	СтруктураТаблицы2.Товары		= ВходящийОтветНаЗаказ.Товары;
	
	СравниваемыеПоля = Новый СписокЗначений;
	СравниваемыеПоля.Добавить("Количество");
	СравниваемыеПоля.Добавить("ЦенаБезНДС");
	СравниваемыеПоля.Добавить("ЦенаСНДС");
	
	РезультатСравнения = СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля);
	
	ФормаСравнения = ПолучитьФорму("ФормаСервис_ОбработкаУточненногоЗаказа",ЭтаФорма);
	
	Для Каждого Стр Из РезультатСравнения.ТаблицаСравнения Цикл
		
		НоваяСтрока = ФормаСравнения.ТаблицаСравнения.Добавить();
		
		НоваяСтрока.Номенклатура			= Стр.Номенклатура;
		НоваяСтрока.КоличествоЗаказали		= Стр.Количество1;
		НоваяСтрока.КоличествоПодтвердили	= Стр.Количество2;
		НоваяСтрока.ЦенаБезНДСЗаказали		= Стр.ЦенаБезНДС1;
		НоваяСтрока.ЦенаБезНДСПодтвердили	= Стр.ЦенаБезНДС2;
		НоваяСтрока.ЦенаСНДСЗаказали		= Стр.ЦенаСНДС1;
		НоваяСтрока.ЦенаСНДСПодтвердили		= Стр.ЦенаСНДС2;
		
		НоваяСтрока.Количество = Стр.Количество2;
		
	КонецЦикла;	
	
	ФормаСравнения.Заказ = ВыбраннаяСтрока.Документ;
	
	ФормаСравнения.ОткрытьМодально();
	
	_Сообщение = ?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ВыбраннаяСтрока.СообщениеСсылка),ВыбраннаяСтрока.СообщениеСсылка);
	
	Если _Сообщение.Архив Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//покупатель отправил ORDERS в ответ на наш PORDERS, и есть расхождения между этими сообщениями
Функция _ОбработатьУточнениеОбратногоЗаказа(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	Если НеОткрыватьФормы Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Сообщение_До = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		
		ФормаПросмотраСостояния = ПолучитьФорму("ФормаСервис_ОбработкаРасхожденийПриемки",ЭтаФорма);
		ФормаПросмотраСостояния.ИсточникРасхождений	= "ОбратныйЗаказ";
		ФормаПросмотраСостояния.Документ			= ВыбраннаяСтрока.Документ;
		ФормаПросмотраСостояния.СообщениеСсылка		= ВыбраннаяСтрока.СообщениеСсылка;
		ФормаПросмотраСостояния.Партнер				= ВыбраннаяСтрока.Партнер;
		ФормаПросмотраСостояния.ОткрытьМодально();
		
		//теперь проверим, что произошло с сообщением после закрытия его формы
		Сообщение_После = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		Если Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
			Или Сообщение_До.Архив<>Сообщение_После.Архив Тогда
			Возврат Истина;//что-то произошло, вычеркиваем эту строку
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

//покупатель отправил RECADV, и он отличается от текущего документа в 1С
Функция _ОбработатьРезультатПриемки(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	//Проверим, что в сообщении есть ссылка на документ, 
	//если нет, откроем карточку сообщения для сопоставления и загрузки
	Если ВыбраннаяСтрока.Документ = Неопределено Тогда
 		ВыбраннаяСтрока.ТребуемоеДействие = "Обработать входящее сообщение";
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
		Возврат Ложь;
	КонецЕсли;
	
	Если НеОткрыватьФормы Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Сообщение_До = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		
		ФормаПросмотраСостояния = ПолучитьФорму("ФормаСервис_ОбработкаРасхожденийПриемки",ЭтаФорма);
		ФормаПросмотраСостояния.ИсточникРасхождений = "Приемка";
		ФормаПросмотраСостояния.Документ			= ВыбраннаяСтрока.Документ;
		ФормаПросмотраСостояния.СообщениеСсылка		= ВыбраннаяСтрока.СообщениеСсылка;
		ФормаПросмотраСостояния.Партнер				= ВыбраннаяСтрока.Партнер;
		ФормаПросмотраСостояния.ОткрытьМодально();
		
		//теперь проверим, что произошло с сообщением после закрытия его формы
		Сообщение_После = ПрочитатьСообщение(ВыбраннаяСтрока.СообщениеСсылка);
		Если Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
			Или Сообщение_До.Архив<>Сообщение_После.Архив Тогда
			Возврат Истина;//что-то произошло, вычеркиваем эту строку
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции


//подпишем текущий СФ в Диадоке
Функция _ПодписатьИОтправить(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	Если НеОткрыватьФормы Тогда
		
		//добавим эту строку в таблицу СФ на подписание, само подписание с запросом сертификата пройдет отдельно
		НовСтрока = СчетаФактурыНаПодписание.Добавить();
		НовСтрока.Ссылка = ВыбраннаяСтрока.СообщениеСсылка;
		
		Возврат Ложь;
	Иначе
		
		boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ВыбраннаяСтрока.Документ, "boxId"));
		messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ВыбраннаяСтрока.Документ, "messageId"));
		
		Если ПустаяСтрока(boxId) Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось открыть неподписанный черновик.
			|Попробуйте зайти в Диадок через ваш веб браузер и подписать его оттуда.");
		Иначе
			
			СсылкаНаЧерновик = "https://diadoc.kontur.ru/ShowDraft?boxId=" + boxId + "&draftId=" + messageId;
			
			ЗапуститьПриложение(СсылкаНаЧерновик);
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//}#КонецОбласти //ДействияСДокументамиСообщениями

Процедура КнопкаЕщеНаЯндексКарте(Кнопка)
	СодержимоеТД=ЭлементыФормы.ТабСообщения.ТекущиеДанные.ТочкаДоставки;
	Если ЗначениеЗаполнено(СодержимоеТД) Тогда
		Если ТипЗнч(СодержимоеТД)=Тип("Строка")Тогда 
			АдресТД = СодержимоеТД;
		Иначе
			ТДОбъект=ПолучитьЭлементСправочника("ТочкиДоставкиСторонние", СодержимоеТД);
			АдресТД=ТДОбъект.АдресДоставки;
		КонецЕсли;
		ПоказатьАдресНаКарте(АдресТД, "Яндекс.Карты");
	Иначе
		Предупреждение("В этой строке не заполнен адрес");
		//по хорошему - надо метнуться в сообщение - конвертнуть shipTo и взять адрес оттуда
		//ждем деманд
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПоказатьАдресНаКарте(Адрес, ИмяКартографическогоСервиса) Экспорт
	АдресКодированный = Адрес;
	Если ИмяКартографическогоСервиса = "GoogleMaps" Тогда
		СтрокаЗапуска = "https://maps.google.ru/?q=" + АдресКодированный;
	Иначе
		СтрокаЗапуска = "https://maps.yandex.ru/?text=" + АдресКодированный;
	КонецЕсли;
	
	ЗапуститьПриложение(СтрокаЗапуска);
	
КонецПроцедуры

Процедура КнопкаНастройкиУдалитьСообщения(Кнопка)
	
	ПолучитьФорму("ФормаСервис_УдалениеСообщений", ЭтаФорма).ОткрытьМодально();
	ОбновитьСписокЗадач();

КонецПроцедуры

//}#КонецОбласти //Отправка отзыва

//Область Меркурий
//обеспечивает взаимодействие с Подключаемым модулем Меркурий (не путать с обычным подключаемым модулем)

Процедура КнопкаНастройкиМеркурий(Кнопка)
	
	ФормаСоответствийМеркурий = МодульМеркурий().ПолучитьФорму("Меркурий_Настройка",ЭтаФорма);
	ФормаСоответствийМеркурий.Открыть();
		
КонецПроцедуры

Функция МодульМеркурийКлиент()
	Если МодульМеркурийКлиент = Неопределено Тогда
		МодульМеркурийКлиент = МодульМеркурий().ПолучитьФорму("КлиентскийМодульEDI",ЭтаФорма);
	КонецЕсли;
	Возврат МодульМеркурийКлиент;
КонецФункции
		
Процедура МеркурийВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка=Ложь,КодДействия)
	МодульМеркурийКлиент().МеркурийВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия)
КонецПроцедуры

Процедура ОткрытьКарточкуМеркурий(ВыбраннаяСтрока, ПереотправкаСообщения = Ложь, Сообщение=Неопределено )
	МодульМеркурийКлиент().ОткрытьКарточкуМеркурий(ВыбраннаяСтрока, ПереотправкаСообщения, Сообщение);
КонецПроцедуры

Функция ОтправитьСообщениеМеркурий(ВыбраннаяСтрока, НеОткрыватьФормы = Ложь, ПереотправкаСообщения = Ложь)
	МодульМеркурийКлиент().ОтправитьСообщениеМеркурий(ВыбраннаяСтрока, НеОткрыватьФормы, ПереотправкаСообщения);
КонецФункции

Функция ОтправитьТранзакцииМеркурийМассово(ВыделенныеСтроки)
	МодульМеркурийКлиент().ОтправитьТранзакцииМеркурийМассово(ВыделенныеСтроки);
КонецФункции

//}#КонецОбласти //Меркурий

