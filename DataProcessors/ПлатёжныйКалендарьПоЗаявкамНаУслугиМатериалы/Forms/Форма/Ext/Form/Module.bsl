
Процедура ЗаполнитьНаСервере()
	
	УдалитьДобавленныеКолонки();
	
	ТЗПлатежей = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуЗаявокКОплате(ДатаОбработки);
	
	ТЗДат = ТЗПлатежей.Скопировать(,"ДатаПлатежа");
	ТЗДат.Свернуть("ДатаПлатежа");
	ТЗДат.Сортировать("ДатаПлатежа");
	ЗначениеВРеквизитФормы(ТЗДат, "ДатыТаблицыПлатежей");
	
	МассивРеквизитов = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерКолСтр = Формат(Номер, "ЧГ=0");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата" + НомерКолСтр, Новый ОписаниеТипов("Число"), "ТаблицаПлатежей"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата" + НомерКолСтр, Новый ОписаниеТипов("Число"), "ТаблицаПлатежейВспомогательная")); //+++АК LAGP 2018.09.04 ИП-00019695 Создана копия таблицы для визуального "отображения" отбора, а по факту, вывода части основной таблицы. Вспомогательная - полная (источник). 
		Номер = Номер + 1;
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов); 
	
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаПлатежейДата" + НомерСтр, Тип("ПолеФормы"), Элементы.ТаблицаПлатежей); 
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ТаблицаПлатежей.Дата" + НомерСтр;
		НовыйЭлемент.Формат = "ЧДЦ=2";
		Если ТекДата.ДатаПлатежа = Дата(1, 1, 1) Тогда
			НовыйЭлемент.Заголовок 	= "Произвольные платежи";
		Иначе	
			НовыйЭлемент.Заголовок 	= Формат(ТекДата.ДатаПлатежа, "ДФ=dd.MM.yy");
		КонецЕсли;	
		НовыйЭлемент.ТолькоПросмотр = Истина;
		Номер = Номер + 1;
	КонецЦикла;
	ТабСводныеСуммыКОплате = РеквизитФормыВЗначение("СводныеСуммыКОплате");
	ТабСводныеСуммыКОплате.Очистить();
	ТабПлатежей = РеквизитФормыВЗначение("ТаблицаПлатежей");
	Для каждого Стр Из ТЗПлатежей Цикл
		Если Стр.Аванс = Истина Тогда
			СуммаПлатежа=Мин(Стр.СуммаОстаток,Стр.ОстатокПоЗаявке);
		Иначе	
			СуммаПлатежа=Мин(Стр.СуммаОстаток,Стр.ПолученоНеОплачено,Стр.ОстатокПоЗаявке);
		КонецЕсли;	
		Если СуммаПлатежа<=0 Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрока = ТабПлатежей.Добавить();
		НоваяСтрока.Заявка					= Стр.Заявка;
		НоваяСтрока.РасходИзБанка			= Стр.РасходИзБанка;
		НоваяСтрока.Контрагент				= Стр.Контрагент;
		НоваяСтрока.ДоговорКонтрагента		= Стр.ДоговорКонтрагента;
		НоваяСтрока.Организация				= Стр.Организация;
		НоваяСтрока.ПлатёжПросрочен			= (Стр.ДатаПлатежа > Стр.ДатаПлатежаПоДокументу);
		НоваяСтрока.Пометка					= (Стр.ДатаПлатежа = ДатаОбработки);
		НоваяСтрока.УИН_СтрокиОплат			= Стр.УИН_СтрокиОплат;
		НоваяСтрока.СуммаПоГрафику			= Стр.СуммаОстаток;
		НоваяСтрока.Получено                = Стр.Получено;
		НоваяСтрока.ОстатокПоЗаявке         = Стр.ОстатокПоЗаявке;
		НоваяСтрока.Оплачено                = Стр.Оплачено;
		НоваяСтрока.ПолученоНеОплачено      = Стр.ПолученоНеОплачено;
		НоваяСтрока.Аванс	                = Стр.Аванс;
		НоваяСтрока["Дата" + НомерКолоникиПоДате(Стр.ДатаПлатежа)] = СуммаПлатежа;  
		НоваяСтрока.ДатаПлатежаПоДокументу 	= Стр.ДатаПлатежаПоДокументу;
		
		//++ АК 21.08.2017 luza ИП-00016332
		НоваяСтрока.РеквизитыЗаявкиСоответсвуютСкануСчета = Стр.РеквизитыЗаявкиСоответсвуютСкануСчета;
		//-- АК 21.08.2017 luza ИП-00016332

		
		Если ЗначениеЗаполнено(Стр.НазначениеПлатежа) Тогда
			НоваяСтрока.НазначениеПлатежа=Стр.НазначениеПлатежа;
		Иначе
			//НоваяСтрока.НазначениеПлатежа = ?(Стр.Аванс, "Аванс ", "") + ВыборкаДДС.Услуга + " " + 
			//?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), "Счет №" + ВыборкаДДС.НомерСчета + " от " +
			//Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
		КонецЕсли;
		НоваяСтрока.СтатьяДДС=Стр.СтатьяДДС;
		//НоваяСтрока.СтруктурнаяЕдиница=Стр.СтруктурнаяЕдиница;
		//Если Не ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
		НоваяСтрока.СтруктурнаяЕдиница = Стр.Заявка.Услуги[0].СтруктурнаяЕдиница;
		//КонецЕсли;	
		НоваяСтрока.ЦФО=Стр.ЦФО;
		Если Стр.ДатаПлатежа = ДатаОбработки Тогда
			НС=ТабСводныеСуммыКОплате.Добавить();
			НС.Организация = Стр.Организация;
			НС.Сумма = СуммаПлатежа;
			НС.Документов = 1;
		КонецЕсли;
		Если СуммаПлатежа>НоваяСтрока.ОстатокПоЗаявке Тогда
			Сообщить("Внимание! По контрагенту "+НоваяСтрока.Контрагент+" сумма платежа превышает остаток по заявке. Нужно проверить расчеты по заявке");
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		//++ АК 21.08.2017 luza ИП-00016332
		Если НоваяСтрока.РеквизитыЗаявкиСоответсвуютСкануСчета = Ложь Тогда
			Сообщить("Внимание! Реквизиты в заявке " + НоваяСтрока.Заявка + "  не соответсвуют реквизитам в сканкопии счета");
			НоваяСтрока.Пометка = Ложь;			
		КонецЕсли;	
		//-- АК 21.08.2017 luza ИП-00016332
	КонецЦикла;	
	//+++АК 31.07.2017 sils ИП-00015834
	ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ДатаОбработки), );
	//+++АК sils 09.11.2018 ИП-00019634.02
	СЗ_КонтрСОрганизацией = Новый СписокЗначений;
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(стр.Организация) Тогда
			СЗ_КонтрСОрганизацией.Добавить(стр.Контрагент);
		КонецЕсли;
	КонецЦикла;
	//---АК
	Для каждого стр из ТЗ Цикл
		//+++АК sils 09.11.2018 ИП-00019634.02
		Если СЗ_КонтрСОрганизацией.НайтиПоЗначению(стр.Контрагент) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//---АК
		//+++АК sils 05.09.2018 ИП-00019634
		//Если стр.Подтверждено Тогда
		Если стр.Подтверждено и не ЗначениеЗаполнено(стр.Организация) Тогда
		//---АК	
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", стр.Контрагент);
			Массив1 = ТабПлатежей.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив1 Цикл
				стр1.Пометка = Ложь;
				стр1.СтопОплата = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//+++АК sils 05.09.2018 ИП-00019634
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(стр.Организация) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", стр.Контрагент);
			Отбор.Вставить("Организация", стр.Организация);
			Массив1 = ТабПлатежей.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив1 Цикл
				стр1.Пометка = не стр.Подтверждено;
				стр1.СтопОплата = стр.Подтверждено;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//---АК
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПометка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейРасходИзБанка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейНазначениеПлатежа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейЗаявкаСтатьяДДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПолучено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПлатежей.СтопОплата", ВидСравненияКомпоновкиДанных.Равно, Истина);	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220, 220, 220));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//---АК
	
	//++ АК 21.08.2017 luza ИП-00016332	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПометка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейРасходИзБанка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейНазначениеПлатежа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейЗаявкаСтатьяДДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПолучено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПлатежей.РеквизитыЗаявкиСоответсвуютСкануСчета", ВидСравненияКомпоновкиДанных.Равно, Ложь,,Истина);	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(148, 0, 211));
	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//-- АК 21.08.2017 luza ИП-00016332

	
	ЗначениеВРеквизитФормы(ТабПлатежей, "ТаблицаПлатежей");
	ТабСводныеСуммыКОплате.Свернуть("Организация","Сумма,Документов");
	ЗначениеВРеквизитФормы(ТабСводныеСуммыКОплате, "СводныеСуммыКОплате");
	
	//УсловноеОформление
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерСтр = Формат(Номер, "ЧГ=0");
		
		//Красным если просрочен
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДата1");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаПлатежей.ПлатёжПросрочен", ВидСравненияКомпоновкиДанных.Равно, Истина);	
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		Прервать;
	КонецЦикла;
	ЗаполнитьСводныеСуммыПомеченного();
	
	//+++АК POZM 2018.02.04 ИП-00017682
 	КоличествоЗаявокСНепроведеннымиПлатёжками();
	//---АК POZM 
	
	//+++АК LAGP 2018.09.03 ИП-00019695 Послужит для визуализации поиска как таблица-источник
	ТаблицаПлатежейВспомогательная.Загрузить(ТаблицаПлатежей.Выгрузить());
	//---АК LAGP
	
КонецПроцедуры	

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДобавленныеКолонки()
	
	МассивКУдалению = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ДатыТаблицыПлатежей Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
		Эл = Элементы.Найти("ТаблицаПлатежейДата" + НомерСтр);
		Если НЕ Эл = Неопределено Тогда
			Элементы.Удалить(Эл);            
		КонецЕсли;
		
		МассивКУдалению.Добавить("ТаблицаПлатежей.Дата" + НомерСтр);
		МассивКУдалению.Добавить("ТаблицаПлатежейВспомогательная.Дата" + НомерСтр);  //+++АК LAGP 2018.09.05 ИП-00019695 Синхронизация колонок вспомогательной таблицы
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивКУдалению);  
	
	ТаблицаПлатежей.Очистить();
	ТаблицаПлатежейВспомогательная.Очистить();  //+++АК LAGP 2018.09.05 ИП-00019695
	ДатыТаблицыПлатежей.Очистить();
	
	Кол = УсловноеОформление.Элементы.Количество();
	Для й = 1 По Кол Цикл
		УсловноеОформление.Элементы.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере 
Функция НомерКолоникиПоДате(Дата)
	
	СтрокиДат = ДатыТаблицыПлатежей.НайтиСтроки(Новый Структура("ДатаПлатежа", Дата));
	
	Возврат Формат(ДатыТаблицыПлатежей.Индекс(СтрокиДат[0]) + 1, "ЧГ=0");
	
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаОбработки = ТекущаяДата();
	ЗаполнитьНаСервере();
	
	ДатаОбработкиСделки = ТекущаяДата();
	ЗаполнитьНаСервереСделки();
	
КонецПроцедуры

Функция СобратьПлатёжкуПоСтрокеСервер(ИндексСтроки)
	
	ДанныеСтроки = ТаблицаПлатежей.Получить(ИндексСтроки);
	
	ТТВсе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	
	//Формируем заявку
	СтруктураПлатёжки = Новый Структура;	
	СтруктураПлатёжки.Вставить("Дата"				, ТекущаяДата());
	СтруктураПлатёжки.Вставить("ДоговорКонтрагента"	, ДанныеСтроки.ДоговорКонтрагента);
	СтруктураПлатёжки.Вставить("Контрагент"			, ДанныеСтроки.Контрагент);
	СтруктураПлатёжки.Вставить("Организация"		, ДанныеСтроки.Организация);
	Сумма = 0;
	Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
		Сумма = Сумма + ДанныеСтроки["Дата" + Формат(й, "ЧГ=0")];
	КонецЦикла;	
	СтруктураПлатёжки.Вставить("СуммаДокумента"		, Сумма);
	СтруктураПлатёжки.Вставить("ДокументОснование"	, ДанныеСтроки.Заявка);
	СтруктураПлатёжки.Вставить("УИН_СтрокиОснования", ДанныеСтроки.УИН_СтрокиОплат);
	СтруктураПлатёжки.Вставить("СчетБанк"			, ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СтруктураПлатёжки.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеСтроки.СтатьяДДС);
	СтруктураПлатёжки.Вставить("ТорговаяТочка"		, ДанныеСтроки.СтруктурнаяЕдиница);
	СтруктураПлатёжки.Вставить("ЦФО"				, ДанныеСтроки.ЦФО);
	СтруктураПлатёжки.Вставить("Аванс"				, ДанныеСтроки.Аванс);
	СтруктураПлатёжки.Вставить("ЗаявкаНаРасходованиеСредств", ДанныеСтроки.Заявка);
	СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом",ДанныеСтроки.Заявка.СчетУчетаРасчетов);
	
	//////////////
	СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Ложь);
	СтруктураПлатёжки.Вставить("ВидПеречисленияВБюджет", 	ДанныеСтроки.Заявка.ВидПеречисленияВБюджет);
	СтруктураПлатёжки.Вставить("СтатусСоставителя", 		ДанныеСтроки.Заявка.СтатусСоставителя);
	СтруктураПлатёжки.Вставить("КодБК", 					ДанныеСтроки.Заявка.КодБК);
	СтруктураПлатёжки.Вставить("КодОКТМО", 					ДанныеСтроки.Заявка.КодОКТМО);
	СтруктураПлатёжки.Вставить("ПоказательОснования", 		ДанныеСтроки.Заявка.ПоказательОснования);
	СтруктураПлатёжки.Вставить("ПоказательПериода", 		ДанныеСтроки.Заявка.ПоказательПериода);
	СтруктураПлатёжки.Вставить("ПоказательДаты", 			ДанныеСтроки.Заявка.ПоказательДаты);
	СтруктураПлатёжки.Вставить("ПоказательНомера", 			ДанныеСтроки.Заявка.ПоказательНомера);
	СтруктураПлатёжки.Вставить("ПоказательТипа", 			ДанныеСтроки.Заявка.ПоказательТипа);
	СтруктураПлатёжки.Вставить("ВидПлатежаВГосБюджет", 		ДанныеСтроки.Заявка.ВидПлатежаВГосБюджет);
	СтруктураПлатёжки.Вставить("ИдентификаторПлатежа", 		ДанныеСтроки.Заявка.ИдентификаторПлатежа);
	/////////////
	//+++АК pozm ИП-00016666 08.10.2017
	СтруктураПлатёжки.Вставить("ПлановаяДатаПоступления", 	ДанныеСтроки.Заявка.ДатаПоступления);
	//---АК pozm ИП-00016666 08.10.2017
	
	Если ТипЗнч(ДанныеСтроки.Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		Если ДанныеСтроки.СтатьяДДС.Код = "131010" ИЛИ ДанныеСтроки.СтатьяДДС.Код = "131019" Тогда //Оплата аренды (торговых точек и магазинов)
			Если ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
				СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю);
			ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю ИЛИ ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда
				СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю);
			//+++ AK suvv 04.04.2018 ИП-00018071 
			ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
				СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
				СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
			//---AK suvv	
			//+++АК LAGP 2018.08.23 ИП-00019578.01 Добавлен возврат постоянной части аренды
			ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПостояннойЧастиАрендыАрендатору Тогда
				СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору);
			//---АК LAGP
			КонецЕсли;
		ИначеЕсли ДанныеСтроки.СтатьяДДС.Код = "131011" Тогда  //Оплата депозита за аренду (торговых точек и магазинов)
			СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю);
			
		//+++АК LAGP 2018.04.11 ИП-00018356 Оплата штрафов по постановлению
		ИначеЕсли ДанныеСтроки.Заявка.СтатьяДДС = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("139399") 
			И ДанныеСтроки.Заявка.СчетУчетаРасчетов = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("60.4", "Финансовый") Тогда
			ЭтоОплатаШтрафа = Ложь;
			МассивНазначений = ДанныеСтроки.Заявка.Оплата.ВыгрузитьКолонку("НазначениеПлатежа");
			Для каждого СтрокаНазначения из МассивНазначений Цикл
				Если Найти(СтрЗаменить(ВРег(СтрокаНазначения), " ", ""), "ОПЛАТАШТРАФОВПОПОСТАНОВЛЕНИЮ") > 0 ИЛИ Найти(СтрЗаменить(ВРег(СтрокаНазначения), " ", ""), "ОПЛАТАГОСПОШЛИНЫЗАГОСУДАРСТВЕННУЮРЕГИСТРАЦИЮ") > 0 ИЛИ Найти(СтрЗаменить(ВРег(СтрокаНазначения), " ", ""), "ОПЛАТААДМИНИСТРАТИВНОГОШТРАФАПОПОСТАНОВЛЕНИЮ") > 0 Тогда //+++АК LAGP 2018.05.23 ИП-00018356 добавлено назначение "ОПЛАТААДМИНИСТРАТИВНОГОШТРАФАПОПОСТАНОВЛЕНИЮ"
					ЭтоОплатаШтрафа = Истина;	
				КонецЕсли;					
			КонецЦикла;	
			
			Если ЭтоОплатаШтрафа Тогда
		    	СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
			//+++АК LAGP 2018.06.07 ИП-00018922 Реквизиты перечисления в бюджет должны проставляться       	
			    СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
			ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
				СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);			
				СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
			//---АК LAGP		
			КонецЕсли;					
		//---АК LAGP	
			
		ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога 
			ИЛИ ДанныеСтроки.СтатьяДДС.Код = "139399" Тогда  //Оплата госпошины и прочих расходов для юридического сопровождения	
			СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
			
			СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
						
		ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы Тогда
			СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу);
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом",ПланыСчетов.Финансовый.НайтиПоКоду("71.3"));
			СтруктураПлатёжки.Вставить("ФизЛицо",					ДанныеСтроки.Заявка.Контрагент);
			СтруктураПлатёжки.Вставить("СубконтоДт2", ДанныеСтроки.Заявка.Контрагент);
			СтруктураПлатёжки.Вставить("СубконтоДт1", ДанныеСтроки.Заявка.Организация);
						
		ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
			СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты);	
			СтруктураПлатёжки.Вставить("ВидОперацииСКорпоративнойКартой",Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОткрытиеКорпоративнойКарты);
			
			//+++АК LAGP 2018.02.27 ИП-00017918
			//СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом", 	ПланыСчетов.Финансовый.НайтиПоКоду("57.4"));
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", СтруктураПлатёжки.Дата)));
			//---АК LAGP
			
			СтруктураПлатёжки.Вставить("СубконтоДт1", ДанныеСтроки.Организация);
			
			СтруктураПлатёжки.Вставить("СубконтоДт3", ДанныеСтроки.Заявка.КорпКарта);
			
			//+++АК LAGP 2018.02.27 ИП-00017918
			//СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("55.04"));
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", СтруктураПлатёжки.Дата)));
			//---АК LAGP
			
			СтруктураПлатёжки.Вставить("ФизЛицо", ДанныеСтроки.Заявка.Контрагент);
			СтруктураПлатёжки.Вставить("Контрагент", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ДанныеСтроки.Организация.ИНН));
			СтруктураПлатёжки.Вставить("СчетКонтрагента", Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810238000021696",,СтруктураПлатёжки.Контрагент));                           
			
			СтруктураПлатёжки.Вставить("СубконтоДт2", Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810238000021696",,ДанныеСтроки.Организация));
			//СтруктураПлатёжки.Вставить("СубконтоДт3", ДанныеСтроки.Заявка.ЦФО);
			//СтруктураПлатёжки.Вставить("СубконтоДт3", ДанныеСтроки.Заявка.ЦФО);
		ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
			СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);		
			СтруктураПлатёжки.Вставить("ПереводДСФизЛицамНаКарту", 	Истина);
			
			//+++АК LAGP 2018.02.27 ИП-00017918
			//СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом", 	ПланыСчетов.Финансовый.НайтиПоКоду("57.4"));
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", СтруктураПлатёжки.Дата)));
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", СтруктураПлатёжки.Дата)));
			//---АК LAGP
			
			СтруктураПлатёжки.Вставить("ФизЛицо", ДанныеСтроки.Заявка.Контрагент);
			СтруктураПлатёжки.Вставить("Контрагент", Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ДанныеСтроки.Организация.ИНН));
			СтруктураПлатёжки.Вставить("СчетКонтрагента", Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810238000021696",,СтруктураПлатёжки.Контрагент));
			
			
			СтруктураПлатёжки.Вставить("СубконтоДт1", ДанныеСтроки.Организация);
			//СтруктураПлатёжки.Вставить("СубконтоДт2", ДанныеСтроки.Заявка.КорпКарта);
			СтруктураПлатёжки.Вставить("СубконтоДт3", ДанныеСтроки.Заявка.КорпКарта);
			
		ИначеЕсли ДанныеСтроки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.РасчетыПоКредитамИЗаймам Тогда
			СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам);
			
		//+++АК LAGP 2018.10.31 ИП-00019645 Выдача займа Контрагенту-поставщику по условию/возврат в срок
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВидДоговора") = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Финансовый")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ТипДоговораФинансы") = ПредопределенноеЗначение("Перечисление.ТипыДоговоровФинансы.Займ")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств") = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310310") Тогда //Статья "Выдача займа"
				
			СтруктураПлатёжки.Вставить("СчетУчетаРасчетовСКонтрагентом", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("58.2", "Финансовый"));	
			СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам);
			СтруктураПлатёжки.Вставить("СубконтоДт1", ДанныеСтроки.Контрагент);
			СтруктураПлатёжки.Вставить("СубконтоДт2", ДанныеСтроки.ДоговорКонтрагента);
		//---АК LAGP
			
		Иначе
			//+++АК LAGP 2018.09.20 ИП-00019684.01 Проверка наличия признака в заявке
			Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Заявка, "ВидПеречисленияВБюджет")) Тогда
				СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
			КонецЕсли;	
			//---АК LAGP
			СтруктураПлатёжки.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
		КонецЕсли;
	Иначе
		//+++АК LAGP 2018.09.20 ИП-00019684.01 Проверка наличия признака в заявке
		Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Заявка, "ВидПеречисленияВБюджет")) Тогда
			СтруктураПлатёжки.Вставить("ПеречислениеВБюджет", 		Истина);
		КонецЕсли;	
		//---АК LAGP
		СтруктураПлатёжки.Вставить("ВидОперации"	, Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	КонецЕсли;
	СтруктураПлатёжки.Вставить("НазначениеПлатежа"	, ДанныеСтроки.НазначениеПлатежа);
	СтруктураПлатёжки.Вставить("ОчередностьПлатежа"	, 5);
	СтруктураПлатёжки.Вставить("ПометкаУдаления"	, Ложь);
	//Если ДанныеСтроки.Заявка Тогда
	СтруктураПлатёжки.Вставить("ПериодРегистрации"  , ДанныеСтроки.Заявка.НачалоПериодаАренды);
	//КонецЕсли;	
	Возврат СтруктураПлатёжки;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПлатёжныеДокументы(Команда)
	
	ТекКонтрагент	= "";
	ТекОрганизация	= "";
	ТекПП		= "";
	ТекДоговор	= "";
	
	//
	СтрокиДляОбработки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		//Если ТипЗнч(СтрокаДляОбработки.Заявка)<>Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		//	Продолжить;
		//КонецЕсли;	
		СтруктураНовойПлатёжки = СобратьПлатёжкуПоСтрокеСервер(ТаблицаПлатежей.Индекс(СтрокаДляОбработки));
		Если ЗначениеЗаполнено(СтрокаДляОбработки.РасходИзБанка) Тогда
			Парам = Новый Структура;
			Парам.Вставить("Ключ", СтрокаДляОбработки.РасходИзБанка);
			ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта", Парам);
		Иначе	
			ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта");
			
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
		
		ТекПП.ОрганизацияПриИзменении(ТекПП.ЭлементыФормы.Организация);
		ТекПП.КонтрагентПриИзменении(ТекПП.ЭлементыФормы.Контрагент);
		ТекПП.ДоговорКонтрагентаПриИзменении(ТекПП.ЭлементыФормы.ДоговорКонтрагента);
		ТекПП.СуммаДокументаПриИзменении(ТекПП.ЭлементыФормы.СуммаДокумента);
		ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
		ТекПП.УстановитьСчетаУчетаБУ();
		ТекПП.УстановитьСтатьюДДС_БУ_ПоУмолчанию();
		
		ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
		
		ТекПП.АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		ТекПП.Организация, ТекПП.СчетОрганизации, ТекПП.Контрагент, ТекПП.СчетКонтрагента, ТекПП.ВидОперации, ТекПП.ПеречислениеВБюджет);
		
		ТекПП.УстановитьРеквизитыПолучателя();
		
		Если ЗначениеЗаполнено(СтруктураНовойПлатёжки.СтатьяДвиженияДенежныхСредств) Тогда
			ТекПП.СтатьяДвиженияДенежныхСредств = СтруктураНовойПлатёжки.СтатьяДвиженияДенежныхСредств ;// а то её меняют в предыдущих обработчиках 
		КонецЕсли;
				
		Если СтрокаДляОбработки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы Тогда
			//СтруктураПлатёжки.Вставить("ВидОперации", 				Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу);
			//СтруктураПлатёжки.Вставить("СчетБанк",					ПланыСчетов.Хозрасчетный.банк);
			ТекПП.Контрагент = 	СтрокаДляОбработки.Контрагент;
			ТекПП.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ЗаполнитьЗначенияСвойств(ТекПП,СтруктураНовойПлатёжки,"СубконтоДт2,СубконтоДт1,СчетУчетаРасчетовСКонтрагентом");
			
		ИначеЕсли СтрокаДляОбработки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
			ЗаполнитьЗначенияСвойств(ТекПП,СтруктураНовойПлатёжки,"СубконтоДт3,СубконтоДт1,СчетУчетаРасчетовСКонтрагентом");
			ТекПП.СубконтоДт2 = ТекПП.СчетКонтрагента;
			НС = ТекПП.ОплатаПоФизЛицам.Добавить();
			НС.ФизЛицо = СтрокаДляОбработки.Контрагент;
			НС.НомерКорпоративнойКарты = СтруктураНовойПлатёжки.СубконтоДт3;
			НС.Сумма  = ТекПП.СуммаДокумента;
			ТекПП.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли СтрокаДляОбработки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
			ТекПП.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ЗаполнитьЗначенияСвойств(ТекПП,СтруктураНовойПлатёжки,"СубконтоДт3,СубконтоДт2,СубконтоДт1,СчетУчетаРасчетовСКонтрагентомБУ");
			
		//+++АК LAGP 2018.06.07 ИП-00018922 Реквизиты перечисления в бюджет должны проставляться 	
		//ИначеЕсли ТекПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ИначеЕсли ТекПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ (ТекПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику И ТекПП.ПеречислениеВБюджет) ИЛИ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляОбработки.Заявка, "ВидПеречисленияВБюджет")) Тогда //+++АК LAGP 2018.09.20 ИП-00019684.01 Добавлена проверка наличия признака в заявке
		//---АК LAGP	
			ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки,"ПеречислениеВБюджет,ВидПеречисленияВБюджет,СтатусСоставителя,КодБК,КодОКТМО,ПоказательОснования,ПоказательПериода,ПоказательДаты,ПоказательНомера,ПоказательТипа,ВидПлатежаВГосБюджет");
		КонецЕсли;	
		
		//ТекПП.СчетУчетаРасчетовСКонтрагентомПриИзменении(ТекПП.ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		//+++АК POZM 2018.04.25 ИП-00018469
		СчетКонтра = ТекПП.ДоговорКонтрагента.БанковскийСчет;
		Если ЗначениеЗаполнено(СчетКонтра) Тогда
			ТекПП.СчетКонтрагента = СчетКонтра;
		//---АК POZM 	
		ИначеЕсли СтрокаДляОбработки.Заявка.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту И ЗначениеЗаполнено(СтрокаДляОбработки.Заявка.СчетКонтрагента) Тогда
			ТекПП.СчетКонтрагента = СтрокаДляОбработки.Заявка.СчетКонтрагента;
		КонецЕсли;	
		ТекПП.СчетУчетаРасчетовСКонтрагентомПриИзменении(ТекПП.ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		//ТекПП.Открыть();
		
		//+++АК LAGP 2018.06.08 ИП-00018864 В некоторых случая необходимо разделять КПП по банковскому счёту. Добавлен реквизит "КПППолучателя"
		Если ЗначениеЗаполнено(ТекПП.СчетКонтрагента) Тогда
			КППИзБанковскогоСчёта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПП.СчетКонтрагента, "КПППолучателя"); 			
			ТекПП.КПППолучателя = ?(ЗначениеЗаполнено(КППИзБанковскогоСчёта), КППИзБанковскогоСчёта, ТекПП.КПППолучателя);
		КонецЕсли;	
		//---АК LAGP
		
		//+++ AK suvv 03.05.2018 ИП-00018071
		Если ТипЗнч(СтрокаДляОбработки.Заявка)= Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда 
			//+++АК ILIK 2018.11.02 ИП-00020284
			//Если СтрокаДляОбработки.Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога и
			//	СтрокаДляОбработки.Заявка.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НалогиСФОТ Тогда
			ЗаявкаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляОбработки.Заявка, "ВидОперации,СчетУчетаРасчетов,ВидПлатежаВГосБюджет,Услуги.Номенклатура");
			Если ЗаявкаРеквизиты.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
				Если ЗаявкаРеквизиты.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НалогиСФОТ Тогда
			//---АК ILIK
					ТекПП.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000006");
					ТекПП.СтатьяДвиженияДенежныхСредств = СтрокаДляОбработки.Заявка.СтатьяДДС;
					ТекПП.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000025");
					Если ТипЗнч(СтрокаДляОбработки.Заявка.ДокументОснование)= Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда 
						ТекПП.ДоговорКонтрагентаНДФЛ = СтрокаДляОбработки.Заявка.ДокументОснование.ДоговорКонтрагента;
					КонецЕсли;
				//+++АК ILIK 2018.11.02 ИП-00020284
				ИначеЕсли ЗаявкаРеквизиты.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НалогиУН Тогда 
					Если ЗаявкаРеквизиты.УслугиНоменклатура.Выгрузить().Найти(Справочники.Номенклатура.НайтиПоНаименованию("Пени, штрафы", Истина)) <> Неопределено Тогда
						Если ЗаявкаРеквизиты.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
							ТекПП.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоНаименованию("Штрафы по торговому сбору", Истина);
						ИначеЕсли ЗаявкаРеквизиты.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПениСам Тогда
							ТекПП.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоНаименованию("Пени по торговому сбору", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//---АК ILIK
			КонецЕсли;
			// {{ AK SAM 13.12.2018 ИП-00020590
			Если ТекПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю ИЛИ ТекПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю Тогда
				СтруктураНДС = ПолучитьСтруктуруДанныхНДСНаСервере(СтрокаДляОбработки.Заявка);
				Если СтруктураНДС <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТекПП,СтруктураНДС);
				КонецЕсли;
			КонецЕсли;			
			// AK SAM 13.12.2018 ИП-00020590 }}
		КонецЕсли;
		//--- AK suvv
		
		Попытка
			ТекПП.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекПП.Открыть();
			ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
			//ТекПП.Записать(РежимЗаписиДокумента.Запись);
			//Если ТекПП.Проведен Тогда
			//	ТекПП.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		Сообщить("Сформирован документ " + ТекПП.Ссылка);
		СтрокаДляОбработки.РасходИзБанка = ТекПП.Ссылка;
		Заявка = СтрокаДляОбработки.Заявка.ПолучитьОбъект();
		Если ТипЗнч(Заявка) = Тип("ДокументОбъект.ЗаявкаНаУслугиМатериалы") Тогда  
			СтрокаЗаявки = Заявка.Оплата.НайтиСтроки(Новый Структура("УИН_Строки", СтрокаДляОбработки.УИН_СтрокиОплат))[0];
		ИначеЕсли ТипЗнч(Заявка) = Тип("ДокументОбъект.КомплектацияМагазинаПоСделкамСПоставщиком") Тогда
			СтрокаЗаявки = Заявка.УслугиПоСчетам.НайтиСтроки(Новый Структура("УИН_Строки", СтрокаДляОбработки.УИН_СтрокиОплат))[0];
		КонецЕсли;	
		СтрокаЗаявки.РасходИзБанка = ТекПП.Ссылка;
		Заявка.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;	
	
	//Если НЕ ТекПП = "" Тогда
	//	ТекПП.Открыть();
	//КонецЕсли;
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбработкиПриИзменении(Элемент)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;	
	
	ЗаполнитьСводныеСуммыПомеченного();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;	
	
	ЗаполнитьСводныеСуммыПомеченного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлатежейРасходИзБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлатежейСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлатежейКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлатежейПометкаПриИзменении(Элемент)
	
	ЗаполнитьСводныеСуммыПомеченного();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводныеСуммыПомеченного()
	
	Таб = РеквизитФормыВЗначение("СводныеСуммыКОплатеПомеченные");
	Таб.Очистить();
	
	СтрокиДляОбработки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		Если СтрокаДляОбработки.Пометка Тогда
			НС = Таб.Добавить();
			НС.Организация = СтрокаДляОбработки.Организация;
			Сумма = 0;
			Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
				Сумма = Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
			КонецЦикла;	
			
			НС.Сумма = Сумма;
			НС.Документов = 1;
		КонецЕсли;	
	КонецЦикла;	
	Таб.Свернуть("Организация", "Сумма,Документов");
	
	ЗначениеВРеквизитФормы(Таб, "СводныеСуммыКОплатеПомеченные");
	
КонецПроцедуры	


////////////////////////// СДЕЛКИ ////////////////////////


Процедура ЗаполнитьНаСервереСделки()
	
	УдалитьДобавленныеКолонкиСделки();
		
	ТЗПлатежей = Обработки.ПлатёжныйКалендарьПоЗаявкамНаУслугиМатериалы.ПолучитьТаблицуПоСделкамСПоставщиком(ДатаОбработкиСделки);
	
	ТЗДат = ТЗПлатежей.Скопировать(,"ДатаПлатежа");
	ТЗДат.Свернуть("ДатаПлатежа");
	ТЗДат.Сортировать("ДатаПлатежа");
	ЗначениеВРеквизитФормы(ТЗДат, "ДатыТаблицыПлатежейСделки");
	
	Вкусвилл = Справочники.Организации.НайтиПоКоду("000000006");
	
	МассивРеквизитов = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерКолСтр = Формат(Номер, "ЧГ=0");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата" + НомерКолСтр, Новый ОписаниеТипов("Число"), "ТаблицаПлатежейСделки"));
		Номер = Номер + 1;
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов); 
	
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаПлатежейСделкиДата" + НомерСтр, Тип("ПолеФормы"), Элементы.ТаблицаПлатежейСделки); 
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ТаблицаПлатежейСделки.Дата" + НомерСтр;
		Если ТекДата.ДатаПлатежа = Дата(1, 1, 1) Тогда
			НовыйЭлемент.Заголовок 	= "Произвольные платежи";
		Иначе	
			НовыйЭлемент.Заголовок 	= Формат(ТекДата.ДатаПлатежа, "ДФ=dd.MM.yy");
		КонецЕсли;	
		
		Номер = Номер + 1;
	КонецЦикла;
	ТабСводныеСуммыКОплате = РеквизитФормыВЗначение("СводныеСуммыКОплатеСделки");
	ТабСводныеСуммыКОплате.Очистить();
	ТабПлатежей = РеквизитФормыВЗначение("ТаблицаПлатежейСделки");
	Для каждого Стр Из ТЗПлатежей Цикл
		НоваяСтрока = ТабПлатежей.Добавить();
		НоваяСтрока.Номенклатура			= Стр.Номенклатура;
		НоваяСтрока.Сделка					= Стр.Сделка;
		НоваяСтрока.ЭтапСделки				= Стр.ЭтапСделки;
		НоваяСтрока.СтруктурнаяЕдиница		= Стр.СтруктурнаяЕдиница;
		НоваяСтрока.Контрагент				= Стр.Контрагент;
		НоваяСтрока.Организация				= ?(ЗначениеЗаполнено(Стр.Организация),Стр.Организация,Вкусвилл);
		НоваяСтрока.ПлатёжПросрочен			= (Стр.ДатаПлатежа > Стр.ДатаПлатежаПоДокументу);
		НоваяСтрока.Пометка					= (Стр.ДатаПлатежа = ДатаОбработкиСделки);
		НоваяСтрока.УИН_СтрокиЭтапа			= Стр.УИН_Строки;
		НоваяСтрока.УИН_ПервойСтроки		= Стр.УИН_ПервойСтроки;
		НоваяСтрока.Комплектация			= Стр.Комплектация;
		НоваяСтрока.УИН_СтрокиКомплектации 	= Стр.УИН_СтрокиКомплектации;
		НоваяСтрока.Аванс 					= Стр.Аванс;
		НоваяСтрока["Дата" + НомерКолоникиПоДатеСделки(Стр.ДатаПлатежа)] = Стр.СуммаОстаток;  
		НоваяСтрока.ДатаПлатежаПоДокументу 	= Стр.ДатаПлатежаПоДокументу;
		НоваяСтрока.ДатаГотовностиПлан		= Стр.ДатаГотовностиПлан;
		//+++АК LAGP 17.11.29 ИП-00017355 
		НоваяСтрока.ПроцентОплаты 			= Стр.ПроцентОплаты;
		НоваяСтрока.ВариантОплаты			= Стр.ВариантОплаты;
		//---АК LAGP
		
		//+++АК POZM 2017.12.13 ИП-00017345 
		НоваяСтрока.Договор 				= Стр.Договор;
		Если ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
			НоваяСтрока.Организация			= НоваяСтрока.Договор.Организация;
		КонецЕсли;	
		//---АК POZM 
		
		Если Стр.ДатаПлатежа = ДатаОбработкиСделки Тогда
			НС = ТабСводныеСуммыКОплате.Добавить();
			НС.Организация 	= НоваяСтрока.Организация;
			НС.Сумма 		= Стр.СуммаОстаток;
			НС.Документов 	= 1;
		КонецЕсли;	
	КонецЦикла;	
	//+++АК 31.07.2017 sils ИП-00015834
	ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ДатаОбработкиСделки), );
	//+++АК sils 09.11.2018 ИП-00019634.02
	СЗ_КонтрСОрганизацией = Новый СписокЗначений;
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(стр.Организация) Тогда
			СЗ_КонтрСОрганизацией.Добавить(стр.Контрагент);
		КонецЕсли;
	КонецЦикла;
	//---АК
	Для каждого стр из ТЗ Цикл
		//+++АК sils 09.11.2018 ИП-00019634.02
		Если СЗ_КонтрСОрганизацией.НайтиПоЗначению(стр.Контрагент) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//---АК
		//+++АК sils 05.09.2018 ИП-00019634
		//Если стр.Подтверждено Тогда
		Если стр.Подтверждено и не ЗначениеЗаполнено(стр.Организация) Тогда
		//---АК	
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", стр.Контрагент);
			Массив1 = ТабПлатежей.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив1 Цикл
				стр1.Пометка = Ложь;
				стр1.СтопОплата = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//+++АК sils 05.09.2018 ИП-00019634
	Для каждого стр из ТЗ Цикл
		Если ЗначениеЗаполнено(стр.Организация) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", стр.Контрагент);
			Отбор.Вставить("Организация", стр.Организация);
			Массив1 = ТабПлатежей.НайтиСтроки(Отбор);
			Для каждого стр1 из Массив1 Цикл
				стр1.Пометка = не стр.Подтверждено;
				стр1.СтопОплата = стр.Подтверждено;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//---АК
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПометка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейРасходИзБанка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейНазначениеПлатежа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейЗаявкаСтатьяДДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПолучено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПлатежей.СтопОплата", ВидСравненияКомпоновкиДанных.Равно, Истина);	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220, 220, 220));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//---АК
	
	//++ АК 21.08.2017 luza ИП-00016332	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПометка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейРасходИзБанка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейНазначениеПлатежа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейЗаявкаСтатьяДДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейПолучено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПлатежей.РеквизитыЗаявкиСоответсвуютСкануСчета", ВидСравненияКомпоновкиДанных.Равно, Ложь,,Истина);	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(148, 0, 211));
	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//-- АК 21.08.2017 luza ИП-00016332

	
	ТабПлатежей.Сортировать("Контрагент,Сделка,Аванс");
	ЗначениеВРеквизитФормы(ТабПлатежей, "ТаблицаПлатежейСделки");
	ТабСводныеСуммыКОплате.Свернуть("Организация","Сумма,Документов");
	ЗначениеВРеквизитФормы(ТабСводныеСуммыКОплате, "СводныеСуммыКОплатеСделки");
	
	//УсловноеОформление
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерСтр = Формат(Номер, "ЧГ=0");
		
		//Красным если просрочен
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейСделкиДата1");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаПлатежейСделки.ПлатёжПросрочен", ВидСравненияКомпоновкиДанных.Равно, Истина);	
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		Прервать;
	КонецЦикла;
	
	ЗаполнитьСводныеСуммыПомеченногоСделки();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСделки(Команда)
	
	ЗаполнитьНаСервереСделки();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДобавленныеКолонкиСделки()
	
	МассивКУдалению = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ДатыТаблицыПлатежейСделки Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
		Эл = Элементы.Найти("ТаблицаПлатежейСделкиДата" + НомерСтр);
		Если НЕ Эл = Неопределено Тогда
			Элементы.Удалить(Эл);            
		КонецЕсли;
		
		МассивКУдалению.Добавить("ТаблицаПлатежейСделки.Дата" + НомерСтр);
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивКУдалению);  
	
	ТаблицаПлатежейСделки.Очистить();
	ДатыТаблицыПлатежейСделки.Очистить();
	
	Кол = УсловноеОформление.Элементы.Количество();
	Для й = 1 По Кол Цикл
		УсловноеОформление.Элементы.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере 
Функция НомерКолоникиПоДатеСделки(Дата)
	
	СтрокиДат = ДатыТаблицыПлатежейСделки.НайтиСтроки(Новый Структура("ДатаПлатежа", Дата));
	
	Возврат Формат(ДатыТаблицыПлатежейСделки.Индекс(СтрокиДат[0]) + 1, "ЧГ=0");
	
КонецФункции	


&НаКлиенте
Процедура ТаблицаПлатежейПриАктивизацииСтрокиСделки(Элемент)
	//ПодключитьОбработчикОжидания("УстановитьФильтрыВЗависимыхСписках",0.1,Истина);
	//ПодключитьОбработчикОжидания("ОбновитьЕстьКомплектация",1,Истина);
КонецПроцедуры

Функция СобратьЗаявкуПоСтрокеСерверСделки(ИндексСтроки)
	
	ДанныеСтроки = ТаблицаПлатежейСделки.Получить(ИндексСтроки);
	
	//Формируем заявку
	СтруктураЗаявки = Новый Структура;	
	СтруктураЗаявки.Вставить("Дата"				, ТекущаяДата());
	СтруктураЗаявки.Вставить("ФормаОплаты"		, Перечисления.ФормыОплаты.Безналичные);
	СтруктураЗаявки.Вставить("Контрагент"		, ДанныеСтроки.Контрагент);
	СтруктураЗаявки.Вставить("Организация"		, ДанныеСтроки.Организация);
	СтруктураЗаявки.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	СтруктураЗаявки.Вставить("Статус"			, Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована);
	СтруктураЗаявки.Вставить("ИнициаторЗаявки"	, ДанныеСтроки.Комплектация.Ответственный.ФизЛицо);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявкиНаРасходованиеСредствСделки(Команда)
	
	ТекКонтрагент	= "";
	ТекОрганизация	= "";
	ТекЗаявка		= "";
	
	//
	СтрокиДляОбработки = ТаблицаПлатежейСделки.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		
		Если (НЕ СтрокаДляОбработки.Контрагент = ТекКонтрагент)
			ИЛИ НЕ СтрокаДляОбработки.Организация = ТекОрганизация Тогда
			
			Если НЕ ТекЗаявка = "" Тогда
				ТекЗаявка.Открыть();
			КонецЕсли;	
			СтруктураНовойЗаявки = СобратьЗаявкуПоСтрокеСерверСделки(ТаблицаПлатежейСделки.Индекс(СтрокаДляОбработки));
			
			ТекЗаявка = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаОбъекта");
			ЗаполнитьЗначенияСвойств(ТекЗаявка, СтруктураНовойЗаявки);
			
			ТекЗаявка.ОрганизацияПриИзменении(ТекЗаявка.ЭлементыФормы.Организация);
			ТекЗаявка.КонтрагентПриИзменении(ТекЗаявка.ЭлементыФормы.Контрагент);
			
			ТекКонтрагент 	= ТекЗаявка.Контрагент;
			ТекОрганизация 	= ТекЗаявка.Организация;
			
		КонецЕсли;
		
		НоваяСтрока = ТекЗаявка.ТорговыеТочки.Добавить();
		НоваяСтрока.ДатаАкцепта			= ТекущаяДата();
		НоваяСтрока.ТорговаяТочка		= СтрокаДляОбработки.СтруктурнаяЕдиница;
		НоваяСтрока.Сделка				= СтрокаДляОбработки.Сделка;
		НоваяСтрока.Статус				= СтруктураНовойЗаявки.Статус;
		НоваяСтрока.СтрокаСделки		= СтрокаДляОбработки.УИН_СтрокиЭтапа;
		
		НоваяСтрока.Комплектация		= СтрокаДляОбработки.Комплектация;
		НоваяСтрока.СтрокаКомплектации	= СтрокаДляОбработки.УИН_СтрокиКомплектации;
		НоваяСтрока.ДатаПлатежаПоСделке	= СтрокаДляОбработки.ДатаПлатежаПоДокументу;
		НоваяСтрока.Период				= НачалоМесяца(ТекущаяДата());
		
		Для й = 1 По ДатыТаблицыПлатежейСделки.Количество() Цикл
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
		КонецЦикла;	
		
		ТекЗаявка.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НоваяСтрока;
		ТекЗаявка.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
		ТекЗаявка.СуммаДокумента = ТекЗаявка.СуммаДокумента + НоваяСтрока.Сумма;
		
	КонецЦикла;	
	
	Если НЕ ТекЗаявка = "" Тогда
		ТекЗаявка.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговуюТаблицуДляФормированияЗаявокСделки()
	//СтрокиДляОбработки=ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка",Истина));
	//
	//ТЗ=РеквизитФормыВЗначение("ИтоговаяТаблицаДляФормированияЗаявок");
	//ТЗ.Очистить();
	//Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
	//	СтруктураПоиска=Новый Структура;
	//	СтруктураПоиска.Вставить("Сделка",СтрокаДляОбработки.Сделка);
	//	СтруктураПоиска.Вставить("УИН_ПервойСтроки",СтрокаДляОбработки.УИН_ПервойСтроки);
	//	СтрокиКомплектации=ТаблицаКомплектацийДляФормированияЗаявок.НайтиСтроки(СтруктураПоиска);
	//	Если СтрокиКомплектации.Количество()=0 Тогда // комплектаций нет
	//		НС=ТЗ.Добавить();
	//		ЗаполнитьЗначенияСвойств(НС,СтрокаДляОбработки,"Организация,Контрагент,Сделка,СтруктурнаяЕдиница");
	//		НС.СтрокаСделки=СтрокаДляОбработки.УИН_СтрокиЭтапа;
	//		Для й=1 По ДатыТаблицыПлатежей.Количество() Цикл
	//			НС.Сумма=НС.Сумма+СтрокаДляОбработки["Дата"+Формат(й,"ЧГ=0")] ;
	//		КонецЦикла;	
	//	Иначе //есть комплектации
	//		СуммаКОплате=0;
	//		Для й=1 По ДатыТаблицыПлатежей.Количество() Цикл
	//			СуммаКОплате=СуммаКОплате+СтрокаДляОбработки["Дата"+Формат(й,"ЧГ=0")] ;
	//		КонецЦикла;	
	//		Распределено=0;
	//		Для каждого СтрокаКомплектации Из СтрокиКомплектации Цикл
	//			НС=ТЗ.Добавить();
	//			ЗаполнитьЗначенияСвойств(НС,СтрокаКомплектации,"Организация,Сделка,Контрагент,СтруктурнаяЕдиница");
	//			НС.СтрокаСделки=СтрокаДляОбработки.УИН_СтрокиЭтапа;
	//			НС.Сумма=СуммаКОплате*СтрокаКомплектации.Количество/СтрокаКомплектации.КоличествоВсего;
	//			Распределено=Распределено+НС.Сумма;
	//		КонецЦикла;	
	//		НС.Сумма=НС.Сумма+(СуммаКОплате-Распределено);
	//	КонецЕсли;	
	//КонецЦикла;	
	//ТЗ.Сортировать("Организация,Контрагент,СтруктурнаяЕдиница");
	//ЗначениеВРеквизитФормы(ТЗ,"ИтоговаяТаблицаДляФормированияЗаявок");
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуКомплектацийДляФормированияЗаявокСделки()
	
	СтрокиДляОбработки = ТаблицаПлатежейСделки.НайтиСтроки(Новый Структура("Пометка", Истина));
	СписокСделок	= Новый СписокЗначений;
	СписокУинов		= Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из СтрокиДляОбработки Цикл
		СписокСделок.Добавить(СтрокаТаблицы.Сделка);
		СписокУинов.Добавить(СтрокаТаблицы.УИН_ПервойСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("НаДату"			, ДатаОбработкиСделки);
	Запрос.УстановитьПараметр("Сделки"			, СписокСделок);
	Запрос.УстановитьПараметр("УИНы_СтрокСделок", СписокУинов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки КАК УИН_ПервойСтроки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Количество,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Номенклатура,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.НомерСтроки КАК НомерСтрокиКомплектации,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин КАК СтруктурнаяЕдиница,
	|	СделкаСПоставщикомГрафикОплат.Количество КАК КоличествоВсего,
	|	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент,
	|	СделкаСПоставщикомГрафикОплат.ДатаГотовности КАК ДатаГотовностиПлан
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&НаДату, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки = СделкаСПоставщикомГрафикОплат.УИН_Строки
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка В(&Сделки)
	|	И КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки В(&УИНы_СтрокСделок)";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаКомплектацийДляФормированияЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбработкиПриИзмененииСделки(Элемент)
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("НаДату",ДатаОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеСделки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежейСделки Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;	
	
	ЗаполнитьСводныеСуммыПомеченногоСделки();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиСделки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежейСделки Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;	
	
	ЗаполнитьСводныеСуммыПомеченногоСделки();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеДокументыСделки(Команда)
	
	ТекКонтрагент	= "";
	ТекОрганизация	= "";
	ТекПП			= "";
	ТекАванс 		= "";
	ТекСделка 		= "";
	//
	СтрокиДляОбработки = ТаблицаПлатежейСделки.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		
		Если (НЕ СтрокаДляОбработки.Контрагент = ТекКонтрагент)
			ИЛИ НЕ СтрокаДляОбработки.Аванс = ТекАванс
			ИЛИ НЕ СтрокаДляОбработки.Сделка = ТекСделка
			ИЛИ НЕ СтрокаДляОбработки.Организация = ТекОрганизация Тогда
			Если НЕ ТекПП = "" Тогда
				ТекПП.СуммаДокументаПриИзменении(ТекПП.ЭлементыФормы.СуммаДокумента);
				Если ТекПП.СуммаДокумента <> 0 Тогда
					Попытка
						ТекПП.Записать(РежимЗаписиДокумента.Проведение);
						Сообщить("Сформирован документ "+ТекПП.Ссылка);	
					Исключение
						ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
						///ТекПП.Записать(РежимЗаписиДокумента.Запись);
						//Продолжить;
					КонецПопытки;	
					
				КонецЕсли;	
			КонецЕсли;	
			
			СтруктураНовойПлатёжки = СобратьПлатёжкуПоСтрокеСерверСделки(ТаблицаПлатежейСделки.Индекс(СтрокаДляОбработки));
			
			ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта");
			ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
			
			ТекПП.ОрганизацияПриИзменении(ТекПП.ЭлементыФормы.Организация);
			ТекПП.КонтрагентПриИзменении(ТекПП.ЭлементыФормы.Контрагент);
			ТекПП.ДоговорКонтрагентаПриИзменении(ТекПП.ЭлементыФормы.ДоговорКонтрагента);
			//ТекПП.СтатьяДвиженияДенежныхСредств=СтруктураНовойПлатёжки.СтатьяДвиженияДенежныхСредств ;// а то её меняют в предыдущих обработчиках 
			//ТекПП.СтатьяДвиженияДенежныхСредствБУ =
			//							ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ТекПП.СтатьяДвиженияДенежныхСредств, ТекПП.ВидОперации);
			Если Не ЗначениеЗаполнено(ТекПП.СчетУчетаРасчетовСКонтрагентом) Тогда
				ТекПП.СчетУчетаРасчетовСКонтрагентом= ПредопределенноеЗначение("ПланСчетов.Финансовый.ПрочаяЗадолженность");
			КонецЕсли;
			ТекПП.СчетУчетаРасчетовСКонтрагентомПриИзменении(ТекПП.ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
			ТекПП.УстановитьСчетаУчетаБУ();
			ТекПП.УстановитьСтатьюДДС_БУ_ПоУмолчанию();
			
			//+++АК POZM 2018.04.25 ИП-00018469
			СчетКонтра = ТекПП.ДоговорКонтрагента.БанковскийСчет;
			Если ЗначениеЗаполнено(СчетКонтра) Тогда
				ТекПП.СчетКонтрагента = СчетКонтра;
			КонецЕсли;	
			//---АК POZM 
			
			ТекКонтрагент 	= ТекПП.Контрагент;
			ТекОрганизация 	= ТекПП.Организация;
			ТекАванс        = ТекПП.Аванс;
			ТекСделка		= СтрокаДляОбработки.Сделка;
		КонецЕсли;
		
		НоваяСтрока = ТекПП.СтруктурныеЕдиницы.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница	= СтрокаДляОбработки.СтруктурнаяЕдиница;
		НоваяСтрока.Сделка				= СтрокаДляОбработки.Сделка;
		НоваяСтрока.СтрокаСделки		= СтрокаДляОбработки.УИН_СтрокиЭтапа;
		
		НоваяСтрока.Комплектация		= СтрокаДляОбработки.Комплектация;
		НоваяСтрока.СтрокаКомплектации	= СтрокаДляОбработки.УИН_СтрокиКомплектации;
		НоваяСтрока.ДатаПлатежаПоСделке	= СтрокаДляОбработки.ДатаПлатежаПоДокументу;
		
		Для й = 1 По ДатыТаблицыПлатежейСделки.Количество() Цикл
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
		КонецЦикла;	
		
		ТекПП.СуммаДокумента = ТекПП.СуммаДокумента + НоваяСтрока.Сумма;
		
	КонецЦикла;	
	
	Если НЕ ТекПП = "" Тогда
		ТекПП.СуммаДокументаПриИзменении(ТекПП.ЭлементыФормы.СуммаДокумента);
		Если ТекПП.СуммаДокумента <> 0 Тогда
			Попытка
				ТекПП.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
				//ТекПП.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;	
			Сообщить("Сформирован документ "+ТекПП.Ссылка);	
		КонецЕсли;	
	КонецЕсли;
	ЗаполнитьНаСервереСделки();
КонецПроцедуры

Функция СобратьПлатёжкуПоСтрокеСерверСделки(ИндексСтроки)
	
	ДанныеСтроки = ТаблицаПлатежейСделки.Получить(ИндексСтроки);
	
	//Формируем заявку
	СтруктураПлатёжки = Новый Структура;	
	СтруктураПлатёжки.Вставить("Дата"				, ТекущаяДата());
	//+++АК POZM 2017.12.13 ИП-00017345 
	СтруктураПлатёжки.Вставить("ДоговорКонтрагента", ДанныеСтроки.Договор);
	//---АК POZM 
	//СтруктураПлатёжки.Вставить("ДоговорКонтрагента", ДанныеСтроки.ДоговорКонтрагента);
	СтруктураПлатёжки.Вставить("Контрагент"			, ДанныеСтроки.Контрагент);
	СтруктураПлатёжки.Вставить("Организация"		, ДанныеСтроки.Организация);
	СтруктураПлатёжки.Вставить("Аванс"				, ДанныеСтроки.Аванс);
	Сумма=0;
	Для й = 1 По ДатыТаблицыПлатежейСделки.Количество() Цикл
		Сумма = Сумма + ДанныеСтроки["Дата" + Формат(й, "ЧГ=0")];
	КонецЦикла;	
	СтруктураПлатёжки.Вставить("СуммаДокумента"		, 0);
	//СтруктураПлатёжки.Вставить("ДокументОснование"		, ДанныеСтроки.Сделка);
	//СтруктураПлатёжки.Вставить("УИН_СтрокиОснования"		, ДанныеСтроки.УИН_СтрокиОплат);
	СтруктураПлатёжки.Вставить("СчетБанк"			, ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	//СтруктураПлатёжки.Вставить("СтатьяДвиженияДенежныхСредств"		, ДанныеСтроки.Заявка.СтатьяДДС);
	СтруктураПлатёжки.Вставить("ТорговаяТочка"		, ДанныеСтроки.СтруктурнаяЕдиница);
	//СтруктураПлатёжки.Вставить("ЦФО"		, ДанныеСтроки.Заявка.ЦФО);
	СтруктураПлатёжки.Вставить("ЗаявкаНаРасходованиеСредств", ДанныеСтроки.Сделка);
	СтруктураПлатёжки.Вставить("ВидОперации"		, Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	
	//+++АК LAGP 17.11.29 ИП-00017355
	//СоответствиеЭтаповОплат = Новый Соответствие;
	//СоответствиеЭтаповОплат.Вставить(0, "");
	//СоответствиеЭтаповОплат.Вставить(1, " (этап 1 аванс 20%)");	
	//СоответствиеЭтаповОплат.Вставить(2, " (этап 2 частичная оплата 30%)");
	//СоответствиеЭтаповОплат.Вставить(3, " (этап 3 окончательная оплата 50%)");
	НадписьЭтапПроцент = " (этап " + ДанныеСтроки.ЭтапСделки + "; процент оплаты " + ДанныеСтроки.ПроцентОплаты + "%)";
	//---АК LAGP

	СтруктураПлатёжки.Вставить("НазначениеПлатежа"	, "Оплата по счету № " + ДанныеСтроки.Сделка.НомерДокументаПоставщика + " от " +
	Формат(ДанныеСтроки.Сделка.ДатаДокументаПоставщика, "ДФ=dd.MM.yyyy") +
	" за оборудование по объектам" + НадписьЭтапПроцент);  //+++АК LAGP 17.11.29 ИП-00017355 Добавлена а затем убрана работа с соответсвием этапов сделки
	СтруктураПлатёжки.Вставить("ОчередностьПлатежа"	, 5);
	
	//+++АК pozm ИП-00016666 08.10.2017
	СтруктураПлатёжки.Вставить("ПлановаяДатаПоступления", 	ДанныеСтроки.ДатаГотовностиПлан);
	//---АК pozm ИП-00016666 08.10.2017
	
	//+++АК POZM 2018.03.16 ИП-00018101 
	СтруктураПлатёжки.Вставить("ДоговорКонтрагентаПоРасчетамФК", ?(ЗначениеЗаполнено(ДанныеСтроки.Сделка.Договор.ФакторинговаяКомпанияДоговор),ДанныеСтроки.Сделка.Договор,Неопределено));
	//---АК POZM 
	Возврат СтруктураПлатёжки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСводныеСуммыПомеченногоСделки()
	
	Таб = РеквизитФормыВЗначение("СводныеСуммыКОплатеПомеченныеСделки");
	Таб.Очистить();
	
	СтрокиДляОбработки = ТаблицаПлатежейСделки.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		Если СтрокаДляОбработки.Пометка Тогда
			НС=Таб.Добавить();
			НС.Организация = СтрокаДляОбработки.Организация;
			Сумма = 0;
			Для й = 1 По ДатыТаблицыПлатежейСделки.Количество() Цикл
				Сумма = Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
			КонецЦикла;	
			
			НС.Сумма = Сумма;
			НС.Документов = 1;
		КонецЕсли;	
	КонецЦикла;	
	Таб.Свернуть("Организация", "Сумма,Документов");
	
	ЗначениеВРеквизитФормы(Таб, "СводныеСуммыКОплатеПомеченныеСделки");
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаПлатежейСделкиПометкаПриИзменении(Элемент)
	
	ЗаполнитьСводныеСуммыПомеченногоСделки();
	
КонецПроцедуры

&НаКлиенте
Процедура Группа4ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Если ТекущаяСтраница.Имя = "Группа6" Тогда
	//	Элементы.ТаблицаПлатежей.Видимость = Ложь;
	//Иначе
	//	Элементы.ТаблицаПлатежей.Видимость = Истина;
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДЗ(Команда)
	
	ПараметрыФормы = Новый Структура("СписокДокументов",МассивДокументовСервер() );
	ОткрытьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ", ПараметрыФормы, , );
КонецПроцедуры

&НаСервере 
Функция МассивДокументовСервер()
	ТП = РеквизитФормыВЗначение("ТаблицаПлатежей");
	Таб = ТП.скопировать(Новый Структура("Пометка",Истина));
	Возврат Таб.ВыгрузитьКолонку("Заявка");
КОнецфункции	

&НаКлиенте
Процедура ЗаявкиСНепроведеннымиПлатёжками(Команда)
	Парам = Новый Структура;
	Парам.Вставить("СформироватьПриОткрытии",Истина);
	ОткрытьФорму("Отчет.ЗаявкиСНепроведеннымиРасходамиБанка.Форма.ФормаОтчета",Парам);
КонецПроцедуры

//+++АК POZM 2018.02.04 ИП-00017682
Процедура КоличествоЗаявокСНепроведеннымиПлатёжками()
	ДанныеРасшифровкиДляДокумента = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакетаДляДокумента = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанныхДляДокумента = Отчеты.ЗаявкиСНепроведеннымиРасходамиБанка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
	КомпоновщикНастроекДляДокумента = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДляДокумента.ЗагрузитьНастройки(СхемаКомпоновкиДанныхДляДокумента.ВариантыНастроек.ДляПодсчетаВКалендарь.Настройки);
	
	НастройкиДляДокумента = КомпоновщикНастроекДляДокумента.ПолучитьНастройки();
	
	МакетКомпоновкиДляДокумента = КомпоновщикМакетаДляДокумента.Выполнить(СхемаКомпоновкиДанныхДляДокумента, НастройкиДляДокумента, ДанныеРасшифровкиДляДокумента, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновкиДляДокумента = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДляДокумента.Инициализировать(МакетКомпоновкиДляДокумента,,ДанныеРасшифровкиДляДокумента,Истина);
	ПроцессорВыводаДляДокумента = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВыводаДляДокумента.УстановитьОбъект(ТЗ);
	ПроцессорВыводаДляДокумента.Вывести(ПроцессорКомпоновкиДляДокумента);
    Элементы.ЗаявкиСНепроведеннымиПлатёжками.Заголовок = "Заявки с непроведенными платёжками("+ТЗ.Количество()+" шт.)";
КонецПроцедуры	
//---АК POZM 

//+++АК LAGP 2018.09.03 ИП-00019695 Отбор хранится во временном хранилище
&НаКлиенте
Процедура ОтборСтопОплат(Команда)
	
	Пометка = Элементы.ТаблицаПлатежей.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаПлатежейОтборСтопОплат.Пометка;
	Элементы.ТаблицаПлатежей.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаПлатежейОтборСтопОплат.Пометка = НЕ Пометка;
	
	ОтборТаблицы = ПолучитьИзВременногоХранилища(АдресОтбора);
	Если ТипЗнч(ОтборТаблицы) = Тип("Структура") Тогда
		ОтборТаблицы.Вставить("СтопОплата", НЕ Пометка);
		УдалитьИзВременногоХранилища(АдресОтбора);
	Иначе
		ОтборТаблицы = Новый Структура;
		ОтборТаблицы.Вставить("СтопОплата", НЕ Пометка);
	КонецЕсли;	
		
	АдресОтбора = ПоместитьВоВременноеХранилище(ОтборТаблицы);
	
	СнятьФлажки(Истина);
	ОтобратьСтрокиТаблицы();
	                                   
КонецПроцедуры

//+++АК LAGP 2018.09.03 ИП-00019695
&НаСервере
Процедура ОтобратьСтрокиТаблицы() 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&ТаблицаИсточник КАК ТаблицаИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|ИЗ
		|ВременнаяТаблица КАК ВременнаяТаблица";
	
	ТаблицаИсточник = ДанныеФормыВЗначение(ТаблицаПлатежейВспомогательная, Тип("ТаблицаЗначений")); //Неизменяемая таблица источник. Заполняется по нажатию кнопки "Заполнить".
	
	//Собирание запроса с условием динамических колонок
	Для каждого Колонка Из ТаблицаИсточник.Колонки Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВременнаяТаблица", "ТаблицаИсточник." + Колонка.Имя + "," + Символы.ПС + "ПОМЕСТИТЬ ВременнаяТаблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЗ" + Символы.ПС + "ВременнаяТаблица КАК ВременнаяТаблица", "ВременнаяТаблица." + Колонка.Имя + "," + Символы.ПС + "ИЗ" + Символы.ПС + "ВременнаяТаблица КАК ВременнаяТаблица");
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "," + Символы.ПС + "ПОМЕСТИТЬ ВременнаяТаблица", Символы.ПС + "ПОМЕСТИТЬ ВременнаяТаблица");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "," + Символы.ПС + "ИЗ" + Символы.ПС + "ВременнаяТаблица КАК ВременнаяТаблица", Символы.ПС + "ИЗ" + Символы.ПС + "ВременнаяТаблица КАК ВременнаяТаблица");

	Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточник);	
	
	//Установка отбора в запросе по значению структуры из временного хранилища
	ОтборТаблицы = ПолучитьИзВременногоХранилища(АдресОтбора);
	
	Если ТипЗнч(ОтборТаблицы) = Тип("Структура") И ОтборТаблицы.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ";
		Для каждого СтрокаУсловия Из ОтборТаблицы Цикл
			Запрос.Текст = Запрос.Текст + Символы.ПС + "ВременнаяТаблица." + СтрокаУсловия.Ключ + " = &" + СтрокаУсловия.Ключ + " И ";
			Запрос.УстановитьПараметр(СтрокаУсловия.Ключ, СтрокаУсловия.Значение);
		КонецЦикла;	
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 3);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//Подменяем основную таблицу таблицу
	ТаблицаПлатежей.Загрузить(РезультатЗапроса);
	
КонецПроцедуры	

//+++АК LAGP 2018.09.03 ИП-00019695 Блок служит для работы отбора по выделенному значению.
&НаКлиенте
Процедура ОтборПоЗначению(Команда)
	
	//Элементы.ТаблицаПлатежей.ТекущийЭлемент.Имя = "ТаблицаПлатежейКонтрагент";			//Ключ
	//Элементы.ТаблицаПлатежей.ТекущиеДанные[Элементы.ТаблицаПлатежей.ТекущийЭлемент.Имя]   //Значение
	НазваниеКлюча = ?(Найти(Элементы.ТаблицаПлатежей.ТекущийЭлемент.Имя, "ТаблицаПлатежей") > 0, Прав(Элементы.ТаблицаПлатежей.ТекущийЭлемент.Имя, СтрДлина(Элементы.ТаблицаПлатежей.ТекущийЭлемент.Имя) - 15), "");
	
	//Названия колонок отличаются
	НазваниеКлюча = ?(НазваниеКлюча = "Сделка", "Заявка", НазваниеКлюча);
	НазваниеКлюча = ?(НазваниеКлюча = "ЗаявкаСтатьяДДС", "СтатьяДДС", НазваниеКлюча);		
	
	Если ТаблицаПлатежей.Количество() > 0 И ЗначениеЗаполнено(НазваниеКлюча) И НЕ НазваниеКлюча = "НазначениеПлатежа" Тогда //При пустой таблице или значении поля неограниченной длины возникнет ошибка.
		ОтборТаблицы = ПолучитьИзВременногоХранилища(АдресОтбора);
		Если ТипЗнч(ОтборТаблицы) = Тип("Структура") Тогда
			УдалитьИзВременногоХранилища(АдресОтбора);
		Иначе
			ОтборТаблицы = Новый Структура;
		КонецЕсли;
		
		ОтборТаблицы.Вставить(НазваниеКлюча, Элементы.ТаблицаПлатежей.ТекущиеДанные[НазваниеКлюча]);
		АдресОтбора = ПоместитьВоВременноеХранилище(ОтборТаблицы);
		СнятьФлажки(Истина);
		ОтобратьСтрокиТаблицы();
	КонецЕсли;	
	
КонецПроцедуры

//+++АК LAGP 2018.09.03 ИП-00019695 Очистка структуры отбора и обновление таблицы
&НаКлиенте
Процедура ОтборПоЗначениюОтменить(Команда)
	
	СтруктураОтбора = Новый Структура;
	УдалитьИзВременногоХранилища(АдресОтбора);
	АдресОтбора = ПоместитьВоВременноеХранилище(СтруктураОтбора);
	СнятьФлажки(Истина);
	ОтобратьСтрокиТаблицы();
	
КонецПроцедуры

//+++АК LAGP 2018.09.04 ИП-00019695 Создание первоначального адреса структуры отбора
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураОтбора = Новый Структура;
	АдресОтбора = ПоместитьВоВременноеХранилище(СтруктураОтбора);
	
КонецПроцедуры

//+++АК LAGP 2018.09.04 ИП-00019695 Очистка временного хранилища
&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(АдресОтбора) Тогда
		УдалитьИзВременногоХранилища(АдресОтбора);	
	КонецЕсли;	
	
КонецПроцедуры

// {{ AK SAM 13.12.2018 ИП-00020590
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхНДСНаСервере(ЗаявкаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.СтавкаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.СуммаНДС
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтавкаНДС = Неопределено;
	СуммаНДС = 0;
	ЗначениеСтавкиНДС = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаНДС = СуммаНДС + Выборка.СуммаНДС;
		пЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС);
		Если СтавкаНДС = Неопределено Или ЗначениеСтавкиНДС < пЗначениеСтавкиНДС Тогда
			СтавкаНДС = Выборка.СтавкаНДС;
			ЗначениеСтавкиНДС = пЗначениеСтавкиНДС;
		КонецЕсли;
	КонецЦикла;
	
	Если СтавкаНДС =  Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("СтавкаНДС,СуммаНДС",СтавкаНДС,СуммаНДС);
	КонецЕсли;
КонецФункции
// AK SAM 13.12.2018 ИП-00020590 }}