
Процедура ЗаполнитьНаСервере()
	
	УдалитьДобавленныеКолонки();
	
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	РасчетыПоСделкамСПоставщикамиОстатки.Сделка КАК Сделка,
	//			 |	РасчетыПоСделкамСПоставщикамиОстатки.СуммаОстаток,
	//			 |	СделкаСПоставщикомГрафикОплат.ДатаПлатежа КАК ДатаПлатежаПоДокументу,
	//			 |	СделкаСПоставщикомГрафикОплат.Номенклатура КАК Номенклатура,
	//			 |	СделкаСПоставщикомГрафикОплат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//			 |	ВЫБОР
	//			 |		КОГДА СделкаСПоставщикомГрафикОплат.ДатаПлатежа > &НаДату
	//			 |			ТОГДА СделкаСПоставщикомГрафикОплат.ДатаПлатежа
	//			 |		ИНАЧЕ &НаДату
	//			 |	КОНЕЦ КАК ДатаПлатежа,
	//			 |	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика КАК ЭтапСделки,
	//			 |	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент КАК Контрагент,
	//			 |	СделкаСПоставщикомГрафикОплат.УИН_ПервойСтроки,
	//			 |	СделкаСПоставщикомГрафикОплат.УИН_Строки,
	//			 |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	//			 |ИЗ
	//			 |	РегистрНакопления.РасчетыПоСделкамСПоставщиками.Остатки(&НаДату, ) КАК РасчетыПоСделкамСПоставщикамиОстатки
	//			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//			 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&НаДату, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	//			 |			ПО СделкаСПоставщикомГрафикОплат.СтруктурнаяЕдиница = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	//			 |		ПО РасчетыПоСделкамСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	//			 |			И РасчетыПоСделкамСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	//			 |ГДЕ
	//			 |	СделкаСПоставщикомГрафикОплат.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	//			 |
	//			 |УПОРЯДОЧИТЬ ПО
	//			 |	Организация,
	//			 |	Контрагент,
	//			 |	СтруктурнаяЕдиница,
	//			 |	Номенклатура,
	//			 |	Сделка,
	//			 |	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика";
	
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	РасчетыПоСделкамСПоставщикамиОстатки.Сделка КАК Сделка,
	//			 |	ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.СуммаОплаты, РасчетыПоСделкамСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОплаты,
	//			 |	ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.ДатаПлатежа, СделкаСПоставщикомГрафикОплат.ДатаПлатежа) КАК ДатаПлатежаПоДокументу,
	//			 |	СделкаСПоставщикомГрафикОплат.Номенклатура КАК Номенклатура,
	//			 |	ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.Ссылка.Магазин, СделкаСПоставщикомГрафикОплат.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница,
	//			 |	ВЫБОР
	//			 |		КОГДА ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.ДатаПлатежа, СделкаСПоставщикомГрафикОплат.ДатаПлатежа) > &НаДату
	//			 |			ТОГДА ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.ДатаПлатежа, СделкаСПоставщикомГрафикОплат.ДатаПлатежа)
	//			 |		ИНАЧЕ &НаДату
	//			 |	КОНЕЦ КАК ДатаПлатежа,
	//			 |	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика КАК ЭтапСделки,
	//			 |	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент КАК Контрагент,
	//			 |	СделкаСПоставщикомГрафикОплат.УИН_ПервойСтроки,
	//			 |	СделкаСПоставщикомГрафикОплат.УИН_Строки,
	//			 |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.Ссылка КАК Комплектация
	//			 |ИЗ
	//			 |	РегистрНакопления.РасчетыПоСделкамСПоставщиками.Остатки(&НаДату, ) КАК РасчетыПоСделкамСПоставщикамиОстатки
	//			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//			 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&НаДату, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	//			 |			ПО СделкаСПоставщикомГрафикОплат.СтруктурнаяЕдиница = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	//			 |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УточненияПоДатамПлатежа КАК КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа
	//			 |			ПО СделкаСПоставщикомГрафикОплат.УИН_Строки = КомплектацияМагазинаПоСделкамСПоставщикомУточненияПоДатамПлатежа.УИН_СтрокиСделки
	//			 |		ПО РасчетыПоСделкамСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	//			 |			И РасчетыПоСделкамСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	//			 |ГДЕ
	//			 |	СделкаСПоставщикомГрафикОплат.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	//			 |
	//			 |УПОРЯДОЧИТЬ ПО
	//			 |	Организация,
	//			 |	Контрагент,
	//			 |	СтруктурнаяЕдиница,
	//			 |	Номенклатура,
	//			 |	Сделка,
	//			 |	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", ДатаОбработки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоСделкамСПоставщикамиОстатки.Сделка КАК Сделка,
	|	РасчетыПоСделкамСПоставщикамиОстатки.СуммаОстаток,
	|	РасчетыПоСделкамСПоставщикамиОстатки.ДатаПлатежа КАК ДатаПлатежаПоДокументу,
	|	СделкаСПоставщикомГрафикОплат.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин, СделкаСПоставщикомГрафикОплат.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА РасчетыПоСделкамСПоставщикамиОстатки.ДатаПлатежа > &НаДату
	|				ИЛИ СделкаСПоставщикомГрафикОплат.Ссылка.ПроизвольныеПлатежи
	|			ТОГДА РасчетыПоСделкамСПоставщикамиОстатки.ДатаПлатежа
	|		ИНАЧЕ &НаДату
	|	КОНЕЦ КАК ДатаПлатежа,
	|	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика КАК ЭтапСделки,
	|	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент КАК Контрагент,
	|	СделкаСПоставщикомГрафикОплат.УИН_ПервойСтроки,
	|	СделкаСПоставщикомГрафикОплат.УИН_Строки,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.АктПодписан,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.ПлановыйСрокНачалаМонтажа,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_Строки КАК УИН_СтрокиКомплектации
	|ИЗ
	|	РегистрНакопления.РасчетыПоСделкамСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ) КАК РасчетыПоСделкамСПоставщикамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	|		ПО РасчетыПоСделкамСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	|			И РасчетыПоСделкамСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&НаДату, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|			ПО КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ПО РасчетыПоСделкамСПоставщикамиОстатки.Комплектация = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка
	|			И РасчетыПоСделкамСПоставщикамиОстатки.УИН_СтрокиКомплектации = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_Строки
	|			И РасчетыПоСделкамСПоставщикамиОстатки.Сделка = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка
	|ГДЕ
	|	(РасчетыПоСделкамСПоставщикамиОстатки.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РасчетыПоСделкамСПоставщикамиОстатки.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|				И СделкаСПоставщикомГрафикОплат.Ссылка.ПроизвольныеПлатежи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	СтруктурнаяЕдиница,
	|	Номенклатура,
	|	Сделка,
	|	СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика";

	ТЗПлатежей = Запрос.Выполнить().Выгрузить();
	
	ТЗДат = ТЗПлатежей.Скопировать(,"ДатаПлатежа");
	ТЗДат.Свернуть("ДатаПлатежа");
	ТЗДат.Сортировать("ДатаПлатежа");
	ЗначениеВРеквизитФормы(ТЗДат, "ДатыТаблицыПлатежей");
	
	МассивРеквизитов = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерКолСтр = Формат(Номер, "ЧГ=0");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата" + НомерКолСтр, Новый ОписаниеТипов("Число"), "ТаблицаПлатежей"));
		Номер = Номер + 1;
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов); 
	
	Номер = 1;
	Для Каждого ТекДата Из ТЗДат Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
						
      	НовыйЭлемент = Элементы.Добавить("ТаблицаПлатежейДата" + НомерСтр, Тип("ПолеФормы"), Элементы.ТаблицаПлатежей); 
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ТаблицаПлатежей.Дата" + НомерСтр;
		Если ТекДата.ДатаПлатежа = Дата(1, 1, 1) Тогда
			НовыйЭлемент.Заголовок 	= "Произвольные платежи";
		Иначе	
			НовыйЭлемент.Заголовок 	= Формат(ТекДата.ДатаПлатежа, "ДФ=dd.MM.yy");
		КонецЕсли;	
		
		Номер = Номер + 1;
	КонецЦикла;

	ТабПлатежей = РеквизитФормыВЗначение("ТаблицаПлатежей");
	Для каждого Стр Из ТЗПлатежей Цикл
		НоваяСтрока = ТабПлатежей.Добавить();
		НоваяСтрока.Номенклатура			= Стр.Номенклатура;
		НоваяСтрока.Сделка					= Стр.Сделка;
		НоваяСтрока.ЭтапСделки				= Стр.ЭтапСделки;
		НоваяСтрока.СтруктурнаяЕдиница		= Стр.СтруктурнаяЕдиница;
		НоваяСтрока.Контрагент				= Стр.Контрагент;
		НоваяСтрока.Организация				= Стр.Организация;
		НоваяСтрока.ПлатёжПросрочен			= (Стр.ДатаПлатежа > Стр.ДатаПлатежаПоДокументу);
		НоваяСтрока.Пометка					= (Стр.ДатаПлатежа = ДатаОбработки);
		НоваяСтрока.УИН_СтрокиЭтапа			= Стр.УИН_Строки;
		НоваяСтрока.УИН_ПервойСтроки		= Стр.УИН_ПервойСтроки;
		НоваяСтрока.Комплектация			= Стр.Комплектация;
		НоваяСтрока.УИН_СтрокиКомплектации 	= Стр.УИН_СтрокиКомплектации;
		НоваяСтрока["Дата" + НомерКолоникиПоДате(Стр.ДатаПлатежа)] = Стр.СуммаОстаток;  
		НоваяСтрока.ДатаПлатежаПоДокументу 	= Стр.ДатаПлатежаПоДокументу;
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ТабПлатежей, "ТаблицаПлатежей");
	
	//УсловноеОформление
	Для Каждого ТекДата Из ТЗДат Цикл
		НомерСтр = Формат(Номер, "ЧГ=0");
		
		//Красным если просрочен
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПлатежейДата1");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
																"ТаблицаПлатежей.ПлатёжПросрочен", ВидСравненияКомпоновкиДанных.Равно, Истина);	
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДобавленныеКолонки()
	
	МассивКУдалению = Новый Массив;
	Номер = 1;
	Для Каждого ТекДата Из ДатыТаблицыПлатежей Цикл
		
		НомерСтр = Формат(Номер, "ЧГ=0");
		Эл = Элементы.Найти("ТаблицаПлатежейДата" + НомерСтр);
		Если НЕ Эл = Неопределено Тогда
			Элементы.Удалить(Эл);            
		КонецЕсли;
		
		МассивКУдалению.Добавить("ТаблицаПлатежей.Дата" + НомерСтр);
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивКУдалению);  
	
	ТаблицаПлатежей.Очистить();
	ДатыТаблицыПлатежей.Очистить();
	
	Кол = УсловноеОформление.Элементы.Количество();
	Для й = 1 По Кол Цикл
		УсловноеОформление.Элементы.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере 
Функция НомерКолоникиПоДате(Дата)
	
	СтрокиДат = ДатыТаблицыПлатежей.НайтиСтроки(Новый Структура("ДатаПлатежа", Дата));
	
	Возврат Формат(ДатыТаблицыПлатежей.Индекс(СтрокиДат[0]) + 1, "ЧГ=0");
	
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаОбработки = ТекущаяДата();
	
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("УИН_СтрокиСделки","");
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("Сделка",Неопределено);
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("НаДату",ДатаОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлатежейПриАктивизацииСтроки(Элемент)
	//ПодключитьОбработчикОжидания("УстановитьФильтрыВЗависимыхСписках",0.1,Истина);
	//ПодключитьОбработчикОжидания("ОбновитьЕстьКомплектация",1,Истина);
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьФильтрыВЗависимыхСписках()
	
	ТекущиеДанные = Элементы.ТаблицаПлатежей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		УстановитьФильтрыВЗависимыхСпискахСервер(ТекущиеДанные.УИН_ПервойСтроки, ТекущиеДанные.Сделка);
	КонецЕсли;
	
КонецПроцедуры	

//&НаКлиенте 
//Процедура ОбновитьЕстьКомплектация()
//	ТекущиеДанные=Элементы.ТаблицаПлатежей.ТекущиеДанные;
//	Если ТекущиеДанные<>Неопределено Тогда
//		ТекущиеДанные.ЕстьКомплектации= Элементы.ТабКомплектаций.ТекущиеДанные<>Неопределено;
//	КонецЕсли;	
//КонецПроцедуры	

&НаСервере
Процедура УстановитьФильтрыВЗависимыхСпискахСервер(УИН,Сделка)
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("УИН_СтрокиСделки",УИН);
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("Сделка",Сделка);
КонецПроцедуры	

Функция СобратьЗаявкуПоСтрокеСервер(ИндексСтроки)
	
	ДанныеСтроки = ТаблицаПлатежей.Получить(ИндексСтроки);
	
	//Формируем заявку
	СтруктураЗаявки = Новый Структура;	
	СтруктураЗаявки.Вставить("Дата"				, ТекущаяДата());
	СтруктураЗаявки.Вставить("ФормаОплаты"		, Перечисления.ФормыОплаты.Безналичные);
	СтруктураЗаявки.Вставить("Контрагент"		, ДанныеСтроки.Контрагент);
	СтруктураЗаявки.Вставить("Организация"		, ДанныеСтроки.Организация);
	СтруктураЗаявки.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	СтруктураЗаявки.Вставить("Статус"			, Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована);
	СтруктураЗаявки.Вставить("ИнициаторЗаявки"	, ДанныеСтроки.Комплектация.Ответственный.ФизЛицо);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявкиНаРасходованиеСредств(Команда)
	
	ТекКонтрагент	= "";
	ТекОрганизация	= "";
	ТекЗаявка		= "";
	
	//
	СтрокиДляОбработки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		
		Если (НЕ СтрокаДляОбработки.Контрагент = ТекКонтрагент)
				ИЛИ НЕ СтрокаДляОбработки.Организация = ТекОрганизация Тогда
			
			Если НЕ ТекЗаявка = "" Тогда
				ТекЗаявка.Открыть();
			КонецЕсли;	
			СтруктураНовойЗаявки = СобратьЗаявкуПоСтрокеСервер(ТаблицаПлатежей.Индекс(СтрокаДляОбработки));
			
			ТекЗаявка = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаОбъекта");
			ЗаполнитьЗначенияСвойств(ТекЗаявка, СтруктураНовойЗаявки);
			
			ТекЗаявка.ОрганизацияПриИзменении(ТекЗаявка.ЭлементыФормы.Организация);
			ТекЗаявка.КонтрагентПриИзменении(ТекЗаявка.ЭлементыФормы.Контрагент);
			
			ТекКонтрагент 	= ТекЗаявка.Контрагент;
			ТекОрганизация 	= ТекЗаявка.Организация;
			
		КонецЕсли;
		
		НоваяСтрока = ТекЗаявка.ТорговыеТочки.Добавить();
		НоваяСтрока.ДатаАкцепта			= ТекущаяДата();
		НоваяСтрока.ТорговаяТочка		= СтрокаДляОбработки.СтруктурнаяЕдиница;
		НоваяСтрока.Сделка				= СтрокаДляОбработки.Сделка;
		НоваяСтрока.Статус				= СтруктураНовойЗаявки.Статус;
		НоваяСтрока.СтрокаСделки		= СтрокаДляОбработки.УИН_СтрокиЭтапа;
		
		НоваяСтрока.Комплектация		= СтрокаДляОбработки.Комплектация;
		НоваяСтрока.СтрокаКомплектации	= СтрокаДляОбработки.УИН_СтрокиКомплектации;
		НоваяСтрока.ДатаПлатежаПоСделке	= СтрокаДляОбработки.ДатаПлатежаПоДокументу;
		НоваяСтрока.Период				= НачалоМесяца(ТекущаяДата());
		
		Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
		КонецЦикла;	

		ТекЗаявка.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НоваяСтрока;
		ТекЗаявка.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
        ТекЗаявка.СуммаДокумента = ТекЗаявка.СуммаДокумента + НоваяСтрока.Сумма;
		
	КонецЦикла;	
	
	Если НЕ ТекЗаявка = "" Тогда
		ТекЗаявка.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговуюТаблицуДляФормированияЗаявок()
	//СтрокиДляОбработки=ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка",Истина));
	//
	//ТЗ=РеквизитФормыВЗначение("ИтоговаяТаблицаДляФормированияЗаявок");
	//ТЗ.Очистить();
	//Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
	//	СтруктураПоиска=Новый Структура;
	//	СтруктураПоиска.Вставить("Сделка",СтрокаДляОбработки.Сделка);
	//	СтруктураПоиска.Вставить("УИН_ПервойСтроки",СтрокаДляОбработки.УИН_ПервойСтроки);
	//	СтрокиКомплектации=ТаблицаКомплектацийДляФормированияЗаявок.НайтиСтроки(СтруктураПоиска);
	//	Если СтрокиКомплектации.Количество()=0 Тогда // комплектаций нет
	//		НС=ТЗ.Добавить();
	//		ЗаполнитьЗначенияСвойств(НС,СтрокаДляОбработки,"Организация,Контрагент,Сделка,СтруктурнаяЕдиница");
	//		НС.СтрокаСделки=СтрокаДляОбработки.УИН_СтрокиЭтапа;
	//		Для й=1 По ДатыТаблицыПлатежей.Количество() Цикл
	//			НС.Сумма=НС.Сумма+СтрокаДляОбработки["Дата"+Формат(й,"ЧГ=0")] ;
	//		КонецЦикла;	
	//	Иначе //есть комплектации
	//		СуммаКОплате=0;
	//		Для й=1 По ДатыТаблицыПлатежей.Количество() Цикл
	//			СуммаКОплате=СуммаКОплате+СтрокаДляОбработки["Дата"+Формат(й,"ЧГ=0")] ;
	//		КонецЦикла;	
	//		Распределено=0;
	//		Для каждого СтрокаКомплектации Из СтрокиКомплектации Цикл
	//			НС=ТЗ.Добавить();
	//			ЗаполнитьЗначенияСвойств(НС,СтрокаКомплектации,"Организация,Сделка,Контрагент,СтруктурнаяЕдиница");
	//			НС.СтрокаСделки=СтрокаДляОбработки.УИН_СтрокиЭтапа;
	//			НС.Сумма=СуммаКОплате*СтрокаКомплектации.Количество/СтрокаКомплектации.КоличествоВсего;
	//			Распределено=Распределено+НС.Сумма;
	//		КонецЦикла;	
	//		НС.Сумма=НС.Сумма+(СуммаКОплате-Распределено);
	//	КонецЕсли;	
	//КонецЦикла;	
	//ТЗ.Сортировать("Организация,Контрагент,СтруктурнаяЕдиница");
	//ЗначениеВРеквизитФормы(ТЗ,"ИтоговаяТаблицаДляФормированияЗаявок");
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуКомплектацийДляФормированияЗаявок()
	
	СтрокиДляОбработки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка", Истина));
	СписокСделок	= Новый СписокЗначений;
	СписокУинов		= Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из СтрокиДляОбработки Цикл
		СписокСделок.Добавить(СтрокаТаблицы.Сделка);
		СписокУинов.Добавить(СтрокаТаблицы.УИН_ПервойСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("НаДату"			, ДатаОбработки);
	Запрос.УстановитьПараметр("Сделки"			, СписокСделок);
	Запрос.УстановитьПараметр("УИНы_СтрокСделок", СписокУинов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки КАК УИН_ПервойСтроки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Количество,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Номенклатура,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.НомерСтроки КАК НомерСтрокиКомплектации,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин КАК СтруктурнаяЕдиница,
	|	СделкаСПоставщикомГрафикОплат.Количество КАК КоличествоВсего,
	|	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&НаДату, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки = СделкаСПоставщикомГрафикОплат.УИН_Строки
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка В(&Сделки)
	|	И КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки В(&УИНы_СтрокСделок)";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаКомплектацийДляФормированияЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбработкиПриИзменении(Элемент)
	//ТабКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("НаДату",ДатаОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеДокументы(Команда)
	ТекКонтрагент	= "";
	ТекОрганизация	= "";
	ТекПП			= "";
	
	//
	СтрокиДляОбработки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		
		Если (НЕ СтрокаДляОбработки.Контрагент = ТекКонтрагент)
				ИЛИ НЕ СтрокаДляОбработки.Организация = ТекОрганизация Тогда
			Если НЕ ТекПП = "" Тогда
					ТекПП.СуммаДокументаПриИзменении(ТекПП.ЭлементыФормы.СуммаДокумента);
					Попытка
						ТекПП.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
						ТекПП.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;	
					Сообщить("Сформирован документ "+ТекПП.Ссылка);	
			КонецЕсли;	
			
			СтруктураНовойПлатёжки = СобратьПлатёжкуПоСтрокеСервер(ТаблицаПлатежей.Индекс(СтрокаДляОбработки));
		
			ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта");
			ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
			
			ТекПП.ОрганизацияПриИзменении(ТекПП.ЭлементыФормы.Организация);
			ТекПП.КонтрагентПриИзменении(ТекПП.ЭлементыФормы.Контрагент);
			ТекПП.ДоговорКонтрагентаПриИзменении(ТекПП.ЭлементыФормы.ДоговорКонтрагента);
			//ТекПП.СтатьяДвиженияДенежныхСредств=СтруктураНовойПлатёжки.СтатьяДвиженияДенежныхСредств ;// а то её меняют в предыдущих обработчиках 
			//ТекПП.СтатьяДвиженияДенежныхСредствБУ =
			//							ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ТекПП.СтатьяДвиженияДенежныхСредств, ТекПП.ВидОперации);
			Если Не ЗначениеЗаполнено(ТекПП.СчетУчетаРасчетовСКонтрагентом) Тогда
				ТекПП.СчетУчетаРасчетовСКонтрагентом= ПредопределенноеЗначение("ПланСчетов.Финансовый.РасчетыСПоставщикамиОборудования");
			КонецЕсли;
			ТекПП.СчетУчетаРасчетовСКонтрагентомПриИзменении(ТекПП.ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
			ТекПП.УстановитьСчетаУчетаБУ();
			ТекПП.УстановитьСтатьюДДС_БУ_ПоУмолчанию();
			
			ТекКонтрагент 	= ТекПП.Контрагент;
			ТекОрганизация 	= ТекПП.Организация;
			
		КонецЕсли;
		
		НоваяСтрока = ТекПП.СтруктурныеЕдиницы.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница	= СтрокаДляОбработки.СтруктурнаяЕдиница;
		НоваяСтрока.Сделка				= СтрокаДляОбработки.Сделка;
		НоваяСтрока.СтрокаСделки		= СтрокаДляОбработки.УИН_СтрокиЭтапа;
		
		НоваяСтрока.Комплектация		= СтрокаДляОбработки.Комплектация;
		НоваяСтрока.СтрокаКомплектации	= СтрокаДляОбработки.УИН_СтрокиКомплектации;
		НоваяСтрока.ДатаПлатежаПоСделке	= СтрокаДляОбработки.ДатаПлатежаПоДокументу;
				
		Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаДляОбработки["Дата" + Формат(й, "ЧГ=0")];
		КонецЦикла;	

        ТекПП.СуммаДокумента = ТекПП.СуммаДокумента + НоваяСтрока.Сумма;
		
	КонецЦикла;	
	
	Если НЕ ТекПП = "" Тогда
		ТекПП.СуммаДокументаПриИзменении(ТекПП.ЭлементыФормы.СуммаДокумента);
		Попытка
			ТекПП.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
			ТекПП.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;	
		Сообщить("Сформирован документ "+ТекПП.Ссылка);	
	КонецЕсли;

КонецПроцедуры

Функция СобратьПлатёжкуПоСтрокеСервер(ИндексСтроки)
	
	ДанныеСтроки = ТаблицаПлатежей.Получить(ИндексСтроки);
	
	//Формируем заявку
	СтруктураПлатёжки = Новый Структура;	
	СтруктураПлатёжки.Вставить("Дата"				, ТекущаяДата());
	//СтруктураПлатёжки.Вставить("ДоговорКонтрагента", ДанныеСтроки.ДоговорКонтрагента);
	СтруктураПлатёжки.Вставить("Контрагент"		, ДанныеСтроки.Контрагент);
	СтруктураПлатёжки.Вставить("Организация"		, ДанныеСтроки.Организация);
	Сумма=0;
	Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
		Сумма = Сумма + ДанныеСтроки["Дата" + Формат(й, "ЧГ=0")];
	КонецЦикла;	
	СтруктураПлатёжки.Вставить("СуммаДокумента"		, 0);
	//СтруктураПлатёжки.Вставить("ДокументОснование"		, ДанныеСтроки.Сделка);
	//СтруктураПлатёжки.Вставить("УИН_СтрокиОснования"		, ДанныеСтроки.УИН_СтрокиОплат);
	СтруктураПлатёжки.Вставить("СчетБанк"		, ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	//СтруктураПлатёжки.Вставить("СтатьяДвиженияДенежныхСредств"		, ДанныеСтроки.Заявка.СтатьяДДС);
	СтруктураПлатёжки.Вставить("ТорговаяТочка"		, ДанныеСтроки.СтруктурнаяЕдиница);
	//СтруктураПлатёжки.Вставить("ЦФО"		, ДанныеСтроки.Заявка.ЦФО);
	СтруктураПлатёжки.Вставить("ЗаявкаНаРасходованиеСредств", ДанныеСтроки.Сделка);
	СтруктураПлатёжки.Вставить("ВидОперации",Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	СтруктураПлатёжки.Вставить("НазначениеПлатежа","Оплата по счету № "+ДанныеСтроки.Сделка.НомерДокументаПоставщика+" от "+Формат(ДанныеСтроки.Сделка.ДатаДокументаПоставщика,"ДФ=dd.MM.yyyy")+" за оборудование по объектам" );
	СтруктураПлатёжки.Вставить("ОчередностьПлатежа",5);
		
	Возврат СтруктураПлатёжки;
	
КонецФункции

