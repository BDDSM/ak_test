#Область АК_ОтключенныйКод
Функция ПолучитьСтруктуруВодитель(ТекМаршрут)
	
	СтруктураВодитель = Новый Структура("Водитель, Автомобиль");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут", ТекМаршрут);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВодителиПоМаршрутуСрезПоследних.Водитель,
	|	ВодителиПоМаршрутуСрезПоследних.Автомобиль
	|ИЗ
	|	РегистрСведений.ВодителиПоМаршруту.СрезПоследних(, Маршрут = &Маршрут) КАК ВодителиПоМаршрутуСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВодитель.Водитель		= Выборка.Водитель;
		СтруктураВодитель.Автомобиль 	= Выборка.Автомобиль;
	Иначе
		СтруктураВодитель.Водитель		= Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		СтруктураВодитель.Автомобиль 	= Справочники.Автомобили.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтруктураВодитель;
	
КонецФункции

// Основная выборка.
//
Функция ПолучитьРезультатыЗапроса()
	
	Перем Запрос;
	
	ЕстьПоставщик = НЕ ЭтотОбъект.Поставщик.Пустая();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ЭтотОбъект.ДатаСоздания);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтотОбъект.ДатаСоздания));
	Запрос.УстановитьПараметр("ДатаПредыдущая1"	, ЭтотОбъект.ДатаСоздания - 7 * 86400);
	Запрос.УстановитьПараметр("ДатаПредыдущая2"	, ЭтотОбъект.ДатаСоздания - 1);
	Если ЕстьПоставщик Тогда
		Запрос.УстановитьПараметр("Поставщик"	, ЭтотОбъект.Поставщик);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ)
	|	КОНЕЦ КАК ДатаРасхода,
	|	ПриходныйОрдерСклад.Поставщик КАК Поставщик,
	|	ПриходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТПриходники
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ВЫБОР
	|			КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИНАЧЕ ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		КОНЕЦ
	|	И НЕ ПриходныйОрдерСклад.ПометкаУдаления
	|	И &УсловиеПоПоставщику1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ)
	|	КОНЕЦ,
	|	ПриходныйОрдерСклад.Поставщик,
	|	ПриходныйОрдерСклад.Склад.Владелец
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ВЫБОР
	|			КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|			ИНАЧЕ ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|		КОНЕЦ
	|	И НЕ ПриходныйОрдерСклад.Ссылка В
	|				(ВЫБРАТЬ
	|					ТЧПриходныеОрдера.ПриходныйОрдер
	|				ИЗ
	|					Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТЧПриходныеОрдера
	|				ГДЕ
	|					ТЧПриходныеОрдера.Ссылка.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|					И НЕ ТЧПриходныеОрдера.Ссылка.ПометкаУдаления)
	|	И НЕ ПриходныйОрдерСклад.ПометкаУдаления
	|	И &УсловиеПоПоставщику1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПриходники.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТПоставщикиПриходников
	|ИЗ
	|	ВТПриходники КАК ВТПриходники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПриходники.Поставщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧПоставщики.Поставщик КАК Поставщик,
	|	ТЧПоставщики.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТПоставщикиМаршрутов
	|ИЗ
	|	Справочник.МаршрутыТранспортныхКомпаний.Поставщики КАК ТЧПоставщики
	|ГДЕ
	|	НЕ ТЧПоставщики.Ссылка.ПометкаУдаления
	|	И НЕ ТЧПоставщики.Ссылка.Устаревший
	|	И &УсловиеПоПоставщику2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧПоставщики.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТНенужныеМаршруты
	|ИЗ
	|	ВТПоставщикиМаршрутов КАК ТЧПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоставщикиПриходников КАК ВТПоставщикиПриходников
	|		ПО ТЧПоставщики.Поставщик = ВТПоставщикиПриходников.Поставщик
	|ГДЕ
	|	ВТПоставщикиПриходников.Поставщик ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧПоставщики.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыТранспортныхКомпаний.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТНужныеМаршруты
	|ИЗ
	|	Справочник.МаршрутыТранспортныхКомпаний КАК МаршрутыТранспортныхКомпаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНенужныеМаршруты КАК ВТНенужныеМаршруты
	|		ПО (ВТНенужныеМаршруты.Ссылка = МаршрутыТранспортныхКомпаний.Ссылка)
	|ГДЕ
	|	НЕ МаршрутыТранспортныхКомпаний.ПометкаУдаления
	|	И НЕ МаршрутыТранспортныхКомпаний.Устаревший
	|	И ВТНенужныеМаршруты.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДоставкаНаСклад.Ссылка КАК Маршрут,
	|	КОЛИЧЕСТВО(ТЧДоставкаНаСклад.Склад) КАК Количество
	|ПОМЕСТИТЬ ВТМаршрутыКолСкладов
	|ИЗ
	|	Справочник.МаршрутыТранспортныхКомпаний.ДоставкаНаСклад КАК ТЧДоставкаНаСклад
	|ГДЕ
	|	ТЧДоставкаНаСклад.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТНужныеМаршруты.Ссылка
	|			ИЗ
	|				ВТНужныеМаршруты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДоставкаНаСклад.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧПоставщики.Ссылка КАК Маршрут,
	|	ТЧПоставщики.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ТЧПоставщики.Поставщик) КАК Количество,
	|	ВТМаршрутыКолСкладов.Количество КАК КоличествоСкладов
	|ПОМЕСТИТЬ ВТМаршруты
	|ИЗ
	|	Справочник.МаршрутыТранспортныхКомпаний.Поставщики КАК ТЧПоставщики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаршрутыКолСкладов КАК ВТМаршрутыКолСкладов
	|		ПО (ВТМаршрутыКолСкладов.Маршрут = ТЧПоставщики.Ссылка)
	|ГДЕ
	|	ТЧПоставщики.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТНужныеМаршруты.Ссылка
	|			ИЗ
	|				ВТНужныеМаршруты)
	|	И &УсловиеПоПоставщику2
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧПоставщики.Ссылка,
	|	ТЧПоставщики.Ссылка.Организация,
	|	ВТМаршрутыКолСкладов.Количество
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоставщикиПриходников.Поставщик
	|ИЗ
	|	ВТПоставщикиПриходников КАК ВТПоставщикиПриходников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоставщикиМаршрутов КАК ВТПоставщикиМаршрутов
	|		ПО (ВТПоставщикиМаршрутов.Поставщик = ВТПоставщикиПриходников.Поставщик)
	|ГДЕ
	|	ВТПоставщикиМаршрутов.Поставщик ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМаршруты.Маршрут,
	|	ВТМаршруты.Организация
	|ИЗ
	|	ВТМаршруты КАК ВТМаршруты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТМаршруты.Количество УБЫВ,
	|	ВТМаршруты.КоличествоСкладов УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПриходники.Поставщик КАК Поставщик,
	|	ВТПриходники.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТПриходники КАК ВТПриходники
	|ГДЕ
	|	ВТПриходники.Поставщик В
	|			(ВЫБРАТЬ
	|				ВТПоставщикиМаршрутов.Поставщик
	|			ИЗ
	|				ВТПоставщикиМаршрутов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПриходники.Поставщик,
	|	ВТПриходники.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПриходники.Ссылка КАК Ссылка,
	|	ВТПриходники.ДатаРасхода КАК ДатаРасхода,
	|	ВТПриходники.Поставщик КАК Поставщик,
	|	ВТПриходники.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТПриходники КАК ВТПриходники
	|ГДЕ
	|	ВТПриходники.Поставщик В
	|			(ВЫБРАТЬ
	|				ВТПоставщикиМаршрутов.Поставщик
	|			ИЗ
	|				ВТПоставщикиМаршрутов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыНаДоставкуПоМаршруту.Маршрут КАК Маршрут,
	|	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф КАК ЕдиныйТариф
	|ПОМЕСТИТЬ ВТПоследниеПериоды
	|ИЗ
	|	РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТарифыНаДоставкуПоМаршруту.Маршрут КАК Маршрут,
	|			МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|		ГДЕ
	|			ТарифыНаДоставкуПоМаршруту.Маршрут В
	|					(ВЫБРАТЬ
	|						ВТПоставщикиМаршрутов.Ссылка
	|					ИЗ
	|						ВТПоставщикиМаршрутов)
	|			И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТарифыНаДоставкуПоМаршруту.Маршрут) КАК ВТПоследняяЗапись
	|		ПО (ВТПоследняяЗапись.Маршрут = ТарифыНаДоставкуПоМаршруту.Маршрут)
	|			И (ВТПоследняяЗапись.Период = ТарифыНаДоставкуПоМаршруту.Период)
	|ГДЕ
	|	ТарифыНаДоставкуПоМаршруту.Маршрут В
	|			(ВЫБРАТЬ
	|				ВТПоставщикиМаршрутов.Ссылка
	|			ИЗ
	|				ВТПоставщикиМаршрутов)
	|	И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТарифыНаДоставкуПоМаршруту.Маршрут,
	|	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Маршрут,
	|	ЕдиныйТариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыНаДоставкуПоМаршруту.Маршрут КАК Маршрут,
	|	ТарифыНаДоставкуПоМаршруту.ВесОт КАК ВесОт,
	|	ТарифыНаДоставкуПоМаршруту.Сумма КАК Сумма,
	|	ТарифыНаДоставкуПоМаршруту.ВариантРасчетаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СтавкаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СуммаНДС,
	|	ТарифыНаДоставкуПоМаршруту.ЦенаЗаКг,
	|	ТарифыНаДоставкуПоМаршруту.Перевозчик
	|ИЗ
	|	РегистрСведений.ТарифыНаДоставкуПоМаршруту.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(&ДатаНачала, СЕКУНДА, 1),
	|			Маршрут В
	|				(ВЫБРАТЬ
	|					ВТПоставщикиМаршрутов.Ссылка
	|				ИЗ
	|					ВТПоставщикиМаршрутов)) КАК ТарифыНаДоставкуПоМаршруту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериоды КАК ВТПоследниеПериоды
	|		ПО (ВТПоследниеПериоды.Маршрут = ТарифыНаДоставкуПоМаршруту.Маршрут)
	|			И (ВТПоследниеПериоды.ЕдиныйТариф = ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТарифыНаДоставкуПоМаршруту.Маршрут,
	|	ТарифыНаДоставкуПоМаршруту.ВесОт УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоПоставщику1",
		?(ЕстьПоставщик, "
	|	И ПриходныйОрдерСклад.Поставщик = &Поставщик", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоПоставщику2",
		?(ЕстьПоставщик, "
	|	И ТЧПоставщики.Поставщик = &Поставщик", ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Создает документы, с проведением
//
Процедура СоздатьДокументы_Прев(мФормироватьТранспортныеРасходы, мФормироватьМаршрутныеЛисты, ВыводитьСообщения = Истина) Экспорт
	
	Перем мДокументы, МассивПоставщиков, МассивСкладов, СтруктураОтбора, Выборка, ОбъектДокумента, ТЧПоставщикиМаршрута, ТЧПоставщикиДокумента, НоваяСтрока;
	Перем РезультатЗапроса, РезультатЗапроса1, РезультатЗапроса2, РезультатЗапроса3, ПодходящийМаршрут;
	
	мДокиТрРасходы 		= Документы.ТранспортныеРасходы;
	мДокиМаршруЛисты 	= Документы.МаршрутныйЛист;
	мВидПеревозкиДоставкаНаСклад = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад;
	
	МассивПоставщиков 	= Новый Массив;
	МассивСкладов 		= Новый Массив;
	СтруктураОтбора 	= Новый Структура("Маршрут");
	
	
	// основная выборка данных
	РезультатыЗапроса = ПолучитьРезультатыЗапроса();
	
	
	// поставщики, для которых не найдены маршруты
	РезультатЗапроса = РезультатыЗапроса[7];
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВыводитьСообщения = Истина Тогда
			Сообщить("Для поставщика """ + Строка(Выборка.Поставщик) + """ не найден маршрут!");
		КонецЕсли;
	КонецЦикла;	
	
	// маршруты, все поставщики которых поставляли в этот день, упорядоченные по количеству
	РезультатЗапроса1 = РезультатыЗапроса[8];

	
	//// данные из маршрутов для заполнения документов
	//РезультатЗапроса2 = РезультатыЗапроса[9];
	//ТаблицаКЗаполнению = РезультатЗапроса2.Выгрузить();
	
	
	// склады, куда поставили товар поставщики в приходных ордерах
	РезультатЗапроса3 = РезультатыЗапроса[9];
	ТаблицаСкладовИПоставщиков = РезультатЗапроса3.Выгрузить();
	МассивСтрокТаблицыСкладовИПоставщиков = Новый Массив;
	
	
	// приходники от поставщиков, указанных в маршрутах
	ТаблицаПриходников = РезультатыЗапроса[10].Выгрузить();
	СтруктураОтбораПриходников 	= Новый Структура("Поставщик, СтруктурнаяЕдиница");
	ТаблицаДатРасходаИПриходников = ТаблицаПриходников.СкопироватьКолонки("ДатаРасхода, Ссылка");
	СтруктураОтбораДатыРасхода 	= Новый Структура("ДатаРасхода");
	
	
	// тарифы на доставку
	ТаблицаТарифовНаДоставку = РезультатыЗапроса[12].Выгрузить();
	
	
	н = 0;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Выборка = РезультатЗапроса1.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		н = н + 1;
		ТекМаршрут = Выборка.Маршрут;
		ТекТЧПоставщики = ТекМаршрут.Поставщики;
		ТекТЧСклады 	= ТекМаршрут.ДоставкаНаСклад;
		ТекТЧТовары		= ТекМаршрут.Товары;
		ТекПеревозчик 	= ТекМаршрут.Перевозчик;
		
		// проверка на склады поставщиков
		ПодходящийМаршрут 	= Истина;
		мДвигатьсяДальше	= Ложь;
		
		МассивПриходников	= Новый Массив;
		Для Каждого СтрокаСкладовИПоставщиков Из ТаблицаСкладовИПоставщиков Цикл
			СтрокаСклада 		= ТекТЧСклады.Найти(СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница, "Склад");
			СтрокаПоставщика 	= ТекТЧПоставщики.Найти(СтрокаСкладовИПоставщиков.Поставщик, "Поставщик");
			Если (НЕ СтрокаСклада = Неопределено)
					И НЕ СтрокаПоставщика = Неопределено Тогда
				мДвигатьсяДальше = Истина;
				МассивСтрокТаблицыСкладовИПоставщиков.Добавить(СтрокаСкладовИПоставщиков);
				МассивПоставщиков.Добавить(СтрокаСкладовИПоставщиков.Поставщик);
				МассивСкладов.Добавить(СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница);
			КонецЕсли;
		КонецЦикла;
		Если мДвигатьсяДальше Тогда
			Для Каждого СтрокаТЧ Из ТекТЧПоставщики Цикл
				Если МассивПоставщиков.Найти(СтрокаТЧ.Поставщик) = Неопределено Тогда
					ПодходящийМаршрут = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ТекМаршрут.ЛюбойИзСкладов Тогда
				Для Каждого СтрокаТЧ Из ТекТЧСклады Цикл
					Если МассивСкладов.Найти(СтрокаТЧ.Склад) = Неопределено Тогда
						ПодходящийМаршрут = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПодходящийМаршрут Тогда
				Для Каждого СтрокаСкладовИПоставщиков Из МассивСтрокТаблицыСкладовИПоставщиков Цикл
					СтруктураОтбораПриходников.Поставщик 			= СтрокаСкладовИПоставщиков.Поставщик;
					СтруктураОтбораПриходников.СтруктурнаяЕдиница 	= СтрокаСкладовИПоставщиков.СтруктурнаяЕдиница;
					СтрокиПриходников = ТаблицаПриходников.НайтиСтроки(СтруктураОтбораПриходников);
					Для Каждого СтрокаПриходников Из СтрокиПриходников Цикл
						//МассивПриходников.Добавить(СтрокаПриходников.Ссылка);
						НоваяСтрока = ТаблицаДатРасходаИПриходников.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриходников);
					КонецЦикла;
					
					Если ТекТЧТовары.Количество() = 0 Тогда // когда ограничение по товарам в маршруте - эти записи по складам и поставщикам еще пригодятся
						ТаблицаСкладовИПоставщиков.Удалить(СтрокаСкладовИПоставщиков);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			МассивСтрокТаблицыСкладовИПоставщиков.Очистить();
			МассивПоставщиков.Очистить();
			МассивСкладов.Очистить();
		Иначе
			ПодходящийМаршрут = Ложь;
		КонецЕсли;
		Если ВыводитьСообщения = Истина Тогда
			Сообщить("Маршрут """ + ТекМаршрут + """ ... " + ?(НЕ ПодходящийМаршрут, "не", "") + " подходит");
		КонецЕсли;
		Если НЕ ПодходящийМаршрут Тогда
			Продолжить;
		КонецЕсли;
	
		
		СтруктураОтбора.Маршрут = ТекМаршрут;
		
		СтрокиТарифов = ТаблицаТарифовНаДоставку.НайтиСтроки(СтруктураОтбора);
		
		ВремТаблица = ТаблицаДатРасходаИПриходников.Скопировать(, "ДатаРасхода");
		ВремТаблица.Свернуть("ДатаРасхода");
		ВремТаблица.Сортировать("ДатаРасхода");
		
		Для Каждого СтрокаДаты Из ВремТаблица Цикл
			
			ВесВПриходниках = 0;
			ТекМассивПриходников = Новый Массив;
			СтруктураОтбораДатыРасхода.ДатаРасхода = СтрокаДаты.ДатаРасхода;
			СтрокиПриходныхОрдеров = ТаблицаДатРасходаИПриходников.НайтиСтроки(СтруктураОтбораДатыРасхода);
			Для Каждого СтрокаПриходныхОрдеров Из СтрокиПриходныхОрдеров Цикл
				ТекПриходник = СтрокаПриходныхОрдеров.Ссылка;
				ТекТоварыПриходника = ТекПриходник.Товары;
				Если ТекТоварыПриходника.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				//
				Если ТекТЧТовары.Количество() > 0 Тогда  // если в маршруте указаны товары - хотя бы один из них должен быть в приходнике
					мДобавлять = Ложь;
					Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
						Если НЕ ТекТЧТовары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура") = Неопределено Тогда
							мДобавлять = Истина;
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					Если НЕ мДобавлять Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ТекМассивПриходников.Добавить(ТекПриходник);

				Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
					ВесВПриходниках = ВесВПриходниках + СтрокаТЧ.ЕдиницаИзмерения.Вес * СтрокаТЧ.Количество;
				КонецЦикла;
			КонецЦикла;
			Если ТекМассивПриходников.Количество() = 0 Тогда // скорее всего, это приходники на другой товар
				Если ВыводитьСообщения = Истина Тогда
					Сообщить("Для даты " + Формат(СтрокаДаты.ДатаРасхода, "ДЛФ=Д") + " не найдено приходных ордеров");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			//	
			Если мФормироватьТранспортныеРасходы Тогда
				
				ОбъектДокумента = мДокиТрРасходы.СоздатьДокумент();
			
				ОбъектДокумента.Автор 		= ТекПользователь;
				ОбъектДокумента.Дата 		= КонецДня(СтрокаДаты.ДатаРасхода);
				ОбъектДокумента.Организация = Выборка.Организация;
				
				ОбъектДокумента.Маршрут		= ТекМаршрут;
				
				ТЧПоставщикиДокумента 	= ОбъектДокумента.Поставщики;
				Для Каждого СтрокаТЧ Из ТекТЧПоставщики Цикл
					НоваяСтрока = ТЧПоставщикиДокумента.Добавить();
					НоваяСтрока.Поставщик = СтрокаТЧ.Поставщик;
				КонецЦикла;	
				
				ТЧПриходники = ОбъектДокумента.ПриходныеОрдера;
				Для Каждого ТекПриходник Из ТекМассивПриходников Цикл
					НоваяСтрока = ТЧПриходники.Добавить();
					НоваяСтрока.ПриходныйОрдер = ТекПриходник;
				КонецЦикла;
				
				Для Каждого СтрокаТарифа Из СтрокиТарифов Цикл
					Если НЕ ВесВПриходниках < СтрокаТарифа.ВесОт Тогда
						//ЗаполнитьЗначенияСвойств(ОбъектДокумента, СтрокаТарифа,, "Маршрут");
						ОбъектДокумента.Сумма 				= СтрокаТарифа.Сумма 	* ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
						ОбъектДокумента.СуммаНДС 			= СтрокаТарифа.СуммаНДС * ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
						ОбъектДокумента.ВариантРасчетаНДС 	= СтрокаТарифа.ВариантРасчетаНДС;
						ОбъектДокумента.СтавкаНДС 			= СтрокаТарифа.СтавкаНДС;
						ОбъектДокумента.Перевозчик 			= СтрокаТарифа.Перевозчик;
						Прервать;
					КонецЕсли;
				КонецЦикла;
					
				Попытка
					ОбъектДокумента.Записать();
					Если ВыводитьСообщения = Истина Тогда
						Сообщить("Создан документ """ + ОбъектДокумента + """");
					КонецЕсли;
				Исключение
					Если ВыводитьСообщения = Истина Тогда
						Сообщить("Не удалось записать документ " + ОбъектДокумента);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			
			//	
			Если мФормироватьМаршрутныеЛисты Тогда
				
				ОбъектДокумента = мДокиМаршруЛисты.СоздатьДокумент();
			
				ОбъектДокумента.Автор 			= ТекПользователь;
				ОбъектДокумента.Дата 			= КонецДня(СтрокаДаты.ДатаРасхода);
				ОбъектДокумента.Организация 	= Выборка.Организация;
				ОбъектДокумента.ВидПеревозки	= мВидПеревозкиДоставкаНаСклад;
				ОбъектДокумента.МаршрутТранспортныхКомпаний	= ТекМаршрут;
				
				СтруктураВодитель = ПолучитьСтруктуруВодитель(ТекМаршрут);
				ОбъектДокумента.Водитель 		= СтруктураВодитель.Водитель;
				ОбъектДокумента.Автомобиль 		= СтруктураВодитель.Автомобиль;
				
				ТЧПриходники = ОбъектДокумента.ПриходныеОрдера;
				Для Каждого ТекПриходник Из ТекМассивПриходников Цикл
					НоваяСтрока = ТЧПриходники.Добавить();
					НоваяСтрока.ПриходныйОрдер 	= ТекПриходник;
				КонецЦикла;
				
				Для Каждого СтрокаТарифа Из СтрокиТарифов Цикл
					Если НЕ ВесВПриходниках < СтрокаТарифа.ВесОт Тогда
						//ЗаполнитьЗначенияСвойств(ОбъектДокумента, СтрокаТарифа,, "Маршрут");
						ОбъектДокумента.Сумма 				= СтрокаТарифа.Сумма 	* ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
						ОбъектДокумента.СуммаНДС 			= СтрокаТарифа.СуммаНДС * ?(СтрокаТарифа.ЦенаЗаКг, ВесВПриходниках, 1);
						ОбъектДокумента.ВариантРасчетаНДС 	= СтрокаТарифа.ВариантРасчетаНДС;
						ОбъектДокумента.СтавкаНДС 			= СтрокаТарифа.СтавкаНДС;
						ОбъектДокумента.Перевозчик 			= СтрокаТарифа.Перевозчик;
						Прервать;
					КонецЕсли;
				КонецЦикла;
					
				Попытка
					ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
					Если ВыводитьСообщения = Истина Тогда
						Сообщить("Создан документ """ + ОбъектДокумента + """");
					КонецЕсли;
				Исключение
					Если ВыводитьСообщения = Истина Тогда
						Сообщить("Не удалось провести документ " + ОбъектДокумента);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаДатРасходаИПриходников.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

// Проверяет на наличие уже созданных в заданный день документов "Транспортные услуги".
//
// Возврат:
//   Массив ссылок на документы.
//
Функция ПолучитьСозданныеТранспортныеРасходы() Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ЭтотОбъект.ДатаСоздания);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтотОбъект.ДатаСоздания));
	
	Если ЭтотОбъект.Поставщик.Пустая() Тогда
		
		Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеРасходы.Ссылка
	|ИЗ
	|	Документ.ТранспортныеРасходы КАК ТранспортныеРасходы
	|ГДЕ
	|	ТранспортныеРасходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ТранспортныеРасходы.ПометкаУдаления";
	
	Иначе
		Запрос.УстановитьПараметр("Поставщик"	, ЭтотОбъект.Поставщик);
		
		Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеРасходыПоставщики.Ссылка
	|ИЗ
	|	Документ.ТранспортныеРасходы.Поставщики КАК ТранспортныеРасходыПоставщики
	|ГДЕ
	|	ТранспортныеРасходыПоставщики.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТранспортныеРасходыПоставщики.Поставщик = &Поставщик
	|	И НЕ ТранспортныеРасходыПоставщики.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеРасходыПоставщики.Ссылка";
	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Проверяет на наличие уже созданных в заданный день документов "Маршрутный лист" (доставка на склад).
//
// Возврат:
//   Массив ссылок на документы.
//
Функция ПолучитьСозданныеМаршрутныеЛисты() Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ЭтотОбъект.ДатаСоздания);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтотОбъект.ДатаСоздания));
	
	Если ЭтотОбъект.Поставщик.Пустая() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
		|	И НЕ МаршрутныйЛист.ПометкаУдаления";
	
	Иначе
		Запрос.УстановитьПараметр("Поставщик"	, ЭтотОбъект.Поставщик);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.Поставщики КАК ВТПоставшики
		|		ПО (ВТПоставшики.Ссылка = МаршрутныйЛист.МаршрутТранспортныхКомпаний)
		|			И (ВТПоставшики.Поставщик = &Поставщик)
		|ГДЕ
		|	МаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
		|	И НЕ МаршрутныйЛист.ПометкаУдаления";

	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Удаляет документы, полученные в результате запроса.
//
// Параметры:
// 	 МассивСсылок - Массив ссылок на документы.
//
Процедура УдалитьСуществующиеДокументы(МассивСсылок, ВыводитьСообщения = Истина) Экспорт
	
	Перем ОбъектДокумента;
	
	Для Каждого ЭлементМассива Из МассивСсылок Цикл
		ОбъектДокумента = ЭлементМассива.ПолучитьОбъект();
		Попытка
			ОбъектДокумента.УстановитьПометкуУдаления(Истина);
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Помечен на удаление документ """ + ОбъектДокумента + """");
			КонецЕсли;
		Исключение
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Не удалось пометить на удаление документ """ + ОбъектДокумента + """" + ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.05.21 ИП-00018724
Процедура СоздатьДокументы(мФормироватьТранспортныеРасходы, мФормироватьМаршрутныеЛисты, ВыводитьСообщения = Истина) Экспорт
	
	Если мФормироватьТранспортныеРасходы Тогда
		Если ВыводитьСообщения = Истина Тогда
			Сообщить("Функционал формирования документов ""Транспортные расходы"" отключен, так как данный вид документов давно не используется!");
		КонецЕсли;
	КонецЕсли;
	
	Если мФормироватьМаршрутныеЛисты = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	БПР = Новый Структура();
	БПР.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	БПР.Вставить("Запрос", Новый Запрос());
	БПР.Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	БПР.Вставить("ДатаНачала" , ЭтотОбъект.ДатаСоздания);
	БПР.Вставить("ДатаОкончания", КонецДня(ЭтотОбъект.ДатаСоздания));
	БПР.Вставить("ДатаПредыдущая1", ЭтотОбъект.ДатаСоздания - 7 * 86400);
	БПР.Вставить("ДатаПредыдущая2", ЭтотОбъект.ДатаСоздания - 1);
	БПР.Вставить("Поставщик", ЭтотОбъект.Поставщик);
	БПР.Вставить("ФормироватьТолькоНаУказаннуюДату", ?(ЗначениеЗаполнено(ЭтотОбъект.ФормироватьТолькоНаУказаннуюДату), ЭтотОбъект.ФормироватьТолькоНаУказаннуюДату, Ложь));
	
	АК_СформироватьРегистрТарифовНаПеревозкуСИнтерваламиДат(БПР);
	АК_СформироватьРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами(БПР);
	
	АК_СформироватьРегистрВодителейПоМаршрутуСИнтерваламиДат(БПР);
	
	АК_СформироватьСписокМаршрутов(БПР);
	АК_СформироватьСписокПриходников(БПР);
	АК_СФормироватьСписокПриходниковСМаршрутами(БПР);
	АК_СформироватьСписокПриходниковСМаршрутамиИВесами(БПР);
	
	АК_ОтобразитьСписокПоставщиковБезМаршрутов(БПР);
	
	АК_СформироватьМаршрутныеЛисты(БПР);
	
	БПР.Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

//+++АК sole 2018.05.17 ИП-00018724
//  Процедура заполняет "втРегистрТарифовНаПеревозкуСИнтерваламиДат"
Процедура АК_СформироватьРегистрТарифовНаПеревозкуСИнтерваламиДат(БПР)
	
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст = 
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	0 КАК ИД,
|	0 КАК СледИД,
|	ТарифыНаДоставкуПоМаршруту.Период,
|	ТарифыНаДоставкуПоМаршруту.Маршрут
|
|ИЗ	РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
|ГДЕ 
|		ТарифыНаДоставкуПоМаршруту.Маршрут.ПометкаУдаления = Ложь
|	И	ТарифыНаДоставкуПоМаршруту.Маршрут.Устаревший  = Ложь
|	
|СГРУППИРОВАТЬ ПО	
|	ТарифыНаДоставкуПоМаршруту.Период,
|	ТарифыНаДоставкуПоМаршруту.Маршрут
|
|УПОРЯДОЧИТЬ ПО
|	ТарифыНаДоставкуПоМаршруту.Маршрут,
|	ТарифыНаДоставкуПоМаршруту.Период
|";	
	тз = Запрос.Выполнить().Выгрузить();	
	
	ИД = 1;
	
	Для Каждого Стр Из тз Цикл
		Стр["ИД"] = ИД;
		ИД = ИД + 1;
		Стр["СледИД"] = ИД;
	КонецЦикла;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	т.ИД,
|	т.СледИД,
|	т.Период,
|	т.Маршрут
|
|		ПОМЕСТИТЬ вт
|
|ИЗ &Таблица КАК т
|ИНДЕКСИРОВАТЬ ПО т.ИД
|
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	вт.Период,
|	вт.Маршрут,
|	вт.Период КАК ДатаС,
|   ЕСТЬNULL(вт1.Период, ДАТАВРЕМЯ(3099,12,31)) КАК ДатаДо,
|  	МАКСИМУМ(т.ЕдиныйТариф) КАК ЕдиныйТариф 
|
|		ПОМЕСТИТЬ втРегистрТарифовНаПеревозкуСИнтерваламиДат
|
|ИЗ вт
|	ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт1 ПО 
|			вт1.ИД = вт.СледИД
|       И	вт1.Маршрут = вт.Маршрут
|
|	ЛЕВОЕ СОЕДИНЕНИЕ 
|	(
|		ВЫБРАТЬ
|			ТарифыНаДоставкуПоМаршруту.Период,
|			ТарифыНаДоставкуПоМаршруту.Маршрут,
|       	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф
|
|		ИЗ	РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
|		ГДЕ 
|				ТарифыНаДоставкуПоМаршруту.Маршрут.ПометкаУдаления = Ложь
|			И	ТарифыНаДоставкуПоМаршруту.Маршрут.Устаревший  = Ложь
|
|		СГРУППИРОВАТЬ ПО
|			ТарифыНаДоставкуПоМаршруту.Период,
|			ТарифыНаДоставкуПоМаршруту.Маршрут,
|       	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф
|
|	) КАК т ПО
|			т.Период = вт.Период
|		И	т.Маршрут = вт.Маршрут
|
|СГРУППИРОВАТЬ ПО
|	вт.Период,
|	вт.Маршрут,
|	вт.Период,
|   ЕСТЬNULL(вт1.Период, ДАТАВРЕМЯ(3099,12,31))
|
|
|ИНДЕКСИРОВАТЬ ПО вт.Маршрут
|;
|///////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ вт
|";
	Запрос.Параметры.Вставить("Таблица", тз);
	Запрос.Выполнить();
	Запрос.Параметры.Очистить();
	
КонецПроцедуры

//+++АК sole 2018.05.18 ИП-00018724
//  Процедура заполняет "втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами"
Процедура АК_СформироватьРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами(БПР)
	
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	//+++АК sole 2018.07.25 ИП-00019199
	Запрос.Текст = 
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	втРтСИнтерваламиДат.Период,
|	втРтСИнтерваламиДат.Маршрут,
|	втРтСИнтерваламиДат.ДатаС,
|	втРтСИнтерваламиДат.ДатаДо,
|  	ТарифыНаДоставкуПоМаршруту.ВесОт
|
|		ПОМЕСТИТЬ втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами
|
|ИЗ	втРегистрТарифовНаПеревозкуСИнтерваламиДат КАК втРтСИнтерваламиДат
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту ПО
|   		ТарифыНаДоставкуПоМаршруту.Маршрут = втРтСИнтерваламиДат.Маршрут
|		И	ТарифыНаДоставкуПоМаршруту.Период = втРтСИнтерваламиДат.Период
|
|ГДЕ
|		НЕ втРтСИнтерваламиДат.ЕдиныйТариф
|";	
	Запрос.Выполнить();
	//---АК sole 2018.07.25 ИП-00019199
	
КонецПроцедуры

//+++АК sole 2018.05.18 ИП-00018724
// Процедура заполняет "втРегистрВодителейПоМаршрутуСИнтерваламиДат"
Процедура АК_СформироватьРегистрВодителейПоМаршрутуСИнтерваламиДат(БПР)
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	0 КАК ИД,
|	0 КАК СледИД,
|	ВодителиПоМаршрутуСрезПоследних.Период,
|	ВодителиПоМаршрутуСрезПоследних.Маршрут,
|	ВодителиПоМаршрутуСрезПоследних.Водитель,
|	ВодителиПоМаршрутуСрезПоследних.Автомобиль
|
|ИЗ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаПредыдущая1) КАК ВодителиПоМаршрутуСрезПоследних
|ГДЕ 
|		ТИПЗНАЧЕНИЯ(ВодителиПоМаршрутуСрезПоследних.Маршрут) = ТИП(Справочник.МаршрутыТранспортныхКомпаний)
|	И	ВодителиПоМаршрутуСрезПоследних.Маршрут.ПометкаУдаления = Ложь
|	И	ВодителиПоМаршрутуСрезПоследних.Маршрут.Устаревший = Ложь
|
|ОБЪЕДИНИТЬ ВСЕ
|	
|ВЫБРАТЬ
|	0 КАК ИД,
|	0 КАК СледИД,
|	ВодителиПоМаршруту.Период,
|	ВодителиПоМаршруту.Маршрут,
|	ВодителиПоМаршруту.Водитель,
|	ВодителиПоМаршруту.Автомобиль
|
|ИЗ РегистрСведений.ВодителиПоМаршруту КАК ВодителиПоМаршруту
|ГДЕ 
|		ТИПЗНАЧЕНИЯ(ВодителиПоМаршруту.Маршрут) = ТИП(Справочник.МаршрутыТранспортныхКомпаний)
|	И	ВодителиПоМаршруту.Маршрут.ПометкаУдаления = Ложь
|	И	ВодителиПоМаршруту.Маршрут.Устаревший = Ложь
|	И   ВодителиПоМаршруту.Период > &ДатаПредыдущая1
|	И   ВодителиПоМаршруту.Период <= &ДатаОкончания
|
|УПОРЯДОЧИТЬ ПО
|	ВодителиПоМаршрутуСрезПоследних.Маршрут,
|	ВодителиПоМаршрутуСрезПоследних.Период
|";
	
	Запрос.Параметры.Вставить("ДатаПредыдущая1", БПР.ДатаПредыдущая1);
	Запрос.Параметры.Вставить("ДатаОкончания", БПР.ДатаОкончания);

	тз = Запрос.Выполнить().Выгрузить();	
	
	ИД = 1;
	
	Для Каждого Стр Из тз Цикл
		Стр["ИД"] = ИД;
		ИД = ИД + 1;
		Стр["СледИД"] = ИД;
	КонецЦикла;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	т.ИД,
|	т.СледИД,
|	т.Период,
|	т.Маршрут,
|	т.Водитель,
|	т.Автомобиль
|
|		ПОМЕСТИТЬ вт
|
|ИЗ &Таблица КАК т
|ИНДЕКСИРОВАТЬ ПО т.ИД
|
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	вт.Период,
|	вт.Маршрут,
|	вт.Водитель,
|	вт.Автомобиль,
|	вт.Период КАК ДатаС,
|   ЕСТЬNULL(вт1.Период, ДАТАВРЕМЯ(3099,12,31)) КАК ДатаДо
|
|		ПОМЕСТИТЬ втРегистрВодителейПоМаршрутуСИнтерваламиДат
|
|ИЗ вт
|	ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт1 ПО 
|			вт1.ИД = вт.СледИД
|       И	вт1.Маршрут = вт.Маршрут
|
|ИНДЕКСИРОВАТЬ ПО вт.Маршрут
|;
|///////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ вт
|";
	Запрос.Параметры.Вставить("Таблица", тз);
	Запрос.Выполнить();
	Запрос.Параметры.Очистить();
	
КонецПроцедуры

//+++АК sole 2018.05.17 ИП-00018724
// Процедура заполняет "втСписокМаршрутов"
Процедура АК_СформироватьСписокМаршрутов(БПР)
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	МаршрутыТранспортныхКомпанийПоставщики.Ссылка,
|	МаршрутыТранспортныхКомпанийПоставщики.Поставщик,
|	
|	МАКСИМУМ
|	(
|		ВЫБОР 
|			КОГДА МаршрутыТранспортныхКомпанийТовары.Ссылка ЕСТЬ NULL ТОГДА Ложь
|			ИНАЧЕ Истина
|		КОНЕЦ
|	) КАК ТоварыВМаршрутеТК
|	
|		ПОМЕСТИТЬ вт1
|
|ИЗ Справочник.МаршрутыТранспортныхКомпаний.Поставщики КАК МаршрутыТранспортныхКомпанийПоставщики
|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.Товары КАК МаршрутыТранспортныхКомпанийТовары ПО
|			МаршрутыТранспортныхКомпанийТовары.Ссылка = МаршрутыТранспортныхКомпанийПоставщики.Ссылка
|
|ГДЕ 
|		МаршрутыТранспортныхКомпанийПоставщики.Ссылка.ПометкаУдаления = Ложь
|	И	МаршрутыТранспортныхКомпанийПоставщики.Ссылка.Устаревший = Ложь
|
|СГРУППИРОВАТЬ ПО	
|	МаршрутыТранспортныхКомпанийПоставщики.Ссылка,
|	МаршрутыТранспортныхКомпанийПоставщики.Поставщик
|
|ИНДЕКСИРОВАТЬ ПО МаршрутыТранспортныхКомпанийПоставщики.Ссылка 
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	вт1.Ссылка,
|	вт1.Поставщик,
|	вт1.ТоварыВМаршрутеТК,
|	МаршрутыТранспортныхКомпанийДоставкаНаСклад.Склад,
|	вт1.Ссылка.Организация КАК Организация
|	
|		ПОМЕСТИТЬ втСписокМаршрутов
|	
|ИЗ вт1
|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.ДоставкаНаСклад КАК МаршрутыТранспортныхКомпанийДоставкаНаСклад ПО
|			 вт1.Ссылка = МаршрутыТранспортныхКомпанийДоставкаНаСклад.Ссылка
|
|ИНДЕКСИРОВАТЬ ПО
|	вт1.Поставщик,
|	вт1.ТоварыВМаршрутеТК,
|	МаршрутыТранспортныхКомпанийДоставкаНаСклад.Склад,
|	вт1.Ссылка.Организация
|
|;
|///////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ вт1
|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область АК_ОтключенныйКод
//+++АК sole 2018.05.17 ИП-00018724
// Процедура заполняет "втПриходники"
Процедура АК_СформироватьСписокПриходников_ИП00018724(БПР)
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ПриходныйОрдерСклад.Ссылка КАК Ссылка,
|	
|	ВЫБОР
|		КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
|			ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ)
|	КОНЕЦ КАК ДатаПрихода,
|	
|	ПриходныйОрдерСклад.Поставщик КАК Поставщик,
|	ПриходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
|	ПриходныйОрдерСклад.Организация
|
|		ПОМЕСТИТЬ втПриходники
|
|ИЗ Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
|ГДЕ
|		ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
|	И	(
|			ВЫБОР
|				КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
|					ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика МЕЖДУ &ДатаНачала И &ДатаОкончания
|				ИНАЧЕ ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
|			КОНЕЦ
|		)
|	И	ПриходныйОрдерСклад.ПометкаУдаления = Ложь
|	И   ПриходныйОрдерСклад.Отменен = Ложь
|	И	(
|				ПриходныйОрдерСклад.Поставщик = &Поставщик
|			ИЛИ &Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
|		)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ПриходныйОрдерСклад.Ссылка,
|	ВЫБОР
|		КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
|			ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ)
|	КОНЕЦ,
|	ПриходныйОрдерСклад.Поставщик,
|	ПриходныйОрдерСклад.Склад.Владелец,
|	ПриходныйОрдерСклад.Организация
|
|ИЗ Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
|	ЛЕВОЕ СОЕДИНЕНИЕ 
|		(
|			ВЫБРАТЬ
|				МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер КАК Ссылка
|			ИЗ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
|			ГДЕ
|					МаршрутныйЛистПриходныеОрдера.Ссылка.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
|				И	МаршрутныйЛистПриходныеОрдера.Ссылка.ПометкаУдаления = Ложь
|		) КАК ПриходныеОрдераВРейсах ПО ПриходныеОрдераВРейсах.Ссылка = ПриходныйОрдерСклад.Ссылка
|
|	
|ГДЕ
|    	НЕ &ФормироватьТолькоНаУказаннуюДату
|	И	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
|	И	(
|			ВЫБОР
|				КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
|					ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
|				ИНАЧЕ ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
|			КОНЕЦ
|		)
|	И	ПриходныеОрдераВРейсах.Ссылка ЕСТЬ NULL
|	И 	ПриходныйОрдерСклад.ПометкаУдаления = Ложь
|	И   ПриходныйОрдерСклад.Отменен = Ложь
|	И	(
|				ПриходныйОрдерСклад.Поставщик = &Поставщик
|			ИЛИ &Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
|		)
|
|ИНДЕКСИРОВАТЬ ПО
|	ПриходныйОрдерСклад.Поставщик,
|	ПриходныйОрдерСклад.Склад.Владелец,
|	ПриходныйОрдерСклад.Организация
|";
	
	Запрос.УстановитьПараметр("ДатаНачала", БПР.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", БПР.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаПредыдущая1", БПР.ДатаПредыдущая1);
	Запрос.УстановитьПараметр("ДатаПредыдущая2", БПР.ДатаПредыдущая2);
	Запрос.УстановитьПараметр("Поставщик",БПР.Поставщик);
	Запрос.УстановитьПараметр("ФормироватьТолькоНаУказаннуюДату", БПР.ФормироватьТолькоНаУказаннуюДату);
	Запрос.Выполнить();	 
	
КонецПроцедуры
#КонецОбласти

//+++АК sole 2018.06.04 ИП-00018888
// Процедура заполняет "втПриходники"
// Предыдущая версия АК_СформироватьСписокПриходников_ИП00018724
Процедура АК_СформироватьСписокПриходников(БПР)
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйОрдерСклад.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ) КАК ДатаПрихода,
	|	ПриходныйОрдерСклад.Поставщик КАК Поставщик,
	|	ПриходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
	|	ПриходныйОрдерСклад.Организация
	|ПОМЕСТИТЬ втПриходники
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПриходныйОрдерСклад.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСклад.Отменен = ЛОЖЬ
	|	И (ПриходныйОрдерСклад.Поставщик = &Поставщик
	|			ИЛИ &Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка,
	|	НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ),
	|	ПриходныйОрдерСклад.Поставщик,
	|	ПриходныйОрдерСклад.Склад.Владелец,
	|	ПриходныйОрдерСклад.Организация
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер КАК Ссылка
	|		ИЗ
	|			Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
	|		ГДЕ
	|			МаршрутныйЛистПриходныеОрдера.Ссылка.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|			И МаршрутныйЛистПриходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ) КАК ПриходныеОрдераВРейсах
	|		ПО (ПриходныеОрдераВРейсах.Ссылка = ПриходныйОрдерСклад.Ссылка)
	|ГДЕ
	|	НЕ &ФормироватьТолькоНаУказаннуюДату
	|	И ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|	И ПриходныеОрдераВРейсах.Ссылка ЕСТЬ NULL
	|	И ПриходныйОрдерСклад.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСклад.Отменен = ЛОЖЬ
	|	И (ПриходныйОрдерСклад.Поставщик = &Поставщик
	|			ИЛИ &Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПриходныйОрдерСклад.Поставщик,
	|	ПриходныйОрдерСклад.Склад.Владелец,
	|	ПриходныйОрдерСклад.Организация";
	
	Запрос.УстановитьПараметр("ДатаНачала", БПР.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", БПР.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаПредыдущая1", БПР.ДатаПредыдущая1);
	Запрос.УстановитьПараметр("ДатаПредыдущая2", БПР.ДатаПредыдущая2);
	Запрос.УстановитьПараметр("Поставщик",БПР.Поставщик);
	Запрос.УстановитьПараметр("ФормироватьТолькоНаУказаннуюДату", БПР.ФормироватьТолькоНаУказаннуюДату);
	Запрос.Выполнить();	 
	
КонецПроцедуры

//+++АК sole 2018.05.18 ИП-00018724
// Процедура заполняет "втПриходникиСМаршрутами"
Процедура АК_СФормироватьСписокПриходниковСМаршрутами(БПР)
	
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	втПриходники.ДатаПрихода,
|	втПриходники.Ссылка КАК ПриходныйОрдер,
|	втСписокМаршрутов.Склад,
|	втСписокМаршрутов.Ссылка КАК Маршрут,
|	втПриходники.Ссылка.Организация КАК Организация
|	
|		ПОМЕСТИТЬ втПриходникиСМаршрутами
|
|ИЗ втСписокМаршрутов
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриходники ПО
|			втПриходники.Поставщик = втСписокМаршрутов.Поставщик
|		И	втПриходники.СтруктурнаяЕдиница = втСписокМаршрутов.Склад
|		И	(
|					втПриходники.Организация = втСписокМаршрутов.Организация
|				ИЛИ	ЕСТЬNULL(втСписокМаршрутов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|			)
|
|ГДЕ втСписокМаршрутов.ТоварыВМаршрутеТК = Ложь
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	втПриходники.ДатаПрихода,
|	втПриходники.Ссылка КАК ПриходныйОрдер,
|	втСписокМаршрутов.Склад,
|	втСписокМаршрутов.Ссылка КАК Маршрут,
|	втПриходники.Ссылка.Организация КАК Организация
|
|ИЗ втСписокМаршрутов
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриходники ПО
|			втПриходники.Поставщик = втСписокМаршрутов.Поставщик
|		И	втПриходники.СтруктурнаяЕдиница = втСписокМаршрутов.Склад
|		И	(
|					втПриходники.Организация = втСписокМаршрутов.Организация
|				ИЛИ	ЕСТЬNULL(втСписокМаршрутов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|			)
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.Товары КАК МаршрутыТранспортныхКомпанийТовары ПО
|			  МаршрутыТранспортныхКомпанийТовары.Ссылка = втСписокМаршрутов.Ссылка
|	
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары ПО
|			ПриходныйОрдерСкладТовары.Ссылка = втПриходники.Ссылка
|		И	МаршрутыТранспортныхКомпанийТовары.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура 
|
|ГДЕ втСписокМаршрутов.ТоварыВМаршрутеТК = Истина
|
|СГРУППИРОВАТЬ ПО
|	втПриходники.ДатаПрихода,
|	втПриходники.Ссылка,
|	втСписокМаршрутов.Склад,
|	втСписокМаршрутов.Ссылка
|";
	
	Запрос.Выполнить();	
	
КонецПроцедуры

//+++АК sole 2018.05.18 ИП-00018724
// Процедура заполняет "втПриходникиСМаршрутамиИВесами"
Процедура АК_СформироватьСписокПриходниковСМаршрутамиИВесами(БПР)
	
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ
|	втПриходникиСМаршрутами.ДатаПрихода,
|	втПриходникиСМаршрутами.ПриходныйОрдер,
|	втПриходникиСМаршрутами.Склад,
|	втПриходникиСМаршрутами.Маршрут,
|	втПриходникиСМаршрутами.Организация,
|	СУММА(ЕСТЬNULL(ПриходныйОрдерСкладТовары.Количество, 0) * ЕСТЬNULL(ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес, 0)) КАК Вес
|		
|		ПОМЕСТИТЬ втПриходникиСМаршрутамиИВесами
|	
|ИЗ втПриходникиСМаршрутами
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары ПО
|			ПриходныйОрдерСкладТовары.Ссылка = втПриходникиСМаршрутами.ПриходныйОрдер
|
|СГРУППИРОВАТЬ ПО
|	втПриходникиСМаршрутами.ДатаПрихода,
|	втПриходникиСМаршрутами.ПриходныйОрдер,
|	втПриходникиСМаршрутами.Склад,
|	втПриходникиСМаршрутами.Маршрут,
|	втПриходникиСМаршрутами.Организация
|
|ИНДЕКСИРОВАТЬ ПО
|	втПриходникиСМаршрутами.ПриходныйОрдер
|";
	Запрос.Выполнить();
	
КонецПроцедуры 

//+++АК sole 2018.05.21 ИП-00018724
Процедура АК_ОтобразитьСписокПоставщиковБезМаршрутов(БПР)
	
	Перем Запрос;
	
	Если БПР.ВыводитьСообщения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	втПриходники.Поставщик		
|
|		ПОМЕСТИТЬ втСписокПоставщиков
|
|ИЗ втПриходники
|СГРУППИРОВАТЬ ПО втПриходники.Поставщик
|ИНДЕКСИРОВАТЬ ПО втПриходники.Поставщик	
|
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	втСписокПоставщиков.Поставщик
|
|ИЗ втСписокПоставщиков
|	ЛЕВОЕ СОЕДИНЕНИЕ
|		(
|			ВЫБРАТЬ
|           	втПриходникиСМаршрутами.ПриходныйОрдер.Поставщик КАК Поставщик
|		    ИЗ втПриходникиСМаршрутами
|				СГРУППИРОВАТЬ ПО втПриходникиСМаршрутами.ПриходныйОрдер.Поставщик
|        ) КАК ПоставщикиМаршрутов
|        ПО
|				ПоставщикиМаршрутов.Поставщик = втСписокПоставщиков.Поставщик
|ГДЕ
|		ПоставщикиМаршрутов.Поставщик ЕСТЬ Null	
|";
	Выборка = Запрос.Выполнить().Выбрать();
	  
	Пока Выборка.Следующий() Цикл
		Сообщить("Для поставщика """ + Строка(Выборка.Поставщик) + """ не найден маршрут!");
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.05.18 ИП-00018724
// Функция заполняет "тзМаршрутыСТарифами"
Функция АК_СформироватьСписокМаршрутовСТарифами(БПР)
	
	Перем Запрос;
	Запрос = БПР.Запрос;
	
	Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	втПриходникиСМаршрутамиИВесами.ДатаПрихода,
|	втПриходникиСМаршрутамиИВесами.Маршрут,
|   СУММА(втПриходникиСМаршрутамиИВесами.Вес) КАК ОбщийВесРейса
|
|   	ПОМЕСТИТЬ вт1
|
|ИЗ втПриходникиСМаршрутамиИВесами
|СГРУППИРОВАТЬ ПО
|	втПриходникиСМаршрутамиИВесами.ДатаПрихода,
|	втПриходникиСМаршрутамиИВесами.Маршрут
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	вт1.ДатаПрихода,
|	вт1.Маршрут,
|	вт1.ОбщийВесРейса,
|	втРегистрТарифовНаПеревозкуСИнтерваламиДат.ЕдиныйТариф,
|
|	ВЫБОР 
|		КОГДА втРегистрТарифовНаПеревозкуСИнтерваламиДат.ЕдиныйТариф = Истина
|			ТОГДА втРегистрТарифовНаПеревозкуСИнтерваламиДат.Период
|		ИНАЧЕ втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.Период
|	КОНЕЦ КАК Период,
|
|	МИНИМУМ(вт1.ОбщийВесРейса - ЕСТЬNULL(втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.ВесОт,0)) КАК МинимальнаяРазность
|
|		ПОМЕСТИТЬ вт2
|
|ИЗ вт1
|	ЛЕВОЕ СОЕДИНЕНИЕ втРегистрТарифовНаПеревозкуСИнтерваламиДат ПО
|			втРегистрТарифовНаПеревозкуСИнтерваламиДат.Маршрут = вт1.Маршрут
|		И	вт1.ДатаПрихода >= втРегистрТарифовНаПеревозкуСИнтерваламиДат.ДатаС
|		И	вт1.ДатаПрихода < втРегистрТарифовНаПеревозкуСИнтерваламиДат.ДатаДо
|
|	ЛЕВОЕ СОЕДИНЕНИЕ втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами ПО
|			втРегистрТарифовНаПеревозкуСИнтерваламиДат.ЕдиныйТариф = Ложь
|		И	втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.Маршрут = вт1.Маршрут
|		И	втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.ВесОт < вт1.ОбщийВесРейса
|		И	вт1.ДатаПрихода >= втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.ДатаС
|		И	вт1.ДатаПрихода < втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.ДатаДо
|
|
|СГРУППИРОВАТЬ ПО
|	вт1.ДатаПрихода,
|	вт1.Маршрут,
|	вт1.ОбщийВесРейса,
|	втРегистрТарифовНаПеревозкуСИнтерваламиДат.ЕдиныйТариф,
|	ВЫБОР 
|		КОГДА втРегистрТарифовНаПеревозкуСИнтерваламиДат.ЕдиныйТариф = Истина
|			ТОГДА втРегистрТарифовНаПеревозкуСИнтерваламиДат.Период
|		ИНАЧЕ втРегистрТарифовНаПеревозкуСИнтерваламиДатИВесами.Период
|	КОНЕЦ
|
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	вт2.ДатаПрихода,
|	вт2.Маршрут,
|	вт2.Маршрут.Перевозчик КАК Перевозчик,
|	вт2.ОбщийВесРейса,
|	втРегистрВодителейПоМаршрутуСИнтерваламиДат.Водитель,
|	втРегистрВодителейПоМаршрутуСИнтерваламиДат.Автомобиль,
|	вт2.ЕдиныйТариф,
|   МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.ВариантРасчетаНДС) КАК ВариантРасчетаНДС,
|   МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.СтавкаНДС) КАК СтавкаНДС,
|   МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.Сумма) КАК СуммаТариф,
|   МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.СуммаНДС) КАК СуммаНДСТариф,
|	МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.ЦенаЗаКг) КАК ЦенаЗаКг
|
|ИЗ вт2
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту ПО
|			ТарифыНаДоставкуПоМаршруту.Период = вт2.Период		
|		И	ТарифыНаДоставкуПоМаршруту.Маршрут = вт2.Маршрут
|       И	(   
|					вт2.ЕдиныйТариф = Ложь И (вт2.ОбщийВесРейса - ТарифыНаДоставкуПоМаршруту.ВесОт) = вт2.МинимальнаяРазность
|				ИЛИ ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф = Истина
|			)
|
|   ЛЕВОЕ СОЕДИНЕНИЕ втРегистрВодителейПоМаршрутуСИнтерваламиДат ПО
|			втРегистрВодителейПоМаршрутуСИнтерваламиДат.Маршрут = вт2.Маршрут
|		И	вт2.ДатаПрихода >= втРегистрВодителейПоМаршрутуСИнтерваламиДат.ДатаС
|		И	вт2.ДатаПрихода < втРегистрВодителейПоМаршрутуСИнтерваламиДат.ДатаДо
|
|СГРУППИРОВАТЬ ПО
|	вт2.ДатаПрихода,
|	вт2.Маршрут,
|	вт2.ОбщийВесРейса,
|	вт2.ЕдиныйТариф,
|	втРегистрВодителейПоМаршрутуСИнтерваламиДат.Водитель,
|	втРегистрВодителейПоМаршрутуСИнтерваламиДат.Автомобиль
|
|;
|///////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ вт1;
|УНИЧТОЖИТЬ вт2;
|";
		тзМаршрутыСТарифами = Запрос.Выполнить().Выгрузить();
		Возврат тзМаршрутыСТарифами;
	
КонецФункции

//+++АК sole 2018.05.18 ИП-00018724
Функция АК_ВыгрузитьПриходникиСМаршрутамиИВесами(БПР)
	
	Перем Запрос; 
	Запрос = БПР.Запрос;
	
	Запрос.Текст = 
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	* 
|ИЗ втПриходникиСМаршрутамиИВесами
|УПОРЯДОЧИТЬ ПО
|	втПриходникиСМаршрутамиИВесами.ДатаПрихода,
|	втПриходникиСМаршрутамиИВесами.Маршрут,
|	втПриходникиСМаршрутамиИВесами.Организация
|";
	
	Возврат  Запрос.Выполнить().Выгрузить();
КонецФункции

//+++АК sole 2018.05.21 ИП-00018724
Процедура АК_СформироватьМаршрутныеЛисты(БПР)
	
	Перем тзМаршрутыСТарифами;
	Перем тзПриходникиСМаршрутамиИВесами;
	Перем ПредОрганизация;
	Перем рСуммаРейса;
	Перем рСуммаНДС;

	
	ВидПеревозкиДоставкаНаСклад = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	тзМаршрутыСТарифами = АК_СформироватьСписокМаршрутовСТарифами(БПР);
	тзПриходникиСМаршрутамиИВесами = АК_ВыгрузитьПриходникиСМаршрутамиИВесами(БПР);
	
	СтруктураОтбора = Новый Структура("ДатаПрихода, Маршрут");
	
	Для Каждого Элем Из тзМаршрутыСТарифами Цикл
		
		Если Элем.ОбщийВесРейса = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Элем);
		мПрихоники = тзПриходникиСМаршрутамиИВесами.НайтиСтроки(СтруктураОтбора);
		
		Если мПрихоники.Количество() = 0  Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элем.ЦенаЗаКг Тогда
			СуммаРейса = Элем.ОбщийВесРейса * Элем.СуммаТариф;
			СуммаНДС = Элем.ОбщийВесРейса * Элем.СуммаНДСТариф;
		Иначе
			СуммаРейса = Элем.СуммаТариф;
			СуммаНДС = Элем.СуммаНДСТариф;
		КонецЕсли;
		
		ОстатокСумма = СуммаРейса;
		ОстатокНДС = СуммаНДС;
		
		ПредОрганизация = Неопределено;
		ПредСклад = Неопределено;
		
		оМаршрутныйЛист = Неопределено;
		оПревМаршрутныйЛист = Неопределено;
		
		Для Каждого Стр Из мПрихоники Цикл
			
			Если ПредОрганизация <> Стр.Организация Тогда
				Если оМаршрутныйЛист <> Неопределено Тогда
					
					рСуммаРейса = Окр(рСуммаРейса, 2);
					рСуммаНДС = Окр(рСуммаНДС, 2);
					
					ОстатокСумма = ОстатокСумма - рСуммаРейса;
					ОстатокНДС = ОстатокНДС - рСуммаНДС;
					
					оМаршрутныйЛист.Сумма = рСуммаРейса;
					оМаршрутныйЛист.СуммаНДС = рСуммаНДС;
					
					Если оПревМаршрутныйЛист <> Неопределено Тогда
						оМаршрутныйЛист.СвязанСМаршрутнымЛистом = оПревМаршрутныйЛист.Ссылка;
					КонецЕсли;
					
					ЗаписатьМаршрутныйЛист(оМаршрутныйЛист, БПР.ВыводитьСообщения);
					
					оПревМаршрутныйЛист = оМаршрутныйЛист;
					
				КонецЕсли;
				
				оМаршрутныйЛист = Документы.МаршрутныйЛист.СоздатьДокумент();
				оМаршрутныйЛист.Автор = ТекПользователь;
				оМаршрутныйЛист.Дата = КонецДня(Элем.ДатаПрихода);
				оМаршрутныйЛист.Организация = Стр.Организация;
				оМаршрутныйЛист.ВидПеревозки = ВидПеревозкиДоставкаНаСклад; 
				оМаршрутныйЛист.СтруктурноеПодразделение = Стр.Склад;	
				оМаршрутныйЛист.МаршрутТранспортныхКомпаний	= Элем.Маршрут;
				оМаршрутныйЛист.Водитель = Элем.Водитель;
				оМаршрутныйЛист.Автомобиль = Элем.Автомобиль;
				оМаршрутныйЛист.ВариантРасчетаНДС = Элем.ВариантРасчетаНДС;
				оМаршрутныйЛист.СтавкаНДС = Элем.СтавкаНДС;
				оМаршрутныйЛист.Перевозчик = Элем.Перевозчик;
				рСуммаРейса = 0;
				рСуммаНДС = 0;
				
				ПредОрганизация = Стр.Организация;
			КонецЕсли;
				НСтр = оМаршрутныйЛист.ПриходныеОрдера.Добавить();
				НСтр.ПриходныйОрдер = Стр.ПриходныйОрдер;
				
				// Проверка "Элем.ОбщийВесРейса" на 0 в начале цикла перебора строк "тзМаршрутыСТарифами"
				КПВ = Стр.Вес / Элем.ОбщийВесРейса;
				
				рСуммаРейса = рСуммаРейса + СуммаРейса * КПВ;
				рСуммаНДС = рСуммаНДС +  СуммаНДС * КПВ;
				
				Если ПредСклад <> Неопределено И ПредСклад <> Стр.Склад Тогда
					оМаршрутныйЛист.СтруктурноеПодразделение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
				КонецЕсли;
				
				ПредСклад = Стр.Склад;
		КонецЦикла;
		
		оМаршрутныйЛист.Сумма = ОстатокСумма;
		оМаршрутныйЛист.СуммаНДС = ОстатокНДС;
		
		Если оПревМаршрутныйЛист <> Неопределено Тогда
			оМаршрутныйЛист.СвязанСМаршрутнымЛистом = оПревМаршрутныйЛист.Ссылка;
		КонецЕсли;
		
		ЗаписатьМаршрутныйЛист(оМаршрутныйЛист, БПР.ВыводитьСообщения);
		
	КонецЦикла;
	
	
КонецПроцедуры

//+++АК sole 2018.05.28 ИП-00018724
Процедура ЗаписатьМаршрутныйЛист(оМаршрутныйЛист, ВыводитьСообщения)
	
		Попытка
			оМаршрутныйЛист.Записать(РежимЗаписиДокумента.Проведение);
			
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Создан документ """ + оМаршрутныйЛист + """");
			КонецЕсли;
			
		Исключение
			Если ВыводитьСообщения = Истина Тогда
				Сообщить("Не удалось провести документ " +оМаршрутныйЛист);
			КонецЕсли;
		КонецПопытки;
		
КонецПроцедуры
//		