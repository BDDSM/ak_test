
#Область ПрограммныйИнтерфейс

//+++АК LATV 2018.12.06 ИП-00020651
Процедура СодатьДокументыПоРаспределениюНаСервере(СтруктураНастроек, АдресРезультатаВоВременномХранилище) Экспорт

	// LATV. Перенес ПолучитьРейсПоМаршруту в обработку. Если СкладыСервер.ПолучитьРейсПоМаршруту не используется во внешних обработках, то удалить
	
	УИДРаспределения = СтруктураНастроек.УИДРаспределения;
	Если ЗначениеЗаполнено(УИДРаспределения) Тогда
		РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.ЗагрузкаРасходников"));
	КонецЕсли;
	
	Результат = СоздатьДокументыПоРаспределению(СтруктураНастроек, Ложь);
	
	Если ЗначениеЗаполнено(УИДРаспределения) Тогда
		РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(УИДРаспределения, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияТоваров.РасходникиЗагружены"));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультатаВоВременномХранилище);

КонецПРоцедуры

//+++АК LATV 2018.12.06 ИП-00020651
Процедура СодатьДокументыПоРаспределениюНаСервереПоЗонам(СтруктураНастроек, АдресРезультатаВоВременномХранилище) Экспорт

	Результат = СоздатьДокументыПоРаспределению(СтруктураНастроек, Истина);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультатаВоВременномХранилище);

КонецПроцедуры

//+++АК LATV 2018.10.17 ИП-00020001
Функция МагазиныКПересчетуНазначены(Дата) Экспорт

	Результат = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьМагазин
		|ИЗ
		|	РегистрСведений.МагазиныКПересчетуНаДату КАК МагазиныКПересчетуНаДату
		|ГДЕ
		|	МагазиныКПересчетуНаДату.Дата = &Дата
		|	И НЕ МагазиныКПересчетуНаДату.ДобавленСкладом");
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.10.15 ИП-00020001
// Процедура выбирает случайным образом магазины и назначает их к пересчету на дату распределения.
// Далее эти данные используются при записи расходников
//
Процедура НазначитьМагазиныКПересчетуДатуРаспределения(СтруктураНастроек)

	// Очистка устаревших записей
	ДатаРаспределения = СтруктураНастроек.ДатаРаспределения;
	
	Набор = РегистрыСведений.МагазиныКПересчетуНаДату.СоздатьНаборЗаписей();
	Набор.Отбор.Дата.Установить(ДатаРаспределения - 7*86400);
	Набор.Записать(); //подчищаем чтобы регистр не забивался этой второстепенной инфой
	
	// Проверка повторного выполнения
	Если МагазиныКПересчетуНазначены(ДатаРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	//Настроить в алгоритме попадания в контрольную группу магазинов более сложный вероятностный алгоритм
	//а) 5% вероятность попадания, если магазин был в контрольной группе или обычной поставке с пересчётом вчера;
	//б) 10%, если магазин был - позавчера;
	//б) 15%, если - 3 дня назад;
	//в) 20%, если - 4 дня назад;
	//г) 25%, если - 5 дней назад;
	//д) 30%, если - 6 дней назад;
	//е) 35%, если - 7 дней назад;
	//ё) 40%, если - 8 дней назад;
	//ж) 45%, если - 9 дней назад;
	//з) 50%, если - 10 дней назад;
	//и) 55%, если - 11 дней назад;
	//й) 60%, если - 12 дней назад;
	//к) 65%, если - 13 дней назад;
	//л) 70%, если - 14 дней назад;
	//м) 75%, если - 15 дней назад;
	//н) 80%, если - 16 дней назад;
	//о) 85%, если - 17 дней назад;
	//п) 90%, если - 18 дней назад;
	//р) 95%, если - 19 дней назад;
	//с) 100%, если - 20 дней назад.
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДатаРаспределения - 86400 * 20);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаРаспределения));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Получатель,
		|	МАКСИМУМ(РасходныйОрдерСклад.ДатаРаспределения) КАК ДатаРаспределения
		|ПОМЕСТИТЬ ВТ_Доки
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И РасходныйОрдерСклад.Проведен
		|	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСклад.ПриемкаВМагазинеБезПересчета В (2, -2, 0)
		|	И (РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|	И (ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы)) <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ПриемкаТовараБезПересчета
		|	И (ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ДатаЗакрытия > &ДатаКон)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Получатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка,
		|	ЕСТЬNULL(ВТ_Доки.ДатаРаспределения, &ДатаНач) КАК ДатаПоследнегоПересчета
		|ИЗ
		|	ВТ_Доки КАК ВТ_Доки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ВТ_Доки.Получатель = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И (СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СтруктурныеЕдиницы.ДатаЗакрытия > &ДатаКон)
		|	И СтруктурныеЕдиницы.ПриемкаТовараБезПересчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СлучЧисло = ГСЧ.СлучайноеЧисло(1, 100);
		ПроцентПопадания = Цел((ДатаРаспределения - Выборка.ДатаПоследнегоПересчета) / 86400) * 5;
		Если ПроцентПопадания >= СлучЧисло Тогда
			ЗаписьРегистра = РегистрыСведений.МагазиныКПересчетуНаДату.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Дата		= ДатаРаспределения;
			ЗаписьРегистра.Магазин	= Выборка.Ссылка;
			ЗаписьРегистра.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#Область ЗагрузкаРаспределения

//+++АК LATV 2018.12.06 ИП-00020651
Функция СоздатьДокументыПоРаспределению(СтруктураНастроек, ПоЗонам = Ложь)

	// Описание:
	//	2 кнопки:
	//		1. Создать документы по распределению (группы УРЗ) - обычная загрузка распределения
	//			а) Если склад Разборки (НеОчищатьЗаданияНаРазборкуПриНовомРаспределении = Истина), то создаются документы ЗаданиеНаРазборку.
	//			После этог в обработке ЗаполнитьРасходникиПоЗаданиямНаРазборку создаются документы РасходныйОрдерСклад и добавляются в МаршрутныйЛист
	//			
	//			б) Если склад Сборки (НеОчищатьЗаданияНаРазборкуПриНовомРаспределении = Ложь),
	//			то сразу создаются документы РасходныйОрдерСклад и добавляются в МаршрутныйЛист
	//			
	//		2.Создать документы по зонам отгрузки - спец. кнопка для заморозки. Распределяется со склада заморозки, а расходники из зоны отгрузки зазморозки, т.е. с разных складов.
	//		и сначала должны формироваться перемещения, а потом расходники.
	//			а) Создаются документы РасходныйОрдерСклад по заморозке и добавляются в МаршрутныйЛист
	
	УстановитьПривилегированныйРежим(Истина);
	
	Склад = СтруктураНастроек.Склад;
	ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "НеОчищатьЗаданияНаРазборкуПриНовомРаспределении");
	
	Если ДанныеСклада.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении
	 Или Не ПоЗонам Тогда
		НазначитьМагазиныКПересчетуДатуРаспределения(СтруктураНастроек);
	КонецЕсли;
	
	СписокОшибок = НовыйСписокОшибок();
	Если ДанныеСклада.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда
		КоличествоДокументов = СодатьДокументыПоРаспределениюНаСервере_ЗаданияНаРазборку(СтруктураНастроек, СписокОшибок);
	ИначеЕсли Не ПоЗонам Тогда
		КоличествоДокументов = СодатьДокументыПоРаспределениюНаСервере_РО(СтруктураНастроек, СписокОшибок);
	Иначе
		КоличествоДокументов = СодатьДокументыПоРаспределениюНаСервереПоЗонам_РО(СтруктураНастроек, СписокОшибок);
	КонецЕсли;
	
	Документ_ОшибкиЗагрузки = Неопределено;
	Если СписокОшибок.Количество() > 0 Тогда
		Документ_ОшибкиЗагрузки = СформироватьДокументОшибкиЗагрузки(СтруктураНастроек, СписокОшибок);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Обработано",				КоличествоДокументов);
	Результат.Вставить("Документ_ОшибкиЗагрузки",	Документ_ОшибкиЗагрузки);
	Возврат Результат;

КонецФункции

//+++АК LATV 2018.12.14 ИП-00020711
Функция СодатьДокументыПоРаспределениюНаСервере_ЗаданияНаРазборку(СтруктураНастроек, СписокОшибок)

	ДатаРаспределения			= СтруктураНастроек.ДатаРаспределения;
	СтруктурноеПодразделение	= СтруктураНастроек.СтруктурноеПодразделение;
	Склад						= СтруктураНастроек.Склад;
	Организация					= СтруктураНастроек.Организация;
	НомерРаспределения			= СтруктураНастроек.НомерРаспределения;
	НомераРаспределений			= Новый Соответствие;
	
	ДлительныеОперации.СообщитьПрогресс(0,"Блокировка документов");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад"					, Склад);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	
	Запрос.Текст = ТекстЗапросаПолучитьЗаданияНаРазборкуДляПерезаписи();
	тзЗаданияСкладыНоменклатура = Запрос.Выполнить().Выгрузить();
	
	ДлительныеОперации.СообщитьПрогресс(0, "Получение данных распределения");
	
	Запрос.Текст = ТекстЗапросаПолучитьСкладыТТ();
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[1].Выгрузить();
	ТабСклады 	= Результаты[2].Выгрузить();
	
	ТаблицаДанных = ДанныеРаспределения(СтруктураНастроек, ТабТТ, ТабСклады, Ложь);
	ТаблицаДанных.Колонки.Добавить("Организация",			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ДатаПроизводства",		Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ВВедомостиНаРазборку",	Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЗаданиеНаРазборку",		Новый ОписаниеТипов("ДокументСсылка.ЗаданиеНаРазборку"));
	
	// УДАЛЕНА Очистка документов от предыдущих загрузок
	
	// Заполнение ссылок
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		
		СтрокиЗадания = тзЗаданияСкладыНоменклатура.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.Склад, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Если СтрокиЗадания.Количество() > 0 Тогда
			СтрокаТаб.ЗаданиеНаРазборку = СтрокиЗадания[0].Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	//распределим здесь также по датам производства остатки
	ДлительныеОперации.СообщитьПрогресс(0, "Распределение по датам производства");
	
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиТоваровНаСкладе();
	ТабОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТабОстаткиНоменклатуры.Индексы.Добавить("Склад, Номенклатура, Характеристика");
	РаспределитьПоДатамПроизводства(ТаблицаДанных, ТабОстаткиНоменклатуры, Истина, СписокОшибок);
	
	// Очистка нулевых строк
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТаблицаДанных[КолвоСтрок - н].Количество <= 0 Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "Распределение по датам производства");
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаРаспределения));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаРаспределения));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.ТорговаяТочка,
		|	Таб.Номенклатура,
		|	Таб.Характеристика,
		|	Таб.ДатаПроизводства,
		|	Таб.НомерРаспределения,
		|	Таб.Количество,
		|	Таб.ЗаданиеНаРазборку
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗ_Запрос.Организация,
		|	ВЗ_Запрос.Склад КАК Склад,
		|	СкладыСпр.Владелец КАК СкладВладелец,
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.ЗаданиеНаРазборку,
		|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
		|	НоменклатураСпр.ЕдиницаХраненияОстатков КАК ЕдИзм,
		|	ВЗ_Запрос.Характеристика КАК Характеристика,
		|	ВЗ_Запрос.ДатаПроизводства,
		|	ВЗ_Запрос.НомерРаспределения,
		|	ВЗ_Запрос.Количество,
		|	ВЫБОР
		|		КОГДА НЕ КоличествоВКоробкеСрезПоследних.Характеристика ЕСТЬ NULL
		|			ТОГДА ВЗ_Запрос.Количество / ВЫБОР
		|					КОГДА КоличествоВКоробкеСрезПоследних.Количество = 0
		|						ТОГДА 1
		|					ИНАЧЕ КоличествоВКоробкеСрезПоследних.Количество
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЗ_Запрос.Количество / (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК ЧИСЛО(15, 3)))
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоКоробок,
		|	ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0) КАК КоличествоВКоробке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТаблицаДанных.Организация КАК Организация,
		|		ВТ_ТаблицаДанных.Склад КАК Склад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка КАК ТорговаяТочка,
		|		ВТ_ТаблицаДанных.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
		|		ВТ_ТаблицаДанных.Номенклатура КАК Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика КАК Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства КАК ДатаПроизводства,
		|		МАКСИМУМ(ВТ_ТаблицаДанных.НомерРаспределения) КАК НомерРаспределения,
		|		СУММА(ВТ_ТаблицаДанных.Количество) КАК Количество
		|	ИЗ
		|		ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|	ГДЕ
		|		ВТ_ТаблицаДанных.Количество > 0
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ТаблицаДанных.Организация,
		|		ВТ_ТаблицаДанных.Склад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка,
		|		ВТ_ТаблицаДанных.ЗаданиеНаРазборку,
		|		ВТ_ТаблицаДанных.Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства) КАК ВЗ_Запрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыСпр
		|		ПО ВЗ_Запрос.Склад = СкладыСпр.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО ВЗ_Запрос.Номенклатура = НоменклатураСпр.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
		|		ПО ВЗ_Запрос.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
		|			И ВЗ_Запрос.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
		|			И (СкладыСпр.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ВЗ_Запрос.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ КоличествоВКоробкеСрезПоследних.Характеристика ЕСТЬ NULL
		|				ТОГДА ВЗ_Запрос.Количество / ВЫБОР
		|						КОГДА КоличествоВКоробкеСрезПоследних.Количество = 0
		|							ТОГДА 1
		|						ИНАЧЕ КоличествоВКоробкеСрезПоследних.Количество
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВЗ_Запрос.Количество / (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК ЧИСЛО(15, 3)))
		|				КОНЕЦ
		|		КОНЕЦ > 0.3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_Запрос.Номенклатура,
		|	ВЗ_Запрос.Характеристика,
		|	ВЗ_Запрос.Склад,
		|	ВЗ_Запрос.ЗаданиеНаРазборку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаДанных";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	х100 = Выборка.Количество();
	х=0;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Создание документов");
	
	КоличествоДокументов = 0;
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаРазборку") Цикл
					Если НЕ ЗначениеЗаполнено(Выборка.ЗаданиеНаРазборку) Тогда
						ЗаданиеНаРазборкуОбъект = Документы.ЗаданиеНаРазборку.СоздатьДокумент();
						ЗаданиеНаРазборкуОбъект.Дата			= ДатаРаспределения;
						ЗаданиеНаРазборкуОбъект.УстановитьНовыйНомер();
						ЗаданиеНаРазборкуОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
						ЗаданиеНаРазборкуОбъект.Склад 			= Выборка.Склад;
						ЗаданиеНаРазборкуОбъект.Номенклатура	= Выборка.Номенклатура;
						ЗаданиеНаРазборкуОбъект.Характеристика  = Выборка.Характеристика;
						ЗаданиеНаРазборкуОбъект.Напечатан		= Ложь;
						ЗаданиеНаРазборкуОбъект.Комментарий		= "#Загрузить распределение";
					Иначе
						ЗаданиеНаРазборкуОбъект = Выборка.ЗаданиеНаРазборку.ПолучитьОбъект();
					КонецЕсли;
					Пока Выборка.Следующий() Цикл
						х = х+1;
						КоличествоКЗагрузке = Выборка.Количество;
						Если КоличествоКЗагрузке <= 0.001 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокиТовар = ЗаданиеНаРазборкуОбъект.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства", Выборка.ТорговаяТочка, Выборка.ДатаПроизводства));
						Если СтрокиТовар.Количество() > 0 Тогда
							СтрокаТовар = СтрокиТовар[0];
						Иначе
							СтрокаТовар = ЗаданиеНаРазборкуОбъект.Товары.Добавить();
						КонецЕсли;	
						СтрокаТовар.СтруктурнаяЕдиница 	= Выборка.ТорговаяТочка;
						СтрокаТовар.ДатаПроизводства 	= Выборка.ДатаПроизводства;
						СтрокаТовар.ДатаПроизводстваПред 	= Выборка.ДатаПроизводства;
						
						СтрокаТовар.НомерРаспределения	= Выборка.НомерРаспределения;
						СтрокаТовар.КоличествоУРЗ		=  КоличествоКЗагрузке+СтрокаТовар.Количество;
						СтрокаТовар.Количество	 		=  КоличествоКЗагрузке+СтрокаТовар.Количество;
						СтрокаТовар.КоличествоКоробок	 		= Окр(Выборка.КоличествоКоробок,1)+СтрокаТовар.КоличествоКоробок;
						
						НомераРаспределений.Вставить(Выборка.НомерРаспределения);
						
						ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");
					КонецЦикла;
					
					Если Не ЗаданиеНаРазборкуОбъект.ЭтоНовый()
					 Или (ЗаданиеНаРазборкуОбъект.Товары.Количество() > 0 И ЗаданиеНаРазборкуОбъект.Модифицированность()) Тогда
						
						Документы.ЗаданиеНаРазборку.УпорядочитьСтрокиТоваров(ЗаданиеНаРазборкуОбъект);
						
						ЗаданиеНаРазборкуОбъект.ОбменДанными.Загрузка = Истина;
						ЗаданиеНаРазборкуОбъект.Проведен = Истина;
						Попытка
							ЗаданиеНаРазборкуОбъект.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,ЗаданиеНаРазборкуОбъект.Ссылка,-1,ОписаниеОшибки());
						КонецПопытки;
						
						КоличествоДокументов = КоличествоДокументов + 1;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьСостояниеПоНомерамРаспределений(НомераРаспределений, Перечисления.СостоянияРаспределенияТоваров.РасходникиЗагружены);
	ПеренестиВАрхивОстаткиРаспределенныеПоТТSQL(НомераРаспределений);
	
	СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, Неопределено, КоличествоДокументов, "Ок");
	Возврат КоличествоДокументов;

КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Функция СодатьДокументыПоРаспределениюНаСервере_РО(СтруктураНастроек, СписокОшибок)

	// ВАЖНО! Очень похоже на СодатьДокументыПоРаспределениюНаСервере_РО.
	//	В случае доработок необходимо проанализировать обе функции
	
	Склад						= СтруктураНастроек.Склад;
	ДатаРаспределения			= СтруктураНастроек.ДатаРаспределения;
	Организация					= СтруктураНастроек.Организация;
	СтруктурноеПодразделение	= СтруктураНастроек.СтруктурноеПодразделение;
	НомераРаспределений			= Новый Соответствие;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Получение данных распределения");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад"					, Склад);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	
	Запрос.Текст = ТекстЗапросаПолучитьСкладыТТ();
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[1].Выгрузить();
	ТабСклады 	= Результаты[2].Выгрузить();
	
	ТаблицаДанных = ДанныеРаспределения(СтруктураНастроек, ТабТТ, ТабСклады, Ложь);
	ТаблицаДанных.Колонки.Добавить("Организация",			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ДатаПроизводства",		Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ВВедомостиНаРазборку",	Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Маршрут",				Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	ТаблицаДанных.Колонки.Добавить("Автомобиль",			Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	ТаблицаДанных.Колонки.Добавить("РасходныйОрдер",		Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	
	ДлительныеОперации.СообщитьПрогресс(0, "Чтение документов от предыдущих загрузок");
	
	//почистим перед загрузкой документы расходных ордеров от предыдущей загрузки
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Склад КАК Склад,
		|	РасходныйОрдерСклад.Склад.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении КАК НеОчищатьЗаданияНаРазборкуПриНовомРаспределении,
		|	РасходныйОрдерСклад.Получатель КАК ТорговаяТочка,
		|	РасходныйОрдерСклад.Организация
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ПО РасходныйОрдерСкладТовары.Ссылка = РасходныйОрдерСклад.Ссылка
		|ГДЕ
		|	РасходныйОрдерСклад.ПометкаУдаления = ЛОЖЬ
		|	И РасходныйОрдерСкладТовары.КоличествоУРЗ > 0
		|	И НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.НеОбработан)
		|	И РасходныйОрдерСклад.Склад.Владелец = &СтруктурноеПодразделение
		|	И РасходныйОрдерСклад.Организация = &Организация
		|	И (РасходныйОрдерСклад.Склад = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|	И (РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад.Организация КАК Организация,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад.Владелец = &СтруктурноеПодразделение
		|				И Склад.Организация = &Организация
		|				И ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	ДатаПроизводства";
	
	// СФОРМИРОВАТЬ ПОЗИЦИИ С ЗАДАНИЯМИ НА РАЗБОРКУ
	ТЗПозицииСЗаданиямиНаРазборку = Новый ТаблицаЗначений;
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("Номенклатура");
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("Характеристика");
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("ТТ");
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("Количество");
	ТЗПозицииСЗаданиямиНаРазборку.Индексы.Добавить("Номенклатура, Характеристика, ТТ");
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабРасходникиВБазе = Результаты[0].Выгрузить();
	
	//почистим доки нераспечатанные
	ТекущаяОперация = "Очистка документов от предыдущих загрузок";
	ДлительныеОперации.СообщитьПрогресс(0, ТекущаяОперация);
	
	х100 = ТабРасходникиВБазе.Количество();
	х = 0;
	
	Для Каждого СтрокаРасходник Из ТабРасходникиВБазе Цикл
		х = х+1;
		ДокОбъект = СтрокаРасходник.Ссылка.ПолучитьОбъект();
		КолвоСтрок = ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			ТекСтрока = ДокОбъект.Товары[КолвоСтрок - н];
			Если ТекСтрока.КоличествоУРЗ > 0 Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ЗаданиеНаРазборку) И СтрокаРасходник.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда
					НовСтр=ТЗПозицииСЗаданиямиНаРазборку.Добавить();
					НовСтр.Номенклатура		= ТекСтрока.Номенклатура;
					НовСтр.Характеристика	= ТекСтрока.Характеристика;
					НовСтр.ТТ				= ДокОбъект.Получатель;
					НовСтр.Количество		= ТекСтрока.КоличествоУРЗ;
				Иначе
					ДокОбъект.Товары.Удалить(КолвоСтрок - н);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДокОбъект.Модифицированность() Тогда 
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Проведен = Истина;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, ДокОбъект.Ссылка, -1,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), ТекущаяОперация);
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, ТекущаяОперация);
	
	// Данный блок убрать после того как будет реализован учет позиций с заданиями на разборку на СКЛ
	#Область КорректировкаТаблицыДанных
	ТаблицаДанных.Индексы.Добавить("Номенклатура, Характеристика, ТорговаяТочка");
	Если ТЗПозицииСЗаданиямиНаРазборку.Количество() > 0 Тогда 
		ОткорректироватьТаблицуДанных(ТаблицаДанных, ТЗПозицииСЗаданиямиНаРазборку);
	КонецЕсли;
	#КонецОбласти
	
	// УДАЛЕНО вычитание уже загруженного в предыдйщих документах количества
	
	//распределение остатков по датам производства
	ДлительныеОперации.СообщитьПрогресс(0, "Распределение по датам производства");
	
	ТабОстаткиНоменклатуры = Результаты[1].Выгрузить();
	ТабОстаткиНоменклатуры.Индексы.Добавить("Склад, Номенклатура, Характеристика");
	РаспределитьПоДатамПроизводства(ТаблицаДанных, ТабОстаткиНоменклатуры, Ложь, СписокОшибок);
	
	// Очистка нулевых строк
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТаблицаДанных[КолвоСтрок - н].Количество <= 0 Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "Распределение по датам производства");
	
	//теперь определим расходники и маршруты, куда должна попасть номенклатура
	Запрос.УстановитьПараметр("МассивНоменклатуры",			ТаблицаДанных.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ДатаСреза",					ДатаРаспределения);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
		|ПОМЕСТИТЬ втТТ
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МаршрутыТорговыеТочки.Ссылка КАК Маршрут,
		|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|	ВЗ_НоменклатураМаршрутов.Номенклатура,
		|	ВодителиПоМаршрутуСрезПоследних.Автомобиль
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЗ_Номенклатура.Номенклатура КАК Номенклатура,
		|		ВЗ_Склады.Маршрут КАК Маршрут
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Маршруты.Ссылка КАК Маршрут,
		|			ЕСТЬNULL(МаршрутыСклады.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		|			Маршруты.Организация КАК Организация
		|		ИЗ
		|			Справочник.Маршруты КАК Маршруты
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
		|				ПО Маршруты.Ссылка = МаршрутыСклады.Ссылка
		|		ГДЕ
		|			Маршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|			И Маршруты.Организация = &Организация
		|			И Маршруты.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_Склады
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|				ДоступностьТоваровНаСкладах.Склад КАК Склад
		|			ИЗ
		|				РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
		|			ГДЕ
		|				ДоступностьТоваровНаСкладах.Номенклатура В(&МассивНоменклатуры)
		|				И ДоступностьТоваровНаСкладах.Склад.Организация = &Организация
		|				И ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурноеПодразделение) КАК ВЗ_Номенклатура
		|			ПО (ВЗ_Склады.Склад = ВЗ_Номенклатура.Склад
		|					ИЛИ ВЗ_Склады.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВЗ_НоменклатураМаршрутов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО ВЗ_НоменклатураМаршрутов.Маршрут = МаршрутыТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТТ КАК втТТ
		|		ПО (втТТ.СтруктурнаяЕдиница = МаршрутыТорговыеТочки.СтруктурнаяЕдиница)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаСреза, ) КАК ВодителиПоМаршрутуСрезПоследних
		|		ПО (МаршрутыТорговыеТочки.Ссылка = ВодителиПоМаршрутуСрезПоследних.Маршрут)
		|ГДЕ
		|	втТТ.Организация = &Организация";
		
	ТабНоменклатураМаршрутов = Запрос.Выполнить().Выгрузить();
	ТабНоменклатураМаршрутов.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	
	// Заполнение ссылок
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		
		СтрокиНоменклатуры = ТабНоменклатураМаршрутов.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаТаб.ТорговаяТочка, СтрокаТаб.Номенклатура));
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			СтрокаТаб.Маршрут = СтрокиНоменклатуры[0].Маршрут;
			СтрокаТаб.Автомобиль = СтрокиНоменклатуры[0].Автомобиль;
		КонецЕсли;
		
		СтрокиРасхОрдер = ТабРасходникиВБазе.НайтиСтроки(Новый Структура("Склад, ТорговаяТочка", СтрокаТаб.Склад, СтрокаТаб.ТорговаяТочка));
		Если СтрокиРасхОрдер.Количество() > 0 Тогда
			СтрокаТаб.РасходныйОрдер = СтрокиРасхОрдер[0].Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование документов
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таб.Склад,
		|	Таб.ТорговаяТочка,
		|	Таб.Номенклатура,
		|	Таб.Характеристика,
		|	Таб.ДатаПроизводства,
		|	Таб.НомерРаспределения,
		|	Таб.Количество,
		|	Таб.Маршрут,
		|	Таб.Автомобиль,
		|	Таб.РасходныйОрдер
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВЗ_Запрос.Склад КАК Справочник.Склады).Организация КАК Организация,
		|	ВЗ_Запрос.Склад,
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.Номенклатура,
		|	НоменклатураСпр.ЕдиницаХраненияОстатков КАК ЕдИзм,
		|	ВЗ_Запрос.Характеристика,
		|	ВЗ_Запрос.ДатаПроизводства,
		|	ВЗ_Запрос.НомерРаспределения,
		|	ВЗ_Запрос.Количество,
		|	ВЗ_Запрос.Маршрут,
		|	ВЗ_Запрос.Автомобиль,
		|	ВЗ_Запрос.РасходныйОрдер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТаблицаДанных.Склад КАК Склад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка КАК ТорговаяТочка,
		|		ВТ_ТаблицаДанных.Номенклатура КАК Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика КАК Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства КАК ДатаПроизводства,
		|		МАКСИМУМ(ВТ_ТаблицаДанных.НомерРаспределения) КАК НомерРаспределения,
		|		СУММА(ВТ_ТаблицаДанных.Количество) КАК Количество,
		|		ВТ_ТаблицаДанных.Маршрут КАК Маршрут,
		|		ВТ_ТаблицаДанных.Автомобиль КАК Автомобиль,
		|		ВТ_ТаблицаДанных.РасходныйОрдер КАК РасходныйОрдер
		|	ИЗ
		|		ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|	ГДЕ
		|		ВТ_ТаблицаДанных.Количество > 0
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ТаблицаДанных.Склад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка,
		|		ВТ_ТаблицаДанных.Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства,
		|		ВТ_ТаблицаДанных.Маршрут,
		|		ВТ_ТаблицаДанных.Автомобиль,
		|		ВТ_ТаблицаДанных.РасходныйОрдер) КАК ВЗ_Запрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО ВЗ_Запрос.Номенклатура = НоменклатураСпр.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_Запрос.Маршрут,
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.Склад,
		|	ВЗ_Запрос.РасходныйОрдер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	х100 = Выборка.Количество();
	х=0;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Создание документов");
	
	МаршрутныеЛисты = НовыйСписокМаршрутныхЛистов();
	
	КоличествоДокументов = 0;
	
	ОтгрузкаВТоргТочку	= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	СтатусНеОбработан	= Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
		//На текущую дату формируется один маршрутный лист по каждому маршруту
		ТекСтрокаМаршрутныхЛистов = ДобавитьСтрокуВСписокМаршрутныхЛистов(МаршрутныеЛисты, Выборка);
		
		Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
					Если НЕ ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
						РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
						РасхОрдерОбъект.НеМенятьДатуПриПроведении = Истина;
						РасхОрдерОбъект.Дата			= ДатаРаспределения;
						РасхОрдерОбъект.УстановитьНовыйНомер();
						РасхОрдерОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
						РасхОрдерОбъект.ВидОперации		= ОтгрузкаВТоргТочку;
						РасхОрдерОбъект.Получатель 		= Выборка.ТорговаяТочка;
						РасхОрдерОбъект.Организация		= Организация;
						РасхОрдерОбъект.Склад 			= Выборка.Склад;
						РасхОрдерОбъект.АвтозагрузкаУРЗ = Истина;
						РасхОрдерОбъект.Статус 			= СтатусНеОбработан;
						РасхОрдерОбъект.ДатаРаспределения 	= ДатаРаспределения;
					Иначе
						РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
					КонецЕсли;
					Пока Выборка.Следующий() Цикл
						х = х+1;
						КоличествоКЗагрузке = Выборка.Количество;
						Если КоличествоКЗагрузке <= 0.001 Тогда
							Продолжить;
						КонецЕсли;
						МасСтр=ТЗПозицииСЗаданиямиНаРазборку.НайтиСтроки(
							Новый Структура("Номенклатура, Характеристика, ТТ",Выборка.Номенклатура, Выборка.Характеристика, Выборка.ТорговаяТочка));
						Если МасСтр.Количество() Тогда
							Продолжить;
						КонецЕсли; 
						
						СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства));
						Если СтрокиТовар.Количество() > 0 Тогда
							СтрокаТовар = СтрокиТовар[0];
						Иначе
							СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
						КонецЕсли;	
						СтрокаТовар.Номенклатура 		= Выборка.Номенклатура;
						СтрокаТовар.Характеристика 		= Выборка.Характеристика;
						СтрокаТовар.ДатаПроизводства 	= Выборка.ДатаПроизводства;
						СтрокаТовар.НомерРаспределения	= Выборка.НомерРаспределения;
						СтрокаТовар.ЕдиницаИзмерения 	= Выборка.ЕдИзм;
						СтрокаТовар.КоличествоУРЗ 		= СтрокаТовар.КоличествоУРЗ + КоличествоКЗагрузке;
						СтрокаТовар.Количество 			= СтрокаТовар.Количество + КоличествоКЗагрузке;
						
						НомераРаспределений.Вставить(Выборка.НомерРаспределения);
						
						ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");
					КонецЦикла;
					
					Если Не РасхОрдерОбъект.ЭтоНовый()
					 Или (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
						
						РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
						РасхОрдерОбъект.ОбменДанными.Загрузка = Истина;
						РасхОрдерОбъект.Проведен = Истина;
						Попытка
							РасхОрдерОбъект.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,РасхОрдерОбъект.Ссылка,-1,ОписаниеОшибки());
						КонецПопытки;
						
						КоличествоДокументов = КоличествоДокументов+1;
						
					КонецЕсли;
					
					ТекСтрокаМаршрутныхЛистов.РасходныеОрдера.Добавить(РасхОрдерОбъект.Ссылка);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СоздатьОбновитьМаршрутныеЛисты(СтруктураНастроек, МаршрутныеЛисты, Ложь);
	
	УстановитьСостояниеПоНомерамРаспределений(НомераРаспределений, Перечисления.СостоянияРаспределенияТоваров.РасходникиЗагружены);
	ПеренестиВАрхивОстаткиРаспределенныеПоТТSQL(НомераРаспределений);
	
	СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, Неопределено, КоличествоДокументов, "Ок");
	
	Возврат КоличествоДокументов;

КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Функция СодатьДокументыПоРаспределениюНаСервереПоЗонам_РО(СтруктураНастроек, СписокОшибок)

	// ВАЖНО! Очень похоже на СодатьДокументыПоРаспределениюНаСервере_РО.
	//	В случае доработок необходимо проанализировать обе функции
	
	Склад						= СтруктураНастроек.Склад;
	ДатаРаспределения			= СтруктураНастроек.ДатаРаспределения;
	Организация					= СтруктураНастроек.Организация;
	СтруктурноеПодразделение	= СтруктураНастроек.СтруктурноеПодразделение;
	НомераРаспределений			= Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад"					, Склад);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	
	Запрос.Текст = ТекстЗапросаПолучитьСкладыТТ() + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступностьТоваровНаСкладах.Номенклатура
		|ИЗ
		|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
		|ГДЕ
		|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурноеПодразделение
		|	И (ДоступностьТоваровНаСкладах.Склад = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|	И ДоступностьТоваровНаСкладах.Склад.Организация = &Организация";
	
	ДлительныеОперации.СообщитьПрогресс(0, "Получение данных распределения");
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[1].Выгрузить();
	ТабСклады 	= Результаты[2].Выгрузить();
	ТабНоменклатураРаспределения = Неопределено;
	Если ЗначениеЗаполнено(Склад) Тогда
		ТабНоменклатураРаспределения = Результаты[3].Выгрузить();
		ТабНоменклатураРаспределения.Индексы.Добавить("Номенклатура");
	КонецЕсли;	
	
	ТаблицаДанных = ДанныеРаспределения(СтруктураНастроек, ТабТТ, ТабСклады, Истина);
	ТаблицаДанных.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ДатаПроизводства",	Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Маршрут",			Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	ТаблицаДанных.Колонки.Добавить("Автомобиль",		Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	ТаблицаДанных.Колонки.Добавить("РасходныйОрдер",	Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	ТаблицаДанных.Колонки.Добавить("ИзначальныйСклад",	Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.ЗонаОтгрузки) Тогда
			СтрокаТаб.ИзначальныйСклад = СтрокаТаб.Склад;
			СтрокаТаб.Склад = СтрокаТаб.ЗонаОтгрузки;
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Чтение документов от предыдущих загрузок");
	
	//почистим перед загрузкой документы расходных ордеров от предыдущей загрузки
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутыСклады.ЗонаОтгрузки КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	Справочник.Маршруты.Склады КАК МаршрутыСклады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты КАК СпрМаршруты
		|		ПО МаршрутыСклады.Ссылка = СпрМаршруты.Ссылка
		|ГДЕ
		|	СпрМаршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И СпрМаршруты.Организация = &Организация
		|	И (МаршрутыСклады.Склад = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец = &СтруктурноеПодразделение
		|	И Склады.Организация = &Организация
		|	И (Склады.Ссылка = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Склад КАК Склад,
		|	РасходныйОрдерСклад.Склад.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении КАК НеОчищатьЗаданияНаРазборкуПриНовомРаспределении,
		|	РасходныйОрдерСклад.Получатель КАК ТорговаяТочка,
		|	РасходныйОрдерСклад.СкладСборкиДляЗоны КАК СкладСборкиДляЗоны
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ПО РасходныйОрдерСклад.Ссылка = РасходныйОрдерСкладТовары.Ссылка
		|ГДЕ
		|	РасходныйОрдерСклад.ПометкаУдаления = ЛОЖЬ
		|	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСкладТовары.КоличествоУРЗ > 0
		|	И НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
		|	И РасходныйОрдерСклад.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И РасходныйОрдерСклад.Склад.Владелец = &СтруктурноеПодразделение
		|	И РасходныйОрдерСклад.Организация = &Организация
		|	И (РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|	И РасходныйОрдерСклад.Склад В
		|			(ВЫБРАТЬ
		|				Таб.Склад
		|			ИЗ
		|				ВТ_Склады КАК Таб)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад.Владелец = &СтруктурноеПодразделение
		|				И Склад.Организация = &Организация
		|				И ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	ДатаПроизводства";
	
	// СФОРМИРОВАТЬ ПОЗИЦИИ С ЗАДАНИЯМИ НА РАЗБОРКУ
	ТЗПозицииСЗаданиямиНаРазборку=Новый ТаблицаЗначений;
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("Номенклатура");
	ТЗПозицииСЗаданиямиНаРазборку.Колонки.Добавить("ТТ");
	ТЗПозицииСЗаданиямиНаРазборку.Индексы.Добавить("Номенклатура,ТТ");
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабРасходникиВБазе = Результаты[1].Выгрузить();
	
	//почистим доки нераспечатанные
	ТекущаяОперация = "Очистка документов от предыдущих загрузок";
	ДлительныеОперации.СообщитьПрогресс(0, ТекущаяОперация);
	
	х100 = ТабРасходникиВБазе.Количество();
	х = 0;
	
	Для Каждого СтрокаРасходник Из ТабРасходникиВБазе Цикл
		х = х+1;
		ДокОбъект = СтрокаРасходник.Ссылка.ПолучитьОбъект();
		КолвоСтрок = ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если ДокОбъект.Товары[КолвоСтрок - н].КоличествоУРЗ > 0 Тогда
				Если ЗначениеЗаполнено(ДокОбъект.Товары[КолвоСтрок - н].ЗаданиеНаРазборку) И СтрокаРасходник.НеОчищатьЗаданияНаРазборкуПриНовомРаспределении Тогда
					НовСтр=ТЗПозицииСЗаданиямиНаРазборку.Добавить();
					НовСтр.Номенклатура=ДокОбъект.Товары[КолвоСтрок - н].Номенклатура;
					НовСтр.ТТ=ДокОбъект.Получатель;
				Иначе
					ДокОбъект.Товары.Удалить(КолвоСтрок - н);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,ДокОбъект.Ссылка,-1,ОписаниеОшибки());
		КонецПопытки;
		ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), ТекущаяОперация);
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, ТекущаяОперация);
	
	// УДАЛЕНО вычитание уже загруженного в предыдйщих документах количества
	
	//распределение остатков по датам производства
	ДлительныеОперации.СообщитьПрогресс(0, "Распределение по датам производства");
	
	ТабОстаткиНоменклатуры = Результаты[2].Выгрузить();
	ТабОстаткиНоменклатуры.Индексы.Добавить("Склад, Номенклатура, Характеристика");
	РаспределитьПоДатамПроизводства(ТаблицаДанных, ТабОстаткиНоменклатуры, Ложь, СписокОшибок);
	
	// Очистка нулевых строк
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТаблицаДанных[КолвоСтрок - н].Количество <= 0 Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "Распределение по датам производства");
	
	//теперь определим расходники и маршруты куда должна попасть номенклатура
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрМаршруты.Организация КАК Организация,
		|	МаршрутыСклады.Склад,
		|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|	МаршрутыСклады.Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.Маршруты КАК СпрМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО СпрМаршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
		|		ПО СпрМаршруты.Ссылка = МаршрутыСклады.Ссылка
		|ГДЕ
		|	СпрМаршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И СпрМаршруты.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпрМаршруты.Организация,
		|	МаршрутыСклады.ЗонаОтгрузки,
		|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница,
		|	МаршрутыТорговыеТочки.Ссылка
		|ИЗ
		|	Справочник.Маршруты КАК СпрМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО СпрМаршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
		|		ПО СпрМаршруты.Ссылка = МаршрутыСклады.Ссылка
		|ГДЕ
		|	СпрМаршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И СпрМаршруты.Организация = &Организация
		|	И МаршрутыСклады.ЗонаОтгрузки <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	ТабНоменклатураМаршрутов = Запрос.Выполнить().Выгрузить();
	ТабНоменклатураМаршрутов.Индексы.Добавить("Склад, ТорговаяТочка");
	
	// Заполнение ссылок
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		
		СтрокиНоменклатуры = ТабНоменклатураМаршрутов.НайтиСтроки(Новый Структура("Склад, ТорговаяТочка", СтрокаТаб.Склад, СтрокаТаб.ТорговаяТочка));
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			СтрокаТаб.Маршрут = СтрокиНоменклатуры[0].Маршрут;
		КонецЕсли;
		
		СтрокиРасхОрдер = ТабРасходникиВБазе.НайтиСтроки(Новый Структура("Склад, ТорговаяТочка, СкладСборкиДляЗоны", СтрокаТаб.Склад, СтрокаТаб.ТорговаяТочка, СтрокаТаб.ИзначальныйСклад));
		Если СтрокиРасхОрдер.Количество() > 0 Тогда
			СтрокаТаб.РасходныйОрдер = СтрокиРасхОрдер[0].Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование документов
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.ИзначальныйСклад,
		|	Таб.ТорговаяТочка,
		|	Таб.Номенклатура,
		|	Таб.Характеристика,
		|	Таб.ДатаПроизводства,
		|	Таб.НомерРаспределения,
		|	Таб.Количество,
		|	Таб.Автомобиль,
		|	Таб.Маршрут,
		|	Таб.РасходныйОрдер
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВЗ_Запрос.Склад КАК Справочник.Склады).Организация КАК Организация,
		|	ВЗ_Запрос.Склад,
		|	ВЗ_Запрос.ИзначальныйСклад,
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.Номенклатура,
		|	ВЗ_Запрос.Характеристика,
		|	ВЗ_Запрос.ДатаПроизводства,
		|	ВЗ_Запрос.НомерРаспределения,
		|	ВЗ_Запрос.Количество,
		|	ВЗ_Запрос.Маршрут,
		|	ВЗ_Запрос.Автомобиль,
		|	ВЗ_Запрос.РасходныйОрдер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТаблицаДанных.Склад КАК Склад,
		|		ВТ_ТаблицаДанных.ИзначальныйСклад КАК ИзначальныйСклад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка КАК ТорговаяТочка,
		|		ВТ_ТаблицаДанных.Номенклатура КАК Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика КАК Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства КАК ДатаПроизводства,
		|		МАКСИМУМ(ВТ_ТаблицаДанных.НомерРаспределения) КАК НомерРаспределения,
		|		СУММА(ВТ_ТаблицаДанных.Количество) КАК Количество,
		|		ВТ_ТаблицаДанных.Маршрут КАК Маршрут,
		|		ВТ_ТаблицаДанных.Автомобиль КАК Автомобиль,
		|		ВТ_ТаблицаДанных.РасходныйОрдер КАК РасходныйОрдер
		|	ИЗ
		|		ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ТаблицаДанных.Склад,
		|		ВТ_ТаблицаДанных.ИзначальныйСклад,
		|		ВТ_ТаблицаДанных.ТорговаяТочка,
		|		ВТ_ТаблицаДанных.Номенклатура,
		|		ВТ_ТаблицаДанных.Характеристика,
		|		ВТ_ТаблицаДанных.ДатаПроизводства,
		|		ВТ_ТаблицаДанных.Маршрут,
		|		ВТ_ТаблицаДанных.Автомобиль,
		|		ВТ_ТаблицаДанных.РасходныйОрдер) КАК ВЗ_Запрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_Запрос.Маршрут,
		|	ВЗ_Запрос.ТорговаяТочка,
		|	ВЗ_Запрос.Склад,
		|	ВЗ_Запрос.ИзначальныйСклад,
		|	ВЗ_Запрос.РасходныйОрдер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	х100 = Выборка.Количество();
	х=0;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Создание документов");
	
	МаршрутныеЛисты = НовыйСписокМаршрутныхЛистов();
	
	КоличествоДокументов = 0;
	
	ОтгрузкаВТоргТочку	= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	СтатусНеОбработан	= Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
		//На текущую дату формируется один маршрутный лист по каждому маршруту
		ТекСтрокаМаршрутныхЛистов = ДобавитьСтрокуВСписокМаршрутныхЛистов(МаршрутныеЛисты, Выборка);
		
		Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ИзначальныйСклад") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
						Если НЕ ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
							РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
							РасхОрдерОбъект.НеМенятьДатуПриПроведении = Истина;
							РасхОрдерОбъект.Дата			= ДатаРаспределения;
							РасхОрдерОбъект.УстановитьНовыйНомер();
							РасхОрдерОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
							РасхОрдерОбъект.ВидОперации		= ОтгрузкаВТоргТочку;
							РасхОрдерОбъект.Получатель 		= Выборка.ТорговаяТочка;
							РасхОрдерОбъект.Организация		= Организация;
							РасхОрдерОбъект.Склад 			= Выборка.Склад;
							РасхОрдерОбъект.АвтозагрузкаУРЗ = Истина;
							РасхОрдерОбъект.Статус 			= СтатусНеОбработан;
							РасхОрдерОбъект.ДатаРаспределения 			= ДатаРаспределения;
							
							РасхОрдерОбъект.СкладСборкиДляЗоны = Выборка.ИзначальныйСклад;
							Если Выборка.Склад <> Выборка.ИзначальныйСклад Тогда
								РасхОрдерОбъект.Комментарий = "По складу: " + Выборка.ИзначальныйСклад;
							КонецЕсли;	
						Иначе
							РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
						КонецЕсли;
						Пока Выборка.Следующий() Цикл
							х = х+1;
							КоличествоКЗагрузке = Выборка.Количество;
							Если КоличествоКЗагрузке <= 0.01 Тогда
								Продолжить;
							КонецЕсли;
							МасСтр=ТЗПозицииСЗаданиямиНаРазборку.НайтиСтроки(
							Новый Структура("Номенклатура,ТТ",Выборка.Номенклатура,Выборка.ТорговаяТочка));
							Если МасСтр.Количество() Тогда
								Продолжить;
							КонецЕсли;
							
							СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства));
							Если СтрокиТовар.Количество() > 0 Тогда
								СтрокаТовар = СтрокиТовар[0];
							Иначе
								СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
							КонецЕсли;	
							СтрокаТовар.Номенклатура 		= Выборка.Номенклатура;
							СтрокаТовар.Характеристика 		= Выборка.Характеристика;
							СтрокаТовар.ДатаПроизводства 	= Выборка.ДатаПроизводства;
							СтрокаТовар.НомерРаспределения	= Выборка.НомерРаспределения;
							СтрокаТовар.ЕдиницаИзмерения 	= Выборка.Номенклатура.ЕдиницаХраненияОстатков;
							СтрокаТовар.КоличествоУРЗ 		= СтрокаТовар.КоличествоУРЗ + КоличествоКЗагрузке;
							СтрокаТовар.Количество 			= СтрокаТовар.Количество + КоличествоКЗагрузке;
							
							НомераРаспределений.Вставить(Выборка.НомерРаспределения);
							
							ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");
						КонецЦикла;
						
						Если Не РасхОрдерОбъект.ЭтоНовый()
						 Или (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
							
							РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
							РасхОрдерОбъект.ОбменДанными.Загрузка = Истина;
							РасхОрдерОбъект.Проведен = Истина;
							Попытка
								РасхОрдерОбъект.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,РасхОрдерОбъект.Ссылка,-1,ОписаниеОшибки());
							КонецПопытки;
							
							КоличествоДокументов = КоличествоДокументов+1;
							
						КонецЕсли;
						
						ТекСтрокаМаршрутныхЛистов.РасходныеОрдера.Добавить(РасхОрдерОбъект.Ссылка);
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СоздатьОбновитьМаршрутныеЛисты(СтруктураНастроек, МаршрутныеЛисты, Истина);
	
	УстановитьСостояниеПоНомерамРаспределений(НомераРаспределений, Перечисления.СостоянияРаспределенияТоваров.РасходникиЗагружены);
	ПеренестиВАрхивОстаткиРаспределенныеПоТТSQL(НомераРаспределений);
	
	СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,Неопределено, КоличествоДокументов,"Ок");
	Возврат КоличествоДокументов;

КонецФункции

Процедура ОткорректироватьТаблицуДанных(ТаблицаДанных, ТЗПозицииСЗаданиямиНаРазборку)
	НенайденныеСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТЗПозицииСЗаданиямиНаРазборку Цикл 
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ТорговаяТочка", СтрокаТЗ.Номенклатура, СтрокаТЗ.Характеристика, СтрокаТЗ.ТТ));
		Если НайденныеСтроки.Количество() > 0 Тогда 			
			НайденныеСтроки[0].ВВедомостиНаРазборку = Истина;
		Иначе
			НенайденныеСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из НенайденныеСтроки Цикл 
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ВВедомостиНаРазборку", СтрокаТЗ.Номенклатура, СтрокаТЗ.Характеристика, Ложь));
		
		КоличествоДляУменьшения = СтрокаТЗ.Количество;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			УменьшитьНа				   = Мин(КоличествоДляУменьшения, НайденнаяСтрока.Количество);
			КоличествоДляУменьшения    = КоличествоДляУменьшения - УменьшитьНа;
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - УменьшитьНа;
			Если КоличествоДляУменьшения = 0 Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Заполнить из результата запроса соответствие полем ссылка
Функция СоответствиеДляСформированныхМаршрутов(РезультатЗапроса)
	Перем Соответствие;
	Соответствие = Новый Соответствие;
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Соответствие[Выборка.Маршрут] = Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	Возврат Соответствие;
КонецФункции

//+++shae 2018.10.11 ИП-00020073
Процедура СвернутьТаблицуДанных(ТаблицаДанных)
	
	Если ТаблицаДанных.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстПоля = "ВЫБРАТЬ";
	ТекстГруппировки = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ";
	Для Каждого Колонка из ТаблицаДанных.Колонки Цикл 
		Если Колонка.Имя = "НомерРаспределения" Или Колонка.Имя = "Количество" Тогда 
			Продолжить;	
		КонецЕсли;	
		ТекстПоле = "
					 |Табл." + Колонка.Имя + ",";	
		Запрос.Текст 		= Запрос.Текст + ТекстПоле;
		ТекстПоле = СтрЗаменить(ТекстПоле, "Табл.", "ВТ_ТаблицаДанных.");
		ТекстПоля 			= ТекстПоля + ТекстПоле;
		ТекстГруппировки 	= ТекстГруппировки + ТекстПоле;	
	КонецЦикла;	
	Запрос.Текст =  Запрос.Текст + "
					|Табл.НомерРаспределения, Табл.Количество 
					| 					
					|ПОМЕСТИТЬ ВТ_ТаблицаДанных
					|ИЗ
					|	&Табл КАК Табл
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|" + ТекстПоля + "
					|МАКСИМУМ(ВТ_ТаблицаДанных.НомерРаспределения) КАК НомерРаспределения, СУММА(ВТ_ТаблицаДанных.Количество) КАК Количество
					| 
					|ИЗ
					|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
					|
					|СГРУППИРОВАТЬ ПО
					|" + Лев(ТекстГруппировки, СтрДлина(ТекстГруппировки)-1);	
	Запрос.УстановитьПараметр("Табл", ТаблицаДанных);	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

//+++shae 2018.10.21 ИП-00020073 
Процедура ОтредактироватьПотребностьСУчетомОстатковСклада(ТаблицаДанных, Склады, ДатаРаспределения, СтруктурноеПодразделение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.ТорговаяТочка,
	|	Таб.Номенклатура,
	|	Таб.Характеристика,
	|	Таб.Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаДанных
	|ИЗ
	|	&Табл КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанных.ТорговаяТочка,
	|	ВТ_ТаблицаДанных.Номенклатура,
	|	ВТ_ТаблицаДанных.Характеристика,
	|	ВТ_ТаблицаДанных.Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхСклад
	|ИЗ
	|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	|ГДЕ
	|	ВТ_ТаблицаДанных.ТорговаяТочка В(&ТорговаяТочка)
	|	И ВТ_ТаблицаДанных.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхСклад.ТорговаяТочка,
	|	ВТ_ТаблицаДанныхСклад.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДанныхСклад.Характеристика КАК Характеристика,
	|	ВТ_ТаблицаДанныхСклад.Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХарактеристикиСпр.БратьКоличествоВКоробкеПоСкладуДляРаспределения, ЛОЖЬ)
	|			ТОГДА ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК КоличествоВКоробке,
	|	НоменклатураСпр.БезУпаковки = ЛОЖЬ
	|		И НоменклатураСпр.РаспределяетсяНеЦелымиКоробками = ЛОЖЬ КАК РаспределяетьКоробками,
	|	НоменклатураСпр.id_tov
	|ИЗ
	|	ВТ_ТаблицаДанныхСклад КАК ВТ_ТаблицаДанныхСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ВТ_ТаблицаДанныхСклад.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК КоличествоВКоробкеСрезПоследних
	|		ПО ВТ_ТаблицаДанныхСклад.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И ВТ_ТаблицаДанныхСклад.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО ВТ_ТаблицаДанныхСклад.Номенклатура = НоменклатураСпр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиСпр
	|		ПО ВТ_ТаблицаДанныхСклад.Характеристика = ХарактеристикиСпр.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаДанных";
	
	Запрос.УстановитьПараметр("Табл", 					ТаблицаДанных);
	Запрос.УстановитьПараметр("ТорговаяТочка",  		Склады);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",  	СтруктурноеПодразделение);
	ТаблицаДанныхСклады = Запрос.Выполнить().Выгрузить();
	ТаблицаДанныхСклады.Индексы.Добавить("ТорговаяТочка, id_tov");

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Для Каждого Склад из Склады Цикл 
		
		//остатки на складе магазине сторонней розницы
		ТекстЗапросаSQL = "Select id_tov, КонОст
		|FROM  SMS_REPL.dbo.List_Ucheta (" + ВнешниеДанные.ФорматПоля(Склад.НомерТочки) + "," + ВнешниеДанные.ФорматПоля(ДатаРаспределения) + "," + ВнешниеДанные.ФорматПоля(ДатаРаспределения) + ")
		|WHERE КонОст > 0";	
		
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		Попытка
			rs.MoveFirst();
			Пока НЕ rs.Eof() Цикл
				id_tov 			= rs.Fields("id_tov").Value;
				КонОст 			= rs.Fields("КонОст").Value;
				СтрокиТаблицыДанныхСклады = ТаблицаДанныхСклады.НайтиСтроки(Новый Структура("ТорговаяТочка, id_tov",Склад, id_tov));	
				Для Каждого Стр Из СтрокиТаблицыДанныхСклады Цикл 
					Если КонОст > 0 Тогда
						КоличествоДо 	= Стр.Количество;
						КоличествоЕсть 	= Мин(КонОст, Стр.Количество); 
						Стр.Количество 	= Стр.Количество - КоличествоЕсть;  //уменьшение на количество, что есть на складе магазине сторонней розницы
						Если Стр.РаспределяетьКоробками 
							И Стр.Количество > 0
							И Стр.КоличествоВКоробке > 0 Тогда     //измененное количество должно быть = целым коробкам
							КоличествоКоробок 		= Стр.Количество/Стр.КоличествоВКоробке;
							ЦелКоличествоКоробок 	= Цел(КоличествоКоробок);
							Если ЦелКоличествоКоробок < КоличествоКоробок Тогда 
								Стр.Количество = (ЦелКоличествоКоробок+1)*Стр.КоличествоВКоробке;
							КонецЕсли;			
						КонецЕсли;
						КоличествоБеремСоСклада = КоличествоДо - Стр.Количество;
						Если КоличествоБеремСоСклада > 0 Тогда 
							СтрокиТаблицыДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура, Характеристика, Количество", Склад, Стр.Номенклатура, Стр.Характеристика, КоличествоДо));
							Если СтрокиТаблицыДанных.Количество() > 0 Тогда
								КонОст = КонОст - КоличествоБеремСоСклада;
								СтрокиТаблицыДанных[0].Количество = Стр.Количество;
							КонецЕсли;		
						КонецЕсли;	
					Иначе 
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;		
	КонецЦикла;	
	
	ADOСоединение.Close();
	
КонецПроцедуры	

//+++АК SHEP 2018.10.31 ИП-00020026.01
Процедура УстановитьСостояниеПоНомерамРаспределений(НомераРаспределений, НовоеСостояние)

	Перем МассивНомеровРаспределений;
	
	МассивНомеровРаспределений = Новый Массив;
	Для Каждого НомерРаспределения Из НомераРаспределений Цикл
		МассивНомеровРаспределений.Добавить(Формат(НомерРаспределения.Ключ, "ЧГ="));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РаспределенияТоваров.УИД,
		|	РаспределенияТоваров.Номер
		|ИЗ
		|	РегистрСведений.РаспределенияТоваров КАК РаспределенияТоваров
		|ГДЕ
		|	РаспределенияТоваров.Номер В (&МассивНомеровРаспределений)");
	Запрос.УстановитьПараметр("МассивНомеровРаспределений", МассивНомеровРаспределений);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		РегистрыСведений.СостоянияРаспределенийТоваров.ИзменитьСостояние(ВыборкаЗапроса.УИД, НовоеСостояние);
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.12.06 ИП-00020651
// Заполнение из ОстаткиРаспределенныеПоТТ
//
Функция ДанныеРаспределения(СтруктураПараметров, ТабТТ, ТабСклады, ПоЗонам = Ложь)

	ДатаРаспределения			= СтруктураПараметров.ДатаРаспределения;
	Организация					= СтруктураПараметров.Организация;
	СтруктурноеПодразделение	= СтруктураПараметров.СтруктурноеПодразделение;
	НомерРаспределения			= СтруктураПараметров.НомерРаспределения;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Склад",					Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка",			Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаДанных.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("НомерРаспределения",	Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Количество",			Новый ОписаниеТипов("Число"));
	
	Если ПоЗонам Тогда
		ТаблицаДанных.Колонки.Добавить("ЗонаОтгрузки", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	// Получили все остатки, распределенные по ТТ
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапроса_ОстаткиРаспределенныеПоТТ();
	Запрос.УстановитьПараметр("Организация",					Организация);
	Запрос.УстановитьПараметр("ДатаРаспределения",				ДатаРаспределения);
	Запрос.УстановитьПараметр("НомерРаспределения",				НомерРаспределения);
	Запрос.УстановитьПараметр("НеОтбиратьПоНомеру",				НомерРаспределения = 0);
	
	ТабРаспределение = Запрос.Выполнить().Выгрузить();
	
	ТабТТРаспр = ТабРаспределение.Скопировать();
	ТабТТРаспр.Свернуть("ТорговаяТочка");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЗ_Запрос.Номенклатура,
		|	ВЗ_Запрос.СтруктурноеПодразделение,
		|	ВЗ_Запрос.ТорговаяТочка
		|ИЗ
		|	(ВЫБРАТЬ
		|		спрНоменклатура.Ссылка КАК Номенклатура,
		|		ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СтруктурноеПодразделение,
		|		ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
		|	ИЗ
		|		РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&ДатаРаспределения, ДЕНЬ),
		|				ТорговаяТочка В (&МассивТТ)
		|					И ТорговаяТочка.id_TT <> 0) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|			ПО ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ = спрНоменклатура.ГруппаНоменклатурыУРЗ
		|	ГДЕ
		|		НЕ спрНоменклатура.ЭтоГруппа) КАК ВЗ_Запрос
		|ГДЕ
		|	ВЗ_Запрос.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	ДоступностьТоваровНаСкладах.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО ДоступностьТоваровНаСкладах.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	ДоступностьТоваровНаСкладах.Склад В(&Склады)
		|	И ДоступностьТоваровНаСкладах.Склад.Организация = &Организация
		|	И НЕ спрНоменклатура.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	ДоступностьТоваровНаСкладах.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО ДоступностьТоваровНаСкладах.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	ДоступностьТоваровНаСкладах.Склад.Владелец = &СтруктурноеПодразделение
		|	И ДоступностьТоваровНаСкладах.Склад.Организация = &Организация
		|	И НЕ спрНоменклатура.ЭтоГруппа";
	
	Если ПоЗонам Тогда
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаршрутыСклады.Склад,
			|	МаршрутыСклады.Склад.НеСоздаватьПеремещениеВЗонуОтгрузки,
			|	МаршрутыСклады.ЗонаОтгрузки КАК ОтгружаетсяИзЗоны,
			|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка
			|ИЗ
			|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
			|		ПО МаршрутыТорговыеТочки.Ссылка = МаршрутыСклады.Ссылка
			|ГДЕ
			|	МаршрутыСклады.Ссылка.СтруктурноеПодразделение = &СтруктурноеПодразделение";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("МассивТТ",					ТабТТРаспр.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Склады",						ТабСклады.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("Таб",						ТабРаспределение);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	НастройкиПорядкаОбеспечения = Результаты[0].Выгрузить();
	НастройкиПорядкаОбеспечения.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	
	НастройкиДоступностиТоваров = Результаты[1].Выгрузить();
	НастройкиДоступностиТоваров.Индексы.Добавить("Номенклатура");
	
	НастройкиДоступностиТоваровДляСтруктПодразделения = Результаты[2].Выгрузить();
	НастройкиДоступностиТоваровДляСтруктПодразделения.Индексы.Добавить("Номенклатура");
	
	Если ПоЗонам Тогда
		ТабНастройкиЗонПоМаршрутам = Результаты[3].Выгрузить();
		ТабНастройкиЗонПоМаршрутам.Индексы.Добавить("Склад, ТорговаяТочка");
	КонецЕсли;
	
	ОсновнойСклад = СтруктурноеПодразделение.СкладТорговогоЗала;
	
	МассивСкладовМагазинаСтороннейРозницы = Новый Массив;
	Для Каждого СтрокаРаспределение Из ТабРаспределение Цикл
		Если Не ЗначениеЗаполнено(СтрокаРаспределение.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПорядкаОбеспечения = НастройкиПорядкаОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаРаспределение.ТорговаяТочка, СтрокаРаспределение.Номенклатура));
		Если СтрокиПорядкаОбеспечения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Склад = Неопределено;
		СтрокаСклад = НастройкиДоступностиТоваров.Найти(СтрокаРаспределение.Номенклатура, "Номенклатура");
		Если СтрокаСклад = Неопределено Тогда
			СтрокаОбщиеНастройки = НастройкиДоступностиТоваровДляСтруктПодразделения.Найти(СтрокаРаспределение.Номенклатура, "Номенклатура");
			Если СтрокаОбщиеНастройки = Неопределено Тогда
				Если ЗначениеЗаполнено(Склад)
					И Склад = ОсновнойСклад Тогда
					Склад = ОсновнойСклад;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Склад = СтрокаСклад.Склад;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Склад					= Склад;
		НоваяСтрока.Номенклатура			= СтрокаРаспределение.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаРаспределение.ЕдиницаИзмерения;
		НоваяСтрока.НомерРаспределения		= СтрокаРаспределение.НомерРаспределения;
		НоваяСтрока.Количество				= СтрокаРаспределение.Количество;
		
		Если ЗначениеЗаполнено(СтрокаРаспределение.СкладМагазинаСтороннейРозницы) Тогда
			Если МассивСкладовМагазинаСтороннейРозницы.Найти(СтрокаРаспределение.СкладМагазинаСтороннейРозницы) = Неопределено Тогда 
				МассивСкладовМагазинаСтороннейРозницы.Добавить(СтрокаРаспределение.СкладМагазинаСтороннейРозницы);
			КонецЕсли;
			ТорговаяТочка = СтрокаРаспределение.СкладМагазинаСтороннейРозницы;
		Иначе
			ТорговаяТочка = СтрокаРаспределение.ТорговаяТочка;
		КонецЕсли;
		НоваяСтрока.ТорговаяТочка = ТорговаяТочка;
		
		Если Не СтрокаРаспределение.НеВедетсяУчетПоХарактеристикам Тогда
			НоваяСтрока.Характеристика = СтрокаРаспределение.Характеристика;
		КонецЕсли;
		
		Если ПоЗонам Тогда
			
			СтрокиНастройкаЗоны = ТабНастройкиЗонПоМаршрутам.НайтиСтроки(Новый Структура("Склад, ТорговаяТочка", Склад, ТорговаяТочка));
			Если СтрокиНастройкаЗоны.Количество() > 0 Тогда
				СтрокаНастройкиЗоны = СтрокиНастройкаЗоны[0];
				Если ЗначениеЗаполнено(СтрокаНастройкиЗоны.ОтгружаетсяИзЗоны)
				   И Не СтрокаНастройкиЗоны.СкладНеСоздаватьПеремещениеВЗонуОтгрузки Тогда
					НоваяСтрока.ЗонаОтгрузки = СтрокаНастройкиЗоны.ОтгружаетсяИзЗоны;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСкладовМагазинаСтороннейРозницы.Количество() > 0 Тогда
		СвернутьТаблицуДанных(ТаблицаДанных);
		ОтредактироватьПотребностьСУчетомОстатковСклада(ТаблицаДанных, МассивСкладовМагазинаСтороннейРозницы, ДатаРаспределения, СтруктурноеПодразделение);
	КонецЕсли;
	
	Возврат ТаблицаДанных;

КонецФункции

//+++АК LATV 2018.12.06 ИП-00020651
Процедура РаспределитьПоДатамПроизводства(ТаблицаДанных, ТабОстаткиНоменклатуры, РаспределитьТолькоОстатки = Ложь, СписокОшибок)

	ТабСортировкиСтрокОстатков = Новый ТаблицаЗначений();
	ТабСортировкиСтрокОстатков.Колонки.Добавить("СтрокаОстатка");
	ТабСортировкиСтрокОстатков.Колонки.Добавить("ДатаПроизводства");
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		СтрокаТаб = ТаблицаДанных[КолвоСтрок - н];
		
		СтрокиОстатков = ТабОстаткиНоменклатуры.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.Склад, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		ТабСортировкиСтрокОстатков.Очистить();
		
		//предварительная сортировка, слетает потому после первого цикла не понятно почему
		Для Каждого СтрокаОстаток Из СтрокиОстатков Цикл
			СтрокаДоб = ТабСортировкиСтрокОстатков.Добавить();
			СтрокаДоб.СтрокаОстатка = СтрокаОстаток;
			СтрокаДоб.ДатаПроизводства = СтрокаОстаток.ДатаПроизводства;
		КонецЦикла;
		ТабСортировкиСтрокОстатков.Сортировать("ДатаПроизводства");
		КолвоКРаспределению = СтрокаТаб.Количество;
		
		Для Каждого СтрокаОстаток Из ТабСортировкиСтрокОстатков Цикл
			Если СтрокаОстаток.СтрокаОстатка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если КолвоКРаспределению <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			МинКолво = Мин(КолвоКРаспределению, СтрокаОстаток.СтрокаОстатка.Количество);
			СтрокаОстаток.СтрокаОстатка.Количество = СтрокаОстаток.СтрокаОстатка.Количество - МинКолво;
			КолвоКРаспределению = КолвоКРаспределению - МинКолво;
			СтрокаДоб = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаТаб);
			СтрокаДоб.Количество = МинКолво;
			СтрокаДоб.ДатаПроизводства = СтрокаОстаток.СтрокаОстатка.ДатаПроизводства;
		КонецЦикла;
		
		Если РаспределитьТолькоОстатки Тогда
			СтрокаТаб.Количество = 0;
		Иначе
			СтрокаТаб.Количество = КолвоКРаспределению;
		КонецЕсли;
		
		Если КолвоКРаспределению > 0 Тогда
			ДобавитьОшибку(СписокОшибок, СтрокаТаб, КолвоКРаспределению);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеМаршрутныхЛистов

//+++АК LATV 2018.12.11 ИП-00020475
Функция НовыйСписокМаршрутныхЛистов() Экспорт

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("МаршрутныйЛист", Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛист"));
	
	Результат.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Маршрут",			Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	Результат.Колонки.Добавить("Автомобиль",		Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	
	Результат.Колонки.Добавить("РасходныеОрдера",	Новый ОписаниеТипов("Массив"));
	
	Результат.Индексы.Добавить("Маршрут");
	
	Возврат Результат;

КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Функция ДобавитьСтрокуВСписокМаршрутныхЛистов(МаршрутныеЛисты, ДанныеЗаполнения) Экспорт

	НоваяСтрока = МаршрутныеЛисты.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	
	Возврат НоваяСтрока;

КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Процедура СоздатьОбновитьМаршрутныеЛисты(СтруктураНастроек, МаршрутныеЛисты, ПоЗонам = Ложь, ЭтоЗаполнение = Ложь) Экспорт

	Отказ = Ложь;
	
	ДатаРаспределения	= СтруктураНастроек.ДатаРаспределения;
	Склад				= СтруктураНастроек.Склад;
	
	// Создание
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения);
		
		Если Не ЭтоЗаполнение Тогда
			ОчиститьМаршрутныеЛисты(СтруктураНастроек, МаршрутныеЛисты, ПоЗонам);
		КонецЕсли;
		
		ЗаполнитьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения);
		СоздатьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения);
		ОбновитьМаршрутныеЛисты(МаршрутныеЛисты);
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать рейсы по причине: %1'"), ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, Неопределено, 0, ТекстСообщения, ЭтоЗаполнение);
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		Если Не Отказ Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.12.11 ИП-00020475
Процедура ЗаблокироватьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения)

	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.МаршрутныйЛист");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("Дата",			ДатаРаспределения);
	ЭлементБлокировки.УстановитьЗначение("ВидПеревозки",	Справочники.АК_ВидыПеревозки.ДоставкаНаТТ);
	
	ЭлементБлокировки.ИсточникДанных = МаршрутныеЛисты;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация",	"Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Маршрут",		"Маршрут");
	
	Блокировка.Заблокировать();

КонецПроцедуры

//+++АК LATV 2018.12.11 ИП-00020475
Процедура ОчиститьМаршрутныеЛисты(СтруктураНастроек, МаршрутныеЛисты, ПоЗонам = Ложь)

	Склад						= СтруктураНастроек.Склад;
	ДатаРаспределения			= СтруктураНастроек.ДатаРаспределения;
	Организация					= СтруктураНастроек.Организация;
	СтруктурноеПодразделение	= СтруктураНастроек.СтруктурноеПодразделение;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МаршрутыСклады.ЗонаОтгрузки КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	Справочник.Маршруты.Склады КАК МаршрутыСклады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты КАК СпрМаршруты
		|		ПО МаршрутыСклады.Ссылка = СпрМаршруты.Ссылка
		|ГДЕ
		|	СпрМаршруты.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И СпрМаршруты.Организация = &Организация
		|	И (МаршрутыСклады.Склад = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|	И &ПоЗонам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец = &СтруктурноеПодразделение
		|	И Склады.Организация = &Организация
		|	И (Склады.Ссылка = &Склад
		|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокМаршЛист.Ссылка КАК Ссылка,
		|	ДокМаршЛист.Маршрут,
		|	ДокМаршЛист.СтруктурноеПодразделение,
		|	МаршрутныйЛистРасходныеОрдера.Документ КАК Расходник,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистРасходныеОрдера.Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВСборке
		|ИЗ
		|	Документ.МаршрутныйЛист КАК ДокМаршЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО ДокМаршЛист.Ссылка = МаршрутныйЛистРасходныеОрдера.Ссылка
		|ГДЕ
		|	НЕ ДокМаршЛист.ПометкаУдаления
		|	И НЕ ДокМаршЛист.Отгружено
		|	И НАЧАЛОПЕРИОДА(ДокМаршЛист.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И ДокМаршЛист.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И ДокМаршЛист.Организация = &Организация
		|	И (ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|	И МаршрутныйЛистРасходныеОрдера.Документ.Склад В
		|			(ВЫБРАТЬ
		|				Таб.Склад
		|			ИЗ
		|				ВТ_Склады КАК Таб)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("ДатаРаспределения",			ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад",						Склад);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ПоЗонам",					ПоЗонам);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//почистим маршрутные листы перед загрузкой
	ТекущаяОперация = "Очистка рейсов от предыдущих загрузок";
	ДлительныеОперации.СообщитьПрогресс(0, ТекущаяОперация);
	
	х100 = Выборка.Количество();
	х = 0;
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		х = х+1;
		МаршрутныйЛистОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Расходник)
			 Или Выборка.ВСборке Тогда
				Продолжить;
			КонецЕсли;
			
			МаршрутныйЛистОбъект.РасходныеОрдера.Удалить(МаршрутныйЛистОбъект.РасходныеОрдера.Найти(Выборка.Расходник, "Документ"));
		КонецЦикла;
		
		Если МаршрутныйЛистОбъект.Модифицированность() Тогда
			МаршрутныйЛистОбъект.ОбменДанными.Загрузка = Истина;
			МаршрутныйЛистОбъект.Проведен = Истина;
			МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), ТекущаяОперация);
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, ТекущаяОперация);

КонецПроцедуры

//+++АК LATV 2018.12.11 ИП-00020475
Процедура ЗаполнитьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокМаршЛист.Ссылка КАК Ссылка,
		|	ДокМаршЛист.Маршрут
		|ИЗ
		|	Документ.МаршрутныйЛист КАК ДокМаршЛист
		|ГДЕ
		|	НЕ ДокМаршЛист.ПометкаУдаления
		|	И НЕ ДокМаршЛист.Отгружено
		|	И НАЧАЛОПЕРИОДА(ДокМаршЛист.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И (ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("ДатаРаспределения", ДатаРаспределения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение ссылок
	СформированныеМаршрутныеЛисты = СоответствиеДляСформированныхМаршрутов(РезультатЗапроса); // Получить из результата запроса соответствие маршрутных листов
	Для Каждого ТекСтрокаМаршрутныхЛистов Из МаршрутныеЛисты Цикл
		ТекСтрокаМаршрутныхЛистов.МаршрутныйЛист = СформированныеМаршрутныеЛисты[ТекСтрокаМаршрутныхЛистов.Маршрут];
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.12.11 ИП-00020475
Процедура СоздатьМаршрутныеЛисты(МаршрутныеЛисты, ДатаРаспределения)

	Отбор = Новый Структура("МаршрутныйЛист", Документы.МаршрутныйЛист.ПустаяСсылка());
	СтрокиБезМаршрутныхЛистов = МаршрутныеЛисты.НайтиСтроки(Отбор);
	Если СтрокиБезМаршрутныхЛистов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тзТарифы = РегистрыСведений.СтоимостьУслугПоДоставкеТовараНаТТ.ПолучитьТЗТарифы(ДатаРаспределения);
	Для Каждого ТекСтрока Из СтрокиБезМаршрутныхЛистов Цикл
		МаршрутныйЛист = ПолучитьРейсПоМаршруту(ТекСтрока.Маршрут, ДатаРаспределения, ТекСтрока.Организация, ТекСтрока.Автомобиль, тзТарифы);
		ТекСтрока.МаршрутныйЛист = МаршрутныйЛист;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.12.11 ИП-00020475
Функция ПолучитьРейсПоМаршруту(Маршрут, ДатаРаспределения, Организация, Автомобиль, тзТарифы)

	МаршрутныйЛист = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокРейсы.Ссылка КАК Рейс
		|ИЗ
		|	Документ.МаршрутныйЛист КАК ДокРейсы
		|ГДЕ
		|	ДокРейсы.Маршрут = &Маршрут
		|	И НАЧАЛОПЕРИОДА(ДокРейсы.Дата, ДЕНЬ) = &Дата
		|	И НЕ ДокРейсы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Маршруты.СтруктурноеПодразделение,
		|	Маршруты.Перевозчик,
		|	Маршруты.ТорговыеТочки.(
		|		СтруктурнаяЕдиница,
		|		Стоимость,
		|		ПорядокДоставки
		|	)
		|ИЗ
		|	Справочник.Маршруты КАК Маршруты
		|ГДЕ
		|	Маршруты.Ссылка = &Маршрут");
	
	Запрос.УстановитьПараметр("Маршрут",	Маршрут);
	Запрос.УстановитьПараметр("Дата",		ДатаРаспределения);
	
	Результаты = Запрос.ВыполнитьПакет();
	РезультатМаршрутныеЛисты	= Результаты[0];
	РезультатДанныеМаршрута		= Результаты[1];
	
	Если Не РезультатМаршрутныеЛисты.Пустой() Тогда
		Выборка = РезультатМаршрутныеЛисты.Выбрать();
		Выборка.Следующий();
		МаршрутныйЛист = Выборка.Рейс;
		
	Иначе
		
		МаршрутныйЛистОбъект = Документы.МаршрутныйЛист.СоздатьДокумент();
		МаршрутныйЛистОбъект.УстановитьНовыйНомер();
		МаршрутныйЛистОбъект.Дата			= ДатаРаспределения;
		МаршрутныйЛистОбъект.Организация	= Организация;
		МаршрутныйЛистОбъект.Автомобиль 	= Автомобиль;
		МаршрутныйЛистОбъект.Маршрут 		= Маршрут;
		МаршрутныйЛистОбъект.ВидПеревозки	= Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Маршрут", Маршрут);
		ТарифыМаршрута = тзТарифы.НайтиСтроки(Отбор);
		Если ТарифыМаршрута.Количество() <> 0 Тогда
			ТекТариф = ТарифыМаршрута[0];
			МаршрутныйЛистОбъект.ВариантРасчетаНДС	= ТекТариф.ВариантРасчетаНДС;
			МаршрутныйЛистОбъект.СтавкаНДС			= ТекТариф.СтавкаНДС; 
		КонецЕсли;
		
		Выборка = РезультатДанныеМаршрута.Выбрать();
		Выборка.Следующий();
		
		МаршрутныйЛистОбъект.СтруктурноеПодразделение	= Выборка.СтруктурноеПодразделение;
		МаршрутныйЛистОбъект.Перевозчик					= Выборка.Перевозчик;
		МаршрутныйЛистОбъект.ТорговыеТочки.Загрузить(Выборка.ТорговыеТочки.Выгрузить());
		
		МаршрутныйЛистОбъект.ОбменДанными.Загрузка = Истина;
		МаршрутныйЛистОбъект.Проведен = Истина;
		МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		МаршрутныйЛист = МаршрутныйЛистОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат МаршрутныйЛист;

КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Процедура ОбновитьМаршрутныеЛисты(МаршрутныеЛисты)

	// Поиск документов для обновления
	РасходныеОрдера = Новый ТаблицаЗначений;
	РасходныеОрдера.Колонки.Добавить("МаршрутныйЛист", Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛист"));
	РасходныеОрдера.Колонки.Добавить("РасходныйОрдер", Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерСклад"));
	
	Для Каждого ТекСтрокаМаршрутныхЛистов Из МаршрутныеЛисты Цикл
		Для Каждого РасходныйОрдер Из ТекСтрокаМаршрутныхЛистов.РасходныеОрдера Цикл
			НоваяСтрока = РасходныеОрдера.Добавить();
			НоваяСтрока.МаршрутныйЛист	= ТекСтрокаМаршрутныхЛистов.МаршрутныйЛист;
			НоваяСтрока.РасходныйОрдер	= РасходныйОрдер;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныеОрдера.МаршрутныйЛист КАК МаршрутныйЛист,
		|	РасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер
		|ПОМЕСТИТЬ втРасходныеОрдера
		|ИЗ
		|	&РасходныеОрдера КАК РасходныеОрдера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МаршрутныйЛист,
		|	РасходныйОрдер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРасходныеОрдера.МаршрутныйЛист КАК МаршрутныйЛист,
		|	втРасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер
		|ИЗ
		|	втРасходныеОрдера КАК втРасходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО втРасходныеОрдера.МаршрутныйЛист = МаршрутныйЛистРасходныеОрдера.Ссылка
		|			И втРасходныеОрдера.РасходныйОрдер = МаршрутныйЛистРасходныеОрдера.Документ
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутныйЛист,
		|	РасходныйОрдер");
		
	Запрос.УстановитьПараметр("РасходныеОрдера", РасходныеОрдера);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("МаршрутныйЛист") Цикл
		
		МаршрутныйЛистОбъект = Выборка.МаршрутныйЛист.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = МаршрутныйЛистОбъект.РасходныеОрдера.Добавить();
			НоваяСтрока.Документ = Выборка.РасходныйОрдер;
		КонецЦикла;
		
		МаршрутныйЛистОбъект.ОбменДанными.Загрузка = Истина;
		МаршрутныйЛистОбъект.Проведен = Истина;
		МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПереносВАрхив

//+++АК LATV 2018.10.30 ИП-00020294
Процедура ПеренестиВАрхивОстаткиРаспределенныеПоТТSQL(НомераРаспределений)

	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut	= 0;
	ADOСоединение.CommandTimeOut	= 0;
	ADOСоединение.ConnectionString	= ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	Для Каждого НомерРаспределения Из НомераРаспределений Цикл
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"exec M2.dbo.clear_inforg4020_1c %1", Формат(НомерРаспределения.Ключ, "ЧГ=0"));
		
		Попытка
			ADOСоединение.Execute(ТекстЗапроса);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить данные по распределению %1 по причине: %2'"), НомерРаспределения.Ключ, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ADOСоединение.Close();
	
	// После реструктуризации можно включить этот код
	//Для Каждого НомерРаспределения Из НомераРаспределений Цикл
	//	ВнешниеИсточникиДанных.m2.clear_inforg4020_1c(НомерРаспределения);
	//КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтображениеОшибок

//+++АК LATV 2018.12.06 ИП-00020651
Функция НовыйСписокОшибок()

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерРаспределения");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	
	Возврат Результат;

КонецФункции

//+++АК LATV 2018.12.07 ИП-00020651
Процедура ДобавитьОшибку(СписокОшибок, ТекСтрокаРаспределения, НедостающееКоличество)

	НоваяСтрока = СписокОшибок.Добавить();
	НоваяСтрока.НомерРаспределения	= ТекСтрокаРаспределения.НомерРаспределения;
	НоваяСтрока.Номенклатура		= ТекСтрокаРаспределения.Номенклатура;
	НоваяСтрока.Характеристика		= ТекСтрокаРаспределения.Характеристика;
	НоваяСтрока.Количество			= НедостающееКоличество;
	НоваяСтрока.ЕдиницаИзмерения	= ТекСтрокаРаспределения.ЕдиницаИзмерения;

КонецПроцедуры

//+++АК LATV 2018.12.06 ИП-00020651
Функция СформироватьДокументОшибкиЗагрузки(СтруктураНастроек, СписокОшибок)

	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ОшибкиЗагрузки");
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПараметры	= Макет.ПолучитьОбласть("Параметры");
	ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	ОбластьЗаголовок.Параметры.Склад = СтруктураНастроек.Склад;
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	ДокументРезультат.Вывести(ОбластьПараметры);
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	Для Каждого ТекСтрокаОшибки Из СписокОшибок Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ТекСтрокаОшибки);
		ДокументРезультат.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;

КонецФункции

#КонецОбласти

#Область ТекстЗапроса

//+++АК KIRN 2018.05.24 ИП-00018743
Функция ТекстЗапросаПолучитьЗаданияНаРазборкуДляПерезаписи()
	Возврат "
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданиеНаРазборку.Ссылка,
	|	ЗаданиеНаРазборку.Склад КАК Склад,
	|	ЗаданиеНаРазборку.Номенклатура КАК Номенклатура,
	|	ЗаданиеНаРазборку.Характеристика КАК Характеристика
	//|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница КАК ТорговаяТочка
	|ИЗ
	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
	|ГДЕ
	|	ЗаданиеНаРазборку.ПометкаУдаления = ЛОЖЬ
	|	И ЗаданиеНаРазборкуТовары.РасходныйОрдер = ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
	|	И ЗаданиеНаРазборку.Напечатан = ЛОЖЬ
	|	И ЗаданиеНаРазборку.Склад.Владелец = &СтруктурноеПодразделение
	|	И (ЗаданиеНаРазборку.Склад = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|
	|";
КонецФункции

//+++АК KIRN 2018.05.24 ИП-00018743
Функция ТекстЗапросаПолучитьСкладыТТ();
	Возврат "
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|ПОМЕСТИТЬ втТТ
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТТ,
	|	втТТ.Организация
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаРаспределения, Расчетчик = &СтруктурноеПодразделение) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТТ КАК втТТ
	|		ПО ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка = втТТ.СтруктурнаяЕдиница
	|ГДЕ
	|	втТТ.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	|	втТТ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Владелец = &СтруктурноеПодразделение
	|	И (Склады.Ссылка = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	И Склады.Организация = &Организация";	
КонецФункции

//+++АК KIRN 2018.05.24 ИП-00018743
Функция ПолучитьТекстЗапросаЗаданияНаРазборкуНеДляЗаписи()
	Возврат "ВЫБРАТЬ
	        |	ЗаданиеНаРазборку.Склад,
	        |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница КАК ТорговаяТочка,
	        |	ЗаданиеНаРазборку.Номенклатура,
	        |	ЗаданиеНаРазборку.Характеристика,
	        |	СУММА(ЗаданиеНаРазборкуТовары.КоличествоУРЗ) КАК КоличествоУРЗ
	        |ИЗ
	        |	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
	        |		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
	        |ГДЕ
	        |	ЗаданиеНаРазборку.Проведен = ИСТИНА
	        |	И ЗаданиеНаРазборкуТовары.Количество > 0
	        |	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
	        |	И ЗаданиеНаРазборку.Напечатан = ИСТИНА
			//|	И ЗаданиеНаРазборкуТовары.РасходныйОрдер <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
			//+++АК KIRN 2018.08.28 
			|	И (ЗаданиеНаРазборку.Склад = &Склад
			|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			//---АК KIRN 
			|
	        |СГРУППИРОВАТЬ ПО
	        |	ЗаданиеНаРазборку.Склад,
	        |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
	        |	ЗаданиеНаРазборку.Номенклатура,
	        |	ЗаданиеНаРазборку.Характеристика
			|;	";
КонецФункции

//+++АК KIRN 2018.05.24 ИП-00018743
Функция ПолучитьТекстЗапросаОстаткиТоваровНаСкладе()
	Возврат  "
	|////////////////////////////////////////////////////////	
	|	ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Организация КАК Организация,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад.Владелец = &СтруктурноеПодразделение
	|				И Склад.Организация = &Организация
	|				И ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства
	|;
	|";	
	
КонецФункции

//+++АК KIRN 2018.05.29 ИП-00018743
Функция ТекстЗапросаПолучитьРасхОрдераНеДляЗаписи()
	Возврат "
	|//0//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСклад.Организация,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Получатель КАК ТорговаяТочка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ПО РасходныйОрдерСкладТовары.Ссылка = РасходныйОрдерСклад.Ссылка
	|ГДЕ
	|	РасходныйОрдерСклад.Проведен = ИСТИНА
	|	И РасходныйОрдерСкладТовары.КоличествоУРЗ > 0
	|	И НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
	//+++АК KIRN 2018.08.28  
	|	И (РасходныйОрдерСклад.Склад = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	//---АК KIRN 
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|	И	(
	|        		РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|			ИЛИ	РасходныйОрдерСклад.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСклад.Организация,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика
	|;
	|";
КонецФункции

//+++АК LATV 2018.12.07 ИП-00020651
Функция ПолучитьТекстЗапроса_ОстаткиРаспределенныеПоТТ()

	Возврат
		"ВЫБРАТЬ
		|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК ТорговаяТочка,
		|	ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
		|	ОстаткиРаспределенныеПоТТ.Характеристика КАК Характеристика,
		|	ОстаткиРаспределенныеПоТТ.НомерРаспределения КАК НомерРаспределения,
		|	ОстаткиРаспределенныеПоТТ.Количество КАК Количество
		|ПОМЕСТИТЬ втДанныеРаспределения
		|ИЗ
		|	РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|		ПО ОстаткиРаспределенныеПоТТ.ТорговаяТочка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|			И (ЦФОСтруктурныхЕдиницСрезПоследних.Организация = &Организация)
		|ГДЕ
		|	ОстаткиРаспределенныеПоТТ.Дата = &ДатаРаспределения
		|	И (ОстаткиРаспределенныеПоТТ.НомерРаспределения = &НомерРаспределения
		|			ИЛИ &НеОтбиратьПоНомеру)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРаспределения.ТорговаяТочка КАК ТорговаяТочка,
		|	втДанныеРаспределения.Номенклатура КАК Номенклатура,
		|	втДанныеРаспределения.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ втОшибочныеХарактеристики
		|ИЗ
		|	втДанныеРаспределения КАК втДанныеРаспределения
		|ГДЕ
		|	втДанныеРаспределения.Номенклатура <> втДанныеРаспределения.Характеристика.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОшибочныеХарактеристики.ТорговаяТочка КАК ТорговаяТочка,
		|	втОшибочныеХарактеристики.Номенклатура КАК Номенклатура,
		|	втОшибочныеХарактеристики.Характеристика КАК ХарактеристикаНеПравильная,
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты) КАК Поставщик
		|ПОМЕСТИТЬ втПоставщикиОшибочныхТоваров
		|ИЗ
		|	втОшибочныеХарактеристики КАК втОшибочныеХарактеристики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО втОшибочныеХарактеристики.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоставщикиОшибочныхТоваров.ТорговаяТочка КАК ТорговаяТочка,
		|	втПоставщикиОшибочныхТоваров.Номенклатура КАК Номенклатура,
		|	втПоставщикиОшибочныхТоваров.ХарактеристикаНеПравильная КАК ХарактеристикаНеПравильная,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры)) КАК ХарактеристикаПравильная
		|ПОМЕСТИТЬ втИсправленныеХарактеристики
		|ИЗ
		|	втПоставщикиОшибочныхТоваров КАК втПоставщикиОшибочныхТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (втПоставщикиОшибочныхТоваров.Номенклатура = ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец)
		|			И втПоставщикиОшибочныхТоваров.Поставщик = ЗначенияСвойствОбъектов.Значение
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоставщикиОшибочныхТоваров.ТорговаяТочка,
		|	втПоставщикиОшибочныхТоваров.Номенклатура,
		|	втПоставщикиОшибочныхТоваров.ХарактеристикаНеПравильная
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Номенклатура,
		|	ХарактеристикаНеПравильная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРаспределения.ТорговаяТочка,
		|	втДанныеРаспределения.Номенклатура,
		|	втДанныеРаспределения.Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам,
		|	втДанныеРаспределения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(втИсправленныеХарактеристики.ХарактеристикаПравильная, втДанныеРаспределения.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(втДанныеРаспределения.НомерРаспределения) КАК НомерРаспределения,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СкладМагазинаСтороннейРозницы,
		|	СУММА(втДанныеРаспределения.Количество) КАК Количество
		|ИЗ
		|	втДанныеРаспределения КАК втДанныеРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИсправленныеХарактеристики КАК втИсправленныеХарактеристики
		|		ПО втДанныеРаспределения.ТорговаяТочка = втИсправленныеХарактеристики.ТорговаяТочка
		|			И втДанныеРаспределения.Номенклатура = втИсправленныеХарактеристики.Номенклатура
		|			И втДанныеРаспределения.Характеристика = втИсправленныеХарактеристики.ХарактеристикаНеПравильная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО втДанныеРаспределения.ТорговаяТочка = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СкладМагазинаСтороннейРозницы))
		|ГДЕ
		|	втДанныеРаспределения.Количество <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеРаспределения.ТорговаяТочка,
		|	втДанныеРаспределения.Номенклатура,
		|	втДанныеРаспределения.Номенклатура.НеВедетсяУчетПоХарактеристикам,
		|	втДанныеРаспределения.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЕСТЬNULL(втИсправленныеХарактеристики.ХарактеристикаПравильная, втДанныеРаспределения.Характеристика),
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))";
	
КонецФункции

#КонецОбласти 

#КонецОбласти
