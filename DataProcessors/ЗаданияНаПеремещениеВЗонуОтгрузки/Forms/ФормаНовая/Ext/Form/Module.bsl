
Функция ПолучитьТаблицуРаспределения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, Объект.ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Склад"					, Объект.Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТТ
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаРаспределения, Расчетчик = &СтруктурноеПодразделение) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Владелец = &СтруктурноеПодразделение
	|	И (Склады.Ссылка = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурноеПодразделение
	|	И ДоступностьТоваровНаСкладах.Склад = &Склад";
					
	//Если НЕ Объект.ТТ.Пустая() Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//Условие_По_ТТ","И ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка = &ОтборТТ");
	//	Запрос.УстановитьПараметр("ОтборТТ",Объект.ТТ);
	//КонецЕсли;
	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Склад"			, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ЗонаОтгрузки"	, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("Характеристика"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаДанных.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	
	//Запрос.Текст = ТекстЗапроса;
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[0].Выгрузить();
	ТабСклады 	= Результаты[1].Выгрузить();
	ТабНоменклатураРаспределения = Результаты[2].Выгрузить();
	ТабНоменклатураРаспределения.Индексы.Добавить("Номенклатура");
	
	ЗаполнитьПоРаспределениюНаСервереПоЗонам(ТабТТ, ТабСклады, ТаблицаДанных);
	
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабНоменклатураРаспределения.Найти(ТаблицаДанных[КолвоСтрок - н].Номенклатура, "Номенклатура") = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ТаблицаДанных[КолвоСтрок - н].ЗонаОтгрузки) Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаДанных.Свернуть("Склад, ЗонаОтгрузки, Номенклатура, Характеристика", "Количество");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаполнитьПоРаспределениюНаСервереПоЗонам(ТабТТ, ТабСклады, ТаблицаДанных)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения", Объект.ДатаРаспределения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ХарактеристикаНеПравильная,
	|	ВЗ_Запрос.ТорговаяТочка,
	|	МАКСИМУМ(ЗначенияСвойствОбъектов.Объект) КАК ХарактеристикаПравильная
	|ПОМЕСТИТЬ ВТ_Коллизии
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
	|		ОстаткиРаспределенныеПоТТ.Характеристика КАК ХарактеристикаНеПравильная,
	|		ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК ТорговаяТочка,
	|		ЗначенияСвойствОбъектов.Значение КАК Поставщик
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
	|			ОстаткиРаспределенныеПоТТ.Характеристика КАК Характеристика,
	|			ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК ТорговаяТочка
	|		ИЗ
	|			РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
	|		ГДЕ
	|			ОстаткиРаспределенныеПоТТ.Дата = &ДатаРаспределения
	|			И ОстаткиРаспределенныеПоТТ.Номенклатура <> ОстаткиРаспределенныеПоТТ.Характеристика.Владелец
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОстаткиРаспределенныеПоТТ.Номенклатура,
	|			ОстаткиРаспределенныеПоТТ.Характеристика,
	|			ОстаткиРаспределенныеПоТТ.ТорговаяТочка
	|		ИЗ
	|			РегистрСведений.ОстаткиРаспределенныеПоТТПолная КАК ОстаткиРаспределенныеПоТТ
	|		ГДЕ
	|			ОстаткиРаспределенныеПоТТ.Дата = &ДатаРаспределения
	|			И ОстаткиРаспределенныеПоТТ.Номенклатура <> ОстаткиРаспределенныеПоТТ.Характеристика.Владелец) КАК ОстаткиРаспределенныеПоТТ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ОстаткиРаспределенныеПоТТ.Характеристика = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))) КАК ВЗ_Запрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ВЗ_Запрос.Номенклатура = ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец)
	|			И ВЗ_Запрос.Поставщик = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ХарактеристикаНеПравильная,
	|	ВЗ_Запрос.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Коллизии.ХарактеристикаПравильная ЕСТЬ NULL
	|			ТОГДА ВТ_Коллизии.ХарактеристикаПравильная
	|		ИНАЧЕ ОстаткиРаспределенныеПоТТ.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество) КАК Количество,
	|	МАКСИМУМ(ОстаткиРаспределенныеПоТТ.НомерРаспределения) КАК НомерРаспределения
	|ИЗ
	|	РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Коллизии КАК ВТ_Коллизии
	|		ПО ОстаткиРаспределенныеПоТТ.Номенклатура = ВТ_Коллизии.Номенклатура
	|			И ОстаткиРаспределенныеПоТТ.Характеристика = ВТ_Коллизии.ХарактеристикаНеПравильная
	|			И ОстаткиРаспределенныеПоТТ.ТорговаяТочка = ВТ_Коллизии.ТорговаяТочка
	|ГДЕ
	|	ОстаткиРаспределенныеПоТТ.Дата = &ДатаРаспределения
	|	И ОстаткиРаспределенныеПоТТ.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.ЕдиницаХраненияОстатков,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Коллизии.ХарактеристикаПравильная ЕСТЬ NULL
	|			ТОГДА ВТ_Коллизии.ХарактеристикаПравильная
	|		ИНАЧЕ ОстаткиРаспределенныеПоТТ.Характеристика
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.ЕдиницаХраненияОстатков,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Коллизии.ХарактеристикаПравильная ЕСТЬ NULL
	|			ТОГДА ВТ_Коллизии.ХарактеристикаПравильная
	|		ИНАЧЕ ОстаткиРаспределенныеПоТТ.Характеристика
	|	КОНЕЦ,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество),
	|	МАКСИМУМ(ОстаткиРаспределенныеПоТТ.НомерРаспределения)
	|ИЗ
	|	РегистрСведений.ОстаткиРаспределенныеПоТТПолная КАК ОстаткиРаспределенныеПоТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Коллизии КАК ВТ_Коллизии
	|		ПО ОстаткиРаспределенныеПоТТ.Номенклатура = ВТ_Коллизии.Номенклатура
	|			И ОстаткиРаспределенныеПоТТ.Характеристика = ВТ_Коллизии.ХарактеристикаНеПравильная
	|			И ОстаткиРаспределенныеПоТТ.ТорговаяТочка = ВТ_Коллизии.ТорговаяТочка
	|ГДЕ
	|	ОстаткиРаспределенныеПоТТ.Дата = &ДатаРаспределения
	|	И ОстаткиРаспределенныеПоТТ.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.ЕдиницаХраненияОстатков,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Коллизии.ХарактеристикаПравильная ЕСТЬ NULL
	|			ТОГДА ВТ_Коллизии.ХарактеристикаПравильная
	|		ИНАЧЕ ОстаткиРаспределенныеПоТТ.Характеристика
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Коллизии";
	
	ТабРаспределение = Запрос.Выполнить().Выгрузить();
	
	ТабТТРаспр = ТабРаспределение.Скопировать();
	ТабТТРаспр.Свернуть("ТорговаяТочка");
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурнаяЕдиница);			   
	Запрос.УстановитьПараметр("МассивТТ"				, ТабТТРаспр.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Склады"					, ТабСклады.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("Таб"						, ТабРаспределение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.СтруктурноеПодразделение,
	|	ВЗ_Запрос.ТорговаяТочка
	|ИЗ
	|	(ВЫБРАТЬ
	|		спрНоменклатура.Ссылка КАК Номенклатура,
	|		ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СтруктурноеПодразделение,
	|		ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|	ИЗ
	|		РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ДатаРаспределения, ДЕНЬ),
	|				ТорговаяТочка В (&МассивТТ)
	|					И ТорговаяТочка.id_TT <> 0) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ПО ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ = спрНоменклатура.ГруппаНоменклатурыУРЗ
	|	ГДЕ
	|		спрНоменклатура.ЭтоГруппа = ЛОЖЬ) КАК ВЗ_Запрос
	|ГДЕ
	|	ВЗ_Запрос.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	спрНоменклатура.Ссылка КАК Номенклатура,
	|	ДоступностьТоваровНаСкладах.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО ДоступностьТоваровНаСкладах.Номенклатура = спрНоменклатура.Ссылка
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.Склад В(&Склады)
	|	И спрНоменклатура.ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	спрНоменклатура.Ссылка КАК Номенклатура,
	|	ДоступностьТоваровНаСкладах.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО ДоступностьТоваровНаСкладах.Номенклатура = спрНоменклатура.Ссылка
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.Склад.Владелец = &СтруктурноеПодразделение
	|	И спрНоменклатура.ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыСклады.Склад,
	|	МаршрутыСклады.Склад.НеСоздаватьПеремещениеВЗонуОтгрузки,
	|	МаршрутыСклады.ЗонаОтгрузки КАК ОтгружаетсяИзЗоны,
	|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК ТорговаяТочка
	|ИЗ
	|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
	|		ПО МаршрутыТорговыеТочки.Ссылка = МаршрутыСклады.Ссылка
	|ГДЕ
	|	МаршрутыСклады.Ссылка.СтруктурноеПодразделение = &СтруктурноеПодразделение";
	
	Результаты = Запрос.ВыполнитьПакет();
	НастройкиПорядкаОбеспечения = Результаты[0].Выгрузить();
	НастройкиПорядкаОбеспечения.Индексы.Добавить("ТорговаяТочка, Номенклатура");
	НастройкиДоступностиТоваров = Результаты[1].Выгрузить();
	НастройкиДоступностиТоваров.Индексы.Добавить("Номенклатура");
	НастройкиДоступностиТоваровДляСтруктПодразделения = Результаты[2].Выгрузить();
	НастройкиДоступностиТоваровДляСтруктПодразделения.Индексы.Добавить("Номенклатура");
	ТабНастройкиЗонПоМаршрутам = Результаты[3].Выгрузить();
	ТабНастройкиЗонПоМаршрутам.Индексы.Добавить("Склад, ТорговаяТочка");
	
	ТабНоменклатураИСкладыРаспределение = НастройкиДоступностиТоваров.Скопировать();
	
	ОсновнойСклад = Объект.СтруктурнаяЕдиница.СкладТорговогоЗала;
	
	Для Каждого СтрокаРаспределение Из ТабРаспределение Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРаспределение.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПорядкаОбеспечения = НастройкиПорядкаОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, Номенклатура", СтрокаРаспределение.ТорговаяТочка, СтрокаРаспределение.Номенклатура));
		Если СтрокиПорядкаОбеспечения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Склад = Неопределено;
		СтрокаСклад = НастройкиДоступностиТоваров.Найти(СтрокаРаспределение.Номенклатура, "Номенклатура");
		Если СтрокаСклад = Неопределено Тогда
			СтрокаОбщиеНастройки = НастройкиДоступностиТоваровДляСтруктПодразделения.Найти(СтрокаРаспределение.Номенклатура, "Номенклатура");
			Если СтрокаОбщиеНастройки = Неопределено Тогда
				Если ЗначениеЗаполнено(Объект.Склад)
						И Объект.Склад = ОсновнойСклад Тогда
					Склад = ОсновнойСклад;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			Склад = СтрокаСклад.Склад;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Склад 				= Склад;
		СтрокиНастройкаЗоны = ТабНастройкиЗонПоМаршрутам.НайтиСтроки(Новый Структура("Склад, ТорговаяТочка", Склад, СтрокаРаспределение.ТорговаяТочка));
		Если СтрокиНастройкаЗоны.Количество() > 0
				И ЗначениеЗаполнено(СтрокиНастройкаЗоны[0].ОтгружаетсяИзЗоны)
				И НЕ СтрокиНастройкаЗоны[0].СкладНеСоздаватьПеремещениеВЗонуОтгрузки Тогда
			НоваяСтрока.ЗонаОтгрузки 	= СтрокиНастройкаЗоны[0].ОтгружаетсяИзЗоны;
		КонецЕсли;
		НоваяСтрока.ТорговаяТочка 		= СтрокаРаспределение.ТорговаяТочка;
		НоваяСтрока.Номенклатура 		= СтрокаРаспределение.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения 	= СтрокаРаспределение.ЕдиницаИзмерения;
		Если НЕ НоваяСтрока.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
			НоваяСтрока.Характеристика 	= СтрокаРаспределение.Характеристика;
		КонецЕсли;	
		НоваяСтрока.Количество	 		= СтрокаРаспределение.Количество;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПрочитатьДанныеСервер()
	
	ДеревоДанные.ПолучитьЭлементы().Очистить();
	
	ТабРаспределение = ПолучитьТаблицуРаспределения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"			, НачалоДня(Объект.ДатаРаспределения) - 86400);
	Запрос.УстановитьПараметр("ДатаКон"			, КонецДня(Объект.ДатаРаспределения));
	Запрос.УстановитьПараметр("Таб"				, ТабРаспределение);
	Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаОжидаемых"	, ТекущаяДата() - 86400);
	Запрос.УстановитьПараметр("СтрПодразделение", Объект.СтруктурнаяЕдиница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Склад,
	|	Таб.ЗонаОтгрузки,
	|	Таб.Номенклатура,
	|	Таб.Характеристика,
	|	Таб.Количество
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Склад,
	|	ВТ_Остатки.Номенклатура,
	|	ВТ_Остатки.Характеристика,
	|	СУММА(ВТ_Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЗ_Запрос.Склад КАК Склад,
	|		ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|		ВЗ_Запрос.Характеристика КАК Характеристика,
	|		ВЗ_Запрос.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Склад КАК Склад,
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|			ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, Склад.Владелец = &СтрПодразделение) КАК ТоварыНаСкладахОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПриходныйОрдерСкладТовары.Ссылка.Склад,
	|			ПриходныйОрдерСкладТовары.Номенклатура,
	|			ПриходныйОрдерСкладТовары.Характеристика,
	|			ПриходныйОрдерСкладТовары.Количество
	|		ИЗ
	|			Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ГДЕ
	|			ПриходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаОжидаемых
	|			И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|			И ПриходныйОрдерСкладТовары.Ссылка.ОжидаемыйПриход = ИСТИНА
	|			И ПриходныйОрдерСкладТовары.Ссылка.ПриемкаТерминаломЗакончена = ИСТИНА
	|			И ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &СтрПодразделение) КАК ВЗ_Запрос) КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Склад,
	|	ВТ_Остатки.Номенклатура,
	|	ВТ_Остатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеСклад.Ссылка.СкладПолучатель,
	|	ПеремещениеСклад.Номенклатура,
	|	ПеремещениеСклад.Характеристика,
	|	СУММА(ПеремещениеСклад.КоличествоОтправитель) КАК КоличествоОтправитель
	|ПОМЕСТИТЬ ВТ_ВРаботе
	|ИЗ
	|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСклад
	|ГДЕ
	|	ПеремещениеСклад.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПеремещениеСклад.Ссылка.Проведен = ИСТИНА
	|	И ПеремещениеСклад.Ссылка.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
	|	И ПеремещениеСклад.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.НеОбработан), ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.ВРаботе))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеСклад.Ссылка.СкладПолучатель,
	|	ПеремещениеСклад.Номенклатура,
	|	ПеремещениеСклад.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Склад КАК Склад,
	|	ВТ_Данные.ЗонаОтгрузки КАК ЗонаОтгрузки,
	|	ВТ_Данные.Номенклатура,
	|	ВТ_Данные.Характеристика,
	|	ВТ_Данные.Количество,
	|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК ОстатокПоСкладу,
	|	ЕСТЬNULL(ВТ_ОстаткиЗоны.КоличествоОстаток, 0) КАК ОстатокВЗоне,
	|	ЕСТЬNULL(ВТ_ВРаботе.КоличествоОтправитель, 0) КАК ВРаботе
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТ_Данные.Склад = ВТ_Остатки.Склад
	|			И ВТ_Данные.Номенклатура = ВТ_Остатки.Номенклатура
	|			И ВТ_Данные.Характеристика = ВТ_Остатки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_ОстаткиЗоны
	|		ПО ВТ_Данные.ЗонаОтгрузки = ВТ_ОстаткиЗоны.Склад
	|			И ВТ_Данные.Номенклатура = ВТ_ОстаткиЗоны.Номенклатура
	|			И ВТ_Данные.Характеристика = ВТ_ОстаткиЗоны.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО ВТ_Данные.Номенклатура = НоменклатураСпр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРаботе КАК ВТ_ВРаботе
	|		ПО ВТ_Данные.ЗонаОтгрузки = ВТ_ВРаботе.СкладПолучатель
	|			И ВТ_Данные.Номенклатура = ВТ_ВРаботе.Номенклатура
	|			И ВТ_Данные.Характеристика = ВТ_ВРаботе.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	ЗонаОтгрузки,
	|	НоменклатураСпр.Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ЗонаОтгрузки") Цикл
			СтрокаЗона = ДеревоДанные.ПолучитьЭлементы().Добавить();
			СтрокаЗона.Группировка = Выборка.ЗонаОтгрузки;
			Пока Выборка.Следующий() Цикл
				СтрокаТовар = СтрокаЗона.ПолучитьЭлементы().Добавить();
				СтрокаТовар.Группировка 		= Выборка.Номенклатура;
				СтрокаТовар.Характеристика 		= Выборка.Характеристика;
				СтрокаТовар.НужноВсего 			= Выборка.Количество;
				СтрокаТовар.ОстатокВЗоне 		= Выборка.ОстатокВЗоне;
				СтрокаТовар.ОстатокПоСкладу 	= Выборка.ОстатокПоСкладу;
				СтрокаТовар.СозданоКПеремещению = Выборка.ВРаботе;
				
				СтрокаТовар.ОстатокПоСкладу 	= СтрокаТовар.ОстатокПоСкладу - СтрокаТовар.СозданоКПеремещению;
				
				СтрокаЗона.НужноВсего 			= СтрокаЗона.НужноВсего 		+ Выборка.Количество;
				СтрокаЗона.ОстатокВЗоне 		= СтрокаЗона.ОстатокВЗоне 		+ Выборка.ОстатокВЗоне;
				СтрокаЗона.СозданоКПеремещению 	= СтрокаЗона.СозданоКПеремещению + СтрокаТовар.СозданоКПеремещению;
				СтрокаЗона.ОстатокПоСкладу 		= СтрокаЗона.ОстатокПоСкладу 	+ СтрокаТовар.ОстатокПоСкладу;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	СтатусОтказа = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРаспределения) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле 	= "Объект.ДатаРаспределения";
		Сообщение.Текст = "Не указана дата распределения";
		Сообщение.Сообщить();
		СтатусОтказа = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле 	= "Объект.СтруктурнаяЕдиница";
		Сообщение.Текст = "Не указана структурная единица";
		Сообщение.Сообщить();
		СтатусОтказа = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле 	= "Объект.Склад";
		Сообщение.Текст = "Не указан склад";
		Сообщение.Сообщить();
		СтатусОтказа = Истина;
	КонецЕсли;
	
	Если СтатусОтказа Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеСервер();
	
	Для Каждого СтрокаДерева Из ДеревоДанные.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанные.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработатьСозданиеПеремещений_()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, Объект.ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Склад"					, Объект.Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТТ
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаРаспределения, Расчетчик = &СтруктурноеПодразделение) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Владелец = &СтруктурноеПодразделение
	|	И (Склады.Ссылка = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурноеПодразделение
	|	И ДоступностьТоваровНаСкладах.Склад = &Склад";
					
	//Если НЕ Объект.ТТ.Пустая() Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//Условие_По_ТТ","И ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка = &ОтборТТ");
	//	Запрос.УстановитьПараметр("ОтборТТ",Объект.ТТ);
	//КонецЕсли;
	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Склад"			, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ЗонаОтгрузки"	, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("Характеристика"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаДанных.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	
	//Запрос.Текст = ТекстЗапроса;
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[0].Выгрузить();
	ТабСклады 	= Результаты[1].Выгрузить();
	ТабНоменклатураРаспределения = Результаты[2].Выгрузить();
	ТабНоменклатураРаспределения.Индексы.Добавить("Номенклатура");
	
	ЗаполнитьПоРаспределениюНаСервереПоЗонам(ТабТТ, ТабСклады, ТаблицаДанных);
	
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабНоменклатураРаспределения.Найти(ТаблицаДанных[КолвоСтрок - н].Номенклатура, "Номенклатура") = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ТаблицаДанных[КолвоСтрок - н].ЗонаОтгрузки) Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаДанных.Свернуть("Склад, ЗонаОтгрузки, Номенклатура, Характеристика, ЕдиницаИзмерения", "Количество");
	
	
	////почистим внутренние перемещения, которые еще не в работе
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеСклад.СкладОтправитель,
	|	ПеремещениеСклад.СкладПолучатель,
	|	ПеремещениеСклад.Ссылка
	|ИЗ
	|	Документ.ПеремещениеСклад КАК ПеремещениеСклад
	|ГДЕ
	|	ПеремещениеСклад.ДатаРаспределения = &ДатаРаспределения
	|	И &ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ПеремещениеСклад.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
	|	И ПеремещениеСклад.Проведен = ИСТИНА
	|	И ПеремещениеСклад.СкладОтправитель.Владелец = &СтруктурноеПодразделение
	|	И ПеремещениеСклад.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.НеОбработан)";
				   
	ТабДокументыПеремещения = Запрос.Выполнить().Выгрузить();
	//Для Каждого ДокументПеремещение Из ТабДокументыПеремещения Цикл
	//	БылоИзменениеДокумента = Ложь;
	//	ДокОбъект = ДокументПеремещение.Ссылка.ПолучитьОбъект();
	//	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	//		ДокОбъект.Товары.Очистить();
	//		БылоИзменениеДокумента = Истина;
	//	Иначе
	//		КолвоСтрок = ДокОбъект.Товары.Количество();
	//		Для н = 1 По КолвоСтрок Цикл
	//			Если ТабНоменклатураРаспределения.Найти(ДокОбъект.Товары[КолвоСтрок - н].Номенклатура, "Номенклатура") <> Неопределено Тогда
	//				ДокОбъект.Товары.Удалить(КолвоСтрок - н);
	//				БылоИзменениеДокумента = Истина;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//	КонецЕсли;
	//	Если БылоИзменениеДокумента Тогда
	//		Если ДокОбъект.Товары.Количество() = 0 Тогда
	//			ДокОбъект.ПометкаУдаления = Истина;
	//			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		Иначе	
	//			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;
	
	ТабНужноВЗонахОтгрузки = ТаблицаДанных.Скопировать();
	ТабНужноВЗонахОтгрузки.Колонки.Добавить("Остаток"	, Новый ОписаниеТипов("Число"));
	ТабНужноВЗонахОтгрузки.Колонки.Добавить("Нехватка"	, Новый ОписаниеТипов("Число"));
	
	ТабЗоны = ТабНужноВЗонахОтгрузки.Скопировать();
	ТабЗоны.Свернуть("ЗонаОтгрузки");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ПеремещатьИзбытокВЗонуХранения";
	ТабСкладыУбиратьИзбыток = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоличествоВКоробкеСрезПоследних.Характеристика,
	|	КоличествоВКоробкеСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			&ДатаРаспределения,
	|			СтруктурнаяЕдиница = &СтруктурноеПодразделение
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Номенклатура.Ссылка
	|					ИЗ
	|						Справочник.Номенклатура КАК Номенклатура
	|					ГДЕ
	|						Номенклатура.Весовой = ИСТИНА)) КАК КоличествоВКоробкеСрезПоследних";
	ТабКешКолвоВУпаковке = Запрос.Выполнить().Выгрузить();
	ТабКешКолвоВУпаковке.Индексы.Добавить("Характеристика");
	
	Если ТабЗоны.Количество() > 0 Тогда
		
		ЗапросОстаткиЗон = Новый Запрос();
		ЗапросОстаткиЗон.УстановитьПараметр("Зоны", ТабЗоны.ВыгрузитьКолонку("ЗонаОтгрузки"));
		ЗапросОстаткиЗон.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад В (&Зоны)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства";
								 
		Результаты = ЗапросОстаткиЗон.ВыполнитьПакет();
		ТабОстаткиЗонОтгрузки = Результаты[0].Выгрузить();
		//ТабОстаткиЗонХранения = Результаты[1].Выгрузить();
		Для Каждого СтрокаТаб Из ТабНужноВЗонахОтгрузки Цикл
			СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.ЗонаОтгрузки, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
				СтрокаТаб.Остаток = СтрокаТаб.Остаток + СтрокаОстаток.Количество;
			КонецЦикла;	
		КонецЦикла;
		
		//докинем то что есть в остатка в зонах, но нет в потребностях в избыток
		Для Каждого СтрокаОстаток Из ТабОстаткиЗонОтгрузки Цикл
			Если СтрокаОстаток.Количество > 0 Тогда
				СтрокиНужноВЗонах = ТабНужноВЗонахОтгрузки.НайтиСтроки(Новый Структура("ЗонаОтгрузки, Номенклатура, Характеристика", СтрокаОстаток.Склад, СтрокаОстаток.Номенклатура, СтрокаОстаток.Характеристика));
				Если СтрокиНужноВЗонах.Количество() = 0 Тогда
					СтрокаДоб = ТабНужноВЗонахОтгрузки.Добавить();
					СтрокаДоб.Склад = Объект.Склад;
					СтрокаДоб.ЗонаОтгрузки = СтрокаОстаток.Склад;
					СтрокаДоб.Номенклатура = СтрокаОстаток.Номенклатура;
					СтрокаДоб.Характеристика = СтрокаОстаток.Характеристика;
					СтрокаДоб.Остаток = СтрокаОстаток.Количество;
					СтрокаДоб.Нехватка = СтрокаОстаток.Количество * (-1);
					СтрокаДоб.ЕдиницаИзмерения = СтрокаОстаток.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ЗапросВРаботе = Новый Запрос;
		ЗапросВРаботе.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаРаспределения) - 86400);
		ЗапросВРаботе.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаРаспределения));
		ЗапросВРаботе.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеСклад.Ссылка.СкладПолучатель КАК Склад,
		|	ПеремещениеСклад.Номенклатура,
		|	ПеремещениеСклад.Характеристика,
		|	СУММА(ПеремещениеСклад.КоличествоОтправитель) КАК Количество
		|ИЗ
		|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСклад
		|ГДЕ
		|	ПеремещениеСклад.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПеремещениеСклад.Ссылка.Проведен = ИСТИНА
		|	И ПеремещениеСклад.Ссылка.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
		|	И ПеремещениеСклад.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.НеОбработан), ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.ВРаботе))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеСклад.Ссылка.СкладОтправитель,
		|	ПеремещениеСклад.Ссылка.СкладПолучатель,
		|	ПеремещениеСклад.Номенклатура,
		|	ПеремещениеСклад.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеСклад.Ссылка.СкладОтправитель КАК Склад,
		|	ПеремещениеСклад.Номенклатура,
		|	ПеремещениеСклад.Характеристика,
		|	СУММА(ПеремещениеСклад.КоличествоОтправитель) КАК Количество
		|ИЗ
		|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСклад
		|ГДЕ
		|	ПеремещениеСклад.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПеремещениеСклад.Ссылка.Проведен = ИСТИНА
		|	И ПеремещениеСклад.Ссылка.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
		|	И ПеремещениеСклад.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.НеОбработан), ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.ВРаботе))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеСклад.Ссылка.СкладОтправитель,
		|	ПеремещениеСклад.Ссылка.СкладПолучатель,
		|	ПеремещениеСклад.Номенклатура,
		|	ПеремещениеСклад.Характеристика";
		Результаты = ЗапросВРаботе.ВыполнитьПакет();
		ТабВРаботе = Результаты[0].Выгрузить();
		
		Для Каждого СтрокаТаб Из ТабНужноВЗонахОтгрузки Цикл
			СтрокиОстатка = ТабВРаботе.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.ЗонаОтгрузки, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
				СтрокаТаб.Остаток = СтрокаТаб.Остаток + СтрокаОстаток.Количество;
			КонецЦикла;	
		КонецЦикла;
		
		ТабВРаботе = Результаты[1].Выгрузить();
		Для Каждого СтрокаТаб Из ТабНужноВЗонахОтгрузки Цикл
			СтрокиОстатка = ТабВРаботе.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.ЗонаОтгрузки, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
				СтрокаТаб.Остаток = СтрокаТаб.Остаток - СтрокаОстаток.Количество;
			КонецЦикла;	
		КонецЦикла;
		
		//теперь рассчитываем нехватку и избыток в зонах отгрузки
		ТаблицаДокументовПеремещений = Новый ТаблицаЗначений();
		ТаблицаДокументовПеремещений.Колонки.Добавить("СкладОтправитель");
		ТаблицаДокументовПеремещений.Колонки.Добавить("СкладПолучатель");
		ТаблицаДокументовПеремещений.Колонки.Добавить("ДокОбъект");
		Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
			СтрокаНужноВЗонах.Нехватка = СтрокаНужноВЗонах.Количество - СтрокаНужноВЗонах.Остаток;
		КонецЦикла;
		
		Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
			Если СтрокаНужноВЗонах.Нехватка > 0 Тогда
				СтрокиСИзбытком = ТабНужноВЗонахОтгрузки.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика));
				ТабСтрокиСИзбытком = Новый ТаблицаЗначений();
				ТабСтрокиСИзбытком.Колонки.Добавить("СтрокаВТаблице");
				ТабСтрокиСИзбытком.Колонки.Добавить("Нехватка");
				Для Каждого СтрокаСИзбытком Из СтрокиСИзбытком Цикл
					Если СтрокаСИзбытком.Нехватка >= 0
							ИЛИ СтрокаСИзбытком.ЗонаОтгрузки = СтрокаНужноВЗонах.ЗонаОтгрузки Тогда
						Продолжить;
					КонецЕсли;
					СтрокаДоб = ТабСтрокиСИзбытком.Добавить();
					СтрокаДоб.СтрокаВТаблице 	= СтрокаСИзбытком;
					СтрокаДоб.Нехватка 			= СтрокаСИзбытком.Нехватка * -1;
				КонецЦикла;
				ТабСтрокиСИзбытком.Сортировать("Нехватка убыв");
				Для Каждого СтрокаСИзбытком Из ТабСтрокиСИзбытком Цикл
					Если СтрокаНужноВЗонах.Нехватка <= 0 Тогда
						Прервать;
					КонецЕсли;
					КолвоОтработать = Мин(СтрокаНужноВЗонах.Нехватка, СтрокаСИзбытком.Нехватка);
					СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаСИзбытком.СтрокаВТаблице.ЗонаОтгрузки, СтрокаСИзбытком.СтрокаВТаблице.Номенклатура, СтрокаСИзбытком.СтрокаВТаблице.Характеристика));
					Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
						Если КолвоОтработать <= 0 Тогда
							Прервать;
						КонецЕсли;	
						МинКолво = Мин(КолвоОтработать, СтрокаОстатка.Количество);
						Если МинКолво <= 0 Тогда
							Продолжить;
						КонецЕсли;	
						СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаОстатка.Склад, СтрокаНужноВЗонах.ЗонаОтгрузки));
						Если СтрокиСДокументом.Количество() = 0 Тогда
							ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
							ДокОбъект.Дата 						= ТекущаяДата();
							ДокОбъект.ДатаРаспределения 		= Объект.ДатаРаспределения;
							ДокОбъект.ЭтоСборкаВЗоныОтгрузки 	= Истина;
							ДокОбъект.СкладОтправитель 			= СтрокаОстатка.Склад;
							ДокОбъект.СкладПолучатель 			= СтрокаНужноВЗонах.ЗонаОтгрузки;
							СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
							СтрокаДок.СкладОтправитель 	= СтрокаОстатка.Склад;
							СтрокаДок.СкладПолучатель 	= СтрокаНужноВЗонах.ЗонаОтгрузки;
							СтрокаДок.ДокОбъект 		= ДокОбъект;
						Иначе
							СтрокаДок = СтрокиСДокументом[0];
						КонецЕсли;
						СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстатка.Номенклатура, СтрокаОстатка.Характеристика, СтрокаОстатка.ДатаПроизводства));
						Если СтрокиДокаТовар.Количество() = 0 Тогда
							СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
							СтрокаВДокументе.Номенклатура 		= СтрокаОстатка.Номенклатура;
							СтрокаВДокументе.Характеристика 	= СтрокаОстатка.Характеристика;
							СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстатка.ЕдиницаИзмерения;
							СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстатка.ДатаПроизводства;
						Иначе
							СтрокаВДокументе = СтрокиДокаТовар[0];
						КонецЕсли;
						СтрокаВДокументе.КоличествоОтправитель 	= СтрокаВДокументе.КоличествоОтправитель 	+ МинКолво;
						СтрокаВДокументе.КоличествоПолучатель 	= СтрокаВДокументе.КоличествоПолучатель 	+ МинКолво;
						СтрокаОстатка.Количество 	= СтрокаОстатка.Количество 	- МинКолво;
						КолвоОтработать 			= КолвоОтработать 			- МинКолво;
						СтрокаСИзбытком.Нехватка 	= СтрокаСИзбытком.Нехватка 	+ МинКолво;
						СтрокаНужноВЗонах.Нехватка 	= СтрокаНужноВЗонах.Нехватка - МинКолво;
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
		
		//теперь запишем перемещения между зонами отгрузки, чтобы потом понять, сколько в них нужно доложить из зон хранения
		Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
			КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
			Для н = 1 По КолвоСтрок Цикл
				СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
				СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
				Если СтрокаКеш <> Неопределено
					И СтрокаКеш.Количество <> 0 Тогда
					Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.5 Тогда
						СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
				СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		КонецЦикла;
		
		//остатки, которые никак не участвовали, но лежат в зонах, надо перекинуть в зону хранения
		ТабУжеОтработаны = Новый ТаблицаЗначений();
		ТабУжеОтработаны.Колонки.Добавить("Склад");
		ТабУжеОтработаны.Колонки.Добавить("Номенклатура");
		ТабУжеОтработаны.Колонки.Добавить("Характеристика");
		Для Каждого СтрокаОстатокЗоны Из ТабОстаткиЗонОтгрузки Цикл
			Если СтрокаОстатокЗоны.Количество < 0 Тогда
				Продолжить;
			КонецЕсли;	
			СтрокиВНужных 			= ТабНужноВЗонахОтгрузки.НайтиСтроки(Новый Структура("ЗонаОтгрузки, Номенклатура, Характеристика", СтрокаОстатокЗоны.Склад, СтрокаОстатокЗоны.Номенклатура, СтрокаОстатокЗоны.Характеристика));
			СтрокиВУжеОтработанных 	= ТабУжеОтработаны.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаОстатокЗоны.Склад, СтрокаОстатокЗоны.Номенклатура, СтрокаОстатокЗоны.Характеристика));
			Если СтрокиВНужных.Количество() = 0
					ИЛИ СтрокиВУжеОтработанных.Количество() > 0 Тогда
				СтрокаДоб = ТабНужноВЗонахОтгрузки.Добавить();
				СтрокаДоб.Склад 			= Объект.Склад;
				СтрокаДоб.ЗонаОтгрузки 		= СтрокаОстатокЗоны.Склад;
				СтрокаДоб.Номенклатура 		= СтрокаОстатокЗоны.Номенклатура;
				СтрокаДоб.Характеристика 	= СтрокаОстатокЗоны.Характеристика;
				СтрокаДоб.ЕдиницаИзмерения 	= СтрокаОстатокЗоны.ЕдиницаИзмерения;
				СтрокаДоб.Нехватка 			= СтрокаОстатокЗоны.Количество * (-1);
				
				СтрокаДоб = ТабУжеОтработаны.Добавить();
				СтрокаДоб.Склад 			= СтрокаОстатокЗоны.Склад;
				СтрокаДоб.Номенклатура 		= СтрокаОстатокЗоны.Номенклатура;
				СтрокаДоб.Характеристика 	= СтрокаОстатокЗоны.Характеристика;
			КонецЕсли;	
		КонецЦикла;	
		
		ТаблицаДокументовПеремещений.Очистить();
		
		//теперь перекинем все оставшиеся излишки в зону хранения
		Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
			Если СтрокаНужноВЗонах.Нехватка < 0 Тогда
				СтрокаПеремещатьИзбыток = ТабСкладыУбиратьИзбыток.Найти(СтрокаНужноВЗонах.ЗонаОтгрузки, "Ссылка");
				Если СтрокаПеремещатьИзбыток = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаНужноВЗонах.ЗонаОтгрузки, СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика));
				Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
					Если СтрокаНужноВЗонах.Нехватка >= 0 Тогда
						Прервать;
					КонецЕсли;	
					МинКолво = Мин(СтрокаНужноВЗонах.Нехватка * -1, СтрокаОстатка.Количество);
					Если МинКолво <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаНужноВЗонах.ЗонаОтгрузки, СтрокаНужноВЗонах.Склад));
					Если СтрокиСДокументом.Количество() = 0 Тогда
						ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
						ДокОбъект.Дата 					= ТекущаяДата();
						ДокОбъект.ДатаРаспределения 	= Объект.ДатаРаспределения;
						ДокОбъект.ЭтоСборкаВЗоныОтгрузки = Истина;
						ДокОбъект.СкладОтправитель 		= СтрокаНужноВЗонах.ЗонаОтгрузки;
						ДокОбъект.СкладПолучатель 		= СтрокаНужноВЗонах.Склад;
						СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
						СтрокаДок.СкладОтправитель 	= СтрокаНужноВЗонах.ЗонаОтгрузки;
						СтрокаДок.СкладПолучатель 	= СтрокаНужноВЗонах.Склад;
						СтрокаДок.ДокОбъект 		= ДокОбъект;
					Иначе
						СтрокаДок = СтрокиСДокументом[0];
					КонецЕсли;
					СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстатка.Номенклатура, СтрокаОстатка.Характеристика, СтрокаОстатка.ДатаПроизводства));
					Если СтрокиДокаТовар.Количество() = 0 Тогда
						СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
						СтрокаВДокументе.Номенклатура 		= СтрокаОстатка.Номенклатура;
						СтрокаВДокументе.Характеристика 	= СтрокаОстатка.Характеристика;
						СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстатка.ЕдиницаИзмерения;
						СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстатка.ДатаПроизводства;
					Иначе
						СтрокаВДокументе = СтрокиДокаТовар[0];
					КонецЕсли;
					СтрокаВДокументе.КоличествоОтправитель 	= СтрокаВДокументе.КоличествоОтправитель 	+ МинКолво;
					СтрокаВДокументе.КоличествоПолучатель 	= СтрокаВДокументе.КоличествоПолучатель 	+ МинКолво;
					СтрокаОстатка.Количество 				= СтрокаОстатка.Количество 					- МинКолво;
					СтрокаНужноВЗонах.Нехватка 				= СтрокаНужноВЗонах.Нехватка 				+ МинКолво;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
			КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
			Для н = 1 По КолвоСтрок Цикл
				СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
				СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
				Если СтрокаКеш <> Неопределено
						И СтрокаКеш.Количество <> 0 Тогда
					Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.5 Тогда
						СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
				СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		КонецЦикла;
		
		ТаблицаДокументовПеремещений.Очистить();
		
		//теперь перекинем в зоны отгрузки нужные количества из зон хранения
		ЗапросОстаткиЗон.УстановитьПараметр("Зоны"						, ТабЗоны.ВыгрузитьКолонку("ЗонаОтгрузки"));
		ЗапросОстаткиЗон.УстановитьПараметр("СтруктурноеПодразделение"	, Объект.СтруктурнаяЕдиница);
		ЗапросОстаткиЗон.УстановитьПараметр("Склад"						, Объект.Склад);
		ЗапросОстаткиЗон.УстановитьПараметр("ДатаОжидаемых"				, ТекущаяДата() - 86400);
		ЗапросОстаткиЗон.Текст =
		"ВЫБРАТЬ
		|	ВЗ_Остатки.Склад,
		|	ВЗ_Остатки.Номенклатура,
		|	ВЗ_Остатки.Характеристика,
		|	ВЗ_Остатки.ЕдиницаИзмерения,
		|	ВЗ_Остатки.ДатаПроизводства,
		|	ВЗ_Остатки.Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЗ_Остатки.Склад КАК Склад,
		|		ВЗ_Остатки.Номенклатура КАК Номенклатура,
		|		ВЗ_Остатки.Характеристика КАК Характеристика,
		|		ВЗ_Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ВЗ_Остатки.ДатаПроизводства КАК ДатаПроизводства,
		|		СУММА(ВЗ_Остатки.Количество) КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТоварыНаСкладахОстатки.Склад КАК Склад,
		|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|			ТоварыНаСкладахОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		|			ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(
		|					,
		|					НЕ Склад В (&Зоны)
		|							И Склад.Владелец = &СтруктурноеПодразделение
		|							И Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки
		|		ГДЕ
		|			ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ПриходныйОрдерСкладТовары.Ссылка.Склад,
		|			ПриходныйОрдерСкладТовары.Номенклатура,
		|			ПриходныйОрдерСкладТовары.Характеристика,
		|			ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
		|			ПриходныйОрдерСкладТовары.ДатаПроизводства,
		|			ПриходныйОрдерСкладТовары.Количество
		|		ИЗ
		|			Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|		ГДЕ
		|			ПриходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаОжидаемых
		|			И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		|			И ПриходныйОрдерСкладТовары.Ссылка.ОжидаемыйПриход = ИСТИНА
		|			И ПриходныйОрдерСкладТовары.Ссылка.ПриемкаТерминаломЗакончена = ИСТИНА) КАК ВЗ_Остатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВЗ_Остатки.Склад,
		|		ВЗ_Остатки.Номенклатура,
		|		ВЗ_Остатки.Характеристика,
		|		ВЗ_Остатки.ЕдиницаИзмерения,
		|		ВЗ_Остатки.ДатаПроизводства) КАК ВЗ_Остатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_Остатки.Склад,
		|	ВЗ_Остатки.Номенклатура,
		|	ВЗ_Остатки.Характеристика,
		|	ВЗ_Остатки.ДатаПроизводства";
								 
		Результаты = ЗапросОстаткиЗон.ВыполнитьПакет();
		ТабОстаткиЗонХранения = Результаты[0].Выгрузить();
		
		Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
			Если СтрокаНужноВЗонах.Нехватка > 0 Тогда
				СтрокиОстатка = ТабОстаткиЗонХранения.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаНужноВЗонах.Склад, СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика));
				Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
					Если СтрокаНужноВЗонах.Нехватка <= 0 Тогда
						Прервать;
					КонецЕсли;	
					МинКолво = Мин(СтрокаНужноВЗонах.Нехватка, СтрокаОстатка.Количество);
					Если МинКолво <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаНужноВЗонах.Склад, СтрокаНужноВЗонах.ЗонаОтгрузки));
					Если СтрокиСДокументом.Количество() = 0 Тогда
						ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
						ДокОбъект.Дата = ТекущаяДата();
						ДокОбъект.ДатаРаспределения 		= Объект.ДатаРаспределения;
						ДокОбъект.ЭтоСборкаВЗоныОтгрузки 	= Истина;
						ДокОбъект.СкладОтправитель 			= СтрокаНужноВЗонах.Склад;
						ДокОбъект.СкладПолучатель 			= СтрокаНужноВЗонах.ЗонаОтгрузки;
						СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
						СтрокаДок.СкладОтправитель 	= СтрокаНужноВЗонах.Склад;
						СтрокаДок.СкладПолучатель 	= СтрокаНужноВЗонах.ЗонаОтгрузки;
						СтрокаДок.ДокОбъект 		= ДокОбъект;
					Иначе
						СтрокаДок = СтрокиСДокументом[0];
					КонецЕсли;
					СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстатка.Номенклатура, СтрокаОстатка.Характеристика, СтрокаОстатка.ДатаПроизводства));
					Если СтрокиДокаТовар.Количество() = 0 Тогда
						СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
						СтрокаВДокументе.Номенклатура 		= СтрокаОстатка.Номенклатура;
						СтрокаВДокументе.Характеристика 	= СтрокаОстатка.Характеристика;
						СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстатка.ЕдиницаИзмерения;
						СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстатка.ДатаПроизводства;
					Иначе
						СтрокаВДокументе = СтрокиДокаТовар[0];
					КонецЕсли;
					СтрокаВДокументе.КоличествоОтправитель 	= СтрокаВДокументе.КоличествоОтправитель 	+ МинКолво;
					СтрокаВДокументе.КоличествоПолучатель 	= СтрокаВДокументе.КоличествоПолучатель 	+ МинКолво;
					СтрокаОстатка.Количество 				= СтрокаОстатка.Количество 					- МинКолво;
					СтрокаНужноВЗонах.Нехватка 				= СтрокаНужноВЗонах.Нехватка 				- МинКолво;
				КонецЦикла;
				//Если СтрокаНужноВЗонах.Нехватка > 0 Тогда
				//	СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаНужноВЗонах.Склад, СтрокаНужноВЗонах.ЗонаОтгрузки));
				//	Если СтрокиСДокументом.Количество() = 0 Тогда
				//		ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
				//		ДокОбъект.Дата = ТекущаяДата();
				//		ДокОбъект.ДатаРаспределения = Объект.ДатаРаспределения;
				//		ДокОбъект.ЭтоСборкаВЗоныОтгрузки = Истина;
				//		ДокОбъект.СкладОтправитель = СтрокаНужноВЗонах.Склад;
				//		ДокОбъект.СкладПолучатель = СтрокаНужноВЗонах.ЗонаОтгрузки;
				//		СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
				//		СтрокаДок.СкладОтправитель = СтрокаНужноВЗонах.Склад;
				//		СтрокаДок.СкладПолучатель = СтрокаНужноВЗонах.ЗонаОтгрузки;
				//		СтрокаДок.ДокОбъект = ДокОбъект;
				//	Иначе
				//		СтрокаДок = СтрокиСДокументом[0];
				//	КонецЕсли;
				//	СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика, '00010101'));
				//	Если СтрокиДокаТовар.Количество() = 0 Тогда
				//		СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
				//		СтрокаВДокументе.Номенклатура = СтрокаНужноВЗонах.Номенклатура;
				//		СтрокаВДокументе.Характеристика = СтрокаНужноВЗонах.Характеристика;
				//		СтрокаВДокументе.ЕдиницаИзмерения = СтрокаНужноВЗонах.ЕдиницаИзмерения;
				//		//СтрокаВДокументе.ДатаПроизводства = СтрокаОстатка.ДатаПроизводства;
				//	Иначе
				//		СтрокаВДокументе = СтрокиДокаТовар[0];
				//	КонецЕсли;
				//	СтрокаВДокументе.КоличествоОтправитель = СтрокаВДокументе.КоличествоОтправитель + СтрокаНужноВЗонах.Нехватка;
				//	СтрокаВДокументе.КоличествоПолучатель = СтрокаВДокументе.КоличествоПолучатель + СтрокаНужноВЗонах.Нехватка;
				//	СтрокаНужноВЗонах.Нехватка = 0;
				//КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
			КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
			Для н = 1 По КолвоСтрок Цикл
				СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
				СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
				Если СтрокаКеш <> Неопределено
						И СтрокаКеш.Количество <> 0 Тогда
					Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.5 Тогда
						СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
				СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьСозданиеПеремещений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРаспределения"		, Объект.ДатаРаспределения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Склад"					, Объект.Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТТ
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаРаспределения, Расчетчик = &СтруктурноеПодразделение) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Владелец = &СтруктурноеПодразделение
	|	И (Склады.Ссылка = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурноеПодразделение
	|	И ДоступностьТоваровНаСкладах.Склад = &Склад";
					
	//Если НЕ Объект.ТТ.Пустая() Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//Условие_По_ТТ","И ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка = &ОтборТТ");
	//	Запрос.УстановитьПараметр("ОтборТТ",Объект.ТТ);
	//КонецЕсли;
	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Склад"			, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ЗонаОтгрузки"	, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанных.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("Характеристика"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаДанных.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	
	//Запрос.Текст = ТекстЗапроса;
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ 		= Результаты[0].Выгрузить();
	ТабСклады 	= Результаты[1].Выгрузить();
	ТабНоменклатураРаспределения = Результаты[2].Выгрузить();
	ТабНоменклатураРаспределения.Индексы.Добавить("Номенклатура");
	
	ЗаполнитьПоРаспределениюНаСервереПоЗонам(ТабТТ, ТабСклады, ТаблицаДанных);
	
	КолвоСтрок = ТаблицаДанных.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабНоменклатураРаспределения.Найти(ТаблицаДанных[КолвоСтрок - н].Номенклатура, "Номенклатура") = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ТаблицаДанных[КолвоСтрок - н].ЗонаОтгрузки) Тогда
			ТаблицаДанных.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаДанных.Свернуть("Склад, ЗонаОтгрузки, Номенклатура, Характеристика, ЕдиницаИзмерения", "Количество");
	
	ТабНужноВЗонахОтгрузки = ТаблицаДанных.Скопировать();
	ТабНужноВЗонахОтгрузки.Колонки.Добавить("Остаток"	, Новый ОписаниеТипов("Число"));
	ТабНужноВЗонахОтгрузки.Колонки.Добавить("Нехватка"	, Новый ОписаниеТипов("Число"));
	
	ТабЗоны = ТабНужноВЗонахОтгрузки.Скопировать();
	ТабЗоны.Свернуть("ЗонаОтгрузки");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ПеремещатьИзбытокВЗонуХранения
	|	И Склады.Владелец = &СтруктурноеПодразделение";
	ТабСкладыУбиратьИзбыток = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоличествоВКоробкеСрезПоследних.Характеристика,
	|	КоличествоВКоробкеСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			&ДатаРаспределения,
	|			СтруктурнаяЕдиница = &СтруктурноеПодразделение
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Номенклатура.Ссылка
	|					ИЗ
	|						Справочник.Номенклатура КАК Номенклатура
	|					ГДЕ
	|						Номенклатура.Весовой = ИСТИНА)) КАК КоличествоВКоробкеСрезПоследних";
	ТабКешКолвоВУпаковке = Запрос.Выполнить().Выгрузить();
	ТабКешКолвоВУпаковке.Индексы.Добавить("Характеристика");
	
	//считаем все остатки
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"	, Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Склад"						, Объект.Склад);
	Запрос.УстановитьПараметр("ДатаОжидаемых"				, ТекущаяДата() - 86400);
	Запрос.УстановитьПараметр("Зоны"						, ТабЗоны.ВыгрузитьКолонку("ЗонаОтгрузки"));
	Запрос.УстановитьПараметр("ДатаРаспределения"		, Объект.ДатаРаспределения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЗ_Остатки.Склад,
	               |	ВЗ_Остатки.Номенклатура,
	               |	ВЗ_Остатки.Характеристика,
	               |	ВЗ_Остатки.ЕдиницаИзмерения,
	               |	ВЗ_Остатки.ДатаПроизводства,
	               |	ВЗ_Остатки.Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЗ_Остатки.Склад КАК Склад,
	               |		ВЗ_Остатки.Номенклатура КАК Номенклатура,
	               |		ВЗ_Остатки.Характеристика КАК Характеристика,
	               |		ВЗ_Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ВЗ_Остатки.ДатаПроизводства КАК ДатаПроизводства,
	               |		СУММА(ВЗ_Остатки.Количество) КАК Количество
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |			ТоварыНаСкладахОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |			ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
	               |			ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |		ИЗ
	               |			РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |					,
	               |					Склад.Владелец = &СтруктурноеПодразделение
	               |						И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ПриходныйОрдерСкладТовары.Ссылка.Склад,
	               |			ПриходныйОрдерСкладТовары.Номенклатура,
	               |			ПриходныйОрдерСкладТовары.Характеристика,
	               |			ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	               |			ПриходныйОрдерСкладТовары.ДатаПроизводства,
	               |			ПриходныйОрдерСкладТовары.Количество
	               |		ИЗ
	               |			Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	               |		ГДЕ
	               |			ПриходныйОрдерСкладТовары.Ссылка.Дата >= &ДатаОжидаемых
	               |			И ПриходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	               |			И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |			И ПриходныйОрдерСкладТовары.Ссылка.ОжидаемыйПриход = ИСТИНА
	               |			И ПриходныйОрдерСкладТовары.Ссылка.ПриемкаТерминаломЗакончена = ИСТИНА) КАК ВЗ_Остатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВЗ_Остатки.Склад,
	               |		ВЗ_Остатки.Номенклатура,
	               |		ВЗ_Остатки.Характеристика,
	               |		ВЗ_Остатки.ЕдиницаИзмерения,
	               |		ВЗ_Остатки.ДатаПроизводства) КАК ВЗ_Остатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЗ_Остатки.Склад,
	               |	ВЗ_Остатки.Номенклатура,
	               |	ВЗ_Остатки.Характеристика,
	               |	ВЗ_Остатки.ДатаПроизводства
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Склад.Владелец = &СтруктурноеПодразделение
	               |				И Склад В (&Зоны)) КАК ТоварыНаСкладахОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склады.Ссылка
	               |ПОМЕСТИТЬ ВТ_Склады
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	(Склады.Ссылка = &Склад
	               |			ИЛИ Склады.Ссылка В (&Зоны))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеСкладТовары.Номенклатура,
	               |	ПеремещениеСкладТовары.Характеристика,
	               |	ПеремещениеСкладТовары.ЕдиницаИзмерения,
	               |	ПеремещениеСкладТовары.ДатаПроизводства,
	               |	ПеремещениеСкладТовары.КоличествоОтправитель КАК Количество,
	               |	ПеремещениеСкладТовары.Ссылка.СкладОтправитель,
	               |	ПеремещениеСкладТовары.Ссылка.СкладПолучатель
	               |ИЗ
	               |	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСкладТовары
	               |ГДЕ
	               |	ПеремещениеСкладТовары.Ссылка.ДатаРаспределения = &ДатаРаспределения
	               |	И ПеремещениеСкладТовары.Ссылка.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
	               |	И ПеремещениеСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И ПеремещениеСкладТовары.Ссылка.СкладОтправитель.Владелец = &СтруктурноеПодразделение
	               |	И ПеремещениеСкладТовары.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.НеОбработан), ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенияСклад.ВРаботе))
	               |	И (ПеремещениеСкладТовары.Ссылка.СкладОтправитель В
	               |				(ВЫБРАТЬ
	               |					ВТ_Склады.Ссылка
	               |				ИЗ
	               |					ВТ_Склады КАК ВТ_Склады)
	               |			ИЛИ ПеремещениеСкладТовары.Ссылка.СкладПолучатель В
	               |				(ВЫБРАТЬ
	               |					ВТ_Склады.Ссылка
	               |				ИЗ
	               |					ВТ_Склады КАК ВТ_Склады))";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабОстаткиЗонХранения = Результаты[0].Выгрузить();
	ТабОстаткиЗонОтгрузки = Результаты[1].Выгрузить();
	ТабПеремещенияВРаботе = Результаты[3].Выгрузить();
	
	//докинем в остатки все перемещения, которые только пойдут в работу
	Для Каждого СтрокаПеремещение Из ТабПеремещенияВРаботе Цикл
		Если СтрокаПеремещение.СкладОтправитель = Объект.Склад Тогда
			СтрокаДоб = ТабОстаткиЗонХранения.Добавить();
			СтрокаДоб.Склад = СтрокаПеремещение.СкладОтправитель;
			СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаПеремещение.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаПеремещение.ЕдиницаИзмерения;
			СтрокаДоб.ДатаПроизводства = СтрокаПеремещение.ДатаПроизводства;
			СтрокаДоб.Количество = СтрокаПеремещение.Количество * (-1);
		КонецЕсли;
		Если ТабЗоны.Найти(СтрокаПеремещение.СкладОтправитель, "ЗонаОтгрузки") <> Неопределено Тогда
			СтрокаДоб = ТабОстаткиЗонОтгрузки.Добавить();
			СтрокаДоб.Склад = СтрокаПеремещение.СкладОтправитель;
			СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаПеремещение.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаПеремещение.ЕдиницаИзмерения;
			СтрокаДоб.ДатаПроизводства = СтрокаПеремещение.ДатаПроизводства;
			СтрокаДоб.Количество = СтрокаПеремещение.Количество * (-1);
		КонецЕсли;
		
		Если СтрокаПеремещение.СкладПолучатель = Объект.Склад Тогда
			СтрокаДоб = ТабОстаткиЗонХранения.Добавить();
			СтрокаДоб.Склад = СтрокаПеремещение.СкладПолучатель;
			СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаПеремещение.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаПеремещение.ЕдиницаИзмерения;
			СтрокаДоб.ДатаПроизводства = СтрокаПеремещение.ДатаПроизводства;
			СтрокаДоб.Количество = СтрокаПеремещение.Количество;
		КонецЕсли;
		Если ТабЗоны.Найти(СтрокаПеремещение.СкладПолучатель, "ЗонаОтгрузки") <> Неопределено Тогда
			СтрокаДоб = ТабОстаткиЗонОтгрузки.Добавить();
			СтрокаДоб.Склад = СтрокаПеремещение.СкладПолучатель;
			СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаПеремещение.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаПеремещение.ЕдиницаИзмерения;
			СтрокаДоб.ДатаПроизводства = СтрокаПеремещение.ДатаПроизводства;
			СтрокаДоб.Количество = СтрокаПеремещение.Количество;
		КонецЕсли;
	КонецЦикла;
	
	//свернем отрицательные и положительные остатки между собой
	ТабОстаткиЗонОтгрузки.Свернуть("Склад, Номенклатура, Характеристика, ЕдиницаИзмерения, ДатаПроизводства", "Количество");
	Для Каждого СтрокаТаб Из ТабОстаткиЗонОтгрузки Цикл
		Если СтрокаТаб.Количество < 0 Тогда
			СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика, ЕдиницаИзмерения"
							, СтрокаТаб.Склад, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика, СтрокаТаб.ЕдиницаИзмерения));
			Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
				Если СтрокаТаб.Количество >= 0 Тогда
					Прервать;
				КонецЕсли;	
				Если СтрокаОстаток.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;	
				МинКолво = Мин(СтрокаТаб.Количество * (-1), СтрокаОстаток.Количество);
				СтрокаТаб.Количество = СтрокаТаб.Количество + МинКолво;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - МинКолво;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	ТабОстаткиЗонХранения.Свернуть("Склад, Номенклатура, Характеристика, ЕдиницаИзмерения, ДатаПроизводства", "Количество");
	Для Каждого СтрокаТаб Из ТабОстаткиЗонХранения Цикл
		Если СтрокаТаб.Количество < 0 Тогда
			СтрокиОстатка = ТабОстаткиЗонХранения.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика, ЕдиницаИзмерения"
							, СтрокаТаб.Склад, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика, СтрокаТаб.ЕдиницаИзмерения));
			Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
				Если СтрокаТаб.Количество >= 0 Тогда
					Прервать;
				КонецЕсли;	
				Если СтрокаОстаток.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;	
				МинКолво = Мин(СтрокаТаб.Количество * (-1), СтрокаОстаток.Количество);
				СтрокаТаб.Количество = СтрокаТаб.Количество + МинКолво;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - МинКолво;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТабОстаткиЗонОтгрузки.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабОстаткиЗонОтгрузки[КолвоСтрок - н].Количество = 0 Тогда
			ТабОстаткиЗонОтгрузки.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТабОстаткиЗонХранения.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабОстаткиЗонХранения[КолвоСтрок - н].Количество = 0 Тогда
			ТабОстаткиЗонХранения.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТабНужноВЗонахОтгрузки Цикл
		СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.ЗонаОтгрузки, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Для Каждого СтрокаОстаток Из СтрокиОстатка Цикл
			СтрокаТаб.Остаток = СтрокаТаб.Остаток + СтрокаОстаток.Количество;
		КонецЦикла;	
	КонецЦикла;
	
	ТабОстаткиОтгрузкиСвернуто = ТабОстаткиЗонОтгрузки.Скопировать();
	ТабОстаткиОтгрузкиСвернуто.Свернуть("Склад, Номенклатура, Характеристика, ЕдиницаИзмерения", "Количество");
	//теперь докинем в таблицу потребностей остатки зон отгрузки по характеристикам, которые в этой зоне не требуются
	Для Каждого СтрокаТаб Из ТабОстаткиОтгрузкиСвернуто Цикл
		СтрокиПотребностей = ТабНужноВЗонахОтгрузки.НайтиСтроки(Новый Структура("ЗонаОтгрузки, Номенклатура, Характеристика", СтрокаТаб.Склад, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Если СтрокиПотребностей.Количество() = 0 Тогда
			СтрокаДоб = ТабНужноВЗонахОтгрузки.Добавить();
			СтрокаДоб.Склад = Объект.Склад;
			СтрокаДоб.ЗонаОтгрузки = СтрокаТаб.Склад;
			СтрокаДоб.Номенклатура = СтрокаТаб.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаТаб.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаТаб.ЕдиницаИзмерения;
			СтрокаДоб.Остаток = СтрокаТаб.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	ТабОстаткиОтгрузкиСвернуто = Неопределено;
	
	//теперь рассчитываем нехватку и избыток в зонах отгрузки
	ТаблицаДокументовПеремещений = Новый ТаблицаЗначений();
	ТаблицаДокументовПеремещений.Колонки.Добавить("СкладОтправитель");
	ТаблицаДокументовПеремещений.Колонки.Добавить("СкладПолучатель");
	ТаблицаДокументовПеремещений.Колонки.Добавить("ДокОбъект");
	Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
		СтрокаНужноВЗонах.Нехватка = СтрокаНужноВЗонах.Количество - СтрокаНужноВЗонах.Остаток;
	КонецЦикла;
	
	Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
		Если СтрокаНужноВЗонах.Нехватка > 0 Тогда
			СтрокиСИзбытком = ТабНужноВЗонахОтгрузки.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика));
			ТабСтрокиСИзбытком = Новый ТаблицаЗначений();
			ТабСтрокиСИзбытком.Колонки.Добавить("СтрокаВТаблице");
			ТабСтрокиСИзбытком.Колонки.Добавить("Нехватка");
			Для Каждого СтрокаСИзбытком Из СтрокиСИзбытком Цикл
				Если СтрокаСИзбытком.Нехватка >= 0
					ИЛИ СтрокаСИзбытком.ЗонаОтгрузки = СтрокаНужноВЗонах.ЗонаОтгрузки Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДоб = ТабСтрокиСИзбытком.Добавить();
				СтрокаДоб.СтрокаВТаблице 	= СтрокаСИзбытком;
				СтрокаДоб.Нехватка 			= СтрокаСИзбытком.Нехватка * -1;
			КонецЦикла;
			ТабСтрокиСИзбытком.Сортировать("Нехватка убыв");
			Для Каждого СтрокаСИзбытком Из ТабСтрокиСИзбытком Цикл
				Если СтрокаНужноВЗонах.Нехватка <= 0 Тогда
					Прервать;
				КонецЕсли;
				КолвоОтработать = Мин(СтрокаНужноВЗонах.Нехватка, СтрокаСИзбытком.Нехватка);
				СтрокиОстатка = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаСИзбытком.СтрокаВТаблице.ЗонаОтгрузки, СтрокаСИзбытком.СтрокаВТаблице.Номенклатура, СтрокаСИзбытком.СтрокаВТаблице.Характеристика));
				Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
					Если КолвоОтработать <= 0 Тогда
						Прервать;
					КонецЕсли;	
					МинКолво = Мин(КолвоОтработать, СтрокаОстатка.Количество);
					Если МинКолво <= 0 Тогда
						Продолжить;
					КонецЕсли;	
					СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаОстатка.Склад, СтрокаНужноВЗонах.ЗонаОтгрузки));
					Если СтрокиСДокументом.Количество() = 0 Тогда
						ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
						ДокОбъект.Дата 						= ТекущаяДата();
						ДокОбъект.ДатаРаспределения 		= Объект.ДатаРаспределения;
						ДокОбъект.ЭтоСборкаВЗоныОтгрузки 	= Истина;
						ДокОбъект.СкладОтправитель 			= СтрокаОстатка.Склад;
						ДокОбъект.СкладПолучатель 			= СтрокаНужноВЗонах.ЗонаОтгрузки;
						СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
						СтрокаДок.СкладОтправитель 	= СтрокаОстатка.Склад;
						СтрокаДок.СкладПолучатель 	= СтрокаНужноВЗонах.ЗонаОтгрузки;
						СтрокаДок.ДокОбъект 		= ДокОбъект;
					Иначе
						СтрокаДок = СтрокиСДокументом[0];
					КонецЕсли;
					СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстатка.Номенклатура, СтрокаОстатка.Характеристика, СтрокаОстатка.ДатаПроизводства));
					Если СтрокиДокаТовар.Количество() = 0 Тогда
						СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
						СтрокаВДокументе.Номенклатура 		= СтрокаОстатка.Номенклатура;
						СтрокаВДокументе.Характеристика 	= СтрокаОстатка.Характеристика;
						СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстатка.ЕдиницаИзмерения;
						СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстатка.ДатаПроизводства;
					Иначе
						СтрокаВДокументе = СтрокиДокаТовар[0];
					КонецЕсли;
					СтрокаВДокументе.КоличествоОтправитель 	= СтрокаВДокументе.КоличествоОтправитель 	+ МинКолво;
					СтрокаВДокументе.КоличествоПолучатель 	= СтрокаВДокументе.КоличествоПолучатель 	+ МинКолво;
					СтрокаОстатка.Количество 	= СтрокаОстатка.Количество 	- МинКолво;
					КолвоОтработать 			= КолвоОтработать 			- МинКолво;
					СтрокаСИзбытком.Нехватка 	= СтрокаСИзбытком.Нехватка 	+ МинКолво;
					СтрокаСИзбытком.СтрокаВТаблице.Нехватка = СтрокаСИзбытком.СтрокаВТаблице.Нехватка + МинКолво;
					СтрокаСИзбытком.СтрокаВТаблице.Остаток = СтрокаСИзбытком.СтрокаВТаблице.Остаток - МинКолво;
					СтрокаНужноВЗонах.Нехватка 	= СтрокаНужноВЗонах.Нехватка - МинКолво;
					СтрокаНужноВЗонах.Остаток = СтрокаНужноВЗонах.Остаток + МинКолво;
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	//теперь запишем перемещения между зонами отгрузки
	Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
		КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
			СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
			Если СтрокаКеш <> Неопределено
				И СтрокаКеш.Количество <> 0 Тогда
				Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.3 Тогда
					СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
			СтрокаДокумент.ДокОбъект.Товары.Сортировать("Номенклатура");
			СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДокументовПеремещений.Очистить();
	Для Каждого СтрокаНужноВЗонах Из ТабНужноВЗонахОтгрузки Цикл
		Если СтрокаНужноВЗонах.Нехватка > 0 Тогда
			СтрокиОстатка = ТабОстаткиЗонХранения.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаНужноВЗонах.Склад, СтрокаНужноВЗонах.Номенклатура, СтрокаНужноВЗонах.Характеристика));
			Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
				Если СтрокаНужноВЗонах.Нехватка <= 0 Тогда
					Прервать;
				КонецЕсли;	
				МинКолво = Мин(СтрокаНужноВЗонах.Нехватка, СтрокаОстатка.Количество);
				Если МинКолво <= 0 Тогда
					Продолжить;
				КонецЕсли;	
				СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаНужноВЗонах.Склад, СтрокаНужноВЗонах.ЗонаОтгрузки));
				Если СтрокиСДокументом.Количество() = 0 Тогда
					ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
					ДокОбъект.Дата = ТекущаяДата();
					ДокОбъект.ДатаРаспределения 		= Объект.ДатаРаспределения;
					ДокОбъект.ЭтоСборкаВЗоныОтгрузки 	= Истина;
					ДокОбъект.СкладОтправитель 			= СтрокаНужноВЗонах.Склад;
					ДокОбъект.СкладПолучатель 			= СтрокаНужноВЗонах.ЗонаОтгрузки;
					СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
					СтрокаДок.СкладОтправитель 	= СтрокаНужноВЗонах.Склад;
					СтрокаДок.СкладПолучатель 	= СтрокаНужноВЗонах.ЗонаОтгрузки;
					СтрокаДок.ДокОбъект 		= ДокОбъект;
				Иначе
					СтрокаДок = СтрокиСДокументом[0];
				КонецЕсли;
				СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстатка.Номенклатура, СтрокаОстатка.Характеристика, СтрокаОстатка.ДатаПроизводства));
				Если СтрокиДокаТовар.Количество() = 0 Тогда
					СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
					СтрокаВДокументе.Номенклатура 		= СтрокаОстатка.Номенклатура;
					СтрокаВДокументе.Характеристика 	= СтрокаОстатка.Характеристика;
					СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстатка.ЕдиницаИзмерения;
					СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстатка.ДатаПроизводства;
				Иначе
					СтрокаВДокументе = СтрокиДокаТовар[0];
				КонецЕсли;
				СтрокаВДокументе.КоличествоОтправитель 	= СтрокаВДокументе.КоличествоОтправитель 	+ МинКолво;
				СтрокаВДокументе.КоличествоПолучатель 	= СтрокаВДокументе.КоличествоПолучатель 	+ МинКолво;
				СтрокаОстатка.Количество 				= СтрокаОстатка.Количество 					- МинКолво;
				СтрокаНужноВЗонах.Нехватка 				= СтрокаНужноВЗонах.Нехватка 				- МинКолво;
				СтрокаНужноВЗонах.Остаток 				= СтрокаНужноВЗонах.Остаток + МинКолво;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
		КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
			СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
			Если СтрокаКеш <> Неопределено
				И СтрокаКеш.Количество <> 0 Тогда
				Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.3 Тогда
					СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
			СтрокаДокумент.ДокОбъект.Товары.Сортировать("Номенклатура");
			СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДокументовПеремещений.Очистить();
	
	//теперь перекинем оставшийся избыток в зонах отгрузки в зону хранения
	//определение опциональное
	//ТабКопияНужно = ТабНужноВЗонахОтгрузки.Скопировать();
	//ТабКопияНужно.Свернуть("ЗонаОтгрузки, Номенклатура, Характеристика", "Остаток, Количество");
	//ТабКопияНужно.Колонки.Добавить("Избыток");
	//Для Каждого СтрокаТаб Из ТабКопияНужно Цикл
	//	СтрокаТаб.Избыток = СтрокаТаб.Остаток - СтрокаТаб.Количество;
	//КонецЦикла;
	Для Каждого СтрокаТаб Из ТабНужноВЗонахОтгрузки Цикл
		Если СтрокаТаб.Нехватка >= 0
			ИЛИ ТабСкладыУбиратьИзбыток.Найти(СтрокаТаб.ЗонаОтгрузки, "Склад") = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		КолвоВернуть = СтрокаТаб.Нехватка * (-1);
		СтрокиОстаток = ТабОстаткиЗонОтгрузки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаТаб.ЗонаОтгрузки, СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		Для Каждого СтрокаОстаток Из СтрокиОстаток Цикл
			Если КолвоВернуть <= 0 Тогда
				Прервать;
			КонецЕсли;	
			Если СтрокаОстаток.Количество > 0 Тогда
				КолвоПоИтерации = Мин(СтрокаОстаток.Количество, КолвоВернуть);
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - КолвоПоИтерации;
				СтрокаТаб.Нехватка = СтрокаТаб.Нехватка + КолвоПоИтерации;
				КолвоВернуть = КолвоВернуть - КолвоПоИтерации;
				СтрокиСДокументом = ТаблицаДокументовПеремещений.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаОстаток.Склад, Объект.Склад));
				Если СтрокиСДокументом.Количество() = 0 Тогда
					ДокОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
					ДокОбъект.Дата = ТекущаяДата();
					ДокОбъект.ДатаРаспределения 		= Объект.ДатаРаспределения;
					ДокОбъект.ЭтоСборкаВЗоныОтгрузки 	= Истина;
					ДокОбъект.СкладОтправитель 			= СтрокаОстаток.Склад;
					ДокОбъект.СкладПолучатель 			= Объект.Склад;
					СтрокаДок = ТаблицаДокументовПеремещений.Добавить();
					СтрокаДок.СкладОтправитель 	= СтрокаОстаток.Склад;
					СтрокаДок.СкладПолучатель 	= Объект.Склад;
					СтрокаДок.ДокОбъект 		= ДокОбъект;
				Иначе
					СтрокаДок = СтрокиСДокументом[0];
				КонецЕсли;
				СтрокиДокаТовар = СтрокаДок.ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтрокаОстаток.Номенклатура, СтрокаОстаток.Характеристика, СтрокаОстаток.ДатаПроизводства));
				Если СтрокиДокаТовар.Количество() = 0 Тогда
					СтрокаВДокументе = СтрокаДок.ДокОбъект.Товары.Добавить();
					СтрокаВДокументе.Номенклатура 		= СтрокаОстаток.Номенклатура;
					СтрокаВДокументе.Характеристика 	= СтрокаОстаток.Характеристика;
					СтрокаВДокументе.ЕдиницаИзмерения 	= СтрокаОстаток.ЕдиницаИзмерения;
					СтрокаВДокументе.ДатаПроизводства 	= СтрокаОстаток.ДатаПроизводства;
				Иначе
					СтрокаВДокументе = СтрокиДокаТовар[0];
				КонецЕсли;
				СтрокаВДокументе.КоличествоОтправитель 	= КолвоПоИтерации;
				СтрокаВДокументе.КоличествоПолучатель 	= КолвоПоИтерации;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого СтрокаДокумент Из ТаблицаДокументовПеремещений Цикл
		КолвоСтрок = СтрокаДокумент.ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаДок = СтрокаДокумент.ДокОбъект.Товары[КолвоСтрок - н];
			СтрокаКеш = ТабКешКолвоВУпаковке.Найти(СтрокаДок.Характеристика, "Характеристика");
			Если СтрокаКеш <> Неопределено
				И СтрокаКеш.Количество <> 0 Тогда
				Если СтрокаДок.КоличествоОтправитель <= СтрокаКеш.Количество * 0.3 Тогда
					СтрокаДокумент.ДокОбъект.Товары.Удалить(КолвоСтрок - н);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		Если СтрокаДокумент.ДокОбъект.Товары.Количество() > 0 Тогда
			СтрокаДокумент.ДокОбъект.Товары.Сортировать("Номенклатура");
			СтрокаДокумент.ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	


&НаКлиенте
Процедура СоздатьДокументыПеремещения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Предупреждение("Не заполнен склад");
		Возврат;
	КонецЕсли;	
	
	ОбработатьСозданиеПеремещений();
	ПрочитатьДанныеСервер();
	
	Для Каждого СтрокаДерева Из ДеревоДанные.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанные.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗонаОтгрузки(СкладПроверки)
	
	Возврат СкладПроверки.ЭтоЗонаОтгрузки;
	
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЭтоЗонаОтгрузки(Объект.Склад) Тогда
		Сообщить("В качестве склада следует указывать зону хранения, а не зону отгрузки!");
		Объект.Склад = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
