
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыПеремещения.Отбор, "СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница,,, ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспределенияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыПеремещения.Отбор, "ДатаРаспределения", Объект.ДатаРаспределения,,, ЗначениеЗаполнено(Объект.ДатаРаспределения));
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПеремещенияСервер()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ДатаРаспределения", Объект.ДатаРаспределения);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = &Владелец
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = &ДатаРаспределения
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.НеОбработан)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Склад.НеСоздаватьПеремещениеВЗонуОтгрузки = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад,
	               |	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеСклад.Ссылка,
	               |	ПеремещениеСклад.СкладОтправитель,
	               |	ПеремещениеСклад.СкладПолучатель
	               |ИЗ
	               |	Документ.ПеремещениеСклад КАК ПеремещениеСклад
	               |ГДЕ
	               |	ПеремещениеСклад.СкладОтправитель.Владелец = &Владелец
	               |	И ПеремещениеСклад.ЭтоСборкаВЗоныОтгрузки = ИСТИНА
	               |	И ПеремещениеСклад.ВРаботе = ЛОЖЬ
	               |	И ПеремещениеСклад.ДатаРаспределения = &ДатаРаспределения
	               |	И ПеремещениеСклад.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Склад,
	               |	ТоварыНаСкладахОстатки.Склад.ЭтоЗонаОтгрузки КАК ЭтоЗонаОтгрузки,
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика,
	               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
	               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ТекДата,
	               |			Склад.Владелец = &Владелец
	               |				И Склад.НеСоздаватьПеремещениеВЗонуОтгрузки = ЛОЖЬ
	               |				И Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)) КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступностьТоваровНаСкладах.Номенклатура,
	               |	ДоступностьТоваровНаСкладах.Склад
	               |ИЗ
	               |	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	               |ГДЕ
	               |	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &Владелец";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабРаспределено = Результаты[0].Выгрузить();
	ТабПеремещения = Результаты[1].Выгрузить();
	ТабОстатки = Результаты[2].Выгрузить();
	ТабКешДоступность = Результаты[3].Выгрузить();
	
	ТаблицаПеремещения = Новый ТаблицаЗначений();
	ТаблицаПеремещения.Колонки.Добавить("СкладОтправитель");
	ТаблицаПеремещения.Колонки.Добавить("СкладПолучатель");
	ТаблицаПеремещения.Колонки.Добавить("Номенклатура");
	ТаблицаПеремещения.Колонки.Добавить("ЕдИзм");
	ТаблицаПеремещения.Колонки.Добавить("Характеристика");
	ТаблицаПеремещения.Колонки.Добавить("ДатаПроизводства");
	ТаблицаПеремещения.Колонки.Добавить("Количество");
	
	//сначала почистим документы перемещения, которые не в работе
	Для Каждого СтрокаДок Из ТабПеремещения Цикл
		ДокОбъект = СтрокаДок.Ссылка.ПолучитьОбъект();
		ДокОбъект.Товары.Очистить();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	Для Каждого СтрокаРаспределено Из ТабРаспределено Цикл
		КолвоРаспределено = СтрокаРаспределено.Количество;
		СтрокиСОстатком = ТабОстатки.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаРаспределено.Склад, СтрокаРаспределено.Номенклатура, СтрокаРаспределено.Характеристика));
		ОбщийОстатокНаСкладе = 0;
		Для Каждого СтрокаСОстатком Из СтрокиСОстатком Цикл
			ОбщийОстатокНаСкладе = ОбщийОстатокНаСкладе + СтрокаСОстатком.Количество;
		КонецЦикла;
		Нехватка = КолвоРаспределено - ОбщийОстатокНаСкладе;
		Если Нехватка > 0 Тогда
			//сначала строки из обычных складов
			СтрокиОстаткиВзять = ТабОстатки.НайтиСтроки(Новый Структура("ЭтоЗонаОтгрузки, Номенклатура, Характеристика", Ложь, СтрокаРаспределено.Номенклатура, СтрокаРаспределено.Характеристика));
			Для Каждого СтрокаОстатокВзять Из СтрокиОстаткиВзять Цикл
				Если СтрокаОстатокВзять.Склад = СтрокаРаспределено.Склад Тогда
					Продолжить;
				КонецЕсли;	
				ОстатокВзять = Мин(Нехватка, СтрокаОстатокВзять.Количество);
				Если ОстатокВзять > 0 Тогда
					СтрокаПеремещения = ТаблицаПеремещения.Добавить();
					СтрокаПеремещения.СкладОтправитель = СтрокаОстатокВзять.Склад;
					СтрокаПеремещения.СкладПолучатель = СтрокаРаспределено.Склад;
					СтрокаПеремещения.Номенклатура = СтрокаРаспределено.Номенклатура;
					СтрокаПеремещения.Характеристика = СтрокаРаспределено.Характеристика;
					СтрокаПеремещения.ДатаПроизводства = СтрокаОстатокВзять.ДатаПроизводства;
					СтрокаПеремещения.ЕдИзм = СтрокаОстатокВзять.ЕдИзм;
					СтрокаПеремещения.Количество = ОстатокВзять;
					СтрокаОстатокВзять.Количество = СтрокаОстатокВзять.Количество - ОстатокВзять;
				КонецЕсли;
				Нехватка = Нехватка - ОстатокВзять;
				Если Нехватка <= 0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		//если все равно не хватило, тогда посомтрим в других отгрузочных зонах, может где-то излишек лежит
		Если Нехватка > 0 Тогда
			СтрокиОстаткиВзять = ТабОстатки.НайтиСтроки(Новый Структура("ЭтоЗонаОтгрузки, Номенклатура, Характеристика", Истина, СтрокаРаспределено.Номенклатура, СтрокаРаспределено.Характеристика));
			Для Каждого СтрокаОстатокВзять Из СтрокиОстаткиВзять Цикл
				Если СтрокаОстатокВзять.Склад = СтрокаРаспределено.Склад Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиНужноВЭтойЗоне = ТабРаспределено.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", СтрокаОстатокВзять.Склад, СтрокаРаспределено.Номенклатура, СтрокаРаспределено.Характеристика));
				КолвоНужноВЗоне = 0;
				Если СтрокиНужноВЭтойЗоне.Количество() > 0 Тогда
					КолвоНужноВЗоне = СтрокиНужноВЭтойЗоне[0].Количество;
				КонецЕсли;	
				
				ОстатокВзять = Мин(Нехватка, Макс(СтрокаОстатокВзять.Количество - КолвоНужноВЗоне, 0));
				Если ОстатокВзять > 0 Тогда
					СтрокаПеремещения = ТаблицаПеремещения.Добавить();
					СтрокаПеремещения.СкладОтправитель = СтрокаОстатокВзять.Склад;
					СтрокаПеремещения.СкладПолучатель = СтрокаРаспределено.Склад;
					СтрокаПеремещения.Номенклатура = СтрокаРаспределено.Номенклатура;
					СтрокаПеремещения.Характеристика = СтрокаРаспределено.Характеристика;
					СтрокаПеремещения.ДатаПроизводства = СтрокаОстатокВзять.ДатаПроизводства;
					СтрокаПеремещения.ЕдИзм = СтрокаОстатокВзять.ЕдИзм;
					СтрокаПеремещения.Количество = ОстатокВзять;
					СтрокаОстатокВзять.Количество = СтрокаОстатокВзять.Количество - ОстатокВзять;
				КонецЕсли;
				Нехватка = Нехватка - ОстатокВзять;
				Если Нехватка <= 0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		//если все-равно не хватило тогда не смотрим в остатков, а просто берем со склада по доступности товаров
		Если Нехватка > 0 Тогда
			СтрокаПоДоступности = ТабКешДоступность.Найти(СтрокаРаспределено.Номенклатура, "Номенклатура");
			Если СтрокаПоДоступности <> Неопределено Тогда
				СтрокаПеремещения = ТаблицаПеремещения.Добавить();
				СтрокаПеремещения.СкладОтправитель = СтрокаПоДоступности.Склад;
				СтрокаПеремещения.СкладПолучатель = СтрокаРаспределено.Склад;
				СтрокаПеремещения.Номенклатура = СтрокаРаспределено.Номенклатура;
				СтрокаПеремещения.Характеристика = СтрокаРаспределено.Характеристика;
				СтрокаПеремещения.ЕдИзм = СтрокаРаспределено.ЕдИзм;
				СтрокаПеремещения.Количество = Нехватка;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	ТабКопия = ТаблицаПеремещения.Скопировать();
	ТабКопия.Свернуть("СкладОтправитель, СкладПолучатель");
	
	Для Каждого СтрокаСочетание Из ТабКопия Цикл
		СтрокиДокЕсть = ТабПеремещения.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаСочетание.СкладОтправитель, СтрокаСочетание.СкладПолучатель));
		Если СтрокиДокЕсть.Количество() > 0 Тогда
			ДокПеремещениеОбъект = СтрокиДокЕсть[0].Ссылка.ПолучитьОбъект();
		Иначе
			ДокПеремещениеОбъект = Документы.ПеремещениеСклад.СоздатьДокумент();
			ДокПеремещениеОбъект.Дата = ТекущаяДата();
			ДокПеремещениеОбъект.ДатаРаспределения = Объект.ДатаРаспределения;
			ДокПеремещениеОбъект.СкладОтправитель = СтрокаСочетание.СкладОтправитель;
			ДокПеремещениеОбъект.СкладПолучатель = СтрокаСочетание.СкладПолучатель;
			ДокПеремещениеОбъект.ЭтоСборкаВЗоныОтгрузки = Истина;
		КонецЕсли;
		
		СтрокиПоТоварам = ТаблицаПеремещения.НайтиСтроки(Новый Структура("СкладОтправитель, СкладПолучатель", СтрокаСочетание.СкладОтправитель, СтрокаСочетание.СкладПолучатель));
		Для Каждого СтрокаТовар Из СтрокиПоТоварам Цикл
			СтрокаДоб = ДокПеремещениеОбъект.Товары.Добавить();
			СтрокаДоб.Номенклатура = СтрокаТовар.Номенклатура;
			СтрокаДоб.Характеристика = СтрокаТовар.Характеристика;
			СтрокаДоб.ЕдиницаИзмерения = СтрокаТовар.ЕдИзм;
			СтрокаДоб.КоличествоОтправитель = СтрокаТовар.Количество;
			СтрокаДоб.КоличествоПолучатель = СтрокаТовар.Количество;
			СтрокаДоб.ДатаПроизводства = СтрокаТовар.ДатаПроизводства;
		КонецЦикла;	
		
		ДокПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПеремещения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Предупреждение("Не заполнена структурная единица (склад)");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРаспределения) Тогда
		Предупреждение("Не заполнена дата распределения");
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыПеремещенияСервер();
	
	Элементы.ДокументыПеремещения.Обновить();
	
КонецПроцедуры

Функция ПолучитьПечатьПеремещений()
	
	ТабДок = Новый ТабличныйДокумент();
	Для Каждого СтрокаВыделенная Из Элементы.ДокументыПеремещения.ВыделенныеСтроки Цикл
		ДокОбъект = СтрокаВыделенная.ПолучитьОбъект();
		Если ДокОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;	
		ДокОбъект.ВРаботе = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		ТабДок.Вывести(Документы.ПеремещениеСклад.Печать(ДокОбъект.Ссылка));
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
Процедура Печать(Команда)
	
	ТабДок = ПолучитьПечатьПеремещений();
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();
	
	Элементы.ДокументыПеремещения.Обновить();
	
КонецПроцедуры


