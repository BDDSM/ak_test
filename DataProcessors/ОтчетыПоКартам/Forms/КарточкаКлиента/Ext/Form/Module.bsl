
&НаКлиенте
Процедура ТипПокупателяПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	ЗаполнитьПолноеИмя();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеИмя()
	FullName = СокрЛП(""+СокрЛП(Имя)+" "+СокрЛП(Отчество));
КонецПроцедуры


&НаКлиенте
Процедура SexПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	ЗаполнитьПолноеИмя();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура BirthdayПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура PhoneНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ТекФорма = ПолучитьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаРедактированияНомера");
	ТекФорма.НомерТелефона = Phone;
	ТекФорма.MobilCarta = MobilCarta;
	ТекФорма.Email = Email;
	лкPhone = ТекФорма.ОткрытьМодально();
	
	Если лкPhone <> Неопределено Тогда
		Phone = лкPhone;
		Ответ = Вопрос("Задать пароль в ЛК по номеру телефона?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			SecretCode = Прав(СокрЛП(Phone), 7);
		КонецЕсли;	
		Модифицированность = Истина;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Email_factПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура informationПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура SMS_karta_noПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПроверитьНомерНаСервере()
	
	Если MobilCarta Тогда
		
		ТекстЗапроса = "SELECT [Phone] FROM [Loyalty].[dbo].[customer]
		//+++АК SHEP 2018.05.08 ИП-00018563
		//|WHERE [Phone] = '~~~~~' AND [MobilCarta] = 1 AND [Email] <> '`````';";
		|WHERE [Phone] = '~~~~~' AND [MobilCarta] = 1 AND [bc_number] <> '`````';";
		//---АК SHEP 2018.05.08
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", Phone);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "`````", Email);
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		
		Если ТЗ.Количество() > 0 Тогда		
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура MobilCartaПриИзменении(Элемент)
	
	Если ПроверитьНомерНаСервере() Тогда
		Предупреждение("Для номера телефона "+Phone+" уже установлен признак МОБИЛЬНАЯ КАРТА = Да!");
		MobilCarta = Ложь;
		Возврат;
	КонецЕсли;
		
	Модифицированность = Истина;
	
КонецПроцедуры
  
// Выполянет запрос и резульатат запроса возвращает в таблицу значений
//
&НаСервере
Процедура База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса, допПараметры = Неопределено, Знач СтрокаПодключения = Неопределено)  
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMS_UNION");
	КонецЕсли;	
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
    Для каждого ТекСтрока Из тзРезультат Цикл
		
		Если ТекСтрока.Дата <> NULL  Тогда
 			ТекСтрока.Дата = Дата(ТекСтрока.Дата);
		КонецЕсли;	
 
    КонецЦикла;	
    тзРезультат.Сортировать("Дата Убыв");
    
	//+++АК CISA 2018.09.20 ИП-00019777 
	//Объект.ТЗ_СМС_ВсеПоКлиенту.Загрузить(тзРезультат); было до добавления показа push сообщений
	ТЗПриемник = тзРезультат.Скопировать();
	ТекстЗапроса = "For1c_get_push_history("+ВнешниеДанные.ФорматПоля(Email)+")";
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	тзРезультат = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	ТЗИсточник = ?(ТЗПриемник.Количество() >= тзРезультат.Количество(), тзРезультат, ТЗПриемник);
	ТЗПриемник = ?(ТЗПриемник.Количество() < тзРезультат.Количество(), тзРезультат, ТЗПриемник);	
	Для Каждого ТекСтрокаИсточника Из ТЗИсточник Цикл	
		НоваяСтрока = ТЗПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаИсточника);
	КонецЦикла;
 
	ТЗПриемник.Сортировать("Дата Убыв");
	ВсеСообщенияПоКлиенту.Загрузить(ТЗПриемник);
	ОтобратьСообщенияНаСервере(100);
	//---АК CISA

КонецПроцедуры

&НаСервере
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;	
		
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	Попытка
		
		//Dim rs2 As ADODB.Recordset
		//
		//Set rs2 = CreateObject("ADODB.Recordset")
		//
		//rs2.Open cmd
		//
		//Debug.Print rs2.GetString
		
		
		Command = Новый COMОбъект("ADODB.Command");
			
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
				
		Возврат RecordSet;
		
	Исключение
		Сообщить(ТекстЗапроса);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	//Возврат ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(RecordSet);
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

//+++АК SHEP 2018.07.30 ИП-00019336: оптимизировал, сделал на основании База_РезульататЗапросВТаблицуЗначений()
// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервереБезКонтекста
Функция База_РезультатЗапросаВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	rsFields = RecordSet.Fields;
	КвоКолонок = rsFields.Count-1;
	Для НомерКолонки = 0 По КвоКолонок Цикл
		NameFiled = rsFields.Item(НомерКолонки).Name;
		тз.Колонки.Добавить(СтрЗаменить(NameFiled,"$","_"),, NameFiled, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		//RecordSet.MoveFirst(); //по идее, мы и так в начале
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По КвоКолонок Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(НомерКолонки).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокФайловНаСервере()
	
	ТекстЗапроса = "SELECT imageref from [Loyalty].[dbo].[Images_anketa] ia 
	|where convert(int, /**BPar1**/'~~~~~'/**FPar**/  )=convert(int,ia.number);";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Email);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	СписокФайлов = Новый СписокЗначений;
	
	Для каждого ТекСтрока Из ТЗ Цикл
		
		СписокФайлов.Добавить(ТекСтрока.imageref);	
		
	КонецЦикла;	
	
	Возврат СписокФайлов;
	
КонецФункции	

&НаКлиенте
Процедура Картинка(Команда)
	
	СписокФайлов = ПолучитьСписокФайловНаСервере();
	
	Если СписокФайлов.Количество() = 0 Тогда
		
		Сообщить("нет файла со сканом");
		Возврат;
		
	КонецЕсли;	
	
	Для каждого ТекСтрока Из СписокФайлов Цикл
		
		ИмяФайла = ТекСтрока;
		
		ПолноеИмяФайла = "\\10.0.0.80\e\Anketas\"+ИмяФайла;	
		
		Если ПоместитьФайл(СсылкаНаКартинку, ПолноеИмяФайла, ПолноеИмяФайла, Ложь, ЭтаФорма.УникальныйИдентификатор) Тогда
			Попытка
			Табдок = КартинкаНаСервере();
			Табдок.Защита = Истина;
			Табдок.ОтображатьСетку = Ложь;
			Табдок.ОтображатьЗаголовки = Ложь;
			Табдок.Показать(ИмяФайла);
			Исключение
				Сообщить("Не удалось отобразить файл "+ПолноеИмяФайла);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция КартинкаНаСервере()
			
	НовыйТабдок = новый ТабличныйДокумент; 
	Текмакет = Обработки.ОтчетыПоКартам.ПолучитьМакет("Макет");
	ПолеКартинки = Текмакет.ПолучитьОбласть("ПолеКартинки");
	ПолеКартинки.Области.лкКартинка.Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаКартинку));
	НовыйТабдок.Вывести(ПолеКартинки);
	
	НовыйТабдок.Защита = Истина;
	НовыйТабдок.ОтображатьСетку = Ложь;
	НовыйТабдок.ОтображатьЗаголовки = Ложь;
	
	Возврат НовыйТабдок;
	
КонецФункции

&НаКлиенте
Процедура ПосмотретьИсториюИзменений(Команда)
	
	Табл = ПосмотретьИсториюИзмененийНаСервере();	
	Табл.Показать("История изменений по карте "+Email);	
	
КонецПроцедуры

&НаСервере
Функция ПосмотретьИсториюИзмененийНаСервере()
	
	
	ТекстЗапроса = "SELECT [Number]
	|,[user_change]
	|,[date_change]
	|,[field_change]
	|,[value_old]
	|
	|FROM [Loyalty].[dbo].[customer_hystory]
	|WHERE [Number] = '~~~~~'
	|ORDER BY [date_change];";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Email);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	
	
	Табл = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.АК_ПечатьТаблицЗначений);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновной=Макет.ПолучитьОбласть("Шапка|Основной");
	ОбластьСтрокаОсновной=Макет.ПолучитьОбласть("Строка|Основной");
	ОбластьИтогОсновной=Макет.ПолучитьОбласть("Итог|Основной");
	ОбластьШапкаДОП=Макет.ПолучитьОбласть("Шапка|Показатели");
	ОбластьСтрокаДОП=Макет.ПолучитьОбласть("Строка|Показатели");
	ОбластьИтогДОП=Макет.ПолучитьОбласть("Итог|Показатели");
	
	
	ОбластьЗаголовок.Параметры.Заголовок = "История изменений по карте "+Email;
	Табл.Вывести(ОбластьЗаголовок);
	
	Табл.Вывести(ОбластьШапкаОсновной);
	
	Для Каждого Колонка из Тз.Колонки ЦИКЛ
		ОбластьШапкаДОП.Параметры.ИмяПоказателя=Колонка.Имя;
		Табл.Присоединить(ОбластьШапкаДОП);
	КонецЦикла;
	
	счетчик=0;
	Для каждого стр из Тз Цикл
		счетчик=счетчик+1;
		ОбластьСтрокаОсновной.Параметры.счетчик=счетчик; 
		Табл.Вывести(ОбластьСтрокаОсновной);
		Для Каждого Колонка из Тз.Колонки ЦИКЛ
			ОбластьСтрокаДОП.Параметры.ЗначениеКолонки=Формат(стр[Колонка.Имя],"ЧДЦ=2; ЧН=0,00; ЧГ=0");
			Табл.Присоединить(ОбластьСтрокаДОП);
		КонецЦикла;
	КонецЦикла;
	//Табл.Вывести(ОбластьИтогОсновной);
	
	//Для Каждого Колонка из Тз.Колонки ЦИКЛ
	//	ОбластьИтогДОП.Параметры.Итог=Формат(Тз.Итог(Колонка.Имя),"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	//	Табл.Присоединить(ОбластьИтогДОП);
	//КонецЦикла;
	
	
	//Табл.Защита = Истина;
	//Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	Возврат Табл;
		
КонецФункции


&НаКлиенте
Процедура СвязатьНаОдинСчет(Команда)
	
	Если Вопрос("Точно связать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Результат = СвязатьНаОдинСчетНаСервере();
		Предупреждение(Результат);
		//ОбщегоНазначения.СообщитьИнформациюПользователю(Результат);
		ПриОткрытии(ЛОЖЬ);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СвязатьНаОдинСчетНаСервере()
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");	
	
	ТекстЗапроса ="Select Top 1 D.CustomerUID , c.Фамилия , d2.Number ВтораяКарта
	|from [Loyalty].[dbo].DiscountCard (nolock) d
	|left join [Loyalty].[dbo].Customer (nolock) c on d.CustomerUID=c.CustomerUID
	|inner join [Loyalty].[dbo].Account (nolock) a on a.AccountUID=d.AccountUID
	|left join [Loyalty].[dbo].DiscountCard (nolock) d2 on d2.AccountUID=a.AccountUID and d2.DiscountCardUID<>d.DiscountCardUID
	|where D.Number=/**BPar1**/~~~~~/**FPar**/";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", "'"+ВтораяКарта+"'");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	Если ТЗ.Количество() <> 0 и ТЗ[0].ВтораяКарта <> NULL Тогда
		
		Возврат "Связать невозможно. уже есть вторая карта.";
		
	КонецЕсли;
	
	//+++АК SHEP 2018.07.04 ИП-00018827
	//ТекстЗапроса = " update [Loyalty].[dbo].DiscountCard 
	//| set AccountUID=d1.AccountUID
	//| from [Loyalty].[dbo].DiscountCard  (nolock) d2
	//| inner join
	//| (Select d.AccountUID
	//| from [Loyalty].[dbo].DiscountCard (nolock) d
	//| where D.Number=/**BPar1**/~~~~~/**FPar**/ ) d1 on 1=1
	//| where D2.Number=/**BPar2**/^^^^^/**FPar**/
	//|
	//|
	//|update Loyalty.dbo.TransactionHistory
	//|set AccountUID=d1.AccountUID
	//|from Loyalty.dbo.TransactionHistory (nolock) th
	//|inner join [Loyalty].[dbo].DiscountCard  (nolock) d2 on d2.DiscountCardUID=th.DiscountCardUID
	//| inner join
	//| (Select d.AccountUID
	//| from [Loyalty].[dbo].DiscountCard (nolock) d
	//| where D.Number=/**BPar1**/~~~~~/**FPar**/ ) d1 on 1=1
	//| where D2.Number=/**BPar2**/^^^^^/**FPar**/
	//|
	//|
	//|insert into [Loyalty].[dbo].[Audit](
	//|      [AuditUID]
	//|     ,[AuditEventTypeID]
	//|     ,[DateTimeStamp]
	//|     ,[ClientIP]
	//|     ,[AuditEventStatusID]
	//|     ,[AccountUID]
	//|     ,[CustomerUID]
	//|     ,[DiscountCardUID]
	//|     ,[Login]
	//|     ,[SecretCode]
	//|     ,[EventDesc]
	//|     ,[ScriptURL])
	//| select NEWID() , 2 , GETDATE() , /**BPar3**/#####/**FPar**/, 1 , d1.AccountUID , null , null , 
	//| d2.Number , null , 'Общ контроль' , null
	//| from [Loyalty].[dbo].DiscountCard d2
	//|inner join
	//|(Select d.AccountUID
	//|from [Loyalty].[dbo].DiscountCard (nolock) d
	//|where D.Number=/**BPar1**/~~~~~/**FPar**/ ) d1 on 1=1
	//|where D2.Number=/**BPar2**/^^^^^/**FPar**/;";
	//
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", "'"+Email+"'");
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", "'"+ВтораяКарта+"'");
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#####", "'"+ПараметрыСеанса.ТекущийПользователь+"'");
	
	ТекстЗапроса = "
		|EXEC Loyalty.dbo.BC_MergingCards   
    	|	@BC_Number_1 = " + ВнешниеДанные.ФорматПоля(Email) + ",
    	|	@BC_Number_2 = " + ВнешниеДанные.ФорматПоля(ВтораяКарта) + ",
    	|	@UserName = " + Строка(ПараметрыСеанса.ТекущийПользователь);
	//---АК SHEP 2018.07.04
	
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
	
	Возврат "Операция выполнена успешно.";
	
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++АК SHEP 2018.07.27 ИП-00019336: перенёс в ПриСозданииНаСервере()
	//Email = Параметры.Email;
	//CustomerUID = Параметры.CustomerUID;
	//rowguid = Параметры.rowguid;
	//
	//ЗаполнитьДанныеФормыНаСервере(Email, CustomerUID, rowguid);
	//
	//Модифицированность = Ложь;
	//
	//Если ЭтоПомощникУправляющего() Тогда
	//	
	//	Элементы.ВтораяКарта.Доступность = Ложь;
	//	Элементы.СвязатьНаОдинСчет.Доступность = Ложь;
	//	Элементы.ТипКупона.Доступность = Ложь;
	//	Элементы.ДобавитьКупон.Доступность = Ложь;
	//	Элементы.УдалитьКупон.Доступность = Ложь;
	//	Элементы.СвязатьНаОдинСчет.Доступность = Ложь;
	//	Элементы.СвязатьНаОдинСчет.Доступность = Ложь;
	//					 
	//КонецЕсли;
	//
	//Для Каждого СтрокаТаб Из Объект.ФинОпераци Цикл
	//	СтрокаТаб.ЛогиПоФронтолу = "Нажмите два раза для расшифровки";
	//КонецЦикла;	
	//
	//APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, Email, ПакетЗапросов);
	//---АК SHEP 2018.07.27
	
КонецПроцедуры

&НаСервере
Функция ЭтоПомощникУправляющего()
	
	ЭтоПомощник = Ложь;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ФизЛицо
		|ПОМЕСТИТЬ ТЗ1
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка
		|ПОМЕСТИТЬ ТЗ_2
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник В
		|			(ВЫБРАТЬ
		|				ТЗ1.ФизЛицо
		|			ИЗ
		|				ТЗ1 КАК ТЗ1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Пометка,
		|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
		|	ТипыРолейПользователя.Наименование КАК Наименование,
		|	ТипыРолейПользователя.ПометкаУдаления
		|ПОМЕСТИТЬ ТЗ_3
		|ИЗ
		|	ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО ТипыРолейПользователя.Ссылка = РолиПользователейТипыРолей.ТипРоли
		|			И (РолиПользователейТипыРолей.Ссылка В
		|				(ВЫБРАТЬ
		|					ТЗ_2.Ссылка
		|				ИЗ
		|					ТЗ_2 КАК ТЗ_2))
		|ГДЕ
		|	(НЕ ТипыРолейПользователя.ПометкаУдаления
		|			ИЛИ НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_3.Пометка,
		|	ТЗ_3.ТипРоли,
		|	ТЗ_3.Наименование,
		|	ТЗ_3.ПометкаУдаления
		|ИЗ
		|	ТЗ_3 КАК ТЗ_3
		|ГДЕ
		|	ТЗ_3.Пометка = ИСТИНА
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|	И ТЗ_3.ТипРоли = &ТипРоли";
		|	И (ТЗ_3.ТипРоли = &ТипРоли или ТЗ_3.ТипРоли = &ТипРолиСторонняяРозница)";
		//--- AK suvv

	Запрос.УстановитьПараметр("Ссылка", ТекПользователь);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		ЭтоПомощник = Истина;
	КонецЕсли;	
	
	Возврат ЭтоПомощник;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыНаСервере(Email, CustomerUID, rowguid)
	
	ТекстЗапроса = "SELECT  *  from dbo.Customer (nolock) WHERE ";
	
	Если ЗначениеЗаполнено(Email) Тогда
		ТекстЗапроса = ТекстЗапроса +" [bc_number] = '"+Email+"' ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CustomerUID) Тогда
		
		Если ЗначениеЗаполнено(Email) Тогда
			ТекстЗапроса = ТекстЗапроса +" AND [CustomerUID] = '" +CustomerUID+"' ";
		Иначе
			ТекстЗапроса = ТекстЗапроса +" [CustomerUID] = '" +CustomerUID+"' ";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(rowguid) Тогда
		Если ЗначениеЗаполнено(Email) ИЛИ ЗначениеЗаполнено(CustomerUID) Тогда
			ТекстЗапроса = ТекстЗапроса +" AND [rowguid] = '"+ rowguid +"' ";
		Иначе
			ТекстЗапроса = ТекстЗапроса +" [rowguid] = '"+ rowguid +"' ";
		КонецЕсли;	
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса +" ;";
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	Если НЕ ЗначениеЗаполнено(Email)
		И ТЗ.Количество() > 0 Тогда
		Email = ТЗ[0].bc_number;
	КонецЕсли;	
	Объект.Customer.Загрузить(ТЗ);
	Объект.Customer.Сортировать("bc_number");
	RecordSet.Close();
	
	Элементы.КартинкаТелеграм.Видимость = Ложь;
	//+++АК BELN 2018.06.14 ИП-00018498
	Элементы.КартинкаМП.Видимость = Ложь;
	//---АК BELN 2018.06.14 
	
	Если ТЗ.Количество() > 0 Тогда
		ТекСтрТЗ = ТЗ[0];
		
		Попытка
			Элементы.КартинкаТелеграм.Видимость = ЗначениеЗаполнено(ТекСтрТЗ.telegram_id);
			Элементы.ОтправитьПриглашение.Видимость = (ЗначениеЗаполнено(ТекСтрТЗ.telegram_id) или ЗначениеЗаполнено(ТекСтрТЗ.OneSignalToken));
			АйдиТелеграм = СокрЛП(ТекСтрТЗ.telegram_id);
			ТокенМП = СокрЛП(ТекСтрТЗ.OneSignalToken);
			//+++АК BELN 2018.06.14 ИП-00018498
			Элементы.КартинкаМП.Видимость = ЗначениеЗаполнено(ТекСтрТЗ.OneSignalToken);
			//---АК BELN 2018.06.14 
		Исключение
		КонецПопытки;
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			
			Попытка
				Если ТекКолонка.Имя = "Sex" Тогда
					
					Если ТекСтрТЗ[ТекКолонка.Имя] = 1 Тогда
						ЭтаФорма[ТекКолонка.Имя] = Перечисления.АК_Пол.Ж;
					Иначе
						ЭтаФорма[ТекКолонка.Имя] = Перечисления.АК_Пол.М;
					КонецЕсли;
				ИначеЕсли ТекКолонка.Имя = "SMS_karta_no" Тогда 	
					Если ТекСтрТЗ[ТекКолонка.Имя] = 0 Тогда
						ЭтаФорма[ТекКолонка.Имя] = Ложь;
					Иначе
						ЭтаФорма[ТекКолонка.Имя] = Истина;
					КонецЕсли;
				ИначеЕсли ТекКолонка.Имя = "MobilCarta" Тогда 	
					Если ТекСтрТЗ[ТекКолонка.Имя] = 0 Тогда
						ЭтаФорма[ТекКолонка.Имя] = Ложь;
					Иначе
						ЭтаФорма[ТекКолонка.Имя] = Истина;
					КонецЕсли;
				ИначеЕсли ТекКолонка.Имя = "id_type_cust" Тогда	
					ЭтаФорма[ТекКолонка.Имя] = Перечисления.АК_ТипыПокупателей.Получить(ТекСтрТЗ[ТекКолонка.Имя]-1);
				ИначеЕсли ТекКолонка.Имя = "only_telegram_sms" Тогда //+++АК MIND 2018.01.21 	
					Если ТекСтрТЗ[ТекКолонка.Имя] = 1 Тогда
						ЭтаФорма.БезСМС = Истина;
					Иначе
						ЭтаФорма.БезСМС = Ложь;
					КонецЕсли;
				Иначе	
					
					ЭтаФорма[ТекКолонка.Имя] = ТекСтрТЗ[ТекКолонка.Имя];	
					
				КонецЕсли;	
				
			Исключение				
			КонецПопытки;	
			
		КонецЦикла;	
		
		ЭтаФорма.Заголовок = "Карта покупателя: "+СокрЛП(ТекСтрТЗ.Фамилия)+" "+СокрЛП(ТекСтрТЗ.FullName);
		
		// ВСЕ SMS
		
		Объект.ТЗ_СМС_ВсеПоКлиенту.Очистить();
	
		ТекстЗапроса = "
			|declare @Phone as char(10)
			|
			|select @phone = c.phone
			|from Loyalty..Customer c (nolock) 
			|where c.bc_number=~~~~~ and LEN(c.phone)=10
			|
			|Select *
			|from (
			|       select convert(datetime,i.Date + ' ' + i.Time) Дата, i.text сообщение , 'Входящее' тип
			|       from SMSGate..Incoming (nolock) i
			|       where i.nomer=@phone
			|       union all
			|       select ou.SendDate, ou.Message , 'Наш ответ' тип
			|       from IES..Outgoing (nolock) ou
			|       where ou.number='7'+@phone ) a
			|order by Дата desc;";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", "'" + Email + "'");
		
		//Минеев - меняем на функции написанные Ольгой
		ТекстЗапроса = "select * from SMS_REPL..Customer_sms_history ('"+Email+"') order by Дата desc";
		
		//при открытии не будем заполнять эту громоздкую таблицу, она будет заполняться при переходе на закладку
		//База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса);
		
		// ЗВОНКИ		
		//"SELECT *
		//|FROM [select * from Звонки_покупателю UNION ALL select * from Звонки_ОК_покупателя ]. AS [%$##@_Alias]
		//|ORDER BY date_call DESC;";
		
		// БАЛЛЫ ПОКУПАТЕЛЯ		
		//Минеев - меняем на функции написанные Ольгой
		ТекстЗапроса = "select * from sms_repl..Customer_Current_Balance ('"+Email+"')";
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		
		//Объект.БаллыПокупателя.Очистить();
		Объект.БаллыПокупателя.Загрузить(ТЗ);
		
		// КАРТЫ С РАВНЫМИ КОНТАКТАМИ
		
		ТекстЗапроса = " select Customer.bc_number НомерКарты, Customer.FullName ФИО, Customer.Email_fact Email, Customer.Phone Телефон
		| from [Loyalty].[dbo].Customer (nolock)
		| left join (select *
		| from [Loyalty].[dbo].Customer  (nolock)
		| where Customer.bc_number=/**BPar1**/~~~~~/**FPar**/  and charindex(Customer.Email_fact,'@',1)>0) as q1 on Customer.Email_fact=q1.Email_fact 
		| left join (select *
		| from [Loyalty].[dbo].Customer  (nolock)
		| where Customer.bc_number=/**BPar1**/~~~~~/**FPar**/ and len(Customer.Phone)=10 ) as q2 on Customer.Phone=q2.Phone
		| where Customer.bc_number<>/**BPar1**/~~~~~/**FPar**/
		| and (q1.CustomerUID is not null or q2.CustomerUID is not null);";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~","'" + Email + "'");
		
		ТекстЗапроса = "select * from sms_repl..Customer_OtherCards ('"+Email+"')";
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		
		//Объект.КартыСРавнымиКонтактами.Очистить();
		Объект.КартыСРавнымиКонтактами.Загрузить(ТЗ);
		
		// ФИН ОПЕРАЦИИ *********************************
		//+++AK GOLV ИП-00020444
		ЗаполнитьФинОперации();	
		//---AK GOLV
		
		// КУПОНЫ *********************************
		ТекстЗапроса = "Select SUM(cm.[kolvo]) as КличествоКупонов
		|FROM [Loyalty].[dbo].[Coupon_move] (nolock) cm
		|inner join Loyalty..DiscountCard d (nolock) on d.DiscountCardUID=cm.DiscountCardUID
		|where d.Number = '~~~~~';";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~","'" + Email + "'");
		
		ТекстЗапроса = "select * from sms_repl..Customer_Coupon_Qty ('"+Email+"')";
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		ТекСуммаКупонов = 0;
		Для каждого лкТекСтрТЗ Из ТЗ Цикл
		
			ТекСуммаКупонов = лкТекСтрТЗ.КличествоКупонов;
		
		КонецЦикла;
			
		КоличествоКупонов = ТекСуммаКупонов;
		
		ОбновитьКупоныКлиентаНаСервере(Email);
		
		
		// ВТОРАЯ КАРТА ****************************************
		ТекстЗапроса = "Select Top 1 D.CustomerUID , c.Фамилия , d2.Number ВтораяКарта , КупоныВВ
		| from [Loyalty].[dbo].DiscountCard (nolock) d
		| left join [Loyalty].[dbo].Customer (nolock) c on d.CustomerUID=c.CustomerUID
		| inner join [Loyalty].[dbo].Account (nolock) a on a.AccountUID=d.AccountUID
		| left join [Loyalty].[dbo].DiscountCard (nolock) d2 on d2.AccountUID=a.AccountUID and d2.DiscountCardUID<>d.DiscountCardUID
		| 
		|inner join
		| (SELECT 
		|     isnull(sum([kolvo]),0) КупоныВВ
		|
		| FROM [Loyalty].[dbo].[Coupon_move] (nolock) cm
		| inner join Loyalty..DiscountCard (nolock) d on d.DiscountCardUID=cm.DiscountCardUID
		//mind убрал это условие
		//| where cm.id_type_coupon=3 and d.Number=/**BPar1**/~~~~~/**FPar**/ ) b on 1=1
		| where d.Number=/**BPar1**/~~~~~/**FPar**/ ) b on 1=1
		|
		|where D.Number=/**BPar1**/~~~~~/**FPar**/";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~","'" + Email + "'");
		
		ТекстЗапроса = "select * from sms_repl..Customer_Second_BONUSCARD ('"+Email+"')";
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		ВтораяКарта = "";
		Для каждого лкТекСтрТЗ Из ТЗ Цикл
			
			ВтораяКарта = лкТекСтрТЗ.ВтораяКарта;
			Прервать;
			
		КонецЦикла;
		
		//+++АК ILIK 2018.07.11 ИП-00019030
		// Партнерская карта
		ТекстЗапроса = "SELECT
					   |	CustomerOtherCard.Number,
					   |	CustomerOtherCard.Number_other,
					   //+++АК SHEP 2018.07.27 ИП-00019030.01
					   |	CAST(ISNULL(CustomerOtherCard.date_to, '1900-01-01T00:00:00') AS datetime) AS datetime_to,
					   //---АК SHEP 2018.07.27
					   |	CustomerOtherCard.ID_type
					   |FROM Loyalty.dbo.Customer_Other_Card AS CustomerOtherCard
					   |	WHERE CustomerOtherCard.Number = '" + Email + "'";
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТабЗнач = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		
		Если ТабЗнач.Количество() > 0 Тогда
			ТипПартнерскойКарты = Справочники.ТипыПартнерскихБонусныхКарт.НайтиПоКоду(ТабЗнач[0].ID_type);
			НомерПартнерскойКарты = ТабЗнач[0].Number_other;
			
			ТипПартнерскойКартыСтарый = ТипПартнерскойКарты;
			НомерПартнерскойКартыСтарый = НомерПартнерскойКарты;
			
			//+++АК SHEP 2018.07.27 ИП-00019030.01
			ПартнерскаяКартаДействуетДо = ?(ТабЗнач[0].datetime_to = Дата(1900, 1, 1), Дата(1,1,1), ТабЗнач[0].datetime_to);
			ПартнерскаяКартаДействуетДоСтарая = ПартнерскаяКартаДействуетДо;
			//---АК SHEP 2018.07.27
			
			ТипПартнерскойКартыПриИзмененииСервер();
		КонецЕсли;
		//---АК ILIK
		
		//ПакетЗапросов = ПакетЗапросов + Символы.ПС + Запрос.Текст;
	КонецЕсли;
	
	//+++ АК rakp@automacon.ru, 17.11.2017 18:02:52,  ИП-00017249
	СтрСоединения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(,"srv-sql03");
	
	ТекстЗапроса = 
	"select distribution_tema, distribution_action, distribution_service
	|from vv03.dbo.Cards_Settings with (nolock) where number = '" + Email + "'";
	
	CurrentConnection = База_Подключение(СтрСоединения);
		
	RecordSet = CurrentConnection.Execute(ТекстЗапроса);
	Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
		RecordSet=RecordSet.NextRecordSet();
	КонецЦикла;			
	РТЗ = Телеграм.База_РезультатЗапросВТаблицуЗначений(RecordSet);
	
	Если ТипЗнч(РТЗ) = Тип("ТаблицаЗначений") и (РТЗ.Количество() > 0) Тогда 
		distribution_service = ?(РТЗ[0].distribution_service = 1, Истина, Ложь);
	    distribution_action  = ?(РТЗ[0].distribution_action  = 1, Истина, Ложь);
		distribution_tema    = ?(РТЗ[0].distribution_tema    = 1, Истина, Ложь);
		//Cards_Settings_Начальная = РТЗ;
	КонецЕсли; 
	//--- АК rakp@automacon.ru
	
	//+++ GOLV 14.05.2018 ИП-00018610
	ЧерныйСписокНГ.Отбор.Элементы.Очистить();
	ЭлементОтбора = ЧерныйСписокНГ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Карта");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Email;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	
	ОтзывыНГ.Отбор.Элементы.Очистить();
	ЭлементОтбора = ОтзывыНГ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("НомерКарты");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Email;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;		
	// --- GOLV	
	
КонецПроцедуры	

//+++AK GOLV ИП-00020444      
&НаСервере
Процедура ЗаполнитьФинОперации()
	
	НомерТовара = 0;
	Паттерн = "";
	Если ЗначениеЗаполнено(СтрокаТовара) Тогда
		НайденныйТовар = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовара, Истина);
		Если ЗначениеЗаполнено(НайденныйТовар) и НЕ НайденныйТовар.ЭтоГруппа Тогда
			НомерТовара = НайденныйТовар.id_tov;
		ИначеЕсли СтрДлина(СтрокаТовара)>2 Тогда
			Паттерн = СтрокаТовара;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТовара) Тогда
		ТекстЗапроса =
		"exec [Loyalty].[dbo].[BC_GetAcctHistoryByDateRange_1C_Group_id_tov] 
		|@BC_Number  = '" + Email + "',
		|@datStart = '20120101',
		|@datEnd   = '20200101',
		|@id_tov    = " + Формат(НомерТовара, "ЧН=0; ЧГ=");
	ИначеЕсли ЗначениеЗаполнено(Паттерн) Тогда
		ТекстЗапроса =
		"exec [Loyalty].[dbo].[BC_GetAcctHistoryByDateRange_1C_Group_pattern] 
		|@BC_Number  = '" + Email + "',
		|@datStart = '20120101',
		|@datEnd   = '20200101',
		|@pattern    = '" + Паттерн + "'";
	Иначе
		ТекстЗапроса = 
		"exec Loyalty..BC_GetAcctHistoryByDateRange_1C_Group '" + Email + "', {d'2012-01-01'}, {d'2100-01-01'}, 0, 0;";
	КонецЕсли;
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.ТипРозничнойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.НомерТочки = 0");
	Типы = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("ТипТТ", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРозничныхТочек"));
	ТЗ.Колонки.Добавить("ЛогиПоФронтолу", Новый ОписаниеТипов("Строка"));
	//+++АК MOSD 2018.12.18 ИП-00020662 
	ТЗ.Колонки.Добавить("Комментарии", Новый ОписаниеТипов("Строка"));
	//---АК MOSD 
	
	Для каждого ТекСтр Из ТЗ Цикл	
		СтрТип = Типы.Найти(ТекСтр.ShopNo, "НомерТочки");
		Если СтрТип = Неопределено Тогда 
			ТекСтр.ТипТТ = Перечисления.ТипыРозничныхТочек.ПустаяСсылка();
		Иначе
			ТекСтр.ТипТТ = СтрТип.ТипРозничнойТочки;
		КонецЕсли;	
		ТекСтр.ЛогиПоФронтолу = "Нажмите два раза для расшифровки";	
		//+++АК MOSD 2018.12.18 ИП-00020662 
		ТекСтр.Комментарии = "Нажмите два раза для расшифровки";	
		//---АК MOSD 
	КонецЦикла;
		
	Объект.ФинОпераци.Загрузить(ТЗ);	
		
КонецПроцедуры
//---AK GOLV

&НаСервере
Процедура ОбновитьКупоныКлиентаНаСервере(лкEmail)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВыданныеКупоны.ТипКупона,
	//|	СУММА(ВыданныеКупоны.КличествоКупонов) КАК КличествоКупонов
	//|ИЗ
	//|	ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.ВыданныеКупоны КАК ВыданныеКупоны
	//|		ПО КартыПокупателей.DiscountCardUID = ВыданныеКупоны.КартаПокупателя
	//|ГДЕ
	//|	КартыПокупателей.Number = &Number
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВыданныеКупоны.ТипКупона";
	//
	//Запрос.УстановитьПараметр("Number", лкEmail);
	//
	//Объект.КупоныКлиента.Загрузить(Запрос.Выполнить().Выгрузить());
	//
	//МассДляУдаления = Новый Массив;
	//
	//Для каждого ТекСтр Из Объект.КупоныКлиента Цикл
	//	
	//	Если ТекСтр.КличествоКупонов = 0 Тогда 
	//		МассДляУдаления.Добавить(ТекСтр);
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	
	//Для каждого ТекЭлМасс Из МассДляУдаления Цикл
	//	
	//	Объект.КупоныКлиента.Удалить(ТекЭлМасс);
	//	
	//КонецЦикла;
	
	//+++АК SHEP 2018.05.22 ИП-00018754. Убрать из карточки покупателя вкладку Инфо.
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	//Вместо неё добавить 2 новые вкладки:
	//1)ЛП
	Инфо_ЛП = "";
	ТекстЗапросаSQL = "
	|declare @number as char(7) = " + ВнешниеДанные.ФорматПоля(Email) + "
	|
	|select [txt]
	|from loyalty..crm_LP_info(@number)";
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапросаSQL, , СтрокаПодключения);
	ТЗн = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	База_ЗакрытьЗапрос(RecordSet);
	
	Для Каждого ТекСтр Из ТЗн Цикл
 		Инфо_ЛП = Инфо_ЛП + ТекСтр.txt + Символы.ПС;
 	КонецЦикла;
	
	//2)Абонемент
	Инфо_Абонемент = "";
	ТекстЗапросаSQL = "
	|declare @number as char(7) = " + ВнешниеДанные.ФорматПоля(Email) + "
	|
	|select [txt]
	|from loyalty..crm_abonement_info(@number)";
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапросаSQL, , СтрокаПодключения);
	ТЗн = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	База_ЗакрытьЗапрос(RecordSet);
	
	Для Каждого ТекСтр Из ТЗн Цикл
 		Инфо_Абонемент = Инфо_Абонемент + ТекСтр.txt + Символы.ПС;
 	КонецЦикла;
	
	Возврат;
	//---АК SHEP 2018.05.22
	
	// ИнфоКупоны
	ИнфоКупоны = "";
	
	ТекстЗапроса = "select *
	|from sms_repl..coupons_info('~~~~~');";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", Email);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	ТекстДок = Новый ТекстовыйДокумент;
	Для каждого ТекСтр Из ТЗ Цикл
 
 		ТекстДок.ДобавитьСтроку(ТекСтр.txt);
 
 	КонецЦикла;
	ИнфоКупоны = ТекстДок.ПолучитьТекст(); 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭтоПомощникУправляющего() И Модифицированность И Вопрос("Данные были изменены, хотите записать их в базу?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		//Состояние("Идёт запись данных... Ожидайте.");
		ЗаписатьДанныеКлиентаНаСервере();
		//Состояние("");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКлиентаНаСервере()
	
	
	ВремТЗ = Объект.Customer.Выгрузить();
	
	ТаблИзменений = Новый ТаблицаЗначений;
	ТаблИзменений.Колонки.Добавить("КлючСтроки");
	ТаблИзменений.Колонки.Добавить("ЗначениеСтроки");
	ТаблИзменений.Колонки.Добавить("ЗначениеСтрокиСтарое");
	
	Для каждого ТекКолонка Из ВремТЗ.Колонки Цикл
		
		Попытка
			Если ТекКолонка.Имя = "Sex" Тогда
				
				Если ЭтаФорма.Sex = Перечисления.АК_Пол.Ж Тогда
					ТекЗначение = 1;
				Иначе
					ТекЗначение = 0;
				КонецЕсли;	
					
				
			ИначеЕсли ТекКолонка.Имя = "id_type_cust" Тогда
				
				Если ЭтаФорма.id_type_cust = Перечисления.АК_ТипыПокупателей.ГорячийПоклонник Тогда
					ТекЗначение = 1;
				ИначеЕсли ЭтаФорма.id_type_cust = Перечисления.АК_ТипыПокупателей.Нейтральный Тогда
					ТекЗначение = 2;
				ИначеЕсли ЭтаФорма.id_type_cust = Перечисления.АК_ТипыПокупателей.НеБеспокоить Тогда
					ТекЗначение = 3;
				Иначе
					ТекЗначение = 4;
				КонецЕсли;					
				
				
			ИначеЕсли ТекКолонка.Имя = "MobilCarta" Тогда
				
				Если ЭтаФорма[ТекКолонка.Имя] Тогда
					ТекЗначение = 1;	
				Иначе	
					ТекЗначение = 0;
				КонецЕсли;
				
			ИначеЕсли ТекКолонка.Имя = "SMS_karta_no" Тогда
				
				Если ЭтаФорма[ТекКолонка.Имя] Тогда
					ТекЗначение = 1;	
				Иначе	
					ТекЗначение = 0;
				КонецЕсли;	
				
			ИначеЕсли ТекКолонка.Имя = "only_telegram_sms" Тогда //+++АК MIND 2018.01.22 
				
				Если ЭтаФорма.БезСМС Тогда
					ТекЗначение = 1;	
				Иначе	
					ТекЗначение = 0;
				КонецЕсли;
				
			Иначе	
				ТекЗначение = ЭтаФорма[ТекКолонка.Имя];
			КонецЕсли;	
			
			Если ТекЗначение <> ВремТЗ[0][ТекКолонка.Имя] Тогда
				НоваяСтрока = ТаблИзменений.Добавить();
				
				НоваяСтрока.КлючСтроки = ТекКолонка.Имя;
				НоваяСтрока.ЗначениеСтроки = ТекЗначение;
				НоваяСтрока.ЗначениеСтрокиСтарое = ВремТЗ[0][ТекКолонка.Имя];
				
			КонецЕсли;				
			
		Исключение
			
		КонецПопытки;	
		
	КонецЦикла;
	Если ЗначениеЗаполнено(Email) Тогда
		
		Для каждого ТекСтрИзменений Из ТаблИзменений Цикл
			
			//mind заглушка от привязки двух карт на один номер телефона
			Если НРег(ТекСтрИзменений.КлючСтроки) = "phone" Тогда
				Если ЗначениеЗаполнено(ТекСтрИзменений.ЗначениеСтроки) Тогда
					СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
					//+++АК SHEP 2018.05.08 ИП-00018563
					//ТекстЗапроса = "SELECT [Email] FROM Loyalty.dbo.Customer WHERE phone = " + ВнешниеДанные.ФорматПоля(СокрЛП(ТекСтрИзменений.ЗначениеСтроки)) + " and Email <> " + ВнешниеДанные.ФорматПоля(Email); 
			   		ТекстЗапроса = "SELECT [Email] FROM Loyalty.dbo.Customer WHERE phone = " + ВнешниеДанные.ФорматПоля(СокрЛП(ТекСтрИзменений.ЗначениеСтроки)) + " and bc_number <> " + ВнешниеДанные.ФорматПоля(Email);
					//+++АК SHEP 2018.05.08
					RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
					ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
					Если ТЗ.Количество() > 0 Тогда
						ВызватьИсключение "Уже есть карта привязанная к номеру телефона " + СокрЛП(ТекСтрИзменений.ЗначениеСтроки);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
			ТекстЗапроса = " UPDATE dbo.Customer ";
			ТекстЗапроса = ТекстЗапроса + " SET "+ТекСтрИзменений.КлючСтроки+" = '"+СокрЛП(ТекСтрИзменений.ЗначениеСтроки)+"' ";
			
			
			//+++АК SHEP 2018.05.08 ИП-00018563
			//ТекстЗапроса = ТекстЗапроса +" WHERE [Email] = '"+Email+"' ";
			ТекстЗапроса = ТекстЗапроса +" WHERE [bc_number] = '"+Email+"' ";
			//---АК SHEP 2018.05.08
			
			
			ТекстЗапроса = ТекстЗапроса +" ;";
			
			СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
			
			База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
						
			ТекстЗапроса ="INSERT INTO [Loyalty].[dbo].[customer_hystory]([user_change], [date_change], [field_change], [value_old], [Number]) VALUES ('"+ПараметрыСеанса.ТекущийПользователь+"','"+ТекущаяДата()+"','"+ТекСтрИзменений.КлючСтроки+"','"+СокрЛП(ТекСтрИзменений.ЗначениеСтрокиСтарое)+"','"+Email+"' );";
			//'"+" (SELECT (SELECT MAX([id_cust_hyst]) FROM [Loyalty].[dbo].[customer_hystory]) + 1) "+"'
			База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
			
			// Если поменяли дату рождения, то надо сменить пароль на сайт
			Если ТекСтрИзменений.КлючСтроки = "Birthday" Тогда
				
				Если ТекСтрИзменений.ЗначениеСтроки = '00010101' Тогда
					ТекПарольНаСайт = "";
				Иначе
					ТекПарольНаСайт = Формат(ТекСтрИзменений.ЗначениеСтроки, "ДФ=ddMMyyyy");
				КонецЕсли;	
				
				Если ТекСтрИзменений.ЗначениеСтрокиСтарое = '00010101' Тогда
					СтарыйПароль = "";
				Иначе	
					СтарыйПароль = Формат(ТекСтрИзменений.ЗначениеСтрокиСтарое, "ДФ=ddMMyyyy");
				КонецЕсли;	
				
				ТекстЗапроса = " UPDATE dbo.Customer ";
				ТекстЗапроса = ТекстЗапроса + " SET "+"[SecretCode]"+" = '"+ТекПарольНаСайт+"' ";
				
				
				//+++АК SHEP 2018.05.08 ИП-00018563
				//ТекстЗапроса = ТекстЗапроса +" WHERE [Email] = '"+Email+"' ";
				ТекстЗапроса = ТекстЗапроса +" WHERE [bc_number] = '"+Email+"' ";
				//---АК SHEP 2018.05.08
				
				
				ТекстЗапроса = ТекстЗапроса +" ;";
				
				СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
				
				База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
				
				ТекстЗапроса ="INSERT INTO [Loyalty].[dbo].[customer_hystory]([user_change], [date_change], [field_change], [value_old], [Number]) VALUES ('"+ПараметрыСеанса.ТекущийПользователь+"','"+ТекущаяДата()+"','SecretCode','"+СтарыйПароль+"','"+Email+"' );";
				//'"+" (SELECT (SELECT MAX([id_cust_hyst]) FROM [Loyalty].[dbo].[customer_hystory]) + 1) "+"'
				База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
				
			КонецЕсли;
			
			// Если поменяли Имя или Отчество
			Если ТекСтрИзменений.КлючСтроки = "Имя" ИЛИ ТекСтрИзменений.КлючСтроки = "Отчество" Тогда
								
				ТекстЗапроса = " UPDATE dbo.Customer ";
				ТекстЗапроса = ТекстЗапроса + " SET "+"[FullName]"+" = '"+СокрЛП(Имя)+" "+СокрЛП(Отчество)+"' ";
				
				//+++АК SHEP 2018.05.08 ИП-00018563
				//ТекстЗапроса = ТекстЗапроса +" WHERE [Email] = '"+Email+"' ";
				ТекстЗапроса = ТекстЗапроса +" WHERE [bc_number] = '"+Email+"' ";
				//---АК SHEP 2018.05.08
								
				ТекстЗапроса = ТекстЗапроса +" ;";
				
				СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
				
				База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
				
				//ТекстЗапроса ="INSERT INTO [Loyalty].[dbo].[customer_hystory]([user_change], [date_change], [field_change], [value_old], [Number]) VALUES ('"+ПараметрыСеанса.ТекущийПользователь+"','"+ТекущаяДата()+"','SecretCode','"+СтарыйПароль+"','"+Email+"' );";
				////'"+" (SELECT (SELECT MAX([id_cust_hyst]) FROM [Loyalty].[dbo].[customer_hystory]) + 1) "+"'
				//База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//+++ АК rakp@automacon.ru, 19.11.2017 22:36:45,  ИП-00017249
		Попытка
			СтрСоединения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(,"srv-sql03");
			
			ТекстЗапроса = 
			"select distribution_tema, distribution_action, distribution_service
			|from vv03.dbo.Cards_Settings with (nolock) where number = '" + Email + "'"; //Лучше получить данные таблицы сейчас для исключения перезаписи  
			                                                                             //значений во время чтения формы
			CurrentConnection = База_Подключение(СтрСоединения);
				
			RecordSet = CurrentConnection.Execute(ТекстЗапроса);
			Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
				RecordSet=RecordSet.NextRecordSet();
			КонецЦикла;			
			РТЗ = Телеграм.База_РезультатЗапросВТаблицуЗначений(RecordSet);
			
			Измененные = новый Соответствие;
			Если ТипЗнч(РТЗ) = Тип("ТаблицаЗначений") и (РТЗ.Количество() > 0) Тогда 
				Если НЕ РТЗ[0].distribution_service =distribution_service тогда
					 Измененные.Вставить("distribution_service", Число(НЕ РТЗ[0].distribution_service));
				КонецЕсли;	
				Если НЕ РТЗ[0].distribution_action =distribution_action тогда
					 Измененные.Вставить("distribution_action", Число(НЕ  РТЗ[0].distribution_action));
				КонецЕсли;	
				Если НЕ РТЗ[0].distribution_tema =distribution_tema тогда
					 Измененные.Вставить("distribution_tema", Число(НЕ  РТЗ[0].distribution_tema));
				КонецЕсли;	
			КонецЕсли; 
			
			Для каждого ИзмененныйЭлемент Из Измененные Цикл
				ТекстЗапроса =
					"DECLARE  @return_value int
				    |EXEC  @return_value = [Telegram].[dbo].[Update_Cards_Settings]
				    |@number = N'"+ Email + "', @param_name = N'" + ИзмененныйЭлемент.Ключ + "',
				    |@param_value = N'"+СокрЛП(ИзмененныйЭлемент.Значение)+"', @id_telegram = 0
				    |SELECT  'ret' = @return_value";   
				База_ВыполнитьЗапрос(ТекстЗапроса,,СтрСоединения);
			КонецЦикла; 
		Исключение
			Сообщить("Не удалось записать значения типов рассылок в базу.");
		КонецПопытки;	
		//--- АК rakp@automacon.ru
		
		//+++АК ILIK 2018.07.11 ИП-00019030
		Если (ЗначениеЗаполнено(ТипПартнерскойКарты) И ЗначениеЗаполнено(НомерПартнерскойКарты))
			//+++АК SHEP 2018.07.27 ИП-00019030.01
		    //И (ТипПартнерскойКарты <> ТипПартнерскойКартыСтарый Или НомерПартнерскойКарты <> НомерПартнерскойКартыСтарый) Тогда
			И (ТипПартнерскойКарты <> ТипПартнерскойКартыСтарый Или НомерПартнерскойКарты <> НомерПартнерскойКартыСтарый
				ИЛИ ПартнерскаяКартаДействуетДо <> ПартнерскаяКартаДействуетДоСтарая) Тогда
			//---АК SHEP 2018.07.27
			
			СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
			
			ТекстЗапроса = "SELECT
						   |	CustomerOtherCard.Number,
						   |	CustomerOtherCard.Number_other,
						   |	CustomerOtherCard.ID_type
						   |FROM Loyalty.dbo.Customer_Other_Card AS CustomerOtherCard
						   |	WHERE CustomerOtherCard.Number_other = '" + НомерПартнерскойКарты + "'
						   |	AND CustomerOtherCard.Number <> '" + Email + "'";
			RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
			ТабЗнач = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
			RecordSet.Close();
			
			Если ТабЗнач.Количество() > 0 Тогда
				ВызватьИсключение "Партнерская карта с указанным номером уже введена для карты: " + ТабЗнач[0].Number;
			КонецЕсли;
			
			//+++АК SHEP 2018.07.27 ИП-00019030.01
			//ТекстЗапроса = "UPDATE Loyalty.dbo.Customer_Other_Card
			//			   |SET Number_other = '" + НомерПартнерскойКарты + "',ID_type = '" + Формат(ТипПартнерскойКарты.Код, "ЧГ=0") + "'
			//			   |WHERE Number = '" + Email + "'
			//			   |IF @@ROWCOUNT = 0
			//			   |INSERT INTO Loyalty.dbo.Customer_Other_Card (Number, Number_other, ID_type) 
			//			   |VALUES ('" + Email + "','"+ НомерПартнерскойКарты + "','" + Формат(ТипПартнерскойКарты.Код, "ЧГ=0") + "')";
			
			Стрdate_to = ?(ПартнерскаяКартаДействуетДо = Дата(1,1,1), "NULL", ВнешниеДанные.ФорматПоля(ПартнерскаяКартаДействуетДо, Истина));
			КодТипаПартнёрскойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипПартнерскойКарты, "Код");
			ТекстЗапроса =
				"UPDATE Loyalty.dbo.Customer_Other_Card
				|SET Number_other = " + ВнешниеДанные.ФорматПоля(НомерПартнерскойКарты) + ", ID_type = " + ВнешниеДанные.ФорматПоля(КодТипаПартнёрскойКарты) + "
				|	, date_to = " + Стрdate_to + "
				|WHERE Number = '" + Email + "'
				|IF @@ROWCOUNT = 0
				|INSERT INTO Loyalty.dbo.Customer_Other_Card (Number, Number_other, ID_type, date_to) 
				|VALUES ('" + Email + "','"+ НомерПартнерскойКарты + "', " + ВнешниеДанные.ФорматПоля(КодТипаПартнёрскойКарты) + ", " + Стрdate_to + ")";
			//---АК SHEP 2018.07.27
			База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
			
		КонецЕсли;
		//---АК ILIK
	КонецЕсли;

КонецПроцедуры	

Функция ПолучитьЛогиПоФронтолу(УидЧека)
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Получение логов по фронтолу");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	ТабДок = Новый ТабличныйДокумент();
	Макет = Обработки.ОтчетыПоКартам.ПолучитьМакет("ЛогиФронтола");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//ТекстЗапроса = "select p._Description FIO,
	//				|fl.DATETIME,
	//				|fl.ACTION
	//				|from SMS_REPL..checks (nolock) ch
	//				|inner join frontol..FrontolLog (nolock) fl
	//				|on fl.CashID = ch.CashID
	//				|and fl.DATETIME > DATEADD(second, -5, ch.OpenDate)
	//				|and fl.DATETIME < DATEADD(second, 5, ch.CloseDate)
	//				|left join [IzbenkaFin].[dbo].[_Reference39] (nolock) p
	//				|on convert(real,_Code) = fl.USERCODE
	//				|where ch.CheckUID = '" + УидЧека + "'
	//				|order by fl.ID";
	
	//|					where FL.Datetime >= ''' + CONVERT(nchar, DATEADD(DAY,1, @opendate), 126) + ''' and FL.Datetime <= ''' + CONVERT(nchar, DATEADD(DAY,1, @closedate), 126) + '''

	
	ТекстЗапроса = "declare @CheckUid nvarchar(36) = '" + Сред(УидЧека, 2, 36) + "'
					|declare @opendate datetime
					|declare @closedate datetime
					|
					|Select @opendate = DATEADD(second, -5, Ch.Opendate), @closedate = DATEADD(second, 5, Ch.CloseDate) FROM SMS_UNION.dbo.Checks (nolock) as Ch WHERE CheckUID = @CheckUid
					|
					|declare @strExec nvarchar(4000)
					|
					|Set @strExec = 'SELECT
					|						FL.Datetime
					|						,FL.Action
					|						,FL.CashId
					|						,Fl.Id
					|						,Fl.Usercode
					|					FROM [Frontol].[dbo].[FrontolLog] FL (nolock) 
					|					
					|					where FL.Datetime >= ''' + CONVERT(nchar, @opendate, 126) + ''' and FL.Datetime <= ''' + CONVERT(nchar, @closedate, 126) + '''
					|						and Fl.CATEG <> ''V'' '
					|
					|create table #ls (DateTime datetime, Action nvarchar(500), CashID int, Id bigint, USERCODE bigint) 
					|					
					|					Insert into #ls
					|					exec (@strExec) at [SRV-SQL04]
					|					
					|select p.FIO FIO,
					|fl.DATETIME,
					|fl.ACTION
					|from SMS_REPL..checks (nolock) ch
					|inner join #ls (nolock) fl
					|on fl.CashID = ch.CashID
					|left join [SMS_REPL].[dbo].[Cashier_view] (nolock) p
					|on p.CodeFL = fl.USERCODE
					|where ch.CheckUID = @CheckUid
					|order by fl.ID";

					
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Продавец = Rs.Fields("FIO").Value;
			Область.Параметры.Дата = Rs.Fields("DATETIME").Value;
			Область.Параметры.Действие = Rs.Fields("ACTION").Value;
			ТабДок.Вывести(Область);
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, ТекстЗапроса);
	
	Возврат ТабДок;
	
КонецФункции	

//+++АК MOSD 2018.12.18 ИП-00020662
&НаСервереБезКонтекста
Функция ПолучитьКомментарии(ТекID)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапроса = "select top 100 [Comments]
					|from SMS_REPL.dbo.checkComments (nolock)
					|where CashCheckNo="+ВнешниеДанные.ФорматПоля(ТекID);
	rs = ADOСоединение.Execute(ТекстЗапроса);
	тз = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	ADOСоединение.Close();
	
	ТекстКомментария = "";
	Для Каждого ТекСтр Из тз Цикл
		ТекстКомментария = ТекстКомментария + ?(ТекстКомментария="","",Символы.ПС) + ТекСтр.Comments;
	КонецЦикла;
	
	Возврат ТекстКомментария;
	
КонецФункции

&НаКлиенте
Процедура ФинОперациВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ФинОперациЛогиПоФронтолу" Тогда
		Если ТД.ТипТТ = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
			Сообщить("Для избенки невозможно получить логи");
			Возврат;
		КонецЕсли;	
		Состояние("Идёт выборка данных по чеку... Ожидайте!");
		ТекID = ТД.CheckUID;
		Табл = ПолучитьЛогиПоФронтолу(ТекID);
		Табл.ОтображатьСетку = Ложь;
		Табл.ОтображатьЗаголовки = Ложь;
		Табл.Показать("Логи");
	//+++АК SHEP 20160727: начисляем бонусы по чеку
	ИначеЕсли Поле.Имя = "ФинОперациНачислено" Тогда
		//ТекущиеДанные = Объект.ФинОпераци[ВыбраннаяСтрока];
		СтруктураПараметры = Новый Структура("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СтруктураПараметры.Вставить("НомерКарты", Email);
		СтруктураПараметры.Вставить("НомерЧека", ТД.CashCheckNo);
		СтруктураПараметры.Вставить("ЦельНачисления", ЦельНачисления);
		_CheckUID = ТД.CheckUID;
		_CheckUID = СтрЗаменить(СтрЗаменить(_CheckUID, "{", ""), "}", "");
		СтруктураПараметры.Вставить("CheckUID", _CheckUID);
		ОткрытьФормуМодально("Обработка.ОтчетыПоКартам.Форма.НачислениеБонусовПоЧеку", СтруктураПараметры, ЭтаФорма);
	//---АК SHEP 20160727
	//+++АК MOSD 2018.12.18 ИП-00020662
	ИначеЕсли Поле.Имя = "ФинОперациКомментарии" И ЗначениеЗаполнено(ТД.CashCheckNo) Тогда
		Состояние("Идёт выборка данных по чеку... Ожидайте!");
		ТекстКомментария = ПолучитьКомментарии(Число(СтрЗаменить(ТД.CashCheckNo,Символы.НПП,""))); 
		Если НЕ ЗначениеЗаполнено(ТекстКомментария) Тогда
			ТекстКомментария = "пусто";
		КонецЕсли;
		ПоказатьПредупреждение(,ТекстКомментария);
	//---АК MOSD 
	Иначе	
		Состояние("Идёт выборка данных по чеку... Ожидайте!");
		ТекID = ТД.CheckUID;
		ТекМагазин = ТД.ShopNo;
		ТекСуммаЧека = ТД.ChequeAmount;
		ТекNumber = ТД.CardNum;
		ТекDateTimeStamp = ТД.DateTimeStamp;
		Табл = ФинОперациВыборНаСервере(ТекID, ТекМагазин, ТекСуммаЧека, ТекNumber, ТекDateTimeStamp);
		Табл.ОтображатьСетку = Ложь;
		Табл.ОтображатьЗаголовки = Ложь;
		Табл.Показать("Чек_unf ");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ФинОперациВыборНаСервере(ТекID, ТекМагазин, ТекСуммаЧека, ТекNumber, ТекDateTimeStamp)
		
	Возврат Обработки.ОтчетыПоКартам.ФинОперациВыборНаСервере(ТекID);
		
КонецФункции

&НаКлиенте
Процедура ДобавитьКупон(Команда)
	УстановитьКоличествоКупоновНаСервере(1);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКупон(Команда)
	УстановитьКоличествоКупоновНаСервере(-1);
КонецПроцедуры


&НаСервере
Процедура УстановитьКоличествоКупоновНаСервере(ЗначениеДляЗаписи)
	
	Если ЗначениеЗаполнено(ТипКупона) Тогда	
		
		//+++АК SHEP 2018.08.28 ИП-00019339
		//ТекстЗапроса = " SET NOCOUNT ON
		//|insert into [Loyalty].[dbo].[Coupon_move]
		//|      ([id_type_coupon]
		//|      ,[DiscountCardUID]
		//|      ,[user_add]
		//|      ,[time_add]
		//|      ,[kolvo]
		//|      ,[CheckUID] )
		//|select 
		//|       %%%%%
		//|      ,d.[DiscountCardUID]
		//|      ,/**BPar2**/'^^^^^'/**FPar**/    
		//|      ,GETDATE()
		//|      ,/**BPar3**/`````/**FPar**/    
		//|      ,null
		//| from Loyalty..DiscountCard d (nolock)
		//|where d.Number=/**BPar1**/~~~~~/**FPar**/";
		//
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", "'" + Email + "'");
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "`````", ЗначениеДляЗаписи);
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", СокрЛП(ПараметрыСеанса.ТекущийПользователь));
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%%%%%", "'"+ТипКупона.Инентификатор+"'");
		
		ТекстЗапроса = "
		|exec [Loyalty].[dbo].[Coupon_move_ins]
		|	@id_type_coupon = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипКупона, "Инентификатор") + "',
		|	@number = " + ВнешниеДанные.ФорматПоля(Email) + ",
		|	@user_add = '" + СокрЛП(ПараметрыСеанса.ТекущийПользователь) + "',
		|	@kolvo = " + ВнешниеДанные.ФорматПоля(ЗначениеДляЗаписи) + "
		|";
		//---АК SHEP 2018.08.28
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
		ADOСоединение.Execute(ТекстЗапроса);	
		ADOСоединение.Close();
		
		///////////////////////////////////
		ТекстЗапроса = "Select SUM(cm.[kolvo]) as КличествоКупонов
		|FROM [Loyalty].[dbo].[Coupon_move] (nolock) cm
		|inner join Loyalty..DiscountCard d (nolock) on d.DiscountCardUID=cm.DiscountCardUID
		|where cm.CheckUID is null
		|and d.Number = '~~~~~';";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Email);
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
		ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
		RecordSet.Close();
		ТекСуммаКупонов = 0;
		Для каждого лкТекСтрТЗ Из ТЗ Цикл
			
			ТекСуммаКупонов = лкТекСтрТЗ.КличествоКупонов;
			
		КонецЦикла;
		
		КоличествоКупонов = ТекСуммаКупонов;
		
		ОбновитьКупоныКлиентаНаСервере(Email);
		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОтчетПоРучныМНачислениямКупонов(Команда)
	
	//+++АК MIND 2017.12.15 не рабочий отчет, подозрение на отказ от его использования
	Предупреждение("Отчет не рабочий. Если он нужен - обращайтесь в автомакон");
	Возврат;
	//---АК MIND 
	
	Табл = ПосмотретьИсториюИзмененийКупоновНаСервере();
	Табл.Показать("История изменений купонов по карте "+Email);
	
КонецПроцедуры

&НаСервере
Функция ПосмотретьИсториюИзмененийКупоновНаСервере()
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. История изменения купонов");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	ТекстЗапроса = "Select d.Number , cm.user_add , cm.time_add
	|FROM [Loyalty].[dbo].[Coupon_move] (nolock) cm
	|inner join Loyalty..DiscountCard d (nolock) on d.DiscountCardUID=cm.DiscountCardUID
	|where cm.CheckUID is null
	|and cm.kolvo=1
	|order by cm.time_add;";
	
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Email);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	
	
	Табл = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.АК_ПечатьТаблицЗначений);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновной=Макет.ПолучитьОбласть("Шапка|Основной");
	ОбластьСтрокаОсновной=Макет.ПолучитьОбласть("Строка|Основной");
	ОбластьИтогОсновной=Макет.ПолучитьОбласть("Итог|Основной");
	ОбластьШапкаДОП=Макет.ПолучитьОбласть("Шапка|Показатели");
	ОбластьСтрокаДОП=Макет.ПолучитьОбласть("Строка|Показатели");
	ОбластьИтогДОП=Макет.ПолучитьОбласть("Итог|Показатели");
	
	
	ОбластьЗаголовок.Параметры.Заголовок = "История изменений по карте "+Email;
	Табл.Вывести(ОбластьЗаголовок);
	
	Табл.Вывести(ОбластьШапкаОсновной);
	
	Для Каждого Колонка из Тз.Колонки ЦИКЛ
		ОбластьШапкаДОП.Параметры.ИмяПоказателя=Колонка.Имя;
		Табл.Присоединить(ОбластьШапкаДОП);
	КонецЦикла;
	
	счетчик=0;
	Для каждого стр из Тз Цикл
		счетчик=счетчик+1;
		ОбластьСтрокаОсновной.Параметры.счетчик=счетчик; 
		Табл.Вывести(ОбластьСтрокаОсновной);
		Для Каждого Колонка из Тз.Колонки ЦИКЛ
			ОбластьСтрокаДОП.Параметры.ЗначениеКолонки=Формат(стр[Колонка.Имя],"ЧДЦ=2; ЧН=0,00; ЧГ=0");
			Табл.Присоединить(ОбластьСтрокаДОП);
		КонецЦикла;
	КонецЦикла;
	//Табл.Вывести(ОбластьИтогОсновной);
	
	//Для Каждого Колонка из Тз.Колонки ЦИКЛ
	//	ОбластьИтогДОП.Параметры.Итог=Формат(Тз.Итог(Колонка.Имя),"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	//	Табл.Присоединить(ОбластьИтогДОП);
	//КонецЦикла;
	
	
	//Табл.Защита = Истина;
	//Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, ТекстЗапроса);
	Возврат Табл;
		
КонецФункции


&НаКлиенте
Процедура ПоказатьИсториюПереносаКарт(Команда)
	
	Табл = ПоказатьИсториюПереносаКартСервере();	
	Табл.Показать("История изменений по карте "+Email);
	
КонецПроцедуры

&НаСервере
Функция ПоказатьИсториюПереносаКартСервере()
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. История переноса карт");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	ТекстЗапроса = "SELECT OLD_number as 'СтарыйНомер', New_number as 'НовыйНомер', date_join as 'ДатаСлияния',user_join as 'Пользователь'
	|FROM [Loyalty].[dbo].[Join_customer] j
	|inner join Loyalty..DiscountCard (nolock) d1 on d1.Number=j.New_number
	|inner join Loyalty..DiscountCard (nolock) d2 on d2.Number=j.Old_number
	| inner join Loyalty..DiscountCard (nolock) d3 on d1.AccountUID=d3.AccountUID
	|inner join Loyalty..DiscountCard (nolock) d4 on d2.AccountUID=d4.AccountUID
	|where (d3.Number = ('~~~~~')
	|
	|or d4.Number = ('~~~~~') ) and is_join=1
	|
	|order by date_join;";	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",Email);
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
		
	Табл = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.АК_ПечатьТаблицЗначений);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновной=Макет.ПолучитьОбласть("Шапка|Основной");
	ОбластьСтрокаОсновной=Макет.ПолучитьОбласть("Строка|Основной");
	ОбластьИтогОсновной=Макет.ПолучитьОбласть("Итог|Основной");
	ОбластьШапкаДОП=Макет.ПолучитьОбласть("Шапка|Показатели");
	ОбластьСтрокаДОП=Макет.ПолучитьОбласть("Строка|Показатели");
	ОбластьИтогДОП=Макет.ПолучитьОбласть("Итог|Показатели");
		
	ОбластьЗаголовок.Параметры.Заголовок = "История изменений по карте "+Email;
	Табл.Вывести(ОбластьЗаголовок);
	
	Табл.Вывести(ОбластьШапкаОсновной);
	
	Для Каждого Колонка из Тз.Колонки ЦИКЛ
		ОбластьШапкаДОП.Параметры.ИмяПоказателя=Колонка.Имя;
		Табл.Присоединить(ОбластьШапкаДОП);
	КонецЦикла;
	
	счетчик=0;
	Для каждого стр из Тз Цикл
		счетчик=счетчик+1;
		ОбластьСтрокаОсновной.Параметры.счетчик=счетчик; 
		Табл.Вывести(ОбластьСтрокаОсновной);
		Для Каждого Колонка из Тз.Колонки ЦИКЛ
			ОбластьСтрокаДОП.Параметры.ЗначениеКолонки=Формат(стр[Колонка.Имя],"ЧДЦ=2; ЧН=0,00; ЧГ=0");
			Табл.Присоединить(ОбластьСтрокаДОП);
		КонецЦикла;
	КонецЦикла;
	//Табл.Вывести(ОбластьИтогОсновной);
	
	//Для Каждого Колонка из Тз.Колонки ЦИКЛ
	//	ОбластьИтогДОП.Параметры.Итог=Формат(Тз.Итог(Колонка.Имя),"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	//	Табл.Присоединить(ОбластьИтогДОП);
	//КонецЦикла;
	
	
	//Табл.Защита = Истина;
	//Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, ТекстЗапроса);
	Возврат Табл;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Открытие отчета по карте покупателя");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	ПакетЗапросов = "";
	Параметры.Свойство("ЦельНачисления", ЦельНачисления);
	
	//+++АК SHEP 2018.07.27: перенёс из ПриОткрытии()
	Email = Параметры.Email;
	CustomerUID = Параметры.CustomerUID;
	rowguid = Параметры.rowguid;
	
	ЗаполнитьДанныеФормыНаСервере(Email, CustomerUID, rowguid);
	
	Модифицированность = Ложь;
	
	Если ЭтоПомощникУправляющего() Тогда
		Элементы.ВтораяКарта.Доступность = Ложь;
		Элементы.СвязатьНаОдинСчет.Доступность = Ложь;
		Элементы.ТипКупона.Доступность = Ложь;
		Элементы.ДобавитьКупон.Доступность = Ложь;
		Элементы.УдалитьКупон.Доступность = Ложь;
	КонецЕсли;
	
	//+++АК CISA 2018.09.20 ИП-00019777
	ОтборСообщенийПоКаналу = Элементы.ОтборСообщенийПоКаналу.СписокВыбора[0].Значение;
	//---АК CISA
		
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, Email, ПакетЗапросов);
	//---АК SHEP 2018.07.27
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ТоварОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСМС()
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Открытие закладки списка SMS");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	Объект.ТЗ_СМС_ВсеПоКлиенту.Очистить();
	
	пр_бот	= "0";
	пр_смс	= "0";
	пр_мп	= "0";
	пр_арх	= "0";
	Если ОтборСообщенийПоКаналу = 0 Тогда // Бот
		пр_бот = "1";
	ИначеЕсли ОтборСообщенийПоКаналу = 1 Тогда // СМС
		пр_смс = "1";
	ИначеЕсли ОтборСообщенийПоКаналу = 2 Тогда // МП
		пр_мп = "1";
	Иначе // Все
		пр_бот = "1";
		пр_смс = "1";
		пр_мп = "1";
	КонецЕсли;
	
	Если АрхивСообщений Тогда
		пр_арх	= "1";
		тор		= "500";
	Иначе
		тор		= "100";
	КонецЕсли;
	
	ТекстЗапроса =
	"SELECT TOP " + тор + " * FROM [Loyalty].[dbo].[get_all_message_history] (
	|'"	+ Email + "'
 	|," + пр_бот + "
	|," + пр_смс + "
	|," + пр_мп + "
	|," + пр_арх + ") order by Дата desc";
		
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, Неопределено, СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	Объект.ТЗ_СМС_ВсеПоКлиенту.Загрузить(ТЗ);
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, ТекстЗапроса);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьАрхивныеОперацииПоЛП()
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Отчет действий по смене ЛП");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	АрхивныеОперацииПоЛП.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "declare @bonusCard as char(7)=" + ВнешниеДанные.ФорматПоля(Email) + "
					|
					|
					|if OBJECT_ID('tempdb..#log_lp') is not null drop table #log_lp
					|CREATE TABLE #Log_lp(
					| [Дата Создания ЛП] [datetime] NOT NULL,
					| [id] [bigint] NOT NULL,
					| [товар] [nvarchar](150) NULL,
					| [ДатаС до Измен] [date] NOT NULL,
					| [ДатаПо до Измен] [date] NOT NULL,
					| [СпУстан до Измен] [varchar](100) NULL,
					| [Дата Изменений] [datetime] NULL,
					| [ДатаС после Измен] [date] NULL,
					| [ДатаПо после Измен] [date] NULL,
					| [СпУстан после Измен] [varchar](100) NULL,
					| [Коммент] [nvarchar](4000) NULL,
					| [Кассир] [varchar](200) NULL,
					| [rn] [bigint] NULL
					|) 
					|
					|
					|
					|insert into #Log_lp([Дата Создания ЛП],id,товар,[ДатаС до Измен],[ДатаПо до Измен],[СпУстан до Измен]
					|  ,[Дата Изменений],[ДатаС после Измен],[ДатаПо после Измен],[СпУстан после Измен],Коммент,Кассир,rn)
					|exec [srv-sql03].vv03.dbo.Archiv_Change_LP @bonusCard
					|
					|select * from #Log_lp";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Таб = АрхивныеОперацииПоЛП.Выгрузить();
	Для н = 1 По Таб.Колонки.Количество() Цикл
		Элементы["АрхивныеОперацииПоЛПРеквизит" + н].Видимость = Ложь;
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = АрхивныеОперацииПоЛП.Добавить();
			СчетчикИспользованных = 1;
			Для н = 0 По rs.Fields.Count() - 1 Цикл
				СтрокаДоб["Реквизит" + СчетчикИспользованных] = rs.Fields(н).Value;
				Элементы["АрхивныеОперацииПоЛПРеквизит" + СчетчикИспользованных].Заголовок = rs.Fields(н).Name;
				Элементы["АрхивныеОперацииПоЛПРеквизит" + СчетчикИспользованных].Видимость = Истина;
				СчетчикИспользованных = СчетчикИспользованных + 1;
			КонецЦикла;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, СтрокаЗапроса);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКупоныКлиентов()
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Отчет по купонам клиента");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	КупоныКлиента.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "if OBJECT_ID('tempdb..#couponinfo') is not null drop table #couponinfo
					|
					|CREATE TABLE #couponinfo(
					|[Номер карты] [char](7) NULL,
					|[КолВо] [int] NOT NULL,
					|[Описание] [varchar](72) NULL,
					|[Автор] [nchar](20) NULL,
					|[Наименование] [nchar](20) NOT NULL
					|)
					|
					|declare @number as char(7)=" + ВнешниеДанные.ФорматПоля(Email) + "
					|
					|insert into #couponinfo([Номер карты],КолВо,Описание,Автор,Наименование)
					|exec Loyalty..sp_CardInfo_Coupon_1C @number
					|
					|select * from #couponinfo";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Таб = КупоныКлиента.Выгрузить();
	Для н = 1 По Таб.Колонки.Количество() Цикл
		Элементы["КупоныКлиентаРеквизит" + н].Видимость = Ложь;
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = КупоныКлиента.Добавить();
			СчетчикИспользованных = 1;
			Для н = 0 По rs.Fields.Count() - 1 Цикл
				СтрокаДоб["Реквизит" + СчетчикИспользованных] = rs.Fields(н).Value;
				Элементы["КупоныКлиентаРеквизит" + СчетчикИспользованных].Заголовок = rs.Fields(н).Name;
				Элементы["КупоныКлиентаРеквизит" + СчетчикИспользованных].Видимость = Истина;
				СчетчикИспользованных = СчетчикИспользованных + 1;
			КонецЦикла;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, СтрокаЗапроса);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьИсторияЯВМагазине()
	
	ИсторияЯВМагазине.Очистить();
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Отчет история Я в магазине");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	КупоныКлиента.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "CREATE TABLE #I_am_in_story(
					|[Наименование] [varchar](100) NOT NULL,
					|[Дата] [varchar](10) NULL,
					|[Время] [varchar](8) NULL,
					|[Время окончания] [varchar](19) NULL,
					|[Магазин] [nvarchar](100) NULL,
					|[Описание] [varchar](100) NULL,
					|[rn] [int] NULL)
					|insert into #I_am_in_story(Наименование,Дата, Время,[Время окончания],Магазин, Описание, rn) 
					|exec [SMS_REPL].[dbo].[Customer_I_am_in_Story_history]
					|@number = " + ВнешниеДанные.ФорматПоля(Email) + "
					|
					|select * from #I_am_in_story";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Таб = ИсторияЯВМагазине.Выгрузить();
	Для н = 1 По Таб.Колонки.Количество() Цикл
		Элементы["ИсторияЯВМагазинеРеквизит" + н].Видимость = Ложь;
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ИсторияЯВМагазине.Добавить();
			СчетчикИспользованных = 1;
			Для н = 0 По rs.Fields.Count() - 1 Цикл
				Если НРег(rs.Fields(н).Name) = "rn" Тогда
					Продолжить;
				КонецЕсли;	
				СтрокаДоб["Реквизит" + СчетчикИспользованных] = rs.Fields(н).Value;
				Элементы["ИсторияЯВМагазинеРеквизит" + СчетчикИспользованных].Заголовок = rs.Fields(н).Name;
				Элементы["ИсторияЯВМагазинеРеквизит" + СчетчикИспользованных].Видимость = Истина;
				СчетчикИспользованных = СчетчикИспользованных + 1;
			КонецЦикла;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	Если Элементы["ИсторияЯВМагазинеРеквизит1"].Видимость = Ложь Тогда
		Элементы["ИсторияЯВМагазинеРеквизит1"].Видимость = Истина;
	КонецЕсли;	
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, СтрокаЗапроса);
	
КонецПроцедуры	

//+++АК MIND 2017.10.31 
&НаСервере
Процедура ОбновитьСтатистикаПоТоварам()
	
	//+++АК SHEP 2018.05.23 ИП-00018731
	СтатистикаПоТоварам = Объект.СтатистикаПоТоварам; //сделал вместо таблицы значений табличную часть (для нумерации строк)
	
	// заполняем список акциями
	Элементы.АкцияРазнообразноеПитание.РежимВыбораИзСписка = Истина;
	СписокВыбораМесяцыАкций = Элементы.АкцияРазнообразноеПитание.СписокВыбора;
	Если СписокВыбораМесяцыАкций.Количество() = 0 Тогда
		
		СписокМесяцыАкций = Обработки.ОтчетыПоКартам.СписокАкцийРазнообразноеПитание();
		Для Каждого ЭлементСпискаАкций Из СписокМесяцыАкций Цикл
			ЗаполнитьЗначенияСвойств(СписокВыбораМесяцыАкций.Добавить(), ЭлементСпискаАкций);
			Если ЭлементСпискаАкций.Пометка Тогда ТекущаяАкцияРазнообразноеПитание = ЭлементСпискаАкций.Значение; КонецЕсли;
		КонецЦикла;
		
		//АкцияРазнообразноеПитание = ТекущаяАкцияРазнообразноеПитание;
		АкцияРазнообразноеПитание = Формат(ТекущаяДата(), "ДФ=yyyyMM"); //+++АК SHEP 2018.05.31 ИП-00018731.01
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса = "DECLARE @discount varchar(10)
						|EXEC [srv-sql03].[Telegram].[dbo].[Get_Card_Discount]
						|@number = " + ВнешниеДанные.ФорматПоля(Email) + ",
						|@date = " + ВнешниеДанные.ФорматПоля(ТекущаяДата(), Истина) + ",
						|@discount = @discount OUTPUT
						//+++АК SHEP 2018.05.23 ИП-00018731
						//|,@year_month = " + ВнешниеДанные.ФорматПоля(ТекущаяАкцияРазнообразноеПитание) + "
						|
						//---АК SHEP 2018.05.23
						|SELECT @discount as discount";
						
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs = rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				ДействующаяСкидка = rs.Fields("discount").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	//---АК SHEP 2018.05.23
	
	ВсегоТоваров = 0;
	ВсегоОценено = 0;
	СтатистикаПоТоварам.Очистить();
	СтатусВАкции = "";
	
	//+++АК SHEP 2018.05.23 ИП-00018731: заполняем по указанной акции
	//ЭлементСпискаАкций = СписокВыбораМесяцыАкций.НайтиПоЗначению(АкцияРазнообразноеПитание);
	//Если ЭлементСпискаАкций = Неопределено Тогда
	//	ЭтоДействующаяАкция = Ложь;
	//Иначе
	//	ЭтоДействующаяАкция = ?(ЭлементСпискаАкций = Неопределено, Ложь, ЭлементСпискаАкций.Пометка);
	//КонецЕсли;
	ЭтоДействующаяАкция = (АкцияРазнообразноеПитание = ТекущаяАкцияРазнообразноеПитание);
	
	Элементы.ОтправитьПриглашение.Доступность = ЭтоДействующаяАкция;
	Элементы.ИзменитьСкидкуНаСледующийМесяц.Доступность = ЭтоДействующаяАкция;
	Элементы.ПересчитатьАкцию_РазнообразноеПитание.Доступность = ЭтоДействующаяАкция;
	
	Если НЕ ЗначениеЗаполнено(АкцияРазнообразноеПитание) Тогда Возврат; КонецЕсли;
	//---АК SHEP 2018.05.23
	
	ОперацияАпдекс1 = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Отчеты по картам покупателей. Отчет статистика по товарам");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс1);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "select c.sku
					|       , c.sku_mark
					|		, cast(c.date_add as datetime) date_add
					|		, c.is_active
					|from [srv-sql03].telegram.dbo.BOT_Action_50_SKU as c with(nolock)
					|where number = " + ВнешниеДанные.ФорматПоля(Email);
	//+++АК SHEP 2018.05.24 ИП-00018731
	СтрокаЗапроса = СтрокаЗапроса + "
					|	AND year_month = " + ВнешниеДанные.ФорматПоля(АкцияРазнообразноеПитание);
	//---АК SHEP 2018.05.24
	
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	//Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
	//	rs=rs.NextRecordSet();
	//КонецЦикла;
	
	ТабВрем = Новый ТаблицаЗначений();
	ТабВрем.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
	ТабВрем.Колонки.Добавить("ЕстьОценка", Новый ОписаниеТипов("Булево"));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СписокТоваров = rs.Fields("sku").Value;
			Если ЗначениеЗаполнено(СписокТоваров) Тогда
				СписокТоваров = СтрЗаменить(СписокТоваров, ",", Символы.ПС);
				Для н = 1 По СтрЧислоСтрок(СписокТоваров) Цикл
					СтрокаДоб = ТабВрем.Добавить();
					СтрокаДоб.Ид = Число(СтрПолучитьСтроку(СписокТоваров, н));
				КонецЦикла;
			КонецЕсли;	
			
			СписокОценки = rs.Fields("sku_mark").Value;
			Если ЗначениеЗаполнено(СписокОценки) Тогда
				СписокОценки = СтрЗаменить(СписокОценки, ",", Символы.ПС);
				Для н = 1 По СтрЧислоСтрок(СписокОценки) Цикл
					ИдВрем = Число(СтрПолучитьСтроку(СписокОценки, н));
					СтрокаДоб = ТабВрем.Найти(ИдВрем, "ИД");
					Если СтрокаДоб <> Неопределено Тогда
						СтрокаДоб.ЕстьОценка = Истина;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
			
			ДатаВрем = rs.Fields("date_add").Value;
			Если rs.Fields("is_active").Value = 0 Тогда
				//+++АК SHEP 2018.05.23 ИП-00018731: выводим только дату
				//СтатусВАкции = "Отказался  " + Формат(ДатаВрем, "ДФ='dd.MM.yyyy HH:mm'");
				СтатусВАкции = "Отказался " + Формат(ДатаВрем, "ДФ='dd.MM.yyyy'");
				//---АК SHEP 2018.05.23
			ИначеЕсли rs.Fields("is_active").Value = 1 Тогда
				//+++АК SHEP 2018.05.23 ИП-00018731: выводим только дату
				//СтатусВАкции = "Согласился  " + Формат(ДатаВрем, "ДФ='dd.MM.yyyy HH:mm'");
				СтатусВАкции = "Согласился " + Формат(ДатаВрем, "ДФ='dd.MM.yyyy'");
				//---АК SHEP 2018.05.23
			КонецЕсли;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
	СтрокаЗапроса = "DECLARE @discount varchar(10)
					|EXEC [srv-sql03].[Telegram].[dbo].[Get_Card_Discount]
					|@number = " + ВнешниеДанные.ФорматПоля(Email) + ",
					|@date = " + ВнешниеДанные.ФорматПоля(ТекущаяДата(), Истина) + ",
					|@discount = @discount OUTPUT
					//+++АК SHEP 2018.05.23 ИП-00018731
					|,@year_month = " + ВнешниеДанные.ФорматПоля(АкцияРазнообразноеПитание) + "
					|
					//---АК SHEP 2018.05.23
					|SELECT @discount as discount";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			ТекущаяСкидка = rs.Fields("discount").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СтрокаЗапроса = "DECLARE @discount_Next_month varchar(100)
					|EXEC [srv-sql03].[Telegram].[dbo].[Get_Card_Discount_next_month]
					|@number = " + ВнешниеДанные.ФорматПоля(Email) + ",
					|@discount_Next_month = @discount_Next_month OUTPUT
					//+++АК SHEP 2018.05.23 ИП-00018731
					|,@year_month = " + ВнешниеДанные.ФорматПоля(АкцияРазнообразноеПитание) + "
					//---АК SHEP 2018.05.23
					|
					|SELECT @discount_Next_month as discount";

	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СкидкаСледующийМесяц = rs.Fields("discount").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабВрем);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ИД,
	               |	Таб.ЕстьОценка
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ЕстьОценка,
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_Данные.ИД = Номенклатура.id_tov
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Наименование";
	
	СтатистикаПоТоварам.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ВсегоТоваров = СтатистикаПоТоварам.Количество();
	ВсегоОценено = СтатистикаПоТоварам.НайтиСтроки(Новый Структура("ЕстьОценка", Истина)).Количество();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс1, Email, СтрокаЗапроса);
	
КонецПроцедуры

//+++АК SHEP 2018.05.23 ИП-00018731
&НаКлиенте
Процедура АкцияРазнообразноеПитаниеПриИзменении(Элемент)
	ОбновитьСтатистикаПоТоварам();
КонецПроцедуры

Процедура НачислитьСкидкуРазнообразноеПитаниеИПеречитатьДанные(ПараметрыСкидки)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "DECLARE @message varchar(1000)
					|EXEC [srv-sql03].[Telegram].[dbo].[Discount_present]
					|@number = " + ВнешниеДанные.ФорматПоля(Email) + ", --номер карты
					|@date = " + ВнешниеДанные.ФорматПоля(ПараметрыСкидки.МесяцНачисления, Истина) + ", -- любая дата в том месяце за который хотим начислить скидку
					|@discount = " + ВнешниеДанные.ФорматПоля(ПараметрыСкидки.Процент) + ", -- размер скидки, можно не указывать, рассчитывается автоматически
					|@message = @message OUTPUT, -- сообщение для вывода пользователю
					|@user_add = " + ВнешниеДанные.ФорматПоля(СокрЛП(ПараметрыСеанса.ТекущийПользователь)) + ",
					|@descr = " + ВнешниеДанные.ФорматПоля(ПараметрыСкидки.Комментарий) + "
					|SELECT @message as message";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СообщениеПроцедуры = rs.Fields("message").Value;
			Сообщить(СообщениеПроцедуры);
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ОбновитьСтатистикаПоТоварам();
	
КонецПроцедуры	

&НаКлиенте
Процедура НачислитьСкидку_РазнообразноеПитание(Команда)
	
	ПараметрыСкидки = ОткрытьФормуМодально("Обработка.ОтчетыПоКартам.Форма.ФормаВводаСкидки",, ЭтаФорма);
	Если ПараметрыСкидки <> Неопределено Тогда
		НачислитьСкидкуРазнообразноеПитаниеИПеречитатьДанные(ПараметрыСкидки);
	КонецЕсли;	
	
КонецПроцедуры
//---АК MIND 

//+++АК MIND 2018.01.22 перенес заполнение обращений покупателя сразу с открытия на отдельную закладку
Процедура ОбновитьОбращенияПокупателей()
	
	// ЗвонкиПокупателяВсе *********************************
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбращенияПокупателей.ДатаДок КАК Date_Call,
	|	ОбращенияПокупателей.ИсточникОбращения КАК Комм1,
	|	ОбращенияПокупателей.Примечание КАК Комм2,
	|	NULL КАК ТипСвязи,
	|	ОбращенияПокупателей.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.Номер_Карты_ОК = &НомерКарты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбращенияКПокупателям.ДатаДобавления,
	|	ОбращенияКПокупателям.ГлавныйОтвет,
	|	ОбращенияКПокупателям.Комментарий,
	|	ОбращенияКПокупателям.ТипСвязи,
	|	NULL
	|ИЗ
	|	РегистрСведений.ОбращенияКПокупателям КАК ОбращенияКПокупателям
	|ГДЕ
	|	ОбращенияКПокупателям.НомерКарты_3p = &НомерКарты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Date_Call УБЫВ";
	
	Запрос.УстановитьПараметр("НомерКарты", Email);
	
	Объект.ЗвонкиПокупателяВсе.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	
//---АК MIND 

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ВсеSMS Тогда
		Если Объект.ТЗ_СМС_ВсеПоКлиенту.Количество() = 0 Тогда
			ОбновитьСМС();
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаАрхивныеОперацииПоЛП Тогда
		ОбновитьАрхивныеОперацииПоЛП();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаКупоныКлиента Тогда
		ОбновитьКупоныКлиентов();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЯВМагазине Тогда
		ОбновитьИсторияЯВМагазине();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтатистикаПоТоварам Тогда
		ОбновитьСтатистикаПоТоварам();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаОбращенияПокупателя Тогда
		ОбновитьОбращенияПокупателей();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНГ Тогда
		ОбновитьНГ();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоРучнымНачислениямБаллов(Команда)
	
	Табл = ОтчетПоРучнымНачислениямБалловНаСервере(Email);
	Табл.Показать("История ручных начислений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетПоРучнымНачислениямБалловНаСервере(НомерКарты)
	
	Возврат Обработки.ОтчетыПоКартам.ОтчетПоРучнымНачислениямБалловНаСервере(НомерКарты);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЯВМагазине(Команда)
	
	ОбновитьИсторияЯВМагазине();
	
КонецПроцедуры

//+++АК SHEP 20170725 ИП-00016217
&НаСервереБезКонтекста
Функция ПолучитьМагазинПоНомеру(НомерТочки)
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", НомерТочки);
КонецФункции

&НаКлиенте
Процедура СоздатьОбращение(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ДатаДок,Номер_Карты_ОК,ФИО_Покупателя,Телефон", ТекущаяДата(), Email, СокрЛП(Фамилия + " " + Имя + " " + Отчество), Phone);
	Если Объект.ФинОпераци.Количество() > 0 Тогда
		ЗначенияЗаполнения.Вставить("ДатаСобытия", Объект.ФинОпераци[0].DateTimeStamp);
		Попытка
			ЗначенияЗаполнения.Вставить("СтруктурнаяЕдиница", ПолучитьМагазинПоНомеру(Число(СтрЗаменить(Объект.ФинОпераци[0].ShopNo, Символы.НПП, ""))));
		Исключение КонецПопытки;
	КонецЕсли;
	ПараметрыФормыЗаписи = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.ФормаЗаписи", ПараметрыФормыЗаписи,, Email);
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьПриглашениеНаСервере()
	
	Если ЗначениеЗаполнено(ТокенМП) Тогда
			
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса =
		"EXEC [srv-sql03].[Loyalty].[dbo].[Message_Send_by_Number]
		|@number = '" + Email + "'
		|,@T_Message = 'Акция «Разнообразное питание» - Пробуйте новые продукты, оценивайте их и получите персональную скидку!'
		|,@T_keyboard_id = 84
		|,@T_keyboard_parameter = ''
		|,@MP_Heading_message = 'Акция «Разнообразное питание»'
		|,@MP_Message = 'Пробуйте новые продукты, оценивайте их и получите персональную скидку!'
		|,@MP_Type_message = 6
		|,@MP_Data_message = ''
		|,@Type_message = 2";
						
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		Сообщить("Приглашение отправлено в мобильное приложение");
		ADOСоединение.Close();
		
	ИначеЕсли ЗначениеЗаполнено(АйдиТелеграм) Тогда
	
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		СтрокаЗапроса = "DECLARE @return_value int,
						|  @message varchar(500)
						|
						|EXEC @return_value = [srv-sql03].[telegram].[dbo].[BOT_Send_Action_Invitation]
						|  @number = " + ВнешниеДанные.ФорматПоля(Email) + "
						|  ,@message = @message OUTPUT
						|
						|SELECT @message as mes";
						
		rs = ADOСоединение.Execute(СтрокаЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();	
			Пока НЕ rs.EOF() Цикл
				Сообщить(rs.Fields("mes").Value);
				rs.MoveNext();
			КонецЦикла;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		ADOСоединение.Close();
		
	Иначе
		
		Сообщить("Отправлять некуда");
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	ОтправитьПриглашениеНаСервере();
КонецПроцедуры
//---АК SHEP 20170725

//+++ АК rakp@automacon.ru, 17.11.2017 16:45:23,  ИП-00017249
&НаКлиенте
Процедура СервисныеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТематическиеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АкцииПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	distribution_action = Истина;
	distribution_service = Истина;
	distribution_tema = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсе(Команда)
	distribution_action = Ложь;
	distribution_service = Ложь;
	distribution_tema = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

//--- АК rakp@automacon.ru

//+++АК MIND 2017.12.12 по заданию от Ольги добавляю необходимые команды

&НаСервере
Процедура ПересчитатьАкцию_РазнообразноеПитаниеНаСервере()
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "EXEC [srv-sql03].[Telegram].[dbo].[recalc_Action_50_SKU]
					|	@id_job = 10123,
					|   @number = " + ВнешниеДанные.ФорматПоля(Email) + "
					|";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	
	ADOСоединение.Close();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьАкцию_РазнообразноеПитание(Команда)
	
	ПересчитатьАкцию_РазнообразноеПитаниеНаСервере();
	ОбновитьСтатистикаПоТоварам();
	Сообщить("Пересчет выполнен");
	
КонецПроцедуры
//---АК MIND

&НаКлиенте
Процедура БезСМСПриИзменении(Элемент)
	
	//+++АК MIND 2018.01.22 для дальнейшей записи этого признака в базу
	Модифицированность = Истина;
	
КонецПроцедуры

//+++АК MIND 2018.02.05 
&НаСервере
Процедура ИзменитьСкидкуНаСледующийМесяцНаСервере(ПараметрыСкидки)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаЗапроса = "DECLARE @message varchar(1000)
					|declare @telegramm_id int
					//+++АК SHEP 2018.05.08 ИП-00018563
					//|SELECT @telegramm_id = Cust.telegram_id FROM Loyalty.dbo.Customer (nolock) as Cust WHERE Cust.Email = " + ВнешниеДанные.ФорматПоля(Email) + "
					|SELECT @telegramm_id = Cust.telegram_id FROM Loyalty.dbo.Customer (nolock) as Cust WHERE Cust.bc_number = " + ВнешниеДанные.ФорматПоля(Email) + "
					//---АК SHEP 2018.05.08
					|EXEC [srv-sql03].[Telegram].[dbo].[BOT_Action_Change_disc]
					|@number = " + ВнешниеДанные.ФорматПоля(Email) + ",
					|@id_telegram = @telegramm_id,
					|@New_discount = " + ВнешниеДанные.ФорматПоля(ПараметрыСкидки.Процент) + ",
					|@message = @message OUTPUT,
					|@user_1C = " + ВнешниеДанные.ФорматПоля(СокрЛП(ПараметрыСеанса.ТекущийПользователь)) + ",
					|@descr = " + ВнешниеДанные.ФорматПоля(ПараметрыСкидки.Комментарий) + "
					|SELECT @message as message";
					
	rs = ADOСоединение.Execute(СтрокаЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СообщениеПроцедуры = rs.Fields("message").Value;
			Сообщить(СообщениеПроцедуры);
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ОбновитьСтатистикаПоТоварам();
	
КонецПроцедуры

//+++АК MIND 2018.02.05 
&НаКлиенте
Процедура ИзменитьСкидкуНаСледующийМесяц(Команда)
	
	ПараметрыСкидки = ОткрытьФормуМодально("Обработка.ОтчетыПоКартам.Форма.ФормаИзмененияСкидки",, ЭтаФорма);
	Если ПараметрыСкидки <> Неопределено Тогда
		ИзменитьСкидкуНаСледующийМесяцНаСервере(ПараметрыСкидки);
	КонецЕсли;
	
КонецПроцедуры

//+++АК GOLV 2018.05.28 ИП-00018418  
Функция РазобратьДанныеКлавиатурыНГ(Знач ДанныеКлавиатуры, НомерКлавиатуры) Экспорт
	
	МногострочнаяСтрока = СтрЗаменить(ДанныеКлавиатуры, "|",Символы.ПС);
	ЧислоСтрок = СтрЧислоСтрок(МногострочнаяСтрока);
	Товары = Новый Массив;
	Если НомерКлавиатуры = 66 Тогда
		КодТовара = Число(СтрПолучитьСтроку(МногострочнаяСтрока, 1));
		Товары.Добавить(КодТовара);					
	Иначе		
		КолТоваров = ЦЕЛ(ЧислоСтрок/3);		
		Если ЧислоСтрок < 4 ИЛИ НЕ ЧислоСтрок = КолТоваров*3+1 Тогда
			Возврат Новый Структура("Товары, Срок", Новый ТаблицаЗначений, Дата(1, 1, 1));
		КонецЕсли;	
		Для сч = 0 По КолТоваров - 1 Цикл
			КодТовара = Число(СтрПолучитьСтроку(МногострочнаяСтрока,сч*3+1));
			Товары.Добавить(КодТовара);
		КонецЦикла;		
	КонецЕсли;
	Срок = Дата(СтрПолучитьСтроку(МногострочнаяСтрока, ЧислоСтрок));
	
	Возврат Новый Структура("Товары, Срок", Товары, Срок);
	
КонецФункции

Процедура ОбновитьНГ()
	
	ТекстЗапроса = 
	"DECLARE @tid bigint
	|SET @tid = (SELECT [telegram_id]
	|FROM [vv03].[dbo].[Cards]
	|WHERE number = " + ВнешниеДанные.ФорматПоля(Email) + ")
	|SELECT
	|[keyboard_id]
	|,[keyboard_parameter]
	|,[add_date]
	|FROM [Telegram].[dbo].[outbox_telegram] (nolock)
	|WHERE user_id = @tid
	|AND (keyboard_id = 66 OR keyboard_id = 116)
	|AND message_type is NULL";
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Loyalty");
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезультатЗапросаВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	ПНГ = Новый ТаблицаЗначений;
	ПНГ.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Число"));
	ПНГ.Колонки.Добавить("ДатаСообщения", Новый ОписаниеТипов("Дата"));
	ПНГ.Колонки.Добавить("СрокДействия", Новый ОписаниеТипов("Дата"));
	
	Для каждого Стр ИЗ ТЗ Цикл
		ДанныеНГ = РазобратьДанныеКлавиатурыНГ(Стр.keyboard_parameter, Стр.keyboard_id);
		Для каждого Товар Из ДанныеНГ.Товары Цикл
			НоваяСтрока = ПНГ.Добавить();
			НоваяСтрока.КодТовара = Товар;
			НоваяСтрока.ДатаСообщения = Стр.add_date;
			НоваяСтрока.СрокДействия = ДанныеНГ.Срок;
		КонецЦикла; 
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПНГ.КодТовара,
	|	ПНГ.ДатаСообщения,
	|	ПНГ.СрокДействия
	|ПОМЕСТИТЬ СНГ
	|ИЗ
	|	&ПНГ КАК ПНГ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СНГ.КодТовара,
	|	СНГ.ДатаСообщения,
	|	СНГ.СрокДействия,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Товар
	|ПОМЕСТИТЬ ТаблицаСтоварами
	|ИЗ
	|	СНГ КАК СНГ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СНГ.КодТовара = Номенклатура.id_tov
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтоварами.Товар,
	|	ТаблицаСтоварами.ДатаСообщения,
	|	ТаблицаСтоварами.СрокДействия,
	|	ЕСТЬNULL(ОтзывНГ.Ссылка, ЗНАЧЕНИЕ(Документ.ОтзывНГ.ПустаяСсылка)) КАК Отзыв
	|ПОМЕСТИТЬ ПредложенияСОтзывами
	|ИЗ
	|	ТаблицаСтоварами КАК ТаблицаСтоварами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывНГ КАК ОтзывНГ
	|		ПО ТаблицаСтоварами.Товар = ОтзывНГ.ТоварНГ
	|			И (ОтзывНГ.НомерКарты = &НомерКарты)
	|			И (ОтзывНГ.ДатаОтзыва <= ТаблицаСтоварами.СрокДействия)
	|			И (ОтзывНГ.ДатаОтзыва > ТаблицаСтоварами.ДатаСообщения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтзывНГ.Ссылка
	|ПОМЕСТИТЬ ВсеОтзывы
	|ИЗ
	|	Документ.ОтзывНГ КАК ОтзывНГ
	|ГДЕ
	|	ОтзывНГ.НомерКарты = &НомерКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредложенияСОтзывами.Товар,
	|	ПредложенияСОтзывами.ДатаСообщения,
	|	ПредложенияСОтзывами.СрокДействия,
	|	ПредложенияСОтзывами.Отзыв
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ПредложенияСОтзывами КАК ПредложенияСОтзывами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОтзывы.Ссылка.ТоварНГ,
	|	ВсеОтзывы.Ссылка.ДатаОтзыва,
	|	ВсеОтзывы.Ссылка.ДатаОтзыва,
	|	ВсеОтзывы.Ссылка
	|ИЗ
	|	ВсеОтзывы КАК ВсеОтзывы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредложенияСОтзывами КАК ПредложенияСОтзывами
	|		ПО ВсеОтзывы.Ссылка = ПредложенияСОтзывами.Отзыв
	|ГДЕ
	|	ПредложенияСОтзывами.Отзыв ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Товар,
	|	ИтоговаяТаблица.ДатаСообщения КАК ДатаСообщения,
	|	ИтоговаяТаблица.СрокДействия,
	|	ИтоговаяТаблица.Отзыв
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСообщения");
	Запрос.УстановитьПараметр("ПНГ", ПНГ);
	Запрос.УстановитьПараметр("НомерКарты", Email);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ПредложенияНГ.Загрузить(ТЗ);
	
КонецПроцедуры	
//---АК golv

//+++АК ILIK 2018.07.11 ИП-00019030
&НаКлиенте
Процедура НомерПартнерскойКартыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

//+++АК ILIK 2018.07.11 ИП-00019030
&НаКлиенте
Процедура ТипПартнерскойКартыПриИзменении(Элемент)
	Модифицированность = Истина;
	
	ТипПартнерскойКартыПриИзмененииСервер();
КонецПроцедуры

//+++АК ILIK 2018.07.11 ИП-00019030
&НаСервере
Процедура ТипПартнерскойКартыПриИзмененииСервер()
	
	//+++АК SHEP 2018.07.27 ИП-00019030.01
	Элементы.УдалитьПартнёрскуюКарту.Доступность = (ЗначениеЗаполнено(ТипПартнерскойКарты)
		И ПолныеПрава.ПолучитьПравоПользователяУпр(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.МожетРедактироватьТипыПартнерскихБонусныхКарт"), Ложь));
	//---АК SHEP 2018.07.27
	
	Если ЗначениеЗаполнено(ТипПартнерскойКарты) И ЗначениеЗаполнено(ТипПартнерскойКарты.КоличествоСимволовВНомере) Тогда
		НомерПартнерскойКарты = Лев(НомерПартнерскойКарты, ТипПартнерскойКарты.КоличествоСимволовВНомере);
		
		Для й = 1 По ТипПартнерскойКарты.КоличествоСимволовВНомере Цикл
			Маска = Строка(Маска) + "9";
		КонецЦикла;
	Иначе
		Маска = "";
	КонецЕсли;
	Элементы.НомерПартнерскойКарты.Маска = Маска;
КонецПроцедуры

//+++АК SHEP 2018.07.27 ИП-00019030.01
&НаКлиенте
Процедура ПартнерскаяКартаДействуетДоПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

//+++АК SHEP 2018.07.27 ИП-00019030.01
&НаКлиенте
Процедура УдалитьПартнёрскуюКарту(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("УдалитьПартнёрскуюКартуЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОповещениеЗавершения, "Удалить партнёрскую карту?", РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

//+++АК SHEP 2018.07.27 ИП-00019030.01
&НаКлиенте
Процедура УдалитьПартнёрскуюКартуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Если УдалитьПартнёрскуюКартуНаСервере(Email) Тогда
		ПоказатьПредупреждение(, "Партнёрская карта успешно удалена!");
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.07.27 ИП-00019030.01
&НаСервере
Функция УдалитьПартнёрскуюКартуНаСервере(НомерКарты)
	
	ТекстЗапросаSQL = "
		|DELETE
		|FROM Loyalty.dbo.Customer_Other_Card
		|	
		|WHERE
		|	Number = '" + НомерКарты + "'";
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Попытка
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		ТипПартнерскойКарты = "";
		ТипПартнерскойКартыСтарый = ТипПартнерскойКарты;
		НомерПартнерскойКарты = "";
		НомерПартнерскойКартыСтарый = НомерПартнерскойКарты;
		ПартнерскаяКартаДействуетДо = "";
		ПартнерскаяКартаДействуетДоСтарая = ПартнерскаяКартаДействуетДо;
		ТипПартнерскойКартыПриИзмененииСервер();
		Успешно = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Успешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();
	Возврат Успешно;
	
КонецФункции

//+++АК CISA 2018.09.20 ИП-00019777 
&НаКлиенте
Процедура ПоказатьБольшеСообщений(Команда)
	
	ОтобратьСообщенияНаСервере(500);
	
КонецПроцедуры

//+++АК CISA 2018.09.20 ИП-00019777 
&НаКлиенте
Процедура ОтборСообщенийПоКаналуПриИзменении(Элемент)
	
	// +++ GOLV ИП-00020298
	ОбновитьСМС();
	//ОтобратьСообщенияНаСервере(100);
	// +++ golv
		
КонецПроцедуры

//+++АК CISA 2018.09.20 ИП-00019777 
&НаСервере
Процедура ОтобратьСообщенияНаСервере(Колво)
	Если Колво = 100 Тогда
		Объект.ТЗ_СМС_ВсеПоКлиенту.Очистить();
	КонецЕсли;	
		
	Если ОтборСообщенийПоКаналу = 3 Тогда //Все
		ТЗ = ВсеСообщенияПоКлиенту.Выгрузить();
	Иначе
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Канал", ОтборСообщенийПоКаналу);
		ТЗ = ВсеСообщенияПоКлиенту.Выгрузить(ПараметрыОтбора);
	КонецЕсли;
	
	ЕстьКолво = Объект.ТЗ_СМС_ВсеПоКлиенту.Количество();
	ДобавитьКолво = Мин(ТЗ.Количество() - ЕстьКолво, Колво);
	БудетКолво = ЕстьКолво + ДобавитьКолво;
	Пока ЕстьКолво < БудетКолво Цикл
		НоваяСтрока = Объект.ТЗ_СМС_ВсеПоКлиенту.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЗ[ЕстьКолво]);
		ЕстьКолво = ЕстьКолво + 1;
	КонецЦикла;
	
	Если ЕстьКолво > 0 И ДобавитьКолво = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сейчас показаны все сообщения!";
		Сообщение.Сообщить();	
	КонецЕсли;
КонецПроцедуры

// +++ golv ИП-00020013      
&НаКлиенте
Процедура АрхивСообщенийПриИзменении(Элемент)
	ОбновитьСМС();
	//ОтобратьСообщенияНаСервере(?(АрхивСообщений, 500, 100));
КонецПроцедуры
// --- golv

//+++AK GOLV ИП-00020444  
&НаСервере
Процедура ТоварОтборПриИзмененииНаСервере()
	ЗаполнитьФинОперации();	
КонецПроцедуры


&НаКлиенте
Процедура ТоварОтборПриИзменении(Элемент)
	ТоварОтборПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТоварОтборАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
    Если Ожидание <> 0 И СтрДлина(Текст)>2 Тогда    
        СтандартнаяОбработка = Ложь;
        МассивВыбора = ПолучитьСписокВыбораТоваров(Текст);
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Текст);
		Для каждого эл Из МассивВыбора Цикл
			ДанныеВыбора.Добавить(эл);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТоваров(Текст)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Наименование ПОДОБНО &Паттерн
	|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	|	И НЕ Номенклатура.Родитель В (&Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить(Справочники.Номенклатура.НайтиПоКоду("000000398"));
	СписокИсключений.Добавить(Справочники.Номенклатура.НайтиПоКоду("000628163"));
	СписокИсключений.Добавить(Справочники.Номенклатура.НайтиПоКоду("000000399"));
	
	Запрос.УстановитьПараметр("Исключения", СписокИсключений);
	Запрос.УстановитьПараметр("Паттерн", "%" + Текст + "%");
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	
КонецФункции

// --- GOLV