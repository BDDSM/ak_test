

// Выполянет запрос и резульатат запроса возвращает в таблицу значений
//
&НаСервере
Процедура База_ВыполнитьЗапросИЗаполнитьТаблицуЗначений(ТекстЗапроса, допПараметры = Неопределено)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры);
	тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
 //   Для каждого ТекСтрока Из тзРезультат Цикл
 //
 //		ТекСтрока.Дата = Дата(ТекСтрока.Дата);
 //
 //   КонецЦикла;	
 //   тзРезультат.Сортировать("Дата Убыв");
 //   
 //   Объект.ТЗ_СМС_ВсеПоКлиенту.Загрузить(тзРезультат);
 
 
 
КонецПроцедуры

&НаСервере
Процедура База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения)  
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры, СтрокаПодключения);
	//тзРезультат = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	Попытка
		RecordSet.Close();
	Исключение
	КонецПопытки;
		
КонецПроцедуры


&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса, допПараметры = Неопределено, СтрокаПодключения = "")  
	Попытка
		Command = Новый COMОбъект("ADODB.Command");
		
		Если ТипЗнч(допПараметры) = Тип("Структура") тогда
			ЗаполнитьЗначенияСвойств(Command, допПараметры);
		КонецЕсли;			
		CurrentConnection = База_Подключение(СтрокаПодключения);
		Command.ActiveConnection = CurrentConnection;
		Command.CommandTimeout = 0;
		Command.CommandText = ТекстЗапроса;
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки() + " Текст запроса: " + ТекстЗапроса;
	КонецПопытки;	
КонецФункции

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		Catalog = Новый COMОбъект("ADOX.Catalog");			
		
		Catalog.ActiveConnection = СтрокаПодключения;
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// На основе результата запроса (База_ВыполнитьЗапрос) создаем таблицу значений!!
&НаСервере
Функция База_РезульататЗапросВТаблицуЗначений(RecordSet) 
	
	тз = Новый ТаблицаЗначений;
	Если ТипЗнч(RecordSet) <> Тип("COMОбъект") тогда
		Возврат тз;
	КонецЕсли;
	
	// Инициализируем колонки
	Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
		NameFiled = RecordSet.Fields.Item(НомерКолонки).Name;
		NameFiled = СтрЗаменить(NameFiled,"$","_");
		тз.Колонки.Добавить(NameFiled,,RecordSet.Fields.Item(НомерКолонки).Name, 15);
	КонецЦикла;
	
	// Перебор данных
	Если НЕ RecordSet.EOF() Тогда
		RecordSet.MoveFirst();                 
		Пока RecordSet.EOF() = 0 Цикл
			СтрокаТаблицыЗначений = тз.Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext();  
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

// Закрываем датасет возвращаемй База_ВыполнитьЗапрос();
//
&НаСервере
Процедура База_ЗакрытьЗапрос(RecordSet) 
	Если ТипЗнч(RecordSet) = Тип("COMОбъект") тогда
		RecordSet.Close();
	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьНовогоПокупателя(Команда)
	
	Если СокрЛП(НомерКарты) = "" Тогда
		Предупреждение("Не указан номер карты!");
		Возврат;
	КонецЕсли;
	
	лкНомерКарты = ДобавитьНовогоПокупателяНаСервере();
	
	Если лкНомерКарты = "" Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("Email", лкНомерКарты);
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.КарточкаКлиента", СтруктураПараметровФормы);
	
КонецПроцедуры

&НаСервере
Функция  ДобавитьНовогоПокупателяНаСервере()
	
	Если СтрДлина(НомерКарты) <> 7 Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Проверьте номер карты. Должно быть 7 цифр");
		Возврат "";
	КонецЕсли;
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Отчеты по картам покупателей. Добавление нового покупателя");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	ПакетЗапросов = "";
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	//ТекстЗапроса = "Select Top 1 D.CustomerUID , c.Фамилия , d2.Number ВтораяКарта
	//|from [Loyalty].[dbo].DiscountCard (nolock) d
	//|left join [Loyalty].[dbo].Customer (nolock) c on d.CustomerUID=c.CustomerUID
	//|inner join [Loyalty].[dbo].Account (nolock) a on a.AccountUID=d.AccountUID
	//|left join [Loyalty].[dbo].DiscountCard (nolock) d2 on d2.AccountUID=a.AccountUID and d2.DiscountCardUID<>d.DiscountCardUID
	//|where D.Number=/**BPar1**/'~~~~~'/**FPar**/;";
	ТекстЗапроса = "select d.Number
					 |from [Loyalty].[dbo].[DiscountCard] d 
					 |where d.Number = /**BPar1**/'~~~~~'/**FPar**/";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", НомерКарты);
	
	ПакетЗапросов = ПакетЗапросов + ТекстЗапроса;
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();
	
	Если ТЗ.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ТЗ[0].Number) Тогда
		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс,, ПакетЗапросов);
		
		ОбщегоНазначения.СообщитьИнформациюПользователю("Такая карта не заведена в систему");
		Возврат "";
		
	КонецЕсли;
	
	ТекстЗапроса = "insert into [Loyalty].[dbo].[Customer]
	|      ([CustomerUID]
	|      ,FullName
	|      ,[Address]
	|      ,Phone
	|      ,sex
	|      ,Birthday
	|      ,[Email]
	//+++АК SHEP 2018.05.08 ИП-00018563
	|      ,[bc_number]
	//---АК SHEP 2018.05.08
	|      ,IsEmployee
	|      ,[DateRegistration]
	|      ,[id_type_cust]
	|      ,IsSubscriber
	|      ,SecretCode
	|       )
	|select 
	| NEWID(),
	| '', '', '',
	| 1,
	| {d'2012-01-01'},
	| /**BPar1**/'~~~~~'/**FPar**/
	//+++АК SHEP 2018.05.08 ИП-00018563
	| , /**BPar1**/'~~~~~'/**FPar**/
	//---АК SHEP 2018.05.08
	| ,0  
	| ,GETDATE() 
	| ,2
	| ,0
	|,'01012012'
	| 
	| update [Loyalty].[dbo].[DiscountCard]
	| set [DiscountCard].CustomerUID=a.CustomerUID
	| --select [DiscountCard].*
	| from [Loyalty].[dbo].[DiscountCard]
	| inner join (select * from [Loyalty].[dbo].[Customer]
	//+++АК SHEP 2018.05.08 ИП-00018563
	//| where [Customer].Email=/**BPar1**/'~~~~~'/**FPar**/ ) a on 1=1
	| where [Customer].bc_number=/**BPar1**/'~~~~~'/**FPar**/ ) a on 1=1
	//---АК SHEP 2018.05.08
	|where [DiscountCard].Number=/**BPar1**/'~~~~~'/**FPar**/";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", НомерКарты);
	
	ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
	
	База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс,, ПакетЗапросов);
	
	Возврат НомерКарты;
	
	
КонецФункции


&НаКлиенте
Процедура ПолнаяИнформация(Команда)
	
	Если СокрЛП(НомерКарты) = "" Тогда
		Предупреждение("Не указан номер карты!");
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("Email", НомерКарты);	
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.КарточкаКлиента", СтруктураПараметровФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоБаллов(Команда)
	
	Если СокрЛП(НомерКарты) = "" Тогда
		Предупреждение("Не указан номер карты!");
		Возврат;
	КонецЕсли;
	
	Табл = ИтогоБалловНаСервере();
	Табл.Показать("Отчет по карте "+НомерКарты);
	
КонецПроцедуры

&НаСервере
Функция  ИтогоБалловНаСервере()
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Отчеты по картам покупателей. Итого баллов у покупателя");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	ПакетЗапросов = "";
	
	//+++АК SHEP 2018.07.04 ИП-00018827
	//ТекстЗапроса = "SELECT Карта,  Покупатель , ДеньРожд , Телефон, SUM(СуммаЧеков) СуммаЧека , SUM(Бонус) Бонус 
	//|from
	//|(SELECT  SUM(case when [TransactionType]=0 then -[BonusValue]
	//| when [TransactionType]=1 and [PromotionProgramUID] is not null then [BonusValue]
	//| when [TransactionType]=2 then [BonusValue] 
	//| else 0 end) as Бонус
	//|       ,TransactionHistory.ChequeUID
	//|       , СуммаЧеков= SUM(case when [TransactionType]=1  and [PromotionProgramUID] is null  then TransactionHistory.[BonusValue] else 0 end )
	//|       ,DiscountCard.Number AS Карта, 
	//|       Customer.FullName AS Покупатель, 
	//|       Customer.Birthday AS ДеньРожд, 
	//|       Customer.Phone AS Телефон
	//|       
	//|       from TransactionHistory (nolock)
	//|INNER JOIN DiscountCard  (nolock) ON TransactionHistory.DiscountCardUID = DiscountCard.DiscountCardUID
	//|LEFT JOIN Customer  (nolock) ON DiscountCard.CustomerUID = Customer.CustomerUID
	//|where DiscountCard.Number=/**BPar1**/~~~~~/**FPar**/
	//|       group by  ChequeUID, DiscountCard.Number
	//|       ,Customer.FullName,Customer.Birthday,Customer.Phone , TransactionType, [PromotionProgramUID]) as сумчек
	//|
	//|GROUP BY Карта, Покупатель , ДеньРожд , Телефон;";
	//
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",НомерКарты);
	
	ТекстЗапроса = "
		|EXEC Loyalty.[dbo].[FOR1C_Castomer_Sum_Date]
		|@BC_Number = " + ВнешниеДанные.ФорматПоля(НомерКарты);
	//---АК SHEP 2018.07.04
	
	ПакетЗапросов = ПакетЗапросов + Символы.ПС + ТекстЗапроса;
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	
	Табл=Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.АК_ПечатьТаблицЗначений);
	
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновной=Макет.ПолучитьОбласть("Шапка|Основной");
	ОбластьСтрокаОсновной=Макет.ПолучитьОбласть("Строка|Основной");
	ОбластьИтогОсновной=Макет.ПолучитьОбласть("Итог|Основной");
	ОбластьШапкаДОП=Макет.ПолучитьОбласть("Шапка|Показатели");
	ОбластьСтрокаДОП=Макет.ПолучитьОбласть("Строка|Показатели");
	ОбластьИтогДОП=Макет.ПолучитьОбласть("Итог|Показатели");
	
	
	ОбластьЗаголовок.Параметры.Заголовок = "Отчет по карте "+НомерКарты;
	Табл.Вывести(ОбластьЗаголовок);
	
	Табл.Вывести(ОбластьШапкаОсновной);
	
	Для Каждого Колонка из Тз.Колонки ЦИКЛ
		ОбластьШапкаДОП.Параметры.ИмяПоказателя=Колонка.Имя;
		Табл.Присоединить(ОбластьШапкаДОП);
	КонецЦикла;
	
	счетчик=0;
	Для каждого стр из Тз Цикл
		счетчик=счетчик+1;
		ОбластьСтрокаОсновной.Параметры.счетчик=счетчик; 
		Табл.Вывести(ОбластьСтрокаОсновной);
		Для Каждого Колонка из Тз.Колонки ЦИКЛ
			ОбластьСтрокаДОП.Параметры.ЗначениеКолонки=стр[Колонка.Имя];
			Табл.Присоединить(ОбластьСтрокаДОП);
		КонецЦикла;
	КонецЦикла;
	//Табл.Вывести(ОбластьИтогОсновной);
	
	//Для Каждого Колонка из Тз.Колонки ЦИКЛ
	//	ОбластьИтогДОП.Параметры.Итог=Тз.Итог(Колонка.Имя);
	//	Табл.Присоединить(ОбластьИтогДОП);
	//КонецЦикла;
	
	
	//Табл.Защита = Истина;
	//Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс,, ПакетЗапросов);
	
	Возврат Табл;
	
	
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаНачисленныхБаллов(Команда)
	
	Если СокрЛП(НомерКарты) = "" Тогда
		Предупреждение("Не указан номер карты!");
		Возврат;
	КонецЕсли;
	
	Табл = РасшифровкаНачисленныхБалловНаСервере();
	
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаРасшифровкаНачисленныхБаллов", Новый Структура("ТабДок", Табл));
	
КонецПроцедуры

&НаСервере
Функция  РасшифровкаНачисленныхБалловНаСервере()
	
	//+++АК SHEP 2018.07.04 ИП-00018827
	//ТекстЗапроса = "select * , case when ОстатокБонусов1=0 then ОстатокБонусов2 else ОстатокБонусов1 end ОстатокБонусов
	//|from (SELECT 
	//|   d.Number,
	//|   th.ChequeUID , 
	//|   max(case when (th.PromotionProgramUID is null and th.TransactionType=1) or th.TransactionType=2 then Time  else null end) Дата,
	//|   max(case when th.PromotionProgramUID is null and th.TransactionType=1 then ShopNo  else null end) Магазин,
	//|   max(case when th.PromotionProgramUID is null and th.TransactionType=1 then s.Name_TT  else null end) АдресМагазина,
	//|   isnull(convert(real,max(case when th.PromotionProgramUID is null and th.TransactionType=1 then th.ChequeAmount  else null end)),0) СуммаПокупки,
	//|   isnull(convert(real,sum(case when th.PromotionProgramUID is not null and th.TransactionType=1 then th.BonusValue  else null end)),0) Начислено,
	//|   isnull(convert(real,sum(case when th.TransactionType=0 then th.BonusValue  else null end)),0) Использовано,
	//|   isnull(convert(real,max(case when i.IndicatorType=0 and th.TransactionType<>0 then th.FinalBalance  else null end)),0) ОстатокБонусов1,
	//|   isnull(convert(real,min(case when i.IndicatorType=0 and th.TransactionType=0 then th.FinalBalance  else null end)),0) ОстатокБонусов2
	//|
	//|  FROM [Loyalty].[dbo].[TransactionHistory] (nolock) th
	//|  inner join [Loyalty].dbo.DiscountCard  (nolock) d on d.DiscountCardUID=th.DiscountCardUID
	//|  inner join [M2].dbo.tt  (nolock) s on th.ShopNo=s.N
	//|  left join (select * from [Loyalty].dbo.Indicator  (nolock) where IndicatorType=0 ) i on th.IndicatorUID=i.IndicatorUID
	//|  
	//|  inner join ( select d.AccountUID
	//|  from Loyalty..DiscountCard (nolock) d 
	//|  where d.Number=/**BPar1**/~~~~~/**FPar**/ ) acc on acc.AccountUID=th.AccountUID
	//|
	//|  group by th.ChequeUID, d.Number ) as a
	//|  order by дата desc;";

	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~",НомерКарты);
	
	ТекстЗапроса = "
		|EXEC [dbo].[FOR1C_BC_BonusHistoryDecryption] 
  		|	@BC_Number = " + ВнешниеДанные.ФорматПоля(НомерКарты);
	//---АК SHEP 2018.07.04
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	
	RecordSet = База_ВыполнитьЗапрос(ТекстЗапроса, , СтрокаПодключения);
	ТЗ = База_РезульататЗапросВТаблицуЗначений(RecordSet);
	RecordSet.Close();	
	
	//ТЗ.Колонки.Удалить("ChequeUID");
	//+++АК SHEP 2018.07.04 ИП-00018827
	//ТЗ.Колонки.Удалить("ОстатокБонусов1");
	//ТЗ.Колонки.Удалить("ОстатокБонусов2");
	//---АК SHEP 2018.07.04
	
	Табл=Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.АК_ПечатьТаблицЗначений);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновной=Макет.ПолучитьОбласть("Шапка|Основной");
	ОбластьСтрокаОсновной=Макет.ПолучитьОбласть("Строка|Основной");
	ОбластьИтогОсновной=Макет.ПолучитьОбласть("Итог|Основной");
	ОбластьШапкаДОП=Макет.ПолучитьОбласть("Шапка|Показатели");
	ОбластьСтрокаДОП=Макет.ПолучитьОбласть("Строка|Показатели");
	ОбластьИтогДОП=Макет.ПолучитьОбласть("Итог|Показатели");
	
	
	ОбластьЗаголовок.Параметры.Заголовок = "Расширенный отчет по карте "+НомерКарты;
	Табл.Вывести(ОбластьЗаголовок);
	
	Табл.Вывести(ОбластьШапкаОсновной);
	
	Для Каждого Колонка из Тз.Колонки ЦИКЛ
		Если НРег(Колонка.Имя) = "chequeuid" Тогда
			Продолжить;
		//+++АК SHEP 2018.07.04 ИП-00018827
		ИначеЕсли НРег(Колонка.Имя) = "checkuid" Тогда
			Продолжить;
		//---АК SHEP 2018.07.04
		КонецЕсли;
		ОбластьШапкаДОП.Параметры.ИмяПоказателя=Колонка.Имя;
		Табл.Присоединить(ОбластьШапкаДОП);
	КонецЦикла;
	
	счетчик=0;
	Для каждого стр из Тз Цикл
		счетчик=счетчик+1;
		ОбластьСтрокаОсновной.Параметры.счетчик=счетчик; 
		Табл.Вывести(ОбластьСтрокаОсновной);
		Для Каждого Колонка из Тз.Колонки ЦИКЛ
			Если НРег(Колонка.Имя) = "chequeuid" Тогда
				Продолжить;
			//+++АК SHEP 2018.07.04 ИП-00018827
			ИначеЕсли НРег(Колонка.Имя) = "checkuid" Тогда
				Продолжить;
			//---АК SHEP 2018.07.04
			КонецЕсли;	
			ОбластьСтрокаДОП.Параметры.ЗначениеКолонки=Формат(стр[Колонка.Имя],"ЧДЦ=2; ЧН=0,00; ЧГ=0");
			//+++АК SHEP 2018.07.04 ИП-00018827
			//ОбластьСтрокаДОП.Параметры.ЗначениеРасшифровки=стр.ChequeUID;
			ОбластьСтрокаДОП.Параметры.ЗначениеРасшифровки=стр.CheckUID;
			//---АК SHEP 2018.07.04
			Табл.Присоединить(ОбластьСтрокаДОП);
		КонецЦикла;
	КонецЦикла;
	//Табл.Вывести(ОбластьИтогОсновной);
	
	//Для Каждого Колонка из Тз.Колонки ЦИКЛ
	//	ОбластьИтогДОП.Параметры.Итог=Формат(Тз.Итог(Колонка.Имя),"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	//	Табл.Присоединить(ОбластьИтогДОП);
	//КонецЦикла;
	
	
	//Табл.Защита = Истина;
	//Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	Возврат Табл;
	
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	Если (НЕ ЗначениеЗаполнено(Фамилия)) И (НЕ ЗначениеЗаполнено(Телефон)) И (НЕ ЗначениеЗаполнено(email)) И (НЕ ЗначениеЗаполнено(ДатаРождения)) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Не заполнен отбор!");
		Возврат;
	КонецЕсли;
		
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Фамилия", Фамилия);
	СтруктураОтбора.Вставить("Телефон",  Телефон);
	СтруктураОтбора.Вставить("ДатаРождения", ДатаРождения);
	СтруктураОтбора.Вставить("email", email);
		
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаСпискаКлиентов", СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоПомощникУправляющего() Тогда
		
		Элементы.ДобавитьНовогоПокупателя.Доступность = Ложь;
		Элементы.Сумма.Доступность = Ложь;
		Элементы.НомерЧека.Доступность = Ложь;
		Элементы.ПричинаНачисления.Доступность = Ложь;
		Элементы.НачислитьБаллыНаКарту.Доступность = Ложь;	 
		 
	КонецЕсли;
	
	//ПриОткрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЭтоПомощникУправляющего()
	
	ЭтоПомощник = Ложь;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ФизЛицо
		|ПОМЕСТИТЬ ТЗ1
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейСоставРоли.Ссылка
		|ПОМЕСТИТЬ ТЗ_2
		|ИЗ
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник В
		|			(ВЫБРАТЬ
		|				ТЗ1.ФизЛицо
		|			ИЗ
		|				ТЗ1 КАК ТЗ1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Пометка,
		|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
		|	ТипыРолейПользователя.Наименование КАК Наименование,
		|	ТипыРолейПользователя.ПометкаУдаления
		|ПОМЕСТИТЬ ТЗ_3
		|ИЗ
		|	ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
		|		ПО ТипыРолейПользователя.Ссылка = РолиПользователейТипыРолей.ТипРоли
		|			И (РолиПользователейТипыРолей.Ссылка В
		|				(ВЫБРАТЬ
		|					ТЗ_2.Ссылка
		|				ИЗ
		|					ТЗ_2 КАК ТЗ_2))
		|ГДЕ
		|	(НЕ ТипыРолейПользователя.ПометкаУдаления
		|			ИЛИ НЕ РолиПользователейТипыРолей.Ссылка ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_3.Пометка,
		|	ТЗ_3.ТипРоли,
		|	ТЗ_3.Наименование,
		|	ТЗ_3.ПометкаУдаления
		|ИЗ
		|	ТЗ_3 КАК ТЗ_3
		|ГДЕ
		|	ТЗ_3.Пометка = ИСТИНА
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|	И ТЗ_3.ТипРоли = &ТипРоли";
		|	И (ТЗ_3.ТипРоли = &ТипРоли или ТЗ_3.ТипРоли = &ТипРолиСторонняяРозница)";
		//--- AK suvv

	Запрос.УстановитьПараметр("Ссылка", ТекПользователь);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Запрос.УстановитьПараметр("ТипРолиСторонняяРозница", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		ЭтоПомощник = Истина;
	КонецЕсли;	
	
	Возврат ЭтоПомощник;
		
КонецФункции

&НаСервере
Процедура ПриОткрытииНаСервере()
	ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.АкцияКупонНаКарту100руб;
КонецПроцедуры

&НаКлиенте
Процедура НачислитьБаллыНаКарту(Команда)
	
	Если ПричинаНачисления = ПредопределенноеЗначение("Перечисление.АК_ПричиныНачисленияБаллов.НачислитьПоЧеку") И СокрЛП(ЦельНачисления) = "" Тогда
		Предупреждение("Не указана цель начисления!");
		Возврат;
	КонецЕсли;	
	
	ТекстСообщ = НачислитьБаллыНаКартуНаСервере();	
	Сообщить(ТекстСообщ);
	
КонецПроцедуры

&НаСервере
Функция НачислитьБаллыНаКартуНаСервере()
	
	Если СтрДлина(НомерКарты) = 7 Тогда
		
		СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
		
		Если ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.АнкетаНаСайте50руб Тогда			
			показат_ = 1;
			a_d_ = 50;			
		ИначеЕсли ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.АкцияКупонНаКарту100руб Тогда 
			показат_ = 2;
			a_d_ = 100;
		ИначеЕсли ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.НачислитьПоЧеку ИЛИ ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.Доставка Тогда			
			Если СокрЛП(НомерЧека) = "" Тогда
				Возврат "Не указан номер чека. Начисление баллов не возможно!";
			КонецЕсли;	
			показат_ = НомерЧека;
			a_d_ = Формат(Сумма, "ЧРД=.; ЧГ=");
		Иначе
			показат_ = 0;
			a_d_ = 0;			
		КонецЕсли;
		
		лкТекДата = ТекущаяДата(); 
				
		// Бонус_add
		ТекстЗапроса = "INSERT INTO [dbo].[Card_new] ([card_nomer], [user_add], [time], [type_add], [amount], [descr]) VALUES (" + "'"+НомерКарты+"','"+ ПараметрыСеанса.ТекущийПользователь+"','"+ лкТекДата+"',"+показат_+","+ a_d_+",'"+СокрЛП(ЦельНачисления)+"') ;";
		
		База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
		
		//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40", "izbenka", "cjyzcjyz");
		//ADOСоединение.Execute(ТекстЗапроса);	
		//ADOСоединение.Close();
		
		
		ТекстЗапроса = "exec loyalty.dbo.add_Card_new_to_TH";
		//// Бонус_add_loyalty
		//ТекстЗапроса = "select
		//|NEWID() TransactionHistoryUID,
		//|2 TransactionType,
		//|Propert.[time]
		//|,0 ChequeAmount
		//|,Propert.DiscountCardUID
		//|,Propert.AccountUID
		//|,Ind.IndicatorUID
		//|,amount
		//|,0 FinalBalance
		//|,-1  IsCommited
		//|,-888 ShopNo
		//|,NEWID() ChequeUID
		//|,1 changed
		//|into #ch
		//|FROM ( Select DiscountCard.*, Card_new.amount, Card_new.[time] from (SELECT " + "'"+НомерКарты+"' [card_nomer], '"+ лкТекДата+"' [time], "+ a_d_+" [amount]) Card_new
		//|inner join DiscountCard
		//|on convert(int,DiscountCard.Number)=convert(int,Card_new.card_nomer)  ) Propert
		//|  INNER JOIN Account ON Propert.AccountUID = Account.AccountUID
		//|      INNER JOIN (Select * from Indicator where Indicatortype=0) Ind ON Account.AccountUID = Ind.AccountUID
		//|
		//|left join (
		//|  SELECT DiscountCardUID,1 as kk, [Time]  FROM TransactionHistory WHERE TransactionHistory.TransactionType=2) Начисл
		//|  on Propert.DiscountCardUID=Начисл.DiscountCardUID and Propert.[time]=Начисл.[time]
		//|where
		//| ISNULL(Начисл.kk,0)=0  
		//|
		//|insert into TransactionHistory (
		//|       [TransactionHistoryUID]
		//|      ,[TransactionType]
		//|      ,[Time]
		//|      ,[ChequeAmount]
		//|      ,[DiscountCardUID]
		//|      ,[AccountUID]
		//|      ,[IndicatorUID]
		//|      ,[BonusValue]
		//|      ,[FinalBalance]
		//|      ,[IsCommited]
		//|      ,shopno
		//|      ,[ChequeUID]
		//|      ,[changed] ) 
		//|select * from #ch
		//|      
		//|insert into [Loyalty].[dbo].[TransactionHistory]
		//|       ([TransactionHistoryUID] ,[TransactionType] ,[Time] ,[ChequeAmount] ,[DiscountCardUID]
		//|      ,[AccountUID] ,[IndicatorUID] ,[BonusValue] ,[FinalBalance] ,[PromotionProgramUID] ,[IsCommited]
		//|      ,[RegenerationUID] ,[ShopNo] ,[ChequeUID],[Changed])
		//| SELECT newid() ,1 ,th.[Time], th.[BonusValue] ,th.[DiscountCardUID]
		//|      ,th.[AccountUID] ,i.[IndicatorUID]  ,0 ,0 ,null ,th.[IsCommited],
		//|      th.[RegenerationUID]  ,th.[ShopNo] ,th.[ChequeUID],1
		//|  FROM  [Loyalty].[dbo].[TransactionHistory] (nolock) th
		//|  inner join [Loyalty].[dbo].Indicator i on i.AccountUID=th.AccountUID
		//|  inner join #ch on #ch.TransactionHistoryUID=th.TransactionHistoryUID
		//|  where i.IndicatorType=1
		//| drop table #ch;";

		База_ВыполнитьЗапросНеЗаполняяТЗ(ТекстЗапроса, Неопределено, СтрокаПодключения);
		
		//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40", "izbenka", "cjyzcjyz");
		//ADOСоединение.Execute(ТекстЗапроса);	
		//ADOСоединение.Close();
		
	Иначе
		Возврат "Номер карты должен содержать 7 цифр!";
	КонецЕсли;
	
	Возврат "Обработка завершена.";
	
КонецФункции

&НаКлиенте
Процедура ОтчетПоРучнымНачислениямБаллов(Команда)
	
	Табл = ОтчетПоРучнымНачислениямБалловНаСервере(НомерКарты);
	Табл.Показать("История ручных начислений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ОтчетПоРучнымНачислениямБалловНаСервере(НомерКарты)
	
	Возврат Обработки.ОтчетыПоКартам.ОтчетПоРучнымНачислениямБалловНаСервере(НомерКарты);
	
КонецФункции

&НаКлиенте
Процедура ГрупповоеНачислениеБонусов(Команда)
	
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаГрупповогоНачисленияБаллов");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПричинаНачисления = Перечисления.АК_ПричиныНачисленияБаллов.АкцияКупонНаКарту100руб;
	
	Если Параметры.Свойство("ПричинаНачисления") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "НомерКарты,ЦельНачисления,ПричинаНачисления");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачислитьБаллыПоЧеку(Команда)
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.НачислениеБалловПоЧеку");
КонецПроцедуры

//+++АК BARA 2018.03.21 ИП-00018183
&НаСервере
Функция ПоискКупонаНаСервере_BARA()

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();

	ЗапросТекст = 
	"select
	|	tc.name_coupon,
	|	cm.number_cert,
	|	cm.user_add,
	|	convert(date, cm.time_add) as data,
	|	cm.CashID,
	|	cm.CashCheckNo
	|from Loyalty..Coupon_move (nolock) cm
	|	left join Loyalty..Types_coupon (nolock) tc on tc.id_type_coupon = cm.id_type_coupon
	|
	|where cm.kolvo < 0 and cm.number_cert = %НомерСертификата";
	
	ЗапросТекст = 
	"select
	| 	tc.name_coupon,
	| 	cm.number_cert,
	| 	cm.user_add,
	//+++АК SHEP 2018.08.01 ИП-00018183.01
	//| 	convert(date, cm.time_add) as data,
	| 	cm.time_add as data,
	//---АК SHEP 2018.08.01
	|	isnull(cm.CashID,0) as CashID,
	|	isnull(cm.CashCheckNo,0) as CashCheckNo,
	|	isnull(mm.ShopNo,0) as ShopNo,
	|	cm.kolvo
	|from Loyalty..Coupon_move (nolock) cm
	|	left join Loyalty..Types_coupon (nolock) tc on tc.id_type_coupon = cm.id_type_coupon
	|	Left join  [SMS_REPL].[dbo].[CashIP] mm on
	|	mm.CashID = cm.CashID
	|	
	|where  cm.number_cert = %НомерСертификата";
	 
	ЗапросТекст = СтрЗаменить(ЗапросТекст,"%НомерСертификата",НомерКупона);

	rs = ADOСоединение.Execute(ЗапросТекст);	
	ВремРез0 = Новый ТаблицаЗначений;	
	ВремРез0 = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	
	Табл=Новый ТабличныйДокумент;
	Макет = Обработки.ОтчетыПоКартам.ПолучитьМакет("КупоныСертификаты");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");	
	ОбластьЗаголовок.Параметры.Заголовок = "Расширенный отчет по карте "+НомерКупона;
	Табл.Вывести(ОбластьЗаголовок);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//+++АК SHEP 2018.08.01 ИП-00018183
		//|	СтруктурныеЕдиницы.id_TT,
		|	СтруктурныеЕдиницы.НомерТочки,
		//---АК SHEP 2018.08.01
		|	СтруктурныеЕдиницы.Наименование
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		//+++АК SHEP 2018.08.01 ИП-00018183
		|ГДЕ
		|	СтруктурныеЕдиницы.НомерТочки <> 0
		//---АК SHEP 2018.08.01
		|";
	
	тзСтрЕд = Запрос.Выполнить().Выгрузить();
	

	Для каждого стр из ВремРез0 Цикл     
		ОбластьСтрокаОсновной = Макет.ПолучитьОбласть("Детали");

		ОбластьСтрокаОсновной.Параметры.name_coupon = Стр.name_coupon; 
		ОбластьСтрокаОсновной.Параметры.data = Стр.data; 
		ОбластьСтрокаОсновной.Параметры.number_cert = Стр.number_cert; 
		Если Стр.CashID <> 0 Тогда 
			ОбластьСтрокаОсновной.Параметры.CashID = Стр.CashID;
		КонецЕсли; 
		Если Стр.CashCheckNo <> 0 Тогда 
			ОбластьСтрокаОсновной.Параметры.CashCheckNo = Стр.CashCheckNo; 
		КонецЕсли; 	
		Если Стр.kolvo >0 тогда
			ОбластьСтрокаОсновной.Параметры.ТипНачисления = "Начисление"; 
		Иначе
			ОбластьСтрокаОсновной.Параметры.ТипНачисления = "Списание";
		КонецЕсли;
		Если  Стр.ShopNo <> 0 Тогда 
			//+++АК SHEP 2018.08.01 ИП-00018183
			//РезПоиска = тзСтрЕд.Найти(Стр.ShopNo,"id_TT");
			НомерТочки = Стр.ShopNo;
			ОбластьСтрокаОсновной.Параметры.НомерМагазина = НомерТочки; 
			РезПоиска = тзСтрЕд.Найти(НомерТочки, "НомерТочки");
			//---АК SHEP 2018.08.01
			Если РезПоиска <> Неопределено Тогда 
				ОбластьСтрокаОсновной.Параметры.Магазин = РезПоиска.Наименование; 
			КонецЕсли;
		КонецЕсли;
		Табл.Вывести(ОбластьСтрокаОсновной);
	КонецЦикла;
	
	Табл.ОтображатьСетку = Ложь;
	Табл.ОтображатьЗаголовки = Ложь;
	Возврат Табл;
	
КонецФункции

//+++АК SHEP 2018.08.30 ИП-00018183.02 
&НаСервере
Функция ПоискКупонаНаСервере()

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросТекст = "
		|select
		| 	tc.name_coupon,
		| 	cm.number_cert,
		| 	CASE WHEN cm.kolvo < 0 THEN ISNULL(cv.FIO, '<Информация в архиве>') ELSE cm.user_add END AS user_add,
		| 	cm.time_add as data,
		|	ISNULL(cm.CashID, 0) as CashID,
		|	ISNULL(cm.CashCheckNo, 0) as CashCheckNo,
		|	ISNULL(mm.ShopNo, 0) as ShopNo,
		|	ISNULL(tt.name_TT, '') AS Магазин,
		|	CASE WHEN cm.kolvo < 0 THEN 'Списание' ELSE 'Начисление' END AS ТипНачисления,
		|	cm.kolvo
		|from Loyalty..Coupon_move (nolock) cm
		|	left join Loyalty..Types_coupon (nolock) tc
		|		on tc.id_type_coupon = cm.id_type_coupon
		|	Left join  [SMS_REPL].[dbo].[CashIP] mm
		|		on mm.CashID = cm.CashID
		|	left join [SMS_REPL].[dbo].Checks ch (NOLOCK)
		|		ON cm.CashID = ch.CashID AND cm.CashCheckNo = ch.CashCheckNo
		|	left join [SMS_REPL].[dbo].Cashier_view cv (NOLOCK)
		|		ON ch.CashierID = cv.CodeFL
		|	left join M2..tt AS tt (NOLOCK)
		|		ON mm.ShopNo = tt.N
		|where
		|	cm.number_cert = " + ВнешниеДанные.ФорматПоля(НомерКупона) + "
		|
		|order by
		|	cm.time_add";
	
	rs = ADOСоединение.Execute(ЗапросТекст);	
	ВремРез0 = Новый ТаблицаЗначений;	
	ВремРез0 = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
	
	Табл = Новый ТабличныйДокумент;
	Макет = Обработки.ОтчетыПоКартам.ПолучитьМакет("КупоныСертификаты");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");	
	ОбластьЗаголовок.Параметры.Заголовок = "Отчёт по купону / сертификату " + НомерКупона;
	Табл.Вывести(ОбластьЗаголовок);
	
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Детали");
	Для каждого СтрокаТЗн из ВремРез0 Цикл
		ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, СтрокаТЗн);
		Табл.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	
	Табл.ОтображатьСетку = Ложь;
	Табл.ОтображатьЗаголовки = Ложь;
	Возврат Табл;
	
КонецФункции

//+++АК BARA 2018.03.21 ИП-00018183
&НаКлиенте
Процедура ПоискКупона(Команда)
	ТабДок = ПоискКупонаНаСервере();
	ТабДок.Показать()
КонецПроцедуры
