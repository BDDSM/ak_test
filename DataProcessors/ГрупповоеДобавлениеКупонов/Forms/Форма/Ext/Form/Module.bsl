///////////////////////////////////////////////////////////////
//

Процедура УстановитьОтборНеотправленныеСМС()
	
	ПараметрыЗапроса = ЭтаФорма.НеотправленныеСМС.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаДобавления", (ТекущаяДата() - ?(Объект.ОтправитьБезПроверкиВремени, 3600, 604800)));
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОтборНеотправленныеСМС();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
//

Процедура РасылкаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Расылка) Тогда
		
		Объект.ТекстСообщения = Объект.Расылка.ТекстСообщения;
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасылкаПриИзменении(Элемент)
	
	РасылкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьБезПроверкиВремениПриИзменении(Элемент)
	
	УстановитьОтборНеотправленныеСМС();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
//

Процедура ЗаполнитьТЧНаСервере_()
	
	Объект.СписокПокупателей.Очистить();
	
	СписокНомеровМагазинов = Новый СписокЗначений;
	
	Для каждого ТекСтр Из Объект.СписокМагазинов Цикл
	
		СписокНомеровМагазинов.Добавить(Число(ТекСтр.Магазин.НомерТочки));
	
	КонецЦикла;
	
	СписокНомеровМагазиновНеБыли = Новый СписокЗначений;
	
	Для каждого ТекСтр Из Объект.СписокМагазиновНеБыли Цикл
	
		СписокНомеровМагазиновНеБыли.Добавить(Число(ТекСтр.Магазин.НомерТочки));
	
	КонецЦикла;
	
	//СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.Loyality.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.Loyality.УстановитьСоединение();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНомеровМагазинов", СписокНомеровМагазинов);
	Запрос.УстановитьПараметр("ДатаС"	, Объект.ДатаС);
	Запрос.УстановитьПараметр("ДатаПо"	, Объект.ДатаПо);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияТранзакций.КартаПокупателя КАК DiscountCardUID,
		|	КартыПокупателей.Number КАК НомерКарты,
		|	Покупатели.Phone КАК НомерТелефона,
		|	Покупатели.Имя КАК ФИО
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.ИсторияТранзакций КАК ИсторияТранзакций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
		|			ПО КартыПокупателей.CustomerUID = Покупатели.CustomerUID
		|		ПО ИсторияТранзакций.КартаПокупателя = КартыПокупателей.DiscountCardUID
		|ГДЕ
		|	ИсторияТранзакций.НомерМагазина В(&СписокНомеровМагазинов)
		|	И Покупатели.IsEmployee <> 1
		|	И ИсторияТранзакций.Time >= &ДатаС
		|	И ИсторияТранзакций.Time <= &ДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияТранзакций.КартаПокупателя,
		|	КартыПокупателей.Number,
		|	Покупатели.Phone,
		|	Покупатели.Имя";

	Объект.СписокПокупателей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНомеровМагазиновНеБыли", СписокНомеровМагазиновНеБыли);
	Запрос.УстановитьПараметр("ДатаС"	, Объект.ДатаС);
	Запрос.УстановитьПараметр("ДатаПо"	, Объект.ДатаПо);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияТранзакций.КартаПокупателя КАК DiscountCardUID,
		|	КартыПокупателей.Number КАК НомерКарты,
		|	Покупатели.Phone КАК НомерТелефона,
		|	Покупатели.Имя КАК ФИО
		|ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.ИсторияТранзакций КАК ИсторияТранзакций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.КартыПокупателей КАК КартыПокупателей
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Loyality.Таблица.Покупатели КАК Покупатели
		|			ПО КартыПокупателей.CustomerUID = Покупатели.CustomerUID
		|		ПО ИсторияТранзакций.КартаПокупателя = КартыПокупателей.DiscountCardUID
		|ГДЕ
		|	ИсторияТранзакций.НомерМагазина В(&СписокНомеровМагазиновНеБыли)
		|	И Покупатели.IsEmployee <> 1
		|	И ИсторияТранзакций.Time >= &ДатаС
		|	И ИсторияТранзакций.Time <= &ДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияТранзакций.КартаПокупателя,
		|	КартыПокупателей.Number,
		|	Покупатели.Phone,
		|	Покупатели.Имя";		

	ТЗ_НеБыли = Запрос.Выполнить().Выгрузить();
	Для каждого ТекСтрНебыли Из ТЗ_НеБыли Цикл
 
 	 	ТекСтрНебыли.НомерКарты = СокрЛП(ТекСтрНебыли.НомерКарты);
 
 	КонецЦикла;
	
	//СтрСоединенияДанныеТовародвижение = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=izbenka;PWD=cjyzcjyz;DATABASE=IES;LANGUAGE=русский";
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.IES.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.IES.УстановитьСоединение();
	
	Если Объект.ОтправитьБезПроверкиВремени Тогда
		ТекПериодПроверки = 3600;	// час
	Иначе		
		ТекПериодПроверки = 604800; // неделя
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	dbo_Outgoing.Number КАК НомерТелефона
		|ИЗ
		|	ВнешнийИсточникДанных.IES.Таблица.dbo_Outgoing КАК dbo_Outgoing
		|ГДЕ
		|	dbo_Outgoing.AddDate >= &ТекДатаМинусНеделя
		|	И dbo_Outgoing.type_BV = 2";

	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ТекПериодПроверки));

	ТЗ_Рез = Запрос.Выполнить().Выгрузить();
	ВнешниеИсточникиДанных.IES.РазорватьСоединение();
		
	лкСписокТелефУжеОтправили = Новый СписокЗначений();
	лкСписокТелефУжеОтправили.ЗагрузитьЗначения(ТЗ_Рез.ВыгрузитьКолонку("НомерТелефона"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SMS.НомерТелефона
		|ИЗ
		|	РегистрСведений.SMS КАК SMS
		|ГДЕ
		|	SMS.ДатаДобавления >= &ТекДатаМинусНеделя
		|	И SMS.Отправлен = ЛОЖЬ";

	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ТекПериодПроверки));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		лкСписокТелефУжеОтправили.Добавить(ВыборкаДетальныеЗаписи.НомерТелефона);	
	КонецЦикла;
	
	МассивДляУдаления = Новый Массив;
	
	ТекТекст = Объект.Расылка.ТекстСообщения;
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл
	
		Если СокрЛП(ТекСтр.НомерКарты) = ""
				ИЛИ СокрЛП(ТекСтр.НомерТелефона) = ""
				ИЛИ СокрЛП(ТекСтр.ФИО) = "" Тогда
			
			МассивДляУдаления.Добавить(ТекСтр);	
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ лкСписокТелефУжеОтправили.НайтиПоЗначению("7" + СокрЛП(ТекСтр.НомерТелефона)) = Неопределено Тогда 
			
			МассивДляУдаления.Добавить(ТекСтр);	
			Продолжить;	
			
		КонецЕсли;	
		
		Если Лев(СокрЛП(ТекСтр.НомерТелефона), 1) <> "9" Тогда // городской
			МассивДляУдаления.Добавить(ТекСтр);
			Продолжить;
		КонецЕсли;
			
		Если СтрДлина(СокрЛП(ТекСтр.НомерТелефона)) < 10 Тогда // если меньше, значит неправильный формат телефона
			МассивДляУдаления.Добавить(ТекСтр);
			Продолжить;
		КонецЕсли;	
			
		ТекФио = НРег(СокрЛП(ТекСтр.ФИО));	
		ДлинаТекФио = СтрДлина(ТекФио);
		ТекФио = ВРег(Лев(ТекФио,1))+ Прав(ТекФио, ДлинаТекФио-1);
		
		ТекСтр.НомерКарты 		= СокрЛП(ТекСтр.НомерКарты);
		ТекСтр.НомерТелефона 	= СокрЛП(ТекСтр.НомерТелефона);
		ТекСтр.ФИО 				= ТекФио;
		ТекСтр.DiscountCardUID 	= СокрЛП(ТекСтр.DiscountCardUID);
		ТекСтр.лкТекстСообщения = ТекТекст;
		
	КонецЦикла;
	
	Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	
		Объект.СписокПокупателей.Удалить(ТекСтрокаДляУдаления);		
	
	КонецЦикла;
	
	МассивДляУдаления.Очистить();
	
	//удалим те строки, которым уже начислили купоны
	Если НЕ Объект.ОтправитьБезПроверкиДобавленияКупона Тогда
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
			
		ТекстЗапроса =
		"Select Distinct
		|	VZ.Number
		|From (
		|	Select
		|		DC.Number,
		|		cm.id_type_coupon
		|	from Loyalty..Coupon_move (nolock) as cm
		|	 Inner Join [Loyalty].[dbo].[DiscountCard] (nolock) as DC
		|	 On CM.DiscountCardUID = DC.DiscountCardUID
		|	 left outer join [Loyalty].[dbo].[Types_coupon] as tc (nolock)
		|	 on cm.id_type_coupon = tc.id_type_coupon
		|	where
		|		tc.date_st <= GETDATE()
		|		and tc.date_fi >= GETDATE()
		|	group by
		|		DC.Number,
		|		cm.id_type_coupon
		|	having
		|		sum(cm.kolvo) > 0) as VZ";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);	
		ТабНомера = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		Если ТабНомера.Колонки.Количество() = 0 Тогда
			ТабНомера.Колонки.Добавить("Number");
		КонецЕсли;	
		ТабНомера.Индексы.Добавить("Number");
		ADOСоединение.Close();
		
		КолвоСтрок = Объект.СписокПокупателей.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаТаб = ТабНомера.Найти(Объект.СписокПокупателей[КолвоСтрок - н].НомерКарты, "Number");
			Если СтрокаТаб <> Неопределено Тогда
				Объект.СписокПокупателей.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Объект.КоличествоПокупок <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ИсторияТранзакций.КартаПокупателя,
		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсторияТранзакций.CashCheckNo) КАК КоличествоИспользовано,
		//|	НЕДЕЛЯ(ИсторияТранзакций.Time) КАК Неделя
		//|ИЗ
		//|	ВнешнийИсточникДанных.Loyality.Таблица.ИсторияТранзакций КАК ИсторияТранзакций
		//|ГДЕ
		//|	ИсторияТранзакций.НомерМагазина В(&СписокНомеровМагазинов)
		//|	И ИсторияТранзакций.Time >= &ДатаС
		//|	И ИсторияТранзакций.Time <= &ДатаПо
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ИсторияТранзакций.КартаПокупателя,
		//|	НЕДЕЛЯ(ИсторияТранзакций.Time)";
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияТранзакций.КартаПокупателя,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсторияТранзакций.CashCheckNo) КАК КоличествоИспользовано, ";
		Если Объект.ВМесяц Тогда
			Запрос.Текст = Запрос.Текст + " МЕСЯЦ(ИсторияТранзакций.Time) КАК Неделя ";
		Иначе	
			Запрос.Текст = Запрос.Текст + " НЕДЕЛЯ(ИсторияТранзакций.Time) КАК Неделя ";
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст +
		" ИЗ
		|	ВнешнийИсточникДанных.Loyality.Таблица.ИсторияТранзакций КАК ИсторияТранзакций
		|ГДЕ
		|	ИсторияТранзакций.НомерМагазина В(&СписокНомеровМагазинов)
		|	И ИсторияТранзакций.Time >= &ДатаС
		|	И ИсторияТранзакций.Time <= &ДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияТранзакций.КартаПокупателя, ";
		Если Объект.ВМесяц Тогда
			Запрос.Текст = Запрос.Текст + " МЕСЯЦ(ИсторияТранзакций.Time)";
		Иначе	
			Запрос.Текст = Запрос.Текст + " НЕДЕЛЯ(ИсторияТранзакций.Time)";
		КонецЕсли;	
			
			
		Запрос.УстановитьПараметр("СписокНомеровМагазинов"	, СписокНомеровМагазинов);
		Запрос.УстановитьПараметр("ДатаС"					, Объект.ДатаС);
		Запрос.УстановитьПараметр("ДатаПо"					, Объект.ДатаПо);
		
		ТЗ_Покупок = Запрос.Выполнить().Выгрузить();
	 //   Для каждого ТекСтрКолИсп Из ТЗ_Покупок Цикл
	 //   	
	 //   	Если ТекСтрКолИсп.КоличествоИспользовано > Объект.КоличествоПокупок Тогда
	 //   		
	 //   		МассивДляУдаления.Добавить(ТекСтрКолИсп);	
	 //   		Продолжить;
	 //   		
	 //   	КонецЕсли;
	 //   	
	 //		ТекСтрКолИсп.КартаПокупателя = СокрЛП(ТекСтрКолИсп.КартаПокупателя);
	 //   	//ТекСтрКолИсп.КоличествоИспользовано = ТекСтрКолИсп.КоличествоИспользовано;
	 //
	 //   КонецЦикла;
	 //   
	 //   Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	 //   	
	 //   	ТЗ_Покупок.Удалить(ТекСтрокаДляУдаления);		
	 //   	
	 //   КонецЦикла;
		
		МассивДляУдаления.Очистить();
		
		Для каждого ТекСтрТаб Из Объект.СписокПокупателей Цикл
			
			лкОтбор = Новый Структура;
			лкОтбор.Вставить("КартаПокупателя", ТекСтрТаб.DiscountCardUID);
			МассНайденыеСтроки = ТЗ_Покупок.НайтиСтроки(лкОтбор);

			Для каждого ТекСтрНайд Из МассНайденыеСтроки Цикл
			  
				Если Объект.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
				  
					Если ТекСтрНайд.КоличествоИспользовано > Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
					КонецЕсли;
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано < Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					 	Прервать;  
					  
				  	КонецЕсли;
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Больше Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано <= Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли;  
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Меньше Тогда
				  
				 	 Если ТекСтрНайд.КоличествоИспользовано >= Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли; 
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Равно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано <> Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
					КонецЕсли;
					
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.НеРавно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано = Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли;
				  
				Иначе
				  
				  	МассивДляУдаления.Добавить(ТекСтрТаб);	
				  	Прервать;  
				  
				КонецЕсли;

			КонецЦикла;
			  
		КонецЦикла;	
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	
		Объект.СписокПокупателей.Удалить(ТекСтрокаДляУдаления);		
	
	КонецЦикла;
	
	ВремТЗ = Объект.СписокПокупателей.Выгрузить();
	//ВремТЗ.Свернуть("DiscountCardUID");
	ВремТЗ.Свернуть("НомерКарты, ФИО, НомерТелефона, DiscountCardUID");
	
	Объект.СписокПокупателей.Очистить();
	Объект.СписокПокупателей.Загрузить(ВремТЗ);
	
	Для каждого ТекСтрТаб Из Объект.СписокПокупателей Цикл
		
		//+++АК SHEP 2018.03.23 ИП-00018126
		//лТекТекст = СокрЛП(СтрЗаменить(ТекТекст	, "<ФИО>"		, СокрЛП(ТекСтрТаб.ФИО)));
		//лТекТекст = СокрЛП(СтрЗаменить(лТекТекст, "<НомерКарты>", СокрЛП(ТекСтрТаб.НомерКарты)));
		лТекТекст = ПолучитьТекстСообщенияПоШаблону(ТекТекст, ТекСтрТаб);
		//---АК SHEP 2018.03.23
		
		ТекСтрТаб.лкТекстСообщения = лТекТекст;
			
	КонецЦикла;
	
	МассивДляУдаления.Очистить();
	Для каждого ТекСтрТЧ Из Объект.СписокПокупателей Цикл
 
 		лкОтборНеБыли = Новый Структура("НомерКарты", СокрЛП(ТекСтрТЧ.НомерКарты));
        МассНайденыеСтрокиНеБыли = ТЗ_НеБыли.НайтиСтроки(лкОтборНеБыли);
		Если МассНайденыеСтрокиНеБыли.Количество() > 0 Тогда 
			МассивДляУдаления.Добавить(ТекСтрТЧ);	
		КонецЕсли;	
		
 	КонецЦикла;
	
	Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	
		Объект.СписокПокупателей.Удалить(ТекСтрокаДляУдаления);		
	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.Loyality.РазорватьСоединение();
	
КонецПроцедуры
Процедура ЗаполнитьТЧНаСервере()
	
	Объект.СписокПокупателей.Очистить();
	
	СписокНомеровМагазинов = Новый СписокЗначений;
	МагазиныСтрокой = "";
	МагазиныСтрокойНеБыли = "";
	
	Для каждого ТекСтр Из Объект.СписокМагазинов Цикл
		
		Если ЗначениеЗаполнено(ТекСтр.Магазин) Тогда
			СписокНомеровМагазинов.Добавить(Число(ТекСтр.Магазин.НомерТочки));
			МагазиныСтрокой = МагазиныСтрокой + ?(ПустаяСтрока(МагазиныСтрокой), "", ",") + Формат(ТекСтр.Магазин.НомерТочки, "ЧГ=0");
		КонецЕсли;	
	
	КонецЦикла;
	
	СписокНомеровМагазиновНеБыли = Новый СписокЗначений;
	
	Для каждого ТекСтр Из Объект.СписокМагазиновНеБыли Цикл
		
		Если ЗначениеЗаполнено(ТекСтр.Магазин) Тогда
			СписокНомеровМагазиновНеБыли.Добавить(Число(ТекСтр.Магазин.НомерТочки));
			МагазиныСтрокойНеБыли = МагазиныСтрокойНеБыли + ?(ПустаяСтрока(МагазиныСтрокойНеБыли), "", ",") + Формат(ТекСтр.Магазин.НомерТочки, "ЧГ=0");
		КонецЕсли;	
	
	КонецЦикла;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "select CAST(Loyalty.dbo.date_arc_th()  as datetime) as Data";
	ДатаУсечения = '20000101';
	
	Выборка = ADOСоединение.Execute(ЗапросСкуль);
	Попытка	
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			ДатаУсечения = Выборка.Fields("Data").Value;
			Выборка.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	//+++АК SHEP 2018.07.04 ИП-00018827
	//ЗапросСкуль = "SELECT DISTINCT 
	//				|	CAST(VZ_Zapros.DiscountCardUID as nvarchar(50)) DiscountCardUID,
	//				|	DC.Number as НомерКарты,
	//				|	Customer.Phone as НомерТелефона,
	//				|	Customer.Имя
	//				|FROM (SELECT DISTINCT TH.DiscountCardUID as DiscountCardUID
	//				|	  
	//				|  FROM [Loyalty].[dbo].[TransactionHistory] (nolock) as TH
	//				|  WHERE TH.ShopNo IN (" + МагазиныСтрокой + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо)) + "
	//				|";
	//	Если Объект.ДатаС <= ДатаУсечения Тогда			
	//		ЗапросСкуль = ЗапросСкуль + "			
	//				|UNION ALL
	//				|
	//				|SELECT DISTINCT TH.DiscountCardUID
	//				|	  
	//				|  FROM [SMS_IZBENKA_ARC].[dbo].[TransactionHistory] (nolock) as TH
	//				|  WHERE TH.ShopNo IN (" + МагазиныСтрокой + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо));
	//	КонецЕсли;
	//ЗапросСкуль = ЗапросСкуль + "			
	//				|	) as VZ_Zapros
	//				|  LEFT OUTER JOIN Loyalty.dbo.DiscountCard (nolock) as DC ON VZ_Zapros.DiscountCardUID = DC.DiscountCardUID
	//				|  LEFT OUTER JOIN Loyalty.dbo.Customer (nolock) as Customer ON DC.CustomerUID = Customer.CustomerUID
	//				|WHERE ISNULL(Customer.IsEmployee, 0) <> 1";
	//				
	//Если НЕ ПустаяСтрока(СписокНомеровМагазиновНеБыли) Тогда
	//	//+++АК SHEP 2018.03.23 ИП-00018126: исправил ошибку: МагазиныСтрокой заменил на МагазиныСтрокойНеБыли
	//	ЗапросСкуль = ЗапросСкуль + "			
	//			|	And NOT VZ_Zapros.DiscountCardUID IN (SELECT DISTINCT TH.DiscountCardUID as DiscountCardUID
	//								|	  
	//								|  FROM [Loyalty].[dbo].[TransactionHistory] (nolock) as TH
	//								|  WHERE TH.ShopNo IN (" + МагазиныСтрокойНеБыли + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо)) + "
	//								|";
	//					Если Объект.ДатаС <= ДатаУсечения Тогда			
	//						ЗапросСкуль = ЗапросСкуль + "			
	//								|UNION ALL
	//								|
	//								|SELECT DISTINCT TH.DiscountCardUID
	//								|	  
	//								|  FROM [SMS_IZBENKA_ARC].[dbo].[TransactionHistory] (nolock) as TH
	//								|  WHERE TH.ShopNo IN (" + МагазиныСтрокойНеБыли + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо));
	//					КонецЕсли;
	//	ЗапросСкуль = ЗапросСкуль + ")";
	//	//---АК SHEP 2018.03.23
	//КонецЕсли;					
	
	ЗапросСкуль = "
		|EXEC Loyalty.[dbo].[FOR1C_GroupCouponData]
		|	@MagazinyStrokoy        = " + ?(ПустаяСтрока(МагазиныСтрокой), "NULL", ВнешниеДанные.ФорматПоля(МагазиныСтрокой)) + ",
		|	@MagazinyStrokoyNeByli  = " + ?(ПустаяСтрока(МагазиныСтрокойНеБыли), "NULL", ВнешниеДанные.ФорматПоля(МагазиныСтрокойНеБыли)) + ",
		|	@DateStart              = " + ВнешниеДанные.ФорматПоля(Объект.ДатаС, Истина) + ",
		|	@DateEnd                = " + ВнешниеДанные.ФорматПоля(Объект.ДатаПо, Истина) + "
		|";
	//---АК SHEP 2018.07.04
  
	Объект.СписокПокупателей.Очистить();
	
	Выборка = ADOСоединение.Execute(ЗапросСкуль);
	Попытка	
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			СтрокаДоб = Объект.СписокПокупателей.Добавить();
			//+++АК SHEP 2018.07.04 ИП-00018827
			//СтрокаДоб.DiscountCardUID = СокрЛП(Выборка.Fields("DiscountCardUID").Value);
			//---АК SHEP 2018.07.04
			СтрокаДоб.НомерКарты = СокрЛП(Выборка.Fields("НомерКарты").Value);
			СтрокаДоб.DiscountCardUID = СтрокаДоб.НомерКарты; //+++АК SHEP 2018.07.04 ИП-00018827
			СтрокаДоб.НомерТелефона = СокрЛП(Выборка.Fields("НомерТелефона").Value);
			СтрокаДоб.ФИО = СокрЛП(Выборка.Fields("Имя").Value);
			Выборка.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
//	
	
	//СтрСоединенияДанныеТовародвижение = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=izbenka;PWD=cjyzcjyz;DATABASE=IES;LANGUAGE=русский";
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.IES.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.IES.УстановитьСоединение();
	
	Если Объект.ОтправитьБезПроверкиВремени Тогда
		ТекПериодПроверки = 3600;	// час
	Иначе		
		ТекПериодПроверки = 604800; // неделя
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	dbo_Outgoing.Number КАК НомерТелефона
		|ИЗ
		|	ВнешнийИсточникДанных.IES.Таблица.dbo_Outgoing КАК dbo_Outgoing
		|ГДЕ
		|	dbo_Outgoing.AddDate >= &ТекДатаМинусНеделя
		|	И dbo_Outgoing.type_BV = 2";

	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ТекПериодПроверки));

	ТЗ_Рез = Запрос.Выполнить().Выгрузить();
	ВнешниеИсточникиДанных.IES.РазорватьСоединение();
		
	лкСписокТелефУжеОтправили = Новый СписокЗначений();
	лкСписокТелефУжеОтправили.ЗагрузитьЗначения(ТЗ_Рез.ВыгрузитьКолонку("НомерТелефона"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SMS.НомерТелефона
		|ИЗ
		|	РегистрСведений.SMS КАК SMS
		|ГДЕ
		|	SMS.ДатаДобавления >= &ТекДатаМинусНеделя
		|	И SMS.Отправлен = ЛОЖЬ";

	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ТекПериодПроверки));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		лкСписокТелефУжеОтправили.Добавить(ВыборкаДетальныеЗаписи.НомерТелефона);	
	КонецЦикла;
	
	МассивДляУдаления = Новый Массив;
	
	ТекТекст = Объект.Расылка.ТекстСообщения;
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл
	
		Если СокрЛП(ТекСтр.НомерКарты) = ""
				ИЛИ СокрЛП(ТекСтр.НомерТелефона) = ""
				ИЛИ СокрЛП(ТекСтр.ФИО) = "" Тогда
			
			МассивДляУдаления.Добавить(ТекСтр);	
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ лкСписокТелефУжеОтправили.НайтиПоЗначению("7" + СокрЛП(ТекСтр.НомерТелефона)) = Неопределено Тогда 
			
			МассивДляУдаления.Добавить(ТекСтр);	
			Продолжить;	
			
		КонецЕсли;	
		
		Если Лев(СокрЛП(ТекСтр.НомерТелефона), 1) <> "9" Тогда // городской
			МассивДляУдаления.Добавить(ТекСтр);
			Продолжить;
		КонецЕсли;
			
		Если СтрДлина(СокрЛП(ТекСтр.НомерТелефона)) < 10 Тогда // если меньше, значит неправильный формат телефона
			МассивДляУдаления.Добавить(ТекСтр);
			Продолжить;
		КонецЕсли;	
			
		ТекФио = НРег(СокрЛП(ТекСтр.ФИО));	
		ДлинаТекФио = СтрДлина(ТекФио);
		ТекФио = ВРег(Лев(ТекФио,1))+ Прав(ТекФио, ДлинаТекФио-1);
		
		ТекСтр.НомерКарты 		= СокрЛП(ТекСтр.НомерКарты);
		ТекСтр.НомерТелефона 	= СокрЛП(ТекСтр.НомерТелефона);
		ТекСтр.ФИО 				= ТекФио;
		ТекСтр.DiscountCardUID 	= СокрЛП(ТекСтр.DiscountCardUID);
		ТекСтр.лкТекстСообщения = ТекТекст;
		
	КонецЦикла;
	
	Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	
		Объект.СписокПокупателей.Удалить(ТекСтрокаДляУдаления);		
	
	КонецЦикла;
	
	МассивДляУдаления.Очистить();
	
	//удалим те строки, которым уже начислили купоны
	Если НЕ Объект.ОтправитьБезПроверкиДобавленияКупона Тогда
		
		ТекстЗапроса =
		"Select Distinct
		|	VZ.Number
		|From (
		|	Select
		|		DC.Number,
		|		cm.id_type_coupon
		|	from Loyalty..Coupon_move (nolock) as cm
		|	 Inner Join [Loyalty].[dbo].[DiscountCard] (nolock) as DC
		|	 On CM.DiscountCardUID = DC.DiscountCardUID
		|	 left outer join [Loyalty].[dbo].[Types_coupon] as tc (nolock)
		|	 on cm.id_type_coupon = tc.id_type_coupon
		|	where
		|		tc.date_st <= GETDATE()
		|		and tc.date_fi >= GETDATE()
		|	group by
		|		DC.Number,
		|		cm.id_type_coupon
		|	having
		|		sum(cm.kolvo) > 0) as VZ";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);	
		ТабНомера = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		Если ТабНомера.Колонки.Количество() = 0 Тогда
			ТабНомера.Колонки.Добавить("Number");
		КонецЕсли;	
		ТабНомера.Индексы.Добавить("Number");
		
		КолвоСтрок = Объект.СписокПокупателей.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаТаб = ТабНомера.Найти(Объект.СписокПокупателей[КолвоСтрок - н].НомерКарты, "Number");
			Если СтрокаТаб <> Неопределено Тогда
				Объект.СписокПокупателей.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Объект.КоличествоПокупок <> 0 Тогда
		
		//+++АК SHEP 2018.07.06 ИП-00018827
		//ЗапросСкуль = "SELECT DISTINCT 
		//				|	CAST(VZ_Zapros.DiscountCardUID as nvarchar(50)) КартаПокупателя,
		//				|	COUNT(DISTINCT VZ_Zapros.CashCheckNo) КоличествоИспользовано,";
		//				
		//Если Объект.ВМесяц Тогда
		//	ЗапросСкуль = ЗапросСкуль + " DATEPART(MONTH, VZ_Zapros.Time) Неделя ";
		//Иначе	
		//	ЗапросСкуль = ЗапросСкуль+ " DATEPART(WEEK, VZ_Zapros.Time) Неделя ";
		//КонецЕсли;
		//				
		//ЗапросСкуль = ЗапросСкуль + "				
		//				|	
		//				|FROM (SELECT DISTINCT TH.DiscountCardUID as DiscountCardUID, TH.CashCheckNo, TH.Time
		//				|	  
		//				|  FROM [Loyalty].[dbo].[TransactionHistory] (nolock) as TH
		//				|  WHERE TH.ShopNo IN (" + МагазиныСтрокой + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо)) + "
		//				|";
		//	Если Объект.ДатаС <= ДатаУсечения Тогда			
		//		ЗапросСкуль = ЗапросСкуль + "			
		//				|UNION ALL
		//				|
		//				|SELECT DISTINCT TH.DiscountCardUID, TH.CashCheckNo, TH.Time
		//				|	  
		//				|  FROM [SMS_IZBENKA_ARC].[dbo].[TransactionHistory] (nolock) as TH
		//				|  WHERE TH.ShopNo IN (" + МагазиныСтрокой + ") and TH.Time >= " + ВнешниеДанные.ФорматПоля(Объект.ДатаС) + " and TH.Time <= " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.ДатаПо));
		//	КонецЕсли;
		//ЗапросСкуль = ЗапросСкуль + "			
		//				|	) as VZ_Zapros
		//				|GROUP BY CAST(VZ_Zapros.DiscountCardUID as nvarchar(50)),";
		//Если Объект.ВМесяц Тогда
		//	ЗапросСкуль = ЗапросСкуль + " DATEPART(MONTH, VZ_Zapros.Time)";
		//Иначе	
		//	ЗапросСкуль = ЗапросСкуль + " DATEPART(WEEK, VZ_Zapros.Time)";
		//КонецЕсли;				
		
		ЗапросСкуль = "
			|EXEC Loyalty.[dbo].[FOR1C_CountChecksBC] 
			|	@MagazinyStrokoy        = " + ВнешниеДанные.ФорматПоля(МагазиныСтрокой) + ",
			|	@InMonth                = " + ВнешниеДанные.ФорматПоля(Объект.ВМесяц) + ",
			|	@DateStart              = " + ВнешниеДанные.ФорматПоля(Объект.ДатаС, Истина) + ",
			|	@DateEnd                = " + ВнешниеДанные.ФорматПоля(Объект.ДатаПо, Истина) + "
  			|";
		//---АК SHEP 2018.07.06
		
		ТЗ_Покупок = Новый ТаблицаЗначений();
		ТЗ_Покупок.Колонки.Добавить("КартаПокупателя");
		ТЗ_Покупок.Колонки.Добавить("КоличествоИспользовано");
		ТЗ_Покупок.Колонки.Добавить("Неделя");
		
		Выборка = ADOСоединение.Execute(ЗапросСкуль);
		Попытка	
			Выборка.MoveFirst();
			Пока НЕ Выборка.EOF() Цикл
				СтрокаДоб = ТЗ_Покупок.Добавить();
				СтрокаДоб.КартаПокупателя = СокрЛП(Выборка.Fields("КартаПокупателя").Value);
				СтрокаДоб.КоличествоИспользовано = Выборка.Fields("КоличествоИспользовано").Value;
				СтрокаДоб.Неделя = Выборка.Fields("Неделя").Value;
				Если ТипЗнч(СтрокаДоб.КоличествоИспользовано) <> Тип("Число") Тогда
					СтрокаДоб.КоличествоИспользовано = 0;
				КонецЕсли;	
				Выборка.MoveNext();
			КонецЦикла;	
		Исключение
		КонецПопытки;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ИсторияТранзакций.КартаПокупателя,
		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсторияТранзакций.CashCheckNo) КАК КоличествоИспользовано, ";
		//Если Объект.ВМесяц Тогда
		//	Запрос.Текст = Запрос.Текст + " МЕСЯЦ(ИсторияТранзакций.Time) КАК Неделя ";
		//Иначе	
		//	Запрос.Текст = Запрос.Текст + " НЕДЕЛЯ(ИсторияТранзакций.Time) КАК Неделя ";
		//КонецЕсли;	
		//
		//Запрос.Текст = Запрос.Текст +
		//" ИЗ
		//|	ВнешнийИсточникДанных.Loyality.Таблица.ИсторияТранзакций КАК ИсторияТранзакций
		//|ГДЕ
		//|	ИсторияТранзакций.НомерМагазина В(&СписокНомеровМагазинов)
		//|	И ИсторияТранзакций.Time >= &ДатаС
		//|	И ИсторияТранзакций.Time <= &ДатаПо
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ИсторияТранзакций.КартаПокупателя, ";
		//Если Объект.ВМесяц Тогда
		//	Запрос.Текст = Запрос.Текст + " МЕСЯЦ(ИсторияТранзакций.Time)";
		//Иначе	
		//	Запрос.Текст = Запрос.Текст + " НЕДЕЛЯ(ИсторияТранзакций.Time)";
		//КонецЕсли;	
		//	
		//	
		//Запрос.УстановитьПараметр("СписокНомеровМагазинов"	, СписокНомеровМагазинов);
		//Запрос.УстановитьПараметр("ДатаС"					, Объект.ДатаС);
		//Запрос.УстановитьПараметр("ДатаПо"					, Объект.ДатаПо);
		//
		//ТЗ_Покупок = Запрос.Выполнить().Выгрузить();
		
		//+++АК CISA 2018.10.03 ИП-00020034
		ТЗ_Покупок.Свернуть("КартаПокупателя","КоличествоИспользовано");
		//---АК CISA
		
		МассивДляУдаления.Очистить();
		
		Для каждого ТекСтрТаб Из Объект.СписокПокупателей Цикл
			
			лкОтбор = Новый Структура;
			лкОтбор.Вставить("КартаПокупателя", ТекСтрТаб.DiscountCardUID);
			МассНайденыеСтроки = ТЗ_Покупок.НайтиСтроки(лкОтбор);

			Для каждого ТекСтрНайд Из МассНайденыеСтроки Цикл
			  
				Если Объект.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
				  
					Если ТекСтрНайд.КоличествоИспользовано > Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
					КонецЕсли;
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано < Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					 	Прервать;  
					  
				  	КонецЕсли;
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Больше Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано <= Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли;  
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Меньше Тогда
				  
				 	 Если ТекСтрНайд.КоличествоИспользовано >= Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли; 
				  
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.Равно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано <> Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
					КонецЕсли;
					
				ИначеЕсли Объект.ВидСравнения = ВидСравнения.НеРавно Тогда
				  
				  	Если ТекСтрНайд.КоличествоИспользовано = Объект.КоличествоПокупок Тогда
					  
					  	МассивДляУдаления.Добавить(ТекСтрТаб);	
					  	Прервать;  
					  
				  	КонецЕсли;
				  
				Иначе
				  
				  	МассивДляУдаления.Добавить(ТекСтрТаб);	
				  	Прервать;  
				  
				КонецЕсли;

			КонецЦикла;
			  
		КонецЦикла;	
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДляУдаления Из МассивДляУдаления Цикл
	
		Объект.СписокПокупателей.Удалить(ТекСтрокаДляУдаления);		
	
	КонецЦикла;
	
	ADOСоединение.Close();
	
	ВремТЗ = Объект.СписокПокупателей.Выгрузить();
	ВремТЗ.Свернуть("НомерКарты, ФИО, НомерТелефона, DiscountCardUID");
	
	Объект.СписокПокупателей.Очистить();
	Объект.СписокПокупателей.Загрузить(ВремТЗ);
	
	Для каждого ТекСтрТаб Из Объект.СписокПокупателей Цикл
		
		//+++АК SHEP 2018.03.23 ИП-00018126
		//лТекТекст = СокрЛП(СтрЗаменить(ТекТекст	, "<ФИО>"		, СокрЛП(ТекСтрТаб.ФИО)));
		//лТекТекст = СокрЛП(СтрЗаменить(лТекТекст, "<НомерКарты>", СокрЛП(ТекСтрТаб.НомерКарты)));
		лТекТекст = ПолучитьТекстСообщенияПоШаблону(ТекТекст, ТекСтрТаб);
		//---АК SHEP 2018.03.23
		
		ТекСтрТаб.лкТекстСообщения = лТекТекст;
			
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТЧ(Команда)
	
	Состояние("Идёт выборка данных. Ожидайте...");
	ЗаполнитьТЧНаСервере();
	
КонецПроцедуры

Процедура УстановитьФлажки(ЗначФлажка)
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл

		ТекСтр.Обрабатывать = ЗначФлажка;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	
	УстановитьФлажки(Ложь);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
//

Процедура УстановитьКоличествоКупоновНаСервере()
	
	//
	
	//мИдентификаторТипаКупона = СокрЛП(Объект.ТипКупона.Инентификатор);
	//ТекПользователь = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
	i = 0;
	ТекстВремТаблицы = "create table #b (Number nvarchar(50))";
	ТекстНомеровКарт = "INSERT INTO #b VALUES ";
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл
		
		Если ТекСтр.Обрабатывать Тогда
			Если i % 500 = 0
				И i > 0 Тогда
				ТекстНомеровКарт = ТекстНомеровКарт + Символы.ПС + "INSERT INTO #b VALUES ";
			КонецЕсли;	
			ТекстНомеровКарт = ТекстНомеровКарт + ?(i = 0 ИЛИ i % 500 = 0, "", ",") + "(" + ВнешниеДанные.ФорматПоля(ТекСтр.НомерКарты) + ")";
			//ТекстЗапроса =
			//" SET NOCOUNT ON
			//|Insert into [Loyalty].[dbo].[Coupon_move]
			//|      ([id_type_coupon]
			//|      ,[DiscountCardUID]
			//|      ,[user_add]
			//|      ,[time_add]
			//|      ,[kolvo]
			//|      ,[CheckUID] )
			//|Select ";
			//
			//ТекстЗапроса = ТекстЗапроса + " '" + мИдентификаторТипаКупона + "' ";
			//
			//ТекстЗапроса = ТекстЗапроса + "
			//|      , d.[DiscountCardUID]
			//|      , /**BPar2**/'^^^^^'/**FPar**/    
			//|      , GETDATE()
			//|      , /**BPar3**/`````/**FPar**/    
			//|      , null
			//|From Loyalty..DiscountCard d (nolock)
			//|Where
			//|      d.Number = /**BPar1**/~~~~~/**FPar**/";
			//
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", ТекСтр.НомерКарты);
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "`````", 1);
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", ТекПользователь);
			//
			//ADOСоединение.Execute(ТекстЗапроса);	
			//ТекстНомеровКарт = ТекстНомеровКарт + ",/**BPar1**/" + ТекСтр.НомерКарты + "/**FPar**/";
			i = i + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	Если i = 0 Тогда
		Возврат
	КонецЕсли;
	
	//ТекстНомеровКарт = Сред(ТекстНомеровКарт, 2);
	ТекстНомеровКарт = ТекстНомеровКарт;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	" SET NOCOUNT ON
	|" + ТекстВремТаблицы + "
	|" + ТекстНомеровКарт + "
	|Insert into Loyalty..Coupon_move
	|  (id_type_coupon,
	//+++АК SHEP 2018.08.31 ИП-00019339
	//|   DiscountCardUID,
	|   number,
	//---АК SHEP 2018.08.31
	|   user_add,
	|   time_add,
	|   kolvo,
	|   CheckUID)
	|Select 
	|	'" + СокрЛП(Объект.ТипКупона.Инентификатор) + "',
	//+++АК SHEP 2018.08.31 ИП-00019339
	//|   d.DiscountCardUID,
	|	b.Number,
	//---АК SHEP 2018.08.31
	|   /**BPar2**/'" + СокрЛП(ПараметрыСеанса.ТекущийПользователь) + "'/**FPar**/,
	|   GETDATE(),
	|   1,    
	|   null
	//---АК SHEP 2018.08.31 ИП-00019339
	//|From Loyalty..DiscountCard as d (nolock)
	//|LEFT OUTER JOIN #b as b ON d.Number = b.Number
	|From #b as b
	//---АК SHEP 2018.08.31
	|Where
	|   not b.Number is null";
	ADOСоединение.Execute(ТекстЗапроса);	
	ADOСоединение.Close();
	
	//
	Сообщить("Добавили купон для " + i + " карт.");
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьКупоны(Команда)
	
	Если Вопрос("Добавить купоны?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		УстановитьКоличествоКупоновНаСервере();
		
	КонецЕсли;	
	
КонецПроцедуры


Процедура ОтправитьСМСНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	// Получение списка телефонов, на которые уже были отправлены СМС
	лкСписокТелефУжеОтправили = Новый СписокЗначений;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	ADOСоединение.Open();
	ТекстЗапроса =
	"Select Distinct
	|	Outgoing.Number
	|From IES..Outgoing as Outgoing (nolock)
	|Where 
	|	Outgoing.AddDate >= " + ?(Объект.ОтправитьБезПроверкиВремени, "DateAdd(Hour, -1, GETDATE())", "DateAdd(Day, -7, GETDATE())") + " 
	|	And Outgoing.type_BV = 2";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			лкСписокТелефУжеОтправили.Добавить(Выборка.Fields("Number").Value);
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;
	ADOСоединение.Close();
	//СтрСоединенияДанныеТовародвижение = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=izbenka;PWD=cjyzcjyz;DATABASE=IES;LANGUAGE=русский";
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.IES.УстановитьОбщиеПараметрыСоединения(пСоед);
	//ВнешниеИсточникиДанных.IES.УстановитьСоединение();
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ТекПериодПроверки));
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	dbo_Outgoing.Number КАК НомерТелефона
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.IES.Таблица.dbo_Outgoing КАК dbo_Outgoing
	//	|ГДЕ
	//	|	dbo_Outgoing.AddDate >= &ТекДатаМинусНеделя
	//	|	И dbo_Outgoing.type_BV = 2";
	//ТЗ_Рез = Запрос.Выполнить().Выгрузить();
	//ВнешниеИсточникиДанных.IES.РазорватьСоединение();
	//	
	//лкСписокТелефУжеОтправили = Новый СписокЗначений();
	//лкСписокТелефУжеОтправили.ЗагрузитьЗначения(ТЗ_Рез.ВыгрузитьКолонку("НомерТелефона"));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ?(Объект.ОтправитьБезПроверкиВремени, 3600, 604800)));  //   час/неделя
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SMS.НомерТелефона
		|ИЗ
		|	РегистрСведений.SMS КАК SMS
		|ГДЕ
		|	SMS.ДатаДобавления >= &ТекДатаМинусНеделя
		|	И НЕ SMS.Отправлен";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		лкСписокТелефУжеОтправили.Добавить(Выборка.НомерТелефона);	
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	SMS.Отправлен,
		|	SMS.Рассылка,
		|	SMS.ДатаДобавления,
		|	SMS.ДатаОтправкиНаСервер,
		|	SMS.Пользователь,
		|	SMS.НомерТелефона,
		|	SMS.DiscountCardUID,
		|	SMS.ФИО,
		|	SMS.НомерКарты,
		|	SMS.GUID_Записи,
		|	SMS.Комментарий,
		|	SMS.ОтправитьБезПроверкиВремени
		|ИЗ
		|	РегистрСведений.SMS КАК SMS";

	ТЗ_ДляЗаписи = Запрос.Выполнить().Выгрузить();
	ТЗ_ДляЗаписи.Очистить();	
	
	Текпользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекРассылка 	= Объект.Расылка;
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл
		
		Если ТекСтр.Обрабатывать Тогда
			
			Если лкСписокТелефУжеОтправили.НайтиПоЗначению("7" + Лев(СокрЛП(ТекСтр.НомерТелефона), 10)) = Неопределено Тогда
				
				НоваяСтрТЗ = ТЗ_ДляЗаписи.Добавить();
				НоваяСтрТЗ.GUID_Записи 			= Новый УникальныйИдентификатор;
				НоваяСтрТЗ.Отправлен 			= ЛОЖЬ;
				НоваяСтрТЗ.ДатаДобавления 		= ТекущаяДата();
				НоваяСтрТЗ.ДатаОтправкиНаСервер = Неопределено;
				НоваяСтрТЗ.Пользователь 		= Текпользователь;
				НоваяСтрТЗ.НомерТелефона 		= "7" + Лев(СокрЛП(ТекСтр.НомерТелефона), 10);
				НоваяСтрТЗ.Рассылка 			= ТекРассылка;
				НоваяСтрТЗ.DiscountCardUID 		= ТекСтр.DiscountCardUID;
				НоваяСтрТЗ.ФИО 					= ТРег(ТекСтр.ФИО);
				НоваяСтрТЗ.НомерКарты 			= ТекСтр.НомерКарты;
				НоваяСтрТЗ.Комментарий 			= Объект.Комментарий;
				НоваяСтрТЗ.ОтправитьБезПроверкиВремени = Объект.ОтправитьБезПроверкиВремени;
								
			КонецЕсли;
		
			ТекСтр.Обрабатывать = Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЗ_ДляЗаписи.Количество() > 0 Тогда
		
		РегистрSMS = РегистрыСведений.SMS;
		Для каждого ТекСтрТЗ_ДляЗаписи Из ТЗ_ДляЗаписи Цикл
  
  	    	Менедж = РегистрSMS.СоздатьМенеджерЗаписи();
            Менедж.GUID_Записи = ТекСтрТЗ_ДляЗаписи.GUID_Записи;
			Менедж.Прочитать();
			
			Если НЕ Менедж.Выбран() Тогда
				
				Менедж.GUID_Записи 			= ТекСтрТЗ_ДляЗаписи.GUID_Записи;;
				Менедж.Отправлен 			= Ложь;
				Менедж.ДатаДобавления 		= ТекСтрТЗ_ДляЗаписи.ДатаДобавления;
				Менедж.ДатаОтправкиНаСервер = ТекСтрТЗ_ДляЗаписи.ДатаОтправкиНаСервер;
				Менедж.Пользователь 		= ТекСтрТЗ_ДляЗаписи.Пользователь;
				Менедж.НомерТелефона 		= ТекСтрТЗ_ДляЗаписи.НомерТелефона;
				Менедж.Рассылка 			= ТекСтрТЗ_ДляЗаписи.Рассылка;
				Менедж.DiscountCardUID 		= ТекСтрТЗ_ДляЗаписи.DiscountCardUID;
				Менедж.ФИО 					= ТекСтрТЗ_ДляЗаписи.ФИО;
				Менедж.НомерКарты 			= ТекСтрТЗ_ДляЗаписи.НомерКарты;
				Менедж.Комментарий 			= ТекСтрТЗ_ДляЗаписи.Комментарий;
				Менедж.ОтправитьБезПроверкиВремени = ТекСтрТЗ_ДляЗаписи.ОтправитьБезПроверкиВремени;
								
				Менедж.Записать();
				
			КонецЕсли;			
			
  		КонецЦикла;		
		
	КонецЕсли;	
	
	Сообщить("Отправка успешно завершена!" + Символы.ПС + "Отправлено " + ТЗ_ДляЗаписи.Количество() + " сообщений.");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	
	Если Вопрос("Отправить СМС?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если Час(ТекущаяДата()) > 17 Тогда
			Если Вопрос("Внимание!!! Текущее время превышает 17 часов. Возможна поздняя доставка СМС покупателям! Желаете продолжить отправку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ОтправитьСМСНаСервере();				
			КонецЕсли;
		Иначе
			ОтправитьСМСНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОтправитьСМСИДобавитьКупоныНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	// Получение списка телефонов, на которые уже были отправлены СМС
	лкСписокТелефУжеОтправили = Новый СписокЗначений;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	ADOСоединение.Open();
	ТекстЗапроса =
	"Select Distinct
	|	Outgoing.Number
	|From IES..Outgoing as Outgoing (nolock)
	|Where 
	|	Outgoing.AddDate >= " + ?(Объект.ОтправитьБезПроверкиВремени, "DateAdd(Hour, -1, GETDATE())", "DateAdd(Day, -7, GETDATE())") + " 
	|	And Outgoing.type_BV = 2";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Если НЕ Выборка.EOF() Тогда
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			лкСписокТелефУжеОтправили.Добавить(Выборка.Fields("Number").Value);
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаМинусНеделя", (ТекущаяДата() - ?(Объект.ОтправитьБезПроверкиВремени, 3600, 604800)));  //   час/неделя
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SMS.НомерТелефона
		|ИЗ
		|	РегистрСведений.SMS КАК SMS
		|ГДЕ
		|	SMS.ДатаДобавления >= &ТекДатаМинусНеделя
		|	И НЕ SMS.Отправлен";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		лкСписокТелефУжеОтправили.Добавить(Выборка.НомерТелефона);	
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	SMS.Отправлен,
		|	SMS.Рассылка,
		|	SMS.ДатаДобавления,
		|	SMS.ДатаОтправкиНаСервер,
		|	SMS.Пользователь,
		|	SMS.НомерТелефона,
		|	SMS.DiscountCardUID,
		|	SMS.ФИО,
		|	SMS.НомерКарты,
		|	SMS.GUID_Записи,
		|	SMS.Комментарий,
		|	SMS.ОтправитьБезПроверкиВремени
		|ИЗ
		|	РегистрСведений.SMS КАК SMS";
	ТЗ_ДляЗаписи = Запрос.Выполнить().Выгрузить();
	ТЗ_ДляЗаписи.Очистить();	
	
	Текпользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекРассылка 	= Объект.Расылка;
	мИдентификаторТипаКупона = СокрЛП(Объект.ТипКупона.Инентификатор);
	РегистрSMS		= РегистрыСведений.SMS;
	
	Для каждого ТекСтр Из Объект.СписокПокупателей Цикл
		
		Если ТекСтр.Обрабатывать Тогда
			
			ТекНомерТелефона = "7" + Лев(СокрЛП(ТекСтр.НомерТелефона), 10);
			Если лкСписокТелефУжеОтправили.НайтиПоЗначению(ТекНомерТелефона) = Неопределено Тогда
				
				//+++АК SHEP 2018.08.31 ИП-00019339
				//ТекстЗапроса =
				//" SET NOCOUNT ON
				//|Insert into Loyalty..Coupon_move
				//|   (id_type_coupon
				//|   ,DiscountCardUID
				//|   ,user_add
				//|   ,time_add
				//|   ,kolvo
				//|   ,CheckUID)
				//|Select 
				//|	'" + мИдентификаторТипаКупона + "'
				//|   , d.DiscountCardUID
				//|   , /**BPar2**/'" + СокрЛП(Текпользователь) + "'/**FPar**/    
				//|   , GETDATE()
				//|   , 1    
				//|   , null
				//|From Loyalty..DiscountCard as d (nolock)
				//|Where
				//|	d.Number = /**BPar1**/" + ТекСтр.НомерКарты + "/**FPar**/";
				
				ТекстЗапроса = "
				|exec [Loyalty].[dbo].[Coupon_move_ins]
				|	@id_type_coupon = '" + мИдентификаторТипаКупона + "',
				|	@number = " + ВнешниеДанные.ФорматПоля(ТекСтр.НомерКарты) + ",
				|	@user_add = " + ВнешниеДанные.ФорматПоля(СокрЛП(Текпользователь)) + ",
				|	@kolvo = 1";
				//---АК SHEP 2018.08.31
				
				ADOСоединение.Execute(ТекстЗапроса);	
				
				//
				мУникальныйИдентификатор = Новый УникальныйИдентификатор;
				
				Менедж = РегистрSMS.СоздатьМенеджерЗаписи();
	            Менедж.GUID_Записи = мУникальныйИдентификатор;
				Менедж.Прочитать();
				
				Если Менедж.Выбран() Тогда
					Продолжить;
				КонецЕсли;			
								
				Менедж.GUID_Записи 					= мУникальныйИдентификатор;
				Менедж.Отправлен 					= Ложь;
				Менедж.ДатаДобавления 				= ТекущаяДата();
				Менедж.ДатаОтправкиНаСервер 		= Неопределено;
				Менедж.Пользователь 				= Текпользователь;
				Менедж.НомерТелефона 				= ТекНомерТелефона;
				Менедж.Рассылка 					= ТекРассылка;
				Менедж.DiscountCardUID 				= ТекСтр.DiscountCardUID;
				Менедж.ФИО 							= ТекСтр.ФИО;
				Менедж.НомерКарты 					= ТекСтр.НомерКарты;
				Менедж.Комментарий 					= Объект.Комментарий;
				Менедж.ОтправитьБезПроверкиВремени 	= Объект.ОтправитьБезПроверкиВремени;
								
				Менедж.Записать();
					
			КонецЕсли;
		
			ТекСтр.Обрабатывать = Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
	ADOСоединение.Close();
	
	//
	Сообщить("Отправка успешно завершена!" + Символы.ПС + "Отправлено " + ТЗ_ДляЗаписи.Количество() + " сообщений.");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСИДобавитьКупоны(Команда)
	
	Если Вопрос("Отправить СМС и добавить купоны?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если Час(ТекущаяДата()) > 17 Тогда
			Если Вопрос("Внимание!!! Текущее время превышает 17 часов. Возможна поздняя доставка СМС покупателям! Желаете продолжить отправку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ОтправитьСМСИДобавитьКупоныНаСервере();				
			КонецЕсли;
		Иначе
			ОтправитьСМСИДобавитьКупоныНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНеотправленныеСМС(Команда)
	
	УстановитьОтборНеотправленныеСМС();
	
КонецПроцедуры


Процедура ТестОтправкиНаСервере()
	
	Обработки.ГрупповоеДобавлениеКупонов.ОтправитьSMSНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестОтправки(Команда)
	
	ТекЧас = Час(ТекущаяДата());
	
	Если ТекЧас > 10 И ТекЧас < 17 Тогда
		
		Сообщить("С 10 до 17 часов отправка СМС из буфера на сервер производится фоновым заданием. Интерактивная отправка не возможна!", СтатусСообщения.Важное);
		
	Иначе
		
		Если Вопрос("Отправка после 17 часов не желательна! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			ТестОтправкиНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

 
Процедура ОтправитьВсеНеотправленныеСМССервер()

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ОтправитьSMSНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВсеНеотправленныеСМС(Команда)

	ОтправитьВсеНеотправленныеСМССервер();
	
КонецПроцедуры

Процедура ОтправитьВыделенныеНеотправленныеСМССервер(МассивГУИД)

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ОтправитьSMSНаСервер(МассивГУИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыделенныеНеотправленныеСМС(Команда)

	МассивГУИД = Новый Массив;
	ТекВыделенныеСтроки = Элементы.НеотправленныеСМС.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ТекВыделенныеСтроки Цикл
		ТекДанные = Элементы.НеотправленныеСМС.ДанныеСтроки(ВыделеннаяСтрока);
		МассивГУИД.Добавить(ТекДанные.GUID_Записи);
	КонецЦикла;
	
	//
	ОтправитьВыделенныеНеотправленныеСМССервер(МассивГУИД);
	
КонецПроцедуры

//+++АК SHEP 2018.03.23 ИП-00018126
&НаКлиенте
Процедура СписокПокупателейНомерКартыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПокупателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураДанных = Новый Структура("НомерТелефона,ФИО,DiscountCardUID", "", "", "");
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НомерКарты) Тогда
		
		// получаем №телефона, ФИО, DiscountCardUID
		ТекстЗапросаSQL = "
			|SELECT
			|	DiscountCard.Number AS НомерКарты,
			|	CAST(DiscountCard.DiscountCardUID AS char(36)) AS DiscountCardUID,
			|	Customer.Имя AS ФИО,
			|	Customer.Phone AS НомерТелефона
			|FROM Loyalty.dbo.DiscountCard DiscountCard (nolock)
			|	INNER JOIN Loyalty.dbo.Customer Customer (nolock)
			|		ON Customer.Email = DiscountCard.Number
			|WHERE
			|	DiscountCard.Number = " + ВнешниеДанные.ФорматПоля(СокрЛП(ТекущиеДанные.НомерКарты));
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		
		ТЗнДанных = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		ADOСоединение.Close();
		
		Если ТЗнДанных.Количество() = 0 Тогда
			Сообщить("Неправильный номер карты!");
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ТЗнДанных[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	СписокПокупателейФИОПриИзменении(Элементы.СписокПокупателейФИО);
	
КонецПроцедуры

//+++АК SHEP 2018.03.23 ИП-00018126
&НаКлиенте
Процедура СписокПокупателейФИОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПокупателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные.лкТекстСообщения = ПолучитьТекстСообщенияПоШаблону(Объект.ТекстСообщения, ТекущиеДанные);
	
КонецПроцедуры

//+++АК SHEP 2018.03.23 ИП-00018126: выделил в отдельную функцию, оставлен текст оригинала
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстСообщенияПоШаблону(ТекТекст, ТекСтрТаб)
	
	лТекТекст = СокрЛП(СтрЗаменить(ТекТекст	, "<ФИО>"		, СокрЛП(ТекСтрТаб.ФИО)));
	лТекТекст = СокрЛП(СтрЗаменить(лТекТекст, "<НомерКарты>", СокрЛП(ТекСтрТаб.НомерКарты)));
	Возврат лТекТекст;
	
КонецФункции
