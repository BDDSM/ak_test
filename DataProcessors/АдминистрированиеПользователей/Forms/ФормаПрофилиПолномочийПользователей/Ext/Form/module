// Признак того, что доп права модифицированы
Перем МодифицированностьДопПрав; 

// Признак того, что переменная СправочникОбъект содержит инициализированный объект
Перем СправочникОбъектВыбран;

// Служит признаком того, что не нужно обрабатывать активацию строки
Перем мПропуститьОбработкуАктивизацииСтроки;

// Содержит ссылку на копируемый объект при добавлении строки
Перем ПараметрОбъектКопирования;

Перем ЕстьПравоИзменение;

Перем ПредставлениеСправочника;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеСвойства(Кнопка)
	
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, );
	Форма.ОбъектОтбораЗначений   = СправочникОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = СправочникОбъект.Ссылка;
	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыДействиеКатегории(Кнопка)
	
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, );
	Форма.ОбъектОтбораКатегорий = СправочникОбъект.Ссылка;
	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПРАВОЧНИКА-ОБЪЕКТА

// Процедура вызывается для изменения реквизита СправочникОбъект
// Изменение реквизита СправочникОбъект должно выполняться только с помощью этой процедуры
//
Процедура УстановитьСправочникОбъект(НовыйСправочникОбъект)

	Если СправочникОбъектВыбран И СправочникОбъект.Заблокирован() Тогда
		СправочникОбъект.Разблокировать();
	КонецЕсли;
	
	Если НовыйСправочникОбъект = Неопределено Тогда
		СправочникОбъектВыбран = Ложь;
	Иначе
		СправочникОбъектВыбран = Истина;	
	КонецЕсли;
	
	СправочникОбъект = НовыйСправочникОбъект;
	
	Если СправочникОбъектВыбран И НЕ СправочникОбъект.Заблокирован() Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
КонецПроцедуры // УстановитьСправочникОбъект

Функция ОбъектДоступенДляИзменения()

	Возврат ЕстьПравоИзменение И СправочникОбъектВыбран И НЕ СправочникОбъект.ЭтоГруппа;

КонецФункции // 
 
Процедура УстановитьДоступностьДопПрав()

	ОбъектДоступен = ОбъектДоступенДляИзменения();
	
	ДопПраваДоступны = ОбъектДоступен И НЕ ЕстьПолныеПрава(СправочникОбъект.СоставРолей);
	
	ЭлементыФормы.ДеревоПрав.ТолькоПросмотр = НЕ ДопПраваДоступны;
	ЭлементыФормы.КоманднаяПанельДопПрава.Доступность = ДопПраваДоступны;
	
КонецПроцедуры //
 
// Процедура изменяет доступность элементов связанных со справочником-объектом
//
Процедура УстановитьДоступность()

	ОбъектДоступен = ОбъектДоступенДляИзменения();
	
	ЭлементыФормы.СоставРолей.ТолькоПросмотр = НЕ ОбъектДоступен;
	ЭлементыФормы.ОсновнойИнтерфейс.ТолькоПросмотр = НЕ ОбъектДоступен;
	ЭлементыФормы.КоманднаяПанельРоли.Доступность = ОбъектДоступен;
	
	ПанельКнопок = ЭлементыФормы.ОсновныеДействияФормы;
	ПанельКнопок.Кнопки.ДействиеОК.Доступность = ОбъектДоступен;
	ПанельКнопок.Кнопки.ДействиеСохранитьПрофиль.Доступность = ОбъектДоступен;
	
	КнопкаПечать = ПанельКнопок.Кнопки.Найти("Печать");
	Если КнопкаПечать <> Неопределено Тогда
		КнопкаПечать.Доступность = ОбъектДоступен;
	КонецЕсли;
	
	КнопкаПечать = ПанельКнопок.Кнопки.Найти("ДействиеПечать");
	Если КнопкаПечать <> Неопределено Тогда
		КнопкаПечать.Доступность = ОбъектДоступен;
	КонецЕсли;
	
	УстановитьДоступностьДопПрав();
	
КонецПроцедуры // УстановитьДоступность
 
// Функция сохраняет текущий профиль, а также доп. права
// В случае ошибки возвращается ЛОЖЬ
//
Функция СохранитьТекущийПрофиль(Спрашивать)
	
	Если НЕ СправочникОбъектВыбран ИЛИ СправочникОбъект.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ФлагЗаписатьПрофиль  = СправочникОбъект.ЭтоНовый() ИЛИ СправочникОбъект.Модифицированность();
	ФлагЗаписатьДопПрава = СправочникОбъект.ЭтоНовый() ИЛИ МодифицированностьДопПрав;
	
	Если Спрашивать И 
		(ФлагЗаписатьПрофиль 
			ИЛИ ФлагЗаписатьДопПрава) Тогда
		
		Ответ = Вопрос("Профиль """ + СправочникОбъект.Наименование + """ был изменен. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена, ПредставлениеСправочника);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Возврат Истина;
			
		ИначеЕсли Ответ <> КодВозвратаДиалога.Да Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Запись данных должна выполняться в одной транзакции
	НачатьТранзакцию();
	
	Если ФлагЗаписатьПрофиль Тогда
		Если ПустаяСтрока(СправочникОбъект.Наименование) Тогда
			ОтменитьТранзакцию();
			
			Предупреждение("Не указано наименование!");
			
			Возврат Ложь;
		КонецЕсли;
		
		// При записи может произойти ошибка. 
		// Например, ошибка при обновлении состава ролей пользователей ИБ (нет пользователей с административными правами)
		Попытка
			
			СправочникОбъект.Записать();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Предупреждение("Операция не выполнена!");
			ОбщегоНазначения.Сообщение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Внимание, ПредставлениеСправочника);
			
			Возврат Ложь;
			
		КонецПопытки; 
		
	КонецЕсли;
	
	Если ФлагЗаписатьДопПрава Тогда
		СохранитьДопПрава();
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	
	ОбновитьЗаголовок();
	
	Если ЕстьПолныеПрава(СправочникОбъект.СоставРолей) Тогда
		// Обновим значения доп.прав
		ЗаполнитьДеревоДопПрав();
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // СохранитьТекущийПрофиль

// Процедура оповещает форму пользователей ФормаСОтбором
// чтобы показать пользователей текущего профиля
//
Процедура ОповеститьФормуПользователейСОтборомПоПрофилю()

	
	Если СправочникОбъектВыбран Тогда
		ПрофильПолномочий = СправочникОбъект.Ссылка;
	Иначе
		ПрофильПолномочий = Неопределено;
	КонецЕсли;
	
	Оповестить("ПоказатьПользователейПрофиля", ПрофильПолномочий, ЭтаФорма);	
	
КонецПроцедуры // ОповеститьФормуПользователейСОтборомПоПрофилю

// Процедура выполняет действия связанные с активизацией строки дерева профилей
// Если активируемая строка относится к другому профилю, 
// то для модифицированного профиля выдается запрос на сохранение.
// Если пользователь отменил сохранение, то активная строка не меняется
//
Процедура ВыполнитьПриАктивизацииСтрокиДереваПрофилей()
	
	Если мПропуститьОбработкуАктивизацииСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ДеревоПрофилей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные <> СправочникОбъект.Ссылка Тогда
		// Перешли на другой профиль пользователя
		
		Если НЕ СохранитьТекущийПрофиль(Истина) Тогда
			// Отменили выбор строки. Сделаем активной строку текущего профиля
			мПропуститьОбработкуАктивизацииСтроки = Истина;
			ЭлементыФормы.ДеревоПрофилей.ТекущаяСтрока = СправочникОбъект.Ссылка;
			мПропуститьОбработкуАктивизацииСтроки = Ложь;
			Возврат;
		КонецЕсли;
		
		ТипДанных = ТипЗнч(ТекущиеДанные);
		Если ТипДанных = Тип("СправочникОбъект.ПрофилиПолномочийПользователей") Тогда
			НовыйСправочникОбъект = ТекущиеДанные;
			
		ИначеЕсли ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Ссылка.Пустая() Тогда
			
			НовыйСправочникОбъект = Неопределено;
		Иначе
			
			НовыйСправочникОбъект = ТекущиеДанные.Ссылка.ПолучитьОбъект();
		КонецЕсли; 
		
		УстановитьСправочникОбъект(НовыйСправочникОбъект);
		
		ЗаполнитьДеревоДопПрав();
	КонецЕсли; 
	
	УстановитьДоступность();
	ОбновитьЗаголовок();
	
	ОповеститьФормуПользователейСОтборомПоПрофилю();
	
КонецПроцедуры // ВыполнитьПриАктивизацииСтрокиДереваПрофилей

// Процедура заполняет список интерфейсами конфигурации
//
Процедура ЗаполнитьСписокИнтерфейсовКонфигурации()

	Список = Новый СписокЗначений;
	Для каждого ЭлКоллекции Из Метаданные.Интерфейсы Цикл
		Список.Добавить(ЭлКоллекции.Имя, ЭлКоллекции.Синоним);
	КонецЦикла; 
	
	ЭлементыФормы.ОсновнойИнтерфейс.СписокВыбора = Список;
	
КонецПроцедуры // ЗаполнитьСписокИнтерфейсовКонфигурации

// Обработчик события ПриИзменении поля выбора ОсновнойИнтерфейс
//
Процедура ОсновнойИнтерфейсПриИзменении(Элемент)
	
	ОбновитьЗаголовок();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЕРЕВА ПРОФИЛЕЙ

// Обработчик события ПриАктивизацииСтроки дерева профилей
//
Процедура ДеревоПрофилейПриАктивизацииСтроки(Элемент)
	
	ВыполнитьПриАктивизацииСтрокиДереваПрофилей();

КонецПроцедуры // ДеревоПрофилейПриАктивизацииСтроки

// Процедура обрабатывает смену профиля пользователя
//
Процедура ОбработкаСменыПрофиляПользователя(ПользовательОбъект)


КонецПроцедуры // ОбработкаСменыПрофиляПользователя

// Процедура вызывается до начала изменения строки в дереве профилей
//
Процедура ВыполнитьДоИзмененияОбъектаВСписке()

	Если СправочникОбъект.Заблокирован() Тогда
		СправочникОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДоИзмененияОбъектаВСписке
 
// Процедура вызывается после изменения строки в дереве профилей
//
Процедура ВыполнитьПослеИзмененияОбъектаВСписке(НоваяСтрока, ОтменаРедактирования)

	ТекущиеДанные = ЭлементыФормы.ДеревоПрофилей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьСправочникОбъект(Неопределено);
		Возврат;
	КонецЕсли; 
	
	СправочникОбъектМодифицирован = СправочникОбъектВыбран И СправочникОбъект.Модифицированность();
	Если СправочникОбъектМодифицирован Тогда
		ТекущийСоставРолей = СправочникОбъект.СоставРолей.Выгрузить();
		ТекущийОсновнойИнтерфейс = СправочникОбъект.ОсновнойИнтерфейс;
	КонецЕсли; 
	
	Если СправочникОбъектВыбран Тогда
		СправочникОбъект.Прочитать();
		НовыйСправочникОбъект = СправочникОбъект;
	Иначе	
		НовыйСправочникОбъект = ТекущиеДанные.Ссылка.ПолучитьОбъект();
	КонецЕсли;	
	
	УстановитьСправочникОбъект(НовыйСправочникОбъект);
	
	Если СправочникОбъектМодифицирован Тогда
		СправочникОбъект.СоставРолей.Загрузить(ТекущийСоставРолей);
		СправочникОбъект.ОсновнойИнтерфейс = ТекущийОсновнойИнтерфейс;
	КонецЕсли;
	
	Если ПараметрОбъектКопирования <> Неопределено И НЕ ПараметрОбъектКопирования.ЭтоГруппа Тогда
		Ответ = Вопрос("Копировать дополнительные права?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Создание профиля");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьДеревоДопПрав(ПараметрОбъектКопирования);
			СохранитьДопПрава();
		КонецЕсли;
		ПараметрОбъектКопирования = Неопределено;
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьЗаголовок();
	
КонецПроцедуры // ВыполнитьПослеИзмененияОбъектаВСписке

// Обработчик события ПередНачаломИзменения дерева профилей
//
Процедура ДеревоПрофилейПередНачаломИзменения(Элемент, Отказ)
	
	ВыполнитьДоИзмененияОбъектаВСписке();
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования дерева профилей
//
Процедура ДеревоПрофилейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВыполнитьПослеИзмененияОбъектаВСписке(НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

// Обработчик события ПередИзменениемРодителя дерева профилей
//
Процедура ДеревоПрофилейПередИзменениемРодителя(Элемент, Отказ)
	
	Отказ = Истина;
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ДеревоПрофилей.ТекущиеДанные;
	
	ФормаВыбораГруппы = Справочники.ПрофилиПолномочийПользователей.ПолучитьФормуВыбораГруппы();
	РезультатВыбора = ФормаВыбораГруппы.ОткрытьМодально();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДоИзмененияОбъектаВСписке();
	
	Объект = ТекущиеДанные.Ссылка.ПолучитьОбъект();
	Объект.Родитель = РезультатВыбора;
	Попытка
	
		Объект.Записать();
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПоказатьИнформациюОбОшибке(Инфо);
		
	КонецПопытки;
	
	ВыполнитьПослеИзмененияОбъектаВСписке(Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления дерева профилей
//
Процедура ДеревоПрофилейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Копирование Тогда
		ПараметрОбъектКопирования = ЭлементыФормы.ДеревоПрофилей.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУстановкойПометкиУдаления дерева профилей
//
Процедура ДеревоПрофилейПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ДеревоПрофилей.ТекущиеДанные;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = "Снять с объекта пометку на удаление?";
	Иначе
		ТекстВопроса = "Пометить объект на удаление?";
	КонецЕсли; 
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;	 
	
	ВыполнитьДоИзмененияОбъектаВСписке();
	
	Попытка
		
		Объект = ТекущиеДанные.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);	
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПоказатьИнформациюОбОшибке(Инфо);
		
	КонецПопытки;
	
	ВыполнитьПослеИзмененияОбъектаВСписке(Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования дерева профилей
//
Процедура ДеревоПрофилейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		УстановитьСправочникОбъект(Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеНазначитьПрофильПользователям командной панели
// 
Процедура ДействияФормыДействиеНазначитьПрофильПользователям(Кнопка)
	
	ЗначенияСвойств = Неопределено;
	Если СправочникОбъектВыбран Тогда
		ЗначенияСвойств = Новый Структура("ПрофильПолномочийПользователя", СправочникОбъект.Ссылка);
	КонецЕсли;
	
	УправлениеПользователями.ОткрытьГрупповуюОбработкуПользователей(ЗначенияСвойств);
	
КонецПроцедуры // ОсновныеДействияФормыДействиеНазначитьПрофильПользователям

// Обработчик события нажатия на кнопку ДействиеПоказатьПользователейСТекущимПрофилем командной панели
// 
Процедура ДействияФормыДействиеПоказатьПользователейСТекущимПрофилем(Кнопка)
	
	ФормаСОтбором = Справочники.Пользователи.ПолучитьФорму("ФормаСОтбором");
	ФормаСОтбором.НачальноеЗначениеВыбора = СправочникОбъект.Ссылка;
	ФормаСОтбором.Открыть();
	
КонецПроцедуры // ОсновныеДействияФормыДействиеПоказатьПользователейСТекущимПрофилем

// Обработчик события нажатия на кнопку ДействиеОбменВыгрузитьПрофили командной панели
// 
Процедура ДействияФормыДействиеОбменВыгрузитьПрофили(Кнопка)
	
	ДиалогВыбораФайлаОбмена = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайлаОбмена.Фильтр = "Файл данных (*.xml)|*.xml";
	ДиалогВыбораФайлаОбмена.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлаОбмена.Заголовок = "Выберите файл";

	Если НЕ ДиалогВыбораФайлаОбмена.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаОбмена = ДиалогВыбораФайлаОбмена.ПолноеИмяФайла;
	
	ПравилаОбменаПрофилиТекст = Справочники.ПрофилиПолномочийПользователей.ПолучитьМакет("ПравилаОбменаПрофили");
	
	ИмяФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xml");
	
	ПравилаОбменаПрофилиТекст.Записать(ИмяФайлаПравилОбмена);
	ПравилаОбменаПрофилиТекст = Неопределено;
	
	УниверсальныйОбменДаннымиXML = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	УниверсальныйОбменДаннымиXML.РежимОбмена = "Выгрузка";
	УниверсальныйОбменДаннымиXML.ИмяФайлаПравилОбмена = ИмяФайлаПравилОбмена;
	УниверсальныйОбменДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбмена;
	
	УниверсальныйОбменДаннымиXML.ВыполнитьВыгрузку();
	
КонецПроцедуры // ОсновныеДействияФормыДействиеОбменВыгрузитьПрофили

// Обработчик события нажатия на кнопку ДействиеОбменЗагрузитьПрофили командной панели
// 
Процедура ДействияФормыДействиеОбменЗагрузитьПрофили(Кнопка)
	
	ДиалогВыбораФайлаОбмена = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаОбмена.Фильтр = "Файл данных (*.xml)|*.xml";
	ДиалогВыбораФайлаОбмена.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлаОбмена.Заголовок = "Выберите файл";

	Если НЕ ДиалогВыбораФайлаОбмена.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаОбмена = ДиалогВыбораФайлаОбмена.ПолноеИмяФайла;
	
	УниверсальныйОбменДаннымиXML = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	УниверсальныйОбменДаннымиXML.РежимОбмена = "Загрузка";
	УниверсальныйОбменДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбмена;
	
	УниверсальныйОбменДаннымиXML.ВыполнитьЗагрузку();
	
КонецПроцедуры // ОсновныеДействияФормыДействиеОбменЗагрузитьПрофили

// Обработчик события нажатия на кнопку "Создать профили" командной панели
// 
Процедура ДействияФормыДействиеСоздатьПрофили(Кнопка)
	
	Справочники.ПрофилиПолномочийПользователей.ПолучитьФорму("СозданиеПрофилей").Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЕРЕВА ДОП ПРАВ

// Функция возвращает признак доступности доп прав
// Доп права не доступны для профиля содержащего роль "Полные права"
//
Функция ЕстьПолныеПрава(СоставРолей)

	ЕстьПолныеПрава = СоставРолей.Найти("ПолныеПрава", "ИмяРоли") <> Неопределено;
	
	Возврат ЕстьПолныеПрава;

КонецФункции // ДопПраваДоступны
 
// Процедура сохраняет дополнительные права
//
Процедура СохранитьДопПрава()
	
	НаборЗаписей = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(СправочникОбъект.Ссылка);
	
	// Для профиля с ролю ПолныеПрава записывается пустой набор, т.к. все доп права считаются разрешенными
	Если НЕ ЕстьПолныеПрава(СправочникОбъект.СоставРолей) Тогда
		
		СписокДопПрав = ДеревоПрав.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
		
		Для каждого СтрокаДерева Из СписокДопПрав Цикл
			Запись = НаборЗаписей.Добавить();
			
			Запись.Пользователь = СправочникОбъект.Ссылка;
			Запись.Право        = СтрокаДерева.Право;
			Запись.Значение     = СтрокаДерева.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	МодифицированностьДопПрав = Ложь;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьДопПрава

// Процедура заполняет дерево доп прав значениям
//
// Параметры:
//		ПрофильПользователя	- Ссылка на профиль пользователя, значения доп прав которого необходимо получить.
//								Если параметр не определен, то берется текущий профиль
//
Процедура ЗаполнитьДеревоДопПрав(ПрофильОснование = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ПрофильОснование <> Неопределено Тогда
		ПользовательПрав = ПрофильОснование;
	ИначеЕсли СправочникОбъектВыбран Тогда
		ПользовательПрав = СправочникОбъект.Ссылка;
	Иначе
		ПользовательПрав = Неопределено;
	КонецЕсли; 
	
	Если ПользовательПрав = Неопределено 
		// Для пользователя с полными права заполняем пустые значения
		ИЛИ ЕстьПолныеПрава(ПользовательПрав.СоставРолей) Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Права.Родитель,
			|	Права.Ссылка,
			|	Права.ЭтоГруппа КАК ЭтоГруппа,
			|	Неопределено КАК Значение 
			|ИЗ
			|	ПланВидовХарактеристик.ПраваПользователей КАК Права
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Права.Наименование";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Права.Родитель,
			|	Права.Ссылка,
			|	Права.ЭтоГруппа КАК ЭтоГруппа,
			|	ЗначениеПрав.Значение
			|ИЗ
			|	ПланВидовХарактеристик.ПраваПользователей КАК Права
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначениеПрав
			|		ПО (ЗначениеПрав.Право = Права.Ссылка)
			|			И (ЗначениеПрав.Пользователь = &ПользовательПрав)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Права.Наименование";
			
		Запрос.УстановитьПараметр("ПользовательПрав", ПользовательПрав);
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = ДеревоПрав;
		Иначе
			СтрокаГруппы = ДеревоПрав.Строки.Найти(Выборка.Родитель, "Право", Истина);
			Если СтрокаГруппы = Неопределено Тогда
				СтрокаГруппы = ДеревоПрав.Строки.Добавить();
				СтрокаГруппы.Право = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		КонецЕсли;		
		
		СтрокаПрава = СтрокаГруппы.Строки.Найти(Выборка.Ссылка, "Право");
		Если СтрокаПрава = Неопределено Тогда
			СтрокаПрава = СтрокаГруппы.Строки.Добавить();
			СтрокаПрава.Право     = Выборка.Ссылка;
			СтрокаПрава.ЭтоГруппа = Выборка.ЭтоГруппа;
		КонецЕсли; 
		
		Если НЕ СтрокаПрава.ЭтоГруппа Тогда
			
			СтрокаПрава.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);					
			
		КонецЕсли; 
		
	КонецЦикла;	
	
	МодифицированностьДопПрав = Ложь;
	
КонецПроцедуры // ЗаполнитьДеревоДопПрав

// Функция возвращает выбранные настройки доп прав
// Если выбрана группа доп прав, то будут обработаны ее права
// Если передан параметр ОтборПоТипуЗначения, то будут выбраны права, тип значения которых совпадает
//
Функция ПолучитьВыбранныеНастройкиДопПрав(ОтборПоТипуЗначения = Неопределено)

	// Если выбрана группа доп прав, то будут обработаны ее права
	СписокДопПрав = Новый Массив;
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоПрав.ВыделенныеСтроки;
	Для каждого СтрокаДерева Из ВыделенныеСтроки Цикл
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			Если ОтборПоТипуЗначения <> Неопределено И ТипЗнч(СтрокаДерева.Значение) <> ОтборПоТипуЗначения Тогда
				Продолжить;
			КонецЕсли; 
			Если СписокДопПрав.Найти(СтрокаДерева) = Неопределено Тогда
				СписокДопПрав.Добавить(СтрокаДерева);
			КонецЕсли;
		Иначе
			ПраваГруппы = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
			Для каждого ЭлКоллекции Из ПраваГруппы Цикл
				Если ОтборПоТипуЗначения <> Неопределено И ТипЗнч(ЭлКоллекции.Значение) <> ОтборПоТипуЗначения Тогда
					Продолжить;
				КонецЕсли; 
				Если СписокДопПрав.Найти(ЭлКоллекции) = Неопределено Тогда
					СписокДопПрав.Добавить(ЭлКоллекции);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДопПрав;

КонецФункции // ПолучитьВыбранныеНастройкиДопПрав
	
// Процедура устанавливает новое значение доп прав 
// имеющих тип значения совпадающий с новым значением
//
Процедура УстановитьЗначениеДопПрава(ПравоРазрешено)
	
	ТипНовогоЗначения = Тип("Булево");
	
	// Получим доп права, которые надо обработать
	СписокДопПрав = ПолучитьВыбранныеНастройкиДопПрав(ТипНовогоЗначения);
	
	Для каждого ЭлКоллекции Из СписокДопПрав Цикл
		ЭлКоллекции.Значение = ПравоРазрешено
	КонецЦикла;
	
	МодифицированностьДопПрав = Истина;
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // УстановитьЗначениеДопПрава

// Процедура копирует выбранные доп. права другим профилям
//
Процедура КопироватьДопПрава()

	// ВЫБОР ПРОФИЛЕЙ
	
	ФормаВыбора = Справочники.ПрофилиПолномочийПользователей.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите профили для копирования доп.прав";
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.МножественныйВыбор = Истина;
	
	Если СправочникОбъектВыбран Тогда		
		// Без текущего профиля
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Установить(СправочникОбъект.Ссылка);
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		СписокПрофилей = РезультатВыбора;
	Иначе
		СписокПрофилей = Новый Массив;
		СписокПрофилей.Добавить(РезультатВыбора);
	КонецЕсли;
	
	
	// КОПИРОВАНИЕ
	ТекстВопроса = "Будет выполнено копирование доп.прав для выбранных профилей!";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена, "Копирование доп.прав");
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	СписокДопПрав = ПолучитьВыбранныеНастройкиДопПрав();
	
	ТаблицаДопПрав = Новый ТаблицаЗначений;
	ТаблицаДопПрав.Колонки.Добавить("Право");
	ТаблицаДопПрав.Колонки.Добавить("Значение");
	Для каждого СтрокаСпискаДопПрав Из СписокДопПрав Цикл
		СтрокаТаблицыДопПрав = ТаблицаДопПрав.Добавить();
		СтрокаТаблицыДопПрав.Право    = СтрокаСпискаДопПрав.Право;
		СтрокаТаблицыДопПрав.Значение = СтрокаСпискаДопПрав.Значение;
	КонецЦикла; 
	
	УправлениеДопПравамиПользователей.КопироватьДополнительныеПрава(ТаблицаДопПрав, СписокПрофилей);
	
КонецПроцедуры // КопироватьДопПрава
 
// Обработчик события ПриВыводеСтроки дерева прав
//
Процедура ДеревоПравПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Право.ОтображатьКартинку=Истина;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Право.ИндексКартинки=0;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь
	Иначе
		ОформлениеСтроки.Ячейки.Право.ИндексКартинки=1;
		
		Если ДанныеСтроки.Право.ТипЗначения.СодержитТип(Тип("Булево"))
			И ДанныеСтроки.Право.ТипЗначения.Типы().Количество()=1 Тогда
			ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
			ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
			ОформлениеСтроки.Ячейки.Значение.Флажок = ДанныеСтроки.Право.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка дерева прав
//
Процедура ДеревоПравПриИзмененииФлажка(Элемент, Колонка)
	
	СтрокаДерева = ЭлементыФормы.ДеревоПрав.ТекущиеДанные;
	
	СтрокаДерева.Значение = НЕ СтрокаДерева.Право.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
	
	МодифицированностьДопПрав = Истина;
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля Значение дерева прав
//
Процедура ДеревоЗначениеПриИзменении(Элемент)
	
	МодифицированностьДопПрав = Истина;
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеУстановитьФлажки дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеУстановитьФлажки(Кнопка)
	
	УстановитьЗначениеДопПрава(Истина);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеСнятьФлажки дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеСнятьФлажки(Кнопка)
	
	УстановитьЗначениеДопПрава(Ложь);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеКопироватьПрава дерева прав
//
Процедура КоманднаяПанельДопПраваДействиеКопироватьПрава(Кнопка)
	
	КопироватьДопПрава();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСКА РОЛЕЙ

// Процедура открывает форму для побора (выбора) ролей
//
Процедура ОткрытьПодборРолей()

	УправлениеПользователямиКлиент.ОткрытьПодборРолей(СправочникОбъект.СоставРолей, СправочникОбъект.Наименование);
	
	УстановитьДоступностьДопПрав();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // ОткрытьПодборРолей
 
// Процедура удаляет из состава профиля выбранные роли
//
Процедура УдалитьВыбранныеРоли()

	СтрокиКУдалениюСпросить = Новый Массив;
	ТекстКУдалениюСпросить = "";
	
	СтрокиКУдалению = Новый Массив;
	Для каждого РольОбъекта Из ЭлементыФормы.СоставРолей.ВыделенныеСтроки Цикл
		Если РольОбъекта.ИмяРоли = "ПолныеПрава" 
			ИЛИ РольОбъекта.ИмяРоли = "АдминистраторПользователей" Тогда
			
			СтрокиКУдалениюСпросить.Добавить(РольОбъекта);
			ТекстКУдалениюСпросить = ТекстКУдалениюСпросить + Символы.ПС + " - " + РольОбъекта.ПредставлениеРоли;
		Иначе
			СтрокиКУдалению.Добавить(РольОбъекта);
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокиКУдалениюСпросить.Количество() <> 0 Тогда
		ТекстВопроса = "Вы действительно хотите удалить роли?" + ТекстКУдалениюСпросить;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого ЭлКоллекции Из СтрокиКУдалениюСпросить Цикл
				СтрокиКУдалению.Добавить(ЭлКоллекции);
			КонецЦикла; 
		КонецЕсли;			 
	КонецЕсли; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		СправочникОбъект.СоставРолей.Удалить(СтрокаКУдалению);	
	КонецЦикла; 
	
	УстановитьДоступность();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // УдалитьВыбранныеРоли

Процедура КоманднаяПанельРолиДействиеИзменить(Кнопка)
	
	ОткрытьПодборРолей();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения списка ролей 
//
Процедура СоставРолейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления списка ролей 
//
Процедура СоставРолейПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОткрытьПодборРолей();
	
КонецПроцедуры

// Обработчик события ПередУдалением списка ролей 
//
Процедура СоставРолейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьВыбранныеРоли();
	
	ОбновитьЗаголовок();	
	
КонецПроцедуры

// Обработчик события формы ПриВыводеСтроки табличного поля СоставРолей
//
Процедура СоставРолейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Лев(ДанныеСтроки.ИмяРоли, 5) = "Право" Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА ПЕЧАТИ

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли; 
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(СправочникОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	Если НЕ СправочникОбъектВыбран Тогда
		Возврат;
	КонецЕсли; 
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(СправочникОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(Справочники.ПрофилиПолномочийПользователей.СоздатьЭлемент(), ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "ОК"
//
Процедура ОсновныеДействияФормыДействиеОК(Кнопка)
	
	Если СохранитьТекущийПрофиль(Ложь) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеСохранитьПрофиль
// 
Процедура ОсновныеДействияФормыДействиеСохранитьПрофиль(Кнопка)
	
	СохранитьТекущийПрофиль(Ложь);
	
КонецПроцедуры // ОсновныеДействияФормыДействиеСохранитьПрофиль

// Процедура обновляет заголовок формы.
// Вызывается при изменении данных.
//
Процедура ОбновитьЗаголовок()

	ТекстЗаголовка = ПредставлениеСправочника;
	
	Если СправочникОбъектВыбран Тогда
		Если СправочникОбъект.ЭтоНовый() Тогда
			ТекстЗаголовка = ТекстЗаголовка + ": Новый";
			НадписьТекущийПрофиль = " Текущий профиль: <Новый>";
		Иначе			
			ТекстЗаголовка = ТекстЗаголовка + ": " + СправочникОбъект.Наименование;
			Если СправочникОбъект.Модифицированность() 
				ИЛИ МодифицированностьДопПрав Тогда
				
				ТекстЗаголовка = ТекстЗаголовка + " * ";
			КонецЕсли; 
			НадписьТекущийПрофиль = " Текущий профиль: " + СправочникОбъект.Наименование;
		КонецЕсли; 
	Иначе
		НадписьТекущийПрофиль = " Текущий профиль: <не выбран>";
	КонецЕсли; 
	
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры // ОбновитьЗаголовок

// Обработчик события ПередЗакрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = НЕ СохранитьТекущийПрофиль(Истина);
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанПользователь" Тогда
		//Параметр - ПользовательОбъект
		//Источник - Имя источника
		Если Параметр.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаСменыПрофиляПользователя(Параметр);
		
	ИначеЕсли ИмяСобытия = "НастройкиПользователя_ОтменаСохранения" И Источник = ЭтаФорма Тогда
		// Событие от формы настроек пользователя. 
		// Возникает когда пользователь при сохранении настроек выбрал "Отмена".
		// Если отмена сохранения настроек была выполнена в момент смены активной строки
		// то установим активную строку, содержащую ссылку на владельца настроек
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПредставлениеСправочника = СправочникОбъект.Метаданные().Синоним;
	
	ЗаполнитьДеревоДопПрав();
	
	// Заполним списки выбора
	ЗаполнитьСписокИнтерфейсовКонфигурации();
	
	ЕстьПравоИзменение = ПравоДоступа("Изменение", СправочникОбъект.Метаданные());
	
	ЕстьПравоАдминистрированияПользователей = УправлениеДопПравамиПользователей.ЕстьПравоАдминистрированияПользователей();
	
	Если НЕ ЕстьПравоАдминистрированияПользователей Тогда 

		// удаляем подменю "Администрирование"
		КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.ПодменюАдминистрированиеПользователей);
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.РазделительАдминистрирование);
		
	КонецЕсли;
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры


ДеревоПрав.Колонки.Добавить("ЭтоГруппа");

МодифицированностьДопПрав   = Ложь;
СправочникОбъектВыбран      = Ложь;

мПропуститьОбработкуАктивизацииСтроки = Ложь;
ПараметрОбъектКопирования = Неопределено;