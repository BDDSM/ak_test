Перем RegExp;
Перем ТЗ_ИсходныеДанные;

///////////////////////////////////////////////////////////////////
//ИСХОДНЫЕ ФАЙЛЫ

&НаКлиенте
Процедура КомандаЗаполнитьФайыСканов(Команда)
	
	//
	ТЗ_ИсходныеФайлы.Очистить();
	
	//
	Если ЗначениеЗаполнено(Объект.КаталогОбработанные) Тогда
		
		//
		НайденныеФайлыXLS = НайтиФайлы(Объект.КаталогОбработанные, "*.xls");
		Для каждого НайденныйXLS Из НайденныеФайлыXLS Цикл
			
			//
			Если НайденныйXLS.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			ИмяXLS = СокрЛП(НайденныйXLS.Имя);
			
			//
			НоваяСтрока = ТЗ_ИсходныеФайлы.Добавить();
			НоваяСтрока.ФайлXLS = ИмяXLS;
			НоваяСтрока.ПризнакОбработан = Истина;
			
			//
			НоваяСтрока.ДатаИзменения = НайденныйXLS.ПолучитьВремяИзменения();
			
			//
			ИмяФайла = СокрЛП(НайденныйXLS.ИмяБезРасширения) + "";
			ИмяСканДляПоиска = ИмяФайла + ".*";
			
			//
			НайденныеФайлы = НайтиФайлы(Объект.КаталогОбработанные, ИмяСканДляПоиска);
			Если НайденныеФайлы.Количество() > 0  Тогда
				
				//
				Для каждого НайденныйФайл Из НайденныеФайлы Цикл
					
					//
					Если НайденныйФайл.Расширение <> ".xls" Тогда
						
						//
						//НоваяСтрока.ДатаИзменения = НайденныйФайл.ПолучитьВремяИзменения();
						
						//
						НоваяСтрока.ФайлСкан = НайденныеФайлы[0].Имя;	
						
						//
						Прервать;
						
					КонецЕсли; 
				
				КонецЦикла; 
				
			КонецЕсли; 
			
			//
			НоваяСтрока.ID = НоваяСтрока.ПолучитьИдентификатор() + 1;
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(Объект.КаталогСканов) Тогда
		
		//
		НайденныеФайлыСканов = НайтиФайлы(Объект.КаталогСканов, "*.*");
		Для каждого НайденныйСкан Из НайденныеФайлыСканов Цикл
			
			//
			Если НайденныйСкан.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	
			
			//
			Если НайденныйСкан.Расширение = ".txt" Тогда
				Продолжить;
			КонецЕсли;
			
			//
			Если НайденныйСкан.Расширение = ".db" Тогда
				Продолжить;
			КонецЕсли;
			
			//
			ИмяСкана = СокрЛП(НайденныйСкан.Имя);
			
			//
			ИмяXLSДляПоиска = СокрЛП(НайденныйСкан.ИмяБезРасширения) + "";
			ИмяXLS = ИмяXLSДляПоиска + "*.xls";
			
			//
			НоваяСтрока = ТЗ_ИсходныеФайлы.Добавить();
			НоваяСтрока.ФайлСкан = ИмяСкана;
			
			//
			НоваяСтрока.ДатаИзменения = НайденныйСкан.ПолучитьВремяИзменения();
			
			//
			НайденныеФайлыXLS = НайтиФайлы(Объект.КаталогXLS, ИмяXLS);
			Если НайденныеФайлыXLS.Количество() > 0  Тогда
				
				//
				НоваяСтрока.ДатаИзменения = НайденныеФайлыXLS[0].ПолучитьВремяИзменения();
				
				//
				НоваяСтрока.ФайлXLS = НайденныеФайлыXLS[0].Имя;
				
			Иначе	
				
				//
				НоваяСтрока.Пометка = Истина;
				
			КонецЕсли; 
			
			//
			НоваяСтрока.ID = НоваяСтрока.ПолучитьИдентификатор() + 1;
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(Объект.КаталогXLS) Тогда
	
		//
		НайденныеФайлыXLS = НайтиФайлы(Объект.КаталогXLS, "*.*");
		Для каждого НайденныйXLS Из НайденныеФайлыXLS Цикл
			
			//
			Если НайденныйXLS.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			//
			Если НайденныйXLS.Расширение = ".txt" Тогда
				Продолжить;
			КонецЕсли;
			
			//
			Если НайденныйXLS.Расширение = ".db" Тогда
				Продолжить;
			КонецЕсли;
			
			//
			СП = Новый Структура("ФайлXLS", НайденныйXLS.Имя);
			
			//
			НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
			Если НайденныеСтроки.Количество() = 0 Тогда
			
				//
				НоваяСтрока = ТЗ_ИсходныеФайлы.Добавить();	
				НоваяСтрока.ФайлXLS = НайденныйXLS.Имя;
				
				//
				НоваяСтрока.ДатаИзменения = НайденныйXLS.ПолучитьВремяИзменения();
				
				//
				НоваяСтрока.ID = НоваяСтрока.ПолучитьИдентификатор() + 1;
			
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеПредпросмотра(ИмяФайла)
	
	//
	HTMLПредпросмотр = "<HTML><HEAD>
					|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
					|<META name=GENERATOR content=""MSHTML 8.00.7601.18870""></HEAD>
					|<BODY>";
					
					
	//
	стрИзображение = "<DIV><IMG style=""width:99%;"" src=""#REF""></DIV>"; 
	
	//
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
		
		//
		Если Файл.Расширение = ".pdf" Тогда
			
			//
			стрИзображение = "<DIV><EMBED style=""width:99%;height:100%;"" src=""#REF""></DIV>";
			
		Иначе
			
			//
			стрИзображение = "<DIV><IMG style=""width:99%;"" src=""#REF""></DIV>";
			
		КонецЕсли;							
		
		//
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		//
		HTMLПредпросмотр = HTMLПредпросмотр + СтрЗаменить(стрИзображение, "#REF", ИмяФайла);
		
	Иначе
		
		//
		HTMLПредпросмотр = HTMLПредпросмотр + СтрЗаменить(стрИзображение, "#REF", "");
		
	КонецЕсли;						
	
	//
	HTMLПредпросмотр = HTMLПредпросмотр + "</BODY></HTML>";

КонецПроцедуры

&НаКлиенте
Процедура _ТЗ_ИсходныеФайлыПриАктивизацииСтроки(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ТекущиеДанные = Элементы.ТЗ_ИсходныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ФайлыТекущаяСтрока = Элементы.ТЗ_ИсходныеФайлы.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ФайлыТекущаяСтрока = Элементы.ТЗ_ИсходныеФайлы.ТекущаяСтрока;
	
	//
	HTMLПредпросмотр = "<HTML><HEAD>
					|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
					|<META name=GENERATOR content=""MSHTML 8.00.7601.18870""></HEAD>
					|<BODY>";
	
	//
	Если ТекущиеДанные.РодительID <> 0 Тогда
		СП = Новый Структура("РодительID", ТекущиеДанные.РодительID);
	Иначе	
		СП = Новый Структура("ID", ТекущиеДанные.ID);
	КонецЕсли; 
	
	//
	НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	
		//
		стрИзображение = "<DIV><IMG style=""width:99%;"" src=""#REF""></DIV>"; 
		
		//
		Файл = Новый Файл(Объект.КаталогСканов + "\" + НайденнаяСтрока.ФайлСкан);
		Если НЕ Файл.ЭтоКаталог() И Файл.Существует() Тогда
			
			//
			Если Файл.Расширение = ".pdf*" Тогда
				
				//
				стрИзображение = "<DIV><EMBED style=""width:99%;height:100%;"" src=""#REF""></DIV>";
				
			Иначе
				
				//
				стрИзображение = "<DIV><IMG style=""width:99%;"" src=""#REF""></DIV>";
				
			КонецЕсли;							
			
			//
			ДвоичныеДанные = Новый ДвоичныеДанные(Объект.КаталогСканов + "\" + НайденнаяСтрока.ФайлСкан);
			ИзображениеСкан = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			//
			HTMLПредпросмотр = HTMLПредпросмотр + СтрЗаменить(стрИзображение, "#REF", Объект.КаталогСканов + "\" + НайденнаяСтрока.ФайлСкан);
			
		Иначе
			
			//
			HTMLПредпросмотр = HTMLПредпросмотр + СтрЗаменить(стрИзображение, "#REF", "");
			
		КонецЕсли;	
	
	КонецЦикла; 
	
	//
	HTMLПредпросмотр = HTMLПредпросмотр + "</BODY></HTML>";
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ИсходныеФайлыПриАктивизацииСтроки(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ТекущиеДанные = Элементы.ТЗ_ИсходныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ФайлыТекущаяСтрока = (Элементы.ТЗ_ИсходныеФайлы.ТекущаяСтрока + 1) Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ФайлыТекущаяСтрока = Элементы.ТЗ_ИсходныеФайлы.ТекущаяСтрока + 1; 
	
	//
	ИмяФайла = Объект.КаталогСканов + "\" + ТекущиеДанные.ФайлСкан;
	ОбновитьПолеПредпросмотра(ИмяФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайл()

	//
	HTMLПредпросмотр = "";
	
	//
	Прочитать(Неопределено);
	
	//
	Состояние("Анализ данных...");
	Разобрать(Неопределено);
	
	//
	ЗаполнитьВидОперации();
	
	//
	УстановитьСвойстваЭлементов();
	
	//
	Состояние("Анализ завершен");
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаОбработка;	

	//
	ОбновитьПолеПредпросмотра(ТекущееИмяФайлаСкана);
	
КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ИсходныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	ТекущаяСтрока = ТЗ_ИсходныеФайлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(ТекущаяСтрока.ФайлXLS) Тогда
		
		//
		ПолноеИмяФайлаXLS = Объект.КаталогXLS + "\" + ТекущаяСтрока.ФайлXLS;
		ПолноеИмяФайлаСкана = Объект.КаталогСканов + "\" + ТекущаяСтрока.ФайлСкан;
		
		//
		Файл = Новый Файл(ПолноеИмяФайлаXLS);
		Если Файл.Существует() Тогда
			
			//
			ТекущееИмяФайлаДляАнализа = ПолноеИмяФайлаXLS;
			ТекущееИмяФайлаСкана = ПолноеИмяФайлаСкана;
			
			//
			ОбработатьФайл();
			
		Иначе	
			ТекущееИмяФайлаДляАнализа = "";
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
//ОБРАБОТКА ВХОДЯЩЕГО ФАЙЛА

Процедура ОпределитьВариантРасчетаНДС(Знач Текст)
	
	//
	Текст = СокрЛП(Текст);
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, " :", ":");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	Текст = нрег(Текст);
	
	//
	ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле");
	Если Найти(Текст, "числе") > 0 Тогда
		
		//
		ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле");	
		
	ИначеЕсли Найти(Текст, "сверху") > 0 Тогда
		
		//
		ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху");	
		
	ИначеЕсли Найти(Текст, "без") > 0 Тогда	
		
		//
		ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС");
		
	КонецЕсли; 
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		
		//
		Если Найти(ТекущаяСтрока, "ндс:") > 0  Тогда
			
			//
			Попытка
				
				//
				стрСуммаНДС = ТекстовыйДокумент.ПолучитьСтроку(Сч + 1);
				
				//
				стрСуммаНДС = СтрЗаменить(стрСуммаНДС, " ", "");
				стрСуммаНДС = СтрЗаменить(стрСуммаНДС, " ", "");
				стрСуммаНДС = СтрЗаменить(стрСуммаНДС, ",", ".");
				
				//
				Попытка
					
					//
					Ч = Число(стрСуммаНДС);
					Если Ч = 0 Тогда
						ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС");
					КонецЕсли; 
					
				Исключение
				КонецПопытки;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	//
	СП = Новый Структура("Имя", "ВариантРасчетаНДС");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = ВариантРасчетаНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДатИзСтроки(Знач Текст)

	//
	Результат = Новый СписокЗначений;
	
	//
	СтруктураМесяцы = Новый Структура;
	СтруктураМесяцы.Вставить("ЯНВАРЬ", 1);
	СтруктураМесяцы.Вставить("ФЕВРАЛЬ", 2);
	СтруктураМесяцы.Вставить("МАРТ", 3);
	СтруктураМесяцы.Вставить("АПРЕЛЬ", 4);
	СтруктураМесяцы.Вставить("МАЙ", 5);
	СтруктураМесяцы.Вставить("ИЮНЬ", 6);
	СтруктураМесяцы.Вставить("ИЮЛЬ", 7);
	СтруктураМесяцы.Вставить("АВГУСТ", 8);
	СтруктураМесяцы.Вставить("СЕНТЯБРЬ", 9);
	СтруктураМесяцы.Вставить("ОКТЯБРЬ", 10);
	СтруктураМесяцы.Вставить("НОЯБРЬ", 11);
	СтруктураМесяцы.Вставить("ДЕКАБРЬ", 12);
	СтруктураМесяцы.Вставить("ЯНВАРЯ", 1);
	СтруктураМесяцы.Вставить("ФЕВРАЛЯ", 2);
	СтруктураМесяцы.Вставить("МАРТА", 3);
	СтруктураМесяцы.Вставить("АПРЕЛЯ", 4);
	СтруктураМесяцы.Вставить("МАЯ", 5);
	СтруктураМесяцы.Вставить("ИЮНЯ", 6);
	СтруктураМесяцы.Вставить("ИЮЛЯ", 7);
	СтруктураМесяцы.Вставить("АВГУСТА", 8);
	СтруктураМесяцы.Вставить("СЕНТЯБРЯ", 9);
	СтруктураМесяцы.Вставить("ОКТЯБРЯ", 10);
	СтруктураМесяцы.Вставить("НОЯБРЯ", 11);
	СтруктураМесяцы.Вставить("ДЕКАБРЯ", 12);
	
	//
	МассивСтрок = Новый Массив;
	
	//
	Текст = СокрЛП(Текст);
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	
	//
	Текст = СтрЗаменить(Текст, ".01.", " ЯНВАРЯ ");
	Текст = СтрЗаменить(Текст, ".02.", " ФЕВРАЛЯ ");
	Текст = СтрЗаменить(Текст, ".03.", " МАРТА ");
	Текст = СтрЗаменить(Текст, ".04.", " АПРЕЛЯ ");
	Текст = СтрЗаменить(Текст, ".05.", " МАЯ ");
	Текст = СтрЗаменить(Текст, ".06.", " ИЮНЯ ");
	Текст = СтрЗаменить(Текст, ".07.", " ИЮЛЯ ");
	Текст = СтрЗаменить(Текст, ".08.", " АВГУСТА ");
	Текст = СтрЗаменить(Текст, ".09.", " СЕНТЯБРЯ ");
	Текст = СтрЗаменить(Текст, ".10.", " ОКТЯБРЯ ");
	Текст = СтрЗаменить(Текст, ".11.", " НОЯБРЯ ");
	Текст = СтрЗаменить(Текст, ".12.", " ДЕКАБРЯ ");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	Текст = ВРЕГ(Текст);
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок()  Цикл
	
		//
		МассивСтрок.Добавить(СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(Сч)));
	
	КонецЦикла; 
	
	//
	Сч = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
	
		//	
		Попытка
			Результат.Добавить(Дата(ЭлементМассива));
			Прервать;
		Исключение
		КонецПопытки;
		
		//
		Попытка
			НомерМесяца = Неопределено;
			СтруктураМесяцы.Свойство(ЭлементМассива, НомерМесяца);
		Исключение
		КонецПопытки;
			
		//
		Если НомерМесяца <> Неопределено Тогда
			
			//
			День = Прав("00" + МассивСтрок[Сч-1], 2);
			
			//
			Год = СтрЗаменить(МассивСтрок[Сч+1], "ГОДА", "");
			Год = СтрЗаменить(Год, "Г", "");
			Год = СтрЗаменить(Год, ".", "");
			
			//
			Попытка
				Результат.Добавить(Дата(Число(Год), Число(НомерМесяца), Число(День)));
			Исключение
			КонецПопытки;
			
		КонецЕсли; 
		
		//
		Сч = Сч +1;
		
	КонецЦикла; 

	//
	Возврат Результат;
	
КонецФункции
 
&НаСервере
Функция ПолучитьСписокНомеровИзСтроки(Знач Текст)

	//
	Результат = Новый СписокЗначений;
	
	//
	МассивСтрок = Новый Массив;
	
	//
	Текст = СокрЛП(Текст);
	Текст = СтрЗаменить(Текст, "№", "№ ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	Текст = ВРЕГ(Текст);
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок()  Цикл
	
		//
		МассивСтрок.Добавить(СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(Сч)));
	
	КонецЦикла; 
	
	//
	Сч = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
	
		//
		Если ЭлементМассива = "№" Тогда
			
			//
			Попытка
				Результат.Добавить(МассивСтрок[Сч + 1]);
			Исключение
			КонецПопытки;	
			
			//
			Попытка
			
				//
				Если МассивСтрок[Сч + 2] = "ОТ" Тогда
					Прервать;
				КонецЕсли; 
			
			Исключение
			КонецПопытки;	
			
		//	
		ИначеЕсли Найти(Текст, "№") = 0 Тогда	
		
			//
			Попытка
				
				//
				Ч = Число(ЭлементМассива);
				Если Ч < 1000000 Тогда
					Результат.Добавить(Ч);
				КонецЕсли; 
				
			Исключение
			КонецПопытки;	
			
		КонецЕсли; 
		
		//
		Сч = Сч +1;
		
	КонецЦикла; 

	//
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазностьФорматов(Стр1, Стр2)
	
	Если Стр1 = Неопределено ИЛИ Стр2 = Неопределено Тогда Возврат 100500 КонецЕсли;
	
	Если НЕ СтрДлина(Стр1) = СтрДлина(Стр2) Тогда Возврат 100500 КонецЕсли;
	
	Рез = 0;
	Для ном = 1 По СтрДлина(Стр1) Цикл
		Рез = Рез + ?(Сред(Стр1, ном, 1) = Сред(Стр2, ном, 1), 0, 1);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция ЧислоВхождений(Текст, RegExp, Паттерн)
	RegExp.Pattern	= Паттерн;
	Matches			= RegExp.Execute(Текст);
	Возврат Matches.Count();
КонецФункции

&НаСервере
Функция ЕстьВхождения(Текст, RegExp, Паттерн)
	Возврат (ЧислоВхождений(Текст, RegExp, Паттерн)>0);
КонецФункции

&НаСервере
Процедура ПроказатьнайденныеЗаголовки(ВТД, СШ, ККК);
	
	Если Не СШ = 0 Тогда
		
		//
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
		
		//
		Если НЕ ККК.КолонкаНоменклатуры = 0 Тогда
			
			//
			ТЭГ = "#НОМЕНКЛАТУРА#";
			Область = ВТД.Область(СШ, ККК.КолонкаНоменклатуры, СШ, ККК.КолонкаНоменклатуры);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли; 
			
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаНоменклатуры, СШ, ККК.КолонкаНоменклатуры).Текст = "#НОМЕНКЛАТУРА#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаНоменклатуры, СШ, ККК.КолонкаНоменклатуры).Текст;
			
		КонецЕсли;
		
		//
		Если НЕ ККК.КолонкаКоличества = 0 Тогда
			
			//
			ТЭГ = "#КОЛИЧЕСТВО#";
			Область = ВТД.Область(СШ, ККК.КолонкаКоличества, СШ, ККК.КолонкаКоличества);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаКоличества, СШ, ККК.КолонкаКоличества).Текст = "#КОЛИЧЕСТВО#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаКоличества, СШ, ККК.КолонкаКоличества).Текст;
			
		КонецЕсли;	
		
		//
		Если НЕ ККК.КолонкаЦены = 0 Тогда
			
			//
			ТЭГ = "#ЦЕНА#";
			Область = ВТД.Область(СШ, ККК.КолонкаЦены, СШ, ККК.КолонкаЦены);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаЦены, СШ, ККК.КолонкаЦены).Текст = "#ЦЕНА#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаЦены, СШ, ККК.КолонкаЦены).Текст;
			
		КонецЕсли;
		
		//
		Если НЕ ККК.КолонкаБезНДС = 0 Тогда
			
			//
			ТЭГ = "#БЕЗ НДС#";
			Область = ВТД.Область(СШ, ККК.КолонкаБезНДС, СШ, ККК.КолонкаБезНДС);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаБезНДС, СШ, ККК.КолонкаБезНДС).Текст = "#БЕЗ НДС#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаБезНДС, СШ, ККК.КолонкаБезНДС).Текст;
			
		КонецЕсли;	
		
		Если НЕ ККК.КолонкаСНДС = 0 Тогда
			
			//
			ТЭГ = "#С НДС#";
			Область = ВТД.Область(СШ, ККК.КолонкаСНДС, СШ, ККК.КолонкаСНДС);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаСНДС, СШ, ККК.КолонкаСНДС).Текст = "#С НДС#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаСНДС, СШ, ККК.КолонкаСНДС).Текст;
			
		КонецЕсли;
		
		Если НЕ ККК.КолонкаСуммаНДС = 0 Тогда
			
			//
			ТЭГ = "#СУММА НДС#";
			Область = ВТД.Область(СШ, ККК.КолонкаСуммаНДС, СШ, ККК.КолонкаСуммаНДС);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаСуммаНДС, СШ, ККК.КолонкаСуммаНДС).Текст = "#СУММА НДС#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаСуммаНДС, СШ, ККК.КолонкаСуммаНДС).Текст;
			
		КонецЕсли;
		
		Если НЕ ККК.КолонкаСтавкаНДС = 0 Тогда
			
			//
			ТЭГ = "#СТАВКА НДС#";
			Область = ВТД.Область(СШ, ККК.КолонкаСтавкаНДС, СШ, ККК.КолонкаСтавкаНДС);
			
			//
			Если Найти(Область.Текст, ТЭГ) = 0 Тогда
				Область.Текст = ТЭГ + Символы.ПС + Область.Текст;
				Область.Обвести(Линия, Линия, Линия, Линия);
			КонецЕсли;
			
			//???ZEZA ВТД.Область(СШ, ККК.КолонкаСтавкаНДС, СШ, ККК.КолонкаСтавкаНДС).Текст = "#СТАВКА НДС#" + Символы.ПС + ВТД.Область(СШ, ККК.КолонкаСтавкаНДС, СШ, ККК.КолонкаСтавкаНДС).Текст;
			
		КонецЕсли;			
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьТаблицу(ВТД, СтруктураТаблицы)
	
	// Раскрасим таблицу для наглядности
	Для НСтр = 1 По ВТД.ВысотаТаблицы цикл
		Область					= ВТД.Область(НСтр, 1, НСтр, ВТД.ШиринаТаблицы);
		Если СтруктураТаблицы[НСтр]		= "Ш" Тогда
			Область.ЦветФона	= WebЦвета.СветлоЗеленый;
		ИначеЕсли СтруктураТаблицы[НСтр] = "Н" Тогда
			Область.ЦветФона	= WebЦвета.СветлоКоричневый;
		ИначеЕсли СтруктураТаблицы[НСтр] = "С" Тогда
			Область.ЦветФона	= WebЦвета.СветлоЖелтый;
		Иначе 
			Область.ЦветФона	= WebЦвета.Белый;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСодержимоеСтрок(ВТД, ККК, СписокНайденныхСтрок, RegExp);
	
	//Получим содержимое строк
	Для Каждого ном Из СписокНайденныхСтрок Цикл
		
		//
		НоваяСтрока = ТаблицаРезультата.Добавить();
		
		//
		НоваяСтрока.НомерСтроки = ТаблицаРезультата.Индекс(НоваяСтрока) + 1;
		
		// Возьмем номенклатуру из колонки
		НоваяСтрока.НоменклатураСтрока = ВТД.Область(ном, ККК.КолонкаНоменклатуры, ном, ККК.КолонкаНоменклатуры).Текст;
		
		
		// Возьмем количество из колонки
		Если НЕ ККК.КолонкаКоличества = 0 Тогда
			ТекстКоличества = ВТД.Область(ном, ККК.КолонкаКоличества, ном, ККК.КолонкаКоличества).Текст;
			Попытка
				Количество = Число(ТекстКоличества);
			Исключение
				Количество = 0;
			КонецПопытки;
			НоваяСтрока.Количество = Количество;
		КонецЕсли;
		// Возьмем цену из колонки
		Если НЕ ККК.КолонкаЦены = 0 Тогда
			ТекстЦены = ВТД.Область(ном, ККК.КолонкаЦены, ном, ККК.КолонкаЦены).Текст;
			Попытка
				Цена = Число(ТекстЦены);
			Исключение
				Цена = 0;
			КонецПопытки;
			НоваяСтрока.Цена = Цена;
		КонецЕсли;	
		// Возьмем сумму из колонки
		Если НЕ ККК.КолонкаСНДС = 0 Тогда
			ТекстСНДС = ВТД.Область(ном, ККК.КолонкаСНДС, ном, ККК.КолонкаСНДС).Текст;
			Попытка
				СтоимостьСНДС = Число(ТекстСНДС);
			Исключение
				СтоимостьСНДС = 0;
			КонецПопытки;
			НоваяСтрока.СтоимостьСНДС = СтоимостьСНДС;
		КонецЕсли;
		// Возьмем сумму без НДС из колонки
		Если НЕ ККК.КолонкаБезНДС = 0 Тогда
			ТекстБезНДС = ВТД.Область(ном, ККК.КолонкаБезНДС, ном, ККК.КолонкаБезНДС).Текст;
			Попытка
				СтоимостьБезНДС = Число(ТекстБезНДС);
			Исключение
				СтоимостьБезНДС = 0;
			КонецПопытки;
			НоваяСтрока.СтоимостьБезНДС = СтоимостьБезНДС;
		КонецЕсли;	
		// Возьмем ставку из колонки
		Если НЕ ККК.КолонкаСтавкаНДС = 0 Тогда
			ТекстСтавкаНДС = ВТД.Область(ном, ККК.КолонкаСтавкаНДС, ном, ККК.КолонкаСтавкаНДС).Текст;
			ТекстСтавкаНДС = СтрЗаменить(ТекстСтавкаНДС, "%", "");
			Попытка
				СтавкаНДС = Число(ТекстСтавкаНДС);
			Исключение
				СтавкаНДС = 0;
			КонецПопытки;
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
		КонецЕсли;	
		// Возьмем сумму НДС из колонки
		Если НЕ ККК.КолонкаСуммаНДС = 0 Тогда
			ТекстСуммаНДС = ВТД.Область(ном, ККК.КолонкаСуммаНДС, ном, ККК.КолонкаСуммаНДС).Текст;
			Попытка
				СуммаНДС = Число(ТекстСуммаНДС);
			Исключение
				СуммаНДС = 0;
			КонецПопытки;
			НоваяСтрока.СуммаНДС = СуммаНДС;
		КонецЕсли;		
	КонецЦикла;
	
	//Извлечем наименования точек
	Для Каждого Стр Из ТаблицаРезультата Цикл
		
		//
		RegExp.Pattern	=  "(.*?) *\(*#(.+?)#\)* *(.*)";
		Если  RegExp.Test(Стр.НоменклатураСтрока) Тогда	
			
			//
			НаименованиеТочки = Стр.НоменклатураСтрока;
			НаименованиеТочки = RegExp.Replace(НаименованиеТочки, "$2");
			НаименованиеТочки = СтрЗаменить(НаименованиеТочки, " ", "_");
			Стр.Точка = НаименованиеТочки;
			
			//
			Стр.НоменклатураСтрока	= RegExp.Replace(Стр.НоменклатураСтрока, "$1$3");
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокиСДанными(Начало, Строки, СтруктураТаблицы, ВесаСтрок, СтрокиТипы)
	
	//переберем строки и найдем строки табличной части
	ФорматСтрокиТаблицы1 = Неопределено;
	ФорматСтрокиТаблицы2 = Неопределено;
	СписокНайденныхСтрок = Новый Массив;
	
	//
	Для ном = Начало по СтруктураТаблицы.Количество()-1 Цикл
		
		//
		Если СтруктураТаблицы[ном] = "Ш" ИЛИ СтруктураТаблицы[ном] = "Н" Тогда
			Прервать;
		КонецЕсли;
		
		//
		Если ВесаСтрок[ном].НП = 0 Тогда Продолжить КонецЕсли;
		
		//
		ФорматПодходит = ВесаСтрок[ном].Д > 0 И ВесаСтрок[ном].Ч > 1; // Хотя бы одна длинная строка и хотя бы два числа
		Если Не ФорматПодходит И (ном - Начало) > 1 Тогда
			Прервать; // Строки кончились
		КонецЕсли;
		
		//
		Если ФорматСтрокиТаблицы1 = Неопределено Тогда
			СтруктураТаблицы[ном]	= "С";
			СписокНайденныхСтрок.Добавить(ном);
			ФорматСтрокиТаблицы1	= СтрокиТипы[ном];
		Иначе
			РФ1 = РазностьФорматов(ФорматСтрокиТаблицы1, СтрокиТипы[ном]);
			Если РФ1 > 2 Тогда
				Если (ном - Начало) > 1 Тогда Прервать КонецЕсли; // Это что-то другое, например итоги
			ИначеЕсли РФ1 = 2 Тогда
				РФ2 = РазностьФорматов(ФорматСтрокиТаблицы2, СтрокиТипы[ном]);
				Если РФ2 > 1 Тогда
					Если (ном - Начало) > 1 Тогда Прервать КонецЕсли;
				Иначе 
					СтруктураТаблицы[ном]		= "С";
					СписокНайденныхСтрок.Добавить(ном);					
				КонецЕсли;
			Иначе
				Если РФ1 = 1 и ФорматСтрокиТаблицы2 = Неопределено Тогда
					ФорматСтрокиТаблицы2	= СтрокиТипы[ном];		
				КонецЕсли;
				СтруктураТаблицы[ном]		= "С";
				СписокНайденныхСтрок.Добавить(ном);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокНайденныхСтрок;
	
КонецФункции

&НаСервере
Функция НайтиКолонкиВШапке(RegExp, ВТД, СтрокаШапки)
	
	
	//Найдем колонки со значениями по заголовкам
	ККК = Новый Структура("КолонкаНоменклатуры, КолонкаКоличества, КолонкаЦены, КолонкаБезНДС, КолонкаСНДС, КолонкаСуммаНДС, КолонкаСтавкаНДС", 0,0,0,0,0,0,0);
	Если Не СтрокаШапки = 0 Тогда
		
		//
		ШиринаКолонки = 0;
		
		//
		Для Сч = 0 по ВТД.ШиринаТаблицы - 1 Цикл
			
			//
			Кол = ВТД.ШиринаТаблицы - Сч;
			
			//
			Область	= ВТД.Область(СтрокаШапки, Кол, СтрокаШапки, Кол);
			ТекстЯчейки	= Область.Текст;
			
			//
			Если ЕстьВхождения(ТекстЯчейки, RegExp, "(товар)|(услу)|(номен)|(наимен)") И (Область.ШиринаКолонки > ШиринаКолонки) Тогда
				
				//
				ККК.КолонкаНоменклатуры = кол;
				ШиринаКолонки = Область.ШиринаКолонки;
				
				//
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		//
		Для Сч = 0 по ВТД.ШиринаТаблицы - 1 Цикл
			
			//
			Кол = ВТД.ШиринаТаблицы - Сч;
			
			
			//
			Область	= ВТД.Область(СтрокаШапки, Кол, СтрокаШапки, Кол);
			ТекстЯчейки	= Область.Текст;
			
			//
			Если ЕстьВхождения(ТекстЯчейки, RegExp, "(кол)") и ККК.КолонкаКоличества = 0 Тогда
				ККК.КолонкаКоличества = кол;
				Продолжить;
			КонецЕсли;	
			
			//
			Если ЕстьВхождения(ТекстЯчейки, RegExp, "(цена)|(цене)") и ККК.КолонкаЦены = 0 Тогда
				ККК.КолонкаЦены = кол;
				Продолжить;
			КонецЕсли;	
			
			//
			Если ЕстьВхождения(ТекстЯчейки, RegExp, "(ставка)") и ККК.КолонкаСтавкаНДС = 0 Тогда
				ККК.КолонкаСтавкаНДС = кол;
				Продолжить;
			КонецЕсли;					
			
			//
			Если ЕстьВхождения(ТекстЯчейки, RegExp, "(стоим)|(сумма)") Тогда
				
				Если ЕстьВхождения(ТекстЯчейки, RegExp, "(без налога)|(без ндс)") Тогда
					ККК.КолонкаБезНДС = ?(ККК.КолонкаБезНДС=0, кол, ККК.КолонкаБезНДС);
				ИначеЕсли ЕстьВхождения(ТекстЯчейки, RegExp, "(с налогом)") Тогда
					ККК.КолонкаСНДС = ?(ККК.КолонкаСНДС=0, кол, ККК.КолонкаСНДС);	
				ИначеЕсли ЕстьВхождения(ТекстЯчейки, RegExp, "(сумма налога)|(сумма ндс)") Тогда
					ККК.КолонкаСуммаНДС = ?(ККК.КолонкаСуммаНДС=0, кол, ККК.КолонкаСуммаНДС);
				ИначеЕсли ЕстьВхождения(ТекстЯчейки, RegExp, "(сумма акциза)") Тогда						
					
				Иначе
					ККК.КолонкаСНДС = ?(ККК.КолонкаСНДС=0, кол, ККК.КолонкаСНДС);
				КонецЕсли;					
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Возврат ККК;
	
КонецФункции

&НаСервере
Функция СледующееЗначение(ВТД, Стр, Кол)	
	Текст = "";
	Если Кол < ВТД.ШиринаТаблицы Тогда
		Для ном = Кол по ВТД.ШиринаТаблицы Цикл
			Текст = ВТД.Область(Стр, ном, Стр, ном).Текст;
			Если НЕ Текст = "" Тогда Прервать КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат Текст;
КонецФункции

&НаСервере
Функция ИзвлечьРеквизит(ВТД, RegExp, Стр, Кол)
	
	//Реквизиты = Новый Структура;
	//Для НСтр = 1 по ПерваяШапка-1 Цикл
	//	Кол = 0;
	//	Пока НЕ Кол > ВТД.ШиринаТаблицы Цикл
	//		
	//		Кол = Кол + 1;
	//	КонецЦикла;
	//КонецЦикла;
	
КонецФункции

&НаСервере
Функция Вхождение(Текст, RegExp, Паттерн)
	
	//
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//	
	RegExp.Pattern	= Паттерн;
	Matches			= RegExp.Execute(Текст);
	Если Matches.Count() = 0 Тогда
		Возврат неопределено;
	Иначе
		Возврат Matches.Item(0).Value;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоследнееПодвхождение(Текст, RegExp, Паттерн)
	RegExp.Pattern	= Паттерн;
	Matches			= RegExp.Execute(Текст);
	Если Matches.Count() = 0 Тогда
		Возврат "";
	Иначе
		ЧП = Matches.Item(0).SubMatches.Count();
		Если ЧП = 0 тогда
			Возврат "";
		Иначе
			Возврат Matches.Item(0).SubMatches.Item(ЧП-1);
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура НайтиИНН(Текст, СписокИНН, RegExp)
	
	//
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли; 
	
	//
	RegExp.Pattern	= "(?:\D+|^)(\d{12}|\d{10})(?:\D+|$)";
	Matches			= RegExp.Execute(Текст);
	Если Matches.Count() > 0 Тогда
		НайденныйИНН = Matches.Item(0).SubMatches.Item(0);
		Если СписокИНН.Найти(НайденныйИНН) = Неопределено Тогда
			СписокИНН.Добавить(Matches.Item(0).SubMatches.Item(0));
		КонецЕсли;
	КонецЕсли;                  
	
КонецПроцедуры

&НаСервере
Функция НайтиРеквизитыДокумента(ВТД, RegExp, ПерваяШапка, ПоследняяСтрока)
	
	//
	Дата = '00010101';
	Номер = "";
	
	//
	СП = Новый Структура("Имя", "Дата");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Дата = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Номер");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Номер = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	ИскомыеРеквизиты =  Новый Массив;
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "ИННКПППродавца", "ИНН/КПП.*Продавца[ :]*", ".*?(\d+/\d+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "ИННКПППокупателя", "ИНН/КПП.*Покупателя[ :]*", ".*?(\d+/\d+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "ИННКПП", "ИНН/КПП[ :]*", ".*?(\d+/\d+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "ИНН", "(ИНН$)|((ИНН[^/])[ :]*)", ".*?(\d+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "КПП", "((^КПП)|([^/]КПП)[ :]*)", ".*?(\d+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Грузоотправитель", "Грузоотправитель и его адрес[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Грузоотправитель", "Грузоотправитель[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Поставщик", "Поставщик[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Покупатель", "Покупатель[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Продавец", "Продавец[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Грузополучатель", "Грузополучатель и его адрес[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Грузополучатель", "Грузополучатель[ :]*", "(.+)"));
	ИскомыеРеквизиты.Добавить(Новый Структура("Имя, Паттерн1, Паттерн2", "Валюта", "Валюта[ :]*", "(.+)"));
	
	//
	СписокИНН		= Новый Массив;
	Реквизиты		= Новый Структура;
	СтрокиДляПоиска	= Новый Массив;
	
	//
	Для НСтр = 1 По ПерваяШапка - 1 Цикл
		
		//
		СтрокиДляПоиска.Добавить(НСтр);
		
	КонецЦикла;
	
	//
	Для НСтр = ПоследняяСтрока По ВТД.ВысотаТаблицы Цикл
		
		//
		СтрокиДляПоиска.Добавить(НСтр);
		
	КонецЦикла;	
	
	//
	Для Каждого НСтр Из СтрокиДляПоиска Цикл
		
		//
		Кол = 0;
		Пока НЕ Кол > ВТД.ШиринаТаблицы Цикл
			
			//
			ТекстЯчейки	= ВТД.Область(НСтр, Кол, НСтр, Кол).Текст;
			
			//
			НайтиИНН(ТекстЯчейки, СписокИНН, RegExp);
			Для Каждого Рек Из ИскомыеРеквизиты Цикл                                            
				
				//
				Если Реквизиты.Свойство(Рек.Имя) Тогда 
					Продолжить 
				КонецЕсли;
				
				//
				Вх = Вхождение(ТекстЯчейки, RegExp, Рек.Паттерн1);
				Если Не Вх = Неопределено Тогда
					
					//
					Если СтрДлина(ТекстЯчейки) - СтрДлина(Вх) > 3 Тогда
						
						//
						НайденныйТекст = ПоследнееПодвхождение(ВТД.Область(НСтр, Кол, НСтр, Кол).Текст, RegExp, Рек.Паттерн1 + Рек.Паттерн2);
						Если НЕ НайденныйТекст = "" Тогда
							Реквизиты.Вставить(Рек.Имя, НайденныйТекст);
						КонецЕсли;
						
					ИначеЕсли Кол < ВТД.ШиринаТаблицы Тогда
						
						//
						НКол = Кол + 1;
						Пока НЕ НКол > ВТД.ШиринаТаблицы Цикл
							
							//
							ТекстЯчейки	= ВТД.Область(НСтр, НКол, НСтр, НКол).Текст;							
							
							//
							НайденныйТекст = ПоследнееПодвхождение(ТекстЯчейки, RegExp, Рек.Паттерн2);
							Если НЕ НайденныйТекст = "" Тогда
								
								//
								НайтиИНН(ТекстЯчейки, СписокИНН, RegExp);
								Реквизиты.Вставить(Рек.Имя, НайденныйТекст);
								
								//
								Кол = Нкол;
								
								//
								Прервать;
								
							КонецЕсли;
							
							//
							НКол = НКол + 1;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			//
			Если Найти(нрег(ТекстЯчейки), "ндс") > 0 Тогда
				ОпределитьВариантРасчетаНДС(ТекстЯчейки);
			КонецЕсли; 
			
			//
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
			
				//
				СписокДат = ПолучитьСписокДатИзСтроки(ТекстЯчейки);
				Если СписокДат.Количество() = 1 Тогда
				
					//
					СП = Новый Структура("Имя", "Дата");
					
					//
					НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Дата =  СписокДат[0].Значение;
						НайденныеСтроки[0].Значение = Дата;
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЕсли; 
			
			//
			Если НЕ ЗначениеЗаполнено(Номер) Тогда
			
				//
				СписокНомеров = ПолучитьСписокНомеровИзСтроки(ТекстЯчейки);
				Если СписокНомеров.Количество() = 1 Тогда
				
					//
					СП = Новый Структура("Имя", "Номер");
					
					//
					НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Номер = СписокНомеров[0].Значение;
						НайденныеСтроки[0].Значение = Номер;
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЕсли; 
			
			//
			Кол = Кол + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//
	Сч = 0;
	Для Каждого ИНН Из СписокИНН Цикл
		
		//
		НайденнаяОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН);
		Если ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
			
			//
			СП = Новый Структура("Имя", "Организация");
			
			//
			НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].Значение = НайденнаяОрганизация;
			КонецЕсли;
			
			//
			Организация = ?(ЗначениеЗаполнено(Организация), Организация, НайденнаяОрганизация);
			ВсеСвоиИНН.Добавить(ИНН);
			
			//
			СписокИНН[Сч] = "XXX";
			
			//
			Прервать;
			
		КонецЕсли;
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;	
	
	//
	Сч = 0;
	Для Каждого ИНН Из СписокИНН Цикл
		
		//
		НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
		Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
			
			//
			СП = Новый Структура("Имя", "Контрагент");
			
			//
			НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].Значение = НайденныйКонтрагент;
			КонецЕсли;
			
			//
			Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
				
				//
				ЗаполнитьДоговорКонтрагента();
				ЗаполнитьЗаявкуНаРасходованиеСредств();
			
			КонецЕсли; 
			
			//
			Контрагент = ?(ЗначениеЗаполнено(Контрагент), Контрагент, НайденныйКонтрагент);
			ВсеИНН.Добавить(ИНН);
			
			//
			СписокИНН[Сч] = "XXX";
			
			//
			Прервать;
			
		КонецЕсли;			
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Функция ПодготовитьВременныеМассивы(ВТД)
	
	Строк = ВТД.ВысотаТаблицы;
	Колонок = ВТД.ШиринаТаблицы;
	
	// Строки в виде строк с разделителем "|"
	Строки = Новый Массив(Строк+1); 
	// Типы значений в строках "ПСППЧС ..."
	// П - Пусто
	// Ч - преобразуется к числу
	// С - Строка до 4 символов
	// Д - строка от 5 символов
	СтрокиТипы = Новый Массив(Строк+1); 
	// Структура строк
	// Ш - шапка таблицы
	// Н - номера колонок таблицы
	// С - строка таблицы
	СтруктураТаблицы	= Новый Массив(Строк+1);
	// Количество значений в строках
	// П - Пусто
	// НП - не пусто
	// Ч - преобразуется к числу
	// С - Строка до 4 символов
	// Д - строка от 5 символов	
	
	//
	ВесаСтрок			= Новый Массив(Строк+1);
	
	//
	Для Стр = 1 По Строк Цикл
		
		//
		СтрокаВСтроке	= "|";
		СтрокаТипов		= "";
		СтрокаВеса		= Новый Структура("С, Д, Ч, П, НП", 0, 0, 0, 0, 0);
		
		//
		Для Кол = 1 по Колонок Цикл
			
			//
			ТекстЯчейки			= ВТД.Область(Стр, Кол, Стр, Кол).Текст;
			
			//
			СтрокаВСтроке		= СтрокаВСтроке + ТекстЯчейки + "|";
			
			//
			Если ТекстЯчейки = "" Тогда 
				
				//
				СтрокаТипов		= СтрокаТипов + "П";
				СтрокаВеса.П	= СтрокаВеса.П + 1;
				
			Иначе 
				
				//
				СтрокаВеса.НП	= СтрокаВеса.НП + 1;
				
				//
				Попытка
					ЧислоВЯчейке	= Число(ТекстЯчейки);
					СтрокаТипов		= СтрокаТипов + "Ч";
					СтрокаВеса.Ч	= СтрокаВеса.Ч + 1;
				Исключение
					ТипСтроки				= ?(СтрДлина(ТекстЯчейки) > 4, "Д", "С");
					СтрокаТипов				= СтрокаТипов + ТипСтроки;
					СтрокаВеса[ТипСтроки]	= СтрокаВеса[ТипСтроки] + 1;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//
		Строки[Стр]				= СтрокаВСтроке;
		СтрокиТипы[Стр]			= СтрокаТипов;
		СтруктураТаблицы[Стр]	= "";
		
		//
		ВесаСтрок[Стр]			= СтрокаВеса;
		
	КонецЦикла;
	
	Возврат Новый Структура("Строки, СтрокиТипы, СтруктураТаблицы, ВесаСтрок", Строки, СтрокиТипы, СтруктураТаблицы, ВесаСтрок);
	
КонецФункции

// Найдем шапки таблиц по максимальному числу вхождений ключевых слов
Функция _НайтиШапки(Строки, ВесаСтрок, RegExp); 
	
	//
	Шапки = Новый Массив;
	Шапки.Добавить(0); // на случай, если шапки на листе нет
	
	//
	МаксимумВхождений = 0;
	
	//
	Для Стр = 1 По Строки.Количество()-1 Цикл
		
		Если ВесаСтрок[Стр].НП < 2 Тогда 
			Продолжить;
		КонецЕсли;
		
		//
		ЧислоВхождений	= ЧислоВхождений(Строка(Строки[Стр]), RegExp, "(Товары)|(Товар)|(Коли)|(Кол-во)|(Номен)|(Цена)|(Ставк)");
		ЧислоВхождений	= ЧислоВхождений(Строка(Строки[Стр]), RegExp, "(Наименование)|(Товар)|(Услуга)|(Кол-во)|(Цена)|(Стоим)");
		
		//
		Если ЧислоВхождений = МаксимумВхождений и МаксимумВхождений > 0 Тогда
			Шапки.Добавить(Стр);
		ИначеЕсли ЧислоВхождений > МаксимумВхождений Тогда
			Шапки.Очистить();
			Шапки.Добавить(Стр);
			МаксимумВхождений = ЧислоВхождений;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Шапки;
	
КонецФункции

// Найдем шапки таблиц по максимальному числу вхождений ключевых слов
Функция НайтиШапки(Строки, ВесаСтрок, RegExp); 
	
	//
	Шапки = Новый Массив;
	
	//
	МассивМаркеров = Новый Массив;
	МассивМаркеров.Добавить("№");
	МассивМаркеров.Добавить("Наименование");
	МассивМаркеров.Добавить("Номенклатура");
	МассивМаркеров.Добавить("Товары");
	МассивМаркеров.Добавить("Услуга");
	МассивМаркеров.Добавить("Услуги");
	МассивМаркеров.Добавить("Ед.");
	МассивМаркеров.Добавить("Ед. изм.");
	МассивМаркеров.Добавить("Ед.изм.");
	МассивМаркеров.Добавить("Кол-во");
	МассивМаркеров.Добавить("Количество");
	МассивМаркеров.Добавить("Цен");
	МассивМаркеров.Добавить("Цена");
	МассивМаркеров.Добавить("Ставк");
	МассивМаркеров.Добавить("Ставка");
	МассивМаркеров.Добавить("Сумма");
	МассивМаркеров.Добавить("Стоимость");
	
	//
	Счетчики = Новый Массив(Строки.Количество());
	
	//
	Для Стр = 0 По Строки.Количество()-1 Цикл
		
		//
		АнализируемаяСтрока = СокрЛП(Строки[Стр]);
		Для каждого Маркер Из МассивМаркеров Цикл
			
			//
			Если НЕ ЗначениеЗаполнено(Счетчики[Стр]) Тогда
				Счетчики[Стр] = 0;
			КонецЕсли; 
			
			//
			ЧислоВхождений	= ЧислоВхождений(АнализируемаяСтрока, RegExp, Маркер);
			Если ЧислоВхождений <> 0 Тогда
				Счетчики[Стр] = Счетчики[Стр] + 1;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	//
	ИндексШапки = 0;
	МаксСчетчик = 0;
	
	//
	Индекс = 0;
	
	//
	Для каждого Счетчик Из Счетчики Цикл
		
		//
		Если Счетчик > МаксСчетчик  Тогда
			
			//
			МаксСчетчик = Счетчик;
			ИндексШапки = Индекс;
		
		КонецЕсли; 
		
		//
		Индекс = Индекс + 1;
		
	КонецЦикла; 
	
	//
	Шапки.Добавить(ИндексШапки);
			
	//
	Возврат Шапки;
	
КонецФункции

&НаСервере
Функция НайтиНомераКолонок(Строки, ВесаСтрок, RegExp)
	
	// Найдем номера колонок - строки, где все ячейки не больше 3 символов и есть хотя бы три не пустые
	НомераКолонок = Новый Массив;
	Для Стр = 1 По Строки.Количество()-1 Цикл
		Если ВесаСтрок[Стр].НП < 3 тогда Продолжить КонецЕсли;
	    RegExp.Pattern		=  "\|[^\|]{4,}\|";
		Если  RegExp.Test(Строка(Строки[Стр])) = Ложь Тогда		
			НомераКолонок.Добавить(Стр);		
		КонецЕсли;
	КонецЦикла;	
	
	Возврат НомераКолонок
	
КонецФункции

&НаСервере
Функция ПолучитьНачалаСтрок(СтруктураТаблицы, ПерваяШапка)
	
	//Найдем первые строки табличной части и соответствующие им шапки
	НайденнаяШапка	= 0;
	НайденныеНомера	= 0;
	НачалаСтрок = Новый Массив;
	Для Стр = 1 По СтруктураТаблицы.Количество()-1 Цикл
		Если СтруктураТаблицы[Стр] = "Ш" Тогда
			ПерваяШапка = ?(ПерваяШапка=0, Стр, 0);
			Если НайденнаяШапка > 0 и НайденныеНомера = 0 Тогда
				НачалаСтрок.Добавить(Новый Структура("Шапка, Начало", НайденнаяШапка, НайденнаяШапка+1));
			КонецЕсли;
			НайденнаяШапка	= Стр;
			НайденныеНомера	= 0;
		ИначеЕсли СтруктураТаблицы[Стр] = "Н" Тогда
			НачалаСтрок.Добавить(Новый Структура("Шапка, Начало", НайденнаяШапка, Стр+1));
			НайденныеНомера = Стр;
		КонецЕсли;
	КонецЦикла;	
	Если НачалаСтрок.Количество() = 0 Тогда 
		НачалаСтрок.Добавить(Новый Структура("Шапка, Начало", НайденнаяШапка, НайденнаяШапка+1));
	КонецЕсли;
	
	Возврат НачалаСтрок;
	
КонецФункции	

&НаСервере
Функция ПолучитьТорговуюТочку(Наименование)

	//
	Результат = Неопределено;
	
	//
	стрЧисло = "";
	Для Сч = 1 По СтрДлина(Наименование) Цикл
		
		//
		Символ = Сред(Наименование, Сч, 1);
		Если Символ = " " Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		Попытка
			
			//
			Ч = Число(Символ);
			стрЧисло = стрЧисло + Символ;
			
		Исключение
			
			//
			Если ЗначениеЗаполнено(стрЧисло) Тогда
				Прервать;
			КонецЕсли; 
			
		КонецПопытки;
		
	КонецЦикла; 
	
	//
	ЦифровойКод = "";
	Попытка
		
		//
		Ч = Число(стрЧисло);
		
		//
		ЦифровойКод = СокрЛП(стрЧисло);
		
	Исключение
	КонецПопытки;
	
	//
	Если ЗначениеЗаполнено(ЦифровойКод) Тогда
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	СтруктурныеЕдиницы.Ссылка
		     |ИЗ
		     |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		     |ГДЕ
		     |	СтруктурныеЕдиницы.Наименование ПОДОБНО &Наименование
		     |	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		     |	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Наименование", ЦифровойКод + "[^0-9]%");
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли; 
	
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции // ()

&НаСервере
Функция ПолучитьНоменклатуру(Знач Наименование, ВидНоменклатуры = Неопределено)

	//
	Результат = Неопределено;
	
	//
	Наименование = СокрЛП(Наименование);
	
	//
	Наименование1 = Наименование;
	Наименование2 = Лев(Наименование, СтрДлина(Наименование) - 1);
	Наименование3 = Лев(Наименование, СтрДлина(Наименование) - 2);
	Наименование4 = Лев(Наименование, СтрДлина(Наименование) - 3);
	Наименование5 = Лев(Наименование, СтрДлина(Наименование) - 4);
	Наименование6 = Лев(Наименование, СтрДлина(Наименование) - 5);
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование1
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование2
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование3
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование4
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование5
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	Номенклатура.Ссылка
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	Номенклатура.Наименование = &Наименование6
	     |{ГДЕ
	     |	Номенклатура.ВидНоменклатуры.*}
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ТЗ.Ссылка
	     |ИЗ
	     |	ТЗ КАК ТЗ";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Наименование1", Наименование1);
	ПЗ.Параметры.Вставить("Наименование2", Наименование2);
	ПЗ.Параметры.Вставить("Наименование3", Наименование3);
	ПЗ.Параметры.Вставить("Наименование4", Наименование4);
	ПЗ.Параметры.Вставить("Наименование5", Наименование5);
	ПЗ.Параметры.Вставить("Наименование6", Наименование6);
	
	//
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ВидНоменклатуры");
		ЭлементОтбора.Установить(ВидНоменклатуры);
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции // ()

&НаСервере
Функция ПолучитьНоменклатуруПоВхождениюНаименования(Знач Наименование, ВидНоменклатуры = Неопределено)

	//
	Результат = Неопределено;
	
	//
	Наименование = СокрЛП(Наименование);
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ТаблицаНоменклатура.Ссылка КАК Номенклатура,
	     |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Поступление.Документ) КАК Приоритет
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	Справочник.Номенклатура КАК ТаблицаНоменклатура
	     |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	     |			Таблица.Ссылка КАК Документ,
	     |			Таблица.Номенклатура КАК Номенклатура
	     |		ИЗ
	     |			Документ.ПоступлениеТоваровУслуг.Товары КАК Таблица
	     |		ГДЕ
	     |			Таблица.Ссылка.Проведен
	     |			И Таблица.Ссылка.Дата >= &Дата
	     |			//И &Наименование ПОДОБНО ""%[ ]"" + Таблица.Номенклатура.Наименование + ""[ ]%""
	     |		{ГДЕ
	     |			Таблица.Номенклатура.ВидНоменклатуры.*}
	     |		
	     |		ОБЪЕДИНИТЬ ВСЕ
	     |		
	     |		ВЫБРАТЬ
	     |			Таблица.Ссылка,
	     |			Таблица.Номенклатура
	     |		ИЗ
	     |			Документ.ПоступлениеТоваровУслуг.Услуги КАК Таблица
	     |		ГДЕ
	     |			Таблица.Ссылка.Проведен
	     |			И Таблица.Ссылка.Дата >= &Дата
	     |			//И &Наименование ПОДОБНО ""%[ ]"" + Таблица.Номенклатура.Наименование + ""[ ]%""
	     |		{ГДЕ
	     |			Таблица.Номенклатура.ВидНоменклатуры.*}) КАК Поступление
	     |		ПО ТаблицаНоменклатура.Ссылка = Поступление.Номенклатура
	     |ГДЕ
	     |	&Наименование ПОДОБНО ""%[ ]"" + ТаблицаНоменклатура.Наименование + ""[ ]%""
	     |{ГДЕ
	     |	ТаблицаНоменклатура.ВидНоменклатуры.*}
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТаблицаНоменклатура.Ссылка
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ТЗ.Номенклатура,
	     |	ТЗ.Приоритет КАК Приоритет
	     |ИЗ
	     |	ТЗ КАК ТЗ
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Приоритет УБЫВ";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", ТекущаяДата() - 45*24*60*60);
	ПЗ.Параметры.Вставить("Наименование", Наименование);
	
	//
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ВидНоменклатуры");
		ЭлементОтбора.Установить(ВидНоменклатуры);
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Номенклатура;
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции // ()

&НаСервере
Процедура НайтиОбъектыПоСоответствию()
	
	//
	ИскомыеСоответствия = Новый Массив;
	
	//
	МТ = ТаблицаРезультата.Выгрузить().ВыгрузитьКолонку("Точка");
	Для Каждого Эл из МТ Цикл
		
		//
		ИскомаяСтрока = Эл;
		ИскомаяСтрока = нрег(ИскомаяСтрока);
		ИскомаяСтрока = СокрЛП(ИскомаяСтрока);
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		
		//
		Если ЗначениеЗаполнено(ИскомаяСтрока) Тогда 
			ИскомыеСоответствия.Добавить(ИскомаяСтрока); 
		КонецЕсли;
		
	КонецЦикла;
	
	//+++АК SHEP 20160822: обрезаем до заданной длины, иначе ошибка:
	//Невосстановимая ошибка
	//Ошибка при выполнении запроса POST к ресурсу /e1cib/logForm:
	//по причине:
	//Ошибка СУБД:
	//Microsoft SQL Server Native Client 10.0: Ошибка операции. Для индекса "TMPIND_0" длина элемента индекса, равная 906 байт, превышает максимальную длину, равную 900 байт.
	//HRESULT=80040E14, SQLSrvr: SQLSTATE=42000, state=3, Severity=10, native=1946, line=1
	МетаданныеИзмеренияСтрока = Метаданные.РегистрыСведений.СоответствиеСтрокОбъектам.Измерения.Строка;
	ДлинаИзмеренияСтрока = МетаданныеИзмеренияСтрока.Тип.КвалификаторыСтроки.Длина;
	//---АК SHEP 20160822
	//
	МН = ТаблицаРезультата.Выгрузить().ВыгрузитьКолонку("НоменклатураСтрока");
	Для Каждого Эл из МН Цикл
		
		//
		ИскомаяСтрока = Эл;
		ИскомаяСтрока = нрег(ИскомаяСтрока);
		ИскомаяСтрока = СокрЛП(ИскомаяСтрока);
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
		
		//
		Если ЗначениеЗаполнено(ИскомаяСтрока) Тогда 
			//+++АК SHEP 20160822
			//ИскомыеСоответствия.Добавить(ИскомаяСтрока)
			ИскомыеСоответствия.Добавить(Лев(ИскомаяСтрока, ДлинаИзмеренияСтрока));
			//---АК SHEP 20160822
		КонецЕсли;
		
	КонецЦикла;
	
	////
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			   |	СоответствиеСтрокОбъектам.Строка,
	//			   |	СоответствиеСтрокОбъектам.Объект
	//			   |ИЗ
	//			   |	РегистрСведений.СоответствиеСтрокОбъектам КАК СоответствиеСтрокОбъектам
	//			   |ГДЕ
	//			   |	СоответствиеСтрокОбъектам.Строка В(&Строки)";
	////			   
	//Запрос.УстановитьПараметр("Строки", ИскомыеСоответствия);
	//
	////
	//Объект.ТЗ_СоответствиеСтрокОбъектам = Запрос.Выполнить().Выгрузить();
	
	//
	МассивТочек = Новый Массив;
	
	//
	Для Каждого Стр Из ТаблицаРезультата Цикл
		
		//
		Если ЗначениеЗаполнено(Стр.Точка) Тогда
			
			//
			НС = ПолучитьТорговуюТочку(Стр.Точка);
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Стр.Точка);
			КонецЕсли;
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Лев(Стр.Точка, 10));
			КонецЕсли; 
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Лев(Стр.Точка, 9));
			КонецЕсли; 
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Лев(Стр.Точка, 8));
			КонецЕсли; 
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Лев(Стр.Точка, 7));
			КонецЕсли; 
			
			//
			Если Не ЗначениеЗаполнено(НС) Тогда
				НС = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Лев(Стр.Точка, 6));
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(НС) Тогда
				Стр.ТорговаяТочка = НС;
			Иначе				
				
				//
				ИскомаяСтрока = Стр.Точка;
				ИскомаяСтрока = нрег(ИскомаяСтрока);
				ИскомаяСтрока = СокрЛП(ИскомаяСтрока);
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				
				//
				СП = Новый Структура("Строка", ИскомаяСтрока);
				
				//
				НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
				Если НайденныеСтроки.Количество() > 0 Тогда
					Стр.ТорговаяТочка = НайденныеСтроки[0].Объект;
					Стр.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий = Истина;
				КонецЕсли;
				
			КонецЕсли;		
			
			//
			Если ЗначениеЗаполнено(Стр.ТорговаяТочка) Тогда
				
				//
				Дата = ?(ЗначениеЗаполнено(ДатаДокумента), Дата, ТекущаяДата());
				
				//
				Стр.ЦФО = ПолучитьЦФОТорговойТочки(Дата, Стр.ТорговаяТочка);
				
				//
				МассивТочек.Добавить(Стр.ТорговаяТочка);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		//
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) И ЗначениеЗаполнено(Стр.НоменклатураСтрока) Тогда
			
			//
			НС = Справочники.Номенклатура.НайтиПоНаименованию(Стр.НоменклатураСтрока);
			
			//
			Если НЕ ЗначениеЗаполнено(НС) Тогда
				НС = ПолучитьНоменклатуру(Стр.НоменклатураСтрока, Стр.ВидНоменклатуры);
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(НС) Тогда
				Стр.Номенклатура = НС;
			Иначе
				
				//
				ИскомаяСтрока = Стр.НоменклатураСтрока;
				ИскомаяСтрока = нрег(ИскомаяСтрока);
				ИскомаяСтрока = СокрЛП(ИскомаяСтрока);
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, " ", "");
				
				//
				СП = Новый Структура("Строка", ИскомаяСтрока);
				
				//
				НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
				Если НайденныеСтроки.Количество() > 0 Тогда
					Стр.Номенклатура = НайденныеСтроки[0].Объект;
					Стр.ПризнакНоменклатураНайденаПоРегиструСоответствий = Истина;
				КонецЕсли;
				
			КонецЕсли;		
			
			//
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				
				//
				Стр.Номенклатура = ПолучитьНоменклатуруПоВхождениюНаименования(Стр.НоменклатураСтрока, Стр.ВидНоменклатуры);	
				Стр.ПризнакНоменклатураНайденаПоВхождениюНаименования = ЗначениеЗаполнено(Стр.Номенклатура);
			
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				
				//
				Стр.ВидНоменклатуры = Стр.Номенклатура.ВидНоменклатуры;	
				Стр.ТипНоменклатуры = Стр.Номенклатура.ТипТовара;	
				
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;
	
	//
	ДокументОснование = ПолучитьЗначениеРеквизитаШапки("ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		//
		ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница КАК ТорговаяТочка
		     |ИЗ
		     |	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
		     |ГДЕ
		     |	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Ссылка
		     |	И НЕ ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница ЕСТЬ NULL";
		
		
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Ссылка", ДокументОснование); 
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда //ОДНА ТОРГОВАЯ ТОЧКА В ЗАЯВКЕ, ЗДЕСЬ ПРОСТО БЕРЕМ ЕЕ И ПОДСТАВЛЯЕМ В ПУСТЫЕ
		
			//
			Выборка.Следующий();
			
			//
			Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл
				
				//
				Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
					СтрокаТЗ.ТорговаяТочка = Выборка.ТорговаяТочка;
				КонецЕсли; 
				
			КонецЦикла;	
			
			//
			Возврат;
			
		КонецЕсли; 
		
		//
		//Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл //ОДНА ТОЧЕК НЕСКОЛЬКО, ТО ПЫТАЕМСЯ ИСКАТЬ ПО СУММАМ
		//	
		//	//
		//	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
		//		
		//		//
		//		ТЗ = "ВЫБРАТЬ
		//		     |	ЗаявкаНаРасходованиеСредствТорговыеТочки.ТорговаяТочка
		//		     |ИЗ
		//		     |	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
		//		     |ГДЕ
		//		     |	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка = &Ссылка
		//		     |	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Сумма = &Сумма
		//		     |	И НЕ ЗаявкаНаРасходованиеСредствТорговыеТочки.ТорговаяТочка В (&ТорговыеТочки)";
		//			 
		//			 
		//		//
		//		ПЗ = Новый ПостроительЗапроса;
		//		ПЗ.Текст = ТЗ;
		//		
		//		//
		//		ПЗ.Параметры.Вставить("Ссылка", ДокументОснование); 
		//		ПЗ.Параметры.Вставить("Сумма", СтрокаТЗ.СтоимостьСНДС);
		//		ПЗ.Параметры.Вставить("ТорговыеТочки", МассивТочек);
		//		
		//		//
		//		ПЗ.Выполнить();
		//		
		//		//
		//		Выборка = ПЗ.Результат.Выбрать();
		//		Если Выборка.Следующий() Тогда
		//			СтрокаТЗ.ТорговаяТочка = Выборка.ТорговаяТочка;	
		//		КонецЕсли; 
		//		
		//	КонецЕсли;	
		//	
		//КонецЦикла;		
	
	КонецЕсли; 
	
КонецПроцедуры

//-----------------------

&НаСервере
Процедура ОчиститьТаблицуНаСервере()	
	
	//
	Объект.ТабДок = Новый ТабличныйДокумент;
	
	//
	ТаблицаРезультата.Очистить();
	ТаблицаРеквизитов.Очистить();
	
	//
	ВсеСвоиИНН.Очистить();
	ВсеИНН.Очистить();
	
КонецПроцедуры

//-----------------------

&НаСервере
Функция ИсправитьСодержимое(Текст, RegExp)
				
	//замены
	Текст	= СтрЗаменить(Текст, "-"+Символы.ПС, "");
	Текст	= СтрЗаменить(Текст, Символы.ПС, " ");
	Текст	= СтрЗаменить(Текст, Символы.НПП, "");
	Текст	= СтрЗаменить(Текст, "  ", " ");
	Текст	= СтрЗаменить(Текст, "  ", " ");
	Текст	= СтрЗаменить(Текст, "  ", " ");
	
	////
	//ИспользуемыеСимволы = " .,~!@#$%^&*()_+/"
	
	//Запятую на точку в числах
	RegExp.Pattern	=  "(\d+)(,)(\d.)";	
	Текст	= RegExp.Replace(Текст, "$1.$3");
	
	//// сократим все пробелы
	//RegExp.Pattern	=  "(\ ){2,}";	
	//Текст	= RegExp.Replace(Текст, " ");
	//
	////Пустые
	//RegExp.Pattern	=  "^((-+)|(_+))$";	
	//Текст	= RegExp.Replace(Текст, "");	
	
	//пробелы в триадах
	RegExp.Pattern	=  "(\d+) (\d{3})(\D*)";	
	Текст	= RegExp.Replace(Текст, "$1$2$3");	
	Текст	= RegExp.Replace(Текст, "$1$2$3");				
	
	//
	Возврат Текст;
			
КонецФункции	

//-----------------------

&НаКлиенте
Процедура УстановитьШиринуКолонок()
	
	// регулярки
	RegExp				= Новый COMОбъект("VBScript.RegExp");
    RegExp.IgnoreCase	= Истина;
	RegExp.Global		= Истина;
    RegExp.MultiLine	= Ложь;		
	
	//
	Для Кол = 1 по Объект.ТабДок.ШиринаТаблицы Цикл
		
		//
		Ширина = 0;
		КоличествоЗаполненныхСтрок = 1;
		ОбщаяДлина = 0;
		
		Для Стр = 1 По Объект.ТабДок.ВысотаТаблицы Цикл
			
			//
			Ячейка	= Объект.ТабДок.Область(Стр, Кол, Стр, Кол);
			
			//
			Если НЕ ЗначениеЗаполнено(Ячейка.Текст) Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			//Текст = ИсправитьСодержимое(Ячейка.Текст, RegExp);							
			Текст = Ячейка.Текст;
			
			Ячейка.Текст = Текст;
			
			//
			ОбщаяДлина = ОбщаяДлина + СтрДлина(Текст);
			КоличествоЗаполненныхСтрок = КоличествоЗаполненныхСтрок + 1;
			
			//
			Ширина	= ?(СтрДлина(Текст) > Ширина, СтрДлина(Текст), Ширина);
			
			//
			Ячейка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			
			//
			Если СтрДлина(Ячейка.Текст) <= 10 Тогда
				
				Попытка
					
					//
					Ч = Число(Ячейка.Текст);
					
					//
					Ячейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					
				Исключение
				КонецПопытки;	
				
			КонецЕсли; 
			
		КонецЦикла;
		
		//
		Область = Объект.ТабДок.Область(1, Кол, Объект.ТабДок.ВысотаТаблицы, Кол); 
		
		//
		Если КоличествоЗаполненныхСтрок > 5 Тогда
			Область.ШиринаКолонки = МАКС(1.5, ОбщаяДлина/КоличествоЗаполненныхСтрок * 1.1, ОбщаяДлина / Объект.ТабДок.ВысотаТаблицы * 1.1);
		Иначе			
			Область.ШиринаКолонки = МАКС(1.5, 0, ОбщаяДлина / Объект.ТабДок.ВысотаТаблицы * 1.1);
		КонецЕсли; 
		
		//
		Если Область.ШиринаКолонки > 70 Тогда
			Область.ШиринаКолонки = 40;
			Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		КонецЕсли; 
		
		
		//Область.ШиринаКолонки = Ширина * 0.5;
		//Область.ШиринаКолонки = ?(Ширина>25, 25, Ширина+1);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура _ЗаполнитьНаСервере()
	
	//
	ЗаполнитьТаблицуРеквизитовШапки();
	
	// регулярки
	RegExp				= Новый COMОбъект("VBScript.RegExp");
    RegExp.IgnoreCase	= Истина;
	RegExp.Global		= Истина;
    RegExp.MultiLine	= Ложь;	
	
	ТаблицаРезультата.Очистить();
	ТаблицаРеквизитов.Очистить();
	
	ВТД = Объект.ТабДок;
	Строк = ВТД.ВысотаТаблицы;
	Колонок = ВТД.ШиринаТаблицы;
	
	ВМ = ПодготовитьВременныеМассивы(ВТД);
	Строки				= ВМ.Строки;
	СтрокиТипы			= ВМ.СтрокиТипы;
	СтруктураТаблицы	= ВМ.СтруктураТаблицы;
	ВесаСтрок			= ВМ.ВесаСтрок;
	
	Шапки = НайтиШапки(Строки, ВесаСтрок, RegExp);
	
	Для Каждого Стр Из Шапки цикл
		СтруктураТаблицы[Стр] = "Ш";		
	КонецЦикла;	
	
	НомераКолонок = НайтиНомераКолонок(Строки, ВесаСтрок, RegExp);
	
	Для Каждого Стр Из НомераКолонок цикл
		СтруктураТаблицы[Стр] = "Н";		
	КонецЦикла;		
	
	ПерваяШапка		= 0;
	НачалаСтрок = ПолучитьНачалаСтрок(СтруктураТаблицы, ПерваяШапка);
	
	ПоследняяСтрока = 0;	
	Для Каждого Начало из НачалаСтрок Цикл			
		
		//
		ККК = НайтиКолонкиВШапке(RegExp, ВТД, Начало.Шапка);
		
		//
		ПроказатьНайденныеЗаголовки(ВТД, Начало.Шапка, ККК); //Покажем для наглядности, где что нашли, потом убрать			
		
		//
		СписокНайденныхСтрок	= НайтиСтрокиСДанными(Начало.Начало, Строки, СтруктураТаблицы, ВесаСтрок, СтрокиТипы);	
		МаксимальнаяСтрока		= СписокНайденныхСтрок[СписокНайденныхСтрок.Количество()-1];
		ПоследняяСтрока			= ?(МаксимальнаяСтрока>ПоследняяСтрока, МаксимальнаяСтрока, ПоследняяСтрока);
		
		//
		Если ККК.КолонкаНоменклатуры = 0 Тогда 
			Продолжить 
		КонецЕсли;
		
		//
		ПолучитьСодержимоеСтрок(ВТД, ККК, СписокНайденныхСтрок, RegExp);
		
		
	КонецЦикла;
	
	//
	НайтиРеквизитыДокумента(ВТД, RegExp, ПерваяШапка, ПоследняяСтрока);
	
	//
	НайтиОбъектыПоСоответствию();
	
	//
	//РаскраситьТаблицу(ВТД, СтруктураТаблицы);
	
	//
	ТабДок = ВТД;
	
КонецПроцедуры



&НаСервере
Функция ПолучитьСписокИНН(Текст, RegExp)
	
	//
	Результат = Новый Массив;
	
	//
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	//
	RegExp.Pattern = "(?:\D+|^)(\d{12}|\d{10})(?:\D+|$)";
	Matches	= RegExp.Execute(Текст);
	
	//
	Если Matches.Count() > 0 Тогда
		
		//
		НайденнаяСтрока = Matches.Item(0).SubMatches.Item(0);
		Если Результат.Найти(НайденнаяСтрока) = Неопределено Тогда
			Результат.Добавить(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЕсли;                  
	
	//
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокБанковскихСчетов(Текст, RegExp)
	
	//
	Результат = Новый Массив;
	
	//
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	//
	RegExp.Pattern = "(?:^|\D+|\s)(\d{20}|\d{28})(?:|\s|\D+|$)";
	
	//
	Matches	= RegExp.Execute(Текст);
	
	//
	Если Matches.Count() > 0 Тогда
		
		//
		НайденнаяСтрока = Matches.Item(0).SubMatches.Item(0);
		Если Результат.Найти(НайденнаяСтрока) = Неопределено Тогда
			Результат.Добавить(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЕсли;                  
	
	//
	Возврат Результат;
	
КонецФункции

//----------------

&НаСервере
Процедура УстановитьЗначениеРеквизитаШапки(ИмяРеквизита, Значение)
	
	//
	СП = Новый Структура("Имя", ИмяРеквизита);
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьЗначениеРеквизитаШапки(ИмяРеквизита)
	
	//
	СП = Новый Структура("Имя", ИмяРеквизита);
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Значение;
	КонецЕсли;
	
КонецФункции

//-----------------

&НаСервере
Процедура РазобратьШапкуНаСервере(НомерДокумента)
	
	//
	ЗаполнитьТаблицуРеквизитовШапки();
	
	//
	ТЗ_ИсходныеДанные = ДанныеФормыВЗначение(ТЗ_ИсходнаяТаблица, Тип("ТаблицаЗначений"));
	
	//РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
	RegExp = Новый COMОбъект("VBScript.RegExp");
    RegExp.IgnoreCase = True;
	RegExp.Global = True;
    RegExp.MultiLine = True;	
	
	
	//ШАПКА ДОКУМЕНТА
	СП = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ШД");
	
	//
	АнализируемыТекст = "";
	
	//
	НайденныеСтроки = ТЗ_ИсходныеДанные.НайтиСтроки(СП);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		//
		АнализируемыТекст = АнализируемыТекст + НайденнаяСтрока.F1 + Символы.ПС;
		
	КонецЦикла;
	
	//ПОДВАЛ ДОКУМЕНТА
	СП = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ПД");
	
	//
	НайденныеСтроки = ТЗ_ИсходныеДанные.НайтиСтроки(СП);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		//
		АнализируемыТекст = АнализируемыТекст + НайденнаяСтрока.F1 + Символы.ПС;
		
	КонецЦикла;
	
	//
	МассивИНН = ПолучитьСписокИНН(АнализируемыТекст, RegExp);
	МассивБанковскихСчетов = ПолучитьСписокБанковскихСчетов(АнализируемыТекст, RegExp);
	
	//ДАТА
	Дата = ПолучитьЗначениеРеквизитаШапки("Дата");
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		
		//
		СписокДат = ПолучитьСписокДатИзСтроки(АнализируемыТекст);
		Если СписокДат.Количество() > 0 Тогда
			
			//
			УстановитьЗначениеРеквизитаШапки("Дата", СписокДат[0].Значение); 
			Если ПризнакЭтоУПД Тогда
				УстановитьЗначениеРеквизитаШапки("ДатаСФ", СписокДат[0].Значение);
			КонецЕсли; 
				
		КонецЕсли;
		
	КонецЕсли; 
	
	//НОМЕР
	Номер = ПолучитьЗначениеРеквизитаШапки("Номер");
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		
		//
		СписокНомеров = ПолучитьСписокНомеровИзСтроки(АнализируемыТекст);
		Для каждого ЭлементСписка Из СписокНомеров Цикл
			
			//
			Если МассивБанковскихСчетов.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				
				//
				Номер = ЭлементСписка.Значение;
				Попытка
					Номер = Число(Номер);
				Исключение
				КонецПопытки;
				
				//
				УстановитьЗначениеРеквизитаШапки("Номер", Формат(Номер, "ЧГ="));
				Если ПризнакЭтоУПД Тогда
					УстановитьЗначениеРеквизитаШапки("НомерСФ", Формат(Номер, "ЧГ="));
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//ОРГАНИЗАЦИЯ
	
	//ПОИСК ПО ИНН
	Сч = 0;
	Для Каждого ЭлементМассива Из МассивИНН Цикл
		
		//
		НайденныйЭлемент = Справочники.Организации.НайтиПоРеквизиту("ИНН", ЭлементМассива);
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			
			//
			УстановитьЗначениеРеквизитаШапки("Организация", НайденныйЭлемент);
			
			//
			МассивИНН[Сч] = "XXX";
			
			//
			Прервать;
			
		КонецЕсли;
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;	
	
	//ПОИСК ПО НАИМЕНОВАНИЮ
	Организация = ПолучитьЗначениеРеквизитаШапки("Организация");
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
	
		//
		ТЗ = "ВЫБРАТЬ
		     |	Организации.Наименование,
		     |	Организации.Ссылка
		     |ИЗ
		     |	Справочник.Организации КАК Организации
		     |ГДЕ
		     |	НЕ Организации.ПометкаУдаления";
			 
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			_АнализируемыйТекст = нрег(АнализируемыТекст);
			_Наименование = нрег(Выборка.Наименование);
			
			//
			Если Найти(_АнализируемыйТекст, _Наименование) > 0 Тогда
				
				//
				УстановитьЗначениеРеквизитаШапки("Организация", Выборка.Ссылка);	
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 
	
	//КОНТРАГЕНТ
	
	//
	Сч = 0;
	Для Каждого ЭлементМассива Из МассивИНН Цикл
		
		//
		НайденныйЭлемент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ЭлементМассива);
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			
			//
			УстановитьЗначениеРеквизитаШапки("Контрагент", НайденныйЭлемент);
			
			//
			Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
				
				//
				СтатьяДДС = ПолучитьЗначениеРеквизитаШапки("СтатьяДДС");
				Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
					УстановитьЗначениеРеквизитаШапки("СтатьяДДС", НайденныйЭлемент.СтатьяДвиженияДенежныхСредств);
				КонецЕсли; 
				
				//
				ЗаполнитьДоговорКонтрагента();
				ЗаполнитьЗаявкуНаРасходованиеСредств();
			
			КонецЕсли; 
			
			//
			МассивИНН[Сч] = "XXX";
			
			//
			Прервать;
			
		КонецЕсли;			
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//
	ЗначениеВДанныеФормы(ТЗ_ИсходныеДанные, ТЗ_ИсходнаяТаблица);
	
КонецПроцедуры	

&НаСервере
Процедура РазобратьТаблицуНаСервере(НомерДокумента)
	
	//
	ТЗ_ИсходныеДанные = ДанныеФормыВЗначение(ТЗ_ИсходнаяТаблица, Тип("ТаблицаЗначений"));
	
	//РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
	RegExp = Новый COMОбъект("VBScript.RegExp");
    RegExp.IgnoreCase = True;
	RegExp.Global = True;
    RegExp.MultiLine = True;	
	
	//ШАПКА ТАБЛИЦЫ
	СП = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ШТ");
	
	//
	СоответствиеНаименованийКолонок = Новый Соответствие;
	СоответствиеНаименованийКолонок.Вставить("НаименованиеНоменклатуры", "");
	СоответствиеНаименованийКолонок.Вставить("НаименованиеТочки", "");
	СоответствиеНаименованийКолонок.Вставить("Количество", "");
	СоответствиеНаименованийКолонок.Вставить("Цена", "");
	СоответствиеНаименованийКолонок.Вставить("СуммаБезНДС", "");
	СоответствиеНаименованийКолонок.Вставить("СтавкаНДС", "");
	СоответствиеНаименованийКолонок.Вставить("СуммаНДС", "");
	СоответствиеНаименованийКолонок.Вставить("СуммаСНДС", "");
	
	//
	СтрокиКУдалению = Новый Массив;
	
	//
	НайденныеСтроки = ТЗ_ИсходныеДанные.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		//
		ПерваяСтрокаШапки = НайденныеСтроки[0];
		
		//
		Для Сч = 1 По НайденныеСтроки.Количество() - 1 Цикл
			
			//
			НайденнаяСтрока = НайденныеСтроки[Сч];
			Для Сч1 = 1 По НайденнаяСтрока.Ширина Цикл
			
				//
				ИмяПоля = "F" + Сч1;
				Значение = НайденнаяСтрока[ИмяПоля];
				
				//
				ПерваяСтрокаШапки[ИмяПоля] = ПерваяСтрокаШапки[ИмяПоля] +  " " + Значение;
				
				//
				ПерваяСтрокаШапки[ИмяПоля] = СтрЗаменить(ПерваяСтрокаШапки[ИмяПоля], Символы.ПС, " ");
				ПерваяСтрокаШапки[ИмяПоля] = СтрЗаменить(ПерваяСтрокаШапки[ИмяПоля], "  ", " ");
				ПерваяСтрокаШапки[ИмяПоля] = СтрЗаменить(ПерваяСтрокаШапки[ИмяПоля], "  ", " ");
				
			КонецЦикла; 
			
			//
			ПерваяСтрокаШапки.Ширина = МАКС(ПерваяСтрокаШапки.Ширина, НайденнаяСтрока.Ширина);
			
			//
			СтрокиКУдалению.Добавить(НайденнаяСтрока);
		
		КонецЦикла; 
		
	Иначе
		Сообщить("Не удалось определить шапку таблицы");
		Возврат;
	КонецЕсли; 
	
	//
	Для каждого НайденнаяСтрока Из СтрокиКУдалению Цикл
		ТЗ_ИсходныеДанные.Удалить(НайденнаяСтрока);
	КонецЦикла; 
	
	//СТРОКА ТАБЛИЦЫ
	СП = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "СТ");
	НайденныеСтрокиТаблицы = ТЗ_ИсходныеДанные.НайтиСтроки(СП);
	
	//
	СчетчикиНепустых = Новый Структура;
	Для каждого НайденнаяСтрокаТаблицы Из НайденныеСтрокиТаблицы Цикл
	
		//
		Для Сч = 1 По НайденнаяСтрокаТаблицы.Ширина Цикл
			
			//
			ИмяТекущейКолонки = "F" + Сч;		
			Если НЕ СчетчикиНепустых.Свойство(ИмяТекущейКолонки) Тогда
				СчетчикиНепустых.Вставить(ИмяТекущейКолонки, 0);
			КонецЕсли;	
			
			//
			Значение = НайденнаяСтрокаТаблицы[ИмяТекущейКолонки];
			Если ЗначениеЗаполнено(Значение) Тогда
				
				//
				СчетчикиНепустых[ИмяТекущейКолонки] = СчетчикиНепустых[ИмяТекущейКолонки] + 1;
			
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;	
	
	//
	Индекс = 0;
		
	//НОМЕНКЛАТУРА
	МаксЧислоВхождений = 0;
	
	//
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(товар)|(услуг)|(наименование)|(номенклатура)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("НаименованиеНоменклатуры");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;	
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("НаименованиеНоменклатуры", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;  
		
	КонецЦикла;
	
	//КОЛИЧЕСТВО
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(количество)|(кол\D+во)|(кол)|(кол-во)|(объем)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("Количество");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("Количество", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;  
		
	КонецЦикла;
	
	//ЦЕНА
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(цена)|(цен)|(тариф)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("Цена");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("Цена", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;   
		
	КонецЦикла;
	
	//СуммаБезНДС
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(стоимость)|(сумма)|(сумма\s+без)|(учета)|(без учета)|(без ндс)|(без налога)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("СуммаБезНДС");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("СуммаБезНДС", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;   
		
	КонецЦикла;
	
	//СуммаСНДС
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(стоимость)|(сумма)|(сумма\s+с)|(учетом)|(с учетом)|(с ндс)|(с налогом)|(с учетом налога)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("СуммаСНДС");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("СуммаСНДС", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;   
		
	КонецЦикла;
	
	//СТАВКА
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(ставка)|(ндс)|(налоговая)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("СтавкаНДС");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("СтавкаНДС", ИмяТекущейКолонки);
				
				//допущение, что следующая колонка Сумма с НДС
				СоответствиеНаименованийКолонок.Вставить("СуммаНДС", "F" + (Сч + 1));
				
			КонецЕсли;	
		
		КонецЕсли;   
		
	КонецЦикла;
	
	//СуммаНДС
	МаксЧислоВхождений = 0;
	Для Сч = 1 По ПерваяСтрокаШапки.Ширина Цикл
		
		//
		ИмяТекущейКолонки = "F" + Сч;
		
		//
		Значение = ПерваяСтрокаШапки[ИмяТекущейКолонки];
		
		//
		СтрМаска = "(сумма ндс)|(сумма налога)";
		ЧислоВхождений = ЧислоВхождений(Значение, RegExp, СтрМаска);
		
		//
		КоличествоНепустых1 = 0;
		КоличествоНепустых2 = 0;
		
		//
		_Колонка = СоответствиеНаименованийКолонок.Получить("СуммаНДС");
		Если ЗначениеЗаполнено(_Колонка) Тогда
			КоличествоНепустых1 = СчетчикиНепустых[_Колонка];
		КонецЕсли; 
		
		//
		Попытка
			КоличествоНепустых2 = СчетчикиНепустых[ИмяТекущейКолонки];
		Исключение
			Продолжить;
		КонецПопытки;
		
		//
		Если ЧислоВхождений > 0 Тогда
			
			//
			Если ЧислоВхождений > МаксЧислоВхождений ИЛИ КоличествоНепустых2 > КоличествоНепустых1 Тогда
			
				//
				МаксЧислоВхождений = МАКС(ЧислоВхождений, МаксЧислоВхождений);
				СоответствиеНаименованийКолонок.Вставить("СуммаНДС", ИмяТекущейКолонки);
				
			КонецЕсли;	
		
		КонецЕсли;   
		
	КонецЦикла;

	//ОБРАБОТКА СТРОК ТАБЛИЦЫ
	
	//
	Сч = 1;
	Для каждого НайденнаяСтрокаТаблицы Из НайденныеСтрокиТаблицы Цикл
		
		//НАИМЕНОВАНИЕ НОМЕНКЛАТУРЫ
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("НаименованиеНоменклатуры");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			
			//
			НаименованиеНоменклатуры = НайденнаяСтрокаТаблицы[ИмяКолонки];
			Если НЕ ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
				Продолжить;
			КонецЕсли; 
			
			//Извлечем наименования точек
		    RegExp.Pattern = "(.*?) *\(*#(.+?)#\)* *(.*)";
			Если RegExp.Test(НаименованиеНоменклатуры) Тогда	
				
				//
				НаименованиеТочки = СтрЗаменить(RegExp.Replace(НаименованиеНоменклатуры, "$2"), " ", "");
				НаименованиеНоменклатуры = RegExp.Replace(НаименованиеНоменклатуры, "$1$3");
				
			Иначе
				
				//
				НаименованиеТочки = "";
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("НаименованиеТочки");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			НаименованиеТочки = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("Количество");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			Количество = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("Цена");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			Цена = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("СуммаБезНДС");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СуммаБезНДС = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("СтавкаНДС");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СтавкаНДС = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("СуммаНДС");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СуммаНДС = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		ИмяКолонки = СоответствиеНаименованийКолонок.Получить("СуммаСНДС");
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СуммаСНДС = НайденнаяСтрокаТаблицы[ИмяКолонки];
		КонецЕсли; 
		
		//
		НоваяСтрока = ТаблицаРезультатаВсеДокументы.Добавить();
		
		//
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
		//
		НоваяСтрока.НомерСтроки = Сч;
		
		//
		НоваяСтрока.НоменклатураСтрока = НаименованиеНоменклатуры;
		НоваяСтрока.Точка = НаименованиеТочки;
		
		//
		Попытка
			НоваяСтрока.Количество = Число(Количество);
		Исключение
		КонецПопытки;	
		
		//
		Попытка
			НоваяСтрока.Цена = Число(Цена);
		Исключение
		КонецПопытки;	
		
		//
		Попытка
			НоваяСтрока.СтоимостьБезНДС = Число(СуммаБезНДС);
		Исключение
		КонецПопытки;	
		
		//
		Попытка
			НоваяСтрока.СтоимостьСНДС = Число(СуммаСНДС);
		Исключение
		КонецПопытки;
		
		//
		Попытка
			НоваяСтрока.СтавкаНДС = Число(СтавкаНДС);
		Исключение
		КонецПопытки;	
		
		//
		Попытка
			НоваяСтрока.СуммаНДС = Число(СуммаНДС);
		Исключение
		КонецПопытки;	
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;	
	
	//
	ЗначениеВДанныеФормы(ТЗ_ИсходныеДанные, ТЗ_ИсходнаяТаблица);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(НомерДокумента = 1, Очищать = Истина)
	
	//ТАБЛИЦА
	
	//РазобратьТаблицуНаСервере(НомерДокумента);
	
	//
	Если Очищать Тогда
		ТаблицаРезультата.Очистить();
	КонецЕсли;
	
	//
	СП = Новый Структура("НомерДокумента", НомерДокумента);
	
	//
	НайденныеСтроки = ТаблицаРезультатаВсеДокументы.НайтиСтроки(СП);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		//
		НоваяСтрока = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		
	КонецЦикла; 
	
	//ШАПКА + ПОДВАЛ
	РазобратьШапкуНаСервере(НомерДокумента);
	
КонецПроцедуры	

&НаКлиенте
Процедура Разобрать(Команда)
	
	//
	Если ТЗ_ИсходнаяТаблица.Количество() = 0 Тогда
		Предупреждение("Нет данных для анализа");
		Возврат;
	КонецЕсли;	
	
	//
	НомераДокументов = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТЗ_ИсходнаяТаблица Цикл
		НомераДокументов.Вставить(СтрокаТЗ.НомерДокумента);
	КонецЦикла;
	
	//
	НомерДокумента = 1;
	
	//
	НомераДокументовДляВыбора = Новый Массив;
	
	//
	ТаблицаРезультатаВсеДокументы.Очистить();
	Для каждого ЭлементСоответствия Из НомераДокументов Цикл
		
		//
		СП = Новый Структура("НомерДокумента, МаркерОбласти", ЭлементСоответствия.Ключ, "СТ");
		
		//
		НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП);
		Если НайденныеСтроки.Количество() > 0  Тогда
			
			//
			НомераДокументовДляВыбора.Добавить(ЭлементСоответствия.Ключ);
			
			//
			РазобратьТаблицуНаСервере(ЭлементСоответствия.Ключ);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	Если НомераДокументовДляВыбора.Количество() > 1 Тогда
		
		//
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТЗ_ИсходнаяТаблица", ТЗ_ИсходнаяТаблица);
		ПараметрыОткрытия.Вставить("ТаблицаРезультататаВсеДокументы", ТаблицаРезультатаВсеДокументы);
		
		//
		Форма = ПолучитьФорму("Обработка.АК_ЗагрузкаСканов.Форма.ФормаВыбораДокумента", ПараметрыОткрытия);
		
		//
		НомерДокумента = Форма.ОткрытьМодально();
		Если НомерДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	
	КонецЕсли; 
	
	//+++АК SHEP 20160819: добавил выбор нескольких строк
	Если ТипЗнч(НомерДокумента) = Тип("Массив") Тогда
		ТаблицаРезультата.Очистить();
		МассивВыбранныхСтрок = НомерДокумента;
		Для Каждого НомерДокумента Из МассивВыбранныхСтрок Цикл
			НомерОбрабатываемогоДокумента = НомерДокумента;
			ЗаполнитьНаСервере(НомерДокумента, Ложь);
		КонецЦикла;
		
		Сч = 0;
		Для Каждого СтрокаТЧ Из ТаблицаРезультата Цикл
			Сч = Сч + 1; 
			СтрокаТЧ.НомерСтроки = Сч;
		КонецЦикла;
		
	Иначе
		//
		НомерОбрабатываемогоДокумента = НомерДокумента;
		ЗаполнитьНаСервере(НомерДокумента);
	КонецЕсли;
	//---АК SHEP 20160819
	
	//
	ПризнакЭтоУслуги = Истина;
	
	//
	ОбработатьСтрокиТаблицы();
	
	//
	Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
		ПризнакЭтоУслуги = ПризнакЭтоУслуги И (СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга"));
	КонецЦикла; 
	
	//
	ЗаполнитьВидОперации();
	
	//
	ЗаполнитьДокументПоступления();
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

//-------------------------

&НаКлиенте
Функция ЭтоРазделительШапкиДокумента(Знач Текст)

	//
	Результат = 0;
	
	//
	МассивМаркеров = Новый Массив;
	
	//
	МассивМаркеров.Добавить("УНИФИЦИРОВАННАЯ");
	МассивМаркеров.Добавить("ФОРМА");
	МассивМаркеров.Добавить("ПРИЛОЖЕНИЕ");
	
	//
	МассивМаркеров.Добавить("СЧЕТ");
	МассивМаркеров.Добавить("ФАКТУРА");
	МассивМаркеров.Добавить("АКТ");
	МассивМаркеров.Добавить("НАКЛАДНАЯ");
	МассивМаркеров.Добавить("ТОРГ-12");
	
	//
	МассивМаркеров.Добавить("ПОСТАВЩИК");
	МассивМаркеров.Добавить("ПРОДАВЕЦ");
	МассивМаркеров.Добавить("ЗАКАЗЧИК");
	МассивМаркеров.Добавить("ПОКУПАТЕЛЬ");
	МассивМаркеров.Добавить("ПЛАТЕЛЬЩИК");
	МассивМаркеров.Добавить("ПОЛУЧАТЕЛЬ");
	МассивМаркеров.Добавить("ГРУЗОПОЛУЧАТЕЛЬ");
	МассивМаркеров.Добавить("ОТПРАВИТЕЛЬ");
	МассивМаркеров.Добавить("ГРУЗОТПРАВИТЕЛЬ");
	МассивМаркеров.Добавить("АДРЕС");
	
	//
	МассивМаркеров.Добавить("ИНН");
	МассивМаркеров.Добавить("КПП");
	МассивМаркеров.Добавить("БИК");
	
	//
	Текст = СокрЛП(Текст);
	Текст = ВРЕГ(Текст);
	
	//
	Текст = СтрЗаменить(Текст, ":", " ");
	Текст = СтрЗаменить(Текст, ".", " ");
	Текст = СтрЗаменить(Текст, ",", " ");
	Текст = СтрЗаменить(Текст, "-", " ");
	Текст = СтрЗаменить(Текст, "/", " ");
	Текст = СтрЗаменить(Текст, "|", " ");
	Текст = СтрЗаменить(Текст, "(", " ");
	Текст = СтрЗаменить(Текст, ")", " ");
	
	//
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		АнализируемаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если МассивМаркеров.Найти(АнализируемаяСтрока) <> Неопределено Тогда
			Результат = Результат + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	Возврат Результат;

КонецФункции
 
&НаКлиенте
Функция ЭтоРеквизитШапкиТаблицы(Знач Текст)
	
	//
	Результат = 0;
	
	//
	Шапки = Новый Массив;
	
	//
	МассивМаркеров = Новый Массив;
	МассивМаркеров.Добавить("НАИМЕНОВАНИЕ");
	МассивМаркеров.Добавить("НОМЕНКЛАТУРА");
	МассивМаркеров.Добавить("КОД");
	МассивМаркеров.Добавить("АРТИКУЛ");
	МассивМаркеров.Добавить("ТОВАР");
	МассивМаркеров.Добавить("ТОВАРЫ");
	МассивМаркеров.Добавить("УСЛУГА");
	МассивМаркеров.Добавить("УСЛУГИ");
	МассивМаркеров.Добавить("ЕД");
	МассивМаркеров.Добавить("ЕДИНИЦА");
	МассивМаркеров.Добавить("ИЗМ");
	МассивМаркеров.Добавить("ИЗМЕРЕНИЯ");
	МассивМаркеров.Добавить("ОКЕИ");
	МассивМаркеров.Добавить("КОЛ");
	МассивМаркеров.Добавить("КОЛИЧЕСТВО");
	МассивМаркеров.Добавить("ЦЕН");
	МассивМаркеров.Добавить("ЦЕНА");
	МассивМаркеров.Добавить("СТАВК");
	МассивМаркеров.Добавить("СТАВКА");
	МассивМаркеров.Добавить("НДС");
	МассивМаркеров.Добавить("СУММА");
	МассивМаркеров.Добавить("СТОИМОСТЬ");
	МассивМаркеров.Добавить("РУБ");
	МассивМаркеров.Добавить("СТРАНА");
	
	//
	Текст = СокрЛП(Текст);
	Текст = ВРЕГ(Текст);
	
	//
	Текст = СтрЗаменить(Текст, ":", " ");
	Текст = СтрЗаменить(Текст, ".", " ");
	Текст = СтрЗаменить(Текст, ",", " ");
	Текст = СтрЗаменить(Текст, "-", " ");
	Текст = СтрЗаменить(Текст, "/", " ");
	Текст = СтрЗаменить(Текст, "|", " ");
	Текст = СтрЗаменить(Текст, "(", " ");
	Текст = СтрЗаменить(Текст, ")", " ");
	
	//
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		АнализируемаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если МассивМаркеров.Найти(АнализируемаяСтрока) <> Неопределено Тогда
			Результат = Результат + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ЭтоРазделительПодвалаДокумента(Знач Текст)

	//
	Результат = 0;
	
	//
	МассивМаркеров = Новый Массив;
	
	//
	МассивМаркеров.Добавить("ВСЕГО");
	МассивМаркеров.Добавить("ИТОГО");
	МассивМаркеров.Добавить("ОПЛАТЕ");
	МассивМаркеров.Добавить("ПРОПИСЬЮ");
	МассивМаркеров.Добавить("РУКОВОДИТЕЛЬ");
	МассивМаркеров.Добавить("БУХГАЛТЕР");
	МассивМаркеров.Добавить("ПОДП");
	МассивМаркеров.Добавить("ПОДПИСЬ");
	
	//
	Текст = СокрЛП(Текст);
	Текст = ВРЕГ(Текст);
	
	//
	Текст = СтрЗаменить(Текст, ":", " ");
	Текст = СтрЗаменить(Текст, ".", " ");
	Текст = СтрЗаменить(Текст, ",", " ");
	Текст = СтрЗаменить(Текст, "-", " ");
	Текст = СтрЗаменить(Текст, "/", " ");
	Текст = СтрЗаменить(Текст, "|", " ");
	Текст = СтрЗаменить(Текст, "(", " ");
	Текст = СтрЗаменить(Текст, ")", " ");
	
	//
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	Текст = СтрЗаменить(Текст, "  ", " ");
	
	//
	Текст = СтрЗаменить(Текст, " ", Символы.ПС);
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		АнализируемаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если МассивМаркеров.Найти(АнализируемаяСтрока) <> Неопределено Тогда
			Результат = Результат + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	Возврат Результат;

КонецФункции

//-------------------------

&НаКлиенте
Функция ПривестиФайлКУРЛ(ПутьКФайлу)
    ПутьКФайлу = СтрЗаменить(ПутьКФайлу," ","%20");
    ПутьКФайлу = СтрЗаменить(ПутьКФайлу,"\","/");
    Возврат "file:/" + "/localhost/" + ПутьКФайлу;
Конецфункции 

&НаСервере
Процедура ДобавитьРеквизитИсходнойТаблицы(ИмяРеквизита)
	
	//
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), "ТЗ_ИсходнаяТаблица", ИмяРеквизита);
	
	//
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	//
	Попытка
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);	
	Исключение
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьИСходнуюТаблицуНаСервере()
	
	//
	СП = Новый Структура("КоличествоНепустых", 0);
	
	//
	НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП); 
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТЗ_ИсходнаяТаблица.Удалить(НайденнаяСтрока);
	КонецЦикла; 
	
	//
	Для каждого СтрокаТЗ Из ТЗ_ИсходнаяТаблица Цикл
		
		//
		СтрокаТЗ.ПризнакЭтоШапкаДокумента = ((СтрокаТЗ.СчетчикШапкаДокумента/СтрокаТЗ.КоличествоНепустых) >= 0.3);
		СтрокаТЗ.ПризнакЭтоШапкаТаблицы = ((СтрокаТЗ.СчетчикШапкаТаблицы/СтрокаТЗ.КоличествоНепустых) >= 0.3) И (СтрокаТЗ.КоличествоНепустых > 3);
		СтрокаТЗ.ПризнакЭтоСтрокаТаблицы = ((СтрокаТЗ.СчетчикКоличествоЧисел/СтрокаТЗ.КоличествоНепустых) >= 0.3) И (СтрокаТЗ.КоличествоНепустых > 3);// И ((СтрокаТЗ.КоличествоНепустых/СтрокаТЗ.Ширина) >= 0.6);
		СтрокаТЗ.ПризнакЭтоПодвалДокумента = ((СтрокаТЗ.СчетчикПодвалДокумента/СтрокаТЗ.КоличествоНепустых) >= 0.2);
		
		//
		СтрокаТЗ.ПризнакЭтоЧтотоДругое = ((СтрокаТЗ.СчетчикКоличествоЧисел/СтрокаТЗ.Ширина) >= 0.8) И (СтрокаТЗ.КоличествоНепустых > 3);
		
		//
		Если СтрокаТЗ.ПризнакЭтоШапкаДокумента И СтрокаТЗ.ПризнакЭтоПодвалДокумента Тогда
			СтрокаТЗ.ПризнакЭтоШапкаДокумента = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоШапкаДокумента И СтрокаТЗ.ПризнакЭтоСтрокаТаблицы Тогда
			СтрокаТЗ.ПризнакЭтоШапкаДокумента = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоШапкаДокумента И СтрокаТЗ.ПризнакЭтоЧтотоДругое Тогда
			СтрокаТЗ.ПризнакЭтоШапкаДокумента = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоСтрокаТаблицы И СтрокаТЗ.ПризнакЭтоШапкаТаблицы Тогда
			СтрокаТЗ.ПризнакЭтоШапкаТаблицы = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоСтрокаТаблицы И СтрокаТЗ.ПризнакЭтоПодвалДокумента Тогда
			СтрокаТЗ.ПризнакЭтоСтрокаТаблицы = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоСтрокаТаблицы И СтрокаТЗ.ПризнакЭтоЧтотоДругое Тогда
			СтрокаТЗ.ПризнакЭтоСтрокаТаблицы = Ложь;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоПодвалДокумента И СтрокаТЗ.ПризнакЭтоЧтотоДругое Тогда
			СтрокаТЗ.ПризнакЭтоПодвалДокумента = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	СП = Новый Структура("ПризнакЭтоШапкаДокумента, ПризнакЭтоШапкаТаблицы, ПризнакЭтоСтрокаТаблицы, ПризнакЭтоПодвалДокумента", Ложь, Ложь, Ложь, Ложь);
	
	//
	НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП); 
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТЗ_ИсходнаяТаблица.Удалить(НайденнаяСтрока);
	КонецЦикла; 
	
	//
	Сч = 0;
	НомерДокумента = 0;
	ПредыдущийМаркер = "";
	
	//
	НомераДокументов = Новый Соответствие;
	
	
	//
	Для каждого СтрокаТЗ Из ТЗ_ИсходнаяТаблица Цикл
		
		//
		Если Сч <> 0 Тогда
			ПредыдущийМаркер = ТЗ_ИсходнаяТаблица[Сч - 1].МаркерОбласти;	
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.ПризнакЭтоШапкаДокумента Тогда
			
			//
			СтрокаТЗ.МаркерОбласти = "ШД";
			
		ИначеЕсли СтрокаТЗ.ПризнакЭтоШапкаТаблицы Тогда
			
			//
			СтрокаТЗ.МаркерОбласти = "ШТ";
			
			//
			Для Сч1 = 2 По СтрокаТЗ.Ширина Цикл
			
				//
				Значение = СтрокаТЗ["F" + Сч1];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					СтрокаТЗ["F" + Сч1] = СтрокаТЗ["F" + (Сч1 - 1)];	
				КонецЕсли; 
			
			КонецЦикла; 
			
		ИначеЕсли СтрокаТЗ.ПризнакЭтоСтрокаТаблицы Тогда
			
			//
			СтрокаТЗ.МаркерОбласти = "СТ";
			
		ИначеЕсли СтрокаТЗ.ПризнакЭтоПодвалДокумента Тогда	
			
			//
			СтрокаТЗ.МаркерОбласти = "ПД";
			
		ИначеЕсли СтрокаТЗ.ПризнакЭтоЧтотоДругое Тогда	
			
			//
			СтрокаТЗ.МаркерОбласти = "XX";	
			
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.МаркерОбласти = "ШД" И СтрокаТЗ.МаркерОбласти <> ПредыдущийМаркер Тогда
			НомерДокумента = НомерДокумента + 1;	
		КонецЕсли;
		
		//
		СтрокаТЗ.НомерДокумента = НомерДокумента;
		
		//
		НомераДокументов.Вставить(НомерДокумента);
		
		//
		Сч = Сч + 1;
		
	КонецЦикла;	
	
	//ЕЩЕ ОДИН АНАЛИЗ
	ТЗ_СтруктураФайла = Новый ТаблицаЗначений;
	ТЗ_СтруктураФайла.Колонки.Добавить("НомерДокумента");
	ТЗ_СтруктураФайла.Колонки.Добавить("КолВоСтрокДокумента");
	ТЗ_СтруктураФайла.Колонки.Добавить("КолВоСтрокВШапкеДокумента");
	ТЗ_СтруктураФайла.Колонки.Добавить("КолВоСтрокВШапкеТаблицы");
	ТЗ_СтруктураФайла.Колонки.Добавить("КолВоСтрокВТаблице");
	ТЗ_СтруктураФайла.Колонки.Добавить("КолВоСтрокВПодвалеТаблицы");
	ТЗ_СтруктураФайла.Колонки.Добавить("НовыйНомерДокумента");
	
	//
	МаксСтрокТаблицы = 0;
	Для каждого ЭлементСоответствия Из НомераДокументов Цикл
		
		//
		НомерДокумента = ЭлементСоответствия.Ключ;
		
		//
		СП_Документ = Новый Структура("НомерДокумента", НомерДокумента);
		
		//
		СП_ШапкаДокумента = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ШД");
		СП_ШапкаТаблицы = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ШТ");
		СП_СтрокиТаблицы = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "СТ");
		СП_ПодвалДокумента = Новый Структура("НомерДокумента, МаркерОбласти", НомерДокумента, "ПД");
		
		//
		ДокументНС = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП_Документ);
		ШапкДокументаНС = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП_ШапкаДокумента);
		ШапкаТаблицыНС = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП_ШапкаТаблицы);
		СтрокиТаблицыНС = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП_СтрокиТаблицы);
		ПодвалДокументаНС = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП_ПодвалДокумента);
		
		//
		НоваяСтрока = ТЗ_СтруктураФайла.Добавить();
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
		//
		НоваяСтрока.КолВоСтрокДокумента = ДокументНС.Количество();
		НоваяСтрока.КолВоСтрокВШапкеДокумента = ШапкДокументаНС.Количество();
		НоваяСтрока.КолВоСтрокВШапкеТаблицы = ШапкаТаблицыНС.Количество();
		НоваяСтрока.КолВоСтрокВТаблице = СтрокиТаблицыНС.Количество();
		НоваяСтрока.КолВоСтрокВПодвалеТаблицы = ПодвалДокументаНС.Количество();
		
		//
		МаксСтрокТаблицы = МАКС(МаксСтрокТаблицы, НоваяСтрока.КолВоСтрокВТаблице);
		
	КонецЦикла; 
	
	//
	Для Сч = 0 По ТЗ_СтруктураФайла.Количество() - 2 Цикл
		
		//
		ТекущаяСтрока = ТЗ_СтруктураФайла.Получить(Сч);
		СледующаяСтрока = ТЗ_СтруктураФайла.Получить(Сч + 1);
		
		//
		Если ТекущаяСтрока.КолВоСтрокВШапкеДокумента = 0 Тогда
			
			//
			ТекущаяСтрока.НовыйНомерДокумента = СледующаяСтрока.НомерДокумента;
			
		//	
		ИначеЕсли ТекущаяСтрока.КолВоСтрокВШапкеТаблицы = 0 Тогда	
			
			//
			ТекущаяСтрока.НовыйНомерДокумента = СледующаяСтрока.НомерДокумента;
			
		//	
		ИначеЕсли ТекущаяСтрока.КолВоСтрокВТаблице = 0 Тогда		
			
			//
			ТекущаяСтрока.НовыйНомерДокумента = СледующаяСтрока.НомерДокумента;
			
		//	
		ИначеЕсли ТекущаяСтрока.КолВоСтрокВПодвалеТаблицы = 0 Тогда		
			
			//
			ТекущаяСтрока.НовыйНомерДокумента = СледующаяСтрока.НомерДокумента;	
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	Для каждого СтрокаТЗ Из ТЗ_СтруктураФайла Цикл
		
		//
		Если ЗначениеЗаполнено(СтрокаТЗ.НовыйНомерДокумента) Тогда
			
			//
			СП = Новый Структура("НомерДокумента", СтрокаТЗ.НомерДокумента);
			
			//
			НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.НомерДокумента = СтрокаТЗ.НовыйНомерДокумента;
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла;
	
	//
	НомераДокументов = Новый Соответствие;
	
	//
	Сч = 0;
	ТекущийНомерДокумента = 0;
	
	//
	Для каждого СтрокаТЗ Из ТЗ_ИсходнаяТаблица Цикл
		
		//
		Если СтрокаТЗ.НомерДокумента <> ТекущийНомерДокумента Тогда
			
			//
			Сч = Сч + 1;
			ТекущийНомерДокумента = СтрокаТЗ.НомерДокумента;
			
		КонецЕсли; 
		
		//
		СтрокаТЗ.НомерДокумента = Сч;
		НомераДокументов.Вставить(СтрокаТЗ.НомерДокумента);
		
	КонецЦикла; 
	
	//
	Для каждого ЭлементСоответствия Из НомераДокументов Цикл
	
		//
		СП = Новый Структура("НомерДокумента", ЭлементСоответствия.Ключ);
		
		//
		ИндексШапккиТаблицы = 0;
		
		//
		ШиринаТаблицы = 0;
		КоличествоНепустыхВТаблице = 0;
		КоличествоЧиселВТаблице = 0;
		
		//
		Сч = 0;
		
		//
		НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			Если НайденнаяСтрока.МаркерОбласти = "ШТ" Тогда
				ИндексШапккиТаблицы = Сч;	
			КонецЕсли; 
			
			//
			Если НайденнаяСтрока.МаркерОбласти = "СТ" Тогда
				
				//
				Если ИндексШапккиТаблицы = 0 ИЛИ Сч < ИндексШапккиТаблицы Тогда
					НайденнаяСтрока.МаркерОбласти = "ШД";
				КонецЕсли; 
			
			КонецЕсли; 
			
			//
			Если НайденнаяСтрока.МаркерОбласти = "ПД" Тогда
				
				//
				Если ИндексШапккиТаблицы = 0 ИЛИ Сч < ИндексШапккиТаблицы Тогда
					НайденнаяСтрока.МаркерОбласти = "ШД";
				КонецЕсли; 
			
			КонецЕсли;
			
			//
			Если НайденнаяСтрока.МаркерОбласти = "СТ" Тогда
				ШиринаТаблицы = ШиринаТаблицы + НайденнаяСтрока.Ширина;
				КоличествоЧиселВТаблице = КоличествоЧиселВТаблице + НайденнаяСтрока.СчетчикКоличествоЧисел;
				КоличествоНепустыхВТаблице = КоличествоНепустыхВТаблице + НайденнаяСтрока.КоличествоНепустых;
			КонецЕсли;	
			
			//
			Сч = Сч + 1;
			
		КонецЦикла; 	
		
		//
		СП = Новый Структура("НомерДокумента, МаркерОбласти", ЭлементСоответствия.Ключ, "СТ");
		
		//
		НайденныеСтроки = ТЗ_ИсходнаяТаблица.НайтиСтроки(СП);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			//
			Сч = 0;
			
			//
			СредняяШиринаТаблицы = Окр(ШиринаТаблицы/НайденныеСтроки.Количество());
			СреднееКоличествоНепустыхТаблице = Окр(КоличествоНепустыхВТаблице/НайденныеСтроки.Количество());
			СреднееКоличествоЧиселВТаблице = Окр(КоличествоЧиселВТаблице/НайденныеСтроки.Количество());
		
			//
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				//
				Если НайденнаяСтрока.СчетчикКоличествоЧисел >= СреднееКоличествоЧиселВТаблице 
					И НайденнаяСтрока.КоличествоНепустых >= СреднееКоличествоНепустыхТаблице Тогда
					
					//
				
				ИначеЕсли НайденнаяСтрока.СчетчикКоличествоЧисел / СреднееКоличествоЧиселВТаблице  > 1.2 Тогда
					НайденнаяСтрока.МаркерОбласти = "Х1";	
				ИначеЕсли НайденнаяСтрока.СчетчикКоличествоЧисел / СреднееКоличествоЧиселВТаблице  < 0.5 Тогда
					НайденнаяСтрока.МаркерОбласти = "Х2";	
				ИначеЕсли НайденнаяСтрока.КоличествоНепустых / СреднееКоличествоНепустыхТаблице  < 0.5 Тогда
					НайденнаяСтрока.МаркерОбласти = "Х3";	
				ИначеЕсли НайденнаяСтрока.Ширина / СредняяШиринаТаблицы  > 1.2 Тогда
					НайденнаяСтрока.МаркерОбласти = "Х4";	
				ИначеЕсли НайденнаяСтрока.Ширина / СредняяШиринаТаблицы  < 0.8 Тогда
					НайденнаяСтрока.МаркерОбласти = "Х5";	
				КонецЕсли;
				
				//
				Сч = Сч + 1;
				
			КонецЦикла;	
			
			//
			Сч = 0;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				//
				Если Сч = 0 Тогда
					Сч = Сч + 1;
					Продолжить;
				ИначеЕсли Сч = НайденныеСтроки.Количество()-1 Тогда	
					Сч = Сч + 1;
					Продолжить;
				КонецЕсли; 
				
				//
				МаркерОбласти = НайденнаяСтрока.МаркерОбласти;
				Если Найти(МаркерОбласти, "Х4") > 0 Тогда
				
					//
					МаркерОбластиДо = НайденныеСтроки[Сч - 1].МаркерОбласти;
					МаркерОбластиПосле = НайденныеСтроки[Сч + 1].МаркерОбласти;	
					
					//
					Если (МаркерОбластиДо = МаркерОбластиПосле) И Найти(МаркерОбластиДо, "Х4") = 0 Тогда
						НайденнаяСтрока.МаркерОбласти = МаркерОбластиДо;	
					КонецЕсли; 
					
				КонецЕсли; 
				
				//
				Сч = Сч + 1;
				
			КонецЦикла; 
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	
	//
	Для каждого СтрокаТЗ Из ТЗ_ИсходнаяТаблица Цикл
	
		//
		Для Сч = 2 По СтрокаТЗ.Ширина Цикл
			
			//
			Если СтрокаТЗ.МаркерОбласти = "ШД" ИЛИ СтрокаТЗ.МаркерОбласти = "ПД" Тогда
				
				//
				СтрокаТЗ["F1"] = СтрокаТЗ["F1"] + " " + СтрокаТЗ["F" + Сч];
				СтрокаТЗ["F" + Сч] = "";	
			
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Загрузить_OLE(пФайл, Знач НачСтрока = 0, Знач КонСтрока = 0) Экспорт
	
	#Если Клиент Тогда
    Состояние("Установка соединения с Excel");
    #КонецЕсли
	
	//
	OLExcel = Новый COMОбъект("Excel.Application");
	
	//
	ExcelДокумент = OLExcel.Workbooks.Open(пФайл);
	ExcelЛист  = ExcelДокумент.Sheets(1);
	
	//
	ВсегоСтрок = ExcelЛист.UsedRange.Rows.Count;
	ВсегоКолонок = ExcelЛист.UsedRange.Columns.Count;
    
	//
	Для Сч = 1 По ВсегоКолонок Цикл
		
		//
		ИмяПоля = "F" + Сч;
		ДобавитьРеквизитИсходнойТаблицы(ИмяПоля);
		
	КонецЦикла;		
	
	//
	ExcelЛист.Range(ExcelЛист.Cells(1,1), ExcelЛист.Cells(ВсегоСтрок,ВсегоКолонок)).UnMerge();
	
	//
	ТЗ_ИсходнаяТаблица.Очистить();
	
	//
    Для НомерСтроки = 1 По ВсегоСтрок Цикл
		
		//
        #Если Клиент Тогда
        Состояние("Чтение файла: " + НомерСтроки + " из " + ВсегоСтрок);
        ОбработкаПрерыванияПользователя();
        #КонецЕсли
		
		//
		НоваяСтрока = ТЗ_ИсходнаяТаблица.Добавить();
		
		//
        Для НомерКолонки = 1 По ВсегоКолонок Цикл
			
			//
			Поле = ExcelЛист.Cells(НомерСтроки, НомерКолонки);
			
			//
			ИмяПоля = "F" + НомерКолонки;
			ЗначениеПоля = СокрЛП(Поле.Value);
			
			//
			Числа = Новый Массив;
			НеЧисла = Новый Массив;
			
			//
			Для Сч = 1 По СтрДлина(ЗначениеПоля)  Цикл
				
				//
				Символ = Сред(ЗначениеПоля, Сч, 1);
				Если Символ = " " Тогда
					Продолжить;
				КонецЕсли; 
				
				//
				Если Символ = "-" Тогда
					Символ = ".";
				КонецЕсли; 
				
				//
				Если Найти("0123456789", Символ) > 0 Тогда
				
					//
					Попытка
						
						//
						Ч  = Число(Символ);
						
						//
						Числа.Добавить(Символ);
					
					Исключение
						
						//
						Если Символ <> "." И Символ <> "," Тогда
							НеЧисла.Добавить(Символ);
						КонецЕсли; 
						
					КонецПопытки;
					
				Иначе
					
					//
					Если Символ <> "." И Символ <> "," Тогда
						НеЧисла.Добавить(Символ);
					КонецЕсли; 
					
				КонецЕсли;	
			
			КонецЦикла; 
			
			//
			Если Числа.Количество() <= 9 И Числа.Количество() > НеЧисла.Количество() * 1.5 Тогда
				
				//
				Для каждого ЭлементыМассива Из НеЧисла Цикл
					ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ЭлементыМассива, ""); 
				КонецЦикла; 
				
				//
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
				
				//
				ТриПравых = Прав(ЗначениеПоля, 3);
				ОдинЛевыйОтТрехПравых = Лев(ТриПравых, 1);
				
				//
				Если ОдинЛевыйОтТрехПравых = " " Тогда
					ТриПравых = "." + Прав(ТриПравых, 2);
				КонецЕсли; 
				
				//
				ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля) - 3) + ТриПравых;
				
			КонецЕсли; 
			
			//
			ЗначениеПоляДляПреобразования = ЗначениеПоля;
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, "-", ".");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, ",", ".");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, " ", "");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, " ", "");
			
			//
			Если ЗначениеЗаполнено(ЗначениеПоляДляПреобразования) Тогда
			
				//
				Попытка
				
					//
					Ч = Число(ЗначениеПоляДляПреобразования);
					
					//
					ЗначениеПоля = Формат(Ч, "ЧРД=.; ЧГ="); 
					
					//
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						НоваяСтрока.СчетчикКоличествоЧисел = НоваяСтрока.СчетчикКоличествоЧисел + 1;
					КонецЕсли;	
					
				Исключение
				КонецПопытки;	
			
			КонецЕсли; 
			
			//
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "  ", " ");
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "  ", " ");
			
			//
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				//
				НоваяСтрока.КоличествоНепустых = НоваяСтрока.КоличествоНепустых + 1;
				НоваяСтрока.Ширина = МАКС(НоваяСтрока.Ширина, НомерКолонки);
				
				//
				НоваяСтрока.СчетчикШапкаДокумента = НоваяСтрока.СчетчикШапкаДокумента + ЭтоРазделительШапкиДокумента(ЗначениеПоля);
				НоваяСтрока.СчетчикШапкаТаблицы = НоваяСтрока.СчетчикШапкаТаблицы + ЭтоРеквизитШапкиТаблицы(ЗначениеПоля);
				НоваяСтрока.СчетчикПодвалДокумента = НоваяСтрока.СчетчикПодвалДокумента + ЭтоРазделительПодвалаДокумента(ЗначениеПоля);
				
				//
				НоваяСтрока[ИмяПоля] = ЗначениеПоля;	
				
			КонецЕсли; 
			
        КонецЦикла;

    КонецЦикла;
	
	//
	ExcelДокумент.Close(false);

	//
	ОбработатьИСходнуюТаблицуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить_ADO(пФайл, Знач НачСтрока = 0, Знач КонСтрока = 0) Экспорт
	
	//
	Загрузить_OLE(пФайл, НачСтрока, КонСтрока);
	Возврат;
	
	
    #Если Клиент Тогда
    Состояние("Установка соединения с Excel");
    #КонецЕсли

    ЗаголовкиВСтроке1 = "HDR=NO;";
    СтрокаСоединения ="Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(пФайл) +" ;Extended Properties=""Excel 8.0;" + ЗаголовкиВСтроке1 + "IMEX=1;""";
    Connection = Новый COMОбъект("ADODB.Connection");
    Connection.ConnectionString =  СтрокаСоединения;

    Попытка
        Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
        Сообщить ("Проблемы с подключением к Excel" );
        Возврат;
	КонецПопытки;
	
	ADOXCatalog = Новый COMОбъект ("ADOX.Catalog");
	ADOXCatalog.ActiveConnection = Connection;
	МассивЛистов = ADOXCatalog.Tables;
	СписокЛистов = Новый СписокЗначений;

	Для Каждого ЛистМассива ИЗ МассивЛистов Цикл
	    ИмяЛиста = ЛистМассива.Name;
	    Если ИмяЛиста = "Excel_BuiltIn_Database" Тогда // Исключаем лист "по-умолчанию".
	        Продолжить;
	    КонецЕсли;
	    СписокЛистов.Вставить(0, Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1));
	КонецЦикла;	

    RS = Новый COMОбъект("ADODB.Recordset");

    ТекстЗапроса =
    "SELECT
    |    Лист.*
    |FROM
    |    [" + СписокЛистов[0] + "$] as Лист";

    Попытка
        RS.Open(ТекстЗапроса, Connection);
	Исключение
		Сообщить(ОписаниеОшибки());
        Сообщить ("Проблемы с выполнением запроса");
        Возврат;
    КонецПопытки;
	
	//
	Для Счетчик = 1 По RS.Fields.Count Цикл
		
		//
		Поле = RS.Fields.Item(Счетчик - 1);
		
		//
		ИмяПоля = Поле.Name;
		ДобавитьРеквизитИсходнойТаблицы(ИмяПоля);
		
	КонецЦикла;		
	
	//
	ТЗ_ИсходнаяТаблица.Очистить();
	
	//
    НомерСтроки = 0;
	
	//
    Пока RS.EOF() = 0 Цикл

        НомерСтроки = НомерСтроки + 1;

        #Если Клиент Тогда
        Состояние("Чтение файла: " + Формат(НомерСтроки));// + " из " + Формат(RS.RecordCount));
        ОбработкаПрерыванияПользователя();
        #КонецЕсли
		
		//
        Если НомерСтроки < НачСтрока Тогда
            RS.MoveNext();
            Продолжить;
        КонецЕсли;
		
		//
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда
            Прервать;
        КонецЕсли;
		
		//
		НоваяСтрока = ТЗ_ИсходнаяТаблица.Добавить();
		
		//
        Для Счетчик = 1 По RS.Fields.Count Цикл
			
			//
			Поле = RS.Fields.Item(Счетчик - 1);
			
			//
			ИмяПоля = Поле.Name;
			ЗначениеПоля = СокрЛП(Поле.Value);
			
			//
			Числа = Новый Массив;
			НеЧисла = Новый Массив;
			
			//
			Для Сч = 1 По СтрДлина(ЗначениеПоля)  Цикл
				
				//
				Символ = Сред(ЗначениеПоля, Сч, 1);
				Если Символ = " " Тогда
					Продолжить;
				КонецЕсли; 
				
				//
				Попытка
					
					//
					Ч  = Число(Символ);
					
					//
					Числа.Добавить(Символ);
				
				Исключение
					
					//
					Если Символ <> "." И Символ <> "," Тогда
						НеЧисла.Добавить(Символ);
					КонецЕсли; 
					
				КонецПопытки;
			
			КонецЦикла; 
			
			//
			Если Числа.Количество() <= 9 И Числа.Количество() > НеЧисла.Количество() * 1.5 Тогда
				
				//
				Для каждого ЭлементыМассива Из НеЧисла Цикл
					ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ЭлементыМассива, ""); 
				КонецЦикла; 
				
				//
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
				
				//
				ТриПравых = Прав(ЗначениеПоля, 3);
				ОдинЛевыйОтТрехПравых = Лев(ТриПравых, 1);
				
				//
				Если ОдинЛевыйОтТрехПравых = " " Тогда
					ТриПравых = "." + Прав(ТриПравых, 2);
				КонецЕсли; 
				
				//
				ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля) - 3) + ТриПравых;
				
			КонецЕсли; 
			
			//
			ЗначениеПоляДляПреобразования = ЗначениеПоля;
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, "-", "");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, ",", ".");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, " ", "");
			ЗначениеПоляДляПреобразования = СтрЗаменить(ЗначениеПоляДляПреобразования, " ", "");
			
			//
			Если ЗначениеЗаполнено(ЗначениеПоляДляПреобразования) Тогда
			
				//
				Попытка
				
					//
					Ч = Число(ЗначениеПоляДляПреобразования);
					
					//
					ЗначениеПоля = Формат(Ч, "ЧРД=.; ЧГ="); 
					
					//
					НоваяСтрока.СчетчикКоличествоЧисел = НоваяСтрока.СчетчикКоличествоЧисел + 1;
					
				Исключение
				КонецПопытки;	
			
			КонецЕсли; 
			
			//
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "  ", " ");
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "  ", " ");
			
			//
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				//
				НоваяСтрока.КоличествоНепустых = НоваяСтрока.КоличествоНепустых + 1;
				НоваяСтрока.Ширина = МАКС(НоваяСтрока.Ширина, Счетчик);
				
				//
				НоваяСтрока.СчетчикШапкаДокумента = НоваяСтрока.СчетчикШапкаДокумента + ЭтоРазделительШапкиДокумента(ЗначениеПоля);
				НоваяСтрока.СчетчикШапкаТаблицы = НоваяСтрока.СчетчикШапкаТаблицы + ЭтоРеквизитШапкиТаблицы(ЗначениеПоля);
				НоваяСтрока.СчетчикПодвалДокумента = НоваяСтрока.СчетчикПодвалДокумента + ЭтоРазделительПодвалаДокумента(ЗначениеПоля);
				
				//
				НоваяСтрока[ИмяПоля] = ЗначениеПоля;	
				
			КонецЕсли; 
			
			//
			//Объект.ТабДок.Область(НомерСтроки, Счетчик).Текст = ЗначениеПоля;
			
        КонецЦикла;
		
		//
        RS.MoveNext();

    КонецЦикла;

	//
    RS.Close();
	
	//
	Connection.Close();

	//
	ОбработатьИСходнуюТаблицуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить_OpenOffice(ПутьКФайлу)

    Попытка
        ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
    Исключение
        Предупреждение(ОписаниеОшибки() + Символы.ПС + "программа OpenOffice\LibreOffice не установлена на данном компьютере!");
    Возврат;
    КонецПопытки;
    Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
    Свойства = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
    Свойства.Name = "AsTemplate";
    Свойства.Value = Истина;
    Args = Новый COMSafeArray("VT_VARIANT", 2);
    Args.SetValue(0, Свойства);
    Свойства1 = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
    Свойства1.Name = "Hidden";
    Свойства1.Value = Истина;
    Args.SetValue(1,Свойства1);
    Document = Desktop.LoadComponentFromURL(ПривестиФайлКУРЛ(ПутьКФайлу), "_blank", 0, Args);
    Sheets = Document.getSheets();
    Sheet = Sheets.getByIndex(0);
    begCol = 0;
    begRow = 0;
    endCol = Sheet.Data.GetLength(6) - 1;
    endRow = Sheet.Data.GetLength() - 1;
    нКол = 0;

    КС = Новый КвалификаторыСтроки(50);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));

    Range = Sheet.getCellRangeByPosition(begCol, begRow, endCol, endRow);
    МассивКом = Range.getDataArray();
    тмпПростойМассив = МассивКом.Выгрузить();
	
	НомерСтроки = 0;
	Для каждого массив из тмпПростойМассив Цикл
		НомерСтроки = НомерСтроки + 1;
        НомерКолонки = 0;
		Для каждого ЭлементМассива из массив цикл
			НомерКолонки = НомерКолонки + 1;
			Объект.ТабДок.Область(НомерСтроки, НомерКолонки).Текст = ЭлементМассива;
		КонецЦикла;
	КонецЦикла;
	ServiceManager = Неопределено; 
	Document.close(True); 
	Desktop.terminate();	

КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	
	//
	ОчиститьТаблицуНаСервере();  
	
	//
	Если ВариантЗагрузки = "ADO" Тогда
		Загрузить_ADO(ТекущееИмяФайлаДляАнализа);
	ИначеЕсли ВариантЗагрузки = "OpenOffice" Тогда
		Загрузить_OpenOffice(ТекущееИмяФайлаДляАнализа);
	КонецЕсли;
	
	//
	//УстановитьШиринуКолонок(); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
//ОБРАБОТКА ИЗМЕНЕНИЙ ТЧ

&НаСервере
Функция ПолучитьСчетаУчетаНоменклатурыФин(Номенклатура, ВидТаблицы, СтатьяДДС = Неопределено)
	
	//
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета", Неопределено);
	Результат.Вставить("СчетУчетаБУ", Неопределено);
	Результат.Вставить("СчетУчетаНУ", Неопределено);
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугТовары.Номенклатура,
	     |	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	     |	NULL КАК СчетУчетаБУ,
	     |	NULL КАК СчетУчетаНУ
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	     |ГДЕ
	     |	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
	     |	И ""ТОВАРЫ"" = &ВидТаблицы
	     |	И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &Дата
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугТовары.Ссылка.СтатьяДДС.*}
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И (НЕ ПоступлениеТоваровУслугУслуги.СчетЗатрат.Ссылка ЕСТЬ NULL 
	     |			ИЛИ НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратБУ.Ссылка ЕСТЬ NULL 
	     |			ИЛИ НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратНУ.Ссылка ЕСТЬ NULL )
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.СтатьяДДС.*}
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратБУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |	И ЛОЖЬ
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.СтатьяДДС.*}
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратНУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |	И ЛОЖЬ
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.СтатьяДДС.*}
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугОборудование.Номенклатура,
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	     |	NULL
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	     |ГДЕ
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
	     |	И ""ОБОРУДОВАНИЕ"" = &ВидТаблицы
	     |	И (НЕ ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый.Ссылка ЕСТЬ NULL 
	     |			ИЛИ НЕ ПоступлениеТоваровУслугОборудование.СчетУчетаБУ.Ссылка ЕСТЬ NULL )
	     |	И ПоступлениеТоваровУслугОборудование.Ссылка.Дата >= &Дата
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.СтатьяДДС.*}
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугОборудование.Номенклатура,
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	     |	NULL
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	     |ГДЕ
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
	     |	И ""ОБОРУДОВАНИЕ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугОборудование.СчетУчетаБУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугОборудование.Ссылка.Дата >= &Дата
	     |	И ЛОЖЬ
	     |{ГДЕ
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.СтатьяДДС.*}
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ТЗ.Номенклатура,
	     |	МАКСИМУМ(ТЗ.Дата) КАК Дата,
	     |	МАКСИМУМ(ТЗ.СчетУчета) КАК СчетУчета,
	     |	МАКСИМУМ(ТЗ.СчетУчетаБУ) КАК СчетУчетаБУ,
	     |	МАКСИМУМ(ТЗ.СчетУчетаНУ) КАК СчетУчетаНУ
	     |ИЗ
	     |	ТЗ КАК ТЗ
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТЗ.Номенклатура
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Дата УБЫВ";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("ВидТаблицы", ВидТаблицы);
	ПЗ.Параметры.Вставить("Дата", ТекущаяДата() - 60*24*60*60);
	
	//
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СтатьяДДС");
		ЭлементОтбора.Установить(СтатьяДДС);
		
	
	КонецЕсли; 
	
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка); 
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьСчетаУчетаНоменклатурыБух(Номенклатура, ВидТаблицы, СчетФин)
	
	//
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета", Неопределено);
	Результат.Вставить("СчетУчетаБУ", Неопределено);
	Результат.Вставить("СчетУчетаНУ", Неопределено);
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугТовары.Номенклатура,
	     |	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	     |	NULL КАК СчетУчетаБУ,
	     |	NULL КАК СчетУчетаНУ
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	     |ГДЕ
	     |	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
	     |	И ""ТОВАРЫ"" = &ВидТаблицы
	     |	И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &Дата
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатрат.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратБУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	     |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	     |ГДЕ
	     |	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	     |	И ""УСЛУГИ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратНУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	     |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ПоступлениеТоваровУслугОборудование.Номенклатура,
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Дата,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый,
	     |	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	     |	NULL
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	     |ГДЕ
	     |	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
	     |	И ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
	     |	И ""ОБОРУДОВАНИЕ"" = &ВидТаблицы
	     |	И НЕ ПоступлениеТоваровУслугОборудование.СчетУчетаБУ.Ссылка ЕСТЬ NULL 
	     |	И ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый = &СчетЗатратФин
	     |	И ПоступлениеТоваровУслугОборудование.Ссылка.Дата >= &Дата
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ТЗ.Номенклатура,
	     |	МАКСИМУМ(ТЗ.Дата) КАК Дата,
	     |	МАКСИМУМ(ТЗ.СчетУчета) КАК СчетУчета,
	     |	МАКСИМУМ(ТЗ.СчетУчетаБУ) КАК СчетУчетаБУ,
	     |	МАКСИМУМ(ТЗ.СчетУчетаНУ) КАК СчетУчетаНУ
	     |ИЗ
	     |	ТЗ КАК ТЗ
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТЗ.Номенклатура
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Дата УБЫВ";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("ВидТаблицы", ВидТаблицы);
	ПЗ.Параметры.Вставить("СчетЗатратФин", СчетФин);
	ПЗ.Параметры.Вставить("Дата", ТекущаяДата() - 60*24*60*60);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка); 
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	Возврат Ссылка[ИмяРеквизита];
КонецФункции // ()

&НаКлиенте
Процедура ПосчитатьСуммуТабличнойЧасти(ДокументОбъект)
	
	//
	СуммаДок = 0;
	
	//
	Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		Если ДокументОбъект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	//
	Для Каждого СтрокаТЧ Из ДокументОбъект.Услуги Цикл
		Если ДокументОбъект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	//
	Для Каждого СтрокаТЧ Из ДокументОбъект.Оборудование Цикл
		СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	//
	ДокументОбъект.СуммаДокумента = СуммаДок;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьПоСоответствию(Текст, РеквизитОбъект)
	
	//
	Для Каждого Стр Из ТаблицаРезультата Цикл
		
		//
		НоменклатураНаименование = Стр.НоменклатураСтрока;
		НоменклатураНаименование = нрег(НоменклатураНаименование);
		НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		
		//
		Если НоменклатураНаименование = Текст Тогда
			
			//
			Если Стр.Номенклатура <> РеквизитОбъект ИЛИ НЕ Стр.ПризнакНоменклатураНайденаПоРегиструСоответствий Тогда
				
				//
				Стр.ПризнакНоменклатураНайденаПоРегиструСоответствий = Истина;
				
				//
				НоваяСтрока = Объект.ТЗ_СоответствиеСтрокОбъектам.Добавить();
				НоваяСтрока.Строка = СокрЛП(Текст);
				НоваяСтрока.Объект = РеквизитОбъект;
				
				//
				Если Стр.Номенклатура <> РеквизитОбъект Тогда
					
					//
					Стр.Номенклатура = РеквизитОбъект;
					ОбработатьСтрокуТаблицы(Стр.ПолучитьИдентификатор());
					
				КонецЕсли;	
				
			КонецЕсли;	
				
		КонецЕсли;		
		
		//
		ТочкаНаименование = Стр.Точка;
		ТочкаНаименование = нрег(ТочкаНаименование);
		ТочкаНаименование = СокрЛП(ТочкаНаименование);
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		
		//
		Если ТочкаНаименование = Текст Тогда
			
			//
			Если Стр.ТорговаяТочка <> РеквизитОбъект ИЛИ НЕ Стр.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий Тогда
				
				//
				Стр.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий = Истина;
				
				//
				НоваяСтрока = Объект.ТЗ_СоответствиеСтрокОбъектам.Добавить();
				НоваяСтрока.Строка = СокрЛП(Текст);
				НоваяСтрока.Объект = РеквизитОбъект;
				
				//
				Если Стр.ТорговаяТочка <> РеквизитОбъект Тогда
					
					//
					Дата = ?(ЗначениеЗаполнено(ДатаДокумента), ДатаДокумента, ТекущаяДата());
					
					//
					Стр.ТорговаяТочка = РеквизитОбъект;
					Стр.ЦФО = ПолучитьЦФОТорговойТочки(Дата, Стр.ТорговаяТочка);
					
					//
					ОбработатьСтрокуТаблицы(Стр.ПолучитьИдентификатор());
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапомнитьСоответсвиеСтрокиИОбъекта(РеквизитОбъект, Текст, Заменять = Ложь)
	
	//
	Если НЕ ЗначениеЗаполнено(РеквизитОбъект) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	//
	СП = Новый Структура("Строка", Текст);

	//
	НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		//
		Если НайденныеСтроки[0].Объект = РеквизитОбъект Тогда
			
			//
			ЗаполнитьПоСоответствию(Текст, РеквизитОбъект);
			Возврат Истина;
			
		КонецЕсли;	
		
		//
		Если Заменять Тогда
			
			//
			Попытка
				
				//
				МенеджерЗаписи = РегистрыСведений.СоответствиеСтрокОбъектам.СоздатьМенеджерЗаписи(); 
				МенеджерЗаписи.Строка  = Текст;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Объект = РеквизитОбъект; 
				МенеджерЗаписи.Записать();
				
				//
				ЗаполнитьПоСоответствию(Текст, РеквизитОбъект);
				
			Исключение
			КонецПопытки;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
			
	Иначе
		
		//
		МенеджерЗаписи = РегистрыСведений.СоответствиеСтрокОбъектам.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Строка   = Текст; 
		МенеджерЗаписи.Объект = РеквизитОбъект; 
		МенеджерЗаписи.Записать();
		
		//
		ЗаполнитьПоСоответствию(Текст, РеквизитОбъект);
		
	КонецЕсли;
	
	//
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРезультатаТорговаяТочкаПриИзменении(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ТекущиеДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущиеДанные.ЦФО = Неопределено;
	
	//
	ТекущиеДанные.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий = Ложь;
	
	//
	ОбработатьСтрокуТаблицы(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидОперацииВСтроке(Идентификатор)
	
	//
	СтрокаТабличнойЧасти = ТаблицаРезультата.НайтиПоИдентификатору(Идентификатор);
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
		
	Иначе	
			
		//
		Если СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
		Иначе
			СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьВидОперацииВСтрокеНаКлиенте(Идентификатор)
	
	//
	СтрокаТабличнойЧасти = ТаблицаРезультата.НайтиПоИдентификатору(Идентификатор);
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
		
	Иначе	
			
		//
		Если СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
		Иначе
			СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьСтрокуТаблицы(Идентификатор)
	
	//
	Дата = ПолучитьЗначениеРеквизитаШапки("Дата");
	ВариантРасчетаНДС = ПолучитьЗначениеРеквизитаШапки("ВариантРасчетаНДС");
	СтатьяДДС = ПолучитьЗначениеРеквизитаШапки("СтатьяДДС");
	ДокументОснование = ПолучитьЗначениеРеквизитаШапки("ДокументОснование");
	
	//
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
	//
	СтрокаТабличнойЧасти = ТаблицаРезультата.НайтиПоИдентификатору(Идентификатор);	
	
	//
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		//
		СтрокаТабличнойЧасти.ВидНоменклатуры = ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "ВидНоменклатуры");	
		СтрокаТабличнойЧасти.ТипНоменклатуры = ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "ТипТовара");	
		
	Иначе	
		
		//
		СтрокаТабличнойЧасти.ВидНоменклатуры = Неопределено;	
		СтрокаТабличнойЧасти.ТипНоменклатуры = Неопределено;	
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТорговаяТочка) Тогда
		СтрокаТабличнойЧасти.ЦФО = ПолучитьЦФОТорговойТочки(ДатаДокумента, СтрокаТабличнойЧасти.ТорговаяТочка);
	КонецЕсли;	
	
	//
	ЗаполнитьВидОперацииВСтроке(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	//
	СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		
		//
		Если ТипЗнч(СтрокаТабличнойЧасти.СтавкаНДС) = Тип("Число") Тогда
			СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		КонецЕсли; 
		
	КонецЕсли;
	
	//
	Контрагент = ПолучитьЗначениеРеквизитаШапки("Контрагент");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		//
		//Если ЗначениеЗаполнено(Контрагент.СтавкаНДС) Тогда
		//	СтавкаНДС = Контрагент.СтавкаНДС;
		//КонецЕсли;
		
	КонецЕсли;	
	
	//
	Если ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
		СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
	//Счет учета
	
	//
	СчетУчета = Неопределено;
	
	//
	ПризнакНовыйУчетСчетовОС = (Лев(СокрЛП(СтатьяДДС.Код), 1) = "2" И ДатаДокумента >= ДатаНовогоУчетаСчетовОС);
	Если ПризнакНовыйУчетСчетовОС Тогда
		СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		//
		НоменклатураНаименование = СтрокаТабличнойЧасти.НоменклатураСтрока;
		НоменклатураНаименование = нрег(НоменклатураНаименование);
		НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		
		//
		//???ZEZA ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТабличнойЧасти.Номенклатура, НоменклатураНаименование);
		
		//
		СтрокаТабличнойЧасти.СтатьяТовародвижения = ПредопределенноеЗначение("Справочник.СтатьиТовародвижения.ПоступлениеОтПоставщика");
		Если Дата >= '20150801' И СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыТоваров.Сырье") Тогда
			СтрокаТабличнойЧасти.СтатьяТовародвижения = ПредопределенноеЗначение("Справочник.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика");
		КонецЕсли;	
			
		//
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
		КонецЕсли;
		
		//
		Если ПризнакЭтоУслуги Тогда
			ВидТаблицы = "УСЛУГИ";
		ИначеЕсли СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
			ВидТаблицы = "ТОВАРЫ";
		ИначеЕсли СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
			
			//
			Количество = СтрокаТабличнойЧасти.Количество;
			Если Количество = 0 Тогда
				Количество = 1;
			КонецЕсли; 
			
			//
			Цена = СтрокаТабличнойЧасти.СтоимостьБезНДС/Количество;
			Если Цена < 40000 Тогда
				ВидТаблицы = "УСЛУГИ";	
			Иначе	
				ВидТаблицы = "ТОВАРЫ";
			КонецЕсли; 
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
			ВидТаблицы = "УСЛУГИ";		
		ИначеЕсли СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			ВидТаблицы = "ОБОРУДОВАНИЕ";			
		Иначе	
			ВидТаблицы = "ТОВАРЫ";			
		КонецЕсли;
		
		//
		Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		
			//
			СчетаУчета = ПолучитьСчетаУчетаНоменклатурыФин(СтрокаТабличнойЧасти.Номенклатура, ВидТаблицы, СтатьяДДС);
			
			//
			СчетУчета = СчетаУчета.СчетУчета;
			СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			СчетУчетаНУ = СчетаУчета.СчетУчетаБУ;	
		
		КонецЕсли; 
			
	КонецЕсли;  
	
	//
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		
		//
		//Если ЗначениеЗаполнено(ДокументОснование) Тогда
		//	СчетУчета = ДокументОснование.СчетЗатрат;
		//КонецЕсли; 
		
	КонецЕсли;	
	
	//
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		
		//
		Если ПризнакЭтоУслуги Тогда
			
			//
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТорговаяТочка) Тогда
				СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения");
			ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда				
				СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения");
			Иначе
				СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыОбщиеДляРаспределения");
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	//
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		
		//
		СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.Товары");
		
		//
		Если СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар")
			ИЛИ СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
			
			//
			СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.Товары");
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			
			//
			СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения");
			
		КонецЕсли;
		
		//
		Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыТоваров.Упаковка") Тогда
			СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.МатералыДляВыпуска");
		КонецЕсли;
		
	КонецЕсли; 
	
	//
	СтрокаТабличнойЧасти.СчетУчета = СчетУчета;
	
	//
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) И СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения Тогда
		СтрокаТабличнойЧасти.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование");	
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		НС = ПолучитьНоменклатуру(СтрокаТабличнойЧасти.НоменклатураСтрока, СтрокаТабличнойЧасти.ВидНоменклатуры);
	КонецЕсли;
	
	//
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		
		//
		//Если ЗначениеЗаполнено(ДокументОснование) Тогда
		//	СтавкаНДС = ПолучитьЗначениеРеквизита(ДокументОснование, "СтавкаНДС");
		//КонецЕсли;
		
	КонецЕсли; 
	
	//
	СуммаЦенаНаКоличество = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	//
	СуммаБезНДС = СтрокаТабличнойЧасти.СтоимостьБезНДС;
	СуммаСНДС = СтрокаТабличнойЧасти.СтоимостьСНДС;
	СуммаНДС = СтрокаТабличнойЧасти.СуммаНДС;
	
	//
	СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		
		//
		СтавкаНДС_Число = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если ЗначениеЗаполнено(СтавкаНДС_Число) Тогда
			
			//
			//Если НЕ ЗначениеЗаполнено(СуммаНДС) Тогда
				
				//
				Если ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
					
					//
					СуммаБезНДС = СуммаЦенаНаКоличество;
					
					//
					УчитыватьНДС = Истина;
					СуммаВключаетНДС = Ложь;
				
					//	
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СуммаБезНДС, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС_Число);
					
					//
					СуммаСНДС = СуммаБезНДС + СуммаНДС;
					
				//
				ИначеЕсли ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда	
					
					//
					УчитыватьНДС = Истина;
					СуммаВключаетНДС = Истина;
				
					//	
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СуммаСНДС, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС_Число);
					
					//
					СуммаБезНДС = СуммаСНДС - СуммаНДС;
					
				//
				ИначеЕсли ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда		
					
					//
					СуммаБезНДС = СуммаСНДС;
					
				КонецЕсли; 	
			
			//КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	//
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
	
		//
		Если ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
			
			//
			СтрокаТабличнойЧасти.Цена = СуммаБезНДС/СтрокаТабличнойЧасти.Количество;
			
			//
		ИначеЕсли ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда	
			
			//
			СтрокаТабличнойЧасти.Цена = СуммаСНДС/СтрокаТабличнойЧасти.Количество;
			
			//
		ИначеЕсли ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда		
			
			//
			СтрокаТабличнойЧасти.Цена = СуммаСНДС/СтрокаТабличнойЧасти.Количество;
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	//
	СтрокаТабличнойЧасти.СтоимостьБезНДС = СуммаБезНДС;
	СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;
	СтрокаТабличнойЧасти.СтоимостьСНДС = СуммаСНДС;
	
	//
	ЗаполнитьВидОперации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицы()
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоответствиеСтрокОбъектам.Строка КАК Строка,
	               |	СоответствиеСтрокОбъектам.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтрокОбъектам КАК СоответствиеСтрокОбъектам
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Строка";
	
	//
	Объект.ТЗ_СоответствиеСтрокОбъектам.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//
	НайтиОбъектыПоСоответствию();
	
	//
	Для каждого СтрокаТЗ Из ТаблицаРезультата  Цикл
		ОбработатьСтрокуТаблицы(СтрокаТЗ.ПолучитьИдентификатор());
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатаНоменклатураПриИзменении(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ТекущиеДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущиеДанные.ВидОперации = Неопределено;
	ТекущиеДанные.СчетУчета = Неопределено;
	ТекущиеДанные.СтатьяТовародвижения = Неопределено;
	
	//
	ТекущиеДанные.ВидНоменклатуры = Неопределено;
	ТекущиеДанные.ТипНоменклатуры = Неопределено;
	
	//
	ТекущиеДанные.ПризнакНоменклатураНайденаПоВхождениюНаименования = Ложь;
	ТекущиеДанные.ПризнакНоменклатураНайденаПоРегиструСоответствий = Ложь;
	
	//
	ОбработатьСтрокуТаблицы(ТекущиеДанные.ПолучитьИдентификатор());
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
//СОЗДАНИЕ ДОКУМЕНТА

//+++АК SUVV 2018.02.28 ИП-00017941
//&НаСервере
//Функция ПолучитьСтатьюДРПоСтатьеДДС(СтатьяДДС, Счет)
//	
//	//
//	Результат = Неопределено;
//	
//	//
//	ТЗ = "ВЫБРАТЬ
//	     |	СоответствияСтатейСчетов.СтатьяДР,
//	     |	СоответствияСтатейСчетов.СтатьяДДС,
//	     |	СоответствияСтатейСчетов.Счет
//	     |ПОМЕСТИТЬ ТЗ
//	     |ИЗ
//	     |	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
//	     |ГДЕ
//	     |	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС
//	     |	И СоответствияСтатейСчетов.Счет = &Счет
//	     |	И НЕ СоответствияСтатейСчетов.Счет.Ссылка ЕСТЬ NULL 
//	     |
//	     |ОБЪЕДИНИТЬ ВСЕ
//	     |
//	     |ВЫБРАТЬ
//	     |	СоответствияСтатейСчетов.СтатьяДР,
//	     |	СоответствияСтатейСчетов.СтатьяДДС,
//	     |	СоответствияСтатейСчетов.Счет
//	     |ИЗ
//	     |	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
//	     |ГДЕ
//	     |	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС
//	     |	И СоответствияСтатейСчетов.Счет.Ссылка ЕСТЬ NULL 
//	     |	И ЛОЖЬ
//	     |;
//	     |
//	     |////////////////////////////////////////////////////////////////////////////////
//	     |ВЫБРАТЬ ПЕРВЫЕ 1
//	     |	ТЗ.СтатьяДР
//	     |ИЗ
//	     |	ТЗ КАК ТЗ";
//		 
//	//
//	ПЗ = Новый ПостроительЗапроса;
//	ПЗ.Текст = ТЗ;
//	
//	//
//	ПЗ.Параметры.Вставить("СтатьяДДС", СтатьяДДС);
//	ПЗ.Параметры.Вставить("Счет", Счет);
//	
//	//
//	ПЗ.Выполнить();
//	
//	//
//	Выборка = ПЗ.Результат.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СтатьяДР;
//	КонецЕсли; 
//	
//	//
//	Если НЕ ЗначениеЗаполнено(Результат) Тогда
//		Результат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
//	КонецЕсли; 
//	
//	//
//	Возврат Результат;
//	
//КонецФункции	
&НаСервере
Функция ПолучитьСтатьюДРПоСтатьеДДС(ВыбДата, СтатьяДДС, Счет)
	
	Результат = Неопределено;
	ТЗ = "ВЫБРАТЬ
	     |	СоответствияСтатейСчетов.СтатьяДР,
	     |	СоответствияСтатейСчетов.СтатьяДДС,
	     |	СоответствияСтатейСчетов.Счет
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС КАК СтатьяДДС,
	     |		СоответствияСтатейСчетовСрезПоследних.Счет КАК Счет,
	     |		МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	     |	ИЗ
	     |		РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	     |				&ВыбДата,
	     |				СтатьяДДС = &СтатьяДДС
	     |					И Счет = &Счет) КАК СоответствияСтатейСчетовСрезПоследних
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	     |		СоответствияСтатейСчетовСрезПоследних.Счет) КАК СчетаИСтатьиМаксПериод
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	     |		ПО СчетаИСтатьиМаксПериод.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	     |			И СчетаИСтатьиМаксПериод.Счет = СоответствияСтатейСчетов.Счет
	     |			И СчетаИСтатьиМаксПериод.МаксПериод = СоответствияСтатейСчетов.Период
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	СоответствияСтатейСчетовСрезПоследних.СтатьяДР,
	     |	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	     |	СоответствияСтатейСчетовСрезПоследних.Счет
	     |ИЗ
	     |	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	     |			&ВыбДата,
	     |			СтатьяДДС = &СтатьяДДС
	     |				И Счет.Ссылка = NULL) КАК СоответствияСтатейСчетовСрезПоследних
	     |ГДЕ
	     |	ЛОЖЬ
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ТЗ.СтатьяДР
	     |ИЗ
	     |	ТЗ КАК ТЗ";
	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	ПЗ.Параметры.Вставить("СтатьяДДС", СтатьяДДС);
	ПЗ.Параметры.Вставить("Счет", Счет);
	ПЗ.Параметры.Вставить("ВыбДата", ВыбДата);
	
	ПЗ.Выполнить();

	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатьяДР;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	
//---АК SUVV
&НаСервере
Функция ПолучитьСтатьюЗатратБухПоСтатьеДР(Статья, Счет)
	
	//
	Результат = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	     |ИЗ
	     |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	     |ГДЕ
	     |	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	     |	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет
	     |	И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.СтатьиЗатратБУ
	     |	И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Статья", Статья);
	ПЗ.Параметры.Вставить("Счет", Счет);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатьяБУ;
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьСтатьюПрочихДоходовРасходовБухПоСтатьеДР(Статья, Счет)
	
	//
	Результат = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	     |ИЗ
	     |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	     |ГДЕ
	     |	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	     |	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет
	     |	И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.ПрочиеДоходыИРасходыБУ
	     |	И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Статья", Статья);
	ПЗ.Параметры.Вставить("Счет", Счет);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатьяБУ;
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьЦФОТорговойТочки(Дата, ТорговаяТочка)

	//
	Результат = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ЦФОСтруктурныхЕдиницСрезПоследних.Период,
	     |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	     |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	     |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	     |ИЗ
	     |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", Дата);
	ПЗ.Параметры.Вставить("СтруктурнаяЕдиница", ТорговаяТочка);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЦФО;
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьКорректнуюДатуДокумента(Дата, Организация);
	
	//
	Результат = Дата;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	     |ИЗ
	     |	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	     |ГДЕ
	     |	ГраницыЗапретаИзмененияДанных.Организация = &Организация
	     |	И ГраницыЗапретаИзмененияДанных.Пользователь.Ссылка ЕСТЬ NULL";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Организация", Организация);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		Если Дата < Выборка.ГраницаЗапретаИзменений Тогда
			Результат = КонецМесяца(Выборка.ГраницаЗапретаИзменений) + 1; 	
		КонецЕсли; 
	
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьДоговор(Дата, Организация, Контрагент, ВидОперации = Неопределено, ВидТаблицы = "")

	//
	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ОсновныеДоговораКонтрагентовСрезПоследних.ДоговорКонтрагента КАК Результат
	     |ИЗ
	     |	РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(
	     |			&Дата,
	     |			Контрагент = &Контрагент
	     |				И Организация = &Организация
	     |				И ВидДоговора = &ВидДоговора) КАК ОсновныеДоговораКонтрагентовСрезПоследних
	     |
	     |ОБЪЕДИНИТЬ
	     |
	     |ВЫБРАТЬ
	     |	ДоговорыКонтрагентов.Ссылка
	     |ИЗ
	     |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	     |ГДЕ
	     |	ДоговорыКонтрагентов.Организация = &Организация
	     |	И ДоговорыКонтрагентов.Владелец = &Контрагент
	     |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", Дата);
	
	//
	ПЗ.Параметры.Вставить("Организация", Организация);
	ПЗ.Параметры.Вставить("Контрагент", Контрагент);
	ПЗ.Параметры.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Результат;
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции // ()

&НаСервере
Функция ПолучитьСтавкуНДС(СтрНДС)

	//
	Если Найти(СтрНДС, "20") Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Найти(СтрНДС, "18") Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(СтрНДС, "13") Тогда
		Возврат Перечисления.СтавкиНДС.НДС13;
	ИначеЕсли Найти(СтрНДС, "10") Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;	
	КонецЕсли; 

КонецФункции // ()

&НаСервере
Функция ОпределитьСчетУчетаПоДокументуРасходИзБанка(ЗаявкаНаРасходованиеСредств)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств");
	
	Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ЗаявкаНаРасходованиеСредств);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.СчетУчета;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
//+++АК SUVV 2018.02.28 ИП-00017941
//Функция ПолучитьСчетУчетаРасчетовСКонтрагентом(Договор, СтатьяДвиженияДенежныхСредств)
Функция ПолучитьСчетУчетаРасчетовСКонтрагентом(Договор, СтатьяДвиженияДенежныхСредств, ВыбДата)
//---АК SUVV

	//
	Результат = Неопределено;
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		Результат = ПланыСчетов.Финансовый.НайтиПоКоду("60.4").Ссылка;
		
	ИначеЕсли ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.СчетУчетаРасчетовСКонтрагентом) Тогда	
		
		//
		Результат = Договор.СчетУчетаРасчетовСКонтрагентом;
	
	Иначе	
		
		//
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(СтатьяДвиженияДенежныхСредств);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ВыбДата, СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если МассивСчетов.Количество() = 1 Тогда
			Результат = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			Результат = Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;	
		
	КонецЕсли; 

	//
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктурнуюЕдиницуВСЕ()
	
	//
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	
КонецФункции	

&НаСервере
Функция ПолучитьСтруктурнуюЕдиницуУправлениеПоРазвитию()
	
	//
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	
КонецФункции	

&НаКлиенте
Процедура _Создать(Команда)
	
	#Если ТонкийКлиент Тогда
		
	//	
	Форма = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта");
	_Объект = Форма.Объект;
	
	#Иначе
	
	//	
	Форма = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуНовогоДокумента();
	_Объект = Форма;
		
	#КонецЕсли	
	
	//
	ВидОперации = ОтборТекущийВидОперации;
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	КонецЕсли; 
	
	//
	_Объект.ВидОперации = ВидОперации;
	
	//
	Для каждого СтрокаТЗ Из ТЗ_ШапкаДокумента Цикл
		
		//
		Если СтрокаТЗ.Имя = "Дата" Тогда
			_Объект.Дата = СтрокаТЗ.Значение;
			_Объект.ДатаВходящегоДокумента = СтрокаТЗ.Значение;
			_Объект.ДатаВходящегоДокументаБУ = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Номер" Тогда
			_Объект.НомерВходящегоДокумента = СтрокаТЗ.Значение;
			_Объект.НомерВходящегоДокументаБУ = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДатаСФ" Тогда
			_Объект.ДатаВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "НомерСФ" Тогда
			_Объект.НомерВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Организация" Тогда
			_Объект.Организация = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Контрагент" Тогда
			_Объект.Контрагент = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДоговорКонтрагента" Тогда
			_Объект.ДоговорКонтрагента = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ВариантРасчетаНДС" Тогда
			_Объект.ВариантРасчетаНДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СчетУчетаРасчетовСКонтрагентом" Тогда
			_Объект.СчетУчетаРасчетовСКонтрагентом = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СтруктурнаяЕдиница" Тогда
			_Объект.СтруктурнаяЕдиница = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СтатьяДДС" Тогда
			_Объект.СтатьяДДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДокументОснование" Тогда
			_Объект.ДокументОснование = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Склад" Тогда
			_Объект.Склад = СтрокаТЗ.Значение;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	СП = Новый Структура("ВидОперации", ОтборТекущийВидОперации);
	
	ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ТаблицаРезультата.Выгрузить().ВыгрузитьКолонку("Номенклатура"), _Объект.Дата);
	
	//
	НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СП);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		
		//
		Если ПризнакЭтоУслуги Тогда
			ВидТаблицы = "УСЛУГИ";
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
			ВидТаблицы = "ТОВАРЫ";
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
			ВидТаблицы = "УСЛУГИ";	
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
			ВидТаблицы = "УСЛУГИ";		
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			ВидТаблицы = "ОБОРУДОВАНИЕ";			
		Иначе	
			ВидТаблицы = "ТОВАРЫ";			
		КонецЕсли;
		
		//
		Если ВидТаблицы = "ТОВАРЫ" Тогда
			
			//
			НоваяСтрока = _Объект.Товары.Добавить();
			
			//
			НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				//
				ТекНоменклатура = НоваяСтрока.Номенклатура;
				СтрокаТабличнойЧасти = НоваяСтрока;
				
				//
				НоменклатураНаименование = НоваяСтрока.НоменклатураСтрока;
				НоменклатураНаименование = нрег(НоменклатураНаименование);
				НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
				НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
				НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
				НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
				
				//
				ЗапомнитьСоответсвиеСтрокиИОбъекта(ТекНоменклатура, НоменклатураНаименование);
				
				//
				Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
					
					//
					Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
						ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
						ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
					ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
						ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
					КонецЕсли;
					
					//
					Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
					КонецЕсли;
					
					СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекНоменклатура, "Номенклатура");
					Если СтрокаСчетУчета <> Неопределено
						И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
						ТекСчетУчета = СтрокаСчетУчета.СчетУчета;
					КонецЕсли;	
					
					//
					СтрокаТабличнойЧасти.СчетУчета = ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), ПланыСчетов.Финансовый.Товары, ТекСчетУчета);
					Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
						СтрокаТабличнойЧасти.СтатьяТовародвижения 	= ?(_Объект.Дата >= '20150801', Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика, Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
					Иначе
						СтрокаТабличнойЧасти.СтатьяТовародвижения 	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
					КонецЕсли;	
					
					//
					СтрокаТабличнойЧасти.ЕдиницаИзмерения = ТекНоменклатура.ЕдиницаХраненияОстатков;
					СтрокаТабличнойЧасти.Коэффициент = ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
					
					//
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
						
						//
						Если _Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						Иначе
							СтрокаТабличнойЧасти.СтавкаНДС = ТекНоменклатура.СтавкаНДС;
						КонецЕсли;	
					
					КонецЕсли; 
					
				КонецЕсли;
				
				#КонецЕсли
				
			КонецЕсли;  
			
			//
			НоваяСтрока.Количество = СтрокаТЗ.Количество;
			НоваяСтрока.Цена = СтрокаТЗ.Цена;
			
			//
			НоваяСтрока.СуммаНДС = СтрокаТЗ.СуммаНДС;
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТЗ.СтавкаНДС);
			
			//
			НоваяСтрока.Сумма			= СтрокаТЗ.СтоимостьСНДС;
			
			//корректировка НДС
			Если Цел(НоваяСтрока.Количество * НоваяСтрока.Цена) =   Цел(НоваяСтрока.Сумма) Тогда //значит НДС включен/исключен равномерно
				
				
			ИначеЕсли Цел(НоваяСтрока.Количество * НоваяСтрока.Цена) <   Цел(НоваяСтрока.Сумма) Тогда //значит скоррее всего цена без НДС
				
				//
				Если _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда
					
					//
					НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
					
				ИначеЕсли _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
					
					//
					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
					
				ИначеЕсли _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
					
				КонецЕсли; 
			
			КонецЕсли; 
			
			
		ИначеЕсли ВидТаблицы = "УСЛУГИ" Тогда
			
			//
			НоваяСтрока = _Объект.Услуги.Добавить();
			
			//
			НоваяСтрока.Номенклатура	= СтрокаТЗ.Номенклатура;
			
			//
			НоваяСтрока.Содержание	= СтрокаТЗ.НоменклатураСтрока;
			
			//
			НоваяСтрока.ТорговаяТочка = СтрокаТЗ.ТорговаяТочка;
			
			//
			НоваяСтрока.Количество		= СтрокаТЗ.Количество;
			НоваяСтрока.Цена			= СтрокаТЗ.Цена;
			НоваяСтрока.Сумма			= СтрокаТЗ.СтоимостьСНДС;
			НоваяСтрока.СуммаНДС		= СтрокаТЗ.СуммаНДС;
			
			//
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТЗ.СтавкаНДС);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) 
				И ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
			
				//
				НоваяСтрока.СтавкаНДС = _Объект.ДокументОснование.СтавкаНДС;
				
				//
				УчитыватьНДС = Истина;
				СуммаВключаетНДС = (_Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"));
				
				//
				НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					
				//
				ДанныеЗаполнения = _Объект.ДокументОснование;
				
				//
				мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
				мНовыйУчетСчетовОС = (Лев(ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код, 1) = "2" // инвестиционная деятельность
							И НЕ ТекущаяДата() < мДатаНовогоУчетаСчетовОС);	
							
				Если мНовыйУчетСчетовОС Тогда
					НоваяСтрока.СчетЗатрат 	= ПланыСчетов.Финансовый.КапитальныеВложения;
					НоваяСтрока.Субконто1 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
					НоваяСтрока.Субконто3 		= _Объект.СтруктурнаяЕдиница;
				Иначе
					НоваяСтрока.СчетЗатрат 		= ?(ЗначениеЗаполнено(ДанныеЗаполнения.СчетЗатрат), ДанныеЗаполнения.СчетЗатрат, ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения);
					НоваяСтрока.Субконто1 		= НоваяСтрока.ТорговаяТочка;
					НоваяСтрока.Субконто2 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов;
					НоваяСтрока.Субконто3 		= _Объект.СтруктурнаяЕдиница;
				КонецЕсли;			
							
				#КонецЕсли
				
			Иначе			
				
				//
				НоваяСтрока.СчетЗатрат 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения");
				НоваяСтрока.Субконто1 = _Объект.СтатьяДДС;
				НоваяСтрока.Субконто3 = _Объект.СтруктурнаяЕдиница;
				
			КонецЕсли; 
			
		ИначеЕсли ВидТаблицы = "ОБОРУДОВАНИЕ" Тогда
			
			//
			НоваяСтрока = _Объект.Оборудование.Добавить();
			
			//
			НоваяСтрока.Номенклатура	= СтрокаТЗ.Номенклатура;
			
			//
			НоваяСтрока.Сумма			= СтрокаТЗ.СтоимостьСНДС;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	ПосчитатьСуммуТабличнойЧасти(_Объект);
	
	//
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСодержимоеПередСозданиемДокумента()
	
	//
	ВсеОК = Истина;
	
	//
	ТекстСообщения = "";
	
	//
	ВидОперации = ОтборТекущийВидОперации;
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	КонецЕсли;
	
	//
	Дата = ПолучитьЗначениеРеквизитаШапки("Дата");
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	//
	Номер = ПолучитьЗначениеРеквизитаШапки("Номер");
	ДатаСФ = ПолучитьЗначениеРеквизитаШапки("ДатаСФ");
	НомерСФ = ПолучитьЗначениеРеквизитаШапки("НомерСФ");
	
	//
	Организация = ПолучитьЗначениеРеквизитаШапки("Организация");
	Контрагент = ПолучитьЗначениеРеквизитаШапки("Контрагент");
	ДоговорКонтрагента = ПолучитьЗначениеРеквизитаШапки("ДоговорКонтрагента");
	СтруктурнаяЕдиница = ПолучитьЗначениеРеквизитаШапки("СтруктурнаяЕдиница");
	СтатьяДДС = ПолучитьЗначениеРеквизитаШапки("СтатьяДДС");
	Склад = ПолучитьЗначениеРеквизитаШапки("Склад");
	ДокументОснование = ПолучитьЗначениеРеквизитаШапки("ДокументОснование");
	
	//
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(ДокументОснование);	
	КонецЕсли; 
			
	//
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		
		//
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки") Тогда
			СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПрочаяЗадолженность");
		Иначе	
			//+++АК SUVV 2018.02.28 ИП-00017941
			//СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетУчетаРасчетовСКонтрагентом(ДоговорКонтрагента, СтатьяДДС);
			СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетУчетаРасчетовСКонтрагентом(ДоговорКонтрагента, СтатьяДДС, Дата);
			//---АК SUVV 
		КонецЕсли;
		
	КонецЕсли;
	
	//
	Дата = ПолучитьКорректнуюДатуДокумента(Дата, Организация);
	
	//
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Дата - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Номер - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(ДатаСФ) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Дата СФ - Не заполнен" + Символы.ПС;
		//ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(НомерСФ) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Номер СФ - Не заполнен" + Символы.ПС;
		//ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Организация - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Контрагент - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Договор контрагента - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• ЦФО - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Статья ДДС - Не заполнен" + Символы.ПС;
		ВсеОК = Ложь;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Заявка на услуги - Не заполнен" + Символы.ПС;
		//ВсеОК = Ложь;
	КонецЕсли;
	
	//
	//Если НЕ ЗначениеЗаполнено(Склад) И НЕ ПризнакЭтоУслуги Тогда
	//	ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Склад - Не заполнен" + Символы.ПС;
	//	ВсеОК = Ложь;
	//КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		
		//
		ТекстСообщения  = ТекстСообщения + Символы.Таб + "- Счет расчетов - Не определен" + Символы.ПС;
		ВсеОК = Истина;
		
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		//
		ТекстСообщения = "ШАПКА:" + Символы.ПС + ТекстСообщения;
		Сообщить(ТекстСообщения);
		
		//
		ТекстСообщения = "";
	
	КонецЕсли; 
	
	//
	ВидыСубконтоФин = Новый Соответствие;
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Организации"), Организация);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Контрагенты"), Контрагент);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы"), СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств"), СтатьяДДС);
	//+++АК SUVV 2018.02.28 ИП-00017941
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(СтатьяДДС, СчетУчетаРасчетовСКонтрагентом));
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(Дата, СтатьяДДС, СчетУчетаРасчетовСКонтрагентом));
	//---АК SUVV
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Склады"), Склад);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.МестаХранения"), СтруктурнаяЕдиница);
	
	//
	Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
		
		//
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Товары"), СтрокаТЗ.Номенклатура);
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки"), СтрокаТЗ.ТорговаяТочка);
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиТовародвижения"), СтрокаТЗ.СтатьяТовародвижения);	
		
		//
		Если СтрокаТЗ.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения") Тогда
			
			//
			ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ПолучитьСтруктурнуюЕдиницуУправлениеПоРазвитию());
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда	
			
			//
			ЦФО = ПолучитьЦФОТорговойТочки(Дата, СтрокаТЗ.ТорговаяТочка);
			Если ЗначениеЗаполнено(ЦФО) Тогда
				ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ЦФО);	
			КонецЕсли; 
		
		КонецЕсли;
		
		//
		ТекстСообщения = "";
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Номенклатура - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетУчета) Тогда
			
			//
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Счет учета - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
			
		Иначе
			
			//
			Если СтрокаТЗ.СчетУчета.ВидыСубконто.Найти(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки")) <> Неопределено Тогда
				
				//
				Если Не ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
					//
					ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Торговая точка - Не заполнен" + Символы.ПС;
					ВсеОК = Ложь;
				КонецЕсли; 
				
			КонецЕсли;	
			
		КонецЕсли;
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Количество) Тогда
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Количество - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Количество) Тогда
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Цена - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.СтавкаНДС) Тогда
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Ставка НДС - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.СтавкаНДС) Тогда
			ТекстСообщения  = ТекстСообщения + Символы.Таб + "• Сумма с НДС - Не заполнен" + Символы.ПС;
			ВсеОК = Ложь;
		КонецЕсли; 
		
		//
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			//
			ТекстСообщения = "СТРОКА №" + СтрокаТЗ.НомерСтроки + ":" + Символы.ПС + ТекстСообщения;
			Сообщить(ТекстСообщения);	
			
			//
			ТекстСообщения = "";
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	Возврат ВсеОК;
	
КонецФункции	

&НаКлиенте
Процедура Создать(Команда)
	
	//
	ОчиститьСообщения();
	Если НЕ ПроверитьСодержимоеПередСозданиемДокумента() Тогда
		Возврат;
	КонецЕсли; 
	
	#Если ТонкийКлиент Тогда
		
	//	
	Форма = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта");
	_Объект = Форма.Объект;
	
	#Иначе
	
	//	
	Форма = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуНовогоДокумента();
	_Объект = Форма;
	
	//
	ТЗ_СписокФайлов = Новый ТаблицаЗначений;
	ТЗ_СписокФайлов.Колонки.Добавить("ИмяФайла");
	ТЗ_СписокФайлов.Колонки.Добавить("ПолноеИмяФайла");
	ТЗ_СписокФайлов.Колонки.Добавить("АдресВоВременномХранилище");
	
	//СКАН
	
	//
	Если ЗначениеЗаполнено(ТекущееИмяФайлаСкана) Тогда
		
		//
		Файл = Новый Файл(ТекущееИмяФайлаСкана);
		Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
			
			//
			НоваяСтрока = ТЗ_СписокФайлов.Добавить();
			НоваяСтрока.ИмяФайла = Файл.Имя;
			НоваяСтрока.ПолноеИмяФайла = Файл.ПолноеИмя;
			НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(НоваяСтрока.ПолноеИмяФайла), Новый УникальныйИдентификатор);	
		
		КонецЕсли; 	
	
	КонецЕсли;  
	
	//XLS
	
	//
	Если ЗначениеЗаполнено(ТекущееИмяФайлаДляАнализа) Тогда
		
		//
		Файл = Новый Файл(ТекущееИмяФайлаДляАнализа);
		Если Файл.Существует() И НЕ Файл.ЭтоКаталог() Тогда
			
			//
			НоваяСтрока = ТЗ_СписокФайлов.Добавить();
			НоваяСтрока.ИмяФайла = Файл.Имя;
			НоваяСтрока.ПолноеИмяФайла = Файл.ПолноеИмя;
			НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(НоваяСтрока.ПолноеИмяФайла), Новый УникальныйИдентификатор);	
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	//
	_Объект.ДополнительныеСвойства.Вставить("ТЗ_СписокФайлов", ТЗ_СписокФайлов);
	
	#КонецЕсли	
	
	//
	ВидОперации = ОтборТекущийВидОперации;
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	КонецЕсли; 
	
	//
	_Объект.ВидОперации = ВидОперации;
	
	//
	НеВыгружатьВБУ = Ложь;
	Для каждого СтрокаТЗ Из ТЗ_ШапкаДокумента Цикл
		
		//
		Если СтрокаТЗ.Имя = "НеВыгружатьВБух" Тогда
			НеВыгружатьВБУ = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Дата" Тогда
			
			//
			Дата = СтрокаТЗ.Значение;
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДата();
			КонецЕсли;
			
			//
			_Объект.Дата = Дата;
			_Объект.ДатаВходящегоДокумента = Дата;
			_Объект.ДатаВходящегоДокументаБУ = Дата;
			
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Номер" Тогда
			_Объект.НомерВходящегоДокумента = СтрокаТЗ.Значение;
			_Объект.НомерВходящегоДокументаБУ = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДатаСФ" Тогда
			_Объект.ДатаВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "НомерСФ" Тогда
			_Объект.НомерВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Организация" Тогда
			_Объект.Организация = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Контрагент" Тогда
			_Объект.Контрагент = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДоговорКонтрагента" Тогда
			_Объект.ДоговорКонтрагента = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ВариантРасчетаНДС" Тогда
			_Объект.ВариантРасчетаНДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СчетУчетаРасчетовСКонтрагентом" Тогда
			_Объект.СчетУчетаРасчетовСКонтрагентом = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СтруктурнаяЕдиница" Тогда
			_Объект.СтруктурнаяЕдиница = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СтатьяДДС" Тогда
			_Объект.СтатьяДДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДокументОснование" Тогда
			
			//
			_Объект.ДокументОснование = СтрокаТЗ.Значение;
			_Объект.Заявка =            СтрокаТЗ.Значение;
			//
			Если ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
				_Объект.СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(_Объект.ДокументОснование);	
			КонецЕсли; 
			
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Склад" Тогда
			_Объект.Склад = СтрокаТЗ.Значение;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	Если НЕ ЗначениеЗаполнено(_Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		//
		Если _Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки") Тогда
			
			//
			_Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПрочаяЗадолженность");
			
		Иначе	
			
			//
			//+++АК SUVV 2018.02.28 ИП-00017941
			//_Объект.СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетУчетаРасчетовСКонтрагентом(_Объект.ДоговорКонтрагента, _Объект.СтатьяДДС);
			_Объект.СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетУчетаРасчетовСКонтрагентом(_Объект.ДоговорКонтрагента, _Объект.СтатьяДДС, _Объект.Дата);
			//---АК SUVV
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	//
	_Объект.Дата = ПолучитьКорректнуюДатуДокумента(_Объект.Дата, _Объект.Организация);
	
	//
	ВидыСубконтоФин = Новый Соответствие;
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Организации"), _Объект.Организация);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Контрагенты"), _Объект.Контрагент);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы"), _Объект.СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), _Объект.СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств"), _Объект.СтатьяДДС);
	//+++АК SUVV 2018.02.20 ИП-00017941
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(_Объект.СтатьяДДС, _Объект.СчетУчетаРасчетовСКонтрагентом));
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(_Объект.Дата, _Объект.СтатьяДДС, _Объект.СчетУчетаРасчетовСКонтрагентом));
	//---АК SUVV
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Склады"), _Объект.Склад);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.МестаХранения"), _Объект.СтруктурнаяЕдиница);
	
	//
	СП = Новый Структура("ВидОперации", ОтборТекущийВидОперации);
	
	//
	СтруктурнаяЕдиницаВсе = ПолучитьСтруктурнуюЕдиницуВСЕ();
	
	//
	СчетаУчетаНоменклатуры = Новый Соответствие;
	ЦФОТорговыхТочек = Новый Соответствие;
	
	//
	НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СП);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		
		//
		НоменклатураНаименование = СтрокаТЗ.НоменклатураСтрока;
		НоменклатураНаименование = нрег(НоменклатураНаименование);
		НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		
		//
		Если НЕ СтрокаТЗ.ПризнакНоменклатураНайденаПоРегиструСоответствий Тогда
			ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.Номенклатура, НоменклатураНаименование, Истина);
		КонецЕсли;	
		
		//
		ТочкаНаименование = СтрокаТЗ.Точка;
		ТочкаНаименование = нрег(ТочкаНаименование);
		ТочкаНаименование = СокрЛП(ТочкаНаименование);
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		
		//
		Если НЕ СтрокаТЗ.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий  Тогда
			ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.ТорговаяТочка, ТочкаНаименование, Истина);
		КонецЕсли;
		
		//
		Если СтрокаТЗ.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения") Тогда
			
			//
			ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ПолучитьСтруктурнуюЕдиницуУправлениеПоРазвитию());
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда	
			
			//
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЦФО) Тогда
				
				//
				ЦФО = ЦФОТорговыхТочек.Получить(СтрокаТЗ.ТорговаяТочка);
				Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
					
					//
					ЦФО = ПолучитьЦФОТорговойТочки(_Объект.Дата, СтрокаТЗ.ТорговаяТочка);
					Если ЗначениеЗаполнено(ЦФО) Тогда
						
						//
						ЦФОТорговыхТочек.Вставить(СтрокаТЗ.ТорговаяТочка, ЦФО);
						
						//
						ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ЦФО);	
						
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;	
		
		КонецЕсли; 
		
		//
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Товары"), СтрокаТЗ.Номенклатура);
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки"), СтрокаТЗ.ТорговаяТочка);
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиТовародвижения"), СтрокаТЗ.СтатьяТовародвижения);
		
		//
		ВидыСубконтоБух = Новый Соответствие;
		
		//
		Если ПризнакЭтоУслуги Тогда
			ВидТаблицы = "УСЛУГИ";
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
			ВидТаблицы = "ТОВАРЫ";
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
			
			//
			Количество = СтрокаТЗ.Количество;
			Если Количество = 0 Тогда
				Количество = 1;
			КонецЕсли; 
			
			//
			Цена = СтрокаТЗ.СтоимостьБезНДС/Количество;
			Если Цена < 40000 Тогда
				ВидТаблицы = "УСЛУГИ";	
			Иначе	
				ВидТаблицы = "ТОВАРЫ";
			КонецЕсли; 
			
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
			ВидТаблицы = "УСЛУГИ";		
		ИначеЕсли СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
			ВидТаблицы = "ОБОРУДОВАНИЕ";			
		Иначе	
			ВидТаблицы = "ТОВАРЫ";			
		КонецЕсли;
		
		//
		Если ВидТаблицы = "ТОВАРЫ" Тогда
			
			//
			НоваяСтрока = _Объект.Товары.Добавить();
			
			//
			НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				//
				ТекНоменклатура = НоваяСтрока.Номенклатура;
				
				//
				НоваяСтрока.ЕдиницаИзмерения = ТекНоменклатура.ЕдиницаХраненияОстатков;
				НоваяСтрока.Коэффициент = ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
				
				#КонецЕсли
				
			КонецЕсли;  
			
			//
			НоваяСтрока.СуммаНДС = СтрокаТЗ.СуммаНДС;
			НоваяСтрока.СтавкаНДС = СтрокаТЗ.СтавкаНДС;
			
			//
			Если _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС - СтрокаТЗ.СуммаНДС;
			Иначе	
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС;
			КонецЕсли; 
			
			//
			НоваяСтрока.Количество = СтрокаТЗ.Количество;
			Если ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			КонецЕсли; 
			
			//
			НоваяСтрока.СтатьяТовародвижения = СтрокаТЗ.СтатьяТовародвижения;
			НоваяСтрока.СчетУчета = СтрокаТЗ.СчетУчета;
			
		ИначеЕсли ВидТаблицы = "УСЛУГИ" Тогда
			
			//
			НоваяСтрока = _Объект.Услуги.Добавить();
			
			//
			НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
			
			//
			НоваяСтрока.Содержание = СтрокаТЗ.НоменклатураСтрока;
			
			//
			НоваяСтрока.ТорговаяТочка = СтрокаТЗ.ТорговаяТочка;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ТорговаяТочка) Тогда
				НоваяСтрока.ТорговаяТочка = СтруктурнаяЕдиницаВсе;
			КонецЕсли; 
			
			//
			ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки"), СтрокаТЗ.ТорговаяТочка);
			
			//
			НоваяСтрока.СтавкаНДС 		= СтрокаТЗ.СтавкаНДС;
			НоваяСтрока.СуммаНДС		= СтрокаТЗ.СуммаНДС;
			
			//
			Если _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС - СтрокаТЗ.СуммаНДС;
			Иначе	
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС;
			КонецЕсли;
			
			//
			НоваяСтрока.Количество = СтрокаТЗ.Количество;
			Если ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			КонецЕсли;
			
			//
			СчетЗатрат = СтрокаТЗ.СчетУчета; 
			Если ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
				//СчетЗатрат = ПолучитьЗначениеРеквизита(_Объект.ДокументОснование, "СчетЗатрат");	
			КонецЕсли;	
			
			//
			Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
				
				
			КонецЕсли;
				
			//
			НоваяСтрока.СчетЗатрат = СчетЗатрат;
			Если ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
				
				//
				Для Сч = 0 По 2 Цикл
					
					//
					ЗначениеСубконто = ВидыСубконтоФин.Получить(НоваяСтрока.СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
					НоваяСтрока["Субконто" + (Сч + 1)] = ЗначениеСубконто;
					
					//
					Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
						
						//
						Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
							ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратБУ"), ПолучитьСтатьюЗатратБухПоСтатьеДР(ЗначениеСубконто, НоваяСтрока.СчетЗатрат));
						ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходыБУ") Тогда
							ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходыБУ"), ПолучитьСтатьюПрочихДоходовРасходовБухПоСтатьеДР(ЗначениеСубконто, НоваяСтрока.СчетЗатрат));
						КонецЕсли; 
					
					КонецЕсли; 
					
				КонецЦикла;	
			
			КонецЕсли;
			
			//
			Если ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
				
				//
				ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"), НоваяСтрока.Номенклатура);
				
				//
				ID = НоваяСтрока.Номенклатура.Код + "_" + ВидТаблицы + "_" + НоваяСтрока.СчетЗатрат.Код;
				
				//
				СчетаЗатратБух = СчетаУчетаНоменклатуры.Получить(ID);
				Если СчетаЗатратБух = Неопределено  Тогда
				
					//
					СчетаЗатратБух = ПолучитьСчетаУчетаНоменклатурыБух(НоваяСтрока.Номенклатура, ВидТаблицы, НоваяСтрока.СчетЗатрат);	
					
					//
					СчетаУчетаНоменклатуры.Вставить(ID, СчетаЗатратБух);
				
				КонецЕсли; 
				
				//
				НоваяСтрока.СчетЗатратБУ = СчетаЗатратБух.СчетУчетаБУ;
				Для Сч = 0 По 2 Цикл
					
					//
					ЗначениеСубконто = ВидыСубконтоБух.Получить(НоваяСтрока.СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
					НоваяСтрока["СубконтоБУ" + (Сч + 1)] = ЗначениеСубконто;
					
				КонецЦикла;	
				
				//
				НоваяСтрока.СчетЗатратНУ = СчетаЗатратБух.СчетУчетаНУ;
				Для Сч = 0 По 2 Цикл
					
					//
					ЗначениеСубконто = ВидыСубконтоБух.Получить(НоваяСтрока.СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
					НоваяСтрока["СубконтоНУ" + (Сч + 1)] = ЗначениеСубконто;
					
				КонецЦикла;	
			
			КонецЕсли;  
			
		ИначеЕсли ВидТаблицы = "ОБОРУДОВАНИЕ" Тогда
			
			//
			Количество = СтрокаТЗ.Количество;
			Если Количество = 0 Тогда
				Количество = 1;
			КонецЕсли; 
			
			//
			СуммаВсего = СтрокаТЗ.СтоимостьСНДС;
			Если _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
				СуммаВсего = СтрокаТЗ.СтоимостьСНДС - СтрокаТЗ.СуммаНДС;
			КонецЕсли; 
			
			//
			СуммаНДСВсего = СтрокаТЗ.СуммаНДС;
			
			//
			Сумма = СуммаВсего/Количество;
			СуммаНДС = СуммаНДСВсего/Количество;
			
			//
			Для Сч = 1 По Количество Цикл
				
				//
				НоваяСтрока = _Объект.Оборудование.Добавить();
				
				//
				НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
				
				//
				НоваяСтрока.СтавкаНДС = СтрокаТЗ.СтавкаНДС;
				
				//
				НоваяСтрока.СуммаНДС = СуммаНДС;
				НоваяСтрока.Сумма = Сумма;
				
				//
				СуммаНДСВсего = СуммаНДСВсего - НоваяСтрока.СуммаНДС; 
				СуммаВсего = СуммаВсего - НоваяСтрока.Сумма;
				
				//
				НоваяСтрока.ТорговаяТочка = СтрокаТЗ.ТорговаяТочка;
				
				//
				НоваяСтрока.СчетУчетаЗабалансовый = ПредопределенноеЗначение("ПланСчетов.Финансовый.ККМ");
				
				//
				Если (Сумма - СуммаНДС) < 40000 Тогда
					НоваяСтрока.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности");	
				Иначе	
					НоваяСтрока.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств");	
				КонецЕсли; 
				
			КонецЦикла; 
			
			//
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаВсего;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СуммаНДСВсего;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	_Объект.ДокументыПолучены = Истина;
	
	//
	ПосчитатьСуммуТабличнойЧасти(_Объект);
	
	//
	Форма.Открыть();
	
	//
	Форма.НеВыгружатьВБУ = НеВыгружатьВБУ;
	Форма.Модифицированность = Ложь;
	
	//
	Форма.УстановитьВидимостьДоступность();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
//РЕКВИЗИТЫ ШАПКИ

&НаСервере
Процедура ЗаполнитьТаблицуРеквизитовШапки()

	//
	ТЗ_ШапкаДокумента.Очистить();
	
	//Организация
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "НеВыгружатьВБух";
	НоваяСтрока.Представление = "Не выгружать в Бух.";
	
	//
	ВыгружатьПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Выгружать_в_БП_ДокументыПоПоступлению");
	Если ЗначениеЗаполнено(ВыгружатьПоУмолчанию) Тогда
		НеВыгружатьВБУ = НЕ ВыгружатьПоУмолчанию;
	Иначе
		НеВыгружатьВБУ = Истина;
	КонецЕсли;	
	
	//
	НоваяСтрока.Значение = НеВыгружатьВБУ;
	
	//Организация
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "Организация";
	НоваяСтрока.Представление = "Организация";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	//НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Вид операции
	//НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	//НоваяСтрока.Имя = "ВидОперации";
	//НоваяСтрока.Представление = "Вид операции";
	//НоваяСтрока.Значение = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	//НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//
	ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	
	//ВариантРасчетаНДС
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "ВариантРасчетаНДС";
	НоваяСтрока.Представление = "Вариант расчета НДС";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле");
	//НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Дата
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "Дата";
	НоваяСтрока.Представление = "Дата";
	НоваяСтрока.Значение = '00010101';
	НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Номер
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "Номер";
	НоваяСтрока.Представление = "Номер";
	НоваяСтрока.Значение = " ";
	НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Дата СФ
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "ДатаСФ";
	НоваяСтрока.Представление = "СФ.Дата";
	НоваяСтрока.Значение = '00010101';
	НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Номер СФ
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "НомерСФ";
	НоваяСтрока.Представление = "СФ.Номер";
	НоваяСтрока.Значение = " ";
	НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	
	////Вид номенклатуры
	//НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	//НоваяСтрока.Имя = "ВидНоменклатуры";
	//НоваяСтрока.Представление = "Вид номенклатуры";
	//НоваяСтрока.Значение = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.ПустаяСсылка");
	
	//Контрагент
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "Контрагент";
	НоваяСтрока.Представление = "Контрагент";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	//НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//Заявка
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "ДокументОснование";
	НоваяСтрока.Представление = "Заявка";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка");
	
	//Склад
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "Склад";
	НоваяСтрока.Представление = "Склад";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
	//Контрагент
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "ДоговорКонтрагента";
	НоваяСтрока.Представление = "Договор";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	//НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	
	//СтруктурнаяЕдиница
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "СтруктурнаяЕдиница";
	НоваяСтрока.Представление = "ЦФО";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	
	//СтатьяДДС
	НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	НоваяСтрока.Имя = "СтатьяДДС";
	НоваяСтрока.Представление = "Статья ДДС";
	НоваяСтрока.Значение = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	
	////Счет расчетов
	//НоваяСтрока = ТЗ_ШапкаДокумента.Добавить();
	//НоваяСтрока.Имя = "СчетУчетаРасчетовСКонтрагентом";
	//НоваяСтрока.Представление = "Счет расчетов";
	//НоваяСтрока.Значение = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПустаяСсылка");
	////НоваяСтрока.Отступ = БиблиотекаКартинок.ЗнакВопроса;
	//
	//
	ВидТаблицы = "ТОВАРЫ";

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ШапкаДокументаЗначениеПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_ШапкаДокумента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Если ТекущиеДанные.Имя = "Дата" Тогда
		
		//
		ДатаДокумента = ТекущиеДанные.Значение;
		
		//
		Если ПризнакЭтоУПД Тогда
			УстановитьЗначениеРеквизитаШапки("ДатаСФ", ТекущиеДанные.Значение); 
		КонецЕсли; 
		
		//
		ЗаполнитьДоговорКонтрагента();
		
	//
	ИначеЕсли ТекущиеДанные.Имя = "Номер" Тогда
		
		//
		Если ПризнакЭтоУПД Тогда
			УстановитьЗначениеРеквизитаШапки("НомерСФ", ТекущиеДанные.Значение); 
		КонецЕсли;
		
	//
	ИначеЕсли ТекущиеДанные.Имя = "ДатаСФ" Тогда
		
		//
		Если ПризнакЭтоУПД Тогда
			УстановитьЗначениеРеквизитаШапки("Дата", ТекущиеДанные.Значение); 
			ЗаполнитьДоговорКонтрагента();
		КонецЕсли; 
		
	//
	ИначеЕсли ТекущиеДанные.Имя = "НомерСФ" Тогда
		
		//
		Если ПризнакЭтоУПД Тогда
			УстановитьЗначениеРеквизитаШапки("Номер", ТекущиеДанные.Значение); 
		КонецЕсли;
		
		
	ИначеЕсли ТекущиеДанные.Имя = "Организация" Тогда
		
		//
		ЗаполнитьДоговорКонтрагента();
		
	ИначеЕсли ТекущиеДанные.Имя = "ВариантРасчетаНДС" Тогда
		
		//
		ТаблицаРезультата.Очистить();
		
		//
		СП = Новый Структура("НомерДокумента", НомерОбрабатываемогоДокумента);
		
		//
		НайденныеСтроки = ТаблицаРезультатаВсеДокументы.НайтиСтроки(СП);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			
		КонецЦикла; 
		
		//
		ОбработатьСтрокиТаблицы();
		
	ИначеЕсли ТекущиеДанные.Имя = "Контрагент" Тогда		
		
		//
		ЗаполнитьДоговорКонтрагента();
		
	ИначеЕсли ТекущиеДанные.Имя = "ДоговорКонтрагента" Тогда			
		
		//
		ЗаполнитьЗаявкуНаРасходованиеСредств();
		
	ИначеЕсли ТекущиеДанные.Имя = "СтруктурнаяЕдиница" Тогда			
		
		//
		ЗаполнитьЗаявкуНаРасходованиеСредств();
		
	ИначеЕсли ТекущиеДанные.Имя = "СтатьяДДС" Тогда			
		
		//
		ЗаполнитьЗаявкуНаРасходованиеСредств();
		
		//
		ДокументОснование = ПолучитьЗначениеРеквизитаШапки("ДокументОснование");
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			ОбработатьСтрокиТаблицы();	
		КонецЕсли; 
		
	ИначеЕсли ТекущиеДанные.Имя = "ДокументОснование" Тогда				
		
		//
		ТекущийДокумент = ТекущиеДанные.Значение;
		Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
			
			//
			ЗаполнитьРеквизитыДокументаПоЗаявкеНаРасходованиеСредств(ТекущийДокумент);
			
		КонецЕсли;
		
		//
		ОбработатьСтрокиТаблицы();
		
	ИначеЕсли ТекущиеДанные.Имя = "ВидОперации" Тогда
	
	КонецЕсли; 
			
	//
	Элементы.ТаблицаРезультатаСтоимостьСНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СтоимостьСНДС"), "ЧДЦ=2; ЧГ=");
	Элементы.ТаблицаРезультатаКоличество.ТекстПодвала = Формат(ТаблицаРезультата.Итог("Количество"), "ЧДЦ=2; ЧГ=");
	Элементы.ТаблицаРезультатаСтоимостьБезНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СтоимостьБезНДС"), "ЧДЦ=2; ЧГ=");
	Элементы.ТаблицаРезультатаСуммаНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СуммаНДС"), "ЧДЦ=2; ЧГ=");
	Элементы.ТаблицаРезультатаСтоимостьСНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СтоимостьСНДС"), "ЧДЦ=2; ЧГ=");
	
	//
	ЗаполнитьДокументПоступления();
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ШапкаДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	ТекущиеДанные = Элементы.ТЗ_ШапкаДокумента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Если Поле.Имя = "" Тогда
	
		
	
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ШапкаДокументаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	ТекущиеДанные = Элементы.ТЗ_ШапкаДокумента.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Дата = ПолучитьЗначениеРеквизитаШапки("Дата");
	Организация = ПолучитьЗначениеРеквизитаШапки("Организация");
	Контрагент = ПолучитьЗначениеРеквизитаШапки("Контрагент");
	ДоговорКонтрагента = ПолучитьЗначениеРеквизитаШапки("ДоговорКонтрагента");
	СтруктурнаяЕдиница = ПолучитьЗначениеРеквизитаШапки("СтруктурнаяЕдиница");
	СтатьяДДС = ПолучитьЗначениеРеквизитаШапки("СтатьяДДС");
	
	//
	Если ТекущиеДанные.Имя = "ДоговорКонтрагента" Тогда
		
		//
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			//
			СтандартнаяОбработка = Ложь;
			
			// 
			ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуСписка(, Элемент);
			ФормаВыбора.РежимВыбора = Истина;
				
			//
			Если ЗначениеЗаполнено(Организация) Тогда
				
				ЭлементОтбора = ФормаВыбора.Отбор.Организация;
				ЭлементОтбора.Установить(Организация);
				
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				ЭлементОтбора = ФормаВыбора.Отбор.Владелец;
				ЭлементОтбора.Установить(Контрагент);
				
			КонецЕсли;	
			
			//
			ЭлементОтбора = ФормаВыбора.Отбор.ВидДоговора;
			ЭлементОтбора.Установить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			
			//
			ФормаВыбора.Открыть();
			
		#КонецЕсли	
		
	//
	ИначеЕсли ТекущиеДанные.Имя = "Склад" Тогда
		
		//
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			//
			СтандартнаяОбработка = Ложь;
			
			// 
			ФормаВыбора = Справочники.Склады.ПолучитьФормуСписка(, Элемент);
			ФормаВыбора.РежимВыбора = Истина;
				
			//
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				
				//
				ФормаВыбора.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				
				//
				ЭлементОтбора = ФормаВыбора.Отбор.Владелец;
				ЭлементОтбора.Установить(СтруктурнаяЕдиница);
				
			КонецЕсли;	
			
			//
			ФормаВыбора.Открыть();
			
		#КонецЕсли		
		
	ИначеЕсли ТекущиеДанные.Имя = "ДокументОснование" Тогда
	
		//
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			//
			СтандартнаяОбработка = Ложь;
			
			//
			ФормаВыбора = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьФормуВыбора(, Элемент);
			//ФормаВыбора.Параметры.РежимВыбора = Истина;
				
			//
			Если ЗначениеЗаполнено(Организация) Тогда
				Отбор =ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.Использование = Истина; 
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация"); 
				Отбор.ПравоеЗначение = Организация; 
			КонецЕсли;
				
			//
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Отбор =ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.Использование = Истина; 
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); 
				Отбор.ПравоеЗначение = Контрагент; 
			КонецЕсли;
			
			//
		//	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		//		Отбор =Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		//		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//		Отбор.Использование = Истина; ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"); 
		//		Отбор.ПравоеЗначение = ДоговорКонтрагента; 
		//	КонецЕсли;
		//
		//	//
		//	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		//		Отбор =Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		//		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//		Отбор.Использование = Истина; ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"); 
		//		Отбор.ПравоеЗначение = ДоговорКонтрагента; 
		//	КонецЕсли;	
				
			//
			Если ЗначениеЗаполнено(СтатьяДДС) Тогда
				Отбор =ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.Использование = Истина; 
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДДС"); 
				Отбор.ПравоеЗначение = СтатьяДДС; 
			КонецЕсли;	
			
			//
			//СуммаДокумента = ТаблицаРезультата.Итог("СтоимостьСНДС");
			//
			////
			//СписокЗаявок = ПолучитьСписокЗаявокНаУслугиМатериалы(Организация, Контрагент, ДоговорКонтрагента, СтруктурнаяЕдиница, СтатьяДДС, СуммаДокумента, Дата);
			//
			////
			//ЭлементОтбора = ФормаВыбора.Отбор.Ссылка;
			//ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
			//ЭлементОтбора.Значение = СписокЗаявок;
			//ЭлементОтбора.Использование = (СписокЗаявок.Количество() > 0);
			
			//
			ФормаВыбора.Открыть();
			
		#КонецЕсли	
	
	КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьСписокЗаявокНаРасходованиеСредств(Организация, Контрагент, ДоговорКонтрагента, СтруктурнаяЕдиница, СтатьяДДС, СуммаДокумента, ДатаДокумента)

	//
	Результат = Новый СписокЗначений;
	
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ЗаявкаНаРасходованиеСредств.Ссылка,
	     |	ЗаявкаНаРасходованиеСредств.СуммаДокумента
	     |ПОМЕСТИТЬ ТЗ_Заявки
	     |ИЗ
	     |	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	     |ГДЕ
	     |	ЗаявкаНаРасходованиеСредств.Проведен
	     |{ГДЕ
	     |	ЗаявкаНаРасходованиеСредств.Организация.* КАК Организация,
	     |	ЗаявкаНаРасходованиеСредств.Контрагент.* КАК Контрагент,
	     |	ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	     |	ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.* КАК СтатьяДДС,
	     |	ЗаявкаНаРасходованиеСредств.ЦФО.* КАК СтруктурнаяЕдиница,
	     |	ЗаявкаНаРасходованиеСредств.СуммаДокумента КАК СуммаДокумента,
	     |	ЗаявкаНаРасходованиеСредств.Дата КАК Дата}
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ПоступлениеТоваровУслуг.ДокументОснование,
	     |	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
	     |ПОМЕСТИТЬ ТЗ_Поступления
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	     |ГДЕ
	     |	ПоступлениеТоваровУслуг.ДокументОснование В
	     |			(ВЫБРАТЬ
	     |				ТЗ_Заявки.Ссылка
	     |			ИЗ
	     |				ТЗ_Заявки)
	     |	И ПоступлениеТоваровУслуг.Проведен
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ПоступлениеТоваровУслуг.ДокументОснование
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_Заявки.Ссылка
	     |ИЗ
	     |	ТЗ_Заявки КАК ТЗ_Заявки
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Поступления КАК ТЗ_Поступления
	     |		ПО ТЗ_Заявки.Ссылка = ТЗ_Поступления.ДокументОснование
	     |ГДЕ
	     |	ТЗ_Заявки.СуммаДокумента > ЕСТЬNULL(ТЗ_Поступления.СуммаДокумента, 0)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ТЗ_Заявки.Ссылка.Дата";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("Организация");
	ЭлементОтбора.Установить(Организация);
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("Контрагент");
	ЭлементОтбора.Установить(Контрагент);
	
	//
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Установить(ДоговорКонтрагента);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СтруктурнаяЕдиница");
		ЭлементОтбора.Установить(СтруктурнаяЕдиница);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СтатьяДДС");
		ЭлементОтбора.Установить(СтатьяДДС);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СуммаДокумента) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СуммаДокумента");
		ЭлементОтбора.Установить(СуммаДокумента);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		
		//
		//ЭлементОтбора = ПЗ.Отбор.Добавить("Дата");
		//ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		//ЭлементОтбора.Значение = КонецДня(ДатаДокумента);
		//ЭлементОтбора.Использование = Истина;
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	//
	Возврат Результат;

КонецФункции // ()


&НаСервере
Функция ПолучитьСписокЗаявокНаУслугиМатериалы(Организация, Контрагент, ДоговорКонтрагента, СтруктурнаяЕдиница, СтатьяДДС, СуммаДокумента, ДатаДокумента)

	//
	Результат = Новый СписокЗначений;
	
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ЗаявкаНаУслугиМатериалы.Ссылка,
	     |	ЗаявкаНаУслугиМатериалы.СуммаДокумента
	     |ПОМЕСТИТЬ ТЗ_Заявки
	     |ИЗ
	     |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	     |ГДЕ
	     |	ЗаявкаНаУслугиМатериалы.Проведен
	     |{ГДЕ
	     |	ЗаявкаНаУслугиМатериалы.Организация.* КАК Организация,
	     |	ЗаявкаНаУслугиМатериалы.Контрагент.* КАК Контрагент,
	     |	ЗаявкаНаУслугиМатериалы.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	     |	ЗаявкаНаУслугиМатериалы.ЦФО.* КАК СтруктурнаяЕдиница,
	     |	ЗаявкаНаУслугиМатериалы.СуммаДокумента КАК СуммаДокумента,
	     |	ЗаявкаНаУслугиМатериалы.Дата КАК Дата,
	     |	ЗаявкаНаУслугиМатериалы.СтатьяДДС.* КАК СтатьяДДС}
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ПоступлениеТоваровУслуг.ДокументОснование,
	     |	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
	     |ПОМЕСТИТЬ ТЗ_Поступления
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	     |ГДЕ
	     |	ПоступлениеТоваровУслуг.ДокументОснование В
	     |			(ВЫБРАТЬ
	     |				ТЗ_Заявки.Ссылка
	     |			ИЗ
	     |				ТЗ_Заявки)
	     |	И ПоступлениеТоваровУслуг.Проведен
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ПоступлениеТоваровУслуг.ДокументОснование
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_Заявки.Ссылка
	     |ИЗ
	     |	ТЗ_Заявки КАК ТЗ_Заявки
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Поступления КАК ТЗ_Поступления
	     |		ПО ТЗ_Заявки.Ссылка = ТЗ_Поступления.ДокументОснование
	     |ГДЕ
	     |	ТЗ_Заявки.СуммаДокумента > ЕСТЬNULL(ТЗ_Поступления.СуммаДокумента, 0)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ТЗ_Заявки.Ссылка.Дата";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("Организация");
	ЭлементОтбора.Установить(Организация);
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("Контрагент");
	ЭлементОтбора.Установить(Контрагент);
	
	//
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Установить(ДоговорКонтрагента);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СтруктурнаяЕдиница");
		ЭлементОтбора.Установить(СтруктурнаяЕдиница);
		
	КонецЕсли; 
	
	
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СтатьяДДС");
		ЭлементОтбора.Установить(СтатьяДДС);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(СуммаДокумента) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("СуммаДокумента");
		ЭлементОтбора.Установить(СуммаДокумента);
		
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		
		//
		//ЭлементОтбора = ПЗ.Отбор.Добавить("Дата");
		//ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		//ЭлементОтбора.Значение = КонецДня(ДатаДокумента);
		//ЭлементОтбора.Использование = Истина;
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	//
	Возврат Результат;

КонецФункции // ()


//////////////////////////////////////////////////////////

//
&НаСервере
Процедура ЗаполнитьВидОперации()
	
	//
	СписокВидовОпераций = Новый Соответствие;
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка"), Истина);
		
	Иначе	
		
		//
		Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			//Если ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
				
				//
				Если СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
					СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"), Истина);
				Иначе
					СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка"), Истина);	
				КонецЕсли; 
				
			//КонецЕсли; 
			
		КонецЦикла;
	
	КонецЕсли; 
	
	//
	Если СписокВидовОпераций.Количество() = 1 Тогда
		
		//
		Для каждого ЭлементСписка Из СписокВидовОпераций Цикл
			ОтборТекущийВидОперации = ЭлементСписка.Ключ;
		КонецЦикла; 
		
	Иначе
		
		//
		ОтборТекущийВидОперации = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

//
&НаСервере
Процедура ЗаполнитьДоговорКонтрагента()

	//
	Дата = ТекущаяДата();
	
	//
	Организация = Неопределено;
	Контрагент = Неопределено;
	
	//
	СП = Новый Структура("Имя", "Дата");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Дата = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Организация");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Организация = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Контрагент");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Контрагент = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "ДоговорКонтрагента");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		//
		НовыйДоговорКонтрагента = ПолучитьДоговор(Дата, Организация, Контрагент);
		ТекущийДоговорКонтрагента = НайденныеСтроки[0].Значение;
		
		//
		Если ТекущийДоговорКонтрагента <> НовыйДоговорКонтрагента Тогда
			
			//
			НайденныеСтроки[0].Значение = НовыйДоговорКонтрагента;
			Если ЗначениеЗаполнено(НовыйДоговорКонтрагента) Тогда
				
				//
				ЗаполнитьЗаявкуНаРасходованиеСредств();	
			
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры
 
//
&НаСервере
Процедура ЗаполнитьЗаявкуНаРасходованиеСредств()

	//
	Дата = Неопределено;
	Организация = Неопределено;
	Контрагент = Неопределено;
	ДоговорКонтрагента = Неопределено;
	СтруктурнаяЕдиница = Неопределено;
	СтатьяДДС = Неопределено;
	
	//
	СП = Новый Структура("Имя", "Дата");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Дата = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Организация");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Организация = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Контрагент");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Контрагент = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "ДоговорКонтрагента");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДоговорКонтрагента = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "СтруктурнаяЕдиница");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтруктурнаяЕдиница = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "СтатьяДДС");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтатьяДДС = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СуммаДокумента = ТаблицаРезультата.Итог("СтоимостьСНДС");
	
	//
	СписокЗаявок = ПолучитьСписокЗаявокНаУслугиМатериалы(Организация, Контрагент, ДоговорКонтрагента, СтруктурнаяЕдиница, СтатьяДДС, СуммаДокумента, Дата); 
	Если СписокЗаявок.Количество() > 0 Тогда
	
		//
		СП = Новый Структура("Имя", "ДокументОснование");
		
		//
		НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			//
			НайденныеСтроки[0].Значение = СписокЗаявок[0].Значение;
			
			//
			ЗаполнитьРеквизитыДокументаПоЗаявкеНаРасходованиеСредств(НайденныеСтроки[0].Значение);
			
			//
			ОбработатьСтрокиТаблицы();
			
		Иначе
			
			НайденныеСтроки[0].Значение = ПредопределенноеЗначение("Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка");
			
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры

//
&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоЗаявкеНаРасходованиеСредств(Заявка)

	//
	СП = Новый Структура("Имя", "Организация");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Заявка.Организация;
	КонецЕсли;	
	
	//
	СП = Новый Структура("Имя", "Контрагент");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Заявка.Контрагент;
	КонецЕсли;	
	
	//
	СП = Новый Структура("Имя", "ДоговорКонтрагента");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Заявка.ДоговорКонтрагента;
	КонецЕсли;	
	
	//
	СП = Новый Структура("Имя", "СтруктурнаяЕдиница");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Заявка.ЦФО;
	КонецЕсли;	
	
	//
	СП = Новый Структура("Имя", "СтатьяДДС");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Значение = Заявка.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

//
&НаСервере
Процедура ЗаполнитьДокументПоступления()

	//
	Дата = Неопределено;
	Номер = Неопределено;
	Организация = Неопределено;
	Контрагент = Неопределено;
	ДокументОснование = Неопределено;
	
	//
	СП = Новый Структура("Имя", "Дата");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Дата = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Номер");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Номер = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Организация");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Организация = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "Контрагент");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Контрагент = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	СП = Новый Структура("Имя", "ДокументОснование");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДокументОснование = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	//
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ДокументПоступлениеТоваровУслуг = Неопределено;
		Возврат;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ДокументПоступлениеТоваровУслуг = Неопределено;
		Возврат;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ДокументПоступлениеТоваровУслуг = Неопределено;
		Возврат;
	КонецЕсли; 
	
	//
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ДокументПоступлениеТоваровУслуг = Неопределено;
		Возврат;
	КонецЕсли; 
	
	//
	СуммаДокумента = ТаблицаРезультата.Итог("СтоимостьСНДС"); 
	
	//
	ТЗ = "ВЫБРАТЬ ПЕРВЫЕ 1
	     |	ПоступлениеТоваровУслуг.Ссылка
	     |ИЗ
	     |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	     |ГДЕ
	     |	ПоступлениеТоваровУслуг.Проведен
	     |	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ДЕНЬ) = &Дата
	     |	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &Номер
	     |	И ПоступлениеТоваровУслуг.Организация = &Организация
	     |	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	     |{ГДЕ
	     |	ПоступлениеТоваровУслуг.ДокументОснование.* КАК ДокументОснование,
	     |	ПоступлениеТоваровУслуг.ВидОперации.* КАК ВидОперации}";
		 
	//
	ПЗ = НОвый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", НачалоДня(Дата));
	ПЗ.Параметры.Вставить("Номер", Номер);
	ПЗ.Параметры.Вставить("СуммаДокумента", СуммаДокумента);
	ПЗ.Параметры.Вставить("Организация", Организация);
	ПЗ.Параметры.Вставить("Контрагент", Контрагент);
	
	//
	ЭлементОтбора = ПЗ.Отбор.Добавить("ВидОперации");
	ЭлементОтбора.Установить(ОтборТекущийВидОперации);
	
	//
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("ДокументОснование");
		ЭлементОтбора.Установить(ДокументОснование);
		
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		ДокументПоступлениеТоваровУслуг = Неопределено;
		Возврат;
	КонецЕсли;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументПоступлениеТоваровУслуг = Выборка.Ссылка;	
	КонецЕсли; 

КонецПроцедуры
 

//////////////////////////////////////////////////////////

&НаКлиенте
Процедура УстановитьСвойстваЭлементов()

	//
	HTMLПредпросмотр = "";
	
	
	//
	Элементы.ДокументПоступлениеТоваровУслуг.Видимость = ЗначениеЗаполнено(ДокументПоступлениеТоваровУслуг);
	
	//
	СписокВидовОпераций = Новый Соответствие;
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка"), Истина);
		
	Иначе	
		
		//
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			//Если ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
				
				//
				Если СтрокаТЗ.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование") Тогда
					СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"), Истина);
				Иначе
					СписокВидовОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка"), Истина);	
				КонецЕсли; 
				
			//КонецЕсли; 
			
		КонецЦикла;
	
	КонецЕсли; 
	
	//
	Элементы.НадписьВидОперацииВсе.Шрифт = Новый Шрифт(Элементы.НадписьВидОперацииВсе.Шрифт,,, НЕ ЗначениеЗаполнено(ОтборТекущийВидОперации));
	Элементы.НадписьВидОперацииПокупка.Шрифт = Новый Шрифт(Элементы.НадписьВидОперацииПокупка.Шрифт,,, ОтборТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка"));
	Элементы.НадписьВидОперацииОборудование.Шрифт = Новый Шрифт(Элементы.НадписьВидОперацииВсе.Шрифт,,, ОтборТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
	
	//
	Если (СписокВидовОпераций.Количество() > 1) Тогда
		
		//
		Элементы.НадписьВидОперацииВсе.Видимость = Истина;
		Элементы.НадписьВидОперацииПокупка.Видимость = Истина;
		Элементы.НадписьВидОперацииОборудование.Видимость = Истина;
		
	Иначе
		
		//
		Элементы.НадписьВидОперацииВсе.Видимость = Ложь;
		
		//
		Элементы.НадписьВидОперацииПокупка.Видимость = (СписокВидовОпераций.Получить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка")) <> Неопределено);
		Элементы.НадписьВидОперацииОборудование.Видимость = (СписокВидовОпераций.Получить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")) <> Неопределено);
	
	КонецЕсли; 

	//
	Если НЕ ЗначениеЗаполнено(ОтборТекущийВидОперации) Тогда
		
		//
		Элементы.ТаблицаРезультатаКоличество.ТекстПодвала = Формат(ТаблицаРезультата.Итог("Количество"), "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСтоимостьБезНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СтоимостьБезНДС"), "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСуммаНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СуммаНДС"), "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСтоимостьСНДС.ТекстПодвала = Формат(ТаблицаРезультата.Итог("СтоимостьСНДС"), "ЧДЦ=2; ЧГ=");
		
	Иначе	
		
		//
		Количество = 0;
		СтоимостьБезНДС = 0;
		СуммаНДС = 0;
		СтоимостьСНДС = 0;
		
		//
		СП = Новый Структура("ВидОперации", ОтборТекущийВидОперации);
		
		//
		НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СП);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			Количество = Количество + НайденнаяСтрока.Количество;
			СтоимостьБезНДС = СтоимостьБезНДС + НайденнаяСтрока.СтоимостьБезНДС;
			СуммаНДС = СуммаНДС + НайденнаяСтрока.СуммаНДС;
			СтоимостьСНДС = СтоимостьСНДС + НайденнаяСтрока.СтоимостьСНДС;
			
		КонецЦикла; 
		
		//
		Элементы.ТаблицаРезультатаКоличество.ТекстПодвала = Формат(Количество, "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСтоимостьБезНДС.ТекстПодвала = Формат(СтоимостьБезНДС, "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСуммаНДС.ТекстПодвала = Формат(СуммаНДС, "ЧДЦ=2; ЧГ=");
		Элементы.ТаблицаРезультатаСтоимостьСНДС.ТекстПодвала = Формат(СтоимостьСНДС, "ЧДЦ=2; ЧГ=");
		
	КонецЕсли;
	
	//
	Элементы.Создать.Доступность = ЗначениеЗаполнено(ОтборТекущийВидОперации);
	
	//
	ОбновитьПолеПредпросмотра(ТекущееИмяФайлаСкана);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОтображатьТабличныйДокументПриИзменении(Элемент)
	
	//
	УстановитьСвойстваЭлементов();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакЭтоУслугиНажатие(Элемент, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = ЛОЖЬ;
	ПризнакЭтоУслуги = НЕ ПризнакЭтоУслуги;
	
	//
	Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл
		
		//
		ЗаполнитьВидОперацииВСтрокеНаКлиенте(СтрокаТЗ.ПолучитьИдентификатор());
		
	КонецЦикла; 
	
	//
	Если ПризнакЭтоУслуги Тогда
		
		//
		ОтборТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
		Элементы.ТаблицаРезультата.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОперации", ОтборТекущийВидОперации);
		
	КонецЕсли; 
	
	//
	ОбработатьСтрокиТаблицы();
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////
//СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	ВариантЗагрузки = "ADO";
	
	//
	Если ВРЕГ(Объект.КаталогСканов) = ВРЕГ(СокрЛП("\\server00\СКАН для загрузки\BUH_SCAN")) Тогда
		Объект.КаталогСканов = "\\server00\СКАН для загрузки\BUH_SCAN\SCAN_OK";
	КонецЕсли;	
	
	//
	КомандаЗаполнитьФайыСканов(Неопределено);
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОбъединитьФайлы(Команда)
	
	//
	Если Элементы.ТЗ_ИсходныеФайлы.ВыделенныеСтроки.Количество() = 1 Тогда
		Возврат;
	КонецЕсли; 
	
	//
	РодительID = Неопределено;
	Для каждого ВыделеннаяСтрока Из Элементы.ТЗ_ИсходныеФайлы.ВыделенныеСтроки Цикл
		
		//
		ТекущаяСтрока = ТЗ_ИсходныеФайлы.НайтиПоИдентификатору(ВыделеннаяСтрока); 
		
		//
		Если РодительID = Неопределено Тогда
			РодительID = ТекущаяСтрока.ID;
			ТекущаяСтрока.Картинка = БиблиотекаКартинок.Группа;
		КонецЕсли;	
		
		//
		ТекущаяСтрока.РодительID = РодительID;
	
	КонецЦикла; 
	
	//
	ТЗ_ИсходныеФайлыПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОбъединитьРазъединить(Команда)
	
	//
	Для каждого ВыделеннаяСтрока Из Элементы.ТЗ_ИсходныеФайлы.ВыделенныеСтроки Цикл
		
		//
		ТекущаяСтрока = ТЗ_ИсходныеФайлы.НайтиПоИдентификатору(ВыделеннаяСтрока); 
		
		//
		СП = Новый Структура("РодительID", ТекущаяСтрока.ID);
		
		//
		НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.РодительID = 0;
			НайденнаяСтрока.Картинка = Неопределено;
		КонецЦикла; 
	
	КонецЦикла;
	
	//
	ТЗ_ИсходныеФайлыПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОбработать(Команда)
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НадписьВидОперацииВсеНажатие(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ОтборТекущийВидОперации = Неопределено;
	Элементы.ТаблицаРезультата.ОтборСтрок = Неопределено;
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура НадписьВидОперацииПокупкаНажатие(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ОтборТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка");
	Элементы.ТаблицаРезультата.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОперации", ОтборТекущийВидОперации);
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура НадписьВидОперацииОборудованиеНажатие(Элемент)
	
	//
	HTMLПредпросмотр = "";
	
	//
	ОтборТекущийВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	Элементы.ТаблицаРезультата.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОперации", ОтборТекущийВидОперации);	
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаКопироватьНаВсеСтроки(Команда)
	
	//
	ТекущиеДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущаяКолонка = Элементы.ТаблицаРезультата.ТекущийЭлемент;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Ответ = КодВозвратаДиалога.Нет;
	Ответ = Вопрос("Запоминать соответствие при копировании?", РежимДиалогаВопрос.ДаНетОтмена,,Ответ);
	
	//
	ЗапоминатьСоответствие = Ложь;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда	
		ЗапоминатьСоответствие = Истина;
	КонецЕсли; 
	
	//
	Если ТекущаяКолонка.Имя = "ТаблицаРезультатаНоменклатура" Тогда
		
		//
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			СтрокаТЗ.Номенклатура = ТекущиеДанные.Номенклатура;
			
			//
			НоменклатураНаименование = СтрокаТЗ.НоменклатураСтрока;
			НоменклатураНаименование = нрег(НоменклатураНаименование);
			НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			
			//
			СП = Новый Структура("Строка", НоменклатураНаименование);
			
			//
			НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				//
				Если ЗапоминатьСоответствие Тогда
					ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.Номенклатура, НоменклатураНаименование, Истина);	
				КонецЕсли; 
				
			КонецЕсли;	
			
			//
			ОбработатьСтрокуТаблицы(СтрокаТЗ.ПолучитьИдентификатор());
		
		КонецЦикла; 
		
		//
		ЗаполнитьВидОперации();
		
	//
	ИначеЕсли ТекущаяКолонка.Имя = "ТаблицаРезультатаТорговаяТочка" Тогда
		
		//
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			СтрокаТЗ.ТорговаяТочка = ТекущиеДанные.ТорговаяТочка;
			
			//
			ТочкаНаименование = СтрокаТЗ.Точка;
			ТочкаНаименование = нрег(ТочкаНаименование);
			ТочкаНаименование = СокрЛП(ТочкаНаименование);
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			
			//
			СП = Новый Структура("Строка", ТочкаНаименование);
			
			//
			НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				//
				Если ЗапоминатьСоответствие И ЗначениеЗаполнено(ТочкаНаименование) И ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
					ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.ТорговаяТочка, ТочкаНаименование, Истина);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьНаВсеПустыеСтроки(Команда)
	
	//
	ТекущиеДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущаяКолонка = Элементы.ТаблицаРезультата.ТекущийЭлемент;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Ответ = КодВозвратаДиалога.Нет;
	Ответ = Вопрос("Запоминать соответствие при копировании?", РежимДиалогаВопрос.ДаНетОтмена,,Ответ);
	
	//
	ЗапоминатьСоответствие = Ложь;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда	
		ЗапоминатьСоответствие = Истина;
	КонецЕсли; 
	
	//
	Если ТекущаяКолонка.Имя = "ТаблицаРезультатаНоменклатура" Тогда
		
		//
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли; 
			
			//
			СтрокаТЗ.Номенклатура = ТекущиеДанные.Номенклатура;
			ОбработатьСтрокуТаблицы(СтрокаТЗ.ПолучитьИдентификатор());
			
			//
			НоменклатураНаименование = СтрокаТЗ.НоменклатураСтрока;
			НоменклатураНаименование = нрег(НоменклатураНаименование);
			НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
			
			//
			СП = Новый Структура("Строка", НоменклатураНаименование);
			
			//
			НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
			Если НайденныеСтроки.Количество() = 0 Тогда
			
				Если ЗапоминатьСоответствие Тогда
					ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.Номенклатура, НоменклатураНаименование, Истина);	
				КонецЕсли;
				
			КонецЕсли;	
		
		КонецЦикла; 
		
		//
		ЗаполнитьВидОперации();
		
	//
	ИначеЕсли ТекущаяКолонка.Имя = "ТаблицаРезультатаТорговаяТочка" Тогда
		
		//
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			
			//
			Если ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
				Продолжить;
			КонецЕсли;
			
			//
			СтрокаТЗ.ТорговаяТочка = ТекущиеДанные.ТорговаяТочка;
			ОбработатьСтрокуТаблицы(СтрокаТЗ.ПолучитьИдентификатор());
			
			//
			ТочкаНаименование = СтрокаТЗ.Точка;
			ТочкаНаименование = нрег(ТочкаНаименование);
			ТочкаНаименование = СокрЛП(ТочкаНаименование);
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
			
			//
			СП = Новый Структура("Строка", ТочкаНаименование);
			
			//
			НайденныеСтроки = Объект.ТЗ_СоответствиеСтрокОбъектам.НайтиСтроки(СП); 
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				//
				Если ЗапоминатьСоответствие И ЗначениеЗаполнено(ТочкаНаименование) И ЗначениеЗаполнено(СтрокаТЗ.ТорговаяТочка) Тогда
					ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.ТорговаяТочка, ТочкаНаименование, Истина);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОткрытьФайлXLS(Команда)
	
	//
	Попытка
		ЗапуститьПриложение(ТекущееИмяФайлаДляАнализа);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	
	//
	ОбработатьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверить(Команда)
	
	//
	ОчиститьСообщения();
	ПроверитьСодержимоеПередСозданиемДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//
	Если ИмяСобытия = "ЗагруженоПоступление" Тогда
		
		//
		МассивФайлов = Новый Массив;
		
		//
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			
			//
			МассивФайлов = Параметр;
			
		Иначе	
			
			//
			Если ЗначениеЗаполнено(ТекущееИмяФайлаДляАнализа) Тогда
				МассивФайлов.Добавить(ТекущееИмяФайлаДляАнализа);
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(ТекущееИмяФайлаСкана) Тогда
				МассивФайлов.Добавить(ТекущееИмяФайлаСкана);
			КонецЕсли; 
			
		КонецЕсли;	
		
		//
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Переместить файлы в папку Обработанные?", РежимДиалогаВопрос.ДаНет,,Ответ);
		
		//
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			//
			ПрефиксДата = Формат(ТекущаяДата(), "ДФ=yyyyMMddЧЧмм");
			
			//
			Для каждого ЭлементМассива Из МассивФайлов Цикл
				
				//
				СП = Новый Структура;
				СП.Вставить("ФайлСкан", ЭлементМассива);
				
				//
				НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					//
					ИмяИсходногоФайла = Объект.КаталогСканов + "\" + ЭлементМассива;
					ИмяКонечногоФайла = Объект.КаталогОбработанные + "\" + ПрефиксДата + "_" + ЭлементМассива;
					
					//
					КопироватьФайл(ИмяИсходногоФайла, ИмяКонечногоФайла);
					УдалитьФайлы(ИмяИсходногоФайла);	
					
				КонецЕсли; 
				
				//
				СП = Новый Структура;
				СП.Вставить("ФайлXLS", ЭлементМассива);
				
				//
				НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
				Если НайденныеСтроки.Количество() Тогда
					
					//
					ИмяИсходногоФайла = Объект.КаталогXLS + "\" + ЭлементМассива;
					ИмяКонечногоФайла = Объект.КаталогОбработанные + "\" + ПрефиксДата + "_" + ЭлементМассива;
					
					//
					КопироватьФайл(ИмяИсходногоФайла, ИмяКонечногоФайла);
					УдалитьФайлы(ИмяИсходногоФайла);	
					
				КонецЕсли;  
				
				
			КонецЦикла; 
			
			//
			КомандаЗаполнитьФайыСканов(Неопределено);
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	Объект.КаталогСканов = "D:\Izbenka\Общая\СКАН для загрузки\SCAN_OK";
	Объект.КаталогXLS = "D:\Izbenka\Общая\СКАН для загрузки\XLS_OK";
	Объект.КаталогОбработанные = "D:\Izbenka\Общая\СКАН для загрузки\PROCESSED";
	
	//
	ДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоответствиеСтрокОбъектам.Строка КАК Строка,
	               |	СоответствиеСтрокОбъектам.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтрокОбъектам КАК СоответствиеСтрокОбъектам
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Строка";
	//			   
	//Запрос.УстановитьПараметр("Строки", ИскомыеСоответствия);
	
	//
	Объект.ТЗ_СоответствиеСтрокОбъектам.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакЭтоУПДПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакЭтоУПДНажатие(Элемент, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	ПризнакЭтоУПД = Не ПризнакЭтоУПД;
	
	//
	Если ПризнакЭтоУПД Тогда
		
		//
		Дата = ПолучитьЗначениеРеквизитаШапки("Дата");
		Номер = ПолучитьЗначениеРеквизитаШапки("Номер");
		//
		ДатаСФ = ПолучитьЗначениеРеквизитаШапки("ДатаСФ");
		НомерСФ = ПолучитьЗначениеРеквизитаШапки("НомерСФ");
		
		//
		Если ЗначениеЗаполнено(ДатаСФ) Тогда
			УстановитьЗначениеРеквизитаШапки("Дата", ДатаСФ);
			ЗаполнитьДоговорКонтрагента();
		ИначеЕсли ЗначениеЗаполнено(Дата) Тогда	
			УстановитьЗначениеРеквизитаШапки("ДатаСФ", Дата);
		КонецЕсли; 
		
		//
		Если ЗначениеЗаполнено(НомерСФ) Тогда
			УстановитьЗначениеРеквизитаШапки("Номер", НомерСФ);
		ИначеЕсли ЗначениеЗаполнено(Номер) Тогда	
			УстановитьЗначениеРеквизитаШапки("НомерСФ", Номер);
		КонецЕсли; 
	
	КонецЕсли; 
	
	//
	ЗаполнитьДокументПоступления();
	
	//
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаУдалитьОбработанные(Команда)
	
	//
	НайденныеФайлы = НайтиФайлы(Объект.КаталогОбработанные, "*.*");
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		УдалитьФайлы(НайденныйФайл.ПолноеИмя);
	КонецЦикла; 
	
	//
	КомандаЗаполнитьФайыСканов(Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОтметитьКакОбработанные(Команда)
	
	//
	ПрефиксДата = Формат(ТекущаяДата(), "ДФ=yyyyMMddЧЧмм");
	
	//
	Для каждого ВыделеннаяСтрока Из Элементы.ТЗ_ИсходныеФайлы.ВыделенныеСтроки Цикл
		
		//
		ТекущаяСтрока = ТЗ_ИсходныеФайлы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		//
		ИмяФайла = ТекущаяСтрока.ФайлСкан;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
		
			//
			СП = Новый Структура;
			СП.Вставить("ФайлСкан", ИмяФайла);
			
			//
			НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				//
				ИмяИсходногоФайла = Объект.КаталогСканов + "\" + ИмяФайла;
				ИмяКонечногоФайла = Объект.КаталогОбработанные + "\" + ПрефиксДата + "_" + ИмяФайла;
				
				//
				КопироватьФайл(ИмяИсходногоФайла, ИмяКонечногоФайла);
				УдалитьФайлы(ИмяИсходногоФайла);	
				
			КонецЕсли; 	
		
		КонецЕсли; 
		
		//
		ИмяФайла = ТекущаяСтрока.ФайлXLS;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("ФайлXLS", ИмяФайла);
			
			//
			НайденныеСтроки = ТЗ_ИсходныеФайлы.НайтиСтроки(СП);
			Если НайденныеСтроки.Количество() Тогда
				
				//
				ИмяИсходногоФайла = Объект.КаталогXLS + "\" + ИмяФайла;
				ИмяКонечногоФайла = Объект.КаталогОбработанные + "\" + ПрефиксДата + "_" + ИмяФайла;
				
				//
				КопироватьФайл(ИмяИсходногоФайла, ИмяКонечногоФайла);
				УдалитьФайлы(ИмяИсходногоФайла);	
				
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЦикла; 
	
	//
	КомандаЗаполнитьФайыСканов(Неопределено);
	
	//
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаФайлы;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаУдалитьВыделенные(Команда)
	
	//
	Для каждого ВыделеннаяСтрока Из Элементы.ТЗ_ИсходныеФайлы.ВыделенныеСтроки Цикл
		
		//
		ОбрабатываемаяСтрока = ТЗ_ИсходныеФайлы.НайтиПоИдентификатору(ВыделеннаяСтрока);	
		
		//
		Если ЗначениеЗаполнено(ОбрабатываемаяСтрока.ФайлXLS) Тогда
			
			//
			ИмяФайла = Объект.КаталогXLS + "\" + ОбрабатываемаяСтрока.ФайлXLS;
			УдалитьФайлы(ИмяФайла);
			
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(ОбрабатываемаяСтрока.ФайлСкан) Тогда
			
			//
			ИмяФайла = Объект.КаталогСканов + "\" + ОбрабатываемаяСтрока.ФайлСкан;
			УдалитьФайлы(ИмяФайла);
			
		КонецЕсли;	
		
	КонецЦикла; 
	
	//
	КомандаЗаполнитьФайыСканов(Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура ДублироватНаВсеСтроки(Команда)
	
	ТекДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ТаблицаРезультата.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКолонка = СтрЗаменить(Элементы.ТаблицаРезультата.ТекущийЭлемент.Имя,"ТаблицаРезультата","");
	ИмяКолонки = ТекКолонка;
	Если ИмяКолонки = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли;
	ТекЗначение = ТекДанные[ИмяКолонки];
	
	
	Если ИмяКолонки = "СтавкаНДС" Тогда
		
		СтавкаНДСЧисло = УчетНДС.ПолучитьСтавкуНДС(ТекЗначение);
		СП = Новый Структура("Имя", "ВариантРасчетаНДС");
		
		//
		НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВариантРасчетаНДС = НайденныеСтроки[0].Значение;
		Иначе	
			ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС");
		КонецЕсли;

		НДССверху = ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху");
		
	КонецЕсли;	
	
	Для Каждого СтрокаТЧ Из ТаблицаРезультата Цикл
		
		//
		Если ЗначениеЗаполнено(ОтборТекущийВидОперации) Тогда
		    Если ОтборТекущийВидОперации<>СтрокаТЧ.ВидОперации Тогда
			     Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		//
		Если СтрокаТЧ[ИмяКолонки] = ТекЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		//
		СтрокаТЧ[ИмяКолонки] = ТекЗначение;
		Если ИмяКолонки = "Номенклатура" Тогда
			
			//
			СтрокаТЧ.ВидОперации = Неопределено;
			СтрокаТЧ.СчетУчета = Неопределено;
			СтрокаТЧ.СтатьяТовародвижения = Неопределено;
			
			//
			СтрокаТЧ.ВидНоменклатуры = Неопределено;
			СтрокаТЧ.ТипНоменклатуры = Неопределено;
			
			//
			СтрокаТЧ.ПризнакНоменклатураНайденаПоВхождениюНаименования = Ложь;
			СтрокаТЧ.ПризнакНоменклатураНайденаПоРегиструСоответствий = Ложь;

			//
			ОбработатьСтрокуТаблицы(СтрокаТЧ.ПолучитьИдентификатор());
			
		ИначеЕсли ИмяКолонки = "ТорговаяТочка" Тогда
			
			//
			СтрокаТЧ.ЦФО = Неопределено;
			
			//
			СтрокаТЧ.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий = Ложь;
			
			//
			ОбработатьСтрокуТаблицы(СтрокаТЧ.ПолучитьИдентификатор());
			
		ИначеЕсли ИмяКолонки = "СтавкаНДС" Тогда
			
			СтрокаТЧ.СуммаНДС = СтрокаТЧ.СтоимостьСНДС*СтавкаНДСЧисло/(100+СтавкаНДСЧисло);
			Если НДССверху Тогда				
				СтрокаТЧ.СтоимостьБезНДС= СтрокаТЧ.СтоимостьСНДС-СтрокаТЧ.СуммаНДС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	//
	ОчиститьСообщения();
	Форма = ПолучитьФорму("Документ.ЗаявкаНаУслугиМатериалы.ФормаОбъекта");
	_Объект = Форма.Объект;
	//
	Для каждого СтрокаТЗ Из ТЗ_ШапкаДокумента Цикл
		
		//
		Если СтрокаТЗ.Имя = "Дата" Тогда
			
			//
			Дата = СтрокаТЗ.Значение;
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДата();
			КонецЕсли;
			
			//
			_Объект.Дата = Дата;
			//_Объект.ДатаВходящегоДокумента = Дата;
			//_Объект.ДатаВходящегоДокументаБУ = Дата;
			_Объект.ДатаСчета = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Номер" Тогда
			//_Объект.НомерВходящегоДокумента = СтрокаТЗ.Значение;
			//_Объект.НомерВходящегоДокументаБУ = СтрокаТЗ.Значение;
			_Объект.НомерСчета = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		//Если СтрокаТЗ.Имя = "ДатаСФ" Тогда
		//	_Объект.ДатаВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		//КонецЕсли; 
		//
		////
		//Если СтрокаТЗ.Имя = "НомерСФ" Тогда
		//	_Объект.НомерВходящегоСчетаФактуры = СтрокаТЗ.Значение;
		//КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Организация" Тогда
			_Объект.Организация = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "Контрагент" Тогда
			_Объект.Контрагент = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ДоговорКонтрагента" Тогда
			_Объект.ДоговорКонтрагента = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "ВариантРасчетаНДС" Тогда
			_Объект.ВариантРасчетаНДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СчетУчетаРасчетовСКонтрагентом" Тогда
			_Объект.СчетУчетаРасчетовСКонтрагентом = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		////
		Если СтрокаТЗ.Имя = "СтруктурнаяЕдиница" Тогда
			_Объект.ЦФО = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		//
		Если СтрокаТЗ.Имя = "СтатьяДДС" Тогда
			_Объект.СтатьяДДС = СтрокаТЗ.Значение;
		КонецЕсли; 
		
		////
		//Если СтрокаТЗ.Имя = "ДокументОснование" Тогда
		//	
		//	//
		//	_Объект.ДокументОснование = СтрокаТЗ.Значение;
		//	
		//	//
		//	Если ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
		//		_Объект.СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(_Объект.ДокументОснование);	
		//	КонецЕсли; 
		//	
		//КонецЕсли; 
		
		//
		//Если СтрокаТЗ.Имя = "Склад" Тогда
		//	_Объект.Склад = СтрокаТЗ.Значение;
		//КонецЕсли; 
		
	КонецЦикла; 
	
	//
	Если НЕ ЗначениеЗаполнено(_Объект.СчетУчетаРасчетов) Тогда
		
	//	////
	//	//Если _Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки") Тогда
	//	//	
	//	//	//
	//	//	_Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПрочаяЗадолженность");
	//	//	
	//	//Иначе	
	//		
	//		//
			//+++АК SUVV 2018.02.28 ИП-00017941
			//_Объект.СчетУчетаРасчетов = ПолучитьСчетУчетаРасчетовСКонтрагентом(_Объект.ДоговорКонтрагента, _Объект.СтатьяДДС);
			_Объект.СчетУчетаРасчетов = ПолучитьСчетУчетаРасчетовСКонтрагентом(_Объект.ДоговорКонтрагента, _Объект.СтатьяДДС, _Объект.Дата);
			//---АК SUVV
	//		
	//	//КонецЕсли;		
	//
	КонецЕсли; 
	
	//
	_Объект.Дата = ПолучитьКорректнуюДатуДокумента(_Объект.Дата, _Объект.Организация);
	
	//
	ВидыСубконтоФин = Новый Соответствие;
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Организации"), _Объект.Организация);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Контрагенты"), _Объект.Контрагент);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы"), _Объект.ЦФО);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), _Объект.ЦФО);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств"), _Объект.СтатьяДДС);
	//+++АК SUVV 2018.02.20 ИП-00017941
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(_Объект.СтатьяДДС, _Объект.СчетУчетаРасчетов));
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов"), ПолучитьСтатьюДРПоСтатьеДДС(_Объект.Дата, _Объект.СтатьяДДС, _Объект.СчетУчетаРасчетов));
	//---АК SUVV
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Склады"), _Объект.Склад);
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.МестаХранения"), _Объект.СтруктурнаяЕдиница);
	
	//
	//СП = Новый Структура("ВидОперации", ОтборТекущийВидОперации);
	
	//
	СтруктурнаяЕдиницаВсе = ПолучитьСтруктурнуюЕдиницуВСЕ();
	
	//
	СчетаУчетаНоменклатуры = Новый Соответствие;
	ЦФОТорговыхТочек = Новый Соответствие;
	
	//
	//НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СП);
	Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
		
		//
		НоменклатураНаименование = СтрокаТЗ.НоменклатураСтрока;
		НоменклатураНаименование = нрег(НоменклатураНаименование);
		НоменклатураНаименование = СокрЛП(НоменклатураНаименование);
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		НоменклатураНаименование = СтрЗаменить(НоменклатураНаименование, " ", "");
		
		//
		Если НЕ СтрокаТЗ.ПризнакНоменклатураНайденаПоРегиструСоответствий Тогда
			ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.Номенклатура, НоменклатураНаименование, Истина);
		КонецЕсли;	
		
		//
		ТочкаНаименование = СтрокаТЗ.Точка;
		ТочкаНаименование = нрег(ТочкаНаименование);
		ТочкаНаименование = СокрЛП(ТочкаНаименование);
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		ТочкаНаименование = СтрЗаменить(ТочкаНаименование, " ", "");
		
		//
		Если НЕ СтрокаТЗ.ПризнакТорговаяТочкаНайденаПоРегиструСоответствий  Тогда
			ЗапомнитьСоответсвиеСтрокиИОбъекта(СтрокаТЗ.ТорговаяТочка, ТочкаНаименование, Истина);
		КонецЕсли;
		
					
			//
			НоваяСтрока = _Объект.Услуги.Добавить();
			
			//
			НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
			
			//
			НоваяСтрока.Комментарий = СтрокаТЗ.НоменклатураСтрока;
			
			//
			НоваяСтрока.СтруктурнаяЕдиница = СтрокаТЗ.ТорговаяТочка;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
				НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиницаВсе;
			КонецЕсли; 
			НоваяСтрока.Акцептант = Форма.АкцептантПоУмолчаниюСервер(НоваяСтрока.СтруктурнаяЕдиница);
			НоваяСтрока.Подтверждающий = Форма.ПодтверждающийПоУмолчаниюСервер(НоваяСтрока.СтруктурнаяЕдиница);
			
			////
			//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки"), СтрокаТЗ.ТорговаяТочка);
			
			//
			НоваяСтрока.СтавкаНДС 		= СтрокаТЗ.СтавкаНДС;
			НоваяСтрока.СуммаНДС		= СтрокаТЗ.СуммаНДС;
			
			//
			Если _Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС - СтрокаТЗ.СуммаНДС;
			Иначе	
				НоваяСтрока.Сумма = СтрокаТЗ.СтоимостьСНДС;
			КонецЕсли;
			
			//
			НоваяСтрока.Количество = СтрокаТЗ.Количество;
			Если ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			КонецЕсли;
			
			////
			//СчетЗатрат = СтрокаТЗ.СчетУчета; 
			//Если ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
			//	//СчетЗатрат = ПолучитьЗначениеРеквизита(_Объект.ДокументОснование, "СчетЗатрат");	
			//КонецЕсли;	
			
			////
			//Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
			//	
			//	
			//КонецЕсли;
			//	
			//
				//
	КонецЦикла;			
	//_Объект.ДокументыПолучены = Истина;
	//
	//
	//ПосчитатьСуммуТабличнойЧасти(_Объект);
	
	//
	Форма.Открыть();
	
	//
	//Форма.НеВыгружатьВБУ = НеВыгружатьВБУ;
	Форма.Модифицированность = Ложь;
	
	//
	//Форма.УстановитьВидимостьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРезультатаСуммаНДСПриИзменении(Элемент)
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВстрокеОбработчик()
	
	ТекущаяСтрока = ТаблицаРезультата.НайтиПоИдентификатору(Элементы.ТаблицаРезультата.ТекущаяСтрока);
	Если текущаяСтрока <> Неопределено Тогда					
		ПересчитатьСуммуНДСВстроке(текущаяСтрока)			
	КонецЕсли;	
	
	
КонецПроцедуры	

&НаСервере
Процедура ПересчитатьСуммуНДСВстрокахНаСервере()
	
	Для каждого строка из ТаблицаРезультата Цикл	
		ПересчитатьСуммуНДСВстроке(строка);	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПересчитатьСуммуНДСВстроке(Строка)
	
	СП = Новый Структура("Имя", "ВариантРасчетаНДС");
	
	//
	НайденныеСтроки = ТЗ_ШапкаДокумента.НайтиСтроки(СП);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВариантРасчетаНДС = НайденныеСтроки[0].Значение;
	Иначе	
		ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	КонецЕсли;
	
	СтавкаНДСЧисло = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
	Строка.СуммаНДС = Строка.СтоимостьСНДС*СтавкаНДСЧисло/(100+СтавкаНДСЧисло);
	Если  ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху Тогда				
		Строка.СтоимостьБезНДС= Строка.СтоимостьСНДС-Строка.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатаСтавкаНДСПриИзменении(Элемент)
	ПересчитатьСуммуНДСВстрокеОбработчик();

КонецПроцедуры
