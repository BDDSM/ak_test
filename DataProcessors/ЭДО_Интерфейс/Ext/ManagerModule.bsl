// Функция преобразует ставку НДС в перечисление
//
// Параметры:
//  СтрСтавка	 - преобразуемая строка
// 
// Возвращаемое значение:
//  Перечисление СтавкиНДС 
//
Функция ПарсингСтавкиНДС(СтрСтавка) Экспорт
	СтрСтавка = СтрЗаменить(СтрСтавка," ","");
	Если Найти(СтрСтавка,"18") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(СтрСтавка,"20") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Найти(СтрСтавка,"10") Тогда 
		Возврат Перечисления.СтавкиНДС.НДС10;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
КонецФункции

Функция ПоискНоменклатурыПоставщикаСтарый(Контрагент, Знач Наименование,ЕдиницаИзмерения) Экспорт
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
		НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		НужныйКонтрагент = Контрагент;
	КонецЕсли;
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("Строка")или не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
		ЕдиницаИзмеренияЗапрос = Неопределено;
	Иначе
		ЕдиницаИзмеренияЗапрос = ЕдиницаИзмерения;
	КонецЕсли;
	
	Наименование = Лев(Наименование, 150);
	ПодходящаяНоменклатура = Неопределено;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(НужныйКонтрагент) Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НоменклатураПоставщиков.Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Контрагент
		|	И (НоменклатураПоставщиков.Наименование = &Наименование
		|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда		
			Запрос.Текст = Запрос.Текст+" И НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", НужныйКонтрагент);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодходящаяНоменклатура = Выборка.Номенклатура;
		КонецЕсли;
		
		Если ПодходящаяНоменклатура = Неопределено Тогда 
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатураПоставщиков.Номенклатура
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Контрагент
			|	И (НоменклатураПоставщиков.Наименование = &Наименование
			|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
			
			Запрос.УстановитьПараметр("Контрагент", НужныйКонтрагент);
			Запрос.УстановитьПараметр("Наименование", Наименование);
			РезультатЗапроса = Запрос.Выполнить();
			Если не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ПодходящаяНоменклатура = Выборка.Номенклатура;
			КонецЕсли;   			
		КонецЕсли;
	КонецЕсли;
	
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		|	НоменклатураПоставщиков.Номенклатура КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	(НоменклатураПоставщиков.Наименование = &Наименование
		|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияЗапрос) Тогда 
			Запрос.Текст = Запрос.Текст+" И НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос";
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
		КонецЕсли;
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		КонецЕсли;
		
		Если ПодходящаяНоменклатура = Неопределено Тогда 
			// Ищем в справочнике номенклатуры без привязки к контрагенту
			Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатураПоставщиков.Номенклатура КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	(НоменклатураПоставщиков.Наименование = &Наименование
			|			ИЛИ НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование)";
			
			Запрос.УстановитьПараметр("Наименование", Наименование);
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда 
				ПодходящаяНоменклатура = Результат.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодходящаяНоменклатура = Неопределено Тогда 
		// Ищем в справочнике номенклатуры без привязки к контрагенту
		Запрос.Текст= "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Наименование);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			ПодходящаяНоменклатура = Результат.Ссылка;
		Иначе
			ПодходящаяНоменклатура = Наименование
		КонецЕсли;
	КонецЕсли;
	Возврат ПодходящаяНоменклатура;
КонецФункции

Функция ПоискНоменклатурыПоставщика(Контрагент, Знач Наименование,ЕдиницаИзмерения) Экспорт
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда 
		НужныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		НужныйКонтрагент = Контрагент;
	КонецЕсли;
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("Строка")или не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
		ЕдиницаИзмеренияЗапрос = Неопределено;
		ОтборПоЕдИзм = Ложь
	Иначе
		ЕдиницаИзмеренияЗапрос = ЕдиницаИзмерения;
		ОтборПоЕдИзм = Истина;
	КонецЕсли;
	
	Наименование = Лев(Наименование, 150);
	ПодходящаяНоменклатура = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Контрагент
	|	И НоменклатураПоставщиков.Наименование = &Наименование
	|	И ВЫБОР
	|			КОГДА &ОтборПоЕдИзм = ИСТИНА
	|				ТОГДА НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	1
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Контрагент
	|	И НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование
	|	И ВЫБОР
	|			КОГДА &ОтборПоЕдИзм = ИСТИНА
	|				ТОГДА НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	2
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Контрагент
	|	И НоменклатураПоставщиков.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	2
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Контрагент
	|	И НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	3
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование
	|	И ВЫБОР
	|			КОГДА &ОтборПоЕдИзм = ИСТИНА
	|				ТОГДА НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	3
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Наименование = &Наименование
	|	И ВЫБОР
	|			КОГДА &ОтборПоЕдИзм = ИСТИНА
	|				ТОГДА НоменклатураПоставщиков.Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмеренияЗапрос
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	4
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Номенклатура.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	4
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка,
	|	5
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Контрагент", НужныйКонтрагент);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ОтборПоЕдИзм", ОтборПоЕдИзм);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияЗапрос", ЕдиницаИзмеренияЗапрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПодходящаяНоменклатура = Выборка.Номенклатура;
	Иначе
		ПодходящаяНоменклатура = Наименование;
	КонецЕсли;	

	Возврат ПодходящаяНоменклатура;
КонецФункции

Процедура СоздатьНоменклатуруПоставщика(Контрагент, Номенклатура, НоменклатураПоставщика) Экспорт
	Если ЗначениеЗаполнено(Контрагент) = Истина И ЗначениеЗаполнено(Номенклатура) = Истина Тогда
		Если ЗначениеЗаполнено(НоменклатураПоставщика) = Истина Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	НоменклатураПоставщиков.Ссылка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Владелец
			|	И НоменклатураПоставщиков.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("Наименование", Лев(НоменклатураПоставщика, 150));
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				Выборка.Следующий();
				НСпр = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				НСпр = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();	
			КонецЕсли;	
			
			НСпр.Наименование = Лев(НоменклатураПоставщика, 150);
			НСпр.Номенклатура = Номенклатура;
			НСпр.Владелец = Контрагент;
			НСпр.ОбменДанными.Загрузка = Истина;
			Нспр.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

Процедура СохранитьИзмененияТаблицыВXML(СтруктруаДокумента, Таблица) Экспорт
	
	Если ЗначениеЗаполнено(СтруктруаДокумента.ТекФайлXML) = Ложь Тогда
		НСпр = Справочники.Файлы.СоздатьЭлемент();
		НСпр.Расширение = ".xml";
		НСпр.Наименование = "Верифицированный файл ЭДО";
		НСпр.Записать();
		
		Версия = 1;
		
		СоответсвиеЗначенийСвойств = Новый Соответствие;
		СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Родитель, СтруктруаДокумента.ИсхФайлXML);
		СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Тип, "Верифицированный файл ЭДО");
		СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Автор, ПараметрыСеанса.ТекущийПользователь);
		СоответсвиеЗначенийСвойств.Вставить(ПланыВидовХарактеристик.СвойстваОбъектов.Файлы_Версия, Версия);
		
		Для каждого ЗначСоотв Из СоответсвиеЗначенийСвойств Цикл
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = НСпр.Ссылка;
			Запись.Свойство = ЗначСоотв.Ключ;
			Запись.Значение = ЗначСоотв.Значение;
			Запись.Записать();
		КонецЦикла;			  			
		
		ВерФайл = НСпр.Ссылка;
		СтруктруаДокумента.ТекФайлXML = ВерФайл;	
		
		//ЗаписьДокумент = РегистрыСведений.ЭДО_Документы.СоздатьМенеджерЗаписи();
		//ЗаписьДокумент.ИдентификаторДокумента = СтруктруаДокумента.ИдентификаторДокумента;
		//ЗаписьДокумент.Прочитать();
		//ЗаписьДокумент.ФайлXML_Верифицированный = ВерФайл;
		//ЗаписьДокумент.Записать();
		
		ДокументОбъект = СтруктруаДокумента.ЭДО_ВходящийДокумент.ПолучитьОбъект();
		ДокументОбъект.ФайлXML_Верифицированный = ВерФайл;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		
	Иначе		
		ВерФайл = СтруктруаДокумента.ТекФайлXML;		
	КонецЕсли;	
	
	СписокВыгрузкиДляСтрукутрыДокумента = Новый СписокЗначений;
	//СписокВыгрузкиДляСтрукутрыДокумента.Добавить("Подписан");
	//СписокВыгрузкиДляСтрукутрыДокумента.Добавить("ДанныеШапки.Номер");
	

	ПутьЗаписи = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ВерФайл);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьЗаписи);
	ЗаписьXML.ЗаписатьОбъявлениеXML();  
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Data");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("fields");
	Для каждого ЗначСписка Из СписокВыгрузкиДляСтрукутрыДокумента Цикл
		Значение = "";
		СтруктруаДокумента.Свойство(ЗначСписка.Значение, Значение);
		ЗаписьXML.ЗаписатьНачалоЭлемента("field");
		ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(ЗначСписка.Значение));
		ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Значение))));
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();  //field 		
	КонецЦикла;	
	      	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("fields");
	  	
	ЗаписьXML.ЗаписатьНачалоЭлемента("tables");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("table");
	ЗаписьXML.ЗаписатьНачалоЭлемента("rows");
	Для каждого Стр Из Таблица Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("row");
		ЗаписьXML.ЗаписатьНачалоЭлемента("cells");
		Для каждого Колонка Из Таблица.Колонки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("cell");
			ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Колонка.Имя));
			
			ЗаписьXML.ЗаписатьАтрибут("value_type", XMLСтрока(Строка(ТипЗнч(Стр[Колонка.Имя]))));
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(Стр[Колонка.Имя]));
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //("cell");
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("cells");			
		ЗаписьXML.ЗаписатьКонецЭлемента(); //("row");
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("rows");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("table");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //("tables");
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Data 
	ЗаписьXML.Закрыть();
КонецПроцедуры	


//Создание документов
Процедура СоздатьДокумент(СтруктураДокумента) Экспорт
	
	
	//Товары
	//Услуги/Материалы
	//Оборудование
	//Доп. расход
	
	//ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху;
	//ИмяКолонкиССуммой = "СуммаБезНДС";
	//
	ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	ИмяКолонкиССуммой = "СуммаСУчетомНДС";
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ТабличнаяЧасть) = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	//Для каждого Стр Из СтруктураДокумента.ТабличнаяЧасть Цикл
	//	СуммаРасчет = Окр(Стр.Количество * Стр.Цена, 2);
	//	Если СуммаРасчет = Стр.СуммаБезНДС Тогда		
	//		ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху;
	//		ИмяКолонкиССуммой = "СуммаБезНДС";
	//		Прервать;
	//	ИначеЕсли СуммаРасчет = Стр.СуммаСУчетомНДС Тогда 
	//		ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	//		ИмяКолонкиССуммой = "СуммаСУчетомНДС";
	//		Прервать;
	//	Иначе
	//		Продолжить
	//	КонецЕсли;	
	//КонецЦикла;	
	
	СтруктураДокумента.Вставить("ВариантРасчетаНДС", ВариантРасчетаНДС);
	СтруктураДокумента.Вставить("ИмяКолонкиССуммой", ИмяКолонкиССуммой);
	
	Фильтр = Новый Структура("Назначение", "Товары");	
	ТЗТовары = СтруктураДокумента.ТабличнаяЧасть.Скопировать(Фильтр);
	
	Фильтр = Новый Структура("Назначение", "Услуги/Материалы");
	ТЗУслги = СтруктураДокумента.ТабличнаяЧасть.Скопировать(Фильтр);
	
	Фильтр = Новый Структура("Назначение", "Оборудование");
	ТЗОборудование = СтруктураДокумента.ТабличнаяЧасть.Скопировать(Фильтр);
	
	Фильтр = Новый Структура("Назначение", "Доп. расход");
	ТЗДопРасход = СтруктураДокумента.ТабличнаяЧасть.Скопировать(Фильтр);
	
	//+++ AK suvv 2018.11.27 ИП-00019917.06
	Если СтруктураДокумента.БудетСозданДокумент = "Возврат от покупателя" Тогда
		НДок = СоздатьВозвратТоваровОтПокупателя(СтруктураДокумента, ТЗТовары);
		Возврат;
	КонецЕсли;
	//--- AK suvv

	НДок = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
			
	Если СтруктураДокумента.БудетСозданДокумент <> "ПДР" Тогда		
		Если ТЗТовары.Количество() + ТЗУслги.Количество() + ТЗОборудование.Количество() > 0 Тогда
			НДок = СоздатьПТУ(СтруктураДокумента, ТЗТовары, ТЗУслги, ТЗОборудование);		
		КонецЕсли;	
	КонецЕсли;
	
	Если СтруктураДокумента.БудетСозданДокумент <> "ПДР" Тогда
		Если ЗначениеЗАполнено(НДок) Тогда
			Партия = НДок.Ссылка;
		Иначе
			Возврат;
		КонецЕсли;	
	Иначе
		Партия = СтруктураДокумента.Партия;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Партия) = Истина Тогда
		Если ТЗДопРасход.Количество() > 0 Тогда
			НДокПдр = СоздатьПДР(СтруктураДокумента, ТЗДопРасход, Партия);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьПТУ(СтруктураДокумента, ТЗТовары, ТЗУслги, ТЗОборудование)
	
	//+++ AK suvv 2018.11.27 ИП-00019917.06
	Если СтруктураДокумента.СоздаватьНовый = Истина Тогда
		НДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();		
		НДок.ДокументыПолучены          = Истина;
		НДок.СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО;
		НДок.Дата                       = ПолучитьДатуСоздаваемогоДокумента(СтруктураДокумента.ДатаДокумента);   			
	Иначе
		НДок = ПолучитьСсылкуНаСуществующийДокумент("ПоступлениеТоваровУслуг", СтруктураДокумента.ЭДО_ВходящийДокумент);			
	КонецЕсли;
	//--- AK suvv
	
	//НДок.Комментарий = "##Создан " + Строка(ТекущаяДата()) + ", пользователем: " + Строка(ПараметрыСеанса.ТекущийПользователь) + ", из обработки ЭДО ##";
	НДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НДок.Контрагент = СтруктураДокумента.Контрагент;
	НДок.Организация = СтруктураДокумента.Организация;
	
	НДок.ВариантРасчетаНДС = СтруктураДокумента.ВариантРасчетаНДС;
	НДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		
	НДок.Заявка = СтруктураДокумента.Заявка; 
	
	
	
	НДок.Товары.Очистить();	
	Для каждого СтрТовары Из ТЗТовары Цикл
		НСтрТовары = НДок.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрТовары, СтрТовары);
		
		НСтрТовары.Сумма  = СтрТовары[СтруктураДокумента.ИмяКолонкиССуммой];
		
		Если СтрТовары.КоличествоПринято <> СтрТовары.Количество И СтрТовары.КоличествоПринято <> 0 Тогда
			НСтрТовары.Количество = СтрТовары.КоличествоПринято;
			НСтрТовары.Цена = Окр(НСтрТовары.Сумма/НСтрТовары.Количество, 2);			
		КонецЕсли;	
	КонецЦикла;	
	
	НДок.Услуги.Очистить();	
	Для каждого СтрУслуги Из ТЗУслги Цикл
		НСтрУслуги = НДок.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрУслуги, СтрУслуги);
		НСтрУслуги.Сумма  = СтрУслуги[СтруктураДокумента.ИмяКолонкиССуммой];
		НСтрУслуги.Содержание = СтрУслуги.НоменклатураПоставщика;
		
		Если СтрУслуги.КоличествоПринято <> СтрУслуги.Количество И СтрУслуги.КоличествоПринято <> 0 Тогда
			НСтрУслуги.Количество = СтрУслуги.КоличествоПринято;
			НСтрУслуги.Цена = Окр(НСтрУслуги.Сумма/НСтрУслуги.Количество, 2);			
		КонецЕсли;	
	КонецЦикла;
	
	
	//НДок.Оборудование.Очистить();	
	//Для каждого СтрОбор Из ТЗОборудование Цикл
	//	НСтрОбор = НДок.Оборудование.Добавить();
	//	ЗаполнитьЗначенияСвойств(НСтрОбор, СтрОбор);
	//	НСтрОбор.Сумма  = СтрОбор[СтруктураДокумента.ИмяКолонкиССуммой];
	//КонецЦикла;    
	
	Если ТЗОборудование.Количество() > 0 Тогда
		НДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		РазбитьОборудование(НДок, ТЗОборудование, СтруктураДокумента);
	КонецЕсли; 
	
	СвернутьКомплекты(НДок);
	
	СвернутьПоНоменклатуре(НДок, СтруктураДокумента.СворачиватьПоНоменклатуре);
	
	ЗаполнитьСчетаУчета(НДок);
	
	Если ЗначениеЗаполнено(СтруктураДокумента.Заявка) = Истина Тогда
		ЗаполнитьПоступлениеПоДокументуОснованию(НДок, СтруктураДокумента.Заявка);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НДок.ДоговорКонтрагента) = Ложь Тогда
		НДок.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(НДок.Организация, НДок.Контрагент, ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НДок.СчетУчетаРасчетовСКонтрагентом) = Ложь Тогда
		Если ЗначениеЗаполнено(НДок.ДоговорКонтрагента)
			И ЗначениеЗаполнено(НДок.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
			НДок.СчетУчетаРасчетовСКонтрагентом = НДок.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;	
	КонецЕсли;
	
	Если НДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		УстановитьОСОбщий(НДок);
	КонецЕсли;
	НДок.ПосчитатьСуммуТабличнойЧасти();
	
	НДок.ОтправлятьНаРаспознавание = Ложь;
	
	
	
	Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.СчетФактура = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.УПД = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
		ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
				
		НДок.Акт = СтруктураДокумента.ФайлPDF;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭДО_ВходящийДокумент.ФайлPDF,
	|	ЭДО_ВходящийДокумент.Ссылка
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.Ссылка <> &Ссылка
	//+++shae 2018.07.14 ИП-00019085
	|	И ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента <> &ТипДокумента	
	//---shae 2018.07.14 ИП-00019085  	
	|	И ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураДокумента.ЭДО_ВходящийДокумент);
	Запрос.УстановитьПараметр("ТипДокумента", СтруктураДокумента.ТипДокумента); //shae 2018.07.14 ИП-00019085
	Запрос.УстановитьПараметр("ИдентификаторПакета", СтруктураДокумента.ИдентификаторПакета);
	
	ВыборкаДругиеДокументыПакета = Запрос.Выполнить().Выбрать();
	МассивЭДОДокументов = Новый Массив;
	МассивЭДОДокументов.Добавить(СтруктураДокумента.ЭДО_ВходящийДокумент);
	Пока ВыборкаДругиеДокументыПакета.Следующий() Цикл
		
		
		Если ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			НДок.НомерВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.СчетФактура = ВыборкаДругиеДокументыПакета.ФайлPDF;
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
			НДок.НомерВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.УПД = ВыборкаДругиеДокументыПакета.ФайлPDF;
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
			ИЛИ ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			НДок.НомерВходящегоДокумента = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоДокумента = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.Акт = ВыборкаДругиеДокументыПакета.ФайлPDF;	
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
	НДок.Комментарий = ЗаполнитьКомментарийДокумента(СтруктураДокумента.Заявка);//shae 2018.07.14 ИП-00019085  
	
	Попытка		
		НДок.Записать();
		Сообщить(?(СтруктураДокумента.СоздаватьНовый, "Создан документ ", "Перезаполнен документ ") + строка(НДок));
		
		Для каждого ЗначМассива Из МассивЭДОДокументов Цикл
			
			Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
			Запись.Документ = НДок.Ссылка;
			Запись.ВидДокумента = ЗначМассива.ТипДокумента.ТипДокумента;
			Запись.ДокументЭДО = ЗначМассива;
			Запись.Записать();
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(ЗначМассива, НДок.Ссылка);
			
		КонецЦикла;
		
		Если СтруктураДокумента.СписокДокументов.НайтиПоЗначению(НДок.Ссылка) = Неопределено Тогда
			СтруктураДокумента.СписокДокументов.Добавить(НДок.Ссылка);
		КонецЕсли;
		
		Возврат НДок.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ. "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки; 	

КонецФункции	

Функция СоздатьПДР(СтруктураДокумента, ТЗДопРасход, Партия)
	
	//+++ AK suvv 2018.11.27 ИП-00019917.06
	Если СтруктураДокумента.СоздаватьНовый = Истина Тогда
		НДок = Документы.ПоступлениеДопРасходов.СоздатьДокумент();		
		НДок.ДокументыПолучены  = Истина;
		НДок.Дата               = ПолучитьДатуСоздаваемогоДокумента(СтруктураДокумента.ДатаДокумента);   			
	Иначе
		НДок = ПолучитьСсылкуНаСуществующийДокумент("ПоступлениеДопРасходов", СтруктураДокумента.ЭДО_ВходящийДокумент);			
	КонецЕсли;
	//--- AK suvv
			
	НДок.ЗаполнитьШапкуДокументаПоОснованию(Партия);
	
	СоответствиеГраницЗапрета = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанных().Получить();
	
	Если СоответствиеГраницЗапрета <> Неопределено Тогда
		
		ДатаЗапрета = СоответствиеГраницЗапрета.Получить(Справочники.Организации.ПустаяСсылка());
		
		Если ДатаЗапрета <> Неопределено Тогда
			
			Если ДатаЗапрета >= СтруктураДокумента.ДатаДокумента Тогда
				НДок.Дата = КонецДня(ДатаЗапрета) + 1;
			Иначе
				НДок.Дата = СтруктураДокумента.ДатаДокумента;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//НДок.Дата = ТекущаяДата();
		НДок.Дата = СтруктураДокумента.ДатаДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДокумента.Заявка) = Истина Тогда
		Если ТипЗнч(СтруктураДокумента.Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
			НДок.ЗаявкаНаРсходованиеСредств = СтруктураДокумента.Заявка;
			НДок.СтатьяДДС = НДок.ЗаявкаНаРсходованиеСредств.СтатьяДДС;
		Иначе
			НДок.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("230107");			    
		КонецЕсли;
	Иначе
		//НДок.ЗаявкаНаРсходованиеСредств = Неопределено;
		Если ТипЗнч(Партия.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
			НДок.ЗаявкаНаРсходованиеСредств = Партия.ДокументОснование;
			НДок.СтатьяДДС = НДок.ЗаявкаНаРсходованиеСредств.СтатьяДДС;
		Иначе			
			НДок.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("230107");			    
		КонецЕсли;	
	КонецЕсли;
		
	НДок.Контрагент = СтруктураДокумента.Контрагент;
	//НДок.Организация = СтруктураДокумента.Организация;
	
	Если ЗначениеЗаполнено(НДок.ДоговорКонтрагента) = Ложь Тогда
		НДок.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(НДок.Организация, НДок.Контрагент, ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НДок.СчетУчетаРасчетовСКонтрагентом) = Ложь Тогда
		Если ЗначениеЗаполнено(НДок.ДоговорКонтрагента)
			И ЗначениеЗаполнено(НДок.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
			НДок.СчетУчетаРасчетовСКонтрагентом = НДок.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;	
	КонецЕсли;	
	
	НДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	НДок.ВариантРасчетаНДС = СтруктураДокумента.ВариантРасчетаНДС;
	
	ДопРасходыСумма = 0;
	ДопРасходыСуммаНДС  = 0;
	ДопРасходыСодержание = "";
	
	Для Каждого Строка Из ТЗДопРасход Цикл		
		ДопРасходыСумма = ДопРасходыСумма + Строка[СтруктураДокумента.ИмяКолонкиССуммой];
		ДопРасходыСуммаНДС = ДопРасходыСуммаНДС + Строка.СуммаНДС;
		ДопРасходыСодержание = ДопРасходыСодержание + СокрЛП(Строка.НоменклатураПоставщика);
		ДопРасходыСодержание = ДопРасходыСодержание + ?(Прав(ДопРасходыСодержание, 1) = ".", " ", ". ")
	КонецЦикла;
	
	Если ДопРасходыСумма = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли; 
	
	
	//НДок.ДокументыПолучены = Партия.ДокументыПолучены;
	//НДок.СтатусПолученныхДокументов = Партия.СтатусПолученныхДокументов;
	
	НДок.ДокументыПолучены = Истина;
	НДок.СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО;
	
	НДок.ЗаполнитьТоварыПоПоступлениюТоваров(Партия);
	
	НДок.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	
	НДок.Сумма = ДопРасходыСумма;
	НДок.СуммаДокумента = ДопРасходыСумма;	
	НДок.СуммаНДС  = ДопРасходыСуммаНДС;
	НДок.Содержание = ДопРасходыСодержание;
	
	
	Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.СчетФактура = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.УПД = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
		ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		НДок.Акт = СтруктураДокумента.ФайлPDF;	
	КонецЕсли;
	
	
	
	Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.СчетФактура = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
		НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
		
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
		
		НДок.УПД = СтруктураДокумента.ФайлPDF;
	ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
		ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
		НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;
		НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
				
		НДок.Акт = СтруктураДокумента.ФайлPDF;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭДО_ВходящийДокумент.ФайлPDF,
	|	ЭДО_ВходящийДокумент.Ссылка
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.Ссылка <> &Ссылка
	//+++shae 2018.07.14 ИП-00019085
	|	И ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента <> &ТипДокумента	
	//---shae 2018.07.14 ИП-00019085  	
	|	И ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураДокумента.ЭДО_ВходящийДокумент);
	Запрос.УстановитьПараметр("ТипДокумента", СтруктураДокумента.ТипДокумента); //shae 2018.07.14 ИП-00019085
	Запрос.УстановитьПараметр("ИдентификаторПакета", СтруктураДокумента.ИдентификаторПакета);
	
	ВыборкаДругиеДокументыПакета = Запрос.Выполнить().Выбрать();
	МассивЭДОДокументов = Новый Массив;
	МассивЭДОДокументов.Добавить(СтруктураДокумента.ЭДО_ВходящийДокумент);
	Пока ВыборкаДругиеДокументыПакета.Следующий() Цикл
		                	
		Если ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			НДок.НомерВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.СчетФактура = ВыборкаДругиеДокументыПакета.ФайлPDF;
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
			НДок.НомерВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.УПД = ВыборкаДругиеДокументыПакета.ФайлPDF;
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
			ИЛИ ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			НДок.НомерВходящегоДокумента = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоДокумента = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.Акт = ВыборкаДругиеДокументыПакета.ФайлPDF;	
			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
	НДок.Комментарий = ЗаполнитьКомментарийДокумента(СтруктураДокумента.Заявка);//shae 2018.07.14 ИП-00019085  
	
	Попытка				
		НДок.Записать();
		Сообщить(?(СтруктураДокумента.СоздаватьНовый, "Создан документ ", "Перезаполнен документ ") + строка(НДок));
		
		
		Для каждого ЗначМассива Из МассивЭДОДокументов Цикл
			
			Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
			Запись.Документ = НДок.Ссылка;
			Запись.ВидДокумента = ЗначМассива.ТипДокумента.ТипДокумента;
			Запись.ДокументЭДО = ЗначМассива;
			Запись.Записать();
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(ЗначМассива, НДок.Ссылка);
			
		КонецЦикла;
		
		Если СтруктураДокумента.СписокДокументов.НайтиПоЗначению(НДок.Ссылка) = Неопределено Тогда
			СтруктураДокумента.СписокДокументов.Добавить(НДок.Ссылка);
		КонецЕсли;
		
		Возврат НДок.Ссылка;	
	Исключение
		Сообщить("Не удалось записать документ. "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

//+++ AK suvv 2018.11.27 ИП-00019917.06
Функция СоздатьВозвратТоваровОтПокупателя(СтруктураДокумента, ТЗТовары)
	
	Если СтруктураДокумента.СоздаватьНовый = Истина Тогда
		НДок = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();		
		НДок.Дата = ПолучитьДатуСоздаваемогоДокумента(СтруктураДокумента.ДатаДокумента);   			
	Иначе
		НДок = ПолучитьСсылкуНаСуществующийДокумент("ВозвратТоваровОтПокупателя", СтруктураДокумента.ЭДО_ВходящийДокумент);			
	КонецЕсли;
	
	НДок.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателей.Продажа;
	НДок.Организация = СтруктураДокумента.Организация;
	НДок.Контрагент  = СтруктураДокумента.Контрагент;	
	Если НЕ ЗначениеЗаполнено(НДок.ДоговорКонтрагента) Тогда
		НДок.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(НДок.Организация, НДок.Контрагент, НДок.Дата, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НДок.ВариантРасчетаНДС) Тогда
		НДок.ВариантРасчетаНДС = СтруктураДокумента.ВариантРасчетаНДС;
		Если ЗначениеЗаполнено(НДок.ДоговорКонтрагента) Тогда
			ВариантРасчетНДСПоДоговоруКА = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НДок.ДоговорКонтрагента, "ВариантРасчетаНДС");
			Если ЗначениеЗаполнено(ВариантРасчетНДСПоДоговоруКА) Тогда 
				НДок.ВариантРасчетаНДС = ВариантРасчетНДСПоДоговоруКА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ТочкаДоставки1913       = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("bcec5da0-c64f-11e8-8f0e-005056a714c6")); //1913_МЦК_Коптево
	ТочкаДоставки1914       = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("987a0269-c747-11e8-a251-005056a714c6")); //1914_МЦК_Склад_Автомоторная5
	НДок.ТочкаДоставки      = ?(НДок.Дата >= Дата(2018,11,04), ТочкаДоставки1914, ТочкаДоставки1913);
	НДок.СтруктурнаяЕдиница = НДок.ТочкаДоставки;   
	НДок.ДокументыПолучены  = Истина;	
	
	НДок.НомерВходящегоДокумента   = ?(СтруктураДокумента.Свойство("НомерДокумента"),СтруктураДокумента.НомерДокумента,"");
	НДок.ДатаВходящегоДокумента    = ?(СтруктураДокумента.Свойство("ДатаДокумента"), СтруктураДокумента.ДатаДокумента, Дата(01,01,01));
	НДок.Файл                      = СтруктураДокумента.ФайлPDF;
	НДок.Ответственный             = ПараметрыСеанса.ТекущийПользователь;
	НДок.Комментарий               = "Загружен из EDO Номер возврата: " + СтруктураДокумента.ЭДО_ВходящийДокумент.Номер;
	
	НДок.Товары.Очистить();	
	Для Каждого СтрТовары Из ТЗТовары Цикл
		
		НСтрТовары = НДок.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрТовары, СтрТовары);
		
		НСтрТовары.Сумма                = СтрТовары[СтруктураДокумента.ИмяКолонкиССуммой];
		НСтрТовары.Коэффициент          = НСтрТовары.ЕдиницаИзмерения.Коэффициент;
		НСтрТовары.СтатьяТовародвижения = Справочники.СтатьиТовародвижения.ПоступлениеОтПокупателя;
		
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(НСтрТовары.Номенклатура, НДок.Дата);		
		ЗаполнитьЗначенияСвойств(НСтрТовары, СчетаУчета);
		
	КонецЦикла;	
	
	СвернутьПоНоменклатуре(НДок, СтруктураДокумента.СворачиватьПоНоменклатуре);
	
	НДок.РассчитатьСуммуДокумента();	
	НДок.ДополнительныеСвойства.Вставить("НеПриниматьКВычетуНДС", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭДО_ВходящийДокумент.ФайлPDF,
	|	ЭДО_ВходящийДокумент.Ссылка
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.Ссылка <> &Ссылка
	//+++shae 2018.07.14 ИП-00019085
	|	И ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента <> &ТипДокумента	
	//---shae 2018.07.14 ИП-00019085  	
	|	И ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета";
	
	Запрос.УстановитьПараметр("Ссылка",              СтруктураДокумента.ЭДО_ВходящийДокумент);
	Запрос.УстановитьПараметр("ТипДокумента",        СтруктураДокумента.ТипДокумента); //shae 2018.07.14 ИП-00019085
	Запрос.УстановитьПараметр("ИдентификаторПакета", СтруктураДокумента.ИдентификаторПакета);
	
	МассивЭДОДокументов = Новый Массив;
	МассивЭДОДокументов.Добавить(СтруктураДокумента.ЭДО_ВходящийДокумент);
	
	ВыборкаДругиеДокументыПакета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДругиеДокументыПакета.Следующий() Цикл
		
		Если ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			НДок.ПредъявленСчетФактура = Истина;
			НДок.НомерВходящегоСчетФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
			НДок.НомерВходящегоСчетФактуры = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоСчетаФактуры = ВыборкаДругиеДокументыПакета.ДатаДокумента;			
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		ИначеЕсли ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
			ИЛИ ВыборкаДругиеДокументыПакета.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			НДок.НомерВходящегоДокумента = ВыборкаДругиеДокументыПакета.НомерДокумента;
			НДок.ДатаВходящегоДокумента = ВыборкаДругиеДокументыПакета.ДатаДокумента;
			НДок.файл = ВыборкаДругиеДокументыПакета.ФайлPDF;	
			МассивЭДОДокументов.Добавить(ВыборкаДругиеДокументыПакета.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
	Попытка		
		НДок.Записать();
		Сообщить(?(СтруктураДокумента.СоздаватьНовый, "Создан документ ", "Перезаполнен документ ") + строка(НДок));
		
		Для каждого ЗначМассива Из МассивЭДОДокументов Цикл
			
			Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
			Запись.Документ = НДок.Ссылка;
			Запись.ВидДокумента = ЗначМассива.ТипДокумента.ТипДокумента;
			Запись.ДокументЭДО = ЗначМассива;
			Запись.Записать();
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(ЗначМассива, НДок.Ссылка);
			
		КонецЦикла;
		
		Если СтруктураДокумента.СписокДокументов.НайтиПоЗначению(НДок.Ссылка) = Неопределено Тогда
			СтруктураДокумента.СписокДокументов.Добавить(НДок.Ссылка);
		КонецЕсли;
		
		Возврат НДок.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ. " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки; 	
	
КонецФункции //--- AK suvv

//+++ AK suvv 2018.11.27 ИП-00019917.06
Функция ПолучитьДатуСоздаваемогоДокумента(ДатаДокумента)
	
	СоответствиеГраницЗапрета = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанных().Получить();
	
	Если СоответствиеГраницЗапрета <> Неопределено Тогда
		
		ДатаЗапрета = СоответствиеГраницЗапрета.Получить(Справочники.Организации.ПустаяСсылка());
		
		Если ДатаЗапрета <> Неопределено Тогда
			
			Если ДатаЗапрета >= ДатаДокумента Тогда
				ДатаНовогоДокумента = КонецДня(ДатаЗапрета) + 1;
			Иначе
				ДатаНовогоДокумента = ДатаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДатаНовогоДокумента = ТекущаяДата();
		
	КонецЕсли;
	
	Возврат ДатаНовогоДокумента;
	 
КонецФункции //--- AK suvv

//+++ AK suvv 2018.11.27 ИП-00019917.06 
Функция ПолучитьСсылкуНаСуществующийДокумент(ТипДокумента, ВходящийДокументЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.Документ
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.ДокументЭДО = &ДокументЭДО
	|	И ЭДО_СопоставлениеДокументов.Документ ССЫЛКА Документ." + ТипДокумента;
	Запрос.УстановитьПараметр("ДокументЭДО", ВходящийДокументЭДО);
		
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		НДок = ТЗ[0].Документ.ПолучитьОбъект();
	Иначе
		НДок = Документы[ТипДокумента].СоздатьДокумент();	 
		НДок.Дата = ТекущаяДата();
	КонецЕсли;
	
	Возврат НДок;
		
КонецФункции //--- AK suvv

//shae 2018.07.17 ИП-00019085
Функция ЗаполнитьКомментарийДокумента(Заявка)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда 
		ТорговыеТочкиСписок = Заявка.ТорговыеТочкиСписок;
		Если СтрЧислоВхождений(ТорговыеТочкиСписок,"; ")=0 Тогда 
			Комментарий = ТорговыеТочкиСписок;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Заявка) = Тип("ДокументСсылка.ПредпоступлениеПоКомплектации") Тогда 
		Комментарий = Заявка.Магазин.Наименование;
	Иначе
		Комментарий = "";
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции	

//Перенес из обработки СБИС

//+++АК SaMi 

Функция СоздатьФайлХранения(ДанныеКартинки)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= "Документ ЭДО";
	СпрОбъект.Расширение 	= "pdf";
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Процедура ПрикрепитьФайлКДокументу(ДокОбъект, СсылкаНаPDF, ФорматФайла)
	
	//Если ПустаяСтрока(СсылкаНаPDF) Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//Если ФорматФайла = "УпдСчфДоп" Тогда
	//	ИмяРеквизита = "УПД";
	//	
	//ИначеЕсли ФорматФайла = "АктВР"  ИЛИ ФорматФайла = "ЭДОНакл" Тогда
	//	ИмяРеквизита = "Акт";
	//	
	//Иначе
	//	Возврат;
	//	
	//КонецЕсли; 
	//
	//ИмяФайла = ПолучитьИмяВременногоФайла(".pdf");			
	//ИмяФайлаКУдалению = ИмяФайла;
	
		
КонецПроцедуры 

Процедура РазбитьОборудование(ДокОбъект, ТЗОборудование, СтруктураДокумента)
	
	// На каждую единицу оборудования - одна строка
	//Попытка 
	//	МассивКоличествоОборудования = Новый Массив;								
	//	
	//	Для Каждого Строка Из СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
	//		Если Строка.НазначениеНоменклатуры = "Оборудование"  Тогда
	//			МассивКоличествоОборудования.Добавить(Строка.Кол_во);
	//		КонецЕсли; 
	//	КонецЦикла;  
	//	
	//Исключение
		МассивКоличествоОборудования = Неопределено;
	//КонецПопытки; 
	
	Если СтруктураДокумента.СворачиватьПоНоменклатуре = Истина Тогда		
		ТЗОборудованиеВрем = ТЗОборудование.Скопировать();		
		
		ТЗОборудованиеВрем.Колонки.Добавить("ЧислоСтрок");
		ТЗОборудованиеВрем.ЗаполнитьЗначения(1, "ЧислоСтрок");
			
		ТЗОборудованиеВрем.Свернуть("Номенклатура, СтавкаНДС", "СуммаНДС, Количество, КоличествоПринято, ЧислоСтрок" + "," + СтруктураДокумента.ИмяКолонкиССуммой);
		
		НоменклатураСтелаж = Справочники.Номенклатура.НайтиПоНаименованию("Комплект стеллажного оборудования", Истина);
		НоменклатураСигнализация = Справочники.Номенклатура.НайтиПоНаименованию("Комплект охранной сигнализации", Истина); //shae 2018.07.16 ИП-00019085
		
		Для каждого Стр Из ТЗОборудованиеВрем Цикл
			Если Стр.ЧислоСтрок > 0 И (Стр.Номенклатура = НоменклатураСтелаж 
				ИЛИ Стр.Номенклатура = НоменклатураСигнализация)//shae 2018.07.16 ИП-00019085
				Тогда
				//Стр.Количество = 1;
				Стр.КоличествоПринято = 1;
			КонецЕсли;	
		КонецЦикла;		
		ТЗОборудование = ТЗОборудованиеВрем;
	КонецЕсли;	
	
	
	
	Если МассивКоличествоОборудования = Неопределено Тогда
		//ТаблицаОборудования = ДокОбъект.Оборудование.Выгрузить();
		 
		ДокОбъект.Оборудование.Очистить();
		
		Для Каждого Строка Из ТЗОборудование Цикл
			
			//КоличествоОборудования = Строка.Количество;
			КоличествоОборудования = Строка.КоличествоПринято;
			
			Если КоличествоОборудования >= 2 Тогда
				МассивДляРаспределения = Новый Массив;
				
				Для Сч = 1 По КоличествоОборудования Цикл
					МассивДляРаспределения.Добавить(1);
				КонецЦикла;
				
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Строка[СтруктураДокумента.ИмяКолонкиССуммой], МассивДляРаспределения, , Ложь);
				МассивСуммНДС = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаНДС, МассивДляРаспределения, , Ложь);
				
				Для Сч = 1 По КоличествоОборудования Цикл
					НоваяСтрока = ДокОбъект.Оборудование.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.Сумма = МассивСумм[Сч-1];
					НоваяСтрока.СуммаНДС = МассивСуммНДС[Сч-1];
				КонецЦикла;
				
			ИначеЕсли КоличествоОборудования = 1 Тогда
				НоваяСтрока = ДокОбъект.Оборудование.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Сумма  = Строка[СтруктураДокумента.ИмяКолонкиССуммой];
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли; 

КонецПроцедуры 

Процедура УстановитьОСОбщий(ДокОбъект)
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТЧ Из ДокОбъект.Оборудование Цикл
			УстановитьОС(СтрокаТЧ);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании ОС по строке № " + СтрокаТЧ.НомерСтроки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
	
КонецПроцедуры 

Процедура УстановитьОС(пСтрока) 
	
	Если ЗначениеЗаполнено(пСтрока.ОсновноеСредство)
			И Найти(пСтрока.ОсновноеСредство, "<Объект не найден>") = 0 Тогда
		обСпр = пСтрока.ОсновноеСредство.ПолучитьОбъект();
	Иначе
		обСпр = Справочники.ОсновныеСредства.СоздатьЭлемент();
		обСпр.Наименование = пСтрока.Номенклатура.Наименование;
	КонецЕсли;
	
	обСпр.Номенклатура 				= пСтрока.Номенклатура;
	обСпр.ПервоначальнаяСтоимость 	= пСтрока.Сумма;
	
	//АК_ОсновныеСредства.ЗаполнитьРеквизитыОСПоСтатистике(обСпр);	
	
	
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Не  ЗначениеЗаполнено(обСпр.ИнвентарныйНомер) Тогда
		обСпр.ИнвентарныйНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
										И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ИнвентарныйНомер);
	КонецЕсли;
									
	обСпр.ЗаводскойНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ЗаводскойНомер);
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер) Тогда
		пСтрока.ИнвентарныйНомер 	= обСпр.ИнвентарныйНомер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер) Тогда
		пСтрока.ЗаводскойНомер 		= обСпр.Код;
	КонецЕсли;
	
	пСтрока.ОсновноеСредство = обСпр.Ссылка;
	
	Если не ЗначениеЗаполнено(пСтрока.СчетУчета) Тогда
		пСтрока.СчетУчета = АК_ОсновныеСредства.ПолучитьОсновнойСчетУчета(пСтрока.Номенклатура);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(пСтрока.СчетУчетаБУ) Тогда
		УстановитьСчетаУчетаБУНУВСтроке(пСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетаУчетаБУНУВСтроке(ТекущиеДанные)

	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
		
	//+++AK susk	
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000 Тогда		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	//---AK susk
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ОборудованиеДляМонтажа Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
		
	Иначе 
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ТекущиеДанные.СчетУчета.Код);
	КонецЕсли;
	
КонецПроцедуры


Функция ЗаполнитьПоступлениеПоДокументуОснованию(ДокОбъект, ДанныеЗаполнения)
	

	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")  Тогда

		ДокОбъект.ДокументОснование	= ДанныеЗаполнения;		
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
			
			//
			ДокОбъект.Заявка	= ДанныеЗаполнения;
			ДокОбъект.Организация 			= ДанныеЗаполнения.Организация;
			ДокОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
			ДокОбъект.ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
			//ДокОбъект.ВариантРасчетаНДС 	= ДанныеЗаполнения.ВариантРасчетаНДС;
					
			ДокОбъект.СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетов;
			//ДокОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
			ДокОбъект.СтруктурнаяЕдиница=ДанныеЗаполнения.ЦФО;
			ДокОбъект.СтатьяДДС 			= ДанныеЗаполнения.СтатьяДДС;			
			
		    Если Не ЗначениеЗаполнено(ДокОбъект.СтатьяЗатрат) Тогда
				ДокОбъект.СтатьяЗатрат = АК_УчетМСФОПривилегированный.ПолучитьСтатьюСоответствия(ТекущаяДата(), ДанныеЗаполнения.СтатьяДДС);	
			КонецЕсли;
			
			//Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Если ДокОбъект.Оборудование.Количество() > 0 Тогда
				ЗаполнитьОборудованиеПоЗаявкеНаУслуги(ДанныеЗаполнения, ДокОбъект);
			КонецЕсли;	
			//Иначе
				ЗаполнитьУслугиПоЗаявкеНаУслуги(ДанныеЗаполнения, ДокОбъект);
			//КонецЕсли; 
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПредпоступлениеПоКомплектации") Тогда
			
			//
			
			ДокОбъект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
			ДокОбъект.СтатьяДДС 		 = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("230107");			
		    ДокОбъект.СтатьяЗатрат	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("61022");
			 				

			
			
			ДокОбъект.Оборудование.Очистить();			
			ДокОбъект.Услуги.Очистить();

			Запрос = Новый Запрос("ВЫБРАТЬ
			|	КомплектацияМагазинаПоСделкамСПоставщиком.Ссылка
			|ИЗ
			|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком КАК КомплектацияМагазинаПоСделкамСПоставщиком
			|ГДЕ
			|	КомплектацияМагазинаПоСделкамСПоставщиком.Магазин = &Магазин
			|	И КомплектацияМагазинаПоСделкамСПоставщиком.Проведен");
			
			Запрос.УстановитьПараметр("Магазин", ДанныеЗаполнения.Магазин);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ДокОбъект.АК_КомплектацияМагазинаПоСделкамСПоставщиком = Выборка.Ссылка;	
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			                      |	ПредпоступлениеПоКомплектацииТовары.Количество,
			                      |	ПредпоступлениеПоКомплектацииТовары.Цена КАК Сумма,
			                      |	ПредпоступлениеПоКомплектацииТовары.Сделка,
			                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка КАК Предпоступление,
			                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка.Магазин КАК ТорговаяТочка,
			                      |	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			                      |	ПредпоступлениеПоКомплектацииТовары.СуммаНДС
			                      |ИЗ
			                      |	Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
			                      |ГДЕ
			                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка = &Ссылка");
			
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МассивРаспределенияНДС = Новый Массив;
				
				Для Сч = 1 По Выборка.Количество Цикл
					МассивРаспределенияНДС.Добавить(1);
				КонецЦикла;
				
				МассивРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаНДС, МассивРаспределенияНДС);			
				
				//
				Для Сч = 1 По Выборка.Количество Цикл
					НоваяСтрока = ДокОбъект.Оборудование.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если МассивРаспределенияНДС<>Неопределено Тогда
						НоваяСтрока.СуммаНДС = МассивРаспределенияНДС[Сч-1];					
					КонецЕсли; 
				КонецЦикла;   
				
				Если Выборка.Количество<1 Тогда
					НоваяСтрока = ДокОбъект.Оборудование.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;	
			КонецЦикла;   
			
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
			ДокОбъект.ЗаявкаНаРсходованиеСредств	= ДанныеЗаполнения;
			ДокОбъект.СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетов;
		КонецЕсли; 
		
	КонецЕсли; 	
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьУслугиПоЗаявкеНаУслуги(ДанныеЗаполнения, ДокОбъект)
	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка"		, ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.Номенклатура,
	|	ЗаявкаНаУслугиМатериалыУслуги.Количество,
	|	ЗаявкаНаУслугиМатериалыУслуги.Цена,
	|	ЗаявкаНаУслугиМатериалыУслуги.Сумма,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтавкаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.СуммаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.ЦФО,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов
	|ПОМЕСТИТЬ ВсеДанные
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДанные.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ВсеДанные.СтруктурнаяЕдиница КАК Субконто1,
	|	ВсеДанные.СтатьяДДСОсновнаяСтатьяДоходовРасходов КАК Субконто2,
	|	ВсеДанные.ЦФО КАК Субконто3,
	|	ВЫБОР
	|		КОГДА ВсеДанные.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	ВсеДанные КАК ВсеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДанные.СтатьяДДСОсновнаяСтатьяДоходовРасходов,
	|	ВсеДанные.ЦФО,
	|	ВЫБОР
	|		КОГДА ВсеДанные.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВсеДанные.СтруктурнаяЕдиница,
	|	ВсеДанные.СтруктурнаяЕдиница";
	
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//ДокОбъект.Услуги.Загрузить(ТаблицаЗапроса);
	
	Если ТаблицаЗапроса.Количество() = 1 Тогда 
		Для Каждого СтрокаТабличнойЧасти Из ДокОбъект.Услуги Цикл
			Если СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТаблицаЗапроса[0]);
			Иначе
				СтрокаТабличнойЧасти.ТорговаяТочка = ТаблицаЗапроса[0].ТорговаяТочка;				
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли; 

	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ДокОбъект.СтатьяЗатрат = ТаблицаЗапроса[0].Субконто2;
	КонецЕсли;
	
	//СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	//Для Каждого СтрокаТабличнойЧасти Из ДокОбъект.Услуги Цикл
	//	СтрокаТабличнойЧасти.СчетЗатратБУ = СчетЗатратБУ;
	//	 СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
	//	//ДокОбъект.ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	//КонецЦикла;
	
	ДокОбъект.ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры	

Процедура ЗаполнитьОборудованиеПоЗаявкеНаУслуги(ДанныеЗаполнения, ДокОбъект)
	
    //
	Если ДанныеЗаполнения.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаТЧ = ДанныеЗаполнения.Услуги[0];
	
	Для Каждого НоваяСтрока Из ДокОбъект.Оборудование Цикл
		
		//
		//НоваяСтрока.Номенклатура 		= СтрокаТЧ.Номенклатура;
		//НоваяСтрока.ОсновноеСредство 	= Справочники.ОсновныеСредства.НайтиПоРеквизиту("Номенклатура", НоваяСтрока.Номенклатура);
		//НоваяСтрока.ИнвентарныйНомер 	= НоваяСтрока.ОсновноеСредство.ИнвентарныйНомер;
		//НоваяСтрока.ЗаводскойНомер 		= НоваяСтрока.ОсновноеСредство.ЗаводскойНомер;   
		//
		//НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
		//НоваяСтрока.СтавкаНДС 	= СтрокаТЧ.СтавкаНДС;
		//
		//ДокОбъект.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокОбъект.ВариантРасчетаНДС);
		
		//НоваяСтрока.СчетУчетаБУ 			= ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;
		//НоваяСтрока.СчетУчетаЗабалансовый 	= ПланыСчетов.Финансовый.ККМ;
		НоваяСтрока.Инвестиция				= Истина;
		НоваяСтрока.ТорговаяТочка 			= СтрокаТЧ.СтруктурнаяЕдиница;
		
	КонецЦикла;
	
	ДокОбъект.ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура СвернутьКомплекты(ДокОбъект)
	
	ИсходнаяТЧ = ДокОбъект.Услуги.Выгрузить();
	НоваяТЧ = 	ДокОбъект.Услуги.ВыгрузитьКолонки();
	
	ДокОбъект.Услуги.Очистить();
	
	СтрокиКомплекты = Новый Массив;
	СтрокиКомплектующие = Новый Массив;
	
	Для Каждого Строка Из ИсходнаяТЧ Цикл
		Если НЕ Строка.НоменклатураПоставщика.ВходитВКомплект Тогда
			НоваяСтрока = НоваяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			СтрокиКомплекты.Добавить(Строка);
		Иначе
			СтрокиКомплектующие.Добавить(Строка);	
		КонецЕсли;
	КонецЦикла;  
	
	ТаблицаКомплекты = ИсходнаяТЧ.Скопировать(СтрокиКомплекты);
	ТаблицаКомплекты.Свернуть("НомерСтроки, Номенклатура, НоменклатураПоставщика, СтавкаНДС", "Количество, Сумма, СуммаНДС");
	
	ТаблицаКомплектующие = ИсходнаяТЧ.Скопировать(СтрокиКомплектующие);
	ТаблицаКомплектующие.Свернуть("НоменклатураПоставщика", "Количество, Сумма, СуммаНДС");
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("Комплект");
	ТаблицаРаспределения.Колонки.Добавить("Комплектующая");
	ТаблицаРаспределения.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаРаспределения.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРаспределения.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	СобранныеКомплекты = Новый Массив;
	НеСобранныеКомплекты = Новый Массив;
	
	Для Каждого СтрокаКомплект ИЗ ТаблицаКомплекты Цикл	
		СоставКомплекта  = СтрокаКомплект.НоменклатураПоставщика.СоставКомплекта;
		
		// Проверяем наличие необходимого количества комплектующих
		ЕстьКомплектующие = Истина;
		Для Каждого СтрокаСостава Из СоставКомплекта Цикл
			СтрокаКомплектующей = ТаблицаКомплектующие.Найти(СтрокаСостава.НоменклатураПоставщика);
			Если СтрокаКомплектующей = Неопределено ИЛИ СтрокаКомплектующей.Количество < СтрокаКомплект.Количество * СтрокаСостава.КоличествоВКомплекте Тогда
				Сообщить("По номенклатуре <" + СтрокаКомплект.Номенклатура + "> не удалось собрать указанное количество комплектов ("+ СтрокаКомплект.Количество + ")! Комплектация не выполнена!");
				ЕстьКомплектующие = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;  
		
		// Если все ок - добавим информацию в таблицу для последующего распределения сумм комплектующих
		Если ЕстьКомплектующие Тогда
			Для Каждого СтрокаСостава Из СоставКомплекта Цикл
				СтрокаКомплектующей = ТаблицаКомплектующие.Найти(СтрокаСостава.НоменклатураПоставщика);
				
				СтрокаРаспределения = ТаблицаРаспределения.Добавить();		
				СтрокаРаспределения.Комплект = СтрокаКомплект.Номенклатура;
				СтрокаРаспределения.Комплектующая = СтрокаСостава.НоменклатураПоставщика;
				СтрокаРаспределения.Количество = СтрокаКомплект.Количество * СтрокаСостава.КоличествоВКомплекте;
				
				СтрокаКомплектующей.Количество = СтрокаКомплектующей.Количество - СтрокаРаспределения.Количество;
			КонецЦикла; 
			
			СобранныеКомплекты.Добавить(СтрокаКомплект);
			
		Иначе
			НеСобранныеКомплекты.Добавить(СтрокаКомплект);	
			
		КонецЕсли; 
	КонецЦикла;  
	
	
	// Распределим суммы комплектующих 
	Для Каждого Строка Из ТаблицаКомплектующие Цикл
		Если Строка.Количество > 0 Тогда
			// Такого быть не должно, но на всякий случай учтем при распределении количество "зависшее" без комплекта
			СтрокаРаспределения = ТаблицаРаспределения.Добавить();		
			СтрокаРаспределения.Комплект = Неопределено;
			СтрокаРаспределения.Комплектующая = Строка.НоменклатураПоставщика;
			СтрокаРаспределения.Количество = Строка.Количество;
		КонецЕсли; 
		
		СтрокиПоКомплектующей = ТаблицаРаспределения.НайтиСтроки(Новый Структура("Комплектующая", Строка.НоменклатураПоставщика));
		МассивРаспределения = ТаблицаРаспределения.Скопировать(СтрокиПоКомплектующей).ВыгрузитьКолонку("Количество");
		СуммыКомплектующих = ОбщегоНазначения.РаспределитьПропорционально(Строка.Сумма, МассивРаспределения);
		СуммыНДСКомплектующих = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаНДС, МассивРаспределения);
		
		Для Сч = 0 По СтрокиПоКомплектующей.ВГраница() Цикл
			Если СуммыКомплектующих <> Неопределено Тогда
				СтрокиПоКомплектующей[Сч].Сумма = СуммыКомплектующих[Сч];
			КонецЕсли; 
			
			Если СуммыНДСКомплектующих <> Неопределено Тогда
				СтрокиПоКомплектующей[Сч].СуммаНДС = СуммыНДСКомплектующих[Сч];
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;  
	
	ТаблицаРаспределения.Свернуть("Комплект", "Сумма, СуммаНДС");
	
	// Добавляем данные по комплектам в документ
	Для Каждого Строка Из СобранныеКомплекты  Цикл
		НоваяСтрока = НоваяТЧ.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Содержание = Строка.Номенклатура; 
		
		СтрокаКомплектующих = ТаблицаРаспределения.Найти(Строка.Номенклатура, "Комплект");
		Если СтрокаКомплектующих <> Неопределено Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаКомплектующих.Сумма;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СтрокаКомплектующих.СуммаНДС;
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли; 
	КонецЦикла;  
	
	НоваяТЧ.Сортировать("НомерСтроки");

	ДокОбъект.Услуги.Загрузить(НоваяТЧ);

	// Сообщим позиции, не вошедшие в документ
	Для Каждого Строка Из НеСобранныеКомплекты Цикл
		Сообщить("Позиция <" + Строка.НоменклатураПоставщика + "> (кол-во:"+ Строка.Количество + ") не включена в документ!");
	КонецЦикла;  
	
	Для Каждого Строка Из ТаблицаКомплектующие Цикл
		Если Строка.Количество > 0 Тогда
			Сообщить("Позиция <" + Строка.НоменклатураПоставщика + "> (кол-во:"+ Строка.Количество + ") не включена в документ!");
		КонецЕсли; 
	КонецЦикла;  
	
	
	//СтрокиБезКомплектов = ИсходнаяТЧ.НайтиСтроки(Новый Структура("ВходитВКомплект", Ложь));
	//
	//Для Каждого Строка Из СтрокиБезКомплектов Цикл
	//	НоваяСтрока = ДокОбъект.Услуги.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	//	ИсходнаяТЧ.Удалить(Строка);
	//КонецЦикла;  
	//
	////
	//НоменклатурыКомплекты = ИсходнаяТЧ.Скопировать(,"Номенклатура");
	//НоменклатурыКомплекты.Свернуть("Номенклатура");
	//
	//Для Каждого СтрокаКомплект ИЗ НоменклатурыКомплекты Цикл
	//	СтрокиКомплекта = ИсходнаяТЧ.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКомплект.Номенклатура));
	//	ТаблицаКомплекта = ИсходнаяТЧ.Скопировать(СтрокиКомплекта);
	//	ТаблицаКомплекта.Свернуть("Номенклатура, НоменклатураПоставщика, СтавкаНДС, КоличествоВКомплекте", "Количество, Сумма, СуммаНДС");
	//	
	//	КоличествоКомплектов = Неопределено;
	//	
	//	Для Каждого Строка Из ТаблицаКомплекта Цикл
	//		КоличествоКомплектовСтрока = Строка.Количество / Строка.КоличествоВКомплекте;
	//		
	//		Если КоличествоКомплектовСтрока <> Цел(КоличествоКомплектовСтрока) Тогда
	//			КоличествоКомплектов = Неопределено;
	//			Прервать;
	//		ИначеЕсли КоличествоКомплектов = Неопределено Тогда
	//			КоличествоКомплектов = КоличествоКомплектовСтрока;
	//		ИначеЕсли КоличествоКомплектов <> КоличествоКомплектовСтрока Тогда
	//			КоличествоКомплектов = Неопределено;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла;  
	//	
	//	Если НЕ ЗначениеЗаполнено(КоличествоКомплектов) Тогда
	//		Сообщить("По номенклатуре <" + СтрокаКомплект.Номенклатура + "> не удалось собрать целое количество комплектов!");
	//		
	//		Для Каждого Строка Из СтрокиКомплекта  Цикл
	//			НоваяСтрока = ДокОбъект.Услуги.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	//		КонецЦикла;  
	//		
	//	Иначе
	//		ТаблицаКомплекта.Свернуть("Номенклатура, СтавкаНДС", "Сумма, СуммаНДС");
	//		
	//		НоваяСтрока = ДокОбъект.Услуги.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаКомплекта[0]);
	//		
	//		НоваяСтрока.Количество = КоличествоКомплектов;
	//		НоваяСтрока.Цена = НоваяСтрока.Сумма / КоличествоКомплектов;
	//	КонецЕсли; 

	//КонецЦикла;  
	
КонецПроцедуры 

Процедура СвернутьПоНоменклатуре(ДокОбъект, СворачиватьПоНоменклатуре)
	
	Если СворачиватьПоНоменклатуре Тогда
		ПустыеСтроки = ДокОбъект.Услуги.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())); 
		
		ТаблицаПустые = ДокОбъект.Услуги.Выгрузить(ПустыеСтроки);
		
		Для Каждого Строка Из ПустыеСтроки Цикл
			ДокОбъект.Услуги.Удалить(Строка);
		КонецЦикла;  
		
		ДокОбъект.Услуги.Свернуть("Номенклатура, СтавкаНДС", "Количество, Сумма, СуммаНДС");
		
		Для Каждого Строка Из ДокОбъект.Услуги Цикл
			Строка.Содержание = Строка.Номенклатура;
			Если Строка.Количество > 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли; 
		КонецЦикла;  
		
		Для Каждого Строка Из ТаблицаПустые Цикл
			НоваяСтрока = ДокОбъект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;  
		
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ЗаполнитьСчетаУчета(ДокОбъект)
	
	
	МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ТекущаяДата(), ДокОбъект.Контрагент.СтатьяДвиженияДенежныхСредств);
	
	Если МассивСчетов.Количество() = 1 Тогда
		ДокОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
	Иначе
		ДокОбъект.СчетУчетаРасчетовСКонтрагентом = Планысчетов.Финансовый.РасчетыСПоставщиками;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ДокОбъект.СчетУчетаРасчетовСКонтрагентом = ДокОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;	
	
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ДокОбъект.Услуги Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
				
				СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура);
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СчетаЗатрат);
				
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
					СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
					СтрокаТабличнойЧасти.СчетЗатратБУ = ПолучитьСчетБУПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);	
				КонецЕсли;
				
			Иначе	
				
				СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
				
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
			
		КонецЦикла;  
		
		Для Каждого СтрокаТабличнойЧасти Из ДокОбъект.Оборудование Цикл
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Финансовый.Инвентарь;
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьСчетБУПоСтатистике(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|ПОМЕСТИТЬ втКоличество
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКоличество.СчетЗатратБУ,
		|	втКоличество.Количество КАК Количество
		|ИЗ
		|	втКоличество КАК втКоличество
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат     ВыборкаДетальныеЗаписи.СчетЗатратБУ;
	КонецЦикла;

	Возврат ПланыСчетов.Хозрасчетный.ПрочиеМатериалы;
	
КонецФункции	

Процедура ЗаполнитьДопРасходыПоПартии(ДокОбъект)
	
	//Если НЕ ЗначениеЗаполнено(ДокументПартия) Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//ДокОбъект.Товары.Очистить();
	//
	//ДокОбъект.ЗаполнитьТоварыПоПоступлениюТоваров(ДокументПартия);
	
КонецПроцедуры 

Процедура СоздатьДокументДопРасходов(ДокОбъект, СтруктураФайла)
	
	ДопРасходыСумма = 0;
	ДопРасходыСуммаНДС  = 0;
	ДопРасходыСодержание = "";
	
	Для Каждого Строка Из СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
		Если Строка.НазначениеНоменклатуры = "Допрасход" Тогда
			ДопРасходыСумма = ДопРасходыСумма + Строка.Сумма;
			ДопРасходыСуммаНДС = ДопРасходыСуммаНДС + Строка.НДС.Сумма;		
			ДопРасходыСодержание = ДопРасходыСодержание + СокрЛП(Строка.Название);
			ДопРасходыСодержание = ДопРасходыСодержание + ?(Прав(ДопРасходыСодержание, 1) = ".", " ", ". ")
		КонецЕсли; 
	КонецЦикла;
	
	Если ДопРасходыСумма = 0 Тогда 
		Возврат;
	КонецЕсли; 

	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Контрагент = &Контрагент
	|	И ПоступлениеДопРасходов.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И ПоступлениеДопРасходов.НомерВходящегоДокумента = &НомерВходящегоДокумента");
	
	Запрос.УстановитьПараметр("Контрагент", ДокОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДокОбъект.ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", ДокОбъект.НомерВходящегоДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДопРасходыОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		ДопРасходыОбъект.Товары.Очистить();		
	Иначе
		ДопРасходыОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		ДопРасходыОбъект.ЗаполнитьШапкуДокументаПоОснованию(ДокОбъект.Ссылка);
	КонецЕсли;
	
	ДопРасходыОбъект.ДокументыПолучены = ДокОбъект.ДокументыПолучены;
	ДопРасходыОбъект.СтатусПолученныхДокументов = ДокОбъект.СтатусПолученныхДокументов;
	ДопРасходыОбъект.ЗаявкаНаРсходованиеСредств = Неопределено;
	Если ТипЗнч(ДокОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		ДопРасходыОбъект.ЗаявкаНаРсходованиеСредств = ДокОбъект.ДокументОснование;
	КонецЕсли;	
	
	ДопРасходыОбъект.ЗаполнитьТоварыПоПоступлениюТоваров(ДокОбъект.Ссылка);
	
	ДопРасходыОбъект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	
	ДопРасходыОбъект.Сумма = ДопРасходыСумма;
	ДопРасходыОбъект.СуммаДокумента = ДопРасходыСумма;	
	ДопРасходыОбъект.СуммаНДС  = ДопРасходыСуммаНДС ;
	ДопРасходыОбъект.Содержание = ДопРасходыСодержание ;

	Попытка
		ЭтоНовыйДокумент = ДопРасходыОбъект.ЭтоНовый();
		ДопРасходыОбъект.Записать();
		Сообщить(?(ЭтоНовыйДокумент, "Создан документ ", "Перезаполнен документ ") + строка(ДопРасходыОбъект));
	Исключение
		Сообщить("Не удалось записать документ. "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры 
//---АК SaMi  


//Парсинг и получение струкутры документа
Функция ПодготовитьСтруктуруДокумента(ФайлXML, СтруктураДокумента) Экспорт
	ПрочитатьСтруктуруXML(ФайлXML, СтруктураДокумента);	
	
	СтруктураДокумента.Вставить("ТаблицаДокумента", СтруктураДокумента.ТабличнаяЧасть);
	
	СтруктураДокумента.ДанныеШапки.Вставить("НомерИсправления", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ДатаИсправления", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ПоДокументу", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ВалютаНаименование", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ПредставлениеПоставщика", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ИННПоставщика", СтруктураДокумента.ДанныеШапки.ДанныеПоставщика.ИНН);
	СтруктураДокумента.ДанныеШапки.Вставить("КПППоставщика", СтруктураДокумента.ДанныеШапки.ДанныеПоставщика.КПП);
	
	СтруктураДокумента.ДанныеШапки.Вставить("АдресПоставщика", СтруктураДокумента.ДанныеШапки.ДанныеПоставщика.Адрес);
	
	СтруктураДокумента.ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ПредставлениеПокупателя", "");
	СтруктураДокумента.ДанныеШапки.Вставить("ПредставлениеГрузополучателя", "");
	
	СтруктураДокумента.ДанныеШапки.Вставить("ИННПокупателя", СтруктураДокумента.ДанныеШапки.ДанныеПокупателя.ИНН);
	СтруктураДокумента.ДанныеШапки.Вставить("КПППокупателя", СтруктураДокумента.ДанныеШапки.ДанныеПокупателя.КПП);
	
	СтруктураДокумента.ДанныеШапки.Вставить("ИдентификаторГосКонтракта", "");
	СтруктураДокумента.ДанныеШапки.Вставить("АдресПокупателя", СтруктураДокумента.ДанныеШапки.ДанныеПокупателя.Адрес);
	
	
	СтруктураДокумента.ДанныеШапки.Вставить("НДСИсчисляетсяНалоговымАгентом", Ложь);
	СтруктураДокумента.ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	
	
		
	
	
КонецФункции

Функция ПрочитатьУзелDOM(УзелDOM, Узел) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			//Узел.Вставить("Значение", Уз.ПолныйТекст);
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.Атрибуты.Количество() <> 0 или Уз.ПервыйДочерний <> Неопределено Тогда
				НоваяСтруктура = Новый Структура;
				Атрибуты = Уз.Атрибуты;
				Для каждого Атрибут из Атрибуты Цикл
					Попытка
						НоваяСтруктура.Вставить(Атрибут.ИмяУзла, Атрибут.ЗначениеУзла);
					Исключение
					КонецПопытки;
				КонецЦикла;	
				Если Уз.ИмяУзла = "СтрТабл" Тогда
					Если Узел.Свойство("СтрТабл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СтрТабл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "СведТов" Тогда
					Если Узел.Свойство("СведТов") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СведТов;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);	
				ИначеЕсли Уз.ИмяУзла = "СвТов" Тогда
					Если Узел.Свойство("СвТов") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СвТов;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);							
				ИначеЕсли Уз.ИмяУзла = "ОснПер" Тогда
					Если Узел.Свойство("ОснПер") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.ОснПер;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);												
				ИначеЕсли Уз.ИмяУзла = "Работа" Тогда
					Если Узел.Свойство("Работа") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.Работа;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);													
				ИначеЕсли Уз.ИмяУзла = "ДопАдрЭл" Тогда
					Если Узел.Свойство("ДопАдрЭл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.ДопАдрЭл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "Параметр" Тогда            //сбис Никифоров-->
					Если Узел.Свойство("Параметр") = Ложь Тогда
						//МассивСтрок = Новый Массив;
						Параметр = Новый Структура;//сбис Никифоров    
					Иначе
						Параметр = Узел.Параметр;//сбис Никифоров
					КонецЕсли;    
					//МассивСтрок.Добавить(НоваяСтруктура);
					//Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
					Попытка
						Параметр.Вставить(СтрЗаменить(СтрЗаменить(НоваяСтруктура.Имя,"-","")," ",""), НоваяСтруктура.Значение);
						Узел.Вставить(Уз.ИмяУзла, Параметр);           //сбис Никифоров <--
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(Уз.ИмяУзла, 6) = "Список" Тогда
					Если Уз.ПервыйДочерний <> Неопределено Тогда
						мУз = УЗ.ПервыйДочерний;
						ИмяУзла = мУз.ИмяУзла;
						МассивСтрок = Новый Массив;
						Пока мУз<>Неопределено Цикл
							ДочУзел = Новый Структура;
							ВложениеУзла = Неопределено;
							ПрочитатьУзелDOM(мУз, ДочУзел);
							Для Каждого Элемент Из ДочУзел Цикл
								ВложениеУзла = Элемент.Значение;
								Прервать;
							КонецЦикла;		
							Если ВложениеУзла<>Неопределено Тогда
								МассивСтрок.Добавить(ВложениеУзла);
							КонецЕсли;
							мУз = мУз.СледующийСоседний;
						КонецЦикла;
						Узел.Вставить(ИмяУзла, МассивСтрок);
					КонецЕсли;
				Иначе	
					Узел.Вставить(Уз.ИмяУзла, НоваяСтруктура);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено и Лев(Уз.ИмяУзла, 6) <> "Список" Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOM(Уз, ДочУзел);
			Если УЗ.РодительскийУзел.ИмяУзла = "СтрТабл" Тогда
				сбисСкопироватьСтруктуру(Узел.СтрТабл[Узел.СтрТабл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "СведТов" Тогда
				сбисСкопироватьСтруктуру(Узел.СведТов[Узел.СведТов.Количество()-1], ДочУзел);	
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "СвТов" Тогда
				сбисСкопироватьСтруктуру(Узел.СвТов[Узел.СвТов.Количество()-1], ДочУзел);	
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "ОснПер" Тогда
				сбисСкопироватьСтруктуру(Узел.ОснПер[Узел.ОснПер.Количество()-1], ДочУзел);						
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "Работа" Тогда
				сбисСкопироватьСтруктуру(Узел.Работа[Узел.Работа.Количество()-1], ДочУзел);		
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "ДопАдрЭл" Тогда
				сбисСкопироватьСтруктуру(Узел.ДопАдрЭл[Узел.ДопАдрЭл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "Параметр" Тогда
				сбисСкопироватьСтруктуру(Узел.Параметр[Узел.Параметр.Количество()-1], ДочУзел);
			Иначе	
				Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			КонецЕсли;	
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Если Лев(Уз.РодительскийУзел.ИмяУзла, 6) = "Список" Тогда
			Прервать;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

Процедура ПрочитатьСтруктуруXML(Файл, СтруктураДокумента, СопоставлятьНоменклатуру = Истина) Экспорт
	
	ПутьКXML = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);
	
	ДанныеПоставщика = Новый Структура("Имя, ИНН, КПП, Адрес, Счет, БИК, КорСчет, НаимБанк");
	ДанныеПокупателя = Новый Структура("Имя, ИНН, КПП, Адрес, Счет, БИК, КорСчет, НаимБанк");
	ДанныеГрузоотправителя = Новый Структура("Имя, ИНН, КПП, Адрес, Счет, БИК, КорСчет, НаимБанк");
	ДанныеГрузополучателя = Новый Структура("Имя, ИНН, КПП, Адрес, Счет, БИК, КорСчет, НаимБанк");
		
	ДанныеШапки = Новый Структура("Номер, Дата, Валюта, ДанныеПоставщика, ДанныеГрузоотправителя, ДанныеПокупателя, ДанныеГрузополучателя, СуммаНДС, СуммаБезНДС, Всего, Основание, МассивНомеровОснования, НомерИспр, ДатаИспр", 
									"","","", ДанныеПоставщика, ДанныеГрузоотправителя, ДанныеПокупателя, ДанныеГрузополучателя);
		
	СтруктураФайла = Новый Структура;
	СтруктураФайлаПрост = Новый Структура;
	
	МассивНомеровОснования = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOM(ДокументДОМ.ПервыйДочерний, СтруктураФайла);	
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	
	Попытка 
		Документ = СтруктураФайла.Файл.Документ;
	Исключение	
		//Возврат СтруктураВозврата;
		Возврат;
	КонецПопытки;
	
	ЭтоСФ = Ложь;
	Функц = "";
	Документ.Свойство("Функция", Функц);
		
	//Подписан
	Подписант = Новый Структура;
	Подписан = "";
	Если Документ.Свойство("Подписант", Подписант) = Истина Тогда
		ЮЛ = Новый Структура;
		Если Подписант.Свойство("ЮЛ", ЮЛ) = Истина Тогда
			Должн = "";
			НаимОрг = "";
			ФИО = Новый Структура("Имя, Фамилия", "", "");
			ЮЛ.Свойство("Должн", Должн);
			ЮЛ.Свойство("НаимОрг", НаимОрг);
			ЮЛ.Свойство("ФИО", ФИО);
			Подписан = Должн + " " + НаимОрг + " " + ФИО.Имя + " " + ФИО.Фамилия;		
		КонецЕсли	
	КонецЕсли;	
	
	СтруктураДокумента.Вставить("Подписан", Подписан);
	  
	
	Если Документ.Свойство("СвСчФакт") = Истина Тогда		
		СвСчФакт = Документ.СвСчФакт;
		СвСчФакт.Свойство("НомерСчФ", ДанныеШапки.Номер);
		СвСчФакт.Свойство("ДатаСчФ", ДанныеШапки.Дата);
		СвСчФакт.Свойство("КодОКВ", ДанныеШапки.Валюта);
		
		ИспрСчФ = "";
		Если СвСчФакт.Свойство("ИспрСчФ", ИспрСчФ) = Истина И ТипЗнч(ИспрСчФ) = Тип("Структура") Тогда
			ИспрСчФ.Свойство("НомИспрСчФ", ДанныеШапки.НомерИспр);
			ИспрСчФ.Свойство("ДатаИспрСчФ", ДанныеШапки.ДатаИспр);
		КонецЕсли;		
		
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвСчФакт, ДанныеПоставщика, "СвПрод");
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвСчФакт, ДанныеПокупателя, "СвПокуп");		
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвСчФакт, ДанныеГрузополучателя, "ГрузПолуч");
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвСчФакт, ДанныеГрузоотправителя, "ГрузОт");	
	ИначеЕсли Документ.Свойство("СвКСчФ") = Истина Тогда
		СвСчФакт = Документ.СвКСчФ;
		СвСчФакт.Свойство("НомерКСчФ", ДанныеШапки.Номер);
		СвСчФакт.Свойство("ДатаКСчФ", ДанныеШапки.Дата);
		СвСчФакт.Свойство("КодОКВ", ДанныеШапки.Валюта);
		
		ИспрСчФ = "";
		Если СвСчФакт.Свойство("ИспрСчФ", ИспрСчФ) = Истина И ТипЗнч(ИспрСчФ) = Тип("Структура") Тогда
			ИспрСчФ.Свойство("НомИспрСчФ", ДанныеШапки.НомерИспр);
			ИспрСчФ.Свойство("ДатаИспрСчФ", ДанныеШапки.ДатаИспр);
		КонецЕсли;		
		
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвКСчФ, ДанныеПоставщика, "СвПрод");
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвКСчФ, ДанныеПокупателя, "СвПокуп");		
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвКСчФ, ДанныеГрузополучателя, "ГрузПолуч");
		ЗаполнитьДанныеПоКонтрагентам(Документ.СвКСчФ, ДанныеГрузоотправителя, "ГрузОт");	
	ИначеЕсли Документ.Свойство("СвДокПРУ") = Истина Тогда
		СвДокПРУ = Документ.СвДокПРУ;
		Если СвДокПРУ.Свойство("ИдентДок") = Истина Тогда
			ИдентДок = СвДокПРУ.ИдентДок;
			ИдентДок.Свойство("НомДокПРУ", ДанныеШапки.Номер);
			ИдентДок.Свойство("ДатаДокПРУ", ДанныеШапки.Дата);
		КонецЕсли;
		
		Если СвДокПРУ.Свойство("ДенИзм") = Истина Тогда
			ДенИзм = СвДокПРУ.ДенИзм;
			ДенИзм.Свойство("КодОКВ", ДанныеШапки.Валюта);
		КонецЕсли;	
		
		Если СвДокПРУ.Свойство("СодФХЖ1") = Истина Тогда
			ЗаполнитьДанныеПоКонтрагентам(СвДокПРУ.СодФХЖ1, ДанныеПоставщика, "Исполнитель");
			ЗаполнитьДанныеПоКонтрагентам(СвДокПРУ.СодФХЖ1, ДанныеПокупателя, "Заказчик");					
		КонецЕсли;		
		
		
		
	ИначеЕсли Документ.Свойство("СвДокПТПрКроме") = Истина И Документ.СвДокПТПрКроме.Свойство("СвДокПТПр") = Истина Тогда
		Если Документ.СвДокПТПрКроме.СвДокПТПр.Свойство("ИдентДок") = Истина Тогда
			ДанныеДокумента = Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок;
			ДанныеДокумента.Свойство("НомДокПТ", ДанныеШапки.Номер);
			ДанныеДокумента.Свойство("ДатаДокПТ", ДанныеШапки.Дата);
		КонецЕсли;
				
		
		Если Документ.СвДокПТПрКроме.СвДокПТПр.Свойство("ДенИзм") = Истина Тогда
			ДанныеДокумента = Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм;
			ДанныеДокумента.Свойство("КодОКВ", ДанныеШапки.Валюта);
		КонецЕсли;
		
		Если Документ.СвДокПТПрКроме.СвДокПТПр.Свойство("СодФХЖ1") = Истина Тогда
			ДанныеДокумента = Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1;
			
			ЗаполнитьДанныеПоКонтрагентам(ДанныеДокумента, ДанныеПоставщика, "Продавец");
			ЗаполнитьДанныеПоКонтрагентам(ДанныеДокумента, ДанныеПокупателя, "Покупатель");		
			ЗаполнитьДанныеПоКонтрагентам(ДанныеДокумента, ДанныеГрузополучателя, "ГрузПолуч");
			ЗаполнитьДанныеПоКонтрагентам(ДанныеДокумента, ДанныеГрузоотправителя, "ГрузОтпр");
			
			
			Если Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Свойство("Основание") = Истина Тогда				
				Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание.Свойство("НаимОсн", ДанныеШапки.Основание);	
				
				НомерОснования = "";
				Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание.Свойство("НомОсн", НомерОснования);
				
				Если ЗначениеЗаполнено(НомерОснования) = Истина Тогда
					МассивНомеровОснования.Добавить(НомерОснования);
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	Если Документ.Свойство("СвПродПер") = Истина И Документ.СвПродПер.Свойство("СвПер") = Истина И Документ.СвПродПер.СвПер.Свойство("ОснПер") = Истина Тогда		
		ТекстОснование = "";
		Для каждого СтрОсн Из Документ.СвПродПер.СвПер.ОснПер Цикл
			НаимОсн = "";
			ДатаОсн = "";
			НомОсн = "";
			
			СтрОсн.Свойство("НаимОсн", НаимОсн);
			СтрОсн.Свойство("ДатаОсн", ДатаОсн);
			СтрОсн.Свойство("НомОсн", НомОсн);
			
			ТекстОснование = ТекстОснование + ?(ЗначениеЗаполнено(ТекстОснование), "; ", "") 
			+ ?(ЗначениеЗаполнено(НаимОсн), СокрЛП(СтрОсн.НаимОсн), "")
			+ ?(ЗначениеЗаполнено(НомОсн), " № " + СтрОсн.НомОсн, "")
			+ ?(ЗначениеЗаполнено(ДатаОсн), " от " + СтрОсн.ДатаОсн, "");
			
			Если ЗначениеЗаполнено(НомОсн) = Истина Тогда
				МассивНомеровОснования.Добавить(НомОсн);
			КонецЕсли;	
		КонецЦикла;	
		
		ДанныеШапки.Основание = ТекстОснование;
	КонецЕсли;	
	
	ДанныеШапки.МассивНомеровОснования = МассивНомеровОснования;
		
		
	
	СтруктураДокумента.Вставить("ДанныеШапки", ДанныеШапки);	
	
	
	
	//ТабличнаяЧасть
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НоменклатураПоставщика");
	ТЗ.Колонки.Добавить("ЕдИзм");	
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("СуммаСУчетомНДС");
	
	ТЗ.Колонки.Добавить("Назначение");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("СтавкаНДССтрока");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	ОписаниеТиповЧ = Новый ОписаниеТипов("Число", , ,КЧ);					
	ТЗ.Колонки.Добавить("КоличествоПринято", ОписаниеТиповЧ);
	
	
	МассивСтрок = Новый Массив;
	
	Попытка  		
		Если Документ.Свойство("ТаблСчФакт") = Истина Тогда //Для счета фактуры
			Если Документ.ТаблСчФакт.Свойство("ВсегоОпл") = Истина Тогда
				ДанныеПоОплате = Документ.ТаблСчФакт.ВсегоОпл;				
				ДанныеПоОплате.Свойство("СтТовБезНДСВсего", СтруктураДокумента.ДанныеШапки.СуммаБезНДС);
				ДанныеПоОплате.Свойство("СтТовУчНалВсего", СтруктураДокумента.ДанныеШапки.Всего);
				ДанныеПоОплате.СумНалВсего.Свойство("СумНал", СтруктураДокумента.ДанныеШапки.СуммаНДС);				
			КонецЕсли;	
			
			Если Документ.ТаблСчФакт.Свойство("СведТов") = Истина Тогда
				ТаблЧасть = Документ.ТаблСчФакт;			
				МассивСтрок = ТаблЧасть.СведТов;  		
			КонецЕсли;	
		ИначеЕсли Документ.Свойство("ТаблКСчФ") = Истина Тогда //Для счета фактуры
			СуммаБезНДС = 0;
			Всего = 0;
			СуммаНДС = 0;
			Если Документ.ТаблКСчФ.Свойство("ВсегоУвел") = Истина Тогда
				ДанныеПоОплате = Документ.ТаблКСчФ.ВсегоУвел;				
				Если ДанныеПоОплате.Свойство("СтТовБезНДСВсего") Тогда					
					Попытка
						СуммаБезНДС = СуммаБезНДС + Число(ДанныеПоОплате.СтТовБезНДСВсего);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если ДанныеПоОплате.Свойство("СтТовУчНалВсего") Тогда
					Попытка
						Всего = Всего + Число(ДанныеПоОплате.СтТовУчНалВсего);
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
				Если ДанныеПоОплате.Свойство("СумНал") И ДанныеПоОплате.СумНал.Свойство("СумНДС") Тогда
					Попытка
						СуммаНДС = СуммаНДС + Число(ДанныеПоОплате.СумНал.СумНДС);
					Исключение
					КонецПопытки;	
				КонецЕсли;				
			КонецЕсли;	
			
			Если Документ.ТаблКСчФ.Свойство("ВсегоУм") = Истина Тогда
				ДанныеПоОплате = Документ.ТаблКСчФ.ВсегоУм;				
				Если ДанныеПоОплате.Свойство("СтТовБезНДСВсего") Тогда					
					Попытка
						СуммаБезНДС = СуммаБезНДС - Число(ДанныеПоОплате.СтТовБезНДСВсего);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если ДанныеПоОплате.Свойство("СтТовУчНалВсего") Тогда
					Попытка
						Всего = Всего - Число(ДанныеПоОплате.СтТовУчНалВсего);
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
				Если ДанныеПоОплате.Свойство("СумНал") И ДанныеПоОплате.СумНал.Свойство("СумНДС") Тогда
					Попытка
						СуммаНДС = СуммаНДС - Число(ДанныеПоОплате.СумНал.СумНДС);
					Исключение
					КонецПопытки;	
				КонецЕсли;				
			КонецЕсли;
			
			СтруктураДокумента.ДанныеШапки.СуммаБезНДС = СуммаБезНДС;
			СтруктураДокумента.ДанныеШапки.Всего = Всего;
			СтруктураДокумента.ДанныеШапки.СуммаНДС = СуммаНДС;
						
			Если Документ.ТаблСчФакт.Свойство("СведТов") = Истина Тогда
				ТаблЧасть = Документ.ТаблСчФакт;			
				МассивСтрок = ТаблЧасть.СведТов;  		
			КонецЕсли;		
		ИначеЕсли Документ.Свойство("СвДокПТПрКроме") = Истина Тогда //Торг-12
			ТаблЧасть = Документ.СвДокПТПрКроме.СодФХЖ2;
			МассивСтрок = ТаблЧасть.СвТов;
			 			
			Если ТаблЧасть.Свойство("Всего") = Истина Тогда
				ТаблЧасть.Всего.Свойство("СтБезНДСВс", СтруктураДокумента.ДанныеШапки.СуммаБезНДС);
				ТаблЧасть.Всего.Свойство("СтУчНДСВс", СтруктураДокумента.ДанныеШапки.Всего);
				ТаблЧасть.Всего.Свойство("СумНДСВс", СтруктураДокумента.ДанныеШапки.СуммаНДС);				
			КонецЕсли;	
			
		ИначеЕсли Документ.Свойство("СвТНО") = Истина Тогда
			ТаблЧасть = Документ.СвТНО.ТН.Таблица;
			МассивСтрок = ТаблЧасть.СвТов;
		ИначеЕсли Документ.Свойство("ТаблДок") = Истина Тогда	
			МассивСтрок = Документ.ТаблДок.СтрТабл;				
		ИначеЕсли Документ.Свойство("СвАктИ") = Истина Тогда	
			МассивСтрок = Документ.СвАктИ.ОписРабот;			
		ИначеЕсли Документ.Свойство("СвДокПРУ") = Истина И Документ.СвДокПРУ.Свойство("СодФХЖ1") Тогда
			МассивСтрок = Документ.СвДокПРУ.СодФХЖ1.ОписРабот.Работа;			
		КонецЕсли;	
	Исключение
	КонецПопытки;
	ЗаполнитьМассивСтрокВТаблицу(МассивСтрок, ТЗ, СтруктураДокумента.Контрагент, СопоставлятьНоменклатуру);
	
	СтруктураДокумента.Вставить("ТабличнаяЧасть", ТЗ);
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки.СуммаНДС) И ТипЗнч(СтруктураДокумента.ДанныеШапки.СуммаНДС) = Тип("Строка") Тогда
		СуммаНДСЧислом = 0;
		Попытка
			СуммаНДСЧислом = Число(СтруктураДокумента.ДанныеШапки.СуммаНДС);
		Исключение			
		КонецПопытки;	
		
		СтруктураДокумента.ДанныеШапки.СуммаНДС = СуммаНДСЧислом;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки.СуммаНДС) И ТипЗнч(СтруктураДокумента.ДанныеШапки.СуммаНДС) = Тип("Число") Тогда
		
	ИначеЕсли ТЗ.Количество() > 0 Тогда
		СуммаНДСЧислом = 0;
		Для каждого СтрТЗ Из ТЗ Цикл			
			Попытка 
				СуммаНДСЧислом = СуммаНДСЧислом + Число(СтрТЗ.СуммаНДС);
			Исключение 				
			КонецПопытки;				
		КонецЦикла;	
		
		СтруктураДокумента.ДанныеШапки.СуммаНДС = СуммаНДСЧислом;
	КонецЕсли;	
	
	//Возврат СтруктураВозврата;
КонецПроцедуры

Процедура сбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = ТипМассив Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКонтрагентам(ИсхДанные, ВыходнаяСтрукутра, ИмяРеквизита)
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("ИдСв") И ИсхДанные[ИмяРеквизита].ИдСв.Свойство("СвЮЛУч") Тогда
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("НаимОрг", ВыходнаяСтрукутра.Имя);
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("ИННЮЛ", ВыходнаяСтрукутра.ИНН);
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("КПП", ВыходнаяСтрукутра.КПП);
	ИначеЕсли ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("ИдСв") И ИсхДанные[ИмяРеквизита].ИдСв.Свойство("СвОрг") И ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.Свойство("СвЮЛ") Тогда
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("НаимОрг", ВыходнаяСтрукутра.Имя);
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("ИННЮЛ", ВыходнаяСтрукутра.ИНН);
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("КПП", ВыходнаяСтрукутра.КПП);	
	КонецЕсли;
	
	
	РеквизитыАдреса = "КодРегион, Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
	
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("Адрес") И ИсхДанные[ИмяРеквизита].Адрес.Свойство("АдрИнф") Тогда
		ИсхДанные[ИмяРеквизита].Адрес.АдрИнф.Свойство("АдрТекст", ВыходнаяСтрукутра.Адрес);			
	ИначеЕсли ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("Адрес") И ИсхДанные[ИмяРеквизита].Адрес.Свойство("АдрРФ") Тогда	
		СтрукутраАдреса = ИсхДанные[ИмяРеквизита].Адрес.АдрРФ;
		
		
		Представление = ?(СтрукутраАдреса.Свойство("Индекс"), СтрукутраАдреса.Индекс + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("КодРегион"), ПолучитьНазваниеРегионаПоКоду(СтрукутраАдреса.КодРегион) + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Район"), СтрукутраАдреса.Район + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Город"), СтрукутраАдреса.Город + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("НаселПункт"), СтрукутраАдреса.НаселПункт + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Улица"), СтрукутраАдреса.Улица + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Дом"), СтрукутраАдреса.Дом + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Корпус"), СтрукутраАдреса.Корпус + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Кварт"), СтрукутраАдреса.Кварт, "");		
		
		
		ВыходнаяСтрукутра.Адрес = Представление;
	КонецЕсли;
	
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("БанкРекв") Тогда
		ИсхДанные[ИмяРеквизита].БанкРекв.Свойство("НомерСчета", ВыходнаяСтрукутра.Счет);					
		Если ИсхДанные[ИмяРеквизита].БанкРекв.Свойство("СвБанк") И ТипЗнч(ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк) = Тип("Структура") Тогда
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("БИК", ВыходнаяСтрукутра.БИК);	
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("КорСчет", ВыходнаяСтрукутра.КорСчет);	
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("НаимБанк", ВыходнаяСтрукутра.НаимБанк);				 
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьМассивСтрокВТаблицу(МассивСтрок, ТЗ, Контрагент, СопоставлятьНоменклатуру = Истина)
	Если ТипЗнч(МассивСтрок) = Тип("Массив") Тогда
		Для каждого ЗначМассива Из МассивСтрок Цикл
			НСтр = ТЗ.Добавить();
			
			НСтр.Назначение = "Услуги/Материалы";
			//Номер строки
			Если ЗначМассива.Свойство("НомТов") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.НомТов;
			ИначеЕсли ЗначМассива.Свойство("НомСтр") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.НомСтр;				
			ИначеЕсли ЗначМассива.Свойство("Номер") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.Номер;					
			ИначеЕсли ЗначМассива.Свойство("ПорНомер") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.ПорНомер;			
			КонецЕсли;	
			
			//Номенкалутра поставщика
			Если ЗначМассива.Свойство("НаимТов") Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.НаимТов; 				
			ИначеЕсли ЗначМассива.Свойство("НаимРабот") = Истина Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.НаимРабот; 				
			ИначеЕсли ЗначМассива.Свойство("Название") = Истина Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.Название; 				
			КонецЕсли;
			
			//Количество
			Если ЗначМассива.Свойство("КолТов") = Истина Тогда
				НСтр.Количество = ЗначМассива.КолТов;
			ИначеЕсли ЗначМассива.Свойство("Нетто") = Истина Тогда
				НСтр.Количество = ЗначМассива.Нетто;				
			ИначеЕсли ЗначМассива.Свойство("Количество") = Истина Тогда
				НСтр.Количество = ЗначМассива.Количество;
			ИначеЕсли ЗначМассива.Свойство("Кол_во") = Истина Тогда
				НСтр.Количество = ЗначМассива.Кол_во;	
			ИначеЕсли ЗначМассива.Свойство("НеттоПередано") = Истина Тогда
				НСтр.Количество = ЗначМассива.НеттоПередано;
			КонецЕсли;				
			
			Нстр.КоличествоПринято = НСтр.Количество;
			
			//Ставка
			Если ЗначМассива.Свойство("СтавкаНДС") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.СтавкаНДС;
			ИначеЕсли ЗначМассива.Свойство("НалСт") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.НалСт;
			ИначеЕсли ЗначМассива.Свойство("НДС") = Истина И ТипЗнч(ЗначМассива.НДС) = Тип("Структура") И ЗначМассива.НДС.Свойство("Ставка") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.НДС.Ставка;	
			КонецЕсли;	
			
			//Цена			
			Если ЗначМассива.Свойство("Цена") = Истина Тогда
				НСтр.Цена = ЗначМассива.Цена;
			ИначеЕсли ЗначМассива.Свойство("ЦенаТов") = Истина Тогда
				НСтр.Цена = ЗначМассива.ЦенаТов;
			КонецЕсли;  						
			
			//Сумма без НДС			
			Если ЗначМассива.Свойство("СумБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СумБезНДС;
			ИначеЕсли ЗначМассива.Свойство("СтТовБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтТовБезНДС;
			ИначеЕсли ЗначМассива.Свойство("СтоимБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтоимБезНДС;						
			ИначеЕсли ЗначМассива.Свойство("СуммаБезНал") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СуммаБезНал;							
			ИначеЕсли ЗначМассива.Свойство("СтБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтБезНДС;
			КонецЕсли;  			
			
			
			//Сумма с учетом НДС			
			Если ЗначМассива.Свойство("СумУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СумУчНДС;
			ИначеЕсли ЗначМассива.Свойство("СтТовУчНал") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтТовУчНал;
			ИначеЕсли ЗначМассива.Свойство("СтоимУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтоимУчНДС;				
			ИначеЕсли ЗначМассива.Свойство("Сумма") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.Сумма;										
			ИначеЕсли ЗначМассива.Свойство("СтУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтУчНДС;
			КонецЕсли;  			
			
			//Сумма НДС
			Если ЗначМассива.Свойство("СумНДС") = Истина Тогда
				НСтр.СуммаНДС = ЗначМассива.СумНДС;
			ИначеЕсли ЗначМассива.Свойство("СумНал") = Истина Тогда
				ЗначМассива.СумНал.Свойство("СумНал", НСтр.СуммаНДС);			
			ИначеЕсли ЗначМассива.Свойство("НДС") = Истина И ТипЗнч(ЗначМассива.НДС) = Тип("Структура") И ЗначМассива.НДС.Свойство("Сумма") = Истина Тогда
				НСтр.СуммаНДС = ЗначМассива.НДС.Сумма;	
			КонецЕсли;  			
			
			//Ед.изм
			Если ЗначМассива.Свойство("НаимЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.НаимЕдИзм;
			ИначеЕсли ЗначМассива.Свойство("ДопСведТов") = Истина Тогда
				ЗначМассива.ДопСведТов.Свойство("НаимЕдИзм", НСтр.ЕдИзм);
			ИначеЕсли ЗначМассива.Свойство("НаимЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.НаимЕдИзм;
			ИначеЕсли ЗначМассива.Свойство("ЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.ЕдИзм;	
			КонецЕсли;
			
			//Базовая единица			
			Если ЗначМассива.Свойство("ОКЕИ_Тов") = Истина Тогда
				Если ЗначениеЗаполнено(ЗначМассива.ОКЕИ_Тов) = Истина Тогда
					НСтр.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗначМассива.ОКЕИ_Тов);
				КонецЕсли;
			ИначеЕсли ЗначМассива.Свойство("ОКЕИ") = Истина Тогда
				Если ЗначениеЗаполнено(ЗначМассива.ОКЕИ) = Истина Тогда
					НСтр.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗначМассива.ОКЕИ);
				КонецЕсли;	
			КонецЕсли;	
			
			//Ставка НДС и Номенклатура 1с
			НСтр.СтавкаНДС = ПарсингСтавкиНДС(НСтр.СтавкаНДССтрока);		
			Если СопоставлятьНоменклатуру = Истина Тогда
				НСтр.Номенклатура = ПоискНоменклатурыПоставщика(Контрагент, НСтр.НоменклатураПоставщика, НСтр.БазоваяЕдиницаИзмерения);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(НСтр.Номенклатура) = Истина И ТипЗнч(НСтр.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ЗначениеЗаполнено(НСтр.БазоваяЕдиницаИзмерения) = Истина Тогда							
					НСтр.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", НСтр.БазоваяЕдиницаИзмерения,, НСтр.Номенклатура);
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НСтр.ЕдиницаИзмерения) = Ложь Тогда
					НСтр.ЕдиницаИзмерения = НСтр.Номенклатура.ЕдиницаХраненияОстатков;
				КонецЕсли;	
				
				Если НСтр.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда
					НСтр.Назначение = "Товары";
				ИначеЕсли НСтр.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда	
					НСтр.Назначение = "Оборудование";
				Иначе					
					НСтр.Назначение = "Услуги/Материалы";	
				КонецЕсли;				
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Классификатор = КлассификаторСубъектовРФ();
	Вариант = Классификатор.Найти(ЧисловойКодРегиона, "КодСубъектаРФ");
	Если Вариант = Неопределено Тогда
		// Не нашли
		Возврат "";
	КонецЕсли;
	
	Возврат Вариант.Наименование + " " + Вариант.Сокращение;


КонецФункции

Функция КлассификаторСубъектовРФ()
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Обработки.ЭДО_Интерфейс.ПолучитьМакет("КлассификаторСубъектовРФ").ПолучитьТекст());
	Результат = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Возврат Результат;

КонецФункции


//Печать документов

Функция ПечатьТабличногоДокумента(МассивОбъектов) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура981";
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Ссылка,
	|	ЭДО_ВходящийДокумент.ВерсияДанных,
	|	ЭДО_ВходящийДокумент.ПометкаУдаления,
	|	ЭДО_ВходящийДокумент.Номер,
	|	ЭДО_ВходящийДокумент.Дата,
	|	ЭДО_ВходящийДокумент.Проведен,
	|	ЭДО_ВходящийДокумент.ИдентификаторДокумента,
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета,
	|	ЭДО_ВходящийДокумент.КаналОбмена,
	|	ЭДО_ВходящийДокумент.Организация,
	|	ЭДО_ВходящийДокумент.КонтрагентЭДО,
	|	ЭДО_ВходящийДокумент.Статус,
	|	ЭДО_ВходящийДокумент.ТипДокумента,
	|	ЭДО_ВходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.СуммаДокумента,
	|	ЭДО_ВходящийДокумент.СуммаНДС,
	|	ЭДО_ВходящийДокумент.ФайлXML,
	|	ЭДО_ВходящийДокумент.ФайлPDF,
	|	ЭДО_ВходящийДокумент.ФайлXML_Верифицированный,
	|	ЭДО_ВходящийДокумент.ПредставлениеДокумента,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК НашТипДокумента,
	|	ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Для каждого Стр Из ТЗ Цикл
		ТабДокументВрем = Неопределено;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Контрагент", Стр.Контрагент);
		СтруктураДокумента.Вставить("ФайлXML", Стр.ФайлXML);
		
		ПодготовитьСтруктуруДокумента(Стр.ФайлXML, СтруктураДокумента);
		
		Если Стр.НашТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			ТабДокументВрем = ПечатьСчетовФактур981(СтруктураДокумента);
		ИначеЕсли Стр.НашТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
			ТабДокументВрем = ПечатьУПД(СтруктураДокумента);
		КонецЕсли;
		
		Если ТабДокументВрем = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ТабДокументВрем);
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ПечатьСчетовФактур981(СтруктураДокумента) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура981";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = Обработки.ЭДО_Интерфейс.ПолучитьМакет("ПФ_СФ_981");
	
	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, СтруктураДокумента, );
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьУПД(СтруктураДокумента) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = Обработки.ЭДО_Интерфейс.ПолучитьМакет("ПФ_УПД");
	
	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, СтруктураДокумента, Истина);
	
	Возврат ТабДокумент;
	
КонецФункции





Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Процедура УстановкаМинимальныхПолейДляПечати(ТабличныйДокумент)

	// Принудительная установка минимальных полей
	Если ТабличныйДокумент.ПолеСлева < 10 Тогда
		ТабличныйДокумент.ПолеСлева = 10;
	КонецЕсли; 
	
	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеПоляСправа = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
		
	Если ТабличныйДокумент.ПолеСправа < ЗначениеПоляСправа Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеПоляСправа;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли; 	

КонецПроцедуры

Функция НовыйТаблицаСчетовФактур()
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	Возврат ТаблицаСчетовФактур;
КонецФункции

Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	Попытка 
		РезультатПроверки = ТабДокумент.ПроверитьВывод(СтрокаСПодвалом);
	Исключение
		РезультатПроверки = Истина;
	КонецПопытки;	
	
	
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиСчетаФактуры1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь) Экспорт
	
	
	ТаблицаСчетовФактур = НовыйТаблицаСчетовФактур();
	
	ДанныеСчетаФактуры = Новый Структура(
		"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,ИспользуетсяПостановлениеНДС1137,НеподтверждениеНулевойСтавки,СводныйКомиссионный");

	
	
	//Пока ВыборкаСФ.Следующий() Цикл
	//	
	//			
	//	КолонкиГруппировок = ""
	//		+ "Товар,"
	//		+ "ТоварКод,"
	//		+ "ТоварКодТНВЭД,"
	//		+ "ТоварНаименование,"
	//		+ "СтранаПроисхождения,"
	//		+ "ПредставлениеСтраны,"
	//		+ "СтранаПроисхожденияКод,"
	//		+ "НомерГТД,"
	//		+ "ПредставлениеГТД,"
	//		+ "РегистрационныйНомерТД,"
	//		+ "ЕдиницаИзмерения,"
	//		+ "ЕдиницаИзмеренияКод,"
	//		+ "ЕдиницаИзмеренияНаименование,"
	//		+ "Цена,"
	//		+ "СтавкаНДС,"
	//		+ "КонтрагентСводныйСФ,"
	//		+ "Акциз,"
	//		+ "НомерСтроки,"
	//		+ "НомерТабЧасти";
	//	
	//	КолонкиСуммирования = ""
	//		+ "Количество,"
	//		+ "Всего,"
	//		+ "Стоимость,"
	//		+ "СуммаНДС,"
	//		+ "ВсегоРуб,"
	//		+ "НДСРуб,"
	//		+ "СуммаБезНДСРуб";
	//	
	//	ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	//	
	//	ДанныеШапки = ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД);
	//	
	//	СчетФактура                    = ТаблицаСчетовФактур.Добавить();
	//	СчетФактура.Дата               = ВыборкаСФ.Дата;
	//	СчетФактура.СчетФактура        = ВыборкаСФ.СчетФактура;
	//	СчетФактура.ВидСчетаФактуры    = ВыборкаСФ.ВидСчетаФактуры;
	//	СчетФактура.СчетФактураБезНДС  = ВыборкаСФ.СчетФактураБезНДС;
	//	СчетФактура.ДанныеШапки        = ДанныеШапки;
	//	СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
	//	СчетФактура.ДокументыОснования = ДокументыОснования;
	//	СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
	//	
	//КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки

	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	
	Если ЭтоУниверсальныйПередаточныйДокумент Тогда
		
		НомерСчетаФактуры = "Универсальный передаточный документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = ДанныеШапки.Номер;
		ОбластьМакета.Параметры.Дата  = Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.НомерИсправления = ДанныеШапки.НомерИсправления;
		ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.ПоДокументу = ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеГрузоотправителя;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеГрузополучателя;
		
	Иначе
		
		НомерСчетаФактуры = "Счет-фактура № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + ДанныеШапки.НомерИсправления + " от " + Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " + ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ДанныеШапки.ПредставлениеГрузоотправителя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " + ДанныеШапки.ПредставлениеГрузополучателя;
		ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу № " + ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " + ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = "Адрес: " + ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	

	ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
	Если ЭтоУниверсальныйПередаточныйДокумент Тогда 
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеШапки.ИдентификаторГосКонтракта;
	Иначе
		////Если ВерсияПостановления1137 >= 4 Тогда
		ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'");
		//Иначе
		//	ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
		//КонецЕсли;
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовкаГосконтракт, ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	// Вывод заголовка таблицы

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод табличной части
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	КоличествоСтраниц = 1;
	
	СчетФактураБезНДС = Истина;
	НДСНеВыставляетя  = Истина;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		СтрокаДокумента.СуммаНДС = Число(СтрокаДокумента.СуммаНДС);
		СтрокаДокумента.СуммаСУчетомНДС = Число(СтрокаДокумента.СуммаСУчетомНДС);
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		
		//Если ВерсияПостановления1137 >= 4 Тогда
			Если ЭтоУниверсальныйПередаточныйДокумент Тогда
				СтрокаДокумента.Акциз = "без
					|акциза";
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(СтрокаДокумента.РегистрационныйНомерТД) Тогда
			//	СтрокаДокумента.ПредставлениеГТД = СтрокаДокумента.РегистрационныйНомерТД;
			//Иначе
			//	СтрокаДокумента.ПредставлениеГТД = "";
			//	СтрокаДокумента.ПредставлениеСтраны = "";
			//КонецЕсли;
		//КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "--";
			Если СтрокаДокумента.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
		КонецЕсли;
		
		//ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВыборкаСФ.ВидСчетаФактуры);
		
		//Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		//	ОбластьМакета.Параметры.СтавкаНДС = НадписьСтавкаНДСИсчисляетсяНалоговымАгентом();
		//	ОбластьМакета.Параметры.СуммаНДС  = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		//	ОбластьМакета.Параметры.Всего     = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
		//	ОбластьМакета.Параметры.Стоимость = СтрокаДокумента.Стоимость;
		//КонецЕсли;
		
		Если НЕ ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент) Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СчетФактураБезНДС = СчетФактураБезНДС И СтрокаДокумента.СуммаНДС = 0
			И СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		НДСНеВыставляетя = НДСНеВыставляетя И СтрокаДокумента.СуммаНДС = 0
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС);
		
	КонецЦикла;

	ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	
	// Вывод итоговых сумм

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("СуммаСУчетомНДС");
	//ИначеЕсли ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
	//      ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
	//      ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
	//	ОбластьМакета.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("СуммаСУчетомНДС");
	КонецЕсли;
	
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		//ОбластьМакета.Параметры.ИтогоСуммаНДС = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
	ИначеЕсли НДСНеВыставляетя Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
	ИначеЕсли СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ДанныеШапки.НДСИсчисляетсяНалоговымАгентом Тогда
		//ОбластьМакета.Параметры.ИтогоВсего = НадписьСуммаНДСИсчисляетсяНалоговымАгентом();
	Иначе
		ОбластьМакета.Параметры.ИтогоВсего = ТаблицаДокумента.Итог("СуммаСУчетомНДС");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод подвала
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц, 
		ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод информации о комиссионере по договорам комиссии на закупку
	
	Если НЕ ЭтоУниверсальныйПередаточныйДокумент И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
	
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = ДанныеШапки.ПредставлениеКомиссионера;
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЕсли;
	
КонецПроцедуры



//Прикрепляет заявку или документ
//Получается список заявок (которые не входят в ПТУ или ПДР)
//Получается список документов (по номеру/дате/сумме/орг/контр)
//Если нашли заявку, но не нашли ПТУ/ПДР делается запись в ЭДО_Пакет
//Если нашли документы - делается записи в ЭДО_Сопоставление документов
Процедура ПоискИПрикрепленияЗаявокИПрикрепленныхДокументовПоИДПакета(ИДПакета, ИзменятьРеквизиты = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_Пакеты.ИдентификаторПакета,
	|	ЭДО_Пакеты.Организация,
	|	ЭДО_Пакеты.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_Пакеты.СуммаПакета
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета
	|	И ЭДО_Пакеты.Заявка.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_ВходящийДокумент.Организация,
	|	ЭДО_ВходящийДокумент.Номер,
	|	ЭДО_ВходящийДокумент.Дата,
	|	ЭДО_ВходящийДокумент.СуммаДокумента,
	|	ЭДО_ВходящийДокумент.Ссылка,
	|	ЭДО_ВходящийДокумент.ФайлXML,
	|	ЭДО_ВходящийДокумент.ФайлXML_Верифицированный,
	|	ЭДО_ВходящийДокумент.СуммаНДС,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ВидДокумента
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|		ПО ЭДО_ВходящийДокумент.Ссылка = ЭДО_СопоставлениеДокументов.ДокументЭДО
	|			И ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента = ЭДО_СопоставлениеДокументов.ВидДокумента
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|	И ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент.Ссылка ЕСТЬ НЕ NULL 
	|	И ЭДО_ВходящийДокумент.Организация.Ссылка ЕСТЬ НЕ NULL 
	|	И ЭДО_ВходящийДокумент.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ЭДО_ВходящийДокумент.Статус.Статус В (ЗНАЧЕНИЕ(Перечисление.ЭДО_СтатусыДокументов.Отклонен), ЗНАЧЕНИЕ(Перечисление.ЭДО_СтатусыДокументов.УдаленКонтрагентом))
	|	И ЭДО_СопоставлениеДокументов.Документ.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент,
	|	ЭДО_ВходящийДокумент.Организация,
	|	ЭДО_ВходящийДокумент.Номер,
	|	ЭДО_ВходящийДокумент.Дата,
	|	ЭДО_ВходящийДокумент.СуммаДокумента,
	|	ЭДО_ВходящийДокумент.Ссылка,
	|	ЭДО_ВходящийДокумент.ФайлXML,
	|	ЭДО_ВходящийДокумент.ФайлXML_Верифицированный,
	|	ЭДО_ВходящийДокумент.СуммаНДС,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента";
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИДПакета);
		
	МассивРезультат = Запрос.ВыполнитьПакет();
	
	ТЗДанныеПакета = МассивРезультат[0].Выгрузить();
	ТЗДанныеДокументов = МассивРезультат[1].Выгрузить();
	
	
	СписокЗаявок = Новый СписокЗначений;
	
	Если ТЗДанныеПакета.Количество() > 0 Тогда
		СписокЗаявок = ПолучитьСписокПодходящихЗаявок(ТЗДанныеПакета[0], Ложь);
	КонецЕсли;		
	
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументЭДО");
	ТаблицаДокументов.Колонки.Добавить("Документ");
	
	
	ТЗДанныеДокументов.Колонки.Добавить("СтруктураДокумента");
	
	МассивНомеровПакета = Новый Массив;
	
	Для каждого ДокументЭДО Из ТЗДанныеДокументов Цикл
		Если ЗначениеЗаполнено(ДокументЭДО.Ссылка) Тогда			
			ВерификацияДокумента(ДокументЭДО);				
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДокументЭДО.СтруктураДокумента) И ТипЗнч(ДокументЭДО.СтруктураДокумента) = Тип("Структура") И ДокументЭДО.СтруктураДокумента.Свойство("ДанныеШапки") = Истина Тогда
			ДанныеШапки = ДокументЭДО.СтруктураДокумента.ДанныеШапки;
			
			Если ТипЗнч(ДанныеШапки) = Тип("Структура") И ДанныеШапки.Свойство("МассивНомеровОснования") = Истина И ТипЗнч(ДанныеШапки.МассивНомеровОснования) = Тип("Массив") Тогда
				Для каждого ЗначМассива Из ДанныеШапки.МассивНомеровОснования Цикл
					Если МассивНомеровПакета.Найти(СокрЛП(ЗначМассива)) = Неопределено Тогда
						МассивНомеровПакета.Добавить(СокрЛП(ЗначМассива));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		Если МассивНомеровПакета.Найти(ДокументЭДО.Номер) = Неопределено Тогда
			МассивНомеровПакета.Добавить(ДокументЭДО.Номер);
		КонецЕсли;	
			
		ДокументЭДОСтруктура = Новый Структура("Контрагент, Организация, Номер, Дата, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(ДокументЭДОСтруктура, ДокументЭДО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученный.ДокументОснование,
		|	МАКСИМУМ(СчетФактураПолученный.НомерВходящегоДокумента) КАК НомерВходящегоДокумента,
		|	МАКСИМУМ(СчетФактураПолученный.ДатаВходящегоДокумента) КАК ДатаВходящегоДокумента
		|ПОМЕСТИТЬ ВТ_ВНШЕНИЙ_СФ
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование.Организация = &Организация
		|	И СчетФактураПолученный.ДокументОснование.Контрагент = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученный.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭДО_СопоставлениеДокументов.Документ
		|ПОМЕСТИТЬ ВТ_ДанныеЭДО_ПДР
		|ИЗ
		|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
		|ГДЕ
		|	ЭДО_СопоставлениеДокументов.ВидДокумента = &ВидДокумента
		|	И ЭДО_СопоставлениеДокументов.Документ ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И ЭДО_СопоставлениеДокументов.Документ.Организация = &Организация
		|	И ЭДО_СопоставлениеДокументов.Документ.Контрагент = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭДО_СопоставлениеДокументов.Документ
		|ПОМЕСТИТЬ ВТ_ДанныеЭДО_ПТУ
		|ИЗ
		|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
		|ГДЕ
		|	ЭДО_СопоставлениеДокументов.ВидДокумента = &ВидДокумента
		|	И ЭДО_СопоставлениеДокументов.Документ ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И ЭДО_СопоставлениеДокументов.Документ.Организация = &Организация
		|	И ЭДО_СопоставлениеДокументов.Документ.Контрагент = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеДопРасходовТовары.Партия,
		|	ПоступлениеДопРасходовТовары.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА ПоступлениеДопРасходовТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|				ТОГДА ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
		|			ИНАЧЕ ПоступлениеДопРасходовТовары.СуммаРаспределено + ПоступлениеДопРасходовТовары.СуммаНДСРаспределено
		|		КОНЕЦ) КАК СуммаДопРасходов,
		|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДСРаспределено) КАК СуммаНДСРаспределено,
		|	СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ПДР_Общий
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	ПоступлениеДопРасходовТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеДопРасходовТовары.Ссылка.Проведен = ИСТИНА
		|	И НЕ ПоступлениеДопРасходовТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					ЭДО_СопоставлениеДокументов.Документ
		|				ИЗ
		|					ВТ_ДанныеЭДО_ПДР КАК ЭДО_СопоставлениеДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеДопРасходовТовары.Партия,
		|	ПоступлениеДопРасходовТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПДР_Общий.Партия,
		|	СУММА(ВТ_ПДР_Общий.СуммаДопРасходов) КАК СуммаДопРасходов,
		|	СУММА(ВТ_ПДР_Общий.СуммаНДСРаспределено) КАК СуммаНДСРаспределено,
		|	СУММА(ВТ_ПДР_Общий.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_ПДР
		|ИЗ
		|	ВТ_ПДР_Общий КАК ВТ_ПДР_Общий
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПДР_Общий.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПДР_Общий.Ссылка,
		|	СУММА(ВТ_ПДР_Общий.СуммаДопРасходов) КАК СуммаДопРасходов,
		|	СУММА(ВТ_ПДР_Общий.СуммаНДСРаспределено + ВТ_ПДР_Общий.СуммаНДС) КАК СуммаНДСРаспределено
		|ПОМЕСТИТЬ ВТ_ПДР_Ссылка
		|ИЗ
		|	ВТ_ПДР_Общий КАК ВТ_ПДР_Общий
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПДР_Общий.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗ_НДС.Ссылка,
		|	СУММА(ВЗ_НДС.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|		СУММА(ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|	ГДЕ
		|		ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		|		И ПоступлениеТоваровУслугТовары.Ссылка.Организация = &Организация
		|		И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &ДатаНач
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслугТовары.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПоступлениеТоваровУслугУслуги.Ссылка,
		|		СУММА(ПоступлениеТоваровУслугУслуги.СуммаНДС)
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|	ГДЕ
		|		ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент = &Контрагент
		|		И ПоступлениеТоваровУслугУслуги.Ссылка.Организация = &Организация
		|		И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &ДатаНач
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслугУслуги.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПоступлениеТоваровУслугОборудование.Ссылка,
		|		СУММА(ПоступлениеТоваровУслугОборудование.СуммаНДС)
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|	ГДЕ
		|		ПоступлениеТоваровУслугОборудование.Ссылка.Контрагент = &Контрагент
		|		И ПоступлениеТоваровУслугОборудование.Ссылка.Организация = &Организация
		|		И ПоступлениеТоваровУслугОборудование.Ссылка.Дата >= &ДатаНач
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслугОборудование.Ссылка) КАК ВЗ_НДС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЗ_НДС.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Документ,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
		|	ЕСТЬNULL(ВТ_ВНШЕНИЙ_СФ.НомерВходящегоДокумента, ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры) КАК НомерВходящегоСчетаФактуры,
		|	ЕСТЬNULL(ВТ_ВНШЕНИЙ_СФ.ДатаВходящегоДокумента, ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры) КАК ДатаВходящегоСчетаФактуры,
		|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ЕСТЬNULL(ВТ_ПДР.СуммаДопРасходов, 0) КАК СуммаДоп,
		|	ЕСТЬNULL(ВТ_ПДР.СуммаНДСРаспределено, 0) КАК СуммаНДСДоп,
		|	ПоступлениеТоваровУслуг.СуммаДокумента + ЕСТЬNULL(ВТ_ПДР.СуммаДопРасходов, 0) КАК ОбщаяСумма,
		|	ПоступлениеТоваровУслуг.ДокументОснование,
		|	ЕСТЬNULL(ВТ_СуммаНДС.СуммаНДС, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(ВТ_СуммаНДС.СуммаНДС, 0) + ЕСТЬNULL(ВТ_ПДР.СуммаНДСРаспределено, 0) КАК ОбщаяСуммаНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПДР КАК ВТ_ПДР
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_ПДР.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_СуммаНДС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВНШЕНИЙ_СФ КАК ВТ_ВНШЕНИЙ_СФ
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_ВНШЕНИЙ_СФ.ДокументОснование
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.Организация = &Организация
		|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеТоваровУслуг.Дата >= &ДатаНач
		|	И НЕ ПоступлениеТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ЭДО_СопоставлениеДокументов.Документ
		|				ИЗ
		|					ВТ_ДанныеЭДО_ПТУ КАК ЭДО_СопоставлениеДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
		|	ЕСТЬNULL(ВТ_ВНШЕНИЙ_СФ.НомерВходящегоДокумента, ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры),
		|	ЕСТЬNULL(ВТ_ВНШЕНИЙ_СФ.ДатаВходящегоДокумента, ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры),
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	0,
		|	0,
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	NULL,
		|	ЕСТЬNULL(ВТ_ПДР.СуммаНДСРаспределено, ПоступлениеТоваровУслуг.СуммаНДС),
		|	ЕСТЬNULL(ВТ_ПДР.СуммаНДСРаспределено, ПоступлениеТоваровУслуг.СуммаНДС)
		|ИЗ
		|	Документ.ПоступлениеДопРасходов КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВНШЕНИЙ_СФ КАК ВТ_ВНШЕНИЙ_СФ
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_ВНШЕНИЙ_СФ.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПДР_Ссылка КАК ВТ_ПДР
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_ПДР.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.Организация = &Организация
		|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеТоваровУслуг.Дата >= &ДатаНач
		|	И НЕ ПоступлениеТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ЭДО_СопоставлениеДокументов.Документ
		|				ИЗ
		|					ВТ_ДанныеЭДО_ПДР КАК ЭДО_СопоставлениеДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		
		Запрос.УстановитьПараметр("Контрагент", ДокументЭДО.Контрагент);
		Запрос.УстановитьПараметр("Организация", ДокументЭДО.Организация);
		Запрос.УстановитьПараметр("ВидДокумента", ДокументЭДО.ВидДокумента);
		
		Если ЗначениеЗаполнено(ДокументЭДОСтруктура.Дата) Тогда
			ДатаНач = НачалоМесяца(ДокументЭДОСтруктура.Дата);		
		Иначе
			ДатаНач = НачалоМесяца(ТекущаяДата());		
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);	
		
		
		МассивФильтров = Новый Массив;
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, ОбщаяСумма, ОбщаяСуммаНДС", СокрЛП(ДокументЭДО.Номер), ДокументЭДО.Дата, ДокументЭДО.СуммаДокумента, ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, ОбщаяСумма, ОбщаяСуммаНДС", СокрЛП(ДокументЭДО.Номер), ДокументЭДО.Дата, ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, СуммаДокумента, СуммаНДС", СокрЛП(ДокументЭДО.Номер), ДокументЭДО.Дата, ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, СуммаДокумента, СуммаНДС", СокрЛП(ДокументЭДО.Номер), ДокументЭДО.Дата, ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, ОбщаяСумма, ОбщаяСуммаНДС", "", "", ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, ОбщаяСумма, ОбщаяСуммаНДС", "", "", ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры, СуммаДокумента, СуммаНДС", "", "", ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));
		МассивФильтров.Добавить(Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, СуммаДокумента, СуммаНДС", "", "", ДокументЭДО.СуммаДокумента,  ДокументЭДО.СуммаНДС));		
		
		ТЗДокументовДляПрикрепления = Запрос.Выполнить().Выгрузить();
		
		Если ТЗДокументовДляПрикрепления.Количество() > 0  Тогда
			Для каждого Фильтр Из МассивФильтров Цикл
				МассивСтрокДокументов = ТЗДокументовДляПрикрепления.НайтиСтроки(Фильтр);
				Если МассивСтрокДокументов.Количество() > 0 Тогда
					Если  МассивСтрокДокументов[0].ОбщаяСумма = МассивСтрокДокументов[0].СуммаДокумента Тогда 
						СтрДокумент = ТаблицаДокументов.Добавить();
						СтрДокумент.ДокументЭДО = ДокументЭДОСтруктура;
						СтрДокумент.Документ = МассивСтрокДокументов[0].Документ;
						Прервать;
					Иначе
						Если Фильтр.Свойство("СуммаДокумента") = Истина Тогда
							СтрДокумент = ТаблицаДокументов.Добавить();
							СтрДокумент.ДокументЭДО = ДокументЭДОСтруктура;
							СтрДокумент.Документ = МассивСтрокДокументов[0].Документ;
							Прервать;   
						Иначе
							ЗапросПДР = Новый Запрос;
							ЗапросПДР.Текст = "ВЫБРАТЬ
							|	ПоступлениеДопРасходовТовары.Ссылка							
							|ИЗ
							|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
							|ГДЕ
							|	ПоступлениеДопРасходовТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
							|	И ПоступлениеДопРасходовТовары.Ссылка.Проведен = ИСТИНА
							|	И НЕ ПоступлениеДопРасходовТовары.Ссылка В
							|				(ВЫБРАТЬ
							|					ЭДО_СопоставлениеДокументов.Документ
							|				ИЗ
							|					РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов)
							|	И ПоступлениеДопРасходовТовары.Партия = &Партия";
							
							ЗапросПДР.УстановитьПараметр("Партия", МассивСтрокДокументов[0].Документ); 
							
							ТЗПДР = ЗапросПДР.Выполнить().Выгрузить();
							Для каждого СтрПДР Из ТЗПДР Цикл								
								СтрДокумент = ТаблицаДокументов.Добавить();
								СтрДокумент.ДокументЭДО = ДокументЭДОСтруктура;
								СтрДокумент.Документ = СтрПДР.Ссылка;								
							КонецЦикла;	
							
							СтрДокумент = ТаблицаДокументов.Добавить();							
							СтрДокумент.ДокументЭДО = ДокументЭДОСтруктура;
							СтрДокумент.Документ = МассивСтрокДокументов[0].Документ;
							Прервать;							
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
	//Обновление основания у пакета после верификации документов
	ЗапросОснование = Новый Запрос;
	ЗапросОснование.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Основание
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета";
	
	ЗапросОснование.УстановитьПараметр("ИдентификаторПакета", ИДПакета);
	
	ТекстОснование = "";
	
	ВыборкаОснование = ЗапросОснование.Выполнить().Выбрать();
	Пока ВыборкаОснование.Следующий() Цикл
		ТекстОснование = ТекстОснование + ВыборкаОснование.Основание + ?(ЗначениеЗаполнено(ВыборкаОснование.Основание), "; ", "");
	КонецЦикла;
	
	ЗаписьПакет = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();
	ЗаписьПакет.ИдентификаторПакета = ИДПакета;
	ЗаписьПакет.Прочитать();
	
	Если ЗаписьПакет.Выбран() = Истина Тогда
		ЗаписьПакет.Основание = СокрЛП(ТекстОснование);
		ЗаписьПакет.Записать();
	КонецЕсли;	
		
	
	
	
	Если СписокЗаявок.Количество() > 0 И ТаблицаДокументов.Количество() = 0 Тогда
		Если СписокЗаявок.Количество() = 1 Тогда
			Для каждого ЗначСписка Из СписокЗаявок Цикл
				Запись = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();
				Запись.ИдентификаторПакета = ИДПакета;
				Запись.Прочитать();
				Запись.Заявка = ЗначСписка.Значение;
				Запись.Записать();
				Прервать;
			КонецЦикла;	
		Иначе      //Если СписокЗаявок.Количество() > 1
			СписокНайденныхПоНомеру = Новый СписокЗначений;
			Для каждого ЗначСписка Из СписокЗаявок Цикл
				ТекНомерСчета = "";
				Если ТипЗнч(ЗначСписка.Значение) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
					ТекНомерСчета = ЗначСписка.Значение.НомерСчета;
				КонецЕсли;	
				
				Для каждого ЗначМассиваНомеров Из МассивНомеровПакета Цикл
					Если Найти(ТекНомерСчета, Прав(ЗначМассиваНомеров, 6)) > 0 Тогда
						СписокНайденныхПоНомеру.Добавить(ЗначСписка.Значение);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			
			Если СписокНайденныхПоНомеру.Количество() = 1 Тогда
				Запись = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();
				Запись.ИдентификаторПакета = ИДПакета;
				Запись.Прочитать();
				Запись.Заявка = СписокНайденныхПоНомеру[0].Значение;
				Запись.Записать(); 
			КонецЕсли;	
		КонецЕсли;			
	ИначеЕсли СписокЗаявок.Количество() = 0 И ТаблицаДокументов.Количество() > 0 Тогда	
		Для каждого СтрДокумент Из ТаблицаДокументов Цикл
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЭДО_ВходящийДокумент.Ссылка,
			|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
			|	ЭДО_ВходящийДокумент.ИдентификаторДокумента,
			|	ЭДО_ВходящийДокумент.ФайлPDF,
			|	ЭДО_ВходящийДокумент.Номер,
			|	ЭДО_ВходящийДокумент.Дата,
			|	ЭДО_ВходящийДокумент.ИдентификаторПакета
			|ИЗ
			|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
			|ГДЕ
			|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
			|	И ЭДО_ВходящийДокумент.Номер = &Номер
			|	И ЭДО_ВходящийДокумент.Дата = &Дата
			|	И ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент = &Контрагент
			|	И ЭДО_ВходящийДокумент.Организация = &Организация
			|	И ЭДО_ВходящийДокумент.СуммаДокумента = &СуммаДокумента";
			
			Запрос.УстановитьПараметр("ИдентификаторПакета", ИДПакета);
			Запрос.УстановитьПараметр("Номер", СтрДокумент.ДокументЭДО.Номер);
			Запрос.УстановитьПараметр("Дата", СтрДокумент.ДокументЭДО.Дата);
			Запрос.УстановитьПараметр("СуммаДокумента", СтрДокумент.ДокументЭДО.СуммаДокумента);
			Запрос.УстановитьПараметр("Контрагент", СтрДокумент.ДокументЭДО.Контрагент);
			Запрос.УстановитьПараметр("Организация", СтрДокумент.ДокументЭДО.Организация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			ТекЗаявка = Документы.ЗаявкаНаУслугиМатериалы.ПустаяСсылка();
			Пока Выборка.Следующий() Цикл
				
				Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
				Запись.Документ = СтрДокумент.Документ;
				Запись.ВидДокумента = Выборка.ТипДокумента;				
				Запись.ДокументЭДО = Выборка.Ссылка;
				Запись.Записать();  
				                     				
				НДок =  СтрДокумент.Документ.ПолучитьОбъект();
				
				ПериодЗакрыт = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(НДок);
				Если ПериодЗакрыт = Ложь Тогда				
					
					Если ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
						
						ВнешняяСФ = НайтиВнешнююСчетФактуру(НДок.Ссылка);
											
						
						НДок.ОтправлятьНаРаспознавание = Ложь;
						
						Если ЗначениеЗаполнено(НДок.ДокументОснование) = Истина И ТипЗнч(НДок.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
							ТекЗаявка = НДок.ДокументОснование;
						КонецЕсли;	
						
						Если Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
							
							Если ВнешняяСФ = Неопределено Тогда							
								Если ЗначениеЗаполнено(НДок.НомерВходящегоСчетаФактуры) = Ложь Тогда
									НДок.НомерВходящегоСчетаФактуры = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоСчетаФактуры) = Ложь Тогда
									НДок.ДатаВходящегоСчетаФактуры = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;
							
							Если ЗначениеЗаполнено(НДок.СчетФактура) = Ложь Тогда
								НДок.СчетФактура = Выборка.ФайлPDF;
							КонецЕсли;	
														
						ИначеЕсли Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
							
							Если ВнешняяСФ = Неопределено Тогда							
								Если ЗначениеЗаполнено(НДок.НомерВходящегоСчетаФактуры) = Ложь Тогда
									НДок.НомерВходящегоСчетаФактуры = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоСчетаФактуры) = Ложь Тогда
									НДок.ДатаВходящегоСчетаФактуры = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(НДок.УПД) = Ложь Тогда
								НДок.УПД = Выборка.ФайлPDF;
							КонецЕсли;	
							
						ИначеЕсли Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
							ИЛИ Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
							
							Если ВнешняяСФ = Неопределено Тогда							
								Если ЗначениеЗаполнено(НДок.НомерВходящегоДокумента) = Ложь Тогда
									НДок.НомерВходящегоДокумента = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоДокумента) = Ложь Тогда
									НДок.ДатаВходящегоДокумента = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(НДок.Акт) = Ложь Тогда
								НДок.Акт = Выборка.ФайлPDF;
							КонецЕсли;
						КонецЕсли; 
						
						НДок.ОбменДанными.Загрузка = Истина;
						Попытка
							НДок.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;	
					ИначеЕсли ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
						
						ВнешняяСФ = НайтиВнешнююСчетФактуру(НДок.Ссылка);

						
						Если Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
							
							Если ВнешняяСФ = Неопределено Тогда	
								Если ЗначениеЗаполнено(НДок.НомерВходящегоСчетаФактуры) = Ложь Тогда
									НДок.НомерВходящегоСчетаФактуры = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоСчетаФактуры) = Ложь Тогда
									НДок.ДатаВходящегоСчетаФактуры = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(НДок.СчетФактура) = Ложь Тогда
								НДок.СчетФактура = Выборка.ФайлPDF;
							КонецЕсли;	
														
						ИначеЕсли Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
							
							Если ВнешняяСФ = Неопределено Тогда								
								
								Если ЗначениеЗаполнено(НДок.НомерВходящегоСчетаФактуры) = Ложь Тогда
									НДок.НомерВходящегоСчетаФактуры = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоСчетаФактуры) = Ложь Тогда
									НДок.ДатаВходящегоСчетаФактуры = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;
						
							Если ЗначениеЗаполнено(НДок.УПД) = Ложь Тогда
								НДок.УПД = Выборка.ФайлPDF;
							КонецЕсли;	
							
						ИначеЕсли Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
							ИЛИ Выборка.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
							
							Если ВнешняяСФ = Неопределено Тогда	
								Если ЗначениеЗаполнено(НДок.НомерВходящегоДокумента) = Ложь Тогда
									НДок.НомерВходящегоДокумента = Выборка.Номер;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НДок.ДатаВходящегоДокумента) = Ложь Тогда
									НДок.ДатаВходящегоДокумента = Выборка.Дата;
								КонецЕсли;	
							КонецЕсли;	
							
							Если ЗначениеЗаполнено(НДок.Акт) = Ложь Тогда
								НДок.Акт = Выборка.ФайлPDF;
							КонецЕсли;
						КонецЕсли;
						
						НДок.ОбменДанными.Загрузка = Истина;
						Попытка
							НДок.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;	
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(Выборка.Ссылка, СтрДокумент.Документ);
				Исключение						
				КонецПопытки;	
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(ТекЗаявка) = Истина Тогда
				Запись = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();
				Запись.ИдентификаторПакета = ИДПакета;
				Запись.Прочитать();
				Запись.Заявка = ТекЗаявка;
				Запись.Записать();
			КонецЕсли;	
		КонецЦикла;	
	ИначеЕсли СписокЗаявок.Количество() > 0 И ТаблицаДокументов.Количество() > 0 Тогда		
		 Возврат;
	ИначеЕсли СписокЗаявок.Количество() = 0 И ТаблицаДокументов.Количество() = 0 Тогда			
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПолучитьСписокПодходящихЗаявок(Структура, ВсеЗаявки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_НомераПакета
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НомерПакета"",
	|	ЭДО_Пакеты.СуммаПакета
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_Пакеты.Заявка
	|ПОМЕСТИТЬ ВТ_ЗаявкиВПакетах
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета <> &ИдентификаторПакета
	|	И ЭДО_Пакеты.Заявка ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_Пакеты.Заявка
	|ПОМЕСТИТЬ ВТ_ПредпоступленияВПакетах
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета <> &ИдентификаторПакета
	|	И ЭДО_Пакеты.Заявка ССЫЛКА Документ.ПредпоступлениеПоКомплектации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалы.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалы.Контрагент = &Контрагент
	|	И ЗаявкаНаУслугиМатериалы.СуммаДокумента В
	|			(ВЫБРАТЬ
	|				ВТ_НомераПакета.СуммаДокумента
	|			ИЗ
	|				ВТ_НомераПакета)
	//|	И НЕ ЗаявкаНаУслугиМатериалы.Ссылка В
	//|				(ВЫБРАТЬ
	//|					ВТ_ЗаявкиВПакетах.Заявка
	//|				ИЗ
	//|					ВТ_ЗаявкиВПакетах)
	|	И ВЫБОР
	|			КОГДА &ВсеЗаявки = ЛОЖЬ
	|				ТОГДА НЕ ЗаявкаНаУслугиМатериалы.Ссылка В
	|							(ВЫБРАТЬ
	|								Документ.ПоступлениеТоваровУслуг.ДокументОснование
	|							ИЗ
	|								Документ.ПоступлениеТоваровУслуг
	|							ГДЕ
	|								НЕ Документ.ПоступлениеТоваровУслуг.ПометкаУдаления)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВсеЗаявки = ЛОЖЬ
	|				ТОГДА НЕ ЗаявкаНаУслугиМатериалы.Ссылка В
	|							(ВЫБРАТЬ
	|								Документ.ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств
	|							ИЗ
	|								Документ.ПоступлениеДопРасходов
	|							ГДЕ
	|								НЕ Документ.ПоступлениеДопРасходов.ПометкаУдаления)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЗаявкаНаУслугиМатериалы.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПредпоступлениеПоКомплектации.Ссылка
	|ИЗ
	|	Документ.ПредпоступлениеПоКомплектации КАК ПредпоступлениеПоКомплектации
	|ГДЕ
	|	ПредпоступлениеПоКомплектации.Контрагент = &Контрагент
	|	И ПредпоступлениеПоКомплектации.СуммаДокумента В
	|			(ВЫБРАТЬ
	|				ВТ_НомераПакета.СуммаДокумента
	|			ИЗ
	|				ВТ_НомераПакета)
	//|	И НЕ ПредпоступлениеПоКомплектации.Ссылка В
	//|				(ВЫБРАТЬ
	//|					ВТ_ПредпоступленияВПакетах.Заявка
	//|				ИЗ
	//|					ВТ_ПредпоступленияВПакетах)
	|	И ПредпоступлениеПоКомплектации.НомерАкта В
	|			(ВЫБРАТЬ
	|				ВТ_НомераПакета.НомерДокумента
	|			ИЗ
	|				ВТ_НомераПакета)
	|	И ВЫБОР
	|			КОГДА &ВсеЗаявки = ЛОЖЬ
	|				ТОГДА НЕ ПредпоступлениеПоКомплектации.Ссылка В
	|							(ВЫБРАТЬ
	|								Документ.ПоступлениеТоваровУслуг.ДокументОснование
	|							ИЗ
	|								Документ.ПоступлениеТоваровУслуг
	|							ГДЕ
	|								НЕ Документ.ПоступлениеТоваровУслуг.ПометкаУдаления)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВсеЗаявки = ЛОЖЬ
	|				ТОГДА НЕ ПредпоступлениеПоКомплектации.Ссылка В
	|							(ВЫБРАТЬ
	|								Документ.ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств
	|							ИЗ
	|								Документ.ПоступлениеДопРасходов
	|							ГДЕ
	|								НЕ Документ.ПоступлениеДопРасходов.ПометкаУдаления)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ПредпоступлениеПоКомплектации.Проведен";
						  
							  
	//Запрос.УстановитьПараметр("Сумма", Структура.СуммаПакета);
	Запрос.УстановитьПараметр("Контрагент", Структура.Контрагент);
	Запрос.УстановитьПараметр("ИдентификаторПакета", Структура.ИдентификаторПакета);
	
	Запрос.УстановитьПараметр("ВсеЗаявки", ВсеЗаявки);
	
	
	
	Заявки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СписокЗаявок = Новый СписокЗначений;
	СписокЗаявок.ЗагрузитьЗначения(Заявки);
		
	Возврат СписокЗаявок;
	
КонецФункции	

Процедура ВерификацияДокумента(ДокументЭДО) Экспорт
	Если ЗначениеЗаполнено(ДокументЭДО.ФайлXML) = Ложь Тогда
		Возврат;		
	КонецЕсли;	
	
	СтруктураДокумента = Новый Структура("ЭДО_ВходящийДокумент, Контрагент, СписокДокументов, ДанныеШапки, Подписан, ТабличнаяЧасть, ПутьКФайлуPDF", 
			ДокументЭДО.Ссылка, ДокументЭДО.Контрагент);
			
	ПрочитатьСтруктуруXML(ДокументЭДО.ФайлXML, СтруктураДокумента, Ложь);
	
	ДокументЭДО.СтруктураДокумента = СтруктураДокумента;
	
	Если ТипЗнч(СтруктураДокумента.ДанныеШапки) = Тип("Структура") 
		И ((СтруктураДокумента.ДанныеШапки.Свойство("Основание") = Истина И ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки.Основание)) ИЛИ (СтруктураДокумента.ДанныеШапки.Свойство("СуммаНДС") И ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки.СуммаНДС))) Тогда 
		ДокОбъект = ДокументЭДО.Ссылка.ПолучитьОбъект();
		ДокОбъект.Основание = СтруктураДокумента.ДанныеШапки.Основание; 
		
		Если СтруктураДокумента.ДанныеШапки.Свойство("СуммаНДС") И ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки.СуммаНДС) Тогда 
			 ДокОбъект.СуммаНДС = СтруктураДокумента.ДанныеШапки.СуммаНДС; 
			 ДокументЭДО.СуммаНДС = СтруктураДокумента.ДанныеШапки.СуммаНДС; 
		КонецЕсли;	
		
		ДокОбъект.ОбменДанными.Загрузка = Истина;	
		ДокОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСписокНомеровПакета(ИдентификаторПакета) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Номер
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_ВходящийДокумент.Номер";
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	
	СписокРезультат = Новый СписокЗначений;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		СписокРезультат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Номер"));
	КонецЕсли;
	
	Возврат СписокРезультат; 
		
КонецФункции	


//
Процедура РЗПрикреплениеДокументовЗаПериод(ДатаНач, ДатаКон) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|		ПО ЭДО_ВходящийДокумент.Ссылка = ЭДО_СопоставлениеДокументов.ДокументЭДО
	|			И ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента = ЭДО_СопоставлениеДокументов.ВидДокумента
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ.Ссылка ЕСТЬ NULL
	|	И ЭДО_ВходящийДокумент.ДатаЗагрузки МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Попытка 
			ПоискИПрикрепленияЗаявокИПрикрепленныхДокументовПоИДПакета(Стр.ИдентификаторПакета);
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	//
КонецПроцедуры	
	
	
Функция НайтиВнешнююСчетФактуру(Знач ДокументСсылка) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СФ
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка
	|	И СФ.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции