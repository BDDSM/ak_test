&НаКлиенте
Перем КэшЭДО;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Параметры.Свойство("КэшЭДО", КэшЭДО);
	КэшЭДО = ЭтаФорма.ВладелецФормы.мКэшЭДО;
	
	//+++ AK suvv 2018.11.27 ИП-00019917.06
	ЗаполнитьСписокЗначенийБудетСозданДокумент();
	//--- AK suvv
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Параметры.Свойство("Контрагент", Контрагент);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("СворачиватьПоНоменклатуре", СворачиватьПоНоменклатуре);//shae 2018.07.14 ИП-00019085
	
	Параметры.Свойство("ДокументОсонование", ДокументОснование);
	
	ЭтоИсходящий = Ложь;
	
	Параметры.Свойство("Исходящий", ЭтоИсходящий);
	
	
	Если Параметры.Свойство("ИД_Пакета") = Истина И ЭтоИсходящий = Ложь Тогда
		ОтобразитьВходящийДокумент(Параметры);		
	ИначеЕсли Параметры.Свойство("ИД_Пакета") = Истина И ЭтоИсходящий = Истина Тогда	
		ОтобразитьИсходящийДокумент(Параметры);		
	КонецЕсли;
		
	БудетСозданДокумент = "ПТУ";
	
КонецПроцедуры


&НаСервере
Процедура ОтобразитьВходящийДокумент(СтруктураПараметров)
	мКэш = Новый Соответствие;	
	
	ИдентификаторПакета = СтруктураПараметров.ИД_Пакета;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Ссылка,
	|	ЭДО_ВходящийДокумент.ИдентификаторДокумента
	|ПОМЕСТИТЬ ИД_Документов
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.Документ,
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	ЭДО_СопоставлениеДокументов.ДокументЭДО,
	|	ЭДО_СопоставлениеДокументов.Документ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИД_Документов КАК ИД_Документов
	|		ПО ЭДО_СопоставлениеДокументов.ДокументЭДО = ИД_Документов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_ВходящийДокумент.Ссылка КАК ЭДО_ВходящийДокумент,
	|	ЭДО_ВходящийДокумент.ИдентификаторДокумента,
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета,
	|	ЭДО_ВходящийДокумент.Организация,
	|	ЭДО_ВходящийДокумент.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_ВходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭДО_ВходящийДокумент.Статус,
	|	ЭДО_ВходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ВходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ВходящийДокумент.СуммаДокумента,
	|	ЭДО_ВходящийДокумент.СуммаНДС,
	|	ЭДО_ВходящийДокумент.ФайлXML,
	|	ЭДО_ВходящийДокумент.ФайлPDF,
	|	ЭДО_ВходящийДокумент.ФайлXML_Верифицированный КАК ТекФайлXML,
	|	ЭДО_ВходящийДокумент.КаналОбмена,
	|	ЭДО_ВходящийДокумент.ПредставлениеДокумента,
	|	ЭДО_ВходящийДокумент.Статус.Статус КАК СтатусДокумента
	|ИЗ
	|	Документ.ЭДО_ВходящийДокумент КАК ЭДО_ВходящийДокумент
	|ГДЕ
	|	ЭДО_ВходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_Пакеты.ИдентификаторПакета,
	|	ЭДО_Пакеты.КаналОбмена,
	|	ЭДО_Пакеты.Направление,
	|	ЭДО_Пакеты.Организация,
	|	ЭДО_Пакеты.КонтрагентЭДО,
	|	ЭДО_Пакеты.Статус,
	|	ЭДО_Пакеты.СуммаПакета,
	|	ЭДО_Пакеты.ДатаПоследнегоСобытия,
	|	ЭДО_Пакеты.ИдентификаторПоследнегоСобытия,
	|	ЭДО_Пакеты.Заявка,
	|	ЭДО_Пакеты.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_Пакеты.Основание
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета";
	
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", СтруктураПараметров.ИД_Пакета);
	
	МассивРезультат = Запрос.ВыполнитьПакет();
	
	ТЗДокументов = МассивРезультат.Получить(1).Выгрузить();
	ТЗ = МассивРезультат.Получить(2).Выгрузить();
	ТЗДанныеПакета = МассивРезультат.Получить(3).Выгрузить();
	
	ДанныеПакета = ТЗДанныеПакета[0];
	Заявка = ДанныеПакета.Заявка;
	Основание = ДанныеПакета.Основание;
	СуммаПакета = ДанныеПакета.СуммаПакета;
	
	ТЗ.Колонки.Добавить("Подписан");
	ТЗ.Колонки.Добавить("Состояние");
	ТЗ.Колонки.Добавить("Документ1С");
	ТЗ.Колонки.Добавить("ЕстьВложения");
	ТЗ.Колонки.Добавить("СтатусКартинка");
	ТЗ.Колонки.Добавить("СсылкаДокументЭДО");
	
	
	Для каждого Стр Из ТЗ Цикл
				
		СписокДокументов = Новый СписокЗначений;
		
		Стр.СсылкаДокументЭДО = Стр.ЭДО_ВходящийДокумент;
		
		Фильтр = Новый Структура("ДокументЭДО", Стр.ЭДО_ВходящийДокумент);
		ТЗДокументовВрем = ТЗДокументов.Скопировать(Фильтр);
		Стр.ЕстьВложения = 0;
		Для каждого СтрДок Из ТЗДокументовВрем Цикл
			СписокДокументов.Добавить(СтрДок.Документ, СтрДок.СуммаДокумента);
			Стр.ЕстьВложения = 1;
		КонецЦикла;	
		
		Стр.Документ1С = СписокДокументов;
		
		СтруктураДокумента = Новый Структура("ЭДО_ВходящийДокумент, СписокДокументов, ДанныеШапки, Подписан, ТабличнаяЧасть, ПутьКФайлуPDF", 
		Стр.ЭДО_ВходящийДокумент, СписокДокументов);
		
		//ИД
		СтруктураДокумента.Вставить("ИдентификаторПакета", Стр.ИдентификаторПакета);			
		СтруктураДокумента.Вставить("ИдентификаторДокумента", Стр.ИдентификаторДокумента);			
		СтруктураДокумента.Вставить("КаналОбмена", Стр.КаналОбмена);			
		
		
		//данные пакета
		СтруктураДокумента.Вставить("Контрагент", ДанныеПакета.Контрагент);
		СтруктураДокумента.Вставить("Организация", ДанныеПакета.Организация);
		СтруктураДокумента.Вставить("Заявка", ДанныеПакета.Заявка);
		СтруктураДокумента.Вставить("Основание", ДанныеПакета.Основание);
		СтруктураДокумента.Вставить("СуммаПакета", ДанныеПакета.СуммаПакета);
		
		
		
		//Данные документа
		СтруктураДокумента.Вставить("ТипДокумента", Стр.ТипДокумента);
		СтруктураДокумента.Вставить("НомерДокумента", Стр.НомерДокумента);
		СтруктураДокумента.Вставить("ДатаДокумента", Стр.ДатаДокумента);		
		
		//файлы
		СтруктураДокумента.Вставить("ИсхФайлXML", Стр.ФайлXML);						
		СтруктураДокумента.Вставить("ТекФайлXML", Стр.ТекФайлXML);			
		СтруктураДокумента.Вставить("ФайлPDF", Стр.ФайлPDF);			
		
		Если ЗначениеЗаполнено(Стр.ФайлPDF) = Истина Тогда
			СтруктураДокумента.Вставить("ПутьКФайлуPDF", Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.ФайлPDF));			
		КонецЕсли;	
		
		
		//Разбор структур
		Если ЗначениеЗаполнено(Стр.ТекФайлXML) = Истина Тогда
			СтрДокументаВер = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьСтруктуруXMLВерификации(Стр.ТекФайлXML);
			
			Если СтрДокументаВер.Fields.Свойство("Подписан") = Истина Тогда
				СтруктураДокумента.Вставить("Подписан", СтрДокументаВер.Fields.Подписан);
				Стр.Подписан = СтруктураДокумента.Подписан;
			КонецЕсли;	
			
			Если СтрДокументаВер.Tables.Количество() > 0 Тогда
				// для старых версий
				ТабличнаяЧасть = СтрДокументаВер.Tables[0]; 
				Если ТабличнаяЧасть.Колонки.Найти("КоличествоПринято") = Неопределено Тогда
					КЧ = Новый КвалификаторыЧисла(15,3);
					ОписаниеТиповЧ = Новый ОписаниеТипов("Число", , ,КЧ);					
					ТабличнаяЧасть.Колонки.Добавить("КоличествоПринято", ОписаниеТиповЧ);
					
					Для каждого СтрТаблицы Из ТабличнаяЧасть Цикл
						СтрТаблицы.КоличествоПринято = СтрТаблицы.Количество;
					КонецЦикла;	
				КонецЕсли;					
				СтруктураДокумента.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
			Иначе
				//что то не так с файлом верификации
				Если ЗначениеЗаполнено(Стр.ФайлXML) = Истина Тогда										
					Обработки.ЭДО_Интерфейс.ПрочитатьСтруктуруXML(Стр.ФайлXML, СтруктураДокумента);
					Стр.Подписан = СтруктураДокумента.Подписан;
				КонецЕсли;
			КонецЕсли;				  				
		ИначеЕсли ЗначениеЗаполнено(Стр.ФайлXML) = Истина Тогда							
			Обработки.ЭДО_Интерфейс.ПрочитатьСтруктуруXML(Стр.ФайлXML, СтруктураДокумента);
			Стр.Подписан = СтруктураДокумента.Подписан;							
		Иначе
			Стр.Состояние = "В документе отсутствует файл XML";
			Стр.СтатусКартинка = 1;
		КонецЕсли;	
		
		мКэш.Вставить(Стр.ИдентификаторДокумента, СтруктураДокумента); 
		
		Если СтруктураДокумента.Свойство("ТабличнаяЧасть") = Истина И СтруктураДокумента.ТабличнаяЧасть <> Неопределено Тогда
			Если СтруктураДокумента.ТабличнаяЧасть.Количество() > 0 Тогда
				
				Стр.Состояние = "Вся номенклатура сопоставлена";
				Стр.СтатусКартинка = 2;
				
				Для каждого СтрТЧ Из СтруктураДокумента.ТабличнаяЧасть Цикл
					Если ТипЗнч(СтрТЧ.Номенклатура) = Тип("Строка") И СтрТЧ.Назначение <> "Доп. расход" Тогда
						Стр.Состояние = "Не вся номенклатура сопоставлена";
						Стр.СтатусКартинка = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Документы.Загрузить(ТЗ);
	Кэш = Новый ФиксированноеСоответствие(мКэш);	
	
	Элементы.ПанельСтраницШапки.ТекущаяСтраница = Элементы.ГруппаШапкаВходящий;
	
	Элементы.ФормаКнопкиВходящий.Видимость = Истина;
	
	Элементы.Документы1С.Видимость = Истина;
	
	Элементы.ГруппаДокументВходящий.Видимость = Истина;
	Элементы.ТабличнаяЧастьДокументаГруппаВходящий.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИсходящийДокумент(СтруктураПараметров)
	мКэш = Новый Соответствие;	
	
	ИдентификаторПакета = СтруктураПараметров.ИД_Пакета;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_ИсходящийДокумент.Ссылка,
	|	ЭДО_ИсходящийДокумент.ИдентификаторДокумента
	|ПОМЕСТИТЬ ИД_Документов
	|ИЗ
	|	Документ.ЭДО_ИсходящийДокумент КАК ЭДО_ИсходящийДокумент
	|ГДЕ
	|	ЭДО_ИсходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.Документ,
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	ЭДО_СопоставлениеДокументов.ДокументЭДО,
	|	ЭДО_СопоставлениеДокументов.Документ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИД_Документов КАК ИД_Документов
	|		ПО ЭДО_СопоставлениеДокументов.ДокументЭДО = ИД_Документов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_ИсходящийДокумент.Ссылка КАК ЭДО_ИсходящийДокумент,
	|	ЭДО_ИсходящийДокумент.ИдентификаторДокумента,
	|	ЭДО_ИсходящийДокумент.ИдентификаторПакета,
	|	ЭДО_ИсходящийДокумент.Организация,
	|	ЭДО_ИсходящийДокумент.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_ИсходящийДокумент.ТипДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭДО_ИсходящийДокумент.Статус,
	|	ЭДО_ИсходящийДокумент.Номер КАК НомерДокумента,
	|	ЭДО_ИсходящийДокумент.Дата КАК ДатаДокумента,
	|	ЭДО_ИсходящийДокумент.СуммаДокумента,
	|	ЭДО_ИсходящийДокумент.СуммаНДС,
	|	ЭДО_ИсходящийДокумент.ФайлXML,
	|	ЭДО_ИсходящийДокумент.ФайлPDF,
	|	ЭДО_ИсходящийДокумент.ФайлXML_Верифицированный КАК ТекФайлXML,
	|	ЭДО_ИсходящийДокумент.КаналОбмена,
	|	ЭДО_ИсходящийДокумент.ПредставлениеДокумента,
	|	ЭДО_ИсходящийДокумент.ДокументОснование,
	|	ЭДО_ИсходящийДокумент.Статус.Статус КАК СтатусДокумента
	|ИЗ
	|	Документ.ЭДО_ИсходящийДокумент КАК ЭДО_ИсходящийДокумент
	|ГДЕ
	|	ЭДО_ИсходящийДокумент.ИдентификаторПакета = &ИдентификаторПакета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДО_Пакеты.ИдентификаторПакета,
	|	ЭДО_Пакеты.КаналОбмена,
	|	ЭДО_Пакеты.Направление,
	|	ЭДО_Пакеты.Организация,
	|	ЭДО_Пакеты.КонтрагентЭДО,
	|	ЭДО_Пакеты.Статус,
	|	ЭДО_Пакеты.СуммаПакета,
	|	ЭДО_Пакеты.ДатаПоследнегоСобытия,
	|	ЭДО_Пакеты.ИдентификаторПоследнегоСобытия,
	|	ЭДО_Пакеты.Заявка,
	|	ЭДО_Пакеты.КонтрагентЭДО.Контрагент КАК Контрагент,
	|	ЭДО_Пакеты.Основание
	|ИЗ
	|	РегистрСведений.ЭДО_Пакеты КАК ЭДО_Пакеты
	|ГДЕ
	|	ЭДО_Пакеты.ИдентификаторПакета = &ИдентификаторПакета";
	
	
	Запрос.УстановитьПараметр("ИдентификаторПакета", СтруктураПараметров.ИД_Пакета);
	
	МассивРезультат = Запрос.ВыполнитьПакет();
	
	ТЗДокументов = МассивРезультат.Получить(1).Выгрузить();
	ТЗ = МассивРезультат.Получить(2).Выгрузить();
	ТЗДанныеПакета = МассивРезультат.Получить(3).Выгрузить();
	
	ДанныеПакета = ТЗДанныеПакета[0];
	Заявка = ДанныеПакета.Заявка;
	Основание = ДанныеПакета.Основание;
	СуммаПакета = ДанныеПакета.СуммаПакета;
	
	ТЗ.Колонки.Добавить("Подписан");
	ТЗ.Колонки.Добавить("Состояние");
	ТЗ.Колонки.Добавить("Документ1С");
	ТЗ.Колонки.Добавить("ЕстьВложения");
	ТЗ.Колонки.Добавить("СтатусКартинка");
	ТЗ.Колонки.Добавить("СсылкаДокументЭДО");
	
	
	Для каждого Стр Из ТЗ Цикл
		
		СписокДокументов = Новый СписокЗначений;
		
		Стр.СсылкаДокументЭДО = Стр.ЭДО_ИсходящийДокумент;
		
		Фильтр = Новый Структура("ДокументЭДО", Стр.ЭДО_ИсходящийДокумент);
		ТЗДокументовВрем = ТЗДокументов.Скопировать(Фильтр);
		Стр.ЕстьВложения = 0;
		Для каждого СтрДок Из ТЗДокументовВрем Цикл
			СписокДокументов.Добавить(СтрДок.Документ, СтрДок.СуммаДокумента);
			Стр.ЕстьВложения = 1;
		КонецЦикла;	
		
		Стр.Документ1С = СписокДокументов;
		
		СтруктураДокумента = Новый Структура("ЭДО_ИсходящийДокумент, СписокДокументов, ДанныеШапки, Подписан, ТабличнаяЧасть, ПутьКФайлуPDF", 
		Стр.ЭДО_ИсходящийДокумент, СписокДокументов);
		
		//ИД
		СтруктураДокумента.Вставить("ИдентификаторПакета", Стр.ИдентификаторПакета);			
		СтруктураДокумента.Вставить("ИдентификаторДокумента", Стр.ИдентификаторДокумента);			
		СтруктураДокумента.Вставить("КаналОбмена", Стр.КаналОбмена);			
		
		
		//данные пакета
		СтруктураДокумента.Вставить("Контрагент", ДанныеПакета.Контрагент);
		СтруктураДокумента.Вставить("Организация", ДанныеПакета.Организация);
		СтруктураДокумента.Вставить("Заявка", ДанныеПакета.Заявка);
		СтруктураДокумента.Вставить("Основание", ДанныеПакета.Основание);
		СтруктураДокумента.Вставить("СуммаПакета", ДанныеПакета.СуммаПакета);
		
		
		
		//Данные документа
		СтруктураДокумента.Вставить("ТипДокумента", Стр.ТипДокумента);
		СтруктураДокумента.Вставить("НомерДокумента", Стр.НомерДокумента);
		СтруктураДокумента.Вставить("ДатаДокумента", Стр.ДатаДокумента);		
		
		//файлы
		СтруктураДокумента.Вставить("ИсхФайлXML", Стр.ФайлXML);						
		СтруктураДокумента.Вставить("ТекФайлXML", Стр.ТекФайлXML);			
		СтруктураДокумента.Вставить("ФайлPDF", Стр.ФайлPDF);			
		
		Если ЗначениеЗаполнено(Стр.ФайлPDF) = Истина Тогда
			СтруктураДокумента.Вставить("ПутьКФайлуPDF", Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.ФайлPDF));			
		КонецЕсли;	
		
		
		//Разбор структур
		Если ЗначениеЗаполнено(Стр.ТекФайлXML) = Истина Тогда
			СтрДокументаВер = Справочники.АК_АлгоритмыРаспознаванияФайлов.ПолучитьСтруктуруXMLВерификации(Стр.ТекФайлXML);
			
			Если СтрДокументаВер.Fields.Свойство("Подписан") = Истина Тогда
				СтруктураДокумента.Вставить("Подписан", СтрДокументаВер.Fields.Подписан);
				Стр.Подписан = СтруктураДокумента.Подписан;
			КонецЕсли;	
			
			Если СтрДокументаВер.Tables.Количество() > 0 Тогда
				// для старых версий
				ТабличнаяЧасть = СтрДокументаВер.Tables[0]; 
				Если ТабличнаяЧасть.Колонки.Найти("КоличествоПринято") = Неопределено Тогда
					КЧ = Новый КвалификаторыЧисла(15,3);
					ОписаниеТиповЧ = Новый ОписаниеТипов("Число", , ,КЧ);					
					ТабличнаяЧасть.Колонки.Добавить("КоличествоПринято", ОписаниеТиповЧ);
					
					Для каждого СтрТаблицы Из ТабличнаяЧасть Цикл
						СтрТаблицы.КоличествоПринято = СтрТаблицы.Количество;
					КонецЦикла;	
				КонецЕсли;					
				СтруктураДокумента.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
			Иначе
				//что то не так с файлом верификации
				Если ЗначениеЗаполнено(Стр.ФайлXML) = Истина Тогда										
					Обработки.ЭДО_Интерфейс.ПрочитатьСтруктуруXML(Стр.ФайлXML, СтруктураДокумента);
					Стр.Подписан = СтруктураДокумента.Подписан;
				КонецЕсли;
			КонецЕсли;				  				
		ИначеЕсли ЗначениеЗаполнено(Стр.ФайлXML) = Истина Тогда							
			Обработки.ЭДО_Интерфейс.ПрочитатьСтруктуруXML(Стр.ФайлXML, СтруктураДокумента);
			Стр.Подписан = СтруктураДокумента.Подписан;							
		Иначе
			Стр.Состояние = "В документе отсутствует файл XML";
			Стр.СтатусКартинка = 1;
		КонецЕсли;	
		
		мКэш.Вставить(Стр.ИдентификаторДокумента, СтруктураДокумента); 
		
		Если СтруктураДокумента.Свойство("ТабличнаяЧасть") = Истина И СтруктураДокумента.ТабличнаяЧасть <> Неопределено Тогда
			Если СтруктураДокумента.ТабличнаяЧасть.Количество() > 0 Тогда
				
				Стр.Состояние = "Вся номенклатура сопоставлена";
				Стр.СтатусКартинка = 2;
				
				Для каждого СтрТЧ Из СтруктураДокумента.ТабличнаяЧасть Цикл
					Если ТипЗнч(СтрТЧ.Номенклатура) = Тип("Строка") И СтрТЧ.Назначение <> "Доп. расход" Тогда
						Стр.Состояние = "Не вся номенклатура сопоставлена";
						Стр.СтатусКартинка = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Документы.Загрузить(ТЗ);
	Кэш = Новый ФиксированноеСоответствие(мКэш);	
	
	Элементы.ПанельСтраницШапки.ТекущаяСтраница = Элементы.ГруппаШапкаИсходящий;
	Элементы.ФормаКнопкиВходящий.Видимость = Ложь;
	
	Элементы.Документы1С.Видимость = Ложь;
	
	Элементы.ГруппаДокументВходящий.Видимость = Ложь;
	Элементы.ТабличнаяЧастьДокументаГруппаВходящий.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;  	
	
	Если ТД.ИдентификаторДокумента <> ИндексТекущейСтрокиДокументы Тогда
		
		СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);
		Если ЗначениеЗаполнено(СтруктураДокумента.ПутьКФайлуPDF) = Истина Тогда
			ФайлТемп = ПолучитьИмяВременногоФайла(".pdf");
			КопироватьФайл(СтруктураДокумента.ПутьКФайлуPDF, ФайлТемп);
			
			ПолеHTMLДокумента = ФайлТемп;
			
		КонецЕсли;
		
		Если СтруктураДокумента.Свойство("ТабличнаяЧасть") И ТипЗнч(СтруктураДокумента.ТабличнаяЧасть) = Тип("ТаблицаЗначений") И СтруктураДокумента.ТабличнаяЧасть.Количество() > 0 Тогда
			ЗаполнитьТабличнуюЧастьДокумента(СтруктураДокумента.ТабличнаяЧасть);					
		Иначе
			ЗаполнитьТабличнуюЧастьДокумента(Неопределено); 		
		КонецЕсли;
		
		
		Документы1С.Очистить();
		
		Для каждого ЗначСписка Из ТД.Документ1С Цикл
			НСтрДок = Документы1С.Добавить();
			НСтрДок.Документ = ЗначСписка.Значение; 
			НСтрДок.Сумма = ЗначСписка.Представление;
		КонецЦикла;	
			
	
		
		Текст = "";
		Если СтруктураДокумента.Свойство("ДанныеШапки") И ЗначениеЗаполнено(СтруктураДокумента.ДанныеШапки) = Истина Тогда
			Для каждого ЗначШапки Из СтруктураДокумента.ДанныеШапки Цикл
				Текст = Текст + ЗначШапки.Ключ + " " + ЗначШапки.Значение + Символы.ПС; 
				
				Если ТипЗнч(ЗначШапки.Значение) = Тип("Структура") Тогда
					Для каждого ЗначШапкиДочерний Из ЗначШапки.Значение Цикл
						Текст = Текст + ЗначШапкиДочерний.Ключ + " " + ЗначШапкиДочерний.Значение + Символы.ПС; 
					КонецЦикла;					
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		ДанныеШапкиXML.УстановитьТекст(Текст);
		
		
		ИндексТекущейСтрокиДокументы = ТД.ИдентификаторДокумента;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтобразитьДокументНаФорме(ФайлПДФ)
	ПутьКФайлу = ПолучитьПутьКФайлу(ФайлПДФ);
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() И НРег(Файл.Расширение) = ".pdf" Тогда				
		ПолеHTMLДокумента = ПутьКФайлу;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицыДокумента(ИД)
	ТабличнаяЧастьДокумента.Очистить();
	Если ЗначениеЗаполнено(Кэш) = Истина Тогда
		СтруктураДокумента = Кэш.Получить(ИД);
		Если ЗначениеЗаполнено(СтруктураДокумента) = Истина Тогда
			Если СтруктураДокумента.Свойство("ТабличнаяЧасть") И СтруктураДокумента.ТабличнаяЧасть.Количество() > 0 Тогда
				ТабличнаяЧастьДокумента.Загрузить(СтруктураДокумента.ТабличнаяЧасть);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьДокумента(Таблица)
	Если ЗначениеЗаполнено(ИндексТекущейСтрокиДокументы) = Истина Тогда
		мКэш = Новый Соответствие(Кэш);	
		СтруктураДокумента = Кэш.Получить(ИндексТекущейСтрокиДокументы);
		СтруктураДокумента.ТабличнаяЧасть = РеквизитФормыВЗначение("ТабличнаяЧастьДокумента");			
		мКэш.Вставить(ИндексТекущейСтрокиДокументы, СтруктураДокумента);
		Кэш = Новый ФиксированноеСоответствие(мКэш);
	КонецЕсли;
	
	Если Таблица = Неопределено Тогда 
		ТабличнаяЧастьДокумента.Очистить();
	Иначе		
		//ТабличнаяЧастьДокумента.Загрузить(Таблица);
		ЗначениеВРеквизитФормы(Таблица, "ТабличнаяЧастьДокумента");
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПолучитьПутьКФайлу(Файл) 
	ПутьКФайлу = "";
	Если ЗначениеЗаполнено(Файл) = Истина Тогда
		ПутьКФайлу = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);
	КонецЕсли;	
	
	Возврат ПутьКФайлу;
КонецФункции	


&НаСервере
Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Классификатор = КлассификаторСубъектовРФ();
	Вариант = Классификатор.Найти(ЧисловойКодРегиона, "КодСубъектаРФ");
	Если Вариант = Неопределено Тогда
		// Не нашли
		Возврат "";
	КонецЕсли;
	
	Возврат Вариант.Наименование + " " + Вариант.Сокращение;


КонецФункции

&НаСервере
Функция КлассификаторСубъектовРФ()
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Обработки.ЭДО_Интерфейс.ПолучитьМакет("КлассификаторСубъектовРФ").ПолучитьТекст());
	Результат = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоКонтрагентам(ИсхДанные, ВыходнаяСтрукутра, ИмяРеквизита)
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("ИдСв") И ИсхДанные[ИмяРеквизита].ИдСв.Свойство("СвЮЛУч") Тогда
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("НаимОрг", ВыходнаяСтрукутра.Имя);
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("ИННЮЛ", ВыходнаяСтрукутра.ИНН);
		ИсхДанные[ИмяРеквизита].ИдСв.СвЮЛУч.Свойство("КПП", ВыходнаяСтрукутра.КПП);
	ИначеЕсли ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("ИдСв") И ИсхДанные[ИмяРеквизита].ИдСв.Свойство("СвОрг") И ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.Свойство("СвЮЛ") Тогда
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("НаимОрг", ВыходнаяСтрукутра.Имя);
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("ИННЮЛ", ВыходнаяСтрукутра.ИНН);
		ИсхДанные[ИмяРеквизита].ИдСв.СвОрг.СвЮЛ.Свойство("КПП", ВыходнаяСтрукутра.КПП);	
	КонецЕсли;
	
	
	РеквизитыАдреса = "КодРегион, Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
	
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("Адрес") И ИсхДанные[ИмяРеквизита].Адрес.Свойство("АдрИнф") Тогда
		ИсхДанные[ИмяРеквизита].Адрес.АдрИнф.Свойство("АдрТекст", ВыходнаяСтрукутра.Адрес);			
	ИначеЕсли ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("Адрес") И ИсхДанные[ИмяРеквизита].Адрес.Свойство("АдрРФ") Тогда	
		СтрукутраАдреса = ИсхДанные[ИмяРеквизита].Адрес.АдрРФ;
		
		
		Представление = ?(СтрукутраАдреса.Свойство("Индекс"), СтрукутраАдреса.Индекс + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("КодРегион"), ПолучитьНазваниеРегионаПоКоду(СтрукутраАдреса.КодРегион) + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Район"), СтрукутраАдреса.Район + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Город"), СтрукутраАдреса.Город + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("НаселПункт"), СтрукутраАдреса.НаселПункт + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Улица"), СтрукутраАдреса.Улица + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Дом"), СтрукутраАдреса.Дом + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Корпус"), СтрукутраАдреса.Корпус + ", ", "")
		+ ?(СтрукутраАдреса.Свойство("Кварт"), СтрукутраАдреса.Кварт, "");		
		
		
		ВыходнаяСтрукутра.Адрес = Представление;
	КонецЕсли;
	
	Если ИсхДанные.Свойство(ИмяРеквизита) И ИсхДанные[ИмяРеквизита].Свойство("БанкРекв") Тогда
		ИсхДанные[ИмяРеквизита].БанкРекв.Свойство("НомерСчета", ВыходнаяСтрукутра.Счет);					
		Если ИсхДанные[ИмяРеквизита].БанкРекв.Свойство("СвБанк") И ТипЗнч(ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк) = Тип("Структура") Тогда
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("БИК", ВыходнаяСтрукутра.БИК);	
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("КорСчет", ВыходнаяСтрукутра.КорСчет);	
			 ИсхДанные[ИмяРеквизита].БанкРекв.СвБанк.Свойство("НаимБанк", ВыходнаяСтрукутра.НаимБанк);				 
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьМассивСтрокВТаблицу(МассивСтрок, ТЗ)
	Если ТипЗнч(МассивСтрок) = Тип("Массив") Тогда
		Для каждого ЗначМассива Из МассивСтрок Цикл
			НСтр = ТЗ.Добавить();
			
			НСтр.Назначение = "Услуги/Материалы";
			//Номер строки
			Если ЗначМассива.Свойство("НомТов") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.НомТов;
			ИначеЕсли ЗначМассива.Свойство("НомСтр") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.НомСтр;				
			ИначеЕсли ЗначМассива.Свойство("Номер") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.Номер;					
			ИначеЕсли ЗначМассива.Свойство("ПорНомер") = Истина Тогда
				НСтр.НомерСтроки = ЗначМассива.ПорНомер;			
			КонецЕсли;	
			
			//Номенкалутра поставщика
			Если ЗначМассива.Свойство("НаимТов") Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.НаимТов; 				
			ИначеЕсли ЗначМассива.Свойство("НаимРабот") = Истина Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.НаимРабот; 				
			ИначеЕсли ЗначМассива.Свойство("Название") = Истина Тогда
				НСтр.НоменклатураПоставщика = ЗначМассива.Название; 				
			КонецЕсли;
			
			//Количество
			Если ЗначМассива.Свойство("КолТов") = Истина Тогда
				НСтр.Количество = ЗначМассива.КолТов;
			ИначеЕсли ЗначМассива.Свойство("Нетто") = Истина Тогда
				НСтр.Количество = ЗначМассива.Нетто;				
			ИначеЕсли ЗначМассива.Свойство("Количество") = Истина Тогда
				НСтр.Количество = ЗначМассива.Количество;
			ИначеЕсли ЗначМассива.Свойство("Кол_во") = Истина Тогда
				НСтр.Количество = ЗначМассива.Кол_во;	
			ИначеЕсли ЗначМассива.Свойство("НеттоПередано") = Истина Тогда
				НСтр.Количество = ЗначМассива.НеттоПередано;
			КонецЕсли;				
			
			//Ставка
			Если ЗначМассива.Свойство("СтавкаНДС") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.СтавкаНДС;
			ИначеЕсли ЗначМассива.Свойство("НалСт") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.НалСт;
			ИначеЕсли ЗначМассива.Свойство("НДС") = Истина И ТипЗнч(ЗначМассива.НДС) = Тип("Структура") И ЗначМассива.НДС.Свойство("Ставка") = Истина Тогда
				НСтр.СтавкаНДССтрока = ЗначМассива.НДС.Ставка;	
			КонецЕсли;	
			
			//Цена			
			Если ЗначМассива.Свойство("Цена") = Истина Тогда
				НСтр.Цена = ЗначМассива.Цена;
			ИначеЕсли ЗначМассива.Свойство("ЦенаТов") = Истина Тогда
				НСтр.Цена = ЗначМассива.ЦенаТов;
			КонецЕсли;  						
			
			//Сумма без НДС			
			Если ЗначМассива.Свойство("СумБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СумБезНДС;
			ИначеЕсли ЗначМассива.Свойство("СтТовБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтТовБезНДС;
			ИначеЕсли ЗначМассива.Свойство("СтоимБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтоимБезНДС;						
			ИначеЕсли ЗначМассива.Свойство("СуммаБезНал") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СуммаБезНал;							
			ИначеЕсли ЗначМассива.Свойство("СтБезНДС") = Истина Тогда
				НСтр.СуммаБезНДС = ЗначМассива.СтБезНДС;
			КонецЕсли;  			
			
			
			//Сумма с учетом НДС			
			Если ЗначМассива.Свойство("СумУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СумУчНДС;
			ИначеЕсли ЗначМассива.Свойство("СтТовУчНал") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтТовУчНал;
			ИначеЕсли ЗначМассива.Свойство("СтоимУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтоимУчНДС;				
			ИначеЕсли ЗначМассива.Свойство("Сумма") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.Сумма;										
			ИначеЕсли ЗначМассива.Свойство("СтУчНДС") = Истина Тогда
				НСтр.СуммаСУчетомНДС = ЗначМассива.СтУчНДС;
			КонецЕсли;  			
			
			//Сумма НДС
			Если ЗначМассива.Свойство("СумНДС") = Истина Тогда
				НСтр.СуммаНДС = ЗначМассива.СумНДС;
			ИначеЕсли ЗначМассива.Свойство("СумНал") = Истина Тогда
				ЗначМассива.СумНал.Свойство("СумНал", НСтр.СуммаНДС);			
			ИначеЕсли ЗначМассива.Свойство("НДС") = Истина И ТипЗнч(ЗначМассива.НДС) = Тип("Структура") И ЗначМассива.НДС.Свойство("Сумма") = Истина Тогда
				НСтр.СуммаНДС = ЗначМассива.НДС.Сумма;	
			КонецЕсли;  			
			
			//Ед.изм
			Если ЗначМассива.Свойство("НаимЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.НаимЕдИзм;
			ИначеЕсли ЗначМассива.Свойство("ДопСведТов") = Истина Тогда
				ЗначМассива.ДопСведТов.Свойство("НаимЕдИзм", НСтр.ЕдИзм);
			ИначеЕсли ЗначМассива.Свойство("НаимЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.НаимЕдИзм;
			ИначеЕсли ЗначМассива.Свойство("ЕдИзм") = Истина Тогда
				НСтр.ЕдИзм = ЗначМассива.ЕдИзм;	
			КонецЕсли;
			
			//Базовая единица			
			Если ЗначМассива.Свойство("ОКЕИ_Тов") = Истина Тогда
				Если ЗначениеЗаполнено(ЗначМассива.ОКЕИ_Тов) = Истина Тогда
					НСтр.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗначМассива.ОКЕИ_Тов);
				КонецЕсли;
			ИначеЕсли ЗначМассива.Свойство("ОКЕИ") = Истина Тогда
				Если ЗначениеЗаполнено(ЗначМассива.ОКЕИ) = Истина Тогда
					НСтр.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗначМассива.ОКЕИ);
				КонецЕсли;	
			КонецЕсли;	
			
			//Ставка НДС и Номенклатура 1с
			НСтр.СтавкаНДС = Обработки.ЭДО_Интерфейс.ПарсингСтавкиНДС(НСтр.СтавкаНДССтрока);		
			НСтр.Номенклатура = Обработки.ЭДО_Интерфейс.ПоискНоменклатурыПоставщика(Контрагент, НСтр.НоменклатураПоставщика, НСтр.БазоваяЕдиницаИзмерения);
			
			Если ЗначениеЗаполнено(НСтр.Номенклатура) = Истина И ТипЗнч(НСтр.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ЗначениеЗаполнено(НСтр.БазоваяЕдиницаИзмерения) = Истина Тогда							
					НСтр.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", НСтр.БазоваяЕдиницаИзмерения,, НСтр.Номенклатура);
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НСтр.ЕдиницаИзмерения) = Ложь Тогда
					НСтр.ЕдиницаИзмерения = НСтр.Номенклатура.ЕдиницаХраненияОстатков;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция ПрочитатьУзелDOM(УзелDOM, Узел) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			//Узел.Вставить("Значение", Уз.ПолныйТекст);
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.Атрибуты.Количество() <> 0 или Уз.ПервыйДочерний <> Неопределено Тогда
				НоваяСтруктура = Новый Структура;
				Атрибуты = Уз.Атрибуты;
				Для каждого Атрибут из Атрибуты Цикл
					Попытка
						НоваяСтруктура.Вставить(Атрибут.ИмяУзла, Атрибут.ЗначениеУзла);
					Исключение
					КонецПопытки;
				КонецЦикла;	
				Если Уз.ИмяУзла = "СтрТабл" Тогда
					Если Узел.Свойство("СтрТабл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СтрТабл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "СведТов" Тогда
					Если Узел.Свойство("СведТов") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СведТов;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);	
				ИначеЕсли Уз.ИмяУзла = "СвТов" Тогда
					Если Узел.Свойство("СвТов") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СвТов;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);							
				ИначеЕсли Уз.ИмяУзла = "Работа" Тогда
					Если Узел.Свойство("Работа") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.Работа;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);													
				ИначеЕсли Уз.ИмяУзла = "ДопАдрЭл" Тогда
					Если Узел.Свойство("ДопАдрЭл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.ДопАдрЭл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "Параметр" Тогда            //сбис Никифоров-->
					Если Узел.Свойство("Параметр") = Ложь Тогда
						//МассивСтрок = Новый Массив;
						Параметр = Новый Структура;//сбис Никифоров    
					Иначе
						Параметр = Узел.Параметр;//сбис Никифоров
					КонецЕсли;    
					//МассивСтрок.Добавить(НоваяСтруктура);
					//Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
					Попытка
						Параметр.Вставить(СтрЗаменить(СтрЗаменить(НоваяСтруктура.Имя,"-","")," ",""), НоваяСтруктура.Значение);
						Узел.Вставить(Уз.ИмяУзла, Параметр);           //сбис Никифоров <--
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(Уз.ИмяУзла, 6) = "Список" Тогда
					Если Уз.ПервыйДочерний <> Неопределено Тогда
						мУз = УЗ.ПервыйДочерний;
						ИмяУзла = мУз.ИмяУзла;
						МассивСтрок = Новый Массив;
						Пока мУз<>Неопределено Цикл
							ДочУзел = Новый Структура;
							ВложениеУзла = Неопределено;
							ПрочитатьУзелDOM(мУз, ДочУзел);
							Для Каждого Элемент Из ДочУзел Цикл
								ВложениеУзла = Элемент.Значение;
								Прервать;
							КонецЦикла;		
							Если ВложениеУзла<>Неопределено Тогда
								МассивСтрок.Добавить(ВложениеУзла);
							КонецЕсли;
							мУз = мУз.СледующийСоседний;
						КонецЦикла;
						Узел.Вставить(ИмяУзла, МассивСтрок);
					КонецЕсли;
				Иначе	
					Узел.Вставить(Уз.ИмяУзла, НоваяСтруктура);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено и Лев(Уз.ИмяУзла, 6) <> "Список" Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOM(Уз, ДочУзел);
			Если УЗ.РодительскийУзел.ИмяУзла = "СтрТабл" Тогда
				сбисСкопироватьСтруктуру(Узел.СтрТабл[Узел.СтрТабл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "СведТов" Тогда
				сбисСкопироватьСтруктуру(Узел.СведТов[Узел.СведТов.Количество()-1], ДочУзел);	
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "СвТов" Тогда
				сбисСкопироватьСтруктуру(Узел.СвТов[Узел.СвТов.Количество()-1], ДочУзел);	
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "Работа" Тогда
				сбисСкопироватьСтруктуру(Узел.Работа[Узел.Работа.Количество()-1], ДочУзел);		
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "ДопАдрЭл" Тогда
				сбисСкопироватьСтруктуру(Узел.ДопАдрЭл[Узел.ДопАдрЭл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "Параметр" Тогда
				сбисСкопироватьСтруктуру(Узел.Параметр[Узел.Параметр.Количество()-1], ДочУзел);
			Иначе	
				Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			КонецЕсли;	
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Если Лев(Уз.РодительскийУзел.ИмяУзла, 6) = "Список" Тогда
			Прервать;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруФайлаСПростымиЭлементами(СтрокаXML) Экспорт
	// Функция формирует структуру по XML (xml без атрибутов, с простыми элементами)	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOMСПростымиЭлементами(ДокументДОМ.ПервыйДочерний, СтруктураФайла);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции

&НаСервере
Функция ПрочитатьУзелDOMСПростымиЭлементами(УзелDOM, Узел) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.ПервыйДочерний <> Неопределено Тогда
				Узел.Вставить(Уз.ИмяУзла, Новый Структура);
			Иначе
				Узел.Вставить(Уз.ИмяУзла, "");
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOMСПростымиЭлементами(Уз, ДочУзел);
			Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

&НаСервере
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = ТипМассив Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция РассчитатьЗначение(Параметр,Контекст, ВходящийКэш="") Экспорт 
	// Функция рассчитывает значение параметра из файла настроек на клиенте.
	// Используется непосредственно при формировании структуры файла, после того, как все данные с сервера получены.
	Если ВходящийКэш <> "" Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;	
	Если Контекст=Ложь Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
	Иначе
		Попытка
			ЗнПер=Контекст[Параметр];
			Если ТипЗнч(ЗнПер) = Тип("Структура") и ЗнПер.Свойство("Значение") Тогда
				ЗнПер = ЗнПер.Значение;
			КонецЕсли;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	КэшироватьФункцию = Ложь;
	Если Найти(ЗнПер,"!")=1 и Найти(ЗнПер,"{")>0 Тогда // кешируемая функция
		КэшироватьФункцию = сред(ЗнПер,2,Найти(ЗнПер,"{")-2);
		ЗнПер = сред(ЗнПер,Найти(ЗнПер,"{"));
		Если КэшироватьФункцию = "Организация" Тогда 
			ИНН = СокрЛП(РассчитатьЗначение("Сторона_ИНН", Контекст, ВходящийКэш));
			КПП = СокрЛП(РассчитатьЗначение("Сторона_КПП", Контекст, ВходящийКэш));
			Если Кэш.КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Параметр];
			КонецЕсли;
		Иначе	
			Если Кэш.КэшЗначенийИни.ТекущийПакет.Свойство(КэшироватьФункцию+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.ТекущийПакет[КэшироватьФункцию+"_"+Параметр];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		//Попытка
		//	Если ВходящийКэш <> "" Тогда
		//		ГлавноеОкно = Кэш.ГлавноеОкно;
		//	Иначе
		//		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		//	КонецЕсли;
		//	фрм = ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","", Кэш);
		//	Результат=вычислить("фрм."+ИмяФункции+"(Контекст)");
		//	Если КэшироватьФункцию<>Ложь Тогда
		//		Если КэшироватьФункцию = "Организация" Тогда
		//			Кэш.КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Параметр, Результат);
		//		Иначе
		//			Кэш.КэшЗначенийИни.ТекущийПакет.Вставить(КэшироватьФункцию+"_"+Параметр, Результат);
		//		КонецЕсли;
		//	КонецЕсли;
		//Исключение
		//	Ошибка = ОписаниеОшибки();
		//	сообщить(Ошибка);
		//КонецПопытки;	
		//возврат Результат;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на структуру, полученную в результате выполнения функции
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Объект1С=РассчитатьЗначение(СтрОбъекта,Контекст,ВходящийКэш);
		Если Найти(ЗнПер,".")>0 Тогда
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ИмяРек) Тогда
				Объект1С = Объект1С[ИмяРек];
			КонецЕсли;
			Возврат Объект1С;
		Исключение
		КонецПопытки;
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	Иначе
		возврат ЗнПер;
	КонецЕсли	
КонецФункции

&НаСервере
Процедура СоздатьДокументНаСервере(ИД, Режим)
	Фильтр = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());	
	ТЗВрем = ТабличнаяЧастьДокумента.Выгрузить(Фильтр);
	                                  	
	Если ТЗВрем.Количество() > 0 Тогда			
		Для каждого Стр Из ТЗВрем Цикл
			Если Стр.Назначение <> "Доп. расход" Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Не вся номенклатура поставщика сопоставлена' ");         
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) = Ложь Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не указан контрагент' ");         
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Заявка) = Ложь Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Не указана заявка' ");         
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	//
	СтруктураДокумента = Кэш.Получить(ИД);
	
	СоздаватьНовый = Ложь;
	Если Режим = 1 Тогда
		СоздаватьНовый = Истина;			
	КонецЕсли;
	
	СтруктураДокумента.Вставить("СоздаватьНовый", СоздаватьНовый);
	СтруктураДокумента.Вставить("СворачиватьПоНоменклатуре", СворачиватьПоНоменклатуре);
	СтруктураДокумента.Вставить("Партия", Партия);
	СтруктураДокумента.Вставить("Заявка", Заявка);
	СтруктураДокумента.Вставить("БудетСозданДокумент", БудетСозданДокумент);
	
	Обработки.ЭДО_Интерфейс.СоздатьДокумент(СтруктураДокумента);
	
	мКэш = Новый Соответствие(Кэш);
	мКэш.Вставить(ИД, СтруктураДокумента); 
	Кэш = Новый ФиксированноеСоответствие(мКЭш);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	ТД = Элементы.Документы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	
	Если ТД.Документ1С.Количество() > 0 Тогда 
		Режим = Новый СписокЗначений();
		Режим.Добавить(0,"Перезаполнить");
		Режим.Добавить(1,"Создать новые");
		Режим.Добавить(2,"Отменить");	
		Ответ = Вопрос("Есть сопоставленные документы. Выберите вариант загрузки.", Режим, 0);		
	Иначе
		Ответ = 1;
	КонецЕсли;
	
	СохранитьИзмененияНаСервере(ТД.ИдентификаторДокумента);	
	
	Если Ответ = 0 Или Ответ = 1 Тогда                              
		СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);
		
		Если СтруктураДокумента.ТабличнаяЧасть = Неопределено Тогда		
			Возврат;
		КонецЕсли;	
		
		Фильтр = Новый Структура("Назначение", "Услуги/Материалы");
		ТЗУслги = СтруктураДокумента.ТабличнаяЧасть.Скопировать(Фильтр);

		//+++ AK suvv 2018.11.27 ИП-00019917.06
		Если ТЗУслги.Количество() > 0 и БудетСозданДокумент <> "Возврат от покупателя" Тогда	
		//--- AK suvv
			СписокЗаявок =  Обработки.ЭДО_Интерфейс.ПолучитьСписокПодходящихЗаявок(Новый Структура("Контрагент, ИдентификаторПакета", СтруктураДокумента.Контрагент, СтруктураДокумента.ИдентификаторПакета), Истина);
			
			Если ЗначениеЗаполнено(Заявка) = Истина Тогда
				СписокЗаявок.Добавить(Заявка);
			КонецЕсли;	
			
			ПараметрыОткрытия = Новый Структура("СписокДокументов, Контрагент, ТекЗаявка, ОснованиеВДокументеЭДО, ТекСумма", СписокЗаявок, СтруктураДокумента.Контрагент, СтруктураДокумента.Заявка, СтруктураДокумента.Основание, СтруктураДокумента.СуммаПакета);	
			ВыбЗаявка = ОткрытьФормуМодально("РегистрСведений.СБИС_Заявки.Форма.ФормаВыбораЗаявки", ПараметрыОткрытия);
			
			Если ВыбЗаявка = КодВозвратаДиалога.Отмена Тогда
				Заявка = Неопределено;
				Возврат;	
			ИначеЕсли ЗначениеЗаполнено(ВыбЗаявка) = Истина Тогда
				Заявка = ВыбЗаявка;
			Иначе			
				Возврат;
			КонецЕсли;  		
		КонецЕсли;	
		
		СоздатьДокументНаСервере(ТД.ИдентификаторДокумента, Ответ);				
	КонецЕсли;
	
	СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);		
	ТД.Документ1С = СтруктураДокумента.СписокДокументов;
	
	Документы1С.Очистить();
	
	Для каждого ЗначСписка Из ТД.Документ1С Цикл
		НСтрДок = Документы1С.Добавить();
		НСтрДок.Документ = ЗначСписка.Значение; 
		НСтрДок.Сумма = ЗначСписка.Представление;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияНаСервере(ИД)
	Если ЗначениеЗаполнено(ИД) = Истина Тогда
		мКэш = Новый Соответствие(Кэш);
		СтруктураДокумента = мКэш.Получить(ИД);	
		Если ЗначениеЗаполнено(СтруктураДокумента.ИсхФайлXML) = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДокумента) = Истина И СтруктураДокумента.Свойство("ТабличнаяЧасть") = Истина И СтруктураДокумента.ТабличнаяЧасть.Количество() > 0 Тогда
			
			ИсходнаяТаблица = СтруктураДокумента.ТабличнаяЧасть;
			ТекущаяТаблица = РеквизитФормыВЗначение("ТабличнаяЧастьДокумента");
			ТекущаяТаблицаВрем = ТекущаяТаблица.Скопировать();
			
			ЕстьИзменения = Ложь;
			
			Если ИсходнаяТаблица.Количество() = ТекущаяТаблицаВрем.Количество() Тогда
				ИсходнаяТаблица.Сортировать("НомерСтроки");
				ТекущаяТаблицаВрем.Сортировать("НомерСтроки");
				
				Для а = 0 По ИсходнаяТаблица.Количество() - 1 Цикл
					СтрИсходная = ИсходнаяТаблица.Получить(а);
					СтрТекущая = ТекущаяТаблицаВрем.Получить(а);
					
					Если ЗначениеЗаполнено(СтрТекущая.Номенклатура) = Истина И СтрТекущая.Номенклатура <> СтрИсходная.Номенклатура Тогда
						Обработки.ЭДО_Интерфейс.СоздатьНоменклатуруПоставщика(Контрагент, СтрТекущая.Номенклатура, СтрТекущая.НоменклатураПоставщика);
						ЕстьИзменения = Истина;
					КонецЕсли;	
					
					Если СтрТекущая.Назначение <> СтрИсходная.Назначение Тогда
						ЕстьИзменения = Истина;
					КонецЕсли;	
					
					Если СтрТекущая.КоличествоПринято <> СтрИсходная.КоличествоПринято Тогда
						ЕстьИзменения = Истина;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	  		
			
			Если ЕстьИзменения = Истина Тогда
				Обработки.ЭДО_Интерфейс.СохранитьИзмененияТаблицыВXML(СтруктураДокумента, ТекущаяТаблицаВрем);
			КонецЕсли;	
			
			СтруктураДокумента.ТабличнаяЧасть = ТекущаяТаблица;			
			мКэш.Вставить(ИД, СтруктураДокумента);
			
		КонецЕсли;
		
		Кэш = Новый ФиксированноеСоответствие(мКэш);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	ТД = Элементы.Документы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СохранитьИзмененияНаСервере(ТД.ИдентификаторДокумента);
КонецПроцедуры


////////////////////////////////////////////////////
/////////////Процедуры ручного прикрепления

&НаСервере
Процедура ПрикрепитьКДокументу1СНаСервере(СтруктураДокумента)
	
	ВыбДок = СтруктураДокумента.ВыбДок;
	
	Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();
	Запись.Документ = ВыбДок;
	Запись.ВидДокумента = СтруктураДокумента.ТипДокумента;
	Запись.ДокументЭДО = СтруктураДокумента.ЭДО_ВходящийДокумент;
	Запись.Записать(); 	
	
	НДок =  ВыбДок.ПолучитьОбъект();  
	ЗаписыватьДокумент = Истина;
	
	ПериодЗакрыт = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(НДок);
	Если ПериодЗакрыт = Ложь Тогда				
		
		Если ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			
			НДок.ОтправлятьНаРаспознавание = Ложь;
									
			Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
				
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;	
								
				НДок.СчетФактура = СтруктураДокумента.ФайлPDF;				
				
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда					
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;
							
				НДок.УПД = СтруктураДокумента.ФайлPDF;
								
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
				ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;
				
				НДок.Акт = СтруктураДокумента.ФайлPDF;
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда 	
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = НДок.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки;	
				Запись.Значение = СтруктураДокумента.ФайлPDF;
				Запись.Записать();	
				ЗаписыватьДокумент = Ложь;
			КонецЕсли; 
			
			Если ЗаписыватьДокумент = Истина Тогда 				
				НДок.ОбменДанными.Загрузка = Истина;
				Попытка
					НДок.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(СтруктураДокумента.ЭДО_ВходящийДокумент, НДок.Ссылка);
			
		ИначеЕсли ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
			
			Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
				
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;	
								
				НДок.СчетФактура = СтруктураДокумента.ФайлPDF;				
				
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда					
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоСчетаФактуры = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;
							
				НДок.УПД = СтруктураДокумента.ФайлPDF;
								
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
				ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				Если СтруктураДокумента.ЗаменятьРеквизиты = Истина Тогда
					НДок.НомерВходящегоДокумента = СтруктураДокумента.НомерДокумента;				
					НДок.ДатаВходящегоДокумента = СтруктураДокумента.ДатаДокумента;
				КонецЕсли;
				
				НДок.Акт = СтруктураДокумента.ФайлPDF;
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда 	
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = НДок.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки;	
				Запись.Значение = СтруктураДокумента.ФайлPDF;
				Запись.Записать();	
				ЗаписыватьДокумент = Ложь;   				
			КонецЕсли;
			
			Если ЗаписыватьДокумент = Истина Тогда 				
				НДок.ОбменДанными.Загрузка = Истина;
				Попытка
					НДок.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;	
			
			Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(СтруктураДокумента.ЭДО_ВходящийДокумент, НДок.Ссылка);
		КонецЕсли;	
		
	КонецЕсли;  	
	       
	
	Если СтруктураДокумента.СписокДокументов.НайтиПоЗначению(ВыбДок) = Неопределено Тогда
		СтруктураДокумента.СписокДокументов.Добавить(ВыбДок);
	КонецЕсли;	
	
	мКэш = Новый Соответствие(Кэш);
	мКэш.Вставить(СтруктураДокумента.ИдентификаторДокумента, СтруктураДокумента); 
	Кэш = Новый ФиксированноеСоответствие(мКЭш);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьКДокументу1С(Команда)
	ТД = Элементы.Документы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(1,"Поступление товаров услуг");
	СписокВыбора.Добавить(2,"Поступление доп.расходов");
	СписокВыбора.Добавить(3,"Корректировка поступления");
	//СписокВыбора.Добавить(4,"Акт сверки");
	
	СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораВидаДокумента", ЭтаФорма, СтруктураДокумента);
	
	СписокВыбора.ПоказатьВыборЭлемента(Оповещение, "Какой вид документа выбрать?");
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаДокумента(ВыбранныйЭлемент, СписокПараметров) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДокумента = СписокПараметров;
	СтруктураДокумента.Вставить("ВыбранныйВид", ВыбранныйЭлемент.Значение);
	
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ТипДокумента) = Ложь
		ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.Прочее Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот,"Акт");
		СписокВыбора.Добавить(Перечисления.ЭДО_ТипыДокументов.АктСверки,"Акт сверки");
		СписокВыбора.Добавить(Перечисления.ЭДО_ТипыДокументов.СчетФактура,"Счет-фактура");
		СписокВыбора.Добавить(Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная,"Накладная");
		СписокВыбора.Добавить(Перечисления.ЭДО_ТипыДокументов.УПД,"УПД");		
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораТипаДокумента", ЭтаФорма, СтруктураДокумента);
	
		СписокВыбора.ПоказатьВыборЭлемента(Оповещение, "Какой тип документа?");
		
	Иначе	
		ПослеВыбораТипаДокумента(СтруктураДокумента.ТипДокумента, СтруктураДокумента)
	КонецЕсли;	
		
	           
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТипаДокумента(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = СписокПараметров;
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ПеречислениеСсылка.ЭДО_ТипыДокументов") Тогда
		СтруктураДокумента.ТипДокумента = ВыбранныйЭлемент; 
	Иначе	
		СтруктураДокумента.ТипДокумента = ВыбранныйЭлемент.Значение; 
	КонецЕсли;	
	
	Отбор = Новый Структура("Контрагент", Контрагент);
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	
	
	ОП = Новый ОписаниеОповещения("ВыборДокументаЗавершение", ЭтаФорма, СтруктураДокумента);
		
	Если СтруктураДокумента.ВыбранныйВид = 1 Тогда		
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора",ПараметрыФормы,,,,,ОП);
	ИначеЕсли СтруктураДокумента.ВыбранныйВид = 2 Тогда				
		ОткрытьФорму("Документ.ПоступлениеДопРасходов.ФормаВыбора",ПараметрыФормы,,,,,ОП);
	ИначеЕсли СтруктураДокумента.ВыбранныйВид = 3 Тогда	
		ОткрытьФорму("Документ.КорректировкаПоступления.ФормаВыбора",ПараметрыФормы,,,,,ОП);
	ИначеЕсли СтруктураДокумента.ВыбранныйВид = 4 Тогда	
		ОткрытьФорму("Документ.АктСверкиВзаиморасчетов.ФормаВыбора",ПараметрыФормы,,,,,ОП);	
	Иначе
		Возврат;
	КонецЕсли;	
		
    
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗавершение(Результат, СписокПараметров) Экспорт
		
	ВыбДок = Результат;	
	СтруктураДокумента = СписокПараметров;
	
	Если ЗначениеЗаполнено(ВыбДок) = Истина Тогда
		
		Если СтруктураДокумента.ВыбранныйВид = 3 Или  СтруктураДокумента.ВыбранныйВид = 4 Тогда
			СтруктураРеквизитовДокумента = Новый Структура("ВнешнийСФ, НомерСФ, ДатаСФ, НомерТорг, ДатаТорг", Ложь);
		Иначе	
			ВнешняяСФ = Обработки.ЭДО_Интерфейс.НайтиВнешнююСчетФактуру(ВыбДок.Ссылка);
			
			Если ВнешняяСФ = Неопределено Тогда			
				СтруктураРеквизитовДокумента = Новый Структура("ВнешнийСФ, НомерСФ, ДатаСФ, НомерТорг, ДатаТорг", 
				Ложь,
				ВыбДок.НомерВходящегоСчетаФактуры,
				ВыбДок.ДатаВходящегоСчетаФактуры,
				ВыбДок.НомерВходящегоДокумента,
				ВыбДок.ДатаВходящегоДокумента);
			Иначе
				СтруктураРеквизитовДокумента = Новый Структура("ВнешнийСФ, НомерСФ, ДатаСФ, НомерТорг, ДатаТорг", 
				Истина,
				ВнешняяСФ.НомерВходящегоДокумента,
				ВнешняяСФ.ДатаВходящегоДокумента,
				ВнешняяСФ.НомерВходящегоДокумента,
				ВнешняяСФ.ДатаВходящегоДокумента);     				
			КонецЕсли;
		КонецЕсли;	
		
		
		СтруктураДокумента.Вставить("ВыбДок", ВыбДок);
		
		ТекстВопроса = "";
		Прикреплять = КодВозвратаДиалога.Отмена;
		РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		
		Если СтруктураРеквизитовДокумента.ВнешнийСФ = Истина Тогда
			ТекстВопроса = "У выбранного документа заведена внешняя СФ. Номер и дата СФ в документе изменены не будут. Продолжить?";
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		Иначе			
			Если ЗначениеЗаполнено(СтруктураДокумента.НомерДокумента) = Ложь ИЛИ ЗначениеЗаполнено(СтруктураДокумента.ДатаДокумента) = Ложь Тогда			
				Прикреплять = КодВозвратаДиалога.Нет;
			Иначе										
				Если СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот 
					ИЛИ СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура
					//+++ AK suvv 2018.11.20 ИП-00020421
					ИЛИ СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда 
					//--- AK suvv
					Если ЗначениеЗаполнено(СтруктураРеквизитовДокумента.НомерТорг) = Ложь 
						И ЗначениеЗаполнено(СтруктураРеквизитовДокумента.ДатаТорг) = Ложь Тогда
						Прикреплять = КодВозвратаДиалога.Да;
					Иначе	
						Если СтруктураРеквизитовДокумента.НомерТорг <> СтруктураДокумента.НомерДокумента 
							ИЛИ СтруктураРеквизитовДокумента.ДатаТорг <> СтруктураДокумента.ДатаДокумента  Тогда
							ТекстВопроса = "В выбраном документе отличаются номер/дата входящего документа						
							|Номер вх. в документе: " + Строка(СтруктураРеквизитовДокумента.НомерТорг) + "
							|Номер вх. в документе ЭДО: " + Строка(СтруктураДокумента.НомерДокумента) + "
							|Дата вх. в документе: " + Формат(СтруктураРеквизитовДокумента.ДатаТорг, "ДФ=dd.MM.yyyy") + "
							|Дата вх. документе ЭДО: " + Формат(СтруктураДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
							|Заменить?";
						Иначе
							Прикреплять = КодВозвратаДиалога.Нет;
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура
					ИЛИ  СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
					Если ЗначениеЗаполнено(СтруктураРеквизитовДокумента.НомерСФ) = Ложь 
						И ЗначениеЗаполнено(СтруктураРеквизитовДокумента.ДатаСФ) = Ложь Тогда
						Прикреплять = КодВозвратаДиалога.Да;
					Иначе	
						Если СтруктураРеквизитовДокумента.НомерСФ <> СтруктураДокумента.НомерДокумента 
							ИЛИ СтруктураРеквизитовДокумента.ДатаСФ <> СтруктураДокумента.ДатаДокумента  Тогда
							ТекстВопроса = "В выбраном документе отличаются номер/дата входящей СФ						
							|Номер вх. СФ в документе: " + Строка(СтруктураРеквизитовДокумента.НомерСФ) + "
							|Номер вх. СФ в документе ЭДО: " + Строка(СтруктураДокумента.НомерДокумента) + "
							|Дата вх. СФ в документе: " + Формат(СтруктураРеквизитовДокумента.ДатаСФ, "ДФ=dd.MM.yyyy") + "
							|Дата вх. СФ документе ЭДО: " + Формат(СтруктураДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
							|Заменить?";
						Иначе
							Прикреплять = КодВозвратаДиалога.Нет;
						КонецЕсли;	
					КонецЕсли;
				ИначеЕсли  СписокПараметров.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда
					Прикреплять = КодВозвратаДиалога.Нет;  
				КонецЕсли;			
			КонецЕсли;			
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ТекстВопроса) = Истина Тогда
			ОП = Новый ОписаниеОповещения("ОкончаниеПрикрепленияДокумента", ЭтаФорма, СтруктураДокумента);
			ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалога); 
		Иначе			
			ОкончаниеПрикрепленияДокумента(Прикреплять, СтруктураДокумента);	
		КонецЕсли;
		  		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОкончаниеПрикрепленияДокумента(Результат, СписокПараметров) Экспорт
	СтруктураДокумента =  СписокПараметров;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда		
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		СтруктураДокумента.Вставить("ЗаменятьРеквизиты", Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда				
		СтруктураДокумента.Вставить("ЗаменятьРеквизиты", Ложь);
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда				
		СтруктураДокумента.Вставить("ЗаменятьРеквизиты", Ложь);	
	КонецЕсли;
	
	ПрикрепитьКДокументу1СНаСервере(СтруктураДокумента);	
	
	СтруктураДокумента = Кэш.Получить(СтруктураДокумента.ИдентификаторДокумента);		
	
	Документы1С.Очистить();
	
	Для каждого ЗначСписка Из СтруктураДокумента.СписокДокументов Цикл
		НСтрДок = Документы1С.Добавить();
		НСтрДок.Документ = ЗначСписка.Значение; 
		НСтрДок.Сумма = ЗначСписка.Представление;
	КонецЦикла;
	
	Для каждого Стр Из Документы Цикл
		Если Стр.ИдентификаторДокумента = СтруктураДокумента.ИдентификаторДокумента Тогда
			Если СтруктураДокумента.СписокДокументов.Количество() > 0 Тогда
				Стр.ЕстьВложения = 1;
			Иначе	
				Стр.ЕстьВложения = 0;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	



&НаКлиенте
Процедура ТабличнаяЧастьДокументаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДокументаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДокументаНоменклатураПриИзменении(Элемент)
	ТД = Элементы.ТабличнаяЧастьДокумента.ТекущиеДанные;
	Если ТД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТД.Номенклатура) = Истина Тогда		
		ТД.ЕдиницаИзмерения = ТД.Номенклатура.ЕдиницаХраненияОстатков;
		
		Если ТД.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда
			ТД.Назначение = "Товары";
		ИначеЕсли ТД.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда	
			ТД.Назначение = "Оборудование";
		Иначе					
			ТД.Назначение = "Услуги/Материалы";	
		КонецЕсли;
	КонецЕсли;
	
	ТДДок = Элементы.Документы.ТекущиеДанные;	
	
	ТДДок.Состояние = "Вся номенклатура сопоставлена";
	ТДДок.СтатусКартинка = 2;
	
	Для каждого СтрТЧ Из ТабличнаяЧастьДокумента Цикл
		Если ЗначениеЗаполнено(СтрТЧ.Номенклатура) = Ложь И СтрТЧ.Назначение <> "Доп. расход" Тогда
			ТДДок.Состояние = "Не вся номенклатура сопоставлена";
			ТДДок.СтатусКартинка = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаДокумент Тогда
		Элементы.ПолеHTMLДокумента.Видимость = Ложь;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИзображение Тогда
		Элементы.ПолеHTMLДокумента.Видимость = Истина;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Контрагент) = Ложь ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Сообщить("Для выбора заявки необходимо сперва сопоставить контрагента");
		Возврат;
	КонецЕсли;		
		
	СписокЗаявок =  Обработки.ЭДО_Интерфейс.ПолучитьСписокПодходящихЗаявок(Новый Структура("Контрагент, ИдентификаторПакета", Контрагент, ИдентификаторПакета), Истина);
	
	Если ЗначениеЗаполнено(Заявка) = Истина Тогда
		СписокЗаявок.Добавить(Заявка);
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура("СписокДокументов, Контрагент, ТекЗаявка, ОснованиеВДокументеЭДО, ТекСумма", СписокЗаявок, Контрагент, Заявка, Основание, СуммаПакета);

	//ПараметрыОткрытия = Новый Структура("СписокДокументов, Контрагент", СписокЗаявок, Контрагент);
	
	ВыбЗаявка = ОткрытьФормуМодально("РегистрСведений.СБИС_Заявки.Форма.ФормаВыбораЗаявки", ПараметрыОткрытия, ЭтаФорма);
	
	Если ВыбЗаявка = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЗаявка = КодВозвратаДиалога.Отмена Тогда
		//ВыбраннаяСтрока.Заявка  = Неопределено;	
		Заявка = Неопределено;
	Иначе
		//ВыбраннаяСтрока.Заявка  = Заявка;
		Заявка = ВыбЗаявка;
	КонецЕсли;  
	
	ОбновитьЗаявкуВЗаписиЭДОПакеты(Новый Структура("Заявка, ИдентификаторПакета", Заявка, ИдентификаторПакета));
	
КонецПроцедуры


&НаСервереБезКонтекста 
Процедура ОбновитьЗаявкуВЗаписиЭДОПакеты(Структура)
	Запись = РегистрыСведений.ЭДО_Пакеты.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторПакета = Структура.ИдентификаторПакета;
	Запись.Прочитать();
	Если Запись.Выбран() = Истина Тогда
		Запись.Заявка = Структура.Заявка;
		Запись.Записать();
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;		
	Если Поле.Имя = "ДокументыДокумент1С" Тогда
		Если ЗначениеЗаполнено(ТД.Документ1С) = Истина Тогда
			Если ТД.Документ1С.Количество() > 0 Тогда			
				ДокСсылка = ТД.Документ1С.Получить(0).Значение;
				ОткрытьЗначение(ДокСсылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура Отклонить(Команда)
		
	МассивСтрок = Элементы.Документы.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивИДДокументов = Новый Массив;
	Для каждого Зн Из МассивСтрок Цикл
		МассивИДДокументов.Добавить(Элементы.Документы.ДанныеСтроки(Зн).ИдентификаторДокумента);
	КонецЦикла;	
	
	Комментарий = "";
	Если ВвестиЗначение(Комментарий, "Комментарий к отклонению (обязательно):") Тогда
		СтрукутраПараметров = Неопределено;
		
		Для каждого СтрМассива Из МассивИДДокументов Цикл
			СтруктураДокумента = Кэш.Получить(СтрМассива);
			ОтклонитьУтвердитьНаКлиенте(Ложь, Комментарий, СтруктураДокумента, КэшЭДО); 
			
			СтрукутраПараметров = Новый Структура("ИД_Пакета", СтруктураДокумента.ИдентификаторПакета);
			
			КаналОбмена = СтруктураДокумента.КаналОбмена;	
			Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
				Прервать;
			КонецЕсли;   
		КонецЦикла;	
		
		Если СтрукутраПараметров <> Неопределено Тогда
			ОтобразитьВходящийДокумент(СтрукутраПараметров);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура Утвердить(Команда)
	
	МассивСтрок = Элементы.Документы.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивИДДокументов = Новый Массив;
	Для каждого Зн Из МассивСтрок Цикл
		МассивИДДокументов.Добавить(Элементы.Документы.ДанныеСтроки(Зн).ИдентификаторДокумента);
	КонецЦикла;	
	
	Ответ = Вопрос("Вы действительно хотите утвердить документ?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Комментарий = "";		
		СтрукутраПараметров = Неопределено;
		
		Для каждого СтрМассива Из МассивИДДокументов Цикл
			СтруктураДокумента = Кэш.Получить(СтрМассива);
			ОтклонитьУтвердитьНаКлиенте(Истина, Комментарий, СтруктураДокумента, КэшЭДО); 
			
			СтрукутраПараметров = Новый Структура("ИД_Пакета", СтруктураДокумента.ИдентификаторПакета);
			
			КаналОбмена = СтруктураДокумента.КаналОбмена;	
			Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		
		Если СтрукутраПараметров <> Неопределено Тогда
			ОтобразитьВходящийДокумент(СтрукутраПараметров);
		КонецЕсли;	
	КонецЕсли;  	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьУтвердитьНаКлиенте(Утвердить, Комментарий, СтруктураДокумента, КэшЭДО)	

	КаналОбмена = СтруктураДокумента.КаналОбмена;
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		ЭДО_ОбщегоНазначения.УтвердитьОтклонитьДокумент(КэшЭДО, СтруктураДокумента.ИдентификаторПакета, Справочники.ЭДО_КаналыОбмена.СБИС, Утвердить, Комментарий);
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		ЭДО_ОбщегоНазначения.УтвердитьОтклонитьДокумент(КэшЭДО, СтруктураДокумента.ИдентификаторДокумента, Справочники.ЭДО_КаналыОбмена.Диадок, Утвердить, Комментарий);		
	КонецЕсли;

	
КонецПроцедуры


&НаСервере
Процедура ОтклонитьУтвердитьНаСервере(Утвердить, Комментарий, СтруктураДокумента)
	
	КэшЭДО = ЭДО_ОбщегоНазначения.ПолучитьКэш();	 	
	КаналОбмена = СтруктураДокумента.КаналОбмена;
	
	Если КаналОбмена = Справочники.ЭДО_КаналыОбмена.СБИС Тогда
		ЭДО_ОбщегоНазначения.УтвердитьОтклонитьДокумент(КэшЭДО, СтруктураДокумента.ИдентификаторПакета, Справочники.ЭДО_КаналыОбмена.СБИС, Утвердить, Комментарий);
	ИначеЕсли КаналОбмена = Справочники.ЭДО_КаналыОбмена.Диадок Тогда
		ЭДО_ОбщегоНазначения.УтвердитьОтклонитьДокумент(КэшЭДО, СтруктураДокумента.ИдентификаторДокумента, Справочники.ЭДО_КаналыОбмена.Диадок, Утвердить, Комментарий);		
	КонецЕсли;

	
КонецПроцедуры



&НаКлиенте
Процедура ПечатьТабличныйДокумент(Команда)
	ТД = Элементы.Документы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);
	
	МасивОбъектов = Новый Массив;
	МасивОбъектов.Добавить(СтруктураДокумента.ЭДО_ВходящийДокумент);
	
	ТабДок = Обработки.ЭДО_Интерфейс.ПечатьТабличногоДокумента(МасивОбъектов);
	ТабДок.Показать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура БудетСозданДокументПриИзменении(Элемент)
	Если БудетСозданДокумент = "ПДР" Тогда
		Для каждого Стр ИЗ ТабличнаяЧастьДокумента Цикл
			Стр.Назначение = "Доп. расход";	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДокументаНазначениеПриИзменении(Элемент)
	ТДДок = Элементы.Документы.ТекущиеДанные;	
	
	ТДДок.Состояние = "Вся номенклатура сопоставлена";
	ТДДок.СтатусКартинка = 2;
	
	Для каждого СтрТЧ Из ТабличнаяЧастьДокумента Цикл
		Если ЗначениеЗаполнено(СтрТЧ.Номенклатура) = Ложь И СтрТЧ.Назначение <> "Доп. расход" Тогда
			ТДДок.Состояние = "Не вся номенклатура сопоставлена";
			ТДДок.СтатусКартинка = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	
	//пироватьФайл(ПолноеИмяФайла, Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлОбъект.Ссылка));
	ТД = Элементы.Документы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;  	
	
	СтруктураДокумента = Кэш.Получить(ТД.ИдентификаторДокумента);
	Если ЗначениеЗаполнено(СтруктураДокумента.ПутьКФайлуPDF) = Истина Тогда
		
		//ФайлТемп = ПолучитьИмяВременногоФайла(".pdf");
		//КопироватьФайл(СтруктураДокумента.ПутьКФайлуPDF, ФайлТемп);
		////ПолеHTMLДокумента = СтруктураДокумента.ПутьКФайлуPDF;
		//
		ДанныеШапкиXML.УстановитьТекст(СтруктураДокумента.ПутьКФайлуPDF);
		//
		//ПолеHTMLДокумента = "";

	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Открепить(Команда)
	ОткрепитьНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьБезИзмененияРеквизитовДокумента(Команда)
	ОткрепитьНаКлиенте(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьНаКлиенте(ОчищатьРеквизиты)
	ТД = Элементы.Документы1С.ТекущиеДанные;
	
	Если ТД = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТД.Документ) = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ТД_ЭДО = Элементы.Документы.ТекущиеДанные;
			
	Если ТД_ЭДО = Неопределено  Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураДокумента = Кэш.Получить(ТД_ЭДО.ИдентификаторДокумента);
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ЭДО_ВходящийДокумент) = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	//ОчищатьРеквизиты = Ложь;
	Ответ = Вопрос("Вы собираетесь открепить документ. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ОчищатьРеквизиты = Истина;
	//КонецЕсли;	
	//
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписыватьДокумент = Истина;
	
	Запись = РегистрыСведений.ЭДО_СопоставлениеДокументов.СоздатьМенеджерЗаписи();	
	Запись.ВидДокумента = СтруктураДокумента.ТипДокумента;
	Запись.Документ = ТД.Документ;
	Запись.Прочитать();
	Запись.Удалить();
	
	//Если ОчищатьРеквизиты = Истина Тогда
		НДок =  ТД.Документ.ПолучитьОбъект();
		НДок.ДокументыПолучены = Ложь;
		
		Если ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			
			НДок.ОтправлятьНаРаспознавание = Ложь;
			
					
			Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = "";
					НДок.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
				КонецЕсли;
				НДок.СчетФактура = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = "";
					НДок.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
				КонецЕсли;
				НДок.УПД = Справочники.Файлы.ПустаяСсылка();				
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
				ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоДокумента = "";
					НДок.ДатаВходящегоДокумента = Дата(1,1,1);
				КонецЕсли;
				НДок.Акт  = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли  СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда	
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = НДок.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки;	
				Запись.Значение = Справочники.Файлы.ПустаяСсылка();
				Запись.Записать();	
				ЗаписыватьДокумент = Ложь;

			КонецЕсли; 
			
			Если ЗаписыватьДокумент = Истина Тогда 				
				НДок.ОбменДанными.Загрузка = Истина;
				Попытка
					НДок.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;	
		ИначеЕсли ТипЗнч(НДок) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
			
			Если СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = "";
					НДок.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
				КонецЕсли;
				НДок.СчетФактура = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда	
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоСчетаФактуры = "";
					НДок.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
				КонецЕсли;
				НДок.УПД = Справочники.Файлы.ПустаяСсылка();				
			ИначеЕсли СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная 
				ИЛИ СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
				Если ОчищатьРеквизиты = Истина Тогда
					НДок.НомерВходящегоДокумента = "";
					НДок.ДатаВходящегоДокумента = Дата(1,1,1);
				КонецЕсли;
				НДок.Акт  = Справочники.Файлы.ПустаяСсылка();
			ИначеЕсли  СтруктураДокумента.ТипДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда	
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = НДок.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки;	
				Запись.Значение = Справочники.Файлы.ПустаяСсылка();
				Запись.Записать();
				ЗаписыватьДокумент = Ложь;	
			КонецЕсли; 
			
			Если ЗаписыватьДокумент = Истина Тогда 				
				НДок.ОбменДанными.Загрузка = Истина;
				Попытка
					НДок.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
		
	//КонецЕсли;
	
	ИндексСтроки = Документы1С.Индекс(ТД);
	Документы1С.Удалить(ИндексСтроки);
	
	Список = ТД_ЭДО.Документ1С;
	НайденныйЭлемент = Список.НайтиПоЗначению(ТД.Документ);
	Если НайденныйЭлемент <> Неопределено Тогда
		Список.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	Если Список.Количество() = 0 Тогда
		ТД_ЭДО.ЕстьВложения = 0;
	КонецЕсли;	
		


КонецПроцедуры	

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВсеТовар(Команда)
	ИзменитьНазначениеНаКлиенте("Товары");	
КонецПроцедуры

&НаКлиенте
Процедура ВсеУслуга(Команда)
	ИзменитьНазначениеНаКлиенте("Услуги/Материалы");	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОборудование(Команда)
	ИзменитьНазначениеНаКлиенте("Оборудование");	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДопРасход(Команда)
	ИзменитьНазначениеНаКлиенте("Доп. расход");	
КонецПроцедуры


&НаКлиенте  
Процедура ИзменитьНазначениеНаКлиенте(Назначение)
	МассивСтрок = Элементы.ТабличнаяЧастьДокумента.ВыделенныеСтроки;
	Если МассивСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка ИЗ МассивСтрок Цикл
		ТекСтр = ТабличнаяЧастьДокумента.НайтиПоИдентификатору(Строка);
		ТекСтр.Назначение = Назначение;
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	//+++ AK suvv 2018.11.27 ИП-00019917.06
	ЗаполнитьСписокЗначенийБудетСозданДокумент();
	//--- AK suvv
	
КонецПроцедуры 

//+++ AK suvv 2018.11.27 ИП-00019917.06
&НаКлиенте
Процедура ЗаполнитьСписокЗначенийБудетСозданДокумент()
	
	Элементы.БудетСозданДокумент.СписокВыбора.Очистить();
	Элементы.БудетСозданДокумент.СписокВыбора.Добавить("ПТУ", "Поступление товаров и услуг");
	Элементы.БудетСозданДокумент.СписокВыбора.Добавить("ПДР", "Поступление доп. расходов");
	Элементы.БудетСозданДокумент.СписокВыбора.Добавить("ПТУ+ПДР", "ПТУ + ПДР");
	
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваОбъектов.СтатьяСписания"));
	ТабСвойств = ЗаполнениеДокументов.ВернутьТаблицуЗначенийСвойств(Массив,Контрагент);	
	Если ТабСвойств.Количество() > 0 и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЯвляетсяПокупателем") Тогда 
		Если ЗначениеЗаполнено(ТабСвойств[0].Значение) Тогда
			Элементы.БудетСозданДокумент.СписокВыбора.Добавить("Возврат от покупателя", "Возврат товаров от покупателя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv







