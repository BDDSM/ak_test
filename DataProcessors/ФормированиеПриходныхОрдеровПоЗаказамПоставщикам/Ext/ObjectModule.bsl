
#Область ПрограммныйИнтерфейс

//+++АК LATV 2018.10.07 ИП-00020000
Процедура ВыполнитьОбработкуВФоне(Параметры, АдресХранилища) Экспорт

	Если Параметры.Действие = "Заполнение" Тогда
		
		Период		= Параметры.Период;
		Организация	= Параметры.Организация;
		Склад		= Параметры.Склад;
		
		ИнициализироватьСКД();
		КомпоновщикНастроек.ЗагрузитьНастройки(Параметры.НастройкиКомпоновщика);
		
		ЗаполнитьДанные();
		
		Результат = Новый Структура;
		Результат.Вставить("ОбрабатываемыеДокументы", ОбрабатываемыеДокументы.Выгрузить());
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	ИначеЕсли Параметры.Действие = "ОбработкаРезультата" Тогда
		
		ОбрабатываемыеДокументы.Загрузить(Параметры.ОбрабатываемыеДокументы);
		
		СформироватьДокументы();
		
		Результат = Новый Структура;
		Результат.Вставить("ОбрабатываемыеДокументы", ОбрабатываемыеДокументы.Выгрузить());
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.10.07 ИП-00020000
Процедура ИнициализироватьСКД(УникальныйИдентификаторФормы = Неопределено) Экспорт

	СхемаКомпоновкиДанных = ПолучитьМакет("ПодборДокументов");
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Иначе
		URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

//+++АК LATV 2018.10.07 ИП-00020000
Процедура ЗаполнитьДанные()

	ПодготовитьКомпоновщикКВыводу();
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ПодборДокументов");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатВыполнения = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатВыполнения);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	ОбрабатываемыеДокументы.Загрузить(РезультатВыполнения);

КонецПроцедуры

//+++АК LATV 2018.10.07 ИП-00020000
Процедура ПодготовитьКомпоновщикКВыводу()

	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета"
		, Период);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация"
		, Организация);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад"
		, Склад);

КонецПроцедуры

#КонецОбласти

#Область Запись

//+++АК LATV 2018.10.07 ИП-00020000
Процедура СформироватьДокументы() 

	Отбор = Новый Структура("Выбрать, ПриходныйОрдер", Истина, Документы.ПриходныйОрдерСклад.ПустаяСсылка());
	Группировка = ОбрабатываемыеДокументы.Выгрузить(Отбор, "Поставщик, СкладХранения");
	Группировка.Свернуть("Поставщик, СкладХранения");
	
	Для Каждого ТекСтрокаГруппировки Из Группировка Цикл
		
		Отбор.Вставить("Поставщик",		ТекСтрокаГруппировки.Поставщик);
		Отбор.Вставить("СкладХранения",	ТекСтрокаГруппировки.СкладХранения);
		ВыбранныеДанные = ОбрабатываемыеДокументы.НайтиСтроки(Отбор);
		
		НовыйДокумент = СоздатьДокумент(ТекСтрокаГруппировки, ВыбранныеДанные);
		
		Для Каждого ТекСтрокаТЧ Из ВыбранныеДанные Цикл
			ТекСтрокаТЧ.ПриходныйОрдер = НовыйДокумент;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.10.07 ИП-00020000
Функция СоздатьДокумент(ДанныеЗаполнения, ДанныеЗаполненияТЧ)

	НовыйДокумент = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.Дата = ТекущаяДата();
	
	НовыйДокумент.Организация	= Организация;
	НовыйДокумент.Поставщик		= ДанныеЗаполнения.Поставщик;
	НовыйДокумент.Склад			= ДанныеЗаполнения.СкладХранения;
	
	НовыйДокумент.ОжидаемыйПриход = Истина;
	НовыйДокумент.НомерДокументаПоставщика	= "б/н";
	НовыйДокумент.ДатаДокументаПоставщика	= ТекущаяДата();
	
	НовыйДокумент.Автор			= глЗначениеПеременной("глТекущийПользователь");
	НовыйДокумент.Комментарий	= "#ФормированиеПриходныхОрдеровПоЗаказамПоставщикам";
	
	Заказы = Новый Массив;
	Для Каждого ТекСтрокаТЧ Из ДанныеЗаполненияТЧ Цикл
		Заказы.Добавить(ТекСтрокаТЧ.ЗаказПоставщику);
	КонецЦикла;
	
	ЗаполнитьТоварыПоЗаказамПоставщику(НовыйДокумент, Заказы);
	
	Если Не НовыйДокумент.ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать приходный ордер для поставщика ""%1"" по складу ""%2"" по причине: %3'")
			, ДанныеЗаполнения.Поставщик, ДанныеЗаполнения.СкладХранения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйДокумент.Ссылка;

КонецФункции

//+++АК LATV 2018.10.07 ИП-00020000
Процедура ЗаполнитьТоварыПоЗаказамПоставщику(НовыйДокумент, МассивЗаказы)

	ТабТовары = Документы.ПриходныйОрдерСклад.ПолучитьТоварыПоЗаказамПоставщику(МассивЗаказы
		, НовыйДокумент.Склад, НовыйДокумент.Поставщик, НовыйДокумент.Дата);
	Для Каждого СтрокаТовара Из ТабТовары Цикл
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		НоваяСтрока.Номенклатура		= СтрокаТовара.Номенклатура;
		НоваяСтрока.Характеристика		= СтрокаТовара.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения	= СтрокаТовара.ЕдиницаИзмерения;
		НоваяСтрока.Количество			= СтрокаТовара.Количество;
		НоваяСтрока.ЗаказПоставщику		= СтрокаТовара.Заказ;
	КонецЦикла;
	
	Для Каждого ЭлементЗаказ Из МассивЗаказы Цикл
		НоваяСтрока = НовыйДокумент.ЗаказыПоставщику.Добавить();
		НоваяСтрока.Документ = ЭлементЗаказ;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
