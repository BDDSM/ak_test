
&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(ЭтаФорма.ДатаНачала, ЭтаФорма.ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		ЭтаФорма.ДатаНачала 	= СтандартныйПериод.ДатаНачала;
		ЭтаФорма.ДатаОкончания 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачала)
			И ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания) Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания)
				И ЭтаФорма.ДатаНачала > ЭтаФорма.ДатаОкончания Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаОкончания);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаНачала) Тогда
			ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаНачала)
		КонецЕсли;
		Если НЕ ЭтаФорма.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаОкончания) Тогда
			ЭтаФорма.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаОкончания)
		КонецЕсли;
		
		//ПриИзмененииПериода();
	
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаНачала) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСписокСтатейДДСПоУмолчанию()
	
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("132030")); // Оплата доставки товаров в ТТ и Магазины
	СписокСтатей.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("132031")); // Оплата общих транспортных расходов
	
	Возврат СписокСтатей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПеревозчика(НаименованиеПеревозчика, мПеревозчик)
	
	Если мПеревозчик.Пустая() Тогда
		Возврат Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеПеревозчика);
	Иначе
		Возврат мПеревозчик;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТТ(НаименованиеТТ)
	
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(НаименованиеТТ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(НаименованиеОрганизации)
	
	Возврат Справочники.Организации.НайтиПоНаименованию(НаименованиеОрганизации);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКЛ(ФИОВодителя)
	
	СпрКонтЛица = Справочники.КонтактныеЛица;
	ТекКЛ = СпрКонтЛица.НайтиПоНаименованию(ФИОВодителя, Истина);
	Если ТекКЛ.Пустая() Тогда
		НовоеКЛ = СпрКонтЛица.СоздатьЭлемент();
		НовоеКЛ.Наименование = ФИОВодителя;
		
		ТекФИО = ФИОВодителя;
		ПозПробел = Найти(ТекФИО, " ");
		Если ПозПробел > 0 Тогда
			НовоеКЛ.Фамилия 		= Лев(ТекФИО, ПозПробел - 1);
			ТекФИО = СокрЛ(Сред(ТекФИО, ПозПробел + 1));
			ПозПробел = Найти(ТекФИО, " ");
			Если ПозПробел > 0 Тогда
				НовоеКЛ.Имя 		= Лев(ТекФИО, ПозПробел - 1);
				НовоеКЛ.Отчество 	= СокрЛ(Сред(ТекФИО, ПозПробел + 1))
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НовоеКЛ.Записать();
			ТекКЛ = НовоеКЛ.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекКЛ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВодителя(ФИОВодителя, ТекКЛ, ТекПеревозчик, НомСтроки)
	
	СпрКонтЛицаКонтр = Справочники.КонтактныеЛицаКонтрагентов;
	ТекВодитель = СпрКонтЛицаКонтр.НайтиПоНаименованию(ФИОВодителя, Истина,, ТекПеревозчик);
	Если ТекВодитель.Пустая() Тогда
		НовыйВодитель = СпрКонтЛицаКонтр.СоздатьЭлемент();
		НовыйВодитель.Владелец 			= ТекПеревозчик;
		НовыйВодитель.Наименование 		= ФИОВодителя;
		НовыйВодитель.КонтактноеЛицо 	= ТекКЛ;
		НовыйВодитель.Должность			= "Водитель";
		Попытка
			НовыйВодитель.Записать();
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": создан водитель """ + НовыйВодитель + """");
			ТекВодитель = НовыйВодитель.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекВодитель;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАвтомобиль(СтрокаАвтомобиль)
	
	Возврат Справочники.Автомобили.НайтиПоНаименованию(СтрокаАвтомобиль);
	
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.ВысотаШапки = 2;
	ЭтаФорма.НомерКолонкиКонтрагент 	= 1;
	ЭтаФорма.НомерКолонкиВодитель 		= 2;
	ЭтаФорма.НомерКолонкиАвтомобиль 	= 3;
	ЭтаФорма.НомерКолонкиТорговаяТочка 	= 4;
	ЭтаФорма.НомерКолонкиТариф 			= 5;
	ЭтаФорма.НомерКолонкиОрганизация	= 6;
	ЭтаФорма.НомерКолонкиПервоеЧисло 	= 7;
	
	ЭтаФорма.СтатьиДДС = ПолучитьСписокСтатейДДСПоУмолчанию();
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания)
			И ЭтаФорма.ДатаНачала > ЭтаФорма.ДатаОкончания Тогда
		ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаОкончания);
	КонецЕсли;
	Если НЕ ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаНачала) Тогда
		ЭтаФорма.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаНачала)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачала)
			И ЭтаФорма.ДатаНачала > ЭтаФорма.ДатаОкончания Тогда
		ЭтаФорма.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаНачала);
	КонецЕсли;
	Если НЕ ЭтаФорма.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаОкончания) Тогда
		ЭтаФорма.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаОкончания)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЭксельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файл Excel";
	ДиалогВыбораФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла			= ЭтаФорма.ФайлЭксель;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ФайлЭксель = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЭксельОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + ЭтаФорма.ФайлЭксель);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКолонкиКонтрагентПриИзменении(Элемент)
	
	мДоступность = НЕ ЗначениеЗаполнено(ЭтаФорма.НомерКолонкиКонтрагент);
	Элементы.Перевозчик.Доступность 				= мДоступность;
	Элементы.Перевозчик.АвтоОтметкаНезаполненного 	= мДоступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	мДоступность = НЕ ЭтаФорма.Перевозчик.Пустая();
	Элементы.НомерКолонкиКонтрагент.Доступность 				= мДоступность;
	Элементы.НомерКолонкиКонтрагент.АвтоОтметкаНезаполненного 	= мДоступность;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОчиститьРегистрДоставкиНаТТ(мДатаНачалаПериода)
	
	мРегистр = РегистрыСведений.ДоставкаНаТорговыеТочки;
	мПоследняяДата = НачалоДня(КонецМесяца(мДатаНачалаПериода));
	
	ТекДата = мДатаНачалаПериода;
	Пока НЕ ТекДата > мПоследняяДата Цикл
		
		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(ТекДата);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""Доставка на торговые точки""";
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВРегистрДоставкиНаТТ(МассивСтруктур)
	
	Если МассивСтруктур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	мРегистр = РегистрыСведений.ДоставкаНаТорговыеТочки;
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПараметров);
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикДоставкиНаТТ(Команда)
	
	Если ЭтаФорма.ФайлЭксель = "" Тогда
		Возврат;
	КонецЕсли;
	
	КолДнейПериода = День(ЭтаФорма.ДатаОкончания);
	
	//
	ОчиститьРегистрДоставкиНаТТ(ЭтаФорма.ДатаНачала);
	
	
	
	Эксель = Новый COMОбъект("Excel.Application");
	
	Эксель_документ = Эксель.Workbooks.Open(ЭтаФорма.ФайлЭксель);
	ЛистЭксель = Эксель_документ.Sheets(1);
	
	МассивСтруктур = Новый Массив;
	СтрокаПеревозчик = "";
	
	НомСтроки = ЭтаФорма.ВысотаШапки + 1;
	СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
	
	Пока ЗначениеЗаполнено(СтрокаТТ)
		 ИЛИ ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиКонтрагент).Interior.ColorIndex > 0 Цикл
		
		ЯчейкаПеревозчик = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиКонтрагент);
		Если ЯчейкаПеревозчик.Interior.ColorIndex > 0 Тогда  // разделитель контрагентов - строка другого цвета
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
		КонецЕсли;
		
		Если (НЕ СокрЛП(ЯчейкаПеревозчик.Value) = "")
					И НЕ СокрЛП(ЯчейкаПеревозчик.Value) = СтрокаПеревозчик Тогда
			СтрокаПеревозчик = СокрЛП(ЯчейкаПеревозчик.Value);
			ТекПеревозчик = ПолучитьПеревозчика(СтрокаПеревозчик, ЭтаФорма.Перевозчик);
			Если ТекПеревозчик.Пустая() Тогда
				Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": перевозчик """ + СтрокаПеревозчик + """ не найден!");
				НомСтроки = НомСтроки + 1;
				СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТекТТ = ПолучитьТТ(СтрокаТТ);
		Если ТекТТ.Пустая() Тогда
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": торговая точка """ + СтрокаТТ + """ не найдена!");
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
		КонецЕсли;
		
		СтрокаОрганизации = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиОрганизация).Value;
		ТекОрганизация = ПолучитьОрганизацию(СтрокаОрганизации);
		Если ТекОрганизация.Пустая() Тогда
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": организация """ + СтрокаОрганизации + """ не найдена!");
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
		КонецЕсли;
		
		ФИОВодителя = СокрЛП(ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиВодитель).Value);
		ТекКЛ = ПолучитьКЛ(ФИОВодителя);
		Если ТекКЛ.Пустая() Тогда
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": не создано контактное лицо!");
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
		КонецЕсли;
		
		ТекВодитель = ПолучитьВодителя(ФИОВодителя, ТекКЛ, ТекПеревозчик, НомСтроки);
		Если ТекВодитель.Пустая() Тогда
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": не создан водитель!");
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
		КонецЕсли;
		
		СтрокаАвтомобиль = СокрЛП(ВРег(Прав(ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиАвтомобиль).Value, 12)));
		ТекАвтомобиль = ПолучитьАвтомобиль(СтрокаАвтомобиль);
 		Если ТекАвтомобиль.Пустая() Тогда
			Сообщить("Строка № " + Формат(НомСтроки, "ЧГ=") + ": не найден автомобиль!");
			НомСтроки = НомСтроки + 1;
			СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
			Продолжить;
 		КонецЕсли;
		
		ТекСтоимость = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТариф).Value;
		Если НЕ ТипЗнч(ТекСтоимость) = Тип("Число") Тогда
			Попытка
				ТекСтоимость = Число(ТекСтоимость);
			Исключение
				ТекСтоимость = 0;
			КонецПопытки;
		КонецЕсли;
		
		
		//
		Для н = 1 По КолДнейПериода Цикл
			ЯчейкаЭксель = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиПервоеЧисло + н - 1);
			Если ЯчейкаЭксель.Interior.ColorIndex > 0 Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Дата"			, ЭтаФорма.ДатаНачала + (н - 1) * 86400);
				СтруктураПараметров.Вставить("ТорговаяТочка", ТекТТ);
				СтруктураПараметров.Вставить("Стоимость"	, ТекСтоимость);
				СтруктураПараметров.Вставить("Перевозчик"	, ТекПеревозчик);
				СтруктураПараметров.Вставить("Водитель"		, ТекВодитель);
				СтруктураПараметров.Вставить("Автомобиль"	, ТекАвтомобиль);
				СтруктураПараметров.Вставить("Организация"	, ТекОрганизация);
				МассивСтруктур.Добавить(СтруктураПараметров);
			КонецЕсли;
		КонецЦикла;
		
		
		//
		НомСтроки = НомСтроки + 1;
		СтрокаТТ = ЛистЭксель.Cells(НомСтроки, ЭтаФорма.НомерКолонкиТорговаяТочка).Value;
		
	КонецЦикла;
	
	
	//
	ЗаписатьВРегистрДоставкиНаТТ(МассивСтруктур);
	
	
	Эксель.Quit();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГрафикДоставкиНаТТ(Команда)
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.ДоставкаНаТорговыеТочки.ФормаСписка");
	
	мСписок = ФормаСписка.Список;
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаНачала) Тогда
		ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");   
	    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	    ЭлементОтбора.Использование  = Истина;
	    ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания) Тогда
		ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");   
	    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	    ЭлементОтбора.Использование  = Истина;
	    ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ДатаОкончания;
	КонецЕсли;
	
	//
	ФормаСписка.ОткрытьМодально();
	
КонецПроцедуры

Процедура ЗаполнитьПеревозчиковСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ЭтаФорма.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтаФорма.ДатаОкончания));
	Запрос.УстановитьПараметр("СтатьиДДС"		, ЭтаФорма.СтатьиДДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокРасходИзБанка.Организация КАК Организация,
	|	ДокРасходИзБанка.Контрагент КАК Перевозчик,
	|	ДокРасходИзБанка.ДоговорКонтрагента КАК Договор,
	|	СУММА(ДокРасходИзБанка.СуммаДокумента) КАК СуммаОплачено
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Документ.РасходИзБанка КАК ДокРасходИзБанка
	|ГДЕ
	|	ДокРасходИзБанка.Контрагент.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
	|	И ДокРасходИзБанка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокРасходИзБанка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокРасходИзБанка.Организация,
	|	ДокРасходИзБанка.Контрагент,
	|	ДокРасходИзБанка.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.Организация КАК Организация,
	|	ВТОсновная.Перевозчик КАК Перевозчик,
	|	ВТОсновная.Договор КАК Договор,
	|	ВТОсновная.СуммаОплачено КАК СуммаОплачено,
	|	ЕСТЬNULL(ДоставкаНаТорговыеТочки.КоличествоПоездок, 0) КАК КоличествоПоездок,
	|	ЕСТЬNULL(ДоставкаНаТорговыеТочки.СтоимостьПеревозки, 0) КАК СуммаРасчетная
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоставкаНаТорговыеТочки.Перевозчик КАК Перевозчик,
	|			КОЛИЧЕСТВО(ДоставкаНаТорговыеТочки.ТорговаяТочка) КАК КоличествоПоездок,
	|			СУММА(ДоставкаНаТорговыеТочки.Стоимость) КАК СтоимостьПеревозки
	|		ИЗ
	|			РегистрСведений.ДоставкаНаТорговыеТочки КАК ДоставкаНаТорговыеТочки
	|		ГДЕ
	|			ДоставкаНаТорговыеТочки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДоставкаНаТорговыеТочки.Перевозчик) КАК ДоставкаНаТорговыеТочки
	|		ПО (ДоставкаНаТорговыеТочки.Перевозчик = ВТОсновная.Перевозчик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТОсновная.Организация.Наименование,
	|	ВТОсновная.Перевозчик.Наименование";
	//|	И ДокРасходИзБанка.ЗаявкаНаРасходованиеСредств В
	//|			(ВЫБРАТЬ
	//|				ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка
	//|			ИЗ
	//|				Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	//|			ГДЕ
	//|				(ЗаявкаНаРасходованиеСредствТорговыеТочки.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|					ИЛИ ЗаявкаНаРасходованиеСредствТорговыеТочки.Период = ДАТАВРЕМЯ(1, 1, 1)
	//|						И (ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.ДатаРасхода МЕЖДУ &ДатаНачала И &ДатаОкончания)))
	

	//
	ЭтаФорма.ТаблицаСуммОплаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеревозчиков(Команда)
	
	Если ЭтаФорма.СтатьиДДС.Количество() = 0 Тогда
		Сообщить("Надо указать статьи ДДС!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаНачала) Тогда
		Сообщить("Надо указать дату начала периода!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаОкончания) Тогда
		Сообщить("Надо указать дату окончания периода!");
		Возврат;
	КонецЕсли;
	
	
	//
	ЗаполнитьПеревозчиковСервер();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьТаблицуРасходныхОрдеров(СтруктураПараметров, мТаблицаТТ)
	
	ЕстьОтборПоТТ = (мТаблицаТТ.Количество() > 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"				, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"			, КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ОрганизацияПолучатель"	, СтруктураПараметров.ОрганизацияПолучатель);
	
	Если ЕстьОтборПоТТ Тогда
		Запрос.УстановитьПараметр("МассивТТ"			, СтруктураПараметров.МассивТТ);
		Запрос.УстановитьПараметр("ТаблицаТТ"			, мТаблицаТТ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТТ.ТорговаяТочка КАК ТорговаяТочка,
		|	ТаблицаТТ.Водитель КАК Водитель,
		|	ТаблицаТТ.Автомобиль КАК Автомобиль,
		|	ТаблицаТТ.СтоимостьПеревозки КАК Стоимость
		|ПОМЕСТИТЬ ВТТорговыеТочки
		|ИЗ
		|	&ТаблицаТТ КАК ТаблицаТТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТОрганизацияТорговыхТочек
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаОкончания, СтруктурнаяЕдиница В (&МассивТТ)) КАК ЦФОСтруктурныхЕдиниц
		|ГДЕ
		|	ЦФОСтруктурныхЕдиниц.Организация = &ОрганизацияПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
		|	ВТТорговыеТочки.Водитель КАК Водитель,
		|	ВТТорговыеТочки.Автомобиль КАК Автомобиль,
		|	ВТТорговыеТочки.Стоимость КАК Стоимость,
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.Дата, ДЕНЬ) КАК ДеньДокумента
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТорговыеТочки КАК ВТТорговыеТочки
		|		ПО (ВТТорговыеТочки.ТорговаяТочка = РасходныйОрдерСклад.Получатель)
		|ГДЕ
		|	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|			ИЛИ РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку))
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы) В
		|			(ВЫБРАТЬ
		|				ВТОрганизацияТорговыхТочек.ТорговаяТочка
		|			ИЗ
		|				ВТОрганизацияТорговыхТочек)
		|	И РасходныйОрдерСклад.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасходныйОрдерСклад.МоментВремени";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТОрганизацияТорговыхТочек
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаОкончания, ) КАК ЦФОСтруктурныхЕдиниц
		|ГДЕ
		|	ЦФОСтруктурныхЕдиниц.Организация = &ОрганизацияПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.Дата, ДЕНЬ) КАК ДеньДокумента
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|			ИЛИ РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку))
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы) В
		|			(ВЫБРАТЬ
		|				ВТОрганизацияТорговыхТочек.ТорговаяТочка
		|			ИЗ
		|				ВТОрганизацияТорговыхТочек)
		|	И РасходныйОрдерСклад.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасходныйОрдерСклад.МоментВремени";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РасходныеОрдераЗаполнитьСервер(мДокумент, ТЧТочкиДоставки)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"			, мДокумент.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания"		, мДокумент.ДатаОкончания);
	СтруктураПараметров.Вставить("ОрганизацияПолучатель", мДокумент.ОрганизацияПолучатель);
	мМассивТТ = ТЧТочкиДоставки.Выгрузить(, "ТорговаяТочка").ВыгрузитьКолонку("ТорговаяТочка");
	СтруктураПараметров.Вставить("МассивТТ", мМассивТТ);
	
	мТаблицаТТ = ТЧТочкиДоставки.Выгрузить();
	
	мТаблица = ПолучитьТаблицуРасходныхОрдеров(СтруктураПараметров, мТаблицаТТ);
	
	
	// Распределение - служ. переменные
	//КолДнейПериода = (Объект.ДатаОкончания - Объект.ДатаНачала) / 86400 + 1;
	ВремТаблица = мТаблица.Скопировать(, "ДеньДокумента");
	ВремТаблица.Свернуть("ДеньДокумента");
	КолДнейПериода = ВремТаблица.Количество();
	Если КолДнейПериода < 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если мДокумент.КоличествоПоездок > 0 Тогда
		КолРасходников = Мин(мТаблица.Количество(), мДокумент.КоличествоПоездок);
	Иначе
		КолРасходников = мТаблица.Количество();
	КонецЕсли;
	КолРасходниковВДень = Цел(КолРасходников / КолДнейПериода);
	Если КолРасходниковВДень = 0 Тогда
		КолРасходниковВДень = 1;
	КонецЕсли;
	
	КолРасходниковДобавлено = 0;
	СтруктураОтбора 		= Новый Структура("ДеньДокумента");
	МассивСтрок = Новый Массив;
	
	
	// основное "размазывание"
	ТекДата = мДокумент.ДатаНачала;
	Для н = 1 По КолДнейПериода Цикл
		
		Если КолРасходниковДобавлено = КолРасходников Тогда
			Прервать;
		КонецЕсли;
			
		СтруктураОтбора.ДеньДокумента = ТекДата;
		СтрокиТаблицы = мТаблица.НайтиСтроки(СтруктураОтбора);
		
		сч = 0;
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			сч = сч + 1;
			Если сч > КолРасходниковВДень
					ИЛИ КолРасходниковДобавлено = КолРасходников Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = мДокумент.РасходныеОрдера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КолРасходниковДобавлено = КолРасходниковДобавлено + 1;
			МассивСтрок.Добавить(СтрокаТаблицы);
		КонецЦикла;
		
	
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	// если в результате округления КолРасходниковВДень общее количество добавленных строк меньше необходимого
	Если КолРасходниковДобавлено < КолРасходников Тогда
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			мТаблица.Удалить(СтрокаТаблицы);
		КонецЦикла;
		МассивСтрок.Очистить();
		
		ОсталосьРасходников = КолРасходников - КолРасходниковДобавлено;
		КолРасходниковВДень = Цел(ОсталосьРасходников / КолДнейПериода);
		Если КолРасходниковВДень = 0 Тогда
			КолРасходниковВДень = 1;
		КонецЕсли;
		
		ТекДата = ЭтаФорма.ДатаНачала;
		Для н = 1 По КолДнейПериода Цикл
			
			Если КолРасходниковДобавлено = КолРасходников Тогда
				Прервать;
			КонецЕсли;
			
			СтруктураОтбора.ДеньДокумента = ТекДата;
			СтрокиТаблицы = мТаблица.НайтиСтроки(СтруктураОтбора);
			
			сч = 0;
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				сч = сч + 1;
				Если сч > КолРасходниковВДень
						ИЛИ КолРасходниковДобавлено = КолРасходников Тогда
					Прервать;
				КонецЕсли;
				НоваяСтрока = мДокумент.РасходныеОрдера.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КолРасходниковДобавлено = КолРасходниковДобавлено + 1;
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЦикла;
			
		
			ТекДата = ТекДата + 86400;
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Если КолРасходниковДобавлено < КолРасходников Тогда
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			мТаблица.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ОсталосьРасходников = КолРасходников - КолРасходниковДобавлено;
		
		сч = 0;
		Для Каждого СтрокаТаблицы Из мТаблица Цикл
			сч = сч + 1;
			Если сч > ОсталосьРасходников Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = мДокумент.РасходныеОрдера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	мДокумент.РасходныеОрдера.Сортировать("РасходныйОрдер");
	
КонецПроцедуры

Процедура ПроставитьНомераТТНСервер(мДокумент, мНачальныйНомерТТН)
	
	ВремТаблица = мДокумент.РасходныеОрдера.Выгрузить();
	ВремТаблица.Колонки.Добавить("ДатаДень");
	ВремТаблица.Колонки.Добавить("Дата");
	Для Каждого СтрТаб Из ВремТаблица Цикл
		СтрТаб.Дата 		= СтрТаб.РасходныйОрдер.Дата;
		СтрТаб.ДатаДень 	= НачалоДня(СтрТаб.Дата);
	КонецЦикла;
	ВремТаблица.Сортировать("Дата, Автомобиль");
	
	ТекДатаДень		= Неопределено;
	ТекАвтомобиль 	= Неопределено;
	ТекНомерТТН 	= мНачальныйНомерТТН - 1;
	Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
		
		Если (НЕ СтрокаТаблицы.ДатаДень = ТекДатаДень)
				ИЛИ НЕ СтрокаТаблицы.Автомобиль = ТекАвтомобиль ТОгда
			ТекНомерТТН = ТекНомерТТН + 1;
		КонецЕсли;
		
		СтрокаТЧ = мДокумент.РасходныеОрдера[СтрокаТаблицы.НомерСтроки - 1];
		СтрокаТЧ.НомерТТН = ТекНомерТТН;
		
		ТекДатаДень 	= СтрокаТаблицы.ДатаДень;
		ТекАвтомобиль 	= СтрокаТаблицы.Автомобиль;
		
	КонецЦикла;
	ТекДатаДень		= Неопределено;
	ТекАвтомобиль 	= Неопределено;
	
КонецПроцедуры

Процедура СоздатьДокументыСервер(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(СтруктураПараметров.ДатаОкончания));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоставкаНаТорговыеТочки.Организация КАК Организация,
	|	ДоставкаНаТорговыеТочки.Перевозчик КАК Перевозчик,
	|	ДоставкаНаТорговыеТочки.Водитель КАК Водитель,
	|	ДоставкаНаТорговыеТочки.Автомобиль КАК Автомобиль,
	|	ДоставкаНаТорговыеТочки.ТорговаяТочка КАК ТорговаяТочка,
	|	СРЕДНЕЕ(ДоставкаНаТорговыеТочки.Стоимость) КАК СтоимостьПеревозки
	|ИЗ
	|	РегистрСведений.ДоставкаНаТорговыеТочки КАК ДоставкаНаТорговыеТочки
	|ГДЕ
	|	ДоставкаНаТорговыеТочки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоставкаНаТорговыеТочки.Организация,
	|	ДоставкаНаТорговыеТочки.Перевозчик,
	|	ДоставкаНаТорговыеТочки.Водитель,
	|	ДоставкаНаТорговыеТочки.Автомобиль,
	|	ДоставкаНаТорговыеТочки.ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Водитель,
	|	Автомобиль,
	|	ТорговаяТочка";
	
	ТаблицаВодителейИТТ = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора1 = Новый Структура("Организация, Перевозчик");
	
	
	ДокиАктПеревозчика 	= Документы.АктПеревозчика;
	мОтгрузкаВТТ 		= Перечисления.ВидыОперацийАктПеревозчика.ОтгрузкаВТорговуюТочку;
	ТекАвтор 			= ПараметрыСеанса.ТекущийПользователь;
	
	мТаблицаСуммОплаты = ЭтаФорма.ТаблицаСуммОплаты.Выгрузить();
	Для Каждого СтрокаТаблицы Из мТаблицаСуммОплаты Цикл
		
		НовыйДокумент = ДокиАктПеревозчика.СоздатьДокумент();
		
		НовыйДокумент.Дата 				= ТекущаяДата();
		НовыйДокумент.ДатаНачала 		= СтруктураПараметров.ДатаНачала;
		НовыйДокумент.ДатаОкончания		= СтруктураПараметров.ДатаОкончания;
		НовыйДокумент.ВидОперации		= мОтгрузкаВТТ;
		НовыйДокумент.Автор 			= ТекАвтор;
		НовыйДокумент.Комментарий 		= "<Создан автоматически>";
		
		ЗаполнитьЗначенияСвойств(НовыйДокумент, СтрокаТаблицы);
		НовыйДокумент.ОрганизацияПолучатель		= СтрокаТаблицы.Организация;
		//НовыйДокумент.Организация		= СтрокаТаблицы.Организация;
		//НовыйДокумент.Перевозчик		= СтрокаТаблицы.Перевозчик;
		//НовыйДокумент.Договор			= СтрокаТаблицы.Договор;
		//НовыйДокумент.КоличествоПоездок	= СтрокаТаблицы.КоличествоПоездок;
		
		СтруктураОтбора1.Организация 	= СтрокаТаблицы.Организация;
		СтруктураОтбора1.Перевозчик 	= СтрокаТаблицы.Перевозчик;
		СтрокиВодителей = ТаблицаВодителейИТТ.НайтиСтроки(СтруктураОтбора1);
		
		ТЧТочкиДоставки = НовыйДокумент.ТочкиДоставки;
		Для Каждого СтрокаТаблицыВодителей Из СтрокиВодителей Цикл
			СтрокаТЧ = ТЧТочкиДоставки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицыВодителей);
		КонецЦикла;
		
		РасходныеОрдераЗаполнитьСервер(НовыйДокумент, ТЧТочкиДоставки);
		
		мНачальныйНомерТТН = ДопМодульСервер.ПолучитьНачальныйНомерТТН(СтрокаТаблицы.Организация, мОтгрузкаВТТ, НовыйДокумент.Дата, Год(СтруктураПараметров.ДатаОкончания));
		ПроставитьНомераТТНСервер(НовыйДокумент, мНачальныйНомерТТН);
		
		Попытка
			НовыйДокумент.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если ЭтаФорма.ТаблицаСуммОплаты.Количество() = 0 Тогда
		Сообщить("Нет данных!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"	, ЭтаФорма.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ЭтаФорма.ДатаОкончания);
	СоздатьДокументыСервер(СтруктураПараметров);
	
КонецПроцедуры
