
Процедура ПеречитатьТаблицу()
	
	ТаблицаКВыгрузке.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаАктыКМ3.ККМ КАК ККМ,
	               |	ЛистУчетаАктыКМ3.ОсновноеСредство КАК ОсновноеСредство,
	               |	ЛистУчетаАктыКМ3.ЭтоВозвратБезнал,
	               |	ЛистУчетаАктыКМ3.Сумма,
	               |	ЛистУчетаАктыКМ3.АктПолучен,
	               |	ЛистУчетаАктыКМ3.ПолученаСумма,
	               |	ЛистУчетаАктыКМ3.ВыгруженВБухгалтерию,
	               |	ЛистУчетаАктыКМ3.Ссылка.Организация КАК Организация,
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаАктыКМ3.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ЛистУчетаАктыКМ3.НомерСтроки,
	               |	ЛистУчетаАктыКМ3.Ссылка,
	               |	ЛистУчетаАктыКМ3.СуммаПоНДС10,
	               |	ЛистУчетаАктыКМ3.СуммаПоНДС18,
	               |	ЛистУчетаАктыКМ3.КлючСтроки,
	               |	ЛистУчетаАктыКМ3.Комментарий
	               |ИЗ
	               |	Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	               |ГДЕ
	               |	ЛистУчетаАктыКМ3.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаАктыКМ3.Ссылка.Проведен = ИСТИНА
	               |	И (ЛистУчетаАктыКМ3.Сумма <> 0
	               |			ИЛИ ЛистУчетаАктыКМ3.ПолученаСумма <> 0)
	               |	И (ВЫБОР
	               |				КОГДА ЛистУчетаАктыКМ3.ПолученаСумма <> 0
	               |					ТОГДА ЛистУчетаАктыКМ3.ПолученаСумма
	               |				ИНАЧЕ ЛистУчетаАктыКМ3.Сумма
	               |			КОНЕЦ = &Сумма
	               |			ИЛИ &Сумма = 0)
	               |	И ЛистУчетаАктыКМ3.АктПолучен = ИСТИНА
	               |	И (ЛистУчетаАктыКМ3.Ссылка.Организация = &Организация
	               |			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |	И (ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка В (&СписокТТ)
	               |			ИЛИ &ЕстьОтборПоТТ = ЛОЖЬ)
	               |	И ВЫБОР
	               |			КОГДА &Выгружен = ""Да""
	               |				ТОГДА ЛистУчетаАктыКМ3.ВыгруженВБухгалтерию = ИСТИНА
	               |			КОГДА &Выгружен = ""Нет""
	               |				ТОГДА ЛистУчетаАктыКМ3.ВыгруженВБухгалтерию = ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &НалБезнал = ""Безнал""
	               |				ТОГДА ЛистУчетаАктыКМ3.ЭтоВозвратБезнал = ИСТИНА
	               |			КОГДА &НалБезнал = ""Нал""
	               |				ТОГДА ЛистУчетаАктыКМ3.ЭтоВозвратБезнал = ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка.НомерТочки,
	               |	ТорговаяТочка";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокТТ", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("ЕстьОтборПоТТ", СтруктурныеЕдиницы.Количество() > 0);
	Запрос.УстановитьПараметр("Выгружен", ВыгруженВБухгалтерию);
	Запрос.УстановитьПараметр("НалБезнал", Нал_Безнал);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	
	ОргВкусвилл = Справочники.Организации.НайтиПоКоду("000000006");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТаблицаКВыгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		//СтрокаТаб.Выгрузить = НЕ Выборка.ВыгруженВБухгалтерию;
		СтрокаТаб.Выгрузить = Истина;
		СтрокаТаб.СтруктурнаяЕдиница = Выборка.ТорговаяТочка;
		Если Выборка.ЭтоВозвратБезнал Тогда
			СтрокаТаб.Сумма = Выборка.Сумма;
		Иначе
			СтрокаТаб.Сумма = ?(ЗначениеЗаполнено(Выборка.ПолученаСумма), Выборка.ПолученаСумма, Выборка.Сумма);
		КонецЕсли;
		СтрокаТаб.ЛистУчета = Выборка.Ссылка;
		СтрокаТаб.ЭтоБезнал = Выборка.ЭтоВозвратБезнал;
		//Если Выборка.Организация = ОргВкусвилл Тогда
		//	Если ЗначениеЗаполнено(Выборка.ККМ) Тогда
		//		СтрокаТаб.Касса = Выборка.ККМ;
		//	Иначе
		//		СтрокаТаб.Касса = Выборка.ОсновноеСредство;
		//	КонецЕсли;	
		//Иначе
			Если ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
				СтрокаТаб.Касса = Выборка.ОсновноеСредство;
			Иначе
				СтрокаТаб.Касса = Выборка.ККМ;
			КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
	ПересчитатьИтоги();
	
КонецПроцедуры	

Процедура ПересчитатьИтоги()
	
	ТаблицаИтогНДС.Очистить();
	ТабИтоги = ТаблицаИтогНДС.Выгрузить().СкопироватьКолонки();
	Для Каждого СтрокаТаб Из ТаблицаКВыгрузке Цикл
		Если Не СтрокаТаб.Выгрузить Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаДоб = ТабИтоги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаТаб);
		СтрокаДоб.ЭтоВозвратБезнал = СтрокаТаб.ЭтоБезнал;
	КонецЦикла;
	
	ТабИтоги.Свернуть("Организация, ЭтоВозвратБезнал", "СуммаПоНДС10, СуммаПоНДС18");
	ТабИтоги.Колонки.Добавить("СуммаИтого");
	Для Каждого СтрокаИтог Из ТабИтоги Цикл
		СтрокаИтог.СуммаИтого = СтрокаИтог.СуммаПоНДС10 + СтрокаИтог.СуммаПоНДС18;
	КонецЦикла;	
	ТаблицаИтогНДС.Загрузить(ТабИтоги);
	ТаблицаИтогНДС.Сортировать("Организация, ЭтоВозвратБезнал");
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаНачала = Параметры.ДатаНач;
	Объект.ДатаОкончания = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	СтруктурныеЕдиницы = Параметры.СтруктурныеЕдиницы;
	
	ВыгруженВБухгалтерию = "Все";
	Нал_Безнал = "Все";
	
	ПеречитатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНачала = СтандартныйПериод.ДатаНачала;
		Объект.ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаб Из ТаблицаКВыгрузке Цикл
		СтрокаТаб.Выгрузить = Ложь;
	КонецЦикла;	
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаб Из ТаблицаКВыгрузке Цикл
		СтрокаТаб.Выгрузить = Истина;
	КонецЦикла;
	
	ПересчитатьИтоги();
	
КонецПроцедуры

Функция ВыполнитьПодключениеКБазе(СоединениеСБазой)
	
	Попытка
		
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = "Srvr="""+СокрЛП(ИмяСервераИнформационнойБазыДляПодключения)+""";Ref="""+СокрЛП(ИмяИнформационнойБазыНаСервереДляПодключения)+""";Usr="""+СокрЛП(ПользовательИнформационнойБазыДляПодключения)+""";Pwd="+ПарольИнформационнойБазыДляПодключения+";";
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьСтавкуПоБухгалтерии(СоединениеСБазой, Ставка)
	
	Если НЕ ЗначениеЗаполнено(Ставка) Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС10;	
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС13 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС13;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС13_113 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС13_113;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат СоединениеСБазой.Перечисления.СтавкиНДС.НДС20_120;	
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ВыгрузитьДанныеСервер()
	
	СоединениеСБазой = Неопределено;
	
	Если НЕ ВыполнитьПодключениеКБазе(СоединениеСБазой) Тогда
		Возврат;
	КонецЕсли;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Выгрузить");
	ТабДанные.Колонки.Добавить("Дата");
	ТабДанные.Колонки.Добавить("ЛистУчета");
	ТабДанные.Колонки.Добавить("СтруктурнаяЕдиница");
	ТабДанные.Колонки.Добавить("Организация");
	ТабДанные.Колонки.Добавить("ККМ");
	ТабДанные.Колонки.Добавить("ОсновноеСредство");
	ТабДанные.Колонки.Добавить("ЭтоБезнал");
	ТабДанные.Колонки.Добавить("КлючСтроки");
	ТабДанные.Колонки.Добавить("id_tov");
	ТабДанные.Колонки.Добавить("Количество");
	ТабДанные.Колонки.Добавить("СуммаПоНДС18");
	ТабДанные.Колонки.Добавить("СуммаПоНДС10");
	
	
	Для Каждого СтрокаДанные Из ТаблицаКВыгрузке Цикл
		Если НЕ СтрокаДанные.Выгрузить Тогда
			Продолжить;
		КонецЕсли;
		//СтрокиВЧеках = ТаблицаСДаннымиПоЧекам.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаДанные.КлючСтроки));
		//Если СтрокиВЧеках.Количество() = 0 Тогда
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.Выгрузить = СтрокаДанные.Выгрузить;
			СтрокаДоб.Дата = СтрокаДанные.Дата;
			СтрокаДоб.ЛистУчета = СтрокаДанные.ЛистУчета;
			СтрокаДоб.СтруктурнаяЕдиница = СтрокаДанные.СтруктурнаяЕдиница;
			СтрокаДоб.Организация = СтрокаДанные.Организация;
			СтрокаДоб.ККМ = СтрокаДанные.ККМ;
			СтрокаДоб.ОсновноеСредство = СтрокаДанные.ОсновноеСредство;
			СтрокаДоб.ЭтоБезнал = СтрокаДанные.ЭтоБезнал;
			СтрокаДоб.КлючСтроки = СтрокаДанные.КлючСтроки;
			СтрокаДоб.Количество = 1;
			СтрокаДоб.СуммаПоНДС18 = СтрокаДанные.СуммаПоНДС18;
			СтрокаДоб.СуммаПоНДС10 = СтрокаДанные.СуммаПоНДС10;
		//Иначе
		//	Для Каждого СтрокаЧек Из СтрокиВЧеках Цикл
		//		СтрокаДоб = ТабДанные.Добавить();
		//		СтрокаДоб.Дата = СтрокаДанные.Дата;
		//		СтрокаДоб.ЛистУчета = СтрокаДанные.ЛистУчета;
		//		СтрокаДоб.СтруктурнаяЕдиница = СтрокаДанные.СтруктурнаяЕдиница;
		//		СтрокаДоб.Организация = СтрокаДанные.Организация;
		//		//Если СтрокаДанные.ЭтоБезнал Тогда
		//			СтрокаДоб.ККМ = СтрокаДанные.ККМ;
		//			СтрокаДоб.ОсновноеСредство = СтрокаДанные.ОсновноеСредство;
		//		//КонецЕсли;
		//		СтрокаДоб.id_tov = СтрокаЧек.id_tov;
		//		СтрокаДоб.ЭтоБезнал = СтрокаДанные.ЭтоБезнал;
		//		СтрокаДоб.КлючСтроки = СтрокаДанные.КлючСтроки;
		//		СтрокаДоб.Количество = СтрокаЧек.Qnt;
		//		СтрокаДоб.СуммаПоНДС18 = СтрокаЧек.SummaPoNDS18;
		//		СтрокаДоб.СуммаПоНДС10 = СтрокаЧек.SummaPoNDS10;
		//	КонецЦикла;	
		//КонецЕсли;	
	КонецЦикла;

	//ТабДанные.Свернуть("Дата, ЛистУчета, СтруктурнаяЕдиница, Организация, ККМ, ОсновноеСредство, КлючСтроки, id_tov, ЭтоБезнал", "Количество, СуммаПоНДС18, СуммаПоНДС10");
	ТабДанныеКопия = ТабДанные.Скопировать();
	ТабДанные.Свернуть("Дата, ЛистУчета, СтруктурнаяЕдиница, Организация, ККМ, ОсновноеСредство, ЭтоБезнал, КлючСтроки", "Количество, СуммаПоНДС18, СуммаПоНДС10");
	ТабДанные.Сортировать("Дата");
	
	//ТабКлючи = ТабДанные.Скопировать();
	//ТабКлючи.Свернуть("Дата, КлючСтроки");
	//ТабКлючи.Сортировать("Дата");
	
	ТаблицаЛистыПроставитьПризнак = Новый ТаблицаЗначений();
	ТаблицаЛистыПроставитьПризнак.Колонки.Добавить("ЛистУчета", Новый ОписаниеТипов("ДокументСсылка.ЛистУчета"));
	ТаблицаЛистыПроставитьПризнак.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	ЗапросПодкл = СоединениеСБазой.NewObject("Запрос");
	ЗапросПодкл.Текст = "ВЫБРАТЬ
						|	Организации.Ссылка,
						|	Организации.ИНН,
						|	ВидыОплатОрганизаций.Ссылка КАК ВидОплаты,
						|	ВидыОплатОрганизаций.Контрагент КАК КонтрагентВидОплаты,
						|	ВидыОплатОрганизаций.ДоговорКонтрагента КАК ДоговорКонтрагентаВидОплаты,
						|	ДоговорыКонтрагентов.Ссылка КАК ДоговорРозничныйПокупатель
						|ИЗ
						|	Справочник.Организации КАК Организации
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
						|		ПО Организации.Ссылка = ВидыОплатОрганизаций.Организация
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|		ПО Организации.Ссылка = ДоговорыКонтрагентов.Организация
						|ГДЕ
						|	ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ
						|	И Организации.ПометкаУдаления = ЛОЖЬ
						|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
						|	И ДоговорыКонтрагентов.Владелец = &Контрагент
						|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
						
	РозничныйПокупательБух = СоединениеСБазой.Справочники.Контрагенты.НайтиПоКоду("000001178");
	ЗапросПодкл.УстановитьПараметр("Контрагент", РозничныйПокупательБух);
	
	ТабОрганизацииБух = ЗапросПодкл.Выполнить().Выгрузить();
	
	Счет50_01 = СоединениеСБазой.ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Счет57_03 = СоединениеСБазой.ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	Счет62_Р = СоединениеСБазой.ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	Счет68_02 = СоединениеСБазой.ПланыСчетов.Хозрасчетный.НДС;
	СкладВозврата = СоединениеСБазой.Справочники.Склады.НайтиПоНаименованию("СКЛАД брака (для возвратов)");
	ВидОперации = СоединениеСБазой.Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	СвойствоЗагруженаПоЧекам = СоединениеСБазой.ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Реализация загружена по чекам");
	СпособЗаполненияЦен = СоединениеСБазой.Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ВсеТовары = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Все товары");
	ВсеТоварыСовмДеятельность = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Совместная деятельность");
	
	ОргСП = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7731626420");
	ОргСПБух = СоединениеСБазой.Справочники.Организации.НайтиПоРеквизиту("ИНН", "7731626420");
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	
	ЗапросПодкл = СоединениеСБазой.NewObject("Запрос");
	ЗапросПодкл.Текст = "ВЫБРАТЬ
						|	Склады.Ссылка,
						|	Склады.Наименование
						|ИЗ
						|	Справочник.Склады КАК Склады
						|ГДЕ
						|	Склады.ПометкаУдаления = ЛОЖЬ";
						
	ТабСкладыБух = ЗапросПодкл.Выполнить().Выгрузить();
	
	МассивПКОкОбработке = СоединениеСБазой.NewObject("Массив");
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		//СтрокиДанные = ТабДанные.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаКлюч.КлючСтроки));
		//Если СтрокиДанные.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//СтрокаДанные = СтрокиДанные[0];
		СтрокаДляОрганизации = ТабОрганизацииБух.Найти(СокрЛП(СтрокаДанные.Организация.ИНН), "ИНН");
		ПодразделениеБух = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Формат(СтрокаДанные.СтруктурнаяЕдиница.НомерТочки, "ЧГ=0"));
		Если СтрокаДляОрганизации = Неопределено Тогда
			Сообщить("Для организации: " + СтрокаДанные.Организация + " не найдено соотвествие в бух. базе по ИНН: " + СтрокаДанные.Организация.ИНН);
			Продолжить;
		КонецЕсли;
		Если НЕ СоединениеСБазой.ЗначениеЗаполнено(ПодразделениеБух) Тогда
			Сообщить("Для подразделения: " + СтрокаДанные.СтруктурнаяЕдиница + " не найдено соотвествие в бух. базе");
			Продолжить;
		КонецЕсли;
		
		ДокСсылка = СоединениеСБазой.Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", СтрокаДанные.КлючСтроки));
		Если Найти(СоединениеСБазой.String(ДокСсылка), "Объект не найден") > 0 Тогда
			ДокВозврат = СоединениеСБазой.Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
			ДокВозврат.УстановитьСсылкуНового(ДокСсылка);
		Иначе
			ДокВозврат = ДокСсылка.ПолучитьОбъект();
		КонецЕсли;	
		СоединениеСБазой.ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокВозврат, СоединениеСБазой.глЗначениеПеременной("глТекущийПользователь"), ДокВозврат.мВалютаРегламентированногоУчета, "Продажа", Неопределено);
		ДокВозврат.Дата = КонецДня(СтрокаДанные.Дата);
		ДокВозврат.ВидОперации = ВидОперации;
		ДокВозврат.Организация = СтрокаДляОрганизации.Ссылка;
		//ДокВозврат.КодВидаОперации = "26";
		//ДокВозврат.Склад = СкладВозврата;
		ДокВозврат.Контрагент = РозничныйПокупательБух;
		ДокВозврат.ДоговорКонтрагента = СтрокаДляОрганизации.ДоговорРозничныйПокупатель;
		ДокВозврат.НомерРасходногоКассовогоОрдера = "КМ-3";
		ДокВозврат.ДатаРасходногоКассовогоОрдера = СтрокаДанные.Дата;
		Если НЕ СтрокаДанные.ЭтоБезнал Тогда
			ДокВозврат.Комментарий = "КМ-3(нал) по листу учета " + СтрокаДанные.ЛистУчета;
		Иначе	
			ДокВозврат.Комментарий = "КМ-3(терминал) по листу учета " + СтрокаДанные.ЛистУчета;
		КонецЕсли;	
		
		Если СтрокаДанные.Организация = ОргВкусвилл
			И СтрокаДанные.СтруктурнаяЕдиница.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			СкладБух = Неопределено;
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДатаСреза", СтрокаДанные.Дата);
			Запрос.УстановитьПараметр("ТТ", СтрокаДанные.СтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("ККМ", СтрокаДанные.ККМ);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.CashName КАК CashName
			               |ИЗ
			               |	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаСреза, РабочееМесто.СтруктурнаяЕдиница = &ТТ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
			               |ГДЕ
			               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал = &ККМ";
			ТабТерминалы = Запрос.Выполнить().Выгрузить();
			Если ТабТерминалы.Количество() > 0 Тогда
				Для Каждого СтрокаСклад Из ТабСкладыБух Цикл
					Если Найти(СтрокаСклад.Наименование, ТабТерминалы[0].CashName) > 0 Тогда
						СкладБух = СтрокаСклад.Ссылка;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		Иначе	
			СкладБух = Неопределено;
			Для Каждого СтрокаСклад Из ТабСкладыБух Цикл
				Если Найти(СтрокаСклад.Наименование, СтрокаДанные.ОсновноеСредство.ЗаводскойНомер) > 0 Тогда
					СкладБух = СтрокаСклад.Ссылка;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		//определим документ основание
		ЗапросПодкл = СоединениеСБазой.NewObject("Запрос");
		ЗапросПодкл.Текст = "ВЫБРАТЬ
							|	РеализацияТоваровУслуг.Ссылка
							|ИЗ
							|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
							|		ПО (РеализацияТоваровУслуг.Ссылка = ЗначенияСвойствОбъектов.Объект
							|				И ЗначенияСвойствОбъектов.Свойство = &Свойство
							|				И ЗначенияСвойствОбъектов.Значение = ИСТИНА)
							|ГДЕ
							|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = &Дата
							|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
							|	И РеализацияТоваровУслуг.Организация = &Организация
							|;
							|ВЫБРАТЬ
							|	ЕстьNULL(ПриходныйКассовыйОрдер.Ссылка, Неопределено) КАК ДокПКО,
							|	ОтчетОРозничныхПродажах.Ссылка КАК ДокОРП
							|ИЗ
							|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
							|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
							|		ПО ОтчетОРозничныхПродажах.Ссылка = ПриходныйКассовыйОрдер.ДокументОснование
							|ГДЕ
							|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) = &Дата
							|	И ОтчетОРозничныхПродажах.Проведен = ИСТИНА
							|	И ОтчетОРозничныхПродажах.Организация = &Организация
							|	И ОтчетОРозничныхПродажах.Склад = &Склад
							|	И ОтчетОРозничныхПродажах.Комментарий ПОДОБНО &Комментарий
							|;
							|ВЫБРАТЬ
							|	ОтражениеНДСКВычету.Ссылка КАК Ссылка
							|ИЗ
							|	Документ.ОтражениеНДСКВычету КАК ОтражениеНДСКВычету
							|ГДЕ
							|	ОтражениеНДСКВычету.Проведен = ИСТИНА
							|	И ОтражениеНДСКВычету.Организация = &Организация
							|	И ОтражениеНДСКВычету.РасчетныйДокумент = &ДокВозврат";
							
		ЗапросПодкл.УстановитьПараметр("Свойство", СвойствоЗагруженаПоЧекам);
		ЗапросПодкл.УстановитьПараметр("Дата", НачалоДня(ДокВозврат.Дата));
		ЗапросПодкл.УстановитьПараметр("Организация", ДокВозврат.Организация);
		ЗапросПодкл.УстановитьПараметр("Склад", СкладБух);
		ЗапросПодкл.УстановитьПараметр("Комментарий", "%Загрузка обработкой%");
		ЗапросПодкл.УстановитьПараметр("ДокВозврат", ДокВозврат.Ссылка);
		
		ДокОснование = Неопределено;
		Результаты = ЗапросПодкл.ВыполнитьПакет();
		Выборка = Результаты.Получить(0).Выбрать();
		Если Выборка.Следующий() Тогда
			ДокОснование = Выборка.Ссылка;
		КонецЕсли;
		
		ДокПКО = Неопределено;
		ДокОРП = Неопределено;
		ДокОтражениеСсылка = Неопределено;
		Выборка = Результаты.Получить(1).Выбрать();
		Если Выборка.Следующий() Тогда
			ДокПКО = Выборка.ДокПКО;
			ДокОРП = Выборка.ДокОРП;
		КонецЕсли;
		
		Если НЕ ДокВозврат.ЭтоНовый() Тогда
			Выборка = Результаты.Получить(2).Выбрать();
			Пока Выборка.Следующий() Цикл
				ДокОтражениеСсылка = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;	
		
		Если ДокОРП = Неопределено Тогда
			Сообщить("Для организации: " + СтрокаДанные.Организация + " не найден документ ОРП на дату " + Формат(СтрокаДанные.Дата, "ДФ=dd.MM.yyyy") + " по подразделению " + СтрокаДанные.СтруктурнаяЕдиница);
			Продолжить;
		КонецЕсли;
		
		ДокВозврат.Сделка = ДокОРП;
		ДокВозврат.Заполнить(ДокОРП);
		
		//Если СтрокаДанные.Организация = ОргВкусвилл Тогда
		//	ДокВозврат.ПодразделениеОрганизации = ПодразделениеБух;
		//Иначе	
		//	Если ЗначениеЗаполнено(СтрокаДанные.СтруктурнаяЕдиница.ДатаПереходаНаУчетПоОбособленномуПодразделению)
		//		И СтрокаДанные.СтруктурнаяЕдиница.ДатаПереходаНаУчетПоОбособленномуПодразделению <= СтрокаДанные.Дата Тогда
		//		Если ЗначениеЗаполнено(СтрокаДанные.СтруктурнаяЕдиница.КодОПБух) Тогда
		//			ДокВозврат.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаДанные.СтруктурнаяЕдиница.КодОПБух,,, ДокВозврат.Организация);
		//		Иначе	
		//			ДокВозврат.ПодразделениеОрганизации = ПодразделениеБух;
		//		КонецЕсли;	
		//	Иначе
		//		//Если СтрокаДанные.Организация = ОргСП Тогда
		//			ДокВозврат.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокВозврат.Организация);
		//		//КонецЕсли;
		//	КонецЕсли;	
		//КонецЕсли;
		ДокВозврат.ПодразделениеОрганизации = ДокОРП.ПодразделениеОрганизации;
		
		
		СоединениеСБазой.ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ДокВозврат, СоединениеСБазой.глЗначениеПеременной("глТекущийПользователь"));
		ДокВозврат.КурсВзаиморасчетов = 1;
		ДокВозврат.КратностьВзаиморасчетов = 1;
		ДокВозврат.ОтразитьВКнигеПокупок = Истина;
		ДокВозврат.Склад = СкладВозврата;
		
		Если СтрокаДанные.Организация = ОргСП Тогда
			ДокВозврат.УчитыватьНДС = Ложь;
		КонецЕсли;	
		
		//СтруктураРеквизитовДокумента = СоединениеСБазой.Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокВозврат);
		//СоединениеСБазой.ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ДокВозврат, Неопределено, ДокВозврат.мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", Неопределено);
		
		Если НЕ СтрокаДанные.ЭтоБезнал Тогда
			ДокВозврат.СчетУчетаРасчетовСКонтрагентом = Счет62_Р;
			ДокВозврат.СчетУчетаРасчетовПоАвансам = Счет50_01;
		Иначе
			ДокВозврат.СчетУчетаРасчетовСКонтрагентом = Счет62_Р;
			ДокВозврат.СчетУчетаРасчетовПоАвансам = Счет57_03;
		КонецЕсли;	
		ДокВозврат.СчетУчетаНДС = Счет68_02;
		
		
		СуммаПоНДС18 = 0;
		СуммаПоНДС10 = 0;
		ДокВозврат.Товары.Очистить();
		
		
		Если СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18 > 0 Тогда
			Если СтрокаДанные.Организация = ОргСП Тогда
				СтрокаДоб = ДокВозврат.Товары.Добавить();
				Если СтрокаДанные.СтруктурнаяЕдиница.СовместнаяДеятельность Тогда
					СтрокаДоб.Номенклатура = ВсеТоварыСовмДеятельность;
				Иначе	
					СтрокаДоб.Номенклатура = ВсеТовары;
				КонецЕсли;	
				ДокВозврат.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаДоб, "Товары", Истина);
				СоединениеСБазой.ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаДоб);
				СтрокаДоб.Количество = 1;
				СтрокаДоб.Сумма = СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18;
				СтрокаДоб.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.БезНДС;
				
				СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаДоб, ДокВозврат);

				СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДоб, ДокВозврат);
			Иначе
				Если СтрокаДанные.СуммаПоНДС18 > 0 Тогда
					СтрокаДоб = ДокВозврат.Товары.Добавить();
					Если СтрокаДанные.СтруктурнаяЕдиница.СовместнаяДеятельность Тогда
						СтрокаДоб.Номенклатура = ВсеТоварыСовмДеятельность;
					Иначе	
						СтрокаДоб.Номенклатура = ВсеТовары;
					КонецЕсли;
					ДокВозврат.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаДоб, "Товары", Истина);
					СоединениеСБазой.ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаДоб);
					СтрокаДоб.Количество = 1;
					СтрокаДоб.Сумма = СтрокаДанные.СуммаПоНДС18;
					СтрокаДоб.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС18;
					
					СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаДоб, ДокВозврат);
					
					СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДоб, ДокВозврат);
				КонецЕсли;
				
				Если СтрокаДанные.СуммаПоНДС10 > 0 Тогда
					СтрокаДоб = ДокВозврат.Товары.Добавить();
					Если СтрокаДанные.СтруктурнаяЕдиница.СовместнаяДеятельность Тогда
						СтрокаДоб.Номенклатура = ВсеТоварыСовмДеятельность;
					Иначе	
						СтрокаДоб.Номенклатура = ВсеТовары;
					КонецЕсли;
					ДокВозврат.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаДоб, "Товары", Истина);
					СоединениеСБазой.ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаДоб);
					СтрокаДоб.Количество = 1;
					СтрокаДоб.Сумма = СтрокаДанные.СуммаПоНДС10;
					СтрокаДоб.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС10;
					
					СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаДоб, ДокВозврат);
					
					СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДоб, ДокВозврат);
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;	
		
		Попытка
			ДокВозврат.Записать(СоединениеСБазой.РежимЗаписиДокумента.Запись);
			СоединениеСБазой.АК_Привилегированный.ПровестиДокумент(ДокВозврат.Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить; //если возврат не провелся, то дальше и нечего делать здесь
		КонецПопытки;
		
		Если ДокОтражениеСсылка = Неопределено Тогда
			ДокОтражение = СоединениеСБазой.Документы.ОтражениеНДСКВычету.СоздатьДокумент();
		Иначе	
			ДокОтражение = ДокОтражениеСсылка.ПолучитьОбъект();
			ДокОтражение.ПометкаУдаления = Ложь;
		КонецЕсли;	
		ДокОтражение.Заполнить(ДокВозврат.Ссылка);
		СоединениеСБазой.ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОтражение, СоединениеСБазой.глЗначениеПеременной("глТекущийПользователь"), ДокОтражение.мВалютаРегламентированногоУчета, "Покупка");
		ДокОтражение.КодВидаОперации = "26";
		ДокОтражение.Дата = ДокВозврат.Дата;
		ДокОтражение.УстановитьНовыйНомер("1");
		ДокОтражение.ПрямаяЗаписьВКнигу = Истина;
		ДокОтражение.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
		
		
		
		Если ДокПКО <> Неопределено
			И (СтрокаДанные.СуммаПоНДС10 <> 0 ИЛИ СтрокаДанные.СуммаПоНДС18 <> 0)
			И СтрокаДанные.ЭтоБезнал = Ложь Тогда
			МассивПКОкОбработке.Добавить(ДокПКО);
			//ДокПКООбъект = ДокПКО.ПолучитьОбъект();
			//ДокПКООбъект.Заполнить(ДокПКООбъект.ДокументОснование);
			//Если СтрокаДанные.Организация = ОргСП Тогда
			//	СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
			//	СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.СуммаПоНДС10 - СтрокаДанные.СуммаПоНДС18;
			//	ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			//Иначе	
			//	Если СтрокаДанные.СуммаПоНДС10 > 0 Тогда
			//		СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
			//		Если СтрокаДокРасшифровка = Неопределено Тогда
			//			СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
			//		КонецЕсли;
			//		ОстатокКВычетанию = СтрокаДанные.СуммаПоНДС10 - СтрокаДокРасшифровка.СуммаПлатежа;
			//		СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.СуммаПоНДС10;
			//		ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			//		Если ОстатокКВычетанию > 0 Тогда
			//			СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
			//			Если СтрокаДокРасшифровка = Неопределено Тогда
			//				СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
			//			КонецЕсли;
			//			СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ОстатокКВычетанию;
			//			ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			//		КонецЕсли;	
			//	КонецЕсли;
			//	
			//	Если СтрокаДанные.СуммаПоНДС18 > 0 Тогда
			//		СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
			//		Если СтрокаДокРасшифровка = Неопределено Тогда
			//			СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
			//		КонецЕсли;
			//		ОстатокКВычетанию = СтрокаДанные.СуммаПоНДС18 - СтрокаДокРасшифровка.СуммаПлатежа;
			//		СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.СуммаПоНДС18;
			//		ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			//		Если ОстатокКВычетанию > 0 Тогда
			//			СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
			//			Если СтрокаДокРасшифровка = Неопределено Тогда
			//				СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
			//			КонецЕсли;
			//			СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ОстатокКВычетанию;
			//			ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;	
			//	
			//ДокПКООбъект.СуммаДокумента = ДокПКООбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			//ДокПКООбъект.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		
		СтрокиКОбработке = ТабДанныеКопия.НайтиСтроки(Новый Структура("Выгрузить, ЛистУчета", Истина, СтрокаДанные.ЛистУчета));
		Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЛистыПроставитьПризнак.Добавить(), СтрокаКОбработке);
		КонецЦикла;	
	КонецЦикла;
	
	Если МассивПКОкОбработке.Количество() > 0 Тогда
		ЗапросПодкл = СоединениеСБазой.NewObject("Запрос");
		ЗапросПодкл.Текст = "ВЫБРАТЬ
							|	ПриходныйКассовыйОрдер.Ссылка КАК ПКО,
							|	ПриходныйКассовыйОрдер.ДокументОснование КАК ОРП
							|ПОМЕСТИТЬ ВТ_ПКО
							|ИЗ
							|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
							|ГДЕ
							|	ПриходныйКассовыйОрдер.Ссылка В (&МассивПКО)
							|	И ПриходныйКассовыйОрдер.Проведен = ИСТИНА
							|;
                            |
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ВТ_ПКО.ПКО КАК ДокПКО,
							|	СУММА(ВЫБОР
							|			КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
							|				ТОГДА ВозвратТоваровОтПокупателяТовары.Сумма
							|			ИНАЧЕ 0
							|		КОНЕЦ) КАК СуммаПоНДС18,
							|	СУММА(ВЫБОР
							|			КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
							|				ТОГДА ВозвратТоваровОтПокупателяТовары.Сумма
							|			ИНАЧЕ 0
							|		КОНЕЦ) КАК СуммаПоНДС10
							|ИЗ
							|	ВТ_ПКО КАК ВТ_ПКО
							|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
							|		ПО ВТ_ПКО.ОРП = ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка
							|ГДЕ
							|	ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА
							|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Комментарий Подобно &Коммент
                            |
							|СГРУППИРОВАТЬ ПО
							|	ВТ_ПКО.ПКО";
		ЗапросПодкл.УстановитьПараметр("МассивПКО", МассивПКОкОбработке);
		ЗапросПодкл.УстановитьПараметр("Коммент", "%КМ-3(нал) по листу учета%");
		ВыборкаПКО = ЗапросПодкл.Выполнить().Выбрать();
		Пока ВыборкаПКО.Следующий() Цикл
			ДокПКООбъект = ВыборкаПКО.ДокПКО.ПолучитьОбъект();
			ДокПКООбъект.Заполнить(ДокПКООбъект.ДокументОснование);
			Если ДокПКООбъект.Организация = ОргСПБух Тогда
				СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
				СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ВыборкаПКО.СуммаПоНДС10 - ВыборкаПКО.СуммаПоНДС18;
				ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
			Иначе	
				Если ВыборкаПКО.СуммаПоНДС10 > 0 Тогда
					СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
					Если СтрокаДокРасшифровка = Неопределено Тогда
						СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
					КонецЕсли;
					ОстатокКВычетанию = ВыборкаПКО.СуммаПоНДС10 - СтрокаДокРасшифровка.СуммаПлатежа;
					СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ВыборкаПКО.СуммаПоНДС10;
					ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
					Если ОстатокКВычетанию > 0 Тогда
						СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
						Если СтрокаДокРасшифровка = Неопределено Тогда
							СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
						КонецЕсли;
						СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ОстатокКВычетанию;
						ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
					КонецЕсли;	
				КонецЕсли;
				
				Если ВыборкаПКО.СуммаПоНДС18 > 0 Тогда
					СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
					Если СтрокаДокРасшифровка = Неопределено Тогда
						СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
					КонецЕсли;
					ОстатокКВычетанию = ВыборкаПКО.СуммаПоНДС18 - СтрокаДокРасшифровка.СуммаПлатежа;
					СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ВыборкаПКО.СуммаПоНДС18;
					ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
					Если ОстатокКВычетанию > 0 Тогда
						СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
						Если СтрокаДокРасшифровка = Неопределено Тогда
							СтрокаДокРасшифровка = ДокПКООбъект.РасшифровкаПлатежа.Получить(0);
						КонецЕсли;
						СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - ОстатокКВычетанию;
						ДокПКООбъект.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
				
			ДокПКООбъект.СуммаДокумента = ДокПКООбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			ДокПКООбъект.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
		КонецЦикла;	
	КонецЕсли;	
	
	Если ТаблицаЛистыПроставитьПризнак.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
					   |	Таб.ЛистУчета,
					   |	Таб.КлючСтроки
					   |ПОМЕСТИТЬ ВТ_Таб
					   |ИЗ
					   |	&Таб КАК Таб
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	ВТ_Таб.ЛистУчета,
					   |	ВТ_Таб.КлючСтроки
					   |ИЗ
					   |	ВТ_Таб КАК ВТ_Таб
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ВТ_Таб.ЛистУчета,
					   |	ВТ_Таб.КлючСтроки";
					   
		Запрос.УстановитьПараметр("Таб", ТаблицаЛистыПроставитьПризнак);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ЛистУчета") Цикл
			ЛистОбъект = Выборка.ЛистУчета.ПолучитьОбъект();
			ЛистОбъект.ОбменДанными.Загрузка = Истина;
			Пока Выборка.Следующий() Цикл
				СтрокаЛиста = ЛистОбъект.АктыКМ3.Найти(Выборка.КлючСтроки, "КлючСтроки");
				Если СтрокаЛиста <> Неопределено Тогда
					СтрокаЛиста.ВыгруженВБухгалтерию = Истина;
				КонецЕсли;	
			КонецЦикла;
			ЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	//+++АК Susk (Суслин К.В.) 2018.05.07 ИП-00017910
	МайМесяц = Дата("20180501");
	
	Если Объект.ДатаНачала >= МайМесяц Или Объект.ДатаОкончания >= МайМесяц Тогда
		Предупреждение("Период не может пересекаться с маем 2018 года. С мая 2018 года выгрузка будет производиться другой обработкой!");
		Возврат;
	КонецЕсли;	
	//---АК Susk (Суслин К.В.) 	 
	
	ВыгрузитьДанныеСервер();
	ПеречитатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	//ПеречитатьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКВыгрузкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	
	ПеречитатьТаблицу();
	
КонецПроцедуры

//&НаСервере
//Функция ПолучитьТабФормыКакТабличныйДокумент(Знач ТабФормы)
//	
//	Возврат ОбщегоНазначенияКлиентСервер.ТаблицаЗначенийВТабличныйДокумент(ТабФормы.Выгрузить());
//	
//КонецФункции	

//&НаКлиенте
//Процедура ВывестиВТабличныйДокумент(Команда)
//	
//	ТабДок = ПолучитьТабФормыКакТабличныйДокумент(ТаблицаКВыгрузке);
//	ТабДок.ОтображатьСетку = Ложь;
//	ТабДок.ОтображатьЗаголовки = Ложь;
//	ТабДок.Показать();
//	
//КонецПроцедуры

//ИмяСервераИнформационнойБазыДляПодключения = "srv-sql02";
//ИмяИнформационнойБазыНаСервереДляПодключения 	= "BP_CORP";
////ИмяИнформационнойБазыНаСервереДляПодключения 	= "BP_CORP_Deb";
//ПользовательИнформационнойБазыДляПодключения 	= "Обмен";
//ПарольИнформационнойБазыДляПодключения			= "123321";

СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
