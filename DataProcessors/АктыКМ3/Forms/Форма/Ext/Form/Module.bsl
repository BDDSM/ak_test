
&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНачала = СтандартныйПериод.ДатаНачала;
		Объект.ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ОтборАктПолучен = "Все";
	
	ДатаЗакрытияРедактированияКМ3 = ПолучитьКонстанту();
	
	Элементы.ДатаЗакрытияРедактированияКМ3.Доступность = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеКонстантыРедактированияАктовКМ3, Ложь);
	
	ПерестроитьДеревоДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонстанту()
	
	Возврат Константы.ДатаЗапретаРедактированияАктовКМ3.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьКонстанту(Дата)
	
	Константы.ДатаЗапретаРедактированияАктовКМ3.Установить(Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗакрытияРедактированияКМ3ПриИзменении(Элемент)
	
	УстановитьКонстанту(ДатаЗакрытияРедактированияКМ3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПеречитатьКонстанту", 60);
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКонстанту()
	ДатаЗакрытияРедактированияКМ3 = ПолучитьКонстанту();
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока
		И Элементы.ДеревоДанных.ТекущиеДанные.Группировка <= ДатаЗакрытияРедактированияКМ3 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Данные находятся в закрытом периоде"
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока
		И Элементы.ДеревоДанных.ТекущиеДанные.Группировка <= ДатаЗакрытияРедактированияКМ3 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Данные находятся в закрытом периоде. Редактирование запрещено";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьДеревоДанных()
	
	ДеревоДанных.ПолучитьЭлементы().Очистить();
	Чеки.Очистить();
	ДанныеИзменены = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаАктыКМ3.Ссылка
	               |ПОМЕСТИТЬ ВТ_Листы
	               |ИЗ
	               |	Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаКон, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
	               |		ПО ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка = СоответствиеОбъектРольСрезПоследних.Объект
	               |ГДЕ
	               |	ЛистУчетаАктыКМ3.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаАктыКМ3.Ссылка.Проведен = ИСТИНА
	               |	И (ЛистУчетаАктыКМ3.Сумма <> 0
	               |			ИЛИ ЛистУчетаАктыКМ3.ПолученаСумма <> 0)
	               |	И (ЛистУчетаАктыКМ3.Ссылка.Организация = &Организация
	               |			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |	И (ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка В (&СписокТТ)
	               |			ИЛИ &ЕстьОтборПоТТ = ЛОЖЬ)
	               |	И (СоответствиеОбъектРольСрезПоследних.РольПользователя = &РольПользователя
	               |			ИЛИ &РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаАктыКМ3.ККМ КАК ККМ,
	               |	ЛистУчетаАктыКМ3.ОсновноеСредство КАК ОсновноеСредство,
	               |	ЛистУчетаАктыКМ3.ЭтоВозвратБезнал,
	               |	ЛистУчетаАктыКМ3.Сумма,
	               |	ЛистУчетаАктыКМ3.АктПолучен,
	               |	ЛистУчетаАктыКМ3.ПолученаСумма,
	               |	ЛистУчетаАктыКМ3.ВыгруженВБухгалтерию,
	               |	ЛистУчетаАктыКМ3.АктПолучилCотрудник,
	               |	ЛистУчетаАктыКМ3.Ссылка.Организация КАК Организация,
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаАктыКМ3.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ЛистУчетаАктыКМ3.НомерСтроки,
	               |	ЛистУчетаАктыКМ3.Ссылка,
	               |	ЛистУчетаАктыКМ3.ККМ.ID_SQL,
	               |	ЛистУчетаАктыКМ3.ОсновноеСредство.ЗаводскойНомер,
	               |	ЛистУчетаАктыКМ3.КлючСтроки,
	               |	ЛистУчетаАктыКМ3.СуммаПоНДС10,
	               |	ЛистУчетаАктыКМ3.СуммаПоНДС18,
	               |	ЛистУчетаАктыКМ3.Комментарий,
	               |	ЛистУчетаАктыКМ3.Ссылка.ВозвратПокупателюБезнал КАК ВозвратПокупателюБезнал
	               |ИЗ
	               |	Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	               |ГДЕ
	               |	ЛистУчетаАктыКМ3.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Листы.Ссылка
	               |			ИЗ
	               |				ВТ_Листы КАК ВТ_Листы)
	               |	И (ЛистУчетаАктыКМ3.АктПолучен = &ОтборАкты
	               |			ИЛИ &ОтборАкты = НЕОПРЕДЕЛЕНО)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Дата,
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка.НомерТочки,
	               |	ТорговаяТочка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаЧекиПоАктамКМ3.Ссылка КАК ЛистУчета,
	               |	ЛистУчетаЧекиПоАктамКМ3.КлючСтрокиАкта,
	               |	ЛистУчетаЧекиПоАктамКМ3.УИНЧека,
	               |	ЛистУчетаЧекиПоАктамКМ3.СуммаЧека
	               |ИЗ
	               |	Документ.ЛистУчета.ЧекиПоАктамКМ3 КАК ЛистУчетаЧекиПоАктамКМ3
	               |ГДЕ
	               |	ЛистУчетаЧекиПоАктамКМ3.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Листы.Ссылка
	               |			ИЗ
	               |				ВТ_Листы КАК ВТ_Листы)";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокТТ", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("РольПользователя", БухгалтерРасчетчик);
	Запрос.УстановитьПараметр("ЕстьОтборПоТТ", СтруктурныеЕдиницы.Количество() > 0);
	Если ОтборАктПолучен = "Все" Тогда
		Запрос.УстановитьПараметр("ОтборАкты", Неопределено);
	ИначеЕсли ОтборАктПолучен = "Полученные" Тогда
		Запрос.УстановитьПараметр("ОтборАкты", Истина);
	ИначеЕсли ОтборАктПолучен = "Не полученные" Тогда
		Запрос.УстановитьПараметр("ОтборАкты", Ложь);	
	КонецЕсли;	
	
	ОргВкусвилл = Справочники.Организации.НайтиПоКоду("000000006");
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[1].Выбрать();
	Чеки.Загрузить(Результаты[2].Выгрузить());
	ТабЧеки = Чеки.Выгрузить();
	ТабЧеки.Колонки.Добавить("ЕстьЧек", Новый ОписаниеТипов("Булево"));
	
	СтрокаОтбораЧеки = "'99'";
	Для Каждого СтрокаЧек Из ТабЧеки Цикл
		СтрокаОтбораЧеки = СтрокаОтбораЧеки + ",'" + СтрокаЧек.УИНЧека + "'";
	КонецЦикла;	
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT Ch.CheckUID
	|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
	|where Ch.CheckUID IN (" + СтрокаОтбораЧеки + ")
	|UNION ALL
	|SELECT Ch.CheckUID
	|FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock) 
	|where Ch.CheckUID IN (" + СтрокаОтбораЧеки + ")";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокиЧек = ТабЧеки.НайтиСтроки(Новый Структура("УИНЧека", Rs.Fields("CheckUID").Value));
			Для Каждого СтрокаЧек Из СтрокиЧек Цикл
				СтрокаЧек.ЕстьЧек = Истина;
			КонецЦикла;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		СтрокаОрганизация = ДеревоДанных.ПолучитьЭлементы().Добавить();
		СтрокаОрганизация.Группировка = Выборка.Организация;
		Пока Выборка.Следующий() Цикл
			СтрокаДетальная = СтрокаОрганизация.ПолучитьЭлементы().Добавить();
			СтрокаДетальная.ЭтоДетальнаяСтрока = Истина;
			СтрокаДетальная.Группировка = Выборка.Дата;
			//Если Выборка.Организация = ОргВкусвилл Тогда
			//	Если ЗначениеЗаполнено(Выборка.ККМ) Тогда
			//		СтрокаДетальная.Касса = Выборка.ККМID_SQL;
			//	Иначе
			//		СтрокаДетальная.Касса = Выборка.ОсновноеСредствоЗаводскойНомер;
			//	КонецЕсли;	
			//Иначе
				Если ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
					СтрокаДетальная.Касса = Выборка.ОсновноеСредствоЗаводскойНомер;
				Иначе
					СтрокаДетальная.Касса = Выборка.ККМID_SQL;
				КонецЕсли;
			//КонецЕсли;	
			СтрокаДетальная.ККМ = Выборка.ККМ;
			СтрокаДетальная.ОсновноеСредство = Выборка.ОсновноеСредство;
			СтрокаДетальная.Организация = Выборка.Организация;
			СтрокаДетальная.Сумма = Выборка.Сумма;
			СтрокаДетальная.СуммаПолучено = Выборка.ПолученаСумма;
			СтрокаДетальная.АктПолучен = Выборка.АктПолучен;
			СтрокаДетальная.ЭтоВозвратБезнал = Выборка.ЭтоВозвратБезнал;
			СтрокаДетальная.ВозвратПокупателюБезнал = Выборка.ВозвратПокупателюБезнал;
			СтрокаДетальная.АктПолучилCотрудник = Выборка.АктПолучилCотрудник;
			СтрокаДетальная.ВыгруженВБухгалтерию = Выборка.ВыгруженВБухгалтерию;
			СтрокаДетальная.ЛистУчета = Выборка.Ссылка;
			СтрокаДетальная.НомерСтроки = Выборка.НомерСтроки;
			СтрокаДетальная.СтруктурнаяЕдиница = Выборка.ТорговаяТочка;
			СтрокаДетальная.СуммаПоНДС10 = Выборка.СуммаПоНДС10;
			СтрокаДетальная.СуммаПоНДС18 = Выборка.СуммаПоНДС18;
			СтрокаДетальная.КлючСтроки = Выборка.КлючСтроки;
			СтрокаДетальная.Комментарий = Выборка.Комментарий;
			СтрокиЧеков = ТабЧеки.НайтиСтроки(Новый Структура("ЛистУчета, КлючСтрокиАкта", СтрокаДетальная.ЛистУчета, СтрокаДетальная.КлючСтроки));
			Если СтрокиЧеков.Количество() = 0 Тогда
				СтрокаДетальная.ЕстьНеУказанныеЧеки = Истина;
			Иначе
				Для Каждого СтрокаЧек Из СтрокиЧеков Цикл
					СтрокаДетальная.ЕстьНеУказанныеЧеки = Макс(СтрокаДетальная.ЕстьНеУказанныеЧеки, НЕ СтрокаЧек.ЕстьЧек);
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева)
	
	Для Каждого СтрокаВложенная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Элементы.ДеревоДанных.Развернуть(СтрокаВложенная.ПолучитьИдентификатор());
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если ДанныеИзменены Тогда
		Ответ = Вопрос("Сохранить выполненные изменения?", РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзмененияСервер();
		КонецЕсли;	
	КонецЕсли;
	
	ПерестроитьДеревоДанных();
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции	

&НаКлиенте
Процедура ДеревоДанныхАктПолученПриИзменении(Элемент)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные.АктПолучен Тогда
		Элементы.ДеревоДанных.ТекущиеДанные.АктПолучилCотрудник = ПолучитьТекущегоПользователя();
	Иначе
		Элементы.ДеревоДанных.ТекущиеДанные.АктПолучилCотрудник = Неопределено;
	КонецЕсли;
	
	Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Если ОтменаРедактирования Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	//ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛистУчета(Команда)
	
	Если Элементы.ДеревоДанных.ТекущиеДанные = Неопределено
		ИЛИ НЕ Элементы.ДеревоДанных.ТекущиеДанные.ЭтоДетальнаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(Элементы.ДеревоДанных.ТекущиеДанные.ЛистУчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСервер()
	
	ТаблицаИзмененияПоЛистам = Новый ТаблицаЗначений();
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ЛистУчета", Новый ОписаниеТипов("ДокументСсылка.ЛистУчета"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ПолученаСумма", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("АктПолучен", Новый ОписаниеТипов("Булево"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ЭтоВозвратБезнал", Новый ОписаниеТипов("Булево"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("ВыгруженВБухгалтерию", Новый ОписаниеТипов("Булево"));
	ТаблицаИзмененияПоЛистам.Колонки.Добавить("АктПолучилCотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			Если СтрокаВложенная.СтрокаИзменена Тогда
				Если ЗначениеЗаполнено(СтрокаВложенная.НомерСтроки) Тогда
					СтрокаДоб = ТаблицаИзмененияПоЛистам.Добавить();
					СтрокаДоб.ЛистУчета = СтрокаВложенная.ЛистУчета;
					СтрокаДоб.КлючСтроки = СтрокаВложенная.КлючСтроки;
					СтрокаДоб.Комментарий = СтрокаВложенная.Комментарий;
					СтрокаДоб.ПолученаСумма = СтрокаВложенная.СуммаПолучено;
					СтрокаДоб.СуммаПоНДС10 = СтрокаВложенная.СуммаПоНДС10;
					СтрокаДоб.СуммаПоНДС18 = СтрокаВложенная.СуммаПоНДС18;
					СтрокаДоб.АктПолучен = СтрокаВложенная.АктПолучен;
					СтрокаДоб.ЭтоВозвратБезнал = СтрокаВложенная.ЭтоВозвратБезнал;
					СтрокаДоб.АктПолучилCотрудник = СтрокаВложенная.АктПолучилCотрудник;
					СтрокаДоб.ВыгруженВБухгалтерию = СтрокаВложенная.ВыгруженВБухгалтерию;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ЛистУчета,
	               |	Таб.КлючСтроки,
	               |	Таб.Комментарий,
	               |	Таб.ПолученаСумма,
				   |	Таб.СуммаПоНДС10,
				   |	Таб.СуммаПоНДС18,
	               |	Таб.АктПолучен,
	               |	Таб.ЭтоВозвратБезнал,
	               |	Таб.ВыгруженВБухгалтерию,
	               |	Таб.АктПолучилCотрудник
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ЛистУчета КАК ЛистУчета,
	               |	ВТ_Данные.КлючСтроки,
	               |	ВТ_Данные.Комментарий,
	               |	ВТ_Данные.ПолученаСумма,
				   |	ВТ_Данные.СуммаПоНДС10,
				   |	ВТ_Данные.СуммаПоНДС18,
	               |	ВТ_Данные.АктПолучен,
	               |	ВТ_Данные.ЭтоВозвратБезнал,
	               |	ВТ_Данные.ВыгруженВБухгалтерию,
	               |	ВТ_Данные.АктПолучилCотрудник
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаИзмененияПоЛистам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ЛистУчета") Цикл
		ЛистОбъект = Выборка.ЛистУчета.ПолучитьОбъект();
		ЛистОбъект.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
			СтрокаДок = ЛистОбъект.АктыКМ3.Найти(Выборка.КлючСтроки, "КлючСтроки");
			СтрокаДок.АктПолучен = Выборка.АктПолучен;
			СтрокаДок.Комментарий = Выборка.Комментарий;
			СтрокаДок.ПолученаСумма = Выборка.ПолученаСумма;
			СтрокаДок.СуммаПоНДС10 = Выборка.СуммаПоНДС10;
			СтрокаДок.СуммаПоНДС18 = Выборка.СуммаПоНДС18;
			СтрокаДок.ЭтоВозвратБезнал = Выборка.ЭтоВозвратБезнал;
			СтрокаДок.ВыгруженВБухгалтерию = Выборка.ВыгруженВБухгалтерию;
			СтрокаДок.АктПолучилCотрудник = Выборка.АктПолучилCотрудник;
			КолвоЧеков = ЛистОбъект.ЧекиПоАктамКМ3.Количество();
			Для н = 1 По КолвоЧеков Цикл
				Если ЛистОбъект.ЧекиПоАктамКМ3[КолвоЧеков - н].КлючСтрокиАкта = Выборка.КлючСтроки Тогда
					ЛистОбъект.ЧекиПоАктамКМ3.Удалить(КолвоЧеков - н);
				КонецЕсли;	
			КонецЦикла;
			СтрокиЧеков = Чеки.НайтиСтроки(Новый Структура("ЛистУчета, КлючСтрокиАкта", Выборка.ЛистУчета, Выборка.КлючСтроки));
			Для Каждого СтрокаЧек Из СтрокиЧеков Цикл
				ЗаполнитьЗначенияСвойств(ЛистОбъект.ЧекиПоАктамКМ3.Добавить(), СтрокаЧек);
			КонецЦикла;	
		КонецЦикла;
		ЛистОбъект.АктыРедактировались = Истина;
		ЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			СтрокаВложенная.СтрокаИзменена = Ложь;
		КонецЦикла;	
	КонецЦикла;
	
	ДанныеИзменены = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	ЗаписатьИзмененияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ДанныеИзменены Тогда
		Ответ = Вопрос("Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзмененияСервер();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьАкты(Команда)
	
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			Если (СтрокаВложенная.Сумма > 0
				ИЛИ СтрокаВложенная.СуммаПолучено > 0)
				И СтрокаВложенная.АктПолучен Тогда
				СтрокаВложенная.ПечататьАкт = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПечататьАкты(Команда)
	
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			СтрокаВложенная.ПечататьАкт = Ложь;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАктов(Команда)
	
	//БылВывод = Ложь;
	//ТабДок = Новый ТабличныйДокумент();
	//Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
	//	Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
	//		Если (СтрокаВложенная.Сумма > 0
	//			ИЛИ СтрокаВложенная.СуммаПолучено > 0)
	//			И СтрокаВложенная.ПечататьАкт Тогда
	//			ТабАкт = Обработки.АктыКМ3.ПолучитьТабДокКМ3(СтрокаВложенная.ЛистУчета, СтрокаВложенная.Сумма
	//						, СтрокаВложенная.СуммаПолучено, СтрокаВложенная.ЭтоВозвратБезнал, ?(ЗначениеЗаполнено(СтрокаВложенная.ОсновноеСредство), СтрокаВложенная.ОсновноеСредство, СтрокаВложенная.ККМ), СтрокаВложенная.КлючСтроки);
	//			Если БылВывод Тогда
	//				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	//			КонецЕсли;
	//			ТабДок.Вывести(ТабАкт);
	//			БылВывод = Истина;
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЦикла;
	
	ПараметрКоманды = Новый Массив();
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			Если (СтрокаВложенная.Сумма > 0
				ИЛИ СтрокаВложенная.СуммаПолучено > 0)
				И СтрокаВложенная.ПечататьАкт Тогда
				ПараметрКоманды.Добавить(Новый Структура("ЛистУчета, Сумма, ПолученаСумма, ЭтоВозвратБезнал, ОсновноеСредство, КлючСтроки, ЧекиПоАктам",
						СтрокаВложенная.ЛистУчета, СтрокаВложенная.Сумма, СтрокаВложенная.СуммаПолучено, СтрокаВложенная.ЭтоВозвратБезнал, ?(ЗначениеЗаполнено(СтрокаВложенная.ОсновноеСредство), СтрокаВложенная.ОсновноеСредство, СтрокаВложенная.ККМ), СтрокаВложенная.КлючСтроки, Чеки));
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.АктыКМ3",
		"АктКМ3",
		ПараметрКоманды,
		Неопределено,
		Новый Структура()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВБухгалтерию(Команда)
	
	Если ДанныеИзменены Тогда
		Ответ = Вопрос("Перед выгрузкой изменения будут сохранены. Продолжить?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзмененияСервер();
		КонецЕсли;	
	КонецЕсли;
	
	ОткрытьФорму("Обработка.АктыКМ3.Форма.ФормаВыгрузкиВБухгалтерию", Новый Структура("ДатаНач, ДатаКон, Организация, СтруктурныеЕдиницы", Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Организация, СтруктурныеЕдиницы), ЭтаФорма);
	
	//ПерестроитьДеревоДанных();
	//РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВозвратыИзСейфаСервер()
	
	Для Каждого СтрокаОрганизация Из ДеревоДанных.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВложенная Из СтрокаОрганизация.ПолучитьЭлементы() Цикл
			Если СтрокаВложенная.ПеренестиВВозвратыИзСейфа Тогда
				ЛистОбъект = СтрокаВложенная.ЛистУчета.ПолучитьОбъект();
				СтрокаВозвратаДоб = ЛистОбъект.ВозвратыИзСейфа.Добавить();
				СтрокаВозвратаДоб.КлючСтроки = СтрокаВложенная.КлючСтроки;
				СтрокаВозвратаДоб.Сумма = ?(СтрокаВложенная.СуммаПолучено <> 0, СтрокаВложенная.СуммаПолучено, СтрокаВложенная.Сумма);
				СтрокаВозвратаДоб.ПолученаСумма = СтрокаВложенная.Сумма;
				СтрокаВозвратаДоб.Комментарий = СтрокаВложенная.Комментарий;
				
				СтрокиЧеки = ЛистОбъект.ЧекиПоАктамКМ3.НайтиСтроки(Новый Структура("КлючСтрокиАкта", СтрокаВложенная.КлючСтроки));
				
				Если СтрокиЧеки.Количество() > 0 Тогда
					
					ADOСоединение = Новый COMОбъект("ADODB.Connection");
					ADOСоединение.ConnectionTimeOut = 0;
					ADOСоединение.CommandTimeOut    = 0;
					
					ТабКешЧеки = Новый ТаблицаЗначений();
					ТабКешЧеки.Колонки.Добавить("УИНЧека");
					ТабКешЧеки.Колонки.Добавить("Номенклатура");
					ТабКешЧеки.Колонки.Добавить("Количество");
					ТабКешЧеки.Колонки.Добавить("СуммаЧека");
					ТабКешЧеки.Колонки.Добавить("СуммаПоНдс10");
					ТабКешЧеки.Колонки.Добавить("СуммаПоНдс18");
					ТабКешЧеки.Индексы.Добавить("УИНЧека");
					
					Если ЛистОбъект.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
						СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
						
						ADOСоединение.ConnectionString  = СтрСоедиение;
						ADOСоединение.Open();
						
						СтрЗапрос = "SELECT Ch.CheckUID,
						|  Ch.BaseSum,
						|  Chl.UID as UID,
						|  Chl.Qnt as Qnt,
						|  Chl.SummaPoNDS10 as SummaPoNDS10,
						|  Chl.SummaPoNDS18 as SummaPoNDS18
						|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
						|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid, ArticleBin2UID.UID as UID, SUM(Chl.Quantity) as Qnt,
						|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
						|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
						|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
						|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
						|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
						|						WHERE Chl.date_ch = '" + Формат(КонецДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-dd") + "' and Chl.id_tt_cl = " + Формат(ЛистОбъект.ТорговаяТочка.id_TT, "ЧГ=0") + " and Chl.OperationType_cl IN (1, 201, 3, 202, 203)
						|						GROUP BY Chl.CheckUid, ArticleBin2UID.UID) as Chl ON Ch.CheckUID = Chl.CheckUid
						|where Ch.CloseDate >= '" + Формат(НачалоДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType IN (1, 201, 3, 202, 203)
						|and Ch.ShopNo IN (" + ЛистОбъект.ТорговаяТочка.НомерТочки + ")
						|";
						
						rs = ADOСоединение.Execute(СтрЗапрос);
						
						Если НЕ rs.EOF() Тогда	
							rs.MoveFirst();
							
							Пока НЕ rs.EOF() Цикл
								СтрокаДоб = ТабКешЧеки.Добавить();
								СтрокаДоб.УИНЧека = Rs.Fields("CheckUID").Value;
								СтрокаДоб.Количество = Rs.Fields("Qnt").Value;
								СтрокаДоб.СуммаПоНдс10 = Rs.Fields("SummaPoNDS10").Value;
								СтрокаДоб.СуммаПоНдс18 = Rs.Fields("SummaPoNDS18").Value;
								Если Rs.Fields("UID").Value <> NULL Тогда
									СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID").Value, 2, 36)));
								КонецЕсли;
								Если СтрокаДоб.Количество < 0 Тогда
									СтрокаДоб.Количество = СтрокаДоб.Количество * (-1)
								КонецЕсли;
								Если СтрокаДоб.СуммаПоНдс10 < 0 Тогда
									СтрокаДоб.СуммаПоНдс10 = СтрокаДоб.СуммаПоНдс10 * (-1)
								КонецЕсли;
								Если СтрокаДоб.СуммаПоНдс18 < 0 Тогда
									СтрокаДоб.СуммаПоНдс18 = СтрокаДоб.СуммаПоНдс18 * (-1)
								КонецЕсли;
								СтрокаДоб.СуммаЧека = СтрокаДоб.СуммаПоНдс18 + СтрокаДоб.СуммаПоНдс10;
								rs.MoveNext();
							КонецЦикла;
						КонецЕсли;
					Иначе
						СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
						
						ADOСоединение.ConnectionString  = СтрСоедиение;
						ADOСоединение.Open();
						
						СтрЗапрос = "SELECT Ch.CheckUID,
						|  Ch.BaseSum,
						|  Chl.UID as UID,
						|  Chl.Qnt as Qnt,
						|  Chl.SummaPoNDS10 as SummaPoNDS10,
						|  Chl.SummaPoNDS18 as SummaPoNDS18
						|FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock)
						|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid, ArticleBin2UID.UID as UID, SUM(Chl.Quantity) as Qnt,
						|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
						|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
						|						FROM [SMS_UNION].[dbo].[CheckLine] as Chl (nolock)
						|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
						|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
						|						WHERE Chl.date_ch = '" + Формат(КонецДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-dd") + "' and Chl.id_tt_cl = " + Формат(ЛистОбъект.ТорговаяТочка.id_TT, "ЧГ=0") + "
						|						GROUP BY Chl.CheckUid, ArticleBin2UID.UID) as Chl ON Ch.CheckUID = Chl.CheckUid
						|where Ch.CloseDate >= '" + Формат(НачалоДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ЛистОбъект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
						|and Ch.ShopNo = " + Формат(ЛистОбъект.ТорговаяТочка.НомерТочки, "ЧГ=0") + "
						|";
						
						rs = ADOСоединение.Execute(СтрЗапрос);
						
						Если НЕ rs.EOF() Тогда	
							rs.MoveFirst();
							
							Пока НЕ rs.EOF() Цикл
								СтрокаДоб = ТабКешЧеки.Добавить();
								СтрокаДоб.УИНЧека = Rs.Fields("CheckUID").Value;
								СтрокаДоб.Количество = Rs.Fields("Qnt").Value;
								СтрокаДоб.СуммаПоНдс10 = Rs.Fields("SummaPoNDS10").Value;
								СтрокаДоб.СуммаПоНдс18 = Rs.Fields("SummaPoNDS18").Value;
								Если Rs.Fields("UID").Value <> NULL Тогда
									СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID").Value, 2, 36)));
								КонецЕсли;
								Если СтрокаДоб.Количество < 0 Тогда
									СтрокаДоб.Количество = СтрокаДоб.Количество * (-1)
								КонецЕсли;
								Если СтрокаДоб.СуммаПоНдс10 < 0 Тогда
									СтрокаДоб.СуммаПоНдс10 = СтрокаДоб.СуммаПоНдс10 * (-1)
								КонецЕсли;
								Если СтрокаДоб.СуммаПоНдс18 < 0 Тогда
									СтрокаДоб.СуммаПоНдс18 = СтрокаДоб.СуммаПоНдс18 * (-1)
								КонецЕсли;
								СтрокаДоб.СуммаЧека = СтрокаДоб.СуммаПоНдс18 + СтрокаДоб.СуммаПоНдс10;
								rs.MoveNext();
							КонецЦикла;
						КонецЕсли;	
					КонецЕсли;	
					
					ADOСоединение.Close();
					
					СуммаИтог = 0;
					СуммаПоНДС18Итог = 0;
					СуммаПоНДС10Итог = 0;
					Для Каждого СтрокаЧек Из СтрокиЧеки Цикл
						СтрокиКешЧек = ТабКешЧеки.НайтиСтроки(Новый Структура("УИНЧека", СтрокаЧек.УинЧека));
						Для Каждого СтрокаКеш Из СтрокиКешЧек Цикл
							Если СтрокаКеш.СуммаЧека = 0 Тогда
								Продолжить;
							КонецЕсли;	
							СтрокаДобТовар = ЛистОбъект.ТоварыПоВозвратам.Добавить();
							СтрокаДобТовар.КлючСтрокиВозврата = СтрокаВозвратаДоб.КлючСтроки;
							СтрокаДобТовар.Номенклатура = СтрокаКеш.Номенклатура;
							СтрокаДобТовар.Количество = СтрокаКеш.Количество;
							СтрокаДобТовар.Сумма = СтрокаКеш.СуммаЧека;
							СтрокаДобТовар.СуммаПоНДС18 = СтрокаКеш.СуммаПоНДС18;
							СтрокаДобТовар.СуммаПоНДС10 = СтрокаКеш.СуммаПоНДС10;
							Если СтрокаДобТовар.СуммаПоНДС18 > 0 Тогда
								СтрокаДобТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
							Иначе
								СтрокаДобТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
							КонецЕсли;	
							СуммаИтог = СуммаИтог + СтрокаДобТовар.Сумма;
							СуммаПоНДС10Итог = СуммаПоНДС10Итог + СтрокаДобТовар.СуммаПоНДС10;
							СуммаПоНДС18Итог = СуммаПоНДС18Итог + СтрокаДобТовар.СуммаПоНДС18;
						КонецЦикла;	
					КонецЦикла;	
					СтрокаВозвратаДоб.ПолученаСумма = СуммаИтог;
					СтрокаВозвратаДоб.СуммаПоНДС10 = СуммаПоНДС10Итог;
					СтрокаВозвратаДоб.СуммаПоНДС18 = СуммаПоНДС18Итог;
				КонецЕсли;	
				
				КолвоСтрок = ЛистОбъект.АктыКМ3.Количество();
				Для н = 1 По КолвоСтрок Цикл
					Если СтрокаВозвратаДоб.КлючСтроки = ЛистОбъект.АктыКМ3[КолвоСтрок - н].КлючСтроки Тогда
						ЛистОбъект.АктыКМ3.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЦикла;
				
				КолвоСтрок = ЛистОбъект.ЧекиПоАктамКМ3.Количество();
				Для н = 1 По КолвоСтрок Цикл
					Если СтрокаВозвратаДоб.КлючСтроки = ЛистОбъект.ЧекиПоАктамКМ3[КолвоСтрок - н].КлючСтрокиАкта Тогда
						ЛистОбъект.ЧекиПоАктамКМ3.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЦикла;
				
				ЛистОбъект.ВозвратыРедактировались = Истина;
				ЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеренестиВВозвратыИзСейфа(Команда)
	
	Ответ = Вопрос("Перенести отмеченные строки в возвраты из сейфа?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВозвратыИзСейфаСервер();
	
	ПерестроитьДеревоДанных();
	РазвернутьДеревоРекурсивно(ДеревоДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхЭтоВозвратБезналПриИзменении(Элемент)
	
	Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхКомментарийПриИзменении(Элемент)
	
	Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхНаличныеПолученоОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Элементы.ДеревоДанных.ТекущиеДанные.КлючСтроки) Тогда
		Элементы.Акты.ТекущиеДанные.КлючСтроки = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;	
	СтрокиЧеков = Чеки.НайтиСтроки(Новый Структура("КлючСтрокиАкта", Элементы.ДеревоДанных.ТекущиеДанные.КлючСтроки));
	МассивЧеков = Новый Массив();
	Для Каждого СтрокаЧек Из СтрокиЧеков Цикл
		МассивЧеков.Добавить(Новый Структура("УИНЧека, СуммаЧека", СтрокаЧек.УИНЧека, СтрокаЧек.СуммаЧека));
	КонецЦикла;	
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаВыбораЧековКМ3", Новый Структура("ТТ, Дата, Чеки", Элементы.ДеревоДанных.ТекущиеДанные.СтруктурнаяЕдиница, Элементы.ДеревоДанных.ТекущиеДанные.Группировка, МассивЧеков));
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		КолвоСтрок = Чеки.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если Чеки[КолвоСтрок - н].КлючСтрокиАкта = Элементы.ДеревоДанных.ТекущиеДанные.КлючСтроки Тогда
				Чеки.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;	
		Элементы.ДеревоДанных.ТекущиеДанные.СуммаПолучено = 0;
		Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс10 = 0;
		Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс18 = 0;
		Для Каждого СтрокаЧек Из Результат Цикл
			Элементы.ДеревоДанных.ТекущиеДанные.СуммаПолучено = Элементы.ДеревоДанных.ТекущиеДанные.СуммаПолучено + СтрокаЧек.ПолученаСумма;
			Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс10 = Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс10 + СтрокаЧек.СуммаПоНдс10;
			Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс18 = Элементы.ДеревоДанных.ТекущиеДанные.СуммаПоНдс18 + СтрокаЧек.СуммаПоНдс18;
			СтрокаДоб = Чеки.Добавить();
			СтрокаДоб.КлючСтрокиАкта = Элементы.ДеревоДанных.ТекущиеДанные.КлючСтроки;
			СтрокаДоб.УИНЧека = СтрокаЧек.УИНЧека;
			СтрокаДоб.СуммаЧека = СтрокаЧек.ПолученаСумма;
			СтрокаДоб.ЛистУчета = Элементы.ДеревоДанных.ТекущиеДанные.ЛистУчета;
		КонецЦикла;	
	КонецЕсли;
	
	Элементы.ДеревоДанных.ТекущиеДанные.СтрокаИзменена = Истина;
	ДанныеИзменены = Истина;
	
КонецПроцедуры

Функция ПолучитьСписокРасчетчиков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	РолиПользователейТипыРолей.Ссылка
				   |ИЗ
				   |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
				   |ГДЕ
				   |	РолиПользователейТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура БухгалтерРасчетчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокРасчетчиков());
	
КонецПроцедуры


&НаКлиенте
Процедура СверитьСБухгалтерией(Команда)
	
	ОткрытьФорму("Обработка.АктыКМ3.Форма.ФормаСверкаСБухгалтерией");
	
КонецПроцедуры

