// Функция возвращает структуру с 2-мя элементами: "СтрокаПолей" и "СтрокаЗначений"
// в которых содержатся, соответственно, строка полей (в скобках, через запятую)
// и строка значений для данных полей (также, в скобках, через запятую).
//
// Входные параметры:
//  	Данные - Структура - содержит исходные данные (в ключах элементов - имена полей, в значениях - значения полей)
//
Функция ПолучитьСтрокиПолейИЗначений(Данные) Экспорт

	СтрокаПолей	= "";
	СтрокаЗначений = "";
	Для каждого КиЗ1 Из Данные Цикл
		Если ЗначениеЗаполнено(СтрокаПолей) Тогда
			СтрокаПолей = СтрокаПолей + ", ";
			СтрокаЗначений = СтрокаЗначений + ", ";
		КонецЕсли;
		Значение1 = АдаптироватьЗначениеДляSQL(КиЗ1.Значение);
		
		СтрокаПолей = СтрокаПолей + КиЗ1.Ключ;
		СтрокаЗначений = СтрокаЗначений + Значение1;
	КонецЦикла;
	СтрокаПолей    = СтрокаПолей;
	СтрокаЗначений = СтрокаЗначений;
	
	Возврат Новый Структура("СтрокаПолей, СтрокаЗначений", СтрокаПолей, СтрокаЗначений);

КонецФункции // ()

Функция ПолучитьСотрудникаПоКоду(Знач Код) Экспорт
	
	Если Код = NULL Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Число") Тогда
		Код = Формат(Код, "ЧГ=0");
	КонецЕсли;
	
	Код = Прав("0000000000" + СокрЛП(Код), 10);
	
	Ссылка1 = Справочники.ФизическиеЛица.НайтиПоКоду(Код);
	// код для АСТ
	//Ссылка1 = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ТабельныйНомер", Код);
	Возврат Ссылка1;

КонецФункции // ()

Функция ПолучитьРольПоКоду(Знач Код) Экспорт
	
	Если Код = NULL Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Число") Тогда
		Код = Формат(Код, "ЧГ=0");
	КонецЕсли;
	
	Код = Прав("00000" + СокрЛП(Код), 5);
	Ссылка1 = Справочники.РолиПользователей.НайтиПоКоду(Код);
	Возврат Ссылка1;
	
КонецФункции // ()

Процедура ИнициализироватьОбъект(Объект, Отказ) Экспорт

	СоединениеСБазойSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("SMS_REPL");
	Если СоединениеСБазойSQL = Неопределено Тогда
		Сообщить("Не удалось установить соединение с БД MSSQL. Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// заполним реквизиты обработки
	Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Сообщить("Не заполнен параметр сеанса ""Текущий пользователь"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ1 = Справочники.РолиПользователей.Администратор.СоставРоли.Найти(Объект.Пользователь.ФизЛицо, "Сотрудник");
	Если СтрокаТЧ1 <> Неопределено Тогда
		Объект.ЭтоАдминистратор = Истина;
	КонецЕсли;
		
	Попытка
		//Сообщить("Код - " + Объект.Пользователь.ФизЛицо.Код);
		Объект.КодСотрудника = Число(Объект.Пользователь.ФизЛицо.Код);
	Исключение
		Объект.КодСотрудника = 0;
	КонецПопытки;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.КодСотрудника) Тогда
		Сообщить("Невожможно определить код физ. лица (сотрудника).");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивРолей = Справочники.РолиПользователей.ПолучитьРолиПользователя(Объект.Пользователь);
	Если МассивРолей.Количество() = 0 Тогда
		Сообщить("Текущему пользователю не назначены роли (см. справочник ""Роли пользователей"")");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого Эл1 Из МассивРолей Цикл
		Объект.ВсеРолиПользователя.Добавить(Эл1);
	КонецЦикла;
	
	Если МассивРолей.Количество() = 1 Тогда
		Объект.РольПользователя = МассивРолей[0];
	КонецЕсли;
	
	Объект.НомерМагазина = 0;
	
КонецПроцедуры


// Функция возвращает значения TTL (время жизни сообщения)
// для использования в сообщениях
//
Функция ПолучитьЗначениеTTL() Экспорт

	Возврат 30;

КонецФункции // ()

Функция ДобавитьЗаписиВТаблицыSQL(ДанныеДляЗаписи, ИДСообщения) Экспорт

	СоединениеСБДSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("SMS_REPL");
	МассивДанныхДляMessages = ДанныеДляЗаписи.Messages;
	ДанныеДляRecipients = ДанныеДляЗаписи.Recipients;
	
	ТекстЗапроса = "BEGIN TRANSACTION
	|DECLARE @ID uniqueidentifier;
	|SET @ID = NewID();";
	Для каждого ДанныеДляMessages Из МассивДанныхДляMessages Цикл
		СтруктураПолейИЗначений = ПолучитьСтрокиПолейИЗначений(ДанныеДляMessages);
		ТекстЗапроса = ТекстЗапроса + "
		|INSERT INTO SMS_REPL.dbo.info_exch_messages (ID, " + СтруктураПолейИЗначений.СтрокаПолей + ")
		|VALUES (@ID, " + СтруктураПолейИЗначений.СтрокаЗначений + ");";
	КонецЦикла;
	
	Если ДанныеДляRecipients <> Неопределено Тогда
		Для каждого Стр1 Из ДанныеДляRecipients Цикл
			Стр1.Вставить("ShopNo_rep", Стр1.ShopNo);
			СтруктураПолейИЗначений = ПолучитьСтрокиПолейИЗначений(Стр1);
			ТекстЗапроса = ТекстЗапроса + "
			|INSERT INTO SMS_REPL.dbo.info_exch_recipients (IDMes, " + СтруктураПолейИЗначений.СтрокаПолей + ")
			|VALUES (@ID, " + СтруктураПолейИЗначений.СтрокаЗначений + ");"; 
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|IF @@ERROR = 0
	|	COMMIT
	|ELSE
	|	ROLLBACK"; 
	
	Попытка
		ResultQuery = СоединениеСБДSQL.Execute(ТекстЗапроса);
	Исключение
		//Сообщить("Ошибка при добавлении записей в таблицы ""Messages"" и ""Recipients""");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ()

Функция ПолучитьКодТипаСообщенияМОСПоЗначениюПеречисления(ТипИС) Экспорт

	Если ТипИС = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
		Возврат 1;
	ИначеЕсли ТипИС = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		Возврат 2;
	ИначеЕсли ТипИС = Перечисления.ТипыСообщенийМОС.Задача Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьКодТипаСообщенияМОСПоЗначениюПеречисления()

Функция ПолучитьЗначениеПеречисленияПоКодуТипаСообщения(ТипИС) Экспорт

	Если ТипИС = 1 Тогда
		Возврат Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение;
	ИначеЕсли ТипИС = 2 Тогда
		Возврат Перечисления.ТипыСообщенийМОС.Инцидент;
	ИначеЕсли ТипИС = 3 Тогда
		Возврат Перечисления.ТипыСообщенийМОС.Задача;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеПеречисленияПоКодуТипаСообщения()

Функция АдаптироватьЗначениеДляSQL(Значение1) Экспорт

	Если ТипЗнч(Значение1) = Тип("Строка") Тогда
		Если НЕ ЗначениеЗаполнено(Значение1) Тогда
			Возврат "NULL";
		Иначе
			Возврат "'" + СокрЛП(Значение1) + "'";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение1) = Тип("Число") Тогда
		Возврат Формат(Значение1, "ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение1) = Тип("Дата") Тогда
		Возврат "'" + Строка(Значение1) + "'";
	Иначе
		Возврат Строка(Значение1);
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьСписокМагазиновИзТЗСмен() Экспорт

	СЗРез = Новый СписокЗначений;
	ТЗСмен = МеханизмОбменаСообщениямиПовтИсп.ПолучитьТЗСмен();
	Для каждого СтрокаТЗС Из ТЗСмен Цикл
		ЭлСЗ = СЗРез.НайтиПоЗначению(СтрокаТЗС.НомерМагазина);
		Если ЭлСЗ = Неопределено Тогда
			СЗРез.Добавить(СтрокаТЗС.НомерМагазина, СтрокаТЗС.ИмяМагазина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СЗРез;
	
КонецФункции // ()

Функция ПолучитьТЗСтаршихТекущихСмен(ТорговыеТочки = Неопределено) Экспорт

	ТЗСмен = МеханизмОбменаСообщениямиПовтИсп.ПолучитьТЗСмен();
	ТЗРез = ТЗСмен.СкопироватьКолонки("НомерМагазина, КодФизЛица");
	Для каждого СтрокаТЗСмен Из ТЗСмен Цикл
		Если ТорговыеТочки <> Неопределено Тогда
			ТорговаяТочка = ТорговыеТочки.Найти(СтрокаТЗСмен.НомерМагазина);
			Если ТорговаяТочка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТЗСмен.ЭтоСтаршийСмены Тогда
			СтрокаТЗРез = ТЗРез.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗРез, СтрокаТЗСмен);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗРез;
	
КонецФункции // ()

Функция ПолучитьПредставлениеВидаПолучателя(КодВида) Экспорт

	Если КодВида = 3 Тогда
		Возврат "Указанная роль";
	ИначеЕсли КодВида = 1 Тогда
		Возврат "Все магазины";
	ИначеЕсли КодВида = 2 Тогда
		Возврат "Список магазинов";
	ИначеЕсли КодВида = 0 Тогда
		Возврат "";
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьКоличествоМагазиновВRecipients(IdMes) Экспорт

	ТЗКолВаМагазинов = МеханизмОбменаСообщениямиПовтИсп.ПолучитьТЗКоличестваМагазиновRecipients();
	СтрокаТЗКМ = ТЗКолВаМагазинов.Найти(IdMes, "ИдСообщения");
	Если СтрокаТЗКМ = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат СтрокаТЗКМ.КолВоТТ;
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьНазваниеПодразделенияПоКоду(Знач КодПодразделения) Экспорт
	
	СЗПодр = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСписокПодразделений("Все");
	ЭлСЗПодр = СЗПодр.НайтиПоЗначению(КодПодразделения);
	Если ЭлСЗПодр = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЭлСЗПодр.Представление;
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьКодСтаршегоСмены(НомерМагазина, Дата1 = Неопределено) Экспорт

	Если Дата1 = Неопределено Тогда
		Дата1 = ПолучитьРабочуюДатуМОС();
	КонецЕсли;
	
	КодСтаршегоСмены = Неопределено;
	ТЗСмен = МеханизмОбменаСообщениямиПовтИсп.ПолучитьТЗСмен(Дата1);
	Для каждого СтрокаТЗС Из ТЗСмен Цикл
		Если СтрокаТЗС.НомерМагазина <> НомерМагазина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЗС.ЭтоСтаршийСмены Тогда
			КодСтаршегоСмены = СтрокаТЗС.КодФизЛица;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КодСтаршегоСмены;

КонецФункции // ()

Функция ПолучитьОтветственногоЗаКачествоТовара(Товар) Экспорт

	Возврат Товар.РольОтветственныхЗаТовар;

КонецФункции // ()

Функция ПолучитьСкладПоставщикТовара(Товар, КодПодразделения, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ПолучитьРабочуюДатуМОС();
	КонецЕсли;
	
	Подразделение = ПолучитьСтруктурнуюЕдиницуПоКоду(КодПодразделения);
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	//ГруппаТоваров = Товар;
	//Пока ЗначениеЗаполнено(ГруппаТоваров) Цикл
	//	Запрос1 = Новый Запрос;
	//	Запрос1.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СкладПоставщик
	//	|ИЗ
	//	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	//	|			&ДатаСреза,
	//	|			ГруппаНоменклатуры = &ГруппаНоменклатуры
	//	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	//	
	//	Запрос1.УстановитьПараметр("ДатаСреза", Дата);
	//	Запрос1.УстановитьПараметр("ГруппаНоменклатуры", ГруппаТоваров);
	//	Запрос1.УстановитьПараметр("ТорговаяТочка", Подразделение);
	//	
	//	
	//	Рез1 = Запрос1.Выполнить();
	//	Если НЕ Рез1.Пустой() Тогда
	//		Выб1 = Рез1.Выбрать();
	//		Выб1.Следующий();
	//		Возврат Выб1.СкладПоставщик;
	//	КонецЕсли;
	//	
	//	ГруппаТоваров = ГруппаТоваров.Родитель;
	//КонецЦикла;
	
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК СкладПоставщик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ГруппаУРЗ = &ГруппаУРЗ
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	
	Запрос1.УстановитьПараметр("ДатаСреза", Дата);
	Запрос1.УстановитьПараметр("ГруппаУРЗ", Товар.ГруппаНоменклатурыУРЗ);
	Запрос1.УстановитьПараметр("ТорговаяТочка", Подразделение);
	
	Рез1 = Запрос1.Выполнить();
	Если НЕ Рез1.Пустой() Тогда
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.СкладПоставщик;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ()

Функция ПолучитьСтруктурнуюЕдиницуПоКоду(Знач Код) Экспорт

	Если МеханизмОбменаСообщениямиПовтИсп.ЭтоТестовыйРежимМОС() Тогда
		Если Код = 99999 Тогда
			Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", 191);
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", Код);

КонецФункции // ()

Функция ПолучитьРольПользователяПоСкладу(Склад) Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователей.ТипРоли = &ТипРоли
	|	И РолиПользователей.Расчетчик_СтруктурнаяЕдиница = &Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	РолиПользователей.Код УБЫВ";
	
	Запрос1.УстановитьПараметр("ТипРоли", Перечисления.ТипыРолейПользователейМОС.Склад);
	Запрос1.УстановитьПараметр("Склад", Склад);
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьРасчетчикаПоТовару(Товар) Экспорт
	
	// сначала получим расчётчика
	ГруппаТоваров = Товар;
	Пока ЗначениеЗаполнено(ГруппаТоваров) Цикл
		Запрос1 = Новый Запрос;
		Запрос1.Текст = 
		"ВЫБРАТЬ
		|	РасчетчикиГруппыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
		|ГДЕ
		|	РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = &ГруппаНоменклатуры
		|	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
		Запрос1.УстановитьПараметр("ГруппаНоменклатуры", ГруппаТоваров);
		Рез1 = Запрос1.Выполнить();
		Если НЕ Рез1.Пустой() Тогда
			Выб1 = Рез1.Выбрать();
			Выб1.Следующий();
			Возврат Выб1.Ссылка;
		КонецЕсли;
		
		ГруппаТоваров = ГруппаТоваров.Родитель;
	КонецЦикла;
	
КонецФункции // ()

Функция ПолучитьРольПользователяПоРасчетчику(Расчетчик) Экспорт

	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.ПометкаУдаления = ЛОЖЬ
	|	И РолиПользователей.ТипРоли = &ТипРоли
	|	И РолиПользователей.Расчетчик_СтруктурнаяЕдиница = &Расчетчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	РолиПользователей.Код УБЫВ";
	
	Запрос1.УстановитьПараметр("ТипРоли", Перечисления.ТипыРолейПользователейМОС.Расчетчик);
	Запрос1.УстановитьПараметр("Расчетчик", Расчетчик);
	
	Рез1 = Запрос1.Выполнить();
	Если Рез1.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выб1 = Рез1.Выбрать();
		Выб1.Следующий();
		Возврат Выб1.Ссылка;
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьПредставлениеСтатусаИнцидента(КодСтатуса) Экспорт

	Если КодСтатуса = 0 Тогда
		Возврат "Отменён";
	ИначеЕсли КодСтатуса = 1 Тогда
		Возврат "Направлен";
	ИначеЕсли КодСтатуса = 2 Тогда
		Возврат "Принят к исполнению";
	ИначеЕсли КодСтатуса = 3 Тогда
		Возврат "Выполнен";
	ИначеЕсли КодСтатуса = 4 Тогда
		Возврат "Выполнен и проверен";
	ИначеЕсли КодСтатуса = 5 Тогда
		Возврат "Переадресован";
	Иначе
		Возврат "-";
	КонецЕсли;

КонецФункции // ()

Функция ПолучитьРабочуюДатуМОС() Экспорт

	ТекДата = ТекущаяДатаСеанса();
	Если МеханизмОбменаСообщениямиПовтИсп.ЭтоТестовыйРежимМОС() Тогда
		Дата1 = Константы.ДатаТестированияМОС.Получить();
		Если ЗначениеЗаполнено(Дата1) Тогда
			Время1 = ТекДата - НачалоДня(ТекДата);
			Дата1 = Дата1 + Время1;
		Иначе
			Дата1 = ТекДата;
		КонецЕсли;
	Иначе
		Дата1 = ТекДата;
	КонецЕсли;
	Возврат Дата1;
	
КонецФункции // ()

Функция ПолучитьДобавкуКЗаголовкуОкна() Экспорт
	
	ТекДата = ПолучитьРабочуюДатуМОС();
	СтрокаРез = ". Раб. дата - " + Формат(ТекДата, "ДЛФ=Д") + ". Пользователь - " + Строка(ПараметрыСеанса.ТекущийПользователь);
	Возврат СтрокаРез;
	
КонецФункции // ()

Процедура ОпределитьРольДляСообщенийИзМагазинов() Экспорт
	
	// сделаем выборку сообщений, которым нужно проставить роли
	СоединениеСБДSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("IzbenkaFin");
	
	ТекстЗапросаSQL = "SELECT *
	|  FROM [SMS_REPL].[dbo].[info_exch_messages] AS Mes1 (nolock)
	|where Mes1.direction=2
	|and Mes1.Role IS NULL";
	
	ResultQuery = СоединениеСБДSQL.Execute(ТекстЗапросаSQL);
	Пока НЕ ResultQuery.EOF() Цикл
		// получим значения кода товара и кода шаблона
		КодРолиРезультат = Неопределено;
		ТекстДопИнфо = ResultQuery.Fields("OtherInfo").Value;
		КодМагазина = ResultQuery.Fields("ShopNo").Value;
		ИДЗаписи = Строка(ResultQuery.Fields("Id").Value);
		Если ЗначениеЗаполнено(ТекстДопИнфо) Тогда
			Стр1 = ПолучитьДанныеОШаблонеИТовареИзXML(ТекстДопИнфо);
			Если Стр1 <> Неопределено Тогда
				Шаблон = Справочники.ШаблоныСообщенийМОС.НайтиПоКоду(Стр1.КодШаблона);
				Товар = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Число(Стр1.ИДТовара));
				Если ЗначениеЗаполнено(Шаблон) И ЗначениеЗаполнено(Товар) Тогда
					Если Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияКСкладу Тогда
						СкладПоставщик = Обработки.СообщенияМОС.ПолучитьСкладПоставщикТовара(Товар, КодМагазина);
						Если НЕ ЗначениеЗаполнено(СкладПоставщик) Тогда
							ТекстСообщения = "Не найден склад-поставщик! Исходные данные:"
							+ Символы.ПС + "Товар: " + Строка(Товар);							
							//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
							Продолжить;
						КонецЕсли;
						Получатель = Обработки.СообщенияМОС.ПолучитьРольПользователяПоСкладу(СкладПоставщик);
						Если НЕ ЗначениеЗаполнено(Получатель) Тогда
							ТекстСообщения = "Не найдена роль для склада! Исходные данные:"
							+ Символы.ПС + "Склад: " + Строка(СкладПоставщик);
							
							//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
							Продолжить;
						КонецЕсли;
						КодРолиРезультат = Число(Получатель.Код);
					ИначеЕсли Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияПоКачеству Тогда
						Получатель = Товар.РольОтветственныхЗаТовар;
						Если НЕ ЗначениеЗаполнено(Получатель) Тогда
							ТекстСообщения = "Не найдена роль ответственных по качеству! Исходные данные:"
							+ Символы.ПС + "Товар: " + Строка(Товар);
												
							//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
							Продолжить;
						КонецЕсли;
						КодРолиРезультат = Число(Получатель.Код);
					ИначеЕсли Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияРасчетчику Тогда
						// вычислим расчётчика по товару
						Расчетчик = ПолучитьРасчетчикаПоТовару(Товар);
						Если НЕ ЗначениеЗаполнено(Расчетчик) Тогда
							ТекстСообщения = "Не удалось найти расчетчика по товару! Исходные данные:"
							+ Символы.ПС + "Товар: " + Строка(Товар);
							
							//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
							Продолжить;
						КонецЕсли;
										
						// найдём роль по найденному расчётчику
						Получатель = ПолучитьРольПользователяПоРасчетчику(Расчетчик);
						Если НЕ ЗначениеЗаполнено(Получатель) Тогда
							ТекстСообщения = "Не найдена роль для расчетчика! Исходные данные:"
							+ Символы.ПС + "Расчетчик: " + Строка(Расчетчик);
												
							//ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
							Продолжить;
						КонецЕсли;
						КодРолиРезультат = Число(Получатель.Код);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодРолиРезультат) Тогда
			// модифицируем запись в табл. SQL
			ТекстКомандыSQL2 = "UPDATE SMS_REPL.dbo.info_exch_messages SET Role = " + Формат(КодРолиРезультат, "ЧГ=0") + " WHERE id = CAST('" + ИДЗаписи + "' AS uniqueidentifier)"; 
			СоединениеСБДSQL.Execute(ТекстКомандыSQL2);
		КонецЕсли;
		
		ResultQuery.MoveNext();
	КонецЦикла;
	

КонецПроцедуры

Функция ПолучитьДанныеОШаблонеИТовареИзXML(ТекстXML)
	
	КодШаблона = Неопределено;
	ИДТовара = Неопределено;
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстXML);
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеХМЛ.Имя = "ШаблонИТовар" Тогда
				КодШаблона = ЧтениеХМЛ.ПолучитьАтрибут("КодШаблона");
				ИДТовара = ЧтениеХМЛ.ПолучитьАтрибут("ИДТовара");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КодШаблона) И ЗначениеЗаполнено(ИДТовара) Тогда
		Возврат Новый Структура("КодШаблона, ИДТовара", КодШаблона, ИДТовара);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ()
