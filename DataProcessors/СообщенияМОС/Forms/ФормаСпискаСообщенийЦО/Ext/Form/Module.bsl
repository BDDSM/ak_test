&НаКлиенте
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВызватьФормуСообщения(Элемент.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Форма1 = ПолучитьФорму("Документ.СообщениеМОС.ФормаСписка");
		
	Форма1.Открыть();
	Отказ = Истина;
	
	//РолиПользователя = Строка(Объект.ВсеРолиПользователя);
	//Если ПериодичностьОбновления > 0 Тогда
	//	ПодключитьОбработчикОжидания("ОбработкаОжидания", ПериодичностьОбновления);
	//КонецЕсли;
	//ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()

	ОбновитьДанныеНаСервере();

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанные(Команда = Неопределено) Экспорт
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

Функция ПолучитьСотрудникаПоКоду(Код)

	Возврат Обработки.СообщенияМОС.ПолучитьСотрудникаПоКоду(Код);

КонецФункции // ()

&НаКлиенте
Процедура СоздатьНовоеСообщение(Команда)
	
	Форма1 = ПолучитьФорму("Справочник.ШаблоныСообщенийМОС.ФормаВыбора",, ЭтаФорма);
	ВыбранныйШаблон = Форма1.ОткрытьМодально();
	Если НЕ ЗначениеЗаполнено(ВыбранныйШаблон) Тогда
		Предупреждение("Создание новых сообщений возможно только на основе шаблона.");
		Возврат;
	КонецЕсли;
	
	ПФ1 = Новый Структура("Шаблон, РеквизитОбъект", ВыбранныйШаблон, Объект);
	Форма1 = ПолучитьФорму("Обработка.СообщенияМОС.Форма.ФормаНовогоСообщенияЦО", ПФ1, ЭтаФорма);
	//КопироватьДанныеФормы(Объект, Форма1.Объект);
	Форма1.Открыть();
	
КонецПроцедуры

Процедура ОбновитьДанныеНаСервере()
	
	ТекСтраница = Элементы.Закладки.ТекущаяСтраница;
	
	ТекИД   = Неопределено;
	ТекТаблица  = "";
	Если ТекСтраница = Элементы.Закладки.ПодчиненныеЭлементы.НеОбработано Тогда
		ТекТаблица  = "Сообщения";
	ИначеЕсли ТекСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Все Тогда
		ТекТаблица  = "Сообщения1";
	ИначеЕсли ТекСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Инциденты Тогда
		ТекТаблица  = "Сообщения2";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекТаблица) Тогда
		ТекСтрока = Элементы[ТекТаблица].ТекущаяСтрока;
		Если ТекСтрока <> Неопределено Тогда
			ТекСтрокаТЧ = Объект.Сообщения.НайтиПоИдентификатору(ТекСтрока);
			Если ТекСтрокаТЧ <> Неопределено Тогда
				ТекИД = ТекСтрокаТЧ.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Объект.Сообщения.Очистить();
	Объект.Получатели.Очистить();
	ТекстЗапросаКSQL = "
	|USE SMS_REPL;
	|SELECT
	|	CAST([Id] AS char(36)) AS IdStr
	|	,CAST([IdMes] AS char(36)) AS IdMesStr
	|	,[ShopNo]
    |	,[TypeAddr]
    | 	,[TTL]
    |	,[Role]
    |	,[Direction]
    |	,[MessageText]
    |	,[MessageType]
    |	,[Author]
    |	,[AddDateTime]
    |	,[Reader]
    |	,[ReadDateTime]
    |	,[Executor]
    |	,[PlanDateTime]
	|	,[EndDateTime]
    |	,[Status]
    |	,[Acceptor]
    |	,[RoleSender]
    |	,[row_rep]
    |	,[type_ch]
    |	,[ShopNo_rep]
    |	,[subject]
	|FROM [SMS_REPL].[dbo].[info_exch_Messages] (nolock) 
	//|WHERE Msg.Direction = 1 OR Msg.Direction = 3
	|ORDER BY [AddDateTime] DESC";
	
	МассивИД = Новый Массив;
	СоединениеСБДSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("SMS_REPL");
	ResultQuery = СоединениеСБДSQL.Execute(ТекстЗапросаКSQL);
	Если ResultQuery <> Неопределено Тогда
		Пока НЕ ResultQuery.Eof() Цикл
			// фильтрация для списка "Не обработано"
			Если ТекСтраница = Элементы.Закладки.ПодчиненныеЭлементы.НеОбработано Тогда
								
				Если ResultQuery.Fields("ReadDateTime").Value <> NULL
						ИЛИ ResultQuery.Fields("Direction").Value <> 2
						И ResultQuery.Fields("Direction").Value <> 3
						ИЛИ ResultQuery.Fields("MessageType").Value = 2  Тогда
					
					ResultQuery.MoveNext();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Инциденты Тогда
				Если ResultQuery.Fields("MessageType").Value <> 2 ИЛИ ResultQuery.Fields("Status").Value = 0 Тогда
					ResultQuery.MoveNext();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТипСообщения = Обработки.СообщенияМОС.ПолучитьЗначениеПеречисленияПоКодуТипаСообщения(ResultQuery.Fields("MessageType").Value);
			
			//// фильтрация для списка "Инциденты"
			//Если Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Инциденты
			//	И ТипСообщения <> Перечисления.ТипыСообщенийМОС.Инцидент Тогда
			//	
			//	ResultQuery.MoveNext();
			//	Продолжить;
			//КонецЕсли;
			
			// фильтрация по ролям
			РольОтправителя = Обработки.СообщенияМОС.ПолучитьРольПоКоду(ResultQuery.Fields("RoleSender").Value);
			РольПолучателя  = Обработки.СообщенияМОС.ПолучитьРольПоКоду(ResultQuery.Fields("Role").Value);
			
			Если РольПолучателя = Справочники.РолиПользователей.Администратор И НЕ Объект.ЭтоАдминистратор Тогда
				ResultQuery.MoveNext();
				Продолжить;
			КонецЕсли;
			
			КодНаправления = ResultQuery.Fields("Direction").Value;
									
			Если КодНаправления = 1 Тогда
				Эл1 = Объект.ВсеРолиПользователя.НайтиПоЗначению(РольОтправителя);
				Если Эл1 = Неопределено Тогда
					ResultQuery.MoveNext();
					Продолжить;
				КонецЕсли;
			ИначеЕсли КодНаправления = 2 Тогда
				Если ЗначениеЗаполнено(РольПолучателя) Тогда
					Эл1 = Объект.ВсеРолиПользователя.НайтиПоЗначению(РольПолучателя);
					Если Эл1 = Неопределено Тогда
						ResultQuery.MoveNext();
						Продолжить;
					КонецЕсли;
				Иначе
					ResultQuery.MoveNext();
					Продолжить;
				КонецЕсли;
			ИначеЕсли КодНаправления = 3 Тогда // подразумеваем, что при таком способе адресации обе роли будут заполнены всегда
				Эл1 = Объект.ВсеРолиПользователя.НайтиПоЗначению(РольОтправителя);
				Эл2 = Объект.ВсеРолиПользователя.НайтиПоЗначению(РольПолучателя);
				Если Эл1 = Неопределено И Эл2 = Неопределено Тогда
					ResultQuery.MoveNext();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			
			// основные действия
			ИД = ResultQuery.Fields("IDStr").Value;
			
			
			
			СО1 = Новый Структура("Идентификатор", ИД);
			
			МассивСтрок1 = Объект.Сообщения.НайтиСтроки(СО1);
			Если МассивСтрок1.Количество() > 0 Тогда
				ResultQuery.MoveNext();
				Продолжить;
			КонецЕсли;
			МассивИД.Добавить(ИД);
			СтрокаТЧ1 = Объект.Сообщения.Добавить();
			СтрокаТЧ1.Идентификатор = ИД;
			СтрокаТЧ1.ИдентификаторРодителя = ResultQuery.Fields("IDMesStr").Value;
			СтрокаТЧ1.ТипСообщения = ТипСообщения;
			СтрокаТЧ1.Автор = ПолучитьСотрудникаПоКоду(ResultQuery.Fields("Author").Value);
			СтрокаТЧ1.ДатаИВремяСоздания = ResultQuery.Fields("AddDateTime").Value;
			СтрокаТЧ1.ТекстСообщения = ResultQuery.Fields("MessageText").Value;
			СтрокаТЧ1.Прочитал = ПолучитьСотрудникаПоКоду(ResultQuery.Fields("Reader").Value);
			СтрокаТЧ1.ДатаИВремяПрочтения = ResultQuery.Fields("ReadDateTime").Value;
			СтрокаТЧ1.Исполнитель = ПолучитьСотрудникаПоКоду(ResultQuery.Fields("Executor").Value);
			СтрокаТЧ1.ДатаИВремяВыполненияПлан = ResultQuery.Fields("PlanDateTime").Value;
			СтрокаТЧ1.ДатаИВремяВыполненияФакт = ResultQuery.Fields("EndDateTime").Value;
			СтрокаТЧ1.РольПолучателя = РольПолучателя;
			СтрокаТЧ1.РольОтправителя = РольОтправителя;
			
			КодВидаПолучателя = ResultQuery.Fields("TypeAddr").Value;
			СтрокаТЧ1.ВидПолучателя = Обработки.СообщенияМОС.ПолучитьПредставлениеВидаПолучателя(КодВидаПолучателя);
			
			КодПодразделения = ResultQuery.Fields("ShopNo").Value;
			Если НЕ ЗначениеЗаполнено(КодПодразделения) Тогда
				Если КодВидаПолучателя = 1 Тогда
					СтрокаТЧ1.Подразделение = "<ВСЕ МАГАЗИНЫ>";
				ИначеЕсли КодВидаПолучателя = 2 Тогда
					//КолВоМагазинов = Обработки.СообщенияМОС.ПолучитьКоличествоМагазиновВRecipients(СтрокаТЧ1.Идентификатор);
					//СтрокаТЧ1.Подразделение = "<" + Строка(КолВоМагазинов) + " магазинов>";
					СтрокаТЧ1.Подразделение = "<выбранные магазины>";
				Иначе
					СтрокаТЧ1.Подразделение = "-";
				КонецЕсли;
			Иначе
				СтрокаТЧ1.КодПодразделения = КодПодразделения;
				СтрокаТЧ1.Подразделение = Обработки.СообщенияМОС.ПолучитьНазваниеПодразделенияПоКоду(СтрокаТЧ1.КодПодразделения);
			КонецЕсли;
			СтрокаТЧ1.КодНаправления = КодНаправления;
			СтрокаТЧ1.ИндексКодаНаправления = КодНаправления - 1;
			Если КодНаправления = 1 Тогда
				СтрокаТЧ1.Направление = "Исход.";
			ИначеЕсли КодНаправления = 2 Тогда
				СтрокаТЧ1.Направление = "Вход.";
			ИначеЕсли КодНаправления = 3 Тогда
				СтрокаТЧ1.Направление = "Внутр.";
			КонецЕсли;
			
			Если ResultQuery.Fields("Status").Value = NULL Тогда
				СтрокаТЧ1.СтатусИнцидента = 9999999999;
			Иначе
				СтрокаТЧ1.СтатусИнцидента = ResultQuery.Fields("Status").Value;
			КонецЕсли;
			СтрокаТЧ1.СтатусИнцидентаСтрокой = Обработки.СообщенияМОС.ПолучитьПредставлениеСтатусаИнцидента(СтрокаТЧ1.СтатусИнцидента);
			СтрокаТЧ1.ПринялКИсполнению = ПолучитьСотрудникаПоКоду(ResultQuery.Fields("Acceptor").Value);
			СтрокаТЧ1.Тема = СокрЛП(ResultQuery.Fields("Subject").Value);;
			
			ResultQuery.MoveNext();
		КонецЦикла;
		
		Если МассивИД.Количество() > 0 Тогда
			СтрокаИД = "";
			Для каждого ИД1 Из МассивИД Цикл
				Если СтрокаИД = "" Тогда
					СтрокаИД = "(";
				Иначе
					СтрокаИД = СтрокаИД + ", ";
				КонецЕсли;
				СтрокаИД = СтрокаИД + "CAST('" + ИД1 + "' AS uniqueidentifier)";
			КонецЦикла;
			СтрокаИД = СтрокаИД + ")";
			ТекстЗапросаКSQL = "
			|SELECT 
			|	CAST([IdMes] AS char(36)) AS IdMesStr
			|	,[ShopNo]
			|	,[Senior]
			|	,[Reader]
			|	,[ReadDateTime]
			|FROM [SMS_REPL].[dbo].[info_exch_Recipients] AS Rec (nolock) 
			|WHERE [IDMes] IN " + СтрокаИД + "
			|ORDER BY [ShopNo]" ;
			
			ResultQuery = СоединениеСБДSQL.Execute(ТекстЗапросаКSQL);
			Соот1 = Новый Соответствие; // в этом соотв. будет храниться признак прочтения всеми
			Пока НЕ ResultQuery.Eof() Цикл
				СтрокаТЧ1 = Объект.Получатели.Добавить();
				СтрокаТЧ1.ИДСообщения = ResultQuery.Fields("IDMesStr").Value;
				ЗначСоот1 = Соот1.Получить(СтрокаТЧ1.ИДСообщения);
				Если ЗначСоот1 = Неопределено Тогда // инициализируем эл-т соответствия
					Соот1.Вставить(СтрокаТЧ1.ИДСообщения, Истина);
				КонецЕсли;
				
				СтрокаТЧ1.КодПодразделенияПолучателя = ResultQuery.Fields("ShopNo").Value;
				СтрокаТЧ1.ПодразделениеПолучатель = Обработки.СообщенияМОС.ПолучитьНазваниеПодразделенияПоКоду(СтрокаТЧ1.КодПодразделенияПолучателя);
				СтрокаТЧ1.СтаршийСмены = ПолучитьСотрудникаПоКоду(ResultQuery.Fields("Senior").Value);
				КодПрочитавшего = ResultQuery.Fields("Reader").Value;
				СтрокаТЧ1.Прочитал = ПолучитьСотрудникаПоКоду(КодПрочитавшего);
				Если КодПрочитавшего = NULL Тогда
					Соот1.Вставить(СтрокаТЧ1.ИДСообщения, Ложь);
				КонецЕсли;
				СтрокаТЧ1.ДатаИВремяПрочтения = ResultQuery.Fields("ReadDateTime").Value;
				ResultQuery.MoveNext();
			КонецЦикла;
			Объект.Получатели.Сортировать("ПодразделениеПолучатель");
		КонецЕсли;
		Для каждого СтрокаТЧС Из Объект.Сообщения Цикл
			Если Соот1.Получить(СтрокаТЧС.Идентификатор) = Истина Тогда
				СтрокаТЧС.ПрочтеноВсеми = Истина;
			ИначеЕсли Соот1.Получить(СтрокаТЧС.Идентификатор) = Неопределено Тогда // т.е. сообщений в Recipients нет вообще
				Если ЗначениеЗаполнено(СтрокаТЧС.ДатаИВремяПрочтения) Тогда
					СтрокаТЧС.ПрочтеноВсеми = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если ТекИД <> Неопределено Тогда
		ИДСтроки = Неопределено;
		СО1 = Новый Структура("Идентификатор", ТекИД);
		МС1 = Объект.Сообщения.НайтиСтроки(СО1);
		Если МС1.Количество() > 0 Тогда
			СтрокаТЧ1 = МС1[0];
			ИДСтроки = СтрокаТЧ1.ПолучитьИдентификатор();
		КонецЕсли; 
		Если ИДСтроки <> Неопределено Тогда
			Элементы[ТекТаблица].ТекущаяСтрока = ИДСтроки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьФормуСообщения(ТекДанные)

	Если ТекДанные <> Неопределено Тогда
		Параметры1 = Новый Структура;
		Параметры1.Вставить("РеквизитОбъект", Объект);
		Параметры1.Вставить("ИД", ТекДанные.Идентификатор);
		//Параметры1.Вставить("ИДРод", ТекДанные.ИдентификаторРодителя);
		//Параметры1.Вставить("КодНаправления", ТекДанные.КодНаправления);
		Параметры1.Вставить("Получатели", Объект.Получатели);
		//Параметры1.Вставить("ДатаИВремяПрочтения", ТекДанные.ДатаИВремяПрочтения);
		//Параметры1.Вставить("ТипСообщения", ТекДанные.ТипСообщения);
		//Параметры1.Вставить("РольОтправителя", ТекДанные.РольОтправителя);
		//Параметры1.Вставить("РольПолучателя", ТекДанные.РольПолучателя);
		//Параметры1.Вставить("СтатусИнцидента", ТекДанные.СтатусИнцидента);
		
		ФормаСообщения = ПолучитьФорму("Обработка.СообщенияМОС.Форма.ФормаСообщенияЦО", Параметры1, ЭтаФорма);
		ФормаСообщения.ТекстСообщения = ТекДанные.ТекстСообщения;
		ФормаСообщения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Сообщения1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВызватьФормуСообщения(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Сообщения2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВызватьФормуСообщения(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Сообщить("Не заполнен параметр сеанса ""Текущий пользователь"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	МассивРолей = Справочники.РолиПользователей.ПолучитьРолиПользователя(ТекущийПользователь);
	Если МассивРолей.Количество() = 0 Тогда
		Сообщить("Текущему пользователю не назначены роли (см. справочник ""Роли пользователей"")");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	//ПараметрыСеанса.ТорговаяТочкаПоАйпи = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("187");
	
	//Обработки.СообщенияМОС.ИнициализироватьОбъект(Объект, Отказ);
	//ПериодичностьОбновления = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Пользователь, ПланыВидовХарактеристик.НастройкиПользователей.ПериодичностьОбновленияСпискаСообщений);
	
	//Заголовок = Заголовок + Обработки.СообщенияМОС.ПолучитьДобавкуКЗаголовкуОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИнцидент(Команда)
	
	ТД1 = Элементы.Сообщения2.ТекущиеДанные;
	Если ТД1 <> Неопределено Тогда
		ОтменитьИнцидентНаСервере(ТД1.Идентификатор);
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Сообщения2ПриАктивизацииСтроки(Элемент)
	
	ТД1 = Элемент.ТекущиеДанные;
	Если ТД1 <> Неопределено Тогда
		НастроитьДоступностьОтменыИнцидента(ТД1.РольОтправителя);
	Иначе
		НастроитьДоступностьОтменыИнцидента(Неопределено);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура НастроитьДоступностьОтменыИнцидента(РольОтправителя)

	Если РольОтправителя = Неопределено Тогда
		Элементы.Сообщения2КонтекстноеМеню.ПодчиненныеЭлементы.Сообщения2КонтекстноеМенюОтменитьИнцидент.Доступность = Ложь;
	Иначе
		Эл1 = Объект.ВсеРолиПользователя.НайтиПоЗначению(РольОтправителя);
		Если Эл1 <> Неопределено Тогда
			Элементы.Сообщения2КонтекстноеМеню.ПодчиненныеЭлементы.Сообщения2КонтекстноеМенюОтменитьИнцидент.Доступность = Истина;
		Иначе
			Элементы.Сообщения2КонтекстноеМеню.ПодчиненныеЭлементы.Сообщения2КонтекстноеМенюОтменитьИнцидент.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура ОтменитьИнцидентНаСервере(ИД)
	
	СоединениеСБДSQL = МеханизмОбменаСообщениямиПовтИсп.ПолучитьСоединениеСБДSQL("SMS_REPL");
	ТекстКомандыSQL = "UPDATE SMS_REPL.dbo.info_exch_messages SET Status = 0 WHERE id = CAST('" + ИД + "' AS uniqueidentifier)";
	СоединениеСБДSQL.Execute(ТекстКомандыSQL);
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРольДляСообщенийИзМагазинов(Команда)
	
	ОпределитьРольДляСообщенийИзМагазиновНаСервере();
	
КонецПроцедуры

Процедура ОпределитьРольДляСообщенийИзМагазиновНаСервере()

	Обработки.СообщенияМОС.ОпределитьРольДляСообщенийИзМагазинов();

КонецПроцедуры

