
Функция ЭтоПомощникУправляющего()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.08 ИП-00018376.01
					//|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |    ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
				   |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователейСоставРоли.Ссылка
	               |			ИЗ
	               |				Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |					ПО
	               |						Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |			ГДЕ
	               |				Пользователи.Ссылка = &Сотрудник)";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

Функция ЭтоУправляющий()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
				   //+++ AK suvv 2018.06.05 ИП-00018376.01
				   //|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	(СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
				   |	ИЛИ СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
				   //--- AK suvv
	               |	И СоответствиеОбъектРольСрезПоследних.РольПользователя В
	               |			(ВЫБРАТЬ
	               |				РолиПользователей.Ссылка
	               |			ИЗ
	               |				Справочник.РолиПользователей КАК РолиПользователей
	               |			ГДЕ
	               |				РолиПользователей.Родитель В
	               |					(ВЫБРАТЬ
	               |						РолиПользователейСоставРоли.Ссылка
	               |					ИЗ
	               |						Справочник.Пользователи КАК Пользователи ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	               |							ПО
	               |								Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	               |					ГДЕ
	               |						Пользователи.Ссылка = &Сотрудник))";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой()) ИЛИ ПараметрыСеанса.ТекущийПользователь.ПросмотрВсехМагазиновВНовойВкусвилл;
	
КонецФункции

Функция ЭкстренныйВызовДоступен()
	
	Возврат ЭтоУправляющий() ИЛИ ЭтоПомощникУправляющего() ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АК_РаботаСГрафикамиПродавцов");
	
КонецФункции

&НаКлиенте
Процедура РаботаИлиОтсутствиеПриИзменении(Элемент)
	
	КоличествоЧасовПочасовика = 0;
	
	Если РаботаИлиОтсутствие = 1 Тогда
		Отсутствие = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка");
		Тренинг= ПредопределенноеЗначение("Справочник.Тренинги.ПустаяСсылка");

	ИначеЕсли РаботаИлиОтсутствие = 3 Тогда
		Отсутствие = ПредопределенноеЗначение("Перечисление.ВидыОтсутствия.ПустаяСсылка");
		ТорговаяТочка = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		СвойствоПродавца = 0;
	Иначе
		ТорговаяТочка = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		СвойствоПродавца = 0;
		Тренинг= ПредопределенноеЗначение("Справочник.Тренинги.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
	ОбновитьГруппуТорговойТочки(); //+++АК mika 2018.01.24 ИП-00016863.01
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Сотрудник")Тогда
		Сотрудник = Параметры.Сотрудник;
	КонецЕсли;
	
	Если Параметры.Свойство("ТорговаяТочка")Тогда
		ТорговаяТочка = Параметры.ТорговаяТочка;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекДата")Тогда
		ТекДата = Параметры.ТекДата;
	КонецЕсли;
	
	
	Если Параметры.Свойство("Отсутствие")Тогда
		Отсутствие = Параметры.Отсутствие;
	КонецЕсли;
	
	Если Параметры.Свойство("СвойствоПродавца")Тогда
		СвойствоПродавца = Параметры.СвойствоПродавца;
	КонецЕсли;
	
	Если Параметры.Свойство("Тренинг")Тогда
		Тренинг = Параметры.Тренинг;
		ТренингДо = Параметры.Тренинг;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭкстренныйВызов")Тогда
		ЭкстренныйВызов = Параметры.ЭкстренныйВызов;
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоЧасов")Тогда
		КоличествоЧасовПочасовика = Параметры.КоличествоЧасов;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ТорговаяТочка)Тогда
		РаботаИлиОтсутствие = 1;
		Элементы.ТорговаяТочка.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли  ЗначениеЗаполнено(Тренинг)Тогда
		РаботаИлиОтсутствие = 3;
		Элементы.Тренинг.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли  ЗначениеЗаполнено(Отсутствие) Тогда
		РаботаИлиОтсутствие = 2;
		Элементы.ПричинаОтсутствия.АктивизироватьПоУмолчанию = Истина;
	Иначе
		РаботаИлиОтсутствие = 1;
		Элементы.ТорговаяТочка.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	//+++АК mika 2017.12.27 ИП-00016863.01
	Параметры.Свойство("Группа", Группа);
	Параметры.Свойство("ГруппаПомощника", ГруппаПомощника);
	Параметры.Свойство("ВариантПостроения", ВариантПостроения);
	//---АК mika
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ТорговаяТочка.Видимость = (РаботаИлиОтсутствие = 1);
	Элементы.ПричинаОтсутствия.Видимость = (РаботаИлиОтсутствие = 2);
	//Если ТекДата >= '20171001' Тогда
		Элементы.КоличествоЧасовПочасовика.Видимость = РаботаИлиОтсутствие = 1;
	//Иначе	
	//	Элементы.КоличествоЧасовПочасовика.Видимость = СвойствоПродавца = 1 И (ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин);
	//КонецЕсли;	
	Элементы.Тренинг.Видимость = (РаботаИлиОтсутствие = 3);
	Элементы.ЭкстренныйВызов.Видимость = (РаботаИлиОтсутствие = 1);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.СвойствоПродавца.Доступность = (РаботаИлиОтсутствие = 1) И ЗначениеЗаполнено(ТорговаяТочка);
	Элементы.ЭкстренныйВызов.Доступность = ЭкстренныйВызовДоступен();
	Если СвойствоПродавца = 3 ИЛИ СвойствоПродавца = 4 Тогда
		Элементы.ЭкстренныйВызов.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Отказ = Ложь;
	Если Не ПроверитьЗаполнение()Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//+++АК MIND 2017.11.21
	Если РаботаИлиОтсутствие = 1
		И НЕ ЗначениеЗаполнено(КоличествоЧасовПочасовика) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано количество часов",,,, Отказ);
	КонецЕсли;	
	//---АК MIND
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если РаботаИлиОтсутствие = 1 И Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст= НСтр("ru = 'Не заполнена торговая точка'");
		Сообщение.Поле = "ТорговаяТочка";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если РаботаИлиОтсутствие = 2 И Не ЗначениеЗаполнено(Отсутствие) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст= НСтр("ru = 'Не заполнена причина отсутствия'");
		Сообщение.Поле = "Отсутствие";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если РаботаИлиОтсутствие = 3 И Не ЗначениеЗаполнено(Тренинг) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст= НСтр("ru = 'Не заполнен тренинг'");
		Сообщение.Поле = "Тренинг";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	//+++ziga 26.10.2017
	Если РаботаИлиОтсутствие=2 или РаботаИлиОтсутствие=1 Тогда 
		Если Не ПолучитьАктивный(Сотрудник) Тогда
		Ответ = Вопрос("Сотрудник "+Сотрудник+" не активный, сделать активным?", РежимДиалогаВопрос.ДаНет);
		Если (Ответ = КодВозвратаДиалога.Да) Тогда
			ИзменитьСотрудникаСервер(Сотрудник);
		КонецЕсли;		
		КонецЕсли; 	
	КонецЕсли;
	//---ziga 26.10.2017
	Если Не ПроверитьГрафик() И ЗначениеЗаполнено(ТорговаяТочка) Тогда
	
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст= НСтр("ru = 'Сотрудник не должен работать более 5 дней подряд'");
		Сообщение.Поле = "Отсутствие";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Сотрудник", 		Сотрудник);
	СтруктураВозврата.Вставить("ТорговаяТочка", 	ТорговаяТочка);
	СтруктураВозврата.Вставить("Отсутствие", 		Отсутствие);
	СтруктураВозврата.Вставить("СвойствоПродавца", 	СвойствоПродавца);
	СтруктураВозврата.Вставить("Тренинг", 	Тренинг);
	СтруктураВозврата.Вставить("ЭкстренныйВызов", 	ЭкстренныйВызов);

	//+++АК mika 2017.12.27 ИП-00016863.01
	Если ВариантПостроения = 1 Тогда
		СтруктураВозврата.Вставить("ГруппаНовая", Группа);
	КонецЕсли;
	//---АК mika 
	
	Если ТекДата >= '20171001' Тогда
		КоличествоЧасов = КоличествоЧасовПочасовика;
	Иначе	
		КоличествоЧасов = ?(СвойствоПродавца = 1 И ЭтоМагазин(), КоличествоЧасовПочасовика, 0);
	КонецЕсли;	
	СтруктураВозврата.Вставить("КоличествоЧасов", КоличествоЧасов);	
	Если ЗначениеЗаполнено(ТренингДо) ИЛИ ЗначениеЗаполнено(Тренинг) Тогда
		ЗаполнитьТренингВФЛ();
	КонецЕсли; 
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры
//+++ziga 30.10.2017
&НаСервере
Процедура ИзменитьСотрудникаСервер(Сотр)
	Сотр=Сотрудник.Получитьобъект();
	Сотр.Активный=Истина;
	Сотр.записать();
КонецПроцедуры
&НаСервере
Функция ПолучитьАктивный(Сотр)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ФизическиеЛица.Активный
	             |ИЗ
	             |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	             |ГДЕ
	             |	ФизическиеЛица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Сотр);
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат	Выборка.Активный;	
	КонецЦикла; 	
	
КонецФункции

//---ziga 30.10.2017

Процедура ЗаполнитьТренингВФЛ()
	Если ЗначениеЗаполнено(ТренингДо) И ТренингДо<>Тренинг Тогда
		СпрОб = Сотрудник.ПолучитьОбъект();
		
		НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",ТренингДо,ТекДата));
		Если НайденнаяСтрока.Количество() Тогда
			
			СпрОб.ПройденныеТренинги.Удалить(НайденнаяСтрока[0]);
		КонецЕсли;
		СпрОб.Записать();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Тренинг) И ТренингДо<>Тренинг Тогда
		СпрОб = Сотрудник.ПолучитьОбъект();
		
		НайденнаяСтрока = СпрОб.ПройденныеТренинги.НайтиСтроки(Новый Структура("Тренинг, ДатаПрохождения",Тренинг,ТекДата));
		Если Не НайденнаяСтрока.Количество() Тогда
			
			НоваяСтрока = СпрОб.ПройденныеТренинги.Добавить();
			
			НоваяСтрока.Тренинг 		= Тренинг;
			НоваяСтрока.ДатаПрохождения = ТекДата;
			НоваяСтрока.ТренингПройден 	= Истина;

		КонецЕсли;
		СпрОб.Записать();
	КонецЕсли; 
КонецПроцедуры
 

Функция ПроверитьГрафик()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцов.Период КАК Период,
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.Группа,
	|	ТабельРаботыПродавцов.ТорговаяТочка,
	|	ТабельРаботыПродавцов.СвойствоПродавца как СвойствоПродавца,
	|
	|	ТабельРаботыПродавцов.Отсутствие как Отсутствие,
	|	ТабельРаботыПродавцов.КоличествоЧасов
	//|	,ТабельРаботыПродавцов.Телефон
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2
	//|	И ТабельРаботыПродавцов.ТорговаяТочка <> &ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекДата-5*24*60*60));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекДата+5*24*60*60));
	//Запрос.УстановитьПараметр("ТорговаяТочка", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	ТЗТабель = Результат.Выгрузить();
	
	
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаНач=ТекДата;
		ДнейрабочихПосле=0;
		Пока Истина Цикл
			ДатаНач=ДатаНач+24*60*60;
			МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,Сотрудник));
			Если МасСтр.Количество()=0 Тогда
				Прервать;
			Иначе	
				Если ЗначениеЗаполнено(МасСтр[0].ТорговаяТочка) Тогда
					ДнейрабочихПосле=ДнейрабочихПосле+1;
				Иначе
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		ДатаНач=ТекДата;
		ДнейрабочихДо=0;
		Сч=0;
		Пока Истина Цикл
			Сч=Сч+1;
			ДатаНач=ДатаНач-24*60*60;
			МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,Сотрудник));
			Если МасСтр.Количество()=0 Тогда
				Прервать;
			Иначе	
				Если ЗначениеЗаполнено(МасСтр[0].ТорговаяТочка) Тогда
					ДнейрабочихДо=ДнейрабочихДо+1;
				Иначе
					Прервать;
				КонецЕсли; 
				//Если Сч=1 И (ГруппаСотрудников="Грузчики") И (МасСтр[0].СвойствоПродавца=1) Тогда
				//	ДнейрабочихДо=100;
				//	Прервать;
				//КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла; 
		//
		//Сч=0;
		//Фл=Ложь;
		//ДатаНач=Объект.Дата;
		//Пока Истина Цикл
		//	Сч=Сч+1;
		//	ДатаНач=ДатаНач-24*60*60;
		//	МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
		//	Если МасСтр.Количество()=0 Тогда
		//	Иначе	
		//		Прервать;
		//	КонецЕсли;
		//	Если Сч=5 Тогда
		//		Фл=Истина;
		//		Прервать;
		//	КонецЕсли; 
		//КонецЦикла; 
		//Если Фл Тогда
		//	Продолжить;
		//КонецЕсли; 
		//
		//
		//Если Не ГруппаСотрудников="Промоутеры" Тогда
		//	
		//	Сч=0;
		//	ДатаНач=Объект.Дата;
		//	Фл=Ложь;
		//	Пока Истина Цикл
		//		Сч=Сч+1;
		//		ДатаНач=ДатаНач-24*60*60;
		//		МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
		//		Если МасСтр.Количество()>0 Тогда
		//			Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Прогул ИЛИ МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Уволен Тогда
		//				Фл=Истина;
		//				Прервать;
		//			КонецЕсли; 	
		//		КонецЕсли;
		//		Если Сч=5 Тогда
		//			Прервать;
		//		КонецЕсли; 
		//	КонецЦикла; 
		//	Если Фл Тогда
		//		Продолжить;
		//	КонецЕсли; 
		//	Сч=0;
		//	ДатаНач=Объект.Дата;
		//	Фл=Ложь;
		//	Пока Истина Цикл
		//		Сч=Сч+1;
		//		ДатаНач=ДатаНач+24*60*60;
		//		МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
		//		Если МасСтр.Количество()>0 Тогда
		//			Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Прогул ИЛИ МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Уволен Тогда
		//				Фл=Истина;
		//				Прервать;
		//			КонецЕсли; 	
		//		КонецЕсли;
		//		Если Сч=5 Тогда
		//			Прервать;
		//		КонецЕсли; 
		//	КонецЦикла; 
		//	Если Фл Тогда
		//		Продолжить;
		//	КонецЕсли; 
		//	
		//КонецЕсли; 
		
		
		
		
		//Если ВыборкаДетальныеЗаписи.Статус=Перечисления.СтатусыПродавцов.График51 Тогда
			Норма=5;
		//ИначеЕсли ВыборкаДетальныеЗаписи.Статус=Перечисления.СтатусыПродавцов.График42 Тогда
		//	Норма=4;
		//Иначе 
		//	Норма=3;
		//КонецЕсли; 
		
		Если ДнейрабочихДо+ДнейрабочихПосле<Норма Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли; 
	//КонецЦикла;

КонецФункции // ()
 

&НаКлиенте
Процедура ТорговаяТочкаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
	//+++АК MIND 2017.11.21 имитируем порядок обхода элементов
	Если РаботаИлиОтсутствие <> 3 Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.КоличествоЧасовПочасовика;
	КонецЕсли;	
	//---АК MIND
	
	ОбновитьГруппуТорговойТочки();//+++АК mika 2018.01.24 ИП-00016863.01
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("ГоловноеПодразделение", ГруппаТорговыхТочек);
	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораСтруктурнойЕдиницы", ПараметрыОтбора);
	Если ЗначениеЗаполнено(Результат)Тогда
		ТорговаяТочка = Результат;
		ОбновитьГруппуТорговойТочки();//+++АК mika 2018.01.24 ИП-00016863.01
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойствоПродавцаПриИзменении(Элемент)
	
	Если СвойствоПродавца = 3 ИЛИ СвойствоПродавца = 4 Тогда
		ЭкстренныйВызов = Ложь;
	КонецЕсли;	
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция ЭтоМагазин()
	
	Возврат ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин;	
	
КонецФункции

&НаКлиенте
Процедура ТренингПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++АК MIND 2017.11.21 имитируем порядок обхода элементов
	Если РаботаИлиОтсутствие <> 3 Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТорговаяТочка;
	КонецЕсли;	
	//---АК MIND 
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЧасовПочасовикаПриИзменении(Элемент)
	
	//+++АК MIND 2017.11.21 имитируем порядок обхода элементов
	Если РаботаИлиОтсутствие <> 3 Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СохранитьИзменения;
	КонецЕсли;	
	//---АК MIND
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //+++АК mika 2017.12.27 ИП-00016863.01

	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборГруппы", ЭтаФорма);

	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораСтруктурнойЕдиницы", Новый Структура("НаименованиеГруппы", "Управление розницей."),
				ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборГруппы(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2017.12.27 ИП-00016863.01
	
	Если Результат <> Неопределено Тогда
		Группа = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуТорговойТочки()//+++АК mika 2018.01.24 ИП-00016863.01
	
	//Актуально только для варианта построения "по помощнику"
	Если ЗначениеЗаполнено(ГруппаПомощника) Тогда
		
		Если Элементы.ТорговаяТочка.Видимость Тогда
			Группа = ПолучитьЦФОМагазинаСервер(ТорговаяТочка);
		Иначе
			Группа = ГруппаПомощника;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦФОМагазинаСервер(СтруктурнаяЕдиница) //+++АК mika 2018.01.24 ИП-00016863.01

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЦФО;
	КонецЕсли;
	
	Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
КонецФункции // ПолучитьЦФОМагазинаСервер()




