
///////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЦ

&НаКлиенте
Процедура ТаблицаПомощниковПриИзменении(Элемент)
	
	МодифицированностьФормы = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПомощникТТПриИзменении(Элемент)
	
	МодифицированностьФормы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПомощниковПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПомощников.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ФизЛицо = ТекущиеДанные.Значение;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ФизическоеЛицо", ФизЛицо);
		Элементы.ТаблицаПомощникТТ.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПомощникТТПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		
		ТекДанныеПомощникТТ = Элементы.ТаблицаПомощникТТ.ТекущиеДанные;
		Если ТекДанныеПомощникТТ <> Неопределено Тогда
		
			ТекущиеДанные = Элементы.ТаблицаПомощников.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				
				ТекДанныеПомощникТТ.ФизическоеЛицо 	= ТекущиеДанные.Значение;
				ТекДанныеПомощникТТ.Пометка 		= Истина;
				ТекДанныеПомощникТТ.Период			= ТекущийПериод;
				
				УстановитьСнятьПометкиУТТСИдентичнымиПараметрами(ТекущиеДанные.Значение, ТекДанныеПомощникТТ.ТорговаяТочка);
				
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПомощниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Если НоваяСтрока Тогда
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.ТаблицаПомощников.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ФизЛицо = ТекущиеДанные.Значение;
			
			// Проверим есть ли оно уже в списке
			ФизЛицоЕстьВСписке = ПроверитьНаличиеФизЛицаВСписке(ФизЛицо);
			Если ФизЛицоЕстьВСписке Тогда
				Сообщить("Помощник уже присутствует в списке!");
				ТаблицаПомощников.Удалить(ТекущиеДанные);
				Возврат;
			КонецЕсли;
			
			// Добавим торговые точки в которых он является помощником
			МассивФизЛиц = Новый Массив;
			МассивФизЛиц.Добавить(ФизЛицо);
			ЗаполнитьТаблицуПомощникТТ(МассивФизЛиц, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПомощниковПриАктивизацииСтроки(Элемент);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПомощников(МассивФизЛиц)
	
	Для Каждого СтрокаМассива Из МассивФизЛиц Цикл
		
		НоваяСтр = ТаблицаПомощников.Добавить();
		НоваяСтр.Значение = СтрокаМассива;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПомощникТТ(МассивФизЛиц, ДобавитьСтроки = Ложь)
	
	Если ТипПомощника = "ПОМОЩНИК" Тогда
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	ПомощникиУправляющихВТорговыхТочкахСрезПоследних.Период,
		//|	ПомощникиУправляющихВТорговыхТочкахСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
		//|	ПомощникиУправляющихВТорговыхТочкахСрезПоследних.ФизическоеЛицо,
		//|	ИСТИНА КАК Пометка
		//|ИЗ
		//|	РегистрСведений.ПомощникиУправляющихВТорговыхТочках.СрезПоследних(&Период, ) КАК ПомощникиУправляющихВТорговыхТочкахСрезПоследних
		//|ГДЕ
		//|	ПомощникиУправляющихВТорговыхТочкахСрезПоследних.ФизическоеЛицо В(&МассивФизЛиц)");
		//Запрос.УстановитьПараметр("МассивФизЛиц", 	МассивФизЛиц);
		//Запрос.УстановитьПараметр("Период",			Период);
		//
		//Если ДобавитьСтроки Тогда
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	Пока Выборка.Следующий()Цикл
		//		
		//		НоваяСтр = ТаблицаПомощникТТ.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
		//		
		//	КонецЦикла;
		//	
		//Иначе
		//	ТаблицаПомощникТТ.Загрузить(Запрос.Выполнить().Выгрузить());
		//КонецЕсли;
		
	ИначеЕсли ТипПомощника = "БУХГАЛТЕРРАСЧЕТЧИК" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
		Запрос.УстановитьПараметр("Период"		, Период);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.Период,
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.ФизическоеЛицо,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	РегистрСведений.БухгалтераРасчетчикиВТорговыхТочках.СрезПоследних(&Период, ) КАК БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних
		|ГДЕ
		|	БухгалтераРасчетчикиВТорговыхТочкахСрезПоследних.ФизическоеЛицо В(&МассивФизЛиц)";
		
		Если ДобавитьСтроки Тогда
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий()Цикл
				
				НоваяСтр = ТаблицаПомощникТТ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
				
			КонецЦикла;
			
		Иначе
			ТаблицаПомощникТТ.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период = Параметры.Период;
	ТекущийПериод = Период;
	ГоловноеПодразделение = Параметры.ГоловноеПодразделение;
	ТипПомощника = ВРег(Параметры.ТипПомощника);
	
	ОбновитьТаблицы();
	
	МодифицированностьФормы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицы()
	
	ТаблицаПомощников.Очистить();
	ТаблицаПомощникТТ.Очистить();
	
	МассивФизЛиц = Обработки.ГрафикРаботыПродавцов_ТЗ.ПолучитьМассивФизЛиц(ТекущийПериод, ТипПомощника);
	
	ЗаполнитьТаблицуПомощников(МассивФизЛиц);
	ЗаполнитьТаблицуПомощникТТ(МассивФизЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	Если МодифицированностьФормы Тогда
		
		Ответ = Вопрос("Данные были изменены и могут быть потеряны! Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзмененияНаСервере(Отказ);	
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Период = ТекущийПериод;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		МодифицированностьФормы = Ложь;
		ТекущийПериод = Период;
		
		ОбновитьТаблицы();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеФизЛицаВСписке(ФизЛицо)
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаПомощников");
	
	СтруктураПоиска = Новый Структура("Значение", ФизЛицо);
	МассивСтрок = ТЗ.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьСнятьПометкиУТТСИдентичнымиПараметрами(Знач ФизЛицо, Знач ТТ)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТорговаяТочка", ТТ);
	СтруктураПоиска.Вставить("Пометка"		, Истина);
	
	МассивСтрок = ТаблицаПомощникТТ.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если Строка.ФизическоеЛицо <> ФизЛицо Тогда
			Строка.Пометка = Ложь;
			Сообщить("С " + Формат(Строка.Период, "ДЛФ=D") + " торговая точка " + ТТ + " была закреплена за " + Строка.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Отказ = Ложь;
	
	Если МодифицированностьФормы Тогда
		Состояние("Выполняется сохранение данных...");
		СохранитьИзмененияНаСервере();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ПоказатьОповещениеПользователя("Сохранение данных выполнено");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияНаСервере(Отказ = Ложь)
	
	Для Каждого Строка Из ТаблицаПомощникТТ Цикл
		
		Если ТипПомощника = "ПОМОЩНИК" Тогда
			
			Сообщить("Выполнять привязку помощников к торговым точкам следует теперь из элемента спраовчника структурные единицы. Обратитесь к аналитикам для нужной привязки.");
			
			//Если Строка.Пометка Тогда
			//	
			//	Запись = РегистрыСведений.ПомощникиУправляющихВТорговыхТочках.СоздатьМенеджерЗаписи();
			//	Запись.Период 				= Строка.Период;
			//	Запись.СтруктурнаяЕдиница 	= Строка.ТорговаяТочка;
			//	Запись.ФизическоеЛицо 		= Строка.ФизическоеЛицо;
			//	
			//	Запись.Записать();
			//	
			//	// Добавим запись в Журнал изменений
			//	ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийПомощниковУправляющих.СоздатьМенеджерЗаписи();
			//	ЗаписьЖурнала.Дата 					= Строка.Период;
			//	ЗаписьЖурнала.СтруктурнаяЕдиница 	= Строка.ТорговаяТочка;
			//	ЗаписьЖурнала.Пользователь			= ПараметрыСеанса.ТекущийПользователь;
			//	ЗаписьЖурнала.ДатаИзменения			= ТекущаяДата();
			//	ЗаписьЖурнала.ФизическоеЛицо 		= Строка.ФизическоеЛицо;
			//	
			//	ЗаписьЖурнала.ВидОперации           = "Привязка помощника";
			//	
			//	ЗаписьЖурнала.Записать();
			//	
			//Иначе
			//	
			//	Запрос = Новый Запрос(
			//	"ВЫБРАТЬ
			//	|	ПомощникиУправляющихВТорговыхТочках.Период,
			//	|	ПомощникиУправляющихВТорговыхТочках.СтруктурнаяЕдиница,
			//	|	ПомощникиУправляющихВТорговыхТочках.ФизическоеЛицо
			//	|ИЗ
			//	|	РегистрСведений.ПомощникиУправляющихВТорговыхТочках КАК ПомощникиУправляющихВТорговыхТочках
			//	|ГДЕ
			//	|	ПомощникиУправляющихВТорговыхТочках.Период = &Период
			//	|	И ПомощникиУправляющихВТорговыхТочках.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
			//	|	И ПомощникиУправляющихВТорговыхТочках.ФизическоеЛицо = &ФизическоеЛицо");
			//	Запрос.УстановитьПараметр("Период", 			Строка.Период);
			//	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Строка.ТорговаяТочка);
			//	Запрос.УстановитьПараметр("ФизическоеЛицо", 	Строка.ФизическоеЛицо);
			//	
			//	Выборка = Запрос.Выполнить().Выбрать();
			//	Если Выборка.Следующий()Тогда
			//		
			//		Запись = РегистрыСведений.ПомощникиУправляющихВТорговыхТочках.СоздатьМенеджерЗаписи();
			//		ЗаполнитьЗначенияСвойств(Запись, Выборка);
			//		Запись.Удалить();
			//		
			//		// Добавим запись в Журнал изменений
			//		ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийПомощниковУправляющих.СоздатьМенеджерЗаписи();
			//		ЗаписьЖурнала.Дата 					= Выборка.Период;
			//		ЗаписьЖурнала.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
			//		ЗаписьЖурнала.Пользователь			= ПараметрыСеанса.ТекущийПользователь;
			//		ЗаписьЖурнала.ДатаИзменения			= ТекущаяДата();
			//		ЗаписьЖурнала.ФизическоеЛицо 		= Выборка.ФизическоеЛицо;
			//		
			//		ЗаписьЖурнала.ВидОперации           = "Удаление привязки помощника";
			//		
			//		ЗаписьЖурнала.Записать();
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
		ИначеЕсли ТипПомощника = "БУХГАЛТЕРРАСЧЕТЧИК" Тогда
			
			Если Строка.Пометка Тогда
				
				Запись = РегистрыСведений.БухгалтераРасчетчикиВТорговыхТочках.СоздатьМенеджерЗаписи();
				Запись.Период 				= Строка.Период;
				Запись.СтруктурнаяЕдиница 	= Строка.ТорговаяТочка;
				Запись.ФизическоеЛицо 		= Строка.ФизическоеЛицо;
				
				Запись.Записать();
				
				// Добавим запись в Журнал изменений
				ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийБухгалтеровРасчетчиков.СоздатьМенеджерЗаписи();
				ЗаписьЖурнала.Дата 					= Строка.Период;
				ЗаписьЖурнала.СтруктурнаяЕдиница 	= Строка.ТорговаяТочка;
				ЗаписьЖурнала.Пользователь			= ПараметрыСеанса.ТекущийПользователь;
				ЗаписьЖурнала.ДатаИзменения			= ТекущаяДата();
				ЗаписьЖурнала.ФизическоеЛицо 		= Строка.ФизическоеЛицо;
				
				ЗаписьЖурнала.ВидОперации           = "Привязка бухгалтера-расчетчика";
				
				ЗаписьЖурнала.Записать();
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Период"				, Строка.Период);
				Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Строка.ТорговаяТочка);
				Запрос.УстановитьПараметр("ФизическоеЛицо"		, Строка.ФизическоеЛицо);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БухгалтераРасчетчикиВТорговыхТочках.Период,
				|	БухгалтераРасчетчикиВТорговыхТочках.СтруктурнаяЕдиница,
				|	БухгалтераРасчетчикиВТорговыхТочках.ФизическоеЛицо
				|ИЗ
				|	РегистрСведений.БухгалтераРасчетчикиВТорговыхТочках КАК БухгалтераРасчетчикиВТорговыхТочках
				|ГДЕ
				|	БухгалтераРасчетчикиВТорговыхТочках.Период = &Период
				|	И БухгалтераРасчетчикиВТорговыхТочках.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
				|	И БухгалтераРасчетчикиВТорговыхТочках.ФизическоеЛицо = &ФизическоеЛицо";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий()Тогда
					
					Запись = РегистрыСведений.БухгалтераРасчетчикиВТорговыхТочках.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					Запись.Удалить();
					
					// Добавим запись в Журнал изменений
					ЗаписьЖурнала = РегистрыСведений.ЖурналИзмененийБухгалтеровРасчетчиков.СоздатьМенеджерЗаписи();
					ЗаписьЖурнала.Дата 					= Выборка.Период;
					ЗаписьЖурнала.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
					ЗаписьЖурнала.Пользователь			= ПараметрыСеанса.ТекущийПользователь;
					ЗаписьЖурнала.ДатаИзменения			= ТекущаяДата();
					ЗаписьЖурнала.ФизическоеЛицо 		= Выборка.ФизическоеЛицо;
					
					ЗаписьЖурнала.ВидОперации           = "Удаление привязки бухгалтера-расчетчика";
					
					ЗаписьЖурнала.Записать();
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьТаблицы();
	МодифицированностьФормы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьТТПомощнику(Команда)
	
	Отказ = Ложь;
	Если МодифицированностьФормы Тогда
		
		Ответ = Вопрос("Перед передачей необходимо сохранить изменения! Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзмененияНаСервере(Отказ);	
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	                       
	МассивСтрок = Элементы.ТаблицаПомощникТТ.ВыделенныеСтроки;
	Если МассивСтрок.Количество()>0 Тогда
		
		ТекущийПомощник = Элементы.ТаблицаПомощников.ТекущиеДанные.Значение;
		
		Адрес = ПоместитьВоВременноеХранилище(ПолучитьМассивПомощников());
		
		ПараметрыОткрытия = Новый Структура("Период, ТекущийПомощник, Адрес", ТекущийПериод, ТекущийПомощник, Адрес);
		РезультатОткрытия = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаПередачиТТПомощнику", ПараметрыОткрытия);
		Если ТипЗнч(РезультатОткрытия) = Тип("Структура")Тогда
			
			НовыйПериод = РезультатОткрытия.Период;
			НовоеФЛ 	= РезультатОткрытия.Помощник;
			
			ОтвязатьВсе = Ложь;
			ОставитьВсе = Ложь;
			
			Для Каждого ИндексСтроки Из МассивСтрок Цикл
				
				Строка = ТаблицаПомощникТТ.НайтиПоИдентификатору(ИндексСтроки);
				
				Если Строка.Пометка Тогда
					
					Отвязать = Истина;
					Оставить = Ложь;
					
					Если Не (ОтвязатьВсе ИЛИ ОставитьВсе) Тогда
						
						МассивФЛ = Новый Массив;
						МассивФЛ.Добавить(Строка.ФизическоеЛицо);
						МассивФЛ.Добавить(НовоеФЛ);
						
						ПараметрыОткрытия 	= Новый Структура;
						ЕстьПомощник 		= Обработки.ГрафикРаботыПродавцов_ТЗ.ПроверитьНаличиеПомощникаВТТ(ПараметрыОткрытия, Строка.ТорговаяТочка, МассивФЛ, НовыйПериод, ТипПомощника);
						
						Если ЕстьПомощник Тогда
							
							Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВопросОтветМножественныйВыбор", ПараметрыОткрытия);
							Если ТипЗнч(Результат) = Тип("Структура")Тогда
								
								Если Результат.Свойство("Отвязать")Тогда
									Отвязать = Истина;
								ИначеЕсли Результат.Свойство("ОтвязатьВсе")Тогда
									ОтвязатьВсе = Истина;
								ИначеЕсли Результат.Свойство("Оставить")Тогда
									Отвязать = Ложь;
									Оставить = Истина;
								ИначеЕсли Результат.Свойство("ОставитьВсе")Тогда
									Отвязать = Ложь;
									ОставитьВсе = Истина;
								КонецЕсли;
								
							Иначе
								// Если просто закрыли форму
								Отвязать = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Отвязать ИЛИ ОтвязатьВсе Тогда
						
						Если ТипПомощника = "ПОМОЩНИК" Тогда
							ДобавитьЗаписьВРегистрПомощникиПродавцов(Строка.ТорговаяТочка, НовыйПериод, НовоеФЛ);
						ИначеЕсли ТипПомощника = "БУХГАЛТЕРРАСЧЕТЧИК" Тогда
							ДобавитьЗаписьВРегистрБухгалтераРасчетчики(Строка.ТорговаяТочка, НовыйПериод, НовоеФЛ);
						КонецЕсли;
						
					ИначеЕсли Оставить Тогда
						Продолжить;
					ИначеЕсли ОставитьВсе Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	МодифицированностьФормы = Ложь;
	ОбновитьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПомощникТТПометкаПриИзменении(Элемент)
	
	ТекДанныеПомощникТТ = Элементы.ТаблицаПомощникТТ.ТекущиеДанные;
	Если ТекДанныеПомощникТТ <> Неопределено Тогда
		
		Если ТекДанныеПомощникТТ.Пометка Тогда
			УстановитьСнятьПометкиУТТСИдентичнымиПараметрами(ТекДанныеПомощникТТ.ФизическоеЛицо, ТекДанныеПомощникТТ.ТорговаяТочка);
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если МодифицированностьФормы Тогда
		
		Ответ = Вопрос("Данные были изменены и могут быть потеряны! Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзмененияНаСервере(Отказ);	
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрПомощникиПродавцов(Знач ТТ, пПериод, ФизЛицо)
	
	Запись = РегистрыСведений.ПомощникиУправляющихВТорговыхТочках.СоздатьМенеджерЗаписи();
	Запись.Период 				= пПериод;
	Запись.СтруктурнаяЕдиница 	= ТТ;
	Запись.ФизическоеЛицо 		= ФизЛицо;
	
	Попытка
		Запись.Записать();
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрБухгалтераРасчетчики(Знач ТТ, пПериод, ФизЛицо)
	
	Запись = РегистрыСведений.БухгалтераРасчетчикиВТорговыхТочках.СоздатьМенеджерЗаписи();
	Запись.Период 				= пПериод;
	Запись.СтруктурнаяЕдиница 	= ТТ;
	Запись.ФизическоеЛицо 		= ФизЛицо;
	
	Попытка
		Запись.Записать();
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТТ(Команда)
	
	ТекДанные 	= Элементы.ТаблицаПомощников.ТекущиеДанные;
	ФизЛицо 	= ТекДанные.Значение;
	
	НайденныеСтроки 	= ТаблицаПомощникТТ.НайтиСтроки(Новый Структура("Пометка, ФизическоеЛицо", Истина, ФизЛицо));
	МассивОтмеченныхТТ 	= Новый Массив;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		МассивОтмеченныхТТ.Добавить(Строка.ТорговаяТочка);	
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(МассивОтмеченныхТТ);
	
	ПараметрыОткрытия = Новый Структура("ГоловноеПодразделение, Адрес", ГоловноеПодразделение, Адрес);
	МассивТТ = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаПодбораТТ", ПараметрыОткрытия);
	
	Если ТипЗнч(МассивТТ) = Тип("Массив") Тогда
		
		Для Каждого ТорговаяТочка Из МассивТТ Цикл
			
			ТочкаПрисутствуетВСписке = Ложь;
			
			СтруктураПоиска = Новый Структура("ТорговаяТочка", ТорговаяТочка);
			НайденныеСтроки = ТаблицаПомощникТТ.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.ФизическоеЛицо <> ФизЛицо Тогда
					
					МодифицированностьФормы = Истина;
					
					Строка.Пометка = Ложь;
					Сообщить("С " + Формат(Строка.Период, "ДЛФ=D") + " торговая точка " + ТорговаяТочка + " была закреплена за " + Строка.ФизическоеЛицо);
					
				Иначе
					
					ТочкаПрисутствуетВСписке = Истина;
					Если Не Строка.Пометка Тогда
						
						МодифицированностьФормы = Истина;
						
						Строка.Пометка 	= Истина;
						Строка.Период 	= ТекущийПериод;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ТочкаПрисутствуетВСписке Тогда
				
				МодифицированностьФормы = Истина;
				
				НовСтр = ТаблицаПомощникТТ.Добавить();
				НовСтр.Пометка 			= Истина;
				НовСтр.ФизическоеЛицо 	= ФизЛицо;
				НовСтр.ТорговаяТочка 	= ТорговаяТочка;
				НовСтр.Период 			= ТекущийПериод;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПомощников()
	
	Возврат ТаблицаПомощников.Выгрузить(, "Значение");
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	
	ПараметрыОтбора = Новый Структура("ЦФО", ГоловноеПодразделение);
	Сотрудник = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
	
	Если Сотрудник <> Неопределено Тогда
		
		НайденнфеСтроки = ТаблицаПомощников.НайтиСтроки(Новый Структура("Значение", Сотрудник));
		Если НайденнфеСтроки.Количество() = 0 Тогда
			
			НоваяСтр = ТаблицаПомощников.Добавить();
			НоваяСтр.Значение = Сотрудник;
			
		Иначе
			Предупреждение("В списке уже присутствует выбранное физическое лицо!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
