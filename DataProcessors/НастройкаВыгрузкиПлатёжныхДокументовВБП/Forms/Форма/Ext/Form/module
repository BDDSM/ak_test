
Процедура УстановитьВидимостьВидаОперации()
	
	ЭлементыФормы.ВидОперацииРасходаИзКассы.Видимость			= ЭтотОбъект.ВыгружатьРасходИзКассы;
	ЭлементыФормы.НадписьВидОперацииРасходаИзКассы.Видимость	= ЭтотОбъект.ВыгружатьРасходИзКассы;
	ЭлементыФормы.ВидОперацииСписаниеСКорпоративныхКарт.Видимость			= ЭтотОбъект.ВыгружатьСписаниеСКорпоративныхКарт;
	ЭлементыФормы.НадписьВидОперацииСписаниеСКорпоративныхКарт.Видимость	= ЭтотОбъект.ВыгружатьСписаниеСКорпоративныхКарт;
	ЭлементыФормы.ВыгружатьТолькоСРазницей.Видимость = ЭтотОбъект.ВыгружатьВыручкуИзЛистовУчета;
	
КонецПроцедуры


Процедура ПриОткрытии()

	УстановитьВидимостьВидаОперации();
	
	// отбор на форме
	ДоступныеПоляОтбора = ЭтаФорма.Построитель.Отбор.ПолучитьДоступныеПоля();

	Поле = ДоступныеПоляОтбора.Добавить("Организация",, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Поле.Отбор = Истина;
	Поле = ДоступныеПоляОтбора.Добавить("СтруктурнаяЕдиница", "Структурная единица", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	Поле.Отбор = Истина;
	ЭтаФорма.Построитель.Отбор.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
	
	
	СтрокаОтбора = ЭтаФорма.Построитель.Отбор.Добавить("Организация");
	СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
	СтрокаОтбора.Значение      = Справочники.Организации.ПустаяСсылка();
	СтрокаОтбора.Использование = Ложь;
	
	СтрокаОтбора = ЭтаФорма.Построитель.Отбор.Добавить("СтруктурнаяЕдиница");
	СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
	СтрокаОтбора.Значение      = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	СтрокаОтбора.Использование = Ложь;
	
КонецПроцедуры


Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал 	= Истина;
	НастройкаПериода.РедактироватьКакПериод 	= Истина;
	НастройкаПериода.ВариантНастройки 			= ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ЭтотОбъект.ДатаНачала,
										?(ЭтотОбъект.ДатаОкончания = '0001-01-01', ЭтотОбъект.ДатаОкончания, КонецДня(ЭтотОбъект.ДатаОкончания)));
	Если НастройкаПериода.Редактировать() Тогда
		ЭтотОбъект.ДатаНачала 		= НастройкаПериода.ПолучитьДатуНачала();
		ЭтотОбъект.ДатаОкончания 	= НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгружатьРасходИзКассыПриИзменении(Элемент)
	
	УстановитьВидимостьВидаОперации();
	
КонецПроцедуры

Процедура ВыгружатьСписаниеСКорпоративныхКартПриИзменении(Элемент)
	
	УстановитьВидимостьВидаОперации();
	
КонецПроцедуры

Процедура ВыгрузитьЛистыСРазницей(ДатаОбработки, ТабКеш)
	
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		
	Попытка
		v82 = v82COMОбъект.Connect(ПолныеПрава.ПолучитьСтрокуПодключения_Бух());
	Исключение
		
		Предупреждение("Не удалось подключится к Бух");
		Сообщить(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	ОргОтбор = Построитель.Отбор.Организация.Значение;
	
	Запрос = v82.NewObject("Запрос");
	Запрос.УстановитьПараметр("Организация", ОргОтбор.ИНН);
	Запрос.УстановитьПараметр("НачалоПериода", v82.NewObject("Граница", НачалоДня(ДатаОбработки), v82.ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода", v82.NewObject("Граница", КонецДня(ДатаОбработки), v82.ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	               |	АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение.Код
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеПодразделенийЗагруженнымДокументам КАК АК_СоответствиеПодразделенийЗагруженнымДокументам
	               |		ПО ХозрасчетныйОбороты.Регистратор = АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение.Код
	               |
	               |";
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Пока ВыборкаДанных.Следующий() Цикл
		СтрокаКеш = ТабКеш.Найти(Число(ВыборкаДанных.ПодразделениеКод), "НомерТочки");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.СтруктурнаяЕдиница = СтрокаКеш.Ссылка;
			СтрокаДоб.Сумма = ВыборкаДанных.СуммаОборот;
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ОргОтбор);
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.СтруктурнаяЕдиница,
	               |	Таб.Сумма
	               |ПОМЕСТИТЬ ВТ_Бух
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ЛистУчета).ТорговаяТочка КАК ТорговаяТочка,
	               |	СУММА(ФинансовыйОбороты.СуммаОборот) КАК СуммаОборот
	               |ПОМЕСТИТЬ ВТ_Фин
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НераспределеннаяРозничнаяВыручка), , , , ) КАК ФинансовыйОбороты
	               |ГДЕ
	               |	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЛистУчета
	               |	И ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ЛистУчета).Организация = &ИНН
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ЛистУчета).ТорговаяТочка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Фин.ТорговаяТочка,
	               |	ВТ_Фин.СуммаОборот,
	               |	ВТ_Бух.Сумма
	               |ИЗ
	               |	ВТ_Фин КАК ВТ_Фин
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Бух КАК ВТ_Бух
	               |		ПО ВТ_Фин.ТорговаяТочка = ВТ_Бух.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВТ_Фин.СуммаОборот <> ЕСТЬNULL(ВТ_Бух.Сумма, 0)";
					
	Выборка = Запрос.Выполнить().Выбрать();
	СписокРазличия = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		СписокРазличия.Добавить(Выборка.ТорговаяТочка);
	КонецЦикла;
	
	ОтборСтрЕдиницы = Построитель.Отбор.Найти("СтруктурнаяЕдиница");
	ОтборСтрЕдиницы.ВидСравнения = ВидСравнения.ВСписке;
	ОтборСтрЕдиницы.Значение = СписокРазличия;
	ОтборСтрЕдиницы.Использование = Истина;
	
	Если СписокРазличия.Количество() > 0 Тогда
		Обр = Обработки.ВыгрузкаВыручкиЛистовУчетаВБухгалтерию.Создать();
		Обр.ДатаНач = ДатаОбработки;
		Обр.ДатаКон = ДатаОбработки;
		Обр.НастройкиПостроителяДляОтбора = Построитель.ПолучитьНастройки();
		СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
		Обр.ИмяСервераИнформационнойБазыДляПодключения 		= СтруктураПодключения.ИмяСервера;
		Обр.ИмяИнформационнойБазыНаСервереДляПодключения 	= СтруктураПодключения.ИмяБазы;
		Обр.ПользовательИнформационнойБазыДляПодключения 	= СтруктураПодключения.Пользователь;
		Обр.ПарольИнформационнойБазыДляПодключения			= СтруктураПодключения.Пароль;
		Обр.ВыполнитьВыгрузку();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Перем ТекОрганизация, ТекВидСравненияОрг, ТекСтрЕдиница, ТекВидСравненияСтрЕдиница;
	
	Если НЕ (ЗначениеЗаполнено(ДатаНачала)
			И ЗначениеЗаполнено(ДатаОкончания)
			И ДатаОкончания >= ДатаНачала) Тогда
		Предупреждение("Некорректное значение периода. Выгрузка отменена");
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыгружатьПоступлениеВБанк
			И НЕ ВыгружатьРасходИзБанка
			И НЕ ВыгружатьПоступлениеВКассу
			И НЕ ВыгружатьРасходИзКассы
			И НЕ ВыгружатьСписаниеСКорпоративныхКарт
			И НЕ ВыгружатьВыручкуИзЛистовУчета Тогда
		Предупреждение("Ничего не выбрано для выгрузки. Выгрузка отменена");
		Возврат;
	КонецЕсли;	
	
	Если ЭтотОбъект.ВыгружатьРасходИзКассы
			И ЭтотОбъект.ВидОперацииРасходаИзКассы.Пустая() Тогда
		Предупреждение("Необходимо указать вид операции для расхода из кассы. Выгрузка отменена");
	КонецЕсли;	
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Выгрузка документов в бухгалтерию");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	Если ВыгружатьПоступлениеВБанк
			ИЛИ ВыгружатьРасходИзБанка
			ИЛИ ВыгружатьПоступлениеВКассу
			ИЛИ ВыгружатьРасходИзКассы
			ИЛИ ВыгружатьСписаниеСКорпоративныхКарт Тогда
		
		Обр = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
		//Обр.ДатаНачала		= ДатаНачала;
		//Обр.ДатаОкончания	= КонецДня(ДатаОкончания);
		Обр.ЗагрузитьПравилаОбмена(Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.ПолучитьМакет("ПравилаОбменаДанными").ПолучитьТекст(), "Строка");
		Обр.ИмяФайлаПравилОбмена = "Правила загружены";
		
		Для каждого Стр Из Обр.ТаблицаПравилВыгрузки.Строки[0].Строки Цикл
			Стр.Включить = 0;
	    КонецЦикла;
		
		мЭлементОтбора = ЭтаФорма.Построитель.Отбор.Найти("Организация");
		Если НЕ мЭлементОтбора = Неопределено Тогда
			ЕстьОтборПоОрганизации = (мЭлементОтбора.Использование = Истина);
			Если ЕстьОтборПоОрганизации Тогда
				ТекОрганизация 		= мЭлементОтбора.Значение;
				ТекВидСравненияОрг 	= мЭлементОтбора.ВидСравнения;
			КонецЕсли;
		Иначе
			ЕстьОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		мЭлементОтбора = ЭтаФорма.Построитель.Отбор.Найти("СтруктурнаяЕдиница");
		Если НЕ мЭлементОтбора = Неопределено Тогда
			ЕстьОтборПоСтрЕдинице = (мЭлементОтбора.Использование = Истина);
			Если ЕстьОтборПоСтрЕдинице Тогда
				ТекСтрЕдиница 				= мЭлементОтбора.Значение;
				ТекВидСравненияСтрЕдиница 	= мЭлементОтбора.ВидСравнения;
			КонецЕсли;
		Иначе
			ЕстьОтборПоСтрЕдинице = Ложь;
		КонецЕсли;
		
		ОписаниеТипаДата = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
		Для каждого Стр Из Обр.ТаблицаПравилВыгрузки.Строки[0].Строки Цикл
			
			/// Поступление в банк ///
			Если ВыгружатьПоступлениеВБанк
					И Стр.Имя = "ПоступлениеВБанк" Тогда
				
			 	Стр.Включить = 1;
				
				Стр.ИспользоватьОтбор = Истина;
					
				ОтборВОбработкеВыгрузки = Обр.ПостроительОтчета.Отбор;
			
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();
				Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВБанк",, Новый ОписаниеТипов("ДокументСсылка.ПоступлениеВБанк"));
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВБанк.Дата",, ОписаниеТипаДата);
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
			
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВБанк.Дата");
				СтрокаОтбора.ВидСравнения  	= ВидСравнения.ИнтервалВключаяГраницы;
				СтрокаОтбора.ЗначениеС     	= ЭтотОбъект.ДатаНачала;
				СтрокаОтбора.ЗначениеПо     = КонецДня(ЭтотОбъект.ДатаОкончания);
				СтрокаОтбора.Использование 	= Истина;
					
				Если ЕстьОтборПоОрганизации Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВБанк.Организация",, Новый ОписаниеТипов("СправочникСсылка.Организации"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВБанк.Организация");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияОрг;
					СтрокаОтбора.Значение      = ТекОрганизация;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Если ЕстьОтборПоСтрЕдинице Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВБанк.ТорговаяТочка",, 
					    									Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВБанк.ТорговаяТочка");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияСтрЕдиница;
					СтрокаОтбора.Значение      = ТекСтрЕдиница;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Стр.НастройкиПостроителя = Обр.ПостроительОтчета.ПолучитьНастройки();
					
			КонецЕсли;	
			
			/// Расход из банка ///
			Если ВыгружатьРасходИзБанка
					И Стр.Имя = "РасходИзБанка" Тогда
				
				Стр.Включить = 1;
				
				Стр.ИспользоватьОтбор = Истина;
					
				ОтборВОбработкеВыгрузки = Обр.ПостроительОтчета.Отбор;
			
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();
				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзБанка",, 
				    									Новый ОписаниеТипов("ДокументСсылка.РасходИзБанка"));
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзБанка.Дата",, ОписаниеТипаДата);
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
			
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзБанка.Дата");
				СтрокаОтбора.ВидСравнения  	= ВидСравнения.ИнтервалВключаяГраницы;
				СтрокаОтбора.ЗначениеС     	= ЭтотОбъект.ДатаНачала;
				СтрокаОтбора.ЗначениеПо     = КонецДня(ЭтотОбъект.ДатаОкончания);
				СтрокаОтбора.Использование 	= Истина;
					
				Если ЕстьОтборПоОрганизации Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзБанка.Организация",, 
					    									Новый ОписаниеТипов("СправочникСсылка.Организации"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзБанка.Организация");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияОрг;
					СтрокаОтбора.Значение      = ТекОрганизация;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Если ЕстьОтборПоСтрЕдинице Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзБанка.ТорговаяТочка",, 
					    									Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзБанка.ТорговаяТочка");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияСтрЕдиница;
					СтрокаОтбора.Значение      = ТекСтрЕдиница;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Стр.НастройкиПостроителя = Обр.ПостроительОтчета.ПолучитьНастройки();
				
			КонецЕсли;	
			
			/// Поступление в кассу ///
			Если ВыгружатьПоступлениеВКассу
					И Стр.Имя = "ПоступлениеВКассу" Тогда
				
			 	Стр.Включить = 1;
				
				Стр.ИспользоватьОтбор = Истина;
					
				ОтборВОбработкеВыгрузки = Обр.ПостроительОтчета.Отбор;
			
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();
				Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВКассу",, 
				    									Новый ОписаниеТипов("ДокументСсылка.ПоступлениеВКассу"));
				Поле.Отбор = Истина;
				//Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВКассу.ДатаФормированияДокумента",, ОписаниеТипаДата);
				Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВКассу.Дата",, ОписаниеТипаДата);
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
			
				//СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВКассу.ДатаФормированияДокумента");
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВКассу.Дата");
				СтрокаОтбора.ВидСравнения  	= ВидСравнения.ИнтервалВключаяГраницы;
				СтрокаОтбора.ЗначениеС     	= ЭтотОбъект.ДатаНачала;
				СтрокаОтбора.ЗначениеПо     = КонецДня(ЭтотОбъект.ДатаОкончания);
				СтрокаОтбора.Использование 	= Истина;
					
				Если ЕстьОтборПоОрганизации Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВКассу.Организация",, 
					    									Новый ОписаниеТипов("СправочникСсылка.Организации"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВКассу.Организация");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияОрг;
					СтрокаОтбора.Значение      = ТекОрганизация;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Если ЕстьОтборПоСтрЕдинице Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_ПоступлениеВКассу.СтруктурноеПодразделение",, 
					    									Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_ПоступлениеВКассу.СтруктурноеПодразделение");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияСтрЕдиница;
					СтрокаОтбора.Значение      = ТекСтрЕдиница;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Стр.НастройкиПостроителя = Обр.ПостроительОтчета.ПолучитьНастройки();
				
			КонецЕсли;	
			
			/// Расход из кассы ///
			Если ВыгружатьРасходИзКассы
					И Стр.Имя = "РасходИзКассы" Тогда
				
				Стр.Включить = 1;
				Стр.ИспользоватьОтбор = Истина;
				
				ОтборВОбработкеВыгрузки = Обр.ПостроительОтчета.Отбор;
				
				
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы.ВидОперации",, 
				    									Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРКО"));
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы",, 
				    									Новый ОписаниеТипов("ДокументСсылка.РасходИзКассы"));
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы.Дата",, ОписаниеТипаДата);
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
			
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзКассы.Дата");
				СтрокаОтбора.ВидСравнения  	= ВидСравнения.ИнтервалВключаяГраницы;
				СтрокаОтбора.ЗначениеС     	= ЭтотОбъект.ДатаНачала;
				СтрокаОтбора.ЗначениеПо     = КонецДня(ЭтотОбъект.ДатаОкончания);
				СтрокаОтбора.Использование 	= Истина;
				
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзКассы.ВидОперации");
				СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
				СтрокаОтбора.Значение      = ЭтотОбъект.ВидОперацииРасходаИзКассы;
				СтрокаОтбора.Использование = Истина;
				
				Если ЕстьОтборПоОрганизации Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы.Организация",, 
					    									Новый ОписаниеТипов("СправочникСсылка.Организации"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзКассы.Организация");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияОрг;
					СтрокаОтбора.Значение      = ТекОрганизация;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Если ЕстьОтборПоСтрЕдинице Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы.СтруктурнаяЕдиница",, 
					    									Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзКассы.СтруктурнаяЕдиница");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияСтрЕдиница;
					СтрокаОтбора.Значение      = ТекСтрЕдиница;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				//mind возвраты выгружаются через отдельную задницу, поэтому тут грузить не надо
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();
				
				Поле = ДоступныеПоляОтбора.Добавить("Документ_РасходИзКассы.СтатьяДвиженияДенежныхСредств",, 
												Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
				
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_РасходИзКассы.СтатьяДвиженияДенежныхСредств");
				СтрокаОтбора.ВидСравнения  = ВидСравнения.НеРавно;
				СтрокаОтбора.Значение      = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102");
				СтрокаОтбора.Использование = Истина;
				
				Стр.НастройкиПостроителя = Обр.ПостроительОтчета.ПолучитьНастройки();
				
			КонецЕсли;
			
			/// Списание с корпоративных карт ///
			Если ЭтотОбъект.ВыгружатьСписаниеСКорпоративныхКарт
					И Стр.Имя = "СписаниеСКорпоративныхКарт" Тогда
				
			 	Стр.Включить = 1;
				
				Стр.ИспользоватьОтбор = Истина;
					
				ОтборВОбработкеВыгрузки = Обр.ПостроительОтчета.Отбор;
			
				ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();
				Поле = ДоступныеПоляОтбора.Добавить("Документ_СписаниеСКорпоративныхКарт",, Новый ОписаниеТипов("ДокументСсылка.СписаниеСКорпоративныхКарт"));
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_СписаниеСКорпоративныхКарт.Дата",, ОписаниеТипаДата);
				Поле.Отбор = Истина;
				Поле = ДоступныеПоляОтбора.Добавить("Документ_СписаниеСКорпоративныхКарт.ВидОперации",, 
				    									Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийСКорпоративнымиКартами"));
				Поле.Отбор = Истина;
				ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
			
				СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_СписаниеСКорпоративныхКарт.Дата");
				СтрокаОтбора.ВидСравнения  	= ВидСравнения.ИнтервалВключаяГраницы;
				СтрокаОтбора.ЗначениеС     	= ЭтотОбъект.ДатаНачала;
				СтрокаОтбора.ЗначениеПо     = КонецДня(ЭтотОбъект.ДатаОкончания);
				СтрокаОтбора.Использование 	= Истина;
				
				Если НЕ ЭтотОбъект.ВидОперацииСписаниеСКорпоративныхКарт.Пустая() Тогда
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_СписаниеСКорпоративныхКарт.ВидОперации");
					СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
					СтрокаОтбора.Значение      = ЭтотОбъект.ВидОперацииСписаниеСКорпоративныхКарт;
					СтрокаОтбора.Использование = Истина;
				КонецЕсли;
				
				Если ЕстьОтборПоОрганизации Тогда
					
					ДоступныеПоляОтбора = ОтборВОбработкеВыгрузки.ПолучитьДоступныеПоля();

					Поле = ДоступныеПоляОтбора.Добавить("Документ_СписаниеСКорпоративныхКарт.Организация",, Новый ОписаниеТипов("СправочникСсылка.Организации"));
					Поле.Отбор = Истина;
					ОтборВОбработкеВыгрузки.УстановитьДоступныеПоля(ДоступныеПоляОтбора); 
					
					СтрокаОтбора = ОтборВОбработкеВыгрузки.Добавить("Документ_СписаниеСКорпоративныхКарт.Организация");
					СтрокаОтбора.ВидСравнения  = ТекВидСравненияОрг;
					СтрокаОтбора.Значение      = ТекОрганизация;
					СтрокаОтбора.Использование = Истина;
					
				КонецЕсли;
				
				Стр.НастройкиПостроителя = Обр.ПостроительОтчета.ПолучитьНастройки();
					
			КонецЕсли;	
			
		КонецЦикла;	
		
		Обр.НепосредственноеЧтениеВИБПриемнике 	= Истина;
		Обр.ТипИнформационнойБазыДляПодключения = Ложь;
		Обр.ВерсияПлатформыИнформационнойБазыДляПодключения = ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
		СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
		Обр.ИмяСервераИнформационнойБазыДляПодключения 		= СтруктураПодключения.ИмяСервера;
		Обр.ИмяИнформационнойБазыНаСервереДляПодключения 	= СтруктураПодключения.ИмяБазы;
		Обр.ПользовательИнформационнойБазыДляПодключения 	= СтруктураПодключения.Пользователь;
		Обр.ПарольИнформационнойБазыДляПодключения			= СтруктураПодключения.Пароль;
		
		//Обр.ВыгрузкаДанныхВФайлОбменаПриИзменении(Неопределено);
		//Обр.ТипИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
		
		Обр.ИспользоватьТранзакции 			= Истина;
		Обр.КоличествоОбъектовНаТранзакцию 	= 1000000;
		Обр.ФлагРежимОтладки 				= Истина;
		
		Обр.ВыполнитьВыгрузку();
		
	КонецЕсли;
	
	Если ВыгружатьВыручкуИзЛистовУчета Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.05.07 ИП-00017910		
		МайМесяц = Дата("20180501");
	
		Если ДатаНачала >= МайМесяц Или ДатаОкончания >= МайМесяц Тогда
			Предупреждение("Период не может пересекаться с маем 2018 года. С мая 2018 года выгрузка будет производиться другой обработкой!");
			Возврат;
		КонецЕсли;	
		//---АК Susk (Суслин К.В.) 		 
		
		Если ВыгружатьТолькоСРазницей Тогда
			ОтборОрганизация = Построитель.Отбор.Организация;
			Если ОтборОрганизация.ВидСравнения = ВидСравнения.Равно
				И ОтборОрганизация.Использование
				И ЗначениеЗаполнено(ОтборОрганизация.Значение) Тогда
				
				ЗапросКеш = Новый Запрос();
				ЗапросКеш.Текст = "ВЫБРАТЬ
				                  |	СтруктурныеЕдиницы.Ссылка,
				                  |	СтруктурныеЕдиницы.НомерТочки
				                  |ИЗ
				                  |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
								  
				ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
				ТабКеш.Индексы.Добавить("НомерТочки");
				
				ДатаОбработки = ДатаНачала;
				Пока ДатаОбработки <= ДатаОкончания Цикл
					Состояние("Обработка за дату " + ДатаОбработки);
					ВыгрузитьЛистыСРазницей(ДатаОбработки, ТабКеш);
					ДатаОбработки = ДатаОбработки + 86400;
				КонецЦикла;	
			Иначе
				Предупреждение("Должен быть обязательный отбор по одной организации");
				Возврат;
			КонецЕсли;	
		Иначе	
			Обр = Обработки.ВыгрузкаВыручкиЛистовУчетаВБухгалтерию.Создать();
			Обр.ДатаНач = ДатаНачала;
			Обр.ДатаКон = ДатаОкончания;
			Обр.НастройкиПостроителяДляОтбора = Построитель.ПолучитьНастройки();
			//Обр.ИмяСервераИнформационнойБазыДляПодключения 		= "10.0.0.15";
			СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
			Обр.ИмяСервераИнформационнойБазыДляПодключения 		= СтруктураПодключения.ИмяСервера;
			Обр.ИмяИнформационнойБазыНаСервереДляПодключения 	= СтруктураПодключения.ИмяБазы;
			Обр.ПользовательИнформационнойБазыДляПодключения 	= СтруктураПодключения.Пользователь;
			Обр.ПарольИнформационнойБазыДляПодключения			= СтруктураПодключения.Пароль;
			Обр.ВыполнитьВыгрузку();
		КонецЕсли;	
	КонецЕсли;
	
	Описание = "С " + ДатаНачала + " по " + ДатаОкончания + " " + ?(ВыгружатьПоступлениеВБанк, "Поступление в банк", "") + ?(ВыгружатьРасходИзБанка, "Расход из банка", "")
		 + ?(ВыгружатьПоступлениеВКассу, "Поступление в кассу", "") + ?(ВыгружатьРасходИзКассы, "Расход из кассы", "") + ?(ВыгружатьВыручкуИзЛистовУчета, "Листы учета", "") + ?(ВыгружатьСписаниеСКорпоративныхКарт, "Списания с корпоративных карт", "");
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, Описание);
	
КонецПроцедуры

Процедура ВыгружатьВыручкуИзЛистовУчетаПриИзменении(Элемент)
	
	УстановитьВидимостьВидаОперации();
	
КонецПроцедуры
