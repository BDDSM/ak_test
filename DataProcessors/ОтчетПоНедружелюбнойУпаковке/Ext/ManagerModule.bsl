//+++АК LAGP 2018.09.13 ИП-00019246 Объект создал Лагерев. Вызов из Справочника "Периодические задания" + возможность ручного формирования.

Функция ПолучитьТаблицуДанных(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		Возврат	ТабДокумент;
	КонецЕсли;	
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("ДатаДокумента", 					Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("Номенклатура", 						Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ЕдиницаХранения", 					Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТабДанные.Колонки.Добавить("Характеристика", 					Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));//Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("ПоступлениеТоваровУслуг", 			Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ТабДанные.Колонки.Добавить("ПриходныйОрдер", 					Новый ОписаниеТипов("ДокументСсылка.ПриходныйОрдерСклад"));
	ТабДанные.Колонки.Добавить("Единица", 							Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТабДанные.Колонки.Добавить("Количество", 						Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("УпаковкаСодержит", 					Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ТипУпаковки", 						Новый ОписаниеТипов("ПеречислениеСсылка.ТипУпаковки"));
	ТабДанные.Колонки.Добавить("МатериалУпаковки", 					Новый ОписаниеТипов("СправочникСсылка.Материал"));	
	ТабДанные.Колонки.Добавить("ФИОТехнолога", 						Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("ПочтаТехнолога", 					Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("ПочтаАссистента", 					Новый ОписаниеТипов("Строка"));	
	ТабДанные.Колонки.Добавить("КоличествоВредногоПластика",		Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("КоличествоВредногоПластика6PS",		Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("КоличествоВредногоПластика3PVC",	Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("КоличествоВредногоПластика7Other",	Новый ОписаниеТипов("Число"));	
	
	ТипУпаковки = Новый Соответствие;
	Для каждого Переч Из Перечисления.ТипУпаковки Цикл
		ТипУпаковки.Вставить(Перечисления.ТипУпаковки.Индекс(Переч), Переч);			
	КонецЦикла;	
	
	//Список интересующего вредного материала
	Материал6PS 	= Справочники.Материал.НайтиПоНаименованию("6 PS");
	Материал3PVC 	= Справочники.Материал.НайтиПоНаименованию("3 PVC");
	Материал7Other 	= Справочники.Материал.НайтиПоНаименованию("7 Other");
	МассивВреднойУпаковки = Новый Массив;	
	МассивВреднойУпаковки.Добавить(Материал6PS);
	МассивВреднойУпаковки.Добавить(Материал3PVC);
	МассивВреднойУпаковки.Добавить(Материал7Other);
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	
	парСервер = "10.0.0.40";
	парLogin = Константы.ЛогинSQL.Получить();
	парПароль = Константы.ПарольSQL.Получить();
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	ADOСоединение.ConnectionString  = "SERVER=" + парСервер + "; DRIVER=SQL Server; UID=" + парLogin + "; PWD=" + парПароль + "; OLE DB Services=-2;";
	
	ADOСоединение.Open();
	
	Если Параметры.Свойство("СвойПериод") И Параметры.СвойПериод Тогда
		ДатаНачала    = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(НачалоДня(Параметры.ДатаНачалаОтчёта), 12 * 2000), Ложь);
		ДатаОкончания = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(КонецДня(Параметры.ДатаОкончанияОтчёта), 12 * 2000), Ложь);
	Иначе	
		//по умолчанию 2 прошедших недели для технологов и 2 прошлых месяца для "общего" отчёта
		Если Параметры.Свойство("ДляТехнологов") И Параметры.ДляТехнологов Тогда
			ДатаНачала    = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(НачалоНедели(ТекущаяДата())-14*24*60*60, 12 * 2000), Ложь);
			ДатаОкончания = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(КонецДня(НачалоНедели(ТекущаяДата())-1), 12 * 2000), Ложь);
		Иначе	
			ДатаНачала    = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), 12 * 2000 - 2), Ложь);
			ДатаОкончания = ВнешниеДанные.ФорматПоля(ДобавитьМесяц(КонецДня(НачалоМесяца(ТекущаяДата())-1), 12 * 2000), Ложь);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Параметры.Свойство("Технолог") И ЗначениеЗаполнено(Параметры.Технолог) Тогда
		УсловиеТехнолога = "SQLTovarProizv.FIO = '" + Параметры.Технолог + "' AND";
	Иначе
		УсловиеТехнолога = "";
	КонецЕсли;	
	
	ТекстЗапроса = "
	|SELECT
	|	DATEADD(month, DATEDIFF(month, 0, PostuplTovarovUslug._Date_Time), 0) AS DocDate,
	|	CAST(master.dbo.Binary2UID(PostuplTovarovUslugTovar._Fld512RRef) as nvarchar(36)) as Nomenklatura,
	|	SprNomenklatura._Fld5036 UpakovkaSoderjit,
	|	CAST(master.dbo.Binary2UID(SprNomenklatura._Fld241RRef) as nvarchar(36)) as EdinicaHran,	
	|	CAST(master.dbo.Binary2UID(PostuplTovarovUslugTovar._Document503_IDRRef) as nvarchar(36)) as Postuplenie,
	|	CAST(master.dbo.Binary2UID(PostuplTovarovUslugTovar._Fld528RRef) as nvarchar(36)) as Edinica,
	|	CAST(master.dbo.Binary2UID(PostuplTovarovUslugOrdera._Fld3363RRef) as nvarchar(36)) as PrihOrder,
	|	CAST(master.dbo.Binary2UID(PrihOrderTovar._Fld3080RRef) as nvarchar(36)) as Harka,
	|	PerTipUpakovki._EnumOrder TipUpakovkiPoryadok,
	|	SprHarkiUpakovki._Fld14016RRef TipUpakovki,
	|	CAST(master.dbo.Binary2UID(SprHarkiUpakovki._Fld14017RRef) as nvarchar(36)) as MaterialUpakovki,
	|	PostuplTovarovUslugTovar._Fld513 Kolvo,
	|	SprNomenklatura._Fld760 id_tov, 
	|	SprHarki._Fld7868 id_kontr,
	|	SQLTovarProizv._Email,
	|	SQLTovarProizvAssistent._Email EMailAss,
	|	SQLTovarProizv.FIO
	
	|	FROM [IzbenkaFin].dbo._Document503_VT510 PostuplTovarovUslugTovar WITH(NOLOCK)
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Document503 PostuplTovarovUslug WITH(NOLOCK)
	|	ON (PostuplTovarovUslugTovar._Document503_IDRRef = PostuplTovarovUslug._IDRRef)
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Document503_VT3361 PostuplTovarovUslugOrdera WITH(NOLOCK)
	|	ON (PostuplTovarovUslugTovar._Document503_IDRRef = PostuplTovarovUslugOrdera._Document503_IDRRef)
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Document3033_VT3077 PrihOrderTovar WITH(NOLOCK)
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Reference2539 SprHarki WITH(NOLOCK)
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Reference2539_VT14014 SprHarkiUpakovki WITH(NOLOCK)
	|	ON (SprHarki._IDRRef = SprHarkiUpakovki._Reference2539_IDRRef)
	|	ON (PrihOrderTovar._Fld3080RRef = SprHarki._IDRRef)
	|	ON ((PostuplTovarovUslugTovar._Fld512RRef = PrihOrderTovar._Fld3079RRef) AND (PostuplTovarovUslugOrdera._Fld3363RRef = PrihOrderTovar._Document3033_IDRRef))
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Reference29 SprNomenklatura WITH(NOLOCK)
	|	ON (PostuplTovarovUslugTovar._Fld512RRef = SprNomenklatura._IDRRef)
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Reference2539 SprHarki2 WITH(NOLOCK)
	|	ON PrihOrderTovar._Fld3080RRef = SprHarki2._IDRRef
	
	|	LEFT OUTER JOIN [IzbenkaFin].dbo._Enum13993 PerTipUpakovki WITH(NOLOCK)
	|	ON SprHarkiUpakovki._Fld14016RRef = PerTipUpakovki._IDRRef
	
	|	LEFT JOIN [Reports].[dbo].[Tovar_Proizv_Tehnolog_tbl] SQLTovarProizv 
	|	  ON  SQLTovarProizv.id_tov = SprNomenklatura._Fld760
	|	  and SQLTovarProizv.id_kontr = SprHarki._Fld7868
	|	LEFT JOIN [Reports].[dbo].[Tovar_Proizv_Tehnolog_tbl] SQLTovarProizvAssistent 
	|	  ON  SQLTovarProizvAssistent.id_tov = SprNomenklatura._Fld760
	|	  and SQLTovarProizvAssistent.id_kontr = SprHarki._Fld7868
	|	  and SQLTovarProizvAssistent._ItsAssistant = 1
	|	WHERE " + УсловиеТехнолога + " SQLTovarProizv.FIO <> 'Дербышев Сергей Владимирович' AND SQLTovarProizv.FIO <> 'Затинщиков Сергей Александрович,Машкина Олеся Сергеевна' AND SQLTovarProizv.FIO <> 'Кузнецова Лариса Владимировна,Широков Максим Алексеевич' AND SQLTovarProizv.FIO <> 'Кузьмина Светлана Михайловна' AND SQLTovarProizv._ItsAssistant = 0 AND SprHarki._Fld5138 = 0x00 AND ((PostuplTovarovUslug._Date_Time >= " + ДатаНачала + ") AND (PostuplTovarovUslug._Date_Time <= " + ДатаОкончания + ")) AND (NOT ((SprHarki2._IDRRef IS NULL)))";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
		
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл	
			Если Rs.Fields("MaterialUpakovki").Value <> NULL Тогда
				МатериалУпаковки = Справочники.Материал.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("MaterialUpakovki").Value));
			Иначе
				МатериалУпаковки = Справочники.Материал.ПустаяСсылка();
			КонецЕсли;
			НайденноеЗначениеМассиваВредныхУпаковок = МассивВреднойУпаковки.Найти(МатериалУпаковки);	
			Если НЕ НайденноеЗначениеМассиваВредныхУпаковок = Неопределено Тогда
				СтрокаДоб = ТабДанные.Добавить();
				Если Rs.Fields("Nomenklatura").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("Nomenklatura").Value));
				КонецЕсли;
				Если Rs.Fields("Harka").Value <> NULL Тогда
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("Harka").Value));
					//Если ЗначениеЗаполнено(Характеристика) Тогда
						СтрокаДоб.Характеристика = Характеристика;//ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "Наименование");	
					//КонецЕсли;	
				КонецЕсли;
				Если Rs.Fields("Edinica").Value <> NULL Тогда
					СтрокаДоб.Единица = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("Edinica").Value));
				КонецЕсли;
				Если Rs.Fields("EdinicaHran").Value <> NULL Тогда
					ЕдиницаХранения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("EdinicaHran").Value));
					Если ЗначениеЗаполнено(ЕдиницаХранения) Тогда
						СтрокаДоб.ЕдиницаХранения = ВРег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаХранения, "Наименование"));	
					КонецЕсли;			
				КонецЕсли;
				Если Rs.Fields("Postuplenie").Value <> NULL Тогда
					СтрокаДоб.ПоступлениеТоваровУслуг = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("Postuplenie").Value));
				КонецЕсли;
				Если Rs.Fields("PrihOrder").Value <> NULL Тогда
					СтрокаДоб.ПриходныйОрдер = Документы.ПриходныйОрдерСклад.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("PrihOrder").Value));
				КонецЕсли;		
				Если Rs.Fields("TipUpakovki").Value <> NULL Тогда
					СтрокаДоб.ТипУпаковки = ТипУпаковки[Rs.Fields("TipUpakovkiPoryadok").Value];
				КонецЕсли;
				СтрокаДоб.МатериалУпаковки = МатериалУпаковки;				
				
				СтрокаДоб.ДатаДокумента 	= Rs.Fields("DocDate").Value;
				СтрокаДоб.Количество 		= Rs.Fields("Kolvo").Value;
				СтрокаДоб.УпаковкаСодержит 	= ?(СтрокаДоб.ЕдиницаХранения = "КГ", Rs.Fields("UpakovkaSoderjit").Value, 1);
				СтрокаДоб.ФИОТехнолога 		= Rs.Fields("FIO").Value;
				СтрокаДоб.ПочтаТехнолога 	= Rs.Fields("_Email").Value;
				СтрокаДоб.ПочтаАссистента 	= Rs.Fields("EMailAss").Value;
				
				//основной показатель, инетересует только первичная упаковка
				Если СтрокаДоб.ТипУпаковки = Перечисления.ТипУпаковки.Первичная Тогда
					КоэффОценкиВредности = 1;	
				ИначеЕсли СтрокаДоб.ТипУпаковки = Перечисления.ТипУпаковки.ПервичнаяДополнительная Тогда
					КоэффОценкиВредности = 1;
				ИначеЕсли СтрокаДоб.ТипУпаковки = Перечисления.ТипУпаковки.Вторичная Тогда
					КоэффОценкиВредности = 1; //меняли пожелания постоянно, в итоге, все типы с коэффициентом 1.
				КонецЕсли;	
								
				КоличествоВредногоПластика = ?(СтрокаДоб.УпаковкаСодержит > 0, ?(КоэффОценкиВредности > 0, СтрокаДоб.Количество / (СтрокаДоб.УпаковкаСодержит * КоэффОценкиВредности), 0), 0);
				СтрокаДоб.КоличествоВредногоПластика = КоличествоВредногоПластика;
				Если СтрокаДоб.МатериалУпаковки = Материал6PS Тогда
					СтрокаДоб.КоличествоВредногоПластика6PS 	= КоличествоВредногоПластика;	
				ИначеЕсли СтрокаДоб.МатериалУпаковки = Материал3PVC Тогда
					СтрокаДоб.КоличествоВредногоПластика3PVC 	= КоличествоВредногоПластика;
				ИначеЕсли СтрокаДоб.МатериалУпаковки = Материал7Other Тогда
					СтрокаДоб.КоличествоВредногоПластика7Other 	= КоличествоВредногоПластика;
				КонецЕсли;																	
			КонецЕсли;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если Параметры.Свойство("ДляТехнологов") И Параметры.ДляТехнологов Тогда
		НазваниеМакета = "МакетТехнолог";
	Иначе	
	    НазваниеМакета = "МакетГоризонт";
    КонецЕсли;
		
	СхемаКомпоновки = Обработки.ОтчетПоНедружелюбнойУпаковке.ПолучитьМакет(НазваниеМакета);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек.Настройки;
    	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки);
	
	//Каждому своё для технологов
	Если Параметры.Свойство("ДляТехнологов") И Параметры.ДляТехнологов Тогда
		ТаблицаТехнологов = ТабДанные.Скопировать(,"ФИОТехнолога");
		ТаблицаТехнологов.Свернуть("ФИОТехнолога");
		ТабДанные.Свернуть("Номенклатура, Характеристика, ТипУпаковки, МатериалУпаковки, ФИОТехнолога, ПочтаТехнолога, ПочтаАссистента", "КоличествоВредногоПластика");
		ТабДанные.Колонки.Добавить("Доля");
		
		Для каждого Технолог Из ТаблицаТехнологов Цикл
			ТаблицаПоТехнологу = ТабДанные.Скопировать(Новый Структура("ФИОТехнолога", Технолог.ФИОТехнолога));
			
			Если НЕ ЗначениеЗаполнено(ТаблицаПоТехнологу[0].ПочтаТехнолога) Тогда
				Продолжить;	
			КонецЕсли;	
			
			//Для отображения доли в детальных записях (иначе доля только в группировках)
			ОбщееКоличество = ТаблицаПоТехнологу.Итог("КоличествоВредногоПластика");			

			Если ОбщееКоличество > 0 Тогда
				Для каждого СтрокаТаблицыПоТехнологу из ТаблицаПоТехнологу Цикл
					СтрокаТаблицыПоТехнологу.Доля = СтрокаТаблицыПоТехнологу.КоличествоВредногоПластика *100 / ОбщееКоличество;					
				КонецЦикла;	
			КонецЕсли;	
			
			ВнешниеНаборыДанных = Новый Структура;
			ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТаблицаПоТехнологу);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			
			ТабДокумент = Новый ТабличныйДокумент;
			
			ПроцессорВывода.УстановитьДокумент(ТабДокумент);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Если Параметры.Свойство("РучноеФормирование") И Параметры.РучноеФормирование Тогда
				Возврат ТабДокумент;			
			Иначе	
				Адреса = СтрЗаменить("" + ТаблицаПоТехнологу[0].ПочтаТехнолога + ?(ЗначениеЗаполнено(ТаблицаПоТехнологу[0].ПочтаАссистента), ";" + ТаблицаПоТехнологу[0].ПочтаАссистента, ""), " ", "");
				ТабДокТело = Новый ТабличныйДокумент;
			 	Тема = "Отчёт по закупкам в недружелюбной упаковке (Технолог: " + Технолог.ФИОТехнолога + " Почта: " + ТаблицаПоТехнологу[0].ПочтаТехнолога + ". Ассистент: " + ТаблицаПоТехнологу[0].ПочтаАссистента + ") " + НачалоНедели(ТекущаяДата()-14*24*60*60) + " - " + КонецДня(НачалоНедели(ТекущаяДата())-1);	 
				ОтправитьПисьмоСВложениемИТелом(Адреса, ТабДокумент, ТабДокТело, Тема);				
			КонецЕсли;
		КонецЦикла;	
	Иначе		
		//формирование общего вида отчёта
		Для каждого СтрокаДанных из ТабДанные Цикл 
			СтрокаДанных.ДатаДокумента = НачалоМесяца(СтрокаДанных.ДатаДокумента);				
		КонецЦикла;
				
		ТабДанные.Свернуть("ДатаДокумента, Номенклатура, Характеристика, ТипУпаковки, МатериалУпаковки, ФИОТехнолога", "КоличествоВредногоПластика6PS, КоличествоВредногоПластика3PVC, КоличествоВредногоПластика7Other");
			
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", ТабДанные);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		ПроцессорВывода.УстановитьДокумент(ТабДокумент);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Уровень = ТабДокумент.КоличествоУровнейГруппировокСтрок() - 1;
		Пока Уровень > 0 Цикл
			ТабДокумент.ПоказатьУровеньГруппировокСтрок(Уровень);
			Уровень = Уровень - 1;
		КонецЦикла;
		ТабДокумент.ПоказатьУровеньГруппировокСтрок(1);
		
		Если Параметры.Свойство("РучноеФормирование") И Параметры.РучноеФормирование Тогда
			Возврат ТабДокумент;			
		Иначе
			Адреса = "product_1@vkusvill.ru;reklama@izbenka.msk.ru";
			ТабДокТело = Новый ТабличныйДокумент;
		 	Тема = "Отчёт по закупкам в недружелюбной упаковке (общий) " + ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -2) + " - " + КонецДня(НачалоМесяца(ТекущаяДата())-1);	 
			ОтправитьПисьмоСВложениемИТелом(Адреса, ТабДокумент, ТабДокТело, Тема);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат "Завершено";
	
КонецФункции	

Процедура ОтправитьПисьмоСВложениемИТелом(ЭлПочта, ТабДок, ТабДокТело, Тема) Экспорт
	
	СпАдресов = Новый СписокЗначений;
	МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлПочта, ";");
	Для каждого Эл Из МассивАдресов Цикл
		Если ЗначениеЗаполнено(Эл) Тогда
			СпАдресов.Добавить(Сокрлп(Эл));
		КонецЕсли; 
	КонецЦикла; 
	СпАдресов.Добавить("brand@vkusvill.ru");
	СпАдресов.Добавить("lagp@automacon.ru"); //контроль
		
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);

	Темп = КаталогВременныхФайлов();
	ИмяФайлаТемп = "ОтчётНедружелюбнойУпаковки_" + Формат(ТекущаяДата(), "ДФ=d.M.yy");
	
	ТабДок.Записать(Темп + ИмяФайлаТемп + ".xlsx", ТипФайлаТабличногоДокумента.XLSX);
	ФайлАрхива = Новый ЗаписьZipФайла(Темп + ИмяФайлаТемп + ".zip", , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ФайлАрхива.Добавить(Темп + ИмяФайлаТемп + ".xlsx", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);    
	ФайлАрхива.Записать(); 
	
	СтруктураНовогоПисьма.Вставить("ФайлВложение", Темп + ИмяФайлаТемп + ".zip");
	
	УдалитьФайлы(Темп + ИмяФайлаТемп + ".xlsx",);	
	
	СтруктураНовогоПисьма.Вставить("Кому", СпАдресов);
	СтруктураНовогоПисьма.Вставить("Тема", Тема);
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	УдалитьФайлы(Темп + ИмяФайлаТемп + ".zip",);
	
КонецПроцедуры

Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма, ФлХТМЛ = Ложь)  
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	Если Не ФлХТМЛ Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе	
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	КонецЕсли; 
	Если СтруктураНовогоПисьма.Свойство("ТабДок") Тогда
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 	СтруктураНовогоПисьма.ТабДок;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
	КонецЕсли; 	
	
	Если СтруктураНовогоПисьма.Свойство("ФайлВложение") Тогда 
		Письмо.Вложения.Добавить(СтруктураНовогоПисьма.ФайлВложение);		 
	КонецЕсли;	 
	
	Для каждого Адрес Из СтруктураНовогоПисьма.Кому Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
КонецПроцедуры
