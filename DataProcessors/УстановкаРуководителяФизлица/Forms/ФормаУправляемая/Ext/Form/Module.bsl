
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВариантЗаполненияОтборыАвто = 2 Тогда
		ВариантЗаполненияОтборы = 2;
	КонецЕсли;
	
	ОбновитьВидимостьКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокВыбораДолжностей();
	
	ЗаполнитьТекущегоПомощникаУправляющего();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомманд

&НаКлиенте
Процедура КомандаПосмотретьТекущуюСтруктуру(Команда)
	
	ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("Руководитель", Руководитель), "ОсновнойСтруктураПодчиненности");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаменитьРуководителя(Команда)
	
	ТекстВопроса = НСтр("ru = 'Заменить руководителя #Руководитель на #РуководительНовый во всех карточках физ. лиц?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "#Руководитель", Руководитель);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "#РуководительНовый", РуководительНовый);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьРуководительяВопросЗавершение", ЭтаФорма), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьРуководительяВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаменитьРуководителяНаСервереБезКонтекста(Новый Структура("Руководитель, РуководительНовый", Руководитель, РуководительНовый));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДеревоПодчиненности(Команда)
	
	Если ДеревоПодчиненности.ПолучитьЭлементы().Количество() = 0 Тогда 
		ОбновитьДеревоПодчиненностиКлиент();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОчиститьДеревоПодчиненностиВопросЗавершение", ЭтаФорма, Новый Структура("ОбновитьДерево"));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Дерево подчиненности будет очищено! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикРабот(Команда)
	
	ОтрытьОбработкуГрафикРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРекомендуемоеЗначение(Команда)
	
	УстановитьРекомендуемоеЗначениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьУстановитьРекомендуемоеЗначениеВыделенныеВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ИмяКолонки = СтрЗаменить(ДополнительныеПараметры.ИмяКолонки,"Рекомендуемый","");
		
		ЗаполнитьФизическиеЛицаВыбраннымиЗначениямиСервер(Ложь, Истина, Истина, 
					Новый Структура(ИмяКолонки));
					
	    //Обновление данных выделенных (без перестроения дерева)
		Для каждого Строка из ТаблицаДляОбработки Цикл
			СтрокаДерева = ДеревоПодчиненности.НайтиПоИдентификатору(Строка.Идентификатор);
			СтрокаДерева[ИмяКолонки + "Текущий"] = СтрокаДерева[ИмяКолонки + "Рекомендуемый"];      
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсеРекомендуемыеЗначения(Команда)
	
	ТекстВопроса = НСтр("ru = 'Установить рекомендованные значение для физ. лиц всех строк?'");

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьУстановитьРекомендуемыеЗначенияВопросЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьУстановитьРекомендуемыеЗначенияВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьФизическиеЛицаВыбраннымиЗначениямиСервер(Ложь, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановкаРуководителяПоДолжности(Команда)
	
	УстнановитьРуководителяКлиент();
	
	ОбновитьДеревоПодчиненностиКлиент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьДерево(Команда)
	
	ТекстВопроса = НСтр("ru = 'Очистить дерево подчиненности?'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьОчиститьДеревоВопросЗавершение", ЭтаФорма), 
							ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОчиститьДеревоВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьДеревоСервер();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользователя(Команда)
	
	Если Элементы.ДеревоПодчиненности.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивПользователей = ПолучитьМассивПользователей(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник);
			Если МассивПользователей <> Неопределено Тогда
				Для каждого ЭлементМассива Из МассивПользователей Цикл
					ОткрытьЗначение(ЭлементМассива);
				КонецЦикла;
			Иначе
				Предупреждение(СтрЗаменить("Не удалось найти ""Пользователя"", для физ. лица ""ФизЛицо""!", "ФизЛицо", Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник)); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьОтчетСтруктурыПодчиненности(Команда)
	
	ОткрытьОтчетСтруктурыПодчиненности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ОбновитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияОтборыПриИзменении(Элемент)
	
	Если ДеревоПодчиненности.ПолучитьЭлементы().Количество() = 0 Тогда 
		ОбновитьВидимостьОтборовКлиент();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОчиститьДеревоПодчиненностиВопросЗавершение", ЭтаФорма, Новый Структура("ОбновитьВидимость, ОбновитьДерево"));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Дерево подчиненности будет очищено! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоПодчиненностиВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДеревоПодчиненности.ПолучитьЭлементы().Очистить();

		Если ДопПараметры.Свойство("ОбновитьВидимость") Тогда
			ОбновитьВидимостьОтборовКлиент();
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ОбновитьДерево") Тогда
			ОбновитьДеревоПодчиненностиКлиент();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыГрузчиков.Форма.ФормаВыбораСтруктурнойЕдиницы", Новый Структура("НаименованиеГруппы", "Управление розницей."));
	
	Если Результат <> Неопределено Тогда
		ОтборЦФО = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДолжностьПоЧастиТекста(Текст);

КонецПроцедуры

&НаКлиенте
Процедура ОтборДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДолжностьПоЧастиТекста(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДерева

&НаКлиенте
Процедура ДеревоПодчиненностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначениеЯчейки(Элемент.ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненностиПриАктивизацииЯчейки(Элемент)
	
	//Нельзя использовать обработкик ожидания, поскольку активация пожет происходить "Правой кнопкой мыши"
	//ПодключитьОбработчикОжидания("ОбновитьДоступностьКонтекстногоМеню", 0.1, Истина);
	
	ОбновитьДоступностьКонтекстногоМеню();	
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеФункцииИПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетРуководителиПоФизЛицамКлиент(СтруктураОтбора, ВариантОтчета)
	
	ОткрытьФорму("Отчет.РуководителиПоФизЛицам.Форма.ФормаОтчета", 
	     Новый Структура("ПроизвольныйОтбор, ВариантОтчетаИмя, СформироватьПриОткрытии", 
		 		СтруктураОтбора, ВариантОтчета, Истина), ЭтаФорма, Новый УникальныйИдентификатор(),,,,);
		
КонецПроцедуры

&Насервере
Процедура ЗаполнитьТекущегоПомощникаУправляющего(ФизЛицо = Неопределено);
	
	Если РольДоступна("ПравоУстановкиРуководителейФизЛицПолное") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизическоеЛицо
	|ИЗ
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) или ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	РолиПользователейСоставРоли.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ?(ЗначениеЗаполнено(Физлицо), Физлицо, ПараметрыСеанса.ТекущийПользователь.ФизЛицо));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийПомощник = Выборка.ФизическоеЛицо;
		
		//Ограничить возможность переключения вариантов заполнения
		ВариантЗаполнения = 1; //Установка руководителя
		ВариантЗаполненияОтборы = 2; //Вариант построения "Помощники ТУ"
		ВариантЗаполненияОтборыАвто = 2;
		
	Иначе
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			Сообщить(СтрЗаменить(НСтр("ru = '#Помощник не является помощником руководителя!'"), 
						"#Помощник", ФизЛицо));
		Иначе
			ТекущийПомощник = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораДолжностей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Должность КАК Значение,
	|	ФизическиеЛица.Должность КАК Представление
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
	|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
	|	И ФизическиеЛица.Активный
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Должность";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Результат = Запрос.Выполнить();
	
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Элементы.ОтборДолжность.СписокВыбора.Добавить(Выборка.Значение, СокрЛП(Выборка.Представление));
			Элементы.ОтборДолжностьРуководителя.СписокВыбора.Добавить(Выборка.Значение, СокрЛП(Выборка.Представление));
		КонецЦикла;
		
	Иначе
		
		Элементы.ОтборДолжность.СписокВыбора.Очистить();
		Элементы.ОтборДолжностьРуководителя.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКлиент()
	
	Сч = 0;
	Пока Сч < 2 Цикл
		Элементы["ГруппаВариантЗаполнения" + сч].Видимость = ВариантЗаполнения = Сч;     
		сч = сч + 1;
	КонецЦикла;
	
	Если Элементы.ГруппаВариантЗаполнения1.Видимость Тогда
		ОбновитьВидимостьОтборовКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьОтборовКлиент()
	
	Сч = 0;
	Пока Сч < 2 Цикл
		Элементы["ГруппаОтборы" + сч].Видимость = ВариантЗаполненияОтборы = Сч;     
		сч = сч + 1;
	КонецЦикла;
	
	//Ограничение возможности изменения вариантов отображения 
	ЭтоПомощникТУ = ВариантЗаполненияОтборыАвто = 2;
	Элементы.ВариантЗаполнения.Видимость = НЕ ЭтоПомощникТУ;
	Элементы.ВариантЗаполненияОтборы.Видимость = НЕ ЭтоПомощникТУ;
	
	//Отображение видимости вариантов отборов
	ОтборПоТабелю     = ВариантЗаполненияОтборы = 1; 
	ОтборПоПомощникам = ВариантЗаполненияОтборы = 2;
	
	//Обновление видимости элементов
	Элементы.ОтборЦФО.Видимость = ОтборПоТабелю;
	Элементы.ОтборДолжностьРуководителя.Видимость = ОтборПоПомощникам;
	
	//Обновление видимости колонок дерева
	Элементы.ДеревоПодчиненностиТорговаяТочкаРекомендуемый.Видимость = ОтборПоТабелю;
	Элементы.ДеревоПодчиненностиПомощникТУРекомендуемый.Видимость    = ОтборПоТабелю ИЛИ ОтборПоПомощникам;

	//Обновление видимости контекстнных меню
	Элементы.ДеревоПодчиненности.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПодчиненностиКонтекстноеМенюКомандаУстановитьРекомендуемоеЗначение.Видимость = ОтборПоТабелю ИЛИ ОтборПоПомощникам;
    Элементы.ДеревоПодчиненности.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПодчиненностиКонтекстноеМенюКомандаУстановитьВсеРекомендуемыеЗначения.Видимость = ОтборПоТабелю;
	
	//Обновление видимости кнопок
	Элементы.ОткрытьГрафикРабот.Видимость = ОтборПоТабелю;
	
	//Обновление заголовков
	Если ОтборПоПомощникам Тогда 
		Элементы.ДеревоПодчиненности.ПодчиненныеЭлементы.ДеревоПодчиненностиЦФОФизЛицоСотрудник.Заголовок = "Должность/Руководитель/Физ. лицо";
	ИначеЕсли ОтборПоТабелю Тогда
		Элементы.ДеревоПодчиненности.ПодчиненныеЭлементы.ДеревоПодчиненностиЦФОФизЛицоСотрудник.Заголовок = "ЦФО/Руководитель/Физ. лицо/Сотрудник";
	Иначе //Отбор по должности
		Элементы.ДеревоПодчиненности.ПодчиненныеЭлементы.ДеревоПодчиненностиЦФОФизЛицоСотрудник.Заголовок = "Руководитель/Физ. лицо/Сотрудник";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПосмотретьТекущуюСтруктуруНаСервереБезКонтекста()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаменитьРуководителяНаСервереБезКонтекста(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Руководитель = &Руководитель";
	
	Запрос.УстановитьПараметр("Руководитель", СтруктураПараметров.Руководитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Сообщить(СтрЗаменить(НСтр("ru = 'Не обнаружено физ. лиц, у которых установлен руководитель #Руководитель. Замена не производилась!'"), 
					"#Руководитель", СтруктураПараметров.Руководитель));
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.ФизЛицо.ПолучитьОбъект();
			СправочникОбъект.Руководитель = СтруктураПараметров.РуководительНовый;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстЗапросаДляПостроенияДерева()
	
	//ВариантЗаполненияОтборы = 0 - Актуальные сотрудники с отбором по "Должности"
	//ВариантЗаполненияОтборы = 1 - Актуальные сотрудники с отбором по "Табелю"
	//ВариантЗаполненияОтборы = 2 - Актуальные сотрудники с отбором по "Помощнику ТУ" и "Должности"
	
    Если ВариантЗаполненияОтборы = 0 Тогда
		
		Возврат
		
		  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		  |	СотрудникиОрганизаций.Код КАК СотрудникКод,
		  |	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		  |	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		  |	СотрудникиОрганизаций.ДатаУвольнения,
		  |	ФизическиеЛица.Руководитель,
		  |	ФизическиеЛица.Руководитель.Код КАК РуководительКод,
		  |	ФизическиеЛица.Руководитель.Должность КАК РуководительДолжность,
		  |	ФизическиеЛица.ПомощникТУ КАК ПомощникТУ,
		  |	ФизическиеЛица.СтанцияМетро КАК СтанцияМетро,
		  |	ФизическиеЛица.Ссылка КАК Физлицо,
		  |	ФизическиеЛица.Код КАК ФизлицоКод,
		  |	ФизическиеЛица.Активный КАК ФизлицоАктивный,
		  |	ФизическиеЛица.Должность
		  |ПОМЕСТИТЬ ВТ_АктивныеСотрудники
		  |ИЗ
		  |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		  |		ПО СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка
		  |ГДЕ
		  |	СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		  |	И ФизическиеЛица.Активный
		  |	И НЕ СотрудникиОрганизаций.ПометкаУдаления
		  |	И ВЫБОР
		  |			КОГДА &ДопОтборПоДолжности
		  |				ТОГДА ФизическиеЛица.Должность = &Должность
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	""Вся структура"" КАК ЦФО,
		  |	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК ТорговаяТочкаРекомендуемый,
		  |	ВТ_АктивныеСотрудники.СотрудникКод КАК СотрудникКод,
		  |	ВТ_АктивныеСотрудники.Сотрудник КАК Сотрудник,
		  |	ВТ_АктивныеСотрудники.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
		  |	ВТ_АктивныеСотрудники.ДатаУвольнения,
		  |	ВТ_АктивныеСотрудники.Руководитель КАК Руководитель,
		  |	ВТ_АктивныеСотрудники.РуководительКод,
		  |	ВТ_АктивныеСотрудники.РуководительДолжность КАК РуководительДолжность,
		  |	ВТ_АктивныеСотрудники.ПомощникТУ КАК ПомощникТУТекущий,
		  |	ВТ_АктивныеСотрудники.СтанцияМетро КАК СтанцияМетроТекущий,
		  |	ВТ_АктивныеСотрудники.Физлицо КАК Физлицо,
		  |	ВТ_АктивныеСотрудники.ФизлицоКод КАК ФизлицоКод,
		  |	ВТ_АктивныеСотрудники.ФизлицоАктивный,
		  |	ВТ_АктивныеСотрудники.Должность КАК Должность,
		  |	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ПомощникТУРекомендуемый,
		  |	ЗНАЧЕНИЕ(Справочник.СтанцииМетро.ПустаяСсылка) КАК СтанцияМетроРекомендуемый
		  |ИЗ
		  |	ВТ_АктивныеСотрудники КАК ВТ_АктивныеСотрудники
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	ЦФО,
		  |	Руководитель,
		  |	Физлицо
		  |ИТОГИ
		  |	МАКСИМУМ(СотрудникКод),
		  |	МАКСИМУМ(Сотрудник),
		  |	МАКСИМУМ(ДатаПриемаНаРаботу),
		  |	МАКСИМУМ(РуководительДолжность),
		  |	МАКСИМУМ(ПомощникТУТекущий),
		  |	МАКСИМУМ(СтанцияМетроТекущий),
		  |	МАКСИМУМ(ФизлицоКод),
		  |	МАКСИМУМ(Должность),
		  |	МАКСИМУМ(ПомощникТУРекомендуемый),
		  |	МАКСИМУМ(СтанцияМетроРекомендуемый)
		  |ПО
		  |	ЦФО,
		  |	Руководитель,
		  |	Физлицо
		  |АВТОУПОРЯДОЧИВАНИЕ"
		
	ИначеЕсли  ВариантЗаполненияОтборы = 1 Тогда 
		
		//Используемые табели: Грузчиков(0), Кассиров(1), Продавцов(2), Промоутеров(3)
		
		Если ВариантЗаполненияОтборыТабель = 0 Тогда
			ТекущийТабель = "ТабельРаботыГрузчиков";
		ИначеЕсли ВариантЗаполненияОтборыТабель = 1 Тогда
			ТекущийТабель = "ТабельРаботыКассиров";
		ИначеЕсли ВариантЗаполненияОтборыТабель = 2 Тогда
			ТекущийТабель = "ТабельРаботыПродавцов";
		ИначеЕсли ВариантЗаполненияОтборыТабель = 3 Тогда
			ТекущийТабель = "ТабельРаботыПромоутеров";
		Иначе
			Возврат "";
		КонецЕсли;

		ТекстЗапроса = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
		|ПОМЕСТИТЬ ВТ_ЦФО
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
		|			&ТекущаяДата,
		|			ВЫБОР
		|				КОГДА &ЦФО <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|					ТОГДА ЦФО = &ЦФО
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Код КАК СотрудникКод,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		|	СотрудникиОрганизаций.ДатаУвольнения,
		|	ФизическиеЛица.Руководитель,
		|	ФизическиеЛица.Руководитель.Код КАК РуководительКод,
		|	ФизическиеЛица.Руководитель.Должность КАК РуководительДолжность,
		|	ФизическиеЛица.ПомощникТУ КАК ПомощникТУ,
		|	ФизическиеЛица.СтанцияМетро КАК СтанцияМетро,
		|	ФизическиеЛица.Ссылка КАК Физлицо,
		|	ФизическиеЛица.Код КАК ФизлицоКод,
		|	ФизическиеЛица.Активный КАК ФизлицоАктивный,
		|	ФизическиеЛица.Должность
		|ПОМЕСТИТЬ ВТ_АктивныеСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		|	И ФизическиеЛица.Активный
		|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ДопОтборПоДолжности
		|				ТОГДА ФизическиеЛица.Должность = &Должность
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботы.Группа,
		|	ТабельРаботы.Сотрудник КАК Сотрудник,
		|	ТабельРаботы.ТорговаяТочка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабельРаботы.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ГрафикРаботыЧастота
		|ИЗ
		|	ВТ_АктивныеСотрудники КАК ВТ_АктивныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботы
		|		ПО ВТ_АктивныеСотрудники.Физлицо = ТабельРаботы.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЦФО <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				ТОГДА ТабельРаботы.Группа = &ЦФО
		|			ИНАЧЕ ТабельРаботы.Группа В
		|					(ВЫБРАТЬ
		|						ВТ_ЦФО.ЦФО
		|					ИЗ
		|						ВТ_ЦФО КАК ВТ_ЦФО)
		|		КОНЕЦ
		|	И ТабельРаботы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ТабельРаботы.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	И ВЫБОР
		|			КОГДА &ДопОтборПоДолжности
		|				ТОГДА ТабельРаботы.Сотрудник.Должность = &Должность
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельРаботы.Группа,
		|	ТабельРаботы.Сотрудник,
		|	ТабельРаботы.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ГрафикРаботыЧастота.Группа,
		|	ВТ_ГрафикРаботыЧастота.Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ГрафикРаботыЧастота.ТорговаяТочка) КАК ТорговаяТочка,
		|	МАКСИМУМ(ВТ_ГрафикРаботыЧастота.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ГрафикиРаботМаксКоличество
		|ИЗ
		|	ВТ_ГрафикРаботыЧастота КАК ВТ_ГрафикРаботыЧастота
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ГрафикРаботыЧастота.Группа,
		|	ВТ_ГрафикРаботыЧастота.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ГрафикРаботыЧастота.Группа КАК Группа,
		|	ВТ_ГрафикРаботыЧастота.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ВТ_ГрафикРаботыЧастота.ТорговаяТочка) КАК ТорговаяТочка,
		|	ВТ_ГрафикРаботыЧастота.Период
		|ПОМЕСТИТЬ ВТ_ГрафикиРабот
		|ИЗ
		|	ВТ_ГрафикиРаботМаксКоличество КАК ВТ_ГрафикиРаботМаксКоличество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикРаботыЧастота КАК ВТ_ГрафикРаботыЧастота
		|		ПО ВТ_ГрафикиРаботМаксКоличество.Группа = ВТ_ГрафикРаботыЧастота.Группа
		|			И ВТ_ГрафикиРаботМаксКоличество.Сотрудник = ВТ_ГрафикРаботыЧастота.Сотрудник
		|			И ВТ_ГрафикиРаботМаксКоличество.Период = ВТ_ГрафикРаботыЧастота.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ГрафикРаботыЧастота.Сотрудник,
		|	ВТ_ГрафикРаботыЧастота.Группа,
		|	ВТ_ГрафикРаботыЧастота.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ГрафикРаботыЧастота
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ГрафикиРаботМаксКоличество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ГрафикиРабот.Группа КАК Группа,
		|	ВТ_ГрафикиРабот.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_АктивныеСотрудники.СотрудникКод,
		|	ВТ_АктивныеСотрудники.Сотрудник КАК Сотрудник,
		|	ВТ_АктивныеСотрудники.ДатаПриемаНаРаботу,
		|	ВТ_АктивныеСотрудники.ДатаУвольнения,
		|	ВТ_АктивныеСотрудники.Руководитель КАК Руководитель,
		|	ВТ_АктивныеСотрудники.РуководительКод,
		|	ВТ_АктивныеСотрудники.РуководительДолжность,
		|	ВТ_АктивныеСотрудники.ПомощникТУ,
		|	ВТ_АктивныеСотрудники.СтанцияМетро,
		|	ВТ_АктивныеСотрудники.Физлицо КАК Физлицо,
		|	ВТ_АктивныеСотрудники.ФизлицоКод,
		|	ВТ_АктивныеСотрудники.ФизлицоАктивный,
		|	ВТ_АктивныеСотрудники.Должность
		|ПОМЕСТИТЬ ВТ_ГрафикРаботыАктивныхСотрудников
		|ИЗ
		|	ВТ_АктивныеСотрудники КАК ВТ_АктивныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикиРабот КАК ВТ_ГрафикиРабот
		|		ПО ВТ_АктивныеСотрудники.Физлицо = ВТ_ГрафикиРабот.Сотрудник
		|			И (ВТ_АктивныеСотрудники.ФизлицоАктивный)
		|ГДЕ
		|	ЕСТЬNULL(ВТ_ГрафикиРабот.Группа, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	И ВЫБОР
		|			КОГДА &ЦФО <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				ТОГДА ВТ_ГрафикиРабот.Группа = &ЦФО
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_АктивныеСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
		|	СоответствиеОбъектРольСрезПоследних.Объект,
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	СоответствиеОбъектРольСрезПоследних.ТипРолиID,
		|	РолиПользователейСоставРоли.Сотрудник
		|ПОМЕСТИТЬ ВТ_Помощники_ТУ_Соотв
		|ИЗ
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, ТипРолиID = ""PomoshnikTerrUpravlyushego"") КАК СоответствиеОбъектРольСрезПоследних
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекущаяДата, (ТипРолиID = ""PomoshnikTerrUpravlyushego"" или ТипРолиID = ""PomoshnikStorRozn"")) КАК СоответствиеОбъектРольСрезПоследних
		//--- AK suvv
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦФО.ЦФО,
		|	ВТ_ЦФО.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_ЦФО.СтруктурнаяЕдиница.ПометкаУдаления,
		|	ВТ_ЦФО.Организация,
		|	ВТ_Помощники_ТУ_Соотв.РольПользователя,
		|	ВТ_Помощники_ТУ_Соотв.ТипРолиID,
		|	ВТ_Помощники_ТУ_Соотв.Сотрудник КАК ПомощникТУРекомендуемый
		|ПОМЕСТИТЬ ВТ_Помощники_ТУ
		|ИЗ
		|	ВТ_ЦФО КАК ВТ_ЦФО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Помощники_ТУ_Соотв КАК ВТ_Помощники_ТУ_Соотв
		|		ПО ВТ_ЦФО.СтруктурнаяЕдиница = ВТ_Помощники_ТУ_Соотв.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницыСтанцииМетро.Ссылка КАК ТорговаяТочка,
		|	МАКСИМУМ(СтруктурныеЕдиницыСтанцииМетро.Метро) КАК Метро
		|ПОМЕСТИТЬ ВТ_СтанцииМетро
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы.СтанцииМетро КАК СтруктурныеЕдиницыСтанцииМетро
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикРаботыАктивныхСотрудников КАК ВТ_ГрафикРаботыАктивныхСотрудников
		|		ПО СтруктурныеЕдиницыСтанцииМетро.Ссылка = ВТ_ГрафикРаботыАктивныхСотрудников.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктурныеЕдиницыСтанцииМетро.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ГрафикРаботыАктивныхСотрудников.Группа КАК ЦФО,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ТорговаяТочка КАК ТорговаяТочкаРекомендуемый,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.СотрудникКод КАК СотрудникКод,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.Сотрудник КАК Сотрудник,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ДатаУвольнения,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.Руководитель КАК Руководитель,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.РуководительКод,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.РуководительДолжность КАК РуководительДолжность,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ПомощникТУ КАК ПомощникТУТекущий,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.СтанцияМетро КАК СтанцияМетроТекущий,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.Физлицо КАК Физлицо,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ФизлицоКод КАК ФизлицоКод,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.ФизлицоАктивный,
		|	ВТ_ГрафикРаботыАктивныхСотрудников.Должность КАК Должность,
		|	ВТ_Помощники_ТУ.ПомощникТУРекомендуемый КАК ПомощникТУРекомендуемый,
		|	ВТ_СтанцииМетро.Метро КАК СтанцияМетроРекомендуемый
		|ИЗ
		|	ВТ_ГрафикРаботыАктивныхСотрудников КАК ВТ_ГрафикРаботыАктивныхСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Помощники_ТУ КАК ВТ_Помощники_ТУ
		|		ПО ВТ_ГрафикРаботыАктивныхСотрудников.ТорговаяТочка = ВТ_Помощники_ТУ.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтанцииМетро КАК ВТ_СтанцииМетро
		|		ПО ВТ_ГрафикРаботыАктивныхСотрудников.ТорговаяТочка = ВТ_СтанцииМетро.ТорговаяТочка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦФО,
		|   Руководитель,
		|	Физлицо
		|ИТОГИ
		|	МАКСИМУМ(ТорговаяТочкаРекомендуемый),
		|	МАКСИМУМ(СотрудникКод),
		|	МАКСИМУМ(Сотрудник),
		|	МАКСИМУМ(ДатаПриемаНаРаботу),
		|	МАКСИМУМ(РуководительДолжность),
		|	МАКСИМУМ(ПомощникТУТекущий),
		|	МАКСИМУМ(СтанцияМетроТекущий),
		|	МАКСИМУМ(ФизлицоКод),
		|	МАКСИМУМ(Должность),
		|	МАКСИМУМ(ПомощникТУРекомендуемый),
		|	МАКСИМУМ(СтанцияМетроРекомендуемый)
		|ПО
		|	ЦФО,
		|	Руководитель,
		|	Физлицо
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Возврат СтрЗаменить(ТекстЗапроса, "ТабельРаботыГрузчиков", ТекущийТабель);
		
	ИначеЕсли ВариантЗаполненияОтборы = 2 Тогда
		
		Возврат
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Код КАК СотрудникКод,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		|	СотрудникиОрганизаций.ДатаУвольнения,
		|	ФизическиеЛица.Руководитель,
		|	ФизическиеЛица.Руководитель.Код КАК РуководительКод,
		|	ФизическиеЛица.Руководитель.Должность КАК РуководительДолжность,
		|	ФизическиеЛица.ПомощникТУ КАК ПомощникТУ,
		|	ФизическиеЛица.СтанцияМетро КАК СтанцияМетро,
		|	ФизическиеЛица.Ссылка КАК Физлицо,
		|	ФизическиеЛица.Код КАК ФизлицоКод,
		|	ФизическиеЛица.Активный КАК ФизлицоАктивный,
		|	ФизическиеЛица.Должность КАК ФизлицоДолжность,
		|	ФизическиеЛица.ПомощникТУ.Код,
		|	ФизическиеЛица.ПомощникТУ.Должность
		|ПОМЕСТИТЬ ВТ_АктивныеСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
		|	И ВЫБОР
		|			КОГДА &ОтборПоПомощнику
		|				ТОГДА ФизическиеЛица.Ссылка = &ТекущийПомощник
		|						ИЛИ ФизическиеЛица.ПомощникТУ = &ТекущийПомощник
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ФизическиеЛица.Активный
		|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ДопОтборПоДолжности
		|				ТОГДА ФизическиеЛица.Должность = &Должность
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДопОтборПоДолжностиРук
		|				ТОГДА ФизическиеЛица.Руководитель.Должность = &ДолжностьРук
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АктивныеСотрудники.Руководитель КАК Руководитель,
		|	ВТ_АктивныеСотрудники.РуководительКод КАК РуководительКод,
		|	ВТ_АктивныеСотрудники.РуководительДолжность КАК РуководительДолжность,
		|	ВТ_АктивныеСотрудники.ПомощникТУ КАК ПомощникТУ,
		|	ВТ_АктивныеСотрудники.ПомощникТУ.Код КАК ПомощникТУКод,
		|	ВТ_АктивныеСотрудники.ПомощникТУ.Должность КАК ПомощникТУДолжность,
		|	ВТ_АктивныеСотрудники.Физлицо КАК Физлицо,
		|	ВТ_АктивныеСотрудники.ФизлицоКод КАК ФизлицоКод,
		|	ВТ_АктивныеСотрудники.ФизлицоДолжность КАК ФизлицоДолжность,
		|	ВТ_АктивныеСотрудники.Сотрудник,
		|	ВТ_АктивныеСотрудники.СотрудникКод
		|ИЗ
		|	ВТ_АктивныеСотрудники КАК ВТ_АктивныеСотрудники
		|
		|УПОРЯДОЧИТЬ ПО
		|	РуководительДолжность,
		|	Руководитель,
		|	ПомощникТУДолжность,
		|	ПомощникТУ,
		|	ФизлицоДолжность,
		|	Физлицо
		|ИТОГИ
		|	МАКСИМУМ(РуководительКод),
		|	МАКСИМУМ(ПомощникТУКод),
		|	МАКСИМУМ(ФизлицоКод)
		|ПО
		|	РуководительДолжность,
		|	Руководитель,
		|	ПомощникТУДолжность,
		|	ПомощникТУ,
		|	ФизлицоДолжность,
		|	Физлицо
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоПодчиненностиКлиент()
	
	ТекстЗапроса = ПолучитьТекстЗапросаДляПостроенияДерева();
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Сообщить(НСтр("ru = 'Ошибка в отборах(Обратитесь к разработчику)!'"));
		Возврат;
	КонецЕсли;

	ОбновитьДеревоПодчиненностиСервер(ТекстЗапроса, Новый Структура("ЦФО, Должность, ДолжностьРуководителя, НачалоПериода, КонецПериода", 
									ОтборЦФО, ОтборДолжность, ОтборДолжностьРуководителя, Период.ДатаНачала, Период.ДатаОкончания));
	
	РазвернутьДеревоПодчиненности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПодчиненностиСервер(ТекстЗапроса, СтруктураПараметров)
	
	//ВариантЗаполненияОтборы = 0 - Актуальные сотрудники с отбором по "Должности"
	//ВариантЗаполненияОтборы = 1 - Актуальные сотрудники с отбором по "Табелю"
	//ВариантЗаполненияОтборы = 2 - Актуальные сотрудники с отбором по "Помощник ТУ"
	
	ТекущееДерево = РеквизитФормыВЗначение("ДеревоПодчиненности");
	ТекущееДерево.Строки.Очистить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Если СтруктураПараметров.Свойство("Должность") Тогда
		Запрос.УстановитьПараметр("Должность", СтруктураПараметров.Должность);
		Если ЗначениеЗаполнено(СтруктураПараметров.Должность)Тогда
			Запрос.УстановитьПараметр("ДопОтборПоДолжности", Истина);
		Иначе
			Запрос.УстановитьПараметр("ДопОтборПоДолжности", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДолжностьРуководителя") Тогда
		Запрос.УстановитьПараметр("ДолжностьРук", СтруктураПараметров.ДолжностьРуководителя);
		Если ЗначениеЗаполнено(СтруктураПараметров.ДолжностьРуководителя)Тогда
			Запрос.УстановитьПараметр("ДопОтборПоДолжностиРук", Истина);
		Иначе
			Запрос.УстановитьПараметр("ДопОтборПоДолжностиРук", Ложь);
		КонецЕсли;
	КонецЕсли;

	
	Если ВариантЗаполненияОтборы = 1 Тогда 
		
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", СтруктураПараметров.КонецПериода);
		
		Если СтруктураПараметров.Свойство("ЦФО") Тогда 
			Запрос.УстановитьПараметр("ЦФО", СтруктураПараметров.ЦФО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВариантЗаполненияОтборы = 2 Тогда
		Запрос.УстановитьПараметр("ОтборПоПомощнику", ЗначениеЗаполнено(ТекущийПомощник));
		Запрос.УстановитьПараметр("ТекущийПомощник", ТекущийПомощник);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если  ВариантЗаполненияОтборы <= 1 Тогда //Вариант заполнения по должности и ЦФО
		
		ВыборкаЦФО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЦФО.Следующий() Цикл
			 
			СтрокаЦФО = ТекущееДерево.Строки.Добавить();
			СтрокаЦФО.ЦФОФизЛицоСотрудник = ВыборкаЦФО.ЦФО;
			СтрокаЦФО.Вид = "Структурная единица";
			СтрокаЦФО.Код = ВыборкаЦФО.РуководительКод;
			СтрокаЦФО.ИгнорироватьПриОбработке = Истина;
			
			ВыборкаРуководитель = ВыборкаЦФО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРуководитель.Следующий() Цикл
				
				СтрокаРуководитель = СтрокаЦФО.Строки.Добавить();
				СтрокаРуководитель.ЦФОФизЛицоСотрудник = ВыборкаРуководитель.Руководитель;
				
				СтрокаРуководитель.Вид = "Физ. лицо";
				СтрокаРуководитель.Должность = ВыборкаРуководитель.РуководительДолжность;
				СтрокаРуководитель.ЭтоРуководитель = Истина;
				СтрокаРуководитель.ИгнорироватьПриОбработке = Истина;
				
				ВыборкаФизлицо = ВыборкаРуководитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаФизлицо.Следующий() Цикл
					
					СтрокаФизЛицо = СтрокаРуководитель.Строки.Добавить();
					СтрокаФизЛицо.ЦФОФизЛицоСотрудник = ВыборкаФизлицо.Физлицо;
					СтрокаФизЛицо.Вид = "Физ. лицо";
					СтрокаФизЛицо.Код = ВыборкаФизлицо.ФизлицоКод;
					СтрокаФизЛицо.Должность = ВыборкаФизлицо.Должность;
					СтрокаФизЛицо.ПомощникТУТекущий   = ВыборкаФизлицо.ПомощникТУТекущий;
					СтрокаФизЛицо.СтанцияМетроТекущий = ВыборкаФизлицо.СтанцияМетроТекущий;
					СтрокаФизЛицо.ПомощникТУРекомендуемый    = ВыборкаФизлицо.ПомощникТУРекомендуемый;
					
					//Дополнительная строка (с информацей по сотруднику)
					
					СтрокаСотрудник = СтрокаФизЛицо.Строки.Добавить();
					СтрокаСотрудник.ЦФОФизЛицоСотрудник = ВыборкаФизлицо.Сотрудник; 
					СтрокаСотрудник.Вид = "Сотрудник";
					СтрокаСотрудник.Код = ВыборкаФизлицо.СотрудникКод;
					СтрокаСотрудник.ИгнорироватьПриОбработке = Истина;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ВариантЗаполненияОтборы = 2 Тогда //Вариант заполнения по Помощникам ТУ
		
		ВыборкаРуководительДолжность = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРуководительДолжность.Следующий() Цикл
			
			СтрокаРуководительДолжность = ТекущееДерево.Строки.Добавить();
			СтрокаРуководительДолжность.ЦФОФизЛицоСотрудник = ВыборкаРуководительДолжность.РуководительДолжность;
			СтрокаРуководительДолжность.Вид = "Должность (руководитель)";
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРуководительДолжность.РуководительДолжность) Тогда
				СтрокаРуководительДолжность.ЭтоРуководитель = Истина;
			КонецЕсли;
			
			ВыборкаРуководитель = ВыборкаРуководительДолжность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРуководитель.Следующий() Цикл
				
				СтрокаРуководитель = СтрокаРуководительДолжность.Строки.Добавить(); 
				
				СтрокаРуководитель.ЦФОФизЛицоСотрудник = ВыборкаРуководитель.Руководитель;
				СтрокаРуководитель.Код = ВыборкаРуководитель.РуководительКод;
				СтрокаРуководитель.Вид = "Физ. лицо";
				СтрокаРуководитель.Должность = ВыборкаРуководитель.РуководительДолжность;
				СтрокаРуководитель.ЭтоРуководитель = Истина;
				СтрокаРуководитель.ИгнорироватьПриОбработке = Истина;
				
				ВыборкаПомощникТУДолжность = ВыборкаРуководитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				//Помощников управляющих выделить в отдельную строку
				ДобавитьГруппуУправляющих = Истина;

				Пока ВыборкаПомощникТУДолжность.Следующий() Цикл
					
					ВыборкаПомощникТУ = ВыборкаПомощникТУДолжность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					ДобавитьСтрокуДолжности = Истина;
					
					Пока ВыборкаПомощникТУ.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаПомощникТУ.ПомощникТУ) Тогда
							
							Если ДобавитьГруппуУправляющих Тогда
								
								СтрокаРуководитель = СтрокаРуководитель.Строки.Добавить();
								СтрокаРуководитель.ЦФОФизЛицоСотрудник = "Помощники управляющих";
								СтрокаРуководитель.ЭтоПомощникТУ = Истина;
								
								ДобавитьГруппуУправляющих = Ложь;
								
							КонецЕсли;

							Если ДобавитьСтрокуДолжности Тогда
								
								СтрокаПомощникТУДолжность = СтрокаРуководитель.Строки.Добавить();
								СтрокаПомощникТУДолжность.ЦФОФизЛицоСотрудник = ВыборкаПомощникТУДолжность.ПомощникТУДолжность;
								СтрокаПомощникТУДолжность.Вид = "Должность (помощник)";

								//Если НЕ ЗначениеЗаполнено(ВыборкаПомощникТУДолжность.ПомощникТУДолжность) Тогда
									СтрокаПомощникТУДолжность.ЭтоПомощникТУ = Истина;
								//КонецЕсли;

								ДобавитьСтрокуДолжности = Ложь;
								
							КонецЕсли;

							СтрокаПомощникТУ = СтрокаПомощникТУДолжность.Строки.Добавить();
							
							СтрокаПомощникТУ.ЦФОФизЛицоСотрудник = ВыборкаПомощникТУ.ПомощникТУ;
							СтрокаПомощникТУ.Код = ВыборкаПомощникТУ.ПомощникТУКод;
							СтрокаПомощникТУ.Вид = "Физ. лицо";
							СтрокаПомощникТУ.Должность = ВыборкаПомощникТУ.ПомощникТУДолжность;
							СтрокаПомощникТУ.ИгнорироватьПриОбработке = Истина;
							СтрокаПомощникТУ.ЭтоПомощникТУ = Истина;

						Иначе
							
							Если ВариантЗаполненияОтборы <> 2 Тогда
								СтрокаПомощникТУ = СтрокаРуководитель.Строки.Добавить();
								СтрокаПомощникТУ.ЦФОФизЛицоСотрудник = "";
								СтрокаПомощникТУ.ЭтоПомощникТУ = Истина;
							Иначе
								СтрокаПомощникТУ = СтрокаРуководитель;
							КонецЕсли;
							
						КонецЕсли;

						ВыборкаФизлицоДолжность = ВыборкаПомощникТУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаФизлицоДолжность.Следующий() Цикл
							
							СтрокаФизлицоДолжность = СтрокаПомощникТУ.Строки.Добавить();
							СтрокаФизлицоДолжность.ЦФОФизЛицоСотрудник = ВыборкаФизлицоДолжность.ФизлицоДолжность;
							СтрокаФизлицоДолжность.Вид = "Должность (физ. лицо)";
							
							ВыборкаФизлицо = ВыборкаФизлицоДолжность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаФизлицо.Следующий() Цикл
								
								СтрокаФизлицо = СтрокаФизлицоДолжность.Строки.Добавить();
								СтрокаФизлицо.ЦФОФизЛицоСотрудник = ВыборкаФизлицо.Физлицо; 
								СтрокаФизлицо.Код = ВыборкаФизлицо.ФизлицоКод;
								СтрокаФизлицо.Вид = "Физ. лицо";
								СтрокаФизлицо.Должность = ВыборкаФизлицо.ФизлицоДолжность;
								СтрокаФизЛицо.ПомощникТУТекущий = ВыборкаФизлицо.ПомощникТУ;
								СтрокаФизЛицо.ПомощникТУРекомендуемый = ВыборкаФизлицо.ПомощникТУ;

								//ВыборкаСотрудник = ВыборкаФизлицо.Выбрать();
								//
								//Пока ВыборкаСотрудник.Следующий() Цикл
								//	
								//	СтрокаСотрудник = СтрокаФизлицо.Строки.Добавить();
								//	СтрокаСотрудник.ЦФОФизЛицоСотрудник = ВыборкаСотрудник.Сотрудник; 
								//	СтрокаСотрудник.Код = ВыборкаСотрудник.СотрудникКод;
								//	СтрокаСотрудник.Вид = "Сотрудник";
								//	СтрокаСотрудник.ИгнорироватьПриОбработке = Истина;
								//	
								//КонецЦикла;
								
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТекущееДерево, "ДеревоПодчиненности");

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПодчиненности()
	
	Если ВариантЗаполненияОтборы = 2 И ЗначениеЗаполнено(ТекущийПомощник) Тогда
		
		КоллекцияПервогоУровня = ДеревоПодчиненности.ПолучитьЭлементы();
		
		Для Каждого ЭлементПервогоУровня Из КоллекцияПервогоУровня Цикл
			
			РазвернутьСтрокиДерева(ЭлементПервогоУровня.ПолучитьИдентификатор());
			
			//Разворачивать элементы второго уровня 
			КоллекцияВторогоУровня = ЭлементПервогоУровня.ПолучитьЭлементы();
			
			Для Каждого ЭлементВторогоУровня Из КоллекцияВторогоУровня Цикл
				
				РазвернутьСтрокиДерева(ЭлементВторогоУровня.ПолучитьИдентификатор());
				
				//Разворачивать элементы третьего уровня 
				КоллекцияТретьегоУровня = ЭлементВторогоУровня.ПолучитьЭлементы();
				
				Для Каждого ЭлементТретьегоУровня Из КоллекцияТретьегоУровня Цикл
					
					РазвернутьСтрокиДерева(ЭлементТретьегоУровня.ПолучитьИдентификатор());
					
					//Разворачивать элементы четвертого уровня 
					КоллекцияЧетвертогоУровня = ЭлементТретьегоУровня.ПолучитьЭлементы();
					
					Для Каждого ЭлементЧетвертогоУровня Из КоллекцияЧетвертогоУровня Цикл
						
						РазвернутьСтрокиДерева(ЭлементЧетвертогоУровня.ПолучитьИдентификатор());
						
						//Разворачивать элементы пятого уровня 
						КоллекцияПятогоУровня = ЭлементЧетвертогоУровня.ПолучитьЭлементы();
						
						Для Каждого ЭлементПятогоУровня Из КоллекцияПятогоУровня Цикл
							РазвернутьСтрокиДерева(ЭлементПятогоУровня.ПолучитьИдентификатор());
						КонецЦикла;

					КонецЦикла;
					
				КонецЦикла;

			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ВариантЗаполненияОтборы = 2 Тогда
		
		Возврат;
		
	Иначе
		
		КоллекцияПервогоУровня = ДеревоПодчиненности.ПолучитьЭлементы();
		
		Для Каждого ЭлементПервогоУровня Из КоллекцияПервогоУровня Цикл
			
			РазвернутьСтрокиДерева(ЭлементПервогоУровня.ПолучитьИдентификатор());
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ИдентификаторСтроки)
	
	Элементы.ДеревоПодчиненности.Развернуть(ИдентификаторСтроки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрытьОбработкуГрафикРабот()
	
	Если ВариантЗаполненияОтборыТабель = 0 Тогда
		ТекущийГрафик = "ГрафикРаботыГрузчиков";
	ИначеЕсли ВариантЗаполненияОтборыТабель = 1 Тогда
		ТекущийГрафик = "ГрафикРаботыКассиров";
	ИначеЕсли ВариантЗаполненияОтборыТабель = 2 Тогда
		ТекущийГрафик = "ГрафикРаботыПродавцов_ТЗ";
	ИначеЕсли ВариантЗаполненияОтборыТабель = 3 Тогда
		ТекущийГрафик = "ГрафикРаботыПромоутеров";
	Иначе
		Возврат;          
	КонецЕсли;
	
    ВП = Новый Структура("Вариант, ДатаНачала, ДатаОкончания", Период.Вариант, Период.ДатаНачала, Период.ДатаОкончания);
	
	ОткрытьФорму("Обработка." + ТекущийГрафик + ".Форма", Новый Структура("ГруппаТорговыхТочек, ВП", ОтборЦФО, ВП), ЭтаФорма, Новый УникальныйИдентификатор());    
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеЯчейки(ТекущиеДанные, ИмяЯчейки, СтандартнаяОбработка)
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		//Возможность выбора некоторых значений вручную
		Если ИмяЯчейки = "ДеревоПодчиненностиПомощникТУРекомендуемый"
			ИЛИ ИмяЯчейки = "ДеревоПодчиненностиСтанцияМетроРекомендуемый" Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьЗначение(ТекущиеДанные[СтрЗаменить(ИмяЯчейки, "ДеревоПодчиненности","")]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКонтекстногоМеню()

	Если Элементы.ДеревоПодчиненности.ТекущийЭлемент <> Неопределено Тогда
		
		Попытка
			
			Если  Элементы.ДеревоПодчиненности.ТекущийЭлемент.Имя = "ДеревоПодчиненностиПомощникТУРекомендуемый" 
				ИЛИ Элементы.ДеревоПодчиненности.ТекущийЭлемент.Имя = "ДеревоПодчиненностиСтанцияМетроРекомендуемый" 
				И НЕ Элементы.ДеревоПодчиненности.ТекущиеДанные.ИгнорироватьПриОбработке Тогда
				
				Элементы.ДеревоПодчиненности.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПодчиненностиКонтекстноеМенюКомандаУстановитьРекомендуемоеЗначение.Доступность = Истина;
			Иначе
				
				Элементы.ДеревоПодчиненности.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПодчиненностиКонтекстноеМенюКомандаУстановитьРекомендуемоеЗначение.Доступность = Ложь;
				
			КонецЕсли;
			
		Исключение
			//♦ОТЛАДКА
			//Несколько раз вываливалась ошибка о том что в Элементы.ДеревоПодчиненности.ТекущийЭлемент.Имя не обнаружено "имя",
			//в то время как Элементы.ДеревоПодчиненности.ТекущийЭлемент <> Неопределено.
			//Пока не удалось смоделировать ошибку. 
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьРеквизитСправочникаФизлицаСервер(СтруктураПараметров)
	
	СправочникОбъект = СтруктураПараметров.ТекущееФизЛицо.ПолучитьОбъект();
	
	СправочникОбъект[СтрЗаменить(СтруктураПараметров.ИмяКолонки, "Рекомендуемый","")] = СтруктураПараметров.Рекомендуемый;
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	
	СправочникОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляОбработкиДобавитьСтроку(ТекущаяСтрока, Идентификатор)
	
	Если Не ТекущаяСтрока.ИгнорироватьПриОбработке Тогда
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		
		НоваяСтрока.ЦФОФизЛицоСотрудник = ТекущаяСтрока.ЦФОФизЛицоСотрудник ; 
		НоваяСтрока.ПомощникТУРекомендуемый = ТекущаяСтрока.ПомощникТУРекомендуемый ; 
		НоваяСтрока.СтанцияМетроРекомендуемый = ТекущаяСтрока.СтанцияМетроРекомендуемый;
		НоваяСтрока.Идентификатор = Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизическиеЛицаВыбраннымиЗначениямиСервер(ОбновлятьРуководителя, ОновлятьРекомендуемые, ИспТаблицуОбработки = Ложь, СтруктураПолей = Неопределено)
	
	Если ИспТаблицуОбработки Тогда
		ТаблицаФизическихЛиц = ТаблицаДляОбработки.Выгрузить();;	
	Иначе 
		ТаблицаФизическихЛиц = ПолучитьТаблицуФизическихЛиц();
	КонецЕсли;
	
	Если СтруктураПолей = Неопределено Тогда
		
		//Станцию метро Помощники ТУ будут указывать вручную. 
		//Станция метро, станция - к которой ближе всего живет сотрудник, а не ближайшая станция к магазину основного места работы.
		//СтруктураПолей = ("ПомощникТУ, СтанцияМетро"); 
		СтруктураПолей = ("ПомощникТУ"); 
		
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаФизическихЛиц Цикл
		
		СправочникОбъект = Строка.ЦФОФизЛицоСотрудник.ПолучитьОбъект();
		
		Если ОбновлятьРуководителя Тогда
			СправочникОбъект.Руководитель = Руководитель;
		КонецЕсли;
		
		Если ОновлятьРекомендуемые Тогда

			Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
				СправочникОбъект[ЭлементСтруктуры.Ключ] = Строка [ЭлементСтруктуры.Ключ + "Рекомендуемый"];          
			КонецЦикла;
		КонецЕсли;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуФизическихЛиц()
	
	ТаблицаЗначений = Неопределено;
	
	Дерево = РеквизитФормыВЗначение("ДеревоПодчиненности");
	
	ТаблицаЗначений = ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, ТаблицаЗначений);
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаЗначений);
	
	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	| ВТ КАК ВТ
	|ГДЕ
	| НЕ ВТ.ИгнорироватьПриОбработке";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, ТаблицаЗначений = Неопределено)
	
	Если ТаблицаЗначений = Неопределено Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений();
		ТаблицаЗначений.Колонки.Добавить("ЦФОФизЛицоСотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаЗначений.Колонки.Добавить("ПомощникТУРекомендуемый", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаЗначений.Колонки.Добавить("СтанцияМетроРекомендуемый", Новый ОписаниеТипов("СправочникСсылка.СтанцииМетро"));
		ТаблицаЗначений.Колонки.Добавить("ИгнорироватьПриОбработке", Новый ОписаниеТипов("Булево"));
		ТаблицаЗначений.Колонки.Добавить("ЭтоРуководитель", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), СтрокаДерева);
		
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, ТаблицаЗначений);

	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРекомендуемоеЗначениеКлиент();
	
	ИмяКолонки     = СтрЗаменить(Элементы.ДеревоПодчиненности.ТекущийЭлемент.Имя, "ДеревоПодчиненности","");

	Если Элементы.ДеревоПодчиненности.ПодчиненныеЭлементы.Количество() = 1 Тогда
		
		Рекомендуемый  = Элементы.ДеревоПодчиненности.ТекущиеДанные[ИмяКолонки];
		ТекущееФизлицо = Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник;
		
		Если Не ЗначениеЗаполнено(ТекущееФизЛицо) 
			Или ТипЗнч(ТекущееФизЛицо)<> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Сообщить(НСтр("ru = 'В текущей строке отсутствует физ. лицо'"));
			
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Установить рекомендованное значение ""#Рекомендуемый "" физ. лицу ""#Физлицо""?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "#Рекомендуемый", Рекомендуемый);
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "#Физлицо", ТекущееФизлицо);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьУстановитьРекомендуемоеЗначениеВопросЗавершение", ЭтаФорма,Новый Структура("ИмяКолонки, Рекомендуемый, ТекущееФизлицо", ИмяКолонки, Рекомендуемый, ТекущееФизлицо)), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТаблицаДляОбработки.Очистить();
		
		Для каждого Идентификатор Из Элементы.ДеревоПодчиненности.ВыделенныеСтроки Цикл
			ТаблицаДляОбработкиДобавитьСтроку(ДеревоПодчиненности.НайтиПоИдентификатору(Идентификатор), Идентификатор);
		КонецЦикла;

		ТекстВопроса = НСтр("ru = 'Установить для физ. лиц рекомендованные значения из текущей колонки(выделенные строк)?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьУстановитьРекомендуемоеЗначениеВыделенныеВопросЗавершение", ЭтаФорма,Новый Структура("ИмяКолонки, Рекомендуемый, ТекущееФизлицо", ИмяКолонки, Рекомендуемый, ТекущееФизлицо)), 
			  ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстнановитьРуководителяКлиент()
	
	ТекстВопроса = НСтр("ru = 'Установить руководителя ""#Руководитель"" для всех физ.лиц?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса,"#Руководитель", Руководитель);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьУстановитьРуководителяВопросЗавершение", ЭтаФорма), 
		ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьУстановитьРуководителяВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьФизическиеЛицаВыбраннымиЗначениямиСервер(Истина, Ложь, Ложь, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановкаРуководителяВыделенныеСтроки(Команда)
	
	ТекстВопроса = НСтр("ru = 'Установить руководителя ""#Руководитель"" для выделенных физ.лиц?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса,"#Руководитель", Руководитель);
	
	ТаблицаДляОбработки.Очистить();
	
	Для каждого Идентификатор Из Элементы.ДеревоПодчиненности.ВыделенныеСтроки Цикл
		ТаблицаДляОбработкиДобавитьСтроку(ДеревоПодчиненности.НайтиПоИдентификатору(Идентификатор), Идентификатор);
	КонецЦикла;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьУстановитьРуководителяВыделенныеСтрокиВопросЗавершение", ЭтаФорма), 
							ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьУстановитьРуководителяВыделенныеСтрокиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда

		ЗаполнитьФизическиеЛицаВыбраннымиЗначениямиСервер(Истина, Ложь, Истина);
		
		ОбновитьДеревоПодчиненностиКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоСервер()
	
	Дерево = РеквизитформыВзначение("ДеревоПодчиненности");
	
	Дерево.Строки.Очистить();
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПодчиненности");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДолжностьПоЧастиТекста(Текст)
	
    Возврат ПолучитьДанныеВыбора(Тип("СправочникСсылка.ДолжностиОрганизаций"), 
			Новый Структура("ДополнительныеПараметры, ТекстПоиска", "ПодборПоДолжности", Текст));
	
КонецФункции

&НаКлиенте
Процедура КомандаРежимТестирования(Команда)
	ОбновитьВидимостьЭлементновРежимТестирования();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементновРежимТестирования()
	
	Элементы.ФормаКомандаРежимТестирования.Пометка = Не Элементы.ФормаКомандаРежимТестирования.Пометка;
	
	Элементы.ГруппаРежимТестирования.Видимость = Элементы.ФормаКомандаРежимТестирования.Пометка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивПользователей(ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСтруктурыПодчиненности()
	
	Если ВариантЗаполненияОтборы = 0 Тогда
		ВариантОтчета = "ОсновнойСтруктураПодчиненности";
	Иначе
		ВариантОтчета = "ОсновнойДолжностьРуководителя";
	КонеЦесли;

	Если ДеревоПодчиненности.ПолучитьЭлементы().Количество() = 0 ИЛИ Элементы.ДеревоПодчиненности.ТекущиеДанные = Неопределено Тогда 
		
		ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура(), ВариантОтчета);
		
	Иначе
		
		//Открытие отчета по Должности (Тип.Строка)			
		Если Элементы.ДеревоПодчиненности.ТекущиеДанные.Вид = "Должность (руководитель)" Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("РуководительДолжность", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					СокрЛП(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), "")), ВариантОтчета);
		ИначеЕсли Элементы.ДеревоПодчиненности.ТекущиеДанные.Вид = "Должность (помощник)" Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("ПомощникТУДолжность", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					СокрЛП(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), "")), ВариантОтчета);
		ИначеЕсли Элементы.ДеревоПодчиненности.ТекущиеДанные.Вид = "Должность (физ. лицо)" Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("ФизлицоДолжность", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					СокрЛП(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), "")), ВариантОтчета);
	    //Открытие отчета по Ссылке (Тип.Справочник.ФизическиеЛица)
		ИначеЕсли Элементы.ДеревоПодчиненности.ТекущиеДанные.ЭтоРуководитель Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("Руководитель", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"))), ВариантОтчета);
		ИначеЕсли Элементы.ДеревоПодчиненности.ТекущиеДанные.ЭтоПомощникТУ Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("ПомощникТУ", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"))), ВариантОтчета);
		ИначеЕсли НЕ Элементы.ДеревоПодчиненности.ТекущиеДанные.ИгнорироватьПриОбработке И Элементы.ДеревоПодчиненности.ТекущиеДанные.Вид = "Физ. лицо" Тогда
			ОткрытьОтчетРуководителиПоФизЛицамКлиент(Новый Структура("Физлицо", ?(ЗначениеЗаполнено(Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник), 
					Элементы.ДеревоПодчиненности.ТекущиеДанные.ЦФОФизЛицоСотрудник, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"))), ВариантОтчета);
		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПомощникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущийПомощник) Тогда
		ЗаполнитьТекущегоПомощникаУправляющего(ТекущийПомощник);
	Иначе
		ВариантЗаполненияОтборыАвто = 0;
	КонецЕсли;
	
	ОбновитьВидимостьОтборовКлиент();
	
	Если ДеревоПодчиненности.ПолучитьЭлементы().Количество() = 0 Тогда 
		ОбновитьДеревоПодчиненностиКлиент();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОчиститьДеревоПодчиненностиВопросЗавершение", ЭтаФорма, Новый Структура("ОбновитьВидимость, ОбновитьДерево"));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Дерево подчиненности будет очищено! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

