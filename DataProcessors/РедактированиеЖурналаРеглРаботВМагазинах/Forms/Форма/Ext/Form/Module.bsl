
&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистраЖурнала(СтруктураЗаписи)

    Возврат РегистрыСведений.ЖурналРегламентныхРаботВМагазинах.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПараметрыСеанса.ТорговаяТочкаПоАйпи.Пустая() Тогда
		Сообщить("Не установлен параметр сеанса ""Тороговая точка по айпи""");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Открытие списка регламентных работ торговой точки");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ЭтаФорма.ДатаЖурнала 	= ТекущаяДата();
	ЭтаФорма.ТорговаяТочка 	= ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ТорговаяТочка"		, ЭтаФорма.ТорговаяТочка);
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ТекДата"			, ЭтаФорма.ДатаЖурнала);
	
	//ЭтаФорма.ПоказыватьПрошедшие = Истина;
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ПоказыватьПрошедшие", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ЖурналРеглРабот.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Дата)
			И Вопрос("Уже указана дата (факт.). Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ТорговаяТочка"		, ТекДанные.ТорговаяТочка);
	СтруктураЗаписи.Вставить("Контрагент"			, ТекДанные.Контрагент);
	СтруктураЗаписи.Вставить("Услуга"				, ТекДанные.Услуга);
	СтруктураЗаписи.Вставить("ДатаНачалаПериода"	, ТекДанные.ДатаНачалаПериода);
	СтруктураЗаписи.Вставить("ДатаОкончанияПериода"	, ТекДанные.ДатаОкончанияПериода);
	мКлючЗаписи = ПолучитьКлючЗаписиРегистраЖурнала(СтруктураЗаписи);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", мКлючЗаписи);
	ОткрытьФормуМодально("РегистрСведений.ЖурналРегламентныхРаботВМагазинах.ФормаЗаписи", СтруктураПараметров);

    Элементы.ЖурналРеглРабот.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЖурнал(Команда)

	ФормаНового = ПолучитьФорму("РегистрСведений.ЖурналРегламентныхРаботВМагазинах.Форма.ФормаЗаписи");
	ФормаНового.Запись.ТорговаяТочка 		= ЭтаФорма.ТорговаяТочка;
	ФормаНового.Запись.ДатаНачалаПериода 	= ЭтаФорма.ДатаЖурнала;
	ФормаНового.Запись.ДатаОкончанияПериода = ЭтаФорма.ДатаЖурнала;
	ФормаНового.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНаступившиеПриИзменении(Элемент)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Обновление списка регламентных работ торговой точки (с прошедшими)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ПоказыватьПрошедшие", ?(ЭтаФорма.ПоказыватьПрошедшие, 1, 0));
    Элементы.ЖурналРеглРабот.Обновить();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЖурналаПриИзменении(Элемент)
	
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ТекДата", ЭтаФорма.ДатаЖурнала);
    Элементы.ЖурналРеглРабот.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаПриИзменении(Элемент)
	ЭтаФорма.ЖурналРеглРабот.Параметры.УстановитьЗначениеПараметра("ТорговаяТочка"		, ЭтаФорма.ТорговаяТочка);
    Элементы.ЖурналРеглРабот.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЕстьФотографииПриИзменении(Элемент)
	УстановитьЭлементОтбораДинамическогоСписка(ЖурналРеглРабот, "Фотографий", 0, 
	ВидСравненияКомпоновкиДанных.Больше, "Фотографий", ЕстьФотографии);	
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
	ОтборДинамическогоСписка,
	ИмяПоля,
	ПравоеЗначение,
	ВидСравнения,
	Представление,
	Использование,
	РежимОтображения,
	ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

&НаКлиенте
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции
