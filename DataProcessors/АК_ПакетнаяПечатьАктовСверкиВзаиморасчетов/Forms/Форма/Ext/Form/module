
Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	ПроставитьРаспечатан = (Вопрос("Проставить признак ""Распечатан"" для новых вложений?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да);
	Печать(Истина);
КонецПроцедуры

Процедура КоманднаяПанель1Действие(Кнопка)
	СнятьУстановитьГалки(Истина);
КонецПроцедуры

Процедура СнятьУстановитьГалки(ЗначениеФлага)
	Для Каждого Стр Из Документы Цикл
		Стр.Печатать = ЗначениеФлага;	
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1СнятьФлажки(Кнопка)
	СнятьУстановитьГалки(Ложь);
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть()
	Документы.Очистить();
	РезультатЗапроса = РеузльтатЗапроса();
	Если НЕ РезультатЗапроса = Неопределено Тогда
		Документы.Загрузить(РезультатЗапроса);
	КонецЕсли;
КонецПроцедуры

Функция РеузльтатЗапроса()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Документ,
	|	АктСверкиВзаиморасчетов.ВерсияДанных,
	|	АктСверкиВзаиморасчетов.ПометкаУдаления,
	|	АктСверкиВзаиморасчетов.Номер,
	|	АктСверкиВзаиморасчетов.Дата,
	|	АктСверкиВзаиморасчетов.Проведен,
	|	АктСверкиВзаиморасчетов.Организация,
	|	АктСверкиВзаиморасчетов.Контрагент,
	|	АктСверкиВзаиморасчетов.ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания,
	|	ВЫРАЗИТЬ(АктСверкиВзаиморасчетов.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	АктСверкиВзаиморасчетов.Ответственный,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение,
	|	АктСверкиВзаиморасчетов.СверкаСогласована,
	|	АктСверкиВзаиморасчетов.ТорговаяТочка,
	|	АктСверкиВзаиморасчетов.СвереноСБухгалтерией,
	|	АктСверкиВзаиморасчетов.ЕстьВложения,
	|	МАКСИМУМ(ЕСТЬNULL(НЕ ХранилищеДополнительнойИнформации.Распечатан, ЛОЖЬ)) КАК ЕстьНовыеВложения
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|		ПО АктСверкиВзаиморасчетов.Ссылка = ХранилищеДополнительнойИнформации.Объект
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачПериода И ВЫБОР
	|			КОГДА &КонПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(2099, 1, 1)
	|			ИНАЧЕ &КонПериода
	|		КОНЕЦ
	|	И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	АктСверкиВзаиморасчетов.Ссылка,
	|	АктСверкиВзаиморасчетов.ВерсияДанных,
	|	АктСверкиВзаиморасчетов.ПометкаУдаления,
	|	АктСверкиВзаиморасчетов.Номер,
	|	АктСверкиВзаиморасчетов.Дата,
	|	АктСверкиВзаиморасчетов.Проведен,
	|	АктСверкиВзаиморасчетов.Организация,
	|	АктСверкиВзаиморасчетов.Контрагент,
	|	АктСверкиВзаиморасчетов.ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания,
	|	ВЫРАЗИТЬ(АктСверкиВзаиморасчетов.Комментарий КАК СТРОКА(1000)),
	|	АктСверкиВзаиморасчетов.Ответственный,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение,
	|	АктСверкиВзаиморасчетов.СверкаСогласована,
	|	АктСверкиВзаиморасчетов.ТорговаяТочка,
	|	АктСверкиВзаиморасчетов.СвереноСБухгалтерией,
	|	АктСверкиВзаиморасчетов.ЕстьВложения";
	возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура НачПериодаПриИзменении(Элемент)
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура КонПериодаПриИзменении(Элемент)
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура ДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	УстановитьОтображениеОтборов();
КонецПроцедуры

Процедура УстановитьОтображениеОтборов()
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Использование Тогда
		ВсеВложения = 2;
	Иначе
		ВсеВложения = Число(ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Значение);
	КонецЕсли;
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Использование Тогда
		ВсеСогласованные = 2;
	Иначе
		ВсеСогласованные = Число(ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Значение);
	КонецЕсли;
	Если НЕ ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Использование Тогда
		ВсеНовые = 2;
	Иначе
		ВсеНовые = Число(ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ВсеСогласованныеПриИзменении(Элемент)	
	Если ВсеСогласованные = 2 Тогда
		ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Использование = Ложь;
	Иначе
		ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Использование = Истина;
		ЭлементыФормы.Документы.ОтборСтрок.СверкаСогласована.Значение = Булево(ВсеСогласованные);
	КонецЕсли;	
КонецПроцедуры

Процедура ВсеВложенияПриИзменении(Элемент)
	Если ВсеВложения = 2 Тогда
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Использование = Ложь;
	Иначе
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Использование = Истина;
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьВложения.Значение = Булево(ВсеВложения);
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура Печать(ПечатьСразу)
	ОтборСтрок = ЭлементыФормы.Документы.ОтборСтрок;
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Документы);	
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если ЭлементОтбора.Использование Тогда
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя);
			НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение = ЭлементОтбора.Значение;
			НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
			НовыйОтбор.Использование = ЭлементОтбора.Использование;
		КонецЕсли;
	КонецЦикла;
	НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Печатать");
	НовыйОтбор.Значение = Истина;
	НовыйОтбор.Использование = Истина;
	ПостроительЗапроса.Выполнить();
	ТаблицаИтог = ПостроительЗапроса.Результат.Выгрузить();	
	
	//Таблица изображений
	Если НЕ ВсеВложения = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОбъектов",ТаблицаИтог.ВыгрузитьКолонку("Документ"));
		Запрос.УстановитьПараметр("ПечатьРаспечатаных",ПечатьРаспечатаных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ВерсияДанных,
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
		|	ХранилищеДополнительнойИнформации.Предопределенный,
		|	ХранилищеДополнительнойИнформации.Наименование,
		|	ХранилищеДополнительнойИнформации.ВидДанных,
		|	ХранилищеДополнительнойИнформации.ИмяФайла,
		|	ХранилищеДополнительнойИнформации.Объект,
		|	ХранилищеДополнительнойИнформации.Хранилище,
		|	ХранилищеДополнительнойИнформации.ТекстФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект В(&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ПечатьРаспечатаных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ХранилищеДополнительнойИнформации.Распечатан = ЛОЖЬ
		|		КОНЕЦ";
		ТаблицаИзображений = Запрос.Выполнить().Выгрузить();
	Иначе 
		ТаблицаИзображений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ из ТаблицаИтог Цикл 
		Если НЕ СтрокаТЧ.ЕстьВложения Тогда
			Обкт = СтрокаТЧ.Документ.ПолучитьОбъект();
			Обкт.Печать("АктСверки",,ПечатьСразу);
		Иначе 
			СтрокиИзображений = ТаблицаИзображений.НайтиСтроки(Новый Структура("Объект", СтрокаТЧ.Документ));
			Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
				ПечатьФайла(СтрокаИзображения.Ссылка, ПечатьСразу);	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ПроставитьРаспечатан Тогда
		ПодключитьОбработчикОжидания("ПроставитьРаспечатан",1,Истина);	
	КонецЕсли;
КонецПроцедуры

Процедура ПроставитьРаспечатан()
	ОтборСтрок = ЭлементыФормы.Документы.ОтборСтрок;
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Документы);	
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если ЭлементОтбора.Использование или ЭлементОтбора.Имя="ЕстьВложения" Тогда
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя);
			НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение = ?(ЭлементОтбора.Имя="ЕстьВложения",Истина,ЭлементОтбора.Значение);
			НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
			НовыйОтбор.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Печатать");
	НовыйОтбор.Значение = Истина;
	НовыйОтбор.Использование = Истина;
	ПостроительЗапроса.Выполнить();
	ТаблицаИтог = ПостроительЗапроса.Результат.Выгрузить();	
	
	//Таблица изображений
	Если НЕ ВсеВложения = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОбъектов",ТаблицаИтог.ВыгрузитьКолонку("Документ"));
		Запрос.УстановитьПараметр("ПечатьРаспечатаных",ПечатьРаспечатаных); 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ВерсияДанных,
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
		|	ХранилищеДополнительнойИнформации.Предопределенный,
		|	ХранилищеДополнительнойИнформации.Наименование,
		|	ХранилищеДополнительнойИнформации.ВидДанных,
		|	ХранилищеДополнительнойИнформации.ИмяФайла,
		|	ХранилищеДополнительнойИнформации.Объект,
		|	ХранилищеДополнительнойИнформации.Хранилище,
		|	ХранилищеДополнительнойИнформации.ТекстФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект В(&МассивОбъектов)
		|	И ВЫБОР
		|			КОГДА &ПечатьРаспечатаных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ХранилищеДополнительнойИнформации.Распечатан = ЛОЖЬ
		|		КОНЕЦ";
		ТаблицаИзображений = Запрос.Выполнить().Выгрузить();
	Иначе 
		ТаблицаИзображений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ из ТаблицаИтог Цикл 
		СтрокиИзображений = ТаблицаИзображений.НайтиСтроки(Новый Структура("Объект", СтрокаТЧ.Документ));
		Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
			ВложениеОбкт = СтрокаИзображения.Ссылка.ПолучитьОбъект();
			ВложениеОбкт.Распечатан = Истина;
			ВложениеОбкт.ДатаПечати = ТекущаяДата();
			ВложениеОбкт.ОтветственныйПечати = ПараметрыСеанса.ТекущийПользователь;
			ВложениеОбкт.Записать();
		КонецЦикла;	
	КонецЦикла;
	
	РезультатЗапроса = РеузльтатЗапроса();
	Если НЕ РезультатЗапроса = Неопределено Тогда
		Документы.ЗагрузитьКолонку(РезультатЗапроса.ВыгрузитьКолонку("ЕстьНовыеВложения"),"ЕстьНовыеВложения");
	КонецЕсли;
КонецПроцедуры
	
Процедура ПечатьНажатие(Элемент)
	ПроставитьРаспечатан = (Вопрос("Проставить признак ""Распечатан"" для новых вложений?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да);
	Печать(Ложь);
КонецПроцедуры

Процедура ПечатьФайла(СсылкаФайл, ПечатьСразу) Экспорт
	
	пИмяФайла = СсылкаФайл.ИмяФайла;
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".html") > 0 Тогда	
		пПрограмма = """C:\Program Files (x86)\Internet Explorer\iexplore.exe"" /p ""пИмяФайла""";
		пПрограмма = """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" /p ""пИмяФайла""";
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат;
	КонецЕсли;
	ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога();
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
    ДанныеВХранилище = СсылкаФайл.Хранилище.Получить();
	Если ДанныеВХранилище = Неопределено Тогда
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СсылкаФайл.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(СсылкаФайл.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		пХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	Иначе	
		пХранилище = СсылкаФайл.Хранилище;
	КонецЕсли;	
	//ДанныеВХранилище = пХранилище.Получить();
	Если РаботаСФайлами.СохранитьФайлНаДиске(пХранилище, ИмяВременногоФайла, Ложь, "", Ложь) Тогда
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		Если ПечатьСразу Тогда
			ЗапуститьПриложение(пПрограмма);
		иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ЭлементыФормы.Документы.ТекущиеДанные.Документ);
КонецПроцедуры

Процедура ДокументыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = ЭлементыФормы.Документы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЗначениеОтбора = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка();
	иначе
		ЗначениеОтбора = ТекущиеДанные.Документ;
	КонецЕсли;
	Вложения.Отбор.Объект.Значение = ЗначениеОтбора;
	Вложения.Отбор.Объект.Использование = Истина;
КонецПроцедуры

Процедура ВложенияПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Оформление Из ОформленияСтрок Цикл
		Если НЕ Оформление.ДанныеСтроки.Распечатан Тогда 
			Оформление.Шрифт = Новый Шрифт(,,истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВсеНовыеПриИзменении(Элемент)
	Если ВсеНовые = 2 Тогда
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Использование = Ложь;
	Иначе
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Использование = Истина;
		ЭлементыФормы.Документы.ОтборСтрок.ЕстьНовыеВложения.Значение = Булево(ВсеНовые);
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель1Действие3(Кнопка)
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры

Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Получить расширение файла.
	РасширениеВременногоФайла = Прав(ВыбраннаяСтрока.ИмяФайла, 4);
	
	Если Лев(РасширениеВременногоФайла, 1) = "." Тогда
		// Получить имя временного файла. Установить расширение временного файла.
		РасширениеВременногоФайла = Прав(ВыбраннаяСтрока.ИмяФайла, 3);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
	Иначе
		// Получить имя временного файла с расширением по умолчанию.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	// Сохранить файл на диске. Запустить приложение.
	СохранитьЗапуститьФайл(ВыбраннаяСтрока,ИмяВременногоФайла, Истина);
КонецПроцедуры

// Процедура сохраняет значение реквизита Хранилище (двоичные данные) на диск.
// При необходимости открывает файл с использованием ассоциированного с ним приложения.
//
// Параметры:
//  ИмяВнешнегоФайла - путь, имя файла дле сохранения на диске
//  Запустить - булево, признак запускать ассоциированное с файлом приложение.
//
Процедура СохранитьЗапуститьФайл(ВыбраннаяСтрока,ИмяВнешнегоФайла, Запустить = Ложь)
	
	Обкт = ВыбраннаяСтрока.ПолучитьОбъект();
	// Если не указано имя файла прервать выполнение процедуры
	Если ПустаяСтрока(ИмяВнешнегоФайла) Тогда
		Предупреждение("Не указано имя файла!");
		Возврат;
	КонецЕсли;
	
	// Сохранить файл на диске
	ВнешнийФайл = Обкт.Хранилище.Получить();
	Попытка
		Если ТипЗнч(ВнешнийФайл) <> Тип("ДвоичныеДанные") Тогда
			КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
			Файлы = НайтиФайлы(КаталогСохранения, Строка(Обкт.Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(Обкт.ИмяФайла), Истина);
			Если Файлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВнешнегоФайла);
		Иначе	
			ВнешнийФайл.Записать(ИмяВнешнегоФайла);
		КонецЕсли;	
	Исключение
		Сообщить("Ошибка при сохранении файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// Запустить ассоциированное с файлом приложение. Открыть файл.
	Если Запустить Тогда
		
		Файл = Новый Файл(ИмяВнешнегоФайла);
		
		Если Файл.Существует() Тогда
			Попытка
				ЗапуститьПриложение("explorer " + ИмяВнешнегоФайла);
			Исключение
				Сообщить("Ошибка при запуске файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
		Иначе
			Предупреждение("Не удалось найти файл " + ИмяВнешнегоФайла + " на диске!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапуститьФайл()




