
Процедура УстановитьВидимость()
	
	ЭлементыФормы.Долги.Колонки.Организация.Видимость 	= НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация);
	ЭлементыФормы.Долги.Колонки.Контрагент.Видимость 	= НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент);
	
КонецПроцедуры

Процедура ОбновитьСуммыВПодвалеДолги()
	
	// суммы только для строк долгов, которые "используются"
	обСуммаДолга 			= 0;
	обСуммаКОплате 			= 0;
	обСуммаОплатЗаНеделю 	= 0;
	обСуммаОплатыПоставщика = 0;
	обСуммаОтгрузокЗаНеделю = 0;
	обСуммаОтгрузокЗаПериодОтсрочки = 0;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Долги Цикл
		Если НЕ СтрокаТЧ.Использование Тогда
			Продолжить;
		КонецЕсли;
		обСуммаДолга 			= обСуммаДолга 				+ СтрокаТЧ.СуммаДолга;
		обСуммаКОплате 			= обСуммаКОплате 			+ СтрокаТЧ.СуммаКОплате;
		обСуммаОплатЗаНеделю 	= обСуммаОплатЗаНеделю 		+ СтрокаТЧ.СуммаОплатЗаНеделю;
		обСуммаОплатыПоставщика = обСуммаОплатыПоставщика 	+ СтрокаТЧ.СуммаОплатыПоставщика;
		обСуммаОтгрузокЗаНеделю = обСуммаОтгрузокЗаНеделю 	+ СтрокаТЧ.СуммаОтгрузокЗаНеделю;
		обСуммаОтгрузокЗаПериодОтсрочки = обСуммаОтгрузокЗаПериодОтсрочки + СтрокаТЧ.СуммаОтгрузокЗаПериодОтсрочки;
	КонецЦикла;
	
	// в подвале отображать общие суммы только по таким строкам
	Если ЭлементыФормы.Долги.Колонки["СуммаОтгрузокЗаНеделю"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаОтгрузокЗаНеделю"].ТекстПодвала 	= Строка(обСуммаОтгрузокЗаНеделю);
	КонецЕсли;
	Если ЭлементыФормы.Долги.Колонки["СуммаОплатЗаНеделю"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаОплатЗаНеделю"].ТекстПодвала 		= Строка(обСуммаОплатЗаНеделю);
	КонецЕсли;
	Если ЭлементыФормы.Долги.Колонки["СуммаДолга"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаДолга"].ТекстПодвала 				= Строка(обСуммаДолга);
	КонецЕсли;
	Если ЭлементыФормы.Долги.Колонки["СуммаОтгрузокЗаПериодОтсрочки"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаОтгрузокЗаПериодОтсрочки"].ТекстПодвала = Строка(обСуммаОтгрузокЗаПериодОтсрочки);
	КонецЕсли;
	Если ЭлементыФормы.Долги.Колонки["СуммаКОплате"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаКОплате"].ТекстПодвала 			= Строка(обСуммаКОплате);
	КонецЕсли;
	Если ЭлементыФормы.Долги.Колонки["СуммаОплатыПоставщика"].Видимость Тогда
		ЭлементыФормы.Долги.Колонки["СуммаОплатыПоставщика"].ТекстПодвала 	= Строка(обСуммаОплатыПоставщика);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТЧДолги()
	
	//+++АК VERN 2016.08.19 ИП-00013332.001.00000001 
	//код вынесен в модуль менеджера для совместного использования в обработке "Платежный календарь"
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Дата) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Не указана дата");
		Возврат;
	КонецЕсли;
	
	//
	ЭтотОбъект.Долги.Загрузить(Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ЭтотОбъект.Дата, ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ЭтотОбъект.РежимРаботы));
	
	//---АК VERN 2016.08.19 ИП-00013332.001.00000001 
	
	//+++АК 31.07.2017 sils ИП-00015834
	ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.Дата));
	Для каждого СтрокаТЧ из ЭтотОбъект.Долги Цикл
		//+++АК sils 05.09.2018 ИП-00019634
		//стр1 = ТЗ.Найти(СтрокаТЧ.Контрагент, "Контрагент");
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", СтрокаТЧ.Контрагент);
		Отбор.Вставить("Организация", СтрокаТЧ.Организация);
		МассивСтрок = ТЗ.НайтиСтроки(Отбор);
		стр1 = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			стр1 = МассивСтрок[0];
		Иначе
			//+++АК sils 09.11.2018 ИП-00019634.02
			флЕстьСтрокиСОрганизацией = Ложь;
			МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Контрагент", СтрокаТЧ.Контрагент));
			Для каждого стр из МассивСтрок Цикл
				Если стр.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
					флЕстьСтрокиСОрганизацией = Истина;
				КонецЕсли;
			КонецЦикла;
			Если не флЕстьСтрокиСОрганизацией Тогда
			//---АК
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", СтрокаТЧ.Контрагент);
			Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			МассивСтрок = ТЗ.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 0 Тогда
				стр1 = МассивСтрок[0];
			КонецЕсли;
			//+++АК sils 09.11.2018 ИП-00019634.02
			КонецЕсли;
			//---АК
		КонецЕсли;
		//---АК
		Если стр1 = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если стр1.Подтверждено Тогда
			СтрокаТЧ.СтопОплата 	= Истина;
			СтрокаТЧ.Использование 	= Ложь;
		КонецЕсли;
	КонецЦикла;
	//---АК
	
	ОбновитьСуммыВПодвалеДолги();
	
КонецПроцедуры


Процедура ПриОткрытии()
	УстановитьВидимость();
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьТаблицуДанных(Дата, Организация, Контрагент, РежимРаботы = "ПоставщикиТовара") Экспорт
	//Запрос = Новый Запрос;	
	//Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период"		, КонецДня(Дата));
	СтруктураПараметров.Вставить("Организация"	, Организация);
	
	//+++АК susk
	СтруктураПараметров.Вставить("Контрагент"	, Контрагент);
	
	//ЗапросКонтр = Новый Запрос;
	//ЗапросКонтр.Текст = "ВЫБРАТЬ
	//					|	Контрагенты.Ссылка
	//					|ИЗ
	//					|	Справочник.Контрагенты КАК Контрагенты
	//					|ГДЕ
	//					|	Контрагенты.СтатьяДвиженияДенежныхСредств.Код = ""120110""";
	//					
	//Выборка = ЗапросКонтр.Выполнить().Выбрать();
	//
	//МассивКонтр = Новый Массив;
	//
	//Если НЕ Контрагент.Пустая() Тогда
	//	Если Контрагент.СтатьяДвиженияДенежныхСредств.Код = "120110" Тогда
	//		МассивКонтр.Добавить(Контрагент);
	//	КонецЕсли;
	//Иначе	
	//	Пока Выборка.Следующий() Цикл
	//		МассивКонтр.Добавить(Выборка.Ссылка);
	//	КонецЦикла;
	//КонецЕсли;
	
	//	СтруктураПараметров.Вставить("СписокКонтр", МассивКонтр);
	
	//
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	//
	СтруктураПараметров.Вставить("ВидыСубконто", МассивВидыСубконто);
	
	//
	СтруктураПараметров.Вставить("КонтрагентНеУказан"	, НЕ ЗначениеЗаполнено(Контрагент));
	СтруктураПараметров.Вставить("ОрганизацияНеУказана"	, НЕ ЗначениеЗаполнено(Организация));
	
	СтруктураПараметров.Вставить("СтатьяДДСВРасход"		, Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	//---АК susk
	
	Если РежимРаботы = "ПоставщикиТовара" Тогда
		
		//+++АК пмм 10.06.2017
		
		//
		Счета = Новый Массив;
		Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		Счета.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг);
		
		//
		СтруктураПараметров.Вставить("СчетРасчетовСПоставщиками", Счета);
		
		//
		СтруктураПараметров.Вставить("СчетРасчетовСПоставщикамиДляОплаты"	, ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками);
		
		//---АК пмм 10.06.2017
		
	Иначе
		СтруктураПараметров.Вставить("СчетРасчетовСПоставщиками"			, ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
		СтруктураПараметров.Вставить("СчетРасчетовСПоставщикамиДляОплаты"	, ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	КонецЕсли; 
	
	
	СтруктураПараметров.Вставить("Текст",
	"ВЫБРАТЬ
	|	Таблица.Субконто1 КАК Организация,
	|	Таблица.Субконто2 КАК Контрагент,
	|	-ЕСТЬNULL(Таблица.СуммаОстаток, 0) КАК СуммаДолга,
	|	МАКСИМУМ(ЕСТЬNULL(ОтсрочкаПоОсновнымДоговорам.ДоговорКонтрагента.КоличествоДнейОтсрочки, ДоговорыКонтрагентов.КоличествоДнейОтсрочки)) КАК КоличествоДнейОтсрочки
	|ПОМЕСТИТЬ ВТ_КонтрагентыИОтсрочки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Период,
	|			Счет В (&СчетРасчетовСПоставщиками),
	|			&ВидыСубконто,
	|			ВЫБОР
	|					КОГДА &ОрганизацияНеУказана
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто1 В (&Организация)
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &КонтрагентНеУказан
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&Контрагент)
	|				КОНЕЦ) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(&Период, ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)) КАК ОтсрочкаПоОсновнымДоговорам
	|		ПО Таблица.Субконто1 = ОтсрочкаПоОсновнымДоговорам.Организация
	|			И Таблица.Субконто2 = ОтсрочкаПоОсновнымДоговорам.Контрагент
	|			И (ОтсрочкаПоОсновнымДоговорам.ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.ПоставкаТоваров))
	|			И (ОтсрочкаПоОсновнымДоговорам.ДоговорКонтрагента.СрокДействия > &Период
	|				ИЛИ ОтсрочкаПоОсновнымДоговорам.ДоговорКонтрагента.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|			И (НЕ ОтсрочкаПоОсновнымДоговорам.ДоговорКонтрагента.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Таблица.Субконто1 = ДоговорыКонтрагентов.Организация
	|			И Таблица.Субконто2 = ДоговорыКонтрагентов.Владелец
	|			И (ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.ПоставкаТоваров))
	|			И (ДоговорыКонтрагентов.СрокДействия > &Период
	|				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Субконто1,
	|	Таблица.Субконто2,
	|	-ЕСТЬNULL(Таблица.СуммаОстаток, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.Субконто1 КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(Таблица.Субконто2 КАК Справочник.Контрагенты) КАК Контрагент,
	|	Таблица.Период КАК ПериодДень,
	|	ВЫБОР
	|		КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|			ТОГДА Таблица.СуммаОборотДт + Таблица.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборот,
	|	ВЫБОР
	|		КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|				И НЕ Таблица.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Вспомогательный)
	|			ТОГДА Таблица.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборотКт_Отгрузка,
	|	ВЫБОР
	|		КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|				И НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -7)
	|			ТОГДА Таблица.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборотКт_ЗаНеделю,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -7)
	|				И Таблица.Счет В ИЕРАРХИИ (&СчетРасчетовСПоставщикамиДляОплаты)
	|				И Таблица.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Банк), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Касса))
	|			ТОГДА Таблица.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборотДт_ОплатаЗаНеделю,
	|	ВЫБОР
	|		КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателямиПрочие)
	|				И Таблица.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Банк), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Касса))
	|			ТОГДА Таблица.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборот_ОплатаПоставщика
	|ПОМЕСТИТЬ ТЗ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|			ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -3000),
	|			&Период,
	|			ДЕНЬ,
	|			Счет В (&СчетРасчетовСПоставщиками)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателямиПрочие)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетРасчетовСПоставщикамиДляОплаты),
	|			&ВидыСубконто,
	|			(Субконто1, Субконто2) В
	|				(ВЫБРАТЬ
	|					Таблица.Организация,
	|					Таблица.Контрагент
	|				ИЗ
	|					ВТ_КонтрагентыИОтсрочки КАК Таблица),
	|			,
	|			) КАК Таблица
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|					ТОГДА Таблица.СуммаОборотДт + Таблица.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|						И НЕ Таблица.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Вспомогательный)
	|					ТОГДА Таблица.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА Таблица.Счет В (&СчетРасчетовСПоставщиками)
	|						И НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -7)
	|					ТОГДА Таблица.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -7)
	|						И Таблица.Счет В ИЕРАРХИИ (&СчетРасчетовСПоставщикамиДляОплаты)
	|						И Таблица.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Банк), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Касса))
	|					ТОГДА Таблица.СуммаОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА Таблица.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПокупателямиПрочие)
	|						И Таблица.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Банк), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Касса))
	|					ТОГДА Таблица.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасходИзБанка.Ссылка, ЗНАЧЕНИЕ(Документ.РасходИзБанка.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.РасходИзБанка.ПустаяСсылка)
	|				И Таблица.СуммаКОплате = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.СуммаОтгрузокЗаНеделю,
	|	Таблица.СуммаОплатЗаНеделю,
	|	Таблица.СуммаДолга,
	|	Таблица.СуммаОтгрузокЗаПериодОтсрочки,
	|	Таблица.СуммаКОплате,
	|	ЕСТЬNULL(Таблица.КоличествоДнейОтсрочки, 0) КАК КоличествоДнейОтсрочки,
	|	РасходИзБанка.Ссылка КАК Документ,
	|	РасходИзБанка.СуммаДокумента КАК ОплаченоФакт,
	|	Таблица.СуммаОплатыПоставщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Организация КАК Организация,
	|		Таблица.Контрагент КАК Контрагент,
	|		Таблица.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|		Таблица.СуммаДолга КАК СуммаДолга,
	|		СУММА(ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ТЗ_Обороты.ПериодДень, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -ЕСТЬNULL(Таблица.КоличествоДнейОтсрочки, 0))
	|					ТОГДА ЕСТЬNULL(ТЗ_Обороты.СуммаОборотКт_Отгрузка, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаОтгрузокЗаПериодОтсрочки,
	|		ВЫБОР
	|			КОГДА Таблица.СуммаДолга - СУММА(ВЫБОР
	|						КОГДА НАЧАЛОПЕРИОДА(ТЗ_Обороты.ПериодДень, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -ЕСТЬNULL(Таблица.КоличествоДнейОтсрочки, 0))
	|							ТОГДА ЕСТЬNULL(ТЗ_Обороты.СуммаОборотКт_Отгрузка, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ) > 0
	|				ТОГДА Таблица.СуммаДолга - СУММА(ВЫБОР
	|							КОГДА НАЧАЛОПЕРИОДА(ТЗ_Обороты.ПериодДень, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -ЕСТЬNULL(Таблица.КоличествоДнейОтсрочки, 0))
	|								ТОГДА ЕСТЬNULL(ТЗ_Обороты.СуммаОборотКт_Отгрузка, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаКОплате,
	|		СУММА(ЕСТЬNULL(ТЗ_Обороты.СуммаОборотКт_ЗаНеделю, 0)) КАК СуммаОтгрузокЗаНеделю,
	|		СУММА(ЕСТЬNULL(ТЗ_Обороты.СуммаОборотДт_ОплатаЗаНеделю, 0)) КАК СуммаОплатЗаНеделю,
	|		СУММА(ЕСТЬNULL(ТЗ_Обороты.СуммаОборот_ОплатаПоставщика, 0)) КАК СуммаОплатыПоставщика
	|	ИЗ
	|		ВТ_КонтрагентыИОтсрочки КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Обороты КАК ТЗ_Обороты
	|			ПО Таблица.Организация = ТЗ_Обороты.Организация
	|				И Таблица.Контрагент = ТЗ_Обороты.Контрагент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Организация,
	|		Таблица.Контрагент,
	|		Таблица.КоличествоДнейОтсрочки,
	|		Таблица.СуммаДолга) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзБанка КАК РасходИзБанка
	|		ПО Таблица.Организация = РасходИзБанка.Организация
	|			И Таблица.Контрагент = РасходИзБанка.Контрагент
	|			И (НЕ РасходИзБанка.ПометкаУдаления)
	|			И (НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ))
	|			И (РасходИзБанка.СтатьяДвиженияДенежныхСредств = &СтатьяДДСВРасход)
	|			И (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиУпаковки) В (&СчетРасчетовСПоставщиками)
	|					И РасходИзБанка.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиУпаковки)
	|				ИЛИ ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщиками) В (&СчетРасчетовСПоставщиками)
	|					И РасходИзБанка.СчетУчетаРасчетовСКонтрагентом <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиУпаковки))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент");
	
	Возврат ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выгрузить();
	
КонецФункции



Процедура ДействияФормыКнопкаЗаполнить(Кнопка)
	
	ЗаполнитьТЧДолги();
	
КонецПроцедуры

Процедура СоздатьПлатежныеДокументы(Кнопка)
	
	Если Вопрос("Создать платежные документы?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТабОплаты = Новый ТаблицаЗначений();
	ТабОплаты.Колонки.Добавить("Контрагент");
	ТабОплаты.Колонки.Добавить("Текст");
	
	ТекстСообщения = "";
	
	//АК Павел 2017-01-12 тз.14471{
	ЭтотОбъект.СписокДокументов.Очистить();
	//АК Павел 2017-01-12 }
	
	//
	Для Каждого СтрокаДолги Из ЭтотОбъект.Долги Цикл
		
		Если (НЕ СтрокаДолги.Использование)
				ИЛИ (СтрокаДолги.СуммаКОплате <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если НЕ ЗначениеЗаполнено(СтрокаДолги.Документ) Тогда
			обДок = Документы.РасходИзБанка.СоздатьДокумент();
		Иначе
			обДок = СтрокаДолги.Документ.ПолучитьОбъект();
		КонецЕсли;
		обДок.Дата 				= ТекущаяДата();
		обДок.Организация 		= СтрокаДолги.Организация;
		обДок.СчетОрганизации 	= СтрокаДолги.Организация.ОсновнойБанковскийСчет;
		обДок.ВалютаДокумента 	= Константы.ВалютаРегламентированногоУчета.Получить();
		обДок.ВидОперации 		= Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		обДок.Контрагент 		= СтрокаДолги.Контрагент;
		СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(обДок.ВидОперации);
		
		//+++АК POZM 2018.03.16 ИП-00018101 
		Если ЗначениеЗаполнено(СтрокаДолги.ДоговорПоРасчетамФакторинг) Тогда
			обДок.ДоговорКонтрагента = СтрокаДолги.ДоговорПоРасчетамФакторинг;
		Иначе
			//+++АК POZM 2018.04.23 ИП-00018463
			//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(обДок.ДоговорКонтрагента, обДок.Контрагент, обДок.Организация, СписокВидовДоговора);
			
			//+++АК LAGP 2018.09.14 ИП-00019778 Определение основного договора контрагента по дополнительным параметрам
			//обДок.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(обДок.Организация, обДок.Контрагент, обДок.Дата,СписокВидовДоговора.ВыгрузитьЗначения());
			обДок.ДоговорКонтрагента = УправлениеВзаиморасчетами.ПолучитьОсновнойДоговорКонтрагента(обДок.Организация, обДок.Контрагент, обДок.Дата,СписокВидовДоговора.ВыгрузитьЗначения(), Новый Структура("ТипДоговора", Перечисления.ТипыДоговоровСПоставщиком.ПоставкаТоваров));
			//---АК LAGP
			
			//---АК POZM 
		КонецЕсли;	
		//---АК POZM 
		//+++АК POZM 2018.04.25 ИП-00018469
		СчетКонтра = обДок.ДоговорКонтрагента.БанковскийСчет;
		Если ЗначениеЗаполнено(СчетКонтра) Тогда
			обДок.СчетКонтрагента = СчетКонтра;
		Иначе	
			обДок.СчетКонтрагента 	= ?(ЗначениеЗаполнено(обДок.Контрагент.ОсновнойБанковскийСчет)
										И обДок.Контрагент.ОсновнойБанковскийСчет.Владелец = обДок.Контрагент,
									обДок.Контрагент.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
		КонецЕсли;	
		//---АК POZM 
		
		обДок.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		обДок.СуммаДокумента 	= СтрокаДолги.СуммаКОплате;
		обДок.СчетБанк 			= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		обДок.УстановитьСчетаУчетаБУ();
		обДок.ЦФО 				= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"); //Управление исполнительное
		обДок.ОчередностьПлатежа = 5;
		
		обДок.АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			обДок.Организация, обДок.СчетОрганизации, обДок.Контрагент, обДок.СчетКонтрагента, обДок.ВидОперации, обДок.ПеречислениеВБюджет);
			
			Если НЕ обДок.Контрагент.СтавкаНДС.Пустая() Тогда
				
			//+++АК LAGP 2018.07.16 ИП-00019192 СтавкаНДС берётся из договора. Есть договора с разными ставками.	
			обДок.СтавкаНДС = обДок.Контрагент.СтавкаНДС;
			
			Если ЗначениеЗаполнено(обДок.ДоговорКонтрагента) Тогда
				СтавкаНДСДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(обДок.ДоговорКонтрагента, "СтавкаНДС");
				Если ЗначениеЗаполнено(СтавкаНДСДоговора) Тогда
					обДок.СтавкаНДС = СтавкаНДСДоговора;	
				КонецЕсли;	
			КонецЕсли;	
			//---АК LAGP
			
		КонецЕсли;
		Если НЕ обДок.Контрагент.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			обДок.СтатьяДвиженияДенежныхСредств = обДок.Контрагент.СтатьяДвиженияДенежныхСредств;
			
			//+++АК LAGP 2018.05.31 ИП-00018833 Факторинг. Платежный календарь. Передается СтатьяДДС только из Контрагента, но у ВТБ основная статья не факторинг. Получение статьи ДДС из договора.
			Если ЗначениеЗаполнено(СтрокаДолги.ДоговорПоРасчетамФакторинг) Тогда
				НайденнаяСтатьяДДСДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДолги.ДоговорПоРасчетамФакторинг, "СтатьяДвиженияДенежныхСредств");
				Если ЗначениеЗаполнено(НайденнаяСтатьяДДСДоговораКонтрагента) Тогда
					обДок.СтатьяДвиженияДенежныхСредств = НайденнаяСтатьяДДСДоговораКонтрагента;
				КонецЕсли;						
			КонецЕсли;	
			//---АК LAGP
			
			//+++АК SUVV 2018.02.28 ИП-00017941
			//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.СтатьяДвиженияДенежныхСредств);
			МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(обДок.Дата, обДок.СтатьяДвиженияДенежныхСредств);
			//---АК SUVV
			Если МассивСчетов.Количество() = 1 Тогда
				обДок.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
				
				Для Каждого СтрокаВидСубконто Из обДок.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Организации Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Организация;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.СтатьяДвиженияДенежныхСредств;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.Контрагент;
					ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
						обДок["СубконтоДт" + СтрокаВидСубконто.НомерСтроки] = обДок.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;
		
		обДок.ПересчитатьСуммуНДСДокумент();
			
		обДок.ТекстПлательщика 	= обДок.АвтоЗначенияРеквизитов.ТекстПлательщика;
		обДок.ИННПлательщика 	= обДок.АвтоЗначенияРеквизитов.ИННПлательщика;
		обДок.КПППлательщика 	= обДок.АвтоЗначенияРеквизитов.КПППлательщика;
		
		обДок.ТекстПолучателя 	= обДок.АвтоЗначенияРеквизитов.ТекстПолучателя;
		обДок.ИННПолучателя   	= обДок.АвтоЗначенияРеквизитов.ИННПолучателя;
		обДок.КПППолучателя   	= обДок.АвтоЗначенияРеквизитов.КПППолучателя;
		
		СформироватьНазначениеПлатежа(обДок);
		
		обДок.УстановитьСчетаУчетаБУ();
		
		Если обДок.ДоговорКонтрагента.ПеречислениеВБюджет Тогда
			
			обДок.ПеречислениеВБюджет = Истина;
			Если обДок.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
				обДок.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			Иначе
				обДок.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			КонецЕсли;

			обДок.КодБК		= обДок.ДоговорКонтрагента.КодБК;
			обДок.КодОКТМО	= обДок.ДоговорКонтрагента.КодОКТМО;
			
			
			Если обДок.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
				обДок.СтатусСоставителя   = ?(обДок.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "01", "09");
				обДок.ПоказательОснования = "ТП";
				обДок.ПоказательТипа      = "НС";
				обДок.ПоказательПериода   = "МС." + Формат(Месяц(обДок.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(обДок.Дата), "ЧГ=");
				
			ИначеЕсли обДок.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
				
				обДок.СтатусСоставителя   = ?(обДок.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "06", "17");
				обДок.ПоказательОснования = "ТП";
				обДок.ПоказательТипа      = "НС";
				обДок.ПоказательПериода   = "";
				обДок.ПоказательНомера    = "0";
				
			Иначе
				
				обДок.СтатусСоставителя   = "08";
				обДок.ПоказательОснования = "0";
				обДок.ПоказательТипа      = "0";
				обДок.ПоказательПериода   = "0";
				обДок.ПоказательНомера    = "0";
				
			КонецЕсли;
			
		КонецЕсли;	
		
		обДок.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(обДок.СтатьяДвиженияДенежныхСредств, обДок.ВидОперации);
				
		обДок.Записать(РежимЗаписиДокумента.Проведение);
		
		ОбщегоНазначения.СообщитьИнформациюПользователю("По строке № " + СтрокаДолги.НомерСтроки + " " +
														?(НЕ ЗначениеЗаполнено(СтрокаДолги.Документ), "создан", "перезаполнен") + " документ " + обДок);
		
		СтрокаДолги.Документ = обДок.Ссылка;
		
		СтрокаДоб = ТабОплаты.Найти(обДок.Контрагент, "Контрагент");
		Если СтрокаДоб = Неопределено Тогда
			СтрокаДоб = ТабОплаты.Добавить();
			СтрокаДоб.Контрагент 	= обДок.Контрагент;
			СтрокаДоб.Текст 		= "";
		КонецЕсли;	
		
		СтрокаДоб.Текст = СтрокаДоб.Текст + "-------------------------------------------------------------" + Символы.ПС;
		СтрокаДоб.Текст = СтрокаДоб.Текст + "Дата платежа: " 	+ Формат(обДок.Дата, "ДФ=dd.MM.yyyy") + Символы.ПС;
		СтрокаДоб.Текст = СтрокаДоб.Текст + "Организация: " 	+ обДок.Организация + Символы.ПС;
		СтрокаДоб.Текст = СтрокаДоб.Текст + "Контрагент: " 		+ обДок.Контрагент + Символы.ПС;
		СтрокаДоб.Текст = СтрокаДоб.Текст + "Оплата по счету: " + обДок.СчетКонтрагента + Символы.ПС;
		СтрокаДоб.Текст = СтрокаДоб.Текст + "Сумма оплаты: " 	+ обДок.СуммаДокумента + Символы.ПС + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНазначениеПлатежа(обДок)

	АдресСуммы = Найти(обДок.НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(обДок.НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = обДок.НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" Тогда
		ТекстНазначение = обДок.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию;
		
		Если НЕ обДок.СчетКонтрагента.Пустая() Тогда
			ТекстНазначение = ТекстНазначение + ?(ТекстНазначение = "", "", Символы.ПС + Символы.ВК) + обДок.СчетКонтрагента.ТекстНазначения;
		КонецЕсли;
	КонецЕсли;
	//Если ТекстНазначение = "" Тогда
		//И РасшифровкаПлатежа.Количество() = 1
		//И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		//ТекстНазначение = ТекстНазначение
		//	+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
//			+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	//КонецЕсли;

	ТекстСумма = "Сумма " + Формат(обДок.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(обДок.ВидОперации);
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		ТекстНДС = "";
	
		//ТабНДС=РасшифровкаПлатежа.Выгрузить();
		//ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		//Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
		//	ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(обДок.СтавкаНДС) ИЛИ обДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + обДок.СтавкаНДС + ") " + Формат(обДок.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		//КонецЦикла;
		
		Если обДок.СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		
	КонецЕсли;
	
	обДок.НазначениеПлатежа = СокрЛП(ТекстНазначение) + Символы.ПС + ТекстСумма;

КонецПроцедуры

Процедура ОтметитьВсе(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Долги Цикл
		//+++АК 17.08.2017 sils ИП-00015834
		//СтрокаТЧ.Использование = Истина;
		//+++АК 17.08.2017 sils ИП-00015834
		Если не СтрокаТЧ.СтопОплата Тогда
			СтрокаТЧ.Использование = Истина;
		КонецЕсли;
		//---АК
	КонецЦикла;
	
	ОбновитьСуммыВПодвалеДолги();
	
КонецПроцедуры

Процедура СнятьВсе(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Долги Цикл
		СтрокаТЧ.Использование = Ложь;
	КонецЦикла;
	
	ОбновитьСуммыВПодвалеДолги();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументыОтгрузки(Кнопка)
	
	ТекСтрока = ЭлементыФормы.Долги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("РасшифровкаПоДокументам");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока 	= Макет.ПолучитьОбласть("Строка");
	ОбластьИтоги 	= Макет.ПолучитьОбласть("Итоги");
	
	ОбластьШапка.Параметры.Контрагент = ТекСтрока.Контрагент;
	ТабДокумент.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"	, ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Организация"		, ТекСтрока.Организация);
	Запрос.УстановитьПараметр("Контрагент"		, ТекСтрока.Контрагент);	
	//+++АК POZM 2018.03.21 ИП-00018101 
	Запрос.УстановитьПараметр("ДоговорФК"		, ТекСтрока.ДоговорПоРасчетамФакторинг);	
	Запрос.УстановитьПараметр("СчетРасчетовСПоставщикамиФК", ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг);
	//---АК POZM 
	
	Если ЭтотОбъект.РежимРаботы = "ПоставщикиТовара" Тогда
		Запрос.УстановитьПараметр("СчетРасчетовСПоставщиками", ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	Иначе
		Запрос.УстановитьПараметр("СчетРасчетовСПоставщиками", ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	МАКСИМУМ(ДоговорыКонтрагентов.КоличествоДнейОтсрочки) КАК КоличествоДнейОтсрочки
	|ПОМЕСТИТЬ ВТ_Отсрочки
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ТипДоговора <> ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОборотыДтКт.Регистратор КАК Документ,
	|	СУММА(ФинансовыйОборотыДтКт.СуммаОборот) КАК СуммаКОплате
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(
	|			,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт.Код <> ""00"",
	|			,
	|			СчетКт В ИЕРАРХИИ (&СчетРасчетовСПоставщиками),
	|			,
	|			СубконтоКт1 = &Организация
	|				И СубконтоКт2 = &Контрагент) КАК ФинансовыйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отсрочки КАК Отсрочки
	|		ПО ФинансовыйОборотыДтКт.СубконтоКт1 = Отсрочки.Организация
	|			И ФинансовыйОборотыДтКт.СубконтоКт2 = Отсрочки.Контрагент
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФинансовыйОборотыДтКт.Регистратор.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -ЕСТЬNULL(Отсрочки.КоличествоДнейОтсрочки, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОборотыДтКт.Регистратор
	|
	//+++АК POZM 2018.03.21 ИП-00018101 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФинансовыйОборотыДтКт.Регистратор,
	|	СУММА(ФинансовыйОборотыДтКт.СуммаОборот)
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(
	|			,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт.Код <> ""00"",
	|			,
	|			СчетКт = &СчетРасчетовСПоставщикамиФК,
	|			,
	|			СубконтоКт1 = &Организация
	|				И СубконтоКт2 = &Контрагент И СубконтоКт3 = &ДоговорФК) КАК ФинансовыйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ФинансовыйОборотыДтКт.СубконтоКт3 = ДоговорыКонтрагентов.ФакторинговаяКомпанияДоговор
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФинансовыйОборотыДтКт.Регистратор.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -ЕСТЬNULL(ДоговорыКонтрагентов.КоличествоДнейОтсрочки, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОборотыДтКт.Регистратор";
	//---АК POZM 
				   
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	СуммаРаспределено = 0;
	Пока ВыборкаДокументы.Следующий() Цикл
		ОбластьСтрока.Параметры.Документ = ВыборкаДокументы.Документ;
		
		пСумма = ?(СуммаРаспределено + ВыборкаДокументы.СуммаКОплате <= ТекСтрока.СуммаОтгрузокЗаПериодОтсрочки,
					ВыборкаДокументы.СуммаКОплате,
					ТекСтрока.СуммаОтгрузокЗаПериодОтсрочки - СуммаРаспределено);
		СуммаРаспределено = СуммаРаспределено + пСумма;
		
		ОбластьСтрока.Параметры.СуммаКОплате = пСумма;
		ТабДокумент.Вывести(ОбластьСтрока);
		
		Если СуммаРаспределено = ТекСтрока.СуммаОтгрузокЗаПериодОтсрочки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьИтоги.Параметры.СуммаКОплате = СуммаРаспределено;
	ТабДокумент.Вывести(ОбластьИтоги);
	
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.Показать("Документы к оплате " + ТекСтрока.Контрагент);
	
КонецПроцедуры

Процедура Реестр(Кнопка)
	
	//+++AK ziga 	
	ЗаполнитьТЧДолги(); // ИП-00016535.03
	//---AK ziga 	
	ТЗСтопОплат = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.Дата));
	
	ТЗУпаковка = Обработки.РасчетПлатежейПоставщикам.ПолучитьТаблицуДанных(ЭтотОбъект.Дата, ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, "ПоставщикиУпаковки");
	
	СуммаОплаченоУпаковка = 0;
	Для каждого СтрокаТаблицы Из ТЗУпаковка Цикл
		//+++АК sils 05.09.2018 ИП-00019634
		//стр1 = ТЗСтопОплат.Найти(СтрокаТаблицы.Контрагент, "Контрагент");
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
		Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
		МассивСтрок = ТЗСтопОплат.НайтиСтроки(Отбор);
		стр1 = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			стр1 = МассивСтрок[0];
		Иначе
			//+++АК sils 09.11.2018 ИП-00019634.02
			флЕстьСтрокиСОрганизацией = Ложь;
			МассивСтрок = ТЗСтопОплат.НайтиСтроки(Новый Структура("Контрагент", СтрокаТаблицы.Контрагент));
			Для каждого стр из МассивСтрок Цикл
				Если стр.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
					флЕстьСтрокиСОрганизацией = Истина;
				КонецЕсли;
			КонецЦикла;
			Если не флЕстьСтрокиСОрганизацией Тогда
			//---АК
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
			Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			МассивСтрок = ТЗСтопОплат.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 0 Тогда
				стр1 = МассивСтрок[0];
			КонецЕсли;
			//+++АК sils 09.11.2018 ИП-00019634.02
			КонецЕсли;
			//---АК
		КонецЕсли;
		//---АК
		Если стр1 = Неопределено Тогда
			//+++AK ziga
			//СуммаОплаченоУпаковка = СуммаОплаченоУпаковка + СтрокаТаблицы.ОплаченоФакт;
			 СуммаОплаченоУпаковка = СуммаОплаченоУпаковка + СтрокаТаблицы.СуммаКОплате;
			 //---AK ziga
			Продолжить;
		КонецЕсли;
		Если стр1.Подтверждено Тогда
			Продолжить;
		КонецЕсли;
			//+++AK ziga
			//СуммаОплаченоУпаковка = СуммаОплаченоУпаковка + СтрокаТаблицы.ОплаченоФакт;
			 СуммаОплаченоУпаковка = СуммаОплаченоУпаковка + СтрокаТаблицы.СуммаКОплате;
			 //---AK ziga
	КонецЦикла;
	
	//
	ТЗДолги = ЭтотОбъект.Долги.Выгрузить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗДолги", ТЗДолги);	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЗДолги.Организация КАК Организация,
	|	ТЗДолги.Контрагент КАК Контрагент,
	|	ТЗДолги.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|	ТЗДолги.СтопОплата КАК СтопОплата,
	|	ТЗДолги.СуммаОтгрузокЗаНеделю КАК СуммаОтгрузокЗаНеделю,
	|	ТЗДолги.СуммаОплатЗаНеделю КАК СуммаОплатЗаНеделю,
	|	ТЗДолги.СуммаДолга КАК СуммаДолга,
	|	ТЗДолги.СуммаОтгрузокЗаПериодОтсрочки КАК СуммаОтгрузокЗаПериодОтсрочки,
	|	ТЗДолги.СуммаКОплате КАК СуммаКОплате,
	|	ТЗДолги.ОплаченоФакт КАК ОплаченоФакт
	|ПОМЕСТИТЬ ВТ_Долги
	|ИЗ
	|	&ТЗДолги КАК ТЗДолги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЗДолги.Организация КАК Организация,
	|	ТЗДолги.Контрагент КАК Контрагент,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	СпрКонтрагенты.Наименование КАК КонтрагентНаименование,
	|	ТЗДолги.КоличествоДнейОтсрочки КАК КоличествоДнейОтсрочки,
	|	ТЗДолги.СтопОплата КАК СтопОплата,
	|	СУММА(ТЗДолги.СуммаОтгрузокЗаНеделю) КАК СуммаОтгрузокЗаНеделю,
	|	СУММА(ТЗДолги.СуммаОплатЗаНеделю) КАК СуммаОплатЗаНеделю,
	|	СУММА(ТЗДолги.СуммаДолга) КАК СуммаДолга,
	|	СУММА(ТЗДолги.СуммаОтгрузокЗаПериодОтсрочки) КАК СуммаОтгрузокЗаПериодОтсрочки,
	|	СУММА(ТЗДолги.СуммаКОплате) КАК СуммаКОплате,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТЗДолги.СтопОплата
	//+++AK ziga
	//|				ТОГДА ТЗДолги.ОплаченоФакт
	|				ТОГДА ТЗДолги.СуммаКОплате
	 //---AK ziga
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаченоБезСтопов,
	|	СУММА(ТЗДолги.ОплаченоФакт) КАК ОплаченоФакт
	|ИЗ
	|	ВТ_Долги КАК ТЗДолги
	//+++АК MIND 2017.11.24 оптимизация
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации ПО ТЗДолги.Организация = СпрОрганизации.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты ПО ТЗДолги.Контрагент = СпрКонтрагенты.Ссылка
	//---АК MIND
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗДолги.Организация,
	|	ТЗДолги.Контрагент,
	|	СпрОрганизации.Наименование,
	|	СпрКонтрагенты.Наименование,
	|	ТЗДолги.КоличествоДнейОтсрочки,
	|	ТЗДолги.СтопОплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрОрганизации.Наименование,
	|	СпрКонтрагенты.Наименование,
	|	ТЗДолги.КоличествоДнейОтсрочки
	|ИТОГИ
	|	СУММА(СуммаОтгрузокЗаНеделю),
	|	СУММА(СуммаОплатЗаНеделю),
	|	СУММА(СуммаДолга),
	|	СУММА(СуммаОтгрузокЗаПериодОтсрочки),
	|	СУММА(СуммаКОплате),
	|	СУММА(СуммаОплаченоБезСтопов),
	|	СУММА(ОплаченоФакт)
	|ПО
	|	ОБЩИЕ,
	|	Организация";
	ВыборкаОбщиеИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщиеИтоги.Следующий();
	
	
	////////////////////////////////////////////////
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Реестр");
	
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьПараметр 	= Макет.ПолучитьОбласть("Параметр");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьОрганизация 	= Макет.ПолучитьОбласть("Организация");
	ОбластьКонтрагент 	= Макет.ПолучитьОбласть("Контрагент");
	ОбластьИтоги 		= Макет.ПолучитьОбласть("Итоги");
	
	ОбластьШапка.Параметры.ТоварУпаковка = "Товар  " + Строка(ВыборкаОбщиеИтоги.СуммаОплаченоБезСтопов)
											+ Символы.ПС + "Упаковка  " + Строка(СуммаОплаченоУпаковка)
											+ Символы.ПС + "Общая сумма  " + Строка(ВыборкаОбщиеИтоги.СуммаОплаченоБезСтопов + СуммаОплаченоУпаковка);
	ТабДокумент.Вывести(ОбластьШапка);
	
	ОбластьПараметр.Параметры.СтрокаПараметра = "Период: " + Формат(ЭтотОбъект.Дата, "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьПараметр);
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбластьПараметр.Параметры.СтрокаПараметра = "Организация: " + ЭтотОбъект.Организация;
		ТабДокумент.Вывести(ОбластьПараметр);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ОбластьПараметр.Параметры.СтрокаПараметра = "Контрагент: " + ЭтотОбъект.Контрагент;
		ТабДокумент.Вывести(ОбластьПараметр);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	
	//
	ОбластьИтоги.Параметры.Заполнить(ВыборкаОбщиеИтоги);
	ВыборкаОрганизация = ВыборкаОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ОбластьОрганизация.Параметры.Заполнить(ВыборкаОрганизация);
		ТабДокумент.Вывести(ОбластьОрганизация);
		
		ВыборкаДокументы = ВыборкаОрганизация.Выбрать();
		Пока ВыборкаДокументы.Следующий() Цикл
			ОбластьКонтрагент.Параметры.Заполнить(ВыборкаДокументы);
			ОбластьОформления = ТабДокумент.Вывести(ОбластьКонтрагент);
			ТекОбласть = ТабДокумент.Область(ОбластьОформления.Верх, 2, ОбластьОформления.Низ, 9);
			Если ВыборкаДокументы.СтопОплата = Истина Тогда
				ТекОбласть.ЦветФона = Новый Цвет(220, 220, 220);  			// серый фон
				ТекОбласть.Шрифт 	= Новый Шрифт("Arial", 8,,,, Истина);  	// зачеркнутый шрифт
			Иначе
				ТекОбласть.ЦветФона = Новый Цвет(255, 255, 255);  			// белый фон
				ТекОбласть.Шрифт 	= Новый Шрифт("Arial", 8);  
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьИтоги);

	//
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.Показать("Документы к оплате");
	
КонецПроцедуры

Процедура КарточкаСчета(Кнопка)
	
	ТекСтрока = ЭлементыФормы.Долги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	пОтчет = Отчеты.КарточкаСчетаФинансовый.Создать();	
	
	ВыбраннаяРасшифровка = Новый Соответствие;
	ВыбраннаяРасшифровка.Вставить("Организация"			, Справочники.Организации.ПустаяСсылка());
	ВыбраннаяРасшифровка.Вставить("ДатаНач"				, ЭтотОбъект.Дата - 86400 * ТекСтрока.КоличествоДнейОтсрочки);
	ВыбраннаяРасшифровка.Вставить("ДатаКон"				, ЭтотОбъект.Дата);
	ВыбраннаяРасшифровка.Вставить("ПоказыватьЗаголовок"	, Ложь);
	ВыбраннаяРасшифровка.Вставить("ИмяОбъекта"			, "КарточкаСчетаФинансовый");
	Если ЭтотОбъект.РежимРаботы = "ПоставщикиТовара" Тогда
		ВыбраннаяРасшифровка.Вставить("Счет"			, ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	Иначе
		ВыбраннаяРасшифровка.Вставить("Счет"			, ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	КонецЕсли; 
	
	//
	тзОтбор = Новый ТаблицаЗначений;
	тзОтбор.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	тзОтбор.Колонки.Добавить("Значение");
	тзОтбор.Колонки.Добавить("ЗначениеС");
	тзОтбор.Колонки.Добавить("ЗначениеПо");
	тзОтбор.Колонки.Добавить("Имя");
	тзОтбор.Колонки.Добавить("Использование");
	тзОтбор.Колонки.Добавить("Представление");
	тзОтбор.Колонки.Добавить("ПутьКДанным");
	тзОтбор.Колонки.Добавить("ТипЗначения");
	
	//НСтрока = тзОтбор.Добавить();
	//НСтрока.ВидСравнения = ВидСравнения.Равно;
	//НСтрока.Значение = Справочники.Организации.ПустаяСсылка();
	//НСтрока.ЗначениеС = Справочники.Организации.ПустаяСсылка();
	//НСтрока.ЗначениеПо = Справочники.Организации.ПустаяСсылка();
	//НСтрока.Имя = "Субконто1";
	//НСтрока.Использование = Ложь;
	//НСтрока.Представление = "Организации";
	//НСтрока.ПутьКДанным = "Субконто1";
	//НСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//
	//НСтрока = тзОтбор.Добавить();
	//НСтрока.ВидСравнения = ВидСравнения.Равно;
	//НСтрока.Значение = Справочники.Контрагенты.ПустаяСсылка();
	//НСтрока.ЗначениеС = Справочники.Контрагенты.ПустаяСсылка();
	//НСтрока.ЗначениеПо = Справочники.Контрагенты.ПустаяСсылка();
	//НСтрока.Имя = "Субконто2";
	//НСтрока.Использование = Ложь;
	//НСтрока.Представление = "Контрагенты";
	//НСтрока.ПутьКДанным = "Субконто2";
	//НСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	НСтрока = тзОтбор.Добавить();
	НСтрока.ВидСравнения 	= ВидСравнения.Равно;
	НСтрока.Значение 		= ТекСтрока.Организация;
	НСтрока.ЗначениеС 		= ТекСтрока.Организация;
	НСтрока.ЗначениеПо 		= ТекСтрока.Организация;
	НСтрока.Имя 			= "Субконто1";
	НСтрока.Использование 	= Истина;
	НСтрока.Представление 	= "Организации";
	НСтрока.ПутьКДанным 	= "Субконто1";
	НСтрока.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	НСтрока = тзОтбор.Добавить();
	НСтрока.ВидСравнения 	= ВидСравнения.Равно;
	НСтрока.Значение 		= ТекСтрока.Контрагент;
	НСтрока.ЗначениеС 		= ТекСтрока.Контрагент;
	НСтрока.ЗначениеПо 		= ТекСтрока.Контрагент;
	НСтрока.Имя 			= "Субконто2";
	НСтрока.Использование 	= Истина;
	НСтрока.Представление 	= "Контрагенты";
	НСтрока.ПутьКДанным 	= "Субконто2";
	НСтрока.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ВыбраннаяРасшифровка.Вставить("Отбор", тзОтбор);
	
	тзОтбор.Очистить();
	
	НСтрока = тзОтбор.Добавить();
	НСтрока.ВидСравнения 	= ВидСравнения.Равно;
	НСтрока.Значение 		= ТекСтрока.Организация;
	НСтрока.ЗначениеС 		= ТекСтрока.Организация;
	НСтрока.ЗначениеПо 		= ТекСтрока.Организация;
	НСтрока.Имя 			= "Субконто1";
	НСтрока.Использование 	= Истина;
	НСтрока.Представление 	= "Организации";
	НСтрока.ПутьКДанным 	= "Субконто1";
	НСтрока.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	НСтрока = тзОтбор.Добавить();
	НСтрока.ВидСравнения 	= ВидСравнения.Равно;
	НСтрока.Значение 		= ТекСтрока.Контрагент;
	НСтрока.ЗначениеС 		= ТекСтрока.Контрагент;
	НСтрока.ЗначениеПо 		= ТекСтрока.Контрагент;
	НСтрока.Имя 			= "Субконто2";
	НСтрока.Использование 	= Истина;
	НСтрока.Представление 	= "Контрагенты";
	НСтрока.ПутьКДанным 	= "Субконто2";
	НСтрока.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ВыбраннаяРасшифровка.Вставить("ДополнительныеОтборы", тзОтбор);
	
	пОтчет.Настроить(ВыбраннаяРасшифровка);
	
	//
	ФормаОтчета = пОтчет.ПолучитьФорму(,, Новый УникальныйИдентификатор());	
	ФормаОтчета.ПоказыватьЗаголовок = Истина;
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыВыполнитьРассылкуУведомлений(Кнопка)
	
	//АК Павел 2017-01-12 тз.14471{
	ЭтотОбъект.СписокДокументов.Очистить();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Долги Цикл
		
		обДок = СтрокаТЧ.Документ;
		Если НЕ ЗначениеЗаполнено(обДок) Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаДокумента = ЭтотОбъект.СписокДокументов.Добавить();
		СтрокаДокумента.Контрагент 	= обДок.Контрагент;
		СтрокаДокумента.Счет 		= обДок.СчетКонтрагента;
		СтрокаДокумента.Сумма 		= обДок.СуммаДокумента;
		СтрокаДокумента.Организация = обДок.Организация;
		СтрокаДокумента.Ссылка      = обДок.Ссылка;
		
	КонецЦикла;
	
	//
	Если ЭтотОбъект.СписокДокументов.Количество() > 0 Тогда
		
		ФормаРассылки = Обработки.РасчетПлатежейПоставщикам.ПолучитьФорму("ФормаРассылки");
		Для каждого СтрокаТЧ Из ЭтотОбъект.СписокДокументов Цикл
			НоваяСтрока = ФормаРассылки.СписокДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла; 
		
		ФормаРассылки.ОткрытьМодально();
		
	КонецЕсли; 
	//АК Павел 2017-01-12 }
	
КонецПроцедуры

Процедура ДолгиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыВПодвалеДолги();
	
КонецПроцедуры

//+++АК 31.07.2017 sils ИП-00015834
Процедура ДолгиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ТекКонтрагент = ДанныеСтроки.Контрагент;
	
	Если ДанныеСтроки.СтопОплата Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(220, 220, 220);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДолгиПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Использование" Тогда
		ТекСтр = Элемент.ТекущиеДанные;
		Если ТекСтр.СтопОплата Тогда
			ТекСтр.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//---АК

РежимРаботы = "ПоставщикиТовара";