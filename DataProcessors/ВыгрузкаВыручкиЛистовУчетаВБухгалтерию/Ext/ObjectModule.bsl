Перем СоединениеСБазой;

Функция ВыполнитьПодключениеКБазе()
	
	//ИмяСервераИнформационнойБазыДляПодключения 	= "srv-sql02:1641";
	//ИмяИнформационнойБазыНаСервереДляПодключения 	= "BP_CORP_Deb";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Подключение к информационной базе");
	#КонецЕсли
	
	Попытка
		
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = "Srvr="""+СокрЛП(ИмяСервераИнформационнойБазыДляПодключения)+""";Ref="""+СокрЛП(ИмяИнформационнойБазыНаСервереДляПодключения)+""";Usr="""+СокрЛП(ПользовательИнформационнойБазыДляПодключения)+""";Pwd="+ПарольИнформационнойБазыДляПодключения+";";
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИмяККМИзПериодическихПривязок(ТабПривязки, Дата, ТорговаяТочка, Терминал)
	
	СтрокиПривязки = ТабПривязки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Терминал", ТорговаяТочка, Терминал));
	Если СтрокиПривязки.Количество() = 0 Тогда
		Возврат "";
	Иначе
		ТабРасчеты = Новый ТаблицаЗначений();
		ТабРасчеты.Колонки.Добавить("ИмяККМ");
		ТабРасчеты.Колонки.Добавить("РазностьДат");
		Для Каждого СтрокаПривязка Из СтрокиПривязки Цикл
			Если СтрокаПривязка.Дата > НачалоДня(Дата) Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабРасчеты.Добавить();
			СтрокаДоб.ИмяККМ = СтрокаПривязка.ИмяККМ;
			СтрокаДоб.РазностьДат = НачалоДня(Дата) - СтрокаПривязка.Дата;
		КонецЦикла;
		ТабРасчеты.Сортировать("РазностьДат");
		Если ТабРасчеты.Количество() = 0 Тогда
			Возврат "";
		Иначе
			Возврат ТабРасчеты[0].ИмяККМ;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Процедура ВыполнитьВыгрузку_Вкусвилл()
	
	Построитель = Новый ПостроительОтчета();
	Построитель.Текст = "ВЫБРАТЬ
	                    |	Организации.Ссылка,
	                    |	Организации.ИНН
	                    |ИЗ
	                    |	Справочник.Организации КАК Организации
	                    |ГДЕ
	                    |	Организации.Ссылка = &ОргВкусвилл
	                    |{ГДЕ
	                    |	Организации.Ссылка.* КАК Организация}";
						
	Построитель.УстановитьНастройки(НастройкиПостроителяДляОтбора);
	Построитель.Параметры.Вставить("ОргВкусвилл", Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	
	Построитель.Выполнить();
	ТабОрг = Построитель.Результат.Выгрузить();
	
	Если ТабОрг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДДСБух = СоединениеСБазой.Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000007");
	ОргВкусвиллБух = СоединениеСБазой.Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ВидОплатыБезналБух = Неопределено;
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ВидыОплатОрганизаций.Ссылка
					|ИЗ
					|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
					|ГДЕ
					|	ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ
					|	И ВидыОплатОрганизаций.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ОргВкусвиллБух);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидОплатыБезналБух = Выборка.Ссылка;
	КонецЕсли;
	ВидОплатыБезналБух = СоединениеСБазой.Справочники.ВидыОплатОрганизаций.НайтиПоНаименованию("Платежная карта");
	НоменклатураБух = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Все товары");
	НоменклатураБухСовмДеятельность = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Совместная деятельность");
	НоменклатурнаяГруппаСовмДеятельность = СоединениеСБазой.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Совместная деятельность");
	КонтрагентБух = СоединениеСБазой.Справочники.Контрагенты.НайтиПоНаименованию("Розничный покупатель");
	ДоговорРозничныйБух = Неопределено;
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", КонтрагентБух);
	Запрос.УстановитьПараметр("ВидДоговора", СоединениеСБазой.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("Организация", ОргВкусвиллБух);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорРозничныйБух = Выборка.Ссылка;
	КонецЕсли;	
		
    Построитель = Новый ПостроительОтчета();
	Построитель.Текст = "ВЫБРАТЬ
	                    |	СтруктурныеЕдиницы.Ссылка,
	                    |	СтруктурныеЕдиницы.НомерТочки,
	                    |	СтруктурныеЕдиницы.СовместнаяДеятельность
	                    |ИЗ
	                    |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                    |ГДЕ
	                    |	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	                    |	И СтруктурныеЕдиницы.НомерТочки > 0
	                    |{ГДЕ
	                    |	СтруктурныеЕдиницы.Ссылка.* КАК СтруктурнаяЕдиница}";
						
	Построитель.УстановитьНастройки(НастройкиПостроителяДляОтбора);
	
	Построитель.Выполнить();
	ТабПодр = Построитель.Результат.Выгрузить();
	
	
	СтрокаОтбораПодразделений = "-99999";
	Для Каждого СтрЕдиница Из ТабПодр Цикл
		Если НЕ ЗначениеЗаполнено(СтрЕдиница.НомерТочки) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаОтбораПодразделений = СтрокаОтбораПодразделений + ", " + Формат(СтрЕдиница.НомерТочки, "ЧН=; ЧГ=0");
	КонецЦикла;	
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	//ADOСоединение.Open();
	
	СтрЗапрос = "SELECT QntT.TT,
				|	CAST(QntT.CloseDate as datetime) as CloseDate,
				|	QntT.NameKKM,
				|	QntT.Qnt,
				|	QntT.SummaPoNDS10,
				|	QntT.SummaPoNDS18
				|FROM (SELECT dbo_Checks.ShopNo as TT, dbo_CheckLine.date_ch as CloseDate, 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as NameKKM,
				|				   				SUM(CASE WHEN dbo_Checks.BaseSum < 0 THEN dbo_CheckLine.Quantity * (-1) ELSE dbo_CheckLine.Quantity END) as Qnt, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN dbo_CheckLine.BaseSum ELSE 0 END) as SummaPoNDS10, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN dbo_CheckLine.BaseSum ELSE 0 END) as SummaPoNDS18 
				|				   			FROM SMS_Union.dbo.CheckLine as dbo_CheckLine (nolock) 
				|				   			INNER JOIN SMS_Union.dbo.Checks as dbo_Checks (nolock) ON dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
				|							LEFT OUTER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock) ON dbo_CheckLine.id_tov_cl = ArticleBin2UID.id_tov
				|				   			WHERE dbo_CheckLine.date_ch >= '"+Формат(ДатаНач,"ДФ=yyyy-MM-dd")+"' and dbo_CheckLine.date_ch <= '"+Формат(ДатаКон,"ДФ=yyyy-MM-dd")+"' and dbo_Checks.ShopNo IN (" + СтрокаОтбораПодразделений + ")
				|				   			GROUP BY dbo_Checks.ShopNo, dbo_CheckLine.date_ch, 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1)))) as QntT
				|ORDER BY QntT.CloseDate";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ЗапросПодр = СоединениеСБазой.NewObject("Запрос");
	ЗапросПодр.Текст = "ВЫБРАТЬ
	                   |	ПодразделенияОрганизаций.Ссылка,
	                   |	ПодразделенияОрганизаций.Префикс
	                   |ИЗ
	                   |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					   |ГДЕ
					   |	ПодразделенияОрганизаций.Владелец = &Организация";
					   
	ЗапросПодр.УстановитьПараметр("Организация", ОргВкусвиллБух);
	
	ТабПодрБух = ЗапросПодр.Выполнить().Выгрузить();
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ИмяККМ", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаВозвратов", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаБезнал", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПоНДС10", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПоНДС18", Новый ОписаниеТипов("Число"));
	
	Попытка //если набор пустой, то выдает ошибку
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			СтрокаПодр = ТабПодр.Найти(Rs.Fields("TT").Value, "НомерТочки");
			Если СтрокаПодр = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не найдено подразделение по номеру магазина: " + Формат(Rs.Fields("TT").Value, "ЧГ=0") + " и указанной организации");
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.ИмяККМ = СокрЛП(Rs.Fields("NameKKM").Value);
			СтрокаДоб.Подразделение = СтрокаПодр.Ссылка;
			СтрокаДоб.Дата = Rs.Fields("CloseDate").Value;
			СтрокаДоб.Количество = Rs.Fields("Qnt").Value;
			СтрокаДоб.СуммаПоНДС10 = Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаПоНДС18 = Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаОплатыПоБанковскимКартам.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаОплатыПоБанковскимКартам.Терминал.ID_SQL КАК ИмяККМ,
	               |	СУММА(ЛистУчетаОплатыПоБанковскимКартам.Сумма + ЛистУчетаОплатыПоБанковскимКартам.СуммаДоставка) КАК Сумма,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ЛистУчетаОплатыПоБанковскимКартам.Терминал,
	               |	ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл
	               |ИЗ
	               |	Документ.ЛистУчета.ОплатыПоБанковскимКартам КАК ЛистУчетаОплатыПоБанковскимКартам
	               |ГДЕ
	               |	ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаОплатыПоБанковскимКартам.Ссылка.ТорговаяТочка В(&ТорговыеТочки)
	               |	И ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчетаОплатыПоБанковскимКартам.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаОплатыПоБанковскимКартам.Терминал.ID_SQL,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата, ДЕНЬ),
	               |	ЛистУчетаОплатыПоБанковскимКартам.Терминал,
	               |	ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаВыручка.ККМ.ID_SQL КАК ИмяККМ,
	               |	СУММА(ЛистУчетаВыручка.Сумма) КАК Сумма,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаВыручка.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ЛистУчетаВыручка.ККМ КАК Терминал,
	               |	ЛистУчетаВыручка.РабочееМестоВСкл
	               |ИЗ
	               |	Документ.ЛистУчета.Выручка КАК ЛистУчетаВыручка
	               |ГДЕ
	               |	ЛистУчетаВыручка.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаВыручка.Ссылка.ТорговаяТочка В(&ТорговыеТочки)
	               |	И ЛистУчетаВыручка.Ссылка.Проведен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчетаВыручка.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаВыручка.ККМ.ID_SQL,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаВыручка.Ссылка.Дата, ДЕНЬ),
	               |	ЛистУчетаВыручка.ККМ,
	               |	ЛистУчетаВыручка.РабочееМестоВСкл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаАктыКМ3.ККМ.ID_SQL КАК ИмяККМ,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаАктыКМ3.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	СУММА(ЛистУчетаАктыКМ3.СуммаПоНДС10) КАК ВозвратПоНДС10,
	               |	СУММА(ЛистУчетаАктыКМ3.СуммаПоНДС18) КАК ВозвратПоНДС18,
	               |	ЛистУчетаАктыКМ3.ККМ КАК Терминал
	               |ИЗ
	               |	Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	               |ГДЕ
	               |	ЛистУчетаАктыКМ3.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка В(&ТорговыеТочки)
	               |	И ЛистУчетаАктыКМ3.Ссылка.Проведен = ИСТИНА
	               |	И ЛистУчетаАктыКМ3.ЭтоВозвратБезнал = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаАктыКМ3.ККМ.ID_SQL,
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаАктыКМ3.Ссылка.Дата, ДЕНЬ),
	               |	ЛистУчетаАктыКМ3.ККМ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Данные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	ВЗ_Данные.ИмяККМ,
	               |	ВЗ_Данные.Терминал КАК Терминал,
	               |	ВЗ_Данные.Дата КАК Дата
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |		ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.CashName КАК ИмяККМ,
	               |		ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал КАК Терминал,
	               |		&ДатаНач КАК Дата
	               |	ИЗ
	               |		РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаНач, РабочееМесто.СтруктурнаяЕдиница В (&ТорговыеТочки)) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПривязкиОборудованияКРабочимМестам.РабочееМесто.СтруктурнаяЕдиница,
	               |		ПривязкиОборудованияКРабочимМестам.РабочееМесто.CashName,
	               |		ПривязкиОборудованияКРабочимМестам.Терминал,
	               |		ПривязкиОборудованияКРабочимМестам.Период
	               |	ИЗ
	               |		РегистрСведений.ПривязкиОборудованияКРабочимМестам КАК ПривязкиОборудованияКРабочимМестам
	               |	ГДЕ
	               |		ПривязкиОборудованияКРабочимМестам.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ПривязкиОборудованияКРабочимМестам.РабочееМесто.СтруктурнаяЕдиница В(&ТорговыеТочки)) КАК ВЗ_Данные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Терминал,
	               |	СтруктурнаяЕдиница,
	               |	Дата";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ТорговыеТочки", ТабПодр.ВыгрузитьКолонку("Ссылка"));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабПривязкиКРабочимМестам = Результаты[3].Выгрузить();
	ТабПривязкиКРабочимМестам.Индексы.Добавить("СтруктурнаяЕдиница, Терминал");
	
	ТабДетализацияОплатБезналПоБанкам = Новый ТаблицаЗначений();
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Дата");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("ИмяККМ");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Подразделение");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("ПервыйСимвол");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Сумма");
	
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабДанные.Добавить();
		СтрокаТаб.Дата = Выборка.Дата;
		//СтрокаТаб.ИмяККМ = ПолучитьИмяККМИзПериодическихПривязок(ТабПривязкиКРабочимМестам, Выборка.Дата, Выборка.ТорговаяТочка, Выборка.Терминал);
		СтрокаТаб.ИмяККМ = Выборка.РабочееМестоВСкл;
		СтрокаТаб.Подразделение = Выборка.ТорговаяТочка;
		СтрокаТаб.СуммаБезнал = Выборка.Сумма;
		
		СтрокаДетализация = ТабДетализацияОплатБезналПоБанкам.Добавить();
		СтрокаДетализация.Дата = Выборка.Дата;
		СтрокаДетализация.ИмяККМ = СтрокаТаб.ИмяККМ;
		СтрокаДетализация.Подразделение = Выборка.ТорговаяТочка;
		СтрокаДетализация.ПервыйСимвол = Лев(СокрЛП(Выборка.Терминал), 1);
		СтрокаДетализация.Сумма = Выборка.Сумма;
	КонецЦикла;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабДанные.Добавить();
		СтрокаТаб.Дата = Выборка.Дата;
		//СтрокаТаб.ИмяККМ = ПолучитьИмяККМИзПериодическихПривязок(ТабПривязкиКРабочимМестам, Выборка.Дата, Выборка.ТорговаяТочка, Выборка.Терминал);
		СтрокаТаб.ИмяККМ = Выборка.РабочееМестоВСкл;
		СтрокаТаб.Подразделение = Выборка.ТорговаяТочка;
		СтрокаТаб.Сумма = Выборка.Сумма;
	КонецЦикла;
	
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабДанные.Добавить();
		СтрокаТаб.Дата = Выборка.Дата;
		СтрокаТаб.ИмяККМ = ПолучитьИмяККМИзПериодическихПривязок(ТабПривязкиКРабочимМестам, Выборка.Дата, Выборка.ТорговаяТочка, Выборка.Терминал);
		СтрокаТаб.Подразделение = Выборка.ТорговаяТочка;
		СтрокаТаб.ВозвратПоНДС10 = Выборка.ВозвратПоНДС10;
		СтрокаТаб.ВозвратПоНДС18 = Выборка.ВозвратПоНДС18;
	КонецЦикла;
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		Если СтрокаДанные.Количество < 0.1 Тогда
			СтрокаДанные.Количество = 0.1;
		КонецЕсли;
	КонецЦикла;
	
	ТабДанные.Свернуть("Дата, ИмяККМ, Подразделение", "Количество, Сумма, СуммаВозвратов, СуммаБезнал, СуммаПоНДС10, СуммаПоНДС18, ВозвратПоНДС10, ВозвратПоНДС18");
	ТабДанные.Сортировать("Дата, Подразделение");
	ТабДанные.Колонки.Добавить("ПодразделениеБух");
	ТабДанные.Колонки.Добавить("СкладБух");
	ТабДетализацияОплатБезналПоБанкам.Свернуть("Дата, Подразделение, ПервыйСимвол, ИмяККМ", "Сумма");
	
	ЗапросСкладов = СоединениеСБазой.NewObject("Запрос");
	ЗапросСкладов.Текст = "ВЫБРАТЬ
	                      |	Склады.Ссылка,
	                      |	Склады.Наименование,
	                      |	Склады.ПодразделениеОрганизации
	                      |ИЗ
	                      |	Справочник.Склады КАК Склады";
						  
	ТабСкладыБух = ЗапросСкладов.Выполнить().Выгрузить();
	
	МассивПодрБух = СоединениеСБазой.NewObject("Массив");
	Для Каждого СтрокаТаб Из ТабДанные Цикл
		СтрокаТаб.ПодразделениеБух = ПолучитьПодразделениеБух(ТабПодрБух, Формат(СтрокаТаб.Подразделение.НомерТочки, "ЧН=; ЧГ=0"));
		СтрокаТаб.СкладБух = ПолучитьСклад(ТабСкладыБух, СтрокаТаб.ПодразделениеБух, СтрокаТаб.ИмяККМ);
		Если СтрокаТаб.ПодразделениеБух <> Неопределено Тогда
			МассивПодрБух.Добавить(СтрокаТаб.ПодразделениеБух);
		КонецЕсли;	
	КонецЦикла;
	
	ЗапросДокументов = СоединениеСБазой.NewObject("Запрос");
	ЗапросДокументов.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	ЗапросДокументов.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросДокументов.УстановитьПараметр("Организация", ОргВкусвиллБух);
	ЗапросДокументов.УстановитьПараметр("Подразделения", МассивПодрБух);
	ЗапросДокументов.УстановитьПараметр("Комментарий", "%Загрузка обработкой%");
	ЗапросДокументов.УстановитьПараметр("Свойство", СоединениеСБазой.ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Префикс терминала (для видов оплат)"));
	ЗапросДокументов.Текст = "ВЫБРАТЬ
					|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
					|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации,
					|	ОтчетОРозничныхПродажах.Склад,
					|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) КАК Дата
					|ПОМЕСТИТЬ ВТ_ОРП
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
					|ГДЕ
					|	ОтчетОРозничныхПродажах.ПометкаУдаления = ЛОЖЬ
					|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|	И ОтчетОРозничныхПродажах.Организация = &Организация
					|	И ОтчетОРозничныхПродажах.ПодразделениеОрганизации В(&Подразделения)
					|	И ОтчетОРозничныхПродажах.Комментарий ПОДОБНО &Комментарий
                    |
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка
					|;
                    |
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_ОРП.Ссылка,
					|	ВТ_ОРП.ПодразделениеОрганизации,
					|	ВТ_ОРП.Склад,
					|	ВТ_ОРП.Дата
					|ИЗ
					|	ВТ_ОРП КАК ВТ_ОРП
					|;
                    |
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПриходныйКассовыйОрдер.Ссылка,
					|	ПриходныйКассовыйОрдер.ДокументОснование
					|ИЗ
					|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
					|ГДЕ
					|	ПриходныйКассовыйОрдер.ДокументОснование В
					|			(ВЫБРАТЬ
					|				ВТ_ОРП.Ссылка
					|			ИЗ
					|				ВТ_ОРП КАК ВТ_ОРП)
					|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
					|;
					|
					|ВЫБРАТЬ
					|	ВидыОплатОрганизаций.Организация,
					|	ВидыОплатОрганизаций.Ссылка,
					|	ЕстьNULL(ЗначенияСвойствОбъектов.Значение, """") КАК Префикс
					|ИЗ
					|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|		ПО ВидыОплатОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
					|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
					|ГДЕ
					|	ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ";
					
	Результаты = ЗапросДокументов.ВыполнитьПакет();
	
	ТабОРП = Результаты.Получить(1).Выгрузить();
	ТабПКО = Результаты.Получить(2).Выгрузить();
	ТабВидыОплат = Результаты.Получить(3).Выгрузить();
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		
		Если СтрокаДанные.СкладБух = Неопределено
			ИЛИ СтрокаДанные.ПодразделениеБух = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаПодр = ТабПодр.Найти(СтрокаДанные.Подразделение, "Ссылка");
		ЭтоСовмДеятельность = Ложь;
		Если СтрокаПодр <> Неопределено Тогда
			ЭтоСовмДеятельность = СтрокаПодр.СовместнаяДеятельность;
		КонецЕсли;	
		
		Если СтрокаДанные.Сумма <> 0
			ИЛИ СтрокаДанные.СуммаБезнал <> 0 Тогда
			СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
			СтруктураПоиска.Вставить("Дата", СтрокаДанные.Дата);
			СтруктураПоиска.Вставить("Склад", СтрокаДанные.СкладБух);
			СтруктураПоиска.Вставить("ПодразделениеОрганизации", СтрокаДанные.ПодразделениеБух);
			СтрокиДокОРП = ТабОРП.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДокОРП.Количество() = 0 Тогда
				ДокОРП = СоединениеСБазой.Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			Иначе
				ДокОРП = СтрокиДокОРП.Получить(0).Ссылка.ПолучитьОбъект();
				ДокОРП.Товары.Очистить();
				ДокОРП.Оплата.Очистить();
			КонецЕсли;
			СоединениеСБазой.ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОРП, СоединениеСБазой.глЗначениеПеременной("глТекущийПользователь"), ДокОРП.мВалютаРегламентированногоУчета, "Продажа", Неопределено);
			ДокОРП.Дата = СтрокаДанные.Дата;
			ДокОРП.СтатьяДвиженияДенежныхСредств = СтатьяДДСБух;
			ДокОРП.ВидОперации = СоединениеСБазой.Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			ДокОРП.СчетКасса = СоединениеСБазой.ПланыСчетов.Хозрасчетный.КассаОрганизации;
			ДокОРП.СуммаВключаетНДС = Истина;
			ДокОРП.Организация = ОргВкусвиллБух;
			ДокОРП.Склад = СтрокаДанные.СкладБух;
			ДокОРП.ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
			СуммаВыручка = СтрокаДанные.Сумма + СтрокаДанные.СуммаБезнал;
			Если СуммаВыручка <> 0 Тогда
				ЗадействованоКоличество = 0;
				ЗадейстованаСумма = 0;
				КоэффициентВыручкиПоНДС10 = ?(СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18 = 0, 1, СтрокаДанные.СуммаПоНДС10 / (СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18));
				Если КоэффициентВыручкиПоНДС10 > 0 Тогда
					СтрокаТовар = ДокОРП.Товары.Добавить();
					//Если ЭтоСовмДеятельность Тогда
					//	СтрокаТовар.Номенклатура = НоменклатураБухСовмДеятельность;
					//Иначе
						СтрокаТовар.Номенклатура = НоменклатураБух;
					//КонецЕсли;
					ДокОРП.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТовар, Истина);
					Если ЭтоСовмДеятельность Тогда
						СтрокаТовар.Субконто = НоменклатурнаяГруппаСовмДеятельность;
					КонецЕсли;	
					СтрокаТовар.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС10;
					СтрокаТовар.Количество = Окр(СтрокаДанные.Количество * КоэффициентВыручкиПоНДС10, 3);
					ЗадействованоКоличество = ЗадействованоКоличество + Окр(СтрокаТовар.Количество, 3);
					СтрокаТовар.Цена = ?(СтрокаТовар.Количество = 0, 0, СуммаВыручка * КоэффициентВыручкиПоНДС10 / СтрокаТовар.Количество);
					СтрокаТовар.Сумма = СуммаВыручка * КоэффициентВыручкиПоНДС10;
					ЗадейстованаСумма = ЗадейстованаСумма + СтрокаТовар.Сумма;
					СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТовар, ДокОРП);
					СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовар, ДокОРП);
				КонецЕсли;
				Если КоэффициентВыручкиПоНДС10 < 1 Тогда
					СтрокаТовар = ДокОРП.Товары.Добавить();
					//Если ЭтоСовмДеятельность Тогда
					//	СтрокаТовар.Номенклатура = НоменклатураБухСовмДеятельность;
					//Иначе
						СтрокаТовар.Номенклатура = НоменклатураБух;
					//КонецЕсли;
					ДокОРП.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТовар, Истина);
					Если ЭтоСовмДеятельность Тогда
						СтрокаТовар.Субконто = НоменклатурнаяГруппаСовмДеятельность;
					КонецЕсли;
					СтрокаТовар.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС18;
					СтрокаТовар.Количество = СтрокаДанные.Количество - ЗадействованоКоличество;
					СтрокаТовар.Цена = ?(СтрокаТовар.Количество = 0, 0, (СуммаВыручка - ЗадейстованаСумма) / СтрокаТовар.Количество);
					СтрокаТовар.Сумма = СуммаВыручка - ЗадейстованаСумма;
					СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТовар, ДокОРП);
					СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовар, ДокОРП);
				КонецЕсли;	
			КонецЕсли;
			Если СтрокаДанные.СуммаБезнал <> 0 Тогда
				СтрокиРасшифровкаБезнал = ТабДетализацияОплатБезналПоБанкам.НайтиСтроки(Новый Структура("Дата, Подразделение, ИмяККМ", СтрокаДанные.Дата, СтрокаДанные.Подразделение, СтрокаДанные.ИмяККМ));
				Для Каждого СтрокаДетализация Из СтрокиРасшифровкаБезнал Цикл
					СтрокаВидОплаты = Неопределено;
					//Если СтрокаДетализация.ПервыйСимвол = "1" ИЛИ СтрокаДетализация.ПервыйСимвол = "4" Тогда
					//	СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
					//	СтруктураПоиска.Вставить("Организация", ОргВкусвиллБух);
					//	СтруктураПоиска.Вставить("Префикс", СтрокаДетализация.ПервыйСимвол);
					//	СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
					//	Если СтрокиВидОплаты.Количество() > 0 Тогда
					//		СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
					//	КонецЕсли;
					//Иначе
					//	СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
					//	СтруктураПоиска.Вставить("Организация", ОргВкусвиллБух);
					//	СтруктураПоиска.Вставить("Префикс", "");
					//	СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
					//	Если СтрокиВидОплаты.Количество() > 0 Тогда
					//		СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
					//	КонецЕсли;
					//КонецЕсли;
					//Если СтрокаДетализация.ПервыйСимвол = "1" ИЛИ СтрокаДетализация.ПервыйСимвол = "4" Тогда
					//	СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
					//	СтруктураПоиска.Вставить("Организация", ОргВкусвиллБух);
					//	СтруктураПоиска.Вставить("Префикс", СтрокаДетализация.ПервыйСимвол);
					//	СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
					//	Если СтрокиВидОплаты.Количество() > 0 Тогда
					//		СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
					//	КонецЕсли;
					//Иначе
						СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
						СтруктураПоиска.Вставить("Организация", ОргВкусвиллБух);
						//СтруктураПоиска.Вставить("Префикс", "");
						СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
						Если СтрокиВидОплаты.Количество() > 0 Тогда
							СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
						КонецЕсли;
					//КонецЕсли;
					СтрокаБезнал = ДокОРП.Оплата.Добавить();
					СтрокаБезнал.ВидОплаты = СтрокаВидОплаты.Ссылка;
					СтрокаБезнал.Контрагент = СтрокаВидОплаты.Ссылка.Контрагент;
					СтрокаБезнал.ДоговорКонтрагента = СтрокаВидОплаты.Ссылка.ДоговорКонтрагента;
					СтрокаБезнал.СчетУчетаРасчетов = СтрокаВидОплаты.Ссылка.СчетУчетаРасчетов;
					СтрокаБезнал.СуммаОплаты = СтрокаДетализация.Сумма;
				КонецЦикла;	
			КонецЕсли;	
			ДокОРП.Комментарий = "Загрузка обработкой: " + СтрокаДанные.Подразделение + ?(ЭтоСовмДеятельность, " (Совместная деятельность)", "");
			Попытка
				ДокОРП.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				ДокОРП.Записать(СоединениеСБазой.РежимЗаписиДокумента.Запись);
			КонецПопытки;
			ЗаписьРегистра = СоединениеСБазой.РегистрыСведений.АК_СоответствиеПодразделенийЗагруженнымДокументам.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Документ = ДокОРП.Ссылка;
			ЗаписьРегистра.Подразделение = СтрокаДанные.ПодразделениеБух;
			ЗаписьРегистра.Записать();
			СтрокиДокПКО = Неопределено;
			Если СтрокаДанные.Сумма > 0 Тогда
				СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
				СтруктураПоиска.Вставить("ДокументОснование", ДокОРП.Ссылка);
				СтрокиДокПКО = ТабПКО.НайтиСтроки(СтруктураПоиска);
				Если СтрокиДокПКО.Количество() = 0 Тогда
					ДокПКО = СоединениеСБазой.Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				Иначе
					ДокПКО = СтрокиДокПКО.Получить(0).Ссылка.ПолучитьОбъект();
				КонецЕсли;
				ДокПКО.Заполнить(ДокОРП.Ссылка);
				ДокПКО.Дата = СтрокаДанные.Дата;
				ДокПКО.ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
				ДокПКО.Основание = "Розничная выручка";
				ДокПКО.Комментарий = "Загрузка обработкой: " + СтрокаДанные.Подразделение;
				
				//Если СтрокаДанные.ВозвратПоНДС10 > 0 Тогда
				//	СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
				//	Если СтрокаДокРасшифровка = Неопределено Тогда
				//		СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Получить(0);
				//	КонецЕсли;
				//	СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.ВозвратПоНДС10;
				//	ДокПКО.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
				//КонецЕсли;
				//
				//Если СтрокаДанные.ВозвратПоНДС18 > 0 Тогда
				//	СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
				//	Если СтрокаДокРасшифровка = Неопределено Тогда
				//		СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Получить(0);
				//	КонецЕсли;
				//	СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.ВозвратПоНДС18;
				//	ДокПКО.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
				//КонецЕсли;
				//
				ДокПКО.СуммаДокумента = ДокПКО.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Попытка
					ДокПКО.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					ДокПКО.Записать(СоединениеСБазой.РежимЗаписиДокумента.Запись);
				КонецПопытки;
				Если СтрокиДокПКО.Количество() > 0 Тогда
					ТабПКО.Удалить(СтрокиДокПКО.Получить(0));
				КонецЕсли;
			КонецЕсли;	
			Если СтрокиДокОРП.Количество() > 0 Тогда
				ТабОРП.Удалить(СтрокиДокОРП.Получить(0));
			КонецЕсли;
			//Если СтрокиДокПКО <> Неопределено Тогда
			//	Если СтрокиДокПКО.Количество() > 0 Тогда
			//		ТабПКО.Удалить(СтрокиДокПКО.Получить(0));
			//	КонецЕсли;
			//КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТабОРП.Количество();
	Для н = 0 По КолвоСтрок - 1 Цикл
		ДокОбъект = ТабОРП.Получить(н).Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	КолвоСтрок = ТабПКО.Количество();
	Для н = 0 По КолвоСтрок - 1 Цикл
		ДокОбъект = ТабПКО.Получить(н).Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ВыполнитьВыгрузку_Остальные()
	
	Построитель = Новый ПостроительОтчета();
	Построитель.Текст = "ВЫБРАТЬ
	                    |	Организации.Ссылка,
	                    |	Организации.ИНН
	                    |ИЗ
	                    |	Справочник.Организации КАК Организации
						//|ГДЕ
						//|	Организации.Ссылка <> &ОргВкусвилл
	                    |{ГДЕ
	                    |	Организации.Ссылка.* КАК Организация}";
						
	Построитель.УстановитьНастройки(НастройкиПостроителяДляОтбора);
	Построитель.Параметры.Вставить("ОргВкусвилл", Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	
	Построитель.Выполнить();
	ТабОрг = Построитель.Результат.Выгрузить();
	ТабОрг.Колонки.Добавить("ОргБух");
	ТабОрг.Колонки.Добавить("ДоговорБух");
	ТабОрг.Колонки.Добавить("ВидОплатыБезналБух");
	
	Если ТабОрг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ВидыОплатОрганизаций.Ссылка, ВидыОплатОрганизаций.Организация
					|ИЗ
					|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
					|ГДЕ
					|	ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ";
	ТабВидыОплат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТабОрг Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.ИНН) Тогда
			СтрокаТаб.ОргБух = СоединениеСБазой.Справочники.Организации.НайтиПоРеквизиту("ИНН", СтрокаТаб.ИНН);
		КонецЕсли;
		СтрокаВидОплаты = ТабВидыОплат.Найти(СтрокаТаб.ОргБух, "Организация");
		Если СтрокаВидОплаты <> Неопределено Тогда
			СтрокаТаб.ВидОплатыБезналБух = СтрокаВидОплаты.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	//ВидОплатыБезналБух = СоединениеСБазой.Справочники.ВидыОплатОрганизаций.НайтиПоНаименованию("Платежная карта");
	НоменклатураБух = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Все товары");
	НоменклатураБухСовмДеятельность = СоединениеСБазой.Справочники.Номенклатура.НайтиПоНаименованию("Совместная деятельность");
	НоменклатурнаяГруппаСовмДеятельность = СоединениеСБазой.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Совместная деятельность");
	КонтрагентБух = СоединениеСБазой.Справочники.Контрагенты.НайтиПоНаименованию("Розничный покупатель");
	СтатьяДДСБух = СоединениеСБазой.Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000007");
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка,
					|	ДоговорыКонтрагентов.Организация
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
					|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", КонтрагентБух);
	Запрос.УстановитьПараметр("ВидДоговора", СоединениеСБазой.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ТабДоговора = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабОрг Цикл
		Если СоединениеСБазой.ЗначениеЗаполнено(СтрокаТаб.ОргБух) Тогда
			СтрокаД = ТабДоговора.Найти(СтрокаТаб.ОргБух, "Организация");
			Если СтрокаД <> Неопределено Тогда
				СтрокаТаб.ДоговорБух = СтрокаД.Ссылка;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
		
    Построитель = Новый ПостроительОтчета();
	Построитель.Текст = "ВЫБРАТЬ
	                    |	СтруктурныеЕдиницы.Ссылка,
	                    |	СтруктурныеЕдиницы.НомерТочки,
	                    |	СтруктурныеЕдиницы.ДатаПереходаНаУчетПоОбособленномуПодразделению КАК ДатаПерехода,
	                    |	СтруктурныеЕдиницы.КодОПБух,
	                    |	СтруктурныеЕдиницы.СовместнаяДеятельность
	                    |ИЗ
	                    |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                    |ГДЕ
	                    |	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	                    |	И СтруктурныеЕдиницы.НомерТочки > 0
	                    |{ГДЕ
	                    |	СтруктурныеЕдиницы.Ссылка.* КАК СтруктурнаяЕдиница}";
						
	Построитель.УстановитьНастройки(НастройкиПостроителяДляОтбора);
	
	Построитель.Выполнить();
	ТабПодр = Построитель.Результат.Выгрузить();
	
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ИмяККМ", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("НомерТочки", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("СуммаБезнал", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПоНДС10", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ВозвратПоНДС18", Новый ОписаниеТипов("Число"));
	
	ТабДетализацияОплатБезналПоБанкам = Новый ТаблицаЗначений();
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Дата");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("ИмяККМ");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Подразделение");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("ПервыйСимвол");
	ТабДетализацияОплатБезналПоБанкам.Колонки.Добавить("Сумма");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЗ_ЗОтчеты.ТорговаяТочка,
	               |	ВЗ_ЗОтчеты.НомерТочки,
	               |	ВЗ_ЗОтчеты.ИмяККМ,
	               |	ВЗ_ЗОтчеты.СуммаПоНал,
	               |	ВЗ_ЗОтчеты.СуммаПоБезнал,
	               |	ВЗ_ЗОтчеты.Дата,
	               |	ВЗ_ЗОтчеты.Организация,
	               |	ВЗ_Возвраты.СуммаПоНДС10 КАК ВозвратПоНДС10,
	               |	ВЗ_Возвраты.СуммаПоНДС18 КАК ВозвратПоНДС18,
	               |	ВЗ_ЗОтчеты.Ссылка.Терминал КАК Терминал
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛистУчетаZОтчеты.Ссылка КАК Ссылка,
	               |		ЛистУчетаZОтчеты.Касса КАК Касса,
	               |		ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	               |		ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.НомерТочки КАК НомерТочки,
	               |		ЛистУчетаZОтчеты.Касса.ЗаводскойНомер КАК ИмяККМ,
	               |		СУММА(ЛистУчетаZОтчеты.СуммаПоНал) КАК СуммаПоНал,
	               |		СУММА(ЛистУчетаZОтчеты.СуммаПоБезнал) КАК СуммаПоБезнал,
	               |		НАЧАЛОПЕРИОДА(ЛистУчетаZОтчеты.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |		ЛистУчетаZОтчеты.Ссылка.Организация КАК Организация
	               |	ИЗ
	               |		Документ.ЛистУчета.ZОтчеты КАК ЛистУчетаZОтчеты
	               |	ГДЕ
	               |		ЛистУчетаZОтчеты.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ЛистУчетаZОтчеты.Ссылка.Организация В(&Организации)
	               |		И ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка В(&ТорговыеТочки)
	               |		И ЛистУчетаZОтчеты.Ссылка.Проведен = ИСТИНА
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка,
	               |		ЛистУчетаZОтчеты.Ссылка.ТорговаяТочка.НомерТочки,
	               |		ЛистУчетаZОтчеты.Касса.ЗаводскойНомер,
	               |		ЛистУчетаZОтчеты.Касса,
	               |		НАЧАЛОПЕРИОДА(ЛистУчетаZОтчеты.Ссылка.Дата, ДЕНЬ),
	               |		ЛистУчетаZОтчеты.Ссылка.Организация,
	               |		ЛистУчетаZОтчеты.Ссылка) КАК ВЗ_ЗОтчеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЛистУчетаАктыКМ3.Ссылка КАК Ссылка,
	               |			ЛистУчетаАктыКМ3.ОсновноеСредство КАК ОсновноеСредство,
	               |			СУММА(ЛистУчетаАктыКМ3.СуммаПоНДС10) КАК СуммаПоНДС10,
	               |			СУММА(ЛистУчетаАктыКМ3.СуммаПоНДС18) КАК СуммаПоНДС18
	               |		ИЗ
	               |			Документ.ЛистУчета.АктыКМ3 КАК ЛистУчетаАктыКМ3
	               |		ГДЕ
	               |			ЛистУчетаАктыКМ3.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |			И ЛистУчетаАктыКМ3.Ссылка.Организация В(&Организации)
	               |			И ЛистУчетаАктыКМ3.Ссылка.ТорговаяТочка В(&ТорговыеТочки)
	               |			И ЛистУчетаАктыКМ3.Ссылка.Проведен = ИСТИНА
	               |			И ЛистУчетаАктыКМ3.ЭтоВозвратБезнал = ЛОЖЬ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЛистУчетаАктыКМ3.Ссылка,
	               |			ЛистУчетаАктыКМ3.ОсновноеСредство) КАК ВЗ_Возвраты
	               |		ПО ВЗ_ЗОтчеты.Ссылка = ВЗ_Возвраты.Ссылка
	               |			И ВЗ_ЗОтчеты.Касса = ВЗ_Возвраты.ОсновноеСредство";
				   
				   
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организации", ТабОрг.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ТорговыеТочки", ТабПодр.ВыгрузитьКолонку("Ссылка"));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТабДанные.Добавить();
		СтрокаТаб.Дата = Выборка.Дата;
		СтрокаТаб.ИмяККМ = Выборка.ИмяККМ;
		СтрокаТаб.Подразделение = Выборка.ТорговаяТочка;
		СтрокаТаб.Организация = Выборка.Организация;
		СтрокаТаб.НомерТочки = Выборка.НомерТочки;
		СтрокаТаб.СуммаБезнал = Выборка.СуммаПоБезнал;
		СтрокаТаб.Сумма = Выборка.СуммаПоНал;
		СтрокаТаб.ВозвратПоНДС10 = Выборка.ВозвратПоНДС10;
		СтрокаТаб.ВозвратПоНДС18 = Выборка.ВозвратПоНДС18;
		
		Если СтрокаТаб.СуммаБезнал <> 0 Тогда
			СтрокаДетализация = ТабДетализацияОплатБезналПоБанкам.Добавить();
			СтрокаДетализация.Дата = Выборка.Дата;
			СтрокаДетализация.ИмяККМ = СтрокаТаб.ИмяККМ;
			СтрокаДетализация.Подразделение = Выборка.ТорговаяТочка;
			СтрокаДетализация.ПервыйСимвол = Лев(СокрЛП(Выборка.Терминал), 1);
			СтрокаДетализация.Сумма = СтрокаТаб.СуммаБезнал;
		КонецЕсли;	
	КонецЦикла;
	
	СтрокаОтбораПодразделений = "-99999";
	Для Каждого СтрЕдиница Из ТабПодр Цикл
		Если НЕ ЗначениеЗаполнено(СтрЕдиница.НомерТочки) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаОтбораПодразделений = СтрокаОтбораПодразделений + ", " + Формат(СтрЕдиница.НомерТочки, "ЧН=; ЧГ=0");
	КонецЦикла;	
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT cast(Chl.date_ch as datetime) date_ch, Ch.ShopNo, Ch.CashID,
				|SUM(Chl.Qnt) as Qnt,
				|  SUM(Chl.SummaPoNDS10) as SummaPoNDS10,
				|  SUM(Chl.SummaPoNDS18) as SummaPoNDS18
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
				|	LEFT OUTER JOIN (SELECT Chl.date_ch, Chl.CheckUid As CheckUid, SUM(Chl.Quantity) as Qnt, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum ELSE 0 END) as SummaPoNDS10, 
				|			   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum ELSE 0 END) as SummaPoNDS18
				|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
				|					WHERE Chl.date_ch >= '" + Формат(НачалоДня(ДатаНач), "ДФ=yyyy-MM-dd") + "' and Chl.date_ch <= '" + Формат(КонецДня(ДатаКон), "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl = 1
				|						GROUP BY Chl.CheckUid, Chl.date_ch) as Chl ON Ch.CheckUID = Chl.CheckUid
				|where Ch.CloseDate >= '" + Формат(НачалоДня(ДатаНач), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ДатаКон), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType = 1
				|	and Ch.ShopNo IN (" + СтрокаОтбораПодразделений + ")
				|GROUP BY Ch.ShopNo, Ch.CashID, cast(Chl.date_ch as datetime)";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ЗапросПодр = СоединениеСБазой.NewObject("Запрос");
	ЗапросПодр.Текст = "ВЫБРАТЬ
					   |	ПодразделенияОрганизаций.Ссылка,
					   |	ПодразделенияОрганизаций.Код КАК Префикс
					   |ИЗ
					   |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
					   
	ТабПодрБух = ЗапросПодр.Выполнить().Выгрузить();
	
	Попытка //если набор пустой, то выдает ошибку
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			//СтрокаПодр = ТабПодр.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			//Если СтрокаПодр = Неопределено Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Не найдено подразделение по номеру магазина: " + Формат(Rs.Fields("ShopNo").Value, "ЧГ=0"));
			//	rs.MoveNext();
			//	Продолжить;
			//КонецЕсли;	
			
			СтрокиВДанных = ТабДанные.НайтиСтроки(Новый Структура("Дата, ИмяККМ, НомерТочки", Rs.Fields("date_ch").Value, Формат(Rs.Fields("CashID").Value, "ЧН=; ЧГ=0"), Rs.Fields("ShopNo").Value));
			Если СтрокиВДанных.Количество() > 0 Тогда
				СтрокиВДанных[0].Количество = Rs.Fields("Qnt").Value;
				СтрокиВДанных[0].СуммаПоНДС10 = Rs.Fields("SummaPoNDS10").Value;
				СтрокиВДанных[0].СуммаПоНДС18 = Rs.Fields("SummaPoNDS18").Value;
			КонецЕсли;	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		Если СтрокаДанные.Количество < 0.1 Тогда
			СтрокаДанные.Количество = 0.1;
		КонецЕсли;
	КонецЦикла;
	
	ТабДанные.Свернуть("Дата, ИмяККМ, Подразделение, НомерТочки, Организация", "Количество, Сумма, СуммаБезнал, СуммаПоНДС10, СуммаПоНДС18, ВозвратПоНДС10, ВозвратПоНДС18");
	ТабДанные.Сортировать("Дата, Подразделение");
	ТабДанные.Колонки.Добавить("ПодразделениеБух");
	ТабДанные.Колонки.Добавить("СкладБух");
	
	ЗапросСкладов = СоединениеСБазой.NewObject("Запрос");
	ЗапросСкладов.Текст = "ВЫБРАТЬ
						  |	Склады.Ссылка,
						  |	Склады.Наименование
						  |ИЗ
						  |	Справочник.Склады КАК Склады";
	
	//+++АК Susk (Суслин К.В.) 2017.12.06 ИП-00017374
	МассивТочек = ТабДанные.ВыгрузитьКолонку("Подразделение");
	
	ЗапросДанныеИФНС = Новый Запрос;
	ЗапросДанныеИФНС.Текст = "ВЫБРАТЬ
	                         |	СтруктурныеЕдиницы.Ссылка,
	                         |	СтруктурныеЕдиницы.КонтрагентИФНС,
	                         |	СтруктурныеЕдиницы.ОКАТО,
	                         |	СтруктурныеЕдиницы.КодИФНС,
	                         |	СтруктурныеЕдиницы.КПП,
	                         |	СтруктурныеЕдиницы.ОКТМО,
	                         |	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
	                         |ИЗ
	                         |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
	                         |		ПО ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
	                         |ГДЕ
	                         |	СтруктурныеЕдиницы.Ссылка В(&МассивТочек)";
		
	ЗапросДанныеИФНС.УстановитьПараметр("МассивТочек", МассивТочек);
		
	ТабДанныеИФНС = ЗапросДанныеИФНС.Выполнить().Выгрузить();
	ТаблицаРегИФНСБух = ПолучитьТаблицуРегИФНСБух();
	ТабОрганизацийБух = ПолучитьТаблицуОрганизацийБух();
	//---АК Susk (Суслин К.В.)  
						  
	ТабСкладыБух = ЗапросСкладов.Выполнить().Выгрузить();
	
	МассивПодрБух = СоединениеСБазой.NewObject("Массив");
	Для Каждого СтрокаТаб Из ТабДанные Цикл
		СтрокаТаб.ПодразделениеБух = ПолучитьПодразделениеБух(ТабПодрБух, Формат(СтрокаТаб.НомерТочки, "ЧН=; ЧГ=0"));
		Если СтрокаТаб.ПодразделениеБух = Неопределено Тогда
			ПодрОбъект = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
			ПодрОбъект.Код = Формат(СтрокаТаб.НомерТочки, "ЧН=; ЧГ=0");
			ПодрОбъект.Префикс = Формат(СтрокаТаб.НомерТочки, "ЧН=; ЧГ=0");
			ПодрОбъект.ОбособленноеПодразделение = Истина;
			ПодрОбъект.Наименование = СокрЛП(СтрокаТаб.Подразделение);			
			ПодрОбъект.ОбменДанными.Загрузка = Истина;
			
			//+++АК Susk (Суслин К.В.) 2017.12.14 б/н
			Если ЗначениеЗаполнено(СтрокаТаб.Организация) Тогда
				НайдСтрОрганизация = ТабОрганизацийБух.Найти(СтрокаТаб.ОРганизация.ИНН, "ИНН");
				
				Если НайдСтрОрганизация = Неопределено Тогда
					ОргБух = СоединениеСБазой.Справочники.ОРганизации.ПустаяСсылка();
				Иначе
					ОргБух = НайдСтрОрганизация.Ссылка;
				КонецЕсли;
				
				ПодрОбъект.Владелец = ОргБух;
			КонецЕсли;
			//---AK susk	 
			
			ПодрОбъект.Записать();
			
			//+++АК Susk (Суслин К.В.) 2017.12.06 ИП-00017374
			НайдСтрРегИФНС = ТабДанныеИФНС.Найти(СтрокаТаб.Подразделение, "Ссылка");
			
			Если НЕ НайдСтрРегИФНС = Неопределено Тогда
				
				НайдСтрОрганизация = ТабОрганизацийБух.Найти(НайдСтрРегИФНС.ОРганизация.ИНН, "ИНН");
				
				Если НайдСтрОрганизация = Неопределено Тогда
					ОргБух = СоединениеСБазой.Справочники.ОРганизации.ПустаяСсылка();
				Иначе
					ОргБух = НайдСтрОрганизация.Ссылка;
				КонецЕсли;
				
				РегИФНССсылка = ПолучитьРегИФНС(ТаблицаРегИФНСБух, НайдСтрРегИФНС.ОКТМО,НайдСтрРегИФНС.КПП,  ОргБух); 
				
				Если РегИФНССсылка = Неопределено Тогда
					РегИФНС = СоединениеСБазой.Справочники.РегистрацияВИФНС.СоздатьЭлемент();
					РегИФНС.КодПоОКТМО = НайдСтрРегИФНС.ОКТМО; 
					РегИФНС.КПП = НайдСтрРегИФНС.КПП;
					РегИФНС.Владелец = ОргБух; 
					РегИФНС.НаименованиеИФНС = СокрЛП(НайдСтрРегИФНС.КонтрагентИФНС);
					РегИФНС.КодПоОКАТО = НайдСтрРегИФНС.ОКАТО;
					РегИФНС.Код = НайдСтрРегИФНС.КодИФНС;
					РегИФНС.ОбменДанными.Загрузка = Истина;
					РегИФНС.Записать();
				КонецЕсли;
				
				ПодрОбъект.РегистрацияВИФНС = РегИФНС.Ссылка;
				ПодрОбъект.КодПоОКТМО = НайдСтрРегИФНС.ОКТМО;
				ПодрОбъект.КПП = НайдСтрРегИФНС.КПП;
				ПодрОбъект.КодПоОКАТО = НайдСтрРегИФНС.ОКАТО;
				ПодрОбъект.Записать();
			КонецЕсли;
			//---АК Susk (Суслин К.В.)
			
			СтрокаПодр = ТабПодрБух.Добавить();
			СтрокаПодр.Ссылка = ПодрОбъект.Ссылка;
			СтрокаПодр.Префикс = Формат(СтрокаТаб.НомерТочки, "ЧН=; ЧГ=0");
			СтрокаТаб.ПодразделениеБух = ПодрОбъект.Ссылка;
		КонецЕсли;	
		СтрокаСклад = ТабСкладыБух.Найти(СокрЛП(СтрокаТаб.ИмяККМ), "Наименование");
		Если СтрокаСклад = Неопределено Тогда
			СкладОбъект = СоединениеСБазой.Справочники.Склады.СоздатьЭлемент();
			СкладОбъект.Код = СокрЛП(СтрокаТаб.ИмяККМ);
			СкладОбъект.Наименование = СокрЛП(СтрокаТаб.ИмяККМ);
			СкладОбъект.ВидСклада = СоединениеСБазой.Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
			СкладОбъект.ТипЦенРозничнойТорговли = СоединениеСБазой.Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Основная цена продажи");
			СкладОбъект.НоменклатурнаяГруппа = СоединениеСБазой.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
			СкладОбъект.Записать();
			СтрокаСклад = ТабСкладыБух.Добавить();
			СтрокаСклад.Ссылка = СкладОбъект.Ссылка;
			СтрокаСклад.Наименование = СокрЛП(СтрокаТаб.ИмяККМ);
		КонецЕсли;	
		СтрокаТаб.СкладБух = СтрокаСклад.Ссылка;
		Если СтрокаТаб.ПодразделениеБух <> Неопределено Тогда
			МассивПодрБух.Добавить(СтрокаТаб.ПодразделениеБух);
		КонецЕсли;	
	КонецЦикла;
	
	ЗапросДокументов = СоединениеСБазой.NewObject("Запрос");
	ЗапросДокументов.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	ЗапросДокументов.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросДокументов.УстановитьПараметр("Подразделения", МассивПодрБух);
	ЗапросДокументов.УстановитьПараметр("Комментарий", "%Загрузка обработкой%");
	ЗапросДокументов.УстановитьПараметр("Свойство", СоединениеСБазой.ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Префикс терминала (для видов оплат)"));
	ЗапросДокументов.Текст = "ВЫБРАТЬ
					|	АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ КАК Ссылка,
					|	АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение КАК ПодразделениеОрганизации,
					|	АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ.Склад КАК Склад,
					|	НАЧАЛОПЕРИОДА(АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ.Дата, ДЕНЬ) КАК Дата
					|ПОМЕСТИТЬ ВТ_ОРП
					|ИЗ
					|	РегистрСведений.АК_СоответствиеПодразделенийЗагруженнымДокументам КАК АК_СоответствиеПодразделенийЗагруженнымДокументам
					|ГДЕ
					|	АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ.ПометкаУдаления = ЛОЖЬ
					|	И АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|	И АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение В(&Подразделения)
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_ОРП.Ссылка,
					|	ВТ_ОРП.ПодразделениеОрганизации,
					|	ВТ_ОРП.Склад,
					|	ВТ_ОРП.Дата
					|ИЗ
					|	ВТ_ОРП КАК ВТ_ОРП
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПриходныйКассовыйОрдер.Ссылка,
					|	ПриходныйКассовыйОрдер.ДокументОснование
					|ИЗ
					|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
					|ГДЕ
					|	ПриходныйКассовыйОрдер.ДокументОснование В
					|			(ВЫБРАТЬ
					|				ВТ_ОРП.Ссылка
					|			ИЗ
					|				ВТ_ОРП КАК ВТ_ОРП)
					|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
					|;
					|
					|ВЫБРАТЬ
					|	ВидыОплатОрганизаций.Организация,
					|	ВидыОплатОрганизаций.Ссылка,
					|	ЕстьNULL(ЗначенияСвойствОбъектов.Значение, """") КАК Префикс
					|ИЗ
					|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|		ПО ВидыОплатОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
					|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
					|ГДЕ
					|	ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ";
					
	Результаты = ЗапросДокументов.ВыполнитьПакет();
	
	ТабОРП = Результаты.Получить(1).Выгрузить();
	ТабПКО = Результаты.Получить(2).Выгрузить();
	ТабВидыОплат = Результаты.Получить(3).Выгрузить();
	
	ОргСП = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7731626420");
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		
		//Если СтрокаДанные.СкладБух = Неопределено
		//	ИЛИ СтрокаДанные.ПодразделениеБух = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		Если СтрокаДанные.Сумма <> 0
			ИЛИ СтрокаДанные.СуммаБезнал <> 0 Тогда
			СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
			СтруктураПоиска.Вставить("Дата", СтрокаДанные.Дата);
			СтруктураПоиска.Вставить("Склад", СтрокаДанные.СкладБух);
			СтруктураПоиска.Вставить("ПодразделениеОрганизации", СтрокаДанные.ПодразделениеБух);
			СтрокиДокОРП = ТабОРП.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДокОРП.Количество() = 0 Тогда
				ДокОРП = СоединениеСБазой.Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			Иначе
				ДокОРП = СтрокиДокОРП.Получить(0).Ссылка.ПолучитьОбъект();
				ДокОРП.Товары.Очистить();
				ДокОРП.Оплата.Очистить();
			КонецЕсли;
			СоединениеСБазой.ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОРП, СоединениеСБазой.глЗначениеПеременной("глТекущийПользователь"), ДокОРП.мВалютаРегламентированногоУчета, "Продажа", Неопределено);
			ДокОРП.Дата = СтрокаДанные.Дата;
			ДокОРП.СтатьяДвиженияДенежныхСредств = СтатьяДДСБух;
			ДокОРП.ВидОперации = СоединениеСБазой.Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			ДокОРП.СчетКасса = СоединениеСБазой.ПланыСчетов.Хозрасчетный.КассаОрганизации;
			Если СтрокаДанные.Организация = ОргСП Тогда
				ДокОРП.УчитыватьНДС = Ложь;
				ДокОРП.СуммаВключаетНДС = Ложь;
			Иначе	
				ДокОРП.УчитыватьНДС = Истина;
				ДокОРП.СуммаВключаетНДС = Истина;
			КонецЕсли;	
			СтрокаОрг = ТабОрг.Найти(СтрокаДанные.Организация, "Ссылка");
			Если СтрокаОрг <> Неопределено Тогда
				ДокОРП.Организация = СтрокаОрг.ОргБух;
			КонецЕсли;	
			ДокОРП.Склад = СтрокаДанные.СкладБух;
			СтрокаПодр = ТабПодр.Найти(СтрокаДанные.Подразделение, "Ссылка");
			ЭтоСовмДеятельность = Ложь;
			Если СтрокаПодр <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаПодр.ДатаПерехода)
					И СтрокаПодр.ДатаПерехода <= СтрокаДанные.Дата Тогда
					Если ЗначениеЗаполнено(СтрокаПодр.КодОПБух) Тогда
						ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаПодр.КодОПБух,,, ДокОРП.Организация);
					Иначе	
						ДокОРП.ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
					КонецЕсли;	
				Иначе
					//Если СтрокаДанные.Организация = ОргСП Тогда
					//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОРП.Организация);
					//Иначе
					//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					//КонецЕсли;	
					ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОРП.Организация);

				КонецЕсли;
				ЭтоСовмДеятельность = СтрокаПодр.СовместнаяДеятельность;
			Иначе	
				ДокОРП.ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
			КонецЕсли;	
			СуммаВыручка = СтрокаДанные.Сумма + СтрокаДанные.СуммаБезнал;
			Если СуммаВыручка <> 0 Тогда
				Если СтрокаДанные.Организация <> ОргСП Тогда
					ЗадействованоКоличество = 0;
					ЗадейстованаСумма = 0;
					КоэффициентВыручкиПоНДС10 = ?(СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18 = 0, 1, СтрокаДанные.СуммаПоНДС10 / (СтрокаДанные.СуммаПоНДС10 + СтрокаДанные.СуммаПоНДС18));
					Если КоэффициентВыручкиПоНДС10 > 0 Тогда
						СтрокаТовар = ДокОРП.Товары.Добавить();
						//Если ЭтоСовмДеятельность Тогда
						//	СтрокаТовар.Номенклатура = НоменклатураБухСовмДеятельность;
						//Иначе
							СтрокаТовар.Номенклатура = НоменклатураБух;
						//КонецЕсли;	
						ДокОРП.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТовар, Истина);
						Если ЭтоСовмДеятельность Тогда
							СтрокаТовар.Субконто = НоменклатурнаяГруппаСовмДеятельность;
						КонецЕсли;
						СтрокаТовар.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС10;
						СтрокаТовар.Количество = Окр(СтрокаДанные.Количество * КоэффициентВыручкиПоНДС10, 3);
						ЗадействованоКоличество = ЗадействованоКоличество + Окр(СтрокаТовар.Количество, 3);
						СтрокаТовар.Цена = ?(СтрокаТовар.Количество = 0, 0, СуммаВыручка * КоэффициентВыручкиПоНДС10 / СтрокаТовар.Количество);
						СтрокаТовар.Сумма = СуммаВыручка * КоэффициентВыручкиПоНДС10;
						ЗадейстованаСумма = ЗадейстованаСумма + СтрокаТовар.Сумма;
						СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТовар, ДокОРП);
						СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовар, ДокОРП);
					КонецЕсли;
					Если КоэффициентВыручкиПоНДС10 < 1 Тогда
						СтрокаТовар = ДокОРП.Товары.Добавить();
						//Если ЭтоСовмДеятельность Тогда
						//	СтрокаТовар.Номенклатура = НоменклатураБухСовмДеятельность;
						//Иначе
							СтрокаТовар.Номенклатура = НоменклатураБух;
						//КонецЕсли;	
						ДокОРП.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТовар, Истина);
						Если ЭтоСовмДеятельность Тогда
							СтрокаТовар.Субконто = НоменклатурнаяГруппаСовмДеятельность;
						КонецЕсли;
						СтрокаТовар.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.НДС18;
						СтрокаТовар.Количество = СтрокаДанные.Количество - ЗадействованоКоличество;
						СтрокаТовар.Цена = ?(СтрокаТовар.Количество = 0, 0, (СуммаВыручка - ЗадейстованаСумма) / СтрокаТовар.Количество);
						СтрокаТовар.Сумма = СуммаВыручка - ЗадейстованаСумма;
						СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТовар, ДокОРП);
						СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовар, ДокОРП);
					КонецЕсли;
				Иначе
					СтрокаТовар = ДокОРП.Товары.Добавить();
					//Если ЭтоСовмДеятельность Тогда
					//	СтрокаТовар.Номенклатура = НоменклатураБухСовмДеятельность;
					//Иначе
					СтрокаТовар.Номенклатура = НоменклатураБух;
					//КонецЕсли;	
					ДокОРП.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТовар, Истина);
					Если ЭтоСовмДеятельность Тогда
						СтрокаТовар.Субконто = НоменклатурнаяГруппаСовмДеятельность;
					КонецЕсли;
					СтрокаТовар.СтавкаНДС = СоединениеСБазой.Перечисления.СтавкиНДС.БезНДС;
					СтрокаТовар.Количество = СтрокаДанные.Количество;
					СтрокаТовар.Цена = ?(СтрокаТовар.Количество = 0, 0, СуммаВыручка / СтрокаТовар.Количество);
					СтрокаТовар.Сумма = СуммаВыручка;
					СоединениеСБазой.ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТовар, ДокОРП);
					СоединениеСБазой.ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовар, ДокОРП);
				КонецЕсли;	
			КонецЕсли;
			Если СтрокаДанные.СуммаБезнал <> 0 Тогда
				СтрокиРасшифровкаБезнал = ТабДетализацияОплатБезналПоБанкам.НайтиСтроки(Новый Структура("Дата, Подразделение, ИмяККМ", СтрокаДанные.Дата, СтрокаДанные.Подразделение, СтрокаДанные.ИмяККМ));
				Для Каждого СтрокаДетализация Из СтрокиРасшифровкаБезнал Цикл
					СтрокаВидОплаты = Неопределено;
					Если СтрокаДетализация.ПервыйСимвол = "1" ИЛИ СтрокаДетализация.ПервыйСимвол = "4" Тогда
						СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
						СтруктураПоиска.Вставить("Организация", ДокОРП.Организация);
						СтруктураПоиска.Вставить("Префикс", СтрокаДетализация.ПервыйСимвол);
						СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
						Если СтрокиВидОплаты.Количество() > 0 Тогда
							СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
						КонецЕсли;
					Иначе
						СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
						СтруктураПоиска.Вставить("Организация", ДокОРП.Организация);
						//СтруктураПоиска.Вставить("Префикс", "");
						СтрокиВидОплаты = ТабВидыОплат.НайтиСтроки(СтруктураПоиска);
						Если СтрокиВидОплаты.Количество() > 0 Тогда
							СтрокаВидОплаты = СтрокиВидОплаты.Получить(0);
						КонецЕсли;
					КонецЕсли;
					СтрокаБезнал = ДокОРП.Оплата.Добавить();
					СтрокаБезнал.ВидОплаты = СтрокаВидОплаты.Ссылка;
					СтрокаБезнал.Контрагент = СтрокаВидОплаты.Ссылка.Контрагент;
					СтрокаБезнал.ДоговорКонтрагента = СтрокаВидОплаты.Ссылка.ДоговорКонтрагента;
					СтрокаБезнал.СчетУчетаРасчетов = СтрокаВидОплаты.Ссылка.СчетУчетаРасчетов;
					СтрокаБезнал.СуммаОплаты = СтрокаДетализация.Сумма;
				КонецЦикла;
			КонецЕсли;	
			ДокОРП.Комментарий = "Загрузка обработкой: " + СтрокаДанные.Подразделение + ?(ЭтоСовмДеятельность, " (Совместная деятельность)", "");
			Попытка
				ДокОРП.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				ДокОРП.Записать(СоединениеСБазой.РежимЗаписиДокумента.Запись);
			КонецПопытки;

			ЗаписьРегистра = СоединениеСБазой.РегистрыСведений.АК_СоответствиеПодразделенийЗагруженнымДокументам.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Документ = ДокОРП.Ссылка;
			ЗаписьРегистра.Подразделение = СтрокаДанные.ПодразделениеБух;
			ЗаписьРегистра.Записать();
			СтрокиДокПКО = Неопределено;
			Если СтрокаДанные.Сумма > 0 Тогда
				СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
				СтруктураПоиска.Вставить("ДокументОснование", ДокОРП.Ссылка);
				СтрокиДокПКО = ТабПКО.НайтиСтроки(СтруктураПоиска);
				Если СтрокиДокПКО.Количество() = 0 Тогда
					ДокПКО = СоединениеСБазой.Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				Иначе
					ДокПКО = СтрокиДокПКО.Получить(0).Ссылка.ПолучитьОбъект();
				КонецЕсли;
				ДокПКО.Заполнить(ДокОРП.Ссылка);
				ДокПКО.Дата = СтрокаДанные.Дата;
				ДокПКО.ПодразделениеОрганизации = ДокОРП.ПодразделениеОрганизации;
				ДокПКО.Основание = "Розничная выручка";
				ДокПКО.Комментарий = "Загрузка обработкой: " + СтрокаДанные.Подразделение;
				
				//Если СтрокаДанные.ВозвратПоНДС10 > 0 Тогда
				//	СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС10, "СтавкаНДС");
				//	Если СтрокаДокРасшифровка = Неопределено Тогда
				//		СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Получить(0);
				//	КонецЕсли;
				//	СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.ВозвратПоНДС10;
				//	ДокПКО.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
				//КонецЕсли;
				//
				//Если СтрокаДанные.ВозвратПоНДС18 > 0 Тогда
				//	СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Найти(СоединениеСБазой.Перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
				//	Если СтрокаДокРасшифровка = Неопределено Тогда
				//		СтрокаДокРасшифровка = ДокПКО.РасшифровкаПлатежа.Получить(0);
				//	КонецЕсли;
				//	СтрокаДокРасшифровка.СуммаПлатежа = СтрокаДокРасшифровка.СуммаПлатежа - СтрокаДанные.ВозвратПоНДС18;
				//	ДокПКО.ПересчитатьСуммуНДС(СтрокаДокРасшифровка);
				//КонецЕсли;
				//
				ДокПКО.СуммаДокумента = ДокПКО.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Попытка
					ДокПКО.Записать(СоединениеСБазой.РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					ДокПКО.Записать(СоединениеСБазой.РежимЗаписиДокумента.Запись);
				КонецПопытки;
				Если СтрокиДокПКО.Количество() > 0 Тогда
					ТабПКО.Удалить(СтрокиДокПКО.Получить(0));
				КонецЕсли;
			КонецЕсли;	
			Если СтрокиДокОРП.Количество() > 0 Тогда
				ТабОРП.Удалить(СтрокиДокОРП.Получить(0));
			КонецЕсли;
			//Если СтрокиДокПКО <> Неопределено Тогда
			//	Если СтрокиДокПКО.Количество() > 0 Тогда
			//		ТабПКО.Удалить(СтрокиДокПКО.Получить(0));
			//	КонецЕсли;
			//КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	КолвоСтрок = ТабОРП.Количество();
	Для н = 0 По КолвоСтрок - 1 Цикл
		ДокОбъект = ТабОРП.Получить(н).Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	КолвоСтрок = ТабПКО.Количество();
	Для н = 0 По КолвоСтрок - 1 Цикл
		ДокОбъект = ТабПКО.Получить(н).Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	//теперь выгрузим движения по инкассации
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчета.СуммаИнкассации,
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.ТорговаяТочка,ЛистУчета.ТорговаяТочка.НомерТочки как НомерТочки,
	               |	ЛистУчета.Проведен,
	               |	ЛистУчета.Дата,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Организация В(&Организации)
	               |	И ЛистУчета.ТорговаяТочка В(&ТорговыеТочки)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.СуммаДокумента,
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.ТорговаяТочка,ЛистУчета.ТорговаяТочка.НомерТочки как НомерТочки,
	               |	ЛистУчета.Проведен,
	               |	ЛистУчета.Дата,
	               |	ЛистУчета.Организация
	               |ИЗ
	               |	Документ.ПоступлениеВКассу КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Организация В(&Организации)
	               |	И ЛистУчета.ТорговаяТочка В(&ТорговыеТочки)
	               |	И ЛистУчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.Инкассация)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организации", ТабОрг.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ТорговыеТочки", ТабПодр.ВыгрузитьКолонку("Ссылка"));
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	//АК БЕЛН 11.04.2017+
	//+++АК Susk (Суслин К.В.) 2018.03.01 ИП-00018033
	// слетел код у статьи	 
	//СтатьяДДСПокуп=СоединениеСБазой.Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901041   ");
	СтатьяДДСПокуп=СоединениеСБазой.Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000014");
	//---АК Susk (Суслин К.В.) 
	ПодрЛП=СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей без ОП",,, СоединениеСБазой.Справочники.Организации.НайтиПоРеквизиту("ИНН","7726660031"));
	
	//АК БЕЛН 11.04.2017+
	Пока Выборка.Следующий() Цикл
		ДокСсылка = СоединениеСБазой.Документы.ОперацияБух.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", Строка(Выборка.Ссылка.УникальныйИдентификатор())));
		Если Найти(СоединениеСБазой.String(ДокСсылка), "<Объект не найден") > 0 Тогда
			Если Выборка.Проведен = Ложь Тогда
				Продолжить;
			КонецЕсли;
			ДокОбъект = СоединениеСБазой.Документы.ОперацияБух.СоздатьДокумент();
			СсылкаОбъект = СоединениеСБазой.Документы.ОперацияБух.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", Строка(Выборка.Ссылка.УникальныйИдентификатор())));
			ДокОбъект.УстановитьСсылкуНового(СсылкаОбъект);
		Иначе
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		КонецЕсли;	
		ДокОбъект.Движения.Хозрасчетный.Очистить();
		
		ДокОбъект.Дата = Выборка.Дата;
		СтрокаОрг = ТабОрг.Найти(Выборка.Организация, "Ссылка");
		Если СтрокаОрг <> Неопределено Тогда
			ДокОбъект.Организация = СтрокаОрг.ОргБух;
		КонецЕсли;	
		СтрокаПодр = ТабПодр.Найти(Выборка.ТорговаяТочка, "Ссылка");
		ПодразделениеОрганизации = Неопределено;
		Если СтрокаПодр <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаПодр.ДатаПерехода)
				И СтрокаПодр.ДатаПерехода <= Выборка.Дата Тогда
				Если ЗначениеЗаполнено(СтрокаПодр.КодОПБух) Тогда
					ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаПодр.КодОПБух,,, ДокОбъект.Организация);
				КонецЕсли;	
			Иначе
				//Если СтрокаДанные.Организация = ОргСП Тогда
				//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОРП.Организация);
				//Иначе
				//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				//КонецЕсли;	
				ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОбъект.Организация);
				//АК БЕЛН 11.04.2017+
				Если ДокОбъект.Организация.ИНН="7726660031" Тогда //ЛП
					ПодразделениеОрганизации = ПодрЛП;
				КонецЕсли;
				//АК БЕЛН 11.04.2017-
			КонецЕсли;
		Иначе	
			//ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
		КонецЕсли;
		
		Если  СоединениеСБазой.ЗначениеЗаполнено(ПодразделениеОрганизации)=Ложь Тогда
			ПодразделениеОрганизации=СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрЗаменить(Строка(Выборка.НомерТочки)," ",""));
		КонецЕсли; 
		
		ДокОбъект.СуммаОперации = Выборка.СуммаИнкассации;
		
		Движение = ДокОбъект.Движения.Хозрасчетный.Добавить();
		Движение.Период = Выборка.Дата;
		Движение.Организация = ДокОбъект.Организация;
		Движение.СчетДт = СоединениеСБазой.ПланыСчетов.Хозрасчетный.ПереводыВПути;
		Движение.СчетКт = СоединениеСБазой.ПланыСчетов.Хозрасчетный.КассаОрганизации;
		Движение.ПодразделениеКт = ПодразделениеОрганизации;
		Движение.Сумма = Выборка.СуммаИнкассации;
		//АК БЕЛН 11.04.2017+
		Движение.СубконтоКт.СтатьиДвиженияДенежныхСредств=СтатьяДДСПокуп;
		Движение.СубконтоДт.СтатьиДвиженияДенежныхСредств=СтатьяДДСПокуп;
		Движение.ПодразделениеДт = ПодразделениеОрганизации;
		//АК БЕЛН 11.04.2017-
		
		ДокОбъект.Комментарий = "Инкассация по ЛУ " + Выборка.ТорговаяТочка;
		ДокОбъект.Записать();
		
	КонецЦикла;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокСсылка = СоединениеСБазой.Документы.ОперацияБух.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", Строка(Выборка.Ссылка.УникальныйИдентификатор())));
		Если Найти(СоединениеСБазой.String(ДокСсылка), "<Объект не найден") > 0 Тогда
			Если Выборка.Проведен = Ложь Тогда
				Продолжить;
			КонецЕсли;
			ДокОбъект = СоединениеСБазой.Документы.ОперацияБух.СоздатьДокумент();
			СсылкаОбъект = СоединениеСБазой.Документы.ОперацияБух.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", Строка(Выборка.Ссылка.УникальныйИдентификатор())));
			ДокОбъект.УстановитьСсылкуНового(СсылкаОбъект);
		Иначе
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		КонецЕсли;	
		ДокОбъект.Движения.Хозрасчетный.Очистить();
		
		ДокОбъект.Дата = Выборка.Дата;
		СтрокаОрг = ТабОрг.Найти(Выборка.Организация, "Ссылка");
		Если СтрокаОрг <> Неопределено Тогда
			ДокОбъект.Организация = СтрокаОрг.ОргБух;
		КонецЕсли;	
		СтрокаПодр = ТабПодр.Найти(Выборка.ТорговаяТочка, "Ссылка");
		ПодразделениеОрганизации = Неопределено;
		Если СтрокаПодр <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаПодр.ДатаПерехода)
				И СтрокаПодр.ДатаПерехода <= Выборка.Дата Тогда
				Если ЗначениеЗаполнено(СтрокаПодр.КодОПБух) Тогда
					ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаПодр.КодОПБух,,, ДокОбъект.Организация);
				КонецЕсли;	
			Иначе
				//Если СтрокаДанные.Организация = ОргСП Тогда
				//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОРП.Организация);
				//Иначе
				//	ДокОРП.ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				//КонецЕсли;	
				ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОбъект.Организация);
				//АК БЕЛН 11.04.2017+
				Если ДокОбъект.Организация.ИНН="7726660031" Тогда //ЛП
					ПодразделениеОрганизации = ПодрЛП;
				КонецЕсли;
				//АК БЕЛН 11.04.2017-
			КонецЕсли;
		Иначе	
			//ПодразделениеОрганизации = СтрокаДанные.ПодразделениеБух;
		КонецЕсли;
		
		Если  СоединениеСБазой.ЗначениеЗаполнено(ПодразделениеОрганизации)=Ложь Тогда
			ПодразделениеОрганизации=СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрЗаменить(Строка(Выборка.НомерТочки)," ",""));
		КонецЕсли; 
		
		ДокОбъект.СуммаОперации = Выборка.СуммаДокумента;
		
		Движение = ДокОбъект.Движения.Хозрасчетный.Добавить();
		Движение.Период = Выборка.Дата;
		Движение.Организация = ДокОбъект.Организация;
		Движение.СчетКт = СоединениеСБазой.ПланыСчетов.Хозрасчетный.ПереводыВПути;
		Движение.ПодразделениеКт = ПодразделениеОрганизации;
		Движение.СчетДт = СоединениеСБазой.ПланыСчетов.Хозрасчетный.КассаОрганизации;
		Движение.Сумма = Выборка.СуммаДокумента;
		//АК БЕЛН 11.04.2017+
		Движение.СубконтоДт.СтатьиДвиженияДенежныхСредств=СтатьяДДСПокуп;
		Движение.СубконтоКт.СтатьиДвиженияДенежныхСредств=СтатьяДДСПокуп;
		Если ДокОбъект.Организация.ИНН="7726660031" Тогда //ЛП
			ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей 12",,, ДокОбъект.Организация);
		Иначе	
			ПодразделениеОрганизации = СоединениеСБазой.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Управление розницей",,, ДокОбъект.Организация);
		КонецЕсли; 
		Движение.ПодразделениеДт = ПодразделениеОрганизации;
		//АК БЕЛН 11.04.2017-
		
		
		ДокОбъект.Комментарий = "Инкассация получил склад от " + Выборка.ТорговаяТочка;
		ДокОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВыполнитьВыгрузку() Экспорт
	
	//ИмяСервераИнформационнойБазыДляПодключения = "srv-sql02";
	//ИмяИнформационнойБазыНаСервереДляПодключения = "BP_Corp_Deb";
	
	Если НЕ ВыполнитьПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Выгрузка данных");
	#КонецЕсли
	
	ВыполнитьВыгрузку_Вкусвилл();
	ВыполнитьВыгрузку_Остальные();
	
КонецПроцедуры	

Функция ПолучитьСклад(ТабСклады, Подразделение, ИмяККМ)
	
	СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
	СтруктураПоиска.Вставить("ПодразделениеОрганизации", Подразделение);
	СтрокиККМ = ТабСклады.НайтиСтроки(СтруктураПоиска);
	Если СтрокиККМ.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не найден склад по поздраделению: " + СоединениеСБазой.String(Подразделение) + " для ККМ: " + ИмяККМ);
		Возврат Неопределено;
	Иначе 
		ККМВозврат = СтрокиККМ.Получить(0).Ссылка;
		Для Каждого СтрокаККМ Из СтрокиККМ Цикл
			Если Найти(СтрокаККМ.Наименование, ИмяККМ) > 0 Тогда
				ККМВозврат = СтрокаККМ.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Возврат ККМВозврат;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПодразделениеБух(ТабПодрБух, НомерТочки)
	
	Для Каждого СтрокаТаб Из ТабПодрБух Цикл
		Если СокрЛП(СтрокаТаб.Префикс) = СокрЛП(Формат(НомерТочки, "ЧГ=0")) Тогда
			Возврат СтрокаТаб.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

//+++АК Susk (Суслин К.В.) 2017.12.06 ИП-00017374
Функция ПолучитьРегИФНС(ТаблицаРегИФНСБух, ОКТМО, КПП, ОргБух)
	
	СтруктураПоиска = СоединениеСБазой.NewObject("Структура");
	СтруктураПоиска.Вставить("Владелец", ОргБух);
	СтруктураПоиска.Вставить("КПП", КПП);
	СтруктураПоиска.Вставить("КодПоОКТМО", ОКТМО);
	
	НайдСтроки = ТаблицаРегИФНСБух.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НСтр Из НайдСтроки Цикл
		Возврат НСтр.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;	
		
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.12.06 ИП-00017374
Функция ПолучитьТаблицуРегИФНСБух()
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
		|	РегистрацияВИФНС.Ссылка,
		|	РегистрацияВИФНС.Владелец,
		|	РегистрацияВИФНС.КПП,
		|	РегистрацияВИФНС.КодПоОКТМО
		|ИЗ
		|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
		|ГДЕ
		|	НЕ РегистрацияВИФНС.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.12.06 ИП-00017374
Функция ПолучитьТаблицуОрганизацийБух()
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
