
&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ДиалогВыбораФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок="Выберите файл для загрузки";
	ДиалогВыбораФайла.Фильтр="Текстовый документ (*.txt)|*.txt";
	Если ДиалогВыбораФайла.Выбрать() тогда
		
		Объект.Файл = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Объект.Файл) Тогда
		Возврат;
	КонецЕсли;	
		
	Текст = Новый ЧтениеТекста(Объект.Файл);
	Стр = Текст.ПрочитатьСтроку();
	
	Объект.Эквайринг.Очистить();
	
	
	Попытка
	    ТекстЭквайринг.Прочитать(Объект.Файл);
	Исключение
	    Сообщить("Ошибка открытия файла!");
	    Возврат;
	КонецПопытки;
	
	ЗаполнитьЭквайрингНаСервере();
	РаспознатьНаСервере();
	РазделитьСопоставленныеНаСервере();
	СопоставитьДополнительноНаСервере();
	ПолучитьЧекиSQLНаСервере(ОсновнаяДата);
	ОбновитьДанныеПодвала();
	
КонецПроцедуры

Процедура ЗаполнитьЭквайрингНаСервере()
	
	ВсегоСтрок = ТекстЭквайринг.КоличествоСтрок();
	Индикатор = 0;	
	Для НомерСтроки = 2 по  ВсегоСтрок Цикл
		
    	Стр = ТекстЭквайринг.ПолучитьСтроку(НомерСтроки);
		Массив = РазложитьСтрокуВМассивПодстрок(Стр,Символы.Таб);
		
		НоваяСтрока = Объект.Эквайринг.Добавить();
		НоваяСтрока.Транзакция = Массив[0];
		НоваяСтрока.Банк = Массив[1];
		НоваяСтрока.Отделение = Массив[2];
		НоваяСтрока.Точка = Массив[3];
		//НазваниеID = Массив[4];
		//Поз = Найти(НазваниеID," ");
		//Название = Лев(НазваниеID,Поз-1);
		//IDТерминал = Сред(НазваниеID,Поз+1,СтрДлина(НазваниеID)-Поз);		
		//НоваяСтрока.Название =  Название;
		НоваяСтрока.IDТерминал = Массив[4];;
		НоваяСтрока.Терминал = Массив[5];
		НоваяСтрока.ДатаТранзакции = Массив[6];
		НоваяСтрока.ДатаРасчета = Дата(Массив[7] + " 00:00:00");
		НоваяСтрока.СуммаТранзакции = Массив[8];
		НоваяСтрока.СуммаРасчета = Массив[9];
		НоваяСтрока.НомерКарты  = Массив[10];
		
		//Индикатор = Индикатор + 1;
		//Если Индикатор % 1000 Тогда
		//	Состояние("Загружено строк " + Индикатор + " из " + ВсегоСтрок,Индикатор/ВсегоСтрок);
		//КонецЕсли;	
		//	
			
			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Эквайринг.ДатаТранзакции, ДЕНЬ) КАК ДатаТранзакции
		|ПОМЕСТИТЬ втТаблицаДаты
		|ИЗ
		|	&Эквайринг КАК Эквайринг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаДаты.ДатаТранзакции КАК ДатаТранзакции,
		|	СУММА(1) КАК Всего
		|ИЗ
		|	втТаблицаДаты КАК втТаблицаДаты
		|
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаДаты.ДатаТранзакции
		|
		|УПОРЯДОЧИТЬ ПО
		|	Всего УБЫВ";
	
	Запрос.УстановитьПараметр("Эквайринг",Объект.Эквайринг.Выгрузить(,"ДатаТранзакции"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Всего = 0;
	ДатаТранзакцииНачало = Дата(3999,1,1);
	ДатаТранзакцииОкончание = Дата(1,1,1);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Всего > Всего Тогда
			ОсновнаяДата = ВыборкаДетальныеЗаписи.ДатаТранзакции;
			Всего =  ВыборкаДетальныеЗаписи.Всего;
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.ДатаТранзакции < ДатаТранзакцииНачало Тогда
			ДатаТранзакцииНачало =  ВыборкаДетальныеЗаписи.ДатаТранзакции;
		КонецЕсли;	
		Если ВыборкаДетальныеЗаписи.ДатаТранзакции > ДатаТранзакцииОкончание Тогда
			ДатаТранзакцииОкончание =  ВыборкаДетальныеЗаписи.ДатаТранзакции;
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры	

&НаКлиенте
Процедура РаспознатьФайл(Команда)
	
	РаспознатьНаСервере();	
	
КонецПроцедуры

Процедура РаспознатьНаСервере()
	
	ТаблицаРаспознание = Объект.Эквайринг.Выгрузить();
	Для каждого строка из ТаблицаРаспознание Цикл
		строка.ДатаТранзакции = НачалоДня(строка.ДатаТранзакции);	
	КонецЦикла;	
	
	
	ТаблицаРаспознание.Свернуть("Терминал,IDТерминал,ДатаТранзакции","СуммаТранзакции");	
	
	//Элементы.СтрокаСостояния.Заголовок = "Получение данных листов учета...";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛистУчетаОплатыПоБанковскимКартам.Ссылка КАК ЛистУчета,
		|	ЛистУчетаОплатыПоБанковскимКартам.Терминал,
		|	ЛистУчетаОплатыПоБанковскимКартам.ОсновноеСредство,
		|	ЛистУчетаОплатыПоБанковскимКартам.Сумма - ЛистУчетаОплатыПоБанковскимКартам.СуммаВозврата КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл ЕСТЬ NULL
		|				ИЛИ ПОДСТРОКА(ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл, 1, 1) = """"
		|				ИЛИ ПОДСТРОКА(ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл, 1, 1) = "" ""
		|			ТОГДА ЛистУчетаОплатыПоБанковскимКартам.Терминал.ID_SQL
		|		ИНАЧЕ ЛистУчетаОплатыПоБанковскимКартам.РабочееМестоВСкл
		|	КОНЕЦ КАК РабочееМестоВСкл,
		|	ЛистУчетаОплатыПоБанковскимКартам.Ссылка.ТорговаяТочка.НомерТочки КАК НомерТочки,
		|	НАЧАЛОПЕРИОДА(ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата, ДЕНЬ) КАК ДатаЛиста
		|ИЗ
		|	Документ.ЛистУчета.ОплатыПоБанковскимКартам КАК ЛистУчетаОплатыПоБанковскимКартам
		|ГДЕ
		|	ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Проведен = ИСТИНА
		|	И ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата <= &ДатаОкончания
		|	И ЛистУчетаОплатыПоБанковскимКартам.Ссылка.Дата >= &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаТранзакцииНачало));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаТранзакцииОкончание));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.Сопоставление.Загрузить(РезультатЗапроса);	

	Индикатор = 0;
	ВсегоСтрок = ТаблицаРаспознание.Количество();
		
	ДублиТерминалов.Очистить();
	
	Для каждого Строка Из ТаблицаРаспознание Цикл
				
		Терминал = ПолучитьТерминал(Строка.Терминал,Строка.IDТерминал);
		Если Терминал <> Неопределено Тогда			
			Отбор = Новый Структура;
			Отбор.Вставить("Терминал",Терминал);
			Отбор.Вставить("ДатаЛиста",Строка.ДатаТранзакции);
			
			ПоискТерминала = Объект.Сопоставление.НайтиСтроки(Отбор);
			Если ПоискТерминала.Количество() = 1 Тогда
				
				СтрокаСопоставление = ПоискТерминала[0];
			ИначеЕсли ПоискТерминала.Количество() > 1 Тогда
				СтрокаСопоставление = ПоискТерминала[0];
				//Сообщить("Тарминал: " + Строка.Терминал + " найдено более одной строки");
				ДублиТерминалов.Добавить(Строка.Терминал);
			Иначе 
				СтрокаСопоставление = Объект.Сопоставление.Добавить();
			КонецЕсли;
		Иначе 
			СтрокаСопоставление = Объект.Сопоставление.Добавить();
		КонецЕсли;					
				
		СтрокаСопоставление.ТерминалСбербанк   = Строка.Терминал;
		СтрокаСопоставление.ТерминалIDСбербанк = Строка.IDТерминал; 
	    СтрокаСопоставление.СуммаБанк  = Строка.СуммаТранзакции;
		СтрокаСопоставление.ДатаБанк =  Строка.ДатаТранзакции;
		СтрокаСопоставление.НомерТочкиПоID = НомерТочкиПоID(Строка.IDТерминал);
		

		//Индикатор = Индикатор + 1;
		//Если Индикатор % 100 Тогда
		//	Состояние("Сопоставлено строк " + Индикатор + " из " + ВсегоСтрок,Индикатор/ВсегоСтрок);
		//КонецЕсли;	
			

	КонецЦикла;
	
	Для каждого строка из Объект.Сопоставление Цикл
		
		строка.Разница = строка.Сумма - строка.СуммаБанк;	
		строка.НомерТочки = СтрЗаменить(СтрЗаменить(строка.НомерТочки," ",""),Символы.НПП,"");
		
	КонецЦикла;	
		
	
	
КонецПроцедуры

Функция НомерТочкиПоID(знач IDТерминал)
	
	ВсегоСимволов = СтрДлина(IDТерминал);
	Разделители = "_ -.,";	
	Разложение = Новый Массив;
	НачалоЭлемента = 1;
	Для НомерСимвола = 1 по ВсегоСимволов Цикл
		ЭтоРазделитель = Найти(Разделители,Сред(IDТерминал,НомерСимвола,1)) <> 0;
		Если ЭтоРазделитель Тогда
			Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-НачалоЭлемента);	
		    НачалоЭлемента=НомерСимвола+1;
			Если Строка <> "" Тогда
				Разложение.Добавить(Строка);					
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-1);	
	  НачалоЭлемента=НомерСимвола+1;
	Если Строка <> "" Тогда
		Разложение.Добавить(Строка);					
	КонецЕсли;
	
	 
	Для каждого Элемент из Разложение Цикл
		
		Если ТолькоЦифрыВСтроке(Элемент) Тогда			
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;	

	Возврат "";	
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки)  
     
    Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда 
        Возврат Ложь; 
    КонецЕсли; 
     
    Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда 
        Возврат Истина; 
    КонецЕсли; 
     
    Для а = 1 По СтрДлина(СтрокаПроверки) Цикл 
        КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1)); 
        Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда 
            Возврат Ложь; 
        КонецЕсли; 
    КонецЦикла; 
     
    Возврат Истина; 
     
КонецФункции	

Функция ПолучитьТерминал(Терминал,IDТерминал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Терминалы.Ссылка
		|ИЗ
		|	Справочник.Терминалы КАК Терминалы
		|ГДЕ
		|	Терминалы.Наименование = &Наименование
		|	ИЛИ Терминалы.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Терминал);
	Запрос.УстановитьПараметр("Наименование", Терминал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Сообщить("Не найден: "+ Терминал + " " + IDТерминал);
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ОбновитьДанныеПодвала()
	
	Сумма =  Объект.Сопоставление.Итог("Сумма");
	СуммаБанк =  Объект.Сопоставление.Итог("СуммаБанк");
	СуммаДоставка =  Объект.Сопоставление.Итог("СуммаДоставка");
	СуммаВозврат =  Объект.Сопоставление.Итог("СуммаВозврат");	
	Разница =  Объект.Сопоставление.Итог("Разница");
	НесопоставленныеРазница = Объект.Различия.Итог("Разница");
	НесопоставленныеСумма   = Объект.Различия.Итог("Сумма");
	НесопоставленныеСуммаБанк = Объект.Различия.Итог("СуммаБанк");
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") 
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РазделитьСопоставленныеНаСервере()
	
	Сопоставление = Объект.Сопоставление.Выгрузить();
	Сопоставление.Колонки.Добавить("Сопоставлен");
	Для каждого Строка из Сопоставление Цикл
		Строка.Сопоставлен = (Строка.Разница = 0);		
	КонецЦикла;	
	СтруктураОтбора = Новый Структура("Сопоставлен",Истина);
	Результат = Сопоставление.Скопировать(СтруктураОтбора);	
	Объект.Сопоставление.Загрузить(Результат);
	СтруктураОтбора = Новый Структура("Сопоставлен",Ложь);
	Результат = Сопоставление.Скопировать(СтруктураОтбора);	
	Объект.Различия.Загрузить(Результат);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопоставленные(Команда)
	//УдалитьСопоставленныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СопоставитьДополнительноНаСервере()
	
	
	
	Для каждого строка из Объект.Различия Цикл
		строка.НомерТериналаПоID = НомерТерминалаПоID(строка.ТерминалIDСбербанк);		
	КонецЦикла;	
	
	
	ТаблицаНесопоставленные = Объект.Различия.Выгрузить();
	ТаблицаНесопоставленные.Колонки.Добавить("ЛистЗаполнен");
	ТаблицаНесопоставленные.Колонки.Добавить("СуммыЗаполнены");
	 
	
	СуммаБанк = ТаблицаНесопоставленные.Итог("СуммаБанк");
	Сумма = ТаблицаНесопоставленные.Итог("Сумма");
	
	Для каждого Строка из ТаблицаНесопоставленные Цикл
		Строка.ЛистЗаполнен = ЗначениеЗаполнено(Строка.ЛистУчета);
		Строка.СуммыЗаполнены = (Строка.Сумма > 0 И Строка.СуммаБанк > 0);
	КонецЦикла;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("СуммыЗаполнены",Истина);		
	СуммыЗаполнены = ТаблицаНесопоставленные.Скопировать(СтруктураОтбор);
	
	Для каждого Строка из СуммыЗаполнены цикл
		Строка.Ошибка = "Суммы не совпадают";		
	КонецЦикла;	
	
	
	СуммыЗаполненыСуммаБанк = СуммыЗаполнены.Итог("СуммаБанк");
	СуммыЗаполненыСумма = СуммыЗаполнены.Итог("Сумма");
	
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ЛистЗаполнен",Истина);
	СтруктураОтбор.Вставить("СуммыЗаполнены",Ложь);
	
	ЗаполненныеЛисты = ТаблицаНесопоставленные.Скопировать(СтруктураОтбор);
	
	ЗаполненныеЛистыСуммаБанк = ЗаполненныеЛисты.Итог("СуммаБанк");
	ЗаполненныеЛистыСумма = ЗаполненныеЛисты.Итог("Сумма");
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ЛистЗаполнен",Ложь);
	СтруктураОтбор.Вставить("СуммыЗаполнены",Ложь);

	НеЗаполненные = ТаблицаНесопоставленные.Скопировать(СтруктураОтбор);
	НеЗаполненные.Колонки.Добавить("Сопоставлена");
		
	НеЗаполненныеСуммаБанк = НеЗаполненные.Итог("СуммаБанк");
	НеЗаполненныеСумма = НеЗаполненные.Итог("Сумма");

	Для каждого Строка из НеЗаполненные Цикл
		Строка.Сопоставлена = Ложь;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РабочееМестоВСКЛ",Строка.НомерТериналаПоID);
		СтруктураПоиска.Вставить("ДатаЛиста",Строка.ДатаБанк);
		ПоискСтрок = ЗаполненныеЛисты.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() = 1 Тогда
			Строка.Сопоставлена = Истина;	
			ЗаполнитьЗначенияСвойств(ПоискСтрок[0],Строка,"ТерминалIDСбербанк,ТерминалСбербанк,НомерТочкиПоID,НомерТериналаПоID,СуммаБанк,ДатаБанк");
			ПоискСтрок[0].Ошибка = "Не совпадают номера терминалов";
			ПоискСтрок[0].Сопоставление = "Сопоставлен по ID терминала банка";
		КонецЕсли;	
				
	КонецЦикла;	
	
	СтруктураОтбор = Новый Структура("Сопоставлена",Ложь);
	НеЗаполненные = НеЗаполненные.Скопировать(СтруктураОтбор);
	
	ЗаполненныеЛистыСуммаБанкПослеСопоставления = ЗаполненныеЛисты.Итог("СуммаБанк");
	ЗаполненныеЛистыСуммаПослеСопоставления = ЗаполненныеЛисты.Итог("Сумма");
	
	НеЗаполненныеСуммаБанкПослеСопоставления = НеЗаполненные.Итог("СуммаБанк");
	НеЗаполненныеСуммаПослеСопоставления = НеЗаполненные.Итог("Сумма");
	
	
	Разница1= СуммаБанк - СуммыЗаполненыСуммаБанк- ЗаполненныеЛистыСуммаБанк-НеЗаполненныеСуммаБанк;
	Разница2= Сумма - СуммыЗаполненыСумма- ЗаполненныеЛистыСумма-НеЗаполненныеСумма;	
	Разница3= СуммаБанк - СуммыЗаполненыСуммаБанк- ЗаполненныеЛистыСуммаБанкПослеСопоставления-НеЗаполненныеСуммаБанкПослеСопоставления;
	Разница4= Сумма - СуммыЗаполненыСумма- ЗаполненныеЛистыСуммаПослеСопоставления-НеЗаполненныеСуммаПослеСопоставления;	
	
	
	Для каждого Строка из НеЗаполненные Цикл
		Строка.Сопоставлена = Ложь;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерТочки",Строка.НомерТочкиПоID);
		СтруктураПоиска.Вставить("Сумма",Строка.СуммаБанк);
		СтруктураПоиска.Вставить("ДатаЛиста",Строка.ДатаБанк);
		
		ПоискСтрок = ЗаполненныеЛисты.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() = 1 Тогда
			Строка.Сопоставлена = Истина;	
			ЗаполнитьЗначенияСвойств(ПоискСтрок[0],Строка,"ТерминалIDСбербанк,ТерминалСбербанк,НомерТочкиПоID,НомерТериналаПоID,СуммаБанк,ДатаБанк");
			ПоискСтрок[0].Ошибка = "Не совпадают номера терминалов";
			ПоискСтрок[0].Сопоставление = "Сопоставлен по номеру точки и сумме";
		КонецЕсли;	
				
	КонецЦикла;	
	
	СтруктураОтбор = Новый Структура("Сопоставлена",Ложь);
	НеЗаполненные = НеЗаполненные.Скопировать(СтруктураОтбор);
	
	
	Для каждого Строка из НеЗаполненные Цикл
		Строка.Сопоставлена = Ложь;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерТочки",Строка.НомерТочкиПоID);
		СтруктураПоиска.Вставить("СуммаБанк",0);
		СтруктураПоиска.Вставить("ДатаЛиста",Строка.ДатаБанк);
		
		ПоискСтрок = ЗаполненныеЛисты.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() = 1 Тогда
			Строка.Сопоставлена = Истина;	
			ЗаполнитьЗначенияСвойств(ПоискСтрок[0],Строка,"ТерминалIDСбербанк,ТерминалСбербанк,НомерТочкиПоID,НомерТериналаПоID,СуммаБанк,ДатаБанк");
			ПоискСтрок[0].Ошибка = "Не совпадают номера терминалов";
			ПоискСтрок[0].Сопоставление = "Сопоставлен только по номеру точки";
		КонецЕсли;	
				
	КонецЦикла;	
	
	СтруктураОтбор = Новый Структура("Сопоставлена",Ложь);
	НеЗаполненные = НеЗаполненные.Скопировать(СтруктураОтбор);
	
	
	Объект.Различия.Загрузить(СуммыЗаполнены);
	
	Для каждого Строка из ЗаполненныеЛисты Цикл    
		Если  Строка.ДатаЛиста = ОсновнаяДата ИЛИ Строка.СуммаБанк <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Объект.Различия.Добавить(),Строка);
		КонецЕсли;	
	КонецЦикла;	
	Для каждого Строка из НеЗаполненные Цикл
		ЗаполнитьЗначенияСвойств(Объект.Различия.Добавить(),Строка);
		Строка.Ошибка = "Не найден лист учета";	
	КонецЦикла;		
	Для каждого строка из Объект.Различия цикл
		строка.Разница = строка.Сумма - строка.СуммаБанк;
	КонецЦикла;
	РазличияТаблица = Объект.Различия.Выгрузить();
	
	Для каждого строка из Объект.Различия цикл	
				
		Если строка.СуммаБанк = 0 и строка.НомерТочкиПоID = "" Тогда
			СтруктураОтбора = Новый Структура("НомерТочки",строка.НомерТочки);
			ОбщаяСумма = РазличияТаблица.Скопировать(СтруктураОтбора).Итог("Сумма");
			СтруктураОтбора = Новый Структура("НомерТочкиПоID",строка.НомерТочки);
			ОбщаяСуммаБанк = РазличияТаблица.Скопировать(СтруктураОтбора).Итог("СуммаБанк");
			Если ОбщаяСумма <> 0 и ОбщаяСумма = ОбщаяСуммаБанк Тогда
				строка.Ошибка = "Не верно разнесены данные в листе учета";	
				строка.Сопоставление = "Общая сумма по точке совпадает";
			КонецЕсли;	
			СтрокиПоиск = Объект.Различия.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаПоиск из СтрокиПоиск Цикл
				строкаПоиск.Ошибка = "Не верно разнесены данные в листе учета";	
				строкаПоиск.Сопоставление = "Общая сумма по точке совпадает";		
			КонецЦикла;	
		КонецЕсли;			
		
		ЭтоДубль = Ложь;
		
		Для каждого элемент из ДублиТерминалов Цикл
			Если элемент = строка.Терминал Тогда
				ЭтоДубль = Истина;
			КонецЕсли;			
		КонецЦикла;	
		
		Если ЭтоДубль Тогда
			строка.Ошибка = "Терминал дублируется";	
		КонецЕсли;	
			
		
	КонецЦикла;
	
	Для каждого строка из Объект.Различия Цикл
		строка.CashID = ПолучитьCashID(строка);
	КонецЦикла;	
	
	ОбновитьДанныеПодвала();
		
КонецПроцедуры

Функция ПолучитьCashID(Строка)
	
	Если ЗначениеЗаполнено(Строка.ТерминалIDСбербанк) Тогда 
		
		Возврат CashIDПоIDСбербанк(Строка.ТерминалIDСбербанк);
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Строка.РабочееМестоВСКЛ) Тогда
		ПоискРабочееМесто = Справочники.РабочиеМеста.НайтиПоНаименованию(Строка.РабочееМестоВСКЛ);
		Если ПоискРабочееМесто <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПоискРабочееМесто.ИД) Тогда
				Возврат ПоискРабочееМесто.ИД;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.Терминал) и Не ЗначениеЗаполнено(Строка.ТерминалСбербанк) Тогда 
		
		Если ЗначениеЗаполнено(Строка.НомерТочки) Тогда
			Возврат Число(Строка.НомерТочки+"1");	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.НомерТочкиПоID) Тогда
			Возврат Число(Строка.НомерТочкиПоID+"1");	
		КонецЕсли;
		
	КонецЕсли;	
			
	Если ЗначениеЗаполнено(Строка.НомерТочки) Тогда
		Возврат Число(Строка.НомерТочки+"1");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.НомерТочкиПоID) Тогда
		Возврат Число(Строка.НомерТочкиПоID+"1");	
	КонецЕсли;
	
	Возврат 0;
	
	
КонецФункции	

Функция CashIDПоIDСбербанк(знач IDТерминал)
	
	Если Не ЗначениеЗаполнено(IDТерминал) Тогда
		Возврат 0;
	КонецЕсли;	
		
	ВсегоСимволов = СтрДлина(IDТерминал);
	Разделители = "_ -.,";	
	Разложение = Новый Массив;
	НачалоЭлемента = 1;
	Для НомерСимвола = 1 по ВсегоСимволов Цикл
		ЭтоРазделитель = Найти(Разделители,Сред(IDТерминал,НомерСимвола,1)) <> 0;
		Если ЭтоРазделитель Тогда
			Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-НачалоЭлемента);	
		    НачалоЭлемента=НомерСимвола+1;
			Если Строка <> "" Тогда
				Разложение.Добавить(Строка);					
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-1);	
	  НачалоЭлемента=НомерСимвола+1;
	Если Строка <> "" Тогда
		Разложение.Добавить(Строка);					
	КонецЕсли;
	
	ВсегоЭлементов = 0;
	Результат = "";
	Для каждого Элемент из Разложение Цикл
		
		Если ТолькоЦифрыВСтроке(Элемент) Тогда	
			ВсегоЭлементов	= ВсегоЭлементов + 1;
			Результат = Результат + Элемент;
		КонецЕсли;
		
	КонецЦикла;	

	Если ВсегоЭлементов = 1 Тогда			
		Результат = Результат + "1";
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(Результат) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Число(Результат);
	
КонецФункции


&НаКлиенте
Процедура СопоставитьДополнительно(Команда)
	
	СопоставитьДополнительноНаСервере();	
		
КонецПроцедуры

Функция НомерТерминалаПоID(знач IDТерминал)
	
	ВсегоСимволов = СтрДлина(IDТерминал);
	Разделители = "_ -.,";	
	Разложение = Новый Массив;
	НачалоЭлемента = 1;
	Для НомерСимвола = 1 по ВсегоСимволов Цикл
		ЭтоРазделитель = Найти(Разделители,Сред(IDТерминал,НомерСимвола,1)) <> 0;
		Если ЭтоРазделитель Тогда
			Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-НачалоЭлемента);	
		    НачалоЭлемента=НомерСимвола+1;
			Если Строка <> "" Тогда
				Разложение.Добавить(Строка);					
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	Строка = Сред(IDТерминал,НачалоЭлемента,НомерСимвола-1);	
	  НачалоЭлемента=НомерСимвола+1;
	Если Строка <> "" Тогда
		Разложение.Добавить(Строка);					
	КонецЕсли;
	
	ЭтоПервый = Истина;
	Результат = "";
	Для каждого Элемент из Разложение Цикл
		
		Если ТолькоЦифрыВСтроке(Элемент) Тогда	
			Если не ЭтоПервый Тогда
				Результат = Результат+".";
			КонецЕсли;	
			Результат = Результат + Элемент;
			
			ЭтоПервый = Ложь;
		КонецЕсли;
		
	КонецЦикла;	

	Если Результат <> "" Тогда			
		Результат = "ККМ " + Результат;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифровкуПоОперациям(Команда)
	
	ТекущаяСтрока = Элементы.Различия.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ОтборТерминал = ТекущаяСтрока.ТерминалСбербанк;
		ОтборCashID = ТекущаяСтрока.CashID;
		СуммаЛистаУчета = ТекущаяСтрока.Сумма;
		ДатаБанк = ТекущаяСтрока.ДатаБанк;
		РасшифровкаПоОперациям();
		Элементы.Страницы.ТекущаяСтраница = Элементы.РасшифровкаЭквайринг;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПоОперациям()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Терминал",ОтборТерминал);

	Результат = Объект.Эквайринг.Выгрузить().Скопировать(Отбор);
	Результат.Колонки.Добавить("ДатаБанк");	
	
	Для каждого Строка из Результат Цикл
		Строка.ДатаБанк = (НачалоДня(Строка.ДатаТранзакции) = ДатаБанк);				
	КонецЦикла;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаБанк",Истина);
	РезультатСотбором = Результат.Скопировать(Отбор);
	
	РасшифровкаЭквайрингБезОтбора.Загрузить(РезультатСотбором);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТерминалID",ОтборCashID);
		
	ЧекиSQL = Объект.ЧекиSQL.Выгрузить(,"ТерминалID,BaseSum,SummBank,CashCheckNo").Скопировать(Отбор);
	ЧекиSQL.Колонки.Добавить("Сопоставлен");
	
	//Ищем соответствие по сумме банк
	Для каждого строка из РасшифровкаЭквайрингБезОтбора Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("SummBank",строка.СуммаТранзакции);	
	
		ПоискСтрок = ЧекиSQL.НайтиСтроки(СтруктураПоиска);
		
		Для каждого найденнаяСтрока из ПоискСтрок Цикл
			
			Если найденнаяСтрока.CashCheckNo <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Если найденнаяСтрока.Сопоставлен <> Истина Тогда
				найденнаяСтрока.Сопоставлен = Истина;	
				строка.НомерЧекаККМ = найденнаяСтрока.CashCheckNo;
				строка.СуммаБанкЧек = найденнаяСтрока.SummBank;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
				
	КонецЦикла;	
	
	//Ищем с округлением округления	
	Для каждого строка из РасшифровкаЭквайрингБезОтбора Цикл
		
		Если строка.НомерЧекаККМ > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("SummBank",Окр(строка.СуммаТранзакции,0));	
	
		ПоискСтрок = ЧекиSQL.НайтиСтроки(СтруктураПоиска);
		
		Для каждого найденнаяСтрока из ПоискСтрок Цикл
			
			Если найденнаяСтрока.CashCheckNo <= 0 Тогда
				строка.Ошибка = "Ошибка с округлением. Найден чек не пробитый чек на сумму: " +строка.СуммаТранзакции;
				найденнаяСтрока.Сопоставлен = Истина;
				строка.СуммаБанкЧек =найденнаяСтрока.SummBank;
				строка.НомерЧекаККМ = найденнаяСтрока.CashCheckNo;
				строка.ЭтоОшибка = Истина;
				Прервать;
			КонецЕсли;	
			
			Если найденнаяСтрока.Сопоставлен <> Истина Тогда
				строка.Ошибка = "Ошибка с округлением";
				найденнаяСтрока.Сопоставлен = Истина;
				строка.СуммаБанкЧек = найденнаяСтрока.SummBank;
				строка.НомерЧекаККМ = найденнаяСтрока.CashCheckNo;
				строка.ЭтоОшибка = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	
	//Ищем по общей сумме	
	Для каждого строка из РасшифровкаЭквайрингБезОтбора Цикл
		
		Если строка.НомерЧекаККМ > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("BaseSum",строка.СуммаТранзакции);	
	
		ПоискСтрок = ЧекиSQL.НайтиСтроки(СтруктураПоиска);
		
		Для каждого найденнаяСтрока из ПоискСтрок Цикл
			
			Если найденнаяСтрока.CashCheckNo <= 0 Тогда
				строка.Ошибка = "Найден чек не пробитый чек на сумму: " +строка.СуммаТранзакции;
				найденнаяСтрока.Сопоставлен = Истина;
				строка.СуммаБанкЧек = найденнаяСтрока.SummBank;
				строка.НомерЧекаККМ = найденнаяСтрока.CashCheckNo;
				строка.ЭтоОшибка = Истина;
				Прервать;
			КонецЕсли;	
			
			Если найденнаяСтрока.Сопоставлен <> Истина Тогда
				строка.Ошибка = "Найден чек "+найденнаяСтрока.CashCheckNo+" с оплатой наличными: " +строка.СуммаТранзакции;
				найденнаяСтрока.Сопоставлен = Истина;
				строка.СуммаБанкЧек = найденнаяСтрока.SummBank;
				строка.НомерЧекаККМ = найденнаяСтрока.CashCheckNo;
				строка.ЭтоОшибка = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
		
	Для каждого Чек из ЧекиSQL Цикл
		
		Если Чек.CashCheckNo <= 0 Тогда
			Продолжить;
		КонецЕсли;	
	
		если Чек.Сопоставлен = Истина Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Чек.SummBank > 0 Тогда
		
			НоваяСтрока = РасшифровкаЭквайрингБезОтбора.Добавить();
			НоваяСтрока.НомерЧекаККМ = Чек.CashCheckNo;
			НоваяСтрока.СуммаБанкЧек = Чек.SummBank;
			НоваяСтрока.Ошибка = "Чек не найден в расшифровке банка";
			НоваяСтрока.ЭтоОшибка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Для каждого Строка из РасшифровкаЭквайрингБезОтбора Цикл
		
		Если Строка.СуммаБанкЧек = 0 Тогда
			Строка.ЭтоОшибка = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	СуммаЭквайрингРасшифровка = РасшифровкаЭквайрингБезОтбора.Итог("СуммаТранзакции");	
	СуммаБанкЧек = РасшифровкаЭквайрингБезОтбора.Итог("СуммаБанкЧек");
	
	Если  СуммаБанкЧек <> СуммаЛистаУчета Тогда
		НоваяСтрока = РасшифровкаЭквайрингБезОтбора.Добавить();
		НоваяСтрока.СуммаБанкЧек = СуммаЛистаУчета - СуммаБанкЧек;
		НоваяСтрока.Ошибка = "Сумма в листе учета не совпадает с расшифровкой";
		НоваяСтрока.ЭтоОшибка = Истина;
	КонецЕсли;	
	СуммаБанкЧек = РасшифровкаЭквайрингБезОтбора.Итог("СуммаБанкЧек");	
	
	ОтобразитьСУчетомОтбора();
КонецПроцедуры		
		
&НаСервере
Функция ФормаРасшифровки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ФормаРасшифровки = ОбработкаОбъект.ПолучитьФормуРасшифровки();
	Возврат ФормаРасшифровки;
	
КонецФункции	


&НаСервере
Процедура ОтборЭквайрингПриИзмененииНаСервере()
	РасшифровкаПоОперациям();
КонецПроцедуры


&НаКлиенте
Процедура ОтборЭквайрингПриИзменении(Элемент)
	ОтборЭквайрингПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПолучитьЧекиSQLНаСервере(ДатаЧек) Экспорт
		
	ТаблицаЧеков = ПолучитьТаблицуЧековSQL(ДатаЧек);
	Объект.ЧекиSQL.Загрузить(ТаблицаЧеков);

КонецПроцедуры

Функция ПолучитьТаблицуЧековSQL(ДатаЧек) Экспорт
	
		
	ТекстЗапроса = "SELECT   Ch.CashID, Ch.ShopNo,  Ch.CashID, Ch.CashCheckNo, Ch.CloseDate,
	|			Ch.BaseSum, Ch.Discount, Ch.BONUSCARD, Ch.SummCash, Ch.SummBank, Ch.SummBonus, Ch.OperationType, 
	|			NULL as terminal_bank
	|			  
	|			FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
	|			WHERE cast(Ch.CloseDate as date) >= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"' and cast(Ch.CloseDate as date) <= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"'	
	|	
	| UNION ALL
	|
	|				SELECT  Ch.CashID, Ch.ShopNo, Ch.CashID, Ch.CashCheckNo, Ch.CloseDate,
	|			Ch.BaseSum, Ch.Discount, Ch.BONUSCARD, Ch.SummCash, Ch.SummBank, Ch.SummBonus, Ch.OperationType,
	|			 Ch.terminal_bank
	|			  
	|			FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock) 
	|			WHERE cast(Ch.CloseDate as date) >= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"' and cast(Ch.CloseDate as date) <= '"+Формат(ДатаЧек,"ДФ=yyyy-MM-dd")+"'";
	

	//Ch.LoadDateTime, Ch.HistoryLineNo, Ch.OperationTypeOrig	
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрСоединенияДанныеТовародвижение;
	ADOСоединение.Open();
	
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	
	ВыборкаSQLПоЧекам = Новый ТаблицаЗначений;
	ВыборкаSQLПоЧекам.Колонки.Добавить("CashID");
	ВыборкаSQLПоЧекам.Колонки.Добавить("ShopNo");
	ВыборкаSQLПоЧекам.Колонки.Добавить("CloseDate");	
	ВыборкаSQLПоЧекам.Колонки.Добавить("BaseSum");
	ВыборкаSQLПоЧекам.Колонки.Добавить("CashCheckNo");
	ВыборкаSQLПоЧекам.Колонки.Добавить("SummBank");
	ВыборкаSQLПоЧекам.Колонки.Добавить("terminal_bank");
	ВыборкаSQLПоЧекам.Колонки.Добавить("ТерминалID");
	
	попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Стр = ВыборкаSQLПоЧекам.Добавить();
			Стр.CashID = rs.Fields("CashID").Value;
			Стр.ShopNo = rs.Fields("ShopNo").Value;
			Стр.CloseDate = Дата(rs.Fields("CloseDate").Value);			
			Стр.CashCheckNo = rs.Fields("CashCheckNo").Value;
			Стр.BaseSum = rs.Fields("BaseSum").Value;
			Стр.terminal_bank = rs.Fields("terminal_bank").Value;
			Стр.SummBank   =  rs.Fields("SummBank").Value;
			Если Стр.CashID > 100000 Тогда
				Стр.ТерминалID = Стр.ShopNo*10+1;
			Иначе 	
				Стр.ТерминалID = Стр.CashID;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Возврат	 ВыборкаSQLПоЧекам;
	КонецПопытки;	
	
	Возврат ВыборкаSQLПоЧекам;
	
КонецФункции


&НаКлиенте
Процедура ПолучитьЧекиSQL(Команда)
	ПолучитьЧекиSQLНаСервере(ОсновнаяДата);
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОсновнаяДата = Дата(2017,9,7);
	
	ДатаТранзакцииНачало = НачалоМесяца(ТекущаяДата());
	ДатаТранзакцииОкончание = КонецМесяца(ТекущаяДата());
	//ТолькоОшибки = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ТолькоОшибкиПриИзменении(Элемент)
	ОтобразитьСУчетомОтбора();
КонецПроцедуры



Процедура ОтобразитьСУчетомОтбора()
	
	Если ТолькоОшибки Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоОшибка",Истина);
		РасшифровкаЭквайринг.Загрузить(РасшифровкаЭквайрингБезОтбора.Выгрузить().Скопировать(СтруктураОтбора));
		
	Иначе	
		
		РасшифровкаЭквайринг.Загрузить(РасшифровкаЭквайрингБезОтбора.Выгрузить())
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьSQLНаСервере()
				
	

	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("Sms_repl");
	ADOСоединение.Open();
	
	ДатаНачалаSQL = Формат(НачалоДня(ДатаТранзакцииНачало),"ДФ=yyyy-MM-dd");
	ДатаОкончанияSQL = Формат(КонецДня(ДатаТранзакцииОкончание)+1,"ДФ=yyyy-MM-dd");
	
	ТекстЗапроса = "exec Acquiring 
		|	@dtStart  = '"+ДатаНачалаSQL+"T00:00:00.000'
        |	,@dtEnd  = '"+ДатаОкончанияSQL+"T00:00:00.000'
		|	,@cnMesto = 30
        |	,@DiffDateMin  = 2";
		
	rs = ADOСоединение.Execute(ТекстЗапроса);

	//ИсходныеДанные
	rs=rs.NextRecordSet();
	rs=rs.NextRecordSet();
	//ИсходныеСбер
	rs=rs.NextRecordSet();
	rs=rs.NextRecordSet();
	//Сводная
	rs=rs.NextRecordSet();
	СводнаяТаблица.Очистить();
	Пока НЕ rs.EOF() Цикл
		НоваяСтрока = СводнаяТаблица.Добавить();
			
		НоваяСтрока.Дата = ПолучитьДатуИзСтрокиSQL(rs.Fields("vvDt").Value);	
		НоваяСтрока.СуммаВсего = rs.Fields("vvSumbank").Value;
		НоваяСтрока.СуммаВсегоБанк = rs.Fields("cbSumbank").Value;

		НоваяСтрока.КоличествоВсего = rs.Fields("vvCN").Value;
		НоваяСтрока.КоличествоВсегоБанк = rs.Fields("cbCN").Value;

		rs.MoveNext();
	КонецЦикла;		
		
	rs=rs.NextRecordSet();
	
	//Сопоставленные	
	rs=rs.NextRecordSet();
	
	СопоставленныеСОшибками = Новый ТаблицаЗначений;
	СопоставленныеСОшибками.Колонки.Добавить("vvID");
	СопоставленныеСОшибками.Колонки.Добавить("cbID");
	СопоставленныеСОшибками.Колонки.Добавить("vvidterm");
	СопоставленныеСОшибками.Колонки.Добавить("cbidterm");
	СопоставленныеСОшибками.Колонки.Добавить("vvMesto");
	СопоставленныеСОшибками.Колонки.Добавить("cbMesto");
	СопоставленныеСОшибками.Колонки.Добавить("vvsumm");
	СопоставленныеСОшибками.Колонки.Добавить("cbsumm");
	СопоставленныеСОшибками.Колонки.Добавить("Дата");
	СопоставленныеСОшибками.Колонки.Добавить("Статус");
	СопоставленныеСОшибками.Колонки.Добавить("Количество");
	СопоставленныеСОшибками.Колонки.Добавить("КоличествоБанк");
	СопоставленныеСОшибками.Колонки.Добавить("cbShopNo");
	СопоставленныеСОшибками.Колонки.Добавить("vvShopNo");
	
	rs.MoveFirst();
	
	Пока НЕ rs.EOF() Цикл
		НоваяСтрока = СопоставленныеСОшибками.Добавить();
		//НоваяСтрока.vvID = rs.Fields("vvID").Value;	
		//НоваяСтрока.cbID = rs.Fields("cbID").Value;
		НоваяСтрока.vvidterm = rs.Fields("vv_id_terminal").Value;
		НоваяСтрока.cbidterm = rs.Fields("cb_id_terminal").Value;
		НоваяСтрока.vvMesto = rs.Fields("vvMesto").Value;	
		НоваяСтрока.cbMesto = rs.Fields("cbMesto").Value;
		НоваяСтрока.vvsumm = rs.Fields("vv_summabank").Value;
		НоваяСтрока.cbsumm = rs.Fields("cb_summabank").Value;
		НоваяСтрока.Дата = НАчалоДня(rs.Fields("vv_date_tran").Value);	
		НоваяСтрока.Статус = rs.Fields("Name").Value;
		НоваяСтрока.vvShopNo = rs.Fields("vvShopNo").Value;
		НоваяСтрока.cbShopNo = rs.Fields("cbShopNo").Value;	
		НоваяСтрока.Количество = 1;
		НоваяСтрока.КоличествоБанк = 1;
		rs.MoveNext();
	КонецЦикла;	
	
	СопоставленныеСОшибками.Свернуть("vvidterm,cbidterm,vvMesto,cbMesto,Дата,Статус,vvShopNo,cbShopNo","Количество,КоличествоБанк,vvsumm,cbsumm");
	Классификация.Загрузить(СопоставленныеСОшибками);
		
	rs=rs.NextRecordSet();
	
	//Не пробитые (номер чека -1)
	rs=rs.NextRecordSet();
	НеПробитыеЧеки = Новый ТаблицаЗначений;
	НеПробитыеЧеки.Колонки.Добавить( "id_terminal");
	НеПробитыеЧеки.Колонки.Добавить( "date_tran");
	НеПробитыеЧеки.Колонки.Добавить( "karta");
	НеПробитыеЧеки.Колонки.Добавить( "summbank");
	НеПробитыеЧеки.Колонки.Добавить( "id_TT");
	НеПробитыеЧеки.Колонки.Добавить( "OperationType");
	НеПробитыеЧеки.Колонки.Добавить( "cashid");
	НеПробитыеЧеки.Колонки.Добавить( "ShopNo");
	НеПробитыеЧеки.Колонки.Добавить( "CashCheckNo");
	
	rs.MoveFirst();
	Пока НЕ rs.EOF() Цикл
		НоваяСтрока = НеПробитыеЧеки.Добавить();
		НоваяСтрока.id_terminal = rs.Fields("id_terminal").Value;	
		НоваяСтрока.date_tran = rs.Fields("date_tran").Value;
		НоваяСтрока.karta = rs.Fields("karta").Value;
		НоваяСтрока.summbank = rs.Fields("summbank").Value;
		НоваяСтрока.id_TT = rs.Fields("id_TT").Value;	
		НоваяСтрока.OperationType = rs.Fields("OperationType").Value;
		НоваяСтрока.cashid = rs.Fields("cashid").Value;
		НоваяСтрока.ShopNo = rs.Fields("ShopNo").Value;
		НоваяСтрока.CashCheckNo = rs.Fields("CashCheckNo").Value;	
		rs.MoveNext();
	КонецЦикла;		
	rs=rs.NextRecordSet();
	
	//дополнительное сопоставление	
	rs=rs.NextRecordSet();
		
	ДополнительноеСопоставление = Новый ТаблицаЗначений;
	ДополнительноеСопоставление.Колонки.Добавить( "vvID");
	ДополнительноеСопоставление.Колонки.Добавить( "cbID");
	ДополнительноеСопоставление.Колонки.Добавить( "cashid");
	ДополнительноеСопоставление.Колонки.Добавить( "MESTO");
	ДополнительноеСопоставление.Колонки.Добавить( "vvShopNo");
	ДополнительноеСопоставление.Колонки.Добавить( "cbShopNo");
	ДополнительноеСопоставление.Колонки.Добавить( "vv_id_terminal");
	ДополнительноеСопоставление.Колонки.Добавить( "cb_id_terminal");
	ДополнительноеСопоставление.Колонки.Добавить( "vv_summabank");
	ДополнительноеСопоставление.Колонки.Добавить( "cb_summabank");
	ДополнительноеСопоставление.Колонки.Добавить( "vv_date_tran");
	ДополнительноеСопоставление.Колонки.Добавить( "cb_date_tran");
	ДополнительноеСопоставление.Колонки.Добавить( "cnMesto");
	
	rs.MoveFirst();
	Пока НЕ rs.EOF() Цикл
		НоваяСтрока = ДополнительноеСопоставление.Добавить();
		НоваяСтрока.vvID = rs.Fields("vvID").Value;	
		НоваяСтрока.cbID = rs.Fields("cbID").Value;
		НоваяСтрока.cashid = rs.Fields("cashid").Value;
		НоваяСтрока.MESTO = rs.Fields("MESTO").Value;
		НоваяСтрока.vvShopNo = rs.Fields("vvShopNo").Value;	
		НоваяСтрока.cbShopNo = rs.Fields("cbShopNo").Value;
		НоваяСтрока.vv_id_terminal = rs.Fields("vv_id_terminal").Value;
		НоваяСтрока.cb_id_terminal = rs.Fields("cb_id_terminal").Value;
		НоваяСтрока.vv_summabank = rs.Fields("vv_summabank").Value;
		НоваяСтрока.cb_summabank = rs.Fields("cb_summabank").Value;
		НоваяСтрока.vv_date_tran = rs.Fields("vv_date_tran").Value;
		НоваяСтрока.cb_date_tran = rs.Fields("cb_date_tran").Value;
		НоваяСтрока.cnMesto = rs.Fields("cnMesto").Value;
		rs.MoveNext();
	КонецЦикла;		
	rs=rs.NextRecordSet();
	
	//Оставшиеся ВВ
	rs=rs.NextRecordSet();
	
	rs.MoveFirst();
	ВсегоОстатокМагазин = 0;
	Объект.НесопоставленныеВВ.Очистить();
	Пока НЕ rs.EOF() Цикл
		Если rs.Fields("CashCheckNo").Value = -1 Тогда
			rs.MoveNext();
			Продолжить;			
		КонецЕсли;	
		ВсегоОстатокМагазин = ВсегоОстатокМагазин + 1;
		НоваяСтрока = Объект.НесопоставленныеВВ.Добавить();
		НоваяСтрока.ТерминалНомер = rs.Fields("id_terminal").Value;
		НоваяСтрока.РабочееМестоНомер = rs.Fields("cashid").Value;
		НоваяСтрока.Сумма =  rs.Fields("summbank").Value;
		НоваяСтрока.Дата =  rs.Fields("date_tran").Value;
		НоваяСтрока.НомерМагазина = rs.Fields("ShopNO").Value;
		НоваяСтрока.НомерКарты = rs.Fields("karta").Value;
		НоваяСтрока.НомерЧека = rs.Fields("CashCheckNo").Value;
		rs.MoveNext();
	КонецЦикла;	
	rs=rs.NextRecordSet();
	
	//Оставшиеся Сбербанк	
	rs=rs.NextRecordSet();
	
	МестоНомер.Очистить();
	
	Объект.НесопоставленныеСбербанк.Очистить();
	rs.MoveFirst();
	Пока НЕ rs.EOF() Цикл

		НоваяСтрока = Объект.НесопоставленныеСбербанк.Добавить();
		НоваяСтрока.ТерминалНомер = rs.Fields("id_terminal").Value;
		Данные = ПолучитьДанныеПоНомеруТерминала(rs.Fields("id_terminal").Value);
		Если Данные <> Неопределено Тогда
			НоваяСтрока.РабочееМестоНомер = Данные.РабочееМестоНомер;
			НоваяСтрока.НомерМагазина =Данные.НомерМагазина;						
		Иначе 	
			НоваяСтрока.РабочееМестоНомер = rs.Fields("MESTO").Value;
			НоваяСтрока.НомерМагазина = rs.Fields("ShopNO").Value;
		КонецЕсли;	
		НоваяСтрока.Сумма =  rs.Fields("summbank").Value;
		НоваяСтрока.Дата = rs.Fields("date_tran").Value;
		НоваяСтрока.НомерКарты = rs.Fields("karta").Value;
		rs.MoveNext();
	КонецЦикла;
	rs=rs.NextRecordSet();
	
	//Возвраты	
	rs=rs.NextRecordSet();
	
	
	rs=rs.NextRecordSet();
	
	//Сводная	
	rs=rs.NextRecordSet();
	//rs.MoveFirst();
	Пока НЕ rs.EOF() Цикл
		ДатаПоиск =  ПолучитьДатуИзСтрокиSQL(rs.Fields("vvDt").Value);
		СтруктураПоиска =  Новый  Структура("Дата",ДатаПоиск);
		Строки = СводнаяТаблица.НайтиСтроки(СтруктураПоиска);
		
		НоваяСтрока =Строки[0];
		НоваяСтрока.КоличествоВозвратов = rs.Fields("cnVoz").Value;
		rs.MoveNext();
	КонецЦикла;		

	СопоставитьПОМагазинам();
	УдалитьИзНесопоставленныхСопоставленныеПоМагазинам();
	СопоставитьРазницаВовремени();
	КлассифицироватьОстатокПеребором();
	КлассифицироватьПоОбщимСуммам();
	КлассифицироватьОстатокПереборомБезНомераМагазина();
	ПеренестиНесопоставленныеВКлассификацию();
	ЗаполнитьТаблицуСопоставлено();
	ОбновитьИтоги();
	УпорядочитьСводнуюТаблицу();
	УстановитьОтборВВ();
	УстановитьОтборБанк();
	
КонецПроцедуры

Процедура ПеренестиНесопоставленныеВКлассификацию()
	
	Для каждого Строка из Объект.НесопоставленныеВВ Цикл
		
		НоваяСтрока = Классификация.Добавить();	
		новаяСтрока.vvShopNo = Строка.НомерМагазина;
		новаяСтрока.vvSumm = Строка.Сумма;
		новаяСтрока.Количество =  1;
		новаяСтрока.Дата = Строка.Дата;                              
		новаяСтрока.Статус = "Не сопоставлен";
		
	КонецЦикла;	

	Для каждого Строка из Объект.НесопоставленныеСбербанк Цикл
		
		НоваяСтрока = Классификация.Добавить();	
		новаяСтрока.cbShopNo = Строка.НомерМагазина;
		новаяСтрока.cbSumm = Строка.Сумма;
		новаяСтрока.КоличествоБанк =  1;
		новаяСтрока.Дата = Строка.Дата;                              
		новаяСтрока.Статус = "Не сопоставлен";
		
	КонецЦикла;			
		
		
	
КонецПроцедуры

Процедура УпорядочитьСводнуюТаблицу()
	
	СводнаяТаблица.Сортировать("Дата");		
	
КонецПроцедуры	

Процедура ОбновитьИтоги()
	
	ИтогоКлассификацияКоличествоТолькоОшибки = КлассификацияСводнаяОшибки.Итог("Количество");
	ИтогоКлассификацияКоличествоБанкТолькоОшибки = КлассификацияСводнаяОшибки.Итог("КоличествоБанк");	
	ИтогоСуммаКлассификацияТолькоОшибки =  КлассификацияСводнаяОшибки.Итог("vvsumm");
	ИтогоСуммаКлассификацияБанкТолькоОшибки =  КлассификацияСводнаяОшибки.Итог("cbsumm");
	
	
	
	ИтогоКлассификацияКоличество = Классификация.Итог("Количество");
	ИтогоКлассификацияКоличествоБанк = Классификация.Итог("КоличествоБанк");	
	ИтогоСуммаКлассификация =  Классификация.Итог("vvsumm");
	ИтогоСуммаКлассификацияБанк =  Классификация.Итог("cbsumm");

КонецПроцедуры

Процедура ЗаполнитьТаблицуСопоставлено()
	
	СводнаяКлассификация = Классификация.Выгрузить();
	СводнаяКлассификация.Свернуть("Дата,Статус,vvShopNo,cbShopNo,vvidTerm,cbidTerm,vvMesto,cbMesto","vvSumm,cbSumm,Количество,КоличествоБанк");	
	Классификация.Загрузить(СводнаяКлассификация);
	СводнаяКлассификация.Свернуть("Дата,Статус,vvShopNo,cbShopNo","vvSumm,cbSumm,Количество,КоличествоБанк");
		
	СводнаяКлассификация.Колонки.Добавить("ЭтоОшибка");
	СводнаяКлассификация.Колонки.Добавить("НеСопоставлен");
	СводнаяКлассификация.Колонки.Добавить("ВыводимВОшибки");
	
	Для каждого строка из СводнаяКлассификация Цикл
		
		Если строка.Статус = "Не сопоставлен" Тогда			
			строка.НеСопоставлен = Истина;
			строка.ВыводимВОшибки = Истина;
		ИначеЕсли строка.Статус = "1С Ошибка в номере магазина" ИЛИ
			строка.Статус = "1С Ошибка в номере магазина" ИЛИ
			строка.Статус = "1С сопоставлено по сумме, ошибка в номере магазина" ИЛИ 
			строка.Статус = "1С Сопоставленно с округлением по магазину" Тогда
			строка.ЭтоОшибка = Истина;
			строка.ВыводимВОшибки = Ложь;
		КонецЕсли;	
	
	КонецЦикла;
	
	
	СтруктураОтбора = Новый Структура("ВыводимВОшибки",Истина);
	СводнаяКлассификацияОшибки = СводнаяКлассификация.Скопировать(СтруктураОтбора);
	
	Для каждого строка из СводнаяКлассификацияОшибки Цикл
		
		Если Не ЗначениеЗаполнено(строка.cbShopNo) Тогда
			строка.cbShopNo = строка.vvShopNo;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(строка.vvShopNo) Тогда
			строка.vvShopNo = строка.cbShopNo;
		КонецЕсли;	
		
	КонецЦикла;
	
	СводнаяКлассификацияОшибки.Свернуть("Статус,vvShopNo,cbShopNo","vvSumm,cbSumm,Количество,КоличествоБанк");	
		
	КлассификацияСводнаяОшибки.Загрузить(СводнаяКлассификацияОшибки);
	
	СводнаяКлассификация.Свернуть("Дата,Статус,ЭтоОшибка,НеСопоставлен","vvSumm,cbSumm,Количество,КоличествоБанк");	
	
	СтруктураПоиска = Новый Структура("Дата");
	
	Для каждого Строка из СводнаяТаблица Цикл
		
		СтруктураПоиска.Дата = Строка.Дата;
		ПоискСтроки = СводнаяКлассификация.НайтиСтроки(СтруктураПоиска);
		
		ВсегоОшибки = 0;
		ВсегоОшибкиБанк = 0;
		ВсегоНесооставлено = 0;
		ВсегоНесооставленоБанк = 0;
		КоличествоОшибки = 0;
		КоличествоОшибкиБанк = 0;
		КоличествоНесооставлено = 0;
		КоличествоНесооставленоБанк = 0;

		Для Каждого найденнаяСтрока ИЗ ПоискСтроки Цикл
			Если найденнаяСтрока.ЭтоОшибка = Истина Тогда
				ВсегоОшибки = ВсегоОшибки + найденнаяСтрока.vvSumm;		
				ВсегоОшибкиБанк = ВсегоОшибкиБанк + найденнаяСтрока.cbSumm;	
				КоличествоОшибки = КоличествоОшибки + найденнаяСтрока.Количество;
				КоличествоОшибкиБанк = КоличествоОшибкиБанк + найденнаяСтрока.КоличествоБанк;
			ИначеЕсли найденнаяСтрока.НеСопоставлен = Истина Тогда
				ВсегоНесооставлено = ВсегоНесооставлено + найденнаяСтрока.vvSumm;		
				ВсегоНесооставленоБанк = ВсегоНесооставленоБанк + найденнаяСтрока.cbSumm;	
				КоличествоНесооставлено = КоличествоНесооставлено + найденнаяСтрока.Количество;
				КоличествоНесооставленоБанк = КоличествоНесооставленоБанк + найденнаяСтрока.КоличествоБанк;
			КонецЕсли;;
		КонецЦикла;
		
		Строка.СуммаНеСопоставлено = ВсегоНесооставлено;
		Строка.СуммаНеСопоставленоБанк = ВсегоНесооставленоБанк;
		Строка.РазностьНеСопоставленоСумма = ВсегоНесооставлено - ВсегоНесооставленоБанк; 
		Строка.КоличествоНеСопоставленоБанк = КоличествоНесооставленоБанк;
		Строка.КоличествоНеСопоставлено = КоличествоНесооставлено;
		Строка.РазностьНеСопоставленоКоличество = КоличествоНесооставлено - КоличествоНесооставленоБанк;
		
		
		Строка.КоличествоВсего = Строка.КоличествоВсего - Строка.КоличествоВозвратов;
		
		Строка.СуммаОшибки = ВсегоОшибки;
		Строка.СуммаОшибкиБанк = ВсегоОшибкиБанк;
		Строка.РазностьСуммаОшибки = ВсегоОшибки - ВсегоОшибкиБанк;
		Строка.КоличествоОшибки     = КоличествоОшибки;
		Строка.КоличествоОшибкиБанк = КоличествоОшибкиБанк;
		Строка. РазностьКоличествоОшибки = КоличествоОшибки-КоличествоОшибкиБанк;
		
		Строка.СуммаВсегоРазность = Строка.СуммаВсего - Строка.СуммаВсегоБанк;
		Строка.КоличествоВсегоРазность = Строка.КоличествоВсего - Строка.КоличествоВсегоБанк;
		
		Строка.СуммаСопоставлено = Строка.СуммаВсего- Строка.СуммаОшибки-Строка.СуммаНеСопоставлено;
		Строка.СуммаСопоставленоБанк = Строка.СуммаВсегоБанк- Строка.СуммаОшибкиБанк-Строка.СуммаНеСопоставленоБанк;
		Строка.СуммаСопоставленоРазность = Строка.СуммаСопоставлено - Строка.СуммаСопоставленоБанк;
		
		Строка.КоличествоСопоставлено = Строка.КоличествоВсего- Строка.КоличествоОшибки-Строка.КоличествоНеСопоставлено;
		Строка.КоличествоСопоставленоБанк = Строка.КоличествоВсегоБанк- Строка.КоличествоОшибкиБанк-Строка.КоличествоНеСопоставленоБанк;
		Строка.КоличествоСопоставленоРазность = Строка.КоличествоСопоставлено - Строка.КоличествоСопоставленоБанк;
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура КлассифицироватьОстатокПеребором()
	
	
	СтруктураПоиска = Новый Структура("ДатаНачалоДня,НомерМагазина,Сопоставлен");
	СтруктураПоиска.Сопоставлен = Ложь;	
	
	//По Чекам
	Для каждого СтрокаВВ из Объект.НесопоставленныеВВ Цикл
		
		СтруктураПоиска.ДатаНачалоДня = СтрокаВВ.ДатаНачалоДня; 	
		СтруктураПоиска.НомерМагазина = СтрокаВВ.НомерМагазина;
		
		ПоискСтрокБанк = Объект.НесопоставленныеСбербанк.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаБанк из ПоискСтрокБанк Цикл
			
			РазностьСумм = СтрокаБанк.Сумма - СтрокаВВ.Сумма;
			Если РазностьСумм < 1 И РазностьСумм > -1 Тогда
				СтрокаБанк.Сопоставлен = Истина;
				СтрокаВВ.Сопоставлен = Истина;
				ДобавитьСтрокуВКлассификацию(СтрокаВВ,СтрокаБанк,"1С Сопоставленно с округлением по магазину");
				Прервать;
			КонецЕсли;	
				
		КонецЦикла;	
		
	КонецЦикла;	
	
	
	СтруктураПоиска = Новый Структура("Сопоставлен",Ложь);	
	Копия = Объект.НесопоставленныеВВ.Выгрузить().Скопировать(СтруктураПоиска);
	Объект.НесопоставленныеВВ.Загрузить(Копия);
	Копия = Объект.НесопоставленныеСбербанк.Выгрузить().Скопировать(СтруктураПоиска);
	Объект.НесопоставленныеСбербанк.Загрузить(Копия);
	СопоставитьПОМагазинам();
	
КонецПроцедуры

Процедура ДобавитьСтрокуВКлассификацию(СтрокаВВ,СтрокаБанк,Статус)
	
	НоваяСтрока = Классификация.Добавить();
	НоваяСтрока.Дата = СтрокаВВ.ДатаНачалоДня;
	НоваяСтрока.vvShopNo = СтрокаВВ.НомерМагазина;
	НоваяСтрока.cbShopNo = СтрокаБанк.НомерМагазина;
	НоваяСтрока.Дата = СтрокаВВ.ДатаНачалоДня;
	НоваяСтрока.Статус = Статус;
	НоваяСтрока.vvSumm = СтрокаВВ.Сумма;
	НоваяСтрока.cbSumm = СтрокаБанк.Сумма;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.КоличествоБанк = 1;
	
КонецПроцедуры	

Процедура КлассифицироватьОстатокПереборомБезНомераМагазина()
	
	
	СтруктураПоиска = Новый Структура("ДатаНачалоДня,Сопоставлен");
	СтруктураПоиска.Сопоставлен = Ложь;	
	
	//По Чекам
	Для каждого СтрокаВВ из Объект.НесопоставленныеВВ Цикл
		
		СтруктураПоиска.ДатаНачалоДня = СтрокаВВ.ДатаНачалоДня; 	
		
		ПоискСтрокБанк = Объект.НесопоставленныеСбербанк.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаБанк из ПоискСтрокБанк Цикл
			
			РазностьСумм = СтрокаБанк.Сумма - СтрокаВВ.Сумма;
			Если РазностьСумм < 1 И РазностьСумм > -1 Тогда
				СтрокаБанк.Сопоставлен = Истина;
				СтрокаВВ.Сопоставлен = Истина;
				ДобавитьСтрокуВКлассификацию(СтрокаВВ,СтрокаБанк,"1С сопоставлено по сумме, ошибка в номере магазина");
				Прервать;
			КонецЕсли;	
				
		КонецЦикла;	
		
	КонецЦикла;	
		
	СтруктураПоиска = Новый Структура("Сопоставлен",Ложь);	
	Копия = Объект.НесопоставленныеВВ.Выгрузить().Скопировать(СтруктураПоиска);
	Объект.НесопоставленныеВВ.Загрузить(Копия);
	Копия = Объект.НесопоставленныеСбербанк.Выгрузить().Скопировать(СтруктураПоиска);
	Объект.НесопоставленныеСбербанк.Загрузить(Копия);
	СопоставитьПОМагазинам();
КонецПроцедуры


Процедура КлассифицироватьПоОбщимСуммам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НесопоставленныеВВ.ТерминалНомер,
		|	НесопоставленныеВВ.РабочееМестоНомер,
		|	НесопоставленныеВВ.Сумма,
		|	НесопоставленныеВВ.Дата,
		|	НесопоставленныеВВ.НомерЧека,
		|	НесопоставленныеВВ.НомерМагазина,
		|	НесопоставленныеВВ.idТочки,
		|	НесопоставленныеВВ.idМеста,
		|	НесопоставленныеВВ.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеВВ.Дата, ДЕНЬ) КАК ДатаНачала
		|ПОМЕСТИТЬ втНесопоставленныеВВ
		|ИЗ
		|	&НесопоставленныеВВ КАК НесопоставленныеВВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесопоставленныеСбербанк.ТерминалНомер,
		|	НесопоставленныеСбербанк.РабочееМестоНомер,
		|	НесопоставленныеСбербанк.Сумма,
		|	НесопоставленныеСбербанк.Дата,
		|	НесопоставленныеСбербанк.НомерМагазина,
		|	НесопоставленныеСбербанк.idМеста,
		|	НесопоставленныеСбербанк.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеСбербанк.Дата, ДЕНЬ) КАК ДатаНАчала
		|ПОМЕСТИТЬ втНесопоставленныеСбербанк
		|ИЗ
		|	&НесопоставленныеСбербанк КАК НесопоставленныеСбербанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СопоставленныеПоМагазинам.НомерМагазина,
		|	СопоставленныеПоМагазинам.Дата,
		|	СопоставленныеПоМагазинам.Сумма,
		|	СопоставленныеПоМагазинам.СуммаБанк,
		|	СопоставленныеПоМагазинам.Количество,
		|	СопоставленныеПоМагазинам.КоличествоБанк
		|ПОМЕСТИТЬ втСопосталениеПоМагазинам
		|ИЗ
		|	&СопоставленныеПоМагазинам КАК СопоставленныеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопосталениеПоМагазинам.НомерМагазина,
		|	втСопосталениеПоМагазинам.Дата,
		|	втСопосталениеПоМагазинам.Сумма,
		|	втСопосталениеПоМагазинам.СуммаБанк,
		|	втСопосталениеПоМагазинам.Количество,
		|	втСопосталениеПоМагазинам.КоличествоБанк,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Сумма > втСопосталениеПоМагазинам.СуммаБанк
		|			ТОГДА втСопосталениеПоМагазинам.Сумма - втСопосталениеПоМагазинам.СуммаБанк
		|		ИНАЧЕ втСопосталениеПоМагазинам.СуммаБанк - втСопосталениеПоМагазинам.Сумма
		|	КОНЕЦ КАК РазностьСумма,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Количество > втСопосталениеПоМагазинам.КоличествоБанк
		|			ТОГДА втСопосталениеПоМагазинам.Количество - втСопосталениеПоМагазинам.КоличествоБанк
		|		ИНАЧЕ втСопосталениеПоМагазинам.КоличествоБанк - втСопосталениеПоМагазинам.Количество
		|	КОНЕЦ КАК РазностьКоличество
		|ПОМЕСТИТЬ втСтатусСопоставления
		|ИЗ
		|	втСопосталениеПоМагазинам КАК втСопосталениеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСтатусСопоставления.НомерМагазина,
		|	втСтатусСопоставления.Дата,
		|	втСтатусСопоставления.Сумма,
		|	втСтатусСопоставления.СуммаБанк,
		|	втСтатусСопоставления.Количество,
		|	втСтатусСопоставления.КоличествоБанк,
		|	втСтатусСопоставления.РазностьСумма,
		|	втСтатусСопоставления.РазностьКоличество,
		|	ВЫБОР
		|		КОГДА втСтатусСопоставления.Количество > 0
		|				И втСтатусСопоставления.КоличествоБанк > 0
		|				И втСтатусСопоставления.РазностьСумма < 1
		|			ТОГДА ""1С Общая сумма чеков по магазину""
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА втСтатусСопоставления.Количество > 0
		|				И втСтатусСопоставления.КоличествоБанк > 0
		|				И втСтатусСопоставления.РазностьСумма < 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сопоставлен
		|ПОМЕСТИТЬ втСтатус
		|ИЗ
		|	втСтатусСопоставления КАК втСтатусСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеВВ.ТерминалНомер,
		|	втНесопоставленныеВВ.РабочееМестоНомер,
		|	втНесопоставленныеВВ.Сумма,
		|	втНесопоставленныеВВ.Дата,
		|	втНесопоставленныеВВ.НомерЧека,
		|	втНесопоставленныеВВ.НомерМагазина,
		|	втНесопоставленныеВВ.idТочки,
		|	втНесопоставленныеВВ.idМеста,
		|	втНесопоставленныеВВ.ДатаНачала,
		|	ЕСТЬNULL(втСтатус.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втСтатус.Статус,
		|	втНесопоставленныеВВ.НомерКарты
		|ПОМЕСТИТЬ втСоСтатусомВВ
		|ИЗ
		|	втНесопоставленныеВВ КАК втНесопоставленныеВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатус КАК втСтатус
		|		ПО втНесопоставленныеВВ.НомерМагазина = втСтатус.НомерМагазина
		|			И втНесопоставленныеВВ.ДатаНачала = втСтатус.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСбербанк.ТерминалНомер,
		|	втНесопоставленныеСбербанк.РабочееМестоНомер,
		|	втНесопоставленныеСбербанк.Сумма,
		|	втНесопоставленныеСбербанк.Дата,
		|	втНесопоставленныеСбербанк.НомерМагазина,
		|	втНесопоставленныеСбербанк.idМеста,
		|	втНесопоставленныеСбербанк.ДатаНАчала,
		|	втСтатус.Статус,
		|	ЕСТЬNULL(втСтатус.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втНесопоставленныеСбербанк.НомерКарты
		|ПОМЕСТИТЬ втСоСтатусомСбер
		|ИЗ
		|	втНесопоставленныеСбербанк КАК втНесопоставленныеСбербанк
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатус КАК втСтатус
		|		ПО втНесопоставленныеСбербанк.НомерМагазина = втСтатус.НомерМагазина
		|			И втНесопоставленныеСбербанк.ДатаНАчала = втСтатус.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСоСтатусомВВ.ТерминалНомер,
		|	втСоСтатусомВВ.РабочееМестоНомер,
		|	втСоСтатусомВВ.Сумма,
		|	втСоСтатусомВВ.Дата,
		|	втСоСтатусомВВ.НомерЧека,
		|	втСоСтатусомВВ.НомерМагазина,
		|	втСоСтатусомВВ.idТочки,
		|	втСоСтатусомВВ.idМеста,
		|	втСоСтатусомВВ.ДатаНачала,
		|	втСоСтатусомВВ.Сопоставлен,
		|	втСоСтатусомВВ.Статус,
		|	втСоСтатусомВВ.НомерКарты
		|ПОМЕСТИТЬ втБезСтатусаВВ
		|ИЗ
		|	втСоСтатусомВВ КАК втСоСтатусомВВ
		|ГДЕ
		|	втСоСтатусомВВ.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСоСтатусомСбер.ТерминалНомер,
		|	втСоСтатусомСбер.РабочееМестоНомер,
		|	втСоСтатусомСбер.Сумма,
		|	втСоСтатусомСбер.Дата,
		|	втСоСтатусомСбер.НомерМагазина,
		|	втСоСтатусомСбер.idМеста,
		|	втСоСтатусомСбер.ДатаНАчала,
		|	втСоСтатусомСбер.Статус,
		|	втСоСтатусомСбер.Сопоставлен,
		|	втСоСтатусомСбер.НомерКарты
		|ПОМЕСТИТЬ втБезСтатусаСбер
		|ИЗ
		|	втСоСтатусомСбер КАК втСоСтатусомСбер
		|ГДЕ
		|	втСоСтатусомСбер.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втБезСтатусаВВ.НомерМагазина,
		|	втБезСтатусаСбер.НомерМагазина КАК НомерМагазинаСбер,
		|	СУММА(1) КАК Совпадений,
		|	втБезСтатусаВВ.ДатаНачала,
		|	СУММА(втБезСтатусаВВ.Сумма) КАК Сумма,
		|	СУММА(втБезСтатусаСбер.Сумма) КАК СуммаБанк
		|ПОМЕСТИТЬ втТолькоПоСуммам
		|ИЗ
		|	втБезСтатусаВВ КАК втБезСтатусаВВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБезСтатусаСбер КАК втБезСтатусаСбер
		|		ПО втБезСтатусаВВ.Сумма = втБезСтатусаСбер.Сумма
		|			И втБезСтатусаВВ.ДатаНачала = втБезСтатусаСбер.ДатаНАчала
		|			И (РАЗНОСТЬДАТ(втБезСтатусаВВ.Дата, втБезСтатусаСбер.Дата, МИНУТА) < 6)
		|			И (РАЗНОСТЬДАТ(втБезСтатусаВВ.Дата, втБезСтатусаСбер.Дата, МИНУТА) > -6)
		|
		|СГРУППИРОВАТЬ ПО
		|	втБезСтатусаВВ.НомерМагазина,
		|	втБезСтатусаСбер.НомерМагазина,
		|	втБезСтатусаВВ.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТолькоПоСуммам.НомерМагазина,
		|	втТолькоПоСуммам.НомерМагазинаСбер,
		|	втТолькоПоСуммам.Совпадений,
		|	втТолькоПоСуммам.ДатаНачала,
		|	ИСТИНА КАК СопоставленПоСумме,
		|	втТолькоПоСуммам.Сумма,
		|	втТолькоПоСуммам.СуммаБанк
		|ПОМЕСТИТЬ втНайденныеПоСуммам
		|ИЗ
		|	втТолькоПоСуммам КАК втТолькоПоСуммам
		|ГДЕ
		|	втТолькоПоСуммам.Совпадений > 3
		|	И ВЫБОР
		|			КОГДА втТолькоПоСуммам.Сумма - втТолькоПоСуммам.СуммаБанк > -5
		|					И втТолькоПоСуммам.Сумма - втТолькоПоСуммам.СуммаБанк < 5
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втБезСтатусаВВ.ТерминалНомер,
		|	втБезСтатусаВВ.РабочееМестоНомер,
		|	втБезСтатусаВВ.Сумма,
		|	втБезСтатусаВВ.Дата,
		|	втБезСтатусаВВ.НомерЧека,
		|	втБезСтатусаВВ.НомерМагазина,
		|	втБезСтатусаВВ.idТочки,
		|	втБезСтатусаВВ.idМеста,
		|	втБезСтатусаВВ.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ""1С Ошибка в номере магазина""
		|		ИНАЧЕ ""Не сопоставлен""
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сопоставлен,
		|	ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) КАК СопоставленПоСумме,
		|	втНайденныеПоСуммам.НомерМагазинаСбер,
		|	втБезСтатусаВВ.НомерКарты
		|ПОМЕСТИТЬ втРезультатСоСтатусомВВ
		|ИЗ
		|	втБезСтатусаВВ КАК втБезСтатусаВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденныеПоСуммам КАК втНайденныеПоСуммам
		|		ПО втБезСтатусаВВ.НомерМагазина = втНайденныеПоСуммам.НомерМагазина
		|			И втБезСтатусаВВ.ДатаНачала = втНайденныеПоСуммам.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втБезСтатусаСбер.ТерминалНомер,
		|	втБезСтатусаСбер.РабочееМестоНомер,
		|	втБезСтатусаСбер.Сумма,
		|	втБезСтатусаСбер.Дата,
		|	втБезСтатусаСбер.НомерМагазина,
		|	втБезСтатусаСбер.idМеста,
		|	втБезСтатусаСбер.ДатаНАчала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ""1С Ошибка в номере магазина""
		|		ИНАЧЕ ""Не сопоставлен""
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сопоставлен,
		|	ЕСТЬNULL(втНайденныеПоСуммам.СопоставленПоСумме, ЛОЖЬ) КАК СопоставленПоСумме,
		|	втНайденныеПоСуммам.НомерМагазина КАК НомерМагазина1,
		|	втБезСтатусаСбер.НомерКарты
		|ПОМЕСТИТЬ втРезультатСоСтатусомСбер
		|ИЗ
		|	втБезСтатусаСбер КАК втБезСтатусаСбер
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденныеПоСуммам КАК втНайденныеПоСуммам
		|		ПО втБезСтатусаСбер.НомерМагазина = втНайденныеПоСуммам.НомерМагазинаСбер
		|			И втБезСтатусаСбер.ДатаНАчала = втНайденныеПоСуммам.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСоСтатусомВВ.Сумма,
		|	втСоСтатусомВВ.НомерМагазина,
		|	втСоСтатусомВВ.ДатаНачала,
		|	втСоСтатусомВВ.Статус,
		|	втСоСтатусомВВ.НомерМагазина КАК НомерМагазинаСбер,
		|	0 КАК СуммаСбер,
		|	1 КАК Количество,
		|	0 КАК КоличествоСбер
		|ПОМЕСТИТЬ втКлассификация
		|ИЗ
		|	втСоСтатусомВВ КАК втСоСтатусомВВ
		|ГДЕ
		|	втСоСтатусомВВ.Сопоставлен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	втСоСтатусомСбер.НомерМагазина,
		|	втСоСтатусомСбер.ДатаНАчала,
		|	втСоСтатусомСбер.Статус,
		|	втСоСтатусомСбер.НомерМагазина,
		|	втСоСтатусомСбер.Сумма,
		|	0,
		|	1
		|ИЗ
		|	втСоСтатусомСбер КАК втСоСтатусомСбер
		|ГДЕ
		|	втСоСтатусомСбер.Сопоставлен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втРезультатСоСтатусомВВ.Сумма,
		|	втРезультатСоСтатусомВВ.НомерМагазина,
		|	втРезультатСоСтатусомВВ.ДатаНачала,
		|	втРезультатСоСтатусомВВ.Статус,
		|	втРезультатСоСтатусомВВ.НомерМагазинаСбер,
		|	0,
		|	1,
		|	0
		|ИЗ
		|	втРезультатСоСтатусомВВ КАК втРезультатСоСтатусомВВ
		|ГДЕ
		|	втРезультатСоСтатусомВВ.Сопоставлен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	втРезультатСоСтатусомСбер.НомерМагазина1,
		|	втРезультатСоСтатусомСбер.ДатаНАчала,
		|	втРезультатСоСтатусомСбер.Статус,
		|	втРезультатСоСтатусомСбер.НомерМагазина,
		|	втРезультатСоСтатусомСбер.Сумма,
		|	0,
		|	1
		|ИЗ
		|	втРезультатСоСтатусомСбер КАК втРезультатСоСтатусомСбер
		|ГДЕ
		|	втРезультатСоСтатусомСбер.Сопоставлен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(втКлассификация.Сумма) КАК Сумма,
		|	втКлассификация.НомерМагазина,
		|	втКлассификация.ДатаНачала КАК Дата,
		|	втКлассификация.Статус,
		|	втКлассификация.НомерМагазинаСбер,
		|	СУММА(втКлассификация.СуммаСбер) КАК СуммаСбер,
		|	СУММА(втКлассификация.Количество) КАК Количество,
		|	СУММА(втКлассификация.КоличествоСбер) КАК КоличествоСбер
		|ИЗ
		|	втКлассификация КАК втКлассификация
		|
		|СГРУППИРОВАТЬ ПО
		|	втКлассификация.НомерМагазина,
		|	втКлассификация.ДатаНачала,
		|	втКлассификация.Статус,
		|	втКлассификация.НомерМагазинаСбер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультатСоСтатусомВВ.ТерминалНомер,
		|	втРезультатСоСтатусомВВ.РабочееМестоНомер,
		|	втРезультатСоСтатусомВВ.Сумма,
		|	втРезультатСоСтатусомВВ.Дата,
		|	втРезультатСоСтатусомВВ.НомерЧека,
		|	втРезультатСоСтатусомВВ.НомерМагазина,
		|	втРезультатСоСтатусомВВ.idТочки,
		|	втРезультатСоСтатусомВВ.idМеста,
		|	втРезультатСоСтатусомВВ.ДатаНачала,
		|	ЛОЖЬ КАК Сопоставлен,
		|	втРезультатСоСтатусомВВ.Статус,
		|	втРезультатСоСтатусомВВ.НомерКарты,
		|	втРезультатСоСтатусомВВ.СопоставленПоСумме,
		|	втРезультатСоСтатусомВВ.НомерМагазинаСбер
		|ИЗ
		|	втРезультатСоСтатусомВВ КАК втРезультатСоСтатусомВВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультатСоСтатусомСбер.ТерминалНомер,
		|	втРезультатСоСтатусомСбер.РабочееМестоНомер,
		|	втРезультатСоСтатусомСбер.Сумма,
		|	втРезультатСоСтатусомСбер.Дата,
		|	втРезультатСоСтатусомСбер.НомерМагазина,
		|	втРезультатСоСтатусомСбер.idМеста,
		|	втРезультатСоСтатусомСбер.ДатаНАчала,
		|	втРезультатСоСтатусомСбер.Статус,
		|	ЛОЖЬ КАК Сопоставлен,
		|	втРезультатСоСтатусомСбер.НомерКарты,
		|	втРезультатСоСтатусомСбер.СопоставленПоСумме,
		|	втРезультатСоСтатусомСбер.НомерМагазина1
		|ИЗ
		|	втРезультатСоСтатусомСбер КАК втРезультатСоСтатусомСбер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТолькоПоСуммам.НомерМагазина,
		|	втТолькоПоСуммам.НомерМагазинаСбер,
		|	втТолькоПоСуммам.Совпадений,
		|	втТолькоПоСуммам.ДатаНачала,
		|	втТолькоПоСуммам.Сумма,
		|	втТолькоПоСуммам.СуммаБанк
		|ИЗ
		|	втТолькоПоСуммам КАК втТолькоПоСуммам";
	
	
	Запрос.УстановитьПараметр("НесопоставленныеВВ",Объект.НесопоставленныеВВ.Выгрузить());
	Запрос.УстановитьПараметр("НесопоставленныеСбербанк",Объект.НесопоставленныеСбербанк.Выгрузить());
	Запрос.УстановитьПараметр("СопоставленныеПоМагазинам",НесопоставленныеПоМагазинам.Выгрузить());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	//НЕсопоставленныеВВ = РезультатЗапроса[9].Выгрузить();
	РезультатКлассификация = РезультатЗапроса[14].Выгрузить();
	НесопоставленныеВВ = РезультатЗапроса[15].Выгрузить();
	НесопоставленныеСбер = РезультатЗапроса[16].Выгрузить();	
	//ОтклонениеВремени = РезультатЗапроса[11].Выгрузить();
	Для каждого Строка из РезультатКлассификация Цикл
		
		РазностьСумм = Строка.Сумма - Строка.СуммаСбер;
		Если РазностьСумм < 10 и РазностьСумм > -10 Тогда
			
			новаяСтрока = Классификация.Добавить();		
			новаяСтрока.vvShopNo = Строка.НомерМагазина;
			новаяСтрока.cbShopNo = Строка.НомерМагазинаСбер;
			новаяСтрока.vvSumm = Строка.Сумма;
			новаяСтрока.cbSumm = Строка.СуммаСбер;
			новаяСтрока.Количество =  Строка.Количество;
			новаяСтрока.КоличествоБанк = Строка.КоличествоСбер;
			новаяСтрока.Дата = Строка.Дата;                              
			новаяСтрока.Статус = Строка.Статус;
			
			СтруктураОтбора = Новый Структура("НомерМагазина,ДатаНАчала");
			СтруктураОтбора.НомерМагазина = Строка.НомерМагазина;
			СтруктураОтбора.ДатаНАчала = Строка.Дата;
				
			ПоискСтрок = НесопоставленныеВВ.НайтиСтроки(СтруктураОтбора);
			Для каждого строка из ПоискСтрок Цикл
				строка.Сопоставлен = Истина;
			КонецЦикла;	
			СтруктураОтбора.НомерМагазина = Строка.НомерМагазинаСбер;
			ПоискСтрок = НесопоставленныеСбер.НайтиСтроки(СтруктураОтбора);
			Для каждого строка из ПоискСтрок Цикл
				строка.Сопоставлен = Истина;
			КонецЦикла;
			
		Иначе	
			
			СтруктураОтбораВВ = Новый Структура("НомерМагазина,ДатаНАчала");
			СтруктураОтбораВВ.НомерМагазина = Строка.НомерМагазина;
			СтруктураОтбораВВ.ДатаНАчала = Строка.Дата;				
			ПоискСтрокВВ = НесопоставленныеВВ.НайтиСтроки(СтруктураОтбора);
			
			СтруктураОтбораБанк = Новый Структура("НомерМагазина,ДатаНАчала");
			СтруктураОтбораБанк.НомерМагазина = Строка.НомерМагазина;
			СтруктураОтбораБанк.НомерМагазина = Строка.НомерМагазинаСбер;
			
			ПоискСтрокБанк = НесопоставленныеСбер.НайтиСтроки(СтруктураОтбора);
			
			Для каждого строка из ПоискСтрокВВ Цикл
				
				Если строка.Сопоставлен = Истина Тогда
					Продолжить;
				КонецЕсли;	
									
				Для каждого строкаБанк из ПоискСтрокБанк Цикл
					Если строкаБанк.Сопоставлен = Истина Тогда
						Продолжить;
					КонецЕсли;	
					
					Разность = строка.Сумма - строкаБанк.Сумма;
					
					Если Разность < 1 и Разность > - 1 Тогда
						строкаБанк.Сопоставлен = Истина;	
						строка.Сопоставлен = Истина;
					КонецЕсли;	
										
				КонецЦикла;
				
			КонецЦикла;	

		КонецЕсли;	

	КонецЦикла;	
	
	
	Фильтр = Новый Структура("Сопоставлен",Ложь);
		
	Объект.НесопоставленныеВВ.Загрузить(НесопоставленныеВВ.Скопировать(Фильтр));	
	Объект.НесопоставленныеСбербанк.Загрузить(НесопоставленныеСбер.Скопировать(Фильтр));
	
	ВсегоНесопоставленныеВВ = Объект.НесопоставленныеВВ.Количество();
	ВсегоНесопоставленныеСбер =  Объект.НесопоставленныеСбербанк.Количество();
	
	ВсегоНесопоставленныеСумма = НесопоставленныеВВ.итог("Сумма");
	ВсегоНесопоставленныеСуммаСбер = НесопоставленныеСбер.итог("Сумма");

КонецПроцедуры

Процедура УдалитьИзНесопоставленныхСопоставленныеПоМагазинам()

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НесопоставленныеВВ.ТерминалНомер,
		|	НесопоставленныеВВ.РабочееМестоНомер,
		|	НесопоставленныеВВ.Сумма,
		|	НесопоставленныеВВ.Дата,
		|	НесопоставленныеВВ.НомерЧека,
		|	НесопоставленныеВВ.НомерМагазина,
		|	НесопоставленныеВВ.idТочки,
		|	НесопоставленныеВВ.idМеста,
		|	НесопоставленныеВВ.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеВВ.Дата, ДЕНЬ) КАК ДатаНачала
		|ПОМЕСТИТЬ втНесопоставленныеВВ
		|ИЗ
		|	&НесопоставленныеВВ КАК НесопоставленныеВВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесопоставленныеСбербанк.ТерминалНомер,
		|	НесопоставленныеСбербанк.РабочееМестоНомер,
		|	НесопоставленныеСбербанк.Сумма,
		|	НесопоставленныеСбербанк.Дата,
		|	НесопоставленныеСбербанк.НомерМагазина,
		|	НесопоставленныеСбербанк.idМеста,
		|	НесопоставленныеСбербанк.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеСбербанк.Дата, ДЕНЬ) КАК ДатаНАчала
		|ПОМЕСТИТЬ втНесопоставленныеСбербанк
		|ИЗ
		|	&НесопоставленныеСбербанк КАК НесопоставленныеСбербанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СопоставленныеПоМагазинам.НомерМагазина,
		|	СопоставленныеПоМагазинам.Дата,
		|	СопоставленныеПоМагазинам.Сумма,
		|	СопоставленныеПоМагазинам.СуммаБанк,
		|	СопоставленныеПоМагазинам.Количество,
		|	СопоставленныеПоМагазинам.КоличествоБанк
		|ПОМЕСТИТЬ втСопосталениеПоМагазинам
		|ИЗ
		|	&СопоставленныеПоМагазинам КАК СопоставленныеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопосталениеПоМагазинам.НомерМагазина,
		|	втСопосталениеПоМагазинам.Дата,
		|	втСопосталениеПоМагазинам.Сумма,
		|	втСопосталениеПоМагазинам.СуммаБанк,
		|	втСопосталениеПоМагазинам.Количество,
		|	втСопосталениеПоМагазинам.КоличествоБанк,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Сумма = втСопосталениеПоМагазинам.СуммаБанк
		|			ТОГДА ""1С: сопоставлен по общей сумме""
		|		ИНАЧЕ ""Не сопоставлен""
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Сумма = втСопосталениеПоМагазинам.СуммаБанк
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сопоставлен,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Сумма > 0
		|				И втСопосталениеПоМагазинам.СуммаБанк > 0
		|				И втСопосталениеПоМагазинам.Сумма <> втСопосталениеПоМагазинам.СуммаБанк
		|				И втСопосталениеПоМагазинам.Количество > 0
		|				И втСопосталениеПоМагазинам.КоличествоБанк > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьСовпадения
		|ПОМЕСТИТЬ втСтатусСопоставления
		|ИЗ
		|	втСопосталениеПоМагазинам КАК втСопосталениеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеВВ.ТерминалНомер,
		|	втНесопоставленныеВВ.РабочееМестоНомер,
		|	втНесопоставленныеВВ.Сумма,
		|	втНесопоставленныеВВ.Дата,
		|	втНесопоставленныеВВ.НомерЧека,
		|	втНесопоставленныеВВ.НомерМагазина,
		|	втНесопоставленныеВВ.idТочки,
		|	втНесопоставленныеВВ.idМеста,
		|	втСтатусСопоставления.Статус,
		|	втСтатусСопоставления.Сопоставлен,
		|	втСтатусСопоставления.ЕстьСовпадения,
		|	втНесопоставленныеВВ.ДатаНачала,
		|	втНесопоставленныеВВ.НомерКарты
		|ПОМЕСТИТЬ втОстатокНесопоставленныеВВ
		|ИЗ
		|	втНесопоставленныеВВ КАК втНесопоставленныеВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусСопоставления КАК втСтатусСопоставления
		|		ПО втНесопоставленныеВВ.ДатаНачала = втСтатусСопоставления.Дата
		|			И втНесопоставленныеВВ.НомерМагазина = втСтатусСопоставления.НомерМагазина
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.Сопоставлен, ЛОЖЬ) <> ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСбербанк.ТерминалНомер,
		|	втНесопоставленныеСбербанк.РабочееМестоНомер,
		|	втНесопоставленныеСбербанк.Сумма,
		|	втНесопоставленныеСбербанк.Дата,
		|	втНесопоставленныеСбербанк.НомерМагазина,
		|	втНесопоставленныеСбербанк.idМеста,
		|	втНесопоставленныеСбербанк.ДатаНАчала,
		|	втСтатусСопоставления.Статус,
		|	втСтатусСопоставления.Сопоставлен,
		|	втСтатусСопоставления.ЕстьСовпадения,
		|	втНесопоставленныеСбербанк.НомерКарты
		|ПОМЕСТИТЬ втОстатокНесопоставленныеСбер
		|ИЗ
		|	втНесопоставленныеСбербанк КАК втНесопоставленныеСбербанк
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусСопоставления КАК втСтатусСопоставления
		|		ПО втНесопоставленныеСбербанк.ДатаНАчала = втСтатусСопоставления.Дата
		|			И втНесопоставленныеСбербанк.НомерМагазина = втСтатусСопоставления.НомерМагазина
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.Сопоставлен, ЛОЖЬ) <> ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСтатусСопоставления.НомерМагазина,
		|	втСтатусСопоставления.Дата,
		|	втСтатусСопоставления.Сумма,
		|	втСтатусСопоставления.СуммаБанк,
		|	втСтатусСопоставления.Количество,
		|	втСтатусСопоставления.КоличествоБанк,
		|	втСтатусСопоставления.Статус,
		|	втСтатусСопоставления.Сопоставлен
		|ПОМЕСТИТЬ втОстатокНесопоставленные
		|ИЗ
		|	втСтатусСопоставления КАК втСтатусСопоставления
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.Сопоставлен, ЛОЖЬ) <> ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСтатусСопоставления.НомерМагазина,
		|	втСтатусСопоставления.Дата,
		|	втСтатусСопоставления.Сумма,
		|	втСтатусСопоставления.СуммаБанк,
		|	втСтатусСопоставления.Количество,
		|	втСтатусСопоставления.КоличествоБанк,
		|	втСтатусСопоставления.Статус,
		|	втСтатусСопоставления.Сопоставлен
		|ПОМЕСТИТЬ втОстатокСопоставленные
		|ИЗ
		|	втСтатусСопоставления КАК втСтатусСопоставления
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.Сопоставлен, ЛОЖЬ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатокНесопоставленныеВВ.ТерминалНомер,
		|	втОстатокНесопоставленныеВВ.РабочееМестоНомер,
		|	втОстатокНесопоставленныеВВ.Сумма,
		|	втОстатокНесопоставленныеВВ.Дата,
		|	втОстатокНесопоставленныеВВ.НомерЧека,
		|	втОстатокНесопоставленныеВВ.НомерМагазина,
		|	втОстатокНесопоставленныеВВ.idТочки,
		|	втОстатокНесопоставленныеВВ.idМеста,
		|	втОстатокНесопоставленныеВВ.Статус,
		|	ИСТИНА КАК Сопоставлен,
		|	втОстатокНесопоставленныеВВ.ЕстьСовпадения,
		|	втОстатокНесопоставленныеСбер.Дата КАК ДатаСбер,
		|	РАЗНОСТЬДАТ(втОстатокНесопоставленныеВВ.Дата, втОстатокНесопоставленныеСбер.Дата, МИНУТА) КАК РазностьВМинутах,
		|	втОстатокНесопоставленныеВВ.ДатаНачала,
		|	втОстатокНесопоставленныеСбер.Сумма КАК СуммаБанк,
		|	1 КАК Количество
		|ПОМЕСТИТЬ втСопоставленныеДополнительно
		|ИЗ
		|	втОстатокНесопоставленныеВВ КАК втОстатокНесопоставленныеВВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстатокНесопоставленныеСбер КАК втОстатокНесопоставленныеСбер
		|		ПО втОстатокНесопоставленныеВВ.НомерМагазина = втОстатокНесопоставленныеСбер.НомерМагазина
		|			И втОстатокНесопоставленныеВВ.ДатаНачала = втОстатокНесопоставленныеСбер.ДатаНАчала
		|			И втОстатокНесопоставленныеВВ.Сумма = втОстатокНесопоставленныеСбер.Сумма
		|			И (РАЗНОСТЬДАТ(втОстатокНесопоставленныеВВ.Дата, втОстатокНесопоставленныеСбер.Дата, МИНУТА) < 6)
		|			И (РАЗНОСТЬДАТ(втОстатокНесопоставленныеВВ.Дата, втОстатокНесопоставленныеСбер.Дата, МИНУТА) > -6)
		|ГДЕ
		|	втОстатокНесопоставленныеВВ.ЕстьСовпадения
		|	И втОстатокНесопоставленныеСбер.ЕстьСовпадения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатокНесопоставленныеВВ.ТерминалНомер,
		|	втОстатокНесопоставленныеВВ.РабочееМестоНомер,
		|	втОстатокНесопоставленныеВВ.Сумма,
		|	втОстатокНесопоставленныеВВ.Дата,
		|	втОстатокНесопоставленныеВВ.НомерЧека,
		|	втОстатокНесопоставленныеВВ.НомерМагазина,
		|	втОстатокНесопоставленныеВВ.idТочки,
		|	втОстатокНесопоставленныеВВ.idМеста,
		|	втОстатокНесопоставленныеВВ.Статус,
		|	втОстатокНесопоставленныеВВ.ЕстьСовпадения,
		|	втОстатокНесопоставленныеВВ.ДатаНачала,
		|	ЕСТЬNULL(втСопоставленныеДополнительно.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втОстатокНесопоставленныеВВ.НомерКарты
		|ПОМЕСТИТЬ втСопоставленныеДополнительноВВ
		|ИЗ
		|	втОстатокНесопоставленныеВВ КАК втОстатокНесопоставленныеВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСопоставленныеДополнительно КАК втСопоставленныеДополнительно
		|		ПО втОстатокНесопоставленныеВВ.НомерМагазина = втСопоставленныеДополнительно.НомерМагазина
		|			И втОстатокНесопоставленныеВВ.Дата = втСопоставленныеДополнительно.Дата
		|			И втОстатокНесопоставленныеВВ.Сумма = втСопоставленныеДополнительно.Сумма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатокНесопоставленныеСбер.ТерминалНомер,
		|	втОстатокНесопоставленныеСбер.РабочееМестоНомер,
		|	втОстатокНесопоставленныеСбер.Сумма,
		|	втОстатокНесопоставленныеСбер.Дата,
		|	втОстатокНесопоставленныеСбер.НомерМагазина,
		|	втОстатокНесопоставленныеСбер.idМеста,
		|	втОстатокНесопоставленныеСбер.ДатаНАчала,
		|	втОстатокНесопоставленныеСбер.Статус,
		|	втОстатокНесопоставленныеСбер.ЕстьСовпадения,
		|	ЕСТЬNULL(втСопоставленныеДополнительно.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втОстатокНесопоставленныеСбер.НомерКарты
		|ПОМЕСТИТЬ втСопоставленныеДополнительноСбер
		|ИЗ
		|	втОстатокНесопоставленныеСбер КАК втОстатокНесопоставленныеСбер
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСопоставленныеДополнительно КАК втСопоставленныеДополнительно
		|		ПО втОстатокНесопоставленныеСбер.НомерМагазина = втСопоставленныеДополнительно.НомерМагазина
		|			И втОстатокНесопоставленныеСбер.Сумма = втСопоставленныеДополнительно.СуммаБанк
		|			И втОстатокНесопоставленныеСбер.Дата = втСопоставленныеДополнительно.ДатаСбер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеДополнительноВВ.ТерминалНомер,
		|	втСопоставленныеДополнительноВВ.РабочееМестоНомер,
		|	втСопоставленныеДополнительноВВ.Сумма,
		|	втСопоставленныеДополнительноВВ.Дата,
		|	втСопоставленныеДополнительноВВ.НомерЧека,
		|	втСопоставленныеДополнительноВВ.НомерМагазина,
		|	втСопоставленныеДополнительноВВ.idТочки,
		|	втСопоставленныеДополнительноВВ.idМеста,
		|	втСопоставленныеДополнительноВВ.Статус,
		|	втСопоставленныеДополнительноВВ.ЕстьСовпадения,
		|	втСопоставленныеДополнительноВВ.ДатаНачала,
		|	втСопоставленныеДополнительноВВ.НомерКарты
		|ИЗ
		|	втСопоставленныеДополнительноВВ КАК втСопоставленныеДополнительноВВ
		|ГДЕ
		|	втСопоставленныеДополнительноВВ.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеДополнительноСбер.ТерминалНомер,
		|	втСопоставленныеДополнительноСбер.РабочееМестоНомер,
		|	втСопоставленныеДополнительноСбер.Сумма,
		|	втСопоставленныеДополнительноСбер.Дата,
		|	втСопоставленныеДополнительноСбер.НомерМагазина,
		|	втСопоставленныеДополнительноСбер.idМеста,
		|	втСопоставленныеДополнительноСбер.ДатаНАчала,
		|	втСопоставленныеДополнительноСбер.Статус,
		|	втСопоставленныеДополнительноСбер.ЕстьСовпадения,
		|	втСопоставленныеДополнительноСбер.НомерКарты
		|ИЗ
		|	втСопоставленныеДополнительноСбер КАК втСопоставленныеДополнительноСбер
		|ГДЕ
		|	втСопоставленныеДополнительноСбер.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатокСопоставленные.НомерМагазина,
		|	втОстатокСопоставленные.Дата,
		|	втОстатокСопоставленные.Сумма,
		|	втОстатокСопоставленные.СуммаБанк,
		|	втОстатокСопоставленные.Количество,
		|	втОстатокСопоставленные.КоличествоБанк,
		|	втОстатокСопоставленные.Статус,
		|	втОстатокСопоставленные.Сопоставлен
		|ИЗ
		|	втОстатокСопоставленные КАК втОстатокСопоставленные
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втСопоставленныеДополнительно.НомерМагазина,
		|	втСопоставленныеДополнительно.ДатаНачала,
		|	СУММА(втСопоставленныеДополнительно.Сумма),
		|	СУММА(втСопоставленныеДополнительно.СуммаБанк),
		|	СУММА(втСопоставленныеДополнительно.Количество),
		|	СУММА(втСопоставленныеДополнительно.Количество),
		|	""Сопоставлен с учетом привязок 1С"",
		|	ИСТИНА
		|ИЗ
		|	втСопоставленныеДополнительно КАК втСопоставленныеДополнительно
		|
		|СГРУППИРОВАТЬ ПО
		|	втСопоставленныеДополнительно.ДатаНачала,
		|	втСопоставленныеДополнительно.НомерМагазина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеДополнительноВВ.НомерМагазина,
		|	втСопоставленныеДополнительноВВ.Сумма,
		|	1 КАК Количество,
		|	0 КАК СуммаСбер,
		|	0 КАК КоличествоСбер,
		|	втСопоставленныеДополнительноВВ.ДатаНачала КАК Дата
		|ПОМЕСТИТЬ втНесопоставленные
		|ИЗ
		|	втСопоставленныеДополнительноВВ КАК втСопоставленныеДополнительноВВ
		|ГДЕ
		|	втСопоставленныеДополнительноВВ.Сопоставлен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втСопоставленныеДополнительноСбер.НомерМагазина,
		|	0,
		|	0,
		|	втСопоставленныеДополнительноСбер.Сумма,
		|	1,
		|	втСопоставленныеДополнительноСбер.ДатаНАчала
		|ИЗ
		|	втСопоставленныеДополнительноСбер КАК втСопоставленныеДополнительноСбер
		|ГДЕ
		|	втСопоставленныеДополнительноСбер.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленные.НомерМагазина,
		|	СУММА(втНесопоставленные.Сумма) КАК Сумма,
		|	СУММА(втНесопоставленные.Количество) КАК Количество,
		|	СУММА(втНесопоставленные.СуммаСбер) КАК СуммаСбер,
		|	СУММА(втНесопоставленные.КоличествоСбер) КАК КоличествоСбер,
		|	втНесопоставленные.Дата
		|ПОМЕСТИТЬ втНесопоставленныеСГруппировкой
		|ИЗ
		|	втНесопоставленные КАК втНесопоставленные
		|
		|СГРУППИРОВАТЬ ПО
		|	втНесопоставленные.НомерМагазина,
		|	втНесопоставленные.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСГруппировкой.НомерМагазина,
		|	втНесопоставленныеСГруппировкой.Сумма,
		|	втНесопоставленныеСГруппировкой.Количество,
		|	втНесопоставленныеСГруппировкой.СуммаСбер КАК СуммаБанк,
		|	втНесопоставленныеСГруппировкой.КоличествоСбер КАК КоличествоБанк,
		|	ВЫБОР
		|		КОГДА втНесопоставленныеСГруппировкой.Сумма > втНесопоставленныеСГруппировкой.СуммаСбер
		|			ТОГДА втНесопоставленныеСГруппировкой.Сумма - втНесопоставленныеСГруппировкой.СуммаСбер
		|		ИНАЧЕ втНесопоставленныеСГруппировкой.СуммаСбер - втНесопоставленныеСГруппировкой.Сумма
		|	КОНЕЦ КАК Разность,
		|	ВЫБОР
		|		КОГДА втНесопоставленныеСГруппировкой.Количество > втНесопоставленныеСГруппировкой.КоличествоСбер
		|			ТОГДА втНесопоставленныеСГруппировкой.Количество - втНесопоставленныеСГруппировкой.КоличествоСбер
		|		ИНАЧЕ втНесопоставленныеСГруппировкой.КоличествоСбер - втНесопоставленныеСГруппировкой.Количество
		|	КОНЕЦ КАК РазностьКоличество,
		|	втНесопоставленныеСГруппировкой.Дата
		|ИЗ
		|	втНесопоставленныеСГруппировкой КАК втНесопоставленныеСГруппировкой";
	
	
	Запрос.УстановитьПараметр("НесопоставленныеВВ",Объект.НесопоставленныеВВ.Выгрузить());
	Запрос.УстановитьПараметр("НесопоставленныеСбербанк",Объект.НесопоставленныеСбербанк.Выгрузить());
	Запрос.УстановитьПараметр("СопоставленныеПоМагазинам",НесопоставленныеПоМагазинам.Выгрузить());
		РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатНесопоставленныеВВ = РезультатЗапроса[11].Выгрузить();
	РезультатНесопоставленныеСбербанк = РезультатЗапроса[12].Выгрузить();
	РезультатСопоставленные = РезультатЗапроса[13].Выгрузить();
	РезультатНЕСопоставленные = РезультатЗапроса[16].Выгрузить();
	
	Объект.НесопоставленныеВВ.Загрузить(РезультатНесопоставленныеВВ);
	Объект.НесопоставленныеСбербанк.Загрузить(РезультатНесопоставленныеСбербанк);
	НесопоставленныеПоМагазинам.Загрузить(РезультатНЕСопоставленные);	
	
	для Каждого Строка из РезультатСопоставленные Цикл
		новаяСтрока = Классификация.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока,Строка);
		новаяСтрока.vvShopNo = Строка.НомерМагазина;
		новаяСтрока.cbShopNo = Строка.НомерМагазина;
		новаяСтрока.vvSumm = Строка.Сумма;
		новаяСтрока.cbSumm = Строка.СуммаБанк;
		новаяСтрока.Количество =  Строка.Количество;
		новаяСтрока.КоличествоБанк = Строка.КоличествоБанк;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СопоставитьРазницаВовремени()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НесопоставленныеВВ.ТерминалНомер,
		|	НесопоставленныеВВ.РабочееМестоНомер,
		|	НесопоставленныеВВ.Сумма,
		|	НесопоставленныеВВ.Дата,
		|	НесопоставленныеВВ.НомерЧека,
		|	НесопоставленныеВВ.НомерМагазина,
		|	НесопоставленныеВВ.idТочки,
		|	НесопоставленныеВВ.idМеста,
		|	НесопоставленныеВВ.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеВВ.Дата, ДЕНЬ) КАК ДатаНачала
		|ПОМЕСТИТЬ втНесопоставленныеВВ
		|ИЗ
		|	&НесопоставленныеВВ КАК НесопоставленныеВВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесопоставленныеСбербанк.ТерминалНомер,
		|	НесопоставленныеСбербанк.РабочееМестоНомер,
		|	НесопоставленныеСбербанк.Сумма,
		|	НесопоставленныеСбербанк.Дата,
		|	НесопоставленныеСбербанк.НомерМагазина,
		|	НесопоставленныеСбербанк.idМеста,
		|	НесопоставленныеСбербанк.НомерКарты,
		|	НАЧАЛОПЕРИОДА(НесопоставленныеСбербанк.Дата, ДЕНЬ) КАК ДатаНАчала
		|ПОМЕСТИТЬ втНесопоставленныеСбербанк
		|ИЗ
		|	&НесопоставленныеСбербанк КАК НесопоставленныеСбербанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СопоставленныеПоМагазинам.НомерМагазина,
		|	СопоставленныеПоМагазинам.Дата,
		|	СопоставленныеПоМагазинам.Сумма,
		|	СопоставленныеПоМагазинам.СуммаБанк,
		|	СопоставленныеПоМагазинам.Количество,
		|	СопоставленныеПоМагазинам.КоличествоБанк
		|ПОМЕСТИТЬ втСопосталениеПоМагазинам
		|ИЗ
		|	&СопоставленныеПоМагазинам КАК СопоставленныеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопосталениеПоМагазинам.НомерМагазина,
		|	втСопосталениеПоМагазинам.Дата,
		|	втСопосталениеПоМагазинам.Сумма,
		|	втСопосталениеПоМагазинам.СуммаБанк,
		|	втСопосталениеПоМагазинам.Количество,
		|	втСопосталениеПоМагазинам.КоличествоБанк,
		|	ВЫБОР
		|		КОГДА втСопосталениеПоМагазинам.Количество > 1
		|				И втСопосталениеПоМагазинам.КоличествоБанк > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроверяемВремя
		|ПОМЕСТИТЬ втСтатусСопоставления
		|ИЗ
		|	втСопосталениеПоМагазинам КАК втСопосталениеПоМагазинам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеВВ.ТерминалНомер,
		|	втНесопоставленныеВВ.РабочееМестоНомер,
		|	втНесопоставленныеВВ.Сумма,
		|	втНесопоставленныеВВ.Дата,
		|	втНесопоставленныеВВ.НомерЧека,
		|	втНесопоставленныеВВ.НомерМагазина,
		|	втНесопоставленныеВВ.idТочки,
		|	втНесопоставленныеВВ.idМеста,
		|	втНесопоставленныеВВ.ДатаНачала,
		|	втНесопоставленныеВВ.НомерКарты
		|ПОМЕСТИТЬ втПроверяемВремяВВ
		|ИЗ
		|	втНесопоставленныеВВ КАК втНесопоставленныеВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусСопоставления КАК втСтатусСопоставления
		|		ПО втНесопоставленныеВВ.НомерМагазина = втСтатусСопоставления.НомерМагазина
		|			И втНесопоставленныеВВ.ДатаНачала = втСтатусСопоставления.Дата
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.ПроверяемВремя, ЛОЖЬ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСбербанк.ТерминалНомер,
		|	втНесопоставленныеСбербанк.РабочееМестоНомер,
		|	втНесопоставленныеСбербанк.Сумма,
		|	втНесопоставленныеСбербанк.Дата,
		|	втНесопоставленныеСбербанк.НомерМагазина,
		|	втНесопоставленныеСбербанк.idМеста,
		|	втНесопоставленныеСбербанк.ДатаНАчала,
		|	втНесопоставленныеСбербанк.НомерКарты
		|ПОМЕСТИТЬ втПРовеяемВремяСбер
		|ИЗ
		|	втНесопоставленныеСбербанк КАК втНесопоставленныеСбербанк
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусСопоставления КАК втСтатусСопоставления
		|		ПО втНесопоставленныеСбербанк.НомерМагазина = втСтатусСопоставления.НомерМагазина
		|			И втНесопоставленныеСбербанк.ДатаНАчала = втСтатусСопоставления.Дата
		|ГДЕ
		|	ЕСТЬNULL(втСтатусСопоставления.ПроверяемВремя, ЛОЖЬ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(втПроверяемВремяВВ.Дата, втПРовеяемВремяСбер.Дата, МИНУТА) КАК СреднееОтклонние,
		|	1 КАК ВсегоСовпадает,
		|	втПроверяемВремяВВ.НомерМагазина,
		|	втПроверяемВремяВВ.ДатаНачала,
		|	ИСТИНА КАК Сопоставлен,
		|	втПРовеяемВремяСбер.Сумма КАК СуммаБанк,
		|	втПроверяемВремяВВ.Сумма КАК Сумма
		|ПОМЕСТИТЬ втОтклонениеВремени
		|ИЗ
		|	втПроверяемВремяВВ КАК втПроверяемВремяВВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПРовеяемВремяСбер КАК втПРовеяемВремяСбер
		|		ПО втПроверяемВремяВВ.ДатаНачала = втПРовеяемВремяСбер.ДатаНАчала
		|			И втПроверяемВремяВВ.НомерМагазина = втПРовеяемВремяСбер.НомерМагазина
		|			И втПроверяемВремяВВ.Сумма = втПРовеяемВремяСбер.Сумма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеВВ.ТерминалНомер,
		|	втНесопоставленныеВВ.РабочееМестоНомер,
		|	втНесопоставленныеВВ.Сумма,
		|	втНесопоставленныеВВ.Дата,
		|	втНесопоставленныеВВ.НомерЧека,
		|	втНесопоставленныеВВ.НомерМагазина,
		|	втНесопоставленныеВВ.idТочки,
		|	втНесопоставленныеВВ.idМеста,
		|	втНесопоставленныеВВ.ДатаНачала,
		|	ЕСТЬNULL(втОтклонениеВремени.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втОтклонениеВремени.СреднееОтклонние,
		|	втНесопоставленныеВВ.НомерКарты
		|ПОМЕСТИТЬ втСопоставленныеВВ
		|ИЗ
		|	втНесопоставленныеВВ КАК втНесопоставленныеВВ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтклонениеВремени КАК втОтклонениеВремени
		|		ПО втНесопоставленныеВВ.НомерМагазина = втОтклонениеВремени.НомерМагазина
		|			И втНесопоставленныеВВ.ДатаНачала = втОтклонениеВремени.ДатаНачала
		|			И втНесопоставленныеВВ.Сумма = втОтклонениеВремени.Сумма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСбербанк.ТерминалНомер,
		|	втНесопоставленныеСбербанк.РабочееМестоНомер,
		|	втНесопоставленныеСбербанк.Сумма,
		|	втНесопоставленныеСбербанк.Дата,
		|	втНесопоставленныеСбербанк.НомерМагазина,
		|	втНесопоставленныеСбербанк.idМеста,
		|	втНесопоставленныеСбербанк.ДатаНАчала,
		|	ЕСТЬNULL(втОтклонениеВремени.Сопоставлен, ЛОЖЬ) КАК Сопоставлен,
		|	втОтклонениеВремени.СреднееОтклонние,
		|	втНесопоставленныеСбербанк.НомерКарты
		|ПОМЕСТИТЬ втСопоставленныеСбер
		|ИЗ
		|	втНесопоставленныеСбербанк КАК втНесопоставленныеСбербанк
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтклонениеВремени КАК втОтклонениеВремени
		|		ПО втНесопоставленныеСбербанк.НомерМагазина = втОтклонениеВремени.НомерМагазина
		|			И втНесопоставленныеСбербанк.ДатаНАчала = втОтклонениеВремени.ДатаНачала
		|			И втНесопоставленныеСбербанк.Сумма = втОтклонениеВремени.СуммаБанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеВВ.ТерминалНомер,
		|	втСопоставленныеВВ.РабочееМестоНомер,
		|	втСопоставленныеВВ.Сумма,
		|	втСопоставленныеВВ.Дата,
		|	втСопоставленныеВВ.НомерЧека,
		|	втСопоставленныеВВ.НомерМагазина,
		|	втСопоставленныеВВ.idТочки,
		|	втСопоставленныеВВ.idМеста,
		|	втСопоставленныеВВ.ДатаНачала КАК ДатаНачалоДня,
		|	втСопоставленныеВВ.Сопоставлен,
		|	втСопоставленныеВВ.НомерКарты
		|ИЗ
		|	втСопоставленныеВВ КАК втСопоставленныеВВ
		|ГДЕ
		|	втСопоставленныеВВ.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеСбер.ТерминалНомер,
		|	втСопоставленныеСбер.РабочееМестоНомер,
		|	втСопоставленныеСбер.Сумма,
		|	втСопоставленныеСбер.Дата,
		|	втСопоставленныеСбер.НомерМагазина,
		|	втСопоставленныеСбер.idМеста,
		|	втСопоставленныеСбер.ДатаНАчала КАК ДатаНачалоДня,
		|	втСопоставленныеСбер.Сопоставлен,
		|	втСопоставленныеСбер.НомерКарты
		|ИЗ
		|	втСопоставленныеСбер КАК втСопоставленныеСбер
		|ГДЕ
		|	втСопоставленныеСбер.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтклонениеВремени.НомерМагазина,
		|	втОтклонениеВремени.ДатаНачала КАК Дата,
		|	СУММА(втОтклонениеВремени.СуммаБанк) КАК СуммаБанк,
		|	СУММА(втОтклонениеВремени.Сумма) КАК Сумма,
		|	СРЕДНЕЕ(втОтклонениеВремени.СреднееОтклонние) КАК СреднееОтклонение,
		|	СУММА(втОтклонениеВремени.ВсегоСовпадает) КАК ВсегоСовпадает
		|ИЗ
		|	втОтклонениеВремени КАК втОтклонениеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	втОтклонениеВремени.НомерМагазина,
		|	втОтклонениеВремени.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСопоставленныеВВ.НомерМагазина,
		|	втСопоставленныеВВ.ДатаНачала,
		|	втСопоставленныеВВ.Сумма,
		|	0 КАК СуммаСбер,
		|	1 КАК Количество,
		|	0 КАК КоличествоСбер
		|ПОМЕСТИТЬ втНесопоставленные
		|ИЗ
		|	втСопоставленныеВВ КАК втСопоставленныеВВ
		|ГДЕ
		|	втСопоставленныеВВ.Сопоставлен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втСопоставленныеСбер.НомерМагазина,
		|	втСопоставленныеСбер.ДатаНАчала,
		|	0,
		|	втСопоставленныеСбер.Сумма,
		|	0,
		|	1
		|ИЗ
		|	втСопоставленныеСбер КАК втСопоставленныеСбер
		|ГДЕ
		|	втСопоставленныеСбер.Сопоставлен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленные.НомерМагазина,
		|	втНесопоставленные.ДатаНачала,
		|	СУММА(втНесопоставленные.Сумма) КАК Сумма,
		|	СУММА(втНесопоставленные.СуммаСбер) КАК СуммаСбер,
		|	СУММА(втНесопоставленные.Количество) КАК Количество,
		|	СУММА(втНесопоставленные.КоличествоСбер) КАК КоличествоСбер
		|ПОМЕСТИТЬ втНесопоставленныеСГруппировкой
		|ИЗ
		|	втНесопоставленные КАК втНесопоставленные
		|
		|СГРУППИРОВАТЬ ПО
		|	втНесопоставленные.НомерМагазина,
		|	втНесопоставленные.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесопоставленныеСГруппировкой.НомерМагазина,
		|	втНесопоставленныеСГруппировкой.ДатаНачала КАК Дата,
		|	втНесопоставленныеСГруппировкой.Сумма,
		|	втНесопоставленныеСГруппировкой.СуммаСбер КАК СуммаБанк,
		|	втНесопоставленныеСГруппировкой.Количество,
		|	втНесопоставленныеСГруппировкой.КоличествоСбер КАК КоличествоБанк,
		|	втНесопоставленныеСГруппировкой.Сумма - втНесопоставленныеСГруппировкой.СуммаСбер КАК РазностьСумма,
		|	втНесопоставленныеСГруппировкой.Количество - втНесопоставленныеСГруппировкой.КоличествоСбер КАК РазностьКоличество
		|ИЗ
		|	втНесопоставленныеСГруппировкой КАК втНесопоставленныеСГруппировкой";
	
	
	Запрос.УстановитьПараметр("НесопоставленныеВВ",Объект.НесопоставленныеВВ.Выгрузить());
	Запрос.УстановитьПараметр("НесопоставленныеСбербанк",Объект.НесопоставленныеСбербанк.Выгрузить());
	Запрос.УстановитьПараметр("СопоставленныеПоМагазинам",НесопоставленныеПоМагазинам.Выгрузить());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НЕсопоставленныеВВ = РезультатЗапроса[9].Выгрузить();
	НЕсопоставленныеСБ = РезультатЗапроса[10].Выгрузить();
	ОтклонениеВремени = РезультатЗапроса[11].Выгрузить();
	РезультатНесопоставленныеПоМагазинам = РезультатЗапроса[14].Выгрузить();
	
	Для каждого Строка из ОтклонениеВремени Цикл
		новаяСтрока = Классификация.Добавить();		
		новаяСтрока.vvShopNo = Строка.НомерМагазина;
		новаяСтрока.cbShopNo = Строка.НомерМагазина;
		новаяСтрока.vvSumm = Строка.Сумма;
		новаяСтрока.cbSumm = Строка.СуммаБанк;
		новаяСтрока.Количество =  Строка.ВсегоСовпадает;
		новаяСтрока.КоличествоБанк =  Строка.ВсегоСовпадает;
		новаяСтрока.Дата = Строка.Дата;                              
		новаяСтрока.Статус = "Разница во времени";
	КонецЦикла;	
	
	Объект.НесопоставленныеВВ.Загрузить(НЕсопоставленныеВВ);
	Объект.НесопоставленныеСбербанк.Загрузить(НЕсопоставленныеСБ);
	НесопоставленныеПоМагазинам.Загрузить(РезультатНесопоставленныеПоМагазинам);
	
КонецПроцедуры	

Функция ПолучитьДанныеПоНомеруТерминала(Номер)
		
	Если  Номер = 0 ИЛИ НЕ ЗначениеЗаполнено(Номер) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СтрокаНомер = СокрЛП(Строка(Номер));
	СтрокаНомер = СтрЗаменить(СтрокаНомер," ","");
	СтрокаНомер = СтрЗаменить(СтрокаНомер,Символы.НПП,"");

	СтруктураПоиска = Новый Структура("Терминал",СтрокаНомер);
	ПоискСтроки = МестоНомер.НайтиСтроки(СтруктураПоиска);
	
	Результат = Новый Структура("РабочееМестоНомер,НомерМагазина");
	
	Если ПоискСтроки.Количество() > 0 Тогда
		Результат.РабочееМестоНомер=ПоискСтроки[0].НомерМеста;
		Результат.НомерМагазина=ПоискСтроки[0].НомерМагазина;
		Возврат Результат;	
	КонецЕсли;	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Терминалы.Владелец.НомерТочки КАК НомерМагазина,
		|	Терминалы.ID_SQL
		|ИЗ
		|	Справочник.Терминалы КАК Терминалы
		|ГДЕ
		|	Терминалы.ИД = &ИД";
	
	
	Запрос.УстановитьПараметр("ИД",СтрокаНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.НомерМагазина = ВыборкаДетальныеЗаписи.НомерМагазина;
		Результат.РабочееМестоНомер = CashIDПоIDСбербанк(ВыборкаДетальныеЗаписи.ID_SQL);
		Соответствие = МестоНомер.Добавить();
		Соответствие.Терминал = СтрокаНомер;
		Соответствие.НомерМеста  = Результат.РабочееМестоНомер;
		Соответствие.НомерМагазина  = Результат.НомерМагазина;
		Если Результат.РабочееМестоНомер = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат Результат;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто,
		|	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.СтруктурнаяЕдиница,
		|	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
		|	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.Наименование КАК НаименованиеМеста
		|ИЗ
		|	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаОкончания, Терминал.ИД = &СтрокаТерминал) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаТранзакцииОкончание);
	Запрос.УстановитьПараметр("СтрокаТерминал", СтрокаНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.НомерМагазина = ВыборкаДетальныеЗаписи.НомерТочки;
		Результат.РабочееМестоНомер = CashIDПоIDСбербанк(ВыборкаДетальныеЗаписи.НаименованиеМеста);
		Соответствие = МестоНомер.Добавить();
		Соответствие.Терминал = СтрокаНомер;
		Соответствие.НомерМеста  = Результат.РабочееМестоНомер;
		Соответствие.НомерМагазина  = Результат.НомерМагазина;
		Если Результат.РабочееМестоНомер = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат Результат;

	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	Возврат Неопределено;
	
КонецФункции	
	
Функция ПолучитьДатуИзСтрокиSQL(СтрокаSQL)
	
	МассивДата = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаSQL,"-");	
	Результат = Дата(МассивДата[0],МассивДата[1],МассивДата[2]);
	
	Возврат Результат;
	
КонецФункции	
	
Процедура СопоставитьПОМагазинам()

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаМагазин.НомерМагазина,
		|	ТаблицаМагазин.Сумма,
		|	1 КАК Количество,
		|	НАЧАЛОПЕРИОДА(ТаблицаМагазин.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втДанныеМагазин
		|ИЗ
		|	&ТаблицаМагазин КАК ТаблицаМагазин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаБанк.НомерМагазина,
		|	ТаблицаБанк.Сумма,
		|	1 КАК Количество,
		|	НАЧАЛОПЕРИОДА(ТаблицаБанк.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втДанныеБанк
		|ИЗ
		|	&ТаблицаБанк КАК ТаблицаБанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеМагазин.НомерМагазина,
		|	втДанныеМагазин.Сумма КАК СуммаМагазин,
		|	0 КАК СуммаБанк,
		|	0 КАК КоличествоБанк,
		|	втДанныеМагазин.Количество КАК КоличествоМагазин,
		|	втДанныеМагазин.Дата
		|ПОМЕСТИТЬ втРезультат
		|ИЗ
		|	втДанныеМагазин КАК втДанныеМагазин
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втДанныеБанк.НомерМагазина,
		|	0,
		|	втДанныеБанк.Сумма,
		|	втДанныеБанк.Количество,
		|	0,
		|	втДанныеБанк.Дата
		|ИЗ
		|	втДанныеБанк КАК втДанныеБанк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультат.НомерМагазина,
		|	СУММА(втРезультат.СуммаМагазин) КАК Сумма,
		|	СУММА(втРезультат.СуммаБанк) КАК СуммаБанк,
		|	СУММА(втРезультат.КоличествоБанк) КАК КоличествоБанк,
		|	СУММА(втРезультат.КоличествоМагазин) КАК Количество,
		|	втРезультат.Дата
		|ПОМЕСТИТЬ втРезультатСГруппировкой
		|ИЗ
		|	втРезультат КАК втРезультат
		|
		|СГРУППИРОВАТЬ ПО
		|	втРезультат.НомерМагазина,
		|	втРезультат.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезультатСГруппировкой.НомерМагазина,
		|	втРезультатСГруппировкой.Сумма,
		|	втРезультатСГруппировкой.СуммаБанк,
		|	втРезультатСГруппировкой.КоличествоБанк,
		|	втРезультатСГруппировкой.Количество,
		|	ВЫБОР
		|		КОГДА втРезультатСГруппировкой.Сумма > втРезультатСГруппировкой.СуммаБанк
		|			ТОГДА втРезультатСГруппировкой.Сумма - втРезультатСГруппировкой.СуммаБанк
		|		ИНАЧЕ втРезультатСГруппировкой.СуммаБанк - втРезультатСГруппировкой.Сумма
		|	КОНЕЦ КАК РазностьСумма,
		|	ВЫБОР
		|		КОГДА втРезультатСГруппировкой.Количество > втРезультатСГруппировкой.КоличествоБанк
		|			ТОГДА втРезультатСГруппировкой.Количество - втРезультатСГруппировкой.КоличествоБанк
		|		ИНАЧЕ втРезультатСГруппировкой.КоличествоБанк - втРезультатСГруппировкой.Количество
		|	КОНЕЦ КАК РазностьКоличество,
		|	втРезультатСГруппировкой.Дата
		|ИЗ
		|	втРезультатСГруппировкой КАК втРезультатСГруппировкой";
	
	Запрос.УстановитьПараметр("ТаблицаМагазин",Объект.НесопоставленныеВВ.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаБанк",Объект.НесопоставленныеСбербанк.Выгрузить());	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СводнаяТаблицаМагазины = РезультатЗапроса[4].Выгрузить();
		
	НесопоставленныеПоМагазинам.Загрузить(СводнаяТаблицаМагазины);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура СопоставитьSQL(Команда)
	СопоставитьSQLНаСервере();
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборВВ()
	
	СтруктураОтбора = Новый Структура("НомерМагазина",ОтборНомерВВ);
	Если ЗначениеЗаполнено(ОтборНомерВВ) И ОтборНомерВВ <> 0 Тогда
		ТаблицаСОтбором = Объект.НесопоставленныеВВ.Выгрузить().Скопировать(СтруктураОтбора);
	Иначе 
		ТаблицаСОтбором = Объект.НесопоставленныеВВ.Выгрузить().Скопировать();
	КонецЕсли;	
	НесопоставленныеВВСотбором.Загрузить(ТаблицаСОтбором);	
	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборБанк()
	
	СтруктураОтбора = Новый Структура("НомерМагазина",ОтборНомерБанк);
	Если ЗначениеЗаполнено(ОтборНомерБанк) И ОтборНомерБанк <> 0 Тогда
		ТаблицаСОтбором = Объект.НесопоставленныеСбербанк.Выгрузить().Скопировать(СтруктураОтбора);
	Иначе 
		ТаблицаСОтбором = Объект.НесопоставленныеСбербанк.Выгрузить().Скопировать();
	КонецЕсли;	
	НесопоставленныеБанкСотбором.Загрузить(ТаблицаСОтбором);		
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборНомерВВПриИзменении(Элемент)
	УстановитьОтборВВ();
КонецПроцедуры


&НаКлиенте
Процедура ОтборНомерБанкПриИзменении(Элемент)
	УстановитьОтборБанк();
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьОшибкиПоЧекам(Команда)
	ТекущаяСтрока = Элементы.КлассификацияСводнаяОшибки.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтборНомерВВ  = ТекущаяСтрока.vvShopNo;
	ОтборНомерБанк = ТекущаяСтрока.CbShopNo;
	УстановитьОтборВВ();
	УстановитьОтборБанк();
	Элементы.ГруппаСтраницыSQL.ТекущаяСтраница = Элементы.ПросмотрЧеков;		
	
КонецПроцедуры

//+++АК MIND 2018.01.09 
Функция ПолучитьСтруктуруПараметровДляПоискаЧеков(НомерМагазина, НомерТерминала, НомерЧека, ДатаЧека)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НомерТочки", НомерМагазина);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоМагазин
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки = &НомерТочки";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден магазин по номеру: " + Формат(НомерМагазина, "ЧГ=0") + ". Просмотр чеков невозможен!");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура("СформироватьПриОткрытии, ТорговаяТочка, Дата, НомерМеста", Истина,, ДатаЧека);
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврат.ТорговаяТочка = Выборка.Ссылка;
		ЭтоМагазин = Выборка.ЭтоМагазин;
	КонецЕсли;
	
	Если ЭтоМагазин Тогда
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		ТекстЗапроса = "SELECT TOP 1
				|	Cast(dbo_Checks.CashId as nvarchar(50)) as НомерМеста
				|FROM
				|	" + ?(ЭтоМагазин, "SMS_Union", "SMS_IZBENKA") + ".dbo.Checks as dbo_Checks (nolock)
				|WHERE
				|	dbo_Checks.CloseDate BETWEEN " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаЧека)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаЧека)) + "
				|	" + ?(ЗначениеЗаполнено(НомерМагазина), "and dbo_Checks.ShopNo = " + ВнешниеДанные.ФорматПоля(НомерМагазина), "") + "
				|   " + ?(ЗначениеЗаполнено(НомерТерминала), "and dbo_Checks.terminal_bank = '" + ВнешниеДанные.ФорматПоля(НомерТерминала) + "'", "") + "
				|   " + ?(ЗначениеЗаполнено(НомерЧека), "and dbo_Checks.CashCheckNo = " + ВнешниеДанные.ФорматПоля(НомерЧека), "") + "
				|";
		
		rs = ADOСоединение.Execute(ТекстЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Если НЕ rs.BOF() Тогда
			rs.MoveFirst();
			
			Если НЕ rs.EOF() Тогда
				СтруктураВозврат.НомерМеста = Rs.Fields("НомерМеста").Value;
			КонецЕсли;
		КонецЕсли;
		ADOСоединение.Close();
		ADOСоединение = Неопределено;
	КонецЕсли;	
	
	Возврат СтруктураВозврат;
	
КонецФункции	

//+++АК MIND 2018.01.09 переход в обработку поиска чеков
&НаКлиенте
Процедура ПосмотретьВсеЧеки_ВВ(Команда)
	
	ТекДанные = Элементы.НесопоставленныеВВСотбором.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана строка в таблице чеков");
		Возврат;
	КонецЕсли;
	
	СтруктураОткрытия = ПолучитьСтруктуруПараметровДляПоискаЧеков(ТекДанные.НомерМагазина, ТекДанные.ТерминалНомер, ТекДанные.НомерЧека, ТекДанные.Дата);
	Если СтруктураОткрытия <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПоискЧеков.Форма.Форма", СтруктураОткрытия);
	КонецЕсли;	
	
КонецПроцедуры

//+++АК MIND 2018.01.09 переход в обработку поиска чеков
&НаКлиенте
Процедура ПосмотретьВсеЧеки_Банк(Команда)
	
	ТекДанные = Элементы.НесопоставленныеБанкСотбором.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана строка в таблице чеков");
		Возврат;
	КонецЕсли;
	
	СтруктураОткрытия = ПолучитьСтруктуруПараметровДляПоискаЧеков(ТекДанные.НомерМагазина, ТекДанные.ТерминалНомер, ТекДанные.НомерЧека, ТекДанные.Дата);
	Если СтруктураОткрытия <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПоискЧеков.Форма.Форма", СтруктураОткрытия);
	КонецЕсли;	
	
	
КонецПроцедуры

