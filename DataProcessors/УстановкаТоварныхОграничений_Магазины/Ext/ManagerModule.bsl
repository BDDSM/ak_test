////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует и возвращает таблицу товаров которые запрещены к выводу из ассортимента
//
// Параметры:
//  ТорговаяТочка  - <Тип.СправочникСсылка.СтруктурныеЕдиницы>, <Тип.Число>, <Тип.Строка> - Торговая точка
//  ТорговаяТочка  - <Тип.СправочникСсылка.Номенклатура>, <Тип.Число>, <Тип.Строка>  - Торговая точка
//
// Возвращаемое значение:
//   <Тип.ТаблицаЗнаечние>   - <описание возвращаемого значения>
//
Функция ПолучитьТаблицуЗапрещенныхКВыводуИзАссортиментаПозиций(ТорговаяТочка = Неопределено, Номенклатура = Неопределено) Экспорт //+++АК mika 2018.10.16 ИП-00020152
	
	//Заполнение ID магазина
	НомерТочки = Неопределено;
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		НомерТочки = Формат(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТорговаяТочкаПоАйпи,"id_tt"),"ЧГ=0");
	ИначеЕсли ТипЗнч(ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		НомерТочки = Формат(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТорговаяТочка, "id_tt"),"ЧГ=0");
	ИначеЕсли ТипЗнч(ТорговаяТочка) = Тип("Число") ИЛИ ТипЗнч(ТорговаяТочка) = Тип("Строка") Тогда
		НомерТочки = ТорговаяТочка;
	КонецЕсли;
	
	//Заполнение ID Номенклатуры
	IDНоменклатуры = Неопределено;
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		IDНоменклатуры = Номенклатура;
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		IDНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "id_tov");
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("Число") ИЛИ ТипЗнч(Номенклатура) = Тип("Строка") Тогда
		IDНоменклатуры = Номенклатура;
	КонецЕсли;
	
	ТаблицаАссортимента = Новый ТаблицаЗначений();
	
	ТаблицаАссортимента.Колонки.Добавить("id_tov"		, Новый ОписаниеТипов("Число"));
	ТаблицаАссортимента.Колонки.Добавить("id_tt"		, Новый ОписаниеТипов("Число"));
	ТаблицаАссортимента.Колонки.Добавить("Status"		, Новый ОписаниеТипов("Число"));
	ТаблицаАссортимента.Колонки.Добавить("СтатусСтрока" , Новый ОписаниеТипов("Строка"));

	ТаблицаАссортимента.Колонки.Добавить("Номенклатура" , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если НЕ ЗначениеЗаполнено(НомерТочки) Тогда
		Возврат ТаблицаАссортимента;
	КонецЕсли;
	
	//Получение ассортимента, сформированного по новому алгоритму(автоматически)
	ТекстЗапроса = "SELECT zc.id_tt as id_tt, ISNULL(r.id_tov_Osnovn, zc.id_tov) as id_tov, zc.Status as Status
				   |FROM M2..ZC_tt_tov (nolock) zc
				   |LEFT JOIN reports..tov_poln_zamenyaem r on r.id_tov_Zadvoen = zc.id_tov
				   |WHERE id_tt in (НомерТочки) НоменклатураОтбор";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерТочки", НомерТочки); 
	
	Если ЗначениеЗаполнено(IDНоменклатуры) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НоменклатураОтбор", СтрЗаменить(" and id_tov IN (IDНоменклатуры)","IDНоменклатуры",IDНоменклатуры));  
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НоменклатураОтбор", ""); 
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	rs = ADOСоединение.Execute(ТекстЗапроса);

	Попытка
		rs.MoveFirst();
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТаблицаАссортимента.Добавить();
			НоваяСтрока.id_tov = Rs.Fields("id_tov").Value; 
			НоваяСтрока.id_tt  = Rs.Fields("id_tt").Value; 
			НоваяСтрока.Status = Rs.Fields("Status").Value; 
			rs.MoveNext();
		КонецЦикла;
	Исключение
		//Сообщить(НСтр(СтрЗаменить("ru = 'По магазину НомерТочки не удалось получить данные об автоматически сформированному ассортименту (M2.dbo.ZC_tt_tov)';", "НомерТочки", НомерТочки));
		Возврат ТаблицаАссортимента;
	КонецПопытки;

	Если ТаблицаАссортимента.Количество()> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАссортимента.id_tov,
		|	ТаблицаАссортимента.id_tt,
		|	ТаблицаАссортимента.Status
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	&ТаблицаАссортимента КАК ТаблицаАссортимента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Номенклатура.id_tov,
		|	ВТ_Номенклатура.id_tt,
		|	ВТ_Номенклатура.Status,
		|	ВЫБОР
		|		КОГДА ВТ_Номенклатура.Status = 2
		|			ТОГДА ""Отправка""
		|		КОГДА ВТ_Номенклатура.Status = 3
		|			ТОГДА ""Выведен""
		|		КОГДА ВТ_Номенклатура.Status = 4
		|			ТОГДА ""Обычные поставки (по второй наибольшей)""
		|		КОГДА ВТ_Номенклатура.Status = 5
		|			ТОГДА ""Аккуратные поставки (по второй наименьшей)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СтатусСтрока,
		|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_Номенклатура.id_tov = Номенклатура.id_tov";
		
		Запрос.УстановитьПараметр("ТаблицаАссортимента", ТаблицаАссортимента);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции // ПолучитьТаблицуЗапрещенныкКВыводуИзАссортиментаПозиций()
 