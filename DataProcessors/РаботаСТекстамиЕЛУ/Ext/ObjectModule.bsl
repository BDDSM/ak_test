Перем мРекордсет Экспорт;
Перем мСоединение Экспорт;
Перем мБазаДанных;

////////////////////////////////////////////
// ADO
////////////////////////////////////////////

Функция АДОКоннекшн_СоздатьОбъект() Экспорт
    
    Возврат New ComObject("ADODB.Connection"); 
    
КонецФункции    // АДОКоннекшн_СоздатьОбъект

Функция АДОРекордсет_СоздатьОбъект(Соединение = "") Экспорт
    
    rs = New ComObject("ADODB.Recordset");
    
    rs.ActiveConnection = Соединение;                               
        
   Возврат rs;
    
КонецФункции    // АДОРекордсет_СоздатьОбъект

Функция АДОДБ_УстановитьСоединение(Соединение, сИмяБазы, сИмяКомпьютера, сЛогин, сПароль) Экспорт
        
	Строка = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(, , мБазаДанных, , , "LANGUAGE=русский"); 

    Возврат Соединение.Open(Строка);
    
КонецФункции // АДОДБ_УстановитьСоединение()

////////////////////////////////////////////
// Прочие
////////////////////////////////////////////

Функция СоставитьЗаготовкуЗапросаНаЧтение() Экспорт
	
	Возврат "SELECT <field> FROM <tablename> (nolock)";
	
КонецФункции 

Процедура ДополнитьТекстЗапросаНаЧтениеУсловиями(ТекстЗапроса, ИмяПоля, ЗначениеПоля, ЭтоПервоеУсловие = Истина) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервоеУсловие, " WHERE ", " AND ") + ИмяПоля + " = " + ЗначениеПоля;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицу(ТЧПараметр, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий = Неопределено) Экспорт
	
	Если мРекордсет = Неопределено Тогда
		
		мСоединение = АДОКоннекшн_СоздатьОбъект();
    
   		Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
        	Сообщить("Не удалось подключиться...", 30);
        	Возврат;
    	КонецЕсли;                                        
    
    	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
		
	КонецЕсли;
	
	ТЧ = ЭтотОбъект[ИмяТаблицы];
	
	ТекстЗапроса = СоставитьЗаготовкуЗапросаНаЧтение(); 	 	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<field>", СтруктураПолей);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<tablename>", ИмяТаблицы);
	
	Если СоответствиеУсловий <> Неопределено Тогда
		
		Сч = 0;
		
		Для Каждого ЭлУсловие Из СоответствиеУсловий Цикл		
			
			Сч = Сч + 1;
			
			ДополнитьТекстЗапросаНаЧтениеУсловиями(ТекстЗапроса, ЭлУсловие.Ключ, ЭлУсловие.Значение, Сч = 1);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	Тч.Очистить();
	
	СчИндексногоПоля = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		НовСтр = ТЧ.Добавить();
		СчИндексногоПоля = СчИндексногоПоля + 1;
		
		Попытка
			НовСтр.ИндексноеПоле = СчИндексногоПоля;
		Исключение
		КонецПопытки;
		
		Для Каждого Колонка Из РеквизитыТЧ Цикл
			НовСтр[Колонка] = мРекордсет.Fields(Колонка).Value;						
		КонецЦикла;
		
		мРекордсет.MoveNext();
		
	КонецЦикла;
		
	мРекордсет.Close();
	
КонецПроцедуры

Функция ПолучитьМаксиНомерN(id_text_kkm_main, ЭтоНоваяЗапись) Экспорт
	
	ТекстЗапроса = "SELECT
	|	MAX(tablica.n) AS n
	|FROM
	|	[" + мБазаДанных + "].[dbo].[text_kkm] AS tablica (nolock)" + ?(ЭтоНоваяЗапись, "", " WHERE id_text_kkm_main = " + Формат(id_text_kkm_main, "ЧГ=0"));

	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Неопределено;
    КонецЕсли; 

	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);

	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	n = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		n = мРекордсет.Fields("n").Value;						
				
		мРекордсет.MoveNext();
		
	КонецЦикла;
		
	мРекордсет.Close();
	
	Попытка
		n = n + 1;
	Исключение
		n = 1;
	КонецПопытки;
	
	Возврат n;
	
КонецФункции

//////////////////////////////////////////////
//
/////////////////////////////////////////////

Процедура ЗаполнитьОсновнуюТаблицу(ЗАгружатОтчетыьКопию = Истина) Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
    
    Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
        Сообщить("Не удалось подключиться...", 30);
        Возврат;
    КонецЕсли;                                        
    
    мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
	
	СтруктураПолей = "id_text_kkm_main, Date_st, Date_fi, CAST([descr] as CHAR(500)) as descr";
	ИмяТаблицы = "text_kkm_main";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_text_kkm_main");
	РеквизитыТч.Добавить("Date_st");
	РеквизитыТч.Добавить("Date_fi");
	РеквизитыТч.Добавить("descr");
	
	ЗаполнитьТаблицу(text_kkm_main, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ);
	
	text_kkm_main_Копия.Загрузить(text_kkm_main.Выгрузить());
	
КонецПроцедуры 

Функция СоздатьНовуюЗапись() Экспорт
	
	ТекстЗапроса =
	"SELECT
	|	MAX(tablica.id_text_kkm_main) AS id_text_kkm_main
	|FROM
	|	[" + мБазаДанных + "].[dbo].[text_kkm_main] AS tablica (nolock)";

	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Неопределено;
    КонецЕсли; 

	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);

	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	id_text_kkm_main = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		id_text_kkm_main = мРекордсет.Fields("id_text_kkm_main").Value;						
				
		мРекордсет.MoveNext();
		
	КонецЦикла;
		
	мРекордсет.Close();
	
	id_text_kkm_main = id_text_kkm_main + 1;
	
	ЗаполнитьНовымIdТаблицу(text_kkm, id_text_kkm_main);
	ЗаполнитьНовымIdТаблицу(text_kkm_tt, id_text_kkm_main);
	ЗаполнитьНовымIdТаблицу(text_kkm_Копия, id_text_kkm_main);
	ЗаполнитьНовымIdТаблицу(text_kkm_tt_Копия, id_text_kkm_main);
	
	Возврат id_text_kkm_main
	
КонецФункции

Процедура ЗаполнитьНовымidТаблицу(Тч, id_text_kkm_main)
	
	НайдСтр = ТЧ.НайтиСтроки(Новый Структура("id_text_kkm_main", 0));
	
	Для Каждого Стр Из НайдСтр Цикл
		
	  	Стр.id_text_kkm_main = id_text_kkm_main;
	  
	 КонецЦикла;
	
КонецПроцедуры
	
////////////////////////////////////////////

//ТЗИсх - какая таблица была
//ТЗКон - какая таблица стала
//Названия колонок должны совпадать
//Ключи - массив ключей
Функция СравнитьПоКлючамТЗ(ТЗНач, ТЗКон, Ключи, ИмяТаблицы, МассивУсловийГде, id_text_kkm_main, НеучитываемыеПоля, НазваниеКолонкиРезультата="Статус") Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Неопределено;
    КонецЕсли; 

	ТЗРез=Новый ТаблицаЗначений();
    КолРез=Новый Массив();
	
	НеучитываемыеПоля.Добавить("НомерСтроки");
	НеучитываемыеПоля.Добавить("ИсходныйНомерСтроки");
    
    //Ищем общие колонки в обоих таблицах
    Для Каждого Эл ИЗ ТЗНач.Колонки Цикл
		
		Если НеучитываемыеПоля.Найти(Эл.Имя) = Неопределено Тогда
		
		Если ТЗКон.Колонки.Найти(Эл.Имя)<>Неопределено Тогда
            КолРез.Добавить(Эл.Имя);
		КонецЕсли;
		
		КонецЕсли;
		
    КонецЦикла;
    
    //Добавляем эти колонки в таблицу-результат
    Для Каждого Эл ИЗ КолРез Цикл
        ТЗРез.Колонки.Добавить(Эл);
    КонецЦикла;
    
    //Добавляем служебные колонки
    ТЗРез.Колонки.Добавить("___ТЗНачИндекс");
    ТЗРез.Колонки.Добавить("___ТЗКонИндекс");
    ТЗРез.Колонки.Добавить("___ТЗНачКонтроль");
    ТЗРез.Колонки.Добавить("___ТЗКонКонтроль");
    
    
    Для Каждого Стр Из ТЗНач Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=ТЗНач.Индекс(Стр)+1;
        НовСтр.___ТЗКонИндекс=0;
        НовСтр.___ТЗНачКонтроль=1;
        НовСтр.___ТЗКонКонтроль=0;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    Для Каждого Стр Из ТЗКон Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=0;
        НовСтр.___ТЗКонИндекс=ТЗКон.Индекс(Стр)+1;
        НовСтр.___ТЗНачКонтроль=0;
        НовСтр.___ТЗКонКонтроль=1;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    
    СтрокаСвертки="";
    Для Каждого Эл Из Ключи Цикл
        СтрокаСвертки=СтрокаСвертки+?(СтрокаСвертки="","",",")+Эл;
    КонецЦикла;
    
    СтрокаИтогов="___ТЗНачИндекс,___ТЗКонИндекс,___ТЗНачКонтроль,___ТЗКонКонтроль";
    
    //Сворачиваем
    ТЗРез.Свернуть(СтрокаСвертки, СтрокаИтогов);
    
    //Восстанавливаем общие колонки
    ЗнКол=Новый Массив();
    Для Каждого Эл ИЗ КолРез Цикл
        Если ТЗРез.Колонки.Найти(Эл)=Неопределено Тогда
            ТЗРез.Колонки.Добавить(Эл);
            ЗнКол.Добавить(Эл);
        КонецЕсли;
    КонецЦикла;
    
    ТЗРез.Колонки.Добавить(НазваниеКолонкиРезультата);
    
    //Формируем таблицу результата
    Для Каждого Стр ИЗ ТЗРез Цикл
        Если Стр.___ТЗНачКонтроль>1 ИЛИ Стр.___ТЗКонКонтроль>1 Тогда
            Возврат Новый Структура("КодОшибки","ДублированиеКлюча");
        ИначеЕсли Стр.___ТЗНачИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=+1; //Добавлена
            Для Каждого Эл ИЗ ЗнКол Цикл
                Зн=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        ИначеЕсли Стр.___ТЗКонИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=-1; //Удалена
            Для Каждого Эл ИЗ ЗнКол Цикл
                Зн=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        Иначе
            Р=Новый Структура();
            Для Каждого Эл ИЗ ЗнКол Цикл
                ЗнНач=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                ЗнКон=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Если ЗнНач<>ЗнКон Тогда
                    Р.Вставить(Эл, ЗнНач);
                КонецЕсли;
                Стр[Эл]=ЗнКон;
            КонецЦикла;
            Стр[НазваниеКолонкиРезультата]=Р; //Структура изменений
        КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТзРез Цикл
		
		//1. Были изменены поля.
		Если ТипЗнч(Стр[НазваниеКолонкиРезультата]) = Тип("Структура") Тогда
			
			ТекстЗапроса = СоставитьЗапросНаИзменение();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			ТекстSet = "";
			
			Для Каждого ЭлСтруктуры Из Стр[НазваниеКолонкиРезультата] Цикл
				
				ТекстSet = ТекстSet + "[" + ЭлСтруктуры.Ключ + "]" + " = " + ФорматПоля(Стр[ЭлСтруктуры.Ключ]) + ", "; 
				
			КОнецЦикла;
			
			ТекстSet = Лев(ТекстSet, СтрДлина(ТекстSet) - 2);
			
			Если ТекстSet = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейSET", ТекстSet);
			
			ТекстГде = "";
			
			НайдСтрПоИндексномуПолю = ТзНач.Найти(Стр.ИндексноеПоле, "ИндексноеПоле");
			
			Если НайдСтрПоИндексномуПолю = Неопределено Тогда
				Сообщить("ОШИБКА!!!!");
				Продолжить;
			КонецЕсли;			
			
			Для Каждого ЭлМассива Из МассивУсловийГде Цикл
				ТекстГде = ТекстГде + "[" + ЭлМассива + "] = " + ФорматПоля(НайдСтрПоИндексномуПолю[ЭлМассива]) + " AND ";
			КонецЦикла;
			
			ТекстГде = Лев(ТекстГде, СтрДлина(ТекстГде) - 5);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейWhere", ТекстГде); 	
				
		//2. Добавление
		ИначеЕсли Стр[НазваниеКолонкиРезультата] = 1 Тогда
			
			ТекстЗапроса = СоставитьЗапросНаДобавление();
			
			ТекстЗапроса = СтрЗаменить(текстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			Поля = "";
			Значения = "";
			
			Для Каждого Колонка Из ТЗКон.Колонки Цикл
								
				Если Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИндексноеПоле" ИЛИ Колонка.Имя = "ИсходныйНомерСтроки" 
					ИЛИ НеучитываемыеПоля.Найти(Колонка.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Поля = Поля + Колонка.Имя + ",";
				
				Если Колонка.Имя = "id_text_kkm_main" Тогда
					Значения = Значения + ФорматПоля(id_text_kkm_main) + ",";
				Иначе
					Значения = Значения + ФорматПоля(Стр[Колонка.Имя]) + ",";
				КонецЕсли;
				
			КонецЦикла;
			
			Поля = Лев(Поля, СтрДлина(Поля) - 1);
			Значения = Лев(Значения, СтрДлина(Значения) - 1);
			
			Если Поля = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Поля", Поля);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Значения", Значения);
			
		//3. Удаление	
		ИначеЕсли Стр[НазваниеКолонкиРезультата] = -1 Тогда
			
			ТекстЗапроса = СоставитьЗапросНаУдаление();
			
			ТекстЗапроса = СтрЗаменить(текстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			ТекстГде = "";
			
			НайдСтрПоИндексномуПолю = ТзНач.Найти(Стр.ИндексноеПоле, "ИндексноеПоле");
			
			Если НайдСтрПоИндексномуПолю = Неопределено Тогда
				Сообщить("ОШИБКА!!!!");
				Продолжить;
			КонецЕсли;			
			
			Для Каждого ЭлМассива Из МассивУсловийГде Цикл
				ТекстГде = ТекстГде + "[" + ЭлМассива + "] = " + ФорматПоля(НайдСтрПоИндексномуПолю[ЭлМассива]) + " AND ";
			КонецЦикла;
			
			ТекстГде = Лев(ТекстГде, СтрДлина(ТекстГде) - 5);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейWhere", ТекстГде); 			
			
		КонецЕсли;
		
		//Попытка
		Если Стр[НазваниеКолонкиРезультата] = 1 Тогда 
			
			Если ИмяТаблицы = "text_kkm_main" Тогда
			
			СкульТекст = "SET NOCOUNT ON" + Символы.ПС + "SET IDENTITY_INSERT [text_kkm_main] ON" + Символы.ПС 
			+ ТекстЗапроса + Символы.ПС
			+ "SET IDENTITY_INSERT [text_kkm_main] OFF" + Символы.ПС + "SET NOCOUNT OFF" + Символы.ПС;
			
			//!!!
			мСоединение.Execute(СкульТекст);
			//Сообщить(СкульТекст);		
			
			ИначеЕсли ИмяТаблицы = "text_kkm" Тогда
			
				 СкульТекст = "SET NOCOUNT ON" + Символы.ПС + "SET IDENTITY_INSERT [text_kkm] ON" + Символы.ПС 
				+ ТекстЗапроса + Символы.ПС
				+ "SET IDENTITY_INSERT [text_kkm] OFF" + Символы.ПС + "SET NOCOUNT OFF" + Символы.ПС;
			
				//!!!
				мСоединение.Execute(СкульТекст);
				//Сообщить(СкульТекст);
				
			КонецЕсли;
			
		Иначе	
			
			//!!!
			мСоединение.Execute("Begin Transaction" + Символы.ПС + текстЗапроса + Символы.ПС + "Commit");
			//Сообщить(текстЗапроса);
			
		КонецЕсли;
		
		//КонецЕсли;    
		
	КонецЦикла;	
	
	мСоединение.Close();
	
    Возврат ТЗРез;
	
КонецФункции

Функция ФорматПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + Поле + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

Функция СоставитьЗапросНаДобавление()
	
	Возврат "INSERT INTO [" + мБазаДанных + "].[dbo].[ИмяТаблицы]
		|	(Поля)
		|VALUES (Значения)";			
		
КонецФункции

Функция СоставитьЗапросНаУдаление()
	
	Возврат "DELETE FROM [" + мБазаДанных + "].[dbo].[ИмяТаблицы] WHERE СписокПолейWhere";
	
КонецФункции

Функция СоставитьЗапросНаИзменение()
	
	Возврат "UPDATE [" + мБазаДанных + "].[dbo].[ИмяТаблицы]
   				|SET СписокПолейSET
				|WHERE СписокПолейWhere";	
	
КонецФункции

Процедура УдалитьСтроку(ИДтекстККМ) Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат;
    КонецЕсли; 
	
	ТекстУдаления = "DELETE FROM [" + мБазаДанных + "].[dbo].[text_kkm_tt] WHERE id_text_kkm_main= '" + Формат(ИДтекстККМ, "ЧГ=0") + "'";
	
	мСоединение.Execute("Begin Transaction" + Символы.ПС + ТекстУдаления + Символы.ПС + "Commit");
	//Сообщить(ТекстУдаления);
	
	ТекстУдаления = "DELETE FROM [" + мБазаДанных + "].[dbo].[text_kkm] WHERE id_text_kkm_main= '" + Формат(ИДтекстККМ, "ЧГ=0") + "'";
	мСоединение.Execute("Begin Transaction" + Символы.ПС + ТекстУдаления + Символы.ПС + "Commit");
	//Сообщить(ТекстУдаления);
	
	ТекстУдаления = "DELETE FROM [" + мБазаДанных + "].[dbo].[text_kkm_main] WHERE id_text_kkm_main= '" + Формат(ИДтекстККМ, "ЧГ=0") + "'";
	мСоединение.Execute("Begin Transaction" + Символы.ПС + ТекстУдаления + Символы.ПС + "Commit");
    //Сообщить(ТекстУдаления);
	
	мСоединение.Close();	
	
КонецПроцедуры

мРекордсет = Неопределено;
мСоединение = Неопределено;
мБазаДанных = "SMS_IZBENKA";
