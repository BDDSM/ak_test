//+++АК KOPA +Модуль 2018.03.02 ИП-00018322
//Модуль предназначен для обработки отправленных объектов в телеграм тех бот
//Например Приказ на командировку

#Область ___Тесты

Функция ___Переходы()
	Массив = Новый Массив;
	Массив.Добавить(Справочники.ФизическиеЛица);
	Массив.Добавить(Документы.ПриказНаКомандировку);
	Массив.Добавить(Документы.НачислениеПремииОфиснымРаботникам);
	Массив.Добавить(РегистрыСведений.ТелеграмТехБотОбъектыКОтправке);

	Возврат Массив;
КонецФункции

Функция ___ДобавитьТестВТаблицу(Таблица, Ключ, Значение)
	Строка = Таблица.Добавить();
	Строка.Ключ = Ключ;
	Строка.Значение = ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ___ПолучитьТесты()
	Таблица = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	Таблица.Колонки.Добавить("Ключ", ТипСтрока);
	Таблица.Колонки.Добавить("Значение", ТипСтрока);
	
	___ПриказНаКомандировку000000342 = "" + Документы.ПриказНаКомандировку.НайтиПоНомеру("000000342", '20170101').УникальныйИдентификатор();
	___НачислениеПремииОфиснымРаботникам000000002 = "" + Документы.НачислениеПремииОфиснымРаботникам.НайтиПоНомеру("000000002", '20160101').УникальныйИдентификатор();
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ОбъектыДляОтправки");
	
	___ДобавитьТестВТаблицу(Таблица, "Список документов. Приказы на командировку и Начисления премий офисным сотрудникам", ТелоЗапроса);
//Пометить объект как отправленный
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ОбъектОтправлен");
	ТелоЗапроса.Вставить("Тип", "ПриказНаКомандировку");
	ТелоЗапроса.Вставить("УИД", ___ПриказНаКомандировку000000342);
	
	___ДобавитьТестВТаблицу(Таблица, "Пометить Приказ на командировку 000000342 как отправленный", ТелоЗапроса);
	
//Получить описание объекта
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ОписаниеОбъект");
	ТелоЗапроса.Вставить("Тип", "ПриказНаКомандировку");
	ТелоЗапроса.Вставить("УИД", ___ПриказНаКомандировку000000342);
	
	___ДобавитьТестВТаблицу(Таблица, "Получить описание объекта Приказ на командировку 000000342", ТелоЗапроса);

//Установить статус приказ на командировку
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "СтатусПриказНаКомандировку");
	ТелоЗапроса.Вставить("Статус", 1);
	ТелоЗапроса.Вставить("УИД", ___ПриказНаКомандировку000000342);

	___ДобавитьТестВТаблицу(Таблица, "Согласовать Приказ на командировку 000000342", ТелоЗапроса);
	
//Установить значение КомандировкаНаЛичномТранспорте
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "КомандировкаНаЛичномТранспорте");
	ТелоЗапроса.Вставить("Значение", истина);
	ТелоЗапроса.Вставить("УИД", ___ПриказНаКомандировку000000342);
	
	___ДобавитьТестВТаблицу(Таблица, "Установить значение КомандировкаНаЛичномТранспорте 000000342", ТелоЗапроса);

//Получить описание объекта Начисление премии офисным сотрудникам
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "ОписаниеОбъект");
	ТелоЗапроса.Вставить("Тип", "НачислениеПремииОфиснымРаботникам");
	ТелоЗапроса.Вставить("УИД", ___НачислениеПремииОфиснымРаботникам000000002);
	
	___ДобавитьТестВТаблицу(Таблица, "Получить описание объекта Начисление премии офисным сотрудникам 000000002", ТелоЗапроса);	
//Утвердить/Отклонить премию
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ИмяКоманды", "СтатусНачислениеПремииОфиснымРаботникам");
	ТелоЗапроса.Вставить("Статус", 1);
	ТелоЗапроса.Вставить("УИД", ___НачислениеПремииОфиснымРаботникам000000002);

	___ДобавитьТестВТаблицу(Таблица, "Утвердить/Отклонить премию 000000002", ТелоЗапроса);


	Возврат Таблица;
КонецФункции

Функция ___ПолучитьОписание() Экспорт 
	Структура = Новый Структура;
	Структура.Вставить("ИдЗадача", "ИП-00018322");
	Структура.Вставить("НаименованиеВнешнейОбработки", "___Тест");
	Структура.Вставить("Переходы", ___Переходы());
	Структура.Вставить("ТаблицаТесты", ___ПолучитьТесты());
	
	Возврат Структура;
КонецФункции

#КонецОбласти


Функция ВыполнитьДействие(Данные) Экспорт
	Если Данные.ИмяКоманды = "ОбъектыДляОтправки" Тогда
		Возврат ОбъектыДляОтправки(Данные);
	ИначеЕсли Данные.ИмяКоманды = "ОбъектОтправлен" Тогда 
		Возврат ОбъектОтправлен(Данные);	
	ИначеЕсли Данные.ИмяКоманды = "ОписаниеОбъект" Тогда 
		Возврат ОписаниеОбъект(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "СтатусПриказНаКомандировку" Тогда 
		Возврат СтатусПриказНаКомандировку(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "КомандировкаНаЛичномТранспорте" Тогда 
		Возврат КомандировкаНаЛичномТранспорте(Данные);		
	ИначеЕсли Данные.ИмяКоманды = "СтатусНачислениеПремииОфиснымРаботникам" Тогда 
		Возврат СтатусНачислениеПремииОфиснымРаботникам(Данные);		
	Иначе
		Возврат Новый Структура("Ошибка", "Не зашли");	
	КонецЕсли;	
КонецФункции

#Область ОбъектыДляОтправки

Функция ОбъектыДляОтправки(Данные) Экспорт 
	Результат = Новый Структура("ОК", Ложь);
	
	Попытка
		Результат.Вставить("ПриказыНаКомандировку", ПолучитьОбъектыДляОтправки_ПриказыНаКомандировку(Данные));
		Результат.Вставить("НачислениеПремииОфиснымРаботникам", ПолучитьОбъектыДляОтправки_НачислениеПремииОфиснымРаботникам(Данные));
		
	    Результат.ОК = Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

//ИП-00018322
Функция ПолучитьОбъектыДляОтправки_ПриказыНаКомандировку(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмТехБотОбъектыКОтправке.Объект КАК ПриказНаКомандировку,
		|	ВЫРАЗИТЬ(ТелеграмТехБотОбъектыКОтправке.Объект КАК Документ.ПриказНаКомандировку).ФизЛицо КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТелеграмТехБотОбъектыКОтправке.Объект КАК Документ.ПриказНаКомандировку).Номер КАК Номер
		|ПОМЕСТИТЬ втПриказНаКомандировку
		|ИЗ
		|	РегистрСведений.ТелеграмТехБотОбъектыКОтправке КАК ТелеграмТехБотОбъектыКОтправке
		|ГДЕ
		|	НЕ ТелеграмТехБотОбъектыКОтправке.Отправлен
		|	И ТелеграмТехБотОбъектыКОтправке.Объект ССЫЛКА Документ.ПриказНаКомандировку
		|	И ТелеграмТехБотОбъектыКОтправке.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПриказНаКомандировку.Сотрудник,
		|	втПриказНаКомандировку.ПриказНаКомандировку,
		|	Пользователи.Ссылка КАК Пользователь,
		|	втПриказНаКомандировку.Номер
		|ПОМЕСТИТЬ втПриказНаКоммандировкуФизЛица
		|ИЗ
		|	втПриказНаКомандировку КАК втПриказНаКомандировку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО втПриказНаКомандировку.Сотрудник = Пользователи.ФизЛицо
		|			И (НЕ Пользователи.ФизЛицо = &ПользователиПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПриказНаКоммандировкуФизЛица.Сотрудник,
		|	втПриказНаКоммандировкуФизЛица.ПриказНаКомандировку,
		|	втПриказНаКоммандировкуФизЛица.Пользователь,
		|	ПользователиПоЦФОСрезПоследних.ЦФО,
		|	втПриказНаКоммандировкуФизЛица.Номер
		|ПОМЕСТИТЬ втПриказНаКомандировкуПользовательЦФО
		|ИЗ
		|	втПриказНаКоммандировкуФизЛица КАК втПриказНаКоммандировкуФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиПоЦФО.СрезПоследних(
		|				&Период,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						втПриказНаКоммандировкуФизЛица.Пользователь
		|					ИЗ
		|						втПриказНаКоммандировкуФизЛица КАК втПриказНаКоммандировкуФизЛица)) КАК ПользователиПоЦФОСрезПоследних
		|		ПО втПриказНаКоммандировкуФизЛица.Пользователь = ПользователиПоЦФОСрезПоследних.Сотрудник
		|			И (НЕ ПользователиПоЦФОСрезПоследних.РуководительОтдела)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втПриказНаКомандировкуПользовательЦФО.Сотрудник КАК Сотрудник,
		|	втПриказНаКомандировкуПользовательЦФО.ПриказНаКомандировку КАК ПриказНаКомандировку,
		|	втПриказНаКомандировкуПользовательЦФО.ЦФО,
		|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо КАК РуководительЦФО,
		|	втПриказНаКомандировкуПользовательЦФО.Сотрудник.Наименование КАК ФизЛицоНаименование,
		|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо.Наименование КАК РуководительЦФОНаименование,
		|	втПриказНаКомандировкуПользовательЦФО.Номер КАК Номер
		|ИЗ
		|	втПриказНаКомандировкуПользовательЦФО КАК втПриказНаКомандировкуПользовательЦФО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиПоЦФО.СрезПоследних(
		|				&Период,
		|				ЦФО В
		|					(ВЫБРАТЬ
		|						втПриказНаКомандировкуПользовательЦФО.ЦФО
		|					ИЗ
		|						втПриказНаКомандировкуПользовательЦФО КАК втПриказНаКомандировкуПользовательЦФО)) КАК ПользователиПоЦФОСрезПоследних
		|		ПО втПриказНаКомандировкуПользовательЦФО.ЦФО = ПользователиПоЦФОСрезПоследних.ЦФО
		|			И (ПользователиПоЦФОСрезПоследних.РуководительОтдела)
		|ГДЕ
		|	втПриказНаКомандировкуПользовательЦФО.Сотрудник <> &ФизЛицоПустаяСсылка
		|	И ПользователиПоЦФОСрезПоследних.Сотрудник <> &ПользователиПустаяСсылка
		|ИТОГИ
		|	МАКСИМУМ(ФизЛицоНаименование),
		|	МАКСИМУМ(Номер)
		|ПО
		|	ПриказНаКомандировку";
	
	ПериодОтправки = ПолучитьПериодДатОтправки();
	Запрос.УстановитьПараметр("ДатаНач", ПериодОтправки.ДатаНач);	
	Запрос.УстановитьПараметр("ДатаКон", ПериодОтправки.ДатаКон);	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ПользователиПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ФизЛицоПустаяСсылка", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСотрудник = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаДЗ = Выборка.Выбрать();
		
		Приказ = Новый Структура;
		Приказ.Вставить("Тип", "ПриказНаКомандировку");
		Приказ.Вставить("УИД", "" + Выборка.ПриказНаКомандировку.УникальныйИдентификатор());
		Приказ.Вставить("Номер", Выборка.Номер);
		Приказ.Вставить("ФизЛицоНаименование", Выборка.ФизЛицоНаименование);
		
		Руководители = Новый Массив;
		
		Пока ВыборкаДЗ.Следующий() Цикл
			Руководитель = Новый Структура;
					
			Если ЗначениеЗаполнено(ВыборкаДЗ.РуководительЦФО) Тогда
				Руководитель.Вставить("РуководительНаименование", ВыборкаДЗ.РуководительЦФОНаименование);
				Руководитель.Вставить("Руководитель", "" + ВыборкаДЗ.РуководительЦФО.УникальныйИдентификатор());
			Иначе 
			    Руководитель.Вставить("РуководительНаименование", "");
				Руководитель.Вставить("Руководитель", "");
			КонецЕсли;
						
			Руководители.Добавить(Руководитель);
		КонецЦикла;
		
		Приказ.Вставить("Руководители", Руководители);
		Результат.Добавить(Приказ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//ИП-00018337
Функция ПолучитьОбъектыДляОтправки_НачислениеПремииОфиснымРаботникам(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмТехБотОбъектыКОтправке.Объект КАК НачислениеПремииОфиснымРаботникам,
		|	ВЫРАЗИТЬ(ТелеграмТехБотОбъектыКОтправке.Объект КАК Документ.НачислениеПремииОфиснымРаботникам).Утверждающий КАК Пользователь,
		|	ВЫРАЗИТЬ(ТелеграмТехБотОбъектыКОтправке.Объект КАК Документ.НачислениеПремииОфиснымРаботникам).Номер КАК Номер
		|ПОМЕСТИТЬ втНачислениеПремииОфиснымРаботникам
		|ИЗ
		|	РегистрСведений.ТелеграмТехБотОбъектыКОтправке КАК ТелеграмТехБотОбъектыКОтправке
		|ГДЕ
		|	НЕ ТелеграмТехБотОбъектыКОтправке.Отправлен
		|	И ТелеграмТехБотОбъектыКОтправке.Объект ССЫЛКА Документ.НачислениеПремииОфиснымРаботникам
		|	И НЕ ВЫРАЗИТЬ(ТелеграмТехБотОбъектыКОтправке.Объект КАК Документ.НачислениеПремииОфиснымРаботникам).Утверждающий = &ПользовательПустаяСсылка
		|	И ТелеграмТехБотОбъектыКОтправке.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.ФизЛицо,
		|	втНачислениеПремииОфиснымРаботникам.НачислениеПремииОфиснымРаботникам,
		|	втНачислениеПремииОфиснымРаботникам.Номер,
		|	ПРЕДСТАВЛЕНИЕ(Пользователи.ФизЛицо) КАК ФизЛицоНаименование
		|ИЗ
		|	втНачислениеПремииОфиснымРаботникам КАК втНачислениеПремииОфиснымРаботникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО втНачислениеПремииОфиснымРаботникам.Пользователь = Пользователи.Ссылка
		|			И (НЕ Пользователи.ФизЛицо = &ФизЛицоПустаяСсылка)";
	
	ПериодОтправки = ПолучитьПериодДатОтправки();
	Запрос.УстановитьПараметр("ДатаНач", ПериодОтправки.ДатаНач);	
	Запрос.УстановитьПараметр("ДатаКон", ПериодОтправки.ДатаКон);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ПользовательПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ФизЛицоПустаяСсылка", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл		
		Документ = Новый Структура;
		Документ.Вставить("Тип", "НачислениеПремииОфиснымРаботникам");
		Документ.Вставить("УИД", "" + Выборка.НачислениеПремииОфиснымРаботникам.УникальныйИдентификатор());
		Документ.Вставить("Номер", Выборка.Номер);
		Документ.Вставить("ФизЛицоНаименование", Выборка.ФизЛицоНаименование);
		Документ.Вставить("ФизЛицо", "" + Выборка.ФизЛицо.УникальныйИдентификатор());	
		
		Результат.Добавить(Документ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
#КонецОбласти

#Область ОбъектОтправлен

Функция ОбъектОтправлен(Данные)	
	Результат = Новый Структура("ОК", Ложь);
	
	Попытка
		ОтправленныйОбъект = ПолучитьОбъектПоТипу(Данные.Тип, Данные.УИД);
		
		НазначитьОбъектОтправлен(ОтправленныйОбъект);
		
		Результат.ОК = Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

Процедура НазначитьОбъектОтправлен(ОтправленныйОбъект)
	запись = РегистрыСведений.ТелеграмТехБотОбъектыКОтправке.СоздатьМенеджерЗаписи();
	запись.Объект = ОтправленныйОбъект;
	запись.Прочитать();
	
	Если Не запись.Выбран() Тогда
		Ошибка = "Объект отсутствует в регистре ТелеграмТехБотОбъектыКОтправке: " + ОтправленныйОбъект;
		
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
	запись.Отправлен = Истина;
	запись.Записать();
КонецПроцедуры

#КонецОбласти

#Область ОписаниеОбъект

Функция ОписаниеОбъект(Данные);
	Результат = Новый Структура("ОК", Ложь);
		
	Попытка
		ТипОбъекта = Данные.Тип;
		
		ОтправленныйОбъект = ПолучитьОбъектПоТипу(ТипОбъекта, Данные.УИД);
		
		Если ТипОбъекта = "ПриказНаКомандировку" Тогда
			Ответ = ПолучитьОписаниеОбъекта_ПриказНаКомандировку(ОтправленныйОбъект);		
		ИначеЕсли ТипОбъекта = "НачислениеПремииОфиснымРаботникам" Тогда
			Ответ = ПолучитьОписаниеОбъекта_НачислениеПремииОфиснымРаботникам(ОтправленныйОбъект);
		Иначе
			Ошибка = "Неизвестный тип объекта:" + ТипОбъекта;
			
			ВызватьИсключение Ошибка;		
		КонецЕсли;	
		
		Результат.Вставить("Описание", Ответ.Описание);
		Результат.Вставить("Статус", Ответ.Статус);
		Результат.Вставить("Проведен", Ответ.Проведен);
		
		Результат.ОК = Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеОбъекта_ПриказНаКомандировку(ОбъектБазы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриказНаКомандировку.Номер,
		|	ПриказНаКомандировку.Дата,
		|	ПРЕДСТАВЛЕНИЕ(ПриказНаКомандировку.Организация),
		|	ПРЕДСТАВЛЕНИЕ(ПриказНаКомандировку.ФизЛицо),
		|	ПРЕДСТАВЛЕНИЕ(ПриказНаКомандировку.ПодразделениеОрганизации),
		|	ПриказНаКомандировку.Должность,
		|	ПриказНаКомандировку.НачалоКомандировки,
		|	ПриказНаКомандировку.КонецКомандировки,
		|	ПриказНаКомандировку.МестоНазначения,
		|	ПриказНаКомандировку.ЦельКомандировки,
		|	ПриказНаКомандировку.ВидТранспорта,
		|	ПриказНаКомандировку.МодельМарка,
		|	ПриказНаКомандировку.НомернойЗнак,
		|	ПриказНаКомандировку.ФизЛицо,
		|	ПриказНаКомандировку.КомандировкаНаЛичномТранспорте,
		|	ПриказНаКомандировку.АК_Статус,
		|	ПриказНаКомандировку.Проведен
		|ПОМЕСТИТЬ втПриказНаКомандировку
		|ИЗ
		|	Документ.ПриказНаКомандировку КАК ПриказНаКомандировку
		|ГДЕ
		|	ПриказНаКомандировку.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(НачальникОтдела.Сотрудник.ФизЛицо) КАК НачПодр,
		|	СтруктурнаеЕдиницаСотрудника.ФизЛицо
		|ПОМЕСТИТЬ втНачПодр
		|ИЗ
		|	РегистрСведений.СтруктурныеЕдиницыФизлиц.СрезПоследних КАК СтруктурнаеЕдиницаСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиПоЦФО.СрезПоследних КАК НачальникОтдела
		|		ПО СтруктурнаеЕдиницаСотрудника.Подразделение = НачальникОтдела.ЦФО
		|			И (НачальникОтдела.РуководительОтдела)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втПриказНаКомандировку.Номер,
		|	втПриказНаКомандировку.Дата,
		|	втПриказНаКомандировку.ОрганизацияПредставление,
		|	втПриказНаКомандировку.ФизЛицоПредставление,
		|	втПриказНаКомандировку.ПодразделениеОрганизацииПредставление,
		|	втПриказНаКомандировку.Должность,
		|	втПриказНаКомандировку.НачалоКомандировки,
		|	втПриказНаКомандировку.КонецКомандировки КАК КонецКомандировки,
		|	втПриказНаКомандировку.МестоНазначения,
		|	втПриказНаКомандировку.ЦельКомандировки,
		|	втПриказНаКомандировку.ВидТранспорта,
		|	втПриказНаКомандировку.МодельМарка,
		|	втПриказНаКомандировку.НомернойЗнак,
		|	втНачПодр.НачПодр,
		|	втПриказНаКомандировку.КомандировкаНаЛичномТранспорте,
		|	втПриказНаКомандировку.АК_Статус,
		|	втПриказНаКомандировку.Проведен
		|ИЗ
		|	втПриказНаКомандировку КАК втПриказНаКомандировку
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачПодр КАК втНачПодр
		|		ПО втПриказНаКомандировку.ФизЛицо = втНачПодр.ФизЛицо";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектБазы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Массив = Новый Массив;
	Массив.Добавить("Номер: " + Выборка.Номер + " Дата: " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
	Массив.Добавить("Организация: " + Выборка.ОрганизацияПредставление);
	Массив.Добавить("Сотрудник: " + Выборка.ФизЛицоПредставление);
	Массив.Добавить("Подразделение: " + Выборка.ПодразделениеОрганизацииПредставление);
	Массив.Добавить("Должность: " + Выборка.Должность);
	Массив.Добавить("Период: " + Формат(Выборка.НачалоКомандировки, "ДФ=dd.MM.yyyy") + " - " + Формат(Выборка.КонецКомандировки, "ДФ=dd.MM.yyyy"));
	Массив.Добавить("Место назначения: " + Выборка.МестоНазначения);
	Массив.Добавить("Цель командировки: " + Выборка.ЦельКомандировки);
		
	Если Выборка.КомандировкаНаЛичномТранспорте Тогда	
		Массив.Добавить("Вид транспорта: " + Выборка.ВидТранспорта);
		Массив.Добавить("Модель марка: " + Выборка.МодельМарка);
		Массив.Добавить("Номерной знак: " + Выборка.НомернойЗнак);
		Массив.Добавить("Нач. подр.: " + Выборка.НачПодр);			
	КонецЕсли;
	
	
	Результат = Новый Структура;
	Результат.Вставить("Описание", ТелеграмТехБот.МассивВСтроку(Массив, Символы.ПС));
	Результат.Вставить("Статус", ПолучитьИндексАК_Статус(Выборка.АК_Статус));
	Результат.Вставить("Проведен", Выборка.Проведен);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеОбъекта_НачислениеПремииОфиснымРаботникам(ОбъектБазы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПремииОфиснымРаботникам.Номер,
		|	НачислениеПремииОфиснымРаботникам.Дата,
		|	НачислениеПремииОфиснымРаботникам.СуммаДокумента,
		|	НачислениеПремииОфиснымРаботникам.Ссылка,
		|	НачислениеПремииОфиснымРаботникам.Проведен,
		|	НачислениеПремииОфиснымРаботникам.Утверждено,
		|	НачислениеПремииОфиснымРаботникам.АК_ВыгруженоВЗУП
		|ПОМЕСТИТЬ втШапка
		|ИЗ
		|	Документ.НачислениеПремииОфиснымРаботникам КАК НачислениеПремииОфиснымРаботникам
		|ГДЕ
		|	НачислениеПремииОфиснымРаботникам.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШапка.Номер КАК Номер,
		|	втШапка.Дата КАК Дата,
		|	втШапка.СуммаДокумента КАК СуммаДокумента,
		|	втШапка.Ссылка КАК Ссылка,
		|	НачислениеПремииОфиснымРаботникамСостав.ФизЛицо.Наименование,
		|	НачислениеПремииОфиснымРаботникамСостав.Сумма,
		|	НачислениеПремииОфиснымРаботникамСостав.Комментарий,
		|	втШапка.Проведен КАК Проведен,
		|	втШапка.Утверждено КАК Утверждено,
		|	втШапка.АК_ВыгруженоВЗУП КАК АК_ВыгруженоВЗУП
		|ИЗ
		|	Документ.НачислениеПремииОфиснымРаботникам.Состав КАК НачислениеПремииОфиснымРаботникамСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втШапка КАК втШапка
		|		ПО НачислениеПремииОфиснымРаботникамСостав.Ссылка = втШапка.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(СуммаДокумента),
		|	МАКСИМУМ(Проведен),
		|	МАКСИМУМ(Утверждено),
		|	МАКСИМУМ(АК_ВыгруженоВЗУП)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектБазы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Массив = Новый Массив;
	
	ВыборкаСсылка.Следующий();
	
	Массив.Добавить("Номер: " + ВыборкаСсылка.Номер + " Дата: " + Формат(ВыборкаСсылка.Дата, "ДФ=dd.MM.yyyy"));
	Массив.Добавить("Сумма документа: " + ВыборкаСсылка.СуммаДокумента);
	
	ВыборкаДЗ = ВыборкаСсылка.Выбрать();
	
	Пока ВыборкаДЗ.Следующий() Цикл
		Массив.Добавить(Символ(10004) + "<b>ФизЛицо: " + ВыборкаДЗ.ФизЛицоНаименование + "</b>");
		Массив.Добавить("   Сумма: " + ВыборкаДЗ.Сумма);
		Массив.Добавить("   Комментарий: " + ВыборкаДЗ.Комментарий);
	КонецЦикла;
	
	Результат = Новый Структура;
//Оставим как массив, и будем строки делать на стороне тех бота, тк целое сообщение может не влезть.
	Результат.Вставить("Описание", Массив);
	Результат.Вставить("Статус", ?(ВыборкаСсылка.Утверждено Или ВыборкаСсылка.АК_ВыгруженоВЗУП, 1, 0));
	Результат.Вставить("Проведен", ВыборкаСсылка.Проведен);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область УстановитьСтатусПриказНаКомандировку

Функция СтатусПриказНаКомандировку(Данные)
	Результат = Новый Структура("ОК", Ложь);
		
	Попытка
		Результат.ОК = УстановитьСтатусПриказНаКомандировку(Данные);
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция УстановитьСтатусПриказНаКомандировку(Данные)
	ПриказНаКомандировку = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИД, Документы.ПриказНаКомандировку);
	АК_Статус = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПриказНаКомандировку, "АК_Статус");
	
//Статус = -1 для изменения АК_Статус из тест обработки
	Если Не АК_Статус = Перечисления.АК_СтаусыПриказаНаКомандировку.Создан И Не Данные.Статус = -1 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	обк = ПриказНаКомандировку.ПолучитьОбъект();
	обк.АК_Статус = ПолучитьСтатусПриказаНаКомандировку(Данные.Статус);
	обк.Записать(РежимЗаписиДокумента.Проведение);
		
	Возврат Истина;
КонецФункции

Функция ПолучитьСтатусПриказаНаКомандировку(Статус)
	Если Статус = 1 Тогда
		Возврат Перечисления.АК_СтаусыПриказаНаКомандировку.Согласован;
	ИначеЕсли Статус = 0 Тогда 
		Возврат Перечисления.АК_СтаусыПриказаНаКомандировку.НаСогласовании;
	ИначеЕсли Статус = -1 Тогда 
		Возврат Перечисления.АК_СтаусыПриказаНаКомандировку.Создан;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 

#КонецОбласти

#Область НачислениеПремииОфиснымРаботникам

Функция СтатусНачислениеПремииОфиснымРаботникам(Данные)
	Результат = Новый Структура("ОК", Ложь);
		
	Попытка
		Результат.ОК = УстановитьНачислениеПремииОфиснымРаботникам(Данные);
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция УстановитьНачислениеПремииОфиснымРаботникам(Данные)
	Документ = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИД, Документы.НачислениеПремииОфиснымРаботникам);
	Утверждено = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ, "Утверждено");
	
	Если Утверждено И Не Данные.Статус = -1 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	обк = Документ.ПолучитьОбъект();
	обк.Утверждено = Данные.Статус = 1;
//+ Отладка	
	Если Данные.Статус -1 Тогда
		обк.Утверждено = Ложь;	
	КонецЕсли;
//- Отладка

	обк.Записать(РежимЗаписиДокумента.Проведение);
		
	Возврат Истина;
КонецФункции

#КонецОбласти

//Для отладки
#Область КомандировкаНаЛичномТранспорте

Функция КомандировкаНаЛичномТранспорте(Данные)
	Результат = Новый Структура("ОК", Ложь);
		
	Попытка
		Результат.ОК = УстановитьКомандировкаНаЛичномТранспорте(Данные);
	Исключение
		Ошибка = ОписаниеОшибки();
		Результат.Вставить("Ошибка", Ошибка);
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

Функция УстановитьКомандировкаНаЛичномТранспорте(Данные)
	ПриказНаКомандировку = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(Данные.УИД, Документы.ПриказНаКомандировку);
	
	обк = ПриказНаКомандировку.ПолучитьОбъект();
	обк.КомандировкаНаЛичномТранспорте = Данные.Значение;
	обк.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Истина;
КонецФункции

#КонецОбласти









Функция ПолучитьПериодДатОтправки()
	ДатаКон = ТекущаяДата() - 5*60;//Дадим 5 минут на исправление документа, потом можем отправлять
	ДатаНач = ДатаКон - 24*3600;
	
	Возврат Новый Структура("ДатаНач,ДатаКон", ДатаНач, ДатаКон);
КонецФункции

Функция ПолучитьОбъектПоТипу(ТипОбъекта, УИД) Экспорт 
	ОтправленныйОбъект = Неопределено;
	
	Если ТипОбъекта = "ПриказНаКомандировку" Тогда
		ОтправленныйОбъект = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(УИД, Документы.ПриказНаКомандировку);		
	ИначеЕсли ТипОбъекта = "НачислениеПремииОфиснымРаботникам" Тогда
		ОтправленныйОбъект = ТелеграмТехБот.ПолучитьСсылкуПоГУИД_Строка(УИД, Документы.НачислениеПремииОфиснымРаботникам);
	Иначе
		Ошибка = "Неизвестный тип объекта:" + ТипОбъекта;
		
		ВызватьИсключение Ошибка;		
	КонецЕсли;	

	Возврат ОтправленныйОбъект;
КонецФункции

Функция ПолучитьИндексАК_Статус(АК_Статус)
	Если АК_Статус = Перечисления.АК_СтаусыПриказаНаКомандировку.Согласован Тогда
		Возврат 1;
	ИначеЕсли АК_Статус =Перечисления.АК_СтаусыПриказаНаКомандировку.НаСогласовании Тогда 
		Возврат 0;
	ИначеЕсли АК_Статус = Перечисления.АК_СтаусыПриказаНаКомандировку.Создан Тогда 
		Возврат -1;
	КонецЕсли;
	
	Возврат -10;
КонецФункции 