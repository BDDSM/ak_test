
Функция СоздатьИзменитьГруппуТорговойТочки(id_TT, Выборка  = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(id_TT) Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("id_group", id_TT);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Groups.id_group,
		               |	Groups.name_groupe,
		               |	Groups.id_manager,
		               |	Groups.active_gr
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Groups КАК Groups
		               |ГДЕ
		               |	Groups.id_group = &id_group";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("id_ЦФО", id_TT);
	СтруктураРеквизитов.Вставить("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	СтруктураРеквизитов.Вставить("Наименование", СокрЛП(Выборка.name_groupe));
	
	СпрСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", id_TT);
	Если СпрСсылка.Пустая() Тогда
		СпрОбъект = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
	Иначе
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
	КонецЕсли;	
	
	НужнаЗапись = Ложь;
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Реквизит.Значение = NULL
			И Не ЗначениеЗаполнено(СпрОбъект[Реквизит.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		Если СпрОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
			НужнаЗапись = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Попытка
			Для Каждого Реквизит Из СтруктураРеквизитов Цикл
				СпрОбъект[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла;
			СпрОбъект.Записать();
		Исключение
			СпрОбъект.УстановитьНовыйКод("0");
			СпрОбъект.Записать();
		КонецПопытки;
	КонецЕсли;
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Процедура СоздатьСкладПодчиненный(СЕ, ИмяРеквизита,Наименование,ВидСклада,НадоПисать)
	Если СЕ[ИмяРеквизита].Пустая() Тогда
		Склад = Справочники.Склады.НайтиПоНаименованию(Наименование, Истина, , СЕ.Ссылка);
		Если Склад.Пустая() Тогда
			НовыйСклад 				= Справочники.Склады.СоздатьЭлемент();
			НовыйСклад.ВидСклада 	= ВидСклада;
			НовыйСклад.Наименование = Наименование;
			НовыйСклад.Владелец		= СЕ.Ссылка;
			НовыйСклад.Записать();
			Склад = НовыйСклад.Ссылка;
		КонецЕсли;	
		СЕ[ИмяРеквизита]		= Склад;
		НадоПисать = Истина;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьИзменитьТорговуюТочку(id_TT, Выборка  = Неопределено, ГруппаТорговойТочкиПоРегистру = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(id_TT) Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;	
	
	Если Выборка = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("id_TT", id_TT);
		Запрос.УстановитьПараметр("type_tt", "торговая");
		Запрос.Текст = "ВЫБРАТЬ
		               |	TT.id_TT КАК ИД_ТТ,
		               |	TT.name_TT КАК НаименованиеТТ,
		               |	TT.adress,
		               |	TT.nomer_tel,
		               |	TT.start_date,
		               |	TT.close_date,
		               |	TT.N,
		               |	TT.is_active,
		               |	TT.koef_zapasa,
		               |	TT.TT_sms,
		               |	TT.N_tt_sms,
		               |	TT.id_UL,
		               |	TT.nomer_tel2,
		               |	TT.id_group,
		               |	TT.City,
		               |	TT.Street,
		               |	TT.House,
		               |	TT.Name_build,
		               |	TT.Scheme,
		               |	TT.OpeningHours,
		               |	TT.Metro,
		               |	TT.Shirota,
		               |	TT.Dolgota,
		               |	TT.Komment_tt,
		               |	TT.tt_format,
		               |	TT.Регион,
		               |	TT._d КАК id_raskr
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
		               |ГДЕ
		               |	TT.id_TT = &id_TT
		               |	И TT.type_tt = &type_tt
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
		               |ИЗ
		               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних
		               |ГДЕ
		               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.id_TT = &id_TT";
					   
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[0].Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаГрупп = Результаты[1].Выбрать();
		Если НЕ ВыборкаГрупп.Следующий() Тогда
			ГруппаТорговойТочкиПоРегистру = ВыборкаГрупп.ЦФО;
		КонецЕсли;
	КонецЕсли;				   
	
	СтруктураРеквизитов = Новый Структура();
	//СтруктураРеквизитов.Вставить("Код", СокрЛП(Выборка.N));
	СтруктураРеквизитов.Вставить("НомерТочки", Выборка.N);
	СтруктураРеквизитов.Вставить("id_TT", id_TT);
	СтруктураРеквизитов.Вставить("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	СтруктураРеквизитов.Вставить("Наименование", СокрЛП(Выборка.НаименованиеТТ));
	СтруктураРеквизитов.Вставить("ДатаОткрытия", Выборка.start_date);
	//СтруктураРеквизитов.Вставить("ДатаЗакрытия", Выборка.close_date);
	СтруктураРеквизитов.Вставить("Активное", Выборка.is_active);
	СтруктураРеквизитов.Вставить("КоэффициентЗапаса", Окр(Выборка.koef_zapasa, 2));
	СтруктураРеквизитов.Вставить("НазваниеВСМС", Выборка.TT_sms);
	СтруктураРеквизитов.Вставить("НомерВСМС", Выборка.N_tt_sms);
	Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", Выборка.id_UL);
	//Если НЕ ЗначениеЗаполнено(Организация) Тогда
	//	Организация = СоздатьОрганизацию(Выборка.id_UL);
	//КонецЕсли;
	//СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("ТелефонныйНомер1", Выборка.nomer_tel);
	СтруктураРеквизитов.Вставить("ТелефонныйНомер2", Выборка.nomer_tel2);
	СтруктураРеквизитов.Вставить("Город", Выборка.City);
	СтруктураРеквизитов.Вставить("Улица", Выборка.Street);
	СтруктураРеквизитов.Вставить("Дом", Выборка.House);
	СтруктураРеквизитов.Вставить("Адрес", Выборка.adress);
	СтруктураРеквизитов.Вставить("НазваниеЗдания", Выборка.Name_build);
	СтруктураРеквизитов.Вставить("Схема", Выборка.Scheme);
	СтруктураРеквизитов.Вставить("ВремяРаботы", Выборка.OpeningHours);
	СтруктураРеквизитов.Вставить("Метро", Выборка.Metro);
	//Попытка
	//	СтруктураРеквизитов.Вставить("КоординатыШирота", ?(Выборка.Shirota = Null ИЛИ ПустаяСтрока(Выборка.Shirota), 0, Число(Выборка.Shirota)));
	//Исключение
	//КонецПопытки;	
	//Попытка
	//	СтруктураРеквизитов.Вставить("КоординатыДолгота", ?(Выборка.Dolgota = Null ИЛИ ПустаяСтрока(Выборка.Dolgota), 0, Число(Выборка.Dolgota)));
	//Исключение
	//КонецПопытки;	
	СтруктураРеквизитов.Вставить("Комментарий", СокрЛП(Выборка.Komment_tt));
	СтруктураРеквизитов.Вставить("Регион", НайтиСоздатьРегион(Выборка.Регион));//Справочники.Регионы.НайтиПоКоду(Выборка.Регион));
	СтруктураРеквизитов.Вставить("СрокПередачи", Справочники.БонусыПоРаскруткеТТ.НайтиПоРеквизиту("id_raskr", Выборка.id_raskr));
	Формат = Выборка.tt_format;
	Если Формат = 1 ИЛИ Формат = 3 ИЛИ Формат = 4 Тогда
		СтруктураРеквизитов.Вставить("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Избенка);
	ИначеЕсли Формат = 2 Тогда
		СтруктураРеквизитов.Вставить("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин);
	КонецЕсли;
	
	СпрСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.ИД_ТТ);
	Если СпрСсылка.Пустая() Тогда
		СпрОбъект = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
		СтруктураРеквизитов.Вставить("Организация", Организация);
	Иначе
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
	КонецЕсли;	
	
	НужнаЗапись = Ложь;
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Реквизит.Значение = NULL
			И Не ЗначениеЗаполнено(СпрОбъект[Реквизит.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		Если СпрОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
			НужнаЗапись = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Попытка
			Для Каждого Реквизит Из СтруктураРеквизитов Цикл
				СпрОбъект[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла;
			СпрОбъект.Записать();
		Исключение
			СпрОбъект.УстановитьНовыйКод("0");
			СпрОбъект.Записать();
		КонецПопытки;
	КонецЕсли;	
	
	НадоПисать = Ложь;
	
	Если СпрОбъект.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		СоздатьСкладПодчиненный(СпрОбъект,"СкладПодсобногоПомещения"	,"Подсобка",			Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладТорговогоЗала"		,"Торговый зал",		Перечисления.ВидыСкладов.Розничный,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладВозвратПокупателя"	,"Возврат покупателя",	Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладСписаниеПоКачеству"	,"Списание по качеству",Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладДегустация"			,"Дегустация",			Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладСписаниеПоСроку"		,"Списание по сроку",	Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
		СоздатьСкладПодчиненный(СпрОбъект,"СкладБойПриПоставке"		,"Бой при поставке",	Перечисления.ВидыСкладов.Подсобка,	НадоПисать);
	Иначе
		СоздатьСкладПодчиненный(СпрОбъект,"СкладТорговогоЗала"			,"Торговый зал",	Перечисления.ВидыСкладов.Розничный,	НадоПисать);
	КонецЕсли;
	
	Если НадоПисать Тогда
		СпрОбъект.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.id_group) Тогда
		ГоловноеПодразделение = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", Выборка.id_group);
		Если НЕ ЗначениеЗаполнено(ГоловноеПодразделение) И ЗначениеЗаполнено(Выборка.id_group) Тогда
			ГоловноеПодразделение = СоздатьИзменитьГруппуТорговойТочки(Выборка.id_group);
		КонецЕсли;
		//закомментил по просьбе Туманова
		//Если ГоловноеПодразделение <> ГруппаТорговойТочкиПоРегистру
		//	И (ЗначениеЗаполнено(ГоловноеПодразделение) ИЛИ ЗначениеЗаполнено(ГруппаТорговойТочкиПоРегистру)) Тогда
		//	Запись = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		//	Запись.Период = ТекущаяДата();
		//	Запись.СтруктурнаяЕдиница = СпрОбъект.Ссылка;
		//	Запись.ЦФО = ГоловноеПодразделение;
		//	Запись.Записать();
		//КонецЕсли;	
	КонецЕсли;
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьРегион(КодРегиона)
	
	Регион = Справочники.Регионы.НайтиПоКоду(КодРегиона);	
	
	Если ТипЗнч(Регион) = Тип("СправочникСсылка.Регионы") И ЗначениеЗаполнено(Регион)Тогда
		Возврат Регион;
	КонецЕсли;
	
	Если КодРегиона <> 0 Тогда
		
		РегионОбъект = Справочники.Регионы.СоздатьЭлемент();
		РегионОбъект.Код = КодРегиона;
		РегионОбъект.Наименование = КодРегиона;
		
		Попытка
			РегионОбъект.Записать();
			Возврат РегионОбъект.Ссылка;
		Исключение
			Возврат Справочники.Регионы.ПустаяСсылка();
		КонецПопытки;
		
	Иначе
		Возврат Справочники.Регионы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СоздатьИзменитьСклад(id_TT, Выборка  = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(id_TT) Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("id_TT", id_TT);
		Запрос.УстановитьПараметр("type_tt", "склад");
		Запрос.Текст = "ВЫБРАТЬ
		               |	TT.id_TT КАК ИД_ТТ,
		               |	TT.name_TT КАК НаименованиеТТ,
		               |	TT.adress,
		               |	TT.nomer_tel,
		               |	TT.start_date,
		               |	TT.close_date,
		               |	TT.N
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
		               |ГДЕ
		               |	TT.id_TT = &id_TT
		               |	И TT.type_tt = &type_tt";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СпрСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.ИД_ТТ);
	Если СпрСсылка.Пустая() Тогда
		СпрОбъект = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
	Иначе
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
	КонецЕсли;
	СпрОбъект.Код = Выборка.N;
	СпрОбъект.id_TT = id_TT;
	СпрОбъект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	СпрОбъект.Наименование 		= СокрЛП(Выборка.НаименованиеТТ);
	//СпрОбъект.Адрес	= СокрЛП(Выборка.adress);
	СпрОбъект.ДатаОткрытия	= Выборка.start_date;
	СпрОбъект.ДатаЗакрытия	= Выборка.close_date;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьОрганизацию(id_UL)
	
	Если НЕ ЗначениеЗаполнено(id_UL) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("id_UL", id_UL);
	Запрос.Текст = "ВЫБРАТЬ
	               |	UL.id_UL,
	               |	UL.name_UL,
	               |	UL.descr,
	               |	UL.ОКПО,
	               |	UL.name_kr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.UL КАК UL
	               |ГДЕ
	               |	UL.id_UL = &id_UL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпрОбъект = Справочники.Организации.СоздатьЭлемент();
		СпрОбъект.УстановитьНовыйКод();
		СпрОбъект.ИД = id_UL;
		СпрОбъект.Наименование 		= СокрЛП(Выборка.name_UL);
		СпрОбъект.НаименованиеПолное= СокрЛП(Выборка.descr);
		СпрОбъект.КодПоОКПО = Выборка.ОКПО;
		Попытка
			СпрОбъект.Записать();
		Исключение
			СпрОбъект.УстановитьНовыйКод("0");
			СпрОбъект.Записать();
		КонецПопытки;
		Возврат СпрОбъект.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция СоздатьИзменитьНоменклатуру(id_Tov, Выборка  = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(id_Tov) Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка  = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("id_Tov", id_Tov);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Tovari.id_tov,
		               |	Tovari.name_tov,
		               |	Tovari.N_tov,
		               |	Tovari.Ed_izm,
		               |	Tovari.type_tov,
		               |	Tovari.id_group,
		               |	Tovari.N_t_sms,
		               |	Tovari.NDS,
		               |	Tovari.Min_ostatok,
		               |	Tovari.id_type_ass,
		               |	type_ass.name_type_ass,
		               |	Tovari.Ves,
		               |	Tovari.Tovar_sms,
		               |	Tovari.Korotk_srok,
		               |	Tovari.bez_ostatkov,
					   |	Tovari.hoz_tovar
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tovari КАК Tovari
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.type_ass КАК type_ass
		               |		ПО Tovari.id_type_ass = type_ass.id_type_ass
		               |ГДЕ
		               |	Tovari.id_tov = &id_tov";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	СпрСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_tov);
	Если СпрСсылка.Пустая() Тогда
		СпрОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		СпрСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор);
		СпрОбъект.УстановитьСсылкуНового(СпрСсылка);
	Иначе
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Наименование", Выборка.name_tov);
	СтруктураРеквизитов.Вставить("Порядок", Окр(Выборка.N_tov, 3));
	СтруктураРеквизитов.Вставить("id_tov", Выборка.id_tov);
	Если НРег(СокрЛП(Выборка.type_tov)) = "закупка" Тогда
		СтруктураРеквизитов.Вставить("СпособПополнения", Перечисления.СпособыПополнения.Закупка);
		Если СпрОбъект.ТипТовара <> Перечисления.ТипыТоваров.Упаковка Тогда
			СтруктураРеквизитов.Вставить("ТипТовара", Перечисления.ТипыТоваров.ПокупнойТовар);
		КонецЕсли;	
	ИначеЕсли НРег(СокрЛП(Выборка.type_tov)) = "производство" Тогда	
		СтруктураРеквизитов.Вставить("СпособПополнения", Перечисления.СпособыПополнения.Производство);
		Если СпрОбъект.ТипТовара <> Перечисления.ТипыТоваров.Упаковка Тогда
			СтруктураРеквизитов.Вставить("ТипТовара", Перечисления.ТипыТоваров.Продукция);
		КонецЕсли;
	КонецЕсли;
	Родитель			= Справочники.Номенклатура.НайтиПоРеквизиту("id_group",Выборка.id_group);
	Если Родитель.ЭтоГруппа Тогда
		СтруктураРеквизитов.Вставить("Родитель", Родитель);
	КонецЕсли;
	СтруктураРеквизитов.Вставить("НаименованиеДляСМС", Выборка.Tovar_sms);
	СтруктураРеквизитов.Вставить("НомерДляСМС", Выборка.N_t_sms);
	СтруктураРеквизитов.Вставить("МинимальныйОстаток", Выборка.Min_ostatok);
	СтруктураРеквизитов.Вставить("КороткийСрокГодности", Выборка.Korotk_srok);
	Если ЦЕЛ(Выборка.N_tov) <> Выборка.N_tov Тогда
		СтруктураРеквизитов.Вставить("ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Материал);
	Иначе
		СтруктураРеквизитов.Вставить("ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Товар);
	КонецЕсли;
	НДС = Выборка.NDS;
	Если НДС = 0.1 Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10);
	ИначеЕсли НДС = 0 Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	Иначе
		СтруктураРеквизитов.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("БезОстатков", Выборка.bez_ostatkov = 1);
	СтруктураРеквизитов.Вставить("ПодЗаказ", Выборка.hoz_tovar = 1);
	
	Если Выборка.id_group <> 18 И Выборка.id_group <> 19 Тогда
		СтруктураРеквизитов.Вставить("Выведена", Выборка.N_tov = 0);
	КонецЕсли;	
	
	Если Выборка.id_group = 18 ИЛИ Выборка.id_group = 19 Тогда
		СтруктураРеквизитов.Вставить("НеВедетсяУчетПоХарактеристикам", Истина);
		СтруктураРеквизитов.Вставить("ТипТовара", Перечисления.ТипыТоваров.Упаковка);
	КонецЕсли;	
	
	БазоваяЕдиницаИзмерения	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Выборка.Ed_izm);
	
	Если БазоваяЕдиницаИзмерения.Пустая() Тогда
		БазоваяОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		БазоваяОбъект.Наименование = Выборка.Ed_izm;
		БазоваяОбъект.Записать();
		БазоваяЕдиницаИзмерения = БазоваяОбъект.Ссылка;
	КонецЕсли;	
	
	СтруктураРеквизитов.Вставить("БазоваяЕдиницаИзмерения", БазоваяЕдиницаИзмерения);
	
	СпрОбъект.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
	ЕдИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Выборка.Ed_izm, ,, СпрСсылка);
	Если ЕдИзмерения.Пустая() Тогда
		ЕдИзмОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдИзмОбъект.ОбменДанными.Загрузка = Истина;
		ЕдИзмОбъект.Владелец = СпрСсылка;
		ЕдИзмОбъект.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		ЕдИзмОбъект.Наименование = Выборка.Ed_izm;
		ЕдИзмОбъект.Коэффициент = 1;
		ЕдИзмОбъект.Вес = Выборка.Ves;
		ЕдИзмОбъект.Записать();
		ЕдИзмерения = ЕдИзмОбъект.Ссылка;
	Иначе	
		ЕдИзмОбъект = ЕдИзмерения.ПолучитьОбъект();
		Если ЕдИзмОбъект.Вес <> Окр(Выборка.Ves, 3) Тогда
			ЕдИзмОбъект.Вес = Окр(Выборка.Ves, 3);
			ЕдИзмОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;	
	СтруктураРеквизитов.Вставить("ЕдиницаХраненияОстатков", ЕдИзмерения);
	
	Если ЗначениеЗаполнено(Выборка.name_type_ass) Тогда
		ТипАссортимента = Справочники.ТипАссортимента.НайтиПоКоду(Выборка.id_type_ass);
		Если НЕ ЗначениеЗаполнено(ТипАссортимента) Тогда
			СпрТипАсс = Справочники.ТипАссортимента.СоздатьЭлемент();
			СпрТипАсс.Код = Выборка.id_type_ass;
			СпрТипАсс.Наименование =Выборка.name_type_ass;
			СпрТипАсс.Записать();
			ТипАссортимента = СпрТипАсс.Ссылка;
		КонецЕсли;
		СпрОбъект.ТипАссортимента = ТипАссортимента;
		СтруктураРеквизитов.Вставить("ТипАссортимента", ТипАссортимента);
	Иначе	
		СтруктураРеквизитов.Вставить("ТипАссортимента", Справочники.ТипАссортимента.ПустаяСсылка());
	КонецЕсли;
	
	НужнаЗапись = Ложь;
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Реквизит.Значение = NULL
			И Не ЗначениеЗаполнено(СпрОбъект[Реквизит.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		Если СпрОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
			НужнаЗапись = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Попытка
			Для Каждого Реквизит Из СтруктураРеквизитов Цикл
				СпрОбъект[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла;
			СпрОбъект.Записать();
		Исключение
			СпрОбъект.УстановитьНовыйКод("0");
			СпрОбъект.Записать();
		КонецПопытки;
	КонецЕсли;	
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИзменитьСпецификацию(ДатаЗаписиВРегистр, id_Tov, id_Kontr, Выборка  = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(id_Tov) Тогда
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка  = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("id_Tov", id_Tov);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Tov_kontr.id_Tov,
		               |	Tov_kontr.id_Etiketka,
		               |	Tov_kontr.id_Upakovka,
		               |	Tov_kontr.id_Upakovka2,
		               |	Kontr.id_kontr_postavka
		               |ИЗ
		               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tov_kontr КАК Tov_kontr
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
		               |		ПО Tov_kontr.id_kontr = Kontr.id_kontr
		               |ГДЕ
		               |	Tov_kontr.id_Tov = &id_Tov
		               |	И Tov_kontr.id_kontr = &id_kontr";
					   
		Запрос.УстановитьПараметр("id_Tov", id_Tov);
		Запрос.УстановитьПараметр("id_kontr", id_Kontr);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_kontr_postavka);
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли;	
	
	Владелец = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", id_tov);
	Если Владелец.Пустая() Тогда
		Владелец = СоздатьИзменитьНоменклатуру(id_tov);
	КонецЕсли;
	
	КолвоСоставляющих = 0;
	Если ЗначениеЗаполнено(Выборка.id_Etiketka) Тогда
		Этикетка = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_Etiketka);
		Если Этикетка.Пустая() Тогда
			Этикетка = СоздатьИзменитьНоменклатуру(Выборка.id_Etiketka);
		КонецЕсли;
		КолвоСоставляющих = КолвоСоставляющих + 1;
	Иначе
		Этикетка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.id_Upakovka) Тогда
		Упаковка = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_Upakovka);
		Если Упаковка.Пустая() Тогда
			Упаковка = СоздатьИзменитьНоменклатуру(Выборка.id_Upakovka);
		КонецЕсли;
		КолвоСоставляющих = КолвоСоставляющих + 1;
	Иначе
		Упаковка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.id_Upakovka2) Тогда
		Упаковка2 = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_Upakovka2);
		Если Упаковка2.Пустая() Тогда
			Упаковка2 = СоздатьИзменитьНоменклатуру(Выборка.id_Upakovka2);
		КонецЕсли;
		КолвоСоставляющих = КолвоСоставляющих + 1;
	Иначе
		Упаковка2 = Неопределено;
	КонецЕсли;
	
	Если Этикетка = Неопределено И Упаковка = Неопределено И Упаковка2 = Неопределено Тогда
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Спецификации.Ссылка
	               |ИЗ
	               |	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Номенклатура = &Владелец) КАК СпецификацииПоставщиковСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
	               |		ИЗ
	               |			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	               |					&Период,
	               |					Номенклатура = &Владелец
	               |						И Поставщик = &Поставщик
	               |						 ) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
	               |		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
	               |			И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
	               |			СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |			СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
	               |		ИЗ
	               |			РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Номенклатура = &Владелец) КАК СпецификацииПоставщиковСрезПоследних
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |					ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
	               |				ИЗ
	               |					РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	               |							&Период,
	               |							Номенклатура = &Владелец
	               |								И Поставщик = &Поставщик
	               |								) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
	               |				ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
	               |					И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СпецификацииПоставщиковСрезПоследних.Номенклатура,
	               |			СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
	               |		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	               |			И СпецификацииПоставщиковСрезПоследних.Характеристика = ВложенныйЗапрос.Характеристика
	               |			И СпецификацииПоставщиковСрезПоследних.Период = ВложенныйЗапрос.Период
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спецификации КАК Спецификации
	               |		ПО СпецификацииПоставщиковСрезПоследних.Спецификация = Спецификации.Ссылка
	               |ГДЕ
	               |	Спецификации.Владелец = &Владелец";
				   
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	ВыборкаСпециф = Запрос.Выполнить().Выбрать();
	НужнаЗапись = Ложь;
	Если ВыборкаСпециф.Следующий() Тогда
		СпрОбъект = ВыборкаСпециф.Ссылка.ПолучитьОбъект();
	Иначе
		СпрОбъект = Справочники.Спецификации.СоздатьЭлемент();
		СпрОбъект.Наименование = Владелец.Наименование;
		СпрОбъект.Владелец = Владелец;
		СпрОбъект.ЕдиницаИзмерения = Владелец.ЕдиницаХраненияОстатков;
		НужнаЗапись = Истина;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпецификацииСостав.НомерСтроки КАК НомерСтроки,
	               |	ВЫБОР
	               |		КОГДА СпецификацииСостав.Номенклатура = &Этикетка
	               |				ИЛИ СпецификацииСостав.Номенклатура = &Упаковка
	               |				ИЛИ СпецификацииСостав.Номенклатура = &Упаковка2
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьСтрока
	               |ИЗ
	               |	Справочник.Спецификации.Состав КАК СпецификацииСостав
	               |ГДЕ
	               |	СпецификацииСостав.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки УБЫВ";
				   
	Запрос.УстановитьПараметр("Ссылка", СпрОбъект.Ссылка);
	Запрос.УстановитьПараметр("Этикетка", Этикетка);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Упаковка2", Упаковка2);
	
	ВыборкаСостав = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСостав.Следующий() Цикл
		Если НЕ ВыборкаСостав.ЕстьСтрока Тогда
			СпрОбъект.Состав.Удалить(ВыборкаСостав.НомерСтроки - 1);
		КонецЕсли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Этикетка)
		И СпрОбъект.Состав.Найти(Этикетка, "Номенклатура") = Неопределено Тогда
		СтрокаТаб = СпрОбъект.Состав.Добавить();
		СтрокаТаб.Номенклатура = Этикетка;
		СтрокаТаб.ЕдиницаИзмерения = Этикетка.ЕдиницаХраненияОстатков;
		СтрокаТаб.Количество = 1;
		НужнаЗапись = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка)
		И СпрОбъект.Состав.Найти(Упаковка, "Номенклатура") = Неопределено Тогда
		СтрокаТаб = СпрОбъект.Состав.Добавить();
		СтрокаТаб.Номенклатура = Упаковка;
		СтрокаТаб.ЕдиницаИзмерения = Упаковка.ЕдиницаХраненияОстатков;
		СтрокаТаб.Количество = 1;
		НужнаЗапись = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка2)
		И СпрОбъект.Состав.Найти(Упаковка2, "Номенклатура") = Неопределено Тогда
		СтрокаТаб = СпрОбъект.Состав.Добавить();
		СтрокаТаб.Номенклатура = Упаковка2;
		СтрокаТаб.ЕдиницаИзмерения = Упаковка2.ЕдиницаХраненияОстатков;
		СтрокаТаб.Количество = 1;
		НужнаЗапись = Истина;
	КонецЕсли;
	
	Если НужнаЗапись Тогда
		Попытка
			//АК БЕЛН 30.09.2016++//Избавляемся от спецификации в регистре (Разгуляев)
			//СпрОбъект.Записать();
			//АК БЕЛН 30.09.2016--//Избавляемся от спецификации в регистре (Разгуляев)
		Исключение
			СпрОбъект.УстановитьНовыйКод("0");
			//АК БЕЛН 30.09.2016++//Избавляемся от спецификации в регистре (Разгуляев)
			//СпрОбъект.Записать();
			//АК БЕЛН 30.09.2016--//Избавляемся от спецификации в регистре (Разгуляев)
		КонецПопытки;
		Набор = РегистрыСведений.СпецификацииПоставщиков.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(ДатаЗаписиВРегистр);
		Набор.Отбор.Поставщик.Установить(Поставщик);
		Набор.Отбор.Номенклатура.Установить(Владелец);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Значение"	, Поставщик);
		Запрос.УстановитьПараметр("Владелец"	, Владелец);
		Запрос.УстановитьПараметр("ДатаЗаписиВРегистр"	, ДатаЗаписиВРегистр);
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ХарактеристикиНоменклатуры.Ссылка,
		//|	ЗначенияСвойствОбъектов.Значение,
		//|	ЗначенияСвойствОбъектов.Объект
		//|ИЗ
		//|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		//|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		//|ГДЕ
		//|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		//|	И ЗначенияСвойствОбъектов.Значение = &Значение
		//|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ";
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныПоставщиковСрезПоследних.Характеристика КАК Объект,
			|	1 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
			|			&ДатаЗаписиВРегистр,
			|			Характеристика.Владелец = &Владелец
			|				
			|				И поставщик = &Значение) КАК ЦеныПоставщиковСрезПоследних
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	2
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
			|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И ЗначенияСвойствОбъектов.Значение = &Значение
			|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
		Результат = Запрос.Выполнить();
		
		Хар=Неопределено;
		Выб=Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Хар=Выб.Объект;
		КонецЕсли; 
		
		Для каждого Стр Из СпрОбъект.Состав Цикл
			Запись = Набор.Добавить();
			Запись.Период = ДатаЗаписиВРегистр;
			Запись.Поставщик = Поставщик;
			Запись.Номенклатура = Владелец;
			//АК БЕЛН 30.09.2016++//Избавляемся от спецификации в регистре (Разгуляев)
			//Запись.Спецификация = СпрОбъект.Ссылка; 
			//АК БЕЛН 30.09.2016--//Избавляемся от спецификации в регистре (Разгуляев)
			Запись.Характеристика=Хар;
		    Запись.НоменклатураСырье=Стр.Номенклатура;
		    Запись.ЕдиницаИзмерения=Стр.ЕдиницаИзмерения;
		    Запись.Количество=Стр.Количество;
		КонецЦикла; 
		Набор.Записать(Истина);
	КонецЕсли;	
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИзменитьДокументЛистУчета(СтрокаЛистУчета, ТаблицаТабЧастейЛистовУчета)
	
	//СсылкаВБазе = Документы.ЛистУчета.НайтиПоНомеру(Лев(Формат(СтрокаЛистУчета.id_LU, "ЧГ=0") + "         ", 9));
	СсылкаВБазе = Документы.ЛистУчета.НайтиПоРеквизиту("ИД", СтрокаЛистУчета.id_LU);
	Если СсылкаВБазе.Пустая() Тогда
		ДокОбъект = Документы.ЛистУчета.СоздатьДокумент();
		//ДокОбъект.Номер = Формат(СтрокаЛистУчета.id_LU, "ЧГ=0");
	Иначе
		ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
	КонецЕсли;
	ДокОбъект.Товары.Очистить();
	
	ДокОбъект.Дата = СтрокаЛистУчета.date;
	ДокОбъект.ИД = СтрокаЛистУчета.id_LU;
	ДокОбъект.ЗагруженоИзAccess = Истина;
	//ДокОбъект.ПометкаУдаления = Ложь;
	ДокОбъект.СуммаZОтчета = СтрокаЛистУчета.Z_otchet;
	ДокОбъект.КоличествоЧеков = СтрокаЛистУчета.Kolvo_check;
	ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаЛистУчета.id_TT);
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаЛистУчета.id_TT);
	КонецЕсли;	
	ДокОбъект.ТорговаяТочка = ТорговаяТочка;
	ДокОбъект.СуммаТоваров = СтрокаЛистУчета.Summa_tov;
	ДокОбъект.НачальныйОстаток = СтрокаЛистУчета.Ost_Nach;
	ДокОбъект.ПоложилиВКонверт = СтрокаЛистУчета.Inkass;
	ДокОбъект.Безнал = СтрокаЛистУчета.BezNal;
	ДокОбъект.КонечныйОстаток = СтрокаЛистУчета.Ost_kon;
	ДокОбъект.Разница = СтрокаЛистУчета.Raznica;
	ДокОбъект.ТемператураХолодильникаУтром = СтрокаЛистУчета.Temra1;
	ДокОбъект.ТемператураХолодильникаВечером = СтрокаЛистУчета.Temra2;
	ДокОбъект.ВремяДоставки = СтрокаЛистУчета.Time_delivery;
	ДокОбъект.Комментарий = СтрокаЛистУчета.primechanie;
	
	Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаЛистУчета.id_sklad);
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Склад = СоздатьИзменитьСклад(СтрокаЛистУчета.id_sklad);
	КонецЕсли;
	ДокОбъект.Склад = Склад;
	
	Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", СтрокаЛистУчета.id_UL);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = СоздатьОрганизацию(СтрокаЛистУчета.id_UL);
	КонецЕсли;	
	ДокОбъект.Организация = Организация;
	ДокОбъект.КоличествоКоробокОтВодителя = СтрокаЛистУчета.Kor_Vod;
	ДокОбъект.ВозвратПокупателю = СтрокаЛистУчета.return;
	ДокОбъект.СторноОшибочно = СтрокаЛистУчета.return_m;
	ДокОбъект.СуммаZОтчетаККМ = СтрокаЛистУчета.Z_otchet_KKM;
	ГруппаТорговойТочки = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", СтрокаЛистУчета.id_gr);
	Если НЕ ЗначениеЗаполнено(ГруппаТорговойТочки) Тогда
		ГруппаТорговойТочки = СоздатьИзменитьГруппуТорговойТочки(СтрокаЛистУчета.id_gr);
	КонецЕсли;
	ДокОбъект.ГруппаТорговойТочки = ГруппаТорговойТочки;
	ДокОбъект.ПеребитоПоККМ = СтрокаЛистУчета.СумПер_LU;
	ДокОбъект.СкидкаКопеек = СтрокаЛистУчета.Sk_kopeek;
	ДокОбъект.ТемператураМорозильникаУтром = СтрокаЛистУчета.Temra1M;
	ДокОбъект.ТемператураМорозильникаВечером = СтрокаЛистУчета.Temra2M;
	ДокОбъект.СуммаКупонов = СтрокаЛистУчета.Cupon;
	ДокОбъект.КоличествоАнкет = СтрокаЛистУчета.Ankets_kolvo;
	ДокОбъект.ОплатаБонусами = СтрокаЛистУчета.OplataBonus;
	ДокОбъект.ОплатаБонусамиККМ = СтрокаЛистУчета.OplataBonus_z;
	ДокОбъект.СредняяЦенаККМ = СтрокаЛистУчета.is_avarage_price;
	ДокОбъект.СуммаПодарок = СтрокаЛистУчета.Sum_podarok;
	ДокОбъект.СуммаПодарокККМ = СтрокаЛистУчета.Sum_podarok_kkm;
	
	МассивНоменклатурыДляПростановкиЦены = Новый Массив();
	
	СтрокиТовары = ТаблицаТабЧастейЛистовУчета.НайтиСтроки(Новый Структура("id_LU", СтрокаЛистУчета.id_LU));
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СтрокаДок = ДокОбъект.Товары.Добавить();
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
		КонецЕсли;	
		СтрокаДок.Номенклатура = Номенклатура;
		СтрокаДок.НачОстаток = СтрокаТовар.nach_ost;
		СтрокаДок.Поступило = СтрокаТовар.post;
		СтрокаДок.Дегустация = СтрокаТовар.digust;
		СтрокаДок.Подарок = СтрокаТовар.akcia;
		СтрокаДок.СписаниеПоСроку = СтрокаТовар.spisanie;
		СтрокаДок.Расход = СтрокаТовар.rashod;
		СтрокаДок.КонОстаток = СтрокаТовар.kon_ost;
		СтрокаДок.Цена = СтрокаТовар.cena_pr;
		//СтрокаДок.Сумма = СтрокаТовар.summa;
		СтрокаДок.Сумма = ?(СтрокаТовар.rashod = Null, 0, СтрокаТовар.rashod) * ?(СтрокаТовар.cena_pr = Null, 0, СтрокаТовар.cena_pr);
		СтрокаДок.Заказ = СтрокаТовар.Zakaz;
		СтрокаДок.Себестоимость = СтрокаТовар.sebest;
		СтрокаДок.ВремяПоследнегоЧекаПоТовару = СтрокаТовар.time_fin;
		СтрокаДок.РасходККМ = СтрокаТовар.rashod_kkm;
		СтрокаДок.ЦенаККМ = СтрокаТовар.cena_kkm;
		СтрокаДок.СписаниеПоКачеству = СтрокаТовар.spisanie_kach;
		СтрокаДок.Бой = СтрокаТовар.boi;
		СтрокаДок.БезЭтикетки = СтрокаТовар.bez_etik;
		СтрокаДок.Вчерашнее = СтрокаТовар.ne_svej;
		СтрокаДок.Будущее = СтрокаТовар.future;
		СтрокаДок.СомнительноеКачество = СтрокаТовар.somn_kach;
		СтрокаДок.ПланПромо = СтрокаТовар.kol_plan_promo;
		СтрокаДок.Расхождение = СтрокаТовар.rashozdenie;
		СтрокаДок.ПодарокККМ = СтрокаТовар.Podarok_kkm;
		
		Если (СтрокаДок.НачОстаток <> СтрокаДок.КонОстаток
			ИЛИ СтрокаДок.Поступило <> 0) И СтрокаДок.Цена = 0
			И ЗначениеЗаполнено(СтрокаДок.Номенклатура) Тогда
			МассивНоменклатурыДляПростановкиЦены.Добавить(СтрокаДок.Номенклатура);
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивНоменклатурыДляПростановкиЦены.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&ДатаКон,
		               |			ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
		               |				И ТорговаяТочка = &ТорговаяТочка
		               |				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДокОбъект.Дата));
		Запрос.УстановитьПараметр("ТорговаяТочка", ДокОбъект.ТорговаяТочка);
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатурыДляПростановкиЦены);
		ТабЦены = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаб Из ТабЦены Цикл
			СтрокиТоваров = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Цена", СтрокаТаб.Номенклатура, 0));
			Если СтрокиТоваров.Количество() > 0 Тогда
				СтрокиТоваров[0].Цена = СтрокаТаб.Цена;
				СтрокиТоваров[0].Сумма = СтрокиТоваров[0].Расход * СтрокиТоваров[0].Цена;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ДокОбъект.Продавцы.Очистить();
	Если СтрокаЛистУчета.Продавец1КодГруппы <> 26 Тогда
		Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца1) Тогда
			Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца1, "ЧГ=0"), 10));
			Если ЗначениеЗаполнено(Продавец) Тогда
				СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				СтрокаТаб.Продавец = Продавец;
			Иначе	
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_prod)
			И Найти(НРег(СтрокаЛистУчета.id_prod), "продавец_") = 0 Тогда
			//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
			//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
		КонецЕсли;
	КонецЕсли;	
	Если СтрокаЛистУчета.Продавец2КодГруппы <> 26 Тогда
		Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца2) Тогда
			Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца2, "ЧГ=0"), 10));
			Если ЗначениеЗаполнено(Продавец) Тогда
				СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				СтрокаТаб.Продавец = Продавец;
			Иначе	
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_promo)
			И Найти(НРег(СтрокаЛистУчета.id_promo), "продавец_") = 0 Тогда
			//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
			//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
		КонецЕсли;
	КонецЕсли;
	Если СтрокаЛистУчета.Продавец3КодГруппы <> 26 Тогда
		Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца3) Тогда
			Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца3, "ЧГ=0"), 10));
			Если ЗначениеЗаполнено(Продавец) Тогда
				СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				СтрокаТаб.Продавец = Продавец;
			Иначе	
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.Prodavec_3)
			И Найти(НРег(СтрокаЛистУчета.Prodavec_3), "продавец_") = 0 Тогда
			//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
			//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
		КонецЕсли;
	КонецЕсли;
	Если СтрокаЛистУчета.Продавец2КодГруппы <> 26 Тогда
		Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца4) Тогда
			Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца4, "ЧГ=0"), 10));
			Если ЗначениеЗаполнено(Продавец) Тогда
				СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				СтрокаТаб.Продавец = Продавец;
			Иначе	
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_prod4)
			И Найти(НРег(СтрокаЛистУчета.id_prod4), "продавец_") = 0 Тогда
			//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
			//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ДокОбъект.ЭтоНовый() ИЛИ НЕ ДокОбъект.Проведен Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе	
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьКартуПокупателя(НомерКарты)
	
	СпрОбъект = Справочники.КартыПокупателей.СоздатьЭлемент();
	СпрОбъект.Наименование = НомерКарты;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьСписокВопросовПриОпросе(Код, Наименование)
	
	СпрОбъект = Справочники.СписокВопросовПриОпросеПокупателей.СоздатьЭлемент();
	СпрОбъект.Код = Код;
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьВыборкуПокупателей(Код, Наименование)
	
	СпрОбъект = Справочники.СохраненныеВыборкиПоПокупателям.СоздатьЭлемент();
	СпрОбъект.Код = Код;
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьТипОбращения(Код, Наименование)
	
	СпрОбъект = Справочники.ТипыОбращенийКПокупателю.СоздатьЭлемент();
	СпрОбъект.Код = Код;
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьТипСвязи(Наименование)
	
	СпрОбъект = Справочники.ТипыСвязейСПокупателями.СоздатьЭлемент();
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьПрограммуОбучения(Код, Наименование)
	
	СпрОбъект = Справочники.ПрограммыОбученияПродавцов.СоздатьЭлемент();
	СпрОбъект.Код = Код;
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИзменитьДокументОбращениеКПокупателю(СтрокаОбращение)
	
	СсылкаВБазе = Документы.ОбращениеКПокупателю.НайтиПоНомеру(СтрокаОбращение.id_3p);
	Если СсылкаВБазе.Пустая() Тогда
		ДокОбъект = Документы.ОбращениеКПокупателю.СоздатьДокумент();
		ДокОбъект.Номер = СтрокаОбращение.id_3p;
	Иначе
		ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
	КонецЕсли;
	
	ДокОбъект.Дата = СтрокаОбращение.Date_activation;
	ДокОбъект.ПометкаУдаления = Ложь;
	КартаПокупателя = Справочники.КартыПокупателей.НайтиПоНаименованию(СтрокаОбращение.НомерКарты_3p);
	Если Не ЗначениеЗаполнено(КартаПокупателя) Тогда
		КартаПокупателя = СоздатьКартуПокупателя(СтрокаОбращение.НомерКарты_3p);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаОбращение.НомерКарты_3p) Тогда
		КартаПокупателя = Неопределено;
	КонецЕсли;	
	ДокОбъект.КартаПокупателя = КартаПокупателя;
	ДокОбъект.ДатаЗвонка = СтрокаОбращение.Date_call;
	ДокОбъект.ЗвонившийСотрудник = СтрокаОбращение.user_call;
	Если НРег(СокрЛП(СтрокаОбращение._p_answer)) = "да" Тогда
		ДокОбъект.КраткийОтветПокупателя = Перечисления.ОтветыКлиентов.Да;
	ИначеЕсли НРег(СокрЛП(СтрокаОбращение._p_answer)) = "не знаю" Тогда
		ДокОбъект.КраткийОтветПокупателя = Перечисления.ОтветыКлиентов.НеЗнаю;
	ИначеЕсли НРег(СокрЛП(СтрокаОбращение._p_answer)) = "нет" Тогда
		ДокОбъект.КраткийОтветПокупателя = Перечисления.ОтветыКлиентов.Нет;	
	КонецЕсли;	
	ДокОбъект.ПолныйОтвет1 = СтрокаОбращение._p_answer2;
	ДокОбъект.ПолныйОтвет2 = СтрокаОбращение._p_answer3;
	ДокОбъект.Описание = СтрокаОбращение.desc_3p;
	СписокВопросов = Справочники.СписокВопросовПриОпросеПокупателей.НайтиПоКоду(СтрокаОбращение.id_3p_q);
	Если Не ЗначениеЗаполнено(СписокВопросов) Тогда
		СписокВопросов = СоздатьСписокВопросовПриОпросе(СтрокаОбращение.id_3p_q, СтрокаОбращение.НаименованиеСпискаВопросов);
	КонецЕсли;	
	ДокОбъект.Вопрос = СписокВопросов;
	ВыборкаПокупателей = Справочники.СохраненныеВыборкиПоПокупателям.НайтиПоКоду(СтрокаОбращение.id_3p_v);
	Если Не ЗначениеЗаполнено(ВыборкаПокупателей) Тогда
		ВыборкаПокупателей = СоздатьВыборкуПокупателей(СтрокаОбращение.id_3p_v, СтрокаОбращение.НаименованиеВыборка);
	КонецЕсли;	
	ДокОбъект.ВыборкаПокупателей = ВыборкаПокупателей;
	ДокОбъект.Проект = СтрокаОбращение.Проект;
	ТипОбращений = Справочники.ТипыОбращенийКПокупателю.НайтиПоКоду(СтрокаОбращение.id_type_BV);
	Если Не ЗначениеЗаполнено(ТипОбращений) Тогда
		ТипОбращений = СоздатьТипОбращения(СтрокаОбращение.id_type_BV, СтрокаОбращение.НаименованиеТипОбращения);
	КонецЕсли;	
	ДокОбъект.ТипОбращений = ТипОбращений;
	ДокОбъект.КонтактнаяИнформация = СтрокаОбращение.contact;
	ТипСвязи = Справочники.ТипыСвязейСПокупателями.НайтиПоНаименованию(СтрокаОбращение.type_svyz);
	Если Не ЗначениеЗаполнено(ТипСвязи) Тогда
		ТипСвязи = СоздатьТипСвязи(СтрокаОбращение.type_svyz);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаОбращение.type_svyz) Тогда
		ТипСвязи = Неопределено;
	КонецЕсли;
	ДокОбъект.ТипСвязи = ТипСвязи;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьПричинуПотери(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.ПричиныПотерь.ПустаяСсылка();
	КонецЕсли;	
	
	СпрОбъект = Справочники.ПричиныПотерь.СоздатьЭлемент();
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
	Исключение
		СпрОбъект.УстановитьНовыйКод("0");
		СпрОбъект.Записать();
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;

КонецФункции	

Функция СоздатьИзменитьДокументПромоакция(СтрокаПромоакция, ТаблицаТабЧастейПромоакций)
	
	СсылкаВБазе = Документы.Промоакция.НайтиПоНомеру(СтрокаПромоакция.id_plan_promo);
	Если СсылкаВБазе.Пустая() Тогда
		ДокОбъект = Документы.Промоакция.СоздатьДокумент();
		ДокОбъект.Номер = СтрокаПромоакция.id_plan_promo;
	Иначе
		ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
	КонецЕсли;
	ДокОбъект.Товары.Очистить();
	
	ДокОбъект.Дата = СтрокаПромоакция.date_promo;
	ДокОбъект.ПометкаУдаления = Ложь;
	ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПромоакция.id_tt_promo);
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаПромоакция.id_tt_promo);
	КонецЕсли;	
	ДокОбъект.ТорговаяТочка = ТорговаяТочка;
	
	СтрокиТовары = ТаблицаТабЧастейПромоакций.НайтиСтроки(Новый Структура("id_plan_promo", СтрокаПромоакция.id_plan_promo));
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СтрокаДок = ДокОбъект.Товары.Добавить();
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov_promo);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov_promo);
		КонецЕсли;	
		СтрокаДок.Номенклатура = Номенклатура;
		СтрокаДок.Количество = СтрокаТовар.kolvo_promo;
		СтрокаДок.Цена = СтрокаТовар.cena_promo;
		СтрокаДок.ВлияетНаЗП = СтрокаТовар.is_ZP;
	КонецЦикла;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьВодителя(Код, Наименование, АйдиСтруктурнаяЕдиница = 0)
	
	СпрОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	СпрОбъект.Код = Код;
	СпрОбъект.Наименование = Наименование;
	Попытка
		СпрОбъект.Записать();
		Если ЗначениеЗаполнено(АйдиСтруктурнаяЕдиница) Тогда
			Запись = РегистрыСведений.Водители.СоздатьМенеджерЗаписи();
			Запись.Водитель = СпрОбъект.Ссылка;
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", АйдиСтруктурнаяЕдиница);
			Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				СтруктурнаяЕдиница = СоздатьИзменитьТорговуюТочку(АйдиСтруктурнаяЕдиница);
			КонецЕсли;	
			Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Запись.Записать();
		КонецЕсли;	
	Исключение
	КонецПопытки;
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИзменитьПоставщика(Знач ИНН, ИД)
	
	Если НЕ ЗначениеЗаполнено(ИД) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("id_kontr", ИД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Kontr.id_kontr,
	|	Kontr.nova_kontr,
	|	Kontr.ИНН,
	|	Kontr.Price_s_NDS,
	|	Kontr.sms_k,
	|	Kontr.НДС,
	|	Kontr.id_ul_post,
	|	Kontr.id_kontr_postavka
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	|ГДЕ
	|	Kontr.id_kontr = &id_kontr";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ИНН = СокрЛП(Формат(ИНН, "ЧГ=0"));
	ИНН = СтрЗаменить(ИНН, " ", "");
	
	ЗапросКонтр = Новый Запрос();
	ЗапросКонтр.УстановитьПараметр("ИД"			, ИД);
	ЗапросКонтр.УстановитьПараметр("ИНН"		, ИНН);
	ЗапросКонтр.УстановитьПараметр("ИННЗаполнен", ЗначениеЗаполнено(ИНН));
	
	ЗапросКонтр.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	ВЫБОР
	|		КОГДА Контрагенты.ИД = &ИД
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.ИД = &ИД
	|			ИЛИ Контрагенты.ИНН = &ИНН
	|				И &ИННЗаполнен = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
						
	ВыборкаКонтр = ЗапросКонтр.Выполнить().Выбрать();
	СтруктураРеквизитов = Новый Структура();
	Если НЕ ВыборкаКонтр.Следующий() Тогда
		Поставщик = Справочники.Контрагенты.СоздатьЭлемент();
		СтруктураРеквизитов.Вставить("ИД"			, ИД);
		СтруктураРеквизитов.Вставить("ИНН"			, ИНН);
		СтруктураРеквизитов.Вставить("ЮрФизЛицо"	, ?(СтрДлина(Поставщик.ИНН) > 10, Перечисления.ЮрФизЛицо.ФизЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо));
		СтруктураРеквизитов.Вставить("Наименование"	, Выборка.nova_kontr);
		СтруктураРеквизитов.Вставить("НаименованиеПолное", Выборка.nova_kontr);
		СтруктураРеквизитов.Вставить("sms_k"		, Выборка.sms_k);
		Если Выборка.НДС = 0 Тогда
			СтруктураРеквизитов.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
	Иначе
		Поставщик = ВыборкаКонтр.Ссылка.ПолучитьОбъект();
		СтруктураРеквизитов.Вставить("ИД"			, ИД);
		СтруктураРеквизитов.Вставить("Наименование"	, Выборка.nova_kontr);
		СтруктураРеквизитов.Вставить("sms_k"		, Выборка.sms_k);
		Если Выборка.НДС = 0 Тогда
			СтруктураРеквизитов.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("Производитель"	, ?(ЗначениеЗаполнено(Выборка.id_ul_post)		,
			Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_ul_post)			, Справочники.Контрагенты.ПустаяСсылка()));
	СтруктураРеквизитов.Вставить("Поставщик"		, ?(ЗначениеЗаполнено(Выборка.id_kontr_postavka),
			Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_kontr_postavka)	, Справочники.Контрагенты.ПустаяСсылка()));
	
	НужнаЗапись = Ложь;
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Реквизит.Значение = NULL
				И НЕ ЗначениеЗаполнено(Поставщик[Реквизит.Ключ]) Тогда
			Продолжить;
		КонецЕсли;	
		Если Поставщик[Реквизит.Ключ] <> Реквизит.Значение Тогда
			НужнаЗапись = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Попытка
			Для Каждого Реквизит Из СтруктураРеквизитов Цикл
				Поставщик[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла;
			Поставщик.Записать();
		Исключение
			Поставщик.УстановитьНовыйКод("0");
			Поставщик.Записать();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Поставщик.Ссылка;
	
КонецФункции	

Функция СоздатьХарактеристикуПоставщик(ИД, Номенклатура, Наименование, ИНН) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("id_kontr", ИД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Kontr.id_kontr,
	|	Kontr.id_ul_post
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	|ГДЕ
	|	Kontr.id_kontr = &id_kontr";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Отличается = (Выборка.id_kontr <> Выборка.id_ul_post);
		//Если Отличается Тогда
			СпрСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", Выборка.id_ul_post,, Номенклатура);
			Если НЕ СпрСсылка.Пустая() Тогда
				Возврат СпрСсылка;
			Иначе
				ИД = Выборка.id_ul_post;
			КонецЕсли;	
		//КонецЕсли;	
	КонецЕсли;	
	
	СпрОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	СпрОбъект.ИД 			= ИД;
	СпрОбъект.Владелец 		= Номенклатура;
	СпрОбъект.Наименование 	= Наименование;
	Попытка
		СпрОбъект.Записать();
		Поставщик = СоздатьИзменитьПоставщика(ИНН, ИД);
		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект 	= СпрОбъект.Ссылка;
		Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель;
		Запись.Значение = Поставщик;
		Запись.Записать();
	Исключение
	КонецПопытки;
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьИзменитьДокументПоступления(СтрокаПоступление, ТаблицаТабЧастейПоступления)
	
	СсылкаВБазе = Документы.АК_ПоступлениеТоваровУслуг.НайтиПоРеквизиту("ИД", СтрокаПоступление.id_supply);
	Если СсылкаВБазе.Пустая() Тогда
		ДокОбъект = Документы.АК_ПоступлениеТоваровУслуг.СоздатьДокумент();
		//ДокОбъект.УстановитьНовыйНомер("0");
		ДокОбъект.ИД = СтрокаПоступление.id_supply;
	Иначе
		ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
	КонецЕсли;
	ДокОбъект.Товары.Очистить();
	
	ДокОбъект.Дата = СтрокаПоступление.date;
	ДокОбъект.ПометкаУдаления = Ложь;
	ДокОбъект.НомерВходящегоДокумента = СтрокаПоступление.N_post;
	ДокОбъект.СуммаДокумента = СтрокаПоступление.Summa;
	ДокОбъект.ПолученыДокументы = СтрокаПоступление.BuhDocument;
	ДокОбъект.Комментарий = СтрокаПоступление.Primechanie;
	ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПоступление.id_TT);
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаПоступление.id_TT);
	КонецЕсли;	
	ДокОбъект.СтруктурнаяЕдиница = ТорговаяТочка;
	
	Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", СтрокаПоступление.id_UL);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = СоздатьОрганизацию(СтрокаПоступление.id_UL);
	КонецЕсли;	
	ДокОбъект.Организация = Организация;
	
	Если ЗначениеЗаполнено(СтрокаПоступление.id_sotrudnik) Тогда
		ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(СтрокаПоступление.Voditel));
		Если Не ЗначениеЗаполнено(ДокОбъект.Кладовщик) Тогда
			ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
		КонецЕсли;
	КонецЕсли;	
	
	ДокОбъект.НомерСФ = СтрокаПоступление.N_Factur;
	ДокОбъект.ДатаСФ = СтрокаПоступление.Date_Factur;
	ДокОбъект.Поступление = СтрокаПоступление.time_2;
	
	СтрокиТовары = ТаблицаТабЧастейПоступления.НайтиСтроки(Новый Структура("id_supply", СтрокаПоступление.id_supply));
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СтрокаДок = ДокОбъект.Товары.Добавить();
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
		КонецЕсли;	
		СтрокаДок.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтрокаТовар.id_kontr)
			И ЗначениеЗаполнено(Номенклатура) Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаТовар.id_kontr,, Номенклатура);
			Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаТовар.id_kontr, Номенклатура, СтрокаТовар.nova_kontr, СтрокаТовар.ИНН);
			КонецЕсли;
			СтрокаДок.Характеристика = Характеристика;
		КонецЕсли;	
		
		СтрокаДок.Цена = СтрокаТовар.cena;
		//СтрокаДок.КоличествоПоДаннымОтправителя = СтрокаТовар.kolvo;
		СтрокаДок.Количество = СтрокаТовар.kolvo;
	КонецЦикла;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция СоздатьИзменитьДокументПеремещения(СтрокаПеремещение, ТаблицаТабЧастейПеремещений)
	
	МассивДокументов = Новый Массив();
	
	СтрокиТоварыРасход = ТаблицаТабЧастейПеремещений.НайтиСтроки(Новый Структура("id_supply, ЭтоРасход", СтрокаПеремещение.id_supply, Истина));
	
	Если СтрокиТоварыРасход.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |ГДЕ
		               |	ПеремещениеТоваров.ИД = &ИД
		               |	И ПеремещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.Отгрузка)";
					   
		Запрос.УстановитьПараметр("ИД", СтрокаПеремещение.id_supply);
		
		ТабДокументы = Запрос.Выполнить().Выгрузить();
		
		Если ТабДокументы.Количество() = 0 Тогда
			СсылкаВБазе = Документы.ПеремещениеТоваров.ПустаяСсылка();
		Иначе
			СсылкаВБазе = ТабДокументы[0].Ссылка
		КонецЕсли;	
		
		Если СсылкаВБазе.Пустая() Тогда
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			//ДокОбъект.УстановитьНовыйНомер("0");
			ДокОбъект.ИД = СтрокаПеремещение.id_supply;
			ДокОбъект.ВидОперации = Перечисления.ВидыПеремещений.Отгрузка;
		Иначе
			ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
		КонецЕсли;
		ДокОбъект.Товары.Очистить();
		
		ДокОбъект.Дата = СтрокаПеремещение.date;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.НомерВходящегоДокумента = СтрокаПеремещение.N_post;
		ДокОбъект.СуммаДокумента = СтрокаПеремещение.Summa;
		ДокОбъект.ПолученыДокументы = СтрокаПеремещение.BuhDocument;
		ДокОбъект.Комментарий = СтрокаПеремещение.Primechanie;
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПеремещение.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаПеремещение.id_TT);
		КонецЕсли;	
		ДокОбъект.СтруктурнаяЕдиница = ТорговаяТочка;
		
		Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПеремещение.id_sklad);
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = СоздатьИзменитьТорговуюТочку(СтрокаПеремещение.id_sklad);
		КонецЕсли;	
		ДокОбъект.СкладОтправитель = Склад;
		
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", СтрокаПеремещение.id_UL);
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = СоздатьОрганизацию(СтрокаПеремещение.id_UL);
		КонецЕсли;	
		ДокОбъект.Организация = Организация;
		
		Если ЗначениеЗаполнено(СтрокаПеремещение.id_sotrudnik) Тогда
			ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(СтрокаПеремещение.Voditel));
			Если Не ЗначениеЗаполнено(ДокОбъект.Кладовщик) Тогда
				ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;	
		КонецЕсли;	
		
		ДокОбъект.НомерСФ = СтрокаПеремещение.N_Factur;
		ДокОбъект.ДатаСФ = СтрокаПеремещение.Date_Factur;
		ДокОбъект.ВремяОтгрузки = СтрокаПеремещение.time_1;
		ДокОбъект.Опоздание = СтрокаПеремещение.opozdanie;
		
		Для Каждого СтрокаТовар Из СтрокиТоварыРасход Цикл
			СтрокаДок = ДокОбъект.Товары.Добавить();
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov);
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
			КонецЕсли;	
			СтрокаДок.Номенклатура = Номенклатура;
			
			Если ЗначениеЗаполнено(СтрокаТовар.id_kontr)
				И ЗначениеЗаполнено(Номенклатура) Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаТовар.id_kontr,, Номенклатура);
				Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
					Характеристика = СоздатьХарактеристикуПоставщик(СтрокаТовар.id_kontr, Номенклатура, СтрокаТовар.nova_kontr, СтрокаТовар.ИНН);
				КонецЕсли;
				СтрокаДок.Характеристика = Характеристика;
			КонецЕсли;	
			
			СтрокаДок.Цена = СтрокаТовар.cena;
			СтрокаДок.Количество = СтрокаТовар.kolvo;
			СтрокаДок.КоличествоПоДаннымОтправителя = СтрокаТовар.kolvo_sklad;
		КонецЦикла;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		МассивДокументов.Добавить(ДокОбъект.Ссылка);
	КонецЕсли;	
	
	
	
	
	СтрокиТоварыПриход = ТаблицаТабЧастейПеремещений.НайтиСтроки(Новый Структура("id_supply, ЭтоРасход", СтрокаПеремещение.id_supply, Ложь));
	
	Если СтрокиТоварыПриход.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |ГДЕ
		               |	ПеремещениеТоваров.ИД = &ИД
		               |	И ПеремещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.Поступление)";
					   
		Запрос.УстановитьПараметр("ИД", СтрокаПеремещение.id_supply);
		
		ТабДокументы = Запрос.Выполнить().Выгрузить();
		
		Если ТабДокументы.Количество() = 0 Тогда
			СсылкаВБазе = Документы.ПеремещениеТоваров.ПустаяСсылка();
		Иначе
			СсылкаВБазе = ТабДокументы[0].Ссылка
		КонецЕсли;	
		
		Если СсылкаВБазе.Пустая() Тогда
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			//ДокОбъект.УстановитьНовыйНомер("0");
			ДокОбъект.ИД = СтрокаПеремещение.id_supply;
			ДокОбъект.ВидОперации = Перечисления.ВидыПеремещений.Поступление;
		Иначе
			ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
		КонецЕсли;
		ДокОбъект.Товары.Очистить();
		
		ДокОбъект.Дата = СтрокаПеремещение.date;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.НомерВходящегоДокумента = СтрокаПеремещение.N_post;
		ДокОбъект.СуммаДокумента = СтрокаПеремещение.Summa;
		ДокОбъект.ПолученыДокументы = СтрокаПеремещение.BuhDocument;
		ДокОбъект.Комментарий = СтрокаПеремещение.Primechanie;
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПеремещение.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаПеремещение.id_TT);
		КонецЕсли;	
		ДокОбъект.СтруктурнаяЕдиница = ТорговаяТочка;
		
		Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаПеремещение.id_sklad);
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = СоздатьИзменитьТорговуюТочку(СтрокаПеремещение.id_sklad);
		КонецЕсли;	
		ДокОбъект.СкладОтправитель = Склад;
		
		Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", СтрокаПеремещение.id_UL);
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = СоздатьОрганизацию(СтрокаПеремещение.id_UL);
		КонецЕсли;	
		ДокОбъект.Организация = Организация;
		
		Если ЗначениеЗаполнено(СтрокаПеремещение.id_sotrudnik) Тогда
			ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(СтрокаПеремещение.Voditel));
			Если Не ЗначениеЗаполнено(ДокОбъект.Кладовщик) Тогда
				ДокОбъект.Кладовщик = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;	
		КонецЕсли;	
		
		ДокОбъект.НомерСФ = СтрокаПеремещение.N_Factur;
		ДокОбъект.ДатаСФ = СтрокаПеремещение.Date_Factur;
		ДокОбъект.ВремяОтгрузки = СтрокаПеремещение.time_1;
		ДокОбъект.Опоздание = СтрокаПеремещение.opozdanie;
		
		Для Каждого СтрокаТовар Из СтрокиТоварыПриход Цикл
			СтрокаДок = ДокОбъект.Товары.Добавить();
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov);
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
			КонецЕсли;	
			СтрокаДок.Номенклатура = Номенклатура;
			
			Если ЗначениеЗаполнено(СтрокаТовар.id_kontr)
				И ЗначениеЗаполнено(Номенклатура) Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаТовар.id_kontr,, Номенклатура);
				Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
					Характеристика = СоздатьХарактеристикуПоставщик(СтрокаТовар.id_kontr, Номенклатура, СтрокаТовар.nova_kontr, СтрокаТовар.ИНН);
				КонецЕсли;
				СтрокаДок.Характеристика = Характеристика;
			КонецЕсли;	
			
			СтрокаДок.Цена = СтрокаТовар.cena;
			СтрокаДок.Количество = СтрокаТовар.kolvo;
			СтрокаДок.КоличествоПоДаннымОтправителя = СтрокаТовар.kolvo_sklad;
		КонецЦикла;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		МассивДокументов.Добавить(ДокОбъект.Ссылка);
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция СоздатьИзменитьДокументБланка(СтрокаБланка, ТаблицаТабЧастейБланков)
	
	СсылкаВБазе = Документы.Бланк.НайтиПоРеквизиту("ИД", СтрокаБланка.id_B1);
	Если СсылкаВБазе.Пустая() Тогда
		ДокОбъект = Документы.Бланк.СоздатьДокумент();
		//ДокОбъект.УстановитьНовыйНомер("0");
		ДокОбъект.ИД = СтрокаБланка.id_B1;
	Иначе
		ДокОбъект = СсылкаВБазе.ПолучитьОбъект();
	КонецЕсли;
	ДокОбъект.Товары.Очистить();
	
	ДокОбъект.Дата = СтрокаБланка.Date_B1;
	ДокОбъект.ПометкаУдаления = Ложь;
	Если СтрокаБланка.type_B1 = 1 Тогда
		ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип1;
	ИначеЕсли СтрокаБланка.type_B1 = 2 Тогда
		ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип2;
	ИначеЕсли СтрокаБланка.type_B1 = 3 Тогда
		ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип3;
	ИначеЕсли СтрокаБланка.type_B1 = 4 Тогда
		ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип4;	
	КонецЕсли;	
	ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаБланка.id_tt_B1);
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаБланка.id_tt_B1);
	КонецЕсли;	
	ДокОбъект.ТорговаяТочка = ТорговаяТочка;
	ДокОбъект.ЕстьВторой = СтрокаБланка.__ex_B1;
	
	СтрокиТовары = ТаблицаТабЧастейБланков.НайтиСтроки(Новый Структура("id_B1, type_B1", СтрокаБланка.id_B1, СтрокаБланка.type_B1));
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СтрокаДок = ДокОбъект.Товары.Добавить();
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tovar_B1);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tovar_B1);
		КонецЕсли;	
		СтрокаДок.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтрокаТовар.id_kontr_B1)
			И ЗначениеЗаполнено(Номенклатура) Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаТовар.id_kontr_B1,, Номенклатура);
			Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаТовар.id_kontr_B1, Номенклатура, СтрокаТовар.nova_kontr, СтрокаТовар.ИНН);
			КонецЕсли;
			СтрокаДок.Характеристика = Характеристика;
		КонецЕсли;	
		
		СтрокаДок.Количество = СтрокаТовар.kolvo_B1;
		СтрокаДок.КоличествоККМ = СтрокаТовар.kolvo_KKM_B1;
		СтрокаДок.КоличествоСклад = СтрокаТовар.kolvo_sklad_B2;
		СтрокаДок.КоличествоБой = СтрокаТовар.kolvo_boi_B4;
		СтрокаДок.КоличествоБойККМ = СтрокаТовар.kolvo_KKM_B4;
		Если НРег(СтрокаТовар.Problema_B1) = "срокгодности" Тогда
			СтрокаДок.Проблема = Перечисления.ТипыПроблемБланков.СрокГодности;
		ИначеЕсли НРег(СтрокаТовар.Problema_B1) = "качество" Тогда
			СтрокаДок.Проблема = Перечисления.ТипыПроблемБланков.Качество;
		ИначеЕсли НРег(СтрокаТовар.Problema_B1) = "упаковка" Тогда
			СтрокаДок.Проблема = Перечисления.ТипыПроблемБланков.Упаковка;
		ИначеЕсли НРег(СтрокаТовар.Problema_B1) = "другое" Тогда
			СтрокаДок.Проблема = Перечисления.ТипыПроблемБланков.Другое;	
		КонецЕсли;	
		СтрокаДок.Комментарий = СтрокаТовар.Comment_pr_B1;
	КонецЦикла;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Процедура ЗагрузитьДанныеЛистовУчета(ДатаОбработки, МассивТТ = Неопределено) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	List_Ucheta.id_LU,
	               |	List_Ucheta.date КАК date,
	               |	List_Ucheta.id_prod,
	               |	List_Ucheta.Z_otchet,
	               |	List_Ucheta.Kolvo_check,
	               |	List_Ucheta.id_TT,
	               |	List_Ucheta.Summa_tov,
	               |	List_Ucheta.Ost_Nach,
	               |	List_Ucheta.Inkass,
	               |	List_Ucheta.BezNal,
	               |	List_Ucheta.Ost_kon,
	               |	List_Ucheta.Kancel,
	               |	List_Ucheta.Raznica,
	               |	List_Ucheta.id_promo,
	               |	List_Ucheta.primechanie,
	               |	List_Ucheta.Prodavec_3,
	               |	List_Ucheta.Temra1,
	               |	List_Ucheta.Temra2,
	               |	List_Ucheta.Time_delivery,
	               |	List_Ucheta.Paketi,
	               |	List_Ucheta.id_sklad,
	               |	List_Ucheta.id_UL,
	               |	List_Ucheta.Myst_Shop,
	               |	List_Ucheta.Zpl_1,
	               |	List_Ucheta.Zpl_2,
	               |	List_Ucheta.Zpl_3,
	               |	List_Ucheta.Kor_Vod,
	               |	List_Ucheta.Myst_Shop2,
	               |	List_Ucheta.Myst_Shop3,
	               |	List_Ucheta.id_vod,
	               |	List_Ucheta.return,
	               |	List_Ucheta.return_m,
	               |	List_Ucheta.Z_otchet_KKM,
	               |	List_Ucheta.return_KKM,
	               |	List_Ucheta.id_gr,
	               |	List_Ucheta.Cupon,
	               |	List_Ucheta.OplataBonus,
	               |	List_Ucheta.id_prod4,
	               |	List_Ucheta.Temra1M,
	               |	List_Ucheta.Temra2M,
	               |	List_Ucheta.Ankets_kolvo,
	               |	List_Ucheta.OplataBonus_z,
	               |	List_Ucheta.is_avarage_price,
	               |	List_Ucheta.Sk_kopeek,
	               |	List_Ucheta.Sum_podarok,
	               |	List_Ucheta.Sum_podarok_kkm,
	               |	Prodavci._C8_code КАК КодПродавца1,
	               |	Prodavci.id_group КАК Продавец1КодГруппы,
	               |	Prodavci.first_day_work КАК ПервыйДеньРаботы1,
	               |	Prodavci1._C8_code КАК КодПродавца2,
	               |	Prodavci1.id_group КАК Продавец2КодГруппы,
	               |	Prodavci.first_day_work КАК ПервыйДеньРаботы2,
	               |	Prodavci2._C8_code КАК КодПродавца3,
	               |	Prodavci2.id_group КАК Продавец3КодГруппы,
	               |	Prodavci.first_day_work КАК ПервыйДеньРаботы3,
	               |	Prodavci3._C8_code КАК КодПродавца4,
	               |	Prodavci3.id_group КАК Продавец4КодГруппы,
	               |	Prodavci.first_day_work КАК ПервыйДеньРаботы4,
	               |	List_Ucheta.СумПер_LU,
	               |	Prodavci.first_day_work
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.List_Ucheta КАК List_Ucheta
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Prodavci КАК Prodavci
	               |		ПО List_Ucheta.id_prod = Prodavci.id_prod
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Prodavci КАК Prodavci1
	               |		ПО List_Ucheta.id_promo = Prodavci1.id_prod
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Prodavci КАК Prodavci2
	               |		ПО List_Ucheta.Prodavec_3 = Prodavci2.id_prod
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Prodavci КАК Prodavci3
	               |		ПО List_Ucheta.id_prod4 = Prodavci3.id_prod
	               |ГДЕ
	               |	List_Ucheta.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	И List_Ucheta.id_TT <> 8
	               |	И List_Ucheta.id_TT <> 30
	               |	И (List_Ucheta.id_TT В (&МассивТТ)
	               |			ИЛИ &НеОтбиратьПоТТ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	date
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Str_LU.id_str_LU КАК id_str_LU,
	               |	Str_LU.id_LU КАК id_LU,
	               |	Str_LU.id_tov,
	               |	Str_LU.nach_ost,
	               |	Str_LU.post,
	               |	Str_LU.digust,
	               |	Str_LU.akcia,
	               |	Str_LU.spisanie,
	               |	Str_LU.rashod,
	               |	Str_LU.kon_ost,
	               |	Str_LU.cena_pr,
	               |	Str_LU.summa,
	               |	Str_LU.Zakaz,
	               |	Str_LU.sebest,
	               |	Str_LU.time_fin,
	               |	Str_LU.rashod_kkm,
	               |	Str_LU.cena_kkm,
	               |	Str_LU.spisanie_kach,
	               |	Str_LU.boi,
	               |	Str_LU.bez_etik,
	               |	Str_LU.ne_svej,
	               |	Str_LU.future,
	               |	Str_LU.somn_kach,
	               |	Str_LU.kol_plan_promo,
	               |	Str_LU.rashozdenie,
	               |	Str_LU.Podarok_kkm
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Str_LU КАК Str_LU
	               |ГДЕ
	               |	Str_LU.id_LU В
	               |			(ВЫБРАТЬ
	               |				List_Ucheta.id_LU
	               |			ИЗ
	               |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.List_Ucheta КАК List_Ucheta
	               |			ГДЕ
	               |				List_Ucheta.date МЕЖДУ &ДатаНач И &ДатаКон
	               |				И List_Ucheta.id_TT <> 8
	               |				И List_Ucheta.id_TT <> 30
	               |				И (List_Ucheta.id_TT В (&МассивТТ)
	               |					ИЛИ &НеОтбиратьПоТТ))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_LU,
	               |	id_str_LU
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.ТорговаяТочка.id_TT КАК id_TT
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.ПометкаУдаления = ЛОЖЬ
	               |	И НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	               |	И (ЛистУчета.ТорговаяТочка.id_TT В (&МассивТТ)
	               |			ИЛИ &НеОтбиратьПоТТ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.id_TT,
	               |	СтруктурныеЕдиницы.id_ЦФО
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИД
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	//+++ZEZA
	Запрос.УстановитьПараметр("НеОтбиратьПоТТ", НЕ ЗначениеЗаполнено(МассивТТ));
	Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
	//---ZEZA
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаЛистовУчета = РезультатыЗапроса[0].Выгрузить();
	ТаблицаТабЧастейЛистовУчета = РезультатыЗапроса[1].Выгрузить();
	ТаблицаТабЧастейЛистовУчета.Индексы.Добавить("id_LU");
	
	ТабЛистыВБазе = РезультатыЗапроса[2].Выгрузить();
	ТабТТ = РезультатыЗапроса[3].Выгрузить();
	ТабНоменклатура = РезультатыЗапроса[4].Выгрузить();
	ТабОрганизации = РезультатыЗапроса[5].Выгрузить();
	
	Для Каждого СтрокаЛистУчета Из ТаблицаЛистовУчета Цикл
		СтрокаДокумент = ТабЛистыВБазе.Найти(СтрокаЛистУчета.id_TT, "id_TT");
		Если СтрокаДокумент = Неопределено Тогда
			//ДокОбъект = Документы.ЛистУчета.СоздатьДокумент();
			Продолжить;
		Иначе
			ДокОбъект = СтрокаДокумент.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		ДокОбъект.Товары.Очистить();
		
		//ДокОбъект.Дата = СтрокаЛистУчета.date;
		//ДокОбъект.ИД = СтрокаЛистУчета.id_LU;
		//ДокОбъект.ЗагруженоИзAccess = Истина;
		////ДокОбъект.ПометкаУдаления = Ложь;
		//ДокОбъект.СуммаZОтчета = СтрокаЛистУчета.Z_otchet;
		//ДокОбъект.КоличествоЧеков = СтрокаЛистУчета.Kolvo_check;
		//СтрокаТТ = ТабТТ.Найти("id_TT", СтрокаЛистУчета.id_TT);
		//Если СтрокаТТ = Неопределено Тогда
		//	ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаЛистУчета.id_TT);
		//Иначе
		//	ТорговаяТочка = СтрокаТТ.Ссылка;
		//КонецЕсли;	
		//ДокОбъект.ТорговаяТочка = ТорговаяТочка;
		//ДокОбъект.СуммаТоваров = СтрокаЛистУчета.Summa_tov;
		//ДокОбъект.НачальныйОстаток = СтрокаЛистУчета.Ost_Nach;
		//ДокОбъект.ПоложилиВКонверт = СтрокаЛистУчета.Inkass;
		//ДокОбъект.Безнал = СтрокаЛистУчета.BezNal;
		//ДокОбъект.КонечныйОстаток = СтрокаЛистУчета.Ost_kon;
		//ДокОбъект.Разница = СтрокаЛистУчета.Raznica;
		//ДокОбъект.ТемператураХолодильникаУтром = СтрокаЛистУчета.Temra1;
		//ДокОбъект.ТемператураХолодильникаВечером = СтрокаЛистУчета.Temra2;
		//ДокОбъект.ВремяДоставки = СтрокаЛистУчета.Time_delivery;
		//ДокОбъект.Комментарий = СтрокаЛистУчета.primechanie;
		//
		////Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаЛистУчета.id_sklad);
		////Если Не ЗначениеЗаполнено(Склад) Тогда
		////	Склад = СоздатьИзменитьСклад(СтрокаЛистУчета.id_sklad);
		////КонецЕсли;
		////ДокОбъект.Склад = Склад;
		//
		//СтрокаОрг = ТабОрганизации.Найти("ИД", СтрокаЛистУчета.id_UL);
		//Если СтрокаОрг = Неопределено Тогда
		//	Организация = Неопределено;
		//Иначе	
		//	Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", СтрокаЛистУчета.id_UL);
		//КонецЕсли;	
		////Если НЕ ЗначениеЗаполнено(Организация) Тогда
		////	Организация = СоздатьОрганизацию(СтрокаЛистУчета.id_UL);
		////КонецЕсли;	
		//ДокОбъект.Организация = Организация;
		//ДокОбъект.КоличествоКоробокОтВодителя = СтрокаЛистУчета.Kor_Vod;
		//ДокОбъект.ВозвратПокупателю = СтрокаЛистУчета.return;
		//ДокОбъект.СторноОшибочно = СтрокаЛистУчета.return_m;
		//ДокОбъект.СуммаZОтчетаККМ = СтрокаЛистУчета.Z_otchet_KKM;
		//ГруппаТорговойТочки = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_ЦФО", СтрокаЛистУчета.id_gr);
		//Если НЕ ЗначениеЗаполнено(ГруппаТорговойТочки) Тогда
		//	ГруппаТорговойТочки = СоздатьИзменитьГруппуТорговойТочки(СтрокаЛистУчета.id_gr);
		//КонецЕсли;
		//СтрокаТТ = ТабТТ.Найти("id_ЦФО", СтрокаЛистУчета.id_gr);
		//Если СтрокаТТ = Неопределено Тогда
		//	ГруппаТорговойТочки = СоздатьИзменитьГруппуТорговойТочки(СтрокаЛистУчета.id_gr);
		//Иначе
		//	ГруппаТорговойТочки = СтрокаТТ.Ссылка;
		//КонецЕсли;
		//ДокОбъект.ГруппаТорговойТочки = ГруппаТорговойТочки;
		//ДокОбъект.ПеребитоПоККМ = СтрокаЛистУчета.СумПер_LU;
		//ДокОбъект.СкидкаКопеек = СтрокаЛистУчета.Sk_kopeek;
		//ДокОбъект.ТемператураМорозильникаУтром = СтрокаЛистУчета.Temra1M;
		//ДокОбъект.ТемператураМорозильникаВечером = СтрокаЛистУчета.Temra2M;
		//ДокОбъект.СуммаКупонов = СтрокаЛистУчета.Cupon;
		//ДокОбъект.КоличествоАнкет = СтрокаЛистУчета.Ankets_kolvo;
		//ДокОбъект.ОплатаБонусами = СтрокаЛистУчета.OplataBonus;
		//ДокОбъект.ОплатаБонусамиККМ = СтрокаЛистУчета.OplataBonus_z;
		//ДокОбъект.СредняяЦенаККМ = СтрокаЛистУчета.is_avarage_price;
		//ДокОбъект.СуммаПодарок = СтрокаЛистУчета.Sum_podarok;
		//ДокОбъект.СуммаПодарокККМ = СтрокаЛистУчета.Sum_podarok_kkm;
		
		СтрокиТовары = ТаблицаТабЧастейЛистовУчета.НайтиСтроки(Новый Структура("id_LU", СтрокаЛистУчета.id_LU));
		Для Каждого СтрокаТовар Из СтрокиТовары Цикл
			СтрокаДок = ДокОбъект.Товары.Добавить();
			СтрокаТов = ТабНоменклатура.Найти(СтрокаТовар.id_tov, "id_tov");
			Если СтрокаТов = Неопределено	Тогда
				Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
			Иначе
				Номенклатура = СтрокаТов.Ссылка;
			КонецЕсли;	
			СтрокаДок.Номенклатура = Номенклатура;
			СтрокаДок.НачОстаток = СтрокаТовар.nach_ost;
			СтрокаДок.Поступило = СтрокаТовар.post;
			СтрокаДок.Дегустация = СтрокаТовар.digust;
			СтрокаДок.Подарок = СтрокаТовар.akcia;
			СтрокаДок.СписаниеПоСроку = СтрокаТовар.spisanie;
			СтрокаДок.Расход = СтрокаТовар.rashod;
			СтрокаДок.КонОстаток = СтрокаТовар.kon_ost;
			СтрокаДок.Цена = СтрокаТовар.cena_pr;
			//СтрокаДок.Сумма = СтрокаТовар.summa;
			СтрокаДок.Сумма = ?(СтрокаТовар.rashod = Null, 0, СтрокаТовар.rashod) * ?(СтрокаТовар.cena_pr = Null, 0, СтрокаТовар.cena_pr);
			СтрокаДок.Заказ = СтрокаТовар.Zakaz;
			СтрокаДок.Себестоимость = СтрокаТовар.sebest;
			СтрокаДок.ВремяПоследнегоЧекаПоТовару = СтрокаТовар.time_fin;
			СтрокаДок.РасходККМ = СтрокаТовар.rashod_kkm;
			СтрокаДок.ЦенаККМ = СтрокаТовар.cena_kkm;
			СтрокаДок.СписаниеПоКачеству = СтрокаТовар.spisanie_kach;
			СтрокаДок.Бой = СтрокаТовар.boi;
			СтрокаДок.БезЭтикетки = СтрокаТовар.bez_etik;
			СтрокаДок.Вчерашнее = СтрокаТовар.ne_svej;
			СтрокаДок.Будущее = СтрокаТовар.future;
			СтрокаДок.СомнительноеКачество = СтрокаТовар.somn_kach;
			СтрокаДок.ПланПромо = СтрокаТовар.kol_plan_promo;
			СтрокаДок.Расхождение = СтрокаТовар.rashozdenie;
			СтрокаДок.ПодарокККМ = СтрокаТовар.Podarok_kkm;
			Если ДокОбъект.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
				ДопРасхождение = СтрокаДок.НачОстаток + СтрокаДок.Поступило + СтрокаДок.Расхождение - СтрокаДок.Дегустация - СтрокаДок.Подарок
									- СтрокаДок.СписаниеПоСроку - СтрокаДок.Расход - СтрокаДок.СписаниеПоКачеству - СтрокаДок.Бой - СтрокаДок.КонОстаток; 
				СтрокаДок.Расхождение = СтрокаДок.Расхождение - ДопРасхождение;
			ИначеЕсли ДокОбъект.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
				СтрокаДок.Расхождение = 0;
			КонецЕсли;	
		КонецЦикла;
		ДокОбъект.Товары.Сортировать("Номенклатура");
		
		ДокОбъект.Продавцы.Очистить();
		Если СтрокаЛистУчета.Продавец1КодГруппы <> 26 Тогда
			Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца1) Тогда
				Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца1, "ЧГ=0"), 10));
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					СтрокаТаб.Продавец = Продавец;
				Иначе	
					//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_prod)
				И Найти(НРег(СтрокаЛистУчета.id_prod), "продавец_") = 0 Тогда
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
			КонецЕсли;
		КонецЕсли;	
		Если СтрокаЛистУчета.Продавец2КодГруппы <> 26 Тогда
			Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца2) Тогда
				Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца2, "ЧГ=0"), 10));
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					СтрокаТаб.Продавец = Продавец;
				Иначе	
					//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_promo)
				И Найти(НРег(СтрокаЛистУчета.id_promo), "продавец_") = 0 Тогда
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЛистУчета.Продавец3КодГруппы <> 26 Тогда
			Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца3) Тогда
				Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца3, "ЧГ=0"), 10));
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					СтрокаТаб.Продавец = Продавец;
				Иначе	
					//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.Prodavec_3)
				И Найти(НРег(СтрокаЛистУчета.Prodavec_3), "продавец_") = 0 Тогда
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаЛистУчета.Продавец2КодГруппы <> 26 Тогда
			Если ЗначениеЗаполнено(СтрокаЛистУчета.КодПродавца4) Тогда
				Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаЛистУчета.КодПродавца4, "ЧГ=0"), 10));
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					СтрокаТаб.Продавец = Продавец;
				Иначе	
					//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
					//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаЛистУчета.id_prod4)
				И Найти(НРег(СтрокаЛистУчета.id_prod4), "продавец_") = 0 Тогда
				//СтрокаТаб = ДокОбъект.Продавцы.Добавить();
				//СтрокаТаб.Продавец = Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;	
			КонецЕсли;
		КонецЕсли;	
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		//СсылкаДокумент = СоздатьИзменитьДокументЛистУчета(СтрокаЛистУчета, ТаблицаТабЧастейЛистовУчета);
		//Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
		//	СтрокаДоб = ТаблицаОбработанныеЛисты.Добавить();
		//	СтрокаДоб.Ссылка = СсылкаДокумент;
		//КонецЕсли;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры	

Процедура РасчитатьРазницуПоТоварамДляЛиста(ЛистОбъект, ТаблицаТоваров)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&ДатаКон,
	               |			ТорговаяТочка = &ТорговаяТочка
	               |				И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ДатаОстатков,
	               |			Склад.Владелец = &ТорговаяТочка
	               |				И Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки";
				   
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ЛистОбъект.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(ЛистОбъект.Дата) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТорговаяТочка", ЛистОбъект.ТорговаяТочка);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабЦены = Результаты[0].Выгрузить();
	ТабОстатки = Результаты[1].Выгрузить();
	
	СуммаРасходаПоТоварам = 0;
	СуммаНачОстаток = 0;
	СуммаПоступление = 0;
	СуммаДегустация = 0;
	СуммаСписание = 0;
	СуммаСписаниеПоКачеству = 0;
	СуммаБой = 0;
	СуммаАкция = 0;
	СуммаРазница = 0;
	СуммаКонОстаток = 0;
	Для Каждого СтрокаТовар Из ТаблицаТоваров Цикл
		СтрокаЦена = ТабЦены.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		Если СтрокаЦена <> Неопределено Тогда
			Цена = СтрокаЦена.Цена;
		Иначе
			Продолжить;
		КонецЕсли;
		СтрокаОстаток = ТабОстатки.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		Если СтрокаОстаток <> Неопределено Тогда
			НачОстаток = СтрокаОстаток.КоличествоОстаток;
		Иначе
			НачОстаток = 0;
		КонецЕсли;	
		КонОстаток = НачОстаток + СтрокаТовар.Поступило + СтрокаТовар.Разница - СтрокаТовар.Продано - СтрокаТовар.Дегустация - СтрокаТовар.Списание - СтрокаТовар.СписаниеПоКачеству
						- СтрокаТовар.Бой - СтрокаТовар.Акция;
		СуммаРасходаПоТоварам = СуммаРасходаПоТоварам + Цена * СтрокаТовар.Продано;
		СуммаНачОстаток = СуммаНачОстаток + Цена * НачОстаток;
		СуммаПоступление = СуммаПоступление + Цена * СтрокаТовар.Поступило;
		СуммаДегустация = СуммаДегустация + Цена * СтрокаТовар.Дегустация;
		СуммаСписание = СуммаСписание + Цена * СтрокаТовар.Списание;
		СуммаСписаниеПоКачеству = СуммаСписаниеПоКачеству + Цена * СтрокаТовар.СписаниеПоКачеству;
		СуммаБой = СуммаБой + Цена * СтрокаТовар.Бой;
		СуммаАкция = СуммаАкция + Цена * СтрокаТовар.Акция;
		СуммаРазница = СуммаРазница + Цена * СтрокаТовар.Разница;
		СуммаКонОстаток = СуммаКонОстаток + Цена * КонОстаток;
	КонецЦикла;	
	
	ЛистОбъект.РазницаПоТоварам = СуммаНачОстаток + СуммаПоступление + ЛистОбъект.НачальныйОстаток - СуммаБой - СуммаДегустация - СуммаСписание - СуммаСписаниеПоКачеству
						- СуммаАкция + СуммаРазница - ЛистОбъект.СуммаИнкассации - СуммаКонОстаток - ЛистОбъект.КонечныйОстаток - ЛистОбъект.ОплатаБаллами;
	
КонецПроцедуры	

Процедура ПрогрузитьДанныеПоТерминаламИзЧеков(ДатаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочиеМеста.Ссылка КАК РабочееМесто,
	               |	РабочиеМеста.ИД,
	               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал,
	               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Касса
	               |ИЗ
	               |	Справочник.РабочиеМеста КАК РабочиеМеста
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаОбработки, ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
	               |		ПО РабочиеМеста.Ссылка = ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто
	               |ГДЕ
	               |	РабочиеМеста.НеПривязыватьТерминалыАвтоматомПоЧекам = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Терминалы.Ссылка КАК Терминал,
	               |	Терминалы.ИД
	               |ИЗ
	               |	Справочник.Терминалы КАК Терминалы";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабРабочиеМеста = Результаты[0].Выгрузить();
	ТабКешТерминалы = Результаты[1].Выгрузить();
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT
				|	dbo_Checks.CashId as CashId,
				|	MAX(dbo_Checks.terminal_bank) as terminal_bank
				|FROM
				|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
				|WHERE
				|	dbo_Checks.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|GROUP BY
				|	dbo_Checks.CashId";
				
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			ИдТерминал = СокрЛП(Rs.Fields("terminal_bank").Value);
			Если ЗначениеЗаполнено(ИдТерминал) Тогда
				СтрокаКешТерминал = ТабКешТерминалы.Найти(ИдТерминал, "ИД");
				Если СтрокаКешТерминал <> Неопределено Тогда
					СтрокаРабМесто = ТабРабочиеМеста.Найти(Rs.Fields("CashId").Value, "ИД");
					Если СтрокаРабМесто <> Неопределено Тогда
						Если СтрокаРабМесто.Терминал <> СтрокаКешТерминал.Терминал Тогда
							Запись = РегистрыСведений.ПривязкиОборудованияКРабочимМестам.СоздатьМенеджерЗаписи();
							Запись.Период = ДатаОбработки;
							Запись.РабочееМесто = СтрокаРабМесто.РабочееМесто;
							Запись.Касса = СтрокаРабМесто.Касса;
							Запись.Терминал = СтрокаКешТерминал.Терминал;
							Запись.Записать();
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

Функция ПолучитьТаблицуПродавцовПоВыходам(ДатаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Код,
	               |	ФизическиеЛица.Промоутер
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	               |	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиАутсорсинг.Ссылка,
	               |	СотрудникиАутсорсинг.ИД
	               |ИЗ
	               |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки > 0
	               |	И СтруктурныеЕдиницы.ПометкаУдаления = ЛОЖЬ";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПродавцы = Результаты[0].Выгрузить();
	ТабПродавцы.Индексы.Добавить("Код");
	
	ТабАутсорсинг = Результаты[1].Выгрузить();
	ТабАутсорсинг.Индексы.Добавить("ИД");
	
	ТабМагазины = Результаты[2].Выгрузить();
	ТабМагазины.Индексы.Добавить("НомерТочки");
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT VZ_Prihod.CashierID,
					|VZ_Prihod.DateTimeAdd DatePrihod,
					|VZ_Prihod.ShopNo
					|INTO #VT_Prihodi
					|FROM (SELECT CT.CashierID
					|	,CT.DateTimeAdd
					|	,CT.ShopNo
					|	,ROW_NUMBER() OVER (PARTITION BY CashierID, ShopNo Order by DateTimeAdd) as rn
					|FROM [srv-sql04].[frontol].[dbo].[CashierTime]  as CT (nolock)
					|WHERE Convert(date, CT.DateTimeAdd) = " + ВнешниеДанные.ФорматПоля(ДатаОбработки, Истина) + " and CT.Flag = 1) as VZ_Prihod
					|WHERE VZ_Prihod.rn = 1

					|SELECT
					|	VZ_Full.CashierID,
					|	VZ_Full.DatePrihod,
					|	VZ_Full.DateUhod,
					|	VZ_Full.ShopNo
					|FROM (SELECT 
					|VZ_Prihod.CashierID,
					|VZ_Prihod.DatePrihod,
					|CT.DateTimeAdd as DateUhod,
					|VZ_Prihod.ShopNo,
					|ROW_NUMBER() OVER (PARTITION BY VZ_Prihod.CashierID, VZ_Prihod.ShopNo Order by CT.DateTimeAdd desc) as rn
					|FROM #VT_Prihodi as VZ_Prihod
					|LEFT OUTER JOIN [srv-sql04].[frontol].[dbo].[CashierTime] as CT (nolock)
					|		ON VZ_Prihod.DatePrihod <= CT.DateTimeAdd
					|			and DATEDIFF(MINUTE, VZ_Prihod.DatePrihod, CT.DateTimeAdd) < 1200
					|			and VZ_Prihod.ShopNo = CT.ShopNo
					|			and VZ_Prihod.CashierID = CT.CashierID
					|			and CT.Flag = 0) as VZ_Full
					|WHERE VZ_Full.rn = 1
					|";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Сотрудник");
	ТабДанные.Колонки.Добавить("Магазин");
	ТабДанные.Колонки.Добавить("Промоутер", Новый ОписаниеТипов("Булево"));
	ТабДанные.Колонки.Добавить("Аутсорсер", Новый ОписаниеТипов("Булево"));
	ТабДанные.Колонки.Добавить("ДатаПрихода");
	ТабДанные.Колонки.Добавить("ДатаУхода");
	ТабДанные.Колонки.Добавить("КолвоЧасов");
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			КодПродавец = Rs.Fields("CashierID").Value;
			ЭтоПромоутер = Ложь;
			ЭтоАутсорсер = Ложь;
			Если ЗначениеЗаполнено(КодПродавец) Тогда
				Продавец = Неопределено;
				СтрокаТабПродавцы = ТабПродавцы.Найти(Прав("0000000000" + Формат(КодПродавец, "ЧГ=0"), 10), "Код");
				Если СтрокаТабПродавцы = Неопределено Тогда
					СтрокаТабАутсорс = ТабАутсорсинг.Найти(КодПродавец, "ИД");
					Если СтрокаТабАутсорс <> Неопределено Тогда
						Продавец = СтрокаТабАутсорс.Ссылка;
						ЭтоАутсорсер = Истина;
					КонецЕсли;	
				Иначе
					Продавец = СтрокаТабПродавцы.Ссылка;
					ЭтоПромоутер = СтрокаТабПродавцы.Промоутер;
				КонецЕсли;
				Если ЗначениеЗаполнено(Продавец) Тогда
					СтрокаДоб = ТабДанные.Добавить();
					СтрокаДоб.Сотрудник = Продавец;
					СтрокаДоб.ДатаПрихода = Rs.Fields("DatePrihod").Value;
					СтрокаДоб.ДатаУхода = Rs.Fields("DateUhod").Value;
					СтрокаДоб.Промоутер = ЭтоПромоутер;
					СтрокаДоб.Аутсорсер = ЭтоАутсорсер;
					СтрокаМагазин = ТабМагазины.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
					Если СтрокаМагазин <> Неопределено Тогда
						СтрокаДоб.Магазин = СтрокаМагазин.Ссылка;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Для Каждого СтрокаТаб Из ТабДанные Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаУхода) Тогда
			СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода;
		КонецЕсли;
		Если Минута(СтрокаТаб.ДатаПрихода) >= 30 Тогда
			СтрокаТаб.ДатаПрихода = НачалоДня(СтрокаТаб.ДатаПрихода) + (Час(СтрокаТаб.ДатаПрихода) + 1) * 3600;
		Иначе	
			СтрокаТаб.ДатаПрихода = НачалоДня(СтрокаТаб.ДатаПрихода) + Час(СтрокаТаб.ДатаПрихода) * 3600;
		КонецЕсли;
		
		Если Минута(СтрокаТаб.ДатаУхода) >= 30 Тогда
			СтрокаТаб.ДатаУхода = НачалоДня(СтрокаТаб.ДатаУхода) + (Час(СтрокаТаб.ДатаУхода) + 1) * 3600;
		Иначе	
			СтрокаТаб.ДатаУхода = НачалоДня(СтрокаТаб.ДатаУхода) + Час(СтрокаТаб.ДатаУхода) * 3600;
		КонецЕсли;
		СтрокаТаб.КолвоЧасов = Цел((СтрокаТаб.ДатаУхода - СтрокаТаб.ДатаПрихода) / 3600);
	КонецЦикла;	
	
	Возврат ТабДанные;
	
КонецФункции	

Процедура ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам(ДатаОбработки, МассивНомерМагазина = Неопределено, МассивID_TT = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЧислоСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Если ДатаОбработки >= '20171001' Тогда
		ТабВыходыСотрудников = ПолучитьТаблицуПродавцовПоВыходам(ДатаОбработки);
	КонецЕсли;	
	
	ЗапросТТ = Новый Запрос();
	ЗапросТТ.УстановитьПараметр("ЕстьОтборПоТТ"	, ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, Истина, Ложь));
	ЗапросТТ.УстановитьПараметр("МассивId_TT"	, МассивID_TT);
	ЗапросТТ.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаОбработки));
	ЗапросТТ.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦФО,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтруктурныеЕдиницы.Организация
	|		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	СтруктурныеЕдиницы.Терминал,
	|	СкладыТорговыхТочекСрезПоследних.Склад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаНач, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыТорговыхТочек.СрезПоследних(&ДатаНач, ) КАК СкладыТорговыхТочекСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = СкладыТорговыхТочекСрезПоследних.ТорговаяТочка
	|ГДЕ
	//+++АК KIRN 2018.03.06 ИП-00018035
	|	(СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток) И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка))
	//---АК KIRN 
	|	И (НЕ &ЕстьОтборПоТТ
	|			ИЛИ СтруктурныеЕдиницы.id_TT В (&МассивId_TT))";	
	ТабТТ = ЗапросТТ.Выполнить().Выгрузить();
	
	СтрокаОтбораТТ = "(9999999)";
	Если ТипЗнч(МассивНомерМагазина) = Тип("Массив") Тогда
		Для Каждого ТекТТ Из МассивНомерМагазина Цикл
			Если ЗначениеЗаполнено(ТекТТ) Тогда
				СтрокаОтбораТТ = СтрокаОтбораТТ + ", (" + Формат(ТекТТ, "ЧГ=0") + ")";
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	

	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_tt"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Организация"		, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабДанные.Колонки.Добавить("СтруктурнаяЕдиница"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("ЦФО"				, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Отчет"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаНал"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Сумма"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозвратаНал"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозврата201Нал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозвратаБезНал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Безнал"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ОплатаБаллами"			, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СкидкаКопеек"			, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Возврат"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаБНал"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаИнкассации"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("НачальныйОстаток"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ВремяДоставки"			, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("КонечныйОстаток"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ТемператураХолодильникаУтром"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураХолодильникаВечером"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураМорозильникаУтром"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураМорозильникаВечером"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka
				|CREATE TABLE
				|#VT_ShopNo_Zagruzka (ShopNo int);
				|INSERT INTO #VT_ShopNo_Zagruzka
				|VALUES " + СтрокаОтбораТТ + "
				|SELECT TT._Fld758 as id_TT into #VT_TT_Zagruzka FROM IzbenkaFin.dbo._Reference42 as TT (nolock) WHERE TT._Fld2756 IN (SELECT tab.shopno From #VT_ShopNo_Zagruzka as tab)
				|
				|
				|SELECT Ch.ShopNo, Ch.CashID,
				|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.BaseSum ELSE 0 END) as Summa,
				|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.SummBank ELSE 0 END) as Beznal,
				|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummCash ELSE 0 END) as SummaVozvratNal,
				|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummBank ELSE 0 END) as SummaVozvratBezNal,
				|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummCash WHEN Ch.OperationType = 211 THEN Ch.SummCash * -1 ELSE 0 END) as SummaVozvrat201Nal,
				|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummBank WHEN Ch.OperationType = 211 THEN Ch.SummBank * -1 ELSE 0 END) as SummaVozvrat201BezNal,
				|  SUM(CASE WHEN Ch.OperationType IN (1, 3, 202, 203) THEN Ch.SummBonus ELSE 0 END) as SummaBallami,
				|  SUM(ISNULL(Chl.SkidkaKopeek, 0)) as SkidkaKopeek
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
				|LEFT OUTER JOIN (SELECT Chl.CheckUID,
				|  				SUM(CASE WHEN Chl.OperationType_cl IN (1, 3, 202, 203) and Chl.BaseSum <> 0 THEN Chl.BaseSum - Chl.BasePrice * Chl.Quantity ELSE 0 END * (-1)) as SkidkaKopeek
				|  				FROM [SMS_IZBENKA].[dbo].[Checkline] as Chl (nolock) where Chl.date_ch = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' 
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Chl.id_tt_cl IN (SELECT tab.id_TT FROM #VT_TT_Zagruzka as tab)", "") + "
				|					GROUP BY Chl.CheckUID) as Chl
				|  				ON Ch.CheckUID = Chl.CheckUID
				|where Ch.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType IN (1, 3, 201, 211, 202, 203) 
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|GROUP BY Ch.ShopNo, Ch.CashID order by Ch.ShopNo
				|
				|
				|SELECT Ch.ShopNo, Ch.CashID, Ch.CheckUID, CASE WHEN Ch.OperationType = 201 THEN 1 ELSE 0 END as Is201,
				|  Ch.SummCash as SummaVozvrat201Nal,
				|  Ch.SummBank as SummaVozvrat201BezNal,
				|  Chl.SummaPoNDS10 as SummaPoNDS10,
				|  Chl.SummaPoNDS18 as SummaPoNDS18
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
				|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid,
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
				|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
				|						WHERE Chl.date_ch = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl IN (3, 201, -3, -201)
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Chl.id_tt_cl IN (SELECT tab.id_TT FROM #VT_TT_Zagruzka as tab)", "") + "
				|						GROUP BY Chl.CheckUid) as Chl ON Ch.CheckUID = Chl.CheckUid
				|	LEFT OUTER JOIN (SELECT TTSpr._Fld2756 as ShopNo,
				|						DATEADD(YEAR, -2000, CONVERT(date, TTSpr._Fld4045)) as DataPerehod,
				|						CASE WHEN (TTSpr._Fld3794RRef = 0xB05D005056A0010611E38E76B97A4763) THEN 1 ELSE 0 END as IsMORegion,
				|						ROW_NUMBER() OVER (PARTITION BY TTSpr._Fld2756 order by TTSpr._IDRRef) as rn
				|					FROM IzbenkaFin.dbo._Reference42 as TTSpr (nolock)) as VZ_TTSpr
				|		ON Ch.ShopNo = VZ_TTSpr.ShopNo and VZ_TTSpr.rn = 1
				|where Ch.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType IN (3, 201)
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				//| and ((Ch.SummCash >= 1000 or Ch.SummBank > 0) or (Ch.SummCash >= 0 and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <> '0001-01-01' and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <= Ch.CloseDate and ISNULL(VZ_TTSpr.IsMORegion, 0) = 1))
				//| and ((Ch.SummCash >= 1000 or Ch.SummBank > 0) or (Ch.SummCash >= 0 and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <> '0001-01-01' and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <= Ch.CloseDate))
				|;
				|SELECT Chl.CheckUid As CheckUid, CAST(ArticleBin2UID.UID as nvarchar(50)) as UID, SUM(Chl.Quantity * -1) as Qnt,
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
				|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
				|						WHERE Chl.date_ch = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl IN (201, 3, -201, -3)
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Chl.id_tt_cl IN (SELECT tab.id_TT FROM #VT_TT_Zagruzka as tab)", "") + "
				|						GROUP BY Chl.CheckUid, CAST(ArticleBin2UID.UID as nvarchar(50))
				|;
				|SELECT
				|	dbo_Pokazat_800_kod.дата,
				|	dbo_Pokazat_800_kod.Kon_ost,
				|	dbo_Pokazat_800_kod.Inkass,
				|	dbo_Pokazat_800_kod.Vremya,
				|	dbo_Pokazat_800_kod.Temra_1,
				|	dbo_Pokazat_800_kod.Temra_2,
				|	dbo_Pokazat_800_kod.Temra_1m,
				|	dbo_Pokazat_800_kod.Temra_2m,
				|	dbo_Pokazat_800_kod.ShopNo
				|FROM
				|	SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
				|WHERE
				|	dbo_Pokazat_800_kod.дата = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "'
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and dbo_Pokazat_800_kod.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|;
				|
				|SELECT     chl.date_ch AS День,  M2.dbo.tt.N AS Shopno, MAX(CASE WHEN datepart(hour, chl.time_ch) < 12 THEN 1 ELSE 0 END) AS Early12, MIN(CAST(chl.time_ch as datetime)) as FirstCheck, MAX(CAST(chl.time_ch as datetime)) as LastCheck,
					|					  CASE WHEN abs(Quantity) > 10 THEN CONVERT(bigint, abs(Quantity)) 
					|					  ELSE CONVERT(bigint, abs(Quantity * 1000)) END AS id_prod_1C
					|FROM         [SMS_IZBENKA].dbo.CheckLine AS chl WITH (nolock) INNER JOIN
					|					  IzbenkaFin.dbo._Reference39 AS hr WITH (nolock) ON hr._Code = CASE WHEN abs(Quantity) > 10 THEN CONVERT(bigint, abs(Quantity)) ELSE CONVERT(bigint, 
					|					  abs(Quantity * 1000)) END
					|					  INNER JOIN
					|					  M2.dbo.tt WITH (nolock) ON M2.dbo.tt.id_TT = chl.id_tt_cl
					|WHERE     (ABS(chl.Quantity) <> 1) AND (ABS(chl.Quantity) <> 0) AND (chl.OperationType_cl IN (800)) AND (chl.date_ch = " + ВнешниеДанные.ФорматПоля(ДатаОбработки, Истина) + ") AND 
					|					  (chl.id_tov_cl = 1310)
					|GROUP BY chl.date_ch,  M2.dbo.tt.N, CASE WHEN abs(Quantity) > 10 THEN CONVERT(bigint, abs(Quantity)) 
					|					  ELSE CONVERT(bigint, abs(Quantity * 1000)) END
				|
				|;
				|SELECT
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime)) as Дата,
				|   	dbo_Shifts.CashID,
				|   	SUM(dbo_Checks.BaseSum + CASE WHEN ABS((dbo_Checks.SummCash + dbo_Checks.SummBank + dbo_Checks.SummBonus) - dbo_Checks.BaseSum) BETWEEN 0.01 AND 1 THEN (dbo_Checks.SummCash + dbo_Checks.SummBank + dbo_Checks.SummBonus) - dbo_Checks.BaseSum ELSE 0 END) as BaseSum,
				|   	SUM(dbo_Checks.SummBonus) as SummBonus,
				|   	dbo_Checks.ShopNo,
				|   	MAX(dbo_Shifts.Number) as Number
				|   FROM
				|   	SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
				|   		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
				|   	ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
				|   WHERE
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime)) = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "'
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and dbo_Checks.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|   	and dbo_Checks.OperationType > 0 and (dbo_Checks.BaseSum - dbo_Checks.SummBonus) > 0
				|   
				|   GROUP BY
				|   	dbo_Shifts.CashID,
				|   	dbo_Checks.ShopNo,
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime))
				|
				|IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka";
				
	//ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДаннымиПоКассам = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("id_tt"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("CashID"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("Сумма"					, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозвратаНал"			, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозврата201Нал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозвратаБезНал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("Безнал"					, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("ОплатаБаллами"			, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СкидкаКопеек"				, ТипЧислоСумма);
	
	ТаблицаСДаннымиПоКассамВозвраты = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("id_tt"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("CashID"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("Is201"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("CheckUID"	, Новый ОписаниеТипов("Строка"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозврата201Нал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс10"				, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс18"				, ТипЧислоСумма);
	
	ТабТоварыПоВозвратам = Новый ТаблицаЗначений();
	ТабТоварыПоВозвратам.Колонки.Добавить("CheckUID"	, Новый ОписаниеТипов("Строка"));
	ТабТоварыПоВозвратам.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабТоварыПоВозвратам.Колонки.Добавить("Сумма"		, ТипЧислоСумма);
	ТабТоварыПоВозвратам.Колонки.Добавить("Количество"	, Новый ОписаниеТипов("Число"));
	ТабТоварыПоВозвратам.Колонки.Добавить("СуммаПоНдс10"				, ТипЧислоСумма);
	ТабТоварыПоВозвратам.Колонки.Добавить("СуммаПоНдс18"				, ТипЧислоСумма);

	ТабПоказатели = Новый ТаблицаЗначений();
	ТабПоказатели.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабПоказатели.Колонки.Добавить("Kon_ost", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Inkass", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Vremya", Новый ОписаниеТипов("Дата"));
	ТабПоказатели.Колонки.Добавить("Temra_1", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_2", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_1m", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_2m", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	ТабПродавцы = Новый ТаблицаЗначений();
	ТабПродавцы.Колонки.Добавить("День", Новый ОписаниеТипов("Дата"));
	ТабПродавцы.Колонки.Добавить("id_prod_1C", Новый ОписаниеТипов("Число"));
	ТабПродавцы.Колонки.Добавить("ВышелРанне12", Новый ОписаниеТипов("Число"));
	ТабПродавцы.Колонки.Добавить("ДатаПервого", Новый ОписаниеТипов("Дата"));
	ТабПродавцы.Колонки.Добавить("ДатаПоследнего", Новый ОписаниеТипов("Дата"));
	ТабПродавцы.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	ТабЗОтчеты = Новый ТаблицаЗначений();
	ТабЗОтчеты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабЗОтчеты.Колонки.Добавить("Number", Новый ОписаниеТипов("Строка"));
	ТабЗОтчеты.Колонки.Добавить("CashID", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("BaseSum", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("SummBonus", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТТ = ТабТТ.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			СтрокаДоб = ТаблицаСДаннымиПоКассам.Добавить();
			СтрокаДоб.id_tt 		= СтрокаТТ.id_tt;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.Сумма 		= Rs.Fields("Summa").Value;   
			СтрокаДоб.СуммаВозвратаНал 			= Rs.Fields("SummaVozvratNal").Value;
			СтрокаДоб.СуммаВозврата201Нал 		= Rs.Fields("SummaVozvrat201Nal").Value;
			СтрокаДоб.СуммаВозвратаБезНал 		= Rs.Fields("SummaVozvratBezNal").Value;
			СтрокаДоб.СуммаВозврата201БезНал 	= Rs.Fields("SummaVozvrat201BezNal").Value;
			СтрокаДоб.Безнал 		= Rs.Fields("Beznal").Value;
			СтрокаДоб.ОплатаБаллами = Rs.Fields("SummaBallami").Value;
			СтрокаДоб.СкидкаКопеек 	= Rs.Fields("SkidkaKopeek").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТТ = ТабТТ.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			СтрокаДоб = ТаблицаСДаннымиПоКассамВозвраты.Добавить();
			СтрокаДоб.id_tt 		= СтрокаТТ.id_tt;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.CheckUID 		= СокрЛП(Rs.Fields("CheckUID").Value);
			СтрокаДоб.Is201 		= СокрЛП(Rs.Fields("Is201").Value);
			СтрокаДоб.СуммаВозврата201Нал 		= Rs.Fields("SummaVozvrat201Nal").Value;
			СтрокаДоб.СуммаВозврата201БезНал 	= Rs.Fields("SummaVozvrat201BezNal").Value;
			СтрокаДоб.СуммаПоНдс10 	= Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаПоНдс18 	= Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабТоварыПоВозвратам.Добавить();
			СтрокаДоб.CheckUID 		= СокрЛП(Rs.Fields("CheckUID").Value);
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("UID").Value));
			СтрокаДоб.Количество 	= Rs.Fields("Qnt").Value;
			СтрокаДоб.СуммаПоНдс10 	= Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаПоНдс18 	= Rs.Fields("SummaPoNDS18").Value;
			СтрокаДоб.Сумма = СтрокаДоб.СуммаПоНдс10 + СтрокаДоб.СуммаПоНдс18;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПоказатели.Добавить();
			СтрокаДоб.Дата 		= Rs.Fields("Дата").Value;
			СтрокаДоб.Kon_ost 		= Rs.Fields("Kon_ost").Value;
			СтрокаДоб.Inkass 		= Rs.Fields("Inkass").Value;
			СтрокаДоб.Vremya 	= Rs.Fields("Vremya").Value;
			СтрокаДоб.Temra_1 	= Rs.Fields("Temra_1").Value;
			СтрокаДоб.Temra_2 	= Rs.Fields("Temra_2").Value;
			СтрокаДоб.Temra_1m 	= Rs.Fields("Temra_1m").Value;
			СтрокаДоб.Temra_2m 	= Rs.Fields("Temra_2m").Value;
			СтрокаДоб.ShopNo 	= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПродавцы.Добавить();
			СтрокаДоб.День 		= Rs.Fields("День").Value;
			СтрокаДоб.id_prod_1C 		= Rs.Fields("id_prod_1C").Value;
			СтрокаДоб.ВышелРанне12 		= (Rs.Fields("Early12").Value = 1);
			СтрокаДоб.ДатаПервого 		= (Rs.Fields("FirstCheck").Value);
			СтрокаДоб.ДатаПоследнего	= (Rs.Fields("LastCheck").Value);
			СтрокаДоб.ShopNo 	= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабЗОтчеты.Добавить();
			СтрокаДоб.Дата 			= Rs.Fields("Дата").Value;
			СтрокаДоб.Number 		= Rs.Fields("Number").Value;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.BaseSum 		= Rs.Fields("BaseSum").Value;
			СтрокаДоб.SummBonus 	= Rs.Fields("SummBonus").Value;
			СтрокаДоб.ShopNo 		= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ТабТемп = ТаблицаСДаннымиПоКассам.Скопировать();
	ТабТемп.Свернуть("id_tt", "Сумма, СуммаВозвратаНал, СуммаВозврата201Нал, СуммаВозвратаБезНал, СуммаВозврата201БезНал, Безнал, ОплатаБаллами, СкидкаКопеек");
	
	Для Каждого СтрокаТемп Из ТабТемп Цикл
		ЗаполнитьЗначенияСвойств(ТабДанные.Добавить(), СтрокаТемп);
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИД
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Терминалы.Ссылка) КАК Терминал,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Терминалы.Ссылка) КАК КоличествоТерминалов,
	               |	Терминалы.Владелец КАК ТорговаяТочка
	               |ИЗ
	               |	Справочник.Терминалы КАК Терминалы
	               |ГДЕ
				   |	" + ?(МассивID_TT = Неопределено, "ИСТИНА", "Терминалы.Владелец.id_TT В (&МассивId_TT)") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Терминалы.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Ссылка КАК Ссылка,
	               |	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	               //|	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
				   |	" + ?(МассивID_TT = Неопределено, "", "И ЛистУчета.ТорговаяТочка.id_TT В (&МассивId_TT)") + "
	               |;
	               |
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И Номенклатура.id_tov > 0
				   |	И Номенклатура.БезОстатков = ЛОЖЬ
				   |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка,
	               |	ВЫБОР
		           |		КОГДА ПОДСТРОКА(ОсновныеСредства.КодКассыВУНФ, 1, 1) <> """"
		           |			ТОГДА ОсновныеСредства.КодКассыВУНФ
		           |		ИНАЧЕ ОсновныеСредства.ЗаводскойНомер
		           |	КОНЕЦ КАК ЗаводскойНомер
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.ПометкаУдаления  = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЛистУчета.КонечныйОстаток,
				   |	ЛистУчета.ТорговаяТочка,
				   |	ЛистУчета.ТорговаяТочка.id_tt КАК id_tt
				   |ИЗ
				   |	Документ.ЛистУчета КАК ЛистУчета
				   |ГДЕ
				   |	ЛистУчета.Проведен = ИСТИНА
				   |	И НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -1)
				   |	" + ?(МассивID_TT = Неопределено, "", "И ЛистУчета.ТорговаяТочка.id_tt В (&МассивId_TT)") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПродавцов.Сотрудник,
				   |	ТабельРаботыПродавцов.ТорговаяТочка,
				   |	ТабельРаботыПродавцов.СвойствоПродавца,
				   |	ТабельРаботыПродавцов.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
				   |ГДЕ
				   |	ТабельРаботыПродавцов.Период = &ДатаНач
				   |	" + ?(МассивID_TT = Неопределено, "", "И ТабельРаботыПродавцов.ТорговаяТочка.id_tt В (&МассивId_TT)") + "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
				   |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал
				   |ИЗ
				   |	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаКон, ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
				   |ГДЕ
				   |	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.НомерРабочегоМеста = ""1""
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ФизическиеЛица.Ссылка,
				   |	ФизическиеЛица.Код,
				   |	ФизическиеЛица.Промоутер,
				   |	ФизическиеЛица.ВнештатныйСотрудник
				   |ИЗ
				   |	Справочник.ФизическиеЛица КАК ФизическиеЛица
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СотрудникиАутсорсинг.Ссылка,
				   |	СотрудникиАутсорсинг.ИД
				   |ИЗ
				   |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СоответствиеОбъектРольСрезПоследних.Объект КАК ТорговаяТочка,
				   |	МАКСИМУМ(Пользователи.Ссылка) КАК Пользователь
				   |ИЗ
				   |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаСрезаРоли, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
				   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				   |			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
				   |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
				   |			И (РолиПользователейСоставРоли.НомерСтроки = 1)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СоответствиеОбъектРольСрезПоследних.Объект
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыКассиров.Сотрудник,
				   |	ТабельРаботыКассиров.ТорговаяТочка,
				   |	ТабельРаботыКассиров.КоличествоЧасов,
				   |	ТабельРаботыКассиров.СвойствоСотрудника,
				   |	ТабельРаботыКассиров.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
				   |ГДЕ
				   |	ТабельРаботыКассиров.Период = &ДатаНач
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыУборщиц.Сотрудник,
				   |	ТабельРаботыУборщиц.ТорговаяТочка,
				   |	ТабельРаботыУборщиц.КоличествоЧасов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
				   |ГДЕ
				   |	ТабельРаботыУборщиц.Период = &ДатаНач
				   //+++АК mika 2018.04.06 ИП-00018000
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПекарей.Сотрудник,
				   |	ТабельРаботыПекарей.ТорговаяТочка,
				   |	ТабельРаботыПекарей.КоличествоЧасов,
				   |	ТабельРаботыПекарей.СвойствоСотрудника,
				   |	ТабельРаботыПекарей.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПекарей КАК ТабельРаботыПекарей
				   |ГДЕ
				   |	ТабельРаботыПекарей.Период = &ДатаНач";
				   //---АК mika ИП-00018000
				   
	Запрос.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон"		, КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаСрезаРоли", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("МассивId_TT"	, МассивID_TT);
	Запрос.УстановитьПараметр("МассивНомера", МассивНомерМагазина);
	Запрос.УстановитьПараметр("ККМ"			, "%ККМ%");
	Запрос.УстановитьПараметр("ЧПМ"			, "%ЧПМ%");
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если ТабДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	ТабОрганизации 	= Результаты[0].Выгрузить();
	ТабТерминалы 	= Результаты[1].Выгрузить();
	ТабЛистыУчета 	= Результаты[2].Выгрузить();
	ТабНоменклатура = Результаты[3].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");
	ТабКешККМ 		= Результаты[4].Выгрузить();
	ТабЛистыУчетаПрошлыйДень 	= Результаты[5].Выгрузить();
	ТабСтПродавцы 				= Результаты[6].Выгрузить();
	ТабТерминалы				= Результаты[7].Выгрузить();
	ТабКешПродавцы					= Результаты[8].Выгрузить();
	ТабКешПродавцы.Индексы.Добавить("Код");
	ТабСотрудникиАутсорс = Результаты[9].Выгрузить();
	ТабПривязкиПоРолям = Результаты[10].Выгрузить();
	ТабТабельКассиры = Результаты[11].Выгрузить();
	ТабТабельУборщицы = Результаты[12].Выгрузить();
	ТабТабельПекари   = Результаты[13].Выгрузить(); //+++АК mika 2018.04.06 ИП-00018000
	
	Для Каждого СтрокаПоказатель Из ТабПоказатели Цикл
		СтрокаТТ = ТабТТ.Найти(СтрокаПоказатель.ShopNo, "НомерТочки");
		СтрокаДанные = ТабДанные.Найти(СтрокаТТ.id_tt, "id_tt");
		Если СтрокаДанные = Неопределено Тогда
			СтрокаДанные = ТабДанные.Добавить();
			СтрокаДанные.id_TT = СтрокаТТ.id_tt;
		КонецЕсли;
		СтрокаЛистПрошлыйПериод = ТабЛистыУчетаПрошлыйДень.Найти(СтрокаТТ.id_tt, "id_tt");
		Если СтрокаЛистПрошлыйПериод <> Неопределено Тогда
			СтрокаДанные.НачальныйОстаток = СтрокаЛистПрошлыйПериод.КонечныйОстаток;
		КонецЕсли;	
		СтрокаДанные.ВремяДоставки 		= СтрокаПоказатель.Vremya;
		СтрокаДанные.КонечныйОстаток 	= СтрокаПоказатель.Kon_ost;
		СтрокаДанные.СуммаИнкассации 	= СтрокаПоказатель.Inkass;
		СтрокаДанные.ТемператураХолодильникаУтром 	= СтрокаПоказатель.Temra_1;
		СтрокаДанные.ТемператураХолодильникаВечером = СтрокаПоказатель.Temra_2;
		СтрокаДанные.ТемператураМорозильникаУтром 	= СтрокаПоказатель.Temra_1m;
		СтрокаДанные.ТемператураМорозильникаВечером = СтрокаПоказатель.Temra_2m;
		
	КонецЦикла;	
	
	ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокаТТ = ТабТТ.Найти(СтрокаДанные.id_TT, "id_TT");
		Если СтрокаТТ = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаДанные.id_TT) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПродавцы = ТабПродавцы.НайтиСтроки(Новый Структура("ShopNo", СтрокаТТ.НомерТочки));
		
		//Если НЕ ЗначениеЗаполнено(СтрокаДанные.ЕстьЧек800) И СтрокиПродавцы.Количество() = 0 Тогда
		//	???ZEZA Продолжить; //грузим всегда - написал Валера в письме от 17.02.2014
		//КонецЕсли;
		
		СтрокаДанные.СтруктурнаяЕдиница = СтрокаТТ.Ссылка;
		//СтрокаТТЮЛ = ТабТТЮЛ.Найти(СтрокаДанные.id_TT, "id_TT");
		//Если СтрокаТТЮЛ <> Неопределено
		//	И ЗначениеЗаполнено(СтрокаТТЮЛ.ID_UL) Тогда
		//	СтрокаОрг = ТабОрганизации.Найти(СтрокаТТЮЛ.ID_UL, "ИД");
		//	Если СтрокаОрг <> Неопределено Тогда
		//		СтрокаДанные.Организация = СтрокаОрг.Ссылка;
		//	КонецЕсли;	
		//КонецЕсли;
		
		СтрокаДанные.Организация = СтрокаТТ.Организация;
		
		СтрокаСДокументом = ТабЛистыУчета.Найти(СтрокаДанные.СтруктурнаяЕдиница, "ТорговаяТочка");
		Если СтрокаСДокументом = Неопределено Тогда
			ЛистОбъект = Документы.ЛистУчета.СоздатьДокумент();
			ЛистОбъект.Дата 		= НачалоДня(ДатаОбработки);
			//ЛистОбъект.ЦФО = СтрокаДанные.ЦФО;
		Иначе
			
			//
			ЛистОбъект = СтрокаСДокументом.Ссылка.ПолучитьОбъект();
			Если ЛистОбъект.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;
		
		//
		ЛистОбъект.Организация 	= СтрокаДанные.Организация;
		ЛистОбъект.ТорговаяТочка = СтрокаДанные.СтруктурнаяЕдиница;
		ЗаполнитьЗначенияСвойств(ЛистОбъект, СтрокаДанные,, "Организация, СуммаИнкассации, НачальныйОстаток, КонечныйОстаток");
		//ЗаполнитьЗначенияСвойств(ЛистОбъект, СтрокаДанные,, "Дата, Организация, НачальныйОстаток, КонечныйОстаток");
		
		//
		ЛистОбъект.ЗагруженоИзAccess = Истина;
		
		//
		//ВозвратСумма = СтрокаДанные.СуммаВозвратаНал + СтрокаДанные.СуммаВозврата201Нал;
		ВозвратСумма = СтрокаДанные.СуммаВозвратаНал + СтрокаДанные.СуммаВозврата201Нал + СтрокаДанные.СуммаВозвратаБезНал + СтрокаДанные.СуммаВозврата201БезНал;
		
		//
		
		ЛистОбъект.СуммаДокумента = СтрокаДанные.Сумма - ВозвратСумма;
		ЛистОбъект.СуммаЭквайринг = СтрокаДанные.Безнал - СтрокаДанные.СуммаВозвратаБезНал;
		//если терминала нет, значит и нет оплаты по безналу
		
		//ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами;
		ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами - СтрокаДанные.Безнал;
		ЛистОбъект.ВозвратПокупателю 		= СтрокаДанные.СуммаВозврата201Нал;
		ЛистОбъект.СторноОшибочно 			= СтрокаДанные.СуммаВозвратаНал + СтрокаДанные.СуммаВозвратаБезНал;
		//ЛистОбъект.ВозвратПокупателюБезнал 	= СтрокаДанные.СуммаВозврата201БезНал;
		ЛистОбъект.ВозвратПокупателюБезнал 	= СтрокаДанные.СуммаВозврата201БезНал + СтрокаДанные.СуммаВозвратаБезНал;
		
		//
		Если ЛистОбъект.ЭтоНовый() Тогда
			ЛистОбъект.НачальныйОстаток = СтрокаДанные.НачальныйОстаток;
			ЛистОбъект.КонечныйОстаток 	= СтрокаДанные.КонечныйОстаток;
			ЛистОбъект.СуммаИнкассации 	= СтрокаДанные.СуммаИнкассации;
			ЛистОбъект.ДатаКассовойСмены = ЛистОбъект.Дата + 86400;
		КонецЕсли;	
		
		СтрокаТерминал = ТабТерминалы.Найти(ЛистОбъект.ТорговаяТочка, "СтруктурнаяЕдиница");
		Если СтрокаТерминал = Неопределено Тогда
			ЛистОбъект.Терминал = СтрокаТТ.Терминал;
		Иначе
			ЛистОбъект.Терминал = СтрокаТерминал.Терминал;
		КонецЕсли;	
		ЛистОбъект.ЦФО		= СтрокаТТ.ЦФО;	
		ЛистОбъект.СтруктурнаяиЕдиницаПриемаИнкассации 	= СтрокаТТ.Склад;
		
		//если терминала нет, значит и нет оплаты по безналу
		Если ЛистОбъект.ПеренестиБезналВНаличнуюЧасть
				И (ЛистОбъект.СуммаЭквайринг <> 0 ИЛИ ЛистОбъект.ВозвратПокупателюБезнал <> 0) Тогда
			//ничего делать не нужно, просто нужно обнулить сумму безнала
			//ЛистОбъект.СуммаДокумента = СтрокаДанные.Сумма - ВозвратСумма + ЛистОбъект.СуммаЭквайринг;
			ЛистОбъект.СуммаНал = ЛистОбъект.СуммаНал + ЛистОбъект.СуммаЭквайринг - ЛистОбъект.ВозвратПокупателюБезнал;
			ЛистОбъект.СуммаЭквайринг = 0;
			ЛистОбъект.ВозвратПокупателюБезнал = 0;
			//ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами + ЛистОбъект.СуммаЭквайринг;
		КонецЕсли;
		
		//ТабТовары.Очистить();
		
		//ТабКорректировкиАвтоматические = Новый ТаблицаЗначений();
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Дата");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("КодОперации");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("АвтоматическоеДвижение");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Номенклатура");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Количество");
		//ТаблицаОстатков = ВнешниеДанные.ПолучитьТаблицуОстатков(ЛистОбъект.Дата, ЛистОбъект.Дата, ЛистОбъект.ТорговаяТочка);
		//СтрокиДанныеТовар = ТабДанныеТовары.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
		ТабТовары = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(ЛистОбъект.Дата, ЛистОбъект.Дата, ЛистОбъект.ТорговаяТочка);
		ОбщаяСуммаПродажТоваров = 0;
		Для Каждого СтрокаДанныеТовар Из ТабТовары Цикл
			ОбщаяСуммаПродажТоваров = ОбщаяСуммаПродажТоваров + СтрокаДанныеТовар.Сумма;
		КонецЦикла;	
		
		//загрузка продавцов
		Если ДатаОбработки >= '20171001' Тогда
			Если ЛистОбъект.ЭтоНовый() Тогда
				СтрокиПродавцы = ТабВыходыСотрудников.НайтиСтроки(Новый Структура("Магазин", ЛистОбъект.ТорговаяТочка));
				Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
					Если СтрокаПродавец.Аутсорсер Тогда
						СтрокаДоб = ЛистОбъект.СотрудникиАутсорс.Добавить();
						СтрокаДоб.Сотрудник = СтрокаПродавец.Сотрудник;
						СтрокаДоб.ДатаПервого = СтрокаПродавец.ДатаПрихода;
						СтрокаДоб.ДатаПоследнего = СтрокаПродавец.ДатаУхода;
						СтрокаДоб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
					Иначе	
						СтрокиКассир = ТабТабельКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
						СтрокиУборщица = ТабТабельУборщицы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
						СтрокиПекарь   = ТабТабельПекари.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка)); //+++АК mika 2018.04.06 ИП-00018000
						Если СтрокиКассир.Количество() > 0 Тогда
							СтрокаТаб = ЛистОбъект.Кассиры.Добавить();
							СтрокаТаб.Кассир = СтрокаПродавец.Сотрудник;
							СтрокаТаб.СвойствоСотрудника = СтрокиКассир[0].СвойствоСотрудника;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокаТаб.ЭкстренныйВызов = СтрокиКассир[0].ЭкстренныйВызов;
						ИначеЕсли СтрокаПродавец.Промоутер Тогда
							СтрокаТаб = ЛистОбъект.Промоутеры.Добавить();
							СтрокаТаб.Промоутер = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
						ИначеЕсли СтрокиУборщица.Количество() > 0 Тогда
							СтрокаТаб = ЛистОбъект.Уборщицы.Добавить();
							СтрокаТаб.ФизЛицо = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
						ИначеЕсли СтрокиПекарь.Количество() > 0 Тогда //+++АК mika 2018.04.06 ИП-00018000	
							СтрокаТаб = ЛистОбъект.Пекари.Добавить();
							СтрокаТаб.ФизЛицо = СтрокаПродавец.Сотрудник;
							СтрокаТаб.СвойствоСотрудника = СтрокиПекарь[0].СвойствоСотрудника;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокаТаб.ЭкстренныйВызов = СтрокиПекарь[0].ЭкстренныйВызов;
						Иначе
							СтрокаТаб = ЛистОбъект.Продавцы.Добавить();
							СтрокаТаб.Продавец = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
							Если СтрокиСтпродавцы.Количество() > 0 Тогда
								Если СтрокиСтпродавцы[0].СвойствоПродавца = 2
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 3
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 4 Тогда
									СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
								КонецЕсли;	
								СтрокаТаб.ЭкстренныйВызов = СтрокиСтпродавцы[0].ЭкстренныйВызов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЦикла;
			КонецЕсли;
		Иначе	
			Если ЛистОбъект.ЭтоНовый() Тогда
				Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаПродавец.id_prod_1C) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаКешПродавец = ТабКешПродавцы.Найти(Прав("0000000000" + Формат(СтрокаПродавец.id_prod_1C, "ЧГ=0"), 10), "Код");
					//Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаПродавец.id_prod_1C, "ЧГ=0"), 10));
					//Если ЛистОбъект.Продавцы.Найти(Продавец, "Продавец") <> Неопределено Тогда
					//	Продолжить;
					//КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаКешПродавец) Тогда
						СтрокиКассир = ТабТабельКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаКешПродавец.Ссылка, ЛистОбъект.ТорговаяТочка));
						Если СтрокиКассир.Количество() > 0 Тогда
							СтрокаТаб = ЛистОбъект.Кассиры.Добавить();
							СтрокаТаб.Кассир = СтрокиКассир[0].Сотрудник;
							СтрокаТаб.СвойствоСотрудника = СтрокиКассир[0].СвойствоСотрудника;
							СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
							СтрокаТаб.ЭкстренныйВызов = СтрокиКассир[0].ЭкстренныйВызов;
						ИначеЕсли СтрокаКешПродавец.Промоутер Тогда
							СтрокаТаб = ЛистОбъект.Промоутеры.Добавить();
							СтрокаТаб.Промоутер = СтрокаКешПродавец.Ссылка;
							СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
							Если СтрокаТаб.КоличествоЧасов < 0 Тогда
								СтрокаТаб.КоличествоЧасов = 0;
							КонецЕсли;
						ИначеЕсли СтрокаКешПродавец.ВнештатныйСотрудник Тогда
							СтрокаТаб = ЛистОбъект.ВнештатныеСотрудники.Добавить();
							СтрокаТаб.Сотрудник = СтрокаКешПродавец.Ссылка;
							СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
							Если СтрокаТаб.КоличествоЧасов < 0 Тогда
								СтрокаТаб.КоличествоЧасов = 0;
							КонецЕсли;	
						Иначе
							СтрокаТаб = ЛистОбъект.Продавцы.Добавить();
							СтрокаТаб.Продавец = СтрокаКешПродавец.Ссылка;
							СтрокаТаб.Пч = ?(СтрокаПродавец.ВышелРанне12, 0, 1);
							СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаТаб.Продавец, ЛистОбъект.ТорговаяТочка));
							Если СтрокиСтпродавцы.Количество() > 0 Тогда
								Если СтрокиСтпродавцы[0].СвойствоПродавца = 2
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 3
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 4 Тогда
									СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
								КонецЕсли;	
								СтрокаТаб.ЭкстренныйВызов = СтрокиСтпродавцы[0].ЭкстренныйВызов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаКешАутсорс = ТабСотрудникиАутсорс.Найти(СтрокаПродавец.id_prod_1C, "ИД");
					Если СтрокаКешАутсорс <> Неопределено Тогда
						СтрокаДоб = ЛистОбъект.СотрудникиАутсорс.Добавить();
						СтрокаДоб.Сотрудник = СтрокаКешАутсорс.Ссылка;
						СтрокаДоб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
						СтрокаДоб.ДатаПервого = СтрокаПродавец.ДатаПервого;
						СтрокаДоб.ДатаПоследнего = ?(СтрокаПродавец.ДатаПоследнего = СтрокаПродавец.ДатаПервого, СтрокаПродавец.ДатаПервого + 1, СтрокаПродавец.ДатаПоследнего);
						Если СтрокаДоб.КоличествоЧасов < 0 Тогда
							СтрокаДоб.КоличествоЧасов = 0;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЦикла;
				ТаблицаДубли = Документы.ЛистУчета.ЕстьДублиПродавцов(ЛистОбъект.Продавцы.ВыгрузитьКолонку("Продавец"), ЛистОбъект.Дата, ЛистОбъект.Ссылка);
				КолвоСтрок = ЛистОбъект.Продавцы.Количество();
				Для н = 1 по КолвоСтрок Цикл
					Если ТаблицаДубли.Найти(ЛистОбъект.Продавцы[КолвоСтрок - н].Продавец, "Продавец") <> Неопределено Тогда
						ЛистОбъект.Продавцы.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
		
		ЛистОбъект.ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
		//ЛистОбъект.ДополнительныеСвойства.Вставить("ТоварыИзменение", ТабКорректировкиАвтоматические);
		
		ЛистОбъект.ОплатыПоБанковскимКартам.Очистить();
		СтрокиБезнал = ТаблицаСДаннымиПоКассам.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
		Для Каждого СтрокаБезнал Из СтрокиБезнал Цикл
			Если СтрокаБезнал.Безнал = 0 Тогда
				Продолжить;
			КонецЕсли;	
			//Если ЛистОбъект.Организация = ОргСП Тогда
			//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаБезнал.CashID, "ЧРГ=; ЧГ=0"), Истина));
			//Иначе
				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаБезнал.CashID, "ЧРГ=; ЧГ=0")));
			//КонецЕсли;
			Если СтрокиККМ.Количество() > 0 Тогда
				СтрокаДоб = ЛистОбъект.ОплатыПоБанковскимКартам.Добавить();
				СтрокаДоб.ОсновноеСредство = СтрокиККМ[0].Ссылка;
				Если СтрокаТерминал <> Неопределено Тогда
					СтрокаДоб.Терминал = СтрокаТерминал.Терминал;
				КонецЕсли;
				СтрокаДоб.Сумма = СтрокаБезнал.Безнал;
				СтрокаДоб.СуммаВозврата = СтрокаБезнал.СуммаВозвратаБезНал + СтрокаБезнал.СуммаВозврата201БезНал;
			КонецЕсли;
		КонецЦикла;
		
		Если ЛистОбъект.НеПерезагружатьЗОтчеты = Ложь Тогда
			ЗОтчетыКеш = ЛистОбъект.ZОтчеты.Выгрузить();
			ЛистОбъект.ZОтчеты.Очистить();
			СтрокиЗОтчеты = ТабЗОтчеты.НайтиСтроки(Новый Структура("ShopNo", СтрокаТТ.НомерТочки));
			Для Каждого СтрокаЗОтчет Из СтрокиЗОтчеты Цикл
				//Если ЛистОбъект.Организация = ОргСП Тогда
				//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0"), Истина));
				//Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0")));
				//КонецЕсли;	
				Если СтрокиККМ.Количество() > 0 Тогда
					СтрокаДоб = ЛистОбъект.ZОтчеты.Добавить();
					СтрокаДоб.Касса 	= СтрокиККМ[0].Ссылка;
					СтрокаДоб.ZОтчет 	= СтрокаЗОтчет.Number;
					СтрокаДоб.Сумма 	= СтрокаЗОтчет.BaseSum - СтрокаЗОтчет.SummBonus;
					СтрокиКешЗ = ЗОтчетыКеш.НайтиСтроки(Новый Структура("Касса, ZОтчет", СтрокаДоб.Касса, СтрокаДоб.ZОтчет));
					Если СтрокиКешЗ.Количество() > 0 Тогда
						СтрокаДоб.ВведенныйОстаток 	= СтрокиКешЗ[0].ВведенныйОстаток;
						//СтрокаДоб.СуммаПоНал 		= СтрокиКешЗ[0].СуммаПоНал;
						//СтрокаДоб.СуммаПоБезнал 	= СтрокиКешЗ[0].СуммаПоБезнал;
					КонецЕсли;
					Если СтрокаДоб.СуммаПоНал = 0
							И СтрокаДоб.СуммаПоБезнал = 0 Тогда
						СтрокиСБезналом = ЛистОбъект.ОплатыПоБанковскимКартам.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДоб.Касса));
						Если СтрокиСБезналом.Количество() > 0 Тогда
							СтрокаДоб.СуммаПоБезнал = Мин(СтрокиСБезналом[0].Сумма, СтрокаДоб.Сумма);
						КонецЕсли;	
						СтрокаДоб.СуммаПоНал = СтрокаДоб.Сумма - СтрокаДоб.СуммаПоБезнал;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			КорБезнал = ЛистОбъект.КорректировкаБезнал;
			Счетчик = 0;
			Пока КорБезнал <> 0 И Счетчик < ЛистОбъект.ZОтчеты.Количество() Цикл
				Если КорБезнал < 0 Тогда
					КорБезнал = КорБезнал * (-1);
					МинСумма = Мин(ЛистОбъект.ZОтчеты[Счетчик].СуммаПоБезнал, КорБезнал);
					ЛистОбъект.ZОтчеты[Счетчик].СуммаПоБезнал = ЛистОбъект.ZОтчеты[Счетчик].СуммаПоБезнал - МинСумма;
					ЛистОбъект.ZОтчеты[Счетчик].СуммаПоНал = ЛистОбъект.ZОтчеты[Счетчик].СуммаПоНал + МинСумма;
					КорБезнал = КорБезнал - МинСумма;
				Иначе
					МинСумма = Мин(ЛистОбъект.ZОтчеты[Счетчик].СуммаПоНал, КорБезнал);
					ЛистОбъект.ZОтчеты[Счетчик].СуммаПоБезнал = ЛистОбъект.ZОтчеты[Счетчик].СуммаПоБезнал + МинСумма;
					ЛистОбъект.ZОтчеты[Счетчик].СуммаПоНал = ЛистОбъект.ZОтчеты[Счетчик].СуммаПоНал - МинСумма;
					КорБезнал = КорБезнал - МинСумма;
				КонецЕсли;	
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;	
			
		Если НЕ ЛистОбъект.АктыРедактировались Тогда
			ЛистОбъект.АктыКМ3.Очистить();
			ЛистОбъект.ЧекиПоАктамКМ3.Очистить();
			СтрокиПоКассамДетально = ТаблицаСДаннымиПоКассамВозвраты.НайтиСтроки(Новый Структура("id_TT, Is201", СтрокаДанные.id_TT, 0));
			Для Каждого СтрокаПоКассеДетально Из СтрокиПоКассамДетально Цикл
				//Если ЛистОбъект.Организация = ОргСП Тогда
				//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
				//Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0")));
				//КонецЕсли;
				Коэффициент10 = ?(СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18 = 0, 1, СтрокаПоКассеДетально.СуммаПоНДС10 / (СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18));
				Если СтрокаПоКассеДетально.СуммаВозврата201Нал > 0 Тогда
					СтрокаТаб = ЛистОбъект.АктыКМ3.Добавить();
					СтрокаТаб.КлючСтроки 	= Строка(Новый УникальныйИдентификатор());
					СтрокаТаб.ОсновноеСредство = ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.АктПолучен = Истина;
					СтрокаТаб.Сумма 		= СтрокаПоКассеДетально.СуммаВозврата201Нал;
					СтрокаТаб.СуммаПоНДС10 	= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 	= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					СтрокаРасшифровка = ЛистОбъект.ЧекиПоАктамКМ3.Добавить();
					СтрокаРасшифровка.КлючСтрокиАкта 	= СтрокаТаб.КлючСтроки;
					СтрокаРасшифровка.УИНЧека 			= СтрокаПоКассеДетально.CheckUID;
					СтрокаРасшифровка.СуммаЧека 		= СтрокаПоКассеДетально.СуммаВозврата201Нал;
				КонецЕсли;
				Если СтрокаПоКассеДетально.СуммаВозврата201БезНал > 0 Тогда
					СтрокаТаб = ЛистОбъект.АктыКМ3.Добавить();
					СтрокаТаб.КлючСтроки 		= Строка(Новый УникальныйИдентификатор());
					СтрокаТаб.ОсновноеСредство 	= ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.Сумма 			= СтрокаПоКассеДетально.СуммаВозврата201БезНал;
					СтрокаТаб.ЭтоВозвратБезнал 	= Истина;
					СтрокаТаб.АктПолучен = Истина;
					СтрокаТаб.СуммаПоНДС10 		= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 		= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					СтрокаРасшифровка = ЛистОбъект.ЧекиПоАктамКМ3.Добавить();
					СтрокаРасшифровка.КлючСтрокиАкта 	= СтрокаТаб.КлючСтроки;
					СтрокаРасшифровка.УИНЧека 			= СтрокаПоКассеДетально.CheckUID;
					СтрокаРасшифровка.СуммаЧека 		= СтрокаПоКассеДетально.СуммаВозврата201БезНал;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если НЕ ЛистОбъект.ВозвратыРедактировались Тогда
			ЛистОбъект.ВозвратыИзСейфа.Очистить();
			ЛистОбъект.ТоварыПоВозвратам.Очистить();
			СтрокиПоКассамДетально = ТаблицаСДаннымиПоКассамВозвраты.НайтиСтроки(Новый Структура("id_TT, Is201", СтрокаДанные.id_TT, 1));
			Для Каждого СтрокаПоКассеДетально Из СтрокиПоКассамДетально Цикл
				//Если ЛистОбъект.Организация = ОргСП Тогда
				//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
				//Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0")));
				//КонецЕсли;
				Коэффициент10 = ?(СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18 = 0, 1, СтрокаПоКассеДетально.СуммаПоНДС10 / (СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18));
				Если СтрокаПоКассеДетально.СуммаВозврата201Нал > 0 Тогда
					СтрокаТаб = ЛистОбъект.ВозвратыИзСейфа.Добавить();
					СтрокаТаб.КлючСтроки 	= Строка(Новый УникальныйИдентификатор());
					СтрокаТаб.ВозвратПолучен 		= Истина;
					//СтрокаТаб.ОсновноеСредство = ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.Сумма 		= СтрокаПоКассеДетально.СуммаВозврата201Нал;
					СтрокаТаб.СуммаПоНДС10 	= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 	= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					ТабЧекПоТоварам = Новый ТаблицаЗначений();
					ТабЧекПоТоварам.Колонки.Добавить("КлючСтрокиВозврата");
					ТабЧекПоТоварам.Колонки.Добавить("Номенклатура");
					ТабЧекПоТоварам.Колонки.Добавить("Количество");
					ТабЧекПоТоварам.Колонки.Добавить("СтавкаНДС");
					ТабЧекПоТоварам.Колонки.Добавить("Сумма");
					ТабЧекПоТоварам.Колонки.Добавить("СуммаПоНДС10");
					ТабЧекПоТоварам.Колонки.Добавить("СуммаПоНДС18");
					
					СтрокиПоТоварам = ТабТоварыПоВозвратам.НайтиСтроки(Новый Структура("CheckUID", СтрокаПоКассеДетально.CheckUID));
					Для Каждого СтрокаДетал Из СтрокиПоТоварам Цикл
						СтрокаДоб = ТабЧекПоТоварам.Добавить();
						СтрокаДоб.КлючСтрокиВозврата = СтрокаТаб.КлючСтроки;
						СтрокаДоб.Номенклатура = СтрокаДетал.Номенклатура;
						СтрокаДоб.Количество = СтрокаДетал.Количество;
						Если СтрокаДетал.СуммаПоНДС18 > 0 Тогда
							СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						Иначе	
							СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
						КонецЕсли;
						СтрокаДоб.Сумма = СтрокаДетал.Сумма;
					КонецЦикла;
					
					Распределение = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаб.Сумма, ТабЧекПоТоварам.ВыгрузитьКолонку("Сумма"));
					Если Распределение <> Неопределено Тогда
						ТабЧекПоТоварам.ЗагрузитьКолонку(Распределение, "Сумма");
					КонецЕсли;	
					Для Каждого СтрокаДетал Из ТабЧекПоТоварам Цикл
						Если СтрокаДетал.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
							СтрокаДетал.СуммаПоНДС18 = СтрокаДетал.Сумма;
						Иначе	
							СтрокаДетал.СуммаПоНДС10 = СтрокаДетал.Сумма;
						КонецЕсли;	
					КонецЦикла;	
					
					Для Каждого СтрокаДоб Из ТабЧекПоТоварам Цикл
						ЗаполнитьЗначенияСвойств(ЛистОбъект.ТоварыПоВозвратам.Добавить(), СтрокаДоб);
					КонецЦикла;	
				КонецЕсли;
				Если СтрокаПоКассеДетально.СуммаВозврата201БезНал > 0 Тогда
					СтрокаТаб = ЛистОбъект.ВозвратыИзСейфа.Добавить();
					СтрокаТаб.КлючСтроки 		= Строка(Новый УникальныйИдентификатор());
					//СтрокаТаб.ОсновноеСредство 	= ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.Сумма 			= СтрокаПоКассеДетально.СуммаВозврата201БезНал;
					//СтрокаТаб.ЭтоВозвратБезнал 	= Истина;
					СтрокаТаб.ВозвратПолучен 		= Истина;
					СтрокаТаб.СуммаПоНДС10 		= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 		= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					ТабЧекПоТоварам = Новый ТаблицаЗначений();
					ТабЧекПоТоварам.Колонки.Добавить("КлючСтрокиВозврата");
					ТабЧекПоТоварам.Колонки.Добавить("Номенклатура");
					ТабЧекПоТоварам.Колонки.Добавить("Количество");
					ТабЧекПоТоварам.Колонки.Добавить("СтавкаНДС");
					ТабЧекПоТоварам.Колонки.Добавить("Сумма");
					ТабЧекПоТоварам.Колонки.Добавить("СуммаПоНДС10");
					ТабЧекПоТоварам.Колонки.Добавить("СуммаПоНДС18");
					
					СтрокиПоТоварам = ТабТоварыПоВозвратам.НайтиСтроки(Новый Структура("CheckUID", СтрокаПоКассеДетально.CheckUID));
					Для Каждого СтрокаДетал Из ТабЧекПоТоварам Цикл
						СтрокаДоб = ТабЧекПоТоварам.Добавить();
						СтрокаДоб.КлючСтрокиВозврата = СтрокаТаб.КлючСтроки;
						СтрокаДоб.Номенклатура = СтрокаДетал.Номенклатура;
						СтрокаДоб.Количество = СтрокаДетал.Количество;
						Если СтрокаДетал.СуммаПоНДС18 > 0 Тогда
							СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						Иначе	
							СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
						КонецЕсли;
						СтрокаДоб.Сумма = СтрокаДетал.Сумма;
					КонецЦикла;
					
					Распределение = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаб.Сумма, ТабЧекПоТоварам.ВыгрузитьКолонку("Сумма"));
					Если Распределение <> Неопределено Тогда
						ТабЧекПоТоварам.ЗагрузитьКолонку(Распределение, "Сумма");
					КонецЕсли;	
					Для Каждого СтрокаДетал Из ТабЧекПоТоварам Цикл
						Если СтрокаДетал.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
							СтрокаДетал.СуммаПоНДС18 = СтрокаДетал.Сумма;
						Иначе	
							СтрокаДетал.СуммаПоНДС10 = СтрокаДетал.Сумма;
						КонецЕсли;	
					КонецЦикла;	
					
					Для Каждого СтрокаДоб Из ТабЧекПоТоварам Цикл
						ЗаполнитьЗначенияСвойств(ЛистОбъект.ТоварыПоВозвратам.Добавить(), СтрокаДоб);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ЛистОбъект.Отклонение = -(ЛистОбъект.НачальныйОстаток + ЛистОбъект.СуммаДокумента + ЛистОбъект.КорректировкаZ - ЛистОбъект.ОплатаБаллами - ЛистОбъект.СуммаЭквайринг - ЛистОбъект.КорректировкаБезнал - ЛистОбъект.СуммаИнкассации - ЛистОбъект.КонечныйОстаток); 
		
		ЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если НЕ ЗначениеЗаполнено(ЛистОбъект.Ссылка.Расчетчик) Тогда
			РазницаДеньги = ЛистОбъект.Ссылка.Отклонение;
			РазницаДеньги = РазницаДеньги * ?(РазницаДеньги < 0, -1, 1);
			РазницаТовары = ЛистОбъект.Ссылка.РазницаПоТоварам;
			РазницаТовары = РазницаТовары * ?(РазницаТовары < 0, -1, 1);
			Если РазницаДеньги <= 1
				И РазницаТовары <= 400 Тогда
				СтрокаКеш = ТабПривязкиПоРолям.Найти(ЛистОбъект.ТорговаяТочка, "ТорговаяТочка");
				Если СтрокаКеш <> Неопределено
					И ЗначениеЗаполнено(СтрокаКеш.Пользователь) Тогда
					ДокОбРасчетчик = ЛистОбъект.Ссылка.ПолучитьОбъект();
					ДокОбРасчетчик.Расчетчик = СтрокаКеш.Пользователь;
					ДокОбРасчетчик.Обработан = Истина;
					ДокОбРасчетчик.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам_БезЧековПродажи(ДатаОбработки, Знач МассивНомерМагазина = Неопределено, МассивID_TT = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаОбработки >= '20171001' Тогда
		ТабВыходыСотрудников = ПолучитьТаблицуПродавцовПоВыходам(ДатаОбработки);
	КонецЕсли;
	
	ТипЧислоСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЗапросТТ = Новый Запрос();
	ЗапросТТ.УстановитьПараметр("ЕстьОтборПоТТ"	, ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, Истина, Ложь));
	ЗапросТТ.УстановитьПараметр("МассивId_TT"	, МассивID_TT);
	ЗапросТТ.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаОбработки));
	ЗапросТТ.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦФО,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтруктурныеЕдиницы.Организация
	|		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	СтруктурныеЕдиницы.Терминал,
	|	СкладыТорговыхТочекСрезПоследних.Склад
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаНач, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыТорговыхТочек.СрезПоследних(&ДатаНач, ) КАК СкладыТорговыхТочекСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = СкладыТорговыхТочекСрезПоследних.ТорговаяТочка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛистУчета.ТорговаяТочка КАК ТорговаяТочка
	|		ИЗ
	|			Документ.ЛистУчета КАК ЛистУчета
	|		ГДЕ
	|			ЛистУчета.ПометкаУдаления = ЛОЖЬ
	|			И НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач) КАК ВЗ_Листы
	|		ПО СтруктурныеЕдиницы.Ссылка = ВЗ_Листы.ТорговаяТочка
	|ГДЕ
	|	(НЕ &ЕстьОтборПоТТ
	|			ИЛИ СтруктурныеЕдиницы.id_TT В (&МассивId_TT))
	|	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	|	И ВЗ_Листы.ТорговаяТочка ЕСТЬ NULL ";	
	ТабТТ = ЗапросТТ.Выполнить().Выгрузить();
	
	МассивНомерМагазина = ТабТТ.ВыгрузитьКолонку("НомерТочки");
	Если МассивНомерМагазина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	СтрокаОтбораТТ = "(9999999)";
	Если ТипЗнч(МассивНомерМагазина) = Тип("Массив") Тогда
		Для Каждого ТекТТ Из МассивНомерМагазина Цикл
			Если ЗначениеЗаполнено(ТекТТ) Тогда
				СтрокаОтбораТТ = СтрокаОтбораТТ + ", (" + Формат(ТекТТ, "ЧГ=0") + ")";
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	

	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_tt"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Организация"		, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабДанные.Колонки.Добавить("СтруктурнаяЕдиница"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("ЦФО"				, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Отчет"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаНал"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Сумма"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозвратаНал"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозврата201Нал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозвратаБезНал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Безнал"					, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ОплатаБаллами"			, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СкидкаКопеек"			, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("Возврат"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаБНал"				, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("СуммаИнкассации"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("НачальныйОстаток"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ВремяДоставки"			, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("КонечныйОстаток"		, ТипЧислоСумма);
	ТабДанные.Колонки.Добавить("ТемператураХолодильникаУтром"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураХолодильникаВечером"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураМорозильникаУтром"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ТабДанные.Колонки.Добавить("ТемператураМорозильникаВечером"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka
				|CREATE TABLE
				|#VT_ShopNo_Zagruzka (ShopNo int);
				|INSERT INTO #VT_ShopNo_Zagruzka
				|VALUES " + СтрокаОтбораТТ + "
				|SELECT TT._Fld758 as id_TT into #VT_TT_Zagruzka FROM IzbenkaFin.dbo._Reference42 as TT (nolock) WHERE TT._Fld2756 IN (SELECT tab.shopno From #VT_ShopNo_Zagruzka as tab)
				|
				|
				|SELECT Ch.ShopNo, Ch.CashID,
				|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.BaseSum ELSE 0 END) as Summa,
				|  SUM(CASE WHEN Ch.OperationType = 1 THEN Ch.SummBank ELSE 0 END) as Beznal,
				|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummCash ELSE 0 END) as SummaVozvratNal,
				|  SUM(CASE WHEN Ch.OperationType IN (3, 202, 203) THEN Ch.SummBank ELSE 0 END) as SummaVozvratBezNal,
				|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummCash WHEN Ch.OperationType = 211 THEN Ch.SummCash * -1 ELSE 0 END) as SummaVozvrat201Nal,
				|  SUM(CASE WHEN Ch.OperationType = 201 THEN Ch.SummBank WHEN Ch.OperationType = 211 THEN Ch.SummBank * -1 ELSE 0 END) as SummaVozvrat201BezNal,
				|  SUM(CASE WHEN Ch.OperationType IN (1, 3, 202, 203) THEN Ch.SummBonus ELSE 0 END) as SummaBallami,
				|  SUM(ISNULL(Chl.SkidkaKopeek, 0)) as SkidkaKopeek
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock) 
				|LEFT OUTER JOIN (SELECT Chl.CheckUID,
				|  				SUM(CASE WHEN Chl.OperationType_cl IN (1, 3, 202, 203) and Chl.BaseSum <> 0 THEN Chl.BaseSum - Chl.BasePrice * Chl.Quantity ELSE 0 END * (-1)) as SkidkaKopeek
				|  				FROM [SMS_IZBENKA].[dbo].[Checkline] as Chl (nolock) where Chl.date_ch = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl IN (1, 3, 201, 202, 203) 
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Chl.id_tt_cl IN (SELECT tab.id_TT FROM #VT_TT_Zagruzka as tab)", "") + "
				|					GROUP BY Chl.CheckUID) as Chl
				|  				ON Ch.CheckUID = Chl.CheckUID
				|where Ch.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType IN (1, 3, 201, 211, 202, 203) 
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|GROUP BY Ch.ShopNo, Ch.CashID order by Ch.ShopNo
				|
				|
				|SELECT Ch.ShopNo, Ch.CashID, Ch.CheckUID,
				|  Ch.SummCash as SummaVozvrat201Nal,
				|  Ch.SummBank as SummaVozvrat201BezNal,
				|  Chl.SummaPoNDS10 as SummaPoNDS10,
				|  Chl.SummaPoNDS18 as SummaPoNDS18
				|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
				|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid,
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
				|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
				|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
				|						WHERE Chl.date_ch = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "' and Chl.OperationType_cl = 201
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Chl.id_tt_cl IN (SELECT tab.id_TT FROM #VT_TT_Zagruzka as tab)", "") + "
				|						GROUP BY Chl.CheckUid) as Chl ON Ch.CheckUID = Chl.CheckUid
				|	LEFT OUTER JOIN (SELECT TTSpr._Fld2756 as ShopNo,
				|						DATEADD(YEAR, -2000, CONVERT(date, TTSpr._Fld4045)) as DataPerehod,
				|						CASE WHEN (TTSpr._Fld3794RRef = 0xB05D005056A0010611E38E76B97A4763) THEN 1 ELSE 0 END as IsMORegion,
				|						ROW_NUMBER() OVER (PARTITION BY TTSpr._Fld2756 order by TTSpr._IDRRef) as rn
				|					FROM IzbenkaFin.dbo._Reference42 as TTSpr (nolock)) as VZ_TTSpr
				|		ON Ch.ShopNo = VZ_TTSpr.ShopNo and VZ_TTSpr.rn = 1
				|where Ch.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType = 201
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				| and ((Ch.SummCash >= 1000 or Ch.SummBank > 0) or (Ch.SummCash >= 0 and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <> '0001-01-01' and ISNULL(VZ_TTSpr.DataPerehod, '0001-01-01') <= Ch.CloseDate and ISNULL(VZ_TTSpr.IsMORegion, 0) = 1))
				|;
				|SELECT
				|	dbo_Pokazat_800_kod.дата,
				|	dbo_Pokazat_800_kod.Kon_ost,
				|	dbo_Pokazat_800_kod.Inkass,
				|	dbo_Pokazat_800_kod.Vremya,
				|	dbo_Pokazat_800_kod.Temra_1,
				|	dbo_Pokazat_800_kod.Temra_2,
				|	dbo_Pokazat_800_kod.Temra_1m,
				|	dbo_Pokazat_800_kod.Temra_2m,
				|	dbo_Pokazat_800_kod.ShopNo
				|FROM
				|	SMS_Izbenka.dbo.Pokazat_800_kod as dbo_Pokazat_800_kod (nolock)
				|WHERE
				|	dbo_Pokazat_800_kod.дата = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "'
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and dbo_Pokazat_800_kod.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|;
				|
				|SELECT DISTINCT
				|	CONVERT(date, dbo_Grafik_800_kod.Дата) as День,
				|	dbo_Grafik_800_kod.ShopNo,
				|	dbo_Grafik_800_kod.id_prod_1C,
				|	dbo_Grafik_800_kod.Пч
				|FROM
				|	SMS_Izbenka.dbo.Grafik_800_kod as dbo_Grafik_800_kod (nolock)
				|WHERE
				|	dbo_Grafik_800_kod.Дата >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Grafik_800_kod.Дата <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and dbo_Grafik_800_kod.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|
				|;
				|SELECT
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime)) as Дата,
				|   	dbo_Shifts.CashID,
				|   	SUM(dbo_Checks.BaseSum) as BaseSum,
				|   	SUM(dbo_Checks.SummBonus) as SummBonus,
				|   	dbo_Checks.ShopNo,
				|   	MAX(dbo_Shifts.Number) as Number
				|   FROM
				|   	SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
				|   		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
				|   	ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
				|   WHERE
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime)) = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "'
				|" + ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, " and dbo_Checks.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)", "") + "
				|   	and dbo_Checks.OperationType > 0 and (dbo_Checks.BaseSum - dbo_Checks.SummBonus) > 0
				|   
				|   GROUP BY
				|   	dbo_Shifts.CashID,
				|   	dbo_Checks.ShopNo,
				|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime))
				|
				|IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka";
				
	//ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДаннымиПоКассам = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("id_tt"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("CashID"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("Сумма"					, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозвратаНал"			, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозврата201Нал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозвратаБезНал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("Безнал"					, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("ОплатаБаллами"			, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("СкидкаКопеек"				, ТипЧислоСумма);
	
	ТаблицаСДаннымиПоКассамВозвраты = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("id_tt"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("CashID"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("CheckUID"	, Новый ОписаниеТипов("Строка"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозврата201Нал"		, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозврата201БезНал"	, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс10"				, ТипЧислоСумма);
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс18"				, ТипЧислоСумма);

	ТабПоказатели = Новый ТаблицаЗначений();
	ТабПоказатели.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабПоказатели.Колонки.Добавить("Kon_ost", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Inkass", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Vremya", Новый ОписаниеТипов("Дата"));
	ТабПоказатели.Колонки.Добавить("Temra_1", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_2", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_1m", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("Temra_2m", Новый ОписаниеТипов("Число"));
	ТабПоказатели.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	ТабПродавцы = Новый ТаблицаЗначений();
	ТабПродавцы.Колонки.Добавить("День", Новый ОписаниеТипов("Дата"));
	ТабПродавцы.Колонки.Добавить("id_prod_1C", Новый ОписаниеТипов("Число"));
	ТабПродавцы.Колонки.Добавить("Пч", Новый ОписаниеТипов("Число"));
	ТабПродавцы.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	ТабЗОтчеты = Новый ТаблицаЗначений();
	ТабЗОтчеты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабЗОтчеты.Колонки.Добавить("Number", Новый ОписаниеТипов("Строка"));
	ТабЗОтчеты.Колонки.Добавить("CashID", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("BaseSum", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("SummBonus", Новый ОписаниеТипов("Число"));
	ТабЗОтчеты.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТТ = ТабТТ.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			СтрокаДоб = ТаблицаСДаннымиПоКассам.Добавить();
			СтрокаДоб.id_tt 		= СтрокаТТ.id_tt;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.Сумма 		= Rs.Fields("Summa").Value;   
			СтрокаДоб.СуммаВозвратаНал 			= Rs.Fields("SummaVozvratNal").Value;
			СтрокаДоб.СуммаВозврата201Нал 		= Rs.Fields("SummaVozvrat201Nal").Value;
			СтрокаДоб.СуммаВозвратаБезНал 		= Rs.Fields("SummaVozvratBezNal").Value;
			СтрокаДоб.СуммаВозврата201БезНал 	= Rs.Fields("SummaVozvrat201BezNal").Value;
			СтрокаДоб.Безнал 		= Rs.Fields("Beznal").Value;
			СтрокаДоб.ОплатаБаллами = Rs.Fields("SummaBallami").Value;
			СтрокаДоб.СкидкаКопеек 	= Rs.Fields("SkidkaKopeek").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаТТ = ТабТТ.Найти(Rs.Fields("ShopNo").Value, "НомерТочки");
			СтрокаДоб = ТаблицаСДаннымиПоКассамВозвраты.Добавить();
			СтрокаДоб.id_tt 		= СтрокаТТ.id_tt;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.CheckUID 		= СокрЛП(Rs.Fields("CheckUID").Value);
			СтрокаДоб.СуммаВозврата201Нал 		= Rs.Fields("SummaVozvrat201Nal").Value;
			СтрокаДоб.СуммаВозврата201БезНал 	= Rs.Fields("SummaVozvrat201BezNal").Value;
			СтрокаДоб.СуммаПоНдс10 	= Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаПоНдс18 	= Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПоказатели.Добавить();
			СтрокаДоб.Дата 		= Rs.Fields("Дата").Value;
			СтрокаДоб.Kon_ost 		= Rs.Fields("Kon_ost").Value;
			СтрокаДоб.Inkass 		= Rs.Fields("Inkass").Value;
			СтрокаДоб.Vremya 	= Rs.Fields("Vremya").Value;
			СтрокаДоб.Temra_1 	= Rs.Fields("Temra_1").Value;
			СтрокаДоб.Temra_2 	= Rs.Fields("Temra_2").Value;
			СтрокаДоб.Temra_1m 	= Rs.Fields("Temra_1m").Value;
			СтрокаДоб.Temra_2m 	= Rs.Fields("Temra_2m").Value;
			СтрокаДоб.ShopNo 	= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПродавцы.Добавить();
			СтрокаДоб.День 		= Rs.Fields("День").Value;
			СтрокаДоб.id_prod_1C 		= Rs.Fields("id_prod_1C").Value;
			СтрокаДоб.Пч 		= Rs.Fields("Пч").Value;
			СтрокаДоб.ShopNo 	= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs = rs.NextRecordset();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабЗОтчеты.Добавить();
			СтрокаДоб.Дата 			= Rs.Fields("Дата").Value;
			СтрокаДоб.Number 		= Rs.Fields("Number").Value;
			СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
			СтрокаДоб.BaseSum 		= Rs.Fields("BaseSum").Value;
			СтрокаДоб.SummBonus 	= Rs.Fields("SummBonus").Value;
			СтрокаДоб.ShopNo 		= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ТабТемп = ТаблицаСДаннымиПоКассам.Скопировать();
	ТабТемп.Свернуть("id_tt", "Сумма, СуммаВозвратаНал, СуммаВозврата201Нал, СуммаВозвратаБезНал, СуммаВозврата201БезНал, Безнал, ОплатаБаллами, СкидкаКопеек");
	
	Для Каждого СтрокаТемп Из ТабТемп Цикл
		ЗаполнитьЗначенияСвойств(ТабДанные.Добавить(), СтрокаТемп);
	КонецЦикла;	
	
	Для Каждого СтрокаТТ Из ТабТТ Цикл
		СтрокаДанные = ТабДанные.Найти(СтрокаТТ.id_tt, "id_tt");
		Если СтрокаДанные = Неопределено Тогда
			СтрокаДанные = ТабДанные.Добавить();
			СтрокаДанные.id_tt = СтрокаТТ.id_tt;
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИД
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Терминалы.Ссылка) КАК Терминал,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Терминалы.Ссылка) КАК КоличествоТерминалов,
	               |	Терминалы.Владелец КАК ТорговаяТочка
	               |ИЗ
	               |	Справочник.Терминалы КАК Терминалы
	               |ГДЕ
				   |	" + ?(МассивID_TT = Неопределено, "ИСТИНА", "Терминалы.Владелец.id_TT В (&МассивId_TT)") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Терминалы.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Ссылка КАК Ссылка,
	               |	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	               //|	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
				   |	" + ?(МассивID_TT = Неопределено, "", "И ЛистУчета.ТорговаяТочка.id_TT В (&МассивId_TT)") + "
	               |;
	               |
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И Номенклатура.id_tov > 0
				   |	И Номенклатура.БезОстатков = ЛОЖЬ
				   |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка,
	               |	ОсновныеСредства.ЗаводскойНомер,
				   |	ВЫБОР
					|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
					|		ТОГДА ВЫБОР
					|				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
					|						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &ДатаНач
					|					ТОГДА ЛОЖЬ
					|				ИНАЧЕ ИСТИНА
					|			КОНЕЦ
					|	ИНАЧЕ ЛОЖЬ
					|КОНЕЦ КАК ЭтоККМ,
					|ВЫБОР
					|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
					|		ТОГДА ИСТИНА
					|	ИНАЧЕ ВЫБОР
					|			КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
					|					И ОсновныеСредства.ДатаПереходаЧПМВККМ > &ДатаНач
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ ЛОЖЬ
					|		КОНЕЦ
					|КОНЕЦ КАК ЭтоЧПМ
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.Наименование ПОДОБНО &ККМ ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЛистУчета.КонечныйОстаток,
				   |	ЛистУчета.ТорговаяТочка,
				   |	ЛистУчета.ТорговаяТочка.id_tt КАК id_tt
				   |ИЗ
				   |	Документ.ЛистУчета КАК ЛистУчета
				   |ГДЕ
				   |	ЛистУчета.Проведен = ИСТИНА
				   |	И НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, -1)
				   |	" + ?(МассивID_TT = Неопределено, "", "И ЛистУчета.ТорговаяТочка.id_tt В (&МассивId_TT)") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПродавцов.Сотрудник,
				   |	ТабельРаботыПродавцов.ТорговаяТочка,
				   |	ТабельРаботыПродавцов.СвойствоПродавца
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
				   |ГДЕ
				   |	ТабельРаботыПродавцов.Период = &ДатаНач
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СотрудникиАутсорсинг.Ссылка,
				   |	СотрудникиАутсорсинг.ИД
				   |ИЗ
				   |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СоответствиеОбъектРольСрезПоследних.Объект КАК ТорговаяТочка,
				   |	МАКСИМУМ(Пользователи.Ссылка) КАК Пользователь
				   |ИЗ
				   |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаСрезаРоли, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
				   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				   |			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
				   |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
				   |			И (РолиПользователейСоставРоли.НомерСтроки = 1)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СоответствиеОбъектРольСрезПоследних.Объект
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыКассиров.Сотрудник,
				   |	ТабельРаботыКассиров.ТорговаяТочка,
				   |	ТабельРаботыКассиров.КоличествоЧасов,
				   |	ТабельРаботыКассиров.СвойствоСотрудника,
				   |	ТабельРаботыКассиров.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
				   |ГДЕ
				   |	ТабельРаботыКассиров.Период = &ДатаНач
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыУборщиц.Сотрудник,
				   |	ТабельРаботыУборщиц.ТорговаяТочка,
				   |	ТабельРаботыУборщиц.КоличествоЧасов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
				   |ГДЕ
				   |	ТабельРаботыУборщиц.Период = &ДатаНач
				   //+++АК mika 2018.04.06 ИП-00018000
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПекарей.Сотрудник,
				   |	ТабельРаботыПекарей.ТорговаяТочка,
				   |	ТабельРаботыПекарей.КоличествоЧасов,
				   |	ТабельРаботыПекарей.СвойствоСотрудника,
				   |	ТабельРаботыПекарей.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПекарей КАК ТабельРаботыПекарей
				   |ГДЕ
				   |	ТабельРаботыПекарей.Период = &ДатаНач";
				   //---АК mika ИП-00018000
				   
	Запрос.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон"		, КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаСрезаРоли", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("МассивId_TT"	, МассивID_TT);
	Запрос.УстановитьПараметр("МассивНомера", МассивНомерМагазина);
	Запрос.УстановитьПараметр("ККМ"			, "%ККМ%");
	Запрос.УстановитьПараметр("ЧПМ"			, "%ЧПМ%");
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если ТабДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	ТабОрганизации 	= Результаты[0].Выгрузить();
	ТабТерминалы 	= Результаты[1].Выгрузить();
	ТабЛистыУчета 	= Результаты[2].Выгрузить();
	ТабНоменклатура = Результаты[3].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");
	ТабКешККМ 		= Результаты[4].Выгрузить();
	ТабЛистыУчетаПрошлыйДень 	= Результаты[5].Выгрузить();
	ТабСтПродавцы 				= Результаты[6].Выгрузить();
	ТабСотрудникиАутсорс = Результаты[7].Выгрузить();
	ТабПривязкиПоРолям = Результаты[8].Выгрузить();
	ТабТабельКассиры = Результаты[9].Выгрузить();
	ТабТабельУборщицы = Результаты[10].Выгрузить();
	ТабТабельПекари = Результаты[11].Выгрузить(); //+++АК mika 2018.04.06 ИП-00018000
	
	Для Каждого СтрокаПоказатель Из ТабПоказатели Цикл
		СтрокаТТ = ТабТТ.Найти(СтрокаПоказатель.ShopNo, "НомерТочки");
		СтрокаДанные = ТабДанные.Найти(СтрокаТТ.id_tt, "id_tt");
		Если СтрокаДанные = Неопределено Тогда
			СтрокаДанные = ТабДанные.Добавить();
			СтрокаДанные.id_TT = СтрокаТТ.id_tt;
		КонецЕсли;
		СтрокаЛистПрошлыйПериод = ТабЛистыУчетаПрошлыйДень.Найти(СтрокаТТ.id_tt, "id_tt");
		Если СтрокаЛистПрошлыйПериод <> Неопределено Тогда
			СтрокаДанные.НачальныйОстаток = СтрокаЛистПрошлыйПериод.КонечныйОстаток;
		КонецЕсли;	
		СтрокаДанные.ВремяДоставки 		= СтрокаПоказатель.Vremya;
		СтрокаДанные.КонечныйОстаток 	= СтрокаПоказатель.Kon_ost;
		СтрокаДанные.СуммаИнкассации 	= СтрокаПоказатель.Inkass;
		СтрокаДанные.ТемператураХолодильникаУтром 	= СтрокаПоказатель.Temra_1;
		СтрокаДанные.ТемператураХолодильникаВечером = СтрокаПоказатель.Temra_2;
		СтрокаДанные.ТемператураМорозильникаУтром 	= СтрокаПоказатель.Temra_1m;
		СтрокаДанные.ТемператураМорозильникаВечером = СтрокаПоказатель.Temra_2m;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		Если СтрокаДанные.НачальныйОстаток = 0 Тогда
			СтрокаЛистПрошлыйПериод = ТабЛистыУчетаПрошлыйДень.Найти(СтрокаТТ.id_tt, "id_tt");
			Если СтрокаЛистПрошлыйПериод <> Неопределено Тогда
				СтрокаДанные.НачальныйОстаток = СтрокаЛистПрошлыйПериод.КонечныйОстаток;
			КонецЕсли;
			Если СтрокаДанные.КонечныйОстаток = 0 Тогда
				СтрокаДанные.КонечныйОстаток = СтрокаДанные.НачальныйОстаток;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
	
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокаТТ = ТабТТ.Найти(СтрокаДанные.id_TT, "id_TT");
		Если СтрокаТТ = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаДанные.id_TT) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПродавцы = ТабПродавцы.НайтиСтроки(Новый Структура("ShopNo", СтрокаТТ.НомерТочки));
		
		//Если НЕ ЗначениеЗаполнено(СтрокаДанные.ЕстьЧек800) И СтрокиПродавцы.Количество() = 0 Тогда
		//	???ZEZA Продолжить; //грузим всегда - написал Валера в письме от 17.02.2014
		//КонецЕсли;
		
		СтрокаДанные.СтруктурнаяЕдиница = СтрокаТТ.Ссылка;
		//СтрокаТТЮЛ = ТабТТЮЛ.Найти(СтрокаДанные.id_TT, "id_TT");
		//Если СтрокаТТЮЛ <> Неопределено
		//	И ЗначениеЗаполнено(СтрокаТТЮЛ.ID_UL) Тогда
		//	СтрокаОрг = ТабОрганизации.Найти(СтрокаТТЮЛ.ID_UL, "ИД");
		//	Если СтрокаОрг <> Неопределено Тогда
		//		СтрокаДанные.Организация = СтрокаОрг.Ссылка;
		//	КонецЕсли;	
		//КонецЕсли;
		
		СтрокаДанные.Организация = СтрокаТТ.Организация;
		
		СтрокаСДокументом = ТабЛистыУчета.Найти(СтрокаДанные.СтруктурнаяЕдиница, "ТорговаяТочка");
		Если СтрокаСДокументом = Неопределено Тогда
			ЛистОбъект = Документы.ЛистУчета.СоздатьДокумент();
			ЛистОбъект.Дата 		= НачалоДня(ДатаОбработки);
			//ЛистОбъект.ЦФО = СтрокаДанные.ЦФО;
		Иначе
			
			////+++ZEZA //??? заглушка. подумать. пока решили не перезатирать листы учета если они проведены
			//Если СтрокаСДокументом.Ссылка.Проведен Тогда
			//	Продолжить;
			//КонецЕсли;	
			////---ZEZA
			
			//
			ЛистОбъект = СтрокаСДокументом.Ссылка.ПолучитьОбъект();
			Если ЛистОбъект.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		//
		ЛистОбъект.Организация 	= СтрокаДанные.Организация;
		ЛистОбъект.ТорговаяТочка = СтрокаДанные.СтруктурнаяЕдиница;
		ЗаполнитьЗначенияСвойств(ЛистОбъект, СтрокаДанные,, "Организация, СуммаИнкассации, НачальныйОстаток, КонечныйОстаток");
		//ЗаполнитьЗначенияСвойств(ЛистОбъект, СтрокаДанные,, "Дата, Организация, НачальныйОстаток, КонечныйОстаток");
		
		//
		ЛистОбъект.ЗагруженоИзAccess = Истина;
		
		//
		ВозвратСумма = СтрокаДанные.СуммаВозвратаНал + СтрокаДанные.СуммаВозврата201Нал;
		
		//
		ЛистОбъект.СуммаДокумента = СтрокаДанные.Сумма - ВозвратСумма;
		ЛистОбъект.СуммаЭквайринг = СтрокаДанные.Безнал - СтрокаДанные.СуммаВозвратаБезНал;
		//ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами;
		ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами - СтрокаДанные.Безнал;
		ЛистОбъект.ВозвратПокупателю 		= СтрокаДанные.СуммаВозврата201Нал;
		ЛистОбъект.СторноОшибочно 			= СтрокаДанные.СуммаВозвратаНал;
		ЛистОбъект.ВозвратПокупателюБезнал 	= СтрокаДанные.СуммаВозврата201БезНал;
		
		//
		Если ЛистОбъект.ЭтоНовый() Тогда
			ЛистОбъект.НачальныйОстаток = СтрокаДанные.НачальныйОстаток;
			ЛистОбъект.КонечныйОстаток 	= СтрокаДанные.КонечныйОстаток;
			ЛистОбъект.СуммаИнкассации 	= СтрокаДанные.СуммаИнкассации;
			ЛистОбъект.ДатаКассовойСмены = ЛистОбъект.Дата + 86400;
		КонецЕсли;	
		//ЛистОбъект.Отклонение = СтрокаДанные.НачальныйОстаток + СтрокаДанные.Сумма - ВозвратСумма - ЛистОбъект.ОплатаБаллами - ЛистОбъект.СкидкаКопеек - ЛистОбъект.СуммаИнкассации - СтрокаДанные.КонечныйОстаток; 
		//ЛистОбъект.Отклонение = СтрокаДанные.НачальныйОстаток + СтрокаДанные.Сумма - ВозвратСумма - ЛистОбъект.ОплатаБаллами - СтрокаДанные.Безнал - ЛистОбъект.СуммаИнкассации - СтрокаДанные.КонечныйОстаток; 
		
		ЛистОбъект.Терминал = СтрокаТТ.Терминал;
		ЛистОбъект.ЦФО		= СтрокаТТ.ЦФО;	
		ЛистОбъект.СтруктурнаяиЕдиницаПриемаИнкассации 	= СтрокаТТ.Склад;
		
		Если ЛистОбъект.СуммаЭквайринг > 0
				И ЛистОбъект.Терминал.Пустая() Тогда
			СтрокаТерминал = ТабТерминалы.Найти(ЛистОбъект.ТорговаяТочка, "ТорговаяТочка");
			Если СтрокаТерминал <> Неопределено Тогда
				КоличествоТерминалов = СтрокаТерминал.КоличествоТерминалов;
			Иначе
				КоличествоТерминалов = 0;
			КонецЕсли;
			
			Если КоличествоТерминалов = 1 Тогда
				ЛистОбъект.Терминал = СтрокаТерминал.Терминал;
			КонецЕсли;
		КонецЕсли;
		
		//если терминала нет, значит и нет оплаты по безналу
		Если НЕ ЗначениеЗаполнено(ЛистОбъект.Терминал)
				И ЛистОбъект.СуммаЭквайринг <> 0 Тогда
			//ничего делать не нужно, просто нужно обнулить сумму безнала
			//ЛистОбъект.СуммаДокумента = СтрокаДанные.Сумма - ВозвратСумма + ЛистОбъект.СуммаЭквайринг;
			ЛистОбъект.СуммаНал = ЛистОбъект.СуммаНал + ЛистОбъект.СуммаЭквайринг - ЛистОбъект.ВозвратПокупателюБезнал;
			ЛистОбъект.СуммаЭквайринг = 0;
			ЛистОбъект.ВозвратПокупателюБезнал = 0;
			//ЛистОбъект.СуммаНал = ЛистОбъект.СуммаДокумента - ЛистОбъект.ОплатаБаллами + ЛистОбъект.СуммаЭквайринг;
		КонецЕсли;
		
		//ТабТовары.Очистить();
		
		//ТабКорректировкиАвтоматические = Новый ТаблицаЗначений();
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Дата");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("КодОперации");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("АвтоматическоеДвижение");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Номенклатура");
		//ТабКорректировкиАвтоматические.Колонки.Добавить("Количество");
		//ТаблицаОстатков = ВнешниеДанные.ПолучитьТаблицуОстатков(ЛистОбъект.Дата, ЛистОбъект.Дата, ЛистОбъект.ТорговаяТочка);
		//СтрокиДанныеТовар = ТабДанныеТовары.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
		ТабТовары = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(ЛистОбъект.Дата, ЛистОбъект.Дата, ЛистОбъект.ТорговаяТочка);
		ОбщаяСуммаПродажТоваров = 0;
		Для Каждого СтрокаДанныеТовар Из ТабТовары Цикл
			//СтрокаНоменклатура = ТабНоменклатура.Найти(СтрокаДанныеТовар.id_tov, "id_tov");
			//Если СтрокаНоменклатура = Неопределено Тогда
			//	Продолжить;
			//КонецЕсли;
			//СтрокаДобавлено = ТабТовары.Добавить();
			//ЗаполнитьЗначенияСвойств(СтрокаДобавлено, СтрокаДанныеТовар);
			//СтрокаДобавлено.ТТ = СтрокаДанные.СтруктурнаяЕдиница;
			//СтрокаДобавлено.Номенклатура = СтрокаНоменклатура.Ссылка;
			//Если СтрокаДобавлено.Продано <= 0 Тогда
			//	СтрокаДанныеТовар.СуммаПродаж = 0;
			//КонецЕсли;	
			//ОбщаяСуммаПродажТоваров = ОбщаяСуммаПродажТоваров + СтрокаДанныеТовар.СуммаПродаж;
			ОбщаяСуммаПродажТоваров = ОбщаяСуммаПродажТоваров + СтрокаДанныеТовар.Сумма;
			//СтрокаОстатки = ТаблицаОстатков.Найти(СтрокаНоменклатура.Ссылка, "Номенклатура");
			//НачОстаток = 0;
			//КонОстаток = 0;
			//Если СтрокаОстатки <> Неопределено Тогда
			//	НачОстаток = СтрокаОстатки.НачОстаток;
			//	КонОстаток = СтрокаОстатки.КонОстаток;
			//КонецЕсли;
			//КонОстатокРасчетный = НачОстаток + СтрокаДобавлено.Поступило + СтрокаДобавлено.Разница - СтрокаДобавлено.Продано - СтрокаДобавлено.Дегустация - СтрокаДобавлено.Списание - СтрокаДобавлено.СписаниеПоКачеству
			//			- СтрокаДобавлено.Бой - СтрокаДобавлено.Акция;
			//Если КонОстатокРасчетный <> КонОстаток Тогда
			//	СтрокаКорректировка = ТабКорректировкиАвтоматические.Добавить();
			//	СтрокаКорректировка.Дата = НачалоДня(ЛистОбъект.Дата);
			//	СтрокаКорректировка.КодОперации = 520;
			//	СтрокаКорректировка.АвтоматическоеДвижение = Истина;
			//	СтрокаКорректировка.Номенклатура = СтрокаНоменклатура.Ссылка;
			//	СтрокаКорректировка.Количество = КонОстаток - КонОстатокРасчетный;
			//КонецЕсли;				
		КонецЦикла;	
		
		Если ТабТовары.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДатаОбработки >= '20171001' Тогда
			Если ЛистОбъект.ЭтоНовый() Тогда
				СтрокиПродавцы = ТабВыходыСотрудников.НайтиСтроки(Новый Структура("Магазин", ЛистОбъект.ТорговаяТочка));
				Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
					Если СтрокаПродавец.Аутсорсер Тогда
						СтрокаДоб = ЛистОбъект.СотрудникиАутсорс.Добавить();
						СтрокаДоб.Сотрудник = СтрокаПродавец.Сотрудник;
						СтрокаДоб.ДатаПервого = СтрокаПродавец.ДатаПрихода;
						СтрокаДоб.ДатаПоследнего = СтрокаПродавец.ДатаУхода;
						СтрокаДоб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
					Иначе
						СтрокиКассир = ТабТабельКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
						СтрокиУборщица = ТабТабельУборщицы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
						СтрокиПекарь   = ТабТабельПекари.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка)); //+++АК mika 2018.04.06 ИП-00018000
						Если СтрокиКассир.Количество() > 0 Тогда
							СтрокаТаб = ЛистОбъект.Кассиры.Добавить();
							СтрокаТаб.Кассир = СтрокаПродавец.Сотрудник;
							СтрокаТаб.СвойствоСотрудника = СтрокиКассир[0].СвойствоСотрудника;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокаТаб.ЭкстренныйВызов = СтрокиКассир[0].ЭкстренныйВызов;
						ИначеЕсли СтрокаПродавец.Промоутер Тогда
							СтрокаТаб = ЛистОбъект.Промоутеры.Добавить();
							СтрокаТаб.Промоутер = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
						ИначеЕсли СтрокиУборщица.Количество() > 0 Тогда
							СтрокаТаб = ЛистОбъект.Уборщицы.Добавить();
							СтрокаТаб.ФизЛицо = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
						ИначеЕсли СтрокиПекарь.Количество() > 0 Тогда //+++АК mika 2018.04.06 ИП-00018000
							СтрокаТаб = ЛистОбъект.Пекари.Добавить();
							СтрокаТаб.ФизЛицо = СтрокаПродавец.Сотрудник;
							СтрокаТаб.СвойствоСотрудника = СтрокиПекарь[0].СвойствоСотрудника;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокаТаб.ЭкстренныйВызов = СтрокиПекарь[0].ЭкстренныйВызов;
						Иначе
							СтрокаТаб = ЛистОбъект.Продавцы.Добавить();
							СтрокаТаб.Продавец = СтрокаПродавец.Сотрудник;
							СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
							СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
							СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, ЛистОбъект.ТорговаяТочка));
							Если СтрокиСтпродавцы.Количество() > 0 Тогда
								Если СтрокиСтпродавцы[0].СвойствоПродавца = 2
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 3
									ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 4 Тогда
									СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
								КонецЕсли;	
								СтрокаТаб.ЭкстренныйВызов = СтрокиСтпродавцы[0].ЭкстренныйВызов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЛистОбъект.ЭтоНовый() Тогда
				ЛистОбъект.Продавцы.Очистить();
				Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаПродавец.id_prod_1C) Тогда
						Продолжить;
					КонецЕсли;	
					Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(СтрокаПродавец.id_prod_1C, "ЧГ=0"), 10));
					Если ЛистОбъект.Продавцы.Найти(Продавец, "Продавец") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					Если ЗначениеЗаполнено(Продавец) Тогда
						СтрокаТаб = ЛистОбъект.Продавцы.Добавить();
						СтрокаТаб.Продавец = Продавец;
						СтрокаТаб.Пч = СтрокаПродавец.Пч;
						СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаТаб.Продавец, ЛистОбъект.ТорговаяТочка));
						Если СтрокиСтпродавцы.Количество() > 0 Тогда
							СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаКешАутсорс = ТабСотрудникиАутсорс.Найти(СтрокаПродавец.id_prod_1C, "ИД");
					Если СтрокаКешАутсорс <> Неопределено Тогда
						СтрокаДоб = ЛистОбъект.СотрудникиАутсорс.Добавить();
						СтрокаДоб.Сотрудник = СтрокаКешАутсорс.Ссылка;
						СтрокаДоб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
						СтрокаДоб.ДатаПервого = СтрокаПродавец.ДатаПервого;
						СтрокаДоб.ДатаПоследнего = ?(СтрокаПродавец.ДатаПоследнего = СтрокаПродавец.ДатаПервого, СтрокаПродавец.ДатаПервого + 1, СтрокаПродавец.ДатаПоследнего);
						Если СтрокаДоб.КоличествоЧасов < 0 Тогда
							СтрокаДоб.КоличествоЧасов = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТаблицаДубли = Документы.ЛистУчета.ЕстьДублиПродавцов(ЛистОбъект.Продавцы.ВыгрузитьКолонку("Продавец"), ЛистОбъект.Дата, ЛистОбъект.Ссылка);
				КолвоСтрок = ЛистОбъект.Продавцы.Количество();
				Для н = 1 по КолвоСтрок Цикл
					Если ТаблицаДубли.Найти(ЛистОбъект.Продавцы[КолвоСтрок - н].Продавец, "Продавец") <> Неопределено Тогда
						ЛистОбъект.Продавцы.Удалить(КолвоСтрок - н);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
		
		ЛистОбъект.ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
		//ЛистОбъект.ДополнительныеСвойства.Вставить("ТоварыИзменение", ТабКорректировкиАвтоматические);
		
		ЛистОбъект.ОплатыПоБанковскимКартам.Очистить();
		СтрокиБезнал = ТаблицаСДаннымиПоКассам.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
		Для Каждого СтрокаБезнал Из СтрокиБезнал Цикл
			Если СтрокаБезнал.Безнал = 0 Тогда
				Продолжить;
			КонецЕсли;	
			Если ЛистОбъект.Организация = ОргСП Тогда
				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаБезнал.CashID, "ЧРГ=; ЧГ=0"), Истина));
			Иначе
				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаБезнал.CashID, "ЧРГ=; ЧГ=0"), Истина));
			КонецЕсли;	
			Если СтрокиККМ.Количество() > 0 Тогда
				СтрокаДоб = ЛистОбъект.ОплатыПоБанковскимКартам.Добавить();
				СтрокаДоб.ОсновноеСредство = СтрокиККМ[0].Ссылка;
				СтрокаДоб.Сумма = СтрокаБезнал.Безнал;
				СтрокаДоб.СуммаВозврата = СтрокаБезнал.СуммаВозвратаБезНал + СтрокаБезнал.СуммаВозврата201БезНал;
			КонецЕсли;
		КонецЦикла;
		
		Если ЛистОбъект.НеПерезагружатьЗОтчеты = Ложь Тогда
			ЗОтчетыКеш = ЛистОбъект.ZОтчеты.Выгрузить();
			ЛистОбъект.ZОтчеты.Очистить();
			СтрокиЗОтчеты = ТабЗОтчеты.НайтиСтроки(Новый Структура("ShopNo", СтрокаТТ.НомерТочки));
			Для Каждого СтрокаЗОтчет Из СтрокиЗОтчеты Цикл
				Если ЛистОбъект.Организация = ОргСП Тогда
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0"), Истина));
				Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0"), Истина));
				КонецЕсли;	
				Если СтрокиККМ.Количество() > 0 Тогда
					СтрокаДоб = ЛистОбъект.ZОтчеты.Добавить();
					СтрокаДоб.Касса 	= СтрокиККМ[0].Ссылка;
					СтрокаДоб.ZОтчет 	= СтрокаЗОтчет.Number;
					СтрокаДоб.Сумма 	= СтрокаЗОтчет.BaseSum - СтрокаЗОтчет.SummBonus;
					СтрокиКешЗ = ЗОтчетыКеш.НайтиСтроки(Новый Структура("Касса, ZОтчет", СтрокаДоб.Касса, СтрокаДоб.ZОтчет));
					Если СтрокиКешЗ.Количество() > 0 Тогда
						СтрокаДоб.ВведенныйОстаток 	= СтрокиКешЗ[0].ВведенныйОстаток;
						//СтрокаДоб.СуммаПоНал 		= СтрокиКешЗ[0].СуммаПоНал;
						//СтрокаДоб.СуммаПоБезнал 	= СтрокиКешЗ[0].СуммаПоБезнал;
					КонецЕсли;
					Если СтрокаДоб.СуммаПоНал = 0
							И СтрокаДоб.СуммаПоБезнал = 0 Тогда
						СтрокиСБезналом = ЛистОбъект.ОплатыПоБанковскимКартам.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДоб.Касса));
						Если СтрокиСБезналом.Количество() > 0 Тогда
							СтрокаДоб.СуммаПоБезнал = Мин(СтрокиСБезналом[0].Сумма, СтрокаДоб.Сумма);
						КонецЕсли;	
						СтрокаДоб.СуммаПоНал = СтрокаДоб.Сумма - СтрокаДоб.СуммаПоБезнал;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
			
		Если НЕ ЛистОбъект.АктыРедактировались Тогда
			ЛистОбъект.АктыКМ3.Очистить();
			ЛистОбъект.ЧекиПоАктамКМ3.Очистить();
			СтрокиПоКассамДетально = ТаблицаСДаннымиПоКассамВозвраты.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
			Для Каждого СтрокаПоКассеДетально Из СтрокиПоКассамДетально Цикл
				Если ЛистОбъект.Организация = ОргСП Тогда
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
				Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
				КонецЕсли;
				Коэффициент10 = ?(СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18 = 0, 1, СтрокаПоКассеДетально.СуммаПоНДС10 / (СтрокаПоКассеДетально.СуммаПоНДС10 + СтрокаПоКассеДетально.СуммаПоНДС18));
				Если СтрокаПоКассеДетально.СуммаВозврата201Нал > 0 Тогда
					СтрокаТаб = ЛистОбъект.АктыКМ3.Добавить();
					СтрокаТаб.КлючСтроки 	= Строка(Новый УникальныйИдентификатор());
					СтрокаТаб.ОсновноеСредство = ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.Сумма 		= СтрокаПоКассеДетально.СуммаВозврата201Нал;
					СтрокаТаб.СуммаПоНДС10 	= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 	= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					СтрокаРасшифровка = ЛистОбъект.ЧекиПоАктамКМ3.Добавить();
					СтрокаРасшифровка.КлючСтрокиАкта 	= СтрокаТаб.КлючСтроки;
					СтрокаРасшифровка.УИНЧека 			= СтрокаПоКассеДетально.CheckUID;
					СтрокаРасшифровка.СуммаЧека 		= СтрокаПоКассеДетально.СуммаВозврата201Нал;
				КонецЕсли;
				Если СтрокаПоКассеДетально.СуммаВозврата201БезНал > 0 Тогда
					СтрокаТаб = ЛистОбъект.АктыКМ3.Добавить();
					СтрокаТаб.КлючСтроки 		= Строка(Новый УникальныйИдентификатор());
					СтрокаТаб.ОсновноеСредство 	= ?(СтрокиККМ.Количество() > 0, СтрокиККМ[0].Ссылка, Неопределено);
					СтрокаТаб.Сумма 			= СтрокаПоКассеДетально.СуммаВозврата201БезНал;
					СтрокаТаб.ЭтоВозвратБезнал 	= Истина;
					СтрокаТаб.АктПолучен = Истина;
					СтрокаТаб.СуммаПоНДС10 		= СтрокаТаб.Сумма * Коэффициент10;
					СтрокаТаб.СуммаПоНДС18 		= СтрокаТаб.Сумма - СтрокаТаб.СуммаПоНДС10;
					
					СтрокаРасшифровка = ЛистОбъект.ЧекиПоАктамКМ3.Добавить();
					СтрокаРасшифровка.КлючСтрокиАкта 	= СтрокаТаб.КлючСтроки;
					СтрокаРасшифровка.УИНЧека 			= СтрокаПоКассеДетально.CheckUID;
					СтрокаРасшифровка.СуммаЧека 		= СтрокаПоКассеДетально.СуммаВозврата201БезНал;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
		//ЛистОбъект.ОплатыПоБанковскимКартам.Очистить();
		//ЛистОбъект.Выручка.Очистить();
		//ЛистОбъект.ОплатыБонусами.Очистить();
		//СтрокиПоКассамДетально = ТаблицаСДаннымиПоКассам.НайтиСтроки(Новый Структура("id_TT", СтрокаДанные.id_TT));
		//Для Каждого СтрокаПоКассеДетально Из СтрокиПоКассамДетально Цикл
		//	Если ЛистОбъект.Организация = ОргСП Тогда
		//		СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
		//	Иначе
		//		СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаПоКассеДетально.CashID, "ЧРГ=; ЧГ=0"), Истина));
		//	КонецЕсли;
		//	Если СтрокаПоКассеДетально.ОплатаБаллами <> 0 Тогда
		//		СтрокаД = ЛистОбъект.ОплатыБонусами.Добавить();
		//		СтрокаД.ОсновноеСредство = ?(СтрокиККМ.Количество() = 0, Неопределено, СтрокиККМ[0].Ссылка);
		//		СтрокаД.Сумма = СтрокаПоКассеДетально.ОплатаБаллами;
		//	КонецЕсли;
		//	Если (СтрокаПоКассеДетально.Безнал - СтрокаПоКассеДетально.СуммаВозвратаБезНал) <> 0
		//		ИЛИ СтрокаПоКассеДетально.СуммаВозврата201БезНал <> 0 Тогда
		//		СтрокаД = ЛистОбъект.ОплатыПоБанковскимКартам.Добавить();
		//		СтрокаД.ОсновноеСредство = ?(СтрокиККМ.Количество() = 0, Неопределено, СтрокиККМ[0].Ссылка);
		//		СтрокаД.Сумма = СтрокаПоКассеДетально.Безнал - СтрокаПоКассеДетально.СуммаВозвратаБезНал;
		//		СтрокаД.СуммаВозврата = СтрокаПоКассеДетально.СуммаВозврата201БезНал;
		//	КонецЕсли;	
		//	СуммаНал = СтрокаПоКассеДетально.Сумма - СтрокаПоКассеДетально.СуммаВозвратаНал - СтрокаПоКассеДетально.Безнал;
		//	Если СуммаНал <> 0 ИЛИ СтрокаПоКассеДетально.
		//КонецЦикла;	
		
		//СтрокиСБонусом = ТабБонусы.НайтиСтроки(Новый Структура("ShopNo, Date", ЛистОбъект.ТорговаяТочка.НомерТочки, НачалоДня(ЛистОбъект.Дата)));
		//Если СтрокиСБонусом.Количество() > 0 Тогда
		//	ЛистОбъект.НачисленныйБонусПокупателям = СтрокиСБонусом[0].BonusValue;
		//КонецЕсли;	
		
		//РасчитатьРазницуПоТоварамДляЛиста(ЛистОбъект, ТабТовары);
		
		//расчитаем отклонение
		//ЛистОбъект.Отклонение = ЛистОбъект.НачальныйОстаток + ЛистОбъект.СуммаДокумента + ЛистОбъект.КорректировкаZ - ЛистОбъект.ОплатаБаллами - ЛистОбъект.СуммаЭквайринг - ЛистОбъект.КорректировкаБезнал - ЛистОбъект.СуммаИнкассации - ЛистОбъект.КонечныйОстаток; 
		
		ЛистОбъект.Отклонение = -(ЛистОбъект.НачальныйОстаток + ЛистОбъект.СуммаДокумента + ЛистОбъект.КорректировкаZ - ЛистОбъект.ОплатаБаллами - ЛистОбъект.СуммаЭквайринг - ЛистОбъект.КорректировкаБезнал - ЛистОбъект.СуммаИнкассации - ЛистОбъект.КонечныйОстаток); 
		
		//расчитаем отклоенние по товарам
		//ЛистОбъект.РазницаПоТоварам = ОбщаяСуммаПродажТоваров - ЛистОбъект.Отклонение - ЛистОбъект.СуммаДокумента - ЛистОбъект.ВозвратПокупателю;// - ЛистОбъект.СкидкаКопеек + ЛистОбъект.СторноОшибочно;
		
		ЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если НЕ ЗначениеЗаполнено(ЛистОбъект.Ссылка.Расчетчик) Тогда
			РазницаДеньги = ЛистОбъект.Ссылка.Отклонение;
			РазницаДеньги = РазницаДеньги * ?(РазницаДеньги < 0, -1, 1);
			РазницаТовары = ЛистОбъект.Ссылка.РазницаПоТоварам;
			РазницаТовары = РазницаТовары * ?(РазницаТовары < 0, -1, 1);
			Если РазницаДеньги <= 1
				И РазницаТовары <= 400 Тогда
				СтрокаКеш = ТабПривязкиПоРолям.Найти(ЛистОбъект.ТорговаяТочка, "ТорговаяТочка");
				Если СтрокаКеш <> Неопределено
					И ЗначениеЗаполнено(СтрокаКеш.Пользователь) Тогда
					ДокОбРасчетчик = ЛистОбъект.Ссылка.ПолучитьОбъект();
					ДокОбРасчетчик.Расчетчик = СтрокаКеш.Пользователь;
					ДокОбРасчетчик.Обработан = Истина;
					ДокОбРасчетчик.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(ДатаОбработки, МассивНомерМагазина = Неопределено, МассивID_TT = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрогрузитьДанныеПоТерминаламИзЧеков(ДатаОбработки);
	
	Если ДатаОбработки >= '20171001' Тогда
		ТабВыходыСотрудников = ПолучитьТаблицуПродавцовПоВыходам(ДатаОбработки);
	КонецЕсли;
	
	ЗапросТТ = Новый Запрос();
	ЗапросТТ.УстановитьПараметр("ЕстьОтборПоТТ"	, ?(ТипЗнч(МассивID_TT) = Тип("Массив") И МассивID_TT.Количество() > 0, Истина, Ложь));
	ЗапросТТ.УстановитьПараметр("МассивId_TT"	, МассивID_TT);
	ЗапросТТ.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаОбработки));
	ЗапросТТ.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.НомерТочки,
	|	СтруктурныеЕдиницы.id_TT,
	|	СтруктурныеЕдиницы.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦФО,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтруктурныеЕдиницы.Организация
	|		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	СтруктурныеЕдиницы.Терминал,
	|	СтруктурныеЕдиницы.ДатаЗапускаНовойСистемыУчета
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаНач, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	//+++АК KIRN 2018.03.06 ИП-00018035 
	|	(СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Перекресток) И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Пятерочка))
	//---АК KIRN 
	|	И (НЕ &ЕстьОтборПоТТ
	|			ИЛИ СтруктурныеЕдиницы.id_TT В (&МассивId_TT))
	|	И СтруктурныеЕдиницы.НомерТочки <> 999";	
	ТабТТ = ЗапросТТ.Выполнить().Выгрузить();
	
	СтрокаОтбораТТ = "(9999999)";
	Если ТипЗнч(МассивНомерМагазина) = Тип("Массив") Тогда
		Для Каждого ТекТТ Из МассивНомерМагазина Цикл
			Если ЗначениеЗаполнено(ТекТТ) Тогда
				СтрокаОтбораТТ = СтрокаОтбораТТ + ", (" + Формат(ТекТТ, "ЧГ=0") + ")";
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчета.Ссылка КАК Ссылка,
	               |	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	               //|	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И ЛистУчета.ТорговаяТочка.НомерТочки В (&МассивНомера)") + "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И Номенклатура.id_tov > 0
				   |	И Номенклатура.БезОстатков = ЛОЖЬ
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
					|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
					|	ОсновныеСредства.ID_SQL,
					|	ЕСТЬNULL(СоответствиеОсновныхСредствТерминаламСрезПоследних.Терминал, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка)) КАК Ссылка
					|ИЗ
					|	Справочник.ОсновныеСредства КАК ОсновныеСредства
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОсновныхСредствТерминалам.СрезПоследних(&ДатаКон, ) КАК СоответствиеОсновныхСредствТерминаламСрезПоследних
					|		ПО ОсновныеСредства.Ссылка = СоответствиеОсновныхСредствТерминаламСрезПоследних.ОсновноеСредство
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
	               |	ЛистУчета.КонечныйОстаток КАК СуммаДокумента,
	               |	ЛистУчета.ТорговаяТочка КАК ТТ
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ЛистУчета.Дата, ДЕНЬ, 1), ДЕНЬ) = &ДатаНач
	               |	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И ЛистУчета.ТорговаяТочка.НомерТочки В (&МассивНомера)") + "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВЗ_Суммы.ТТ,
				   |	СУММА(ВЗ_Суммы.СуммаДокумента) КАК СуммаДокумента
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		РасходИзКассы.СтруктурнаяЕдиница КАК ТТ,
				   |		РасходИзКассы.СуммаДокумента КАК СуммаДокумента
				   |	ИЗ
				   |		Документ.РасходИзКассы КАК РасходИзКассы
				   |	ГДЕ
				   |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &ДатаНач
				   |		И РасходИзКассы.Проведен = ИСТИНА
				   |		И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
				   |	
				   |	ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |	ВЫБРАТЬ
				   |		РасходИзКассы.СтруктурнаяЕдиница,
				   |		РасходИзКассы.СуммаДокумента
				   |	ИЗ
				   |		Документ.РасходИзКассы КАК РасходИзКассы
				   |	ГДЕ
				   |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &ДатаНач
				   |		И РасходИзКассы.Проведен = ИСТИНА
				   |		И РасходИзКассы.СубконтоДт2 = &Фальшивка) КАК ВЗ_Суммы
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВЗ_Суммы.ТТ;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РасходИзКассы.Ссылка КАК Ссылка,
				   |	РасходИзКассы.СтруктурнаяЕдиница КАК ТТ,
				   |	РасходИзКассы.СуммаДокумента КАК СуммаДокумента
				   |ИЗ
				   |	Документ.РасходИзКассы КАК РасходИзКассы
				   |ГДЕ
				   |	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &ДатаНач
				   |	И РасходИзКассы.Проведен = ИСТИНА
				   |	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
				   |	И РасходИзКассы.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
				   |	И РасходИзКассы.СуммаДокумента <> 0
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И РасходИзКассы.СтруктурнаяЕдиница.НомерТочки В (&МассивНомера)") + "
				   |
				   |
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПродавцов.Сотрудник,
				   |	ТабельРаботыПродавцов.ТорговаяТочка,
				   |	ТабельРаботыПродавцов.СвойствоПродавца,
				   |	ТабельРаботыПродавцов.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
				   |ГДЕ
				   |	ТабельРаботыПродавцов.Период = &ДатаНач
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И ТабельРаботыПродавцов.ТорговаяТочка.НомерТочки В (&МассивНомера)") + "
				   |
				   |
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка КАК ТорговаяТочка,
				   |	МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.Сумма) КАК Сумма
				   |ИЗ
				   |	Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка КАК Ссылка,
				   |			МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС) КАК ДействуетС
				   |		ИЗ
				   |			Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
				   |		ГДЕ
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС <= &ДатаКон
				   |		
				   |		СГРУППИРОВАТЬ ПО
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка) КАК ВЗ_Макс
				   |		ПО СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка = ВЗ_Макс.Ссылка
				   |			И СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС = ВЗ_Макс.ДействуетС
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
					|	Терминалы.Ссылка КАК Ссылка,
					|	Терминалы.ID_SQL,
					|	ЕСТЬNULL(СоответствиеОсновныхСредствТерминаламСрезПоследних.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК ОсновноеСредство
					|ИЗ
					|	Справочник.Терминалы КАК Терминалы
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОсновныхСредствТерминалам.СрезПоследних(&ДатаКон, ) КАК СоответствиеОсновныхСредствТерминаламСрезПоследних
					|		ПО Терминалы.Ссылка = СоответствиеОсновныхСредствТерминаламСрезПоследних.Терминал
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
					|	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.CashName КАК ID_SQL,
					|	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал КАК Ссылка,
					|	ПривязкиОборудованияКРабочимМестамСрезПоследних.Касса КАК ОсновноеСредство
					|ИЗ
					|	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаКон, ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
					|;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ФизическиеЛица.Ссылка,
				   |	ФизическиеЛица.Код,
				   |	ФизическиеЛица.Промоутер,
				   |	ФизическиеЛица.ВнештатныйСотрудник
				   |ИЗ
				   |	Справочник.ФизическиеЛица КАК ФизическиеЛица
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СотрудникиАутсорсинг.Ссылка,
				   |	СотрудникиАутсорсинг.ИД
				   |ИЗ
				   |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СоответствиеОбъектРольСрезПоследних.Объект КАК ТорговаяТочка,
				   |	МАКСИМУМ(Пользователи.Ссылка) КАК Пользователь
				   |ИЗ
				   |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаСрезаРоли, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
				   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				   |			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
				   |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
				   |			И (РолиПользователейСоставРоли.НомерСтроки = 1)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СоответствиеОбъектРольСрезПоследних.Объект
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыКассиров.Сотрудник,
				   |	ТабельРаботыКассиров.ТорговаяТочка,
				   |	ТабельРаботыКассиров.КоличествоЧасов,
				   |	ТабельРаботыКассиров.СвойствоСотрудника,
				   |	ТабельРаботыКассиров.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
				   |ГДЕ
				   |	ТабельРаботыКассиров.Период = &ДатаНач
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыГрузчиков.Сотрудник,
				   |	ТабельРаботыГрузчиков.ТорговаяТочка,
				   |	ТабельРаботыГрузчиков.КоличествоЧасов,
				   |	ТабельРаботыГрузчиков.СвойствоСотрудника,
				   |	ТабельРаботыГрузчиков.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыГрузчиков
				   |ГДЕ
				   |	ТабельРаботыГрузчиков.Период = &ДатаНач
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыУборщиц.Сотрудник,
				   |	ТабельРаботыУборщиц.ТорговаяТочка,
				   |	ТабельРаботыУборщиц.КоличествоЧасов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
				   |ГДЕ
				   |	ТабельРаботыУборщиц.Период = &ДатаНач
				   //+++АК mika 2018.04.06 ИП-00018000
	               |;
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабельРаботыПекарей.Сотрудник,
				   |	ТабельРаботыПекарей.ТорговаяТочка,
				   |	ТабельРаботыПекарей.КоличествоЧасов,
				   |	ТабельРаботыПекарей.СвойствоСотрудника,
				   |	ТабельРаботыПекарей.ЭкстренныйВызов
				   |ИЗ
				   |	РегистрСведений.ТабельРаботыПекарей КАК ТабельРаботыПекарей
				   |ГДЕ
				   |	ТабельРаботыПекарей.Период = &ДатаНач
				    //---АК mika ИП-00018000
					
					//+++АК POZM 2018.08.26 ИП-00019521 
					|;
	                |////////////////////////////////////////////////////////////////////////////////
				    |ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	Контрагенты.ИНН,
					|	Контрагенты.ИДКурьераПоДоставке
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
				    |	Контрагенты.ИДКурьераПоДоставке <> 0";
					//---АК POZM 
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон12", НачалоДня(ДатаОбработки) + 3600 * 12);
	Запрос.УстановитьПараметр("ДатаСрезаРоли", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаСальдо", Новый Граница(НачалоДня(ДатаОбработки) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивНомера", МассивНомерМагазина);
	Запрос.УстановитьПараметр("МассивID_TT", МассивID_TT);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110102"));
	Запрос.УстановитьПараметр("Фальшивка", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39311"));
	Результаты = Запрос.ВыполнитьПакет();
	//ОплатаБНДоставка = Результаты[0].Выгрузить();
	//ТабТТ = Результаты[1].Выгрузить();
	ТабЛистыУчета = Результаты[0].Выгрузить();
	ТабНоменклатура = Результаты[1].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");  
	ТабТерминалы = Результаты[2].Выгрузить();
	ТабСальдо50 = Результаты[3].Выгрузить();
	ТабИнкассация = Результаты[4].Выгрузить();
	ТабВозвратыИзСейфа = Результаты[5].Выгрузить();
	ТабСтПродавцы = Результаты[6].Выгрузить();
	ТабКорректировкиАстор = Результаты[7].Выгрузить();
	ТабТерминалыРезерв = Результаты[8].Выгрузить();
	ТабТерминалыПоНовойСистеме = Результаты[9].Выгрузить();
	ТабКешПродавцы = Результаты[10].Выгрузить();
	ТабКешПродавцы.Индексы.Добавить("Ссылка");
	ТабСотрудникиАутсорс = Результаты[11].Выгрузить();
	ТабПривязкиПоРолям = Результаты[12].Выгрузить();
	ТабТабельКассиры = Результаты[13].Выгрузить();
	ТабТабельГрузчиков = Результаты[14].Выгрузить();
	ТабТабельУборщиц = Результаты[15].Выгрузить();
	ТабТабельПекарей = Результаты[16].Выгрузить(); //+++АК mika 2018.04.06 ИП-00018000
	//+++АК POZM 2018.08.26 ИП-00019521 
	ТабКешКурьеров = Результаты[17].Выгрузить();
	//---АК POZM 
	Доставка = Новый ТаблицаЗначений();
	Доставка.Колонки.Добавить("ККМ");
	Доставка.Колонки.Добавить("ДатаЧека");
	Доставка.Колонки.Добавить("НомерЧека");
	Доставка.Колонки.Добавить("Сумма");
	Доставка.Колонки.Добавить("ДАТА_ЛУ");
	Доставка.Колонки.Добавить("Магазин");
	
	ТаблицаСДаннымиПоКассамВозвраты = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("CheckUid", Новый ОписаниеТипов("Строка"));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозвратаНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаВозвратаБезНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс10", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСДаннымиПоКассамВозвраты.Колонки.Добавить("СуммаПоНдс18", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	табДоставка = Новый ТаблицаЗначений;
	табДоставка.Колонки.Добавить("Терминал"	, Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	табДоставка.Колонки.Добавить("НомерМагазина", Новый ОписаниеТипов("Число"));
	табДоставка.Колонки.Добавить("СуммаБН"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	табДоставка.Колонки.Добавить("СуммаНал"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	табПродавцыКеш = Новый ТаблицаЗначений;
	табПродавцыКеш.Колонки.Добавить("CashierUID"	, Новый ОписаниеТипов("Строка"));
	табПродавцыКеш.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	
	ТабПродавцы = Новый ТаблицаЗначений();
	ТабПродавцы.Колонки.Добавить("День");
	ТабПродавцы.Колонки.Добавить("НомерТочки");
	ТабПродавцы.Колонки.Добавить("CashierID");
	ТабПродавцы.Колонки.Добавить("ВышелРанне12");
	ТабПродавцы.Колонки.Добавить("ДатаПервого");
	ТабПродавцы.Колонки.Добавить("ДатаПоследнего");

	табКонСуммы = Новый ТаблицаЗначений;
	табКонСуммы.Колонки.Добавить("ИД");
	табКонСуммы.Колонки.Добавить("Сумма");
	
	табДанныеПоЧекам = Новый ТаблицаЗначений();
	табДанныеПоЧекам.Колонки.Добавить("ShopNo", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	табДанныеПоЧекам.Колонки.Добавить("ShiftID", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("CloseDate", Новый ОписаниеТипов("Дата"));
	табДанныеПоЧекам.Колонки.Добавить("Summ", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("SummVozvrat", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("SummVozvratBeznal", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("BeznalDostavka", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("BeznalDostavkaVozvrat", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("Beznal", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("Points", Новый ОписаниеТипов("Число"));
	табДанныеПоЧекам.Колонки.Добавить("Cupons", Новый ОписаниеТипов("Число"));
	//+++АК POZM 2018.08.29 ИП-00019521 
	табДанныеПоЧекам.Колонки.Добавить("KurierID", Новый ОписаниеТипов("Число"));
	//---АК POZM 
	
	
	ТабТоварыПоВозвратамИзСейфа = Новый ТаблицаЗначений();
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("id_doc");
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("Номенклатура");
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("Количество");
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("Сумма");
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("СуммаНДС10");
	ТабТоварыПоВозвратамИзСейфа.Колонки.Добавить("СуммаНДС18");
	
	
	//+++АК SaMi 2018.07.17 ИП-00019214 
	ТабТоварыПоВозвратамИзСейфаОтмена = Новый ТаблицаЗначений();
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("НомерТочки", Новый ОписаниеТипов("Число"));	
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("Номенклатура");
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("Количество");
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("Сумма");
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("СуммаНДС10");
	ТабТоварыПоВозвратамИзСейфаОтмена.Колонки.Добавить("СуммаНДС18");
	//---АК SaMi  2018.07.17 
	
	//+++АК POZM 2018.08.24 ИП-00019521
	ТабПродажПоЗаказамКурьерами = Новый ТаблицаЗначений();
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("НомерТочки", Новый ОписаниеТипов("Число"));	
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Номенклатура");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Контрагент");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Цена");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("НомерЗаказа");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Количество");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Сумма");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Бонусы");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("Скидки");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("СуммаНДС10");
	ТабПродажПоЗаказамКурьерами.Колонки.Добавить("СуммаНДС18");
	//---АК POZM 
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka
				|CREATE TABLE
				|#VT_ShopNo_Zagruzka (ShopNo int);
				|INSERT INTO #VT_ShopNo_Zagruzka
				|VALUES " + СтрокаОтбораТТ + "
				|SELECT TT._Fld758 as id_TT into #VT_TT_Zagruzka FROM IzbenkaFin.dbo._Reference42 as TT (nolock) WHERE TT._Fld2756 IN (SELECT tab.shopno From #VT_ShopNo_Zagruzka as tab)
				|;
				|SELECT
				|	'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as Name,
				|	dbo_Checks.CloseDate as CloseDate,
				|	dbo_Checks.CashCheckNo as CashCheckNo,
				|	SUM(dbo_Checks.BaseSum) as PayedBase,
				|	CONVERT(date, dbo_Checks.CloseDate) as CloseDate,
				|	dbo_Checks.ShopNo as ShopNo
				|FROM
				|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
				|WHERE
				//+++АК ILIK 2018.06.25 ИП-00018883
				|1 <> 1
				//---АК ILIK
				|and dbo_Checks.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|and dbo_Checks.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|	
				|
				|GROUP BY
				|	CONVERT(date, dbo_Checks.CloseDate),
				|	'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))),
				|	dbo_Checks.CloseDate,
				|	dbo_Checks.CashCheckNo,
				|	dbo_Checks.ShopNo
				|
				|;
				|
				|SELECT Ch.ShopNo, 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),Ch.CashID) / 10 as numeric(10, 1))) as Name, Ch.CheckUid,
				//+++АК SaMi 2018.10.29 ИП-00020260
				//|  CASE WHEN Ch.BaseSum < 0 and Ch.SummBank = 0 THEN Ch.SummCash ELSE 0 END as SummaVozvratNal,
				|  CASE WHEN Ch.BaseSum < 0 and Ch.SummCash <> 0 THEN Ch.SummCash ELSE 0 END as SummaVozvratNal,
				//---АК SaMi  2018.10.29 
				|  CASE WHEN Ch.BaseSum < 0 and Ch.SummBank < 0 THEN Ch.SummBank * (-1) ELSE 0 END as SummaVozvratBezNal,
				|  Chl.SummaPoNDS10 as SummaPoNDS10,
				|  Chl.SummaPoNDS18 as SummaPoNDS18
				|FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock) 
				|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid,
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
				|						FROM [SMS_UNION].[dbo].[CheckLine] as Chl (nolock)
				|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
				|						WHERE Chl.date_ch = '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-dd") + "' and Chl.BaseSum < 0
				|						GROUP BY Chl.CheckUid) as Chl ON Ch.CheckUID = Chl.CheckUid
				|where Ch.OpenDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OpenDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				| and (CASE WHEN Ch.BaseSum < 0 and Ch.SummBank = 0 THEN Ch.BaseSum * (-1) ELSE 0 END > 0 or CASE WHEN Ch.BaseSum < 0 and Ch.SummBank < 0 THEN Ch.SummBank * (-1) ELSE 0 END > 0)
				|
				|;
				|";
			Если ДатаОбработки >= '20150415' Тогда
				СтрЗапрос = СтрЗапрос + "	
				|Select 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),Ch.CashID) / 10 as numeric(10, 1))) as Name,
				|	Ch.ShopNo as ShopNo,
				|	SUM(Ch.SummCash * CASE WHEN Ch.OperationType = 3 THEN -1 ELSE 1 END) as SummCash,
				|	SUM(Ch.SummBank) as SummBank
				|From SMS_UNION.dbo.Checks as Ch (nolock)
				//+++АК ILIK 2018.06.25 ИП-00018883
				|where CONVERT(date, Ch.CloseDate) = " + ВнешниеДанные.ФорматПоля(ДатаОбработки, Истина) + " and Ch.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab) and 1 <> 1 and Ch.OperationType > 0
				//---АК ILIK
				|GROUP BY 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),Ch.CashID) / 10 as numeric(10, 1))),
				|	Ch.ShopNo";
			Иначе		
				СтрЗапрос = СтрЗапрос + "	
				|select ca.Name
				|	,c.ShopNo
				|	,SUM(c.SummCash) SummCash
				|	,SUM(c.SummBank) SummBank
				|from Loyalty..Coupon_move cm (nolock)
				|inner join SMS_UNION..Checks c (nolock) on c.CashCheckNo = cm.CashCheckNo 
				|	and convert(date,c.CloseDate) = convert(date,cm.time_add) 
				|	and cm.cashid/10 = c.ShopNo
				|inner join SMS_UNION..Cash ca (nolock) on c.CashUID = ca.CashUID AND ca.CashID = cm.CashID
				|where cm.id_type_coupon = 'D46DA4DA-6E0D-4C2F-91D7-E89669ADC7E9'
				|and c.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|and cm.time_add >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and cm.time_add <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|group by ca.Name
				|	,c.ShopNo";
			КонецЕсли;
			СтрЗапрос = СтрЗапрос + "
				|
				//|;
				//|
				//|SELECT 
				//|	Cashier.CashierUID as CashierUID,
				//|	r2._Fld1616 as code
				//|FROM [SMS_UNION].[dbo].[Cashier] as Cashier (nolock)
				//|inner join VV.dbo._Reference146 as r1 (nolock)
				//|on convert(char(16),r1._IDRRef)=convert(char(16),master.dbo.UID2Binary ([CashierUID]) )
				//|inner join VV.dbo._Reference185 as r2 (nolock)
				//|on r1._Fld1296RRef = r2._IDRRef
				|
				|;
				|SELECT 0 as Id, 0 as Summa
				//|SELECT TTSpr._Fld1530 as Id, SUM(VZ_Dannie.Summa) as Summa
				//|FROM (SELECT 
				//|	  Ostatki._Fld6477_RTRef as TypeDenCell,
				//|	  Ostatki._Fld6477_RRRef as DenCell,
				//|	  Ostatki._Fld6480 as Summa
				//|  FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock)
				//|  WHERE Ostatki._Period IN (SELECT MAX(Ostatki._Period) FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock))
				//|   and Ostatki._Fld6477_RTRef = 0x0000006B
				//|  
				//|  UNION ALL
				//|  
				//|  SELECT 
				//|	  Ostatki._Fld6477_RTRef as TypeDenCell,
				//|	  Ostatki._Fld6477_RRRef as DenCell,
				//|	  Ostatki._Fld6480 * Case Ostatki._RecordKind WHEN 0 THEN -1 ELSE 1 END as Summa
				//|  FROM [VV].[dbo].[_AccumRg6476] as Ostatki (nolock)
				//|  WHERE DATEADD(YEAR, -2000, Ostatki._Period) > '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ostatki._Fld6477_RTRef = 0x0000006B) as VZ_Dannie
				//|  INNER JOIN [VV].[dbo].[_Reference107] as DenCellSpr (nolock)
				//|  ON VZ_Dannie.DenCell = DenCellSpr._IDRRef
				//|  INNER JOIN [VV].[dbo].[_Reference176] as TTSpr (nolock)
				//|  ON DenCellSpr._OwnerIDRRef = TTSpr._IDRRef
				//|  
				//|  Where TTSpr._Fld1530 <> 0
				//|  
				//|  GROUP BY TTSpr._Fld1530
				|
				|;
				|
				|SELECT
				|	CONVERT(date, dbo_Checks.CloseDate) as CloseDate,
				|	dbo_Checks.ShopNo as ShopNo,
				|	dbo_Checks.CashierID as CashierID,
				|	MAX(CASE WHEN dbo_Checks.CloseDate <= '" + Формат(НачалоДня(ДатаОбработки) + 3600 * 12, "ДФ=yyyy-MM-ddTHH:mm:ss") + "' THEN 1 ELSE 0 END) as Early12,
				|   MIN(dbo_Checks.CloseDate) as ДатаПервого,
				|   MAX(dbo_Checks.CloseDate) as ДатаПоследнего
				|FROM
				|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
				|WHERE
				|	dbo_Checks.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|	and dbo_Checks.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|GROUP BY
				|	CONVERT(date, dbo_Checks.CloseDate),
				|	dbo_Checks.ShopNo,
				|	dbo_Checks.CashierID
				|
				|;
				|
				|SELECT
				|	  dbo_Checks.ShopNo as ShopNo,
				|	  'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as Name,
				|	  dbo_Checks.ShiftID as ShiftID,
				|	  CAST(CONVERT(date, dbo_Checks.CloseDate) as datetime) as CloseDate,
				//+++АК POZM 2018.08.29 ИП-00019521 
				|	  ISNULL(ch_kur.OperatorDeliveryID,0) as KurierID,
				//---АК POZM 
				//|	  SUM(CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 THEN 0 ELSE dbo_Checks.BaseSum END) as Summ,
				//|	  SUM(CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 THEN 0 ELSE dbo_Checks.SummCash + dbo_Checks.SummBank + ISNULL(dbo_DiscountCardUsed.BaseSum, 0) END) as Summ,
				|	  SUM(CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 THEN 0 ELSE dbo_Checks.SummCash + dbo_Checks.SummBank + dbo_Checks.SummBonus END) as Summ,
				|	  SUM(CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 THEN dbo_Checks.SummCash ELSE 0 END) as SummVozvrat,
				//+++АК ILIK 2018.06.25 ИП-00018883
				|	  SUM(CASE WHEN ISNULL(dbo_Checks.BaseSum, 0) < 0 and ISNULL(dbo_Checks.SummBank, 0) < 0 THEN dbo_Checks.SummBank * (-1) ELSE 0 END) as SummVozvratBeznal,
				|	  SUM(0) as BeznalDostavka,
				|	  SUM(ISNULL(CASE
				|						WHEN dbo_Checks.SummBank > 0
				|							 THEN dbo_Checks.SummBank
				|						ELSE 0
				|				  END, 0)) as Beznal,
				|	  SUM(0) as BeznalDostavkaVozvrat,
				//---АК ILIK
				|	  SUM(ISNULL(dbo_Checks.SummBonus, 0)) as Points,
				//|	  SUM(ISNULL(dbo_DiscountCardUsed.BaseSum, 0)) as Points,
				|	  0 as Cupons
				|FROM
				|	  SMS_Union.dbo.Checks as dbo_Checks with (index(IX_Checks_1),nolock)
				//+++АК POZM 2018.08.29 ИП-00019521 
				|	  LEFT JOIN SMS_UNION.dbo.Checks_Deliveries as ch_kur (nolock)
				|			ON ch_kur.CheckUID = dbo_Checks.CheckUID
				//---АК POZM 
				|WHERE
				|	dbo_Checks.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|	  and dbo_Checks.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|GROUP BY
				|	  'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))),
				|	  dbo_Checks.ShiftID,
				|	  CONVERT(date, dbo_Checks.CloseDate),
				//+++АК POZM 2018.08.29 ИП-00019521 
				|	  ISNULL(ch_kur.OperatorDeliveryID,0),
				//---АК POZM 
				|	  dbo_Checks.ShopNo
                |
				|;
				|SELECT CAST(CM.Id_doc as nvarchar(36)) as id_doc, SUM(TD_move.Quantity) as Quantity, SUM(TD_move.Basesum) as Basesum, CAST(ArticleBin2UID.UID as nvarchar(36)) as uidtov,
				|	SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN TD_move.Basesum ELSE 0 END) as SummaPoNDS10, 
				|	SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN TD_move.Basesum ELSE 0 END) as SummaPoNDS18
				|FROM SMS_REPL.dbo.TD_move as TD_move (nolock)
				|INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|				ON TD_move.id_tov = ArticleBin2UID.id_tov
				|INNER JOIN SMS_REPL.dbo.Cash_move as CM (nolock) ON (TD_move.N_int = CM.CashCheckNo and TD_move.ShopNo_rep = CM.ShopNo_rep and CONVERT(date, TD_move.closedate) = CONVERT(date, CM.closedate)) OR TD_move.Id_doc = CM.Id_doc
				|Where convert(date, TD_move.closedate) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' and TD_move.operation_type = 201 and ISNULL(TD_move.Confirm_reason,0)<>8 
				|	and TD_move.ShopNo_rep IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|GROUP BY CAST(CM.Id_doc as nvarchar(36)), CAST(ArticleBin2UID.UID as nvarchar(36))
                |				                                                                                                                                                                       
				|;
				|SELECT SUM(TD_move.Quantity) as Quantity, SUM(TD_move.Basesum) as Basesum, CAST(ArticleBin2UID.UID as nvarchar(36)) as uidtov, TD_move.ShopNo_rep as ShopNo, TD_move.operation_type, 
				|	SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN TD_move.Basesum ELSE 0 END) as SummaPoNDS10, 
				|	SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN TD_move.Basesum ELSE 0 END) as SummaPoNDS18
				|FROM SMS_REPL.dbo.TD_move as TD_move (nolock)
				|INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|				ON TD_move.id_tov = ArticleBin2UID.id_tov
				|Where convert(date, TD_move.closedate) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' and TD_move.operation_type = 211 and ISNULL(TD_move.Confirm_reason,0)<>8 
				|	and TD_move.ShopNo_rep IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				|GROUP BY  CAST(ArticleBin2UID.UID as nvarchar(36)), TD_move.ShopNo_rep, TD_move.operation_type
				|
				//+++АК POZM 2018.08.25 ИП-00019521 
				|;
				|SELECT 
			    |  ch_kur.ShopNo as ShopNo
			    |  ,ch_kur.CashCheckNo as CashCheckNo
			    |  ,ch_kur.CloseDate as CloseDate
			    |  ,checks.BaseSum as BaseSum
			    |  ,ch_kur.CashID as CashID
			    |  ,ch_kur.date_add as date_add
				|  ,ch_kur.OperatorDeliveryID as OperatorDeliveryID
			    |  ,ch_kur.OrderNo as OrderNo
			    |  ,checks.id_kontr as id_kontr
			    |  ,checks.id_tov_cl as id_tov_cl
				|  ,CAST(ArticleBin2UID.UID as nvarchar(36)) as uidtov
				|  ,checks.Quantity as Quantity
				|  ,ISNULL(ch.Discount_action_Bonus, 0) + ISNULL(ch.Discount_line_Bonus, 0) as bonus
     			|  ,ISNULL(ch.discount_ch, 0) + ISNULL(ch.Discount_action_Cash, 0) as discount
			  	|FROM [SMS_UNION].[dbo].[Checks_Deliveries] as ch_kur
			  	|INNER JOIN [SMS_UNION].[dbo].CheckLine as checks
			  	|				ON ch_kur.CheckUID = checks.CheckUID
				|INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
				|				ON checks.id_tov_cl = ArticleBin2UID.id_tov
				|INNER JOIN SMS_UNION..Checks          AS ch WITH (NOLOCK)
    			|				ON ch.CheckUID = checks.CheckUID
                |WHERE
				|	ch_kur.CloseDate >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and ch_kur.CloseDate <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				|	  and ch_kur.ShopNo IN (SELECT tab.ShopNo FROM #VT_ShopNo_Zagruzka as tab)
				
				//---АК POZM 

				
				|IF OBJECT_ID ('tempdb..#VT_ShopNo_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_ShopNo_Zagruzka
				|IF OBJECT_ID ('tempdb..#VT_TT_Zagruzka') IS NOT NULL
				|DROP TABLE #VT_TT_Zagruzka";
				
								
				
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = Доставка.Добавить();
			СтрокаДоб.ККМ 			= Rs.Fields("Name").Value;
			СтрокаДоб.ДатаЧека 		= Rs.Fields("CloseDate").Value;
			СтрокаДоб.НомерЧека 		= Rs.Fields("CashCheckNo").Value;   
			СтрокаДоб.Сумма 			= Rs.Fields("PayedBase").Value;
			СтрокаДоб.ДАТА_ЛУ 		= Rs.Fields("CloseDate").Value;
			СтрокаДоб.Магазин 		= Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаСДаннымиПоКассамВозвраты.Добавить();
			СтрокаДоб.ShopNo = Rs.Fields("ShopNo").Value;
			СтрокаДоб.Name = Rs.Fields("Name").Value;
			СтрокаДоб.CheckUid = Rs.Fields("CheckUid").Value;
			СтрокаДоб.СуммаВозвратаНал = Rs.Fields("SummaVozvratNal").Value;
			СтрокаДоб.СуммаВозвратаБезНал = Rs.Fields("SummaVozvratBezNal").Value;
			СтрокаДоб.СуммаПоНдс10 = Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаПоНдс18 = Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = табДоставка.Добавить();
			
			СтрокаТерминал = ТабТерминалыПоНовойСистеме.Найти(Rs.Fields("Name").Value, "ID_SQL");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаДоб.Терминал = СтрокаТерминал.Ссылка;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(СтрокаДоб.Терминал) Тогда
				СтрокаТерминал = ТабТерминалы.Найти(Rs.Fields("Name").Value, "ID_SQL");
				Если СтрокаТерминал <> Неопределено Тогда
					СтрокаДоб.Терминал = СтрокаТерминал.Ссылка;
				Иначе	
					СтрокаТерминал = ТабТерминалыРезерв.Найти(Rs.Fields("Name").Value, "ID_SQL");
					Если СтрокаТерминал <> Неопределено Тогда
						СтрокаДоб.Терминал = СтрокаТерминал.Ссылка;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			СтрокаДоб.НомерМагазина = Rs.Fields("ShopNo").Value;
			СтрокаДоб.СуммаБН = Rs.Fields("SummBank").Value;
			СтрокаДоб.СуммаНал = Rs.Fields("SummCash").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//rs=rs.NextRecordSet();
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = табПродавцыКеш.Добавить();
	//		СтрокаДоб.CashierUID = Rs.Fields("CashierUID").Value;
	//		СтрокаДоб.Код = Rs.Fields("code").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = табКонСуммы.Добавить();
			СтрокаДоб.ИД = Rs.Fields("Id").Value;
			СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПродавцы.Добавить();
			СтрокаДоб.День = Rs.Fields("CloseDate").Value;
			СтрокаДоб.НомерТочки = Rs.Fields("ShopNo").Value;
			СтрокаДоб.CashierID = Rs.Fields("CashierID").Value;
			СтрокаДоб.ДатаПервого = Rs.Fields("ДатаПервого").Value;
			СтрокаДоб.ДатаПоследнего = Rs.Fields("ДатаПоследнего").Value;
			СтрокаДоб.ВышелРанне12 = ?(Rs.Fields("Early12").Value = 1, Истина, Ложь);
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = табДанныеПоЧекам.Добавить();
			СтрокаДоб.ShopNo = Rs.Fields("ShopNo").Value;
			СтрокаДоб.Name = Rs.Fields("Name").Value;
			СтрокаДоб.ShiftID = Rs.Fields("ShiftID").Value;
			СтрокаДоб.CloseDate = Rs.Fields("CloseDate").Value;
			СтрокаДоб.Summ = Rs.Fields("Summ").Value;
			СтрокаДоб.SummVozvrat = Rs.Fields("SummVozvrat").Value;
			СтрокаДоб.SummVozvratBeznal = Rs.Fields("SummVozvratBeznal").Value;
			СтрокаДоб.BeznalDostavka = Rs.Fields("BeznalDostavka").Value;
			СтрокаДоб.BeznalDostavkaVozvrat = Rs.Fields("BeznalDostavkaVozvrat").Value;
			СтрокаДоб.Beznal = Rs.Fields("Beznal").Value;
			СтрокаДоб.Points = Rs.Fields("Points").Value;
			СтрокаДоб.Cupons = Rs.Fields("Cupons").Value;
			//+++АК POZM 2018.08.29 ИП-00019521 
			СтрокаДоб.KurierID = Rs.Fields("KurierID").Value;
			//---АК POZM 
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Если Rs.Fields("Quantity").Value = 0 Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабТоварыПоВозвратамИзСейфа.Добавить();
			СтрокаДоб.id_doc = Rs.Fields("Id_doc").Value;
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("uidtov").Value));
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.Сумма = Rs.Fields("Basesum").Value;
			СтрокаДоб.СуммаНДС10 = Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаНДС18 = Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//+++АК SaMi 2018.07.17 ИП-00019214 
	rs=rs.NextRecordSet();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Если Rs.Fields("Quantity").Value = 0 Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабТоварыПоВозвратамИзСейфаОтмена.Добавить();
			СтрокаДоб.НомерТочки = Rs.Fields("ShopNo").Value;
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("uidtov").Value));
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.Сумма = Rs.Fields("Basesum").Value;
			СтрокаДоб.СуммаНДС10 = Rs.Fields("SummaPoNDS10").Value;
			СтрокаДоб.СуммаНДС18 = Rs.Fields("SummaPoNDS18").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;	
	//---АК SaMi  2018.07.17 
	
	//+++АК POZM 2018.08.25 ИП-00019521 
	rs=rs.NextRecordSet();
	//
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Если Rs.Fields("Quantity").Value = 0 Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;	
			СтрокаДоб = ТабПродажПоЗаказамКурьерами.Добавить();
			СтрокаДоб.НомерТочки = Rs.Fields("ShopNo").Value;
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("uidtov").Value));
			СтрокаКонтра = ТабКешКурьеров.Найти(Rs.Fields("OperatorDeliveryID").Value,"ИДКурьераПоДоставке");
			Если СтрокаКонтра<>Неопределено Тогда
				СтрокаДоб.Контрагент = СтрокаКонтра.Ссылка;
			Иначе
				Сообщение = Новый СообщениеПользователю();
				//+++АК mika 2018.11.25 ИП-00020530
				//Сообщение.Текст = "Не найден оператор по доставке с кодом "+Rs.Fields("OperatorDeliveryID").Value;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Номер точки: %1, не найден оператор по доставке с кодом %2", 
						СтрокаДоб.НомерТочки, Rs.Fields("OperatorDeliveryID").Value);   
				//---АК mika
				Сообщение.Сообщить();
			КонецЕсли;	
			СтрокаДоб.Цена = СтрокаДоб.Сумма = Rs.Fields("Basesum").Value;
			СтрокаДоб.НомерЗаказа = Rs.Fields("OrderNo").Value;
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.Сумма = Rs.Fields("Basesum").Value;
			СтрокаДоб.Бонусы = Rs.Fields("Bonus").Value;
			СтрокаДоб.Скидки = Rs.Fields("Discount").Value;
			//СтрокаДоб.СуммаНДС10 =
			//СтрокаДоб.СуммаНДС18 = 
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;	
	//---АК POZM 
				
	Запрос.УстановитьПараметр("Таб", табДанныеПоЧекам);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("МассивНомерМагазина", МассивНомерМагазина);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ShopNo,
	               |	Таб.Name,
	               |	Таб.ShiftID,
	               |	Таб.CloseDate,
	               |	Таб.Summ,
	               |	Таб.SummVozvrat,
	               |	Таб.SummVozvratBeznal,
	               |	Таб.BeznalDostavka,
	               |	Таб.Beznal,
	               |	Таб.Points,
				   //+++АК POZM 2018.08.29 ИП-00019521 
				   |	Таб.KurierID,
				   //---АК POZM 
				   |	Таб.Cupons
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходИзКассы.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
	               |	&Дата
	               |ПОМЕСТИТЬ ВТ_РКО
	               |ИЗ
	               |	Документ.РасходИзКассы КАК РасходИзКассы
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &Дата
	               |	И РасходИзКассы.Проведен = ИСТИНА
	               |	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	               |	И РасходИзКассы.СтруктурнаяЕдиница.НомерТочки > 0
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И РасходИзКассы.СтруктурнаяЕдиница.НомерТочки В(&МассивНомерМагазина)") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ShopNo КАК ТорговаяТочка,
	               |	ВТ_Данные.Name КАК Name,
				   //+++АК POZM 2018.08.29 ИП-00019521 
				   |	ВТ_Данные.KurierID КАК ИДКурьера,
				   //---АК POZM 
	               |	ВТ_Данные.ShiftID,
	               |	ВТ_Данные.CloseDate КАК CloseDate,
	               |	ВТ_Данные.Summ КАК Summ,
	               |	ВТ_Данные.SummVozvrat КАК СуммаВозврат,
	               |	ВТ_Данные.SummVozvratBeznal КАК СуммаВозвратБезнал,
	               |	ВТ_Данные.BeznalDostavka КАК БезналДоставка,
	               |	ВТ_Данные.Beznal КАК Безнал,
	               |	ВТ_Данные.Points КАК Баллы,
				   |	ВТ_Данные.Cupons КАК Купоны
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_РКО.НомерТочки,
	               |	"""",
				   |	0,
	               |	0,
	               |	ВТ_РКО.Дата,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТ_РКО КАК ВТ_РКО
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
	               |		ПО ВТ_РКО.НомерТочки = ВТ_Данные.ShopNo
	               |ГДЕ
	               |	ВТ_Данные.ShopNo ЕСТЬ NULL
	               |ИТОГИ
	               |	МАКСИМУМ(CloseDate),
	               |	СУММА(Summ),
	               |	СУММА(СуммаВозврат),
	               |	СУММА(СуммаВозвратБезнал),
	               |	СУММА(БезналДоставка),
	               |	СУММА(Безнал),
	               |	СУММА(Баллы),
	               |	СУММА(Купоны)
	               |ПО
	               |	ТорговаяТочка,
	               |	CloseDate,
	               |	Name,
				   |	ИДКурьера";
				   
	ВыборкаТорговаяТочка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТорговаяТочка.Следующий() Цикл	
		СтрокаТоргТочка = ТабТТ.Найти(ВыборкаТорговаяТочка.ТорговаяТочка, "НомерТочки");
		Если СтрокаТоргТочка = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ТорговаяТочка = СтрокаТоргТочка.Ссылка;
		ВыборкаCloseDate = ВыборкаТорговаяТочка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаCloseDate.Следующий() Цикл
			СтрокаЛистУчета = ТабЛистыУчета.Найти(ТорговаяТочка, "ТорговаяТочка");
			Если ЗначениеЗаполнено(СтрокаЛистУчета) Тогда
				
				обДок = СтрокаЛистУчета.Ссылка.ПолучитьОбъект();
				Если обДок.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ обДок.НаличнаяЧастьСкорректирована Тогда
					обДок.Выручка.Очистить();
				КонецЕсли;	
				Если НЕ обДок.БезналичнаяЧастьСкорректирована Тогда
					обДок.ОплатыПоБанковскимКартам.Очистить();
				КонецЕсли;
				Если НЕ обДок.ОплатаБалламиСкорректирована Тогда
					обДок.ОплатыБонусами.Очистить();
				КонецЕсли;	
			Иначе
				
				//
				обДок = Документы.ЛистУчета.СоздатьДокумент();
				обДок.Дата = НачалоДня(ВыборкаCloseDate.CloseDate);
				обДок.Организация = Справочники.Организации.НайтиПоКоду("000000006"); //Вкусвилл
				обДок.УстановитьНовыйНомер(обДок.Организация.Префикс);
				обДок.ТорговаяТочка = ТорговаяТочка;
				
			КонецЕсли;
			
			
			обДок.ЦФО = СтрокаТоргТочка.ЦФО;
			обДок.ДатаЗакрытияСмены = ВыборкаCloseDate.CloseDate;
			
			ВыборкаName = ВыборкаCloseDate.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаName.Следующий() Цикл
				СтрокаТерминал = ТабТерминалыПоНовойСистеме.Найти(ВыборкаName.Name, "ID_SQL");
				Если СтрокаТерминал = Неопределено Тогда
					СтрокаТерминал = ТабТерминалы.Найти(ВыборкаName.Name, "ID_SQL");
				КонецЕсли;	
				Если СтрокаТерминал = Неопределено Тогда
					СтрокаТерминал = ТабТерминалыРезерв.Найти(ВыборкаName.Name, "ID_SQL");
				КонецЕсли;
				Если СтрокаТерминал = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, не найден терминал с ID: %2", ТорговаяТочка, ВыборкаName.Name)); //+++АК mika 2018.11.25 ИП-00020530
				Иначе	
					//+++АК POZM 2018.08.29 ИП-00019521 
					ВыборкаДетали = ВыборкаName.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДетали.Следующий() Цикл
					//---АК POZM 
						Если НЕ обДок.НаличнаяЧастьСкорректирована Тогда
							Если ВыборкаДетали.Summ <> 0
								ИЛИ ВыборкаДетали.СуммаВозврат <> 0 Тогда
								//+++АК POZM 2018.08.30 ИП-00019521 
								ВыручкаНаличных = ВыборкаДетали.Summ-ВыборкаДетали.Баллы-ВыборкаДетали.Безнал-ВыборкаДетали.БезналДоставка;
								Если ВыручкаНаличных <> 0 ИЛИ ВыборкаДетали.СуммаВозврат <> 0 Тогда
									//---АК POZM 
									НСтрока = обДок.Выручка.Добавить();
									НСтрока.ККМ = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.Ссылка);
									НСтрока.ОсновноеСредство = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.ОсновноеСредство);
									НСтрока.Сумма = ВыручкаНаличных;
									НСтрока.СуммаВозврата = ВыборкаДетали.СуммаВозврат;
									НСтрока.РабочееМестоВСкл = ВыборкаДетали.Name;
									//+++АК POZM 2018.08.29 ИП-00019521 
									Если ВыборкаДетали.ИДКурьера<>0 Тогда
										СтрокаКонтра = ТабКешКурьеров.Найти(ВыборкаДетали.ИДКурьера,"ИДКурьераПоДоставке");
										Если СтрокаКонтра<>Неопределено Тогда
											НСтрока.Курьер = СтрокаКонтра.Ссылка;
										КонецЕсли;
										
									КонецЕсли;	
									//---АК POZM 
								КонецЕсли;	
								обДок.РасшифровкаНал = Истина;
							КонецЕсли;
						КонецЕсли;	
						
						Если НЕ обДок.БезналичнаяЧастьСкорректирована Тогда
							Если ВыборкаДетали.Безнал <> 0 ИЛИ ВыборкаДетали.БезналДоставка <> 0
								ИЛИ ВыборкаДетали.СуммаВозвратБезнал <> 0 Тогда
								НСтрока = обДок.ОплатыПоБанковскимКартам.Добавить();
								НСтрока.Терминал 	= ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.Ссылка);
								НСтрока.ОсновноеСредство = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.ОсновноеСредство);
								НСтрока.Сумма 		= ВыборкаДетали.Безнал + ВыборкаДетали.БезналДоставка;
								//НСтрока.Сумма 		= ВыборкаДетали.Безнал;
								//НСтрока.СуммаДоставка = ВыборкаДетали.БезналДоставка;
								СтрокиБезНалДоставка = табДоставка.НайтиСтроки(Новый Структура("Терминал, НомерМагазина", СтрокаТерминал.Ссылка, ВыборкаТорговаяТочка.ТорговаяТочка));
								Если СтрокиБезНалДоставка.Количество() > 0 Тогда
									НСтрока.СуммаДоставка = ?(СтрокиБезНалДоставка[0].СуммаБН < 0, 0, СтрокиБезНалДоставка[0].СуммаБН);
									НСтрока.Сумма = НСтрока.Сумма - Мин(?(СтрокиБезНалДоставка[0].СуммаБН < 0, 0, СтрокиБезНалДоставка[0].СуммаБН), НСтрока.СуммаДоставка);
								КонецЕсли;	
								НСтрока.СуммаВозврата = ВыборкаДетали.СуммаВозвратБезнал;
								НСтрока.РабочееМестоВСкл = ВыборкаДетали.Name;
								
								//+++АК POZM 2018.08.29 ИП-00019521 
								Если ВыборкаДетали.ИДКурьера<>0 Тогда
									СтрокаКонтра = ТабКешКурьеров.Найти(ВыборкаДетали.ИДКурьера,"ИДКурьераПоДоставке");
									Если СтрокаКонтра<>Неопределено Тогда
										НСтрока.Курьер = СтрокаКонтра.Ссылка;
									КонецЕсли;
									
								КонецЕсли;	
								//---АК POZM 

								обДок.РасшифровкаБН = Истина;
							КонецЕсли;
						КонецЕсли;	
						
						Если НЕ обДок.ОплатаБалламиСкорректирована Тогда
							Если ВыборкаДетали.Баллы <> 0 Тогда
								НСтрока = обДок.ОплатыБонусами.Добавить();
								НСтрока.Терминал = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.Ссылка);
								НСтрока.ОсновноеСредство = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.ОсновноеСредство);
								НСтрока.Сумма = ВыборкаДетали.Баллы;
								
								обДок.РасшифровкаБонусы = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;
			
			//+++Лаврик
			Если НЕ обДок.ДоставкаСкорректирована Тогда
				
				Если НачалоДня(ВыборкаCloseDate.CloseDate) < Дата("20140115000000") Тогда
					
					Отбор = Новый Структура;
					Отбор.Вставить("ДАТА_ЛУ", НачалоДня(ВыборкаCloseDate.CloseDate));
					Отбор.Вставить("Магазин", ВыборкаCloseDate.ТорговаяТочка);
					
					массивДоставка = Доставка.НайтиСтроки(Отбор);
					
					Если массивДоставка.Количество() > 0 Тогда
						Для п = 0 по массивДоставка.ВГраница() Цикл
							ВыборкаДетали = массивДоставка[п];
							чекДоставка = обДок.Доставка.Добавить();
							чекДоставка.НомерЧека 	= ВыборкаДетали.НомерЧека;
							чекДоставка.СуммаБН		= ВыборкаДетали.Сумма;
							чекДоставка.Период		= ВыборкаДетали.ДатаЧека;
						КонецЦикла;
					КонецЕсли;
				Иначе
					тзДоставка = ПолучитьДанныеОДоставке(ВыборкаCloseDate.ТорговаяТочка, НачалоДня(ВыборкаCloseDate.CloseDate));
					Если тзДоставка.Количество() > 0 Тогда
						обДок.Доставка.Загрузить(тзДоставка);
					КонецЕсли;
				Конецесли;

				обДок.СуммаЭквайрингДоставка 	= обДок.Доставка.Итог("СуммаБН");
				обДок.СуммаНаличныеДоставка 	= обДок.Доставка.Итог("СуммаНал");

			Конецесли;
			//---Лаврик
			
			Если Не обДок.АктыРедактировались Тогда
				обДок.АктыКМ3.Очистить();
				обДок.ЧекиПоАктамКМ3.Очистить();
				СтрокиВозвраты = ТаблицаСДаннымиПоКассамВозвраты.НайтиСтроки(Новый Структура("ShopNo", ВыборкаТорговаяТочка.ТорговаяТочка));
				Для Каждого СтрокаВозврат Из СтрокиВозвраты Цикл
					СтрокаТерминал = ТабТерминалыПоНовойСистеме.Найти(СтрокаВозврат.Name, "ID_SQL");
					Если СтрокаТерминал = Неопределено Тогда
						СтрокаТерминал = ТабТерминалы.Найти(СтрокаВозврат.Name, "ID_SQL");
					КонецЕсли;	
					Если СтрокаТерминал = Неопределено Тогда
						СтрокаТерминал = ТабТерминалыРезерв.Найти(СтрокаВозврат.Name, "ID_SQL");
					КонецЕсли;
					Если СтрокаТерминал = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, не найден терминал с ID: %2", ВыборкаТорговаяТочка.ТорговаяТочка, СтрокаВозврат.Name)); //+++АК mika 2018.11.25 ИП-00020530
					Иначе	
						Коэффициент10 = ?(СтрокаВозврат.СуммаПоНДС10 + СтрокаВозврат.СуммаПоНДС18 = 0, 1, СтрокаВозврат.СуммаПоНДС10 / (СтрокаВозврат.СуммаПоНДС10 + СтрокаВозврат.СуммаПоНДС18));
						Если СтрокаВозврат.СуммаВозвратаНал > 0 Тогда
							НСтрока = обДок.АктыКМ3.Добавить();
							НСтрока.ККМ = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.Ссылка);
							НСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор());
							НСтрока.АктПолучен = Истина;
							НСтрока.ОсновноеСредство = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.ОсновноеСредство);
							НСтрока.Сумма = СтрокаВозврат.СуммаВозвратаНал;
							НСтрока.СуммаПоНДС10 = НСтрока.Сумма * Коэффициент10;
							НСтрока.СуммаПоНДС18 = НСтрока.Сумма - НСтрока.СуммаПоНДС10;
							
							СтрокаРасшифровка = обДок.ЧекиПоАктамКМ3.Добавить();
							СтрокаРасшифровка.КлючСтрокиАкта = НСтрока.КлючСтроки;
							СтрокаРасшифровка.УИНЧека = СтрокаВозврат.CheckUID;
							СтрокаРасшифровка.СуммаЧека = СтрокаВозврат.СуммаВозвратаНал;
						КонецЕсли;
						Если СтрокаВозврат.СуммаВозвратаБезНал > 0 Тогда
							НСтрока = обДок.АктыКМ3.Добавить();
							НСтрока.ККМ = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.Ссылка);
							НСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор());
							НСтрока.ОсновноеСредство = ?(СтрокаТерминал = Неопределено, Неопределено, СтрокаТерминал.ОсновноеСредство);
							НСтрока.Сумма = СтрокаВозврат.СуммаВозвратаБезНал;
							НСтрока.ЭтоВозвратБезнал = Истина;
							НСтрока.АктПолучен = Истина;
							НСтрока.СуммаПоНДС10 = НСтрока.Сумма * Коэффициент10;
							НСтрока.СуммаПоНДС18 = НСтрока.Сумма - НСтрока.СуммаПоНДС10;
							
							СтрокаРасшифровка = обДок.ЧекиПоАктамКМ3.Добавить();
							СтрокаРасшифровка.КлючСтрокиАкта = НСтрока.КлючСтроки;
							СтрокаРасшифровка.УИНЧека = СтрокаВозврат.CheckUID;
							СтрокаРасшифровка.СуммаЧека = СтрокаВозврат.СуммаВозвратаБезНал;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			Если Не обДок.ВозвратыРедактировались Тогда
				обДок.ВозвратыИзСейфа.Очистить();
				обДок.ТоварыПоВозвратам.Очистить();
				СтрокиВозвраты = ТабВозвратыИзСейфа.НайтиСтроки(Новый Структура("ТТ", ТорговаяТочка));
				Для Каждого СтрокаВозврат Из СтрокиВозвраты Цикл
					НСтрока = обДок.ВозвратыИзСейфа.Добавить();
					НСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор());
					НСтрока.Сумма = СтрокаВозврат.СуммаДокумента;
					НСтрока.ВозвратПолучен = Истина;
					СтрокиТовары = ТабТоварыПоВозвратамИзСейфа.НайтиСтроки(Новый Структура("id_doc", ВРЕГ(СтрокаВозврат.Ссылка.УникальныйИдентификатор())));
					Для Каждого СтрокаВозвратТовар Из СтрокиТовары Цикл
						СтрокаДобТоварВозврат = обДок.ТоварыПоВозвратам.Добавить();
						СтрокаДобТоварВозврат.КлючСтрокиВозврата = НСтрока.КлючСтроки;
						СтрокаДобТоварВозврат.Номенклатура = СтрокаВозвратТовар.Номенклатура;
						СтрокаДобТоварВозврат.Количество = СтрокаВозвратТовар.Количество;
						СтрокаДобТоварВозврат.СтавкаНДС = ?(СтрокаВозвратТовар.СуммаНДС18 <> 0, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС10);
						СтрокаДобТоварВозврат.Сумма = СтрокаВозвратТовар.Сумма;
						СтрокаДобТоварВозврат.СуммаПоНДС10 = СтрокаВозвратТовар.СуммаНДС10;
						СтрокаДобТоварВозврат.СуммаПоНДС18 = СтрокаВозвратТовар.СуммаНДС18;
					КонецЦикла;	
				КонецЦикла;	
				//+++АК SaMi 2018.07.17 ИП-00019214 
				Для Каждого СтрокаОтменаВозврата Из ТабТоварыПоВозвратамИзСейфаОтмена Цикл
					НайденныеСтроки = обДок.ТоварыПоВозвратам.НайтиСтроки(Новый Структура("Номенклатура", СтрокаОтменаВозврата.Номенклатура));
					Для Каждого СтрокаНоменклатуры ИЗ НайденныеСтроки Цикл
						Если СтрокаОтменаВозврата.Количество = 0 Тогда
							Прервать;
						КонецЕсли; 
						
						КоличествоОтмена = Мин(СтрокаОтменаВозврата.Количество, СтрокаНоменклатуры.Количество);
						СуммаОтмена = СтрокаОтменаВозврата.Сумма * КоличествоОтмена / СтрокаОтменаВозврата.Количество;
						СуммаПоНДС10Отмена = СтрокаОтменаВозврата.СуммаНДС10 * КоличествоОтмена / СтрокаОтменаВозврата.Количество;
						СуммаПоНДС18Отмена = СтрокаОтменаВозврата.СуммаНДС18 * КоличествоОтмена / СтрокаОтменаВозврата.Количество;
						
						СтрокаОтменаВозврата.Количество = СтрокаОтменаВозврата.Количество - КоличествоОтмена;
						СтрокаОтменаВозврата.Сумма = СтрокаОтменаВозврата.Сумма - СуммаОтмена;
						СтрокаОтменаВозврата.СуммаНДС10 = СтрокаОтменаВозврата.СуммаНДС10 - СуммаПоНДС10Отмена;
						СтрокаОтменаВозврата.СуммаНДС18 = СтрокаОтменаВозврата.СуммаНДС18 - СуммаПоНДС18Отмена;
						
						СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество - КоличествоОтмена;
						СтрокаНоменклатуры.Сумма = СтрокаНоменклатуры.Сумма - СуммаОтмена;
						СтрокаНоменклатуры.СуммаПоНДС10 = СтрокаНоменклатуры.СуммаПоНДС10 - СуммаПоНДС10Отмена;
						СтрокаНоменклатуры.СуммаПоНДС18 = СтрокаНоменклатуры.СуммаПоНДС18 - СуммаПоНДС18Отмена;
					КонецЦикла;  
				КонецЦикла;  
				//---АК SaMi  2018.07.17 
			КонецЕсли;
			
			//+++АК POZM 2018.08.26 ИП-00019521 
			обДок.ЗаказыКурьеров.Очистить();
			СтрокиКурьеров = ТабПродажПоЗаказамКурьерами.НайтиСтроки(Новый Структура("НомерТочки", ВыборкаТорговаяТочка.ТорговаяТочка));
			Для каждого СтрокаКурьеров Из СтрокиКурьеров Цикл
			
				НС = обДок.ЗаказыКурьеров.Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаКурьеров);
				Если НС.Количество <> 0 Тогда
					НС.Цена = НС.Сумма / НС.Количество;
				КонецЕсли;	
			КонецЦикла; 
			//---АК POZM 
			
			обДок.СуммаНал 					= обДок.Выручка.Итог("Сумма");
			обДок.ВозвратПокупателю			= обДок.Выручка.Итог("СуммаВозврата");
			обДок.ВозвратПокупателюБезнал	= обДок.ОплатыПоБанковскимКартам.Итог("СуммаВозврата");
			обДок.СуммаЭквайринг 			= обДок.ОплатыПоБанковскимКартам.Итог("Сумма");
			обДок.ОплатаБаллами 			= обДок.ОплатыБонусами.Итог("Сумма");
			обДок.СуммаДокумента		 	= обДок.СуммаНал + обДок.СуммаЭквайринг + обДок.ОплатаБаллами - обДок.ВозвратПокупателю; 
			обДок.Купон						= ВыборкаCloseDate.Купоны;
			Если обДок.ЭтоНовый() Тогда
				обДок.ДатаКассовойСмены = обДок.Дата + 86400;
				СтрокаСальдо = ТабСальдо50.Найти(ТорговаяТочка, "ТТ");
				Если СтрокаСальдо <> Неопределено
					И обДок.Дата >= '20140802' Тогда
					обДок.НачальныйОстаток = СтрокаСальдо.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
			СтрокаИнкас = ТабИнкассация.Найти(ТорговаяТочка, "ТТ");
			Если СтрокаИнкас <> Неопределено Тогда
				обДок.СуммаИнкассации = СтрокаИнкас.СуммаДокумента;
			Иначе
				обДок.СуммаИнкассации = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоргТочка.ДатаЗапускаНовойСистемыУчета)
				И СтрокаТоргТочка.ДатаЗапускаНовойСистемыУчета <= ВыборкаCloseDate.CloseDate Тогда
				
				СтрЗапрос = "select *
					|from SMS_REPL.dbo.Ostatki_and_Dvig_Cash (" + ВнешниеДанные.ФорматПоля(СтрокаТоргТочка.НомерТочки) + ", " + ВнешниеДанные.ФорматПоля(ВыборкаCloseDate.CloseDate, Истина) + ")
					|where ТипСтроки = 'Конечный остаток' and Касса = 0";
				
				rs = ADOСоединение.Execute(СтрЗапрос);
	
				Попытка
					rs.MoveFirst();
					
					Если НЕ rs.EOF() Тогда
						обДок.КонечныйОстатокПоАстору = rs.Fields("ОстатокНаКонец").Value;
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе	
				СтрокаКонСумма = табКонСуммы.Найти(ТорговаяТочка.id_TT, "ИД");
				Если СтрокаКонСумма = Неопределено Тогда
					обДок.КонечныйОстатокПоАстору = 0;
				Иначе	
					обДок.КонечныйОстатокПоАстору = СтрокаКонСумма.Сумма;
				КонецЕсли;
				СтрокаКорАстор = ТабКорректировкиАстор.Найти(ТорговаяТочка, "ТорговаяТочка");
				обДок.КонечныйОстатокПоАстору = обДок.КонечныйОстатокПоАстору + ?(СтрокаКорАстор = Неопределено, 0, СтрокаКорАстор.Сумма);
			КонецЕсли;	
			
			ТабТовары = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(обДок.Дата, обДок.Дата, обДок.ТорговаяТочка);
			ОбщаяСуммаПродажТоваров = 0;
			Для Каждого СтрокаДанныеТовар Из ТабТовары Цикл
				//Если ТабОстаткиПослеИнвентаризации.Количество() > 0 Тогда
				//	СтрокаОстаток = ТабОстаткиПослеИнвентаризации.Найти(СтрокаДанныеТовар.Номенклатура, "Номенклатура");
				//	ОстатокНаКонец = 0;
				//	ОстатокПоСкл = 0;
				//	Если СтрокаОстаток <> Неопределено Тогда
				//		ОстатокНаКонец = СтрокаОстаток.ОстатокПоУчету;
				//		ОстатокПоСкл = СтрокаОстаток.Остаток;
				//	КонецЕсли;
				//	ОстатокНаКонец = ОстатокНаКонец + СтрокаДанныеТовар.Поступило + СтрокаДанныеТовар.Разница - СтрокаДанныеТовар.Продано
				//						- СтрокаДанныеТовар.Дегустация - СтрокаДанныеТовар.Списание - СтрокаДанныеТовар.СписаниеПоКачеству - СтрокаДанныеТовар.Бой - СтрокаДанныеТовар.Акция;
				//	Если ОстатокНаКонец <> ОстатокПоСкл Тогда
				//		СтрокаДанныеТовар.Разница = СтрокаДанныеТовар.Разница + ОстатокПоСкл - ОстатокНаКонец;
				//	КонецЕсли;						
				//КонецЕсли;
				ОбщаяСуммаПродажТоваров = ОбщаяСуммаПродажТоваров + СтрокаДанныеТовар.Сумма;
			КонецЦикла;	
			
			//загрузка продавцов
			Если ДатаОбработки >= '20171001' Тогда
				Если обДок.ЭтоНовый() Тогда
					СтрокиПродавцы = ТабВыходыСотрудников.НайтиСтроки(Новый Структура("Магазин", обДок.ТорговаяТочка));
					Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
						Если СтрокаПродавец.Аутсорсер Тогда
							СтрокаДоб = обДок.СотрудникиАутсорс.Добавить();
							СтрокаДоб.Сотрудник = СтрокаПродавец.Сотрудник;
							СтрокаДоб.ДатаПервого = СтрокаПродавец.ДатаПрихода;
							СтрокаДоб.ДатаПоследнего = СтрокаПродавец.ДатаУхода;
							СтрокаДоб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
						Иначе	
							СтрокиКассир = ТабТабельКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, обДок.ТорговаяТочка));
							СтрокиГрузчик = ТабТабельГрузчиков.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, обДок.ТорговаяТочка));
							СтрокиУборщица = ТабТабельУборщиц.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, обДок.ТорговаяТочка));
							СтрокиПекарь = ТабТабельПекарей.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаПродавец.Сотрудник, обДок.ТорговаяТочка)); //+++АК mika 2018.04.06 ИП-00018000
							Если СтрокиКассир.Количество() > 0 Тогда
								СтрокаТаб = обДок.Кассиры.Добавить();
								СтрокаТаб.Кассир = СтрокиКассир[0].Сотрудник;
								СтрокаТаб.СвойствоСотрудника = СтрокиКассир[0].СвойствоСотрудника;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
								СтрокаТаб.ЭкстренныйВызов = СтрокиКассир[0].ЭкстренныйВызов;
							ИначеЕсли СтрокиГрузчик.Количество() > 0 Тогда
								СтрокаТаб = обДок.Грузчики.Добавить();
								СтрокаТаб.ФизЛицо = СтрокиГрузчик[0].Сотрудник;
								СтрокаТаб.СвойствоСотрудника = СтрокиГрузчик[0].СвойствоСотрудника;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
								СтрокаТаб.ЭкстренныйВызов = СтрокиГрузчик[0].ЭкстренныйВызов;
							ИначеЕсли СтрокаПродавец.Промоутер Тогда
								СтрокаТаб = обДок.Промоутеры.Добавить();
								СтрокаТаб.Промоутер = СтрокаПродавец.Сотрудник;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
							ИначеЕсли СтрокиУборщица.Количество() > 0 Тогда
								СтрокаТаб = обДок.Уборщицы.Добавить();
								СтрокаТаб.ФизЛицо = СтрокаПродавец.Сотрудник;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;	
							ИначеЕсли СтрокиПекарь.Количество() > 0 Тогда //+++АК mika 2018.04.06 ИП-00018000
								СтрокаТаб = обДок.Пекари.Добавить();
								СтрокаТаб.ФизЛицо = СтрокиПекарь[0].Сотрудник;
								СтрокаТаб.СвойствоСотрудника = СтрокиПекарь[0].СвойствоСотрудника;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
								СтрокаТаб.ЭкстренныйВызов = СтрокиПекарь[0].ЭкстренныйВызов;  
							Иначе
								СтрокаТаб = обДок.Продавцы.Добавить();
								СтрокаТаб.Продавец = СтрокаПродавец.Сотрудник;
								СтрокаТаб.ДатаПрихода = СтрокаПродавец.ДатаПрихода;
								СтрокаТаб.ДатаУхода = СтрокаПродавец.ДатаУхода;
								СтрокаТаб.КоличествоЧасов = СтрокаПродавец.КолвоЧасов;
								СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаТаб.Продавец, обДок.ТорговаяТочка));
								Если СтрокиСтпродавцы.Количество() > 0 Тогда
									Если СтрокиСтпродавцы[0].СвойствоПродавца = 2
										ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 3
										ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 4 Тогда
										СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
									КонецЕсли;
									СтрокаТаб.ЭкстренныйВызов = СтрокиСтпродавцы[0].ЭкстренныйВызов;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			Иначе	
				Если обДок.ЭтоНовый() Тогда
					СтрокиПродавцы = ТабПродавцы.НайтиСтроки(Новый Структура("НомерТочки", СтрокаТоргТочка.НомерТочки));
					Для Каждого СтрокаПродавец Из СтрокиПродавцы Цикл
						//Если Не ЗначениеЗаполнено(СтрокаПродавец.Name) Тогда
						//	Продолжить;
						//КонецЕсли;
						СтрокаКешПродавец = ТабКешПродавцы.Найти(Прав("0000000000" + Формат(СтрокаПродавец.CashierID, "ЧН=; ЧГ=0"), 10), "Код");
						Если ЗначениеЗаполнено(СтрокаКешПродавец) Тогда
							СтрокиКассир = ТабТабельКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаКешПродавец.Ссылка, обДок.ТорговаяТочка));
							СтрокиГрузчик = ТабТабельГрузчиков.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаКешПродавец.Ссылка, обДок.ТорговаяТочка));
							Если СтрокиКассир.Количество() > 0 Тогда
								СтрокаТаб = обДок.Кассиры.Добавить();
								СтрокаТаб.Кассир = СтрокиКассир[0].Сотрудник;
								СтрокаТаб.СвойствоСотрудника = СтрокиКассир[0].СвойствоСотрудника;
								СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
								СтрокаТаб.ЭкстренныйВызов = СтрокиКассир[0].ЭкстренныйВызов;
							ИначеЕсли СтрокиГрузчик.Количество() > 0 Тогда
								СтрокаТаб = обДок.Грузчики.Добавить();
								СтрокаТаб.ФизЛицо = СтрокиГрузчик[0].Сотрудник;
								СтрокаТаб.СвойствоСотрудника = СтрокиГрузчик[0].СвойствоСотрудника;
								СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
								СтрокаТаб.ЭкстренныйВызов = СтрокиГрузчик[0].ЭкстренныйВызов;
							ИначеЕсли СтрокаКешПродавец.Промоутер Тогда
								СтрокаТаб = обДок.Промоутеры.Добавить();
								СтрокаТаб.Промоутер = СтрокаКешПродавец.Ссылка;
								СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
								Если СтрокаТаб.КоличествоЧасов < 0 Тогда
									СтрокаТаб.КоличествоЧасов = 0;
								КонецЕсли;
							ИначеЕсли СтрокаКешПродавец.ВнештатныйСотрудник Тогда	
								СтрокаТаб = обДок.ВнештатныеСотрудники.Добавить();
								СтрокаТаб.Сотрудник = СтрокаКешПродавец.Ссылка;
								СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
								Если СтрокаТаб.КоличествоЧасов < 0 Тогда
									СтрокаТаб.КоличествоЧасов = 0;
								КонецЕсли;
							Иначе
								СтрокаТаб = обДок.Продавцы.Добавить();
								СтрокаТаб.Продавец = СтрокаКешПродавец.Ссылка;
								СтрокаТаб.Пч = ?(НЕ СтрокаПродавец.ВышелРанне12, 1, 0);
								СтрокиСтпродавцы = ТабСтПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаТаб.Продавец, обДок.ТорговаяТочка));
								Если СтрокиСтпродавцы.Количество() > 0 Тогда
									Если СтрокиСтпродавцы[0].СвойствоПродавца = 2
										ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 3
										ИЛИ СтрокиСтпродавцы[0].СвойствоПродавца = 4 Тогда
										СтрокаТаб.Пч = СтрокиСтпродавцы[0].СвойствоПродавца;
									КонецЕсли;
									СтрокаТаб.ЭкстренныйВызов = СтрокиСтпродавцы[0].ЭкстренныйВызов;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
						
						СтрокаКешАутсорс = ТабСотрудникиАутсорс.Найти(СтрокаПродавец.CashierID, "ИД");
						Если ЗначениеЗаполнено(СтрокаКешАутсорс) Тогда
							СтрокаТаб = обДок.СотрудникиАутсорс.Добавить();
							СтрокаТаб.Сотрудник = СтрокаКешАутсорс.Ссылка;
							СтрокаТаб.КоличествоЧасов = Окр((СтрокаПродавец.ДатаПоследнего - СтрокаПродавец.ДатаПервого) / 3600, 0, РежимОкругления.Окр15как20);
							СтрокаТаб.ДатаПервого = СтрокаПродавец.ДатаПервого;
							СтрокаТаб.ДатаПоследнего = ?(СтрокаПродавец.ДатаПоследнего = СтрокаПродавец.ДатаПервого, СтрокаПродавец.ДатаПервого + 1, СтрокаПродавец.ДатаПоследнего);
							Если СтрокаТаб.КоличествоЧасов < 0 Тогда
								СтрокаТаб.КоличествоЧасов = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ТаблицаДубли = Документы.ЛистУчета.ЕстьДублиПродавцов(обДок.Продавцы.ВыгрузитьКолонку("Продавец"), обДок.Дата, обДок.Ссылка);
					КолвоСтрок = обДок.Продавцы.Количество();
					Для н = 1 по КолвоСтрок Цикл
						Если ТаблицаДубли.Найти(обДок.Продавцы[КолвоСтрок - н].Продавец, "Продавец") <> Неопределено Тогда
							обДок.Продавцы.Удалить(КолвоСтрок - н);
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
			
			обДок.ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
			
			Если обДок.ЭтоНовый() Тогда
				СуммаВозвратовИзСейфаЛок = 0;
				Для Каждого СтрокаТаб Из обДок.ВозвратыИзСейфа Цикл
					СуммаВозвратовИзСейфаЛок = СуммаВозвратовИзСейфаЛок + ?(СтрокаТаб.ПолученаСумма <> 0, СтрокаТаб.ПолученаСумма, СтрокаТаб.Сумма);
				КонецЦикла;
				обДок.КонечныйОстаток = обДок.КонечныйОстатокПоАстору;
				обДок.Отклонение = -(обДок.НачальныйОстаток 
							+ обДок.СуммаДокумента 
							- обДок.ОплатаБаллами 
							- обДок.СуммаЭквайринг 
							- обДок.КорректировкаБезнал 
							- обДок.СуммаИнкассации
							- обДок.КонечныйОстаток
							- обДок.Доставка.Итог("СуммаНалИсходная")
							- СуммаВозвратовИзСейфаЛок - обДок.ВзаимозачетОтклоненийДС.Итог("Сумма"))
				//обДок.КонечныйОстаток = (обДок.НачальныйОстаток 
				//					+ обДок.СуммаДокумента 
				//					- обДок.ОплатаБаллами 
				//					- обДок.СуммаЭквайринг 
				//					- обДок.КорректировкаБезнал 
				//					- обДок.СуммаИнкассации
				//					- обДок.Доставка.Итог("СуммаНалИсходная")
				//					- СуммаВозвратовИзСейфаЛок);
			КонецЕсли;						
									
			//расчитаем отклоенние по товарам
			обДок.РазницаПоТоварам = ОбщаяСуммаПродажТоваров - обДок.Отклонение - обДок.СуммаДокумента;// - обДок.СкидкаКопеек + обДок.СторноОшибочно;					
								
			Если обДок.Дата >= '20140301' Тогда
				Если обДок.НеПерезагружатьЗОтчеты = Ложь Тогда
					ТабККМ = обДок.ZОтчеты.Выгрузить();
					обДок.ZОтчеты.Загрузить(Документы.ЛистУчета.ПересчитатьТаблицуЗОтчетов(обДок.Выручка.Выгрузить(), обДок.ОплатыПоБанковскимКартам.Выгрузить(), обДок.Дата));
					Для Каждого СтрокаЗ Из обДок.ZОтчеты Цикл
						
						СтрокаТаб = ТабККМ.Найти(СтрокаЗ.Касса, "Касса");
						Если СтрокаТаб <> Неопределено 
							И ЗначениеЗаполнено(СтрокаТаб.ВведенныйОстаток) И СтрокаТаб.ВведенныйОстаток <> СтрокаЗ.ВведенныйОстаток Тогда //ZEZA если изменения заложены в хранилище, то это говорит о том, что эти изменения должны попасть в рабочую базу. всегда было так. //???ZEZA а можно так делать?    //+++АК LAGP 2018.04.13 Дежурство. Закомментил чтобы продинамить базу.
							
							СтрокаЗ.ВведенныйОстаток = СтрокаТаб.ВведенныйОстаток;
							//Если СтрокаТаб.СуммаПоНал <> 0 
							//	ИЛИ СтрокаТаб.СуммаПоБезнал <> 0 Тогда
							//	СтрокаЗ.СуммаПоНал = СтрокаТаб.СуммаПоНал;
							//	СтрокаЗ.СуммаПоБезнал = СтрокаТаб.СуммаПоБезнал;
							//КонецЕсли;	
						КонецЕсли;
						
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		 
			обДок.Записать(РежимЗаписиДокумента.Проведение);
			
			Если НЕ ЗначениеЗаполнено(обДок.Ссылка.Расчетчик) Тогда
				РазницаДеньги = обДок.Ссылка.Отклонение;
				РазницаДеньги = РазницаДеньги * ?(РазницаДеньги < 0, -1, 1);
				РазницаТовары = обДок.Ссылка.РазницаПоТоварам;
				РазницаТовары = РазницаТовары * ?(РазницаТовары < 0, -1, 1);
				Если РазницаДеньги <= 1
					И РазницаТовары <= 400 Тогда
					СтрокаКеш = ТабПривязкиПоРолям.Найти(обДок.ТорговаяТочка, "ТорговаяТочка");
					Если СтрокаКеш <> Неопределено
						И ЗначениеЗаполнено(СтрокаКеш.Пользователь) Тогда
						ДокОбРасчетчик = обДок.Ссылка.ПолучитьОбъект();
						ДокОбРасчетчик.Расчетчик = СтрокаКеш.Пользователь;
						ДокОбРасчетчик.Обработан = Истина;
						ДокОбРасчетчик.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	ADOСоединение.Close();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(ДатаОбработки, МассивНомерМагазина = Неопределено, МассивID_TT = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
				   |	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦФО,
	               |	СтруктурныеЕдиницы.НомерТочки,
				   |	СтруктурныеЕдиницы.id_tt
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаНач, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
				   |ГДЕ
				   |	" + ?(МассивНомерМагазина = Неопределено, "ИСТИНА", "СтруктурныеЕдиницы.НомерТочки В(&МассивНомера)") + " И СтруктурныеЕдиницы.НомерТочки <> 999
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Ссылка КАК Ссылка,
	               |	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	              // |	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
				   |	" + ?(МассивНомерМагазина = Неопределено, "", "И ЛистУчета.ТорговаяТочка.НомерТочки В (&МассивНомера)") + "
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И Номенклатура.id_tov > 0
				   |	И Номенклатура.БезОстатков = ЛОЖЬ
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка КАК ТорговаяТочка,
				   |	МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.Сумма) КАК Сумма
				   |ИЗ
				   |	Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка КАК Ссылка,
				   |			МАКСИМУМ(СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС) КАК ДействуетС
				   |		ИЗ
				   |			Справочник.СтруктурныеЕдиницы.КорректировкаОстаткаАстор КАК СтруктурныеЕдиницыКорректировкаОстаткаАстор
				   |		ГДЕ
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС <= &ДатаКон
				   |		
				   |		СГРУППИРОВАТЬ ПО
				   |			СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка) КАК ВЗ_Макс
				   |		ПО СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка = ВЗ_Макс.Ссылка
				   |			И СтруктурныеЕдиницыКорректировкаОстаткаАстор.ДействуетС = ВЗ_Макс.ДействуетС
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СтруктурныеЕдиницыКорректировкаОстаткаАстор.Ссылка;
				   |
				   |ВЫБРАТЬ
				   |	ВЗ_Суммы.ТТ,
				   |	СУММА(ВЗ_Суммы.СуммаДокумента) КАК СуммаДокумента
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		РасходИзКассы.СтруктурнаяЕдиница КАК ТТ,
				   |		РасходИзКассы.СуммаДокумента КАК СуммаДокумента
				   |	ИЗ
				   |		Документ.РасходИзКассы КАК РасходИзКассы
				   |	ГДЕ
				   |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &ДатаНач
				   |		И РасходИзКассы.Проведен = ИСТИНА
				   |		И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
				   |	
				   |	ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |	ВЫБРАТЬ
				   |		РасходИзКассы.СтруктурнаяЕдиница,
				   |		РасходИзКассы.СуммаДокумента
				   |	ИЗ
				   |		Документ.РасходИзКассы КАК РасходИзКассы
				   |	ГДЕ
				   |		НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) = &ДатаНач
				   |		И РасходИзКассы.Проведен = ИСТИНА
				   |		И РасходИзКассы.СубконтоДт2 = &Фальшивка) КАК ВЗ_Суммы
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВЗ_Суммы.ТТ
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СоответствиеОбъектРольСрезПоследних.Объект КАК ТорговаяТочка,
				   |	МАКСИМУМ(Пользователи.Ссылка) КАК Пользователь
				   |ИЗ
				   |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаСрезаРоли, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
				   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
				   |			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
				   |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
				   |			И (РолиПользователейСоставРоли.НомерСтроки = 1)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СоответствиеОбъектРольСрезПоследних.Объект";
				   
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаСрезаРоли", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("МассивНомера", МассивНомерМагазина);
	Запрос.УстановитьПараметр("МассивID_TT", МассивID_TT);
	Запрос.УстановитьПараметр("Фальшивка", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39311"));
	Результаты = Запрос.ВыполнитьПакет();
	ТабТТ = Результаты[0].Выгрузить();
	ТабЛистыУчета = Результаты[1].Выгрузить();
	ТабНоменклатура = Результаты[2].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");
	ТабКорректировкиАстор = Результаты[3].Выгрузить();
	ТабИнкассация = Результаты[4].Выгрузить();
	ТабПривязкиПоРолям = Результаты[5].Выгрузить();
	
	ТабТоварыОбщие = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(ДатаОбработки, ДатаОбработки, ТабТТ.ВыгрузитьКолонку("Ссылка"));
	
	ТабТТТовары = ТабТоварыОбщие.Скопировать(, "ТТ");
	ТабТТТовары.Свернуть("ТТ");
	
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	//ADOСоединение.Open();
	
	//СтрЗапрос = "SELECT TTSpr._Fld1530 as Id, SUM(VZ_Dannie.Summa) as Summa
	//			|FROM (SELECT 
	//			|	  Ostatki._Fld6477_RTRef as TypeDenCell,
	//			|	  Ostatki._Fld6477_RRRef as DenCell,
	//			|	  Ostatki._Fld6480 as Summa
	//			|  FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock)
	//			|  WHERE Ostatki._Period IN (SELECT MAX(Ostatki._Period) FROM [VV].[dbo].[_AccumRgT6484] as Ostatki (nolock))
	//			|   and Ostatki._Fld6477_RTRef = 0x0000006B
	//			|  
	//			|  UNION ALL
	//			|  
	//			|  SELECT 
	//			|	  Ostatki._Fld6477_RTRef as TypeDenCell,
	//			|	  Ostatki._Fld6477_RRRef as DenCell,
	//			|	  Ostatki._Fld6480 * Case Ostatki._RecordKind WHEN 0 THEN -1 ELSE 1 END as Summa
	//			|  FROM [VV].[dbo].[_AccumRg6476] as Ostatki (nolock)
	//			|  WHERE DATEADD(YEAR, -2000, Ostatki._Period) > '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ostatki._Fld6477_RTRef = 0x0000006B) as VZ_Dannie
	//			|  INNER JOIN [VV].[dbo].[_Reference107] as DenCellSpr (nolock)
	//			|  ON VZ_Dannie.DenCell = DenCellSpr._IDRRef
	//			|  INNER JOIN [VV].[dbo].[_Reference176] as TTSpr (nolock)
	//			|  ON DenCellSpr._OwnerIDRRef = TTSpr._IDRRef
	//			|  
	//			|  Where TTSpr._Fld1530 <> 0
	//			|  
	//			|  GROUP BY TTSpr._Fld1530";
	//
	//rs = ADOСоединение.Execute(СтрЗапрос);
	
	табКонСуммы = Новый ТаблицаЗначений;
	табКонСуммы.Колонки.Добавить("ИД");
	табКонСуммы.Колонки.Добавить("Сумма");
	
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = табКонСуммы.Добавить();
	//		СтрокаДоб.ИД = Rs.Fields("Id").Value;
	//		СтрокаДоб.Сумма = Rs.Fields("Summa").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	
	//ADOСоединение.Close();
	
	Для Каждого СтрокаДанные Из ТабТТТовары Цикл
		СтрокаЛист = ТабЛистыУчета.Найти(СтрокаДанные.ТТ, "ТорговаяТочка");
		Если СтрокаЛист <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоргТочка = ТабТТ.Найти(СтрокаДанные.ТТ, "Ссылка");
		Если СтрокаТоргТочка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		обДок = Документы.ЛистУчета.СоздатьДокумент();
		обДок.Дата = НачалоДня(ДатаОбработки);
		обДок.Организация = Справочники.Организации.НайтиПоКоду("000000006"); //Вкусвилл
		обДок.УстановитьНовыйНомер(обДок.Организация.Префикс);
		обДок.ТорговаяТочка = СтрокаДанные.ТТ;
		обДок.ЦФО = СтрокаТоргТочка.ЦФО;
		обДок.ДатаЗакрытияСмены = НачалоДня(ДатаОбработки);
		обДок.ДатаКассовойСмены = обДок.Дата + 86400;
		
		СтрокаКонСумма = табКонСуммы.Найти(СтрокаДанные.ТТ.id_TT, "ИД");
		Если СтрокаКонСумма = Неопределено Тогда
			обДок.КонечныйОстатокПоАстору = 0;
		Иначе	
			обДок.КонечныйОстатокПоАстору = СтрокаКонСумма.Сумма;
		КонецЕсли;
		
		СтрокаКорАстор = ТабКорректировкиАстор.Найти(СтрокаДанные.ТТ, "ТорговаяТочка");
		обДок.КонечныйОстатокПоАстору = обДок.КонечныйОстатокПоАстору + ?(СтрокаКорАстор = Неопределено, 0, СтрокаКорАстор.Сумма);
		
		СтрокаИнкас = ТабИнкассация.Найти(обДок.ТорговаяТочка, "ТТ");
		Если СтрокаИнкас <> Неопределено Тогда
			обДок.СуммаИнкассации = СтрокаИнкас.СуммаДокумента;
		Иначе
			обДок.СуммаИнкассации = 0;
		КонецЕсли;
		
		//ТабОстаткиПослеИнвентаризации = ВнешниеДанные.ПолучитьОстатокПослеИнвентаризацииВкусвилл(ДатаОбработки, СтрокаДанные.ТТ);
			
		//ТабТовары.Очистить();
		
		ТабТовары = ТабТоварыОбщие.СкопироватьКолонки();
		СтрокиТовары = ТабТоварыОбщие.НайтиСтроки(Новый Структура("ТТ", СтрокаДанные.ТТ));
		Для Каждого СтрокаДанныеТовар Из СтрокиТовары Цикл
			ЗаполнитьЗначенияСвойств(ТабТовары.Добавить(), СтрокаДанныеТовар);
		КонецЦикла;	
		ОбщаяСуммаПродажТоваров = 0;
		Для Каждого СтрокаДанныеТовар Из ТабТовары Цикл
			//Если ТабОстаткиПослеИнвентаризации.Количество() > 0 Тогда
			//	СтрокаОстаток = ТабОстаткиПослеИнвентаризации.Найти(СтрокаДанныеТовар.Номенклатура, "Номенклатура");
			//	ОстатокНаКонец = 0;
			//	ОстатокПоСкл = 0;
			//	Если СтрокаОстаток <> Неопределено Тогда
			//		ОстатокНаКонец = СтрокаОстаток.ОстатокПоУчету;
			//		ОстатокПоСкл = СтрокаОстаток.Остаток;
			//	КонецЕсли;
			//	ОстатокНаКонец = ОстатокНаКонец + СтрокаДанныеТовар.Поступило + СтрокаДанныеТовар.Разница - СтрокаДанныеТовар.Продано
			//	- СтрокаДанныеТовар.Дегустация - СтрокаДанныеТовар.Списание - СтрокаДанныеТовар.СписаниеПоКачеству - СтрокаДанныеТовар.Бой - СтрокаДанныеТовар.Акция;
			//	Если ОстатокНаКонец <> ОстатокПоСкл Тогда
			//		СтрокаДанныеТовар.Разница = СтрокаДанныеТовар.Разница + ОстатокПоСкл - ОстатокНаКонец;
			//	КонецЕсли;						
			//КонецЕсли;
			ОбщаяСуммаПродажТоваров = ОбщаяСуммаПродажТоваров + СтрокаДанныеТовар.Сумма;
		КонецЦикла;
		
		обДок.ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
			
		//расчитаем отклоенние по товарам
		обДок.РазницаПоТоварам = ОбщаяСуммаПродажТоваров - обДок.Отклонение - обДок.СуммаДокумента;// - обДок.СкидкаКопеек + обДок.СторноОшибочно;
		
		обДок.Записать(РежимЗаписиДокумента.Проведение);
		
		Если НЕ ЗначениеЗаполнено(обДок.Ссылка.Расчетчик) Тогда
			РазницаДеньги = обДок.Ссылка.Отклонение;
			РазницаДеньги = РазницаДеньги * ?(РазницаДеньги < 0, -1, 1);
			РазницаТовары = обДок.Ссылка.РазницаПоТоварам;
			РазницаТовары = РазницаТовары * ?(РазницаТовары < 0, -1, 1);
			Если РазницаДеньги <= 1
				И РазницаТовары <= 400 Тогда
				СтрокаКеш = ТабПривязкиПоРолям.Найти(обДок.ТорговаяТочка, "ТорговаяТочка");
				Если СтрокаКеш <> Неопределено
					И ЗначениеЗаполнено(СтрокаКеш.Пользователь) Тогда
					ДокОбРасчетчик = обДок.Ссылка.ПолучитьОбъект();
					ДокОбРасчетчик.Расчетчик = СтрокаКеш.Пользователь;
					ДокОбРасчетчик.Обработан = Истина;
					ДокОбРасчетчик.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

//+++АК MIND 2017.11.27 перезагрузкой продавцов урегулируем коллизии по листам учета за переданную дату
Процедура ПерезагрузитьДанныеПоПродавцамВЛистыУчета(ДатаОбработки, Магазины = Неопределено) Экспорт
	
	МассивМагазины = Новый Массив();
	Если ТипЗнч(Магазины) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		МассивМагазины.Добавить(Магазины);
	ИначеЕсли ТипЗнч(Магазины) = Тип("Массив") Тогда
		МассивМагазины = Магазины;
	КонецЕсли;
	
	ТабВыходы = ПолучитьТаблицуПродавцовПоВыходам(ДатаОбработки);
	
	ТабДанныеДляЛистов = Новый ТаблицаЗначений();
	ТабДанныеДляЛистов.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТабДанныеДляЛистов.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЛистУчета", Новый ОписаниеТипов("ДокументСсылка.ЛистУчета"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоПродавец", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭкстренныйВызов", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоКассир", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоГрузчик", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоПромоутер", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоУборщица", Новый ОписаниеТипов("Булево"));
	ТабДанныеДляЛистов.Колонки.Добавить("ЭтоПекарь", Новый ОписаниеТипов("Булево")); //+++АК mika 2018.04.06 ИП-00018000
	ТабДанныеДляЛистов.Колонки.Добавить("КолвоЧасов", Новый ОписаниеТипов("Число"));
	ТабДанныеДляЛистов.Колонки.Добавить("СвойствоСотрудника", Новый ОписаниеТипов("Число"));
	ТабДанныеДляЛистов.Колонки.Добавить("ДатаПрихода", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабДанныеДляЛистов.Колонки.Добавить("ДатаУхода", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаОбработки));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабельРаботыПродавцов.Сотрудник,
	               |	ТабельРаботыПродавцов.ТорговаяТочка,
	               |	ТабельРаботыПродавцов.ЭкстренныйВызов,
	               |	ТабельРаботыПродавцов.СвойствоПродавца
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	               |ГДЕ
	               |	ТабельРаботыПродавцов.Период = &Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабельРаботыКассиров.Сотрудник,
	               |	ТабельРаботыКассиров.ТорговаяТочка,
	               |	ТабельРаботыКассиров.ЭкстренныйВызов,
	               |	ТабельРаботыКассиров.СвойствоСотрудника
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
	               |ГДЕ
	               |	ТабельРаботыКассиров.Период = &Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабельРаботыГрузчиков.Сотрудник,
	               |	ТабельРаботыГрузчиков.ТорговаяТочка,
	               |	ТабельРаботыГрузчиков.ЭкстренныйВызов,
	               |	ТабельРаботыГрузчиков.СвойствоСотрудника
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыГрузчиков
	               |ГДЕ
	               |	ТабельРаботыГрузчиков.Период = &Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабельРаботыУборщиц.Сотрудник,
	               |	ТабельРаботыУборщиц.ТорговаяТочка
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
	               |ГДЕ
	               |	ТабельРаботыУборщиц.Период = &Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
				   //+++АК mika 2018.04.06 ИП-00018000
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабельРаботыПекарей.Сотрудник,
	               |	ТабельРаботыПекарей.ТорговаяТочка,
	               |	ТабельРаботыПекарей.ЭкстренныйВызов,
	               |	ТабельРаботыПекарей.СвойствоСотрудника
	               |ИЗ
	               |	РегистрСведений.ТабельРаботыПекарей КАК ТабельРаботыПекарей
	               |ГДЕ
	               |	ТабельРаботыПекарей.Период = &Дата";
				   //---АК mika ИП-00018000
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПродавцы = Результаты[0].Выгрузить();
	ТабКассиры = Результаты[1].Выгрузить();
	ТабГрузчики = Результаты[2].Выгрузить();
	ТабУборщицы = Результаты[3].Выгрузить();
	ТабЛистыУчета = Результаты[4].Выгрузить();
	ТабПекари = Результаты[5].Выгрузить(); //+++АК mika 2018.04.06 ИП-00018000
	
	ТабПродавцы.Индексы.Добавить("Сотрудник, ТорговаяТочка");
	ТабКассиры.Индексы.Добавить("Сотрудник, ТорговаяТочка");
	ТабГрузчики.Индексы.Добавить("Сотрудник, ТорговаяТочка");
	ТабУборщицы.Индексы.Добавить("Сотрудник, ТорговаяТочка");
	ТабПекари.Индексы.Добавить("Сотрудник, ТорговаяТочка"); //+++АК mika 2018.04.06 ИП-00018000
	ТабЛистыУчета.Индексы.Добавить("ТорговаяТочка");

	Для Каждого СтрокаТаб Из ТабВыходы Цикл
		Если ТипЗнч(СтрокаТаб.Сотрудник) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЛистУчета = ТабЛистыУчета.Найти(СтрокаТаб.Магазин, "ТорговаяТочка");
		Если СтрокаЛистУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаДоб = ТабДанныеДляЛистов.Добавить();
		СтрокаДоб.ФизЛицо = СтрокаТаб.Сотрудник;
		СтрокаДоб.Магазин = СтрокаТаб.Магазин;
		СтрокаДоб.ЛистУчета = СтрокаЛистУчета.Ссылка;
		СтрокаДоб.КолвоЧасов = СтрокаТаб.КолвоЧасов;
		СтрокаДоб.ДатаПрихода = СтрокаТаб.ДатаПрихода;
		СтрокаДоб.ДатаУхода = СтрокаТаб.ДатаУхода;
		СтрокиКассиры = ТабКассиры.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаДоб.ФизЛицо, СтрокаДоб.Магазин));
		СтрокиГрузчики = ТабГрузчики.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаДоб.ФизЛицо, СтрокаДоб.Магазин));
		СтрокиУборщицы = ТабУборщицы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаДоб.ФизЛицо, СтрокаДоб.Магазин));
		СтрокиПекари   = ТабПекари.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаДоб.ФизЛицо, СтрокаДоб.Магазин)); //+++АК mika 2018.04.06 ИП-00018000
		Если СтрокаТаб.Промоутер Тогда
			СтрокаДоб.ЭтоПромоутер = Истина;
		ИначеЕсли СтрокиКассиры.Количество() > 0 Тогда
			СтрокаДоб.ЭтоКассир = Истина;
			СтрокаДоб.ЭкстренныйВызов = СтрокиКассиры[0].ЭкстренныйВызов;
			СтрокаДоб.СвойствоСотрудника = СтрокиКассиры[0].СвойствоСотрудника;
		ИначеЕсли СтрокиГрузчики.Количество() > 0 Тогда
			СтрокаДоб.ЭтоГрузчик = Истина;
			СтрокаДоб.ЭкстренныйВызов = СтрокиГрузчики[0].ЭкстренныйВызов;
			СтрокаДоб.СвойствоСотрудника = СтрокиГрузчики[0].СвойствоСотрудника;
		ИначеЕсли СтрокиУборщицы.Количество() > 0 Тогда
			СтрокаДоб.ЭтоУборщица = Истина;
		ИначеЕсли СтрокиПекари.Количество() > 0 Тогда //+++АК mika 2018.04.06 ИП-00018000
			СтрокаДоб.ЭтоПекарь = Истина;
		Иначе	
			СтрокаДоб.ЭтоПродавец = Истина;
			СтрокиПродавцы = ТабПродавцы.НайтиСтроки(Новый Структура("Сотрудник, ТорговаяТочка", СтрокаДоб.ФизЛицо, СтрокаДоб.Магазин));
			Если СтрокиПродавцы.Количество() > 0 Тогда
				СтрокаДоб.ЭкстренныйВызов = СтрокиПродавцы[0].ЭкстренныйВызов;
				//Если СтрокиПродавцы[0].СвойствоПродавца = 2 ИЛИ СтрокиПродавцы[0].СвойствоПродавца = 3 ИЛИ СтрокиПродавцы[0].СвойствоПродавца = 4 Тогда
					СтрокаДоб.СвойствоСотрудника = СтрокиПродавцы[0].СвойствоПродавца;
				//КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДанныеДляЛистов);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("Магазины", МассивМагазины);
	Запрос.УстановитьПараметр("НетОтбораПоМагазинам", МассивМагазины.Количество() = 0);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчета.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Листы
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Таб.ФизЛицо,
	               |	ВТ_Таб.Магазин,
	               |	ВТ_Таб.ЛистУчета,
	               |	ВТ_Таб.ЭтоПродавец,
	               |	ВТ_Таб.ЭкстренныйВызов,
	               |	ВТ_Таб.ЭтоКассир,
	               |	ВТ_Таб.ЭтоГрузчик,
	               |	ВТ_Таб.ЭтоПромоутер,
	               |	ВТ_Таб.ЭтоУборщица,
				   |	ВТ_Таб.ЭтоПекарь,  //+++АК mika 2018.04.06 ИП-00018000
	               |	ВТ_Таб.КолвоЧасов,
	               |	ВТ_Таб.ДатаПрихода,
	               |	ВТ_Таб.ДатаУхода,
	               |	ВТ_Таб.СвойствоСотрудника
	               |ПОМЕСТИТЬ ВТ_Таб
	               |ИЗ
	               |	&Таб КАК ВТ_Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЗ_Запрос.ЛистУчета
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаПродавцы.Ссылка, ВТ_Таб.ЛистУчета) КАК ЛистУчета
	               |	ИЗ
	               |		Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаПродавцы.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаПродавцы.Продавец = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоПродавец = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаПродавцы.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаПродавцы.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПродавцы.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПродавцы.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПродавцы.ЭкстренныйВызов, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Таб.ЭкстренныйВызов, ЛОЖЬ)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПродавцы.Пч, 0) <> ЕСТЬNULL(ВТ_Таб.СвойствоСотрудника, 0))
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаПромоутеры.Ссылка, ВТ_Таб.ЛистУчета)
	               |	ИЗ
	               |		Документ.ЛистУчета.Промоутеры КАК ЛистУчетаПромоутеры
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаПромоутеры.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаПромоутеры.Промоутер = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоПромоутер = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаПромоутеры.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаПромоутеры.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПромоутеры.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПромоутеры.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)))
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаКассиры.Ссылка, ВТ_Таб.ЛистУчета)
	               |	ИЗ
	               |		Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаКассиры.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаКассиры.Кассир = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоКассир = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаКассиры.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаКассиры.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаКассиры.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаКассиры.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаКассиры.ЭкстренныйВызов, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Таб.ЭкстренныйВызов, ЛОЖЬ)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаКассиры.СвойствоСотрудника, 0) <> ЕСТЬNULL(ВТ_Таб.СвойствоСотрудника, 0))
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаГрузчики.Ссылка, ВТ_Таб.ЛистУчета)
	               |	ИЗ
	               |		Документ.ЛистУчета.Грузчики КАК ЛистУчетаГрузчики
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаГрузчики.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаГрузчики.ФизЛицо = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоГрузчик = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаГрузчики.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаГрузчики.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаГрузчики.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаГрузчики.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаГрузчики.ЭкстренныйВызов, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Таб.ЭкстренныйВызов, ЛОЖЬ)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаГрузчики.СвойствоСотрудника, 0) <> ЕСТЬNULL(ВТ_Таб.СвойствоСотрудника, 0))
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаУборщицы.Ссылка, ВТ_Таб.ЛистУчета)
	               |	ИЗ
	               |		Документ.ЛистУчета.Уборщицы КАК ЛистУчетаУборщицы
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаУборщицы.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаУборщицы.ФизЛицо = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоУборщица = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаУборщицы.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаУборщицы.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаУборщицы.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаУборщицы.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)))) КАК ВЗ_Запрос
	               |ГДЕ
	               |	(ВЗ_Запрос.ЛистУчета.ТорговаяТочка В (&Магазины)
	               |			ИЛИ &НетОтбораПоМагазинам)
				    //+++АК mika 2018.04.06 ИП-00018000
				   |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ЛистУчетаПекари.Ссылка, ВТ_Таб.ЛистУчета)
	               |	ИЗ
	               |		Документ.ЛистУчета.Пекари КАК ЛистУчетаПекари
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Таб КАК ВТ_Таб
	               |			ПО ЛистУчетаПекари.Ссылка = ВТ_Таб.ЛистУчета
	               |				И ЛистУчетаПекари.ФизЛицо = ВТ_Таб.ФизЛицо
	               |				И (ВТ_Таб.ЭтоПекарь = ИСТИНА)
	               |	ГДЕ
	               |		ЛистУчетаПекари.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_Листы.Ссылка
	               |				ИЗ
	               |					ВТ_Листы КАК ВТ_Листы)
	               |		И (ЕСТЬNULL(ЛистУчетаПекари.КоличествоЧасов, 0) <> ЕСТЬNULL(ВТ_Таб.КолвоЧасов, 0)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПекари.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПекари.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(ВТ_Таб.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1))
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПекари.ЭкстренныйВызов, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Таб.ЭкстренныйВызов, ЛОЖЬ)
	               |				ИЛИ ЕСТЬNULL(ЛистУчетаПекари.СвойствоСотрудника, 0) <> ЕСТЬNULL(ВТ_Таб.СвойствоСотрудника, 0))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ЛистУчета.ПолучитьОбъект();
		ДокОбъект.Продавцы.Очистить();
		ДокОбъект.Промоутеры.Очистить();
		ДокОбъект.Кассиры.Очистить();
		ДокОбъект.Грузчики.Очистить();
		ДокОбъект.Уборщицы.Очистить();
		ДокОбъект.Пекари.Очистить();//+++АК mika 2018.04.06 ИП-00018000
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоПродавец", Выборка.ЛистУчета, Истина));
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Продавцы.Добавить();
			СтрокаДоб.Продавец = СтрокаДанные.ФизЛицо;
			СтрокаДоб.Пч = СтрокаДанные.СвойствоСотрудника;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ЭкстренныйВызов = СтрокаДанные.ЭкстренныйВызов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла;
		
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоКассир", Выборка.ЛистУчета, Истина));
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Кассиры.Добавить();
			СтрокаДоб.Кассир = СтрокаДанные.ФизЛицо;
			СтрокаДоб.СвойствоСотрудника = СтрокаДанные.СвойствоСотрудника;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ЭкстренныйВызов = СтрокаДанные.ЭкстренныйВызов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла;
		
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоПромоутер", Выборка.ЛистУчета, Истина));
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Промоутеры.Добавить();
			СтрокаДоб.Промоутер = СтрокаДанные.ФизЛицо;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла;
		
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоГрузчик", Выборка.ЛистУчета, Истина));
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Грузчики.Добавить();
			СтрокаДоб.ФизЛицо = СтрокаДанные.ФизЛицо;
			СтрокаДоб.СвойствоСотрудника = СтрокаДанные.СвойствоСотрудника;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ЭкстренныйВызов = СтрокаДанные.ЭкстренныйВызов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла;
		
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоУборщица", Выборка.ЛистУчета, Истина));
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Уборщицы.Добавить();
			СтрокаДоб.ФизЛицо = СтрокаДанные.ФизЛицо;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла;
		//+++АК mika 2018.04.06 ИП-00018000
		СтрокиДанные = ТабДанныеДляЛистов.НайтиСтроки(Новый Структура("ЛистУчета, ЭтоПекарь", Выборка.ЛистУчета, Истина)); 
		Для Каждого СтрокаДанные Из СтрокиДанные Цикл
			СтрокаДоб = ДокОбъект.Пекари.Добавить();
			СтрокаДоб.ФизЛицо = СтрокаДанные.ФизЛицо;
			СтрокаДоб.СвойствоСотрудника = СтрокаДанные.СвойствоСотрудника;
			СтрокаДоб.КоличествоЧасов = СтрокаДанные.КолвоЧасов;
			СтрокаДоб.ЭкстренныйВызов = СтрокаДанные.ЭкстренныйВызов;
			СтрокаДоб.ДатаПрихода = СтрокаДанные.ДатаПрихода;
			СтрокаДоб.ДатаУхода = СтрокаДанные.ДатаУхода;
		КонецЦикла; //---АК mika 2018.04.06 ИП-00018000
				
		ДокОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяЗаписьТолькоПродавцов", Истина);
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеОДоставке(ТорговаяТочка, ДатаЛУ)
	
	табДоставка = Новый ТаблицаЗначений;
	табДоставка.Колонки.Добавить("Терминал"	, Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	табДоставка.Колонки.Добавить("НомерЧека", Новый ОписаниеТипов("Строка"));
	табДоставка.Колонки.Добавить("Период"	, ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	табДоставка.Колонки.Добавить("СуммаБН"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	табДоставка.Колонки.Добавить("СуммаНал"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Если НЕ ДатаЛУ < Дата("20140201000000") ТОгда
		табДоставка.Колонки.Добавить("СуммаБНИсходная"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		табДоставка.Колонки.Добавить("СуммаНалИсходная"	, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("10.0.0.40");
	
	Если ADOСоединение = Неопределено Тогда
		Возврат табДоставка;
	КонецЕсли;
	
	//стрТекстЗапросаSQL = "
	//|select cm.time_add
	//|	,cm.number_cert courier
	//|	,c.ShopNo
	//|	,c.CashCheckNo
	//|	,case when ccu.CheckUID IS NULL then c.BaseSum else 0 end SummCash
	//|	,case when NOT ccu.CheckUID IS NULL then c.BaseSum else 0 end SummBank
	//|from Loyalty..Coupon_move cm (nolock)
	//|inner join SMS_UNION..Checks c (nolock) on c.CashCheckNo = cm.CashCheckNo 
	//|	and convert(date,c.CloseDate) = convert(date,cm.time_add) 
	//|	and cm.cashid/10 = c.ShopNo
	//|inner join SMS_UNION..Cash ca (nolock) on c.CashUID = ca.CashUID AND ca.CashID = cm.CashID
	//|left join SMS_UNION..CreditCardUsed ccu (nolock) on c.CheckUID = ccu.CheckUID
	//|where cm.id_type_coupon = 'D46DA4DA-6E0D-4C2F-91D7-E89669ADC7E9'
	//|and c.ShopNo = " + ТорговаяТочка + "
	//|and CONVERT(date,cm.time_add) = CONVERT(DATE,'" + Формат(ДатаЛУ, "ДФ=yyyy-MM-dd") + "')";
	
	Если ДатаЛУ >= '20150419' Тогда
		стрТекстЗапросаSQL = "
		|Select Ch.CloseDate as time_add,
		//+++АК ILIK 2018.06.25 ИП-00018883
		|	'' as courier,
		//---АК ILIK
		|	Ch.ShopNo as ShopNo,
		|	Ch.CashCheckNo as CashCheckNo,
		|	Ch.SummCash * CASE WHEN Ch.OperationType = 3 THEN -1 ELSE 1 END as SummCash,
		|	Ch.SummBank as SummBank
		|From SMS_UNION.dbo.Checks as Ch (nolock)
		//+++АК ILIK 2018.06.25 ИП-00018883
		|where CONVERT(date, Ch.CloseDate) = CONVERT(DATE,'" + Формат(ДатаЛУ, "ДФ=yyyy-MM-dd") + "') and Ch.ShopNo = " + ВнешниеДанные.ФорматПоля(ТорговаяТочка) + " and 1 <> 1 and Ch.OperationType > 0";
		//---АК ILIK
	Иначе	
		стрТекстЗапросаSQL = "
		|select cm.time_add
		|	,cm.number_cert courier
		|	,c.ShopNo
		|	,c.CashCheckNo
		|	,c.SummCash SummCash
		|	,c.SummBank SummBank
		|from Loyalty..Coupon_move cm (nolock)
		|inner join SMS_UNION..Checks c (nolock) on c.CashCheckNo = cm.CashCheckNo 
		|	and convert(date,c.CloseDate) = convert(date,cm.time_add) 
		|	and cm.cashid/10 = c.ShopNo
		|where cm.id_type_coupon = 'D46DA4DA-6E0D-4C2F-91D7-E89669ADC7E9'
		|and c.ShopNo = " + ТорговаяТочка + "
		|and CONVERT(date,cm.time_add) = CONVERT(DATE,'" + Формат(ДатаЛУ, "ДФ=yyyy-MM-dd") + "')";
	КонецЕсли;	

	
	rs = ADOСоединение.Execute(стрТекстЗапросаSQL);
	
	Если rs.EOF() Тогда	
		Возврат табДоставка;
	КонецЕсли;
	
	Пока НЕ rs.EOF() Цикл
		чекДоставка = табДоставка.Добавить();
		чекДоставка.Терминал	= Справочники.Терминалы.НайтиПоКоду(Формат(Rs.Fields("courier").Value, "ЧГ=0"));
		чекДоставка.НомерЧека	= Формат(Rs.Fields("CashCheckNo").Value, "ЧГ=0");
		чекДоставка.Период		= Rs.Fields("time_add").Value;
		чекДоставка.СуммаБН		= Rs.Fields("SummBank").Value;
		чекДоставка.СуммаНал	= Rs.Fields("SummCash").Value;
		Если НЕ ДатаЛУ < Дата("20140201000000") ТОгда
			чекДоставка.СуммаБНИсходная 	= чекДоставка.СуммаБН;
			чекДоставка.СуммаНалИсходная 	= чекДоставка.СуммаНал;
		КонецЕсли;
		rs.MoveNext();
	КонецЦикла;
	
	ADOСоединение.Close();
	
	Возврат табДоставка;
	
КонецФункции

Процедура ЗагрузитьДанныеОбращенийКПокупателям(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы_3p.id_3p,
	|	Документы_3p.НомерКарты_3p,
	|	Документы_3p.Date_activation,
	|	Документы_3p.Date_call,
	|	Документы_3p.user_call,
	|	Документы_3p._p_answer,
	|	Документы_3p._p_answer2,
	|	Документы_3p._p_answer3,
	|	Документы_3p.desc_3p,
	|	Документы_3p.id_3p_q,
	|	Документы_3p.id_3p_v,
	|	Документы_3p.Проект,
	|	Документы_3p.id_type_BV,
	|	Документы_3p.contact,
	|	Документы_3p.type_svyz,
	|	Спр_p_question._p_question КАК НаименованиеСпискаВопросов,
	|	Спр_p_vibor._p_vibor КАК НаименованиеВыборка,
	|	type_BV.name_type_BV КАК НаименованиеТипОбращения
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица._3p КАК Документы_3p
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица._p_question КАК Спр_p_question
	|		ПО Документы_3p.id_3p_q = Спр_p_question.id_3p_question
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица._p_vibor КАК Спр_p_vibor
	|		ПО Документы_3p.id_3p_v = Спр_p_vibor.id_3p_vibor
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.type_BV КАК type_BV
	|		ПО Документы_3p.id_type_BV = type_BV.id_type_BV
	|ГДЕ
	|	Документы_3p.Date_activation МЕЖДУ &ДатаНач И &ДатаКон";
				   
	ТаблицаОбращений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбработанныеОбращения = Новый ТаблицаЗначений();
	ТаблицаОбработанныеОбращения.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОбращениеКПокупателю"));
	
	Для Каждого СтрокаЛистУчета Из ТаблицаОбращений Цикл
		СсылкаДокумент = СоздатьИзменитьДокументОбращениеКПокупателю(СтрокаЛистУчета);
		Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
			СтрокаДоб = ТаблицаОбработанныеОбращения.Добавить();
			СтрокаДоб.Ссылка = СсылкаДокумент;
		КонецЕсли;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛистУчета.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.ОбращениеКПокупателю КАК ЛистУчета
	               |	ГДЕ
	               |		ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ЛистУчета.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеОбращения);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОПромоакциях(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Plan_promo.id_plan_promo,
	               |	Plan_promo.id_tt_promo,
	               |	Plan_promo.date_promo
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Plan_promo КАК Plan_promo
	               |ГДЕ
	               |	Plan_promo.date_promo МЕЖДУ &ДатаНач И &ДатаКон
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Str_plan_promo.id_str_plan_promo КАК id_str_plan_promo,
	               |	Str_plan_promo.id_plan_promo КАК id_plan_promo,
	               |	Str_plan_promo.id_tov_promo,
	               |	Str_plan_promo.kolvo_promo,
	               |	Str_plan_promo.cena_promo,
	               |	Str_plan_promo.is_ZP
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Str_plan_promo КАК Str_plan_promo
	               |ГДЕ
	               |	Str_plan_promo.id_plan_promo В
	               |			(ВЫБРАТЬ
	               |				Plan_promo.id_plan_promo
	               |			ИЗ
	               |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Plan_promo КАК Plan_promo
	               |			ГДЕ
	               |				Plan_promo.date_promo МЕЖДУ &ДатаНач И &ДатаКон)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_plan_promo,
	               |	id_str_plan_promo";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаПромоакций = РезультатыЗапроса[0].Выгрузить();
	ТаблицаТабЧастейПромоакций = РезультатыЗапроса[1].Выгрузить();
	ТаблицаТабЧастейПромоакций.Индексы.Добавить("id_plan_promo");
	
	ТаблицаОбработанныеПромоакции = Новый ТаблицаЗначений();
	ТаблицаОбработанныеПромоакции.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Промоакция"));
	
	Для Каждого СтрокаПромоакция Из ТаблицаПромоакций Цикл
		СсылкаДокумент = СоздатьИзменитьДокументПромоакция(СтрокаПромоакция, ТаблицаТабЧастейПромоакций);
		Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
			СтрокаДоб = ТаблицаОбработанныеПромоакции.Добавить();
			СтрокаДоб.Ссылка = СсылкаДокумент;
		КонецЕсли;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛистУчета.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.Промоакция КАК ЛистУчета
	               |	ГДЕ
	               |		ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ЛистУчета.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеПромоакции);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПоступлениях(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Supply.id_supply,
	               |	Supply.date,
	               |	Supply.id_post,
	               |	Supply.N_post,
	               |	Supply.Summa,
	               |	Supply.BuhDocument,
	               |	Supply.Primechanie,
	               |	Supply.id_TT,
	               |	Supply.buh_sum,
	               |	Supply.id_UL,
	               |	Supply.id_sklad,
	               |	Supply.N_Factur,
	               |	Supply.Date_Factur,
	               |	Supply.id_sotrudnik,
	               |	Supply.time_2,
	               |	Voditeli.Voditel,
	               |	Voditeli.id_sklad КАК id_skladVoditel,
	               |	Supply.time_1
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Supply КАК Supply
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Voditeli КАК Voditeli
	               |		ПО Supply.id_sotrudnik = Voditeli.id_vod
	               |ГДЕ
	               |	Supply.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	И Supply.id_post <> 12
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Str_supply.id_str_supply КАК id_str_supply,
	               |	Str_supply.id_supply КАК id_supply,
	               |	Str_supply.id_tov,
	               |	Str_supply.cena,
	               |	Str_supply.kolvo,
	               |	Str_supply.id_kontr,
	               |	Str_supply.kolvo_sklad,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Str_supply КАК Str_supply
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Str_supply.id_kontr = Kontr.id_kontr
	               |ГДЕ
	               |	Str_supply.id_supply В
	               |			(ВЫБРАТЬ
	               |				Supply.id_supply
	               |			ИЗ
	               |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Supply КАК Supply
	               |			ГДЕ
	               |				Supply.date МЕЖДУ &ДатаНач И &ДатаКон
	               |				И Supply.id_post <> 12)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_supply,
	               |	id_str_supply";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаПоступлений = РезультатыЗапроса[0].Выгрузить();
	ТаблицаТабЧастейПоступлений = РезультатыЗапроса[1].Выгрузить();
	ТаблицаТабЧастейПоступлений.Индексы.Добавить("id_supply");
	
	ТаблицаОбработанныеПоступления = Новый ТаблицаЗначений();
	ТаблицаОбработанныеПоступления.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.АК_ПоступлениеТоваровУслуг"));
	
	Для Каждого СтрокаДокумент Из ТаблицаПоступлений Цикл
		СсылкаДокумент = СоздатьИзменитьДокументПоступления(СтрокаДокумент, ТаблицаТабЧастейПоступлений);
		Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
			СтрокаДоб = ТаблицаОбработанныеПоступления.Добавить();
			СтрокаДоб.Ссылка = СсылкаДокумент;
		КонецЕсли;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛистУчета.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.АК_ПоступлениеТоваровУслуг КАК ЛистУчета
	               |	ГДЕ
	               |		ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ЛистУчета.ПометкаУдаления = ЛОЖЬ
	               |		И ЛистУчета.ИД > 0) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеПоступления);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПеремещениях(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Supply.id_supply,
	               |	Supply.date,
	               |	Supply.id_post,
	               |	Supply.N_post,
	               |	Supply.Summa,
	               |	Supply.BuhDocument,
	               |	Supply.Primechanie,
	               |	Supply.id_TT,
	               |	Supply.buh_sum,
	               |	Supply.id_UL,
	               |	Supply.id_sklad,
	               |	Supply.N_Factur,
	               |	Supply.Date_Factur,
	               |	Supply.id_sotrudnik,
	               |	Supply.time_2,
	               |	Voditeli.Voditel,
	               |	Voditeli.id_sklad КАК id_skladVoditel,
	               |	Supply.time_1,
	               |	Supply.opozdanie
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Supply КАК Supply
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Voditeli КАК Voditeli
	               |		ПО Supply.id_sotrudnik = Voditeli.id_vod
	               |ГДЕ
	               |	Supply.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	И Supply.id_post = 12
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Str_supply.id_str_supply КАК id_str_supply,
	               |	Str_supply.id_supply КАК id_supply,
	               |	Str_supply.id_tov,
	               |	Str_supply.cena,
	               |	Str_supply.kolvo КАК kolvo,
	               |	ЛОЖЬ КАК ЭтоРасход,
	               |	Str_supply.id_kontr,
	               |	Str_supply.kolvo_sklad,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Str_supply КАК Str_supply
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Str_supply.id_kontr = Kontr.id_kontr
	               |ГДЕ
	               |	Str_supply.id_supply В
	               |			(ВЫБРАТЬ
	               |				Supply.id_supply
	               |			ИЗ
	               |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Supply КАК Supply
	               |			ГДЕ
	               |				Supply.date МЕЖДУ &ДатаНач И &ДатаКон
	               |				И Supply.id_post = 12)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_supply,
	               |	id_str_supply";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаПеремещений = РезультатыЗапроса[0].Выгрузить();
	ТаблицаТабЧастейПеремещений = РезультатыЗапроса[1].Выгрузить();
	ТаблицаТабЧастейПеремещений.Индексы.Добавить("id_supply, ЭтоРасход");
	
	Для Каждого СтрокаТаб Из ТаблицаТабЧастейПеремещений Цикл
		Если ТипЗнч(СтрокаТаб.kolvo) = Тип("Число") И СтрокаТаб.kolvo <= 0 Тогда
			СтрокаТаб.kolvo = СтрокаТаб.kolvo * -1;
			СтрокаТаб.ЭтоРасход = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаОбработанныеПеремещения = Новый ТаблицаЗначений();
	ТаблицаОбработанныеПеремещения.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров"));
	
	Для Каждого СтрокаДокумент Из ТаблицаПеремещений Цикл
		МассивДокументы = СоздатьИзменитьДокументПеремещения(СтрокаДокумент, ТаблицаТабЧастейПеремещений);
		Для Каждого ЭлементДок Из МассивДокументы Цикл
			СтрокаДоб = ТаблицаОбработанныеПеремещения.Добавить();
			СтрокаДоб.Ссылка = ЭлементДок;
		КонецЦикла;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПеремещениеТоваров.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |	ГДЕ
	               |		ПеремещениеТоваров.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И ПеремещениеТоваров.ПометкаУдаления = ЛОЖЬ
	               |		И ПеремещениеТоваров.ИД > 0) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеПеремещения);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОБланках(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Blank1.type_B1,
	               |	Blank1.id_B1,
	               |	Blank1.Date_B1,
	               |	Blank1.id_tt_B1,
	               |	Blank1.__ex_B1
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Blank1 КАК Blank1
	               |ГДЕ
	               |	Blank1.Date_B1 МЕЖДУ &ДатаНач И &ДатаКон
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Str_B1.id_B1 КАК id_B1,
	               |	Str_B1.id_tovar_B1,
	               |	Str_B1.id_kontr_B1,
	               |	Str_B1.kolvo_B1,
	               |	Str_B1.Problema_B1,
	               |	Str_B1.Comment_pr_B1,
	               |	Str_B1.kolvo_KKM_B1,
	               |	Str_B1.kolvo_sklad_B2,
	               |	Str_B1.kolvo_boi_B4,
	               |	Str_B1.kolvo_KKM_B4,
	               |	Str_B1.id_str_B1 КАК id_str_B1,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Str_B1.type_B1
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Str_B1 КАК Str_B1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Str_B1.id_kontr_B1 = Kontr.id_kontr
	               |ГДЕ
	               |	Str_B1.id_B1 В
	               |			(ВЫБРАТЬ
	               |				Blank1.id_B1
	               |			ИЗ
	               |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Blank1 КАК Blank1
	               |			ГДЕ
	               |				Blank1.Date_B1 МЕЖДУ &ДатаНач И &ДатаКон)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	id_B1,
	               |	id_str_B1";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаБланки = РезультатыЗапроса[0].Выгрузить();
	ТаблицаТабЧастейБланки = РезультатыЗапроса[1].Выгрузить();
	ТаблицаТабЧастейБланки.Индексы.Добавить("id_B1");
	
	ТаблицаОбработанныеБланки = Новый ТаблицаЗначений();
	ТаблицаОбработанныеБланки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Бланк"));
	
	Для Каждого СтрокаДокумент Из ТаблицаБланки Цикл
		СсылкаДокумент = СоздатьИзменитьДокументБланка(СтрокаДокумент, ТаблицаТабЧастейБланки);
		Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
			СтрокаДоб = ТаблицаОбработанныеБланки.Добавить();
			СтрокаДоб.Ссылка = СсылкаДокумент;
		КонецЕсли;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Бланк.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.Бланк КАК Бланк
	               |	ГДЕ
	               |		Бланк.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И Бланк.ПометкаУдаления = ЛОЖЬ
	               |		И Бланк.ИД > 0) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеБланки);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОБланках_СКЛ_Новая(ДатаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.id_TT
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
				   |	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизводитель
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТипыСписанийИВозвратов.Ссылка,
	               |	ТипыСписанийИВозвратов.ИД
	               |ИЗ
	               |	Справочник.ТипыСписанийИВозвратов КАК ТипыСписанийИВозвратов";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабНоменклатура = Результаты[0].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");
	ТабТТ = Результаты[1].Выгрузить();
	ТабТТ.Индексы.Добавить("id_TT");
	ТабПроизводители = Результаты[2].Выгрузить();
	ТабПроизводители.Индексы.Добавить("ИДПроизводитель, Номенклатура");
	ТабТипыСписаний = Результаты[3].Выгрузить();
	ТабТипыСписаний.Индексы.Добавить("ИД");
	
	
	ТипОбращенияНеобработан = Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("23");
	ТипЖалобыНеОбработан = Справочники.ТипыЖалоб.НайтиПоКоду("16");
	РезультатОбращенияНеОбработан = Справочники.РезультатыРассмотренияОбращений.НайтиПоКоду("6");
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("ДатаЧека", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ИДСтрокиТовара", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("ФИОПокупателя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТабДанные.Колонки.Добавить("НомерБонуснойКарты", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("id_tt", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ТипОперацииЧека", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("id_kontr", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("КодПричины", Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT cl.CheckLineUID as LineUID, cl.id_tov_cl, cl.ManufacturerID , cl.id_reason,
				|cl.Date_proiizv ,sum(cl.Quantity) Quantity, cl.id_tt_cl, cl.OperationType_cl, ch.CloseDate
				|, ISNULL(Cards.FullName, '') as FIO, ISNULL(Cards.CardNumber, '') as CardNumber, ISNULL(Cards.Phone, '') as Phone
				|FROM SMS_IZBENKA.dbo.Checks(nolock) ch INNER JOIN
				|SMS_IZBENKA.dbo.CheckLine(nolock) cl ON ch.CheckUID = cl.CheckUID
				|left join M2.dbo.Tovari rea on rea.N_t_sms = cl.id_reason and rea.N_t_sms <>0
				|LEFT OUTER JOIN (SELECT [FullName]
			  	|					,[Email] as CardNumber
			  	|					,[Phone]
			  	|				FROM [Loyalty].[dbo].[Customer] (Nolock)
			  	|					WHERE [Email] <> '') as Cards ON ch.BonusCard = Cards.CardNumber
				|WHERE cl.OperationType_cl IN (103,113,201, 211) AND cl.date_ch = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' 
				|GROUP BY cl.CheckLineUID, cl.id_tov_cl, cl.ManufacturerID , cl.id_reason,
				|cl.Date_proiizv , cl.id_tt_cl, cl.OperationType_cl, ch.CloseDate
				|, ISNULL(Cards.FullName, ''), ISNULL(Cards.CardNumber, ''), ISNULL(Cards.Phone, '')";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.ДатаЧека = Rs.Fields("CloseDate").Value;
			СтрокаДоб.ИДСтрокиТовара = Rs.Fields("LineUID").Value;
			СтрокаДоб.id_tov = Rs.Fields("id_tov_cl").Value;
			СтрокаДоб.id_kontr = Rs.Fields("ManufacturerID").Value;
			СтрокаДоб.КодПричины = Rs.Fields("id_reason").Value;
			СтрокаДоб.ДатаПроизводства = Rs.Fields("Date_proiizv").Value;
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.id_tt = Rs.Fields("id_tt_cl").Value;
			СтрокаДоб.ТипОперацииЧека = Rs.Fields("OperationType_cl").Value;
			СтрокаДоб.ФИОПокупателя = Rs.Fields("FIO").Value;
			СтрокаДоб.НомерБонуснойКарты = Rs.Fields("CardNumber").Value;
			СтрокаДоб.Телефон = Rs.Fields("Phone").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//СтрЗапрос = "SELECT pn.row_rep as LineUID, pn.PLU as id_tov_cl, convert(int,pn.Summ) as ManufacturerID, pn.id_reason as id_reason,
	//			|pn.date_proizv as Date_proiizv, SUM(pn.Quantity) as Quantity, pn.CashID as id_tt_cl, pn.ChequeNum as OperationType_cl, pn.DateTime
	//			|FROM [Loyalty].[dbo].[PurchaseNotificationLine] pn 
	//			|WHERE LEN(CashID) IN (3, 5) AND ChequeNum IN (103,113,201, 211) AND CONVERT(date, pn.DateTime) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' 
	//			|group by pn.row_rep, pn.PLU, convert(int,pn.Summ), pn.id_reason, pn.date_proizv, pn.CashID, pn.ChequeNum, pn.DateTime";
	
	СтрЗапрос = "SELECT TD.tduid as LineUid, TD.id_tov as id_tov_cl, TD.id_kontr as ManufacturerID, TD.id_reason as id_reason,
				|TD.Date_proizv as Date_proiizv, TD.Quantity as Quantity, tt.id_tt as id_tt_cl, TD.operation_type as OperationType_cl, TD.closedate as DateTime
				|, ISNULL(Checks.FIO, '') as FIO, ISNULL(Checks.CardNumber, '') as CardNumber, ISNULL(Checks.Phone, '') as Phone
				|FROM SMS_REPL.dbo.TD_move as TD (nolock)
				|LEFT OUTER JOIN M2.dbo.tt as tt (nolock) ON TD.ShopNo_rep = tt.N
				|LEFT OUTER JOIN (SELECT Ch.CashID, Ch.[6] as CashCheckNo, ISNULL(Cards.FullName, '') as FIO, ISNULL(Cards.Email, '') as CardNumber, ISNULL(Cards.Phone, '') as Phone
				|				FROM SMS_REPL.dbo._export (nolock) as Ch
				|				LEFT OUTER JOIN Loyalty.dbo.Customer (nolock) as Cards ON REPLACE(Ch.[8], '@', '') = Cards.Email
				|				WHERE Ch.[2] = '" + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy") + "' and Ch.[4] = '42') as Checks
				|ON TD.CashId = Checks.CashID and TD.N_int = Checks.CashCheckNo
				|WHERE TD.operation_type IN (103, 113, 201, 211) and TD.Confirm_type = 1 and TD.id_tov <> 0 and CONVERT(date, TD.Closedate) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "'";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.ДатаЧека = Rs.Fields("DateTime").Value;
			СтрокаДоб.ИДСтрокиТовара = Сред(Rs.Fields("LineUID").Value, 2, 36);
			СтрокаДоб.id_tov = Rs.Fields("id_tov_cl").Value;
			СтрокаДоб.id_kontr = Rs.Fields("ManufacturerID").Value;
			СтрокаДоб.КодПричины = Rs.Fields("id_reason").Value;
			Попытка
				СтрокаДоб.ДатаПроизводства = Rs.Fields("Date_proiizv").Value;
			Исключение
			КонецПопытки;	
			СтрокаДоб.Количество = Rs.Fields("Quantity").Value;
			СтрокаДоб.id_tt = Rs.Fields("id_tt_cl").Value;
			СтрокаДоб.ТипОперацииЧека = Rs.Fields("OperationType_cl").Value;
			СтрокаДоб.ФИОПокупателя = Rs.Fields("FIO").Value;
			СтрокаДоб.НомерБонуснойКарты = Rs.Fields("CardNumber").Value;
			СтрокаДоб.Телефон = Rs.Fields("Phone").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос.УстановитьПараметр("Таб", ТабДанные);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ДатаЧека КАК ДатаЧека,
	               |	Таб.ИДСтрокиТовара КАК ИДСтрокиТовара,
	               |	Таб.id_tov,
	               |	Таб.id_kontr,
	               |	Таб.КодПричины,
	               |	Таб.ДатаПроизводства,
	               |	Таб.Количество,
	               |	Таб.id_tt,
	               |	Таб.ТипОперацииЧека,
	               |	Таб.ФИОПокупателя,
	               |	Таб.НомерБонуснойКарты,
	               |	Таб.Телефон
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИДСтрокиТовара
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ДатаЧека,
	               |	ВТ_Данные.ИДСтрокиТовара,
	               |	ВТ_Данные.id_tov,
	               |	ВТ_Данные.id_kontr,
	               |	ВТ_Данные.КодПричины,
	               |	ВТ_Данные.ДатаПроизводства,
	               |	ВТ_Данные.Количество,
	               |	ВТ_Данные.id_tt КАК id_tt,
	               |	ВТ_Данные.ТипОперацииЧека КАК ТипОперацииЧека,
	               |	БланкТовары.Ссылка КАК Ссылка,
	               |	ВТ_Данные.ФИОПокупателя,
	               |	ВТ_Данные.НомерБонуснойКарты,
	               |	ВТ_Данные.Телефон
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Бланк.Товары КАК БланкТовары
	               |		ПО ВТ_Данные.ИДСтрокиТовара = БланкТовары.УИНСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	id_tt,
	               |	ТипОперацииЧека,
	               |	ВТ_Данные.ДатаЧека
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("id_tt") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ТипОперацииЧека") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ДатаЧека") Цикл
					Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
						ДокОбъект = Документы.Бланк.СоздатьДокумент();
						ДокОбъект.Дата = ДатаОбработки;
						Если Выборка.ТипОперацииЧека = 201
							ИЛИ Выборка.ТипОперацииЧека = 211 Тогда
							ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип1;
						ИначеЕсли Выборка.ТипОперацииЧека = 103
							ИЛИ Выборка.ТипОперацииЧека = 113 Тогда
							ДокОбъект.ТипБланка = Перечисления.ТипыБланков.Тип2;	
						КонецЕсли;
						ДокОбъект.ЗагруженПоНовойСистеме = Истина;
						Если Выборка.ТипОперацииЧека = 201 Тогда
							ДокОбъект.ТипОперацииЧека = Перечисления.ТипыОперацийЧеков.Тип201;
						ИначеЕсли Выборка.ТипОперацииЧека = 211 Тогда
							ДокОбъект.ТипОперацииЧека = Перечисления.ТипыОперацийЧеков.Тип211;
						ИначеЕсли Выборка.ТипОперацииЧека = 103 Тогда
							ДокОбъект.ТипОперацииЧека = Перечисления.ТипыОперацийЧеков.Тип103;
						ИначеЕсли Выборка.ТипОперацииЧека = 113 Тогда
							ДокОбъект.ТипОперацииЧека = Перечисления.ТипыОперацийЧеков.Тип113;	
						КонецЕсли;	
						СтрокаТТ = ТабТТ.Найти(Выборка.id_TT, "id_TT");
						ДокОбъект.ТорговаяТочка = СтрокаТТ.Ссылка;
						Пока Выборка.Следующий() Цикл
							СтрокаТовар = ТабНоменклатура.Найти(Выборка.id_tov, "id_tov");
							СтрокаДоб = ДокОбъект.Товары.Добавить();
							СтрокаДоб.Номенклатура = СтрокаТовар.Ссылка;
							СтрокиПроизв = ТабПроизводители.НайтиСтроки(Новый Структура("ИДПроизводитель, Номенклатура", Выборка.id_kontr, СтрокаДоб.Номенклатура));
							Если СтрокиПроизв.Количество() > 0 Тогда
								СтрокаДоб.Производитель = СтрокиПроизв[0].Производитель;
								СтрокаДоб.Характеристика = СтрокиПроизв[0].Характеристика;
							КонецЕсли;	
							СтрокаДоб.ТипОбращения = ТипОбращенияНеобработан;
							СтрокаДоб.ТипЖалобы = ТипЖалобыНеОбработан;
							СтрокаДоб.РезультатОбращения = РезультатОбращенияНеОбработан;
							Если Выборка.ТипОперацииЧека = 201
								ИЛИ Выборка.ТипОперацииЧека = 211 Тогда
								//СтрокаДоб.Проблема = Перечисления.ТипыПроблемБланков.Другое;
								СтрокаДоб.Количество = Выборка.Количество * ?(ДокОбъект.ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин, -1, 1);
							Иначе
								//СтрокаДоб.Проблема = Перечисления.ТипыПроблемБланков.Качество;
								СтрокаДоб.Количество = Выборка.Количество;
							КонецЕсли;
							СтрокаДоб.ДатаПроизв = Выборка.ДатаПроизводства;
							СтрокаДоб.УИНСтроки = Выборка.ИДСтрокиТовара;
							СтрокаТипСписания = ТабТипыСписаний.Найти(Выборка.КодПричины, "ИД");
							Если СтрокаТипСписания <> Неопределено Тогда
								СтрокаДоб.ТипСписанияВозврата = СтрокаТипСписания.Ссылка;
							КонецЕсли;	
							СтрокаДоб.ФИО_Покупателя = Выборка.ФИОПокупателя;
							СтрокаДоб.Телефон = Выборка.Телефон;
							Если ЗначениеЗаполнено(Выборка.НомерБонуснойКарты) Тогда
								НомерКарты = СокрЛП(Выборка.НомерБонуснойКарты);
								Пока Лев(НомерКарты, 1) = "0" Цикл
									НомерКарты = Сред(НомерКарты, 2);
								КонецЦикла;	
								Попытка
									СтрокаДоб.Номер_Карты_ОК = Число(НомерКарты);
								Исключение
								КонецПопытки;	
							КонецЕсли;	
						КонецЦикла;
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
				   
КонецПроцедуры	

Процедура ЗагрузитьДанныеОБланках_СКЛ_НапрямуюВОбращения(ДатаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизводитель
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыСписанийИВозвратов.Ссылка,
	|	ТипыСписанийИВозвратов.ИД
	|ИЗ
	|	Справочник.ТипыСписанийИВозвратов КАК ТипыСписанийИВозвратов";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабНоменклатура 	= Результаты[0].Выгрузить();
	ТабНоменклатура.Индексы.Добавить("id_tov");
	ТабТТ 				= Результаты[1].Выгрузить();
	ТабТТ.Индексы.Добавить("id_TT");
	ТабПроизводители 	= Результаты[2].Выгрузить();
	ТабПроизводители.Индексы.Добавить("ИДПроизводитель, Номенклатура");
	ТабТипыСписаний 	= Результаты[3].Выгрузить();
	ТабТипыСписаний.Индексы.Добавить("ИД");
	
	
	ТипОбращенияНеобработан 		= Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("23");
	ТипЖалобыНеОбработан 			= Справочники.ТипыЖалоб.НайтиПоКоду("16");
	РезультатОбращенияНеОбработан 	= Справочники.РезультатыРассмотренияОбращений.НайтиПоКоду("6");
	
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("ДатаЧека"			, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ИДСтрокиТовара"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("ФИОПокупателя"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТабДанные.Колонки.Добавить("НомерБонуснойКарты"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("Телефон"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТабДанные.Колонки.Добавить("id_tt"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ТипОперацииЧека"	, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("id_kontr"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("ДатаПроизводства"	, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("КодПричины"			, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Количество"			, Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос =
	"SELECT
	|	cl.CheckLineUID as LineUID,
	|	cl.id_tov_cl,
	|	cl.ManufacturerID,
	|	cl.id_reason,
	|	cl.Date_proiizv,
	|	cl.id_tt_cl,
	|	cl.OperationType_cl,
	|	ch.CloseDate,
	|	ISNULL(Cards.FullName, '') as FIO,
	|	ISNULL(Cards.CardNumber, '') as CardNumber,
	|	ISNULL(Cards.Phone, '') as Phone,
	|	SUM(cl.Quantity) as Quantity
	|FROM SMS_IZBENKA.dbo.Checks(nolock) ch
	| INNER JOIN SMS_IZBENKA.dbo.CheckLine(nolock) cl
	| ON ch.CheckUID = cl.CheckUID
	| LEFT JOIN M2.dbo.Tovari as rea
	| on rea.N_t_sms = cl.id_reason
	|	 and rea.N_t_sms <>0
	| LEFT OUTER JOIN (SELECT
	|					FullName,
	|					Email as CardNumber,
	|					Phone
	|				FROM Loyalty.dbo.Customer (Nolock)
	|				WHERE
	|					Email <> '') as Cards
	| ON ch.BonusCard = Cards.CardNumber
	|WHERE
	|	cl.OperationType_cl IN (103,201)
	|	AND cl.date_ch = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "' 
	|GROUP BY
	|	cl.CheckLineUID,
	|	cl.id_tov_cl,
	|	cl.ManufacturerID,
	|	cl.id_reason,
	|	cl.Date_proiizv,
	|	cl.id_tt_cl,
	|	cl.OperationType_cl,
	|	ch.CloseDate,
	|	ISNULL(Cards.FullName, ''),
	|	ISNULL(Cards.CardNumber, ''),
	|	ISNULL(Cards.Phone, '')";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.ДатаЧека 			= Rs.Fields("CloseDate").Value;
			СтрокаДоб.ИДСтрокиТовара 	= Rs.Fields("LineUID").Value;
			СтрокаДоб.id_tov 			= Rs.Fields("id_tov_cl").Value;
			СтрокаДоб.id_kontr 			= Rs.Fields("ManufacturerID").Value;
			СтрокаДоб.КодПричины 		= Rs.Fields("id_reason").Value;
			СтрокаДоб.ДатаПроизводства 	= Rs.Fields("Date_proiizv").Value;
			СтрокаДоб.Количество 		= Rs.Fields("Quantity").Value;
			СтрокаДоб.id_tt 			= Rs.Fields("id_tt_cl").Value;
			СтрокаДоб.ТипОперацииЧека 	= Rs.Fields("OperationType_cl").Value;
			СтрокаДоб.ФИОПокупателя 	= Rs.Fields("FIO").Value;
			СтрокаДоб.НомерБонуснойКарты = Rs.Fields("CardNumber").Value;
			СтрокаДоб.Телефон 			= Rs.Fields("Phone").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	СтрЗапрос =
	"SELECT
	|	TD.tduid as LineUid,
	|	TD.id_tov as id_tov_cl,
	|	TD.id_kontr as ManufacturerID,
	|	TD.id_reason as id_reason,
	|	TD.Date_proizv as Date_proiizv,
	|	TD.Quantity as Quantity,
	|	tt.id_tt as id_tt_cl,
	|	TD.operation_type as OperationType_cl,
	|	TD.closedate as DateTime,
	|	ISNULL(Customer.FullName, '') as FIO,
	|	ISNULL(TD.BonusCard, '') as CardNumber,
	|	ISNULL(Customer.Phone, '') as Phone
	|FROM SMS_REPL.dbo.TD_move as TD (nolock)
	| LEFT OUTER JOIN M2.dbo.tt as tt (nolock)
	| ON TD.ShopNo_rep = tt.N
	| LEFT OUTER JOIN Loyalty.dbo.Customer (nolock) as Customer
	| ON TD.BONUSCARD = Customer.Email
	|	 and ISNULL(TD.BONUSCARD, '') <> ''
	|WHERE
	|	TD.operation_type IN (103, 201)
	|	and TD.Confirm_type = 1
	|	and TD.id_tov <> 0
	|	and CONVERT(date, TD.Closedate) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "'";
	
	//СтрЗапрос = "SELECT TD.tduid as LineUid, TD.id_tov as id_tov_cl, TD.id_kontr as ManufacturerID, TD.id_reason as id_reason,
	//			|TD.Date_proizv as Date_proiizv, TD.Quantity as Quantity, tt.id_tt as id_tt_cl, TD.operation_type as OperationType_cl, TD.closedate as DateTime
	//			|, ISNULL(Checks.FIO, '') as FIO, ISNULL(Checks.CardNumber, '') as CardNumber, ISNULL(Checks.Phone, '') as Phone
	//			|FROM SMS_REPL.dbo.TD_move as TD (nolock)
	//			|LEFT OUTER JOIN M2.dbo.tt as tt (nolock) ON TD.ShopNo_rep = tt.N
	//			|LEFT OUTER JOIN (SELECT Ch.CashID, Ch.[6] as CashCheckNo, ISNULL(Cards.FullName, '') as FIO, ISNULL(Cards.Email, '') as CardNumber, ISNULL(Cards.Phone, '') as Phone
	//			|				FROM SMS_REPL.dbo._export (nolock) as Ch
	//			|				LEFT OUTER JOIN Loyalty.dbo.Customer (nolock) as Cards ON REPLACE(Ch.[8], '@', '') = Cards.Email
	//			|				WHERE Ch.[2] = '" + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy") + "' and Ch.[4] = '42') as Checks
	//			|ON TD.CashId = Checks.CashID and TD.N_int = Checks.CashCheckNo
	//			|WHERE TD.operation_type IN (103, 201) and TD.Confirm_type = 1 and TD.id_tov <> 0 and CONVERT(date, TD.Closedate) = '" + Формат(ДатаОбработки, "ДФ=yyyy-MM-dd") + "'";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.ДатаЧека 			= Rs.Fields("DateTime").Value;
			СтрокаДоб.ИДСтрокиТовара 	= Сред(Rs.Fields("LineUID").Value, 2, 36);
			СтрокаДоб.id_tov 			= Rs.Fields("id_tov_cl").Value;
			СтрокаДоб.id_kontr 			= Rs.Fields("ManufacturerID").Value;
			СтрокаДоб.КодПричины 		= Rs.Fields("id_reason").Value;
			Попытка
				СтрокаДоб.ДатаПроизводства = Rs.Fields("Date_proiizv").Value;
			Исключение
			КонецПопытки;	
			СтрокаДоб.Количество 		= Rs.Fields("Quantity").Value;
			СтрокаДоб.id_tt 			= Rs.Fields("id_tt_cl").Value;
			СтрокаДоб.ТипОперацииЧека 	= Rs.Fields("OperationType_cl").Value;
			СтрокаДоб.ФИОПокупателя 	= Rs.Fields("FIO").Value;
			СтрокаДоб.НомерБонуснойКарты = Rs.Fields("CardNumber").Value;
			СтрокаДоб.Телефон 			= Rs.Fields("Phone").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос.УстановитьПараметр("Таб"		, ТабДанные);
	Запрос.УстановитьПараметр("ДатаДок"	, НачалоДня(ДатаОбработки));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.ДатаЧека КАК ДатаЧека,
	|	Таб.ИДСтрокиТовара КАК ИДСтрокиТовара,
	|	Таб.id_tov,
	|	Таб.id_kontr,
	|	Таб.КодПричины,
	|	Таб.ДатаПроизводства,
	|	Таб.Количество,
	|	Таб.id_tt,
	|	Таб.ТипОперацииЧека,
	|	Таб.ФИОПокупателя,
	|	Таб.НомерБонуснойКарты,
	|	Таб.Телефон
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИДСтрокиТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбращенияПокупателей.GUID_Загрузки КАК GUID_Загрузки
	|ПОМЕСТИТЬ ВТ_Гуиды
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ОбращенияПокупателей.ДатаДок, ДЕНЬ) = &ДатаДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ДатаЧека,
	|	ВТ_Данные.ИДСтрокиТовара,
	|	ВТ_Данные.id_tov,
	|	ВТ_Данные.id_kontr,
	|	ВТ_Данные.КодПричины,
	|	ВТ_Данные.ДатаПроизводства,
	|	ВТ_Данные.Количество,
	|	ВТ_Данные.id_tt КАК id_tt,
	|	ВТ_Данные.ТипОперацииЧека КАК ТипОперацииЧека,
	|	ВТ_Данные.ФИОПокупателя,
	|	ВТ_Данные.НомерБонуснойКарты,
	|	ВТ_Данные.Телефон
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гуиды КАК ВЗ_Обращения
	|		ПО ВТ_Данные.ИДСтрокиТовара = ВЗ_Обращения.GUID_Загрузки
	|ГДЕ
	|	ВЗ_Обращения.GUID_Загрузки ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	id_tt,
	|	ТипОперацииЧека,
	|	ВТ_Данные.ДатаЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИсточникВозврат 			= Справочники.ИсточникиОбращений.НайтиПоНаименованию("Возврат Покупателя");
	ИсточникСписаниеПоКачеству 	= Справочники.ИсточникиОбращений.НайтиПоНаименованию("Списание по Качеству");
	
	//+++АК SHEP 20170714 ИП-00016216
	Макет_СтатистикаВключений = Обработки.ЗагрузкаДанныхИзAccess.ПолучитьМакет("СтатистикаВключений");
	СтруктураДанные = Новый Структура("Номенклатура,Производитель,Характеристика,Технолог,ПродактМенеджер,Номер_Карты_ОК,ДатаДок,СтруктурнаяЕдиница");
	СтруктураСинонимы = Новый Структура("Номенклатура,Производитель,Характеристика,Технолог,ПродактМенеджер,Номер_Карты_ОК,ДатаДок,СтруктурнаяЕдиница",
		"Номенклатура", "Производитель", "Характеристика", "Технолог", "Продакт-менеджер", "Номер карты", "Дата обращения", "ТТ");
	//---АК SHEP 20170714
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		Набор.Отбор.GUID_Загрузки.Установить(Выборка.ИДСтрокиТовара);
		Набор.Отбор.ДатаДок.Установить(Выборка.ДатаЧека);
		Набор.ОптимизированнаяЗапись = Истина;
		Запись = Набор.Добавить();
		Запись.GUID_Загрузки 			= Выборка.ИДСтрокиТовара;
		Запись.ДатаДок 					= Выборка.ДатаЧека;
		Запись.ДатаСобытия = Выборка.ДатаЧека;
		Если Выборка.ТипОперацииЧека = 201 Тогда
			Запись.ИсточникОбращения 	= ИсточникВозврат;
			Запись.Номер_Карты_ОК 		= Выборка.НомерБонуснойКарты;
			Запись.Телефон 				= Выборка.Телефон;
			Запись.ФИО_Покупателя 		= Выборка.ФИОПокупателя;
		ИначеЕсли Выборка.ТипОперацииЧека = 103 Тогда
			Запись.ИсточникОбращения 	= ИсточникСписаниеПоКачеству;
		КонецЕсли;
		СтрокаТТ = ТабТТ.Найти(Выборка.id_TT, "id_TT");
		Если СтрокаТТ <> Неопределено Тогда
			Запись.СтруктурнаяЕдиница 	= СтрокаТТ.Ссылка;
		КонецЕсли;
		СтрокаТовар = ТабНоменклатура.Найти(Выборка.id_tov, "id_tov");
		Если СтрокаТовар <> Неопределено Тогда
			Запись.Номенклатура 		= СтрокаТовар.Ссылка;
		КонецЕсли;
		СтрокиПроизв = ТабПроизводители.НайтиСтроки(Новый Структура("ИДПроизводитель, Номенклатура", Выборка.id_kontr, Запись.Номенклатура));
		Если СтрокиПроизв.Количество() > 0 Тогда
			Запись.Производитель 		= СтрокиПроизв[0].Производитель;
		КонецЕсли;
		СтрокаТипСписания = ТабТипыСписаний.Найти(Выборка.КодПричины, "ИД");
		Если СтрокаТипСписания <> Неопределено Тогда
			Запись.ТипСписанияВозврата 	= СтрокаТипСписания.Ссылка;
		КонецЕсли;
		Набор.Записать();
		
		//+++АК SHEP 20170714 ИП-00016216
		Попытка
			//702 = "Включение"
			Если Выборка.КодПричины = 702 И ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница)
				И (Запись.ИсточникОбращения = ИсточникСписаниеПоКачеству ИЛИ Запись.ИсточникОбращения = ИсточникВозврат) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураДанные, Запись);
				НеобходимКурьерТТ_ОтправитьОтчётПоЭлектронке(СтруктураДанные, СтруктураСинонимы, Макет_СтатистикаВключений);
				
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("НеобходимКурьерТТ_ОтправитьОтчётПоЭлектронке", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		//---АК SHEP 20170714

	КонецЦикла;	
				   
КонецПроцедуры	

Процедура ЗагрузитьДанныеОЗаказахПоставщику_(ДатаОбработки) Экспорт
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("m2");
	ADOСоединение.Open();
	
	ТабСклад = Новый ТаблицаЗначений();
	ТабСклад.Колонки.Добавить("id_TT");
	ТабСклад.Колонки.Добавить("id_sklad");
	
	СтрЗапрос = "SELECT     tt.id_TT, tt_1.id_TT AS id_sklad
				|FROM         M2.dbo.tt as tt (nolock) INNER JOIN
				|					  M2.dbo.tt as tt_1 (nolock) ON tt.adress = tt_1.adress and tt_1.[Plan] = 10
				|WHERE tt.type_tt = 'склад'";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабСклад.Добавить();
			СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение_2");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьСоединение();
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	PT.date,
	               |	PT.id_tt,
	               |	PT_tov.it_tov,
	               |	PT_tov.znach,
	               |	PT_tov.id_kontr
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		PT.id_PT КАК id_PT,
	               |		PT.date КАК date,
	               |		PT.id_tt КАК id_tt
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT КАК PT
	               |	ГДЕ
	               |		PT.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		PT_arc.id_PT,
	               |		PT_arc.date,
	               |		PT_arc.id_tt
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_arc КАК PT_arc
	               |	ГДЕ
	               |		PT_arc.date МЕЖДУ &ДатаНач И &ДатаКон) КАК PT
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			PT_pok.id_PT_pok КАК id_PT_pok,
	               |			PT_pok.id_PT КАК id_PT,
	               |			PT_pok.id_pok КАК id_pok
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_pok КАК PT_pok
	               |		ГДЕ
	               |			PT_pok.id_pok = 7
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			PT_pok_arc.id_PT_pok,
	               |			PT_pok_arc.id_PT,
	               |			PT_pok_arc.id_pok
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_pok_arc КАК PT_pok_arc
	               |		ГДЕ
	               |			PT_pok_arc.id_pok = 7) КАК PT_pok
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_tov КАК PT_tov
	               |			ПО PT_pok.id_PT_pok = PT_tov.id_PT_pok
	               |		ПО PT.id_PT = PT_pok.id_PT
	               |ГДЕ
	               |	PT_tov.znach > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ZT.id_kontr,
	               |	ZT.date,
	               |	ZT.Is_confirmed,
	               |	ZT.Date_razm,
	               |	ZT.id_sklad
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ZT.id_kontr КАК id_kontr,
	               |		ZT.date КАК date,
	               |		ZT.Is_confirmed КАК Is_confirmed,
	               |		ZT.Date_razm КАК Date_razm,
	               |		ZT.id_sklad КАК id_sklad
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.ZT КАК ZT
	               |	ГДЕ
	               |		ZT.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ZT_arc.id_kontr,
	               |		ZT_arc.date,
	               |		ZT_arc.Is_confirmed,
	               |		ZT_arc.Date_razm,
	               |		ZT_arc.id_sklad
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.ZT_arc КАК ZT_arc
	               |	ГДЕ
	               |		ZT_arc.date МЕЖДУ &ДатаНач И &ДатаКон) КАК ZT
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Kontr.id_kontr,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Kontr.id_kontr_postavka
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr";			   
	//			   
	//ТабДанныеКонтрагент = Запрос.Выполнить().Выгрузить();
	//ТабДанныеКонтрагент.Индексы.Добавить("id_kontr");
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПТТов = Результаты[0].Выгрузить();
	ТабЗТ = Результаты[1].Выгрузить();
	ТабДанныеКонтрагент = Результаты[2].Выгрузить();
	ТабДанныеКонтрагент.Индексы.Добавить("id_kontr");
	
	Для Каждого СтрокаТаб Из ТабПТТов Цикл
		СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
		СтрокаТаб.id_kontr = СтрокаКонтр.id_kontr_postavka;
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТабЗТ Цикл
		СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
		СтрокаТаб.id_kontr = СтрокаКонтр.id_kontr_postavka;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.id_tt,
	               |	Товары.it_tov,
	               |	Товары.znach,
	               |	Товары.id_kontr
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТабТовары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.id_tt,
	               |	Товары.it_tov,
	               |	Товары.znach,
	               |	Товары.id_kontr,
	               |	СтруктурныеЕдиницы.Ссылка КАК ТТСсылка,
	               |	Номенклатура.Ссылка КАК НоменклатураСсылка,
	               |	Номенклатура.Ссылка.Родитель.ГруппаДляРасчетчика КАК ГруппаДляРасчетчика,
	               |	Контрагенты.Ссылка КАК КонтрагентСсылка
	               |ИЗ
	               |	ВТ_Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	               |			СтруктурныеЕдиницы.id_TT КАК id_TT
	               |		ИЗ
	               |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ГДЕ
	               |			СтруктурныеЕдиницы.id_TT > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтруктурныеЕдиницы.id_TT) КАК СтруктурныеЕдиницы
	               |		ПО Товары.id_tt = СтруктурныеЕдиницы.id_TT
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
	               |			Номенклатура.id_tov КАК id_tov
	               |		ИЗ
	               |			Справочник.Номенклатура КАК Номенклатура
	               |		ГДЕ
	               |			Номенклатура.id_tov > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Номенклатура.id_tov) КАК Номенклатура
	               |		ПО Товары.it_tov = Номенклатура.id_tov
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
	               |			Контрагенты.ИД КАК ИД
	               |		ИЗ
	               |			Справочник.Контрагенты КАК Контрагенты
	               |		ГДЕ
	               |			Контрагенты.ИД > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Контрагенты.ИД) КАК Контрагенты
	               |		ПО Товары.id_kontr = Контрагенты.ИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабЗТ.id_kontr,
	               |	ТабЗТ.date,
	               |	ТабЗТ.Is_confirmed,
	               |	ТабЗТ.Date_razm,
	               |	ТабЗТ.id_sklad
	               |ПОМЕСТИТЬ ВТ_ЗТ
	               |ИЗ
	               |	&ТабЗТ КАК ТабЗТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗТ.id_kontr,
	               |	ВТ_ЗТ.date,
	               |	ВТ_ЗТ.Is_confirmed,
	               |	ВТ_ЗТ.Date_razm,
	               |	ВТ_ЗТ.id_sklad,
	               |	СтруктурныеЕдиницы.Ссылка КАК СкладСсылка,
	               |	Контрагенты.Ссылка КАК КонтрагентСсылка
	               |ИЗ
	               |	ВТ_ЗТ КАК ВТ_ЗТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	               |			СтруктурныеЕдиницы.id_TT КАК id_TT
	               |		ИЗ
	               |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ГДЕ
	               |			СтруктурныеЕдиницы.id_TT > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтруктурныеЕдиницы.id_TT) КАК СтруктурныеЕдиницы
	               |		ПО ВТ_ЗТ.id_sklad = СтруктурныеЕдиницы.id_TT
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
	               |			Контрагенты.ИД КАК ИД
	               |		ИЗ
	               |			Справочник.Контрагенты КАК Контрагенты
	               |		ГДЕ
	               |			Контрагенты.ИД > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Контрагенты.ИД) КАК Контрагенты
	               |		ПО ВТ_ЗТ.id_kontr = Контрагенты.ИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаКон, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
				   
	Запрос.УстановитьПараметр("ТабТовары", ТабПТТов);
	Запрос.УстановитьПараметр("ТабЗТ", ТабЗТ);
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабТовары = Результаты[1].Выгрузить();
	ТабПорядокОбеспечения = Результаты[4].Выгрузить();
	ТабПорядокОбеспечения.Индексы.Добавить("ТорговаяТочка, ГруппаНоменклатуры");
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.id_tt) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ТТСсылка) Тогда
				ТТ = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаТаб.id_tt);
				Если Не ЗначениеЗаполнено(ТТ) Тогда
					ТТ = СоздатьИзменитьТорговуюТочку(СтрокаТаб.id_tt);
				КонецЕсли;
				СтрокаТаб.ТТСсылка = ТТ;
			КонецЕсли;	
		Иначе
			СтрокаТаб.ТТСсылка = Неопределено;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТаб.id_kontr) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.КонтрагентСсылка) Тогда
				Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", СтрокаТаб.id_kontr);
				Если Поставщик.Пустая() Тогда
					СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
					Если СтрокаКонтр <> Неопределено Тогда
						Поставщик = СоздатьИзменитьПоставщика(СтрокаКонтр.ИНН, СтрокаТаб.id_kontr);
					КонецЕсли;
				КонецЕсли;
				СтрокаТаб.КонтрагентСсылка = Поставщик;
			КонецЕсли;
		Иначе
			СтрокаТаб.КонтрагентСсылка = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.it_tov) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаб.НоменклатураСсылка) Тогда
				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТаб.it_tov);
				Если Не ЗначениеЗаполнено(Номенклатура) Тогда
					Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТаб.it_tov);
				КонецЕсли;
				СтрокаТаб.НоменклатураСсылка = Номенклатура;
			КонецЕсли;	
		Иначе
			СтрокаТаб.НоменклатураСсылка = Неопределено;
			СтрокаТаб.ГруппаДляРасчетчика = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.НоменклатураСсылка) Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.ГруппаДляРасчетчика;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.Родитель.ГруппаДляРасчетчика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	ТабЗТ = Результаты[3].Выгрузить();
	Для Каждого СтрокаТаб Из ТабЗТ Цикл
		//Если ЗначениеЗаполнено(СтрокаТаб.id_sklad) Тогда
		//	Если НЕ ЗначениеЗаполнено(СтрокаТаб.СкладСсылка) Тогда
		//		Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаТаб.id_sklad);
		//		Если Не ЗначениеЗаполнено(ТТ) Тогда
		//			Склад = СоздатьИзменитьСклад(СтрокаТаб.id_sklad);
		//		КонецЕсли;
		//		СтрокаТаб.СкладСсылка = Склад;
		//	КонецЕсли;	
		//Иначе
		//	СтрокаТаб.СкладСсылка = Неопределено;
		//КонецЕсли;	
		
		СтрокаТабСклад = ТабСклад.Найти(СтрокаТаб.id_sklad,"id_TT");
		Если СтрокаТабСклад = Неопределено Тогда
			//id_sklad = Выборка.id_sklad;
			//Продолжить;
			id_sklad = 0;
		Иначе
			id_sklad = СтрокаТабСклад.id_sklad;
		КонецЕсли;
		
		Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", СтрокаТаб.id_sklad);
		Если Склад.Пустая() Тогда
			Если ЗначениеЗаполнено(id_sklad) Тогда
				Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", id_sklad);
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаТаб.СкладСсылка = Склад.Владелец;
		
		Если ЗначениеЗаполнено(СтрокаТаб.id_kontr) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.КонтрагентСсылка) Тогда
				Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", СтрокаТаб.id_kontr);
				Если Поставщик.Пустая() Тогда
					СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
					Если СтрокаКонтр <> Неопределено Тогда
						Поставщик = СоздатьИзменитьПоставщика(СтрокаКонтр.ИНН, СтрокаТаб.id_kontr);
					КонецЕсли;
				КонецЕсли;
				СтрокаТаб.КонтрагентСсылка = Поставщик;
			КонецЕсли;
		Иначе
			СтрокаТаб.КонтрагентСсылка = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЗТ.КонтрагентСсылка,
	               |	ТабЗТ.date,
	               |	ТабЗТ.Is_confirmed,
	               |	ТабЗТ.Date_razm,
	               |	ТабЗТ.СкладСсылка
	               |ПОМЕСТИТЬ ВТ_ЗТ
	               |ИЗ
	               |	&ТабЗТ КАК ТабЗТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры,
	               |	ВТ_ЗТ.КонтрагентСсылка,
	               |	ВТ_ЗТ.date,
	               |	ВТ_ЗТ.Is_confirmed,
	               |	МАКСИМУМ(ВТ_ЗТ.Date_razm) КАК Date_razm,
	               |	ВТ_ЗТ.СкладСсылка
	               |ПОМЕСТИТЬ ВТ_ЗТПолные
	               |ИЗ
	               |	ВТ_ЗТ КАК ВТ_ЗТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаКон, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	               |		ПО ВТ_ЗТ.СкладСсылка = ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры,
	               |	ВТ_ЗТ.КонтрагентСсылка,
	               |	ВТ_ЗТ.date,
	               |	ВТ_ЗТ.Is_confirmed,
	               |	ВТ_ЗТ.СкладСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.znach,
	               |	Товары.ТТСсылка КАК ТТСсылка,
	               |	Товары.НоменклатураСсылка,
	               |	Товары.ГруппаДляРасчетчика,
	               |	Товары.КонтрагентСсылка,
	               |	Товары.it_tov,
	               |	Товары.id_tt
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.date,
	               |	ВТ_Товары.znach,
	               |	ВТ_Товары.НоменклатураСсылка,
	               |	ВТ_ЗТПолные.КонтрагентСсылка,
	               |	ВТ_Товары.КонтрагентСсылка КАК КонтрагентСсылка,
	               |	ВТ_ЗТПолные.Is_confirmed,
	               |	ЕстьNULL(ВТ_ЗТПолные.Date_razm, ВТ_Товары.date) КАК Date_razm,
	               |	ВТ_ЗТПолные.СкладСсылка КАК СкладСсылка,
	               |	ВТ_Товары.it_tov,
	               |	ВТ_Товары.id_tt,
	               |	ВТ_ЗТПолные.ТорговаяТочка,
	               |	ВТ_Товары.ТТСсылка,
	               |	ВТ_ЗТПолные.ГруппаНоменклатуры,
	               |	ВТ_Товары.ГруппаДляРасчетчика
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗТПолные КАК ВТ_ЗТПолные
	               |		ПО (ВТ_ЗТПолные.ТорговаяТочка = ВТ_Товары.ТТСсылка)
	               |			И (ВТ_ЗТПолные.ГруппаНоменклатуры = ВТ_Товары.ГруппаДляРасчетчика)
	               |			И (ВТ_ЗТПолные.КонтрагентСсылка = ВТ_Товары.КонтрагентСсылка)
	               |			И (ВТ_ЗТПолные.date = ВТ_Товары.date)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Date_razm,
	               |	ВТ_Товары.date,
	               |	СкладСсылка,
	               |	КонтрагентСсылка,
	               |	ВТ_Товары.НоменклатураСсылка";
				   
	Запрос.УстановитьПараметр("ТабЗТ", ТабЗТ);
	Запрос.УстановитьПараметр("Товары", ТабТовары);
	
	//ТабТовары = Запрос.Выполнить().Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	Предзаказ.Ссылка,
				   |	Предзаказ.ДатаПоступления,
				   |	Предзаказ.Поставщик,
				   |	Предзаказ.Склад,
				   |	НАЧАЛОПЕРИОДА(Предзаказ.Дата, ДЕНЬ) КАК Дата
				   |ИЗ
				   |	Документ.Предзаказ КАК Предзаказ
				   |ГДЕ
				   |	Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |	И Предзаказ.ЗагруженИзАкцес = ИСТИНА";
				   
	ТабЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбработанныеДоки = Новый ТаблицаЗначений();
	ТаблицаОбработанныеДоки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Предзаказ"));
	
	Пока Выборка.СледующийПоЗначениюПоля("date_razm") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("date") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СкладСсылка") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("КонтрагентСсылка") Цикл
					
					СтрокиИмеющиеся = ТабЗаказы.НайтиСтроки(Новый Структура("ДатаПоступления, Поставщик, Склад, Дата", Выборка.date, Выборка.КонтрагентСсылка, Выборка.СкладСсылка, Выборка.Date_razm));
					Если СтрокиИмеющиеся.Количество() = 0 Тогда
						ДокОбъект = Документы.Предзаказ.СоздатьДокумент();
						ДокОбъект.ЗагруженИзАкцес = Истина;
					Иначе
						ДокОбъект = СтрокиИмеющиеся[0].Ссылка.ПолучитьОбъект();
						ДокОбъект.Товары.Очистить();
					КонецЕсли;	
					ДокОбъект.Дата = Выборка.Date_razm;
					ДокОбъект.ДатаПоступления = Выборка.date;
					
					ДокОбъект.ПометкаУдаления = Ложь;
					ДокОбъект.Склад = Выборка.СкладСсылка;
					ДокОбъект.Поставщик = Выборка.КонтрагентСсылка;
					ДокОбъект.Подготовлен = Выборка.Is_confirmed;
					
					Пока Выборка.Следующий() Цикл
						СтрокиДок = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ТорговаяТочка", Выборка.НоменклатураСсылка, Выборка.ТТСсылка));
						Если СтрокиДок.Количество() = 0 Тогда
							СтрокаДок = ДокОбъект.Товары.Добавить();
							СтрокаДок.Номенклатура = Выборка.НоменклатураСсылка;
							СтрокаДок.ЕдиницаИзмерения = СтрокаДок.Номенклатура.ЕдиницаХраненияОстатков;
							СтрокаДок.ТорговаяТочка = Выборка.ТТСсылка;
						Иначе
							СтрокаДок = СтрокиДок[0];
						КонецЕсли;	
						
						СтрокаДок.Количество = СтрокаДок.Количество + Выборка.znach;
					КонецЦикла;
					
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДоб = ТаблицаОбработанныеДоки.Добавить();
					СтрокаДоб.Ссылка = ДокОбъект.Ссылка;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.РазорватьСоединение();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
				   |	Таб.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТабОбработанные
				   |ИЗ
				   |	&Таб КАК Таб
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабОбработанные.Ссылка,
				   |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		Предзаказ.Ссылка КАК Ссылка
				   |	ИЗ
				   |		Документ.Предзаказ КАК Предзаказ
				   |	ГДЕ
				   |		Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |		И Предзаказ.ПометкаУдаления = ЛОЖЬ
				   |		И Предзаказ.ЗагруженИзАкцес = ИСТИНА) КАК ВЗ_ДокументыЗаПериод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
				   |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
				   |ГДЕ
				   |	ТабОбработанные.Ссылка ЕСТЬ NULL 
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеДоки);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	//теперь создадим документ заказов поставщику и поместим в них документы предзаказов
	Запрос.Текст = "ВЫБРАТЬ
				   |	Предзаказ.Ссылка КАК Ссылка,
				   |	Предзаказ.ДатаПоступления КАК ДатаПоступления,
				   |	Предзаказ.Поставщик КАК Поставщик,
				   |	Предзаказ.Склад КАК Склад,
				   |	НАЧАЛОПЕРИОДА(Предзаказ.Дата, ДЕНЬ) КАК Дата
				   |ИЗ
				   |	Документ.Предзаказ КАК Предзаказ
				   |ГДЕ
				   |	Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |	И Предзаказ.Проведен = ИСТИНА
				   |	И Предзаказ.ЗагруженИзАкцес = ИСТИНА
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ДатаПоступления,
				   |	Дата,
				   |	Поставщик,
				   |	Склад
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЗаказПоставщику.Ссылка,
				   |	ЗаказПоставщику.ДатаПоступления,
				   |	ЗаказПоставщику.Поставщик,
				   |	ЗаказПоставщику.Склад,
				   |	НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) КАК Дата
				   |ИЗ
				   |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
				   |ГДЕ
				   |	ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
				   |	И ЗаказПоставщику.ЗаказПоступилПолностью = ЛОЖЬ
				   |	И ЗаказПоставщику.ЗагруженИзАкцес = ИСТИНА";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабЗаказы = Результаты[1].Выгрузить();
	
	ТаблицаОбработанныеДоки = Новый ТаблицаЗначений();
	ТаблицаОбработанныеДоки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаПоступления") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Поставщик") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					СтрокиДок = ТабЗаказы.НайтиСтроки(Новый Структура("ДатаПоступления, Поставщик, Склад, Дата", Выборка.ДатаПоступления, Выборка.Поставщик, Выборка.Склад, Выборка.Дата));
					Если СтрокиДок.Количество() = 0 Тогда
						ДокЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
						ДокЗаказ.ЗагруженИзАкцес = Истина;
					Иначе
						ДокЗаказ = СтрокиДок[0].Ссылка.ПолучитьОбъект();
					КонецЕсли;	
					ДокЗаказ.Дата = Выборка.Дата;
					ДокЗаказ.Предзаказы.Очистить();
					ДокЗаказ.ДатаПоступления = Выборка.ДатаПоступления;
					ДокЗаказ.Поставщик = Выборка.Поставщик;
					ДокЗаказ.Склад = Выборка.Склад;
					Пока Выборка.Следующий() Цикл
						СтрокаТаб = ДокЗаказ.Предзаказы.Добавить();
						СтрокаТаб.Документ = Выборка.Ссылка;
					КонецЦикла;	
					ДокЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДоб = ТаблицаОбработанныеДоки.Добавить();
					СтрокаДоб.Ссылка = ДокЗаказ.Ссылка;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
				   |	Таб.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТабОбработанные
				   |ИЗ
				   |	&Таб КАК Таб
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабОбработанные.Ссылка,
				   |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		ЗаказПоставщику.Ссылка КАК Ссылка
				   |	ИЗ
				   |		Документ.ЗаказПоставщику КАК ЗаказПоставщику
				   |	ГДЕ
				   |		ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |		И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
				   |		И ЗаказПоставщику.ЗагруженИзАкцес = ИСТИНА) КАК ВЗ_ДокументыЗаПериод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
				   |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
				   |ГДЕ
				   |	ТабОбработанные.Ссылка ЕСТЬ NULL 
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеДоки);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОЗаказахПоставщику(ДатаОбработки) Экспорт
	
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("m2");
	//ADOСоединение.Open();
	//
	//ТабСклад = Новый ТаблицаЗначений();
	//ТабСклад.Колонки.Добавить("id_TT");
	//ТабСклад.Колонки.Добавить("id_sklad");
	//
	//СтрЗапрос = "SELECT     tt.id_TT, tt_1.id_TT AS id_sklad
	//			|FROM         M2.dbo.tt as tt (nolock) INNER JOIN
	//			|					  M2.dbo.tt as tt_1 (nolock) ON tt.adress = tt_1.adress and tt_1.[Plan] = 10
	//			|WHERE tt.type_tt = 'склад'";
	//			   
	//rs = ADOСоединение.Execute(СтрЗапрос);
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = ТабСклад.Добавить();
	//		СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
	//		СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	//
	//ADOСоединение.Close();
	//ADOСоединение = Неопределено;
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение_2");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьСоединение();
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	PT.date,
	               |	PT.id_tt,
	               |	PT_tov.it_tov,
	               |	PT_tov.znach,
	               |	PT_tov.id_kontr
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		PT.id_PT КАК id_PT,
	               |		PT.date КАК date,
	               |		PT.id_tt КАК id_tt
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT КАК PT
	               |	ГДЕ
	               |		PT.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		PT_arc.id_PT,
	               |		PT_arc.date,
	               |		PT_arc.id_tt
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_arc КАК PT_arc
	               |	ГДЕ
	               |		PT_arc.date МЕЖДУ &ДатаНач И &ДатаКон) КАК PT
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			PT_pok.id_PT_pok КАК id_PT_pok,
	               |			PT_pok.id_PT КАК id_PT,
	               |			PT_pok.id_pok КАК id_pok
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_pok КАК PT_pok
	               |		ГДЕ
	               |			PT_pok.id_pok = 7
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			PT_pok_arc.id_PT_pok,
	               |			PT_pok_arc.id_PT,
	               |			PT_pok_arc.id_pok
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_pok_arc КАК PT_pok_arc
	               |		ГДЕ
	               |			PT_pok_arc.id_pok = 7) КАК PT_pok
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.PT_tov КАК PT_tov
	               |			ПО PT_pok.id_PT_pok = PT_tov.id_PT_pok
	               |		ПО PT.id_PT = PT_pok.id_PT
	               |ГДЕ
	               |	PT_tov.znach > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ZT.id_kontr,
	               |	ZT.date,
	               |	ZT.Is_confirmed,
	               |	ZT.Date_razm,
	               |	ZT.id_sklad
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ZT.id_kontr КАК id_kontr,
	               |		ZT.date КАК date,
	               |		ZT.Is_confirmed КАК Is_confirmed,
	               |		ZT.Date_razm КАК Date_razm,
	               |		ZT.id_sklad КАК id_sklad
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.ZT КАК ZT
	               |	ГДЕ
	               |		ZT.date МЕЖДУ &ДатаНач И &ДатаКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ZT_arc.id_kontr,
	               |		ZT_arc.date,
	               |		ZT_arc.Is_confirmed,
	               |		ZT_arc.Date_razm,
	               |		ZT_arc.id_sklad
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.ZT_arc КАК ZT_arc
	               |	ГДЕ
	               |		ZT_arc.date МЕЖДУ &ДатаНач И &ДатаКон) КАК ZT
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Kontr.id_kontr,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Kontr.id_kontr_postavka,
	               |	Kontr.id_ul_post
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr";			   
	//			   
	//ТабДанныеКонтрагент = Запрос.Выполнить().Выгрузить();
	//ТабДанныеКонтрагент.Индексы.Добавить("id_kontr");
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПТТов = Результаты[0].Выгрузить();
	ТабЗТ = Результаты[1].Выгрузить();
	ТабДанныеКонтрагент = Результаты[2].Выгрузить();
	ТабДанныеКонтрагент.Индексы.Добавить("id_kontr");
	
	Для Каждого СтрокаТаб Из ТабПТТов Цикл
		СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
		СтрокаТаб.id_kontr = СтрокаКонтр.id_ul_post;
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТабЗТ Цикл
		СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
		СтрокаТаб.id_kontr = СтрокаКонтр.id_ul_post;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.id_tt,
	               |	Товары.it_tov,
	               |	Товары.znach,
	               |	Товары.id_kontr
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТабТовары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.id_tt,
	               |	Товары.it_tov,
	               |	Товары.znach,
	               |	Товары.id_kontr,
	               |	СтруктурныеЕдиницы.Ссылка КАК ТТСсылка,
	               |	Номенклатура.Ссылка КАК НоменклатураСсылка,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка) КАК ГруппаДляРасчетчика,
	               |	Контрагенты.Ссылка КАК КонтрагентСсылка
	               |ИЗ
	               |	ВТ_Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	               |			СтруктурныеЕдиницы.id_TT КАК id_TT
	               |		ИЗ
	               |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ГДЕ
	               |			СтруктурныеЕдиницы.id_TT > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтруктурныеЕдиницы.id_TT) КАК СтруктурныеЕдиницы
	               |		ПО Товары.id_tt = СтруктурныеЕдиницы.id_TT
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
	               |			Номенклатура.id_tov КАК id_tov
	               |		ИЗ
	               |			Справочник.Номенклатура КАК Номенклатура
	               |		ГДЕ
	               |			Номенклатура.id_tov > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Номенклатура.id_tov) КАК Номенклатура
	               |		ПО Товары.it_tov = Номенклатура.id_tov
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
	               |			Контрагенты.ИД КАК ИД
	               |		ИЗ
	               |			Справочник.Контрагенты КАК Контрагенты
	               |		ГДЕ
	               |			Контрагенты.ИД > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Контрагенты.ИД) КАК Контрагенты
	               |		ПО Товары.id_kontr = Контрагенты.ИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабЗТ.id_kontr,
	               |	ТабЗТ.date,
	               |	ТабЗТ.Is_confirmed,
	               |	ТабЗТ.Date_razm,
	               |	ТабЗТ.id_sklad
	               |ПОМЕСТИТЬ ВТ_ЗТ
	               |ИЗ
	               |	&ТабЗТ КАК ТабЗТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗТ.id_kontr,
	               |	ВТ_ЗТ.date,
	               |	ВТ_ЗТ.Is_confirmed,
	               |	ВТ_ЗТ.Date_razm,
	               |	ВТ_ЗТ.id_sklad,
	               |	СтруктурныеЕдиницы.Ссылка КАК СкладСсылка,
	               |	Контрагенты.Ссылка КАК КонтрагентСсылка
	               |ИЗ
	               |	ВТ_ЗТ КАК ВТ_ЗТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	               |			СтруктурныеЕдиницы.id_TT КАК id_TT
	               |		ИЗ
	               |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ГДЕ
	               |			СтруктурныеЕдиницы.id_TT > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтруктурныеЕдиницы.id_TT) КАК СтруктурныеЕдиницы
	               |		ПО ВТ_ЗТ.id_sklad = СтруктурныеЕдиницы.id_TT
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
	               |			Контрагенты.ИД КАК ИД
	               |		ИЗ
	               |			Справочник.Контрагенты КАК Контрагенты
	               |		ГДЕ
	               |			Контрагенты.ИД > 0
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Контрагенты.ИД) КАК Контрагенты
	               |		ПО ВТ_ЗТ.id_kontr = Контрагенты.ИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	               |ИЗ
	               |	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаКон, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоставщикиОрганизацийСрезПоследних.Производитель,
	               |	ПоставщикиОрганизацийСрезПоследних.Организация
	               |ИЗ
	               |	РегистрСведений.ПоставщикиОрганизаций.СрезПоследних(&ДатаКон, ) КАК ПоставщикиОрганизацийСрезПоследних";
				   
	Запрос.УстановитьПараметр("ТабТовары", ТабПТТов);
	Запрос.УстановитьПараметр("ТабЗТ", ТабЗТ);
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабТовары = Результаты[1].Выгрузить();
	ТабТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабТовары.Колонки.Добавить("Date_razm", Новый ОписаниеТипов("Дата"));
	ТабТовары.Колонки.Добавить("Is_confirmed", Новый ОписаниеТипов("Булево"));
	ТабЗТ = Результаты[3].Выгрузить();
	ТабПорядокОбеспечения = Результаты[4].Выгрузить();
	ТабПорядокОбеспечения.Индексы.Добавить("ТорговаяТочка, ГруппаНоменклатуры");
	ТабПоставщикиПоЮЛ = Результаты[5].Выгрузить();
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		
		СтрокиЗТ = ТабЗТ.НайтиСтроки(Новый Структура("id_kontr, Date", СтрокаТаб.id_kontr, СтрокаТаб.Date));
		Если СтрокиЗТ.Количество() > 0 Тогда
			СтрокаТаб.Date_razm = СтрокиЗТ[0].Date_razm;
			СтрокаТаб.Is_confirmed = СтрокиЗТ[0].Is_confirmed;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТаб.НоменклатураСсылка) Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.ГруппаДляРасчетчика;
					СтрокаТаб.Склад = СтрокиОбеспечение[0].Расчетчик;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.ГруппаДляРасчетчика;
					СтрокаТаб.Склад = СтрокиОбеспечение[0].Расчетчик;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ГруппаДляРасчетчика) Тогда
				СтрокиОбеспечение = ТабПорядокОбеспечения.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", СтрокаТаб.ТТСсылка, СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.Родитель.ГруппаДляРасчетчика));
				Если СтрокиОбеспечение.Количество() > 0 Тогда
					СтрокаТаб.ГруппаДляРасчетчика = СтрокаТаб.НоменклатураСсылка.Родитель.Родитель.Родитель.ГруппаДляРасчетчика;
					СтрокаТаб.Склад = СтрокиОбеспечение[0].Расчетчик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	//Для Каждого СтрокаТаб Из ТабЗТ Цикл
	//	//Если ЗначениеЗаполнено(СтрокаТаб.id_sklad) Тогда
	//	//	Если НЕ ЗначениеЗаполнено(СтрокаТаб.СкладСсылка) Тогда
	//	//		Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаТаб.id_sklad);
	//	//		Если Не ЗначениеЗаполнено(ТТ) Тогда
	//	//			Склад = СоздатьИзменитьСклад(СтрокаТаб.id_sklad);
	//	//		КонецЕсли;
	//	//		СтрокаТаб.СкладСсылка = Склад;
	//	//	КонецЕсли;	
	//	//Иначе
	//	//	СтрокаТаб.СкладСсылка = Неопределено;
	//	//КонецЕсли;	
	//	
	//	СтрокаТабСклад = ТабСклад.Найти(СтрокаТаб.id_sklad,"id_TT");
	//	Если СтрокаТабСклад = Неопределено Тогда
	//		//id_sklad = Выборка.id_sklad;
	//		//Продолжить;
	//		id_sklad = 0;
	//	Иначе
	//		id_sklad = СтрокаТаб.id_sklad;
	//	КонецЕсли;
	//	
	//	Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", СтрокаТаб.id_sklad);
	//	Если Склад.Пустая() Тогда
	//		Если ЗначениеЗаполнено(id_sklad) Тогда
	//			Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", id_sklad);
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//	СтрокаТаб.СкладСсылка = Склад.Владелец;
	//	
	//	//Если ЗначениеЗаполнено(СтрокаТаб.id_kontr) Тогда
	//	//	Если НЕ ЗначениеЗаполнено(СтрокаТаб.КонтрагентСсылка) Тогда
	//	//		Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", СтрокаТаб.id_kontr);
	//	//		Если Поставщик.Пустая() Тогда
	//	//			СтрокаКонтр = ТабДанныеКонтрагент.Найти(СтрокаТаб.id_kontr, "id_kontr");
	//	//			Если СтрокаКонтр <> Неопределено Тогда
	//	//				Поставщик = СоздатьИзменитьПоставщика(СтрокаКонтр.ИНН, СтрокаТаб.id_kontr);
	//	//			КонецЕсли;
	//	//		КонецЕсли;
	//	//		СтрокаТаб.КонтрагентСсылка = Поставщик;
	//	//	КонецЕсли;
	//	//Иначе
	//	//	СтрокаТаб.КонтрагентСсылка = Неопределено;
	//	//КонецЕсли;
	//	
	//КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.date,
	               |	Товары.Date_razm,
	               |	Товары.Is_confirmed,
	               |	Товары.Склад,
	               |	Товары.znach,
	               |	Товары.ТТСсылка КАК ТТСсылка,
	               |	Товары.НоменклатураСсылка,
	               |	Товары.ГруппаДляРасчетчика,
	               |	Товары.КонтрагентСсылка
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.date,
	               |	ВТ_Товары.znach,
	               |	ВТ_Товары.НоменклатураСсылка,
	               |	ВТ_Товары.КонтрагентСсылка КАК КонтрагентСсылка,
	               |	ВТ_Товары.Is_confirmed,
	               |	ВЫБОР
	               |		КОГДА ВТ_Товары.Date_razm = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ВТ_Товары.date
	               |		ИНАЧЕ ВТ_Товары.Date_razm
	               |	КОНЕЦ КАК Date_razm,
	               |	ВТ_Товары.Склад КАК СкладСсылка,
	               |	ВТ_Товары.ТТСсылка
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_Товары.НоменклатураСсылка = Номенклатура.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Date_razm,
	               |	ВТ_Товары.date,
	               |	СкладСсылка,
	               |	КонтрагентСсылка,
	               |	Номенклатура.Наименование,
	               |	ВТ_Товары.НоменклатураСсылка";
				   
	Запрос.УстановитьПараметр("ТабЗТ", ТабЗТ);
	Запрос.УстановитьПараметр("Товары", ТабТовары);
	
	//ТабТовары = Запрос.Выполнить().Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предзаказ.Ссылка,
	               |	Предзаказ.ДатаПоступления,
	               |	Предзаказ.Поставщик,
	               |	Предзаказ.Склад,
	               |	НАЧАЛОПЕРИОДА(Предзаказ.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	Документ.Предзаказ КАК Предзаказ
	               |ГДЕ
	               |	Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
	               |	И Предзаказ.ЗагруженИзАкцес = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РасчетчикиГруппыНоменклатуры.Ссылка.Склад,
	               |	НоменклатураСпр.Ссылка КАК Номенклатура,
	               |	РасчетчикиГруппыНоменклатуры.Ссылка КАК Расчетчик
	               |ИЗ
	               |	Справочник.Расчетчики.ГруппыНоменклатуры КАК РасчетчикиГруппыНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	               |		ПО (РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = НоменклатураСпр.Ссылка
	               |				ИЛИ РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = НоменклатураСпр.Родитель
	               |				ИЛИ РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = НоменклатураСпр.Родитель.Родитель
	               |				ИЛИ РасчетчикиГруппыНоменклатуры.ГруппаНоменклатуры = НоменклатураСпр.Родитель.Родитель.Родитель)
	               |ГДЕ
	               |	НоменклатураСпр.ЭтоГруппа = ЛОЖЬ
	               |	И РасчетчикиГруппыНоменклатуры.Ссылка.ПометкаУдаления = ЛОЖЬ";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабЗаказы = Результаты[0].Выгрузить();
	ТабРасчетчики = Результаты[1].Выгрузить();
	ТабРасчетчики.Индексы.Добавить("Склад, Номенклатура");
	
	ТаблицаОбработанныеДоки = Новый ТаблицаЗначений();
	ТаблицаОбработанныеДоки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Предзаказ"));
	
	ЛугДаПолеОрг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	Пока Выборка.СледующийПоЗначениюПоля("date_razm") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("date") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СкладСсылка") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("КонтрагентСсылка") Цикл
					
					СтрокиИмеющиеся = ТабЗаказы.НайтиСтроки(Новый Структура("ДатаПоступления, Поставщик, Склад, Дата", Выборка.date, Выборка.КонтрагентСсылка, Выборка.СкладСсылка, Выборка.Date_razm));
					СтрокаЮЛ = ТабПоставщикиПоЮЛ.Найти(Выборка.КонтрагентСсылка, "Производитель");
					Если СтрокиИмеющиеся.Количество() = 0 Тогда
						ДокОбъект = Документы.Предзаказ.СоздатьДокумент();
						ДокОбъект.ЗагруженИзАкцес = Истина;
					Иначе
						ДокОбъект = СтрокиИмеющиеся[0].Ссылка.ПолучитьОбъект();
						ДокОбъект.Товары.Очистить();
					КонецЕсли;	
					Если СтрокаЮЛ = Неопределено Тогда
						ДокОбъект.Организация = ЛугДаПолеОрг;
					Иначе
						ДокОбъект.Организация = ?(ЗначениеЗаполнено(СтрокаЮЛ.Организация), СтрокаЮЛ.Организация, ЛугДаПолеОрг);
					КонецЕсли;	
					ДокОбъект.Дата = Выборка.Date_razm;
					ДокОбъект.ДатаПоступления = Выборка.date;
					
					ДокОбъект.ПометкаУдаления = Ложь;
					ДокОбъект.Склад = Выборка.СкладСсылка;
					ДокОбъект.Поставщик = Выборка.КонтрагентСсылка;
					ДокОбъект.Подготовлен = Выборка.Is_confirmed;
					ДокОбъект.Расчетчик = Неопределено;
					
					Пока Выборка.Следующий() Цикл
						СтрокиДок = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ТорговаяТочка", Выборка.НоменклатураСсылка, Выборка.ТТСсылка));
						Если СтрокиДок.Количество() = 0 Тогда
							СтрокаДок = ДокОбъект.Товары.Добавить();
							СтрокаДок.Номенклатура = Выборка.НоменклатураСсылка;
							СтрокаДок.ЕдиницаИзмерения = СтрокаДок.Номенклатура.ЕдиницаХраненияОстатков;
							СтрокаДок.ТорговаяТочка = Выборка.ТТСсылка;
						Иначе
							СтрокаДок = СтрокиДок[0];
						КонецЕсли;	
						
						СтрокаДок.Количество = СтрокаДок.Количество + Выборка.znach;
						Если НЕ ЗначениеЗаполнено(ДокОбъект.Расчетчик) Тогда
							СтрокиРасчетчик = ТабРасчетчики.НайтиСтроки(Новый Структура("Склад, Номенклатура", ДокОбъект.Склад, Выборка.НоменклатураСсылка));
							Если СтрокиРасчетчик.Количество() > 0 Тогда
								ДокОбъект.Расчетчик = СтрокиРасчетчик[0].Расчетчик;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;
					
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДоб = ТаблицаОбработанныеДоки.Добавить();
					СтрокаДоб.Ссылка = ДокОбъект.Ссылка;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.РазорватьСоединение();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
				   |	Таб.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТабОбработанные
				   |ИЗ
				   |	&Таб КАК Таб
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабОбработанные.Ссылка,
				   |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		Предзаказ.Ссылка КАК Ссылка
				   |	ИЗ
				   |		Документ.Предзаказ КАК Предзаказ
				   |	ГДЕ
				   |		Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |		И Предзаказ.ПометкаУдаления = ЛОЖЬ
				   |		И Предзаказ.ЗагруженИзАкцес = ИСТИНА) КАК ВЗ_ДокументыЗаПериод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
				   |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
				   |ГДЕ
				   |	ТабОбработанные.Ссылка ЕСТЬ NULL 
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеДоки);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	//теперь создадим документ заказов поставщику и поместим в них документы предзаказов
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предзаказ.Ссылка КАК Ссылка,
	               |	Предзаказ.ДатаПоступления КАК ДатаПоступления,
	               |	Предзаказ.Поставщик КАК Поставщик,
	               |	Предзаказ.Склад КАК Склад,
	               |	НАЧАЛОПЕРИОДА(Предзаказ.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	Документ.Предзаказ КАК Предзаказ
	               |ГДЕ
	               |	Предзаказ.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
	               |	И Предзаказ.Проведен = ИСТИНА
	               |	И Предзаказ.ЗагруженИзАкцес = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПоступления,
	               |	Дата,
	               |	Поставщик,
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.Поставщик,
	               |	ЗаказПоставщику.Склад,
	               |	НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказПоставщику.ЗаказПоступилПолностью = ЛОЖЬ
	               |	И ЗаказПоставщику.ЗагруженИзАкцес = ИСТИНА";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабЗаказы = Результаты[1].Выгрузить();
	
	
	ТаблицаОбработанныеДоки = Новый ТаблицаЗначений();
	ТаблицаОбработанныеДоки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаПоступления") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Поставщик") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					СтрокиДок = ТабЗаказы.НайтиСтроки(Новый Структура("ДатаПоступления, Поставщик, Склад, Дата", Выборка.ДатаПоступления, Выборка.Поставщик, Выборка.Склад, Выборка.Дата));
					Если СтрокиДок.Количество() = 0 Тогда
						ДокЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
						ДокЗаказ.ЗагруженИзАкцес = Истина;
					Иначе
						ДокЗаказ = СтрокиДок[0].Ссылка.ПолучитьОбъект();
					КонецЕсли;	
					ДокЗаказ.Дата = Выборка.Дата;
					ДокЗаказ.Предзаказы.Очистить();
					ДокЗаказ.ДатаПоступления = Выборка.ДатаПоступления;
					ДокЗаказ.Поставщик = Выборка.Поставщик;
					ДокЗаказ.Склад = Выборка.Склад;
					Пока Выборка.Следующий() Цикл
						СтрокаТаб = ДокЗаказ.Предзаказы.Добавить();
						СтрокаТаб.Документ = Выборка.Ссылка;
					КонецЦикла;	
					ДокЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДоб = ТаблицаОбработанныеДоки.Добавить();
					СтрокаДоб.Ссылка = ДокЗаказ.Ссылка;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
				   |	Таб.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ТабОбработанные
				   |ИЗ
				   |	&Таб КАК Таб
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабОбработанные.Ссылка,
				   |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		ЗаказПоставщику.Ссылка КАК Ссылка
				   |	ИЗ
				   |		Документ.ЗаказПоставщику КАК ЗаказПоставщику
				   |	ГДЕ
				   |		ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон
				   |		И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
				   |		И ЗаказПоставщику.ЗагруженИзАкцес = ИСТИНА) КАК ВЗ_ДокументыЗаПериод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
				   |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
				   |ГДЕ
				   |	ТабОбработанные.Ссылка ЕСТЬ NULL 
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеДоки);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеТорговыхТочек() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("type_tt", "торговая");
	Запрос.Текст = "ВЫБРАТЬ
	               |	TT.id_TT КАК ИД_ТТ,
	               |	TT.name_TT КАК НаименованиеТТ,
	               |	TT.adress,
	               |	TT.nomer_tel,
	               |	TT.start_date,
	               |	TT.close_date,
	               |	TT.N,
	               |	TT.is_active,
	               |	TT.koef_zapasa,
	               |	TT.TT_sms,
	               |	TT.N_tt_sms,
	               |	TT.id_UL,
	               |	TT.nomer_tel2,
	               |	TT.id_group,
	               |	TT.City,
	               |	TT.Street,
	               |	TT.House,
	               |	TT.Name_build,
	               |	TT.Scheme,
	               |	TT.OpeningHours,
	               |	TT.Metro,
	               |	TT.Shirota,
	               |	TT.Dolgota,
	               |	TT.Komment_tt,
	               |	TT.tt_format,
	               |	TT.Регион,
	               |	TT._d КАК id_raskr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
	               |ГДЕ
	               //|	TT.is_active = ИСТИНА
	               |	НЕ TT.Plan = 10
	               |	И TT.type_tt = &type_tt
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.id_TT КАК id_TT,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних КАК ЦФОСтруктурныхЕдиницСрезПоследних";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	ТабГруппыПоРегистру = Результаты[1].Выгрузить();
	Пока Выборка.Следующий() Цикл
		СтрокаГруппаПоРегистру = ТабГруппыПоРегистру.Найти(Выборка.ИД_ТТ, "id_TT");
		СоздатьИзменитьТорговуюТочку(Выборка.ИД_ТТ, Выборка, ?(СтрокаГруппаПоРегистру = Неопределено, Неопределено, СтрокаГруппаПоРегистру.ЦФО));
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОГруппахТорговыхТочек() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Groups.id_group,
	               |	Groups.name_groupe,
	               |	Groups.id_manager,
	               |	Groups.active_gr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Groups КАК Groups";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьИзменитьГруппуТорговойТочки(Выборка.id_group, Выборка);
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОСкладах() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("type_tt", "склад");
	Запрос.Текст = "ВЫБРАТЬ
	               |	TT.id_TT КАК ИД_ТТ,
	               |	TT.name_TT КАК НаименованиеТТ,
	               |	TT.adress,
	               |	TT.nomer_tel,
	               |	TT.start_date,
	               |	TT.close_date,
	               |	TT.N
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TT КАК TT
	               |ГДЕ
	               |	TT.type_tt = &type_tt";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьИзменитьСклад(Выборка.ИД_ТТ, Выборка);
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПоставщиках() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Kontr.id_kontr_postavka,
	|	Kontr1.ИНН
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr1
	|		ПО Kontr.id_kontr_postavka = Kontr1.id_kontr";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	Пока Выборка.Следующий() Цикл
		СоздатьИзменитьПоставщика(Выборка.ИНН, Выборка.id_kontr_postavka);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОГрафикахПоставкиТовара() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Kontr.id_kontr_postavka,
	               |	Kontr1.ИНН
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr1
	               |		ПО Kontr.id_kontr_postavka = Kontr1.id_kontr";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОНоменклатуре() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Group_tovari.id_group КАК id_group,
	               |	Group_tovari.name_gr,
	               |	Group_tovari.id_parent,
	               |	ЛОЖЬ КАК Приоритет,
	               |	Group_tovari.id_par_group
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Group_tovari КАК Group_tovari
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tovari.id_tov,
	               |	Tovari.name_tov,
	               |	Tovari.N_tov,
	               |	Tovari.Ed_izm,
	               |	Tovari.type_tov,
	               |	Tovari.id_group,
	               |	Tovari.N_t_sms,
	               |	Tovari.NDS,
	               |	Tovari.Min_ostatok,
	               |	Tovari.id_type_ass,
	               |	type_ass.name_type_ass,
	               |	Tovari.Ves,
	               |	Tovari.Tovar_sms,
	               |	Tovari.Korotk_srok,
	               |	Tovari.bez_ostatkov,
				   |	Tovari.hoz_tovar
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tovari КАК Tovari
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.type_ass КАК type_ass
	               |		ПО Tovari.id_type_ass = type_ass.id_type_ass";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабГруппы = Результаты[0].Выгрузить();
	Для Каждого СтрокаГруппа Из ТабГруппы Цикл
		Если СтрокаГруппа.id_group = СтрокаГруппа.id_parent
			ИЛИ СтрокаГруппа.id_group = СтрокаГруппа.id_par_group Тогда
			СтрокаГруппа.Приоритет = Истина;
		КонецЕсли;	
	КонецЦикла;	
	ТабГруппы.Сортировать("Приоритет Убыв, id_group");
	Для Каждого СтрокаГруппа Из ТабГруппы Цикл
		ГруппаЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаГруппа.id_group);
		Если ГруппаЭлемент.Пустая() Тогда
			ГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			ГруппаОбъект = ГруппаЭлемент.ПолучитьОбъект();
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура();
		
		Если СтрокаГруппа.id_group <> СтрокаГруппа.id_parent Тогда
			Если ЗначениеЗаполнено(СтрокаГруппа.id_parent) Тогда
				Родитель = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаГруппа.id_parent);
				Если Родитель.ЭтоГруппа Тогда
					СтруктураРеквизитов.Вставить("Родитель", Родитель);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		СтруктураРеквизитов.Вставить("id_group", СтрокаГруппа.id_group);
		СтруктураРеквизитов.Вставить("Наименование", СтрокаГруппа.name_gr);
		
		ЭтоНовая = ГруппаОбъект.ЭтоНовый();
		//Если Не ЭтоНовая
		//	И ЗначениеЗаполнено(СтрокаГруппа.id_par_group) Тогда
		//	СтруктураРеквизитов.Вставить("ГруппаДляРасчетчика", Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаГруппа.id_par_group));
		//КонецЕсли;
		
		НужнаЗапись = Ложь;
		Для Каждого Реквизит Из СтруктураРеквизитов Цикл
			Если Реквизит.Значение = NULL
				И Не ЗначениеЗаполнено(ГруппаОбъект[Реквизит.Ключ]) Тогда
				Продолжить;
			КонецЕсли;
			Если ГруппаОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
				НужнаЗапись = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если НужнаЗапись Тогда
			Попытка
				Для Каждого Реквизит Из СтруктураРеквизитов Цикл
					ГруппаОбъект[Реквизит.Ключ] = Реквизит.Значение;
				КонецЦикла;
				ГруппаОбъект.Записать();
			Исключение
				ГруппаОбъект.УстановитьНовыйКод("0");
				ГруппаОбъект.Записать();
			КонецПопытки;
		КонецЕсли;	
		
		Если ЭтоНовая
			И ЗначениеЗаполнено(СтрокаГруппа.id_par_group) Тогда
			ГруппаОбъект = ГруппаОбъект.Ссылка.ПолучитьОбъект();
			Если ГруппаОбъект.ГруппаДляРасчетчика <> Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаГруппа.id_par_group) Тогда
				ГруппаОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьИзменитьНоменклатуру(Выборка.id_tov, Выборка);
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОСпецификациях(ДатаЗаписи) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Tov_kontr.id_Tov,
	               |	Tov_kontr.id_Etiketka,
	               |	Tov_kontr.id_Upakovka,
	               |	Tov_kontr.id_Upakovka2,
	               |	Kontr.id_kontr_postavka
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tov_kontr КАК Tov_kontr
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Tov_kontr.id_kontr = Kontr.id_kontr
	               |ГДЕ
	               |	(Tov_kontr.id_Etiketka > 0
	               |			ИЛИ Tov_kontr.id_Upakovka > 0
	               |			ИЛИ Tov_kontr.id_Upakovka2 > 0)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьИзменитьСпецификацию(ДатаЗаписи, Выборка.id_tov, Выборка.id_kontr_postavka, Выборка);
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПродавцах(ТолькоСоздатьНовых = Ложь) Экспорт
	//+++АК POZM 2018.09.04 ИП-00018201
	Возврат; // теперь обмен по правилам
	//---АК POZM 
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT Fizlica._Code, Fizlica._Description as FIO, CAST(master.dbo.Binary2UID(Fizlica._IDRRef) as nvarchar(50)) UIN,
				|		Fizlica._Fld1875 as DataRogd,
				|		Fizlica._Fld1876 as INN,
				|		ISNULL(VZ_Dolgn.Dolgnost, '') as Dolgnost,
				|		CAST(ISNULL(CONVERT(Date, VZ_FirstDate.FirstDate), '2001-01-01') as datetime) as FirstDate,
				|		ISNULL(PD.Вид, '') Вид,
				|		PD.Серия Серия,
				|		PD.Номер Номер,
				|		PD.ДатаВыдачи ДатаВыдачи,
				|		PD.КемВыдан КемВыдан,
				|		PD.КодПодразделения КодПодразделения,
				|		PD.ДатаРегистрацииПоМестуЖительства ДатаРегистрацииПоМестуЖительства
				|FROM [SRV-SQL05].hrm.dbo._Reference136 as Fizlica (nolock)
				|LEFT OUTER JOIN (SELECT Sotrudniki._Fld1618RRef as FizlicoRef, Sotrudniki._Description,
				|ISNULL(Dolgnosti._Description, '') as Dolgnost
				|FROM [SRV-SQL05].hrm.dbo._InfoRg7278 as ULHistory (nolock)
				|Inner join [SRV-SQL05].hrm.dbo._Reference115 as Sotrudniki (nolock)
				|ON ULHistory._Fld7279RRef = Sotrudniki._IDRRef
				|INNER JOIN (SELECT MAX(ULHistory._Period) as Period, Sotrudniki._Fld1618RRef
				|from [SRV-SQL05].hrm.dbo._InfoRg7278 as ULHistory (nolock)
				|Inner join [SRV-SQL05].hrm.dbo._Reference115 as Sotrudniki (nolock)
				|ON ULHistory._Fld7279RRef = Sotrudniki._IDRRef
				|GROUP BY Sotrudniki._Fld1618RRef) AS VZ_Max
				|ON ULHistory._Period = VZ_Max.Period and Sotrudniki._Fld1618RRef = VZ_Max._Fld1618RRef
				|LEFT OUTER JOIN [SRV-SQL05].hrm.dbo._Reference51 as Dolgnosti (nolock)
				|ON ULHistory._Fld7286RRef = Dolgnosti._IDRRef
				|
				|) as VZ_Dolgn
				|	ON Fizlica._IDRRef = VZ_Dolgn.FizlicoRef
				|LEFT OUTER JOIN (SELECT Sotrudniki._Fld1618RRef as FizlicoRef, MIN(ULHistory._Period) as FirstDate
				|	
				|	FROM [SRV-SQL05].hrm.dbo._InfoRg7278 as ULHistory (nolock)
				|	INNER JOIN (SELECT MIN(ULHistory._Period) as Period, ULHistory._Fld7279RRef
				|	from [SRV-SQL05].hrm.dbo._InfoRg7278 as ULHistory (nolock)
				|	GROUP BY ULHistory._Fld7279RRef) AS VZ_Min
				|	ON ULHistory._Period = VZ_Min.Period and ULHistory._Fld7279RRef = VZ_Min._Fld7279RRef
				|	Inner join [SRV-SQL05].hrm.dbo._Reference115 as Sotrudniki (nolock)
				|	ON ULHistory._Fld7279RRef = Sotrudniki._IDRRef
				|	GROUP BY Sotrudniki._Fld1618RRef) as VZ_FirstDate
				|	ON Fizlica._IDRRef = VZ_FirstDate.FizlicoRef
				|LEFT OUTER JOIN
				|	(SELECT PD._Fld6991RRef as FizLico,
				|		Docs._Description as Вид,
				|		PD._Fld6993 Серия,
				|		PD._Fld6994 Номер,
				|		PD._Fld6995 ДатаВыдачи,
				|		PD._Fld6996 КемВыдан,
				|		PD._Fld6997 КодПодразделения,
				|		PD._Fld6998 ДатаРегистрацииПоМестуЖительства
				|	FROM [SRV-SQL05].HRM.dbo._InfoRg6990 as PD (nolock)
				|	INNER JOIN
				|	(select PD._Fld6991RRef as Fizlico, MAX(PD._Period) as Period 
				|	from [SRV-SQL05].HRM.dbo._InfoRg6990 as PD (nolock)
				|	GROUP BY PD._Fld6991RRef) as VZ_Max
				|	ON PD._Period = VZ_Max.Period and PD._Fld6991RRef = VZ_Max.Fizlico
				|	LEFT OUTER JOIN [SRV-SQL05].HRM.dbo._Reference49 as Docs (nolock)
				|	ON PD._Fld6992RRef = Docs._IDRRef) AS PD ON Fizlica._IDRRef = PD.FizLico";
	
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	ФизическиеЛица.Ссылка,
	                  |	ФизическиеЛица.УинВЗуп,
					  //+++АК POZM 2018.05.16 ИП-00018693 
	                  |	ЛОЖЬ КАК Обработан
					  //---АК POZM 
	                  |ИЗ
	                  |	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
	ТабКеш.Индексы.Добавить("УинВЗуп");
	
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Код = Rs.Fields("_Code").Value;
			СтрокаКеш = ТабКеш.Найти(Rs.Fields("UIN").Value, "УинВЗуп");
			//Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(Код, "ЧГ=0"), 10));
			Если СтрокаКеш <> Неопределено Тогда
				//+++АК POZM 2018.05.16 ИП-00018693 
				// сотрудники переносятся в физлиц. Если сотрудников несколько по физлицу, физлицо постоянно перезаписывается здесь
				Если СтрокаКеш.Обработан Тогда
					rs.MoveNext();
					Продолжить;
				КонецЕсли;	
				СтрокаКеш.Обработан = Истина;
				//---АК POZM 
				Продавец = СтрокаКеш.Ссылка;
			Иначе
				Продавец = Неопределено;
			КонецЕсли;	
			Если Rs.Fields("DataRogd").Value = NULL Тогда
				ДатаРождения = '00010101';
			Иначе	
				ДатаРождения = ДобавитьМесяц(Rs.Fields("DataRogd").Value, -12*2000);
			КонецЕсли;	
			Если Rs.Fields("FirstDate").Value = NULL Тогда
				ДатаПервогоДня = '00010101';
			Иначе	
				ДатаПервогоДня = ДобавитьМесяц(Rs.Fields("FirstDate").Value, -12*2000);
			КонецЕсли;
			УдостоверениеЛичности = "";
			Если ЗначениеЗаполнено(Rs.Fields("Вид").Value) Тогда
				УдостоверениеЛичности = "" + Rs.Fields("Вид").Value + ", серия: " + Rs.Fields("Серия").Value + ", № " + Rs.Fields("Номер").Value
									+ ", выдан: " + Формат(ДобавитьМесяц(Rs.Fields("ДатаВыдачи").Value, -12*2000),"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									+ Rs.Fields("КемВыдан").Value + ", № подр. " + Rs.Fields("КодПодразделения").Value
									+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(ДобавитьМесяц(Rs.Fields("ДатаРегистрацииПоМестуЖительства").Value, -12*2000),"ДФ='дд ММММ гггг'; ДП='Не указано'");
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Продавец) Тогда
				СпрОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
				СпрОбъект.Код = Прав("0000000000" + Формат(Код, "ЧГ=0"), 10);
				СпрОбъект.Наименование = Rs.Fields("FIO").Value;
				СпрОбъект.ПолноеФИО = Rs.Fields("FIO").Value;
				СпрОбъект.ДатаРождения = ДатаРождения;
				СпрОбъект.ИНН = Rs.Fields("INN").Value;
				СпрОбъект.Должность = СокрЛП(Rs.Fields("Dolgnost").Value);
				СпрОбъект.ДатаНачалаРаботы = ДатаПервогоДня;
				СпрОбъект.УдостоверениеЛичности = УдостоверениеЛичности;
				СпрОбъект.УинВЗуп = Rs.Fields("UIN").Value;
				СпрОбъект.ОбменДанными.Загрузка = Истина;
				СпрОбъект.Записать();
				СтрокаДоб = ТабКеш.Добавить();
				СтрокаДоб.УинВЗуп = Rs.Fields("UIN").Value;
				СтрокаДоб.Ссылка = СпрОбъект.Ссылка;
			Иначе
				СтруктураРеквизитов = Новый Структура();
				СпрОбъект = Продавец.ПолучитьОбъект();
				СтруктураРеквизитов.Вставить("Наименование", Rs.Fields("FIO").Value);
				СтруктураРеквизитов.Вставить("ДатаРождения", ДатаРождения);
				СтруктураРеквизитов.Вставить("ИНН", Rs.Fields("INN").Value);
				СтруктураРеквизитов.Вставить("Должность", СокрЛП(Rs.Fields("Dolgnost").Value));
				СтруктураРеквизитов.Вставить("ДатаНачалаРаботы", ДатаПервогоДня);
				СтруктураРеквизитов.Вставить("УдостоверениеЛичности", УдостоверениеЛичности);
				НужнаЗапись = Ложь;
				Для Каждого Реквизит Из СтруктураРеквизитов Цикл
					Если Реквизит.Значение = NULL
						И Не ЗначениеЗаполнено(СпрОбъект[Реквизит.Ключ]) Тогда
						Продолжить;
					КонецЕсли;
					Если СпрОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
						НужнаЗапись = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если НужнаЗапись Тогда
					Для Каждого Реквизит Из СтруктураРеквизитов Цикл
						СпрОбъект[Реквизит.Ключ] = Реквизит.Значение;
					КонецЦикла;
					СпрОбъект.ОбменДанными.Загрузка = Истина;
					СпрОбъект.Записать();
				КонецЕсли;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры

Процедура ПереводСотрудниковНаУин()
	
	//временный участок, прогрузим уины с зупа
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT
				|CAST(master.dbo.Binary2UID(SotrudnikiSpr._IDRRef) as nvarchar(36)) as Uin,
				|SotrudnikiSpr._Code as SotrKod,
				|SotrudnikiSpr._Description as SotrName,
				|FizlicaSpr._Code as FizlicaKod,
				|OrgSpr._Fld1397 as INN
				|FROM [SRV-SQL05].Hrm.dbo._Reference115 as SotrudnikiSpr WITH(NOLOCK)
				|LEFT OUTER JOIN [SRV-SQL05].Hrm.dbo._Reference136 as FizlicaSpr WITH(NOLOCK)
				|ON SotrudnikiSpr._Fld1618RRef = FizlicaSpr._IDRRef
				|LEFT OUTER JOIN [SRV-SQL05].Hrm.dbo._Reference80 as OrgSpr WITH(NOLOCK)
				|ON SotrudnikiSpr._Fld1620RRef = OrgSpr._IDRRef";
	
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	               |	СотрудникиОрганизаций.Код КАК Код,
	               |	СотрудникиОрганизаций.Организация,
	               |	СотрудникиОрганизаций.Физлицо,
	               |	СотрудникиОрганизаций.УинВЗупе
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код,
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Код
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИНН
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабСотрудники = Результаты[0].Выгрузить();
	ТабФизЛица = Результаты[1].Выгрузить();
	ТабОрг = Результаты[2].Выгрузить();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Код = Rs.Fields("FizlicaKod").Value;
			//Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(Код, "ЧГ=0"), 10));
			СтрокаПродавец = ТабФизЛица.Найти(Прав("0000000000" + Формат(Код, "ЧГ=0"), 10), "Код");
			Если СтрокаПродавец = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			Иначе
				Продавец = СтрокаПродавец.Ссылка;
			КонецЕсли;	
			//Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", Rs.Fields("INN").Value);
			СтрокаОрганизация = ТабОрг.Найти(Rs.Fields("INN").Value, "ИНН");
			Если СтрокаОрганизация = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			Иначе
				Организация = СтрокаОрганизация.Ссылка;
			КонецЕсли;	
			СтрокиСотрудник = ТабСотрудники.НайтиСтроки(Новый Структура("Физлицо, Организация, Код", Продавец, Организация, Rs.Fields("SotrKod").Value));
			Если СтрокиСотрудник.Количество() > 0 Тогда
				Сотрудник = СтрокиСотрудник[0].Ссылка;
				Если НЕ ЗначениеЗаполнено(СтрокиСотрудник[0].УинВЗупе) Тогда
					СотрОбъект = Сотрудник.ПолучитьОбъект();
					СотрОбъект.УинВЗупе = ВРег(Rs.Fields("Uin").Value);
					СотрОбъект.ОбменДанными.Загрузка = Истина;
					СотрОбъект.Записать();
				КонецЕсли;	
			КонецЕсли;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОСотрудниках() Экспорт
	//+++АК POZM 2018.09.04 ИП-00018201
	Возврат; // теперь обмен по правилам
	//---АК POZM 
	//временная мера
	//ПереводСотрудниковНаУин();
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT VZ_Zapros.Uin,
				|	VZ_Zapros.SotrKod,
				|	VZ_Zapros.SotrName,
				|	VZ_Zapros.FizlicaKod,
				|	VZ_Zapros.INN,
				|	MIN(VZ_Zapros.DataPriema) as DataPriema,
				|	MIN(VZ_Zapros.DataUvol) as DataUvol, MAX(VZ_Zapros.Marked) as Marked,
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				//в запросе по договорам, отличным от "Трудовой договор" все равно выдергиваю сотрудников (т.к. раньше 
				//стоял отбор, чтобы не выдергивать), но только для передачи пометки удаления, чтобы не менять другие данные.				 
				//+++АК POZM 2018.04.12 ИП-00018405  был масимум
				|	MIN(VZ_Zapros.OnlyMarked) as OnlyMarked
				//---АК POZM 
				//---АК Susk (Суслин К.В.) 
				|FROM (SELECT
				|CAST(master.dbo.Binary2UID(SotrudnikiSpr._IDRRef) as nvarchar(36)) as Uin,
				|SotrudnikiSpr._Code as SotrKod,
				|SotrudnikiSpr._Description as SotrName,
				|CAST(master.dbo.Binary2UID(FizlicaSpr._IDRRef) as nvarchar(36)) as FizlicaKod,
				|OrgSpr._Fld1397 as INN,
				|MAX(CONVERT(datetime, SotrudnikiSpr._Fld1641)) as DataPriema,
				|MIN(CONVERT(datetime, SotrudnikiSpr._Fld1642)) as DataUvol, MAX(SotrudnikiSpr._Marked) as Marked,
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				//само условие, что договор = "Трудовой договор" - передаю всё, иначе только пометку удаления.
				|CASE WHEN SotrudnikiSpr._Fld1622RRef = 0xBBE613B72F303D02478D388D251FF74E THEN 0 ELSE 1 END as OnlyMarked
				//---АК Susk (Суслин К.В.) 
				|FROM [SRV-SQL05].Hrm.dbo._Reference115 as SotrudnikiSpr WITH(NOLOCK)
				|LEFT OUTER JOIN [SRV-SQL05].Hrm.dbo._Reference136 as FizlicaSpr WITH(NOLOCK)
				|ON SotrudnikiSpr._Fld1618RRef = FizlicaSpr._IDRRef
				|LEFT OUTER JOIN [SRV-SQL05].Hrm.dbo._Reference80 as OrgSpr WITH(NOLOCK)
				|ON SotrudnikiSpr._Fld1620RRef = OrgSpr._IDRRef
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				//старое условие убираю
				//|WHERE SotrudnikiSpr._Fld1622RRef = 0xBBE613B72F303D02478D388D251FF74E
				//---АК Susk (Суслин К.В.) 
				|GROUP BY SotrudnikiSpr._Code,
				|SotrudnikiSpr._Description,
				|CAST(master.dbo.Binary2UID(FizlicaSpr._IDRRef) as nvarchar(36)),
				|OrgSpr._Fld1397,
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				|SotrudnikiSpr._Fld1622RRef,
				//---АК Susk (Суслин К.В.) 
				|CAST(master.dbo.Binary2UID(SotrudnikiSpr._IDRRef) as nvarchar(36))
				|
				|UNION ALL
				|
				|SELECT CAST(master.dbo.Binary2UID(SotrudnikiSpr._IDRRef) as nvarchar(36)) as Uin,
				|		SotrudnikiSpr._Code as SotrKod,
				|		SotrudnikiSpr._Description as SotrName,
				|		CAST(master.dbo.Binary2UID(Fizlica._IDRRef) as nvarchar(36)),
				|		OrgSpr._Fld1397 as INN,
				|		MIN(Dog._Fld2590) as DataPriema ,
				|		MIN(CASE WHEN Dog._Fld2591 >= DATEADD(YEAR, 2000, GETDATE()) THEN '2001-01-01T00:00:00' ELSE Dog._Fld2591 END) as DataUval, MAX(0),
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				|		0
				//---АК Susk (Суслин К.В.) 
				|FROM [SRV-SQL05].HRM.dbo._Document164  as Dog (nolock)
				|	INNER JOIN [SRV-SQL05].HRM.dbo._Reference136 as FizLica (nolock)
				|		ON Dog._Fld2581RRef = FizLica._IDRRef
				|	INNER JOIN [SRV-SQL05].Hrm.dbo._Reference115 as SotrudnikiSpr WITH(NOLOCK)
				|		ON Dog._Fld2580RRef = SotrudnikiSpr._IDRRef
				|	LEFT OUTER JOIN [SRV-SQL05].Hrm.dbo._Reference80 as OrgSpr WITH(NOLOCK)
				|		ON Dog._Fld2582RRef = OrgSpr._IDRRef							
				|WHERE Dog._Posted = 1
				|GROUP BY FizLica._Code,
				|	SotrudnikiSpr._Code,
				|		SotrudnikiSpr._Description,
				|		CAST(master.dbo.Binary2UID(Fizlica._IDRRef) as nvarchar(36)),
				|		OrgSpr._Fld1397,
				|		CAST(master.dbo.Binary2UID(SotrudnikiSpr._IDRRef) as nvarchar(36))) AS VZ_Zapros
				|GROUP BY
				|VZ_Zapros.Uin,
				|	VZ_Zapros.SotrKod,
				|	VZ_Zapros.SotrName,
				|	VZ_Zapros.FizlicaKod,
				|	VZ_Zapros.INN";
	
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	               |	СотрудникиОрганизаций.Код КАК Код,
	               |	СотрудникиОрганизаций.Организация,
	               |	СотрудникиОрганизаций.Физлицо,
	               |	СотрудникиОрганизаций.УинВЗупе
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код,
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Код,
	               |	ФизическиеЛица.УинВЗуп
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ИНН
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабСотрудники = Результаты[0].Выгрузить();
	ТабФизЛица = Результаты[1].Выгрузить();
	ТабОрг = Результаты[2].Выгрузить();
	МассивФизЛица = Новый Массив();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Код = Rs.Fields("FizlicaKod").Value;
			//Продавец = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(Код, "ЧГ=0"), 10));
			СтрокаПродавец = ТабФизЛица.Найти(Код, "УинВЗуп");
			Если СтрокаПродавец = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			Иначе
				Продавец = СтрокаПродавец.Ссылка;
			КонецЕсли;	
			МассивФизЛица.Добавить(Продавец);
			//Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", Rs.Fields("INN").Value);
			СтрокаОрганизация = ТабОрг.Найти(Rs.Fields("INN").Value, "ИНН");
			Если СтрокаОрганизация = Неопределено Тогда
				rs.MoveNext();
				Продолжить;
			Иначе
				Организация = СтрокаОрганизация.Ссылка;
			КонецЕсли;	
			СтрокиСотрудник = ТабСотрудники.НайтиСтроки(Новый Структура("УинВЗупе", ВРег(Rs.Fields("Uin").Value)));
			Если СтрокиСотрудник.Количество() > 0 Тогда
				Сотрудник = СтрокиСотрудник[0].Ссылка;
			Иначе
				Сотрудник = Неопределено;
			КонецЕсли;	
			ДатаПриема = ДобавитьМесяц(Rs.Fields("DataPriema").Value, -12*2000);
			ДатаУвольнения = ДобавитьМесяц(Rs.Fields("DataUvol").Value, -12*2000);
			//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
			//создаю сотрудника только если его нет и не идет только передача пометки на удаление.
			ТолькоПометка = Rs.Fields("OnlyMarked").Value;
			//Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда			
			Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
				Если НЕ ТолькоПометка Тогда
				//---АК Susk (Суслин К.В.) 
					СпрОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
					СпрОбъект.Код = Rs.Fields("SotrKod").Value;
					СпрОбъект.Наименование = Rs.Fields("SotrName").Value;
					СпрОбъект.ПометкаУдаления = (Rs.Fields("Marked").Value = 1);
					СпрОбъект.Организация = Организация;
					СпрОбъект.Физлицо = Продавец;
					СпрОбъект.ДатаПриемаНаРаботу = ДатаПриема;
					СпрОбъект.ДатаУвольнения = ДатаУвольнения;
					СпрОбъект.ОбменДанными.Загрузка = Истина;
					СпрОбъект.УинВЗупе = ВРег(Rs.Fields("Uin").Value);
					СпрОбъект.Записать();
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			Иначе				
				СтруктураРеквизитов = Новый Структура();
				СпрОбъект = Сотрудник.ПолучитьОбъект();
				
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				Если ТолькоПометка Тогда
					СтруктураРеквизитов.Вставить("ПометкаУдаления", Rs.Fields("Marked").Value);
				Иначе
				//---АК Susk (Суслин К.В.) 
					СтруктураРеквизитов.Вставить("Код", Rs.Fields("SotrKod").Value);
					СтруктураРеквизитов.Вставить("Наименование", Rs.Fields("SotrName").Value);
					СтруктураРеквизитов.Вставить("ПометкаУдаления", Rs.Fields("Marked").Value);
					СтруктураРеквизитов.Вставить("Организация", Организация);
					СтруктураРеквизитов.Вставить("Физлицо", Продавец);
					СтруктураРеквизитов.Вставить("ДатаПриемаНаРаботу", ДатаПриема);
					СтруктураРеквизитов.Вставить("ДатаУвольнения", ДатаУвольнения);
				//+++АК Susk (Суслин К.В.) 2018.03.20 ИП-00018120
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				НужнаЗапись = Ложь;
				Для Каждого Реквизит Из СтруктураРеквизитов Цикл
					Если Реквизит.Значение = NULL
						И Не ЗначениеЗаполнено(СпрОбъект[Реквизит.Ключ]) Тогда
						Продолжить;
					КонецЕсли;
					Если СпрОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
						НужнаЗапись = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если НужнаЗапись Тогда
					Для Каждого Реквизит Из СтруктураРеквизитов Цикл
						СпрОбъект[Реквизит.Ключ] = Реквизит.Значение;
					КонецЦикла;
					СпрОбъект.ОбменДанными.Загрузка = Истина;
					СпрОбъект.Записать();
				КонецЕсли;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//теперь проставим признаки неактивности у физ лиц, которые уволены
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Физлицо,
	               |	МАКСИМУМ(СотрудникиОрганизаций.ДатаУвольнения) КАК ДатаУвольнения
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	(СотрудникиОрганизаций.Физлицо.Активный = ИСТИНА
	               |			ИЛИ СотрудникиОрганизаций.Физлицо.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиОрганизаций.Физлицо
	               |
	               |ИМЕЮЩИЕ
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА СотрудникиОрганизаций.ПометкаУдаления
	               |				ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	               |			ИНАЧЕ СотрудникиОрганизаций.ДатаУвольнения
	               |		КОНЕЦ) > ДАТАВРЕМЯ(1, 1, 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Физлицо,
	               |	МИНИМУМ(СотрудникиОрганизаций.ДатаУвольнения) КАК ДатаУвольнения
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.Физлицо.Активный = ЛОЖЬ
	               |	И СотрудникиОрганизаций.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиОрганизаций.Физлицо
	               |
	               |ИМЕЮЩИЕ
	               |	МИНИМУМ(СотрудникиОрганизаций.ДатаУвольнения) = ДАТАВРЕМЯ(1, 1, 1)";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Физлицо.ПолучитьОбъект();
		СпрОб.Активный = Ложь;
		СпрОб.ДатаУвольнения = Выборка.ДатаУвольнения;
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.Записать();
	КонецЦикла;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Физлицо.ПолучитьОбъект();
		СпрОб.Активный = Истина;
		СпрОб.ДатаУвольнения = '00010101';
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗагрузитьДанныеОКладовщиках() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Набор = РегистрыСведений.Кладовщики.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Voditeli.id_vod,
	               |	Voditeli.id_sklad,
	               |	Voditeli.Voditel
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Voditeli КАК Voditeli";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кладовщик = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(Выборка.Voditel));
		Если НЕ ЗначениеЗаполнено(Кладовщик) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В базе 1с не найден кладовщик (физ. лицо) с наименованием " + СокрЛП(Выборка.Voditel);
			Сообщение.Сообщить();
			Продолжить;
			//СпрОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			//СпрОбъект.УстановитьНовыйКод("К");
			//СпрОбъект.Наименование = СокрЛП(Выборка.Voditel);
			//СпрОбъект.НаименованиеПолное = СокрЛП(Выборка.Voditel);
			//СпрОбъект.ПолноеФИО = Выборка.Polnoe;
			//СпрОбъект.Записать();
			//Кладовщик = СпрОбъект.Ссылка;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Выборка.id_sklad) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_sklad);
			Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				//СтруктурнаяЕдиница = СоздатьИзменитьТорговуюТочку(Выборка.id_sklad);
				Продолжить;
			КонецЕсли;
			Запись = РегистрыСведений.Кладовщики.СоздатьМенеджерЗаписи();
			Запись.Кладовщик = Кладовщик;
			Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОЗаказеИПоставкеПродукции() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Набор = РегистрыСведений.ГрафикЗаказаИПоставкиТовара.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Kontr_sklad.id_kontr,
	               |	Kontr_sklad.id_sklad,
	               |	Kontr_sklad.Dni_post,
	               |	Kontr_sklad.Dni_razm,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Kontr_sklad.id_kontr КАК id_kontr,
	               |		Kontr_sklad.id_sklad КАК id_sklad,
	               |		МАКСИМУМ(Kontr_sklad.id_kontr_sklad) КАК id_kontr_sklad
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr_sklad КАК Kontr_sklad
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Kontr_sklad.id_kontr,
	               |		Kontr_sklad.id_sklad) КАК ВЗ_ПоследниеЗаписи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr_sklad КАК Kontr_sklad
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |			ПО Kontr_sklad.id_kontr = Kontr.id_kontr
	               |		ПО ВЗ_ПоследниеЗаписи.id_kontr_sklad = Kontr_sklad.id_kontr_sklad";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Dni_razm) Тогда
			Продолжить;
		КонецЕсли;	
		Поставщик = СоздатьИзменитьПоставщика(Выборка.ИНН, Выборка.id_kontr);
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_sklad);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_sklad);
		КонецЕсли;
		ДниРазмещения = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.Dni_razm, ",");
		ДниПоставки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.Dni_post, ",");
		Для н = 0 По ДниРазмещения.Количество() - 1 Цикл
			Запись = Набор.Добавить();
			Запись.Склад = ТорговаяТочка;
			Запись.Контрагент = Поставщик;
			Запись.НомерЗаписи = н;
			Если НРег(СокрЛП(ДниРазмещения[н])) = "пн" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Понедельник;
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "вт" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Вторник;
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "ср" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Среда;
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "чт" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Четверг;	
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "пт" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Пятница;
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "сб" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Суббота;
			ИначеЕсли НРег(СокрЛП(ДниРазмещения[н])) = "вс" Тогда
				Запись.ДеньЗаказа = Перечисления.ДниНедели.Воскресенье;	
			КонецЕсли;
			Если н >= ДниПоставки.Количество() Тогда
				Запись.ДеньПоставки = Запись.ДеньЗаказа;
			Иначе
				Если НРег(СокрЛП(ДниПоставки[н])) = "пн" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Понедельник;
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "вт" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Вторник;
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "ср" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Среда;
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "чт" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Четверг;	
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "пт" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Пятница;
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "сб" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Суббота;
				ИначеЕсли НРег(СокрЛП(ДниПоставки[н])) = "вс" Тогда
					Запись.ДеньПоставки = Перечисления.ДниНедели.Воскресенье;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Набор.Записать();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОУсловияхПоставкиТовара() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Набор = РегистрыСведений.УсловияПоставкиТоваров.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Tov_kontr.id_kontr,
	               |	Tov_kontr.id_Tov,
	               |	Tov_kontr.Kolvo_korob,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Tov_kontr.id_kontr КАК id_kontr,
	               |		Tov_kontr.id_Tov КАК id_tov,
	               |		МАКСИМУМ(Tov_kontr.id_Tov_kontr) КАК id_Tov_kontr
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tov_kontr КАК Tov_kontr
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Tov_kontr.id_kontr,
	               |		Tov_kontr.id_Tov) КАК ВЗ_ПоследниеЗаписи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tov_kontr КАК Tov_kontr
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |			ПО Tov_kontr.id_kontr = Kontr.id_kontr
	               |		ПО ВЗ_ПоследниеЗаписи.id_Tov_kontr = Tov_kontr.id_Tov_kontr";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_Tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.id_Tov);
		КонецЕсли;
		Запись = Набор.Добавить();
		Если ЗначениеЗаполнено(Выборка.id_kontr) Тогда
			Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_kontr);
			Если Поставщик.Пустая() Тогда
				Поставщик = СоздатьИзменитьПоставщика(Выборка.ИНН, Выборка.id_kontr);
			КонецЕсли;	
			Запись.Контрагент = Поставщик;
		КонецЕсли;	
		Запись.Номенклатура = Номенклатура;
		Запись.КоличествоВКоробке = Выборка.Kolvo_korob;
	КонецЦикла;	
	
	Набор.Записать();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОХарактеристиках() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Tov_kontr.id_kontr,
	               |	Tov_kontr.id_Tov,
	               |	Tov_kontr.Kolvo_korob,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Tov_kontr.id_Tov_kontr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tov_kontr КАК Tov_kontr
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Tov_kontr.id_kontr = Kontr.id_kontr
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Kontr1.id_ul_post,
	               |	Kontr1.nova_kontr,
	               |	Kontr1.ИНН,
	               |	Kontr.id_kontr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr1
	               |		ПО Kontr.id_ul_post = Kontr1.id_kontr";
				   
	Результаты = Запрос.ВыполнитьПакет();
				   
	Выборка = Результаты[0].Выбрать();
	ТабКонтрагенты = Результаты[1].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_Tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.id_Tov);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.id_kontr) Тогда
			
			СтрокаЮл = ТабКонтрагенты.Найти(Выборка.id_kontr, "id_kontr");
			
			Контр = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", СтрокаЮл.id_ul_post);
			Если Контр.Пустая() Тогда
				Контр = СоздатьИзменитьПоставщика(СтрокаЮл.ИНН, СтрокаЮл.id_ul_post);
			КонецЕсли;
			
			Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаЮл.id_ul_post,, Номенклатура);
			Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаЮл.id_ul_post, Номенклатура, СтрокаЮл.nova_kontr, СтрокаЮл.ИНН);
			Иначе
				ХарОбъект = Характеристика.ПолучитьОбъект();
				Если ХарОбъект.Наименование <> СтрокаЮл.nova_kontr Тогда
					ХарОбъект.Наименование = СтрокаЮл.nova_kontr;
					ХарОбъект.Записать();
				КонецЕсли;	
			КонецЕсли;
			
			НаборХарактеристики = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборХарактеристики.Отбор.Объект.Установить(Характеристика);
			НаборХарактеристики.Прочитать();
			ТабХарактеристики = НаборХарактеристики.Выгрузить();
			СтрокаПроизводитель = ТабХарактеристики.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.Производитель, "Свойство");
			БылоИзменение = Ложь;
			Если СтрокаПроизводитель = Неопределено Тогда
				СтрокаПроизводитель = ТабХарактеристики.Добавить();
				СтрокаПроизводитель.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель;
				СтрокаПроизводитель.Объект = Характеристика;
			КонецЕсли;
			Если СтрокаПроизводитель.Значение <> Контр Тогда
				СтрокаПроизводитель.Значение = Контр;
				БылоИзменение = Истина;
			КонецЕсли;
			
			СтрокаКолВУпаковке = ТабХарактеристики.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке, "Свойство");
			Если СтрокаКолВУпаковке = Неопределено Тогда
				СтрокаКолВУпаковке = ТабХарактеристики.Добавить();
				СтрокаКолВУпаковке.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке;
				СтрокаКолВУпаковке.Объект = Характеристика;
			КонецЕсли;
			
			КоличествоВУпаковке = ?(Выборка.Kolvo_korob = null, 0, Окр(Выборка.Kolvo_korob, 3));
			Если СтрокаКолВУпаковке.Значение <> КоличествоВУпаковке Тогда
				СтрокаКолВУпаковке.Значение = КоличествоВУпаковке;
				БылоИзменение = Истина;
			КонецЕсли;
			
			Если БылоИзменение Тогда
				НаборХарактеристики.Загрузить(ТабХарактеристики);
				НаборХарактеристики.Записать();
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
	//ADOСоединение.Open();
	//
	//СтрЗапрос = "SELECT tov_kontr.id_tov
	//			|	  ,tov_kontr.id_kontr
	//			|	  ,tov_kontr.Kolvo_korob
	//			|	  ,Kontr.nova_kontr
	//			|	  , Kontr.ИНН
	//			|  FROM [M2].[dbo].[tov_kontr] as tov_kontr (nolock) 
	//			|  INNER JOIN (
	//			|SELECT MAX([Number_r]) as Number_r
	//			|	  ,[id_tov]
	//			|	  ,[id_kontr]
	//			|  FROM [M2].[dbo].[tov_kontr] (nolock) 
	//			|  GROUP BY [id_tov]
	//			|	  ,[id_kontr]) as VZ_Max
	//			|	  ON tov_kontr.Number_r = VZ_Max.Number_r
	//			|	  and tov_kontr.id_tov = VZ_Max.id_tov
	//			|	  and tov_kontr.id_kontr = VZ_Max.id_kontr
	//			|  LEFT OUTER JOIN    
	//			|	  [M2].[dbo].Kontr as Kontr (nolock)
	//			|	   ON Tov_kontr.id_kontr = Kontr.id_kontr";
	//
	//rs = ADOСоединение.Execute(СтрЗапрос);
	//
	//ТаблицаСДанными = Новый ТаблицаЗначений();
	//ТаблицаСДанными.Колонки.Добавить("id_tov");
	//ТаблицаСДанными.Колонки.Добавить("id_kontr");
	//ТаблицаСДанными.Колонки.Добавить("Kolvo_korob");
	//ТаблицаСДанными.Колонки.Добавить("nova_kontr");
	//ТаблицаСДанными.Колонки.Добавить("ИНН");
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = ТаблицаСДанными.Добавить();
	//		СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
	//		СтрокаДоб.id_kontr = Rs.Fields("id_kontr").Value;
	//		СтрокаДоб.Kolvo_korob = Rs.Fields("Kolvo_korob").Value;
	//		СтрокаДоб.nova_kontr = Rs.Fields("nova_kontr").Value;
	//		СтрокаДоб.ИНН = Rs.Fields("ИНН").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	//
	//СтрЗапрос = "SELECT
	//			   |	Kontr1.id_ul_post,
	//			   |	Kontr1.nova_kontr,
	//			   |	Kontr1.ИНН,
	//			   |	Kontr.id_kontr
	//			   |FROM
	//			   |	M2.dbo.Kontr as Kontr (nolock)
	//			   |		INNER JOIN M2.dbo.Kontr as Kontr1 (nolock)
	//			   |		ON Kontr.id_ul_post = Kontr1.id_kontr";
	//
	//rs = ADOСоединение.Execute(СтрЗапрос);
	//
	//ТабКонтрагенты = Новый ТаблицаЗначений();
	//ТабКонтрагенты.Колонки.Добавить("id_ul_post");
	//ТабКонтрагенты.Колонки.Добавить("id_kontr");
	//ТабКонтрагенты.Колонки.Добавить("nova_kontr");
	//ТабКонтрагенты.Колонки.Добавить("ИНН");
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		СтрокаДоб = ТабКонтрагенты.Добавить();
	//		СтрокаДоб.id_ul_post = Rs.Fields("id_ul_post").Value;
	//		СтрокаДоб.id_kontr = Rs.Fields("id_kontr").Value;
	//		СтрокаДоб.nova_kontr = Rs.Fields("nova_kontr").Value;
	//		СтрокаДоб.ИНН = Rs.Fields("ИНН").Value;
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	//
	//ADOСоединение.Close();
	//ADOСоединение = Неопределено;
	//
	//Для Каждого СтрокаТаб Из ТаблицаСДанными Цикл
	//	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТаб.id_Tov);
	//	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
	//		Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТаб.id_Tov);
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(СтрокаТаб.id_kontr) Тогда
	//		
	//		СтрокаЮл = ТабКонтрагенты.Найти(СтрокаТаб.id_kontr, "id_kontr");
	//		
	//		Контр = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", СтрокаЮл.id_ul_post);
	//		Если Контр.Пустая() Тогда
	//			Контр = СоздатьИзменитьПоставщика(СтрокаЮл.ИНН, СтрокаЮл.id_ul_post);
	//		КонецЕсли;
	//		
	//		Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаЮл.id_ul_post,, Номенклатура);
	//		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
	//			Характеристика = СоздатьХарактеристикуПоставщик(СтрокаЮл.id_ul_post, Номенклатура, СтрокаЮл.nova_kontr, СтрокаЮл.ИНН);
	//		Иначе
	//			ХарОбъект = Характеристика.ПолучитьОбъект();
	//			Если ХарОбъект.Наименование <> СтрокаЮл.nova_kontr Тогда
	//				ХарОбъект.Наименование = СтрокаЮл.nova_kontr;
	//				ХарОбъект.Записать();
	//			КонецЕсли;	
	//		КонецЕсли;
	//		
	//		НаборХарактеристики = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//		НаборХарактеристики.Отбор.Объект.Установить(Характеристика);
	//		НаборХарактеристики.Прочитать();
	//		ТабХарактеристики = НаборХарактеристики.Выгрузить();
	//		СтрокаПроизводитель = ТабХарактеристики.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.Производитель, "Свойство");
	//		БылоИзменение = Ложь;
	//		Если СтрокаПроизводитель = Неопределено Тогда
	//			СтрокаПроизводитель = ТабХарактеристики.Добавить();
	//			СтрокаПроизводитель.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель;
	//			СтрокаПроизводитель.Объект = Характеристика;
	//		КонецЕсли;
	//		Если СтрокаПроизводитель.Значение <> Контр Тогда
	//			СтрокаПроизводитель.Значение = Контр;
	//			БылоИзменение = Истина;
	//		КонецЕсли;
	//		
	//		СтрокаКолВУпаковке = ТабХарактеристики.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке, "Свойство");
	//		Если СтрокаКолВУпаковке = Неопределено Тогда
	//			СтрокаКолВУпаковке = ТабХарактеристики.Добавить();
	//			СтрокаКолВУпаковке.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке;
	//			СтрокаКолВУпаковке.Объект = Характеристика;
	//		КонецЕсли;
	//		
	//		КоличествоВУпаковке = ?(СтрокаТаб.Kolvo_korob = null, 0, Окр(СтрокаТаб.Kolvo_korob, 3));
	//		Если СтрокаКолВУпаковке.Значение <> КоличествоВУпаковке Тогда
	//			СтрокаКолВУпаковке.Значение = КоличествоВУпаковке;
	//			БылоИзменение = Истина;
	//		КонецЕсли;
	//		
	//		Если БылоИзменение Тогда
	//			НаборХарактеристики.Загрузить(ТабХарактеристики);
	//			НаборХарактеристики.Записать();
	//		КонецЕсли;	
	//		
	//	КонецЕсли;	
	//КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОБонусахНаРаскруткуТТ() Экспорт
	
	Возврат;
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Raskr.id_raskr,
	               |	Raskr.name_raskr,
	               |	Raskr.bonus_raskr
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Raskr КАК Raskr";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий()Цикл
		
		СпрБонус = Справочники.БонусыПоРаскруткеТТ.НайтиПоРеквизиту("id_raskr", Выборка.id_raskr);
		Если ЗначениеЗаполнено(СпрБонус)Тогда
			СпрБонусОбъект = СпрБонус.ПолучитьОбъект();
		Иначе
			СпрБонусОбъект = Справочники.БонусыПоРаскруткеТТ.СоздатьЭлемент();	
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура();
		СтруктураРеквизитов.Вставить("id_raskr", Выборка.id_raskr);
		СтруктураРеквизитов.Вставить("Наименование", Выборка.name_raskr);
		СтруктураРеквизитов.Вставить("Бонус", Выборка.bonus_raskr);
		
		НужнаЗапись = Ложь;
		Для Каждого Реквизит Из СтруктураРеквизитов Цикл
			Если Реквизит.Значение = NULL
				И Не ЗначениеЗаполнено(СпрБонусОбъект[Реквизит.Ключ]) Тогда
				Продолжить;
			КонецЕсли;
			Если СпрБонусОбъект[Реквизит.Ключ] <> Реквизит.Значение Тогда
				НужнаЗапись = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если НужнаЗапись Тогда
			Для Каждого Реквизит Из СтруктураРеквизитов Цикл
				СпрБонусОбъект[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла;
			СпрБонусОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОТоварныхОграниченияхНаТТ() Экспорт
	
	Набор = РегистрыСведений.ТоварныеОграниченияНаТочках.СоздатьНаборЗаписей();
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT     IdTov2Uid.UID as UID_tov, IdTT2Uid.UID as UID_tt, Tt_tov.type_ost, Tt_tov.Min_Ost
				|FROM         (SELECT     MAX(id_tt_tov) AS id_tt_tov, id_tov, id_tt, type_ost
				|					   FROM          M2.dbo.tt_tov AS Tt_tov WITH (nolock)
				|					   GROUP BY id_tov, id_tt, type_ost) AS ВЗ_ПослЗначения INNER JOIN
				|					  M2.dbo.tt_tov AS Tt_tov WITH (nolock) ON ВЗ_ПослЗначения.id_tt_tov = Tt_tov.id_tt_tov
				|INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as IdTov2Uid (nolock) ON Tt_tov.id_tov = IdTov2Uid.id_tov
				|INNER JOIN IzbenkaFin.dbo.TTBin2UID as IdTT2Uid (nolock) ON Tt_tov.id_tt = IdTT2Uid.id_tt
				|";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДанными = Новый ТаблицаЗначений();
	ТаблицаСДанными.Колонки.Добавить("ТТ"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаСДанными.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСДанными.Колонки.Добавить("type_ost"	, Новый ОписаниеТипов("Число"));
	ТаблицаСДанными.Колонки.Добавить("Min_Ost"	, Новый ОписаниеТипов("Число"));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаСДанными.Добавить();
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID_tov").Value, 2, 36)));
			СтрокаДоб.ТТ = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID_tt").Value, 2, 36)));
			СтрокаДоб.type_ost 		= Rs.Fields("type_ost").Value;
			СтрокаДоб.Min_Ost 		= Rs.Fields("Min_Ost").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Tt_tov.ТТ,
	               |	Tt_tov.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА Tt_tov.type_ost = 2
	               |			ТОГДА Tt_tov.Min_Ost
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК МинОстаток,
				   |	ВЫБОР
	               |		КОГДА Tt_tov.type_ost = 1
	               |			ТОГДА Tt_tov.Min_Ost
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК МаксОстаток
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Tt_tov
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tt_tov.ТТ,
	               |	Tt_tov.Номенклатура,
	               |	МАКСИМУМ(Tt_tov.МинОстаток) КАК МинОстаток,
				   |	МАКСИМУМ(Tt_tov.МаксОстаток) КАК МаксОстаток
	               |ИЗ
	               |	ВТ_Данные КАК Tt_tov
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Tt_tov.ТТ,
	               |	Tt_tov.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаСДанными);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		//здесь в акцесе почему-то используется таблица товаров
		//Запись.ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", Выборка.id_Tov);
		Запись.ГруппаНоменклатуры = Выборка.Номенклатура;
		Запись.ТорговаяТочка = Выборка.ТТ;
		Запись.МинимальныйОстаток = Выборка.МинОстаток;
		Запись.МаксимальныйОстаток = Выборка.МаксОстаток;
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПараметрахНоменклатурыДляЗаказа() Экспорт
	
	Набор = РегистрыСведений.ПараметрыНоменклатурыДляЗаказа.СоздатьНаборЗаписей();
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ТабСклад = Новый ТаблицаЗначений();
	ТабСклад.Колонки.Добавить("id_TT");
	ТабСклад.Колонки.Добавить("id_sklad");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	СтрЗапрос =
	"SELECT
	|	tt.id_TT,
	|	tt.[2d] AS id_sklad
	|FROM M2.dbo.tt as tt (nolock)
	|	INNER JOIN M2.dbo.tt as tt_1 (nolock)
	|	ON tt.adress = tt_1.adress
	|		AND tt_1.[Plan] = 10
	|WHERE
	|	tt.type_tt = 'склад'";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабСклад.Добавить();
			СтрокаДоб.id_tt 	= Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad 	= Rs.Fields("id_sklad").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	СтрЗапрос =
	"SELECT
	|	M2.id_tov,
	|	M2.id_sklad,
	|	M2.tov_koef_zapasa,
	|	M2.Skladir,
	|	M2.AUTO_rd,
	|	M2.tov_ostatok_min
	|FROM [M2].[dbo].[tov_sklad] as M2 (nolock)";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Rs.Fields("id_Tov").Value);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = СоздатьИзменитьНоменклатуру(Rs.Fields("id_Tov").Value);
			КонецЕсли;
			ТорговаяТочка = ТабСклад.Найти(Rs.Fields("id_sklad").Value, "id_TT");
			Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;
			Запись = Набор.Добавить();
			Запись.Склад 			= Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("Id_tt", ТорговаяТочка.id_sklad);
			Запись.Номенклатура 	= Номенклатура;
			Запись.Складируемая 	= Rs.Fields("Skladir").Value;
			Запись.КоэффициентЗаказа = Rs.Fields("tov_koef_zapasa").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Таб = Набор.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
				   
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыНоменклатурыДляЗаказа.Склад,
	|	ПараметрыНоменклатурыДляЗаказа.Номенклатура,
	|	ПараметрыНоменклатурыДляЗаказа.КоэффициентЗаказа,
	|	ПараметрыНоменклатурыДляЗаказа.Складируемая
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК ПараметрыНоменклатурыДляЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Склад,
	|	ВТ_Данные.Номенклатура,
	|	МАКСИМУМ(ВТ_Данные.КоэффициентЗаказа) КАК КоэффициентЗаказа,
	|	МАКСИМУМ(ВТ_Данные.Складируемая) КАК Складируемая
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Склад,
	|	ВТ_Данные.Номенклатура";
	
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОГрафикеРазвозаТовараНаТТ() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Набор = РегистрыСведений.ГрафикРазвозаТовараПоТочкам.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Group_sklad.id_sklad,
	|	МАКСИМУМ(Group_sklad.dni_raspr) КАК dni_raspr
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(Group_sklad.id_group_sklad) КАК id_group_sklad,
	|		Group_sklad.id_group КАК id_group,
	|		Group_sklad.id_sklad КАК id_sklad
	|	ИЗ
	|		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Group_sklad КАК Group_sklad
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Group_sklad.id_group,
	|		Group_sklad.id_sklad) КАК ВЗ_ПослЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Group_sklad КАК Group_sklad
	|		ПО ВЗ_ПослЗначения.id_group_sklad = Group_sklad.id_group_sklad
	|
	|СГРУППИРОВАТЬ ПО
	|	Group_sklad.id_sklad";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.dni_raspr) Тогда
			Продолжить;
		КонецЕсли;	
		
		//ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", Выборка.id_group);
		//Если ГруппаНоменклатуры.Пустая() Тогда
		//	Продолжить;
		//КонецЕсли;	
		Запись = Набор.Добавить();
		//Запись.ГруппаНоменклатуры = ГруппаНоменклатуры;
		Склад = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_sklad);
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = СоздатьИзменитьСклад(Выборка.id_sklad);
		КонецЕсли;
		Запись.Склад = Склад;
		
		Дни = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.dni_raspr, ",");
		Для н = 0 По Дни.Количество() - 1 Цикл
			Если НРег(СокрЛП(Дни[н])) = "пн" Тогда
				Запись.РазвозПн = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "вт" Тогда
				Запись.РазвозВт = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "ср" Тогда
				Запись.РазвозСр = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "чт" Тогда
				Запись.РазвозЧт = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "пт" Тогда
				Запись.РазвозПт = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "сб" Тогда
				Запись.РазвозСб = Истина;
			ИначеЕсли НРег(СокрЛП(Дни[н])) = "вс" Тогда
				Запись.РазвозВс = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	Набор.Записать();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОбОрганизацииПолучателеТовараНаТТ() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Набор = РегистрыСведений.ОрганизацияПолучательТовараОтПоставщикаНаТочку.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	TKU.id_tt,
	               |	TKU.id_kontr,
	               |	TKU.id_ul
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МАКСИМУМ(TKU.id_TKU) КАК id_TKU,
	               |		TKU.id_tt КАК id_tt,
	               |		TKU.id_kontr КАК id_kontr
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TKU КАК TKU
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		TKU.id_tt,
	               |		TKU.id_kontr) КАК ВЗ_ПослЗначения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.TKU КАК TKU
	               |		ПО ВЗ_ПослЗначения.id_TKU = TKU.id_TKU";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_tt);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_tt);
		КонецЕсли;
		Запись.ТорговаяТочка = ТорговаяТочка;
		
		Если ЗначениеЗаполнено(Выборка.id_kontr) Тогда
			Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_kontr);
			Если Поставщик.Пустая() Тогда
				Поставщик = СоздатьИзменитьПоставщика(Выборка.ИНН, Выборка.id_kontr);
			КонецЕсли;	
			Запись.Контрагент = Поставщик;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.id_ul) Тогда
			Запись.Организация = Справочники.Организации.НайтиПоРеквизиту("ИД", Выборка.id_ul);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Набор.Записать();
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеРазмещенияРекламы() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Type_inform.id_type_inform,
	               |	Type_inform.name_inform
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Type_inform КАК Type_inform
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	infrom_tt.id_inform_tt,
	               |	infrom_tt.id_tt,
	               |	infrom_tt.type_inform,
	               |	infrom_tt.desc_inform,
	               |	infrom_tt.start_date
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.infrom_tt КАК infrom_tt
	               |";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрСсылка = Справочники.МестаРазмещенияРекламы.НайтиПоКоду(Выборка.id_type_inform);
		Если СпрСсылка.Пустая() Тогда
			СпрОбъект = Справочники.МестаРазмещенияРекламы.СоздатьЭлемент();
		Иначе
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
		КонецЕсли;	
		СпрОбъект.Наименование = Выборка.name_inform;
		СпрОбъект.Записать();
	КонецЦикла;
	
	Выборка = Результаты[1].Выбрать();
	
	Попытка
		НачатьТранзакцию();
	    НаборЗаписей = РегистрыСведений.РазмещеннаяРекламаОТорговыхТочках.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_TT);
			Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
				ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ?(ЗначениеЗаполнено(Выборка.start_date), Выборка.start_date, '20100101');
			Запись.ТорговаяТочка = ТорговаяТочка;
			Запись.МестоРазмещения = Справочники.МестаРазмещенияРекламы.НайтиПоКоду(Выборка.type_inform);
			Запись.Описание = Выборка.desc_inform;
		КонецЦикла;	
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОКоличествеПродавцовНаТорговыхТочках() Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Hyst_cat.id_hyst_cat,
	               |	Hyst_cat.id_tt,
	               |	Hyst_cat.month_cat,
	               |	Hyst_cat.year_cat,
	               |	Hyst_cat.cat,
	               |	Hyst_cat.cat_zpl
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Hyst_cat КАК Hyst_cat";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		НачатьТранзакцию();
	    НаборЗаписей = РегистрыСведений.КоличествоПродавцовНаТочках.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_TT);
			Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
				ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Дата(Выборка.year_cat, Выборка.month_cat, 1);
			Запись.ТорговаяТочка = ТорговаяТочка;
			ЧислоРабочих = Формат(Выборка.cat, "ЧДЦ=2; ЧГ=0");
			Массив = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ЧислоРабочих);
			Если Массив.Количество() > 1 Тогда
				Попытка
					Запись.ВРабочиеДни = Число(Массив[0]);
				Исключение
				КонецПопытки;
				Попытка
					Запись.ВВыходныеДни = Число(Массив[1]);
				Исключение
				КонецПопытки;
			ИначеЕсли Массив.Количество() > 0 Тогда
				Попытка
					Запись.ВРабочиеДни = Число(Массив[0]);
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;	
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОТоварномАссортиментеНаТорговыхТочках(ДатаОбработки) Экспорт
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос =
	"SELECT
	|	LastZapisi.id_tov as id_tov,
	|	LastZapisi.id_TT as id_TT,
	|	Data.cena as cena,
	|	Data.id_ul_post,
	|	LastZapisi.дата
	|FROM
	|	(SELECT
	|		MAX(DataAccess.date_pr) as дата,
	|		DataAccess.id_tov as id_tov,
	|		DataAccess.id_TT as id_TT
	|FROM
	|		(SELECT
	|			Price.date_pr as date_pr,
	|			Price.id_tov as id_tov,
	|			Price.cena as cena,
	|			Price.id_TT as id_TT,
	|			Price.id_kontr as id_kontr,
	|		Kontr.nova_kontr as nova_kontr,
	|			Kontr.ИНН as ИНН
	|		FROM
	|			M2.dbo.Price as Price (nolock)
	|				LEFT OUTER JOIN M2.dbo.Kontr as Kontr (nolock)
	|				ON Price.id_kontr = Kontr.id_kontr
	|		WHERE
	|			Price.date_pr >= '" + Формат(НачалоМесяца(ДобавитьМесяц(ДатаОбработки, -2)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	|			and Price.date_pr <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "') as DataAccess
	|	
	|	GROUP BY
	|	DataAccess.id_tov,
	|		DataAccess.id_TT) as LastZapisi
	|		LEFT OUTER JOIN (SELECT
	|			DataAccess.date_pr as дата,
	|			DataAccess.id_tov as id_tov,
	|			DataAccess.id_TT as id_TT,
	|			DataAccess.cena as cena,
	|			DataAccess.id_kontr as id_kontr,
	|			DataAccess.id_ul_post as id_ul_post,
	|			DataAccess.nova_kontr as nova_kontr
	|		FROM
	|			(SELECT
	|				Price.date_pr as date_pr,
	|				Price.id_tov as id_tov,
	|				Price.cena as cena,
	|				Price.id_TT as id_TT,
	|			Price.id_kontr as id_kontr,
	|				Kontr.nova_kontr as nova_kontr,
	|				Kontr.ИНН as ИНН,
	|				Kontr.id_ul_post as id_ul_post
	|			FROM
	|				M2.dbo.Price as Price (nolock)
	|				LEFT OUTER JOIN M2.dbo.Kontr as Kontr (nolock)
	|					ON Price.id_kontr = Kontr.id_kontr
	|			WHERE
	|			Price.date_pr >= '" + Формат(НачалоМесяца(ДобавитьМесяц(ДатаОбработки, -2)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	|			and Price.date_pr <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "') as DataAccess) as Data
	|		ON LastZapisi.дата = Data.дата
	|			and LastZapisi.id_tov = Data.id_tov
	|			and LastZapisi.id_TT = Data.id_TT";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДанными = Новый ТаблицаЗначений();
	ТаблицаСДанными.Колонки.Добавить("id_tov");
	ТаблицаСДанными.Колонки.Добавить("id_TT");
	ТаблицаСДанными.Колонки.Добавить("cena");
	ТаблицаСДанными.Колонки.Добавить("id_ul_post");
	ТаблицаСДанными.Колонки.Добавить("дата");
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаСДанными.Добавить();
			СтрокаДоб.id_tov 		= Rs.Fields("id_tov").Value;
			СтрокаДоб.id_TT 		= Rs.Fields("id_TT").Value;
			СтрокаДоб.cena 			= Rs.Fields("cena").Value;
			СтрокаДоб.id_ul_post 	= Rs.Fields("id_ul_post").Value;
			СтрокаДоб.дата 			= Rs.Fields("дата").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТаблицаСДанными.Сортировать("дата");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	СтруктурныеЕдиницы.id_TT
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение.ИД КАК ИД,
	|	ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	|	ЗначенияСвойствОбъектов.Объект.Владелец КАК Номнеклатура
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабТовары 			= Результаты[0].Выгрузить();
	ТабТТ 				= Результаты[1].Выгрузить();
	ТабХарактеристики 	= Результаты[2].Выгрузить();
	
	ПредДата = Неопределено;
	Набор = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	Для Каждого СтрокаТаб Из ТаблицаСДанными Цикл
		Если ПредДата <> СтрокаТаб.дата Тогда
			Если ПредДата <> Неопределено Тогда
				Набор.Записать();
			КонецЕсли;	
			Набор = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(НачалоДня(СтрокаТаб.дата));
		КонецЕсли;	
		СтрокаТовар = ТабТовары.Найти(СтрокаТаб.id_tov, "id_tov");
		Если СтрокаТовар = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТТ = ТабТТ.Найти(СтрокаТаб.id_TT, "id_TT");
		Если СтрокаТТ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокиХар = ТабХарактеристики.НайтиСтроки(Новый Структура("Номнеклатура, ИД", СтрокаТовар.Ссылка, СтрокаТаб.id_ul_post));
		Движение = Набор.Добавить();
		Движение.Период 		= СтрокаТаб.дата;
		Движение.ТорговаяТочка 	= СтрокаТТ.Ссылка;
		Движение.Номенклатура 	= СтрокаТовар.Ссылка;
		Движение.Характеристика = ?(СтрокиХар.Количество() = 0, Неопределено, СтрокиХар[0].Характеристика);
		ПредДата = СтрокаТаб.дата;
	КонецЦикла;
	
	Если ПредДата <> Неопределено Тогда
		Набор.Записать();
		
		ДопМодульСервер.УстановитьВыведенаТоварныйАссортимент();
	КонецЕсли;
	
	//СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	//
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	//ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	//ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	//
	//Запрос = Новый Запрос();
	//Запрос.Текст ="ВЫБРАТЬ
	//			  |	Срез.id_tov КАК id_tov,
	//			  |	Срез.id_TT КАК id_TT,
	//			  |	Данные.cena КАК cena,
	//			  |	Данные.id_kontr КАК id_kontr,
	//			  |	Данные.id_ul_post,
	//			  |	Данные.nova_kontr,
	//			  |	Срез.дата
	//			  |ИЗ
	//			  |	(ВЫБРАТЬ
	//			  |		МАКСИМУМ(ДанныеAccess.date_pr) КАК дата,
	//			  |		ДанныеAccess.id_tov КАК id_tov,
	//			  |		ДанныеAccess.id_TT КАК id_TT
	//			  |	ИЗ
	//			  |		(ВЫБРАТЬ
	//			  |			Price.date_pr КАК date_pr,
	//			  |			Price.id_tov КАК id_tov,
	//			  |			Price.cena КАК cena,
	//			  |			Price.id_TT КАК id_TT,
	//			  |			Price.id_kontr КАК id_kontr,
	//			  |			Kontr.nova_kontr КАК nova_kontr,
	//			  |			Kontr.ИНН КАК ИНН
	//			  |		ИЗ
	//			  |			ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	//			  |				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	//			  |				ПО Price.id_kontr = Kontr.id_kontr
	//			  |		ГДЕ
	//			  |			Price.date_pr <= &ДатаКон
	//			  |			И (Price.type = ""продажа""
	//			  |					ИЛИ Price.type = ""Продажа"")) КАК ДанныеAccess
	//			  |	
	//			  |	СГРУППИРОВАТЬ ПО
	//			  |		ДанныеAccess.id_tov,
	//			  |		ДанныеAccess.id_TT) КАК Срез
	//			  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			  |			ДанныеAccess.date_pr КАК дата,
	//			  |			ДанныеAccess.id_tov КАК id_tov,
	//			  |			ДанныеAccess.id_TT КАК id_TT,
	//			  |			ДанныеAccess.cena КАК cena,
	//			  |			ДанныеAccess.id_kontr КАК id_kontr,
	//			  |			ДанныеAccess.id_ul_post КАК id_ul_post,
	//			  |			ДанныеAccess.nova_kontr КАК nova_kontr
	//			  |		ИЗ
	//			  |			(ВЫБРАТЬ
	//			  |				Price.date_pr КАК date_pr,
	//			  |				Price.id_tov КАК id_tov,
	//			  |				Price.cena КАК cena,
	//			  |				Price.id_TT КАК id_TT,
	//			  |				Price.id_kontr КАК id_kontr,
	//			  |				Kontr.nova_kontr КАК nova_kontr,
	//			  |				Kontr.ИНН КАК ИНН,
	//			  |				Kontr.id_ul_post КАК id_ul_post
	//			  |			ИЗ
	//			  |				ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	//			  |					ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	//			  |					ПО Price.id_kontr = Kontr.id_kontr
	//			  |			ГДЕ
	//			  |				Price.date_pr <= &ДатаКон
	//			  |				И (Price.type = ""продажа""
	//			  |						ИЛИ Price.type = ""Продажа"")) КАК ДанныеAccess) КАК Данные
	//			  |		ПО Срез.дата = Данные.дата
	//			  |			И Срез.id_tov = Данные.id_tov
	//			  |			И Срез.id_TT = Данные.id_TT";
	//			   
	//Запрос.УстановитьПараметр("ДатаНач", НачалоГода(ДатаОбработки));
	//Запрос.УстановитьПараметр("ДатаКон", КонецГода(ДатаОбработки));
	//
	//Выборка=Запрос.Выполнить().Выбрать();
	//набор=регистрысведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	//набор.Прочитать();
	//набор.Очистить();
	//Пока выборка.Следующий() Цикл
	//	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", выборка.id_tov);
	////	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
	////		Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
	////	КонецЕсли;
	//	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Точка=Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT",выборка.id_TT);
	//	Если НЕ ЗначениеЗаполнено(Точка) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", Выборка.id_ul_post,, Номенклатура);
	//	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
	//		//Продолжить;
	//	КонецЕсли;

	//	//Если выборка.cena<>0 или ЗначениеЗаполнено(Характеристика) Тогда
	//	Если выборка.cena<>0 Тогда
	//		НЗ=набор.Добавить();
	//		НЗ.Период=Выборка.Дата;
	//		НЗ.Активность=истина;
	//		НЗ.Выведена=?(выборка.cena=0,истина,ложь);
	//		НЗ.Номенклатура=Номенклатура;
	//		НЗ.ТорговаяТочка=Точка;
	//		НЗ.Характеристика=Характеристика;
	//	КонецЕсли;	
	//	
	//	
	//КонецЦикла;
	//набор.Записать();
	//	
	//
	//ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();

	
	
				 
				 
КонецПроцедуры	

Процедура ЗагрузитьДанныеОМаржинальностиТорговыхТочек(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	FP.id_tt,
	               |	FP.year КАК year,
	               |	FP.month КАК month,
	               |	МАКСИМУМ(FP.Plan_BU) КАК Plan_BU,
	               |	МАКСИМУМ(FP._Marge) КАК _Marge
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.FP КАК FP
	               |ГДЕ
	               |	FP.year = ГОД(&ДатаОбработки)
	               |	И FP.month = МЕСЯЦ(&ДатаОбработки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	FP.id_tt,
	               |	FP.year,
	               |	FP.month
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	year,
	               |	month";
				   
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	Выборка = Запрос.Выполнить().Выбрать();
				   
	Пока Выборка.СледующийПоЗначениюПоля("year") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("month") Цикл
			НаборЗаписей = РегистрыСведений.МаржинальностьТорговыхТочек.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Дата(Выборка.year, Выборка.month, 1));
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Период = Дата(Выборка.year, Выборка.month, 1);
				ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_TT);
				Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
					ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
				КонецЕсли;
				Запись.ТорговаяТочка = ТорговаяТочка;
				Запись.ТочкаБезубыточностиДневная = Выборка.Plan_BU;
				Запись.ПроцентМаржинальности = Выборка._Marge;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;	
	КонецЦикла;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОбОбученииПродавцов(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	learn_prod.id_prod,
	               |	learn_prod.id_learn,
	               |	learn_prod.date_learn,
	               |	learn.learn_desc,
	               |	Prodavci._C8_code
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.learn_prod КАК learn_prod
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.learn КАК learn
	               |		ПО learn_prod.id_learn = learn.id_learn
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Prodavci КАК Prodavci
	               |		ПО learn_prod.id_prod = Prodavci.id_prod
				   |ГДЕ
				   |	learn_prod.date_learn Между &ДатаОбработкиНач И &ДатаОбработкиКон";
				   
	Запрос.УстановитьПараметр("ДатаОбработкиНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаОбработкиКон", КонецДня(ДатаОбработки));
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПройденныеПрограммыОбученияПродавцов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаОбучения.Установить(ДатаОбработки);
	Пока Выборка.Следующий() Цикл
		ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(Прав("0000000000" + Формат(Выборка._C8_code, "ЧГ=0"), 10));
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			Продолжить;
		КонецЕсли;	
		Запись = НаборЗаписей.Добавить();
		Запись.Продавец = ФизЛицо;
		ПрограммаОбучения = Справочники.ПрограммыОбученияПродавцов.НайтиПоКоду(Выборка.id_learn);
		Если НЕ ЗначениеЗаполнено(ПрограммаОбучения)
			И ЗначениеЗаполнено(Выборка.id_learn) Тогда
			ПрограммаОбучения = СоздатьПрограммуОбучения(Выборка.id_learn, Выборка.learn_desc);
		КонецЕсли;	
		Запись.ПрограммаОбучения = ПрограммаОбучения;
		Запись.ДатаОбучения = Выборка.date_learn;
	КонецЦикла;	
	НаборЗаписей.Записать();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПотерянныхПродажах(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение_4");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижения_4.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижения_4.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Lost_sales.date,
	|	Lost_sales.id_TT,
	|	Lost_sales.id_tov,
	|	Lost_sales.Сумма,
	|	Lost_sales.Колво,
	|	Lost_sales.Вес,
	|	Lost_sales.Type_LS,
	|	Lost_sales.time_LS,
	|	Lost_sales.частота_norm,
	|	Lost_sales.Тип
	|ИЗ
	|	ВнешнийИсточникДанных.ДанныеТовародвижения_4.Таблица.Lost_sales КАК Lost_sales
	|ГДЕ
	|	Lost_sales.date МЕЖДУ &ДатаНач И &ДатаКон";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПотерянныеПродажиПоТочкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(ДатаОбработки);
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Дата = Выборка.date;
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Выборка.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
		КонецЕсли;
		Запись.ТорговаяТочка = ТорговаяТочка;
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.id_tov);
		КонецЕсли;
		Запись.Номенклатура = Номенклатура;
		Если Найти(Выборка.Тип, "6") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение6;
		ИначеЕсли Найти(Выборка.Тип, "5") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение5;
		ИначеЕсли Найти(Выборка.Тип, "4") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение4;
		ИначеЕсли Найти(Выборка.Тип, "3") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение3;
		ИначеЕсли Найти(Выборка.Тип, "2") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение2;
		ИначеЕсли Найти(Выборка.Тип, "1") Тогда
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение1;	
		Иначе
			Запись.ТипПотери = Перечисления.ТипыПотерь.Значение1;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Type_LS) Тогда
			ПричинаПотери = Справочники.ПричиныПотерь.НайтиПоНаименованию(Выборка.Type_LS);
			Если Не ЗначениеЗаполнено(ПричинаПотери) Тогда
				ПричинаПотери = СоздатьПричинуПотери(Выборка.Type_LS);
			КонецЕсли;
			Запись.ПричинаПотери = ПричинаПотери;
		КонецЕсли;	
		Запись.Количество = Выборка.Колво;
		//Запись.Вес = Выборка.Вес;
		Запись.Сумма = Выборка.Сумма;
		//Запись.ВремяНачала = Выборка.time_LS;
		//Запись.Частота = Выборка.частота_norm;
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижения_4.РазорватьСоединение();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОЦенахПродаж(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Price.date_pr,
	               |	Price.id_tov,
	               |	Price.cena,
	               |	Price.id_TT,
	               |	Price.id_kontr,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |		ПО Price.id_kontr = Kontr.id_kontr
	               |ГДЕ
	               |	Price.date_pr МЕЖДУ &ДатаНач И &ДатаКон
	               |	И (Price.type = ""продажа""
	               |			ИЛИ Price.type = ""Продажа"")
	               |	И Price.cena <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УстановкаТиповЦенНоменклатуры.Ссылка
	               |ИЗ
	               |	Документ.УстановкаТиповЦенНоменклатуры КАК УстановкаТиповЦенНоменклатуры
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(УстановкаТиповЦенНоменклатуры.Дата, ДЕНЬ) = &ДатаНач
	               |	И УстановкаТиповЦенНоменклатуры.ЗагруженИзАксесс = ИСТИНА
	               |	И УстановкаТиповЦенНоменклатуры.ПометкаУдаления = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результаты[0].Выгрузить();
	
	ДокУстановкиЦен = Неопределено;
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДокУстановкиЦен = Выборка.Ссылка;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДокУстановкиЦен) Тогда
		ДокОбъект = Документы.УстановкаТиповЦенНоменклатуры.СоздатьДокумент();
		ДокОбъект.Дата = НачалоДня(ДатаОбработки);
		ДокОбъект.ЗагруженИзАксесс = Истина;
	Иначе
		ДокОбъект = ДокУстановкиЦен.ПолучитьОбъект();
	КонецЕсли;	
	ДокОбъект.ТипыЦен.Очистить();
	ДокОбъект.Товары.Очистить();
	
	ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокаТаб = ДокОбъект.ТипыЦен.Добавить();
	СтрокаТаб.ТипЦен = ТипЦен;
	
	Для Каждого СтрокаТовар Из ТаблицаТоваров Цикл
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаТовар.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТорговаяТочка = СоздатьИзменитьТорговуюТочку(СтрокаТовар.id_TT);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			Продолжить;
		КонецЕсли;	
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТовар.id_tov);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(СтрокаТовар.id_tov);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаДок = ДокОбъект.Товары.Добавить();
		СтрокаДок.ТипЦен = ТипЦен;
		СтрокаДок.ТорговаяТочка = ТорговаяТочка;
		СтрокаДок.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтрокаТовар.id_kontr)
			И ЗначениеЗаполнено(Номенклатура) Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", СтрокаТовар.id_kontr,, Номенклатура);
			Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаТовар.id_kontr, Номенклатура, СтрокаТовар.nova_kontr, СтрокаТовар.ИНН);
			КонецЕсли;
			СтрокаДок.Характеристика = Характеристика;
		КонецЕсли;
		СтрокаДок.Цена = СтрокаТовар.cena;
		СтрокаДок.Валюта = Валюта;
	КонецЦикла;	
	
	Если ДокОбъект.ЭтоНовый() И ДокОбъект.Товары.Количество() = 0 Тогда
	Иначе	
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
	ТаблицаОбработанныеДокументы = Новый ТаблицаЗначений();
	ТаблицаОбработанныеДокументы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.УстановкаТиповЦенНоменклатуры"));
	
	Если НЕ ДокОбъект.ЭтоНовый() Тогда
		СтрокаТаб = ТаблицаОбработанныеДокументы.Добавить();
		СтрокаТаб.Ссылка = ДокОбъект.Ссылка;
	КонецЕсли;	
	
	//теперь пометим на удаление документы, которые не были обработаны при загрузке, но есть в выбранном периоде
	//значит эти документы следует пометить на удаление
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабОбработанные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОбработанные.Ссылка,
	               |	ВЗ_ДокументыЗаПериод.Ссылка КАК ДокументВБазе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		УстановкаТиповЦенНоменклатуры.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.УстановкаТиповЦенНоменклатуры КАК УстановкаТиповЦенНоменклатуры
	               |	ГДЕ
	               |		УстановкаТиповЦенНоменклатуры.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |		И УстановкаТиповЦенНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |		И УстановкаТиповЦенНоменклатуры.ЗагруженИзАксесс = ИСТИНА) КАК ВЗ_ДокументыЗаПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбработанные КАК ТабОбработанные
	               |		ПО ВЗ_ДокументыЗаПериод.Ссылка = ТабОбработанные.Ссылка
	               |ГДЕ
	               |	ТабОбработанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабОбработанные";
				   
	Запрос.УстановитьПараметр("Таб", ТаблицаОбработанныеДокументы);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументВБазе.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОНачальныхЦенахЗакупки(ДатаНачальная) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Kontr.id_kontr,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Kontr.Price_s_NDS,
	               |	Kontr.НДС,
	               |	Kontr.id_ul_post,
	               |	Kontr.id_kontr_postavka
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tovari.id_tov,
	               |	Tovari.type_tov
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tovari КАК Tovari
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныПоставщиковСрезПоследних.Номенклатура,
	               |	ЦеныПоставщиковСрезПоследних.ЕдиницаИзмерения,
	               |	ЦеныПоставщиковСрезПоследних.Поставщик,
	               |	ЦеныПоставщиковСрезПоследних.Характеристика,
	               |	ЦеныПоставщиковСрезПоследних.Цена,
	               |	ЦеныПоставщиковСрезПоследних.БезНДС,
	               |	ЦеныПоставщиковСрезПоследних.ЦенаБезНДС,
	               |	ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс,
	               |	ЦеныПоставщиковСрезПоследних.ОтклонениеМинус,
	               |	ЦеныПоставщиковСрезПоследних.Артикул,
	               |	ЦеныПоставщиковСрезПоследних.ЦенаПродажи,
	               |	ЦеныПоставщиковСрезПоследних.МинимальныйЗаказ,
	               |	ЦеныПоставщиковСрезПоследних.КоличествоВесТоварПлюс,
	               |	ЦеныПоставщиковСрезПоследних.Допуск
	               |ИЗ
	               |	РегистрСведений.ЦеныПоставщиков.СрезПоследних(ДОБАВИТЬКДАТЕ(&НачалоЗагрузок, ДЕНЬ, -1), ) КАК ЦеныПоставщиковСрезПоследних";
	Запрос.УстановитьПараметр("НачалоЗагрузок",ДатаНачальная);
	Результаты = Запрос.ВыполнитьПакет();			   
	Контрагенты = Результаты[0].Выгрузить();
	Товары = Результаты[1].Выгрузить();
	ТабТекСрез = Результаты[2].Выгрузить();
	ТабТекСрез.Индексы.Добавить("Номенклатура, ЕдиницаИзмерения, Поставщик, Характеристика");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Price.id_tov КАК id_tov,
	               |	Price.type КАК ТипЦены,
	               |	Price.cena КАК Цена,
	               |	Price.id_price КАК id_price,
	               |	ВложенныйЗапрос.date_pr,
	               |	ВложенныйЗапрос.id_kontr,
	               |	Price.dopusk
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Price.id_tov КАК id_tov,
	               |		МАКСИМУМ(Price.date_pr) КАК date_pr,
	               |		Price.type КАК type,
	               |		Price.id_kontr КАК id_kontr
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	               |	ГДЕ
	               |		Price.date_pr <= &НачалоЗагрузок
	               |		И (Price.type = &Тип
	               |				ИЛИ Price.type = &Тип1)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Price.id_tov,
	               |		Price.type,
	               |		Price.id_kontr) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	               |		ПО ВложенныйЗапрос.date_pr = Price.date_pr
	               |			И ВложенныйЗапрос.id_tov = Price.id_tov
	               |			И ВложенныйЗапрос.type = Price.type";
	Запрос.УстановитьПараметр("Тип","закупка");
	Запрос.УстановитьПараметр("Тип1","производство");
	Запрос.УстановитьПараметр("ТипТовара","производство");
	
	ТабЦены = Запрос.Выполнить().Выгрузить();
	ТабЦены.Колонки.Добавить("id_ul_post", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаЦена Из ТабЦены Цикл
		НужнаяСтрока = Контрагенты.Найти(СтрокаЦена.id_kontr,"id_kontr");
		Если НужнаяСтрока = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаЦена.id_kontr) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаЦена.id_kontr = НужнаяСтрока.id_kontr_postavka;
		СтрокаЦена.id_ul_post = НужнаяСтрока.id_ul_post;
	КонецЦикла;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЦены.id_tov,
	               |	ТабЦены.ТипЦены,
	               |	ТабЦены.Цена,
	               |	ТабЦены.id_price,
	               |	ТабЦены.id_kontr,
	               |	ТабЦены.id_ul_post,
	               |	ТабЦены.date_pr,
	               |	ТабЦены.dopusk
	               |ПОМЕСТИТЬ ВТ_ЦеныБезСвертки
	               |ИЗ
	               |	&ТабЦены КАК ТабЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЦеныБезСвертки.id_tov,
	               |	ВТ_ЦеныБезСвертки.ТипЦены,
	               |	ВТ_ЦеныБезСвертки.Цена,
	               |	ВТ_ЦеныБезСвертки.id_price,
	               |	ВТ_ЦеныБезСвертки.id_kontr,
	               |	ВТ_ЦеныБезСвертки.id_ul_post,
	               |	ВТ_ЦеныБезСвертки.date_pr,
	               |	ВТ_ЦеныБезСвертки.dopusk
	               |ПОМЕСТИТЬ ВТ_Цены
	               |ИЗ
	               |	ВТ_ЦеныБезСвертки КАК ВТ_ЦеныБезСвертки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ЦеныБезСвертки.id_tov КАК id_tov,
	               |			ВТ_ЦеныБезСвертки.ТипЦены КАК ТипЦены,
	               |			ВТ_ЦеныБезСвертки.id_kontr КАК id_kontr,
	               |			МАКСИМУМ(ВТ_ЦеныБезСвертки.date_pr) КАК date_pr
	               |		ИЗ
	               |			ВТ_ЦеныБезСвертки КАК ВТ_ЦеныБезСвертки
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ЦеныБезСвертки.id_tov,
	               |			ВТ_ЦеныБезСвертки.ТипЦены,
	               |			ВТ_ЦеныБезСвертки.id_kontr) КАК ВложенныйЗапрос
	               |		ПО ВТ_ЦеныБезСвертки.id_tov = ВложенныйЗапрос.id_tov
	               |			И ВТ_ЦеныБезСвертки.ТипЦены = ВложенныйЗапрос.ТипЦены
	               |			И ВТ_ЦеныБезСвертки.date_pr = ВложенныйЗапрос.date_pr
	               |			И ВТ_ЦеныБезСвертки.id_kontr = ВложенныйЗапрос.id_kontr
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tovari.id_tov,
	               |	Tovari.type_tov
	               |ПОМЕСТИТЬ ВТ_ТабТовары
	               |ИЗ
	               |	&ТабТовары КАК Tovari
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Цены.id_tov,
	               |	ВТ_Цены.date_pr,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ВТ_ТабТовары.type_tov = &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип1
	               |				ТОГДА ВТ_Цены.Цена
	               |			КОГДА ВТ_ТабТовары.type_tov <> &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип
	               |				ТОГДА ВТ_Цены.Цена
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Цена,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ВТ_ТабТовары.type_tov = &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип1
	               |				ТОГДА ВТ_Цены.dopusk
	               |			КОГДА ВТ_ТабТовары.type_tov <> &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип
	               |				ТОГДА ВТ_Цены.dopusk
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Допуск,
	               |	ВТ_Цены.id_kontr,
	               |	ВТ_Цены.id_ul_post
	               |ИЗ
	               |	ВТ_Цены КАК ВТ_Цены
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабТовары КАК ВТ_ТабТовары
	               |		ПО ВТ_Цены.id_tov = ВТ_ТабТовары.id_tov
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ВТ_ТабТовары.type_tov = &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип1
	               |				ТОГДА ИСТИНА
	               |			КОГДА ВТ_ТабТовары.type_tov <> &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Цены.date_pr,
	               |	ВТ_Цены.id_tov,
	               |	ВТ_Цены.id_kontr,
	               |	ВТ_Цены.id_ul_post";
	Запрос.УстановитьПараметр("ТабТовары", Товары);
	Запрос.УстановитьПараметр("ТабЦены", ТабЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.ЦеныПоставщиков.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ДатаНачальная);
	
	ТабКЗаписи = Набор.Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		Поставщик				= Справочники.Контрагенты.НайтиПоРеквизиту("ИД", Выборка.id_kontr);
		
		Если Поставщик.Пустая() Тогда
			Продолжить;
		КонецЕсли;	

		Номенклатура			= Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_tov);
		Если Номенклатура.Пустая() Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.id_tov);
		КонецЕсли;
		
		Если Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", Выборка.id_ul_post,, Номенклатура);
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			СтрокаЮЛ = Контрагенты.Найти(Выборка.id_ul_post,"id_kontr");
			Если СтрокаЮЛ <> Неопределено Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаЮЛ.id_kontr, Номенклатура, СтрокаЮЛ.nova_kontr, СтрокаЮЛ.ИНН);
			КонецЕсли;	
		КонецЕсли;
		
		БезНДС			= НЕ НужнаяСтрока.Price_s_NDS И НужнаяСтрока.НДС <> 0;
		СтавкаНДС = ?(Поставщик.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Поставщик.СтавкаНДС, Номенклатура.СтавкаНДС);
		
		СуммаНДС = Окр(УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС) * Выборка.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)),2);
		Если НужнаяСтрока.НДС = 0 Тогда
			ЦенаБезНДС		= Выборка.Цена;
		Иначе	
			ЦенаБезНДС		= Выборка.Цена-СуммаНДС;
		КонецЕсли;
		
		ТекЗначения = ТабТекСрез.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Поставщик, Характеристика", Номенклатура, Номенклатура.ЕдиницаХраненияОстатков, Поставщик, Характеристика));
		Если ТекЗначения.Количество() > 0 
			И ТекЗначения[0].Цена = Окр(Выборка.Цена, 5)
			И ТекЗначения[0].ЦенаБезНДС = Окр(ЦенаБезНДС, 5)
			И ТекЗначения[0].Допуск = Окр(Выборка.Допуск, 2)Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЕстьУже = ТабКЗаписи.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Поставщик, Характеристика", Номенклатура, Номенклатура.ЕдиницаХраненияОстатков, Поставщик, Характеристика));
		Если СтрокиЕстьУже.Количество() > 0 Тогда
			ЦеныПоставщиков 					= СтрокиЕстьУже[0];
		Иначе	
			ЦеныПоставщиков 					= ТабКЗаписи.Добавить();
		КонецЕсли;	
		ЦеныПоставщиков.Период				= ДатаНачальная;
		ЦеныПоставщиков.Номенклатура 		= Номенклатура;
		ЦеныПоставщиков.Характеристика		= Характеристика;
		ЦеныПоставщиков.ЕдиницаИзмерения	= Номенклатура.ЕдиницаХраненияОстатков;
		ЦеныПоставщиков.Поставщик			= Поставщик;
	
		//СтавкаНДС = ПолучитьСтавкуНДСНаДату(Номенклатура,НачалоЗагрузок);
		СтавкаНДС = Номенклатура.СтавкаНДС;
		ЦеныПоставщиков.БезНДС			= БезНДС;

		ЦеныПоставщиков.Цена			= Выборка.Цена;
		ЦеныПоставщиков.ЦенаБезНДС		= ЦенаБезНДС;
		ЦеныПоставщиков.Допуск			= Выборка.Допуск;
		//ЦеныПоставщиков.id_price		= Выборка.id_price;
	КонецЦикла;
	
	Набор.Загрузить(ТабКЗаписи);
	Набор.Записать();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОЦенахЗакупки(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Kontr.id_kontr,
	               |	Kontr.nova_kontr,
	               |	Kontr.ИНН,
	               |	Kontr.Price_s_NDS,
	               |	Kontr.НДС,
	               |	Kontr.id_ul_post,
	               |	Kontr.id_kontr_postavka
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tovari.id_tov,
	               |	Tovari.type_tov
	               |ИЗ
	               |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Tovari КАК Tovari";
	Результаты = Запрос.ВыполнитьПакет();			   
	Контрагенты = Результаты[0].Выгрузить();
	Товары = Результаты[1].Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Price.id_tov КАК id_tov,
	               |	Price.type КАК ТипЦены,
	               |	Price.cena КАК Цена,
	               |	Price.id_price КАК id_price,
	               |	Price.id_kontr КАК id_kontr,
	               |	ВложенныйЗапрос.date_pr,
	               |	Price.dopusk
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Price.id_tov КАК id_tov,
	               |		МАКСИМУМ(Price.date_pr) КАК date_pr,
	               |		Price.type КАК type,
	               |		Price.id_kontr КАК id_kontr
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	               |	ГДЕ
	               |		Price.date_pr = &ДатаОбработки
	               |		И (Price.type = &Тип
	               |				ИЛИ Price.type = &Тип1)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Price.id_tov,
	               |		Price.type,
	               |		Price.id_kontr) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Price КАК Price
	               |		ПО ВложенныйЗапрос.date_pr = Price.date_pr
	               |			И ВложенныйЗапрос.id_tov = Price.id_tov
	               |			И ВложенныйЗапрос.type = Price.type";
	Запрос.УстановитьПараметр("Тип","закупка");
	Запрос.УстановитьПараметр("Тип1","производство");
	Запрос.УстановитьПараметр("ТипТовара","производство");
	Запрос.УстановитьПараметр("ДатаОбработки",ДатаОбработки);
	
	ТабЦены = Запрос.Выполнить().Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЦены.id_tov,
	               |	ТабЦены.ТипЦены,
	               |	ТабЦены.Цена,
	               |	ТабЦены.id_price,
	               |	ТабЦены.id_kontr,
	               |	ТабЦены.date_pr,
				   |	ТабЦены.dopusk
	               |ПОМЕСТИТЬ ВТ_Цены
	               |ИЗ
	               |	&ТабЦены КАК ТабЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Tovari.id_tov,
	               |	Tovari.type_tov
	               |ПОМЕСТИТЬ ВТ_ТабТовары
	               |ИЗ
	               |	&ТабТовары КАК Tovari
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Цены.id_tov,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ВТ_ТабТовары.type_tov = &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип1
	               |				ТОГДА ВТ_Цены.Цена
	               |			КОГДА ВТ_ТабТовары.type_tov <> &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип
	               |				ТОГДА ВТ_Цены.Цена
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Цена,
				   |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ВТ_ТабТовары.type_tov = &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип1
	               |				ТОГДА ВТ_Цены.dopusk
	               |			КОГДА ВТ_ТабТовары.type_tov <> &ТипТовара
	               |					И ВТ_Цены.ТипЦены = &Тип
	               |				ТОГДА ВТ_Цены.dopusk
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Допуск,
	               |	ВТ_Цены.id_kontr
	               |ИЗ
	               |	ВТ_Цены КАК ВТ_Цены
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабТовары КАК ВТ_ТабТовары
	               |		ПО ВТ_Цены.id_tov = ВТ_ТабТовары.id_tov
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Цены.date_pr,
	               |	ВТ_Цены.id_tov,
	               |	ВТ_Цены.id_kontr";
	Запрос.УстановитьПараметр("ТабТовары", Товары);
	Запрос.УстановитьПараметр("ТабЦены", ТабЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.ЦеныПоставщиков.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ДатаОбработки);
	
	Пока Выборка.Следующий() Цикл
		НужнаяСтрока = Контрагенты.Найти(Выборка.id_kontr,"id_kontr");
		Если НужнаяСтрока = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(Выборка.id_kontr) Тогда
			Продолжить;
		КонецЕсли;	
		Поставщик				= Справочники.Контрагенты.НайтиПоРеквизиту("ИД", НужнаяСтрока.id_kontr_postavka);
		Если Поставщик.Пустая() Тогда
			СтрокаГлПоставщик = Контрагенты.Найти(НужнаяСтрока.id_kontr_postavka,"id_kontr");
			Если СтрокаГлПоставщик <> Неопределено Тогда
				Поставщик = СоздатьИзменитьПоставщика(СтрокаГлПоставщик.ИНН, СтрокаГлПоставщик.id_kontr);
			КонецЕсли;	
		КонецЕсли;
		Если Поставщик.Пустая() Тогда
			Продолжить;
		КонецЕсли;	

		Номенклатура			= Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", Выборка.id_tov);
		Если Номенклатура.Пустая() Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.id_tov);
		КонецЕсли;
		
		Если Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("ИД", НужнаяСтрока.id_ul_post,, Номенклатура);
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			СтрокаЮЛ = Контрагенты.Найти(НужнаяСтрока.id_ul_post,"id_kontr");
			Если СтрокаЮЛ <> Неопределено Тогда
				Характеристика = СоздатьХарактеристикуПоставщик(СтрокаЮЛ.id_kontr, Номенклатура, СтрокаЮЛ.nova_kontr, СтрокаЮЛ.ИНН);
			КонецЕсли;	
		КонецЕсли;
		
		ЦеныПоставщиков 					= Набор.Добавить();
		ЦеныПоставщиков.Период				= ДатаОбработки;
		ЦеныПоставщиков.Номенклатура 		= Номенклатура;
		ЦеныПоставщиков.Характеристика		= Характеристика;
		ЦеныПоставщиков.ЕдиницаИзмерения	= Номенклатура.ЕдиницаХраненияОстатков;
		ЦеныПоставщиков.Поставщик			= Поставщик;
	
		//СтавкаНДС = ПолучитьСтавкуНДСНаДату(Номенклатура,НачалоЗагрузок);
		СтавкаНДС = Номенклатура.СтавкаНДС;
		ЦеныПоставщиков.БезНДС			= НЕ НужнаяСтрока.Price_s_NDS И НужнаяСтрока.НДС <> 0;

		СуммаНДС = Окр(УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС) * Выборка.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)),2);

		ЦеныПоставщиков.Цена			= Выборка.Цена;
		Если НужнаяСтрока.НДС = 0 Тогда
			ЦеныПоставщиков.ЦенаБезНДС		= Выборка.Цена;
		Иначе	
			ЦеныПоставщиков.ЦенаБезНДС		= Выборка.Цена-СуммаНДС;
		КонецЕсли;
		ЦеныПоставщиков.Допуск 			= Выборка.Допуск;
	КонецЦикла;
	
	ВнешниеИсточникиДанных.ДанныеТовародвижение.РазорватьСоединение();
	Набор.Записать();
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеОПланахПродаж(ДатаОбработки) Экспорт
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение_2");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеДатДнямНедели.НомерНедели
	               |ИЗ
	               |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	               |ГДЕ
	               |	СоответствиеДатДнямНедели.Дата = &ДатаОбработки";
				   
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	НомерНедели = -1;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерНедели = Выборка.НомерНедели;
	КонецЕсли;	
	
	Набор = РегистрыСведений.ПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
	Набор.Отбор.Дата.Установить(ДатаОбработки);
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьСоединение();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЗ_Шапка.id_tt,
	               |	ВЗ_Шапка.nedely,
	               |	ВЗ_Товары.it_tov,
	               |	ВЗ_Товары.День1,
	               |	ВЗ_Товары.День2,
	               |	ВЗ_Товары.День3,
	               |	ВЗ_Товары.День4,
	               |	ВЗ_Товары.День5,
	               |	ВЗ_Товары.День6,
	               |	ВЗ_Товары.День7,
	               |	ВЗ_Товары.Price_RD
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Plan_prodaz.id_tt КАК id_tt,
	               |		Plan_prodaz.id_plan КАК id_plan,
	               |		Plan_prodaz.nedely КАК nedely
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz КАК Plan_prodaz
	               |	ГДЕ
	               |		Plan_prodaz.nedely = &НомерНедели
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Plan_prodaz_arc.id_tt,
	               |		Plan_prodaz_arc.id_plan,
	               |		Plan_prodaz_arc.nedely
	               |	ИЗ
	               |		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz_arc КАК Plan_prodaz_arc
	               |	ГДЕ
	               |		Plan_prodaz_arc.nedely = &НомерНедели) КАК ВЗ_Шапка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Str_Plan_prodaz.id_plan КАК id_plan,
	               |			Str_Plan_prodaz.it_tov КАК it_tov,
	               |			Str_Plan_prodaz.День1 КАК День1,
	               |			Str_Plan_prodaz.День2 КАК День2,
	               |			Str_Plan_prodaz.День3 КАК День3,
	               |			Str_Plan_prodaz.День4 КАК День4,
	               |			Str_Plan_prodaz.День5 КАК День5,
	               |			Str_Plan_prodaz.День6 КАК День6,
	               |			Str_Plan_prodaz.День7 КАК День7,
	               |			Str_Plan_prodaz.Price_RD КАК Price_RD
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Str_Plan_prodaz КАК Str_Plan_prodaz
	               |		ГДЕ
	               |			Str_Plan_prodaz.id_plan В
	               |					(ВЫБРАТЬ
	               |						Plan_prodaz.id_plan КАК id_plan
	               |					ИЗ
	               |						ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz КАК Plan_prodaz
	               |					ГДЕ
	               |						Plan_prodaz.nedely = &НомерНедели)
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			Str_Plan_prodaz_arc.id_plan,
	               |			Str_Plan_prodaz_arc.it_tov,
	               |			Str_Plan_prodaz_arc.День1,
	               |			Str_Plan_prodaz_arc.День2,
	               |			Str_Plan_prodaz_arc.День3,
	               |			Str_Plan_prodaz_arc.День4,
	               |			Str_Plan_prodaz_arc.День5,
	               |			Str_Plan_prodaz_arc.День6,
	               |			Str_Plan_prodaz_arc.День7,
	               |			Str_Plan_prodaz_arc.Price_RD
	               |		ИЗ
	               |			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Str_Plan_prodaz_arc КАК Str_Plan_prodaz_arc
	               |		ГДЕ
	               |			Str_Plan_prodaz_arc.id_plan В
	               |					(ВЫБРАТЬ
	               |						Plan_prodaz_arc.id_plan
	               |					ИЗ
	               |						ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz_arc КАК Plan_prodaz_arc
	               |					ГДЕ
	               |						Plan_prodaz_arc.nedely = &НомерНедели)) КАК ВЗ_Товары
	               |		ПО ВЗ_Шапка.id_plan = ВЗ_Товары.id_plan";
				   
	Запрос.УстановитьПараметр("НомерНедели", НомерНедели);
	
	ТабДанные = Запрос.Выполнить().Выгрузить();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.РазорватьСоединение();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.id_tt,
	               |	Таб.it_tov,
	               |	Таб.День1,
	               |	Таб.День2,
	               |	Таб.День3,
	               |	Таб.День4,
	               |	Таб.День5,
	               |	Таб.День6,
	               |	Таб.День7,
	               |	Таб.Price_RD
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.id_tt,
	               |	ВТ_Данные.it_tov,
	               |	ВТ_Данные.День1,
	               |	ВТ_Данные.День2,
	               |	ВТ_Данные.День3,
	               |	ВТ_Данные.День4,
	               |	ВТ_Данные.День5,
	               |	ВТ_Данные.День6,
	               |	ВТ_Данные.День7,
	               |	ВТ_Данные.Price_RD,
	               |	ВЗ_СтруктурныеЕдиницы.Ссылка КАК ТТ,
	               |	ВЗ_Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	               |			СтруктурныеЕдиницы.id_TT КАК id_TT
	               |		ИЗ
	               |			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтруктурныеЕдиницы.id_TT) КАК ВЗ_СтруктурныеЕдиницы
	               |		ПО ВТ_Данные.id_tt = ВЗ_СтруктурныеЕдиницы.id_TT
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
	               |			Номенклатура.id_tov КАК id_tov
	               |		ИЗ
	               |			Справочник.Номенклатура КАК Номенклатура
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Номенклатура.id_tov) КАК ВЗ_Номенклатура
	               |		ПО ВТ_Данные.it_tov = ВЗ_Номенклатура.id_tov
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Запрос.УстановитьПараметр("Таб", ТабДанные);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерДня = (ДатаОбработки - НачалоНедели(ДатаОбработки))/86400 + 1;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.id_tt) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.it_tov) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.ТТ) Тогда
			ТТ = СоздатьИзменитьТорговуюТочку(Выборка.id_tt);
		Иначе
			ТТ = Выборка.ТТ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Номенклатура = СоздатьИзменитьНоменклатуру(Выборка.it_tov);
		Иначе
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;	
		Движение = Набор.Добавить();
		Движение.Дата = ДатаОбработки;
		Движение.ТорговаяТочка = ТТ;
		Движение.Номенклатура = Номенклатура;
		Движение.Количество = Выборка["День" + НомерДня];
		Движение.Цена = Выборка.Price_RD;
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры



Процедура ЗагрузитьНачальныеДанныеОПорядкеОбеспеченияТорговыхТочек(ДатаНачальная) Экспорт
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_tt");
	ТабДанные.Колонки.Добавить("id_sklad");
	ТабДанные.Колонки.Добавить("id_group");
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("m2");
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT
				   |	VZ_Zapros.id_tt,
				   |	TT_sklad.id_sklad,
				   |	GrTovari.id_group
				   |FROM
				   |	(SELECT
				   |		TT_sklad.id_tt as id_tt,
				   |		MAX(TT_sklad.date) as date,
				   |		TT_sklad.id_group as id_group
				   |	FROM
				   |		M2.dbo.TT_sklad as TT_sklad (nolock)
				   |	WHERE
				   |		TT_sklad.[date] < '" + Формат(КонецДня(ДатаНачальная), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				   |	
				   |	GROUP BY
				   |		TT_sklad.id_tt,
				   |		TT_sklad.id_group) as VZ_Zapros
				   |		INNER JOIN M2.dbo.TT_sklad as TT_sklad (nolock)
				   |		ON VZ_Zapros.[date] = TT_sklad.[date]
				   |			and VZ_Zapros.id_tt = TT_sklad.id_tt
				   |			and VZ_Zapros.id_group = TT_sklad.id_group
				   |	INNER JOIN M2.dbo.[Group tovari] as GrTovari (nolock)
				   |		ON VZ_Zapros.id_group = GrTovari.id_par_group";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
			СтрокаДоб.id_group = Rs.Fields("id_group").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТабСклад = Новый ТаблицаЗначений();
	ТабСклад.Колонки.Добавить("id_TT");
	ТабСклад.Колонки.Добавить("id_sklad");
	
	СтрЗапрос = "SELECT     tt.id_TT, tt_1.id_TT AS id_sklad
				|FROM         M2.dbo.tt as tt (nolock) INNER JOIN
				|					  M2.dbo.tt as tt_1 (nolock) ON tt.adress = tt_1.adress and tt_1.[Plan] = 10
				|WHERE tt.type_tt = 'склад'";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабСклад.Добавить();
			СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик,
	               |	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Склад
	               |ИЗ
	               |	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(ДОБАВИТЬКДАТЕ(&ДатаНачальная, ДЕНЬ, -1), ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
				   
	Запрос.УстановитьПараметр("ДатаНачальная", НачалоДня(ДатаНачальная));
	Результаты = Запрос.ВыполнитьПакет();
	ТабТекСрез = Результаты[0].Выгрузить();
	ТабТекСрез.Индексы.Добавить("ТорговаяТочка, ГруппаНоменклатуры");
	
	НаборЗаписей = РегистрыСведений.ПорядокОбеспеченияТорговыхТочек.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаНачальная);
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаДанные.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			Продолжить;
			//ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
		КонецЕсли;
		
		СтрокаТабСклад = ТабСклад.Найти(СтрокаДанные.id_sklad,"id_TT");
		Если СтрокаТабСклад = Неопределено Тогда
			//id_sklad = Выборка.id_sklad;
			//Продолжить;
			id_sklad = 0;
		Иначе
			id_sklad = СтрокаТабСклад.id_sklad;
		КонецЕсли;
		
		//Расчетчик = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", id_sklad);
		
		//Если Расчетчик.Пустая() Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", СтрокаДанные.id_sklad);
		Если Склад.Пустая() Тогда
			Если ЗначениеЗаполнено(id_sklad) Тогда
				Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", id_sklad);
			КонецЕсли;	
		КонецЕсли;
		
		Если Склад.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаДанные.id_group);
		
		ТекЗначения = ТабТекСрез.НайтиСтроки(Новый Структура("ТорговаяТочка, ГруппаНоменклатуры", ТорговаяТочка, ГруппаНоменклатуры));
		Если ТекЗначения.Количество() > 0 
			И ТекЗначения[0].Расчетчик = Склад.Владелец
			И ТекЗначения[0].Склад = Склад Тогда
			Продолжить;
		КонецЕсли;	
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ДатаНачальная;
		Запись.ТорговаяТочка = ТорговаяТочка;
		Запись.ГруппаНоменклатуры = ГруппаНоменклатуры;
		//Запись.Расчетчик = Расчетчик;
		Запись.Расчетчик = Склад.Владелец;
		Запись.Склад = Склад;
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОПорядкеОбеспеченияТорговыхТочек(ДатаОбработки) Экспорт
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_tt");
	ТабДанные.Колонки.Добавить("id_sklad");
	ТабДанные.Колонки.Добавить("date");
	ТабДанные.Колонки.Добавить("id_group");
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("m2");
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT
			  |	TT_sklad.id_tt,
	          |	TT_sklad.id_sklad,
	          |	TT_sklad.date,
	          |	GrTovari.id_group
			  |	
			  |FROM [M2].[dbo].[TT_sklad] as TT_sklad (nolock)
			  |	INNER JOIN M2.dbo.[Group tovari] as GrTovari (nolock)
			  |		ON TT_sklad.id_group = GrTovari.id_par_group
			  |where TT_sklad.date >= '" + Формат(НачалоДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and TT_sklad.date <= '" + Формат(КонецДня(ДатаОбработки), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
			СтрокаДоб.date = Rs.Fields("date").Value;
			СтрокаДоб.id_group = Rs.Fields("id_group").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТабСклад = Новый ТаблицаЗначений();
	ТабСклад.Колонки.Добавить("id_TT");
	ТабСклад.Колонки.Добавить("id_sklad");
	
	СтрЗапрос = "SELECT     tt.id_TT, tt_1.id_TT AS id_sklad
				|FROM         M2.dbo.tt as tt (nolock) INNER JOIN
				|					  M2.dbo.tt as tt_1 (nolock) ON tt.adress = tt_1.adress and tt_1.[Plan] = 10
				|WHERE tt.type_tt = 'склад'";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабСклад.Добавить();
			СтрокаДоб.id_tt = Rs.Fields("id_tt").Value;
			СтрокаДоб.id_sklad = Rs.Fields("id_sklad").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	НаборЗаписей = РегистрыСведений.ПорядокОбеспеченияТорговыхТочек.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаОбработки);
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		
		ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", СтрокаДанные.id_TT);
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			Продолжить;
			//ТорговаяТочка = СоздатьИзменитьТорговуюТочку(Выборка.id_TT);
		КонецЕсли;
		
		СтрокаТабСклад = ТабСклад.Найти(СтрокаДанные.id_sklad,"id_TT");
		Если СтрокаТабСклад = Неопределено Тогда
			//id_sklad = Выборка.id_sklad;
			//Продолжить;
			id_sklad = 0;
		Иначе
			id_sklad = СтрокаТабСклад.id_sklad;
		КонецЕсли;
		
		//Расчетчик = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", id_sklad);
		
		//Если Расчетчик.Пустая() Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", СтрокаДанные.id_sklad);
		Если Склад.Пустая() Тогда
			Если ЗначениеЗаполнено(id_sklad) Тогда
				Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", id_sklad);
			КонецЕсли;	
		КонецЕсли;	
		
		Если Склад.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = СтрокаДанные.date;
		Запись.ТорговаяТочка = ТорговаяТочка;
		Запись.ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоРеквизиту("id_group", СтрокаДанные.id_group);
		Запись.Расчетчик = Склад.Владелец;
		//Запись.Расчетчик = Расчетчик;
		Запись.Склад = Склад;
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


Процедура ЗагрузитьДанныеПоРозничнымЦенам(НаДату) Экспорт
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT IDToUID.UID as UID, a.Price FROM (SELECT Price.id_tov,
				  |	MAX(Price.price) as Price,
				  |	MAX(Price.period) as Period
				  |FROM [Reports].[dbo].[Price_1C] as Price
				  |where Price.period <= '" + Формат(НачалоДня(НаДату), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				  |GROUP BY Price.id_tov) as a
				  |INNER JOIN [IzbenkaFin].[dbo].[ArticleBin2UID] as IDToUID
				  |ON a.id_tov = IDToUID.id_tov";
	
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДанными = Новый ТаблицаЗначений();
	ТаблицаСДанными.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСДанными.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID").Value, 2, 36)));
			Если Найти(Товар, "<Объект не найден>") = 0 Тогда
				СтрокаДоб = ТаблицаСДанными.Добавить();
				СтрокаДоб.Товар = Товар;
				СтрокаДоб.Цена = Rs.Fields("Price").Value;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТипЦенПродаж = Справочники.ТипыЦен.ОсновнойТипЦенПродаж;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТаблицаСДанными);
	Запрос.УстановитьПараметр("ДатаОбработки", НаДату);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦенПродаж);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Товар КАК Товар,
	               |	Таб.Цена
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Товар,
	               |	ВТ_Данные.Цена,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаВРегистре
	               |ПОМЕСТИТЬ ВТ_НоменклатурыКИзменению
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ДатаОбработки,
	               |				ТипЦен = &ТипЦен
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка)
	               |					И Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_Данные.Товар
	               |						ИЗ
	               |							ВТ_Данные КАК ВТ_Данные)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ВТ_Данные.Товар = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	ВТ_Данные.Цена <> ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатурыКИзменению.Товар,
	               |	ВТ_НоменклатурыКИзменению.Цена,
	               |	ВТ_НоменклатурыКИзменению.ЦенаВРегистре
	               |ИЗ
	               |	ВТ_НоменклатурыКИзменению КАК ВТ_НоменклатурыКИзменению
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УстановкаТиповЦенНоменклатурыТовары.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.УстановкаТиповЦенНоменклатуры.Товары КАК УстановкаТиповЦенНоменклатурыТовары
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(УстановкаТиповЦенНоменклатурыТовары.Ссылка.Дата, ДЕНЬ) = &ДатаОбработки
	               |	И УстановкаТиповЦенНоменклатурыТовары.Ссылка.Проведен = ИСТИНА
	               |	И УстановкаТиповЦенНоменклатурыТовары.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |	И УстановкаТиповЦенНоменклатурыТовары.ТипЦен = &ТипЦен
	               |	И УстановкаТиповЦенНоменклатурыТовары.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ВТ_НоменклатурыКИзменению.Товар
	               |			ИЗ
	               |				ВТ_НоменклатурыКИзменению КАК ВТ_НоменклатурыКИзменению)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатурыКИзменению";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаДоки = Результаты[3].Выбрать();
	ТабНоменклатураКИзменению = Результаты[2].Выгрузить();
	Пока ВыборкаДоки.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокОбъект = ВыборкаДоки.Ссылка.ПолучитьОбъект();
		КолвоСтрок = ДокОбъект.Товары.Количество();
		Для н = 1 По КолвоСтрок Цикл
			СтрокаТовар = ДокОбъект.Товары[КолвоСтрок - н];
			СтрокаКЗамене = ТабНоменклатураКИзменению.Найти(СтрокаТовар.Номенклатура, "Товар");
			Если СтрокаКЗамене = Неопределено
				ИЛИ СтрокаТовар.ТипЦен <> ТипЦенПродаж Тогда
				Продолжить;
			КонецЕсли;	
			ДокОбъект.Товары.Удалить(СтрокаТовар);
		КонецЦикла;	
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	Если ТабНоменклатураКИзменению.Количество() > 0 Тогда
		ДокОбъект = Документы.УстановкаТиповЦенНоменклатуры.СоздатьДокумент();
		ДокОбъект.Дата = НачалоДня(НаДату);
		ДокОбъект.ЗагруженИзАксесс = Истина;
		
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		СтрокаТаб = ДокОбъект.ТипыЦен.Добавить();
		СтрокаТаб.ТипЦен = ТипЦенПродаж;
		
		Для Каждого СтрокаТовар Из ТабНоменклатураКИзменению Цикл
			СтрокаДок = ДокОбъект.Товары.Добавить();
			СтрокаДок.ТипЦен = ТипЦенПродаж;
			СтрокаДок.Номенклатура = СтрокаТовар.Товар;
			СтрокаДок.Цена = СтрокаТовар.Цена;
			СтрокаДок.Валюта = Валюта;
		КонецЦикла;	
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗагрузитьПоставщиковОрганизаций(УстановитьЗаписиНаДату = Неопределено) Экспорт
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT  master.dbo.Binary2UID(Kontr_Izb._IDRRef) as UIDKontr,
				 |	 master.dbo.Binary2UID(Org._IDRRef) as UIDOrg, Kontr.id_ul_2
				 |FROM [M2].[dbo].[kontr] as Kontr
				 |INNER JOIN IzbenkaFin.dbo._Reference27 as Kontr_Izb (nolock)
				 |ON Kontr.id_kontr = Kontr_Izb._Fld1159
				 |LEFT OUTER JOIN IzbenkaFin.dbo._Reference31 as Org (nolock)
				 |ON Kontr.id_ul_2 = Org._Fld1157
				 |WHERE isnull(Kontr.id_ul_2, -1)  > -1";
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДанными = Новый ТаблицаЗначений();
	ТаблицаСДанными.Колонки.Добавить("Контрагент"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСДанными.Колонки.Добавить("Организация"	, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ЛДПОрг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаСДанными.Добавить();
			СтрокаДоб.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UIDKontr").Value, 2, 36)));
			Если Rs.Fields("id_ul_2").Value > 0 Тогда
				СтрокаДоб.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UIDOrg").Value, 2, 36)));
			ИначеЕсли Rs.Fields("id_ul_2").Value = 0 Тогда
				СтрокаДоб.Организация = ЛДПОрг;
			КонецЕсли;	
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТаблицаСДанными);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Контрагент,
	               |	Таб.Организация
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Контрагент,
	               |	ВТ_Данные.Организация
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиОрганизаций.СрезПоследних КАК ПоставщикиОрганизацийСрезПоследних
	               |		ПО ВТ_Данные.Контрагент = ПоставщикиОрганизацийСрезПоследних.Производитель
	               |ГДЕ
	               |	ВТ_Данные.Организация <> ЕСТЬNULL(ПоставщикиОрганизацийСрезПоследних.Организация, НЕОПРЕДЕЛЕНО)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПоставщикиОрганизаций.СоздатьМенеджерЗаписи();
		Запись.Период = ?(УстановитьЗаписиНаДату = Неопределено, ТекущаяДата(), УстановитьЗаписиНаДату);
		Запись.Производитель = Выборка.Контрагент;
		Запись.Организация = Выборка.Организация;
		Запись.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

//+++АК SHEP 20170714 ИП-00016216
Процедура НеобходимКурьерТТ_ОтправитьОтчётПоЭлектронке(СтруктураДанные, СтруктураСинонимы, СКД)
Перем Магазин;
Перем КомпоновщикМакета, КомпоновщикНастроек, ВыбранныйВариант;
	
	Магазин = СтруктураДанные.СтруктурнаяЕдиница;
	
	// список адресатов
	МассивАдресовДляОтправки = РегистрыСведений.АК_ГруппыРассылки.ПолучитьМассивЭлАдресовПоГруппеРассылки(Справочники.АК_ГруппыРассылки.НеобходимКурьерТТ);
	АдресЭлектроннойПочтыМагазина = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин, "АдресЭлектроннойПочты");
	Если ЗначениеЗаполнено(АдресЭлектроннойПочтыМагазина) Тогда
		МассивАдресовДляОтправки.Добавить(АдресЭлектроннойПочтыМагазина);
	КонецЕсли;
	// если список адресатов пустой, значит, отправлять некому
	Если МассивАдресовДляОтправки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ВыбранныйВариант = СКД.ВариантыНастроек.Найти("РассылкаУведомлений");
	Если ВыбранныйВариант = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(ВыбранныйВариант.Настройки);
	КонецЕсли;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	НашаСтруктураКомпоновщика = НастройкиКомпоновщика.Структура[0];
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРесурсов", РасположениеРесурсовКомпоновкиДанных.Горизонтально);
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.ПослеВсехПолей);
	НашаСтруктураКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// параметры данных
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДобавитьМесяц(ТекущаяДата(), -6)));
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ТекущаяДата()));
	
	// отбор
	ЭлементыОтбора = НастройкиКомпоновщика.Отбор.Элементы; //НашаСтруктураКомпоновщика.Отбор.Элементы;
	
	// отборы
	ТипОбращенияВключение = Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("201");
	Если НЕ ЗначениеЗаполнено(ТипОбращенияВключение) Тогда
		ТипОбращенияВключение = Справочники.ТипыОбращенийПокупателей.НайтиПоНаименованию("01 Включение");
		Если НЕ ЗначениеЗаполнено(ТипОбращенияВключение) Тогда
			Сообщить("Не найден тип обращения ""Включение""");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтруктураОтбора = Новый Структура("Номенклатура,Производитель");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтруктураДанные);
	СтруктураОтбора.Вставить("ТипОбращения", ТипОбращенияВключение);
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = КлючИЗначение.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,, Истина);
	
	// подготовим таблицу и процессор вывода результата СКД в таблицу
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	ПроцессорВыводаВТЗ.УстановитьОбъект(ТаблицаРезультатов);	
	ТаблицаРезультатов = ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураПолей = Новый Структура;
	Для Каждого КолонкаДЗ Из ТаблицаРезультатов.Колонки Цикл СтруктураПолей.Вставить(КолонкаДЗ.Имя, КолонкаДЗ.Заголовок); КонецЦикла;
	
	ТекстХТМЛ = "<HTML>
		|<HEAD>
		|<META HTTP-EQUIV='Content-Type' CONTENT='text/html; CHARSET=utf-8'>
		|<TITLE></TITLE></HEAD><BODY>
		|";
		
	// данные
	СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПолучитьХарактеристикуПоПроизводителю(СтруктураДанные.Номенклатура, СтруктураДанные.Производитель));
	ТекстХТМЛ = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаЗаголовок(СтруктураСинонимы);
	ТекстХТМЛ = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаТело(СтруктураДанные);
	
	ТекстХТМЛ = ТекстХТМЛ + "<br><h2>Статистика по продукту за последние 6 месяцев</h2>";
	ТекстХТМЛ = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаЗаголовок(СтруктураПолей);
	ТелоПисьма = ТекстХТМЛ + СтроковыеФункцииКлиентСервер.ТекстХТМЛ_ТаблицаТело(СтруктураПолей, ТаблицаРезультатов);
	
	ТелоПисьма = ТелоПисьма + "</BODY></HTML>";
	
	Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение("Необходим курьер ТТ " + Магазин, ТелоПисьма, МассивАдресовДляОтправки, "Необходим курьер ТТ");
	
КонецПроцедуры
//---АК SHEP 20170714
