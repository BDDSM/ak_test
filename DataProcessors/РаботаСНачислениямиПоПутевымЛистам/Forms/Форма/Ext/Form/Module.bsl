
Процедура УстановитьОтборПоДатеНачала()
	
	ЭтаФорма.Водители.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.ДатаНачала);
	ЭтаФорма.НесформированныеАкты.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.ДатаНачала);
	ЭтаФорма.СформированныеАкты.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.ДатаНачала);
	
КонецПроцедуры

Процедура УстановитьОтборПоДатеОкончания()
	
	ЭтаФорма.Водители.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	ЭтаФорма.НесформированныеАкты.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	ЭтаФорма.СформированныеАкты.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
КонецПроцедуры

Процедура УстановитьОтборПоВодителям(мВодитель)
	
	ЭтаФорма.НесформированныеАкты.Параметры.УстановитьЗначениеПараметра("ПоВсемВодителям"	, ?(мВодитель = Неопределено, 1, 0));
	ЭтаФорма.НесформированныеАкты.Параметры.УстановитьЗначениеПараметра("Водитель"			, мВодитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноУстановитьДатуКакДатуРасхода(ДатаВыполняемойПроверки)
	
	Если ДеньНедели(ДатаВыполняемойПроверки) = 2
			ИЛИ ДеньНедели(ДатаВыполняемойПроверки) = 4 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(ДатаВыполняемойПроверки));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = &ДатаКалендаря
		|	И РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
					   
		Результат = Запрос.Выполнить();
		Возврат НЕ Результат.Пустой();
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьДатуРасхода(мНеПроверять = Ложь)
	
	ТекДатаРасхода = ТекущаяДата();
	
	Если Час(ТекДатаРасхода) > 11 Тогда                                                                
		ДатаНоваяРасчитанная = ТекДатаРасхода + 86400;
		Если НЕ мНеПроверять Тогда
			Пока ДатаНоваяРасчитанная <= ТекДатаРасхода + 86400 * 60 Цикл
				Если МожноУстановитьДатуКакДатуРасхода(ДатаНоваяРасчитанная) Тогда
					Прервать;
				КонецЕсли;	
				ДатаНоваяРасчитанная = ДатаНоваяРасчитанная + 86400;
			КонецЦикла;	
		КонецЕсли;
		
		ТекДатаРасхода = ДатаНоваяРасчитанная;
	КонецЕсли;
	
	Возврат ТекДатаРасхода;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаНачала 		= ТекущаяДата();
	Объект.ДатаОкончания	= ТекущаяДата();
	УстановитьОтборПоДатеНачала();
	УстановитьОтборПоДатеОкончания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоВодителям(?(Элементы.Водители.ТекущиеДанные = Неопределено, Неопределено, Элементы.Водители.ТекущиеДанные.Водитель));
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	УстановитьОтборПоДатеНачала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	УстановитьОтборПоДатеОкончания();
	
КонецПроцедуры


// Водители
&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Ключ = Новый Структура("Ключ", Элементы.Водители.ДанныеСтроки(ВыбраннаяСтрока).Водитель);
	ФормаЭлемента = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаЭлементаУправляемая", Ключ);    
	ФормаЭлемента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Водители.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборПоВодителям(ТекДанные.Водитель);
	Иначе
		УстановитьОтборПоВодителям(Неопределено);
	КонецЕсли;
	
КонецПроцедуры


// Несформированные акты
&НаСервереБезКонтекста
Процедура СформироватьПоступленияСервер(мДатаНачала, мДатаОкончания, мДатаВходящихДокументов, мВодитель)
	
	мУслуга = Константы.УслугаНачислениеПоПутевомуЛисту.Получить();
	Если НЕ ЗначениеЗаполнено(мУслуга) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, мДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(мДатаОкончания));
	Запрос.УстановитьПараметр("ПоВсемВодителям"	, ?(мВодитель = Неопределено, 1, 0));
	Запрос.УстановитьПараметр("Водитель"		, мВодитель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	//|	ДокПутевойЛист.Дата КАК Дата,
	|	ДокПутевойЛист.Ссылка КАК ПутевойЛист,
	|	ДокПутевойЛист.Организация КАК Организация,
	|	ДокПутевойЛист.ФизЛицо КАК Водитель,
	|	ДокПутевойЛист.ФизЛицо.Контрагент КАК Контрагент,
	|	ДокПутевойЛист.ФизЛицо.Контрагент.СтавкаНДС КАК СтавкаНДС,
	|	ДокПутевойЛист.ФизЛицо.Контрагент.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ДокПутевойЛист.ФизЛицо.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокПутевойЛист.ФизЛицо.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ЕСТЬNULL(ТЧПоказания.Сумма, 0) * 100 / 87 КАК Сумма,
	|	ЕСТЬNULL(ТЧПоказания.Сумма, 0) * 13 / 87 КАК СуммаНДФЛ
	|ИЗ
	|	Документ.ПутевойЛист КАК ДокПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПутевойЛистПоказания.Ссылка КАК Ссылка,
	|			СУММА(ПутевойЛистПоказания.КилометражМаршрута) * 5 КАК Сумма
	|		ИЗ
	|			Документ.ПутевойЛист.Показания КАК ПутевойЛистПоказания
	|		ГДЕ
	|			ПутевойЛистПоказания.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПутевойЛистПоказания.Ссылка) КАК ТЧПоказания
	|		ПО (ТЧПоказания.Ссылка = ДокПутевойЛист.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.ДокументОснование = ДокПутевойЛист.Ссылка)
	|			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	|ГДЕ
	|	ДокПутевойЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеТоваровУслуг.ДокументОснование ЕСТЬ NULL 
	|	И НЕ ДокПутевойЛист.ПометкаУдаления
	|	И (&ПоВсемВодителям = 1
	|			ИЛИ ДокПутевойЛист.ФизЛицо = &Водитель)";
	
	//
	ДокиПоступление 	= Документы.ПоступлениеТоваровУслуг;
	мПокупка 			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
	ТекОтветственный 	= ПараметрыСеанса.ТекущийПользователь;
	мФинансовый 		= ПланыСчетов.Финансовый;
	Счет761				= мФинансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Счет442				= мФинансовый.ЗатратыОбщиеДляРаспределения;
	Счет4401БУ 			= ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	СтрЕдиницаВсе		= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	СтатьяДР_Ком		= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("36198"); 	// Командировочные расходы, ГСМ по Управлению Качества
	ЦФО_УпрКачества		= Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление качества");   // Управление качества
	СтатьяДРБУ_Ком		= Справочники.СтатьиЗатратБУ.НайтиПоКоду("000000010"); 		// Командировочные расходы
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Для водителя " + Выборка.Водитель + " не указан контрагент!";
			СообщениеПользователю.Сообщить();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Для водителя " + Выборка.Водитель + " не указан договор контрагента!";
			СообщениеПользователю.Сообщить();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Выборка.СтатьяДДС) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Для контрагента " + Выборка.Контрагент + " не указана статья ДДС!";
			СообщениеПользователю.Сообщить();
			Продолжить;
		КонецЕсли; 
		
		//
		ДокПоступления = ДокиПоступление.СоздатьДокумент();
		ДокПоступления.Дата					= ТекущаяДата();//Выборка.Дата;
		ДокПоступления.ВидОперации 			= мПокупка;
		ДокПоступления.Ответственный		= ТекОтветственный;
		ДокПоступления.Организация 			= Выборка.Организация;
		ДокПоступления.ДокументОснование 	= Выборка.ПутевойЛист;
		ДокПоступления.Контрагент 			= Выборка.Контрагент;
		ДокПоступления.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
		ДокПоступления.СтатьяДДС 			= Выборка.СтатьяДДС;
		ДокПоступления.СтруктурнаяЕдиница	= ЦФО_УпрКачества;
		ДокПоступления.ПроизвестиУплатуНДФЛ = Истина;
		ДокПоступления.СуммаНДФЛ			= Окр(Выборка.СуммаНДФЛ);
		ДокПоступления.СуммаДокумента		= Окр(Выборка.Сумма);
		
		ДокПоступления.СчетУчетаРасчетовСКонтрагентом = Счет761;
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Выборка.СтатьяДДС);
		//Если МассивСчетов.Количество() = 1 Тогда
		//	ДокПоступления.СчетУчетаРасчетовСКонтрагентом = мФинансовый.НайтиПоКоду(МассивСчетов[0]);
		//Иначе
		//	ДокПоступления.СчетУчетаРасчетовСКонтрагентом = Счет761;//Счет603;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента)
		//		И ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКонтрагентом) Тогда
		//	ДокПоступления.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовСКонтрагентом;
		//КонецЕсли;	
		
		ДокПоступления.ДатаВходящегоДокумента 	= мДатаВходящихДокументов;
		ДокПоступления.НомерВходящегоДокумента 	= "б/н";
		
		СтрокаТЧ = ДокПоступления.Услуги.Добавить();
		СтрокаТЧ.Номенклатура 	= мУслуга;
		СтрокаТЧ.Количество		= 1;
		СтрокаТЧ.Цена			= Окр(Выборка.Сумма);
		СтрокаТЧ.Сумма			= Окр(Выборка.Сумма);
		СтрокаТЧ.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		СтрокаТЧ.СуммаНДС		= 0;
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТЧ, ДокПоступления);
		СтрокаТЧ.СчетЗатрат		= Счет442;
		СтрокаТЧ.Субконто1		= СтрЕдиницаВсе;
		СтрокаТЧ.Субконто2		= СтатьяДР_Ком;
		СтрокаТЧ.Субконто3		= ЦФО_УпрКачества;
		СтрокаТЧ.СчетЗатратБУ 	= Счет4401БУ;
		СтрокаТЧ.СубконтоБУ1	= СтатьяДРБУ_Ком;
		СтрокаТЧ.СчетЗатратНУ 	= Счет4401БУ;
		СтрокаТЧ.СубконтоНУ1	= СтатьяДРБУ_Ком;
		
		Попытка
			ДокПоступления.Записать();
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Создан документ " + ДокПоступления;
			СообщениеПользователю.Сообщить();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не удалось записать документ поступления!" + Символы.ПС + ИнформацияОбОшибке().Описание;
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПоступления(Команда)
	
	ТекДанные = Элементы.Водители.ТекущиеДанные;
	ТекВодитель = ?(НЕ ТекДанные = Неопределено, ТекДанные.Водитель, Неопределено);
	//
	СформироватьПоступленияСервер(Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ДатаВходящихДокументов, ТекВодитель);
	
	//
	Элементы.НесформированныеАкты.Обновить();
	Элементы.СформированныеАкты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НесформированныеАктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// колонка "ПЛ"
	Если Поле.Имя = "НесформированныеАктыПутевойЛист" Тогда
		
		Ключ = Новый Структура("Ключ", Элементы.НесформированныеАкты.ДанныеСтроки(ВыбраннаяСтрока).ПутевойЛист);
		ФормаЭлемента = ПолучитьФорму("Документ.ПутевойЛист.Форма.ФормаДокумента", Ключ);    
		ФормаЭлемента.Открыть();
		
	КонецЕсли;	
	
КонецПроцедуры


// Сформированные акты
&НаСервереБезКонтекста
Процедура СформироватьЗаявкиСервер(мДатаНачала, мДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, мДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(мДатаОкончания));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументОснование,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию КАК НазначениеПлатежа,
	|	ПоступлениеТоваровУслуг.СтатьяДДС.НеПроверятьДатуРасходаВЗаявкеНаРасходование КАК НеПроверятьДатуРасходаВЗаявкеНаРасходование,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеТоваровУслуг.СуммаНДФЛ КАК СуммаНДФЛ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПутевойЛист КАК ПутевойЛист
	|		ПО (ПутевойЛист.Ссылка = ПоступлениеТоваровУслуг.ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|		ПО (ЗаявкаНаРасходованиеСредств.ДокументОснование = ПоступлениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	ПутевойЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И ЗаявкаНаРасходованиеСредств.Ссылка ЕСТЬ NULL ";
	
	//
	ДокиЗаявки 			= Документы.ЗаявкаНаРасходованиеСредств;
	ТекОтветственный 	= ПараметрыСеанса.ТекущийПользователь;
	мСписокВыбора 		= ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ТекущаяДата(), ТекОтветственный);
	ТекЦФО				= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	Если мСписокВыбора.Количество() = 1 Тогда
		ТекЦФО 			= мСписокВыбора[0].Значение;
	КонецЕсли;
	мНеАкцептована 		= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокЗаявки = ДокиЗаявки.СоздатьДокумент();
		
		ДокЗаявки.Заполнить(Выборка.ДокументОснование);

		ДокЗаявки.Дата				= ТекущаяДата();
		ДокЗаявки.Статус 			= мНеАкцептована;
		ДокЗаявки.ДатаРасхода 		= ПолучитьДатуРасхода(Выборка.НеПроверятьДатуРасходаВЗаявкеНаРасходование);
		ДокЗаявки.НазначениеПлатежа = Выборка.НазначениеПлатежа;//"Оплата по " + Выборка.НомерДоговора + " от " + Формат(Выборка.ДатаДоговора, "ДФ=dd.MM.yyyy");
		ДокЗаявки.Пояснение			= СокрЛП(ДокЗаявки.НазначениеПлатежа) + ?(ДокЗаявки.ТорговыеТочки.Количество() > 0,
											" (" + СтрЗаменить(Формат(ДокЗаявки.ТорговыеТочки[0].Период, "ДФ = ММММ_гггг"), "_", " ") + ")", "");
		
		ДокЗаявки.Ответственный		= ТекОтветственный;
		Если НЕ ЗначениеЗаполнено(ДокЗаявки.ЦФО) Тогда
			ДокЗаявки.ЦФО			= ТекЦФО;
		КонецЕсли;
		ДокЗаявки.СуммаДокумента	= Выборка.СуммаДокумента;
		ДокЗаявки.СуммаНДФЛ			= Выборка.СуммаНДФЛ;
		
		Для Каждого СтрокаТЧ Из ДокЗаявки.ТорговыеТочки Цикл
			СтрокаТЧ.Статус	= мНеАкцептована;
		КонецЦикла;
		
		Попытка
			ДокЗаявки.Записать();
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Создан документ " + ДокЗаявки;
			СообщениеПользователю.Сообщить();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = Строка(Выборка.ДокументОснование) + ": " + Символы.ПС + "Не удалось записать документ заявки!" + Символы.ПС + ИнформацияОбОшибке().Описание;
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	
	СформироватьЗаявкиСервер(Объект.ДатаНачала, Объект.ДатаОкончания);
	
	Элементы.СформированныеАкты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СформированныеАктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекДанные = Элементы.СформированныеАкты.ДанныеСтроки(ВыбраннаяСтрока);
	
	// колонка "ПЛ"
	Если НЕ Поле.Имя = "СформированныеАктыЗаявка" Тогда
		
		Ключ = Новый Структура("Ключ", ТекДанные.Ссылка);
		ФормаЭлемента = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента", Ключ);    
		ФормаЭлемента.Открыть();
		
	Иначе	
		
		Если ЗначениеЗаполнено(ТекДанные.Заявка) Тогда
			//Ключ = Новый Структура("Ключ", ТекДанные.Заявка);
			//ФормаЭлемента = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента", Ключ);    
			//ФормаЭлемента = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента", Ключ);    
			//ФормаЭлемента.Открыть();
			ОткрытьЗначение(ТекДанные.Заявка);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
//+++АК пмм 15.05.17
&НаКлиенте
Процедура СформироватьЗаявкиНаУслуги(Команда)
	СформироватьЗаявкиНаУслугиСервер(Объект.ДатаНачала, Объект.ДатаОкончания);
	
	Элементы.СформированныеАкты.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаявкиНаУслугиСервер(мДатаНачала, мДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, мДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(мДатаОкончания));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументОснование,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию КАК НазначениеПлатежа,
	|	ПоступлениеТоваровУслуг.СтатьяДДС.НеПроверятьДатуРасходаВЗаявкеНаРасходование КАК НеПроверятьДатуРасходаВЗаявкеНаРасходование,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеТоваровУслуг.СуммаНДФЛ КАК СуммаНДФЛ,
	|	ЗаявкаНаУслугиМатериалы.Ссылка КАК Заявка,
	|	ЗаявкаНаУслугиМатериалы1.Ссылка КАК ЗаявкаНаНДФЛ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПутевойЛист КАК ПутевойЛист
	|		ПО (ПутевойЛист.Ссылка = ПоступлениеТоваровУслуг.ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы1
	|			ПО ЗаявкаНаУслугиМатериалы.Ссылка = ЗаявкаНаУслугиМатериалы1.ДокументОснование
	|		ПО (ЗаявкаНаУслугиМатериалы.ДокументОснование = ПоступлениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	ПутевойЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И (ЗаявкаНаУслугиМатериалы.Ссылка ЕСТЬ NULL 
	|			ИЛИ ЗаявкаНаУслугиМатериалы.Проведен = ЛОЖЬ)";
	
	//
	ДокиЗаявки 			= Документы.ЗаявкаНаУслугиМатериалы;
	//ТекОтветственный 	= ПараметрыСеанса.ТекущийПользователь;
	//мСписокВыбора 		= ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ТекущаяДата(), ТекОтветственный);
	//ТекЦФО				= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	//Если мСписокВыбора.Количество() = 1 Тогда
	//	ТекЦФО 			= мСписокВыбора[0].Значение;
	//КонецЕсли;
	//	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Заявка) Тогда
			ДокЗаявки = Выборка.Заявка.ПолучитьОбъект();
		Иначе	
			ДокЗаявки = ДокиЗаявки.СоздатьДокумент();
		КонецЕсли;	
		
		ДокЗаявки.Заполнить(Выборка.ДокументОснование);
        		
		Попытка
			ДокЗаявки.Записать();
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Сформирован документ " + ДокЗаявки;
			СообщениеПользователю.Сообщить();
			Заявка = ДокЗаявки.Ссылка;
			ПТУ = Выборка.ДокументОснование.ПолучитьОбъект();
			ПТУ.Заявка = Заявка;
			ПТУ.Записать(РежимЗаписиДокумента.Запись);
			Если ЗначениеЗаполнено(Выборка.ЗаявкаНаНДФЛ) Тогда
				ДокЗаявки = Выборка.ЗаявкаНаНДФЛ.ПолучитьОбъект();
			Иначе	
				ДокЗаявки = ДокиЗаявки.СоздатьДокумент();
			КонецЕсли;
		    ДокЗаявки.Заполнить(Заявка);
			
			ДокЗаявки.Записать();
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Сформирован документ " + ДокЗаявки;
			СообщениеПользователю.Сообщить();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = Строка(Выборка.ДокументОснование) + ": " + Символы.ПС + "Не удалось записать документ заявки!" + Символы.ПС + ИнформацияОбОшибке().Описание;
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
		
	КонецЦикла;
	
КонецПроцедуры

//---АК пмм 15.05.17