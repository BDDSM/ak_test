
Перем ТЗОбщая;


&НаСервере
Процедура ОбновитьДеревоСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"			, ЭтаФорма.Склад);
	Запрос.УстановитьПараметр("ВладелецСклад"	, ЭтаФорма.Склад.Владелец);
	Запрос.УстановитьПараметр("ВсеСклады"		, НЕ ЗначениеЗаполнено(ЭтаФорма.Склад));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутыСклады.Ссылка
	|ПОМЕСТИТЬ Маршруты
	|ИЗ
	|	Справочник.Маршруты.Склады КАК МаршрутыСклады
	|ГДЕ
	|	(МаршрутыСклады.Склад = &Склад
	|				И МаршрутыСклады.Склад.Владелец = &ВладелецСклад
	|			ИЛИ &ВсеСклады)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК Точка,
	|	Маршруты.Ссылка КАК Маршрут,
	|	Маршруты.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Маршруты.Ссылка.Наименование КАК СсылкаНаименование
	|ИЗ
	|	Маршруты КАК Маршруты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			МаршрутыТорговыеТочки.Ссылка КАК Маршрут
	|		ИЗ
	|			Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	|		ГДЕ
	|			МаршрутыТорговыеТочки.СтруктурнаяЕдиница.Активное) КАК ВложенныйЗапрос
	|		ПО Маршруты.Ссылка = ВложенныйЗапрос.Маршрут
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	И НЕ СтруктурныеЕдиницы.Ссылка В
	|				(ВЫБРАТЬ
	|					МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК Ссылка
	|				ИЗ
	|					Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки)
	|	И СтруктурныеЕдиницы.Активное
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктурноеПодразделение,
	|	СсылкаНаименование
	|ИТОГИ ПО
	|	СтруктурноеПодразделение,
	|	Маршрут,
	|	Точка";
	ВыборкаЕдиниц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоОбъект = РеквизитФормыВЗначение("Дерево");
	ДеревоОбъект.Строки.Очистить();
	Пока ВыборкаЕдиниц.Следующий() Цикл
		
		СтрокаПодразделения = ДеревоОбъект.Строки.Добавить();
		Если НЕ ЗначениеЗаполнено(ВыборкаЕдиниц.СтруктурноеПодразделение) Тогда
			СтрокаПодразделения.Узел = "Не определено структ. подразделение";
		Иначе	
			СтрокаПодразделения.Узел = ВыборкаЕдиниц.СтруктурноеПодразделение;
		КонецЕсли;	
		СтрокаПодразделения.СтруктурнаяЕдиница = ВыборкаЕдиниц.СтруктурноеПодразделение;
		
		ВыборкаМаршрутов = ВыборкаЕдиниц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМаршрутов.Следующий() Цикл
			СтрокаМаршрута = СтрокаПодразделения.Строки.Добавить();
			Если НЕ ЗначениеЗаполнено(ВыборкаМаршрутов.Маршрут) Тогда
				СтрокаМаршрута.Узел = "Не определен маршрут";
			Иначе	
				СтрокаМаршрута.Узел 			= ВыборкаМаршрутов.Маршрут.Наименование;
				СтрокаМаршрута.ОписаниеМаршрута	= ВыборкаМаршрутов.Маршрут.ПредставлениеМаршрута;
			КонецЕсли;	
			СтрокаМаршрута.Маршрут				= ВыборкаМаршрутов.Маршрут;
			СтрокаМаршрута.СтруктурнаяЕдиница	= ВыборкаМаршрутов.СтруктурноеПодразделение;
			
			ВыборкаТочек = ВыборкаМаршрутов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			// Это в ТЗ
			Точки.Очистить();
			Пока ВыборкаТочек.Следующий() Цикл
				
				//НС=Точки.Добавить();
				//НС.точка=ВыборкаТочек.СтруктурноеПодразделение;
				//СтрокаТочки=СтрокаМаршрута.Строки.Добавить();
				//СтрокаТочки.Узел=ВыборкаТочек.Точка;
				//СтрокаТочки.Точка=ВыборкаТочек.Точка;
				//СтрокаТочки.Маршрут=ВыборкаТочек.Маршрут;
				//СтрокаТочки.СтруктурнаяЕдиница=ВыборкаТочек.СтруктурноеПодразделение;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");

КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ОбновитьДеревоСервер();
	РазвернутьДерево();
	
 //   //Элементы.Дерево.Развернуть(0, Истина);
 //   
 //   КоллекцияЭлементовДерева=Дерево.ПолучитьЭлементы();

 //////Свернуть дерево 
 ////Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
 ////	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
 ////	Элементы.ДеревоНоменклатуры.Свернуть(ИдентификаторСтроки);
 ////КонецЦикла;

 ////Развернуть дерево 
 //Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
 //   ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
 //   Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки);
 //КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	Коллекция = Дерево.ПолучитьЭлементы();
	Для каждого Эл Из Коллекция Цикл
		Элементы.Дерево.Развернуть(Эл.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьМаршрутыНаКорректностьПереноса(НовыйМаршрут, СтарыйМаршрут)
	
	Если ЗначениеЗаполнено(ЭтаФорма.Склад) Тогда
		//новыйМаршрут=Справочники.Маршруты.СоздатьЭлемент();
		
		Если НовыйМаршрут.Склады.Количество() > 0 Тогда
			нашли = НовыйМаршрут.Склады.Найти(ЭтаФорма.Склад, "Склад");
			Если нашли = Неопределено Тогда 
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтарыйМаршрут) Тогда
			Если СтарыйМаршрут.Склады.Количество() > 0 Тогда
				нашли = СтарыйМаршрут.Склады.Найти(ЭтаФорма.Склад, "Склад");
				Если нашли = Неопределено Тогда 
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если НовыйМаршрут.Склады.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(СтарыйМаршрут) Тогда
				Если СтарыйМаршрут.Склады.Количество() > 0 Тогда
					//поищем пересечение маршрутов
					для каждого стрС из СтарыйМаршрут.Склады Цикл
						для каждого стрН из НовыйМаршрут.Склады Цикл
							Если (СтрС.Склад = СтрН.Склад) Тогда //если склады совпадают
								Возврат Истина;
							КонецЕсли;	
						КонецЦикла;
					КонецЦикла;	
					Возврат Ложь; //пересечения не было
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

	Если Приемник = Неопределено Тогда
        // Добавляем в корень
		// в корень нельзя
		Возврат Неопределено;
        //НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
		
		Если ЗначениеЗаполнено(Приемник.Точка) Тогда // В точку точку нельзя перенести, но можно перенести её родителю
			Приемник = Приемник.ПолучитьРодителя();
		КонецЕсли;	
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	
    ПеренестиТочкуМеждуМаршрутами(Источник.Маршрут, НоваяСтрока.ПолучитьРодителя().Маршрут, НоваяСтрока.Точка);
	
КонецФункции

&НаСервере
Процедура ПеренестиТочкуМеждуМаршрутами(СтарыйМаршрут, НовыйМаршрут, Точка)
	
	Стоимость = Неопределено;
	Если ЗначениеЗаполнено(СтарыйМаршрут) Тогда
		СтарыйМ = СтарыйМаршрут.ПолучитьОбъект();
		нашли = СтарыйМ.ТорговыеТочки.Найти(Точка, "СтруктурнаяЕдиница");
		Если нашли <> Неопределено Тогда
			Стоимость = нашли.Стоимость;
			Старыйм.ТорговыеТочки.Удалить(нашли);
			СтарыйМ.Записать();
		КонецЕсли;
	КонецЕсли;	
	
	НовыйМ = НовыйМаршрут.ПолучитьОбъект();
	
	нашли = НовыйМ.ТорговыеТочки.Найти(Точка, "СтруктурнаяЕдиница");
	Если нашли = Неопределено Тогда
		НС = НовыйМ.ТорговыеТочки.Добавить();
		НС.СтруктурнаяЕдиница = Точка;
		Если Стоимость <> Неопределено Тогда
			НС.Стоимость = Стоимость;
		КонецЕсли;	
		НовыйМ.Записать();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверитьВозможностьПереноса(Точка, НовыйРодитель, СтарыйРодитель)

	Если НЕ ЗначениеЗаполнено(Точка) Тогда//Переносить можно только точки
		Возврат Ложь;
	КонецЕсли;	
	
	Если НовыйРодитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НовыйРодитель) Тогда//Переносить можно только если ясен маршрут.
		Возврат Ложь;
	КонецЕсли;	

	Если НовыйРодитель = СтарыйРодитель Тогда//Переносить можно только в другой маршрут.
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ПроверитьМаршрутыНаКорректностьПереноса(НовыйРодитель, СтарыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;	
	//Пока НЕ НовыйРодитель = Неопределено Цикл
	//	Если ПереносимыйЭлемент = НовыйРодитель Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//	НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	// КонецЦикла;

    Возврат Истина;

КонецФункции

&НаСервере
Функция ГдеТочкаСервер()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутыТорговыеТочки.Ссылка
	|ИЗ
	|	Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	|ГДЕ
	|	МаршрутыТорговыеТочки.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ТочкаДляПоиска);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	КонецЕсли;
	
	Возврат справочники.Маршруты.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура НайтиТочку(Команда)
	
	Маршрут = ГдеТочкаСервер();
	//Коллекция = Дерево.ПолучитьЭлементы();
	//Для каждого Эл Из Коллекция Цикл
	//	Элементы.Дерево.Развернуть(Эл.ПолучитьИдентификатор(),истина);
	//	Если Эл.Маршрут=Маршрут Тогда
	//		Элементы.Дерево.ТекущаяСтрока=Эл.ПолучитьИдентификатор();
	//	КонецЕсли;	
	//	//
	//КонецЦикла;
	//
	ИдентификаторСтроки = Неопределено;
	Если маршрут.пустая() Тогда
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("узел", ИдентификаторСтроки, Дерево.ПолучитьЭлементы(), "Не определен маршрут", Ложь);
	Иначе	
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("маршрут", ИдентификаторСтроки, Дерево.ПолучитьЭлементы(), маршрут, Ложь);
	КонецЕсли;	
	Элементы.Дерево.ТекущаяСтрока = ИдентификаторСтроки;
	ОтобратьПоТекущейСтрокеДерева(Неопределено);
	Для каждого стр из Точки Цикл
		Если Стр.Точка = ТочкаДляПоиска Тогда
			Элементы.Точки.ТекущаяСтрока = стр.ПолучитьИдентификатор();
			прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
    
    Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
        
        Если ПрекратитьПоиск Тогда
            Возврат;
        КонецЕсли;
        
        Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
            
            ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
            
            ПрекратитьПоиск = Истина;
            
            Возврат;
            
        КонецЕсли;
        
        КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
        
        Если КоллекцияЭлементов.Количество() > 0 Тогда
            
            ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция УдалитьСтрокуСервер(Точка, Маршрут)
	
	Если НЕ ЗначениеЗаполнено(Точка)
			ИЛИ НЕ ЗначениеЗаполнено(Маршрут) Тогда//Переносить можно только точки
		Возврат Ложь;
	Иначе
		СтарыйМ = Маршрут.ПолучитьОбъект();
		нашли = СтарыйМ.ТорговыеТочки.Найти(Точка, "СтруктурнаяЕдиница");
		Если нашли<>неопределено Тогда
			//Стоимость=нашли.Стоимость;
			Старыйм.ТорговыеТочки.Удалить(нашли);
			СтарыйМ.Записать();
			возврат истина;
		КонецЕсли;
        Возврат ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыбратьТочкиТекущейСтроки(маршрут)
	
	Если маршрут = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктурныеЕдиницы.Ссылка КАК Точка,
		|	&Маршрут КАК Маршрут
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|	И НЕ СтруктурныеЕдиницы.Ссылка В
		|				(ВЫБРАТЬ
		|					МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК Ссылка
		|				ИЗ
		|					Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки)
		|	И СтруктурныеЕдиницы.Активное
		//|	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(перечисление.типырозничныхточек.Избенка)
		|";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК Точка,
		|	&Маршрут КАК Маршрут
		|ИЗ
		|	(ВЫБРАТЬ
		|		МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|		МаршрутыТорговыеТочки.Ссылка КАК Маршрут
		|	ИЗ
		|		Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|	ГДЕ
		|		МаршрутыТорговыеТочки.СтруктурнаяЕдиница.Активное
		//|		И МаршрутыТорговыеТочки.СтруктурнаяЕдиница.ТипРозничнойТочки = ЗНАЧЕНИЕ(перечисление.типырозничныхточек.Избенка
		|) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Маршрут = &Маршрут
		|";		 
	КонецЕсли;	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("Маршрут", маршрут);
	выборка = запрос.Выполнить().Выгрузить();
	
	Точки.Очистить();
	Для каждого стр из выборка цикл
		НС = Точки.Добавить();
		НС.точка 	= Стр.точка;
		НС.Маршрут 	= Стр.Маршрут;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтобратьПоТекущейСтрокеДерева(Команда)
	
	Если Элементы.Дерево.ТекущиеДанные.Узел = "Не определен маршрут"
			ИЛИ Элементы.Дерево.ТекущиеДанные.Узел = "Не определен маршрут" Тогда
		ВыбратьТочкиТекущейСтроки(неопределено);
	Иначе	
		ВыбратьТочкиТекущейСтроки(Элементы.Дерево.ТекущиеДанные.Маршрут);
	КонецЕсли;	
	
	ТекущийМаршрут = Элементы.Дерево.ТекущиеДанные.Маршрут;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТочки(Команда)
	
	НовыйМаршрут=элементы.Дерево.ТекущиеДанные.Маршрут;
	
	Для каждого Стр Из Элементы.Точки.ВыделенныеСтроки Цикл
		Режим = РежимДиалогаВопрос.ДаНет;
		СтарыйМаршрут = Точки.НайтиПоИдентификатору(стр).маршрут;
		Если старыймаршрут = новыймаршрут тогда
			возврат;
		КонецЕсли;	
		Точка = Точки.НайтиПоИдентификатору(стр).Точка;
		Текст = "Переместить точку " + Точка + " из маршрута " + СтарыйМаршрут + " в машрут " + Новыймаршрут + " ?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Продолжить;
		КонецЕсли;
		Если элементы.Дерево.ТекущиеДанные.Узел = "Не определен маршрут" Тогда // просто удалить
			УдалитьСтрокуСервер(Точка, СтарыйМаршрут);
		Иначе
			Если ПроверитьВозможностьПереноса(Точка, НовыйМаршрут, СтарыйМаршрут) Тогда
				ПеренестиТочкуМеждуМаршрутами(СтарыйМаршрут, НовыйМаршрут, Точка);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	ВыбратьТочкиТекущейСтроки(?(ТекущийМаршрут.Пустая(), Неопределено, ТекущийМаршрут));

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьДеревоСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДерево();
	
КонецПроцедуры


&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	
	ОбновитьДерево(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Узел нельзя переносить в узлы, подчиненные ему самому,
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов

    СтандартнаяОбработка = Ложь;

    РеквизитДерево = ЭтаФорма["Дерево"];

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

    Для каждого ИДПереносимыйЭлемент Из МассивИДПереносимыхЭлементов Цикл

        ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ИДПереносимыйЭлемент);
        			
        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент.Точка, НовыйРодитель, ПереносимыйЭлемент.Маршрут) Тогда
            ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
            Прервать;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

    РеквизитДерево = ЭтаФорма["Дерево"];

    ИДПриемник = Строка;
    // Если ИДПриемник = Неопределено => Корень дерева
    Приемник = ?(ИДПриемник = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));
    
    МассивИДИсточник = ПараметрыПеретаскивания.Значение;

	Для Каждого ИДИсточник Из МассивИДИсточник Цикл
		
        Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
		Если Источник.маршрут = Приемник.маршрут Тогда
			возврат;
		КонецЕсли;	
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Переместить точку " + источник.Точка + " из маршрута " + источник.маршрут + " в машрут " + приемник.маршрут + " ?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Продолжить;
		КонецЕсли;
		
        НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);
        // Производится копирование в корень
        // Для "красоты" развернем вновь созданную ветвь
		//Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда      // в корень мы не копируем, да и всё равно обновляем форму
		//	Элементы["Дерево"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(),
		//		Истина);
		//КонецЕсли;
    КонецЦикла;
	
	ОбновитьДерево(Неопределено);
	
	// всё равно обновлять дерево
	
	//// Для "красоты" развернем ветвь-родителя
	//Если НЕ Приемник = Неопределено Тогда
	//	Элементы["Дерево"].Развернуть(ИДПриемник, Истина);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитДерево = ЭтаФорма["Дерево"];

    ИДПриемник = ВыбраннаяСтрока;
    // Если ИДПриемник = Неопределено => Корень дерева
    Элемент = ?(ИДПриемник = Неопределено, Неопределено,
        РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

	Если ЗначениеЗаполнено(Элемент.Точка) Тогда
		ОткрытьЗначение(Элемент.Точка);
	ИначеЕсли ЗначениеЗаполнено(Элемент.Маршрут)
			ИЛИ Элемент.Узел = "Не определен маршрут" Тогда
		//ОткрытьЗначение(Элемент.Маршрут);
		Если Поле.Имя = "ДеревоОписаниеМаршрута" Тогда
			ОткрытьЗначение(Элемент.Маршрут);
		Иначе	
			Если Элемент.Узел = "Не определен маршрут"
					ИЛИ Элемент.Узел = "Не определен маршрут"  Тогда
				ВыбратьТочкиТекущейСтроки(Неопределено);
			Иначе	
				ВыбратьТочкиТекущейСтроки(Элемент.Маршрут);
			КонецЕсли;	
			ТекущийМаршрут = Элемент.Маршрут;
			//ВыбратьТочкиТекущейСтроки(Элемент.Маршрут);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(Элемент.СтруктурнаяЕдиница) Тогда
		ОткрытьЗначение(Элемент.СтруктурнаяЕдиница);	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Точка)
			ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Маршрут) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	

	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Удалить точку "+Элемент.ТекущиеДанные.Точка+" из маршрута "+Элемент.ТекущиеДанные.Маршрут+" ?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Отказ=истина;
		Возврат;
	КонецЕсли;

	Если УдалитьСтрокуСервер(Элемент.ТекущиеДанные.Точка,Элемент.ТекущиеДанные.Маршрут) Тогда//Удалили успешно
		ОбновитьДерево(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПослеУдаления(Элемент)
		
КонецПроцедуры
