// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ПринятоКОплате", ПринятоКОплате);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДокументЗаявкаНаРасходованиеСредств.Ссылка КАК ЗаявкаНаРасходованиеСредств,
	               |	РасходИзКассы.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеСредств КАК ДокументЗаявкаНаРасходованиеСредств
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	               |		ПО (РасходИзКассы.ЗаявкаНаРасходованиеСредств = ДокументЗаявкаНаРасходованиеСредств.Ссылка)
	               |			И (НЕ РасходИзКассы.ПометкаУдаления)
	               |ГДЕ
	               |	ДокументЗаявкаНаРасходованиеСредств.Проведен
	               |	И ДокументЗаявкаНаРасходованиеСредств.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	               |	И ДокументЗаявкаНаРасходованиеСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеСредств.Акцептована)
	               |	И (ДокументЗаявкаНаРасходованиеСредств.ДатаРасхода >= &НачалоПериода
	               |			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	               |	И (ДокументЗаявкаНаРасходованиеСредств.ДатаРасхода <= &КонецПериода
	               |			ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
	               |	И (ДокументЗаявкаНаРасходованиеСредств.Организация = &Организация
	               |			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |	И ВЫБОР
	               |			КОГДА &ПринятоКОплате = ""Все""
	               |				ТОГДА 1
	               |			КОГДА &ПринятоКОплате = ""ТолькоПринятыеКОплате""
	               |					И ДокументЗаявкаНаРасходованиеСредств.ПринятоКОплате
	               |				ТОГДА 1
	               |			КОГДА &ПринятоКОплате = ""ТолькоНеПринятыеКОплате""
	               |					И НЕ ДокументЗаявкаНаРасходованиеСредств.ПринятоКОплате
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ = 1
	               |	И (ДокументЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств
	               |			ИЛИ &СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(справочник.СтатьиДвиженияДенежныхСредств.пустаяссылка))
				   |	И (ДокументЗаявкаНаРасходованиеСредств.БанковскийСчетКасса = &СтруктурнаяЕдиница
	               |			ИЛИ &СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.пустаяссылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументЗаявкаНаРасходованиеСредств.Организация,
	               |	ДокументЗаявкаНаРасходованиеСредств.Дата
	               |ИТОГИ ПО
	               |	ЗаявкаНаРасходованиеСредств";
	Заявки.Очистить();
	ПлатежныеДокументы.Очистить();
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявки.Следующий() Цикл
		НСтрока = Заявки.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, ВыборкаЗаявки.ЗаявкаНаРасходованиеСредств);
		НСтрока.ЗаявкаНаРасходованиеСредств = ВыборкаЗаявки.ЗаявкаНаРасходованиеСредств;
		НСтрока.Использование = Истина;
		Если ВыборкаЗаявки.ЗаявкаНаРасходованиеСредств.Контрагент = "Стороннее физическое лицо"
			И ЗначениеЗаполнено(ВыборкаЗаявки.ЗаявкаНаРасходованиеСредств.СчетНаОплатуИмяФайла) Тогда
			НСтрока.ПечататьВложение = Истина;
		КонецЕсли;	
		
		ВыборкаДокументы = ВыборкаЗаявки.Выбрать();
		спДокументы = Новый СписокЗначений;
		Пока ВыборкаДокументы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДокументы.Документ) Тогда
				НСтрока2 = ПлатежныеДокументы.Добавить();
				НСтрока2.ЗаявкаНаРасходованиеСредств = ВыборкаЗаявки.ЗаявкаНаРасходованиеСредств;
				НСтрока2.Документ = ВыборкаДокументы.Документ;
				спДокументы.Добавить(СокрЛП(ВыборкаДокументы.Документ.Номер) + " от " + Формат(ВыборкаДокументы.Документ.Дата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЦикла;
		
		НСтрока.Документы = СписокЗначенийВСтроку(спДокументы, "; ");
	КонецЦикла;
	ПересчитатьИтогиПоСтруктр();
	
	УстановитьОтборПоЗаявке();
КонецПроцедуры

Процедура ПересчитатьИтогиПоСтруктр()
	
	ИтогиПоСтруктурнымЕдиницам.Очистить();
	ИтогиКопия = ИтогиПоСтруктурнымЕдиницам.СкопироватьКолонки();
	
	Для Каждого Строка Из Заявки Цикл
		Если Строка.ПринятоКОплате Тогда
			СтрокаИтог = ИтогиКопия.Добавить();
			СтрокаИтог.СтруктурнаяЕдиница = Строка.ЗаявкаНаРасходованиеСредств.БанковскийСчетКасса;
			СтрокаИтог.Сумма = Строка.СуммаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	ИтогиКопия.Свернуть("СтруктурнаяЕдиница", "Сумма");
	ИтогиПоСтруктурнымЕдиницам = ИтогиКопия;
	
КонецПроцедуры	

Функция СписокЗначенийВСтроку(спЗначений, Разделитель) Экспорт
	СтрокаСписок = "";
	Для Каждого Строка Из спЗначений Цикл
		СтрокаСписок = СтрокаСписок + ?(СокрЛП(СтрокаСписок) <> "", Разделитель, "") + ?(СокрЛП(Строка.Значение) <> "", СокрЛП(Строка.Значение), "");
	КонецЦикла;
	
	Возврат СтрокаСписок;
КонецФункции

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура УстановитьВидимость()
	ЭлементыФормы.Заявки.Колонки.Организация.Видимость = Не ЗначениеЗаполнено(Организация);	
КонецПроцедуры

Процедура ПриОткрытии()
	УстановитьВидимость();
КонецПроцедуры

Процедура ОтметитьВсе(Кнопка)
	Для Каждого Строка Из Заявки Цикл
		Строка.Использование = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура СнятьВсе(Кнопка)
	Для Каждого Строка Из Заявки Цикл
		Строка.Использование = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьДокументы(Кнопка)
	ЗаявкиВыбраны = Ложь;
	ЕстьОшибки = Ложь;
	Для Каждого Строка Из Заявки Цикл
		Если Строка.Использование Тогда
			Если Строка.ДатаРасхода < НачалоДня(ТекущаяДата()) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка! По строке № " + Строка.НомерСтроки + " дата расхода меньше текущей даты");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			ЗаявкиВыбраны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаявкиВыбраны Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка! Не выбрано ни одной заявки");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Создать РКО по выбранным заявкам?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Заявки Цикл
		Если Строка.Использование Тогда
			Если СокрЛП(Строка.Документы) <> "" Тогда
				ОбщегоНазначения.СообщитьИнформациюПользователю("По строке № " + Строка.НомерСтроки + " уже созданы платежные документы");
			Иначе
				НачатьТранзакцию();
				Попытка
					Строка.Документы = СоздатьДокумент(Строка.ЗаявкаНаРасходованиеСредств);
					ОбщегоНазначения.СообщитьИнформациюПользователю("По строке № " + Строка.НомерСтроки + " созданы платежные документы " + Строка.Документы);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
					ОтменитьТранзакцию();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьИтогиПоСтруктр();
КонецПроцедуры

Функция СоздатьДокумент(пЗаявкаНаРасходованиеСредств)
	спДокументы = Новый СписокЗначений;
	Если пЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.Код = "120610"
		ИЛИ пЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.Код = "200701"
		ИЛИ пЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.Код = "200702"
		ИЛИ пЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств.Код = "200703" Тогда
		тзТТ = пЗаявкаНаРасходованиеСредств.ТорговыеТочки.Выгрузить(, "ТорговаяТочка, ФИОПолучателя");
		тзТТ.Свернуть("ТорговаяТочка, ФИОПолучателя");
		Для Каждого Строка Из тзТТ Цикл
			обДок = Документы.РасходИзКассы.СоздатьДокумент();
			обДок.мАвтоматическоеЗаполнениеДокумента = Истина;
			обДок.мПараметрЗаполненияДокумента = Новый Структура("ТорговаяТочка, ФИОПолучателя", Строка.ТорговаяТочка, Строка.ФИОПолучателя);
			обДок.Дата = пЗаявкаНаРасходованиеСредств.ДатаРасхода;
			обДок.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(обДок, ПараметрыСеанса.ТекущийПользователь);
			обДок.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			обДок.Заполнить(пЗаявкаНаРасходованиеСредств);
			обДок.Записать(РежимЗаписиДокумента.Запись);
			
			НСтрока2 = ПлатежныеДокументы.Добавить();
			НСтрока2.ЗаявкаНаРасходованиеСредств = пЗаявкаНаРасходованиеСредств;
			НСтрока2.Документ = обДок.Ссылка;
			
			спДокументы.Добавить(СокрЛП(обДок.Номер) + " от " + Формат(обДок.Дата, "ДФ=dd.MM.yyyy"));
		КонецЦикла;
	Иначе
		обДок = Документы.РасходИзКассы.СоздатьДокумент();
		обДок.Дата = пЗаявкаНаРасходованиеСредств.ДатаРасхода;
		обДок.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(обДок, ПараметрыСеанса.ТекущийПользователь);
		обДок.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		обДок.Заполнить(пЗаявкаНаРасходованиеСредств);
		обДок.Записать(РежимЗаписиДокумента.Запись);
		
		НСтрока2 = ПлатежныеДокументы.Добавить();
		НСтрока2.ЗаявкаНаРасходованиеСредств = пЗаявкаНаРасходованиеСредств;
		НСтрока2.Документ = обДок.Ссылка;
		
		спДокументы.Добавить(СокрЛП(обДок.Номер) + " от " + Формат(обДок.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Возврат СписокЗначенийВСтроку(спДокументы, "; ");
КонецФункции

Процедура Печать(Кнопка)
	ЕстьОшибки = Ложь;
	Для Каждого Строка Из Заявки Цикл
		Если Строка.Использование И 
			Не ЗначениеЗаполнено(Строка.Документы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По строке № " + Строка.НомерСтроки + " не создан платежный документ");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
					
	ТабДокумент = Новый ТабличныйДокумент;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из Заявки Цикл
			Если Не Строка.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаДокумент Из ПлатежныеДокументы Цикл
				Если СтрокаДокумент.ЗаявкаНаРасходованиеСредств = Строка.ЗаявкаНаРасходованиеСредств Тогда
					ТабДокумент.Вывести(СтрокаДокумент.Документ.ПолучитьОбъект().ПечатьРКО());
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					Если СтрокаДокумент.ЗаявкаНаРасходованиеСредств.Контрагент = "Стороннее физическое лицо" Тогда
						ТабДокумент.Вывести(Документы.ЗаявкаНаРасходованиеСредств.ПечатьЗаявкиСтороннееФизЛицо(СтрокаДокумент.ЗаявкаНаРасходованиеСредств));
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "РКО", Неопределено);	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры

Процедура ПринятьКОплате(Кнопка)
	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из Заявки Цикл
			Если Строка.Использование
				И Не Строка.ЗаявкаНаРасходованиеСредств.ПринятоКОплате 
				И Строка.ЗаявкаНаРасходованиеСредств.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
				
				обДок = Строка.ЗаявкаНаРасходованиеСредств.ПолучитьОбъект();
				обДок.НеПроверятьДатуЗапретаРедактирования = Истина;
				обДок.ПринятоКОплате = Истина;
				обДок.Записать(РежимЗаписиДокумента.Проведение);
				
				Строка.ПринятоКОплате = Истина;
				
				ОбщегоНазначения.СообщитьИнформациюПользователю("Документ " + Строка.ЗаявкаНаРасходованиеСредств + " принят к оплате");
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ПересчитатьИтогиПоСтруктр();
КонецПроцедуры

Процедура ЗаявкиПриАктивизацииСтроки(Элемент)
	УстановитьОтборПоЗаявке();
КонецПроцедуры

Процедура УстановитьОтборПоЗаявке()
	ТекДанные = ЭлементыФормы.Заявки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		пЗаявка = Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
	Иначе
		пЗаявка = ТекДанные.ЗаявкаНаРасходованиеСредств;
	КонецЕсли;
	
	ЭлементыФормы.ПлатежныеДокументы.ОтборСтрок.ЗаявкаНаРасходованиеСредств.Установить(пЗаявка);
КонецПроцедуры

Процедура ДействияФормыПечатьВложений(Кнопка)
	
	Для Каждого Строка Из Заявки Цикл
		Если Не Строка.ПечататьВложение Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = Строка.ЗаявкаНаРасходованиеСредств.ПолучитьОбъект();
		ДокОбъект.ПечатьФайла(ДокОбъект.СчетНаОплатуИмяФайла, ДокОбъект.СчетНаОплату);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаявкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивЗаявок = Новый Массив();
	Для Каждого СтрокаОформление Из ОформленияСтрок Цикл
		МассивЗаявок.Добавить(СтрокаОформление.ДанныеСтроки.ЗаявкаНаРасходованиеСредств);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРасходованиеСредств.БанковскийСчетКасса) КАК СтрЕдиница
	               |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	               |ГДЕ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивЗаявок)";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	Если ЭлементыФормы.Заявки.Колонки.СтруктурнаяЕдиница.Видимость Тогда
		Для Каждого СтрокаОформление Из ОформленияСтрок Цикл
			СтрокаКеш = ТабКеш.Найти(СтрокаОформление.ДанныеСтроки.ЗаявкаНаРасходованиеСредств, "Ссылка");
			Если СтрокаКеш <> Неопределено Тогда
				СтрокаОформление.Ячейки.СтруктурнаяЕдиница.УстановитьТекст(СтрокаКеш.СтрЕдиница);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СтруктурнаяЕдиницаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	Элемент.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"));
	
КонецПроцедуры


ЭлементыФормы.ПринятоКОплате.СписокВыбора.Добавить("ТолькоПринятыеКОплате", "Только принятые к оплате");
ЭлементыФормы.ПринятоКОплате.СписокВыбора.Добавить("ТолькоНеПринятыеКОплате", "Только не принятые к оплате");
ЭлементыФормы.ПринятоКОплате.СписокВыбора.Добавить("Все", "Все");
ПринятоКОплате = "Все";