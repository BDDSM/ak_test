
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнениеПоУмолчаниюКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборТехнолога", ЭтаФорма, Новый Структура("Реквизит"));
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораТехнолога");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное,,Этаформа,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.КопированиеХарактеристик.Форма.ФормаВыбораТехнолога",,Этаформа.Технолог,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатурыПриИзменении(Элемент)
	
	Если ТаблицаДанных.Количество() > 0 И ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГруппуТабличнойЧастиВопросЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить колонку ""Группа"" в табличной части?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяКолонки = СтрЗаменить(Поле.Имя,"ТаблицаДанных","");
	
	Если Найти(ИмяКолонки, "Наим") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКолонки <> "ХарактеристикаИД" И ИмяКолонки <> "Технолог" И ИмяКолонки <> "ГруппаНоменклатуры" Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные[ИмяКолонки]);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//Отказ = Истина;
	//
	//НоваяСтрока = ТаблицаДанных.Добавить();
	//НоваяСтрока.Технолог = Технолог;
	//НоваяСтрока.ГруппаНоменклатуры   = ГруппаНоменклатуры;

	//Элементы.ТаблицаДанных.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	//
	//Элементы.ТаблицаДанных.ТекущийЭлемент = Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ТаблицаДанныхХарактеристикаИД;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхХарактеристикаИДПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаИД) Тогда
		
		ТекущиеДанные.Создать = Истина;
		
		СтруктураПараметров = СтруктуруЗаполненияСтрокиИДСервер(Новый Структура("ХарактеристикаИД, ГруппаНоменклатуры, Технолог, ФункциональнаяРоль", ТекущиеДанные.ХарактеристикаИД, ГруппаНоменклатуры, Технолог, ФункциональнаяРоль));
		
		Если СтруктураПараметров <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров.СтруктураНаименований);
			ОбновитьНаименованияПоШаблонам(ТекущиеДанные);
		Иначе
			ПоказатьПредупреждение(,"Не найдена характеристика с кодом " + ТекущиеДанные.ХарактеристикаИД + " !");
			ОчиститьДанныеСтроки(ТекущиеДанные);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборТехнолога", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаВыбораТехнолога");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное,,Этаформа,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно, ,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.КопированиеХарактеристик.Форма.ФормаВыбораТехнолога",,Этаформа.Технолог,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппуТабличнойЧастиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого Строка Из ТаблицаДанных Цикл
			Строка.ГруппаНоменклатуры = ГруппаНоменклатуры;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ПроверкаЗаполненияШаблона() Тогда
		
		Если ТаблицаДанных.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьВопросЗавершение", ЭтаФорма);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
			
		Иначе
			
			ЗаполнитьТабличнуюЧастьДаннымиКлиент();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ТаблицаДанных.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборНоменклатуры", ЭтаФорма);
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("ФормаПодбора");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(ИмяФормыПолное,,ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.КопированиеХарактеристик.Форма.ФормаПодбора", ,ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	
	ОбновитьПризнакиВыделенныхСтрок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)

	ОбновитьПризнакиВыделенныхСтрок(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКопии(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьОбновитьКопииВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать/Обновить копии выбранных элементов?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ОбработатьВыборТехнолога(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("Реквизит") Тогда
			Технолог = Результат.Технолог;
			ФункциональнаяРоль = Результат.ФункциональнаяРоль;
		Иначе
			Элементы.ТаблицаДанных.ТекущиеДанные.Технолог = Результат.Технолог;
			Элементы.ТаблицаДанных.ТекущиеДанные.ФункциональнаяРоль = Результат.ФункциональнаяРоль;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНоменклатуры(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат); 
		
		//Дополнительная проверка существования "копии" (для создания нескольких х-к)
		
		НоваяСтрока.Создать = Истина;
		НоваяСтрока.Технолог = Технолог;
		НоваяСтрока.ГруппаНоменклатуры = ГруппаНоменклатуры;
		НоваяСтрока.ФункциональнаяРоль = ФункциональнаяРоль;
		
		ОбновитьНаименованияПоШаблонам(НоваяСтрока);
		
		Элементы.ТаблицаДанных.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧастьДаннымиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьКопииВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьОбновитьКопииВыбранныхЭлементовКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнениеПоУмолчаниюКлиент()

	Если НЕ ЗначениеЗаполнено(ШаблонНаименования) Тогда
		ШаблонНаименования = "(ЗЛ)";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонНаименованияКраткого) Тогда
		ШаблонНаименованияКраткого = "(ЗЛ)";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонНаименованияПолного) Тогда
		ШаблонНаименованияПолного = "(ЗЛ)";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТорговаяМарка) Тогда
		ТорговаяМарка = ПредопределенноеЗначение("Справочник.ТорговыеМарки.ЗеленаяЛиния");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияШаблона()
	
	ЗначенияЗаполнены = ЗначениеЗаполнено(ТорговаяМарка) И ЗначениеЗаполнено(ШаблонНаименования) И ЗначениеЗаполнено(ШаблонНаименованияПолного);
	
	Если ЗначенияЗаполнены Тогда
		Возврат Истина;
	Иначе
		ПоказатьПредупреждение(,"Заполните обязательные поля!");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПризнакиВыделенныхСтрок(Отметка)

	Если Элементы.ТаблицаДанных.ВыделенныеСтроки.Количество()> 1 Тогда 
		
		Для каждого ВыделеннаяСтрока ИЗ Элементы.ТаблицаДанных.ВыделенныеСтроки Цикл
			ТекущиеДанные = Этаформа.ТаблицаДанных.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекущиеДанные.Создать = Отметка;
		КонецЦикла;
		
	Иначе
		
		Для каждого Строка ИЗ ТаблицаДанных Цикл
			Строка.Создать = Отметка;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктуруЗаполненияСтрокиИДСервер(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Ссылка.Наименование КАК НаименованиеХр,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Владелец.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.Владелец.НаименованиеПолное КАК НаименованиеПолное,
	|	ХарактеристикиНоменклатуры.Владелец.НаименованиеДляСМС КАК НаименованиеКраткое,
	|	ХарактеристикиНоменклатурыКопии.ИДЭлемента КАК ХарактеристикаИДКопия,
	|	ХарактеристикиНоменклатурыКопии.Ссылка КАК ХарактеристикаКопия,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыКопии.Владелец, Номенклатура.Ссылка) КАК НоменклатураКопия,
	|	&ГруппаНоменклатуры,
	|	&Технолог,
	|	&ФункциональнаяРоль,
	|	ИСТИНА КАК Создать
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыКопии
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ХарактеристикиНоменклатурыКопии.ОсновнаяХарактеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ОсновнаяНоменклатура
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.Неактивная
	|	И ХарактеристикиНоменклатуры.ИДЭлемента = &ИДЭлемента";
	
	Запрос.УстановитьПараметр("ИДЭлемента", СтруктураПараметров.ХарактеристикаИД);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", СтруктураПараметров.ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("Технолог", СтруктураПараметров.Технолог);
	Запрос.УстановитьПараметр("ФункциональнаяРоль", СтруктураПараметров.ФункциональнаяРоль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();

		СтруктураНаименований = Новый Структура("Наименование, НаименованиеПолное, НаименованиеКраткое, НаименованиеХр", 
				Выборка.Наименование, Выборка.НаименованиеПолное, Выборка.НаименованиеКраткое, Выборка.НаименованиеХр);
		
		Возврат Новый Структура("Номенклатура, Характеристика, НоменклатураКопия, ХарактеристикаКопия, ХарактеристикаИДКопия, ГруппаНоменклатуры, Технолог, ФункциональнаяРоль, СтруктураНаименований", 
				Выборка.Номенклатура, Выборка.Характеристика, Выборка.НоменклатураКопия, Выборка.ХарактеристикаКопия, Выборка.ХарактеристикаИДКопия, Выборка.ГруппаНоменклатуры, Выборка.Технолог, Выборка.ФункциональнаяРоль, СтруктураНаименований);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьДаннымиКлиент()
	
	 ЗаполнитьТабличнуюЧастьДаннымиСервер();
	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьДаннымиСервер()
	
	ТаблицаДанных.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец.Код КАК НоменклатураКод,
	               |	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	               |	ХарактеристикиНоменклатуры.Владелец.Наименование КАК Наименование,
	               |	ХарактеристикиНоменклатуры.Владелец.НаименованиеПолное КАК НаименованиеПолное,
	               |	ХарактеристикиНоменклатуры.Владелец.НаименованиеДляСМС КАК НаименованиеКраткое,
	               |	ХарактеристикиНоменклатуры.ИДЭлемента КАК ХарактеристикаИД,
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
				   |	ХарактеристикиНоменклатуры.Ссылка.Наименование КАК НаименованиеХр,
	               |	ХарактеристикиНоменклатурыКопии.Владелец.Код КАК НоменклатураКодКопия,
	               |	ХарактеристикиНоменклатурыКопии.Владелец КАК НоменклатураКопия,
	               |	ХарактеристикиНоменклатурыКопии.ИДЭлемента КАК ХарактеристикаИДКопия,
	               |	ХарактеристикиНоменклатурыКопии.Ссылка КАК ХарактеристикаКопия,
	               |	&ГруппаНоменклатуры,
	               |	&Технолог,
	               |	&ФункциональнаяРоль,
	               |	ИСТИНА КАК Создать
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыКопии
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ХарактеристикиНоменклатурыКопии.ОсновнаяХарактеристика
	               |ГДЕ
	               |	НЕ ХарактеристикиНоменклатуры.Неактивная
	               |	И ХарактеристикиНоменклатуры.Владелец.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	               |	И ХарактеристикиНоменклатуры.Владелец.ОсновнаяНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.Пустаяссылка)
	               |	И ВЫБОР
	               |			КОГДА &ГруппаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |				ТОГДА ХарактеристикиНоменклатуры.Владелец В ИЕРАРХИИ (&ГруппаНоменклатуры)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("Технолог", Технолог);
	Запрос.УстановитьПараметр("ФункциональнаяРоль", ФункциональнаяРоль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ОбновитьНаименованияПоШаблонамСервер(НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьКопииВыбранныхЭлементовКлиент()

	СоздатьОбновитьКопииВыбранныхЭлементовСервер();

КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьКопииВыбранныхЭлементовСервер()
	
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Создать", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекстСообщения = "";
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			НачатьТранзакцию();
			
			//Заполнение Номенклатуры
			Если ЗначениеЗаполнено(Строка.НоменклатураКопия) Тогда
				
				СправочникОбъект = Строка.НоменклатураКопия.ПолучитьОбъект();

			Иначе
				
				СправочникОбъект = Строка.Номенклатура.Скопировать();
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ГруппаНоменклатуры) Тогда
				СправочникОбъект.Родитель = Строка.ГруппаНоменклатуры;
			КонецЕсли;

			ЗаполнитьОбновитьДанныеКопииОбъекта(СправочникОбъект, Строка.Номенклатура, Строка);
			
			Попытка 
				
				СправочникОбъект.Записать();
				Строка.НоменклатураКопия = СправочникОбъект.Ссылка;
				
				ЗаполнитьОбновитьДанныеКопииОбъекта(СправочникОбъект, Строка.Номенклатура,,Ложь);
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = ТекстСообщения + "Не удалось создать копию номенклатуры " + Строка.Номенклатура + Символы.ПС;
				Продолжить;
			КонецПопытки;

			//Заполнение Характеристики
			Если ЗначениеЗаполнено(Строка.ХарактеристикаКопия) Тогда
				
				СправочникОбъект = Строка.ХарактеристикаКопия.ПолучитьОбъект();
				
			Иначе
				СправочникОбъект = Строка.Характеристика.Скопировать();
				
				СправочникОбъект.Владелец   =  Строка.НоменклатураКопия;
				
			КонецЕсли;
			
			ЗаполнитьОбновитьДанныеКопииОбъекта(СправочникОбъект, Строка.Характеристика, Строка);

			Попытка 
				
				СправочникОбъект.Записать();
				Строка.ХарактеристикаКопия = СправочникОбъект.Ссылка;
				Строка.ХарактеристикаИДКопия = СправочникОбъект.ИДЭлемента;
				
				ЗаполнитьОбновитьДанныеКопииОбъекта(СправочникОбъект, Строка.Характеристика,,Ложь);

			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = ТекстСообщения + "Не удалось создать копию характеристики " + СправочникОбъект + " (Владелец: " + Строка.НоменклатураКопия+ ")" + Символы.ПС;
				Продолжить;
			КонецПопытки;

			ОбщееЗаполнениеРегистров(Новый Структура("Номенклатура, Характеристика, НоменклатураКопия, ХарактеристикаКопия, Технолог, ФункциональнаяРоль, ГенерироватьШК, ГенерироватьШККоробок", 
					Строка.Номенклатура, Строка.Характеристика, Строка.НоменклатураКопия, Строка.ХарактеристикаКопия, Строка.Технолог, Строка.ФункциональнаяРоль, Строка.ГенерироватьШК, Строка.ГенерироватьШККоробок));
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованияПоШаблонам(ТекущиеДанные)
	
	ТекущиеДанные.Наименование = ТекущиеДанные.Наименование + ШаблонНаименования;
	Если ЗначениеЗаполнено(ТекущиеДанные.НаименованиеПолное) Тогда
		ТекущиеДанные.НаименованиеПолное = ТекущиеДанные.НаименованиеПолное + ШаблонНаименованияПолного;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.НаименованиеКраткое) Тогда
		ТекущиеДанные.НаименованиеКраткое = ТекущиеДанные.НаименованиеКраткое + ШаблонНаименованияКраткого;
	КонецЕсли;
	ТекущиеДанные.НаименованиеХр = ТекущиеДанные.НаименованиеХр + ШаблонНаименования;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованияПоШаблонамСервер(ТекущиеДанные)
	
	ТекущиеДанные.Наименование = ТекущиеДанные.Наименование + ШаблонНаименования;
	Если ЗначениеЗаполнено(ТекущиеДанные.НаименованиеПолное) Тогда
		ТекущиеДанные.НаименованиеПолное = ТекущиеДанные.НаименованиеПолное + ШаблонНаименованияПолного;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.НаименованиеКраткое) Тогда
		ТекущиеДанные.НаименованиеКраткое = ТекущиеДанные.НаименованиеКраткое + ШаблонНаименованияКраткого;
	КонецЕсли;
	ТекущиеДанные.НаименованиеХр = ТекущиеДанные.НаименованиеХр + ШаблонНаименования;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСтроки(ТекущиеДанные)
	
	Для Каждого Колонка Из Элементы.ТаблицаДанных.ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, "ТаблицаДанных", "");
		Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
			ТекущиеДанные[ИмяКолонки] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из Элементы.ТаблицаДанных.ПодчиненныеЭлементы.ОсновнаяХарактеристика.ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, "ТаблицаДанных", "");
		Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
			ТекущиеДанные[ИмяКолонки] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из Элементы.ТаблицаДанных.ПодчиненныеЭлементы.КопияХарактеристики.ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, "ТаблицаДанных", "");
		Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
			ТекущиеДанные[ИмяКолонки] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из Элементы.ТаблицаДанных.ПодчиненныеЭлементы.Дополнительно.ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, "ТаблицаДанных", "");
		Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
			ТекущиеДанные[ИмяКолонки] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из Элементы.ТаблицаДанных.ПодчиненныеЭлементы.Шаблоны.ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, "ТаблицаДанных", "");
		Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
			ТекущиеДанные[ИмяКолонки] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбновитьДанныеКопииОбъекта(СправочникОбъект, ИсточникСсылка, ТекущаяСтрока = Неопределено, ОсновноеЗаполнение = Истина)

	ИсточникОбъект = ИсточникСсылка.ПолучитьОбъект();
	
	Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Если ОсновноеЗаполнение Тогда
			
			//СправочникОбъект = Справочники.Номенклатура.СоздатьЭлемент(); //Отладка реквизитов
			
			//Заполнение реквизитов
			СправочникОбъект.Наименование  = ТекущаяСтрока.Наименование;
			СправочникОбъект.НаименованиеПолное  = ТекущаяСтрока.НаименованиеПолное;
			СправочникОбъект.НаименованиеДляСМС = ТекущаяСтрока.НаименованиеКраткое;
			
			СправочникОбъект.ТорговаяМарка = ТорговаяМарка;
			СправочникОбъект.ГруппаНоменклатурыУРЗ = ИсточникОбъект.ГруппаНоменклатурыУРЗ;
			СправочникОбъект.ОсновнаяНоменклатура  = ИсточникСсылка;
			
			//Обработка новых номенклатур
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
				СправочникОбъект.Обед = Перечисления.ВидыОбеда.ПустаяСсылка();
			КонецЕсли;
			
			//Доп.
			СправочникОбъект.КатегорияАссортимента = ИсточникОбъект.КатегорияАссортимента; 
			СправочникОбъект.ЕдиницаХраненияОстатков = ИсточникОбъект.ЕдиницаХраненияОстатков;
			СправочникОбъект.СсылкаНаОсновноеИзображение = "";
			СправочникОбъект.СсылкаНаОсновноеИзображение_Малое = "";
			
			//Фишки
			СправочникОбъект.Фишка 				= ИсточникОбъект.Фишка;
			СправочникОбъект.ФишкаКратко 		= ИсточникОбъект.ФишкаКратко;
			СправочникОбъект.ФишкаРазвёрнуто    = ИсточникОбъект.ФишкаРазвёрнуто;
			СправочникОбъект.ТекстВместоФишки   = ИсточникОбъект.ТекстВместоФишки;
			
			СправочникОбъект.ФишкиНаЦенник.Загрузить(ИсточникОбъект.ФишкиНаЦенник.Выгрузить());
			
		Иначе
			
			//Заполнение прочее(Справочники, Регистры)
			СтруктураПараметров = Новый Структура("Источник, Приемник", ИсточникСсылка, СправочникОбъект.Ссылка);
			
			НоменклатураЗаполнитьЕдиницыИзмерения(СтруктураПараметров);
			
			ОбщееЗаполнениеЗаполнитьЗначениеСвойствОбъектов(СтруктураПараметров);
			
			НоменклатураДоступностьТоваровНаСкладах(СтруктураПараметров);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ОсновноеЗаполнение Тогда
			
			//СправочникОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент(); //Отладка реквизитов
			
			//Заполнение реквизитов
			СправочникОбъект.Наименование  = ТекущаяСтрока.НаименованиеХр;
			
			СправочникОбъект.ОсновнаяХарактеристика = ИсточникСсылка;
			
			//Обработка новых характеристик
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
				СправочникОбъект.ИДЭлемента = 0;
			КонецЕсли;

			Попытка
				СправочникОбъект.Статус = Неопределено;
				СправочникОбъект.Причина = Неопределено;
				СправочникОбъект.ДатаВывода = Неопределено;
				СправочникОбъект.ДатаОжидаемогоВозврата = Неопределено;
				СправочникОбъект.ДатаОжидаемойПоставки = Неопределено;
				СправочникОбъект.РазрешённоеКоличествоЗаказа = Неопределено;
				СправочникОбъект.ДатаПоследнегоИзменения = ТекущаяДата();
				СправочникОбъект.АвторПоследнегоИзменения = ПараметрыСеанса.ТекущийПользователь;
			Исключение
			КонецПопытки;
			
		Иначе
			
			//Заполнение прочее(Справочники, Регистры)
			СтруктураПараметров = Новый Структура("Источник, Приемник", ИсточникСсылка, СправочникОбъект.Ссылка);
			
			ОбщееЗаполнениеЗаполнитьЗначениеСвойствОбъектов(СтруктураПараметров);
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#Область ДополнительноеЗаполнение

&НаСервере
Процедура ОбщееЗаполнениеРегистров(СтруктураПараметров)
	
	ОбщееЗаполнениеЗаполнитьТоварныйАссортиментТочекПроизводители(СтруктураПараметров);
	
	ОбщееЗаполнениеЗаполнитьНумераторыШтрихкодов(СтруктураПараметров);
	
	НоменклатураСгенерироватьШтрихкод(СтруктураПараметров);

	ОбщееЗаполнениеЗаполнитьМЙ_СоответствиеНоменклатуры(СтруктураПараметров);

	ОбщееЗаполнениеЗаполнитьСертификатыНаПродукцию(СтруктураПараметров);
	
	ОбщееЗаполнениеЗаполнитьФункциональныеРолиТехнологовХарактеристики(СтруктураПараметров);

	ОбщееЗаполнениеЗаполнитьЦеныНоменклатурыПоставщиков(СтруктураПараметров);
	
	ОбщееЗаполнениеЗаполнитьНормативныеКванты(СтруктураПараметров);

КонецПроцедуры	

&НаСервере
Процедура НоменклатураЗаполнитьЕдиницыИзмерения(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияКопии
	|		ПО ЕдиницыИзмерения.ЕдиницаПоКлассификатору = ЕдиницыИзмеренияКопии.ЕдиницаПоКлассификатору
	|			И (ЕдиницыИзмеренияКопии.Владелец = &ВладелецКопия)
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
	|	И ЕдиницыИзмеренияКопии.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Владелец", СтруктураПараметров.Источник);
	Запрос.УстановитьПараметр("ВладелецКопия", СтруктураПараметров.Приемник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
			 НовыйОбъект = ВыборкаДетальныеЗаписи.Ссылка.Скопировать();
			 НовыйОбъект.УстановитьНовыйКод();
			 НовыйОбъект.Владелец  = СтруктураПараметров.Приемник;
			 НовыйОбъект.ОбменДанными.Загрузка = Истина;
			 НовыйОбъект.Записать();
			 
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НоменклатураСгенерироватьШтрихкод(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	// Генерировать коды только если коды были сгенерированы в источнике
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.ЕдиницаИзмерения,
	|	ШтриховыеКоды.Характеристика,
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмеренияКопия
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ШтриховыеКоды.Номенклатура = ЕдиницыИзмерения.Владелец.ОсновнаяНоменклатура
	|			И ШтриховыеКоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|ГДЕ
	|	ШтриховыеКоды.Номенклатура = &Номенклатура
	|	И ШтриховыеКоды.Характеристика = &Характеристика
	|	И НЕ ШтриховыеКоды.ВыведенИзМагазинов
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтриховыеКоды.Характеристика,
	|	ЕдиницыИзмерения.Ссылка,
	|	ШтриховыеКоды.ЕдиницаИзмерения,
	|	ШтриховыеКоды.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ШтриховыеКоды.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.НоменклатураКопия);  
			НаборЗаписей.Отбор.Характеристика.Установить(СтруктураПараметров.ХарактеристикаКопия);
			НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКопия);  
			
			НаборЗаписей.Прочитать();

			Если НаборЗаписей.Количество() = 0 ИЛИ СтруктураПараметров.ГенерироватьШК Тогда
				
				НоваяЗапись = РегистрыСведений.ШтриховыеКоды.СоздатьМенеджерЗаписи();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
				
				НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
				НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;
				НоваяЗапись.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКопия;
				
				НовыйШтрихкод = РегистрыСведений.ШтриховыеКоды.ГенерироватьНовыйШтрихКод(СтруктураПараметров.НоменклатураКопия);
				
				//Проверка, которая присутствует только для весового товара (Игнорируется префикс)
				Если СтрДлина(НовыйШтрихкод) = 7 Тогда
					Пока НЕ РегистрыСведений.ШтриховыеКоды.ПроверкаШтрихКода(НовыйШтрихкод, НоваяЗапись.Номенклатура, НоваяЗапись.Характеристика, Ложь) Цикл
						НовыйШтрихкод = РегистрыСведений.ШтриховыеКоды.ГенерироватьНовыйШтрихКод(СтруктураПараметров.НоменклатураКопия);
					КонецЦикла;
				КонецЕсли;
				
				НоваяЗапись.ШтрихКод = НовыйШтрихкод;
				
				НоваяЗапись.Записать();	
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НоменклатураДоступностьТоваровНаСкладах(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница,
	|	ДоступностьТоваровНаСкладах.Номенклатура,
	|	ДоступностьТоваровНаСкладах.Склад
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.ДоступностьТоваровНаСкладах.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Номенклатура = СтруктураПараметров.Приемник;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьЗначениеСвойствОбъектов(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", СтруктураПараметров.Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Объект = СтруктураПараметров.Приемник;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьТоварныйАссортиментТочекПроизводители(СтруктураПараметров)

	Возврат; //Не нужно заполнять
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Период,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Выведена,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Запрещена,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.id_TT,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.ДатаСозданияЗаписи,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Автор,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.Комментарий,
	|	РегистрСведенийТоварныйАссортиментТочекСрезПоследних.ИзПотерянных
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И НЕ Выведена) КАК РегистрСведенийТоварныйАссортиментТочекСрезПоследних";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//Через "набор записей" (Можно установить ОбменДанными.Загрузка, иначе контроли в регистре занимают больше минуты)
			//НоваяЗапись = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);

			НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.НоменклатураКопия);
            НаборЗаписей.Отбор.ТорговаяТочка.Установить(ВыборкаДетальныеЗаписи.ТорговаяТочка);

			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);

			НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;

			НаборЗаписей.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьНумераторыШтрихкодов(СтруктураПараметров)

	НаборЗаписей = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.НоменклатураКопия);  
	НаборЗаписей.Отбор.Характеристика.Установить(СтруктураПараметров.ХарактеристикаКопия);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 ИЛИ СтруктураПараметров.ГенерироватьШККоробок Тогда
		Справочники.Номенклатура.УстановитьНомерПоНумератору(СтруктураПараметров.НоменклатураКопия, СтруктураПараметров.ХарактеристикаКопия);
	КонецЕсли;

	Возврат; //Копировать не нужно
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	НумераторШтрихКодовКоробок.Номенклатура,
	|	НумераторШтрихКодовКоробок.Характеристика,
	|	НумераторШтрихКодовКоробок.Нумератор
	|ИЗ
	|	РегистрСведений.НумераторШтрихКодовКоробок КАК НумераторШтрихКодовКоробок
	|ГДЕ
	|	НумераторШтрихКодовКоробок.Номенклатура = &Номенклатура
	|	И НумераторШтрихКодовКоробок.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.НумераторШтрихКодовКоробок.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьМЙ_СоответствиеНоменклатуры(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	МЙ_СоответствиеНоменклатуры.Номенклатура,
	|	МЙ_СоответствиеНоменклатуры.Характеристика,
	|	МЙ_СоответствиеНоменклатуры.ПродукцияВетис,
	|	МЙ_СоответствиеНоменклатуры.ТипПродукции,
	|	МЙ_СоответствиеНоменклатуры.ВидПродукции
	|ИЗ
	|	РегистрСведений.МЙ_СоответствиеНоменклатуры КАК МЙ_СоответствиеНоменклатуры
	|ГДЕ
	|	МЙ_СоответствиеНоменклатуры.Номенклатура = &Номенклатура
	|	И МЙ_СоответствиеНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.МЙ_СоответствиеНоменклатуры.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьНормативныеКванты(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	НормативныйКвантУпаковкиСрезПоследних.Период,
	|	НормативныйКвантУпаковкиСрезПоследних.Склад,
	|	НормативныйКвантУпаковкиСрезПоследних.Характеристика,
	|	НормативныйКвантУпаковкиСрезПоследних.Квант
	|ИЗ
	|	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(, Характеристика = &Характеристика) КАК НормативныйКвантУпаковкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.НормативныйКвантУпаковки.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьСертификатыНаПродукцию(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.Период,
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер,
	|	СертификатыНаПродукциюСрезПоследних.ДействуетДо,
	|	СертификатыНаПродукциюСрезПоследних.ИмяФайла,
	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	|	СертификатыНаПродукциюСрезПоследних.Ответственный,
	|	СертификатыНаПродукциюСрезПоследних.РазмерФайла,
	|	СертификатыНаПродукциюСрезПоследних.Бессрочный,
	|	СертификатыНаПродукциюСрезПоследних.Удален
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И НЕ Удален
	|				И (ДействуетДо >= &ТекущаяДата
	|					ИЛИ Бессрочный)) КАК СертификатыНаПродукциюСрезПоследних
	|ГДЕ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура = &Номенклатура
	|	И СертификатыНаПродукциюСрезПоследних.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.СертификатыНаПродукцию.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;

			НоваяЗапись.Записать();			

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьФункциональныеРолиТехнологовХарактеристики(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID
	|ИЗ
	|	(ВЫБРАТЬ
	|		РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|				ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
	|			ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|	ГДЕ
	|		РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
	|		И Пользователи.Ссылка.ФизЛицо = &ТекущийПользователь
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РолиПользователейСоставРоли.Ссылка) КАК Таб_ФункциональныеРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|				&Период,
	|				ТипРолиID = ""TechnologPoKachestvu""
	|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.ТипРолиID";
	
	Запрос.УстановитьПараметр("ТекущийПользователь",  СтруктураПараметров.Технолог);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("Период",  ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		НоваяЗапись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		
		НоваяЗапись.Объект = СтруктураПараметров.ХарактеристикаКопия;
		
		НоваяЗапись.РольПользователя = СтруктураПараметров.ФункциональнаяРоль;      
		
		НоваяЗапись.Период = ТекущаяДата();
		
		НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		НоваяЗапись.Записать();			
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбщееЗаполнениеЗаполнитьЦеныНоменклатурыПоставщиков(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныПоставщиковСрезПоследних.Период,
	|	ЦеныПоставщиковСрезПоследних.Номенклатура,
	|	ЦеныПоставщиковСрезПоследних.Характеристика,
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс,
	|	ЦеныПоставщиковСрезПоследних.ОтклонениеМинус,
	|	ЦеныПоставщиковСрезПоследних.Артикул,
	|	ЦеныПоставщиковСрезПоследних.ЦенаПродажи,
	|	ЦеныПоставщиковСрезПоследних.МинимальныйЗаказ,
	|	ЦеныПоставщиковСрезПоследних.КоличествоВесТоварПлюс,
	|	ЦеныПоставщиковСрезПоследних.Допуск,
	|	ЦеныПоставщиковСрезПоследних.Поставщик,
	|	ЦеныПоставщиковСрезПоследних.Автор,
	|	ЦеныПоставщиковСрезПоследних.Заблокировано,
	|	ЦеныПоставщиковСрезПоследних.id_price,
	|	ЦеныПоставщиковСрезПоследних.Документ,
	|	ЦеныПоставщиковСрезПоследних.Комментарий
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ЦеныПоставщиковСрезПоследних";
	
	Запрос.УстановитьПараметр("Номенклатура",  СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураПараметров.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = РегистрыСведений.ЦеныПоставщиков.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			
			НоваяЗапись.Номенклатура = СтруктураПараметров.НоменклатураКопия;
			НоваяЗапись.Характеристика = СтруктураПараметров.ХарактеристикаКопия;
			НоваяЗапись.Документ = Документы.ИзменениеЗакупочныхЦен.ПустаяСсылка();
			НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
			
			НоваяЗапись.Записать();			

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
