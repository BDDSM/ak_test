
&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНАСервере();
	Элементы.РамкиНаФото.ОтборСтрок = Неопределено; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНАСервере()


	Задания.Очистить();
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("srv-sql04");
		
	ТекстЗапроса =
	"	SELECT     TP.Group_Processing,
	| TA.ID_task_for_analisis,
	| TA.Date_add, TA.Date_completed,
	|  TA.ID_Request,
	// +++ АК CHUM 28.08.2017 0-000014962
	| TA.ID_Type_Processing,
	| TP.ID_target_type,
	// --- АК
	|  TP.TypeProcessName
	|			FROM         [MB].[dbo].[TasksForAnalisis] as TA INNER JOIN
	|						  [MB].[dbo].[TypeProcessing] as TP ON TA.ID_Type_Processing = TP.ID_Type_Processing
	|						 where  TA.Date_completed is not NULL";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Попытка
		rs.MoveFirst();
		
		// +++ АК CHUM 28.08.2017 0-000014962
		// Т.к. по условию тз необходимо выводить список имен целевых классов, то чтобы не делать
		// запрос к SQL в цикле, получим список используемых классов
		СписокДляОтбораДоступныхКлассов = Новый СписокЗначений;
		// --- АК
		
		Пока НЕ rs.EOF() Цикл
			НовСтр = Задания.Добавить();
			
			НовСтр.Дата = rs.Fields("Date_completed").Value;
			НовСтр.ИмяПроцесса =  rs.Fields("TypeProcessName").Value;
			НовСтр.ID_Request =  Формат(rs.Fields("ID_Request").Value,"ЧГ=");
			НовСтр.ID_task_for_analisis =  Формат(rs.Fields("ID_task_for_analisis").Value,"ЧГ=");
			// +++ АК CHUM 28.08.2017 0-000014962
			// Необходимо для последующего вызова функции по получению списка классов объектов
			// в функции ПриВыбореЗадания
			НовСтр.ID_Type_Processing 	=  Формат(rs.Fields("ID_Type_Processing").Value,"ЧГ=");
			НовСтр.ДатаДобавления 		=  rs.Fields("Date_add").Value;
			НовСтр.ID_Target_Type 		=  Строка(rs.Fields("ID_target_type").Value);
			
			Если СписокДляОтбораДоступныхКлассов.НайтиПоЗначению(НовСтр.ID_Type_Processing) = Неопределено Тогда
				СписокДляОтбораДоступныхКлассов.Добавить(НовСтр.ID_Type_Processing);
			КонецЕсли;
			// --- АК
			rs.MoveNext();
		КонецЦикла; 
		
		// +++ АК CHUM 28.08.2017 0-000014962
		// Получим список доступных классов и потом вытяним их имена для таблицы "Задания"
		
		ТекстЗапроса =
		"SELECT TI.ID_Type_Item,
		|  TI.Item_Name,
		|  TI.ID_Type_Processing
		|FROM [MB].[dbo].[TypeItems] as TI
		|WHERE  TI.ID_Type_Processing IN (";
		
		Для Каждого СтрСписка Из СписокДляОтбораДоступныхКлассов Цикл
			ТекстЗапроса = ТекстЗапроса + Формат(СтрСписка.Значение, "ЧГ=") + ",";
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
		ТекстЗапроса = ТекстЗапроса + ")";
		
		Попытка
			TypeItemsList = ADOСоединение.Execute(ТекстЗапроса);
			TypeItemsList.MoveFirst();
			
			СписокДоступныхКлассов.Очистить();
			Пока НЕ TypeItemsList.EOF() Цикл
				
				НовСтр = СписокДоступныхКлассов.Добавить();
				НовСтр.ID_Type_Processing 	= TypeItemsList.Fields("ID_Type_Processing").Value;
				НовСтр.ИДКласса 			= TypeItemsList.Fields("ID_Type_Item").Value;
				НовСтр.ИмяКласса 			= TypeItemsList.Fields("Item_Name").Value;
				
				TypeItemsList.MoveNext();
			КонецЦикла;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ОтборКласса = Новый Структура;
		Для Каждого СтрЗадания Из Задания Цикл
			СписокИДКлассов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрЗадания.ID_Target_Type);
			Для Каждого СтрИДКласса Из СписокИДКлассов Цикл
				
				Если Не ЗначениеЗаполнено(СтрИДКласса) Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборКласса.Вставить("ИДКласса", Число(СтрИДКласса));
				
				СтрокаКласса = СписокДоступныхКлассов.НайтиСтроки(ОтборКласса);
				Если СтрокаКласса.Количество() > 0 Тогда
					СтрЗадания.ЦелевыеКлассы = СтрЗадания.ЦелевыеКлассы + СтрокаКласса[0].ИмяКласса + ",";
				КонецЕсли;
			КонецЦикла;
			
			СтрЗадания.ЦелевыеКлассы = Лев(СтрЗадания.ЦелевыеКлассы, СтрДлина(СтрЗадания.ЦелевыеКлассы) - 1);
		КонецЦикла;
		
		// --- АК
		
		ADOСоединение.Close();
		
	Исключение
		Сообщить("Нет записей по кассе за период");
		ADOСоединение.Close();
		Возврат
	КонецПопытки;

 КонецПроцедуры

&НаКлиенте
 Процедура ЗаданияПриАктивизацииСтроки(Элемент)
	 
	 ТекСтр = Элементы.Задания.ТекущиеДанные;
	 
	 Если ТекСтр <> Неопределено Тогда 
		// +++ АК CHUM 28.08.2017 0-000014962
		 //ПриВыбореЗадания(ТекСтр.ID_Request,ТекСтр.ID_task_for_analisis);
		// +++ АК CHUM 28.08.2017 0-000014962
		
		 ПриВыбореЗадания(ТекСтр.ID_Request,ТекСтр.ID_task_for_analisis, ТекСтр.ID_Type_Processing);
		 
		 Элементы.РамкиНаФотоItem_Name.СписокВыбора.Очистить();
		 
		 ОтборДляДоступныхКлассов = Новый Структура;
		 ОтборДляДоступныхКлассов.Вставить("ID_Type_Processing", ТекСтр.ID_Type_Processing);
		 
		 МассивДоступныхКлассов = СписокДоступныхКлассов.НайтиСтроки(ОтборДляДоступныхКлассов);
		 
		 Для Каждого СтрКласса Из МассивДоступныхКлассов Цикл	 
			 Элементы.РамкиНаФотоItem_Name.СписокВыбора.Добавить(СтрКласса.ИмяКласса);
		 КонецЦикла;
	 
		// АК
		 Элементы.РамкиНаФото.ОтборСтрок = Неопределено; 
	 КонецЕсли;
	 
 КонецПроцедуры

 &НаСервере
 Процедура ПриВыбореЗадания(ID_Request,ID_task_for_analisis, ID_Type_Processing) // АК CHUM 28.08.2017 0-000014962 Добавлен параметр "ID_Type_Processing" 
	 
	 ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("srv-sql04");
	 ТекстЗапроса =
	 "	 SELECT
	 |  PV.[ID_PVR]
	 |  ,[ID_Video]
	 |  ,[ID_Request]
	 |  ,[Link_Download_ph]
	// +++ АК CHUM 28.08.2017 0-000014962
	 |	,[Link_PrepImage]
	 |	,PV.[Verification]
	// --- АК 
	 |  ,[Time_st]
	 |  ,[Time_fin]
	 |  ,PV.[date_add]
	 |  ,[time_photo]
	 |  ,[ip_camera]
	 |  ,[type_video]
	 |  ,[is_urgent]
	 |  ,[is_photo]
	 |  , isnull(EventAlarm.Alarm,0) as Alarm
	 | FROM [MB].[dbo].[PhotoVideoRequests] PV
	 |left JOIN   [MB].[dbo].[EventAlarm] ON PV.ID_PVR = EventAlarm.ID_PVR  and  EventAlarm.ID_task_for_analisis = "+ID_task_for_analisis+" 
	 |Where [ID_Request]="+ID_Request+" ";
	
	 rs = ADOСоединение.Execute(ТекстЗапроса);
	 Попытка
		 rs.MoveFirst();
		 Фото.Очистить();
		 Пока НЕ rs.EOF() Цикл
			 НовСтр = Фото.Добавить();
			 
			 НовСтр.СсылкаНаФото = rs.Fields("Link_Download_ph").Value;
			// +++ АК CHUM 28.08.2017 0-000014962
			 НовСтр.Link_PrepImage 	= rs.Fields("Link_PrepImage").Value;
			 НовСтр.Verification 	= ?(rs.Fields("Verification").Value = 1, Истина, Ложь);
			 НовСтр.ДатаИзображения = rs.Fields("time_photo").Value;
			// --- АК 
			 НовСтр.ID_Request =  rs.Fields("ID_Request").Value;
			 НовСтр.ID_Video =  rs.Fields("ID_Video").Value;
			 НовСтр.ip_camera =  rs.Fields("ip_camera").Value;    
			 НовСтр.ID_PVR =  rs.Fields("ID_PVR").Value;  
			 НовСтр.Alarm =  rs.Fields("Alarm").Value;  
			 
			 rs.MoveNext();
		 КонецЦикла; 
	 Исключение
		 Возврат;
	 КонецПопытки;
	 
	 ТекстЗапроса = "  SELECT  [ID_Item]
	 |  	,[ID_PVR]
	 |  	,[ID_task_for_analisis]
	 |  	,DI.[ID_type_item]
	 |  	,[X_top_left]
	 |  	,[Y_top_left]
	 |  	,[X_bottom_right]
	 |  	,[Y_bottom_right]
	 |  	,[Date_add]
	 |  	,TypeItems.Item_Name
	 // +++ АК CHUM 28.08.2017 0-000014962
	 |  	,TypeItems.ID_type_item
	 // --- АК
	 |  FROM [MB].[dbo].[DetectedItems] DI  
	 | left join [MB].[dbo].[TypeItems] on DI.ID_type_item = 	TypeItems.ID_type_item 
	 |WHere [ID_task_for_analisis] = "+ID_task_for_analisis+"
	 |"; 
	 
	 
	 rs = ADOСоединение.Execute(ТекстЗапроса);
	 
	 // +++ АК CHUM 28.08.2017 0-000014962
	 
	 Попытка
		 // Получим список изменений для последующего отображения в таблице РамкиНаФото
		 ТекстЗапроса = "  SELECT *
		 |  FROM [MB].[dbo].[DetectedItemsChange] DIC  
		 |Where DIC.ID_task_for_analisis = " + ID_task_for_analisis + "
		 |"; 
		 
		 
		 DIC = ADOСоединение.Execute(ТекстЗапроса);
		 Если Не DIC.EOF Тогда
			 DIC.MoveFirst();
			 ТаблицаИзменений.Очистить();
			 
			 Пока Не DIC.EOF Цикл
				 НовСтрИзменений = ТаблицаИзменений.Добавить();
				 НовСтрИзменений.ID_Change 				= DIC.Fields("ID_change").Value;
				 НовСтрИзменений.ID_Type_Item_Current 	= DIC.Fields("ID_type_item_current").Value;
				 НовСтрИзменений.ID_Type_Item_Previous 	= DIC.Fields("ID_type_item_previous").Value;
				 НовСтрИзменений.ID_PVR 				= DIC.Fields("ID_PVR").Value;
				 НовСтрИзменений.ID_Item 				= DIC.Fields("ID_item").Value;
				 
				 DIC.MoveNext();
			 КонецЦикла;
		 КонецЕсли;
	 Исключение
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	 КонецПопытки;
	 
	 // --- АК
	 
	 Попытка
		 rs.MoveFirst();
		 РамкиНаФото.Очистить();
		 Пока НЕ rs.EOF() Цикл
			 НовСтр = РамкиНаФото.Добавить();
			 
			 НовСтр.ID_PVR = rs.Fields("ID_PVR").Value;
			 НовСтр.ID_task_for_analisis =  rs.Fields("ID_task_for_analisis").Value;
			 НовСтр.X_top_left =  rs.Fields("X_top_left").Value;
			 НовСтр.Y_top_left =  rs.Fields("Y_top_left").Value;    
			 НовСтр.X_bottom_right =  rs.Fields("X_bottom_right").Value;
			 НовСтр.Y_bottom_right =  rs.Fields("Y_bottom_right").Value;  	
			 НовСтр.Item_Name =  rs.Fields("Item_Name").Value;  			 
			 // +++ АК CHUM 28.08.2017 0-000014962
			 // Необходимо для последующий записи изменений при смене класса объекта
			 НовСтр.ID_Item 			=  rs.Fields("ID_Item").Value;
			 НовСтр.ID_Type_Item 		=  rs.Fields("ID_Type_Item").Value;
			 // Добавим возможность отображения изменений при их наличии
			 ОтборСтрок = Новый Структура;
			 ОтборСтрок.Вставить("ID_Item", НовСтр.ID_Item);
			 МассивСтрокИзменений = ТаблицаИзменений.НайтиСтроки(ОтборСтрок);
			 
			 Если МассивСтрокИзменений.Количество() > 0 Тогда
				 ОтборСтрок.Очистить();
				 ОтборСтрок.Вставить("ИДКласса", МассивСтрокИзменений[0].ID_Type_Item_Previous);
				 
				 МассивКлассов = СписокДоступныхКлассов.НайтиСтроки(ОтборСтрок);
				 Если МассивКлассов.Количество() > 0 Тогда
					 НовСтр.Item_Name_Previous 		= МассивКлассов[0].ИмяКласса;
					 НовСтр.ID_Type_Item_Previous 	= МассивКлассов[0].ИДКласса;
					 НовСтр.Item_Name 				= НовСтр.Item_Name + " (" + НовСтр.Item_Name_Previous + ")";  			 
				 КонецЕсли;
			 Иначе
				 НовСтр.Item_Name_Previous 		= НовСтр.Item_Name;
				 НовСтр.ID_Type_Item_Previous 	= НовСтр.ID_Type_Item;
			 КонецЕсли;
			 
			 // --- АК
			 rs.MoveNext();
		 КонецЦикла; 
		 ADOСоединение.Close();
		 
	 Исключение
		 //Сообщить("Нет записей по кассе за период");
		 ADOСоединение.Close();
		 Возврат
	 КонецПопытки;
	 
 КонецПроцедуры
 
&НаКлиенте
 Процедура ФотоПриАктивизацииСтроки(Элемент)
	 
	 СтрокаЗадания = Элементы.Задания.ТекущиеДанные;
	 ТекСтр =         Элементы.Фото.ТекущиеДанные  ;
	 ВывестиФото(СтрокаЗадания,ТекСтр);
	 
	 Если ТекСтр <> Неопределено Тогда 		
		 Элементы.РамкиНаФото.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_PVR",ТекСтр.ID_PVR); 
	 КонецЕсли;
	 	 
 КонецПроцедуры

&НаКлиенте
Процедура  ВывестиФото(СтрокаЗадания,ТекСтр,СтрРамка = Неопределено)
	
	Если ТекСтр <> Неопределено Тогда 	
		
		ФотоHTML = "<html>
		|<body>
		|<img  src="""+ТекСтр.СсылкаНаФото+"""  >
		|</body>
		|</html>   ";  
		
		РамкиСтр = "";
		
		Если СтрокаЗадания<>Неопределено Тогда
			Отбор = Новый Структура();    
			Отбор.Вставить("ID_task_for_analisis",СтрокаЗадания.ID_task_for_analisis);
			Отбор.Вставить("ID_PVR",ТекСтр.ID_PVR);
			
			Рамки =  РамкиНаФото.НайтиСтроки(Отбор); 
			ПервыйЦикл = Истина;
			Для каждого Стр Из Рамки Цикл
				
				// +++ АК CHUM 28.08.2017 0-000014962
				
				//Если СтрРамка<>Неопределено и СтрРамка = Стр Тогда 
				//	Цвет =   "#f44242";
				//Иначе
				//	Цвет =   "#42f423";
				//КонецЕсли;
				//РамкиСтр = РамкиСтр+"
				//|    "+?(ПервыйЦикл,"",",")+" {
				//|		    x:"+Формат(Стр.X_top_left, "ЧН=; ЧГ=")+",
				//|          y:"+Формат(Стр.Y_top_left, "ЧН=; ЧГ=")+",
				//|          width:"+Формат(Вычислить(Стр.X_bottom_right-Стр.X_top_left), "ЧГ=")+",
				//|          height:"+Формат(Вычислить(Стр.Y_bottom_right-Стр.Y_top_left), "ЧГ=")+",
				//|          bWidth: 2,
				//|          bColor: """+Цвет+"""
				//|      } ";
				
				// +++ АК CHUM 28.08.2017 0-000014962
				
				Если СтрРамка <> Неопределено и Найти(СтрокаЗадания.ID_Target_Type, Строка(Стр.ID_Type_Item)) <> 0 Тогда 
					Цвет =   "#f44242";
				Иначе
					Цвет =   "#42f423";
				КонецЕсли;
				
				РамкиСтр = РамкиСтр+"
				|    "+?(ПервыйЦикл,"",",")+" {
				|		    x:"+Формат(Стр.X_top_left, "ЧН=; ЧГ=")+",
				|          y:"+Формат(Стр.Y_top_left, "ЧН=; ЧГ=")+",
				|          width:"+Формат(Вычислить(Стр.X_bottom_right-Стр.X_top_left), "ЧГ=")+",
				|          height:"+Формат(Вычислить(Стр.Y_bottom_right-Стр.Y_top_left), "ЧГ=")+",
				|          bWidth: " + ?(СтрРамка = Стр, "5,", "2,") + "
				|          bColor: """+Цвет+"""
				|      } ";
				// --- АК 
				ПервыйЦикл = Ложь;
			КонецЦикла;			 
			//РамкиСтр = Сред(РамкиСтр,1, СтрДлина(РамкиСтр)-1);
		Иначе 	 
			РамкиСтр = "";
		КонецЕсли;	 
		
		ФотоHTML = ПолучитьХТМЛ(); 	 
		ПараметрыРамок = "{
		| img:"""+ТекСтр.СсылкаНаФото+""",
		| areas:[
		|   "+РамкиСтр+"
		|  ],
		|  bgColor:""#fff"",
		|  margin:5,
		|  opacity:70
		|  }";
		ФотоHTML = СтрЗаменить(ФотоHTML,"&Параметры",ПараметрыРамок);
		

	КонецЕсли;

	 
	ОбновитьОтображениеДанных(); 

	
КонецПроцедуры

&НаСервере
Функция ПолучитьХТМЛ()
	
	ЭО = РеквизитФормыВЗначение("Объект");	
	
	Возврат ЭО.ПолучитьХТМЛ();
КонецФункции // ПолучитьХТМЛ()


&НаКлиенте
Процедура РамкиНаФотоПриАктивизацииСтроки(Элемент)
	
	СтрокаЗадания = Элементы.Задания.ТекущиеДанные;
	ТекСтр =         Элементы.Фото.ТекущиеДанные  ;
	СтрРамка =   Элементы.РамкиНаФото.ТекущиеДанные  ;
	ВывестиФото(СтрокаЗадания,ТекСтр,СтрРамка);
	
КонецПроцедуры

// +++ АК CHUM 28.08.2017 0-000014962

&НаСервере
Процедура ПоменятьСсылкуНаФотоНаСервере(ID_PVR, НоваяСсылкаНаФото);
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("srv-sql04");
	
	ТекстЗапроса = "
	|declare @ret int
	|exec @ret = MB.dbo.sp_SetLinkPrepImage " + Формат(ID_PVR, "ЧГ=") + ", '" + НоваяСсылкаНаФото + "'
	|select @ret
	|";
	
	Попытка
		result = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

	ADOСоединение.Close();
	
КонецПроцедуры

&НаСервере
Процедура РамкиНаФотоItem_NameПриИзмененииНаСервере(ID_Item, Item_Name)
	
	Если ЗначениеЗаполнено(Item_Name) Тогда
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ИмяКласса", Item_Name);
		
		МассивКлассов = СписокДоступныхКлассов.НайтиСтроки(ОтборСтрок);
		
		Если МассивКлассов.Количество() = 1 Тогда
			
			ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("srv-sql04");
			
			ТекстЗапроса = "
			|declare @ret int
			|exec @ret = MB.dbo.sp_SetDetectedTypeItem " + Формат(ID_Item, "ЧГ=") + ", " + Формат(МассивКлассов[0].ИДКласса, "ЧГ=") + "
			|select @ret
			|";
			
			Попытка
				resultOfSet = ADOСоединение.Execute(ТекстЗапроса);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
						
			ADOСоединение.Close();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьККаталогуИзКонстантыНаСервере()
	Возврат Константы.АК_КаталогДляФотоСКамер.Получить();
КонецФункции

&НаКлиенте
Процедура РамкиНаФотоItem_NameПриИзменении(Элемент)
	
	Если Элементы.РамкиНаФото.ТекущиеДанные <> Неопределено Тогда
		РамкиНаФотоItem_NameПриИзмененииНаСервере(Элементы.РамкиНаФото.ТекущиеДанные.ID_Item, Элементы.РамкиНаФото.ТекущиеДанные.Item_Name);
		
		ОтборСтрокДоступныхКлассов = Новый Структура();
		ОтборСтрокДоступныхКлассов.Вставить("ИДКласса", Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item_Buffer);
		
		СтрокиКлассов = СписокДоступныхКлассов.НайтиСтроки(ОтборСтрокДоступныхКлассов);
		
		Если СтрокиКлассов.Количество() > 0 Тогда
			Элементы.РамкиНаФото.ТекущиеДанные.Item_Name_Previous 		= СтрокиКлассов[0].ИмяКласса;
			Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item_Previous 	= Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item_Buffer;
			
			ОтборСтрокДоступныхКлассов.Очистить();
			ОтборСтрокДоступныхКлассов.Вставить("ИмяКласса", Элементы.РамкиНаФото.ТекущиеДанные.Item_Name);
			Элементы.РамкиНаФото.ТекущиеДанные.Item_Name 				= Элементы.РамкиНаФото.ТекущиеДанные.Item_Name + " (" + Элементы.РамкиНаФото.ТекущиеДанные.Item_Name_Previous + ")";
			
			СтрокиКлассов = СписокДоступныхКлассов.НайтиСтроки(ОтборСтрокДоступныхКлассов);
			Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item = СтрокиКлассов[0].ИДКласса;
		КонецЕсли;
		
		Если Элементы.Фото.ТекущиеДанные <> Неопределено Тогда
			Попытка
				// Теперь сохраним фото на диск и сменим путь до фото в таблице
				АдресФото = Элементы.Фото.ТекущиеДанные.СсылкаНаФото;
				
				ПапкаДляКартинок = ПолучитьПутьККаталогуИзКонстантыНаСервере();
				
				Если Найти(АдресФото, "http") <> 0 И ЗначениеЗаполнено(ПапкаДляКартинок) Тогда
					АдресСервера 	= СтрЗаменить(АдресФото, "http://", "");
					АдресСервера 	= СтрЗаменить(АдресСервера, "https://", "");
					
					АдресРесурсаНаСервере = АдресСервера;
					
					НомерСимвола 	= Найти(АдресСервера, "/");
					АдресСервера 	= Лев(АдресСервера, НомерСимвола - 1);
					
					АдресРесурсаНаСервере = СтрЗаменить(АдресРесурсаНаСервере, АдресСервера, "");
					
					ИнтернетСоединение = Новый HTTPСоединение(АдресСервера);
					
					ЗапросФото = Новый HTTPЗапрос(АдресРесурсаНаСервере);
					
					Если Прав(ПапкаДляКартинок, 1) <> "\" Тогда
						ПапкаДляКартинок 	= ПапкаДляКартинок + "\";
					КонецЕсли;
					ИмяФайла 			= Сред(АдресФото, Найти(АдресФото, "id=") + 3) + ".jpg";
					
					ОтветСервера = ИнтернетСоединение.Получить(ЗапросФото, ПапкаДляКартинок + ИмяФайла);
					
					Если ОтветСервера.КодСостояния = 200 Тогда
						ПоменятьСсылкуНаФотоНаСервере(Элементы.Фото.ТекущиеДанные.ID_PVR, ПапкаДляКартинок + ИмяФайла);
						
						Элементы.Фото.ТекущиеДанные.Link_PrepImage = ПапкаДляКартинок + ИмяФайла;
					КонецЕсли;
				ИначеЕсли Не ЗначениеЗаполнено(ПапкаДляКартинок) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан путь в константе ""Каталог для фото с камер""");
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		//ЗаданияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФотоVerificationПриИзмененииНаСервере(ID_PVR, Verification)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение("srv-sql04");
	
	ТекстЗапроса = "
	|declare @ret int
	|exec @ret = MB.dbo.sp_SetPVRVerification " + Формат(ID_PVR, "ЧГ=") + ", " + ?(Verification, 1, "NULL") + "
	|select @ret
	|";
	
	Попытка
		result = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

	ADOСоединение.Close();
	
КонецПроцедуры

&НаКлиенте
Процедура ФотоVerificationПриИзменении(Элемент)
	
	Если Элементы.Фото.ТекущиеДанные <> Неопределено Тогда
		ФотоVerificationПриИзмененииНаСервере(Элементы.Фото.ТекущиеДанные.ID_PVR, Элементы.Фото.ТекущиеДанные.Verification);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РамкиНаФотоItem_NameНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.РамкиНаФото.ТекущиеДанные <> Неопределено Тогда
		Элементы.РамкиНаФото.ТекущиеДанные.Item_Name_Buffer 	= Элементы.РамкиНаФото.ТекущиеДанные.Item_Name;
		Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item_Buffer 	= Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РамкиНаФотоItem_NameИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Элементы.РамкиНаФото.ТекущиеДанные <> Неопределено Тогда
		Элементы.РамкиНаФото.ТекущиеДанные.Item_Name_Buffer 	= Элементы.РамкиНаФото.ТекущиеДанные.Item_Name;
		Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item_Buffer 	= Элементы.РамкиНаФото.ТекущиеДанные.ID_Type_Item;
	КонецЕсли;
	
КонецПроцедуры

// --- АК

&НаСервере
Функция ПолучитьКамеру(ID)
	
	//
	Результат = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Ссылка
	     |ИЗ
	     |	Справочник.АК_ID_Камеры КАК Таблица
	     |ГДЕ
	     |	Таблица.IDКамеры = &ID";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("ID", ID);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;	
	
	//
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура КомандаВыделитьЗону(Команда)
	
	//
	ТекущаяСтрока = Элементы.Фото.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Камера = ПолучитьКамеру(ТекущаяСтрока.ip_camera);
	Если НЕ ЗначениеЗаполнено(Камера) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Форма = ПолучитьФорму("Обработка.РаботаСКамерами_РазметкаРакурсов.Форма.Форма1",, ЭтаФорма);
	Форма.ВыбраннаяКамера = Камера;
	Форма.Открыть();
	
КонецПроцедуры

