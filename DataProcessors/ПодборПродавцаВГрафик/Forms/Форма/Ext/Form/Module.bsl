
&НаКлиенте
Процедура ЗаполнитьСписокКандидатов(Команда)
	Если Не ЗначениеЗаполнено(Объект.Дата) ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		Объект.КандидатыНаВыход.Очистить();
		Сообщить("Не заполнен магазин или дата");
		Возврат;
	КонецЕсли; 
	ЗаполнитьСписокКандидатовСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКандидатовСервер()
	УстановитьПривилегированныйРежим(Истина);
	Объект.КандидатыНаВыход.Очистить();
	
	// Запишем в регистр
	Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
		КлючСлово="";
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		КлючСлово="Грузчиков";
	ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
		КлючСлово="Кассиров";
	ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
		КлючСлово="Промоутеров";
	ИначеЕсли ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
		КлючСлово="Пекарей";
	КонецЕсли; 
	
	Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
		Свойство="СвойствоПродавца";
	Иначе
		Свойство="СвойствоСотрудника";
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцов.Сотрудник
	|ПОМЕСТИТЬ втПродавцы
	|ИЗ
	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Сотрудник.Активный
	|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоМесяца И &Дата "
	+?(ГруппаСотрудников="СтаршиеПродавцы","И  ТабельРаботыПродавцов.СвойствоПродавца = 2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыПродавцов.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПродавцы.Сотрудник
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	втПродавцы КАК втПродавцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТабельРаботыПродавцов.Период КАК Период,
	|			ТабельРаботыПродавцов.Сотрудник КАК Сотрудник,
	|			ТабельРаботыПродавцов.Группа КАК Группа,
	|			ТабельРаботыПродавцов.ТорговаяТочка КАК ТорговаяТочка,
	//|			ТабельРаботыПродавцов.Отсутствие КАК Отсутствие,
	|			ТабельРаботыПродавцов.КоличествоЧасов КАК КоличествоЧасов
	//|			ТабельРаботыПродавцов.Телефон КАК Телефон
	|		ИЗ
	|			РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	|		ГДЕ
	|			ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2) КАК ВложенныйЗапрос
	|		ПО втПродавцы.Сотрудник = ВложенныйЗапрос.Сотрудник
	|ГДЕ
	|	ВложенныйЗапрос.Сотрудник ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	втПродавцы.Сотрудник
	|;
	|ВЫБРАТЬ
	|	ТабельРаботыГрузчиков.Сотрудник,
	|	КОЛИЧЕСТВО(ТабельРаботыГрузчиков.ТорговаяТочка) КАК Выходов
	|Поместить втВыходов
	|ИЗ
	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыГрузчиков
	|ГДЕ
	|	ТабельРаботыГрузчиков.Период МЕЖДУ &НачалоМесяца И &Дата2
	|	И ТабельРаботыГрузчиков.ТорговаяТочка = &ТорговаяТочка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыГрузчиков.Сотрудник;
	|ВЫБРАТЬ
	|	ТабельРаботыГрузчиков.Сотрудник,
	|	КОЛИЧЕСТВО(ТабельРаботыГрузчиков.ТорговаяТочка) КАК Выходов
	|Поместить втВыходов15
	|ИЗ
	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыГрузчиков
	|ГДЕ
	|	ТабельРаботыГрузчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТабельРаботыГрузчиков.ТорговаяТочка<> &Пусто
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыГрузчиков.Сотрудник;

	|ВЫБРАТЬ
	|	ТабельРаботыГрузчиков.Сотрудник,
	|	КОЛИЧЕСТВО(ТабельРаботыГрузчиков.ТорговаяТочка) КАК Выходов
	|Поместить втВыходовСП
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыГрузчиков
	|ГДЕ
	|	ТабельРаботыГрузчиков.Период МЕЖДУ &НачалоМесяца И &Дата2
	|	И ТабельРаботыГрузчиков.СвойствоПродавца = 2
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельРаботыГрузчиков.Сотрудник;
		
	|ВЫБРАТЬ
	 |	ОтказыПродавцовВыходитьНаРаботу.Продавец,
	 |	Сумма(ОтказыПродавцовВыходитьНаРаботу.ОтказВыхода) как ОтказВыхода
	 |Поместить ВтОтказыПродавцовВыходитьНаРаботу
	 |ИЗ
	 |	РегистрСведений.ОтказыПродавцовВыходитьНаРаботу КАК ОтказыПродавцовВыходитьНаРаботу
	 |ГДЕ
	 |	ОтказыПродавцовВыходитьНаРаботу.Период МЕЖДУ &НачалоМесяца И &Дата
	 |Сгруппировать по ОтказыПродавцовВыходитьНаРаботу.Продавец
	 |;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПродавцовСрезПоследних.Продавец,
	|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
	//+++АК mika 2018.08.13 ИП-00019326
	|   СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота КАК КоординатыШирота, 
	|   СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота КАК КоординатыДолгота,
	//---АК mika
	|	(СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) + (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) КАК Расстояние,
	|	СУММА(ЕСТЬNULL(ОтказыПродавцовВыходитьНаРаботу.ОтказВыхода, 0)) КАК КоличествоОтказов,
	|	СтатусыПродавцовСрезПоследних.ПЧ,
	|	СтатусыПродавцовСрезПоследних.Статус,
	|	СУММА(ЕстьNull(втВыходов.Выходов,0)) как Выходов,
	|	СУММА(ЕстьNull(втВыходов15.Выходов,0)) как Выходов15,
	|	СУММА(ЕстьNull(втВыходовСП.Выходов,0)) как СП,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Телефон,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(100)) КАК ДопТелефон
	|ИЗ
	|	РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = вт.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыходов КАК втВыходов
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = втВыходов.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыходов15 КАК втВыходов15
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = втВыходов15.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыходовСП КАК втВыходовСП
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = втВыходовСП.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОтказыПродавцовВыходитьНаРаботу КАК ОтказыПродавцовВыходитьНаРаботу
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = ОтказыПродавцовВыходитьНаРаботу.Продавец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
	|		ПО СтатусыПродавцовСрезПоследних.Продавец = КонтактнаяИнформацияДопНомер.Объект
	|			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	| где Статус В (&Статус) //И НЕ СтатусыПродавцовСрезПоследних.НеХожуНаПодработки //И 		(СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) + (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) <0.0043
	//+++АК mika 2018.08.13 ИП-00019326
	|      И НЕ СтатусыПродавцовСрезПоследних.НеХожуНаПодработки
	//---АК mika
	|СГРУППИРОВАТЬ ПО
	|	СтатусыПродавцовСрезПоследних.Продавец,
	|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
	//+++АК mika 2018.08.13 ИП-00019326
	|   СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота, 
	|   СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота,
	//---АК mika
	|	(СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) + (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота),
	|	СтатусыПродавцовСрезПоследних.ПЧ,
	|	СтатусыПродавцовСрезПоследних.Статус,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(100))
	|Упорядочить по (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыШирота - &Широта) + (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота) * (СтатусыПродавцовСрезПоследних.БлижайшийМагазин.КоординатыДолгота - &Долгота)";
	МасСтатус=новый Массив;
	МасСтатус.Добавить(Перечисления.СтатусыПродавцов.График51);
	МасСтатус.Добавить(Перечисления.СтатусыПродавцов.График42);
	//МасСтатус.Добавить(Перечисления.СтатусыПродавцов.График33);
	
	Запрос.УстановитьПараметр("Статус", МасСтатус);
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата-7*24*60*60));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата+7*24*60*60));
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоДня(Объект.Дата-40*24*60*60));
	Запрос.УстановитьПараметр("Широта", Объект.Магазин.КоординатыШирота);
	Запрос.УстановитьПараметр("Долгота", Объект.Магазин.КоординатыДолгота);
	Запрос.УстановитьПараметр("ТорговаяТочка", Объект.Магазин);
	Запрос.УстановитьПараметр("Пусто", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	Если Ближайшие Тогда //+++АК mika 2018.08.13 ИП-00019326
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ТаблицаКандидатов = Результат.Выгрузить();
			ТаблицаКандидатов.Колонки.Добавить("РасстояниеМетры", Новый ОписаниеТипов("Число")); 
			
			ВыборкаДетальныеЗаписи = ПолучитьВыборкуБлижайшихМагазинов(ТаблицаКандидатов, 12000, Запрос.Параметры.Широта, Запрос.Параметры.Долгота);
			
			Если ВыборкаДетальныеЗаписи = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	                     	
	Иначе //---АК mika
		
		Результат = Запрос.Выполнить();
		//Запрос.текст="		ВЫБРАТЬ
		//	|	втПродавцы.Сотрудник
		//	|ИЗ
		//	|	втПродавцы КАК втПродавцы
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//	|			ТабельРаботыПродавцов.Период КАК Период,
		//	|			ТабельРаботыПродавцов.Сотрудник КАК Сотрудник,
		//	|			ТабельРаботыПродавцов.Группа КАК Группа,
		//	|			ТабельРаботыПродавцов.ТорговаяТочка КАК ТорговаяТочка,
		//	|			ТабельРаботыПродавцов.Отсутствие КАК Отсутствие,
		//	|			ТабельРаботыПродавцов."+Свойство+" КАК СвойствоПродавца,
		//	|			ТабельРаботыПродавцов.КоличествоЧасов КАК КоличествоЧасов,
		//	|			ТабельРаботыПродавцов.Телефон КАК Телефон
		//	|		ИЗ
		//	|			РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
		//	|		ГДЕ
		//	|			ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2) КАК ВложенныйЗапрос
		//	|		ПО втПродавцы.Сотрудник = ВложенныйЗапрос.Сотрудник
		//	|ГДЕ
		//	|	ВложенныйЗапрос.Сотрудник ЕСТЬ NULL 
		//	|
		//	|СГРУППИРОВАТЬ ПО
		//	|	втПродавцы.Сотрудник";
		// ТЗ=Запрос.Выполнить().Выгрузить();
		//
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцов.Период КАК Период,
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.Группа,
	|	ТабельРаботыПродавцов.ТорговаяТочка,"
	+?(ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы"  ИЛИ  ГруппаСотрудников="Грузчики","
	|	ТабельРаботыПродавцов."+Свойство+" как СвойствоПродавца,","")+"
	|"	+?(Не ГруппаСотрудников="Промоутеры","
	|	ТабельРаботыПродавцов.Отсутствие как Отсутствие,","")+"
	|	ТабельРаботыПродавцов.КоличествоЧасов
	//|	,ТабельРаботыПродавцов.Телефон
	|ИЗ
	|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период МЕЖДУ &Дата1 И &Дата2
	//|	И ТабельРаботыПродавцов.ТорговаяТочка <> &ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Объект.Дата-5*24*60*60));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Объект.Дата+5*24*60*60));
	//Запрос.УстановитьПараметр("ТорговаяТочка", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	ТЗТабель = Результат.Выгрузить();
	
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаНач=Объект.Дата;
		ДнейрабочихПосле=0;
		Пока Истина Цикл
			ДатаНач=ДатаНач+24*60*60;
			МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
			Если МасСтр.Количество()=0 Тогда
				Прервать;
			Иначе	
				Если ЗначениеЗаполнено(МасСтр[0].ТорговаяТочка) Тогда
					ДнейрабочихПосле=ДнейрабочихПосле+1;
			    Иначе
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		ДатаНач=Объект.Дата;
		ДнейрабочихДо=0;
		Сч=0;
		Пока Истина Цикл
			Сч=Сч+1;
			ДатаНач=ДатаНач-24*60*60;
			МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
			Если МасСтр.Количество()=0 Тогда
				Прервать;
			Иначе	
				Если ЗначениеЗаполнено(МасСтр[0].ТорговаяТочка) Тогда
					ДнейрабочихДо=ДнейрабочихДо+1;
					Если Сч=1 И (ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы") И (МасСтр[0].СвойствоПродавца=5 ИЛИ МасСтр[0].СвойствоПродавца=6) Тогда
						ДнейрабочихДо=100;
						Прервать;
					КонецЕсли; 
			    Иначе
					Прервать;
				КонецЕсли; 
				//Если Сч=1 И (ГруппаСотрудников="Грузчики") И (МасСтр[0].СвойствоПродавца=1) Тогда
				//	ДнейрабочихДо=100;
				//	Прервать;
				//КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла; 
		
		Сч=0;
		Фл=Ложь;
		ДатаНач=Объект.Дата;
		Пока Истина Цикл
			Сч=Сч+1;
			ДатаНач=ДатаНач-24*60*60;
			МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
			Если МасСтр.Количество()=0 Тогда
			Иначе	
				Прервать;
			КонецЕсли;
			Если Сч=5 Тогда
				Фл=Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если Фл Тогда
			Продолжить;
		КонецЕсли; 
		
		
		Если Не ГруппаСотрудников="Промоутеры" Тогда
			
			Сч=0;
			ДатаНач=Объект.Дата;
			Фл=Ложь;
			Пока Истина Цикл
				Сч=Сч+1;
				ДатаНач=ДатаНач-24*60*60;
				МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
				Если МасСтр.Количество()>0 Тогда
					Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Прогул ИЛИ МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Уволен Тогда
						Фл=Истина;
						Прервать;
					КонецЕсли; 	
				КонецЕсли;
				Если Сч=5 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если Фл Тогда
				Продолжить;
			КонецЕсли; 
			Сч=0;
			ДатаНач=Объект.Дата;
			Фл=Ложь;
			Пока Истина Цикл
				Сч=Сч+1;
				ДатаНач=ДатаНач+24*60*60;
				МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
				Если МасСтр.Количество()>0 Тогда
					Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Прогул ИЛИ МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Уволен Тогда
						Фл=Истина;
						Прервать;
					КонецЕсли; 	
				КонецЕсли;
				Если Сч=5 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если Фл Тогда
				Продолжить;
			КонецЕсли; 
			
			Сч=0;
			ДатаНач=Объект.Дата;
			Фл1=Ложь;
			Пока Истина Цикл
				Сч=Сч+1;
				ДатаНач=ДатаНач+24*60*60;
				МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
				Если МасСтр.Количество()>0 Тогда
					Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Отпуск  Тогда
						Фл1=Истина;
						Прервать;
					Иначе
						Прервать;
					КонецЕсли; 	
				КонецЕсли;
				Если Сч=5 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			
			Сч=0;
			ДатаНач=Объект.Дата;
			Фл2=Ложь;
			Пока Истина Цикл
				Сч=Сч+1;
				ДатаНач=ДатаНач-24*60*60;
				МасСтр=ТЗТабель.НайтиСтроки(Новый Структура("Период,Сотрудник",ДатаНач,ВыборкаДетальныеЗаписи.Продавец));
				Если МасСтр.Количество()>0 Тогда
					Если МасСтр[0].Отсутствие=Перечисления.ВидыОтсутствия.Отпуск  Тогда
						Фл2=Истина;
						Прервать;
					Иначе
						Прервать;
					КонецЕсли; 	
				КонецЕсли;
				Если Сч=5 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если Фл1 И Фл2 Тогда
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли; 
		
		
		
		
		Если ВыборкаДетальныеЗаписи.Статус=Перечисления.СтатусыПродавцов.График51 Тогда
			Норма=5;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус=Перечисления.СтатусыПродавцов.График42 Тогда
			Норма=4;
		Иначе 
			Норма=3;
		КонецЕсли; 
		
		Если ДнейрабочихДо+ДнейрабочихПосле<Норма ИЛИ Не (ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы") Тогда
			НовСтр=Объект.КандидатыНаВыход.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
			//НовСтр.Расстояние=?(ВыборкаДетальныеЗаписи.Расстояние=0,1,sqrt(ВыборкаДетальныеЗаписи.Расстояние)+1)*
			//(ВыборкаДетальныеЗаписи.КоличествоОтказов+1)*(ВыборкаДетальныеЗаписи.Выходов15+1)/(ВыборкаДетальныеЗаписи.Выходов+1);
			НовСтр.Расстояние=ВыборкаДетальныеЗаписи.Расстояние;
		КонецЕсли; 
	КонецЦикла;
	Объект.КандидатыНаВыход.Сортировать("Расстояние");
	ОбновитьГрафикНаСервере(Объект.КандидатыНаВыход.Выгрузить().ВыгрузитьКолонку("Продавец"));
	
	Если ТабличныйДокумент.ТекущаяОбласть<>Неопределено Тогда
		НомСтр=ТабличныйДокумент.ТекущаяОбласть.Низ-3;
		Если НомСтр>=0 И НомСтр<=Объект.КандидатыНаВыход.Количество()-1 Тогда
			ТекущийПродавец=Объект.КандидатыНаВыход[НомСтр].Продавец;
		Иначе	
			ТекущийПродавец=Неопределено;	
		КонецЕсли; 
	Иначе	
		ТекущийПродавец=Неопределено;	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикНаСервере(Сотрудники)
	УстановитьПривилегированныйРежим(Истина);
	ТабличныйДокумент.Очистить();
	ОсновнаяТаблица.Очистить();
	ТаблицаЦветовТТ.Очистить();
	ВходящиеДанные.Очистить();
	ПорядокФормированияТабеля.Очистить();
	Если Не ГруппаСотрудников="Промоутеры" Тогда
		Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
			КлючСлово="";
		ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
			КлючСлово="Грузчиков";
		ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
			КлючСлово="Кассиров";
		ИначеЕсли ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
			КлючСлово="Пекарей";
		КонецЕсли; 
		
		Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
			Свойство="СвойствоПродавца";
		Иначе
			Свойство="СвойствоСотрудника";
		КонецЕсли; 
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СпецификаФормированияТабеля.ФизическоеЛицо,
		|	СпецификаФормированияТабеля.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений.СпецификаФормированияТабеля"+КлючСлово+ " КАК СпецификаФормированияТабеля
		|ГДЕ
		|	СпецификаФормированияТабеля.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
		ПорядокФормированияТабеля.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник
		| Поместить вт
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник в (&Сотрудники)
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода "
		+?(ГруппаСотрудников="СтаршиеПродавцы","И  ТабельРаботыПродавцов.СвойствоПродавца = 2","")+";
		|
		|                                                                     
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов."+Свойство+" как СвойствоПродавца,
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	МАКСИМУМ(ЕСТЬNULL(СпецификаФормированияТабеля.Порядок, 0)) КАК Порядок,
		|	ТабельРаботыПродавцов.Сотрудник.Код КАК КодСотрудника,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
		|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		|	СтатусыПродавцовСрезПоследних.Статус,
		|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
		|	СтатусыПродавцовСрезПоследних.ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеля"+КлючСлово+" КАК СпецификаФормированияТабеля
		|		ПО СпецификаФормированияТабеля.Группа = &Группа  И 
		|			ТабельРаботыПродавцов.Сотрудник = СпецификаФормированияТабеля.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ТабельРаботыПродавцов.Сотрудник = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
		|		ПО ТабельРаботыПродавцов.Сотрудник = КонтактнаяИнформацияДопНомер.Объект
		|			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
		|		ПО ТабельРаботыПродавцов.Сотрудник = СтатусыПродавцовСрезПоследних.Продавец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ) КАК ЦФОСтруктурныхЕдиниц
		|		ПО ТабельРаботыПродавцов.ТорговаяТочка = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник в (Выбрать вт.Сотрудник из вт как вт)                                                     
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельРаботыПродавцов.Отсутствие,
		|	ТабельРаботыПродавцов.Период,
		|	ТабельРаботыПродавцов.Сотрудник,
		|	ТабельРаботыПродавцов.ТорговаяТочка,
		|	ТабельРаботыПродавцов."+Свойство+",
		|	ТабельРаботыПродавцов.КоличествоЧасов,
		|	ТабельРаботыПродавцов.Сотрудник.Код,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)),
		|	ТабельРаботыПродавцов.ТорговаяТочка.Наименование,
		|	ТабельРаботыПродавцов.ТорговаяТочка.ТипРозничнойТочки,
		|	СтатусыПродавцовСрезПоследних.Статус,
		|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин,
		|	СтатусыПродавцовСрезПоследних.ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Объект.Дата-7*24*60*60));
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(Объект.Дата+7*24*60*60));
		Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
		//Запрос.УстановитьПараметр("ТорговаяТочка", 		Об);
		//Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
		Запрос.УстановитьПараметр("Сотрудники", 		Сотрудники);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			
			ЗаполнитьЗначенияСвойств(ВходящиеДанные.Добавить(), Выборка);
			
			НоваяСтр = ОсновнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("СвойствоПродавца", 	Выборка.СвойствоПродавца);
			СтруктураДанных.Вставить("ТорговаяТочка", 		Выборка.ТорговаяТочка);
			СтруктураДанных.Вставить("ТорговаяТочкаНаименование", 		Выборка.ТорговаяТочкаНаименование);
			СтруктураДанных.Вставить("ТорговаяТочкаТипРозничнойТочки", 		Выборка.ТорговаяТочкаТипРозничнойТочки);
			СтруктураДанных.Вставить("Отсутствие", 			Выборка.Отсутствие);
			СтруктураДанных.Вставить("КоличествоЧасов", 	Выборка.КоличествоЧасов);
			
			Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
			
			НоваяСтр.Представление = Представление;
			
		КонецЦикла;
		
		ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		
		Макет = ОбъектОбработка.ПолучитьМакет("График");
		ОбластьШапка 			= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
		ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
		ОбластьСтрокаПериод 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");

		
		ТЗОсновная = РеквизитФормыВЗначение("ОсновнаяТаблица");
		
		ТЗСотрудники = ТЗОсновная.Скопировать();
		//АК БЕЛ 26.05.2017+
		//ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон");
		ТЗСотрудники.Свернуть("Сотрудник,Порядок,КодСотрудника,Телефон,ДопТелефон,Статус,БлижайшийМагазин,ПЧ");
		//АК БЕЛ 26.05.2017-
		ТЗСотрудники.Сортировать("Порядок");
		КоличествоСотрудников = ТЗСотрудники.Количество();
		
		// Вывод шапки
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Для Каждого СтрТЗ Из Объект.КандидатыНаВыход Цикл
			//mika Дата: 2017.10.18 ИП-00016989
			//Если в табеле за текущий период по сотруднику нет соответствующих условиям записей, не добавлять его в шапку.
			//Поскольку подобная проверка есть при заполнении колонок данными, соответственно происходил "сдвиг" данных в колонках. 
			НайденныеСтроки = ТЗСотрудники.НайтиСтроки(Новый Структура("Сотрудник", СтрТЗ.Продавец));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			//mika
			ЗаполнитьЗначенияСвойств(ОбластьШапкаСотрудник.Параметры,СтрТЗ);
			ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,Телефон",
			СтрТЗ.Продавец,  СтрТЗ.Телефон);
			ОбластьШапкаСотрудник.Параметры.Телефон = СокрЛП(СтрТЗ.Телефон) + ?(ЗначениеЗаполнено(СтрТЗ.ДопТелефон), "; " + СокрЛП(СтрТЗ.ДопТелефон), "");
			ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
			
		КонецЦикла;
		
		ЗаполнитьТаблицуЦветовТТ();
		ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
		
		ТаблицаВыходных = ЗаполнитьТаблицуВыходных(НачалоДня(Объект.Дата-7*24*60*60), КонецДня(Объект.Дата+7*24*60*60));
		НачалоПериода 	= НачалоДня(Объект.Дата-7*24*60*60);
		
		Пока НачалоПериода <= НачалоДня(КонецДня(Объект.Дата+7*24*60*60)) Цикл
			
			Выходной = (ТаблицаВыходных.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
			
			Если Выходной Тогда
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
			Иначе	
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
			
			ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
			ОбластьСтрокаПериод.Параметры.Период1 = Новый ФиксированнаяСтруктура("Период", НачалоПериода) ;
			ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
			
			Для Каждого Стр Из Объект.КандидатыНаВыход Цикл
				
				МасСтр=ТЗСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Стр.Продавец));
				Если МасСтр.Количество()=0 Тогда
					Продолжить;
				Иначе
					СтрТЗ =МасСтр[0];
					
					ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
					
					НайденныеСтроки = ТЗОсновная.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
					
					Если НайденныеСтроки.Количество()Тогда
						
						СтрокаСДанными = НайденныеСтроки[0];
						
						СтруктураДанных = Новый Структура();
						СтруктураДанных.Вставить("СвойствоПродавца", 	СтрокаСДанными.СвойствоПродавца);
						СтруктураДанных.Вставить("ТорговаяТочка", 		СтрокаСДанными.ТорговаяТочка);
						СтруктураДанных.Вставить("ТорговаяТочкаНаименование", 		СтрокаСДанными.ТорговаяТочкаНаименование);
						СтруктураДанных.Вставить("ТорговаяТочкаТипРозничнойТочки", 		СтрокаСДанными.ТорговаяТочкаТипРозничнойТочки);
						СтруктураДанных.Вставить("Отсутствие", 			СтрокаСДанными.Отсутствие);
						СтруктураДанных.Вставить("КоличествоЧасов", 	СтрокаСДанными.КоличествоЧасов);
						
						Представление = ПолучитьПредставлениеТорговойТочки(СтруктураДанных);
						
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = Представление;
						
						
						НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТорговаяТочка, "ТорговаяТочка");
						
						Если НайденнаяСтрокаЦвет <> Неопределено Тогда
							
							ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
							
						КонецЕсли;
						//ЦФО=Неопределено;
						//МасСтрЦФО=ОсновнаяТаблица.НайтиСтроки(Новый Структура("Сотрудник,Период",СтрТЗ.Сотрудник,НачалоПериода));
						//Если МасСтрЦФО.Количество() Тогда
						//	ЦФО=МасСтрЦФО[0].ЦФО;
						//КонецЕсли; 
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период,Отсутствие,Группа",
						СтрТЗ.Сотрудник, НачалоПериода,СтрокаСДанными.Отсутствие,СтрокаСДанными.ЦФО);
					Иначе
						
						// Добавим пустую строку с периодом
						НоваяСтрока = ОсновнаяТаблица.Добавить();
						НоваяСтрока.Сотрудник = СтрТЗ.Сотрудник;
						НоваяСтрока.Период = НачалоПериода;
						
						СтрВход = ВходящиеДанные.Добавить();
						СтрВход.Сотрудник = СтрТЗ.Сотрудник;
						СтрВход.Период = НачалоПериода;
						Если Объект.Дата=НачалоПериода Тогда
							ОбластьСтрокаСотрудник.Область().ЦветФона = WebЦвета.Зеленый;//Цвет_ТТ;
						Иначе	
							ОбластьСтрокаСотрудник.Область().ЦветФона = WebЦвета.Белый;//Цвет_ТТ;
						КонецЕсли;
						ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период,Отсутствие,Группа",
						СтрТЗ.Сотрудник, НачалоПериода,Неопределено,Неопределено);
					КонецЕсли;
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
				
				ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка = "";
				
			КонецЦикла;
			
			НачалоПериода = НачалоПериода + 86400;
			
		КонецЦикла;

	Иначе	
		ОчиститьДанныеНаСервере();
		
		ЗаполнитьТаблицуСотрудникПериодНаСервере(Сотрудники);
		
		Макет = ПолучитьМакетНаСервере();
		ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПериод");
		ОбластьСтрокаПериод = Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПериод");
		
		// Вывод угла шапки
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ИнформацияПоСотрудникам.Сортировать("Порядок, Сотрудник");
		
		//// Вывод сотрудников
		Для Каждого Сотр Из Объект.КандидатыНаВыход Цикл
			
			ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотр.Продавец);
			ОбластьШапкаСотрудник 	= Макет.ПолучитьОбласть("ОбластьШапка|ОбластьПродавец");
			ОбластьШапкаСотрудник.Параметры.Заполнить(Сотр);
			ОбластьШапкаСотрудник.Параметры.Телефон = СокрЛП(Сотр.Телефон) + ?(ЗначениеЗаполнено(Сотр.ДопТелефон), "; " + СокрЛП(Сотр.ДопТелефон), "");
			//ОбластьШапкаСотрудник.Параметры.Сотрудник = ФИО;
			//ОбластьШапкаСотрудник.Параметры.Магазин = Строка(Сотр.Магазин)+" "+?(Сотр.ПЧ,"п/ч","");
			
			ОбластьШапкаСотрудник.Параметры.Расшифровка = Новый ФиксированнаяСтруктура("Сотрудник,Телефон", Сотр.Продавец, Сотр.Телефон);
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаСотрудник);
			
		КонецЦикла;
		
		ЗаполнитьТаблицуЦветовТТ();
		ЦветаТТ = РеквизитФормыВЗначение("ТаблицаЦветовТТ");
		
		Выходные = ЗаполнитьТаблицуВыходных(НачалоДня(Объект.Дата-7*24*60*60), КонецДня(Объект.Дата+7*24*60*60));
		НачалоПериода 	= НачалоДня(Объект.Дата-7*24*60*60);
		
		Пока НачалоПериода <= НачалоДня(Объект.Дата+7*24*60*60) Цикл
			
			Выходной = (Выходные.Найти(НачалоПериода, "ДатаКалендаря") <> Неопределено);
			
			Если Выходной Тогда
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Красный;
			Иначе	
				ОбластьСтрокаПериод.Область().ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
			
			ОбластьСтрокаПериод.Параметры.Период = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
			ОбластьСтрокаПериод.Параметры.ПериодПрописью = Формат(НачалоПериода, "ДФ=ддд");
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаПериод);
			Для Каждого Стр Из Объект.КандидатыНаВыход Цикл
			
				МасСтр=ИнформацияПоСотрудникам.НайтиСтроки(Новый Структура("Сотрудник",Стр.Продавец));
				Если МасСтр.Количество()=0 Тогда
					Продолжить;
				Иначе
					СтрТЗ =МасСтр[0];
				
				ОбластьСтрокаСотрудник 	= Макет.ПолучитьОбласть("ОбластьСтрока|ОбластьПродавец");
				
				НайденныеСтроки = ТаблицаСотрудникПериод.НайтиСтроки(Новый Структура("Сотрудник, Период", СтрТЗ.Сотрудник, НачалоПериода));
				
				Если НайденныеСтроки.Количество()Тогда
					
					СтрокаСДанными = НайденныеСтроки[0];
					ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаСДанными);
					
					
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка=СтрокаСДанными.Представление+"("+Строка(СтрокаСДанными.КоличествоЧасов)+"ч.)";
					// Имеет смысл если есть точки
					Если СтрокаСДанными.ТаблицаДанных.Количество() Тогда
						
						НайденнаяСтрокаЦвет = ЦветаТТ.Найти(СтрокаСДанными.ТаблицаДанных[0].ТорговаяТочка, "ТорговаяТочка");
						
						Если НайденнаяСтрокаЦвет <> Неопределено Тогда
							ОбластьСтрокаСотрудник.Область().ЦветФона = НайденнаяСтрокаЦвет.Цвет;//Цвет_ТТ;
						КонецЕсли;
						
					КонецЕсли;
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период",
					СтрТЗ.Сотрудник, НачалоПериода);
				Иначе
					
					// Добавим пустую строку с периодом
					СтрВход = ТаблицаСотрудникПериод.Добавить();
					СтрВход.Сотрудник = СтрТЗ.Сотрудник;
					СтрВход.Период = НачалоПериода;
					Если Объект.Дата=НачалоПериода Тогда
						ОбластьСтрокаСотрудник.Область().ЦветФона = WebЦвета.Зеленый;//Цвет_ТТ;
					Иначе	
						ОбластьСтрокаСотрудник.Область().ЦветФона = WebЦвета.Белый;//Цвет_ТТ;
					КонецЕсли;
					ОбластьСтрокаСотрудник.Параметры.ТорговаяТочка1 = Новый ФиксированнаяСтруктура("Сотрудник,Период",
					СтрТЗ.Сотрудник, НачалоПериода);
					
				КонецЕсли;
				
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСотрудник);
			КонецЕсли; 
				
			КонецЦикла;
			НачалоПериода = НачалоПериода + 86400;
			
		КонецЦикла;

		//			
		//		КонецЦикла;
		//	КонецЕсли; 
		//	
		//КонецЦикла;
		
		//	НачалоПериода = НачалоПериода + 86400;
		//	
		//КонецЦикла;
		
		ТаблицаСотрудникПериод.Сортировать("Сотрудник, Период");		
	КонецЕсли; 
	ОсновнаяТаблица.Сортировать("Сотрудник, Период");
	
	//УстановитьВидимостьЭлементовФормы();
	//УстановитьДоступностьЭлементовФормы();
	ТабличныйДокумент.ФиксацияСверху=8;
	ТабличныйДокумент.ФиксацияСлева=3;
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	ТабличныйДокумент.Очистить();
	ТаблицаСотрудникПериод.Очистить();
	ИнформацияПоСотрудникам.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудникПериодНаСервере(Сотрудники)
	
	Запрос = Новый Запрос("	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабельРаботыПродавцов.Период,
	|	ТабельРаботыПродавцов.Сотрудник
	| Поместить вт
	|ИЗ
	|	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПродавцов
	|ГДЕ
	//|	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
	|	ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода И ТабельРаботыПродавцов.Сотрудник в (&Сотрудники);
	|ВЫБРАТЬ
	|	ТабельРаботыПромоутеров.Период КАК Период,
	|	ТабельРаботыПромоутеров.Сотрудник КАК Сотрудник,
	|	ТабельРаботыПромоутеров.Сотрудник.Код КАК КодСотрудника,
	|	ТабельРаботыПромоутеров.ТорговаяТочка,
	|	ТабельРаботыПромоутеров.КоличествоЧасов КАК КоличествоЧасов,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(50)) КАК Телефон,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформацияДопНомер.Представление, """") КАК СТРОКА(50)) КАК ДопТелефон,
	|	ЕСТЬNULL(СпецификаФормированияТабеляПромоутеров.Порядок, 0) КАК Порядок,
	|	СтатусыПродавцовСрезПоследних.Статус КАК Статус,
	|	СтатусыПродавцовСрезПоследних.БлижайшийМагазин КАК Магазин,
	|	СтатусыПродавцовСрезПоследних.ПЧ КАК ПЧ,ЦФОСтруктурныхЕдиниц.ЦФО
	|ИЗ
	|	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПромоутеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификаФормированияТабеляПромоутеров КАК СпецификаФормированияТабеляПромоутеров
	|		ПО ТабельРаботыПромоутеров.Группа = СпецификаФормированияТабеляПромоутеров.Группа
	|			И ТабельРаботыПромоутеров.Сотрудник = СпецификаФормированияТабеляПромоутеров.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТабельРаботыПромоутеров.Сотрудник = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДопНомер
	|		ПО ТабельРаботыПромоутеров.Сотрудник = КонтактнаяИнформацияДопНомер.Объект
	|			И (КонтактнаяИнформацияДопНомер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПродавцов КАК СтатусыПродавцовСрезПоследних
	|		ПО ТабельРаботыПромоутеров.Сотрудник = СтатусыПродавцовСрезПоследних.Продавец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ) КАК ЦФОСтруктурныхЕдиниц
	|		ПО ТабельРаботыПромоутеров.ТорговаяТочка = ЦФОСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|ГДЕ
	|	ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыПромоутеров.Сотрудник в  (Выбрать вт.Сотрудник из вт как вт)
	|ИТОГИ
	|	МАКСИМУМ(КодСотрудника),
	|	СУММА(КоличествоЧасов),
	|	МАКСИМУМ(Телефон),
	|	МАКСИМУМ(ДопТелефон),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Статус),
	|	МАКСИМУМ(БлижайшийМагазин),
	|	МАКСИМУМ(ПЧ)
	|ПО
	|	Сотрудник,
	|	Период");
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Объект.Дата-7*24*60*60));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(Объект.Дата+7*24*60*60));
	Запрос.УстановитьПараметр("Группа", 		ГруппаТорговыхТочек);
	Запрос.УстановитьПараметр("Сотрудники", 		Сотрудники);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий()Цикл
		
		// Заполним Информацию
		ЗаполнитьЗначенияСвойств(ИнформацияПоСотрудникам.Добавить(), ВыборкаСотрудник);
		
		ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериод.Следующий()Цикл
			
			НоваяСтрока = ТаблицаСотрудникПериод.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПериод);
			
			Представление   = "";
			//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
			
			ДетальнаяВыборка = ВыборкаПериод.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НоваяСтрокаТЗ = НоваяСтрока.ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ДетальнаяВыборка);
				
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка);
				//ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент + ?(ПустаяСтрока(ПредставлениеТабличныйДокумент), "", ", ") + Строка(ДетальнаяВыборка.ТорговаяТочка.НомерТочки); //(gusd) попросили сделать обычное представление
				
			КонецЦикла;
			
			НоваяСтрока.Представление = Представление;
			//НоваяСтрока.ПредставлениеТабличныйДокумент = ПредставлениеТабличныйДокумент; //(gusd) попросили сделать обычное представление
			НоваяСтрока.ПредставлениеТабличныйДокумент = Представление;
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры


&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.ПолучитьМакет("График");
	
КонецФункции


&НаСервере
Функция ЗаполнитьТаблицуВыходных(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))");
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	ТаблицаВыходных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВыходных;
	
КонецФункции



&НаСервере
Функция ПолучитьПредставлениеТорговойТочки(СтруктураДанных)
	Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
		Представление 	= "";
		СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоПродавца = 1 Тогда
			Представление = "пч, ";	
		ИначеЕсли СвойствоПродавца = 2 Тогда
			Представление = "сп, ";
		ИначеЕсли СвойствоПродавца = 3 Тогда
			Представление = "пр, ";
		ИначеЕсли СвойствоПродавца = 4 Тогда
			Представление = "ст, ";
		ИначеЕсли СвойствоПродавца = 5 Тогда
			Представление = "нп, ";
		ИначеЕсли СвойствоПродавца = 6 Тогда
			Представление = "снп, ";
		КонецЕсли;
		
		ПредставлениеТТ = "";
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Отсутствие) Тогда
			Представление = Представление;
		Иначе	
			Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
		КонецЕсли;
	ИначеЕсли ГруппаСотрудников="Кассиры" ИЛИ ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000 (Добавлено условие "ИЛИ ГруппаСотрудников = "Пекари"")
		Представление 	   = "";
		СвойствоСотрудника = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоСотрудника = 1 Тогда
			Представление = "ст, ";	
		КонецЕсли;
		
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
			//Если СвойствоСотрудника = 0 Тогда 
				Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
			//КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		КонецЕсли;	
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		Представление 	   = "";
		СвойствоСотрудника = СтруктураДанных.СвойствоПродавца;
		
		Если СвойствоСотрудника = 1 Тогда
			Представление = "н, ";
		ИначеЕсли СвойствоСотрудника = 2 Тогда
			Представление = "ст, ";	
		КонецЕсли;
		
		ТорговаяТочка 	= СтруктураДанных.ТорговаяТочка;
		КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
		Отсутствие 		= СтруктураДанных.Отсутствие;
		
		Если ЗначениеЗаполнено(ТорговаяТочка)Тогда
			Представление = Представление + Строка(СтруктураДанных.ТорговаяТочкаНаименование);
			//Если СвойствоСотрудника <> 2 Тогда 
				Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
			//КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Отсутствие)Тогда
			Представление = Строка(Отсутствие);
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЦветовТТ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.ЦветТорговойТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Пока Выборка.Следующий()Цикл
		
		ЦветТТ = Выборка.ЦветТорговойТочки.Получить();
		Если ЦветТТ <> Неопределено Тогда
			Если ЦветТТ <> ЧерныйЦвет Тогда
				НоваяСтр = ТаблицаЦветовТТ.Добавить();
				НоваяСтр.ТорговаяТочка = Выборка.ТорговаяТочка;
				НоваяСтр.Цвет = ЦветТТ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ОтказПродавца(Команда)
	Если ЗначениеЗаполнено(ТекущийПродавец) Тогда
		ОтказПродавцаСервер(ТекущийПродавец);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтказПродавцаСервер(Продавец)
	УстановитьПривилегированныйРежим(Истина);
	Мен=РегистрыСведений.ОтказыПродавцовВыходитьНаРаботу.СоздатьМенеджерЗаписи();
	Мен.Период=Объект.Дата;
	Мен.Продавец=Продавец;
	Мен.ОтказВыхода=1;
	Мен.Записать();
	ЗаполнитьСписокКандидатовСервер();
	Сообщить("Зафиксирован отказ "+Строка(Продавец));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	Если ЗначениеЗаполнено(ТекущийПродавец) Тогда
		//ПараметрыОтбора = Новый Структура("ЦФО", ГруппаТорговыхТочек);
		//Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", ПараметрыОтбора);
		//ТекущийПродавец=Элементы.КандидатыНаВыход.ТекущиеДанные.Продавец;
		Фл=Ложь;
		Если ЗначениеЗаполнено(ТекущийПродавец)Тогда
			Если ГруппаСотрудников="Продавцы" ИЛИ  ГруппаСотрудников="СтаршиеПродавцы" Тогда
				//ТекДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;  
				
				ТТ = Объект.Магазин;
				Отсутствие 		 = Неопределено;
				СвойствоПродавца =  Неопределено;
				Если ГруппаСотрудников="СтаршиеПродавцы"  Тогда
					СвойствоПродавца =  2;
				КонецЕсли; 
				КоличествоЧасов  = 0;
				
				
				ПараметрыОткрытия = Новый Структура("Сотрудник, ТорговаяТочка, Отсутствие, СвойствоПродавца, КоличествоЧасов",
				ТекущийПродавец, ТТ, Отсутствие, СвойствоПродавца, КоличествоЧасов);
				
				Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				
				Если ТипЗнч(Результат) = Тип("Структура")Тогда
					
					СтруктураДанных = Новый Структура();
					СтруктураДанных.Вставить("Сотрудник",		 	ТекущийПродавец);
					СтруктураДанных.Вставить("СвойствоПродавца", 	Результат.СвойствоПродавца);
					СтруктураДанных.Вставить("ТорговаяТочка", 		Результат.ТорговаяТочка);
					СтруктураДанных.Вставить("Отсутствие", 			Результат.Отсутствие);
					СтруктураДанных.Вставить("КоличествоЧасов", 	Результат.КоличествоЧасов);
					
					Представление	 = "";
					Отсутствие 		 = СтруктураДанных.Отсутствие;
					ТорговаяТочка 	 = СтруктураДанных.ТорговаяТочка;
					СвойствоПродавца = СтруктураДанных.СвойствоПродавца;
					КоличествоЧасов  = СтруктураДанных.КоличествоЧасов;
					
					Если ЗначениеЗаполнено(Отсутствие)Тогда
						
						Представление = Строка(Отсутствие);	
						
					ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
						
						Если СвойствоПродавца = 1 Тогда
							Представление = "пч, ";	
						ИначеЕсли СвойствоПродавца = 2 Тогда
							Представление = "сп, ";
						ИначеЕсли СвойствоПродавца = 3 Тогда
							Представление = "пр, ";
						ИначеЕсли СвойствоПродавца = 4 Тогда
							Представление = "ст, ";
						ИначеЕсли СвойствоПродавца = 5 Тогда
							Представление = "нп, ";
						ИначеЕсли СвойствоПродавца = 6 Тогда
							Представление = "снп, ";	
						КонецЕсли;
						
						Представление = Представление + Строка(ТорговаяТочка);
						
					КонецЕсли;
					
					Если ЭтоМагазин(ТорговаяТочка) И СвойствоПродавца = 1 Тогда
						Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
					КонецЕсли;
					
					СтруктураДанных.Вставить("Представление", Представление);
					//ТекДанные.Представление = Представление;
					ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
					
				КонецЕсли;
			ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
				ТТ = Объект.Магазин;
				Отсутствие 		 = Неопределено;
				СвойствоСотрудника =  Неопределено;
				
				КоличествоЧасов  = 0;
				
				
				
				ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
				ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
				
				Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыКассиров.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				
				Если ТипЗнч(Результат) = Тип("Структура")Тогда
					
					СтруктураДанных = Новый Структура();
					СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
					СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
					СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
					СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
					СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
					
					Представление	 	= "";
					ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
					Отсутствие 		 	= СтруктураДанных.Отсутствие;
					КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
					СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
					
					Если ЗначениеЗаполнено(Отсутствие)Тогда
						
						Представление = Строка(Отсутствие);	
						
					ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
						
						Если СвойствоСотрудника = 1 Тогда
							Представление = "ст, ";
						КонецЕсли;
						
						Представление = Представление + Строка(ТорговаяТочка);
						
					КонецЕсли;
					
					Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
						Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
					КонецЕсли;
					
					СтруктураДанных.Вставить("Представление", Представление);
					ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				КонецЕсли;
				
			//+++АК mika 2018.04.12 ИП-00018000
			ИначеЕсли ГруппаСотрудников = "Пекари" Тогда
				
				ТТ = Объект.Магазин;
				Отсутствие 		 = Неопределено;
				СвойствоСотрудника =  Неопределено;
				
				КоличествоЧасов  = 0;
				
				ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
				ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
				
				Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыПекарей.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				
				Если ТипЗнч(Результат) = Тип("Структура")Тогда
					
					СтруктураДанных = Новый Структура();
					СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
					СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
					СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
					СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
					СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
					
					Представление	 	= "";
					ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
					Отсутствие 		 	= СтруктураДанных.Отсутствие;
					КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
					СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
					
					Если ЗначениеЗаполнено(Отсутствие)Тогда
						
						Представление = Строка(Отсутствие);	
						
					ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
						
						Если СвойствоСотрудника = 1 Тогда
							Представление = "ст, ";
						КонецЕсли;
						
						Представление = Представление + Строка(ТорговаяТочка);
						
					КонецЕсли;
					
					Если СвойствоСотрудника = 0 И Не ЗначениеЗаполнено(Отсутствие) Тогда
						Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
					КонецЕсли;
					
					СтруктураДанных.Вставить("Представление", Представление);
					ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
				КонецЕсли;
			//---АК mika 2018.04.12 ИП-00018000
			
			ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
				ТТ = Объект.Магазин;
				Отсутствие 		 = Неопределено;
				СвойствоПродавца =  Неопределено;
				
				КоличествоЧасов  = 0;
				
				
				
				ПараметрыОткрытия = Новый Структура("Сотрудник,ТорговаяТочка,Отсутствие,СвойствоСотрудника,КоличествоЧасов",
				ТекущийПродавец,ТТ,Отсутствие,СвойствоСотрудника,КоличествоЧасов);
				
				Результат = ОткрытьФормуМодально("Обработка.ГрафикРаботыГрузчиков.Форма.ФормаЗаполненияДанныхПоСотруднику", ПараметрыОткрытия, ЭтаФорма);	
				
				Если ТипЗнч(Результат) = Тип("Структура")Тогда
					
					СтруктураДанных = Новый Структура();
					СтруктураДанных.Вставить("Сотрудник"	  	 , ТекущийПродавец);
					СтруктураДанных.Вставить("ТорговаяТочка"  	 , Результат.ТорговаяТочка);
					СтруктураДанных.Вставить("Отсутствие"		 , Результат.Отсутствие);
					СтруктураДанных.Вставить("КоличествоЧасов"	 , Результат.КоличествоЧасов);
					СтруктураДанных.Вставить("СвойствоСотрудника", Результат.СвойствоСотрудника);
					
					Представление	 	= "";
					ТорговаяТочка 	 	= СтруктураДанных.ТорговаяТочка;
					Отсутствие 		 	= СтруктураДанных.Отсутствие;
					КоличествоЧасов  	= СтруктураДанных.КоличествоЧасов;
					СвойствоСотрудника 	= СтруктураДанных.СвойствоСотрудника;
					
					Если ЗначениеЗаполнено(Отсутствие)Тогда
						
						Представление = Строка(Отсутствие);	
						
					ИначеЕсли ЗначениеЗаполнено(ТорговаяТочка) Тогда
						
						Если СвойствоСотрудника = 1 Тогда
							Представление = "н, ";
						ИначеЕсли СвойствоСотрудника = 2 Тогда
							Представление = "ст, ";	
						КонецЕсли;
						
						Представление = Представление + Строка(ТорговаяТочка);
						
					КонецЕсли;
					
					Если СвойствоСотрудника <> 2 И Не ЗначениеЗаполнено(Отсутствие) Тогда
						Представление = Представление + ", (" + Строка(КоличествоЧасов) + "ч.)";
					КонецЕсли;
					
					СтруктураДанных.Вставить("Представление", Представление);
					ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных);
					
				КонецЕсли;
				
			ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда	
				//ТЗ = Новый ТаблицаЗначений;
				//ТЗ.Колонки.Добавить("ТорговаяТочка");
				//ТЗ.Колонки.Добавить("КоличествоЧасов");
				ТЗ1.Очистить();
				
				
				ПараметрыОткрытия = Новый Структура("Сотрудник, Период", ТекущийПродавец, Объект.Дата);
				Результат 		  = ОткрытьФормуМодально("Обработка.ГрафикРаботыСотрудниковМагазина.Форма.ФормаРедактированияПериода", ПараметрыОткрытия, ЭтаФорма);	
				
				
				Если ТипЗнч(Результат) = Тип("Структура")Тогда
					
					
					//ТекСтр = СтрокаМассива;
					
					Данные = Новый Структура("Сотрудник, Группа, Период", ТекущийПродавец, ГруппаТорговыхТочек, Объект.Дата);
					
					// Очистим записи в регистре по полям Период, Сотрудник, ГруппаТТ
					
					//ПредставлениеТабличныйДокумент = ""; //(gusd) попросили сделать обычное представление
					Представление   = "";
					КоличествоЧасов = 0;
					ТорговаяТочка = Неопределено;
					
					Для Каждого Стр Из Результат.ТаблицаДанных Цикл
						
						// Берем первую для раскраски макета
						
						Данные.Вставить("ТорговаяТочка"	 , Стр.Ключ);
						Данные.Вставить("КоличествоЧасов", Стр.Значение);
						
						ОшибкаПриЗаписи = Ложь;
						ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи);
						
						Если Не ОшибкаПриЗаписи Тогда
							Сообщить(Строка(ТекущийПродавец)+" добавлен в график");
							ЗаполнитьСписокКандидатовСервер();
						Иначе
							Сообщить("Данные за период  не записаны! См. ошибки в комментариях выше!")
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры


Процедура ЗаписатьИзмененияВРегистр1(Данные, ОшибкаПриЗаписи)
	
	Запись = РегистрыСведений.ТабельРаботыПромоутеров.СоздатьМенеджерЗаписи();
	Запись.Группа 	 = ГруппаТорговыхТочек;
	ЗаполнитьЗначенияСвойств(Запись, Данные);
	
	Попытка
		Запись.Записать();
	Исключение
		ОшибкаПриЗаписи = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры


&НаСервере
Функция ЭтоМагазин(пТорговаяТочка)
	УстановитьПривилегированныйРежим(Истина);
	Возврат пТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин;	
	
КонецФункции


&НаСервере
Процедура ОбработатьВыделенныеСтрокиНаСервере(СтруктураДанных)
	УстановитьПривилегированныйРежим(Истина);
	МассивСтрок = Объект.КандидатыНаВыход.НайтиСтроки(Новый Структура("Продавец",ТекущийПродавец));
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		
		СтруктураДанных.Вставить("Период", Объект.Дата);
		
		Если Не ЗаписатьИзмененияВРегистр(СтруктураДанных) Тогда
			
			//ДобавитьПервогоПродавцаВГрафик(Результат);
			ИзменитьПорядокПродавцовВТабеле(ТекущийПродавец);
			Сообщить(Строка(ТекущийПродавец)+" добавлен в график");
			
			//ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураДанных);
			//ТекСтр.Представление = СтруктураДанных.Представление;
			//
			//ОбновитьДанныеВТабличномДокументе(ТекСтр.Период, СтруктураДанных.Представление, СтруктураДанных.ТорговаяТочка);
		Иначе	
			Сообщить("Данные за период " + Формат(Объект.Дата, "ДФ=dd.MM.yy") + " не записаны! См. ошибки в комментариях выше!")
		КонецЕсли;
		Прервать;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзмененияВРегистр(ПараметрыСотрудника)
	
	ОшибкиПриЗаписи = Ложь;
	
	// РАБОТА В ДРУГОЙ ГРУППЕ
	Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабельРаботыПродавцов.Группа
		|ИЗ
		|	РегистрСведений."+ВидТабеля+" КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник = &Сотрудник
		|	И ТабельРаботыПродавцов.Период = &Период
		|	И ТабельРаботыПродавцов.ТорговаяТочка <> &ТорговаяТочка
		|	И ТабельРаботыПродавцов.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)");
		
		Запрос.УстановитьПараметр("Сотрудник", 	ТекущийПродавец);
		Запрос.УстановитьПараметр("Группа", 	ГруппаТорговыхТочек);
		Запрос.УстановитьПараметр("Период", 	ПараметрыСотрудника.Период);
		Запрос.УстановитьПараметр("ТорговаяТочка", 	Объект.Магазин);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			ОшибкиПриЗаписи = Истина;
			Сообщить(" - сотрудник " + ТекущийПродавец + " " + Формат(ПараметрыСотрудника.Период, "ДЛФ=DD") + " уже работает в группе " + Выборка.Группа + ".");
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОшибкиПриЗаписи Тогда
		Возврат ОшибкиПриЗаписи;
	КонецЕсли;
	
	// Очистим запись по полям Период, Группа, Сотрудник
	Если ЗначениеЗаполнено(ПараметрыСотрудника.Период) И ЗначениеЗаполнено(ГруппаТорговыхТочек) И ЗначениеЗаполнено(ПараметрыСотрудника.Сотрудник)Тогда
		
		НЗ = РегистрыСведений[ВидТабеля].СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(ПараметрыСотрудника.Период);
		НЗ.Отбор.Сотрудник.Установить(ПараметрыСотрудника.Сотрудник);
		НЗ.Отбор.Группа.Установить(ГруппаТорговыхТочек);
		НЗ.Записать();
		
	КонецЕсли;
	
	
	////Запись удалили
	//Если Не ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) И Не ЗначениеЗаполнено(ПараметрыСотрудника.Отсутствие) Тогда
	//	
	//	Запись = РегистрыСведений.ТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
	//	Запись.Группа 	 = ГруппаТорговыхТочек;
	//	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСотрудника);
	//	
	//	Попытка
	//		Запись.Удалить();
	//	Исключение
	//		ОшибкиПриЗаписи = Истина;
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//Иначе
	
	Если ЗначениеЗаполнено(ПараметрыСотрудника.ТорговаяТочка) ИЛИ ЗначениеЗаполнено(ПараметрыСотрудника.Отсутствие) Тогда	
		
		Запись = РегистрыСведений[ВидТабеля].СоздатьМенеджерЗаписи();
		Запись.Группа 	 = ГруппаТорговыхТочек;
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыСотрудника);
		
	    Запись.ГруппаСотрудника = РегистрыСведений.ПользователиПоЦФО.ПолучитьСтрукрутуПодчиненияТекущегоСотрудника(Запись.Сотрудник, Истина, Истина); //Без задачи. Группа сотрудника при подборе кандидатов должна быть всегда определена
	
		Попытка
			Запись.Записать();
		Исключение
			ОшибкиПриЗаписи = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	//mind 2017-09-12 журнал переделан на универсальный и запись производит из модуля
	//// Добавим запись в журнал
	//ЗаписьЖурнала = РегистрыСведений.ЖурналТабельРаботыПродавцов.СоздатьМенеджерЗаписи();
	//ЗаписьЖурнала.ДатаИзменения = ТекущаяДата();
	//ЗаписьЖурнала.Пользователь  = ПараметрыСеанса.ТекущийПользователь;
	//ЗаписьЖурнала.Группа 		= ГруппаТорговыхТочек;
	//ЗаписьЖурнала.Дата			= ПараметрыСотрудника.Период;
	//ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, ПараметрыСотрудника);
	//
	//Попытка
	//	ЗаписьЖурнала.Записать();
	//Исключение
	//КонецПопытки;	
	
	Возврат ОшибкиПриЗаписи;
	
КонецФункции


&НаСервере
Процедура ОбновитьГрафикНаСервере1()
	
	ПорядокФормированияТабеля.Очистить();
	
	Если ГруппаСотрудников="Продавцы" ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
		КлючСлово="";
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		КлючСлово="Грузчиков";
	ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
		КлючСлово="Кассиров";
	ИначеЕсли ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
		КлючСлово="Пекарей";
	КонецЕсли; 
	
	Если ГруппаСотрудников="Продавцы" ИЛИ ГруппаСотрудников="СтаршиеПродавцы" Тогда
		Свойство="СвойствоПродавца";
	Иначе
		Свойство="СвойствоСотрудника";
	КонецЕсли; 
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СпецификаФормированияТабеля.ФизическоеЛицо,
	|	СпецификаФормированияТабеля.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.СпецификаФормированияТабеля"+КлючСлово+ " КАК СпецификаФормированияТабеля
	|ГДЕ
	|	СпецификаФормированияТабеля.Группа = &Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("Группа", ГруппаТорговыхТочек);
	ПорядокФормированияТабеля.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПродавцовВТабеле(НовоеФизЛицо)
	УстановитьПривилегированныйРежим(Истина);
	//ТЗПорядок = РеквизитФормыВЗначение("ПорядокФормированияТабеля");
	//ТЗПорядок.Сортировать("Порядок");
	//
	//НайденнаяСтрока = ТЗПорядок.Найти(НовоеФизЛицо, "ФизическоеЛицо");
	//Если НайденнаяСтрока = Неопределено Тогда
	//	ПорядокТекПродавца = 1;
	//Иначе	
	//	ПорядокТекПродавца = НайденнаяСтрока.Порядок;
	//КонецЕсли;
	//
	//ВсегоСтрок = ТЗПорядок.Количество()-1;
	//
	//Для Каждого Стр Из ТЗПорядок Цикл
	//	
	//	Если ПорядокТекПродавца <= Стр.Порядок Тогда
	//		
	//		Стр.Порядок = Стр.Порядок + 1;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;	
	//	
	//// Если продавец был в ТЗ то присвоим ему порядок текущего продавца
	//СтрНовогоФЛ =  ТЗПорядок.Найти(НовоеФизЛицо, "ФизическоеЛицо");
	//Если СтрНовогоФЛ = Неопределено Тогда
	//	НовСтр = ТЗПорядок.Добавить();
	//	НовСтр.ФизическоеЛицо = НовоеФизЛицо;
	//	НовСтр.Порядок = ПорядокТекПродавца;
	//Иначе
	//	СтрНовогоФЛ.Порядок = ПорядокТекПродавца;
	//КонецЕсли;
	//
	//ТЗПорядок.Сортировать("Порядок");
	//Порядок = 1;
	//Для Каждого Стр Из ТЗПорядок Цикл
	//	Стр.Порядок = Порядок;
	//	Порядок = Порядок + 1;
	//КонецЦикла;
	//// Запишем в регистр
	//Если ГруппаСотрудников="Продавцы" Тогда
	//	КлючСлово="";
	//ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
	//	КлючСлово="Грузчиков";
	//ИначеЕсли ГруппаСотрудников="Кассиры" Тогда
	//	КлючСлово="Кассиров";
	//КонецЕсли; 
	//
	//Если ГруппаСотрудников="Продавцы" Тогда
	//	Свойство="СвойствоПродавца";
	//Иначе
	//	Свойство="СвойствоСотрудника";
	//КонецЕсли; 
	
	//НаборЗаписей = РегистрыСведений["СпецификаФормированияТабеля"+КлючСлово].СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Группа.Установить(ГруппаТорговыхТочек);
	//
	//Для Каждого Стр Из ТЗПорядок Цикл
	//	
	//	Запись = НаборЗаписей.Добавить();
	//	Запись.Группа = ГруппаТорговыхТочек;
	//	ЗаполнитьЗначенияСвойств(Запись, Стр);
	//	
	//КонецЦикла;
	//
	//НаборЗаписей.Записать();
	
	//ЗначениеВРеквизитФормы(ТЗПорядок, "ПорядокФормированияТабеля");
	
	
	
	
	
	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТабельРаботыПродавцовСрезПоследних."+Свойство+"СвойствоПродавца,
	//	|	КонтактнаяИнформация.Представление
	//	|ИЗ
	//	|	РегистрСведений."+ВидТабеля+".СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ТабельРаботыПродавцовСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|		ПО ТабельРаботыПродавцовСрезПоследних.Сотрудник = КонтактнаяИнформация.Объект
	//	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))";
	
	//Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	//Запрос.УстановитьПараметр("Сотрудник", НовоеФизЛицо);
	
	//Результат = Запрос.Выполнить();
	
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//СвПрод=Неопределено;
	//Тел="";
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//   	СвПрод=ВыборкаДетальныеЗаписи.СвойствоПродавца;
	//	Тел=ВыборкаДетальныеЗаписи.Представление;
	//КонецЕсли;
	
	//
	//Мен=РегистрыСведений[ВидТабеля].СоздатьМенеджерЗаписи();
	//Мен.Период=Объект.Дата;
	//Мен.Сотрудник=НовоеФизЛицо;
	//Мен.Группа=ГруппаТорговыхТочек;
	//Мен.ТорговаяТочка=Объект.Магазин;
	//Мен.СвойствоПродавца=СвПрод;
	//Мен.Телефон=?(ЗначениеЗаполнено(Тел),Тел,"");
	//Мен.Записать();
	
	ЗаполнитьСписокКандидатовСервер();	
КонецПроцедуры
&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	МагазинПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Магазин);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ГруппаТорговыхТочек=ВыборкаДетальныеЗаписи.ЦФО;	
	КонецЦикла;
	
	
	ОбновитьГрафикНаСервере1();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	МагазинПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Магазин=ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	ГруппаСотрудников="Продавцы";
	ВидТабеля="ТабельРаботыПродавцов";
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		МагазинПриИзмененииСервер();
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСотрудниковПриИзменении(Элемент)
	Если ГруппаСотрудников="Кассиры" Тогда
		ВидТабеля="ТабельРаботыКассиров";
	ИначеЕсли ГруппаСотрудников="Грузчики" Тогда
		ВидТабеля="ТабельРаботыГрузчиков";
	ИначеЕсли ГруппаСотрудников="Промоутеры" Тогда
		ВидТабеля="ТабельРаботыПромоутеров";
	ИначеЕсли ГруппаСотрудников = "Пекари" Тогда //+++АК mika 2018.04.12 ИП-00018000
		ВидТабеля="ТабельРаботыПекарей";
		
	Иначе 
		ВидТабеля="ТабельРаботыПродавцов";
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	//Если ТабличныйДокумент.ТекущаяОбласть<>Неопределено Тогда
	//	НомСтр=ТабличныйДокумент.ТекущаяОбласть.Низ-3;
	//	Если НомСтр>=0 И НомСтр<=Объект.КандидатыНаВыход.Количество()-1 Тогда
	//		ТекущийПродавец=Объект.КандидатыНаВыход[НомСтр].Продавец;
	//	Иначе	
	//		ТекущийПродавец=Неопределено;	
	//	КонецЕсли; 
	//Иначе	
	//	ТекущийПродавец=Неопределено;	
	//КонецЕсли; 
	НомерВыделеннойКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	Расшифровка = ТабличныйДокумент.Область(3, НомерВыделеннойКолонки, 3, НомерВыделеннойКолонки).Расшифровка;
	РасшПериод=ТабличныйДокумент.Область(9, НомерВыделеннойКолонки, 9, НомерВыделеннойКолонки).расшифровка;
	//Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(, НомерВыделеннойКолонки,, НомерВыделеннойКолонки);
	
	Если ТипЗнч(Расшифровка) <> Тип("ФиксированнаяСтруктура") тогда
		Сотрудник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		//ПредставлениеТекущийПродавец = "";
		//ТелефонТекущегоПродавца = "";
	Иначе
		Сотрудник = Расшифровка.Сотрудник;
		//ПредставлениеТекущийПродавец = Строка(Сотрудник) + ", " + Расшифровка.КодСотрудника;
		//ТелефонТекущегоПродавца = Расшифровка.Телефон;
	КонецЕсли;
	
	ТекущийПродавец = Сотрудник;

КонецПроцедуры

// Функция рассчитывает расстояния между магазинами возвращает выборку для дальнейшего построения графика
//
// Параметры:
//  ТаблицаКандидатов  - <Тип.ТаблицаЗначение> - Таблица всех кандидатов на выход
//  РасстояниеМетры - <Тип.Число> - максималоное расстояние от выбранного магазина в метрах
//  Широта          - <Тип.Число> - Широта выбранного магазина
//  Долгота         - <Тип.Число> - Долгота выбранного магазина
//
// Возвращаемое значение:
//   <Тип.Выборка>   - Выборка ближайших магазинов
//
Функция ПолучитьВыборкуБлижайшихМагазинов(ТаблицаКандидатов, РасстояниеМетры, Широта, Долгота) //+++АК mika 2018.08.13 ИП-00019326

	Если НЕ ЗначениеЗаполнено(Широта) ИЛИ НЕ ЗначениеЗаполнено(Долгота) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаКандидатов Цикл
		Строка.РасстояниеМетры = РастояниеВМетрахМеждуТочками(Широта, Долгота, Строка.КоординатыШирота, Строка.КоординатыДолгота);	
	КонецЦикла;
	
		Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаКандидатов);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		| ВТ КАК ВТ
		|ГДЕ
		| ВТ.РасстояниеМетры <= &РасстояниеМетры
		|УПОРЯДОЧИТЬ ПО
		| ВТ.РасстояниеМетры";
		
		Запрос.УстановитьПараметр("РасстояниеМетры", РасстояниеМетры);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Возврат Результат.Выбрать();
		Иначе
			Возврат Неопределено;			
		КонецЕсли;
	

КонецФункции // ПолучитьВыборкуБлижайшихМагазинов()

//ABS функция преобразования числа
//
Функция ABS(Число) //+++АК mika 2018.08.13 ИП-00019326
				   				    
   Если Число < 0 Тогда 
       Возврат -1*Число; 
   Иначе 
       Возврат Число; 
   КонецЕсли; 
КонецФункции 

// Возвращает расстояние в метрах между двумя точками по координатам Широты и Долготы
//
Функция РастояниеВМетрахМеждуТочками(Широта1, Долгота1, Широта2, Долгота2) //+++АК mika 2018.08.13 ИП-00019326
	
	Пи = 3.14; РадиусЗ = 6372795; 
	
	Возврат Окр(РадиусЗ*ATAN(Sqrt(Pow(COS(Пи*Широта2/180)*SIN(ABS(Пи*Долгота2/180-Пи*Долгота1/180)),2)+Pow(COS(Пи*Широта1/180)*SIN(Пи*Широта2/180)-SIN(Пи*Широта1/180)*COS(Пи*Широта2/180)*COS(ABS(Пи*Долгота2/180-Пи*Долгота1/180)),2))/(SIN(Пи*Широта1/180)*SIN(Пи*Широта2/180)+COS(Пи*Широта1/180)*COS(Пи*Широта2/180)*COS(ABS(Пи*Долгота2/180-Пи*Долгота1/180)))),3);
	
КонецФункции

