

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.ДатаНачала 		= ТекущаяДата();
	Объект.ДатаОкончания 	= КонецМесяца(ТекущаяДата());
	ЭтаФорма.ДатаРаботы 	= ТекущаяДата();
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)

	ЭтаФорма.ДатаРаботы = Макс(Объект.ДатаНачала, ЭтаФорма.ДатаРаботы);
	
	//Элементы.СписокДатЗначение.МинимальноеЗначение 	= Объект.ДатаНачала;
	
	// обновить отображение
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	ЭтаФорма.ДатаРаботы = Мин(Объект.ДатаОкончания, ЭтаФорма.ДатаРаботы);
	
	//Элементы.СписокДатЗначение.МаксимальноеЗначение = Объект.ДатаОкончания;
	
	// обновить отображение
	ВывестиГрафикСервер();
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковПоГрафику(мТорговаяТочка, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"			, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабельРаботыСотрудниковАутсорсинг.Сотрудник КАК Сотрудник,
	|	ТабельРаботыСотрудниковАутсорсинг.ВремяНачала,
	|	ТабельРаботыСотрудниковАутсорсинг.ВремяОкончания,
	|	ТабельРаботыСотрудниковАутсорсинг.КоличествоЧасов,
	|	ТабельРаботыСотрудниковАутсорсинг.Контрагент,
	|	ТабельРаботыСотрудниковАутсорсинг.Должность
	|ИЗ
	|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыСотрудниковАутсорсинг
	|ГДЕ
	|	ТабельРаботыСотрудниковАутсорсинг.Период = &Дата
	|	И ТабельРаботыСотрудниковАутсорсинг.ТорговаяТочка = &ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	ЭтаФорма.СписокСотрудников.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаПриИзменении(Элемент)
	
	Если ЭтаФорма.ПоВсемДатам Тогда
		Возврат
	КонецЕсли;
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭтаФорма.ВремяОкончания)
			И НЕ ЭтаФорма.ВремяОкончания > ЭтаФорма.ВремяНачала Тогда
		Сообщить("Время начала работы не может быть больше времени окончания работы!");	
		ЭтаФорма.ВремяНачала = ЭтаФорма.ВремяОкончания - 3600;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭтаФорма.ВремяНачала)
			И НЕ ЭтаФорма.ВремяНачала < ЭтаФорма.ВремяОкончания Тогда
		Сообщить("Время окончания работы не может быть меньше времени начала работы!");	
		ЭтаФорма.ВремяОкончания = ЭтаФорма.ВремяНачала + 3600;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаботыПриИзменении(Элемент)
	
	Если ЭтаФорма.ДатаРаботы < Объект.ДатаНачала
			ИЛИ ЭтаФорма.ДатаРаботы > Объект.ДатаОкончания Тогда
		Сообщить("Выбрана дата, не попадающая в период обработки!");
		ЭтаФорма.ДатаРаботы = Объект.ДатаНачала;
	КонецЕсли;
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДатыРаботы()
	
	Элементы.ДатаРаботы.Видимость = (НЕ ЭтаФорма.ПоВсемДатам)
										И (НЕ ЭтаФорма.ТолькоДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСпискаДат()
	
	Элементы.СписокДат.Видимость = ЭтаФорма.ТолькоДаты;
	//Элементы.СписокДатЗначение.МинимальноеЗначение 	= Объект.ДатаНачала;
	//Элементы.СписокДатЗначение.МаксимальноеЗначение = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемДатамПриИзменении(Элемент)
	
	Если ЭтаФорма.ПоВсемДатам Тогда
		ЭтаФорма.ТолькоДаты = Ложь;
		УстановитьВидимостьСпискаДат();
	КонецЕсли;
	
	УстановитьВидимостьДатыРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоДатыПриИзменении(Элемент)
	
	Если ЭтаФорма.ТолькоДаты Тогда
		ЭтаФорма.ПоВсемДатам = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДатыРаботы();
	УстановитьВидимостьСпискаДат();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокДат()
	
	Если ЭтаФорма.ПоВсемДатам Тогда
		мСписокДат = Новый СписокЗначений;
		НачДата = Объект.ДатаНачала;
		Пока НЕ НачДата > Объект.ДатаОкончания Цикл
			мСписокДат.Добавить(НачДата);
			НачДата = НачДата + 86400;
		КонецЦикла;
	ИначеЕсли ЭтаФорма.ТолькоДаты Тогда
		мСписокДат = ЭтаФорма.СписокДат.Скопировать();
	Иначе
		мСписокДат = Новый СписокЗначений;
		мСписокДат.Добавить(ЭтаФорма.ДатаРаботы);
	КонецЕсли;
	
	Возврат мСписокДат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЧасов(мВремяНачала, мВремяОкончания)
	
	Если мВремяОкончания > мВремяНачала Тогда
		Возврат Час(мВремяОкончания) - Час(мВремяНачала);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
// полностью перезапись набора для связки "Дата - Торговая точка"
Процедура ЗаполнитьГрафикПоДате(СтруктураПараметров, мДобавлять = Истина)
	
	мСотрудники = СтруктураПараметров.ТаблицаСотрудников;
	
	//
	НаборЗаписей = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураПараметров.ДатаРаботы);
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураПараметров.ТорговаяТочка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			//
			НаборЗаписей.Записать();
			 // удаление записей фиксируется в истории изменений графика
			Если НЕ мДобавлять Тогда
				мРегистр = РегистрыСведений.ИсторияИзмененийТабеляРаботыСотрудниковАутсорсинг;
				Для Каждого СтрокаТаблицы Из мСотрудники Цикл
					МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
				    МенеджерЗаписи.ДатаИзменения 	= ТекущаяДата();
					МенеджерЗаписи.Дата 			= СтруктураПараметров.ДатаРаботы;
					МенеджерЗаписи.Сотрудник		= СтрокаТаблицы.Сотрудник;
					МенеджерЗаписи.ТорговаяТочка	= СтруктураПараметров.ТорговаяТочка;
					МенеджерЗаписи.Реквизит			= "Удаление";
					МенеджерЗаписи.Автор			= ПараметрыСеанса.ТекущийПользователь;
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	//
	Если мДобавлять Тогда
		Для Каждого СтрокаТаблицы Из мСотрудники Цикл
			МенеджерЗаписи = НаборЗаписей.Добавить();
			МенеджерЗаписи.Период 			= СтруктураПараметров.ДатаРаботы;
			МенеджерЗаписи.ТорговаяТочка 	= СтруктураПараметров.ТорговаяТочка;
			МенеджерЗаписи.Сотрудник 		= СтрокаТаблицы.Сотрудник;
			МенеджерЗаписи.ВремяНачала		= СтрокаТаблицы.ВремяНачала;
			МенеджерЗаписи.ВремяОкончания	= СтрокаТаблицы.ВремяОкончания;
			МенеджерЗаписи.КоличествоЧасов	= ПолучитьКоличествоЧасов(СтрокаТаблицы.ВремяНачала, СтрокаТаблицы.ВремяОкончания);
			МенеджерЗаписи.Сотрудник 		= СтрокаТаблицы.Сотрудник;
			МенеджерЗаписи.Контрагент 		= СтрокаТаблицы.Сотрудник.Контрагент;
			МенеджерЗаписи.Должность 		= СтрокаТаблицы.Сотрудник.Должность;
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГрафикСервер(мСписокДат)
	
	СтруктураПараметров_2 = Новый Структура;
	СтруктураПараметров_2.Вставить("ТорговаяТочка"		, ЭтаФорма.ТорговаяТочка);
	СтруктураПараметров_2.Вставить("ТаблицаСотрудников"	, ЭтаФорма.СписокСотрудников.Выгрузить());
	
	Для Каждого ЭлементСписка Из мСписокДат Цикл
		СтруктураПараметров_2.Вставить("ДатаРаботы", ЭлементСписка.Значение);
		ЗаполнитьГрафикПоДате(СтруктураПараметров_2);
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиГрафикСервер()
	
	ЭтаФорма.ТабДокумент.Очистить();
	
	ПараметрКомпоновкиДатаНачала		= Новый ПараметрКомпоновкиДанных("ДатаНачала");
	ПараметрКомпоновкиДатаОкончания		= Новый ПараметрКомпоновкиДанных("ДатаОкончания");
	ПараметрКомпоновкиТорговаяТочка		= Новый ПараметрКомпоновкиДанных("ТорговаяТочка");
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	мСхемаКомпоновкиДанных = ОбъектОбработки.ПолучитьМакет("Макет");
	
	мНастройкиОтчета = мСхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
	
	мПараметрыОтчета = мНастройкиОтчета.ПараметрыДанных;
	Для Каждого ЭлементПараметров Из мПараметрыОтчета.Элементы Цикл
		Если ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаНачала Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= Объект.ДатаНачала;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаОкончания Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= Объект.ДатаОкончания;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиТорговаяТочка Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= ЭтаФорма.ТорговаяТочка;
		//	ЭлементПараметров.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЦикла;
	
	
	// Макет компоновки
	мКомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	мМакетКомпоновки = мКомпоновщикМакета.Выполнить(мСхемаКомпоновкиДанных, мНастройкиОтчета);	
	
	// Компоновка данных
	мПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	мПроцессорКомпоновки.Инициализировать(мМакетКомпоновки);	
	
	// Вывод на форму
	мПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	мПроцессорВывода.УстановитьДокумент(ЭтаФорма.ТабДокумент);
	мПроцессорВывода.Вывести(мПроцессорКомпоновки, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиТабельРаботыСотрудниковАутсорсинг(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

&НаКлиенте
Процедура ИзменитьСтрокуГрафика(Команда)
	
	Если ЭтаФорма.ПоВсемДатам
			ИЛИ ЭтаФорма.ТолькоДаты Тогда
		Сообщить("Функция доступна только при выборе конкретной даты работы!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТорговаяТочка.Пустая() Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Сообщить("Не выбран сотрудник!");
		Возврат;
	КонецЕсли;
	
	//
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период"		, ЭтаФорма.ДатаРаботы);
	СтруктураЗаписи.Вставить("ТорговаяТочка", ЭтаФорма.ТорговаяТочка);
	СтруктураЗаписи.Вставить("Сотрудник"	, ТекДанные.Сотрудник);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиТабельРаботыСотрудниковАутсорсинг(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ТабельРаботыСотрудниковАутсорсинг.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
	Исключение
        Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	ВывестиГрафикСервер();
	
КонецПроцедуры

Процедура УдалитьГрафикСервер(мСписокДат)
	
	СтруктураПараметров_2 = Новый Структура;
	СтруктураПараметров_2.Вставить("ТорговаяТочка", ЭтаФорма.ТорговаяТочка);
	
	Для Каждого ЭлементСписка Из мСписокДат Цикл
		СтруктураПараметров_2.Вставить("ДатаРаботы", ЭлементСписка.Значение);
		ЗаполнитьГрафикПоДате(СтруктураПараметров_2, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГрафик(Команда)
	
	Если ЭтаФорма.ТорговаяТочка.Пустая() Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
	КонецЕсли;
	
	//
	мСписокДат = ПолучитьСписокДат();
	УдалитьГрафикСервер(мСписокДат);
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтрокуГрафикаСервер(СтруктураЗаписи)
	
    //
	НаборЗаписей = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураЗаписи.ДатаРаботы);
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураЗаписи.ТорговаяТочка);
	НаборЗаписей.Отбор.Сотрудник.Установить(СтруктураЗаписи.Сотрудник);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
			
			// удаление записи фиксируется в истории изменений графика
			МенеджерЗаписи = РегистрыСведений.ИсторияИзмененийТабеляРаботыСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДатаИзменения 	= ТекущаяДата();
			МенеджерЗаписи.Дата				= СтруктураЗаписи.ДатаРаботы;
			МенеджерЗаписи.Сотрудник		= СтруктураЗаписи.Сотрудник;
			МенеджерЗаписи.ТорговаяТочка	= СтруктураЗаписи.ТорговаяТочка;
			МенеджерЗаписи.Реквизит			= "Удаление";
			МенеджерЗаписи.Автор			= ПараметрыСеанса.ТекущийПользователь;
			МенеджерЗаписи.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуГрафика(Команда)
	
	Если ЭтаФорма.ТорговаяТочка.Пустая() Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Сообщить("Не выбран сотрудник!");
		Возврат;
	КонецЕсли;
	
	//
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ЭтаФорма.ТорговаяТочка);
	СтруктураЗаписи.Вставить("Сотрудник"		, ТекДанные.Сотрудник);
	мСписокДат = ПолучитьСписокДат();
	Для Каждого ЭлементСписка Из мСписокДат Цикл
		СтруктураЗаписи.Вставить("ДатаРаботы"	, ЭлементСписка.Значение);
		УдалитьСтрокуГрафикаСервер(СтруктураЗаписи);
	КонецЦикла;
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВГрафикСервер(СтруктураЗаписи)
	
    //
	МенеджерЗаписи = РегистрыСведений.ТабельРаботыСотрудниковАутсорсинг.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= СтруктураЗаписи.ДатаРаботы;
	МенеджерЗаписи.ТорговаяТочка 	= СтруктураЗаписи.ТорговаяТочка;
	МенеджерЗаписи.Сотрудник 		= СтруктураЗаписи.Сотрудник;
	МенеджерЗаписи.ВремяНачала		= СтруктураЗаписи.ВремяНачала;
	МенеджерЗаписи.ВремяОкончания	= СтруктураЗаписи.ВремяОкончания;
	МенеджерЗаписи.КоличествоЧасов	= ПолучитьКоличествоЧасов(СтруктураЗаписи.ВремяНачала, СтруктураЗаписи.ВремяОкончания);
	МенеджерЗаписи.Контрагент 		= СтруктураЗаписи.Сотрудник.Контрагент;
	МенеджерЗаписи.Должность 		= СтруктураЗаписи.Сотрудник.Должность;
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВГрафик(Команда)
	
	Перем мСотрудник;
	
	Если ЭтаФорма.ТорговаяТочка.Пустая() Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВремяНачала) Тогда
		Сообщить("Не указано время начала!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВремяОкончания) Тогда
		Сообщить("Не указано время окончания!");
		Возврат;
	КонецЕсли;
	
	мСотрудник = ПредопределенноеЗначение("Справочник.СотрудникиАутсорсинг.ПустаяСсылка");
	Если НЕ ВвестиЗначение(мСотрудник, "Выберите сотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ЭтаФорма.ТорговаяТочка);
	СтруктураЗаписи.Вставить("Сотрудник"		, мСотрудник);
	СтруктураЗаписи.Вставить("ВремяНачала"		, ЭтаФорма.ВремяНачала);
	СтруктураЗаписи.Вставить("ВремяОкончания"	, ЭтаФорма.ВремяОкончания);
	мСписокДат = ПолучитьСписокДат();
	Для Каждого ЭлементСписка Из мСписокДат Цикл
		СтруктураЗаписи.Вставить("ДатаРаботы"	, ЭлементСписка.Значение);
		ДобавитьВГрафикСервер(СтруктураЗаписи);
	КонецЦикла;
	
	// обновить отображение
	ЗаполнитьСотрудниковПоГрафику(ЭтаФорма.ТорговаяТочка, ЭтаФорма.ДатаРаботы);
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГрафик(Команда)
	
	Если ЭтаФорма.ТорговаяТочка.Пустая() Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.СписокСотрудников.Количество() = 0 Тогда
		Сообщить("Не выбран ни один сотрудник!");
		Возврат;
	КонецЕсли;
	
	//
	мСписокДат = ПолучитьСписокДат();
	ЗаполнитьГрафикСервер(мСписокДат);
	
	ВывестиГрафикСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	ВывестиГрафикСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура СписокСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
			И НЕ Копирование Тогда
		ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
		ТекДанные.ВремяНачала 		= ЭтаФорма.ВремяНачала;
		ТекДанные.ВремяОкончания 	= ЭтаФорма.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаСотрудника(мСотрудник)
	
	Возврат мСотрудник.Контрагент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДолжностьСотрудника(мСотрудник)
	
	Возврат мСотрудник.Должность;
	
КонецФункции

&НаКлиенте
Процедура СписокСотрудниковСотрудникПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	ТекДанные.Контрагент 	= ПолучитьКонтрагентаСотрудника(ТекДанные.Сотрудник);
	ТекДанные.Должность 	= ПолучитьДолжностьСотрудника(ТекДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТорговыхТочекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
			И НЕ Копирование Тогда
		ТекДанные = Элементы.СписокТорговыхТочек.ТекущиеДанные;
		ТекДанные.ВремяНачала 		= ЭтаФорма.ВремяНачала;
		ТекДанные.ВремяОкончания 	= ЭтаФорма.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры
