
////////////////////////////////////////////////////////////////
// ФОРМА, ЗАГРУЗКА ПАРАМЕТРОВ ФОРМЫ
////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдПромо = Параметры.Идпромо;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьДанныеТЧСервер(АдресХранилищаPromo, "promo");
	ЗагрузитьДанныеТЧСервер(АдресХранилищаPromo, "promo_копия");
	ЗагрузитьДанныеТЧСервер(АдресХранилищаFieldsZnach, "fields_znach");	
	
	ОбновитьДанныеПоПромоКлиент();
	
	УстановитьДоступностьЭлементовФормы();
	
	Элементы.НадписьНомерПромо.Заголовок = ?(ИдПромо = 0, "Добавление новой промо-акции", "Номер промо: " + Строка(ИдПромо));
		
	ЗаполнитьТТВСпискеСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожетДобавлятьТоварВАктивнуюАкцию()
	
	Возврат УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетДобавлятьТоварыВАктивноеПромо, Ложь);
	
КонецФункции	

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Активная = ЭтаФорма.is_Active И ЭтаФорма.date_st_pok <= ТекущаяДата();
	
	МожетДобавлятьТоварВАктивное = МожетДобавлятьТоварВАктивнуюАкцию();
	
	Элементы.ТипПромо.ТолькоПросмотр = Активная;
	Элементы.ТипНачисленияПроцента.ТолькоПросмотр = Активная;
	Элементы.ДниРаботы.ТолькоПросмотр = Активная;
	Элементы.СуммаКратности.ТолькоПросмотр = Активная;			
	Элементы.ПолеВводаДатаНач.ТолькоПросмотр = Активная;
	Элементы.ПолеВводаДатаКон.ТолькоПросмотр = Активная;
	Элементы.Promo_NaborAll_tovar_sp.ТолькоПросмотр = Активная;
	Элементы.Promo_Naboris_nachisl_sp.ТолькоПросмотр = Активная;
	Элементы.Promo_Naboris_rasch_sp.ТолькоПросмотр = Активная;
	Элементы.Promo_Nabornabor.ТолькоПросмотр = Активная;
	Элементы.Promo_tovar.ТолькоПросмотр = Активная ИЛИ МожетДобавлятьТоварВАктивное;
	Элементы.Promo_nach.ТолькоПросмотр = Активная;
	Элементы.Promo_tovarПодбор.Доступность = НЕ Активная;
	Элементы.Promo_tovarОткрытьДобавлениеТовараИзЭксель.Доступность = НЕ Активная;
	
	Если МожетДобавлятьТоварВАктивное Тогда
		Элементы.Promo_tovar.ТолькоПросмотр = Ложь;
		Элементы.Promo_tovarПодбор.Доступность = Истина;
		Элементы.Promo_tovarОткрытьДобавлениеТовараИзЭксель.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТЧСервер(АдресХранилища, ИмяТЧ)
	
	Если ИмяТч = "promo" Тогда
		Объект.Promo.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
	ИначеЕсли ИмяТч = "promo_копия" Тогда
		Объект.Promo_Копия.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
	Иначе
		Объект.fields_znach.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////
// ОБНОВЛЯЛКИ
////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбновитьДанныеПоПромоКлиент()
	      	
	ОбновитьПараметрыСервер();
	ОбновитьНаборыТоварыСервер();	
	ОбновитьТорговыеТочкиСервер();
	ОбновитьСеткуНачисленийСервер();
	ОбновитьeLUСервер();

КонецПроцедуры

/////////////////////////////////////////////////////////////////
// ПРОЧЕЕ
////////////////////////////////////////////////////////////////
	
&НаСервере
Процедура ПодставитьСписокВыбораУПоляПоТаблицеFields_znach(field, Элемент, ЗначениеДляСравнения, ДобавитьТипПромоВПоиск = Ложь)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("field", field);
	
	Если ДобавитьТипПромоВПоиск Тогда
		СтруктураПоиска.Вставить("promo_type", ЭтаФорма.Promo_type);
	КонецЕсли;
	
	НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Стр Из НайдСтр Цикл
		Элемент.СписокВыбора.Добавить(Стр.znach_f, Стр.name_f);
		
		Если Стр.znach_f = ЗначениеДляСравнения Тогда
			ЗначениеДляСравнения = Стр.znach_f;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach(field, Элемент, Таблица, ПолеТаблицы)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("field", field);
	СтруктураПоиска.Вставить("promo_type", Promo_type);
	
	НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
	
	СписокВыбораЗначений = Новый СписокЗначений;
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого Стр Из НайдСтр Цикл		
		//Элемент.СписокВыбора.Добавить(Стр.znach_f, Стр.name_f);		
		Элемент.СписокВыбора.Добавить(Стр.name_f, Стр.name_f);		
		СписокВыбораЗначений.Добавить(Стр.znach_f, Стр.name_f);
	КонецЦикла;
	
	Для Каждого Стр Из Таблица Цикл
		
		Стр[ПолеТаблицы] = СписокВыбораЗначений.НайтиПоЗначению(Стр[СтрЗаменить(ПолеТаблицы, "_sp", "")]);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьПараметрыСервер()
	
	НайдСтр = Объект.promo.Выгрузить().Найти(ИДПромо, "id_promo");
	
	Если НЕ НайдСтр = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НайдСтр);
	КонецЕсли;                                      	
	
	ПодставитьСписокВыбораУПоляПоТаблицеFields_znach("promo..Promo_type", Элементы.ТипПромо, ЭтаФорма.Promo_type);
	ПодставитьСписокВыбораУПоляПоТаблицеFields_znach("promo..Type_perc", Элементы.ТипНачисленияПроцента, ЭтаФорма.Type_perc, Истина);			
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаборыТоварыСервер()
	
	// Наборы
	СтруктураПолей = "*";
	ИмяТаблицы = "promo_nabor";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("nabor");
	РеквизитыТч.Добавить("all_tovar");
	РеквизитыТч.Добавить("is_fact");
	РеквизитыТч.Добавить("is_rasch");
	РеквизитыТч.Добавить("is_nachisl");
	РеквизитыТч.Добавить("id_promo_join");
	
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИДПромо);
	
	Об = РеквизитФормыВЗначение("Объект");	
	Об.ЗаполнитьТаблицу(Объект.Promo_Nabor, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий);	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	Объект.Promo_Nabor_Копия.Загрузить(Объект.Promo_Nabor.Выгрузить());
	
	//!!!
	//Для Каждого Стр Из Объект.Promo_Nabor Цикл
	//	Стр.all_tovar = СокрЛП(Стр.all_tovar);
	
	// Товары
	СтруктураПолей = "*";
	ИмяТаблицы = "promo_tovar";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("nabor");
	РеквизитыТч.Добавить("id_tov");
	
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИДПромо);
	
	Об = РеквизитФормыВЗначение("Объект");	
	Об.ЗаполнитьТаблицу(Объект.Promo_tovar, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий);
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..All_tovar", Элементы.Promo_NaborAll_tovar_sp, Объект.Promo_Nabor, "All_tovar_sp");
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..is_fact", Элементы.Promo_Naboris_fact_sp, Объект.Promo_Nabor, "is_fact_sp");	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..Is_rasch", Элементы.Promo_Naboris_rasch_sp, Объект.Promo_Nabor, "is_rasch_sp");	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..Is_nachisl", Элементы.Promo_Naboris_nachisl_sp, Объект.Promo_Nabor, "is_nachisl_sp");		
	
	ПодобратьНоменклатуруВТовары();
	
	Объект.Promo_tovar_Копия.Загрузить(Объект.Promo_tovar.Выгрузить());
		
КонецПроцедуры

&НаСервере
Процедура ПодобратьНоменклатуруВТовары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТзНом.id_tov,
	               |	ТзНом.id_promo,
				   |	ТзНом.ИндексноеПоле,
	               |	ТзНом.nabor
	               |ПОМЕСТИТЬ Временная
	               |ИЗ
	               |	&ТзНом КАК ТзНом
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Временная.id_tov,
	               |	Временная.id_promo,
	               |	Временная.nabor,
				   |	Временная.ИндексноеПоле,
	               |	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	               |ИЗ
	               |	Временная КАК Временная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО Временная.id_tov = Номенклатура.id_tov";
				   
	Запрос.УстановитьПараметр("ТзНом", Объект.Promo_tovar.Выгрузить());
	
	Объект.Promo_tovar.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТорговыеТочкиСервер()
	
	СтруктураПолей = "*";
	ИмяТаблицы = "promo_tt";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("id_tt");
	РеквизитыТч.Добавить("is_pok");
	РеквизитыТч.Добавить("plan_pr");
	
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИДПромо);
	
	Об = РеквизитФормыВЗначение("Объект");	
	
	Об.ЗаполнитьТаблицу(Объект.promo_tt, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий);

	ЗначениеВРеквизитФормы(Об, "Объект");	
	
	Объект.Promo_tt_Копия.Загрузить(Объект.Promo_tt.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ОбновитьСеткуНачисленийСервер()
	
	СтруктураПолей = "*";
	ИмяТаблицы = "promo_nach";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("param");
	РеквизитыТч.Добавить("Proc_nach");
		
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИДПромо);
	
	Об = РеквизитФормыВЗначение("Объект");
	
	Об.ЗаполнитьТаблицу(Объект.promo_nach, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий);
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	Объект.Promo_nach_Копия.Загрузить(ОБъект.Promo_nach.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьeLUСервер()
	
	СтруктураПолей = "*";
	ИмяТаблицы = "promo_ELU";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("text_eLU");
	РеквизитыТч.Добавить("shapka_elu");
	РеквизитыТч.Добавить("rn");
		
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИДПромо);
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполнитьТаблицу(Объект.Promo_elu, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий);	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ТЗЕЛУ.id_promo,
	//			   |	ТЗЕЛУ.text_eLU,
	//			   |	ТЗЕЛУ.shapka_elu,
	//			   |	ТЗЕЛУ.plan_pr
	//			   |ПОМЕСТИТЬ Сводная
	//			   |ИЗ
	//			   |	&ТЗЕЛУ КАК ТЗЕЛУ
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	Сводная.id_promo,
	//			   |	Сводная.text_eLU,
	//			   |	Сводная.shapka_elu КАК shapka_elu
	//			   |ИЗ
	//			   |	Сводная КАК Сводная
	//			   |ГДЕ
	//			   |	Сводная.id_promo = &id_promo
	//			   |ИТОГИ ПО
	//			   |	shapka_elu";
	//			   
	//Запрос.УстановитьПараметр("ТзЕлу", Объект.Promo_elu.Выгрузить());
	//Запрос.УстановитьПараметр("id_promo", ИдПромо);
	//
	//ВыборкаСорт = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаСорт.Следующий() Цикл
	//	
	//	НовСтр = ТзЕлу.Добавить();
	//	
	//	Выборка = Выборкасорт.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл		
	//		НовСтр.ТекстЕЛУ = НовСтр.ТекстЕЛУ + Выборка.text_eLU + Символы.ПС;
	//		НовСтр.ПоказыватьВЧеке = Выборка.shapka_elu;
	//		НовСтр
	//	КонецЦикла;
	//	
	//КонецЦикла; 
	
	ТЗЕлуВременная = ОБъект.Promo_elu.Выгрузить();
	
	СменилосьПоказыватьВЧеке = Ложь;
	К = 0;
	ПоказыватьВЧеке = 0;
	
	Для Каждого Стр Из ТзЕлуВременная Цикл
		
		К = К + 1;
		
		Если ПоказыватьВЧеке <> Стр.shapka_elu Тогда
			НовСтр = ТЗЕлу.Добавить();			
			ПоказыватьВЧеке = Стр.shapka_elu;
		Иначе
			Если К = 1 Тогда
				НовСтр = ТзЕлу.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		НовСтр.ТекстЕлу = НовСтр.ТекстЕлу + Стр.text_eLU + Символы.ПС;
		НовСтр.ПоказыватьВЧеке = ПоказыватьВЧеке;
		
	КонецЦикла;		
	
	Объект.Promo_elu_Копия.Загрузить(Объект.Promo_elu.Выгрузить());
	
КонецПроцедуры


&НаКлиенте
Процедура Promo_NaborПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Promo_Nabor.ТекущиеДанные <> Неопределено Тогда	
		Элементы.Promo_tovar.ОтборСтрок = Новый ФиксированнаяСтруктура("nabor", Элементы.Promo_Nabor.ТекущиеДанные.nabor);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТзЕлуПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ТзЕлу.ТекущиеДанные = Неопределено Тогда	
		ЭтаФорма.ПодробныйТекстЕЛУ = Элементы.ТзЕлу.ТекущиеДанные.ТекстЕлу;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьФоновуюПроверкуТТ()
	
	ФоновыеЗадания.Выполнить(
			"РегламентныеЗаданияСервер.ФоновоеДобавлениеВПромоАкции", 
			, , "Перезаполнение структурных единиц в промо");
			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьДанные(Команда)
	
	Ответ = Вопрос("Сохранить измененные\добавленные данные?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
	//030715
	Если НЕ ЗначениеЗаполнено(Type_perc) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено обязательное поле ""Тип начисления процента"". Операция сохранения - невозможна!");
		Возврат;
	КонецЕсли;
	
	Если is_Active Тогда
		УдалитьРасчетыПоПромоСервер();
	КонецЕсли;
	
	СравнитьТаблицыСервер();
	
	НеЗадаватьВопросПриЗакрытии = Истина;
	ЗапуститьФоновуюПроверкуТТ();
	
	ЭтаФорма.Закрыть();
	
	//+++AK bara #16425
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Представление
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодКонца,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И ТорговаяТочка В (&СписокТорговаяТочка)) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Период >= &ПериодНачала";
	
	Запрос.УстановитьПараметр("ПериодКонца", date_fi_pok);
	Запрос.УстановитьПараметр("ПериодНачала", date_st_pok);
	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Promo_tovar(,"Номенклатура"));
	Запрос.УстановитьПараметр("СписокТорговаяТочка", Объект.Promo_tt.Выгрузить(,"НазваниеТочки"));	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрСооб= "Цена на %Номенклатуру% менялась %Дата%";
		СтрСооб = СтрЗаменить(СтрСооб,"%Номенклатуру%",ВыборкаДетальныеЗаписи.НоменклатураПредставление);
		СтрСооб = СтрЗаменить(СтрСооб,"%Дата%",ВыборкаДетальныеЗаписи.Период);
		Сообщить(СтрСооб);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Представление
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодКонца,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И ТорговаяТочка В (&СписокТорговаяТочка)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ПериодКонца", ТекущаяДата());

	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Promo_tovar(,"Номенклатура"));
	Запрос.УстановитьПараметр("СписокТорговаяТочка", Объект.Promo_tt.Выгрузить(,"НазваниеТочки"));	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрСооб= "Цена на %Номенклатуру% менялась менее двух недель назад.";
		СтрСооб = СтрЗаменить(СтрСооб,"%Номенклатуру%",ВыборкаДетальныеЗаписи.НоменклатураПредставление);
		Сообщить(СтрСооб);
	КонецЦикла;

	//---AK bara #16425

КонецПроцедуры

&НаСервере
Процедура УдалитьРасчетыПоПромоСервер()
	
	Об = РеквизитФормыВЗначение("Объект");	
	Об.УдалитьВсеРасчетыПоПромо(ИдПромо);	
	ЗначениеВРеквизитФормы(Об, "Объект");
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексныеПоляВТаблицах()
	
	ОбновитьИндексноеПоле("Promo_Nabor");
	ОбновитьИндексноеПоле("Promo_tovar");
	ОбновитьИндексноеПоле("Promo_nach");
	ОбновитьИндексноеПоле("Promo_tt");
	ОбновитьИндексноеПоле("Promo_elu");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексноеПоле(Таблица)
	
	НовыйИндекс = ПолучитьИндексноеПоле(Таблица);
	
	Для Каждого Стр ИЗ ОБъект[Таблица] Цикл
		Если Стр.ИндексноеПоле = 0 Тогда
			Стр.ИндексноеПоле = НовыйИндекс;
			НовыйИндекс = НовыйИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура СравнитьТаблицыСервер()
	
	МассивУсловийГде = Новый Массив;
	НеучитываемыеПоля = Новый Массив;
	
	СохранитьСтрокуТаблицыПромо();
	
	ДобавитьИДПромоВТаблицы();
	
	ОБновитьИндексныеПоляВТаблицах();
	
	//1 промо         	
	//Сообщить("промо");              	
	
	МассивУсловийГде.Добавить("id_promo");
	//НеучитываемыеПоля.Добавить("id_promo");
	Сравнить2Таблицы(Объект.Promo_Копия.Выгрузить(), Объект.Promo.Выгрузить(), "promo", МассивУсловийГде, НеучитываемыеПоля);
	
	МассивУсловийГде.Очистить();
	//НеучитываемыеПоля.Очистить();
	
	//2наборы
	//Сообщить("Наборы");
	
	ОбновитьСтрокиТаблицыНаборы();
	
	МассивУсловийГде.Добавить("id_promo");	
	МассивУсловийГде.Добавить("nabor");	
	
	НеучитываемыеПоля.Добавить("All_tovar_sp");
	НеучитываемыеПоля.Добавить("is_fact_sp");
	НеучитываемыеПоля.Добавить("is_rasch_sp");
	НеучитываемыеПоля.Добавить("is_nachisl_sp");	
	
	Сравнить2Таблицы(Объект.Promo_Nabor_Копия.Выгрузить(), Объект.Promo_Nabor.Выгрузить(), "Promo_Nabor", МассивУсловийГде, НеучитываемыеПоля);
	
	НеучитываемыеПоля.Очистить();
	МассивУсловийГде.Очистить();
	
	//3 товары
	//Сообщить("Товары");
	МассивУсловийГде.Добавить("id_promo");	
	МассивУсловийГде.Добавить("nabor");	
	МассивУсловийГде.Добавить("id_tov");
	
	НеучитываемыеПоля.Добавить("Номенклатура");
	НеучитываемыеПоля.Добавить("НомерСтрокиВНаборе");
	
	Сравнить2Таблицы(Объект.Promo_tovar_Копия.Выгрузить(), Объект.Promo_tovar.Выгрузить(), "Promo_tovar", МассивУсловийГде, НеучитываемыеПоля);
	
	МассивУсловийГде.Очистить();
	НеучитываемыеПоля.Очистить();
	
	//4 начисления
	//Сообщить("Сетка");
	
	МассивУсловийГде.Добавить("id_promo");
	МассивУсловийГде.Добавить("param");
	МассивУсловийГде.Добавить("Proc_nach");								
	Сравнить2Таблицы(Объект.Promo_nach_Копия.Выгрузить(), Объект.Promo_nach.Выгрузить(), "Promo_nach", МассивУсловийГде, НеучитываемыеПоля);
	
	МассивУсловийГде.Очистить();
	
	//5 торговые точки
	//Сообщить("тт");
	
	МассивУсловийГде.Добавить("id_promo");
	МассивУсловийГде.Добавить("id_tt");	
	
	НеучитываемыеПоля.Добавить("НазваниеТочки");
	
	Сравнить2Таблицы(Объект.Promo_tt_Копия.Выгрузить(), Объект.Promo_tt.Выгрузить(), "Promo_tt", МассивУсловийГде, НеучитываемыеПоля);
	
	МассивУсловийГде.Очистить();
	НеучитываемыеПоля.Очистить();
	//
	
	//6 елу
	СохранитьТаблицуЕЛУ();
	
	//Сообщить елу
	
	МассивУсловийГде.Добавить("id_promo");
	Сравнить2Таблицы(Объект.Promo_elu_Копия.Выгрузить(), Объект.Promo_elu.Выгрузить(), "Promo_elu", МассивУсловийГде, НеучитываемыеПоля);		
	
КонецПроцедуры                            

&НаСервере
Процедура ДобавитьИДПромоВТаблицы()
	
	ДобавитьИДПромоВТаблицу("Promo_Nabor");
	ДобавитьИДПромоВТаблицу("Promo_tovar");
	ДобавитьИДПромоВТаблицу("Promo_nach");
	ДобавитьИДПромоВТаблицу("Promo_tt");
	ДобавитьИДПромоВТаблицу("Promo_elu");        
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИдПромоВТаблицу(ИмяТаблицы)
	
	Для Каждого Стр Из Объект[ИмяТаблицы] Цикл
		Стр.id_promo = ИдПромо;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура Сравнить2Таблицы(НачТаблица, КонТаблица, ИмяТаблицы, МассивУсловийГде, НеучитываемыеПоля)
	
	Об = РеквизитФормыВЗначение("Объект");
	
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить("ИндексноеПоле");
	
	Об.СравнитьПоКлючамТЗ(НачТаблица, КонТаблица, МассивКлючей, ИмяТаблицы, МассивУсловийГде, ИдПромо, НеучитываемыеПоля);	
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтрокуТаблицыПромо()
	
	Если ИдПромо = 0 Тогда
		Об = РеквизитФормыВЗначение("Объект");
		ИдПромо = Об.СоздатьНовоеПромо();
		ЗначениеВРеквизитФормы(Об, "Объект");
		
		НайдСтр = Объект.Promo.Добавить();
		
	Иначе
		
		НайдСтроки = Объект.Promo.НайтиСтроки(Новый Структура("id_promo", ИдПромо));
		
		Если НайдСтроки.Количество() > 0 Тогда
			НайдСтр = НайдСтроки[0];
		Иначе
			НайдСтр = Объект.Promo.Добавить();
		КонецЕсли;
		
	КонецЕсли;	                                                                        
	
	ЗаполнитьЗначенияСвойств(НайдСтр, ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиТаблицыНаборы()
	
	Для Каждого Стр Из Объект.Promo_Nabor Цикл
		
		СтруктураПоиска  = Новый Структура;
		СтруктураПоиска.Вставить("field", "Promo_nabor..All_tovar");
		СтруктураПоиска.Вставить("name_f", Стр.All_tovar_sp);
		
		НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтр.Количество() <> 0 Тогда
			Стр.All_tovar = НайдСтр[0].znach_f;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("field", "Promo_nabor..is_fact");
		СтруктураПоиска.Вставить("name_f", Стр.is_fact_sp);
		
		НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтр.Количество() <> 0 Тогда
			Стр.is_fact = НайдСтр[0].znach_f;
		КонецЕсли;

		СтруктураПоиска.Вставить("field", "Promo_nabor..Is_rasch");
		СтруктураПоиска.Вставить("name_f", Стр.Is_rasch_sp);
		
		НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтр.Количество() <> 0 Тогда
			Стр.Is_rasch = НайдСтр[0].znach_f;
		КонецЕсли;

		СтруктураПоиска.Вставить("field", "Promo_nabor..Is_nachisl");
		СтруктураПоиска.Вставить("name_f", Стр.Is_nachisl_sp);
		
		НайдСтр = Объект.fields_znach.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтр.Количество() <> 0 Тогда
			Стр.Is_nachisl = НайдСтр[0].znach_f;
		КонецЕсли;

	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыВтовары(Команда)
	
	ТекДанные = Элементы.Promo_Nabor.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Для подбора необходимо выделить строку набора, которому будет принадлежать товар!'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		
		Возврат;
	
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая", , ЭтаФорма, Ложь);
		
	Форма.Заголовок						= "Подбор";
	Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
	Форма.ЗакрыватьПриВыборе			= Ложь;
		
	Форма.Открыть();
    	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерСтрокиВНаборе(Набор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.nabor,
	               |	Товары.НомерСтрокиВНаборе
	               |ПОМЕСТИТЬ Сводная
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(Сводная.НомерСтрокиВНаборе, 0)) КАК НомерСтрокиВНаборе
	               |ИЗ
	               |	Сводная КАК Сводная
	               |ГДЕ
	               |	Сводная.nabor = &nabor";
				   
	Запрос.УстановитьПараметр("Товары", ОБъект.Promo_tovar.Выгрузить());
	Запрос.УстановитьПараметр("nabor", Число(Набор));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.НомерСтрокиВНаборе = Null, 1, Выборка.НомерСтрокиВНаборе + 1);
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции
	

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Найти(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура.Форма.ФормаВыбора") <> 0 Тогда
		НовСтр = Объект.Promo_tovar.Добавить();
		НовСтр.Номенклатура = ВыбранноеЗначение;
		НовСтр.id_tov = ВыбранноеЗначение.id_tov;
		НовСтр.nabor = Элементы.Promo_Nabor.ТекущиеДанные.nabor;
		Новстр.ИндексноеПоле = ПолучитьИндексноеПоле("promo_tovar");
		НовСтр.НомерСтрокиВНаборе = ПолучитьНомерСтрокиВНаборе(НовСтр.nabor);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексноеПоле(Таблица)
	
	Тз = Объект[Таблица].Выгрузить();
	
	Тз.Сортировать("ИндексноеПоле Убыв");
	
	Если Тз.Количество() > 0 Тогда
		Возврат Тз[0].ИндексноеПоле + 1;
	Иначе	
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Promo_ttПередУдалением(Элемент, Отказ)
	
	Активная = ЭтаФорма.is_Active;
	
	Если Активная Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя удалять торговые точки по промо-акции у действующей акции!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// ЕЛУ

&НаСервере
Процедура СохранитьТаблицуЕЛУ()
	
	НомерСтр = 0;
	
	Объект.Promo_elu.Очистить();
	
	Для Каждого Стр Из ТзЕлу Цикл
		
		МассивСтрокЕЛУ = ОтформатироватьТекстЕЛУ(Стр.ТекстЕлу);
		
		флОтказ = Ложь;
		
		Для Каждого Эл Из МассивСтрокЕлу Цикл
			Если СтрДлина(Эл) > 40 Тогда
				флОтказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флОтказ Тогда
			
			Для Каждого Эл Из МассивСтрокЕлу Цикл
				
				НомерСтр = НомерСтр + 1;
				
				НовСтр = Объект.Promo_elu.Добавить();
				НовСтр.id_promo = ИдПромо;
				НовСтр.Text_elu = Эл;
				НовСтр.shapka_elu = Стр.ПоказыватьВЧеке;
				НовСтр.rn = НомерСтр;
				НовСтр.ИндексноеПоле = НомерСтр;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуДобавленияТекстаЕЛУ(ТекущийТекст, РежимДобавления)
	
	фрм = ПолучитьФорму("Обработка.РаботаСПромоАкциями.Форма.ФормаДобавленияТекстаЕЛУ", , ЭтаФорма);
	фрм.ТекстЕЛУ = ТекущийТекст;
	
	Результ = фрм.ОткрытьМодально();
	
	РежимДобавленияТекстаЕЛУ = РежимДобавления;
	
	Если НЕ ДобавлениеТекстаЕЛУ = "" Тогда	
		СохранитьСтрокуЕЛУ();
	КонецЕсли;
	
	Если НЕ Элементы.ТзЕлу.ТекущиеДанные = Неопределено Тогда	
		ЭтаФорма.ПодробныйТекстЕЛУ = Элементы.ТзЕлу.ТекущиеДанные.ТекстЕлу;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЕЛу(Команда)
	
	//Если is_Active Тогда
	//	Сообщить("В активном режиме нельзя добавлять новые eLU");
	//	Возврат;
	//КонецЕсли;
	
	ОткрытьФормуДобавленияТекстаЕЛУ("", 1);	
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактироватьСтрокуЕЛУ(Команда)
	
	Если Элементы.ТзЕлу.ТекущиеДанные = Неопределено Тогда
		Сообщить("Необходимо выделить строку с текстом, который следует отредактировать");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДобавленияТекстаЕЛУ(Элементы.ТзЕлу.ТекущиеДанные.ТекстЕлу, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтрокуЕЛУ()
	
	ОтформатироватьТекстЕЛУ(ДобавлениеТекстаЕЛУ);
	
	Если РежимДобавленияТекстаЕЛУ = 1 Тогда
		НовСтр = ТзЕлу.Добавить();
		НовСтр.ТекстЕЛу = ИтоговыйСтр; //ДобавлениеТекстаЕЛУ;
	Иначе
		ИдСтроки = Элементы.ТзЕлу.ТекущаяСтрока;  
		ДанныеСтроки = ТзЕлу.НайтиПоИдентификатору(ИдСтроки);
		
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДанныеСтроки.ТекстЕлу = ИтоговыйСтр; //ДобавлениеТекстаЕЛУ;
		КонецЕсли;
	КонецЕсли;
	
	//Элементы.ГруппаЕЛУОсновное.Видимость = Истина;
	//Элементы.ГруппаЕлуДобавлениеТекста.Видимость = Ложь;
	ДобавлениеТекстаЕЛУ = "";
	
КонецПроцедуры


//&НаКлиенте
//Процедура ОтменаСохраненияСтрокиЕЛУ(Команда)
//	
//	Элементы.ГруппаЕЛУОсновное.Видимость = Истина;
//	Элементы.ГруппаЕлуДобавлениеТекста.Видимость = Ложь;
//	
//	ДобавлениеТекстаЕЛУ = "";	
//	
//КонецПроцедуры

/////////////////////////////////////////////////

&НаСервере
Процедура УбратьЛишниеПробелыИзТекста(ТекстЕЛУ)
	
	Пока Найти(ТекстЕлу, "  ") <> 0 Цикл
		ТекстЕлу = СтрЗаменить(ТекстЕлу, "  ", " ");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОтформатироватьТекстЕЛУ(ТекстЕЛУ)
	
	МассивСтрок = Новый Массив;
	КолВоСимволов = 40;
	ИтоговыйСтр = "";
	
	УбратьЛишниеПробелыИзТекста(ТекстЕлу);
	
	РазбитьСтрокуДляЕлу(МассивСтрок, ТекстЕЛУ, КолВоСимволов);	
	
	флОшибка = Ложь;
	
	ДЛя Каждого ЭЛ Из МассивСтрок Цикл
		
		Если СтрДлина(ЭЛ) <> КолВоСимволов Тогда
			Сообщить("Не удалось разбить на нужное количество символов строку: """ + Эл + """");
			флОшибка = Истина;
		КонецЕсли;
		
		//Сообщить(Эл + " " + Строка(СтрДлина(Эл)));
		ИтоговыйСтр = ИтоговыйСтр + Эл + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ флОшибка Тогда
		ДобавлениеТекстаЕЛУ = ИтоговыйСтр;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура РазбитьСтрокуДляЕлу(МассивСтрок, Строка, КолВоСимволов)
	
	Слово = "";
	СловоКопия = "";
	ИтоговаяСтрока = "";
	ВнутреннийСчетчик = 0;
	СтрокаКопия = "";
	
	Для к = 1 По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, к, 1);
		
		ВнутреннийСчетчик = ВнутреннийСчетчик + 1;
		
		Если Символ = Символы.НПП ИЛИ Символ = Символы.ВТаб ИЛИ Символ = Символы.ПФ ИЛИ Символ = Символы.Таб ИЛИ Символ = " " ИЛИ Символ = Символы.ПС Тогда
			
			Если ВнутреннийСчетчик > КолВоСимволов ИЛИ Символ = Символы.ПС Тогда
				
				Если Символ = Символы.ПС Тогда
					Если СтрДлина(ИтоговаяСтрока + Слово) <= КолВоСимволов Тогда
						ИтоговаяСтрока = ИтоговаяСтрока + Слово;						
						Слово = "";						
					КонецЕсли;
				КонецЕсли;
				
				РаспределитьПробелыВСтроке(ИтоговаяСтрока, КолВоСимволов, (СтрокаКопия = Строка ИЛИ Символ = Символы.ПС));
				
				Если Символ = Символы.ПС Тогда
					СловоКопия = СловоКопия + Символ;
					Символ = "";
				Иначе
					СловоКопия = Слово;
				КонецЕсли;					
				
				МассивСтрок.Добавить(ИтоговаяСтрока);
				ИтоговаяСтрока = "";
				ВнутреннийСчетчик = 0;				
				Слово = СокрЛ(Слово);
				ВнутреннийСчетчик = СтрДлина(Слово);				
			Иначе
				ИтоговаяСтрока = ИтоговаяСтрока + Слово;
				СтрокаКопия = СтрокаКопия + СловоКопия;
				СловоКопия = "";
				Слово = "";
			КонецЕсли;

		КонецЕсли;
	
		Слово = Слово + Символ;
		СловоКопия = СловоКопия + Символ;
		
	КонецЦикла;
	
	Если СтрДлина(ИтоговаяСтрока + Слово) > КолВоСимволов Тогда
		Если СтрДлина(ИтоговаяСтрока) <= КолвоСимволов Тогда
			РаспределитьПробелыВСтроке(ИтоговаяСтрока, КолВоСимволов, СтрокаКопия = Строка);
		КонецЕсли;
		
		МассивСтрок.Добавить(ИтоговаяСтрока);
		
		ИтоговаяСтрока = Слово;
		
	Иначе		
			
		ИтоговаяСтрока = ИтоговаяСтрока + Слово;
		
	КонецЕсли;
	
	СтрокаКопия = СтрокаКопия + СловоКопия;
		
	Если ЗначениеЗаполнено(ИтоговаяСтрока) Тогда
		
		Если СтрДлина(ИтоговаяСтрока) <= КолВоСимволов Тогда		
			РаспределитьПробелыВСтроке(ИтоговаяСтрока, КолВоСимволов, СтрокаКопия = Строка);
			МассивСтрок.Добавить(ИтоговаяСтрока);
		Иначе
            РазбитьСтрокуДляЕлу(МассивСтрок, ИтоговаяСтрока, КолВоСимволов);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция СтопЦикла(Строка, КолВоСимволов)
	
	Возврат СтрДлина(Строка) >= КолВоСимволов;

КонецФункции

Процедура РаспределитьПробелыВСтроке(Строка, КолВоСимволов, ЭтоПоследняяСтрока)
	
	Если ЭтоПоследняяСтрока Тогда
		
		Если СтопЦикла(Строка,КолВоСимволов) Тогда
			Возврат;
		КонецЕсли;
		
		Пока Истина Цикл
			Строка = Строка + " ";
			Если СтопЦикла(Строка, КолВоСимволов) Тогда
				Прервать;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтопЦикла(Строка, КолВоСимволов) Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		ИтоговаяСтрока = "";
		
		Для к = 1 По СтрДлина(Строка) Цикл
		
			Символ = Сред(Строка, к, 1);
			
			ИтоговаяСтрока = ИтоговаяСтрока + Символ;
			
			Если Символ = Символы.НПП ИЛИ Символ = Символы.ВТаб ИЛИ Символ = Символы.ПФ ИЛИ Символ = Символы.Таб ИЛИ Символ = " " Тогда
				
				 ИтоговаяСтрока = ИтоговаяСтрока + " ";
				 
				 Если СтопЦикла(ИтоговаяСтрока + Сред(Строка, к+1, СтрДлина(Строка) - (к-1)), КолВоСимволов) Тогда
					 ИтоговаяСтрока = ИтоговаяСтрока + Сред(Строка, к+1, СтрДлина(Строка) - (к-1));
					 Прервать;
				 КонецЕсли;				 
				 
			КонецЕсли;
		
		КонецЦикла;
	
		Прервать;
		
	КонецЦикла;
	
	Строка = ИтоговаяСтрока;
	
	Если СтрДлина(Строка) < КолВоСимволов Тогда
		РаспределитьПробелыВСтроке(Строка, КолВоСимволов, ЭтоПоследняяСтрока);
	КонецЕсли;
	
КонецПроцедуры              

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ НеЗадаватьВопросПриЗакрытии Тогда
	
		//СтандартнаяОбработка = Ложь;
	
		Ответ = Вопрос("Закрыть форму? Все несохраненные данные будут потеряны.", РежимДиалогаВопрос.ДаНет);
	
		Отказ = Ответ = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	ОповеститьОЗаписиНового("123");
	
КонецПроцедуры


&НаКлиенте
Процедура Promo_tovarПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Promo_Nabor.ТекущиеДанные;
		
		Если ТекДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.nabor = ТекДанные.nabor;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура флАктивноеПриИзменении(Элемент)
	
	Если is_Active Тогда
		Если date_st_pok < ТекущаяДата() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для перевода в активное состояние необходимо, чтобы период действия для покупателей был больше текущей даты.");
			is_Active = Ложь;
		КонецЕсли;
	Иначе
		is_Active = НЕ ОпределитьВозможностьВозвратаВНеактивное();
	КонецЕсли;
	   
КонецПроцедуры

&НаСервере
Функция ОпределитьВозможностьВозвратаВНеактивное()
	
	Об = РеквизитФормыВЗначение("Объект");	
	Возможность = Об.ОпределитьВозможностьВозвратаВНеактивноеОбъект(ИдПромо);	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	Если НЕ Возможность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Невозможно вернуть обратно в неактивное. Уже существуют продажи по данной акции");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции


&НаКлиенте
Процедура ДобавитьТТИзЭксель(Команда)
	
	Ответ = Вопрос("Очистить текущий список торговых точек?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Promo_tt.Очистить();
	КонецЕсли;	
	
	ТзТТ = Новый ТаблицаЗначений;
	ТзТТ.Колонки.Добавить("ТТ", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	ТзТТ.Колонки.Добавить("План", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
	
	Для в=2 по тд.ВысотаТаблицы цикл
		
		Для ш=1 по ТД.ШиринаТаблицы Цикл 
			
			Текст=ТД.Область("R"+Формат(в,"ЧГ=")+"C"+Формат(ш,"ЧГ=")).Текст;
			
			если ш=1 тогда
				
				Если сокрЛП(текст)="" тогда			
					продолжить;
				КонецЕсли;
				
				НовСтр = ТзТТ.Добавить();
				Новстр.ТТ = Текст;
				
			ИначеЕсли ш=2 Тогда
				
				ПланТТ = 0;
				
				Попытка
					ПланТТ = Число(Текст);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Невозможно прочитать план у точки: " + Новстр.ТТ);					
				КонецПопытки;
				
				НовСтр.План = ПланТТ;				
											
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТзТТ.ТТ,
	               |	ТзТТ.План
	               |ПОМЕСТИТЬ Сводная
	               |ИЗ
	               |	&ТзТТ КАК ТзТТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сводная.ТТ,
	               |	Сводная.План,
	               |	ЕСТЬNULL(СтруктурныеЕдиницы.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТочкаСсылка,
	               |	ЕСТЬNULL(СтруктурныеЕдиницы.id_TT, 0) КАК ИдТочки
	               |ИЗ
	               |	Сводная КАК Сводная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО Сводная.ТТ = СтруктурныеЕдиницы.Наименование";
				   
	Запрос.УстановитьПараметр("ТзТТ", ТзТТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТочкаСсылка.Пустая() Тогда
			ОБщегоНазначения.СообщитьОбОшибке("Не удалось найти в справочнике точку: " + Выборка.ТТ + ". Добавлена не будет.");
			Продолжить;
		КонецЕсли;
		
		НовСтр = Объект.Promo_tt.Добавить();
		НовСтр.id_promo = ИдПромо;
		НовСтр.id_tt = Выборка.ИдТочки;
		НовСтр.НазваниеТочки = Выборка.ТочкаСсылка; //ПодобратьТТСНужнымid(КодТТ);
        НовСтр.plan_pr = Выборка.План;
		
	КонецЦикла;
	
	ТД.Очистить();
	Элементы.ГруппаТТ.Видимость = Истина;
	Элементы.ГруппаТТДобавление.Видимость = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьДобавлениеТТИзЭксель(Команда)
	
	ТД.Очистить();
	Элементы.ГруппаТТ.Видимость = Истина;
	Элементы.ГруппаТТДобавление.Видимость = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДобавлениеТТИзЭксель(Команда)
	
	Элементы.ГруппаТТ.Видимость = Ложь;
	Элементы.ГруппаТТДобавление.Видимость = Истина;
	
	Тд.ФиксацияСверху=1;	
	Тд.Область("R1C1").Текст="ТТ";
	Тд.Область("R1C2").Текст="План продаж";
		
КонецПроцедуры


&НаКлиенте
Процедура ТипПромоПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораТипаНачисленияПроцентаСервер();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаНачисленияПроцентаСервер()
	
	Элементы.ТипНачисленияПроцента.СписокВыбора.Очистить();
	Type_perc = 0;
	
	ПодставитьСписокВыбораУПоляПоТаблицеFields_znach("promo..Type_perc", Элементы.ТипНачисленияПроцента, ЭтаФорма.Type_perc, Истина);
	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..All_tovar", Элементы.Promo_NaborAll_tovar_sp, Объект.Promo_Nabor, "All_tovar_sp");
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..is_fact", Элементы.Promo_Naboris_fact_sp, Объект.Promo_Nabor, "is_fact_sp");	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..Is_rasch", Элементы.Promo_Naboris_rasch_sp, Объект.Promo_Nabor, "is_rasch_sp");	
	ПодставитьСписокВыбораУТаблицыПоТаблицеFields_znach("Promo_nabor..Is_nachisl", Элементы.Promo_Naboris_nachisl_sp, Объект.Promo_Nabor, "is_nachisl_sp");			
	
КонецПроцедуры

&НаКлиенте
Процедура Promo_tovarПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеТТ(Команда)
	
	Для Каждого Стр Из Объект.Promo_tt Цикл
		Стр.is_pok = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиТТ(Команда)
	
	Для Каждого Стр Из Объект.Promo_tt Цикл
		Стр.is_pok = Ложь;
	КонецЦикла;          	
	
КонецПроцедуры


&НаКлиенте
Процедура Promo_ttНазваниеТочкиПриИзменении(Элемент)
	
	Элементы.promo_tt.ТекущиеДанные.id_tt = Элементы.promo_tt.ТекущиеДанные.НазваниеТочки.id_TT;
	
КонецПроцедуры


&НаКлиенте
Процедура Promo_ttid_ttПриИзменении(Элемент)
	
	Элементы.promo_tt.ТекущиеДанные.НазваниеТочки = ПодобратьТТСНужнымid(Элементы.promo_tt.ТекущиеДанные.id_tt);
	
КонецПроцедуры

&НаСервере
Функция ПодобратьТТСНужнымid(Ид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.id_TT = &id_TT";
				   
	Запрос.УстановитьПараметр("id_TT", Ид);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТТВСпискеСервер()
	
	ТзДляРаботы = Объект.Promo_tt.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТТВрем.id_tt
	               |ПОМЕСТИТЬ Сводная
	               |ИЗ
	               |	&ТТВрем КАК ТТВрем
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сводная.id_tt,
	               |	ЕСТЬNULL(СтруктурныеЕдиницы.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК НазваниеТочки
	               |ИЗ
	               |	Сводная КАК Сводная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО Сводная.id_tt = СтруктурныеЕдиницы.id_TT";
				   
	Запрос.УстановитьПараметр("ТТВрем", ТзДляРаботы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		найдСтр = Объект.Promo_tt.НайтиСтроки(Новый Структура("id_tt", Выборка.id_tt));
		
		Если НайдСтр.Количество() > 0 Тогда
			НайдСтр[0].НазваниеТочки = Выборка.НазваниеТочки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДобавлениеТовараИзЭксель(Команда)
	
	ТекДанные = Элементы.Promo_Nabor.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Для подбора необходимо выделить строку набора, которому будет принадлежать товар!'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		ТекНаборПриДобавлении = 0;
		
		Возврат;
	
	КонецЕсли;
	
	Элементы.ГруппаНаборыТовары.Видимость = Ложь;
	Элементы.ГруппаДобавлениеТоваровИзЭксель.Видимость = Истина;
	
	ТекНаборПриДобавлении = ТекДанные.nabor;
	
	ТдТовары.ФиксацияСверху=1;	
	ТдТовары.Область("R1C1").Текст="Номенклатура";
		
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТоварыИзЭксель(Команда)
	
	//Ответ = Вопрос("Очистить ВСЕ товары у ВСЕХ наборов перед переносом?", РежимДиалогаВопрос.ДаНет);
	//
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	Объект.Promo_tovar.Очистить();
	//КонецЕсли;
	
	ТзТовары = Новый ТаблицаЗначений;
	ТзТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(120)));
	
	Для в=2 по ТдТовары.ВысотаТаблицы цикл
		
		Для ш=1 по ТдТовары.ШиринаТаблицы Цикл 
			
			Текст=ТдТовары.Область("R"+Формат(в,"ЧГ=")+"C"+Формат(ш,"ЧГ=")).Текст;
			
			если ш=1 тогда
				
				Если сокрЛП(текст)="" тогда			
					продолжить;
				КонецЕсли;
				
				Ном = "";
				
				Попытка
					Ном = Текст;
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Невозможно перенести номенклатуру: " + текст);
					Продолжить;
				КонецПопытки;
				
				НовСтр = ТзТовары.Добавить();
				НовСтр.Номенклатура = Текст;
								 					
			Иначеесли  ш=2 тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТзТовары.Номенклатура
	               |ПОМЕСТИТЬ Сводная
	               |ИЗ
	               |	&ТзТовары КАК ТзТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сводная.Номенклатура,
	               |	ЕСТЬNULL(СпрНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Ссылка
	               |ИЗ
	               |	Сводная КАК Сводная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО Сводная.Номенклатура = СпрНоменклатура.Наименование
	               |ГДЕ
	               |	НЕ ЕСТЬNULL(СпрНоменклатура.ЭтоГруппа, ЛОЖЬ)";
				   
	Запрос.УстановитьПараметр("ТзТовары", ТзТовары);
	ТзТоварыСсылки = Запрос.Выполнить().Выгрузить();
	
	Сч = ПолучитьНомерСтрокиВНаборе(ТекНаборПриДобавлении);
	
	Для Каждого Стр Из ТзТоварыСсылки Цикл
		
		Если Стр.Ссылка.Пустая() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось подобрать элемент справочника для номенклатуры: " + Стр.Номенклатура);
			Продолжить;
		КонецЕсли;
		
		НовСтр = Объект.Promo_tovar.Добавить();
		НовСтр.id_promo = ИдПромо;
		НовСтр.nabor = ТекНаборПриДобавлении;
		НовСтр.id_tov = Стр.Ссылка.id_tov;
		НовСтр.Номенклатура = Стр.Ссылка;
		НовСтр.НомерСтрокиВНаборе = Сч;
		
		Сч = Сч + 1;
		
	КонецЦикла;			
	
	ТдТовары.Очистить();
	Элементы.ГруппаНаборыТовары.Видимость = Истина;
	Элементы.ГруппаДобавлениеТоваровИзЭксель.Видимость = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьДобавлениеТоваровИзЭксель(Команда)
	
	ТдТовары.Очистить();
	Элементы.ГруппаНаборыТовары.Видимость = Истина;
	Элементы.ГруппаДобавлениеТоваровИзЭксель.Видимость = Ложь;
	
КонецПроцедуры

