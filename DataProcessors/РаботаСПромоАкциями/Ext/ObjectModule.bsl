Перем мРекордсет Экспорт;
Перем мСоединение Экспорт;
Перем мБазаДанных;

////////////////////////////////////////////
// ADO
////////////////////////////////////////////

Функция АДОКоннекшн_СоздатьОбъект() Экспорт
	
	ADOСоединение = Новый ComObject("ADODB.Connection");
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionTimeOut = 0;
    
    Возврат ADOСоединение; 
    
КонецФункции    // АДОКоннекшн_СоздатьОбъект

Функция АДОРекордсет_СоздатьОбъект(Соединение = "") Экспорт
    
    rs = New ComObject("ADODB.Recordset");
    
    rs.ActiveConnection = Соединение;                               
        
   Возврат rs;
    
КонецФункции    // АДОРекордсет_СоздатьОбъект

Функция АДОДБ_УстановитьСоединение(Соединение, сИмяБазы, сИмяКомпьютера, сЛогин, сПароль) Экспорт
        
	Строка = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL(, , мБазаДанных, , , "LANGUAGE=русский"); 

    Возврат Соединение.Open(Строка);
    
КонецФункции // АДОДБ_УстановитьСоединение()

////////////////////////////////////////////
// Прочие
////////////////////////////////////////////

Функция СоставитьЗаготовкуЗапросаНаЧтение() Экспорт
	
	Возврат "SELECT <field> FROM <tablename> (nolock)";
	
КонецФункции 

Процедура ДополнитьТекстЗапросаНаЧтениеУсловиями(ТекстЗапроса, ИмяПоля, ЗначениеПоля, ЭтоПервоеУсловие = Истина) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервоеУсловие, " WHERE ", " AND ") + ИмяПоля + " = " + ЗначениеПоля;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицу(ТЧПараметр, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ, СоответствиеУсловий = Неопределено) Экспорт
	
	Если мРекордсет = Неопределено Тогда
		
		мСоединение = АДОКоннекшн_СоздатьОбъект();
    
   		Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
        	Сообщить("Не удалось подключиться...", 30);
        	Возврат;
    	КонецЕсли;                                        
    
    	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
		
	КонецЕсли;
	
	ТЧ = ЭтотОбъект[ИмяТаблицы];
	
	ТекстЗапроса = СоставитьЗаготовкуЗапросаНаЧтение(); 	 	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<field>", СтруктураПолей);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<tablename>", ИмяТаблицы);
	
	Если СоответствиеУсловий <> Неопределено Тогда
		
		Сч = 0;
		
		Для Каждого ЭлУсловие Из СоответствиеУсловий Цикл		
			
			Сч = Сч + 1;
			
			ДополнитьТекстЗапросаНаЧтениеУсловиями(ТекстЗапроса, ЭлУсловие.Ключ, ЭлУсловие.Значение, Сч = 1);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	Тч.Очистить();
	
	СчИндексногоПоля = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		НовСтр = ТЧ.Добавить();
		СчИндексногоПоля = СчИндексногоПоля + 1;
		
		Попытка
			НовСтр.ИндексноеПоле = СчИндексногоПоля;
		Исключение
		КонецПопытки;
		
		Для Каждого Колонка Из РеквизитыТЧ Цикл
			НовСтр[Колонка] = мРекордсет.Fields(Колонка).Value;						
		КонецЦикла;
		
		мРекордсет.MoveNext();
		
	КонецЦикла;
		
	мРекордсет.Close();
	
КонецПроцедуры


//////////////////////////////////////////////
//
/////////////////////////////////////////////

Процедура УдалитьВсеРасчетыПоПромо(ИдПромо) Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат;
   	КонецЕсли;                                        
    
   	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
	
	СтруктураПолей = "id_promo, is_active";
	ИмяТаблицы = "Promo";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("is_active");
	
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("id_promo", ИдПромо);
	
	ТекстЗапроса = СоставитьЗаготовкуЗапросаНаЧтение(); 	 	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<field>", СтруктураПолей);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<tablename>", ИмяТаблицы);
	
	Если СоответствиеУсловий <> Неопределено Тогда
		
		Сч = 0;
		
		Для Каждого ЭлУсловие Из СоответствиеУсловий Цикл		
			
			Сч = Сч + 1;
			
			ДополнитьТекстЗапросаНаЧтениеУсловиями(ТекстЗапроса, ЭлУсловие.Ключ, ЭлУсловие.Значение, Сч = 1);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Попытка
		мРекордсет.Open(ТекстЗапроса, мСоединение);
	Исключение
		Возврат;
	КонецПопытки;
	
	ПромоБылоАктивным = Ложь;
	
	СчИндексногоПоля = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		Если мРекордсет.Fields(1).Value = 1 Тогда
			ПромоБылоАктивным = Истина;
		КонецЕсли;
		
		мРекордсет.MoveNext();
		
	КонецЦикла;
	
	Если НЕ ПромоБылоАктивным Тогда
		Попытка
			мСоединение.Execute("delete from [Promo].[dbo].[promo_fact] WHERE  id_promo=" + Формат(ИдПромо, "ЧГ=0"));
		Исключение
			Сообщить(ОписаниеОшибки());
			мРекордсет.Close();	
			Возврат;
		КонецПопытки; 
	КонецЕсли;	
	
	мРекордсет.Close();	
	
КонецПроцедуры

Процедура ПересчетПромо(ИдПромо) Экспорт
	
мСоединение = АДОКоннекшн_СоздатьОбъект();
    
   	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат;
    КонецЕсли;                                        
    
   Попытка
		мСоединение.Execute("exec Promo.dbo.promo_calc 3," + Формат(ИдПромо, "ЧГ=0") + ",3");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	Сообщить("Пересчет выполнен!");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуPromo(ЗАгружатьКопию = Истина) Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
    
    Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
        Сообщить("Не удалось подключиться...", 30);
        Возврат;
    КонецЕсли;                                        
    
    мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
	
	ЗаполнитьТаблицуFields_znach();	
	
	СтруктураПолей = "id_promo, is_active, name_sms, Date_st_pok, Date_fi_pok, Date_st_pr, Date_fi_pr, Promo_type, Type_perc, Sum_cratn, weekdays, Proc_pr_B, max_proc_pr_b, Min_fact_B, CAST([descr_pr] as CHAR(500)) as descr_pr
					|, CAST([text_sms] as NVARCHAR(200)) as text_sms, [All_tt], [All_vv]";
	ИмяТаблицы = "Promo";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("id_promo");
	РеквизитыТч.Добавить("is_active");
	РеквизитыТч.Добавить("name_sms");
	РеквизитыТч.Добавить("descr_pr");
	РеквизитыТч.Добавить("Date_st_pok");
	РеквизитыТч.Добавить("Date_fi_pok");
	РеквизитыТч.Добавить("Date_st_pr");
	РеквизитыТч.Добавить("Date_fi_pr");
	РеквизитыТч.Добавить("Promo_type");
	РеквизитыТч.Добавить("Type_perc");
	РеквизитыТч.Добавить("Sum_cratn");
	РеквизитыТч.Добавить("weekdays");
	РеквизитыТч.Добавить("Proc_pr_B");
	РеквизитыТч.Добавить("max_proc_pr_b");
	РеквизитыТч.Добавить("Min_fact_B");
	РеквизитыТч.Добавить("text_sms");
	РеквизитыТч.Добавить("All_tt");
	РеквизитыТч.Добавить("All_vv");
	
	ЗаполнитьТаблицу(Promo, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ);
	
	Promo_Копия.Загрузить(Promo.Выгрузить());
	
КонецПроцедуры 

Процедура ЗаполнитьТаблицуFields_znach()
	
	СтруктураПолей = "field, znach_f, name_f, Promo_type";
	ИмяТаблицы = "Fields_znach";
	
	РеквизитыТЧ = Новый Массив;
	РеквизитыТч.Добавить("field");
	РеквизитыТч.Добавить("znach_f");
	РеквизитыТч.Добавить("name_f");
	РеквизитыТч.Добавить("Promo_type");
	
	ЗаполнитьТаблицу(fields_znach, СтруктураПолей, ИмяТаблицы, РеквизитыТЧ);
	
	Для Каждого Стр Из fields_znach Цикл
		Стр.field = СокрЛП(Стр.field);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНовоеПромо() Экспорт
	
	ТекстЗапроса =
	"SELECT
	|	MAX(tablica.id_promo) AS idpromo
	|FROM
	|	[" + мБазаДанных + "].[dbo].[promo] AS tablica (nolock)";

	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Неопределено;
    КонецЕсли; 

	мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);

	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	id_promo = 0;
	
	Пока мРекордсет.EOF = 0 Цикл
		
		id_promo = мРекордсет.Fields("idpromo").Value;						
				
		мРекордсет.MoveNext();
		
	КонецЦикла;
		
	мРекордсет.Close();
	
	id_promo = id_promo + 1;
	
	ЗаполнитьНовымIdТаблицу(Promo_Nabor, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_tovar, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_nach, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_tt, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_elu, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_Nabor_Копия, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_tovar_Копия, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_nach_Копия, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_tt_Копия, id_promo);
	ЗаполнитьНовымIdТаблицу(Promo_elu_Копия, id_promo);
	
	Возврат id_promo
	
КонецФункции

Процедура ЗаполнитьНовымidТаблицу(Тч, id_promo)
	
	НайдСтр = ТЧ.НайтиСтроки(Новый Структура("id_promo", 0));
	
	Для Каждого Стр Из НайдСтр Цикл
		
	  	Стр.id_promo = id_promo;
	  
	 КонецЦикла;
	
КонецПроцедуры
	
Функция ОпределитьВозможностьВозвратаВНеактивноеОбъект(ИдПромо) Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
    
   	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Ложь;
    КонецЕсли;                                        
    
    мРекордсет = АДОРекордсет_СоздатьОбъект(мСоединение);
		
	ТекстЗапроса = 	"SELECT Fact_promo_Pr FROM promo_fact (nolock) WHERE id_promo = " + ФорматПоля(ИдПромо);
	
	мРекордсет.Open(ТекстЗапроса, мСоединение);
	
	флЕстьПродажи = Ложь;
	
	Пока мРекордсет.EOF = 0 Цикл

		флЕстьПродажи = Истина;
		Прервать;
		
	КонецЦикла;
		
	Возврат НЕ флЕстьПродажи;	
	
КонецФункции

////////////////////////////////////////////

//ТЗИсх - какая таблица была
//ТЗКон - какая таблица стала
//Названия колонок должны совпадать
//Ключи - массив ключей
Функция СравнитьПоКлючамТЗ(ТЗНач, ТЗКон, Ключи, ИмяТаблицы, МассивУсловийГде, ИдПромо, НеучитываемыеПоля, НазваниеКолонкиРезультата="Статус") Экспорт
	
	мСоединение = АДОКоннекшн_СоздатьОбъект();
	
	Если 0 = АДОДБ_УстановитьСоединение(мСоединение, "база", "сервер", "логин", "пассворд") Тогда
       	Сообщить("Не удалось подключиться...", 30);
       	Возврат Неопределено;
    КонецЕсли; 

	ТЗРез=Новый ТаблицаЗначений();
    КолРез=Новый Массив();
	
	НеучитываемыеПоля.Добавить("НомерСтроки");
	НеучитываемыеПоля.Добавить("ИсходныйНомерСтроки");
    
    //Ищем общие колонки в обоих таблицах
    Для Каждого Эл ИЗ ТЗНач.Колонки Цикл
		
		Если НеучитываемыеПоля.Найти(Эл.Имя) = Неопределено Тогда
		
		Если ТЗКон.Колонки.Найти(Эл.Имя)<>Неопределено Тогда
            КолРез.Добавить(Эл.Имя);
		КонецЕсли;
		
		КонецЕсли;
		
    КонецЦикла;
    
    //Добавляем эти колонки в таблицу-результат
    Для Каждого Эл ИЗ КолРез Цикл
        ТЗРез.Колонки.Добавить(Эл);
    КонецЦикла;
    
    //Добавляем служебные колонки
    ТЗРез.Колонки.Добавить("___ТЗНачИндекс");
    ТЗРез.Колонки.Добавить("___ТЗКонИндекс");
    ТЗРез.Колонки.Добавить("___ТЗНачКонтроль");
    ТЗРез.Колонки.Добавить("___ТЗКонКонтроль");
    
    
    Для Каждого Стр Из ТЗНач Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=ТЗНач.Индекс(Стр)+1;
        НовСтр.___ТЗКонИндекс=0;
        НовСтр.___ТЗНачКонтроль=1;
        НовСтр.___ТЗКонКонтроль=0;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    Для Каждого Стр Из ТЗКон Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=0;
        НовСтр.___ТЗКонИндекс=ТЗКон.Индекс(Стр)+1;
        НовСтр.___ТЗНачКонтроль=0;
        НовСтр.___ТЗКонКонтроль=1;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    
    СтрокаСвертки="";
    Для Каждого Эл Из Ключи Цикл
        СтрокаСвертки=СтрокаСвертки+?(СтрокаСвертки="","",",")+Эл;
    КонецЦикла;
    
    СтрокаИтогов="___ТЗНачИндекс,___ТЗКонИндекс,___ТЗНачКонтроль,___ТЗКонКонтроль";
    
    //Сворачиваем
    ТЗРез.Свернуть(СтрокаСвертки, СтрокаИтогов);
    
    //Восстанавливаем общие колонки
    ЗнКол=Новый Массив();
    Для Каждого Эл ИЗ КолРез Цикл
        Если ТЗРез.Колонки.Найти(Эл)=Неопределено Тогда
            ТЗРез.Колонки.Добавить(Эл);
            ЗнКол.Добавить(Эл);
        КонецЕсли;
    КонецЦикла;
    
    ТЗРез.Колонки.Добавить(НазваниеКолонкиРезультата);
    
    //Формируем таблицу результата
    Для Каждого Стр ИЗ ТЗРез Цикл
        Если Стр.___ТЗНачКонтроль>1 ИЛИ Стр.___ТЗКонКонтроль>1 Тогда
            Возврат Новый Структура("КодОшибки","ДублированиеКлюча");
        ИначеЕсли Стр.___ТЗНачИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=+1; //Добавлена
            Для Каждого Эл ИЗ ЗнКол Цикл
                Зн=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        ИначеЕсли Стр.___ТЗКонИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=-1; //Удалена
            Для Каждого Эл ИЗ ЗнКол Цикл
                Зн=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        Иначе
            Р=Новый Структура();
            Для Каждого Эл ИЗ ЗнКол Цикл
                ЗнНач=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                ЗнКон=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Если ЗнНач<>ЗнКон Тогда
                    Р.Вставить(Эл, ЗнНач);
                КонецЕсли;
                Стр[Эл]=ЗнКон;
            КонецЦикла;
            Стр[НазваниеКолонкиРезультата]=Р; //Структура изменений
        КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТзРез Цикл
		
		//1. Были изменены поля.
		Если ТипЗнч(Стр[НазваниеКолонкиРезультата]) = Тип("Структура") Тогда
			
			ТекстЗапроса = СоставитьЗапросНаИзменение();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			ТекстSet = "";
			
			Для Каждого ЭлСтруктуры Из Стр[НазваниеКолонкиРезультата] Цикл
				
				ТекстSet = ТекстSet + "[" + ЭлСтруктуры.Ключ + "]" + " = " + ФорматПоля(Стр[ЭлСтруктуры.Ключ]) + ", "; 
				
			КОнецЦикла;
			
			ТекстSet = Лев(ТекстSet, СтрДлина(ТекстSet) - 2);
			
			Если ТекстSet = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейSET", ТекстSet);
			
			ТекстГде = "";
			
			НайдСтрПоИндексномуПолю = ТзНач.Найти(Стр.ИндексноеПоле, "ИндексноеПоле");
			
			Если НайдСтрПоИндексномуПолю = Неопределено Тогда
				Сообщить("ОШИБКА!!!!");
				Продолжить;
			КонецЕсли;			
			
			Для Каждого ЭлМассива Из МассивУсловийГде Цикл
				ТекстГде = ТекстГде + "[" + ЭлМассива + "] = " + ФорматПоля(НайдСтрПоИндексномуПолю[ЭлМассива]) + " AND ";
			КонецЦикла;
			
			ТекстГде = Лев(ТекстГде, СтрДлина(ТекстГде) - 5);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейWhere", ТекстГде); 	
				
		//2. Добавление
		ИначеЕсли Стр[НазваниеКолонкиРезультата] = 1 Тогда
			
			ТекстЗапроса = СоставитьЗапросНаДобавление();
			
			ТекстЗапроса = СтрЗаменить(текстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			Поля = "";
			Значения = "";
			
			Для Каждого Колонка Из ТЗКон.Колонки Цикл
								
				Если Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИндексноеПоле" ИЛИ Колонка.Имя = "ИсходныйНомерСтроки" 
					ИЛИ НеучитываемыеПоля.Найти(Колонка.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Поля = Поля + Колонка.Имя + ",";
				
				Если Колонка.Имя = "id_promo" Тогда
					Значения = Значения + ФорматПоля(ИдПромо) + ",";
				Иначе
					Значения = Значения + ФорматПоля(Стр[Колонка.Имя]) + ",";
				КонецЕсли;
				
			КонецЦикла;
			
			Поля = Лев(Поля, СтрДлина(Поля) - 1);
			Значения = Лев(Значения, СтрДлина(Значения) - 1);
			
			Если Поля = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Поля", Поля);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Значения", Значения);
			
		//3. Удаление	
		ИначеЕсли Стр[НазваниеКолонкиРезультата] = -1 Тогда
			
			ТекстЗапроса = СоставитьЗапросНаУдаление();
			
			ТекстЗапроса = СтрЗаменить(текстЗапроса, "ИмяТаблицы", ИмяТаблицы);
			
			ТекстГде = "";
			
			НайдСтрПоИндексномуПолю = ТзНач.Найти(Стр.ИндексноеПоле, "ИндексноеПоле");
			
			Если НайдСтрПоИндексномуПолю = Неопределено Тогда
				Сообщить("ОШИБКА!!!!");
				Продолжить;
			КонецЕсли;			
			
			Для Каждого ЭлМассива Из МассивУсловийГде Цикл
				ТекстГде = ТекстГде + "[" + ЭлМассива + "] = " + ФорматПоля(НайдСтрПоИндексномуПолю[ЭлМассива]) + " AND ";
			КонецЦикла;
			
			ТекстГде = Лев(ТекстГде, СтрДлина(ТекстГде) - 5);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокПолейWhere", ТекстГде); 			
			
		КонецЕсли;
		
		//Попытка
		Если Стр[НазваниеКолонкиРезультата] = 1 И ИмяТаблицы = "promo" Тогда
			
			СкульТекст = "SET NOCOUNT ON" + Символы.ПС + "SET IDENTITY_INSERT [promo] ON" + Символы.ПС 
			//+ "GO" + Символы.ПС 
			+ ТекстЗапроса + Символы.ПС
			//+ "GO" + Символы.ПС
			+ "SET IDENTITY_INSERT [promo] OFF" + Символы.ПС + "SET NOCOUNT OFF" + Символы.ПС 
			//+ "GO";
			;
			
			мСоединение.Execute(СкульТекст);
			
		Иначе
			
			мСоединение.Execute("Begin Transaction" + Символы.ПС + текстЗапроса + Символы.ПС + "Commit");
			
		КонецЕсли;
		//Исключение
		//	ОБщегоНазначения.СообщитьОбОшибке("Произошла ошибка при добавлении полей. " + ОписаниеОшибки());
		//	Продолжить;
		//КонецПопытки;  
		
		//// добавление нового промо. Получим его ИД
		//Если Стр[НазваниеКолонкиРезультата] = 1 И ИмяТаблицы = "promo" Тогда
		//	
		//  	ЗаполнитьТаблицуPromo(Ложь);
		//	
		//	Для Каждого Стр Из Promo Цикл
		//		
		//		Если Найти
		
		//Сообщить(текстЗапроса);
		
	КонецЦикла;	
	
	мСоединение.Close();
	
    Возврат ТЗРез;
	
КонецФункции

Функция ФорматПоля(Поле)
	
	Если ТипЗнч(Поле) = Тип("Дата") Тогда
		Возврат "'" + Формат(Поле, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат "'" + Поле + "'";
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧРД=.; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле = Истина, 1, 0);
	КонецЕсли;
	
КонецФункции

Функция СоставитьЗапросНаДобавление()
	
	Возврат "INSERT INTO [" + мБазаДанных + "].[dbo].[ИмяТаблицы]
		|	(Поля)
		|VALUES (Значения)";			
		
КонецФункции

Функция СоставитьЗапросНаУдаление()
	
	Возврат "DELETE FROM [" + мБазаДанных + "].[dbo].[ИмяТаблицы] WHERE СписокПолейWhere";
	
КонецФункции

Функция СоставитьЗапросНаИзменение()
	
	Возврат "UPDATE [" + мБазаДанных + "].[dbo].[ИмяТаблицы]
   				|SET СписокПолейSET
				|WHERE СписокПолейWhere";	
	
КонецФункции



мРекордсет = Неопределено;
мСоединение = Неопределено;
мБазаДанных = "Promo";
