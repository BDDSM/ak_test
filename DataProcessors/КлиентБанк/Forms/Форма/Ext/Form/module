
Перем СписокВыбораТипаНовогоДокумента;
Перем СписокТиповДокументов;
Перем БылаПроверка;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИмяОбработки = Метаданные().Имя;
		
	НачПериода = РабочаяДата;
	КонПериода = РабочаяДата;
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	
	Попытка 
		ВременнаяТаб = ВосстановитьЗначение(ИмяОбработки + "СтрокаНастроек");
		
		Если ВременнаяТаб.Количество() = 0
				ИЛИ ВременнаяТаб.Количество() <> 10 Тогда
			
			НастройкаЗаполнения.Добавить().Документ = "Платежное поручение исходящее";
			НастройкаЗаполнения.Добавить().Документ = "Платежное поручение входящее";
			НастройкаЗаполнения.Добавить().Документ = "Платежный ордер на списание";
			НастройкаЗаполнения.Добавить().Документ = "Платежный ордер на поступление";
			НастройкаЗаполнения.Добавить().Документ = "Платежное требование выставленное";
			НастройкаЗаполнения.Добавить().Документ = "Платежное требование полученное";
			НастройкаЗаполнения.Добавить().Документ = "Аккредитив переданный";
			НастройкаЗаполнения.Добавить().Документ = "Аккредитив полученный";
			НастройкаЗаполнения.Добавить().Документ = "Инкассовое поручение переданное";
			НастройкаЗаполнения.Добавить().Документ = "Инкассовое поручение полученное";
			
			ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
			СохранитьЗначение(ИмяОбработки + "СтрокаНастроек", НастройкаЗаполнения.Выгрузить());

		Иначе
			НастройкаЗаполнения.Загрузить(ВременнаяТаб);
		КонецЕсли;
		ГруппаДляНовыхКонтрагентов 	= ВосстановитьЗначение(ИмяОбработки + "КаталогКонтрагентов");
		Организация 				= ВосстановитьЗначение(ИмяОбработки + "Организация");
		БанковскийСчет 				= ВосстановитьЗначение(ИмяОбработки + "БанковскийСчет");

	Исключение
		
		НастройкаЗаполнения.Добавить().Документ = "Платежное поручение исходящее";
		НастройкаЗаполнения.Добавить().Документ = "Платежное поручение входящее";
		НастройкаЗаполнения.Добавить().Документ = "Платежный ордер на списание";
		НастройкаЗаполнения.Добавить().Документ = "Платежный ордер на поступление";
		НастройкаЗаполнения.Добавить().Документ = "Платежное требование выставленное";
		НастройкаЗаполнения.Добавить().Документ = "Платежное требование полученное";
		НастройкаЗаполнения.Добавить().Документ = "Аккредитив переданный";
		НастройкаЗаполнения.Добавить().Документ = "Аккредитив полученный";
		НастройкаЗаполнения.Добавить().Документ = "Инкассовое поручение переданное";
		НастройкаЗаполнения.Добавить().Документ = "Инкассовое поручение полученное";
		
	КонецПопытки;
	
	Попытка
		Если ВосстановитьЗначение(ИмяОбработки + "РежимПоУмолчанию") = "  Загрузка  " Тогда
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница2;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	СохранитьЗначение(ИмяОбработки + "СтрокаНастроек"		, НастройкаЗаполнения.Выгрузить());
	СохранитьЗначение(ИмяОбработки + "КаталогКонтрагентов"	, ГруппаДляНовыхКонтрагентов);
	СохранитьЗначение(ИмяОбработки + "Организация"			, Организация);
	СохранитьЗначение(ИмяОбработки + "БанковскийСчет"		, БанковскийСчет);
	СохранитьЗначение(ИмяОбработки + "РежимПоУмолчанию"		, ЭлементыФормы.Панель1.ТекущаяСтраница.Заголовок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &СсылкаНаОрганизацию";
					   
		Выборка = Запрос.Выполнить().Выгрузить();
	   
		Если Выборка.Количество() = 0 Тогда
			БанковскийСчет 	= Справочники.БанковскиеСчета.ПустаяСсылка();
			Организация 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
	
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		Попытка
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(БанковскийСчет,Организация,мВалютаРегламентированногоУчета);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОбновитьСостояниеДокументов();
	
	ЭквайрингСводный = Истина;
	
	//+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	Для каждого СтрокаОтбораИмпорта Из ЭлементыФормы.ДокументыКИмпорту.ОтборСтрок Цикл
		СтрокаОтбораИмпорта.Использование = Ложь;
	КонецЦикла;
	//---АК LAGP
		
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	Если НЕ БылаПроверка Тогда
		БылаПроверка = Истина;
		БанковскийСчетПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма Тогда
		КоманднаяПанельДокументыНаЭкспортОбновить(Неопределено);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Событие возникающее при изменении реквизита: Организация
// 
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ВыборкаОрганизаций = ПолучитьВыборкуОрганизаций();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Организация = ВыборкаОрганизаций.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(БанковскийСчет, Организация, мВалютаРегламентированногоУчета) Тогда
		БанковскийСчетПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура БанковскийСчетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиПрограммыКлиентаБанка();  
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница.Заголовок = "  Выгрузка  " Тогда
		КоманднаяПанельДокументыНаЭкспортОбновить(Неопределено);
	Иначе
		ДокументыКИмпорту.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачПериодаПриИзменении(Элемент)
	
	КоманднаяПанельДокументыНаЭкспортОбновить(Неопределено);

КонецПроцедуры

Процедура ФайлВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузки(Элемент);
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//  
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Кодировка, "Файл выгрузки");
	
КонецПроцедуры

Процедура ФайлЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	ВыборФайлаДляЗагрузки(Элемент);
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//  
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Кодировка, "Файл загрузки");
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указаны организация и банковский счет.");
		Возврат;
	КонецЕсли;
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройкиЗаполнения");
	
	ФормаНастройки.ОткрытьМодально();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТАБЛИЦ

//Таблица документов на экспорт(выгрузка)
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Колонка.Имя = "Выгружать" Тогда
		ВыбраннаяСтрока.Выгружать = НЕ (ВыбраннаяСтрока.Выгружать);
		
	ИначеЕсли Колонка.Имя = "ОписаниеОшибок" Тогда
		Сообщить(ВыбраннаяСтрока.ОписаниеОшибок);
	
	ИначеЕсли Колонка.Имя = "НазначениеПлатежа" Тогда
		Сообщить(ВыбраннаяСтрока.НазначениеПлатежа);
		
	Иначе
		ОбъектДокумента = ВыбраннаяСтрока.Документ.ПолучитьОбъект();
		ОбъектДокумента.ПолучитьФорму(,ЭтаФорма).Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыНаЭкспортПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность > 0 Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Проведен Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
	Иначе 
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
		ОформлениеСтроки.ЦветФона = WebЦвета.БледноБирюзовый;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если Копирование Тогда
	
		ВыбраннаяСтрока = ЭлементыФормы.ДокументыНаЭкспорт.ТекущаяСтрока;
		Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
			Возврат;
		КонецЕсли;
		
		НовыйДокумент = ВыбраннаяСтрока.Документ.Скопировать();
	
	Иначе
		
		СписокВыбораТипаНовогоДокумента = Новый СписокЗначений;
		Для каждого Документа из ТаблицаДокументов Цикл
			Если Документа.Пометка Тогда
				СписокВыбораТипаНовогоДокумента.Добавить(Документа.Документ,Документа.Название);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВыбораТипаНовогоДокумента.Количество()=1 Тогда
			ВыбранныйТипДокумента = СписокВыбораТипаНовогоДокумента[0];
		Иначе
			ВыбранныйТипДокумента = СписокВыбораТипаНовогоДокумента.ВыбратьЭлемент("Выбор типа документа");
			Если ВыбранныйТипДокумента = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		НовыйДокумент = Документы[ВыбранныйТипДокумента.Значение].СоздатьДокумент();
		
		НовыйДокумент.Организация     = Организация;
		НовыйДокумент.СчетОрганизации = БанковскийСчет;
//		НовыйДокумент.Оплачено        = Истина;
//		НовыйДокумент.ОтражатьВНалоговомУчете= НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"НеОтражатьДокументыВНалоговомУчете");
	КонецЕсли;
	
	ФормаНовогоДокумента = НовыйДокумент.ПолучитьФорму( , ЭтаФорма);
	ФормаНовогоДокумента.Открыть();

КонецПроцедуры

Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущаяКолонка.Имя = "Выгружать" Тогда
		Отказ = Истина;
		ВыбраннаяСтрока = ЭлементыФормы.ДокументыНаЭкспорт.ТекущаяСтрока;
		ФормаДокумента = ВыбраннаяСтрока.Документ.ПолучитьФорму( , ЭтаФорма);
		ФормаДокумента.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыНаЭкспортПриИзмененииФлажка(Элемент, Колонка)
	
	мСумма		= 0;
	мКоличество 	= 0;
	Для каждого СтрокаТЧ из ЭтотОбъект.ПлатежныеДокументы Цикл
		Если СтрокаТЧ.Выгружать Тогда
			мСумма 		= мСумма 		+ СтрокаТЧ.СуммаДокумента;
			мКоличество = мКоличество 	+ 1;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.ДокументыНаЭкспорт.Колонки.Выгружать.ТекстПодвала 		= мКоличество;
	ЭлементыФормы.ДокументыНаЭкспорт.Колонки.СуммаДокумента.ТекстПодвала  	= Формат(мСумма, "ЧДЦ=2");
	
КонецПроцедуры

Процедура ДокументыНаЭкспортПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Готовность > 0 Тогда
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.Значение 	= "Ошибка: " + ДанныеСтроки.ОписаниеОшибок;
	Иначе
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.Значение 	= "Документ готов к выгрузке!";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

//Командная понель экспорта
Процедура КоманднаяПанельДокументыНаЭкспортОбновить(Кнопка)
	
	ЗаполнитьДокументыНаЭкспорт(ЭлементыФормы.ДокументыНаЭкспорт);
	ДокументыНаЭкспортПриИзмененииФлажка(Кнопка, Неопределено);
	Если ПлатежныеДокументы.Количество() = 0 Тогда
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.Заголовок 	= "Список документов для выгрузки пуст.";
	Иначе
		ЭлементыФормы.СтатуснаяСтрокаПриВыгрузке.Заголовок 	= "";		
	КонецЕсли;

	ОбновитьСостояниеДокументов();
	
КонецПроцедуры

Процедура ОбновитьСостояниеДокументов()

	ЭлементыФормы.ВсегоДокументов.Заголовок = "Всего документов: " + ПлатежныеДокументы.Количество();
	
	Отбор = Новый Структура("Проведен",Ложь);
	НеПроведено = 0;
	Для каждого Строка из ПлатежныеДокументы Цикл
		Если НЕ Строка.Проведен Тогда
			НеПроведено = НеПроведено + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если НеПроведено > 0 Тогда 
		ЭлементыФормы.НеПроведеноДокументов.Заголовок = "Не проведено документов: " + НеПроведено + ". Провести?";
		ЭлементыФормы.НеПроведеноДокументов.Видимость = Истина;
	Иначе 	
		ЭлементыФормы.НеПроведеноДокументов.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортУстановитьФлажки(Кнопка)
	
	УстановитьФлажки(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортСнятьФлажки(Кнопка)
	
	УстановитьФлажки(Ложь);

КонецПроцедуры

//Основные действия
Процедура КнопкаВыгрузитьНажатие(Элемент)
	
	Если ЭтотОбъект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		ПроизвестиВыгрузку = КодВозвратаДиалога.Да;
		Для каждого СтрокаДокумента из ЭтотОбъект.ПлатежныеДокументы Цикл
			Если НЕ ЭлементыФормы.ДокументыНаЭкспорт.ПроверитьСтроку(СтрокаДокумента) Тогда
				Если СтрокаДокумента.Выгружать Тогда
					ПроизвестиВыгрузку = Вопрос("Будут выгружены документы, помеченые на выгрузку, но не попавшие в отбор." + Символы.ПС +
													"Продолжить выгрузку?", РежимДиалогаВопрос.ДаНет, 0,, "Внимание!");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроизвестиВыгрузку = КодВозвратаДиалога.Да Тогда
			Выгрузить(ЭлементыФормы.ДокументыНаЭкспорт);
		КонецЕсли;
	Иначе
		Предупреждение("Список документов для выгрузки пуст." + Символы.ПС +
																		"Проверьте правильность указанного банковского счета и периода выгрузки.");
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаОтчетОВыгрузкеНажатие(Элемент)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, ЭтотОбъект.ПлатежныеДокументы);
	ПолеОтчета.Показать("Отчет о выгруженных платежных документах");
	
КонецПроцедуры


//Таблица документов на импорт(загрузка)

Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Загружать" Тогда
		ВыбраннаяСтрока.Загружать = НЕ ВыбраннаяСтрока.Загружать;
		
	ИначеЕсли Колонка.Имя = "ОписаниеОшибок" Тогда
		Сообщить(ВыбраннаяСтрока.ОписаниеОшибок);
	
	ИначеЕсли Колонка.Имя = "НазначениеПлатежа" Тогда
		Сообщить(ВыбраннаяСтрока.НазначениеПлатежа);
		
	ИначеЕсли ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда 
		Если Колонка.Имя = "НомерСтроки"
			ИЛИ Колонка.Имя = "Картинка"
			ИЛИ Колонка.Имя = "Номер"
			ИЛИ Колонка.Имя = "Дата"
			ИЛИ Колонка.Имя = "Списано"
			ИЛИ Колонка.Имя = "Поступило"
			ИЛИ Колонка.Имя = "ВидОперации"
			ИЛИ Колонка.Имя = "ВидДокумента"
			ИЛИ (Колонка.Имя = "Контрагент"
					И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ.Контрагент)) 
			ИЛИ (Колонка.Имя = "СчетКонтрагента"
					И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ.СчетКонтрагента)) 
			ИЛИ (Колонка.Имя = "СтатьяДДС"
					И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ.СтатьяДвиженияДенежныхСредств)) 
			ИЛИ (Колонка.Имя = "Договор"
					И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ.ДоговорКонтрагента)) Тогда
			
			СтандартнаяОбработка = Ложь;
			ФормаДокумента = ВыбраннаяСтрока.Документ.ПолучитьФорму( , ЭтаФорма);
			ФормаДокумента.Открыть();
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыКИмпортуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.Готовность > 0 Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьТекст 	= Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		Если ДанныеСтроки.Проведен Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
		Иначе 
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
		КонецЕсли; 
	Иначе
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки 	= 4;
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыКИмпортуСчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);

	Если НЕ Организация.Пустая() Тогда
		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = Организация;
		ФормаСчета.Отбор.Владелец.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.РежимВыбора = Истина;
	ФормаСчета.Открыть();
	
КонецПроцедуры

Процедура ДокументыКИмпортуСчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.Значение = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
		
	Если Элемент.ВыборПоВладельцу = неопределено Тогда
		Элемент.ВыборПоВладельцу = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);

	Если НЕ ТипЗнч(ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные.Контрагент) = Тип("Строка")
			И НЕ ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные.Контрагент.Пустая() Тогда
		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные.Контрагент;
		ФормаСчета.Отбор.Владелец.Использование = Истина;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаСчета.РежимВыбора = Истина;
	ФормаСчета.Открыть();

КонецПроцедуры

Процедура ДокументыКИмпортуКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, ТекущиеДанные.Контрагент, мВалютаРегламентированногоУчета);
		Если НЕ СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			ТекущиеДанные.СчетКонтрагента = СчетКонтрагента;
		КонецЕсли;
	Иначе
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(ТекущиеДанные.СчетКонтрагента, ТекущиеДанные.Контрагент, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыКИмпортуДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

	ВидыДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации);
	Если ВидыДоговоров.Количество() = 0 Тогда
		СтандартнаяОбработка = ложь;
		Возврат;
	КонецЕсли;
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора"		, мВалютаРегламентированногоУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора"	, ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.Контрагент, ТекущиеДанные.Договор,
	ВидыДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры

Процедура ДокументыКИмпортуКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
 
КонецПроцедуры

Процедура ДокументыКИмпортуСчетКонтрагентаПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущиеДанные.Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыКИмпортуПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Готовность > 0 Тогда
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.Значение 	= "Ошибка: " + ДанныеСтроки.ОписаниеОшибок;
	Иначе
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.Значение 	= "Документ готов к загрузке!";
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыКИмпортуДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущиеДанные.Контрагент = Элемент.Значение.Владелец;
		ДокументыКИмпортуКонтрагентПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыКИмпортуВидОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;
	
	МассивВидовОпераций = Новый СписокЗначений;
	
	Если ТекущиеДанные.ВидДокумента = "ИнкассовоеПоручениеПереданное" 
			ИЛИ ТекущиеДанные.ВидДокумента = "АккредитивПолученный" 
			ИЛИ ТекущиеДанные.ВидДокумента = "ПлатежноеТребованиеВыставленное" 
			ИЛИ ТекущиеДанные.ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
		Если ТекущиеДанные.ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидДокумента = "ИнкассовоеПоручениеПолученное"
			ИЛИ ТекущиеДанные.ВидДокумента = "АккредитивПереданный"
			ИЛИ ТекущиеДанные.ВидДокумента = "ПлатежноеТребованиеПолученное" Тогда
		
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
		Если ТекущиеДанные.ВидДокумента = "ИнкассовоеПоручениеПолученное"
				ИЛИ ТекущиеДанные.ВидДокумента = "ПлатежноеТребованиеПолученное" Тогда
			МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
				
	ИначеЕсли ТекущиеДанные.ВидДокумента = "СписаниеСКорпоративныхКарт" Тогда
		
		МассивВидовОпераций.Добавить("Списание с корпоративных карт");
		
	КонецЕсли;
	
    Элемент.ДоступныеЗначения = МассивВидовОпераций;

КонецПроцедуры

//Командная панель импорта
Процедура КоманднаяПанельДокументыДляИмпортаОбновить(Кнопка) Экспорт
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаСоздатьКотрагентов(Кнопка)
	
	ФормаКонтрагентов = ПолучитьФорму("ФормаКонтрагентов");
	ФормаКонтрагентов.Открыть();
	
КонецПроцедуры

//Основные действия
Процедура КнопкаПрочитатьДанныеИзФайлаНажатие(Элемент)
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

Процедура КнопкаЗагрузитьНажатие(Элемент)
	
	Если ЭтаФорма.ДокументыКИмпорту.Количество() > 0 Тогда
		ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Загрузка банковской выписки");
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
		
		Загрузить(ЭтаФорма.ДокументыКИмпорту);
		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	Иначе
		Предупреждение("Список документов для загрузки пуст." + Символы.ПС + "Необходимо прочитать данные из файла.");
	КонецЕсли;
	
	//+sstuman
	Обработки.СозданиеЗадачПоНеотправленнымПлатежкам.Создать().СоздатьЗадачи(Организация, ПолучитьМеньшуюДату(), ПолучитьБольшуюДату());
	ПроверитьНапоминанияПользователяПоВидуЗадачи(ПараметрыСеанса.ТекущийПользователь, Справочники.ВидыЗадачПользователей.НеотправленныеПлатежи, Организация, Истина, "Неотправленные платежи отсутствуют");
	
	ПроверитьНапоминанияПользователяПоВидуЗадачи(ПараметрыСеанса.ТекущийПользователь, Справочники.ВидыЗадачПользователей.НеоплаченныеЗаявкиНаРасходованиеСредств, Организация, Истина, "Неоплаченные заявки на расходование средств отсутствуют");
	Обработки.СозданиеЗадачПоНеоплаченнымЗаявкамНаРасходование.Создать().СоздатьЗадачи();
	//-sstuman
	
КонецПроцедуры

Функция ПолучитьМеньшуюДату()
	
	пДата = ТекущаяДата();
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ДокументыКИмпорту Цикл
		Если СтрокаТаблицы.ДатаПроведения < пДата Тогда
			пДата = СтрокаТаблицы.ДатаПроведения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат пДата;
	
КонецФункции

Функция ПолучитьБольшуюДату()
	
	пДата = ТекущаяДата();
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ДокументыКИмпорту Цикл
		Если СтрокаТаблицы.ДатаПроведения > пДата Тогда
			пДата = СтрокаТаблицы.ДатаПроведения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат пДата;
	
КонецФункции

// Процедура проверяет Задачи.
//
Процедура ПроверитьНапоминанияПользователяПоВидуЗадачи(ВыбПользователь, ВидЗадачи, Организация, Предупреждать = Ложь, ТекстПредупреждения = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекПользователь"	, ВыбПользователь);
	Запрос.УстановитьПараметр("ДатаСреза"      	, ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЗадачи"      	, ВидЗадачи);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(
	|			&ТекПользователь,
	|			Выполнена = ЛОЖЬ
	|				И Оповещение = ИСТИНА
	|				И СрокОповещения <= &ДатаСреза) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
	|ГДЕ
	|	ЗадачаИсполнителяЗадачиПоИсполнителю.ВидЗадачи = &ВидЗадачи
	|	И ЗадачаИсполнителяЗадачиПоИсполнителю.Организация = &Организация
	|	И НЕ ЗадачаИсполнителяЗадачиПоИсполнителю.ПометкаУдаления";
		
	ФормаОповещения = глЗначениеПеременной("ФормаОповещенияОЗадачах");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если НЕ ФормаОповещенияЗадачОткрыта Тогда
			ФормаОповещения.Открыть();
			ФормаОповещенияЗадачОткрыта = Истина;
		КонецЕсли;
		
		ВыгрузкаДляСверки = РезультатЗапроса.Выгрузить();
		ФормаОповещения.АктивизироватьФорму(ВыгрузкаДляСверки);
		
	Иначе
		
		Если ФормаОповещения.Открыта() Тогда
			ФормаОповещения.Закрыть();
		КонецЕсли;
		
		Если Предупреждать Тогда
			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаОтчетОЗагрузкеНажатие(Элемент)

	ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ДокументыКИмпорту);

КонецПроцедуры

Процедура ПрочитатьДанныеИзФайла(ВыводитьСообщения = Истина) Экспорт

	ОчисткаТаблицыНеНайденныхКонтрагентов();
	ЗаполнитьДокументыНаИмпорт(ЭтаФорма.ДокументыКИмпорту, ЭлементыФормы.ДокументыКИмпорту, ВыводитьСообщения);
	
	Если ЭтаФорма.ДокументыКИмпорту.Количество() = 0 Тогда
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.Заголовок 	= "Список документов для загрузки пуст.";
	Иначе
		ЭлементыФормы.СтатуснаяСтрокаПриЗагрузке.Заголовок 	= "";
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельДокументыДляИмпорта.Кнопки.СоздатьКотрагентов.Доступность = (ТаблицаКонтрагентов.Строки.Количество() > 0);
	ЭлементыФормы.КоманднаяПанельДокументыДляИмпорта.Кнопки.Действия.Кнопки.СоздатьКотрагентов.Доступность = (ТаблицаКонтрагентов.Строки.Количество() > 0);
	
	ЭлементыФормы.ДокументыКИмпорту.Колонки.Загружать.ТекстПодвала 	= ЭтаФорма.ДокументыКИмпорту.Количество();
	ЭлементыФормы.ДокументыКИмпорту.Колонки.Поступило.ТекстПодвала  = Формат(ЭтаФорма.ДокументыКИмпорту.Итог("СуммаПоступило")	, "ЧЦ=12; ЧДЦ=2");
	ЭлементыФормы.ДокументыКИмпорту.Колонки.Списано.ТекстПодвала  	= Формат(ЭтаФорма.ДокументыКИмпорту.Итог("СуммаСписано")	, "ЧЦ=12; ЧДЦ=2");
	КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Неопределено);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ЗНАЧЕНИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура ЗаполнитьВидыДокументов()
	
	Макет = ПолучитьМакет("ВидыДокументов");
	ОбластьДокументов = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		  
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        =Истина;
		Стр.Документ       =ВидДокумента;
		Стр.Название       =Название;
		Стр.Корреспондент  =Корреспондент;
		Стр.ДокументКратко =Кратко;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПлатежныхОпераций()
	
	мПлатежныеОперации = Новый Соответствие;
	
	//мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику							, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога							, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП								, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет						, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств	, "Платежное поручение");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Процедура установки/снятия флажков
//
Процедура УстановитьФлажки(Флаг)
	
	мКоличество = 0;
	мСумма 		= 0;
	Для каждого СтрокаДокумента Из ЭтотОбъект.ПлатежныеДокументы Цикл
		Если ЭлементыФормы.ДокументыНаЭкспорт.ПроверитьСтроку(СтрокаДокумента) Тогда
			СтрокаДокумента.Выгружать = Флаг;
		КонецЕсли;
		
		Если СтрокаДокумента.Выгружать Тогда
			мКоличество = мКоличество 	+ 1;
			мСумма 		= мСумма 		+ СтрокаДокумента.СуммаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.ДокументыНаЭкспорт.Колонки.Выгружать.ТекстПодвала 		= мКоличество;
	ЭлементыФормы.ДокументыНаЭкспорт.Колонки.СуммаДокумента.ТекстПодвала  	= Формат(мСумма, "ЧДЦ=2");
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиПрограммыКлиентаБанка();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет"		, БанковскийСчет);
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";

	Выборка = Запрос.Выполнить().Выгрузить();
	   
	Если Выборка.Количество() > 0 Тогда
		Программа = Выборка[0].Программа;
		Кодировка = Выборка[0].Кодировка;
		ФайлВыгрузки = Выборка[0].ФайлВыгрузки;
		ФайлЗагрузки = Выборка[0].ФайлЗагрузки;
		Таб = Выборка[0].ВидыВыгружаемыхПлатДокументов.Получить();
		Если НЕ Таб = Неопределено Тогда
			Для каждого СтрокаДокумента из Таб Цикл
				НайденаяСтрока = ТаблицаДокументов.Найти(СтрокаДокумента.Документ,"Название");
				НайденаяСтрока.Пометка = СтрокаДокумента.Пометка; 
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли БылаПроверка Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Для выбранного счета не настроены параметры обмена данными." + Символы.ПС + "Настроить?", Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаНастройки = ПолучитьФорму("ФормаНастройкиЗаполнения");
			ФормаНастройки.ОткрытьМодально();
		Иначе
			Программа = "";
			Кодировка = "";
			ФайлВыгрузки = "";
			ФайлЗагрузки = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Очищает таблицу ненайденных контрагентов перед ее заполнением
//
Процедура ОчисткаТаблицыНеНайденныхКонтрагентов()
	
	ТаблицаКонтрагентов.Строки.Очистить();
	ТаблицаКонтрагентов.Колонки.Очистить();
	ТаблицаКонтрагентов.Колонки.Добавить("Представление");
	ТаблицаКонтрагентов.Колонки.Добавить("Значение");
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит");
	ТаблицаКонтрагентов.Колонки.Добавить("НомерСтроки");
	ТаблицаКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница.Заголовок = "  Выгрузка  " Тогда
		Если НЕ ЗначениеЗаполнено(БанковскийСчет)
				ИЛИ ЭтотОбъект.ПлатежныеДокументы.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;

		КоманднаяПанельДокументыНаЭкспортОбновить(Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаПроводкиДтКт(Кнопка)
	
	ТекДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТекДанные.Документ = Неопределено Тогда
		Предупреждение("Документ не загружен в информационную базу!");
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(ТекДанные.Документ);

КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаПроводкиДтКтНУ(Кнопка)
	
	ТекДанные = ЭлементыФормы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТекДанные.Документ = Неопределено Тогда
		Предупреждение("Документ не загружен в информационную базу!");
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ТекДанные.Документ, "НУ");

КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Кнопка)
	
	//+++АК LAGP 2018.09.19 ИП-00019641 Табличное поле с возможностью отбора.
	//Для каждого СтрокаДокумента Из ЭтаФорма.ДокументыКИмпорту Цикл
	//	СтрокаДокумента.Загружать = Истина;
	//КонецЦикла;
	
	Для каждого СтрокаДокумента Из ЭтаФорма.ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;
	
	ОтборСтрок = ЭлементыФормы.ДокументыКИмпорту.ОтборСтрок; 
	ПостроительЗапроса = Новый ПостроительЗапроса; 
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ЭтаФорма.ДокументыКИмпорту); 

	// Добавляются необходимые отборы, такие же как в отборы в табличной части. 
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл 
	    Если ЭлементОтбора.Использование Тогда 
	        НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя); 
	        НовыйОтбор.Использование = Истина; 
	        НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения; // нужный вид сравнения 
	        НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС; 
	        НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо; 
	        НовыйОтбор.Значение = ЭлементОтбора.Значение; 
	    КонецЕсли; 
	КонецЦикла; 

	Если ПостроительЗапроса.Отбор.Количество() = 0 Тогда
		Для каждого СтрокаДокумента Из ЭтаФорма.ДокументыКИмпорту Цикл
			СтрокаДокумента.Загружать = Истина;
		КонецЦикла;		
	Иначе		
		ПостроительЗапроса.Выполнить();

		Результат = ПостроительЗапроса.Результат.Выбрать(); // отобранные строки  
		
		Пока Результат.Следующий() Цикл
			ЭтаФорма.ДокументыКИмпорту[Результат.НомерСтроки-1].Загружать = Истина;	
		КонецЦикла;			
	КонецЕсли;
	//---АК LAGP
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаСнятьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента Из ЭтаФорма.ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;

КонецПроцедуры

Процедура ЭквайрингСводныйПриИзменении(Элемент)
	
	Для каждого СтрокаТаблицы Из ЭтаФорма.ДокументыКИмпорту Цикл
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг
				И ЭквайрингСводный Тогда
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно;
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно
				И НЕ ЭквайрингСводный Тогда
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг;
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга
				И ЭквайрингСводный Тогда
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно;
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно
				И НЕ ЭквайрингСводный Тогда
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаОтчетПоЭквайрингу(Кнопка)
	
	ПечатьОтчетаПоЭквайрингу(ЭтаФорма.ДокументыКИмпорту);
	
КонецПроцедуры

Процедура ОтчетПоЭквайрингуРасход(Кнопка)
	
	ПечатьОтчетаПоЭквайрингу(ЭтаФорма.ДокументыКИмпорту, Истина);
	
КонецПроцедуры

Процедура ИмпортРасшифровкиСбербанкНажатие(Элемент)
	
	Обработки.ИмпортРасшифровкиЭквайринга.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура НеПроведеноДокументовНажатие(Элемент)
	ПровестиНепроведенныеДокументы();
КонецПроцедуры

Процедура ПровестиНепроведенныеДокументы()
	
	Проведено = 0;
	НеПроведено = 0;	
	
	Для каждого Строка из ПлатежныеДокументы Цикл
		
		Если НЕ Строка.Документ.Проведен Тогда	
		
			Попытка	
				
				ДокументОбъект = Строка.Документ.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Проведен документ: " + Строка.Документ);
				Проведено = Проведено + 1;
				
			Исключение
				
				Сообщить("Ошибка при проведении документа: " + Строка.Документ);
				НеПроведено = НеПроведено + 1;
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Сообщить("Проведено : " + Проведено + ". Не проведено: " + НеПроведено);
	
	КоманднаяПанельДокументыНаЭкспортОбновить(Неопределено);
	
КонецПроцедуры	

Процедура КоманднаяПанельДокументыДляИмпортаОтчетПоКорпКартам(Кнопка)
	
	//Исх = ДокументыКИмпорту.Скопировать(); //+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	Исх = ДокументыКИмпорту.Выгрузить();	
	
	Исх.Очистить();
	Исх.колонки.добавить("НомСтр");
	Исх.колонки.добавить("ДокументНайден");
	Для Каждого Стр Из ДокументыКИмпорту Цикл
		Если Стр.ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт ИЛИ Стр.ВидОперации = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОткрытиеКорпоративнойКарты ИЛИ Стр.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			НС=Исх.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
			НС.НомСтр = Стр.НомерСтроки;
			НС.ДокументНайден = ЗначениеЗаполнено(Стр.Документ);
		КонецЕсли;	
	КонецЦикла;	
		
	
	Если Исх.Количество() = 0 Тогда
		Сообщить("Нет данных по картам в этом файле");
		Возврат;
	КонецЕсли;	
	
	Отчет = Отчеты.СопоставлениеВыпискиИДанныхВБазеПоКорпКартам.Создать();
	Отчет.Выписка.Загрузить(Исх);
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.Открыть();
	//ОткрытьЗначение(Отчет);
	
	//ФормаОтчета = ПолучитьФОрму("Отчет.СопоставлениеВыпискиИДанныхВБазеПоКорпКартам.Форма.ФормаОтчета");
	
	//Таб = ФормаОтчета.РеквизитФормыВЗначение("Выписка");
	//Таб.Загрузить(Исх);
	
	//ФормаОтчета.Открыть();
	//ФормаОтчета.
	//Отчет.Выписка.Загрузить(Исх);
	//Отчет.ПолучитьФорму("ФормаОтчета").Открыть();
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаСопоставитьСДокументамиБазы(Кнопка)
	
	//Исх = ДокументыКИмпорту.Скопировать(); //+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	Исх = ДокументыКИмпорту.Выгрузить();
	
	Исх.Очистить();
	Исх.колонки.добавить("НомСтр");
	Исх.колонки.добавить("ДокументНайден");
	Для Каждого Стр Из ДокументыКИмпорту Цикл
		//Если Стр.ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт ИЛИ Стр.ВидОперации = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОткрытиеКорпоративнойКарты ИЛИ Стр.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			НС=Исх.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
			НС.НомСтр = Стр.НомерСтроки;
			НС.ДокументНайден = ЗначениеЗаполнено(Стр.Документ);
		//КонецЕсли;	
	КонецЦикла;	
		
	
	Если Исх.Количество() = 0 Тогда
		Сообщить("Нет данных по картам в этом файле");
		Возврат;
	КонецЕсли;	
	
	ДатаВыписки = Исх[0].ДатаДок;
	
	Парам = Новый Структура();
	Парам.Вставить("Выписка",Исх);
	Парам.Вставить("КлючВарианта","Вариант1");
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаС",НачалоДня(ДатаВыписки));
	Отбор.Вставить("ДатаПо",КонецДня(ДатаВыписки));
	Отбор.Вставить("Организация",ЭтотОбъект.Организация);
	Отбор.Вставить("СчетОрганизации",ЭтотОбъект.БанковскийСчет);
	Парам.Вставить("Параметры",отбор);
	Парам.Вставить("СформироватьПриОткрытии",истина);
	ОткрытьФорму("Отчет.СопоставлениеВыпискиИДанныхВБазеПоКорпКартам.Форма.ФормаОтчета",Парам);
	

	
	//Исх = ДокументыКИмпорту.Скопировать();
	//
	//Исх.Очистить();
	//Исх.колонки.добавить("НомСтр");
	//Исх.колонки.добавить("ДокументНайден");
	//Для Каждого Стр Из ДокументыКИмпорту Цикл
	//	//Если Стр.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
	//		НС=Исх.Добавить();
	//		ЗаполнитьЗначенияСвойств(НС, Стр);
	//		НС.НомСтр = Стр.НомерСтроки;
	//		НС.ДокументНайден = ЗначениеЗаполнено(Стр.Документ);
	//	//КонецЕсли;	
	//КонецЦикла;	
	//	
	//
	//Если Исх.Количество() = 0 Тогда
	//	Сообщить("Нет данных по выписке");
	//	Возврат;
	//КонецЕсли;	
	//
	//
	////	//Получаем схему из макета
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОтчетПоДокументамВыписки");
	//
	//ДатаВыписки = Исх[0].ДатаДок;
	////ДатаВыписки = Дата(2017,5,18);
	//ЭлементПериод = СхемаКомпоновкиДанных.Параметры.ДатаС;
	//ЭлементПериод.Значение = НачалоДня(ДатаВыписки);
	//
	//ЭлементПериод = СхемаКомпоновкиДанных.Параметры.ДатаПо;
	//ЭлементПериод.Значение = КонецДня(ДатаВыписки);
	//
	//Элемент = СхемаКомпоновкиДанных.Параметры.Организация; 
	//Элемент.Значение = ЭтотОбъект.Организация;
	//
	//Элемент = СхемаКомпоновкиДанных.Параметры.СчетОрганизации;
	//Элемент.Значение = ЭтотОбъект.БанковскийСчет;
	//
	////Элемент = СхемаКомпоновкиДанных.Параметры.ВидОперации;
	////Элемент.Значение = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация;
	//
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	//КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//
	////Из схемы возьмем настройки по умолчанию
	//Настройки = КомпоновщикНастроек.Настройки;

	//ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	//
	////ЭлементПериод = ПараметрыДанных.Найти("ДатаС");
	////ЭлементПериод.Использование = Истина;
	////ЭлементПериод.Значение = НачалоДня(Исх[0].ДатаДок);
	////
	////ЭлементПериод = ПараметрыДанных.Найти("ДатаПо");
	////ЭлементПериод.Использование = Истина;
	////ЭлементПериод.Значение = КонецДня(Исх[0].ДатаДок);
	//
	////Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	////Формируем макет, с помощью компоновщика макета
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	////Передаем в макет компоновки схему, настройки и данные расшифровки
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	//										Настройки, ДанныеРасшифровки);

	//ВнешниеНаборыДанных=Новый Структура;

	//ВнешниеНаборыДанных.Вставить("ДанныеВнешние",Исх);										
	//										
	////Выполним компоновку с помощью процессора компоновки
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,
	//												   ДанныеРасшифровки);

	//ДокументРезультат = Новый ТабличныйДокумент;
	//
	////Выводим результат в табличный документ
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	//ДокументРезультат.Показать();
	////Отчет = Отчеты.СопоставлениеВыпискиИДанныхВБазеПоКорпКартам.Создать();
	////Отчет.Выписка.Загрузить(Исх);
	////ФормаОтчета = Отчет.ПолучитьФорму();
	////ФормаОтчета.Открыть();

КонецПроцедуры

//+++АК LAGP 2018.09.19 ИП-00019641 Табличное поле с возможностью отбора.
Процедура ДокументыКИмпортуПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОтборСтрок = ЭлементыФормы.ДокументыКИмпорту.ОтборСтрок; 
	ПостроительЗапроса = Новый ПостроительЗапроса; 
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ЭтаФорма.ДокументыКИмпорту); 

	// Добавляются необходимые отборы, такие же как в отборы в табличной части. 
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл 
	    Если ЭлементОтбора.Использование Тогда 
	        НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя); 
	        НовыйОтбор.Использование = Истина; 
	        НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения; // нужный вид сравнения 
	        НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС; 
	        НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо; 
	        НовыйОтбор.Значение = ЭлементОтбора.Значение; 
	    КонецЕсли; 
	КонецЦикла; 

	Если ПостроительЗапроса.Отбор.Количество() = 0 Тогда
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Загружать.ТекстПодвала 	= ЭтаФорма.ДокументыКИмпорту.Количество();
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Поступило.ТекстПодвала  = Формат(ЭтаФорма.ДокументыКИмпорту.Итог("СуммаПоступило")	, "ЧЦ=12; ЧДЦ=2");
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Списано.ТекстПодвала  	= Формат(ЭтаФорма.ДокументыКИмпорту.Итог("СуммаСписано")	, "ЧЦ=12; ЧДЦ=2");		
	Иначе		
		ПостроительЗапроса.Выполнить();

		Результат = ПостроительЗапроса.Результат.Выгрузить(); // отобранные строки  
		
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Загружать.ТекстПодвала 	= Результат.Количество();
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Поступило.ТекстПодвала  = Формат(Результат.Итог("СуммаПоступило")	, "ЧЦ=12; ЧДЦ=2");
		ЭлементыФормы.ДокументыКИмпорту.Колонки.Списано.ТекстПодвала  	= Формат(Результат.Итог("СуммаСписано")	, "ЧЦ=12; ЧДЦ=2");				
	КонецЕсли;	
	
КонецПроцедуры

// Подготовка формы к работе

БылаПроверка = Ложь;
ЗаполнитьВидыДокументов();
ЗаполнитьНаименованиеПлатежныхОпераций();
//СформироватьСтруктуруТаблицыИмпорта(ЭтаФорма.ДокументыКИмпорту, ЭлементыФормы.ДокументыКИмпорту);
