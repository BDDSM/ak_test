
Перем мПлатежныеОперации Экспорт;
Перем ЗагрВидыДокументов;
Перем ЗагрРасчетныеСчета;
Перем ОбязательныеВрегЗАГРУЗКИ;
Перем ВидыОпераций;
Перем ПустаяДата;
Перем СписокЖурналов;
Перем СтруктураРеквизитов;	// Реквизиты загружаемого документа
Перем мВалютаРегламентированногоУчета Экспорт;
Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике
Перем ЭтоНовыйДокумент;
Перем ОтражатьВБухгалтерскомУчете;
Перем ОтражатьВНалоговомУчете; 
       
// Структуры хранения настроечных данных при экспорте
Перем Экспорт_Выгружаемые;
Перем Экспорт_НеПустые;
Перем СтруктураЭкспорта;

// Структуры обработки текста при импорте
Перем Импорт_КоличествоСтрок;
Перем Импорт_ТекущаяСтрока;
Перем Импорт_ТекстДляРазбора;

// Структуры хранения данных при импорте
Перем Импорт_РасчетныеСчета Экспорт;
Перем Импорт_ВидыДокументов;
Перем Импорт_Заголовок;

// Структуры хранения настроечных данных при импорте
Перем Импорт_Загружаемые;
Перем Импорт_Распознаваемые;
Перем ТегиЗаголовка;
Перем ТегиРасчетногоСчета;
Перем Импорт_НеПустые;
Перем Импорт_ПризнакОбмена;

// Строки с группами реквизитов платежных документов через запятую
Перем РеквизитыПлДок_Основные;
Перем РеквизитыПлДок_ВидПлатежаОплаты;
Перем РеквизитыПлДок_Квитанция;
Перем РеквизитыПлДок_Списано;
Перем РеквизитыПлДок_Поступило;
Перем РеквизитыПлДок_Плательщик;
Перем РеквизитыПлДок_ПлательщикНПР;
Перем РеквизитыПлДок_ПлательщикНПРНеОбязательные;
Перем РеквизитыПлДок_Получатель;
Перем РеквизитыПлДок_ПолучательНПР;
Перем РеквизитыПлДок_ПолучательНПРНеОбязательные;
Перем РеквизитыПлДок_БюджетПлатеж;
Перем РеквизитыПлДок_Назначение;
Перем РеквизитыПлДок_НазначениеНеОбязательные;
Перем РеквизитыПлДок_Акредитив;
Перем РеквизитыПлДок_УсловияОпл;
Перем РеквизитыПлДок_Дополнительные;

Перем РеквизитыПлДокЭкс_Основные;
Перем РеквизитыПлДокЭкс_ВидПлатежаОплаты;
Перем РеквизитыПлДокЭкс_Плательщик;
Перем РеквизитыПлДокЭкс_ПлательщикНПР;
Перем РеквизитыПлДокЭкс_Получатель;
Перем РеквизитыПлДокЭкс_ПолучательНПР;
Перем РеквизитыПлДокЭкс_БюджетПлатеж;

Перем СводныйПриходЭквайринг;
Перем СводныйРасходЭквайринг;

Перем ТЗСводногоПрихода;
Перем ТЗСводногоРасхода;
Перем РеквизитыПлДок_ИдентификаторПлатежа;
Перем Импорт_МассивСтрок;
Перем КэшФизЛиц;
Перем КэшКорпКарт; //+++АК LAGP 2017.11.15 ИП-00017140 Создаем кэш корпоративных карт для дальнейшего поиска по номеру.

Перем КэшДокументовИнкассации;


Перем мТекущаяВалютаВзаиморасчетов;

Перем УжеНайденныеДокументы;

Перем Сбербанк;
Перем ДатаВыписки;

//+++АК POZM 2018.08.13 ИП-00018948 
Перем ВидНалоговНДФЛАренда;
Перем ВидНалоговНДФЛ;
//---АК POZM 

#Если Клиент Тогда

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос;
	ЗапросПоОрганизациям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

//Печать отчета о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета 			= "Отчет о выгруженных платежных документах";
	Шапка.Параметры.ИмяСуммыСписания 	= "На списание";
	Шапка.Параметры.ИмяСуммыПоступления = "На поступление";
	Шапка.Параметры.ОписаниеПериода		= "по счету " + БанковскийСчет.НомерСчета + " с " + Формат(НачПериода, "ДЛФ=D") + " по " +
											Формат(КонПериода, "ДЛФ=D");
	ПолеОтчета.Вывести(Шапка);
	
	Индекс 		= 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл

		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаИсточника.ВидДокумента = "Платежное поручение"
				ИЛИ СтрокаИсточника.ВидДокумента = "Заявление на аккредитив" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;				
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;				
			Строка.Параметры.СуммаСписание  = "";					
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;					
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ       = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс         = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки 	= Ложь;
	ПолеОтчета.ОтображатьЗаголовки 		= Ложь;
	ПолеОтчета.ОтображатьСетку 			= Ложь;
	ПолеОтчета.ТолькоПросмотр 			= Истина;
	
КонецПроцедуры	

Функция ПоискБанковскогоСчета(Номер, НазваниеСправочника)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|Где
	|	БанковскиеСчета.НомерСчета =&Номер
	|	И БанковскиеСчета.Владелец ССЫЛКА Справочник." + НазваниеСправочника;
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьБанкСчетКонтрагентаОрг(мНомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСчета"	, мНомерСчета);
	Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
	|	И ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).Организация = &Организация";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//Печать отчета о загруженных платежных документах.
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(Источник) Экспорт
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки  = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		
		Если ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		ИтогоСуммаП = 0;
		ИтогоСуммаР = 0;
		ИмеетсяСекцияРасчСчет = Истина;

		Шапка.Параметры.ИмяОтчета		= "Отчет о загруженных платежных документах";
		Шапка.Параметры.ОписаниеПериода	= "по счету " + СтрокаСчета.РасчСчет + " с " + СтрокаСчета.ДатаНачала + " по " + СтрокаСчета.ДатаКонца;
		ПолеОтчета.Вывести(Шапка);
		
		Отбор = Новый Структура;                    
		Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет, "Организации"));
		ОтборПоСчету = Источник.НайтиСтроки(Отбор);
		
		ДатаНачала 	= ПолучитьДатуИзСтроки(ДатаНачала	, СтрокаСчета.ДатаНачала);
		ДатаКонца 	= ПолучитьДатуИзСтроки(ДатаКонца	, СтрокаСчета.ДатаКонца);
		
		Для Каждого СтрокаИсточника Из Источник Цикл
			
			Если СтрокаИсточника.СуммаПоступило > 0 
					И СтрокаИсточника.Поступило >= ДатаНачала
					И СтрокаИсточника.Поступило <= ДатаКонца Тогда
				
				Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
				Строка.Параметры.Счет				= СтрокаИсточника.ПлательщикСчет;
				Строка.Параметры.СуммаПоступление	= СтрокаИсточника.СуммаПоступило;
				Строка.Параметры.СуммаСписание		= "";
				Строка.Параметры.Дата				= СтрокаИсточника.ДатаПоступило;
				ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
				
			ИначеЕсли СтрокаИсточника.СуммаСписано > 0 
					И СтрокаИсточника.Списано >= ДатаНачала
					И СтрокаИсточника.Списано <= ДатаКонца Тогда

				Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Получатель1), СтрокаИсточника.Получатель, СтрокаИсточника.Получатель1);
				Строка.Параметры.Счет 				= СтрокаИсточника.ПолучательСчет;
				Строка.Параметры.СуммаСписание   	= СтрокаИсточника.СуммаСписано;
				Строка.Параметры.СуммаПоступление	= "";
				Строка.Параметры.Дата				= СтрокаИсточника.ДатаСписано;
				ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Строка.Параметры.Номер 				= СтрокаИсточника.Номер;
			Строка.Параметры.НазначениеПлатежа 	= СтрокаИсточника.НазначениеПлатежа;
			Индекс = Индекс + 1;
			
			Док = СтрокаИсточника.Документ;
			Если ЗначениеЗаполнено(Док) Тогда
				Строка.Параметры.Документ       = Док;
				Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			Иначе
				Строка.Параметры.Документ       = "НЕ ЗАГРУЖЕН";
				Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			КонецЕсли;
			
			Строка.Параметры.Индекс         	= Индекс;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЦикла;
		
		Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
		Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
		
		ПолеОтчета.Вывести(Подвал);
		
		
		Остатки.Параметры.Текст1 = "Остаток на начало " + СтрокаСчета.ДатаНачала + ":";
		Остатки.Параметры.Текст2 = "Остаток на конец " + СтрокаСчета.ДатаКонца + ":";
		
		Если НЕ ПустаяСтрока(СтрокаСчета.НачальныйОстаток)
				И НЕ ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""),"-",""),",","")) Тогда
			Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
		Иначе
			Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаСчета.КонечныйОстаток)
				И НЕ ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""),"-",""),",","")) Тогда
			Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
		Иначе
			Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
		КонецЕсли;
		
		ПолеОтчета.Вывести(Остатки);
			
	КонецЦикла;
	
	Если НЕ ИмеетсяСекцияРасчСчет Тогда
		Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс = 0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			Шапка.Параметры.ИмяОтчета 		= "Отчет о загруженных платежных документах";
			Шапка.Параметры.ОписаниеПериода	= "по счету " + СтрокаСчета.РасчСчет + " с " + Импорт_Заголовок.ДатаНачала + " по " +
												Импорт_Заголовок.ДатаКонца;
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет, "Организации"));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1),СтрокаИсточника.Плательщик,СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет		= СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.СуммаПоступление	= СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание		= "";
					Строка.Параметры.Дата				= СтрокаИсточника.ДатаПоступило;
					ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет 		= СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.СуммаСписание   	= СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление	= "";
					Строка.Параметры.Дата				= СтрокаИсточника.ДатаСписано;
					ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер 				= СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа 	= СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ       = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
				Иначе
					Строка.Параметры.Документ       = "НЕ ЗАГРУЖЕН";
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Строка.Параметры.Индекс         	= Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + Импорт_Заголовок.ДатаНачала +":";
			Остатки.Параметры.Текст2 = "Остаток на конец " + Импорт_Заголовок.ДатаКонца +":";
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
	КонецЕсли;

	//
	ПолеОтчета.ОтображатьГруппировки 	= Ложь;
	ПолеОтчета.ОтображатьЗаголовки 		= Ложь;
	ПолеОтчета.ОтображатьСетку 			= Ложь;
	ПолеОтчета.ТолькоПросмотр 			= Истина;
	
	ПолеОтчета.Показать("Отчет о загруженных платежных документах.");

КонецПроцедуры	

Процедура ПечатьОтчетаПоЭквайрингу(ДокументыКИмпорту, ЭтоРасход = Ложь) Экспорт
	
	//Исх = ДокументыКИмпорту.Скопировать();  //+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	Исх = ДокументыКИмпорту.Выгрузить();
	Исх.колонки.добавить("НомСтр");
	Для каждого стр из исх Цикл
		Стр.НомСтр = Стр.НомерСтроки;
	КонецЦикла;	
	
	Отбор = Новый Структура("ВидОперации");
	Если ЭтоРасход Тогда
		Отбор.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно;
	Иначе	
		Отбор.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно;
	КонецЕсли;	
	ТЗ = Исх.Скопировать(Отбор);
	Если ТЗ.Количество() = 0 Тогда
		Сообщить("Нет данных по " + ?(ЭтоРасход, "отмене эквайринга", "эквайрингу") + " в этом файле");
		Возврат;
	КонецЕсли;	
	ТЗ.Сортировать("Терминал, ТорговаяТочка, СуммаПоступило, СуммаСписано");
	СтарТочка	= "";
	СтарТерм	= "";
	
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОтчетПоЭквайрингу");
	
	Обл = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(Обл);
	Обл 			= Макет.ПолучитьОбласть("Строка");
	ОблИт 			= Макет.ПолучитьОбласть("Итог");
	ОблИтогОбщий 	= Макет.ПолучитьОбласть("ИтогОбщий");
	ПромШапка 		= Макет.ПолучитьОбласть("ПромШапка");
	СтарТочка	= ТЗ[0].ТорговаяТочка;
	СтарТерм	= ТЗ[0].Терминал;
	Итого		= 0;
	ИтогоС		= 0;
	ОбщийИтог	= 0;
	ОбщийИтогС	= 0;
	//ПромШапка.Параметры.ТорговаяТочка=ТЗ[0].ТорговаяТочка;
	//ПромШапка.Параметры.Терминал=ТЗ[0].Терминал;
	//Таб.Вывести(ПромШапка);
	ТЗРез = Новый ТаблицаЗначений;
	ТЗРез.Колонки.Добавить("Дата");
	ТЗРез.Колонки.Добавить("Терминал");
	ТЗРез.Колонки.Добавить("ТорговаяТочка");
	ТЗРез.Колонки.Добавить("СуммаПоступило");
	ТЗРез.Колонки.Добавить("СуммаСписано");
	ТЗРез.Колонки.Добавить("НомСтр");
	ТЗРез.Колонки.Добавить("НазначениеПлатежа");
	ТЗРез.Колонки.Добавить("НазначениеПлатежа1");
	ТЗРез.Колонки.Добавить("НазначениеПлатежа2");
	ТЗРез.Колонки.Добавить("НазначениеПлатежа3");
	ТЗРез.Колонки.Добавить("НазначениеПлатежа4");
		
	//Таб.НачатьГруппуСтрок();
	Для каждого Стр из ТЗ Цикл
		
		Если СтарТочка <> Стр.ТорговаяТочка
			ИЛИ СтарТерм <> Стр.Терминал   Тогда
			
			ОблИт.Параметры.ТорговаяТочка	= СтарТочка;
			ОблИт.Параметры.Терминал		= СтарТерм;
			
			ОблИт.Параметры.Итого	= ТЗРез.Итог("СуммаПоступило");;
			ОблИт.Параметры.ИтогоС	= ТЗРез.Итог("СуммаСписано");;
			Таб.Вывести(ОблИт);
			
			Таб.НачатьГруппуСтрок();
			
			Для каждого стрРез Из ТЗРез Цикл
				ЗаполнитьЗначенияСвойств(Обл.Параметры, СтрРез);
				Таб.Вывести(Обл);
			КонецЦикла;	
			
			
			Таб.ЗакончитьГруппуСтрок();
			
			//ПромШапка.Параметры.ТорговаяТочка=Стр.ТорговаяТочка;
			//ПромШапка.Параметры.Терминал=Стр.Терминал;
			//
			//Таб.Вывести(ПромШапка);
			
			СтарТочка=Стр.ТорговаяТочка;
			СтарТерм=Стр.Терминал;
			//Итого=0;
			//ИтогоС=0;
			//Таб.НачатьГруппуСтрок();
			ТЗРез.Очистить();
		КонецЕсли;	
		
		НС = ТЗРез.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
			
		ОбщийИтог	= ОбщийИтог		+ Стр.СуммаПоступило;
		ОбщийИтогС	= ОбщийИтогС	+ Стр.СуммаСписано;
		
	КонецЦикла;
	
	Таб.НачатьГруппуСтрок();
			
	ОблИт.Параметры.ТорговаяТочка	= СтарТочка;
	ОблИт.Параметры.Терминал		= СтарТерм;
	
	ОблИт.Параметры.Итого	= ТЗРез.Итог("СуммаПоступило");;
	ОблИт.Параметры.ИтогоС	= ТЗРез.Итог("СуммаСписано");;
	Таб.Вывести(ОблИт);
	
	Для каждого стрРез Из ТЗРез Цикл
		ЗаполнитьЗначенияСвойств(Обл.Параметры, СтрРез);
		Таб.Вывести(Обл);
	КонецЦикла;	
	
	Таб.ЗакончитьГруппуСтрок();
	
	//ПромШапка.Параметры.ТорговаяТочка=Стр.ТорговаяТочка;
	//ПромШапка.Параметры.Терминал=Стр.Терминал;
	//
	//Таб.Вывести(ПромШапка);
	
	СтарТочка	= Стр.ТорговаяТочка;
	СтарТерм	= Стр.Терминал;
	//Итого=0;
	//ИтогоС=0;
	//Таб.НачатьГруппуСтрок();
	ТЗРез.Очистить();


	ОблИтогОбщий.Параметры.Итого	= ОбщийИтог;
	ОблИтогОбщий.Параметры.ИтогоС	= ОбщийИтогС;
	Таб.Вывести(ОблИтогОбщий);
	
	Таб.Показать();
	
КонецПроцедуры	

//вызываем форму для просмотра тех, кого не нашли
Процедура ПросмотрКонтрагентов(ТипПросмотра) Экспорт	
	
	ФормаКонтрагентов = ПолучитьФорму("ФормаКонтрагентов");
	
	Если (ТипПросмотра = 0)
			И ФормаКонтрагентов.Открыта() Тогда
		ФормаКонтрагентов.Закрыть();
	ИначеЕсли (ТипПросмотра > 0)
			И ФормаКонтрагентов.Открыта() Тогда
		ФормаКонтрагентов.Обновить();
	ИначеЕсли (ТипПросмотра > 0)
			И НЕ ФормаКонтрагентов.Открыта() Тогда
		ФормаКонтрагентов.Открыть();
	ИначеЕсли (ТипПросмотра = 0)
			И НЕ ФормаКонтрагентов.Открыта() Тогда
		Сообщить("Все контрагенты существуют в справочнике.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ОткрыватьФорму = Истина) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ
	
	СообщатьОСозданномКонтрагенте 	 = ложь;
	СообщатьОСозданномБанковскомСчете= ложь;
	СообщатьОСозданномДоговоре		 = ложь;
	//эти элементы есть у всех справочников
	Если НЕ ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйЭлемент.Наименование 		= СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное	= НовыйЭлемент.Наименование;
		НовыйЭлемент.Родитель 			= ГруппаДляНовыхКонтрагентов;
		НовыйЭлемент.ИНН 				= СтрокаКонтрагент.Строки[1].Значение;
		НовыйЭлемент.КПП 				= СтрокаКонтрагент.Строки[2].Значение;
		НовыйЭлемент.ЮрФизЛицо 			= Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		//НовыйЭлемент.Покупатель = Истина;
		//НовыйЭлемент.Поставщик = Истина;
		
		НовыйЭлемент.Записать();
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.Ссылка;
		НовыйЭлемент.Записать();
		
		СообщатьОСозданномКонтрагенте = Истина;
	Иначе
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		Сообщить("Контрагент(" + СтрокаКонтрагент.Представление + ") создан.");
		ПредставлениеКонтрагента = "" + Символы.Таб + "- ";
	Иначе
		ПредставлениеКонтрагента = "Контрагенту(" + СтрокаКонтрагент.Представление + ")";
	КонецЕсли;

	Для каждого Строка Из СтрокаКонтрагент.Строки Цикл
			
		СообщатьОСозданномБанковскомСчете	= Ложь;
		СообщатьОСозданномДоговоре		 	= Ложь;
		
		Если Строка.Представление = "Р/счет"
				И Строка.Пометка Тогда
			Попытка
				НомерСчета = Строка.Значение;
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НовыйСчет.НомерСчета      = НомерСчета;
				НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета        = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
				
				РССчет = Строка.Строки;
				Если РССчет.Найти("РЦ банка", "Представление", Истина) <> Неопределено Тогда
					
					//Банк контрагента
					Если НЕ ПустаяСтрока(РССчет[0].Значение) Тогда
						НовыйБанк = НайтиБанкПоБикИКоррСчету("", РССчет[2].Значение);
						Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанк = Справочники.Банки.СоздатьЭлемент();
							НовыйБанк.Наименование = РССчет[0].Значение;
							НовыйБанк.Город        = РССчет[1].Значение;
							НовыйБанк.КоррСчет     = РССчет[2].Значение;
							НовыйБанк.Записать();
						КонецЕсли;
						НовыйСчет.Банк            = НовыйБанк.Ссылка;
					КонецЕсли;
					
					//РЦ банка контрагента
					Если НЕ ПустаяСтрока(РССчет[3].Значение) Тогда
						НовыйБанкКорр = НайтиБанкПоБикИКоррСчету(РССчет[5].Значение, РССчет[6].Значение);
						Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
							НовыйБанкКорр.Наименование = РССчет[3].Значение;
							НовыйБанкКорр.Город        = РССчет[4].Значение;
							НовыйБанкКорр.Код          = РССчет[5].Значение;
							НовыйБанкКорр.КоррСчет     = РССчет[6].Значение;
							НовыйБанкКорр.Записать();
						КонецЕсли;
						НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
					КонецЕсли;
					
				Иначе
					
					//Банк контрагента
					НовыйБанк = НайтиБанкПоБикИКоррСчету(РССчет[2].Значение, РССчет[3].Значение);
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						НовыйБанк.Наименование = РССчет[0].Значение;
						НовыйБанк.Город        = РССчет[1].Значение;
						НовыйБанк.Код          = РССчет[2].Значение;
						НовыйБанк.КоррСчет     = РССчет[3].Значение;
						НовыйБанк.Записать();
					КонецЕсли;
					НовыйСчет.Банк = НовыйБанк.Ссылка;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
					НовыйСчет.Наименование = "Основной расчетный счет";
					НовыйСчет.Записать();
					НовыйЭлемент.ОсновнойБанковскийСчет = НовыйСчет.Ссылка;
				Иначе
					НовыйСчет.Наименование = Лев("" + НовыйБанк + ", (Расчетный)", 100);
					НовыйСчет.Записать();
				КонецЕсли;
				
				СообщатьОСозданномБанковскомСчете = истина;
			Исключение
				Сообщить("Не удалось создать банковский счет контрагента!");
			КонецПопытки;
		КонецЕсли;
			
		Если Строка.Представление = "Договор"
				И Строка.Пометка Тогда
			Попытка
				НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				НайденныйДоговорОбъект.ВалютаВзаиморасчетов  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
					НайденныйДоговорОбъект.Организация  = Организация;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Владелец    = НовыйЭлемент.Ссылка;
				Вид =  Строка.Значение;
				Если Вид = "С покупателем" Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				ИначеЕсли Вид = "С поставщиком" Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;		
				Иначе
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;		
				КонецЕсли;
				НайденныйДоговорОбъект.Наименование	= "Основной договор " + НРег(Вид);
				НайденныйДоговорОбъект.Записать();
				НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
				
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
					НовыйЭлемент.ОсновнойДоговорКонтрагента =НайденныйДоговор;
				КонецЕсли;
				
				СообщатьОСозданномДоговоре = Истина;
			Исключение
				Сообщить("Не удалось создать договор контрагента!");
			КонецПопытки;
		КонецЕсли;
		
		Если СообщатьОСозданномБанковскомСчете Тогда
			Сообщить(ПредставлениеКонтрагента + " добавлен банковский счет (" + НомерСчета + ").");
		КонецЕсли;
		Если СообщатьОСозданномДоговоре Тогда
			Сообщить(ПредставлениеКонтрагента + " добавлен договор(" + Вид + ").");
		КонецЕсли;

	КонецЦикла;
	
	НовыйЭлемент.Записать();
		
	Если ОткрыватьФорму Тогда
		ОткрытьЗначение(НовыйЭлемент);
	КонецЕсли;
	
	Контрагент = НовыйЭлемент.Ссылка;
	
	Возврат Контрагент;

КонецФункции

// Ищет банк по БИКу или КоррСчету
//
Функция НайтиБанкПоБикИКоррСчету(БИК, КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.Банки.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;

	Возврат НайденныйБанк;

КонецФункции

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента)
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	УстановитьСвойство(СтрокаПлатеж, "СуммаВзаиморасчетов",
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
																ОбъектДокумента.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов));
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, мТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента)
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаКурса);

	УстановитьСвойство(СтрокаПлатеж , "КурсВзаиморасчетов"		, СтруктураКурсаВзаиморасчетов.Курс);
	УстановитьСвойство(СтрокаПлатеж , "КратностьВзаиморасчетов"	, СтруктураКурсаВзаиморасчетов.Кратность);

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента)
	
	ДатаЗаполнения = ОбъектДокумента.Дата;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, мТекущаяВалютаВзаиморасчетов, ДатаЗаполнения, ОбъектДокумента);
	
	Если СтрокаРасшифровки.КурсВзаиморасчетов = 0 Тогда
		УстановитьСвойство(СтрокаРасшифровки , "КурсВзаиморасчетов"	, 1);
		УстановитьСвойство(СтрокаРасшифровки , "СуммаВзаиморасчетов", СтрокаРасшифровки.СуммаПлатежа);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)

	Номер = СокрЛП(НомерДокумента);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксОрганизации);

	// удаление префикса из номера документа
	Если Найти(Номер, ПрефиксОрганизации) = 1 Тогда 
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации) + 1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл)
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить("Файла " + Файл + " не существует!");
		Возврат Неопределено;
	КонецЕсли;
	
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;
	
	
	Импорт_МассивСтрок = Новый Массив;
	
	Попытка
		ПотокЧтения = Новый ЧтениеТекста(Файл, Кодир,,, Ложь);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		Возврат Неопределено;
	КонецПопытки;
	
	ПроверитьКодировку = Истина;
	ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		Импорт_МассивСтрок.Добавить(СокрЛП(ТекущаяСтрока));
		ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
		Если ПроверитьКодировку
				И НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			ПроверитьКодировку = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Импорт_МассивСтрок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Импорт_МассивСтрок[0] <> "1CClientBankExchange" Тогда
		Импорт_МассивСтрок.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Импорт_МассивСтрок;

КонецФункции

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(СтрокаДокумента, Документ = Неопределено) Экспорт

	НайденКонтрагент 	= НЕ ТипЗнч(СтрокаДокумента.Контрагент) 		= Тип("Строка");
	НайденСчет 			= НЕ ТипЗнч(СтрокаДокумента.СчетКонтрагента) 	= Тип("Строка");
	НайденДоговор 		= НЕ ТипЗнч(СтрокаДокумента.Договор) 			= Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	НайденнаяЗаписьОКонтрагенте = ЭтотОбъект.ТаблицаКонтрагентов.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "ИНН"], "Значение", Истина);

	//Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ЭтотОбъект.ТаблицаКонтрагентов.Строки.Добавить();
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НовыйКонтрагент.Представление 	= СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомерСтроки 	= СтрокаДокумента.НомерСтроки;
	
		ДобавитьОписаниеНовогоРеквизита("Наименование"	,Окончание	,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"			,"ИНН"		,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"			,"КПП"		,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит 	= СтрокаДокумента.Контрагент;
		КонецЕсли;

	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
	
	КонецЕсли;
	
	//СчетКонтрагента
	Если НЕ НайденСчет
			И НовыйКонтрагент.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "СЧЕТ"], "Значение", Истина) = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		Если ПрямыеРасчеты Тогда
			ДобавитьОписаниеНовогоРеквизита("Банк"					,"БАНК1"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка"			,"БАНК2"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка"				,"БИК"		,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка"		,"КОРСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
		Иначе
			ДобавитьОписаниеНовогоРеквизита("Банк"						,"3"		,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка"				,"4"		,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка"			,"РАСЧСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка"					,"БАНК1"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка"	,"БАНК2"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка"				,"БИК"		,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка"		,"КОРСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента, СтрокаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	//ВидДоговора
	//Если Не НайденДоговор Тогда
	//	ВидыДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(СтрокаДокумента.ВидОперации);
	//	Если ВидыДоговоров.Количество()>0 Тогда
	//		ВидДоговора = Строка(ВидыДоговоров[0]);
	//	КонецЕсли;
	//КонецЕсли;

	////Договор
	//Если Не НайденДоговор и НовыйКонтрагент.Строки.Найти(ВидДоговора, "Значение", истина) = неопределено Тогда
	//	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
	//	РеквизитыНовогоКонтрагента.Представление= "Договор";
	//	РеквизитыНовогоКонтрагента.Значение = ВидДоговора;
	//			
	//	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
	//	РеквизитыДоговора.Представление = "Наименование";
	//	РеквизитыДоговора.Значение = "Основной договор "+НРег(ВидДоговора);
	//	
	//	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
	//	РеквизитыДоговора.Представление = "Вид";
	//	РеквизитыДоговора.Значение = ВидДоговора;
	//	
	//	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
	//	РеквизитыДоговора.Представление = "Ведение взаиморасчетов";
	//	РеквизитыДоговора.Значение = "По договору в целом";
	//КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
	РеквизитыНовогоКонтрагента.Представление	= Представление;
	РеквизитыНовогоКонтрагента.Значение 		= СтрокаДокумента[ТипКонтрагента+Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит 		= ТипКонтрагента+Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

Процедура ОбновитьСтруктуруТабличногоПоля(ТабПоле, СоответствиеИзменятьРазмер = Неопределено) Экспорт
	
	ТабПоле.СоздатьКолонки();
	
	Если ТипЗнч(СоответствиеИзменятьРазмер) = Тип("Соответствие") Тогда
		Для каждого КолонкаТабПоля Из ТабПоле.Колонки Цикл
			Если СоответствиеИзменятьРазмер[КолонкаТабПоля.Имя] = Ложь Тогда
				КолонкаТабПоля.ИзменениеРазмера = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


/////// НОВОЕ /////////////////////////////////////////////////////////////

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьНастройкуЗаполнения(ИмяДокумента, ИмяПараметра)
	
	Возврат НастройкаЗаполнения.Найти(ИмяДокумента, "Документ")[ИмяПараметра] 
	
КонецФункции
/////////////// Формирование управляющих данных ///////////////////////////

Процедура ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта()
	
	РеквизитыПлДок_Основные 		= "Номер,Дата,Сумма";
	РеквизитыПлДок_ВидПлатежаОплаты = "ВидПлатежа,ВидОплаты";
	
	РеквизитыПлДок_Квитанция 		= "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание";
	
	РеквизитыПлДок_Списано 			= "ДатаСписано";
	РеквизитыПлДок_Поступило 		= "ДатаПоступило";
	
	РеквизитыПлДок_Плательщик 		= "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1";
	РеквизитыПлДок_ПлательщикНПР 	= "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет";
	РеквизитыПлДок_ПлательщикНПРНеОбязательные = "Плательщик2,Плательщик3,Плательщик4";
	
	РеквизитыПлДок_Получатель 		= "ПолучательСчет,Получатель,ПолучательИНН,Получатель1";
	РеквизитыПлДок_ПолучательНПР 	= "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет";
	РеквизитыПлДок_ПолучательНПРНеОбязательные = "Получатель2,Получатель3,Получатель4";
	
	РеквизитыПлДок_БюджетПлатеж 			= "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	РеквизитыПлДок_ИдентификаторПлатежа 	= "Код";
	РеквизитыПлДок_Назначение 				= "НазначениеПлатежа";
	РеквизитыПлДок_НазначениеНеОбязательные = "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6";
	
	РеквизитыПлДок_Акредитив 		= "СрокПлатежа,Очередность";
	
	РеквизитыПлДок_УсловияОпл 		= "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3";
	
	РеквизитыПлДок_Дополнительные 	= "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок";
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура СформироватьСоответствиеВыгружаемых()
	
	Экспорт_Выгружаемые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_ПлательщикНПРНеОбязательные + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_ПолучательНПРНеОбязательные + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_ИдентификаторПлатежа + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НазначениеНеОбязательные + "," +
	РеквизитыПлДок_Акредитив + "," +
	РеквизитыПлДок_УсловияОпл + "," +
	РеквизитыПлДок_Дополнительные);
	
КонецПроцедуры

Процедура СформироватьСоответствияНеПустыхПриИмпорте()
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// по наличию статуса составителя определяется что платеж - налоговый
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН," +
	"СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования," +
	"ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Процедура СформироватьТегиЗаголовка()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьТегиРасчетногоСчета()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьСоответствиеЗагружаемых()
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(РеквизитыПлДок_Основные + ","
	 + РеквизитыПлДок_ВидПлатежаОплаты + ","
	 + РеквизитыПлДок_Квитанция + ","
	 + РеквизитыПлДок_Списано + ","
	 + РеквизитыПлДок_Поступило + ","
	 + РеквизитыПлДок_Плательщик + ","
	 + РеквизитыПлДок_ПлательщикНПР + ","
	 + РеквизитыПлДок_ПлательщикНПРНеОбязательные + ","
	 + РеквизитыПлДок_Получатель + ","
	 + РеквизитыПлДок_ПолучательНПР + ","
	 + РеквизитыПлДок_ПолучательНПРНеОбязательные + ","
	 + РеквизитыПлДок_БюджетПлатеж + ","
	 + РеквизитыПлДок_ИдентификаторПлатежа + ","
	 + РеквизитыПлДок_Назначение + ","
	 + РеквизитыПлДок_НазначениеНеОбязательные + ","
	 + РеквизитыПлДок_Акредитив + ","
	 + РеквизитыПлДок_УсловияОпл + ","
	 + РеквизитыПлДок_Дополнительные));
	
КонецПроцедуры

Процедура ЗаполнитьРаспознаваемыеПриИмпорте()
	
	Импорт_Распознаваемые = Новый Массив;
	
	// определяютопреацию при для входящих документов
	Импорт_Распознаваемые.Добавить("Списано");
	Импорт_Распознаваемые.Добавить("Поступило");
	
	// Контрагент
	Импорт_Распознаваемые.Добавить("Контрагент");
	Импорт_Распознаваемые.Добавить("СчетКонтрагента");
	
	// Сумма
	Импорт_Распознаваемые.Добавить("СуммаДокумента");
	
	// Наконец, сам документ
	Импорт_Распознаваемые.Добавить("Документ");
	
	// Необязательные реквизиты, практически никогда нет
	Импорт_Распознаваемые.Добавить("ПоказательДатыДок");
	Импорт_Распознаваемые.Добавить("СрокПлатежаДок");
	Импорт_Распознаваемые.Добавить("СрокАкцептаДок");
	Импорт_Распознаваемые.Добавить("ДатаОтсылки");

КОнецПроцедуры


///////////////// Начальное формирование таблицы и поля ////////////////////

Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик)
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;
	
	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
		
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта()

	СтруктураЭкспорта = новый структура;
	
	СтруктураЭкспорта.Вставить( "Выгружать",             "");  //     "_",                         
	СтруктураЭкспорта.Вставить( "Готовность",            "");  //     "Готовность",                 
	
	СтруктураЭкспорта.Вставить( "НомерДок",              "");  //     "№ Документа",                
	СтруктураЭкспорта.Вставить( "Номер",                 "");  //    "Номер",                     
	СтруктураЭкспорта.Вставить( "Дата",                  "");  //      "Дата",                      
	СтруктураЭкспорта.Вставить( "Операция",              "");  //     "Операция",                  
	СтруктураЭкспорта.Вставить( "СчетОрганизации",       "");  //   "Эл. Р/с организации",        
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", "");  //    "Р/с организации",          
	СтруктураЭкспорта.Вставить( "Сумма",                 "");  //   "Сумма",                     
	
	СтруктураЭкспорта.Вставить( "Контрагент",            "");  //    "Контрагент",                
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       "");  //  "Р/с контрагента",           
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", "");  //     "Эл. Р/с контрагента",            
	
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         "");  //       "Дата форм. квитанции",       
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        "");  //     "Время форм. квитанции",      
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   "");  //     "Содержание квитанции",       
	
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        "");  //   "Расчетный счет плательщика", 
	СтруктураЭкспорта.Вставить( "Плательщик",            "");  //     "Плательщик",                 
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         "");  //   "ИНН плательщика",            
	СтруктураЭкспорта.Вставить( "Плательщик1",           "");  //     "Наименование плательщика",  
	СтруктураЭкспорта.Вставить( "Плательщик2",           "");  //   "Расчетный счет плательщика", 
	СтруктураЭкспорта.Вставить( "Плательщик3",           "");  //     "Банк плательщика",          
	СтруктураЭкспорта.Вставить( "Плательщик4",           "");  //     "Город банка плательщика",   
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    "");  //   "Корсчет банка плательщика",  
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       "");  //     "РЦ банка плательщика",       
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       "");  //     "Город РЦ банка плательщика", 
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         "");  //    "БИК РЦ банка плательщика",  
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     "");  //   "Корсчет РЦ банка плат.",     
	
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        "");  //   "Расчетный счет получателя",  
	СтруктураЭкспорта.Вставить( "Получатель",            "");  //     "Получатель",                 
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         "");  //   "ИНН получателя",             
	СтруктураЭкспорта.Вставить( "Получатель1",           "");  //     "Наименование получателя",    
	СтруктураЭкспорта.Вставить( "Получатель2",           "");  //   "Расчетный счет получателя",  
	СтруктураЭкспорта.Вставить( "Получатель3",           "");  //     "Банк получателя",            
	СтруктураЭкспорта.Вставить( "Получатель4",           "");  //     "Город банка получателя",     
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    "");  //   "Корсчет банка получателя",   
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       "");  //     "РЦ банка получателя",        
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       "");  //     "Город РЦ банка получателя",  
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         "");  //    "БИК РЦ банка получателя",   
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     "");  //   "Корсчет РЦ банка пол.",      
	
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            "");  //     "Вид платежа",                
	СтруктураЭкспорта.Вставить( "ВидОплаты",             "");  //   "Вид оплаты",                 
	СтруктураЭкспорта.Вставить( "ПеречислениеВБюджет",   "");  //   "Перечисление в бюджет",                 
	СтруктураЭкспорта.Вставить( "ВидПеречисленияВБюджет","");  //   "Вид перечисления в бюджет",                 
	
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     "");  //   "Статус составителя",         
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         "");  //   "КПП плательщика",            
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         "");  //   "КПП получателя",             
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         "");  //   "Показатель КБК",             
	СтруктураЭкспорта.Вставить( "ОКАТО",                 "");  //   "ОКАТО",                      
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   "");  //   "Пок. основания",             
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     "");  //   "Пок. нал. периода",          
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      "");  //     "Пок. номера док.",           
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        "");  //     "Пок. даты док.",             
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        "");  //   "Пок. типа платежа",          
	
	СтруктураЭкспорта.Вставить( "СрокПлатежа",           "");  //       "Срок действия аккредитива",  
	СтруктураЭкспорта.Вставить( "Очередность",           "");  //   "Очередность платежа",        
	
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     "");  //     "Назначение платежа",         
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    "");  //     "Назначение платежа, стр. 1", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    "");  //     "Назначение платежа, стр. 2", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    "");  //     "Назначение платежа, стр. 3", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    "");  //     "Назначение платежа, стр. 4", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    "");  //     "Назначение платежа, стр. 5", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    "");  //     "Назначение платежа, стр. 6", 
	
	СтруктураЭкспорта.Вставить( "СрокАкцепта",           "");  //    "Срок акцепта",               
	СтруктураЭкспорта.Вставить( "ВидАккредитива",        "");  //     "Вид аккредитива",            
	СтруктураЭкспорта.Вставить( "УсловиеОплаты1",        "");  //     "Условие оплаты, стр. 1",     
	СтруктураЭкспорта.Вставить( "УсловиеОплаты2",        "");  //     "Условие оплаты, стр. 2",     
	СтруктураЭкспорта.Вставить( "УсловиеОплаты3",        "");  //     "Условие оплаты, стр. 3",     
	СтруктураЭкспорта.Вставить( "ПлатежПоПредст",        "");  //     "Платеж по представлению",    
	СтруктураЭкспорта.Вставить( "ДополнУсловия",         "");  //     "Дополнительные условия",     
	СтруктураЭкспорта.Вставить( "НомерСчетаПоставщика",  "");  //     "№ счета поставщика",         
	СтруктураЭкспорта.Вставить( "ДатаОтсылкиДок",        "");  //       "Дата отсылки документов",    
	
	СтруктураЭкспорта.Вставить( "Документ",              "");  //   "Источник",                  
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        "");  //     "Выгрузка",                   
	
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        "");  //     "Замечания",                  
	СтруктураЭкспорта.Вставить( "ТипДокумента",          "");  //    "Тип пл. документа",    
	
	СтруктураЭкспорта.Вставить("Код", "");
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура СформироватьСтруктуруТаблицыИмпорта(Таб, ТабПоле) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку, ИзменятьПозицию, Видимость, Доступность, ТолькоПросмотр, ИзменениеРазмера, Ширина";
	
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	Видимая020   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,    2);
	Видимая080   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   10);
	Видимая120   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   15);
	Видимая160   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   20);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.РасходИзБанка, ДокументСсылка.ПоступлениеВБанк, ДокументСсылка.СписаниеСКорпоративныхКарт");
	
	Т_ПлОрдер   	= Новый ОписаниеТипов("ДокументСсылка.РасходИзБанка");
	Т_Контрагент 	= Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица,СправочникСсылка.Организации, Строка");
	Т_БанкСчет   	= Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка");
	Т_ВидыОпераций  = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийППИсходящее, ПеречислениеСсылка.ВидыОперацийПоступлениеБезналичныхДенежныхСредств, ПеречислениеСсылка.ВидыОперацийСКорпоративнымиКартами, Строка");
	Т_Договоры   	= Новый ОписаниеТипов("Строка");
	Т_СтатьяДДС   	= Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	
	//sstuman
	Т_Договоры   	= Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	Т_Терминалы   	= Новый ОписаниеТипов("СправочникСсылка.Терминалы");
	Т_ТорговыеТочки = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	//sstuman
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	//Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Проведен"				, Т_Булево		, ""						, Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Загружать"			, Т_Булево		, "_"						, Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность"			, Т_Число1		, "Готовность"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСтроки"			, Т_Число10		, "Номер строки"			, Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок"				, Т_Строка		, "№ Документа"				, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Номер"				, Т_Строка		, "Номер"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДок"				, Т_Дата		, "Дата"					, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Дата"					, Т_Строка		, "Дата (из файла)"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция"				, Т_Строка		, "Операция"				, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации"		, Т_БанкСчет	, "Р/с организации"			, Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента"		, Т_Число15_2	, "Сумма"					, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаСписано"			, Т_Число15_2	, "Сумма списания"			, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаПоступило"		, Т_Число15_2	, "Сумма поступления"		, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма"				, Т_Строка		, "Сумма (из файла)"		, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент"			, Т_Контрагент	, "Контрагент"				, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента"		, Т_БанкСчет	,  "Р/с контрагента"		, Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияДата"		, Т_Строка		, "Дата форм. квитанции"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияВремя"		, Т_Строка		, "Время форм. квитанции"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияСодержание"	, Т_Строка		, "Содержание квитанции"	, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Списано"				, Т_Дата		, "Списано"					, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаСписано"			, Т_Строка		, "Списано"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Поступило"			, Т_Дата		, "Поступило"				, Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПоступило"		, Т_Строка		, "Поступило"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПроведения"		, Т_Дата		, "Дата"					, Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикСчет"		, Т_Строка20, "Расчетный счет плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик"			, Т_Строка	, "Плательщик"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИНН"		, Т_Строка12, "ИНН плательщика"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик1"			, Т_Строка	, "Наименование плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик2"			, Т_Строка20, "Расчетный счет плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик3"			, Т_Строка	, "Банк плательщика"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик4"			, Т_Строка	, "Город банка плательщика"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРасчСчет"	, Т_Строка20, "Корсчет банка плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк1"		, Т_Строка	, "РЦ банка плательщика"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк2"		, Т_Строка	, "Город РЦ банка плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИК"		, Т_Строка09, "БИК РЦ банка плательщика"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКорсчет"	, Т_Строка20, "Корсчет РЦ банка плат."		, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательСчет"		, Т_Строка20, "Расчетный счет получателя"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель"			, Т_Строка	, "Получатель"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИНН"		, Т_Строка12, "ИНН получателя"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель1"			, Т_Строка	, "Наименование получателя"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель2"			, Т_Строка20, "Расчетный счет получателя"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель3"			, Т_Строка	, "Банк получателя"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель4"			, Т_Строка	, "Город банка получателя"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРасчСчет"	, Т_Строка20, "Корсчет банка получателя"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк1"		, Т_Строка	, "РЦ банка получателя"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк2"		, Т_Строка	, "Город РЦ банка получателя"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИК"		, Т_Строка09, "БИК РЦ банка получателя"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКорсчет"	, Т_Строка20, "Корсчет РЦ банка пол."		, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидПлатежа"			, Т_Строка		, "Вид платежа"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОплаты"			, Т_Строка02	, "Вид оплаты"				, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусСоставителя"	, Т_Строка02	, "Статус составителя"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКПП"		, Т_Строка09	, "КПП плательщика"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКПП"		, Т_Строка09	, "КПП получателя"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательКБК"		, Т_Строка20	, "Показатель КБК"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОКАТО"				, Т_Строка11	, "ОКАТО"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательОснования"	, Т_Строка02	, "Пок. основания"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательПериода"	, Т_Строка10	, "Пок. нал. периода"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательНомера"		, Т_Строка		, "Пок. номера док."		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДатыДок"	, Т_Дата		, "Пок. даты док."			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДаты"		, Т_Строка		, "Пок. даты"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательТипа"		, Т_Строка02	, "Пок. типа платежа"		, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Код"					, Т_Строка		, "Уник. идентиф. платежа"	, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежаДок"		, Т_Дата	, "Срок действия акк."			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежа"			, Т_Строка	, "Срок действия аккредитива"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Очередность"			, Т_Строка02, "Очередность (из файла)"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОчередностьПлатежа"	, Т_Число1	, "Очередность"					, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа"	, Т_Строка	, "Назначение платежа"			, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа1"	, Т_Строка	, "Назначение платежа, стр. 1"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа2"	, Т_Строка	, "Назначение платежа, стр. 2"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа3"	, Т_Строка	, "Назначение платежа, стр. 3"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа4"	, Т_Строка	, "Назначение платежа, стр. 4"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа5"	, Т_Строка	, "Назначение платежа, стр. 5"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа6"	, Т_Строка	, "Назначение платежа, стр. 6"	, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцептаДок"		, Т_Число10		, "Срок акцепта"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцепта"			, Т_Строка		, "Срок акцепта (из файла)"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидАккредитива"		, Т_Строка		, "Вид аккредитива"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты1"		, Т_Строка		, "Условие оплаты, стр. 1"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты2"		, Т_Строка		, "Условие оплаты, стр. 2"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты3"		, Т_Строка		, "Условие оплаты, стр. 3"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежПоПредст"		, Т_Строка		, "Платеж по представлению"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДополнУсловия"		, Т_Строка		, "Дополнительные условия"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаПоставщика"	, Т_Строка		, "№ счета поставщика"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылки"			, Т_Дата		, "Дата отсылки"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылкиДок"		, Т_Строка		, "Дата отсылки документов"	, НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ"				, Т_Документ	, "Источник"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежныйОрдер"		, Т_ПлОрдер		, "Ордер"					, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент"		, Т_Строка		, "Выгрузка"				, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Договор"				, Т_Договоры	, "Договор"					, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатьяДДС"			, Т_СтатьяДДС	, "Статья ДДС"				, Видимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок"		, Т_Строка		, "Замечания"				, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента"			, Т_Число10		, "Тип пл. документа"		, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидДокумента"			, Т_Строка		, "Вид документа"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ИмяДокумента"			, Т_Строка		, "Имя документа"			, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОперации"			, Т_ВидыОпераций, "Вид операции пл. документа"	, Видимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПроцентКомиссииБанка"	, Т_Число15_2	, "% комиссии банка"		, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаКомиссииБанка"	, Т_Число15_2	, "Сумма комиссии банка"	, Видимая);
	
	//sstuman
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДоговорКонтрагента"	, Т_Договоры	, "Договор контрагента"		, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Терминал"				, Т_Терминалы	, "Терминал"				, Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТорговаяТочка"		, Т_ТорговыеТочки	, "Торговая точка"		, Видимая);
	//sstuman
	//пмм
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтрокаДокумента"		, Т_Число10		, "Номер строки документа"	, НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ИсходныйДокумент"		, Т_Документ	, "Номер строки документа"	, НеВидимая);
	//пмм.
	
	//+++ZEZA
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатьяДДС_Бух", , "Статья ДДС (Бух)", Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОперацииСписанияСКорпоративныхКарт", , "Вид операции списания с корпоративных карт", Видимая);
	//---ZEZA
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРасчСчетов(Таб) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку, ИзменятьПозицию, Видимость, Доступность, ТолькоПросмотр, ИзменениеРазмера, Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь, Истина, Истина, Истина, Истина, 0);
	
	Т_Число15_2  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Строка     = Новый ОписаниеТипов("Строка");
	Т_Дата       = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Т_Справочник = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаНачала"		, Т_Строка,     "Дата начала интервала",      Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаКонца"		, Т_Строка,     "Дата конца интервала",       Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчСчет"		, Т_Строка,     "Расчетный счет организации", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальныйОстаток", Т_Строка,     "Начальный остаток",          Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоПоступило"	, Т_Строка,     "Обороты входящих платежей",  Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоСписано"	, Т_Строка,     "Обороты исходящих платежей", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечныйОстаток"	, Т_Строка,     "Конечный остаток",           Видимая);
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Начало"			, Т_Дата,       "Начало интервала",           Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Конец"			, Т_Дата,       "Конец интервала",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчетныйСчет"	, Т_Справочник, "Расчетный счет",             Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальнаяСумма"	, Т_Число15_2,  "НачальнаяСумма",             Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Поступило"		, Т_Число15_2,  "Всего поступило",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Списано"			, Т_Число15_2,  "Всего списано",              Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечнаяСумма"	, Т_Число15_2,  "Конечная сумма",             Видимая);
	
КонецПроцедуры


////////////// ОБЩИЕ //////////////////////////////////////////////////

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	ЧислоДаты 	= Лев(Буфер	, ПозицияТочки - 1);
	Буфер 		= Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	МесяцДаты 	= Лев(Буфер	, ПозицияТочки - 1);
	ГодДаты 	= Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат "Не удалось преобразовать строку в дату";
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "ПоступлениеВБанк" Тогда
	//Если (ВидДокумента = "ПлатежноеПоручениеВходящее")
	//	ИЛИ (ВидДокумента = "АккредитивПолученный")
	//	ИЛИ (ВидДокумента = "ПлатежноеТребованиеВыставленное")
	//	ИЛИ (ВидДокумента = "ИнкассовоеПоручениеПереданное")
	//	ИЛИ (ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Открывает для просмотра текстовой документ
//  
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение("Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Заголовок,Элемент.Значение);
	
КонецПроцедуры


////////////// ПОДГОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////
Функция ПолучитьТекстЗапросаПоПлатежноеПоручениеИсходящее()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	РасходИзБанка.Ссылка КАК Документ,
	|	РасходИзБанка.Проведен КАК Проведен,
	|	РасходИзБанка.НомерВходящегоДокумента КАК Номер,
	|	РасходИзБанка.Дата КАК Дата,
	|	РасходИзБанка.ВидПлатежа КАК ВидПлатежа,
	|	РасходИзБанка.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	РасходИзБанка.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	РасходИзБанка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	РасходИзБанка.СуммаДокумента КАК СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	РасходИзБанка.СуммаДокумента КАК СуммаНаРасход,
	|	РасходИзБанка.ТекстПлательщика КАК ТекстПлательщика,
	|	РасходИзБанка.ТекстПолучателя КАК ТекстПолучателя,
	|	РасходИзБанка.ИННПлательщика КАК ИННПлательщика,
	|	РасходИзБанка.КПППлательщика КАК КПППлательщика,
	|	РасходИзБанка.ИННПолучателя КАК ИННПолучателя,
	|	РасходИзБанка.КПППолучателя КАК КПППолучателя,
	|	РасходИзБанка.КодБК КАК КодБК,
	|	РасходИзБанка.КодОКТМО КАК КодОКАТО,
	|	РасходИзБанка.ПоказательДаты КАК ПоказательДаты,
	|	РасходИзБанка.ПоказательНомера КАК ПоказательНомера,
	|	РасходИзБанка.ПоказательОснования КАК ПоказательОснования,
	|	РасходИзБанка.ПоказательТипа КАК ПоказательТипа,
	|	РасходИзБанка.ПоказательПериода КАК ПоказательПериода,
	|	РасходИзБанка.СтатусСоставителя КАК СтатусСоставителя,
	|	РасходИзБанка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	РасходИзБанка.Организация.НаименованиеПолное КАК Организация,
	|	РасходИзБанка.Организация.Наименование КАК ОрганизацияКратко,
	|	РасходИзБанка.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	РасходИзБанка.Организация.ИНН КАК ОрганизацияИНН,
	|	РасходИзБанка.Организация.КПП КАК ОрганизацияКПП,
	|	РасходИзБанка.СчетОрганизации КАК ОрганизацияСчет,
	|	РасходИзБанка.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	РасходИзБанка.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	РасходИзБанка.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	РасходИзБанка.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	РасходИзБанка.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	РасходИзБанка.СчетОрганизации.БанкДляРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	РасходИзБанка.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	РасходИзБанка.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	РасходИзБанка.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	РасходИзБанка.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	РасходИзБанка.СчетОрганизации.ТекстКорреспондента КАК ОрганизацияТекстКорреспондента,
	|	РасходИзБанка.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходИзБанка.СчетКонтрагента.Владелец) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ПОДСТРОКА(РасходИзБанка.СчетКонтрагента.Владелец.НаименованиеПолное, 1, 1000)
	|		ИНАЧЕ ПОДСТРОКА(РасходИзБанка.СчетКонтрагента.Владелец.Наименование, 1, 1000)
	|	КОНЕЦ КАК Контрагент,
	|	РасходИзБанка.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходИзБанка.СчетКонтрагента.Владелец) = ТИП(Справочник.Контрагенты)
	|			ТОГДА РасходИзБанка.СчетКонтрагента.Владелец.ИНН
	|		ИНАЧЕ ""000000000000""
	|	КОНЕЦ КАК КонтрагентИНН,
	|	РасходИзБанка.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	РасходИзБанка.СчетКонтрагента КАК КонтрагентСчет,
	|	РасходИзБанка.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	РасходИзБанка.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	РасходИзБанка.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	РасходИзБанка.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	РасходИзБанка.СчетКонтрагента.БанкДляРасчетов КАК КонтрагентБанкДляРасчетов,
	|	РасходИзБанка.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	РасходИзБанка.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	РасходИзБанка.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	РасходИзБанка.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	РасходИзБанка.СчетКонтрагента.ТекстКорреспондента КАК КонтрагентТекстКорреспондента,
	|	РасходИзБанка.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	|	РасходИзБанка.ВидОперации,
	|	"""" КАК ВидАккредитива,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК СрокДействия,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ДокументыКПредъявлению,
	|	"""" КАК ДополнительныеУсловия,
	|	"""" КАК СчетДепонента,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Дата >= &ДатаНачало
	|	И РасходИзБанка.Дата <= &ДатаОкончание
	|	И НЕ РасходИзБанка.ПометкаУдаления
	|	И РасходИзБанка.Проведен
	|	И НЕ РасходИзБанка.Оплачено
	|	И РасходИзБанка.СчетОрганизации = &Счет";
	
КонецФункции

Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;

	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога			= (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя	= ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента= ?(ПеречислениеНалога, 1, 0) * 4 + ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	КонецЕсли;

	РеквизитыПлДокЭкс_Основные 		= "Номер,Дата,СуммаДокумента";
	РеквизитыПлДокЭкс_Плательщик 	= Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";      
	РеквизитыПлДокЭкс_ПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭкс_Получатель 	= Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭкс_ПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭкс_БюджетПлатеж 	= "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";

	Экспорт_НеПустые = СоздатьСоответствиеИзСтроки(
		РеквизитыПлДокЭкс_Основные + "," +
		РеквизитыПлДокЭкс_Плательщик + "," +
		?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭкс_ПлательщикНПР + ",", "")+
		РеквизитыПлДокЭкс_Получатель + "," +
		?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭкс_ПолучательНПР + ",", ""));
	
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияСвойств.Найти(Свойство.Ключ).ТекстШапки);
	КонецЦикла;
	
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	//+++АК ILIK 2018.10.10 ИП-00020110
	//ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	//---АК ILIK
	                           
КонецФункции

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт) Экспорт
	
	ПлатежныеДокументы.Очистить();
	
	ВыгружатьПлатПоручения = ТаблицаДокументов.Найти("Платежное поручение", "Название").Пометка;

	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Предупреждение("Необходимо выбрать банковский счет.");
		Возврат;
	КонецЕсли;
	
	//Формирование запроса
	ТекстЗапроса = "";
	Если ВыгружатьПлатПоручения Тогда
		ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаПоПлатежноеПоручениеИсходящее();
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	Дата,
	|	Документ";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало"		, НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание"	, КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет"			, БанковскийСчет);
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выгрузить();
	ПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияСвойств = ДокументыНаЭкспорт.Колонки;
	Для каждого СтрокаДокумента Из ПлатежныеДокументы Цикл
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияСвойств);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	Ошибка = Новый СписокЗначений();
	
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя );
	П104 = СокрЛП(СтрокаЭкспорта.КодБК );
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО );
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования );
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1, "", СтрокаЭкспорта.ПоказательПериода );
	П107 = ?(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0", "", СтрокаЭкспорта.ПоказательПериода );
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера );
	П109 = ?(НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты ), "0", Строка(СтрокаЭкспорта.ПоказательДаты ));
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа );
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) или
		(ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Статус составителя"" на закладке ""Реквизиты для перечисления налогов"".");	УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") и (Найти("06,07", П101) = 0) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""КБК"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Код ОКАТО"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	//Выводим список найденых ошибок
	Для Ном = 0 по Ошибка.Количество()-1 Цикл
		Сообщить(Ошибка.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // Проверить()

Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Номер должен оканчиваться на три цифры и не на ""000""!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогФыбораФайла.Заголовок                   = "Выберите файл для выгрузки данных из клиента банка";
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.Расширение                  = "txt";
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры


////////////// ВЫГРУЗКА //////////////////////////////////////////////////
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" 
			ИЛИ ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда  
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	Иначе
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер 			= ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, Организация.Префикс);
	СтрокаЭкспорта.Дата 			= ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма 			= Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет 	= ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет 	= ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа		= ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);

//ВидОплаты 
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "01";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Заявление на аккредитив" Тогда
		СтрокаЭкспорта.ВидОплаты =  "08";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "06";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты =  "02";
		
	Иначе
		СтрокаЭкспорта.ВидОплаты = "00";
	КонецЕсли;
		
//Плательщик1
	ТекстПлательщика = "";
	Если НепрямыеРасчетыУПлательщика Тогда
		ПозицияРС = Найти(ВыборкаДляЭкспорта["ТекстПлательщика"], "р/с"); 
		Если ПозицияРС = 0 Тогда
			ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
		Иначе
			ТекстПлательщика = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПлательщика"], ПозицияРС - 1)));
		КонецЕсли;
	Иначе
		ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
	КонецЕсли;
	СтрокаЭкспорта.Плательщик1 = СтрЗаменить(ТекстПлательщика, Символы.ПС, " ");
	
//Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	КонецЕсли;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1; 
	
//ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		 = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3 		 = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		 = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		 = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет= ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет= ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
//Получатель1
	ТекстПолучателя = "";
	Если НепрямыеРасчетыУПолучателя Тогда
		ПозицияРС = Найти(ВыборкаДляЭкспорта["ТекстПолучателя"], "р/с");
		Если ПозицияРС = 0 Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
		Иначе
			ТекстПолучателя = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПолучателя"], ПозицияРС - 1)));
		КонецЕсли;
	Иначе
		ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
	КонецЕсли;
	СтрокаЭкспорта.Получатель1 = СтрЗаменить(ТекстПолучателя, Символы.ПС, " ");
	
//Получатель, ПолучательИНН
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	Если ПустаяСтрока(Значение) Тогда
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Значение = ВыборкаДляЭкспорта.ОрганизацияИНН;
		Иначе
			Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
		КонецЕсли;
	КонецЕсли;
	СтрокаЭкспорта.ПолучательИНН 	= Значение;
	СтрокаЭкспорта.Получатель 		= "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
//ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		 = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3 		 = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		 = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		 = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет= ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет= ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
	
//ПлательщикКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
//ПолучательКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
//СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО ПоказательОснования ПоказательПериода ПоказательНомера ПоказательДаты ПоказательТипа
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК       = ВыборкаДляЭкспорта.КодБК;
		СтрокаЭкспорта.ОКАТО               = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода)
				ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			СтрокаЭкспорта.ПоказательТипа = "0";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	КонецЕсли;
	
//СрокПлатежа, ВидАккредитива, УсловиеОплаты1, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика
	Если ВыборкаДляЭкспорта.ВидДокумента = "Заявление на аккредитив" Тогда
		СтрокаЭкспорта.СрокПлатежа 			= ВыборкаДляЭкспорта.СрокДействия;
		СтрокаЭкспорта.ВидАккредитива 		= Строка(ВыборкаДляЭкспорта.ВидАккредитива);
		СтрокаЭкспорта.УсловиеОплаты1 		= ВыборкаДляЭкспорта.УсловиеОплаты1;
		СтрокаЭкспорта.ПлатежПоПредст 		= ВыборкаДляЭкспорта.ДокументыКПредъявлению;
		СтрокаЭкспорта.ДополнУсловия 		= ВыборкаДляЭкспорта.ДополнительныеУсловия;
		СтрокаЭкспорта.НомерСчетаПоставщика = ВыборкаДляЭкспорта.СчетДепонента;
	КонецЕсли;
	
//СрокАкцепта, ДатаОтсылкиДок, УсловиеОплаты1
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.СрокАкцепта 		= ВыборкаДляЭкспорта.СрокАкцепта;
		СтрокаЭкспорта.ДатаОтсылкиДок 	= ВыборкаДляЭкспорта.ДатаОтсылкиДок;
		СтрокаЭкспорта.УсловиеОплаты1 	= ВыборкаДляЭкспорта.УсловиеОплаты1;
	КонецЕсли;
	
//Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
//НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
// Код
	КодПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("Код");
	КодВыгружаетсяВОтдельномПоле     = Истина;
		
	Если КодВыгружаетсяВОтдельномПоле
			И КодПредусмотренСтандартамиОбмена Тогда
		Если ВыборкаДляЭкспорта.ПеречислениеВБюджет 
				И ПустаяСтрока(ВыборкаДляЭкспорта.ИдентификаторПлатежа) Тогда
			СтрокаЭкспорта.Код = "0"; // требования 107н
		Иначе
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.ИдентификаторПлатежа; // только требования 383-П
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов)
	
	Буфер 		= "";
	Реквизит 	= "";
	СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи, СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из СтуртураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура Выгрузить(ДокументыНаЭкспорт) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.02");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" 		+ Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" 	+ Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" 		+ Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" 	+ Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" 	+ Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" 		+ Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" 		+ Формат(КонПериода, "ДЛФ=Д"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскийСчет.НомерСчета);
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
		КонецЕсли;	
	КонецЦикла;
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
	// записываем на диск
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	Попытка
		ПотокВыгрузки.Вывод = ИспользованиеВывода.Разрешить;
		Если Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(ФайлВыгрузки, КодировкаТекста.OEM);
		Иначе
			ПотокВыгрузки.Записать(ФайлВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
		// Отметим те документы которые успешно загрузились
		Для каждого СтрокаСекции Из ДокументыНаЭкспорт.Значение Цикл
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
		КонецЦикла;
		
		Сообщить("Данные успешно выгружены в файл " + ФайлВыгрузки);
	Исключение
		Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
	КонецПопытки
	
КонецПроцедуры


////////////// ПОДГОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если (ТипДокумента < 3) ИЛИ (ТипДокумента = 11)  ИЛИ (ТипДокумента = 12) Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта()
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер)
			ИЛИ Лев(Буфер, 2) = "//" Цикл
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = Импорт_МассивСтрок[Импорт_ТекущаяСтрока - 1];
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Процедура ВыборФайлаДляЗагрузки(Элемент) Экспорт
		
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогФыбораФайла.Заголовок                   = "Выберите файл для загрузки данных из клиента банка";
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.Расширение                  = "txt";
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправиьный реквизит заголовка
		Сообщить("Неверный реквизит заголовка, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + ТекстСтрокиЗаголовка);
		
	КонецЕсли;
		
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Тег 		= "";
		Значение 	= "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				// неправильный реквизит заголовка
				Сообщить("Неверный реквизит платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			// неправиьный реквизит заголовка
			Сообщить("Нарушена структура платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			// неправильный реквизит заголовка
			Сообщить("Неверный реквизит в секции описания расчетного счета, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТорговуюТочкуТерминала(Терминал, Дата, ТаблицаКешПривязокТТ)
//	
//	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
//		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
//	КонецЕсли;	
//	
//	СтрокиТерминала = ТаблицаКешПривязокТТ.НайтиСтроки(Новый Структура("Дата, Терминал", НачалоДня(Дата), Терминал));
//	Если СтрокиТерминала.Количество() = 0 Тогда
//		Запрос = Новый Запрос();
//		Запрос.Текст = "ВЫБРАТЬ
//					   |	&Дата КАК Дата,
//					   |	ПривязкаВременныхТерминаловКТорговымТочкамСрезПоследних.Терминал,
//					   |	ПривязкаВременныхТерминаловКТорговымТочкамСрезПоследних.ТорговаяТочка КАК ТТ
//					   |ИЗ
//					   |	РегистрСведений.ПривязкаВременныхТерминаловКТорговымТочкам.СрезПоследних(&Дата, ) КАК ПривязкаВременныхТерминаловКТорговымТочкамСрезПоследних";
//					   
//		Запрос.УстановитьПараметр("Дата", Дата);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			ЗаполнитьЗначенияСвойств(ТаблицаКешПривязокТТ.Добавить(), Выборка);
//		КонецЦикла;
//		СтрокиТерминала = ТаблицаКешПривязокТТ.НайтиСтроки(Новый Структура("Дата, Терминал", НачалоДня(Дата), Терминал));
//		Если СтрокиТерминала.Количество() = 0 Тогда
//			СтрокаТерминал = ТаблицаКешПривязокТТ.Добавить();
//			СтрокаТерминал.Дата = НачалоДня(Дата);
//			СтрокаТерминал.Терминал = Терминал;
//			СтрокаТерминал.ТТ = Терминал.Владелец;
//		Иначе
//			СтрокаТерминал = СтрокиТерминала[0];
//		КонецЕсли;
//	Иначе
//		СтрокаТерминал = СтрокиТерминала[0];
//	КонецЕсли;
//	
//	Возврат СтрокаТерминал.ТТ;
//	
КонецФункции	

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция НайтиДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено)

//	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

//	Запрос = Новый Запрос;
//	ТекстЗапроса = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
//	|	ДоговорыКонтрагентов.Ссылка,
//	|	ВЫБОР
//	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
//	|			ТОГДА 1
//	|		ИНАЧЕ 2
//	|	КОНЕЦ КАК Приоритет
//	|ИЗ
//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
//	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
//	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
//	|ГДЕ
//	|	&ТекстФильтра
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Приоритет";
//	
//	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
//	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
//	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
//	
//	ТекстФильтра = "
//	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
//	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
//	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
//	+?(СписокВидовДоговора<>неопределено,"
//	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
//		
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
//	
//	Запрос.Текст = ТекстЗапроса;
//	Результат = Запрос.Выполнить();
//	
//	Если Не Результат.Пустой() Тогда
//	
//		Выборка = Результат.Выбрать();
//		Выборка.Следующий();
//		Возврат Выборка.Ссылка;
//	Иначе
//		Возврат "Не найден"
//	КонецЕсли;
//	
КонецФункции // ПолучитьДоговорКонтрагента()

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СчетПринадлежитОрганизации(НомерСчета)
	
	ЗапросПоСчету = Новый Запрос;
	ЗапросПоСчету.УстановитьПараметр("НомерСчета"	, НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация"	, Организация);
	ЗапросПоСчету.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура сборка*
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта, Таблица, ВыводитьСообщения) Экспорт
	     
	УжеНайденныеДокументы = Новый Массив;
	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка банковской выписки";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена 	= Ложь;
	НайденКонецФайла 		= Ложь;
	
	ЗагрРасчетныеСчета 	= Новый СписокЗначений;
	СписокДокументов 	= Новый СписокЗначений;
	ЗагрВидыДокументов 	= Новый СписокЗначений;
	
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	ЗаполнитьКэшКорпКарт(); //+++АК LAGP 2017.11.15 ИП-00017140 Создаем/перезаполняем кэш корпоративных карт для дальнейшего поиска по номеру.
	
	// Получаем исходные данные
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ФайлЗагрузки);
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		Предупреждение("Файл загрузки не содержит данных!");
		Возврат;
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_КоличествоСтрок 	= Импорт_ТекстДляРазбора.Количество();
	Импорт_ТекущаяСтрока 	= 1;
	ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = Импорт_КоличествоСтрок;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		ФормаИндикацииХодаЗагрузки.Значение 					= Импорт_ТекущаяСтрока;
		ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных 	= "Обрабатывается строка: " + Импорт_ТекущаяСтрока + " из " + Импорт_КоличествоСтрок;
		
		Стр = ПолучитьСтрокуИмпорта();
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Тег 		= "";
			Значение 	= "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов) Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Предупреждение("Нарушена структура файла импорта, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + Стр);
				Возврат;				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов) Тогда
				Сообщить("Нарушена структура файла импорта в секции описания расчетного счета! Строка: " + (Импорт_ТекущаяСтрока - 1));
				Возврат;
			КонецЕсли;
			
			Если БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчет Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Тег 		= "";
			Значение 	= "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				
				Если СчетПринадлежитОрганизации(Значение) Тогда
					Если БанковскийСчет.НомерСчета = Значение Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
						Если СтрокаРССчетов = Неопределено Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
							СтрокаРССчетов.РасчСчет = Значение;
						КонецЕсли;
					Иначе						
						Если ВыводитьСообщения Тогда
							Сообщить("В заголовке файла указан счет (" + Значение + ") отличный от указанного, расчеты по которому загружаться не будут!", СтатусСообщения.ОченьВажное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ВыводитьСообщения Тогда
						Сообщить("В заголовке файла указан счет, не принадлежащий организации: " + Значение + " !", СтатусСообщения.ОченьВажное);
					КонецЕсли;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить("В файле импорта отсутствует признак обмена ""1CClientBankExchange""!");
				Возврат;
			КонецЕсли;
			
			НайденКонецФайла = истина;
			НомерСтроки = 0;
			
			СводныйПриходЭквайринг = Неопределено;
			СводныйРасходЭквайринг = Неопределено;

			//ТаблицаКешПривязокТТ = Новый ТаблицаЗначений();
			//ТаблицаКешПривязокТТ.Колонки.Добавить("Дата");
			//ТаблицаКешПривязокТТ.Колонки.Добавить("Терминал");
			//ТаблицаКешПривязокТТ.Колонки.Добавить("ТТ");
			ТаблицаКешПривязокТТ = Неопределено;
			
			// Формируем объектные структуры данных
			Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты
				//Если в файле находятся выписка пл. документов по нескольким счетам, то распознаем и отображаем
				//только те которые выгружены по указанному банковскому счету
				Если СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета
						ИЛИ СтрокаДокумента.ПолучательСчет = БанковскийСчет.НомерСчета Тогда
						
					//	
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ТаблицаКешПривязокТТ);
					
					//+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
					//НомерСтроки = НомерСтроки + 1;                
					//СтрокаДокумента.НомерСтроки = НомерСтроки;    
					// Для каждого реквизита (= колонка) надо проверить на пустое значение
					//Для каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл   
					//	ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
					//КонецЦикла;
					//---АК LAGP
					
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
							ИЛИ	ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка")
							ИЛИ ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
						
						//добавляем реквизиты в табличную часть для дальнейшего использования
						СписокНенайденных(СтрокаДокумента);
					КонецЕсли;
				Иначе
					//остальные помечаем для последующего удаления
					//СтрокаДокумента.НомерСтроки = 0;				//+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.			
				КонецЕсли;
			КонецЦикла;
			
			
			//Удалим не нужные строки из таблицы
			Количество = ДокументыДляИмпорта.Количество() - 1;
			Для й = 0 По Количество Цикл
				Если ДокументыДляИмпорта[Количество - й].НомерСтроки = 0 Тогда
					ДокументыДляИмпорта.Удалить(Количество - й);
				КонецЕсли;
			КонецЦикла;
			
			ФормаИндикацииХодаЗагрузки.Закрыть();
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			ЗагрузитьСтрокуЗаголовка(Стр);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		Импорт_РасчетныеСчета.Очистить();
		ДокументыДляИмпорта.Очистить();
		Предупреждение("Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!");
	КонецЕсли;

КонецПроцедуры


////////////// ЗАГРУЗКА //////////////////////////////////////////////////

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если ЗначениеСвойства <> Неопределено
			И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если ЭтоНовыйДокумент 
			ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
			ИЛИ ОбязательнаяЗаменаСтарогоЗначения) 
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево") 
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеВБанк") Тогда
		НазваниеОбъекта = "документ ""Поступление в банк"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходИзБанка") Тогда
		НазваниеОбъекта = "документ ""Расход из банка"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСКорпоративныхКарт") Тогда
		НазваниеОбъекта = "документ ""Списание с корпоративных карт"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	//Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
	//	НазваниеОбъекта = "документ ""Входящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АккредитивПолученный") Тогда
	//	НазваниеОбъекта = "документ ""Аккредитив полученный"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеПолученное") Тогда
	//	НазваниеОбъекта = "документ ""Платежное требование полученное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ИнкассовоеПоручениеПолученное") Тогда
	//	НазваниеОбъекта = "документ ""Инкассовое поручение полученное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
	//	НазваниеОбъекта = "документ ""Исходящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АккредитивПереданный") Тогда
	//	НазваниеОбъекта = "документ ""Аккредитив переданный"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеВыставленное") Тогда
	//	НазваниеОбъекта = "документ ""Платежное требование выставленное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ИнкассовоеПоручениеПереданное") Тогда
	//	НазваниеОбъекта = "документ ""Инкассовое поручение переданное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
	//	НазваниеОбъекта = "документ ""Платежный ордер (списание)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
	//	
	//ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
	//	НазваниеОбъекта = "документ ""Платежный ордер (поступление)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	Иначе
		НазваниеОбъекта = "объект";
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;

	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, " помечен на удаление", " отменена пометка на удаление");
		
	Попытка
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ": " + НазваниеДействия + ".", СтатусСообщения.Информация);
	Исключение
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)+ ": не " + НазваниеДействия + "! Произошли ошибки при записи!", СтатусСообщения.Важное);
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции)

	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "РасходИзБанка"
		ИЛИ ТипДокумента = "СписаниеСКорпоративныхКарт" Тогда
		ИмяДокумента = "Платежное поручение исходящее";
		
	ИначеЕсли ТипДокумента = "ПоступлениеВБанк" Тогда
		ИмяДокумента = "Платежное поручение входящее";
		//Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		//	ИмяДокумента = "Платежное поручение исходящее";
		//	
		//ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		//	ИмяДокумента = "Платежное поручение входящее";
		//	
		//ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		//	ИмяДокумента = "Платежный ордер на списание";
		//	
		//ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		//	ИмяДокумента = "Платежный ордер на поступление";
		//	
		//ИначеЕсли ТипДокумента = "ПлатежноеТребованиеВыставленное" Тогда
		//	ИмяДокумента = "Платежное требование выставленное";
		//	
		//ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПолученное" Тогда
		//	ИмяДокумента = "Платежное требование полученное";
		
		//ИначеЕсли ТипДокумента = "АккредитивПереданный" Тогда
		//	ИмяДокумента = "Аккредитив переданный";
		//	
		//ИначеЕсли ТипДокумента = "АккредитивПолученный" Тогда
		//	ИмяДокумента = "Аккредитив полученный";
		//			
		//ИначеЕсли ТипДокумента = "ИнкассовоеПоручениеПереданное" Тогда
		//	ИмяДокумента = "Инкассовое поручение переданное";
		//	
		//ИначеЕсли ТипДокумента = "ИнкассовоеПоручениеПолученное" Тогда
		//	ИмяДокумента = "Инкассовое поручение полученное";
		//			
	КонецЕсли;
	
	//Проводить = (ПолучитьНастройкуЗаполнения(ИмяДокумента, "Проводить") = Истина);
	Проводить = Истина;
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен 		= ОбъектДляЗаписи.Проведен;
	
	Если ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.ПоступлениеВБанк")
		И ЗначениеЗаполнено(ОбъектДляЗаписи.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница) Тогда
		Для Ном = 1 по 3 Цикл
			Если ТипЗнч(ОбъектДляЗаписи["СубконтоКт" + Ном]) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ОбъектДляЗаписи["СубконтоКт" + Ном] = ОбъектДляЗаписи.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.ПоступлениеВБанк")
		И ЗначениеЗаполнено(ОбъектДляЗаписи.ДоговорКонтрагента.ТорговаяТочка) Тогда
		Для Ном = 1 по 3 Цикл
			Если ТипЗнч(ОбъектДляЗаписи["СубконтоКт" + Ном]) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ОбъектДляЗаписи["СубконтоКт" + Ном] = ОбъектДляЗаписи.ДоговорКонтрагента.ТорговаяТочка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	// Минеев доработал 2017-01-17
	Если ТипДокумента = "РасходИзБанка" Тогда
		Если ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников
			И ТипЗнч(ОбъектДляЗаписи.СубконтоДт3) = Тип("СправочникСсылка.ФизическиеЛица")
			И ЗначениеЗаполнено(ОбъектДляЗаписи.СубконтоДт3) Тогда
			
			//+++АК LAGP 2018.02.21 ИП-00017918 Поиск счетов для открытия корп.карты через новую функцию. (счета сменились) 
			//ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
			ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", ОбъектДляЗаписи.Дата));
			//---АК LAGP			
			
			ОбъектДляЗаписи.СтатьяДвиженияДенежныхСредствБУ 	= Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000021"); // пополнение расчетного счета
			//+++АК POZM 2017.10.24 ИП-00016987 				
		ИначеЕсли ОбъектДляЗаписи.СтатьяДвиженияДенежныхСредств.Код = "139391" Тогда //Услуги банка прочие постоянные
			НП = ОбъектДляЗаписи.НазначениеПлатежа;
			НП = НРег(СтрЗаменить(НП," ",""));
			Если Найти(НП,"комиссиявнутри")>0 ИЛИ Найти(НП,"комиссиязаперечислениесредств")>0 ИЛИ Найти(НП,"комиссиявдруг")>0
			 //+++АК ILIK 2018.11.16 ИП-00020354
			 Или Найти(НП, "платазаобслуживаниепопакетууслуг""базис""") > 0 Или Найти(НП, "комиссиязанаправлениезапросов") > 0 Или Найти(НП, "комиссиязаприемденежнойналичности") > 0
			 Или Найти(НП, "комиссиязаобменбанкнот") > 0 Или Найти(НП, "комиссиязаинкассациюденежнойналичности") > 0 Или Найти(НП, "полнаяоплатакомиссии") > 0
			 Или Найти(НП, "платазавыдачуналичныхкчеку") > 0 Или Найти(НП, "комиссиязаорганизациюобслуживаниясиспользованиемсистемы""сбербанкбизнесонл@йн""") > 0 Тогда
			 //---АК ILIK
				//+++АК LAGP 2018.04.02 ИП-00018282 Изменение субконто по умолчанию в зависимости от организации
				//ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("44.3");
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("44.3", "Финансовый");
				ОбъектДляЗаписи.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				//ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("91.02");
				
				Если ОбъектДляЗаписи.Организация.ИНН = "7734410589" Тогда //Тилси
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЯН0007369",,,ОбъектДляЗаписи.Контрагент);
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Тилси (общий)");
				//---АК LAGP	
				ИначеЕсли ОбъектДляЗаписи.Организация.ИНН = "7726660031" Тогда //Луг
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003926",,,ОбъектДляЗаписи.Контрагент);
					//+++АК LAGP 2018.04.02 ИП-00018282 Изменение субконто по умолчанию в зависимости от организации
					//ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Избенка (общий)");
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все");
					//---АК LAGP
				ИначеЕсли ОбъектДляЗаписи.Организация.ИНН = "7734641716" Тогда //Избенка
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003305",,,ОбъектДляЗаписи.Контрагент);
					//+++АК LAGP 2018.04.02 ИП-00018282 Изменение субконто по умолчанию в зависимости от организации
					//ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Избенка (общий)");
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все");
					//---АК LAGP
				ИначеЕсли ОбъектДляЗаписи.Организация.ИНН = "7734675810" Тогда //Вкусвилл
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003279",,,ОбъектДляЗаписи.Контрагент);
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Вкусвилл (общий)");
				КонецЕсли;	
				
				//+++АК LAGP 2018.04.02 ИП-00018282 Изменение субконто по умолчанию в зависимости от организации
				//ОбъектДляЗаписи.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление розницей");
				ОбъектДляЗаписи.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление исполнительное");
				//---АК LAGP
				
				ОбъектДляЗаписи.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
				
				//+++АК LAGP 2018.03.30 ИП-00017936 СубконтоБУ для обмена с БП 
				ОбъектДляЗаписи.СубконтоДт1БУ = Справочники.ПрочиеДоходыИРасходыБУ.НайтиПоНаименованию("Расходы на услуги банков");
				//---АК LAGP
				
			ИначеЕсли Найти(НП,"ндсзаосуществление")>0 ИЛИ Найти(НП,"комиссиязаосуществлениефункцийагентавалютногоконтроля")>0
				  //+++АК ILIK 2018.11.16 ИП-00020354
				  Или Найти(НП, "ндсподокументу") > 0 Тогда
				  //---АК ILIK
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("60.4");
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
				ОбъектДляЗаписи.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				//+++АК ILIK 2018.11.16 ИП-00020354
				ОрганизацияИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.Организация, "ИНН");
				Если ОрганизацияИНН = "7726660031" Тогда //Луг
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003926",,,ОбъектДляЗаписи.Контрагент);
				ИначеЕсли ОрганизацияИНН = "7734641716" Тогда //Избенка
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003305",,,ОбъектДляЗаписи.Контрагент);
				ИначеЕсли ОрганизацияИНН = "7734675810" Тогда //Вкусвилл
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003279",,,ОбъектДляЗаписи.Контрагент);
				ИначеЕсли ОрганизацияИНН = "7734410589" Тогда //Тилси
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЯН0007369",,, ОбъектДляЗаписи.Контрагент);
				//---АК ILIK
				КонецЕсли;
			//+++АК LAGP 2018.08.27 ИП-00019609 услуги банка Проект избенка
		ИначеЕсли Найти(НП,"комиссиязапереводденежныхсредствзапериод")>0 ИЛИ Найти(НП,"комиссиязаобслуживаниесервисадбо""интернет-клиент""")>0 ИЛИ Найти(НП,"комиссиязаобслуживаниесчетаврублях")>0 ИЛИ Найти(НП,"комиссиязаоткрытиесчетавин.валюте")>0
			  //+++АК ILIK 2018.11.16 ИП-00020354
			  Или Найти(НП, "комиссиязаобслуживаниесчетавин.валюте") > 0 Или Найти(НП, "комиссиязаобслуживаниесчетаприобслуживанииклиентапосистемедбо") > 0 Или Найти(НП, "комиссиязаоткрытиесчетаввал") > 0
			  Или Найти(НП, "комиссиязасправкуобостатках") > 0 Или Найти(НП, "комиссиязаоформлениечековыхкнижек") > 0 Или Найти(НП, "комиссиязапредост.клиентупописьм.запросу") > 0
			  Или Найти(НП, "комиссиязапереводрублей") > 0 Или Найти(НП, "комиссиязаформированиеипредоставлениеключаэлектроннойподписи") > 0 Или Найти(НП, "комиссиязаподключениексервисудбо""интернет-клиент""") > 0 Тогда
			  //---АК ILIK
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом 		= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("44.3", "Финансовый");
				ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("91.02");
				ОбъектДляЗаписи.СтатьяДвиженияДенежныхСредствБУ 	= Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000016"); //Услуги банка
				//+++АК ILIK 2018.11.16 ИП-00020354
				//ОбъектДляЗаписи.СубконтоДт1                       	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_67");
				ОрганизацияИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.Организация, "ИНН");
				Если ОрганизацияИНН = "7734675810" Тогда //Вкусвилл
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Вкусвилл (общий)", Истина);
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЯН0004967",,, ОбъектДляЗаписи.Контрагент);
				ИначеЕсли ОрганизацияИНН = "7734410589" Тогда //Тилси
					ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Тилси (общий)", Истина);
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЯН0009634",,, ОбъектДляЗаписи.Контрагент);
				ИначеЕсли ОрганизацияИНН = "7734641716" Тогда //Проект Избёнка
				    ОбъектДляЗаписи.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все", Истина);
					ОбъектДляЗаписи.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЯН0005126",,, ОбъектДляЗаписи.Контрагент);
				Иначе
					ОбъектДляЗаписи.СубконтоДт1                       	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_67");
				КонецЕсли;
				//---АК ILIK
				ОбъектДляЗаписи.СубконтоДт2                       	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391");               //Услуги банка
				ОбъектДляЗаписи.СубконтоДт1БУ                       = Справочники.ПрочиеДоходыИРасходыБУ.НайтиПоНаименованию("Расходы на услуги банков");
			//---АК LAGP
			КонецЕсли;	
			//---АК POZM 
			
		//+++АК POZM 2018.08.13 ИП-00018948
		ИначеЕсли ОбъектДляЗаписи.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога  И ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НалогиСФОТ Тогда
			Если ЗначениеЗаполнено(ОбъектДляЗаписи.ДоговорКонтрагентаНДФЛ) Тогда
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектДляЗаписи.ДоговорКонтрагентаНДФЛ,"УплачиватьНДФЛЗаКонтрагента,Владелец,Владелец.Родитель.Код,Владелец.ОКОПФ.Наименование");
				Если РеквизитыДоговора.УплачиватьНДФЛЗаКонтрагента И РеквизитыДоговора.ВладелецРодительКод = "000000466" И (РеквизитыДоговора.ВладелецОКОПФНаименование = "ФИЗ" ИЛИ СокрЛП(РеквизитыДоговора.ВладелецОКОПФНаименование) = "") Тогда // Аренда
					ОбъектДляЗаписи.СубконтоДт2 = ВидНалоговНДФЛАренда;
				Иначе
					ОбъектДляЗаписи.СубконтоДт2 = ВидНалоговНДФЛ;
				КонецЕсли;	
			Иначе
				ОбъектДляЗаписи.СубконтоДт2 = ВидНалоговНДФЛ;
				
				//+++АК ILIK 2018.11.13 ИП-00020197
				ОрганизацияИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.Организация, "ИНН");
				Если ОрганизацияИНН = "7734675810" //Вкусвилл
				 Или ОрганизацияИНН = "7734410589" Тогда //Тилси
					Если ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.02.7") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000004");
					ИначеЕсли ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.03.1") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000006");
					ИначеЕсли ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.11") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000008");
					ИначеЕсли ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.01") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000011");
					КонецЕсли;
			 	ИначеЕсли ОрганизацияИНН = "7734641716" Тогда //Проект Избёнка
					Если ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.02.7") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000004");
					ИначеЕсли ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.03.1") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000006");
					ИначеЕсли ОбъектДляЗаписи.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("69.11") Тогда
						ОбъектДляЗаписи.СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000008");
					КонецЕсли;
				КонецЕсли;
				//---АК ILIK
			КонецЕсли;
			//+++АК ILIK 2018.09.05 ИП-00019747
			//ОбъектДляЗаписи.КодОКТМО = "45370000";
			//---АК ILIK
		//---АК POZM 
		
		КонецЕсли;
				
		//+++АК POZM 2017.11.07 ИП-00017140 
		Для Ном = 1 по 3 Цикл
			Если ТипЗнч(ОбъектДляЗаписи["СубконтоДт" + Ном]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если Не ЗначениеЗаполнено(ОбъектДляЗаписи["СубконтоДт" + Ном]) Тогда
					
					ОбъектДляЗаписи["СубконтоДт" + Ном] = НайтиФизлицоВНазначенииПлатежа(ОбъектДляЗаписи.НазначениеПлатежа);
					
				КонецЕсли; 
			ИначеЕсли ТипЗнч(ОбъектДляЗаписи["СубконтоДт" + Ном]) = Тип("СправочникСсылка.Организации") Тогда
				Если Не ЗначениеЗаполнено(ОбъектДляЗаписи["СубконтоДт" + Ном]) Тогда
					
					ОбъектДляЗаписи["СубконтоДт" + Ном] = ОбъектДляЗаписи.Организация;
					
				КонецЕсли; 	
				
			КонецЕсли;
		КонецЦикла;
		
		//---АК POZM 
	Иначе // Познахарёв 2017-05-03
		Если ОбъектДляЗаписи.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
			
			НомерПТС = "";
			НачалоПТС	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "ПТС");
			КонецПТС 	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "поДог");
			Если НачалоПТС <> 0
				И КонецПТС <> 0 Тогда
				НомерПТС = Сред(ОбъектДляЗаписи.НазначениеПлатежа, НачалоПТС + 3, КонецПТС - НачалоПТС - 3);
				//+++АК пмм 11.05.2017
				ОбъектДляЗаписи.Самоинкассация 	= Истина;
				ОбъектДляЗаписи.НомерПТК 		= НомерПТС;
				//---АК пмм 11.05.2017
			КонецЕсли;
			                                                       
			//+++АК POZM 2018.02.14 ИП-00017874 
			Если НомерПТС = "" Тогда
				НачалоПТС	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "(я/к");
				КонецПТС 	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "),з");
				Если КонецПТС = 0 Тогда
					КонецПТС 	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "),в");
				КонецЕсли;	
				Если КонецПТС = 0 Тогда
					КонецПТС 	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, ")зачисление");
				КонецЕсли;	
				Если НачалоПТС <> 0
					И КонецПТС <> 0 Тогда
					НомерПТС = Сред(ОбъектДляЗаписи.НазначениеПлатежа, НачалоПТС + 4, КонецПТС - НачалоПТС - 4);
					
					ОбъектДляЗаписи.Самоинкассация 	= Истина;
					ОбъектДляЗаписи.НомерПТК 		= НомерПТС;
					
				КонецЕсли;

			КонецЕсли;
			
			Если НомерПТС = "" Тогда
				КонецПТС	= Найти(НРег(ОбъектДляЗаписи.НазначениеПлатежа), "заявлено");
				//+++АК POZM 2018.05.03 ИП-00018517
				Если КонецПТС = 0 Тогда
					КонецПТС	= Найти(НРег(ОбъектДляЗаписи.НазначениеПлатежа), "перечисление");
				КонецЕсли;	
				//Если КонецПТС <> 0 Тогда
				Если КонецПТС > 1 Тогда
				//---АК POZM 
					НомерПТС = Лев(ОбъектДляЗаписи.НазначениеПлатежа, КонецПТС-1);
					
					ОбъектДляЗаписи.Самоинкассация 	= Истина;
					ОбъектДляЗаписи.НомерПТК 		= НомерПТС;
					
				КонецЕсли;

			КонецЕсли;
			
			Если НомерПТС = "" Тогда
				НачалоПТС	= Найти(НРег(ОбъектДляЗаписи.НазначениеПлатежа), "код");
				Если НачалоПТС <> 0 Тогда
					СтрокаДляПоиска = Сред(НРег(ОбъектДляЗаписи.НазначениеПлатежа),НачалоПТС);
					КонецПТС 	= Найти(СтрокаДляПоиска, "г.");
					Если КонецПТС <> 0 Тогда
						НомерПТС = Сред(СтрокаДляПоиска, 4, КонецПТС - 4);
						
						ОбъектДляЗаписи.Самоинкассация 	= Истина;
						ОбъектДляЗаписи.НомерПТК 		= НомерПТС;
						
					КонецЕсли;
				КонецЕсли;	
				
				

			КонецЕсли;	
			
			ДатаСтрокой = "";
			
			НачалоПТС	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "зачисление за ");
			КонецПТС 	= Найти(ОбъектДляЗаписи.НазначениеПлатежа, "г  НДС не облагается");
			Если НачалоПТС <> 0
				И КонецПТС <> 0 Тогда
				ДатаСтрокой = Сред(ОбъектДляЗаписи.НазначениеПлатежа, НачалоПТС + 14, КонецПТС - НачалоПТС - 14);
			КонецЕсли;

			
			//---АК POZM 
			
			ДатаИнкассации=Дата(1,1,1);
			Если ДатаСтрокой = "" Тогда
				ДатаСтрокой = Лев(ОбъектДляЗаписи.НазначениеПлатежа,10);
			КонецЕсли;	
			Попытка
				ДатаИнкассации = Дата(Число(Прав(ДатаСтрокой,4)),Сред(ДатаСтрокой,4,2),Лев(ДатаСтрокой,2));
			Исключение
				
			КонецПопытки;	
			
			//Если ОбъектДляЗаписи.Самоинкассация Тогда
			//	ОбъектДляЗаписи.Дата = ДатаВыписки;
			//	// Решили сводно грузить, а так как документов не много, пока без кэша
			//	Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			//		ТекстЗапроса =
			//		"ВЫБРАТЬ
			//		|	ПоступлениеВБанк.Ссылка
			//		|ИЗ
			//		|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
			//		|ГДЕ
			//		|	НАЧАЛОПЕРИОДА(ПоступлениеВБанк.Дата, ДЕНЬ) = &ДатаВыписки
			//		|	И НЕ ПоступлениеВБанк.ПометкаУдаления
			//		|	И ПоступлениеВБанк.Контрагент = &Контрагент
			//		|	И ПоступлениеВБанк.Организация = &Организация
			//		|	И ПоступлениеВБанк.НомерПТК = &НомерПТК";
			//		Запрос = Новый Запрос(ТекстЗапроса);		 
			//		Запрос.УстановитьПараметр("ДатаВыписки"	, ДатаВыписки);
			//		Запрос.УстановитьПараметр("Организация"	, ОбъектДляЗаписи.Организация);
			//		Запрос.УстановитьПараметр("Контрагент"	, ОбъектДляЗаписи.Контрагент);
			//		Запрос.УстановитьПараметр("НомерПТК"	, ОбъектДляЗаписи.НомерПТК);
			//		Выборка = Запрос.Выполнить().Выбрать();
			//		Если Выборка.Следующий() Тогда
			//			Док = Выборка.Ссылка.ПолучитьОбъект();
			//			Для Каждого Стр ИЗ ОбъектДляЗаписи.Инкассация Цикл
			//				НоваяСтрока = Док.Инкассация.Добавить();
			//				НоваяСтрока.ДокументРасхода = Стр.ДокументРасхода;
			//				НоваяСтрока.Сумма 			= Стр.Сумма;
			//			КонецЦикла;	
			//			СтрокиВыписки = Док.СоставДокументовИнкассации.НайтиСтроки(Новый Структура("НомерВходящегоДокумента,Дата",ОбъектДляЗаписи.НомерВходящегоДокумента,ДатаИнкассации));
			//			//Если СтрокиВыписки.Количество()=0 Тогда
			//			//	СтрокиВыписки = Док.СоставДокументовИнкассации.НайтиСтроки(Новый Структура("НомерВходящегоДокумента",ОбъектДляЗаписи.НомерВходящегоДокумента));
			//			//КонецЕсли;	
			//			Если СтрокиВыписки.Количество()=0 Тогда
			//				СтрокаВыписки = Док.СоставДокументовИнкассации.Добавить();
			//				СтрокаВыписки.НомерВходящегоДокумента 	= ОбъектДляЗаписи.НомерВходящегоДокумента;
			//				СтрокаВыписки.Сумма 					= ОбъектДляЗаписи.СуммаДокумента;
			//				СтрокаВыписки.Дата = ДатаИнкассации;
			//				Док.СуммаДокумента = Док.СуммаДокумента + ОбъектДляЗаписи.СуммаДокумента;
			//			Иначе
			//				СтрокаВыписки = СтрокиВыписки[0];
			//				Док.СуммаДокумента = Док.СуммаДокумента + ОбъектДляЗаписи.СуммаДокумента-СтрокаВыписки.Сумма;
			//				СтрокаВыписки.Сумма = ОбъектДляЗаписи.СуммаДокумента;
			//			КонецЕсли;	
			//			
			//			Док.ЗаполнитьРасходникиАвтоматически(Док);
			//			Док.Записать(РежимЗаписиДокумента.Проведение);
			//			Сообщить("Дополнен " + Док);
			//			СтрокаСекции.Проведен = Док.проведен;
			//			Возврат;
			//			//+++АК POZM 2017.10.28 ИП-00016987 	
			//		Иначе
			//			СтрокаВыписки = ОбъектДляЗаписи.СоставДокументовИнкассации.Добавить();
			//			СтрокаВыписки.НомерВходящегоДокумента 	= ОбъектДляЗаписи.НомерВходящегоДокумента;
			//			СтрокаВыписки.Сумма 					= ОбъектДляЗаписи.СуммаДокумента;
			//			СтрокаВыписки.Дата = ДатаИнкассации;
			//		КОнецЕсли;	
			//		//---АК POZM 
			//	КонецЕсли;			 
			//КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Сообщить(?(ЭтоНовыйДокумент, "Создан ", "Перезаписан ") + ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи) + ".");
			
		Исключение
			
			НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ?(ЭтоНовыйДокумент," не создан"," не записан") +
			"! Произошли ошибки при записи!", СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если Проводить
			И (ОбъектМодифицирован
				ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(?(ОбъектПроведен, "Перепроведен ", "Проведен ") + НазваниеОбъекта, СтатусСообщения.Обычное);
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
		Исключение
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не проведен! Произошли ошибки при проведении!", СтатусСообщения.Важное);
		КонецПопытки;
		
		//+++АК LAGP 2018.11.13 б/н Иногда документ остаётся непроведенным без исключения в попытке (конфликт блокировок)
		Если ОбъектДляЗаписи.Проведен И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.Ссылка, "Проведен") И НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref") = "IzbenkaFin" Тогда
			СтруктураНовогоПисьма = Новый Структура;
			Кому = Новый СписокЗначений;
			Кому.Добавить("finmanager@izbenka.msk.ru"); // Полухонова Юлия
			Кому.Добавить("buh45@vkusvill.ru"); 		// Шеронова Юлия
			Кому.Добавить("lagp@automacon.ru");
			
			СтруктураНовогоПисьма.Вставить("Кому", Кому);
			СтруктураНовогоПисьма.Вставить("Тема", "При загрузке в клиент-банке, документ остался не проведенным!");
			СтруктураНовогоПисьма.Вставить("Тело", "Документ: " + ОбъектДляЗаписи.Ссылка + Символы.ПС + "Инициатор загрузки: " + ПараметрыСеанса.ТекущийПользователь);
			ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		КонецЕсли;			
		//---АК LAGP
		
		//+++АК LAGP 2018.10.31 ИП-00019645 Выдача займа Контрагенту-поставщику по условию/возврат в срок
		Если СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен И НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref") = "IzbenkaFin"
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.ДоговорКонтрагента, "ВидДоговора") = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Финансовый")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.ДоговорКонтрагента, "ТипДоговораФинансы") = ПредопределенноеЗначение("Перечисление.ТипыДоговоровФинансы.Займ")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляЗаписи.ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств") = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310310") Тогда //Возврат займов
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("Контрагент", ОбъектДляЗаписи.Контрагент);
			СтруктураДополнительныхПараметров.Вставить("ДоговорКонтрагента", ОбъектДляЗаписи.ДоговорКонтрагента);
			СтруктураДополнительныхПараметров.Вставить("СуммаДокумента", ОбъектДляЗаписи.СуммаДокумента);
			СтруктураДополнительныхПараметров.Вставить("Событие", "ПроведениеИзКлиентБанка");
			СтруктураДополнительныхПараметров.Вставить("Тема", "Возврат ДС по договору займа " + ОбъектДляЗаписи.ДоговорКонтрагента);
			СтруктураДополнительныхПараметров.Вставить("Тело", "Проведён возврат ДС по договору займа: " + ОбъектДляЗаписи.ДоговорКонтрагента + Символы.ПС + "Контрагент - " + ОбъектДляЗаписи.Контрагент + Символы.ПС + "Сумма документа - " + ОбъектДляЗаписи.СуммаДокумента);
	
			Справочники.Контрагенты.УведомитьОтветственныхОВозвратеЗайма(СтруктураДополнительныхПараметров); //рассылка письма
		КонецЕсли;
		//---АК LAGP 
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	ЗапросПоиска.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
	Иначе
		Возврат глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
КонецФункции

Функция НайтиФизлицоВНазначенииПлатежа(НазначениеПлатежа, ИНН = Неопределено)
	
	//+++АК LAGP 2018.04.06 ИП-00018263 Добавлена проверка на принадлежности к физ.лицам
	Если ЗначениеЗаполнено(ИНН) Тогда
		//Проверка что точно не контрагент
		НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
		Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//Сначала будет поиск по ИНН физ.лица
		НайденноеФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", ИНН);
		Если ЗначениеЗаполнено(НайденноеФизЛицо) Тогда
			Возврат НайденноеФизЛицо;
		КонецЕсли;
	КонецЕсли;	
	//---АК LAGP	
	
    //Если ничего не найдено, тогда поиск по вхождению наименования
	Для каждого Стр из КэшФизЛиц Цикл
		Если Найти(СтрЗаменить(ВРег(НазначениеПлатежа), " ", ""), СтрЗаменить(СокрЛП(ВРег(Стр.Наименование)), " ", "")) > 0 И СтрДлина(Стр.Наименование) > 5 Тогда   //+++АК LAGP 2018.03.02 Добавлено СтрЗаменить, убирающая пробелы, т.к. в назначении без пробелов
			Возврат Стр.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	
КонецФункции	

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящего(ОбъектДокумента, ИсходныеДанные)
	
//Организация, ДАТА, НОМЕР 
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		Списано = ИсходныеДанные.Списано;
	Иначе
		Списано = ПолучитьДатуИзСтроки("00010101", ИсходныеДанные.Дата);
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "Организация"	, ЭтотОбъект.Организация);
	УстановитьСвойство(ОбъектДокумента, "Дата"			, Списано);
//	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.Номер);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.ДатаСписано) Тогда
		УстановитьСвойство(ОбъектДокумента, "Оплачено"	, Истина, Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", НачалоДня(ПолучитьДатуИзСтроки("00010101", ИсходныеДанные.ДатаСписано))	, Истина);
	ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Оплачено"	, Истина, Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", НачалоДня(ПолучитьДатуИзСтроки("00010101", ИсходныеДанные.Дата))			, Истина);
	КонецЕсли;	
	

	Если ОбъектДокумента.ЭтоНовый() Тогда
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		ОбъектДокумента.НомерВходящегоДокумента = ИсходныеДанные.Номер;
		//Если Не ОбщегоНазначения.ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
		//	ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧН=; ЧГ=0");
		//	ДлинаОкончания = СтрДлина(ОкончаниеНомера);
		//	ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
		//	Если ДлинаОкончания < 3 Тогда
		//		ДлинаОкончания = 3;
		//	КонецЕсли;
		//	//ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
		//	
		//КонецЕсли;
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	Если НЕ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент"		, ИсходныеДанные.Контрагент);
		УстановитьСвойство(ОбъектДокумента, "ДоговорКонтрагента", ИсходныеДанные.ДоговорКонтрагента);
	КонецЕсли;
	//Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
	//	СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	//Иначе
	//	СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	//КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = Истина;//ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	//УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
			УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом		= Неопределено;
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ	= Неопределено;
		КонецЕсли;	
	КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		//ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	//КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	Если НЕ ТипЗнч(ИсходныеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	КонецЕсли;
	
//ВалютаДокумента,ВалютаВзаиморасчетовРаботника
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	//Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
	//	УстановитьСвойство(ОбъектДокумента, "ВалютаВзаиморасчетовРаботника", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	//	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств, ОбъектДокумента.Дата);
	//	УстановитьСвойство(ОбъектДокумента, "СуммаВзаиморасчетов", ИсходныеДанные.СуммаДокумента);
	//	УстановитьСвойство(ОбъектДокумента, "КурсВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Курс);
	//	УстановитьСвойство(ОбъектДокумента, "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
	//КонецЕсли;
	
//ТекстПлательщика, ТекстПолучателя, ИННПлательщика, КПППлательщика,ИННПолучателя,КПППолучателя
	Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
		ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	Иначе
		ТекстПлательщика = ИсходныеДанные.Плательщик1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
		ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	Иначе
		ТекстПолучателя = ИсходныеДанные.Получатель1;
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "ТекстПлательщика"	, ТекстПлательщика);
	УстановитьСвойство(ОбъектДокумента, "ТекстПолучателя"	, ТекстПолучателя);
	УстановитьСвойство(ОбъектДокумента, "ИННПлательщика"	, ИсходныеДанные.ПлательщикИНН);
	УстановитьСвойство(ОбъектДокумента, "КПППлательщика"	, ИсходныеДанные.ПлательщикКПП);
	УстановитьСвойство(ОбъектДокумента, "ИННПолучателя"		, ИсходныеДанные.ПолучательИНН);
	УстановитьСвойство(ОбъектДокумента, "КПППолучателя"		, ИсходныеДанные.ПолучательКПП);		
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации, ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу);
	УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредствБУ", ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ИсходныеДанные.СтатьяДДС,ИсходныеДанные.ВидОперации));
//СтатусСоставителя и реквизиты налогового платежа: КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа 
	Если ЗначениеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
		УстановитьСвойство(ОбъектДокумента, "СтатусСоставителя"		, ИсходныеДанные.СтатусСоставителя);
		УстановитьСвойство(ОбъектДокумента, "КодБК"					, ИсходныеДанные.ПоказательКБК);
		УстановитьСвойство(ОбъектДокумента, "КодОКАТО"				, ИсходныеДанные.ОКАТО);
		УстановитьСвойство(ОбъектДокумента, "ПоказательОснования"	, ИсходныеДанные.ПоказательОснования);
		УстановитьСвойство(ОбъектДокумента, "ПоказательПериода"		, ИсходныеДанные.ПоказательПериода);
		УстановитьСвойство(ОбъектДокумента, "ПоказательНомера"		, ИсходныеДанные.ПоказательНомера);
		УстановитьСвойство(ОбъектДокумента, "ПоказательДаты"		, ИсходныеДанные.ПоказательДатыДок);
		УстановитьСвойство(ОбъектДокумента, "ПоказательТипа"		, ИсходныеДанные.ПоказательТипа);
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "ИдентификаторПлатежа", ИсходныеДанные.Код);

//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, Истина);
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		//ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		//
		//СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		//Если ИсходныеДанные.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		//	ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
		//КонецЕсли;
		Ставка = ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные.НазначениеПлатежа);
		Если Ставка = Неопределено
				И ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка  Тогда
			ОбъектДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			ОбъектДокумента.СтавкаНДС = Ставка;
		КонецЕсли;	
		
		Если ТипЗнч(ОбъектДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СтавкаНДС) Тогда
				ОбъектДокумента.СтавкаНДС 	= ОбъектДокумента.ДоговорКонтрагента.СтавкаНДС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СтавкаНДС) Тогда
				ОбъектДокумента.СтавкаНДС = ОбъектДокумента.Контрагент.СтавкаНДС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СтавкаНДС) Тогда
				ОбъектДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			ЗначениеСтавкиНДС     		= УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
			ОбъектДокумента.СуммаНДС 	= ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		КонецЕсли;
	КонецЕсли;
	
	
	//Определим СчетУчетаРасчетовСКонтрагентом
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита Тогда
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПрочиеЗаймыВыданные;
		ОбъектДокумента["СубконтоДт1"] = ОбъектДокумента.Контрагент;
		ОбъектДокумента["СубконтоДт2"] = ОбъектДокумента.ДоговорКонтрагента;
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("55.03");
		
		//+++АК LAGP 2018.04.24 Письмо Рустема Статья должна быть "Депозиты", а не "% по эквайрингу"
		//ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901049");
		ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("000000011");		
		//---АК LAGP
		
	ИначеЕсли ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику И Найти(СтрЗаменить(НРег(ИсходныеДанные.НазначениеПлатежа)," ",""), "агентавалютногоконтроля") > 0 Тогда
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
		ОбъектДокумента["СубконтоДт1"] = ОбъектДокумента.Организация;
		ОбъектДокумента["СубконтоДт2"] = ОбъектДокумента.Контрагент;
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");	
		ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");	
	КонецЕсли;	
	Если ЗначениеЗаполнено(ОбъектДокумента.СтатьяДвиженияДенежныхСредств)
			И НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
			ЗапросДДС = Новый Запрос;
			ЗапросДДС.УстановитьПараметр("СтатьяДДС", ОбъектДокумента.СтатьяДвиженияДенежныхСредств);
			ЗапросДДС.Текст =
			//+++АК SUVV 2018.02.28 ИП-00017941
			//"ВЫБРАТЬ
			//|	СоответствияСтатейСчетов.Счет,
			//|	СоответствияСтатейСчетов.СтатьяДР
			//|ИЗ
			//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
			//|ГДЕ
			//|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС";
			"ВЫБРАТЬ
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
			|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
			|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
			|ИЗ
			|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияСтатейСчетов.Счет,
			|	СоответствияСтатейСчетов.СтатьяДР
			|ИЗ
			|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
			|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
			|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
			ЗапросДДС.УстановитьПараметр("ВыбДата", ОбъектДокумента.Дата);
			//---АК SUVV
			Выборка = ЗапросДДС.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Счет  = Выборка.Счет;
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет ;
			
			ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				Если ТипСубк.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					Если ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.Организация;
					ИначеЕсли ИсходныеДанные.ВидОперации<>Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.Контрагент.Организация;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
					ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.СтатьяДвиженияДенежныхСредств;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДоходовРасходов")) Тогда
					ОбъектДокумента["СубконтоДт" + Сч] = Выборка.СтатьяДР;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.Контрагент;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
					Если ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.СчетОрганизации;
					ИначеЕсли ИсходныеДанные.ВидОперации<>Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.Контрагент.Организация.ОсновнойБанковскийСчет;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтруктурныеЕдиницы")) Тогда
					Если ОбъектДокумента.СтатьяДвиженияДенежныхСредств.Код = "139391" Тогда //Оплата услуг банка (прочие постоянные затраты)
						Если ОбъектДокумента.Организация.ИНН = "7734641716" Тогда //Проект Избенка
							ОбъектДокумента["СубконтоДт" + Сч] = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все		
						ИначеЕсли ОбъектДокумента.Организация.ИНН = "7734675810" Тогда //Вкусвилл
							ОбъектДокумента["СубконтоДт" + Сч] = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_67"); //Вкусвилл (общий)
						Иначе
							ОбъектДокумента["СубконтоДт" + Сч] = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_66"); //Избенка (общий)
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница) Тогда
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
					Иначе
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.ДоговорКонтрагента.ТорговаяТочка;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
						ОбъектДокумента["СубконтоДт" + Сч] = ОбъектДокумента.Контрагент;
					Иначе	
						ОбъектДокумента["СубконтоДт" + Сч] = НайтиФизлицоВНазначенииПлатежа(ИсходныеДанные.НазначениеПлатежа);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Предопределенные
	Если ОбъектДокумента.СтатьяДвиженияДенежныхСредств.Код = "139391" Тогда //Оплата услуг банка (прочие постоянные затраты)
		ОбъектДокумента.ЦФО 		= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"); //Управление исполнительное
		ОбъектДокумента.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"); //Управление исполнительное
	КонецЕсли;
	
	
//Подразделение
//	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//ОчередностьПлатежа, ВидПлатежа, ПеречислениеВБюджет, ВидПеречисленияВБюджет
	УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.ОчередностьПлатежа);
	УстановитьСвойство(ОбъектДокумента, "ВидПлатежа"		, ИсходныеДанные.ВидПлатежа);
	Если ЗначениеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
		УстановитьСвойство(ОбъектДокумента, "ПеречислениеВБюджет", Истина);
		Если ИсходныеДанные.СтатусСоставителя = "08" Тогда
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
		ИначеЕсли ИсходныеДанные.СтатусСоставителя = "06" 
				ИЛИ (ИсходныеДанные.СтатусСоставителя >= "16"
						И ИсходныеДанные.СтатусСоставителя <= "20") Тогда
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж);
		Иначе
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж);
		КонецЕсли;
	КонецЕсли;
	
//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
	Иначе
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина);
	
//Счета учета расчетов с контрагентом			
	//Если ОбъектДокумента.ЭтоНовый() Тогда
	//	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ОбъектДокумента,глЗначениеПеременной("глТекущийПользователь"),ЛОЖЬ);
	//КонецЕсли;
	
	//+++ ZICD ИП-00014983 21.02.2017
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ЗаполнитьРеквизитыНалоговогоПлатежа(ОбъектДокумента, ИсходныеДанные);
	КонецЕсли;
	//---
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящего(ОбъектДокумента, ИсходныеДанные)
	
	//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация"				, Организация);
	
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента"	, ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента"	, ИсходныеДанные.ДатаДок);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
	//Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
	//	УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);			
	//КонецЕсли;
	
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	//Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
	//	СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	//Иначе
	//	СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	//КонецЕсли;
	//ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	//УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	//Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	//КонецЕсли;

//СчетОрганизации,СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	Если НЕ ТипЗнч(ИсходныеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	КонецЕсли;
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
			
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		//ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
//		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
//		РассчитатьКурсИСуммуВзаиморасчетов(ОбъектДокумента, ПолучитьВалютуДоговора(ОбъектДокумента.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		ОбъектДокумента.СтавкаНДС=ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные.НазначениеПлатежа);
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
		ОбъектДокумента.СуммаНДС = ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СтавкаНДС) Тогда
			Если НалоговыйУчетУСН.ПрименениеУСН(Организация, ИсходныеДанные.ДатаДок) Тогда
				ОбъектДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбъектДокумента.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
				ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
				ОбъектДокумента.СуммаНДС = ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации, Истина);
	
	УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредствБУ", ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ИсходныеДанные.СтатьяДДС, ИсходныеДанные.ВидОперации));
		
//Подразделение
//	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
	Иначе
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина);
	
	
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
			И ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010")
			И НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("62.1");
		ОбъектДокумента.СубконтоКт1 = ОбъектДокумента.Организация;
		ОбъектДокумента.СубконтоКт2 = ОбъектДокумента.Контрагент;
	КонецЕсли;	
	
	//Определим СчетУчетаРасчетовСКонтрагентом
	
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозита Тогда
		//+++АК sils 21.05.2018 по письму от Юлии Полухоновой
		ОбъектДокумента.ДоговорКонтрагента = ИсходныеДанные.ДоговорКонтрагента;
		//---АК
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПрочиеЗаймыВыданные;
		ОбъектДокумента["СубконтоКт1"] = ОбъектДокумента.Контрагент;
		ОбъектДокумента["СубконтоКт2"] = ОбъектДокумента.ДоговорКонтрагента;
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("55.03");
		ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901025");
	ИначеЕсли ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеПроцентовПоДепозиту Тогда
		//+++АК sils 21.05.2018 по письму от Юлии Полухоновой
		ОбъектДокумента.ДоговорКонтрагента = ИсходныеДанные.ДоговорКонтрагента;
		//---АК
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПрочиеЗаймыВыданные;
		ОбъектДокумента["СубконтоКт1"] = ОбъектДокумента.Контрагент;
		ОбъектДокумента["СубконтоКт2"] = ОбъектДокумента.ДоговорКонтрагента;
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.03");
		ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000017");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ОбъектДокумента.СтатьяДвиженияДенежныхСредств)
			И НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ЗапросДДС = Новый Запрос;
		ЗапросДДС.УстановитьПараметр("СтатьяДДС", ОбъектДокумента.СтатьяДвиженияДенежныхСредств);
		ЗапросДДС.Текст =
		//+++АК SUVV 2018.02.28 ИП-00017941
		//"ВЫБРАТЬ
		//|	СоответствияСтатейСчетов.Счет,
		//|	СоответствияСтатейСчетов.СтатьяДР
		//|ИЗ
		//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		//|ГДЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС";
		"ВЫБРАТЬ
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
		|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияСтатейСчетов.Счет,
		|	СоответствияСтатейСчетов.СтатьяДР
		|ИЗ
		|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
		|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
		
		ЗапросДДС.УстановитьПараметр("ВыбДата", ОбъектДокумента.Дата);
		//---АК SUVV
		Выборка = ЗапросДДС.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Счет  = Выборка.Счет;
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет ;
			
			ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				Если ТипСубк.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
							ИЛИ ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Организация;
					ИначеЕсли (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
							И ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Организация;
					Иначе
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СтатьяДвиженияДенежныхСредств;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДоходовРасходов")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = Выборка.СтатьяДР;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
					Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
							ИЛИ НЕ ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СчетОрганизации;
					ИначеЕсли (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
							И ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СчетОрганизации;
					Иначе
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация.ОсновнойБанковскийСчет;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтруктурныеЕдиницы")) Тогда	
					ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.ТорговаяТочка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
//Счета учета расчетов с контрагентом			
	//Если ОбъектДокумента.ЭтоНовый() Тогда
	//	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ОбъектДокумента,глЗначениеПеременной("глТекущийПользователь"),ЛОЖЬ);
	//КонецЕсли;
	
	//sstuman
	//Определим реквизиты БУ
	ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	//ОбъектДокумента.УстановитьСчетаУчетаБУ();
	//sstuman

	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя
			ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя
			ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора
			ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора Тогда
		 
		 ОбъектДокумента.ПериодРегистрации = ОпределитьМесяцИзНазначенияПлатежа(НазначениеПлатежа);
		 
		 //Если ОбъектДокумента.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора или
		 //		ОбъектДокумента.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора Тогда
		 //		ОбъектДокумента.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010");
		 //КонецЕсли;
		 Если ЗначениеЗаполнено(ИсходныеДанные.ИсходныйДокумент)
			 	И НЕ ЗначениеЗаполнено(ОбъектДокумента.ПериодРегистрации) Тогда
			 ОбъектДокумента.ПериодРегистрации = ИсходныеДанные.ИсходныйДокумент.ПериодРегистрации;
		 КонецЕсли;	 
	 КонецЕсли;
	//АК БЕЛН 06.03.2017+
	Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств) И 
		ОбъектДокумента.Контрагент=Справочники.Контрагенты.НайтиПоКоду("Т00001070")Тогда
		//Попытка
			
			//Запрос = Новый Запрос;
			//Запрос.Текст = 
			//	"ВЫБРАТЬ
			//	|	ОсновныеДоговораКонтрагентовСрезПоследних.ДоговорКонтрагента.Номер Как Номер
			//	|ИЗ
			//	|	РегистрСведений.ОсновныеДоговораКонтрагентов.СрезПоследних(
			//	|			&Дата,
			//	|			Организация = &Организация
			//	|				И Контрагент = &Контрагент
			//	|				И ВидДоговора = &ВидДоговора) КАК ОсновныеДоговораКонтрагентовСрезПоследних";

			//Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			//Запрос.УстановитьПараметр("Дата", ОбъектДокумента.Дата);
			//Запрос.УстановитьПараметр("Контрагент", ОбъектДокумента.Контрагент);
			//Запрос.УстановитьПараметр("Организация", ОбъектДокумента.Организация);

			//Результат = Запрос.Выполнить();

			//ВыборкаДетальныеЗаписи = Результат.Выбрать();

			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номер) Тогда
			//		Продолжить;
			//	КонецЕсли; 
			//	
			Если Найти(ОбъектДокумента.НазначениеПлатежа,"02-15")>0 Тогда
					ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя; 
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Финансовый.НайтиПоКоду("62.1");
					ОбъектДокумента.СубконтоКт1 = ОбъектДокумента.Организация;
					ОбъектДокумента.СубконтоКт2 = ОбъектДокумента.Контрагент;
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
					ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
					ОбъектДокумента.СтавкаНДС=Перечисления.СтавкиНДС.НДС10;
					//ОбъектДокумента.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата от покупателей");
					//Познахарёв исправил
					ОбъектДокумента.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101");
					ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ=Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоНаименованию("Поступление от покупателей");
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
					ОбъектДокумента.СуммаНДС = ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
				КонецЕсли; 
		//	КонецЦикла;
		//Исключение
		//
		//КонецПопытки;
	
	КонецЕсли; 
	//АК БЕЛН 06.03.2017-
КонецПроцедуры


Процедура ЗаполнитьРеквизитыШапкиСписаниеСКорпоративныхКарт(ОбъектДокумента, ИсходныеДанные)
	
	// Организация, ДАТА, НОМЕР 
	//Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		//Списано = ИсходныеДанные.Списано;
	Если ЗначениеЗаполнено(ИсходныеДанные.ДатаДок) Тогда
		Списано = ИсходныеДанные.ДатаДок;
	Иначе
		Списано = ПолучитьДатуИзСтроки("00010101", ИсходныеДанные.Дата);
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "Организация"	, Организация);
	УстановитьСвойство(ОбъектДокумента, "Дата"			, Списано);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Контрагент"		, ИсходныеДанные.Контрагент);

	Если НЕ ТипЗнч(ИсходныеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "ВидОперации"		, ИсходныеДанные.ВидОперации);

	Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
		ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	Иначе
		ТекстПлательщика = ИсходныеДанные.Плательщик1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
		ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	Иначе
		ТекстПолучателя = ИсходныеДанные.Получатель1;
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "ТекстПлательщика"	, ТекстПлательщика);
	УстановитьСвойство(ОбъектДокумента, "ТекстПолучателя"	, ТекстПолучателя);
	УстановитьСвойство(ОбъектДокумента, "ИННПлательщика"	, ИсходныеДанные.ПлательщикИНН);
	УстановитьСвойство(ОбъектДокумента, "КПППлательщика"	, ИсходныеДанные.ПлательщикКПП);
	УстановитьСвойство(ОбъектДокумента, "ИННПолучателя"		, ИсходныеДанные.ПолучательИНН);
	УстановитьСвойство(ОбъектДокумента, "КПППолучателя"		, ИсходныеДанные.ПолучательКПП);		

	//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента"	, ИсходныеДанные.СуммаДокумента, Истина);
	
	//+++АК LAGP 2018.02.21 ИП-00017918 Поиск счетов для открытия корп.карты через новую функцию. (счета сменились) 
	//УстановитьСвойство(ОбъектДокумента, "СчетУчетаБУ"		, ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета);
	УстановитьСвойство(ОбъектДокумента, "СчетУчетаБУ"		, ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", Списано)));
	//---АК LAGP	
	
	УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредствБУ", Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000026"));
	УстановитьСвойство(ОбъектДокумента, "Автор"				, ПараметрыСеанса.ТекущийПользователь);
	
	Если СокрЛП(ОбъектДокумента.Комментарий) = "" Тогда
		УстановитьСвойство(ОбъектДокумента, "Комментарий"	, "Загружен из Клиент-Банка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасшифровкуПлатежаСписаниеСКорпоративныхКарт(ОбъектДокумента, ИсходныеДанные)
	
	НоваяСтрока = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеЗаполнено(ИсходныеДанные.ДатаСписано) Тогда
		УстановитьСвойство(НоваяСтрока, "Оплачено"	, Истина, Истина);
	ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.Дата) Тогда
		УстановитьСвойство(НоваяСтрока, "Оплачено"	, Истина, Истина);
	КонецЕсли;	
	
	НоваяСтрока.НомерВходящегоДокумента = ИсходныеДанные.Номер;
	
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
	Иначе
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсходныеДанные.СуммаДокумента) Тогда
		ПозицияТекста = Найти(НРег(НазначениеПлатежа), " по операциям с картой ");
		Если ПозицияТекста > 0 Тогда
			НоваяСтрока.Сумма = ИсходныеДанные.СуммаДокумента;
			ТекстКарты 	= Сред(НазначениеПлатежа, ПозицияТекста + 23, 16);
			
			//+++АК LAGP 2017.11.15 ИП-00017140
			//НоваяСтрока.НомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("НомерКорпоративнойКарты", ТекстКарты); //-было
			КорпКарта = НайтиКорпКарту(ТекстКарты);
			НоваяСтрока.НомерКорпоративнойКарты = КорпКарта;
			//---АК LAGP
			НоваяСтрока.Физлицо 				= НоваяСтрока.НомерКорпоративнойКарты.Физлицо;
            ТекстДаты 	= Сред(НазначениеПлатежа, ПозицияТекста + 43, 10);
			Попытка
				НоваяСтрока.ДатаТранзакции		= Дата(Число(Лев(ТекстДаты, 4)), Число(Сред(ТекстДаты, 5, 2)), Число(Прав(ТекстДаты, 2)));
			Исключение
			КонецПопытки;
			ПозицияТекста = Найти(НазначениеПлатежа, "Тип транзакции");
			Если ПозицияТекста > 0 Тогда
				НоваяСтрока.ТипТранзакции		= Сред(НазначениеПлатежа, ПозицияТекста + 15, 4);
			КонецЕсли;
		Иначе
			ПозицияТекста = Найти(НазначениеПлатежа, " с картой Visa Business ");
			Если ПозицияТекста > 0 Тогда
				НоваяСтрока.Сумма = ИсходныеДанные.СуммаДокумента;
				ТекстКарты 	= Сред(НазначениеПлатежа, ПозицияТекста + 24, 16);
				//+++АК LAGP 2017.11.15 ИП-00017140
				//НоваяСтрока.НомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("НомерКорпоративнойКарты", ТекстКарты); //-было
				КорпКарта = НайтиКорпКарту(ТекстКарты);
				НоваяСтрока.НомерКорпоративнойКарты = КорпКарта;
				//---АК LAGP
				НоваяСтрока.Физлицо 				= НоваяСтрока.НомерКорпоративнойКарты.Физлицо;
	            ТекстДаты 	= Сред(НазначениеПлатежа, ПозицияТекста + 44, 10);
				Попытка
					НоваяСтрока.ДатаТранзакции		= Дата(Число(Прав(ТекстДаты, 4)), Число(Сред(ТекстДаты, 4, 2)), Число(Лев(ТекстДаты, 2)));
				Исключение
				КонецПопытки;
				ПозицияТекста = Найти(НазначениеПлатежа, "Тип транзакции");
				Если ПозицияТекста > 0 Тогда
					НоваяСтрока.ТипТранзакции		= Сред(НазначениеПлатежа, ПозицияТекста + 15, 4);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ОчередностьПлатежа, ВидПлатежа
	УстановитьСвойство(НоваяСтрока, "ОчередностьПлатежа", ИсходныеДанные.ОчередностьПлатежа);
	УстановитьСвойство(НоваяСтрока, "ВидПлатежа"		, "Электронно");
	
	//НазначениеПлатежа
	УстановитьСвойство(НоваяСтрока, "НазначениеПлатежа"	, НазначениеПлатежа, Истина);
	
КонецПроцедуры


//пмм
Процедура ЗаполнитьСтрокуРеквизитыДляЭквайринга(НомерСтроки, ИсходныеДанные)
	
	
	//ТекущаяСтрокаЭквайринга=СводныйПриходЭквайринг.ЭквайрингРасшифровка[номерСтроки];
	ТекущаяСтрокаЭквайринга = ТЗСводногоПрихода[номерСтроки];
	
	ТекущаяСтрокаЭквайринга.Дата					= ИсходныеДанные.ДатаДок;
	ТекущаяСтрокаЭквайринга.НомерВходящегоДокумента	= ИсходныеДанные.НомерДок;
	ТекущаяСтрокаЭквайринга.ДатаВходящегоДокумента	= ИсходныеДанные.ДатаДок;
	
	ТекущаяСтрокаЭквайринга.СуммаДокумента 			= ИсходныеДанные.СуммаПоступило;
	
	Если НомерСтроки = 0 Тогда
		
		УстановитьСвойство(СводныйПриходЭквайринг, "Контрагент"						, ИсходныеДанные.Контрагент		, Истина);
		УстановитьСвойство(СводныйПриходЭквайринг, "СтатьяДвиженияДенежныхСредств"	, ИсходныеДанные.СтатьяДДС		, Истина);
		УстановитьСвойство(СводныйПриходЭквайринг, "СтатьяДвиженияДенежныхСредствБУ", ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ИсходныеДанные.СтатьяДДС, СводныйПриходЭквайринг.ВидОперации));
		УстановитьСвойство(СводныйПриходЭквайринг, "СчетОрганизации"				, ИсходныеДанные.СчетОрганизации, Истина);
		Если НЕ ТипЗнч(ИсходныеДанные.СчетКонтрагента) = Тип("Строка") Тогда
			УстановитьСвойство(СводныйПриходЭквайринг, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
		КонецЕсли;
		УстановитьСвойство(СводныйПриходЭквайринг, "ВалютаДокумента", СводныйПриходЭквайринг.СчетОрганизации.ВалютаДенежныхСредств, Истина);
		УстановитьСвойство(СводныйПриходЭквайринг, "Ответственный"	, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"), Истина);
		
	//НазначениеПлатежа
		Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
			НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
			Для й = 2 По 6 Цикл
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
					Прервать;
				КонецЕсли;
				НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
			КонецЦикла;
		Иначе
			НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		КонецЕсли;
	//ТекущаяСтрокаЭквайринга.НазначениеПлатежа = НазначениеПлатежа;
	
	
	//Определим СчетУчетаРасчетовСКонтрагентом
	//Счет  = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03");
	//СводныйПриходЭквайринг.СчетУчетаРасчетовСКонтрагентом = Счет ;
		ОбъектДокумента = СводныйПриходЭквайринг;
		//Определим СчетУчетаРасчетовСКонтрагентом
		Если ЗначениеЗаполнено(ОбъектДокумента.СтатьяДвиженияДенежныхСредств)
				И НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
			ЗапросДДС = Новый Запрос;
			ЗапросДДС.УстановитьПараметр("СтатьяДДС", ОбъектДокумента.СтатьяДвиженияДенежныхСредств);
			ЗапросДДС.Текст =
			//+++АК SUVV 2018.02.28 ИП-00017941
			//"ВЫБРАТЬ
			//|	СоответствияСтатейСчетов.Счет,
			//|	СоответствияСтатейСчетов.СтатьяДР
			//|ИЗ
			//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
			//|ГДЕ
			//|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС";
			"ВЫБРАТЬ
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
			|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
			|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
			|ИЗ
			|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияСтатейСчетов.Счет,
			|	СоответствияСтатейСчетов.СтатьяДР
			|ИЗ
			|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
			|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
			|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
			ЗапросДДС.УстановитьПараметр("ВыбДата", ИсходныеДанные.ДатаДок);
			//---АК SUVV
			Выборка = ЗапросДДС.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Счет  = Выборка.Счет;
				ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет ;
				
				ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
				
				Для Сч = 1 По ЧислоАктивныхСубконто Цикл
					ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
					Если ТипСубк.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
						Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
								ИЛИ НЕ ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
							//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
							ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Организация;
						Иначе
							ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация;
						КонецЕсли;
					ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СтатьяДвиженияДенежныхСредств;
					ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДоходовРасходов")) Тогда
						ОбъектДокумента["СубконтоКт" + Сч] = Выборка.СтатьяДР;
					ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент;
					ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
						Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
								ИЛИ НЕ ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
							//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
							ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СчетОрганизации;
						Иначе
							ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация.ОсновнойБанковскийСчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НалоговыйУчетУСН.ПрименениеУСН(Организация, ИсходныеДанные.ДатаДок) Тогда
				ОбъектДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбъектДокумента.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
				ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
				ОбъектДокумента.СуммаНДС = ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;

		СводныйПриходЭквайринг.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРеквизитыДляЭквайрингаРасход(НомерСтроки, ИсходныеДанные)
	
	//ТекущаяСтрокаЭквайринга=СводныйРасходЭквайринг.ЭквайрингРасшифровка[номерСтроки];
	ТекущаяСтрокаЭквайринга = ТЗСводногоРасхода[НомерСтроки];
	ТекущаяСтрокаЭквайринга.Дата					= ИсходныеДанные.ДатаДок;
	ТекущаяСтрокаЭквайринга.НомерВходящегоДокумента	= ИсходныеДанные.НомерДок;
	ТекущаяСтрокаЭквайринга.ДатаВходящегоДокумента	= ИсходныеДанные.ДатаДок;
	ТекущаяСтрокаЭквайринга.СуммаДокумента			= ИсходныеДанные.СуммаСписано;
    
	УстановитьСвойство(СводныйРасходЭквайринг, "Контрагент"						, ИсходныеДанные.Контрагент			, Истина);
	УстановитьСвойство(СводныйРасходЭквайринг, "СтатьяДвиженияДенежныхСредств"	, ИсходныеДанные.СтатьяДДС			, Истина);
	УстановитьСвойство(СводныйРасходЭквайринг, "СчетОрганизации"				, ИсходныеДанные.СчетОрганизации	, Истина);
	Если НЕ ТипЗнч(ИсходныеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		УстановитьСвойство(СводныйРасходЭквайринг, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	КонецЕсли;
	УстановитьСвойство(СводныйРасходЭквайринг, "ВалютаДокумента", СводныйРасходЭквайринг.СчетОрганизации.ВалютаДенежныхСредств, Истина);
	УстановитьСвойство(СводныйРасходЭквайринг, "Ответственный"	, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"), Истина);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
		ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	Иначе
		ТекстПлательщика = ИсходныеДанные.Плательщик1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
		ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	Иначе
		ТекстПолучателя = ИсходныеДанные.Получатель1;
	КонецЕсли;
	
	
	УстановитьСвойство(СводныйРасходЭквайринг, "ТекстПлательщика", ТекстПлательщика);
	УстановитьСвойство(СводныйРасходЭквайринг, "ТекстПолучателя", ТекстПолучателя);
	УстановитьСвойство(СводныйРасходЭквайринг, "ИННПлательщика"	, ИсходныеДанные.ПлательщикИНН);
	УстановитьСвойство(СводныйРасходЭквайринг, "КПППлательщика"	, ИсходныеДанные.ПлательщикКПП);
	УстановитьСвойство(СводныйРасходЭквайринг, "ИННПолучателя"	, ИсходныеДанные.ПолучательИНН);
	УстановитьСвойство(СводныйРасходЭквайринг, "КПППолучателя"	, ИсходныеДанные.ПолучательКПП);	
//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
	Иначе
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	КонецЕсли;
	СводныйРасходЭквайринг.НазначениеПлатежа = НазначениеПлатежа;
	
	
	//Определим СчетУчетаРасчетовСКонтрагентом
	//Счет  = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03");
	//СводныйРасходЭквайринг.СчетУчетаРасчетовСКонтрагентом = Счет ;
	ОбъектДокумента = СводныйРасходЭквайринг;
	//Определим СчетУчетаРасчетовСКонтрагентом
	Если ЗначениеЗаполнено(ОбъектДокумента.СтатьяДвиженияДенежныхСредств)
			И НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ЗапросДДС = Новый Запрос;
		ЗапросДДС.УстановитьПараметр("СтатьяДДС", ОбъектДокумента.СтатьяДвиженияДенежныхСредств);
		ЗапросДДС.Текст =
		//+++АК SUVV 2018.02.28 ИП-00017941
		//"ВЫБРАТЬ
		//|	СоответствияСтатейСчетов.Счет,
		//|	СоответствияСтатейСчетов.СтатьяДР
		//|ИЗ
		//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		//|ГДЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС";
		"ВЫБРАТЬ
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
		|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияСтатейСчетов.Счет,
		|	СоответствияСтатейСчетов.СтатьяДР
		|ИЗ
		|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
		|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
		ЗапросДДС.УстановитьПараметр("ВыбДата", ИсходныеДанные.ДатаДок);
		//---АК SUVV
		Выборка = ЗапросДДС.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Счет  = Выборка.Счет;
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет ;
			
			ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				Если ТипСубк.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
							ИЛИ НЕ ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Организация;
					Иначе
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация;
					КонецЕсли;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СтатьяДвиженияДенежныхСредств;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.СтатьиДоходовРасходов")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = Выборка.СтатьяДР;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент;
				ИначеЕсли ТипСубк.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
					Если (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
							ИЛИ НЕ ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						//ОбъектДокумента.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.СчетОрганизации;
					Иначе
						ОбъектДокумента["СубконтоКт" + Сч] = ОбъектДокумента.Контрагент.Организация.ОсновнойБанковскийСчет;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, ИсходныеДанные.ДатаДок) Тогда
		ОбъектДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ОбъектДокумента.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ОбъектДокумента.СтавкаНДС);
		ОбъектДокумента.СуммаНДС = ОбъектДокумента.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	КонецЕсли;

	СводныйРасходЭквайринг.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
КонецПроцедуры

//пмм.


Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, ТипДокумента, СтрокаСекции)
	
	Если ТипДокумента = "РасходИзБанка" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияИсходящего(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПоступлениеВБанк" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияВходящего(ОбъектДокумента, СтрокаСекции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКэшФизЛиц()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	
	КэшФизЛиц = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

//+++АК LAGP 2017.11.15 ИП-00017140 Создаем кэш корпоративных карт для дальнейшего поиска по номеру.
Процедура ЗаполнитьКэшКорпКарт()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КорпоративныеБанковскиеКарты.Ссылка КАК КорпКарта,
	|	КорпоративныеБанковскиеКарты.НомерКорпоративнойКарты
	|ИЗ
	|	Справочник.КорпоративныеБанковскиеКарты КАК КорпоративныеБанковскиеКарты";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	
	КэшКорпКарт = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры
//---АК LAGP

//+++АК LAGP 2017.11.15 ИП-00017140 Создаем кэш корпоративных карт для дальнейшего поиска по номеру.
Функция НайтиКорпКарту(НомерКорпКарты)
	
	Если КэшКорпКарт = Неопределено Тогда
		ЗаполнитьКэшКорпКарт(); //На всякий случай.	
	КонецЕсли;
	
	НайденнаяКорпКарта = КэшКорпКарт.Найти(НомерКорпКарты, "НомерКорпоративнойКарты");
	
	Если НайденнаяКорпКарта = Неопределено Тогда
		Сообщить("У корпоративной банковской карты (" + НомерКорпКарты + ") владельца не найдено!");
		Возврат Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
	Иначе
		Возврат НайденнаяКорпКарта.КорпКарта;
	КонецЕсли; 
	
КонецФункции
//---АК LAGP

Процедура СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки)
	
	//Составляем список счетов
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	
	// Расходы из банка, отсутствующие в списке загруженных, помечаем на удаление
	ДокументыНаУдаление = Новый Запрос;
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач"		, НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон"		, КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов"	, СписокСчетов);

	ДокументыНаУдаление.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзБанка.Проведен
	|	И РасходИзБанка.СчетОрганизации.НомерСчета В(&НомераСчетов)
	|	И НЕ РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно)
	|	И НЕ(РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|				И РасходИзБанка.ПереводДСФизЛицамНаКарту)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|	И РасходИзБанка.ПереводДСФизЛицамНаКарту
	|	И РасходИзБанка.СчетКонтрагента.НомерСчета В(&НомераСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзБанка.Проведен
	|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт)
	|	И РасходИзБанка.СчетКонтрагента.НомерСчета В(&НомераСчетов)";
	
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление +
									" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Сообщить(ОбъектДокументаКУдаление); //???ZEZA
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Поступления из банка, отсутствующие в списке загруженных, помечаем на удаление
	ДокументыНаУдаление = Новый Запрос;
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач"		, НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон"		, КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов"	, СписокСчетов);

	ДокументыНаУдаление.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеВБанк.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.ДатаВходящегоДокумента МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.СчетОрганизации.НомерСчета В(&НомераСчетов)
	|	И НЕ ПоступлениеВБанк.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно)";
	
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление +
									" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			//Сообщить(ОбъектДокументаКУдаление); //???ZEZA
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьСписанияСККПоСчетам(ДокументыКИмпорту, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки)
	
	//Составляем список счетов
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос;
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач"		, НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон"		, КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов"	, СписокСчетов);

	ДокументыНаУдаление.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеСКорпоративныхКарт.Ссылка
	|ИЗ
	|	Документ.СписаниеСКорпоративныхКарт КАК СписаниеСКорпоративныхКарт
	|ГДЕ
	|	СписаниеСКорпоративныхКарт.Дата >= &ДатаНач
	|	И СписаниеСКорпоративныхКарт.Дата <= &ДатаКон
	|	И СписаниеСКорпоративныхКарт.Проведен
	|	И СписаниеСКорпоративныхКарт.СчетКонтрагента.НомерСчета В(&НомераСчетов)";
	
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ЭтотОбъект.ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ЭтотОбъект.ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ЭтотОбъект.ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление +
									" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Сообщить(ОбъектДокументаКУдаление); //???ZEZA
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСводныйПриходЭквайринга(ИсходныйДокумент, ДатаДок)
	
	ЗапросПоискаДокумента = Новый Запрос;
	ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, НачалоДня(ДатаДок));							  
	ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, КонецДня(ДатаДок));							  
	ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, Организация);
	ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"	, БанковскийСчет);
	ЗапросПоискаДокумента.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеВБанк.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И ПоступлениеВБанк.Организация = &Организация
	|	И ПоступлениеВБанк.СчетОрганизации = &СчетОрганизации
	|	И НЕ ПоступлениеВБанк.ПометкаУдаления
	|	И ПоступлениеВБанк.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно)";
	Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
	
	КоличествоДок = Результат.Количество();
	Если Результат.Следующий() Тогда
		Док = Результат.Ссылка.ПолучитьОбъект();
		Док.ЭквайрингРасшифровка.Очистить();
	Иначе
		Док = Документы.ПоступлениеВБанк.СоздатьДокумент();
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Док, ИсходныйДокумент,, "Дата, Номер");
	Док.Дата = ДатаДок;
	
	Возврат Док;
	
КонецФункции	

Процедура ЗаписатьДокументПриходаЭквайринга()
	
	СводныйПриходЭквайринг.СуммаДокумента		= СводныйПриходЭквайринг.ЭквайрингРасшифровка.Итог("СуммаДокумента");
	СводныйПриходЭквайринг.СуммаКомиссииБанка	= СводныйПриходЭквайринг.ЭквайрингРасшифровка.Итог("СуммаКомиссииБанка");
	Если СводныйПриходЭквайринг.Контрагент <> СводныйПриходЭквайринг.ДоговорКонтрагента.Владелец Тогда
		 СводныйПриходЭквайринг.Контрагент = СводныйПриходЭквайринг.ДоговорКонтрагента.Владелец;
	 КонецЕсли;	
	СводныйПриходЭквайринг.ДатаВходящегоДокумента = СводныйПриходЭквайринг.Дата;
	СводныйПриходЭквайринг.Записать();
	
	ОбъектПроведен = СводныйПриходЭквайринг.Проведен;
	Попытка
		СводныйПриходЭквайринг.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить(?(ОбъектПроведен, "Перепроведен ", "Проведен ") + СводныйПриходЭквайринг, СтатусСообщения.Обычное);
		//СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
	Исключение
		СводныйПриходЭквайринг.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить(Врег(Лев(СводныйПриходЭквайринг, 1)) + Сред(СводныйПриходЭквайринг, 2) + " не проведен! Произошли ошибки при проведении!", СтатусСообщения.Важное);
	КонецПопытки
	
КонецПроцедуры	

Функция НайтиСоздатьСводныйРасходЭквайринга(ИсходныйДокумент, ДатаДок)
	
	ЗапросПоискаДокумента = Новый Запрос;
	ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, НачалоДня(ДатаДок));							  
	ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, КонецДня(ДатаДок));							  
	ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, Организация);
	ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"	, БанковскийСчет);
	ЗапросПоискаДокумента.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И РасходИзБанка.Организация = &Организация
	|	И РасходИзБанка.СчетОрганизации = &СчетОрганизации
	|	И НЕ РасходИзБанка.ПометкаУдаления
	|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно)";
	Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
	
	КоличествоДок = Результат.Количество();
	Если Результат.Следующий() Тогда
		Док = Результат.Ссылка.ПолучитьОбъект();
		Док.ЭквайрингРасшифровка.Очистить();
	Иначе
		Док = Документы.РасходИзБанка.СоздатьДокумент();
	КонецЕсли;	
    ЗаполнитьЗначенияСвойств(Док, ИсходныйДокумент,, "Дата, Номер");
	
	Док.Оплачено	= Истина;
	Док.Дата		= ДатаДок;
	
	Возврат Док;
	
КонецФункции	

Процедура ЗаписатьДокументРасходаЭквайринга()
	
	СводныйРасходЭквайринг.СуммаДокумента = СводныйРасходЭквайринг.ЭквайрингРасшифровка.Итог("СуммаДокумента");
	Если СводныйРасходЭквайринг.Контрагент <> СводныйРасходЭквайринг.ДоговорКонтрагента.Владелец Тогда
		 СводныйРасходЭквайринг.Контрагент = СводныйРасходЭквайринг.ДоговорКонтрагента.Владелец;
	КонецЕсли;	
	СводныйРасходЭквайринг.ДатаОплаты = СводныйРасходЭквайринг.Дата;
	
	СводныйРасходЭквайринг.Записать();
	ОбъектПроведен = СводныйРасходЭквайринг.Проведен;
	Попытка
		СводныйРасходЭквайринг.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить(?(ОбъектПроведен, "Перепроведен ", "Проведен ") + СводныйРасходЭквайринг, СтатусСообщения.Обычное);
		//СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
	Исключение
		СводныйРасходЭквайринг.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить(Врег(Лев(СводныйРасходЭквайринг, 1)) + Сред(СводныйРасходЭквайринг, 2) + " не проведен! Произошли ошибки при проведении!", СтатусСообщения.Важное);
	КонецПопытки
	
КонецПроцедуры	

Процедура ЗаписатьПриходЭквайрингВSQL(ТолькоУдаление = Ложь)
	
	Если БанковскийСчет.Банк.Код = "044525225" Тогда //Сбер
		Возврат;
	КонецЕсли;	
	
	СтрСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
	СтрСоединения = СтрЗаменить(СтрСоединения, "10.0.0.40", "srv-sql01");
	СтрСоединения = СтрЗаменить(СтрСоединения, "srv-sql02", "srv-sql01");
	ЭтоКопияБазы = НРег(Константы.СтрокаПодключенияКБазе.Получить()) <> СтрСоединения;
	СчетчикЦиклов = 0;
	ТекстДобавления = "DELETE FROM [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_prihod] WHERE date= '" +
						Формат(НачалоДня(СводныйПриходЭквайринг.Дата)) + "'" + " AND id_org='" + СводныйПриходЭквайринг.Организация.ИД + "'" +
						" AND schet='" + БанковскийСчет.НомерСчета + "'";
	Если НЕ ТолькоУдаление Тогда
		ОтборПоДате = Новый Структура;
		ОтборПоДате.Вставить("Дата", СводныйПриходЭквайринг.Дата);
		МассивСтрок = ТЗСводногоПрихода.найтиСтроки(ОтборПоДате);
		Для каждого стр из МассивСтрок Цикл
			Если СчетчикЦиклов % 500 = 0 Тогда
				ТекстДобавления = ТекстДобавления+ Символы.ПС +
					"INSERT INTO [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_prihod]
					|		   ([date]
					|		   ,[id_org]
					|		   ,[id_terminal]
					|		   ,[summa]
					|		   ,[schet]
					|		   ,[nom_vh]
					|		   ,[date_vh])
					|VALUES ";
			КонецЕсли;
				
			ТекстДобавления = ТекстДобавления + Символы.ПС +
				?(Прав(ТекстДобавления, 1) = ")", ",", "") +
				"( '" + Формат(НачалоДня(СводныйПриходЭквайринг.Дата), "ДФ=yyyy-MM-dd") +  "', '" +
				СводныйПриходЭквайринг.Организация.ИД + "', '" +
				Стр.терминал.ИД + "','" +
				Формат(Стр.СуммаДокумента, "ЧРД=.; ЧН=; ЧГ=0") + "'" + ",'" +
				БанковскийСчет.НомерСчета + "'," + "'" +
				Стр.НомерВходящегоДокумента + "'," + "'" +
				Формат(НачалоДня(Стр.ДатаВходящегоДокумента), "ДФ=yyyy-MM-dd") + "'" + ")";							
			//+ "( '" + Формат(НачалоДня(СводныйПриходЭквайринг.Дата), "ДФ=yyyy-MM-dd")+  "')";							
			СчетчикЦиклов = СчетчикЦиклов + 1;
		КонецЦикла;								
	КонецЕсли;	

	Connection  = Новый COMОбъект("ADODB.Connection");
	Command  	= Новый COMОбъект("ADODB.Command");
	RecordSet  	= Новый COMОбъект("ADODB.RecordSet");
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	Connection.Open(СокрЛП(СтрСоединенияДанныеТовародвижение));
	Command.ActiveConnection   = Connection;
	Command.CommandText = "Begin Transaction" + Символы.ПС + ТекстДобавления + Символы.ПС + "Commit";
	RecordSet = Command.Execute();
	
КонецПроцедуры

Процедура ЗаписатьРасходЭквайрингВSQL(ТолькоУдаление = Ложь)
	
	СтрСоединения = НРег(СтрокаСоединенияИнформационнойБазы());
	СтрСоединения = СтрЗаменить(СтрСоединения, "10.0.0.40", "srv-sql01");
	СтрСоединения = СтрЗаменить(СтрСоединения, "srv-sql02", "srv-sql01");
	ЭтоКопияБазы = НРег(Константы.СтрокаПодключенияКБазе.Получить()) <> СтрСоединения;
	СчетчикЦиклов = 0;
	ТекстДобавления = "DELETE FROM [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_rashod] WHERE date= '" +
						Формат(НачалоДня(СводныйРасходЭквайринг.Дата)) + "'" + " AND id_org='" + СводныйРасходЭквайринг.Организация.ИД + "'" +
						" AND schet='" + БанковскийСчет.НомерСчета + "'";
	Если НЕ ТолькоУдаление Тогда
		ОтборПоДате = Новый Структура;
		ОтборПоДате.Вставить("Дата", СводныйРасходЭквайринг.Дата);
		МассивСтрок = ТЗСводногоРасхода.НайтиСтроки(ОтборПоДате);
		Для каждого стр из МассивСтрок Цикл
			Если СчетчикЦиклов % 500 = 0 Тогда
				ТекстДобавления = ТекстДобавления+ Символы.ПС +
					"INSERT INTO [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[terminal_rashod]
					|		   ([date]
					|		   ,[id_org]
					|		   ,[id_terminal]
					|		   ,[summa]
					|		   ,[schet]
					|		   ,[nom_vh]
					|		   ,[date_vh])
					|VALUES ";
			КонецЕсли;
				
			ТекстДобавления = ТекстДобавления + Символы.ПС + ?(Прав(ТекстДобавления, 1) = ")", ",", "")	+
			"( '" + Формат(НачалоДня(СводныйРасходЭквайринг.Дата), "ДФ=yyyy-MM-dd") +  "', '" +
			СводныйРасходЭквайринг.Организация.ИД + "', '" +
			Стр.терминал.ИД + "','" +
			Формат(Стр.СуммаДокумента, "ЧРД=.; ЧН=; ЧГ=0")+ "','" +
			БанковскийСчет.НомерСчета + "','" +
			Стр.НомерВходящегоДокумента + "','" +
			Формат(НачалоДня(Стр.ДатаВходящегоДокумента), "ДФ=yyyy-MM-dd") + "')";							
			//+ "( '" + Формат(НачалоДня(СводныйПриходЭквайринг.Дата), "ДФ=yyyy-MM-dd")+  "')";							
			СчетчикЦиклов = СчетчикЦиклов + 1;
		КонецЦикла;								
	КонецЕсли;	

	Connection  = Новый COMОбъект("ADODB.Connection");
	Command  	= Новый COMОбъект("ADODB.Command");
	RecordSet  	= Новый COMОбъект("ADODB.RecordSet");
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	Connection.Open(СокрЛП(СтрСоединенияДанныеТовародвижение));
	Command.ActiveConnection 	= Connection;
	Command.CommandText 		= "Begin Transaction" + Символы.ПС + ТекстДобавления + Символы.ПС + "Commit";
	RecordSet = Command.Execute();
	
КонецПроцедуры


///////////// Модуль     //////////////////////////////////////////////////

Функция ПолучитьПроцентПоЭквайрингу(Назначение)
	
	ТЧ = Новый ОписаниеТипов ("Число",,, Новый КвалификаторыЧисла(15, 2));
	СкобкаО = Найти(Назначение, "(");
	СкобкаЗ = Найти(Назначение, ")");
	ПроцентСтрокой = Сред(Назначение, СкобкаО + 1, СкобкаЗ - СкобкаО - 2);
	Процент = ТЧ.ПривестиЗначение(ПроцентСтрокой);
	
	Возврат Процент;
	
КонецФункции

//пмм
Функция ПолучитьСуммуКомиссииПоЭквайрингу(Назначение)
	
	ТЧ = Новый ОписаниеТипов ("Число",,, Новый КвалификаторыЧисла(15, 2));
	СкобкаО = Найти(Назначение, "Комиссия ");
	СкобкаЗ = Найти(Назначение, ". НДС не облагается.");
	СуммаСтрокой = Сред(Назначение, СкобкаО + 9, СкобкаЗ - СкобкаО - 9);
	СуммаСтрокой = СтрЗаменить(СуммаСтрокой, ",", "");
	Сумма = ТЧ.ПривестиЗначение(СуммаСтрокой);
	
	Если Сумма = 0 Тогда // не стандартный случай
		СкобкаО = Найти(Назначение, "Комиссия ");
		СкобкаЗ = Найти(Назначение, ". Возврат");
		СуммаСтрокой = Сред(Назначение, СкобкаО + 9, СкобкаЗ - СкобкаО - 9);
		СуммаСтрокой = СтрЗаменить(СуммаСтрокой, ",", "");
		Сумма = ТЧ.ПривестиЗначение(СуммаСтрокой);
	КонецЕсли;
	
	Если Сумма = 0 Тогда // не стандартный случай
		СкобкаО = Найти(Назначение, "комиссия: ");
		СкобкаЗ = Найти(Назначение, ";  возврат:");
		СуммаСтрокой = Сред(Назначение, СкобкаО + 10, СкобкаЗ - СкобкаО - 10);
		СуммаСтрокой = СтрЗаменить(СуммаСтрокой, ",", "");
		Сумма = ТЧ.ПривестиЗначение(СуммаСтрокой);
	КонецЕсли;
	
	Если Сумма = 0 Тогда // не стандартный случай
		СкобкаО = Найти(Назначение, "Комиссия ");
		СкобкаЗ = Найти(Назначение, ". Возвр");
		СуммаСтрокой = Сред(Назначение, СкобкаО + 9, СкобкаЗ - СкобкаО - 9);
		СуммаСтрокой = СтрЗаменить(СуммаСтрокой, ",", "");
		Сумма = ТЧ.ПривестиЗначение(СуммаСтрокой);
	КонецЕсли;

	
	Если Сумма = 0 Тогда
		Сообщить("Не нашёл сумму комиссии в назначении платежа: " + Назначение);
	КонецЕсли;	
	
	Возврат Сумма;
	
КонецФункции
//пмм.

//sstuman
Функция ПолучитьТерминал(НазначениеИсх) Экспорт
	//+++АК POZM 2018.02.16 ИП-00017919 
	Назначение = НазначениеИсх;
	Назначение = СтрЗаменить(Назначение,"Мерчант № [NUM_Зачисление средств по операциям с МБК (на основании реестров платежей).","");
	//---АК POZM 
	ВозможныйНомер="";
	СкобкаО = Найти(Назначение, ", №");
	СкобкаЗ = Найти(Назначение, "#");
	НомерТерминала = Сред(Назначение, СкобкаО+3,СкобкаЗ-СкобкаО-3);
	пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
	Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
		ВозможныйНомер=НомерТерминала;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"по п/к ");
		СкобкаЗ = Найти(Назначение,"#");
		НомерТерминала = Сред(Назначение,СкобкаО+7,СкобкаЗ-СкобкаО-7);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"по п/к ");
		СкобкаЗ = Найти(Назначение,"№");
		НомерТерминала = Сред(Назначение,СкобкаЗ+2,СкобкаО-СкобкаЗ-3);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"картами ");
		СкобкаЗ = Найти(Назначение,"#");
		НомерТерминала = Сред(Назначение,СкобкаО+8,СкобкаЗ-СкобкаО-8);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,", №");
		СкобкаЗ = Найти(Назначение,"#");
		НомерТерминала = Сред(Назначение,СкобкаО+3,СкобкаЗ-СкобкаО-3);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	

	КонецЕсли;
	//сбер
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"Мерчант № ");
		СкобкаЗ = Найти(Назначение,". Дата реестра ");
		Мерчант = Сред(Назначение,СкобкаО+10,СкобкаЗ-СкобкаО-10);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("Мерчант", Мерчант);
		Если СкобкаО>0 и СкобкаЗ>0 Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"Мерчант №");
		СкобкаЗ = Найти(Назначение,". Дата реестра ");
		Мерчант = Сред(Назначение,СкобкаО+9,СкобкаЗ-СкобкаО-9);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("Мерчант", Мерчант);
		Если СкобкаО>0 и СкобкаЗ>0 Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"VKUSVILL");
		СкобкаЗ = Найти(НРег(Назначение)," возмещение");
		НомерТерминала = Сред(Назначение,СкобкаО+8,СкобкаЗ-СкобкаО-8);
		НомерТерминала=СокрЛП(НомерТерминала);
		НомерТерминала = СтрЗаменить(НомерТерминала," ",".");
		НомерТерминала = СтрЗаменить(НомерТерминала,"-",".");
		//+++АК POZM 2018.07.23 ИП-00018778.01 
		НомерТерминала = СтрЗаменить(НомерТерминала,"_",".");
		//---АК POZM 
		НомерТерминала = СтрЗаменить(НомерТерминала,".Н","");
		НомерТерминала = СтрЗаменить(НомерТерминала,".N","");

		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ "+НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"VKUSVILL");
		Если СкобкаО = 0 Тогда
			СкобкаЗ = Найти(НРег(Назначение)," возмещение оплаты товаров и услуг.");
	        НомерТерминала = Лев(Назначение,СкобкаЗ-1);
			НомерТерминала = СтрЗаменить(НомерТерминала,"-",".");
			НомерТерминала = СтрЗаменить(НомерТерминала," ",".");
			//+++АК POZM 2018.07.23 ИП-00018778.01 
			НомерТерминала = СтрЗаменить(НомерТерминала,"_",".");
			//---АК POZM 
			НомерТерминала = СтрЗаменить(НомерТерминала,".Н","");
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ "+НомерТерминала);
			Если СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
				ВозможныйНомер=НомерТерминала;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"Мерчант № ");
		СкобкаЗ = Найти(Назначение,". Дата реестра ");
		Мерчант = Сред(Назначение,СкобкаО+10,СкобкаЗ-СкобкаО-10);
		НомерТерминала = ПолучитьНомерТерминалаПоМерчанту(Мерчант);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"Мерчант №");
		СкобкаЗ = Найти(Назначение,". Дата реестра ");
		Мерчант = Сред(Назначение,СкобкаО+9,СкобкаЗ-СкобкаО-9);
		НомерТерминала = ПолучитьНомерТерминалаПоМерчанту(Мерчант);
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ИД", НомерТерминала);
	КонецЕсли;
	
	//+++АК POZM 2018.02.16 ИП-00017919
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"ТСТ: VKUSVILL ");
		Если СкобкаО > 0 Тогда
			СтрокаПоиска = Сред(Назначение,СкобкаО+14)
		КонецЕсли;	
		СкобкаО = Найти(СтрокаПоиска," ");
		Мерчант = Сред(СтрокаПоиска,СкобкаО+1);
		
		//+++АК LAGP 2018.07.18 ИП-00019241 В поступлении в банк попадает Терминал с пестым мерчантом (213 тт)
		//пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("Мерчант", Мерчант);
		Если ЗначениеЗаполнено(Мерчант) Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("Мерчант", Мерчант);
		КонецЕсли;	
		//---АК LAGP
		
		Если СкобкаО>0 и СкобкаЗ>0 Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;
	КонецЕсли;
	//---АК POZM 
	
	//+++АК LAGP 2018.07.30 ИП-00019384 
	Если Не ЗначениеЗаполнено(пТерминал) Тогда
		СкобкаО = Найти(Назначение,"VKUSVILL");
		СкобкаЗ = Найти(НРег(Назначение),".эквайринг за ");
		НомерТерминала = Сред(Назначение,СкобкаО+8,СкобкаЗ-СкобкаО-8);
		НомерТерминала=СокрЛП(НомерТерминала);
		НомерТерминала = СтрЗаменить(НомерТерминала," ",".");
		НомерТерминала = СтрЗаменить(НомерТерминала,"-","."); 
		НомерТерминала = СтрЗаменить(НомерТерминала,"_",".");
		НомерТерминала = СтрЗаменить(НомерТерминала,".Н","");
		НомерТерминала = СтрЗаменить(НомерТерминала,".N","");
		пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ "+НомерТерминала);
		Если СкобкаО>0 и СкобкаЗ>0 И (СтрДлина(НомерТерминала) < 12) Тогда
			ВозможныйНомер=НомерТерминала;
		КонецЕсли;		
	КонецЕсли;
	//---АК LAGP
	
	//+++АК POZM 2017.10.24 ИП-00016987 
	Если Не ЗначениеЗаполнено(пТерминал) И Найти(Назначение,"VKUSVILL 1344")>0 Тогда
		Если Найти(Назначение,"VKUSVILL 1344_1") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.1");
		ИначеЕсли Найти(Назначение,"VKUSVILL 1344_2") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.2");
		ИначеЕсли Найти(Назначение,"VKUSVILL 1344_3") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.3");
		ИначеЕсли Найти(Назначение,"VKUSVILL 1344_4") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.4");
		ИначеЕсли Найти(Назначение,"VKUSVILL 1344_5") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.5");
		ИначеЕсли Найти(Назначение,"VKUSVILL 1344_6") Тогда
			пТерминал = Справочники.Терминалы.НайтиПоРеквизиту("ID_SQL", "ККМ 1344.6");	
		КонецЕсли;	
	КонецЕсли;
	//---АК POZM 
	
    //пмм.
	Если ЗначениеЗаполнено(НомерТерминала)
			И СтрДлина(НомерТерминала) < 12
			И НЕ ЗначениеЗаполнено(пТерминал) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не найден терминал № " + НомерТерминала);
	ИначеЕсли ВозможныйНомер<>""
			И НЕ ЗначениеЗаполнено(пТерминал) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не найден терминал № " + ВозможныйНомер);
	ИначеЕсли ЗначениеЗаполнено(НомерТерминала) 
			И НЕ ЗначениеЗаполнено(пТерминал) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не найден терминал по назначению платежа " + Назначение);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(пТерминал) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("!!!! Не найден терминал по назначению платежа " + Назначение);
		
	КонецЕсли;
	
	Возврат пТерминал;
	
КонецФункции

Функция ПолучитьНомерТерминалаПоМерчанту(Мерчант)
//10068069	ООО Вкусвилл	VKUSVILL 491 1	Мытищи, бул. Ветеранов, ., к. 2	780000033023
//10068070	ООО Вкусвилл	VKUSVILL 491 2	Мытищи, бул. Ветеранов, ., стр. 2	780000033024
//10068071	ООО Вкусвилл	VKUSVILL 491 3	Мытищи, бул. Ветеранов, ., стр. 2	780000033025
//10068064	ООО Вкусвилл	VKUSVILL 497 1	Москва, бул. Измайловский, 38	780000033018
//10068065	ООО Вкусвилл	VKUSVILL 497 2	Москва, бул. Измайловский, 38	780000033019
//10068066	ООО Вкусвилл	VKUSVILL 497 3	Москва, бул. Измайловский, 38	780000033020
//10068067	ООО Вкусвилл	VKUSVILL 507 1	Москва, проезд Новотушинский, 10, к. 2	780000033021
//10068068	ООО Вкусвилл	VKUSVILL 507 2	Москва, проезд Новотушинский, 10, к. 2	780000033022
//10068062	ООО Вкусвилл	VKUSVILL 510 2	Москва, ул. Гримау, 12, стр. 1	780000033016
//10068063	ООО Вкусвилл	VKUSVILL 510 3	Москва, ул. Гримау, 12, стр. 1	780000033017
//10068061	ООО Вкусвилл	VKUSVILL 510 I	Москва, ул. Гримау, 12, стр. 1	780000033015

	Если Мерчант = "780000033023" Тогда
		Возврат "10068069";
	ИначеЕсли Мерчант = "780000033024" Тогда
		Возврат "10068070";
	ИначеЕсли Мерчант = "780000033025" Тогда
		Возврат "10068071";
	ИначеЕсли Мерчант = "780000033018" Тогда
		Возврат "10068064";
	ИначеЕсли Мерчант = "780000033019" Тогда
		Возврат "10068065";	
	ИначеЕсли Мерчант = "780000033020" Тогда
		Возврат "10068066";
	ИначеЕсли Мерчант = "780000033021" Тогда
		Возврат "10068067";
	ИначеЕсли Мерчант = "780000033022" Тогда
		Возврат "10068068";
	ИначеЕсли Мерчант = "780000033016" Тогда
		Возврат "10068062";		
	ИначеЕсли Мерчант = "780000033017" Тогда
		Возврат "10068063";
	ИначеЕсли Мерчант = "780000033015" Тогда
		Возврат "10068061";		
	ИначеЕсли Мерчант = "780000033511" Тогда
		Возврат "10079665";		
	ИначеЕсли Мерчант = "780000033510" Тогда
		Возврат "10079664";		
	ИначеЕсли Мерчант = "780000033509" Тогда
		Возврат "10079663";		
	КонецЕсли;
	
КонецФункции	

Процедура УстановитьДоговор(ОбъектДокумента)
	
	Если ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)
			ИЛИ (Не ЗначениеЗаполнено(ОбъектДокумента.Контрагент))
			ИЛИ (Не ЗначениеЗаполнено(ОбъектДокумента.Организация)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"		, ОбъектДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент"		, ОбъектДокумента.Контрагент);
	спВидыДоговоров = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ОбъектДокумента.ВидОперации);
	Запрос.УстановитьПараметр("спВидыДоговоров"	, спВидыДоговоров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Ссылка = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
	|			ТОГДА 0
	|		КОГДА НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.ВидДоговора В(&спВидыДоговоров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДоговорыКонтрагентов.Код УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектДокумента.ДоговорКонтрагента = Выборка.Ссылка;
	ИначеЕсли спВидыДоговоров.Количество() > 0 Тогда
		обСпр = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		обСпр.Владелец 		= ОбъектДокумента.Контрагент;
		обСпр.Организация 	= ОбъектДокумента.Организация;
		обСпр.Наименование 	= "Основной договор";
		обСпр.Номер 		= "Основной";
		обСпр.Дата 			= НачалоГода(ТекущаяДата());
		обСпр.ВидДоговора 	= спВидыДоговоров[0].Значение;
		Попытка
			обСпр.Записать();
			
			ОбъектДокумента.ДоговорКонтрагента = обСпр.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//+++АК LAGP 2018.03.26 ИП-00018219 Отправление письма в случае, когда вид договора и вид контрагента отличаются.
		Если ЗначениеЗаполнено(обСпр.Ссылка) И НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref") = "IzbenkaFin" Тогда  //+++АК LAGP 2018.04.10 Работа только с базой IzbenkaFin
			//Если (обСпр.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком И НЕ обСпр.Владелец.ЯвляетсяПоставщиком)
			//	ИЛИ (обСпр.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И НЕ обСпр.Владелец.ЯвляетсяПокупателем) Тогда	//+++АК LAGP 2018.03.30 ИП-0001821 Решили что требуется предупреждение в целом о создани КБ договора контрагента.
				
				СтруктураПисьма = Новый Структура;
				Кому = Новый СписокЗначений;
				Кому.Добавить("Finmanager@izbenka.ru");
				Кому.Добавить("Finmanager@izbenka.msk.ru");
				Кому.Добавить("buh51@vkusvill.ru");
				
				Тема = "Оповещение клиент-банк: Создан договор контрагента!";
				Тело = "Время создания: 	" + ТекущаяДата() + Символы.ПС;
				Тело = Тело + "Организация: 	" + обСпр.Организация + Символы.ПС;
				Тело = Тело + "Контрагент: 		" + обСпр.Владелец + Символы.ПС;
				Тело = Тело + "ВидДоговора: 	" + обСпр.ВидДоговора + Символы.ПС;
				Тело = Тело + "Пользователь: 	" + ПараметрыСеанса.ТекущийПользователь + Символы.ПС;
				Тело = Тело + "ФайлЗагрузки: 	" + ФайлЗагрузки + Символы.ПС;				
				
				СтруктураПисьма.Вставить("Кому", Кому);
				СтруктураПисьма.Вставить("Тема", Тема);
				СтруктураПисьма.Вставить("Тело", Тело);
				СтруктураПисьма.Вставить("СписокФайловВложений", Новый Массив);
				
				ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураПисьма);
				
				Сообщить("Оповещение клиент-банк: Создан договор контрагента " + обСпр.Владелец + "!");
			//КонецЕсли;	
		КонецЕсли;			
		//---АК LAGP
		
	КонецЕсли;
	
КонецПроцедуры
//sstuman
Функция ПодобратьДоговорСПокупателем(ОбъектДокумента)
	
	Если ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)
			ИЛИ (Не ЗначениеЗаполнено(ОбъектДокумента.Контрагент))
			ИЛИ (Не ЗначениеЗаполнено(ОбъектДокумента.Организация)) Тогда
		Возврат ОбъектДокумента.ДоговорКонтрагента;
	КонецЕсли;
	
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("Владелец"	, ОбъектДокумента.Контрагент);
	Запрос.УстановитьПараметр("Организация"	, ОбъектДокумента.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ОбъектДокумента.ДоговорКонтрагента;
	КонецЕсли;
	
КонецФункции	

Функция ОпределитьМесяцИзНазначенияПлатежа(НазначениеПлатежа)
	
	Номер = 0;
	Если Найти(НРег(НазначениеПлатежа), "январь") Тогда
		Номер = 1;
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "февраль") Тогда
		Номер = 2;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "март") Тогда
		Номер = 3;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "апрель") Тогда
		Номер = 4;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "май") Тогда
		Номер = 5;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "июнь") Тогда
		Номер = 6;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "июль") Тогда
		Номер = 7;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "август") Тогда
		Номер = 8;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "сентябрь") Тогда
		Номер = 9;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "октябрь") Тогда
		Номер = 10;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "ноябрь") Тогда
		Номер = 11;	
	ИначеЕсли Найти(НРег(НазначениеПлатежа), "декабрь") Тогда
		Номер = 12;		
	КонецЕсли;
		
	Если Номер = 0 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;	
	
	ТекущийГод = Год(ТекущаяДата());
	
	РазностьТекущегоГода = ТекущаяДата() - Дата(ТекущийГод, Номер, 1);
	Если РазностьТекущегоГода < 0 Тогда
		РазностьТекущегоГода = -РазностьТекущегоГода;
	КонецЕсли;	
	РазностьПредыдущегоГода = ТекущаяДата() - Дата(ТекущийГод - 1, Номер, 1);
	РазностьБудущегоГода 	= Дата(ТекущийГод + 1, Номер, 1) - ТекущаяДата();
	
	// месяц какого года ближе к текущей дате, за тот месяц и оплата
	Мин = Мин(РазностьТекущегоГода,РазностьПредыдущегоГода,РазностьБудущегоГода);
	Если Мин = РазностьБудущегоГода Тогда
		Возврат Дата(ТекущийГод + 1	, Номер, 1);
	ИначеЕсли Мин = РазностьПредыдущегоГода Тогда
		Возврат Дата(ТекущийГод - 1	, Номер, 1);
	Иначе	
		Возврат Дата(ТекущийГод		, Номер, 1);
	КонецЕсли;
	
КонецФункции	

Функция ОпределитьСтавкуНДСПоНазначениюПлатежа(НазначениеПлатежа)
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, " ", "");
	Если Найти(ВРег(НазначениеПлатежа), "БЕЗНДС") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДСНЕОБЛАГАЕТСЯ") > 0
			//+++АК pozm 13.09.2017 ИП-00016683
			ИЛИ Лев(ВРег(НазначениеПлатежа),3) = "НДС"
			//---АК pozm 13.09.2017 ИП-00016683
			
			ИЛИ Найти(ВРег(НазначениеПлатежа), "БЕЗНАЛОГА(НДС)") > 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли Найти(ВРег(НазначениеПлатежа), "НДС(18%)") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС18%") > 0 
			//+koro 01.11.2017 17076
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС18.00%") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС(18.00%)") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС18.0%") > 0
			//-koro
			Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(ВРег(НазначениеПлатежа), "НДС(10%)") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС(10.00%)") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС10%") > 0
			ИЛИ Найти(ВРег(НазначениеПлатежа), "НДС10.00%") > 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;	
	ИначеЕсли Найти(ВРег(НазначениеПлатежа), "НДС(0%)") > 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

//+++ ZICD ИП-00014983 21.02.2017
Процедура ЗаполнитьРеквизитыНалоговогоПлатежа(ОбъектДокумента, ИсходныеДанные)
	
	Если ЗначениеЗаполнено(ОбъектДокумента.Организация) Тогда
		КодОКТМО = ОбъектДокумента.Организация.КодОКТМО;
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "КодОКТМО", КодОКТМО);
	
	//НазначениеПлатежа без пробелов ?
	ВидДоходаБюджета = Сред(ИсходныеДанные.ПоказательКБК,  4, 1);
	ПодгруппаДоходов = Сред(ИсходныеДанные.ПоказательКБК,  5, 2);
	СтатьяДохода     = Сред(ИсходныеДанные.ПоказательКБК,  7, 2);
	ПодстатьяДохода  = Сред(ИсходныеДанные.ПоказательКБК,  9, 3);
	УровеньБюджета   = Сред(ИсходныеДанные.ПоказательКБК, 12, 2);
	ВидПлатежаВГосБюджет = ?(ВидДоходаБюджета = "1", Перечисления.ВидыПлатежейВГосБюджет.Налог, Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	УстановитьСвойство(ОбъектДокумента, "ВидПлатежаВГосБюджет", ВидПлатежаВГосБюджет, Истина);
	
КонецПроцедуры
//---


//////////////////////////////////////////////////////////////////////

//
//
Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ТаблицаКешПривязокТТ)
		
	ЗаполнитьКэшФизЛиц();
	
	//
	Если Найти(СтрокаДокумента.Номер, "936")>0 Тогда
		а=1;
	КонецЕсли;	
	
	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	ЗаявлениеНаАккредитив 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ЗАЯВЛЕНИЕНААККРЕДИТИВ";
	ИнкассовоеПоручение 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ИНКАССОВОЕПОРУЧЕНИЕ";

	ЭтоПополнениеБизнесСчета 	= (Найти(СтрокаДокумента.НазначениеПлатежа, "Пополнение Бизнес-счета согласно реестра") = 1
									ИЛИ Найти(СтрокаДокумента.НазначениеПлатежа, "Пополнение бизнес-карты сотрудника") = 1);
	Исходяший = (СтрокаДокумента.ПлательщикСчет = ЭтотОбъект.БанковскийСчет.НомерСчета)
					ИЛИ ЭтоПополнениеБизнесСчета;
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	Если ПлатежноеПоручение
			И (СтрокаДокумента.ВидОплаты = ""
				ИЛИ Число(СтрокаДокумента.ВидОплаты)= 1) Тогда
		ВидДокумента = ?(Исходяший, "РасходИзБанка"					, "ПоступлениеВБанк");
		ИмяДокумента = ?(Исходяший, "Платежное поручение исходящее"	, "Платежное поручение входящее");
	ИначеЕсли ПлатежноеТребование Тогда
		ВидДокумента = ?(Исходяший, "РасходИзБанка"						, "ПоступлениеВБанк");
		ИмяДокумента = ?(Исходяший, "Платежное требование полученное"	, "Платежное требование выставленное");
	ИначеЕсли ЗаявлениеНаАккредитив Тогда
		ВидДокумента = ?(Исходяший, "РасходИзБанка"			, "ПоступлениеВБанк");
		ИмяДокумента = ?(Исходяший, "Аккредитив переданный"	, "Аккредитив полученный");
	ИначеЕсли ИнкассовоеПоручение Тогда
		ВидДокумента = ?(Исходяший, "РасходИзБанка"						, "ПоступлениеВБанк");
		ИмяДокумента = ?(Исходяший, "Инкассовое поручение полученное"	, "Инкассовое поручение переданное");
	Иначе
		ВидДокумента = ?(Исходяший, "РасходИзБанка"					, "ПоступлениеВБанк");
		ИмяДокумента = ?(Исходяший, "Расход из Банка", "Поступление в Банк");
	КонецЕсли;
		
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходяший, "СчетОрганизации", "СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.

	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть 	= Ложь;
	ДокументНайден 			= Ложь;
	ДатаДок = ПустаяДата;
	
//	Если Найти(СтрокаДокумента.НазначениеПлатежа,"Пополнение СКС") = 0 Тогда
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
	Если ДатаДок = ПустаяДата Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		Если СтрокаДокумента.ВидДокумента = "РасходИзБанка" Тогда
			
			//Лаврик++
//				Если Не ОбщегоНазначения.ЕстьНеЦифры(СтрокаДокумента.Номер) Тогда
			ТипЧ = Новый ОписаниеТипов("Число");
				//НомерДок = ТипЧ.ПривестиЗначение(Прав(СтрокаДокумента.Номер, 3));
				//НомерДляПоискаДок = Формат(НомерДок, "ЧЦ=3; ЧН=");
			НомерДляПоискаДок 		= СтрокаДокумента.Номер;
			ВсеРеквизитыПоискаЕсть 	= Истина;
			//Иначе
			//	ДобавитьЗамечание(СтрокаДокумента, 4, "Указан неправильный номер документа("+СтрокаДокумента.Номер+")!");
			//	ВсеРеквизитыПоискаЕсть = ложь;
			//КонецЕсли;
			//Лаврик--
			РеквизитДаты 			= "Дата";
			РеквизитНомера 			= "НомерВходящегоДокумента";
			
		Иначе
			НомерДляПоискаДок 		= СтрокаДокумента.Номер;
			РеквизитДаты 			= "ДатаВходящегоДокумента";
			РеквизитНомера 			= "НомерВходящегоДокумента";
			ВсеРеквизитыПоискаЕсть 	= Истина;
		КонецЕсли;
	КонецЕсли;
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	ЭтоСписаниеСКорпоративныхКарт 	= Ложь;
	//ВидОперацииСКорпоративнойКартой = Перечисления.ВидыОперацийСКорпоративнымиКартами.Покупка;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		//
		Если Исходяший Тогда
			
			ЭтоСписаниеСКорпоративныхКарт = (ВидДокумента = "РасходИзБанка"
												И ((Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " на основании реестра платежей ") > 0 
														И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " по операциям с картой ") > 0)
													ИЛИ 
													(Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " отражено по операции ") > 0
														И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " с картой ") > 0
														И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " фио держателя ") > 0))
													ИЛИ
													(Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "сз отражено по операции ") > 0
														И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " с картой ") > 0));
														
			//											
			ЭтоПервоначальныйВзнос = (ВидДокумента = "РасходИзБанка"
										И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "первоначального взноса")) > 0;
			ЭтоПлатаЗаОбслуживание = (ВидДокумента = "РасходИзБанка"
										И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "плата за обслуживание") > 0
										И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "фио") > 0);
													
			//
			Если ЭтоПервоначальныйВзнос Тогда
				
				//
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты;
				
				//
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты;
				
				//
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000016"); // Услуги банка

				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = СтрокаДокумента.СчетОрганизации;
				
				//
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Контрагенты");
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
				
				//+++АК LAGP 2018.04.19 Письмо от заказчика. В данной операции необходимо получать счёт (орг)
				РСорг = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Организации");
				Если ЗначениеЗаполнено(РСорг) Тогда
					СтрокаДокумента.СчетКонтрагента = РСорг;
				КонецЕсли;
				//---АК LAGP
				
			ИначеЕсли ЭтоПлатаЗаОбслуживание Тогда
				
				//
				//+++АК LAGP 2018.02.20 ИП-00017984
				//ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт;
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка;
				//---АК LAGP
				//
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты;
				
				//
				//+++АК LAGP 2018.02.20 ИП-00017984 C 2018 изменена статья ДДС
				//СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); // Выдача денежных средств сотрудникам под отчет
				//СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901046   "); // Оплата с корпоративной карты
				СтрокаДокумента.СтатьяДДС 		= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("139391");       // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("901046   ", Истина, Новый Структура("ДатаЗапроса", СтрокаДокумента.ДатаДок)); // Услуги банка
				//---АК LAGP
				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = СтрокаДокумента.СчетОрганизации;
				
				//
				//+++АК SHEP 20170503 ИП-00015728
				//РС = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Контрагенты");
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Контрагенты");
				//---АК SHEP 20170503
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
				
			ИначеЕсли ЭтоСписаниеСКорпоративныхКарт Тогда
				
				//
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт;
				
				//
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				
				//
				Если Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " покупка") > 0 Тогда
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.Покупка;
					
				ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " плата за обслуживание банковской карты") > 0 Тогда
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты;
					
				ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " плата за получение баланса в чужом атм") > 0 Тогда
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаПолучениеБалансаВЧужомАТМ;
					
				ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " плата за получение через атм выписки о 10 последних операциях") > 0 Тогда
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаПолучениеЧерезАТМВыпискиО10ПоследнихОперацияхПоКарте;
					
				Иначе
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПустаяСсылка();
					
				КонецЕсли;
				
				//
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901046   "); // Оплата с корпоративной карты
				
				//+++АК LAGP 2018.02.20 ИП-00017984 C 2018 изменена статья ДДС
				//СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача денежных средств сотрудникам под отчет
				//СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901046   "); // Оплата с корпоративной карты
				СтрокаДокумента.СтатьяДДС 		= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("901012");       // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("901046   ", Истина); 
				//---АК LAGP
				
				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = СтрокаДокумента.СчетОрганизации;
				
				//
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Контрагенты");
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
				
			ИначеЕсли ЭтоПополнениеБизнесСчета Тогда
				
				//
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
				
				//
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				//СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.;
				
				//
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901033   "); // Пополнение с расчетного счета корп карт
				
				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Организации");
				
				//
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Контрагенты");
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
									
			ИначеЕсли ВидДокумента = "РасходИзБанка"
					И СтрокаДокумента.СтатусСоставителя <> "" Тогда
				Если СтрокаДокумента.СтатусСоставителя = "06"
						ИЛИ СтрокаДокумента.СтатусСоставителя = "08" 
						ИЛИ ((СтрокаДокумента.СтатусСоставителя >= "16")
								и (СтрокаДокумента.СтатусСоставителя <= "20")) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
					
					//+++АК LAGP 2018.03.20 ИП-00018117
					Если Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "ндфл по ставке в п.1.") > 0 Тогда
						СтрокаДокумента.СтатьяДДС 		= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("120520"); // Оплата налогов ФОТ(бонусная часть продавцов)
						СтрокаДокумента.СтатьяДДС_Бух 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("000000006", Истина); // Оплата ФСС,ПФР,НДФЛ						
					КонецЕсли;
					//---АК LAGP
				КонецЕсли;
						
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "перевод на бизнес-счет предприятия") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012");
				
			ИначеЕсли (ВидДокумента = "РасходИзБанка") 
					И (ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Организации").Владелец = ЭтотОбъект.БанковскийСчет.Владелец) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
				СтрокаДокумента.СчетКонтрагента = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Организации");
				СтрокаДокумента.Контрагент 		= ЭтотОбъект.Организация;
				СтрокаДокумента.СтатьяДДС 		= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010");
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "доходы от аренды оборудования") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); //Оплата услуг банка (прочие постоянные затраты)
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "займа") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам;
			ИначеЕсли Найти(СтрЗаменить(НРег(СтрокаДокумента.НазначениеПлатежа)," ",""), "агентавалютногоконтроля") > 0	Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;        
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); //Оплата услуг банка (прочие постоянные затраты)
				Если (СтрокаДокумента.ПолучательИНН = "7707083893") Тогда //Сбер
					Если (Организация.ИНН = "7734675810") Тогда //Вкусвилл                                                                                      
						СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003279", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000001506")); //	
					ИначеЕсли (Организация.ИНН = "7726660031") Тогда //Луг                                                                                      
						СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000003926", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000001506")); //		
					КонецЕсли;	
				КонецЕсли;	
			ИначеЕсли НРег(СтрокаДокумента.Получатель1) = "ком.за пров.платежей юр/л"
					ИЛИ НРег(СтрокаДокумента.Получатель1) = "комиссия банка за проведение расчетов по системе ""банк-клиент"""
					ИЛИ Найти(НРег(СтрокаДокумента.Получатель1), "комиссия за") > 0
					ИЛИ НРег(СтрокаДокумента.НазначениеПлатежа) = "ком.за пров.платежей юр/л"
					ИЛИ НРег(СтрокаДокумента.НазначениеПлатежа) = "комиссия банка за проведение расчетов по системе ""банк-клиент"""
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "комиссия за") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "ком.за срочн. перевод") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "комиссия") > 0
					//+++АК ILIK 2018.11.16 ИП-00020354
					Или Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа, " ", "")), "платазаобслуживаниепопакетууслуг""базис""") > 0
					Или Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа, " ", "")), "полнаяоплатакомиссии") > 0
					Или Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа, " ", "")), "платазавыдачуналичныхкчеку") > 0
					//---АК ILIK
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "комиссия по") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка;        
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); //Оплата услуг банка (прочие постоянные затраты)
				
				Если (СтрокаДокумента.ПолучательИНН = "7744002275") Тогда //НЕФТЯНОЙ АЛЬЯНС (ОАО) КБ,  г. Москва
					Если (Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "комиссия по эквайрингу") > 0) Тогда
				    	СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000000209"); // Банк Москвы ОАО
					ИначеЕсли (Организация.ИНН = "7734675810") Тогда //Вкусвилл                                                                                      
						СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000212", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000000221")); //договор банковских услуг	
					КонецЕсли;
				Иначе
					
				КонецЕсли;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "отмена по пластиковыми картами") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "отмена операции по п/к") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "отмена по терминалу") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "отмена возмещения по эквайрингу") > 0 Тогда
				//пмм
				//ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга;        
				Если ЭквайрингСводный Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно;        
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга;        
				КонецЕсли;	
				//пмм.
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101");
				
				Если (СтрокаДокумента.ПолучательИНН = "7744002275") //НЕФТЯНОЙ АЛЬЯНС (ОАО) КБ,  г. Москва 
					И (Организация.ИНН = "7734675810") Тогда //Вкусвилл                                                                                      
					СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000001819", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000000221")); //договор аренды оборудования	
				КонецЕсли;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.Получатель1), "оплата по договору 02/10/2010 от 15.10.2010") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010"); // Перемещения денежных средств
			ИначеЕсли (ВидДокумента = "РасходИзБанка") 
					И (ТипЗнч(ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "ФизическиеЛица").Владелец) = Тип("СправочникСсылка.ФизическиеЛица")) 
					И (Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "командир") > 0) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901015");
				
			ИначеЕсли (ВидДокумента = "РасходИзБанка") И ЗначениеЗаполнено(СтрокаДокумента.ПолучательСчет) //+++АК LAGP 2018.11.02 б/н В исключительных случаях поиск выполняется по пустой строке, если у счёта физ.лица удалили номер, возникает ошибочная загрузка.
					И (ТипЗнч(ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "ФизическиеЛица").Владелец) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");	
			//+++АК sils 22.05.2018 0-000016121
			ИначеЕсли СокрЛП(Организация.ИНН) = "7734641716" и // Проект Избенка
				(Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "размещениесредстввдепозит") > 0)	Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310310"); //выдача займа
				
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент,);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
							КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			//---АК
			ИначеЕсли (Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "перечислениесредстввовклад") > 0)	Тогда
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310310"); //выдача займа
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита;
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				//СтрокаДокумента.СчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",,,СтрокаДокумента.Контрагент);
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент,);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
							КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			ИначеЕсли (Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "депозит") > 0)
					ИЛИ (Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "обеспечительн") > 0) Тогда
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131011").Ссылка; //Оплата депозита за аренду (торговых точек и магазинов)
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЕСТЬNULL(СУММА(ВЫБОР
				|				КОГДА СтатусыДоговоровАренды.ЗаключениеДоговора.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ), 0) КАК САрендодателем,
				|	ЕСТЬNULL(СУММА(ВЫБОР
				|				КОГДА СтатусыДоговоровАренды.ЗаключениеДоговора.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ), 0) КАК САрендатором
				|ИЗ
				|	РегистрСведений.СтатусыДоговоровАренды КАК СтатусыДоговоровАренды
				|ГДЕ
				|	СтатусыДоговоровАренды.Договор.Владелец = &Контрагент";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.САрендодателем > 0
							И Выборка.САрендатором = 0 Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю;
					ИначеЕсли Выборка.САрендодателем = 0
							И Выборка.САрендатором > 0 Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору;
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "аренд") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "арен помещен") > 0 Тогда
				
				Если Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат") > 0 Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю;
				КонецЕсли;
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010"); //Оплата аренды (торговых точек и магазинов)
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "ндс полученный за осуществление валютного контроля") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
				Если (СтрокаДокумента.ПолучательИНН = ""
						И СтрокаДокумента.ПолучательСчет = "60309810600080000001") Тогда //НЕФТЯНОЙ АЛЬЯНС (ОАО) КБ,  г. Москва 
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000000221");
				КонецЕсли;	
				Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					ТекстЗапросаДоговор =
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
					ЗапросДоговор = Новый Запрос(ТекстЗапросаДоговор);
					ЗапросДоговор.УстановитьПараметр("Владелец"		, СтрокаДокумента.Контрагент);
					ЗапросДоговор.УстановитьПараметр("Организация"	, Организация);
					ЗапросДоговор.УстановитьПараметр("ВидДоговора"	, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
					выборкаД = ЗапросДоговор.Выполнить().Выбрать();
					Если выборкаД.Следующий() Тогда
						СтрокаДокумента.ДоговорКонтрагента = ВыборкаД.Ссылка;
					КонецЕсли;
				КонецЕсли;	
				
				Если Организация.ИНН = "7726660031" //ЛугДаПоле
						ИЛИ Организация.ИНН = "7731626420" Тогда //Сельские продукты
					СтрокаДокумента.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_66");//избёнка общий
				Иначе
					СтрокаДокумента.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_67");//вкусвилл общий
				КонецЕсли;
				
			//+++АК LAGP 2018.03.19 ИП-00018082 Добавлена работа с платёжками по алиментам.	
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "алименты") > 0 Тогда			
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам;
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.СтатьяДДС = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("133110");		
				ПолучательСчёт = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательРасчСчет);
				СтрокаДокумента.Контрагент = ПолучательСчёт.Владелец;				
			//---АК LAGP	

			Иначе
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
				//СтрокаДокумента.ДоговорКонтрагента
				Если (СтрокаДокумента.ПолучательИНН = "7744002275") //НЕФТЯНОЙ АЛЬЯНС (ОАО) КБ,  г. Москва 
						И (Организация.ИНН = "7734675810") Тогда //Вкусвилл                                                                                      
					СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000001819", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000000221")); //договор аренды оборудования
				КонецЕсли;
				
			КонецЕсли;	
			
		// НЕ исходящий	
		Иначе
			
			//
			ЭтоСписаниеСКорпоративныхКарт = (ВидДокумента = "ПоступлениеВБанк"
												И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " отражено по операции ") > 0
												И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " с картой ") > 0
												И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " фио держателя ") > 0);
												
												
			//											
			ЭтоПервоначальныйВзнос = (ВидДокумента = "ПоступлениеВБанк" И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "первоначального взноса")) > 0;
			
			//+++АК LAGP 2018.04.02 ИП-00018263 Создание документа "Поступление в банк" с видом "Поступление от физ.лица"
			ЭтоПоступлениеОтФизЛица = НайтиФизлицоВНазначенииПлатежа(СтрокаДокумента.Плательщик);
			//---АК LAGP
			//+++АК LAGP 2018.06.07 ИП-00018821      							
			ЭтоИнкассацияСбербанк = (ВидДокумента = "ПоступлениеВБанк"
										И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "инкасс")) > 0
										И СтрокаДокумента.ПлательщикИНН = "7707083893"; //СберБанк
			//---АК LAGP
			//+++АК LAGP 2018.09.10 ИП-00019792 
			ЭтоИнкассацияФинчер = Ложь;
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтоПоступлениеОтФизЛица, "Наименование") = "Вкусвилл" И Найти(НРег(СтрокаДокумента.ПлательщикБанк1), "финчер") > 0 Тогда
				ЭтоПоступлениеОтФизЛица = Справочники.ФизическиеЛица.ПустаяСсылка();
				ЭтоИнкассацияФинчер		= Истина;
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000000203");
			КонецЕсли;	
			//---АК LAGP
			
			//
			Если ЭтоПервоначальныйВзнос Тогда
				
				//
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПлатаЗаОткрытиеКорпоративнойКарты;
				
				//
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОткрытиеКорпоративнойКарты;
				
				//
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391"); // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000016"); // Услуги банка
				
				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = СтрокаДокумента.СчетОрганизации;
				
				//
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Контрагенты");
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
				
			ИначеЕсли ЭтоСписаниеСКорпоративныхКарт Тогда
				
				//
				СтрокаДокумента.ВидДокумента = "ПоступлениеВБанк";
				
				//
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту;
				
				//
				Если Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат покупки") > 0 Тогда
					
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ВозвратПокупки;
				
					
				ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "взнос наличных") > 0 Тогда
					
					//
					СтрокаДокумента.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ВзносНаличных;
					
				КонецЕсли;
				
				//
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача денежных средств сотрудникам под отчет
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000026"); // Возврат подотчетных средст
				
				//
				СтрокаДокумента.СчетОрганизации = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Организации");
				СтрокаДокумента.СчетКонтрагента = СтрокаДокумента.СчетОрганизации;
				
				//
				РС = ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет, "Контрагенты");
				Если ЗначениеЗаполнено(РС) Тогда
					СтрокаДокумента.Контрагент = РС.Владелец;
					//СтрокаДокумента.СчетКонтрагента = РС;
				КонецЕсли;
				
			//+++АК LAGP 2018.06.07 ИП-00018821
			ИначеЕсли ЭтоИнкассацияСбербанк Тогда	
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация;
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.СтатьяДДС = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("901010"); //Перемещение ДС								
			//---АК LAGP	
			
			ИначеЕсли СтрокаДокумента.ПлательщикСчет = "30110810900009000024"//Альянс  
					ИЛИ СтрокаДокумента.ПлательщикСчет = "30233810000001000003"	
					ИЛИ СтрокаДокумента.ПлательщикСчет = "30232810700001000003"	// добавлен 13.03.15
					ИЛИ СтрокаДокумента.ПлательщикСчет = "30233810938040100000"//Сбер
					ИЛИ СтрокаДокумента.ПлательщикСчет = "30233810838000101000"// pozm 24.08.2017
					
					ИЛИ  Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "мерчант") > 0
					//+++АК POZM 2017.10.24 ИП-00016987 
					ИЛИ  Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "эквайринг") > 0 
					//---АК POZM 
				Тогда
				//пмм
				Если ЭквайрингСводный Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг;
				КонецЕсли;	
				//пмм.
				
				Если (СтрокаДокумента.ПолучательИНН = "7744002275") //НЕФТЯНОЙ АЛЬЯНС (ОАО) КБ,  г. Москва 
						И (Организация.ИНН = "7734675810") Тогда //Вкусвилл                                                                                      
					СтрокаДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000001819", Ложь,, Справочники.Контрагенты.НайтиПоКоду("000000221")); //договор аренды оборудования	
				КонецЕсли;
				
			ИначеЕсли СтрокаДокумента.ПлательщикИНН = "7750004337"
				//+++АК POZM 2018.02.15 ИП-00017874 
				ИЛИ СтрокаДокумента.ПлательщикИНН = "7750003904"
				
				//---АК POZM 
					ИЛИ (СтрокаДокумента.ПлательщикИНН = "7707083893"
							И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "проинкассированная денежная наличность") > 0) 
				    ИЛИ (СтрокаДокумента.ПлательщикИНН = "7734202860"
							И Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "переводпринятыхналичных") > 0)  Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "оплата по договору 02/10/2010 от 15.10.2010") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
				
			ИначеЕсли (Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "возвратдепозитаподепозитнойсделке") > 0)	Тогда
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310410"); //возврат займа
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозита;
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				//СтрокаДокумента.СчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",,,СтрокаДокумента.Контрагент);
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент,);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			//+++АК sils 21.05.2018 0-000016121 и ИП-00018824.02
			ИначеЕсли (СокрЛП(Организация.ИНН) = "7734641716" или // Проект Избенка
				СокрЛП(Организация.ИНН) = "7734675810") и   // Вкусвилл
				Найти(ВРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "УПЛАТАПРОЦЕНТОВПОДЕПОЗИТНОМУДОГОВОРУ") > 0 или 
				СокрЛП(Организация.ИНН) = "7734675810" и   // Вкусвилл
				Найти(ВРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), ВРег("ПеречисленыПроцентыПоДепозитнойСделке")) > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеПроцентовПоДепозиту;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310410"); //возврат займа
				
				Если ЗначениеЗаполнено(БанковскийСчет) и ЗначениеЗаполнено(БанковскийСчет.Банк) и СокрЛП(БанковскийСчет.Банк.Код) = "044525187" Тогда
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Т0002799");
				Иначе
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				КонецЕсли;
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;		
			ИначеЕсли (СокрЛП(Организация.ИНН) = "7734641716" или // Проект Избенка
				СокрЛП(Организация.ИНН) = "7734675810") и   // Вкусвилл
				(Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "возвратсуммыдепозитаподоговору") > 0) или
				СокрЛП(Организация.ИНН) = "7734675810" и   // Вкусвилл
				(Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), НРег("ВозвратДепозитаПоДепозитнойСделке")) > 0) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозита;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310410"); //возврат займа
				
				Если ЗначениеЗаполнено(БанковскийСчет) и ЗначениеЗаполнено(БанковскийСчет.Банк) и СокрЛП(БанковскийСчет.Банк.Код) = "044525187" Тогда
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Т0002799");
				Иначе
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				КонецЕсли;
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент,);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			//---АК
			ИначеЕсли (Найти(НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ","")), "перечисленыпроцентыподепозитнойсделке") > 0)	Тогда
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310410"); //возврат займа
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеПроцентовПоДепозиту;
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001506");
				//СтрокаДокумента.СчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",,,СтрокаДокумента.Контрагент);
				СтрокаНазначенияБезПробелов = НРег(СтрЗаменить(СтрокаДокумента.НазначениеПлатежа," ",""));
				НачНомераСделки = Найти(СтрокаНазначенияБезПробелов,"йсделке");
				КонНомераСделки = Найти(СтрокаНазначенияБезПробелов,"от");
				Если НачНомераСделки<>0 И КонНомераСделки<>0 Тогда
					НомерСделки = Сред(СтрокаНазначенияБезПробелов,НачНомераСделки+7,КонНомераСделки-НачНомераСделки-7);
					ВыборкаДоговоров=Справочники.ДоговорыКонтрагентов.Выбрать(,СтрокаДокумента.Контрагент);
					Пока ВыборкаДоговоров.Следующий() Цикл
						Если ВыборкаДоговоров.Организация<>Организация Тогда
							Продолжить;
						КонецЕсли;	
						Если Найти(СтрЗаменить(ВыборкаДоговоров.Наименование,".",""),НомерСделки)>0 Тогда
							СтрокаДокумента.ДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;		
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "займа") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "депозит") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "обеспечительн") > 0 Тогда
				
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131011").Ссылка; //Оплата депозита за аренду (торговых точек и магазинов)
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЕСТЬNULL(СУММА(ВЫБОР
				|				КОГДА СтатусыДоговоровАренды.ЗаключениеДоговора.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ), 0) КАК САрендодателем,
				|	ЕСТЬNULL(СУММА(ВЫБОР
				|				КОГДА СтатусыДоговоровАренды.ЗаключениеДоговора.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ), 0) КАК САрендатором
				|ИЗ
				|	РегистрСведений.СтатусыДоговоровАренды КАК СтатусыДоговоровАренды
				|ГДЕ
				|	СтатусыДоговоровАренды.Договор.Владелец = &Контрагент";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.САрендодателем > 0
							И Выборка.САрендатором = 0 Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя;
					ИначеЕсли Выборка.САрендодателем = 0
							И Выборка.САрендатором > 0 Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора;
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "аренд") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "арен помещен") > 0 Тогда
				
				Если Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат") > 0 Тогда
					//ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора;
				КонецЕсли;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010"); //Оплата аренды (торговых точек и магазинов)
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат средств по платежному поручению ") > 0 Тогда
				
				ПозицияОт		= Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " от ");
				ПозицияНачала	= Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "Возврат средств по платежному поручению ") +
									СтрДлина("Возврат средств по платежному поручению ") + 1;
				НомерПоручения	= Сред(СтрокаДокумента.НазначениеПлатежа, ПозицияНачала	, ПозицияОт - ПозицияНачала);
				ДатаДень		= Сред(СтрокаДокумента.НазначениеПлатежа, ПозицияОт + 4	, 2);
				ДатаМесяц		= Сред(СтрокаДокумента.НазначениеПлатежа, ПозицияОт + 7	, 2);
				ДатаГод			= Сред(СтрокаДокумента.НазначениеПлатежа, ПозицияОт + 10, 4);
				ДатаОпределена	= Ложь;
				Попытка
					ДатаПоручения	= Дата(Число(ДатаГод), Число(ДатаМесяц), Число(ДатаДень));
					ДатаОпределена	= Истина;
				Исключение
					
				КонецПопытки;	
				
				ЗапросПоискаДокумента = Новый Запрос;
				ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, Организация);
				ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"	, БанковскийСчет);					
				Если ДатаОпределена Тогда
					ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"	, НачалоДня(ДатаПоручения));
					ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"	, КонецДня(ДатаПоручения));
				Иначе
					ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"	, НачалоДня(СтрокаДокумента.ДатаДок - 7*24*60*60));
					ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"	, КонецДня(СтрокаДокумента.ДатаДок));
				КонецЕсли;	
				ЗапросПоискаДокумента.УстановитьПараметр("НомерВходящегоДокумента", НомерПоручения);								  
				ЗапросПоискаДокумента.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПлатежныеДокументы.Ссылка,
				|	ПлатежныеДокументы.Проведен,
				|	ПлатежныеДокументы.НомерВходящегоДокумента КАК Номер,
				|	ПлатежныеДокументы.Дата КАК Дата,
				|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
				|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
				|	ПлатежныеДокументы.Организация
				|ИЗ
				|	Документ.РасходИзБанка КАК ПлатежныеДокументы
				|ГДЕ
				|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
				|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации
				|	И ПлатежныеДокументы.Организация = &Организация
				|	И ПлатежныеДокументы.НомерВходящегоДокумента = &НомерВходящегоДокумента
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ,
				|	Номер";
												  
				Выборка = ЗапросПоискаДокумента.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИсходныйДок = Выборка.Ссылка;
					Если ИсходныйДок.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
						//ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя;	
					КонецЕсли;
					СтрокаДокумента.Контрагент			= ИсходныйДок.Контрагент;
					СтрокаДокумента.Договор				= ИсходныйДок.ДоговорКонтрагента;
					СтрокаДокумента.ДоговорКонтрагента	= ИсходныйДок.ДоговорКонтрагента;
					СтрокаДокумента.ИсходныйДокумент	= ИсходныйДок;
					СтрокаДокумента.СчетКонтрагента		= ИсходныйДок.СчетКонтрагента;
					//СтрокаДокумента.СтатьяДДС=Выборка.Ссылка.СтатьяДвиженияДенежныхСредств;
				КонецЕсли;	
				
			//+++АК LAGP 2018.10.30 ИП-00019645 Выдача займа Контрагенту-поставщику по условию/возврат в срок	
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат оплаты по соглашению") > 0 Тогда
				ВидОперацииДокумента 			= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
				СтрокаДокумента.СтатьяДДС 		= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310410"); //Возврат займов
				СтрокаДокумента.СтатьяДДС_Бух 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("000000010", Истина); //Возврат займов (ДДС БУ)
			//---АК LAGP	
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "возврат") > 0 Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика;
				
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "оплата по") > 0
					ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "оплата за") > 0 Тогда
					
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;	
				//СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110");
			//ИначеЕсли (ПоискБанковскогоСчета(СтрокаДокумента.ПлательщикСчет, "Организации").Владелец=БанковскийСчет.Владелец) Тогда
			//	Возврат; // такой приход не нужен, это отражается в расходе
			//	
			ИначеЕсли Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "оплата товара") > 0 Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
				
			//+++АК LAGP 2018.04.02 ИП-00018263 Создание документа "Поступление в банк" с видом "Поступление от физ.лица"	
			ИначеЕсли ЗначениеЗаполнено(ЭтоПоступлениеОтФизЛица) Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОтФизЛиц;
			    СтрокаДокумента.Контрагент = ЭтоПоступлениеОтФизЛица;
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("310410"); // Возврат займов
				СтрокаДокумента.СтатьяДДС_Бух = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901062"); // Поступления от денежных вкладов в уставный капиталл
			//---АК LAGP
			
			//+++АК LAGP 2018.09.10 ИП-00019792
			ИначеЕсли ЭтоИнкассацияФинчер Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация;
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
				СтрокаДокумента.СтатьяДДС = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("901010"); //Перемещение ДС
			//---АК LAGP
			
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
		
		Если ЭтоСписаниеСКорпоративныхКарт Тогда
			ТекДатаДок = ДатаДок;
			Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);

			Если ЗначениеЗаполнено(Результат) Тогда
				СтрокаДокумента.ДатаДок = Результат;
			Иначе
				ДатаДок = ТекДатаДок;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = ЭтотОбъект.БанковскийСчет;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		ЗапросПоискаСчета = Новый Запрос;

		Если ОрганизацияПлательщик(ВидДокумента)
				И НЕ ЭтоСписаниеСКорпоративныхКарт Тогда
			Если //(СтрокаДокумента.ПолучательИНН = "7730609207")
				 СтрокаДокумента.ПлательщикИНН = СтрокаДокумента.ПолучательИНН
					И Найти(СтрокаДокумента.НазначениеПлатежа, "Комиссия") > 0 Тогда
				СтрокаДокумента.ПолучательИНН 		= "7744002275";
				СтрокаДокумента.ПолучательКПП 		= "775001001";
				СтрокаДокумента.ПолучательРасчСчет 	= "70601810000001210223";
				СтрокаДокумента.ПолучательСчет 		= "70601810000001210223";
				СтрокаДокумента.ПолучательБанк1 	= "КБ ""НЕФТЯНОЙ АЛЬЯНС"" (ОАО)";
				СтрокаДокумента.ПолучательБИК 		= "044583994";
				СтрокаДокумента.ПолучательКорсчет 	= "30101810100000000994";
				СчетКонтрагента = "70601810000001210223";
				ИННКонтрагента 	= "7744002275";
				КППКонтрагента 	= "775001001";
			Иначе
				СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
				ИННКонтрагента 	= СтрокаДокумента.ПолучательИНН;
				КППКонтрагента 	= СтрокаДокумента.ПолучательКПП;
			КонецЕсли;
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			Если СтрокаДокумента.Плательщик1 = "ОАО ""Банк Москвы""" Тогда
				СтрокаДокумента.ПлательщикИНН = "7702000406";
				СтрокаДокумента.ПлательщикКПП = "770201001";
				ИННКонтрагента = "7702000406";
				КППКонтрагента = "770201001";
			Иначе
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			КонецЕсли;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		
		Если Найти(СтрокаДокумента.НазначениеПлатежа,"Пополнение СКС") > 0
				ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
			ЗапросПоискаСчета.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец,
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.НомерСчета
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица
			|	И БанковскиеСчета.НомерСчета = &НомерСчета";
			Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();	
		Иначе
			ЗапросПоискаСчета.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец,
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.НомерСчета
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			//+++АК LAGP 2018.11.28 б/н Просьба Полухоновой Ю.
			|	БанковскиеСчета.ПометкаУдаления = Ложь И
			//---АК LAGP
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник." + 
			//+++АК LAGP 2018.04.02 ИП-00018263 Создание документа "Поступление в банк" с видом "Поступление от физ.лица". Добавлена возможность поиска банковского счёта у физ.лица
			//	?(ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет, "Организации", "Контрагенты") + " 
				?(ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет, "Организации", ?(ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОтФизЛиц, "ФизическиеЛица", "Контрагенты")) + "
			//---АК LAGP
			|	" + ?(НЕ ПустаяСтрока(ИННКонтрагента) И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "алименты") = 0, "И БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента", "") + "   
			|	И БанковскиеСчета.НомерСчета = &НомерСчета"; //+++АК LAGP 2018.03.20 ИП-00018082 Добавлено условие с алиментами, у физ.лиц не указан ИНН, но счёт должен быть.
			Если НЕ ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
				Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Иначе
				Контрагент = Справочники.Организации.ПустаяСсылка();	
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Если ВыборкаПоиска.Следующий() Тогда
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
			СтрокаДокумента.Контрагент = Контрагент;
		Иначе  
			ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента ("+ СчетКонтрагента +").");
			СтрокаДокумента.СчетКонтрагента = "  Не найден ("+ СчетКонтрагента +")";
		КонецЕсли;
		
		Если ВыборкаПоиска.Количество() > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько(" + ВыборкаПоиска.Количество() +
													") одинаковых банковских счетов!");
		КонецЕсли;
		
		//+++АК LAGP 2018.06.08 ИП-00018673 Загрузка валютной платёжки | 2018.07.25 Проверка валютности перенесена с счёта контрагента на счёт организации
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) И ТипЗнч(СтрокаДокумента.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") И НЕ Исходяший Тогда
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.СчетОрганизации, "ВалютаДенежныхСредств") = Справочники.Валюты.НайтиПоКоду(643) Тогда
				ВидОперацииДокумента 		= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты;
				СтрокаДокумента.ВидОперации = ВидОперацииДокумента;	
			КонецЕсли;	
		КонецЕсли;
		//---АК LAGP
		
	КонецЕсли;
	
	//Оплата ЗП по ведомости
	Если Найти(СтрокаДокумента.НазначениеПлатежа, "Пополнение СКС") > 0   Тогда// Для Альянса
		//Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
		//Если  ДатаДок = ПустаяДата Тогда
		//	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
		//КонецЕсли;

		ЗапросПоВедомостям = Новый Запрос;
		ЗапросПоВедомостям.УстановитьПараметр("Организация"	, Организация);
		ЗапросПоВедомостям.УстановитьПараметр("Физлицо"		, СтрокаДокумента.Контрагент);
		ЗапросПоВедомостям.УстановитьПараметр("Дата"		, ДатаДок);
		ЗапросПоВедомостям.УстановитьПараметр("Сумма"		, Число(СтрокаДокумента.Сумма));
		ЗапросПоВедомостям.Текст =
		"ВЫБРАТЬ
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка,
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Проведен,
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Номер,
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Дата КАК Дата,
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации
		|ИЗ
		|	Документ.РасходИзБанка.ПеречислениеЗаработнойПлаты КАК РасходИзБанкаПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка КАК РасходИзБанка,
		|			СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо
		|		ИЗ
		|			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзБанка.ПеречислениеЗаработнойПлаты КАК РасходИзБанкаПеречислениеЗаработнойПлаты
		|				ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходИзБанкаПеречислениеЗаработнойПлаты.Ведомость
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка,
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ПО РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка = ЗарплатаКВыплатеОрганизацийЗарплата.РасходИзБанка
		|ГДЕ
		|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Проведен
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо = &Физлицо
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.Сумма = &Сумма
		|	И РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Организация = &Организация
		|	И (НЕ РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Оплачено
		|			ИЛИ НАЧАЛОПЕРИОДА(РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.ДатаОплаты, ДЕНЬ) = &Дата)
		|	И НАЧАЛОПЕРИОДА(РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка.Дата, ДЕНЬ) <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Результат = ЗапросПоВедомостям.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтрокаДокумента.Документ 	= Результат.Ссылка;
			СтрокаДокумента.Проведен 	= Результат.Проведен;
			СтрокаДокумента.НомерДок 	= Результат.Номер;
			СтрокаДокумента.ДатаДок	 	= Результат.Дата;
//			СтрокаДокумента.ВидОперации = Результат.ВидОперации;
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости;
			Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810338000005729" ИЛИ ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810738000005727" Тогда
				СтрокаДокумента.Контрагент = Сбербанк;
				Контрагент = Сбербанк;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли Найти(СтрокаДокумента.НазначениеПлатежа, "Заработная плата по  реестру") > 0
			ИЛИ Найти(СтрокаДокумента.НазначениеПлатежа, "Заработная плата по реестру") > 0
			ИЛИ Найти(СтрокаДокумента.НазначениеПлатежа, "Для зачисления по реестру") > 0	Тогда // для Сбербанка, по ведомости
		
		ЗапросПоВедомостям = Новый Запрос;
		ЗапросПоВедомостям.УстановитьПараметр("Организация"	, Организация);
		ЗапросПоВедомостям.УстановитьПараметр("ВидОперации"	, Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости);
		ЗапросПоВедомостям.УстановитьПараметр("Дата"		, ДатаДок);
		ЗапросПоВедомостям.УстановитьПараметр("Сумма"		, Число(СтрокаДокумента.Сумма));
		ЗапросПоВедомостям.Текст =
		"ВЫБРАТЬ
		|	РасходИзБанка.Ссылка,
		|	РасходИзБанка.Проведен,
		|	РасходИзБанка.Номер,
		|	РасходИзБанка.Дата КАК Дата,
		|	РасходИзБанка.ВидОперации
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.Проведен
		|	И РасходИзБанка.Организация = &Организация
		|	И (НЕ РасходИзБанка.Оплачено
		|			ИЛИ НАЧАЛОПЕРИОДА(РасходИзБанка.ДатаОплаты, ДЕНЬ) = &Дата)
		|	И НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, ДЕНЬ) <= &Дата
		|	И РасходИзБанка.ВидОперации = &ВидОперации
		|	И РасходИзБанка.СуммаДокумента = &Сумма
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Результат = ЗапросПоВедомостям.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтрокаДокумента.Документ = Результат.Ссылка;
			СтрокаДокумента.Проведен = Результат.Проведен;
			СтрокаДокумента.НомерДок = Результат.Номер;
			СтрокаДокумента.ДатаДок	 = Результат.Дата;
//			СтрокаДокумента.ВидОперации = Результат.ВидОперации;
			//СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости;
		КонецЕсли;
		СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости;
		Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810338000005729" ИЛИ ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810738000005727" Тогда
			СтрокаДокумента.Контрагент = Сбербанк;
			Контрагент = Сбербанк;
		КонецЕсли;	
	КонецЕсли;

	
	//Проверка на корректность БИКа плательщика/получателя
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		Если    	(Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04")
				ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4")
				ИЛИ Длина < 8 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК (" + СтрокаДокумента.ПлательщикБИК + ") плательщика!");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		Если    	(Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04")
				ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4")
				ИЛИ Длина < 8 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК (" + СтрокаДокумента.ПолучательБИК + ") получателя!");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	//пмм
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		Если СводныйПриходЭквайринг = Неопределено Тогда
			//ЗапросПоискаДокумента = Новый Запрос;
			//ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//							  |	ПоступлениеВБанк.Ссылка
			//							  |ИЗ
			//							  |	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
			//							  |ГДЕ
			//							  |	ПоступлениеВБанк.Дата МЕЖДУ &ДатаС И &ДатаПо
			//							  |	И ПоступлениеВБанк.Организация = &Организация
			//							  |	И ПоступлениеВБанк.СчетОрганизации = &СчетОрганизации
			//							  |	И НЕ ПоступлениеВБанк.ПометкаУдаления
			//							  |	И ПоступлениеВБанк.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно)";
			//ЗапросПоискаДокумента.УстановитьПараметр("ДатаС",НачалоДня(ДатаДок));							  
			//ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо",КонецДня(ДатаДок));							  
			//ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
			//ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
			//Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
			//КоличествоДок=результат.Количество();
			//Если результат.Следующий() Тогда
			//	СводныйПриходЭквайринг=результат.ссылка.ПолучитьОбъект();
			//	СводныйПриходЭквайринг.ЭквайрингРасшифровка.Очистить();
			//	Если КоличествоДок>1 Тогда
			//		ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько("+КоличествоДок+") сводных документов эквайринга!");
			//	КонецЕсли;
			//Иначе
			СводныйПриходЭквайринг = Документы.ПоступлениеВБанк.СоздатьДокумент();
			СводныйПриходЭквайринг.ВидОперации		= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно;
			СводныйПриходЭквайринг.Дата				= НачалоДня(ДатаДок);
			СводныйПриходЭквайринг.Организация		= Организация;
			СводныйПриходЭквайринг.СчетОрганизации	= БанковскийСчет;
				//СводныйПриходЭквайринг.Записать();
			//КонецЕсли;
			ТЗСводногоПрихода = СводныйПриходЭквайринг.ЭквайрингРасшифровка.Выгрузить();
			//ТЗСводногоПрихода.Колонки.Добавить("НомерВходящегоДокумента");
			ТЗСводногоПрихода.Колонки.Добавить("ДатаВходящегоДокумента");
			ТЗСводногоПрихода.Колонки.Добавить("Дата");
		КонецЕсли;
			
	ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно Тогда
		Если СводныйРасходЭквайринг = Неопределено Тогда
			//ЗапросПоискаДокумента = Новый Запрос;
			//ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//							  |	РасходИзБанка.Ссылка
			//							  |ИЗ
			//							  |	Документ.РасходИзБанка КАК РасходИзБанка
			//							  |ГДЕ
			//							  |	РасходИзБанка.Дата МЕЖДУ &ДатаС И &ДатаПо
			//							  |	И РасходИзБанка.Организация = &Организация
			//							  |	И РасходИзБанка.СчетОрганизации = &СчетОрганизации
			//							  |	И НЕ РасходИзБанка.ПометкаУдаления
			//							  |	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно)";
			//ЗапросПоискаДокумента.УстановитьПараметр("ДатаС",НачалоДня(ДатаДок));							  
			//ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо",КонецДня(ДатаДок));							  
			//ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
			//ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
			//Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
			//КоличествоДок=результат.Количество();
			//Если результат.Следующий() Тогда
			//	СводныйРасходЭквайринг=результат.ссылка.ПолучитьОбъект();
			//	СводныйРасходЭквайринг.ЭквайрингРасшифровка.Очистить();
			//	Если КоличествоДок>1 Тогда
			//		ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько("+КоличествоДок+") сводных документов отмены эквайринга!");
			//	КонецЕсли;
			//Иначе
			СводныйРасходЭквайринг = Документы.РасходИзБанка.СоздатьДокумент();
			СводныйРасходЭквайринг.ВидОперации		= Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно;
			СводныйРасходЭквайринг.Дата				= НачалоДня(ДатаДок);
			СводныйРасходЭквайринг.Организация		= Организация;
			СводныйРасходЭквайринг.СчетОрганизации	= БанковскийСчет;
				//СводныйПриходЭквайринг.Записать();
			//КонецЕсли;	
			ТЗСводногоРасхода = СводныйРасходЭквайринг.ЭквайрингРасшифровка.Выгрузить();
			ТЗСводногоРасхода.Колонки.Добавить("НомерВходящегоДокумента");
			ТЗСводногоРасхода.Колонки.Добавить("ДатаВходящегоДокумента");
			ТЗСводногоРасхода.Колонки.Добавить("Дата");
		КонецЕсли;
	//пмм.
	
	ИначеЕсли ЭтоСписаниеСКорпоративныхКарт Тогда //+++ZEZA	
	
		//
	    ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента"	, Число(СтрокаДокумента.Сумма));
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, ДатаДок - 7*86400);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, ДатаДок + 86400);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, ЭтотОбъект.Организация);
		
		//+++АК LAGP 2018.03.05 Поправлен механизм определения документа
		//ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПолучательСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПлательщикСчет);
		//---АК LAGP
		
		ЗапросПоискаДокумента.УстановитьПараметр("НомерСчетаКонтр"	, СтрокаДокумента.ПолучательСчет);		
		ЗапросПоискаДокумента.УстановитьПараметр("НомерВходящегоДокумента"	, СтрокаДокумента.Номер);
		
		//
		ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                              |	Таблица.Ссылка КАК Ссылка,
		                              |	Таблица.Проведен КАК Проведен,
		                              |	Таблица.НомерВходящегоДокумента КАК Номер,
		                              |	Таблица.Дата КАК Дата,
		                              |	Таблица.Контрагент КАК Контрагент
		                              |ИЗ
		                              |	Документ.РасходИзБанка КАК Таблица
		                              |ГДЕ
		                              |	НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
		                              |	И Таблица.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                              |	И Таблица.СуммаДокумента = &СуммаДокумента
		                              |	И Таблица.Организация = &Организация
		                              |	И Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт)
		                              |	И Таблица.СчетОрганизации.НомерСчета = &НомерСчета
		                              |
		                              |ОБЪЕДИНИТЬ
		                              |
		                              |ВЫБРАТЬ
		                              |	Таблица.Ссылка,
		                              |	Таблица.Проведен,
		                              |	Таблица.НомерВходящегоДокумента,
		                              |	Таблица.Дата,
		                              |	Таблица.Контрагент
		                              |ИЗ
		                              |	Документ.ПоступлениеВБанк КАК Таблица
		                              |ГДЕ
		                              |	НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
		                              |	И Таблица.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                              |	И Таблица.СуммаДокумента = &СуммаДокумента
		                              |	И Таблица.Организация = &Организация
		                              |	И Таблица.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПлатаЗаОткрытиеКорпоративнойКарты))
		                              |	И Таблица.СчетОрганизации.НомерСчета = &НомерСчетаКонтр
		                              |
		                              |УПОРЯДОЧИТЬ ПО
		                              |	Дата УБЫВ,
		                              |	Номер";
		
		Выборка = ЗапросПоискаДокумента.Выполнить().Выбрать();
				
		КоличествоДок = 0;
		Пока Выборка.Следующий() Цикл
			ВыборкаНомер = Выборка.Номер;
			Если (ВыборкаНомер = НомерДляПоискаДок)
					ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок Тогда
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ 	= Выборка.Ссылка;
					СтрокаДокумента.Проведен 	= Выборка.Проведен;
					СтрокаДокумента.НомерДок 	= ВыборкаНомер;
					СтрокаДокумента.ДатаДок 	= Выборка.Дата;
					СтрокаДокумента.Контрагент 	= Выборка.Контрагент;
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько (" + КоличествоДок + ") соответствующих документов!");
		КонецЕсли;

		//Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			Документ = СтрокаДокумента.Документ;
			СтрокаДокумента.СчетОрганизации = Документ.СчетОрганизации;
			СтрокаДокумента.Контрагент 		= Документ.Контрагент;
			СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
		КонецЕсли;
		
	// tuta 20150429
	ИначеЕсли ЛОЖЬ И ЭтоСписаниеСКорпоративныхКарт
	    	И ВсеРеквизитыПоискаЕсть Тогда
			
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.УстановитьПараметр("Сумма"		, Число(СтрокаДокумента.Сумма));
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"		, ДатаДок - 7*86400);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"		, ДатаДок + 86400);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"	, СтрокаДокумента.ПлательщикСчет);
		ПозКарты = Найти(НРег(СтрокаДокумента.НазначениеПлатежа), " по операциям с картой ");
		Если ПозКарты > 0 Тогда						
			//+++АК LAGP 2017.11.15 ИП-00017140
			//ТекКорпоративнаяКарта = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("НомерКорпоративнойКарты",
			//																			Сред(СтрокаДокумента.НазначениеПлатежа, ПозКарты + 23, 16)); //-было
			КорпКарта = НайтиКорпКарту(Сред(СтрокаДокумента.НазначениеПлатежа, ПозКарты + 23, 16));
			ТекКорпоративнаяКарта = КорпКарта;	
			//---АК LAGP
		Иначе
			ПозКарты = Найти(СтрокаДокумента.НазначениеПлатежа, " с картой Visa Business ");
			
			//+++АК LAGP 2017.11.15 ИП-00017140
			//ТекКорпоративнаяКарта = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("НомерКорпоративнойКарты",
			//																			Сред(СтрокаДокумента.НазначениеПлатежа, ПозКарты + 24, 16)); //-было
			КорпКарта = НайтиКорпКарту(Сред(СтрокаДокумента.НазначениеПлатежа, ПозКарты + 24, 16));
			ТекКорпоративнаяКарта = КорпКарта;
			//---АК LAGP
		КонецЕсли;
		ЗапросПоискаДокумента.УстановитьПараметр("КорпоративнаяКарта", ТекКорпоративнаяКарта);
		ЗапросПоискаДокумента.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасшифровкаПлатежа.Ссылка,
		|	РасшифровкаПлатежа.Ссылка.Проведен КАК Проведен,
		|	РасшифровкаПлатежа.НомерВходящегоДокумента КАК Номер,
		|	РасшифровкаПлатежа.Ссылка.Дата КАК Дата,
		|	РасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
		|	РасшифровкаПлатежа.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
		|	РасшифровкаПлатежа.Ссылка.СчетОрганизации КАК СчетОрганизации
		|ИЗ
		|	Документ.СписаниеСКорпоративныхКарт.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
		|	И РасшифровкаПлатежа.НомерКорпоративнойКарты = &КорпоративнаяКарта
		|	И РасшифровкаПлатежа.Сумма = &Сумма
		|	И РасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И РасшифровкаПлатежа.Ссылка.СчетКонтрагента.НомерСчета = &НомерСчета";
		
		Выборка = ЗапросПоискаДокумента.Выполнить().Выбрать();
				
		КоличествоДок = 0;
		Пока Выборка.Следующий() Цикл
			ВыборкаНомер = Выборка.Номер;
			Если (ВыборкаНомер = НомерДляПоискаДок)
					ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок Тогда
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ 		= Выборка.Ссылка;
					СтрокаДокумента.Проведен 		= Выборка.Проведен;
					СтрокаДокумента.НомерДок 		= ВыборкаНомер;
					СтрокаДокумента.ДатаДок 		= Выборка.Дата;
					СтрокаДокумента.Контрагент 		= Выборка.Контрагент;
					СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько (" + КоличествоДок + ") соответствующих документов!");
		КонецЕсли;

	ИначеЕсли ЭтоПополнениеБизнесСчета
	    	И ВсеРеквизитыПоискаЕсть Тогда
			
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента"	, Число(СтрокаДокумента.Сумма));
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, ДатаДок - 7*86400);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, ДатаДок + 86400);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, ЭтотОбъект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПлательщикСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("НомерСчетаКонтр"	, СтрокаДокумента.ПолучательСчет);
		ЗапросПоискаДокумента.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РасходИзБанка.Ссылка КАК Ссылка,
		|	РасходИзБанка.Проведен КАК Проведен,
		|	РасходИзБанка.НомерВходящегоДокумента КАК Номер,
		|	РасходИзБанка.Дата КАК Дата,
		|	РасходИзБанка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
		|	И РасходИзБанка.СуммаДокумента = &СуммаДокумента
		|	И РасходИзБанка.Организация = &Организация
		|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
		|	И РасходИзБанка.СчетОрганизации.НомерСчета = &НомерСчета
		|	И РасходИзБанка.СчетКонтрагента.НомерСчета = &НомерСчетаКонтр
		|	И РасходИзБанка.ПереводДСФизЛицамНаКарту
		|	И НЕ РасходИзБанка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	Номер";
		
		Выборка = ЗапросПоискаДокумента.Выполнить().Выбрать();
				
		КоличествоДок = 0;
		Пока Выборка.Следующий() Цикл
			ВыборкаНомер = Выборка.Номер;
			Если (ВыборкаНомер = НомерДляПоискаДок)
					ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок Тогда
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ 	= Выборка.Ссылка;
					СтрокаДокумента.Проведен 	= Выборка.Проведен;
					СтрокаДокумента.НомерДок 	= ВыборкаНомер;
					СтрокаДокумента.ДатаДок 	= Выборка.Дата;
					
					Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
						СтрокаДокумента.Контрагент 	= Выборка.Контрагент;
					КонецЕсли;
					
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько (" + КоличествоДок + ") соответствующих документов!");
		КонецЕсли;

		//Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			
			//
			Документ = СтрокаДокумента.Документ;
			
			//???
			Если ЗначениеЗаполнено(Документ.СчетОрганизации) Тогда
				СтрокаДокумента.СчетОрганизации = Документ.СчетОрганизации;
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(Документ.Контрагент) Тогда
				СтрокаДокумента.Контрагент = Документ.Контрагент;
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(Документ.СчетКонтрагента) Тогда
				//???СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли 	СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозита
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеПроцентовПоДепозиту	Тогда
		
		Если ВсеРеквизитыПоискаЕсть Тогда
		
			// При наличии нескольких предпочтение отдается первому с совпадающим номером счета
			ЗапросПоискаДокумента = Новый Запрос;
			ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента"	, Число(СтрокаДокумента.Сумма));
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок"			, ДатаДок);
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаДокПлюсДень"	, ДатаДок + 86400);
			
			ДатаС = ДатаДок - 7*86400; 
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, ДатаС);
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, ДатаДок + 86400);
			
			ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, Организация);
			ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"	, БанковскийСчет);
			ЗапросПоискаДокумента.УстановитьПараметр("УжеНайденныеДокументы",УжеНайденныеДокументы);
			
			ЗапросПоискаДокумента.УстановитьПараметр("Номер"			, СтрокаДокумента.Номер);
			//ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПлательщикСчет);
			ЗапросПоискаДокумента.УстановитьПараметр("Контрагент"	, СтрокаДокумента.Контрагент);
			
			
			ЗапросПоискаДокумента.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлатежныеДокументы.Ссылка,
			|	ПлатежныеДокументы.Проведен,
			|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,                       
			|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
			|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
			|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
			|	ПлатежныеДокументы.Организация
			|ИЗ
			|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
			|ГДЕ
			|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо) 
			
			|	И ПлатежныеДокументы.СуммаДокумента = &СуммаДокумента
			|	И ПлатежныеДокументы.Контрагент = &Контрагент
			|	И ПлатежныеДокументы.Организация = &Организация
			|	И ПлатежныеДокументы." + РеквизитНомера + " = &Номер
			|	И НЕ ПлатежныеДокументы.Ссылка В (&УжеНайденныеДокументы)
			
			|УПОРЯДОЧИТЬ ПО	
			|	Дата УБЫВ, Номер";
			
			Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
					
			СчетДляПоискаДок = ?(Исходяший, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
			ДлинаНомера = СтрДлина(НомерДляПоискаДок);
			КоличествоДок = 0;
			                                  
			Пока Результат.Следующий() Цикл
				
				ВыборкаНомер = Результат.Номер;
				
				Если ((ВыборкаНомер = НомерДляПоискаДок)
							ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок)
						И (НЕ ЗначениеЗаполнено(Результат.НомерСчета)
								ИЛИ Результат.НомерСчета = СчетДляПоискаДок) Тогда
						Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
				
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДок > 1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько(" + КоличествоДок + ") соответствующих документов!");
			КонецЕсли;
			
	
			//Если документ уже есть в ИБ, то берем все данные из него.
			ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
			Если ДокументНайден Тогда
				Документ = СтрокаДокумента.Документ;
				//СтрокаДокумента.ВидОперации = Документ.ВидОперации; 
				//СтрокаДокумента.СтатьяДДС = Документ.СтатьяДвиженияДенежныхСредств; 
				СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
				СтрокаДокумента.СчетОрганизации = БанковскийСчет;
				
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаДокумента.ВидДокумента <> "СписаниеСКорпоративныхКарт" Тогда //???ZEZA	 
		
		Если ВсеРеквизитыПоискаЕсть Тогда
		
			// При наличии нескольких предпочтение отдается первому с совпадающим номером счета
			ЗапросПоискаДокумента = Новый Запрос;
			ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента"	, Число(СтрокаДокумента.Сумма));
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок"			, ДатаДок);
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаДокПлюсДень"	, ДатаДок + 86400);
			//++msn
			ДатаС = ДатаДок - 7*86400; 
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаС"			, ДатаС);
			ЗапросПоискаДокумента.УстановитьПараметр("ДатаПо"			, ДатаДок + 86400);
			//++msn
			ЗапросПоискаДокумента.УстановитьПараметр("Организация"		, Организация);
			ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"	, БанковскийСчет);
			ЗапросПоискаДокумента.УстановитьПараметр("УжеНайденныеДокументы",УжеНайденныеДокументы);
			
			ЗапросПоискаДокумента.УстановитьПараметр("Номер"			, СтрокаДокумента.Номер);
			
			//+++АК LAGP 2018.04.02 ИП-00018263 Поиск документа "Поступление в банк" с видом "Поступление от физ.лица".
			Если Исходяший Тогда
				ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПлательщикСчет);
				ЗапросПоискаДокумента.УстановитьПараметр("НомерСчетаКонтр"	, СтрокаДокумента.ПолучательСчет);
			Иначе	
				ЗапросПоискаДокумента.УстановитьПараметр("НомерСчета"		, СтрокаДокумента.ПолучательСчет);
				ЗапросПоискаДокумента.УстановитьПараметр("НомерСчетаКонтр"	, СтрокаДокумента.ПлательщикСчет);
			КонецЕсли;	
			//---АК LAGP
			
			ЗапросПоискаДокумента.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлатежныеДокументы.Ссылка,
			|	ПлатежныеДокументы.Проведен,
			|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,                       
			|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
			|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
			|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
			|	ПлатежныеДокументы.Организация
			|ИЗ
			|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
			|ГДЕ
			//++msn
			|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо) 
			//|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
			//|		ИЛИ НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДокПлюсДень)
			//++msn
			|	И ПлатежныеДокументы.СуммаДокумента = &СуммаДокумента
			|	И ПлатежныеДокументы.СчетОрганизации.НомерСчета = &НомерСчета
			|	И ПлатежныеДокументы.СчетКонтрагента.НомерСчета = &НомерСчетаКонтр
			|	И ПлатежныеДокументы.Организация = &Организация
			|	И ПлатежныеДокументы." + РеквизитНомера + " = &Номер
			//+sstuman
			|	И НЕ ПлатежныеДокументы.ПометкаУдаления
			//-sstuman
			//+++ pozm
			|	И НЕ ПлатежныеДокументы.Ссылка В (&УжеНайденныеДокументы)
			//---pozm
			|УПОРЯДОЧИТЬ ПО	
			|	Дата УБЫВ, Номер";
			
			//+++АК LAGP 2018.11.01 б/н Письмо Полухоновой Ю. Поиск документа с игнорированием счёта
			Если СтрокаДокумента.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация") Тогда
				ЗапросПоискаДокумента.Текст = СтрЗаменить(ЗапросПоискаДокумента.Текст, "И ПлатежныеДокументы.СчетКонтрагента.НомерСчета = &НомерСчетаКонтр", "");
			КонецЕсли;
			//+++АК LAGP
			
			Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
					
			СчетДляПоискаДок = ?(Исходяший, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
			ДлинаНомера = СтрДлина(НомерДляПоискаДок);
			КоличествоДок = 0;
			                                  
			Пока Результат.Следующий() Цикл
				
				//ТипЧ = Новый ОписаниеТипов("Число");
				//ВыборкаНомер = ТипЧ.ПривестиЗначение(Прав(СокрЛП(Результат.Номер), ДлинаНомера));
				//ВыборкаНомер = Формат(ВыборкаНомер, "ЧЦ="+ДлинаНомера+"; ЧН=; ЧГ=0; ЧВН=");
				
				//sstuman
				//ВыборкаНомер = СокрЛ(Прав(СокрП(Результат.Номер), ДлинаНомера));
				//Попытка
				//	ВыборкаНомер = Число(ВыборкаНомер);
				//Исключение
				//КонецПопытки;
				ВыборкаНомер = Результат.Номер;
				//sstuman
				
				//Если ((ВыборкаНомер = НомерДляПоискаДок) ИЛИ (Прав(ВыборкаНомер, СтрДлина(ВыборкаНомер) - 1)) = НомерДляПоискаДок ИЛИ (Прав(НомерДляПоискаДок, СтрДлина(НомерДляПоискаДок) - 1)) = ВыборкаНомер) И (НЕ ЗначениеЗаполнено(Результат.НомерСчета) ИЛИ Результат.НомерСчета = СчетДляПоискаДок)
				Если ((ВыборкаНомер = НомерДляПоискаДок)
							ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок)
						И (НЕ ЗначениеЗаполнено(Результат.НомерСчета)
								ИЛИ Результат.НомерСчета = СчетДляПоискаДок)
						//sstuman
						И Результат.КонтрагентИНН = ?(Исходяший, СтрокаДокумента.ПолучательИНН, ?(СокрЛП(СтрокаДокумента.ПлательщикИНН) <> "", СтрокаДокумента.ПлательщикИНН, ?(Найти(Строка(СтрокаДокумента.СчетКонтрагента), "Не найден (") > 0, "", СтрокаДокумента.СчетКонтрагента.Владелец.ИНН))) Тогда
						//sstuman
						
					//+++АК LAGP 2018.11.30 Оптимизация. От МКБ часто приходят совпадающие входящие номера, проверка назначения добавлена											
					СтрокаНазначенияВБазе = ОбщегоНазначенияПовтИсп.ВернутьСтрокуПоУсловию(Результат.Ссылка.НазначениеПлатежа, Истина, Истина);
					СтрокаНазначенияВВыписке = ОбщегоНазначенияПовтИсп.ВернутьСтрокуПоУсловию(СтрокаДокумента.НазначениеПлатежа, Истина, Истина);
					Если НЕ ЗначениеЗаполнено(СтрокаНазначенияВБазе) ИЛИ НЕ ЗначениеЗаполнено(СтрокаНазначенияВВыписке) Тогда
						СтрокаНазначенияВБазе = СтрокаНазначенияВВыписке;
					КонецЕсли;	
					//---АК LAGP
					
					Если КоличествоДок = 0 И СтрокаНазначенияВБазе = СтрокаНазначенияВВыписке Тогда //+++АК LAGP 2018.11.26 Оптимизация. От МКБ часто приходят совпадающие входящие номера, проверка назначения добавлена
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
				//ИначеЕсли ((ВыборкаНомер = НомерДляПоискаДок) ИЛИ (Прав(ВыборкаНомер, СтрДлина(ВыборкаНомер) - 1)) = НомерДляПоискаДок) И (НЕ ЗначениеЗаполнено(Результат.НомерСчета) ИЛИ Результат.НомерСчета = СчетДляПоискаДок) 
				ИначеЕсли (ВыборкаНомер = НомерДляПоискаДок)
						И (НЕ ЗначениеЗаполнено(Результат.НомерСчета)
							ИЛИ Результат.НомерСчета = СчетДляПоискаДок) 
						И Результат.Ссылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
					Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
				ИначеЕсли (ВыборкаНомер = НомерДляПоискаДок)
						И ЗначениеЗаполнено(СтрокаДокумента.ИсходныйДокумент)
						И Результат.Ссылка.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа Тогда // Это возврат средств по другому документу. Плательщик и прочее может не совпадасть
					Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					
					КоличествоДок = КоличествоДок + 1;
				ИначеЕсли (ВыборкаНомер = НомерДляПоискаДок)
						И Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "ндс полученный за осуществление валютного контроля") > 0 Тогда // ИНН в выписке отсутствует, номер счета может не совпадать
					Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;	
				ИначеЕсли (ВыборкаНомер = НомерДляПоискаДок)
						И СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
						И Результат.Ссылка.СчетКонтрагента.Владелец = Организация Тогда // ИНН в выписке отсутствует, номер счета может не совпадать
					Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ 	= Результат.Ссылка;
						СтрокаДокумента.Проведен 	= Результат.Проведен;
						СтрокаДокумента.НомерДок 	= Результат.Номер;
						СтрокаДокумента.ДатаДок 	= Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
					
				//+++АК LAGP 2018.03.20 ИП-00018082 Добавлен поиск документов по умолчанию (для платёжек по алиментам). 
				ИначеЕсли ((ВыборкаНомер = НомерДляПоискаДок)
							ИЛИ Прав(ВыборкаНомер, СтрДлина(НомерДляПоискаДок)) = НомерДляПоискаДок)
						И (НЕ ЗначениеЗаполнено(Результат.НомерСчета)
								ИЛИ Результат.НомерСчета = СчетДляПоискаДок) Тогда
					Если КоличествоДок = 0 Тогда
						СтрокаДокумента.Документ = Результат.Ссылка;
						СтрокаДокумента.Проведен = Результат.Проведен;
						СтрокаДокумента.НомерДок = Результат.Номер;
						СтрокаДокумента.ДатаДок = Результат.Дата;
						УжеНайденныеДокументы.Добавить(Результат.Ссылка);
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
				//---АК LAGP
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДок > 1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько(" + КоличествоДок + ") соответствующих документов!");
			КонецЕсли;
			
	
			//Если документ уже есть в ИБ, то берем все данные из него.
			ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
			Если ДокументНайден Тогда
				Документ = СтрокаДокумента.Документ;
				//СтрокаДокумента.ВидОперации = Документ.ВидОперации; 
				//СтрокаДокумента.СтатьяДДС = Документ.СтатьяДвиженияДенежныхСредств; 
				СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
				СтрокаДокумента.СчетОрганизации = БанковскийСчет;
				
				Если Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
					СтрокаДокумента.Контрагент = Документ.Организация;
				ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости
						ИЛИ Найти(НРег(СтрокаДокумента.НазначениеПлатежа), "ндс полученный за осуществление валютного контроля") > 0 Тогда
					//Ничего не делаем
				Иначе
					СтрокаДокумента.Контрагент = Документ.Контрагент;
				КонецЕсли;
				
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
						СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	//пмм
	КонецЕсли;
	//пмм.
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		
		Если ВидДокумента = "РасходИзБанка"
				И ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
				И НЕ ЭтоПополнениеБизнесСчета Тогда
		//Если (ВидДокумента = "ПлатежноеПоручениеИсходящее" 
		//	ИЛИ (ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" и ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет) Тогда
			СтрокаДокумента.Контрагент = Организация;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
			ЗапросПоискаКонтрагента = Новый Запрос;
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ЗапросПоискаКонтрагента.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |	Контрагенты.Ссылка,
            |	Контрагенты.ИНН,
            |	Контрагенты.Наименование,
            |	Контрагенты.КПП
            |ИЗ
            |	Справочник.Контрагенты КАК Контрагенты
            |ГДЕ
            |	Контрагенты.ИНН = &КонтрагентИНН";
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			//Ищем контрагента по ИНН, если указан КПП то и по нем
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			Если Не ПустаяСтрока(КППКонтрагента)Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			//Если не нашли и по ИНН и по КПП то попробуем поискать только по ИНН
			Если НайденныеКонтрагенты.Количество() = 0
					И НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 0 Тогда
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько (" + НайденныеКонтрагенты.Количество() +
														") контрагентов с одинаковым ИНН!");
			ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден контрагент (" + ИмяКонтрагента + ", ИНН " + ИННКонтрагента + ").");
				СтрокаДокумента.Контрагент = "  Не найден (" + ИмяКонтрагента + ", ИНН " + ИННКонтрагента + ")";
			КонецЕсли;
		ИначеЕсли СокрЛП(СтрокаДокумента.ПолучательИНН)="" И СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
			Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810338000005729" ИЛИ ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810738000005727" Тогда
				СтрокаДокумента.Контрагент = Сбербанк;
			КонецЕсли;	
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, "Не указан ИНН контрагента. ");
			СтрокаДокумента.Контрагент = "  Не найден (" + ИмяКонтрагента + ", не указан ИНН)";
		КонецЕсли;
		
	КонецЕсли;
		
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	//Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
	//	СписокВидовДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
	//	Если Не ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
	//		И Не ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
	//		И Не ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
	//		И СписокВидовДоговоров.Количество()>0  Тогда
	//		СтрокаДокумента.Договор = НайтиДоговорКонтрагента(СтрокаДокумента.Контрагент,Организация,СписокВидовДоговоров);
	//		
	//		Если СтрокаДокумента.Договор="Не найден"Тогда
	//			ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден договор. ");
	//		КонецЕсли;

	//	Иначе
	//		СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		//+++ АК Pans 20170407 ИП-00015475
		Если ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101");
		//+++АК POZM 2017.10.27 ИП-00016987 
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");
		//---АК POZM 
		//+++АК POZM 2017.11.30 ИП-00017354
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010");
		//---АК POZM 
		//+++АК LAGP 2018.06.08 ИП-00018673 Загрузка валютной платёжки
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			СтрокаДокумента.СтатьяДДС = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("210110");
			Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБанк1) Тогда
				Если Найти(ВРег(СтрЗаменить(СтрокаДокумента.ПлательщикБанк1, " ", "")), "VTBBANK") > 0 И НЕ Исходяший Тогда
					СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("Т0002799"); //ПАО ВТБ	
				КонецЕсли;		
			КонецЕсли;
		//---АК LAGP 
		Иначе
		//--- АК Pans 20170407 ИП-00015475
			//	СтрокаДокумента.СтатьяДДС = ПолучитьНастройкуЗаполнения(ИмяДокумента,"СтатьяДДС");
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтрокаДокумента.СтатьяДДС = СтрокаДокумента.Контрагент.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
	//+++АК POZM 2017.10.27 ИП-00016987 
	ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости И СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139391") Тогда
		СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");
	//---АК POZM 
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""),"-",""),",","")) Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходяший Тогда
			СтрокаДокумента.СуммаСписано 	= Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило 	= Сумма;
		КонецЕсли;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа(" + Буфер + ")!");
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//11) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> ""
			И НЕ ОбщегоНазначения.ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//12) Определим ДатаОтсылкиДок(для Платежного требования выставленное)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылки, СтрокаДокумента.ДатаОтсылкиДок);
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//13) Определим СрокПлатежаДок(для Аккредитива)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.СрокПлатежа) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.СрокПлатежаДок, СтрокаДокумента.СрокПлатежа);
	КонецЕсли;

	//_______________________________________________________________________________________________________________
	//14) Определим ПоказательДатыДок(для Платежного поручения исхожящего при перечислении налогов)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;

	//_______________________________________________________________________________________________________________
	//15) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.Дата);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
			//+++АК ILIK 2018.07.26 ИП-00019365
			Результат = ПолучитьДатуИзСтроки("00010101", Импорт_Заголовок.ДАТАКОНЦА);
			Если ЗначениеЗаполнено(Результат) Тогда
				СтрокаДокумента.Поступило = Результат;
			КонецЕсли;
			//---АК ILIK
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	//16)Определяем данные для возмещения по эквайрингу
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг
			//пмм
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно
			//пмм.
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга Тогда
		
		Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг 
				//пмм
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
				//пмм.
			СтрокаДокумента.ПроцентКомиссииБанка 	= ПолучитьПРоцентПоЭквайрингу(СтрокаДокумента.НазначениеПлатежа);
			СтрокаДокумента.СуммаКомиссииБанка 		= (СтрокаДокумента.СуммаДокумента * 100 / (100 - СтрокаДокумента.ПроцентКомиссииБанка)) -
														СтрокаДокумента.СуммаДокумента;
			Если СтрокаДокумента.ПроцентКомиссииБанка = 0 Тогда // Для сбера берём готовую сумму
				СтрокаДокумента.СуммаКомиссииБанка = ПолучитьСуммуКомиссииПоЭквайрингу(СтрокаДокумента.НазначениеПлатежа);
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101");
		
		//sstuman
		СтрокаДокумента.Терминал 		= ПолучитьТерминал(СтрокаДокумента.НазначениеПлатежа);
		//СтрокаДокумента.ТорговаяТочка = ПолучитьТорговуюТочкуТерминала(СтрокаДокумента.Терминал, СтрокаДокумента.ДатаПроведения, ТаблицаКешПривязокТТ);
		СтрокаДокумента.ТорговаяТочка 	= Эквайринг.Получить_ТТ_Терминала(СтрокаДокумента.ДатаПроведения,СтрокаДокумента.Терминал,ТаблицаКешПривязокТТ,ложь);
		//Если (Не ЗначениеЗаполнено(СтрокаДокумента.ТорговаяТочка))
		//	И (Организация.ИНН = "7731626420") Тогда
		//	СтрокаДокумента.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", 51);
		//	СтрокаДокумента.Терминал = Справочники.Терминалы.НайтиПоНаименованию("42561201");
		//КонецЕсли;
		//sstuman
	КонецЕсли;
	
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно Тогда
		СтрокаДокумента.Терминал 		= ПолучитьТерминал(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.ТорговаяТочка 	= Эквайринг.Получить_ТТ_Терминала(СтрокаДокумента.ДатаПроведения,СтрокаДокумента.Терминал,ТаблицаКешПривязокТТ,ложь);
		//Если (Не ЗначениеЗаполнено(СтрокаДокумента.ТорговаяТочка))
		//	И (Организация.ИНН = "7731626420") Тогда
		//	СтрокаДокумента.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", 51);
		//	СтрокаДокумента.Терминал = Справочники.Терминалы.НайтиПоНаименованию("42561201");
		//КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьВГКонтрагентов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ИспользоватьВГСчета = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

//
//
Процедура Загрузить(ДокументыКИмпорту) Экспорт
	
	ДокументыКИмпортуТЗ = ДокументыКИмпорту.Выгрузить(); //+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	
	//пмм
	Если НЕ СводныйПриходЭквайринг = Неопределено Тогда
		СводныйПриходЭквайринг.ЭквайрингРасшифровка.Очистить();
		ТЗСводногоПрихода = СводныйПриходЭквайринг.ЭквайрингРасшифровка.Выгрузить();
		//ТЗСводногоПрихода.Колонки.Добавить("НомерВходящегоДокумента");
		ТЗСводногоПрихода.Колонки.Добавить("ДатаВходящегоДокумента");
		
		ТЗСводногоПрихода.Колонки.Добавить("Дата");
	КонецЕсли;
	
	Если НЕ СводныйРасходЭквайринг = Неопределено Тогда
		СводныйРасходЭквайринг.ЭквайрингРасшифровка.Очистить();
		ТЗСводногоРасхода = СводныйРасходЭквайринг.ЭквайрингРасшифровка.Выгрузить();
		ТЗСводногоРасхода.Колонки.Добавить("НомерВходящегоДокумента");
		ТЗСводногоРасхода.Колонки.Добавить("ДатаВходящегоДокумента");
		
		ТЗСводногоРасхода.Колонки.Добавить("Дата");
	КонецЕсли;	
	//пмм.
	//+++АК POZM 2017.10.27 ИП-00016987 
	МКБ = Справочники.Контрагенты.НайтиПоКоду("Т0002607");
	ИмпортироватьМКБ = ДокументыКИмпортуТЗ.НайтиСтроки(Новый Структура("ВидОперации,Загружать,Контрагент",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация,Истина,МКБ));// МКБ
	Если ИмпортироватьМКБ.Количество()>0 Тогда
		//+++АК LAGP 2018.08.05 б/н исключение очистки всех документов инкассаций при загрузке нескольких
		//ОчиститьТЧИнкассации(МКБ,ДокументыКИмпорту[0].ДатаПроведения);
		МассивВходящихНомеров = Новый Массив;
		Для каждого СтрокаИмпортироватьМКБ Из ИмпортироватьМКБ Цикл
			МассивВходящихНомеров.Добавить(СтрокаИмпортироватьМКБ.НомерДок);	
		КонецЦикла;	
		ОчиститьТЧИнкассации(МКБ,ДокументыКИмпортуТЗ[0].ДатаПроведения, МассивВходящихНомеров);
		//---АК LAGP
	КонецЕсли;	
	//---АК POZM 
	ЗаполнитьКэшФизЛиц();			
	ЗаполнитьКэшКорпКарт(); //+++АК LAGP 2017.11.15 ИП-00017140 Создаем/перезаполняем кэш корпоративных карт для дальнейшего поиска по номеру.
		
	//mind получим массив контрагентов для расчетов через ВГ счета
	МассивВГКонтрагенты = ПолучитьВГКонтрагентов();
	Счет60ВГ = ПланыСчетов.Финансовый.ВГОРасчетыСПоставщикамиИПодрядчиками;
	Счет62ВГ = ПланыСчетов.Финансовый.ВГОРасчетыСПокупателями;
	
	НачалоИнтервалаЗагрузки = ПустаяДата;
	КонецИнтервалаЗагрузки  = ПустаяДата;
	ДокументыКИмпортуТЗ.Индексы.Добавить("Документ");
	
	СписокОплатПоВедомости 	= Новый СписокЗначений;
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить("В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	ДатаВыписки = Результат;
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата окончания интервала!", СтатусСообщения.ОченьВажное);
		//Возврат;
	КонецЕсли;
	
	ВидОперацииЭквайрингСводно 			= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно;
	ВидОперацииОтменаЭквайрингаСводно 	= Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно;
	
	// служ. переменные для списания с корп. карт
	КопияТаблицы 	= ДокументыКИмпортуТЗ.СкопироватьКолонки();
	КопияТаблицы.Колонки.Добавить("НомерСтрокиИмпорта");
	//МассивДатДока 	= Новый Массив;
	ТаблицаДатИВидовОперацииСКК = Новый ТаблицаЗначений;
	ТаблицаДатИВидовОперацииСКК.Колонки.Добавить("Дата");
	ТаблицаДатИВидовОперацииСКК.Колонки.Добавить("ВидОперации");
	СтруктураОтбораСКК 			= Новый Структура("Дата, ВидОперации");
	МассивДоков_СписаниеСКК		= Новый Массив;
	МассивДоков_ПополнениеБС 	= Новый Массив;
	
	// загружаем отмеченные секции документов
	Для каждого СтрокаСекции Из ДокументыКИмпортуТЗ Цикл
		
		//
		Если НЕ СтрокаСекции.Загружать Тогда
			Продолжить;
		КонецЕсли;	
		
		//
		Если (ПоискБанковскогоСчета(СтрокаСекции.ПлательщикСчет, "Организации").Владелец = ЭтотОбъект.БанковскийСчет.Владелец) И СтрокаСекции.ВидДокумента = "ПоступлениеВБанк" Тогда
			
			//
			Если СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту 
				И СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
				
				Продолжить;//Перемещение между счетами. Это отражается в документе расхода по другому счету
				
			КонецЕсли;
			
		КонецЕсли;	
		
		РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
		Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
			Сообщить("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.Номер + " от " + СтрокаСекции.Дата +
						" не может быть загружен:" + Символы.ПС + РезультатПроверки + "!", СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецЕсли;
		
		ЭтоСписаниеСКорпоративныхКарт 	= (СтрокаСекции.ВидДокумента = "СписаниеСКорпоративныхКарт");
		ЭтоПополнениеБизнесСчета 		= (Найти(СтрокаСекции.НазначениеПлатежа, "Пополнение Бизнес-счета согласно реестра") = 1
											ИЛИ Найти(СтрокаСекции.НазначениеПлатежа, "Пополнение бизнес-карты сотрудника") = 1);
		//
		Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
			//Без документа ведомость не грузим!!!!
			//Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
			//	Продолжить;
			//КонецЕсли;
				//пмм
			Если Найти(СтрокаСекции.НазначениеПлатежа, "Пополнение Бизнес-счета согласно реестра") = 1 Тогда
				Сообщить("Не обнаружен созданный документ пополнения Бизнес-счета на сумму " + СтрокаСекции.СуммаДокумента);
				Продолжить;
			КонецЕсли;
			Если НЕ (СтрокаСекции.ВидОперации = ВидОперацииЭквайрингСводно 
						ИЛИ СтрокаСекции.ВидОперации = ВидОперацииОтменаЭквайрингаСводно) Тогда
				//пмм.
				// В ИБ не найден документ, необходимо создать новый
				ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
				
			ИначеЕсли ЭтоСписаниеСКорпоративныхКарт Тогда
				НоваяСтрока = КопияТаблицы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСекции);
				НоваяСтрока.НомерСтрокиИмпорта = СтрокаСекции.НомерСтроки;
				СтруктураОтбораСКК.Дата 		= СтрокаСекции.Дата;
				СтруктураОтбораСКК.ВидОперации 	= СтрокаСекции.ВидОперации;
				Если ТаблицаДатИВидовОперацииСКК.НайтиСтроки(СтруктураОтбораСКК).Количество() = 0 Тогда
				//Если МассивДатДока.Найти(СтрокаСекции.Дата) = Неопределено Тогда
				//	МассивДатДока.Добавить(СтрокаСекции.Дата);
					НоваяСтрокаСКК = ТаблицаДатИВидовОперацииСКК.Добавить();
					НоваяСтрокаСКК.Дата 		= СтрокаСекции.Дата;
					НоваяСтрокаСКК.ВидОперации 	= СтрокаСекции.ВидОперации;
				КонецЕсли;
				Продолжить;
			КонецЕсли;	
		Иначе
			
			Если ЭтоСписаниеСКорпоративныхКарт Тогда
				Если МассивДоков_СписаниеСКК.Найти(СтрокаСекции.Документ) = Неопределено Тогда
					МассивДоков_СписаниеСКК.Добавить(СтрокаСекции.Документ);
				КонецЕсли;
				Продолжить;
			//ИначеЕсли ЭтоПополнениеБизнесСчета Тогда
			//	Если МассивДоков_ПополнениеБС.Найти(СтрокаСекции.Документ) = Неопределено Тогда
			//		МассивДоков_ПополнениеБС.Добавить(СтрокаСекции.Документ);
			//	КонецЕсли;
			//	Продолжить;
			КонецЕсли;
			
			// В ИБ найден документ, необходимо получить его объект
			ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
			Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
				Если СписокОплатПоВедомости.НайтиПоЗначению(ОбъектДокумента.Ссылка) = Неопределено Тогда
					СписокОплатПоВедомости.Добавить(ОбъектДокумента.Ссылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		//пмм
		Если СтрокаСекции.ВидОперации = ВидОперацииЭквайрингСводно Тогда
			ОбъектДокумента = СводныйПриходЭквайринг;
			ЭтоНовыйДокумент = Ложь;
			//ТекущаяСтрокаДокументаЭквайринг=СводныйПриходЭквайринг.ЭквайрингРасшифровка.добавить();
			//НомерСтрокиДокумента=СводныйПриходЭквайринг.ЭквайрингРасшифровка.Количество()-1;
			ТекущаяСтрокаДокументаЭквайринг = ТЗСводногоПрихода.Добавить();
			НомерСтрокиДокумента = ТЗСводногоПрихода.Количество() - 1;
		ИначеЕсли СтрокаСекции.ВидОперации = ВидОперацииОтменаЭквайрингаСводно Тогда
			ОбъектДокумента = СводныйРасходЭквайринг;
			ЭтоНовыйДокумент = Ложь;
			//ТекущаяСтрокаДокументаРасходаЭквайринг=СводныйРасходЭквайринг.ЭквайрингРасшифровка.добавить();
			//НомерСтрокиДокументаРасхода=СводныйРасходЭквайринг.ЭквайрингРасшифровка.Количество()-1;
			ТекущаяСтрокаДокументаРасходаЭквайринг = ТЗСводногоРасхода.Добавить();
			НомерСтрокиДокументаРасхода = ТЗСводногоРасхода.Количество() - 1;
		Иначе
			ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
		КонецЕсли;	
		//пмм.
		
		Если СокрЛП(ОбъектДокумента.Комментарий) = "" Тогда
			УстановитьСвойство(ОбъектДокумента, "Комментарий", "Загружен из Клиент-Банка");
		КонецЕсли;
		//пмм
		Если СтрокаСекции.ВидОперации = ВидОперацииЭквайрингСводно Тогда
			ЗаполнитьСтрокуРеквизитыДляЭквайринга(НомерСтрокиДокумента,СтрокаСекции);
		ИначеЕсли СтрокаСекции.ВидОперации = ВидОперацииОтменаЭквайрингаСводно Тогда
			ЗаполнитьСтрокуРеквизитыДляЭквайрингаРасход(НомерСтрокиДокументаРасхода,СтрокаСекции);
		Иначе
		//пмм.	
			//Заполняем все реквизиты документа
			ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
		//пмм	
		КонецЕсли;	
	    //пмм.
		
		//mika Дата: 2017.11.16 ИП-00017273
		//Отключить контроль "Стоп-оплат" для импорта банковской выписки
		Если НЕ ОбъектДокумента.ДополнительныеСвойства.Свойство("ИмпортБанковскойВыписки") Тогда 
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ИмпортБанковскойВыписки", Истина);
		КонецЕсли;
		//mika
		
		//Если НЕ ЭтоСписаниеСКорпоративныхКарт Тогда
			//Если контрагент не создан, то добавляем его реквизиты в табличную часть для дальнейшего использования
			ТипКонтрагента = ?(СтрокаСекции.ПлательщикСчет = БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
			НайденнаяСтрока = ЭтотОбъект.ТаблицаКонтрагентов.Строки.Найти(СтрокаСекции[ТипКонтрагента + "ИНН"], "Значение", Истина);
			
			Если НайденнаяСтрока <> Неопределено
					И ОбъектДокумента.РеквизитыКонтрагента.Количество() = 0 Тогда
				
				НайденнаяСтрока = НайденнаяСтрока.Родитель;
				ОбъектДокумента.РеквизитыКонтрагента.Очистить();
				
				Для Счет = 0 По 2 Цикл
					НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
					НовыйРеквизит.Значение 		= НайденнаяСтрока.Строки[Счет].Значение;
					НовыйРеквизит.Реквизит		= НайденнаяСтрока.Строки[Счет].Реквизит;
				КонецЦикла;
				

				Для каждого Строка из НайденнаяСтрока.Строки Цикл
					Если Строка.Представление = "Р/счет"
							И Строка.Значение = СтрокаСекции[ТипКонтрагента + "СЧЕТ"] Тогда
						
						НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = Строка.Представление;
						НовыйРеквизит.Значение 		= Строка.Значение;
						НовыйРеквизит.Реквизит		= Строка.Реквизит;
						
						Для каждого ПодСтрока Из Строка.Строки Цикл
							НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
							НовыйРеквизит.Представление = ПодСтрока.Представление;
							НовыйРеквизит.Значение 		= ПодСтрока.Значение;
							НовыйРеквизит.Реквизит		= ПодСтрока.Реквизит;
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		//КонецЕсли;

		Если ОбъектДокумента.ПометкаУдаления Тогда
			ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
		КонецЕсли;
		
		//Если ЭтоСписаниеСКорпоративныхКарт Тогда
		//	ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции);
		//	
		//	Если НЕ ОбъектДокумента.ЭтоНовый() 
		//			И НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
		//		СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
		//		СтрокаСекции.НомерДок = ОбъектДокумента.Номер;
		//	КонецЕсли;
		//	Продолжить;
		//КонецЕсли;
		
		Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг
				ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга Тогда
			
			Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
				ОбъектДокумента.ПроцентКомиссииБанка 	= СтрокаСекции.ПроцентКомиссииБанка;
				ОбъектДокумента.СуммаКомиссииБанка 		= СтрокаСекции.СуммаКомиссииБанка;
			КонецЕсли;
			
			//sstuman
			ОбъектДокумента.Терминал 		= СтрокаСекции.Терминал;
			ОбъектДокумента.ТорговаяТочка 	= СтрокаСекции.ТорговаяТочка;
			//sstuman
		КонецЕсли;
		
		//пмм
		Если ОбъектДокумента.ВидОперации = ВидОперацииЭквайрингСводно Тогда
			//ТекущаяСтрокаДокументаЭквайринг.ПроцентКомиссииБанка 	= СтрокаСекции.ПроцентКомиссииБанка;
			ТекущаяСтрокаДокументаЭквайринг.СуммаКомиссииБанка 		= СтрокаСекции.СуммаКомиссииБанка;
			ТекущаяСтрокаДокументаЭквайринг.Терминал 				= СтрокаСекции.Терминал;
			ТекущаяСтрокаДокументаЭквайринг.ТорговаяТочка 			= СтрокаСекции.ТорговаяТочка;
		ИначеЕсли ОбъектДокумента.ВидОперации = ВидОперацииОтменаЭквайрингаСводно Тогда
			//ТекущаяСтрокаДокументаЭквайринг.СуммаКомиссииБанка 	= СтрокаСекции.СуммаКомиссииБанка;
			ТекущаяСтрокаДокументаРасходаЭквайринг.Терминал 		= СтрокаСекции.Терминал;
			ТекущаяСтрокаДокументаРасходаЭквайринг.ТорговаяТочка 	= СтрокаСекции.ТорговаяТочка;	
		КонецЕсли;
		//пмм.
		
		СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ОбъектДокумента.ВидОперации);
		Если СписокВидовДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ОбъектДокумента.ДоговорКонтрагента = ПодобратьДоговорСПокупателем(ОбъектДокумента);
			// точку из договора берём для любых условий
			//Если ОбъектДокумента.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем и ОбъектДокумента.ДоговорКонтрагента.Субаренда Тогда
			//	 ОбъектДокумента.ТорговаяТочка=ОбъектДокумента.ДоговорКонтрагента.ТорговаяТочка;
			//КонецЕсли;	
		КонецЕсли;	
		
		//sstuman
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ОбъектДокумента.ДоговорКонтрагента,ОбъектДокумента.Контрагент,ОбъектДокумента.Организация,СписокВидовДоговора);
		КонецЕсли;			
		
		//Определим реквизиты БУ
		ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Если (НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ))
				И (НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ)) Тогда
			Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.РасходИзБанка") Тогда
				Если Найти(НРег(ОбъектДокумента.НазначениеПлатежа), "оплата по договору 02/10/2010 от 15.10.2010") > 0 Тогда
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
					ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				Иначе
					ОбъектДокумента.УстановитьСчетаУчетаБУ();
				КонецЕсли;
			Иначе
				Если Найти(НРег(ОбъектДокумента.НазначениеПлатежа), "оплата по договору 02/10/2010 от 15.10.2010") > 0 Тогда
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
					ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
				ИначеЕсли Найти(НРег(ОбъектДокумента.НазначениеПлатежа), "лг/вк-п от 23,02,2012") > 0 Тогда
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
					ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				Иначе
					ОбъектДокумента.УстановитьСчетаУчетаБУ();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		УстановитьДоговор(ОбъектДокумента);
		//sstuman
		
		Если ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница) Тогда
			 ОбъектДокумента.ТорговаяТочка = ОбъектДокумента.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;	 
		ИначеЕсли ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента.ТорговаяТочка) Тогда
			 ОбъектДокумента.ТорговаяТочка = ОбъектДокумента.ДоговорКонтрагента.ТорговаяТочка;	 	 
		КонецЕсли;	
		 
		Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			Если ЭтоПополнениеБизнесСчета Тогда
				
				//
				ПополнениеКорпоративнойКарты_Заполнить(ОбъектДокумента, "РасходИзБанка", СтрокаСекции);
				
				
				//ОбъектДокумента.Контрагент = СтрокаСекции.Контрагент;
				//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом 		= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
				//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
				//ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
				//ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ 	= СтрокаСекции.СтатьяДДС_Бух; //???ZEZA Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000021"); // пополнение расчетного счета
				//ОбъектДокумента.СубконтоДт1 		= ОбъектДокумента.Организация;
				//ОбъектДокумента.СубконтоДт2 		= ОбъектДокумента.СчетКонтрагента;
				//ОбъектДокумента.ПереводДСФизЛицамНаКарту = Истина;
				//Если Найти(СтрокаСекции.НазначениеПлатежа, "пополнениебизнес-картысотрудника") = 1 Тогда
				//	ПозСумма = Найти(СтрокаСекции.НазначениеПлатежа, "Сумма");
				//	Если ПозСумма > 0 Тогда
				//		ТекКорпКарта = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("НомерКорпоративнойКарты",
				//																			Сред(СтрокаСекции.НазначениеПлатежа, ПозСумма - 16, 16));
				//		ОбъектДокумента.СубконтоДт3	= ТекКорпКарта;
				//		Если НЕ ТекКорпКарта.Пустая() Тогда
				//			Если ОбъектДокумента.ОплатаПоФизЛицам.Количество() > 0 Тогда
				//				ОбъектДокумента.ОплатаПоФизЛицам.Очистить();
				//			КонецЕсли;
				//			НоваяСтрока = ОбъектДокумента.ОплатаПоФизЛицам.Добавить();
				//			НоваяСтрока.НомерКорпоративнойКарты = ТекКорпКарта;
				//			НоваяСтрока.Физлицо					= ТекКорпКарта.ФизЛицо;
				//			НоваяСтрока.Сумма					= ОбъектДокумента.СуммаДокумента;
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЕсли;
				
			Иначе
				
				ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("51.1");
				ОбъектДокумента.СубконтоДт1 		= ОбъектДокумента.Организация;
				ОбъектДокумента.СубконтоДт2 		= ПоискБанковскогоСчета(ОбъектДокумента.СчетКонтрагента.НомерСчета, "Организации");
				ОбъектДокумента.СубконтоДт3 		= ОбъектДокумента.СтатьяДвиженияДенежныхСредств;
				ОбъектДокумента.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//+++ZEZA //20170321
		Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту Тогда
			
			//
			ВсеОК = ВозвратНаКорпоративнуюКарту_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			Если НЕ ВсеОК Тогда
				Продолжить;
			КонецЕсли;
			
		//+++АК LAGP 2018.02.28 ИП-00017984	
		//ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
		ИначеЕсли СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
		//---АК LAGP
		
			//
			//ВсеОК = ПервоначальныйВзносЗаОткрытиеКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);

			
			ВсеОК = ПополнениеКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			Если НЕ ВсеОК Тогда
				Продолжить;
			КонецЕсли;	
			
		//+++АК LAGP 2018.03.02 ИП-00017984	
		//ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
		ИначеЕсли СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты Тогда
			ВсеОК = СписаниеСКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			Если НЕ ВсеОК Тогда
				Продолжить;
			КонецЕсли;					
		//---АК LAG	
			
		//	
		ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
		
			Продолжить; //+++АК LAGP 2018.01.31 ИП-00017738 Операцию. создаёт "РасходИзБанка" созданный обработкой "ПлатёжныйКалендарьПоЗаявкамНаУслуги" на основании "Заявки на услуги" с видом "Плата за открытие корп.карты". 
						//Если тут не вставить пропуск, тогда создастся документ "ПоступлениеВБанк" (выпиской), который сдублирует движения.
		
			//
			//+++АК SHEP 20170503 закомментировал, ИП-00015728
			//Продолжить; //+++ZEZA /пропускаем и не записываем
			
			//
			//ВсеОК = ПервоначальныйВзносЗаОткрытиеКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			ВсеОК = ПлатаЗаОткрытиеКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			//---АК SHEP 20170503
			Если НЕ ВсеОК Тогда
				Продолжить;
			КонецЕсли;
			
		//+++АК LAGP 2018.02.28 ИП-00017984
		ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда
		//ИначеЕсли СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты Тогда
		//---АК LAGP
		
			//
			ВсеОК = СписаниеСКорпоративнойКарты_Заполнить(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
			Если НЕ ВсеОК Тогда
				Продолжить;
			КонецЕсли;
			
		Конецесли;	
		//---ZEZA
		
		//+++АК sils 19.09.2017	ИП-00015954
		//Требуется при загрузке "Расходов из банка" с определенным назначением платежа устанавливать нужные статьи ДДС и счета.
		//Чтобы не привязываться в коде к статьям ДДС по коду, добавляется регистр сведений "Корректировка выгрузки из клиент-банка"
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.РасходИзБанка") тогда
			Выборка = РегистрыСведений.АК_КорректировкаВыгрузкиИзКлиентБанка.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СокрЛП(Выборка.СодержаниеНазначенияПлатежа) = "" Тогда
					Продолжить;
				КонецЕсли;
				Если не ЗначениеЗаполнено(Выборка.СтатьяДДС_Фин) или не ЗначениеЗаполнено(Выборка.СтатьяДДС_Бух) 
					или не ЗначениеЗаполнено(Выборка.СчетФин) или не ЗначениеЗаполнено(Выборка.СчетБУ) или не ЗначениеЗаполнено(Выборка.СчетАвансовБУ) Тогда
					Продолжить;
				КонецЕсли;
				стр1 = СтрЗаменить(СокрЛП(СтрокаСекции.НазначениеПлатежа), " ", "");
				стр2 = СтрЗаменить(СокрЛП(Выборка.СодержаниеНазначенияПлатежа), " ", "");
				Если Найти(НРег(стр1), НРег(стр2)) <> 0 Тогда
					ОбъектДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДДС_Фин.Ссылка;
					ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = Выборка.СтатьяДДС_Бух.Ссылка;
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетФин;
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = Выборка.СчетБУ;
					ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ = Выборка.СчетАвансовБУ;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		//---АК
		
		//+++АК Susk (Суслин К.В.) 2017.12.08 б/н
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеВБанк") Тогда
			Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора
				ИЛИ  ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора Тогда
					ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000901010");
					
			//+++АК LAGP 2018.06.08 ИП-00018673 Загрузка валютной платёжки | Проверка валютности перенесена с счёта контрагента на счёт организации, т.к. валютных счетов может быть очень много у банка		
			ИначеЕсли ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты И 
				НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.СчетОрганизации, "ВалютаДенежныхСредств") = Справочники.Валюты.НайтиПоКоду(643) Тогда					
				
				ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("52");
			//---АК LAGP	
			
			КонецЕсли;
		КонецЕсли;
		//---АК Susk (Суслин К.В.)
		
		//+++АК LAGP 2018.10.30 ИП-00019645 Выдача займа Контрагенту-поставщику по условию/возврат в срок
		Если ЗначениеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.Финансовый
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.ДоговорКонтрагента, "ТипДоговораФинансы") = Перечисления.ТипыДоговоровФинансы.Займ
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств") = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310310") Тогда //Статья "Выдача займа"
				ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("58.2", "Финансовый");
				
				Если СтрокаСекции.ВидДокумента = "ПоступлениеВБанк" Тогда
					ОбъектДокумента.СубконтоКт1 					= ОбъектДокумента.Контрагент;
					ОбъектДокумента.СубконтоКт2 					= ОбъектДокумента.ДоговорКонтрагента;
					ОбъектДокумента.СтатьяДвиженияДенежныхСредств 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310410");   			//Возврат займов
					ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("000000010", Истина);   //Возврат займов БУ
				Иначе	
					ОбъектДокумента.СтатьяДвиженияДенежныхСредств 	= ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("310310");              //Выдача займов
					ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("000000008", Истина);   //Займы выданные БУ
					ОбъектДокумента.СубконтоДт1 					= ОбъектДокумента.Контрагент;
					ОбъектДокумента.СубконтоДт2 					= ОбъектДокумента.ДоговорКонтрагента;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		//---АК LAGP
		
		//koro 17031 Операции с контрагентами ВГ, которые оставляем на старых счетах
		ИсключенияВГ = Новый Массив;
		ИсключенияВГ.Добавить(Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт);
		ИсключенияВГ.Добавить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
		ИсключенияВГ.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту);
		
		//+++АК LAGP 2018.02.27 ИП-00017984 Оплата услуг банка - исключение ВГ
		ИсключенияВГ.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка);
		ИсключенияВГ.Добавить(Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты);
		//---АК LAGP
		
		//mind проставим счета ВГ для нужных контрагентов
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.РасходИзБанка") тогда
			Если ИсключенияВГ.Найти(ОбъектДокумента.ВидОперации) = Неопределено Тогда 
				Если МассивВГКонтрагенты.Найти(ОбъектДокумента.Контрагент) <> Неопределено И НЕ ОбъектДокумента.ДоговорКонтрагента.НеИспользоватьВГСчета Тогда  //+++АК LAGP 2018.04.03 Письмо от Рустема от 18.04.03
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет60ВГ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеВБанк") тогда
			Если ИсключенияВГ.Найти(ОбъектДокумента.ВидОперации) = Неопределено Тогда
				Если МассивВГКонтрагенты.Найти(ОбъектДокумента.Контрагент) <> Неопределено И НЕ ОбъектДокумента.ДоговорКонтрагента.НеИспользоватьВГСчета Тогда	//+++АК LAGP 2018.04.03 Письмо от Рустема от 18.04.03
					ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = Счет62ВГ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		//+++АК LAGP 2018.06.07 ИП-00018821
		Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация И СтрокаСекции.ПлательщикИНН = "7707083893" Тогда	 //СберБанк
			СтрокаСекции.НазначениеПлатежа = СтрЗаменить(СтрокаСекции.НазначениеПлатежа, " ", ""); //+++АК LAGP 2018.06.13 ИП-00018821 Иногда в назначении приходят пробелы которые не пробелы.
			СтрокаСекции.НазначениеПлатежа = СтрЗаменить(СтрокаСекции.НазначениеПлатежа, " ", "");
			ВхождениеНомераПТКАДМНайдено  = Найти(НРег(СтрокаСекции.НазначениеПлатежа), "подог.n");
			ВхождениеНомераПТКАДМНайдено2 = Найти(НРег(СтрокаСекции.НазначениеПлатежа), "ден.нал.через"); //+++АК LAGP 2018.07.10 ИП-00018821.01 второй вариант назначения
			Если ВхождениеНомераПТКАДМНайдено > 0 Тогда
				СтрокаНомерПТКАДМ = "";
				СтрокаПроверки = Прав(СтрокаСекции.НазначениеПлатежа, СтрДлина(СтрокаСекции.НазначениеПлатежа) - ВхождениеНомераПТКАДМНайдено - 6);
				Для Ном = 1 По СтрДлина(СтрокаПроверки) Цикл
					КодСимвола = КодСимвола(Сред(СтрокаПроверки, Ном, 1));
					ЦифраВНомерПТКАДМ = Сред(СтрокаПроверки, Ном, 1);
					Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
						СтрокаНомерПТКАДМ = СтрокаНомерПТКАДМ + ЦифраВНомерПТКАДМ;
						ЦифрыЗакончились = Истина;
					ИначеЕсли ЦифрыЗакончились Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
				Если СтрДлина(СтрокаНомерПТКАДМ) > 0 Тогда
					ПолученныеРасходыИзКассы = ПолучитьРасходИзКассыПоНомеруПТКАДМ(СтрокаНомерПТКАДМ, СтрокаСекции.Контрагент, СтрокаСекции.СуммаДокумента, СтрокаСекции.Поступило);						
					Для каждого СтрокаРасходИзКассы Из ПолученныеРасходыИзКассы Цикл						
						СтрокаИнкассации = ОбъектДокумента.Инкассация.Добавить();
						СтрокаИнкассации.ДокументРасхода = СтрокаРасходИзКассы.ДокументРасходИзКассы;
						СтрокаИнкассации.Сумма           = СтрокаРасходИзКассы.СуммаДокумента;
					КонецЦикла;
				КонецЕсли;	
				
			//+++АК LAGP 2018.07.10 ИП-00018821.01 второй вариант назначения
			ИначеЕсли ВхождениеНомераПТКАДМНайдено2 > 0 Тогда
				СтрокаНомерПТКАДМ = "";
				СтрокаПроверки = Прав(СтрокаСекции.НазначениеПлатежа, СтрДлина(СтрокаСекции.НазначениеПлатежа) - ВхождениеНомераПТКАДМНайдено2 - 12);
				ЦифрыЗакончились = Ложь;
				НачаласьДата 	 = Ложь;
				Для Ном = 1 По СтрДлина(СтрокаПроверки) Цикл
					КодСимвола = КодСимвола(Сред(СтрокаПроверки, Ном, 1));
					ЦифраВНомерПТКАДМ = Сред(СтрокаПроверки, Ном, 1);					
					Если КодСимвола >= 48 И КодСимвола <= 57 Тогда //цифры
						СтрокаНомерПТКАДМ = СтрокаНомерПТКАДМ + ЦифраВНомерПТКАДМ;
						ЦифрыЗакончились = Истина;
					ИначеЕсли ЦифрыЗакончились Тогда
						
						КодСледСимвола = КодСимвола(Сред(СтрокаПроверки, Ном, 1));
						Если КодСледСимвола = 46 Тогда //точка
							НачаласьДата = Истина;	
						КонецЕсли;	
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаНомерПТКАДМ) И НачаласьДата Тогда
					СтрокаНомерПТКАДМ = Лев(СтрокаНомерПТКАДМ, СтрДлина(СтрокаНомерПТКАДМ) - 2);			
				КонецЕсли;	
				
				Если СтрДлина(СтрокаНомерПТКАДМ) > 0 Тогда
					ПолученныеРасходыИзКассы = ПолучитьРасходИзКассыПоНомеруПТКАДМ(СтрокаНомерПТКАДМ, СтрокаСекции.Контрагент, СтрокаСекции.СуммаДокумента, СтрокаСекции.Поступило);					
					Если НЕ ПолученныеРасходыИзКассы = Неопределено Тогда												
						Для каждого СтрокаРасходИзКассы Из ПолученныеРасходыИзКассы Цикл						
							СтрокаИнкассации = ОбъектДокумента.Инкассация.Добавить();
							СтрокаИнкассации.ДокументРасхода = СтрокаРасходИзКассы.ДокументРасходИзКассы;
							СтрокаИнкассации.Сумма           = СтрокаРасходИзКассы.СуммаДокумента;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
			//---АК LAGP 2018.07.10	
				
			КонецЕсли;	
			
		//+++АК LAGP 2018.09.14	ИП-00019696 Заполнение документов РасходИзКассы в ТЧ Инкассация
		ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация И СтрокаСекции.ПлательщикИНН = "7734202860" Тогда //МКБ
			СтрокаСекции.НазначениеПлатежа = СтрЗаменить(СтрокаСекции.НазначениеПлатежа, " ", ""); 
			СтрокаСекции.НазначениеПлатежа = СтрЗаменить(СтрокаСекции.НазначениеПлатежа, " ", "");
			ВхождениеНомераПТКАДМНайдено  = Найти(НРег(СтрокаСекции.НазначениеПлатежа), ")птс");
			Если ВхождениеНомераПТКАДМНайдено > 0 Тогда
				СтрокаНомерПТКАДМ = "";
				СтрокаПроверки = Прав(СтрокаСекции.НазначениеПлатежа, СтрДлина(СтрокаСекции.НазначениеПлатежа) - ВхождениеНомераПТКАДМНайдено - 3);
				Для Ном = 1 По СтрДлина(СтрокаПроверки) Цикл
					КодСимвола = КодСимвола(Сред(СтрокаПроверки, Ном, 1));
					ЦифраВНомерПТКАДМ = Сред(СтрокаПроверки, Ном, 1);
					Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
						СтрокаНомерПТКАДМ = СтрокаНомерПТКАДМ + ЦифраВНомерПТКАДМ;
						ЦифрыЗакончились = Истина;
					ИначеЕсли ЦифрыЗакончились Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтрДлина(СтрокаНомерПТКАДМ) > 0 Тогда
					ПолученныеРасходыИзКассы = ПолучитьРасходИзКассыПоНомеруПТКАДМ(СтрокаНомерПТКАДМ, СтрокаСекции.Контрагент, СтрокаСекции.СуммаДокумента, СтрокаСекции.Поступило);						
					Для каждого СтрокаРасходИзКассы Из ПолученныеРасходыИзКассы Цикл						
						СтрокаИнкассации = ОбъектДокумента.Инкассация.Добавить();
						СтрокаИнкассации.ДокументРасхода = СтрокаРасходИзКассы.ДокументРасходИзКассы;
						СтрокаИнкассации.Сумма           = СтрокаРасходИзКассы.СуммаДокумента;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
		//---АК LAGP	
			
		КонецЕсли;	
		//---АК LAGP
			
		//пмм
		Если СтрокаСекции.ВидОперации <> ВидОперацииЭквайрингСводно
				И СтрокаСекции.ВидОперации <> ВидОперацииОтменаЭквайрингаСводно Тогда
		//пмм.
			ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции);
			
			Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
				Если СписокОплатПоВедомости.НайтиПоЗначению(ОбъектДокумента.Ссылка) = Неопределено Тогда
					СписокОплатПоВедомости.Добавить(ОбъектДокумента.Ссылка);
				КонецЕсли;			
			КонецЕсли;	
			Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					Если СтрокаСекции.ВидДокумента = "РасходИзБанка" Тогда
						РеквизитДаты 	= "ДатаОплаты";
						РеквизитНомера 	= "Номер";
					Иначе
						РеквизитДаты 	= "ДатаВходящегоДокумента";
						РеквизитНомера 	= "НомерВходящегоДокумента";
					КонецЕсли;
					СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
				КонецЕсли;
			КонецЕсли;
		//пмм	
		КонецЕсли;
	    //пмм.
		
	КонецЦикла;
	
	// Списание с корп. карт - существующие документы, перезапись
	СтруктураОтбора = Новый Структура("Документ");
	Для Каждого ТекДокумент Из МассивДоков_СписаниеСКК Цикл		
		
		ОбъектДокумента = ТекДокумент.ПолучитьОбъект();
		ЭтоНовыйДокумент = Ложь;
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() > 0 Тогда
			ОбъектДокумента.РасшифровкаПлатежа.Очистить();
		КонецЕсли;
		
		СтруктураОтбора.Документ = ТекДокумент;
		СтрокиТаблицы = ДокументыКИмпортуТЗ.НайтиСтроки(СтруктураОтбора);
		ЗаполнитьРеквизитыШапкиСписаниеСКорпоративныхКарт(ОбъектДокумента, СтрокиТаблицы[0]);
		
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ДобавитьРасшифровкуПлатежаСписаниеСКорпоративныхКарт(ОбъектДокумента, СтрокаТаблицы);
		КонецЦикла;
		ОбъектДокумента.СуммаДокумента = ОбъектДокумента.РасшифровкаПлатежа.Итог("Сумма");
		
		Если ОбъектДокумента.ПометкаУдаления Тогда
			ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
		КонецЕсли;
		
		ЗаписатьОбъект(ОбъектДокумента, СтрокиТаблицы[0]);
		
	КонецЦикла;	
	
	// Списание с корп. карт - новые документы, запись
	СтруктураОтбора = Новый Структура("Дата");
	//Для Каждого ТекДата Из МассивДатДока Цикл		
	Для Каждого СтрокаТаблицыСКК Из ТаблицаДатИВидовОперацииСКК Цикл		
		
		ОбъектДокумента = Документы.СписаниеСКорпоративныхКарт.СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
		
		//СтруктураОтбора.Дата = ТекДата;
		СтруктураОтбораСКК.Дата 		= СтрокаТаблицыСКК.Дата;
		СтруктураОтбораСКК.ВидОперации 	= СтрокаТаблицыСКК.ВидОперации;
		СтрокиТаблицы = КопияТаблицы.НайтиСтроки(СтруктураОтбораСКК);
		
		ЗаполнитьРеквизитыШапкиСписаниеСКорпоративныхКарт(ОбъектДокумента, СтрокиТаблицы[0]);
		
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ДобавитьРасшифровкуПлатежаСписаниеСКорпоративныхКарт(ОбъектДокумента, СтрокаТаблицы);
		КонецЦикла;
		ОбъектДокумента.СуммаДокумента = ОбъектДокумента.РасшифровкаПлатежа.Итог("Сумма");
		
		ЗаписатьОбъект(ОбъектДокумента, СтрокиТаблицы[0]);
		
		//
		СтрокиТаблицы = ДокументыКИмпортуТЗ.НайтиСтроки(СтруктураОтбораСКК);
		Для Каждого СтрокаСекции Из СтрокиТаблицы Цикл
			СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
			СтрокаСекции.НомерДок = ОбъектДокумента.Номер;
		КонецЦикла;
		
	КонецЦикла;	
	
	
	Если СписокОплатПоВедомости.Количество() > 0 Тогда
		Отбор = Новый Структура;
		Для Каждого СтрокаСписка ИЗ СписокОплатПоВедомости Цикл
			ОплатаПоВедомости = СтрокаСписка.Значение;
			Отбор.Вставить("Документ", ОплатаПоВедомости);
			
			МассивСтрок = ДокументыКИмпортуТЗ.НайтиСтроки(Отбор);
			ОплатаПоВедомостиОбъект = ОплатаПоВедомости.ПолучитьОбъект();
			
			ОплатаПоВедомостиОбъект.ОплатаПоФизЛицам.Очистить();
			Для й = 0 по МассивСтрок.ВГраница() Цикл
				Если ТипЗнч(МассивСтрок[й].Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда //Альянс передаёт физлиц
					НоваяСтрока = ОплатаПоВедомостиОбъект.ОплатаПоФизЛицам.Добавить();
					НоваяСтрока.Физлицо 	= МассивСтрок[й].Контрагент;
					НоваяСтрока.СчетФизЛица = МассивСтрок[й].СчетКонтрагента;
					НоваяСтрока.Сумма		= МассивСтрок[й].Сумма;
				ИначеЕсли МассивСтрок.ВГраница() = 0
						И ТипЗнч(МассивСтрок[й].Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда // Сбербанк передаёт одмн сводный документ без расшифровки
					ОплатаПоВедомостиОбъект.СчетКонтрагента = Неопределено;
					Если ОплатаПоВедомостиОбъект.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
						ОплатаПоВедомостиОбъект.ПодобратьВедомости();
					КонецЕсли;	
					Для Каждого ведомость Из ОплатаПоВедомостиОбъект.ПеречислениеЗаработнойПлаты Цикл
						Для Каждого оплата Из Ведомость.Ведомость.Зарплата Цикл
							НоваяСтрока = ОплатаПоВедомостиОбъект.ОплатаПоФизЛицам.Добавить();
							НоваяСтрока.Сумма	= оплата.Сумма;
							НоваяСтрока.Физлицо	= Оплата.Физлицо;
						КонецЦикла;
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;                                             
			ОплатаПоВедомостиОбъект.Оплачено 	= Истина;
			ОплатаПоВедомостиОбъект.ДатаОплаты 	= МассивСтрок[0].ДатаПроведения;
			ОплатаПоВедомостиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Провели платеж по ведомости " + ОплатаПоВедомости);
		КонецЦикла;
	КонецЕсли;
	
	
	// Платежные документы, отсутствующие в списке загруженных, помечаем на удаление
	//+++АК SHEP 20170503 закомментировал, ИП-00015728
	// Полухонова Юлия: 1. При загрузке выписки в клиент-банке (обработка) определенной операции (выброчно)
	// остальные уже сформированные по данной выписке платежные документы помечаются на удаление - так быть не должно.
	//СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
	//---АК SHEP 20170503
	Если НачалоИнтервалаЗагрузки < Дата(2015, 5, 1) Тогда
		СинхронизироватьСписанияСККПоСчетам(ДокументыКИмпортуТЗ, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
	КонецЕсли;
	
	
	Если СводныйПриходЭквайринг <> Неопределено Тогда
		Если ЭквайрингСводный Тогда
			ИсходныйДок = СводныйПриходЭквайринг.Скопировать();
			ИсходныйДок.ЭквайрингРасшифровка.Очистить();
			СводнаяТЗСводногоПрихода = ТЗСводногоПрихода.Скопировать();
			СводнаяТЗСводногоПрихода.Свернуть("Дата, Терминал, ТорговаяТочка", "СуммаДокумента, СуммаКомиссииБанка");
			СводнаяТЗСводногоПрихода.Сортировать("Дата, Терминал, ТорговаяТочка");
			ТекДата = "";
			Для каждого Стр из СводнаяТЗСводногоПрихода Цикл
				Если стр.Дата<>ТекДата Тогда
					Если ТекДата<>"" Тогда
						ЗаписатьПриходЭквайрингВSQL();
						ЗаписатьДокументПриходаЭквайринга();
					КонецЕсли;	
					СводныйПриходЭквайринг = НайтиСоздатьСводныйПриходЭквайринга(ИсходныйДок, Стр.Дата);
					ТекДата = Стр.Дата;
				КонецЕсли;	
				НС = СводныйПриходЭквайринг.ЭквайрингРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Стр);
			КонецЦикла;	
			
			Если СводныйПриходЭквайринг.ЭквайрингРасшифровка.Количество()>0 Тогда
				ЗаписатьПриходЭквайрингВSQL();
				ЗаписатьДокументПриходаЭквайринга();
			КонецЕсли;	
		Иначе
			ЗаписатьПриходЭквайрингВSQL(Истина);
			СводныйПриходЭквайринг.Записать(РежимЗаписиДокумента.Запись);
			СводныйПриходЭквайринг.УстановитьПометкуУдаления(Истина);
			Сообщить("Помечен на удаление " + СводныйПриходЭквайринг);
		КонецЕсли;	
	КонецЕсли;
	
	Если СводныйРасходЭквайринг <> Неопределено Тогда
		Если ЭквайрингСводный Тогда
			ИсходныйДок = СводныйРасходЭквайринг.Скопировать();
			ИсходныйДок.ЭквайрингРасшифровка.Очистить();
			СводнаяТЗСводногоРасхода = ТЗСводногоРасхода.Скопировать();
			СводнаяТЗСводногоРасхода.Свернуть("Дата, Терминал, ТорговаяТочка", "СуммаДокумента");
			СводнаяТЗСводногоРасхода.Сортировать("Дата, Терминал, ТорговаяТочка");
			ТекДата="";
			Для каждого Стр из СводнаяТЗСводногоРасхода Цикл
				Если стр.Дата<>ТекДата Тогда
					Если ТекДата<>"" Тогда
						ЗаписатьРасходЭквайрингВSQL();
						ЗаписатьДокументРасходаЭквайринга();
					КонецЕсли;	
					СводныйРасходЭквайринг = НайтиСоздатьСводныйРасходЭквайринга(ИсходныйДок,Стр.Дата);
					Если НЕ ЗначениеЗаполнено(СводныйРасходЭквайринг.СчетУчетаРасчетовСКонтрагентом) Тогда
						СводныйРасходЭквайринг.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("44.3");
					КонецЕсли;	
					ТекДата = Стр.Дата;
				КонецЕсли;	
				НС=СводныйРасходЭквайринг.ЭквайрингРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
			КонецЦикла;	
			
			Если СводныйРасходЭквайринг.ЭквайрингРасшифровка.Количество()>0 Тогда
				ЗаписатьРасходЭквайрингВSQL();
				ЗаписатьДокументРасходаЭквайринга();
			КонецЕсли;	
		Иначе
			ЗаписатьРасходЭквайрингВSQL(Истина);
			СводныйРасходЭквайринг.Записать(РежимЗаписиДокумента.Запись);
			СводныйРасходЭквайринг.УстановитьПометкуУдаления(Истина);
			Сообщить("Помечен на удаление " + СводныйРасходЭквайринг);
		КонецЕсли;	
	КонецЕсли;

	ДокументыКИмпорту.Загрузить(ДокументыКИмпортуТЗ); //+++АК LAGP 2018.08.29 ИП-00019641 Табличное поле с возможностью отбора.
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////

//
//
Функция ПополнениеКорпоративнойКарты_Заполнить(ОбъектДокумента, ИмяДокумента, СтрокаСекции)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка КАК КорпоративнаяКарта,
		 |	Таблица.НомерКорпоративнойКарты,
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |	1 КАК Приоритет
		 //---АК ILIK
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + Таблица.НомерКорпоративнойКарты + ""%""
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка,
	     |	Таблица.НомерКорпоративнойКарты,
	     |	2
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + ПОДСТРОКА(Таблица.НомерКорпоративнойКарты, 13, 4) + ""%""
	     |	И НЕ &НазначениеПлатежа ПОДОБНО ""%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%""
	     |	И Таблица.ФизЛицо = &ФизЛицо
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Приоритет";
		//---АК ILIK
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НазначениеПлатежа", СтрокаСекции.НазначениеПлатежа);
	//+++АК ILIK 2018.11.14 ИП-00020404
	УстановитьПараметрФизЛицо(ПЗ, ОбъектДокумента);
	//---АК ILIK
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		Сообщить("Внимание! Для документа № " + СтрокаСекции.Номер + " (строка № " + СтрокаСекции.НомерСтроки + ") не удалось определить Корпоративную карту.", СтатусСообщения.Важное); 
		//Возврат Ложь;
	КонецЕсли;
	
	//
	ФизЛицо = Неопределено;
	НомерКарты = Неопределено;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		ФизЛицо = Выборка.ФизЛицо;
		НомерКарты = Выборка.КорпоративнаяКарта;
		
	КонецЕсли;
		
	//---ФИН
	
	//
	ОбъектДокумента.ВидОперации = СтрокаСекции.ВидОперации;
	ОбъектДокумента.ПереводДСФизЛицамНаКарту = Истина;
	
	//
	ОбъектДокумента.Контрагент = СтрокаСекции.Контрагент;
	
	//
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
	
	//
	ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
	ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
	
	//ДТ
	
	//
	ОбъектДокумента.СубконтоДт1 = ОбъектДокумента.Организация;
	ОбъектДокумента.СубконтоДт2 = СтрокаСекции.СчетКонтрагента;
	ОбъектДокумента.СубконтоДт3 = НомерКарты;
	
	
	//БУХ
	
	//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
	//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
	//Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда  //+++АК LAGP 2018.03.27 ИП-00018117 Добавлено условие на банковский счёт 696
	//	ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
	//Иначе
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный"); //+++АК LAGP 2018.04.12 Письмо от Рустема. В расходах из банк, счёт должен остаться 51
	//КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.02.21 ИП-00017918 Поиск счетов для открытия корп.карты через новую функцию. (счета сменились) 
	//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", ОбъектДокумента.Дата));
	//---АК LAGP
		
	//+++АК POZM 2017.11.21 ИП-00017297
	ОбъектДокумента.ОплатаПоФизЛицам.Очистить();
	//---АК POZM 
	//
	НоваяСтрока = ОбъектДокумента.ОплатаПоФизЛицам.Добавить();
	НоваяСтрока.ФизЛицо = ФизЛицо;
	НоваяСтрока.НомерКорпоративнойКарты = НомерКарты;
	НоваяСтрока.Сумма = ОбъектДокумента.СуммаДокумента;
	
	//
	Возврат ВсеОК;
	
КонецФункции

//
//
Функция ВозвратНаКорпоративнуюКарту_Заполнить(ОбъектДокумента, ИмяДокумента, СтрокаСекции)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка КАК КорпоративнаяКарта,
	     |	Таблица.НомерКорпоративнойКарты,
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |	1 КАК Приоритет
		 //---АК ILIK
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + Таблица.НомерКорпоративнойКарты + ""%""
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка,
	     |	Таблица.НомерКорпоративнойКарты,
	     |	2
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + ПОДСТРОКА(Таблица.НомерКорпоративнойКарты, 13, 4) + ""%""
		 |	И НЕ &НазначениеПлатежа ПОДОБНО ""%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%""
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Приоритет";
		//---АК ILIK
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НазначениеПлатежа", СтрокаСекции.НазначениеПлатежа);
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		Сообщить("Внимание! Для документа № " + СтрокаСекции.Номер + " (строка № " + СтрокаСекции.НомерСтроки + ") не удалось определить Корпоративную карту.", СтатусСообщения.Важное); 
		//Возврат Ложь;
	КонецЕсли;
	
	//
	ФизЛицо = Неопределено;
	НомерКарты = Неопределено;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		ФизЛицо = Выборка.ФизЛицо;
		НомерКарты = Выборка.КорпоративнаяКарта;
		
	КонецЕсли;
		
	//---ФИН
		
	//
	//+++АК SHEP 20170503 ИП-00015728
	//ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту;
	ОбъектДокумента.ВидОперации = СтрокаСекции.ВидОперации;
	//---АК SHEP 20170503
	ОбъектДокумента.ВидОперацииСКорпоративнойКартой = СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт;
	
	//
	ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
	ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
	
	//ДТ
	
	//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
	//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
	Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
	Иначе
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный");
	КонецЕсли;
	//---АК LAGP
	
	//
	ОбъектДокумента.СубконтоДт1 = ОбъектДокумента.Организация;
	ОбъектДокумента.СубконтоДт2 = ОбъектДокумента.СчетКонтрагента;
	ОбъектДокумента.СубконтоДт3 = НомерКарты;
	
	//---БУХ
	
	//КТ
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	
	//
	ОбъектДокумента.СубконтоКт1 = ОбъектДокумента.Организация;
	ОбъектДокумента.СубконтоКт2 = ФизЛицо;
	
	//
	Возврат ВсеОК;
	
КонецФункции

//
//
Функция ПервоначальныйВзносЗаОткрытиеКорпоративнойКарты_Заполнить(ОбъектДокумента, ИмяДокумента, СтрокаСекции)
	
	//
	ВсеОК = Истина;
	
	//---ФИН
	
	//
	ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты;
	ОбъектДокумента.ВидОперацииСКорпоративнойКартой = СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт;
	
	//
	ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
	ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
	
	//ДТ
	//+++АК POZM 2017.11.22 ИП-00017280 
	//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	
	//+++АК LAGP 2018.02.19 ИП-00017918
	//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ОбъектДокумента.Дата));
	//---АК LAGP
	
	//---АК POZM 
	//
	ОбъектДокумента.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
	ОбъектДокумента.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
	ОбъектДокумента.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003"); //Управление розницей		
	
	//---БУХ
	
	//КТ

	//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
	//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
	Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
	Иначе
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный");
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.02.19 ИП-00017918 Поиск счетов для открытия корп.карты через новую функцию. (счета сменились) 
	//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный", Новый Структура("ДатаЗапроса", ОбъектДокумента.Дата));
	//---АК LAGP
	
	//
	Возврат ВсеОК;
	
КонецФункции

//+++АК SHEP 20170503 ИП-00015728
Функция ПлатаЗаОткрытиеКорпоративнойКарты_Заполнить(ОбъектДокумента, ИмяДокумента, СтрокаСекции)
	
	//
	ВсеОК = Истина;
	
	//---ФИН
	
	ОбъектДокумента.ВидОперации = СтрокаСекции.ВидОперации;
	ОбъектДокумента.ВидОперацииСКорпоративнойКартой = СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт;
	
	ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
	ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
	
	//ДТ
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
	
	ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	ОбъектДокумента.СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;

	//
	ОбъектДокумента.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
	ОбъектДокумента.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
	ОбъектДокумента.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Управление розницей
		
	//---БУХ
	
	//КТ
	
	//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
	//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
	Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
	Иначе
		ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный");
	КонецЕсли;
	//---АК LAGP
	
	ОбъектДокумента.СубконтоКт1 = ЭтотОбъект.Организация;
	ОбъектДокумента.СубконтоКт2 = СтрокаСекции.СчетКонтрагента;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ФизЛицо,
		|	Таблица.Ссылка КАК КорпоративнаяКарта,
		|	Таблица.НомерКорпоративнойКарты,
		//+++АК ILIK 2018.11.14 ИП-00020404
		|	1 КАК Приоритет
		//---АК ILIK
		|ИЗ
		|	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
		|ГДЕ
		|	&НазначениеПлатежа ПОДОБНО ""%"" + Таблица.НомерКорпоративнойКарты + ""%""
		//+++АК ILIK 2018.11.14 ИП-00020404
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ФизЛицо,
		|	Таблица.Ссылка,
		|	Таблица.НомерКорпоративнойКарты,
		|	2
		|ИЗ
		|	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
		|ГДЕ
		|	&НазначениеПлатежа ПОДОБНО ""%"" + ПОДСТРОКА(Таблица.НомерКорпоративнойКарты, 13, 4) + ""%""
	    |	И НЕ &НазначениеПлатежа ПОДОБНО ""%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
		//---АК ILIK
	Запрос.УстановитьПараметр("НазначениеПлатежа", СтрокаСекции.НазначениеПлатежа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Внимание! Для документа № " + СтрокаСекции.Номер + " (строка № " + СтрокаСекции.НомерСтроки + ") не удалось определить Корпоративную карту.", СтатусСообщения.Важное);
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ОбъектДокумента.СубконтоКт3 = ВыборкаЗапроса.ФизЛицо;
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции
//---АК SHEP 20170503

//
//
Функция СписаниеСКорпоративнойКарты_Заполнить(ОбъектДокумента, ИмяДокумента, СтрокаСекции)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка КАК КорпоративнаяКарта,
	     |	Таблица.НомерКорпоративнойКарты,
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |	1 КАК Приоритет
		 //---АК ILIK
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + Таблица.НомерКорпоративнойКарты + ""%""
		 //+++АК ILIK 2018.11.14 ИП-00020404
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Таблица.ФизЛицо,
	     |	Таблица.Ссылка,
	     |	Таблица.НомерКорпоративнойКарты,
	     |	2
	     |ИЗ
	     |	Справочник.КорпоративныеБанковскиеКарты КАК Таблица
	     |ГДЕ
	     |	&НазначениеПлатежа ПОДОБНО ""%"" + ПОДСТРОКА(Таблица.НомерКорпоративнойКарты, 13, 4) + ""%""
	     |	И НЕ &НазначениеПлатежа ПОДОБНО ""%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%""
	     |	И Таблица.ФизЛицо = &ФизЛицо
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Приоритет";
		//---АК ILIK
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НазначениеПлатежа", СтрокаСекции.НазначениеПлатежа);
	//+++АК ILIK 2018.11.14 ИП-00020404
	УстановитьПараметрФизЛицо(ПЗ, ОбъектДокумента);
	//---АК ILIK
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		Сообщить("Внимание! Для документа № " + СтрокаСекции.Номер + " (строка № " + СтрокаСекции.НомерСтроки + ") не удалось определить Корпоративную карту.", СтатусСообщения.Важное); 
		//Возврат Ложь;
	КонецЕсли;
	
	//
	ФизЛицо = Неопределено;
	НомерКарты = Неопределено;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		ФизЛицо = Выборка.ФизЛицо;
		НомерКарты = Выборка.КорпоративнаяКарта;
		
	КонецЕсли;	
	
	
	//
	ОбъектДокумента.ОплатаПоФизЛицам.Очистить();
		
	//
	Если СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты Тогда
		
		//---ФИН
		
		//
		//+++АК LAGP 2018.02.20 ИП-00017984
		//ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт;
		ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка;
		//---АК LAGP
		
		ОбъектДокумента.ВидОперацииСКорпоративнойКартой = СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт;
		
		//
		ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
		ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
		
		//ДТ
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
		
		//
		ОбъектДокумента.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
		ОбъектДокумента.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услиги банка
		ОбъектДокумента.СубконтоДт3 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003"); //Управление розницей		
		
		//ТЧ
		
		//                                                                                       
		НоваяСтрока = ОбъектДокумента.ОплатаПоФизЛицам.Добавить();
		НоваяСтрока.ФизЛицо = ФизЛицо;
		НоваяСтрока.НомерКорпоративнойКарты = НомерКарты;
		НоваяСтрока.Сумма = ОбъектДокумента.СуммаДокумента;
		
		//---БУХ
		
		//КТ
		
		//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
		//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
		//Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда
		//	ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
		//Иначе
			ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный"); //+++АК LAGP 2018.04.12 Письмо от Рустема. В расходах из банк, счёт должен остаться 51
		//КонецЕсли;
		//---АК LAGP
		
		//+++АК LAGP 2018.02.20 ИП-00017984
		//ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("91.02", "Хозрасчетный");
		//---АК LAGP 
		
		//+++АК LAGP 2018.03.30 ИП-00017936 СубконтоБУ для обмена с БП 
		ОбъектДокумента.СубконтоДт1БУ = Справочники.ПрочиеДоходыИРасходыБУ.НайтиПоНаименованию("Расходы на услуги банков");
		//---АК LAGP
		
		//Субконто будут заполнены при проведении из ТЧ
		
	Иначе	
		
		//---ФИН
		
		//
		ОбъектДокумента.ВидОперацииСКорпоративнойКартой = СтрокаСекции.ВидОперацииСписанияСКорпоративныхКарт;
		
		//
		ОбъектДокумента.СтатьяДвиженияДенежныхСредств = СтрокаСекции.СтатьяДДС;
		ОбъектДокумента.СтатьяДвиженияДенежныхСредствБУ = СтрокаСекции.СтатьяДДС_Бух;
		
		//ДТ
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
		
		//
		ОбъектДокумента.СубконтоДт1 = ОбъектДокумента.Организация;
		ОбъектДокумента.СубконтоДт2 = ФизЛицо;
		
		//ТЧ
		
		//
		НоваяСтрока = ОбъектДокумента.ОплатаПоФизЛицам.Добавить();
		НоваяСтрока.ФизЛицо = ФизЛицо;
		НоваяСтрока.НомерКорпоративнойКарты = НомерКарты;
		НоваяСтрока.Сумма = ОбъектДокумента.СуммаДокумента;
		
		//---БУХ
		
		//КТ
		
		//+++АК LAGP 2018.03.21 ИП-00018117 Для корп. карт, счёт банк должен быть 51.02
		//ОбъектДокумента.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета; //???ZEZA
		//Если ЭтотОбъект.БанковскийСчет.НомерСчета = "40702810238000021696" Тогда
		//	ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.02", "Хозрасчетный");
		//Иначе
			ОбъектДокумента.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51", "Хозрасчетный"); //+++АК LAGP 2018.04.12 Письмо от Рустема. В расходах из банк, счёт должен остаться 51
		//КонецЕсли;
		//---АК LAGP
	
		ОбъектДокумента.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		
		//Субконто будут заполнены при проведении из ТЧ
		
	КонецЕсли;	
	
	//
	Возврат ВсеОК;
	
КонецФункции

//+++АК POZM 2017.10.27 ИП-00016987 
Процедура ОчиститьТЧИнкассации(МКБ,ЗаДату, МассивВходящихНомеров)
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПоступлениеВБанк.Ссылка
	             |ИЗ
	             |	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	             |ГДЕ
	             |	ПоступлениеВБанк.Дата МЕЖДУ &ДатаС И &ДатаПо
	             |	И ПоступлениеВБанк.ВидОперации = &ВидОперации
	             |	И ПоступлениеВБанк.Организация = &Организация
	             |	И ПоступлениеВБанк.Контрагент = &Контрагент
	             |	И ПоступлениеВБанк.НомерВходящегоДокумента В(&МассивВходящихНомеров)"; //+++АК LAGP 2018.08.05
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаС",началоДня(ЗаДату));
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(ЗаДату));
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Контрагент",МКБ);
	Запрос.УстановитьПараметр("МассивВходящихНомеров",МассивВходящихНомеров); //+++АК LAGP 2018.08.05
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		дОК = вЫБОРКА.ССЫЛКА.пОЛУЧИТЬоБЪЕКТ();
		Док.СоставДокументовИнкассации.Очистить();
		Док.СуммаДокумента = 0;
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать(РежимЗаписиДокумента.Запись);
		Сообщить(Док);
	КонеццИКЛА;	

КонецПроцедуры	
//---АК POZM 

//+++АК LAGP 2018.06.07 ИП-00018821 Для подстановки в ТЧ Инкассация документа ПоступлениеВБанк на основании назначения
Функция ПолучитьРасходИзКассыПоНомеруПТКАДМ(НомерПТК, Контрагент, СуммаДокумента, ДатаПоступленияПлатежки)

	//+++АК LAGP 2018.07.26 ИП-00018821.02 Немного переписан, чтобы исключить дубли по одинаковым параметрам
	ТаблицаРасходовИзКассы = Новый ТаблицаЗначений;
	ТаблицаРасходовИзКассы.Колонки.Добавить("ДокументРасходИзКассы");
	ТаблицаРасходовИзКассы.Колонки.Добавить("СуммаДокумента");
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
	//	|ИЗ
	//	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//	|ГДЕ
	//	|	СтруктурныеЕдиницы.НомерПТК = &НомерПТК
	//	|	И СтруктурныеЕдиницы.КонтрагентИнкассатор = &Контрагент";
	//
	//Запрос.УстановитьПараметр("НомерПТК"	, НомерПТК);
	//Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
	//
	//ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();	
	
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
	ДатаПроверкиНачало = ДатаПоступленияПлатежки - 60 * 60 * 24 * 5; //за последние 5 дней
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ДокументРасходИзКассы,
	|	РасходИзКассы.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходИзКассы.ВидОперации = &ВидОперацииРасходаИзКассы
	|	И РасходИзКассы.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
	|			ИЗ
	|				Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ГДЕ
	|				СтруктурныеЕдиницы.НомерПТК = &НомерПТК
	|				И СтруктурныеЕдиницы.КонтрагентИнкассатор = &Контрагент)
	|	И РасходИзКассы.СуммаДокумента = &СуммаДокумента
	|	И РасходИзКассы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходИзКассы.Дата";
	
	Запрос.УстановитьПараметр("НомерПТК"	, НомерПТК);
	Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
	Запрос.УстановитьПараметр("ВидОперацииРасходаИзКассы", Перечисления.ВидыОперацийРКО.Инкассация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПроверкиНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаПоступленияПлатежки);
	Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
	
	Результат = Запрос.Выполнить();
	
	
	Если НЕ Результат.Пустой() Тогда
		//ТаблицаРасходовИзКассы = Результат.Выгрузить();	
		ВыборкаРасходовИзКассы = Результат.Выбрать();
		Пока ВыборкаРасходовИзКассы.Следующий() Цикл
			ДокументУжеИспользованВПроведенномПоступленииВБанк = ПроверитьРасходИзКассыНаПовтор(ВыборкаРасходовИзКассы.ДокументРасходИзКассы, ДатаПроверкиНачало, ДатаПоступленияПлатежки);			
			Если НЕ ДокументУжеИспользованВПроведенномПоступленииВБанк Тогда
				СтрокаТаблицыВозвращаемой = ТаблицаРасходовИзКассы.Добавить();
				СтрокаТаблицыВозвращаемой.ДокументРасходИзКассы = ВыборкаРасходовИзКассы.ДокументРасходИзКассы;
				СтрокаТаблицыВозвращаемой.СуммаДокумента        = ВыборкаРасходовИзКассы.СуммаДокумента;
				Возврат ТаблицаРасходовИзКассы;
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;	
	//КонецЕсли;
	//---АК LAGP 2018.07.26
	
	Возврат ТаблицаРасходовИзКассы;
	
КонецФункции

//+++АК LAGP 2018.07.26 ИП-00018821.02 Проверка на "использование" документа ранее
Функция ПроверитьРасходИзКассыНаПовтор(РасходИзКассы, ДатаПроверкиНачало, ДатаПоступленияПлатежки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеВБанкИнкассация.Ссылка
		|ИЗ
		|	Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
		|ГДЕ
		|	ПоступлениеВБанкИнкассация.ДокументРасхода = &ДокументРасхода
		|	И ПоступлениеВБанкИнкассация.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПоступлениеВБанкИнкассация.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПроверкиНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаПоступленияПлатежки);
	Запрос.УстановитьПараметр("ДокументРасхода", РасходИзКассы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;			
	
КонецФункции	

//+++АК ILIK 2018.11.14 ИП-00020404
Процедура УстановитьПараметрФизЛицо(ПЗ, ОбъектДокумента)
	Для й = 1 По 3 Цикл
		Если ТипЗнч(ОбъектДокумента["СубконтоДт" + й]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента["СубконтоДт" + й]) Тогда
				ПЗ.Параметры.Вставить("ФизЛицо", ОбъектДокумента["СубконтоДт" + й]);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПЗ.Параметры.Свойство("ФизЛицо") Тогда
		ПЗ.Текст = СтрЗаменить(ПЗ.Текст, "И Таблица.ФизЛицо = &ФизЛицо", "");
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////





ПустаяДата = Дата("00010101");

ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта();

// Общее
СформироватьТегиЗаголовка();
СформироватьТегиРасчетногоСчета();

// Экспорт
СформироватьСоответствиеВыгружаемых();
Импорт_ТекстДляРазбора = "";


// Импорт
Импорт_РасчетныеСчета = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРасчСчетов(Импорт_РасчетныеСчета);

Импорт_ВидыДокументов = Новый Массив;

СформироватьСоответствиеЗагружаемых();
ЗаполнитьРаспознаваемыеПриИмпорте();
СформироватьСоответствияНеПустыхПриИмпорте();

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
СписокКонтрагентов =Новый СписокЗначений();

//ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
//ОтражатьВНалоговомУчете     = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

#КонецЕсли

//+++АК LAGP 2018.09.18 Появился контрагент со схожими реквизитами (Поволжский СБ)
//Сбербанк = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН","7707083893");
Сбербанк = Справочники.Контрагенты.НайтиПоКоду("000001506"); 
//---АК LAGP

//+++АК POZM 2018.08.13 ИП-00018948 
ВидНалоговНДФЛАренда = Справочники.ВидыНалогов.НайтиПоКоду("000000025");
ВидНалоговНДФЛ = Справочники.ВидыНалогов.НайтиПоКоду("000000010");
//---АК POZM 