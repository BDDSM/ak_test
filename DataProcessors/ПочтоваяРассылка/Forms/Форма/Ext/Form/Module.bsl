&НаКлиенте
Перем ВыполняетсяЗакрытие; //+++АК ILIK 2018.08.31 ИП-00019619

&НаСервере
Функция ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора)
	
	//+++АК SHEP 20161128: поместил в модуль объекта
	Возврат РеквизитФормыВЗначение("Объект").ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора);
	//---АК SHEP 20161128
	
КонецФункции

//+++АК SHEP 2018.05.25 ИП-00018641
// перенёс в модуль объекта 
&НаСервере
Процедура ОтправитьНаСервере(лкТекСписок)
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитОбъект.ОтправитьПочтовыеСообщения(лкТекСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЗаголовокПисьма) Тогда
		Сообщить("Не заполнена тема письма!");
		Возврат;
	КонецЕсли;	
	
	//+++АК SHEP 2018.05.25 ИП-00018641
	Если ЗначениеЗаполнено(Объект.ДатаОтложеннойОтправки) И Объект.ДатаОтложеннойОтправки < ТекущаяДата() Тогда
		Сообщить("Дата отложенной отправки не может быть меньше текущей!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СтруктураВложенияФД = Новый Структура;
	Если Элементы.ГруппаСтраницыСообщения.ТекущаяСтраница = Элементы.СтраницаПисьмоHTML Тогда
		Объект.ТекстПисьмаФД.ПолучитьHTML(Объект.ТекстПисьма, СтруктураВложенияФД);
	КонецЕсли;
	
	Объект.ТекПользователь = ТекПользователь;
	Объект.ТекАдресПользователя = ТекАдресПользователя;
	//---АК SHEP 2018.05.25
	
	ПостроитьСписокАдресатовНаСервере();
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправки");
	лкФорма.Объект.СписокПолучателей.Очистить();
	Для каждого ТекСтр Из Объект.СписокПолучателей Цикл
		
		НовСтрока = лкФорма.Объект.СписокПолучателей.Добавить();
		НовСтрока.АдресТелефон = ТекСтр.АдресТелефон;
		
	КонецЦикла;
	
	Если Объект.СписокПолучателей.Количество() > 0 Тогда
		
		лкТекСписок = лкФорма.ОткрытьМодально();
		Если лкТекСписок = Неопределено Тогда
			Возврат;
		//+++АК SHEP 2018.05.25 ИП-00018641
		ИначеЕсли лкТекСписок.Количество() = 0 Тогда
			Возврат;
		//---АК SHEP 2018.05.25
		КонецЕсли;
	
		//+++АК ILIK 2018.08.31 ИП-00019619
		ОчиститьВложенныеФайлы();
		//---АК ILIK
		
		//+++АК SHEP 2018.05.25 ИП-00018641
		Если СтруктураВложенияФД.Количество() > 0 Тогда
			Для Каждого ЭлементВложениеФД Из СтруктураВложенияФД Цикл
				ВложенныйФайл = Объект.ВложенныеФайлы.Добавить();
				ВложенныйФайл.ИмяФайла = ЭлементВложениеФД.Ключ;
				ВложенныйФайл.ИДФайлаПочтовогоПисьма = ЭлементВложениеФД.Ключ;
				ВложенныйФайл.СсылкаНаФайл = ПоместитьВоВременноеХранилище(ЭлементВложениеФД.Значение, УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
		
		// перенёс в модуль объекта
		ОтправитьНаСервере(лкТекСписок);
		
		//+++АК ILIK 2018.08.31 ИП-00019619
		Если ЗначениеЗаполнено(Объект.СохраненноеЭлектронноеПисьмо)
		   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СохраненноеЭлектронноеПисьмо, "СтатусПисьма") <> ПредопределенноеЗначение("Перечисление.СтатусыПисем.Сохраненное") Тогда
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
		//---АК ILIK
		
		Возврат;
		//---АК SHEP 2018.05.25	
	Иначе
		Сообщить("Нет адресов для отправки!");
	КонецЕсли;	
	
КонецПроцедуры

//+++АК БЕЛН 20170110
&НаСервере
Процедура СоздатьЗаписьИстории(ВидОтправки,СписокАдресов)
	Обработки.ПочтоваяРассылка.СоздатьЗаписьИстории(ВидОтправки, СписокАдресов, Объект.ЗаголовокПисьма, Объект.ТекстПисьма, ТекПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВ1С(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЗаголовокПисьма) Тогда
		Сообщить("Не заполнена тема письма!");
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	ПостроитьСписокАдресатовНаСервере_1С(ТекДата);
	
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправкиПоРолям");
	лкФорма.Объект.СписокТТ.Очистить();
	лкФорма.Объект.СписокРолей.Очистить();
	Для каждого ТекСтр Из Объект.СписокТТ Цикл
		
		НовСтрока = лкФорма.Объект.СписокТТ.Добавить();
		НовСтрока.ТорговаяТочка = ТекСтр.ТорговаяТочка;
		
	КонецЦикла;
	Для каждого ТекСтр Из Объект.СписокРолей Цикл
		
		НовСтрока = лкФорма.Объект.СписокРолей.Добавить();
		НовСтрока.Роль = ТекСтр.Роль;
		
	КонецЦикла;
	
	Если лкФорма.Объект.СписокТТ.Количество() > 0 ИЛИ лкФорма.Объект.СписокРолей.Количество() > 0 Тогда
		
		лкТекСтруктураВозврата = лкФорма.ОткрытьМодально();
		
		Если лкТекСтруктураВозврата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		лкСписокТТ = лкТекСтруктураВозврата.ТТ;
		лкСписокРолей = лкТекСтруктураВозврата.Роли;
		лкВсемСменам = лкТекСтруктураВозврата.ВсемСменам;
		лкСрокАктуальностиСообщения = лкТекСтруктураВозврата.СрокАктуальностиСообщения;
		
		ОтправитьВ1СНаСервере(лкСписокТТ, лкСписокРолей, лкВсемСменам, лкСрокАктуальностиСообщения, ТекДата);
		//+++АК БЕЛН 20170110
	    Попытка
			СоздатьЗаписьИстории(ПредопределенноеЗначение("Перечисление.ВидОтправки.Сообщение1С"),лкСписокТТ);
		Исключение
		
		КонецПопытки; 
		//---АК БЕЛН 20170110
	Иначе
		Сообщить("Нет адресатов для отправки!");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьСписокАдресатовНаСервере_1С(ТекДата)
	
	Объект.СписокТТ.Очистить();
	Объект.СписокРолей.Очистить();
	
	Если ПроверитьЗаполнение() Тогда
		
		// Формируем список ТТ для отбора
		СписоТТДляОтбора = Новый СписокЗначений;
		
		лкСписокНоменклатуры = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Номенклатура Цикл
			
			лкСписокНоменклатуры.Добавить(ТекСтр.Номенклатура);
			
		КонецЦикла;
		
		лкСписокПроизв = Новый СписокЗначений;
		Для каждого ТекСтр Из Объект.Производители Цикл
			
			лкСписокПроизв.Добавить(ТекСтр.Контрагент);
			
		КонецЦикла;
		
		Если  Объект.МожетПрисутствоватьНаОстатках Тогда
			
			Если Объект.Производители.Количество() > 0 ИЛИ Объект.Номенклатура.Количество() > 0 Тогда
				
				СписоТТДляОтбора.Очистить();
				
				лкСписокХарактеристик = Новый СписокЗначений;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект КАК Характеристика
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Значение В(&СписокПоставщиков)
				|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияСвойствОбъектов.Объект";
				
				Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
				Запрос.УстановитьПараметр("СписокПоставщиков", лкСписокПроизв);
				
				ТЗ_РезультатХаракт = Запрос.Выполнить();
				
				ВыборкаДетЗаписи = ТЗ_РезультатХаракт.Выбрать();
				
				Пока ВыборкаДетЗаписи.Следующий() Цикл
					лкСписокХарактеристик.Добавить(ВыборкаДетЗаписи.Характеристика);
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
				|ИЗ
				|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
				|			&НаДату, Выведена = ЛОЖЬ " +    												 
				?(Объект.Номенклатура.Количество() > 0," И Номенклатура В (&СписокНоменклатуры) ", " ") +				
				?(лкСписокХарактеристик.Количество() > 0," И Характеристика В (&лкСписокХарактеристик)", " ") +				
				" ) КАК ТоварныйАссортиментТочекСрезПоследних
				|
				|СГРУППИРОВАТЬ ПО
				|ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка";
				
				Запрос.УстановитьПараметр("СписокНоменклатуры", лкСписокНоменклатуры);				
				Запрос.УстановитьПараметр("лкСписокХарактеристик", лкСписокХарактеристик);
				Запрос.УстановитьПараметр("НаДату", ТекДата);
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ТорговаяТочка) = Неопределено Тогда
						СписоТТДляОтбора.Добавить(ВыборкаДетальныеЗаписи.ТорговаяТочка);	
					КонецЕсли;	
					
				КонецЦикла;
				
				Если СписоТТДляОтбора.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПрисутствуетНаОстатках Тогда
			
			ТЗОстатков = ПостроитьТЗОстатков(лкСписокНоменклатуры, лкСписокПроизв);	
			
			Для каждого ТекстрТЗОст Из ТЗОстатков Цикл
				
				Если СписоТТДляОтбора.НайтиПоЗначению(ТекстрТЗОст.ТТ) = Неопределено Тогда
					
					СписоТТДляОтбора.Добавить(ТекстрТЗОст.ТТ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТЗОстатков.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;				
		
		СписокТТ = Новый СписокЗначений;
		СписокРолей = Новый СписокЗначений;
		
		ТЗ_ЦФО = Объект.ЦФО.Выгрузить();
		массЦФО = ТЗ_ЦФО.ВыгрузитьКолонку("ЦФО");
		СписокЦФО = Новый СписокЗначений; 
		СписокЦФО.ЗагрузитьЗначения(массЦФО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки КАК ТипРозничнойТочки
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
		|			&текДата,
		|			ЦФО В (&СписокЦФО)
		|				И СтруктурнаяЕдиница.Активное = ИСТИНА) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница.ТипРозничнойТочки";
		
		Запрос.УстановитьПараметр("СписокЦФО", СписокЦФО);
		Запрос.УстановитьПараметр("текДата", ТекДата);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипРозничнойТочки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
				
				Если НЕ Объект.Магазины Тогда
					Продолжить;
				КонецЕсли;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
				
				Если НЕ Объект.Избенка Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе 	
				
				Если Объект.Избенка ИЛИ Объект.Магазины Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СписоТТДляОтбора.Количество() > 0 И СписоТТДляОтбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТТ = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница; 
			Если ЗначениеЗаполнено(ТекТТ) Тогда
				НоваяСтр = Объект.СписокТТ.Добавить();					
				НоваяСтр.ТорговаяТочка = ТекТТ
			КонецЕсли;
			
		КонецЦикла;
		
		ВремТЗ = Объект.СписокТТ.Выгрузить();
		ВремТЗ.Свернуть("ТорговаяТочка");
		Объект.СписокТТ.Очистить();
		Объект.СписокТТ.Загрузить(ВремТЗ);				
		
		Если Объект.ПомошникиТерриториальныхУправляющих ИЛИ Объект.ТерриториальныеУправляющие Тогда
			
			лкСписокТТ = Новый СписокЗначений;
			Для каждого ТекСтрТТ Из Объект.СписокТТ Цикл
   
   	        	лкСписокТТ.Добавить(ТекСтрТТ.ТорговаяТочка);
   
   			КонецЦикла;			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|			&ТекДата,
			|			Объект В (&СписокТТ)
			|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя";
			
			Запрос.УстановитьПараметр("СписокТТ", лкСписокТТ);
			Запрос.УстановитьПараметр("ТекДата", ТекДата);
			Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РольПользователя) Тогда
					НовСтр = Объект.СписокРолей.Добавить();	
					НовСтр.Роль = ВыборкаДетальныеЗаписи.РольПользователя;
				КонецЕсли;				
			КонецЦикла;
			
			ВремТЗ = Объект.СписокРолей.Выгрузить();
			ВремТЗ.Свернуть("Роль");
			Объект.СписокРолей.Очистить();
			Объект.СписокРолей.Загрузить(ВремТЗ);
			
		КонецЕсли;
		
		Если Объект.ТерриториальныеУправляющие Тогда
			
			лкСписокРолейУправляющих = Новый СписокЗначений;
			Для каждого ТекСтрРолей Из Объект.СписокРолей Цикл
   
				Если ЗначениеЗаполнено(ТекСтрРолей.Роль.Родитель) Тогда
					лкСписокРолейУправляющих.Добавить(ТекСтрРолей.Роль.Родитель);
				КонецЕсли;	
   
			КонецЦикла;
			
			Если НЕ Объект.ПомошникиТерриториальныхУправляющих Тогда
				Объект.СписокРолей.Очистить();	
			КонецЕсли;	
			
			Для каждого ТекРоль Из лкСписокРолейУправляющих Цикл
   
   	        	НовСтр = Объект.СписокРолей.Добавить();	
				НовСтр.Роль = ТекРоль.Значение;
   
   			КонецЦикла;
			
			ВремТЗ = Объект.СписокРолей.Выгрузить();
			ВремТЗ.Свернуть("Роль");
			Объект.СписокРолей.Очистить();
			Объект.СписокРолей.Загрузить(ВремТЗ);
			
		КонецЕсли;		
		
		Если НЕ Объект.ТорговыеТочки Тогда
			Объект.СписокТТ.Очистить();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьВ1СНаСервере(лкСписокТТ, лкСписокРолей, лкВсемСменам, лкСрокАктуальностиСообщения, ТекДата)
	
	Если лкСписокТТ.Количество() > 0 Тогда
		
		ТЗДок = Новый ТаблицаЗначений;
		ТЗДок.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТЗДок.Колонки.Добавить("СтаршийСмены", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
		
		
		Для каждого ТекТТ Из лкСписокТТ Цикл
			
			НоваяСтр = ТЗДок.Добавить();
  	   		НоваяСтр.СтруктурнаяЕдиница = ТекТТ.Значение;
			НоваяСтр.СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ТекТТ, ТекДата);
  
  		КонецЦикла;
		
		СтруктураДляСозданияДок = Новый Структура;
		СтруктураДляСозданияДок.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
		СтруктураДляСозданияДок.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
		СтруктураДляСозданияДок.Вставить("Тема", Объект.ЗаголовокПисьма);
		СтруктураДляСозданияДок.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
		СтруктураДляСозданияДок.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
		СтруктураДляСозданияДок.Вставить("ВсемСменам", лкВсемСменам);
		СтруктураДляСозданияДок.Вставить("ТекстСообщения", Объект.ТекстПисьма);
		СтруктураДляСозданияДок.Вставить("СрокАктуальностиСообщения", лкСрокАктуальностиСообщения);
		//СтруктураДляСозданияДок.Вставить("СтруктурныеЕдиницы", ТЗДок);
		СтруктураДляСозданияДок.Вставить("СписокМагазинов", ТЗДок.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
		СтруктураДляСозданияДок.Вставить("Дата", ТекДата);
		
		ТекСсылкаДок = МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СтруктураДляСозданияДок, ИСТИНА);
		
		Если ТипЗнч(ТекСсылкаДок) = Тип("ДокументСсылка.СообщениеМОС") Тогда			  
			Сообщить("(ТТ) Записан документ "+ТекСсылкаДок);
		Иначе	
			Сообщить("(ТТ) Ошибка записи: "+ТекСсылкаДок);  
		КонецЕсли;
		
				
	КонецЕсли;	
	
	Если лкСписокРолей.Количество() > 0 Тогда
		
		ТекАвтор = ПараметрыСеанса.ТекущийПользователь;
		ТекОтправитель = Справочники.РолиПользователей.Администратор;
		ТекТема = Объект.ЗаголовокПисьма;
		ТекТекст = Объект.ТекстПисьма; 
				
		Для каждого ТекСтрРолей Из лкСписокРолей Цикл
  
			СтруктураДляСозданияДок = Новый Структура;
			СтруктураДляСозданияДок.Вставить("Автор", ТекАвтор);
			СтруктураДляСозданияДок.Вставить("Отправитель", ТекОтправитель);
			СтруктураДляСозданияДок.Вставить("Тема", ТекТема);
			СтруктураДляСозданияДок.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
			СтруктураДляСозданияДок.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.УказаннаяРоль);			
			СтруктураДляСозданияДок.Вставить("ТекстСообщения", ТекТекст);
			СтруктураДляСозданияДок.Вставить("СрокАктуальностиСообщения", лкСрокАктуальностиСообщения);
			СтруктураДляСозданияДок.Вставить("Дата", ТекДата);
			СтруктураДляСозданияДок.Вставить("РольПолучателя", ТекСтрРолей.Значение);
			
			
			ТекСсылкаДок = МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(СтруктураДляСозданияДок, ИСТИНА);
			
			Если ТипЗнч(ТекСсылкаДок) = Тип("ДокументСсылка.СообщениеМОС") Тогда			  
				Сообщить("(Р) Записан документ "+ТекСсылкаДок);
			Иначе	
				Сообщить("(Р) Ошибка записи: "+ТекСсылкаДок);  
			КонецЕсли;
			
  
  		КонецЦикла;
		
				
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПостроитьСписокАдресатовНаСервере()
	
	//+++АК SHEP 20161128: поместил в модуль объекта
	РеквизитФормыОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитФормыОбъект.ПостроитьСписокАдресатовНаСервере();
	ЗначениеВРеквизитФормы(РеквизитФормыОбъект, "Объект");
	//---АК SHEP 20161128
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЦФО(Команда)
	
	ВсеЦФОНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВсеЦФОНаСервере()
	
	//+++АК SHEP 20161130: поместил в модуль объекта
	РеквизитФормыОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитФормыОбъект.ВсеЦФОНаСервере();
	ЗначениеВРеквизитФормы(РеквизитФормыОбъект, "Объект");
	//---АК SHEP 20161130
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Перем ВыбранноеИмя,АдресВременногоХранилища;
	
	Если ПоместитьФайл(АдресВременногоХранилища, "", ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		
		НоваяСтрокаТЗ = Объект.ВложенныеФайлы.Добавить();
		
		НоваяСтрокаТЗ.СсылкаНаФайл = АдресВременногоХранилища;
		НоваяСтрокаТЗ.ИмяФайла = ВыбранноеИмя;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлВложения(Команда)
	
	Если Элементы.ВложенныеФайлы.ТекущаяСтрока <> Неопределено Тогда
		Объект.ВложенныеФайлы.Удалить(Объект.ВложенныеФайлы[Элементы.ВложенныеФайлы.ТекущиеДанные.НомерСтроки - 1]);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Объект.АдресОтправителя = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	//+++AK GREK 04.12.2017 ИП-00017390
	Объект.АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.РассылкаИнформации");
	//НоваяСтр = Объект.ДопАдресаты.Добавить();
	//НоваяСтр.Адрес = "train@izbenka.msk.ru";
	ВсеЦФОНаСервере();
	ТекПользователь=глЗначениеПеременной("глТекущийПользователь");
	Объект.Группа=Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("УЕК");
	
	//+++AK GREK 04.12.2017 ИП-00017390
	//Перенес сюда из процедуры создания письма
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресПользователя
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КонтактнаяИнформация.Объект = Пользователи.ФизЛицо
	|ГДЕ
	|	Пользователи.Ссылка = &ТекПользователь
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ТекАдресПользователя = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекАдресПользователя = СокрЛП(ВыборкаДетальныеЗаписи.АдресПользователя);
	КонецЦикла;
	//---AK
	
	//+++АК ILIK 2018.08.31 ИП-00019619
	ПолучитьСохраненноеЭлектронноеПисьмо();
	//---АК ILIK
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	
	ПостроитьСписокАдресатовНаСервере();
	
	лкФорма = ПолучитьФорму("Обработка.ПочтоваяРассылка.Форма.ФормаОтправки");
	лкФорма.Объект.СписокПолучателей.Очистить();
	
	Для каждого ТекСтр Из Объект.СписокТелефонов Цикл
		
		НовСтрока = лкФорма.Объект.СписокПолучателей.Добавить();
		НовСтрока.АдресТелефон = ТекСтр.АдресТелефон;
		
	КонецЦикла;
	
	Если лкФорма.Объект.СписокПолучателей.Количество() > 0 Тогда
		
		лкТекСписок = лкФорма.ОткрытьМодально();
		
		Если лкТекСписок <> Неопределено И лкТекСписок.Количество() > 0 Тогда 
			
			ОтправитьСМСНаСервере(лкТекСписок);
			//+++АК БЕЛН 20170110
		    Попытка
				СоздатьЗаписьИстории(ПредопределенноеЗначение("Перечисление.ВидОтправки.СМС"),лкТекСписок);
			Исключение
			
			КонецПопытки; 
			//---АК БЕЛН 20170110
		КонецЕсли;
	Иначе 	
		Сообщить("Нет номеров для отправки!");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьСМСНаСервере(ТекСписекТел)

	//+++АК SHEP 20161130: поместил в модуль объекта
	РеквизитФормыВЗначение("Объект").ОтправитьСМСНаСервере(ТекСписекТел);
	//---АК SHEP 20161130
	
КонецПроцедуры // ОтправитьСМСНаСервере()

&НаКлиенте
Процедура ТекстПисьмаПриИзменении(Элемент)
	РасчитатьКоличествоСМС();
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКоличествоСМС(исхТекст = Неопределено)
	
	Если исхТекст = Неопределено Тогда
		КоличествоСимволов = СтрДлина(Объект.ТекстПисьма);
	Иначе	
		КоличествоСимволов = СтрДлина(исхТекст);
	КонецЕсли;
	
	КолСМС = 0;
	КолМожно = 70;
	
	Если КоличествоСимволов <= 70 И КоличествоСимволов > 0 Тогда
		
		КолСМС = 1;
		КолМожно = 70;
		
	ИначеЕсли КоличествоСимволов > 70 тогда
		       
		КолСМС = Цел((КоличествоСимволов - 71) / 64) + 2;
		КолМожно = 70 + (КолСМС-1)*64;
		
	КонецЕсли;	
	
	Объект.КоличествоСимволов = "Количество СМС - "+КолСМС+"   (Использовано символов "+КоличествоСимволов+" из "+КолМожно+" возможных)";
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РасчитатьКоличествоСМС();
	ПриОткрытииСервер();
	КомуОтсылатьПриИзменении(""); //+++АК SHEP 2018.06.14 ИП-00018934
	
	//+++АК ILIK 2018.08.31 ИП-00019619
	Если ЗначениеЗаполнено(Объект.СохраненноеЭлектронноеПисьмо) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОВосстановленииПисьма", ЭтаФорма), "Хотите восстановить сохраненное письмо?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
	//---АК ILIK	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер()
	//Объект.АдресОтправителя = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Объект.АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.РассылкаИнформации");
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчитатьКоличествоСМС(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиУЕКНажатие(Элемент)
	Мас=Новый Массив;
	Мас.Добавить(Объект.Группа);
	П = Новый Структура("Группы", Мас);
	Форма = ПолучитьФорму("РегистрСведений.АК_ГруппыРассылки.Форма.ФормаСпискаУправляемая", П);
	Форма.Открыть()
	
КонецПроцедуры

//+++АК БЕЛН 20170110
&НаКлиенте
Процедура История(Команда)
	П = Новый Структура("Отбор", Новый Структура("Пользователь",ТекПользователь));
	ОткрытьФорму("РегистрСведений.ИсторияОтправок.Форма.ФормаСписка",П);
КонецПроцедуры

//+++АК БЕЛН 20170110
&НаКлиенте
Процедура ГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.АК_ГруппыРассылки.ФормаВыбора", Новый Структура("РежимВыбора, ЗакрыватьПриВыборе,Пользователь", Истина, Истина,ТекПользователь),Элемент);
КонецПроцедуры

//+++АК SHEP 2018.05.25 ИП-00018641
&НаКлиенте
Процедура ГруппаСтраницыСообщенияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПростоеСообщение Тогда
		Элементы.ГруппаКнопки.Видимость = Истина;
		Элементы.ГруппаКнопкиПростоеСообщение.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПисьмоHTML Тогда
		Элементы.ГруппаКнопки.Видимость = Истина;
		Элементы.ГруппаКнопкиПростоеСообщение.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКнопки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.06.13 ИП-00018934
&НаКлиенте
Процедура ЗаполнитьГруппыРассылокДляОбучения(Команда)
	
	Объект.ГруппыРассылок.Очистить();
	МассивГруппРассылок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТорговыеТочки,ТерриториальныеУправляющие,ПомошникиТерриториальныхУправляющих,ВсеЧислящиесяВШтатеОфисники,Мерчандайзеры,ГорячаяЛиния");  //+++АК mika 2018.06.28 ИП-00018615 Добавлены Мерчандайзеры, ГорячаяЛиния
	Для Каждого ИмяГруппыРассылкиДляОбучения Из МассивГруппРассылок Цикл
		Если Объект[ИмяГруппыРассылкиДляОбучения] = Истина Тогда
			НоваяСтрокаТЧ = Объект.ГруппыРассылок.Добавить();
			НоваяСтрокаТЧ.Группа = ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки." + ИмяГруппыРассылкиДляОбучения + "Обучение");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.06.14 ИП-00018934
&НаКлиенте
Процедура КомуОтсылатьПриИзменении(Элемент)
	ЗаполнитьГруппыРассылокДляОбучения("");
КонецПроцедуры

//+++АК ILIK 2018.06.27 ИП-00018961
&НаКлиенте
Процедура АдресОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = ПроверитьДоступКУчетнойЗаписи(ВыбранноеЗначение);
КонецПроцедуры

//+++АК ILIK 2018.06.27 ИП-00018961
&НаСервере
Функция ПроверитьДоступКУчетнойЗаписи(УчетнаяЗаписьПочты)
	Если РольДоступна("ПолныеПрава")
	 Или УчетнаяЗаписьПочты <> Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("Новости ВкусВилл", Истина) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка
	               |ИЗ
	               |	Справочник.УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи КАК УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи
	               |ГДЕ
	               |	УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка = &Ссылка
	               |	И УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗаписьПочты);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Сообщить("Нет прав на использование выбранной учетной записи.", СтатусСообщения.Внимание);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

//+++АК ILIK 2018.08.31 ИП-00019619
&НаКлиенте
Процедура ОчиститьВложенныеФайлы()
	Количество = Объект.ВложенныеФайлы.Количество();
	Для й = 1 По Количество Цикл
		Если Не ПустаяСтрока(Объект.ВложенныеФайлы.Получить(Количество - й).ИДФайлаПочтовогоПисьма) Тогда
			Объект.ВложенныеФайлы.Удалить(Количество - й);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаСервере
Процедура ПолучитьСохраненноеЭлектронноеПисьмо()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмо.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	               |ГДЕ
	               |	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Сохраненное)
	               |	И ЭлектронноеПисьмо.Предмет = ""#ДляВосстановления#""
	               |	И ЭлектронноеПисьмо.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.СохраненноеЭлектронноеПисьмо = Выборка.Ссылка;
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаКлиенте
Процедура ТекстПисьмаФДПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭтаФорма.Модифицированность И Не ВыполняетсяЗакрытие И Объект.ТекстПисьмаФД.ПолучитьЭлементы().Количество() <> 0 Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСохраненииПисьма", ЭтаФорма), "Хотите сохранить письмо? Оно будет восстановлено при следующем использовании обработки.", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;	
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаКлиенте
Процедура ПослеЗакрытияВопросаОСохраненииПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьЭлектронноеПисьмоВДокумент();
	КонецЕсли;
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть();
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаСервере
Процедура СохранитьЭлектронноеПисьмоВДокумент()
	РеквизитФормыВЗначение("Объект").СохранитьЭлектронноеПисьмоВДокумент();
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаКлиенте
Процедура ПослеЗакрытияВопросаОВосстановленииПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВосстановитьЭлектронноеПисьмоИзДокумента();
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСообщение;
		Элементы.ГруппаСтраницыСообщения.ТекущаяСтраница = Элементы.СтраницаПисьмоHTML;
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
&НаСервере
Процедура ВосстановитьЭлектронноеПисьмоИзДокумента()
	РеквизитФормыОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитФормыОбъект.ВосстановитьЭлектронноеПисьмоИзДокумента();
	ЗначениеВРеквизитФормы(РеквизитФормыОбъект, "Объект");
КонецПроцедуры

//+++АК ILIK 2018.08.31 ИП-00019619
ВыполняетсяЗакрытие = Ложь;
