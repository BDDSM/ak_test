
Процедура РасчитатьЗарплатуПродавцов()Экспорт
	
	ОчиститьРегистрСведенийЗарплатаПродавцов();
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОПродавцах();
	
	
	//+++ gusd (ИП-00016780)
	
	// С 01.10.2017 глобально меняеться расчет з/п, все расчеты почасовые 
	
	НачалоРасчетаПоНовойСхеме = '2017-10-01';
	
	Если НачалоПериода >= НачалоРасчетаПоНовойСхеме Тогда // Весь период по новой схеме
		
		РасчитатьЗпНоваяСхемаСхема(НачалоПериода, КонецДня(КонецПериода));
		
	ИначеЕсли КонецПериода < НачалоРасчетаПоНовойСхеме Тогда // Весь период по старой схеме	
		
		РасчитатьЗпСтараяСхема(НачалоПериода, КонецДня(КонецПериода));
		
	Иначе // Часть по старой, часть по новой схеме
		
		// Старая схема
		
		НачалоПериодаСтараяСхема = НачалоПериода;
		КонецПериодаСтараяСхема = НачалоРасчетаПоНовойСхеме - 1;
		
		РасчитатьЗпСтараяСхема(НачалоПериодаСтараяСхема, КонецПериодаСтараяСхема);
		
		
		// Новая схема
		
		НачалоПериодаНоваяСхема = НачалоРасчетаПоНовойСхеме;
		КонецПериодаНоваяСхема = КонецДня(КонецПериода);
		
		РасчитатьЗпНоваяСхемаСхема(НачалоПериодаНоваяСхема, КонецПериодаНоваяСхема);
	
	КонецЕсли;
	
	//--- gusd (ИП-00016780)

КонецПроцедуры

Процедура РассчитатьБонусыПомощников() Экспорт
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = Отчеты.РасчетБонусовПомощниковУправляющих.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	СхемаКомпоновкиДанных.Параметры.ПериодОтчета.Значение.ДатаНачала = ЭтотОбъект.НачалоПериода;
	СхемаКомпоновкиДанных.Параметры.ПериодОтчета.Значение.ДатаОкончания = КонецДня(ЭтотОбъект.КонецПериода);
	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.КраткийВариант.Настройки);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Настройки.ПараметрыДанных.Элементы[0].Значение = СхемаКомпоновкиДанных.Параметры.ПериодОтчета.Значение;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Набор = РегистрыСведений.ЗарплатаПродавцов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипРабот.Установить(Перечисления.ТипыРаботДляРасчетаЗП.БонусПомощникаУправляющегоВкусвилл);
	Набор.Отбор.ДатаНачисления.Установить(ЭтотОбъект.КонецПериода);
	Набор.Прочитать();
	Набор.Очистить();
	Для Каждого Стр ИЗ ТЗ Цикл
		Если Стр.Бонус>0 Тогда
			НЗ = Набор.Добавить();
			НЗ.Бонус = Стр.Бонус;
			НЗ.БонусСНДФЛ = Стр.Бонус/0.87;
			НЗ.ДатаНачисления = ЭтотОбъект.КонецПериода;
			НЗ.ФизЛицо = Стр.ПомощникУправляющего;
			НЗ.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.БонусПомощникаУправляющегоВкусвилл;
		КонецЕсли;	
		
	КонецЦикла;	
	Набор.Записать();
КонецПроцедуры	

Функция ПолучитьТекстОсновногоЗапроса()
	
	//Расчет ЗП по Листам учета
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛистУчетаПродавцы.Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 4
	|					ИЛИ ЛистУчетаПродавцы.Пч = 3
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоПродавцов,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПродавцовПЧ,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 5
	|					ИЛИ ЛистУчетаПродавцы.Пч = 6
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПродавцовНочь
	|ПОМЕСТИТЬ ТаблицаКоличестваПродавцов
	|ИЗ
	|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	|ГДЕ
	|	ЛистУчетаПродавцы.Ссылка.Проведен
	|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаПродавцы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК ДатаНачисления,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчетаПродавцы.Ссылка,
	|	ЛистУчетаПродавцы.Продавец,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Почасовик,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтаршийПродавец,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 3
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Практикант,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 4
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Стажер,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 5
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НочнойПродавец,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Пч = 6
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтаршийНочнойПродавец,
	|	ЛистУчетаПродавцы.КоличествоЧасов КАК КоличествоЧасовПочасовика,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.Отклонение + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ КАК Выручка,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцов,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцовПЧ,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцовНочь,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития,
	|	ЕСТЬNULL(ВЗ_ВРазвитии.Период, ДАТАВРЕМЯ(2080, 1, 1)) КАК ВРазвитииСДаты,
	|	ЕСТЬNULL(ЗамороженнаяЗарплатаПродавцов.Сумма, 0) КАК ФиксированнаяСтавкаЗП,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.НочнойМагазин КАК НочнойМагазин
	|ИЗ
	|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКоличестваПродавцов КАК ТаблицаКоличестваПродавцов
	|		ПО ЛистУчетаПродавцы.Ссылка = ТаблицаКоличестваПродавцов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦФОСтруктурныхЕдиниц.ТорговаяТочка КАК СтруктурнаяЕдиница,
	|			МИНИМУМ(ЦФОСтруктурныхЕдиниц.Дата) КАК Период
	|		ИЗ
	|			Документ.ЛистУчета КАК ЦФОСтруктурныхЕдиниц
	|		ГДЕ
	|			ЦФОСтруктурныхЕдиниц.ЦФО.id_ЦФО = 12
	|			И ЦФОСтруктурныхЕдиниц.Проведен = ИСТИНА
	|			И ЦФОСтруктурныхЕдиниц.Дата >= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -50)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦФОСтруктурныхЕдиниц.ТорговаяТочка) КАК ВЗ_ВРазвитии
	|		ПО ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = ВЗ_ВРазвитии.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗамороженнаяЗарплатаПродавцов КАК ЗамороженнаяЗарплатаПродавцов
	|		ПО ЛистУчетаПродавцы.Продавец = ЗамороженнаяЗарплатаПродавцов.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) = ЗамороженнаяЗарплатаПродавцов.ПериодДействия)
	|			И (ЗамороженнаяЗарплатаПродавцов.Заморожена)";
	
	Возврат ТекстЗапроса;
	
КонецФункции



Процедура РасчитатьЗП_Стажер_ПолСтавки_ПолныйДень(Знач Выборка)
	
	Выручка 				= Выборка.Выручка;
	ДатаНачисления 			= Выборка.ДатаНачисления;
	ТорговаяТочка 			= Выборка.ТорговаяТочка;
	ТипРозничнойТочки 		= Выборка.ТипРозничнойТочки;
	ГруппаРазвития 			= Выборка.ГруппаРазвития;
	
	Продавец 				= Выборка.Продавец;
	СтаршийПродавец 		= Выборка.СтаршийПродавец;
	Стажер 					= Выборка.Стажер;
	Почасовик 				= Выборка.Почасовик;
	Практикант				= Выборка.Практикант;
	НочнойПродавец			= Выборка.НочнойПродавец;
	СтаршийНочнойПродавец	= Выборка.СтаршийНочнойПродавец;
	
	ЕстьНочныеСмены 		= Выборка.КоличествоПродавцовНочь > 0; //Выборка.НочнойМагазин; //gusd (ИП-00015122) вернул определение ночного по количеству ночных выходов
	ФиксированнаяСтавкаЗП 	= Выборка.ФиксированнаяСтавкаЗП;
	
	// Начисляется одинаково
	ПрактикантИлиПочасовик 	= (Практикант ИЛИ Почасовик);
	
	КоличествоПродавцовНаТочкеОбщее	= Выборка.КоличествоПродавцов;
	КоличествоПродавцовНаТочкеПЧ	= Выборка.КоличествоПродавцовПЧ;
	КоличествоЧасовПочасовика 		= Выборка.КоличествоЧасовПочасовика;
	
	// Определяем Тип работ
	Если Практикант Тогда
		
		Если ГруппаРазвития Тогда
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПрактикантУР;
		Иначе	
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Практикант;
		КонецЕсли;	
			
	ИначеЕсли Стажер Тогда 
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Стажер;
		
	ИначеЕсли Почасовик Тогда
		
		Если ГруппаРазвития Тогда
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПолСтавкиУР;
		Иначе	
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПолСтавки;
		КонецЕсли;	
		
	ИначеЕсли НочнойПродавец ИЛИ СтаршийНочнойПродавец Тогда
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПолнаяНочь;
		
	Иначе
		
		Если ГруппаРазвития Тогда
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПолныйДеньУР;
		Иначе	
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПолныйДень;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ПараметрыРассчетаЗарплаты = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(ДатаНачисления, Новый Структура("ТипРозничнойТочки", ТипРозничнойТочки));
	
	//
	ВидДня 						= ОпределитьВидДняПоПроизводственномуКалендарю(ДатаНачисления);
	РасчетноеКоличествоСтрокой 	= Строка(КоличествоПродавцовНаТочкеОбщее - КоличествоПродавцовНаТочкеПЧ) + Строка(КоличествоПродавцовНаТочкеПЧ);
	РасчетноеКоличество 		= Число(РасчетноеКоличествоСтрокой);
	
	// Будни
	Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
		ИЛИ ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		
		КлассТТ_ДляТочки  = ПолучитьКлассТТИзТаблицы(ТорговаяТочка, ДатаНачисления);
		
		ОбязательноеЧисло = Макс(КлассТТ_ДляТочки - Цел(КлассТТ_ДляТочки), 0.10);
		КлассТТ_Расчетный = Макс(Цел(КлассТТ_ДляТочки), РасчетноеКоличество);
		
		КлассТТ = ?(ЗначениеЗаполнено(КлассТТ_ДляТочки), КлассТТ_ДляТочки, РасчетноеКоличество + ОбязательноеЧисло);
		
	// Выходные, праздники	
	Иначе
		
		КлассТТ_ДляТочки  = ПолучитьКлассТТИзТаблицы(ТорговаяТочка, ДатаНачисления, Истина);
		
		ОбязательноеЧисло = Макс(Цел(КлассТТ_ДляТочки), 10);
		КлассТТ_Расчетный = Макс((КлассТТ_ДляТочки - Цел(КлассТТ_ДляТочки))*100, РасчетноеКоличество);
		
		КлассТТ = ?(ЗначениеЗаполнено(КлассТТ_ДляТочки), КлассТТ_ДляТочки, Число(Строка(ОбязательноеЧисло) + "," + РасчетноеКоличествоСтрокой));
		
	КонецЕсли;
	
	// План продаж
	Коэффициент_План = ОпределитьПлановыйКоэффициент(ДатаНачисления, ТипРозничнойТочки, КлассТТ_Расчетный, ПрактикантИлиПочасовик);
	
	//
	ПланПродаж 		= Коэффициент_План/0.87;
	ПроцентБонуса 	= ПланПродаж;
	
	// Бонусы
	БонусВыходной 	= 0;
	БонусБудни 		= 0;
	
	//
	МинимальнаяДневнаяСтавкаДляМагазина = ПараметрыРассчетаЗарплаты.МинимальнаяДневнаяСтавкаДляМагазина;
	МинимальнаяДневнаяСтавкаПочасовика  = ПараметрыРассчетаЗарплаты.МинимальнаяДневнаяСтавкаПродавцаКонсультанатПочасовика;
	
	// Выходные
	Если (ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
		И ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		И Не (Стажер ИЛИ Практикант ИЛИ НочнойПродавец ИЛИ СтаршийНочнойПродавец) И Не ГруппаРазвития Тогда
		
		БонусВыходной = 1200/0.87;
			
		// По магазину минимум 1700 с 1 мая
		Если ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И ДатаНачисления >= '20140501' Тогда
			
			Если Почасовик Тогда
				
				// По магазину с 1.06.2015 почасовика расчитываем по часовой ставке
				Если ДатаНачисления >= '20150601' Тогда
					БонусВыходной = ПараметрыРассчетаЗарплаты.ЧасоваяСтавкаПочасовика*КоличествоЧасовПочасовика/0.87;
				Иначе
					БонусВыходной = МинимальнаяДневнаяСтавкаПочасовика/0.87;
				КонецЕсли;	
					
			Иначе
				
				// Новый расчет 1 февраля 2017 года
				// ИП-00014642
				
				// Один обычный/старший продавец за смену получит 1500 рублей плюс 0,4% от выручки в этот день, но не меньше 2000 руб.
				
				Если ДатаНачисления >= Дата(2017, 02, 01) Тогда
					
					Если ЕстьНочныеСмены Тогда
						
						РасчСтавка = 1500 + Выручка * ?(ЗначениеЗаполнено(ПараметрыРассчетаЗарплаты.ПроцентОтВыручкиПоМагазинамСНочнымиСменами), ПараметрыРассчетаЗарплаты.ПроцентОтВыручкиПоМагазинамСНочнымиСменами/100, 0.003);
						
						БонусВыходной = РасчСтавка/0.87; 
						
					Иначе 
						
						МинСтавка  = МинимальнаяДневнаяСтавкаДляМагазина;
						РасчСтавка = 1500 + Выручка * ?(ЗначениеЗаполнено(ПараметрыРассчетаЗарплаты.ПроцентОтВыручки), ПараметрыРассчетаЗарплаты.ПроцентОтВыручки/100, 0.004);
						
						БонусВыходной = Макс(МинСтавка, РасчСтавка)/0.87; 
						
					КонецЕсли;
					
				Иначе	
				
					БонусВыходной = МинимальнаяДневнаяСтавкаДляМагазина/0.87;
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И ДатаНачисления >= '20141001' Тогда
			
			//Если Почасовик ИЛИ НочнойПочасовик ИЛИ СтаршийНочнойПочасовик Тогда
			Если Почасовик Тогда
				
				БонусВыходной = МинимальнаяДневнаяСтавкаПочасовика/0.87;
				
			Иначе
				
				// Для Класса ТТ 10 свой расчет ЗП
				Если КлассТТ_Расчетный = 10 И ДатаНачисления >= '20141201' Тогда
					
					Если ДатаНачисления >= '20170201' Тогда
						БонусВыходной = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаДляМагазина/0.87);
					Иначе
						БонусВыходной = ?(Выручка < 25000, МинимальнаяДневнаяСтавкаДляМагазина/0.87, Выручка*ПроцентБонуса) + ПолучитьДоплатуДляТорговойТочкиСТипом10(Выручка)/0.87;
					КонецЕсли; 
					
				Иначе
					
					БонусВыходной = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаДляМагазина/0.87);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Будни
	Если Не (Стажер ИЛИ Практикант ИЛИ НочнойПродавец ИЛИ СтаршийНочнойПродавец) И Не ГруппаРазвития Тогда	
		
		БонусБудни = Выручка * ПроцентБонуса;
		
		// По магазину минимум 1700 с 1 мая
		Если ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И ДатаНачисления >= '20140501' Тогда
			
			Если Почасовик Тогда
				
				// По магазину с 1.06.2015 почасовика расчитываем по часовой ставке
				Если ДатаНачисления >= '20150601' Тогда
					БонусБудни = ПараметрыРассчетаЗарплаты.ЧасоваяСтавкаПочасовика*КоличествоЧасовПочасовика/0.87;	
					
				// Не зависит от выручки	
				ИначеЕсли ДатаНачисления >= '20141001'Тогда
					БонусБудни = МинимальнаяДневнаяСтавкаПочасовика/0.87;
					
				Иначе
					БонусБудни = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаПочасовика/0.87);
					
				КонецЕсли;
				
			Иначе
				
				// Новый расчет 1 февраля 2017 года
				// ИП-00014642
				
				// Один обычный/старший продавец за смену получит 1500 рублей плюс 0,4% от выручки в этот день, но не меньше 2000 руб.
				
				Если ДатаНачисления >= Дата(2017, 02, 01) Тогда
					
					Если ЕстьНочныеСмены Тогда
						
						РасчСтавка = 1500 + Выручка * ?(ЗначениеЗаполнено(ПараметрыРассчетаЗарплаты.ПроцентОтВыручкиПоМагазинамСНочнымиСменами), ПараметрыРассчетаЗарплаты.ПроцентОтВыручкиПоМагазинамСНочнымиСменами/100, 0.003);
						
						БонусБудни = РасчСтавка/0.87; 
						
					Иначе
						
						МинСтавка  = МинимальнаяДневнаяСтавкаДляМагазина;
						РасчСтавка = 1500 + Выручка * ?(ЗначениеЗаполнено(ПараметрыРассчетаЗарплаты.ПроцентОтВыручки), ПараметрыРассчетаЗарплаты.ПроцентОтВыручки/100, 0.004);
						
						БонусБудни = Макс(МинСтавка, РасчСтавка)/0.87; 
						
					КонецЕсли;
					
				Иначе
				
					БонусБудни = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаДляМагазина/0.87);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И ДатаНачисления >= '20141001' Тогда	
			
			Если Почасовик Тогда
				БонусБудни = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаПочасовика/0.87);
				
			Иначе
				
				// Для Класса ТТ 10 свой расчет ЗП
				Если КлассТТ_Расчетный = 10 И ДатаНачисления >= '20141201' Тогда
					
					Если ДатаНачисления >= '20170201' Тогда
						БонусБудни = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаДляМагазина/0.87);
					Иначе
						БонусБудни = ?(Выручка < 25000, МинимальнаяДневнаяСтавкаДляМагазина/0.87, Выручка*ПроцентБонуса) + ПолучитьДоплатуДляТорговойТочкиСТипом10(Выручка)/0.87;
					КонецЕсли; 
					
				Иначе
					
					БонусБудни = Макс(Выручка*ПроцентБонуса, МинимальнаяДневнаяСтавкаДляМагазина/0.87);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		БонусБудни = 0;
	КонецЕсли;
	
	
	// Если стажер то +500 бонуса на руки
	БонусСтажерНДФЛ = 0;
	Если Стажер Тогда
		БонусСтажерНДФЛ = ПараметрыРассчетаЗарплаты.ДневнаяСтавкаСтажера/0.87;
	КонецЕсли;
	
	
	// Если группа развития и полный день или старший, то +2000 бонуса на руки
	БонусРазвитиеНДФЛ = 0;
	Если ДатаНачисления >= '20160601' И ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		
		Если ГруппаРазвития И Не (Стажер ИЛИ Практикант ИЛИ Почасовик ИЛИ НочнойПродавец ИЛИ СтаршийНочнойПродавец) Тогда
			
			Если (НачалоДня(ДатаНачисления) - НачалоДня(Выборка.ВРазвитииСДаты)) / 86400 + 1 > 37 Тогда
				БонусРазвитиеНДФЛ = 2500/0.87;
			Иначе
				БонусРазвитиеНДФЛ = ПараметрыРассчетаЗарплаты.ДневнойБонусГруппыРазвития/0.87;
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе	
		
		Если ГруппаРазвития И Не (Стажер ИЛИ Практикант ИЛИ Почасовик ИЛИ НочнойПродавец ИЛИ СтаршийНочнойПродавец) Тогда
			
			БонусРазвитиеНДФЛ = ПараметрыРассчетаЗарплаты.ДневнойБонусГруппыРазвития/0.87;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	// Если почасовик и группа развития, то +1000 бонуса на руки
	БонусПочасовикРазвитиеНДФЛ = 0;
	Если Почасовик И ГруппаРазвития Тогда
		БонусПочасовикРазвитиеНДФЛ = ПараметрыРассчетаЗарплаты.ДневнойБонусПрактикантПочасовикГруппыРазвития/0.87;
	КонецЕсли;
	
	
	// Если практикант, то +1000 бонуса на руки
	БонусПрактикантНДФЛ = 0;
	Если Практикант Тогда
		
		Если ГруппаРазвития И ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			БонусПрактикантНДФЛ = ПараметрыРассчетаЗарплаты.ДневнойБонусПрактикантПочасовикГруппыРазвития/0.87;
		Иначе
			БонусПрактикантНДФЛ = 1000/0.87;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Если ночной продавец, то +2000 бонуса на руки
	БонусНочнойПродавецНДФЛ = 0;
	Если НочнойПродавец ИЛИ СтаршийНочнойПродавец Тогда
		
		Если ДатаНачисления >= Дата(2017, 02, 01) Тогда
			
			РасчСтавка = 1500 + Выручка * 0.003;
			
			БонусНочнойПродавецНДФЛ = РасчСтавка/0.87; 
			
		Иначе
			
			БонусНочнойПродавецНДФЛ = ПараметрыРассчетаЗарплаты.СтавкаЗаНочнуюСмену/0.87;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ИП-00014642.01
	// Если ставка заморожена, то платим ее
	Комментарий = "";
	Если ФиксированнаяСтавкаЗП > 0 Тогда
		БонусСНДФЛ  = ФиксированнаяСтавкаЗП/0.87;
		Комментарий = "Ставка заморожена";
	Иначе 
		БонусСНДФЛ = Макс(БонусВыходной, БонусБудни) + БонусРазвитиеНДФЛ + БонусСтажерНДФЛ + БонусПочасовикРазвитиеНДФЛ + БонусПрактикантНДФЛ + БонусНочнойПродавецНДФЛ;	
	КонецЕсли;
	
	Бонус = БонусСНДФЛ * 0.87;
	
	Если Бонус > 0 Тогда
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 			= ДатаНачисления;
		СтруктураДанных.ФизЛицо 				= Продавец;
		СтруктураДанных.ТорговаяТочка 			= ТорговаяТочка;
		СтруктураДанных.ТипРабот 				= ТипРабот;
		СтруктураДанных.Выручка 				= Выручка;
		СтруктураДанных.Бонус 					= Окр(Бонус, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 				= Окр(БонусСНДФЛ, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.КлассТТ 				= КлассТТ;
		СтруктураДанных.КлассТТРасчетный 		= КлассТТ_Расчетный;
		СтруктураДанных.КлассПродавца 			= "";
		СтруктураДанных.КоличествоПродавцов 	= КоличествоПродавцовНаТочкеОбщее;
		СтруктураДанных.КоличествоПродавцовПЧ 	= КоличествоПродавцовНаТочкеПЧ;
		СтруктураДанных.ПроцентБонуса 			= ПроцентБонуса;
		СтруктураДанных.Комментарий				= Комментарий;
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЕсли;
	
	
	// За старших продавцов начисляем отдельным типом СтаршийПродавецКонсультант
	
	БонусСПНДФЛ = 0;
	Если СтаршийПродавец Тогда
		
		БонусСПНДФЛ = ПараметрыРассчетаЗарплаты.ДневнойБонусСтаршемуПродавцу/0.87;
		
	ИначеЕсли СтаршийНочнойПродавец Тогда
		
		БонусСПНДФЛ = ПараметрыРассчетаЗарплаты.СтавкаСтаршегоНочногоПочасовика/0.87;
		
	КонецЕсли;
	
	Бонус = БонусСПНДФЛ * 0.87;
	
	Если Бонус > 0 Тогда
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 			= ДатаНачисления;
		СтруктураДанных.ФизЛицо 				= Продавец;
		СтруктураДанных.ТорговаяТочка 			= ТорговаяТочка;
		СтруктураДанных.ТипРабот 				= Перечисления.ТипыРаботДляРасчетаЗП.СтаршийПродавецКонсультант;
		СтруктураДанных.Выручка 				= Выручка;
		СтруктураДанных.Бонус 					= Окр(Бонус, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 				= Окр(БонусСПНДФЛ, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.КлассТТ 				= КлассТТ;
		СтруктураДанных.КлассТТРасчетный 		= КлассТТ_Расчетный;
		СтруктураДанных.КлассПродавца 			= "";
		СтруктураДанных.КоличествоПродавцов 	= КоличествоПродавцовНаТочкеОбщее;
		СтруктураДанных.КоличествоПродавцовПЧ 	= КоличествоПродавцовНаТочкеПЧ;
		СтруктураДанных.ПроцентБонуса 			= ПроцентБонуса;
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчитатьЗП_ОткрытиеТТ(ДатаНач, ДатаКон)
	
	ЗаполнитьТаблицуОкончанияРазвитияТТ(ДатаНач, ДатаКон);
	ОбновитьСправочник_БонусыПоРаскруткеТТ();
	ЗаполнитьТаблицуБонусов();
	
	ТТОкончанияРазвития = ТаблицаОкончанияРазвитияТТ;
	МассивТочек = ТТОкончанияРазвития.ВыгрузитьКолонку("ТорговаяТочка");
	
	Запрос = Новый Запрос;
	
	// Убирать не буду, может в будущем понадобится
	//РасчетПоНовойСхеме = (ДатаНач >= Дата(2016,12,1));
	
	РасчетПоНовойСхеме = Ложь;
	
	Если РасчетПоНовойСхеме Тогда
		
		// gusd (ИП-00014203)
		// Пока точна в развитии у нее могут смениться помощники, 
		// начисление необходимо производить только группе продавцов с последней смены помощника и до того как точка передана с развития
		
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
		Запрос.УстановитьПараметр("КонецПериода" , КонецДня(ДатаКон));
	 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистУчета.ТорговаяТочка,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК Дата
		|ПОМЕСТИТЬ ТТРазвитие
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.Обработан
		|	И ЛистУчета.Дата >= &НачалоПериода
		|	И ЛистУчета.ЦФО.id_ЦФО = 12
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчета.ТорговаяТочка
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектРоль.Объект КАК ТорговаяТочка,
		|	МАКСИМУМ(СоответствиеОбъектРоль.Период) КАК ДатаНачала,
		|	МАКСИМУМ(ТТРазвитие.Дата) КАК ДатаОкончанияНачисления
		|ПОМЕСТИТЬ ПериодыНачислений
		|ИЗ
		|	ТТРазвитие КАК ТТРазвитие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
		|		ПО ТТРазвитие.ТорговаяТочка = СоответствиеОбъектРоль.Объект
		|			И ТТРазвитие.Дата >= СоответствиеОбъектРоль.Период
		|ГДЕ
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|	СоответствиеОбъектРоль.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|	(СоответствиеОбъектРоль.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|   ИЛИ СоответствиеОбъектРоль.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
		//--- AK suvv
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеОбъектРоль.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СоответствиеОбъектРоль.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛистУчета.Ссылка КАК ЛистУчета,
		|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		|	ЛистУчета.ТорговаяТочка.СрокПередачи КАК СрокПередачи
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	ПериодыНачислений КАК ПериодыНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		|		ПО ПериодыНачислений.ТорговаяТочка = ЛистУчета.ТорговаяТочка
		|			И (НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) МЕЖДУ ПериодыНачислений.ДатаНачала И ПериодыНачислений.ДатаОкончанияНачисления)
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.ЦФО.id_ЦФО = 12
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчетаПродавцы.Пч = 0
		|					ИЛИ ЛистУчетаПродавцы.Пч = 2
		|					ИЛИ ЛистУчетаПродавцы.Пч = 5
		|					ИЛИ ЛистУчетаПродавцы.Пч = 6
		|				ТОГДА 1
		|			КОГДА ЛистУчетаПродавцы.Пч = 1
		|				ТОГДА 0.5
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДней,
		|	Документы.ТорговаяТочка,
		|	Документы.СрокПередачи
		|ИЗ
		|	Документы КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|		ПО Документы.ЛистУчета = ЛистУчетаПродавцы.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец,
		|	Документы.ТорговаяТочка,
		|	Документы.СрокПередачи";
		
	Иначе
		
		Запрос.Текст =
		// Найдем дату первого начисления
		"ВЫБРАТЬ
		|	МИНИМУМ(ЗарплатаПродавцов.ДатаНачисления) КАК ДатаНачала,
		|	ЗарплатаПродавцов.ТорговаяТочка,
		|	МАКСИМУМ(ЗарплатаПродавцов.ТорговаяТочка.СрокПередачи.КоличествоДнейДляНачисленияБонуса) КАК КоличествоДнейДляНачисленияБонуса
		|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитии
		|ИЗ
		|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
		|ГДЕ
		|	ЗарплатаПродавцов.ТорговаяТочка В(&МассивТочек)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаПродавцов.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыНачалаРаботыВРазвитии.ТорговаяТочка,
		|	ДатыНачалаРаботыВРазвитии.ДатаНачала,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыНачалаРаботыВРазвитии.ДатаНачала, ДЕНЬ, ДатыНачалаРаботыВРазвитии.КоличествоДнейДляНачисленияБонуса - 1), ДЕНЬ) КАК ДатаОкончанияНачисления
		|ПОМЕСТИТЬ ПериодыНачислений
		|ИЗ
		|	ДатыНачалаРаботыВРазвитии КАК ДатыНачалаРаботыВРазвитии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛистУчета.Ссылка КАК ЛистУчета,
		|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		|	ЛистУчета.ТорговаяТочка.СрокПередачи КАК СрокПередачи
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	ПериодыНачислений КАК ПериодыНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		|		ПО ПериодыНачислений.ТорговаяТочка = ЛистУчета.ТорговаяТочка
		|			И (ЛистУчета.Дата МЕЖДУ ПериодыНачислений.ДатаНачала И ПериодыНачислений.ДатаОкончанияНачисления)
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.ЦФО.id_ЦФО = 12
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчетаПродавцы.Пч = 0
		|					ИЛИ ЛистУчетаПродавцы.Пч = 2
		|					ИЛИ ЛистУчетаПродавцы.Пч = 5
		|					ИЛИ ЛистУчетаПродавцы.Пч = 6
		|				ТОГДА 1
		|			КОГДА ЛистУчетаПродавцы.Пч = 1
		|				ТОГДА 0.5
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДней,
		|	Документы.ТорговаяТочка,
		|	Документы.СрокПередачи
		|ИЗ
		|	Документы КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|		ПО Документы.ЛистУчета = ЛистУчетаПродавцы.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец,
		|	Документы.ТорговаяТочка,
		|	Документы.СрокПередачи";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивТочек", МассивТочек);
	
	ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаОкончанияРазвитияТТ Цикл
		
		ДатаНачисления 	= Строка.Дата;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		СрокПередачи	= ТорговаяТочка.СрокПередачи;
		
		МассивСтрок = ТаблицаПродавцов.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.Бонус;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Продавец;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ;
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	//+++ gusd (ИП-00014980)
	
	// Бонусы по раскрутке для кассиров
	
	Запрос.Текст =
	
	// Найдем дату первого начисления
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗарплатаПродавцов.ДатаНачисления) КАК ДатаНачала,
	|	ЗарплатаПродавцов.ТорговаяТочка,
	|	МАКСИМУМ(ЗарплатаПродавцов.ТорговаяТочка.СрокПередачи.КоличествоДнейДляНачисленияБонуса) КАК КоличествоДнейДляНачисленияБонуса
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитии
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|ГДЕ
	|	ЗарплатаПродавцов.ТорговаяТочка В(&МассивТочек)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаПродавцов.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаРаботыВРазвитии.ТорговаяТочка,
	|	ДатыНачалаРаботыВРазвитии.ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыНачалаРаботыВРазвитии.ДатаНачала, ДЕНЬ, ДатыНачалаРаботыВРазвитии.КоличествоДнейДляНачисленияБонуса - 1), ДЕНЬ) КАК ДатаОкончанияНачисления
	|ПОМЕСТИТЬ ПериодыНачислений
	|ИЗ
	|	ДатыНачалаРаботыВРазвитии КАК ДатыНачалаРаботыВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчета.Ссылка КАК ЛистУчета,
	|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчета.ТорговаяТочка.СрокПередачи КАК СрокПередачи
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	ПериодыНачислений КАК ПериодыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
	|		ПО ПериодыНачислений.ТорговаяТочка = ЛистУчета.ТорговаяТочка
	|			И (ЛистУчета.Дата МЕЖДУ ПериодыНачислений.ДатаНачала И ПериодыНачислений.ДатаОкончанияНачисления)
	|ГДЕ
	|	ЛистУчета.Проведен
	|	И ЛистУчета.ЦФО.id_ЦФО = 12
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаКассиры.Кассир,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаКассиры.СвойствоСотрудника = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДней,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
	|		ПО Документы.ЛистУчета = ЛистУчетаКассиры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаКассиры.Кассир,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи";
		
	Запрос.УстановитьПараметр("МассивТочек", МассивТочек);
	
	ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаОкончанияРазвитияТТ Цикл
		
		ДатаНачисления 	= Строка.Дата;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		СрокПередачи	= ТорговаяТочка.СрокПередачи;
		
		МассивСтрок = ТаблицаПродавцов.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.БонусКассира;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Кассир;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ_Кассир;  // для кассиров
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//--- gusd (ИП-00014980)
	
	//+++АК mika 2018.05.19 ИП-00018349
	//Бонусы по раскрутке для промоутеров
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗарплатаПродавцов.ДатаНачисления) КАК ДатаНачала,
	|	ЗарплатаПродавцов.ТорговаяТочка,
	|	МАКСИМУМ(ЗарплатаПродавцов.ТорговаяТочка.СрокПередачи.КоличествоДнейДляНачисленияБонуса) КАК КоличествоДнейДляНачисленияБонуса
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитии
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|ГДЕ
	|	ЗарплатаПродавцов.ТорговаяТочка В(&МассивТочек)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаПродавцов.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаРаботыВРазвитии.ТорговаяТочка,
	|	ДатыНачалаРаботыВРазвитии.ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыНачалаРаботыВРазвитии.ДатаНачала, ДЕНЬ, ДатыНачалаРаботыВРазвитии.КоличествоДнейДляНачисленияБонуса - 1), ДЕНЬ) КАК ДатаОкончанияНачисления
	|ПОМЕСТИТЬ ПериодыНачислений
	|ИЗ
	|	ДатыНачалаРаботыВРазвитии КАК ДатыНачалаРаботыВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчета.Ссылка КАК ЛистУчета,
	|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчета.ТорговаяТочка.СрокПередачи КАК СрокПередачи
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	ПериодыНачислений КАК ПериодыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
	|		ПО ПериодыНачислений.ТорговаяТочка = ЛистУчета.ТорговаяТочка
	|			И (ЛистУчета.Дата МЕЖДУ ПериодыНачислений.ДатаНачала И ПериодыНачислений.ДатаОкончанияНачисления)
	|ГДЕ
	|	ЛистУчета.Проведен
	|	И ЛистУчета.ЦФО.id_ЦФО = 12
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаПромоутеры.Промоутер,
	|	СУММА(1) КАК КоличествоДней,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Промоутеры КАК ЛистУчетаПромоутеры
	|		ПО Документы.ЛистУчета = ЛистУчетаПромоутеры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаПромоутеры.Промоутер,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи";

		
	Запрос.УстановитьПараметр("МассивТочек", МассивТочек);
	
	ТаблицаПродавцов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаОкончанияРазвитияТТ Цикл
		
		ДатаНачисления 	= Строка.Дата;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		СрокПередачи	= ТорговаяТочка.СрокПередачи;
		
		МассивСтрок = ТаблицаПродавцов.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.БонусПромоутера;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Промоутер;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ_Промоутер;  
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	//---АК mika 2018.05.19 ИП-00018349 (Бонус промоутера)
	
КонецПроцедуры
	

// Процедура выполняет расчет бонусов за Открытие_ТТ сотрудникам, с учетом повторного развития //+++АК mika 2018.07.03 ИП-00018928
//
// Параметры:
//  ДатаНач  - <Тип.Дата> - Начало периода расчета
//  ДатаКон  - <Тип.Дата> - Конец периода расчета
//                 
//
Процедура РасчитатьЗП_ОткрытиеТТ_Повторное(ДатаНач, ДатаКон)
	
	ЗаполнитьТаблицуОкончанияРазвитияТТ(ДатаНач, ДатаКон);
	ОбновитьСправочник_БонусыПоРаскруткеТТ();
	ЗаполнитьТаблицуБонусов();
	
	ТТОкончанияРазвития = ТаблицаОкончанияРазвитияТТ;
	МассивТочек = ТТОкончанияРазвития.ВыгрузитьКолонку("ТорговаяТочка");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Период
	|ПОМЕСТИТЬ ВТ_ПериодРазвития
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|			&КонецПериода,
	|			ЦФО.id_ЦФО = 12
	|				И СтруктурнаяЕдиница В (&МассивТочек)) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗарплатаПродавцов.ДатаНачисления) КАК ДатаНачала,
	|	ЗарплатаПродавцов.ТорговаяТочка,
	|	МАКСИМУМ(ЗарплатаПродавцов.ТорговаяТочка.СрокПередачи.КоличествоДнейДляНачисленияБонуса) КАК КоличествоДнейДляНачисленияБонуса
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитииЗП
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|ГДЕ
	|	ЗарплатаПродавцов.ТорговаяТочка В(&МассивТочек)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаПродавцов.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Таб_Периоды.ДатаНачала) КАК ДатаНачала,
	|	Таб_Периоды.ТорговаяТочка,
	|	МАКСИМУМ(Таб_Периоды.КоличествоДнейДляНачисленияБонуса) КАК КоличествоДнейДляНачисленияБонуса
	|ПОМЕСТИТЬ ДатыНачалаРаботыВРазвитии
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНачалаРаботыВРазвитииЗП.ДатаНачала КАК ДатаНачала,
	|		ДатыНачалаРаботыВРазвитииЗП.ТорговаяТочка КАК ТорговаяТочка,
	|		ДатыНачалаРаботыВРазвитииЗП.КоличествоДнейДляНачисленияБонуса КАК КоличествоДнейДляНачисленияБонуса
	|	ИЗ
	|		ДатыНачалаРаботыВРазвитииЗП КАК ДатыНачалаРаботыВРазвитииЗП
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПериодРазвития.Период,
	|		ВТ_ПериодРазвития.СтруктурнаяЕдиница,
	|		0
	|	ИЗ
	|		ВТ_ПериодРазвития КАК ВТ_ПериодРазвития) КАК Таб_Периоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб_Периоды.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаРаботыВРазвитии.ТорговаяТочка,
	|	ДатыНачалаРаботыВРазвитии.ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДатыНачалаРаботыВРазвитии.ДатаНачала, ДЕНЬ, ДатыНачалаРаботыВРазвитии.КоличествоДнейДляНачисленияБонуса - 1), ДЕНЬ) КАК ДатаОкончанияНачисления
	|ПОМЕСТИТЬ ПериодыНачислений
	|ИЗ
	|	ДатыНачалаРаботыВРазвитии КАК ДатыНачалаРаботыВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчета.Ссылка КАК ЛистУчета,
	|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчета.ТорговаяТочка.СрокПередачи КАК СрокПередачи
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	ПериодыНачислений КАК ПериодыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
	|		ПО ПериодыНачислений.ТорговаяТочка = ЛистУчета.ТорговаяТочка
	|			И (ЛистУчета.Дата МЕЖДУ ПериодыНачислений.ДатаНачала И ПериодыНачислений.ДатаОкончанияНачисления)
	|ГДЕ
	|	ЛистУчета.Проведен
	|	И ЛистУчета.ЦФО.id_ЦФО = 12
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаПродавцы.Продавец,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 0
	|					ИЛИ ЛистУчетаПродавцы.Пч = 2
	|					ИЛИ ЛистУчетаПродавцы.Пч = 5
	|					ИЛИ ЛистУчетаПродавцы.Пч = 6
	|				ТОГДА 1
	|			КОГДА ЛистУчетаПродавцы.Пч = 1
	|				ТОГДА 0.5
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДней,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	|		ПО Документы.ЛистУчета = ЛистУчетаПродавцы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаПродавцы.Продавец,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаКассиры.Кассир,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаКассиры.СвойствоСотрудника = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДней,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
	|		ПО Документы.ЛистУчета = ЛистУчетаКассиры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаКассиры.Кассир,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаПромоутеры.Промоутер,
	|	СУММА(1) КАК КоличествоДней,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Промоутеры КАК ЛистУчетаПромоутеры
	|		ПО Документы.ЛистУчета = ЛистУчетаПромоутеры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаПромоутеры.Промоутер,
	|	Документы.ТорговаяТочка,
	|	Документы.СрокПередачи";
	
	Запрос.УстановитьПараметр("МассивТочек", МассивТочек);
    Запрос.УстановитьПараметр("КонецПериода", ДатаКон);  //+++АК mika 2018.11.09 ИП-00018928 (учитывать возможность повторного развития в рамках расчетного месяца) 

	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	ТаблицаПродавцов   = РезультатЗапроса.Получить(5).Выгрузить();
	ТаблицаКассиров    = РезультатЗапроса.Получить(6).Выгрузить();
	ТаблицаПромоутеров = РезультатЗапроса.Получить(7).Выгрузить();
	
	Для Каждого Строка Из ТаблицаОкончанияРазвитияТТ Цикл
		
		ДатаНачисления 	= Строка.Дата;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		СрокПередачи	= ТорговаяТочка.СрокПередачи;
		
		//Бонусы по раскрутке Продавцов

		МассивСтрок = ТаблицаПродавцов.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.Бонус;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Продавец;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ;
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Бонусы по раскрутке Кассиров

	    МассивСтрок = ТаблицаКассиров.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));

		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.БонусКассира;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Кассир;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ_Кассир;  // для кассиров
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;

		//Бонусы по раскрутке для промоутеров
		
		МассивСтрок = ТаблицаПромоутеров.НайтиСтроки(Новый Структура("ТорговаяТочка", ТорговаяТочка));
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			
			ТТБонусы = ТаблицаБонусов;
			НайденаяСтрока = ТТБонусы.Найти(СрокПередачи, "СрокПередачи");
			
			Если НайденаяСтрока = Неопределено Тогда
				Бонус = 0;
			Иначе
				БонусРаскрутки = НайденаяСтрока.БонусПромоутера;
				Бонус = СтрокаМассива.КоличествоДней * БонусРаскрутки * 0.87;
			КонецЕсли;	
			
			Если Бонус <> 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрокаМассива.Промоутер;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ_Промоутер;  
				СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(Бонус/0.87, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПромоТовар()
	
	Для Каждого Строка Из ТаблицаПромоТовар Цикл
		
		ДатаНачисления 	= Строка.ДатаНачисления;
		НачалоПромо		= Строка.ДатаНачалаПромо;
		КонецПромо		= Строка.ДатаОкончанияПромо;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		
		// с 1.05.2016 промо по Избенке не начисляется
		Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка
			И ДатаНачисления >= Дата(2016,5,1) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		// Все по листам учета
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчетаПродавцы.Пч = 3
		|					ИЛИ ЛистУчетаПродавцы.Пч = 4
		|					ИЛИ ЛистУчетаПродавцы.Пч = 7
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЛистУчетаПродавцы.Пч = 1
		|							ИЛИ ЛистУчетаПродавцы.Пч = 5
		|							ИЛИ ЛистУчетаПродавцы.Пч = 6
		|						ТОГДА 0.5
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоДней
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = &ТорговаяТочка
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец
		|ИТОГИ
		|	СУММА(КоличествоДней)
		|ПО
		|	ОБЩИЕ";
		
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПромо);
		Запрос.УстановитьПараметр("КонецПериода" , КонецДня(КонецПромо));
		
		ЗапросВыручка = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчета.Обработан
		|				ТОГДА ВЫБОР
		|						КОГДА ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|							ТОГДА ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|						ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.Отклонение + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|					КОНЕЦ
		|			ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|		КОНЕЦ) КАК Выручка
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка");
		
		ЗапросВыручка.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		ЗапросВыручка.УстановитьПараметр("НачалоПериода", НачалоПромо);
		ЗапросВыручка.УстановитьПараметр("КонецПериода", КонецДня(КонецПромо));
		
		Выручка = ЗапросВыручка.Выполнить().Выгрузить().Итог("Выручка");
		
		ТаблицаПремий = Новый ТаблицаЗначений;
		ТаблицаПремий.Колонки.Добавить("Продавец");
		ТаблицаПремий.Колонки.Добавить("Премия");
		ТаблицаПремий.Колонки.Добавить("КоличествоСмен");
		ТаблицаПремий.Колонки.Добавить("ОбщееКоличествоСмен");
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий()Цикл
			
			ОбщееКоличествоДней = Выборка.КоличествоДней;
			
			Если ОбщееКоличествоДней = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаПродавец = Выборка.Выбрать();
			Пока ВыборкаПродавец.Следующий()Цикл
				
				КоличествоДнейПродавец = ВыборкаПродавец.КоличествоДней;
				
				Премия = (Строка.Премия * КоличествоДнейПродавец) / ОбщееКоличествоДней;
				
				НоваяСтрока = ТаблицаПремий.Добавить();
				НоваяСтрока.Продавец 			= ВыборкаПродавец.Продавец;
				НоваяСтрока.Премия 				= Премия;
				НоваяСтрока.КоличествоСмен		= КоличествоДнейПродавец;
				НоваяСтрока.ОбщееКоличествоСмен	= ОбщееКоличествоДней;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаПремий.Свернуть("Продавец, ОбщееКоличествоСмен", "Премия, КоличествоСмен");
		
		ТаблицаПремий.Колонки.Добавить("ПланПромо");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.ПланПродаж, "ПланПромо");
		
		ТаблицаПремий.Колонки.Добавить("ОбщаяПремия");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.Премия, "ОбщаяПремия");
		
		ТаблицаПремий.Колонки.Добавить("ФактПродаж");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.ФактПродаж, "ФактПродаж");
		
		Для Каждого СтрПремия Из ТаблицаПремий Цикл
			
			Если СтрПремия.Премия > 0 Тогда
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= СтрПремия.Продавец;
				СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПромоТовар;
				СтруктураДанных.Бонус 			= Окр(СтрПремия.Премия, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ		= Окр(СтрПремия.Премия/0.87, 0, РежимОкругления.Окр15как10);
				
				СтруктураДанных.Выручка 				 = СтрПремия.ФактПродаж;
				СтруктураДанных.ПланПромо 				 = СтрПремия.ПланПромо;
				СтруктураДанных.ОбщаяПремияПромо 		 = СтрПремия.ОбщаяПремия;
				СтруктураДанных.КоличествоСменПромо 	 = СтрПремия.КоличествоСмен;
				СтруктураДанных.ОбщееКоличествоСменПромо = СтрПремия.ОбщееКоличествоСмен;
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПромоТовар_КупоныВВ()
	
	НачисленияКупоныВВ = Новый ТаблицаЗначений;
	НачисленияКупоныВВ.Колонки.Добавить("ДатаНачисления");
	НачисленияКупоныВВ.Колонки.Добавить("Продавец");
	НачисленияКупоныВВ.Колонки.Добавить("ТорговаяТочка");
	НачисленияКупоныВВ.Колонки.Добавить("Премия");
	НачисленияКупоныВВ.Колонки.Добавить("КоличествоСмен");
	НачисленияКупоныВВ.Колонки.Добавить("ОбщееКоличествоСмен");
	НачисленияКупоныВВ.Колонки.Добавить("ПланПромо");
	НачисленияКупоныВВ.Колонки.Добавить("ОбщаяПремия");
	НачисленияКупоныВВ.Колонки.Добавить("ФактПродаж");
	
	Для Каждого Строка Из ТаблицаПромоТовар_КупоныВВ Цикл
		
		ДатаНачисления 	= Строка.ДатаНачисления;
		НачалоПромо		= Строка.ДатаНачалаПромо;
		КонецПромо		= Строка.ДатаОкончанияПромо;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		
		// с 1.06.2015 промо по магазинам не начисляется
		// с 1.05.2016 промо по Избенке не начисляется
		Если (ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И ДатаНачисления >= Дата(2015,6,1))
			ИЛИ (ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И ДатаНачисления >= Дата(2016,5,1))Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		// Все по листам учета
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчетаПродавцы.Пч = 3
		|					ИЛИ ЛистУчетаПродавцы.Пч = 4
		|					ИЛИ ЛистУчетаПродавцы.Пч = 7
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЛистУчетаПродавцы.Пч = 1
		|							ИЛИ ЛистУчетаПродавцы.Пч = 5
		|							ИЛИ ЛистУчетаПродавцы.Пч = 6
		|						ТОГДА 0.5
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоДней
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = &ТорговаяТочка
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец
		|ИТОГИ
		|	СУММА(КоличествоДней)
		|ПО
		|	ОБЩИЕ";
		
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПромо);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПромо));
		
		ЗапросВыручка = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчета.Обработан
		|				ТОГДА ВЫБОР
		|						КОГДА ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|							ТОГДА ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|						ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.Отклонение + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|					КОНЕЦ
		|			ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|		КОНЕЦ) КАК Выручка
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка");
		
		ЗапросВыручка.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		ЗапросВыручка.УстановитьПараметр("НачалоПериода", НачалоПромо);
		ЗапросВыручка.УстановитьПараметр("КонецПериода", КонецДня(КонецПромо));
		
		Выручка = ЗапросВыручка.Выполнить().Выгрузить().Итог("Выручка");
		
		ТаблицаПремий = Новый ТаблицаЗначений;
		ТаблицаПремий.Колонки.Добавить("Продавец");
		ТаблицаПремий.Колонки.Добавить("Премия");
		ТаблицаПремий.Колонки.Добавить("КоличествоСмен");
		ТаблицаПремий.Колонки.Добавить("ОбщееКоличествоСмен");
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий()Цикл
			
			ОбщееКоличествоДней = Выборка.КоличествоДней;
			
			Если ОбщееКоличествоДней = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаПродавец = Выборка.Выбрать();
			Пока ВыборкаПродавец.Следующий()Цикл
				
				КоличествоДнейПродавец = ВыборкаПродавец.КоличествоДней;
				
				Премия = (Строка.Премия * КоличествоДнейПродавец) / ОбщееКоличествоДней;
				
				НоваяСтрока = ТаблицаПремий.Добавить();
				НоваяСтрока.Продавец 			= ВыборкаПродавец.Продавец;
				НоваяСтрока.Премия 				= Премия;
				НоваяСтрока.КоличествоСмен		= КоличествоДнейПродавец;
				НоваяСтрока.ОбщееКоличествоСмен	= ОбщееКоличествоДней;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаПремий.Свернуть("Продавец, ОбщееКоличествоСмен", "Премия, КоличествоСмен");
		
		ТаблицаПремий.Колонки.Добавить("ПланПромо");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.ПланПродаж, "ПланПромо");
		
		ТаблицаПремий.Колонки.Добавить("ОбщаяПремия");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.Премия, "ОбщаяПремия");
		
		ТаблицаПремий.Колонки.Добавить("ФактПродаж");
		ТаблицаПремий.ЗаполнитьЗначения(Строка.ФактПродаж, "ФактПродаж");
		
		Для Каждого СтрПремия Из ТаблицаПремий Цикл
			
			Если СтрПремия.Премия > 0 Тогда
				
				НоваяСтр = НачисленияКупоныВВ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр, СтрПремия);
				
				НоваяСтр.ДатаНачисления = ДатаНачисления;
				НоваяСтр.ТорговаяТочка 	= ТорговаяТочка;
				НоваяСтр.Премия 		= СтрПремия.Премия;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НачисленияКупоныВВ.Свернуть("ДатаНачисления, Продавец, ТорговаяТочка", "Премия, КоличествоСмен, ОбщееКоличествоСмен, ПланПромо, ОбщаяПремия, ФактПродаж");
	
	Для Каждого СтрПремия Из НачисленияКупоныВВ Цикл
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= СтрПремия.ДатаНачисления;
		СтруктураДанных.ФизЛицо 		= СтрПремия.Продавец;
		СтруктураДанных.ТорговаяТочка 	= СтрПремия.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.КупоныВВ;
		СтруктураДанных.Бонус 			= Окр(СтрПремия.Премия, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ		= Окр(СтрПремия.Премия/0.87, 0, РежимОкругления.Окр15как10);
		
		СтруктураДанных.Выручка 				 = СтрПремия.ФактПродаж;
		СтруктураДанных.ПланПромо 				 = СтрПремия.ПланПромо;
		СтруктураДанных.ОбщаяПремияПромо 		 = СтрПремия.ОбщаяПремия;
		СтруктураДанных.КоличествоСменПромо 	 = СтрПремия.КоличествоСмен;
		СтруктураДанных.ОбщееКоличествоСменПромо = СтрПремия.ОбщееКоличествоСмен;
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПромоМесяц(ДатаНач, ДатаКон)
	
	ЗаполнитьТаблицуПромоМесяц(ДатаНач, ДатаКон);
	
	Для Каждого Строка Из ТаблицаПромоМесяц Цикл
		
		ДатаНачисления 	= Строка.Дата;
		ТорговаяТочка 	= Строка.ТорговаяТочка;
		ПланПродаж		= Строка.ПланПродаж;
		ТипРозничнойТочки = ТорговаяТочка.ТипРозничнойТочки;
		
		// С 1 февраля 2017 расчет убран для ВВ 
		// ИП-00014642
		Если ДатаНачисления >= Дата(2017,02,01) И ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			Продолжить;
		КонецЕсли;
		
		УсгловиеГруппыРазвития = ?(НачалоМесяца(ДатаНачисления) >= Дата(2015,2,1), " И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12", "");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчетаПродавцы.Пч = 3
		|					ИЛИ ЛистУчетаПродавцы.Пч = 4
		|					ИЛИ ЛистУчетаПродавцы.Пч = 7
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЛистУчетаПродавцы.Пч = 1 
		|							ИЛИ ЛистУчетаПродавцы.Пч = 5 
		|							ИЛИ ЛистУчетаПродавцы.Пч = 6
		|						ТОГДА 0.5
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоДней
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = &ТорговаяТочка
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода "+УсгловиеГруппыРазвития+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец
		|ИТОГИ
		|	СУММА(КоличествоДней)
		|ПО
		|	ОБЩИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ЛистУчета.Обработан
		|				ТОГДА ВЫБОР
		|						КОГДА ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|							ТОГДА ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|						ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.Отклонение + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|					КОНЕЦ
		|			ИНАЧЕ ЛистУчета.СуммаДокумента + ЛистУчета.Купон + ЛистУчета.КорректировкаZ + ЛистУчета.ВозвратПокупателю + ЛистУчета.ВозвратПокупателюБезнал + ЛистУчета.СуммаЭквайрингДоставка - ЛистУчета.КорректировкаБезналДоставка
		|		КОНЕЦ) КАК Выручка
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ(ЛистУчета.Ссылка)) КАК ДнейВРазвитии
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
		|	И ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчета.ЦФО.id_ЦФО = 12";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаНачисления));
		Запрос.УстановитьПараметр("КонецПериода" , КонецМесяца(ДатаНачисления));
		Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выручка = Результат[1].Выгрузить().Итог("Выручка");
		Выборка = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаРазвитие = Результат[2].Выбрать();
		
		КлассТТ_Расчетный = 0;
		// С 1 мая 2016 по Избенке новый алгоритм
		Если ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И ДатаНачисления >= Дата(2016,5,1) Тогда
			
			ПроцентВыполнения = ?(ПланПродаж = 0, 100, Выручка*100/ПланПродаж);
			
			ОбщаяПремия = 0;
			// Начислять при проценте выполнения более 98
			Если ПроцентВыполнения > 98 Тогда
				
				// Отбор только по рабочим дням
				ПоследнийРабочийДеньВМесяце = ПолучитьПоследнийРабочийДеньТТВМесяце(НачалоМесяца(ДатаНачисления), КонецМесяца(ДатаНачисления), ТорговаяТочка); 	
				
				КлассТТ_ДляТочки  = ПолучитьКлассТТИзТаблицы(ТорговаяТочка, ПоследнийРабочийДеньВМесяце);
				КлассТТ_Расчетный = Цел(КлассТТ_ДляТочки);
				
				// пример, 21:10 - КлассБонус 2. 10:20 - КлассБонус 1.
				КлассБонуса = Цел(КлассТТ_Расчетный/10);
				
				//
				Если КлассБонуса = 1 Тогда
					
					Если ПроцентВыполнения <= 99.99 Тогда
						ОбщаяПремия = 5000;
						
					Иначе
						ОбщаяПремия = 10000;
						
					КонецЕсли; 
					
				ИначеЕсли КлассБонуса = 2 Тогда
					
					Если ПроцентВыполнения <= 99.99 Тогда
						ОбщаяПремия = 7500;
						
					Иначе
						ОбщаяПремия = 15000;
						
					КонецЕсли;
					
				КонецЕсли; 
				
				// Также к сумме общего бонуса добавлять за каждый 1% превышения факта над планом, но не более 110%
				// Минеев подправил (было условие > 102), оказывается нужно от 103 процентов
				Если ПроцентВыполнения >= 103 Тогда
					
					ПроцентПеревыполнения = Цел(Мин(ПроцентВыполнения, 110) - 100);
					ПроцентПеревыполнения = ПроцентПеревыполнения - 2;
					Если ПроцентПеревыполнения > 8 Тогда
						ПроцентПеревыполнения = 8;
					КонецЕсли;	
					СуммаНадбавки = ПроцентПеревыполнения * 500;
					
					ОбщаяПремия = ОбщаяПремия + СуммаНадбавки;
					
				КонецЕсли;
				
				// Уберем суммы когда точка была в Развитии
				Если ВыборкаРазвитие.Следующий()Тогда
					
					ДнейВРазвитии = ВыборкаРазвитие.ДнейВРазвитии;
					ДнейВМесяце   = ((НачалоДня(КонецМесяца(ДатаНачисления)) - НачалоМесяца(ДатаНачисления)) / 86400) + 1;
					
					Если ДнейВРазвитии > 0 Тогда
						
						ОбщаяПремия = ОбщаяПремия - ДнейВРазвитии/ДнейВМесяце*ОбщаяПремия;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		// С 1 февраля новый алгоритм
		ИначеЕсли НачалоМесяца(ДатаНачисления) >= Дата(2015,2,1)Тогда
			
			ПроцентВыполнения = ?(ПланПродаж = 0, 100, Выручка*100/ПланПродаж);
			
			ОбщаяПремия = 0;
			// Начислять при проценте выполнения более 99
			Если ПроцентВыполнения > 99 Тогда
				
				// Отбор только по рабочим дням
				ПоследнийРабочийДеньВМесяце = ПолучитьПоследнийРабочийДеньТТВМесяце(НачалоМесяца(ДатаНачисления), КонецМесяца(ДатаНачисления), ТорговаяТочка); 	
				
				КлассТТ_ДляТочки  = ПолучитьКлассТТИзТаблицы(ТорговаяТочка, ПоследнийРабочийДеньВМесяце);
				КлассТТ_Расчетный = Цел(КлассТТ_ДляТочки);
				
				// пример, 21:10 - КлассБонус 2. 10:20 - КлассБонус 1.
				КлассБонуса = Цел(КлассТТ_Расчетный/10);
				
				ОбщаяПремия = ПолучитьСуммуБонусаИзСоответствияКлассовБонусовПромоМесяц(КлассБонуса);
				
				// Также к сумме общего бонуса добавлять за каждый 1% превышения факта над планом, но не более Общей премии по классу
				Если ПроцентВыполнения > 100 Тогда
					
					ПроцентПеревыполнения = Цел(ПроцентВыполнения - 100);
					СуммаНадбавки = ПолучитьСуммуНадбавкиЗаПеревыполнениеИзСоответствияКлассовБонусовПромоМесяц(КлассБонуса, ПроцентПеревыполнения);
					СуммаНадбавки = Мин(СуммаНадбавки, ОбщаяПремия);
					
					ОбщаяПремия = ОбщаяПремия + СуммаНадбавки;
					
				КонецЕсли;
				
				// Уберем суммы когда точка была в Развитии
				Если ВыборкаРазвитие.Следующий()Тогда
					
					ДнейВРазвитии = ВыборкаРазвитие.ДнейВРазвитии;
					ДнейВМесяце   = ((НачалоДня(КонецМесяца(ДатаНачисления)) - НачалоДня(НачалоМесяца(ДатаНачисления))) / 86400) + 1;
					
					Если ДнейВРазвитии > 0 Тогда
						
						ОбщаяПремия = ОбщаяПремия - ДнейВРазвитии/ДнейВМесяце*ОбщаяПремия;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		Иначе
			
			ОбщаяПремия = 0;
			Если Выручка >= ПланПродаж Тогда
				
				ФиксированнаяСтавка = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(НачалоМесяца(ДатаНачисления), Новый Структура("ТипРозничнойТочки", ТипРозничнойТочки)).СтавкаПромоМесяц;
				ОбщаяПремия = ?(ФиксированнаяСтавка = 0, 10000, ФиксированнаяСтавка) + ((Выручка - ПланПродаж)/ПланПродаж * 100 * 1000); 
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщаяПремия > 0 Тогда
			
			Если Выборка.Следующий()Тогда
				
				ОбщееКоличествоПродавцов = Выборка.КоличествоДней;
				
				ВыборкаПродавцы = Выборка.Выбрать();
				Пока ВыборкаПродавцы.Следующий()Цикл
					
					ПремияПродавец = ОбщаяПремия * ВыборкаПродавцы.КоличествоДней / ОбщееКоличествоПродавцов;	
					
					Если ПремияПродавец > 0 Тогда
						
						СтруктураДанных = ПолучитьСтруктуруПолей();
						
						СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
						СтруктураДанных.ФизЛицо 		= ВыборкаПродавцы.Продавец;
						СтруктураДанных.ТорговаяТочка 	= ТорговаяТочка;
						СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПромоМесяц;
						СтруктураДанных.Бонус 			= Окр(ПремияПродавец, 0, РежимОкругления.Окр15как10);
						СтруктураДанных.БонусСНДФЛ		= Окр(ПремияПродавец/0.87, 0, РежимОкругления.Окр15как10);
						
						СтруктураДанных.Выручка 				 = Выручка;
						СтруктураДанных.ПланПромо 				 = ПланПродаж;
						СтруктураДанных.ОбщаяПремияПромо 		 = ОбщаяПремия;
						СтруктураДанных.КоличествоСменПромо 	 = ВыборкаПродавцы.КоличествоДней;
						СтруктураДанных.ОбщееКоличествоСменПромо = ОбщееКоличествоПродавцов;
						
						СтруктураДанных.КлассТТ = КлассТТ_Расчетный;
						СтруктураДанных.КлассТТРасчетный = КлассТТ_Расчетный;
						
						ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПремияЗаНаставничество(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	ЛистУчетаПродавцы.Ссылка КАК ЛистУчета
		|ПОМЕСТИТЬ ТаблицаСтажеров
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПредыдущегоМесяца И &КонецПредыдущегоМесяца
		|	И ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Пч = 4
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛистУчетаПродавцы.Продавец
		|ПОМЕСТИТЬ ПродавцыИзСтажеров
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Продавец В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТаблицаСтажеров.Продавец
		|			ИЗ
		|				ТаблицаСтажеров)
		|	И ЛистУчетаПродавцы.Пч В (0, 1, 2, 5, 6)
		|	И ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоТекущегоМесяца И &КонецТекущегоМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСтажеров.ЛистУчета
		|ПОМЕСТИТЬ ЛистыДляРасчета
		|ИЗ
		|	ТаблицаСтажеров КАК ТаблицаСтажеров
		|ГДЕ
		|	ТаблицаСтажеров.Продавец В
		|			(ВЫБРАТЬ
		|				ПродавцыИзСтажеров.Продавец
		|			ИЗ
		|				ПродавцыИзСтажеров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Ссылка КАК Ссылка,
		|	ЛистУчетаПродавцы.Продавец КАК Продавец,
		|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЛистыДляРасчета.ЛистУчета
		|			ИЗ
		|				ЛистыДляРасчета)
		|	И ЛистУчетаПродавцы.Пч В (0, 2)
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продавец)
		|ПО
		|	Ссылка");
		
		КонецТекущегоМесяца 	= КонецДня(СтрМассива);
		КонецПредыдущегоМесяца 	= КонецМесяца(ДобавитьМесяц(КонецТекущегоМесяца, -1));
		
		Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(КонецПредыдущегоМесяца));
		Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  КонецПредыдущегоМесяца);
		Запрос.УстановитьПараметр("НачалоТекущегоМесяца", 	 НачалоМесяца(КонецТекущегоМесяца));
		Запрос.УстановитьПараметр("КонецТекущегоМесяца", 	 КонецТекущегоМесяца);
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТаблицаНачислений = Новый ТаблицаЗначений;
		ТаблицаНачислений.Колонки.Добавить("ФизЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаНачислений.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТаблицаНачислений.Колонки.Добавить("Премия", 		Новый ОписаниеТипов("Число"));
		ТаблицаНачислений.Колонки.Добавить("ПремияСНДФЛ", 	Новый ОписаниеТипов("Число"));
		
		Пока Выборка.Следующий()Цикл
			
			КоличествоПродавцовДляРаспределения = Выборка.Продавец;
			ТорговаяТочка	= Выборка.ТорговаяТочка;
			
			Если КоличествоПродавцовДляРаспределения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщаяПремия = 1000;
			
			ПремияНаКаждогоСотрудника 		= 1000/КоличествоПродавцовДляРаспределения;
			ПремияНаКаждогоСотрудникаСНДФЛ 	= ПремияНаКаждогоСотрудника/0.87;
			
			ДетальнаяВыборка = Выборка.Выбрать();
			Пока ДетальнаяВыборка.Следующий()Цикл
				
				НовоеНачисление = ТаблицаНачислений.Добавить();
				
				НовоеНачисление.ФизЛицо 		= ДетальнаяВыборка.Продавец;
				НовоеНачисление.ТорговаяТочка 	= ТорговаяТочка;
				НовоеНачисление.Премия 			= ПремияНаКаждогоСотрудника;
				НовоеНачисление.ПремияСНДФЛ 	= ПремияНаКаждогоСотрудникаСНДФЛ;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаНачислений.Свернуть("ФизЛицо, ТорговаяТочка", "Премия, ПремияСНДФЛ");
		
		Для Каждого СтрТЗ Из ТаблицаНачислений Цикл
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
				
			СтруктураДанных.ДатаНачисления 	= СтрМассива;
			СтруктураДанных.ФизЛицо 		= СтрТЗ.ФизЛицо;
			СтруктураДанных.ТорговаяТочка 	= СтрТЗ.ТорговаяТочка;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Наставничество;
			
			СтруктураДанных.Бонус 			= Окр(СтрТЗ.Премия, 2, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(СтрТЗ.ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПриведиДруга(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	ADOСоединение.Open();
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		КонецТекущегоМесяца 	= КонецДня(СтрМассива);
		КонецПредыдущегоМесяца 	= ДобавитьМесяц(КонецТекущегоМесяца, -1);
		
		// Смотрим прошлый месяц
		// +2000 т.к. формат дат 4014-12-01
		
		СтрЗапрос =
		"SELECT DATEADD(year, - 2000, FizLica._Fld10453) AS Период, 
		|		FizLica._Code AS КодНовогоФизЛица,
		|		Svoistva._Code, 
		|		FL._Code AS КодФизЛицаДляПремии
		|FROM [SRV-SQL05].HRM.dbo._Reference136 AS FizLica WITH (nolock)
		|LEFT OUTER JOIN [SRV-SQL05].HRM.dbo._InfoRg6743 AS ZnachenieSvoistv WITH (nolock) ON
		|	                 FizLica._IDRRef = ZnachenieSvoistv._Fld6744_RRRef
		|LEFT OUTER JOIN [SRV-SQL05].HRM.dbo._Reference136 AS FL WITH (nolock) ON
		|	                 ZnachenieSvoistv._Fld6746_RRRef = FL._IDRRef
		|LEFT OUTER JOIN [SRV-SQL05].HRM.dbo._Chrc447 AS Svoistva WITH (nolock) ON
		|	                 ZnachenieSvoistv._Fld6745RRef = Svoistva._IDRRef
		|WHERE FizLica._Fld10453 BETWEEN  {ts'" + Формат(ДобавитьМесяц(НачалоМесяца(КонецПредыдущегоМесяца), 12*2000), "ДФ='yyyy-MM-dd HH:mm:ss'") + "'} AND {ts'" + Формат(КонецМесяца(ДобавитьМесяц(КонецПредыдущегоМесяца, 12*2000)), "ДФ='yyyy-MM-dd HH:mm:ss'") + "'}
		|	AND Svoistva._Code = '0006'";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		ТаблицаФизЛиц = Новый ТаблицаЗначений;
		ТаблицаФизЛиц.Колонки.Добавить("ФизЛицоНовое",	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизЛиц.Колонки.Добавить("ФизЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизЛиц.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число"));
		
		Попытка
			
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				
				СтрокаДоб = ТаблицаФизЛиц.Добавить();
				
				СтрокаДоб.ФизЛицо		= Справочники.ФизическиеЛица.НайтиПоКоду(Rs.Fields("КодФизЛицаДляПремии").Value);
				СтрокаДоб.ФизЛицоНовое	= Справочники.ФизическиеЛица.НайтиПоКоду(Rs.Fields("КодНовогоФизЛица").Value);
				СтрокаДоб.Количество	= 1;
				
				rs.MoveNext();
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		
		ТаблицаФизЛиц.Свернуть("ФизЛицо, ФизЛицоНовое", "Количество");
		//+++AK ziga ИП-00016936 20171103
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	ТабельРаботыПродавцов.Сотрудник
		//|ИЗ
		//|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
		//|ГДЕ
		//|	ТабельРаботыПродавцов.Сотрудник В(&Сотрудники)
		//|	И ТабельРаботыПродавцов.СвойствоПродавца В (0, 2)
		//|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода");
		//
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТабельРаботыПродавцов.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
		|ГДЕ
		|	ТабельРаботыПродавцов.Сотрудник В(&Сотрудники)
		|	И ТабельРаботыПродавцов.СвойствоПродавца В (0, 2)
		|	И ТабельРаботыПродавцов.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботыГрузчиков.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыГрузчиков
		|ГДЕ
		|	ТабельРаботыГрузчиков.Сотрудник В(&Сотрудники)
		|	И ТабельРаботыГрузчиков.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботыКассиров.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
		|ГДЕ
		|	ТабельРаботыКассиров.Сотрудник В(&Сотрудники)
		|	И ТабельРаботыКассиров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ТабельРаботыКассиров.СвойствоСотрудника < 2 //+++АК mika 2018.12.09 ИП-00020658
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботыПромоутеров.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПромоутеров
		|ГДЕ
		|	ТабельРаботыПромоутеров.Сотрудник В(&Сотрудники)
		|	И ТабельРаботыПромоутеров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботыВнештатныхСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыВнештатныхСотрудников КАК ТабельРаботыВнештатныхСотрудников
		|ГДЕ
		|	ТабельРаботыВнештатныхСотрудников.Сотрудник В(&Сотрудники)
		|	И ТабельРаботыВнештатныхСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельРаботыСотрудниковАутсорсинг.Сотрудник
		|ИЗ
		|	РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыСотрудниковАутсорсинг
		|ГДЕ
		|	ТабельРаботыСотрудниковАутсорсинг.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ТабельРаботыСотрудниковАутсорсинг.Сотрудник В(&Сотрудники)");
		//---AK ziga ИП-00016936 20171103

		Запрос.УстановитьПараметр("Сотрудники", 	ТаблицаФизЛиц.ВыгрузитьКолонку("ФизЛицоНовое"));
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(КонецТекущегоМесяца));
		Запрос.УстановитьПараметр("КонецПериода", 	КонецТекущегоМесяца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТаблицаНачислений = Новый ТаблицаЗначений();
		ТаблицаНачислений.Колонки.Добавить("ФизЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаНачислений.Колонки.Добавить("Премия", 	Новый ОписаниеТипов("Число"));
		
		Пока Выборка.Следующий()Цикл
			
			НайденныеСтроки = ТаблицаФизЛиц.НайтиСтроки(Новый Структура("ФизЛицоНовое", Выборка.Сотрудник));
			Для каждого Стр Из НайденныеСтроки Цикл
				
				НовСтрока = ТаблицаНачислений.Добавить();
				НовСтрока.ФизЛицо = Стр.ФизЛицо;
				НовСтрока.Премия = 2500*Стр.Количество;
				
			КонецЦикла; 
			
		КонецЦикла;
		
		ТаблицаНачислений.Свернуть("ФизЛицо", "Премия");
		
		Для каждого СтрТЗ Из ТаблицаНачислений Цикл
			
			Премия = СтрТЗ.Премия;
			ПремияСНДФЛ = Премия/0.87;
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
			СтруктураДанных.ФизЛицо 		= СтрТЗ.ФизЛицо;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПриведиДруга;
			
			СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
		КонецЦикла;
		
	КонецЦикла;
	
	ADOСоединение.Close();
	
КонецПроцедуры

Процедура РасчитатьЗП_Анкета(ДатаНач, ДатаКон)
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	ADOСоединение.Open();
	
	СтрЗапрос =	
	"SELECT DATEADD(year, - 2000, Anketi._Period) AS Период,
	|		FizLica._Description AS ФизЛицо,
	|		FizLica._Code AS КодФизлица, 
	|		Anketi._Fld10456 AS КоличествоАнкет
	|FROM [SRV-SQL05].HRM.dbo._InfoRg10454 AS Anketi WITH (nolock)
	|LEFT OUTER JOIN [SRV-SQL05].HRM.dbo._Reference136 AS FizLica WITH (nolock) ON
	|	                 Anketi._Fld10455RRef = FizLica._IDRRef  
	|WHERE DATEADD(year, - 2000, Anketi._Period) BETWEEN  {d'" + Формат(ДатаНач, "ДФ=yyyy-MM-dd") + "'} AND {d'" + Формат(ДатаКон, "ДФ=yyyy-MM-dd") + "'}";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаАнкет = Новый ТаблицаЗначений;
	ТаблицаАнкет.Колонки.Добавить("Период", 			Новый ОписаниеТипов("Дата"));
	ТаблицаАнкет.Колонки.Добавить("ФизЛицо", 			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаАнкет.Колонки.Добавить("КоличествоАнкет", 	Новый ОписаниеТипов("Число"));
	
	Попытка
		
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			СтрокаДоб = ТаблицаАнкет.Добавить();
			
			СтрокаДоб.Период 			= Rs.Fields("Период").Value;
			СтрокаДоб.ФизЛицо			= Справочники.ФизическиеЛица.НайтиПоКоду(Rs.Fields("КодФизлица").Value);
			СтрокаДоб.КоличествоАнкет	= Rs.Fields("КоличествоАнкет").Value;
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	ТаблицаАнкет.Свернуть("Период, ФизЛицо", "КоличествоАнкет");
	
	Для каждого СтрТЗ Из ТаблицаАнкет Цикл
		
		Премия = 500*СтрТЗ.КоличествоАнкет;
		ПремияСНДФЛ = Премия/0.87;
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= СтрТЗ.Период;
		СтруктураДанных.ФизЛицо 		= СтрТЗ.ФизЛицо;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Анкета;
		
		СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура РасчитатьЗП_Зазывала(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Зазавалы.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	Зазавалы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Зазавалы.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	Зазавалы.Промоутер КАК ФизЛицо,
	|	СУММА(Зазавалы.КоличествоЧасов) КАК КоличествоЧасов
	|ИЗ
	|	Документ.ЛистУчета.Промоутеры КАК Зазавалы
	|ГДЕ
	|	Зазавалы.Ссылка.Проведен
	|	И Зазавалы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Зазавалы.Промоутер,
	|	Зазавалы.Ссылка.ТорговаяТочка,
	|	Зазавалы.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	НАЧАЛОПЕРИОДА(Зазавалы.Ссылка.Дата, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));	
		
		Премия = ПараметрыРассчета.ЧасоваяСтавкаЗазывалы*Выборка.КоличествоЧасов;
		ПремияСНДФЛ = Премия/0.87;
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Промоутер;
		
		СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_Внештатник(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВнештатныеСотрудники.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ВнештатныеСотрудники.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	ВнештатныеСотрудники.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	ВнештатныеСотрудники.Сотрудник КАК ФизЛицо,
	|	ВнештатныеСотрудники.Сотрудник.ДолжностьВнештатника КАК ДолжностьВнештатника,
	|	СУММА(ВнештатныеСотрудники.КоличествоЧасов) КАК КоличествоЧасов
	|ИЗ
	|	Документ.ЛистУчета.ВнештатныеСотрудники КАК ВнештатныеСотрудники
	|ГДЕ
	|	ВнештатныеСотрудники.Ссылка.Проведен
	|	И ВнештатныеСотрудники.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнештатныеСотрудники.Сотрудник,
	|	ВнештатныеСотрудники.Ссылка.ТорговаяТочка,
	|	ВнештатныеСотрудники.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	ВнештатныеСотрудники.Сотрудник.ДолжностьВнештатника,
	|	НАЧАЛОПЕРИОДА(ВнештатныеСотрудники.Ссылка.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Ссылка,
	|	ДолжностиВнештатныхСотрудниковСтавки.Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДолжностиВнештатныхСотрудниковСтавки.Ссылка КАК Ссылка,
	|		МАКСИМУМ(ДолжностиВнештатныхСотрудниковСтавки.ДействуетС) КАК ДействуетС
	|	ИЗ
	|		Справочник.ДолжностиВнештатныхСотрудников.Ставки КАК ДолжностиВнештатныхСотрудниковСтавки
	|	ГДЕ
	|		ДолжностиВнештатныхСотрудниковСтавки.ДействуетС <= &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДолжностиВнештатныхСотрудниковСтавки.Ссылка) КАК ВЗ_Запрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолжностиВнештатныхСотрудников.Ставки КАК ДолжностиВнештатныхСотрудниковСтавки
	|		ПО ВЗ_Запрос.Ссылка = ДолжностиВнештатныхСотрудниковСтавки.Ссылка
	|			И ВЗ_Запрос.ДействуетС = ДолжностиВнештатныхСотрудниковСтавки.ДействуетС");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабСтавки = Результаты[1].Выгрузить();
	Пока Выборка.Следующий()Цикл
		
		СтрокаСтавка = ТабСтавки.Найти(Выборка.ДолжностьВнештатника, "Ссылка");
		ЧасоваяСтавка = 0;
		Если СтрокаСтавка <> Неопределено Тогда
			ЧасоваяСтавка = СтрокаСтавка.Ставка;
		КонецЕсли;	
		
		Премия = ЧасоваяСтавка*Выборка.КоличествоЧасов;
		ПремияСНДФЛ = Премия/0.87;
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Внештатник;
		
		СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПремияЗаВыкладку_ФотоОтчет(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	//
	ПереходнаяДата = Дата(2016, 03, 15);
	Если ПереходнаяДата >= ДатаНач И ПереходнаяДата <= ДатаКон Тогда
		
		МассивПериодов.Добавить(ПереходнаяДата);
		
	КонецЕсли;
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		Если СтрМассива > Дата(2016, 03, 15)Тогда
			
			// Переход на расчет за текущий месяц
			НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
			КонецТекущегоМесяца  = КонецДня(СтрМассива);
			НачалоПредыдущегоМесяца = НачалоТекущегоМесяца;
			КонецПредыдущегоМесяца  = КонецТекущегоМесяца;
			
		Иначе	
			
			НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
			КонецТекущегоМесяца  = КонецДня(СтрМассива);
			НачалоПредыдущегоМесяца = ДобавитьМесяц(НачалоМесяца(СтрМассива), -1);
			КонецПредыдущегоМесяца  = КонецМесяца(НачалоПредыдущегоМесяца);
			
		КонецЕсли;
		
		// Весь расчет только с 1.06.2015
		Если НачалоТекущегоМесяца < Дата(2015,06,01) Тогда
			Продолжить;
		КонецЕсли;
		
		// С 1 февраля 2017 расчет убран 
		// ИП-00014642
		Если НачалоТекущегоМесяца >= Дата(2017,02,01) Тогда
			Продолжить;
		КонецЕсли;
		
		пТипРабот = ?(КонецТекущегоМесяца >= Дата(2016,02,01), Перечисления.ТипыРаботДляРасчетаЗП.ФотоОтчет, Перечисления.ТипыРаботДляРасчетаЗП.ПремияЗаВыкладку);
		
		Если СтрМассива >= Дата(2016, 08, 01)Тогда // + Ночные почасовики
			
			//+++ АК gusd (ИП-00014167)
			// Ночных продавцов необходимо брать из ЛУ предыдущего дня.
			
			// только по магазинам и не в группе развития
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЛистУчетаПродавцы.Продавец,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК ДатаЛистаУчета,
			|	ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО КАК id_ЦФО
			|ПОМЕСТИТЬ ВсеПродавцы
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И ЛистУчетаПродавцы.Пч В (0, 2)
			|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛистУчетаПродавцы.Продавец,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка,
			|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ), ДЕНЬ, 1),
			|	ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1) И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, -1)
			|	И ЛистУчетаПродавцы.Пч В (5, 6)
			|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеПродавцы.Продавец,
			|	ВсеПродавцы.ТорговаяТочка,
			|	ПроцентыТайногоПокупателя.Процент
			|ПОМЕСТИТЬ Итоговая
			|ИЗ
			|	ВсеПродавцы КАК ВсеПродавцы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыТайногоПокупателя КАК ПроцентыТайногоПокупателя
			|		ПО ВсеПродавцы.Продавец = ПроцентыТайногоПокупателя.Продавец
			|			И ВсеПродавцы.ТорговаяТочка = ПроцентыТайногоПокупателя.СтруктурнаяЕдиница
			|			И (ВсеПродавцы.ДатаЛистаУчета = НАЧАЛОПЕРИОДА(ПроцентыТайногоПокупателя.ДатаПроверки, ДЕНЬ))
			|ГДЕ
			|	НЕ ПроцентыТайногоПокупателя.Процент ЕСТЬ NULL 
			|	И (ПроцентыТайногоПокупателя.ТипАнкет = ""Выкладка""
			|			ИЛИ ПроцентыТайногоПокупателя.ТипАнкет = ""Фотоотчет"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Итоговая.Продавец,
			|	СРЕДНЕЕ(Итоговая.Процент) КАК Процент
			|ИЗ
			|	Итоговая КАК Итоговая
			|
			|СГРУППИРОВАТЬ ПО
			|	Итоговая.Продавец");
			
		Иначе	
			
			// только по магазинам и не в группе развития
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЛистУчетаПродавцы.Продавец,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК ДатаЛистаУчета,
			|	ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО КАК id_ЦФО
			|ПОМЕСТИТЬ ВсеПродавцы
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И ЛистУчетаПродавцы.Пч В (0, 2)
			|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеПродавцы.Продавец,
			|	ВсеПродавцы.ТорговаяТочка,
			|	ПроцентыТайногоПокупателя.Процент
			|ПОМЕСТИТЬ Итоговая
			|ИЗ
			|	ВсеПродавцы КАК ВсеПродавцы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыТайногоПокупателя КАК ПроцентыТайногоПокупателя
			|		ПО ВсеПродавцы.Продавец = ПроцентыТайногоПокупателя.Продавец
			|			И ВсеПродавцы.ТорговаяТочка = ПроцентыТайногоПокупателя.СтруктурнаяЕдиница
			|			И (ВсеПродавцы.ДатаЛистаУчета = НАЧАЛОПЕРИОДА(ПроцентыТайногоПокупателя.ДатаПроверки, ДЕНЬ))
			|ГДЕ
			|	НЕ ПроцентыТайногоПокупателя.Процент ЕСТЬ NULL 
			|	И (ПроцентыТайногоПокупателя.ТипАнкет = ""Выкладка""
			|			ИЛИ ПроцентыТайногоПокупателя.ТипАнкет = ""Фотоотчет"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Итоговая.Продавец,
			|	СРЕДНЕЕ(Итоговая.Процент) КАК Процент
			|ИЗ
			|	Итоговая КАК Итоговая
			|
			|СГРУППИРОВАТЬ ПО
			|	Итоговая.Продавец");
			
		КонецЕсли;
		
		// Смотрим за предыдущий месяц
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",  КонецПредыдущегоМесяца);
		
		ТаблицаПроцентов = Запрос.Выполнить().Выгрузить();
		
		МассивПродавцовПопавшихВПроверку = ТаблицаПроцентов.ВыгрузитьКолонку("Продавец");
		
		ПараметрыРассчетаЗарплаты = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(НачалоТекущегоМесяца, Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));
		ТаблицаСтавок = ПараметрыРассчетаЗарплаты.НастройкиПремииЗаВыкладку.Получить();
		Если Не ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрТЗ Из ТаблицаПроцентов Цикл
			
			Премия = 0;
			СреднийПроцентЗаВыкладку = СтрТЗ.Процент;
			
			Для Каждого СтрПроцент Из ТаблицаСтавок Цикл
				
				Если СреднийПроцентЗаВыкладку >= СтрПроцент.ПроцентС И СреднийПроцентЗаВыкладку <= СтрПроцент.ПроцентПо Тогда
					Премия = СтрПроцент.СуммаПремии;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Премия > 0 Тогда
				
				ПремияСНДФЛ = Премия/0.87;
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
				СтруктураДанных.ФизЛицо 		= СтрТЗ.Продавец;
				СтруктураДанных.ТипРабот 		= пТипРабот;
				
				СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если продавец не попал ни на одну проверку тайником, тогда начисляется 1500 руб, при условии, что отработал не менее 10 смен
		// Не в группе развития
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Продавец,
		|	СУММА(ВложенныйЗапрос.КоличествоСмен) КАК КоличествоСмен
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛистУчетаПродавцы.Продавец КАК Продавец,
		|		1 КАК КоличествоСмен
		|	ИЗ
		|		Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|	ГДЕ
		|		ЛистУчетаПродавцы.Ссылка.Проведен
		|		И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|		И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ЛистУчетаПродавцы.Пч В (0, 2)
		|		И НЕ ЛистУчетаПродавцы.Продавец В (&МассивПродавцов)
		|		И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
		|
		|";
		
		// с ноября 2016 включены ночные смены
		Если НачалоПредыдущегоМесяца >= Дата(2016,11,1)Тогда
			
			//+++ АК gusd (ИП-00014167)
			// Ночных продавцов необходимо брать из ЛУ предыдущего дня.
			
			ТекстЗапроса = ТекстЗапроса + 
			"	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЛистУчетаПродавцы.Продавец,
			|		1
			|	ИЗ
			|		Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|	ГДЕ
			|		ЛистУчетаПродавцы.Ссылка.Проведен
			|		И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|		И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -1) И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, -1)
			|		И ЛистУчетаПродавцы.Пч В (5, 6)
			|		И НЕ ЛистУчетаПродавцы.Продавец В (&МассивПродавцов)
			|		И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12) КАК ВложенныйЗапрос";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + ") КАК ВложенныйЗапрос";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Продавец
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.КоличествоСмен) >= 10";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("МассивПродавцов", МассивПродавцовПопавшихВПроверку);
		Запрос.УстановитьПараметр("НачалоПериода",   НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",    КонецПредыдущегоМесяца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			
			Премия = 1500;
			ПремияСНДФЛ = Премия/0.87;
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
			СтруктураДанных.ФизЛицо 		= Выборка.Продавец;
			СтруктураДанных.ТипРабот 		= пТипРабот;
			
			СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПремияЗаТайника(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
		КонецТекущегоМесяца  = КонецДня(СтрМассива);
		НачалоПредыдущегоМесяца = ДобавитьМесяц(НачалоМесяца(СтрМассива), -1);
		КонецПредыдущегоМесяца  = КонецМесяца(НачалоПредыдущегоМесяца);
		
		// Весь расчет только с 1.06.2015, со 01.02.2016 опрос по скайпу
		Если НачалоТекущегоМесяца < Дата(2015,06,01) ИЛИ НачалоТекущегоМесяца >= Дата(2016,02,01) Тогда
			Продолжить;
		КонецЕсли;
		
		// только по магазинам и не в группе развития
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцентыТайногоПокупателя.Продавец,
		|	СРЕДНЕЕ(ПроцентыТайногоПокупателя.Процент) КАК Процент
		|ИЗ
		|	РегистрСведений.ПроцентыТайногоПокупателя КАК ПроцентыТайногоПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		|		ПО (НАЧАЛОПЕРИОДА(ПроцентыТайногоПокупателя.ДатаПроверки, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ))
		|			И ПроцентыТайногоПокупателя.СтруктурнаяЕдиница = ЛистУчета.ТорговаяТочка
		|ГДЕ
		|	ПроцентыТайногоПокупателя.ТипАнкет = ""Тайник""
		|	И ПроцентыТайногоПокупателя.ДатаПроверки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПроцентыТайногоПокупателя.СтруктурнаяЕдиница.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И ЕСТЬNULL(ЛистУчета.ЦФО.id_ЦФО, 0) <> 12
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентыТайногоПокупателя.Продавец");
		
		// Смотрим за предыдущий месяц
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",  КонецПредыдущегоМесяца);
		
		ТаблицаПроцентов = Запрос.Выполнить().Выгрузить();
		
		МассивПродавцовПопавшихВПроверку = ТаблицаПроцентов.ВыгрузитьКолонку("Продавец");
		
		ПараметрыРассчетаЗарплаты = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(НачалоТекущегоМесяца, Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));
		ТаблицаСтавок = ПараметрыРассчетаЗарплаты.НастройкиПремииЗаТайника.Получить();
		Если Не ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрТЗ Из ТаблицаПроцентов Цикл
			
			Премия = 0;
			СреднийПроцентЗаВыкладку = СтрТЗ.Процент;
			
			Для Каждого СтрПроцент Из ТаблицаСтавок Цикл
				
				Если СреднийПроцентЗаВыкладку >= СтрПроцент.ПроцентС И СреднийПроцентЗаВыкладку <= СтрПроцент.ПроцентПо Тогда
					Премия = СтрПроцент.СуммаПремии;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Премия > 0 Тогда
				
				ПремияСНДФЛ = Премия/0.87;
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
				СтруктураДанных.ФизЛицо 		= СтрТЗ.Продавец;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПремияЗаТайника;
				
				СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если продавец не попал ни на одну проверку тайником, тогда начисляется 1500 руб, при условии, что отработал не менее 10 смен
		// Не в группе развития
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) КАК КоличествоСмен
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчетаПродавцы.Пч В (0, 2)
		|	И НЕ ЛистУчетаПродавцы.Продавец В (&МассивПродавцов)
		|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) >= 10");
		
		Запрос.УстановитьПараметр("МассивПродавцов", МассивПродавцовПопавшихВПроверку);
		Запрос.УстановитьПараметр("НачалоПериода",   НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",    КонецПредыдущегоМесяца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			
			Премия = 1500;
			ПремияСНДФЛ = Премия/0.87;
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
			СтруктураДанных.ФизЛицо 		= Выборка.Продавец;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПремияЗаТайника;
			
			СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_ПремияЗаТайника_Избенка(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	//
	ПереходнаяДата = Дата(2016, 06, 15);
	Если ПереходнаяДата >= ДатаНач И ПереходнаяДата <= ДатаКон Тогда
		
		МассивПериодов.Добавить(ПереходнаяДата);
		
	КонецЕсли;
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
		КонецТекущегоМесяца  = КонецДня(СтрМассива);
		
		// Весь расчет только с 1.05.2016
		Если НачалоТекущегоМесяца < Дата(2016, 5, 1)Тогда
			Продолжить;
		КонецЕсли;
		
		// Это переходная дата, за май нужно начислить 15.06.2016
		Дата_15_06_2016 = Дата(1,1,1);
		Если СтрМассива = Дата(2016, 06, 15)Тогда
			
			НачалоМесяцаПроверки = ДобавитьМесяц(НачалоМесяца(СтрМассива), -1);
			КонецМесяцаПроверки  = КонецМесяца(НачалоМесяцаПроверки);
			
			Дата_15_06_2016 = Дата(2016, 06, 15)
			
		Иначе	
			
			// С 1.06.2016 расчет идет за текущий месяц
			Если НачалоТекущегоМесяца < Дата(2016, 6, 1)Тогда
				
				НачалоМесяцаПроверки = ДобавитьМесяц(НачалоМесяца(СтрМассива), -1);
				КонецМесяцаПроверки  = КонецМесяца(НачалоМесяцаПроверки);
				
			Иначе
				
				НачалоМесяцаПроверки = НачалоТекущегоМесяца;
				КонецМесяцаПроверки  = КонецТекущегоМесяца;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		// только по Избенке и не в группе развития
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцентыТайногоПокупателя.Продавец,
		|	СРЕДНЕЕ(ПроцентыТайногоПокупателя.Процент) КАК Процент
		|ИЗ
		|	РегистрСведений.ПроцентыТайногоПокупателя КАК ПроцентыТайногоПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
		|		ПО (НАЧАЛОПЕРИОДА(ПроцентыТайногоПокупателя.ДатаПроверки, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ))
		|			И ПроцентыТайногоПокупателя.СтруктурнаяЕдиница = ЛистУчета.ТорговаяТочка
		|ГДЕ
		|	ПроцентыТайногоПокупателя.ТипАнкет = ""Тайник""
		|	И ПроцентыТайногоПокупателя.ДатаПроверки МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПроцентыТайногоПокупателя.СтруктурнаяЕдиница.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
		|	И ЕСТЬNULL(ЛистУчета.ЦФО.id_ЦФО, 0) <> 12
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентыТайногоПокупателя.Продавец");
		
		// Смотрим за предыдущий месяц
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяцаПроверки);
		Запрос.УстановитьПараметр("КонецПериода" , КонецМесяцаПроверки);
		
		ТаблицаПроцентов = Запрос.Выполнить().Выгрузить();
		
		МассивПродавцовПопавшихВПроверку = ТаблицаПроцентов.ВыгрузитьКолонку("Продавец");
		
		ПараметрыРассчетаЗарплаты = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(НачалоТекущегоМесяца, Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Избенка));
		ТаблицаСтавок = ПараметрыРассчетаЗарплаты.НастройкиПремииЗаТайника.Получить();
		Если Не ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрТЗ Из ТаблицаПроцентов Цикл
			
			Премия = 0;
			СреднийПроцентЗаВыкладку = СтрТЗ.Процент;
			
			Для Каждого СтрПроцент Из ТаблицаСтавок Цикл
				
				Если СреднийПроцентЗаВыкладку >= СтрПроцент.ПроцентС И СреднийПроцентЗаВыкладку <= СтрПроцент.ПроцентПо Тогда
					Премия = СтрПроцент.СуммаПремии;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Премия > 0 Тогда
				
				ПремияСНДФЛ = Премия/0.87;
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= ?(ЗначениеЗаполнено(Дата_15_06_2016), Дата_15_06_2016, КонецТекущегоМесяца); // начисление 15.06.2016
				СтруктураДанных.ФизЛицо 		= СтрТЗ.Продавец;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПремияЗаТайника;
				
				СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//// Если продавец не попал ни на одну проверку тайником, тогда начисляется 1500 руб, при условии, что отработал не менее 10 смен
		//// Не в группе развития
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	ЛистУчетаПродавцы.Продавец,
		//|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) КАК КоличествоСмен
		//|ИЗ
		//|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		//|ГДЕ
		//|	ЛистУчетаПродавцы.Ссылка.Проведен
		//|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
		//|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		//|	И ЛистУчетаПродавцы.Пч В (0, 2)
		//|	И НЕ ЛистУчетаПродавцы.Продавец В (&МассивПродавцов)
		//|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ЛистУчетаПродавцы.Продавец
		//|
		//|ИМЕЮЩИЕ
		//|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) >= 10");
		//
		//Запрос.УстановитьПараметр("МассивПродавцов", МассивПродавцовПопавшихВПроверку);
		//Запрос.УстановитьПараметр("НачалоПериода",   НачалоПредыдущегоМесяца);
		//Запрос.УстановитьПараметр("КонецПериода",    КонецПредыдущегоМесяца);
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий()Цикл
		//	
		//	Премия = 1500;
		//	ПремияСНДФЛ = Премия/0.87;
		//	
		//	СтруктураДанных = ПолучитьСтруктуруПолей();
		//	
		//	СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
		//	СтруктураДанных.ФизЛицо 		= Выборка.Продавец;
		//	СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ПремияЗаТайника;
		//	
		//	СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
		//	СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		//	
		//	ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
		//	
		//КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_БонусОтСтажа(ДатаНач, ДатаКон)
	
	ТаблицаСтажа = Новый ТаблицаЗначений;
	ТаблицаСтажа.Колонки.Добавить("ФизЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСтажа.Колонки.Добавить("СтажИзбенка", 	Новый ОписаниеТипов("Число"));
	ТаблицаСтажа.Колонки.Добавить("СтажВВ", 		Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	ADOСоединение.Open();
	
	СтрЗапрос = 
	"SELECT  [id_prod]
	|,[ExpIZ] AS СтажИзбенка
	|,[ExpVV] AS СтажВВ
	|FROM [Reports].[dbo].[Seller_Experience]";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			КодВТаблице = Строка(Rs.Fields("id_prod").Value);
			КодВТаблице = СтрЗаменить(КодВТаблице, Символы.НПП, "");
			
			КодФЛ   = Прав("0000000000" + КодВТаблице, 10);
			ФизЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(КодФЛ);
			
			Если ЗначениеЗаполнено(ФизЛицо)Тогда
				
				НоваяСтрока = ТаблицаСтажа.Добавить();
				
				НоваяСтрока.ФизЛицо 	= ФизЛицо;
				НоваяСтрока.СтажИзбенка = Rs.Fields("СтажИзбенка").Value;
				НоваяСтрока.СтажВВ 		= Rs.Fields("СтажВВ").Value;
				
			КонецЕсли;
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();	
	
	// Свернем, на всякий случай
	ТаблицаСтажа.Свернуть("ФизЛицо", "СтажИзбенка, СтажВВ");
	
	Если ТаблицаСтажа.Количество()Тогда
		
		// Получим все смены продавцов только по Магазинам и с 1.06.2015 и не в группе развития
		// ночным почасовикам тоже начислять
		
		//+++ gusd (ИП-00015100)
		// Добавлена оплата за стаж кассирам
		
		//+++ gusd (ИП-00016068)
		// Добавлена оплата Избенке и Почасовикам
		
		ДатаИзмененийВРасчете_01062017 = '2017-06-01';  
		
		Запрос = Новый Запрос;
		
		Если ДатаНач < ДатаИзмененийВРасчете_01062017 И ДатаКон > ДатаИзмененийВРасчете_01062017 Тогда
			ПромежуточнаяДата = ДатаИзмененийВРасчете_01062017;
		Иначе
			ПромежуточнаяДата = Дата(1,1,1); 
		КонецЕсли;
		
		Если ПромежуточнаяДата = ДатаИзмененийВРасчете_01062017 Тогда
			
			// 2 интервала, по старой и по новой схеме
			
			Запрос.Текст =
			// Старая схема
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК Период,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
			|	ЛистУчетаПродавцы.Продавец
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Проведен
			|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаПродавцы.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаПродавцы.Пч В (0, 2, 5, 6)
			|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаКассиры.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаКассиры.Ссылка.ТорговаяТочка,
			|	ЛистУчетаКассиры.Кассир
			|ИЗ
			|	Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
			|ГДЕ
			|	ЛистУчетаКассиры.Ссылка.Проведен
			|	И ЛистУчетаКассиры.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаКассиры.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаКассиры.СвойствоСотрудника В (0)
			|	И ЛистУчетаКассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаКассиры.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			// Новая схема
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка,
			|	ЛистУчетаПродавцы.Продавец
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Проведен
			|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &ДатаНачалаНов И &ДатаОкончанияНов
			|	И ЛистУчетаПродавцы.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаПродавцы.Пч В (0, 1, 2, 5, 6)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаКассиры.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаКассиры.Ссылка.ТорговаяТочка,
			|	ЛистУчетаКассиры.Кассир
			|ИЗ
			|	Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
			|ГДЕ
			|	ЛистУчетаКассиры.Ссылка.Проведен
			|	И ЛистУчетаКассиры.Ссылка.Дата МЕЖДУ &ДатаНачалаНов И &ДатаОкончанияНов
			|	И ЛистУчетаКассиры.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаКассиры.СвойствоСотрудника В (0)
			|	И ЛистУчетаКассиры.Ссылка.ЦФО.id_ЦФО <> 12
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.Период,
			|	ВТ.ТорговаяТочка,
			|	ВТ.Продавец
			|ИЗ
			|	ВТ КАК ВТ";
			
			Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНач);
			Запрос.УстановитьПараметр("ДатаОкончания"	, ПромежуточнаяДата - 1);
			
			Запрос.УстановитьПараметр("ДатаНачалаНов"	, ПромежуточнаяДата);
			Запрос.УстановитьПараметр("ДатаОкончанияНов", КонецДня(КонецПериода));
			
		ИначеЕсли ДатаИзмененийВРасчете_01062017 <= ДатаНач Тогда
			
			// Новая схема
			
			// Добавлена Избенка и почасовики
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК Период,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
			|	ЛистУчетаПродавцы.Продавец
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Проведен
			|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаПродавцы.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаПродавцы.Пч В (0, 1, 2, 5, 6)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаКассиры.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаКассиры.Ссылка.ТорговаяТочка,
			|	ЛистУчетаКассиры.Кассир
			|ИЗ
			|	Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
			|ГДЕ
			|	ЛистУчетаКассиры.Ссылка.Проведен
			|	И ЛистУчетаКассиры.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаКассиры.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаКассиры.СвойствоСотрудника В (0,2) //+++АК mika 2018.12.09 ИП-00020658
			|	И ЛистУчетаКассиры.Ссылка.ЦФО.id_ЦФО <> 12
			//+++АК mika 2018.06.04 ИП-00018840
			//Признак разделения таблицы «Грузчики» для расчета «Бонуса от стажа» - должность «Работник торгового зала»
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаГрузчики.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаГрузчики.Ссылка.ТорговаяТочка,
			|	ЛистУчетаГрузчики.ФизЛицо
			|ИЗ
			|	Документ.ЛистУчета.Грузчики КАК ЛистУчетаГрузчики
			|ГДЕ
			|	ЛистУчетаГрузчики.Ссылка.Проведен
			|	И ЛистУчетаГрузчики.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаГрузчики.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			//|	И ЛистУчетаГрузчики.СвойствоСотрудника В (0) //+++АК mika 2018.06.29 Без задачи. Включить расчет "Бонуса от стажа" для Ночных РТЗ
			|	И ЛистУчетаГрузчики.Ссылка.ЦФО.id_ЦФО <> 12
			|	И ЛистУчетаГрузчики.ФизЛицо.Должность = ""Работник торгового зала""
			//---АК mika 
			//+++АК mika 2018.09.18 ИП-00019793 Пекари
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПекари.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаПекари.Ссылка.ТорговаяТочка,
			|	ЛистУчетаПекари.ФизЛицо
			|ИЗ
			|	Документ.ЛистУчета.Пекари КАК ЛистУчетаПекари
			|ГДЕ
			|	ЛистУчетаПекари.Ссылка.Проведен
			|	И ЛистУчетаПекари.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаПекари.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаПекари.Ссылка.ЦФО.id_ЦФО <> 12
			//---АК mika 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.Период,
			|	ВТ.ТорговаяТочка,
			|	ВТ.Продавец
			|ИЗ
			|	ВТ КАК ВТ";
			
			Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНач);
			Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаКон));
			
		Иначе	
			
			// Старая схема
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК Период,
			|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
			|	ЛистУчетаПродавцы.Продавец
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|ГДЕ
			|	ЛистУчетаПродавцы.Ссылка.Проведен
			|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаПродавцы.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаПродавцы.Пч В (0, 2, 5, 6)
			|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЛистУчетаКассиры.Ссылка.Дата, ДЕНЬ),
			|	ЛистУчетаКассиры.Ссылка.ТорговаяТочка,
			|	ЛистУчетаКассиры.Кассир
			|ИЗ
			|	Документ.ЛистУчета.Кассиры КАК ЛистУчетаКассиры
			|ГДЕ
			|	ЛистУчетаКассиры.Ссылка.Проведен
			|	И ЛистУчетаКассиры.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ЛистУчетаКассиры.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 6, 1)
			|	И ЛистУчетаКассиры.СвойствоСотрудника В (0)
			|	И ЛистУчетаКассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЛистУчетаКассиры.Ссылка.ЦФО.id_ЦФО <> 12
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.Период,
			|	ВТ.ТорговаяТочка,
			|	ВТ.Продавец
			|ИЗ
			|	ВТ КАК ВТ";
			
			Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНач);
			Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаКон));
			
		КонецЕсли;
		
		ТаблицаВыходов = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаСтаж Из ТаблицаСтажа Цикл
		
			ОбщийСтаж = СтрокаСтаж.СтажИзбенка + СтрокаСтаж.СтажВВ;
			Если ОбщийСтаж < 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ПремияЗаСтаж = 0;
				
			Если ОбщийСтаж >= 1 И ОбщийСтаж < 2 Тогда
				ПремияЗаСтаж = 100;
				
			ИначеЕсли ОбщийСтаж >= 2 И ОбщийСтаж < 3 Тогда
				ПремияЗаСтаж = 200;
				
			ИначеЕсли ОбщийСтаж >= 3 И ОбщийСтаж < 4 Тогда
				ПремияЗаСтаж = 300;
				
			ИначеЕсли ОбщийСтаж >= 4 Тогда
				ПремияЗаСтаж = 400;	
				
			КонецЕсли;
			
			Если ПремияЗаСтаж > 0 Тогда
				
				Отбор = Новый Структура("Продавец", СтрокаСтаж.ФизЛицо);
				НайденныеСтроки = ТаблицаВыходов.НайтиСтроки(Отбор);
				
				Для Каждого СтрВыход Из НайденныеСтроки Цикл
					
					ПремияСНДФЛ = ПремияЗаСтаж/0.87;
					
					СтруктураДанных = ПолучитьСтруктуруПолей();
					
					СтруктураДанных.ДатаНачисления 	= СтрВыход.Период;
					СтруктураДанных.ФизЛицо 		= СтрВыход.Продавец;
					СтруктураДанных.ТорговаяТочка	= СтрВыход.ТорговаяТочка;
					СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.БонусОтСтажа;
					
					СтруктураДанных.Бонус 			= Окр(ПремияЗаСтаж, 2, РежимОкругления.Окр15как10);
					СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
					
					ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчитатьЗП_ОпросПоСкайпу(ДатаНач, ДатаКон)
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	//
	ПереходнаяДата = Дата(2016, 03, 15);
	Если ПереходнаяДата >= ДатаНач И ПереходнаяДата <= ДатаКон Тогда
		
		МассивПериодов.Добавить(ПереходнаяДата);
		
	КонецЕсли; 
	
	Для Каждого СтрМассива Из МассивПериодов Цикл
		
		Если СтрМассива > Дата(2016, 03, 15)Тогда
			
			// Переход на расчет за текущий месяц
			НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
			КонецТекущегоМесяца  = КонецДня(СтрМассива);
			НачалоПредыдущегоМесяца = НачалоТекущегоМесяца;
			КонецПредыдущегоМесяца  = КонецТекущегоМесяца;
			
		Иначе	
			
			НачалоТекущегоМесяца = НачалоМесяца(СтрМассива);
			КонецТекущегоМесяца  = КонецДня(СтрМассива);
			НачалоПредыдущегоМесяца = ДобавитьМесяц(НачалоМесяца(СтрМассива), -1);
			КонецПредыдущегоМесяца  = КонецМесяца(НачалоПредыдущегоМесяца);
			
		КонецЕсли; 
		
		// Весь расчет только с 1.02.2016
		Если НачалоТекущегоМесяца < Дата(2016,02,01) Тогда
			Продолжить;
		КонецЕсли;
		
		// С 1 февраля 2017 расчет убран 
		// ИП-00014642
		Если НачалоТекущегоМесяца >= Дата(2017,02,01) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрМассива >= Дата(2016, 08, 01) Тогда // + Оплата почасовикам за скайп
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Жалобы.Продавец,
			|	СУММА(Жалобы.КоличествоЖалоб) КАК КоличествоЖалоб
			|ПОМЕСТИТЬ ТаблицаЖалоб
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец1 КАК Продавец,
			|		1 КАК КоличествоЖалоб
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец1 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец2,
			|		1
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец2 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец3,
			|		1
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец3 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)) КАК Жалобы
			|
			|СГРУППИРОВАТЬ ПО
			|	Жалобы.Продавец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭкзаменыПродавцовВопросы.Продавец КАК Продавец,
			|	СРЕДНЕЕ(ЭкзаменыПродавцовВопросы.Результат * 4) КАК Процент
			|ПОМЕСТИТЬ Сводная
			|ИЗ
			|	Документ.ЭкзаменыПродавцов КАК ЭкзаменыПродавцовВопросы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|		ПО ЭкзаменыПродавцовВопросы.ТорговаяТочка = ЛистУчетаПродавцы.Ссылка.ТорговаяТочка
			|			И ЭкзаменыПродавцовВопросы.Продавец = ЛистУчетаПродавцы.Продавец
			|			И (НАЧАЛОПЕРИОДА(ЭкзаменыПродавцовВопросы.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ))
			|ГДЕ
			|	ЭкзаменыПродавцовВопросы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И ЭкзаменыПродавцовВопросы.Проведен
			|	И ЭкзаменыПродавцовВопросы.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЕСТЬNULL(ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО, 0) <> 12
			// Только основные и старшие продавцы и почасовики, (10 не существующий тип)
			|	И ЕСТЬNULL(ЛистУчетаПродавцы.Пч, 10) В (0, 1, 2, 5, 6)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭкзаменыПродавцовВопросы.Продавец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыЭкзаменов.Продавец,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаЖалоб.КоличествоЖалоб, 0) = 0
			|			ТОГДА 40
			|		ИНАЧЕ 0
			|	КОНЕЦ + РезультатыЭкзаменов.Процент КАК Процент
			|ИЗ
			|	Сводная КАК РезультатыЭкзаменов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЖалоб КАК ТаблицаЖалоб
			|		ПО РезультатыЭкзаменов.Продавец = ТаблицаЖалоб.Продавец";
			
		Иначе	
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Жалобы.Продавец,
			|	СУММА(Жалобы.КоличествоЖалоб) КАК КоличествоЖалоб
			|ПОМЕСТИТЬ ТаблицаЖалоб
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец1 КАК Продавец,
			|		1 КАК КоличествоЖалоб
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец1 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец2,
			|		1
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец2 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОбращенияПокупателей.Продавец3,
			|		1
			|	ИЗ
			|		РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
			|	ГДЕ
			|		ОбращенияПокупателей.ТипОбращения.Код = ""2""
			|		И НЕ ОбращенияПокупателей.РезультатОбращения.Код = ""1""
			|		И НЕ ОбращенияПокупателей.Продавец3 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		И НЕ ОбращенияПокупателей.ТипЖалобы.Код = ""37""
			|		И ОбращенияПокупателей.ДатаДок МЕЖДУ &НачалоПериода И &КонецПериода
			|		И ОбращенияПокупателей.СтатусЖалобы = ЗНАЧЕНИЕ(Перечисление.СтатусыЖалоб.Подтверждена)) КАК Жалобы
			|
			|СГРУППИРОВАТЬ ПО
			|	Жалобы.Продавец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭкзаменыПродавцовВопросы.Продавец КАК Продавец,
			|	СРЕДНЕЕ(ЭкзаменыПродавцовВопросы.Результат * 4) КАК Процент
			|ПОМЕСТИТЬ Сводная
			|ИЗ
			|	Документ.ЭкзаменыПродавцов КАК ЭкзаменыПродавцовВопросы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
			|		ПО ЭкзаменыПродавцовВопросы.ТорговаяТочка = ЛистУчетаПродавцы.Ссылка.ТорговаяТочка
			|			И ЭкзаменыПродавцовВопросы.Продавец = ЛистУчетаПродавцы.Продавец
			|			И (НАЧАЛОПЕРИОДА(ЭкзаменыПродавцовВопросы.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ))
			|ГДЕ
			|	ЭкзаменыПродавцовВопросы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И ЭкзаменыПродавцовВопросы.Проведен
			|	И ЭкзаменыПродавцовВопросы.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
			|	И ЕСТЬNULL(ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО, 0) <> 12
			// Только основные и старшие продавцы, (10 не существующий тип)
			|	И ЕСТЬNULL(ЛистУчетаПродавцы.Пч, 10) В (0, 2)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭкзаменыПродавцовВопросы.Продавец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыЭкзаменов.Продавец,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаЖалоб.КоличествоЖалоб, 0) = 0
			|			ТОГДА 40
			|		ИНАЧЕ 0
			|	КОНЕЦ + РезультатыЭкзаменов.Процент КАК Процент
			|ИЗ
			|	Сводная КАК РезультатыЭкзаменов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЖалоб КАК ТаблицаЖалоб
			|		ПО РезультатыЭкзаменов.Продавец = ТаблицаЖалоб.Продавец";
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		//
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",  КонецПредыдущегоМесяца);
		
		ТаблицаПроцентов = Запрос.Выполнить().Выгрузить();
		
		МассивПродавцовПопавшихВПроверку = ТаблицаПроцентов.ВыгрузитьКолонку("Продавец");
		
		ПараметрыРассчетаЗарплаты = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(НачалоТекущегоМесяца, Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));
		ТаблицаСтавок = ПараметрыРассчетаЗарплаты.НастройкиОпросПоСкайпу.Получить();
		Если Не ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрТЗ Из ТаблицаПроцентов Цикл
			
			Премия = 0;
			СреднийПроцентЗаВыкладку = СтрТЗ.Процент;
			
			Для Каждого СтрПроцент Из ТаблицаСтавок Цикл
				
				Если СреднийПроцентЗаВыкладку >= СтрПроцент.ПроцентС И СреднийПроцентЗаВыкладку <= СтрПроцент.ПроцентПо Тогда
					Премия = СтрПроцент.СуммаПремии;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Премия > 0 Тогда
				
				ПремияСНДФЛ = Премия/0.87;
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
				СтруктураДанных.ФизЛицо 		= СтрТЗ.Продавец;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ОпросПоСкайпу;
				
				СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если продавец не попал ни на одну проверку тайником, тогда начисляется 1500 руб, при условии, что отработал не менее 10 смен
		// Не в группе развития
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЛистУчетаПродавцы.Продавец,
		|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) КАК КоличествоСмен
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	ЛистУчетаПродавцы.Ссылка.Проведен
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
		|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЛистУчетаПродавцы.Пч В (0, 2)
		|	И НЕ ЛистУчетаПродавцы.Продавец В (&МассивПродавцов)
		|	И ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО <> 12
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчетаПродавцы.Продавец
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЛистУчетаПродавцы.Продавец) >= 10");
		
		Запрос.УстановитьПараметр("МассивПродавцов", МассивПродавцовПопавшихВПроверку);
		Запрос.УстановитьПараметр("НачалоПериода",   НачалоПредыдущегоМесяца);
		Запрос.УстановитьПараметр("КонецПериода",    КонецПредыдущегоМесяца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий()Цикл
			
			Премия = 1500;
			ПремияСНДФЛ = Премия/0.87;
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= КонецТекущегоМесяца;
			СтруктураДанных.ФизЛицо 		= Выборка.Продавец;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ОпросПоСкайпу;
			
			СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_Кассира(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	Кассиры.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	Кассиры.Кассир КАК ФизЛицо,
	|	СУММА(Кассиры.КоличествоЧасов) КАК КоличествоЧасов,
	|	Кассиры.СвойствоСотрудника,
	|	ВЫБОР
	|		КОГДА Кассиры.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития
	|ИЗ
	|	Документ.ЛистУчета.Кассиры КАК Кассиры
	|ГДЕ
	|	Кассиры.Ссылка.Проведен
	|	И Кассиры.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Кассиры.Кассир,
	|	Кассиры.Ссылка.ТорговаяТочка,
	|	Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ),
	|	Кассиры.СвойствоСотрудника,
	|	ВЫБОР
	|		КОГДА Кассиры.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));	
		
		Премия = 0;
		Если Выборка.СвойствоСотрудника = 0 Тогда
			Премия = ПараметрыРассчета.ЧасоваяСтавкаКассира*Выборка.КоличествоЧасов;
		ИначеЕсли Выборка.СвойствоСотрудника = 1 Тогда
			Премия = ПараметрыРассчета.СтавкаСтажераКассира;
		КонецЕсли;
		
		Если Премия = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ПремияСНДФЛ = Премия/0.87;
		
		//+++ gusd (ИП-00014980)
		Если Выборка.ГруппаРазвития Тогда
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.КассирУР;
		Иначе	
			ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Кассир;
		КонецЕсли; 
		//--- gusd (ИП-00014980)
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= ТипРабот;
		
		СтруктураДанных.Бонус 			= Окр(Премия	 , 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_Тренинг(ДатаНач, ДатаКон)
	
	//+++АК MIND 2017.11.21 добавил в процедуре детализированную запись по тренингам в регистр, чтобы расшифровку выдать такую можно было
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФизическиеЛицаПройденныеТренинги.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаПройденныеТренинги.ДатаПрохождения КАК Период,
	|	ФизическиеЛицаПройденныеТренинги.Тренинг КАК Тренинг,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФизическиеЛицаПройденныеТренинги.Тренинг) КАК Колво
	|ИЗ
	|	Справочник.ФизическиеЛица.ПройденныеТренинги КАК ФизическиеЛицаПройденныеТренинги
	|ГДЕ
	|	ФизическиеЛицаПройденныеТренинги.ТренингПройден
	|	И ФизическиеЛицаПройденныеТренинги.ДатаПрохождения МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаПройденныеТренинги.Ссылка,
	|	ФизическиеЛицаПройденныеТренинги.ДатаПрохождения,
	|	ФизическиеЛицаПройденныеТренинги.Тренинг");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		Премия = 1000*Выборка.Колво;
		ПремияСНДФЛ = Премия/0.87;
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Тренинг;
		
		СтруктураДанных.Бонус 			= Окр(Премия, 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		СтруктураДанных.Тренинг 		= Выборка.Тренинг;
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_Грузчика(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Грузчики.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	Грузчики.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	Грузчики.ФизЛицо КАК ФизЛицо,
	|	СУММА(Грузчики.КоличествоЧасов) КАК КоличествоЧасов,
	|	ВЫБОР
	|		КОГДА Грузчики.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития,
	|	Грузчики.СвойствоСотрудника
	|ИЗ
	|	Документ.ЛистУчета.Грузчики КАК Грузчики
	|ГДЕ
	|	Грузчики.Ссылка.Проведен
	|	И Грузчики.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Грузчики.ФизЛицо,
	|	Грузчики.Ссылка.ТорговаяТочка,
	|	Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	НАЧАЛОПЕРИОДА(Грузчики.Ссылка.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА Грузчики.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Грузчики.СвойствоСотрудника");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));	
		
		Премия = 0;
		Если Выборка.СвойствоСотрудника = 2 Тогда
			Премия = ПараметрыРассчета.СтавкаСтажераГрузчика;
		Иначе
			Премия = ПараметрыРассчета.ЧасоваяСтавкаГрузчика*Выборка.КоличествоЧасов;	
		КонецЕсли; 
		
		Если Премия = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПремияСНДФЛ = Премия/0.87;
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Грузчик;
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= ТипРабот;
		
		СтруктураДанных.Бонус 			= Окр(Премия	 , 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЗП_Пекаря(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Пекари.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	Пекари.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Пекари.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	Пекари.ФизЛицо КАК ФизЛицо,
	|	СУММА(Пекари.КоличествоЧасов) КАК КоличествоЧасов,
	|	Пекари.СвойствоСотрудника,
	|	ВЫБОР
	|		КОГДА Пекари.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития
	|ИЗ
	|	Документ.ЛистУчета.Пекари КАК Пекари
	|ГДЕ
	|	Пекари.Ссылка.Проведен
	|	И Пекари.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Пекари.ФизЛицо,
	|	Пекари.Ссылка.ТорговаяТочка,
	|	Пекари.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	НАЧАЛОПЕРИОДА(Пекари.Ссылка.Дата, ДЕНЬ),
	|	Пекари.СвойствоСотрудника,
	|	ВЫБОР
	|		КОГДА Пекари.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));	
		
		Премия = 0;
		Если Выборка.СвойствоСотрудника = 0 Тогда
			Премия = ПараметрыРассчета.ЧасоваяСтавкаПекаря*Выборка.КоличествоЧасов;
		ИначеЕсли Выборка.СвойствоСотрудника = 1 Тогда
			Премия = ПараметрыРассчета.СтавкаСтажераКассира;
		КонецЕсли;
		
		Если Премия = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ПремияСНДФЛ = Премия/0.87;
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Пекарь;
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= ТипРабот;
		
		СтруктураДанных.Бонус 			= Окр(Премия	 , 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

//АК БЕЛН 22.06.2017+

Процедура РасчитатьСуммуЗаПереработку(ДатаНач, ДатаКон)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ГрафикиРаботыМагазина.Период,
	|	ГрафикиРаботыМагазина.Магазин,
	|	ГрафикиРаботыМагазина.График
	|ПОМЕСТИТЬ втГрафики
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазина КАК ГрафикиРаботыМагазина
	|ГДЕ
	|	ГрафикиРаботыМагазина.Период > &НачалоПериода
	|	И ГрафикиРаботыМагазина.Период <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГрафикиРаботыМагазинаСрезПоследних.Период,
	|	ГрафикиРаботыМагазинаСрезПоследних.Магазин,
	|	ГрафикиРаботыМагазинаСрезПоследних.График
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазина.СрезПоследних(&НачалоПериода, ) КАК ГрафикиРаботыМагазинаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчета.Ссылка,
	|	ЛистУчета.ТорговаяТочка,
	|	МАКСИМУМ(втГрафики.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыПоМагазинам
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафики КАК втГрафики
	|		ПО ЛистУчета.ТорговаяТочка = втГрафики.Магазин
	|			И ЛистУчета.Дата >= втГрафики.Период
	|ГДЕ
	|	ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЛистУчета.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчета.Ссылка,
	|	ЛистУчета.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыПоМагазинам.Ссылка,
	|	втПериодыПоМагазинам.ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА втПериодыПоМагазинам.Период ЕСТЬ NULL 
	|			ТОГДА втПериодыПоМагазинам.Ссылка.ТорговаяТочка.ГрафикРаботыМагазина
	|		ИНАЧЕ втГрафики.График
	|	КОНЕЦ КАК График
	|ПОМЕСТИТЬ втЛистыСГрафиком
	|ИЗ
	|	втПериодыПоМагазинам КАК втПериодыПоМагазинам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафики КАК втГрафики
	|		ПО втПериодыПоМагазинам.ТорговаяТочка = втГрафики.Магазин
	|			И втПериодыПоМагазинам.Период = втГрафики.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛистыСГрафиком.Ссылка,
	|	втЛистыСГрафиком.ТорговаяТочка,
	|	РАЗНОСТЬДАТ(ГрафикиРаботыДниНедели.ВремяНачала, ГрафикиРаботыДниНедели.ВремяОкончания, ЧАС) КАК Часов
	|ПОМЕСТИТЬ втЛистыСграфикомНаДеньНедели
	|ИЗ
	|	втЛистыСГрафиком КАК втЛистыСГрафиком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ДниНедели КАК ГрафикиРаботыДниНедели
	|		ПО втЛистыСГрафиком.График = ГрафикиРаботыДниНедели.Ссылка
	|			И (ДЕНЬНЕДЕЛИ(втЛистыСГрафиком.Ссылка.Дата) = ГрафикиРаботыДниНедели.ДеньНедели + 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаПродавцы.Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 4
	|					ИЛИ ЛистУчетаПродавцы.Пч = 3
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоПродавцов,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПродавцовПЧ,
	|	СУММА(ВЫБОР
	|			КОГДА ЛистУчетаПродавцы.Пч = 5
	|					ИЛИ ЛистУчетаПродавцы.Пч = 6
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПродавцовНочь
	|ПОМЕСТИТЬ ТаблицаКоличестваПродавцов
	|ИЗ
	|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	|ГДЕ
	|	ЛистУчетаПродавцы.Ссылка.Проведен
	|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчетаПродавцы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчетаПродавцы.Ссылка,
	|	ЛистУчетаПродавцы.НомерСтроки,
	|	ЛистУчетаПродавцы.Продавец,
	|	ЛистУчетаПродавцы.КоличествоЧасов,
	|	ЛистУчетаПродавцы.ДобавилПользовательИзТабеля
	|ПОМЕСТИТЬ втСотрудники
	|ИЗ
	|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	|ГДЕ
	|	ЛистУчетаПродавцы.Ссылка.Проведен
	|	И ЛистУчетаПродавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ЛистУчетаПродавцы.Пч В (1, 3, 4)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) КАК ДатаНачисления,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчетаПродавцы.Ссылка,
	|	ЛистУчетаПродавцы.Продавец,
	|	ЛистУчетаПродавцы.КоличествоЧасов КАК КоличествоЧасовПочасовика,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.Отклонение + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ ЛистУчетаПродавцы.Ссылка.СуммаДокумента + ЛистУчетаПродавцы.Ссылка.Купон + ЛистУчетаПродавцы.Ссылка.КорректировкаZ + ЛистУчетаПродавцы.Ссылка.СуммаЭквайрингДоставка - ЛистУчетаПродавцы.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ КАК Выручка,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцов,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцовПЧ,
	|	ТаблицаКоличестваПродавцов.КоличествоПродавцовНочь,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА ЛистУчетаПродавцы.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития,
	|	ЛистУчетаПродавцы.Ссылка.ТорговаяТочка.НочнойМагазин КАК НочнойМагазин,
	|	втЛистыСграфикомНаДеньНедели.Часов
	|ИЗ
	|	втСотрудники КАК ЛистУчетаПродавцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКоличестваПродавцов КАК ТаблицаКоличестваПродавцов
	|		ПО ЛистУчетаПродавцы.Ссылка = ТаблицаКоличестваПродавцов.Ссылка
	|			И (ТаблицаКоличестваПродавцов.КоличествоПродавцовНочь = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛистыСграфикомНаДеньНедели КАК втЛистыСграфикомНаДеньНедели
	|		ПО ЛистУчетаПродавцы.Ссылка = втЛистыСграфикомНаДеньНедели.Ссылка
	|ГДЕ
	|	втЛистыСграфикомНаДеньНедели.Часов > 13
	|	И втЛистыСграфикомНаДеньНедели.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Ставка = Константы.ДополнительныйЗаработокЗаЧасПереработки.Получить();
	Если Ставка = 0 Тогда
		Ставка = 142;
	КонецЕсли; 
	
	Пока Выборка.Следующий()Цикл
		
		//mind 2017-07-18 выкидываем развитие
		Если Выборка.ГруппаРазвития Тогда
			Продолжить;
		КонецЕсли;	
		
	    Премия = (Выборка.Часов - 13)*Ставка;
		
		ПремияСНДФЛ = Премия/0.87;
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.СуммаЗаПереработку;
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.ДатаНачисления;
		СтруктураДанных.ФизЛицо 		= Выборка.Продавец;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= ТипРабот;
		
		СтруктураДанных.Бонус 			= Окр(Премия	 , 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
КонецПроцедуры

//АК БЕЛН 22.06.2017-

//mind 2017-07-10
Процедура РасчитатьЗП_ЭкстренныйВызов(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЗ_Запрос.Период,
	|	ВЗ_Запрос.ТорговаяТочка,
	|	ВЗ_Запрос.ТипРозничнойТочки,
	|	ВЗ_Запрос.ФизЛицо,
	|	СУММА(ВЗ_Запрос.КоличествоВыходов) КАК КоличествоВыходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Продавцы.Ссылка.Дата, ДЕНЬ) КАК Период,
	|		Продавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|		Продавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|		Продавцы.Продавец КАК ФизЛицо,
	|		СУММА(1) КАК КоличествоВыходов
	|	ИЗ
	|		Документ.ЛистУчета.Продавцы КАК Продавцы
	|	ГДЕ
	|		Продавцы.Ссылка.Проведен
	|		И Продавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Продавцы.ЭкстренныйВызов = ИСТИНА
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(Продавцы.Ссылка.Дата, ДЕНЬ),
	|		Продавцы.Ссылка.ТорговаяТочка,
	|		Продавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|		Продавцы.Продавец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ),
	|		Кассиры.Ссылка.ТорговаяТочка,
	|		Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|		Кассиры.Кассир,
	|		СУММА(1)
	|	ИЗ
	|		Документ.ЛистУчета.Кассиры КАК Кассиры
	|	ГДЕ
	|		Кассиры.Ссылка.Проведен
	|		И Кассиры.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Кассиры.ЭкстренныйВызов = ИСТИНА
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Кассиры.Кассир,
	|		Кассиры.Ссылка.ТорговаяТочка,
	|		Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|		НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Грузчики.Ссылка.Дата, ДЕНЬ),
	|		Грузчики.Ссылка.ТорговаяТочка,
	|		Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|		Грузчики.ФизЛицо,
	|		СУММА(1)
	|	ИЗ
	|		Документ.ЛистУчета.Грузчики КАК Грузчики
	|	ГДЕ
	|		Грузчики.Ссылка.Проведен
	|		И Грузчики.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Грузчики.ЭкстренныйВызов = ИСТИНА
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Грузчики.ФизЛицо,
	|		Грузчики.Ссылка.ТорговаяТочка,
	|		Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|		НАЧАЛОПЕРИОДА(Грузчики.Ссылка.Дата, ДЕНЬ)) КАК ВЗ_Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Период,
	|	ВЗ_Запрос.ТорговаяТочка,
	|	ВЗ_Запрос.ТипРозничнойТочки,
	|	ВЗ_Запрос.ФизЛицо");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));	
		
		Премия = ПараметрыРассчета.СтавкаЗаЭкстренныйВызов*Выборка.КоличествоВыходов;
		
		Если Премия = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ПремияСНДФЛ = Премия/0.87;
		
		ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ЭкстренныйВызов;
	
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.Период;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= ТипРабот;
		
		СтруктураДанных.Бонус 			= Окр(Премия	 , 2, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(ПремияСНДФЛ, 2, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		
	КонецЦикла;
	
	
КонецПроцедуры	


Функция ОпределитьВидДняПоПроизводственномуКалендарю(ДатаКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = &ДатаКалендаря");
	
	Запрос.УстановитьПараметр("ДатаКалендаря", ДатаКалендаря);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.ВидДня;	
	КонецЕсли;
	
	Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	
КонецФункции

Функция ПолучитьКлассТТИзТаблицы(ТорговаяТочка, ДатаНачисления, Выходной = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КоличествоПродавцовНаТочкахСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.КоличествоПродавцовНаТочках.СрезПоследних(&Период, ТорговаяТочка = &ТорговаяТочка) КАК КоличествоПродавцовНаТочкахСрезПоследних");
	
	Запрос.УстановитьПараметр("Период", ДатаНачисления);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		
		Категория = Число(Формат(Выборка.Представление, "ЧДЦ=2"));
		
		Возврат Категория;
		
	КонецЕсли;
	
	Возврат 0;
		
КонецФункции

Процедура ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных)
	
	Запись = РегистрыСведений.ЗарплатаПродавцов.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураДанных);
	
	Запись.Записать();
	
КонецПроцедуры

Функция ПолучитьСтруктуруПолей()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаНачисления");
	СтруктураДанных.Вставить("ФизЛицо");
	СтруктураДанных.Вставить("ТорговаяТочка");
	СтруктураДанных.Вставить("ТипРабот");
	СтруктураДанных.Вставить("Выручка");
	СтруктураДанных.Вставить("Зарплата");
	СтруктураДанных.Вставить("Бонус");
	СтруктураДанных.Вставить("ЗарплатаСНДФЛ");
	СтруктураДанных.Вставить("БонусСНДФЛ");
	СтруктураДанных.Вставить("КлассТТ");
	СтруктураДанных.Вставить("КлассТТРасчетный");
	СтруктураДанных.Вставить("КлассПродавца");
	СтруктураДанных.Вставить("КоличествоПродавцов");
	СтруктураДанных.Вставить("КоличествоПродавцовПЧ");
	СтруктураДанных.Вставить("ПроцентБонуса");
	
	СтруктураДанных.Вставить("ПланПромо");
	//СтруктураДанных.Вставить("ФактПромо");
	СтруктураДанных.Вставить("ОбщаяПремияПромо");
	СтруктураДанных.Вставить("КоличествоСменПромо");
	СтруктураДанных.Вставить("ОбщееКоличествоСменПромо");
	
	СтруктураДанных.Вставить("Комментарий");
	СтруктураДанных.Вставить("КоличествоЧасов");
	
	СтруктураДанных.Вставить("Тренинг"); //+++АК MIND 2017.11.21 
	
	//+++АК kats 2018.01.29 17298
	СтруктураДанных.Вставить("ПроцентОтВыручкиСНДФЛ");
	//---АК kats 2018.01.29 17298
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ЗаполнитьТаблицуОкончанияРазвитияТТ(ДатаНач, ДатаКон)
	
	ТаблицаОкончанияРазвитияТТ.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЛистУчета.ТорговаяТочка,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК Дата
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	ЛистУчета.Проведен
	|	И ЛистУчета.Обработан
	|	И ЛистУчета.Дата >= &НачалоПериода
	|	И ЛистУчета.ЦФО.id_ЦФО = 12
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчета.ТорговаяТочка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) МЕЖДУ &НачалоПериода И &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаКон));
	
	ТаблицаОкончанияРазвитияТТ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ОбновитьСправочник_БонусыПоРаскруткеТТ()
	
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеОБонусахНаРаскруткуТТ();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуБонусов()
	
	ТаблицаБонусов.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БонусыПоРаскруткеТТ.Ссылка КАК СрокПередачи,
	|	БонусыПоРаскруткеТТ.Бонус,
	|	БонусыПоРаскруткеТТ.БонусКассира,
	|	БонусыПоРаскруткеТТ.БонусПромоутера //+++АК mika 2018.05.19 ИП-00018349 (Бонус промоутера) 
	|ИЗ
	|	Справочник.БонусыПоРаскруткеТТ КАК БонусыПоРаскруткеТТ");
	
	ТаблицаБонусов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПромоТовар(ДатаНач, ДатаКон)
	
	ТаблицаПромоТовар.Очистить();
	ТаблицаПромоТовар_КупоныВВ.Очистить();
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
	ADOСоединение.Open();
	
	СтрЗапрос = 
	"SELECT *
	|FROM [Loyalty].[dbo].[Plan_prodaz_ned_Fact]
	|WHERE date_fi >= {d'" + Формат(ДатаНач, "ДФ=yyyy-MM-dd") + "'} and date_fi <= {d'" + Формат(ДатаКон, "ДФ=yyyy-MM-dd") + "'}
	|	and Премия > 0";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			
			Если Rs.Fields("pf4").Value = 4 Тогда
				
				СтрокаДоб = ТаблицаПромоТовар_КупоныВВ.Добавить();
				
				СтрокаДоб.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_tt", Число(СокрЛП(Rs.Fields("id_tt").Value)));
				СтрокаДоб.ДатаНачалаПромо 		= Дата(СтрЗаменить(Rs.Fields("date_st").Value, "-", ""));
				
				СтрокаДоб.ДатаОкончанияПромо= Дата(СтрЗаменить(Rs.Fields("date_st").Value, "-", ""));
				СтрокаДоб.ДатаНачисления 	= Дата(СтрЗаменить(Rs.Fields("date_fi").Value, "-", ""));
				
				СтрокаДоб.Премия = Rs.Fields("Премия").Value;
				СтрокаДоб.ПланПродаж = Rs.Fields("plan_pr").Value;
				СтрокаДоб.ФактПродаж = Rs.Fields("Basesum").Value;
				
			Иначе
				
				СтрокаДоб = ТаблицаПромоТовар.Добавить();
				
				СтрокаДоб.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_tt", Число(СокрЛП(Rs.Fields("id_tt").Value)));
				СтрокаДоб.ДатаНачалаПромо 		= Дата(СтрЗаменить(Rs.Fields("date_st").Value, "-", ""));
				
				СтрокаДоб.ДатаОкончанияПромо= Дата(СтрЗаменить(Rs.Fields("date_fi").Value, "-", ""));
				СтрокаДоб.ДатаНачисления 	= Дата(СтрЗаменить(Rs.Fields("date_fi").Value, "-", ""));
				
				СтрокаДоб.Премия = Rs.Fields("Премия").Value;
				СтрокаДоб.ПланПродаж = Rs.Fields("plan_pr").Value;
				СтрокаДоб.ФактПродаж = Rs.Fields("Basesum").Value;
				
			КонецЕсли;
			
			rs.MoveNext();
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПромоМесяц(ДатаНач, ДатаКон)
	
	ТаблицаПромоМесяц.Очистить();
	
	МассивПериодов = Новый Массив;
	
	пНачалоПериода = ДатаНач;
	
	Пока пНачалоПериода <= НачалоДня(ДатаКон) Цикл
		
		пКонецМесяца = НачалоДня(КонецМесяца(пНачалоПериода));
		Если пКонецМесяца > НачалоДня(ДатаКон)Тогда
			Прервать;
		КонецЕсли;
		
		МассивПериодов.Добавить(пКонецМесяца);
		
		пНачалоПериода = КонецДня(пКонецМесяца) + 1;
		
	КонецЦикла;
	
	Если МассивПериодов.Количество() > 0 Тогда
		
		СтрГода 	= "";
		СтрМесяца 	= "";
		Для Каждого Стр Из МассивПериодов Цикл
			СтрГода 	= СтрГода + ?(ЗначениеЗаполнено(СтрГода), ",", "") + Строка(Год(Стр));
			СтрМесяца 	= СтрМесяца + ?(ЗначениеЗаполнено(СтрМесяца), ",", "") + Строка(Месяц(Стр));
		КонецЦикла;
		
		СтрГода = СтрЗаменить(СтрГода, " ", "");  		СтрГода = СтрЗаменить(СтрГода, Символы.НПП, "");
		СтрМесяца = СтрЗаменить(СтрМесяца, " ", "");    СтрМесяца = СтрЗаменить(СтрМесяца, Символы.НПП, "");
		
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("loyalty");
		ADOСоединение.Open();
		
		СтрЗапрос = 
		"SELECT *
		|FROM [Loyalty].[dbo].[plan_pr_tt_month]
		|WHERE month IN ("+ СтрМесяца +") and year IN ("+ СтрГода +")";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				
				СтрокаДоб = ТаблицаПромоМесяц.Добавить();
				
				СтрокаДоб.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_tt", Число(СокрЛП(Rs.Fields("id_tt").Value)));
				СтрокаДоб.Дата = КонецМесяца(Дата(Rs.Fields("year").Value, Rs.Fields("month").Value, 1));
				СтрокаДоб.ПланПродаж = Rs.Fields("plan_pr").Value;
				
				rs.MoveNext();
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		
		ADOСоединение.Close();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРегистрСведенийЗарплатаПродавцов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаПродавцов.ДатаНачисления
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|ГДЕ
	|	ЗарплатаПродавцов.ДатаНачисления МЕЖДУ &НачалоПериода И &КонецПериода");
	
	// Очищаем за весь период
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		Набор = РегистрыСведений.ЗарплатаПродавцов.СоздатьНаборЗаписей();
		Набор.Отбор.ДатаНачисления.Установить(Выборка.ДатаНачисления);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьПлановыйКоэффициент(ДатаНачисления, ТипРозничнойТочки, КлассТТ, ПочасоваяРабота)
	
	ТекКоэффициенты = РегистрыСведений.ПроцентныеСтавкиДляКлассовТорговыхТочек.ПолучитьПоследнее(ДатаНачисления, Новый Структура("ТипРозничнойТочки, Класс", ТипРозничнойТочки, КлассТТ));
	
	Коэффициент = ?(ПочасоваяРабота, ТекКоэффициенты.КоэффициентПочасовик, ТекКоэффициенты.Коэффициент);
	
	Возврат Коэффициент;
	
КонецФункции

Функция ПолучитьДоплатуДляТорговойТочкиСТипом10(СуммаВыручки)
	
	Если СуммаВыручки >= 25000 И СуммаВыручки <= 25999.99 Тогда
		Возврат 400;
	ИначеЕсли СуммаВыручки >= 26000 И СуммаВыручки <= 26999.99 Тогда
		Возврат 360;
	ИначеЕсли СуммаВыручки >= 27000 И СуммаВыручки <= 27999.99 Тогда
		Возврат 320;
	ИначеЕсли СуммаВыручки >= 28000 И СуммаВыручки <= 28999.99 Тогда
		Возврат 280;
	ИначеЕсли СуммаВыручки >= 29000 И СуммаВыручки <= 29999.99 Тогда
		Возврат 240;
	ИначеЕсли СуммаВыручки >= 30000 И СуммаВыручки <= 30999.99 Тогда
		Возврат 200;	
	ИначеЕсли СуммаВыручки >= 31000 И СуммаВыручки <= 31999.99 Тогда
		Возврат 160;
	ИначеЕсли СуммаВыручки >= 32000 И СуммаВыручки <= 32999.99 Тогда
		Возврат 120;
	ИначеЕсли СуммаВыручки >= 33000 И СуммаВыручки <= 33999.99 Тогда
		Возврат 80;
	ИначеЕсли СуммаВыручки >= 34000 И СуммаВыручки <= 34999.99 Тогда
		Возврат 40;	
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьСуммуБонусаИзСоответствияКлассовБонусовПромоМесяц(КлассБонуса)

	СоответствиеБонусов = Новый Соответствие;
	СоответствиеБонусов.Вставить(1, 5000);
	СоответствиеБонусов.Вставить(2, 10000);
    СоответствиеБонусов.Вставить(3, 15000);
	СоответствиеБонусов.Вставить(4, 20000);

	СуммаБонуса = СоответствиеБонусов.Получить(КлассБонуса);
	Если СуммаБонуса = Неопределено Тогда
		СуммаБонуса = 0;
	КонецЕсли;
	
	Возврат СуммаБонуса;
	
КонецФункции // ПолучитьСуммуБонусаИзСоответствияКлассовБонусовПромоМесяц()

Функция ПолучитьСуммуНадбавкиЗаПеревыполнениеИзСоответствияКлассовБонусовПромоМесяц(КлассБонуса, ПроцентПеревыполнения)
	
	СоответствиеБонусов = Новый Соответствие;
	СоответствиеБонусов.Вставить(1, 500);
	СоответствиеБонусов.Вставить(2, 1000);
    СоответствиеБонусов.Вставить(3, 1500);
	СоответствиеБонусов.Вставить(4, 2000);

	СуммаБонуса = СоответствиеБонусов.Получить(КлассБонуса);
	Если СуммаБонуса = Неопределено Тогда
		СуммаБонуса = 0;
	КонецЕсли;
	
	СуммаБонуса = СуммаБонуса*ПроцентПеревыполнения;
	
	Возврат СуммаБонуса;
	
КонецФункции // ПолучитьСуммуНадбавкиЗаПеревыполнениеИзСоответствияКлассовБонусовПромоМесяц()

Функция ПолучитьПоследнийРабочийДеньТТВМесяце(пНач, пКон, ТТ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) КАК ПоследнийРабочийДеньТТВМесяце
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря)
	|			И (РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))
	|ГДЕ
	|	ЛистУчета.Проведен
	|	И ЛистУчета.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ)) ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("ДатаНачала"	 , пНач);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(пКон));
	Запрос.УстановитьПараметр("ТорговаяТочка", ТТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.ПоследнийРабочийДеньТТВМесяце;
	КонецЕсли;
	
	Возврат пКон;

КонецФункции // ПолучитьПоследнийРабочийДеньМесяца()




//+++ gusd (ИП-00016780)

Процедура РасчитатьЗпСтараяСхема(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстОсновногоЗапроса();
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		
		//1. расчет типов "Стажер", "ПолСтавки", "ПолныйДень"
		РасчитатьЗП_Стажер_ПолСтавки_ПолныйДень(Выборка);
		
	КонецЦикла;
	
	//2. расчет полей для типа "Открытие_ТТ"
	РасчитатьЗП_ОткрытиеТТ(ДатаНач, ДатаКон);
	
	//3. расчет с типом 'ПромоТовар'
	ЗаполнитьТаблицуПромоТовар(ДатаНач, ДатаКон);
	РасчитатьЗП_ПромоТовар();
	РасчитатьЗП_ПромоТовар_КупоныВВ();
	
	//4. расчет с типом 'ПромоМесяц'
	РасчитатьЗП_ПромоМесяц(ДатаНач, ДатаКон);
	
	//5. расчет с типом 'Наставничество'
	РасчитатьЗП_ПремияЗаНаставничество(ДатаНач, ДатаКон);
	
	//6. расчет с типом 'ПриведиДруга'
	РасчитатьЗП_ПриведиДруга(ДатаНач, ДатаКон);
	
	//7. расчет с типом 'Анкета'
	РасчитатьЗП_Анкета(ДатаНач, ДатаКон);
	
	//8. расчет с типом 'Зазывала'
	РасчитатьЗП_Зазывала(ДатаНач, ДатаКон);
	
	//9. расчет с типом 'ПремияЗаВыкладку'
	РасчитатьЗП_ПремияЗаВыкладку_ФотоОтчет(ДатаНач, ДатаКон);
	
	//10. расчет с типом 'ПремияЗаТайника'
	РасчитатьЗП_ПремияЗаТайника(ДатаНач, ДатаКон);
	
	//11. расчет с типом 'БонусОтСтажа'
	РасчитатьЗП_БонусОтСтажа(ДатаНач, ДатаКон);
	
	//12. расчет с типом 'Внештатник'
	РасчитатьЗП_Внештатник(ДатаНач, ДатаКон);
	
	//13. расчет с типом 'ОпросПоСкайпу'
	РасчитатьЗП_ОпросПоСкайпу(ДатаНач, ДатаКон);
	
	//14. расчет с типом 'ПремияЗаТайника' по Избенке
	РасчитатьЗП_ПремияЗаТайника_Избенка(ДатаНач, ДатаКон);
	
	//15. расчет с типом 'Кассир'
	РасчитатьЗП_Кассира(ДатаНач, ДатаКон);
	
	//16. расчет с типом 'Тренинг'
	РасчитатьЗП_Тренинг(ДатаНач, ДатаКон);
	
	//17. расчет с типом 'Грузчик'
	РасчитатьЗП_Грузчика(ДатаНач, ДатаКон);
	
	//18. расчет за экстренный вызов
	РасчитатьЗП_ЭкстренныйВызов(ДатаНач, ДатаКон);
	
	//18. расчет бонусов помощникам управляющих (сделал Познахарёв)
	//РассчитатьБонусыПомощников(); не сюда
	
	//19. расчет с типом 'Кассир' //+++АК mika 2018.04.09 ИП-00018000
	РасчитатьЗП_Пекаря(ДатаНач, ДатаКон);

	
	//АК БЕЛН 22.06.2017+
	 РасчитатьСуммуЗаПереработку(ДатаНач, ДатаКон);
	//АК БЕЛН 22.06.2017-
	
КонецПроцедуры

Процедура РасчитатьЗпНоваяСхемаСхема(ДатаНач, ДатаКон)
	
	// 1. Расчет основных начислений
	
	//+++АК mika 2018.05.19 ИП-00018349
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(ДатаКон));

	Запрос.Текст = ПолучитьТекстЗапросаРассчетаЗпПродавцам();
	
	///////////////////////////////НЕ удалять. Отключение Листов по таблицам/отборам (для отладки начисления)
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "Продавцы.Ссылка.Проведен", "ЛОЖЬ И Продавцы.Ссылка.Проведен"); 
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "Кассиры.Ссылка.Проведен" , "Кассиры.Кассир.Код = ""0000016259"" И Кассиры.Ссылка.Проведен"); 
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "Грузчики.Ссылка.Проведен", "Грузчики.ФизЛицо.Код = ""0000015833"" И Грузчики.Ссылка.Проведен"); 
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пекари.Ссылка.Проведен"  , "ЛОЖЬ И Пекари.Ссылка.Проведен"); 
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "Уборщицы.Ссылка.Проведен", "ЛОЖЬ И Уборщицы.Ссылка.Проведен"); 
	///////////////////////////////НЕ удалять. Отключение Листов по таблицам/отборам (для отладки начисления)
	
	//---АК mika
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПраздничныеДни = ПолучитьПраздничныеДниВИнтервале(ДатаНач, ДатаКон);
	
	// {{ Молчанов С.А. 17.11.18 ИП-00020449
	ДоплатаПереработка_9_10	= ПредопределенноеЗначение("Перечисление.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_9_10");
	ДоплатаПереработка_11	= ПредопределенноеЗначение("Перечисление.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_11");	
	// Молчанов С.А. 17.11.18 ИП-00020449 }}
	
	Пока Выборка.Следующий()Цикл
		
		Если Выборка.ДатаПрихода = Дата(1,1,1) ИЛИ Выборка.ДатаУхода = Дата(1,1,1)Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ДатаУхода < Выборка.ДатаПрихода Тогда // Ошибка
			Продолжить;
		КонецЕсли;
		
		// Получаем параметры для рсчета
		
		ДатаНачисления = Выборка.ДатаНачисления;
		ЭкстренныйВызов = Выборка.ЭкстренныйВызов;
		ГруппаРазвития = Выборка.ГруппаРазвития;
		
		//+++АК gusd (ИП-00018118)
		ФиксированнаяСтавкаЗП = Выборка.ФиксированнаяСтавкаЗП;
		//---АК gusd (ИП-00018118)
		
		ПараметрыДляРасчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(ДатаНачисления, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));
		
		СтавкаЗаЧасПродавец_01102017 					= ?(ПараметрыДляРасчета.СтавкаЗаЧасПродавец_01102017 = 0, ?(Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка, 125, 100), ПараметрыДляРасчета.СтавкаЗаЧасПродавец_01102017);
		СтавкаЗаЧасКассир_01102017 						= ?(ПараметрыДляРасчета.СтавкаЗаЧасКассир_01102017 = 0, 100, ПараметрыДляРасчета.СтавкаЗаЧасКассир_01102017);
		СтавкаЗаЧасГрузчик_01102017						= ?(ПараметрыДляРасчета.СтавкаЗаЧасГрузчик_01102017 = 0, 75, ПараметрыДляРасчета.СтавкаЗаЧасГрузчик_01102017);
		СтавкаЗаЧасСтаршийПродавец_01102017				= ?(ПараметрыДляРасчета.СтавкаЗаЧасСтаршийПродавец_01102017 = 0, 125, ПараметрыДляРасчета.СтавкаЗаЧасСтаршийПродавец_01102017);
		СтавкаЗаЧасСтажерПрактикант_01102017			= ?(ПараметрыДляРасчета.СтавкаЗаЧасСтажерПрактикант_01102017 = 0, 100, ПараметрыДляРасчета.СтавкаЗаЧасСтажерПрактикант_01102017);
		КоэффициентЗаПереработку_9_10_01102017 			= ?(ПараметрыДляРасчета.КоэффициентЗаПереработку_9_10_01102017 = 0, 1.5, ПараметрыДляРасчета.КоэффициентЗаПереработку_9_10_01102017);
		КоэффициентЗаПереработку_11_01102017 			= ?(ПараметрыДляРасчета.КоэффициентЗаПереработку_11_01102017 = 0, 2, ПараметрыДляРасчета.КоэффициентЗаПереработку_11_01102017);
		КоэффициентПраздникЭкстренныйВызов_11_01102017 	= ?(ПараметрыДляРасчета.КоэффициентПраздникЭкстренныйВызов_11_01102017 = 0, 2, ПараметрыДляРасчета.КоэффициентПраздникЭкстренныйВызов_11_01102017);
		КоэффициентНочнаяСмена_01102017					= ?(ПараметрыДляРасчета.КоэффициентНочнаяСмена_01102017 = 0, 1.2, ПараметрыДляРасчета.КоэффициентНочнаяСмена_01102017);
		ПроцентОтВыручкиПродавец_01102017				= ПараметрыДляРасчета.ПроцентОтВыручкиПродавец_01102017;
		ПроцентОтВыручкиСтаршийПродавец_01102017		= ПараметрыДляРасчета.ПроцентОтВыручкиСтаршийПродавец_01102017;
		ПроцентОтВыручкиКассир_01102017					= ПараметрыДляРасчета.ПроцентОтВыручкиКассир_01102017;
		ПроцентОтВыручкиГрузчик_01102017				= ПараметрыДляРасчета.ПроцентОтВыручкиГрузчик_01102017;
		ДоплатаЗаРаботуВРазвитииПродавец_01102017		= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитииПродавец_01102017;
		ДоплатаЗаРаботуВРазвитииСтаршийПродавец_01102017= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитииСтаршийПродавец_01102017;
		ДоплатаЗаРаботуВРазвитииКассир_01102017			= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитииКассир_01102017;
		ДоплатаЗаРаботуВРазвитииПродавец38_01102017		= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитииПродавец38_01102017;
		ДоплатаЗаРаботуВРазвитииКассир38_01102017		= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитииКассир38_01102017;
		СтавкаЗаЧасУборщица_01102017					= ПараметрыДляРасчета.СтавкаЗаЧасУборщица;
		СтавкаЗаЧасПекарь_01102017 						= ?(ПараметрыДляРасчета.СтавкаЗаЧасПекарь_01102017 = 0, 100, ПараметрыДляРасчета.СтавкаЗаЧасПекарь_01102017); //+++АК mika 2018.04.09 ИП-00018000
		ПроцентОтВыручкиПекарь_01102017					= ПараметрыДляРасчета.ПроцентОтВыручкиПекарь_01102017; //+++АК mika 2018.04.09 ИП-00018000
		МинимальнаяСуммаНачислений_День                 = ПараметрыДляРасчета.МинимальнаяСуммаНачислений_День; //+++АК mika 2018.10.16 ИП-00020111
		
		//+++ gusd (ИП-00017942)
		ДоплатаЗаЧасСтаршийПродавец						= ПараметрыДляРасчета.ДоплатаЗаЧасСтаршийПродавец;
		ДоплатаЗаРаботуВРазвитии_01022018				= ПараметрыДляРасчета.ДоплатаЗаРаботуВРазвитии_01022018;
		ДоплатаЗаЧасРаботаНаТТ							= ПараметрыДляРасчета.ДоплатаЗаЧасРаботаНаТТ;
		//--- gusd (ИП-00017942)
		
		ЭтоКассирПочасовик = Выборка.КассирПочасовик; //+++АК mika 2018.12.09 ИП-00020658
		
		// Готовим таблицу для расчета, разбиваем работы за каждый час, т.к.
		// могут меняться коэффициенты
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Начало"		  , Новый ОписаниеТипов("Дата"));
		Таблица.Колонки.Добавить("Окончание"	  , Новый ОписаниеТипов("Дата"));
		Таблица.Колонки.Добавить("Ночь"			  , Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("Праздник"		  , Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("КоличествоМинут", Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Сумма"		  , Новый ОписаниеТипов("Число"));
		
		ВсегоОтработаноМинут = 0;
		РазложитьСменуНаОтрезки(Таблица, Выборка.ДатаПрихода, Выборка.ДатаУхода, ВсегоОтработаноМинут, ТаблицаПраздничныеДни);
		
		Таблица.Колонки.Добавить("КоличествоЧасов", Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("ТипРабот", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРаботДляРасчетаЗП"));
		
		// Расчитываем
		
		КоличествоЧасовПодряд = 0;
		
		ТаблицаРасчет = Таблица.СкопироватьКолонки();
		
		//+++ gusd (ИП-00017942)
		
		СтаршийПродавец = Выборка.СтаршийПродавец;
		
		ДоплатитьЗаРаботуНаТТ = Ложь;
		Если Выборка.ТипФизЛица = "Продавец" Тогда
			
			Если ДатаНачисления >= '2018-02-01' Тогда
				
				// В Избенке все продавцы считаются старшими, но доп. начисление отдельное
				ДоплатитьЗаРаботуНаТТ = (Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//--- gusd (ИП-00017942)
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			
			СтрокаТаблицы.КоличествоЧасов = Окр(СтрокаТаблицы.КоличествоМинут / 60, 2);
			КоличествоЧасовПодряд = КоличествоЧасовПодряд + СтрокаТаблицы.КоличествоЧасов;
			
			
			
			// Базовый расчет
			
			СуммаБезКоэффициентов = 0;
			
			Если Выборка.ТипФизЛица = "Продавец" Тогда
				
				// Старшим продавцам в развитии ставка как у продавца +600 доплата за старшего
				
				//+++ gusd (ИП-00017942)
				
				// С 1.02.2018 разбиваем ставку за старшего продавца на две:
				//	Выход за час = 100 руб.;
				//	Доплата за старщего (за 1ч.) = 25 руб.
				
				Если СтаршийПродавец И ГруппаРазвития И ДатаНачисления < '2018-02-01' Тогда
					// Оставляем как раньше
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасПродавец_01102017;
				//--- gusd (ИП-00017942)
				
				ИначеЕсли СтаршийПродавец Тогда	
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасСтаршийПродавец_01102017;
				ИначеЕсли Выборка.Практикант И Выборка.Стажер Тогда
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасСтажерПрактикант_01102017;
				Иначе
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасПродавец_01102017;
				КонецЕсли;
				
			ИначеЕсли Выборка.ТипФизЛица = "Кассир" Тогда
				
				Если Выборка.Практикант И Выборка.Стажер Тогда
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасСтажерПрактикант_01102017;
				ИначеЕсли ЭтоКассирПочасовик Тогда //+++АК mika 2018.12.09 ИП-00020658
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * ПараметрыДляРасчета.СтавкаЗаЧасКассирПочасовик;
				Иначе
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасКассир_01102017;
				КонецЕсли;
				
			ИначеЕсли Выборка.ТипФизЛица = "Грузчик" Тогда	
				
				Если Выборка.Практикант И Выборка.Стажер Тогда
					Если Выборка.ВахтовыйМетод Тогда 
						СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * ПараметрыДляРасчета.СтавкаЗаЧасСтажерПрактикантВахтовый; //+++АК mika 2018.12.05 ИП-00020643;
					Иначе
						СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасСтажерПрактикант_01102017;
					КонецЕсли;
				Иначе
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасГрузчик_01102017;
				КонецЕсли;
				
			ИначеЕсли Выборка.ТипФизЛица = "Уборщица" Тогда		
				
				СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасУборщица_01102017;
				
				//+++АК mika 2018.04.09 ИП-00018000
			ИначеЕсли Выборка.ТипФизЛица = "Пекарь" Тогда
				
				Если Выборка.Практикант И Выборка.Стажер Тогда
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасСтажерПрактикант_01102017;
				Иначе
					СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * СтавкаЗаЧасПекарь_01102017;
				КонецЕсли;
				//---АК mika 2018.04.09 ИП-00018000
			КонецЕсли;	
			
			Если СуммаБезКоэффициентов <> 0 Тогда
				
				НоваяСтрока = ТаблицаРасчет.Добавить();
				НоваяСтрока.Сумма = СуммаБезКоэффициентов;
				НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
				
				Если Выборка.Практикант И Выборка.ГруппаРазвития Тогда
					НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ПрактикантУР;
				ИначеЕсли Выборка.Практикант Тогда
					НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Практикант;
				ИначеЕсли Выборка.Стажер Тогда
					НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.Стажер;
				Иначе	
					НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ВыходЗаЧас;
				КонецЕсли;
				
			КонецЕсли;
			
			
			//+++ gusd (ИП-00017942)
			
			// Доплата за старшего продавца отделным начислением
			
			Если Выборка.ТипФизЛица = "Продавец" И СтаршийПродавец И ДатаНачисления >= '2018-02-01' Тогда
				
				СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * ДоплатаЗаЧасСтаршийПродавец;
				
				Если СуммаБезКоэффициентов <> 0 Тогда
					
					НоваяСтрока = ТаблицаРасчет.Добавить();
					НоваяСтрока.Сумма 			= СуммаБезКоэффициентов;
					НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
					НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.СтаршийПродавецКонсультант;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Продавцам Избенки доплачиваем отдельным начислением
			
			Если Выборка.ТипФизЛица = "Продавец" И ДоплатитьЗаРаботуНаТТ И ДатаНачисления >= '2018-02-01' Тогда
				
				СуммаБезКоэффициентов = СтрокаТаблицы.КоличествоЧасов * ДоплатаЗаЧасРаботаНаТТ;
				
				Если СуммаБезКоэффициентов <> 0 Тогда
					
					НоваяСтрока = ТаблицаРасчет.Добавить();
					НоваяСтрока.Сумма 			= СуммаБезКоэффициентов;
					НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
					НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуНаТТ;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//--- gusd (ИП-00017942)
			
			
			// Сказали учитывать все повышающие коэффициенты и переработки
			//// По развитию посчитаем отдельно
			//
			//Если ГруппаРазвития Тогда
			//	Продолжить;
			//КонецЕсли;
			
			
			// Доплаты
			
			Если (Выборка.Практикант И Выборка.Стажер)
				ИЛИ (Выборка.ТипФизЛица = "Уборщица") Тогда
				
				// Доплат нет
				Продолжить;
				
			Иначе 
				
				Ставка = 0;
				Если Выборка.ТипФизЛица = "Продавец" Тогда
					
					// Старшим продавцам в развитии ставка как у продавца +600 доплата за старшего
					
					//+++ gusd (ИП-00017942)
					Если СтаршийПродавец И ГруппаРазвития И ДатаНачисления < '2018-02-01' Тогда
						Ставка = СтавкаЗаЧасПродавец_01102017;
					//--- gusd (ИП-00017942)
					
					ИначеЕсли СтаршийПродавец Тогда
						Ставка = СтавкаЗаЧасСтаршийПродавец_01102017 + ДоплатаЗаЧасСтаршийПродавец; // 100 + 25, до 2018-02-01 в параметрах оставим ставку 125 доплату 0
					ИначеЕсли Выборка.Практикант И Выборка.Стажер Тогда
						Ставка = СтавкаЗаЧасСтажерПрактикант_01102017;
					Иначе
						Ставка = СтавкаЗаЧасПродавец_01102017 + ?(ДоплатитьЗаРаботуНаТТ, ДоплатаЗаЧасРаботаНаТТ, 0); // В Избенках нужно учесть доплату
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипФизЛица = "Кассир" Тогда
					
					Если Выборка.Практикант И Выборка.Стажер Тогда
						Ставка = СтавкаЗаЧасСтажерПрактикант_01102017;
					ИначеЕсли ЭтоКассирПочасовик Тогда //+++АК mika 2018.12.09 ИП-00020658
						Ставка = ПараметрыДляРасчета.СтавкаЗаЧасКассирПочасовик;
					Иначе
						Ставка = СтавкаЗаЧасКассир_01102017;
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипФизЛица = "Грузчик" Тогда	
					Если Выборка.Практикант И Выборка.Стажер Тогда
						Если Выборка.ВахтовыйМетод Тогда 
							Ставка = ПараметрыДляРасчета.СтавкаЗаЧасСтажерПрактикантВахтовый; //+++АК mika 2018.12.05 ИП-00020643
						Иначе
							Ставка = СтавкаЗаЧасСтажерПрактикант_01102017;
						КонецЕсли;
					Иначе
						Ставка = СтавкаЗаЧасГрузчик_01102017;
					КонецЕсли;
				//+++АК mika 2018.04.09 ИП-00018000
				ИначеЕсли Выборка.ТипФизЛица = "Пекарь" Тогда
					Если Выборка.Практикант И Выборка.Стажер Тогда
						Ставка = СтавкаЗаЧасСтажерПрактикант_01102017;
					Иначе
						Ставка = СтавкаЗаЧасПекарь_01102017;
					КонецЕсли;
				//+++АК mika 2018.04.09 ИП-00018000
				КонецЕсли;
				
				// Доплата за ночные часы учитывается всегда
				
				Если СтрокаТаблицы.Ночь Тогда
					
					ДопКоэффициентНочь = Макс(КоэффициентНочнаяСмена_01102017 - 1, 0);
					
					НоваяСтрока = ТаблицаРасчет.Добавить();
					НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
					НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаНочнуюСмену;
					НоваяСтрока.Сумма 			= Ставка * ДопКоэффициентНочь * СтрокаТаблицы.КоличествоЧасов;
					
				КонецЕсли;
				
				Если (СтрокаТаблицы.Праздник ИЛИ ЭкстренныйВызов) И НЕ ЭтоКассирПочасовик Тогда //+++АК mika 2018.12.09 ИП-00020658
					
					ДопКоэффициентПраздникЭкстренныйВызов = Макс(КоэффициентПраздникЭкстренныйВызов_11_01102017 - 1, 0);
					
					НоваяСтрока = ТаблицаРасчет.Добавить();
					НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
					НоваяСтрока.ТипРабот 		= ?(СтрокаТаблицы.Праздник, Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаПраздник, Перечисления.ТипыРаботДляРасчетаЗП.ЭкстренныйВызов);
					НоваяСтрока.Сумма 			= Ставка * ДопКоэффициентПраздникЭкстренныйВызов * СтрокаТаблицы.КоличествоЧасов;
					
				Иначе
					
					// Переработки
					
					// С 9 по 10 часы
					
					Если КоличествоЧасовПодряд >= 9 И КоличествоЧасовПодряд <= 10 Тогда
						
						ДопКоэффициент_9_10 = Макс(КоэффициентЗаПереработку_9_10_01102017 - 1, 0);
						
						НоваяСтрока = ТаблицаРасчет.Добавить();
						НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
						// {{ Молчанов С.А. 17.11.18 ИП-00020449
						//НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_9_10;
						НоваяСтрока.ТипРабот 		= ДоплатаПереработка_9_10;
						// Молчанов С.А. 17.11.18 ИП-00020449 }}
						НоваяСтрока.Сумма 			= Ставка * ДопКоэффициент_9_10 * СтрокаТаблицы.КоличествоЧасов;
						
					КонецЕсли;
					
					// С 11 часа
					
					Если КоличествоЧасовПодряд > 10 Тогда
						
						ДопКоэффициент_11 = Макс(КоэффициентЗаПереработку_11_01102017 - 1, 0);
						
						НоваяСтрока = ТаблицаРасчет.Добавить();
						НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
						// {{ Молчанов С.А. 17.11.18 ИП-00020449
						//НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_11;
						НоваяСтрока.ТипРабот 		= ДоплатаПереработка_11;
						// Молчанов С.А. 17.11.18 ИП-00020449 }}
						НоваяСтрока.Сумма 			= Ставка * ДопКоэффициент_11 * СтрокаТаблицы.КоличествоЧасов;
						
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРасчет.Свернуть("ТипРабот", "КоличествоЧасов,Сумма");
		
		СуммаВыручка = 0;
		Если Не Выборка.Практикант И Не Выборка.Стажер И Не ЭтоКассирПочасовик Тогда //+++АК mika 2018.12.09 ИП-00020658
			
			//+++ gusd (ИП-00017942)
			
			// Добавим новый тип
			
			Если ДатаНачисления >= '2018-02-01' Тогда
				
				НоваяСтрока = ТаблицаРасчет.Добавить();
				НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.БонусОтВыручки; // Новый тип
				
			КонецЕсли;
			//--- gusd (ИП-00017942)
			
			// Если не было часов, то может быть начислен % от выручки
			
			Если Таблица.Количество() = 0 Тогда
				
				НоваяСтрока = ТаблицаРасчет.Добавить();
				НоваяСтрока.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ВыходЗаЧас;
				
			КонецЕсли;
			
			
			Если Выборка.ТипФизЛица = "Продавец" Тогда
				
				// Развитие
				
				Если ГруппаРазвития Тогда
					
					// Доплата за работу в развитии
					
					КоличествоДнейВРазвитии = (НачалоДня(ДатаНачисления) - НачалоДня(Выборка.ВРазвитииСДаты)) / 86400 + 1;
					
					СуммаДоплатаРазвитие = 0;
					
					Если Не Выборка.Практикант И Не Выборка.Стажер Тогда // Продавец или старший
						
						Если КоличествоДнейВРазвитии > 38 Тогда
							СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииПродавец38_01102017;
						Иначе
							СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииПродавец_01102017;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СуммаДоплатаРазвитие > 0 Тогда
						
						НоваяСтрока = ТаблицаРасчет.Добавить();
						НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРазвитии;
						НоваяСтрока.Сумма 			= СуммаДоплатаРазвитие;
						
					КонецЕсли;
						
					//+++ gusd (ИП-00017942)
					Если ДатаНачисления < '2018-02-01' Тогда
					//--- gusd (ИП-00017942)
						
						// Доплата за старшего
						
						СуммаДоплатаЗаСтаршего = 0;
						Если СтаршийПродавец Тогда
							СуммаДоплатаЗаСтаршего = ДоплатаЗаРаботуВРазвитииСтаршийПродавец_01102017;	
						КонецЕсли;
						
						Если СуммаДоплатаЗаСтаршего > 0 Тогда
							
							НоваяСтрока = ТаблицаРасчет.Добавить();
							НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.СтаршийПродавецКонсультант;
							НоваяСтрока.Сумма 			= СуммаДоплатаЗаСтаршего;
							
						КонецЕсли;
						
					Иначе
						
						//+++ gusd (ИП-00017942)
						
						// С 2018-02-01 новая дорлата по развитию - компенсация потери при расчете старшего продавца в развитии
						
						СуммаДоплатаРазвитие2 = 0;
						Если СтаршийПродавец Тогда
							СуммаДоплатаРазвитие2 = ДоплатаЗаРаботуВРазвитии_01022018;	
						КонецЕсли;
						
						Если СуммаДоплатаРазвитие2 > 0 Тогда
							
							НоваяСтрока = ТаблицаРасчет.Добавить();
							НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРазвитии_2;
							НоваяСтрока.Сумма 			= СуммаДоплатаРазвитие2;
							
						КонецЕсли;
						
						//--- gusd (ИП-00017942)
					
					КонецЕсли;
					
				Иначе // % по выручке	
					
					Если СтаршийПродавец Тогда
						СуммаВыручка = Выборка.Выручка * ПроцентОтВыручкиСтаршийПродавец_01102017 / 100;
					Иначе
						СуммаВыручка = Выборка.Выручка * ПроцентОтВыручкиПродавец_01102017 / 100;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ТипФизЛица = "Кассир" Тогда
				
				// Развитие
				
				Если ГруппаРазвития Тогда
					
					КоличествоДнейВРазвитии = (НачалоДня(ДатаНачисления) - НачалоДня(Выборка.ВРазвитииСДаты)) / 86400 + 1;
					
					// Доплата за работу в развитии
					
					Если КоличествоДнейВРазвитии > 38 Тогда
						СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииКассир38_01102017;
					Иначе
						СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииКассир_01102017;
					КонецЕсли;
					
					Если СуммаДоплатаРазвитие > 0 Тогда
						
						НоваяСтрока = ТаблицаРасчет.Добавить();
						НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРазвитии;
						НоваяСтрока.Сумма 			= СуммаДоплатаРазвитие;
						
					КонецЕсли;
					
				Иначе // % по выручке
				
					СуммаВыручка = Выборка.Выручка * ПроцентОтВыручкиКассир_01102017 / 100;
					
				КонецЕсли;	
				
			ИначеЕсли Выборка.ТипФизЛица = "Промоутер" Тогда
				
				Если ГруппаРазвития Тогда
					
					КоличествоДнейВРазвитии = (НачалоДня(ДатаНачисления) - НачалоДня(Выборка.ВРазвитииСДаты)) / 86400 + 1;
					Если КоличествоДнейВРазвитии > 38 Тогда
						СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииКассир38_01102017;
					Иначе
						СуммаДоплатаРазвитие = ДоплатаЗаРаботуВРазвитииКассир_01102017;
					КонецЕсли;
					
					Если СуммаДоплатаРазвитие > 0 Тогда
						
						НоваяСтрока = ТаблицаРасчет.Добавить();
						НоваяСтрока.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаЗаРаботуВРазвитии;
						НоваяСтрока.Сумма 			= СуммаДоплатаРазвитие;
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Выборка.ТипФизЛица = "Грузчик" Тогда
				СуммаВыручка = Выборка.Выручка * ПроцентОтВыручкиГрузчик_01102017 / 100;
			ИначеЕсли Выборка.ТипФизЛица = "Пекарь" Тогда //+++АК mika 2018.04.09 ИП-00018000
				СуммаВыручка = Выборка.Выручка * ПроцентОтВыручкиПекарь_01102017 / 100;  //+++АК mika 2018.04.09 ИП-00018000
			КонецЕсли;
			
		КонецЕсли;
		
		//+++АК mika 2018.10.16 ИП-00020111 Предназначена для контроля минимальной суммы выплат
		ТаблицаНачисленийДень = Новый ТаблицаЗначений();
		ТаблицаНачисленийДень.Колонки.Добавить("ДатаНачисления", Новый ОписаниеТипов("Дата"));
		ТаблицаНачисленийДень.Колонки.Добавить("ФизЛицо"	   , Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаНачисленийДень.Колонки.Добавить("ТорговаяТочка" , Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТаблицаНачисленийДень.Колонки.Добавить("ТипРабот"	   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРаботДляРасчетаЗП"));
	    ТаблицаНачисленийДень.Колонки.Добавить("Бонус"		   , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 2)));
	    ТаблицаНачисленийДень.Колонки.Добавить("КоличествоЧасов" , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 2)));
	    ТаблицаНачисленийДень.Колонки.Добавить("ТипФизЛица" ,      Новый ОписаниеТипов("Строка"	, Новый КвалификаторыСтроки(75, ДопустимаяДлина.Переменная)));;
		//---АК mika 

		Для Каждого СтрокаТаблицы Из ТаблицаРасчет Цикл
			
			Бонус = СтрокаТаблицы.Сумма;
			
			//+++АК kats 2018.01.23 17298
			ПоцентОтВыручкиСНДФЛ = 0;
			//---АК kats 2018.01.23 17298
			
			// Выручку и развитие добавим только к типу работ ВыходЗаЧас
			Если СтрокаТаблицы.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.ВыходЗаЧас И ДатаНачисления < '2018-02-01' Тогда  //--- gusd (ИП-00017942) добавил (И ДатаНачисления < '2018-02-01')
				//+++АК kats 2018.01.23 17298
				ПоцентОтВыручкиСНДФЛ = СуммаВыручка / 0.87;
				//---АК kats 2018.01.23 17298
				Бонус = Бонус + СуммаВыручка;
				
			//+++ gusd (ИП-00017942)	
			
			// С 2018-02-01 бонус от выручки идет отдельным начислением
			ИначеЕсли СтрокаТаблицы.ТипРабот = Перечисления.ТипыРаботДляРасчетаЗП.БонусОтВыручки И ДатаНачисления >= '2018-02-01' Тогда
				
				ПоцентОтВыручкиСНДФЛ = СуммаВыручка / 0.87;
				Бонус = СуммаВыручка;
				
			//--- gusd (ИП-00017942)	
				
			КонецЕсли;
			
			Если Бонус = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			БонусСНДФЛ = Бонус / 0.87;
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
			СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
			СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			СтруктураДанных.ТипРабот 		= СтрокаТаблицы.ТипРабот;
			СтруктураДанных.Выручка 		= Выборка.Выручка;
			СтруктураДанных.Бонус 			= Окр(Бонус, 0, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ 		= Окр(БонусСНДФЛ, 0, РежимОкругления.Окр15как10);
			// {{ Молчанов С.А. 17.11.18 ИП-00020449
			// для определенных типов работ всегда округление в бОльшую сторону
			Если (СтруктураДанных.ТипРабот = ДоплатаПереработка_9_10 Или СтруктураДанных.ТипРабот = ДоплатаПереработка_11) И СтруктураДанных.БонусСНДФЛ < БонусСНДФЛ Тогда
				СтруктураДанных.БонусСНДФЛ = СтруктураДанных.БонусСНДФЛ + 1;
			КонецЕсли;			
			// Молчанов С.А. 17.11.18 ИП-00020449 }}
			СтруктураДанных.КоличествоЧасов	= СтрокаТаблицы.КоличествоЧасов;
			
			//+++АК kats 2018.01.23 17298
			СтруктураДанных.ПроцентОтВыручкиСНДФЛ	= Окр(ПоцентОтВыручкиСНДФЛ, 0, РежимОкругления.Окр15как10);
			//---АК kats 2018.01.23 17298
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
			//+++АК mika 2018.10.16 ИП-00020111 Контроль минимальной суммы начислений (День)
			//(контроль выполняется только для Грузчиков и Старших продавцов)
			//+++АК mika 2018.10.30 Без задачи. Для Старших продавцов отключить добавление Корректировки мин. з.п (у них не будет корректировки, информация от Сорокиной, Гурцевой)
			//Если ЗначениеЗаполнено(МинимальнаяСуммаНачислений_День) И (Выборка.ТипФизЛица = "Грузчик" ИЛИ (Выборка.СтаршийПродавец И ДатаНачисления >= Дата(2018,11,01))) И НЕ Выборка.Стажер Тогда 
			Если ЗначениеЗаполнено(МинимальнаяСуммаНачислений_День) И (Выборка.ТипФизЛица = "Грузчик" И НЕ Выборка.Стажер И НЕ Выборка.ВахтовыйМетод) Тогда   
				НоваяСтрока  = ТаблицаНачисленийДень.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.ТипРабот = СтруктураДанных.ТипРабот;
				НоваяСтрока.Бонус    = СтруктураДанных.Бонус;
				НоваяСтрока.КоличествоЧасов = СтруктураДанных.КоличествоЧасов;
				НоваяСтрока.ТипФизЛица      = Выборка.ТипФизЛица;
			КонецЕсли;
			//---АК mika
			
		КонецЦикла;
		
		//+++АК mika 2018.10.16 ИП-00020111
		Если ТаблицаНачисленийДень.Количество() Тогда
			ВыполнитьКонтрольМинимальнойСуммыНачисленийДень(ТаблицаНачисленийДень, МинимальнаяСуммаНачислений_День); 
		КонецЕсли;
		//---АК mika
			
		////+++АК gusd (ИП-00018118)
		//
		//Если Выборка.ПрименяетсяЗаморозка Тогда
		//	
		//	// Заморозка
		//	// Если начислено больше фиксированной суммы, то пишем 0, иначе доплачиваем до фиксированной суммы
		//	
		//	ИтогоНачислено = ТаблицаРасчет.Итог("Сумма");
		//	
		//	СуммаЗаморозка = Макс(0, ФиксированнаяСтавкаЗП - ИтогоНачислено);
		//	СуммаЗаморозкаСНДФЛ = СуммаЗаморозка / 0.87;
		//	
		//	СтруктураДанных = ПолучитьСтруктуруПолей();
		//	
		//	СтруктураДанных.ДатаНачисления 	= ДатаНачисления;
		//	СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		//	СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		//	СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Заморозка;
		//	СтруктураДанных.Бонус 			= Окр(СуммаЗаморозка, 0, РежимОкругления.Окр15как10);
		//	СтруктураДанных.БонусСНДФЛ 		= Окр(СуммаЗаморозкаСНДФЛ, 0, РежимОкругления.Окр15как10);
		//	
		//	ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
		//	
		//КонецЕсли;
		//
		////---АК gusd (ИП-00018118)
		
	КонецЦикла;
	
	// 2. Открытие ТТ
	//РасчитатьЗП_ОткрытиеТТ_НоваяСхема(ДатаНач, ДатаКон);
	
	//+++АК mika 2018.07.03 ИП-00018928
	//РасчитатьЗП_ОткрытиеТТ(ДатаНач, ДатаКон); // попросили вернуть старую схему
	РасчитатьЗП_ОткрытиеТТ_Повторное(ДатаНач, ДатаКон); 
	//---АК mika 
	
	// 3. Приведи друга
	РасчитатьЗП_ПриведиДруга(ДатаНач, ДатаКон);
	
	// 4. Промоутер
	РасчитатьЗП_Зазывала(ДатаНач, ДатаКон);
	
	// 5. Оплата за стаж
	РасчитатьЗП_БонусОтСтажа(ДатаНач, ДатаКон);
	
	// 6. Внештатник
	РасчитатьЗП_Внештатник(ДатаНач, ДатаКон);
	
	// 7. Тренинг
	РасчитатьЗП_Тренинг(ДатаНач, ДатаКон);
	
	// 8. Заморозка
	РассчитатьЗП_Заморозка(ДатаНач, ДатаКон);
	                             
	// Прочие доплаты  
	РассчитатьДоплаты_ВахтовыйМетодГрузчики(ДатаНач, ДатаКон); //+++АК mika 2018.10.09 ИП-00019755
	
КонецПроцедуры

Функция ПолучитьПраздничныеДниВИнтервале(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Таблица
	|ГДЕ
	|	Таблица.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|	И Таблица.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач - 86400); // Не известно когда начинались смены
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон + 86400); // Не известно когда начинались смены
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет таблицу для расчета отрезками смены
//
// Параметры:
//	Таблица - Таблица значений
//
//		Колонки:
//
//		*Начало 			- тип - Дата
//		*Окончание 			- тип - Дата
//		*Ночь 				- тип - Булево
//		*Праздник 			- тип - Булево
//		*КоличествоМинут 	- тип - Число
//		*Сумма 				- тип - Число
//
//	ДатаНач - Дата
//	ДатаКон - Дата
//
Процедура РазложитьСменуНаОтрезки(Таблица, ДатаНач, ДатаКон, ВсегоОтработаноМинут, ТаблицаПраздничныеДни, ПерерывУчтен = Ложь)
	
	// 5й час смены перерыв
	
	// перерыв решили отменить
	ПерерывУчтен = Истина;
	
	ОсталосьДоПерерыва = 100;
	Если ВсегоОтработаноМинут <= 240 И ВсегоОтработаноМинут > 180 И Не ПерерывУчтен Тогда
		ОсталосьДоПерерыва = 240 - ВсегоОтработаноМинут;
	КонецЕсли;
	
	НачалоСмены = НачалоМинуты(ДатаНач);	
	ОкончаниеСмены = НачалоМинуты(ДатаКон);
	
	НачалоСледЧаса = КонецЧаса(НачалоСмены) + 1;
	Если НачалоСледЧаса > ОкончаниеСмены Тогда
		
		КоличествоМинут = (ОкончаниеСмены - НачалоСмены) / 60;
		
		Если ОсталосьДоПерерыва < 100 Тогда
			КоличествоМинут = Мин((ОкончаниеСмены - НачалоСмены) / 60, ОсталосьДоПерерыва); 
		КонецЕсли;
		
		Если КоличествоМинут <= 0 Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Начало = НачалоСмены;
		НоваяСтрока.Окончание = НачалоСмены + КоличествоМинут*60;
		НоваяСтрока.Ночь = (Час(НачалоСмены) >= 22 ИЛИ Час(НачалоСмены) < 6);
		НоваяСтрока.Праздник = (ТаблицаПраздничныеДни.Найти(НачалоДня(НачалоСмены), "ДатаКалендаря") <> Неопределено);
		НоваяСтрока.КоличествоМинут = КоличествоМинут;
		
		ВсегоОтработаноМинут = ВсегоОтработаноМинут + НоваяСтрока.КоличествоМинут;
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоМинут = (НачалоСледЧаса - НачалоСмены) / 60;
	
	Если ОсталосьДоПерерыва < 100 Тогда
		КоличествоМинут = Мин((НачалоСледЧаса - НачалоСмены) / 60, ОсталосьДоПерерыва);
		ПерерывУчтен = Истина;
	КонецЕсли;
	
	Если КоличествоМинут > 0 Тогда
	
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Начало = НачалоСмены;
		НоваяСтрока.Окончание = НачалоСмены + КоличествоМинут*60;
		НоваяСтрока.Ночь = (Час(НачалоСмены) >= 22 ИЛИ Час(НачалоСмены) < 6);
		НоваяСтрока.Праздник = (ТаблицаПраздничныеДни.Найти(НачалоДня(НачалоСмены), "ДатаКалендаря") <> Неопределено);
		НоваяСтрока.КоличествоМинут = КоличествоМинут;
		
		ВсегоОтработаноМинут = ВсегоОтработаноМинут + НоваяСтрока.КоличествоМинут;
		
		// В ночные смены перерывы не учитываются
		НачалоСмены = НачалоСмены + КоличествоМинут*60 + ?(ОсталосьДоПерерыва < 100 И Не НоваяСтрока.Ночь, 60*60, 0); // Добавим 1 час перерыва
		
	Иначе	
		НачалоСмены = НачалоСледЧаса;
	КонецЕсли;
	
	РазложитьСменуНаОтрезки(Таблица, НачалоСмены, ОкончаниеСмены, ВсегоОтработаноМинут, ТаблицаПраздничныеДни, ПерерывУчтен);
	
КонецПроцедуры

Процедура РасчитатьЗП_ОткрытиеТТ_НоваяСхема(ДатаНач, ДатаКон)
	
	// Точка в заданном интервале должна перейти из группы развития
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ТорговаяТочка,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ)) КАК ПервыйДеньНеВРазвитии
	|ПОМЕСТИТЬ ВТНачалоРаботыНеВРазвитии
	|ИЗ
	|	Документ.ЛистУчета КАК Таблица
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.Обработан
	|	И Таблица.ЦФО.id_ЦФО <> 12
	|	И Таблица.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ТорговаяТочка,
	|	НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ) КАК ПоследнийДеньВРазвитии
	|ПОМЕСТИТЬ ВТОкончаниеРаботыВРазвитии
	|ИЗ
	|	ВТНачалоРаботыНеВРазвитии КАК ВТНачалоРаботыНеВРазвитии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК Таблица
	|		ПО ВТНачалоРаботыНеВРазвитии.ТорговаяТочка = Таблица.ТорговаяТочка
	|			И (ДОБАВИТЬКДАТЕ(ВТНачалоРаботыНеВРазвитии.ПервыйДеньНеВРазвитии, ДЕНЬ, -1) = НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ))
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.Обработан
	|	И Таблица.ЦФО.id_ЦФО = 12
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачалоРаботыНеВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ТорговаяТочка,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ)) КАК ПервыйДеньВРазвитии
	|ПОМЕСТИТЬ ВТНачалоРаботыРазвитии
	|ИЗ
	|	Документ.ЛистУчета КАК Таблица
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.Обработан
	|	И Таблица.ЦФО.id_ЦФО = 12
	|	И Таблица.ТорговаяТочка В
	|			(ВЫБРАТЬ
	|				Таблица.ТорговаяТочка
	|			ИЗ
	|				ВТОкончаниеРаботыВРазвитии КАК Таблица)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНачалоРаботыРазвитии.ТорговаяТочка,
	|	ВТНачалоРаботыРазвитии.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	ВТНачалоРаботыРазвитии.ПервыйДеньВРазвитии,
	|	ВТОкончаниеРаботыВРазвитии.ПоследнийДеньВРазвитии,
	|	РАЗНОСТЬДАТ(ВТНачалоРаботыРазвитии.ПервыйДеньВРазвитии, ВТОкончаниеРаботыВРазвитии.ПоследнийДеньВРазвитии, ДЕНЬ) + 1 КАК КоличествоДнейВразвитии
	|ПОМЕСТИТЬ ВТИнтервалВРазвитии
	|ИЗ
	|	ВТНачалоРаботыРазвитии КАК ВТНачалоРаботыРазвитии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОкончаниеРаботыВРазвитии КАК ВТОкончаниеРаботыВРазвитии
	|		ПО ВТНачалоРаботыРазвитии.ТорговаяТочка = ВТОкончаниеРаботыВРазвитии.ТорговаяТочка
	|ГДЕ
	|	РАЗНОСТЬДАТ(ВТНачалоРаботыРазвитии.ПервыйДеньВРазвитии, ВТОкончаниеРаботыВРазвитии.ПоследнийДеньВРазвитии, ДЕНЬ) + 1 <= 38
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОкончаниеРаботыВРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачалоРаботыРазвитии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИнтервалВРазвитии.ТорговаяТочка,
	|	ВТИнтервалВРазвитии.ТипРозничнойТочки,
	|	ВТИнтервалВРазвитии.ПервыйДеньВРазвитии,
	|	ВТИнтервалВРазвитии.ПоследнийДеньВРазвитии,
	|	ВТИнтервалВРазвитии.КоличествоДнейВразвитии,
	|	Продавцы.Продавец КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА Продавцы.Пч В (0, 2, 5, 6)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	""Продавец"" КАК ТипФизЛица
	|ПОМЕСТИТЬ ВТПодготовка
	|ИЗ
	|	ВТИнтервалВРазвитии КАК ВТИнтервалВРазвитии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Продавцы КАК Продавцы
	|		ПО ВТИнтервалВРазвитии.ТорговаяТочка = Продавцы.Ссылка.ТорговаяТочка
	|			И (НАЧАЛОПЕРИОДА(Продавцы.Ссылка.Дата, ДЕНЬ) МЕЖДУ ВТИнтервалВРазвитии.ПервыйДеньВРазвитии И ВТИнтервалВРазвитии.ПоследнийДеньВРазвитии)
	|			И (Продавцы.Ссылка.Проведен)
	|			И (Продавцы.Ссылка.Обработан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТИнтервалВРазвитии.ТорговаяТочка,
	|	ВТИнтервалВРазвитии.ТипРозничнойТочки,
	|	ВТИнтервалВРазвитии.ПервыйДеньВРазвитии,
	|	ВТИнтервалВРазвитии.ПоследнийДеньВРазвитии,
	|	ВТИнтервалВРазвитии.КоличествоДнейВразвитии,
	|	Кассиры.Кассир,
	|	ВЫБОР
	|		КОГДА Кассиры.СвойствоСотрудника = 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	""Кассир""
	|ИЗ
	|	ВТИнтервалВРазвитии КАК ВТИнтервалВРазвитии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЛистУчета.Кассиры КАК Кассиры
	|		ПО ВТИнтервалВРазвитии.ТорговаяТочка = Кассиры.Ссылка.ТорговаяТочка
	|			И (НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ) МЕЖДУ ВТИнтервалВРазвитии.ПервыйДеньВРазвитии И ВТИнтервалВРазвитии.ПоследнийДеньВРазвитии)
	|			И (Кассиры.Ссылка.Проведен)
	|			И (Кассиры.Ссылка.Обработан)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодготовка.ТорговаяТочка,
	|	ВТПодготовка.ТипРозничнойТочки,
	|	МАКСИМУМ(ВТПодготовка.ПервыйДеньВРазвитии) КАК ПервыйДеньВРазвитии,
	|	МАКСИМУМ(ВТПодготовка.ПоследнийДеньВРазвитии) КАК ПоследнийДеньВРазвитии,
	|	МАКСИМУМ(ВТПодготовка.КоличествоДнейВразвитии) КАК КоличествоДнейВразвитии,
	|	ВТПодготовка.ФизЛицо,
	|	СУММА(ВТПодготовка.Количество) КАК Количество,
	|	ВТПодготовка.ТипФизЛица
	|ИЗ
	|	ВТПодготовка КАК ВТПодготовка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПодготовка.ТорговаяТочка,
	|	ВТПодготовка.ТипРозничнойТочки,
	|	ВТПодготовка.ФизЛицо,
	|	ВТПодготовка.ТипФизЛица";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыДляРасчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.ПоследнийДеньВРазвитии, Новый Структура("ТипРозничнойТочки", Выборка.ТипРозничнойТочки));
		
		ДоплатаЗаПередачуИзРазвитияПродавец14_01102017 	  = ПараметрыДляРасчета.ДоплатаЗаПередачуИзРазвитияПродавец14_01102017;
		ДоплатаЗаПередачуИзРазвитияПродавец15_38_01102017 = ПараметрыДляРасчета.ДоплатаЗаПередачуИзРазвитияПродавец15_38_01102017;
		ДоплатаЗаПередачуИзРазвитияКассир14_01102017 	  = ПараметрыДляРасчета.ДоплатаЗаПередачуИзРазвитияКассир14_01102017;
		ДоплатаЗаПередачуИзРазвитияКассир15_38_01102017   = ПараметрыДляРасчета.ДоплатаЗаПередачуИзРазвитияКассир15_38_01102017;
		
		
		Если Выборка.ТипФизЛица = "Продавец" Тогда
			
			Если Выборка.КоличествоДнейВразвитии <= 14 Тогда
				ДоплатаЗаБыстроеРазвитиеДень = ДоплатаЗаПередачуИзРазвитияПродавец14_01102017;
			Иначе
			    ДоплатаЗаБыстроеРазвитиеДень = ДоплатаЗаПередачуИзРазвитияПродавец15_38_01102017;
			КонецЕсли;
			
		Иначе	
			
			Если Выборка.КоличествоДнейВразвитии <= 14 Тогда
				ДоплатаЗаБыстроеРазвитиеДень = ДоплатаЗаПередачуИзРазвитияКассир14_01102017;
			Иначе
			    ДоплатаЗаБыстроеРазвитиеДень = ДоплатаЗаПередачуИзРазвитияКассир15_38_01102017;
			КонецЕсли;
			
		КонецЕсли;
		
		Бонус = ДоплатаЗаБыстроеРазвитиеДень * Выборка.Количество;
		БонусСНДФЛ = Бонус / 0.87;
		
		Если Бонус <> 0 Тогда
			
			СтруктураДанных = ПолучитьСтруктуруПолей();
			
			СтруктураДанных.ДатаНачисления 	= Выборка.ПоследнийДеньВРазвитии;
			СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
			СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Открытие_ТТ;
			СтруктураДанных.Бонус 			= Окр(Бонус		, 0, РежимОкругления.Окр15как10);
			СтруктураДанных.БонусСНДФЛ		= Окр(БонусСНДФЛ, 0, РежимОкругления.Окр15как10);
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//--- gusd (ИП-00016780)

//+++АК gusd (ИП-00018118)

Процедура РассчитатьЗП_Заморозка(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаПродавцов.ФизЛицо,
	|	СУММА(ЗарплатаПродавцов.Бонус) КАК ИтогоНачислено,
	|	ЗарплатаПродавцов.ДатаНачисления,
	|	МАКСИМУМ(ЗамороженнаяЗарплатаПродавцов.Сумма) КАК СуммаЗаморожено,
	|	ЗарплатаПродавцов.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ЗарплатаПродавцов КАК ЗарплатаПродавцов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗамороженнаяЗарплатаПродавцов КАК ЗамороженнаяЗарплатаПродавцов
	|		ПО ЗарплатаПродавцов.ФизЛицо = ЗамороженнаяЗарплатаПродавцов.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ЗарплатаПродавцов.ДатаНачисления, ДЕНЬ) = ЗамороженнаяЗарплатаПродавцов.ПериодДействия)
	|			И (ЗамороженнаяЗарплатаПродавцов.Заморожена)
	|ГДЕ
	|	ЗарплатаПродавцов.ДатаНачисления МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаПродавцов.ФизЛицо,
	|	ЗарплатаПродавцов.ДатаНачисления,
	|	ЗарплатаПродавцов.ТорговаяТочка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сообщить("1");
		
		СуммаЗаморозка = Макс(0, Выборка.СуммаЗаморожено - Выборка.ИтогоНачислено);
		СуммаЗаморозкаСНДФЛ = СуммаЗаморозка / 0.87;
		
		СтруктураДанных = ПолучитьСтруктуруПолей();
		
		СтруктураДанных.ДатаНачисления 	= Выборка.ДатаНачисления;
		СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
		СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.Заморозка;
		СтруктураДанных.Бонус 			= Окр(СуммаЗаморозка, 0, РежимОкругления.Окр15как10);
		СтруктураДанных.БонусСНДФЛ 		= Окр(СуммаЗаморозкаСНДФЛ, 0, РежимОкругления.Окр15как10);
		
		ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
	
	КонецЦикла;
	
КонецПроцедуры

//---АК gusd (ИП-00018118)

//+++АК mika 2018.05.21 ИП-00018349 Возвращает текст основного запроса для расчета ЗП
//Произведена оптимизация запроса. В изначальном тексте присутствует выборка из из РС ЦФОСтруктурныхЕдиниц для каждой закладки(продавцы, кассиры, грузчики и пр.)листа учета,
//что приводило к увеличению времени выполнения запроса (выполнялся от 20 до 70 секунд). 
//Подзапрос к РС ЦФОСтруктурныхЕдиниц вынесен во временую таблицу (время выполнения: 1-2 сек.)
//
Функция ПолучитьТекстЗапросаРассчетаЗпПродавцам()
	
	Возврат 
	//+++АК mika 2018.07.02 ИП-00018928 Изменение алгоритма определения первого Листа учета(Повторное развитие) 
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Период
	|ПОМЕСТИТЬ ВТ_ПериодРазвития
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&КонецПериода, ЦФО.id_ЦФО = 12) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|;
	|
	//---АК mika
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиниц.ТорговаяТочка КАК СтруктурнаяЕдиница,
	|	МИНИМУМ(ЦФОСтруктурныхЕдиниц.Дата) КАК Период
	|ПОМЕСТИТЬ ВТ_ВРазвитии
	|ИЗ
	//+++АК mika 2018.07.02 ИП-00018928 Изменение алгоритма определения первого Листа учета(Повторное развитие) 
	|	ВТ_ПериодРазвития КАК ВТ_ПериодРазвития
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЦФОСтруктурныхЕдиниц
	|		ПО ВТ_ПериодРазвития.СтруктурнаяЕдиница = ЦФОСтруктурныхЕдиниц.ТорговаяТочка
	//---АК mika
	|ГДЕ
	|	ЦФОСтруктурныхЕдиниц.ЦФО.id_ЦФО = 12
	|	И ЦФОСтруктурныхЕдиниц.Проведен = ИСТИНА
	//+++АК mika 2018.07.02 ИП-00018928 Изменение алгоритма определения первого Листа учета(Повторное развитие) 
	//|	И ЦФОСтруктурныхЕдиниц.Дата >= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -50)
    | И (ЦФОСтруктурныхЕдиниц.Дата >= ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, -50) И ЦФОСтруктурныхЕдиниц.Дата >=  ВТ_ПериодРазвития.Период)
	//---АК mika
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦФОСтруктурныхЕдиниц.ТорговаяТочка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продавцы.Ссылка.Дата, ДЕНЬ) КАК ДатаНачисления,
	|	Продавцы.Ссылка КАК ЛистУчета,
	|	Продавцы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Продавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА Продавцы.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаРазвития,
	|	ВЫБОР
	|		КОГДА Продавцы.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА Продавцы.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА Продавцы.Ссылка.СуммаДокумента + Продавцы.Ссылка.Купон + Продавцы.Ссылка.КорректировкаZ + Продавцы.Ссылка.СуммаЭквайрингДоставка - Продавцы.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ Продавцы.Ссылка.СуммаДокумента + Продавцы.Ссылка.Купон + Продавцы.Ссылка.КорректировкаZ + Продавцы.Ссылка.Отклонение + Продавцы.Ссылка.СуммаЭквайрингДоставка - Продавцы.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ Продавцы.Ссылка.СуммаДокумента + Продавцы.Ссылка.Купон + Продавцы.Ссылка.КорректировкаZ + Продавцы.Ссылка.СуммаЭквайрингДоставка - Продавцы.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ КАК Выручка,
	|	Продавцы.Продавец КАК ФизЛицо,
	|	Продавцы.ДатаПрихода КАК ДатаПрихода,
	|	Продавцы.ДатаУхода КАК ДатаУхода,
	|	ВЫБОР
	|		КОГДА Продавцы.Пч В (2, 6)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтаршийПродавец,
	|	ВЫБОР
	|		КОГДА Продавцы.Пч = 3
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Практикант,
	|	ВЫБОР
	|		КОГДА Продавцы.Пч = 4
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Стажер,
	//+++АК mika 2018.09.19 ИП-00019805 
	|   ЛОЖЬ КАК ВахтовыйМетод,
	//---АК mika
	|   ЛОЖЬ КАК КассирПочасовик, //+++АК mika 2018.12.09 ИП-00020658
	|	""Продавец"" КАК ТипФизЛица,
	|	Продавцы.ЭкстренныйВызов КАК ЭкстренныйВызов,
	|	ЕСТЬNULL(ВТ_ВРазвитии.Период, ДАТАВРЕМЯ(3000, 1, 1)) КАК ВРазвитииСДаты,
	|	ЕСТЬNULL(ЗамороженнаяЗарплатаПродавцов.Сумма, 0) КАК ФиксированнаяСтавкаЗП,
	|	НЕ ЗамороженнаяЗарплатаПродавцов.Сумма ЕСТЬ NULL КАК ПрименяетсяЗаморозка
	|ИЗ
	|	Документ.ЛистУчета.Продавцы КАК Продавцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРазвитии КАК ВТ_ВРазвитии
	|		ПО Продавцы.Ссылка.ТорговаяТочка = ВТ_ВРазвитии.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗамороженнаяЗарплатаПродавцов КАК ЗамороженнаяЗарплатаПродавцов
	|		ПО Продавцы.Продавец = ЗамороженнаяЗарплатаПродавцов.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(Продавцы.Ссылка.Дата, ДЕНЬ) = ЗамороженнаяЗарплатаПродавцов.ПериодДействия)
	|			И (ЗамороженнаяЗарплатаПродавцов.Заморожена)
	|ГДЕ
	|	Продавцы.Ссылка.Проведен
	|	И Продавцы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Кассиры.Ссылка.Дата, ДЕНЬ),
	|	Кассиры.Ссылка,
	|	Кассиры.Ссылка.ТорговаяТочка,
	|	Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА Кассиры.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Кассиры.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА Кассиры.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА Кассиры.Ссылка.СуммаДокумента + Кассиры.Ссылка.Купон + Кассиры.Ссылка.КорректировкаZ + Кассиры.Ссылка.СуммаЭквайрингДоставка - Кассиры.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ Кассиры.Ссылка.СуммаДокумента + Кассиры.Ссылка.Купон + Кассиры.Ссылка.КорректировкаZ + Кассиры.Ссылка.Отклонение + Кассиры.Ссылка.СуммаЭквайрингДоставка - Кассиры.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ Кассиры.Ссылка.СуммаДокумента + Кассиры.Ссылка.Купон + Кассиры.Ссылка.КорректировкаZ + Кассиры.Ссылка.СуммаЭквайрингДоставка - Кассиры.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ,
	|	Кассиры.Кассир,
	|	Кассиры.ДатаПрихода,
	|	Кассиры.ДатаУхода,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Кассиры.СвойствоСотрудника = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	//+++АК mika 2018.09.19 ИП-00019805 
	|   ЛОЖЬ,
	//---АК mika
	|   Кассиры.СвойствоСотрудника = 2 КАК КассирПочасовик, //+++АК mika 2018.12.09 ИП-00020658
	|	""Кассир"",
	|	Кассиры.ЭкстренныйВызов,
	|	ЕСТЬNULL(ВТ_ВРазвитии.Период, ДАТАВРЕМЯ(3000, 1, 1)),
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЛистУчета.Кассиры КАК Кассиры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРазвитии КАК ВТ_ВРазвитии
	|		ПО Кассиры.Ссылка.ТорговаяТочка = ВТ_ВРазвитии.СтруктурнаяЕдиница
	|ГДЕ
	|	Кассиры.Ссылка.Проведен 
	|	И Кассиры.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Грузчики.Ссылка.Дата, ДЕНЬ),
	|	Грузчики.Ссылка,
	|	Грузчики.Ссылка.ТорговаяТочка,
	|	Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА Грузчики.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Грузчики.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА Грузчики.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА Грузчики.Ссылка.СуммаДокумента + Грузчики.Ссылка.Купон + Грузчики.Ссылка.КорректировкаZ + Грузчики.Ссылка.СуммаЭквайрингДоставка - Грузчики.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ Грузчики.Ссылка.СуммаДокумента + Грузчики.Ссылка.Купон + Грузчики.Ссылка.КорректировкаZ + Грузчики.Ссылка.Отклонение + Грузчики.Ссылка.СуммаЭквайрингДоставка - Грузчики.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ Грузчики.Ссылка.СуммаДокумента + Грузчики.Ссылка.Купон + Грузчики.Ссылка.КорректировкаZ + Грузчики.Ссылка.СуммаЭквайрингДоставка - Грузчики.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ,
	|	Грузчики.ФизЛицо,
	|	Грузчики.ДатаПрихода,
	|	Грузчики.ДатаУхода,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Грузчики.СвойствоСотрудника = 2
	//+++АК mika 2018.12.05 ИП-00020643
	|		    ИЛИ Грузчики.СвойствоСотрудника = 5 
	//---АК mika
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	//+++АК mika 2018.09.19 ИП-00019805 
	|	ВЫБОР
	|		КОГДА Грузчики.СвойствоСотрудника = 3 
	|			ИЛИ Грузчики.СвойствоСотрудника = 4 
	|			ИЛИ Грузчики.СвойствоСотрудника = 5
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	//---АК mika
	|   ЛОЖЬ КАК КассирПочасовик, //+++АК mika 2018.12.09 ИП-00020658
	|	""Грузчик"",
	|	Грузчики.ЭкстренныйВызов,
	|	ЕСТЬNULL(ВТ_ВРазвитии.Период, ДАТАВРЕМЯ(3000, 1, 1)),
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЛистУчета.Грузчики КАК Грузчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРазвитии КАК ВТ_ВРазвитии
	|		ПО Грузчики.Ссылка.ТорговаяТочка = ВТ_ВРазвитии.СтруктурнаяЕдиница
	|ГДЕ
	|	Грузчики.Ссылка.Проведен
	|	И Грузчики.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Уборщицы.Ссылка.Дата, ДЕНЬ),
	|	Уборщицы.Ссылка,
	|	Уборщицы.Ссылка.ТорговаяТочка,
	|	Уборщицы.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА Уборщицы.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	0,
	|	Уборщицы.ФизЛицо,
	|	Уборщицы.ДатаПрихода,
	|	Уборщицы.ДатаУхода,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	//+++АК mika 2018.09.19 ИП-00019805 
	|   ЛОЖЬ,
	//---АК mika
	|   ЛОЖЬ КАК КассирПочасовик, //+++АК mika 2018.12.09 ИП-00020658
	|	""Уборщица"",
	|	ЛОЖЬ,
	|	ЕСТЬNULL(ВТ_ВРазвитии.Период, ДАТАВРЕМЯ(3000, 1, 1)),
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЛистУчета.Уборщицы КАК Уборщицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРазвитии КАК ВТ_ВРазвитии
	|		ПО Уборщицы.Ссылка.ТорговаяТочка = ВТ_ВРазвитии.СтруктурнаяЕдиница
	|ГДЕ
	|	Уборщицы.Ссылка.Проведен
	|	И Уборщицы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Пекари.Ссылка.Дата, ДЕНЬ),
	|	Пекари.Ссылка,
	|	Пекари.Ссылка.ТорговаяТочка,
	|	Пекари.Ссылка.ТорговаяТочка.ТипРозничнойТочки,
	|	ВЫБОР
	|		КОГДА Пекари.Ссылка.ЦФО.id_ЦФО = 12
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Пекари.Ссылка.Обработан
	|			ТОГДА ВЫБОР
	|					КОГДА Пекари.Ссылка.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|						ТОГДА Пекари.Ссылка.СуммаДокумента + Пекари.Ссылка.Купон + Пекари.Ссылка.КорректировкаZ + Пекари.Ссылка.СуммаЭквайрингДоставка - Пекари.Ссылка.КорректировкаБезналДоставка
	|					ИНАЧЕ Пекари.Ссылка.СуммаДокумента + Пекари.Ссылка.Купон + Пекари.Ссылка.КорректировкаZ + Пекари.Ссылка.Отклонение + Пекари.Ссылка.СуммаЭквайрингДоставка - Пекари.Ссылка.КорректировкаБезналДоставка
	|				КОНЕЦ
	|		ИНАЧЕ Пекари.Ссылка.СуммаДокумента + Пекари.Ссылка.Купон + Пекари.Ссылка.КорректировкаZ + Пекари.Ссылка.СуммаЭквайрингДоставка - Пекари.Ссылка.КорректировкаБезналДоставка
	|	КОНЕЦ,
	|	Пекари.ФизЛицо,
	|	Пекари.ДатаПрихода,
	|	Пекари.ДатаУхода,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Пекари.СвойствоСотрудника = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	//+++АК mika 2018.09.19 ИП-00019805 
	|   ЛОЖЬ,
	//---АК mika
	|   ЛОЖЬ КАК КассирПочасовик, //+++АК mika 2018.12.09 ИП-00020658
	|	""Пекарь"",
	|	Пекари.ЭкстренныйВызов,
	|	ЕСТЬNULL(ВТ_ВРазвитии.Период, ДАТАВРЕМЯ(3000, 1, 1)),
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЛистУчета.Пекари КАК Пекари
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВРазвитии КАК ВТ_ВРазвитии
	|		ПО Пекари.Ссылка.ТорговаяТочка = ВТ_ВРазвитии.СтруктурнаяЕдиница
	|ГДЕ
	|	Пекари.Ссылка.Проведен
	|	И Пекари.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
КонецФункции // ПолучитьТекстЗапросаРассчетаЗпПродавцам()

// Выполняет начисление доплат за работу грузчиков по "Вахтовому методу"
// (Оплачиваются выходы и "Отсутствия" с видом "Запланированный выходной")
// Параметры:
//  ДатаНач  - <Тип.Дата> - Начало периода
//                 <продолжение описания параметра>
//  ДатаКон  - <Тип.Дата> - Конец периода
//
Процедура РассчитатьДоплаты_ВахтовыйМетодГрузчики(ДатаНач, ДатаКон) //+++АК mika 2018.10.09 ИП-00019755 

	Запрос = Новый Запрос;
	
	//Свойства сотрудника: 3 - Вахтовый, 4 - Вахтовый (Ночной), 5 - Вахтовый (Стажер)
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(Таб_Грузчики.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	Таб_Грузчики.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|	Таб_Грузчики.ФизЛицо КАК ФизЛицо,
	|	СУММА(Таб_Грузчики.КоличествоЧасов) КАК КоличествоЧасов,
	|	Таб_Грузчики.СвойствоСотрудника
	|ИЗ
	|	Документ.ЛистУчета.Грузчики КАК Таб_Грузчики
	|ГДЕ
	|	Таб_Грузчики.Ссылка.Проведен
	|	И Таб_Грузчики.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Таб_Грузчики.СвойствоСотрудника В (3, 4, 5)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб_Грузчики.ФизЛицо,
	|	Таб_Грузчики.Ссылка.ТорговаяТочка,
	|	НАЧАЛОПЕРИОДА(Таб_Грузчики.Ссылка.Дата, ДЕНЬ),
	|	Таб_Грузчики.СвойствоСотрудника
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельРаботыГрузчиков.Период,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка),
	|	ТабельРаботыГрузчиков.Сотрудник,
	|	0,
	|	ТабельРаботыГрузчиков.СвойствоСотрудника
	|ИЗ
	|	РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыГрузчиков
	|ГДЕ
	|	ТабельРаботыГрузчиков.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТабельРаботыГрузчиков.СвойствоСотрудника В (3, 4, 5)
	|	И ТабельРаботыГрузчиков.Отсутствие = ЗНАЧЕНИЕ(Перечисление.ВидыОтсутствия.ЗапланированныйВыходной)";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ДатаКон));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ПараметрыРассчета = РегистрыСведений.ПараметрыДляРасчетаЗаработнойПлаты.ПолучитьПоследнее(Выборка.Период, Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));	
		
		СтруктураДанных   = ПолучитьСтруктуруПолей();
		
		Пока Выборка.Следующий()Цикл
			
			СтруктураДанных.ДатаНачисления 	= Выборка.Период;
			СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
			СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.ДоплатаВахтовыйМетод;
			СтруктураДанных.Бонус 			= ПараметрыРассчета.ДоплатаЗаДеньВахтовыйМетодГрузчик;
			СтруктураДанных.БонусСНДФЛ 		= ПараметрыРассчета.ДоплатаЗаДеньВахтовыйМетодГрузчик;
			
			ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьДоплаты_ВахтовыйМетодГрузчики()

// Выполняет проверку необходимости корректировки минимальной суммы начислений в день (Для Грузчиков и Старших продавцов)
// Принцип расчета: (Основная ставка + Переработка + Процент от продаж)*0.1% должен быть не меньше, чем МинимальнаяСуммаНачислений_День
//                  Если сумма меньше, то отражать дополнительным начислением разницу (Тип работ: Корректировка мин. ЗП)
//
// Параметры:
//  ТаблицаНачисленийДень  - <Тип.ТаблицаНачислений> - хранит информацию о всех начислениях за день
//  МинимальнаяСуммаНачислений_День - <Тип.Число> - Минимальная сумма начислений, которые должен получить сотрудник 
//
Процедура ВыполнитьКонтрольМинимальнойСуммыНачисленийДень(ТаблицаНачисленийДень, МинимальнаяСуммаНачислений_День) //+++АК mika 2018.10.16 ИП-00020111 

	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаНачисленийДень);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ.ДатаНачисления,
	|	ВТ.ФизЛицо,
	|	ВТ.ТорговаяТочка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.ТипРабот) КАК ТипРабот,
	|	СУММА(ВТ.Бонус) КАК ОбщийБонус,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ.ТипРабот = ЗНАЧЕНИЕ(Перечисление.ТипыРаботДляРасчетаЗП.ВыходЗаЧас)
	|				ТОГДА ВТ.КоличествоЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЧасов,
	|	ВТ.ТипФизЛица
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.ТипРабот В (ЗНАЧЕНИЕ(Перечисление.ТипыРаботДляРасчетаЗП.ВыходЗаЧас), ЗНАЧЕНИЕ(Перечисление.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_9_10), ЗНАЧЕНИЕ(Перечисление.ТипыРаботДляРасчетаЗП.ДоплатаПереработка_11), ЗНАЧЕНИЕ(Перечисление.ТипыРаботДляРасчетаЗП.БонусОтВыручки))
	|	И ВТ.ФизЛицо.ТипВахтыВГрафике = ЗНАЧЕНИЕ(Перечисление.ТипыВахтГрафикиРабот.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ДатаНачисления,
	|	ВТ.ФизЛицо,
	|	ВТ.ТорговаяТочка,
	|	ВТ.ТипФизЛица";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипФизЛица = "Грузчик" И  Выборка.КоличествоЧасов < 10 Тогда //Уточнение 2018.10.24 (Юраш Рената)
				Продолжить;
			КонецЕсли;
			//Согласно условий в ТЗ, к сумме для контроля необходимо добавить 1%,
			//но так и не удалось выяснить зачем этот процент (Гурцева Анна попросила отключить)↓  
			//Если Выборка.ОбщийБонус/100	+ Выборка.ОбщийБонус < МинимальнаяСуммаНачислений_День Тогда
			/////////////////////////////////////////////////////////////////////////////////// ↑
			Если  Выборка.ОбщийБонус < МинимальнаяСуммаНачислений_День Тогда
				
				Бонус = МинимальнаяСуммаНачислений_День - Выборка.ОбщийБонус; 
				
				БонусСНДФЛ = Бонус / 0.87;
				
				СтруктураДанных = ПолучитьСтруктуруПолей();
				
				СтруктураДанных.ДатаНачисления 	= Выборка.ДатаНачисления;
				СтруктураДанных.ФизЛицо 		= Выборка.ФизЛицо;
				СтруктураДанных.ТорговаяТочка 	= Выборка.ТорговаяТочка;
				СтруктураДанных.ТипРабот 		= Перечисления.ТипыРаботДляРасчетаЗП.КорректировкаМинЗП;
				СтруктураДанных.Бонус 			= Окр(Бонус, 0, РежимОкругления.Окр15как10);
				СтруктураДанных.БонусСНДФЛ 		= Окр(БонусСНДФЛ, 0, РежимОкругления.Окр15как10);
				
				ДобавитьЗаписьВРегистр_РасчетЗП(СтруктураДанных);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьКонтрольМинимальнойСуммыНачисленийДень()
