
&НаСервере
Перем ADOConnection;


////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Функция ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, ТекстПоляДаты)
	
	ТекстУсловияПоДатам =
	" " + ТекстПоляДаты + " >= '" + Формат(ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	| 	AND " + ТекстПоляДаты + " <= '" + Формат(ДатаОкончания, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
	|";
	
	Возврат ТекстУсловияПоДатам;
	
КонецФункции 

&НаСервере
Функция ПолучитьТаблицуПродаж(ДатаНачала, ДатаОкончания, МассивНоменклатуры, МассивТТВкл, МассивТТИскл) Экспорт
	
	//
	ЕстьОтборПоТТВкл 	= (МассивТТВкл.Количество() > 0);
	ЕстьОтборПоТТИскл 	= (МассивТТИскл.Количество() > 0);
	
	//
	МассивНоменклатуры 	= МассивНоменклатуры;
	МассивТТ 			= МассивТТВкл;
	
	// описание служебных переменных
	мТипЧисло = Новый ОписаниеТипов("Число");
	мТипТТМагазин		= Перечисления.ТипыРозничныхТочек.Магазин;
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	
	//
	ЕстьОсновнойСклад   = Ложь;
	
	//
	СтрокаОтбораТТ			= "(9999999)";
	СтрокаОтбораТТМагазин 	= "(9999999)";
	СтрокаОтбораТТИзбенка 	= "(9999999)";
	
	//
	Для Каждого ТекТорговаяТочка Из МассивТТ Цикл		
		
		//
		СтрокаДобавления = ", (" + Формат(ТекТорговаяТочка.id_tt, "ЧГ=0") + ")";
		Если ТекТорговаяТочка.ТипРозничнойТочки = мТипТТМагазин Тогда
			СтрокаОтбораТТМагазин = СтрокаОтбораТТМагазин + СтрокаДобавления;
		Иначе
			СтрокаОтбораТТИзбенка = СтрокаОтбораТТИзбенка + СтрокаДобавления;
		КонецЕсли;	
		
		//
		СтрокаОтбораТТ = СтрокаОтбораТТ + СтрокаДобавления;
		
	КонецЦикла;
	
	СтрокаОтбораНоменклатура = "(9999999)";
	Для Каждого ТекНоменклатура Из МассивНоменклатуры Цикл		
		СтрокаОтбораНоменклатура = СтрокаОтбораНоменклатура + ", (" + Формат(ТекНоменклатура.id_tov, "ЧГ=0") + ")";
	КонецЦикла;
	
	ТекстУсловияПоДатам1 = ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, "ListUcheta.date_ch");
	ТекстУсловияПоДатам2 = ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, "CheckLine.date_ch");
	ТекстУсловияПоДатам3 = ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, "LostSales.date_ls");
	ТекстУсловияПоДатам4 = ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, "Sales_2013.date_tt");
	ТекстУсловияПоДатам5 = ПолучитьТекстУсловияПоДатам(ДатаНачала, ДатаОкончания, "Sales_2012.date_tt");
	
	
	// получение таблицы из SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"IF OBJECT_ID('tempdb..#tabtovary') IS NOT NULL
	|DROP TABLE #tabtovary
	|;
	|IF OBJECT_ID('tempdb..#tabtorgtochki') IS NOT NULL
	|DROP TABLE #tabtorgtochki
	|;
	|IF OBJECT_ID('tempdb..#tabtorgtochkiizb') IS NOT NULL
	|DROP TABLE #tabtorgtochkiizb
	|;
	|IF OBJECT_ID('tempdb..#tabtorgtochkimag') IS NOT NULL
	|DROP TABLE #tabtorgtochkimag
	|;
	|IF OBJECT_ID('tempdb..#tabuidytov') IS NOT NULL
	|DROP TABLE #tabuidytov
	|;
	|IF OBJECT_ID('tempdb..#tabuidytt') IS NOT NULL
	|DROP TABLE #tabuidytt
	|;
	|IF OBJECT_ID('tempdb..#tabosnovnaya') IS NOT NULL
	|DROP TABLE #tabosnovnaya
	|;
	|CREATE TABLE
	|	#tabtovary (coll int);
	|INSERT INTO
	|	#tabtovary
	|VALUES " + СтрокаОтбораНоменклатура + "
	|;
	|CREATE TABLE
	|	#tabtorgtochki (coll int);
	|INSERT INTO
	|	#tabtorgtochki
	|VALUES " + СтрокаОтбораТТ + "
	|;
	|CREATE TABLE
	|	#tabtorgtochkiizb (coll int);
	|INSERT INTO
	|	#tabtorgtochkiizb
	|VALUES " + СтрокаОтбораТТИзбенка + "
	|;
	|CREATE TABLE
	|	#tabtorgtochkimag (coll int);
	|INSERT INTO
	|	#tabtorgtochkimag
	|VALUES " + СтрокаОтбораТТМагазин + "
	|;
	|SELECT
	|	[id_tov] as ID,
	|	[UID] as UID
	|INTO
	|	#tabuidytov
	|FROM [IzbenkaFin].[dbo].[ArticleBin2UID] (nolock)
	|WHERE
	|	[id_tov] IN (SELECT * FROM #tabtovary)
	|;
	|SELECT
	|	[id_tt] as ID,
	|	[UID] as UID
	|INTO
	|	#tabuidytt
	|FROM [IzbenkaFin].[dbo].[TTBin2UID] (nolock)
	|WHERE
	|	[id_tt] IN (SELECT * FROM #tabtorgtochki)
	|;
	|SELECT
	|	ListUcheta.TTUID AS TTUID,
	|	ListUcheta.TovarUID AS TovarUID,
	|	ListUcheta.rashod_bezSK as kol,
	|	ListUcheta.rashod - ListUcheta.rashod_bezSK as kol_c,
	|	0 as Kol_p
	|INTO
	|	#tabosnovnaya
	|FROM [SMS_IZBENKA].[dbo].[List_ucheta_1C] as ListUcheta (nolock)
	|WHERE" + ТекстУсловияПоДатам1 +
	" AND ListUcheta.id_tov IN (SELECT * FROM #tabtovary)
	| 	AND ListUcheta.id_tt IN (SELECT * FROM #tabtorgtochkiizb)
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidytt.UID,
	|	tabuidytov.UID,
	|	CASE WHEN ABS(CheckLine.Discount - CheckLine.BaseSum) > 1 THEN CheckLine.Quantity * CheckLine.Znak ELSE 0 END,
	|	CASE WHEN ABS(CheckLine.Discount - CheckLine.BaseSum) > 1 THEN 0 ELSE CheckLine.Quantity * CheckLine.Znak END,
	|	0
	|FROM [SMS_Union].[dbo].[CheckLine] as CheckLine (nolock)
	| INNER JOIN
	|	 #tabuidytt as tabuidytt (nolock)
	| ON CheckLine.id_tt_cl = tabuidytt.ID
	| INNER JOIN
	|	 #tabuidytov as tabuidytov (nolock)
	| ON CheckLine.id_tov_cl = tabuidytov.ID
	| WHERE" + ТекстУсловияПоДатам2 +
	"
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidytt.UID,
	|	tabuidytov.UID,
	|	0,
	|	0,
	|	LostSales.lost1
	|FROM [M2].[dbo].[Lost_sales] as LostSales (nolock)
	| INNER JOIN
	|	 #tabuidytt as tabuidytt (nolock)
	| ON LostSales.id_tt_ls = tabuidytt.ID
	| INNER JOIN
	|	 #tabuidytov as tabuidytov (nolock)
	| ON LostSales.id_tov_ls = tabuidytov.ID
	| WHERE" + ТекстУсловияПоДатам3 +
	"
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidytt.UID,
	|	tabuidytov.UID,
	|	Sales_2013.quantity,
	|	Sales_2013.discount50_qty,
	|	0
	|FROM [OLAP].[dbo].[DTT_2013] as Sales_2013 (nolock)
	| INNER JOIN
	|	 #tabuidytt as tabuidytt (nolock)
	| ON Sales_2013.id_tt = tabuidytt.ID
	| INNER JOIN
	|	 #tabuidytov as tabuidytov (nolock)
	| ON Sales_2013.id_tov = tabuidytov.ID
	| WHERE" + ТекстУсловияПоДатам4 +
	"
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidytt.UID,
	|	tabuidytov.UID,
	|	Sales_2012.quantity,
	|	Sales_2012.discount50_qty,
	|	0
	|FROM [OLAP].[dbo].[DTT_2012] as Sales_2012 (nolock)
	| INNER JOIN
	|	 #tabuidytt as tabuidytt (nolock)
	| ON Sales_2012.id_tt = tabuidytt.ID
	| INNER JOIN
	|	 #tabuidytov as tabuidytov (nolock)
	| ON Sales_2012.id_tov = tabuidytov.ID
	| WHERE" + ТекстУсловияПоДатам5 +
	"
	|;
	|SELECT
	|	tabosnovnaya.TTUID as TTUID,
	|	tabosnovnaya.TovarUID as TovarUID,
	|	SUM(tabosnovnaya.Kol) as kol,
	|	SUM(tabosnovnaya.kol_c) as kol_c,
	|	SUM(tabosnovnaya.Kol_p) as Kol_p
	|FROM 
	|	#tabosnovnaya as tabosnovnaya (nolock)
	|GROUP BY 
	|	tabosnovnaya.TTUID,
	|	tabosnovnaya.TovarUID
	|;
	|DROP TABLE
	|	#tabtovary
	|;
	|DROP TABLE
	|	#tabtorgtochki
	|;
	|DROP TABLE
	|	#tabtorgtochkiizb
	|;
	|DROP TABLE
	|	#tabtorgtochkimag
	|;
	|DROP TABLE
	|	#tabuidytov
	|;
	|DROP TABLE
	|	#tabuidytt
	|;
	|DROP TABLE
	|	#tabosnovnaya";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("Дата"				, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ТорговаяТочка"		, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("Количество"			, мТипЧисло);
	ТабДанные.Колонки.Добавить("Количество_с"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("Количество_п"		, мТипЧисло);
	
	//
	Пока НЕ Выборка = Неопределено Цикл
		
		//
		Если Выборка.Fields.Count > 0 Тогда
			
			//
			Пока НЕ Выборка.EOF Цикл
				
				//
				НоваяСтрока = ТабДанные.Добавить();
				
				//
				Если НЕ Выборка.Fields("TovarUID").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Сред(Выборка.Fields("TovarUID").Value, 2, 36));
					НоваяСтрока.Номенклатура = СпрНоменклатура.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				
				//
				Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Сред(Выборка.Fields("TTUID").Value, 2, 36));
					НоваяСтрока.ТорговаяТочка = СпрТорговыеТочки.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				
				//
				НоваяСтрока.Количество 		= Выборка.Fields("kol").Value;
				НоваяСтрока.Количество_с 	= Выборка.Fields("kol_c").Value;
				НоваяСтрока.Количество_п 	= Выборка.Fields("kol_p").Value;
				
				//
				Если НЕ Выборка.EOF Тогда 
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//
		Выборка = Выборка.NextRecordSet();
		
	КонецЦикла;
	
	//
	ADOСоединение.Close();		
	
	// присоединение поставщика (производителя то есть)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ТекущаяДата() + 86400));
	Запрос.УстановитьПараметр("ТабДанные"			, ТабДанные);
	Запрос.УстановитьПараметр("МассивТТ"			, МассивТТ);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, МассивНоменклатуры);
	
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабДанные.Дата КАК Дата,
	|	ТабДанные.Номенклатура КАК Номенклатура,
	|	ТабДанные.ТорговаяТочка КАК ТорговаяТочка,
	|	ТабДанные.Количество КАК Количество,
	|	ТабДанные.Количество_с КАК Количество_с,
	|	ТабДанные.Количество_п КАК Количество_п
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	&ТабДанные КАК ТабДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводителиТоваров.Объект КАК Объект,
	|	ПроизводителиТоваров.Значение КАК Производитель
	|ПОМЕСТИТЬ ВТПроизводители
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|ГДЕ
	|	ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец В (&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПроизводители.Производитель КАК Производитель
	|ПОМЕСТИТЬ ВТТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаАссортимента, ) КАК ТоварныйАссортиментТочек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроизводители КАК ВТПроизводители
	|		ПО (ВТПроизводители.Объект = ТоварныйАссортиментТочек.Характеристика)
	|ГДЕ
	|	ТоварныйАссортиментТочек.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ ТоварныйАссортиментТочек.Номенклатура.Выведена
	|	И НЕ ТоварныйАссортиментТочек.Номенклатура.Порядок = 0
	|	И ТоварныйАссортиментТочек.ТорговаяТочка В(&МассивТТ)
	|	И НЕ ТоварныйАссортиментТочек.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТоварныйАссортиментТочек.Производитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель,
	|	СУММА(ВТДанные.Количество) КАК Количество_пр,
	|	СУММА(ВТДанные.Количество_с) КАК Количество_с,
	|	СУММА(ВТДанные.Количество_п) КАК Количество_пот
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварныйАссортимент КАК ТоварныйАссортиментТочек
	|		ПО (ТоварныйАссортиментТочек.ТорговаяТочка = ВТДанные.ТорговаяТочка)
	|			И (ТоварныйАссортиментТочек.Номенклатура = ВТДанные.Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.Номенклатура,
	|	ЕСТЬNULL(ТоварныйАссортиментТочек.Производитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПроизводители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТоварныйАссортимент";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция _ПолучитьФактПродаж(Номенклатура, Технолог, ПлановаяДата) Экспорт
	
	//
	РезультатКоличество = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	УЕК_ПланыПродажПоДнямНедели.ДатаВыставленияПлана
	     |ИЗ
	     |	РегистрСведений.УЕК_ПланыПродажПоДнямНедели КАК УЕК_ПланыПродажПоДнямНедели
	     |ГДЕ
	     |	УЕК_ПланыПродажПоДнямНедели.Дата = &Дата
	     |	И УЕК_ПланыПродажПоДнямНедели.Номенклатура = &Номенклатура
	     |	И УЕК_ПланыПродажПоДнямНедели.Технолог = &Технолог";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", НачалоДня(ПлановаяДата));
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("Технолог", Технолог);
	
	//
	ПЗ.Выполнить();
	
	//
	ДатаВыставленияПлана = ПлановаяДата;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	
		//
		ДатаВыставленияПлана = Выборка.ДатаВыставленияПлана;
	
	КонецЕсли; 
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	     |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	     |	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот
	     |ПОМЕСТИТЬ ТЗ_Продажи
	     |ИЗ
	     |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(
	     |			&НачалоПериода,
	     |			&КонецПериода,
	     |			,
	     |			ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Продажа)
	     |				И Номенклатура = &Номенклатура
	     |				И СтруктурнаяЕдиница.ДатаОткрытия < &ДатаВыставленияПлана) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(КОНЕЦПЕРИОДА(&ПлановаяДата, НЕДЕЛЯ), ) КАК ТоварныйАссортиментТочекСрезПоследних
	     |		ПО ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	     |			И ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	     |ГДЕ
	     |	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	     |	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	     |	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	     |	СУММА(ТаблицаНоменклатура.КоличествоОборот) КАК КоличествоОборот
	     |ПОМЕСТИТЬ ТЗ_Номенклатура
	     |ИЗ
	     |	ТЗ_Продажи КАК ТаблицаНоменклатура
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	     |		ПО ТаблицаНоменклатура.Характеристика = ЗначенияСвойствОбъектов.Объект
	     |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТаблицаНоменклатура.Номенклатура,
	     |	ТаблицаНоменклатура.Характеристика,
	     |	ЗначенияСвойствОбъектов.Значение
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ТЗ_Номенклатура.Номенклатура КАК Ссылка,
	     |	ТЗ_Номенклатура.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |	КОНЕЦ КАК Роль,
	     |	СУММА(-ТЗ_Номенклатура.КоличествоОборот) КАК Количество
	     |ИЗ
	     |	ТЗ_Номенклатура КАК ТЗ_Номенклатура
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Характеристика
	     |		ПО (ТЗ_Номенклатура.Характеристика = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Характеристика.Объект КАК Справочник.ХарактеристикиНоменклатуры)))
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Производитель
	     |		ПО (ТЗ_Номенклатура.Производитель = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Производитель.Объект КАК Справочник.Контрагенты)))
	     |ГДЕ
	     |	ВЫБОР
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |		КОНЕЦ = &Технолог
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТЗ_Номенклатура.Номенклатура,
	     |	ТЗ_Номенклатура.Номенклатура.ЭтоГруппа,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |	КОНЕЦ";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("Технолог", Технолог);
	ПЗ.Параметры.Вставить("ПлановаяДата", ПлановаяДата);
	ПЗ.Параметры.Вставить("ДатаВыставленияПлана", ДатаВыставленияПлана);
	
	//
	НачалоПериода = НачалоДня(ПлановаяДата - 7*24*60*60);
	КонецПериода = КонецДня(ПлановаяДата);
	
	//
	ПЗ.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПЗ.Параметры.Вставить("КонецПериода", КонецПериода);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатКоличество = Выборка.Количество;
	
	КонецЕсли; 
	
	//
	Возврат РезультатКоличество;
	
КонецФункции

&НаСервере
Функция ПолучитьФактПродаж(Номенклатура, Технолог, ПлановаяДата, ДатаВыставленияПлана) Экспорт
	
	//
	РезультатКоличество = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	     |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	     |	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	     |	СУММА(ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот) КАК КоличествоОборот
	     |ПОМЕСТИТЬ ТЗ_Продажи
	     |ИЗ
	     |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(
	     |			&НачалоПериода,
	     |			&КонецПериода,
	     |			,
	     |			ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Продажа)
	     |				И Номенклатура = &Номенклатура
	     |				И СтруктурнаяЕдиница.ДатаОткрытия < &ДатаВыставленияПлана) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(КОНЕЦПЕРИОДА(&ПлановаяДата, НЕДЕЛЯ), ) КАК ТоварныйАссортиментТочекСрезПоследних
	     |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	     |			ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	     |				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	     |		ПО ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	     |			И ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	     |			И (НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена)
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	     |	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	     |	ЗначенияСвойствОбъектов.Значение
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ТЗ_Номенклатура.Номенклатура КАК Ссылка,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |	КОНЕЦ КАК Роль,
	     |	СУММА(-ТЗ_Номенклатура.КоличествоОборот) КАК Количество
	     |ИЗ
	     |	ТЗ_Продажи КАК ТЗ_Номенклатура
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Характеристика
	     |		ПО (ТЗ_Номенклатура.Характеристика = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Характеристика.Объект КАК Справочник.ХарактеристикиНоменклатуры)))
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Производитель
	     |		ПО (ТЗ_Номенклатура.Производитель = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Производитель.Объект КАК Справочник.Контрагенты)))
	     |ГДЕ
	     |	ВЫБОР
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |		КОНЕЦ = &Технолог
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТЗ_Номенклатура.Номенклатура,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |	КОНЕЦ";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("Технолог", Технолог);
	ПЗ.Параметры.Вставить("ПлановаяДата", ПлановаяДата);
	ПЗ.Параметры.Вставить("ДатаВыставленияПлана", ДатаВыставленияПлана);
	
	//
	НачалоПериода = НачалоДня(ПлановаяДата - 7*24*60*60);
	КонецПериода = КонецДня(ПлановаяДата);
	
	//
	ПЗ.Параметры.Вставить("НачалоПериода", НачалоПериода);
	ПЗ.Параметры.Вставить("КонецПериода", КонецПериода);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатКоличество = Выборка.Количество;
	
	КонецЕсли; 
	
	//
	Возврат РезультатКоличество;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Выполняет поиск элемента отбора в коллекции по заданному представлению
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе
//  Представление строка - представление группы
//
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

//
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Функции для работы с отборами и параметрами динамических списков
//

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп)
//  Представление - Строка - представление поля компоновки
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы
//  Представление      - Строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	Если ТипЗнч(КоллекцияЭлементов) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		КоллекцияЭлементов = КоллекцияЭлементов.Элементы;
	КонецЕсли;
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Представление           - Строка - представление элемента компоновки данных
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  Представление           - Строка - представление элемента компоновки данных
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Удалить элементы отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьУдаления - контейнер с элементами и группами отбора, например
//                    Список.Отбор или группа в отборе
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп)
//  Представление   - Строка - представление поля компоновки
//
Процедура УдалитьЭлементыГруппыОтбора(Знач ОбластьУдаления, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьУдаления.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Родитель = Неопределено Тогда
			ОбластьУдаления.Элементы.Удалить(Элемент);
		Иначе
			Элемент.Родитель.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Представление           - Строка - представление элемента компоновки данных
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								знач РежимОтображения = Неопределено,
								знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//  ДинамическийСписок      - ДинамическийСписок - реквизит формы, для которого требуется установить отбор.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда)
//  ПравоеЗначение          - произвольный - сравниваемое значение
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения
//  Представление           - Строка - представление элемента компоновки данных
//  Использование           - Булево - использование элемента
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Удалить элемент группы отбора динамического списка.
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - реквизит формы, для которого требуется установить отбор.
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп)
//  Представление   - Строка - представление поля компоновки
//
Процедура УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля = Неопределено, Представление = Неопределено) Экспорт
	
	ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	УдалитьЭлементыГруппыОтбора(ОтборДинамическогоСписка, ИмяПоля, Представление);
	
КонецПроцедуры

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка
//  Значение        - проивольный        - новое значение параметра
//  Использование   - Булево             - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметраКомпоновкиДанных = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		Если Использование И ЗначениеПараметраКомпоновкиДанных.Значение <> Значение Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение = Значение;
		КонецЕсли;
		Если ЗначениеПараметраКомпоновкиДанных.Использование <> Использование Тогда
			ЗначениеПараметраКомпоновкиДанных.Использование = Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, Использование = Истина, ВидСравнения = Неопределено) Экспорт
	
	НаборЭлементов = Список.Отбор;
	УстановитьЭлементОтбора(НаборЭлементов,ИмяПоля,ПравоеЗначение,ВидСравнения,,Использование);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

//////////////////////////////////////////////////////////////
//ADO

//
//
&НаСервере
Функция ADO_Execute(ADOСоединение, ТекстЗапроса) Экспорт
	
	//
	Попытка
		ADORecordSet = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ADORecordSet = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADORecordSet;
	
КонецФункции	

//
//
&НаСервере
Функция ADO_Connection(СтрокаПоключения) Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрокаПоключения;
	
	//
	Попытка
		ADOСоединение.Open();
	Исключение
		ADOСоединение = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADOСоединение;
	
КонецФункции

//////////////////////////////////////////////////////////////
//ADO->1C

&НаСервере
Функция ПреобразоватьРезультатВТаблицуЗначений(rsTABLE) Экспорт
	
	//
	КоличествоПолейТаблица = rsTABLE.fields.Count - 1;
	
	//
	ТаблицаПоискаТаблица = Новый массив;
    Если (НЕ rsTABLE.EOF) Тогда
        ТаблицаПоискаТаблица = rsTABLE.GetRows().Выгрузить();
	КонецЕсли;
	
	//
	Если ТаблицаПоискаТаблица.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//
	тзРезультат = Новый ТаблицаЗначений;
	
	//
	Для сч = 0 По КоличествоПолейТаблица Цикл
		
		//
		массив = Новый Массив;
		
		//
		флНайденТип = Ложь;
		
		//
		Для к = 0 По ТаблицаПоискаТаблица.Количество() - 1 Цикл
			Если ТипЗнч(ТаблицаПоискаТаблица[к][сч]) <> Тип("Null") Тогда
				массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[к][сч]));
				флНайденТип = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флНайденТип Тогда
			массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
		КонецЕсли;
		
        тзРезультат.Колонки.Добавить(rsTABLE.fields.item(сч).name,Новый ОписаниеТипов(массив));
    КонецЦикла;

    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
        стр=тзРезультат.Добавить();
        Для сч = 0 По КоличествоПолейТаблица Цикл
			попытка
				стр[сч] = СокрЛП(стрТаблица[сч]);				
            исключение
               	сообщить(ОписаниеОшибки());
			конецпопытки;			
        КонецЦикла;
	КонецЦикла;
	Возврат тзРезультат;
КонецФункции



&НаСервере
Функция RecordSet_в_ТаблицуЗначений(RecordSet, ОписаниеИсточникаДанных, Периодичность = Неопределено) Экспорт 
	
	//
	РезультатТЗ = Новый ТаблицаЗначений;
	
	//
	Для Каждого Field Из RecordSet.Fields Цикл
		
		//
		Тип = Неопределено;
		
		//
		НайденнаяСтрока = ОписаниеИсточникаДанных.Найти(Field.Name, "ИмяПоля");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			//
			Попытка
				Тип = НайденнаяСтрока.Тип;
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(Тип) Тогда
			РезультатТЗ.Колонки.Добавить(Field.Name, Тип);	
		Иначе	
			РезультатТЗ.Колонки.Добавить(Field.Name);
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	стСоответствиеДатИНомеровНедель = Новый Соответствие;
	
	//
	Если НЕ RecordSet.BOF Тогда
		
		//
		RecordSet.MoveFirst();
		
	КонецЕсли;	
	
	//
	КоличествоПолей = RecordSet.Fields.Count();
		
	//
	Пока НЕ RecordSet.EOF Цикл
		
		//
		НоваяСтрока = РезультатТЗ.Добавить();
		
		//
		Для Индекс = 0 По РезультатТЗ.Колонки.Количество() Цикл
			
			//
			Если Индекс = КоличествоПолей Тогда
				Прервать;
			КонецЕсли;	
			
			//
			Колонка = РезультатТЗ.Колонки[Индекс];
			
			//
			ПоляADO = RecordSet.Fields;
			
			//
			Item = ПоляADO.Item(Индекс);
			
			//
			Значение = Item.Value;
			
			//	
			НоваяСтрока[Индекс] = Значение;
			
		КонецЦикла;	
		
		//
		Если НЕ RecordSet.EOF Тогда 
			RecordSet.MoveNext();
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат РезультатТЗ;
	
КонецФункции	

&НаСервере
Функция ПолучитьRecordset_ФактическиеПродажи()
	
	//
	_RS = Неопределено;
	
	//
	СтрокаПоключения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL("{SQL Server}", , "IzbenkaFin", , , "LANGUAGE=русский");
	ADOConnection = ADO_Connection(СтрокаПоключения);
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	УЕК_ПланыПродажПоДнямНедели.Номенклатура.id_tov КАК id_tov,
	     |	УЕК_ПланыПродажПоДнямНедели.НомерНеделиВыставленияПлана КАК НомерНеделиВыставленияПлана
	     |ИЗ
	     |	РегистрСведений.УЕК_ПланыПродажПоДнямНедели КАК УЕК_ПланыПродажПоДнямНедели
	     |ГДЕ
	     |	(НАЧАЛОПЕРИОДА(УЕК_ПланыПродажПоДнямНедели.Дата, НЕДЕЛЯ) = &НачалоТекущейНедели
	     |			ИЛИ ИСТИНА)
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	ВыкладкаПланограммы.Номенклатура.id_tov,
	     |	0
	     |ИЗ
	     |	РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	     |ГДЕ
	     |	НЕ ВыкладкаПланограммы.ТоварВыведен
	     |	И НЕ ВыкладкаПланограммы.Планограмма.НеАктуальная
	     |	И ЕСТЬNULL(ВыкладкаПланограммы.Номенклатура.id_tov, 0) <> 0
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	НомерНеделиВыставленияПлана,
	     |	id_tov";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НачалоТекущейНедели", НачалоНедели(ТекущаяДата()));
	
	//
	ПЗ.Выполнить();
	
	
	//
	стрЗначения = "";
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		стрЗначения = стрЗначения + "(" + Формат(Выборка.id_tov, "ЧН=0; ЧГ=") + "," + Формат(Выборка.НомерНеделиВыставленияПлана, "ЧН=0; ЧГ=") + ")";
		стрЗначения = стрЗначения + ",";
	
	КонецЦикла; 
	
	//
	Если ЗначениеЗаполнено(стрЗначения) Тогда
		
		//
		стрЗначения = Лев(стрЗначения, СтрДлина(стрЗначения)-1);
		
		//
		_QueryText = "SELECT 
					|     DTK_am.Nedely_base AS _BaseWeek,
					|     DTK_am.id_tov AS _id_tov,
					|     DTK_am.id_kont AS _id_kont,
					|     SUM(DTK_am.q) AS _quantity,
					|     SUM(DTK_am.s) AS _sum
					|FROM [Reports].[dbo].[DTK_am] AS DTK_am
					|	INNER JOIN (SELECT * FROM (VALUES #VALUES#) AS _Filter(f1,f2)) AS _table 
					|	ON DTK_am.id_tov = _table.f1 AND DTK_am.Nedely_base = _table.f2
					|WHERE
					|	DTK_am.date >= &date1 AND DTK_am.date <= &date2
					|GROUP BY	
					|	DTK_am.Nedely_base,
					|	DTK_am.id_tov,
					|	DTK_am.id_kont";
		//
		_QueryText = СтрЗаменить(_QueryText, "#VALUES#", стрЗначения); 
		_QueryText = СтрЗаменить(_QueryText, "&date1", "'" + Формат(ФактНачалоПериода, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'"); 
		_QueryText = СтрЗаменить(_QueryText, "&date2", "'" + Формат(ФактКонецПериода, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'"); 
		
		//
		_RS = ADO_Execute(ADOConnection, _QueryText);
	
	КонецЕсли; 
	
	//
	Возврат _RS;
	
КонецФункции	

&НаСервере
Процедура СформироватьТаблицуФактическийПродаж()
	
	//
	ТЗ = Неопределено;
	
	//
	RS = ПолучитьRecordset_ФактическиеПродажи();
	Если RS <> Неопределено Тогда
		ТЗ = ПреобразоватьРезультатВТаблицуЗначений(RS);
	КонецЕсли;
	
	
	//
	Если ТЗ = Неопределено Тогда
	
		//
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("_BaseWeek", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("_id_tov", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("_id_kont", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("_quantity", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("_sum", Новый ОписаниеТипов("Число"));
		
	КонецЕсли; 
	
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЗ._BaseWeek,
	               |	ТЗ._id_tov,
	               |	ТЗ._id_kont,
	               |	ТЗ._quantity,
	               |	ТЗ._sum
	               |ПОМЕСТИТЬ ТЗ_Продажи_
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_Продажи._BaseWeek КАК BaseWeek,
	               |	ТЗ_Продажи._id_tov КАК id_tov,
	               |	ТЗ_Продажи._id_kont КАК id_kont,
	               |	ТЗ_Продажи._quantity КАК quantity,
	               |	ТЗ_Продажи._sum КАК sum
	               |ПОМЕСТИТЬ ТЗ_Продажи
	               |ИЗ
	               |	ТЗ_Продажи_ КАК ТЗ_Продажи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	               |	ЗначенияСвойствОбъектов_Производители.Значение КАК Производитель,
	               |	ТЗ_Продажи.BaseWeek,
	               |	ТЗ_Продажи.quantity,
	               |	ТЗ_Продажи.sum
	               |ПОМЕСТИТЬ ТЗ_Номенклатура
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов_Производители
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов_Производители.Объект
	               |			И (ЗначенияСвойствОбъектов_Производители.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Продажи КАК ТЗ_Продажи
	               |		ПО ХарактеристикиНоменклатуры.Владелец.id_tov = ТЗ_Продажи.id_tov
	               |			И (ЗначенияСвойствОбъектов_Производители.Значение.ИД = ТЗ_Продажи.id_kont)
	               |ГДЕ
	               |	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_Номенклатура.Номенклатура,
	               |	ТЗ_Номенклатура.Характеристика,
	               |	ТЗ_Номенклатура.Производитель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	               |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	               |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	               |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	               |	КОНЕЦ КАК Роль,
	               |	ТЗ_Номенклатура.BaseWeek,
	               |	ТЗ_Номенклатура.quantity,
	               |	ТЗ_Номенклатура.sum
	               |ПОМЕСТИТЬ ТЗ_НоменклатураРоль
	               |ИЗ
	               |	ТЗ_Номенклатура КАК ТЗ_Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Характеристика
	               |		ПО (ТЗ_Номенклатура.Характеристика = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Характеристика.Объект КАК Справочник.ХарактеристикиНоменклатуры)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРоль_Производитель
	               |		ПО (ТЗ_Номенклатура.Производитель = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Производитель.Объект КАК Справочник.Контрагенты)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_НоменклатураРоль.Номенклатура КАК Номенклатура,
	               |	ТЗ_НоменклатураРоль.Роль КАК Роль,
	               |	ТЗ_НоменклатураРоль.BaseWeek КАК BaseWeek,
	               |	СУММА(ТЗ_НоменклатураРоль.quantity) КАК quantity,
	               |	СУММА(ТЗ_НоменклатураРоль.sum) КАК sum
	               |ИЗ
	               |	ТЗ_НоменклатураРоль КАК ТЗ_НоменклатураРоль
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗ_НоменклатураРоль.Номенклатура,
	               |	ТЗ_НоменклатураРоль.Роль,
	               |	ТЗ_НоменклатураРоль.BaseWeek
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Роль,
	               |	Номенклатура,
	               |	BaseWeek";
		 
	//
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	//
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	//
	Результат = Запрос.Выполнить();
	
	//
	ТЗ_ФактическиеПродажи.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры	


///////////////////////////////////////////////

&НаСервере
Функция ПолучитьНомерНеделиПоДате(Дата)
	
	//
	РезультатНомерНедели = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеДатДнямНедели.НомерНедели
	     |ИЗ
	     |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	     |ГДЕ
	     |	СоответствиеДатДнямНедели.Дата = &Дата";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", НачалоДня(Дата));
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатНомерНедели = Выборка.НомерНедели;
	
	КонецЕсли; 
	
	//
	Возврат РезультатНомерНедели;

КонецФункции // ()

&НаСервере
Функция ПолучитьДатуПоНомеруНедели(НомерНедели)
	
	//
	РезультатДата = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеДатДнямНедели.Дата
	     |ИЗ
	     |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	     |ГДЕ
	     |	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НомерНедели", НомерНедели);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатДата = Выборка.Дата;
	
	КонецЕсли; 
	
	//
	Возврат РезультатДата;

КонецФункции // ()

&НаСервере
Процедура ДеревоНоменклатурыДополнитьСтроку(Выборка, СтрокаДЗ)
	
	//
	Если ТипЗнч(СтрокаДЗ.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		//
		Если ЗначениеЗаполнено(СтрокаДЗ.Ссылка)
			И ЗначениеЗаполнено(СтрокаДЗ.Роль)
			И СтрокаДЗ.ПризнакЭтоГруппа <> Истина Тогда
			
			//
			СП = Новый Структура;
			СП.Вставить("Номенклатура", СтрокаДЗ.Ссылка);
			СП.Вставить("Роль", СтрокаДЗ.Роль);
			СП.Вставить("BaseWeek", СтрокаДЗ.НомерНеделиВыставленияПлана);
			
			//
			НайденныеСтроки = ТЗ_ФактическиеПродажи.НайтиСтроки(СП);
			
			//
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаДЗ.КоличествоФакт = НайденныеСтроки[0].quantity;
				СтрокаДЗ.СуммаФакт = НайденныеСтроки[0].sum;
			
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(СтрокаДЗ.КоличествоПлан) Тогда
				СтрокаДЗ.ОтклонениеКоличество = 100*(СтрокаДЗ.КоличествоФакт - СтрокаДЗ.КоличествоПлан)	/ СтрокаДЗ.КоличествоПлан;
			КонецЕсли; 
			
			//
			Если ЗначениеЗаполнено(СтрокаДЗ.СуммаПлан) Тогда
				СтрокаДЗ.ОтклонениеСумма = 100*(СтрокаДЗ.СуммаФакт - СтрокаДЗ.СуммаПлан) / СтрокаДЗ.СуммаПлан;
			КонецЕсли; 	
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДеревоНоменклатурыДобавитьСтроку(ДеревоРодитель, Знач Корень)
	
	//
	Строки = Корень.ПолучитьЭлементы();
	
	//
	ТекущаяВыборка = ДеревоРодитель.Строки;
	Для каждого СтрокаТЧ Из ТекущаяВыборка Цикл
		
		//
		Если СтрокаТЧ.ЭтоГруппа = Ложь И СтрокаТЧ.Строки.Количество() > 0 Тогда
			
			//
			ДеревоНоменклатурыДобавитьСтроку(СтрокаТЧ, Корень);
			Продолжить;
		
		КонецЕсли;	
		
		//
		НоваяСтрока = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		//
		Если СтрокаТЧ.Роль <> NULL 
			И СтрокаТЧ.ПризнакВажная = NULL  
			И СтрокаТЧ.Ссылка = NULL  Тогда
			
			//
			НоваяСтрока.Ссылка = СтрокаТЧ.Роль;
			НоваяСтрока.ПризнакЭтоРоль = Истина;			
			
		КонецЕсли;	
		
		//
		Если СтрокаТЧ.ПризнакВажная <> NULL  
			И СтрокаТЧ.Ссылка = NULL  Тогда
			
			//
			НоваяСтрока.Ссылка = СтрокаТЧ.ПризнакВажная;
			НоваяСтрока.ПризнакЭтоВажность = Истина;
			
		КонецЕсли;	
		
		//
		НоваяСтрока.ПризнакЭтоГруппа = СтрокаТЧ.ЭтоГруппа;  
		НоваяСтрока.Уровень = СтрокаТЧ.Уровень();  
		
		//
		НоваяСтрока.ПризнакЭтоНоменклатура = (ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.Номенклатура"));
		
		//
		ДеревоНоменклатурыДополнитьСтроку(СтрокаТЧ, НоваяСтрока);
		
		//
		Если СтрокаТЧ.ПризнакВажная = Ложь
			И СтрокаТЧ.Ссылка = NULL  Тогда
			
			//
			Продолжить;
			
		КонецЕсли;	
			
		//
		ДеревоНоменклатурыДобавитьСтроку(СтрокаТЧ, НоваяСтрока);
	
	КонецЦикла; 
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДеревоНоменклатуры(ТекущаяРоль)
	
	//
	СформироватьТаблицуФактическийПродаж();
	
	//
	ДеревоНоменклатура.ПолучитьЭлементы().Очистить();
		 
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ТаблицаНоменклатура.Ссылка КАК Номенклатура,
	     |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	     |	ЗначенияСвойствОбъектов.Значение КАК Производитель
	     |ПОМЕСТИТЬ ТЗ_Номенклатура
	     |ИЗ
	     |	Справочник.Номенклатура КАК ТаблицаНоменклатура
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыкладкаПланограммы КАК ВыкладкаПланограммы
	     |		ПО ТаблицаНоменклатура.Ссылка = ВыкладкаПланограммы.Номенклатура
	     |			И (НЕ ВыкладкаПланограммы.ТоварВыведен)
	     |			И (НЕ ВыкладкаПланограммы.Планограмма.НеАктуальная)
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	     |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	     |			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	     |				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	     |		ПО ТаблицаНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	ТЗ_Номенклатура.Номенклатура КАК Ссылка,
	     |	ТЗ_Номенклатура.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |		КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |	КОНЕЦ КАК Роль
	     |ПОМЕСТИТЬ ТЗ_НоменклатураРоль
	     |ИЗ
	     |	ТЗ_Номенклатура КАК ТЗ_Номенклатура
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРоль_Характеристика
	     |		ПО (ТЗ_Номенклатура.Характеристика = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Характеристика.Объект КАК Справочник.ХарактеристикиНоменклатуры)))
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРоль_Производитель
	     |		ПО (ТЗ_Номенклатура.Производитель = (ВЫРАЗИТЬ(СоответствиеОбъектРоль_Производитель.Объект КАК Справочник.Контрагенты)))
	     |{ГДЕ
	     |	(ВЫБОР
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Характеристика.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Характеристика.РольПользователя
	     |			КОГДА ЕСТЬNULL(СоответствиеОбъектРоль_Производитель.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |				ТОГДА СоответствиеОбъектРоль_Производитель.РольПользователя
	     |		КОНЕЦ).* КАК Роль}
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТаблицаНоменклатура.Родитель КАК Группа,
	     |	ТаблицаНоменклатура.Ссылка КАК Ссылка,
	     |	ТаблицаНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	     |	ВЫБОР
	     |		КОГДА ЕСТЬNULL(ТЗ_НоменклатураРоль.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	     |			ТОГДА 1000
	     |		ИНАЧЕ 0
	     |	КОНЕЦ КАК РольПорядок,
	     |	ЕСТЬNULL(ТЗ_НоменклатураРоль.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК Роль,
	     |	УЕК_ПланыПродажПоДнямНедели.Количество КАК КоличествоПлан,
	     |	УЕК_ПланыПродажПоДнямНедели.Сумма КАК СуммаПлан,
	     |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) КАК ПризнакВажная,
	     |	УЕК_ПланыПродажПоДнямНедели.Дата,
	     |	УЕК_ПланыПродажПоДнямНедели.НомерНедели,
	     |	УЕК_ПланыПродажПоДнямНедели.ДатаВыставленияПлана,
	     |	УЕК_ПланыПродажПоДнямНедели.НомерНеделиВыставленияПлана,
	     |	УЕК_ПланыПродажПоДнямНедели.Автор
	     |ИЗ
	     |	Справочник.Номенклатура КАК ТаблицаНоменклатура
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_НоменклатураРоль КАК ТЗ_НоменклатураРоль
	     |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УЕК_ПланыПродажПоДнямНедели КАК УЕК_ПланыПродажПоДнямНедели
	     |			ПО ТЗ_НоменклатураРоль.Ссылка = УЕК_ПланыПродажПоДнямНедели.Номенклатура
	     |				И ТЗ_НоменклатураРоль.Роль = УЕК_ПланыПродажПоДнямНедели.Технолог
	     |				И (НАЧАЛОПЕРИОДА(УЕК_ПланыПродажПоДнямНедели.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(&Период, НЕДЕЛЯ))
	     |		ПО (ТЗ_НоменклатураРоль.Ссылка = ТаблицаНоменклатура.Ссылка)
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	     |		ПО ТаблицаНоменклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
	     |			И (ЗначенияСвойствОбъектов.Свойство.Код = ""_IMPT_"")
	     |{УПОРЯДОЧИТЬ ПО
	     |	РольПорядок,
	     |	Роль.*,
	     |	Группа.*,
	     |	Ссылка.*,
	     |	ПризнакВажная.*}
	     |ИТОГИ
	     |	МАКСИМУМ(РольПорядок)
	     |ПО
	     |	Роль
	     |{ИТОГИ ПО
	     |	Роль.*,
	     |	Группа.*,
	     |	Ссылка.*,
	     |	ПризнакВажная.*}";		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Период", ТекущаяДата());
	
	//
	Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("Роль");	
		ЭлементОтбора.Установить(ТекущаяРоль);
	
	КонецЕсли; 
	
	//
	ПризнакРоль = Ложь;
	ПризнакВажная = Ложь;
	ПризнакГруппа = Ложь;
	ПризнакНоменклатура = Ложь;
		
	//
	Для каждого СтрокаТЗ Из НастройкаГруппировок Цикл
			
		//
		Если СтрокаТЗ.Значение = "Роль" Тогда
			
			//
			ПризнакРоль = СтрокаТЗ.Пометка;
			
			//
		ИначеЕсли СтрокаТЗ.Значение = "ПризнакВажная" Тогда
			
			//
			ПризнакВажная = СтрокаТЗ.Пометка;
			
		ИначеЕсли СтрокаТЗ.Значение = "ГруппаНоменклатуры" Тогда
			
			//
			ПризнакГруппа = СтрокаТЗ.Пометка;
			
		ИначеЕсли СтрокаТЗ.Значение = "Номенклатура" Тогда
			
			//
			ПризнакНоменклатура = СтрокаТЗ.Пометка;	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	ПЗ.Измерения.Очистить();
	
	//
	ПЗ.Порядок.Добавить("РольПорядок");
	
	//
	Если ПризнакРоль Тогда
		
		//
		ЭлементГруппировки = ПЗ.Измерения.Добавить("Роль", "Роль", ТипИзмеренияПостроителяЗапроса.Элементы);
		ПЗ.Порядок.Добавить("Роль.Наименование");
		
	КонецЕсли;
	
	//
	Если ПризнакВажная Тогда
		
		//
		ЭлементГруппировки = ПЗ.Измерения.Добавить("ПризнакВажная", "ПризнакВажная", ТипИзмеренияПостроителяЗапроса.Элементы);
		ПЗ.Порядок.Добавить("ПризнакВажная",,,НаправлениеСортировки.Убыв);
		
	КонецЕсли;
	
	//
	Если ПризнакГруппа И ПризнакНоменклатура Тогда
		
		//
		ЭлементГруппировки = ПЗ.Измерения.Добавить("Ссылка", "Ссылка", ТипИзмеренияПостроителяЗапроса.Иерархия);
		
		//
	ИначеЕсли ПризнакГруппа Тогда
		
		//
		ЭлементГруппировки = ПЗ.Измерения.Добавить("Ссылка", "Ссылка", ТипИзмеренияПостроителяЗапроса.ТолькоИерархия);
		
		//
	ИначеЕсли ПризнакНоменклатура Тогда
		
		//
		Если СтрокаТЗ.ПризнакВыводитьИерархию Тогда
			
			//
			ЭлементГруппировки = ПЗ.Измерения.Добавить("Ссылка", "Ссылка", ТипИзмеренияПостроителяЗапроса.Иерархия);						
			ПЗ.Порядок.Добавить("Ссылка.Наименование",,,НаправлениеСортировки.Возр);
			
		Иначе			
			
			//
			ЭлементГруппировки = ПЗ.Измерения.Добавить("Ссылка", "Ссылка", ТипИзмеренияПостроителяЗапроса.Элементы);						
			ПЗ.Порядок.Добавить("Ссылка.Наименование",,,НаправлениеСортировки.Возр);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	//
	ПЗ.Выполнить();
	
	//
	РезультатДерево = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	//
	ДеревоНоменклатурыДобавитьСтроку(РезультатДерево, ДеревоНоменклатура);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДеревоСообщений(Знач ТекущаяРоль, Знач ТекущаяНоменклатура, Знач КоличествоСообщений = 3)
	
	////
	//ТЗ = "ВЫБРАТЬ
	//	 |	СообщениеМОС.Дата,
	//	 |	СообщениеМОС.Номер,
	//	 |	СообщениеМОС.ТипСообщения,
	//	 |	СообщениеМОС.Тема,
	//	 |	СообщениеМОС.Автор,
	//	 |	СообщениеМОС.Исполнитель,
	//	 |	СообщениеМОС.РольОтправителя КАК Отправитель,
	//	 |	СообщениеМОС.ОтИмени КАК ОтИмени
	//	 |ИЗ
	//	 |	Документ.СообщениеМОС КАК СообщениеМОС";
	
	
	
КонецПроцедуры	

//////////////////////////////////////////////////////

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	//
	Элементы.УЕК_ПланыПродажПоДнямНедели.ТолькоПросмотр = НЕ (ЗначениеЗаполнено(ТекущаяНоменклатура) И ЗначениеЗаполнено(ТекущаяРоль) И НЕ ТекущийПризнакЭтоГруппа);

	//
	//МассивТочек = ПолучитьСписокПланируемыхТТ(ТекущаяНеделя);
	//Если МассивТочек.Количество() = 0 Тогда
	//	
	//	//
	//	Элементы.ДекорацияСоставПланируемыхТТ.Заголовок = "Не указан состав планируемых ТТ";
	//	Элементы.ДекорацияСоставПланируемыхТТ.ЦветТекста = WebЦвета.Кирпичный;
	//	
	//Иначе
	//	
	//	//
	//	Элементы.ДекорацияСоставПланируемыхТТ.Заголовок = "Состав планируемых ТТ (" + Формат(МассивТочек.Количество(), "ЧГ=") + ")";
	//	Элементы.ДекорацияСоставПланируемыхТТ.ЦветТекста = WebЦвета.ТемноСиний;
	//
	//КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьМассивТТ()

	//
	РезультатМассивТТ = Новый Массив;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СтруктурныеЕдиницы.Ссылка
	     |ИЗ
	     |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	     |ГДЕ
	     |	СтруктурныеЕдиницы.id_TT <> 0";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		РезультатМассивТТ.Добавить(Выборка.Ссылка);
	
	КонецЦикла; 
	
	//	
	Возврат РезультатМассивТТ;

КонецФункции // ()

&НаСервере
Процедура ЗаполнитьПланПродаж()

	//
	ПланПродаж.Очистить();
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	0 КАК Цифра
	     |ПОМЕСТИТЬ ТЗ_Цифра
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	1
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	2
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	3
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	4
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	5
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	6
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	7
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	8
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	9
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_ЦифраСотни.Цифра * 100 + ТЗ_ЦифраДесятки.Цифра * 10 + ТЗ_ЦифраЕдиницы.Цифра КАК Число
	     |ПОМЕСТИТЬ ТЗ_НомераНедель
	     |ИЗ
	     |	ТЗ_Цифра КАК ТЗ_ЦифраСотни,
	     |	ТЗ_Цифра КАК ТЗ_ЦифраДесятки,
	     |	ТЗ_Цифра КАК ТЗ_ЦифраЕдиницы
	     |ГДЕ
	     |	ТЗ_ЦифраСотни.Цифра * 100 + ТЗ_ЦифраДесятки.Цифра * 10 + ТЗ_ЦифраЕдиницы.Цифра < &ТекущаяНеделя + 15
	     |
	     |ИНДЕКСИРОВАТЬ ПО
	     |	Число
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_НомераНедель.Число КАК НомерНедели,
	     |	УЕК_ПланыПродажПоДнямНедели.Дата,
	     |	УЕК_ПланыПродажПоДнямНедели.Номенклатура,
	     |	УЕК_ПланыПродажПоДнямНедели.Технолог,
	     |	УЕК_ПланыПродажПоДнямНедели.Количество,
	     |	УЕК_ПланыПродажПоДнямНедели.Сумма,
	     |	УЕК_ПланыПродажПоДнямНедели.ДатаВыставленияПлана,
	     |	УЕК_ПланыПродажПоДнямНедели.НомерНеделиВыставленияПлана,
	     |	УЕК_ПланыПродажПоДнямНедели.Автор
	     |ИЗ
	     |	ТЗ_НомераНедель КАК ТЗ_НомераНедель
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УЕК_ПланыПродажПоДнямНедели КАК УЕК_ПланыПродажПоДнямНедели
	     |		ПО ТЗ_НомераНедель.Число = УЕК_ПланыПродажПоДнямНедели.НомерНедели
	     |			И (УЕК_ПланыПродажПоДнямНедели.Номенклатура = &Номенклатура)
	     |			И (УЕК_ПланыПродажПоДнямНедели.Технолог = &Технолог)
	     |ГДЕ
	     |	(ТЗ_НомераНедель.Число >= &ТекущаяНеделя
	     |			ИЛИ НЕ УЕК_ПланыПродажПоДнямНедели.НомерНедели ЕСТЬ NULL)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	НомерНедели";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("ТекущаяНеделя", ТекущаяНеделя);
	ПЗ.Параметры.Вставить("Номенклатура", ТекущаяНоменклатура);
	ПЗ.Параметры.Вставить("Технолог", ТекущаяРоль);
	
	//
	ПЗ.Выполнить();
	
	//
	НомерПоследнейНедели = 0;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = ПланПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		//
		НоваяСтрока.ПризнакТолькоПросмотр = (НоваяСтрока.НомерНедели < ТекущаяНеделя);
		
		//
		НомерПоследнейНедели = НоваяСтрока.НомерНедели;
		
	КонецЦикла; 
	
	//
	Если НомерПоследнейНедели = 0 Тогда
		НомерПоследнейНедели = ТекущаяНеделя - 1;
	КонецЕсли; 
	
	//
	Для Сч = 1 По 10 Цикл
	
		//
		НоваяСтрока = ПланПродаж.Добавить();
		НоваяСтрока.НомерНедели = НомерПоследнейНедели + Сч;
		
	КонецЦикла; 

КонецПроцедуры

//////////////////////////////////////////////////////

&НаКлиенте
Процедура ДеревоНоменклатураПриАктивизацииСтроки(Элемент)
	
	//
	ТекущаяСтрока = Элементы.ДеревоНоменклатура.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Если ТекущаяНоменклатура = ТекущаяСтрока.Ссылка 
		И ТекущаяРоль = ТекущаяСтрока.Роль Тогда
		
		//
		Возврат;
		
	КонецЕсли; 
	
	//
	Если НЕ Элементы.ГруппаПлан.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТекущаяНоменклатура = ТекущаяСтрока.Ссылка;
	ТекущаяРоль = ТекущаяСтрока.Роль;
	ТекущийПризнакЭтоГруппа =  ТекущаяСтрока.ПризнакЭтоГруппа;
	
	//
	Если НЕ (ЗначениеЗаполнено(ТекущаяНоменклатура) И ЗначениеЗаполнено(ТекущаяРоль) И НЕ ТекущийПризнакЭтоГруппа) Тогда
		ПланПродаж.Очистить();
	Иначе
		ЗаполнитьПланПродаж();
	КонецЕсли; 
	
	//
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаКлиенте
Процедура ТекущаяРольПриИзменении(Элемент)
	
	//
	ОбновитьДеревоНоменклатуры(Объект.ТекущаяРоль);
	
	//
	СтрокиДЗ = ДеревоНоменклатура.ПолучитьЭлементы();
	Для каждого СтрокаДЗ Из СтрокиДЗ Цикл
		Элементы.ДеревоНоменклатура.Развернуть(СтрокаДЗ.ПолучитьИдентификатор(), Истина);	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	ОбновитьДеревоНоменклатуры(Объект.ТекущаяРоль);
	
	//
	СтрокиДЗ = ДеревоНоменклатура.ПолучитьЭлементы();
	Для каждого СтрокаДЗ Из СтрокиДЗ Цикл
		Элементы.ДеревоНоменклатура.Развернуть(СтрокаДЗ.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	
	//
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьСписокПланируемыхТТ(НомерНедели)
	
	//
	Результат = Новый Массив;
	
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	УЕК_ПланируемыеТТ.ТорговаяТочка КАК ТТ
	     |ИЗ
	     |	РегистрСведений.УЕК_ПланируемыеТТ КАК УЕК_ПланируемыеТТ
	     |ГДЕ
	     |	УЕК_ПланируемыеТТ.НомерНедели = &НомерНедели";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НомерНедели", НомерНедели);
	
	//
	ПЗ.Выполнить();
	
	//
	Результат = ПЗ.Результат.Выгрузить().ВыгрузитьКолонку("ТТ");
	
	//
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПроверитьСоставПланируемыхТТ(НомерНедели)
	
	//
	ВсеОК = Истина;
	
	//
	МассивТТ = ПолучитьСписокПланируемыхТТ(НомерНедели);
	Если МассивТТ.Количество() = 0 Тогда
		
		//
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("На текущую " + ТекущаяНеделя + " неделю не указан состав планируемых ТТ. 
					   |Указать сейчас?", РежимДиалогаВопрос.ДаНет,,Ответ);
					   
		//					   
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли; 					   
		
		//
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("НомерНедели", ТекущаяНеделя);
		
		//
		Форма = ПолучитьФорму("Обработка.УЕК_АРМТехнолога.Форма.ФормаСоставПланируемыхТТ", ПараметрыОткрытия, ЭтаФорма);
		ВсеОК = Форма.ОткрытьМодально();
	
	КонецЕсли; 

	//
	УстановитьСвойстваЭлементовФормы();
	
	//
	Возврат ВсеОК;
	
КонецФункции

&НаКлиенте
Процедура УЕК_ПланыПродажПоДнямНеделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//
	Отказ = Истина;
	
	//
	ВсеОК = ПроверитьСоставПланируемыхТТ(ТекущаяНеделя);
	Если ВсеОК <> Истина Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Номенклатура", ТекущаяНоменклатура);
	ПараметрыОткрытия.Вставить("Технолог", ТекущаяРоль);
	
	//
	Форма = ПолучитьФорму("РегистрСведений.УЕК_ПланыПродажПоДнямНедели.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	ТекущаяНеделя = ПолучитьНомерНеделиПоДате(ТекущаяДата());
	
	//
	ФактКонецПериода = КонецДня(ТекущаяДата()) - 1*24*60*60;
	ФактНачалоПериода = НачалоДня(ФактКонецПериода - 7*24*60*60);
	
	//
	Элементы.ДеревоНоменклатураКоличествоФакт.Заголовок = "Факт с " + Символы.ПС + Формат(ФактНачалоПериода, "ДФ=dd.MM") + " - " + Формат(ФактКонецПериода, "ДФ=dd.MM");
	Элементы.ДеревоНоменклатураСуммаФакт.Заголовок = "Факт с " + Символы.ПС + Формат(ФактНачалоПериода, "ДФ=dd.MM") + " - " + Формат(ФактКонецПериода, "ДФ=dd.MM");	
	
	
	//РОЛЬ
	НоваяСтрока = НастройкаГруппировок.Добавить();
	НоваяСтрока.Пометка = Истина; 
	НоваяСтрока.Значение = "Роль"; 
	НоваяСтрока.Представление = "Роль"; 
	
	//Важная/НЕ важная
	НоваяСтрока = НастройкаГруппировок.Добавить();
	НоваяСтрока.Пометка = Истина; 
	НоваяСтрока.Значение = "ПризнакВажная"; 
	НоваяСтрока.Представление = "Важная / Не важная"; 
	
	////Группа Номенклатуры
	//НоваяСтрока = НастройкаГруппировок.Добавить();
	//НоваяСтрока.Пометка = Истина; 
	//НоваяСтрока.Значение = "ГруппаНоменклатуры"; 
	//НоваяСтрока.Представление = "Группа"; 
	
	//Номенклатура
	НоваяСтрока = НастройкаГруппировок.Добавить();
	НоваяСтрока.Пометка = Истина; 
	НоваяСтрока.Значение = "Номенклатура"; 
	НоваяСтрока.Представление = "Номенклатура"; 
	
	//
	НоваяСтрока.ПризнакИерархия = Истина;
	НоваяСтрока.ПризнакВыводитьИерархию = Истина;
	НоваяСтрока.КартинкаИерархия = БиблиотекаКартинок.ГруппаСправочника;
	
	//
	УЕК_ПланыПродажПоДнямНедели.Параметры.УстановитьЗначениеПараметра("Номенклатура", ТекущаяНоменклатура);
	УЕК_ПланыПродажПоДнямНедели.Параметры.УстановитьЗначениеПараметра("Технолог", ТекущаяРоль);
	
	//
	УЕК_ПланыПродажПоДнямНедели.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", '00010101');
	УЕК_ПланыПродажПоДнямНедели.Параметры.УстановитьЗначениеПараметра("КоличествоФакт", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГруппировки(Команда)
	
	//
	Элементы.ГруппаНастройкаГруппировок.Видимость = НЕ Элементы.ГруппаНастройкаГруппировок.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоНоменклатурыОбновить(Команда)
	
	//
	ОбновитьДеревоНоменклатуры(Объект.ТекущаяРоль);
	
	//
	СтрокиДЗ = ДеревоНоменклатура.ПолучитьЭлементы();
	Для каждого СтрокаДЗ Из СтрокиДЗ Цикл
		Элементы.ДеревоНоменклатура.Развернуть(СтрокаДЗ.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаГруппировокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	Если Поле.Имя = "НастройкаГруппировокКартинкаИерархия" Тогда
		
		//
		Если Элементы.НастройкаГруппировок.ТекущиеДанные.ПризнакИерархия Тогда
			Элементы.НастройкаГруппировок.ТекущиеДанные.ПризнакВыводитьИерархию = НЕ Элементы.НастройкаГруппировок.ТекущиеДанные.ПризнакВыводитьИерархию;
		КонецЕсли; 
		
		//
		Если Элементы.НастройкаГруппировок.ТекущиеДанные.ПризнакВыводитьИерархию Тогда
			
			//
			Элементы.НастройкаГруппировок.ТекущиеДанные.КартинкаИерархия = БиблиотекаКартинок.ГруппаСправочника;
			
		Иначе	
			
			//
			Элементы.НастройкаГруппировок.ТекущиеДанные.КартинкаИерархия = БиблиотекаКартинок.Элемент;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоставПланируемыхТТНажатие(Элемент)
	
	//
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НомерНедели", ТекущаяНеделя);
	
	//
	Форма = ПолучитьФорму("Обработка.УЕК_АРМТехнолога.Форма.ФормаСоставПланируемыхТТ", ПараметрыОткрытия, ЭтаФорма);
	ВсеОК = Форма.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПлан(Команда)
	
	//
	Элементы.ГруппаПлан.Видимость = НЕ Элементы.ГруппаПлан.Видимость;
	
	//
	ДеревоНоменклатураПриАктивизацииСтроки(Элементы.ДеревоНоменклатура);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьПризнакВажная(Номенклатура, ПризнакВажная)
	
	//
	ВсеОК = Истина;
	
	//
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("_IMPT_");
	Если Свойство = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МЗ.Объект = Номенклатура;
	МЗ.Свойство = Свойство;
	МЗ.Значение = ПризнакВажная;
	
	//
	Попытка
		МЗ.Записать();
	Исключение
		ВсеОК = Ложь;
	КонецПопытки;	
	
	//
	Возврат ВсеОК;

КонецФункции


&НаКлиенте
Процедура ДеревоНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	Если Поле.Имя = "ДеревоНоменклатураСсылка" Тогда
		
		//
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		//
		Значение = ТекущиеДанные["Ссылка"];
		
		//
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОткрытьЗначение(Значение);
		КонецЕсли; 
		
	ИначеЕсли Поле.Имя = "ДеревоНоменклатураПризнакВажная" Тогда
		
		//
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		//
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			//
			Если НЕ ТекущиеДанные.ПризнакЭтоГруппа Тогда
				
				//
				НовоеЗначение = НЕ ТекущиеДанные.ПризнакВажная;
				Если ИзменитьПризнакВажная(ТекущиеДанные.Ссылка, НовоеЗначение) Тогда
					ТекущиеДанные.ПризнакВажная = НовоеЗначение;
				КонецЕсли;	
			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяРольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Истина;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРолейСТипомТехнологПоКачеству()
	
	//
	Результат = Новый СписокЗначений;
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	     |	СоответствиеОбъектРольСрезПоследних.РольПользователя.Наименование КАК РольПользователяНаименование
	     |ИЗ
	     |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	     |ГДЕ
	     |	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	РольПользователяНаименование";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Результат.ЗагрузитьЗначения(ПЗ.Результат.Выгрузить().ВыгрузитьКолонку("РольПользователя"));
	
	//
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ТекущаяРольНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Истина;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьДатуСледующейНедели(Номенклатура, Технолог)
	
	//
	РезультатДата = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(МАКСИМУМ(УЕК_ПланыПродажПоДнямНедели.Дата), НЕДЕЛЯ, 1), НЕДЕЛЯ) КАК Дата
	     |ИЗ
	     |	РегистрСведений.УЕК_ПланыПродажПоДнямНедели КАК УЕК_ПланыПродажПоДнямНедели
	     |ГДЕ
	     |	УЕК_ПланыПродажПоДнямНедели.Номенклатура = &Номенклатура
	     |	И УЕК_ПланыПродажПоДнямНедели.Технолог = &Технолог";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
	ПЗ.Параметры.Вставить("Технолог", Технолог);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатДата = Выборка.Дата;
	
	КонецЕсли; 
	
	//
	Возврат РезультатДата;

КонецФункции // ()

////////////////////////////////////////////////////

&НаСервере
Функция ДобавитьЗаписьВРегистрПланПродаж(НомерНедели, Номенклатура, Технолог, Количество, Сумма)

	//
	ВсеОК  = Истина;
	
	//
	МЗ = РегистрыСведений.УЕК_ПланыПродажПоДнямНедели.СоздатьМенеджерЗаписи();
	МЗ.Дата = ПолучитьДатуПоНомеруНедели(НомерНедели);
	МЗ.Номенклатура = Номенклатура;
	МЗ.Технолог = Технолог;
	
	//
	Если Количество = 0 Тогда
		МЗ.Удалить();
		Возврат ВсеОК;
	КонецЕсли; 
	
	//
	МЗ.Количество = Количество;
	МЗ.Сумма = Сумма;
	
	//
	МЗ.НомерНедели = НомерНедели;
	МЗ.ДатаВыставленияПлана = ТекущаяДата();
	МЗ.НомерНеделиВыставленияПлана = ПолучитьНомерНеделиПоДате(МЗ.ДатаВыставленияПлана);
	
	//
	МЗ.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	//
	Попытка
		МЗ.Записать();
	Исключение	
		ВсеОК = Ложь;
	КонецПопытки;	
	
	//
	Возврат ВсеОК;

КонецФункции // ()

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	//
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастроек;
	Иначе	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПродажКоличествоПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ПланПродаж.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекущаяНоменклатура, ПредопределенноеЗначение("Справочник.ТипыЦен.ОсновнойТипЦенПродаж"), ТекущаяДата());
	
	//
	ТекущиеДанные.Сумма = Цена * ТекущиеДанные.Количество;
	
	//
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.НомерНеделиВыставленияПлана = 0;
	Иначе		
		ТекущиеДанные.НомерНеделиВыставленияПлана = ТекущаяНеделя;
	КонецЕсли; 
	
	//
	ВсеОК = ДобавитьЗаписьВРегистрПланПродаж(ТекущиеДанные.НомерНедели, ТекущаяНоменклатура, ТекущаяРоль, ТекущиеДанные.Количество, ТекущиеДанные.Сумма);
	
	//
	Если ВсеОК Тогда
	
		//
		ДеревоТекущиеДанные = Элементы.ДеревоНоменклатура.ТекущиеДанные;
		Если ДеревоТекущиеДанные <> Неопределено Тогда
			
			//
			Если ТекущиеДанные.НомерНедели = ТекущаяНеделя Тогда
			
				//
				ДеревоТекущиеДанные.КоличествоПлан = ТекущиеДанные.Количество;
				ДеревоТекущиеДанные.СуммаПлан = ТекущиеДанные.Сумма;
				
				//
				Если ЗначениеЗаполнено(ДеревоТекущиеДанные.КоличествоПлан) Тогда
					ДеревоТекущиеДанные.ОтклонениеКоличество = 100*(ДеревоТекущиеДанные.КоличествоФакт - ДеревоТекущиеДанные.КоличествоПлан) / ДеревоТекущиеДанные.КоличествоПлан;
				КонецЕсли; 
				
				//
				Если ЗначениеЗаполнено(ДеревоТекущиеДанные.СуммаПлан) Тогда
					ДеревоТекущиеДанные.ОтклонениеСумма = 100*(ДеревоТекущиеДанные.СуммаФакт - ДеревоТекущиеДанные.СуммаПлан) / ДеревоТекущиеДанные.СуммаПлан;
				КонецЕсли;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПродажСуммаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ПланПродаж.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	//Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекущаяНоменклатура, ПредопределенноеЗначение("Справочник.ТипыЦен.ОсновнойТипЦенПродаж"), ТекущаяДата());
	
	//
	//ТекущиеДанные.Сумма = Цена * ТекущиеДанные.Количество;
	
	//
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.НомерНеделиВыставленияПлана = 0;
	Иначе		
		ТекущиеДанные.НомерНеделиВыставленияПлана = ТекущаяНеделя;
	КонецЕсли; 
	
	//
	ВсеОК = ДобавитьЗаписьВРегистрПланПродаж(ТекущиеДанные.НомерНедели, ТекущаяНоменклатура, ТекущаяРоль, ТекущиеДанные.Количество, ТекущиеДанные.Сумма);
	
	//
	Если ВсеОК Тогда
	
		//
		ДеревоТекущиеДанные = Элементы.ДеревоНоменклатура.ТекущиеДанные;
		Если ДеревоТекущиеДанные <> Неопределено Тогда
			
			//
			Если ТекущиеДанные.НомерНедели = ТекущаяНеделя Тогда
			
				//
				ДеревоТекущиеДанные.КоличествоПлан = ТекущиеДанные.Количество;
				ДеревоТекущиеДанные.СуммаПлан = ТекущиеДанные.Сумма;
				
				//
				Если ЗначениеЗаполнено(ДеревоТекущиеДанные.КоличествоПлан) Тогда
					ДеревоТекущиеДанные.ОтклонениеКоличество = 100*(ДеревоТекущиеДанные.КоличествоФакт - ДеревоТекущиеДанные.КоличествоПлан) / ДеревоТекущиеДанные.КоличествоПлан;
				КонецЕсли; 
				
				//
				Если ЗначениеЗаполнено(ДеревоТекущиеДанные.СуммаПлан) Тогда
					ДеревоТекущиеДанные.ОтклонениеСумма = 100*(ДеревоТекущиеДанные.СуммаФакт - ДеревоТекущиеДанные.СуммаПлан) / ДеревоТекущиеДанные.СуммаПлан;
				КонецЕсли;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры
