#Область ОбластьПеременных

&НаКлиенте
Перем ИдентификаторАктивнойСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		Период.ДатаНачала = Параметры.НачалоПериода;
	Иначе
		Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;

	Если Параметры.Свойство("КонецПериода") Тогда
		Период.ДатаОкончания = Параметры.КонецПериода;
	Иначе
		Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;

	ОбновитьПараметрыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		
		Если НЕ ОткрыватьФорму Тогда
			
			ИмяФормыПолное = ПолучитьПолноеИмяФормы("Форма");
			Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
				ОткрытьФорму(ИмяФормыПолное, Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Иначе
				ОткрытьФорму("Обработка.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.Форма.Форма", Новый Структура("ОткрыватьФорму",Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
			Отказ = Истина;
			
			ЭтаФорма.Закрыть();
					
		Иначе
			
			Этаформа.Ширина = 115;
			Этаформа.Высота = 33;
	
		КонецЕсли;
		
	#КонецЕсли
	
	ОбновитьПризнакОтбора(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированностьЗавершение", ЭтаФорма, 
			Новый Структура("НазначениеДа, НазначениеНет", "СохранитьИзмененныеСтрокиКлиент(); Этаформа.Закрыть();", "ОбновитьМодифицированностьФормы(Ложь); Этаформа.Закрыть();")), 
				НСтр("ru = 'Есть несохраненные данные! Сохранить перед закрытием?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
	ОбновитьСписокВыбораКонтрагентовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольДоступаПриИзменении(Элемент)
	
	ПолныйДоступ = ПарольДоступа = "*8995";
	
	Если ПолныйДоступ Тогда
		ПоказатьПредупреждение(,"Полный доступ установлен!");
		ОбновитьВозможностьРедактирования();
	Иначе
		ПоказатьПредупреждение(,"Неверный пароль(зафиксирована попытка получения доступа)!");
	КонецЕсли;
	
	Элементы.ПарольДоступа.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПомощникаЗавершение", ЭтаФорма, Новый Структура("ОбновитьТаблицу"));
	
	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", Новый Структура("ТекущийПомощник, ВсеПомощники", ТекущийПомощник, Истина),
				ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры  
			
&НаКлиенте
Процедура ПомощникОткрытие(Элемент, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		СтандартнаяОбработка = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПомощникаЗавершение", ЭтаФорма, Новый Структура("ТекущийПомощник"));

	ОткрытьФорму("Обработка.ГрафикРаботыПродавцов_ТЗ.Форма.ФормаВыбораФизическогоЛица", Новый Структура("ТекущийПомощник, ВсеПомощники", ТекущийПомощник, Истина),
				ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора", Новый Структура("Отбор, СформироватьПриОткрытии", 
			Новый Структура("Активное, ТипРозничнойТочки", Истина, ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин")), Истина), Элемент);
			
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОбновитьТаблицуЗаписейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Должность", "Менеджер");
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураПараметров.Вставить("ТекущийКонтрагент", Объект.Контрагент); 
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СотрудникиАутсорсинг.Форма.ФормаВыбора",СтруктураПараметров,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ОтветственныйМенеджер", Объект.Менеджер);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураПараметров.Вставить("ТекущийКонтрагент", Объект.Контрагент); 
	КонецЕсли;

	ОткрытьФорму("Справочник.СотрудникиАутсорсинг.Форма.ФормаВыбора",СтруктураПараметров,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьСотрудникаПоЧастиТекста(Текст);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаТаблицаЗаписейСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Если ЭтаФорма.Модифицированность Тогда
	//	
	//ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированностьЗавершение", ЭтаФорма, 
	//	Новый Структура("НазначениеДа, НазначениеНет, ТекущаяСтраницаИндекс", "СохранитьИзмененныеСтрокиКлиент(); ОбновитьТаблицуЗаписейКлиент();", "ОбновитьТаблицуЗаписейКлиент()", ТекущаяСтраницаИндекс)), 
	//		НСтр("ru = 'Есть несохраненные данные! Сохранить перед продолжением?'"), РежимДиалогаВопрос.ДаНет);
	//	
	//КонецЕсли;
		
	ТекущаяСтраницаИндекс = Прав(Элемент.ТекущаяСтраница.Имя, 1);

	ОбновитьВидимостьКоммандОтборовКлиент();
	
	ОбновитьПризнакОтбора(ТекущийОтбор);
	
	ОбновитьПодсказкиСервер(); //Отключить этот переход на сервер!(после тестирования, реализовать две отдельные доп. команды)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКоммандОтборовКлиент()
	
	//Продавцы имеют возможность отбирать редактированные строки только основной таблице записей
	Элементы.КомандаОтбор6.Видимость = НЕ ЗапретРедактирования И ЭтоПродавец И ТекущаяСтраницаИндекс = 0;
	
	//Видимость комманд 
	Элементы.КомандаОтбор2.Видимость =  ТекущаяСтраницаИндекс < 2;
	Элементы.КомандаОтбор3.Видимость =  ТекущаяСтраницаИндекс < 2;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаЗаписей

&НаКлиенте
Процедура ТаблицаЗаписейПоМагазинуПриИзменении(Элемент)
	
	ПроверитьНеобходимостьАвтоформированияЗаписи();
	
	ОбновитьПризнакИзмененияСтроки();
	
	ОбновитьОтклонениеОтУстановленногоВремени();
	
	ПрименитьДополнительныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПодтвержденоПомощникомПриИзменении(Элемент)
	
	ПроверитьНеобходимостьАвтоформированияЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПередНачаломИзменения(Элемент, Отказ)
	
	ПроверитьВозможностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПередУдалением(Элемент, Отказ)
	
	ПроверитьВозможностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПриАктивизацииПоля(Элемент)
	
	//Возможность подтверждения доступна пользователям с ролями "Помощник" и "Полные права"
	//ПодключитьОбработчикОжидания("ОбновитьДоступностьКонтекстногоМеню", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработатьАвтоматическоеОтображениеОстуствия(Элемент);
	
	ОбновитьПризнакИзмененияСтроки();
	
	ОбновитьОтклонениеОтУстановленногоВремени();
	
	ОбновитьСостояниеСтроки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаЗаписейОплаты

&НаКлиенте
Процедура ТаблицаЗаписейОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	 ИмяПоля = СтрЗаменить(Поле.Имя, "ТаблицаЗаписейОплаты", ""); 
	 
	 Если Лев(ИмяПоля,7) = "_п_День" Тогда
		 ТаблицаЗаписей.Очистить();
		 УстановитьБыстрыйОтборТаблицыЗаписей(Элемент.ТекущиеДанные, ИмяПоля);
	 ИначеЕсли Лев(ИмяПоля,7) = "_п_Итог" ИЛИ ИмяПоля = "Контрагент" ИЛИ ИмяПоля = "ТорговаяТочка" ИЛИ ИмяПоля = "Должность" ИЛИ ИмяПоля = "Сотрудник" ИЛИ ИмяПоля = "Помощник" Тогда 
		 ТаблицаЗаписей.Очистить();
		 УстановитьБыстрыйОтборТаблицыЗаписей(Элемент.ТекущиеДанные, "ОтборПоСотруднику");
	 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейОплатыПередНачаломИзменения(Элемент, Отказ)
	
	#Если НЕ ВебКлиент Тогда
		ПроверитьВозможностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейОплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПризнакИзмененияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейОплатыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("АктивацияСтрокиТаблицыЗаписейОплаты", 0.1, Истина); //Не нужен быстро отрабатывает
	//АктивацияСтрокиТаблицыЗаписейОплаты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаЗаписейОплатыЗаявка

&НаКлиенте
Процедура ТаблицаЗаписейОплатыЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя, "ТаблицаЗаписейОплатыЗаявки", "");
	
	Если ИмяПоля = "ЗаявкаНаУслуги" Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные[ИмяПоля]);     
	Иначе
		//Опритмизация при использовании быстрых фильтров
		ТаблицаЗаписей.Очистить();
		ТаблицаЗаписейОплаты.Очистить();

		УстановитьБыстрыйОтборТаблицыЗаписей(Элемент.ТекущиеДанные, "ОтборПоТорговойТочке");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейОплатыЗаявкиПередНачаломИзменения(Элемент, Отказ)
	
	#Если НЕ ВебКлиент Тогда
		ПроверитьВозможностьРедактированияСтроки(Элемент.ТекущиеДанные, Отказ);
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыТаблицыЗаписей

&НаКлиенте
Процедура КомандаТаблицаЗаписейОбновить(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированностьЗавершение", ЭтаФорма, 
			Новый Структура("НазначениеДа, НазначениеНет", "СохранитьИзмененныеСтрокиКлиент(); ОбновитьТаблицуЗаписейКлиент();", "ОбновитьТаблицуЗаписейКлиент()")), 
				НСтр("ru = 'Есть несохраненные данные! Сохранить перед продолжением?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ОбновитьТаблицуЗаписейКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейЗаполнитьПоЧекам(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуЗаписейПоЧекамВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные в регистре за указанный период будудут перезаполнены! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );

КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейЗаполнитьПоОтметкам(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуЗаписейОтметкамВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Обновить отметки из Фронтол?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );

КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейПодтвердитьИзмененные(Команда)
	
	СохранитьИзмененныеСтрокиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейДобавить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьТаблицуЗаписейАвто", ЭтаФорма);
	
	ТекущаяДата = ТекущаяДата();

	ОткрытьФорму("РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.Форма.ФормаЗаписи",Новый Структура("ЗначенияЗаполнения, ВернутьСтруктуруКлюча, ИнтерактивноеДобавление", Новый Структура("ДатаПрихода, ДатаУхода, Продавец, Помощник", ТекущаяДата, ТекущаяДата, ТекущийПродавец, ТекущийПомощник), Истина, Истина),,,
				ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
			
&НаКлиенте
Процедура КомандаТаблицаЗаписейСкопировать(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные<> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбновитьТаблицуЗаписейАвто", ЭтаФорма);
		
		ТекущаяДата = ТекущаяДата();
		
		ОткрытьФорму("РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.Форма.ФормаЗаписи",Новый Структура("ЗначенияЗаполнения, ВернутьСтруктуруКлюча, ИнтерактивноеДобавление", Новый Структура("ДатаПрихода, ДатаУхода, Контрагент, ТорговаяТочка, Сотрудник, Должность, Продавец, Помощник", 
					ТекущаяДата, ТекущаяДата, ТекущиеДанные.Контрагент, ТекущиеДанные.ТорговаяТочка, ТекущиеДанные.Сотрудник, ТекущиеДанные.Должность, ТекущийПродавец, ТекущийПомощник), Истина, Истина),,,
							ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейИзменить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Отказ = Ложь;
		
		ПроверитьВозможностьРедактированияСтроки(ТекущиеДанные, Отказ,, Истина);
		
		Если Не Отказ Тогда
			
			ДатаПрихода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаПрихода), ТекущиеДанные.ДатаПрихода, ТекущиеДанные.Дата); 
			
			СтруктураПараметров = Новый Структура("ДатаПрихода, Сотрудник", ДатаПрихода, ТекущиеДанные.Сотрудник);
			
			мКлючЗаписи = ПолучитьКлючЗаписиЖурналУчетаПоДням(СтруктураПараметров);
			
			Оповещение = Новый ОписаниеОповещения("ОбновитьТаблицуЗаписейАвто", ЭтаФорма, );
			
			Попытка
				ОткрытьФорму("РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.Форма.ФормаЗаписи", Новый Структура("Ключ, ВернутьСтруктуруКлюча", мКлючЗаписи, Истина),ТекущиеДанные,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Исключение
				
				//Создание новой записи, если данные по сотруднику присутствовали только в графике
				СтруктураПараметровЗапись = СтруктураПараметров;
				
				СтруктураПараметровЗапись.Вставить("Контрагент",ТекущиеДанные.Контрагент);
				СтруктураПараметровЗапись.Вставить("Должность", ТекущиеДанные.Должность);
				СтруктураПараметровЗапись.Вставить("ТорговаяТочка", ТекущиеДанные.ТорговаяТочка);
				СтруктураПараметровЗапись.Вставить("ДатаУхода", СтруктураПараметров.ДатаПрихода);
				СтруктураПараметровЗапись.Вставить("Продавец", ТекущийПродавец);
				СтруктураПараметровЗапись.Вставить("Помощник", ТекущийПомощник);
				
				Отказ = Ложь;
				
				СоздатьНовуюЗаписьЖурналаУчета(СтруктураПараметровЗапись, Отказ);
				
				Если Не Отказ Тогда
					
					мКлючЗаписи = ПолучитьКлючЗаписиЖурналУчетаПоДням(СтруктураПараметров);
					
					ОткрытьФорму("РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.Форма.ФормаЗаписи", Новый Структура("Ключ, ВернутьСтруктуруКлюча", мКлючЗаписи, Истина),ТекущиеДанные,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				КонецЕсли;
				
			КонецПопытки
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаЗаписейУдалить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УдалитьЗаписиВопросЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Выделенные строки будут удалены! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗначение(Команда)
	
	ОткрытьЗначениеТекущейЯчейки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправкаЖурналУчетаМенеджеры(Команда)
	ОткрытьСправку("Обработка.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.Форма.ЖурналУчетаМенеджеры");
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправкаЖурналУчетаПродавцы(Команда)
	ОткрытьСправку("Обработка.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.Форма.ЖурналУчетаМенеджеры");
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПометкиПомощника(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПометкиПомощника(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаПосмотретьОтметкиФронтол(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	ИмяФормыПолное = ПолучитьПолноеИмяФормы("Форма");
	Если  Лев(ИмяФормыПолное, 16) = "ВнешняяОбработка" Тогда
		ОткрытьФорму(СтрЗаменить(ИмяФормыПолное,".Форма.Форма",".Форма.ОтметкиФронтол"), Новый Структура("Дата, Сотрудник, ТорговаяТочка",ТекущиеДанные.Дата, ТекущиеДанные.Сотрудник, ТекущиеДанные.ТорговаяТочка),,,
				ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ЖурналУчетаВнештатныхСотрудниковАутсорсинг.Форма.ОтметкиФронтол", Новый Структура("Дата, Сотрудник, ТорговаяТочка",ТекущиеДанные.Дата, ТекущиеДанные.Сотрудник, ТекущиеДанные.ТорговаяТочка),,,
				ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыОтчетПоФактическойРаботе

&НаКлиенте
Процедура КомандаОтчетСформировать(Команда)
	
	 ОбновитьТаблицуЗаписейОплатаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПодтвердить(Команда)
	
	СохранитьИзмененныеСтрокиКлиент();	
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗаявкаНаУслуги

&НаКлиенте
Процедура КомандаЗаявкаЗаполнить(Команда)
	
	ОбновитьТаблицуЗаписейОплатаЗаявкаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаявкаСоздать(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьЗаявкиНаУслугиВопросЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'По выбранным строкам будут сознаны/обновлены документы ""Заявка на Услуги/Материалы""! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаявкаПривязатьЗаписи(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПривязатьСтрокиОтЗаявкиНаУслугиВопросЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'ВНИМАНИЕ: Все ранее привязанные записи по выбранной заявке будут очищены, а документ перезаполнен! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаявкаОтвязатьЗаписи(Команда)

	ТекущиеДанные = Элементы.ТаблицаЗаписейОплатыЗаявки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаУслуги) Тогда
			
			МассивИдентификаторов = Новый Массив;
			
			НайденныеСтроки = ТаблицаЗаписейОплатыЗаявки.НайтиСтроки(Новый Структура("ЗаявкаНаУслуги", ТекущиеДанные.ЗаявкаНаУслуги));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого Строка Из НайденныеСтроки Цикл
					МассивИдентификаторов.Добавить(Строка.ПолучитьИдентификатор());	
				КонецЦикла;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ОтвязатьСтрокиОтЗаявкиНаУслугиВопросЗавершение", ЭтаФорма, Новый Структура("ЗаявкаНаУслуги, МассивИдентификаторов", ТекущиеДанные.ЗаявкаНаУслуги, МассивИдентификаторов));
			ПоказатьВопрос(Оповещение, НСтр("ru = 'ВНИМАНИЕ: Вернуть статус ""подтверждено на оплату"" всем записям по документу  " + ТекущиеДанные.ЗаявкаНаУслуги + "?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область КомандыБыстрыеФильтры

&НаКлиенте                              
Процедура КомандаОтбор0(Команда)
	ОбновитьПризнакОтбора(0);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор1(Команда)
	ОбновитьПризнакОтбора(1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор2(Команда)
	ОбновитьПризнакОтбора(2);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор3(Команда)
	ОбновитьПризнакОтбора(3);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор4(Команда)
	ОбновитьПризнакОтбора(4);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор5(Команда)
	ОбновитьПризнакОтбора(5);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор6(Команда)
	ОбновитьПризнакОтбора(6);
КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстрыйОтбор(Команда)
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		
		ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах("ПоДате", Ложь);
		
		СменитьСтраницуПоИндексу(ТекущаяСтраницаИндекс + 1);

		ОбновитьПризнакОтбора(ТекущийОтборАвто1);
		
		Если ОтборПоТорговойТочке Тогда
			Элементы.НадписьТекущийОтбор.Заголовок = ПолучитьЗаголовокБыстрогоОтбора("ПоТорговойТочке");
		КонецЕсли;
		
		ОтборПоДатеСтруктура = Неопределено;
		
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		
		ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах("ПоТорговойТочке", Ложь);
		
		СменитьСтраницуПоИндексу(ТекущаяСтраницаИндекс + 1);

		ОбновитьПризнакОтбора(ТекущийОтборАвто2);
		
		ОтборПоТорговойТочкеСтруктура = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокБыстрогоОтбора(ВариантОтбора)
	
	Если ВариантОтбора = "ПоДате" Тогда 
		Возврат "Быстрый отбор по дате " + Формат(ОтборПоДатеСтруктура.Дата, "ДЛФ=DD"); 
	ИначеЕсли ВариантОтбора = "ПоТорговойТочке" Тогда
		Возврат "Быстрый отбор Контрагент: " + ОтборПоТорговойТочкеСтруктура.Контрагент + " ТТ: " + ОтборПоТорговойТочкеСтруктура.ТорговаяТочка + " Должность: " + ОтборПоТорговойТочкеСтруктура.Должность; 
	ИначеЕсли ВариантОтбора = "ПоСотруднику" Тогда
		Возврат "Быстрый отбор Сотрудник: " + ОтборПоДатеСтруктура.Сотрудник + " ТТ: " + ОтборПоДатеСтруктура.ТорговаяТочка +	" Должность: " + ОтборПоДатеСтруктура.Должность; 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КомандаПолныйДоступ(Команда)
	
	 Элементы.ПарольДоступа.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчисткаНеактуальныхСтрок(Команда)
	
	Если Не РежимОчисткиМусора Тогда
		ТекстВопроса = "Перейти в режим редактирования некорректных записей (несохраненные данные будут потеряны)?";
	Иначе
		ТекстВопроса = "Выйти из режима редактирования некорректных записей (несохраненные данные будут потеряны)?";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПереходВРежимОчисткиМусораЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = '"+ТекстВопроса+"'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбъединитьСтроки(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(,"Есть несохраненные данные! Нажмите ""Подтвердить"" или ""Обновить"" и повторите попытку объединения строк!");
		Возврат;
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОбъединитьСтрокиВопросЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Объединить строки по принципу: макс. ""Время прихода"" с макс. ""Время ухода""?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОповещений

#Область ОбработчикиТаблицыЗаписей

&НаКлиенте
Процедура ОбновитьТаблицуЗаписейАвто(Результат, ДополнительныеПараметры) Экспорт 
	
	//Восстановление активной строки
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ОбновитьТаблицуЗаписейКлиент();
		
		Если Результат.Свойство("ДатаПрихода") И Результат.Свойство("Сотрудник") Тогда
			
			НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ДатаПрихода, Сотрудник",  ДобавитьКДатеВремяКлиент(,Результат.ДатаПрихода, Истина),  Результат.Сотрудник));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ТаблицаЗаписей.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();     
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЗаписейПоЧекамВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуЗаписейРегистраСервер("ПоЧекам");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЗаписейОтметкамВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Истина ИЛИ ЭтоПродавец Тогда // Всем пользователям импорт только текущей даты
			
			СтруктураПараметров = Новый Структура();
			
			СтруктураПараметров.Вставить("НачалоПериода", НачалоДня(ТекущаяДата()) - 86400);
			СтруктураПараметров.Вставить("КонецПериода", ТекущаяДата());
			СтруктураПараметров.Вставить("НомерТочки", Объект.ТорговаяТочка);
			СтруктураПараметров.Вставить("Сотрудник", Объект.Сотрудник);
			
			ЗаполнитьТаблицуЗаписейРегистраСервер("ПоОтметкам", СтруктураПараметров);
			
			ОбновитьТаблицуЗаписейКлиент();
			
		Иначе
			
			Диалог = Новый ДиалогРедактированияСтандартногоПериода();
			СтандартныйПериод = Новый СтандартныйПериод();
			
			СтандартныйПериод.ДатаНачала = Период.ДатаНачала;
			СтандартныйПериод.ДатаОкончания = Период.ДатаОкончания;
			Диалог.Период = СтандартныйПериод;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
			
			Диалог.Показать(ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
		   
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура();
		
		СтруктураПараметров.Вставить("НачалоПериода", НачалоДня(Результат-1));
		СтруктураПараметров.Вставить("КонецПериода", КонецДня(Результат));
		СтруктураПараметров.Вставить("НомерТочки", Объект.ТорговаяТочка);
		СтруктураПараметров.Вставить("Сотрудник", Объект.Сотрудник);
		
		ЗаполнитьТаблицуЗаписейРегистраСервер("ПоОтметкам", СтруктураПараметров);
		
		ОбновитьТаблицуЗаписейКлиент();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		МассивУдаляемыхСтрок = Новый Массив();
		
		Для каждого ВыделеннаяСтрока ИЗ Элементы.ТаблицаЗаписей.ВыделенныеСтроки Цикл
			
			ТекущиеДанные = ТаблицаЗаписей.НайтиПоИдентификатору(ВыделеннаяСтрока);

			Если ТекущиеДанные <> Неопределено Тогда
				
				Отказ = Ложь;
				
				ПроверитьВозможностьРедактированияСтроки(ТекущиеДанные, Отказ, Истина);
				
				Если Отказ Тогда
					Прервать;
				КонецЕсли;
				
				МассивУдаляемыхСтрок.Добавить(ВыделеннаяСтрока); 

				Если ЗначениеЗаполнено(ТекущиеДанные.idЗаписиПриход) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.idЗаписиУход) Тогда
					ТекстСообщения = "Запрещено удалять импортированные из Фронтолл данные!"  
					//Без блоккировки, пусть пока чистят мусор
				КонецЕсли;
				
				УдалитьЗаписьРегистраЖурналУчетаПоДням(Новый Структура("ДатаПрихода, Сотрудник", ДобавитьКДатеВремяКлиент(ТекущиеДанные.Дата, ТекущиеДанные.ДатаПрихода), ТекущиеДанные.Сотрудник));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЭлементМассива из МассивУдаляемыхСтрок Цикл
			ЭтаФорма.ТаблицаЗаписей.Удалить(ТаблицаЗаписей.НайтиПоИдентификатору(ЭлементМассива));	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаМодифицированностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Назначение = Неопределено;
		
		Если ДополнительныеПараметры.Свойство("Назначение") Тогда
			ДополнительныеПараметры.Свойство("Назначение", Назначение);
		ИначеЕсли Результат = КодВозвратаДиалога.Да И ДополнительныеПараметры.Свойство("НазначениеДа") Тогда
			ДополнительныеПараметры.Свойство("НазначениеДа", Назначение);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет И ДополнительныеПараметры.Свойство("НазначениеНет") Тогда
			ДополнительныеПараметры.Свойство("НазначениеНет", Назначение);
			ОбновитьМодифицированностьФормы(Ложь);
		ИначеЕсли Результат = КодВозвратаДиалога.Отмена И ДополнительныеПараметры.Свойство("НазначениеОтмена") Тогда
			ДополнительныеПараметры.Свойство("НазначениеОтмена", Назначение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Назначение) Тогда
			
			Выполнить(Назначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаписейПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьЭлементовУправленияРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВРежимОчисткиМусораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РежимОчисткиМусора = Не РежимОчисткиМусора;
		
		Элементы.ТаблицаЗаписейКомандаОчисткаНеактуальныхСтрок.Пометка = РежимОчисткиМусора;
		
		ОбновитьОтображениеЭлементовФормыПерезаполнитьТаблицуЗаписей();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПомощникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда 
			
			Если ДополнительныеПараметры.Свойство("ТекущийПомощник") Тогда
				ТекущийПомощник = Результат;
				Возврат;
			КонецЕсли;
			
			Объект.Помощник = Результат;

			Если ДополнительныеПараметры.Свойство("ОбновитьТаблицу") Тогда
				ОбновитьТаблицуЗаписейКлиент();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

		Объект.Помощник = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтрокиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		МассивСтрок = Новый Массив();
		
		Для каждого Строка из Элементы.ТаблицаЗаписей.ВыделенныеСтроки Цикл
			
			СтруктураСтроки = Новый Структура();
			
			ТекущаяСтрока = ТаблицаЗаписей.НайтиПоИдентификатору(Строка);
			
			Для каждого Колонка Из Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда
					ИмяКолонки = СтрЗаменить(Колонка.Имя,"ТаблицаЗаписей", "");
					СтруктураСтроки.Вставить(ИмяКолонки, ТекущаяСтрока[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрок.Добавить(СтруктураСтроки);	
			
		КонецЦикла;
		
		ОбъединитьСтрокиСерверБезКонтекста(МассивСтрок);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыЗаписейОплатыЗаявка

&НаКлиенте
Процедура ОбновитьЗаявкиНаУслугиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьЗаявкиНаУслугиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьСтрокиОтЗаявкиНаУслугиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборЗаявкиНаУслуги", ЭтаФорма);
		
		ОткрытьФорму("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе", Истина),
		      ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗаявкиНаУслуги(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьЗаявкиНаУслугиСервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьСтрокиОтЗаявкиНаУслугиВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДополнительныеПараметры.ЗаявкаНаУслуги);
		
		//Дополнительная очистка данных строк
		Для каждого ЭлементМассива Из ДополнительныеПараметры.МассивИдентификаторов Цикл
			
			ТекущаяСтрока = ТаблицаЗаписейОплатыЗаявки.НайтиПоИдентификатору(ЭлементМассива);
			
			ТекущаяСтрока.ЗаявкаНаУслуги 	 = ПредопределенноеЗначение("Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка");  		
			ТекущаяСтрока.ПодтвержденоЗаявка = Ложь;
			
		КонецЦикла;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПомощника(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.Помощник = Результат;
		ТекущийПомощник = Результат;
		
		ОбновитьТаблицуЗаписейКлиент();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	Параметры.Свойство("ОткрыватьФорму", ОткрыватьФорму);
	
	ОбновитьСписокВыбораКонтрагентовСервер();
	
	ОбновитьВозможностьРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВозможностьРедактирования()
	
	//На текущий момент определение внештатного согрудника является наличие роли
	//"ОтветственныйЗаРаботуСАутсорсингом" через проверку "ДопМодульСервер.ПолучитьТекущуюГруппуСотрудниковАутсорсинг();"
	//Есть также роль "СотрудникАутсорсинг"(похоже не используется)
	
	ЗапретРедактирования = ЗначениеЗаполнено(Объект.ГруппаСотрудников);
	Если ЗапретРедактирования И Элементы.Контрагент.СписокВыбора.Количество() > 0 Тогда
		Объект.Контрагент = Элементы.Контрагент.СписокВыбора[0].Значение;     
	КонецЕсли;
	
	//Заполнения по функциональным ролям
	ЗаполнитьТекущегоПомощникаУправляющего();

	//Доступность элементов формы
	Элементы.Контрагент.Доступность = НЕ ЗапретРедактирования;
	
	//Доступность кнопок
	Элементы.КомандаОтбор6.Видимость = Не ЗапретРедактирования;
	Элементы.ТаблицаЗаписейГруппаКнопокРедактирование.Видимость = Не ЗапретРедактирования;
	Элементы.ТаблицаЗаписейГруппаКнопокРедактированиеКонтекст.Видимость = Не ЗапретРедактирования;
	Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейПодтвердитьИзмененные.Видимость = Не ЗапретРедактирования;
	Элементы.ТаблицаЗаписейКонтекстноеМенюКомандаПосмотретьОтметкиФронтол.Видимость = Не ЗапретРедактирования; 
	//Доступность табличной части
	Элементы.ТаблицаЗаписей.ТолькоПросмотр = ЗапретРедактирования;
	Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы.ТаблицаЗаписейКонтрагент.Видимость = НЕ ЗапретРедактирования;
	
	Элементы.ТаблицаЗаписейОплатыКонтрагент.Видимость = НЕ ЗапретРедактирования;

    Элементы.ГруппаТаблицаЗаписей.Заголовок = ?(ЗначениеЗаполнено(Объект.ГруппаСотрудников), Объект.ГруппаСотрудников, "Внештатные сотрудники");
	
	//Дополнительное заполнение по параметрам сеанса
	Если Не ЗапретРедактирования Тогда
		Попытка 
			Объект.ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
	//Доступность табличных частей по ролям
	РольПолныеПрава = РольДоступна("ПолныеПрава") ИЛИ ПолныйДоступ;
	РольПродавец    = РольДоступна("Продавец");
	РольФинансист   = РольДоступна("Финансист");
	РольПомощник    = РольДоступна("Помощник");
	
	ЭтоПродавец = РольПродавец И НЕ РольПолныеПрава И НЕ ЗначениеЗаполнено(ТекущийПомощник);
	
	Если ЭтоПродавец Тогда
		Попытка 
			ТекущийПродавец = ПараметрыСеанса.ТекущийПродавец;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ЭтоПродавец = ЭтоПродавец И ЗначениеЗаполнено(ТекущийПродавец); 
	
	Элементы.ТаблицаЗаписейПодтвержденоПомощником.ТолькоПросмотр = ЭтоПродавец ИЛИ НЕ ЗначениеЗаполнено(ТекущийПомощник);
	Элементы.ТаблицаЗаписейТорговаяТочка.Видимость = НЕ ЭтоПродавец;
	Элементы.ТорговаяТочка.ТолькоПросмотр = ЭтоПродавец;
	
	//Отбор по помощнику
	//Элементы.Помощник.Видимость = (РольПомощник И ЗначениеЗаполнено(ТекущийПомощник)) ИЛИ РольПолныеПрава;
	Элементы.Помощник.Видимость = НЕ ЭтоПродавец;
	//Элементы.ТаблицаЗаписейПомощник.Видимость = НЕ ЭтоПродавец;
	
	//Заявка на услуги
	Элементы.ГруппаТаблицаЗаписейСтраница2.Видимость = (РольПолныеПрава ИЛИ РольПомощник ИЛИ РольФинансист) И НЕ ЗапретРедактирования;

	//Тестовые реквизиты (Только для полных прав)
	Элементы.КомандаОтчетПодтвердить.Видимость = РольПолныеПрава ИЛИ РольПомощник ИЛИ РольФинансист;
	Элементы.ТаблицаЗаписейГруппаКнопокРедактированиеОтметки1.Видимость = РольПолныеПрава ИЛИ РольПомощник ИЛИ РольФинансист;	
	Элементы.ТаблицаЗаписейГруппаКнопокРедактированиеКонтекстОтметки1.Видимость = РольПолныеПрава ИЛИ РольПомощник ИЛИ РольФинансист;
	Элементы.ТаблицаЗаписейОплатыПодтвержденоОплата.ТолькоПросмотр = НЕ РольПолныеПрава И НЕ РольПомощник И НЕ РольФинансист;
	Элементы.ТекущийПомощник.Видимость = РольПолныеПрава;
	Элементы.Помощник.ТолькоПросмотр = НЕ РольПолныеПрава И НЕ ЗапретРедактирования И НЕ РольФинансист; //Доступен отбор в Web (внештатным менеджерам) или Пользователям с полными правами).
	
	//Раздел отображение справки
	//Элементы.ТаблицаЗаписейКомандаСправкаЖурналУчетаМенеджеры.Видимость = ЗапретРедактирования;
	//Элементы.ТаблицаЗаписейКомандаСправкаЖурналУчетаПродавцы.Видимость = НЕ ЗапретРедактирования И ЭтоПродавец;
	
	//Переход в режим очистки мусора
	Элементы.ТаблицаЗаписейКомандаОчисткаНеактуальныхСтрок.Видимость = (Не ЗапретРедактирования И Не ЭтоПродавец) ИЛИ РольПолныеПрава ИЛИ ПолныйДоступ;
	
	Если РежимОчисткиМусора Тогда
		Элементы.ГруппаТаблицаЗаписейСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаТаблицаЗаписейСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Элементы.ИсключитьДолжность.Видимость = РежимОчисткиМусора И НЕ ЗапретРедактирования;
	Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейЗаполнитьПоОтметкам.Видимость = Не РежимОчисткиМусора И НЕ ЗапретРедактирования;
	
	//Обновление заголовка формы
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораКонтрагентовСервер()
	
	Элементы.Контрагент.СписокВыбора.Очистить();
	
	Объект.ГруппаСотрудников = ДопМодульСервер.ПолучитьТекущуюГруппуСотрудниковАутсорсинг();
	
	ДоступныеКонтрагенты = Справочники.СотрудникиАутсорсинг.ПолучитьКонтрагентовПредоставляющихАутсорсУслуги(Объект.ГруппаСотрудников, КонецДня(Период.ДатаОкончания));
	
	Для каждого Элемент Из ДоступныеКонтрагенты Цикл
		Элементы.Контрагент.СписокВыбора.Добавить(Элемент);
	КонецЦикла;
		
	Если Параметры.Свойство("Контрагент") Тогда
		Если ДоступныеКонтрагенты.Найти(Параметры.Контрагент) <> Неопределено Тогда 
			Объект.Контрагент = Параметры.Контрагент;
		КонецЕсли;
	ИначеЕсли ЗапретРедактирования И Элементы.Контрагент.СписокВыбора.Количество()>0 Тогда //Для Web интерфейса
		Объект.Контрагент =  Элементы.Контрагент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&Насервере
Процедура ЗаполнитьТекущегоПомощникаУправляющего();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизическоеЛицо
	|ИЗ
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего) ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	РолиПользователейСоставРоли.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийПомощник = Выборка.ФизическоеЛицо;
		
	Иначе
		
		ТекущийПомощник = Справочники.ФизическиеЛица.ПустаяСсылка();
		
	КонецЕсли;

	Объект.Помощник = ТекущийПомощник;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы) 
	
    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции

&НаКлиенте
Процедура ОбновитьМодифицированностьФормы(Признак = Неопределено)
	
	Если Признак = Неопределено Тогда
		
		Если ТекущаяСтраницаИндекс = 0 Тогда
			НайденныеСтроки  = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Изменена", Истина));
		ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
			НайденныеСтроки  = ТаблицаЗаписейОплаты.НайтиСтроки(Новый Структура("Изменена", Истина));
		ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
			НайденныеСтроки  = ТаблицаЗаписейОплатыЗаявки.НайтиСтроки(Новый Структура("Изменена", Истина));
		КонецЕсли;
		
		Признак = НайденныеСтроки.Количество() > 0;
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Признак;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкиСервер()
	
	Если ТекущаяСтраницаИндекс = 1 Тогда
		ЭтаФорма.Команды.КомандаОтбор1.Подсказка = "Не подтвержденные помощником";
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
		ЭтаФорма.Команды.КомандаОтбор1.Подсказка = "Не подтвержденные помощником";
		ЭтаФорма.Команды.КомандаОтбор4.Подсказка = "Пересечение периодов";
	Иначе
		ЭтаФорма.Команды.КомандаОтбор1.Подсказка = "Отсутствие отметки прихода/ухода";
		ЭтаФорма.Команды.КомандаОтбор4.Подсказка = "Отклонения";
	КонецЕсли;
	
КонецПроцедуры
	
#Область ВзаимодействиеСРегистром

&НаСервереБезКонтекста
Функция ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураЗаписи)
	
	Возврат РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураЗаписи);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиЖурналУчетаПоДням(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ)
	
	РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписьРегистраЖурналУчетаПоДням(СтруктураЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьМенеджерЗаписи();
	
	Для каждого ЭлементСтруктуры Из СтруктураЗаписи Цикл
		МенеджерЗаписи[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;     
	КонецЦикла;

	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось удалить запись регистра ""Журнал учета сотрудников (аутсорсинг)""";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовуюЗаписьЖурналаУчета(СтруктураПараметров, Отказ)
	
	Отказ = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПроверитьВозможностьРедактированияПеродаПоСотруднику(СтруктураПараметров.ДатаПрихода, СтруктураПараметров.Сотрудник);
	
	Если Не Отказ Тогда
		
		МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураПараметров);
		
		ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка)
	
	РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ОчиститьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбщие

&НаСервере
Функция ПолучитьЗаполнитьОсновнойЗапросСервер(Порядок)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник
	|ПОМЕСТИТЬ ВТ_РолиПомощников
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка)
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|			И (РолиПользователейТипыРолей.ТипРоли.Код = ""PomoshnikTerrUpravlyushego"")
	|			И ((РолиПользователейТипыРолей.ТипРоли.Код = ""PomoshnikTerrUpravlyushego"")
	|             ИЛИ (РолиПользователейТипыРолей.ТипРоли.Код = ""PomoshnikStorRozn""))
	//--- AK suvv
	|			И (ВЫБОР
	|				КОГДА &Помощник <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА РолиПользователейСоставРоли.Сотрудник = &Помощник
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_РолиПомощников.Сотрудник КАК Помощник,
	|	СоответствиеОбъектРольСрезПоследних.Объект КАК ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_ТорговыеТочкиПомощника
	|ИЗ
	|	ВТ_РолиПомощников КАК ВТ_РолиПомощников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|				&ТекущаяДата,
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
	|				(ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
	|				или ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
	//--- AK suvv
	|					И Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	|					И (&ВсеТорговыеТочки
	|						ИЛИ Объект = &ТорговаяТочка)
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|					И ТипРолиID = ""PomoshnikTerrUpravlyushego"") КАК СоответствиеОбъектРольСрезПоследних
	|					И (ТипРолиID = ""PomoshnikTerrUpravlyushego"" ИЛИ ТипРолиID = ""PomoshnikStorRozn"")) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = ВТ_РолиПомощников.Ссылка)
	|ГДЕ
	|	НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников,
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент
	|ПОМЕСТИТЬ ВТ_ГруппыСотрудников
	|ИЗ
	|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(
	|			&ДатаОкончания,
	|			&ВсеКонтрагенты
	|				ИЛИ Контрагент = &Контрагент) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников,
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельРаботыСотрудниковАутсорсинг.Период,
	|	ТабельРаботыСотрудниковАутсорсинг.Сотрудник,
	|	ТабельРаботыСотрудниковАутсорсинг.ТорговаяТочка,
	|	ТабельРаботыСотрудниковАутсорсинг.КоличествоЧасов,
	|	ТабельРаботыСотрудниковАутсорсинг.Должность,
	|	ВТ_ГруппыСотрудников.Контрагент
	|ПОМЕСТИТЬ ВТ_ТабельРаботыАутсорсинг
	|ИЗ
	|	ВТ_ГруппыСотрудников КАК ВТ_ГруппыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельРаботыСотрудниковАутсорсинг КАК ТабельРаботыСотрудниковАутсорсинг
	|		ПО ВТ_ГруппыСотрудников.ГруппаСотрудников = ТабельРаботыСотрудниковАутсорсинг.ГруппаСотрудников
	|ГДЕ
	|	ТабельРаботыСотрудниковАутсорсинг.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (&ВсеТорговыеТочки
	|			ИЛИ ТабельРаботыСотрудниковАутсорсинг.ТорговаяТочка = &ТорговаяТочка)
	|	И (&ВсеПомощники
	|			ИЛИ ТабельРаботыСотрудниковАутсорсинг.ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					ВТ_ТорговыеТочкиПомощника.ТорговаяТочка
	|				ИЗ
	|					ВТ_ТорговыеТочкиПомощника))
	|	И (&ВсеДолжности
	|			ИЛИ ТабельРаботыСотрудниковАутсорсинг.Должность = &Должность)
	|	И (&ВсеСотрудники
	|			ИЛИ ТабельРаботыСотрудниковАутсорсинг.Сотрудник = &Сотрудник)
	|	И (&ВсеМенеджеры
	|			ИЛИ ТабельРаботыСотрудниковАутсорсинг.Сотрудник.ОтветственныйМенеджер = &Менеджер)
	|	И ТабельРаботыСотрудниковАутсорсинг.КоличествоЧасов > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ) КАК Дата,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода КАК ДатаПрихода,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода <> &ПустаяДата
	|				И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаУхода <> &ПустаяДата
	|			ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаУхода, СЕКУНДА) / 3600 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отработано,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник КАК Сотрудник,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаУхода,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Тип,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент КАК Контрагент,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка КАК ТорговаяТочка,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПоМагазину,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоПомощником,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоМагазином,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоОплата,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Помощник КАК Помощник,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода <> &ПустаяДата
	|				И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаУхода <> &ПустаяДата
	|			ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаУхода, СЕКУНДА) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноСекунд,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПоМагазину * 3600 КАК ПоМагазинуСекунд,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.idЗаписиПриход,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.idЗаписиУход,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник.ИД,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги
	|ПОМЕСТИТЬ ВТ_ЖурналПоДням
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (&ВсеКонтрагенты
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент = &Контрагент)
	|	И (&ВсеТорговыеТочки
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка = &ТорговаяТочка)
	|	И (&ВсеПомощники
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					ВТ_ТорговыеТочкиПомощника.ТорговаяТочка
	|				ИЗ
	|					ВТ_ТорговыеТочкиПомощника))
	|	И (&ВсеДолжности
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность = &Должность)
	|	И (&ВсеСотрудники
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = &Сотрудник)
	|	И (&ВсеМенеджеры
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник.ОтветственныйМенеджер = &Менеджер)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.Дата, ВТ_ТабельРаботыАутсорсинг.Период) КАК Дата,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.ДатаПрихода, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрихода,
	|	ВТ_ЖурналПоДням.Отработано,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.Сотрудник, ВТ_ТабельРаботыАутсорсинг.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.ДатаУхода, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУхода,
	|	ВТ_ЖурналПоДням.Тип,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.Контрагент, ВТ_ТабельРаботыАутсорсинг.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.ТорговаяТочка, ВТ_ТабельРаботыАутсорсинг.ТорговаяТочка) КАК ТорговаяТочка,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.Должность, ВТ_ТабельРаботыАутсорсинг.Должность) КАК Должность,
	|	ВТ_ЖурналПоДням.ПоМагазину,
	|	ВТ_ЖурналПоДням.ПоМагазину КАК ПоМагазину1,
	|	ВТ_ЖурналПоДням.ПодтвержденоПомощником,
	|	ВТ_ЖурналПоДням.ПодтвержденоПомощником КАК ПодтвержденоПомощником1,
	|	ВТ_ЖурналПоДням.ПодтвержденоМагазином,
	|	ВТ_ЖурналПоДням.ПодтвержденоМагазином КАК ПодтвержденоМагазином1,
	|	ВТ_ЖурналПоДням.ПодтвержденоОплата,
	|	ВТ_ЖурналПоДням.ПодтвержденоОплата КАК ПодтвержденоОплата1,
	|	ВТ_ЖурналПоДням.Помощник КАК Помощник,
	|	ВЫРАЗИТЬ(ВТ_ЖурналПоДням.Отработано - ВТ_ЖурналПоДням.ПоМагазину КАК ЧИСЛО(15, 2)) КАК Отклонение,
	|	ВЫБОР
	|		КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд)) / 100 + 0
	|	КОНЕЦ КАК ОтработаноПредставление,
	|	ВЫБОР
	|		КОГДА ВТ_ЖурналПоДням.ПоМагазинуСекунд = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд < ВТ_ЖурналПоДням.ПоМагазинуСекунд
	|					ТОГДА -(РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ПоМагазинуСекунд - ВТ_ЖурналПоДням.ОтработаноСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ПоМагазинуСекунд - ВТ_ЖурналПоДням.ОтработаноСекунд)) / 100 + ВЫБОР
	|							КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд > 0
	|								ТОГДА 0
	|							ИНАЧЕ 0
	|						КОНЕЦ)
	|				ИНАЧЕ РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд - ВТ_ЖурналПоДням.ПоМагазинуСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд - ВТ_ЖурналПоДням.ПоМагазинуСекунд)) / 100 + ВЫБОР
	|						КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд > 0
	|							ТОГДА 0
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОтклонениеПредставление,
	|	ВТ_ТабельРаботыАутсорсинг.КоличествоЧасов КАК ПоГрафику,
	|	ВТ_ЖурналПоДням.НомерТочки,
	|	ВТ_ЖурналПоДням.СотрудникИД,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.idЗаписиПриход, """") КАК idЗаписиПриход,
	|	ЕСТЬNULL(ВТ_ЖурналПоДням.idЗаписиУход, """") КАК idЗаписиУход,
	|	ВТ_ЖурналПоДням.ЗаявкаНаУслуги
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	ВТ_ЖурналПоДням КАК ВТ_ЖурналПоДням
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТабельРаботыАутсорсинг КАК ВТ_ТабельРаботыАутсорсинг
	|		ПО ВТ_ЖурналПоДням.Дата = ВТ_ТабельРаботыАутсорсинг.Период
	|			И ВТ_ЖурналПоДням.Сотрудник = ВТ_ТабельРаботыАутсорсинг.Сотрудник
	|			И ВТ_ЖурналПоДням.ТорговаяТочка = ВТ_ТабельРаботыАутсорсинг.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабИтоговаяРасчет.Год КАК Год,
	|	ТабИтоговаяРасчет.Месяц КАК Месяц,
	|	ТабИтоговаяРасчет.Контрагент КАК Контрагент,
	|	ТабИтоговаяРасчет.Сотрудник КАК Сотрудник,
	|	ТабИтоговаяРасчет.ТорговаяТочка КАК ТорговаяТочка,
	|	ТабИтоговаяРасчет.Помощник КАК Помощник,
	|	ТабИтоговаяРасчет.Дата,
	|	ТабИтоговаяРасчет.ДатаПрихода,
	|	ТабИтоговаяРасчет.Отработано КАК Отработано,
	|	ТабИтоговаяРасчет.ДатаУхода,
	|	ТабИтоговаяРасчет.Тип,
	|	ТабИтоговаяРасчет.Должность КАК Должность,
	|	ТабИтоговаяРасчет.ПоМагазину КАК ПоМагазину,
	|	ТабИтоговаяРасчет.ПоМагазину1,
	|	ТабИтоговаяРасчет.ПодтвержденоПомощником КАК ПодтвержденоПомощником,
	|	ТабИтоговаяРасчет.ПодтвержденоПомощником1,
	|	ТабИтоговаяРасчет.ПодтвержденоМагазином КАК ПодтвержденоМагазином,
	|	ТабИтоговаяРасчет.ПодтвержденоМагазином1,
	|	ТабИтоговаяРасчет.ПодтвержденоОплата КАК ПодтвержденоОплата,
	|	ТабИтоговаяРасчет.ПодтвержденоОплата1 КАК ПодтвержденоОплата1,
	|	ТабИтоговаяРасчет.ЗаявкаНаУслуги КАК ЗаявкаНаУслуги,
	|	ТабИтоговаяРасчет.Отклонение,
	|	ТабИтоговаяРасчет.ОтработаноПредставление,
	|	ТабИтоговаяРасчет.ОтклонениеПредставление,
	|	ТабИтоговаяРасчет.ПоГрафику,
	|	ТабИтоговаяРасчет.НомерТочки,
	|	ТабИтоговаяРасчет.СотрудникИД,
	|	ТабИтоговаяРасчет.idЗаписиПриход,
	|	ТабИтоговаяРасчет.idЗаписиУход,
	|	ТабИтоговаяРасчет.Состояние,
	|	ТабИтоговаяРасчет.НаОплату КАК НаОплату,
	|	ТабИтоговаяРасчет.ОтборНетОтметки,
	|	ТабИтоговаяРасчет.ОтборОтработано,
	|	ТабИтоговаяРасчет.ОтборОтклонение КАК ОтборОтклонение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГОД(ВТ_Итоговая.Дата) КАК Год,
	|		МЕСЯЦ(ВТ_Итоговая.Дата) КАК Месяц,
	|		ВТ_Итоговая.Контрагент КАК Контрагент,
	|		ВТ_Итоговая.Сотрудник КАК Сотрудник,
	|		ВТ_Итоговая.ТорговаяТочка КАК ТорговаяТочка,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Итоговая.Помощник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(ВТ_ТорговыеТочкиПомощника.Помощник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|			ИНАЧЕ ВТ_Итоговая.Помощник
	|		КОНЕЦ КАК Помощник,
	|		ВТ_Итоговая.Дата КАК Дата,
	|		ВТ_Итоговая.ДатаПрихода КАК ДатаПрихода,
	|		ЕСТЬNULL(ВТ_Итоговая.Отработано, 0) КАК Отработано,
	|		ВТ_Итоговая.ДатаУхода КАК ДатаУхода,
	|		ВТ_Итоговая.Тип КАК Тип,
	|		ВТ_Итоговая.Должность КАК Должность,
	|		ЕСТЬNULL(ВТ_Итоговая.ПоМагазину, 0) КАК ПоМагазину,
	|		ВТ_Итоговая.ПоМагазину1 КАК ПоМагазину1,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоПомощником, ЛОЖЬ) КАК ПодтвержденоПомощником,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоПомощником1, ЛОЖЬ) КАК ПодтвержденоПомощником1,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоМагазином, ЛОЖЬ) КАК ПодтвержденоМагазином,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоМагазином1, ЛОЖЬ) КАК ПодтвержденоМагазином1,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоОплата, ЛОЖЬ) КАК ПодтвержденоОплата,
	|		ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоОплата1, ЛОЖЬ) КАК ПодтвержденоОплата1,
	|		ЕСТЬNULL(ВТ_Итоговая.ЗаявкаНаУслуги, ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)) КАК ЗаявкаНаУслуги,
	|		ЕСТЬNULL(ВТ_Итоговая.Отклонение, 0) КАК Отклонение,
	|		ВТ_Итоговая.ОтработаноПредставление КАК ОтработаноПредставление,
	|		ВТ_Итоговая.ОтклонениеПредставление КАК ОтклонениеПредставление,
	|		ВТ_Итоговая.ПоГрафику КАК ПоГрафику,
	|		ВТ_Итоговая.НомерТочки КАК НомерТочки,
	|		ВТ_Итоговая.СотрудникИД КАК СотрудникИД,
	|		ВТ_Итоговая.idЗаписиПриход КАК idЗаписиПриход,
	|		ВТ_Итоговая.idЗаписиУход КАК idЗаписиУход,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Итоговая.ЗаявкаНаУслуги, ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА ВТ_Итоговая.ПодтвержденоОплата
	|				ТОГДА 1
	|			КОГДА ВТ_Итоговая.ПодтвержденоПомощником
	|				ТОГДА 2
	|			КОГДА ВТ_Итоговая.ПоМагазину > 0
	|					И (ВТ_Итоговая.Отклонение >= 0.5
	|						ИЛИ -ВТ_Итоговая.Отклонение >= 0.5)
	|				ТОГДА 5
	|			КОГДА ВТ_Итоговая.ПодтвержденоМагазином
	|					ИЛИ ВТ_Итоговая.ПоМагазину > 0
	|				ТОГДА 3
	|			КОГДА ВТ_Итоговая.idЗаписиПриход <> """"
	|					ИЛИ ВТ_Итоговая.idЗаписиУход <> """"
	|				ТОГДА 4
	|			ИНАЧЕ 8
	|		КОНЕЦ КАК Состояние,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Итоговая.ПоМагазину, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Итоговая.ПоМагазину, 0)
	|			КОГДА ЕСТЬNULL(ВТ_Итоговая.ПоМагазину, 0) = 0
	|					И ЕСТЬNULL(ВТ_Итоговая.ПодтвержденоМагазином, ЛОЖЬ)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_Итоговая.Отработано, 0) > 0
	|						ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_Итоговая.Отработано, 0) КАК ЧИСЛО(10, 0))
	|					ИНАЧЕ ЕСТЬNULL(ВТ_Итоговая.ПоГрафику, 0)
	|				КОНЕЦ
	|		КОНЕЦ КАК НаОплату,
	|		ВТ_Итоговая.idЗаписиПриход = """"
	|			ИЛИ ВТ_Итоговая.idЗаписиУход = """" КАК ОтборНетОтметки,
	|		ЕСТЬNULL(ВТ_Итоговая.Отработано, 0) > 0 КАК ОтборОтработано,
	|		ЕСТЬNULL(ВТ_Итоговая.ПоМагазину, 0) > 0
	|			И (ВТ_Итоговая.Отклонение >= 0.5
	|				ИЛИ -ВТ_Итоговая.Отклонение >= 0.5) КАК ОтборОтклонение
	|	ИЗ
	|		ВТ_Итоговая КАК ВТ_Итоговая
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТорговыеТочкиПомощника КАК ВТ_ТорговыеТочкиПомощника
	|			ПО ВТ_Итоговая.ТорговаяТочка = ВТ_ТорговыеТочкиПомощника.ТорговаяТочка) КАК ТабИтоговаяРасчет";
	
	Если РежимОчисткиМусора Тогда
		
		//Формирование основной временной таблицы с дублями строк
		ТекстОснЗапроса = "НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL";
		
		ТекстДопЗапроса = 
		" ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ) КАК День,
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник КАК Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода) КАК ДатаПрихода,
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_Даты
		|ИЗ
		|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИсключитьДолжность <> ЗНАЧЕНИЕ(Справочник.ДолжностиВнештатныхСотрудников.ПустаяСсылка)
		|				ТОГДА ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность <> &ИсключитьДолжность
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (&ВсеКонтрагенты
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент = &Контрагент)
		|	И (&ВсеТорговыеТочки
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка = &ТорговаяТочка)
		|	И (&ВсеПомощники
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка В
		|				(ВЫБРАТЬ
		|					ВТ_ТорговыеТочкиПомощника.ТорговаяТочка
		|				ИЗ
		|					ВТ_ТорговыеТочкиПомощника))
		|	И (&ВсеДолжности
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность = &Должность)
		|	И (&ВсеСотрудники
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = &Сотрудник)
		|	И (&ВсеМенеджеры
		|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник.ОтветственныйМенеджер = &Менеджер)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ),
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник,
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Даты.День КАК День_,
		|	ВТ_Даты.Сотрудник КАК Сотрудник_,
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода КАК ДатаПрихода_,
		|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка КАК ТорговаяТочка_
		|ПОМЕСТИТЬ ВТ_ДУБЛИ
		|ИЗ
		|	ВТ_Даты КАК ВТ_Даты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
		|		ПО (ВТ_Даты.День = НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ))
		|			И ВТ_Даты.Сотрудник = ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник
		|			И ВТ_Даты.ТорговаяТочка = ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка
		|";
		
		//Добавление временной таблицы
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстОснЗапроса, ТекстОснЗапроса + " ; "+ ТекстДопЗапроса);
		
		//Соединение с итоговой таблицей основного запроса
		ТекстОснЗапроса = "
		|	(ВЫБРАТЬ
		|		ГОД(ВТ_Итоговая.Дата) КАК Год";

		ТекстДопЗапроса = "
		|	ВТ_ДУБЛИ КАК ВТ_ДУБЛИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГОД(ВТ_Итоговая.Дата) КАК Год";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстОснЗапроса, ТекстДопЗапроса);
		
		//Соединение с итоговой таблицей основного запроса
		ТекстДопЗапроса = "	
		|		ПО ВТ_ДУБЛИ.Сотрудник_ = ТабИтоговаяРасчет.Сотрудник
		|			И ВТ_ДУБЛИ.ДатаПрихода_ = ТабИтоговаяРасчет.ДатаПрихода
		|			И ВТ_ДУБЛИ.ТорговаяТочка_ = ТабИтоговаяРасчет.ТорговаяТочка
		|ГДЕ
		|	НЕ ТабИтоговаяРасчет.Контрагент ЕСТЬ NULL";
		
		Запрос.Текст = Запрос.Текст + ТекстДопЗапроса;
		
		Запрос.УстановитьПараметр("ИсключитьДолжность", ИсключитьДолжность);
		
	КонецЕсли;
	
	Если Порядок = "Общий" Тогда
		
		Запрос.Текст = Запрос.Текст + " 
		
		|УПОРЯДОЧИТЬ ПО
		|	Год,
		|	Месяц,
		|	Контрагент,
		|	ТорговаяТочка,
		|	Сотрудник,
		|	Дата,
		|	ДатаПрихода
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	ИначеЕсли Порядок = "Оплата" Тогда
		
		Запрос.Текст = Запрос.Текст + " 
		
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|   Помощник,
		|	ТорговаяТочка,
		|	Сотрудник,
		|	Год,
		|	Месяц,
		|	ДатаПрихода
		|ИТОГИ
		|	СУММА(Отработано),
		|	СУММА(ПоМагазину),
		|	МАКСИМУМ(Должность),
		|	МИНИМУМ(Помощник),
		|	МИНИМУМ(ПодтвержденоПомощником),
		|	МИНИМУМ(ПодтвержденоМагазином),
		|	МИНИМУМ(ПодтвержденоОплата),
		|	МИНИМУМ(ПодтвержденоОплата1),
		|	МИНИМУМ(ЗаявкаНаУслуги),
		|	МАКСИМУМ(ОтборОтклонение),
		|	СУММА(НаОплату)
		|ПО
		|	Контрагент,
		|   Помощник,
		|   Должность,
		|	ТорговаяТочка,
		|   Сотрудник,
		|	Год,
		|	Месяц
		|АВТОУПОРЯДОЧИВАНИЕ
		|";

	ИначеЕсли Порядок = "Заявка" Тогда
		
		//Добавление расчета сумм по тарифам
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабИтоговаяРасчет.ОтборОтклонение КАК ОтборОтклонение", 
		"ТабИтоговаяРасчет.ОтборОтклонение КАК ОтборОтклонение," + "
		|   ТабИтоговаяРасчет.ЗаявкаНаУслуги КАК ПересчениеПериодов,
		|	ТарифыСотрудниковАутсорсингСрезПоследних.Должность.Услуга КАК Услуга,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	ТарифыСотрудниковАутсорсингСрезПоследних.Тариф КАК Цена,
		|	ТабИтоговаяРасчет.НаОплату * ТарифыСотрудниковАутсорсингСрезПоследних.Тариф КАК Сумма");

		Запрос.Текст = Запрос.Текст + "	
		| ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыСотрудниковАутсорсинг.СрезПоследних КАК ТарифыСотрудниковАутсорсингСрезПоследних
		|		ПО ТабИтоговаяРасчет.Контрагент = ТарифыСотрудниковАутсорсингСрезПоследних.Контрагент
		|			И ТабИтоговаяРасчет.Должность = ТарифыСотрудниковАутсорсингСрезПоследних.Должность
		| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТабИтоговаяРасчет.Должность.Услуга = ЕдиницыИзмерения.Владелец
		|		И ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код = ""797""";
		
		//Добавление итогов
		Запрос.Текст = Запрос.Текст + " 
		
		|УПОРЯДОЧИТЬ ПО
		|	ТабИтоговаяРасчет.Контрагент,
		|	ТабИтоговаяРасчет.Помощник,
		|	ТабИтоговаяРасчет.Контрагент,
		|	ТабИтоговаяРасчет.ТорговаяТочка,
		|	ТабИтоговаяРасчет.Должность
		|ИТОГИ
		|   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПересчениеПериодов),
		|	МАКСИМУМ(Услуга),
		|	МАКСИМУМ(ЕдиницаИзмерения),
		|	МИНИМУМ(ПодтвержденоПомощником),
		|	МИНИМУМ(ПодтвержденоОплата),
		|	МИНИМУМ(ЗаявкаНаУслуги),
		|	СУММА(НаОплату),
		|	МИНИМУМ(Тариф),
		|	СУММА(Сумма)
		|ПО
		|	Контрагент,
		|	Помощник,
		|	ТорговаяТочка,
		|	Должность
		|АВТОУПОРЯДОЧИВАНИЕ
		|";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала"   , Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ПустаяДата",    Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата());
	Запрос.УстановитьПараметр("ВсеКонтрагенты", НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("Контрагент"	  , Объект.Контрагент);
	Запрос.УстановитьПараметр("ВсеДолжности", НЕ ЗначениеЗаполнено(Объект.Должность));
	Запрос.УстановитьПараметр("Должность"	, Объект.Должность);
	Запрос.УстановитьПараметр("ВсеМенеджеры", НЕ ЗначениеЗаполнено(Объект.Менеджер));
	Запрос.УстановитьПараметр("Менеджер"    , Объект.Менеджер);
	Запрос.УстановитьПараметр("ВсеТорговыеТочки", НЕ ЗначениеЗаполнено(Объект.ТорговаяТочка));
	Запрос.УстановитьПараметр("ТорговаяТочка"   , Объект.ТорговаяТочка);
	Запрос.УстановитьПараметр("ВсеПомощники", НЕ ЗначениеЗаполнено(Объект.Помощник));
	Запрос.УстановитьПараметр("Помощник"   , Объект.Помощник);
	Запрос.УстановитьПараметр("ВсеСотрудники", НЕ ЗначениеЗаполнено(Объект.Сотрудник));
	Запрос.УстановитьПараметр("Сотрудник"    , Объект.Сотрудник);

	//Оптимизация работы запроса при использовании быстрых отборов
	Если ТипЗнч(ОтборПоДатеСтруктура) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ОтборПоДатеСтруктура.Свойство("Должность") Тогда
			Запрос.УстановитьПараметр("ДатаНачала"   , Период.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
		Иначе
			Запрос.УстановитьПараметр("ДатаНачала"   , НачалоДня(ОтборПоДатеСтруктура.Дата));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ОтборПоДатеСтруктура.Дата));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВсеКонтрагенты", Ложь);
		Запрос.УстановитьПараметр("Контрагент", ОтборПоДатеСтруктура.Контрагент);
		Запрос.УстановитьПараметр("ВсеТорговыеТочки", Ложь);
		Запрос.УстановитьПараметр("ТорговаяТочка"   , ОтборПоДатеСтруктура.ТорговаяТочка);
		Запрос.УстановитьПараметр("ВсеСотрудники", Ложь);
		Запрос.УстановитьПараметр("Сотрудник"    , ОтборПоДатеСтруктура.Сотрудник);

	ИначеЕсли ТипЗнч(ОтборПоТорговойТочкеСтруктура) = Тип("ФиксированнаяСтруктура") Тогда
		
		Запрос.УстановитьПараметр("ВсеКонтрагенты", Ложь);
		Запрос.УстановитьПараметр("Контрагент", ОтборПоТорговойТочкеСтруктура.Контрагент);
		Запрос.УстановитьПараметр("ВсеДолжности", Ложь);
		Запрос.УстановитьПараметр("Должность"	, ОтборПоТорговойТочкеСтруктура.Должность);
		Запрос.УстановитьПараметр("ВсеТорговыеТочки", Ложь);
		Запрос.УстановитьПараметр("ТорговаяТочка"   , ОтборПоТорговойТочкеСтруктура.ТорговаяТочка);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСотрудникаПоЧастиТекста(Текст)
	
	Возврат ПолучитьДанныеВыбора(Тип("СправочникСсылка.СотрудникиАутсорсинг"), 
		Новый Структура("ДополнительныеПараметры, ТекстПоиска, Контрагент", "Контрагент", Текст, Объект.Контрагент));
	
КонецФункции // ПолучитьСотрудникаЧастиТекста()

&НаКлиенте
Функция ДобавитьКДатеВремяКлиент(ТекущаяДата, ТекущееВремя, ПолучитьВремя = Ложь)
	
	Возврат ТекущееВремя; //Убрать формат времени
	
	Если ПолучитьВремя Тогда
		Возврат Дата(1,1,1) + Час(ТекущееВремя)*3600 + Минута(ТекущееВремя)*60 + Секунда(ТекущееВремя) 
	Иначе	
		Возврат ТекущаяДата + Час(ТекущееВремя)*3600 + Минута(ТекущееВремя)*60 + Секунда(ТекущееВремя) 
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьКДатеВремяСервер(ТекущаяДата, ТекущееВремя, ПолучитьВремя = Ложь)
	
	Возврат ТекущееВремя; //Убрать формат времени

	Если ПолучитьВремя Тогда
		Возврат Дата(1,1,1) + Час(ТекущееВремя)*3600 + Минута(ТекущееВремя)*60 + Секунда(ТекущееВремя) 
	Иначе	
		Возврат ТекущаяДата + Час(ТекущееВремя)*3600 + Минута(ТекущееВремя)*60 + Секунда(ТекущееВремя) 
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьПредставлениеВремениКлиент(Знач ЗначениеВремени)
	
	 Представление = "";
	 
	 Если ЗначениеЗаполнено(ЗначениеВремени) Тогда
		 
		 Если Макс(ЗначениеВремени, - ЗначениеВремени) - Цел(Макс(ЗначениеВремени, - ЗначениеВремени)) >= 0.6  Тогда
			 ЗначениеВремени = ?(ЗначениеВремени < 0, Цел(ЗначениеВремени) - 1, Цел(ЗначениеВремени) + 1);
		 КонецЕсли;
		 
		 Представление = Строка(Формат(Цел(ЗначениеВремени),"ЧЦ=2; ЧДЦ=; ЧРД=.; ЧН=00")) + " ч. " + Строка(Прав(Формат(Цел(ЗначениеВремени)-ЗначениеВремени, "ЧЦ=4; ЧДЦ=2; ЧН=00"), 2)) + " мин.";
		 
	 КонецЕсли;
	 
	 Возврат Представление;  
	
КонецФункции

&НаСервере
Функция ПреобразоватьПредставлениеВремениСервер(Знач ЗначениеВремени)
	
	 Представление = "";
	 
	 Если ЗначениеЗаполнено(ЗначениеВремени) Тогда
		 
		 Если Макс(ЗначениеВремени, - ЗначениеВремени) - Цел(Макс(ЗначениеВремени, - ЗначениеВремени)) >= 0.6  Тогда
			 ЗначениеВремени = ?(ЗначениеВремени < 0, Цел(ЗначениеВремени) - 1, Цел(ЗначениеВремени) + 1);
		 КонецЕсли;
		 
		 Представление = Строка(Формат(Цел(ЗначениеВремени),"ЧЦ=2; ЧДЦ=; ЧРД=.; ЧН=00")) + " ч. " + Строка(Прав(Формат(Цел(ЗначениеВремени)-ЗначениеВремени, "ЧЦ=4; ЧДЦ=2; ЧН=00"), 2)) + " мин.";
		 
	 КонецЕсли;
	 
	 Возврат Представление; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПредставленийСерверБезКонтекста(СтруктураПараметров)
	
	СтруктураПредставлений = Новый Структура("ОтработаноПредставление, ОтклонениеПредставление", "", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаПрихода) ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаУхода) Тогда
		
		СтруктураПредставлений.ОтработаноПредставление = "";
		 
		СтруктураПредставлений.ОтклонениеПредставление = ?(ЗначениеЗаполнено(СтруктураПараметров.ПоМагазину), "" + СтруктураПараметров.ПоМагазину + " ч." + Строка(Прав(Формат(0, "ЧЦ=4; ЧДЦ=2; ЧН=00"), 2)) + " мин.","");
		
		Возврат СтруктураПредставлений;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ДатаПрихода <> &ПустаяДата
	|				ИЛИ &ДатаУхода <> &ПустаяДата
	|			ТОГДА РАЗНОСТЬДАТ(&ДатаПрихода, &ДатаУхода, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноСекунд,
	|	&ЧасовПоМагазину * 3600 КАК ПоМагазинуСекунд
	|ПОМЕСТИТЬ ВТ_ЖурналПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд = 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд)) / 100 + 0
	|	КОНЕЦ КАК ОтработаноПредставление,
	|	ВЫБОР
	|		КОГДА ВТ_ЖурналПоДням.ПоМагазинуСекунд = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд < ВТ_ЖурналПоДням.ПоМагазинуСекунд
	|					ТОГДА -(РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ПоМагазинуСекунд - ВТ_ЖурналПоДням.ОтработаноСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ПоМагазинуСекунд - ВТ_ЖурналПоДням.ОтработаноСекунд)) / 100 + ВЫБОР
	|							КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд > 0
	|								ТОГДА 0
	|							ИНАЧЕ 0
	|						КОНЕЦ)
	|				ИНАЧЕ РАЗНОСТЬДАТ(&ПустаяДата, ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд - ВТ_ЖурналПоДням.ПоМагазинуСекунд), ЧАС) + МИНУТА(ДОБАВИТЬКДАТЕ(&ПустаяДата, СЕКУНДА, ВТ_ЖурналПоДням.ОтработаноСекунд - ВТ_ЖурналПоДням.ПоМагазинуСекунд)) / 100 + ВЫБОР
	|						КОГДА ВТ_ЖурналПоДням.ОтработаноСекунд > 0
	|							ТОГДА 0
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОтклонениеПредставление
	|ИЗ
	|	ВТ_ЖурналПоДням КАК ВТ_ЖурналПоДням";
	
	Запрос.УстановитьПараметр("ДатаПрихода", СтруктураПараметров.ДатаПрихода);
	Запрос.УстановитьПараметр("ДатаУхода", СтруктураПараметров.ДатаУхода);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ЧасовПоМагазину", СтруктураПараметров.ПоМагазину);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЗначениеВремени = ВыборкаДетальныеЗаписи.ОтработаноПредставление;
		
		Если Макс(ЗначениеВремени, - ЗначениеВремени) - Цел(Макс(ЗначениеВремени, - ЗначениеВремени)) >= 0.6  Тогда
			ЗначениеВремени = ?(ЗначениеВремени < 0, Цел(ЗначениеВремени) - 1, Цел(ЗначениеВремени) + 1);
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеВремени) Тогда
			СтруктураПредставлений.ОтработаноПредставление = Строка(Формат(Цел(ЗначениеВремени),"ЧЦ=2; ЧДЦ=; ЧРД=.; ЧН=00")) + " ч. " + Строка(Прав(Формат(Цел(ЗначениеВремени)-ЗначениеВремени, "ЧЦ=4; ЧДЦ=2; ЧН=00"), 2)) + " мин.";
		Иначе
			СтруктураПредставлений.ОтработаноПредставление = "";
		КонецЕсли;
		
		ЗначениеВремени = ВыборкаДетальныеЗаписи.ОтклонениеПредставление;
		
		Если Макс(ЗначениеВремени, - ЗначениеВремени) - Цел(Макс(ЗначениеВремени, - ЗначениеВремени)) >= 0.6  Тогда
			ЗначениеВремени = ?(ЗначениеВремени < 0, Цел(ЗначениеВремени) - 1, Цел(ЗначениеВремени) + 1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеВремени) Тогда
			СтруктураПредставлений.ОтклонениеПредставление  = Строка(Формат(Цел(ЗначениеВремени),"ЧЦ=2; ЧДЦ=; ЧРД=.; ЧН=00")) + " ч. " + Строка(Прав(Формат(Цел(ЗначениеВремени)-ЗначениеВремени, "ЧЦ=4; ЧДЦ=2; ЧН=00"), 2)) + " мин.";         
		Иначе
			СтруктураПредставлений.ОтклонениеПредставление = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПредставлений;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьДополнительныеОтборы()
	
	Если ОтборПоДате Тогда
		Элементы.ТаблицаЗаписей.ОтборСтрок = ОтборПоДатеСтруктура;
		Возврат;
	ИначеЕсли ОтборПоТорговойТочке Тогда
		Элементы.ТаблицаЗаписейОплаты.ОтборСтрок = ОтборПоТорговойТочкеСтруктура;
		Возврат;
	КонецЕсли;
	
	СтруктураЦветовСтиля = Новый Структура("ЦветТекстаФормы, ЦветРамки");
	СтруктураЦветовСтиля = ПолучитьСтруктуруЦветовСтиляСервер(СтруктураЦветовСтиля);
	
	ДопИнформация = "";	
	
	Если ТекущаяСтраницаИндекс = 1 Тогда
		Таблица = "Оплаты";
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
		Таблица = "ОплатыЗаявки"; 
	Иначе
		Таблица = "";
	КонецЕсли;
	
	ДопИнформация = "";
	
	Сч = 0;
	Пока Сч < 7 Цикл
		Элементы["КомандаОтбор" + Сч].ЦветРамки = ?(Сч = ТекущийОтбор, СтруктураЦветовСтиля.ЦветТекстаФормы, СтруктураЦветовСтиля.ЦветРамки);
		Сч = Сч + 1;
	КонецЦикла;
	
	Если ТекущийОтбор = 1 Тогда
		Если ТекущаяСтраницаИндекс = 0 Тогда 
			Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ОтборНетОтметки", Истина);
			ДопИнформация = "Отсутствие отметки прихода/ухода";
		Иначе
			Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ПодтвержденоПомощником", Ложь);
			ДопИнформация = "Не подтверждено помощником";
		КонецЕсли;
	ИначеЕсли ТекущийОтбор = 2 Тогда
		Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ОтборОтработано", Истина);
		ДопИнформация = "Итого отработано";
	ИначеЕсли ТекущийОтбор = 3 Тогда
		Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ПодтвержденоМагазином", Истина);
		ДопИнформация = "Подтвержденные магазином";
	ИначеЕсли ТекущийОтбор = 4 Тогда
		Если ТекущаяСтраницаИндекс < 2 Тогда 
			Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ОтборОтклонение", Истина);
			ДопИнформация = "Отклонения";
		Иначе
			Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ПересчениеПериодов", Истина);
			ДопИнформация = "Пересечение периодов";
		КонецЕсли;
	ИначеЕсли ТекущийОтбор = 5 Тогда
		Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("ПодтвержденоПомощником", Истина);
		ДопИнформация = "Подтвержденные помощником";
	ИначеЕсли ТекущийОтбор = 6 Тогда
		Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Новый ФиксированнаяСтруктура("Изменена", Истина);
		ДопИнформация = "Измененные строки (не записанные)";
	Иначе
		Элементы["ТаблицаЗаписей" + Таблица].ОтборСтрок = Неопределено;
		ДопИнформация = "Все строки";
	КонецЕсли;
	
	Этаформа.ТекущийЭлемент = Элементы["ТаблицаЗаписей" + Таблица];
	
	Элементы.НадписьТекущийОтбор.Заголовок = "Отбор: " + ДопИнформация;  
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЦветовСтиляСервер(СтруктураЦветов)
	
	СтруктураЦветовСтиля = Новый Структура();
	Для каждого ЭлементСтруктуры Из СтруктураЦветов Цикл
		СтруктураЦветовСтиля.Вставить(ЭлементСтруктуры.Ключ, ЦветаСтиля[ЭлементСтруктуры.Ключ]);     
	КонецЦикла;
	
	Возврат СтруктураЦветовСтиля;
	
КонецФункции

&НаКлиенте
Процедура СменитьСтраницуПоИндексу(ИндексСтраницы)
	
	ТекущаяСтраницаИндекс = ИндексСтраницы;
	
	Элементы.ГруппаТаблицаЗаписейСтраницы.ТекущаяСтраница = Элементы["ГруппаТаблицаЗаписейСтраница" + ТекущаяСтраницаИндекс];
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеТекущейЯчейки()
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		ИмяТаблицы = "ТаблицаЗаписей";
		Если Элементы[ИмяТаблицы].ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, ИмяТаблицы,"");
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		ИмяТаблицы = "ТаблицаЗаписейОплаты";
		Если Элементы[ИмяТаблицы].ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, ИмяТаблицы,"");
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
		ИмяТаблицы = "ТаблицаЗаписейОплатыЗаявки";  
		Если Элементы[ИмяТаблицы].ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, ИмяТаблицы,"");
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если ИмяКолонки = "Сотрудник" ИЛИ ИмяКолонки = "Должность" Тогда
			ПоказатьЗначение(,Элементы[ИмяТаблицы].ТекущиеДанные[ИмяКолонки]);
		КонецЕсли;
	#Иначе
		ОткрытьЗначение(Элементы[ИмяТаблицы].ТекущиеДанные[ИмяКолонки]); 
	#КонецЕсли 
	
КонецПроцедуры

&НаСервере
Процедура ПервоначальноеЗаполнениеДокументаЗаявкаНаУслугиМатериалы(ДокументОбъект);

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительноеЗаполнениеДокументаЗаявкаНаУслугиМатериалы(ДокументОбъект, СтруктураПараметров);
	
	СтруктураПараметров = ПолучитьОсновныеПараметрыНастроекДокумента(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураПараметров);			
	
	//Заполнение счета учета из формы (програмный код из формы элемента справочника "Контрагенты", 
	//для исключения "расхождений" в заполнении при интерактивном редактировании документа
	МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ДокументОбъект.Дата, ДокументОбъект.СтатьяДДС, ДокументОбъект.Контрагент);
	
	Если МассивСчетов.Количество() = 1 Тогда
		ДокументОбъект.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
	Иначе
		ДокументОбъект.СчетУчетаРасчетов = Планысчетов.Финансовый.РасчетыСПоставщиками;
	КонецЕсли;
	// Заполнение счета из формы
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновныеПараметрыНастроекДокумента(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	Контрагенты.ОсновнойДоговорАутсорсинг КАК ДоговорКонтрагента,
	|	Контрагенты.ОсновнойДоговорАутсорсинг.Номер КАК НомерДоговора,
	|	Контрагенты.ОсновнойДоговорАутсорсинг.Дата КАК ДатаДоговора,
	|	Контрагенты.ОсновнойДоговорАутсорсинг.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Контрагенты.ОсновнойДоговорАутсорсинг.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|	КОНЕЦ КАК ВариантРасчетаНДС,
	|	Контрагенты.ОсновнойДоговорАутсорсинг.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	Контрагенты.СтавкаНДС,
	|	НастройкиПодсистемыАутсорсинг.ОсновнойЦФО КАК ЦФО,
	|	НастройкиПодсистемыАутсорсинг.ОсновнойАкцептант КАК Акцептант,
	|	НастройкиПодсистемыАутсорсинг.НазначениеПлатежа,
	|	НастройкиПодсистемыАутсорсинг.НастройкаДатыПлатежа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты,
	|	РегистрСведений.НастройкиПодсистемыАутсорсинг.СрезПоследних(&Период, Использовать) КАК НастройкиПодсистемыАутсорсинг
	|ГДЕ
	|	Контрагенты.Ссылка = &ТекущийКонтрагент
	|	И НастройкиПодсистемыАутсорсинг.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаПлатежа
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &Период
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, 15)
	|	И (ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) = 2
	|			ИЛИ ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) = 4)";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийКонтрагент", СтруктураПараметров.Контрагент);

	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = ПакетЗапросов[0]; //Заполнение основных параметров
	 
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий(); 
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураПараметров.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);      
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатЗапроса = ПакетЗапросов[1]; //Заполнение Даты платежа (ближайший рабочий Вторник или Четверг) 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(); 
		
		Выборка.Следующий();
				
		СтруктураПараметров.Вставить("ДатаПлатежа", Выборка.ДатаПлатежа);
		
	Иначе
		
		Сообщить(НСтр("ru = 'Не обнаружен ближайший рабочий Вторник или Четверг. Проверьте заполненность Регламентированного производственного календаря!';"));
		
	КонецЕсли;

	//Номер договора всегда отображаться с датой
	Если СтруктураПараметров.Свойство("НомерДоговора") И ЗначениеЗаполнено(СтруктураПараметров.ДатаДоговора) Тогда
		СтруктураПараметров.НомерДоговора = Строка(СтруктураПараметров.НомерДоговора) + Формат(СтруктураПараметров.ДатаДоговора, "ДФ=''' от'' dd.MM.yyyy ''г.'''");
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ТекстЗаголовка = "";
	
	Если ПолныйДоступ Тогда
		ТекстЗаголовка = ТекстЗаголовка + "(Полный доступ)";
	КонецЕсли;
	
	Если РежимОчисткиМусора Тогда
		ТекстЗаголовка = ТекстЗаголовка + "(Режим очистки)";
	КонецЕсли;
	
	Этаформа.АвтоЗаголовок = Ложь;
	
	Этаформа.Заголовок = "Журнал учета внештатных сотрудников " + ТекстЗаголовка;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеТаблицаЗаписей

&НаКлиенте
Процедура ОбновитьТаблицуЗаписейКлиент()
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		ОбновитьТаблицуЗаписейСервер();
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		ОбновитьТаблицуЗаписейОплатаСервер();
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
		ОбновитьТаблицуЗаписейОплатаЗаявкаСервер();
	КонецЕсли;
	
	ОбновитьИтогиТабличнойЧасти();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаписейСервер()

	ТаблицаЗаписей.Очистить();
	
	Запрос = ПолучитьЗаполнитьОсновнойЗапросСервер("Общий");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			//Причина заполнения таблицы через выборку - требование отображать отклонение в формате "ХХ ч. ХХ. мин."
			НоваяСтрока.ОтработаноПредставление = ПреобразоватьПредставлениеВремениСервер(Выборка.ОтработаноПредставление);
			НоваяСтрока.ОтклонениеПредставление = ПреобразоватьПредставлениеВремениСервер(Выборка.ОтклонениеПредставление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЗаписейПоЧекамКлиент()
	
	ЗаполнитьТаблицуЗаписейРегистраСервер("ПоЧекам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗаписейРегистраСервер(ВариантЗаполнения, СтруктураПараметров = Неопределено)
	
	Если ВариантЗаполнения = "ПоОтметкам" Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерТочки) Тогда
			СтруктураПараметров.НомерТочки = СтруктураПараметров.НомерТочки.НомерТочки;
		Иначе
			СтруктураПараметров.НомерТочки = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудник) Тогда
			СтруктураПараметров.Сотрудник = СтруктураПараметров.Сотрудник.ИД;
		Иначе
			СтруктураПараметров.Сотрудник = Неопределено;
		КонецЕсли;
		
		ПеренестиВМодульЗагрузитьДанныеПоОтметкамВнештатныхСотрудниковФронтол(СтруктураПараметров.НачалоПериода, СтруктураПараметров.КонецПериода, СтруктураПараметров);
		
	ИначеЕсли ВариантЗаполнения = "ПоЧекам" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналУчетаСотрудниковАутсорсинг.Контрагент,
		|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка,
		|	ЖурналУчетаСотрудниковАутсорсинг.Сотрудник,
		|	ЖурналУчетаСотрудниковАутсорсинг.Должность,
		|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки, ДЕНЬ) КАК День,
		|	МИНИМУМ(ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки) КАК Приход,
		|	МАКСИМУМ(ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки) КАК Уход
		|ПОМЕСТИТЬ ВТ_ТаблицаПоЧекам
		|ИЗ
		|	РегистрСведений.ЖурналУчетаСотрудниковАутсорсинг КАК ЖурналУчетаСотрудниковАутсорсинг
		|ГДЕ
		|	ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (&ВсеКонтрагенты
		|			ИЛИ ЖурналУчетаСотрудниковАутсорсинг.Контрагент = &Контрагент)
		|	И (&ВсеТорговыеТочки
		|			ИЛИ ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка = &ТорговаяТочка)
		|	И (&ВсеДолжности
		|			ИЛИ ЖурналУчетаСотрудниковАутсорсинг.Должность = &Должность)
		|	И (&ВсеСотрудники
		|			ИЛИ ЖурналУчетаСотрудниковАутсорсинг.Сотрудник = &Сотрудник)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналУчетаСотрудниковАутсорсинг.Сотрудник,
		|	ЖурналУчетаСотрудниковАутсорсинг.ТорговаяТочка,
		|	ЖурналУчетаСотрудниковАутсорсинг.Контрагент,
		|	ЖурналУчетаСотрудниковАутсорсинг.Должность,
		|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковАутсорсинг.ДатаОтметки, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоЧекам.Контрагент КАК Контрагент,
		|	ВТ_ДанныеПоЧекам.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_ДанныеПоЧекам.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеПоЧекам.Должность КАК Должность,
		|	ВТ_ДанныеПоЧекам.День,
		|	ВТ_ДанныеПоЧекам.Приход КАК ДатаПрихода,
		|	ВТ_ДанныеПоЧекам.Уход КАК ДатаУхода,
		|	ВЫБОР
		|		КОГДА ВТ_ДанныеПоЧекам.Приход <> &ПустаяДата
		|				И ВТ_ДанныеПоЧекам.Уход <> &ПустаяДата
		|			ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ВТ_ДанныеПоЧекам.Приход, ВТ_ДанныеПоЧекам.Уход, СЕКУНДА) / 3600 КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отработано,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОтраженияПриходаУходаПродавцов.ИзЧеков) КАК Тип
		|ИЗ
		|	ВТ_ТаблицаПоЧекам КАК ВТ_ДанныеПоЧекам
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ТорговаяТочка,
		|	Должность,
		|	Сотрудник,
		|	ВТ_ДанныеПоЧекам.Приход
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ДатаНачала"   , Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
		Запрос.УстановитьПараметр("ПустаяДата",    Дата(1,1,1));
		Запрос.УстановитьПараметр("ВсеКонтрагенты", НЕ ЗначениеЗаполнено(Объект.Контрагент));
		Запрос.УстановитьПараметр("Контрагент"	  , Объект.Контрагент);
		Запрос.УстановитьПараметр("ВсеДолжности"	, НЕ ЗначениеЗаполнено(Объект.Должность));
		Запрос.УстановитьПараметр("Должность"	    , Объект.Должность);
		Запрос.УстановитьПараметр("ВсеТорговыеТочки", НЕ ЗначениеЗаполнено(Объект.ТорговаяТочка));
		Запрос.УстановитьПараметр("ТорговаяТочка"   , Объект.ТорговаяТочка);
		Запрос.УстановитьПараметр("ВсеСотрудники", НЕ ЗначениеЗаполнено(Объект.Сотрудник));
		Запрос.УстановитьПараметр("Сотрудник"    , Объект.Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(Новый Структура("ДатаПрихода, Сотрудник",  Выборка.ДатаПрихода, Выборка.Сотрудник));
				
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				
				ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи,);
				
			КонецЦикла;
			
			ОбновитьТаблицуЗаписейСервер();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакИзмененияСтроки()

	Если ТекущаяСтраницаИндекс = 0 Тогда
		
		ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда 
			
			мФормаМодифицирована = ЭтаФорма.Модифицированность;
			
			СтруктураПолей = ПолучитьСтруктуруКонтролируемыхПолей();
			
			ТекущиеДанные.Изменена = Ложь;
			
			Для каждого Элемент Из СтруктураПолей Цикл
				Если ТекущиеДанные [Элемент.Ключ] <> ТекущиеДанные[Элемент.Ключ + "1"] Тогда
					ТекущиеДанные.Изменена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОбновитьПризнакиОтборов(ТекущиеДанные);
			
			ОбновитьМодифицированностьФормы();
			
		КонецЕсли;
		
	ИначеЕсли  ТекущаяСтраницаИндекс = 1 Тогда
		
		ТекущиеДанные = Элементы.ТаблицаЗаписейОплаты.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтруктураПолей = ПолучитьСтруктуруКонтролируемыхПолей();
			
			ТекущиеДанные.Изменена = Ложь;
			
			Для каждого Элемент Из СтруктураПолей Цикл
				Если ТекущиеДанные [Элемент.Ключ] <> ТекущиеДанные[Элемент.Ключ + "1"] Тогда
					ТекущиеДанные.Изменена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОбновитьМодифицированностьФормы();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакиОтборов(ТекущиеДанные)
	
	ТекущиеДанные.ОтборОтработано = ЗначениеЗаполнено(ТекущиеДанные.Отработано);
	ТекущиеДанные.ОтборОтклонение  = ЗначениеЗаполнено(ТекущиеДанные.ОтклонениеПредставление) И Макс(ТекущиеДанные.Отклонение, - ТекущиеДанные.Отклонение) > 0.5;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруКонтролируемыхПолей()
	
	СтруктураПолей = Новый Структура();
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		СтруктураПолей.Вставить("ПоМагазину");
		СтруктураПолей.Вставить("ПодтвержденоМагазином");
		СтруктураПолей.Вставить("ПодтвержденоПомощником");
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		СтруктураПолей.Вставить("ПодтвержденоОплата");
	КонецЕсли;
	
	Возврат СтруктураПолей;
	
КонецФункции // ПолучитьСтруктуруКонтролируемыхПолей()

&НаКлиенте
Процедура СохранитьИзмененныеСтрокиКлиент(Отказ = Ложь)
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		СохранитьИзмененныеСтрокиСервер(Отказ);
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		СохранитьИзмененныеСтрокиОплатыСервер(Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОбновитьМодифицированностьФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененныеСтрокиСервер(Отказ = Ложь)
	
	НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Изменена", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(Новый Структура("ДатаПрихода, Сотрудник",  ДобавитьКДатеВремяСервер(Строка.Дата, Строка.ДатаПрихода), Строка.Сотрудник));
			
			МенеджерЗаписи.Прочитать();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
			
			МенеджерЗаписи.ДатаПрихода = ДобавитьКДатеВремяСервер(Строка.Дата, Строка.ДатаПрихода);
			МенеджерЗаписи.ДатаУхода =   ДобавитьКДатеВремяСервер(Строка.Дата, Строка.ДатаУхода);
			
			Если ЗначениеЗаполнено(ТекущийПродавец) Тогда
				МенеджерЗаписи.Продавец = ТекущийПродавец;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийПомощник) Тогда
				МенеджерЗаписи.Помощник = ТекущийПомощник;
			КонецЕсли;
						
			ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);

			//Актуализация признаков контроля изменений 
			Если Не Отказ Тогда
				Строка.Изменена = Ложь;
				Строка.ПоМагазину1 = МенеджерЗаписи.ПоМагазину;
				Строка.ПодтвержденоМагазином1 = МенеджерЗаписи.ПодтвержденоМагазином;
				Строка.ПодтвержденоПомощником1 = МенеджерЗаписи.ПодтвержденоПомощником;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКонтекстногоМеню()

	Если Элементы.ТаблицаЗаписей.ТекущийЭлемент <> Неопределено Тогда
		
		ОтображатьКнопкиФлагов = Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя = "ТаблицаЗаписейПодтвержденоМагазином"
					ИЛИ Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя = "ТаблицаЗаписейПодтвержденоПомощником" И НЕ ЭтоПродавец И Не ЗапретРедактирования;
					
		Элементы.ТаблицаЗаписейКонтекстноеМенюУстановитьОтметки.Видимость = ОтображатьКнопкиФлагов;  
		Элементы.ТаблицаЗаписейКонтекстноеМенюСнятьОтметки.Видимость = ОтображатьКнопкиФлагов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиТабличнойЧасти()
	
	Возврат; //Не использовать расчет итогов
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы.ТаблицаЗаписейПоГрафику.ТекстПодвала = ТаблицаЗаписей.Итог("ПоГрафику");
		Элементы.ТаблицаЗаписей.ПодчиненныеЭлементы.ТаблицаЗаписейПоМагазину.ТекстПодвала = ТаблицаЗаписей.Итог("ПоМагазину");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАвтоматическоеОтображениеОстуствия(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаЗаписейПоМагазину" Тогда
		Элемент.ТекущиеДанные.ПодтвержденоМагазином = Истина;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаЗаписейПодтвержденоПомощником" Тогда
		Если Элемент.ТекущиеДанные.ПодтвержденоПомощником И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПоМагазину) Тогда
			Элемент.ТекущиеДанные.ПодтвержденоМагазином = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПодтвержденоПомощником И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПоМагазину) Тогда
			Элемент.ТекущиеДанные.ПодтвержденоМагазином = Истина;
		Иначе
			Элемент.ТекущиеДанные.ПодтвержденоМагазином = Элемент.ТекущиеДанные.ПодтвержденоМагазином1;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьНеобходимостьАвтоформированияЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьАвтоформированияЗаписи()
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаПрихода) Тогда
		
		//Создание новой записи, если данные по сотруднику присутствовали только в графике
		ТекущаяДата = ТекущаяДата();
		
		СтруктураПараметровЗапись = Новый Структура();
		СтруктураПараметровЗапись.Вставить("Контрагент",ТекущиеДанные.Контрагент);
		СтруктураПараметровЗапись.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
		СтруктураПараметровЗапись.Вставить("Должность", ТекущиеДанные.Должность);
		СтруктураПараметровЗапись.Вставить("ДатаПрихода", ТекущиеДанные.Дата + (ТекущаяДата - НачалоДня(ТекущаяДата)));
		СтруктураПараметровЗапись.Вставить("ДатаУхода", СтруктураПараметровЗапись.ДатаПрихода);
		СтруктураПараметровЗапись.Вставить("ТорговаяТочка", ТекущиеДанные.ТорговаяТочка);
		СтруктураПараметровЗапись.Вставить("ПоМагазину", ТекущиеДанные.ПоМагазину);
		СтруктураПараметровЗапись.Вставить("ПодтвержденоМагазином", Макс(ЗначениеЗаполнено(ТекущиеДанные.ПоМагазину), ТекущиеДанные.ПодтвержденоМагазином));
		СтруктураПараметровЗапись.Вставить("ПодтвержденоПомощником", ТекущиеДанные.ПодтвержденоПомощником);
		СтруктураПараметровЗапись.Вставить("Продавец", ТекущийПродавец);
		СтруктураПараметровЗапись.Вставить("Помощник", ТекущийПомощник);
		СтруктураПараметровЗапись.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыОтраженияПриходаУходаПродавцов.Интерактивно"));
		
		Отказ = Ложь;
		
		СоздатьНовуюЗаписьЖурналаУчета(СтруктураПараметровЗапись, Отказ);
		
		Если Отказ Тогда
			
			ТекущиеДанные.Изменена = Ложь;
			ТекущиеДанные.ПоМагазину = ТекущиеДанные.ПоМагазину1;
			ТекущиеДанные.ПодтвержденоПомощником = ТекущиеДанные.Помощником1;
			
			ПоказатьПредупреждение(,"Не удалось автоматически создать запись журнала (воспользуйтесь кнопкой ""Изменить"")",15);
			
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ДатаПрихода = СтруктураПараметровЗапись.ДатаПрихода;
		ТекущиеДанные.ДатаУхода = СтруктураПараметровЗапись.ДатаУхода;
		
		ТекущиеДанные.Изменена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеЭлементовФормыПерезаполнитьТаблицуЗаписей();
	
	ОбновитьВозможностьРедактирования();

	Если ТекущаяСтраницаИндекс = 0 Тогда
		ОбновитьТаблицуЗаписейСервер();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбъединитьСтрокиСерверБезКонтекста(МассивСтрок);
	
	
КонецПроцедуры

#Область СлужебныеТаблицаЗаписейТаблица

&НаКлиенте
Процедура ОбновитьОтклонениеОтУстановленногоВремени()
	
	ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные.Отклонение = ТекущиеДанные.Отработано - ТекущиеДанные.ПоМагазину;
		
		//Для исключения погрешностей рассчитывать отклонение в часах и минутах необходимо на сервере через запрос
		СтруктураПараметров = Новый Структура("ДатаПрихода, ДатаУхода, ПоМагазину", ТекущиеДанные.ДатаПрихода, ТекущиеДанные.ДатаУхода, ТекущиеДанные.ПоМагазину);
		
		СтруктураПредставлений = ПолучитьСтруктуруПредставленийСерверБезКонтекста(СтруктураПараметров);
		
		ТекущиеДанные.ОтклонениеПредставление = СтруктураПредставлений.ОтработаноПредставление;
		ТекущиеДанные.ОтклонениеПредставление = СтруктураПредставлений.ОтклонениеПредставление;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСтроки(ТекущиеДанные = Неопределено);
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ТекущиеДанные.ПодтвержденоПомощником Тогда
			ТекущиеДанные.Состояние = 2;
		ИначеЕсли ТекущиеДанные.ПоМагазину > 0 И ТекущиеДанные.ОтборОтклонение Тогда 
			ТекущиеДанные.Состояние = 5;
		ИначеЕсли ТекущиеДанные.ПоМагазину > 0 ИЛИ ТекущиеДанные.ПодтвержденоМагазином Тогда
			ТекущиеДанные.Состояние = 3;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.idЗаписиПриход) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.idЗаписиУход) Тогда
			ТекущиеДанные.Состояние = 4;
		Иначе
			ТекущиеДанные.Состояние = "";
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакОтбора(ПризнакОтбора)
	
	Если Элементы["КомандаОтбор" + ПризнакОтбора].Видимость Тогда
		ТекущийОтбор = ПризнакОтбора;
	Иначе
		ТекущийОтбор = 0;
	КонецЕсли;
	
	ПрименитьДополнительныеОтборы(); 
	
	ОбновитьИтогиТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	
	ОбновитьПризнакиВыделенныхСтрок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)

	ОбновитьПризнакиВыделенныхСтрок(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакиВыделенныхСтрок(Отметка)

	ТекущийЭлементИмя = СтрЗаменить(Элементы.ТаблицаЗаписей.ТекущийЭлемент.Имя, "ТаблицаЗаписей","");
	
	Если ТекущаяСтраницаИндекс = 0 Тогда
		ТекущийЭлементИмя = "ПодтвержденоПомощником"; //Оставить возможность подтверждения только пользователям с ролью "Помощник"
		ИмяТаблицы = "ТаблицаЗаписей";
	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда
		ТекущийЭлементИмя = "ПодтвержденоОплата";
		ИмяТаблицы = "ТаблицаЗаписейОплаты";  
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
		ТекущийЭлементИмя = "ПодтвержденоЗаявка";
		ИмяТаблицы = "ТаблицаЗаписейОплатыЗаявки"; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлементИмя = "ПодтвержденоМагазином" Или ТекущийЭлементИмя = "ПодтвержденоПомощником" Или ТекущийЭлементИмя = "ПодтвержденоОплата" ИЛИ ТекущийЭлементИмя = "ПодтвержденоЗаявка" Тогда
		
		Для каждого ВыделеннаяСтрока ИЗ Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
			
			ТекущиеДанные = Этаформа[ИмяТаблицы].НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			Отказ = Ложь;
			
			ПроверитьВозможностьРедактированияСтроки(ТекущиеДанные, Отказ);

			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяСтраницаИндекс = 0 Тогда 
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПрихода) Тогда 
					ТекущиеДанные[ТекущийЭлементИмя] = Отметка;
					ТекущиеДанные.Изменена = ТекущиеДанные[ТекущийЭлементИмя] <> ТекущиеДанные[ТекущийЭлементИмя + "1"];
					Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПоМагазину) Тогда
						ТекущиеДанные.ПодтвержденоМагазином = Отметка;
					КонецЕсли;
				Иначе
					
					//Создание новой записи, если данные по сотруднику присутствовали только в графике
					ТекущаяДата = ТекущаяДата();

					СтруктураПараметровЗапись = Новый Структура();
					СтруктураПараметровЗапись.Вставить("Контрагент",ТекущиеДанные.Контрагент);
					СтруктураПараметровЗапись.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
					СтруктураПараметровЗапись.Вставить("Должность", ТекущиеДанные.Должность);
					СтруктураПараметровЗапись.Вставить("ДатаПрихода", ТекущиеДанные.Дата + (ТекущаяДата - НачалоДня(ТекущаяДата)));
					СтруктураПараметровЗапись.Вставить("ДатаУхода", СтруктураПараметровЗапись.ДатаПрихода);
					СтруктураПараметровЗапись.Вставить("ТорговаяТочка", ТекущиеДанные.ТорговаяТочка);
					СтруктураПараметровЗапись.Вставить("Продавец", ТекущийПродавец);
					СтруктураПараметровЗапись.Вставить("Помощник", ТекущийПомощник);
					
					Отказ = Ложь;
					
					СоздатьНовуюЗаписьЖурналаУчета(СтруктураПараметровЗапись, Отказ);
					
					Если Отказ Тогда
						ПоказатьПредупреждение(,"Не удалось автоматически создать запись журнала (воспользуйтесь кнопкой ""Изменить"")",15);
						Прервать;
					КонецЕсли;
					
					ТекущиеДанные.ДатаПрихода = ТекущиеДанные.Дата;
					ТекущиеДанные.ДатаУхода = ТекущиеДанные.Дата;

				КонецЕсли;
				
				ОбновитьСостояниеСтроки(ТекущиеДанные);

			ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда 
				
				Если ТекущиеДанные.ПодтвержденоПомощником Тогда
					
					ТекущиеДанные[ТекущийЭлементИмя] = Отметка;
					ТекущиеДанные.Изменена = ТекущиеДанные[ТекущийЭлементИмя] <> ТекущиеДанные[ТекущийЭлементИмя + "1"];
					
				Иначе
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Строка не подтверждена помощником!";
					Сообщение.Поле  = ИмяТаблицы + "["+ВыделеннаяСтрока+"]."+ТекущийЭлементИмя+"";  
					Сообщение.Сообщить();

				КонецЕсли;
				
			ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда
				
				Если ТекущиеДанные.ПодтвержденоОплата Тогда
					
					ТекущиеДанные[ТекущийЭлементИмя] = Отметка;
					ТекущиеДанные.Изменена = ТекущиеДанные[ТекущийЭлементИмя] <> ТекущиеДанные[ТекущийЭлементИмя + "1"];
					
				Иначе
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = СтрЗаменить("Строка НомерСтроки не подтверждена на оплату!", "НомерСтроки", ТекущиеДанные.НомерСтроки);
					Сообщение.Поле  = ИмяТаблицы + "["+ВыделеннаяСтрока+"]."+ТекущийЭлементИмя+"";  
					Сообщение.Сообщить();

					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТекущаяСтраницаИндекс = 2 Тогда  //Заявка на услуги
		Возврат; //Не обновлять модифицированность формы	
	КонецЕсли;
	
	ОбновитьМодифицированностьФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьРедактированияСтроки(ТекущиеДанные, Отказ, Удаление = Ложь, Изменение = Ложь)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраницаИндекс = 0 Тогда  //Журнал учета приходов/уходов
		
		Если ЭтоПродавец И ТекущиеДанные.ПодтвержденоПомощником Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Запрещено редактировать обработанные помощником данные!",15);
			
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаУслуги) Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"По текущей строке уже сформирован документ " + ТекущиеДанные.ЗаявкаНаУслуги + "!",15);
			
			Возврат;
		ИначеЕсли ТекущиеДанные.ПодтвержденоОплата Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Запрещено редактировать подтвержденные на оплату данные!",15);
			
			Возврат;
		ИначеЕсли Удаление И ЗначениеЗаполнено(ТекущиеДанные.Дата) И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаПрихода) И 
				НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаУхода) И ЗначениеЗаполнено(ТекущиеДанные.ПоГрафику) Тогда
			
			Отказ = Истина;
			
			ТекстУведомления = "Невозможно удалить запись, поскольку это информационная строка из ""Графика внештатных сотрудников""!
			                    |(необходимо установить количество часов ""По магазину"" или удалить сотрудника из Графика на эту дату)";
			
			ПоказатьПредупреждение(,ТекстУведомления,15);
			
			Возврат;
		ИначеЕсли ТекущиеДанные.Дата > ТекущаяДата() Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Запрещено редактировать данные будущих периодов!",15);
			
			Возврат;
		ИначеЕсли НЕ Изменение И НЕ Удаление И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаУхода) И ТекущиеДанные.Дата = НачалоДня(ТекущаяДата()) Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Данные могут быть подтверждены только после отметки даты ухода сотрудника!",15);
			
			Возврат;
		КонецЕсли;
		
		//Общий контроль редактирования "закрытого периода"
		ПроверитьВозможностьРедактированияСтрокиПоСотруднику(?(ЗначениеЗаполнено(ТекущиеДанные.ДатаПрихода),ТекущиеДанные.ДатаПрихода, ТекущиеДанные.Дата), ТекущиеДанные.Сотрудник, Отказ);

	ИначеЕсли ТекущаяСтраницаИндекс = 1 Тогда //Отчет по фактической работе
		
		Если НЕ ТекущиеДанные.ПодтвержденоПомощником Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Текущая строка не подтверждена помощником!",15);
			
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаУслуги) Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"По текущей строке уже сформирован документ " + ТекущиеДанные.ЗаявкаНаУслуги + "!",15);
			
			Возврат;
		КонецЕсли;
				
	ИначеЕсли ТекущаяСтраницаИндекс = 2 Тогда  //Заявка на услуги
		
		Если НЕ ТекущиеДанные.ПодтвержденоПомощником Тогда
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Текущая строка не подтверждена помощником!",15);
			
			Возврат;
		ИначеЕсли НЕ ТекущиеДанные.ПодтвержденоОплата Тогда 
			
			Отказ = Истина;
			
			ПоказатьПредупреждение(,"Текущая строка не подтверждена на оплату!",15);
			
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьРедактированияСтрокиПоСотруднику(ДатаПрихода,Сотрудник, Отказ)
	
		Отказ = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПроверитьВозможностьРедактированияПеродаПоСотруднику(ДатаПрихода, Сотрудник);

КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененныеСтрокиОплатыСервер(Отказ = Ложь)
	
	НайденныеСтроки = ТаблицаЗаписейОплаты.НайтиСтроки(Новый Структура("Изменена", Истина));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			ТаблицаПериодов = ПолучитьОтметкиВремениВыделенныхПериодов(Строка);
			
			//Записывать строки в транзакции (обязаетльно весь указанный период)
			
			НачатьТранзакцию();
			
			Для каждого СтрокаПериодов Из ТаблицаПериодов Цикл
				
				МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(Новый Структура("ДатаПрихода, Сотрудник, Контрагент, ТорговаяТочка",  ДобавитьКДатеВремяСервер(СтрокаПериодов.Дата, СтрокаПериодов.ДатаПрихода), Строка.Сотрудник, Строка.Контрагент, Строка.ТорговаяТочка));
				
				МенеджерЗаписи.Прочитать();
				
				МенеджерЗаписи.ПодтвержденоОплата = Строка.ПодтвержденоОплата;
				
				ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			//Актуализация признаков контроля изменений 
			Если Не Отказ Тогда
				Строка.Изменена = Ложь;
				Строка.ПодтвержденоОплата1 = МенеджерЗаписи.ПодтвержденоОплата;
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовУправленияРедактирования()
	
	Если НЕ РольПолныеПрава Тогда
		
		Если ТекущаяСтраницаИндекс = 0 Тогда
			
			ТекущиеДанные = Элементы.ТаблицаЗаписей.ТекущиеДанные;
			
			Если ТекущиеДанные <> Неопределено Тогда
				
				ЗапретРедактированияСтроки = ЗначениеЗаполнено(ТекущиеДанные.idЗаписиПриход) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.idЗаписиУход);
				
				ЗапретРедактированияСтроки = Ложь; //Отключить для чистки мусора пользователями до 14.03.2018
				
				//Командная панель
				Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейИзменить.Доступность = НЕ ЗапретРедактированияСтроки;
				Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейУдалить.Доступность = НЕ ЗапретРедактированияСтроки;
				
				//Контекстное меню
				Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейИзменить1.Доступность = НЕ ЗапретРедактированияСтроки;
				Элементы.ТаблицаЗаписейКомандаТаблицаЗаписейУдалить1.Доступность = НЕ ЗапретРедактированияСтроки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Возможность объединения строки
	Если Элементы.ТаблицаЗаписей.ВыделенныеСтроки.Количество() = 2 Тогда
		
		ПерваяСтрока = ТаблицаЗаписей.НайтиПоИдентификатору(Элементы.ТаблицаЗаписей.ВыделенныеСтроки[0]);  
		ВтораяСтрока = ТаблицаЗаписей.НайтиПоИдентификатору(Элементы.ТаблицаЗаписей.ВыделенныеСтроки[1]);
		
		ВозможноОбъединить = ПерваяСтрока.Контрагент = ВтораяСтрока.Контрагент И 
							 ПерваяСтрока.ТорговаяТочка = ВтораяСтрока.ТорговаяТочка И
							 ПерваяСтрока.Должность = ВтораяСтрока.Должность И
							 ПерваяСтрока.Сотрудник = ВтораяСтрока.Сотрудник И
							 ПерваяСтрока.Дата = ВтораяСтрока.Дата;
		
	Иначе
		ВозможноОбъединить = Ложь;
	КонецЕсли;
	
	Элементы.ТаблицаЗаписейКомандаОбъединитьСтроки.Доступность = ВозможноОбъединить;

КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область ТаблицаЗаписейОплата

&НаКлиенте
Процедура ОбновитьТаблицуЗаписейОплатаКлиент()
	
	ОбновитьТаблицуЗаписейОплатаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаписейОплатаСервер()
	
	СгенерироватьРеквизитыТаблицыОплатСервер("ТаблицаЗаписейОплаты");
	
	ТаблицаЗаписейОплаты.Очистить();
	
	Запрос =  ПолучитьЗаполнитьОсновнойЗапросСервер("Оплата");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаПомощник = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПомощник.Следующий() Цикл
				
				ВыборкаДолжность = ВыборкаПомощник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДолжность.Следующий() Цикл
					
					ВыборкаТорговаяТочка = ВыборкаДолжность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаТорговаяТочка.Следующий() Цикл
						
						ВыборкаСотрудник = ВыборкаТорговаяТочка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаСотрудник.Следующий() Цикл
							
							ОбщийИтог = 0;
							
							//Добавление новой строки
							НоваяСтрока = ТаблицаЗаписейОплаты.Добавить();
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСотрудник);
							
							ВыборкаГод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаГод.Следующий() Цикл
								
								ТекущийГод = УстановитьФорматПериода(ВыборкаГод.Год, "Год");
								
								ВыборкаМесяц = ВыборкаГод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								
								Пока ВыборкаМесяц.Следующий() Цикл
									
									ТекущийМесяц = УстановитьФорматПериода(ВыборкаМесяц.Месяц, "Месяц");
									
									//Итоговые показатели 
									ОтсутствиеОтметки = Ложь;
									Отработано = Ложь;
									ПодтвержденоМагазином  = Ложь;
									ПодтвержденоПомощником = Ложь;
									ПодтвержденоПомощником = Ложь;
									
									ВыборкаДетальныеЗаписи = ВыборкаМесяц.Выбрать();
									
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										
										ТекущийДень = УстановитьФорматПериода(День(ВыборкаДетальныеЗаписи.Дата), "День");
										
										//Заполнение колонок данными
										
										ИндексКолонки = ТекущийГод + ТекущийМесяц + ТекущийДень;
										НомерКолонки = "_п_День" + ИндексКолонки;
										
										НоваяСтрока[НомерКолонки] = НоваяСтрока[НомерКолонки] + ВыборкаДетальныеЗаписи.НаОплату;
										
										// Состояния ячейки (Приоритет: Помощник/Отклонение/Магазин)
										Если ВыборкаДетальныеЗаписи.ПодтвержденоПомощником Тогда
											Состояние = 2;
										ИначеЕсли ВыборкаДетальныеЗаписи.ОтборОтклонение Тогда
											Состояние = 5;
										ИначеЕсли ВыборкаДетальныеЗаписи.ПодтвержденоМагазином Тогда
											Состояние = 3;
										ИначеЕсли ВыборкаДетальныеЗаписи.ОтборНетОтметки Тогда
											Состояние = 4;
										Иначе
											Состояние = ВыборкаДетальныеЗаписи.Состояние;
										КонецЕсли;
										
										НомерКолонки = "_п_День_Оформление" + ИндексКолонки;
										НоваяСтрока[НомерКолонки] = Состояние;
										
										//Заполнение быстрых отборов
										НоваяСтрока.ОтборНетОтметки = Макс(НоваяСтрока.ОтборНетОтметки, ВыборкаДетальныеЗаписи.ОтборНетОтметки);
										НоваяСтрока.ОтборОтклонение = Макс(НоваяСтрока.ОтборОтклонение, ВыборкаДетальныеЗаписи.ОтборОтклонение);
										НоваяСтрока.ОтборОтработано = Макс(НоваяСтрока.ОтборОтработано, ВыборкаДетальныеЗаписи.ОтборОтработано);
										
									КонецЦикла;
									
									ИндексКолонки = ТекущийГод + ТекущийМесяц;
									НоваяСтрока ["_п_Итог" + ИндексКолонки] = ВыборкаМесяц.НаОплату; 
									НоваяСтрока ["_п_Итог_ПоМагазину" + ИндексКолонки] = ВыборкаМесяц.ПоМагазину;
									
									ОбщийИтог = ОбщийИтог + ВыборкаМесяц.НаОплату;
									
									// Состояния итога (Приоритет: Помощник/Магазин/Отклонение)
									Если ВыборкаМесяц.ПодтвержденоПомощником Тогда
										Состояние = 2;
									ИначеЕсли ВыборкаМесяц.ПодтвержденоМагазином Тогда
										Состояние = 3;
									ИначеЕсли ВыборкаМесяц.ОтборОтклонение Тогда
										Состояние = 5;
									Иначе
										Состояние = 8;
									КонецЕсли;
									
									НоваяСтрока ["_п_Итог_Оформление" + ИндексКолонки] = Состояние;
									
									// Отбор включать только если все строки подтверждены
									НоваяСтрока.ПодтвержденоМагазином  = Макс(НоваяСтрока.ПодтвержденоМагазином, Состояние = 3);
									НоваяСтрока.ПодтвержденоПомощником = Макс(НоваяСтрока.ПодтвержденоПомощником, Состояние = 2);
									
								КонецЦикла;
							КонецЦикла;
							
							//Общий итог 
							Если НачалоМесяца(Период.ДатаНачала) <> НачалоМесяца(Период.ДатаОкончания) Тогда
								НоваяСтрока["_п_Итог_Общий"] = ОбщийИтог;
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		//Добавить сортировку без привязки к основному варианту заполнения
		ОбновитьСортировкуТаблицыЗаписей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьФорматПериода(Знач Значение, Вариант)
	
	Если Вариант = "Год" Тогда
		Возврат Формат(Значение, "ЧЦ=4; ЧН=00; ЧВН=; ЧГ=0");
	ИначеЕсли  Вариант = "Месяц" ИЛИ Вариант = "День" Тогда
		Возврат Формат(Значение, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0");
	ИначеЕсли  Вариант = "Общий" Тогда
		Возврат Формат(Значение, "ЧГ=0");
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьБыстрыйОтборТаблицыЗаписей (ТекущиеДанные, ИмяПоля);
	
	Если ИмяПоля = "ОтборПоТорговойТочке" Тогда
		
		//Отключение отборов
		ТекущийОтборАвто2 = ТекущийОтбор;
		ОбновитьПризнакОтбора(0);
		
		//Установка быстрого отбора по контрагенту, торговой точке, должности
		Элементы.ТаблицаЗаписейОплаты.ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент, ТорговаяТочка, Должность, Помощник", ТекущиеДанные.Контрагент, ТекущиеДанные.ТорговаяТочка, ТекущиеДанные.Должность, ТекущиеДанные.Помощник);
		
		ОтборПоТорговойТочкеСтруктура = Элементы.ТаблицаЗаписейОплаты.ОтборСтрок;
		
		Элементы.НадписьТекущийОтбор.Заголовок = ПолучитьЗаголовокБыстрогоОтбора("ПоТорговойТочке");   
		
		//Переключение на таблицу записей
		СменитьСтраницуПоИндексу(1);
		
		//Проверка необходимости обновление таблицы (если начали работу стразу отчета) 
		Этаформа.ТекущийЭлемент = Элементы.ТаблицаЗаписейОплаты;
		
		ТекущиеДанныеОтбор = Элементы.ТаблицаЗаписейОплаты.ТекущиеДанные;
		
		Если ТекущиеДанныеОтбор = Неопределено Тогда
			ОбновитьТаблицуЗаписейОплатаКлиент();
		КонецЕсли; 
		
		//Обновление доступности редактирования элементов
		ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах("ПоТорговойТочке", Истина);
		
	ИначеЕсли  ИмяПоля = "ОтборПоСотруднику" Тогда
		
		//Отключение отборов
		ТекущийОтборАвто1 = ТекущийОтбор;
		ОбновитьПризнакОтбора(0);
		
		//Установка быстрого отбора по контрагенту, торговой точке, сотруднику и должности
		Элементы.ТаблицаЗаписей.ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент, Сотрудник, ТорговаяТочка, Должность", 
			ТекущиеДанные.Контрагент, ТекущиеДанные.Сотрудник, ТекущиеДанные.ТорговаяТочка, ТекущиеДанные.Должность);
		
		ОтборПоДатеСтруктура = Элементы.ТаблицаЗаписей.ОтборСтрок;
		
		Элементы.НадписьТекущийОтбор.Заголовок = ПолучитьЗаголовокБыстрогоОтбора("ПоСотруднику");
		
		//Переключение на таблицу записей
		СменитьСтраницуПоИндексу(0);
		
		//Проверка необходимости обновление таблицы (если начали работу стразу отчета) 
		Этаформа.ТекущийЭлемент = Элементы.ТаблицаЗаписей;
		
		ТекущиеДанныеОтбор = Элементы.ТаблицаЗаписей.ТекущиеДанные;
		
		Если ТекущиеДанныеОтбор = Неопределено Тогда
			ОбновитьТаблицуЗаписейКлиент();
		КонецЕсли; 
		
		//Обновление доступности редактирования элементов
		ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах("ПоДате", Истина);
		
	ИначеЕсли  ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля]) Или ЗначениеЗаполнено(ТекущиеДанные[СтрЗаменить(ИмяПоля, "День", "День_Оформление")]) Тогда      
		
		//Отключение отборов
		ТекущийОтборАвто1 = ТекущийОтбор;
		ОбновитьПризнакОтбора(0);
		
		//Установка быстрого отбора по контрагенту, торговой точке, сотруднику и дате
		ТекущаяДата = ПолучитьДатуПоИмениПоля(ИмяПоля); 
		Элементы.ТаблицаЗаписей.ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент, Сотрудник, ТорговаяТочка, Дата", ТекущиеДанные.Контрагент, ТекущиеДанные.Сотрудник, ТекущиеДанные.ТорговаяТочка, ТекущаяДата);
		
		ОтборПоДатеСтруктура = Элементы.ТаблицаЗаписей.ОтборСтрок;
		
		Элементы.НадписьТекущийОтбор.Заголовок = ПолучитьЗаголовокБыстрогоОтбора("ПоДате");
		
		//Переключение на таблицу записей
		СменитьСтраницуПоИндексу(0);

		//Проверка необходимости обновление таблицы (если начали работу стразу отчета) 
        Этаформа.ТекущийЭлемент = Элементы.ТаблицаЗаписей;
		
		ТекущиеДанныеОтбор = Элементы.ТаблицаЗаписей.ТекущиеДанные;
		
		Если ТекущиеДанныеОтбор = Неопределено Тогда
			ОбновитьТаблицуЗаписейКлиент();
		КонецЕсли; 
		
		//Обновление доступности редактирования элементов
		ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах("ПоДате", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДатуПоИмениПоля(ИмяПоля)
	
	Возврат Дата(Сред(ИмяПоля,8,4), Сред(ИмяПоля,12,2), Прав(ИмяПоля,2));
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьОсновныхЭлементовПриБыстрыхОтборах(ВариантОтбора, Использовать)
	
	Если ВариантОтбора = "ПоДате" Тогда
		
		ОтборПоДате = Использовать;
		
		Элементы.ГруппаШапка.Доступность = НЕ ОтборПоДате И НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаПодвалОтборы.Видимость = НЕ ОтборПоДате И НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаПодвалБыстрыеОтборы.Видимость = ОтборПоДате ИЛИ ОтборПоТорговойТочке;
		Элементы.ГруппаТаблицаЗаписейСтраница0.Доступность = ОтборПоДате ИЛИ НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаТаблицаЗаписейСтраница1.Доступность = НЕ ОтборПоДате;
		Элементы.ГруппаТаблицаЗаписейСтраница2.Доступность = НЕ ОтборПоДате И НЕ ОтборПоТорговойТочке;
		Элементы.ТаблицаЗаписейГруппаПодменюЗаполнить.Доступность = Не ОтборПоДате И НЕ ОтборПоТорговойТочке;
		
	ИначеЕсли ВариантОтбора = "ПоТорговойТочке" Тогда
		
		ОтборПоТорговойТочке = Использовать;
		
		Элементы.ГруппаШапка.Доступность = НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаПодвалОтборы.Видимость = НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаПодвалБыстрыеОтборы.Видимость = ОтборПоТорговойТочке;
		Элементы.ГруппаТаблицаЗаписейСтраница0.Доступность = НЕ ОтборПоТорговойТочке;
		Элементы.ГруппаТаблицаЗаписейСтраница2.Доступность = НЕ ОтборПоТорговойТочке;
		Элементы.ТаблицаЗаписейГруппаПодменюЗаполнить.Доступность = НЕ ОтборПоТорговойТочке;
		
	Иначе 
		
		Элементы.ГруппаШапка.Доступность = Использовать;
		Элементы.ГруппаПодвалОтборы.Видимость = Использовать;
		Элементы.ГруппаПодвалБыстрыеОтборы.Видимость = Использовать;
		Элементы.ГруппаТаблицаЗаписейСтраница0.Доступность = Использовать;
		Элементы.ГруппаТаблицаЗаписейСтраница1.Доступность = Использовать;
		Элементы.ГруппаТаблицаЗаписейСтраница2.Доступность = Использовать;
		Элементы.ТаблицаЗаписейГруппаПодменюЗаполнить.Доступность = Использовать;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтметкиВремениВыделенныхПериодов(Строка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ) КАК Дата,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = &Сотрудник
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент = &Контрагент
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка = &ТорговаяТочка
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоПомощником";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Сотрудник", Строка.Сотрудник);
	Запрос.УстановитьПараметр("Контрагент", Строка.Контрагент);
	Запрос.УстановитьПараметр("ТорговаяТочка", Строка.ТорговаяТочка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПрограмнаяГенерацияЭлементов

&НаСервере
Процедура СгенерироватьРеквизитыТаблицыОплатСервер(ИмяРодителя)

	УдалитьРанееСозданныеРеквизитыЭлементы(ИмяРодителя);
	
	//Генерация новых реквизитов формы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК Год,
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК Месяц,
	|	ДЕНЬ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК День,
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|			ТОГДА 0
	|		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|			ТОГДА 1
	|		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
	|			ТОГДА 2
	|		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 3
	|		КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			ТОГДА 4
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	Месяц,
	|	ДатаКалендаря
	|ИТОГИ ПО
	|	Год,
	|	Месяц";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивРеквизитов = Новый Массив();
	
	//Очистка условного оформления
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
   
	ДобавитьОсновноеУсловноеОформление();

	Если Не РезультатЗапроса.Пустой() Тогда
		
		НеполныйПериод = НачалоМесяца(Период.ДатаНачала) <> Период.ДатаНачала 
			ИЛИ КонецМесяца(Период.ДатаОкончания) <> Период.ДатаОкончания;
		
		//Цветовое оформление
		СписокЦветов = Новый СписокЗначений();
		СписокЦветов.Добавить(Новый Цвет(  0,  0,   0)); // Черный
		СписокЦветов.Добавить(Новый Цвет(153, 51,   0)); // Тёмно-красный
		СписокЦветов.Добавить(Новый Цвет(255,  0,   0)); // Красный
		СписокЦветов.Добавить(Новый Цвет(  0,  0, 186)); // Тёмно-синий
		СписокЦветов.Добавить(Новый Цвет(255,  0, 255)); // Фиолетовый

		ВыборкаГод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГод.Следующий() Цикл
			
			ТекущийГод = УстановитьФорматПериода(ВыборкаГод.Год, "Год");
			
			ВыборкаМесяц = ВыборкаГод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаМесяц.Следующий() Цикл
				
				ТекущийМесяц = УстановитьФорматПериода(ВыборкаМесяц.Месяц, "Месяц");
				
				//Создание группы "Месяц"
				пИмяГруппыРеквизита = "_п_Группа" + ТекущийГод + ТекущийМесяц;
				пПолноеИмяГруппыРеквизита = ИмяРодителя + пИмяГруппыРеквизита;
				пТип = Тип("ГруппаФормы"); 
				пВид = ВидГруппыФормы.ГруппаКолонок;
				
				Если НеполныйПериод Тогда
					пЗаголовокПериод = "с " + Формат(Макс(Дата(ТекущийГод,ТекущийМесяц,1), Период.ДатаНачала), "ДФ=dd.MM.yyyy") + " по " + Формат(Мин(КонецМесяца(Дата(ТекущийГод,ТекущийМесяц,1)), Период.ДатаОкончания), "ДФ=dd.MM.yyyy")
				Иначе
					пЗаголовокПериод = Формат(Дата(ТекущийГод,ТекущийМесяц,1), "ДФ=""ММММ гггг 'г.'""");
				КонецЕсли;
				
				пПодсказка = "Период " + пЗаголовокПериод;
				
				НовыйЭлемент = Этаформа.Элементы.Вставить(пПолноеИмяГруппыРеквизита, пТип, ЭтаФорма.Элементы[ИмяРодителя],Неопределено);
				НовыйЭлемент.Вид = пВид;
				НовыйЭлемент.Заголовок = пЗаголовокПериод;
				НовыйЭлемент.Подсказка = пПодсказка;
				НовыйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
				НовыйЭлемент.ОтображатьВШапке = Истина;
				
                МассивРеквизитов.Очистить();

				ВыборкаДень = ВыборкаМесяц.Выбрать();
				
				Пока ВыборкаДень.Следующий() Цикл
					
					ТекущийДень = УстановитьФорматПериода(ВыборкаДень.День, "День");
					
					Если ЗначениеЗаполнено(ТекущийДень) Тогда
						
						//Создание колонки табличной части "День"
						пИмяРеквизита = "_п_День" + ТекущийГод + ТекущийМесяц + ТекущийДень;
						пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
						пТип = Тип("ПолеФормы"); 
						пЗаголовок = ТекущийДень;
						пПодсказка = Формат(Дата(ТекущийГод,ТекущийМесяц, ТекущийДень), "ДЛФ=DD");
						
						ДобавляемыеРеквизиты = Новый Массив;
						
						НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
						НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
						НовыйРеквизит.Заголовок = пЗаголовок;
						НовыйРеквизит.СохраняемыеДанные = Ложь;
						ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
						
						ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
						
						НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
						НовыйЭлемент.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Центр;
						НовыйЭлемент.АвтоМаксимальнаяШирина   = Ложь;
						НовыйЭлемент.МаксимальнаяШирина       = 1;
						НовыйЭлемент.Ширина                   = 1;
						НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
						НовыйЭлемент.ТолькоПросмотр           = Истина;
						НовыйЭлемент.Подсказка                = пПодсказка;
						
						Если ВыборкаДень.ВидДня > 0 Тогда
							НовыйЭлемент.ЦветТекстаЗаголовка = СписокЦветов[ВыборкаДень.ВидДня].Значение;
						КонецЕсли;
						
						НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
						
						//Создание колонки табличной части "День оформление"
						пИмяРеквизита = "_п_День_Оформление" + ТекущийГод + ТекущийМесяц + ТекущийДень;
						пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
						пТип = Тип("ПолеФормы"); 
						
						ДобавляемыеРеквизиты = Новый Массив;
						
						НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
						НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
						НовыйРеквизит.СохраняемыеДанные = Ложь;
						
						ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
						
						ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
						
						НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.Видимость = Ложь;
						
						НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
						
						ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивРеквизитов.Количество()>0 Тогда
					ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
					МассивРеквизитов.Очистить();
				КонецЕсли;
				
				//Итог месяц (Магазин)
				пИмяРеквизита = "_п_Итог_ПоМагазину" + ТекущийГод + ТекущийМесяц;
				пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
				пТип = Тип("ПолеФормы"); 
				пЗаголовок = "ВВ";
				пПодсказка = "По Магазину " + пЗаголовокПериод;
								
				ДобавляемыеРеквизиты = Новый Массив;
				
				НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
				НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
				НовыйРеквизит.Заголовок = пЗаголовок;
				НовыйРеквизит.СохраняемыеДанные = Ложь;
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
				НовыйЭлемент.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
				НовыйЭлемент.АвтоМаксимальнаяШирина = 4;
				НовыйЭлемент.Ширина = 4;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
			    НовыйЭлемент.ТолькоПросмотр           = Истина;
				НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
				НовыйЭлемент.Подсказка   = пПодсказка;

				//Итог месяц (Магазин) Оформление
				пИмяРеквизита = "_п_Итог_ПоМагазину_Оформление"  + ТекущийГод + ТекущийМесяц;
				пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
				пТип = Тип("ПолеФормы"); 
				
				ДобавляемыеРеквизиты = Новый Массив;
				
				НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
				НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
				НовыйРеквизит.Заголовок = пЗаголовок;
				НовыйРеквизит.СохраняемыеДанные = Ложь;
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.Видимость = Ложь;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;

				ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита, Истина);
				
				//Итог месяц
				пИмяРеквизита = "_п_Итог" + ТекущийГод + ТекущийМесяц;
				пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
				пТип = Тип("ПолеФормы"); 
				пЗаголовок = "Итог";
				пПодсказка = "Итог " + пЗаголовокПериод;
				
				ДобавляемыеРеквизиты = Новый Массив;
				
				НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
				НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
				НовыйРеквизит.Заголовок = пЗаголовок;
				НовыйРеквизит.СохраняемыеДанные = Ложь;
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
				НовыйЭлемент.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
				НовыйЭлемент.АвтоМаксимальнаяШирина = 4;
				НовыйЭлемент.Ширина = 4;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлемент.ТолькоПросмотр           = Истина;
				НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
				НовыйЭлемент.Подсказка   = пПодсказка;

				//Итог месяц Оформление
				пИмяРеквизита = "_п_Итог_Оформление"  + ТекущийГод + ТекущийМесяц;
				пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
				пТип = Тип("ПолеФормы"); 
				
				ДобавляемыеРеквизиты = Новый Массив;
				
				НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
				НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
				НовыйРеквизит.Заголовок = пЗаголовок;
				НовыйРеквизит.СохраняемыеДанные = Ложь;
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.Видимость = Ложь;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;

				ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита, Истина);

			КонецЦикла;
		КонецЦикла;
				
		//Общий итог 
		Если НачалоМесяца(Период.ДатаНачала) <> НачалоМесяца(Период.ДатаОкончания) Тогда
			
			пИмяРеквизита = "_п_Итог_Общий";
			пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
			пТип = Тип("ПолеФормы"); 
			пЗаголовок = "Σ";
			пПодсказка = "Ощий итог за период с " + Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");     
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
			НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
			НовыйРеквизит.Заголовок = пЗаголовок;
			НовыйРеквизит.СохраняемыеДанные = Ложь;
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
			НовыйЭлемент.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
			НовыйЭлемент.АвтоМаксимальнаяШирина = 5;
			НовыйЭлемент.Ширина = 5;
			НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
			НовыйЭлемент.ТолькоПросмотр           = Истина;
			НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
			НовыйЭлемент.Подсказка   = пПодсказка;
			
			//Итог месяц Оформление
			пИмяРеквизита = "_п_Итог_Общий_Оформление";
			пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
			пТип = Тип("ПолеФормы"); 
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
			НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
			НовыйРеквизит.Заголовок = пЗаголовок;
			НовыйРеквизит.СохраняемыеДанные = Ложь;
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Видимость = Ложь;
			НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
			НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
			
			ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита, Истина);

		КонецЕсли;
		
		Если НеполныйПериод И НачалоМесяца(Период.ДатаНачала) = НачалоМесяца(Период.ДатаОкончания) Тогда
			
			//Пустая колонка
			пИмяРеквизита = "_п_ПустаяКолонка";
			пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
			пТип = Тип("ПолеФормы"); 
			пЗаголовок = " ";
		
			ДобавляемыеРеквизиты = Новый Массив;
			
			НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
			НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
			НовыйРеквизит.Заголовок = пЗаголовок;
			НовыйРеквизит.СохраняемыеДанные = Ложь;
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
			НовыйЭлемент.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
			НовыйЭлемент.АвтоМаксимальнаяШирина = 0;
			НовыйЭлемент.Ширина = 0;
			НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
			НовыйЭлемент.ТолькоПросмотр           = Истина;
			НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
			
			//Пустая колонка Оформление
			пИмяРеквизита = "_п_ПустаяКолонка_Оформление"  + ТекущийГод + ТекущийМесяц;
			пПолноеИмяРеквизита = ИмяРодителя + пИмяРеквизита;
			пТип = Тип("ПолеФормы"); 
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			НовыйРеквизит = Новый РеквизитФормы(пИмяРеквизита, Новый ОписаниеТипов("Число"));
			НовыйРеквизит.Путь = "ТаблицаЗаписейОплаты";
			НовыйРеквизит.Заголовок = пЗаголовок;
			НовыйРеквизит.СохраняемыеДанные = Ложь;
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			НовыйЭлемент = Этаформа.Элементы.Вставить(НовыйРеквизит.Путь + НовыйРеквизит.Имя, Тип("ПолеФормы"), ЭтаФорма.Элементы[пПолноеИмяГруппыРеквизита]);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Видимость = Ложь;
			НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
			НовыйЭлемент.ПутьКДанным = "ТаблицаЗаписейОплаты." + НовыйРеквизит.Имя;
			
			ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита, Истина);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&Насервере
Процедура УдалитьРанееСозданныеРеквизитыЭлементы(ИмяРодителя)
	
	МассивРеквизитов = Новый Массив; 
	МассивЭлементов = Новый Массив;
	
	//Построение массивов реквизитов и элементов удаляемых реквизитов и элементов
	Реквизиты = ПолучитьРеквизиты(ИмяРодителя);
	Для каждого Реквизит Из Реквизиты Цикл
		Если Лев(Реквизит.Имя, 3) = "_п_" Тогда
			МассивРеквизитов.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
			МассивЭлементов.Добавить(Реквизит.Путь+Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	//Дополнение массива группами элементов
	Для каждого Реквизит Из Элементы[ИмяРодителя].ПодчиненныеЭлементы Цикл
		Если Лев(СтрЗаменить(Реквизит.Имя, ИмяРодителя,""), 3) = "_п_" Тогда
			МассивЭлементов.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	//Удаление реквизитов
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
	
	//Удаление элементов формы
	Для каждого Элемент Из МассивЭлементов Цикл
		Элементы.Удалить(Элементы[Элемент]);     
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОсновноеУсловноеОформление()
	
	//ТАБЛИЦА ЗАПИСЕЙ(ЖУРНАЛ ПРИХОДОВ И УХОДОВ) 
	
	//////////////////////////////////////////////////////////////////////////
	//ОТОБРАЖЕНИЕ ОТРИЦАТЕЛЬНОГО ЗНАЧЕНИЯ ПРЕДСТАВЛЕНИЯ ОКЛОНЕНИЯ

	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создание условие отбора "Отклонение"
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.Отклонение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейОтклонениеПредставление");
	ПолеОформления.Использование = Истина;
	
	
	//////////////////////////////////////////////////////////////////////////
	//ОТОБРАЖЕНИЕ "0" (если сотрудник не выходил в магазин, согласно графика)
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.ПоМагазину");
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПодчиненный.ПравоеЗначение = 0;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.ПодтвержденоМагазином");
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПодчиненный.ПравоеЗначение = Истина;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");

	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейПоМагазину");
	ПолеОформления.Использование = Истина;
	
	
	//////////////////////////////////////////////////////////////////////////
	//ОТОБРАЖЕНИЕ "ОТСУТСТВИЕ"(если сотрудник не выходил в магазин, согласно графика)
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.ПоМагазину");
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПодчиненный.ПравоеЗначение = 0;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.ПодтвержденоМагазином");
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораПодчиненный.ПравоеЗначение = Истина;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Отсутствие");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРаздела);

	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейОтклонениеПредставление");
	ПолеОформления.Использование = Истина;

	//////////////////////////////////////////////////////////////////////////
	//ОТОБРАЖЕНИЕ ОТМЕТОК ИМПОРТИРОВАННЫХ ИЗ ФРОНТОЛ 
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создание условие отбора "Отметки Фронтол"
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.idЗаписиПриход");   
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Коралловый);
	
	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейДатаПрихода");
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создание условие отбора "Отметки Фронтол"
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписей.idЗаписиУход");   
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  WebЦвета.Коралловый);
	
	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейДатаУхода");
	ПолеОформления.Использование = Истина;
	
	
	//ТАБЛИЦА ЗАПИСЕЙ ЗАЯВКИ/ОПЛАТЫ (ЗАЯВКА НА УЛУГИ)
	
	//////////////////////////////////////////////////////////////////////////
	//ОТОБРАЖЕНИЕ ОТРИЦАТЕЛЬНОГО ЗНАЧЕНИЯ ПРЕДСТАВЛЕНИЯ ОКЛОНЕНИЯ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создание условие отбора "Отклонение"
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейОплатыЗаявки.ПодтвержденоПомощником");   
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСообщенияИнформации);
	
	// Создание поля оформления  
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаЗаписейОплатыЗаявкиСумма");
	ПолеОформления.Использование = Истина;

КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеКолонки(ИмяРодителя, пИмяРеквизита, ДопОформление = Ложь)
	
	////////////////////////////////////////////////////////////////////////
	//ПРИ ДОБАВЛЕНИИ НОВЫХ ОФОРМЛЕНИЙ НЕ ЗАБЫВАТЬ О "РАЗДЛЕЛЕ ИНВЕРТИРОВАНИЯ"
	
	////////////////////////////////////////////////////////////////////////
	//ОСНОВНОЙ РАЗДЕЛ УСЛОВНЫХ ОФОРМЛЕНИЙ ТАБЛИЦЫ ТАБЛИЦА ЗАПИСЕЙ ОПЛАТЫ
	
	//ДОПОЛНИТЕЛЬНОЕ ОФОРМЛЕНИЕ 
	
	Если ДопОформление Тогда
		
		//ИТОГ ПО МАГАЗИНУ
		
		Если Лев(пИмяРеквизита, 18) = "_п_Итог_ПоМагазину" Тогда
			
			ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
			
			// Создаем условие отбора Итог по магазину
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ СтрЗаменить(пИмяРеквизита,"_Оформление",""));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ПравоеЗначение = 0;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Элементы.КомандаОтбор3.ЦветФона);
			
			// Создаем поля оформления 
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
			ПолеОформления.Использование = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ОТКЛОНЕНИЕ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Отклонение
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 5;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Элементы.КомандаОтбор4.ЦветФона);
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//ПОДТВЕРЖДЕНО ПОМОЩНИКОМ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Подтверждено помощником
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Элементы.КомандаОтбор5.ЦветФона);
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	
	//ПОДТВЕРЖДЕНО МАГАЗИНОМ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Подтверждено Магазином
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 3;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Элементы.КомандаОтбор3.ЦветФона);
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//НЕТ ОТМЕТКИ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Нет отметки
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 4;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Элементы.КомандаОтбор6.ЦветФона);
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//ДОПОЛНИТЕЛЬНО ОТОБРАЖЕНИЕ "0" (если сотрудник не выходил в магазин, согласно графика)
	
	СписокСостояний = Новый СписокЗначений();
	СписокСостояний.Добавить(2); //Подтверждено Помощником
	СписокСостояний.Добавить(3); //Подтверждено Магазином
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора отображение "0"
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораПодчиненный.ПравоеЗначение = СписокСостояний;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОтбораПодчиненный = ЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораПодчиненный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя +"."+ пИмяРеквизита, "_Оформление",""));
	ЭлементОтбораПодчиненный.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораПодчиненный.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");

	// Создание поля оформления                                   
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	
	
	///////////////////////////////////////////////////////////////////////////
	//ИНВЕРТИРОВАНИЯ СТРОКИ УСЛОВНЫХ ОФОРМЛЕНИЙ ТАБЛИЦЫ ТАБЛИЦА ЗАПИСЕЙ ОПЛАТЫ
	
	//ДОПОЛНИТЕЛЬНОЕ ОФОРМЛЕНИЕ 
	
	Если ДопОформление Тогда
		
		//ИТОГ ПО МАГАЗИНУ
		
		Если Лев(пИмяРеквизита, 18) = "_п_Итог_ПоМагазину" Тогда
			
			ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
			
			// Создаем условие отбора Итог по Магазину
			ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
			ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

			ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ СтрЗаменить(пИмяРеквизита,"_Оформление",""));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ПравоеЗначение = 0;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +".Активная");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(218,131,0)); //Тёмно-оранжевый
			
			// Создаем поля оформления 
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
			ПолеОформления.Использование = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ОТКЛОНЕНИЕ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Отклонение
	ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 5;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +".Активная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(215,0,0)); //Тёмно-красный
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//ПОДТВЕРЖДЕНО ПОМОЩНИКОМ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Подтверждено помощником
	ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +".Активная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,128,0)); //Тёмно-зеленый
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//ПОДТВЕРЖДЕНО МАГАЗИНОМ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Подтверждено магазином
	ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 3;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +".Активная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(218,131,0)); //Тёмно-оранжевый
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;
	
	//НЕТ ОТМЕТКИ
	
	ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Создаем условие отбора Нет отметки
	ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +"."+ пИмяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 4;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРодителя +".Активная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(150,150,150)); //Серый
	
	// Создаем поля оформления 
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(ИмяРодителя + пИмяРеквизита, "_Оформление",""));
	ПолеОформления.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура АктивацияСтрокиТаблицыЗаписейОплаты()
	
	ТекущиеДанные = Элементы.ТаблицаЗаписейОплаты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ИдентификаторАктивнойСтроки <> Неопределено Тогда
			АктивнаяСтрока = ТаблицаЗаписейОплаты.НайтиПоИдентификатору(ИдентификаторАктивнойСтроки);
			Если АктивнаяСтрока <> Неопределено Тогда
				АктивнаяСтрока.Активная = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторАктивнойСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		
		ТекущиеДанные.Активная = Истина;
		 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТаблицаЗаписейОплатаЗаявка

&НаКлиенте
Процедура ОбновитьТаблицуЗаписейОплатаЗаявкаКлиент()
	
	ОбновитьТаблицуЗаписейОплатаЗаявкаСервер();

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаписейОплатаЗаявкаСервер()

	ТаблицаЗаписейОплатыЗаявки.Очистить();
	
	Запрос =  ПолучитьЗаполнитьОсновнойЗапросСервер("Заявка");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Счетчик = 1;
		
		ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаПомощник = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПомощник.Следующий() Цикл
				ВыборкаТорговаяТочка = ВыборкаПомощник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаТорговаяТочка.Следующий() Цикл
					ВыборкаДолжность = ВыборкаТорговаяТочка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДолжность.Следующий() Цикл
						
						НоваяСтрока = ТаблицаЗаписейОплатыЗаявки.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДолжность);
						
						НоваяСтрока.НомерСтроки = Счетчик;
						НоваяСтрока.Количество  = ВыборкаДолжность.НаОплату;
						НоваяСтрока.ПересчениеПериодов = ВыборкаДолжность.ПересчениеПериодов > 1;
						
						Счетчик = Счетчик + 1;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаявкиНаУслугиСервер(ЗаявкаНаУслуги = Неопределено)

	ТаблицаОтмеченныхСтрок = ТаблицаЗаписейОплатыЗаявки.Выгрузить(Новый Структура("ПодтвержденоЗаявка", Истина));
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаОтмеченныхСтрок);
	Запрос.Выполнить();

	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ВТ.НомерСтроки,
	|	ВТ.Контрагент КАК Контрагент,
	|	ВТ.Контрагент.СтавкаНДС КАК СтавкаНДС,
	|	ВТ.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТ.Помощник,
	|	ВТ.Должность КАК Должность,
	|	ВТ.Услуга,
	|	ВТ.ЕдиницаИзмерения,
	|	ВТ.Количество,
	|	ВТ.Цена,
	|	ВТ.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЗаявкаНаУслуги = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|			ТОГДА ВТ.ЗаявкаНаУслуги
	|		ИНАЧЕ &ЗаявкаНаУслуги
	|	КОНЕЦ КАК ЗаявкаНаУслуги,
	|	МАКСИМУМ(ЗаявкаНаУслугиМатериалыУслуги.Цена) КАК ЦенаЗаявка,
	|	СУММА(ЗаявкаНаУслугиМатериалыУслуги.Сумма) КАК СуммаЗаявка
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|		ПО ВТ.ЗаявкаНаУслуги = ЗаявкаНаУслугиМатериалыУслуги.Ссылка
	|			И ВТ.Контрагент = ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Контрагент
	|			И ВТ.ТорговаяТочка = ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница
	|ГДЕ
	|	ВТ.ПодтвержденоЗаявка
	|	И ВЫБОР
	|			КОГДА &ЗаявкаНаУслуги = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ.ЗаявкаНаУслуги = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|					ИЛИ ВТ.ЗаявкаНаУслуги = &ЗаявкаНаУслуги
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Должность,
	|	ВТ.ЕдиницаИзмерения,
	|	ВТ.Услуга,
	|	ВТ.Количество,
	|	ВТ.Цена,
	|	ВТ.Сумма,
	|	ВТ.ЗаявкаНаУслуги,
	|	ВТ.Контрагент,
	|	ВТ.Контрагент.СтавкаНДС,
	|	ВТ.НомерСтроки,
	|	ВТ.ТорговаяТочка,
	|	ВТ.Помощник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаУслуги,
	|	Контрагент,
	|	ТорговаяТочка,
	|	Должность
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ЗаявкаНаУслуги,
	|	Контрагент,
	|	ТорговаяТочка,
	|	Должность
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ЗаявкаНаУслуги", ЗаявкаНаУслуги);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		КэшПодтверждающих = ПолучитьТаблицуПодтверждающих(ТаблицаОтмеченныхСтрок.ВыгрузитьКолонку("ТорговаяТочка"));
		
		ВыборкаЗаявкаНаУслуги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаявкаНаУслуги.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Если ЗначениеЗаполнено(ВыборкаЗаявкаНаУслуги.ЗаявкаНаУслуги) Тогда
				
				ДокументСсылка = ВыборкаЗаявкаНаУслуги.ЗаявкаНаУслуги;
				ДокументОбъект = ВыборкаЗаявкаНаУслуги.ЗаявкаНаУслуги.ПолучитьОбъект();
				
				Если Не ПроверитьВозможностьРедактирвоанияЗаявки(ДокументОбъект) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПроверитьВозможностьРедактирвоанияЗаявки(ДокументОбъект);
				
				ОчиститьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка);
				
				ДокументОбъект.Услуги.Очистить();
				
				ДокументОбъект.Оплата.Очистить();
				
			Иначе 
				
				ДокументСсылка = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьСсылку(Новый УникальныйИдентификатор);
				
				ДокументОбъект = Документы.ЗаявкаНаУслугиМатериалы.СоздатьДокумент();
				ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
				
				//Первоначальное Заполнение заявки на услуги материалы
				ПервоначальноеЗаполнениеДокументаЗаявкаНаУслугиМатериалы(ДокументОбъект);
				
			КонецЕсли;
			
			МассивДолжностей = Новый Массив();
			
			ТаблицаОплат = ДокументОбъект.Оплата.ВыгрузитьКолонки("ДатаПлатежа, НазначениеПлатежа, Акцептант, СуммаОплаты");
			
			ВыборкаКонтрагент = ВыборкаЗаявкаНаУслуги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				ДокументОбъект.Контрагент = ВыборкаКонтрагент.Контрагент;
				
				СтруктураПараметров = Новый Структура("Контрагент, Период, Должность", ДокументОбъект.Контрагент, Период, "");
				
				ДополнительноеЗаполнениеДокументаЗаявкаНаУслугиМатериалы(ДокументОбъект, СтруктураПараметров);
				
				ВыборкаТорговаяТочка = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаТорговаяТочка.Следующий() Цикл
					
					ВыборкаДолжность = ВыборкаТорговаяТочка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДолжность.Следующий() Цикл
						
						ВыборкаДетальныеЗаписи = ВыборкаДолжность.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							
							//Заполнение табличной части Услуги
							//(Подтвержденные на оплату "нулевые" строки не попадают в документы, при этом записи по ним привязываются к Заявке)
							Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
								
								СтруктураПараметров.Должность = ВыборкаДетальныеЗаписи.Должность;
								
								НоваяСтрока = ДокументОбъект.Услуги.Добавить();
								
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
								
								НоваяСтрока.Комментарий  = СтрЗаменить("По должности: Должность", "Должность", СтруктураПараметров.Должность);
								НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Услуга;
								НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.ТорговаяТочка;
								НоваяСтрока.Акцептант          = ДокументОбъект.Акцептант;
								НоваяСтрока.Подтверждающий     = ПолучитьПодтверждающегоПоМагазину(КэшПодтверждающих, НоваяСтрока.СтруктурнаяЕдиница);
								
								ДокументОбъект.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
								
								СуммаСтроки = НоваяСтрока.Сумма;  //Открыть вопрос НДС (на тек. момент все контрагенты с "Сумма вкл. НДС") 
								
								//Заполнение таблицы Оплата
								НоваяСтрока = ТаблицаОплат.Добавить();
								
								НоваяСтрока.СуммаОплаты = СуммаСтроки;
								
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
								
								Если ЗначениеЗаполнено(СтруктураПараметров.НазначениеПлатежа) Тогда
									МассивДолжностей.Добавить(СтруктураПараметров.Должность);
								КонецЕсли;
								
							КонецЕсли;
							
							//Установка ссылки текущего документа в таблице записей
							НайденныеСтроки = ТаблицаЗаписейОплатыЗаявки.НайтиСтроки(Новый Структура("НомерСтроки", ВыборкаДетальныеЗаписи.НомерСтроки));
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								НайденныеСтроки[0].ЗаявкаНаУслуги = ДокументСсылка;      							
							КонецЕсли;
							
							РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаполнитьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка, Новый Структура("НачалоПериода, КонецПериода, Контрагент, ТорговаяТочка, Должность",
									Период.ДатаНачала, Период.ДатаОкончания, ВыборкаДетальныеЗаписи.Контрагент, ВыборкаДетальныеЗаписи.ТорговаяТочка, ВыборкаДетальныеЗаписи.Должность));
							
						КонецЦикла;
						
					КонецЦикла;
				КонецЦикла;
				
				ТаблицаОплат.Свернуть("ДатаПлатежа, НазначениеПлатежа, Акцептант", "СуммаОплаты");
				
				Если ТаблицаОплат.Количество() > 0 Тогда
					Если МассивДолжностей.Количество() > 0 Тогда
						
						СоответствиеДолжностей = Новый Соответствие();
						Для каждого ТекЭлемент Из МассивДолжностей Цикл 
							СоответствиеДолжностей.Вставить(ТекЭлемент);
						КонецЦикла;
						
						ДолжностиДляОплат = "";
						Для каждого ТекЭлемент Из СоответствиеДолжностей Цикл
							ДолжностиДляОплат = ДолжностиДляОплат + ТекЭлемент.Ключ + ", "; 
						КонецЦикла;
						
						ДолжностиДляОплат = СокрЛП(ДолжностиДляОплат);
						СтруктураПараметров.Должность = Лев(ДолжностиДляОплат, СтрДлина(ДолжностиДляОплат)-1);
						ТаблицаОплат[0].НазначениеПлатежа = ЗаполнитьПараметрыНазначенияПлатежаЗаявкаНаУслуги(СтруктураПараметров);
						
					КонецЕсли;
				КонецЕсли;
				
				ДокументОбъект.Оплата.Загрузить(ТаблицаОплат);
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;  
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыНазначенияПлатежаЗаявкаНаУслуги(СтруктураПараметров)
	
	НазначениеПлатежа = СтруктураПараметров.НазначениеПлатежа;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.НазначениеПлатежа) Тогда
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "#Должность", СтруктураПараметров.Должность); 
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "#Период", Формат(СтруктураПараметров.Период.ДатаНачала, "ДФ='dd.MM.yyyy ''г.'''") + " - " + Формат(СтруктураПараметров.Период.ДатаОкончания, "ДФ='dd.MM.yyyy ''г.'''")); 
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "#НомерДоговора", СтруктураПараметров.НомерДоговора); 
	КонецЕсли;
	
	Возврат НазначениеПлатежа;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПодтверждающих(МассивТорговыхТочек)
	
	//Запрос перенесен(с модификацией) из Формы документа "Заявка на услуги/материалы" (форма документа не модифицировалась)(состояние на 02.03.2018)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Объект КАК Точка,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК Роль,
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизЛицо,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользователиРуководители.Ссылка КАК РуководительПользователя
	|ПОМЕСТИТЬ НазначенноеВРегистре
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			,
	|			Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	|				И Объект В (&МассивТочек)
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	//|				И ТипРоли В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего))) КАК СоответствиеОбъектРольСрезПоследних
	|				И ТипРоли В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))) КАК СоответствиеОбъектРольСрезПоследних
	//--- AK suvv
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиРуководители
	|				ПО Пользователи.ФизЛицо.Руководитель = ПользователиРуководители.ФизЛицо
	|					И (Пользователи.ФизЛицо.Руководитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	НазначенноеВРегистре.ТипРоли,
	|	НазначенноеВРегистре.Роль,
	|	НазначенноеВРегистре.ФизЛицо,
	|	НазначенноеВРегистре.Пользователь,
	|	НазначенноеВРегистре.РуководительПользователя
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	ТипыРолейПользователя.Ссылка,
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	Пользователи.Ссылка,
	|	NULL
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО НазначенноеВРегистре.Роль.Родитель = РолиПользователейСоставРоли.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО (ТипыРолейПользователя.Код = ""UpravlyayushchiiPoRoznice"")
	|ГДЕ
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	|	НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы) ИЛИ
	//--- AK suvv
	|	НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)";
	
	Запрос.УстановитьПараметр("МассивТочек", МассивТорговыхТочек);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ПроверитьВозможностьРедактирвоанияЗаявки(ДокументОбъект)
	
	ТекстУведомления = "";
	
	НайденныеСтроки = ДокументОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептована", Истина));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстУведомления = ТекстУведомления + "есть акцептованные услуги";
	КонецЕсли;

	НайденныеСтроки = ДокументОбъект.Оплата.НайтиСтроки(Новый Структура("Акцептована", Истина));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстУведомления = ?(НЕ ЗначениеЗаполнено(ТекстУведомления), "есть акцептованные оплаты", "  и оплаты");
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Сообщить("По документу "+ ДокументОбъект+" "+ ТекстУведомления + ". Перезаполнение запрещено!");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
	
&Насервере
Функция ПолучитьПодтверждающегоПоМагазину(КэшПодтверждающих, СтруктурнаяЕдиница);
	
	//Алгоритм перенесен из Формы документа "Заявка на услуги/материалы" (форма документа не модифицировалась)(состояние на 02.03.2018)	
	
	СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
	Управляющие = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если Управляющие.Количество() > 0 Тогда
		Возврат Управляющие[0].Пользователь;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если Помощники.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Помощники[0].РуководительПользователя) Тогда 
			Возврат Помощники[0].РуководительПользователя;
		Иначе	
			Возврат Помощники[0].Пользователь;
		КонецЕсли;
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Иначе 
		СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
		Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
		Если Помощники.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Помощники[0].РуководительПользователя) Тогда 
				Возврат Помощники[0].РуководительПользователя;
			Иначе	
				Возврат Помощники[0].Пользователь;
			КонецЕсли;
		КонецЕсли;	
	//--- AK suvv
	КонецЕсли;	

КонецФункции

&Насервере
Процедура ОбновитьСортировкуТаблицыЗаписей();
	
	//Сортировки будут настраиваемые (пока не приоритетно)
	//Добавить фиксированную, т.к. идет обработка большого объема Помощниками данных задним числом
	Если ТекущаяСтраницаИндекс = 1 Тогда
		ТаблицаЗаписейОплаты.Сортировать("Контрагент, ТорговаяТочка, Сотрудник, Должность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Разработка

// Импортирует данные по отметкам приход/уход внештатных сотрудников из Фронтол
// Запускается вручную после окончания рабочей смены продавцом (Отмечает внештатных сотрудников)
//
Процедура ПеренестиВМодульЗагрузитьДанныеПоОтметкамВнештатныхСотрудниковФронтол(НачалоПериода = Неопределено, КонецПериода = Неопределено, СтруктураПараметров = Неопределено) Экспорт

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    УстановитьПривилегированныйРежим(Истина);
	
	ЛогированиеОшибокИмпорта = РегистрыСведений.НастройкиПодсистемыАутсорсинг.ПолучитьЗначениеНастройкиАутсорсинг("ЛогированиеОшибокИмпорта");
	
	ГруппаСотрудников = Неопределено;
	НомерТочки = Неопределено;
	
	СтруктураПараметров.Свойство("ГруппаСотрудников", ГруппаСотрудников);
	СтруктураПараметров.Свойство("НомерТочки", НомерТочки);
	
	//Формирование таблицы данных
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Сотрудник"		, Новый ОписаниеТипов("СправочникСсылка.СотрудникиАутсорсинг"));
	ТабДанные.Колонки.Добавить("ДатаПрихода"	, Новый ОписаниеТипов("Дата"	, , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабДанные.Колонки.Добавить("ДатаУхода"		, Новый ОписаниеТипов("Дата"	, , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабДанные.Колонки.Добавить("Контрагент"		, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабДанные.Колонки.Добавить("Должность"		, Новый ОписаниеТипов("СправочникСсылка.ДолжностиВнештатныхСотрудников"));
	ТабДанные.Колонки.Добавить("idЗаписиПриход"	, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ТабДанные.Колонки.Добавить("idЗаписиУход"	, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ТабДанные.Колонки.Добавить("НомерТочки"		, Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(5, 0)));
	
	//Формирование таблиц  кэша
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиАутсорсинг.ИД,
	|	СотрудникиАутсорсинг.Ссылка,
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент,
	|	СотрудникиАутсорсинг.Должность
	|ИЗ
	|	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(
	|				&КонецПериода,
	|				&ВсеГруппы
	|					ИЛИ ГруппаСотрудников = &ГруппаСотрудников) КАК КонтрагентыСотрудниковАутсорсингСрезПоследних
	|		ПО СотрудникиАутсорсинг.ГруппаСотрудников = КонтрагентыСотрудниковАутсорсингСрезПоследних.ГруппаСотрудников
	|ГДЕ
	|	(&ВсеГруппы
	|			ИЛИ СотрудникиАутсорсинг.ГруппаСотрудников = &ГруппаСотрудников)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиАутсорсинг.ИД,
	|	СотрудникиАутсорсинг.Ссылка,
	|	КонтрагентыСотрудниковАутсорсингСрезПоследних.Контрагент,
	|	СотрудникиАутсорсинг.Должность";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВсеГруппы", НЕ ЗначениеЗаполнено(ГруппаСотрудников));
	Запрос.УстановитьПараметр("ГруппаСотрудников", ГруппаСотрудников);
	
	ТабАутсорсинг = Запрос.Выполнить().Выгрузить();
	ТабАутсорсинг.Индексы.Добавить("ИД");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.НомерТочки > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТочки";
	
	ТабТорговыеТочки = Запрос.Выполнить().Выгрузить();
	ТабТорговыеТочки.Индексы.Добавить("НомерТочки");
	
	//Подключение к Фронтол
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//Заполнение массива торговых точек
	МассивТочек = Новый Массив();
	
	Если ЗначениеЗаполнено(НомерТочки) Тогда
		
		//По одной торговой точке
		МассивТочек.Добавить(НомерТочки);
		
	Иначе
		
		//По всем торговым точкам
		ТекстЗапроса = "SELECT VZ_Zapros.ShopNo
		|FROM (SELECT CT.ShopNo
		|FROM [srv-sql04].[frontol].[dbo].[CashierTime] as CT (nolock)
		|where CT.DateTimeAdd >= " + ВнешниеДанные.ФорматПоля(НачалоПериода) + " and CT.DateTimeAdd <= "+ ВнешниеДанные.ФорматПоля(КонецПериода) + " and CT.ShopNo > 1
		|GROUP BY ShopNo) as VZ_Zapros
		|ORDER BY VZ_Zapros.ShopNo";
  
		rs = ADOСоединение.Execute(ТекстЗапроса);
		Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
			rs=rs.NextRecordSet();
		КонецЦикла;
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				МассивТочек.Добавить(Rs.Fields("ShopNo").Value);
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	Если МассивТочек.Количество()>0 Тогда
		
		Для Каждого НомерТочки Из МассивТочек Цикл 
			
			ТабДанные.Очистить();
			
			ТекстЗапроса = "SELECT CAST(VZ_Zapros.id as nvarchar(36)) id, VZ_Zapros.CashierID, VZ_Zapros.DateTimeAdd, VZ_Zapros.Flag, VZ_Zapros.ShopNo
			|FROM (SELECT CT.id
			|      ,CT.CashierID
			|      ,CT.DateTimeAdd
			|      ,CT.Flag
			|      ,CT.ShopNo
			|      ,ROW_NUMBER() OVER (PARTITION BY CashierID, Flag Order by DateTimeAdd desc) as rn
			|  FROM [srv-sql04].[frontol].[dbo].[CashierTime]  as CT (nolock)
			|  where CT.DateTimeAdd >= " + ВнешниеДанные.ФорматПоля(НачалоПериода) + " and CT.DateTimeAdd <= "+ ВнешниеДанные.ФорматПоля(КонецПериода) + ?(ЗначениеЗаполнено(НомерТочки)," and CT.ShopNo = " + ВнешниеДанные.ФорматПоля(НомерТочки),"") + ") as VZ_Zapros
			|  where VZ_Zapros.rn = 1
			|  order by Flag desc
			|";
			
			Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудник) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "where CT.DateTimeAdd", "where CT.CashierID = " + Формат(СтруктураПараметров.Сотрудник, "ЧГ=") + " and CT.DateTimeAdd");
			КонецЕсли;                                                                                                                            
			
			rs = ADOСоединение.Execute(ТекстЗапроса);
			Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
				rs=rs.NextRecordSet();
			КонецЦикла;
			
			Попытка
				rs.MoveFirst();
				
				Пока НЕ rs.EOF() Цикл
					КодПродавец = Rs.Fields("CashierID").Value;
					Если ЗначениеЗаполнено(КодПродавец) Тогда
						Продавец = Неопределено;
						СтрокаТабАутсорс = ТабАутсорсинг.Найти(КодПродавец, "ИД");
						Если СтрокаТабАутсорс <> Неопределено Тогда
							Продавец = СтрокаТабАутсорс.Ссылка;
						КонецЕсли;	
						Если ЗначениеЗаполнено(Продавец) Тогда
							СтрокиДоб = ТабДанные.НайтиСтроки(Новый Структура("Сотрудник", Продавец));
							Если СтрокиДоб.Количество() = 0 Тогда
								СтрокаДоб = ТабДанные.Добавить();
								СтрокаДоб.НомерТочки = НомерТочки;
								СтрокаДоб.Контрагент = СтрокаТабАутсорс.Контрагент;
								СтрокаДоб.Должность  = СтрокаТабАутсорс.Должность;
							Иначе
								СтрокаДоб = СтрокиДоб[0];
							КонецЕсли;
							СтрокаДоб.Сотрудник = Продавец;
							Если Rs.Fields("Flag").Value = 1 Тогда
								СтрокаДоб.ДатаПрихода = Rs.Fields("DateTimeAdd").Value;
								СтрокаДоб.idЗаписиПриход = Rs.Fields("id").Value;
							ИначеЕсли Rs.Fields("Flag").Value = 0
								И Rs.Fields("DateTimeAdd").Value >= СтрокаДоб.ДатаПрихода Тогда
								СтрокаДоб.ДатаУхода = Rs.Fields("DateTimeAdd").Value;	
								СтрокаДоб.idЗаписиУход = Rs.Fields("id").Value;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;	
					rs.MoveNext();
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			//Не чистить закомментированный текст ↓
			//Удаление всех строк кноме "текущей(и вчерашней)" даты
			
			//КолвоСтрок = ТабДанные.Количество();
			//Для н = 1 По КолвоСтрок Цикл
			//	Если НЕ ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаПрихода) Тогда
			//		ТабДанные.Удалить(КолвоСтрок - н);
			//		Продолжить;
			//	КонецЕсли;	
			//	Если ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаПрихода)
			//		И ЗначениеЗаполнено(ТабДанные[КолвоСтрок - н].ДатаУхода)
			//		И ТабДанные[КолвоСтрок - н].ДатаУхода < НачалоДня(ТекущаяДата()) Тогда
			//		ТабДанные.Удалить(КолвоСтрок - н);
			//		Продолжить;
			//	КонецЕсли;	
			//КонецЦикла;
			//Не чистить закомментированный текст ↑
			
			//Обновление данных регистра
			
			Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ВременнаяТаблица", ТабДанные);
			Запрос.Выполнить();
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ВТ.idЗаписиПриход,
			|	ВТ.idЗаписиУход,
			|	ВТ.ДатаПрихода,
			|	ВТ.ДатаУхода,
			|	ВТ.Должность,
			|	ВТ.Контрагент,
			|	ВТ.НомерТочки,
			|	ВТ.Сотрудник,
			|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода КАК ДатаПриходаРегистр,
			|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник КАК СотрудникРегистр,
			|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПоМагазину,
			|	ЕСТЬNULL(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоМагазином, ЛОЖЬ) КАК ПодтвержденоМагазином,
			|	ЕСТЬNULL(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоПомощником, ЛОЖЬ) КАК ПодтвержденоПомощником
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
			|		ПО ВТ.idЗаписиПриход = ЖурналУчетаСотрудниковПоДнямАутсорсинг.idЗаписиПриход";
			
			ТабДанные = Запрос.Выполнить().Выгрузить();				
			
			Для каждого Строка из ТабДанные Цикл
				
				НайденныеСтроки = ТабТорговыеТочки.НайтиСтроки(Новый Структура("НомерТочки", Строка.НомерТочки));
				
				Если НайденныеСтроки.Количество() > 0 Тогда

					//Игнорировать "утренние" записи "ночных" сотрудников. 
					Если НЕ ЗначениеЗаполнено(Строка.idЗаписиПриход) Тогда 
						Продолжить;
					КонецЕсли;
					
					//Перезаполнять только необработанные записи (В запрос контроль не переносить,  
					//т.к. тут будет обработчик дозаполнения обработанных записей)
					Если Строка.ПодтвержденоМагазином ИЛИ Строка.ПодтвержденоПомощником Тогда
						Продолжить;
					КонецЕсли;

					//Очистка мусора 
					Если (ЗначениеЗаполнено(Строка.ДатаПриходаРегистр) И Строка.ДатаПрихода <> Строка.ДатаПриходаРегистр) ИЛИ 
							(ЗначениеЗаполнено(Строка.СотрудникРегистр) И Строка.Сотрудник <> Строка.СотрудникРегистр) Тогда
						УдалитьЗаписьРегистраЖурналУчетаПоДням(Новый Структура("ДатаПрихода, Сотрудник", Строка.ДатаПриходаРегистр, Строка.СотрудникРегистр));
					КонецЕсли;
					
					МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьМенеджерЗаписи();
					
					МенеджерЗаписи.Сотрудник  = Строка.Сотрудник;
					МенеджерЗаписи.idЗаписиПриход = Строка.idЗаписиПриход;
					МенеджерЗаписи.idЗаписиУход = Строка.idЗаписиУход;
					МенеджерЗаписи.ДатаПрихода = Строка.ДатаПрихода;
					МенеджерЗаписи.ДатаУхода  = Строка.ДатаУхода;
					МенеджерЗаписи.Контрагент  = Строка.Контрагент;
					МенеджерЗаписи.Должность  = Строка.Должность;
					
					МенеджерЗаписи.Тип = Перечисления.ТипыОтраженияПриходаУходаПродавцов.Бэйдж;
					
					МенеджерЗаписи.ТорговаяТочка = НайденныеСтроки[0].ТорговаяТочка;
					
					Попытка
						МенеджерЗаписи.Записать();
					Исключение
						Если ЛогированиеОшибокИмпорта = Истина Тогда
							ТекстОшибки = "Ошибка импорта из Фронтол! 
							|Сотрудник (Аутсорс): " + Строка.Сотрудник + " 
							|Дата прихода: " + Строка.ДатаПрихода + " ID: " + Строка.idЗаписиПриход + "
							|Дата ухода: " + Строка.ДатаУхода + " ID: " + Строка.idЗаписиУход + "
							|";
							ЗаписьЖурналаРегистрации("Импорт данных.frontol.Ошибка импорта", УровеньЖурналаРегистрации.Ошибка, , ,ТекстОшибки + " " + ОписаниеОшибки());
						КонецЕсли;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
	КонецЕсли;

	ADOСоединение.Close();
	ADOСоединение = Неопределено;

КонецПроцедуры // ЗагрузитьДанныеПоОтметкамВнештатныхСотрудников()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти

#КонецОбласти
