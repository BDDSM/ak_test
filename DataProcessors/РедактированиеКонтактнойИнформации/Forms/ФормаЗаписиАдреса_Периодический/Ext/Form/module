Перем БылаНажатаКнопкаОК;

Перем мСтруктураИзмерений Экспорт;
Перем мДоступностьРедактированияДома Экспорт;

Перем мАвтоотметкаНезаполненногоВида Экспорт;

// Обработка поиска по строке для ВИДА
Перем мОбработкаПоискаПоСтроке;
Перем мТекстПоискаПоСтроке;
Перем мПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Региона
Перем мРегионОбработкаПоискаПоСтроке;
Перем мРегионТекстПоискаПоСтроке;
Перем мРегионПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Района
Перем мРайонОбработкаПоискаПоСтроке;
Перем мРайонТекстПоискаПоСтроке;
Перем мРайонПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Города
Перем мГородОбработкаПоискаПоСтроке;
Перем мГородТекстПоискаПоСтроке;
Перем мГородПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Населенного Пункта
Перем мНаселенныйПунктОбработкаПоискаПоСтроке;
Перем мНаселенныйПунктТекстПоискаПоСтроке;
Перем мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Улицы
Перем мУлицаОбработкаПоискаПоСтроке;
Перем мУлицаТекстПоискаПоСтроке;
Перем мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке;

Перем мПромежуточныйАдресЗаПределамиРФ;
Перем мПромежуточнаяСтранаЗаПределамиРФ;
Перем мПромежуточныйИндекс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура по коду устанавливает атрибуты адресного элемента
Процедура ЗаполнитьПоКодуАдресныеЭлементы(КодАдресногоЭлемента) Экспорт

	УправлениеКонтактнойИнформацией.ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7);
		
КонецПроцедуры

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставление()

	Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЭтотОбъект);

	СохранитьИзмененияВСтроку();
	
КонецПроцедуры

// Процедура обслуживает событие изменения типа адреса
// Российский адрес и Адрес за пределами РФ
// 
// Параметры
//  НЕТ
//
Процедура ПриИзмененииТипаАдреса()

	Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
		
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Ложь;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Ложь;
		
		ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		
	Иначе
	
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Истина;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Истина;
		
		Если ПроизвольныйАдрес Тогда
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		Иначе
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.РегламентированныйАдрес;
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// процедура устанавливает доступность для редактирования дома, корпуса квартиры
Процедура УстановитьДоступностьРедактированияДома()
	
	ЭлементыФормы.НадписьДом.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Дом.Доступность = мДоступностьРедактированияДома;
	
	ЭлементыФормы.НадписьКорпус.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Корпус.Доступность = мДоступностьРедактированияДома;
	
	ЭлементыФормы.НадписьКвартира.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Квартира.Доступность = мДоступностьРедактированияДома;

КонецПроцедуры

// Процедура вызывается при открытии формы.
//
Процедура ПриОткрытии()
	
	Если НачальноеЗначениеВыбора = Неопределено Тогда
		
		УстановитьДоступностьРедактированияДома();
		
		//ЭлементыФормы.Объект.ТолькоПросмотр     = НЕ ДоступностьОбъекта;
		
		ЭлементыФормы.Вид.АвтоОтметкаНезаполненного = мАвтоотметкаНезаполненногоВида;
		Если ЭлементыФормы.Вид.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.Вид.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Вид);
		Иначе		
			ЭлементыФормы.Вид.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если Вид = Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект) И ДоступностьОбъекта Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Объект;
		ИначеЕсли НЕ ЗначениеЗаполнено(Вид) Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Вид;
		Иначе
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Регион;
		КонецЕсли; 
		
		Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			ПроизвольныйАдрес = Истина;
		Иначе
			ПроизвольныйАдрес = НЕ УправлениеКонтактнойИнформацией.ОпределитьДляОбъектаРоссийскийАдрес(ЭтотОбъект);
		КонецЕсли;
		
		ПриИзмененииТипаАдреса();
		
	КонецЕсли;
	
	мПоследнееЗначениеЭлементаПоискаПоСтроке		 			= Вид;
	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке			= Поле2;
	мРайонПоследнееЗначениеЭлементаПоискаПоСтроке 			= Поле3;
	мГородПоследнееЗначениеЭлементаПоискаПоСтроке				= Поле4;
	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке	= Поле5;
	мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке				= Поле6;
	
	Если мВозвратСтруктуры = Истина Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Ложь;
	КонецЕсли;
	
    УстановитьПредставлениеДляСложногоАдреса();
	
	Если НаборПериодическихДанных.Количество() > 0 Тогда
		ЭлементыФормы.НаборПериодическихДанных.ТекущаяСтрока = НаборПериодическихДанных[НаборПериодическихДанных.Количество() - 1];
	КонецЕсли;
	ЗаполнитьДанныеИзТекСтроки();
		
КонецПроцедуры

// Процедура вызывается при ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	//ЭтаФорма.ЭлементыФормы.Вид.ТолькоПросмотр = (Объект = Неопределено);

	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Вид, мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Регион, мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Район, мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Город, мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.НаселенныйПункт, мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Улица, мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

Процедура Поле1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора(, Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент.Значение);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "РоссийскийАдрес".
//
Процедура РоссийскийАдресПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		ПриИзмененииТипаАдреса();
		мПромежуточныйИндекс = Поле1;
		УстановитьПредставлениеДляСложногоАдреса();
		Поле1 = мПромежуточнаяСтранаЗаПределамиРФ;
		мПромежуточныйАдресЗаПределамиРФ  = "";
		мПромежуточнаяСтранаЗаПределамиРФ = "";
		
	Иначе
		мПромежуточныйАдресЗаПределамиРФ  = ПредставлениеАдреса;
		мПромежуточнаяСтранаЗаПределамиРФ = Поле1;
		Поле1 = мПромежуточныйИндекс;
		мПромежуточныйИндекс = "";
		СформироватьПредставление();
		ПриИзмененииТипаАдреса();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при очистке значения элемента формы Объект.
//
Процедура ОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" поля ввода "Регион".
//
Процедура РегионПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
	ПоРегионуОпределитьКодРегиона();
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Район".
//
Процедура РайонПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Город".
//
Процедура ГородПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Улица".
//
Процедура УлицаПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дом".
//
Процедура ДомПриИзменении(Элемент)

	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Корпус".
//
Процедура КорпусПриИзменении(Элемент)

	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Квартира".
//
Процедура КвартираПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Индекс".
//
Процедура ИндексПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры



// Универсальная процедура - обработчик для выпадающего списка сокращений территориальных единиц
Процедура ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Регион".
//
Процедура РегионНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле2, 1);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Район".
//
Процедура РайонНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле3, 2);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Город".
//
Процедура ГородНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле4, 3);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле5, 4);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Улица".
//
Процедура УлицаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле6, 5);
	
КонецПроцедуры



// Процедура перехватывает момент начала выбора вида контактной информации.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект = Неопределено ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Сообщить("Выберите объект.");
		Возврат;
		
	КонецЕсли;

	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект));
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Регион".
//
Процедура РегионНачалоВыбора(Элемент, СтандартнаяОбработка)
	
    ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле2);
	ФормаВыбора.ОтобратьТолькоРегионы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле2));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Район".
//
Процедура РайонНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле3);
	ФормаВыбора.УстановитьРодителя(Поле2, "", "", "");
	ФормаВыбора.ОтобратьТолькоРайоны(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле3));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Город".
//
Процедура ГородНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле4);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, "", "");
	ФормаВыбора.ОтобратьТолькоГорода(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле4));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле5);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, "");
	ФормаВыбора.ОтобратьТолькоНаселенныеПункты(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле5));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Улица".
//
Процедура УлицаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле6);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, Поле5);
	ФормаВыбора.ОтобратьТолькоУлицы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле6));
	ФормаВыбора.Открыть();

КонецПроцедуры



// Процедура заполняет поля родителя и проверяет потомков при кстановке адреса
Процедура ОбновитьАдресныеЭлементы(АдреснаяЗапись)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, АдреснаяЗапись);
	// Для всех элементов ниже по иерархии надо определить подходят ли он под ограничения
	УправлениеКонтактнойИнформацией.АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Поле2, Поле3, Поле4, Поле5, Поле6, АдреснаяЗапись);
	// последние значения поисков по строке запоминаем
	УправлениеКонтактнойИнформацией.УстановитьПоследниеЗначенияПоисковПоСтрокеДляАдресныхЭлементов(Поле2, Поле3, Поле4, Поле5, Поле6,
	 	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке,
	 	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
		
	// получаем индекс
	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

//Процедура - универсальный обработчик для события обработка выбора адресных элементов
Процедура УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдреснаяЗапись = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись);
	ОбновитьАдресныеЭлементы(АдреснаяЗапись);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Регион".
//
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Район".
//
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Город".
//
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Улица".
//
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры



// Процедура перехватывает момент начала выбора Объекта.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = УправлениеКонтактнойИнформацией.НачалоВыбораОбъектаКИ(ЭтаФорма, Элемент, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Вид.
//
Процедура ВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Вид.
//
Процедура ВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке);
	
КонецПроцедуры

// Процедура обработчик события ПриИзменении элемента формы Вид.
//
Процедура ВидПриИзменении(Элемент)
	
	мПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	ПриИзмененииТипаАдреса();
	
	СохранитьИзмененияВСтроку();
	
КонецПроцедуры



// Процедура автоподбора текста для различных территориальных делений
Процедура УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
												 
	СтруктураЭлемента = Неопределено;											 
	УправлениеКонтактнойИнформацией.АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
												 СтруктураЭлемента);

	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
													  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение); 
		// не надо предков и потомков обновлять - пользователь может еще не определился
		//ОбновитьАдресныеЭлементы(СтруктураЭлемента);

	КонецЕсли;
		
КонецПроцедуры

//Универсальня процедура обработки окончания ввода текста для территориального подразделения
Процедура УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке)
	СтруктураЭлемента = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке,
													СтруктураЭлемента);

	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Регион
Процедура РегионАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 "", "", "", "", 1);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Регион
Процедура РегионОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											"", "", "", "", 1,
											мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
		
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Район
Процедура РайонАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, "", "", "", 2);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Район
Процедура РайонОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, "", "", "", 2,
											мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
	
КонецПроцедуры
	
// Процедура обработчик события АвтоПодборТекста элемента формы Город
Процедура ГородАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, "", "", 3);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Город
Процедура ГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, "", "", 3,
											мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);

КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4);									  
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4,
											мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
											
КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура УлицаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, Поле4, Поле5, 5);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, Поле5, 5,
											мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
											
КонецПроцедуры


//Процедура устанавливает представление для сложного адреса
Процедура УстановитьПредставлениеДляСложногоАдреса()
	
	Если НЕ ПустаяСтрока(мПромежуточныйАдресЗаПределамиРФ) Тогда
		ТекущееПредставлениеАдреса = мПромежуточныйАдресЗаПределамиРФ;
	Иначе
		ТекущееПредставлениеАдреса = СокрЛП(ЭтотОбъект.Представление);
	КонецЕсли;
	
	
	Если ПроизвольныйАдрес Тогда
		
		ТекущееПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(ЭтотОбъект.Поле1, ТекущееПредставлениеАдреса);
	
	КонецЕсли;
	
	ПредставлениеАдреса = ТекущееПредставлениеАдреса;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура - обработчик события "ЗагрузитьАК" командной панели "ДействияФормы".
//
Процедура ДействияФормыЗагрузитьАК(Кнопка)

	РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").Открыть();

КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Если ЗаписатьЛок() = Истина Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьЛок()
	
	НаборПериодическихДанных.Записать(); 
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	БылаНажатаКнопкаОК = Истина;
	
	// Если Адрес за пределами РФ, то надо к представлению страну добавить
	Если ПроизвольныйАдрес Тогда
		
		ЭтотОбъект.Представление = УправлениеКонтактнойИнформацией.СформироватьПредставлениеАдресаЗаПределамиРФ(ЭтотОбъект.Поле1, ЭтаФорма.ПредставлениеАдреса);
		// Для произвольного адреса поля со второго по 10 - незначимые
		Для а = 2 По 10 Цикл
			ЭтотОбъект["Поле" + Строка(а)] = "";			
		КонецЦикла;
				
	КонецЕсли;
	
	
	Если мВозвратСтруктуры = Истина Тогда
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Представление",  Представление);		
		Для а = 1 По 10 Цикл
			СтруктураАдреса.Вставить("Поле" + Строка(а), ЭтотОбъект["Поле" + Строка(а)]);
		КонецЦикла;		
		ОповеститьОВыборе(СтруктураАдреса);
	Иначе	
		Если ЗаписатьЛок() = Истина Тогда
			Модифицированность = Ложь;
			Закрыть(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность И мВозвратСтруктуры <> Истина Тогда
		Отказ = ЗакрыватьФормуРедактирования();
	КонецЕсли; 
	
	Закрыть(БылаНажатаКнопкаОК);

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Если НачальноеЗначениеВыбора <> Неопределено Тогда
	//	
	//	НачальноеЗначениеВыбора.Свойство("Индекс", Поле1);
	//	НачальноеЗначениеВыбора.Свойство("Регион", КодРегиона);
	//	НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", Поле2);
	//	Если ПустаяСтрока(Поле2) Тогда
	//		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
	//	КонецЕсли;
	//	НачальноеЗначениеВыбора.Свойство("Район", Поле3);
	//	НачальноеЗначениеВыбора.Свойство("Город", Поле4);
	//	НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", Поле5);
	//	НачальноеЗначениеВыбора.Свойство("Улица", Поле6);
	//	НачальноеЗначениеВыбора.Свойство("Дом", Поле7);
	//	НачальноеЗначениеВыбора.Свойство("Корпус", Поле8);
	//	НачальноеЗначениеВыбора.Свойство("Квартира", Поле9);
	//	НачальноеЗначениеВыбора.Свойство("Представление", Представление);
	//	
	//	
	//	КодСтраны = "643";
	//	мНаВходеКодРегиона = Ложь;
	//	
	//	Если РегламентированнаяОтчетность.ПустоеЗначение(Поле1) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(КодРегиона) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле2) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле3) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле4) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле5) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле6) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле7) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле8) 
	//		И РегламентированнаяОтчетность.ПустоеЗначение(Поле9) 
	//		И НЕ ПустаяСтрока(Представление) Тогда
	//		
	//		РазобратьПредставление();
	//		
	//	КонецЕсли;
	//	
	//	СформироватьПредставление();
	//	
	//	ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляРегламентированнойОтчетности.Видимость = Истина;
	//	ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляКонтактнойИнформации.Видимость = Ложь;
	//	
	//	ЭлементыФормы.ПанельНастроекАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляРегламентированнойОтчетности;
	//	
	//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать);
	//	
	//Иначе
		ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляРегламентированнойОтчетности.Видимость = Ложь;
		ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляКонтактнойИнформации.Видимость = Истина;
		
		ЭлементыФормы.ПанельНастроекАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекАдреса.Страницы.ДляКонтактнойИнформации;
		
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан объект контактных данных",,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан тип контактной информации",,,, Отказ);
		Возврат;
	КонецЕсли;
	
	НаборПериодическихДанных.Отбор.Тип.Установить(Тип);
	НаборПериодическихДанных.Отбор.Объект.Установить(Объект);
	НаборПериодическихДанных.Прочитать();
	Таб = НаборПериодическихДанных.Выгрузить();
	Таб.Сортировать("Период");
	НаборПериодическихДанных.Загрузить(Таб);
	
	БылаНажатаКнопкаОК = Ложь;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ТипЗнч(НачальноеЗначениеВыбора) <> Тип("Структура") Тогда
		
		НачальноеЗначениеВыбора = Новый Структура;
		
	КонецЕсли;
	
	НачальноеЗначениеВыбора.Вставить("Индекс", СокрЛП(Поле1));
	НачальноеЗначениеВыбора.Вставить("Регион", ?(СтрДлина(КодРегиона) = 1, "0" + КодРегиона, КодРегиона));
	НачальноеЗначениеВыбора.Вставить("НазваниеРегиона", Поле2);
	НачальноеЗначениеВыбора.Вставить("Район", Поле3);
	НачальноеЗначениеВыбора.Вставить("Город", Поле4);
	НачальноеЗначениеВыбора.Вставить("НаселенныйПункт", Поле5);
	НачальноеЗначениеВыбора.Вставить("Улица", Поле6);
	НачальноеЗначениеВыбора.Вставить("Дом", Поле7);
	НачальноеЗначениеВыбора.Вставить("Корпус", Поле8);
	НачальноеЗначениеВыбора.Вставить("Квартира", Поле9);
	НачальноеЗначениеВыбора.Вставить("Представление", Представление);
	НачальноеЗначениеВыбора.Вставить("КодСтраны", КодСтраны);

КонецПроцедуры


// Процедура возвращает название региона по его коду.
Функция НазваниеРегионаПоКоду(КодРег)
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(КодРег) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка 
		КодРегЧисло = Число(КодРег);
	Исключение
		Возврат "";
	КонецПопытки;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Код
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |
	               |ГДЕ
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	               |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодРегионаВКоде";
	
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодРегЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Процедура разбирает адрес в формате "9 запятых" на составляющие.
Процедура РазобратьПредставление()			  
	
	Параметры = Новый СписокЗначений;
	
	ПредыдущаяЗапятая = 0;
	Для Сч = 1 По СтрДлина(Представление) Цикл
		ТекСимв = Сред(Представление, Сч, 1);
		Если ТекСимв = "," Тогда
			Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, Сч - (ПредыдущаяЗапятая + 1)));
			ПредыдущаяЗапятая = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущаяЗапятая <> СтрДлина(Представление) Тогда
		Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, СтрДлина(Представление) - ПредыдущаяЗапятая));
	КонецЕсли;
	
	Для Сч = Параметры.Количество() + 1 По 10 Цикл
		
		Параметры.Добавить("");
		
	КонецЦикла;
	
	КодСтраны = Параметры.Получить(0);
	Поле1 = Параметры.Получить(1);
	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.Получить(2).Значение) ИЛИ ПустаяСтрока(Параметры.Получить(2)) Тогда
		мНаВходеКодРегиона = Ложь;
		Поле2 = Параметры.Получить(2);
		КодРегиона = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	Иначе
		мНаВходеКодРегиона = Истина;
		КодРегиона = Параметры.Получить(2);
		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	Поле3 = Параметры.Получить(3);
	Поле4 = Параметры.Получить(4);
	Поле5 = Параметры.Получить(5);
	Поле6 = Параметры.Получить(6);
	Поле7 = Параметры.Получить(7);
	Поле8 = Параметры.Получить(8);
	Поле9 = Параметры.Получить(9);
		
КонецПроцедуры

Процедура КодРегионаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Поле2) И Не ПустаяСтрока(КодРегиона) Тогда
		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
		СформироватьПредставление();
	КонецЕсли;
	
КонецПроцедуры

// Для регламентированной отчетности - после выбора региона установить код региона
Процедура ПоРегионуОпределитьКодРегиона()

	Если НачальноеЗначениеВыбора = Неопределено ИЛИ ПустаяСтрока(Поле2) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКод = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	Если Не ПустаяСтрока(НайденныйКод) Тогда
		КодРегиона = НайденныйКод;
	КонецЕсли;

КонецПроцедуры


Процедура ДействияФормыЗаполнитьПоОбычнойКонтактнойИнформации(Кнопка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10,
	               |	КонтактнаяИнформация.Комментарий,
	               |	КонтактнаяИнформация.ЗначениеПоУмолчанию,
	               |	КонтактнаяИнформация.Объект,
	               |	КонтактнаяИнформация.Тип
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НайденаТекущая = Ложь;
		Для Каждого Движение Из НаборПериодическихДанных Цикл
			Если Движение.Период = НачалоДня(ТекущаяДата()) Тогда
				НайденаТекущая = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Не НайденаТекущая Тогда
			Движение = НаборПериодическихДанных.Добавить();
			Движение.Период = ТекущаяДата();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		ЭлементыФормы.НаборПериодическихДанных.ТекущаяСтрока = Движение;
		ЗаполнитьДанныеИзТекСтроки();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзТекСтроки()
	
	ТекДанные = ЭлементыФормы.НаборПериодическихДанных.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ЗаписьПустая = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаписьПустая.Тип = Тип;
		ЗаписьПустая.Объект = Объект;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗаписьПустая);
		ПредставлениеАдреса = "";
	Иначе	
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекДанные);
		ПредставлениеАдреса = ТекДанные.Представление;
	КонецЕсли;
	
	Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
		ПроизвольныйАдрес = Истина;
	Иначе
		ПроизвольныйАдрес = (ВРЕГ(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЭтотОбъект)) <> ВРЕГ(Представление));
	КонецЕсли;
	
	ПриИзмененииТипаАдреса();
	
	УстановитьПредставлениеДляСложногоАдреса();
	
	//ЭлементыФормы.Панель1.Доступность = НЕ (ТекДанные = Неопределено);
	
КонецПроцедуры

Процедура СохранитьИзмененияВСтроку()
	
	ТекДанные = ЭлементыФормы.НаборПериодическихДанных.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекДанные, ЭтаФорма);
		Если ПроизвольныйАдрес Тогда
			ТекДанные.Представление = ПредставлениеАдреса;
		Иначе	
			ТекДанные.Представление = Представление;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура НаборПериодическихДанныхПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьДанныеИзТекСтроки();
	
КонецПроцедуры

Процедура НаборПериодическихДанныхПослеУдаления(Элемент)
	
	ЗаполнитьДанныеИзТекСтроки();
	
КонецПроцедуры

Процедура Представление1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПредставлениеАдреса = Текст;
	СохранитьИзмененияВСтроку();
	
КонецПроцедуры

ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);


мСтруктураИзмерений = Неопределено;
мДоступностьРедактированияДома = Истина;
мАвтоотметкаНезаполненногоВида = Истина;

мПромежуточныйАдресЗаПределамиРФ  = "";
мПромежуточнаяСтранаЗаПределамиРФ = "";
мПромежуточныйИндекс              = "";
