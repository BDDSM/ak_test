
//////////////////////////////////////////////////////////////
//

&НаСервере
Процедура ДобавитьСтрокуДерева(Знач Строки, Знач ИсходныеСтроки)

    //
    Для каждого СтрокаТЗ Из ИсходныеСтроки Цикл
        
        //
        Если НЕ СтрокаТЗ.ЭтоГруппа Тогда
            Продолжить;
        КонецЕсли;    
		
		 //
        Если СтрокаТЗ.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Товар Тогда
            Продолжить;
        КонецЕсли;    
		
		//
		НоваяСтрока = Строки.Добавить();
		НоваяСтрока.Ссылка = СтрокаТЗ.Ссылка;            
        
        //
        Если НоваяСтрока <> Неопределено Тогда
            НоваяСтрока.Картинка = БиблиотекаКартинок.ГруппаСправочника;
        КонецЕсли;    
		
        //
        Если СтрокаТЗ.Наименование = "_root_" Тогда
            _Строки = Строки;
        Иначе
            _Строки = НоваяСтрока.ПолучитьЭлементы();
        КонецЕсли;    
        
        //            
        Если СтрокаТЗ.Строки.Количество() > 0 Тогда
        	ДобавитьСтрокуДерева(_Строки, СтрокаТЗ.Строки);
        КонецЕсли; 
		
		//
		НоваяСтрока.КоличествоПодчиненных = НоваяСтрока.ПолучитьЭлементы().Количество();
		
    КонецЦикла; 
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоГрупп()

    //
    ДЗ_ДеревоГрупп.ПолучитьЭлементы().Очистить();
        
	//
	ТЗ = "ВЫБРАТЬ
	     |	Номенклатура.Ссылка КАК Ссылка,
	     |	Номенклатура.Наименование КАК Наименование,
	     |	Номенклатура.ЭтоГруппа,
	     |	Номенклатура.ВидНоменклатуры
	     |ИЗ
	     |	Справочник.Номенклатура КАК Номенклатура
	     |ГДЕ
	     |	НЕ Номенклатура.ЭтоГруппа
	     |	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	Наименование
	     |ИТОГИ ПО
	     |	Ссылка ИЕРАРХИЯ
	     |АВТОУПОРЯДОЧИВАНИЕ";
         
    //
    ПЗ = Новый ПостроительЗапроса;
    ПЗ.Текст = ТЗ;
    
    //
    ПЗ.Выполнить();
    
    //
    ДЗ_Результат = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	//
    Строки = ДЗ_ДеревоГрупп.ПолучитьЭлементы();
	
	//
	СтрокаКорень = Строки.Добавить();
	СтрокаКорень.Картинка = БиблиотекаКартинок.ГруппаСправочника;
	
    //
    ДобавитьСтрокуДерева(СтрокаКорень.ПолучитьЭлементы(), ДЗ_Результат.Строки);
	
	//
	СтрокаКорень.КоличествоПодчиненных = СтрокаКорень.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
//

&НаСервере
Функция ПолучитьНомерНеделиПоДате(Дата)
	
	//
	РезультатНомерНедели = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	СоответствиеДатДнямНедели.НомерНедели
	     |ИЗ
	     |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	     |ГДЕ
	     |	СоответствиеДатДнямНедели.Дата = &Дата";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", НачалоДня(Дата));
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатНомерНедели = Выборка.НомерНедели;
	
	КонецЕсли; 
	
	//
	Возврат РезультатНомерНедели;

КонецФункции // ()

&НаСервере
Функция ПолучитьКоличествоРаботающихМагазинов(НомерНедели)
	
	//
	РезультатКоличество = 0;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК Количество
	     |ИЗ
	     |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК ДатаОткрытияНомерНедели
	     |		ПО СтруктурныеЕдиницы.ДатаОткрытия = ДатаОткрытияНомерНедели.Дата
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК ДатаЗакрытияНомерНедели
	     |		ПО СтруктурныеЕдиницы.ДатаЗакрытия = ДатаЗакрытияНомерНедели.Дата
	     |ГДЕ
	     |	&НомерНедели МЕЖДУ ДатаОткрытияНомерНедели.НомерНедели И ЕСТЬNULL(ДатаЗакрытияНомерНедели.НомерНедели, &НомерНедели)
	     |	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	     |	И СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	     |	И (СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Открыт)
	     |			ИЛИ СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт))";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("НомерНедели", НомерНедели);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатКоличество = Выборка.Количество;
	КонецЕсли; 
	
	//
	Возврат РезультатКоличество;

КонецФункции

//////////////////////////////////////////////////////////////
//ADO

//
//
&НаСервере
Функция ADO_Execute(ADOСоединение, ТекстЗапроса) Экспорт
	
	//
	Попытка
		ADORecordSet = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		ADORecordSet = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADORecordSet;
	
КонецФункции	

//
//
&НаСервере
Функция ADO_Connection(СтрокаПоключения) Экспорт
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = СтрокаПоключения;
	
	//
	Попытка
		ADOСоединение.Open();
	Исключение
		ADOСоединение = Неопределено;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	

	//
	Возврат ADOСоединение;
	
КонецФункции

//////////////////////////////////////////////////////////////
//ADO->1C

&НаСервере
Функция ПреобразоватьРезультатВТаблицуЗначений(rsTABLE) Экспорт
	
	//
	КоличествоПолейТаблица = rsTABLE.fields.Count - 1;
	
	//
	ТаблицаПоискаТаблица = Новый массив;
    Если (НЕ rsTABLE.EOF) Тогда
        ТаблицаПоискаТаблица = rsTABLE.GetRows().Выгрузить();
	КонецЕсли;
	
	//
	Если ТаблицаПоискаТаблица.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//
	тзРезультат = Новый ТаблицаЗначений;
	
	//
	Для сч = 0 По КоличествоПолейТаблица Цикл
		
		//
		массив = Новый Массив;
		
		//
		флНайденТип = Ложь;
		
		//
		Для к = 0 По ТаблицаПоискаТаблица.Количество() - 1 Цикл
			Если ТипЗнч(ТаблицаПоискаТаблица[к][сч]) <> Тип("Null") Тогда
				массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[к][сч]));
				флНайденТип = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флНайденТип Тогда
			массив.Добавить(ТипЗнч(ТаблицаПоискаТаблица[0][сч]));
		КонецЕсли;
		
        тзРезультат.Колонки.Добавить(rsTABLE.fields.item(сч).name,Новый ОписаниеТипов(массив));
    КонецЦикла;

    Для Каждого стрТаблица Из ТаблицаПоискаТаблица Цикл
        стр=тзРезультат.Добавить();
        Для сч = 0 По КоличествоПолейТаблица Цикл
			попытка
				стр[сч] = СокрЛП(стрТаблица[сч]);				
            исключение
               	сообщить(ОписаниеОшибки());
			конецпопытки;			
        КонецЦикла;
	КонецЦикла;
	Возврат тзРезультат;
КонецФункции

&НаСервере
Функция RecordSet_в_ТаблицуЗначений(RecordSet, ОписаниеИсточникаДанных, Периодичность = Неопределено) Экспорт 
	
	//
	РезультатТЗ = Новый ТаблицаЗначений;
	
	//
	Для Каждого Field Из RecordSet.Fields Цикл
		
		//
		Тип = Неопределено;
		
		//
		НайденнаяСтрока = ОписаниеИсточникаДанных.Найти(Field.Name, "ИмяПоля");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			//
			Попытка
				Тип = НайденнаяСтрока.Тип;
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
		
		//
		Если ЗначениеЗаполнено(Тип) Тогда
			РезультатТЗ.Колонки.Добавить(Field.Name, Тип);	
		Иначе	
			РезультатТЗ.Колонки.Добавить(Field.Name);
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	стСоответствиеДатИНомеровНедель = Новый Соответствие;
	
	//
	Если НЕ RecordSet.BOF Тогда
		
		//
		RecordSet.MoveFirst();
		
	КонецЕсли;	
	
	//
	КоличествоПолей = RecordSet.Fields.Count();
		
	//
	Пока НЕ RecordSet.EOF Цикл
		
		//
		НоваяСтрока = РезультатТЗ.Добавить();
		
		//
		Для Индекс = 0 По РезультатТЗ.Колонки.Количество() Цикл
			
			//
			Если Индекс = КоличествоПолей Тогда
				Прервать;
			КонецЕсли;	
			
			//
			Колонка = РезультатТЗ.Колонки[Индекс];
			
			//
			ПоляADO = RecordSet.Fields;
			
			//
			Item = ПоляADO.Item(Индекс);
			
			//
			Значение = Item.Value;
			
			//	
			НоваяСтрока[Индекс] = Значение;
			
		КонецЦикла;	
		
		//
		Если НЕ RecordSet.EOF Тогда 
			RecordSet.MoveNext();
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат РезультатТЗ;
	
КонецФункции	

&НаСервере
Функция ПолучитьRecordset_ФактическиеПродажи(НеделяС, НеделяПо, Массив_IDTOV = Неопределено)
	
	//
	RS = Неопределено;
	
	//
	стрIDTOV = "";
	Для каждого ЭлементМассива Из Массив_IDTOV Цикл
		стрIDTOV = стрIDTOV + Формат(ЭлементМассива, "ЧДЦ=0; ЧГ=") + ", ";
	КонецЦикла; 
	
	//
	стрIDTOV = Лев(стрIDTOV, СтрДлина(стрIDTOV) - 2);
	
	//
	СтрокаПоключения = ВнешниеДанные.ПолучитьСтрокуСоединенияSQL("{SQL Server}", , "IzbenkaFin", , , "LANGUAGE=русский");
	ADOConnection = ADO_Connection(СтрокаПоключения);
		
	//
	QueryText = "SELECT 
				|	Weeks._Fld2679 as WeekNum,
				|	chl.id_tov_cl as id_tov,
				|	SUM(Quantity * znak) as Q,
				|	SUM(BaseSum * znak) as  S
				|FROM SMS_UNION..Checkline chl (nolock)
				|	INNER JOIN IzbenkaFin.._Reference42 as List_TT
				|	ON 
				|		chl.id_tt_cl = List_TT._Fld758
				|		AND List_TT._Fld318RRef = 0x86AF486AD1B9CEE248DECEF0516F8BB9
				|		AND _Fld2375RRef = 0xA0C305F0DAE4D80A4E1A722CE778CC22	
				|	LEFT JOIN IzbenkaFin.._InfoRg2677 as Weeks
				|	ON	DATEADD(YEAR, - 2000, Weeks._Fld2678)  = chl.date_ch
				|WHERE 
				|	Weeks._Fld2679 >= &WeekFrom AND Weeks._Fld2679 <= &WeekTo 
				|	AND chl.id_tov_cl IN (###VALUES###)
				|GROUP BY Weeks._Fld2679, chl.id_tov_cl";
	//
	
	QueryText = СтрЗаменить(QueryText, "&WeekFrom", Формат(НеделяС, "ЧДЦ=0; ЧГ=")); 
	QueryText = СтрЗаменить(QueryText, "&WeekTo", Формат(НеделяПо, "ЧДЦ=0; ЧГ=")); 
	QueryText = СтрЗаменить(QueryText, "###VALUES###", стрIDTOV); 
	
	//
	RS = ADO_Execute(ADOConnection, QueryText);
	
	//
	Возврат RS;
	
КонецФункции	

//////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьТаблицуОсновная(ТекущаяГруппа)
	
	//
	ТЗ_Основная.Очистить();
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ЕСТЬNULL(Таблица.Номенклатура.Наименование, Таблица.ПланНаименование) КАК ПорядокНаименование,
	     |	ВЫБОР
	     |		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.УЕК_СтатусыНоменклатуры.План)
	     |			ТОГДА 0
	     |		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.УЕК_СтатусыНоменклатуры.Подготовка)
	     |			ТОГДА 1
	     |		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена)
	     |			ТОГДА 2
	     |		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.УЕК_СтатусыНоменклатуры.НачалоПродаж)
	     |			ТОГДА 3
	     |	КОНЕЦ КАК ПорядокСтатус,
	     |	Таблица.Номенклатура,
	     |	Таблица.Статус КАК Статус,
	     |	Таблица.Группа,
	     |	Таблица.Фишка,
	     |	Таблица.СтавкаНДС,
	     |	Таблица.ПланНаименование,
	     |	Таблица.ПланЦенаБезНДС,
	     |	Таблица.ПланЦена,
	     |	Таблица.ПланЧастота,
	     |	Таблица.ПланКоличествоПродажНаМагазин,
	     |	Таблица.ПланДатаЗапускаПредварительная,
	     |	Таблица.ПланПроцентНаценки,
	     |	Таблица.ПланПроцентМаржи,
	     |	Таблица.ПланЦенаЗакупкиБезНДС,
	     |	Таблица.ПланЦенаЗакупки,
	     |	Таблица.ЗапускДата,
	     |	Таблица.ЗапускНаименование,
	     |	Таблица.ЗапускДатаНачалаПродажПредварительная,
	     |	Таблица.ЗапускВес,
	     |	Таблица.ЗапускЦенаЗакупкиБезНДС,
	     |	Таблица.ЗапускЦенаЗакупки,
	     |	Таблица.ЗапускЦенаБезНДС,
	     |	Таблица.ЗапускЦена,
	     |	Таблица.ЗапускПроцентНаценки,
	     |	Таблица.ЗапускСтоимостьУпаковки,
	     |	Таблица.ЗапускСтоимостьДоставки,
	     |	Таблица.Автор,
	     |	Таблица.ПризнакАнализПланФакт,
	     |	Таблица.ПризнакАнализПрогнозФакт,
	     |	Таблица.ПризнакЗапуск,
	     |	Таблица.ЦенаСреднерыночная,
	     |	ВЫБОР
	     |		КОГДА Таблица.ЦенаСреднерыночная <> 0
	     |			ТОГДА Таблица.ПланЦена / Таблица.ЦенаСреднерыночная
	     |		ИНАЧЕ 0
	     |	КОНЕЦ КАК ПланЦенаКСреднерыночной,
	     |	Таблица.Технолог,
	     |	ВЫБОР
	     |		КОГДА НЕ Таблица.Номенклатура.Ссылка ЕСТЬ NULL 
	     |			ТОГДА ИСТИНА
	     |		ИНАЧЕ ЛОЖЬ
	     |	КОНЕЦ КАК ПризнакНоменклатураСоздана,
	     |	Таблица.Период
	     |ИЗ
	     |	РегистрСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СрезПоследних КАК Таблица
	     |ГДЕ
	     |	НЕ Таблица.ПризнакПомещенаВАрхив
	     |{ГДЕ
	     |	Таблица.Номенклатура.*,
	     |	Таблица.Группа.*}
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ПорядокСтатус,
	     |	ПорядокНаименование";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("Группа");
		ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
		ЭлементОтбора.Значение = ТекущаяГруппа;
		ЭлементОтбора.Использование = Истина;
	
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		НоваяСтрока = ТЗ_Основная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПланФакт(ТекущаяГруппа)
	
	//
	ТЗ_ПланФакт.Очистить();
	
	//
	ТаблицаRS = Неопределено;
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	Таблица.Номенклатура.id_tov КАК ID_TOV
	     |ИЗ
	     |	РегистрСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СрезПоследних КАК Таблица
	     |ГДЕ
	     |	Таблица.ПризнакАнализПланФакт
	     |	И НЕ Таблица.Номенклатура.id_tov ЕСТЬ NULL 
	     |	И НЕ Таблица.ПризнакПомещенаВАрхив";
		 
	//	 
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Если ПЗ.Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	//
	МассивIDTOV = ПЗ.Результат.Выгрузить().ВыгрузитьКолонку("ID_TOV");
	
	//
	НеделяПо = ПолучитьНомерНеделиПоДате(ТекущаяДата());
	НеделяС = НеделяПо - 3;
	
	//
	RS = ПолучитьRecordset_ФактическиеПродажи(НеделяС, НеделяПо, МассивIDTOV);
	Если RS <> Неопределено Тогда
		ТаблицаRS = ПреобразоватьРезультатВТаблицуЗначений(RS);
	КонецЕсли;
	
	//
	Если ТаблицаRS = Неопределено Тогда
	
		//
		ТаблицаRS = Новый ТаблицаЗначений;
		ТаблицаRS.Колонки.Добавить("WeekNum", Новый ОписаниеТипов("Число"));
		ТаблицаRS.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
		ТаблицаRS.Колонки.Добавить("Q", Новый ОписаниеТипов("Число"));
		ТаблицаRS.Колонки.Добавить("S", Новый ОписаниеТипов("Число"));
		
	КонецЕсли; 
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	ТЗ.WeekNum,
	     |	ТЗ.id_tov,
	     |	ТЗ.Q,
	     |	ТЗ.S
	     |ПОМЕСТИТЬ ТЗ_Recordset
	     |ИЗ
	     |	&ТЗ КАК ТЗ
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_Продажи.WeekNum КАК WeekNum,
	     |	ТЗ_Продажи.id_tov КАК id_tov,
	     |	ТЗ_Продажи.Q КАК Q,
	     |	ТЗ_Продажи.S КАК S
	     |ПОМЕСТИТЬ ТЗ_Продажи
	     |ИЗ
	     |	ТЗ_Recordset КАК ТЗ_Продажи
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	СоответствиеДатДнямНедели.НомерНедели
	     |ПОМЕСТИТЬ ТЗ_НомераНедель
	     |ИЗ
	     |	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	     |ГДЕ
	     |	СоответствиеДатДнямНедели.НомерНедели МЕЖДУ &НомерС И &НомерПо
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ЕСТЬNULL(Таблица.Номенклатура.Наименование, Таблица.ПланНаименование) КАК ПорядокНаименование,
	     |	Таблица.Номенклатура КАК Номенклатура,
	     |	Таблица.Статус КАК Статус,
	     |	Таблица.Группа,
	     |	Таблица.Фишка,
	     |	Таблица.СтавкаНДС,
	     |	Таблица.ПланНаименование,
	     |	Таблица.ПланЦена,
	     |	Таблица.ПланЧастота,
	     |	Таблица.ПланКоличествоПродажНаМагазин,
	     |	Таблица.ПланДатаЗапускаПредварительная,
	     |	Таблица.ПланПроцентНаценки,
	     |	Таблица.ПланПроцентМаржи,
	     |	Таблица.ПланЦенаЗакупкиБезНДС,
	     |	Таблица.ЗапускДата,
	     |	Таблица.ЗапускНаименование,
	     |	Таблица.ЗапускДатаНачалаПродажПредварительная,
	     |	Таблица.ЗапускВес,
	     |	Таблица.ЗапускЦенаЗакупкиБезНДС,
	     |	Таблица.ЗапускЦена,
	     |	Таблица.ЗапускПроцентНаценки,
	     |	Таблица.ЗапускСтоимостьУпаковки,
	     |	Таблица.ЗапускСтоимостьДоставки,
	     |	Таблица.Автор,
	     |	Таблица.ПризнакАнализПланФакт,
	     |	Таблица.ПризнакАнализПрогнозФакт,
	     |	Таблица.ПризнакЗапуск,
	     |	Таблица.ЦенаСреднерыночная,
	     |	ВЫБОР
	     |		КОГДА Таблица.ЦенаСреднерыночная <> 0
	     |			ТОГДА Таблица.ПланЦена / Таблица.ЦенаСреднерыночная
	     |		ИНАЧЕ 0
	     |	КОНЕЦ КАК ПланЦенаКСреднерыночной,
	     |	Таблица.Технолог,
	     |	ТЗ_НомераНедель.НомерНедели КАК НомерНедели,
	     |	ТЗ_Продажи.Q КАК Количество,
	     |	ТЗ_Продажи.S КАК Сумма,
	     |	Таблица.ПланЦена * Таблица.ПланКоличествоПродажНаМагазин КАК ВыручкаПланНаМагазин
	     |ИЗ
	     |	РегистрСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СрезПоследних КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_НомераНедель КАК ТЗ_НомераНедель
	     |		ПО (ИСТИНА)
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Продажи КАК ТЗ_Продажи
	     |		ПО (ТЗ_НомераНедель.НомерНедели = ТЗ_Продажи.WeekNum)
	     |			И Таблица.Номенклатура.id_tov = ТЗ_Продажи.id_tov
	     |ГДЕ
	     |	Таблица.ПризнакАнализПланФакт
	     |	И НЕ Таблица.Номенклатура.id_tov ЕСТЬ NULL 
	     |	И НЕ Таблица.ПризнакПомещенаВАрхив
	     |{ГДЕ
	     |	Таблица.Номенклатура.*,
	     |	Таблица.Группа.*}
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ПорядокНаименование,
	     |	НомерНедели";
		 
	//
	Запрос = Новый Запрос;
	Запрос.Текст = ТЗ;
	
	//
	Запрос.УстановитьПараметр("НомерС", НеделяС);
	Запрос.УстановитьПараметр("НомерПо", НеделяПо);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаRS);
	
	////
	//Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
	//	
	//	//
	//	ЭлементОтбора = ПЗ.Отбор.Добавить("Группа");
	//	ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
	//	ЭлементОтбора.Значение = ТекущаяГруппа;
	//	ЭлементОтбора.Использование = Истина;
	//
	//КонецЕсли; 
	
	//
	Результат = Запрос.Выполнить();
	
	//
	Сч = 1;
		
	//
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Сч = 5 Тогда
			Сч = 1;
		КонецЕсли;	
		
		//
		Если Сч = 1 Тогда
			НоваяСтрока = ТЗ_ПланФакт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);	
		КонецЕсли; 
		
		//
		ИмяПоляКоличествоМагазинов = "Н" + Сч + "_КоличествоМагазинов";
		НоваяСтрока[ИмяПоляКоличествоМагазинов] = ПолучитьКоличествоРаботающихМагазинов(Выборка.НомерНедели);
		
		//
		ИмяПоляВыручка = "Н" + Сч + "_ВыручкаФакт";
		НоваяСтрока[ИмяПоляВыручка] = Выборка.Сумма;
		
		//
		ИмяПоляВыручкаНаМагазин = "Н" + Сч + "_ВыручкаФактНаМагазин";
		Если НоваяСтрока[ИмяПоляКоличествоМагазинов] = 0 Тогда
			НоваяСтрока[ИмяПоляВыручкаНаМагазин] = 0;
		Иначе	
			НоваяСтрока[ИмяПоляВыручкаНаМагазин] = НоваяСтрока[ИмяПоляВыручка]/НоваяСтрока[ИмяПоляКоличествоМагазинов];
		КонецЕсли;	
		
		//
		ИмяПоляПроцентВыполнения = "Н" + Сч + "_ПроцентВыполненияПлана";
		Если НоваяСтрока.ВыручкаПланНаМагазин = 0 Тогда
			НоваяСтрока[ИмяПоляПроцентВыполнения] = 0;
		Иначе	
			НоваяСтрока[ИмяПоляПроцентВыполнения] = 100*НоваяСтрока[ИмяПоляВыручкаНаМагазин]/НоваяСтрока.ВыручкаПланНаМагазин;
		КонецЕсли; 
		
		//
		Сч = Сч + 1;
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСтрок(Режим = "РЕЕСТР")
	
	//
	Если Режим = "РЕЕСТР" Тогда
		
		//
		ОтборРеестр = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборРеестр = Новый ФиксированнаяСтруктура("Технолог", Объект.Технолог);	
		КонецЕсли; 
		
		//
		Если Элементы.ТЗ_Реестр.ОтборСтрок <> ОтборРеестр Тогда
			Элементы.ТЗ_Реестр.ОтборСтрок = ОтборРеестр;	
		КонецЕсли; 
	
	ИначеЕсли Режим = "ПЛАН" Тогда
		
		//
		ОтборПлан = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборПлан = Новый ФиксированнаяСтруктура("Статус, Технолог", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.План"), Объект.Технолог);
		Иначе
			ОтборПлан = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.План"));
		КонецЕсли;	
		
		//
		Если Элементы.ТЗ_План.ОтборСтрок <> ОтборПлан Тогда
			Элементы.ТЗ_План.ОтборСтрок = ОтборПлан;
		КонецЕсли;
		
	ИначеЕсли Режим = "КЗАПУСКУ" Тогда	
		
		//
		ОтборКЗапуску = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборКЗапуску = Новый ФиксированнаяСтруктура("Статус, Технолог", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка"), Объект.Технолог);
		Иначе	
			ОтборКЗапуску = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка"));
		КонецЕсли;	
		
		//
		Если Элементы.ТЗ_КЗапуску.ОтборСтрок <> ОтборКЗапуску Тогда
			Элементы.ТЗ_КЗапуску.ОтборСтрок = ОтборКЗапуску;
		КонецЕсли;
		
	ИначеЕсли Режим = "ЗАПУСК" Тогда		
		
		//
		ОтборЗапуск = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборЗапуск = Новый ФиксированнаяСтруктура("Статус, Технолог", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена"), Объект.Технолог);
		Иначе	
			ОтборЗапуск = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена"));
		КонецЕсли;
		
		//
		Если Элементы.ТЗ_Запуск.ОтборСтрок <> ОтборЗапуск Тогда
			Элементы.ТЗ_Запуск.ОтборСтрок = ОтборЗапуск;
		КонецЕсли; 
		
	ИначеЕсли Режим = "НАЧАЛОПРОДАЖ" Тогда			
		
		//
		ОтборНачалоПродаж = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборНачалоПродаж = Новый ФиксированнаяСтруктура("Статус, Технолог", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.НачалоПродаж"), Объект.Технолог);
		Иначе	
			ОтборНачалоПродаж = Новый ФиксированнаяСтруктура("Статус", ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.НачалоПродаж"));
		КонецЕсли;
		
		//
		Если Элементы.ТЗ_НачалоПродаж.ОтборСтрок <> ОтборНачалоПродаж Тогда
			Элементы.ТЗ_НачалоПродаж.ОтборСтрок = ОтборНачалоПродаж
		КонецЕсли; 
		
	ИначеЕсли Режим = "ПЛАНФАКТ" Тогда				
		
		
	ИначеЕсли Режим = "ПРОГНОЗФАКТ" Тогда				
		
		//
		ОтборПрогноз = Неопределено;
		Если ЗначениеЗаполнено(Объект.Технолог) Тогда
			ОтборПрогноз = Новый ФиксированнаяСтруктура("ПризнакАнализПрогнозФакт, Технолог", Истина, Объект.Технолог);
		Иначе	
			ОтборПрогноз = Новый ФиксированнаяСтруктура("ПризнакАнализПрогнозФакт", Истина);
		КонецЕсли;
		
		//
		Если Элементы.ТЗ_Прогноз.ОтборСтрок <> ОтборПрогноз Тогда
			Элементы.ТЗ_Прогноз.ОтборСтрок = ОтборПрогноз;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьСсылкуНовогоЭлементаНоменклатуры()
	Возврат Справочники.Номенклатура.ПолучитьСсылку();
КонецФункции // ()

//////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НоменклатураДеревоГруппВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//
	ТекущаяСтрока = Элементы.НоменклатураДеревоГрупп.ТекущаяСтрока;
	Если ТекущаяСтрока = ТекущаяГруппаНоменклатуры Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущаяГруппаНоменклатуры = ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДеревоГруппПриАктивизацииСтроки(Элемент)
	
	//
	ТекущаяСсылка = Элементы.ДЗ_ДеревоГрупп.ТекущиеДанные.Ссылка;
	Если ТекущаяСсылка = ТекущаяГруппаНоменклатуры Тогда
		Возврат;
	КонецЕсли; 
	
	//
	ТекущаяГруппаНоменклатуры = ТекущаяСсылка;
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
	//
	Элементы.ТЗ_Реестр.ИзменятьСоставСтрок = (Элементы.ДЗ_ДеревоГрупп.ТекущиеДанные.КоличествоПодчиненных = 0);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаписатьДанныеСтрокиВРегистр(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	МЗ = РегистрыСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, ТекущаяСтрока);
	
	//
	МЗ.Период = ТекущаяДата();
	МЗ.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	//
	МЗ.Записать();

КонецПроцедуры

&НаСервере
Функция ДобавитьНовуюСтрокуНаСервере(ТекущаяГруппа)
	
	//////////////////
	НоваяСтрока = ТЗ_Основная.Добавить();
	
	//
	НоваяСтрока.Номенклатура = ПолучитьСсылкуНовогоЭлементаНоменклатуры(); //тут пустую ссылку
	НоваяСтрока.Группа = ТекущаяГруппаНоменклатуры;
	
	//
	НоваяСтрока.Статус = Перечисления.УЕК_СтатусыНоменклатуры.План;
	
	//
	НоваяСтрока.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	////////////////////
	Индекс = ТЗ_Основная.Индекс(НоваяСтрока); 
	ЗаписатьДанныеСтрокиВРегистр(Индекс);

КонецФункции // ()

&НаСервере
Функция УдалитьЗаписьИзРегистра(Индекс)
	
	//
	ВсеОК = Ложь;
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат ВсеОК;
	КонецЕсли; 
	
	//
	МЗ = РегистрыСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СоздатьМенеджерЗаписи();
	МЗ.Номенклатура = ТекущаяСтрока.Номенклатура;
	
	//
	МЗ.Период = ТекущаяДата();
	МЗ.ПризнакПомещенаВАрхив = Истина;
	
	//
	МЗ.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	//
	Попытка
		
		//
		МЗ.Записать();
		
		//
		ВсеОК = Истина;
		
	Исключение
	КонецПопытки;	

	//
	Возврат ВсеОК;
	
КонецФункции

//////////////////////////////////////////////////////

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС);
	
	//
	ТекущаяСтрока.ПланЦена = (100 + ПроцентНДС) * ТекущаяСтрока.ПланЦенаБезНДС/100;
	ТекущаяСтрока.ЗапускЦена = (100 + ПроцентНДС) * ТекущаяСтрока.ЗапускЦенаБезНДС/100;
	
	//
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЦенаБезНДСПриИзменении(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.ПланЦена = (100 + ПроцентНДС) * ТекущаяСтрока.ПланЦенаБезНДС/100;
	
	//
	Если ТекущаяСтрока.ЦенаСреднерыночная <> 0 Тогда
		ТекущаяСтрока.ПланЦенаКСреднерыночной = ТекущаяСтрока.ПланЦена/ТекущаяСтрока.ЦенаСреднерыночная;
	Иначе	
		ТекущаяСтрока.ПланЦенаКСреднерыночной = 0;
	КонецЕсли;
	
	//
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЦенаПриИзменении(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.ПланЦенаБезНДС = 100 * ТекущаяСтрока.ПланЦена/(100 + ПроцентНДС);
	
	//
	Если ТекущаяСтрока.ЦенаСреднерыночная <> 0 Тогда
		ТекущаяСтрока.ПланЦенаКСреднерыночной = ТекущаяСтрока.ПланЦена/ТекущаяСтрока.ЦенаСреднерыночная;
	Иначе	
		ТекущаяСтрока.ПланЦенаКСреднерыночной = 0;
	КонецЕсли; 
	
	//
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускЦенаБезНДСПриИзменении(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.ЗапускЦена = (100 + ПроцентНДС) * ТекущаяСтрока.ЗапускЦенаБезНДС/100;
	
	//
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускЦенаПриИзменении(Индекс)
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.ЗапускЦенаБезНДС = 100 * ТекущаяСтрока.ЗапускЦена/(100 + ПроцентНДС);
	
	//
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

//////////////////////////////////////////////////////
//РЕЕСТР

&НаКлиенте
Процедура ТЗ_РеестрПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПередУдалением(Элемент, Отказ)
	
	//
	Отказ = Истина;
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ВсеОК = УдалитьЗаписьИзРегистра(Индекс);
	
	//
	Если ВсеОК Тогда
		ТЗ_Основная.Удалить(Индекс);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//
	Отказ = Истина;
	
	//+++тут нужно проверить. а разрешен ли ввод
	
	
	//---тут нужно проверить. а разрешен ли ввод
	
	//
	НоваяСтрока = ДобавитьНовуюСтрокуНаСервере(ТекущаяГруппаНоменклатуры);
	
	//
	УстановитьОтборыСтрок("РЕЕСТР");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПризнакАнализПрогнозФактПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПризнакАнализПланФактПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПриАктивизацииСтроки(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//
	Если ТЗ_РеестрТекущаяСтрока = Элементы.ТЗ_Реестр.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;	
	
	//
	ТЗ_РеестрТекущаяСтрока = Элементы.ТЗ_Реестр.ТекущаяСтрока;
	
	//
	НовыйСтатус = ПолучитьСледующийСтатус(ТекущиеДанные.Статус);
	
	//
	Элементы.ТЗ_РеестрКомандаРеестрИзменитьСтатус.Видимость = (ТекущиеДанные.Статус <> НовыйСтатус);
	Если Элементы.ТЗ_РеестрКомандаРеестрИзменитьСтатус.Видимость Тогда
		Элементы.ТЗ_РеестрКомандаРеестрИзменитьСтатус.Заголовок = ВРЕГ(НовыйСтатус);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
		ТекущиеДанные.Технолог = ВыбранныйЭлемент.Значение;
		
		//
		Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
		ЗаписатьДанныеСтрокиВРегистр(Индекс);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрТехнологНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Истина;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрЦенаСреднерыночнаяПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ТекущиеДанные.ЦенаСреднерыночная <> 0 Тогда
		ТекущиеДанные.ПланЦенаКСреднерыночной = ТекущиеДанные.ПланЦена/ТекущиеДанные.ЦенаСреднерыночная;
	Иначе	
		ТекущиеДанные.ПланЦенаКСреднерыночной = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрСтавкаНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	СтавкаНДСПриИзменении(Индекс);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПланЦенаБезНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ПланЦенаБезНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрПланЦенаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ПланЦенаПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрЗапускЦенаБезНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаБезНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_РеестрЗапускЦенаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаПриИзменении(Индекс);
	
КонецПроцедуры


//////////////////////////////////////////////////////
//ПЛАН

&НаКлиенте
Процедура ТЗ_ПланПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//
	ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланПриАктивизацииСтроки(Элемент)

	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//
	Отказ = Истина;
	
	//+++тут нужно проверить. а разрешен ли ввод
	
	
	//---тут нужно проверить. а разрешен ли ввод
	
	//
	НоваяСтрока = ДобавитьНовуюСтрокуНаСервере(ТекущаяГруппаНоменклатуры);
	
	//
	УстановитьОтборыСтрок(ВРЕГ(Элементы.ГруппаОсновнаяПанельЦентрСтраницы.ТекущаяСтраница.Заголовок));
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
		ТекущиеДанные.Технолог = ВыбранныйЭлемент.Значение;
		
		//
		Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
		ЗаписатьДанныеСтрокиВРегистр(Индекс);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланСтавкаНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	СтавкаНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланЦенаБезНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ПланЦенаБезНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланЦенаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ПланЦенаПриИзменении(Индекс);
	
КонецПроцедуры

///////////////////////////////////////////////
//К ЗАПУСКУ

&НаКлиенте
Процедура ТЗ_КЗапускуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//
	ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КЗапускуТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
		ТекущиеДанные.Технолог = ВыбранныйЭлемент.Значение;
		
		//
		Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
		ЗаписатьДанныеСтрокиВРегистр(Индекс);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КЗапускуСтавкаНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	СтавкаНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КЗапускуЗапускЦенаБезНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаБезНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КЗапускуЗапускЦенаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаПриИзменении(Индекс);
	
КонецПроцедуры

//////////////////////////////////////////////////////
//ЗАПУСК
&НаКлиенте
Процедура ТЗ_ЗапускПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Запуск.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЗапускТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		ТекущиеДанные = Элементы.ТЗ_Запуск.ТекущиеДанные;
		ТекущиеДанные.Технолог = ВыбранныйЭлемент.Значение;
		
		//
		Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
		ЗаписатьДанныеСтрокиВРегистр(Индекс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЗапускСтавкаНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Запуск.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	СтавкаНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЗапускЦенаБезНДСПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Запуск.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаБезНДСПриИзменении(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЗапускЦенаПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Запуск.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗапускЦенаПриИзменении(Индекс);
	
КонецПроцедуры

//////////////////////////////////////////////////////
//ПРОГНОЗ

&НаКлиенте
Процедура ТЗ_ПрогнозПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Прогноз.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПрогнозПрогнозируетсяПриИзменении(Элемент)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Прогноз.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Процедура КомандаУстановитьСтатусКЗапускуНаСервере(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусКЗапуску(Команда)
	
	//
	ТекущиеДанные = Элементы.ТЗ_План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка"); 
	
	//
	ТекущиеДанные.ЗапускДата = ТекущаяДата();
	ТекущиеДанные.ЗапускНаименование = ТекущиеДанные.ПланНаименование;
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
	//
	УстановитьОтборыСтрок("ПЛАН");
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаУстановитьСтатусЗапуск(Команда)
	
	//
	ТекущиеДанные = Элементы.ТЗ_КЗапуску.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена"); 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ЗаписатьДанныеСтрокиВРегистр(Индекс);
	
	//
	УстановитьОтборыСтрок("КЗАПУСКУ");
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаКлиенте
Процедура ГруппаОсновнаяПанельЦентрСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	ТекущийРежим = "РЕЕСТР";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	ЗаполнитьДеревоГрупп();
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

//////////////////////////////////////////////////////
//РАЗОБРАТЬ

&НаКлиенте
Процедура КомандаПоказатьДеревоГруппНоменклатуры(Команда)
	
	//
	Элементы.ГруппаНоменклатураДеревоГрупп.Видимость = НЕ Элементы.ГруппаНоменклатураДеревоГрупп.Видимость;
	
	//
	ТекущаяГруппаНоменклатуры = Неопределено;
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	УстановитьОтборыСтрок(ТекущийРежим);
	
КонецПроцедуры

////////////////////////////

&НаКлиенте
Процедура УстановитьРежим(Режим)
	
	//
	Элементы.ГруппаОсновнаяПанельЦентрРеестр.Видимость = (ТекущийРежим = "РЕЕСТР");
	Элементы.ГруппаОсновнаяПанельЦентрПлан.Видимость = (ТекущийРежим = "ПЛАН");
	Элементы.ГруппаОсновнаяПанельЦентрКЗапуску.Видимость = (ТекущийРежим = "КЗАПУСКУ");
	Элементы.ГруппаОсновнаяПанельЦентрЗапуск.Видимость = (ТекущийРежим = "ЗАПУСК");
	Элементы.ГруппаОсновнаяПанельЦентрНачалоПродаж.Видимость = (ТекущийРежим = "НАЧАЛОПРОДАЖ");
	Элементы.ГруппаОсновнаяПанельЦентрПланФакт.Видимость = (ТекущийРежим = "ПЛАНФАКТ");
	Элементы.ГруппаОсновнаяПанельЦентрПрогнозФакт.Видимость = (ТекущийРежим = "ПРОГНОЗФАКТ");
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаУстановитьРежимРеестр(Команда)
	
	//
	ТекущийРежим = "РЕЕСТР";
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимПлан(Команда)
	
	//
	ТекущийРежим = "ПЛАН";
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимКЗапуску(Команда)
	
	//
	ТекущийРежим = "КЗАПУСКУ";
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимНачалоПродаж(Команда)
	
	//
	ТекущийРежим = "НАЧАЛОПРОДАЖ";
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимЗапуск(Команда)
	
	//
	ТекущийРежим = "ЗАПУСК";
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимПланФакт(Команда)
	
	//
	ТекущийРежим = "ПЛАНФАКТ";
	
	//
	НомерНедели = ПолучитьНомерНеделиПоДате(ТекущаяДата());
	
	//
	Элементы.ТЗ_ПланФактГруппаНеделя4.Заголовок = НомерНедели;
	Элементы.ТЗ_ПланФактГруппаНеделя3.Заголовок = НомерНедели - 1;
	Элементы.ТЗ_ПланФактГруппаНеделя2.Заголовок = НомерНедели - 2;
	Элементы.ТЗ_ПланФактГруппаНеделя1.Заголовок = НомерНедели - 3;
	
	//
	ЗаполнитьТаблицуПланФакт(ТекущаяГруппаНоменклатуры);
	
	//
	УстановитьРежим(ТекущийРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимПрогноз(Команда)
	
	//
	ТекущийРежим = "ПРОГНОЗФАКТ";
	
	//
	ЗаполнитьТаблицуОсновная(ТекущаяГруппаНоменклатуры);
	УстановитьОтборыСтрок(ТекущийРежим);
	
	//
	УстановитьРежим(ТекущийРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТехнологПриИзменении(Элемент)
	
	//
	УстановитьОтборыСтрок(ТекущийРежим);
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьСледующийСтатусНаСервере(ТекущийСтатус)
	
	//
	Результат = ТекущийСтатус;
	
	//
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.План") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка");
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена");
	КонецЕсли; 	
	
	//
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСледующийСтатус(ТекущийСтатус)
	
	//
	Результат = ТекущийСтатус;
	
	//
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.План") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка");
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовка") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.УЕК_СтатусыНоменклатуры.Подготовлена");
	КонецЕсли; 	
	
	//
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция РеестрИзменитьСтатус(Индекс)

	//
	ВсеОК = Ложь;
	
	//
	ТекущаяСтрока = ТЗ_Основная.Получить(Индекс);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат ВсеОК;
	КонецЕсли;
	
	//
	НовыйСтатус = ПолучитьСледующийСтатусНаСервере(ТекущаяСтрока.Статус); 
	Если ТекущаяСтрока.Статус <> НовыйСтатус Тогда
		
		//
		МЗ = РегистрыСведений.УЕК_РеестрЗаводимыхПозицийНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ТекущаяСтрока);
		
		//
		МЗ.Статус = НовыйСтатус; 
		
		//
		МЗ.Период = ТекущаяДата();
		МЗ.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		//
		Попытка
			
			//
			МЗ.Записать();
			
			//
			ТекущаяСтрока.Статус = НовыйСтатус;
			
		Исключение
			ВсеОК = Ложь;
		КонецПопытки;	
	
	КонецЕсли; 
	
	//
	Возврат ВсеОК;
	
КонецФункции

&НаКлиенте
Процедура КомандаРеестрИзменитьСтатус(Команда)
	
	//
	ТекущиеДанные = Элементы.ТЗ_Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//
	Индекс = ТЗ_Основная.Индекс(ТекущиеДанные);
	ВсеОК = РеестрИзменитьСтатус(Индекс);
	
	//
	ТЗ_РеестрПриАктивизацииСтроки(Элементы.ТЗ_Реестр);
	
КонецПроцедуры


///////////////////////////////////////////////////////

/////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьСписокРолейСТипомТехнологПоКачеству()
	
	//
	Результат = Новый СписокЗначений;
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	     |	СоответствиеОбъектРольСрезПоследних.РольПользователя.Наименование КАК РольПользователяНаименование
	     |ИЗ
	     |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
	     |ГДЕ
	     |	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	РольПользователяНаименование";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Выполнить();
	
	//
	Результат.ЗагрузитьЗначения(ПЗ.Результат.Выгрузить().ВыгрузитьКолонку("РольПользователя"));
	
	//
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ТехнологНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Ложь;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент();
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		//
		Объект.Технолог = ВыбранныйЭлемент.Значение;
		
		//
		ТехнологПриИзменении(Элементы.Технолог);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТехнологНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//
	СтандартнаяОбработка = Истина;
	
	//
	СписокВыбора = ПолучитьСписокРолейСТипомТехнологПоКачеству();
	
	//
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры






















