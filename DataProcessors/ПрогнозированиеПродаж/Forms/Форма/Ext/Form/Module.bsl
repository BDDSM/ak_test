//////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьДеньНеделиПоДате(мДата)
	
	Если ДеньНедели(мДата) = 1 Тогда
		Возврат Перечисления.ДниНедели.Понедельник;
	ИначеЕсли ДеньНедели(мДата) = 2 Тогда
		Возврат Перечисления.ДниНедели.Вторник;
	ИначеЕсли ДеньНедели(мДата) = 3 Тогда
		Возврат Перечисления.ДниНедели.Среда;
	ИначеЕсли ДеньНедели(мДата) = 4 Тогда
		Возврат Перечисления.ДниНедели.Четверг;
	ИначеЕсли ДеньНедели(мДата) = 5 Тогда
		Возврат Перечисления.ДниНедели.Пятница;
	ИначеЕсли ДеньНедели(мДата) = 6 Тогда
		Возврат Перечисления.ДниНедели.Суббота;
	Иначе
		Возврат Перечисления.ДниНедели.Воскресенье;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДняНедели(мДата)
	
	Если ДеньНедели(мДата) = 1 Тогда
		Возврат "пн";
	ИначеЕсли ДеньНедели(мДата) = 2 Тогда
		Возврат "вт";
	ИначеЕсли ДеньНедели(мДата) = 3 Тогда
		Возврат "ср";
	ИначеЕсли ДеньНедели(мДата) = 4 Тогда
		Возврат "чт";
	ИначеЕсли ДеньНедели(мДата) = 5 Тогда
		Возврат "пт";
	ИначеЕсли ДеньНедели(мДата) = 6 Тогда
		Возврат "сб";
	Иначе
		Возврат "вс";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГраницыНеделиПоНомеру(мНомерНедели)
	
	Перем Запрос, МассивСтрок, РезультатЗапроса, Выборка, СтруктураЗначений;
	
	СтруктураДат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели", мНомерНедели);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(СоответствиеДатДнямНедели.Дата) КАК ДатаНач,
	|	МАКСИМУМ(СоответствиеДатДнямНедели.Дата) КАК ДатаКон
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДат.Вставить("ДатаНач", Выборка.ДатаНач);
		СтруктураДат.Вставить("ДатаКон", КонецДня(Выборка.ДатаКон));
	КонецЕсли;
	
	Возврат СтруктураДат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуНеделиОтДаты(мДата)
	
	мТаблицаДат = Новый ТаблицаЗначений;
	мТаблицаДат.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	мТаблицаДат.Колонки.Добавить("ДеньНедели"	, Новый ОписаниеТипов("ПеречислениеСсылка.ДниНедели"));
	ТекДата = мДата;
	Для н = 0 По 6 Цикл
		НоваяСтрока = мТаблицаДат.Добавить();
		НоваяСтрока.Дата 		= ТекДата;
		НоваяСтрока.ДеньНедели	= ПолучитьДеньНеделиПоДате(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	Возврат мТаблицаДат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДнейПериодаВНеделе(СтруктураПараметров, мНомерНедели)
	
	Перем Запрос, МассивСтрок, РезультатЗапроса, Выборка, СтруктураЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели"		, мНомерНедели);
	Запрос.УстановитьПараметр("ДатаНачала"		, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, СтруктураПараметров.ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДЕНЬНЕДЕЛИ(СоответствиеДатДнямНедели.Дата) КАК ДеньНедели,
	|	СоответствиеДатДнямНедели.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели
	|	И СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	МассивСтрок = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивСтрок;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗначений = Новый Структура("ДеньНедели, Дата", Выборка.ДеньНедели, Выборка.Дата);
		МассивСтрок.Добавить(СтруктураЗначений);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеИзДерева(мЗначение, ТекстСправочника)
	
	Возврат ?(НЕ мЗначение = "<Все>", мЗначение, Справочники[ТекстСправочника].ПустаяСсылка());
	
КонецФункции

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервереБезКонтекста
Функция ПолучитьСкладРасчетчикаСервер(мРасчетчик)

	Склад = Неопределено;
	
	Если ЗначениеЗаполнено(мРасчетчик) Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мРасчетчик, "Склад");
	КонецЕсли;
	
	Возврат Склад;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипТТСервер(мТТ)
	
	Возврат мТТ.ТипТорговойТочкиДляАссортимента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеПоставщикаСервер(мПоставщик)
	
	Возврат РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(мПоставщик.Наименование);
	
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьТипТТДляТА(мТТ)
	
	Возврат мТТ.ТипТорговойТочкиДляАссортимента;
	
КонецФункции

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервереБезКонтекста
Функция ПолучитьТТНеУчаствуетВРаспределении(мТТ)

	НеУчаствуетВРаспределении = Ложь;
	
	Если ЗначениеЗаполнено(мТТ) Тогда
		НеУчаствуетВРаспределении = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мТТ, "НеУчаствуетВРаспределении");
	КонецЕсли;
	
	Возврат НеУчаствуетВРаспределении;

КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураГоднаДляДобавленияВАссортимент(мНоменклатура)
	
	Возврат (НЕ мНоменклатура.Выведена)
				И НЕ мНоменклатура.СлужебныйТовар;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦеныНоменклатурыДляПлановПродаж(мТТ, мМассивНоменклатуры, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, мТТ);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, мМассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = &ТорговаяТочка
	|				ИЛИ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.ТорговаяТочка = &ТорговаяТочка)
	|			И (ВТЦены.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|			И (ВТЦены.Номенклатура = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивНоменклатуры)";
	
    Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиФактическиеОстаткиТоваров(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ФактическиеОстаткиТоваров.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиТоварныеОграничения(СтруктураЗаписи)
	
    Возврат РегистрыСведений.ТоварныеОграниченияНаТочках.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи)

	Если СтруктураЗаписи.Характеристика = Неопределено Тогда
		СтруктураЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
    Возврат РегистрыСведений.ОстаткиРаспределенныеПоТТ.СоздатьКлючЗаписи(СтруктураЗаписи);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнююДатуВнесенияЛистовУчета(мСписокТорговыхТочек)
	
	Перем Запрос, РезультатЗапроса, Выборка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЛистовУчета"		, НачалоДня(ТекущаяДата()) - 7 * 86400);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мСписокТорговыхТочек);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	ЛистУчета.Дата >= &ДатаЛистовУчета
	|	И ЛистУчета.ТорговаяТочка В(&МассивТорговыхТочек)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛистУчета.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Дата;
	
КонецФункции


Процедура ЗаполнитьТаблицуФактическихОстатков(мСписокТорговыхТочек = Неопределено)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"					, ЭтаФорма.ДатаОстатков);
	Запрос.УстановитьПараметр("ДатаАссортимента"		, КонецДня(ЭтаФорма.ДатаОстатков + 86400));
	
	Если ТипЗнч(мСписокТорговыхТочек) = Тип("СписокЗначений") Тогда
		ТекСписокТТ = мСписокТорговыхТочек;
	Иначе
		ТекСписокТТ = ЭтаФорма.СписокТорговыхТочек;
    КонецЕсли;
	мМассив = Новый Массив;
	Для Каждого ЭлементСписка Из ТекСписокТТ Цикл
		мМассив.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивТорговыхТочек"		, мМассив);
	
	Если НЕ ЭтаФорма.ВыводитьВсюНоменклатуруФО Тогда
 		мМассив 		 = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
 		мМассивАналогов	 = ЭтаФорма.СписокПолныхАналоговТоваров.ВыгрузитьЗначения();
 		мМассивКомплекта = ЭтаФорма.СписокСоставаКомплекта.ВыгрузитьЗначения();
		Запрос.УстановитьПараметр("ПоВсейНоменклатуре"	, 0);
	Иначе
		мМассив 		 = Новый Массив;
		мМассивАналогов  = Новый Массив;
		мМассивКомплекта = Новый Массив;
		Запрос.УстановитьПараметр("ПоВсейНоменклатуре"	, 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивНоменклатуры"		, мМассив);
	Запрос.УстановитьПараметр("МассивПолныхАналогов"	, мМассивАналогов);
	Запрос.УстановитьПараметр("МассивСоставаКомплекта"	, мМассивКомплекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийФактическиеОстаткиТоваров.Дата,
	|	РегистрСведенийФактическиеОстаткиТоваров.ТорговаяТочка,
	|	РегистрСведенийФактическиеОстаткиТоваров.Номенклатура,
	|	РегистрСведенийФактическиеОстаткиТоваров.Количество
	|ИЗ
	|	РегистрСведений.ФактическиеОстаткиТоваров КАК РегистрСведенийФактическиеОстаткиТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				&ДатаАссортимента,
	|				ТорговаяТочка В (&МассивТорговыхТочек)
	|					И (&ПоВсейНоменклатуре = 1
	|						ИЛИ Номенклатура В (&МассивНоменклатуры))) КАК ТоварныйАссортиментТочек
	|		ПО (ТоварныйАссортиментТочек.ТорговаяТочка = РегистрСведенийФактическиеОстаткиТоваров.ТорговаяТочка)
	|			И (ТоварныйАссортиментТочек.Номенклатура = РегистрСведенийФактическиеОстаткиТоваров.Номенклатура)
	|ГДЕ
	|	РегистрСведенийФактическиеОстаткиТоваров.Дата = &Дата
	|	И РегистрСведенийФактическиеОстаткиТоваров.ТорговаяТочка В(&МассивТорговыхТочек)
	|	И ((&ПоВсейНоменклатуре = 1
	|				ИЛИ РегистрСведенийФактическиеОстаткиТоваров.Номенклатура В (&МассивНоменклатуры))
	|				И НЕ ТоварныйАссортиментТочек.ТорговаяТочка ЕСТЬ NULL 
	|				И НЕ ТоварныйАссортиментТочек.Выведена
	|			ИЛИ РегистрСведенийФактическиеОстаткиТоваров.Номенклатура В (&МассивПолныхАналогов)
	|			ИЛИ РегистрСведенийФактическиеОстаткиТоваров.Номенклатура В (&МассивСоставаКомплекта))
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведенийФактическиеОстаткиТоваров.id_TT,
	|	РегистрСведенийФактическиеОстаткиТоваров.Номенклатура.Наименование";
	
	//
	ЭтаФорма.ТаблицаФактическихОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКаталогФайловОтправкаЗаказов(мДата)
	
	ПутьККаталогу = "D:\Izbenka\Управление Заказов\Общая УРЗ\Заказы\" + Формат(мДата, "ДЛФ=Д");
	КаталогНаДиске = Новый Файл(ПутьККаталогу);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;
	
	Возврат ПутьККаталогу;
	
КонецФункции

//+++АК LATV 2018.10.11 ИП-00020042
// Процедура заполняет таблицы на форме по данным регистра сведений "Планы продаж по дням недели" на планируемый период
//
Процедура ЗаполнитьТаблицыПродаж(мСписокТТ = Неопределено)

	Если мСписокТТ = Неопределено Тогда
		мСписокТТ = СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("ДатаНачала"			, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончания"		, Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, СписокНоменклатуры.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мСписокТТ);
	
	Запрос.Текст =
		//+++АК MOSD 2018.12.08 ИП-00018605 оптимизация запроса
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Наименование КАК Наименование
		|ПОМЕСТИТЬ втСпрНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&МассивНоменклатуры)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СпрНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрСтруктурныеЕдиницы.Ссылка,
		|	СпрСтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		|	СпрСтруктурныеЕдиницы.НеУчаствуетВРаспределении КАК НеУчаствуетВРаспределении,
		|	СпрСтруктурныеЕдиницы.id_TT КАК id_TT
		|ПОМЕСТИТЬ втСпрСтруктурныеЕдиницы
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СпрСтруктурныеЕдиницы
		|ГДЕ
		|	СпрСтруктурныеЕдиницы.Ссылка В(&МассивТорговыхТочек)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СпрСтруктурныеЕдиницы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеДатДнямНедели.НомерНедели КАК НомерНедели,
		|	СоответствиеДатДнямНедели.Дата КАК Дата
		|ПОМЕСТИТЬ втСоответствиеДатДнямНедели
		|ИЗ
		|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
		|ГДЕ
		|	СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыПродажПоДнямНедели.Дата,
		|	ПланыПродажПоДнямНедели.ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура,
		|	ПланыПродажПоДнямНедели.Количество КАК Количество,
		|	ПланыПродажПоДнямНедели.Цена КАК Цена
		|ПОМЕСТИТЬ втПланыПродажПоДнямНедели
		|ИЗ
		|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|ГДЕ
		|	ПланыПродажПоДнямНедели.Номенклатура В (ВЫБРАТЬ вт.Ссылка ИЗ втСпрНоменклатура КАК вт)
		|	И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
		|	И ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПланыПродажПоДнямНедели.Дата,
		|	ПланыПродажПоДнямНедели.ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//---АК MOSD 
		|ВЫБРАТЬ
		|	СпрСтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		|	СпрСтруктурныеЕдиницы.НеУчаствуетВРаспределении КАК НеУчаствуетВРаспределении,
		|	СпрСтруктурныеЕдиницы.id_TT КАК id_TT,
		|	СоответствиеДатДнямНедели.НомерНедели КАК НомерНедели,
		|	СоответствиеДатДнямНедели.Дата КАК Дата
		|ПОМЕСТИТЬ втТорговыеТочки
		|ИЗ
		//+++АК MOSD 2018.12.08 ИП-00018605
		|	втСпрСтруктурныеЕдиницы КАК СпрСтруктурныеЕдиницы
		//|	Справочник.СтруктурныеЕдиницы КАК СпрСтруктурныеЕдиницы
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
		//|		ПО (СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели ПО ИСТИНА
		//|ГДЕ
		//|	СпрСтруктурныеЕдиницы.Ссылка В(&МассивТорговыхТочек)
		//---АК MOSD 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТорговыеТочки.ТорговаяТочка,
		|	втТорговыеТочки.НеУчаствуетВРаспределении,
		|	втТорговыеТочки.НомерНедели,
		|	СУММА(ПланыПродажПоДнямНедели.Количество * ПланыПродажПоДнямНедели.Цена) КАК Сумма
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		//+++АК MOSD 2018.12.08 ИП-00018605
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ПО втТорговыеТочки.ТорговаяТочка = ПланыПродажПоДнямНедели.ТорговаяТочка
		|			И втТорговыеТочки.Дата = ПланыПродажПоДнямНедели.Дата
		//|			И (ПланыПродажПоДнямНедели.Номенклатура В (&МассивНоменклатуры))
		//|			И (ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик)
		//---АК MOSD 
		|
		|СГРУППИРОВАТЬ ПО
		|	втТорговыеТочки.ТорговаяТочка,
		|	втТорговыеТочки.НеУчаствуетВРаспределении,
		|	втТорговыеТочки.id_TT,
		|	втТорговыеТочки.НомерНедели
		|
		|УПОРЯДОЧИТЬ ПО
		|	втТорговыеТочки.id_TT,
		|	втТорговыеТочки.НомерНедели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СоответствиеДатДнямНедели.Дата КАК Дата,
		|	СоответствиеДатДнямНедели.НомерНедели КАК НомерНедели
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		//+++АК MOSD 2018.12.08 ИП-00018605
		|	втСпрНоменклатура КАК СпрНоменклатура
		//|	Справочник.Номенклатура КАК СпрНоменклатура
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
		//|		ПО (СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели ПО ИСТИНА
		//|ГДЕ
		//|	СпрНоменклатура.Ссылка В(&МассивНоменклатуры)
		//---АК MOSD 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура КАК Номенклатура,
		|	втНоменклатура.НомерНедели КАК НомерНедели,
		|	СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество,
		|	СУММА(ПланыПродажПоДнямНедели.Количество * ПланыПродажПоДнямНедели.Цена) КАК Сумма
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		//+++АК MOSD 2018.12.08 ИП-00018605
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ПО втНоменклатура.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура
		|			И втНоменклатура.Дата = ПланыПродажПоДнямНедели.Дата
		//|			И (ПланыПродажПоДнямНедели.ТорговаяТочка В (&МассивТорговыхТочек))
		|			И (ПланыПродажПоДнямНедели.ТорговаяТочка В (ВЫБРАТЬ вт.Ссылка ИЗ втСпрСтруктурныеЕдиницы КАК вт))
		//|			И (ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик)
		//---АК MOSD 
		|
		|СГРУППИРОВАТЬ ПО
		|	втНоменклатура.Номенклатура,
		|	втНоменклатура.Наименование,
		|	втНоменклатура.НомерНедели
		|
		|УПОРЯДОЧИТЬ ПО
		|	втНоменклатура.Наименование,
		|	втНоменклатура.НомерНедели";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	//+++АК MOSD 2018.12.08 ИП-00018605
	//мТаблица = РезультатыЗапроса[1].Выгрузить();
	мТаблица = РезультатыЗапроса[5].Выгрузить();
	//---АК MOSD 
	ПланыПродажПоТорговымТочкам.Загрузить(мТаблица);
	
	//+++АК MOSD 2018.12.08 ИП-00018605
	//мТаблица = РезультатыЗапроса[3].Выгрузить();
	мТаблица = РезультатыЗапроса[7].Выгрузить();
	//---АК MOSD 
	ПланыПродажПоНоменклатуре.Загрузить(мТаблица);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокиВДеревоПоставщиков(мСтрокиДерева, мДеревоЗапроса)
	
	Перем СтрокиДереваЗапроса, СтрокаПоставщика;
	
	СтрокиДереваЗапроса = мДеревоЗапроса.Строки;
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗапроса Цикл
		
		СтрокаПоставщика = мСтрокиДерева.Строки.Добавить();
		СтрокаПоставщика.Поставщик = СтрокаДерева.Поставщик;
		
		ДобавитьСтрокиВДеревоПоставщиков(СтрокаПоставщика, СтрокаДерева);
		
	КонецЦикла;	
		
КонецПроцедуры


Процедура УстановитьОтборПараметрыНоменклатурыДляЗаказа()
	
	ПараметрыЗапроса = ЭтаФорма.ПараметрыНоменклатурыДляЗаказа.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад"				, Объект.Расчетчик.Склад);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения());
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТТ"				, ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения());
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивПолныхАналогов"	, ЭтаФорма.СписокПолныхАналоговТоваров.ВыгрузитьЗначения());
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаНачалаПлан"		, Объект.ДатаНачалаПлан);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаОкончанияПлан"	, Объект.ДатаОкончанияПлан);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Расчетчик"			, Объект.Расчетчик);
	
КонецПроцедуры

Процедура УстановитьОтборПоказыватьВыведенныйТоварныйАссортиментТочек()
	
	ЭтаФорма.ТоварныйАссортиментТочек.Параметры.УстановитьЗначениеПараметра("ПоказыватьВыведенные",
																	?(ЭтаФорма.ПоказыватьВыведенныйТоварныйАссортимент, 1, 0));
	Элементы.ТоварныйАссортиментТочекВыведена.Видимость = ЭтаФорма.ПоказыватьВыведенныйТоварныйАссортимент;
	
КонецПроцедуры

Процедура УстановитьОтборТоварныйАссортиментТочек(мТорговаяТочка = Неопределено, мНоменклатура = Неопределено)
	
	ПараметрыЗапроса = ЭтаФорма.ТоварныйАссортиментТочек.Параметры;
	
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ТекущаяДата"	, НачалоДня(ТекущаяДата()));
	Если ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, мНоменклатура);
	Иначе
 		мМассив = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
		ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, мМассив);
    КонецЕсли;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СписокЗначений") Тогда
		ТекСписокТТ = мТорговаяТочка;
	Иначе
		ТекСписокТТ = ЭтаФорма.СписокТорговыхТочек;
    КонецЕсли;
	мМассив = Новый Массив;
	Для Каждого ЭлементСписка Из ТекСписокТТ Цикл
		мМассив.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТорговыхТочек", мМассив);
	
КонецПроцедуры


Процедура УстановитьТекстЗапросаПоказателиЗаказа()
	
	//
	ТекстЗапроса = ЭтаФорма.ТекстЗапросаПоказателиДляЗаказа;
	
	мВыводитьРаспределено = Ложь;
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаПоказателей Цикл
		
		Если СтрокаТаблицы.Показывать Тогда
			Если СтрокаТаблицы.Показатель = "Распределено"
					ИЛИ СтрокаТаблицы.Показатель = "Нужно"
					ИЛИ СтрокаТаблицы.Показатель = "План2Больш"
					ИЛИ СтрокаТаблицы.Показатель = "Избыток"
					ИЛИ СтрокаТаблицы.Показатель = "Запас" Тогда
				 мВыводитьРаспределено = Истина;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Показатель = "Мин. остаток" Тогда
			
			ПозицияНачало 		= Найти(ТекстЗапроса, "// Мин. остаток (начало)");
			ПозицияОкончание 	= Найти(ТекстЗапроса, "// Мин. остаток (окончание)");
			
			ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕСТЬNULL(ТоварныеОграниченияНаТочках.МинимальныйОстаток, 0)", "0");
			
		ИначеЕсли СтрокаТаблицы.Показатель = "Заказ товара" Тогда
			
			ПозицияНачало 		= Найти(ТекстЗапроса, "// Заказ товара (начало)");
			ПозицияОкончание 	= Найти(ТекстЗапроса, "// Заказ товара (окончание)");
			
			ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
			
		ИначеЕсли Лев(СтрокаТаблицы.Показатель, 13) = "Факт. остаток" Тогда
			
			ПозицияНачало 		= Найти(ТекстЗапроса, "// Факт. остатки (начало)");
			ПозицияОкончание 	= Найти(ТекстЗапроса, "// Факт. остатки (окончание)");
			
			ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 28);
			
		ИначеЕсли СтрокаТаблицы.Показатель = "План продаж" Тогда
			
			ПозицияНачало 		= Найти(ТекстЗапроса, "// Планы продаж (начало)");
			ПозицияОкончание 	= Найти(ТекстЗапроса, "// Планы продаж (окончание)");
			
			ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ мВыводитьРаспределено Тогда
		ПозицияНачало 		= Найти(ТекстЗапроса, "// Распределено (начало)");
		ПозицияОкончание 	= Найти(ТекстЗапроса, "// Распределено (окончание)");
		
		ТекстЗапроса = Лев(ТекстЗапроса, ПозицияНачало - 1) + Сред(ТекстЗапроса, ПозицияОкончание + 27);
	КонецЕсли;
	
	
	ЭтаФорма.ПоказателиДляЗаказаТоваров.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура УстановитьОтборПоказателиДляЗаказаПоДате()
		
	ПараметрыЗапроса = ЭтаФорма.ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаПоказателей"	, ЭтаФорма.ДатаЗаказов);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаАссортимента"	, КонецДня(ЭтаФорма.ДатаЗаказов));// + 86400));
	
КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаПоСкладуКлиент()

	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад", ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик));

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура УстановитьОтборПоказателиДляЗаказаПоСкладу()

	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад", ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик));

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаПоТоварамКлиент(мНоменклатура = Неопределено, ЭтоПолныйАналог = Ложь)

	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	
	мМассивНоменклатуры = Новый Массив;
	Если ТипЗнч(мНоменклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры		= СписокНоменклатуры.ВыгрузитьЗначения();
		
		мМассивПолныхАналогов	= СписокПолныхАналоговТоваров.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивПолныхАналогов Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
		
		мМассивСоставаКомплекта	= СписокСоставаКомплекта.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивСоставаКомплекта Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
	Иначе
		мМассивНоменклатуры.Добавить(мНоменклатура);
	КонецЕсли;
	
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, мМассивНоменклатуры);

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура УстановитьОтборПоказателиДляЗаказаПоТоварам(мНоменклатура = Неопределено, ЭтоПолныйАналог = Ложь)

	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	
	мМассивНоменклатуры = Новый Массив;
	Если ТипЗнч(мНоменклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры		= СписокНоменклатуры.ВыгрузитьЗначения();
		
		мМассивПолныхАналогов	= СписокПолныхАналоговТоваров.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивПолныхАналогов Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
		
		мМассивСоставаКомплекта	= СписокСоставаКомплекта.ВыгрузитьЗначения();
		Для Каждого мНоменклатура Из мМассивСоставаКомплекта Цикл
			мМассивНоменклатуры.Добавить(мНоменклатура);
		КонецЦикла;
	Иначе
		мМассивНоменклатуры.Добавить(мНоменклатура);
	КонецЕсли;
	
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры"	, мМассивНоменклатуры);

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаПоТТКлиент(мТорговаяТочка = Неопределено)

	мМассив = Новый Массив;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ТорговыеТочки = Новый Массив;
		ТорговыеТочки.Добавить(мТорговаяТочка);
	Иначе
		ТорговыеТочки = СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ОсновнойСкладТорговыхТочек.Пустая() Тогда
		мМассив = ТорговыеТочки;
	Иначе
		
		ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(ТорговыеТочки);
		Для Каждого ДанныеТорговойТочки Из ДанныеТорговыхТочек Цикл
			Если ДанныеТорговойТочки.ОсновнойСклад = ОсновнойСкладТорговыхТочек Тогда
				мМассив.Добавить(ДанныеТорговойТочки.ТорговаяТочка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТорговыхТочек", мМассив);

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура УстановитьОтборПоказателиДляЗаказаПоТТ(мТорговаяТочка = Неопределено)

	мМассив = Новый Массив;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ТорговыеТочки = Новый Массив;
		ТорговыеТочки.Добавить(мТорговаяТочка);
	Иначе
		ТорговыеТочки = СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ОсновнойСкладТорговыхТочек.Пустая() Тогда
		мМассив = ТорговыеТочки;
	Иначе
		
		ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(ТорговыеТочки);
		Для Каждого ДанныеТорговойТочки Из ДанныеТорговыхТочек Цикл
			Если ДанныеТорговойТочки.ОсновнойСклад = ОсновнойСкладТорговыхТочек Тогда
				мМассив.Добавить(ДанныеТорговойТочки.ТорговаяТочка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПоказателиДляЗаказаТоваров.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТорговыхТочек", мМассив);

КонецПроцедуры


Процедура УстановитьОтборТоварныеОграниченияНаТочках(мНоменклатура = Неопределено, мТорговаяТочка = Неопределено)
	
	ПараметрыЗапроса = ЭтаФорма.ТоварныеОграниченияНаТочках.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ДатаАссортимента"	, КонецДня(ТекущаяДата()) + 86400);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад"			, Объект.Расчетчик.Склад);
	
	Если ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			ИЛИ ТипЗнч(мНоменклатура) = Тип("Массив") Тогда
		ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры", мНоменклатура);
	Иначе
		ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивНоменклатуры", ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения());
    КонецЕсли;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		мМассив = Новый Массив;
		мМассив.Добавить(мТорговаяТочка);
	ИначеЕсли ТипЗнч(мТорговаяТочка) = Тип("Массив") Тогда
		мМассив = мТорговаяТочка;
	Иначе
		мМассив = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
    КонецЕсли;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("МассивТорговыхТочек"	, мМассив);
	
КонецПроцедуры

Процедура УстановитьОтборГрафикиЗаказовИРазвозаСервер(мПоставщик = Неопределено, ПоВсемДатам = Ложь)
	
	Перем ВсеПоставщики, Запрос, ТаблицаЗапроса;
	
	ВсеПоставщики = (мПоставщик = "<Все>")
						ИЛИ (мПоставщик = Неопределено);
	
	// считывание записей регистра ГрафикРазмещенияЗаказовПоставщикам по дате размещения
	// и вывод их на форму
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	Если НЕ ПоВсемДатам Тогда
		Запрос.УстановитьПараметр("МинДата"			, НачалоДня(ТекущаяДата()) - 3 * 86400);
	КонецЕсли;
	Если НЕ ВсеПоставщики Тогда
		Запрос.УстановитьПараметр("Поставщик"		, мПоставщик);
	КонецЕсли;
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("Склад"				, Объект.Расчетчик.Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрГрафики.Ссылка КАК График,
	|	СпрГрафики.Владелец КАК Поставщик
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара КАК СпрГрафики
	|ГДЕ
	|	СпрГрафики.СтруктурноеПодразделение = &Склад
	|	И СпрГрафики.Расчетчик = &Расчетчик
	|	И СпрГрафики.Товары.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ СпрГрафики.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРазмещенияЗаказовПоставщикам.Дата,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.Дата) = 7
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|	КОНЕЦ КАК ДеньНедели,
	|	СоответствиеДатДнямНедели.НомерНедели КАК НомерНедели,
	|	ГрафикРазмещенияЗаказовПоставщикам.Поставщик,
	|	ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения,
	|	ГрафикРазмещенияЗаказовПоставщикам.ГрафикПоставкиТовара,
	|	ГрафикРазмещенияЗаказовПоставщикам.ГрафикПоставкиТовара.ПредставлениеТоваров КАК ПредставлениеТоваров,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|		КОГДА ДЕНЬНЕДЕЛИ(ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения) = 7
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|	КОНЕЦ КАК ДеньНеделиРазмещения,
	|	СоответствиеДатДнямНеделиРазмещения.НомерНедели КАК НомерНеделиРазмещения,
	|	ГрафикРазмещенияЗаказовПоставщикам.Размещен,
	|	&Склад КАК Склад
	|ИЗ
	|	РегистрСведений.ГрафикРазмещенияЗаказовПоставщикам КАК ГрафикРазмещенияЗаказовПоставщикам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|		ПО (СоответствиеДатДнямНедели.Дата = ГрафикРазмещенияЗаказовПоставщикам.Дата)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНеделиРазмещения
	|		ПО (СоответствиеДатДнямНеделиРазмещения.Дата = ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения)
	|ГДЕ
	|	ГрафикРазмещенияЗаказовПоставщикам.Склад = &Склад
	|	И ГрафикРазмещенияЗаказовПоставщикам.ГрафикПоставкиТовара В (ВЫБРАТЬ График ИЗ ВТГрафики)
	|	И " + ?(НЕ ПоВсемДатам, "(НЕ ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения < &МинДата)
	|	И ", "") +
		?(НЕ ВсеПоставщики, "ГрафикРазмещенияЗаказовПоставщикам.Поставщик = &Поставщик",
							"ГрафикРазмещенияЗаказовПоставщикам.Поставщик В (ВЫБРАТЬ Поставщик ИЗ ВТГрафики)") +
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения,
	|	ГрафикРазмещенияЗаказовПоставщикам.Дата,
	|	ГрафикРазмещенияЗаказовПоставщикам.Поставщик.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафики";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.ГрафикЗаказов.Загрузить(ТаблицаЗапроса);
	
	
	// считывание записей регистра УтвержденныйГрафикРазвозаПоТочкам по дате развоза
	// и вывод их на форму
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинДата"	, НачалоДня(ТекущаяДата()) - 3 * 86400);
	Запрос.УстановитьПараметр("Склад"	, Объект.Расчетчик.Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УтвержденныйГрафикРазвозаПоТочкам.Дата
	|ИЗ
	|	РегистрСведений.УтвержденныйГрафикРазвозаПоТочкам КАК УтвержденныйГрафикРазвозаПоТочкам
	|ГДЕ
	|	(НЕ УтвержденныйГрафикРазвозаПоТочкам.Дата < &МинДата)
	|	И УтвержденныйГрафикРазвозаПоТочкам.Склад = &Склад";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.УтвержденныйГрафикРазвоза.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

Процедура УстановитьОтборЗаказовПоставщикамСервер(СтруктураПараметров = Неопределено)
	
	Перем Запрос;
	
	Если ЭтаФорма.ТаблицаЗаказовПоставщикам.Количество() > 0 Тогда
		ЭтаФорма.ТаблицаЗаказовПоставщикам.Очистить();
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеПоставщики = (СтруктураПараметров.Поставщик = "<Все>");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"				, Объект.Расчетчик.Склад);
	Если НЕ ВсеПоставщики Тогда
		Запрос.УстановитьПараметр("Поставщик"			, СтруктураПараметров.Поставщик);
	Иначе
		Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата"				, СтруктураПараметров.Дата);
	
	Запрос.Текст =
		?(ВсеПоставщики,
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрГрафики.Владелец КАК Поставщик
	|ПОМЕСТИТЬ ВТКонтрагенты
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара КАК СпрГрафики
	|ГДЕ
	|	СпрГрафики.СтруктурноеПодразделение = &Склад
	|	И СпрГрафики.Товары.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ СпрГрафики.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|", "") + "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредЗаказ.Ссылка КАК Предзаказ
	|ИЗ
	|	Документ.ПредЗаказ КАК ПредЗаказ
	|ГДЕ
	|	Предзаказ.ДатаПоступления = &Дата
	|	И Предзаказ.Склад = &Склад" +
		?(НЕ ВсеПоставщики, "
	|	И Предзаказ.Поставщик = &Поставщик", "
	|	И Предзаказ.Поставщик В (ВЫБРАТЬ Поставщик ИЗ ВТКонтрагенты)") + "
	|	И НЕ Предзаказ.ПометкаУдаления" + ?(ВсеПоставщики,"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКонтрагенты", "");
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//вывод в таблицу на форме
	ЭтаФорма.ТаблицаЗаказовПоставщикам.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

Процедура УстановитьОтборГрафикаРазвоза()
	
	Перем ПараметрыЗапроса;
	
	ПараметрыЗапроса = ЭтаФорма.ГрафикРазвоза.Параметры;
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Склад", Объект.Расчетчик.Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборГрафикиЗаказовИРазвоза(ПоВсемДатам = Ложь)
	
	Перем ТекДанные, ТекПоставщик;
	
	ТекДанные = Элементы.ДеревоПоставщиковГрафикЗаказов.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если НЕ ТекДанные.Поставщик = "<Все>" Тогда
			ТекПоставщик = ТекДанные.Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборГрафикиЗаказовИРазвозаСервер(ТекПоставщик, ПоВсемДатам);
	
КонецПроцедуры

Процедура УстановитьОтборВДинамическомСпискеЗаказов(ОтборНаФорме, мПоставщик, ОтбиратьПоРасчетчикам = Истина)
	
	мЕстьПоставщик = ((ТипЗнч(мПоставщик) = Тип("СправочникСсылка.Контрагенты")
							И ЗначениеЗаполнено(мПоставщик))
						ИЛИ мПоставщик = Неопределено); // не указан ни 1 расчетчик в поле "Расчетчики"
	
	ПолеКомпоновкиДата 		= Новый ПолеКомпоновкиДанных("Дата");
	ПолеКомпоновкиРасчетчик	= Новый ПолеКомпоновкиДанных("Расчетчик");
	ПолеКомпоновкиПоставщик = Новый ПолеКомпоновкиДанных("Поставщик");
		
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиДата;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.ДатаЗаказов;
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиДата;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение 	= КонецДня(ЭтаФорма.ДатаЗаказов);
		
		Если ОтбиратьПоРасчетчикам Тогда
			ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиРасчетчик;
			ЭлементОтбора.Использование 	= Истина;
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СписокРасчетчиковДляЗаказа;
		КонецЕсли;
	
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиПоставщик;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		Если мЕстьПоставщик Тогда
			ЭлементОтбора.Использование 	= Истина;
			ЭлементОтбора.ПравоеЗначение 	= мПоставщик;
		Иначе
			ЭлементОтбора.Использование 	= Ложь;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДата Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ДатаЗаказов;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					ЭлементОтбора.ПравоеЗначение = КонецДня(ЭтаФорма.ДатаЗаказов);
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиРасчетчик Тогда
				
				Если ОтбиратьПоРасчетчикам Тогда
					ЭлементОтбора.Использование 	= Истина;
					ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СписокРасчетчиковДляЗаказа;
				Иначе
					ЭлементОтбора.Использование 	= Ложь;
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоставщик Тогда
				
				Если мЕстьПоставщик Тогда
					ЭлементОтбора.Использование 	= Истина;
					ЭлементОтбора.ПравоеЗначение 	= мПоставщик;
				Иначе
					ЭлементОтбора.Использование 	= Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборЗаказов(мПоставщик = Неопределено)
	
	Перем ОтборНаФорме;
	
	ОтборНаФорме = ЭтаФорма.Предзаказы.Отбор;
	УстановитьОтборВДинамическомСпискеЗаказов(ОтборНаФорме, мПоставщик);
	Элементы.Предзаказы.Обновить();	
		
КонецПроцедуры

Процедура УстановитьОтборЗаказовКОтправке(мПоставщик = Неопределено)
	
	Перем ОтборНаФорме;
	
	ОтборНаФорме = ЭтаФорма.ЗаказыПоставщикам.Отбор;
	УстановитьОтборВДинамическомСпискеЗаказов(ОтборНаФорме, мПоставщик, Ложь);
	Элементы.ЗаказыПоставщикамКОтправке.Обновить();	
	
	//+++ AK suvv 20.06.2018 ИП-00018351
	ОпределитьПризнакЗаказДляТилси(мПоставщик);
	//--- AK suvv
	
КонецПроцедуры

Процедура УстановитьОтборТоварыПредзаказов(мПредзаказ = Неопределено)
	
	Перем ОтборНаФорме, ЭлементОтбора;
	
	мПоставщик = ?(мПредзаказ = Неопределено, Неопределено, мПредзаказ.Поставщик);
	
	ОтборНаФорме = ЭтаФорма.ТоварыПредзаказов.Отбор;
	
	ПолеКомпоновкиДата 		= Новый ПолеКомпоновкиДанных("Дата");
	//ПолеКомпоновкиСклад 	= Новый ПолеКомпоновкиДанных("Склад");
	ПолеКомпоновкиРасчетчик	= Новый ПолеКомпоновкиДанных("Расчетчик");
	ПолеКомпоновкиПоставщик = Новый ПолеКомпоновкиДанных("Поставщик");
	ПолеКомпоновкиПредзаказ = Новый ПолеКомпоновкиДанных("Предзаказ");
	
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиДата;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.ДатаЗаказов;
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиДата;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение 	= КонецДня(ЭтаФорма.ДатаЗаказов);
		
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиРасчетчик;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СписокРасчетчиковДляЗаказа;
		
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиПоставщик;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= мПоставщик;
		
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиПредзаказ;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= мПредзаказ;
		
	Иначе
		
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДата Тогда
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ДатаЗаказов;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					ЭлементОтбора.ПравоеЗначение = КонецДня(ЭтаФорма.ДатаЗаказов);
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиРасчетчик Тогда
				
				ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СписокРасчетчиковДляЗаказа;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПоставщик Тогда
				
				ЭлементОтбора.ПравоеЗначение 	= мПоставщик;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиПредзаказ Тогда
				
				ЭлементОтбора.ПравоеЗначение 	= мПредзаказ;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ТоварыПредзаказов.Обновить();	
		
КонецПроцедуры

Процедура УстановитьОтборЗаданийНаПеремещение()
	
	ОтборНаФорме = ЭтаФорма.ЗаданияНаПеремещение.Отбор;
	
	ПолеКомпоновкиСтрЕдиница = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиСтрЕдиница;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= Объект.Расчетчик.Склад;
	Иначе
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСтрЕдиница Тогда
				ЭлементОтбора.ПравоеЗначение = Объект.Расчетчик.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ЗаданияНаПеремещение.Обновить();
	
КонецПроцедуры

Процедура УстановитьОтборЗаданийНаФасовку()
	
	ОтборНаФорме = ЭтаФорма.ЗаданияНаФасовку.Отбор;
	
	ПолеКомпоновкиСтрЕдиница = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	Если ОтборНаФорме.Элементы.Количество() = 0 Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиСтрЕдиница;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= Объект.Расчетчик.Склад;
	Иначе
		Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСтрЕдиница Тогда
				ЭлементОтбора.ПравоеЗначение = Объект.Расчетчик.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ЗаданияНаФасовку.Обновить();
	
КонецПроцедуры

Процедура ПриИзмененииДатыЗаказов()
	
	ТекНомерНедели = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ЭтаФорма.ДатаЗаказов);
	Элементы.НадписьТекНомерНеделиПоказателиЗаказов.Заголовок = Формат(ТекНомерНедели, "ЧГ=");
	
	Если ЭтаФорма.ТаблицаПоказателей.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаПоказателей Цикл
			Если Лев(СтрокаТаблицы.Показатель, 13) = "Факт. остаток" Тогда
				СтрокаТаблицы.Показатель = "Факт. остаток (" + Лев(Формат(ЭтаФорма.ДатаЗаказов - 86400, "ДЛФ=Д"), 5) + ")";	
			ИначеЕсли Лев(СтрокаТаблицы.Показатель, 13) = "План. остаток" Тогда
				СтрокаТаблицы.Показатель = "План. остаток (" + Лев(Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д"), 5) + ")";	
			КонецЕсли;
		КонецЦикла;
	Иначе
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Мин. остаток";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Факт. остаток (" + Лев(Формат(ЭтаФорма.ДатаЗаказов - 86400, "ДЛФ=Д"), 5) + ")";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Распределено";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Нужно";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "План2Больш";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Избыток";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Запас";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "План продаж";	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "Заказ товара";	
		НоваяСтрока.Показывать = Истина;	
		НоваяСтрока = ЭтаФорма.ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = "План. остаток (" + Лев(Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д"), 5) + ")";	
	КонецЕсли;

КонецПроцедуры


/////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ОБРАБОТЧИКИ ТП "РАСПРЕДЕЛЕНИЕ ПО ДНЯМ"

&НаСервереБезКонтекста
Процедура ДобавитьСтрокиВДеревоНоменклатуры(мСтрокиДереваНоменклатуры, мДеревоГруппУРЗ, мТаблицаНоменклатуры)
	
	Перем СтрокиДереваЗапроса, СтрокаНоменклатуры;
	
	СтруктураОтбора = Новый Структура("ГруппаУРЗ");
	СтрокиДереваЗапроса = мДеревоГруппУРЗ.Строки;
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗапроса Цикл
		
		// дерево групп УРЗ
		СтрокаНоменклатуры = мСтрокиДереваНоменклатуры.Строки.Добавить();
		СтрокаНоменклатуры.Номенклатура 		= СтрокаДерева.Номенклатура;
		СтрокаНоменклатуры.ЕстьРаспределение 	= СтрокаДерева.ЕстьРаспределение;
		
		ДобавитьСтрокиВДеревоНоменклатуры(СтрокаНоменклатуры, СтрокаДерева, мТаблицаНоменклатуры);
		
		// номенклатура
		СтруктураОтбора.ГруппаУРЗ = СтрокаДерева.Номенклатура;
		СтрокиНоменклатуры = мТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры2 = СтрокаНоменклатуры.Строки.Добавить();
			СтрокаНоменклатуры2.Номенклатура 		= СтрокаТаблицы.Номенклатура;
			СтрокаНоменклатуры2.ЕстьРаспределение 	= СтрокаТаблицы.ЕстьРаспределение;
		КонецЦикла;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьДеревоНоменклатуры()
	
	Перем Запрос, ДеревоЗапроса;
	
	// доступная номенклатура
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("Склад"				, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ КАК ГруппаНоменклатурыУРЗ,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТДеревоНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ,
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ СпрНоменклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаспределениеПродажПроценты.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
	|ГДЕ
	|	РаспределениеПродажПроценты.ТорговаяТочка В(&СписокТорговыхТочек)
	|	И (РаспределениеПродажПроценты.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТДеревоНоменклатуры.Номенклатура
	|				ИЗ
	|					ВТДеревоНоменклатуры)
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДеревоНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТНоменклатура.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределение
	|ИЗ
	|	ВТДеревоНоменклатуры КАК ВТДеревоНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО (ВТНоменклатура.Номенклатура = ВТДеревоНоменклатуры.Номенклатура)
	|ГДЕ
	|	ВТДеревоНоменклатуры.Номенклатура ССЫЛКА Справочник.ГруппыНоменклатурыУРЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДеревоНоменклатуры.Номенклатура ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДеревоНоменклатуры.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ,
	|	ВТДеревоНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТНоменклатура.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределение
	|ИЗ
	|	ВТДеревоНоменклатуры КАК ВТДеревоНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО (ВТНоменклатура.Номенклатура = ВТДеревоНоменклатуры.Номенклатура)
	|ГДЕ
	|	ВТДеревоНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДеревоНоменклатуры.Номенклатура.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|ГДЕ
	|	ВТНоменклатура.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|ГДЕ
	|	ВТНоменклатура.Номенклатура = &Расчетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДеревоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	
	// служебная переменная
	мДеревоНоменклатуры = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыНоменклатурыУРЗ"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	мДеревоНоменклатуры.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов(МассивТипов));
	мДеревоНоменклатуры.Колонки.Добавить("ЕстьРаспределение", Новый ОписаниеТипов("Булево"));
	
	// распределение по пустой номенклатуре - для всех, по кому не установлено
	СтрокаДерева = мДеревоНоменклатуры.Строки.Добавить();
	СтрокаДерева.Номенклатура = "<Все>";
	РезультатЗапроса = РезультатыЗапросов[4];
	СтрокаДерева.ЕстьРаспределение = НЕ РезультатЗапроса.Пустой();
	
	// распределение по всем группам расчетчика
	СтрокаДерева2 = СтрокаДерева.Строки.Добавить();
	СтрокаДерева2.Номенклатура = "<" + СокрЛП(Объект.Расчетчик.Наименование) + ">";
	РезультатЗапроса = РезультатыЗапросов[5];
	СтрокаДерева2.ЕстьРаспределение = НЕ РезультатЗапроса.Пустой();
	
	// подчиненные группы
	ДеревоГруппУРЗ 			= РезультатыЗапросов[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	мТаблицаНоменклатуры 	= РезультатыЗапросов[3].Выгрузить();
	
	ДобавитьСтрокиВДеревоНоменклатуры(СтрокаДерева2, ДеревоГруппУРЗ, мТаблицаНоменклатуры);
	
	
	// вывод на экран
	ЗначениеВРеквизитФормы(мДеревоНоменклатуры, "ДеревоНоменклатуры");
	
КонецПроцедуры

// Заполняет таблицу РаспределениеПоДням с отбором по номенклатуре, выбранной в дереве
//
Процедура УстановитьОтборРаспределенияПоДнямСервер(мНоменклатура, мЕстьРаспределение)
	
	Перем Запрос, ТекстЗапроса;
	
	Если ЭтаФорма.ОтобразитьВсеРаспределения Тогда
		Возврат;
	КонецЕсли;
	
	мПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Объект.Расчетчик.Склад);         // СправочникСсылка.СтруктурныеЕдиницы

	Если ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			И НЕ мНоменклатура = мПустаяНоменклатура Тогда
		
		Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ТекущаяДата()) + 86400);
		Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
		Запрос.УстановитьПараметр("Номенклатура"		, мНоменклатура);
		//+++АК MOSD 2018.12.09 ИП-00018605 
		//Запрос.УстановитьПараметр("ГруппаУРЗ"			, мНоменклатура.ГруппаНоменклатурыУРЗ);
		Запрос.УстановитьПараметр("ГруппаУРЗ"			, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мНоменклатура,"ГруппаНоменклатурыУРЗ"));
		//---АК MOSD 
		
		ТекстЗапроса = 
		//+++АК MOSD 2018.12.07 ИП-00018605 добавил РАЗЛИЧНЫЕ 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
		|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ ТТАссортимента
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			&ДатаАссортимента,
		|			Номенклатура = &Номенклатура
		|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|				И ТорговаяТочка.Активное
		|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочек
		|ГДЕ
		|	НЕ ТоварныйАссортиментТочек.Выведена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.РасчетПоСоседнимТочкам КАК РасчетПоСоседнимТочкам
		|ПОМЕСТИТЬ ВТТорговыеТочки
		|ИЗ
		|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
		|			&ДатаАссортимента,
		|			ТорговаяТочка В
		|					(ВЫБРАТЬ
		|						ТТАссортимента.ТорговаяТочка
		|					ИЗ
		|						ТТАссортимента)
		|				И ГруппаУРЗ = &ГруппаУРЗ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
		|ГДЕ
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Номенклатура
		|			ТОГДА 1
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &ГруппаУРЗ
		|			ТОГДА 2
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ТОГДА 3
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 4
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Номенклатура
		|			ТОГДА 3
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПорядокИерархии,
		|	РаспределениеПродажПроценты.ТорговаяТочка,
		|	РаспределениеПродажПроценты.ПроцентПонедельник,
		|	РаспределениеПродажПроценты.ПроцентВторник,
		|	РаспределениеПродажПроценты.ПроцентСреда,
		|	РаспределениеПродажПроценты.ПроцентЧетверг,
		|	РаспределениеПродажПроценты.ПроцентПятница,
		|	РаспределениеПродажПроценты.ПроцентСуббота,
		|	РаспределениеПродажПроценты.ПроцентВоскресенье,
		|	РаспределениеПродажПроценты.НомерНедели1,
		|	РаспределениеПродажПроценты.НомерНедели2,
		|	РаспределениеПродажПроценты.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродажОбщие
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.ТорговаяТочка В
		|			(ВЫБРАТЬ
		|				ВТТорговыеТочки.ТорговаяТочка
		|			ИЗ
		|				ВТТорговыеТочки)
		|	И (РаспределениеПродажПроценты.Номенклатура = &Номенклатура
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &ГруппаУРЗ
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	МИНИМУМ(ВТПланыПродажОбщие.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ВТПланыПродажПорядок
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПланыПродажОбщие.ТорговаяТочка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ПорядокИерархии,
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТПланыПродажОбщие.ПроцентПонедельник,
		|	ВТПланыПродажОбщие.ПроцентВторник,
		|	ВТПланыПродажОбщие.ПроцентСреда,
		|	ВТПланыПродажОбщие.ПроцентЧетверг,
		|	ВТПланыПродажОбщие.ПроцентПятница,
		|	ВТПланыПродажОбщие.ПроцентСуббота,
		|	ВТПланыПродажОбщие.ПроцентВоскресенье,
		|	ВТПланыПродажОбщие.НомерНедели1,
		|	ВТПланыПродажОбщие.НомерНедели2,
		|	ВТПланыПродажОбщие.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродаж
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПланыПродажПорядок КАК ВТПланыПродажПорядок
		|		ПО (ВТПланыПродажПорядок.ТорговаяТочка = ВТПланыПродажОбщие.ТорговаяТочка)
		|			И (ВТПланыПродажПорядок.Порядок = ВТПланыПродажОбщие.Порядок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТПланыПродаж.ПорядокИерархии, 0) КАК ПорядокИерархии,
		|	&Номенклатура КАК Номенклатура,
		|	ВТТорговыеТочки.ТорговаяТочка,
		|	ВТТорговыеТочки.РасчетПоСоседнимТочкам,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПонедельник, 0) КАК ПроцентПонедельник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВторник, 0) КАК ПроцентВторник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСреда, 0) КАК ПроцентСреда,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентЧетверг, 0) КАК ПроцентЧетверг,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПятница, 0) КАК ПроцентПятница,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСуббота, 0) КАК ПроцентСуббота,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВоскресенье, 0) КАК ПроцентВоскресенье,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели1, 0) КАК НомерНедели1,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели2, 0) КАК НомерНедели2,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели3, 0) КАК НомерНедели3
		|ИЗ
		|	ВТТорговыеТочки КАК ВТТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродаж КАК ВТПланыПродаж
		|		ПО (ВТПланыПродаж.ТорговаяТочка = ВТТорговыеТочки.ТорговаяТочка)"; 
		
	ИначеЕсли ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.ГруппыНоменклатурыУРЗ") Тогда
		
		Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ТекущаяДата()) + 86400);
		Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
		Запрос.УстановитьПараметр("ГруппаУРЗ"			, мНоменклатура);
		
		ТекстЗапроса = 
		//+++АК MOSD 2018.12.07 ИП-00018605 добавил РАЗЛИЧНЫЕ 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ ТТАссортимента
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			&ДатаАссортимента,
		|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|				И ТорговаяТочка.Активное
		|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				И Номенклатура.ГруппаНоменклатурыУРЗ = &ГруппаУРЗ) КАК ТоварныйАссортиментТочек
		//|				И Номенклатура.ГруппаНоменклатурыУРЗ = &ГруппаУРЗ
		//|				И НЕ Номенклатура.Выведена) КАК ТоварныйАссортиментТочек
		|ГДЕ
		|	НЕ ТоварныйАссортиментТочек.Выведена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.РасчетПоСоседнимТочкам КАК РасчетПоСоседнимТочкам
		|ПОМЕСТИТЬ ВТТорговыеТочки
		|ИЗ
		|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
		|			&ДатаАссортимента,
		|			ТорговаяТочка В
		|					(ВЫБРАТЬ
		|						ТТАссортимента.ТорговаяТочка
		|					ИЗ
		|						ТТАссортимента)
		|				И ГруппаУРЗ = &ГруппаУРЗ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
		|ГДЕ
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &ГруппаУРЗ
		|			ТОГДА 1
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ТОГДА 2
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 3
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &ГруппаУРЗ
		|			ТОГДА 3
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПорядокИерархии,
		|	РаспределениеПродажПроценты.ТорговаяТочка,
		|	РаспределениеПродажПроценты.ПроцентПонедельник,
		|	РаспределениеПродажПроценты.ПроцентВторник,
		|	РаспределениеПродажПроценты.ПроцентСреда,
		|	РаспределениеПродажПроценты.ПроцентЧетверг,
		|	РаспределениеПродажПроценты.ПроцентПятница,
		|	РаспределениеПродажПроценты.ПроцентСуббота,
		|	РаспределениеПродажПроценты.ПроцентВоскресенье,
		|	РаспределениеПродажПроценты.НомерНедели1,
		|	РаспределениеПродажПроценты.НомерНедели2,
		|	РаспределениеПродажПроценты.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродажОбщие
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.ТорговаяТочка В
		|			(ВЫБРАТЬ
		|				ВТТорговыеТочки.ТорговаяТочка
		|			ИЗ
		|				ВТТорговыеТочки)
		|	И (РаспределениеПродажПроценты.Номенклатура = &ГруппаУРЗ
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	МИНИМУМ(ВТПланыПродажОбщие.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ВТПланыПродажПорядок
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПланыПродажОбщие.ТорговаяТочка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ПорядокИерархии,
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТПланыПродажОбщие.ПроцентПонедельник,
		|	ВТПланыПродажОбщие.ПроцентВторник,
		|	ВТПланыПродажОбщие.ПроцентСреда,
		|	ВТПланыПродажОбщие.ПроцентЧетверг,
		|	ВТПланыПродажОбщие.ПроцентПятница,
		|	ВТПланыПродажОбщие.ПроцентСуббота,
		|	ВТПланыПродажОбщие.ПроцентВоскресенье,
		|	ВТПланыПродажОбщие.НомерНедели1,
		|	ВТПланыПродажОбщие.НомерНедели2,
		|	ВТПланыПродажОбщие.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродаж
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПланыПродажПорядок КАК ВТПланыПродажПорядок
		|		ПО (ВТПланыПродажПорядок.ТорговаяТочка = ВТПланыПродажОбщие.ТорговаяТочка)
		|			И (ВТПланыПродажПорядок.Порядок = ВТПланыПродажОбщие.Порядок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТПланыПродаж.ПорядокИерархии, 0) КАК ПорядокИерархии,
		|	&ГруппаУРЗ КАК Номенклатура,
		|	ВТТорговыеТочки.ТорговаяТочка,
		|	ВТТорговыеТочки.РасчетПоСоседнимТочкам,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПонедельник, 0) КАК ПроцентПонедельник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВторник, 0) КАК ПроцентВторник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСреда, 0) КАК ПроцентСреда,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентЧетверг, 0) КАК ПроцентЧетверг,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПятница, 0) КАК ПроцентПятница,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСуббота, 0) КАК ПроцентСуббота,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВоскресенье, 0) КАК ПроцентВоскресенье,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели1, 0) КАК НомерНедели1,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели2, 0) КАК НомерНедели2,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели3, 0) КАК НомерНедели3
		|ИЗ
		|	ВТТорговыеТочки КАК ВТТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродаж КАК ВТПланыПродаж
		|		ПО (ВТПланыПродаж.ТорговаяТочка = ВТТорговыеТочки.ТорговаяТочка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТТорговыеТочки.id_TT"; 
		
	ИначеЕсли мНоменклатура = "<" + СокрЛП(Объект.Расчетчик.Наименование) + ">"
				ИЛИ мНоменклатура = Объект.Расчетчик Тогда
				
		Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
		Запрос.УстановитьПараметр("МассивТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ТОГДА 1
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ТОГДА 3
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПорядокИерархии,
		|	РаспределениеПродажПроценты.ТорговаяТочка,
		|	РаспределениеПродажПроценты.ПроцентПонедельник,
		|	РаспределениеПродажПроценты.ПроцентВторник,
		|	РаспределениеПродажПроценты.ПроцентСреда,
		|	РаспределениеПродажПроценты.ПроцентЧетверг,
		|	РаспределениеПродажПроценты.ПроцентПятница,
		|	РаспределениеПродажПроценты.ПроцентСуббота,
		|	РаспределениеПродажПроценты.ПроцентВоскресенье,
		|	РаспределениеПродажПроценты.НомерНедели1,
		|	РаспределениеПродажПроценты.НомерНедели2,
		|	РаспределениеПродажПроценты.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродажОбщие
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.ТорговаяТочка В(&МассивТорговыхТочек)
		|	И (РаспределениеПродажПроценты.Номенклатура = &Расчетчик
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	МИНИМУМ(ВТПланыПродажОбщие.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ВТПланыПродажПорядок
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПланыПродажОбщие.ТорговаяТочка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПланыПродажОбщие.ПорядокИерархии,
		|	ВТПланыПродажОбщие.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТПланыПродажОбщие.ПроцентПонедельник,
		|	ВТПланыПродажОбщие.ПроцентВторник,
		|	ВТПланыПродажОбщие.ПроцентСреда,
		|	ВТПланыПродажОбщие.ПроцентЧетверг,
		|	ВТПланыПродажОбщие.ПроцентПятница,
		|	ВТПланыПродажОбщие.ПроцентСуббота,
		|	ВТПланыПродажОбщие.ПроцентВоскресенье,
		|	ВТПланыПродажОбщие.НомерНедели1,
		|	ВТПланыПродажОбщие.НомерНедели2,
		|	ВТПланыПродажОбщие.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродаж
		|ИЗ
		|	ВТПланыПродажОбщие КАК ВТПланыПродажОбщие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПланыПродажПорядок КАК ВТПланыПродажПорядок
		|		ПО (ВТПланыПродажПорядок.ТорговаяТочка = ВТПланыПродажОбщие.ТорговаяТочка)
		|			И (ВТПланыПродажПорядок.Порядок = ВТПланыПродажОбщие.Порядок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВТПланыПродаж.ПорядокИерархии, 0) КАК ПорядокИерархии,
		|	&Расчетчик КАК Номенклатура,
		|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		|	СтруктурныеЕдиницы.РасчетПоСоседнимТочкам КАК РасчетПоСоседнимТочкам,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПонедельник, 0) КАК ПроцентПонедельник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВторник, 0) КАК ПроцентВторник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСреда, 0) КАК ПроцентСреда,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентЧетверг, 0) КАК ПроцентЧетверг,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПятница, 0) КАК ПроцентПятница,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСуббота, 0) КАК ПроцентСуббота,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВоскресенье, 0) КАК ПроцентВоскресенье,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели1, 0) КАК НомерНедели1,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели2, 0) КАК НомерНедели2,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели3, 0) КАК НомерНедели3
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродаж КАК ВТПланыПродаж
		|		ПО (ВТПланыПродаж.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка)
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&МассивТорговыхТочек)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктурныеЕдиницы.id_TT"; 
		
	ИначеЕсли мНоменклатура = "<Все>"
				ИЛИ мНоменклатура = мПустаяНоменклатура Тогда
		
		Запрос.УстановитьПараметр("Номенклатура"		, мПустаяНоменклатура);
		Запрос.УстановитьПараметр("МассивТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
		
		ТекстЗапроса =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	3 КАК ПорядокИерархии,
		|	РаспределениеПродажПроценты.ТорговаяТочка КАК ТорговаяТочка,
		|	РаспределениеПродажПроценты.ПроцентПонедельник,
		|	РаспределениеПродажПроценты.ПроцентВторник,
		|	РаспределениеПродажПроценты.ПроцентСреда,
		|	РаспределениеПродажПроценты.ПроцентЧетверг,
		|	РаспределениеПродажПроценты.ПроцентПятница,
		|	РаспределениеПродажПроценты.ПроцентСуббота,
		|	РаспределениеПродажПроценты.ПроцентВоскресенье,
		|	РаспределениеПродажПроценты.НомерНедели1,
		|	РаспределениеПродажПроценты.НомерНедели2,
		|	РаспределениеПродажПроценты.НомерНедели3
		|ПОМЕСТИТЬ ВТПланыПродаж
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.ТорговаяТочка В(&МассивТорговыхТочек)
		|	И РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВТПланыПродаж.ПорядокИерархии, 0) КАК ПорядокИерархии,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
		|	СтруктурныеЕдиницы.РасчетПоСоседнимТочкам,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПонедельник, 0) КАК ПроцентПонедельник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВторник, 0) КАК ПроцентВторник,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСреда, 0) КАК ПроцентСреда,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентЧетверг, 0) КАК ПроцентЧетверг,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентПятница, 0) КАК ПроцентПятница,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентСуббота, 0) КАК ПроцентСуббота,
		|	ЕСТЬNULL(ВТПланыПродаж.ПроцентВоскресенье, 0) КАК ПроцентВоскресенье,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели1, 0) КАК НомерНедели1,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели2, 0) КАК НомерНедели2,
		|	ЕСТЬNULL(ВТПланыПродаж.НомерНедели3, 0) КАК НомерНедели3
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродаж КАК ВТПланыПродаж
		|		ПО (ВТПланыПродаж.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка)
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&МассивТорговыхТочек)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктурныеЕдиницы.id_TT"; 
				
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.РаспределениеПоДням.Загрузить(ТаблицаЗапроса);
	
	СтрокиТаблицы = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ПорядокИерархии", 3));
	мЕстьРаспределение = (СтрокиТаблицы.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРаспределенияПоДням(мНоменклатура)
	
	Перем мЕстьРаспределение, ТекДанные;
	
	УстановитьОтборРаспределенияПоДнямСервер(мНоменклатура, мЕстьРаспределение);
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	ТекДанные.ЕстьРаспределение = мЕстьРаспределение;
	
КонецПроцедуры


// Перезаписывает / удаляет в регистре сведений "РаспределениеПродажПоДнямНеделиПроценты" значения по нижним установленным уровням для текущей строки
//
// Параметры:
// 	СтруктураПараметровСтроки 	- Структура, значения из строки на форме;
// 	Очищать 					- Булево, признак действия "удаление".
//
Процедура ЗаменитьРаспределениеНижнихУровнейЗаписи(СтруктураПараметровСтроки, Очищать)
	
	Перем ТекНоменклатура, Запрос, РезультатЗапроса, Выборка, МенеджерЗаписи, НаборЗаписей;
	
	ТекНоменклатура = СтруктураПараметровСтроки.Номенклатура;
	Если ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			И (НЕ ТекНоменклатура.ЭтоГруппа)
			И НЕ ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка"	, СтруктураПараметровСтроки.ТорговаяТочка);
	
	//Если НЕ ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка()  // установленные уровни ниже иерархией = текущему уровню
	//	И НЕ ТекНоменклатура = Объект.Расчетчик Тогда // все установленные уровни ниже расчетчика = уровню расчетчика;
	Если ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.ГруппыНоменклатурыУРЗ") Тогда // все установленные уровни ниже группы УРЗ = уровню группы УРЗ;
		                                                                   
		Запрос.УстановитьПараметр("ГруппаУРЗ", ТекНоменклатура);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаспределениеПродажПроценты.Номенклатура,
		|	РаспределениеПродажПроценты.ТорговаяТочка
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.Номенклатура.ГруппаНоменклатурыУРЗ = &ГруппаУРЗ
		//|	И НЕ РаспределениеПродажПроценты.Номенклатура.Выведена
		|	И РаспределениеПродажПроценты.ТорговаяТочка = &ТорговаяТочка";
		
	ИначеЕсли ТекНоменклатура = Объект.Расчетчик Тогда  // все установленные уровни ниже расчетчика = уровню расчетчика;
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", ЭтаФорма.СписокНоменклатуры);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаспределениеПродажПроценты.Номенклатура,
		|	РаспределениеПродажПроценты.ТорговаяТочка
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.Номенклатура В(&МассивНоменклатуры)
		|	И РаспределениеПродажПроценты.ТорговаяТочка = &ТорговаяТочка";
		
	Иначе // все установленные уровни, кроме верхнего, = верхнему уровню
		
		Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
		Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаспределениеПродажПроценты.Номенклатура,
		|	РаспределениеПродажПроценты.ТорговаяТочка
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	(РаспределениеПродажПроценты.Номенклатура В(&МассивНоменклатуры)
		|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик)
		|	И РаспределениеПродажПроценты.ТорговаяТочка = &ТорговаяТочка";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	
	////////////////////////
	// перезапись в регистр
	мРегистр = РегистрыСведений.РаспределениеПродажПоДнямНеделиПроценты;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Очищать Тогда
			МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПараметровСтроки,, "Номенклатура");
			МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
			
			Попытка
				МенеджерЗаписи.Записать(); 
			Исключение
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не удалось перезаписать распределение продаж по дням недели";
				СообщениеПользователю.Сообщить();
			КонецПопытки;
		Иначе
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей.Очистить();
			Исключение
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не удалось очистить запись распределения продаж по дням недели";
				СообщениеПользователю.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ОБРАБОТЧИКИ ТП "Производители товаров"

// Заполняет таблицу УсловияПоставкиТоваров и поставщиков
//
Процедура ЗаполнитьПоставщиковИУсловияПоставки()
	
	Перем Запрос, ТаблицаЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"				, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПроизводителиТоваров.Значение КАК Справочник.Контрагенты) КАК Поставщик,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
	|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияСвойств
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|		ПО ЗначенияСвойствОбъектов.Объект = ПроизводителиТоваров.Объект
	|			И (ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводителиТоваров.Значение,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Ссылка.Владелец КАК Поставщик,
	|	ТЧТовары.Ссылка.Владелец.Наименование КАК ПоставщикНаименование,
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ЕСТЬNULL(ВТЗначенияСвойств.Значение, 0) КАК КоличествоВКоробке
	|ПОМЕСТИТЬ ВТПоставщикиИТовары
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСвойств КАК ВТЗначенияСвойств
	|		ПО (ВТЗначенияСвойств.Номенклатура = ТЧТовары.Номенклатура)
	|			И (ВТЗначенияСвойств.Поставщик = ТЧТовары.Ссылка.Владелец)
	|ГДЕ
	|	ТЧТовары.Ссылка.СтруктурноеПодразделение = &Склад
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|	И ТЧТовары.Номенклатура В(&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоставщикиИТовары.Поставщик КАК Поставщик
	|ИЗ
	|	ВТПоставщикиИТовары КАК ВТПоставщикиИТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоставщикиИТовары.Поставщик,
	|	ВТПоставщикиИТовары.ПоставщикНаименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТПоставщикиИТовары.ПоставщикНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоставщикиИТовары.Поставщик КАК Поставщик,
	|	ВТПоставщикиИТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВТПоставщикиИТовары.КоличествоВКоробке) КАК КоличествоВКоробке
	|ИЗ
	|	ВТПоставщикиИТовары КАК ВТПоставщикиИТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоставщикиИТовары.Поставщик,
	|	ВТПоставщикиИТовары.Номенклатура,
	|	ВТПоставщикиИТовары.НаименованиеНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТПоставщикиИТовары.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗначенияСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПоставщикиИТовары";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	
	////////////////////////////////////////////////
	// заполнение деревьев поставщиков на форме
	ДеревоЗапроса = РезультатыЗапроса[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(ДеревоЗапроса, "ДеревоПоставщиков");
	
	////////////////////////////////////////////////
	// заполнение условий поставщиков
	ТаблицаЗапроса = РезультатыЗапроса[3].Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаЗапроса, "УсловияПоставкиТоваров");
	
КонецПроцедуры


/////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ОБРАБОТЧИКИ ТП "Заказы"

// Перезаполняет дерево поставщиков на вкладке "Заказы".
//
Процедура ЗаполнитьДеревоПоставщиковДляЗаказа()
	
	Перем Запрос, РезультатЗапроса, ДеревоЗапроса;
	
	мСписокРасчетчиков = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаРасчетчиков Цикл
		Если НЕ СтрокаТаблицы.Выводить Тогда
			Продолжить;
		КонецЕсли;
		ТекРасчетчик = СтрокаТаблицы.Расчетчик;
		Если мСписокРасчетчиков.НайтиПоЗначению(ТекРасчетчик) = Неопределено Тогда
			мСписокРасчетчиков.Добавить(ТекРасчетчик);
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.СписокРасчетчиковДляЗаказа = мСписокРасчетчиков;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, мСписокРасчетчиков);
	Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ЭтаФорма.ДатаЗаказов + 86400));
	Запрос.УстановитьПараметр("ДеньНеделиДатыЗаказа", ПолучитьДеньНеделиПоДате(ЭтаФорма.ДатаЗаказов));
	
	мТаблицаДат = ПолучитьТаблицуНеделиОтДаты(ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ТаблицаДат"			, мТаблицаДат);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата,
	|	ТаблицаДат.ДеньНедели КАК ДеньНедели
	|ПОМЕСТИТЬ ВТТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрРасчетчики.Склад КАК Склад
	|ПОМЕСТИТЬ ВТСклады
	|ИЗ
	|	Справочник.Расчетчики КАК СпрРасчетчики
	|ГДЕ
	|	СпрРасчетчики.Ссылка В(&СписокРасчетчиков)
	|	И НЕ СпрРасчетчики.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка В(&СписокРасчетчиков)
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления
	//|	И НЕ ТЧГруппыНоменклатуры.ГруппаНоменклатуры.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Период КАК Период,
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЦеныПоставщиков.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТЦеныПоставщиковПоПериодам
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаАссортимента,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)
	|				И НЕ Характеристика.Неактивная) КАК ЦеныПоставщиков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Период,
	|	ЦеныПоставщиков.Поставщик,
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Характеристика
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|ГДЕ
	|	НЕ ЦеныПоставщиков.Период < &ДатаАссортимента
	|	И ЦеныПоставщиков.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|	И НЕ ЦеныПоставщиков.Характеристика.Неактивная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Период КАК Период,
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель
	|ПОМЕСТИТЬ ВТЦеныПоставщиков
	|ИЗ
	|	ВТЦеныПоставщиковПоПериодам КАК ЦеныПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ЦеныПоставщиков.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Номенклатура,
	|	Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГрафик.Ссылка КАК Ссылка,
	|	ТЧГрафик.Ссылка.Владелец КАК Производитель,
	|	ДОБАВИТЬКДАТЕ(ВТТаблицаДат.Дата, НЕДЕЛЯ, ТЧГрафик.КоличествоНедель) КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.График КАК ТЧГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДат КАК ВТТаблицаДат
	|		ПО (ВТТаблицаДат.ДеньНедели = ТЧГрафик.ДеньПоставки)
	|ГДЕ
	|	ТЧГрафик.ДеньЗаказа = &ДеньНеделиДатыЗаказа
	|	И ТЧГрафик.Ссылка.СтруктурноеПодразделение В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады)
	|	И НЕ ТЧГрафик.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ВТЦеныПоставщиков.Производитель КАК Производитель,
	|	ВТЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ВТЦеныПоставщиков.Период КАК ПериодЦен
	|ПОМЕСТИТЬ ВТТоварыИЦены
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафики КАК ВТГрафики
	|		ПО (ВТГрафики.Ссылка = ТЧТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЦеныПоставщиков КАК ВТЦеныПоставщиков
	|		ПО (ВТЦеныПоставщиков.Производитель = ВТГрафики.Производитель)
	|			И (ВТЦеныПоставщиков.Номенклатура = ТЧТовары.Номенклатура)
	|			И (НЕ ВТЦеныПоставщиков.Период > ВТГрафики.ДатаПоставки)
	|ГДЕ
	|	ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыИЦены.Номенклатура КАК Номенклатура,
	|	ВТТоварыИЦены.Производитель КАК Производитель,
	|	МАКСИМУМ(ВТТоварыИЦены.ПериодЦен) КАК ПериодЦен
	|ПОМЕСТИТЬ ВТТоварыИЦеныМакс
	|ИЗ
	|	ВТТоварыИЦены КАК ВТТоварыИЦены
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыИЦены.Номенклатура,
	|	ВТТоварыИЦены.Производитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыИЦены.Поставщик КАК Поставщик,
	|	ВТТоварыИЦены.Поставщик.Наименование КАК ПоставщикНаименование
	|ИЗ
	|	ВТТоварыИЦены КАК ВТТоварыИЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыИЦеныМакс КАК ВТТоварыИЦеныМакс
	|		ПО (ВТТоварыИЦеныМакс.Номенклатура = ВТТоварыИЦены.Номенклатура)
	|			И (ВТТоварыИЦеныМакс.Производитель = ВТТоварыИЦены.Производитель)
	|			И (ВТТоварыИЦеныМакс.ПериодЦен = ВТТоварыИЦены.ПериодЦен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыИЦены.Поставщик,
	|	ВТТоварыИЦены.Поставщик.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТТоварыИЦены.Поставщик.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЦеныПоставщиковПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЦеныПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТоварыИЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТоварыИЦеныМакс";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	////////////////////////////////////////////////
	// заполнение деревьев поставщиков на форме
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	мДеревоПоставщиков = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	мДеревоПоставщиков.Колонки.Добавить("Поставщик", Новый ОписаниеТипов(МассивТипов));
	
	// пустой поставщик - для всех
	СтрокаДерева = мДеревоПоставщиков.Строки.Добавить();
	СтрокаДерева.Поставщик = "<Все>";
	
	// подчиненные группы
	ДобавитьСтрокиВДеревоПоставщиков(СтрокаДерева, ДеревоЗапроса);
	
	ЗначениеВРеквизитФормы(мДеревоПоставщиков, "ДеревоПоставщиковДляЗаказа");
	
КонецПроцедуры

// Перезаполняет поле "Расчетчики" на вкладке "Заказы", обновляет поставщиков для заказа.
//
Процедура ЗаполнитьТаблицуРасчетчиковДляЗаказа()
	
	Если ЭтаФорма.ТаблицаРасчетчиков.Количество() > 0 Тогда
		ЭтаФорма.ТаблицаРасчетчиков.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийРасчетчик", Объект.Расчетчик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрРасчетчики.Ссылка = &ТекущийРасчетчик
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выводить,
	|	СпрРасчетчики.Ссылка КАК Расчетчик
	|ИЗ
	|	Справочник.Расчетчики КАК СпрРасчетчики
	|ГДЕ
	|	НЕ СпрРасчетчики.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрРасчетчики.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЭтаФорма.ТаблицаРасчетчиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
	КонецЦикла;
	

	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
КонецПроцедуры


/////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ОБРАБОТЧИКИ ТП "Отправка заказов"

Процедура УстановитьУчетнуюЗаписьЭлПочты()
	
	Если НЕ Объект.Расчетчик.Пустая() Тогда
		ЭтаФорма.УчетнаяЗаписьЭлПочты = Объект.Расчетчик.УчетнаяЗаписьЭлектроннойПочты;
	Иначе	
		ЭтаФорма.УчетнаяЗаписьЭлПочты = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЗаказовЗаполнитьРеквизитыПолучателя(мПоставщик)
	
	Если ТипЗнч(мПоставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЭтаФорма.ТекстПолучательЭлПочты = СокрЛП(мПоставщик.Наименование);
	Иначе
		ЭтаФорма.ТекстПолучательЭлПочты = "";
	КонецЕсли;
	
	
	// запрос к КИ поставщика, чтобы получить адрес эл. почты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик", мПоставщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	//+++АК LAGP ИП-00017391 150 - мало, длинная строка усекается и почтовый сервер не хочет работать
	//|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК Адрес
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(300)) КАК Адрес
	//---АК LAGP
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Поставщик
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтаФорма.АдресПолучателяЭлПочты = СокрЛП(Выборка.Адрес);
	Иначе
		ЭтаФорма.АдресПолучателяЭлПочты = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма(мПоставщик = Неопределено)
	
	//+++ AK suvv 28.05.2018 ИП-00018351
	//ЭтаФорма.ТекстПисьмаЭлПочты = "Общий заказ от " + Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д"); 
	Если ЗаказДляТилси Тогда
		ЭтаФорма.ТекстПисьмаЭлПочты = "Общий заказ для Тилси от " + Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д");
	Иначе
		ЭтаФорма.ТекстПисьмаЭлПочты = "Общий заказ от " + Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д");
	КонецЕсли;
	//--- AK suvv
		
	ЭтаФорма.ФайлОбщийЗаказПоставщику = ЭтаФорма.КаталогФайловОтправкаЗаказов + ?(Прав(ЭтаФорма.КаталогФайловОтправкаЗаказов, 1) = "\", "", "\") +
										?(НЕ ТипЗнч(мПоставщик) = Тип("СправочникСсылка.Контрагенты"), "",
											ПолучитьНаименованиеПоставщикаСервер(мПоставщик) + " ") + ЭтаФорма.ТекстПисьмаЭлПочты + ".xls";
	ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр = ЭтаФорма.КаталогФайловОтправкаЗаказов + ?(Прав(ЭтаФорма.КаталогФайловОтправкаЗаказов, 1) = "\", "", "\") +
										?(НЕ ТипЗнч(мПоставщик) = Тип("СправочникСсылка.Контрагенты"), "",
											ПолучитьНаименованиеПоставщикаСервер(мПоставщик) + " ") + ЭтаФорма.ТекстПисьмаЭлПочты + "_raspr.xls";
	
КонецПроцедуры


//////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура ЗаполнитьТаблицуТорговыхТочек()

	// Получение данных
	ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(СписокТорговыхТочек.ВыгрузитьЗначения());
	
	// Заполнение
	Если ТаблицаТорговыхТочек.Количество() > 0 Тогда
		ТаблицаТорговыхТочек.Очистить();
	КонецЕсли;
	
	НоваяСтрока = ТаблицаТорговыхТочек.Добавить();
	НоваяСтрока.ТорговаяТочка = "<Все>";
	
	Для Каждого ДанныеТорговойТочки Из ДанныеТорговыхТочек Цикл
		Если Не ОсновнойСкладТорговыхТочек.Пустая()
		   И ДанныеТорговойТочки.ОсновнойСклад <> ОсновнойСкладТорговыхТочек Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТорговыхТочек.Добавить();
		НоваяСтрока.ТорговаяТочка				= ДанныеТорговойТочки.ТорговаяТочка;
		НоваяСтрока.НеУчаствуетВРаспределении	= ДанныеТорговойТочки.НеУчаствуетВРаспределении;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура ЗаполнитьРеквизитыСпискиСервер()

	// список доступной номенклатуры
	мМассив	= ДопМодульСервер.ПолучитьМассивДоступнойНоменклатуры(Объект.Расчетчик);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокНоменклатуры = ТекСписок;
	
	// список полных аналогов товаров
	мМассив	= ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(ЭтаФорма.СписокНоменклатуры);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокПолныхАналоговТоваров = ТекСписок;
	
	// список состава комплекта
	мМассив	= ДопМодульСервер.ПолучитьМассивСоставаКомплекта(ЭтаФорма.СписокНоменклатуры);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокСоставаКомплекта = ТекСписок;
	
	// список доступных торговых точек
	мМассив	= ДоступныеТорговыеТочки("ПлюсНеучаствующие", Объект.Расчетчик, СписокНоменклатуры);
	ТекСписок = Новый СписокЗначений;
	ТекСписок.ЗагрузитьЗначения(мМассив);
	ЭтаФорма.СписокТорговыхТочек = ТекСписок;
	
	// таблица доступных торговых точек
	ЗаполнитьТаблицуТорговыхТочек();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокиВДеревоТоваров(мСтрокиДереваНоменклатуры, мДеревоЗапроса)
	
	Перем СтрокиДереваЗапроса, СтрокаНоменклатуры;
	
	СтрокиДереваЗапроса = мДеревоЗапроса.Строки;
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗапроса Цикл
		
		СтрокаНоменклатуры = мСтрокиДереваНоменклатуры.Строки.Добавить();
		СтрокаНоменклатуры.Номенклатура = СтрокаДерева.Номенклатура;
		СтрокаНоменклатуры.Аналог 		= СтрокаДерева.Аналог;
		
		ДобавитьСтрокиВДеревоТоваров(СтрокаНоменклатуры, СтрокаДерева);
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьДеревоТоваров()
	
	Перем Запрос, ДеревоЗапроса;
	
	// доступная номенклатура
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры"		, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("МассивПолныхАналогов"	, ЭтаФорма.СписокПолныхАналоговТоваров);
	Запрос.УстановитьПараметр("МассивСоставаКомплекта"	, ЭтаФорма.СписокСоставаКомплекта);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Ссылка В (&МассивПолныхАналогов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Аналог
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	(СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
	|			ИЛИ СпрНоменклатура.Ссылка В (&МассивПолныхАналогов)
	|			ИЛИ СпрНоменклатура.Ссылка В (&МассивСоставаКомплекта))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	
	// служебная переменная
	мДеревоНоменклатуры = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	мДеревоНоменклатуры.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов(МассивТипов));
	мДеревоНоменклатуры.Колонки.Добавить("Аналог"		, Новый ОписаниеТипов("Булево"));
	
	// пустой товар - т.е. все товары
	СтрокаДерева = мДеревоНоменклатуры.Строки.Добавить();
	СтрокаДерева.Номенклатура = "<Все>";
	
	// подчиненные группы
	ДобавитьСтрокиВДеревоТоваров(СтрокаДерева, ДеревоЗапроса);
	
	
	// вывод на экран
	ЗначениеВРеквизитФормы(мДеревоНоменклатуры, "ДеревоТоваров");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ГлубинаАнализа 		= 1;
	Объект.ДатаНачалаПлан 		= НачалоНедели(ТекущаяДата());
	Объект.ДатаОкончанияПлан 	= КонецНедели(ТекущаяДата());
	
	мЕстьДоступКоВсемРасчетчикам = ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ПрогнозированиеРазрешитьДоступКоВсемРасчетчикам", Ложь);
	
	// вывод расчетчика
	Объект.Расчетчик = ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ПрогнозированиеРасчетчик", Справочники.Расчетчики.ПустаяСсылка());
	
	мПоказыватьРасчетчика = мЕстьДоступКоВсемРасчетчикам
								ИЛИ НЕ Объект.Расчетчик.Пустая();
	Элементы.Расчетчик.Видимость 				= мПоказыватьРасчетчика;
	Элементы.НадписьПустойРасчетчик.Видимость 	= НЕ мПоказыватьРасчетчика;
	
	Элементы.Расчетчик.ТолькоПросмотр	= НЕ мЕстьДоступКоВсемРасчетчикам;
	Элементы.Расчетчик.КнопкаОчистки    = мЕстьДоступКоВсемРасчетчикам;
	Элементы.Расчетчик.КнопкаВыбора    	= мЕстьДоступКоВсемРасчетчикам;
	
	// списки доступных номенклатур и торговых точек (по правам пользователя, по расчетчику) - в реквизиты формы
	ЗаполнитьРеквизитыСпискиСервер();
	
	Элементы.НадписьТекДата.Заголовок 			= Формат(ТекущаяДата(), "ДЛФ=Д");
	Элементы.НадписьТекДеньНедели.Заголовок		= ПолучитьОписаниеДняНедели(ТекущаяДата());
	ТекНомерНедели = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ТекущаяДата());
	Элементы.НадписьТекНомерНедели.Заголовок	= Формат(ТекНомерНедели, "ЧГ=");
	
	Объект.ПоследняяДатаВнесенияЛистовУчета = ПолучитьПоследнююДатуВнесенияЛистовУчета(ЭтаФорма.СписокТорговыхТочек);
	
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	// установка отборов на форме
	//ЗаполнитьТаблицыПродаж();
	//---АК MOSD 
	
	// заполнение данных на вкладке "Распределение по дням"
	ЗаполнитьДеревоНоменклатуры();
	
	Элементы.РаспределениеПоДнямНоменклатура.Видимость = Ложь;
		
	// заполнение параметров номенклатуры для заказа
	УстановитьОтборПараметрыНоменклатурыДляЗаказа();
	//+++AK GREK 17.05.2018 ИП-00017935
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//ЗаполнитьПараметрыНоменклатурыЗаказа();
	//---АК MOSD 
	//---AK
	
	// вкладка "Товарный ассортимент точек"
	ЭтаФорма.ДатаАссортимента = КонецДня(ТекущаяДата()) + 1;
	ЭтаФорма.ТоварныйАссортиментТочек.Параметры.УстановитьЗначениеПараметра("ТипЦен", Справочники.ТипыЦен.ОсновнойТипЦенПродаж);
	УстановитьОтборПоказыватьВыведенныйТоварныйАссортиментТочек();
	УстановитьОтборТоварныйАссортиментТочек();
	Элементы.ТоварныйАссортиментТочекКнопкаЗапретитьПозиции.Видимость 	= Ложь;
	Элементы.ТоварныйАссортиментТочекКнопкаСнятьЗапретПозиции.Видимость = Ложь;
	Элементы.ТоварныйАссортиментТочекЗапрещена.Видимость 				= Ложь;
	
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//ЗаполнитьПоставщиковИУсловияПоставки();
	//---АК MOSD 
	
	// данные на вкладке "Фактические остатки" и "Распределение по ТТ"
	ЭтаФорма.ДатаОстатков = ТекущаяДата();
	Элементы.ДатаОстатков.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаОстатков);
	Элементы.ДатаОстатковОтчета.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаОстатков);
	ТекНомерНедели = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ЭтаФорма.ДатаОстатков);
	Элементы.НадписьТекНомерНеделиОстатков.Заголовок 	= Формат(ТекНомерНедели, "ЧГ=");
	//Элементы.НадписьДатаЗапускаРаспределения.Заголовок	= "";
	Элементы.ТаблицаТорговыхТочекДата.Видимость 	= Ложь;
	Элементы.ТаблицаТорговыхТочекСумма.Видимость 	= Ложь;
	
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//ЗаполнитьТаблицуФактическихОстатков();
	//---АК MOSD 
	
	// данные на вкладке "Значения"
	ЭтаФорма.ДатаЗаказов = ТекущаяДата();
	Элементы.ДатаПоказателейЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
	Элементы.ДатаЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
	Элементы.ДатаОтправкиЗаказов.ВыделенныеДаты.Добавить(ЭтаФорма.ДатаЗаказов);
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//ЗаполнитьДеревоТоваров();
	//---АК MOSD 
	
	ПриИзмененииДатыЗаказов();
	
	ЭтаФорма.ТекстЗапросаПоказателиДляЗаказа = ЭтаФорма.ПоказателиДляЗаказаТоваров.ТекстЗапроса;
	УстановитьТекстЗапросаПоказателиЗаказа();
	УстановитьОтборПоказателиДляЗаказаПоСкладу();
	УстановитьОтборПоказателиДляЗаказаПоТоварам();
	УстановитьОтборПоказателиДляЗаказаПоТТ();
	
	Элементы.ПоказателиДляЗаказаТоваровМинимальныйОстаток.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровФактическийОстаток.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспределено.Видимость 				= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспр_Нужно.Видимость 				= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспр_План.Видимость 				= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспр_Избыток.Видимость 				= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровРаспр_Запас.Видимость 				= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровКоличествоПланПродаж.Видимость 		= Ложь;
	Элементы.ПоказателиДляЗаказаТоваровКоличествоЗаказ.Видимость 			= Истина;
	Элементы.ПоказателиДляЗаказаТоваровПлановыйОстатокНаКонецДня.Видимость 	= Ложь;
	
	УстановитьОтборТоварныеОграниченияНаТочках();
	
	// данные на вкладке "Заказы"
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//ЗаполнитьТаблицуРасчетчиковДляЗаказа();
	//---АК MOSD 
	УстановитьОтборЗаказов();
	УстановитьОтборТоварыПредзаказов();
	
	// данные на вкладке "График заказов"
	//+++АК MOSD 2018.12.09 ИП-00018605 заполнение происходит при открытии закладки на форме 
	//УстановитьОтборГрафикиЗаказовИРазвозаСервер();
	//УстановитьОтборЗаказовПоставщикамСервер();
	//---АК MOSD 
	УстановитьОтборГрафикаРазвоза();
	
	// данные на вкладке "Отправка заказов"
	УстановитьУчетнуюЗаписьЭлПочты();

	// данные на вкладке "Задания на фасовку"
	ЭтаФорма.ДатаЗаданийНаФасовку = ТекущаяДата();
	УстановитьОтборЗаданийНаПеремещение();
	УстановитьОтборЗаданийНаФасовку();
	
	//+++AK GREK 25.07.2018 ИП-00019303  
	МассивТиповСЕ = Новый Массив();
	МассивТиповСЕ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	МассивТиповСЕ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница"));
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТиповСЕ));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Активное", Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	НовыеПараметрыВыбора =  Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ТорговаяТочкаДляКопии.ПараметрыВыбора = НовыеПараметрыВыбора;
	//---AK
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ЭтаФорма.КаталогФайловОтправкаЗаказов = ПолучитьКаталогФайловОтправкаЗаказов(ЭтаФорма.ДатаЗаказов);
		ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма();
	Исключение
		ЭтаФорма.КаталогФайловОтправкаЗаказов = "";
		Сообщить("Не удалось создать каталог файлов для отправки заказов! Возможно, нет прав для осуществления операции.");
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////
// ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМЫ, КНОПОК и т.д.

// СЛУЖЕБНАЯ  Перезапускаются процедуры, выполнение которых зависит от изменения периода планирования
Процедура ПриИзмененииПериодаПланирования()
	
	ЗаполнитьТаблицыПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗаказовПоставщикам()
	
	Перем СтруктураПараметров, ТекДанные;
	
	ТекДанные = Элементы.ГрафикЗаказов.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Дата"		, ТекДанные.Дата);
		СтруктураПараметров.Вставить("Поставщик", ТекДанные.Поставщик);
	КонецЕсли;
	
	УстановитьОтборЗаказовПоставщикамСервер(СтруктураПараметров);
	
КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура РасчетчикПриИзменении(Элемент)

	Перем ТекДанные, СтруктураПараметров;
	
	ЗаполнитьРеквизитыСпискиСервер();
	
	Объект.ПоследняяДатаВнесенияЛистовУчета = ПолучитьПоследнююДатуВнесенияЛистовУчета(ЭтаФорма.СписокТорговыхТочек);
	
	// установка отборов на форме
	ЗаполнитьТаблицыПродаж();
	
	// заполнение данных на вкладке "Распределение по дням"
	ЗаполнитьДеревоНоменклатуры();
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(ТекДанные.Номенклатура);
		УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
	КонецЕсли;
	
	// заполнение параметров номенклатуры для заказа
	УстановитьОтборПараметрыНоменклатурыДляЗаказа();
	//+++AK GREK 17.05.2018 ИП-00017935
	ЗаполнитьПараметрыНоменклатурыЗаказа();
	//---AK
	
	// производители товаров
	ЗаполнитьПоставщиковИУсловияПоставки();
	
	ТекДанные = Элементы.ДеревоПоставщиков.ТекущиеДанные;
	СтруктураОтбора = Новый Структура("Поставщик", ?(НЕ ТекДанные = Неопределено, ТекДанные.Поставщик, Неопределено));
	Элементы.УсловияПоставкиТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
	// фактические остатки товаров
	УстановитьОтборФактическихОстатков();
	
	// значения
	УстановитьОтборПоказателиДляЗаказаПоСкладуКлиент();
	УстановитьОтборПоказателиДляЗаказаПоТоварамКлиент();
	УстановитьОтборПоказателиДляЗаказаПоТТКлиент();
	
	// дерево товаров (показатели для заказа товаров и товарные ограничения на точках)
	ЗаполнитьДеревоТоваров();
	
	// графики заказов и развоза
	УстановитьОтборГрафикиЗаказовИРазвоза();
	УстановитьОтборЗаказовПоставщикам();
	УстановитьОтборГрафикаРазвоза();
	
	// Заказы
	ЗаполнитьТаблицуРасчетчиковДляЗаказа();
	УстановитьОтборЗаказов();
	УстановитьОтборТоварыПредзаказов();
	
	// Отправка заказов
	УстановитьУчетнуюЗаписьЭлПочты();
	
	// Задания на перемещение и фасовку
	УстановитьОтборЗаданийНаПеремещение();
	УстановитьОтборЗаданийНаФасовку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияПлан)
				И Объект.ДатаНачалаПлан > Объект.ДатаОкончанияПлан Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			Объект.ДатаНачалаПлан = Объект.ДатаОкончанияПлан;
			Возврат;
		КонецЕсли;

		ПриИзмененииПериодаПланирования();
	
		ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
		Если НЕ ТекДанные = Неопределено Тогда
			ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(ТекДанные.Номенклатура);
			УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
		КонецЕсли;
		
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияПлан) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан)
				И Объект.ДатаНачалаПлан > Объект.ДатаОкончанияПлан Тогда
		
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата окончания периода меньше даты начала периода!";
			СообщениеПользователю.Сообщить();
			
			Объект.ДатаОкончанияПлан = Объект.ДатаНачалаПлан;
			Возврат;
		КонецЕсли;

		ПриИзмененииПериодаПланирования();
	
		ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
		Если НЕ ТекДанные = Неопределено Тогда
			ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(ТекДанные.Номенклатура);
			УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
		КонецЕсли;
		
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(Объект.ДатаНачалаПлан, Объект.ДатаОкончанияПлан);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		Объект.ДатаНачалаПлан 		= СтандартныйПериод.ДатаНачала;
		Объект.ДатаОкончанияПлан 	= СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан)
			И ЗначениеЗаполнено(Объект.ДатаОкончанияПлан) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияПлан)
				И Объект.ДатаНачалаПлан > Объект.ДатаОкончанияПлан Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Дата начала периода больше даты окончания периода!";
			СообщениеПользователю.Сообщить();
			
			Объект.ДатаНачалаПлан = Объект.ДатаОкончанияПлан;
			Возврат;
		КонецЕсли;
		
		ПриИзмененииПериодаПланирования();
	
		ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
		Если НЕ ТекДанные = Неопределено Тогда
			ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(ТекДанные.Номенклатура);
			УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата начала периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияПлан) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Должна быть указана дата окончания периода!";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГлубинаАнализаПриИзменении(Элемент)
	
	Если Объект.ГлубинаАнализа = 0 Тогда
		Объект.ГлубинаАнализа = 1;
	КонецЕсли;
	
КонецПроцедуры

//+++АК CISA 2018.09.16 ИП-00019824 Открываем форму отчета
&НаКлиенте
Процедура ОткрытьОтчетРаспределениеТоваровВТТ(Команда)
	ОткрытьФорму("Отчет.РасшифровкаРаспределенияТоваровВТорговойТочке.Форма.ФормаОтчета", , ЭтаФорма);
КонецПроцедуры
//---АК CISA


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦ ПЛАНОВ ПРОДАЖ

&НаКлиенте
Процедура ВыводитьТТМиниТТПустоПриИзменении(Элемент)
	
	Если ЭтаФорма.ВыводитьТТМиниТТПусто Тогда
		ЭтаФорма.ВыводитьТолькоВВ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьТолькоВВПриИзменении(Элемент)
	
	Если ЭтаФорма.ВыводитьТолькоВВ Тогда
		ЭтаФорма.ВыводитьТТМиниТТПусто = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокТТПланы()
	
	Если ЭтаФорма.ВыводитьТолькоВВ
			ИЛИ ЭтаФорма.ВыводитьТТМиниТТПусто Тогда
		мТипТТДляТАВВ = ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ВВ");
		мСписокТТ = Новый СписокЗначений;
		Если ЭтаФорма.ВыводитьТолькоВВ Тогда
			Для Каждого ЭлементСписка Из ЭтаФорма.СписокТорговыхТочек Цикл
				Если НЕ ПолучитьТипТТДляТА(ЭлементСписка.Значение) = мТипТТДляТАВВ Тогда
					Продолжить;
				КонецЕсли;
				мСписокТТ.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
		ИначеЕсли ЭтаФорма.ВыводитьТТМиниТТПусто Тогда
			Для Каждого ЭлементСписка Из ЭтаФорма.СписокТорговыхТочек Цикл
				Если ПолучитьТипТТДляТА(ЭлементСписка.Значение) = мТипТТДляТАВВ Тогда
					Продолжить;
				КонецЕсли;
				мСписокТТ.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
		КонецЕсли;
	Иначе
		мСписокТТ = ЭтаФорма.СписокТорговыхТочек
	КонецЕсли;
	
	Возврат мСписокТТ;
	
КонецФункции

// Изменяет суммы в регистре сведений "ПланыПродажПоДнямНедели" на процент изменения.
//
Процедура ДобавитьПроцентИзмененияВПланПродаж(мСписокТТ)
	
	Перем Запрос, РезультатЗапроса, Выборка, ВыборкаПоДатам, НаборЗаписей;
	
	// запись в регистр "ПланыПродажПоДнямНедели" измененных данных
	мПланыПродажПоДнямНедели = РегистрыСведений.ПланыПродажПоДнямНедели;
	ТекРасчетчик = Объект.Расчетчик;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мСписокТТ);
	Запрос.УстановитьПараметр("Расчетчик"			, ТекРасчетчик);
	Запрос.УстановитьПараметр("ДатаНачала"			, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончания"		, Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("Коэффициент"			, (1 + ЭтаФорма.ПроцентИзменения / 100));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыПродажПоДнямНедели.Дата КАК Дата,
	|	ПланыПродажПоДнямНедели.Номенклатура,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА ПланыПродажПоДнямНедели.Номенклатура.Весовой
	|			ТОГДА (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество * &Коэффициент КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ПланыПродажПоДнямНедели.Количество * &Коэффициент < (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество * &Коэффициент КАК ЧИСЛО(15, 1))) + 0.05
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество * &Коэффициент КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ПланыПродажПоДнямНедели.Количество * &Коэффициент < (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество * &Коэффициент КАК ЧИСЛО(15, 0))) + 0.5
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ПланыПродажПоДнямНедели.Цена
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	|	И ПланыПродажПоДнямНедели.Номенклатура В (&МассивНоменклатуры)
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТорговыхТочек)
	|ИТОГИ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьВПланыПродажПоДнямНедели(Объект.Расчетчик, РезультатЗапроса);
	
	// снова свернуть и вывести на экран
	ЗаполнитьТаблицыПродаж(мСписокТТ);
	
КонецПроцедуры

Функция ПолучитьРезультатыЗапросовПоРаспределению(мТаблица, мСписокТТ, ЕстьОтборПоТипуТТ = Ложь)
	
	Перем Запрос;
	
	// таблица всех дней из планируемого периода
	мДатаНачала2 = Объект.ДатаНачалаПлан;
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Пока мДатаНачала2 <= Объект.ДатаОкончанияПлан Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = мДатаНачала2;
		мДатаНачала2 = мДатаНачала2 + 86400;
	КонецЦикла;
	
	МассивГруппУРЗ = Новый Массив;
	Для Каждого ЭлементСписка Из ЭтаФорма.СписокНоменклатуры Цикл
		ТекГруппаУРЗ = ЭлементСписка.Значение.ГруппаНоменклатурыУРЗ;
		Если МассивГруппУРЗ.Найти(ТекГруппаУРЗ) = Неопределено Тогда
			МассивГруппУРЗ.Добавить(ТекГруппаУРЗ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ТекущаяДата() + 86400));
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("МассивГруппУРЗ"		, МассивГруппУРЗ);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мСписокТТ);
	Запрос.УстановитьПараметр("ДатаНачала"			, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончания"		, Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("ТаблицаДат"			, ТаблицаДат);
	Запрос.УстановитьПараметр("ТаблицаФактов"		, мТаблица);
	Запрос.УстановитьПараметр("ЕстьОтборПоТипуТТ"	, ?(ЕстьОтборПоТипуТТ, 1, 0));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеПродажПроценты.Номенклатура КАК Номенклатура,
	|	РаспределениеПродажПроценты.ТорговаяТочка КАК ТорговаяТочка,
	|	РаспределениеПродажПроценты.ПроцентПонедельник,
	|	РаспределениеПродажПроценты.ПроцентВторник,
	|	РаспределениеПродажПроценты.ПроцентСреда,
	|	РаспределениеПродажПроценты.ПроцентЧетверг,
	|	РаспределениеПродажПроценты.ПроцентПятница,
	|	РаспределениеПродажПроценты.ПроцентСуббота,
	|	РаспределениеПродажПроценты.ПроцентВоскресенье
	|ПОМЕСТИТЬ ВТПроценты
	|ИЗ
	|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
	|ГДЕ
	|	(РаспределениеПродажПроценты.Номенклатура В (&МассивНоменклатуры)
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура В (&МассивГруппУРЗ)
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И РаспределениеПродажПроценты.ТорговаяТочка В(&МассивТорговыхТочек)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочек.Номенклатура.Весовой КАК Весовой,
	|	ТоварныйАссортиментТочек.Номенклатура.Наименование КАК НаименованиеНоменклатуры
	|ПОМЕСТИТЬ ВТНоменклатураАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаАссортимента,
	|			ТорговаяТочка В (&МассивТорговыхТочек)
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФактов.ТорговаяТочка,
	|	ТаблицаФактов.Номенклатура,
	|	ТаблицаФактов.ГруппаУРЗ,
	|	ТаблицаФактов.НаименованиеНоменклатуры,
	|	ТаблицаФактов.Весовой,
	|	ТаблицаФактов.ПланКоличество,
	|	ТаблицаФактов.Цена
	|ПОМЕСТИТЬ ВТТаблицаФактов
	|ИЗ
	|	&ТаблицаФактов КАК ТаблицаФактов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТПроценты.Номенклатура = ТаблицаФактов.Номенклатура
	|			ТОГДА 1
	|		КОГДА ВТПроценты.Номенклатура = ТаблицаФактов.ГруппаУРЗ
	|			ТОГДА 2
	|		КОГДА ВТПроценты.Номенклатура = &Расчетчик
	|			ТОГДА 3
	|		КОГДА ВТПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Порядок,
	|	ТаблицаФактов.ТорговаяТочка,
	|	ТаблицаФактов.Номенклатура,
	|	ТаблицаФактов.НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПонедельник, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоПонедельник,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВторник, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоВторник,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСреда, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоСреда,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентЧетверг, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоЧетверг,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентПятница, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоПятница,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентСуббота, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоСуббота,
	|	ВЫБОР
	|		КОГДА ТаблицаФактов.Весовой = ИСТИНА
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 КАК ЧИСЛО(15, 1))) + ВЫБОР
	|					КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 КАК ЧИСЛО(15, 1))) + 0.05
	|							И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) > 0
	|									И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 < 0.05)
	|						ТОГДА 0
	|					ИНАЧЕ 0.1
	|				КОНЕЦ
	|		ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 КАК ЧИСЛО(15, 0))) + ВЫБОР
	|				КОГДА ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 < (ВЫРАЗИТЬ(ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 КАК ЧИСЛО(15, 0))) + 0.5
	|						И НЕ(ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) > 0
	|								И ТаблицаФактов.ПланКоличество * ЕСТЬNULL(ВТПроценты.ПроцентВоскресенье, 0) / 100 < 0.5)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоВоскресенье,
	|	ТаблицаФактов.Цена КАК Цена
	|ПОМЕСТИТЬ ВТТаблицаПлановОбщие
	|ИЗ
	|	ВТТаблицаФактов КАК ТаблицаФактов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроценты КАК ВТПроценты
	|		ПО (ВТПроценты.ТорговаяТочка = ТаблицаФактов.ТорговаяТочка)
	|			И (ВТПроценты.Номенклатура = ТаблицаФактов.Номенклатура
	|				ИЛИ ВТПроценты.Номенклатура = ТаблицаФактов.ГруппаУРЗ
	|				ИЛИ ВТПроценты.Номенклатура = &Расчетчик
	|				ИЛИ ВТПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаПлановОбщие.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТТаблицаПлановОбщие.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(ВТТаблицаПлановОбщие.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ВТТаблицаПлановПорядок
	|ИЗ
	|	ВТТаблицаПлановОбщие КАК ВТТаблицаПлановОбщие
	|ГДЕ
	|	НЕ ВТТаблицаПлановОбщие.Порядок = 5
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаПлановОбщие.ТорговаяТочка,
	|	ВТТаблицаПлановОбщие.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаПлановОбщие.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТТаблицаПлановОбщие.Номенклатура КАК Номенклатура,
	|	ВТТаблицаПлановОбщие.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТТаблицаПлановОбщие.КоличествоПонедельник КАК КоличествоПонедельник,
	|	ВТТаблицаПлановОбщие.КоличествоВторник КАК КоличествоВторник,
	|	ВТТаблицаПлановОбщие.КоличествоСреда КАК КоличествоСреда,
	|	ВТТаблицаПлановОбщие.КоличествоЧетверг КАК КоличествоЧетверг,
	|	ВТТаблицаПлановОбщие.КоличествоПятница КАК КоличествоПятница,
	|	ВТТаблицаПлановОбщие.КоличествоСуббота КАК КоличествоСуббота,
	|	ВТТаблицаПлановОбщие.КоличествоВоскресенье КАК КоличествоВоскресенье,
	|	ВТТаблицаПлановОбщие.КоличествоПонедельник + ВТТаблицаПлановОбщие.КоличествоВторник + ВТТаблицаПлановОбщие.КоличествоСреда + ВТТаблицаПлановОбщие.КоличествоЧетверг + ВТТаблицаПлановОбщие.КоличествоПятница + ВТТаблицаПлановОбщие.КоличествоСуббота + ВТТаблицаПлановОбщие.КоличествоВоскресенье КАК ПланКоличество,
	|	ВТТаблицаПлановОбщие.Цена КАК Цена
	|ПОМЕСТИТЬ ВТПромежуточная
	|ИЗ
	|	ВТТаблицаПлановОбщие КАК ВТТаблицаПлановОбщие
	|ГДЕ
	|	ВТТаблицаПлановОбщие.Порядок = 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТТаблицаПлановОбщие.ТорговаяТочка,
	|	ВТТаблицаПлановОбщие.Номенклатура,
	|	ВТТаблицаПлановОбщие.НаименованиеНоменклатуры,
	|	ВТТаблицаПлановОбщие.КоличествоПонедельник,
	|	ВТТаблицаПлановОбщие.КоличествоВторник,
	|	ВТТаблицаПлановОбщие.КоличествоСреда,
	|	ВТТаблицаПлановОбщие.КоличествоЧетверг,
	|	ВТТаблицаПлановОбщие.КоличествоПятница,
	|	ВТТаблицаПлановОбщие.КоличествоСуббота,
	|	ВТТаблицаПлановОбщие.КоличествоВоскресенье,
	|	ВТТаблицаПлановОбщие.КоличествоПонедельник + ВТТаблицаПлановОбщие.КоличествоВторник + ВТТаблицаПлановОбщие.КоличествоСреда + ВТТаблицаПлановОбщие.КоличествоЧетверг + ВТТаблицаПлановОбщие.КоличествоПятница + ВТТаблицаПлановОбщие.КоличествоСуббота + ВТТаблицаПлановОбщие.КоличествоВоскресенье,
	|	ВТТаблицаПлановОбщие.Цена
	|ИЗ
	|	ВТТаблицаПлановОбщие КАК ВТТаблицаПлановОбщие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПлановПорядок КАК ВТТаблицаПлановПорядок
	|		ПО (ВТТаблицаПлановПорядок.ТорговаяТочка = ВТТаблицаПлановОбщие.ТорговаяТочка)
	|			И (ВТТаблицаПлановПорядок.Номенклатура = ВТТаблицаПлановОбщие.Номенклатура)
	|			И (ВТТаблицаПлановПорядок.Порядок = ВТТаблицаПлановОбщие.Порядок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточная.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПромежуточная.Номенклатура КАК Номенклатура,
	|	ВТПромежуточная.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТПромежуточная.КоличествоПонедельник КАК КоличествоПонедельник,
	|	ВТПромежуточная.КоличествоВторник КАК КоличествоВторник,
	|	ВТПромежуточная.КоличествоСреда КАК КоличествоСреда,
	|	ВТПромежуточная.КоличествоЧетверг КАК КоличествоЧетверг,
	|	ВТПромежуточная.КоличествоПятница КАК КоличествоПятница,
	|	ВТПромежуточная.КоличествоСуббота КАК КоличествоСуббота,
	|	ВТПромежуточная.КоличествоВоскресенье КАК КоличествоВоскресенье,
	|	ВТПромежуточная.ПланКоличество КАК ПланКоличество,
	|	ВТПромежуточная.Цена КАК Цена
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТПромежуточная КАК ВТПромежуточная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТНоменклатураАссортимента.ТорговаяТочка,
	|	ВТНоменклатураАссортимента.Номенклатура,
	|	ВТНоменклатураАссортимента.НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 1
	|		ИНАЧЕ 0.2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ВТНоменклатураАссортимента.Весовой
	|			ТОГДА 7
	|		ИНАЧЕ 1.4
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ
	|ИЗ
	|	ВТНоменклатураАссортимента КАК ВТНоменклатураАссортимента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПромежуточная КАК ВТПромежуточная
	|		ПО (ВТПромежуточная.ТорговаяТочка = ВТНоменклатураАссортимента.ТорговаяТочка)
	|			И (ВТПромежуточная.Номенклатура = ВТНоменклатураАссортимента.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.Номенклатура = ВТНоменклатураАссортимента.Номенклатура)
	|			И (ВТЦены.ТорговаяТочка = ВТНоменклатураАссортимента.ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.Номенклатура = ВТНоменклатураАссортимента.Номенклатура)
	|			И (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ВТПромежуточная.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.Номенклатура,
	|	СУММА(ТаблицаПланов.ПланКоличество) КАК Показатель
	|ИЗ
	|	ВТОсновная КАК ТаблицаПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаПланов.ПланКоличество) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.Номенклатура,
	|	ТаблицаПланов.НаименованиеНоменклатуры,
	|	СУММА(ТаблицаПланов.КоличествоПонедельник) КАК КоличествоПонедельник,
	|	СУММА(ТаблицаПланов.КоличествоВторник) КАК КоличествоВторник,
	|	СУММА(ТаблицаПланов.КоличествоСреда) КАК КоличествоСреда,
	|	СУММА(ТаблицаПланов.КоличествоЧетверг) КАК КоличествоЧетверг,
	|	СУММА(ТаблицаПланов.КоличествоПятница) КАК КоличествоПятница,
	|	СУММА(ТаблицаПланов.КоличествоСуббота) КАК КоличествоСуббота,
	|	СУММА(ТаблицаПланов.КоличествоВоскресенье) КАК КоличествоВоскресенье,
	|	ТаблицаПланов.Цена
	|ПОМЕСТИТЬ ВТРаспределение
	|ИЗ
	|	ВТОсновная КАК ТаблицаПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.Номенклатура,
	|	ТаблицаПланов.НаименованиеНоменклатуры,
	|	ТаблицаПланов.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаПланов.ПланКоличество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоответствиеДатДнямНедели.НомерНедели, 0) КАК НомерНедели,
	|	ВТДаты.Дата КАК Дата,
	|	ВТРаспределение.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТРаспределение.Номенклатура КАК Номенклатура,
	|	ВТРаспределение.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 1
	|			ТОГДА ВТРаспределение.КоличествоПонедельник
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 2
	|			ТОГДА ВТРаспределение.КоличествоВторник
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 3
	|			ТОГДА ВТРаспределение.КоличествоСреда
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 4
	|			ТОГДА ВТРаспределение.КоличествоЧетверг
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 5
	|			ТОГДА ВТРаспределение.КоличествоПятница
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 6
	|			ТОГДА ВТРаспределение.КоличествоСуббота
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 7
	|			ТОГДА ВТРаспределение.КоличествоВоскресенье
	|	КОНЕЦ КАК Количество,
	|	ЕСТЬNULL(ВТРаспределение.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ВТПланыПродажПоДням
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределение КАК ВТРаспределение
	|		ПО (ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 1
	|					И ВТРаспределение.КоличествоПонедельник > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 2
	|					И ВТРаспределение.КоличествоВторник > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 3
	|					И ВТРаспределение.КоличествоСреда > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 4
	|					И ВТРаспределение.КоличествоЧетверг > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 5
	|					И ВТРаспределение.КоличествоПятница > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 6
	|					И ВТРаспределение.КоличествоСуббота > 0
	|				ИЛИ ДЕНЬНЕДЕЛИ(ВТДаты.Дата) = 7
	|					И ВТРаспределение.КоличествоВоскресенье > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|		ПО ВТДаты.Дата = СоответствиеДатДнямНедели.Дата
	|ГДЕ
	|	НЕ ВТРаспределение.ТорговаяТочка ЕСТЬ NULL
	|	И НЕ ВТРаспределение.Номенклатура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПродажПоДням.Дата КАК Дата,
	|	ПланыПродажПоДням.ТорговаяТочка,
	|	ПланыПродажПоДням.Номенклатура,
	|	ПланыПродажПоДням.Количество,
	|	ПланыПродажПоДням.Цена
	|ПОМЕСТИТЬ втРезультатКЗаписи
	|ИЗ
	|	ВТПланыПродажПоДням КАК ПланыПродажПоДням
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПродажПоДнямНедели.Дата,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка,
	|	ПланыПродажПоДнямНедели.Номенклатура,
	|	ПланыПродажПоДнямНедели.Количество,
	|	ПланыПродажПоДнямНедели.Цена
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|ГДЕ
	|	&ЕстьОтборПоТипуТТ = 1
	|	И ПланыПродажПоДнямНедели.Дата В
	|			(ВЫБРАТЬ
	|				ВТДаты.Дата
	|			ИЗ
	|				ВТДаты)
	|	И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ ПланыПродажПоДнямНедели.ТорговаяТочка В (&МассивТорговыхТочек)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПродажПоДнямНедели.Дата КАК Дата,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродажПоДням КАК ВТПланыПродажПоДням
	|		ПО (ВТПланыПродажПоДням.Дата = ПланыПродажПоДнямНедели.Дата)
	|			И (ВТПланыПродажПоДням.ТорговаяТочка = ПланыПродажПоДнямНедели.ТорговаяТочка)
	|			И (ВТПланыПродажПоДням.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата В
	|			(ВЫБРАТЬ
	|				ВТДаты.Дата
	|			ИЗ
	|				ВТДаты)
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТорговыхТочек)
	|	И НЕ ПланыПродажПоДнямНедели.ТорговаяТочка.НеУчаствуетВРаспределении
	|	И ВТПланыПродажПоДням.ТорговаяТочка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПродажПоДням.НомерНедели,
	|	ПланыПродажПоДням.ТорговаяТочка,
	|	ПланыПродажПоДням.ТорговаяТочка.id_TT КАК id_TT,
	|	ПланыПродажПоДням.Номенклатура,
	|	ПланыПродажПоДням.НаименованиеНоменклатуры,
	|	ПланыПродажПоДням.Количество КАК Количество,
	|	ПланыПродажПоДням.Цена * ПланыПродажПоДням.Количество КАК Сумма
	|ПОМЕСТИТЬ ВТПоследняя
	|ИЗ
	|	ВТПланыПродажПоДням КАК ПланыПродажПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.id_TT,
	|	СУММА(ТаблицаПланов.Сумма) КАК Сумма
	|ИЗ
	|	ВТПоследняя КАК ТаблицаПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.ТорговаяТочка,
	|	ТаблицаПланов.id_TT
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.id_TT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.Номенклатура,
	|	ТаблицаПланов.НаименованиеНоменклатуры,
	|	СУММА(ТаблицаПланов.Количество) КАК Количество,
	|	СУММА(ТаблицаПланов.Сумма) КАК Сумма
	|ИЗ
	|	ВТПоследняя КАК ТаблицаПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.Номенклатура,
	|	ТаблицаПланов.НаименованиеНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланов.НомерНедели,
	|	ТаблицаПланов.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатКЗаписи.Дата КАК Дата,
	|	втРезультатКЗаписи.ТорговаяТочка КАК ТорговаяТочка,
	|	втРезультатКЗаписи.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втРезультатКЗаписи.Количество) КАК Количество,
	|	МАКСИМУМ(втРезультатКЗаписи.Цена) КАК Цена
	|ИЗ
	|	втРезультатКЗаписи КАК втРезультатКЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	втРезультатКЗаписи.Дата,
	|	втРезультатКЗаписи.ТорговаяТочка,
	|	втРезультатКЗаписи.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ТорговаяТочка,
	|	Номенклатура
	|ИТОГИ ПО
	|	Дата";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Заполняет вкладки "Прогноз продаж" и "Прогноз по товарам"
//
Процедура ЗаполнитьПланыСервер(мСписокТТ, ОбновитьЦены = Ложь)
	
	Перем РезультатыЗапросов;
		
	Если НЕ ЗначениеЗаполнено(Объект.ПоследняяДатаВнесенияЛистовУчета) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не выбран базовый период! Расчет невозможен.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ПроцентИзменения = 0 Тогда
		
		СтрокаНеПустыхДней = Неопределено;
		
		мСч = 0;
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		мДатаНачала 	= Объект.ПоследняяДатаВнесенияЛистовУчета - (Объект.ГлубинаАнализа * 7 - 1) * 86400;
		мДатаОкончания 	= КонецДня(Объект.ПоследняяДатаВнесенияЛистовУчета);
		
		РезультатыЗапросов = ОбработкаОбъект.ПолучитьПакетЗапросовПоФактуПродаж(мДатаНачала, мДатаОкончания,
																мСписокТТ, ЭтаФорма.СписокНоменклатуры, мСч);
		
		// таблица с количеством дней недели, в которых были продажи
		ТаблицаНеПустыхДней = РезультатыЗапросов[7 + мСч].Выгрузить();
		Если ТаблицаНеПустыхДней.Количество() > 0 Тогда
			СтрокаНеПустыхДней = ТаблицаНеПустыхДней[0];
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Нет данных для расчета!";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		// планы - вывод на экран
		ТаблицаЗапроса = РезультатыЗапросов[8 + мСч].Выгрузить();
		
		ТаблицаЗапроса.Колонки.Добавить("ПланКоличество", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 1)));
		Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			Если СтрокаТаблицы.КоличествоПонедельник > 0 Тогда
				СтрокаТаблицы.КоличествоПонедельник = СтрокаТаблицы.КоличествоПонедельник / СтрокаНеПустыхДней.КоличествоПн;														
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоВторник > 0 Тогда
				СтрокаТаблицы.КоличествоВторник 	= СтрокаТаблицы.КоличествоВторник / СтрокаНеПустыхДней.КоличествоВт;
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоСреда > 0 Тогда
				СтрокаТаблицы.КоличествоСреда 		= СтрокаТаблицы.КоличествоСреда / СтрокаНеПустыхДней.КоличествоСр;
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоЧетверг > 0 Тогда
				СтрокаТаблицы.КоличествоЧетверг 	= СтрокаТаблицы.КоличествоЧетверг / СтрокаНеПустыхДней.КоличествоЧт;
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоПятница > 0 Тогда
				СтрокаТаблицы.КоличествоПятница 	= СтрокаТаблицы.КоличествоПятница / СтрокаНеПустыхДней.КоличествоПт;
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоСуббота > 0 Тогда
				СтрокаТаблицы.КоличествоСуббота 	= СтрокаТаблицы.КоличествоСуббота / СтрокаНеПустыхДней.КоличествоСб;
			КонецЕсли;
			Если СтрокаТаблицы.КоличествоВоскресенье > 0 Тогда
				СтрокаТаблицы.КоличествоВоскресенье = СтрокаТаблицы.КоличествоВоскресенье / СтрокаНеПустыхДней.КоличествоВс;
			КонецЕсли;
			СтрокаТаблицы.ПланКоличество = СтрокаТаблицы.КоличествоПонедельник +
											СтрокаТаблицы.КоличествоВторник +
											СтрокаТаблицы.КоличествоСреда +
											СтрокаТаблицы.КоличествоЧетверг +
											СтрокаТаблицы.КоличествоПятница +
											СтрокаТаблицы.КоличествоСуббота +
											СтрокаТаблицы.КоличествоВоскресенье;
		КонецЦикла;
		
		
		// распределить по данным регистра сведений "Планы продаж по дням недели (проценты)"
		РезультатыЗапросаОбщие = ПолучитьРезультатыЗапросовПоРаспределению(ТаблицаЗапроса, мСписокТТ, (ЭтаФорма.ВыводитьТолькоВВ ИЛИ ЭтаФорма.ВыводитьТТМиниТТПусто));
		
		// поиск продаж, по которым нет записей в регистре сведений "Планы продаж по дням недели (проценты)"
		РезультатЗапроса = РезультатыЗапросаОбщие[8];
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Нет распределения по дням для номенклатуры """ + Выборка.Номенклатура +
											""" и торговой точки """ + Выборка.ТорговаяТочка + """";
			СообщениеПользователю.Сообщить();
		КонецЦикла;
		
		// запись в регистр "Планы продаж по дням недели"
		//РезультатКЗаписи 	= РезультатыЗапросаОбщие[12];
		РезультатКЗаписи 	= РезультатыЗапросаОбщие[17]; //+++АК LAGP 2018.02.24 Свернул 12 запрос во временной таблице, из-за разных цен (реквизит регистра сведений) дублировались строки, невозможно было записать РС "ПланыПродажПоДнямНедели" 
		
		РезультатКОчистке 	= РезультатыЗапросаОбщие[13];
		ОбработкаОбъект.ЗаписатьВПланыПродажПоДнямНедели(Объект.Расчетчик, РезультатКЗаписи, РезультатКОчистке);
		
		// планы по торговым точкам - вывод на экран
		мТаблица = РезультатыЗапросаОбщие[15].Выгрузить();
		ЭтаФорма.ПланыПродажПоТорговымТочкам.Загрузить(мТаблица);
		
		// планы по номенклатуре - вывод на экран
		мТаблица = РезультатыЗапросаОбщие[16].Выгрузить();
		ЭтаФорма.ПланыПродажПоНоменклатуре.Загрузить(мТаблица);
		
		
		// даты, в которых не было продаж (листов учета) в пределах анализируемого периода
		ТаблицаДат = РезультатыЗапросов[9 + мСч].Выгрузить();
		Для Каждого СтрокаТаблицы Из ТаблицаДат Цикл
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = Формат(СтрокаТаблицы.Дата, "ДЛФ=Д") + " не было продаж";
			СообщениеПользователю.Сообщить();
		КонецЦикла;
		
	Иначе
		
		ДобавитьПроцентИзмененияВПланПродаж(мСписокТТ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланы(Команда)
	
	мСписокТТ = ПолучитьСписокТТПланы();
	
	ЗаполнитьПланыСервер(мСписокТТ);
	
КонецПроцедуры

Процедура ЗагрузитьПланыПродажИзSQLСервер()
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение_2");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения = СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.УстановитьСоединение();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПлан"		, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончанияПлан"	, Объект.ДатаОкончанияПлан);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеДатДнямНедели.НомерНедели
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан";
	мМассивНомеровНедель = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерНедели");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНомеровНедель"	, мМассивНомеровНедель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Шапка.id_tt,
	|	ВЗ_Шапка.nedely,
	|	ВЗ_Товары.it_tov,
	|	ВЗ_Товары.День1,
	|	ВЗ_Товары.День2,
	|	ВЗ_Товары.День3,
	|	ВЗ_Товары.День4,
	|	ВЗ_Товары.День5,
	|	ВЗ_Товары.День6,
	|	ВЗ_Товары.День7,
	|	ВЗ_Товары.Price_RD
	|ИЗ
	|	(ВЫБРАТЬ
	|		Plan_prodaz.id_tt КАК id_tt,
	|		Plan_prodaz.id_plan КАК id_plan,
	|		Plan_prodaz.nedely КАК nedely
	|	ИЗ
	|		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz КАК Plan_prodaz
	|	ГДЕ
	|		Plan_prodaz.nedely В(&МассивНомеровНедель)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Plan_prodaz_arc.id_tt,
	|		Plan_prodaz_arc.id_plan,
	|		Plan_prodaz_arc.nedely
	|	ИЗ
	|		ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz_arc КАК Plan_prodaz_arc
	|	ГДЕ
	|		Plan_prodaz_arc.nedely В(&МассивНомеровНедель)) КАК ВЗ_Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Str_Plan_prodaz.id_plan КАК id_plan,
	|			Str_Plan_prodaz.it_tov КАК it_tov,
	|			Str_Plan_prodaz.День1 КАК День1,
	|			Str_Plan_prodaz.День2 КАК День2,
	|			Str_Plan_prodaz.День3 КАК День3,
	|			Str_Plan_prodaz.День4 КАК День4,
	|			Str_Plan_prodaz.День5 КАК День5,
	|			Str_Plan_prodaz.День6 КАК День6,
	|			Str_Plan_prodaz.День7 КАК День7,
	|			Str_Plan_prodaz.Price_RD КАК Price_RD
	|		ИЗ
	|			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Str_Plan_prodaz КАК Str_Plan_prodaz
	|		ГДЕ
	|			Str_Plan_prodaz.id_plan В
	|					(ВЫБРАТЬ
	|						Plan_prodaz.id_plan КАК id_plan
	|					ИЗ
	|						ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz КАК Plan_prodaz
	|					ГДЕ
	|						Plan_prodaz.nedely В (&МассивНомеровНедель))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Str_Plan_prodaz_arc.id_plan,
	|			Str_Plan_prodaz_arc.it_tov,
	|			Str_Plan_prodaz_arc.День1,
	|			Str_Plan_prodaz_arc.День2,
	|			Str_Plan_prodaz_arc.День3,
	|			Str_Plan_prodaz_arc.День4,
	|			Str_Plan_prodaz_arc.День5,
	|			Str_Plan_prodaz_arc.День6,
	|			Str_Plan_prodaz_arc.День7,
	|			Str_Plan_prodaz_arc.Price_RD
	|		ИЗ
	|			ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Str_Plan_prodaz_arc КАК Str_Plan_prodaz_arc
	|		ГДЕ
	|			Str_Plan_prodaz_arc.id_plan В
	|					(ВЫБРАТЬ
	|						Plan_prodaz_arc.id_plan
	|					ИЗ
	|						ВнешнийИсточникДанных.ДанныеТовародвижения_2.Таблица.Plan_prodaz_arc КАК Plan_prodaz_arc
	|					ГДЕ
	|						Plan_prodaz_arc.nedely В (&МассивНомеровНедель))) КАК ВЗ_Товары
	|		ПО ВЗ_Шапка.id_plan = ВЗ_Товары.id_plan";
				   
	ТабДанные = Запрос.Выполнить().Выгрузить();
	
	ВнешниеИсточникиДанных.ДанныеТовародвижения_2.РазорватьСоединение();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПлан"		, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончанияПлан"	, Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("Таб"					, ТабДанные);
				   
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.id_tt,
	|	Таб.it_tov,
	|	Таб.nedely,
	|	Таб.День1,
	|	Таб.День2,
	|	Таб.День3,
	|	Таб.День4,
	|	Таб.День5,
	|	Таб.День6,
	|	Таб.День7,
	|	Таб.Price_RD
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеДатДнямНедели.НомерНедели,
	|	СоответствиеДатДнямНедели.Дата
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_СтруктурныеЕдиницы.Ссылка КАК ТТ,
	|	ВЗ_Номенклатура.Ссылка КАК Номенклатура,
	|	ВЗ_Номенклатура.Весовой КАК Весовой,
	|	ВТ_Данные.id_tt,
	|	ВТ_Данные.it_tov,
	|	ВТ_Данные.nedely,
	|	ВТ_Данные.День1,
	|	ВТ_Данные.День2,
	|	ВТ_Данные.День3,
	|	ВТ_Данные.День4,
	|	ВТ_Данные.День5,
	|	ВТ_Данные.День6,
	|	ВТ_Данные.День7,
	|	ВТ_Данные.Price_RD
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(СтруктурныеЕдиницы.Ссылка) КАК Ссылка,
	|			СтруктурныеЕдиницы.id_TT КАК id_TT
	|		ИЗ
	|			Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтруктурныеЕдиницы.id_TT) КАК ВЗ_СтруктурныеЕдиницы
	|		ПО ВТ_Данные.id_tt = ВЗ_СтруктурныеЕдиницы.id_TT
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
	|			Номенклатура.Весовой КАК Весовой,
	|			Номенклатура.id_tov КАК id_tov
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура.Весовой,
	|			Номенклатура.id_tov) КАК ВЗ_Номенклатура
	|		ПО ВТ_Данные.it_tov = ВЗ_Номенклатура.id_tov";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка 				= РезультатыЗапроса[1].Выбрать();
	мТаблицаПлановПродаж 	= РезультатыЗапроса[2].Выгрузить();
	
	
	СтруктураОтбора = Новый Структура("nedely");
	
	мРегСв = РегистрыСведений.ПланыПродажПоДнямНедели;
	Пока Выборка.Следующий() Цикл

		НомерДня = ДеньНедели(Выборка.Дата);
		
		мНаборЗаписей = мРегСв.СоздатьНаборЗаписей();
		мНаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		мНаборЗаписей.Прочитать();
		
		Если мНаборЗаписей.Количество() > 0 Тогда
			мНаборЗаписей.Очистить();
		КонецЕсли;
		
		СтруктураОтбора.nedely = Выборка.НомерНедели;
		СтрокиПланов = мТаблицаПлановПродаж.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаПланов Из СтрокиПланов Цикл
			Если (НЕ ЗначениеЗаполнено(СтрокаПланов.id_tt))
					ИЛИ (НЕ ЗначениеЗаполнено(СтрокаПланов.it_tov))
					ИЛИ (НЕ ЗначениеЗаполнено(СтрокаПланов.ТТ))
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаПланов.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			ТекЗапись = мНаборЗаписей.Добавить();
			ТекЗапись.Дата 			= Выборка.Дата;
			ТекЗапись.ТорговаяТочка = СтрокаПланов.ТТ;
			ТекЗапись.Номенклатура 	= СтрокаПланов.Номенклатура;
			мПорядокОкругления = ?(СтрокаПланов.Весовой, 1, 0);
			ТекЗапись.Количество 	= Окр(СтрокаПланов["День" + Строка(НомерДня)], мПорядокОкругления);
			ТекЗапись.Цена 			= СтрокаПланов.Price_RD;
		КонецЦикла;

		Попытка
			мНаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗаполнитьТаблицыПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПланыПродажИзSQL(Команда)
	
	ЗагрузитьПланыПродажИзSQLСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныПрайса(Команда)
	
	мСписокТТ = ПолучитьСписокТТПланы();
	
	ЗаполнитьПланыСервер(мСписокТТ, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПланыПродажПоТорговымТочкамОбновить(Команда)
	
	мСписокТТ = ПолучитьСписокТТПланы();
	
	ЗаполнитьТаблицыПродаж(мСписокТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыПродажПоТорговымТочкамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ТекНомерНедели, ПараметрыФормы, СтруктураПараметров, ФормаРасшифровки, ТаблицаРасшифровки;
	
	СтандартнаяОбработка = Ложь;
	
	ТекНомерНедели = Элемент.ТекущиеДанные.НомерНедели;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТорговаяТочка"		, Элемент.ТекущиеДанные.ТорговаяТочка);
	ПараметрыФормы.Вставить("ГлубинаАнализа"	, Объект.ГлубинаАнализа);
	ПараметрыФормы.Вставить("Расчетчик"			, Объект.Расчетчик);
	ПараметрыФормы.Вставить("НомерНеделиПлан"	, ТекНомерНедели);
	ПараметрыФормы.Вставить("ПоследняяДатаВнесенияЛистовУчета"	, Объект.ПоследняяДатаВнесенияЛистовУчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"	, Объект.ДатаНачалаПлан);
	СтруктураПараметров.Вставить("ДатаОкончания", Объект.ДатаОкончанияПлан);
	ТаблицаДнейНедели = ПолучитьТаблицуДнейПериодаВНеделе(СтруктураПараметров, ТекНомерНедели); // это массив структур (из-за тонкого клиента...)
	ПараметрыФормы.Вставить("ТаблицаДнейПериодаВНеделе"	, ТаблицаДнейНедели);
	
	ФормаРасшифровки = ПолучитьФорму("Обработка.ПрогнозированиеПродаж.Форма.ФормаРасшифровкиПоНоменклатуре", ПараметрыФормы, ЭтаФорма);
	
	МассивСтруктур = ФормаРасшифровки.ОткрытьМодально();
	Если (МассивСтруктур = Новый Массив)
			ИЛИ МассивСтруктур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	мСписокТТ = ПолучитьСписокТТПланы();
	
	ЗаполнитьТаблицыПродаж(мСписокТТ);
	                       
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КопироватьПланПродажПоТТСервер(СтруктураПараметров)
	
	мРасчетчик		= СтруктураПараметров.Расчетчик;
	мТорговаяТочка 	= СтруктураПараметров.ТорговаяТочкаНовая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели"			, СтруктураПараметров.НомерНедели);
	Запрос.УстановитьПараметр("Расчетчик"			, мРасчетчик);
	Запрос.УстановитьПараметр("Склад"				, мРасчетчик.Склад);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, СтруктураПараметров.ТорговаяТочка);
	Запрос.УстановитьПараметр("ТорговаяТочкаНовая"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, СтруктураПараметров.МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеДатДнямНедели.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ТорговаяТочка = &ТорговаяТочкаНовая)
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПродажПоДнямНедели.Дата КАК Дата,
	|	&Расчетчик КАК Расчетчик,
	|	&Склад КАК Склад,
	|	&ТорговаяТочкаНовая КАК ТорговаяТочка,
	|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ПланыПродажПоДнямНедели.Количество) КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|		КОНЕЦ) КАК Цена
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	|			И (ВТЦены.ТорговаяТочка = &ТорговаяТочкаНовая)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	|			И (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата В
	|			(ВЫБРАТЬ
	|				ВТДаты.Дата
	|			ИЗ
	|				ВТДаты)
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка = &ТорговаяТочка
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПродажПоДнямНедели.Дата,
	|	ПланыПродажПоДнямНедели.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Расчетчик,
	|	Склад,
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДаты.Дата КАК Дата
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	//+++АК LAGP 2018.02.24 В запросе присутствуют одинаковые строки с разной ценой, регистр сведений не даёт записывать такие строки (цена - реквизит). Добавил группировку для третьего запроса.
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[2];
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Нет данных для копирования!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	мПланыПродажПоДнямНедели = РегистрыСведений.ПланыПродажПоДнямНедели;
	
	ВыборкаДат = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаДат.Следующий() Цикл
		
		ТекДата = ВыборкаДат.Дата;
		
		// запись по новой торговой точке
		НаборЗаписей = мПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(ТекДата);
		НаборЗаписей.Отбор.Расчетчик.Установить(мРасчетчик);
		НаборЗаписей.Отбор.ТорговаяТочка.Установить(мТорговаяТочка);
		НаборЗаписей.Прочитать();
		
		ВремТаблица = ТаблицаЗапроса.Скопировать(Новый Структура("Дата", ТекДата));
		Если ВремТаблица.Количество() > 0 Тогда
			НаборЗаписей.Загрузить(ВремТаблица);
		Иначе
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				НаборЗаписей = Неопределено; // обнуление переменной (забота о памяти приложения 1С)
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура КопироватьПланПродажПоТТ(Команда)
	
	Если ЭтаФорма.ТорговаяТочкаДляКопии.Пустая() Тогда
		Сообщить("Не выбрана торговая точка, копию плана которой необходимо сделать!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПланыПродажПоТорговымТочкам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСписокТТ = ПолучитьСписокТТПланы();
	
	Если мСписокТТ.НайтиПоЗначению(ЭтаФорма.ТорговаяТочкаДляКопии) = Неопределено Тогда
		Сообщить("Выбрана торговая точка, для которой нет плана!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерНедели"			, ТекДанные.НомерНедели);
	СтруктураПараметров.Вставить("Расчетчик"			, Объект.Расчетчик);
	СтруктураПараметров.Вставить("ТорговаяТочка"		, ЭтаФорма.ТорговаяТочкаДляКопии);
	СтруктураПараметров.Вставить("ТорговаяТочкаНовая"	, ТекДанные.ТорговаяТочка);
	СтруктураПараметров.Вставить("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	
	КопироватьПланПродажПоТТСервер(СтруктураПараметров);
	
	// перерисовка на форме
	ЗаполнитьТаблицыПродаж(мСписокТТ);
	
КонецПроцедуры


&НаКлиенте
Процедура ПланыПродажПоНоменклатуреОбновить(Команда)
	
	ЗаполнитьТаблицыПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыПродажПоНоменклатуреВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ТекНомерНедели, ПараметрыФормы, СтруктураПараметров, ФормаРасшифровки, ТаблицаРасшифровки;
	
	СтандартнаяОбработка = Ложь;
	
	ТекНомерНедели = Элемент.ТекущиеДанные.НомерНедели;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоменклатураОтбор" , Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("ГлубинаАнализа"	, Объект.ГлубинаАнализа);
	ПараметрыФормы.Вставить("Расчетчик"			, Объект.Расчетчик);
	ПараметрыФормы.Вставить("НомерНеделиПлан"	, ТекНомерНедели);
	ПараметрыФормы.Вставить("ПоследняяДатаВнесенияЛистовУчета"	, Объект.ПоследняяДатаВнесенияЛистовУчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"	, Объект.ДатаНачалаПлан);
	СтруктураПараметров.Вставить("ДатаОкончания", Объект.ДатаОкончанияПлан);
	ТаблицаДнейНедели = ПолучитьТаблицуДнейПериодаВНеделе(СтруктураПараметров, ТекНомерНедели); // это массив структур (из-за тонкого клиента...)
	ПараметрыФормы.Вставить("ТаблицаДнейПериодаВНеделе"	, ТаблицаДнейНедели);
	
	ФормаРасшифровки = ПолучитьФорму("Обработка.ПрогнозированиеПродаж.Форма.ФормаРасшифровкиПоТорговымТочкам", ПараметрыФормы, ЭтаФорма);
	
	МассивСтруктур = ФормаРасшифровки.ОткрытьМодально();
	Если (МассивСтруктур = Новый Массив)
			ИЛИ МассивСтруктур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьТаблицыПродаж();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КопироватьПланПродажПоНоменклатуреСервер(СтруктураПараметров)
	
	мРасчетчик		= СтруктураПараметров.Расчетчик;
	мНоменклатура 	= СтруктураПараметров.НоменклатураНовая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели"			, СтруктураПараметров.НомерНедели);
	Запрос.УстановитьПараметр("Расчетчик"			, мРасчетчик);
	Запрос.УстановитьПараметр("Склад"				, мРасчетчик.Склад);
	Запрос.УстановитьПараметр("Номенклатура"		, СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("НоменклатураНовая"	, мНоменклатура);
	Запрос.УстановитьПараметр("СписокТорговыхТочек"	, СтруктураПараметров.СписокТорговыхТочек);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеДатДнямНедели.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ТорговаяТочка В (&СписокТорговыхТочек))
	|				И Номенклатура = &НоменклатураНовая) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПродажПоДнямНедели.Дата КАК Дата,
	|	&Расчетчик КАК Расчетчик,
	|	&Склад КАК Склад,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка,
	|	&НоменклатураНовая КАК Номенклатура,
	|	МАКСИМУМ(ПланыПродажПоДнямНедели.Количество) КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|		КОНЕЦ) КАК Цена
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.ТорговаяТочка = ПланыПродажПоДнямНедели.ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата В
	|			(ВЫБРАТЬ
	|				ВТДаты.Дата
	|			ИЗ
	|				ВТДаты)
	|	И ПланыПродажПоДнямНедели.Номенклатура = &Номенклатура
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка В(&СписокТорговыхТочек)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПродажПоДнямНедели.Дата,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДаты.Дата КАК Дата
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДаты";
	
	//+++АК LAGP 2018.02.25 В запросе присутствуют одинаковые строки с разной ценой, регистр сведений не даёт записывать такие строки (цена - реквизит). Добавил группировку для третьего запроса.
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[2];
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Нет данных для копирования!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	мПланыПродажПоДнямНедели = РегистрыСведений.ПланыПродажПоДнямНедели;
	
	ВыборкаДат = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаДат.Следующий() Цикл
		
		ТекДата = ВыборкаДат.Дата;
		
		// запись по новой номенклатуре
		НаборЗаписей = мПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(ТекДата);
		НаборЗаписей.Отбор.Расчетчик.Установить(мРасчетчик);
		НаборЗаписей.Отбор.Номенклатура.Установить(мНоменклатура);
		НаборЗаписей.Прочитать();
		
		ВремТаблица = ТаблицаЗапроса.Скопировать(Новый Структура("Дата", ТекДата));
		Если ВремТаблица.Количество() > 0 Тогда
			НаборЗаписей.Загрузить(ВремТаблица);
		Иначе
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				НаборЗаписей = Неопределено; // обнуление переменной (забота о памяти приложения 1С)
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьПланПродажПоНоменклатуре(Команда)
	
	Если ЭтаФорма.НоменклатураДляКопии.Пустая() Тогда
		Сообщить("Не выбрана номенклатура, копию плана которой необходимо сделать!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.СписокНоменклатуры.НайтиПоЗначению(ЭтаФорма.НоменклатураДляКопии) = Неопределено Тогда
		Сообщить("Выбрана номенклатура, для которой нет плана!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПланыПродажПоНоменклатуре.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерНедели"			, ТекДанные.НомерНедели);
	СтруктураПараметров.Вставить("Расчетчик"			, Объект.Расчетчик);
	СтруктураПараметров.Вставить("Номенклатура"			, ЭтаФорма.НоменклатураДляКопии);
	СтруктураПараметров.Вставить("НоменклатураНовая"	, ТекДанные.Номенклатура);
	СтруктураПараметров.Вставить("СписокТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
	
	КопироватьПланПродажПоНоменклатуреСервер(СтруктураПараметров);
	
	// перерисовка на форме
	ЗаполнитьТаблицыПродаж();
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "РАСПРЕДЕЛЕНИЕ ПО ДНЯМ"

Процедура ЗаполнитьРаспределениеПоДням()
	
	Перем Запрос, ТаблицаЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	МассивГруппУРЗ = Новый Массив;
	Для Каждого ЭлементСписка Из ЭтаФорма.СписокНоменклатуры Цикл
		ТекГруппаУРЗ = ЭлементСписка.Значение.ГруппаНоменклатурыУРЗ;
		Если МассивГруппУРЗ.Найти(ТекГруппаУРЗ) = Неопределено Тогда
			МассивГруппУРЗ.Добавить(ТекГруппаУРЗ);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивГруппУРЗ"		, МассивГруппУРЗ);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	3 КАК ПорядокИерархии,
	|	ВЫБОР
	|		КОГДА РаспределениеПродажПроценты.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА РаспределениеПродажПроценты.Номенклатура.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	РаспределениеПродажПроценты.Номенклатура,
	|	РаспределениеПродажПроценты.ТорговаяТочка,
	|	РаспределениеПродажПроценты.ТорговаяТочка.РасчетПоСоседнимТочкам КАК РасчетПоСоседнимТочкам,
	|	РаспределениеПродажПроценты.ПроцентПонедельник,
	|	РаспределениеПродажПроценты.ПроцентВторник,
	|	РаспределениеПродажПроценты.ПроцентСреда,
	|	РаспределениеПродажПроценты.ПроцентЧетверг,
	|	РаспределениеПродажПроценты.ПроцентПятница,
	|	РаспределениеПродажПроценты.ПроцентСуббота,
	|	РаспределениеПродажПроценты.ПроцентВоскресенье,
	|	РаспределениеПродажПроценты.НомерНедели1,
	|	РаспределениеПродажПроценты.НомерНедели2,
	|	РаспределениеПродажПроценты.НомерНедели3
	|ИЗ
	|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
	|ГДЕ
	|	(РаспределениеПродажПроценты.Номенклатура В (&МассивНоменклатуры)
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура В (&МассивГруппУРЗ)
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = &Расчетчик
	|			ИЛИ РаспределениеПродажПроценты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И РаспределениеПродажПроценты.ТорговаяТочка В(&МассивТорговыхТочек)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеНоменклатуры,
	|	РаспределениеПродажПроценты.ТорговаяТочка.Наименование";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// вывод в таблицу на форме
	ЭтаФорма.РаспределениеПоДням.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

// Добавляет запись в регистр сведений "РаспределениеПродажПоДнямНеделиПроценты" на основании строки таблицы на форме.
//
// Параметры:
// 	СтруктураПараметровСтроки - Структура, значения из строки распределения на форме.
//
Процедура ДобавитьЗаписьВРаспределениеПоДням(СтруктураПараметровСтроки)
	
	Перем ОбработкаОбъект;
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьЗаписьВРегистрСведений("РаспределениеПродажПоДнямНеделиПроценты", СтруктураПараметровСтроки);

	
	ЗаменитьРаспределениеНижнихУровнейЗаписи(СтруктураПараметровСтроки, Ложь);

КонецПроцедуры

// Удаляет запись в регистре сведений "РаспределениеПродажПоДнямНеделиПроценты" на основании строки таблицы на форме.
//
// Параметры:
// 	СтруктураПараметровСтроки - Структура, значения из строки распределения на форме.
//
Процедура УдалитьЗаписьВРаспределенииПоДням(СтруктураПараметровСтроки)
	
	Перем НаборЗаписей, МенеджерЗаписи;
	
	НаборЗаписей = РегистрыСведений.РаспределениеПродажПоДнямНеделиПроценты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметровСтроки.Номенклатура);
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураПараметровСтроки.ТорговаяТочка);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось очистить запись плана продаж по дням недели";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
	ЗаменитьРаспределениеНижнихУровнейЗаписи(СтруктураПараметровСтроки, Истина);

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
Процедура ОтменитьКоэффициентыСервер(НоменклатураВДереве)

	Если НоменклатураВДереве = "<Все>" Тогда
		ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли НоменклатураВДереве = "<" + СокрЛП(Объект.Расчетчик.Наименование) + ">" Тогда
		ТекНоменклатура = Объект.Расчетчик;
	Иначе
		ТекНоменклатура = НоменклатураВДереве;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РаспределениеПродажПроценты.ТорговаяТочка,
		|	РаспределениеПродажПроценты.Номенклатура
		|ИЗ
		|	РегистрСведений.РаспределениеПродажПоДнямНеделиПроценты КАК РаспределениеПродажПроценты
		|ГДЕ
		|	РаспределениеПродажПроценты.ТорговаяТочка В(&МассивТорговыхТочек)
		|	И РаспределениеПродажПроценты.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	
	Если ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.Номенклатура")
	   И НЕ ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		мСписокТорговыхТочек = ДоступныеТорговыеТочки("ПоНоменклатуре", Объект.Расчетчик, ТекНоменклатура);
		
	ИначеЕсли ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.ГруппыНоменклатурыУРЗ") Тогда
		мСписокТорговыхТочек = ДоступныеТорговыеТочки("ПоГруппеНоменклатурыУРЗ", Объект.Расчетчик, ТекНоменклатура);
		
	Иначе
		мСписокТорговыхТочек = СписокТорговыхТочек.ВыгрузитьЗначения();
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивТорговыхТочек", мСписокТорговыхТочек);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// очистка записей в регистре "РаспределениеПродажПоДнямНеделиПроценты"
	МассивИзмерений = Новый Массив();
	МассивИзмерений.Добавить("Номенклатура");
	МассивИзмерений.Добавить("ТорговаяТочка");
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьВРегистрСведений("РаспределениеПродажПоДнямНеделиПроценты", , РезультатЗапроса, МассивИзмерений);

КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(НоменклатураВДереве)

	// Получение данных
	Если ТипЗнч(НоменклатураВДереве) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(, "ПоНоменклатуре", Объект.Расчетчик, НоменклатураВДереве);
		
	ИначеЕсли ТипЗнч(НоменклатураВДереве) = Тип("СправочникСсылка.ГруппыНоменклатурыУРЗ") Тогда
		ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(, "ПоГруппеНоменклатурыУРЗ", Объект.Расчетчик, НоменклатураВДереве);
		
	Иначе
		ДанныеТорговыхТочек = ДанныеДоступныхТорговыхТочек(СписокТорговыхТочек.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	// Заполнение
	Если ТаблицаТорговыхТочекРаспределениеПоДням.Количество() > 0 Тогда
		ТаблицаТорговыхТочекРаспределениеПоДням.Очистить();
	КонецЕсли;
	
	НоваяСтрока = ТаблицаТорговыхТочекРаспределениеПоДням.Добавить();
	НоваяСтрока.ТорговаяТочка = "<Все>";
	
	Для Каждого ДанныеТорговойТочки Из ДанныеТорговыхТочек Цикл
		НоваяСтрока = ТаблицаТорговыхТочекРаспределениеПоДням.Добавить();
		НоваяСтрока.ТорговаяТочка				= ДанныеТорговойТочки.ТорговаяТочка;
		НоваяСтрока.НеУчаствуетВРаспределении	= ДанныеТорговойТочки.НеУчаствуетВРаспределении;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтрокиНаКлиенте()
	
	Перем ТекДанные;
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	ЗаполнитьТаблицуТорговыхТочекРаспределениеПоДням(ТекДанные.Номенклатура);
	УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ДеревоНоменклатурыПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Перем ТекДанныеНоменклатуры, СообщениеПользователю;
	
	ТекДанныеНоменклатуры = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекДанныеНоменклатуры = Неопределено Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не выбрана номенклатура!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямПередУдалением(Элемент, Отказ)

	Перем ТекДанные, СтрокаКолонок, СтруктураПараметровСтроки;
	
	ТекНоменклатура = Элемент.ТекущиеДанные.Номенклатура;
	
	СтрокаКолонок = "Номенклатура, ТорговаяТочка";
	СтруктураПараметровСтроки = Новый Структура(СтрокаКолонок);
	
	ТекВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		
		ТекДанные = ЭтаФорма.РаспределениеПоДням.НайтиПоИдентификатору(СтрокаТаблицы);
		Если ТекДанные.ПорядокИерархии = 0 Тогда // по этим строкам таблицы нет записей в регистре
			Продолжить;
		КонецЕсли;
		
		// очистка записи в регистре сведений "РаспределениеПродажПоДнямНеделиПроценты" по строке
		ЗаполнитьЗначенияСвойств(СтруктураПараметровСтроки, ТекДанные, СтрокаКолонок);
		
		УдалитьЗаписьВРаспределенииПоДням(СтруктураПараметровСтроки);
	КонецЦикла;
	
	УстановитьОтборРаспределенияПоДням(ТекНоменклатура); 
			
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Перем ТекДанные;
	
	Если НоваяСтрока
			И НЕ Копирование Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		ТекДанные.Номенклатура 			= Элементы.ДеревоНоменклатуры.ТекущиеДанные.Номенклатура;
		ТекДанные.ПроцентПонедельник 	= 14;
		ТекДанные.ПроцентВторник 		= 14;
		ТекДанные.ПроцентСреда 			= 14;
		ТекДанные.ПроцентЧетверг 		= 14;
		ТекДанные.ПроцентПятница 		= 14;
		ТекДанные.ПроцентСуббота 		= 15;
		ТекДанные.ПроцентВоскресенье 	= 15;
		ТекДанные.ПорядокИерархии 		= 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
    Перем ТекДанные, СтрокиТаблицы;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТорговаяТочка.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана торговая точка!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	// проверка на дубли
	СтрокиТаблицы = ЭтаФорма.РаспределениеПоДням.НайтиСтроки(
							Новый Структура("ПорядокИерархии, Номенклатура, ТорговаяТочка", 3, ТекДанные.Номенклатура, ТекДанные.ТорговаяТочка));
	Если СтрокиТаблицы.Количество() > 1 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "По данной номенклатуре и торговой точке уже есть распределение!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
    КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Перем ТекДанные, ТекСуммаПроцентов, СтрокаКолонок, СтруктураПараметровСтроки, СтруктураПоиска, МассивСтрок;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСуммаПроцентов = ТекДанные.ПроцентПонедельник +
	 						ТекДанные.ПроцентВторник +
	 						ТекДанные.ПроцентСреда +
	 						ТекДанные.ПроцентЧетверг +
	 						ТекДанные.ПроцентПятница +
	 						ТекДанные.ПроцентСуббота +
	 						ТекДанные.ПроцентВоскресенье;
	Если НЕ ТекСуммаПроцентов = 0 Тогда						
		ТекДанные.ПроцентПонедельник 	= ТекДанные.ПроцентПонедельник 	* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентВторник 		= ТекДанные.ПроцентВторник 		* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентСреда 			= ТекДанные.ПроцентСреда 		* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентЧетверг 		= ТекДанные.ПроцентЧетверг 		* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентПятница 		= ТекДанные.ПроцентПятница 		* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентСуббота 		= ТекДанные.ПроцентСуббота 		* 100 / ТекСуммаПроцентов;
		ТекДанные.ПроцентВоскресенье 	= 100 - ТекДанные.ПроцентПонедельник -
													ТекДанные.ПроцентВторник -
													ТекДанные.ПроцентСреда -
													ТекДанные.ПроцентЧетверг -
													ТекДанные.ПроцентПятница -
													ТекДанные.ПроцентСуббота;
	КонецЕсли;
	
	ТекДанные.ПорядокИерархии = 3; // если редактируем - значит, устанавливаем для текущего уровня
							
	СтрокаКолонок = "Номенклатура, ТорговаяТочка, ПроцентПонедельник, ПроцентВторник, ПроцентСреда, ПроцентЧетверг, ПроцентПятница, ПроцентСуббота, ПроцентВоскресенье, НомерНедели1, НомерНедели2, НомерНедели3";
	СтруктураПараметровСтроки = Новый Структура(СтрокаКолонок);
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура)
			И НЕ ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
		ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураПараметровСтроки, ТекДанные, СтрокаКолонок);
	//СтруктураПараметровСтроки.Вставить("Расчетчик", Объект.Расчетчик);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура"	, ТекДанные.Номенклатура);
	СтруктураПоиска.Вставить("ТорговаяТочка", ТекДанные.ТорговаяТочка);
	
	
	// перезапись в регистр сведений "РаспределениеПродажПоДнямНеделиПроценты" данных строки, для всех строк (торговых точек)
	ДобавитьЗаписьВРаспределениеПоДням(СтруктураПараметровСтроки);
	
	УстановитьОтборРаспределенияПоДням(СтруктураПараметровСтроки.Номенклатура); 
	
	
	МассивСтрок = ЭтаФорма.РаспределениеПоДням.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.РаспределениеПоДням.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДнямТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Перем ФормаВыбора, мСписок;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбора",, Элемент);
	
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = Элементы.РаспределениеПоДням.ТекущиеДанные.ТорговаяТочка;

	мСписок = ФормаВыбора.Список;
	ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ЭтаФорма.СписокТорговыхТочек;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ФормаВыбора.Элементы.ФормаОчиститьОтборы.Доступность = Ложь;
	ФормаВыбора.Открыть();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДатПоНомерамНедель(СтруктураНомеровНедель, ДатаДинамически, ПериодДинамический = Ложь)
	
	МассивНомеровНедель = Новый Массив;
	Если СтруктураНомеровНедель.НомерНедели1 > 0 Тогда
		МассивНомеровНедель.Добавить(СтруктураНомеровНедель.НомерНедели1);
	КонецЕсли;
	Если СтруктураНомеровНедель.НомерНедели2 > 0 Тогда
		МассивНомеровНедель.Добавить(СтруктураНомеровНедель.НомерНедели2);
	КонецЕсли;
	Если СтруктураНомеровНедель.НомерНедели3 > 0 Тогда
		МассивНомеровНедель.Добавить(СтруктураНомеровНедель.НомерНедели3);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомераНедель"	, МассивНомеровНедель);
	Запрос.УстановитьПараметр("ДатаДинамически"	, ДатаДинамически);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоответствиеДатДнямНедели.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели В(&НомераНедель)";
	
	Если НЕ ПериодДинамический Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	И (СоответствиеДатДнямНедели.Дата < &ДатаДинамически
	|		ИЛИ &ДатаДинамически = ДАТАВРЕМЯ(1,1,1))";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
	|	И (НЕ &ДатаДинамически = ДАТАВРЕМЯ(1,1,1))
	|	И НЕ СоответствиеДатДнямНедели.Дата < &ДатаДинамически";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата");
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьМассивДатПоНомерамНедельДин(СтруктураНомеровНедель, ДатаДинамически)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели1"	, СтруктураНомеровНедель.НомерНедели1);
	Запрос.УстановитьПараметр("НомерНедели2"	, СтруктураНомеровНедель.НомерНедели2);
	Запрос.УстановитьПараметр("НомерНедели3"	, СтруктураНомеровНедель.НомерНедели3);
	Запрос.УстановитьПараметр("ДатаДинамически"	, ДатаДинамически);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоответствиеДатДнямНедели.НомерНедели КАК НомерНедели,
	|	МИНИМУМ(СоответствиеДатДнямНедели.Дата) КАК Дата
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	(СоответствиеДатДнямНедели.НомерНедели = &НомерНедели1
	|			ИЛИ СоответствиеДатДнямНедели.НомерНедели = &НомерНедели2
	|			ИЛИ СоответствиеДатДнямНедели.НомерНедели = &НомерНедели3)
	|	И НЕ &ДатаДинамически = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ СоответствиеДатДнямНедели.Дата < &ДатаДинамически
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеДатДнямНедели.НомерНедели";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата");
	
КонецФункции	


Процедура РассчитатьРаспределениеПоДнямНаSQL(Знач ТекНоменклатура, мСписокТорговыхТочек, СтруктураНомеровНедель)
	
	Если ТекНоменклатура = "<Все>" Тогда
		ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли ТекНоменклатура = "<" + СокрЛП(Объект.Расчетчик.Наименование) + ">" Тогда
		Возврат; // по расчетчику на SQL пока не считаем
	КонецЕсли;
	
	//
	Если мСписокТорговыхТочек.Количество() = 0 Тогда
		ВремТаблица = ЭтаФорма.ТаблицаТорговыхТочекРаспределениеПоДням.Выгрузить();
		Если ВремТаблица.Количество() > 0 Тогда
			ВремТаблица.Удалить(ВремТаблица[0]); // удалить строку с "<Все>"
		КонецЕсли;
		мСписокТорговыхТочек.ЗагрузитьЗначения(ВремТаблица.ВыгрузитьКолонку("ТорговаяТочка"));
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////
	// начальное заполнение регистра
	мРегистр = РегистрыСведений.РаспределениеПродажПоДнямНеделиПроценты;
	Для Каждого ЭлементСписка Из мСписокТорговыхТочек Цикл
		
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговаяТочка 	= ЭлементСписка.Значение;
		МенеджерЗаписи.Номенклатура		= ТекНоменклатура;
		
		МенеджерЗаписи.НомерНедели1 = СтруктураНомеровНедель.НомерНедели1;
		МенеджерЗаписи.НомерНедели2 = СтруктураНомеровНедель.НомерНедели2;
		МенеджерЗаписи.НомерНедели3 = СтруктураНомеровНедель.НомерНедели3;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	
	///////////////////////////////////////////////////////////////////////
	ДопМодульСервер.РассчитатьРаспределениеПоДнямПроценты();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРаспределениеПоДням(Команда)

	Перем ТекДанные, ПараметрыФормы, ФормаВыбора, СтруктураНомеровНедель;
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мСписокТорговыхТочек = Новый СписокЗначений;
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекРаспределениеПоДням.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанныеТТ = ЭтаФорма.ТаблицаТорговыхТочекРаспределениеПоДням.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТипЗнч(ТекДанныеТТ.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				мСписокТорговыхТочек.Добавить(ТекДанныеТТ.ТорговаяТочка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// выбор недель для анализа
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаполнятьНижниеУровниРаспределения", Истина);
	
	ФормаВыбора = ПолучитьФорму("Обработка.ПрогнозированиеПродаж.Форма.ФормаВыбораНедельДляАнализа", ПараметрыФормы, ЭтаФорма);
	СтруктураНомеровНедель = ФормаВыбора.ОткрытьМодально();
	Если СтруктураНомеровНедель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	РассчитатьРаспределениеПоДнямНаSQL(ТекДанные.Номенклатура, мСписокТорговыхТочек, СтруктураНомеровНедель);
	
	УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьКоэффициенты(Команда)

	Перем ТекДанные;
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда                  // не выбрана номенклатура
		Возврат;
	КонецЕсли;
	
	
	ОтменитьКоэффициентыСервер(ТекДанные.Номенклатура);
	
	// обновить на форме
	УстановитьОтборРаспределенияПоДням(ТекДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеРаспределенияПриИзменении(Элемент)
	
	Если ЭтаФорма.ОтобразитьВсеРаспределения Тогда
		ЗаполнитьРаспределениеПоДням();
	Иначе
		УстановитьОтборРаспределенияПоДням(Элементы.ДеревоНоменклатуры.ТекущиеДанные.Номенклатура)
	КонецЕсли;
	
	Элементы.РаспределениеПоДнямНоменклатура.Видимость = ЭтаФорма.ОтобразитьВсеРаспределения;
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ТОВАРЫ"

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПроверитьПризнакАналог(мВыделенныеСтроки, мПоАналогам, Отказ)
	
	н = 0;
	ТабФормы = Элементы.ПараметрыНоменклатурыДляЗаказа;
	Для Каждого ТекСтрока Из мВыделенныеСтроки Цикл
		ТекДанные = ТабФормы.ДанныеСтроки(ТекСтрока);
		Если н = 0 Тогда
			мПоАналогам = ТекДанные.ЭтоАналог;
		Иначе
			Если НЕ ТекДанные.ЭтоАналог = мПоАналогам Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		н = н + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПроверитьНоменклатуру(мВыделенныеСтроки, мПоАналогам, Отказ)
	
	н = 0;
	ТабФормы = Элементы.ПараметрыНоменклатурыДляЗаказа;
	ТекНоменклатура 	= Неопределено;
	МассивНоменклатуры 	= Новый Массив;
	Для Каждого ТекСтрока Из мВыделенныеСтроки Цикл
		ТекДанные = ТабФормы.ДанныеСтроки(ТекСтрока);
		Если мПоАналогам Тогда
			Если МассивНоменклатуры.Найти(ТекДанные.Номенклатура) = Неопределено Тогда
				МассивНоменклатуры.Добавить(ТекДанные.Номенклатура);
			КонецЕсли;
		Иначе
			Если н = 0 Тогда
				ТекНоменклатура = ТекДанные.Номенклатура;				
			Иначе
				Если НЕ ТекДанные.Номенклатура = ТекНоменклатура Тогда
					Отказ = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		н = н + 1;
	КонецЦикла;
	
	Если мПоАналогам
			И МассивНоменклатуры.Количество() < 2 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПроверитьПроцентыРМП(мВыделенныеСтроки, мПоАналогам, Отказ)
	
	ТабФормы = Элементы.ПараметрыНоменклатурыДляЗаказа;
	СуммаПроцентов1 = 0;
	СуммаПроцентов2 = 0;
	ТекстСообщения1 = "";
	ТекстСообщения2 = "";
	Для Каждого ТекСтрока Из мВыделенныеСтроки Цикл
		ТекДанные = ТабФормы.ДанныеСтроки(ТекСтрока);
		Если ТекДанные.ПроцентРаспределенияМеждуПоставщиками = 0 Тогда
			Сообщить("В выделенных строках есть нулевой % распределения между поставщиками");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СуммаПроцентов1 = СуммаПроцентов1 + ТекДанные.ПроцентРаспределенияМеждуПоставщиками;
		ТекстСообщения1 = ТекстСообщения1 + ", " + Формат(ТекДанные.ПроцентРаспределенияМеждуПоставщиками, "ЧГ=");
		СуммаПроцентов2 = СуммаПроцентов2 + ТекДанные.ТекПроцентРМП;
		ТекстСообщения2 = ТекстСообщения2 + ", " + Формат(ТекДанные.ТекПроцентРМП, "ЧГ=");
	КонецЦикла;
	Если НЕ ТекстСообщения1 = "" Тогда
		ТекстСообщения1 = Сред(ТекстСообщения1, 3);
	КонецЕсли;
	Если НЕ ТекстСообщения2 = "" Тогда
		ТекстСообщения2 = Сред(ТекстСообщения2, 3);
	КонецЕсли;
	
	Если НЕ СуммаПроцентов1 = СуммаПроцентов2 Тогда
		Сообщить("В выделенных строках не совпадает сумма процентов распределения:" + Символы.ПС +
					" % распределения между поставщиками " + Формат(СуммаПроцентов1, "ЧГ=") + " (" + ТекстСообщения1 + ")," + Символы.ПС +
					"Текущий % рмп " + Формат(СуммаПроцентов2, "ЧГ=") + " (" + ТекстСообщения2 + ")");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьХарактеристикиМеждуПоставщикамиСервер(МассивМеньше, МассивБольше)
	
	обПроцентРМП = 0;
	МассивХарактеристикМеньше = Новый Массив;
	Для Каждого СтруктураСтроки Из МассивМеньше Цикл
		МассивХарактеристикМеньше.Добавить(СтруктураСтроки.Характеристика);
		обПроцентРМП = обПроцентРМП + СтруктураСтроки.ПроцентРаспределенияМеждуПоставщиками;
	КонецЦикла;
	МассивХарактеристикБольше = Новый Массив;
	Для Каждого СтруктураСтроки Из МассивБольше Цикл
		МассивХарактеристикБольше.Добавить(СтруктураСтроки.Характеристика);
		обПроцентРМП = обПроцентРМП + СтруктураСтроки.ПроцентРаспределенияМеждуПоставщиками;
	КонецЦикла;
	
	// торговые точки из товарного ассортимента для каждой из характеристик
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"						, ТекущаяДата());
	Запрос.УстановитьПараметр("ОсновнойСклад"				, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("МассивХарактеристикБольше"	, МассивХарактеристикБольше);
	Запрос.УстановитьПараметр("МассивХарактеристикМеньше"	, МассивХарактеристикМеньше);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			ТорговаяТочка.ОсновнойСклад = &ОсновнойСклад
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика В(&МассивХарактеристикБольше)
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ДатаОткрытия УБЫВ,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(ТорговаяТочка)
	|ПО
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика,
	|	КОЛИЧЕСТВО(ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка) КАК КоличествоТТ
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ТекДата,
	|			ТорговаяТочка.ОсновнойСклад = &ОсновнойСклад
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика В(&МассивХарактеристикМеньше)
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТТМеньше 	= РезультатыЗапроса[1].Выгрузить();
	ТаблицаТТМеньше.Колонки.Добавить("КоличествоТТКУвеличению", Новый ОписаниеТипов("Число"));
	КоличествоТТМеньше  = ТаблицаТТМеньше.Итог("КоличествоТТ");
	
	КоличествоТТБольше = 0;
	ВыборкаПоХарактеристикам = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		КоличествоТТБольше = КоличествоТТБольше + ВыборкаПоХарактеристикам.ТорговаяТочка;
	КонецЦикла;
	ВыборкаПоХарактеристикам.Сбросить();
	
	Для Каждого СтрокаМеньше Из ТаблицаТТМеньше Цикл
		КоличествоТТКИзменениюМеньше = 0;
		Для Каждого СтруктураСтроки Из МассивМеньше Цикл
			Если СтруктураСтроки.Характеристика = СтрокаМеньше.Характеристика Тогда
				мДоляКорректировки = (СтруктураСтроки.ПроцентРаспределенияМеждуПоставщиками - СтруктураСтроки.ТекПроцентРМП) / ?(обПроцентРМП = 0, 100, обПроцентРМП);
				КоличествоТТКИзменениюМеньше = Окр((КоличествоТТБольше + КоличествоТТМеньше) * мДоляКорректировки);
			КонецЕсли;
		КонецЦикла;
		СтрокаМеньше.КоличествоТТКУвеличению = КоличествоТТКИзменениюМеньше;
	КонецЦикла;				
	
	//
	РегСведенийТА = РегистрыСведений.ТоварныйАссортиментТочек;
	
	ВыборкаПоХарактеристикам = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		
		ТекХарактеристика 	= ВыборкаПоХарактеристикам.Характеристика;
		ТекНоменклатура		= Справочники.Номенклатура.ПустаяСсылка();
		
		КоличествоТТКИзменению = 0;
		Для Каждого СтруктураСтроки Из МассивБольше Цикл
			Если СтруктураСтроки.Характеристика = ТекХарактеристика Тогда
				мДоляКорректировки = (СтруктураСтроки.ТекПроцентРМП - СтруктураСтроки.ПроцентРаспределенияМеждуПоставщиками) / ?(обПроцентРМП = 0, 100, обПроцентРМП);
				КоличествоТТКИзменению = Окр((КоличествоТТБольше + КоличествоТТМеньше) * мДоляКорректировки);
				ТекНоменклатура = СтруктураСтроки.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		Если НЕ КоличествоТТКИзменению > 0 Тогда
			Продолжить; // такого быть не должно
		КонецЕсли;
		
		//
		н = 0;
		ВыборкаПоТТ = ВыборкаПоХарактеристикам.Выбрать();
		Пока ВыборкаПоТТ.Следующий() Цикл
			
			н = н + 1;
			Если н > КоличествоТТКИзменению Тогда
				Прервать;
			КонецЕсли;
			
			ТекТорговаяТочка = ВыборкаПоТТ.ТорговаяТочка;
			
			Для Каждого СтрокаМеньше Из ТаблицаТТМеньше Цикл
				
				Если СтрокаМеньше.КоличествоТТКУвеличению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаМеньше.Номенклатура = ТекНоменклатура Тогда
					МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период			= ТекущаяДата();
					МенеджерЗаписи.Номенклатура 	= СтрокаМеньше.Номенклатура;
					МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
					МенеджерЗаписи.Характеристика	= СтрокаМеньше.Характеристика;
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период			= ТекущаяДата();
					МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
					МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
					МенеджерЗаписи.Характеристика	= ТекХарактеристика;
					МенеджерЗаписи.Выведена			= Истина;
					Попытка
						МенеджерЗаписи.Записать();
						
						МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период			= ТекущаяДата();
						МенеджерЗаписи.Номенклатура 	= СтрокаМеньше.Номенклатура;
						МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
						МенеджерЗаписи.Характеристика	= СтрокаМеньше.Характеристика;
						МенеджерЗаписи.Записать();					
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				СтрокаМеньше.КоличествоТТКУвеличению = СтрокаМеньше.КоличествоТТКУвеличению - 1;
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЦикла;
	//
	//мСуммаПроцентов = СтруктураПараметров.ПроцентРМП1 + СтруктураПараметров.ПроцентРМП2; // в основном = 100
	//мДоляКорректировки = (СтруктураПараметров.ПроцентРМП1 - СтруктураПараметров.ПроцентРМПРасч1) / мСуммаПроцентов;
	//
	//ТаблицаТТ1 = РезультатыЗапроса[0].Выгрузить();
	//КоличествоТТ1  = ТаблицаТТ1.Количество();
	//
	//ТаблицаТТ2 = РезультатыЗапроса[1].Выгрузить();
	//КоличествоТТ2  = ТаблицаТТ2.Количество();
	//
	//КоличествоТТКИзменению = Окр((КоличествоТТ1 + КоличествоТТ2) * мДоляКорректировки);
	//
	//Если КоличествоТТКИзменению < 0 Тогда
	//	
	//	Если КоличествоТТ1 = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	КоличествоТТКИзменению = - КоличествоТТКИзменению;
	//	КоличествоТТКИзменению = Мин(КоличествоТТ1, КоличествоТТКИзменению);
	//	
	//	// из товарного ассортимента первой характеристики/номенклатуры необходимо вывести позиции из первых (самых новых) ТТ в количестве (-КоличествоТТКИзменению)
	//	// и ввести в товарный ассортимент второй характеристики/номенклатуры эти торговые точки
	//	РегСведенийТА = РегистрыСведений.ТоварныйАссортиментТочек;
	//	н = 0;
	//	Для Каждого СтрокаТаблицы Из ТаблицаТТ1 Цикл
	//		н = н + 1;
	//		Если н > КоличествоТТКИзменению Тогда
	//			Прервать;
	//		КонецЕсли;
	//		Если НЕ мПоАналогам Тогда
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= ТекХарактеристика2;
	//			МенеджерЗаписи.Записать();
	//		Иначе
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= СтрокаТаблицы.Характеристика;
	//			МенеджерЗаписи.Выведена			= Истина;
	//			Попытка
	//				МенеджерЗаписи.Записать();
	//				
	//				МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//				МенеджерЗаписи.Период			= ТекущаяДата();
	//				МенеджерЗаписи.Номенклатура 	= ТекНоменклатура2;
	//				МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//				МенеджерЗаписи.Характеристика	= ТекХарактеристика2;
	//				МенеджерЗаписи.Записать();					
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//ИначеЕсли КоличествоТТКИзменению > 0 Тогда
	//	
	//	Если КоличествоТТ2 = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	КоличествоТТКИзменению = Мин(КоличествоТТ2, КоличествоТТКИзменению);
	//	
	//	// из товарного ассортимента второй характеристики/номенклатуры необходимо вывести позиции из первых (самых новых) ТТ в количестве КоличествоТТКИзменению
	//	// и ввести в товарный ассортимент первой характеристики/номенклатуры эти торговые точки
	//	РегСведенийТА = РегистрыСведений.ТоварныйАссортиментТочек;
	//	н = 0;
	//	Для Каждого СтрокаТаблицы Из ТаблицаТТ2 Цикл
	//		н = н + 1;
	//		Если н > КоличествоТТКИзменению Тогда
	//			Прервать;
	//		КонецЕсли;
	//		Если НЕ мПоАналогам Тогда
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= ТекХарактеристика1;
	//			МенеджерЗаписи.Записать();
	//		Иначе
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура2;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= СтрокаТаблицы.Характеристика;
	//			МенеджерЗаписи.Выведена			= Истина;
	//			Попытка
	//				МенеджерЗаписи.Записать();
	//				
	//				МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//				МенеджерЗаписи.Период			= ТекущаяДата();
	//				МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//				МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//				МенеджерЗаписи.Характеристика	= ТекХарактеристика1;
	//				МенеджерЗаписи.Записать();					
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//мПоАналогам 		= СтруктураПараметров.ПоАналогам;
	//ТекНоменклатура1 	= СтруктураПараметров.Номенклатура1;
	//ТекНоменклатура2 	= СтруктураПараметров.Номенклатура2;
	//ТекХарактеристика1 	= СтруктураПараметров.Характеристика1;
	//ТекХарактеристика2 	= СтруктураПараметров.Характеристика2;
	
	//// торговые точки из товарного ассортимента для каждой из характеристик
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
	//Если НЕ мПоАналогам Тогда
	//	Запрос.УстановитьПараметр("Номенклатура"	, ТекНоменклатура1);
	//	Запрос.УстановитьПараметр("Характеристика1"	, ТекХарактеристика1);
	//	Запрос.УстановитьПараметр("Характеристика2"	, ТекХарактеристика2);
	//	
	//	Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	//	|ИЗ
	//	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//	|			&ТекДата,
	//	|			Номенклатура = &Номенклатура
	//	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	//	|ГДЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика1
	//	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ДатаОткрытия УБЫВ,
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки УБЫВ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	//	|ИЗ
	//	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//	|			&ТекДата,
	//	|			Номенклатура = &Номенклатура
	//	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	//	|ГДЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика = &Характеристика2
	//	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ДатаОткрытия УБЫВ,
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки УБЫВ";
	//Иначе
	//	Запрос.УстановитьПараметр("Номенклатура1"	, ТекНоменклатура1);
	//	Запрос.УстановитьПараметр("Номенклатура2"	, ТекНоменклатура2);
	//	Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	//	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	//	|ИЗ
	//	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//	|			&ТекДата,
	//	|			Номенклатура = &Номенклатура1
	//	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	//	|ГДЕ
	//	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ДатаОткрытия УБЫВ,
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки УБЫВ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	//	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	//	|ИЗ
	//	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//	|			&ТекДата,
	//	|			Номенклатура = &Номенклатура2
	//	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И ТорговаяТочка.Активное) КАК ТоварныйАссортиментТочекСрезПоследних
	//	|ГДЕ
	//	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.ДатаОткрытия УБЫВ,
	//	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.НомерТочки УБЫВ";
	//КонецЕсли;
	//РезультатыЗапроса = Запрос.ВыполнитьПакет();
	//
	////
	//мСуммаПроцентов = СтруктураПараметров.ПроцентРМП1 + СтруктураПараметров.ПроцентРМП2; // в основном = 100
	//мДоляКорректировки = (СтруктураПараметров.ПроцентРМП1 - СтруктураПараметров.ПроцентРМПРасч1) / мСуммаПроцентов;
	//
	//ТаблицаТТ1 = РезультатыЗапроса[0].Выгрузить();
	//КоличествоТТ1  = ТаблицаТТ1.Количество();
	//
	//ТаблицаТТ2 = РезультатыЗапроса[1].Выгрузить();
	//КоличествоТТ2  = ТаблицаТТ2.Количество();
	//
	//КоличествоТТКИзменению = Окр((КоличествоТТ1 + КоличествоТТ2) * мДоляКорректировки);
	//
	//Если КоличествоТТКИзменению < 0 Тогда
	//	
	//	Если КоличествоТТ1 = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	КоличествоТТКИзменению = - КоличествоТТКИзменению;
	//	КоличествоТТКИзменению = Мин(КоличествоТТ1, КоличествоТТКИзменению);
	//	
	//	// из товарного ассортимента первой характеристики/номенклатуры необходимо вывести позиции из первых (самых новых) ТТ в количестве (-КоличествоТТКИзменению)
	//	// и ввести в товарный ассортимент второй характеристики/номенклатуры эти торговые точки
	//	РегСведенийТА = РегистрыСведений.ТоварныйАссортиментТочек;
	//	н = 0;
	//	Для Каждого СтрокаТаблицы Из ТаблицаТТ1 Цикл
	//		н = н + 1;
	//		Если н > КоличествоТТКИзменению Тогда
	//			Прервать;
	//		КонецЕсли;
	//		Если НЕ мПоАналогам Тогда
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= ТекХарактеристика2;
	//			МенеджерЗаписи.Записать();
	//		Иначе
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= СтрокаТаблицы.Характеристика;
	//			МенеджерЗаписи.Выведена			= Истина;
	//			Попытка
	//				МенеджерЗаписи.Записать();
	//				
	//				МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//				МенеджерЗаписи.Период			= ТекущаяДата();
	//				МенеджерЗаписи.Номенклатура 	= ТекНоменклатура2;
	//				МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//				МенеджерЗаписи.Характеристика	= ТекХарактеристика2;
	//				МенеджерЗаписи.Записать();					
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//ИначеЕсли КоличествоТТКИзменению > 0 Тогда
	//	
	//	Если КоличествоТТ2 = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	КоличествоТТКИзменению = Мин(КоличествоТТ2, КоличествоТТКИзменению);
	//	
	//	// из товарного ассортимента второй характеристики/номенклатуры необходимо вывести позиции из первых (самых новых) ТТ в количестве КоличествоТТКИзменению
	//	// и ввести в товарный ассортимент первой характеристики/номенклатуры эти торговые точки
	//	РегСведенийТА = РегистрыСведений.ТоварныйАссортиментТочек;
	//	н = 0;
	//	Для Каждого СтрокаТаблицы Из ТаблицаТТ2 Цикл
	//		н = н + 1;
	//		Если н > КоличествоТТКИзменению Тогда
	//			Прервать;
	//		КонецЕсли;
	//		Если НЕ мПоАналогам Тогда
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= ТекХарактеристика1;
	//			МенеджерЗаписи.Записать();
	//		Иначе
	//			МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//			МенеджерЗаписи.Период			= ТекущаяДата();
	//			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура2;
	//			МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//			МенеджерЗаписи.Характеристика	= СтрокаТаблицы.Характеристика;
	//			МенеджерЗаписи.Выведена			= Истина;
	//			Попытка
	//				МенеджерЗаписи.Записать();
	//				
	//				МенеджерЗаписи = РегСведенийТА.СоздатьМенеджерЗаписи();
	//				МенеджерЗаписи.Период			= ТекущаяДата();
	//				МенеджерЗаписи.Номенклатура 	= ТекНоменклатура1;
	//				МенеджерЗаписи.ТорговаяТочка 	= СтрокаТаблицы.ТорговаяТочка;
	//				МенеджерЗаписи.Характеристика	= ТекХарактеристика1;
	//				МенеджерЗаписи.Записать();					
	//			Исключение
	//			КонецПопытки;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьХарактеристикиМеждуПоставщиками(Команда)
	ТабФормы = Элементы.ПараметрыНоменклатурыДляЗаказа;
	
	ТекВыделенныеСтроки = ТабФормы.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() < 2 Тогда
		Сообщить("Необходимо выделить не менее 2 строк");
		Возврат;
	КонецЕсли;
	
	Отказ 		= Ложь;
	мПоАналогам = Ложь;
	ПараметрыНоменклатурыДляЗаказаПроверитьПризнакАналог(ТекВыделенныеСтроки, мПоАналогам, Отказ);
	Если Отказ Тогда
		Сообщить("Необходимо выделить строки с одинаковым признаком ""Аналог""");
		Возврат;
	КонецЕсли;
	
	//++АК luza 
	//встречается 2 вида аналогов - полностью взаимозаменяемых товаров, которые не могут соять на одной полке. 
	//1 вид - одинаковая номенклатура - но разная характеристика. Как было на примере ниже с вареньем.  (% разделила все получилось)
	//2 вид - разная номенклатура и разная характеристика. Их тоже нужно делить по магазинам. А в этом случае выдает ошибку. 
	// Сделать проверку на аналоги для 2 вида и если они таковыми являются распределить%  
	//  Разрешить распределять распределять разные номенклатуры если они являются аналогами
	МассивНоменлатуры = Новый Массив;		
	ТабФормы = Элементы.ПараметрыНоменклатурыДляЗаказа;	

	Для Каждого ТекСтрока Из ТекВыделенныеСтроки Цикл		
		ТекДанные = ТабФормы.ДанныеСтроки(ТекСтрока);
		Если МассивНоменлатуры.Найти(ТекДанные.Номенклатура) = Неопределено Тогда 
			МассивНоменлатуры.Добавить(ТекДанные.Номенклатура);
		КонецЕсли;	
	КонецЦикла;		
 
	Если мПоАналогам = Истина И МассивНоменлатуры.Количество() > 1 Тогда 		
		ПроверитьРазнуюНоменклатуруПоАналогамСервер(МассивНоменлатуры, Отказ);				
		Если Отказ = Истина Тогда
			Сообщить("Выделенная номенклатура принадлежит к разным аналогам ");
			Возврат;
		КонецЕсли;			
	ИначеЕсли мПоАналогам = Истина И МассивНоменлатуры.Количество() = 1 Тогда 	
		Отказ = Ложь;
	ИначеЕсли мПоАналогам = Ложь Тогда
		ПараметрыНоменклатурыДляЗаказаПроверитьНоменклатуру(ТекВыделенныеСтроки, мПоАналогам, Отказ);
	КонецЕсли;	
	//--АК luza
	
	
	Если Отказ Тогда	
		Сообщить("Необходимо выделить строки с " + ?(мПоАналогам, "не", "") + "одинаковым товаром");
		Возврат;
	КонецЕсли;
	ПараметрыНоменклатурыДляЗаказаПроверитьПроцентыРМП(ТекВыделенныеСтроки, мПоАналогам, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//ТекПерваяСтрока = Элементы.ПараметрыНоменклатурыДляЗаказа.ДанныеСтроки(ТекВыделенныеСтроки[0]);
	//ТекВтораяСтрока = Элементы.ПараметрыНоменклатурыДляЗаказа.ДанныеСтроки(ТекВыделенныеСтроки[1]);
	//Если НЕ ТекПерваяСтрока.ЭтоАналог = ТекВтораяСтрока.ЭтоАналог Тогда
	//	Сообщить("Необходимо выделить 2 строки с одинаковым признаком ""Аналог""");
	//	Возврат;
	//КонецЕсли;
	//мПоАналогам = ТекПерваяСтрока.ЭтоАналог;
	//Если (мПоАналогам = Ложь
	//			И НЕ ТекПерваяСтрока.Номенклатура = ТекВтораяСтрока.Номенклатура)
	//		ИЛИ (мПоАналогам
	//				И ТекПерваяСтрока.Номенклатура = ТекВтораяСтрока.Номенклатура) Тогда
	//	Сообщить("Необходимо выделить 2 строки с " + ?(мПоАналогам, "не", "") + "одинаковым товаром");
	//	Возврат;
	//КонецЕсли;
	//Если ТекПерваяСтрока.ПроцентРаспределенияМеждуПоставщиками = 0
	//		ИЛИ ТекВтораяСтрока.ПроцентРаспределенияМеждуПоставщиками = 0 Тогда
	//	Сообщить("В выделенных строках есть нулевой % распределения между поставщиками");
	//	Возврат;
	//КонецЕсли;
	//Если НЕ (ТекПерваяСтрока.ПроцентРаспределенияМеждуПоставщиками + ТекВтораяСтрока.ПроцентРаспределенияМеждуПоставщиками =
	//			ТекПерваяСтрока.ТекПроцентРМП + ТекВтораяСтрока.ТекПроцентРМП) Тогда
	//	Сообщить("В выделенных строках не совпадает сумма процентов распределения");
	//	Возврат;
	//КонецЕсли;
	
	//
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ПоАналогам"		, мПоАналогам);
	//СтруктураПараметров.Вставить("Номенклатура1"	, ТекПерваяСтрока.Номенклатура);
	//СтруктураПараметров.Вставить("Номенклатура2"	, ТекВтораяСтрока.Номенклатура);
	//СтруктураПараметров.Вставить("Характеристика1"	, ТекПерваяСтрока.Характеристика);
	//СтруктураПараметров.Вставить("Характеристика2"	, ТекВтораяСтрока.Характеристика);
	//СтруктураПараметров.Вставить("ПроцентРМП1"		, ТекПерваяСтрока.ПроцентРаспределенияМеждуПоставщиками);
	//СтруктураПараметров.Вставить("ПроцентРМП2"		, ТекВтораяСтрока.ПроцентРаспределенияМеждуПоставщиками);
	//СтруктураПараметров.Вставить("ПроцентРМПРасч1"	, ТекПерваяСтрока.ТекПроцентРМП);
	//СтруктураПараметров.Вставить("ПроцентРМПРасч2"	, ТекВтораяСтрока.ТекПроцентРМП);
	МассивМеньше = Новый Массив;
	МассивБольше = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ТекВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабФормы.ДанныеСтроки(ВыделеннаяСтрока);
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура"							, СтрокаТаблицы.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика"						, СтрокаТаблицы.Характеристика);
		СтруктураСтроки.Вставить("ТекПроцентРМП"						, СтрокаТаблицы.ТекПроцентРМП);
		СтруктураСтроки.Вставить("ПроцентРаспределенияМеждуПоставщиками", СтрокаТаблицы.ПроцентРаспределенияМеждуПоставщиками);
		Если СтрокаТаблицы.ТекПроцентРМП < СтрокаТаблицы.ПроцентРаспределенияМеждуПоставщиками Тогда
			МассивМеньше.Добавить(СтруктураСтроки);
		ИначеЕсли СтрокаТаблицы.ТекПроцентРМП > СтрокаТаблицы.ПроцентРаспределенияМеждуПоставщиками Тогда
			МассивБольше.Добавить(СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
	
	//РаспределитьХарактеристикиМеждуПоставщикамиСервер(СтруктураПараметров);
	РаспределитьХарактеристикиМеждуПоставщикамиСервер(МассивМеньше, МассивБольше);
	
	//
	ОбновитьСтрокиНоменклатурыДляЗаказа();
	Элементы.ПараметрыНоменклатурыДляЗаказа.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Перем ФормаВыбора, ОтборПоСсылке;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Элементы.ПараметрыНоменклатурыДляЗаказа.ТекущиеДанные.Номенклатура;
	
	мОтбор = ФормаВыбора.Отбор.Ссылка;
    мОтбор.ВидСравнения 	= ВидСравнения.ВСпискеПоИерархии;
    мОтбор.Использование 	= Истина;
    мОтбор.Значение 		= ЭтаФорма.СписокНоменклатуры;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ПРОИЗВОДИТЕЛИ ТОВАРОВ"

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикуНоменклатуры(мПроизводитель, мНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Производитель"	, мПроизводитель);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПроизводителиТоваров.Объект КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|ГДЕ
	|	ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
	|	И (ВЫРАЗИТЬ(ПроизводителиТоваров.Значение КАК Справочник.Контрагенты)) = &Производитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикаНоменклатуры;
	
КонецФункции

Функция СоздатьХарактеристикуНоменклатуры(мПоставщик, мНоменклатура)
	
	ОбъектСправочника = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	ОбъектСправочника.ИД 			= мПоставщик.ИД;
	ОбъектСправочника.Владелец 		= мНоменклатура;
	ОбъектСправочника.Наименование 	= СокрЛП(мПоставщик.Наименование);
	
	Попытка
		ОбъектСправочника.Записать();
		
		МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект 	= ОбъектСправочника.Ссылка;
		МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Производитель;
		МенеджерЗаписи.Значение = мПоставщик;
		МенеджерЗаписи.Записать();

	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
КонецФункции

Процедура УдалитьЗначениеСвойстваКоличествоВУпаковке(мХарактеристика)
	
	Если мХарактеристика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(мХарактеристика);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		НаборЗаписей.Очистить();
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""Значения свойств объектов""";
			СообщениеПользователю.Сообщить();
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЗначениеСвойстваКоличествоВУпаковке(мХарактеристика, мКоличество)
	
	Если мХарактеристика = Неопределено Тогда   // на всякий случай
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект 	= мХарактеристика;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке;
	МенеджерЗаписи.Значение = мКоличество;
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковПриАктивизацииСтрокиНаКлиенте()
	
	Перем СтруктураОтбора;
	
	СтруктураОтбора = Новый Структура("Поставщик", Элементы.ДеревоПоставщиков.ТекущиеДанные.Поставщик);
	Элементы.УсловияПоставкиТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ДеревоПоставщиковПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Перем ТекДанные;
	
	ТекДанные = Элементы.ДеревоПоставщиков.ТекущиеДанные;
	Если ТекДанные = Неопределено ТОгда
		Сообщить("Необходимо выбрать поставщика!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПередНачаломИзменения(Элемент, Отказ)
	
	Перем ТекДанные;
	
	ТекДанныеПоставщика = Элементы.ДеревоПоставщиков.ТекущиеДанные;
	Если ТекДанныеПоставщика = Неопределено ТОгда
		Сообщить("Необходимо выбрать поставщика!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекДанныеПоставщика.Поставщик, Элемент.ТекущиеДанные.Номенклатура);
	УдалитьЗначениеСвойстваКоличествоВУпаковке(мХарактеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПередУдалением(Элемент, Отказ)
	
	Перем ТекДанные;
	
	ТекДанныеПоставщика = Элементы.ДеревоПоставщиков.ТекущиеДанные;
	Если ТекДанныеПоставщика = Неопределено ТОгда
		Сообщить("Необходимо выбрать поставщика!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекДанныеПоставщика.Поставщик, Элемент.ТекущиеДанные.Номенклатура);
	УдалитьЗначениеСвойстваКоличествоВУпаковке(мХарактеристика);	
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Перем ТекДанные;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.КоличествоВКоробке = 0 Тогда
		Сообщить("Количество в коробке не указано!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекПоставщик 	= Элементы.ДеревоПоставщиков.ТекущиеДанные.Поставщик;
	ТекНоменклатура = ТекДанные.Номенклатура;
	
	мХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекПоставщик, ТекНоменклатура);
	Если мХарактеристика = Неопределено Тогда
		Если Вопрос("Не найдена характеристика (поставщик " + СокрЛП(ТекПоставщик) + "). Создать новую?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СоздатьХарактеристикуНоменклатуры(ТекПоставщик, ТекНоменклатура);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Если ОтменаРедактирования Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТекПоставщик = Элементы.ДеревоПоставщиков.ТекущиеДанные.Поставщик;
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекНоменклатура = ТекДанные.Номенклатура;
	
	мХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекПоставщик, ТекНоменклатура);
	ЗаписатьЗначениеСвойстваКоличествоВУпаковке(мХарактеристика, ТекДанные.КоличествоВКоробке);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровПослеУдаления(Элемент)

	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиТоваровНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Перем СписокНоменклатуры, ФормаВыбора, ОтборПоСсылке;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",, Элемент);
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = Элементы.УсловияПоставкиТоваров.ТекущиеДанные.Номенклатура;

	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ЭтаФорма.СписокНоменклатуры;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Товарный ассортимент"

&НаКлиенте
Процедура УстановитьОтборТоварногоАссортимента()
	
	Перем СписокТТ, ТекВыделенныеСтроки, ТекДанные;
	
	ТекДанныеНом 	= Элементы.ДеревоТоваровТоварныйАссортиментТочек.ТекущиеДанные;
	ТекДанныеТТ 	= Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ТекущиеДанные;
	Если ТекДанныеНом = Неопределено
			И ТекДанныеТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		СписокТТ = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				СписокТТ = ЭтаФорма.СписокТорговыхТочек;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокТТ = ЭтаФорма.СписокТорговыхТочек;
	КонецЕсли;
	
	ТекНоменклатура = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Номенклатура, Неопределено);
	
	
	УстановитьОтборТоварныйАссортиментТочек(СписокТТ, ТекНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТоваровТоварныйАссортиментТочекПриАктивизацииСтроки(Элемент)
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборТоварногоАссортимента", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекТоварныйАссортиментПриАктивизацииСтроки(Элемент)
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборТоварногоАссортимента", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыведенныйТоварныйАссортиментПриИзменении(Элемент)
	
	УстановитьОтборПоказыватьВыведенныйТоварныйАссортиментТочек();
	
	Элементы.ТоварныйАссортиментТочекКнопкаЗапретитьПозиции.Видимость 	= ЭтаФорма.ПоказыватьВыведенныйТоварныйАссортимент;
	Элементы.ТоварныйАссортиментТочекКнопкаСнятьЗапретПозиции.Видимость = ЭтаФорма.ПоказыватьВыведенныйТоварныйАссортимент;
	Элементы.ТоварныйАссортиментТочекЗапрещена.Видимость 				= ЭтаФорма.ПоказыватьВыведенныйТоварныйАссортимент;
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДобавитьАссортиментСервер(мМассивНом, мТорговаяТочка, мДата, мРасчетчик)
	
	НачДата 			= НачалоДня(ТекущаяДата());
	РегТовАссортимент 	= РегистрыСведений.ТоварныйАссортиментТочек;
	РегПланыПродаж		= РегистрыСведений.ПланыПродажПоДнямНедели;
	ТекПользователь 	= ПараметрыСеанса.ТекущийПользователь;
	
	РезультатыЗапроса = ДопМодульСервер.ПолучитьТаблицыДляНовыхХарактеристикАссортимента(мДата);
	ТабСамыеЧастыеХарки = РезультатыЗапроса[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = РезультатыЗапроса[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	ПрошлыеПланы 	= ДопМодульСервер.ПолучитьПланыПродажЗаПрошлуюНеделю(мТорговаяТочка, мМассивНом, мДата);
	СтруктураПланы 	= Новый Структура("ДеньНеделиДаты, Номенклатура");
	мТаблицаЦен 	= ПолучитьЦеныНоменклатурыДляПлановПродаж(мТорговаяТочка, мМассивНом, НачДата);
	
	Для Каждого ТекНоменклатура Из мМассивНом Цикл
		
		МенеджерЗаписи = РегТовАссортимент.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= мДата;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Сообщить("На " + Формат(мДата, "ДФ=dd.MM.yy") + " уже есть запись для " + СокрЛП(мТорговаяТочка) +
						" с позицией " + СокрЛП(ТекНоменклатура) + "!");
			МенеджерЗаписи = Неопределено;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.Период 			= мДата;
		МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		
		СтрокаСклад = ТабСкладыМагазинов.Найти(мТорговаяТочка, "ТорговаяТочка");
		ТабПоТоварам = Новый ТаблицаЗначений();
		ТабПоТоварам.Колонки.Добавить("Харка");
		ТабПоТоварам.Колонки.Добавить("Колво");
		СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаСклад.ОсновнойСклад, ТекНоменклатура));
		Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
			СтрокаДоб = ТабПоТоварам.Добавить();
			СтрокаДоб.Харка = СтрокаХар.Характеристика;
			СтрокаДоб.Колво = СтрокаХар.Колво;
		КонецЦикла;
		ТабПоТоварам.Сортировать("Колво убыв");
		Если ТабПоТоварам.Количество() > 0 Тогда
			МенеджерЗаписи.Характеристика = ТабПоТоварам[0].Харка;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
		МенеджерЗаписи.Автор				= ТекПользователь;
		
		Попытка
		    МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		// для новой позиции - план наперед
		Для н = 1 по 7 Цикл
			
			ТекДата = НачДата + (н - 1) * 86400;
			
			МенеджерЗаписи = РегПланыПродаж.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи = Неопределено;
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			
			СтруктураПланы.ДеньНеделиДаты 	= ДеньНедели(мДата);
			СтруктураПланы.Номенклатура 	= ТекНоменклатура;
			СтрокиПланов = ПрошлыеПланы.НайтиСтроки(СтруктураПланы);
			Если СтрокиПланов.Количество() > 0 Тогда
				МенеджерЗаписи.Количество 	= СтрокиПланов[0].Количество;
			Иначе
				МенеджерЗаписи.Количество 	= ?(НЕ ТекНоменклатура.Весовой, 1, 0.2);
			КонецЕсли;
			
			СтрокаТаблицы = мТаблицаЦен.Найти(ТекНоменклатура, "Номенклатура");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				МенеджерЗаписи.Цена 		= СтрокаТаблицы.Цена;
			КонецЕсли;
			МенеджерЗаписи.Склад 			= мРасчетчик.Склад;
			Попытка
			    МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварныйАссортиментТочекДобавить(Команда)
	
	ТекДанныеТТ = Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ТекущиеДанные;
	ПоВсемТТ = Ложь;
	Если ТекДанныеТТ = Неопределено Тогда
		ПоВсемТТ = Истина;
	Иначе
		Если НЕ ТипЗнч(ТекДанныеТТ.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПоВсемТТ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПоВсемТТ Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
    КонецЕсли;


	ТекДанныеНом = Элементы.ДеревоТоваровТоварныйАссортиментТочек.ТекущиеДанные;
	ПоВсемНом = Ложь;
	Если ТекДанныеНом = Неопределено Тогда
		ПоВсемНом = Истина;
	Иначе
		Если НЕ ТипЗнч(ТекДанныеНом.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПоВсемНом = Истина;
		КонецЕсли;
	КонецЕсли;
	мМассивНом = Новый Массив;
	Если ПоВсемНом Тогда
		Если Вопрос("Не выбран товар. В ассортимент будут добавлены все товары. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ЭлементСписка Из ЭтаФорма.СписокНоменклатуры Цикл
			ТекНоменклатура = ЭлементСписка.Значение;
			Если НоменклатураГоднаДляДобавленияВАссортимент(ТекНоменклатура) Тогда
				мМассивНом.Добавить(ТекНоменклатура);
			КонецЕсли;
		КонецЦикла;
		//мМассивНом = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
	Иначе
		Если НоменклатураГоднаДляДобавленияВАссортимент(ТекДанныеНом.Номенклатура) Тогда
			мМассивНом.Добавить(ТекДанныеНом.Номенклатура);
		КонецЕсли;
   	КонецЕсли;

	
	ДобавитьАссортиментСервер(мМассивНом, ТекДанныеТТ.ТорговаяТочка, ЭтаФорма.ДатаАссортимента, Объект.Расчетчик);
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьТоварныйАссортиментВДругуюТТ(мТорговаяТочкаОткуда, мТорговаяТочкаКуда, мМассивНом, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, мДата);
	Запрос.УстановитьПараметр("ТорговаяТочкаОткуда"	, мТорговаяТочкаОткуда);
	Запрос.УстановитьПараметр("ТорговаяТочкаКуда"	, мТорговаяТочкаКуда);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, мМассивНом);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка = &ТорговаяТочкаОткуда
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена,
	|	ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка = &ТорговаяТочкаКуда
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ТоварныйАссортиментТочекСрезПоследних";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка 		= РезультатыЗапроса[0].Выбрать();
	ТаблицаКуда		= РезультатыЗапроса[1].Выгрузить();
	//отдельными наборами, чтобы не менять код регистра 
	//+++ziga 25.10.2017
	//НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
		//---ziga
	Пока Выборка.Следующий() Цикл
	//+++ziga 25.10.2017
		НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	//---ziga 25.10.2017 
		НайденнаяСтрока = ТаблицаКуда.Найти(Выборка.Номенклатура, "Номенклатура");
		Если (НЕ НайденнаяСтрока = Неопределено)
				И (((НайденнаяСтрока.Запрещена
							ИЛИ НЕ НайденнаяСтрока.Выведена)
						И НайденнаяСтрока.Характеристика = Выборка.Характеристика)
					ИЛИ НайденнаяСтрока.Период = мДата) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Ложь;
		НоваяЗапись.Номенклатура	= Выборка.Номенклатура;
		НоваяЗапись.Период			= мДата;
		НоваяЗапись.ТорговаяТочка	= мТорговаяТочкаКуда;
		НоваяЗапись.Характеристика	= Выборка.Характеристика;
		// не понятно условие выше, запрещенные попадают в набор в общей группе, поэтому пойдут отдельными записями
	//+++ziga 25.10.2017
		Если НаборЗаписей.Количество() > 0 Тогда
			Попытка
				НаборЗаписей.Записать(Ложь);
				Сообщить("Товарный ассортимент скопирован.");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	//---ziga 25.10.2017
	КонецЦикла;	
	
	//Если НаборЗаписей.Количество() > 0 Тогда
	//	Попытка
	//		НаборЗаписей.Записать(Ложь);
	//		Сообщить("Товарный ассортимент скопирован.");
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьВДругуюТТ(Команда)
	
	ТекДанныеТТ = Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ТекущиеДанные;
	Если ТекДанныеТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТорговаяТочкаОткуда = ТекДанныеТТ.ТорговаяТочка;
	Если НЕ ТипЗнч(мТорговаяТочкаОткуда) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Сообщить("Не выбрана торговая точка, ассортимент которой будет скопирован");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Будет скопирован весь ассортимент торговой точки """ + мТорговаяТочкаОткуда +
					""". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора");
	
	мТорговаяТочкаКуда = ФормаВыбора.ОткрытьМодально();
	Если ЭтаФорма.СписокТорговыхТочек.НайтиПоЗначению(мТорговаяТочкаКуда) = Неопределено Тогда // временно отбойник
		Возврат;
	КонецЕсли;
	
	мМассив = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
	
	СкопироватьТоварныйАссортиментВДругуюТТ(мТорговаяТочкаОткуда, мТорговаяТочкаКуда, мМассив, ЭтаФорма.ДатаАссортимента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныйАссортиментТочекСкопироватьПоОбразцуСервер(мТорговаяТочка, мМассивСтрокТА, мМассивОстальныхТТ, мДата, СМатрицей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, мДата);
	Запрос.УстановитьПараметр("МассивОстальныхТТ"	, мМассивОстальныхТТ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена,
	|	ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаСреза, ТорговаяТочка В (&МассивОстальныхТТ)) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	(ТоварныйАссортиментТочекСрезПоследних.ИзПотерянных
	|			ИЛИ НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена)
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена";
	
	ТаблицаТАОстальныхТТ = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("ТорговаяТочка, Номенклатура");
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для Каждого ТекТТ Из мМассивОстальныхТТ Цикл
		
		СтруктураОтбора.ТорговаяТочка = ТекТТ;
		Для Каждого СтрокаНоменклатуры Из мМассивСтрокТА Цикл
		
			СтруктураОтбора.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			НайденныеСтроки = ТаблицаТАОстальныхТТ.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Если ((НайденнаяСтрока.Запрещена
								ИЛИ НЕ НайденнаяСтрока.Выведена)
							И НайденнаяСтрока.Характеристика = СтрокаНоменклатуры.Характеристика)
						ИЛИ НайденнаяСтрока.Период = мДата Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СМатрицей Тогда // менять характеристики только у номенклатуры, уже находящейся в тов. асс-те этой точки
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Сообщить(ТекТТ);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Активность		= Истина;
			НоваяЗапись.Период			= мДата;
			НоваяЗапись.ТорговаяТочка	= ТекТТ;
			НоваяЗапись.Номенклатура	= СтрокаНоменклатуры.Номенклатура;
			НоваяЗапись.Характеристика	= СтрокаНоменклатуры.Характеристика;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Попытка
			НаборЗаписей.Записать(Ложь);
			Сообщить("Товарный ассортимент скопирован.");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(мМассивТиповТТ = Неопределено, сМатрицей = Ложь)
	
	ТекДанныеТТ = Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ТекущиеДанные;
	Если ТекДанныеТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТорговаяТочка = ТекДанныеТТ.ТорговаяТочка;
	Если НЕ ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Сообщить("Не выбрана торговая точка, ассортимент которой будет скопирован");
		Возврат;
	КонецЕсли;
	
	мМассивОстальныхТТ = Новый Массив;
	Для Каждого ЭлементСписка Из ЭтаФорма.СписокТорговыхТочек Цикл
		Если ЭлементСписка.Значение = мТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		Если (НЕ мМассивТиповТТ = Неопределено)
				И мМассивТиповТТ.Найти(ПолучитьТипТТСервер(ЭлементСписка.Значение)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мМассивОстальныхТТ.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	мМассивСтрок = Новый Массив;
	мВыделенныеСтроки = Элементы.ТоварныйАссортиментТочек.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из мВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаАссортимента Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет скопирована, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		мМассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если мМассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	//
	ТоварныйАссортиментТочекСкопироватьПоОбразцуСервер(мТорговаяТочка, мМассивСтрок, мМассивОстальныхТТ, ЭтаФорма.ДатаАссортимента, СМатрицей);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекСкопироватьПоОбразцу(Команда)
	
	ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекСкопироватьПоОбразцуСМатрицей(Команда)
	
	ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьПоОбразцуНаВВ(Команда)
	
	мМассивТиповТТ = Новый Массив;
	мМассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ВВ"));
	ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(мМассивТиповТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьПоОбразцуНаВВиТТ(Команда)

	мМассивТиповТТ = Новый Массив;
	мМассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ВВ"));
	мМассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ТТ"));
	мМассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.ПустаяСсылка"));
	ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(мМассивТиповТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьПоОбразцуНаМиниТТ(Команда)
	
	мМассивТиповТТ = Новый Массив;
	мМассивТиповТТ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТорговыхТочекДляТоварногоАссортимента.МиниТТ"));
	ТоварныйАссортиментТочекСкопироватьПоОбразцуКлиент(мМассивТиповТТ);
	
КонецПроцедуры

Процедура ТоварныйАссортиментСкопироватьСМагазинаСервер(ВыбТорговаяТочка, ТекТорговаяТочка)
	
	// проверка порядка обеспечения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, ЭтаФорма.ДатаАссортимента);
	Запрос.УстановитьПараметр("ТТ"			, ТекТорговаяТочка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка = &ТТ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекСклад = Выборка.Ссылка;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен порядок обеспечения для торговой точки <<" + СокрЛП(ТекТорговаяТочка.Наименование) + ">>. Обратитесь к Максиму Федорову.");
		Возврат;	
	КонецЕсли;
	
	
	// товарный ассортимент выбранной торговой точки
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, ЭтаФорма.ДатаАссортимента);
	Запрос.УстановитьПараметр("ТТ"			, ВыбТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаСреза, ТорговаяТочка = &ТТ) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|	И НЕ ТоварныйАссортиментТочекСрезПоследних.Запрещена";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// запись
	мМассивНом 	= ТаблицаЗапроса.ВыгрузитьКолонку("Номенклатура");
	
	//
	НачДата 	= НачалоДня(ТекущаяДата());
	мТаблицаЦен = ПолучитьЦеныНоменклатурыДляПлановПродаж(ТекТорговаяТочка, мМассивНом, НачДата);
	
	РезультатыЗапроса = ДопМодульСервер.ПолучитьТаблицыДляНовыхХарактеристикАссортимента(ЭтаФорма.ДатаАссортимента);
	ТабСамыеЧастыеХарки = РезультатыЗапроса[0].Выгрузить();
	ТабСамыеЧастыеХарки.Индексы.Добавить("ОсновнойСклад, Номенклатура");
	ТабСкладыМагазинов = РезультатыЗапроса[1].Выгрузить();
	ТабСкладыМагазинов.Индексы.Добавить("ТорговаяТочка");
	
	РегТовАссортимент 	= РегистрыСведений.ТоварныйАссортиментТочек;
	РегПланыПродаж		= РегистрыСведений.ПланыПродажПоДнямНедели;
	мРасчетчик = Объект.Расчетчик;	
	
	Для Каждого ТекНоменклатура Из мМассивНом Цикл
		
		МенеджерЗаписи = РегТовАссортимент.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= ЭтаФорма.ДатаАссортимента;
		МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Сообщить("На " + Формат(ЭтаФорма.ДатаАссортимента, "ДФ=dd.MM.yy") + " уже есть запись для " + СокрЛП(ТекТорговаяТочка.Наименование) +
						" с позицией " + СокрЛП(ТекНоменклатура) + "!");
			МенеджерЗаписи = Неопределено;
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.Период 			= ЭтаФорма.ДатаАссортимента;
		МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		
		СтрокаСклад = ТабСкладыМагазинов.Найти(ТекТорговаяТочка, "ТорговаяТочка");
		ТабПоТоварам = Новый ТаблицаЗначений();
		ТабПоТоварам.Колонки.Добавить("Харка");
		ТабПоТоварам.Колонки.Добавить("Колво");
		СтрокиПоХарке = ТабСамыеЧастыеХарки.НайтиСтроки(Новый Структура("ОсновнойСклад, Номенклатура", СтрокаСклад.ОсновнойСклад, ТекНоменклатура));
		Для Каждого СтрокаХар Из СтрокиПоХарке Цикл
			СтрокаДоб = ТабПоТоварам.Добавить();
			СтрокаДоб.Харка = СтрокаХар.Характеристика;
			СтрокаДоб.Колво = СтрокаХар.Колво;
		КонецЦикла;
		ТабПоТоварам.Сортировать("Колво убыв");
		Если ТабПоТоварам.Количество() > 0 Тогда
			МенеджерЗаписи.Характеристика = ТабПоТоварам[0].Харка;
		КонецЕсли;
		
		Попытка
		    МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		// для новой позиции - план наперед
		Для н = 1 по 7 Цикл
			
			ТекДата = НачДата + (н - 1) * 86400;
			
			МенеджерЗаписи = РегПланыПродаж.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи = Неопределено;
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи.Дата 			= ТекДата;
			МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
			МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
			МенеджерЗаписи.Расчетчик 		= мРасчетчик;
			МенеджерЗаписи.Количество 		= ?(НЕ ТекНоменклатура.Весовой, 1, 0.2);
			
			СтрокаТаблицы = мТаблицаЦен.Найти(ТекНоменклатура, "Номенклатура");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				МенеджерЗаписи.Цена 		= СтрокаТаблицы.Цена;
			КонецЕсли;
			МенеджерЗаписи.Склад 			= мРасчетчик.Склад;
			Попытка
			    МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьСМагазина(Команда)

	Перем ВыбТорговаяТочка;
	
	ТекДанныеТТ = Элементы.ТаблицаТорговыхТочекТоварныйАссортимент.ТекущиеДанные;
	ПоВсемТТ = Ложь;
	Если ТекДанныеТТ = Неопределено Тогда
		ПоВсемТТ = Истина;
	Иначе
		Если НЕ ТипЗнч(ТекДанныеТТ.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПоВсемТТ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПоВсемТТ Тогда
		Сообщить("Не выбрана торговая точка!");
		Возврат;
    КонецЕсли;
	
	Если НЕ ВвестиЗначение(ВыбТорговаяТочка, "Выберите магазин", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы")) Тогда
		Возврат;
	КонецЕсли;
	
	//
	//
	ТоварныйАссортиментСкопироватьСМагазинаСервер(ВыбТорговаяТочка, ТекДанныеТТ.ТорговаяТочка);
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьТоварныйАссортиментВДругойТовар(мНоменклатураОткуда, мНоменклатураКуда, мХарактеристикаКуда, мМассивТТ, мДата)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, мДата);
	Запрос.УстановитьПараметр("НоменклатураОткуда"	, мНоменклатураОткуда);
	Запрос.УстановитьПараметр("НоменклатураКуда"	, мНоменклатураКуда);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мМассивТТ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &НоменклатураОткуда
	|				И ТорговаяТочка В (&МассивТорговыхТочек)) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период,
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка,
	|	ТоварныйАссортиментТочекСрезПоследних.Выведена,
	|	ТоварныйАссортиментТочекСрезПоследних.Запрещена
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &НоменклатураКуда
	|				И ТорговаяТочка В (&МассивТорговыхТочек)) КАК ТоварныйАссортиментТочекСрезПоследних";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка 		= РезультатыЗапроса[0].Выбрать();
	ТаблицаКуда		= РезультатыЗапроса[1].Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл // выборка торговых точек для товара "откуда"
		
		НайденнаяСтрока = ТаблицаКуда.Найти(Выборка.ТорговаяТочка, "ТорговаяТочка");
		Если (НЕ НайденнаяСтрока = Неопределено)
				И (НайденнаяСтрока.Запрещена
					ИЛИ (НЕ НайденнаяСтрока.Выведена)
					ИЛИ НайденнаяСтрока.Период = мДата) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Период			= мДата;
		НоваяЗапись.ТорговаяТочка	= Выборка.ТорговаяТочка;
		НоваяЗапись.Номенклатура	= мНоменклатураКуда;
		НоваяЗапись.Характеристика	= мХарактеристикаКуда;
		НоваяЗапись.Выведена		= Ложь;
		
	КонецЦикла;	
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Попытка
			НаборЗаписей.Записать(Ложь);
			Сообщить("Товарный ассортимент скопирован.");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НеВедетсяУчетПоХарактеристикамСервер(мНоменклатура)
	
	Возврат мНоменклатура.НеВедетсяУчетПоХарактеристикам;
	
КонецФункции

&НаКлиенте
Процедура ТоварныйАссортиментСкопироватьВДругойТовар(Команда)
	
	ТекДанныеНом = Элементы.ДеревоТоваровТоварныйАссортиментТочек.ТекущиеДанные;
	Если ТекДанныеНом = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мНоменклатураОткуда = ТекДанныеНом.Номенклатура;
	Если НЕ ТипЗнч(мНоменклатураОткуда) = Тип("СправочникСсылка.Номенклатура") Тогда
		Сообщить("Не выбран товар, ассортимент которого будет скопирован");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Будет скопирован весь ассортимент товара """ + мНоменклатураОткуда +
					""". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// выбор номенклатуры "куда"
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора");
	
	мНоменклатураКуда = ФормаВыбора.ОткрытьМодально();
	Если ЭтаФорма.СписокНоменклатуры.НайтиПоЗначению(мНоменклатураКуда) = Неопределено Тогда // временно отбойник
		Возврат;
	КонецЕсли;
	
	// выбор характеристики "куда"
	Если НЕ НеВедетсяУчетПоХарактеристикамСервер(мНоменклатураКуда) Тогда
		ПараметрыФормы = Новый Структура;
	    ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Неактивная", мНоменклатураКуда, Ложь));
		ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		мХарактеристикаКуда = ФормаВыбора.ОткрытьМодально();
		Если мХарактеристикаКуда = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		мХарактеристикаКуда = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
		
	мМассив = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
	
	СкопироватьТоварныйАссортиментВДругойТовар(мНоменклатураОткуда, мНоменклатураКуда, мХарактеристикаКуда, мМассив, ЭтаФорма.ДатаАссортимента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныйАссортиментТочекВывестиПозицииСервер(мМассивСтрок, мДата)
	
	мТоварныйАссортиментТочек 	= РегистрыСведений.ТоварныйАссортиментТочек;
	мПланыПродажПоДнямНедели 	= РегистрыСведений.ПланыПродажПоДнямНедели;
	
	НаборЗаписейТА = мТоварныйАссортиментТочек.СоздатьНаборЗаписей();
	
	Для каждого ВыделеннаяСтрока Из мМассивСтрок Цикл
		
		ТекТорговаяТочка 	= ВыделеннаяСтрока.ТорговаяТочка;
		ТекНоменклатура 	= ВыделеннаяСтрока.Номенклатура;
		
		//проверка на то, что уже есть запись на эту дату
		МенеджерЗаписи 	= мТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= мДата;
		МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= ТекНоменклатура;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			ОбщегоНазначения.Сообщение("Для позиции " + СокрЛП(ТекНоменклатура) +
										" уже есть запись в ассортименте точки """ + СокрЛП(ТекТорговаяТочка) +
										""" на " + Формат(мДата, "ДЛФ=Д") +
										". Позиция не может быть выведена этой датой.", Перечисления.ВидыСообщений.ВажнаяИнформация,,,,, Истина);
			МенеджерЗаписи = Неопределено;
			Продолжить;
		КонецЕсли;
		
		// добавление в регистр сведений "ТоварныйАссортиментТочек" записи с (Выведена = Истина)
		НоваяЗапись = НаборЗаписейТА.Добавить();
		НоваяЗапись.Активность		= Истина;
		НоваяЗапись.Выведена		= Истина;
		НоваяЗапись.Номенклатура	= ТекНоменклатура;
		НоваяЗапись.Период			= мДата;
		НоваяЗапись.ТорговаяТочка	= ТекТорговаяТочка;
		НоваяЗапись.Характеристика	= ВыделеннаяСтрока.Характеристика;
		
		// удаление из регистра сведений "ПланыПродажПоДнямНедели"
		НаборЗаписейПлан = мПланыПродажПоДнямНедели.СоздатьНаборЗаписей();
		НаборЗаписейПлан.Отбор.ТорговаяТочка.Установить(ТекТорговаяТочка);
		НаборЗаписейПлан.Отбор.Номенклатура.Установить(ТекНоменклатура);
		НаборЗаписейПлан.Прочитать();
		Кол = НаборЗаписейПлан.Количество() - 1;
		Пока НЕ Кол < 0 Цикл
			Если НЕ НаборЗаписейПлан[Кол].Дата < мДата Тогда
				НаборЗаписейПлан.Удалить(Кол);
			КонецЕсли;	
			Кол = Кол - 1;
		КонецЦикла;	
		Попытка
			НаборЗаписейПлан.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписейТА.Записать(Ложь);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекВывестиПозиции(Команда)

	ТекДанныеТА = Элементы.ТоварныйАссортиментТочек.ТекущиеДанные;
	Если ТекДанныеТА = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Вывести выбранные позиции с " + Формат(ЭтаФорма.ДатаАссортимента, "ДЛФ=Д") + " ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	мМассивСтрок = Новый Массив;
	мВыделенныеСтроки = Элементы.ТоварныйАссортиментТочек.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из мВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Состояние > ЭтаФорма.ДатаАссортимента Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет выведена, так как она ещё не введена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
		СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика"	, ТекДанные.Характеристика);
		мМассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если мМассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
    ТоварныйАссортиментТочекВывестиПозицииСервер(мМассивСтрок, ЭтаФорма.ДатаАссортимента);
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныйАссортиментТочекЗапретитьПозицииСервер(мМассивСтрок)
	
	мМассивТТ		= Новый Массив;
	мМассивТоваров 	= Новый Массив;
	мТаблица 		= Новый ТаблицаЗначений;
	мТаблица.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	мТаблица.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого ВыделеннаяСтрока Из мМассивСтрок Цикл
		Если мМассивТТ.Найти(ВыделеннаяСтрока.ТорговаяТочка) = Неопределено Тогда
			мМассивТТ.Добавить(ВыделеннаяСтрока.ТорговаяТочка);
		КонецЕсли;
		Если мМассивТоваров.Найти(ВыделеннаяСтрока.Номенклатура) = Неопределено Тогда
			мМассивТоваров.Добавить(ВыделеннаяСтрока.Номенклатура);
		КонецЕсли;
		НоваяСтрока = мТаблица.Добавить();
		НоваяСтрока.ТорговаяТочка 	= ВыделеннаяСтрока.ТорговаяТочка;
		НоваяСтрока.Номенклатура 	= ВыделеннаяСтрока.Номенклатура;
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВремТаблица"		, мТаблица);
	Запрос.УстановитьПараметр("МассивТТ"		, мМассивТТ);
	Запрос.УстановитьПараметр("МассивТоваров"	, мМассивТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВремТаблица.ТорговаяТочка,
	|	ВремТаблица.Номенклатура
	|ПОМЕСТИТЬ ВТВыбранныеСтроки
	|ИЗ
	|	&ВремТаблица КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ВТВыбранныеСтроки.ТорговаяТочка,
	|	ВТВыбранныеСтроки.Номенклатура
	|ИЗ
	|	ВТВыбранныеСтроки КАК ВТВыбранныеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				,
	|				ТорговаяТочка В (&МассивТТ)
	|					И Номенклатура В (&МассивТоваров)) КАК ТоварныйАссортиментТочек
	|		ПО (ТоварныйАссортиментТочек.ТорговаяТочка = ВТВыбранныеСтроки.ТорговаяТочка)
	|			И (ТоварныйАссортиментТочек.Номенклатура = ВТВыбранныеСтроки.Номенклатура)
	|			И (ТоварныйАссортиментТочек.Выведена)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//
	мТоварныйАссортиментТочек 	= РегистрыСведений.ТоварныйАссортиментТочек;
	ТекПользователь				= ПараметрыСеанса.ТекущийПользователь;
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи 	= мТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Запрещена 			= Истина;
			МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
			МенеджерЗаписи.Автор 				= ТекПользователь;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекЗапретитьПозиции(Команда)
	
	ТекДанныеТА = Элементы.ТоварныйАссортиментТочек.ТекущиеДанные;
	Если ТекДанныеТА = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Запретить выбранные позиции?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//
	мМассивСтрок = Новый Массив;
	мВыделенныеСтроки = Элементы.ТоварныйАссортиментТочек.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из мВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекДанные.Запрещена Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ТекДанные.Выведена Тогда
			ОбщегоНазначения.Сообщение(СокрЛП(ТекДанные.Номенклатура) + " не будет запрещена, так как она ещё не выведена.",,,,,, Истина);
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ТорговаяТочка", ТекДанные.ТорговаяТочка);
		СтруктураЗаписи.Вставить("Номенклатура"	, ТекДанные.Номенклатура);
		мМассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если мМассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
    ТоварныйАссортиментТочекЗапретитьПозицииСервер(мМассивСтрок);
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныйАссортиментТочекСнятьЗапретПозицииСервер(мМассивСтрок)
	
	мМассивТТ		= Новый Массив;
	мМассивТоваров 	= Новый Массив;
	мТаблица 		= Новый ТаблицаЗначений;
	мТаблица.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	мТаблица.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого ВыделеннаяСтрока Из мМассивСтрок Цикл
		Если мМассивТТ.Найти(ВыделеннаяСтрока.ТорговаяТочка) = Неопределено Тогда
			мМассивТТ.Добавить(ВыделеннаяСтрока.ТорговаяТочка);
		КонецЕсли;
		Если мМассивТоваров.Найти(ВыделеннаяСтрока.Номенклатура) = Неопределено Тогда
			мМассивТоваров.Добавить(ВыделеннаяСтрока.Номенклатура);
		КонецЕсли;
		НоваяСтрока = мТаблица.Добавить();
		НоваяСтрока.ТорговаяТочка 	= ВыделеннаяСтрока.ТорговаяТочка;
		НоваяСтрока.Номенклатура 	= ВыделеннаяСтрока.Номенклатура;
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВремТаблица"		, мТаблица);
	Запрос.УстановитьПараметр("МассивТТ"		, мМассивТТ);
	Запрос.УстановитьПараметр("МассивТоваров"	, мМассивТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВремТаблица.ТорговаяТочка,
	|	ВремТаблица.Номенклатура
	|ПОМЕСТИТЬ ВТВыбранныеСтроки
	|ИЗ
	|	&ВремТаблица КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Период КАК Период,
	|	ВТВыбранныеСтроки.ТорговаяТочка,
	|	ВТВыбранныеСтроки.Номенклатура
	|ИЗ
	|	ВТВыбранныеСтроки КАК ВТВыбранныеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				,
	|				ТорговаяТочка В (&МассивТТ)
	|					И Номенклатура В (&МассивТоваров)
	|					И Запрещена) КАК ТоварныйАссортиментТочек
	|		ПО (ТоварныйАссортиментТочек.ТорговаяТочка = ВТВыбранныеСтроки.ТорговаяТочка)
	|			И (ТоварныйАссортиментТочек.Номенклатура = ВТВыбранныеСтроки.Номенклатура)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мТоварныйАссортиментТочек 	= РегистрыСведений.ТоварныйАссортиментТочек;
	ТекПользователь				= ПараметрыСеанса.ТекущийПользователь;
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи 	= мТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		МенеджерЗаписи.Номенклатура 	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Запрещена 			= Ложь;
			МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
			МенеджерЗаписи.Автор 				= ТекПользователь;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйАссортиментТочекСнятьЗапретПозиции(Команда)
	
	ТекДанныеТА = Элементы.ТоварныйАссортиментТочек.ТекущиеДанные;
	Если ТекДанныеТА = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Снять запрет с выбранных позиций?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//
	мМассивСтрок = Новый Массив;
	мВыделенныеСтроки = Элементы.ТоварныйАссортиментТочек.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из мВыделенныеСтроки Цикл
		
		ТекДанные = Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыделеннаяСтрока);
		Если НЕ ТекДанные.Запрещена Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ТорговаяТочка", ТекДанные.ТорговаяТочка);
		СтруктураЗаписи.Вставить("Номенклатура"	, ТекДанные.Номенклатура);
		мМассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если мМассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
    ТоварныйАссортиментТочекСнятьЗапретПозицииСервер(мМассивСтрок);
	
	Элементы.ТоварныйАссортиментТочек.Обновить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДобавитьЗаписьТоварныйАссортимент(мХарактеристика, мНоменклатура, мТорговаяТочка, мДата)
	
	МенеджерЗаписи = РегистрыСведений.ТоварныйАссортиментТочек.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= мДата;
	МенеджерЗаписи.ТорговаяТочка 	= мТорговаяТочка;
	МенеджерЗаписи.Номенклатура 	= мНоменклатура;
	МенеджерЗаписи.Характеристика 	= мХарактеристика;
	МенеджерЗаписи.ДатаСозданияЗаписи 	= ТекущаяДата();
	МенеджерЗаписи.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
	    МенеджерЗаписи.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры	

&НаКлиенте
Процедура ТоварныйАссортиментТочекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// колонка "Характеристика"
	Если Поле.Имя = "ТоварныйАссортиментТочекХарактеристика" Тогда
		
		ВыбСтрока = Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыбраннаяСтрока);
		ВыбНоменклатура = ВыбСтрока.Номенклатура;
		
		// выбор характеристики
		ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Неактивная", ВыбНоменклатура, Ложь));
		ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		ВыбХарактеристика = ФормаВыбора.ОткрытьМодально();
		Если ВыбХарактеристика = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		// изменение ресурса "Характеристика" в записи регистра сведений
		ДобавитьЗаписьТоварныйАссортимент(ВыбХарактеристика, ВыбНоменклатура, ВыбСтрока.ТорговаяТочка, ЭтаФорма.ДатаАссортимента);
		
		Элементы.ТоварныйАссортиментТочек.Обновить();
		
	// колонка "Цена"
	ИначеЕсли Поле.Имя = "ТоварныйАссортиментТочекЦена" Тогда
		
		Возврат;
		
	// колонка "Номенклатура"
	ИначеЕсли Поле.Имя = "ТоварныйАссортиментТочекНоменклатура" Тогда
		
		Ключ = Новый Структура("Ключ", Элементы.ТоварныйАссортиментТочек.ДанныеСтроки(ВыбраннаяСтрока).Номенклатура);
		
		//+++АК MOSD 2018.11.21 ИП-00019907
		//ФормаЭлемента = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаЭлементаУпр", Ключ);    
		ФормаЭлемента = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Ключ);    
		//---АК MOSD 
		ФормаЭлемента.Открыть();
		
	КонецЕсли;	
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ФАКТИЧЕСКИЕ ОСТАТКИ"

&НаКлиенте
Процедура УстановитьОтборФактическихОстатков()
	
	Перем СписокТТ, ТекВыделенныеСтроки, ТекДанные;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		СписокТТ = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				СписокТТ = ЭтаФорма.СписокТорговыхТочек;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокТТ = ЭтаФорма.СписокТорговыхТочек;
	КонецЕсли;
	
	
	//
	ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВсюНоменклатуруФОПриИзменении(Элемент)

	УстановитьОтборФактическихОстатков();
	
КонецПроцедуры

Процедура РассчитатьФОСервер()
	
	СписокТТ 		= Новый СписокЗначений;
	ТекстИДТТ 		= "";
	ТекстИДТоваров 	= "NULL";
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл		
		ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
		Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ТекстИДТТ = ТекстИДТТ + "," + Формат(ТекДанные.ТорговаяТочка.id_TT, "ЧГ=0");
			СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
		Иначе
			СписокТТ = ЭтаФорма.СписокТорговыхТочек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекстИДТТ = Сред(ТекстИДТТ, 3);
	Если НЕ ТекстИДТТ = "" Тогда
		ТекстИДТТ = "'" + ТекстИДТТ + "'";
	Иначе
		ТекстИДТТ = "NULL";
	КонецЕсли;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	ADOСоединение.Open();
	
	Попытка
		Выборка = ADOСоединение.Execute("exec M2..ostatki_tt_tov_currdate " + ТекстИДТоваров + "," + ТекстИДТТ + ",1");
		
		СпрНоменклатура 	= Справочники.Номенклатура;
		СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
		
		Если НЕ Выборка.EOF() Тогда
			
			Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF() Цикл
				
				ТекНоменклатура = Неопределено;
				ТекНомУИД 	= Выборка.Fields("TovarUID").Value;
				Если НЕ ТекНомУИД = NULL Тогда
					ТекНоменклатура = СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекНомУИД));
				Иначе
					Выборка.MoveNext();
					Продолжить;
				КонецЕсли;
				
				ТекОстаток = Макс(Выборка.Fields("kol").Value, 0);
				Если НЕ ТекОстаток = 0 Тогда
					НоваяСтрока = ТабДанные.Добавить();
					НоваяСтрока.Номенклатура 		= ТекНоменклатура;
					Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
						НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Fields("TTUID").Value));
					КонецЕсли;
					НоваяСтрока.Количество 			= ТекОстаток;
					НоваяСтрока.Дата 				= ЭтаФорма.ДатаОстатков;
				КонецЕсли;
						
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	//
	Если ТабДанные.Количество() > 0 Тогда
		
		мРегистр = РегистрыСведений.ФактическиеОстаткиТоваров;
		
		СтруктураОтбора = Новый Структура("ТорговаяТочка");
		Для Каждого ЭлементСписка Из СписокТТ Цикл
			
			ТекТТ = ЭлементСписка.Значение;
			
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(ЭтаФорма.ДатаОстатков);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТТ);
			НаборЗаписей.Прочитать();
			
			СтруктураОтбора.ТорговаяТочка = ТекТТ;
			СтрокиТабДанных = ТабДанные.НайтиСтроки(СтруктураОтбора);
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				Если СтрокиТабДанных.Количество() = 0 Тогда // ничего не было, ничего и нет
					НаборЗаписей = Неопределено; 			// забота о памяти приложения 1С
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из СтрокиТабДанных Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
		
	Иначе
		Сообщить("Нет данных для заполнения!");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФО(Команда)
	
	РассчитатьФОСервер();
	
КонецПроцедуры

Функция ПолучитьТаблицуОнлайнОстатковТТ(СтокаОтбораИДТТ, мДатаНачала = Неопределено)
	
	//2016-04-28 Минеев - в связи с переделкой логики работы таблицы AccArticle переделана следующая процедура, весь старый код в комменте
	
	ЗапросКеш = Новый Запрос;
	ЗапросКеш.УстановитьПараметр("ТекДата", ТекущаяДата());
	ЗапросКеш.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних";
					  
	ТабКешЦены = ЗапросКеш.Выполнить().Выгрузить();
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_UNION");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"Exec M2..ostatki_tt_tov_currdate NULL, '" + СтокаОтбораИДТТ + "', 1";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	мТаблицаСКЛ = Новый ТаблицаЗначений;
	мТаблицаСКЛ.Колонки.Добавить("ID_TT");
	мТаблицаСКЛ.Колонки.Добавить("Дата");
	мТаблицаСКЛ.Колонки.Добавить("Сумма");
	
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
			
				НоваяСтрока = мТаблицаСКЛ.Добавить();
				НоваяСтрока.ID_TT 	= Выборка.Fields("ID_TT").Value;
				НоваяСтрока.Дата 	= ТекущаяДата();
				Колво = Выборка.Fields("kolvo").Value;
				СтрокаКешЦена = ТабКешЦены.Найти(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Fields("TovarUID").Value)));
				Если СтрокаКешЦена <> Неопределено
					И ТипЗнч(Колво) = Тип("Число") Тогда
					НоваяСтрока.Сумма 	= Колво * СтрокаКешЦена.Цена;
				КонецЕсли;	
			
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	ADOСоединение.Close();
	
	Возврат мТаблицаСКЛ;
	
	
	//ЕстьОтборПоДате = (НЕ мДатаНачала = Неопределено);
	//
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_UNION");
	//ADOСоединение.Open();
	//
	//ТекстЗапроса =
	//"SELECT
	//|	RealOstatki.ID_TT as ID_TT,
	//|	RealOstatki.Period,
	//|	SUM(CONVERT(REAL, CASE WHEN RealOstatki.Amount < 0 THEN 0 ELSE RealOstatki.Amount END) * CONVERT(REAL, RealOstatki.Price)) as Summa
	//|FROM [SMS_UNION].[dbo].[AccArticle] as RealOstatki (nolock)
	//| 	INNER JOIN
	//| 		(SELECT
	//| 			RealOstatki_2.ID_TT as ID_TT,
	//| 			MAX(RealOstatki_2.Period) as Period
	//| 		FROM [SMS_UNION].[dbo].[AccArticle] as RealOstatki_2 (nolock)
	//|		WHERE
	//|			" + ?(ЕстьОтборПоДате, "RealOstatki_2.Period >= '" + Формат(мДатаНачала, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
	//|			AND ", "") + "RealOstatki_2.ID_TT IN (" + СтокаОтбораИДТТ + ")
	//| 		GROUP BY
	//| 			RealOstatki_2.ID_TT) as max_period
	//| 	ON max_period.ID_TT = RealOstatki.ID_TT
	//| 		AND max_period.Period = RealOstatki.Period
	//|WHERE
	//|	" + ?(ЕстьОтборПоДате, "RealOstatki.Period >= '" + Формат(мДатаНачала, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
	//|	AND ", "") + "RealOstatki.ID_TT IN (" + СтокаОтбораИДТТ + ")
	//|GROUP BY
	//|	RealOstatki.ID_TT,
	//|	RealOstatki.Period";
	//
	//Выборка = ADOСоединение.Execute(ТекстЗапроса);
	//
	//мТаблицаСКЛ = Новый ТаблицаЗначений;
	//мТаблицаСКЛ.Колонки.Добавить("ID_TT");
	//мТаблицаСКЛ.Колонки.Добавить("Дата");
	//мТаблицаСКЛ.Колонки.Добавить("Сумма");
	//
	//Пока НЕ Выборка = Неопределено Цикл
	//	Если Выборка.Fields.Count > 0 Тогда
	//		Пока НЕ Выборка.EOF Цикл
	//		
	//			НоваяСтрока = мТаблицаСКЛ.Добавить();
	//			НоваяСтрока.ID_TT 	= Выборка.Fields("ID_TT").Value;
	//			НоваяСтрока.Дата 	= Выборка.Fields("Period").Value;
	//			НоваяСтрока.Сумма 	= Выборка.Fields("Summa").Value;
	//		
	//			Если НЕ Выборка.EOF Тогда
	//				Выборка.MoveNext();
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//	Выборка = Выборка.NextRecordSet();
	//КонецЦикла;
	//ADOСоединение.Close();
	//
	//Возврат мТаблицаСКЛ;
	
КонецФункции

Процедура ЗаполнитьТаблицуТТОнлайнОстатками()
	
	ВремТаблица = ЭтаФорма.ТаблицаТорговыхТочек.Выгрузить();
	
	СтокаОтбораИДТТ = "9999999";
	Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
		Если ТипЗнч(СтрокаТаблицы.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			СтокаОтбораИДТТ = СтокаОтбораИДТТ + ", " + Формат(СтрокаТаблицы.ТорговаяТочка.id_TT, "ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	мДатаНачала = НачалоДня(ТекущаяДата()) - 86400;
	
	//
	мТаблицаСКЛ = ПолучитьТаблицуОнлайнОстатковТТ(СтокаОтбораИДТТ, мДатаНачала);
	
	СтокаОтбораИДТТ = "9999999";
	Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
		
		Если НЕ ТипЗнч(СтрокаТаблицы.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаСКЛ = мТаблицаСКЛ.Найти(СтрокаТаблицы.ТорговаяТочка.id_TT, "ID_TT");
		Если ТекСтрокаСКЛ = Неопределено Тогда
			СтрокаТаблицы.Дата 	= Дата(1, 1, 1);
			СтрокаТаблицы.Сумма = 0;
			СтокаОтбораИДТТ = СтокаОтбораИДТТ + ", " + Формат(СтрокаТаблицы.ТорговаяТочка.id_TT, "ЧГ=0");
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Дата 	= ТекСтрокаСКЛ.Дата;
		СтрокаТаблицы.Сумма = ТекСтрокаСКЛ.Сумма;
	КонецЦикла;
	
	// ищем последние записи по торговой точке, без отбора по датам
	Если НЕ СтокаОтбораИДТТ = "9999999" Тогда
		мТаблицаСКЛ = ПолучитьТаблицуОнлайнОстатковТТ(СтокаОтбораИДТТ);
		Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
			
			Если НЕ ТипЗнч(СтрокаТаблицы.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Дата	= Дата(1, 1, 1)
					И СтрокаТаблицы.Сумма = 0 Тогда
				ТекСтрокаСКЛ = мТаблицаСКЛ.Найти(СтрокаТаблицы.ТорговаяТочка.id_TT, "ID_TT");
				Если ТекСтрокаСКЛ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы.Дата 	= ТекСтрокаСКЛ.Дата;
				СтрокаТаблицы.Сумма = ТекСтрокаСКЛ.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//
	ЭтаФорма.ТаблицаТорговыхТочек.Загрузить(ВремТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОнлайнОстаткиПоТТПриИзменении(Элемент)

	Элементы.ТаблицаТорговыхТочекДата.Видимость 	= ЭтаФорма.ПоказыватьОнлайнОстаткиПоТТ;
	Элементы.ТаблицаТорговыхТочекСумма.Видимость 	= ЭтаФорма.ПоказыватьОнлайнОстаткиПоТТ;
	
	Если ЭтаФорма.ПоказыватьОнлайнОстаткиПоТТ Тогда
		
		ЗаполнитьТаблицуТТОнлайнОстатками();
		
		Элементы.ТаблицаТорговыхТочек.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекПриАктивизацииСтроки(Элемент)
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборФактическихОстатков", 0.1, Истина);
	
КонецПроцедуры

Процедура РассчитатьФОПоПлануПродажСервер()
	
	мНачалоДня = ЭтаФорма.ДатаОстатков;
	
	ПоВсемТТ = Ложь;
	мДатаПрошНачало = мНачалоДня - 86400;
	
	СписокТТ = Новый СписокЗначений;
	СтрокаОтбораТТ = "9999999";
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл		
		ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
		Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			СтрокаОтбораТТ = СтрокаОтбораТТ + ", " + Формат(ТекДанные.ТорговаяТочка.НомерТочки, "ЧГ=0");
			СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
		Иначе
			ПоВсемТТ = Истина;
			СписокТТ = ЭтаФорма.СписокТорговыхТочек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СписокТТ.Количество() = 1 Тогда
		Сообщить("Необходимо выбрать ровно 1 торговую точку!");
		Возврат;
	КонецЕсли;
	
	
	// остаток на конец вчерашнего дня
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_repl");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"SELECT
	|	TovarUID,
	|	TTUID,
	|	kon_ost
	|FROM sms_repl..yesterday_ost(" + Формат(СписокТТ[0].Значение.НомерТочки, "ЧГ=0") + ")";
		
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	
	
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	
	Если НЕ Выборка.EOF() Тогда
		
		Выборка.MoveFirst();
		
		Пока НЕ Выборка.EOF() Цикл
			
			ТекНоменклатура = Неопределено;
			ТекНомУИД 	= Выборка.Fields("TovarUID").Value;
			Если НЕ ТекНомУИД = NULL Тогда
				ТекНоменклатура = СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ТекНомУИД, 2, 36)));
				Если ТекНоменклатура.Выведена Тогда
					Выборка.MoveNext();
					Продолжить;
				КонецЕсли;
			Иначе
				Выборка.MoveNext();
				Продолжить;
			КонецЕсли;
			
			ТекОстаток 	= Макс(Выборка.Fields("kon_ost").Value, 0);
			Если НЕ ТекОстаток = 0 Тогда
				НоваяСтрока = ТабДанные.Добавить();
				НоваяСтрока.Номенклатура 		= ТекНоменклатура;
				Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
					НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Выборка.Fields("TTUID").Value, 2, 36)));
				КонецЕсли;
				НоваяСтрока.Количество 			= ТекОстаток;
						
				НоваяСтрока.Дата 				= мНачалоДня;
			КонецЕсли;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	ADOСоединение.Close();
	
	
	// [отгрузка за текущий день] - [план продаж на текущий день]
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, мНачалоДня);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтаФорма.ДатаОстатков));
	Запрос.УстановитьПараметр("СписокТТ"		, СписокТТ);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка,
	|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	|	-ПланыПродажПоДнямНедели.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата = &ДатаНачала
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка В(&СписокТТ)
	//|	И НЕ ПланыПродажПоДнямНедели.Номенклатура.Выведена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	СУММА(РасходныйОрдерСкладТовары.Количество)
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель В(&СписокТТ)
	//|	И НЕ РасходныйОрдерСкладТовары.Номенклатура.Выведена
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка.Получатель,
	|	РасходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ТорговаяТочка,
	|	ВТОсновная.Номенклатура,
	|	СУММА(ВТОсновная.Количество) КАК Количество
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОсновная.ТорговаяТочка,
	|	ВТОсновная.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВТОсновная.Количество) = 0";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтруктураОтбора = Новый Структура("ТорговаяТочка, Номенклатура");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора.ТорговаяТочка 	= Выборка.ТорговаяТочка;
		СтруктураОтбора.Номенклатура 	= Выборка.Номенклатура;
		СтрокиТабДанные = ТабДанные.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТабДанные.Количество() = 0 Тогда
			СтрокаТабДанные = ТабДанные.Добавить();
			СтрокаТабДанные.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			СтрокаТабДанные.Номенклатура 	= Выборка.Номенклатура;
			СтрокаТабДанные.Дата 			= мНачалоДня;
		Иначе
			СтрокаТабДанные = СтрокиТабДанные[0];
		КонецЕсли;
		
		СтрокаТабДанные.Количество = Макс(СтрокаТабДанные.Количество + Выборка.Количество, 0);
		
	КонецЦикла;
	
	Если ТабДанные.Количество() > 0 Тогда
		
		мРегистр = РегистрыСведений.ФактическиеОстаткиТоваров;
		
		СтруктураОтбора = Новый Структура("ТорговаяТочка");
		Для Каждого ЭлементСписка Из СписокТТ Цикл
			
			ТекТТ = ЭлементСписка.Значение;
			
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(ЭтаФорма.ДатаОстатков);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТТ);
			НаборЗаписей.Прочитать();
			
			СтруктураОтбора.ТорговаяТочка = ТекТТ;
			СтрокиТабДанных = ТабДанные.НайтиСтроки(СтруктураОтбора);
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				Если СтрокиТабДанных.Количество() = 0 Тогда // ничего не было, ничего и нет
					НаборЗаписей = Неопределено; 			// забота о памяти приложения 1С
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из СтрокиТабДанных Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет данных для заполнения!");
	КонецЕсли;
	
	//
	ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОПоПлануПродаж(Команда)
	
	РассчитатьФОПоПлануПродажСервер();
	
КонецПроцедуры

Процедура ЗаписатьМассивФактическихОстатков(МассивСтрок)
	
	Если МассивСтрок.Количество() = 0 Тогда
		Сообщить("Нет данных для заполнения!");
		Возврат;
	КонецЕсли;
	
	//
	мРегистр = РегистрыСведений.ФактическиеОстаткиТоваров;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОПоОнлайнОстаткам(Команда)
	
	Перем ТекТорговаяТочка, ТекВыделенныеСтроки;
	
	Если НЕ ЭтаФорма.ДатаОстатков = НачалоДня(ТекущаяДата()) Тогда
		Сообщить("Рассчет возможен только для текущей даты!");
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Если НЕ ТекВыделенныеСтроки.Количество() = 1 Тогда
		Сообщить("Необходимо выбрать торговую точку!");
		Возврат;
	КонецЕсли;

	СтрокаОтбораТТ 	= "";
	
	ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(ТекВыделенныеСтроки[0]);
	ТекТорговаяТочка = ТекДанные.ТорговаяТочка;
	Если НЕ ТипЗнч(ТекТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда	
		Сообщить("Необходимо выбрать торговую точку!");
		Возврат;
	КонецЕсли;
		
	//
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТорговаяТочка", ТекТорговаяТочка);
	
	ФормаВыбора = ПолучитьФорму("Обработка.ПрогнозированиеПродаж.Форма.ФормаПодбораОнлайнОстатков", ПараметрыФормы, ЭтаФорма);
	МассивСтрок = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(МассивСтрок) Тогда 
		ЗаписатьМассивФактическихОстатков(МассивСтрок);
	КонецЕсли;
	
	//
	СписокТТ = Новый СписокЗначений;
	СписокТТ.Добавить(ТекТорговаяТочка);
	ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОПоСМС(Команда)
	
	Перем ТекТорговаяТочка, ТекВыделенныеСтроки;
	
	Если НЕ ЭтаФорма.ДатаОстатков = НачалоДня(ТекущаяДата()) Тогда
		Сообщить("Рассчет возможен только для текущей даты!");
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Если НЕ ТекВыделенныеСтроки.Количество() = 1 Тогда
		Сообщить("Необходимо выбрать торговую точку!");
		Возврат;
	КонецЕсли;

	СтрокаОтбораТТ = "";
	
	ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(ТекВыделенныеСтроки[0]);
	ТекТорговаяТочка = ТекДанные.ТорговаяТочка;
	Если НЕ ТипЗнч(ТекТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда	
		Сообщить("Необходимо выбрать торговую точку!");
		Возврат;
	КонецЕсли;
		
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТорговаяТочка", ТекТорговаяТочка);
	
	ФормаВыбора = ПолучитьФорму("Обработка.ПрогнозированиеПродаж.Форма.ФормаЗагрузкиОстатковИзСМС", ПараметрыФормы, ЭтаФорма);
	МассивСтрок = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(МассивСтрок) Тогда 
		ЗаписатьМассивФактическихОстатков(МассивСтрок);
	КонецЕсли;
	
	
	СписокТТ = Новый СписокЗначений;
	СписокТТ.Добавить(ТекТорговаяТочка);
	ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
КонецПроцедуры

Процедура РассчитатьФОПрогнозныеСервер()
	
	СписокТТ = Новый СписокЗначений;
	
	//
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл		
		ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
		Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
		Иначе
			СписокТТ = ЭтаФорма.СписокТорговыхТочек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_UNION");
	ADOСоединение.Open();
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	
	Для Каждого ЭлементСписка Из СписокТТ Цикл
		
		ТекТорговаяТочка = ЭлементСписка.Значение;
		
		ТекстЗапроса =
		"Exec M2..ostatki_tt_tov_kontr_currdate NULL, " + Формат(ТекТорговаяТочка.id_TT, "ЧГ=");// + ", 1";
		
		Выборка = ADOСоединение.Execute(ТекстЗапроса);
		
		Если НЕ Выборка.EOF() Тогда
			
			Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF() Цикл
				
				ТекНоменклатура = Неопределено;
				ТекНомУИД 	= Выборка.Fields("TovarUID").Value;
				Если НЕ ТекНомУИД = NULL Тогда
					ТекНоменклатура = СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекНомУИД));
				Иначе
					Выборка.MoveNext();
					Продолжить;
				КонецЕсли;
				
				ТекОстаток = Макс(Выборка.Fields("kol").Value, 0);
				Если НЕ ТекОстаток = 0 Тогда
					НоваяСтрока = ТабДанные.Добавить();
					НоваяСтрока.Номенклатура 		= ТекНоменклатура;
					НоваяСтрока.ТорговаяТочка		= ТекТорговаяТочка;
					НоваяСтрока.Количество 			= ТекОстаток;
					НоваяСтрока.Дата 				= ЭтаФорма.ДатаОстатков;
				КонецЕсли;
						
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ADOСоединение.Close();
	
	//
	Если ТабДанные.Количество() > 0 Тогда
		
		мРегистр = РегистрыСведений.ФактическиеОстаткиТоваров;
		
		СтруктураОтбора = Новый Структура("ТорговаяТочка");
		Для Каждого ЭлементСписка Из СписокТТ Цикл
			
			ТекТорговаяТочка = ЭлементСписка.Значение;
			
			СтруктураОтбора.ТорговаяТочка = ТекТорговаяТочка;
			СтрокиТабДанных = ТабДанные.НайтиСтроки(СтруктураОтбора);
			
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(ЭтаФорма.ДатаОстатков);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТорговаяТочка);//ТекТТ);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				Если СтрокиТабДанных.Количество() = 0 Тогда // ничего не было, ничего и нет
					НаборЗаписей = Неопределено; 			// забота о памяти приложения 1С
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из СтрокиТабДанных Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет данных для заполнения!");
	КонецЕсли;
	
	//
	ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
	//ПоВсемТТ = Ложь;
	//
	//СписокТТ = Новый СписокЗначений;
	//СтрокаОтбораТТ = "9999999";
	//
	//ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочек.ВыделенныеСтроки;
	//Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл		
	//	ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
	//	Если ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	//		СтрокаОтбораТТ = СтрокаОтбораТТ + ", " + Формат(ТекДанные.ТорговаяТочка.id_tt, "ЧГ=0");
	//		СписокТТ.Добавить(ТекДанные.ТорговаяТочка);
	//	Иначе
	//		ПоВсемТТ = Истина;
	//		СписокТТ = ЭтаФорма.СписокТорговыхТочек;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ПоВсемТТ Тогда
	//	СтрокаОтбораТТ = "9999999";
	//	Для Каждого ЭлементСписка Из СписокТТ Цикл
	//		СтрокаОтбораТТ = СтрокаОтбораТТ + ", " + Формат(ЭлементСписка.Значение.id_tt, "ЧГ=0");
	//	КонецЦикла;
	//Иначе
	//	Если СтрокаОтбораТТ = "9999999" Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//ADOСоединение.ConnectionTimeOut = 0;
	//ADOСоединение.CommandTimeOut    = 0;
	//ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_UNION");
	//ADOСоединение.Open();
	
	//ТекстЗапроса =
	//"SELECT
	//|	[TovarUID],
	//|   [TTUID],
	//|   [Amount],
	//|   [Prognoz_ost]
	//|FROM [SMS_UNION].[dbo].[Fact_Prognoz_OST_online] as RealOstatki (nolock)
	//|WHERE
	//|	RealOstatki.[Period] >= CONVERT(DATETIME, '" + Формат(ЭтаФорма.ДатаОстатков, "ДФ='yyyy-MM-dd HH:mm:ss'") +
	//"', 20) AND RealOstatki.[Period] <= CONVERT(DATETIME, '" + Формат(КонецДня(ЭтаФорма.ДатаОстатков), "ДФ='yyyy-MM-dd HH:mm:ss'") + "', 20)
	//|	AND RealOstatki.[ID_TT] IN (" + СтрокаОтбораТТ + ")";
	
	//Выборка = ADOСоединение.Execute(ТекстЗапроса);
	//
	//
	//ТабДанные = Новый ТаблицаЗначений();
	//ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТабДанные.Колонки.Добавить("ТорговаяТочка"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТабДанные.Колонки.Добавить("Количество"		, Новый ОписаниеТипов("Число"));
	//ТабДанные.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	//
	//СпрНоменклатура 	= Справочники.Номенклатура;
	//СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	//
	//Если НЕ Выборка.EOF() Тогда
	//	
	//	Выборка.MoveFirst();
	//	
	//	Пока НЕ Выборка.EOF() Цикл
	//		
	//		ТекНоменклатура = Неопределено;
	//		ТекНомУИД 	= Выборка.Fields("TovarUID").Value;
	//		Если НЕ ТекНомУИД = NULL Тогда
	//			ТекНоменклатура = СпрНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ТекНомУИД, 2, 36)));
	//			//Если ТекНоменклатура.Выведена Тогда
	//			//	Выборка.MoveNext();
	//			//	Продолжить;
	//			//КонецЕсли;
	//		Иначе
	//			Выборка.MoveNext();
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ТекОстаток = Макс(Выборка.Fields("Prognoz_ost").Value, 0);
	//		Если НЕ ТекОстаток = 0 Тогда
	//			НоваяСтрока = ТабДанные.Добавить();
	//			НоваяСтрока.Номенклатура 		= ТекНоменклатура;
	//			Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
	//				НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Выборка.Fields("TTUID").Value, 2, 36)));
	//			КонецЕсли;
	//			НоваяСтрока.Количество 			= ТекОстаток;
	//			НоваяСтрока.Дата 				= ЭтаФорма.ДатаОстатков;
	//		КонецЕсли;
	//				
	//		Выборка.MoveNext();
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//ADOСоединение.Close();
	//
	//
	//Если ТабДанные.Количество() > 0 Тогда
	//	
	//	мРегистр = РегистрыСведений.ФактическиеОстаткиТоваров;
	//	
	//	СтруктураОтбора = Новый Структура("ТорговаяТочка");
	//	Для Каждого ЭлементСписка Из СписокТТ Цикл
	//		
	//		ТекТТ = ЭлементСписка.Значение;
	//		
	//		СтруктураОтбора.ТорговаяТочка = ТекТТ;
	//		СтрокиТабДанных = ТабДанные.НайтиСтроки(СтруктураОтбора);
	//		
	//		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Дата.Установить(ЭтаФорма.ДатаОстатков);
	//		НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТорговаяТочка);//ТекТТ);
	//		НаборЗаписей.Прочитать();
	//		
	//		Если НаборЗаписей.Количество() > 0 Тогда
	//			НаборЗаписей.Очистить();
	//		Иначе
	//			Если СтрокиТабДанных.Количество() = 0 Тогда // ничего не было, ничего и нет
	//				НаборЗаписей = Неопределено; 			// забота о памяти приложения 1С
	//				Продолжить;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Для Каждого СтрокаТаблицы Из ТабДанные Цикл//СтрокиТабДанных Цикл
	//			НоваяСтрока = НаборЗаписей.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//			НоваяСтрока.ТорговаяТочка = ТекТорговаяТочка;
	//		КонецЦикла;
	//		
	//		Попытка
	//			НаборЗаписей.Записать();
	//		Исключение
	//			Сообщить(ОписаниеОшибки());
	//		КонецПопытки;
	//		
	//	КонецЦикла;
	//	
	//Иначе
	//	Сообщить("Нет данных для заполнения!");
	//КонецЕсли;
	//
	//ЗаполнитьТаблицуФактическихОстатков(СписокТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОПрогнозные(Команда)
	
	РассчитатьФОПрогнозныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиДобавить(Команда)
	
	ТекДанные = Элементы.ТаблицаТорговыхТочек.ТекущиеДанные;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ФактическиеОстаткиТоваров.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.Расчетчик	= Объект.Расчетчик;
	ФормаНового.Запись.Дата 		= ЭтаФорма.ДатаОстатков;
	Если НЕ ТекДанные = Неопределено Тогда
		ФормаНового.Запись.ТорговаяТочка = ПолучитьЗначениеИзДерева(ТекДанные.ТорговаяТочка, "СтруктурныеЕдиницы");
	КонецЕсли;
	ФормаНового.ОткрытьМодально();
	
	//Элементы.ФактическиеОстаткиТоваров.Обновить();
	УстановитьОтборФактическихОстатков();
		
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиСкопировать(Команда)
	
	ТекДанные = Элементы.ФактическиеОстаткиТоваров.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ФактическиеОстаткиТоваров.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.Расчетчик		= Объект.Расчетчик;
	ФормаНового.Запись.Дата				= ЭтаФорма.ДатаОстатков;
	ФормаНового.Запись.ТорговаяТочка 	= ТекДанные.ТорговаяТочка;
	ФормаНового.Запись.Количество 		= ТекДанные.Количество;
	ФормаНового.ОткрытьМодально();
	
	УстановитьОтборФактическихОстатков();
	//Элементы.ФактическиеОстаткиТоваров.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиИзменить(Команда)

	ТекДанные = Элементы.ФактическиеОстаткиТоваров.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Расчетчик"		, Объект.Расчетчик);
	СтруктураЗаписи.Вставить("Дата"				, ЭтаФорма.ДатаОстатков);
	СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиФактическиеОстаткиТоваров(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ФактическиеОстаткиТоваров.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
	
		УстановитьОтборФактическихОстатков();
		//Элементы.ФактическиеОстаткиТоваров.Обновить();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписьРегистраФактическиеОстатки(СтруктураЗначенийИзмерений)
	
	НаборЗаписей = РегистрыСведений.ФактическиеОстаткиТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(СтруктураЗначенийИзмерений.Дата);
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураЗначенийИзмерений.ТорговаяТочка);
	НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураЗначенийИзмерений.Номенклатура);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось удалить запись регистра ""Фактические остатки товаров""";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиУдалить(Команда)

	ТекДанные = Элементы.ФактическиеОстаткиТоваров.ТекущиеДанные;
	Если ТекДанные = Неопределено
			ИЛИ Вопрос("Запись будет удалена. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Дата"				, ЭтаФорма.ДатаОстатков);
	СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
	
	УдалитьЗаписьРегистраФактическиеОстатки(СтруктураЗаписи);
	
	УстановитьОтборФактическихОстатков();
	//Элементы.ФактическиеОстаткиТоваров.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиОбновить(Команда)
	
	УстановитьОтборФактическихОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекДанные = Элементы.ФактическиеОстаткиТоваров.ТекущиеДанные;
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Расчетчик"		, Объект.Расчетчик);
	СтруктураЗаписи.Вставить("Дата"				, ЭтаФорма.ДатаОстатков);
	СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиФактическиеОстаткиТоваров(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ФактическиеОстаткиТоваров.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
	
		УстановитьОтборФактическихОстатков();
		//Элементы.ФактическиеОстаткиТоваров.Обновить();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ЗНАЧЕНИЯ" (показатели для заказа товаров)

&НаКлиенте
Процедура ДатаПоказателейЗаказовПриИзменении(Элемент)
	
	ПриИзмененииДатыЗаказов();
	
	// перерисовка показателей для заказа товаров
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСкладТорговыхТочекПриИзменении(Элемент)
	
	ЗаполнитьТаблицуТорговыхТочек();
	
	Элементы.ТаблицаТорговыхТочекЗначения.Обновить();
	ТекДанные = Элементы.ТаблицаТорговыхТочекЗначения.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборПоказателиДляЗаказаПоТТ();
	КонецЕсли;
	
	Элементы.ТаблицаТорговыхТочекТоварныеОграничения.Обновить();
	ТекДанные = Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборТоварныхОграниченийНаТочкахНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПриИзменении(Элемент)
	
	УстановитьТекстЗапросаПоказателиЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПоказыватьПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаПоказателей.ТекущиеДанные;
	Если ТекДанные.Показатель = "Заказ товара" Тогда
		Элементы.ПоказателиДляЗаказаТоваровКоличествоЗаказ.Видимость 	= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "Мин. остаток" Тогда
		Элементы.ПоказателиДляЗаказаТоваровМинимальныйОстаток.Видимость = ТекДанные.Показывать;
	ИначеЕсли Лев(ТекДанные.Показатель, 13) = "Факт. остаток" Тогда
		Элементы.ПоказателиДляЗаказаТоваровФактическийОстаток.Видимость = ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "Распределено" Тогда
		Элементы.ПоказателиДляЗаказаТоваровРаспределено.Видимость 		= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "Нужно" Тогда
		Элементы.ПоказателиДляЗаказаТоваровРаспр_Нужно.Видимость 		= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "План2Больш" Тогда
		Элементы.ПоказателиДляЗаказаТоваровРаспр_План.Видимость 		= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "Избыток" Тогда
		Элементы.ПоказателиДляЗаказаТоваровРаспр_Избыток.Видимость		= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "Запас" Тогда
		Элементы.ПоказателиДляЗаказаТоваровРаспр_Запас.Видимость 		= ТекДанные.Показывать;
	ИначеЕсли ТекДанные.Показатель = "План продаж" Тогда
		Элементы.ПоказателиДляЗаказаТоваровКоличествоПланПродаж.Видимость 		= ТекДанные.Показывать;
	ИначеЕсли Лев(ТекДанные.Показатель, 13) = "План. остаток" Тогда
		Элементы.ПоказателиДляЗаказаТоваровПлановыйОстатокНаКонецДня.Видимость 	= ТекДанные.Показывать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРаспределениеПоТТКлиент()
	
	мЕстьДанныеРаспределения = ДопМодульСервер.ЕстьДанныеРаспределенияПоТТНаSQL(ЭтаФорма.НомерРаспределенияПоТТ);
	Если НЕ мЕстьДанныеРаспределения Тогда
		Если ТекущаяДата() > (ЭтаФорма.ДатаЗапускаРаспределенияПоТТ + 15 * 60) Тогда
			ОтключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент");
			Сообщить("Данные распределения не получены из SQL!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//
	ОтключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент");
	Сообщить("Данные распределения появились в SQL.");
	
	ЭтаФорма.ДатаЗаказов = ЭтаФорма.ДатаЗаказов + 86400;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРаспределениеПоТТ()

	ЭтаФорма.ПодключитьОбработчикОжидания("ПолучитьРаспределениеПоТТКлиент", 15);
	
КонецПроцедуры

Процедура ОтправитьДанныеДляРаспределенияПоТТСервер(мСписокТорговыхТочек, мСписокНоменклатуры)
	
	ТекстНомер_Р = ДопМодульСервер.ОтправитьДанныеДляРаспределенияПоТТ(ЭтаФорма.ДатаЗаказов,
							мСписокТорговыхТочек, мСписокНоменклатуры, Объект.Расчетчик.Склад, Объект.Расчетчик, ЭтаФорма.ОстаткиСледДнем, Ложь);
	
	Элементы.НадписьТекНомерРаспределенияПоТТ.Заголовок = ТекстНомер_Р;
	Если НЕ ТекстНомер_Р = "" Тогда
		ЭтаФорма.НомерРаспределенияПоТТ = Число(ТекстНомер_Р);
	Иначе
		ЭтаФорма.НомерРаспределенияПоТТ = 0;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.06.08 ИП-00018624
&НаСервереБезКонтекста
Процедура СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры)
	Обработки.РаспределениеТоваровПоТорговымТочкам.СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры);
КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаКлиенте
Процедура СделатьРаспределение_2016(Команда)

	Если ЭтаФорма.ДатаЗаказов > ТекущаяДата()
			И Вопрос("Будет запущено распределение на " + Формат(ЭтаФорма.ДатаЗаказов + 86400, "ДЛФ=Д") +
						", а завтра " + Формат(ТекущаяДата() + 86400, "ДЛФ=Д") + ". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
    //
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыПоказателиЗаказов.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокНоменклатуры = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	КонецЕсли;
	мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мСписокНоменклатуры.ВыгрузитьЗначения());
	Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
		Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мСписокНоменклатуры.ВыгрузитьЗначения());
	Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
		Если мСписокНоменклатуры.НайтиПоЗначению(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	
	
	мСписокТорговыхТочек = Новый СписокЗначений;
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекЗначения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				Если НЕ ПолучитьТТНеУчаствуетВРаспределении(ТекДанные.ТорговаяТочка) Тогда
					мСписокТорговыхТочек.Добавить(ТекДанные.ТорговаяТочка);
				КонецЕсли;
			Иначе
				МассивТТ = ДоступныеТорговыеТочки("ПоНоменклатуре", Объект.Расчетчик, СписокНоменклатуры);
				мСписокТорговыхТочек.ЗагрузитьЗначения(МассивТТ); 
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивТТ = ДоступныеТорговыеТочки("ПоНоменклатуре", Объект.Расчетчик, СписокНоменклатуры);
		мСписокТорговыхТочек.ЗагрузитьЗначения(МассивТТ);
	КонецЕсли;
	
	//
	ЕстьНеПоступившиеЗаказы = ДопМодульСервер.ПроверитьНепоступившиеЗаказы(ЭтаФорма.ДатаЗаказов + 86400, мСписокНоменклатуры);
	Если ЕстьНеПоступившиеЗаказы Тогда
	//	Сообщить("Распределение невозможно.");
	//	Возврат;
	КонецЕсли;
	
	//+++АК SHEP 2018.06.08 ИП-00018624
	СообщитьОНаличииБлокируемойНоменклатурыПоКраснымМаркерам(мСписокНоменклатуры);
	//---АК SHEP 2018.06.08
	
	//
	Сообщить("Подготовка данных для отправки...");
	ОтправитьДанныеДляРаспределенияПоТТСервер(мСписокТорговыхТочек, мСписокНоменклатуры);
	Если ЭтаФорма.НомерРаспределенияПоТТ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Создание распределения");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	ЭтаФорма.РаспределениеПоТТВыполнено 	= Ложь;
	ЭтаФорма.ДатаЗапускаРаспределенияПоТТ 	= ТекущаяДата();
	//Элементы.НадписьДатаЗапускаРаспределения.Заголовок = "Запуск: " + Формат(ЭтаФорма.ДатаЗапускаРаспределенияПоТТ, "ДФ='yyyy-MM-dd HH:mm'");
	
	//
	Сообщить("Получение данных распределения из SQL...");
	ПолучитьРаспределениеПоТТ();
	
	//
	ДопМодульСервер.УстановитьПризнакБлокировкиДляРаспределения(мСписокНоменклатуры.ВыгрузитьЗначения(), ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик), Ложь);
	
	//
	УстановитьОтборПоказателиДляЗаказаПоДате();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)
	
	Перем ТекНомерНедели;
	
	ТекНомерНедели = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ЭтаФорма.ДатаОстатков);
	Элементы.НадписьТекНомерНеделиОстатков.Заголовок 			= Формат(ТекНомерНедели, "ЧГ=");
	Элементы.НадписьТекНомерНеделиПоказателиЗаказов.Заголовок 	= Формат(ТекНомерНедели, "ЧГ=");
	
	УстановитьОтборФактическихОстатков();
	
КонецПроцедуры

Процедура РаспределениеПоТТСоздатьНеделюСервер()
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоТТСоздатьНеделю(Команда)
	
	Если ЭтаФорма.НомерНеделиРаспределенияПоТТ = 0 Тогда
		Сообщить("Не указан номер недели!");
		Возврат;
	КонецЕсли;
	
	
	РаспределениеПоТТСоздатьНеделюСервер();
	
КонецПроцедуры

Процедура РасчетЗаказовПоставщикуСервер()
	
	// служебные переменные
	мДеньНеделиДатыЗаказа = ПолучитьДеньНеделиПоДате(ЭтаФорма.ДатаЗаказов);
	ТекСклад = Объект.Расчетчик.Склад;
    	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗаказов"			, ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("СледующаяДата"		, КонецДня(ЭтаФорма.ДатаЗаказов) + 86400);
	Запрос.УстановитьПараметр("Расчетчик"			, Объект.Расчетчик);
	Запрос.УстановитьПараметр("Склад"				, ТекСклад);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, ЭтаФорма.СписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокТорговыхТочек"	, ЭтаФорма.СписокТорговыхТочек);
	Запрос.УстановитьПараметр("ДеньНеделиДатыЗаказа", мДеньНеделиДатыЗаказа);
	
	мТаблицаДат = ПолучитьТаблицуНеделиОтДаты(ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ТаблицаДат", мТаблицаДат);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата,
	|	ТаблицаДат.ДеньНедели КАК ДеньНедели
	|ПОМЕСТИТЬ ВТТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ФактическиеОстаткиТоваров.ТорговаяТочка КАК ТорговаяТочка,
	|	ФактическиеОстаткиТоваров.Количество
	|ПОМЕСТИТЬ ВТФактическиеОстаткиВТТ
	|ИЗ
	|	РегистрСведений.ФактическиеОстаткиТоваров КАК ФактическиеОстаткиТоваров
	|ГДЕ
	|	ФактическиеОстаткиТоваров.Дата = &ДатаЗаказов
	|	И ФактическиеОстаткиТоваров.ТорговаяТочка В(&СписокТорговыхТочек)
	|	И ФактическиеОстаткиТоваров.Номенклатура В(&СписокНоменклатуры)
	|	И НЕ ФактическиеОстаткиТоваров.Количество = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПродажПоДнямНедели.Дата КАК Дата,
	|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	|	ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка,
	|	ПланыПродажПоДнямНедели.Количество
	|ПОМЕСТИТЬ ВТПланыПродаж
	|ИЗ
	|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	|ГДЕ
	|	ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаЗаказов И ДОБАВИТЬКДАТЕ(&ДатаЗаказов, ДЕНЬ, 6)
	|	И ПланыПродажПоДнямНедели.ТорговаяТочка В(&СписокТорговыхТочек)
	|	И ПланыПродажПоДнямНедели.Номенклатура В(&СписокНоменклатуры)
	|	И НЕ ПланыПродажПоДнямНедели.Количество = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРаспределенныеПоТТ.Дата КАК Дата,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК ТорговаяТочка,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ПроизводителиТоваров.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	ОстаткиРаспределенныеПоТТ.Количество
	|ПОМЕСТИТЬ ВТОстаткиРаспределенныеПоТТ
	|ИЗ
	|	РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|		ПО (ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|			И ((ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры)) = ОстаткиРаспределенныеПоТТ.Характеристика)
	|ГДЕ
	|	ОстаткиРаспределенныеПоТТ.Дата МЕЖДУ &ДатаЗаказов И ДОБАВИТЬКДАТЕ(&ДатаЗаказов, ДЕНЬ, 6)
	|	И ОстаткиРаспределенныеПоТТ.ТорговаяТочка В(&СписокТорговыхТочек)
	|	И ОстаткиРаспределенныеПоТТ.Номенклатура В(&СписокНоменклатуры)
	|	И НЕ ОстаткиРаспределенныеПоТТ.Количество = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГрафик.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ВТТаблицаДат.Дата, НЕДЕЛЯ, ТЧГрафик.КоличествоНедель) КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.График КАК ТЧГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДат КАК ВТТаблицаДат
	|		ПО (ВТТаблицаДат.ДеньНедели = ТЧГрафик.ДеньПоставки)
	|ГДЕ
	|	ТЧГрафик.ДеньЗаказа = &ДеньНеделиДатыЗаказа
	|	И ТЧГрафик.Ссылка.СтруктурноеПодразделение = &Склад
	|	И НЕ ТЧГрафик.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Номенклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ,
	|	ТЧТовары.Ссылка.Владелец КАК Поставщик,
	|	ВТГрафики.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТПоставщикиИТовары
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафики КАК ВТГрафики
	|		ПО (ВТГрафики.Ссылка = ТЧТовары.Ссылка)
	|ГДЕ
	|	ТЧТовары.Ссылка.СтруктурноеПодразделение = &Склад
	|	И НЕ ВТГрафики.ДатаПоставки ЕСТЬ NULL 
	|	И ТЧТовары.Номенклатура В(&СписокНоменклатуры)
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.Номенклатура.ГруппаНоменклатурыУРЗ,
	|	ТЧТовары.Ссылка.Владелец,
	|	ВТГрафики.ДатаПоставки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ГруппаУРЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоставщикиИТовары.Номенклатура КАК Номенклатура,
	|	ПорядокОбеспеченияТТ.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПоставщикиИТовары.Поставщик КАК Поставщик,
	|	ВТПоставщикиИТовары.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТПоставщикиИТовары КАК ВТПоставщикиИТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&СледующаяДата,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ПорядокОбеспеченияТТ
	|		ПО ВТПоставщикиИТовары.ГруппаУРЗ = ВТПорядокОбеспеченияТТ.ГруппаУРЗ
	|ГДЕ
	|	ПорядокОбеспеченияТТ.Расчетчик = &Склад 
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоставщикиИТовары.Номенклатура,
	|	ПорядокОбеспеченияТТ.ТорговаяТочка,
	|	ВТПоставщикиИТовары.Поставщик,
	|	ВТПоставщикиИТовары.ДатаПоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.Номенклатура КАК Номенклатура,
	|	ВТОсновная.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТОсновная.Поставщик КАК Поставщик,
	|	ВТОсновная.ДатаПоставки КАК ДатаПоставки,
	|	ЕСТЬNULL(ВТФактическиеОстаткиВТТ.Количество, 0) КАК ФактОстатокВТТ
	|ПОМЕСТИТЬ ВТПромежуточная
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОстаткиВТТ КАК ВТФактическиеОстаткиВТТ
	|		ПО (ВТФактическиеОстаткиВТТ.Номенклатура = ВТОсновная.Номенклатура)
	|			И (ВТФактическиеОстаткиВТТ.ТорговаяТочка = ВТОсновная.ТорговаяТочка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточная.ДатаПоставки КАК ДатаПоставки,
	|	ВТПромежуточная.Поставщик КАК Поставщик,
	|	ВТПромежуточная.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПромежуточная.Номенклатура КАК Номенклатура,
	|	ВТПромежуточная.ФактОстатокВТТ КАК ФактОстатокВТТ,
	|	СУММА(ЕСТЬNULL(ВТПланыПродаж.Количество, 0)) КАК ПланПродажВТТ,
	|	СУММА(ЕСТЬNULL(ВТОстаткиРаспределенныеПоТТ.Количество, 0)) КАК РаспределеноВТТ
	|ПОМЕСТИТЬ ВТПоследняя
	|ИЗ
	|	ВТПромежуточная КАК ВТПромежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПланыПродаж КАК ВТПланыПродаж
	|		ПО (ВТПланыПродаж.Номенклатура = ВТПромежуточная.Номенклатура)
	|			И (ВТПланыПродаж.ТорговаяТочка = ВТПромежуточная.ТорговаяТочка)
	|			И (ВТПланыПродаж.Дата < ВТПромежуточная.ДатаПоставки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиРаспределенныеПоТТ КАК ВТОстаткиРаспределенныеПоТТ
	|		ПО (ВТОстаткиРаспределенныеПоТТ.Номенклатура = ВТПромежуточная.Номенклатура)
	|			И (ВТОстаткиРаспределенныеПоТТ.ТорговаяТочка = ВТПромежуточная.ТорговаяТочка)
	|			И (ВТОстаткиРаспределенныеПоТТ.Поставщик = ВТПромежуточная.Поставщик)
	|			И (ВТОстаткиРаспределенныеПоТТ.Дата < ВТПромежуточная.ДатаПоставки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПромежуточная.ДатаПоставки,
	|	ВТПромежуточная.Поставщик,
	|	ВТПромежуточная.ТорговаяТочка,
	|	ВТПромежуточная.Номенклатура,
	|	ВТПромежуточная.ФактОстатокВТТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокПредзаказы.Ссылка КАК Ссылка,
	|	ДокПредзаказы.ДатаПоступления КАК ДатаПоставки,
	|	ДокПредзаказы.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТШаблоныДокументов
	|ИЗ
	|	Документ.Предзаказ КАК ДокПредзаказы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДокПредзаказы.Дата, ДЕНЬ) = &ДатаЗаказов
	|	И ДокПредзаказы.Расчетчик = &Расчетчик
	|	И ДокПредзаказы.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследняя.Поставщик КАК Поставщик,
	|	ВТПоследняя.ДатаПоставки КАК ДатаПоставки,
	|	ЕСТЬNULL(ВТШаблоныДокументов.Ссылка, ЗНАЧЕНИЕ(Документ.Предзаказ.ПустаяСсылка)) КАК ДокПредзаказ
	|ИЗ
	|	ВТПоследняя КАК ВТПоследняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШаблоныДокументов КАК ВТШаблоныДокументов
	|		ПО (ВТШаблоныДокументов.ДатаПоставки = ВТПоследняя.ДатаПоставки)
	|			И (ВТШаблоныДокументов.Поставщик = ВТПоследняя.Поставщик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследняя.Поставщик КАК Поставщик,
	|	ВТПоследняя.ДатаПоставки КАК ДатаПоставки,
	|	ВТПоследняя.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПоследняя.Номенклатура КАК Номенклатура,
	|	ВТПоследняя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВТПоследняя.ФактОстатокВТТ + ВТПоследняя.РаспределеноВТТ - ВТПоследняя.ПланПродажВТТ КАК Количество
	|ИЗ
	|	ВТПоследняя КАК ВТПоследняя
	|ГДЕ
	|	ВТПоследняя.ФактОстатокВТТ + ВТПоследняя.РаспределеноВТТ - ВТПоследняя.ПланПродажВТТ > 0
	|ИТОГИ ПО
	|	Поставщик,
	|	ДатаПоставки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаШапка = РезультатыЗапроса[11];
	Если РезультатЗапросаШапка.Пустой() Тогда
		Сообщить("Нет данных для формирования заказов!");
		Возврат;
	КонецЕсли;
	
	СтрокаОтбора = "Поставщик, ДатаПоставки";
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	
	ВыборкаШапка 	= РезультатЗапросаШапка.Выбрать();
   	ТаблицаТовары 	= РезультатыЗапроса[12].Выгрузить();
	
	
	мДокументыПредЗаказ = Документы.Предзаказ;
	
	Пока ВыборкаШапка.Следующий() Цикл
		
		Если ВыборкаШапка.ДокПредзаказ.Пустая() Тогда
			ОбъектДокумента = мДокументыПредЗаказ.СоздатьДокумент();
			ОбъектДокумента.Дата 			= ЭтаФорма.ДатаЗаказов;
			ОбъектДокумента.Расчетчик		= Объект.Расчетчик;
			ОбъектДокумента.Склад			= Объект.Расчетчик.Склад;
			ОбъектДокумента.Поставщик		= ВыборкаШапка.Поставщик;
			ОбъектДокумента.ДатаПоступления	= ВыборкаШапка.ДатаПоставки;
		Иначе // уже был создан пустой шаблон документа
			ОбъектДокумента = ВыборкаШапка.ДокПредзаказ.ПолучитьОбъект();
			ОбъектДокумента.Товары.Очистить();
		КонецЕсли;
		
		ТЧТовары = ОбъектДокумента.Товары;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ОбъектДокумента, СтрокаОтбора);
		СтрокиТаблицы = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			НоваяСтрока = ТЧТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
		Попытка
			ОбъектДокумента.Записать();
			Сообщить("Документ " + ОбъектДокумента + " записан.");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.Предзаказы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗаказовПоставщику(Команда)
	
	РасчетЗаказовПоставщикуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаКлиентТовары()
	
	Перем ТекДанныеНом, ТекНоменклатура;
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыПоказателиЗаказов.ТекущиеДанные;
	ТекНоменклатура = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Номенклатура	, Неопределено);
	ЭтоПолныйАналог = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Аналог			, Ложь);
	
	УстановитьОтборПоказателиДляЗаказаПоТоварам(ТекНоменклатура, ЭтоПолныйАналог);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоказателиДляЗаказаКлиентТТ()
	
	Перем ТекДанныеТТ, ТекТТ;
	
	ТекДанныеТТ	= Элементы.ТаблицаТорговыхТочекЗначения.ТекущиеДанные;
	ТекТТ 		= ?(НЕ ТекДанныеТТ = Неопределено, ТекДанныеТТ.ТорговаяТочка, Неопределено);
	
	УстановитьОтборПоказателиДляЗаказаПоТТ(ТекТТ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПоказателиЗаказовПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТовары", 0.1, Истина);
	
КонецПроцедуры

Процедура УдалитьРаспределениеСервер(мСписокТорговыхТочек, мСписокНоменклатуры, мДатаРаспределения)
	
	мРегистр = РегистрыСведений.ОстаткиРаспределенныеПоТТ;
	
	Для Каждого ТекТорговаяТочка Из мСписокТорговыхТочек Цикл
		Для Каждого ТекНоменклатура Из мСписокНоменклатуры Цикл
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дата.Установить(мДатаРаспределения);
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(ТекТорговаяТочка);
			НаборЗаписей.Отбор.Номенклатура.Установить(ТекНоменклатура);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				Попытка
					НаборЗаписей.Записать();
				Исключение
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = "Не удалось очистить запись регистра ""ОстаткиРаспределенныеПоТТ""";
					СообщениеПользователю.Сообщить();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРаспределениеПоТТ(Команда)
	
	//
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыПоказателиЗаказов.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокНоменклатуры = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения();
	КонецЕсли;
	мМассивПолныхАналогов = ДопМодульСервер.ПолучитьМассивПолныхАналоговТоваров(мСписокНоменклатуры);
	Для Каждого ТекНоменклатура Из мМассивПолныхАналогов Цикл
		Если мСписокНоменклатуры.Найти(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	мМассивСоставаКомплекта = ДопМодульСервер.ПолучитьМассивСоставаКомплекта(мСписокНоменклатуры);
	Для Каждого ТекНоменклатура Из мМассивСоставаКомплекта Цикл
		Если мСписокНоменклатуры.Найти(ТекНоменклатура) = Неопределено Тогда
			мСписокНоменклатуры.Добавить(ТекНоменклатура);
		КонецЕсли;
	КонецЦикла;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекЗначения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокТорговыхТочек = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные = Неопределено)
					И ТипЗнч(ТекДанные.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				мСписокТорговыхТочек.Добавить(ТекДанные.ТорговаяТочка);
			Иначе
				мСписокТорговыхТочек = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокТорговыхТочек = ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения();
	КонецЕсли;
	
	//Если мСписокТорговыхТочек.Количество() > 1
	//		И мСписокНоменклатуры.Количество() > 1 Тогда
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Необходимо выбрать одну торговую точку или один товар";
	//	СообщениеПользователю.Сообщить();
	//	Возврат;
	//КонецЕсли;
	
	//
	Если Вопрос("Данные распределения будут удалены. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьРаспределениеСервер(мСписокТорговыхТочек, мСписокНоменклатуры, ЭтаФорма.ДатаЗаказов);
		Элементы.ПоказателиДляЗаказаТоваров.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекЗначенияПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТТ", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиДляЗаказаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.ПоказателиДляЗаказаТоваров.ТекущийЭлемент = Элементы.ПоказателиДляЗаказаТоваровРаспределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПоказателиДляЗаказаТоваров.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Дата"				, ТекДанные.Дата);
	СтруктураЗаписи.Вставить("Расчетчик"		, Объект.Расчетчик);
	СтруктураЗаписи.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("ТорговаяТочка"	, ТекДанные.ТорговаяТочка);
	ТекХарактеристика = ПолучитьХарактеристикуНоменклатуры(ТекДанные.Поставщик, ТекДанные.Номенклатура);
	СтруктураЗаписи.Вставить("Характеристика"	, ТекХарактеристика);
	
	СтруктураПараметров = Новый Структура("Ключ");
	СтруктураПараметров.Вставить("п_Склад"	, ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик));
	СтруктураПараметров.Вставить("СписокТТ"	, ЭтаФорма.СписокТорговыхТочек);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи);
		СтруктураПараметров.Ключ = мКлючЗаписи;
		ОткрытьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.ФормаЗаписи", СтруктураПараметров);
	Исключение
		СтруктураЗаписи.Вставить("Характеристика", Неопределено);
		Попытка
			мКлючЗаписи = ПолучитьКлючЗаписиОстаткиРаспределенныеПоТТ(СтруктураЗаписи);
			СтруктураПараметров.Ключ = мКлючЗаписи;
			ОткрытьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.ФормаЗаписи", СтруктураПараметров);
		Исключение
			СтруктураПараметров.Удалить("Ключ");
			// новая запись в регистре
			ФормаНового = ПолучитьФорму("РегистрСведений.ОстаткиРаспределенныеПоТТ.Форма.ФормаЗаписи", СтруктураПараметров);
			ФормаНового.Запись.Дата 			= ТекДанные.Дата;
			ФормаНового.Запись.Расчетчик 		= Объект.Расчетчик;
			ФормаНового.Запись.ТорговаяТочка 	= ТекДанные.ТорговаяТочка;
			ФормаНового.Запись.Номенклатура 	= ТекДанные.Номенклатура;
			ФормаНового.Запись.Характеристика 	= ТекХарактеристика;
			ФормаНового.Запись.Количество 		= ТекДанные.Распределено;
			ФормаНового.ОткрытьМодально();

		КонецПопытки;
	КонецПопытки;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТовары"	, 0.1, Истина);
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборПоказателиДляЗаказаКлиентТТ"		, 0.1, Истина);
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ТОВАРНЫЕ ОГРАНИЧЕНИЯ"

&НаКлиенте
Процедура УстановитьОтборТоварныхОграниченийНаТочкахНаКлиенте()
	
	Перем ТекДанныеНом, ТекНоменклатура, ТекДанныеТТ, ТекТТ;
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыТоварныеОграничения.ТекущиеДанные;
	ТекНоменклатура = ?(НЕ ТекДанныеНом = Неопределено, ТекДанныеНом.Номенклатура, Неопределено);
	ТекДанныеТТ		= Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	ТекТТ 			= ?(НЕ ТекДанныеТТ = Неопределено, ТекДанныеТТ.ТорговаяТочка, Неопределено);
	
	УстановитьОтборТоварныеОграниченияНаТочках(ТекНоменклатура, ТекТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТоварныхОграниченийНаТочках()
	
	Перем ТекДанныеНом, ТекДанныеТТ;
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыТоварныеОграничения.ТекущиеДанные;
	ТекДанныеТТ 	= Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	Если ТекДанныеНом = Неопределено
			И ТекДанныеТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборТоварныхОграниченийНаТочкахНаКлиенте", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыТоварныеОграниченияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборТоварныхОграниченийНаТочках();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекТоварныеОграниченияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборТоварныхОграниченийНаТочках();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияДобавить(Команда)
	
	ТекДанныеНом 	= Элементы.ДеревоНоменклатурыТоварныеОграничения.ТекущиеДанные;
	ТекДанныеТТ 	= Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	Если ТекДанныеНом = Неопределено
			ИЛИ ТекДанныеТТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ТоварныеОграниченияНаТочках.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.ГруппаНоменклатуры 	= ПолучитьЗначениеИзДерева(ТекДанныеНом.Номенклатура, "Номенклатура");
	ФормаНового.Запись.ТорговаяТочка 		= ПолучитьЗначениеИзДерева(ТекДанныеТТ.ТорговаяТочка, "СтруктурныеЕдиницы");
	ФормаНового.ОткрытьМодально();
	
	Элементы.ТоварныеОграниченияНаТочках.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияСкопировать(Команда)

	ТекДанные = Элементы.ТоварныеОграниченияНаТочках.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("РегистрСведений.ТоварныеОграниченияНаТочках.Форма.ФормаЗаписи",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	ФормаНового.Запись.ГруппаНоменклатуры 	= ТекДанные.ГруппаНоменклатуры;
	ФормаНового.Запись.ТорговаяТочка 		= ТекДанные.ТорговаяТочка;
	ФормаНового.Запись.МинимальныйОстаток 	= ТекДанные.МинимальныйОстаток;
	ФормаНового.Запись.МаксимальныйОстаток 	= ТекДанные.МаксимальныйОстаток;
	ФормаНового.ОткрытьМодально();
	
	Элементы.ТоварныеОграниченияНаТочках.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияИзменить(Команда)

	ТекДанные = Элементы.ТоварныеОграниченияНаТочках.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ГруппаНоменклатуры"	, ТекДанные.ГруппаНоменклатуры);
	СтруктураЗаписи.Вставить("ТорговаяТочка"		, ТекДанные.ТорговаяТочка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиТоварныеОграничения(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ТоварныеОграниченияНаТочках.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		
		Элементы.ТоварныеОграниченияНаТочках.Обновить();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписьРегистраТоварныеОграничения(СтруктураЗначенийИзмерений)
	
	НаборЗаписей = РегистрыСведений.ТоварныеОграниченияНаТочках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТорговаяТочка.Установить(СтруктураЗначенийИзмерений.ТорговаяТочка);
	НаборЗаписей.Отбор.ГруппаНоменклатуры.Установить(СтруктураЗначенийИзмерений.ГруппаНоменклатуры);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось удалить запись регистра ""Товарные ограничения на точках""";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияУдалить(Команда)

	ТекДанные = Элементы.ТоварныеОграниченияНаТочках.ТекущиеДанные;
	Если ТекДанные = Неопределено
			ИЛИ Вопрос("Запись будет удалена. Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ГруппаНоменклатуры"	, ТекДанные.ГруппаНоменклатуры);
	СтруктураЗаписи.Вставить("ТорговаяТочка"		, ТекДанные.ТорговаяТочка);
	
	УдалитьЗаписьРегистраТоварныеОграничения(СтруктураЗаписи);
		
	Элементы.ТоварныеОграниченияНаТочках.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныеОграниченияДобавитьВсеТТСервер(мНоменклатура, мСписокТорговыхТочек)
	
	мРегистр = РегистрыСведений.ТоварныеОграниченияНаТочках;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, КонецДня(ТекущаяДата() + 86400));
	Запрос.УстановитьПараметр("Номенклатура"		, мНоменклатура);
	Запрос.УстановитьПараметр("СписокТорговыхТочек"	, мСписокТорговыхТочек);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В (&СписокТорговыхТочек)
	|				И Номенклатура = &Номенклатура) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговаяТочка 		= Выборка.ТорговаяТочка;
		МенеджерЗаписи.ГруппаНоменклатуры 	= мНоменклатура;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписи.ТорговаяТочка 		= Выборка.ТорговаяТочка;
		МенеджерЗаписи.ГруппаНоменклатуры 	= мНоменклатура;
		Попытка
			МенеджерЗаписи.Записать();  сообщить(Выборка.ТорговаяТочка);
		Исключение
			Сообщить("Не удалось записать товарные ограничения на точках" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияДобавитьВсеТТ(Команда)

	ТекДанныеНом = Элементы.ДеревоНоменклатурыТоварныеОграничения.ТекущиеДанные;
	Если ТекДанныеНом = Неопределено
			ИЛИ ТекДанныеНом.Номенклатура = "<Все>" Тогда
		Сообщить("Необходимо выбрать номенклатуру!");
		Возврат;
	КонецЕсли;
	
	ТоварныеОграниченияДобавитьВсеТТСервер(ТекДанныеНом.Номенклатура, ЭтаФорма.СписокТорговыхТочек);
		
	Элементы.ТоварныеОграниченияНаТочках.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварныеОграниченияДобавитьВсюНоменклатуруСервер(мТорговаяТочка, мСписокНоменклатуры)
	
	мРегистр = РегистрыСведений.ТоварныеОграниченияНаТочках;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, КонецДня(ТекущаяДата() + 86400));
	Запрос.УстановитьПараметр("ТорговаяТочка"		, мТорговаяТочка);
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, мСписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочекСрезПоследних.Выведена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговаяТочка 		= мТорговаяТочка;
		МенеджерЗаписи.ГруппаНоменклатуры 	= Выборка.Номенклатура;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписи.ТорговаяТочка 		= мТорговаяТочка;
		МенеджерЗаписи.ГруппаНоменклатуры 	= Выборка.Номенклатура;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить("Не удалось записать товарные ограничения на точках" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияДобавитьВсюНоменклатуру(Команда)

	ТекДанныеТТ = Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	Если ТекДанныеТТ = Неопределено
			ИЛИ ТекДанныеТТ.ТорговаяТочка = "<Все>" Тогда
		Сообщить("Необходимо выбрать торговую точку!");
		Возврат;
	КонецЕсли;
	
	ТоварныеОграниченияДобавитьВсюНоменклатуруСервер(ТекДанныеТТ.ТорговаяТочка, ЭтаФорма.СписокНоменклатуры);
		
	Элементы.ТоварныеОграниченияНаТочках.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеОграниченияНаТочкахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ТоварныеОграниченияНаТочках.ТекущиеДанные;
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ГруппаНоменклатуры"	, ТекДанные.ГруппаНоменклатуры);
	СтруктураЗаписи.Вставить("ТорговаяТочка"		, ТекДанные.ТорговаяТочка);
	
	Попытка
		мКлючЗаписи = ПолучитьКлючЗаписиТоварныеОграничения(СтруктураЗаписи);
		ОткрытьФормуМодально("РегистрСведений.ТоварныеОграниченияНаТочках.ФормаЗаписи", Новый Структура("Ключ", мКлючЗаписи));
		
		Элементы.ТоварныеОграниченияНаТочках.Обновить();
	Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КопироватьТоварныеОграниченияДляТТСервер(СтруктураПараметров)
	
	мТорговаяТочка 		= СтруктураПараметров.ТорговаяТочкаНовая;
	мСписокНоменклатуры = СтруктураПараметров.МассивНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка"		, СтруктураПараметров.ТорговаяТочка);
	Запрос.УстановитьПараметр("ТорговаяТочкаНовая"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, мСписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ТорговаяТочкаНовая КАК ТорговаяТочка,
	|	ТоварныеОграниченияНаТочках.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	ТоварныеОграниченияНаТочках.МинимальныйОстаток КАК МинимальныйОстаток,
	|	ТоварныеОграниченияНаТочках.МаксимальныйОстаток КАК МаксимальныйОстаток
	|ИЗ
	|	РегистрСведений.ТоварныеОграниченияНаТочках КАК ТоварныеОграниченияНаТочках
	|ГДЕ
	|	ТоварныеОграниченияНаТочках.ТорговаяТочка = &ТорговаяТочка
	|	И ТоварныеОграниченияНаТочках.ГруппаНоменклатуры В(&МассивНоменклатуры)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Нет данных для копирования!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	мТоварныеОграничения = РегистрыСведений.ТоварныеОграниченияНаТочках;
	
	Для Каждого ЭлементСписка Из мСписокНоменклатуры Цикл
		// запись по новой торговой точке
		НаборЗаписей = мТоварныеОграничения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТорговаяТочка.Установить(мТорговаяТочка);
		НаборЗаписей.Отбор.ГруппаНоменклатуры.Установить(ЭлементСписка.Значение);
		НаборЗаписей.Прочитать();
		
		ВремТаблица = ТаблицаЗапроса.Скопировать(Новый Структура("ГруппаНоменклатуры", ЭлементСписка.Значение));
		Если ВремТаблица.Количество() > 0 Тогда
			НаборЗаписей.Загрузить(ВремТаблица);
		Иначе
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				НаборЗаписей = Неопределено; // обнуление переменной (забота о памяти приложения 1С)
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьТоварныеОграниченияДляТТ(Команда)
	
	Если ЭтаФорма.ТорговаяТочкаДляКопии.Пустая() Тогда
		Сообщить("Не выбрана торговая точка, копию товарных ограничений которой необходимо сделать!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.СписокТорговыхТочек.НайтиПоЗначению(ЭтаФорма.ТорговаяТочкаДляКопии) = Неопределено Тогда
		Сообщить("Выбрана торговая точка не из списка!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элементы.ДеревоНоменклатурыТоварныеОграничения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокНоменклатуры = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные2 = ЭтаФорма.ДеревоТоваров.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные2 = Неопределено)
					И ТипЗнч(ТекДанные2.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				мСписокНоменклатуры.Добавить(ТекДанные2.Номенклатура);
			Иначе
				мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТорговаяТочка"		, ЭтаФорма.ТорговаяТочкаДляКопии);
	СтруктураПараметров.Вставить("ТорговаяТочкаНовая"	, ТекДанные.ТорговаяТочка);
	СтруктураПараметров.Вставить("МассивНоменклатуры"	, мСписокНоменклатуры);
	
	КопироватьТоварныеОграниченияДляТТСервер(СтруктураПараметров);
	
	УстановитьОтборТоварныхОграниченийНаТочках();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КопироватьТоварныеОграниченияДляТовараСервер(СтруктураПараметров)
	
	мНоменклатура 	= СтруктураПараметров.НоменклатураНовая;
	мСписокТТ 		= СтруктураПараметров.МассивТТ;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"		, СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("НоменклатураНовая"	, мНоменклатура);
	Запрос.УстановитьПараметр("МассивТТ"			, мСписокТТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныеОграниченияНаТочках.ТорговаяТочка КАК ТорговаяТочка,
	|	&НоменклатураНовая КАК ГруппаНоменклатуры,
	|	ТоварныеОграниченияНаТочках.МинимальныйОстаток КАК МинимальныйОстаток,
	|	ТоварныеОграниченияНаТочках.МаксимальныйОстаток КАК МаксимальныйОстаток
	|ИЗ
	|	РегистрСведений.ТоварныеОграниченияНаТочках КАК ТоварныеОграниченияНаТочках
	|ГДЕ
	|	ТоварныеОграниченияНаТочках.ТорговаяТочка В(&МассивТТ)
	|	И ТоварныеОграниченияНаТочках.ГруппаНоменклатуры = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Нет данных для копирования!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	мТоварныеОграничения = РегистрыСведений.ТоварныеОграниченияНаТочках;
	
	Для Каждого ЭлементСписка Из мСписокТТ Цикл
		// запись по новой номенклатуре
		НаборЗаписей = мТоварныеОграничения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТорговаяТочка.Установить(ЭлементСписка.Значение);
		НаборЗаписей.Отбор.ГруппаНоменклатуры.Установить(мНоменклатура);
		НаборЗаписей.Прочитать();
		
		ВремТаблица = ТаблицаЗапроса.Скопировать(Новый Структура("ТорговаяТочка", ЭлементСписка.Значение));
		Если ВремТаблица.Количество() > 0 Тогда
			НаборЗаписей.Загрузить(ВремТаблица);
		Иначе
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			Иначе
				НаборЗаписей = Неопределено; // обнуление переменной (забота о памяти приложения 1С)
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьТоварныеОграниченияДляТовара(Команда)
	
	Если ЭтаФорма.НоменклатураДляКопии.Пустая() Тогда
		Сообщить("Не выбран товар, копию товарных ограничений которого необходимо сделать!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.СписокНоменклатуры.НайтиПоЗначению(ЭтаФорма.НоменклатураДляКопии) = Неопределено Тогда
		Сообщить("Выбран товар не из списка!");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоНоменклатурыТоварныеОграничения.ТекущиеДанные;
	Если ТекДанные = Неопределено
			ИЛИ ТекДанные.Номенклатура = "<Все>" Тогда
		Сообщить("Необходимо выбрать товар!");
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элементы.ТаблицаТорговыхТочекТоварныеОграничения.ВыделенныеСтроки;
	Если ТекВыделенныеСтроки.Количество() > 0 Тогда
		мСписокТТ = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл	
			ТекДанные2 = ЭтаФорма.ТаблицаТорговыхТочек.НайтиПоИдентификатору(СтрокаТаблицы);
			Если (НЕ ТекДанные2 = Неопределено)
					И ТипЗнч(ТекДанные2.ТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				мСписокТТ.Добавить(ТекДанные2.ТорговаяТочка);
			Иначе
				мСписокТТ = ЭтаФорма.СписокТорговыхТочек;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСписокТТ = ЭтаФорма.СписокТорговыхТочек;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура"		, ЭтаФорма.НоменклатураДляКопии);
	СтруктураПараметров.Вставить("НоменклатураНовая", ТекДанные.Номенклатура);
	СтруктураПараметров.Вставить("МассивТТ"			, мСписокТТ);
	
	КопироватьТоварныеОграниченияДляТовараСервер(СтруктураПараметров);
	
	УстановитьОтборТоварныхОграниченийНаТочках();
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ГРАФИК ЗАКАЗОВ"
	
Функция ПолучитьРезультатыЗапросаПоГрафикуЗаказов(мНомерНеделиРазмещения, мПоставщик)
	
	Перем Запрос;
	
	ВсеПоставщики = (мПоставщик = Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расчетчик"				, Объект.Расчетчик);
	Запрос.УстановитьПараметр("Склад"					, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("МассивНоменклатуры"		, ЭтаФорма.СписокНоменклатуры);
	Если НЕ ВсеПоставщики Тогда
		Запрос.УстановитьПараметр("Поставщик"			, мПоставщик);
	КонецЕсли;
	Запрос.УстановитьПараметр("НомерНеделиРазмещения"	, мНомерНеделиРазмещения);
	Запрос.УстановитьПараметр("НомерНеделиПоставки"		, мНомерНеделиРазмещения + 1);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоответствиеДатДнямНедели.НомерНедели = &НомерНеделиРазмещения ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНеделяРазмещения,
	|	ДЕНЬНЕДЕЛИ(СоответствиеДатДнямНедели.Дата) КАК ДеньНедели,
	|	СоответствиеДатДнямНедели.НомерНедели,
	|	СоответствиеДатДнямНедели.Дата
	|ПОМЕСТИТЬ ВТДатыРазмещенияИПоставки
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНеделиРазмещения
	|	ИЛИ СоответствиеДатДнямНедели.НомерНедели = &НомерНеделиПоставки" + ?(ВсеПоставщики, ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Ссылка.Владелец КАК Поставщик
	|ПОМЕСТИТЬ ВТКонтрагенты
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|ГДЕ
	|	ТЧТовары.Ссылка.СтруктурноеПодразделение = &Склад
	|	И ТЧТовары.Ссылка.Расчетчик = &Расчетчик
	|	И ТЧТовары.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Ссылка.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиПоставкиТовара.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафикиПоставкиТовара
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара КАК ГрафикиПоставкиТовара
	|ГДЕ
	|	ГрафикиПоставкиТовара.СтруктурноеПодразделение = &Склад
	|	И ГрафикиПоставкиТовара.Расчетчик = &Расчетчик
	|	И НЕ ГрафикиПоставкиТовара.ПометкаУдаления" + ?(НЕ ВсеПоставщики, "
	|	И ГрафикиПоставкиТовара.Владелец = &Поставщик", "
	|	И ГрафикиПоставкиТовара.Владелец В (ВЫБРАТЬ Поставщик ИЗ ВТКонтрагенты)") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ВТДатыПоставки.Дата ЕСТЬ NULL
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВТДатыПоставки.Дата, НЕДЕЛЯ, ГрафикЗаказаИПоставкиТовара.КоличествоНедель)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК Дата,
	|	ГрафикЗаказаИПоставкиТовара.ДеньПоставки КАК ДеньНедели,
	|	ВЫБОР
	|		КОГДА НЕ ВТДатыПоставки.НомерНедели ЕСТЬ NULL
	|			ТОГДА ВТДатыПоставки.НомерНедели + ГрафикЗаказаИПоставкиТовара.КоличествоНедель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерНедели,
	|	ГрафикЗаказаИПоставкиТовара.Ссылка КАК ГрафикПоставкиТовара,
	|	ГрафикЗаказаИПоставкиТовара.Ссылка.ПредставлениеТоваров КАК ПредставлениеТоваров,
	|	ГрафикЗаказаИПоставкиТовара.Ссылка.Владелец КАК Поставщик,
	|	ЕСТЬNULL(ВТДатыРазмещения.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРазмещения,
	|	ГрафикЗаказаИПоставкиТовара.ДеньЗаказа КАК ДеньНеделиРазмещения,
	|	&НомерНеделиРазмещения КАК НомерНеделиРазмещения
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.График КАК ГрафикЗаказаИПоставкиТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиПоставкиТовара КАК ВТГрафикиПоставкиТовара
	|		ПО ВТГрафикиПоставкиТовара.Ссылка = ГрафикЗаказаИПоставкиТовара.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыРазмещенияИПоставки КАК ВТДатыРазмещения
	|		ПО (ВЫБОР
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 1
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 2
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 3
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 4
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 5
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 6
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|					ТОГДА ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыРазмещения.ДеньНедели = 7
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыРазмещенияИПоставки КАК ВТДатыПоставки
	|		ПО (ВЫБОР
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 1
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 2
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 3
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 4
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|										ИЛИ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 5
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|					ТОГДА ВЫБОР
	|								КОГДА ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|									ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ЛОЖЬ
	|								ИНАЧЕ ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|							КОНЕЦ
	|							И ВТДатыПоставки.ДеньНедели = 6
	|				КОГДА ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|					ТОГДА ВТДатыПоставки.ЭтоНеделяРазмещения = ИСТИНА
	|					 		И ВТДатыПоставки.ДеньНедели = 7
	|			КОНЕЦ)
	|ГДЕ
	|	ГрафикЗаказаИПоставкиТовара.Ссылка.СтруктурноеПодразделение = &Склад
	|	И ГрафикЗаказаИПоставкиТовара.Ссылка.Расчетчик = &Расчетчик
	|	И (НЕ ГрафикЗаказаИПоставкиТовара.ДеньЗаказа = ЗНАЧЕНИЕ(Перечисление.ДниНедели.ПустаяСсылка))
	|	И (НЕ ГрафикЗаказаИПоставкиТовара.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПредЗаказ.ДатаПоступления КАК Дата,
	|	ПредЗаказ.Поставщик КАК Поставщик
	|ИЗ
	|	Документ.ПредЗаказ КАК ПредЗаказ
	|ГДЕ
	|	ПредЗаказ.Проведен
	|	И ПредЗаказ.Подготовлен
	|	И ПредЗаказ.Склад = &Склад
	|	И ПредЗаказ.Расчетчик = &Расчетчик
	|	И ПредЗаказ.ДатаПоступления В
	|			(ВЫБРАТЬ
	|				ВТОсновная.Дата
	|			ИЗ
	|				ВТОсновная КАК ВТОсновная)
	|	И НЕ ПредЗаказ.ПометкаУдаления" + ?(НЕ ВсеПоставщики, "
	|	И ПредЗаказ.Поставщик = &Поставщик", "
	|	И ПредЗаказ.Поставщик В (ВЫБРАТЬ Поставщик ИЗ ВТКонтрагенты)") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.Дата,
	|	ВТОсновная.ДеньНедели,
	|	ВТОсновная.НомерНедели,
	|	ВТОсновная.Поставщик,
	|	&Склад КАК Склад,
	|	ВТОсновная.ДатаРазмещения,
	|	ВТОсновная.ГрафикПоставкиТовара,
	|	ВТОсновная.ПредставлениеТоваров,
	|	ВТОсновная.ДеньНеделиРазмещения,
	|	ВТОсновная.НомерНеделиРазмещения
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТОсновная.ДатаРазмещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.Дата,
	|	ВТОсновная.Поставщик,
	|	&Склад КАК Склад,
	|	ВТОсновная.ДатаРазмещения,
	|	ВТОсновная.ГрафикПоставкиТовара
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикРазмещенияЗаказовПоставщикам.Дата,
	|	ГрафикРазмещенияЗаказовПоставщикам.Поставщик,
	|	ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения,
	|	ГрафикРазмещенияЗаказовПоставщикам.ГрафикПоставкиТовара,
	|	&Склад КАК Склад
	|ИЗ
	|	РегистрСведений.ГрафикРазмещенияЗаказовПоставщикам КАК ГрафикРазмещенияЗаказовПоставщикам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыРазмещенияИПоставки КАК ВТДатыРазмещения
	|		ПО (ВТДатыРазмещения.ЭтоНеделяРазмещения = ИСТИНА)
	|				И (ВТДатыРазмещения.Дата = ГрафикРазмещенияЗаказовПоставщикам.ДатаРазмещения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК ВТОсновная
	|		ПО (ВТОсновная.Дата = ГрафикРазмещенияЗаказовПоставщикам.Дата)
	|ГДЕ
	|	ГрафикРазмещенияЗаказовПоставщикам.Склад = &Склад" + ?(НЕ ВсеПоставщики, "
	|	И ГрафикРазмещенияЗаказовПоставщикам.Поставщик = &Поставщик", "
	|	И ГрафикРазмещенияЗаказовПоставщикам.Поставщик В (ВЫБРАТЬ Поставщик ИЗ ВТКонтрагенты)") + "
	|	И ВТОсновная.Дата ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыРазмещенияИПоставки 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикиПоставкиТовара" + ?(ВсеПоставщики, "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКонтрагенты", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновная";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьРезультатыЗапросаПоУтвержденнымГрафикамРазвоза(мНомерНеделиРазмещения)
	
	Перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"		, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("НомерНедели"	, мНомерНеделиРазмещения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикРазвозаТовараПоТочкам.РазвозПн КАК РазвозПн,
	|	ГрафикРазвозаТовараПоТочкам.РазвозВт КАК РазвозВт,
	|	ГрафикРазвозаТовараПоТочкам.РазвозСр КАК РазвозСр,
	|	ГрафикРазвозаТовараПоТочкам.РазвозЧт КАК РазвозЧт,
	|	ГрафикРазвозаТовараПоТочкам.РазвозПт КАК РазвозПт,
	|	ГрафикРазвозаТовараПоТочкам.РазвозСб КАК РазвозСб,
	|	ГрафикРазвозаТовараПоТочкам.РазвозВс КАК РазвозВс
	|ПОМЕСТИТЬ ВТГрафикРазвоза
	|ИЗ
	|	РегистрСведений.ГрафикРазвозаТовараПоТочкам КАК ГрафикРазвозаТовараПоТочкам
	|ГДЕ
	|	ГрафикРазвозаТовараПоТочкам.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеДатДнямНедели.Дата
	|ПОМЕСТИТЬ ВТДниРазмещения
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДниРазмещения.Дата
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТДниРазмещения КАК ВТДниРазмещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикРазвоза КАК ВТГрафикРазвоза
	|		ПО (ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 1
	|					ТОГДА ВТГрафикРазвоза.РазвозПн
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 2
	|					ТОГДА ВТГрафикРазвоза.РазвозВт
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 3
	|					ТОГДА ВТГрафикРазвоза.РазвозСр
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 4
	|					ТОГДА ВТГрафикРазвоза.РазвозЧт
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 5
	|					ТОГДА ВТГрафикРазвоза.РазвозПт
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 6
	|					ТОГДА ВТГрафикРазвоза.РазвозСб
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТДниРазмещения.Дата) = 7
	|					ТОГДА ВТГрафикРазвоза.РазвозВс
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Склад КАК Склад,
	|	ВТОсновная.Дата
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Склад КАК Склад,
	|	УтвержденныйГрафикРазвозаПоТочкам.Дата
	|ИЗ
	|	РегистрСведений.УтвержденныйГрафикРазвозаПоТочкам КАК УтвержденныйГрафикРазвозаПоТочкам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДниРазмещения КАК ВТДниРазмещения
	|		ПО (ВТДниРазмещения.Дата = УтвержденныйГрафикРазвозаПоТочкам.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновная КАК ВТОсновная
	|		ПО (ВТОсновная.Дата = УтвержденныйГрафикРазвозаПоТочкам.Дата)
	|ГДЕ
	|	УтвержденныйГрафикРазвозаПоТочкам.Склад = &Склад
	|	И ВТОсновная.Дата ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикРазвоза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРазмещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновная";
	
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьГрафикиЗаказовИРазвозаСервер(мНомерНеделиРазмещения, мПоставщик = Неопределено)
	
	Перем РезультатыЗапроса, СообщениеПользователю, ТаблицаЗапроса, Выборка, РезультатКЗаписи, РезультатКОчистке, МассивИзмерений, ОбработкаОбъект; 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	///////////////////////////////////////
	// заполнение таблицы "ГрафикЗаказов"
	РезультатыЗапроса = ПолучитьРезультатыЗапросаПоГрафикуЗаказов(мНомерНеделиРазмещения, мПоставщик);
	
	н = ?(мПоставщик = Неопределено, 1, 0);
	
	//// если есть заказы поставщикам с такими датами поставки = до свиданья
	//РезультатЗапроса = РезультатыЗапроса[н + 3];
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Существуют заказы поставщику в указанном периоде! Заполнение невозможно.";
	//	СообщениеПользователю.Сообщить();
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СообщениеПользователю = Новый СообщениеПользователю;
	//		СообщениеПользователю.Текст = Формат(Выборка.Дата, "ДЛФ=Д") + " , поставщик """ + Строка(Выборка.Поставщик) + """";
	//		СообщениеПользователю.Сообщить();
	//	КонецЦикла;
	//	Возврат;
	//КонецЕсли;
	
	
	// вывод в таблицу на форме
	ТаблицаЗапроса = РезультатыЗапроса[н + 4].Выгрузить();
	ЭтаФорма.ГрафикЗаказов.Загрузить(ТаблицаЗапроса);
	
	// запись в регистр сведений
	РезультатКЗаписи 	= РезультатыЗапроса[н + 5];
	РезультатКОчистке 	= РезультатыЗапроса[н + 6];
	
	МассивИзмерений = Новый Массив();
	МассивИзмерений.Добавить("Дата");
	МассивИзмерений.Добавить("Поставщик");
	МассивИзмерений.Добавить("Склад");
	МассивИзмерений.Добавить("ДатаРазмещения");
	МассивИзмерений.Добавить("ГрафикПоставкиТовара");
	ОбработкаОбъект.ЗаписатьВРегистрСведений("ГрафикРазмещенияЗаказовПоставщикам", РезультатКЗаписи, РезультатКОчистке, МассивИзмерений);
	
	
	///////////////////////////////////////////////////
	// заполнение таблицы "УтвержденныйГрафикРазвоза"
	РезультатыЗапроса = ПолучитьРезультатыЗапросаПоУтвержденнымГрафикамРазвоза(мНомерНеделиРазмещения);
	
	РезультатКЗаписи 	= РезультатыЗапроса[3];
	РезультатКОчистке 	= РезультатыЗапроса[4];
	
	// вывод в таблицу на форме
	ТаблицаЗапроса = РезультатКЗаписи.Выгрузить();
	ЭтаФорма.УтвержденныйГрафикРазвоза.Загрузить(ТаблицаЗапроса);
	
	МассивИзмерений = Новый Массив();
	МассивИзмерений.Добавить("Склад");
	МассивИзмерений.Добавить("Дата");
	ОбработкаОбъект.ЗаписатьВРегистрСведений("УтвержденныйГрафикРазвозаПоТочкам", РезультатКЗаписи, РезультатКОчистке, МассивИзмерений);
	
КонецПроцедуры

// Добавляет запись в регистр сведений "ГрафикРазмещенияЗаказовПоставщикам" на основании строки таблицы на форме.
//
// Параметры:
// 	СтруктураПараметровСтроки - Структура, значения из строки распределения на форме.
//
Процедура ДобавитьЗаписьВГрафикЗаказов(СтруктураПараметровСтроки)
	
	Перем ОбработкаОбъект;
	
	СтруктураПараметровСтроки.Вставить("Склад", Объект.Расчетчик.Склад);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьЗаписьВРегистрСведений("ГрафикРазмещенияЗаказовПоставщикам", СтруктураПараметровСтроки);
	
КонецПроцедуры

// Удаляет запись в регистре сведений "ГрафикРазмещенияЗаказовПоставщикам" на основании строки таблицы на форме.
//
// Параметры:
// 	СтруктураПараметровСтроки - Структура, значения из строки распределения на форме.
//
Процедура УдалитьЗаписьВГрафикеЗаказов(СтруктураПараметровСтроки)
	
	Перем НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.ГрафикРазмещенияЗаказовПоставщикам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(СтруктураПараметровСтроки.Дата);
	НаборЗаписей.Отбор.Поставщик.Установить(СтруктураПараметровСтроки.Поставщик);
	НаборЗаписей.Отбор.ДатаРазмещения.Установить(СтруктураПараметровСтроки.ДатаРазмещения);
	НаборЗаписей.Отбор.ГрафикПоставкиТовара.Установить(СтруктураПараметровСтроки.ГрафикПоставкиТовара);
	НаборЗаписей.Отбор.Склад.Установить(Объект.Расчетчик.Склад);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось очистить запись графика размещения заказов поставщикам";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковГрафикЗаказовПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборГрафикиЗаказовИРазвоза();
	
	УстановитьОтборЗаказовПоставщикам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВесьГрафикЗаказов(Команда)
	
	УстановитьОтборГрафикиЗаказовИРазвоза(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикЗаказов(Команда)

	Перем ТекНомерНеделиРазмещения, СообщениеПользователю, ТекПоставщик;
	
	Если НЕ ВвестиЗначение(ТекНомерНеделиРазмещения, "Укажите неделю размещения", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(10, 0))) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан номер недели размещения! Заполнение невозможно.";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоПоставщиковГрафикЗаказов.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если НЕ ТекДанные.Поставщик = "<Все>" Тогда
			ТекПоставщик = ТекДанные.Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьГрафикиЗаказовИРазвозаСервер(ТекНомерНеделиРазмещения, ТекПоставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗаказовПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные, МассивРеквизитовСтроки;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// служебный список (для редактирования измерений)
	Если ЭтаФорма.СписокРеквизитов1.Количество() > 0 Тогда
		ЭтаФорма.СписокРеквизитов1.Очистить();
	КонецЕсли;
	ЭтаФорма.СписокРеквизитов1.Добавить(ТекДанные.Дата);
	ЭтаФорма.СписокРеквизитов1.Добавить(ТекДанные.Поставщик);
	ЭтаФорма.СписокРеквизитов1.Добавить(ТекДанные.ДатаРазмещения);
	ЭтаФорма.СписокРеквизитов1.Добавить(ТекДанные.ГрафикПоставкиТовара);
	
	
	ЭтаФорма.ПодключитьОбработчикОжидания("УстановитьОтборЗаказовПоставщикам", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗаказовПередУдалением(Элемент, Отказ)

	Перем ТекДанные, СтрокаКолонок, СтруктураПараметровСтроки;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКолонок = "Дата, Поставщик, ДатаРазмещения, ГрафикПоставкиТовара";
	СтруктураПараметровСтроки = Новый Структура(СтрокаКолонок);
	
	ТекВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		
		ТекДанные = ЭтаФорма.ГрафикЗаказов.НайтиПоИдентификатору(СтрокаТаблицы);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметровСтроки, ТекДанные, СтрокаКолонок);
		
		УдалитьЗаписьВГрафикеЗаказов(СтруктураПараметровСтроки);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗаказовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Перем ТекДанные, ТекДанныеТорговыхТочек;
	
	Если НоваяСтрока
			И НЕ Копирование Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		ТекДанные.Дата 	= ТекущаяДата();
		ТекДанные.Склад = ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик);
		
		ТекДанныеПоставщиков = Элементы.ДеревоПоставщиковГрафикЗаказов.ТекущиеДанные;
		Если НЕ ТекДанныеПоставщиков = Неопределено Тогда
			ТекДанные.Поставщик	= ТекДанныеПоставщиков.Поставщик;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
    Перем ТекДанные, СтрокиТаблицы;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Поставщик.Пустая() Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан поставщик!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Дата) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата поставки!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаРазмещения) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата размещения!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	// проверка на дубли
	СтрокиТаблицы = ЭтаФорма.ГрафикЗаказов.НайтиСтроки(Новый Структура("Дата, Поставщик, ДатаРазмещения, ГрафикПоставкиТовара",
								ТекДанные.Дата, ТекДанные.Поставщик, ТекДанные.ДатаРазмещения, ТекДанные.ГрафикПоставкиТовара));
	Если СтрокиТаблицы.Количество() > 1 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "По данной дате и поставщику уже внесен график!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗаказовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Перем ТекДанные, ПредыдущаяДата, ПредыдущийПоставщик, СтрокаКолонок, СтруктураПараметровСтроки;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.НомерНедели 			= ДопМодульСервер.ПолучитьНомерНеделиПоДате(ТекДанные.Дата);
	ТекДанные.ДеньНедели 			= ПолучитьДеньНеделиПоДате(ТекДанные.Дата);
	ТекДанные.НомерНеделиРазмещения = ДопМодульСервер.ПолучитьНомерНеделиПоДате(ТекДанные.ДатаРазмещения);
	ТекДанные.ДеньНеделиРазмещения 	= ПолучитьДеньНеделиПоДате(ТекДанные.ДатаРазмещения);
	
	// редактирование существующей строки - если изменилось измерение регистра, удаление старой записи
	Если (НЕ НоваяСтрока)
			И ЭтаФорма.СписокРеквизитов1.Количество() > 0 Тогда
		ПредыдущаяДата 		= ЭтаФорма.СписокРеквизитов1[0].Значение;
		ПредыдущийПоставщик = ЭтаФорма.СписокРеквизитов1[1].Значение;
		ПредыдущийДатаРазм 	= ЭтаФорма.СписокРеквизитов1[2].Значение;
		ПредыдущийГрафик 	= ЭтаФорма.СписокРеквизитов1[3].Значение;
		Если (НЕ ТекДанные.Дата = ПредыдущаяДата)
				ИЛИ НЕ ТекДанные.Поставщик = ПредыдущийПоставщик Тогда
			СтруктураПараметровСтроки = Новый Структура();
			СтруктураПараметровСтроки.Вставить("Дата"					, ПредыдущаяДата);
			СтруктураПараметровСтроки.Вставить("Поставщик"				, ПредыдущийПоставщик);
			СтруктураПараметровСтроки.Вставить("ДатаРазмещения"			, ПредыдущийДатаРазм);
			СтруктураПараметровСтроки.Вставить("ГрафикПоставкиТовара"	, ПредыдущийГрафик);
			УдалитьЗаписьВГрафикеЗаказов(СтруктураПараметровСтроки);
			
			ЭтаФорма.СписокРеквизитов1[0].Значение = ТекДанные.Дата;
			ЭтаФорма.СписокРеквизитов1[1].Значение = ТекДанные.Поставщик;
			ЭтаФорма.СписокРеквизитов1[2].Значение = ТекДанные.ДатаРазмещения;
			ЭтаФорма.СписокРеквизитов1[3].Значение = ТекДанные.ГрафикПоставкиТовара;
		КонецЕсли;
	КонецЕсли;
	
	// добавление записи по текущей строке в регистр "ГрафикРазмещенияЗаказовПоставщикам"
	СтрокаКолонок = "Дата, Поставщик, ДатаРазмещения, ГрафикПоставкиТовара, Размещен";
	СтруктураПараметровСтроки = Новый Структура(СтрокаКолонок);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровСтроки, ТекДанные, СтрокаКолонок);
	ДобавитьЗаписьВГрафикЗаказов(СтруктураПараметровСтроки);
	
КонецПроцедуры


// Добавляет запись в регистр сведений "УтвержденныйГрафикРазвозаПоТочкам" на основании строки таблицы на форме.
//
// Параметры:
// 	мДата - Дата, дата развоза.
//
Процедура ДобавитьЗаписьВУтвержденныйГрафикРазвоза(мДата)
	
	Перем СтруктураПараметровСтроки, ОбработкаОбъект;
	
	СтруктураПараметровСтроки = Новый Структура;
	СтруктураПараметровСтроки.Вставить("Склад"	, Объект.Расчетчик.Склад);
	СтруктураПараметровСтроки.Вставить("Дата"	, мДата);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьЗаписьВРегистрСведений("УтвержденныйГрафикРазвозаПоТочкам", СтруктураПараметровСтроки);
	
КонецПроцедуры

// Удаляет запись в регистре сведений "УтвержденныйГрафикРазвозаПоТочкам" на основании строки таблицы на форме.
//
// Параметры:
// 	мДата - Дата, дата развоза.
//
Процедура УдалитьЗаписьВУтвержденномГрафикеРазвоза(мДата)
	
	Перем НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.УтвержденныйГрафикРазвозаПоТочкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(мДата);
	НаборЗаписей.Отбор.Склад.Установить(Объект.Расчетчик.Склад);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось очистить запись утвержденного графика развоза по точкам";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура УтвержденныйГрафикРазвозаПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// служебный список
	Если ЭтаФорма.СписокРеквизитов2.Количество() > 0 Тогда
		ЭтаФорма.СписокРеквизитов2.Очистить();
	КонецЕсли;
	ЭтаФорма.СписокРеквизитов2.Добавить(ТекДанные.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвержденныйГрафикРазвозаПередУдалением(Элемент, Отказ)

	Перем ТекВыделенныеСтроки, ТекДанные;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		
		ТекДанные = ЭтаФорма.УтвержденныйГрафикРазвоза.НайтиПоИдентификатору(СтрокаТаблицы);
		
		УдалитьЗаписьВУтвержденномГрафикеРазвоза(ТекДанные.Дата);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УтвержденныйГрафикРазвозаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
    Перем ТекДанные, СтрокиТаблицы;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Дата) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	// проверка на дубли
	СтрокиТаблицы = ЭтаФорма.УтвержденныйГрафикРазвоза.НайтиСтроки(Новый Структура("Дата", ТекДанные.Дата));
	Если СтрокиТаблицы.Количество() > 1 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "На эту дату уже утвержден график развоза!";
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвержденныйГрафикРазвозаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Перем ТекДанные, ПредыдущаяДата;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// редактирование существующей строки - если изменилось измерение регистра, удаление старой записи
	Если (НЕ НоваяСтрока)
			И ЭтаФорма.СписокРеквизитов2.Количество() > 0 Тогда
		ПредыдущаяДата = ЭтаФорма.СписокРеквизитов2[0].Значение;
		Если НЕ ТекДанные.Дата = ПредыдущаяДата Тогда
			УдалитьЗаписьВУтвержденномГрафикеРазвоза(ПредыдущаяДата);
			ЭтаФорма.СписокРеквизитов2[0].Значение = ТекДанные.Дата;
		КонецЕсли;
	КонецЕсли;
	
	// добавление записи по текущей строке в регистр "УтвержденныйГрафикРазвозаПоТочкам"
	ДобавитьЗаписьВУтвержденныйГрафикРазвоза(ТекДанные.Дата)
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "ЗАКАЗЫ"

&НаКлиенте
Процедура ДатаЗаказовПриИзменении(Элемент)

	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
	ТекДанные = Элементы.ДеревоПоставщиковЗаказы.ТекущиеДанные;
	УстановитьОтборЗаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик));
	
	ТекДанные = Элементы.Предзаказы.ТекущиеДанные;
	УстановитьОтборТоварыПредзаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Ссылка));
	
КонецПроцедуры

Процедура СоздатьПустыеПредзаказыСервер(мМассивПоставщиков, ПоВсемПоставщикам)
	
	мДеньНеделиДатыЗаказа = ПолучитьДеньНеделиПоДате(ЭтаФорма.ДатаЗаказов);
    	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗаказов"			, ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(ЭтаФорма.ДатаЗаказов + 86400));
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, ЭтаФорма.СписокРасчетчиковДляЗаказа);
	Запрос.УстановитьПараметр("ДеньНеделиДатыЗаказа", мДеньНеделиДатыЗаказа);
	
	мТаблицаДат = ПолучитьТаблицуНеделиОтДаты(ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ТаблицаДат", мТаблицаДат);
	
	Если НЕ ПоВсемПоставщикам Тогда
		Запрос.УстановитьПараметр("МассивПоставщиков", мМассивПоставщиков);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата,
	|	ТаблицаДат.ДеньНедели КАК ДеньНедели
	|ПОМЕСТИТЬ ВТТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрРасчетчики.Склад КАК Склад
	|ПОМЕСТИТЬ ВТСклады
	|ИЗ
	|	Справочник.Расчетчики КАК СпрРасчетчики
	|ГДЕ
	|	СпрРасчетчики.Ссылка В(&СписокРасчетчиков)
	|	И НЕ СпрРасчетчики.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрРасчетчики.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппыНоменклатуры.Ссылка КАК Расчетчик,
	|	ТЧГруппыНоменклатуры.Ссылка.Склад КАК Склад,
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка В(&СписокРасчетчиков)
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления
	//|	И НЕ ТЧГруппыНоменклатуры.ГруппаНоменклатуры.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГрафик.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ВТТаблицаДат.Дата, НЕДЕЛЯ, ТЧГрафик.КоличествоНедель) КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТДатыПоставкиГрафиков
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.График КАК ТЧГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДат КАК ВТТаблицаДат
	|		ПО (ВТТаблицаДат.ДеньНедели = ТЧГрафик.ДеньПоставки)
	|ГДЕ
	|	ТЧГрафик.ДеньЗаказа = &ДеньНеделиДатыЗаказа
	|	И ТЧГрафик.Ссылка.СтруктурноеПодразделение В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады)
	|	И НЕ ТЧГрафик.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель
	|ПОМЕСТИТЬ ВТТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаАссортимента,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)
	//+++АК MOSD 2018.11.30 ИП-00020586
	|				И (НЕ Номенклатура.Выведена)
	//---АК MOSD 
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТоварныйАссортиментТочек
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ТоварныйАссортиментТочек.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	//+++АК MOSD 2018.11.30 ИП-00020586
	|	И ТоварныйАссортиментТочек.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	|	И ТоварныйАссортиментТочек.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	//---АК MOSD 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварныйАссортимент.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварныйАссортимент.ТорговаяТочка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ КАК ГруппаУРЗ,
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик КАК Склад
	|ПОМЕСТИТЬ ВТПорядокОбеспеченияТТ
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаАссортимента,
	|			ТорговаяТочка В
	|				(ВЫБРАТЬ
	|					ТТАссортимента.ТорговаяТочка
	|				ИЗ
	|					ТТАссортимента)) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГруппаУРЗ,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель
	|ПОМЕСТИТЬ ВТЦеныПоставщиков
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаАссортимента,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)
	|				И НЕ Характеристика.Неактивная) КАК ЦеныПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ЦеныПоставщиков.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	&УсловиеПоПоставщику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Ссылка.СтруктурноеПодразделение КАК Склад,
	|	ВТНоменклатура.Расчетчик КАК Расчетчик,
	 //+++АК KIRN 2018.03.28 ИП-00018240 	
	|	ТЧТовары.Номенклатура.ТорговаяМарка КАК ТорговаяМарка,
	|	ТЧТовары.Номенклатура.ТорговаяМарка.ОрганизацияЗакупки КАК ОрганизацияЗакупки,
	//---АК KIRN 
	|	ВТЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ВТДатыПоставкиГрафиков.ДатаПоставки КАК ДатаПоставки,
	|	ТЧТовары.Ссылка КАК ГрафикЗаказа,
	|	ЕСТЬNULL(ВТПорядокОбеспеченияТТ.ТорговаяТочка, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТорговаяТочка,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Ссылка.Владелец КАК Производитель,
	|	ТЧТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоставкиГрафиков КАК ВТДатыПоставкиГрафиков
	|		ПО (ВТДатыПоставкиГрафиков.Ссылка = ТЧТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО (ВТНоменклатура.Склад = ТЧТовары.Ссылка.СтруктурноеПодразделение)
	|			И (ВТНоменклатура.Номенклатура = ТЧТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокОбеспеченияТТ КАК ВТПорядокОбеспеченияТТ
	|		ПО (ВТПорядокОбеспеченияТТ.Склад = ТЧТовары.Ссылка.СтруктурноеПодразделение)
	|			И (ВТПорядокОбеспеченияТТ.ГруппаУРЗ = ТЧТовары.Номенклатура.ГруппаНоменклатурыУРЗ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныПоставщиков КАК ВТЦеныПоставщиков
	|		ПО (ВТЦеныПоставщиков.Производитель = ТЧТовары.Ссылка.Владелец)
	|			И (ВТЦеныПоставщиков.Номенклатура = ТЧТовары.Номенклатура)
	|ГДЕ
	|	ТЧТовары.Ссылка.СтруктурноеПодразделение В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады)
	|	И ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|	И НЕ ВТЦеныПоставщиков.Поставщик ЕСТЬ NULL 
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.Склад КАК Склад,
	//+++АК KIRN 2018.03.28 ИП-00018240 	
	|	ВТОсновная.ОрганизацияЗакупки КАК ОрганизацияЗакупки,
	//---АК KIRN 
	|	ВТОсновная.Расчетчик КАК Расчетчик,
	|	ВТОсновная.Поставщик КАК Поставщик,
	|	ВТОсновная.ДатаПоставки КАК ДатаПоставки,
	|	ВТОсновная.ГрафикЗаказа КАК ГрафикЗаказа,
	|	ВТОсновная.ТорговаяТочка,
	|	ВТОсновная.Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика КАК Характеристика,
	|	ВТОсновная.ЕдиницаИзмерения
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	|		ПО (ВТТоварныйАссортимент.ТорговаяТочка = ВТОсновная.ТорговаяТочка)
	|			И (ВТТоварныйАссортимент.Номенклатура = ВТОсновная.Номенклатура)
	|			И (ВТТоварныйАссортимент.Производитель = ВТОсновная.Производитель)
	|
	|СГРУППИРОВАТЬ ПО
	//+++АК KIRN 2018.03.28 ИП-00018240 
	|	ВТОсновная.ОрганизацияЗакупки,
	//---АК KIRN 
	|	ВТОсновная.Склад,
	|	ВТОсновная.Расчетчик,
	|	ВТОсновная.Поставщик,
	|	ВТОсновная.ДатаПоставки,
	|	ВТОсновная.ГрафикЗаказа,
	|	ВТОсновная.ТорговаяТочка,
	|	ВТОсновная.Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика,
	|	ВТОсновная.ЕдиницаИзмерения
	|ИТОГИ ПО
	//+++АК KIRN 2018.03.28 ИП-00018240 
	|	ОрганизацияЗакупки,
	//---АК KIRN 
	|	Склад,
	|	Расчетчик,
	|	Поставщик,
	|	ДатаПоставки,
	|	ГрафикЗаказа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПоставщику",
		?(НЕ ПоВсемПоставщикам, "ЦеныПоставщиков.Поставщик В (&МассивПоставщиков)", "ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для формирования заказов!");
		Возврат;
	КонецЕсли;
	
	мДокументыПредЗаказ = Документы.Предзаказ;
	
	//+++АК KIRN 2018.03.28  ИП-00018240
	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОрганизацияЗакупки");
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
	ТекОрганизация = ВыборкаПоОрганизациям.ОрганизацияЗакупки;
	ВыборкаПоСкладам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	//ВыборкаПоСкладам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	//---АК KIRN 
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		ТекСклад = ВыборкаПоСкладам.Склад;
				
		ВыборкаПоРасчетчикам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Расчетчик");
		Пока ВыборкаПоРасчетчикам.Следующий() Цикл
			
			ТекРасчетчик = ВыборкаПоРасчетчикам.Расчетчик;
				
			ВыборкаПоПоставщикам = ВыборкаПоРасчетчикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
			Пока ВыборкаПоПоставщикам.Следующий() Цикл
				
				ТекПоставщик = ВыборкаПоПоставщикам.Поставщик;
				
				ВыборкаПоДатамПоставки = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаПоставки");
				Пока ВыборкаПоДатамПоставки.Следующий() Цикл
					
					ТекДатаПоставки = ВыборкаПоДатамПоставки.ДатаПоставки;
					
					ВыборкаПоГрафикамЗаказа = ВыборкаПоДатамПоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГрафикЗаказа");
					Пока ВыборкаПоГрафикамЗаказа.Следующий() Цикл
						
						// добавление документа "Предзаказ"
						НовыйДокумент = мДокументыПредЗаказ.СоздатьДокумент();
						НовыйДокумент.Дата 				= ЭтаФорма.ДатаЗаказов;
						НовыйДокумент.Склад 			= ТекСклад;
						//+++АК KIRN 2018.04.03 ИП-00018240 
						НовыйДокумент.Организация		= ТекОрганизация;
						//---АК KIRN 
						НовыйДокумент.Расчетчик			= ТекРасчетчик;
						НовыйДокумент.Поставщик 		= ТекПоставщик;
						НовыйДокумент.ДатаПоступления 	= ТекДатаПоставки;
						НовыйДокумент.ГрафикЗаказа 		= ВыборкаПоГрафикамЗаказа.ГрафикЗаказа;
						
						//+++АК KIRN 2018.04.02 ИП-00018240 
						НовыйДокумент.Комментарий 		= "###Сформирован автоматически из обработки <Прогнозирование продаж -> Создать предзаказы>";
						//---АК KIRN 
						
						ТЧТовары = НовыйДокумент.Товары;
						
						Выборка = ВыборкаПоГрафикамЗаказа.Выбрать();
						Пока Выборка.Следующий() Цикл  // по товарам
							
							НоваяСтрока = ТЧТовары.Добавить();
							НоваяСтрока.ТорговаяТочка 		= Выборка.ТорговаяТочка;
							НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
							НоваяСтрока.Характеристика 		= Выборка.Характеристика;
							НоваяСтрока.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
							
						КонецЦикла;
						
						Попытка
							НовыйДокумент.Записать();
							Сообщить("Документ " + НовыйДокумент + " записан.");
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	//+++АК KIRN 2018.03.28 ИП-00018240
	КонецЦикла;
	//---АК KIRN 

	
	Элементы.Предзаказы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПустыеПредзаказы(Команда)

	ТекВыделенныеСтроки = Элементы.ДеревоПоставщиковЗаказы.ВыделенныеСтроки;
	
	ПоВсемПоставщикам = Ложь;
	мМассивПоставщиков = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		ТекДанные = ЭтаФорма.ДеревоПоставщиковДляЗаказа.НайтиПоИдентификатору(СтрокаТаблицы);
		Если НЕ ТекДанные.Поставщик = "<Все>" Тогда
			мМассивПоставщиков.Добавить(ТекДанные.Поставщик);
		Иначе
			ПоВсемПоставщикам = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Если мМассивПоставщиков.Количество() = 0
			И НЕ ПоВсемПоставщикам Тогда
		Сообщить("Не выбран ни один поставщик!");
		Возврат;
	КонецЕсли;
	
	
	СоздатьПустыеПредзаказыСервер(мМассивПоставщиков, ПоВсемПоставщикам);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыводитьВсехРасчетчиковЗаказы(Команда)

	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаРасчетчиков Цикл
		СтрокаТаблицы.Выводить = Истина;
	КонецЦикла;
	
	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
	
	ТекДанные = Элементы.ДеревоПоставщиковЗаказы.ТекущиеДанные;
	УстановитьОтборЗаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик));
	
	ТекДанные = Элементы.Предзаказы.ТекущиеДанные;
	УстановитьОтборТоварыПредзаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВыводитьВсехРасчетчиковЗаказы(Команда)

	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаРасчетчиков Цикл
		СтрокаТаблицы.Выводить = Ложь;
	КонецЦикла;
	
	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
	УстановитьОтборЗаказов();
	УстановитьОтборТоварыПредзаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетчиковВыводитьПриИзменении(Элемент)

	Перем ТекДанные, ТекПоставщик;
	
	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
	
	ТекДанные = Элементы.ДеревоПоставщиковЗаказы.ТекущиеДанные;
	УстановитьОтборЗаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик));
	
	ТекДанные = Элементы.Предзаказы.ТекущиеДанные;
	УстановитьОтборТоварыПредзаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Ссылка));
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьЗаказыПоставщикамСервер(СтруктураПараметров)
	
	мДатаЗаказовПоставщику = СтруктураПараметров.ДатаЗаказов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, СтруктураПараметров.СписокРасчетчиков);
	Запрос.УстановитьПараметр("ДатаНачала"			, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, мДатаЗаказовПоставщику);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокПредзаказ.Склад КАК Склад,
	|	ДокПредзаказ.Поставщик КАК Поставщик,
	|	ДокПредзаказ.ДатаПоступления КАК ДатаПоступления,
	|	ДокПредзаказ.Ссылка КАК Предзаказ,
	|	ДокПредзаказ.Организация КАК Организация
	|ИЗ
	|	Документ.Предзаказ КАК ДокПредзаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Предзаказы КАК ВТСуществующиеЗаказы
	|		ПО (ВТСуществующиеЗаказы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ВТСуществующиеЗаказы.Документ = ДокПредзаказ.Ссылка)
	|			И (НЕ ВТСуществующиеЗаказы.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	ДокПредзаказ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокПредзаказ.Расчетчик В(&СписокРасчетчиков)
	|	И ДокПредзаказ.Подготовлен
	|	И ВТСуществующиеЗаказы.Документ ЕСТЬ NULL
	|	И НЕ ДокПредзаказ.ПометкаУдаления
	|ИТОГИ ПО
	//+++АК KIRN 2018.03.28 ИП-00018240       
	|	Организация,
	//---АК KIRN 
	|	Склад,
	|	Поставщик,
	|	ДатаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСуществующиеЗаказы.Ссылка КАК ЗаказПоставщику,
	|	ДокПредзаказ.Ссылка КАК Предзаказ
	|ИЗ
	|	Документ.Предзаказ КАК ДокПредзаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Предзаказы КАК ВТСуществующиеЗаказы
	|		ПО (ВТСуществующиеЗаказы.Документ = ДокПредзаказ.Ссылка)
	|			И (ВТСуществующиеЗаказы.Ссылка.Дата < &ДатаНачала
	|				ИЛИ ВТСуществующиеЗаказы.Ссылка.Дата > &ДатаОкончания)
	|			И (НЕ ВТСуществующиеЗаказы.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	ДокПредзаказ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокПредзаказ.Расчетчик В(&СписокРасчетчиков)
	|	И ДокПредзаказ.Подготовлен
	|	И НЕ ДокПредзаказ.ПометкаУдаления";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[0];
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для создания заказов поставщику!");
		Возврат;
	КонецЕсли;
	
	// для случая, когда дата документа в предзаказе была изменена на более позднюю (текущая),
	// а в дату более раннююю уже были созданы заказы поставщикам - надо удалить предзаказы из таких заказов поставщикам.
	
	МассивПредзаказов = Новый Массив; //+++АК LAGP 2018.05.23 ИП-00017775 Доработка: Задвоение при записи заказов поставщику
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектЗаказаПоставщику = Выборка.ЗаказПоставщику.ПолучитьОбъект();
		ТЧПредзаказы = ОбъектЗаказаПоставщику.Предзаказы;
		СтрокаТЧПредзаказы = ТЧПредзаказы.Найти(Выборка.Предзаказ, "Документ");
		Если СтрокаТЧПредзаказы = Неопределено Тогда // на всякий случай
			Продолжить;
		КонецЕсли;
		
		//+++АК LAGP 2018.05.23 ИП-00017775 Доработка: Задвоение при записи заказов поставщику
		МассивПредзаказов.Добавить(Выборка.Предзаказ);
		//ТЧПредзаказы.Удалить(СтрокаТЧПредзаказы);
		//Попытка
		//	ОбъектЗаказаПоставщику.Записать(?(ОбъектЗаказаПоставщику.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		//---АК LAGP
		
	КонецЦикла;
	
	
	мЗаказыПоставщиков 	= Документы.ЗаказПоставщику;
	мСтатусЗаказа 		= Перечисления.СтатусыЗаказовНаПоставку.ОжидаемДляРаспределения;
	
	//+++АК KIRN 2018.03.28 ИП-00018240       
	ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
	ВыборкаПоСкладу = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	ТекОрганизация = ВыборкаПоОрганизациям.Организация;
	//---АК KIRN 
		
	//ВыборкаПоСкладу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	Пока ВыборкаПоСкладу.Следующий() Цикл
		
		ТекСклад = ВыборкаПоСкладу.Склад;
		
		ВыборкаПоПоставщику = ВыборкаПоСкладу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
		Пока ВыборкаПоПоставщику.Следующий() Цикл
			
			ТекПоставщик = ВыборкаПоПоставщику.Поставщик;
			
			ВыборкаПоДатеПоступления = ВыборкаПоПоставщику.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаПоступления");
			Пока ВыборкаПоДатеПоступления.Следующий() Цикл
				
				// СОЗДАНИЕ ДОКУМЕНТА
				ДокЗаказПоставщику = мЗаказыПоставщиков.СоздатьДокумент();
				ДокЗаказПоставщику.Дата 			= мДатаЗаказовПоставщику;
				ДокЗаказПоставщику.Склад 			= ТекСклад;
				ДокЗаказПоставщику.Организация		= ТекОрганизация;
				ДокЗаказПоставщику.Поставщик		= ТекПоставщик;
				ДокЗаказПоставщику.ДатаПоступления 	= ВыборкаПоДатеПоступления.ДатаПоступления;
				ДокЗаказПоставщику.Статус			= мСтатусЗаказа;
				
				ТЧПредзаказы = ДокЗаказПоставщику.Предзаказы;
				Выборка = ВыборкаПоДатеПоступления.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					//+++АК LAGP 2018.05.23 ИП-00017775 Доработка: Задвоение при записи заказов поставщику
					//НоваяСтрока = ТЧПредзаказы.Добавить();
					//НоваяСтрока.Документ = Выборка.Предзаказ;
					ПредзаказИспользованРанее = МассивПредзаказов.Найти(Выборка.Предзаказ);
					Если ПредзаказИспользованРанее = Неопределено Тогда					
						НоваяСтрока = ТЧПредзаказы.Добавить();
						НоваяСтрока.Документ = Выборка.Предзаказ;
					КонецЕсли;	
					//---АК LAGP
					
				КонецЦикла;
				
				//+++АК LAGP 2018.05.23 ИП-00017775 Доработка: Задвоение при записи заказов поставщику
				//Попытка
				//	ДокЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
				//	Сообщить(ДокЗаказПоставщику);
				//Исключение
				//	Сообщить(ОписаниеОшибки());
				//КонецПопытки;				
				Если ТЧПредзаказы.Количество() > 0 Тогда 					
					Попытка
						ДокЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
						Сообщить(ДокЗаказПоставщику);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	
				//---АК LAGP
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	//+++АК KIRN 2018.03.28 ИП-00018240       
	КонецЦикла;
	//---АК KIRN 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказыПоставщикам(Команда)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"		, ЭтаФорма.ДатаЗаказов);
	СтруктураПараметров.Вставить("ДатаЗаказов"		, КонецДня(ЭтаФорма.ДатаЗаказов));
	СтруктураПараметров.Вставить("СписокРасчетчиков", ЭтаФорма.СписокРасчетчиковДляЗаказа);
	
	СоздатьЗаказыПоставщикамСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковЗаказыПриАктивизацииСтрокиНаКлиенте()
	
	Перем ТекДанные, ТекПоставщик;
	
	ТекПоставщик = Элементы.ДеревоПоставщиковЗаказы.ТекущиеДанные.Поставщик;
	УстановитьОтборЗаказов(ТекПоставщик);
	
	ТекДанные = Элементы.Предзаказы.ТекущиеДанные;
	УстановитьОтборТоварыПредзаказов(?(ТекДанные = Неопределено, Неопределено, ТекДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковЗаказыПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ДеревоПоставщиковЗаказыПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредзаказыПриАктивизацииСтрокиНаКлиенте()
	
	ТекДанные = Элементы.Предзаказы.ТекущиеДанные;
	ТекПредзаказ = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Ссылка);
	
	УстановитьОтборТоварыПредзаказов(ТекПредзаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредзаказыПриАктивизацииСтроки(Элемент)

	ЭтаФорма.ПодключитьОбработчикОжидания("ПредзаказыПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Отправка заказов"

&НаКлиенте
Процедура ДатаОтправкиЗаказовПриИзменении(Элемент)

	Перем ТекДанные;
	
	ЗаполнитьДеревоПоставщиковДляЗаказа();
	
	ТекДанные = Элементы.ДеревоПоставщиковОтправкаЗаказов.ТекущиеДанные;
	ТекПоставщик = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик);
	
	УстановитьОтборЗаказовКОтправке(ТекПоставщик);
	
	ЭтаФорма.КаталогФайловОтправкаЗаказов = ПолучитьКаталогФайловОтправкаЗаказов(ЭтаФорма.ДатаЗаказов);
	ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма(ТекПоставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковОтправкаЗаказовПриАктивизацииСтрокиНаКлиенте()
	
	Перем ТекПоставщик;
	
	ТекПоставщик = Элементы.ДеревоПоставщиковОтправкаЗаказов.ТекущиеДанные.Поставщик;
	УстановитьОтборЗаказовКОтправке(ТекПоставщик);
	
	ОтправкаЗаказовЗаполнитьРеквизитыПолучателя(ТекПоставщик);
	ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма(ТекПоставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоставщиковОтправкаЗаказовПриАктивизацииСтроки(Элемент)
	
	Перем ТекДанные;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ДеревоПоставщиковОтправкаЗаказовПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДатыПоставкиЗаказов(Команда)
	
	ТекДанные = Элементы.ЗаказыПоставщикамКОтправке.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.ДатыПоставкиПоЗаказам.ФормаСписка", , Элементы.ЗаказыПоставщикамКОтправке);
	
	мСписок = ФормаСписка.Список;
	ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаказПоставщику");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ТекДанные.Ссылка;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаСписка.ОткрытьМодально();
	
КонецПроцедуры

Функция ПолучитьТекстСкладаДляОбщегоЗаказаПоставщику(мНаименованиеСклада, мАдрес, мКомментарийКАдресу, мДатаСклада)
	
	ТекстАдресСклада = мАдрес;
	Если ЗначениеЗаполнено(мКомментарийКАдресу) Тогда
		Попытка
			мДатаДействияАдреса = Дата(Число(Сред(мКомментарийКАдресу, 7, 4)), Число(Сред(мКомментарийКАдресу, 4, 2)), Число(Лев(мКомментарийКАдресу, 2)));
			Если мДатаСклада >= мДатаДействияАдреса Тогда
				ТекстАдресСклада = Сред(мКомментарийКАдресу, 12);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//+++АК BARA ИП-00017991      21.02.2018	
	//Возврат СокрЛП(ТекстАдресСклада) + " (" + СокрЛП(мНаименованиеСклада) + ")";	
	Возврат СокрЛП(ТекстАдресСклада);	
	//---АК BARA ИП-00017991      21.02.2018	
КонецФункции

Функция СформироватьОбщийЗаказПоставщикуСервер(мМассивПоставщиков)
	
	Перем ТабДокумент, Запрос, Выборка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ЭтаФорма.ДатаЗаказов));
	Запрос.УстановитьПараметр("МассивПоставщиков"	, мМассивПоставщиков);
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, ЭтаФорма.СписокРасчетчиковДляЗаказа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&СписокРасчетчиков)
	|	И НЕ Товары.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Поставщик,
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.Ссылка) КАК КоличествоДоговоров,
	|	МИНИМУМ(ДоговорыКонтрагентов.Код) КАК Код
	|ПОМЕСТИТЬ ВТКоличествоДоговоров
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В(&МассивПоставщиков)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Ссылка.Поставщик КАК Поставщик,
	|	ТЧТовары.Ссылка.Склад КАК Склад,
	|	ТЧТовары.Ссылка.ДатаПоступления КАК ДатаПоступления,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧТовары.Количество КАК Количество,
	|	ЕСТЬNULL(ВТКоличествоДоговоров.Код, 0) КАК КодДоговора,
	|	ЕСТЬNULL(ВТКоличествоДоговоров.КоличествоДоговоров, 0) КАК КоличествоДоговоров,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТЧТовары.Ссылка.Организация, """") = """"
	|				ИЛИ ТЧТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ОрганизацииПоставщиков.Организация, ТЧТовары.ТорговаяТочка.Организация)
	|		ИНАЧЕ ТЧТовары.Ссылка.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	ТЧТовары.Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДоговоров КАК ВТКоличествоДоговоров
	|		ПО (ВТКоличествоДоговоров.Поставщик = ТЧТовары.Ссылка.Поставщик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиОрганизаций.СрезПоследних(&ДатаНачала, Производитель В (&МассивПоставщиков)) КАК ОрганизацииПоставщиков
	|		ПО (ОрганизацииПоставщиков.Производитель = ТЧТовары.Ссылка.Поставщик)
	|ГДЕ
	|	ТЧТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|	И ТЧТовары.Ссылка.Поставщик В(&МассивПоставщиков)
	|	И ТЧТовары.Ссылка.Подготовлен
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокЗаказПоставщику.Поставщик КАК Поставщик,
	|	ДокЗаказПоставщику.Склад КАК Склад,
	|	ДокЗаказПоставщику.Склад.Наименование КАК НаименованиеСклада,
	|	ДокЗаказПоставщику.Склад.Адрес КАК АдресСклада,
	|	ВЫРАЗИТЬ(ДокЗаказПоставщику.Склад.КомментарийКАдресу КАК СТРОКА(200)) КАК КомментарийКАдресуСклада,
	|	ДокЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ДокЗаказПоставщику.Поставщик.Наименование КАК НаименованиеПоставщика,
	|	ДокЗаказПоставщику.Поставщик.ИД КАК ИДПоставщика
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
	|ГДЕ
	|	ДокЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокЗаказПоставщику.Поставщик В(&МассивПоставщиков)
	|	И НЕ ДокЗаказПоставщику.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокЗаказПоставщику.Поставщик,
	|	ДокЗаказПоставщику.Склад,
	|	ДокЗаказПоставщику.Склад.Наименование,
	|	ДокЗаказПоставщику.Склад.Адрес,
	|	ВЫРАЗИТЬ(ДокЗаказПоставщику.Склад.КомментарийКАдресу КАК СТРОКА(200)),
	|	ДокЗаказПоставщику.ДатаПоступления,
	|	ДокЗаказПоставщику.Поставщик.Наименование,
	|	ДокЗаказПоставщику.Поставщик.ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеПоставщика,
	|	Склад,
	|	ДатаПоступления
	|ИТОГИ
	|	МАКСИМУМ(НаименованиеПоставщика),
	|	МАКСИМУМ(ИДПоставщика)
	|ПО
	|	Поставщик";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	РезультатЗаказыПоставщику = РезультатыЗапроса[3];
	Если РезультатЗаказыПоставщику.Пустой() Тогда
		Сообщить("Нет данных для печати!");
		Возврат ТабДокумент;
	КонецЕсли;
	
	ВыборкаПоПоставщикам = РезультатЗаказыПоставщику.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
	
	СпрДоговоры = Справочники.ДоговорыКонтрагентов;
	ТаблицаТовары = РезультатыЗапроса[2].Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		Если СтрокаТаблицы.КоличествоДоговоров = 1 Тогда
			мДоговор = СпрДоговоры.НайтиПоКоду(СтрокаТаблицы.КодДоговора);
			//+++ AK suvv 10.04.2018 ИП-00018351 
			//СтрокаТаблицы.ОрганизацияПолучатель = мДоговор.Организация;
			СтрокаТаблицы.ОрганизацияПолучатель = ?(ЗначениеЗаполнено(СтрокаТаблицы.ОрганизацияПолучатель), СтрокаТаблицы.ОрганизацияПолучатель, мДоговор.Организация);
			//--- AK suvv
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОтбора = "Поставщик, Склад, ДатаПоступления";
	ТаблицаТовары.Свернуть(СтрокаОтбора + ", ОрганизацияПолучатель, Номенклатура, НаименованиеНоменклатуры, ЕдиницаИзмерения, id_tov", "Количество");
	ТаблицаТовары.Сортировать("ОрганизацияПолучатель, НаименованиеНоменклатуры");

	ПервыйПоставщик = Истина;
	мОбъектыПечати 	= Новый СписокЗначений;
	
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
	
	ТекМакет = Документы.ЗаказПоставщику.ПолучитьМакет("ПФ_ЗаказПоставщику");
	
	ОбластьМакетаШапка 			= ТекМакет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаТовары 	= ТекМакет.ПолучитьОбласть("ШапкаТовары");
	ОбластьМакетаСтрока 		= ТекМакет.ПолучитьОбласть("Строка");
	
	
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
		Если НЕ ПервыйПоставщик Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйПоставщик = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
			
		// Заполнить реквизиты шапки
		ОбластьМакетаШапка.Параметры.Поставщик 				= ВыборкаПоПоставщикам.Поставщик;
		ОбластьМакетаШапка.Параметры.НаименованиеПоставщика = СокрЛП(ВыборкаПоПоставщикам.НаименованиеПоставщика);
		ОбластьМакетаШапка.Параметры.ДатаЗаказа 			= Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д");
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// +++ AK GOLV ИП-00020442 15.11.2018
		Если ВыборкаПоПоставщикам.ИДПоставщика = 16815 Тогда
			ОбластьМакетаСтрока 		= ТекМакет.ПолучитьОбласть("СтрокаИД");
		Иначе
			ОбластьМакетаСтрока 		= ТекМакет.ПолучитьОбласть("Строка");
		КонецЕсли;
		// --- AK GOLV
		
		// Заполнить реквизиты шапки (товары)
		ВыборкаШапкаТовары = ВыборкаПоПоставщикам.Выбрать();
		Пока ВыборкаШапкаТовары.Следующий() Цикл
		
			//печСклад 			= СокрЛП(ВыборкаШапкаТовары.АдресСклада) + " (" + СокрЛП(ВыборкаШапкаТовары.Склад.Наименование) + ")";
			ТекДатаСклад = ВыборкаШапкаТовары.ДатаПоступления - 86400;
			печСклад 			= ПолучитьТекстСкладаДляОбщегоЗаказаПоставщику(ВыборкаШапкаТовары.НаименованиеСклада,
																					ВыборкаШапкаТовары.АдресСклада, ВыборкаШапкаТовары.КомментарийКАдресуСклада, ТекДатаСклад);
			печДатаПоступления 	= Формат(ВыборкаШапкаТовары.ДатаПоступления	, "ДЛФ=Д");
			печДатаСклад		= Формат(ТекДатаСклад						, "ДЛФ=Д");
			
			мОрганизацияПолучатель = Неопределено;
			СтруктураОтбора.Поставщик 		= ВыборкаПоПоставщикам.Поставщик;
			СтруктураОтбора.Склад 			= ВыборкаШапкаТовары.Склад;
			СтруктураОтбора.ДатаПоступления = ВыборкаШапкаТовары.ДатаПоступления;
			СтрокиТоваров = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
				
				Если НЕ СтрокаТовары.ОрганизацияПолучатель = мОрганизацияПолучатель Тогда
					ОбластьМакетаШапкаТовары.Параметры.ОрганизацияПолучатель 	= СтрокаТовары.ОрганизацияПолучатель;
					ОбластьМакетаШапкаТовары.Параметры.Склад 					= печСклад;
					ОбластьМакетаШапкаТовары.Параметры.ДатаПоступления 			= печДатаПоступления;
					ОбластьМакетаШапкаТовары.Параметры.ДатаСклад 				= печДатаСклад;
					ТабДокумент.Вывести(ОбластьМакетаШапкаТовары);
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Номенклатура 		= СтрокаТовары.Номенклатура;
				ОбластьМакетаСтрока.Параметры.Товар 			= СокрЛП(СтрокаТовары.НаименованиеНоменклатуры);
				ОбластьМакетаСтрока.Параметры.ЕдиницаИзмерения 	= СтрокаТовары.ЕдиницаИзмерения;
				ОбластьМакетаСтрока.Параметры.Количество 		= Формат(СтрокаТовары.Количество, "ЧГ=");
				// +++ AK GOLV ИП-00020442 15.11.2018
				Если ВыборкаПоПоставщикам.ИДПоставщика = 16815 Тогда
					ОбластьМакетаСтрока.Параметры.ИД				= СтрокаТовары.id_tov;
				КонецЕсли;
				// --- AK GOLV					
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				мОрганизацияПолучатель = СтрокаТовары.ОрганизацияПолучатель;

			КонецЦикла;
			
		КонецЦикла;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, мОбъектыПечати, Неопределено);//ВыборкаШапкаТовары.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
    Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьОбщийЗаказПоставщикуСРаспределениемСервер(мМассивПоставщиков)
	
	Перем ТабДокумент, Запрос, Выборка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ЭтаФорма.ДатаЗаказов));
	Запрос.УстановитьПараметр("МассивПоставщиков"	, мМассивПоставщиков);
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, ЭтаФорма.СписокРасчетчиковДляЗаказа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Товары.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&СписокРасчетчиков)
	|	И НЕ Товары.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК Поставщик,
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.Ссылка) КАК КоличествоДоговоров,
	|	МИНИМУМ(ДоговорыКонтрагентов.Код) КАК Код
	|ПОМЕСТИТЬ ВТКоличествоДоговоров
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В(&МассивПоставщиков)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧТовары.Ссылка КАК Ссылка,
	|	ТЧТовары.Ссылка.Поставщик КАК Поставщик,
	|	ТЧТовары.Ссылка.Склад КАК Склад,
	|	ТЧТовары.Ссылка.ДатаПоступления КАК ДатаПоступления,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧТовары.ТорговаяТочка КАК ТорговаяТочка,
	|	ТЧТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТоварыПредзаказов
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ТЧТовары
	|ГДЕ
	|	ТЧТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|	И ТЧТовары.Ссылка.Поставщик В(&МассивПоставщиков)
	|	И ТЧТовары.Ссылка.Подготовлен
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧТовары.Поставщик КАК Поставщик,
	|	ТЧТовары.Склад КАК Склад,
	|	ТЧТовары.ДатаПоступления КАК ДатаПоступления,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧТовары.Количество КАК Количество,
	|	ЕСТЬNULL(ВТКоличествоДоговоров.Код, 0) КАК КодДоговора,
	|	ЕСТЬNULL(ВТКоличествоДоговоров.КоличествоДоговоров, 0) КАК КоличествоДоговоров,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТЧТовары.Ссылка.Организация, """") = """"
	|				ИЛИ ТЧТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ОрганизацииПоставщиков.Организация, ТЧТовары.ТорговаяТочка.Организация)
	|		ИНАЧЕ ТЧТовары.Ссылка.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель
	|ИЗ
	|	ВТТоварыПредзаказов КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДоговоров КАК ВТКоличествоДоговоров
	|		ПО (ВТКоличествоДоговоров.Поставщик = ТЧТовары.Поставщик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиОрганизаций.СрезПоследних(&ДатаНачала, Производитель В (&МассивПоставщиков)) КАК ОрганизацииПоставщиков
	|		ПО (ОрганизацииПоставщиков.Производитель = ТЧТовары.Поставщик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокЗаказПоставщику.Поставщик КАК Поставщик,
	|	ДокЗаказПоставщику.Склад КАК Склад,
	|	ДокЗаказПоставщику.Склад.Наименование КАК НаименованиеСклада,
	|	ДокЗаказПоставщику.Склад.Адрес КАК АдресСклада,
	|	ДокЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ДокЗаказПоставщику.Поставщик.Наименование КАК НаименованиеПоставщика
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
	|ГДЕ
	|	ДокЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокЗаказПоставщику.Поставщик В(&МассивПоставщиков)
	|	И НЕ ДокЗаказПоставщику.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокЗаказПоставщику.Поставщик,
	|	ДокЗаказПоставщику.Склад,
	|	ДокЗаказПоставщику.Склад.Наименование,
	|	ДокЗаказПоставщику.Склад.Адрес,
	|	ДокЗаказПоставщику.ДатаПоступления,
	|	ДокЗаказПоставщику.Поставщик.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеПоставщика,
	|	Склад,
	|	ДатаПоступления
	|ИТОГИ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиРаспределенныеПоТТ.Дата КАК Дата,
	|	ДокЗаказПоставщику.Склад КАК Склад,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка КАК ТорговаяТочка,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка.НомерТочки КАК НомерТочки,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура КАК Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(, ) КАК ПорядокОбеспеченияТорговыхТочек
	|		ПО (ПорядокОбеспеченияТорговыхТочек.ТорговаяТочка = ОстаткиРаспределенныеПоТТ.ТорговаяТочка)
	|			И (ПорядокОбеспеченияТорговыхТочек.ГруппаУРЗ = ОстаткиРаспределенныеПоТТ.Номенклатура.ГруппаНоменклатурыУРЗ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
	|		ПО (ДокЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ДокЗаказПоставщику.Поставщик В (&МассивПоставщиков))
	|			И (НЕ ДокЗаказПоставщику.ПометкаУдаления)
	|			И (ДокЗаказПоставщику.ДатаПоступления = ОстаткиРаспределенныеПоТТ.Дата)
	|			И (ДокЗаказПоставщику.Склад = ПорядокОбеспеченияТорговыхТочек.Расчетчик)
	|ГДЕ
	|	ОстаткиРаспределенныеПоТТ.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТТоварыПредзаказов.Номенклатура
	|			ИЗ
	|				ВТТоварыПредзаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРаспределенныеПоТТ.Дата,
	|	ДокЗаказПоставщику.Склад,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.Наименование,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка.НомерТочки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиРаспределенныеПоТТ.Дата,
	|	ДокЗаказПоставщику.Склад,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка.НомерТочки,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.Наименование,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество)
	|ИЗ
	|	РегистрСведений.ОстаткиРаспределенныеПоТТПолная КАК ОстаткиРаспределенныеПоТТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(, ) КАК ПорядокОбеспеченияТорговыхТочек
	|		ПО (ПорядокОбеспеченияТорговыхТочек.ТорговаяТочка = ОстаткиРаспределенныеПоТТ.ТорговаяТочка)
	|			И (ПорядокОбеспеченияТорговыхТочек.ГруппаУРЗ = ОстаткиРаспределенныеПоТТ.Номенклатура.ГруппаНоменклатурыУРЗ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
	|		ПО (ДокЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ДокЗаказПоставщику.Поставщик В (&МассивПоставщиков))
	|			И (НЕ ДокЗаказПоставщику.ПометкаУдаления)
	|			И (ДокЗаказПоставщику.ДатаПоступления = ОстаткиРаспределенныеПоТТ.Дата)
	|			И (ДокЗаказПоставщику.Склад = ПорядокОбеспеченияТорговыхТочек.Расчетчик)
	|ГДЕ
	|	ОстаткиРаспределенныеПоТТ.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТТоварыПредзаказов.Номенклатура
	|			ИЗ
	|				ВТТоварыПредзаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРаспределенныеПоТТ.Дата,
	|	ДокЗаказПоставщику.Склад,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.Наименование,
	|	ОстаткиРаспределенныеПоТТ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ОстаткиРаспределенныеПоТТ.ТорговаяТочка.НомерТочки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиРаспределенныеПоТТ.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТочки,
	|	Номенклатура";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	//
	ТабДокумент = Новый ТабличныйДокумент;
	
	РезультатЗаказыПоставщику = РезультатыЗапроса[4];
	Если РезультатЗаказыПоставщику.Пустой() Тогда
		Сообщить("Нет данных для печати!");
		Возврат ТабДокумент;
	КонецЕсли;
	
	ВыборкаПоПоставщикам = РезультатЗаказыПоставщику.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
	
	СпрДоговоры = Справочники.ДоговорыКонтрагентов;
	ТаблицаТовары = РезультатыЗапроса[3].Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		Если СтрокаТаблицы.КоличествоДоговоров = 1 Тогда
			мДоговор = СпрДоговоры.НайтиПоКоду(СтрокаТаблицы.КодДоговора);
			//+++ AK suvv 09.04.2018 ИП-00018351 
			//СтрокаТаблицы.ОрганизацияПолучатель = мДоговор.Организация;
			СтрокаТаблицы.ОрганизацияПолучатель = ?(ЗначениеЗаполнено(СтрокаТаблицы.ОрганизацияПолучатель), СтрокаТаблицы.ОрганизацияПолучатель, мДоговор.Организация);
			//--- AK suvv
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОтбора = "Поставщик, Склад, ДатаПоступления";
	ТаблицаТовары.Свернуть(СтрокаОтбора + ", ОрганизацияПолучатель, Номенклатура, НаименованиеНоменклатуры, ЕдиницаИзмерения", "Количество");
	ТаблицаТовары.Сортировать("ОрганизацияПолучатель, НаименованиеНоменклатуры");

	ТаблицаРаспр = РезультатыЗапроса[5].Выгрузить();
	СтруктураОтбораРаспр = Новый Структура("Дата, Склад");
	
	
	ПервыйПоставщик = Истина;
	мОбъектыПечати 	= Новый СписокЗначений;
	
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщикуСРаспределением";
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТекМакет = ОбъектОбработки.ПолучитьМакет("ЗаказПоставщикуСРаспределением");
	
	ОбластьМакетаШапка 			= ТекМакет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаТовары 	= ТекМакет.ПолучитьОбласть("ШапкаТовары");
	ОбластьМакетаСтрока 		= ТекМакет.ПолучитьОбласть("Строка");
	ОбластьМакетаШапкаРаспр		= ТекМакет.ПолучитьОбласть("ШапкаТТ");
	ОбластьМакетаСтрокаРаспр 	= ТекМакет.ПолучитьОбласть("СтрокаТТ");
	
	
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
		Если НЕ ПервыйПоставщик Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйПоставщик = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
			
		// Заполнить реквизиты шапки
		ОбластьМакетаШапка.Параметры.Поставщик 				= ВыборкаПоПоставщикам.Поставщик;
		ОбластьМакетаШапка.Параметры.НаименованиеПоставщика = СокрЛП(ВыборкаПоПоставщикам.Поставщик.Наименование);
		ОбластьМакетаШапка.Параметры.ДатаЗаказа 			= Формат(ЭтаФорма.ДатаЗаказов, "ДЛФ=Д");
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Заполнить реквизиты шапки (товары)
		ВыборкаШапкаТовары = ВыборкаПоПоставщикам.Выбрать();
		Пока ВыборкаШапкаТовары.Следующий() Цикл
		
			печСклад 			= СокрЛП(ВыборкаШапкаТовары.АдресСклада) + " (" + СокрЛП(ВыборкаШапкаТовары.НаименованиеСклада) + ")";
			печДатаПоступления 	= Формат(ВыборкаШапкаТовары.ДатаПоступления			, "ДЛФ=Д");
			печДатаСклад		= Формат(ВыборкаШапкаТовары.ДатаПоступления - 86400	, "ДЛФ=Д");
			
			мОрганизацияПолучатель = Неопределено;
			СтруктураОтбора.Поставщик 		= ВыборкаПоПоставщикам.Поставщик;
			СтруктураОтбора.Склад 			= ВыборкаШапкаТовары.Склад;
			СтруктураОтбора.ДатаПоступления = ВыборкаШапкаТовары.ДатаПоступления;
			СтрокиТоваров = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
				
				Если НЕ СтрокаТовары.ОрганизацияПолучатель = мОрганизацияПолучатель Тогда
					ОбластьМакетаШапкаТовары.Параметры.ОрганизацияПолучатель 	= СтрокаТовары.ОрганизацияПолучатель;
					ОбластьМакетаШапкаТовары.Параметры.Склад 					= печСклад;
					ОбластьМакетаШапкаТовары.Параметры.ДатаПоступления 			= печДатаПоступления;
					ОбластьМакетаШапкаТовары.Параметры.ДатаСклад 				= печДатаСклад;
					ТабДокумент.Вывести(ОбластьМакетаШапкаТовары);
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Номенклатура 		= СтрокаТовары.Номенклатура;
				ОбластьМакетаСтрока.Параметры.Товар 			= СокрЛП(СтрокаТовары.НаименованиеНоменклатуры);
				ОбластьМакетаСтрока.Параметры.ЕдиницаИзмерения 	= СтрокаТовары.ЕдиницаИзмерения;
				ОбластьМакетаСтрока.Параметры.Количество 		= Формат(СтрокаТовары.Количество, "ЧГ=");
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
				мОрганизацияПолучатель = СтрокаТовары.ОрганизацияПолучатель;

			КонецЦикла;
			
			СтруктураОтбораРаспр.Склад 	= ВыборкаШапкаТовары.Склад;
			СтруктураОтбораРаспр.Дата 	= ВыборкаШапкаТовары.ДатаПоступления;
			СтрокиРаспр = ТаблицаРаспр.НайтиСтроки(СтруктураОтбораРаспр);
			Если СтрокиРаспр.Количество() > 0  Тогда
				ТабДокумент.Вывести(ОбластьМакетаШапкаРаспр);
				Для Каждого СтрокаТовары Из СтрокиРаспр Цикл
					ОбластьМакетаСтрокаРаспр.Параметры.ТорговаяТочка 	= СтрокаТовары.ТорговаяТочка;
					ОбластьМакетаСтрокаРаспр.Параметры.Номенклатура 	= СтрокаТовары.Номенклатура;
					ОбластьМакетаСтрокаРаспр.Параметры.Товар 			= СокрЛП(СтрокаТовары.НаименованиеНоменклатуры);
					ОбластьМакетаСтрокаРаспр.Параметры.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
					ОбластьМакетаСтрокаРаспр.Параметры.Количество 		= Формат(СтрокаТовары.Количество, "ЧГ=");
					ТабДокумент.Вывести(ОбластьМакетаСтрокаРаспр);
				КонецЦикла;
			КонецЕсли;
				
		КонецЦикла;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, мОбъектыПечати, Неопределено);//ВыборкаШапкаТовары.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
    Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьМассивПоставщиковДляВывоза()
	
	Перем Запрос, РезультатЗапроса;
	
	мСписокРасчетчиков = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ЭтаФорма.ТаблицаРасчетчиков Цикл
		Если НЕ СтрокаТаблицы.Выводить Тогда
			Продолжить;
		КонецЕсли;
		ТекРасчетчик = СтрокаТаблицы.Расчетчик;
		Если мСписокРасчетчиков.НайтиПоЗначению(ТекРасчетчик) = Неопределено Тогда
			мСписокРасчетчиков.Добавить(ТекРасчетчик);
		КонецЕсли;
	КонецЦикла;
	
	ТекДатаПоставки = ЭтаФорма.ДатаЗаказов + 86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокРасчетчиков"		, мСписокРасчетчиков);
	Запрос.УстановитьПараметр("ДатаАссортимента"		, ТекДатаПоставки + 1);
	Запрос.УстановитьПараметр("ДеньНеделиДатыПоставки"	, ПолучитьДеньНеделиПоДате(ТекДатаПоставки));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрРасчетчики.Склад КАК Склад
	|ПОМЕСТИТЬ ВТСклады
	|ИЗ
	|	Справочник.Расчетчики КАК СпрРасчетчики
	|ГДЕ
	|	СпрРасчетчики.Ссылка В(&СписокРасчетчиков)
	|	И НЕ СпрРасчетчики.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка В(&СписокРасчетчиков)
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления
	//|	И НЕ ТЧГруппыНоменклатуры.ГруппаНоменклатуры.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныПоставщиков.Поставщик КАК Поставщик,
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель
	|ПОМЕСТИТЬ ВТЦеныПоставщиков
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаАссортимента,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)
	|				И НЕ Характеристика.Неактивная) КАК ЦеныПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = ЦеныПоставщиков.Характеристика)
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрГрафики.Ссылка КАК Ссылка,
	|	СпрГрафики.Владелец КАК Производитель
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара КАК СпрГрафики
	|ГДЕ
	|	СпрГрафики.СтруктурноеПодразделение В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады)
	|	И СпрГрафики.График.ДеньПоставки = &ДеньНеделиДатыПоставки
	|	И НЕ СпрГрафики.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЦеныПоставщиков.Поставщик КАК Поставщик
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ТЧТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафики КАК ВТГрафики
	|		ПО (ВТГрафики.Ссылка = ТЧТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЦеныПоставщиков КАК ВТЦеныПоставщиков
	|		ПО (ВТЦеныПоставщиков.Производитель = ВТГрафики.Производитель)
	|			И (ВТЦеныПоставщиков.Номенклатура = ТЧТовары.Номенклатура)
	|ГДЕ
	|	ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЦеныПоставщиков";
	
	мМассивПоставщиков = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мМассивПоставщиков.Добавить(Выборка.Поставщик);
	КонецЦикла;
	
	Возврат мМассивПоставщиков;
	
КонецФункции

Процедура СформироватьВывозОтПоставщиковСервер()
	
	Перем ТабДокумент, Запрос, Выборка;
	
	ЭтаФорма.ТабДокументВывозОтПоставщика.Очистить();
	
	//
	мМассивПоставщиков = ПолучитьМассивПоставщиковДляВывоза();
	Если мМассивПоставщиков.Количество() = 0 Тогда
		Сообщить("Нет поставщиков для вывоза!");
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПоступления"		, ЭтаФорма.ДатаЗаказов + 86400);
	Запрос.УстановитьПараметр("МассивПоставщиков"	, мМассивПоставщиков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧТовары.Ссылка.Склад КАК Склад,
	|	ТЧТовары.Ссылка.Поставщик КАК Поставщик,
	|	ТЧТовары.Ссылка.Поставщик.Наименование КАК НаименованиеПоставщика,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТЧТовары.ЕдиницаИзмерения.Вес, 0) КАК ВесЕдиницыИзмерения,
	|	СУММА(ТЧТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ТЧТовары
	|ГДЕ
	|	ТЧТовары.Ссылка.ДатаПоступления = &ДатаПоступления
	|	И ТЧТовары.Ссылка.Поставщик В(&МассивПоставщиков)
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Ссылка.Склад,
	|	ТЧТовары.Ссылка.Поставщик,
	|	ТЧТовары.Ссылка.Поставщик.Наименование,
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.Номенклатура.Наименование,
	|	ТЧТовары.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТЧТовары.ЕдиницаИзмерения.Вес, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧТовары.Ссылка.Склад.Наименование,
	|	ТЧТовары.Ссылка.Поставщик.Наименование,
	|	ТЧТовары.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Склад,
	|	Поставщик";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для печати!");
		Возврат;
	КонецЕсли;
	
	
	
	мОбъектыПечати 	= Новый СписокЗначений;
		
	ТабДокумент 	= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВывозОтПоставщиков";
	
	ТекМакет = Обработки.ПрогнозированиеПродаж.ПолучитьМакет("ВывозОтПоставщиков");
	
	ОбластьМакетаЗаголовок 	= ТекМакет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.ДатаВывоза 		= Формат(ЭтаФорма.ДатаЗаказов			, "ДЛФ=Д");
	ОбластьМакетаЗаголовок.Параметры.ДатаПоступления 	= Формат(ЭтаФорма.ДатаЗаказов + 86400	, "ДЛФ=Д");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	ОбластьМакетаСклад 		= ТекМакет.ПолучитьОбласть("Склад");
	ОбластьМакетаПоставщик 	= ТекМакет.ПолучитьОбласть("Поставщик");
	ОбластьМакетаСтрока 	= ТекМакет.ПолучитьОбласть("Строка");
	ОбластьМакетаОбщийВес 	= ТекМакет.ПолучитьОбласть("ОбщийВес");
	
	ПервыйСклад = Истина;
	
	ВыборкаПоСкладам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		Если НЕ ПервыйСклад Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйСклад = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
			
		// Склад
		ОбластьМакетаСклад.Параметры.НаименованиеСклада = СокрЛП(ВыборкаПоСкладам.Склад.Наименование);
		ОбластьМакетаСклад.Параметры.Склад 				= ВыборкаПоСкладам.Склад;
		ТабДокумент.Вывести(ОбластьМакетаСклад);
		
		// Поставщик
		ВыборкаПоПоставщикам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
		Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
			ОбластьМакетаПоставщик.Параметры.Поставщик 				= ВыборкаПоПоставщикам.Поставщик;
			ОбластьМакетаПоставщик.Параметры.НаименованиеПоставщика = СокрЛП(ВыборкаПоПоставщикам.Поставщик.Наименование);
			ТабДокумент.Вывести(ОбластьМакетаПоставщик);
			
			//
			ОбщийВесПоПоставщику = 0;
			Выборка = ВыборкаПоПоставщикам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОбластьМакетаСтрока.Параметры.Номенклатура 		= Выборка.Номенклатура;
				ОбластьМакетаСтрока.Параметры.Товар 			= СокрЛП(Выборка.НаименованиеНоменклатуры);
				ОбластьМакетаСтрока.Параметры.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
				ОбластьМакетаСтрока.Параметры.Количество 		= Формат(Выборка.Количество, "ЧГ=");
				ТабДокумент.Вывести(ОбластьМакетаСтрока);

				ОбщийВесПоПоставщику = ОбщийВесПоПоставщику + Выборка.ВесЕдиницыИзмерения * Выборка.Количество;
				
			КонецЦикла;
			
			ОбластьМакетаОбщийВес.Параметры.ОбщийВес = ОбщийВесПоПоставщику;
			ТабДокумент.Вывести(ОбластьМакетаОбщийВес);
			
		КонецЦикла;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, мОбъектыПечати, Неопределено);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	
	ЭтаФорма.ТабДокументВывозОтПоставщика = ТабДокумент;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийЗаказПоставщикуСформировать(Команда)
	
	Перем ТекВыделенныеСтроки, мМассивПоставщиков;
	
	ТекВыделенныеСтроки = Элементы.ДеревоПоставщиковОтправкаЗаказов.ВыделенныеСтроки;
	
	мМассивПоставщиков = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		ТекДанные = ЭтаФорма.ДеревоПоставщиковДляЗаказа.НайтиПоИдентификатору(СтрокаТаблицы);
		мМассивПоставщиков.Добавить(ТекДанные.Поставщик);		
	КонецЦикла;	
	Если мМассивПоставщиков.Количество() = 0 Тогда
		Сообщить("Не выбран ни один поставщик!");
		Возврат;
	КонецЕсли;
	
	//
	ТабДокумент = СформироватьОбщийЗаказПоставщикуСервер(мМассивПоставщиков);
	Если ТабДокумент = Новый ТабличныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ТабДокументОбщийЗаказПоставщику = ТабДокумент;
	
	Попытка
		ТабДокумент.Записать(ЭтаФорма.ФайлОбщийЗаказПоставщику, ТипФайлаТабличногоДокумента.XLS); 
			
		Сообщить("Файл """ + ЭтаФорма.ФайлОбщийЗаказПоставщику + """ записан.");
			
	Исключение
		Сообщить("Файл """ + ЭтаФорма.ФайлОбщийЗаказПоставщику + """ не записан." + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбщийЗаказПоставщикуСРаспределениемСформировать(Команда)
	
	Перем ТекВыделенныеСтроки, мМассивПоставщиков;
	
	ТекВыделенныеСтроки = Элементы.ДеревоПоставщиковОтправкаЗаказов.ВыделенныеСтроки;
	
	мМассивПоставщиков = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТекВыделенныеСтроки Цикл
		ТекДанные = ЭтаФорма.ДеревоПоставщиковДляЗаказа.НайтиПоИдентификатору(СтрокаТаблицы);
		мМассивПоставщиков.Добавить(ТекДанные.Поставщик);		
	КонецЦикла;	
	Если мМассивПоставщиков.Количество() = 0 Тогда
		Сообщить("Не выбран ни один поставщик!");
		Возврат;
	КонецЕсли;
	
	//
	ТабДокумент = СформироватьОбщийЗаказПоставщикуСРаспределениемСервер(мМассивПоставщиков);
	Если ТабДокумент = Новый ТабличныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ТабДокументОбщийЗаказПоставщику = ТабДокумент;
	
	Попытка
		ТабДокумент.Записать(ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр, ТипФайлаТабличногоДокумента.XLS); 
			
		Сообщить("Файл """ + ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр + """ записан.");
			
	Исключение
		Сообщить("Файл """ + ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр + """ не записан." + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОтправкаЗаказовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
 	ДиалогВыбораФайла.Заголовок	= "Выберите каталог сохранения файлов отправки заказов";

	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.КаталогФайловОтправкаЗаказов = ДиалогВыбораФайла.Каталог;
		
		ТекДанные = Элементы.ДеревоПоставщиковОтправкаЗаказов.ТекущиеДанные;
		ТекПоставщик = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик);
		ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма(ТекПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОтправкаЗаказовПриИзменении(Элемент)

	ТекДанные = Элементы.ДеревоПоставщиковОтправкаЗаказов.ТекущиеДанные;
	ТекПоставщик = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Поставщик);
	ОтправкаЗаказовЗаполнитьИмяФайлаИТемуПисьма(ТекПоставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбщийЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Фильтр					= "Документ Microsoft Excel (*.xls)|*.xls";
	ДиалогВыбораФайла.Расширение				= "xls";
	ДиалогВыбораФайла.Заголовок					= "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	Если НЕ ЭтаФорма.КаталогФайловОтправкаЗаказов = "" Тогда
		ДиалогВыбораФайла.Каталог				= ЭтаФорма.КаталогФайловОтправкаЗаказов;
	КонецЕсли;
	ДиалогВыбораФайла.ПолноеИмяФайла			= ЭтаФорма.ФайлОбщийЗаказПоставщику;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ФайлОбщийЗаказПоставщику = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбщийЗаказПоставщикуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + ЭтаФорма.ФайлОбщийЗаказПоставщику);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбщийЗаказПоставщикуРаспрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Фильтр					= "Документ Microsoft Excel (*.xls)|*.xls";
	ДиалогВыбораФайла.Расширение				= "xls";
	ДиалогВыбораФайла.Заголовок					= "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	Если НЕ ЭтаФорма.КаталогФайловОтправкаЗаказов = "" Тогда
		ДиалогВыбораФайла.Каталог				= ЭтаФорма.КаталогФайловОтправкаЗаказов;
	КонецЕсли;
	ДиалогВыбораФайла.ПолноеИмяФайла			= ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбщийЗаказПоставщикуРаспрОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + ЭтаФорма.ФайлОбщийЗаказПоставщикуРаспр);
	
КонецПроцедуры

Процедура ОбщийЗаказПоставщикуОтправитьПоПочтеСервер(ИмяРеквизитаФайл)
	
	мПочта = Новый ИнтернетПочта;
	мПрофиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(ЭтаФорма.УчетнаяЗаписьЭлПочты);
	мПисьмо = Новый ИнтернетПочтовоеСообщение;
	
	Попытка
		
		мПочта.Подключиться(мПрофиль);
		
		мПисьмо.Тема 			= ЭтаФорма.ТекстПисьмаЭлПочты;
		мПисьмо.ИмяОтправителя  = СокрЛП(ЭтаФорма.УчетнаяЗаписьЭлПочты);
		мПисьмо.Отправитель     = СокрЛП(ЭтаФорма.УчетнаяЗаписьЭлПочты);
		
		МассивАдресовПолучателя = Новый Массив;
		РазделительАдресов = ";";
		ТекСтрокаАдресов = ЭтаФорма.АдресПолучателяЭлПочты;
		ПозицияРазделителя = Найти(ТекСтрокаАдресов, РазделительАдресов);
		Пока ПозицияРазделителя > 0 Цикл
			МассивАдресовПолучателя.Добавить(Лев(ТекСтрокаАдресов, ПозицияРазделителя - 1));
			ТекСтрокаАдресов = СокрЛ(Сред(ТекСтрокаАдресов, ПозицияРазделителя + 1));
			ПозицияРазделителя = Найти(ТекСтрокаАдресов, РазделительАдресов);
		КонецЦикла;
		МассивАдресовПолучателя.Добавить(СокрЛП(ТекСтрокаАдресов));
		
		Для Каждого ТекАдресПолучателя Из МассивАдресовПолучателя Цикл
			СтрокаПолучатель = мПисьмо.Получатели.Добавить();
			СтрокаПолучатель.Адрес 				= ТекАдресПолучателя;
			СтрокаПолучатель.ОтображаемоеИмя 	= ЭтаФорма.ТекстПолучательЭлПочты;
		КонецЦикла;
		
		ТекстСообщения = мПисьмо.Тексты.Добавить();
		ТекстСообщения.Текст     = ЭтаФорма.ТекстПисьмаЭлПочты + Символы.ПС +
									"Данное письмо сформировано автоматически и не предполагает ответ, НЕ отвечайте на него.";
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
		ТекКаталогКлиент = ЭтаФорма.КаталогФайловОтправкаЗаказов + ?(Прав(ЭтаФорма.КаталогФайловОтправкаЗаказов, 1) = "\", "", "\");
		ИмяВремФайла = КаталогВременныхФайлов() + Сред(ЭтаФорма[ИмяРеквизитаФайл], СтрДлина(ТекКаталогКлиент) + 1);
		ЭтаФорма.ТабДокументОбщийЗаказПоставщику.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.XLS);
		
		мПисьмо.Вложения.Добавить(ИмяВремФайла, ЭтаФорма.ТекстПисьмаЭлПочты);

		мПочта.Послать(мПисьмо);
		мПочта.Отключиться();
		
		Сообщить("Письмо отправлено");
		
	Исключение
		Сообщить("Ошибка связи с почтовым сервером " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийЗаказПоставщикуОтправитьПоПочте(Команда)

	ОбщийЗаказПоставщикуОтправитьПоПочтеСервер("ФайлОбщийЗаказПоставщику");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийЗаказПоставщикуРаспрОтправитьПоПочте(Команда)

	ОбщийЗаказПоставщикуОтправитьПоПочтеСервер("ФайлОбщийЗаказПоставщикуРаспр");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывозОтПоставщиковСформировать(Команда)

	СформироватьВывозОтПоставщиковСервер();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Задания на перемещение и фасовку"

Процедура СкладОтправительПриИзмененииСервер()
	
	ОтборНаФорме = ЭтаФорма.ЗаданияНаФасовку.Отбор;
	
	мПолеКомпоновки = Новый ПолеКомпоновкиДанных("СкладОтправитель");
	НайденЭлемент = Ложь;
	Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = мПолеКомпоновки Тогда
			ЭлементОтбора.Использование 	= ЭтаФорма.СкладОтправитель.Пустая();
			ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СкладОтправитель;
			НайденЭлемент = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ НайденЭлемент Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= мПолеКомпоновки;
		ЭлементОтбора.Использование 	= ЭтаФорма.СкладОтправитель.Пустая();
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СкладОтправитель;
	КонецЕсли;
	
	Элементы.ЗаданияНаФасовку.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)

	СкладОтправительПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Склады.Форма.ФормаВыбораУправляемая",, Элемент);
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = ЭтаФорма.СкладОтправитель;

	ФормаВыбора.СтруктурнаяЕдиница = ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СкладПолучательПриИзмененииСервер()
	
	ОтборНаФорме = ЭтаФорма.ЗаданияНаФасовку.Отбор;
	
	мПолеКомпоновки = Новый ПолеКомпоновкиДанных("СкладПолучатель");
	НайденЭлемент = Ложь;
	Для Каждого ЭлементОтбора Из ОтборНаФорме.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = мПолеКомпоновки Тогда
			ЭлементОтбора.Использование 	= ЭтаФорма.СкладПолучатель.Пустая();
			ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СкладПолучатель;
			НайденЭлемент = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ НайденЭлемент Тогда
		ЭлементОтбора = ОтборНаФорме.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= мПолеКомпоновки;
		ЭлементОтбора.Использование 	= ЭтаФорма.СкладПолучатель.Пустая();
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ЭтаФорма.СкладПолучатель;
	КонецЕсли;
	
	Элементы.ЗаданияНаФасовку.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)

	СкладПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Склады.Форма.ФормаВыбораУправляемая",, Элемент);
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = ЭтаФорма.СкладПолучатель;

	ФормаВыбора.СтруктурнаяЕдиница = ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СоздатьЗаданияНаПеремещениеСервер()
	
    //
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАссортимента", КонецДня(ЭтаФорма.ДатаЗаданийНаФасовку + 86400));
	Запрос.УстановитьПараметр("Расчетчик"		, Объект.Расчетчик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка = &Расчетчик
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочек.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаАссортимента,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ТоварныйАссортиментТочек.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика КАК Характеристика,
	|	МАКСИМУМ(СпрЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	|		ПО (ВТТоварныйАссортимент.Номенклатура = ВТНоменклатура.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО (СпрЕдиницыИзмерения.Владелец = ВТНоменклатура.Номенклатура)
	|			И (СпрЕдиницыИзмерения.ЕдиницаПоКлассификатору = ВТНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения)
	|ГДЕ
	|	НЕ СпрЕдиницыИзмерения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТНоменклатура.Номенклатура.Наименование";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для формирования заданий!");
		Возврат;
	КонецЕсли;
	
	//
	НовыйДокумент = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
	
	НовыйДокумент.Дата 				= ЭтаФорма.ДатаЗаданийНаФасовку;
	НовыйДокумент.СкладОтправитель 	= ЭтаФорма.СкладОтправитель;
	НовыйДокумент.СкладПолучатель 	= ЭтаФорма.СкладПолучатель;
	НовыйДокумент.СтруктурнаяЕдиница = Объект.Расчетчик.Склад;
	
	ТЧТовары = НовыйДокумент.Товары;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЧТовары.Добавить();
		НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
		НоваяСтрока.Характеристика 		= Выборка.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ДатаПроизводства 	= ЭтаФорма.ДатаЗаданийНаФасовку;
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать();
		Сообщить("Документ " + НовыйДокумент + " записан.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//
	Элементы.ЗаданияНаПеремещение.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаПеремещение(Команда)
	
	Если ЭтаФорма.ДатаЗаданийНаФасовку = Дата(1,1,1) Тогда
		Сообщить("Не указана дата создания документов!");
		Возврат;
	КонецЕсли;
	
	СоздатьЗаданияНаПеремещениеСервер();
	
КонецПроцедуры

Процедура СоздатьЗаданияНаФасовкуСервер()
	
    //
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАссортимента", КонецДня(ЭтаФорма.ДатаЗаданийНаФасовку + 86400));
	Запрос.УстановитьПараметр("Расчетчик"		, Объект.Расчетчик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧГруппыНоменклатуры.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК ТЧГруппыНоменклатуры
	|ГДЕ
	|	ТЧГруппыНоменклатуры.Ссылка = &Расчетчик
	|	И НЕ ТЧГруппыНоменклатуры.Ссылка.ПометкаУдаления
	//|	И НЕ ТЧГруппыНоменклатуры.ГруппаНоменклатуры.Выведена
	|	И ТЧГруппыНоменклатуры.ГруппаНоменклатуры.Фасуется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	|	ТоварныйАссортиментТочек.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаАссортимента,
	|			ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				И ТорговаяТочка.Активное
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура
	|					ИЗ
	|						ВТНоменклатура)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныйАссортиментТочек.Номенклатура,
	|	ТоварныйАссортиментТочек.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика КАК Характеристика,
	|	МАКСИМУМ(СпрЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	|		ПО (ВТТоварныйАссортимент.Номенклатура = ВТНоменклатура.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО (СпрЕдиницыИзмерения.Владелец = ВТНоменклатура.Номенклатура)
	|			И (СпрЕдиницыИзмерения.ЕдиницаПоКлассификатору = ВТНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения)
	|ГДЕ
	|	НЕ СпрЕдиницыИзмерения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Номенклатура,
	|	ВТТоварныйАссортимент.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТНоменклатура.Номенклатура.Наименование";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для формирования заданий!");
		Возврат;
	КонецЕсли;
	
	//
	НовыйДокумент = Документы.ЗаданиеНаФасовку.СоздатьДокумент();
	
	НовыйДокумент.Дата 				= ЭтаФорма.ДатаЗаданийНаФасовку;
	НовыйДокумент.СкладОтправитель 	= ЭтаФорма.СкладОтправитель;
	НовыйДокумент.СкладПолучатель 	= ЭтаФорма.СкладПолучатель;
	НовыйДокумент.СтруктурнаяЕдиница = Объект.Расчетчик.Склад;
	
	ТЧТовары = НовыйДокумент.Товары;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЧТовары.Добавить();
		НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
		НоваяСтрока.Характеристика 		= Выборка.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ДатаПроизводства 	= ЭтаФорма.ДатаЗаданийНаФасовку;
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать();
		Сообщить("Документ " + НовыйДокумент + " записан.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//
	Элементы.ЗаданияНаФасовку.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаФасовку(Команда)
	
	Если ЭтаФорма.ДатаЗаданийНаФасовку = Дата(1,1,1) Тогда
		Сообщить("Не указана дата создания документов!");
		Возврат;
	КонецЕсли;
	
	СоздатьЗаданияНаФасовкуСервер();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "СМС"

&НаКлиенте
Процедура СформироватьОтчетПоНепоступившимЗаказам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРаспределения", ЭтаФорма.ДатаЗаказов);
	
	ОткрытьФормуМодально("Обработка.ПрогнозированиеПродаж.Форма.ФормаНеЗакрытыхЗаказов", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

Функция ПолучитьТекстСМСДляВодителя()
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"	, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("Дата"	, ЭтаФорма.ДатаЗаказов + 86400);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредзаказТовары.Ссылка.Поставщик КАК Поставщик,
	|	ПредзаказТовары.Ссылка.Поставщик.sms_k КАК НаименованиеПоставщикаДляСМС,
	|	ПредзаказТовары.Номенклатура КАК Номенклатура,
	|	ПредзаказТовары.Номенклатура.НаименованиеДляСМС КАК НаименованиеНоменклатурыДляСМС,
	|	СУММА(ПредзаказТовары.Количество) КАК Количество,
	|	СУММА(ПредзаказТовары.Количество * ПредзаказТовары.ЕдиницаИзмерения.Вес) КАК Вес
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ПредзаказТовары
	|ГДЕ
	|	ПредзаказТовары.Ссылка.ДатаПоступления = &Дата
	|	И ПредзаказТовары.Ссылка.Склад = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредзаказТовары.Ссылка.Поставщик,
	|	ПредзаказТовары.Номенклатура,
	|	ПредзаказТовары.Ссылка.Поставщик.sms_k,
	|	ПредзаказТовары.Номенклатура.НаименованиеДляСМС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Поставщик,
	|	СУММА(ВТТовары.Вес) КАК Вес
	|ПОМЕСТИТЬ ВТВеса
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовары.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Поставщик,
	|	ВТТовары.НаименованиеПоставщикаДляСМС,
	|	ВТТовары.НаименованиеНоменклатурыДляСМС,
	|	ВТТовары.Количество,
	|	ЕСТЬNULL(ВТВеса.Вес, 0) КАК Вес,
	|	ВТТовары.Количество / ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL 
	|				ИЛИ ЗначенияСвойствОбъектов.Значение = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК ЧИСЛО(10, 3))
	|	КОНЕЦ КАК КоличествоКоробок
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВеса КАК ВТВеса
	|		ПО (ВТВеса.Поставщик = ВТТовары.Поставщик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке))
	|			И (ЗначенияСвойствОбъектов.Объект = ВТТовары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВеса";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	мТекстДатыПоставки 	= Лев(Формат(ЭтаФорма.ДатаЗаказов + 86400	, "ДЛФ=Д"), 5);
	мТекстДатыВывоза 	= Лев(Формат(ЭтаФорма.ДатаЗаказов			, "ДЛФ=Д"), 5);
	мТекстСМС = "Вывоз от поставщиков " + мТекстДатыВывоза + ". Заказы на " + мТекстДатыПоставки + " :::::::" +
				"Склад " + СокрЛП(Объект.Расчетчик.Склад.НазваниеВСМС) + ".";
	
	ТекПоставщик = Неопределено;			
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Поставщик = ТекПоставщик Тогда
			мТекстСМС = мТекстСМС + " __" + СокрЛП(Выборка.НаименованиеПоставщикаДляСМС) + "[" + Выборка.Вес + "кг] _";
			
			ТекПоставщик = Выборка.Поставщик;
		КонецЕсли;
		
		мТекстСМС = мТекстСМС + Выборка.НаименованиеНоменклатурыДляСМС + ":" + Формат(Выборка.Количество, "ЧГ=") +
					"(" + Формат(Выборка.КоличествоКоробок, "ЧГ=") + ") ";
		
	КонецЦикла;
	
	Возврат мТекстСМС;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТекстСМС(Команда)
	
	Перем мТекстСМС;
	
	мТекстСМС = ПолучитьТекстСМСДляВодителя();
	
	ЭтаФорма.ТекстСМСДляВодителя = мТекстСМС;
	
КонецПроцедуры

Процедура ВыполнитьЗапросНаОтправкуСМС(ТекстЗапроса, СтрокаПодключения = "")  
	
	Попытка
		
		Command 			= Новый COMОбъект("ADODB.Command");
		CurrentConnection 	= Новый COMОбъект("ADODB.Connection");
		Catalog 			= Новый COMОбъект("ADOX.Catalog");			
		RecordSet 			= Новый COMОбъект("ADODB.RecordSet");
		
		Catalog.ActiveConnection 	= СтрокаПодключения;
		
		CurrentConnection.Open(СтрокаПодключения);		
		Command.ActiveConnection 	= CurrentConnection;
		Command.CommandText 		= ТекстЗапроса;
		
		RecordSet = Command.Execute(); //Выполнение и получение набора данных
		RecordSet.Close();
		
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
		
КонецПроцедуры

Функция ОтправитьСМСВодителюСервер()
	
	СтрокаВозврата = "";
	
	Если СтрДлина(Формат(ЭтаФорма.ТелефонВодителя,"ЧГ=0")) < 10 ТОгда
		Возврат "Проверьте ещё раз формат номера телефона!";
	КонецЕсли;
	Если СокрЛП(ЭтаФорма.ТекстСМСДляВодителя) = "" Тогда
		Возврат "Текст сообщения не сформирован. Отправка невозможна!";
	КонецЕсли;
		
	ТекстЗапроса =
	"INSERT INTO [SMSGate].[dbo].[Incoming]
	|      ([Date]
	|      ,[nomer]
	|      ,[text]
	|      ,[Time]
	|      ,[source])
	|SELECT CONVERT(DATETIME, CONVERT(DATE, GETDATE())) , 
	|/**BPar1**/'~~~~~'/**FPar**/ ,
	|/**BPar2**/'^^^^^'/**FPar**/ ,
	|CONVERT(TIME(7), GETDATE()) , 10;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~~~~~", Формат(ЭтаФорма.ТелефонВодителя, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "^^^^^", СокрЛП(ЭтаФорма.ТекстСМСДляВодителя));
	
	СтрокаПодключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "SMSGate");
	ВыполнитьЗапросНаОтправкуСМС(ТекстЗапроса, СтрокаПодключения);
	
	Возврат "Сообщение отправлено.";
	
КонецФункции

&НаКлиенте
Процедура ОтправитьСМСВодителю(Команда)

	ТекстПредупреждения = ОтправитьСМСВодителюСервер();
	
	Предупреждение(ТекстПредупреждения);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТРАНИЦЫ "Отчет по складам"

Процедура СформироватьОтчетПоСкладамСервер()
	
	ЭтаФорма.ТабДокументОтчетПоСкладам.Очистить();
	
	Если Объект.Расчетчик.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКомпоновкиДатаОстатков 			= Новый ПараметрКомпоновкиДанных("ДатаОстатков");
	ПараметрКомпоновкиСклад 				= Новый ПараметрКомпоновкиДанных("Склад");
	ПараметрКомпоновкиРасчетчик 			= Новый ПараметрКомпоновкиДанных("Расчетчик");
	ПараметрКомпоновкиСписокНоменклатуры 	= Новый ПараметрКомпоновкиДанных("СписокНоменклатуры");
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	мСхемаКомпоновкиДанных = ОбъектОбработки.ПолучитьМакет("ОтчетПоСкладам");
	
	мНастройкиОтчета = мСхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
	
	мПараметрыОтчета = мНастройкиОтчета.ПараметрыДанных;
	Для Каждого ЭлементПараметров Из мПараметрыОтчета.Элементы Цикл
		Если ЭлементПараметров.Параметр = ПараметрКомпоновкиДатаОстатков Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= ?(НЕ ЭтаФорма.ОстаткиСледДнем, ЭтаФорма.ДатаОстатков, ЭтаФорма.ДатаОстатков + 86400);
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиРасчетчик Тогда
			ЭлементПараметров.Использование = Истина;
			ЭлементПараметров.Значение 		= Объект.Расчетчик;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиСклад Тогда
			ЭлементПараметров.Использование 	= Истина;
			ЭлементПараметров.Значение 			= Объект.Расчетчик.Склад;
			ЭлементПараметров.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ИначеЕсли ЭлементПараметров.Параметр = ПараметрКомпоновкиСписокНоменклатуры Тогда
			ЭлементПараметров.Использование 	= Истина;
			ЭлементПараметров.Значение 			= ЭтаФорма.СписокНоменклатуры;
			ЭлементПараметров.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЦикла;
	
	
	// Макет компоновки
	мКомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	мМакетКомпоновки = мКомпоновщикМакета.Выполнить(мСхемаКомпоновкиДанных, мНастройкиОтчета);	
	
	// Компоновка данных
	мПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	мПроцессорКомпоновки.Инициализировать(мМакетКомпоновки);	
	
	// Вывод на форму
	мПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	мПроцессорВывода.УстановитьДокумент(ЭтаФорма.ТабДокументОтчетПоСкладам);
	мПроцессорВывода.Вывести(мПроцессорКомпоновки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоСкладам(Команда)

	СформироватьОтчетПоСкладамСервер();
	
КонецПроцедуры

//+++AK GREK 17.05.2018 ИП-00017935
&НаСервере
Функция СформироватьОтчетСравнениеАналоговНаСервере(ДанныеДляОтчета)
	ТабОтчетСравнениеАналогов = Новый ТаблицаЗначений;
	
	СтрЗапрос = "select * from Reports.dbo.reportsmarge_chast_total";
	Если ДанныеДляОтчета.Номенклатура.Количество() = ДанныеДляОтчета.Характеристика.Количество() Тогда
		КоличествоЭлементов = ДанныеДляОтчета.Номенклатура.Количество();
		Если КоличествоЭлементов > 0 Тогда
			id_tov = Формат(ДанныеДляОтчета.Номенклатура[0].id_tov,"ЧГ=0");
			id_kontr = Формат(ДанныеДляОтчета.Характеристика[0].id_kontr,"ЧГ=0");
			СтрокаОтбора = Символы.ПС + " WHERE (id_tov = " + id_tov + " AND id_kontr = " + id_kontr + ")";
			Сч = 1;
			Пока Сч < КоличествоЭлементов Цикл
				id_tov = Формат(ДанныеДляОтчета.Номенклатура[Сч].id_tov,"ЧГ=0");
				id_kontr = Формат(ДанныеДляОтчета.Характеристика[Сч].id_kontr,"ЧГ=0");
				Если ЗначениеЗаполнено(id_tov) И ЗначениеЗаполнено(id_kontr) Тогда
					СтрокаОтбора = СтрокаОтбора + Символы.ПС + " OR (id_tov = " + id_tov + " AND id_kontr = " + id_kontr + ")";
				КонецЕсли;
				Сч = Сч + 1;	
			КонецЦикла;
			СтрЗапрос = СтрЗапрос + СтрокаОтбора;
		КонецЕсли;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;

	Попытка
		rs.MoveFirst();
		Для каждого Стр из rs.Fields Цикл
			Если Стр.Type = 135 Тогда
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Дата"),Стр.Name);
			ИначеЕсли Стр.Type = 131 ИЛИ Стр.Type = 3 ИЛИ Стр.Type = 5 ИЛИ Стр.Type = 4 ИЛИ Стр.Type = 20 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Число"),Стр.Name);
			ИначеЕсли Стр.Type = 202 ИЛИ Стр.Type = 200 ИЛИ Стр.Type = 203 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Строка"),Стр.Name);
			Иначе
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),,Стр.Name);
			КонецЕсли;
		КонецЦикла;	
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТабОтчетСравнениеАналогов.Добавить();
			Для каждого Колонка из ТабОтчетСравнениеАналогов.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = rs.Fields(Колонка.Заголовок).Value;
			КонецЦикла;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Таб = Новый ТабличныйДокумент;
	Макет = ОбработкаОбъект.ПолучитьМакет("ОтчетСравнениеАналогов");
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьЗаголовки = Ложь;
	Таб.ОтображатьСетку = Ложь;
	
	Шапка = Макет.ПолучитьОбласть("Шапка"); 
	Таб.Вывести(Шапка);
	
	СтрокаОтчета = Макет.ПолучитьОбласть("Строка");
	Для каждого Стр из ТабОтчетСравнениеАналогов Цикл
		ЗаполнитьЗначенияСвойств(СтрокаОтчета.Параметры,Стр);
		Таб.Вывести(СтрокаОтчета);
	КонецЦикла;
	
	Возврат Таб;
КонецФункции

&НаСервере
//+++AK GREK 17.05.2018 ИП-00017935
Функция ПреобразоватьНазваниеКолонки(ИмяКолонки)
	Рез = СтрЗаменить(ИмяКолонки," ","");
	Рез = СтрЗаменить(Рез,".","");
	Рез = СтрЗаменить(Рез,")","");
	Рез = СтрЗаменить(Рез,"(","");
	Рез = СтрЗаменить(Рез,Символ(32),"");
	Рез = СтрЗаменить(Рез,Символы.НПП,"");
	Рез = СтрЗаменить(Рез,"-","");
	Рез = СтрЗаменить(Рез,"%","Процент");
	Возврат Рез;
КонецФункции

//+++AK GREK 17.05.2018 ИП-00017935
&НаКлиенте
Процедура СформироватьОтчетСравнениеАналогов(Команда)
	ДанныеДляОтчета = Новый Структура;
	ДанныеДляОтчета.Вставить("Номенклатура",Новый Массив);
	ДанныеДляОтчета.Вставить("Характеристика",Новый Массив);
	Для Каждого ТекСтрока Из Элементы.ПараметрыНоменклатурыДляЗаказа.ВыделенныеСтроки Цикл
		ТекДанные = Элементы.ПараметрыНоменклатурыДляЗаказа.ДанныеСтроки(ТекСтрока); 
		ДанныеДляОтчета.Номенклатура.Добавить(ТекДанные.Номенклатура);
		ДанныеДляОтчета.Характеристика.Добавить(ТекДанные.Характеристика);	
	КонецЦикла;
	Таб = СформироватьОтчетСравнениеАналоговНаСервере(ДанныеДляОтчета);
	//ЭтаФорма.Элементы.ПараметрыНоменклатурыДляЗаказа.ВыделенныеСтроки  ТекущиеДанные
	Таб.Показать();	
КонецПроцедуры

//+++AK GREK 17.05.2018 ИП-00017935
//+++АК MOSD 2018.12.04 ИП-00018605 переделал на вызов без контекста
&НаСервереБезКонтекста
Процедура ОбновитьОтчетСравнениеАналоговНаСервере()
	СтрЗапрос = "exec Reports.dbo.marge_chast_total";
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	rs = ADOСоединение.Execute(СтрЗапрос);
	ADOСоединение.Close();
КонецПроцедуры

//+++AK GREK 17.05.2018 ИП-00017935
&НаКлиенте
Процедура ОбновитьОтчетСравнениеАналогов(Команда)
	ОбновитьОтчетСравнениеАналоговНаСервере();
	ПерезаполнитьКолонкиОтчетаСравненияАналоговНаСервере();
КонецПроцедуры

&НаСервере
//+++AK GREK 27.06.2018 ИП-00017935.02
//Требуется обновить только колонку рекомендуемая доля
Процедура ПерезаполнитьКолонкиОтчетаСравненияАналоговНаСервере()
	ТабОтчетСравнениеАналогов = Новый ТаблицаЗначений;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//+++АК MOSD 2018.12.06 ИП-00018605
	//СтрЗапрос = "select * from Reports.dbo.reportsmarge_chast_total";
	СтрЗапрос = "select id_tov,id_kontr,[надо долю] from Reports.dbo.reportsmarge_chast_total";
	//---АК MOSD 
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;

	Попытка
		rs.MoveFirst();
		Для каждого Стр из rs.Fields Цикл
			Если Стр.Type = 135 Тогда
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Дата"),Стр.Name);
			ИначеЕсли Стр.Type = 131 ИЛИ Стр.Type = 3 ИЛИ Стр.Type = 5 ИЛИ Стр.Type = 4 ИЛИ Стр.Type = 20 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Число"),Стр.Name);
			ИначеЕсли Стр.Type = 202 ИЛИ Стр.Type = 200 ИЛИ Стр.Type = 203 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Строка"),Стр.Name);
			Иначе
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),,Стр.Name);
			КонецЕсли;
		КонецЦикла;	
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТабОтчетСравнениеАналогов.Добавить();
			Для каждого Колонка из ТабОтчетСравнениеАналогов.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = rs.Fields(Колонка.Заголовок).Value;
			КонецЦикла;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_Отчет.id_tov,
	               |	ТЗ_Отчет.id_kontr,
	               |	ТЗ_Отчет.надодолю
	               |ПОМЕСТИТЬ ВТ_Отчет
	               |ИЗ
	               |	&ТЗ_Отчет КАК ТЗ_Отчет
				   //+++АК MOSD 2018.12.03 ИП-00018605
				   |ИНДЕКСИРОВАТЬ ПО
				   |	id_tov,
				   |	id_kontr
				   //---АК MOSD 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_ПараметрыНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ТЗ_ПараметрыНоменклатуры.ЭтоАналог КАК ЭтоАналог,
	               |	ТЗ_ПараметрыНоменклатуры.Характеристика КАК Характеристика,
	               |	ТЗ_ПараметрыНоменклатуры.КоэффициентЗаказа,
	               |	ТЗ_ПараметрыНоменклатуры.ПлановыйОстатокУРЗ,
	               |	ТЗ_ПараметрыНоменклатуры.Складируемая,
	               |	ТЗ_ПараметрыНоменклатуры.ПроцентРаспределенияМеждуПоставщиками,
	               |	ТЗ_ПараметрыНоменклатуры.МинимальноеКоличествоЗаказа,
	               |	ТЗ_ПараметрыНоменклатуры.МаксимальноеКоличествоЗаказа,
	               |	ТЗ_ПараметрыНоменклатуры.ТекПроцентРМП КАК ТекПроцентРМП,
	               |	ТЗ_ПараметрыНоменклатуры.КоэффициентПлановогоРасчетногоОстатка,
	               |	ТЗ_ПараметрыНоменклатуры.ЧислоДнейЗапаса,
	               |	ТЗ_ПараметрыНоменклатуры.РекомендуемаяДоля КАК РекомендуемаяДоля
	               |ПОМЕСТИТЬ ВТ_ПараметрыНоменклатуры
	               |ИЗ
	               |	&ТЗ_ПараметрыНоменклатуры КАК ТЗ_ПараметрыНоменклатуры
				   //+++АК MOSD 2018.12.03 ИП-00018605
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ТЗ_ПараметрыНоменклатуры.Номенклатура,
				   |	ТЗ_ПараметрыНоменклатуры.Характеристика
				   //---АК MOSD 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПараметрыНоменклатуры.Номенклатура,
	               |	ВТ_ПараметрыНоменклатуры.ЭтоАналог,
	               |	ВТ_ПараметрыНоменклатуры.Характеристика,
	               |	ВТ_ПараметрыНоменклатуры.КоэффициентЗаказа,
	               |	ВТ_ПараметрыНоменклатуры.ПлановыйОстатокУРЗ,
	               |	ВТ_ПараметрыНоменклатуры.Складируемая,
	               |	ВТ_ПараметрыНоменклатуры.ПроцентРаспределенияМеждуПоставщиками,
	               |	ВТ_ПараметрыНоменклатуры.МинимальноеКоличествоЗаказа,
	               |	ВТ_ПараметрыНоменклатуры.МаксимальноеКоличествоЗаказа,
	               |	ВТ_ПараметрыНоменклатуры.ТекПроцентРМП,
	               |	ВТ_ПараметрыНоменклатуры.КоэффициентПлановогоРасчетногоОстатка,
	               |	ВТ_ПараметрыНоменклатуры.ЧислоДнейЗапаса,
	               |	ВТ_ПараметрыНоменклатуры.РекомендуемаяДоля,
	               |	НоменклатураСправ.id_tov,
	               |	ХарактеристикиНоменклатурыСправ.id_kontr
	               |ПОМЕСТИТЬ ВТ_Параметры
	               |ИЗ
	               |	ВТ_ПараметрыНоменклатуры КАК ВТ_ПараметрыНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправ
	               |		ПО ВТ_ПараметрыНоменклатуры.Номенклатура = НоменклатураСправ.Ссылка
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |			И НЕ НоменклатураСправ.Выведена
				   //---АК MOSD 
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыСправ
	               |		ПО ВТ_ПараметрыНоменклатуры.Характеристика = ХарактеристикиНоменклатурыСправ.Ссылка
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |			И ХарактеристикиНоменклатурыСправ.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
				   |			И ХарактеристикиНоменклатурыСправ.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	НоменклатураСправ.id_tov,
				   |	ХарактеристикиНоменклатурыСправ.id_kontr
				   //---АК MOSD 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Отчет.надодолю КАК РекомендуемаяДоля,
	               |	ВТ_Параметры.Номенклатура,
	               |	ВТ_Параметры.ЭтоАналог,
	               |	ВТ_Параметры.Характеристика,
	               |	ВТ_Параметры.КоэффициентЗаказа,
	               |	ВТ_Параметры.ПлановыйОстатокУРЗ,
	               |	ВТ_Параметры.Складируемая,
	               |	ВТ_Параметры.ПроцентРаспределенияМеждуПоставщиками,
	               |	ВТ_Параметры.МинимальноеКоличествоЗаказа,
	               |	ВТ_Параметры.МаксимальноеКоличествоЗаказа,
	               |	ВТ_Параметры.ТекПроцентРМП,
	               |	ВТ_Параметры.КоэффициентПлановогоРасчетногоОстатка,
	               |	ВТ_Параметры.ЧислоДнейЗапаса
	               |ИЗ
	               |	ВТ_Параметры КАК ВТ_Параметры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отчет КАК ВТ_Отчет
	               |		ПО ВТ_Параметры.id_tov = ВТ_Отчет.id_tov
	               |			И ВТ_Параметры.id_kontr = ВТ_Отчет.id_kontr
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Отчет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Параметры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПараметрыНоменклатуры";
	Запрос.УстановитьПараметр("ТЗ_Отчет"				, ТабОтчетСравнениеАналогов);
	Запрос.УстановитьПараметр("ТЗ_ПараметрыНоменклатуры", ПараметрыНоменклатурыДляЗаказаТЗ.Выгрузить());
	ТЗ_Обновленная = Запрос.Выполнить().Выгрузить();
	ПараметрыНоменклатурыДляЗаказаТЗ.Загрузить(ТЗ_Обновленная);
КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервере
Процедура ЗаполнитьПараметрыНоменклатурыЗаказа()

	// Получение данных SQL
	ТабОтчетСравнениеАналогов = Новый ТаблицаЗначений;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//+++АК MOSD 2018.12.06 ИП-00018605
	//СтрЗапрос = "select * from Reports.dbo.reportsmarge_chast_total";
	СтрЗапрос = "select id_tov,id_kontr,[надо долю] from Reports.dbo.reportsmarge_chast_total";
	//---АК MOSD 
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Пока НЕ rs = Неопределено Цикл
		Если rs.Fields.Count > 0 Тогда
			Прервать;
		КонецЕсли;
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		Для каждого Стр из rs.Fields Цикл
			Если Стр.Type = 135 Тогда
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Дата"),Стр.Name);
			ИначеЕсли Стр.Type = 131 ИЛИ Стр.Type = 3 ИЛИ Стр.Type = 5 ИЛИ Стр.Type = 4 ИЛИ Стр.Type = 20 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Число"),Стр.Name);
			ИначеЕсли Стр.Type = 202 ИЛИ Стр.Type = 200 ИЛИ Стр.Type = 203 Тогда 
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),Новый ОписаниеТипов("Строка"),Стр.Name);
			Иначе
				ТабОтчетСравнениеАналогов.Колонки.Добавить(ПреобразоватьНазваниеКолонки(Стр.Name),,Стр.Name);
			КонецЕсли;
		КонецЦикла;
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ТабОтчетСравнениеАналогов.Добавить();
			Для каждого Колонка из ТабОтчетСравнениеАналогов.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = rs.Fields(Колонка.Заголовок).Value;
			КонецЦикла;
			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ADOСоединение.Close();
	
	// Получение данных 1С
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ_Отчет.id_tov КАК id_tov,
		|	ТЗ_Отчет.id_kontr КАК id_kontr,
		|	ТЗ_Отчет.НадоДолю
		|ПОМЕСТИТЬ ВТ_Отчет
		|ИЗ
		|	&ТЗ_Отчет КАК ТЗ_Отчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	id_tov,
		|	id_kontr
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		//+++АК MOSD 2018.12.04 ИП-00018605
		|	И НЕ Номенклатура.Выведена
		//---АК MOSD 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втАналогиНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивПолныхАналогов)
		//+++АК MOSD 2018.12.04 ИП-00018605
		|	И НЕ Номенклатура.Выведена
		//---АК MOSD 		
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТорговыеТочки
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&МассивТТ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
		|	СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
		|ПОМЕСТИТЬ втПланыПоТТ
		|ИЗ
		|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТорговыеТочки КАК втТорговыеТочки
		|		ПО ПланыПродажПоДнямНедели.ТорговаяТочка = втТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО ПланыПродажПоДнямНедели.Номенклатура = втНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втАналогиНоменклатуры КАК втАналогиНоменклатуры
		|		ПО ПланыПродажПоДнямНедели.Номенклатура = втАналогиНоменклатуры.Ссылка
		|ГДЕ
		|	ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
		|	И втАналогиНоменклатуры.Ссылка ЕСТЬ NULL
		|	И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланыПродажПоДнямНедели.ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыПоТТ.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварныйАссортимент.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
		|	СУММА(ПланыПоТТ.Количество) КАК Количество
		|ПОМЕСТИТЬ втПланыПоХарактеристикамНоменклатуры
		|ИЗ
		|	втПланыПоТТ КАК ПланыПоТТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(, 
		//+++АК MOSD 2018.12.04 ИП-00018605
		|				(НЕ Номенклатура.Выведена)
		//---АК MOSD 
		|) КАК ТоварныйАссортимент
		|		ПО ПланыПоТТ.ТорговаяТочка = ТоварныйАссортимент.ТорговаяТочка
		|			И ПланыПоТТ.Номенклатура = ТоварныйАссортимент.Номенклатура
		|			И (НЕ ТоварныйАссортимент.Выведена)
		//+++АК MOSD 2018.12.04 ИП-00018605
		|			И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
		|			И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		//---АК MOSD 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланыПоТТ.Номенклатура,
		|	ЕСТЬNULL(ТоварныйАссортимент.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПланыПоХарактеристикамНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(втПланыПоХарактеристикамНоменклатуры.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТПланыПоНоменклатуре
		|ИЗ
		|	втПланыПоХарактеристикамНоменклатуры КАК втПланыПоХарактеристикамНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	втПланыПоХарактеристикамНоменклатуры.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
		|	ТЧТовары.Ссылка КАК Аналог,
		|	СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
		|ПОМЕСТИТЬ втПланыПоТТАналогов
		|ИЗ
		|	РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТорговыеТочки КАК втТорговыеТочки
		|		ПО ПланыПродажПоДнямНедели.ТорговаяТочка = втТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналогиНоменклатуры КАК втАналогиНоменклатуры
		|		ПО ПланыПродажПоДнямНедели.Номенклатура = втАналогиНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК ТЧТовары
		|		ПО ПланыПродажПоДнямНедели.Номенклатура = ТЧТовары.Номенклатура
		|ГДЕ
		|	ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
		|	И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланыПродажПоДнямНедели.ТорговаяТочка,
		|	ПланыПродажПоДнямНедели.Номенклатура,
		|	ТЧТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПланыПоТТАналогов.Аналог КАК Аналог,
		|	втПланыПоТТАналогов.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварныйАссортимент.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
		|	СУММА(втПланыПоТТАналогов.Количество) КАК Количество
		|ПОМЕСТИТЬ втПланыПоХарактеристикамАналогов
		|ИЗ
		|	втПланыПоТТАналогов КАК втПланыПоТТАналогов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(, 
		//+++АК MOSD 2018.12.04 ИП-00018605
		|				(НЕ Номенклатура.Выведена)
		//---АК MOSD 
		|) КАК ТоварныйАссортимент
		|		ПО втПланыПоТТАналогов.ТорговаяТочка = ТоварныйАссортимент.ТорговаяТочка
		|			И втПланыПоТТАналогов.Номенклатура = ТоварныйАссортимент.Номенклатура
		|			И (НЕ ТоварныйАссортимент.Выведена)
		//+++АК MOSD 2018.12.04 ИП-00018605
		|			И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
		|			И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
		//---АК MOSD 
		|
		|СГРУППИРОВАТЬ ПО
		|	втПланыПоТТАналогов.Аналог,
		|	втПланыПоТТАналогов.Номенклатура,
		|	ЕСТЬNULL(ТоварныйАссортимент.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Аналог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПланыПоХарактеристикамАналогов.Аналог КАК Аналог,
		|	СУММА(втПланыПоХарактеристикамАналогов.Количество) КАК Количество
		|ПОМЕСТИТЬ втПланыПоАналогам
		|ИЗ
		|	втПланыПоХарактеристикамАналогов КАК втПланыПоХарактеристикамАналогов
		|
		|СГРУППИРОВАТЬ ПО
		|	втПланыПоХарактеристикамАналогов.Аналог
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Аналог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПланыПоХарактеристикамНоменклатуры.Номенклатура КАК Номенклатура,
		|	втПланыПоХарактеристикамНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВТПланыПоНоменклатуре.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ втПланыПоХарактеристикамНоменклатуры.Количество * 100 / ВТПланыПоНоменклатуре.Количество
		|	КОНЕЦ КАК ТекПроцентРМП
		|ПОМЕСТИТЬ втПланыОбщие
		|ИЗ
		|	втПланыПоХарактеристикамНоменклатуры КАК втПланыПоХарактеристикамНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПланыПоНоменклатуре КАК ВТПланыПоНоменклатуре
		|		ПО втПланыПоХарактеристикамНоменклатуры.Номенклатура = ВТПланыПоНоменклатуре.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втПланыПоХарактеристикамАналогов.Номенклатура,
		|	втПланыПоХарактеристикамАналогов.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА втПланыПоАналогам.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ втПланыПоХарактеристикамАналогов.Количество * 100 / втПланыПоАналогам.Количество
		|	КОНЕЦ
		|ИЗ
		|	втПланыПоХарактеристикамАналогов КАК втПланыПоХарактеристикамАналогов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПланыПоАналогам КАК втПланыПоАналогам
		|		ПО (втПланыПоАналогам.Аналог = втПланыПоХарактеристикамАналогов.Аналог)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПланыОбщие.Номенклатура КАК Номенклатура,
		|	втПланыОбщие.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МАКСИМУМ(втПланыОбщие.ТекПроцентРМП) КАК ТекПроцентРМП
		|ПОМЕСТИТЬ втПланыИтог
		|ИЗ
		|	втПланыОбщие КАК втПланыОбщие
		|
		|СГРУППИРОВАТЬ ПО
		|	втПланыОбщие.Номенклатура,
		|	втПланыОбщие.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыНоменклатурыДляЗаказа.Склад,
		|	ПараметрыНоменклатурыДляЗаказа.Номенклатура КАК Номенклатура,
		|	НЕ втАналогиНоменклатуры.Ссылка ЕСТЬ NULL КАК ЭтоАналог,
		|	ПараметрыНоменклатурыДляЗаказа.Характеристика КАК Характеристика,
		|	ПараметрыНоменклатурыДляЗаказа.КоэффициентЗаказа,
		|	ПараметрыНоменклатурыДляЗаказа.ПлановыйОстатокУРЗ,
		|	ПараметрыНоменклатурыДляЗаказа.Складируемая,
		|	ПараметрыНоменклатурыДляЗаказа.ПроцентРаспределенияМеждуПоставщиками,
		|	ПараметрыНоменклатурыДляЗаказа.МинимальноеКоличествоЗаказа,
		|	ПараметрыНоменклатурыДляЗаказа.МаксимальноеКоличествоЗаказа,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(втПланыИтог.ТекПроцентРМП, 0) КАК ЧИСЛО(6, 0)) КАК ТекПроцентРМП,
		|	ПараметрыНоменклатурыДляЗаказа.КоэффициентПлановогоРасчетногоОстатка,
		|	ПараметрыНоменклатурыДляЗаказа.ЧислоДнейЗапаса,
		|	ВТ_Отчет.НадоДолю КАК РекомендуемаяДоля
		|ИЗ
		|	РегистрСведений.ПараметрыНоменклатурыДляЗаказа КАК ПараметрыНоменклатурыДляЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО ПараметрыНоменклатурыДляЗаказа.Номенклатура = втНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втАналогиНоменклатуры КАК втАналогиНоменклатуры
		|		ПО ПараметрыНоменклатурыДляЗаказа.Номенклатура = втАналогиНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПланыИтог КАК втПланыИтог
		|		ПО ПараметрыНоменклатурыДляЗаказа.Номенклатура = втПланыИтог.Номенклатура
		|			И ПараметрыНоменклатурыДляЗаказа.Характеристика = втПланыИтог.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отчет КАК ВТ_Отчет
		|		ПО ПараметрыНоменклатурыДляЗаказа.Номенклатура.id_tov = ВТ_Отчет.id_tov
		|			И ПараметрыНоменклатурыДляЗаказа.Характеристика.id_kontr = ВТ_Отчет.id_kontr
		|ГДЕ
		|	ПараметрыНоменклатурыДляЗаказа.Склад = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Склад",					ПолучитьСкладРасчетчикаСервер(Объект.Расчетчик));
	Запрос.УстановитьПараметр("МассивНоменклатуры",		СписокНоменклатуры.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("МассивТТ",				СписокТорговыхТочек.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("МассивПолныхАналогов",	СписокПолныхАналоговТоваров.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ДатаНачалаПлан",			Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончанияПлан",		Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("Расчетчик",				Объект.Расчетчик);
	Запрос.УстановитьПараметр("ТЗ_Отчет",				ТабОтчетСравнениеАналогов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Результат.Выгрузить();
	ПараметрыНоменклатурыДляЗаказаТЗ.Загрузить(ТЗ);

КонецПроцедуры

//+++ AK suvv 20.06.2018 ИП-00018351
&НаСервере
Процедура ОпределитьПризнакЗаказДляТилси(мМассивПоставщиков)
	
	ОрганизацияТилси = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734410589");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, ЭтаФорма.ДатаЗаказов);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ЭтаФорма.ДатаЗаказов));
	Запрос.УстановитьПараметр("МассивПоставщиков"	, мМассивПоставщиков);
	Запрос.УстановитьПараметр("СписокРасчетчиков"	, СписокРасчетчиковДляЗаказа.ВыгрузитьЗначения());	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ГруппаНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Расчетчики.ГруппыНоменклатуры КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&СписокРасчетчиков)
	|	И НЕ Товары.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧТовары.Ссылка.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТЧТовары.Ссылка.Организация, """") = """"
	|				ИЛИ ТЧТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ОрганизацииПоставщиков.Организация, ТЧТовары.ТорговаяТочка.Организация)
	|		ИНАЧЕ ТЧТовары.Ссылка.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель
	|ПОМЕСТИТЬ ВТ_ПоставщикОрганизации
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиОрганизаций.СрезПоследних(&ДатаНачала, Производитель В (&МассивПоставщиков)) КАК ОрганизацииПоставщиков
	|		ПО (ОрганизацииПоставщиков.Производитель = ТЧТовары.Ссылка.Поставщик)
	|ГДЕ
	|	ТЧТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТЧТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура)
	|	И ТЧТовары.Ссылка.Поставщик В(&МассивПоставщиков)
	|	И ТЧТовары.Ссылка.Подготовлен
	|	И НЕ ТЧТовары.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоставщикОрганизации.Поставщик,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ПоставщикОрганизации.ОрганизацияПолучатель.Код = ""000000009""
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ОрганизацияНеТилси
	|ИЗ
	|	ВТ_ПоставщикОрганизации КАК ВТ_ПоставщикОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоставщикОрганизации.Поставщик";

	ЗаказДляТилси = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Если не Выборка.ОрганизацияНеТилси Тогда 
			ЗаказДляТилси = Истина;
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры //--- AK suvv

//+++AK GREK 19.06.2018 ИП-00017935.01   
&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПлановыйОстатокУРЗПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

//+++AK GREK 19.06.2018 ИП-00017935.01   
&НаКлиенте
Процедура ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа()
	ДанныеСтроки = Элементы.ПараметрыНоменклатурыДляЗаказа.ТекущиеДанные;
	ПараметрыДляЗаписи = Новый Структура;
	ПараметрыДляЗаписи.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыДляЗаписи.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	ПараметрыДляЗаписи.Вставить("ПлановыйОстатокУРЗ", ДанныеСтроки.ПлановыйОстатокУРЗ);
	ПараметрыДляЗаписи.Вставить("КоэффициентЗаказа", ДанныеСтроки.КоэффициентЗаказа);
	ПараметрыДляЗаписи.Вставить("Складируемая", ДанныеСтроки.Складируемая);
	ПараметрыДляЗаписи.Вставить("ПроцентРаспределенияМеждуПоставщиками", ДанныеСтроки.ПроцентРаспределенияМеждуПоставщиками);
	ПараметрыДляЗаписи.Вставить("МинимальноеКоличествоЗаказа", ДанныеСтроки.МинимальноеКоличествоЗаказа);
	ПараметрыДляЗаписи.Вставить("МаксимальноеКоличествоЗаказа", ДанныеСтроки.МаксимальноеКоличествоЗаказа);
	ПараметрыДляЗаписи.Вставить("ЧислоДнейЗапаса", ДанныеСтроки.ЧислоДнейЗапаса);
	ПараметрыДляЗаписи.Вставить("КоэффициентПлановогоРасчетногоОстатка", ?(ДанныеСтроки.КоэффициентПлановогоРасчетногоОстатка > 0, ДанныеСтроки.КоэффициентПлановогоРасчетногоОстатка, 0.5)); //+++АК LAGP 2018.09.26 ИП-00012852.09 Добавлено проставление коэффициента 0.5 по умолчанию (для создаваемых)
	//+++АК MOSD 2018.12.04 ИП-00018605
	ПараметрыДляЗаписи.Вставить("Расчетчик", Объект.Расчетчик);
	//---АК MOSD 
	ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказаНаСервере(ПараметрыДляЗаписи)
КонецПроцедуры

//+++AK GREK 19.06.2018 ИП-00017935.01   
//+++АК MOSD 2018.12.04 ИП-00018605 сделал вызов без контекста 
&НаСервереБезКонтекста
Процедура ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказаНаСервере(ПараметрыДляЗаписи)
	МенеджерЗаписи = РегистрыСведений.ПараметрыНоменклатурыДляЗаказа.СоздатьМенеджерЗаписи();
	//+++АК MOSD 2018.12.04 ИП-00018605
	//МенеджерЗаписи.Склад = Объект.Расчетчик.Склад;
	МенеджерЗаписи.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДляЗаписи.Расчетчик,"Склад");
	//---АК MOSD 
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыДляЗаписи);
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ОбновитьСтрокиНоменклатурыДляЗаказа();
	ТабОтчетСравнениеАналогов = ПараметрыНоменклатурыДляЗаказаТЗ.Выгрузить(,"Номенклатура,Характеристика,РекомендуемаяДоля");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_Данные.Номенклатура,
	               |	ТЗ_Данные.Характеристика,
	               |	ТЗ_Данные.РекомендуемаяДоля
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&ТЗ_Данные КАК ТЗ_Данные
   				   //+++АК MOSD 2018.12.03 ИП-00018605
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ТЗ_Данные.Номенклатура,
				   |	ТЗ_Данные.Характеристика
				   //---АК MOSD 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.РекомендуемаяДоля КАК надодолю,
	               |	НоменклатураСпр.id_tov КАК id_tov,
	               |	ХарактеристикиНоменклатурыСпр.id_kontr КАК id_kontr
	               |ПОМЕСТИТЬ ВТ_Отчет
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	               |		ПО ВТ_Данные.Номенклатура = НоменклатураСпр.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыСпр
	               |		ПО ВТ_Данные.Характеристика = ХарактеристикиНоменклатурыСпр.Ссылка
   				   //+++АК MOSD 2018.12.03 ИП-00018605
				   |ИНДЕКСИРОВАТЬ ПО
				   |	НоменклатураСпр.id_tov,
				   |	ХарактеристикиНоменклатурыСпр.id_kontr
				   //---АК MOSD 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПараметрыНоменклатурыДляЗаказа.Склад,
	               |	ПараметрыНоменклатурыДляЗаказа.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ПараметрыНоменклатурыДляЗаказа.Номенклатура В (&МассивПолныхАналогов)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоАналог,
	               |	ПараметрыНоменклатурыДляЗаказа.Характеристика КАК Характеристика,
	               |	ПараметрыНоменклатурыДляЗаказа.КоэффициентЗаказа,
	               |	ПараметрыНоменклатурыДляЗаказа.ПлановыйОстатокУРЗ,
	               |	ПараметрыНоменклатурыДляЗаказа.Складируемая,
	               |	ПараметрыНоменклатурыДляЗаказа.ПроцентРаспределенияМеждуПоставщиками,
	               |	ПараметрыНоменклатурыДляЗаказа.МинимальноеКоличествоЗаказа,
	               |	ПараметрыНоменклатурыДляЗаказа.МаксимальноеКоличествоЗаказа,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ВТПланы.ТекПроцентРМП, 0) КАК ЧИСЛО(6, 0)) КАК ТекПроцентРМП,
	               |	ПараметрыНоменклатурыДляЗаказа.КоэффициентПлановогоРасчетногоОстатка,
	               |	ПараметрыНоменклатурыДляЗаказа.ЧислоДнейЗапаса,
	               |	ВТ_Отчет.надодолю КАК РекомендуемаяДоля
	               |ИЗ
	               |	РегистрСведений.ПараметрыНоменклатурыДляЗаказа КАК ПараметрыНоменклатурыДляЗаказа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВЗ_Полный.Номенклатура КАК Номенклатура,
	               |			ВЗ_Полный.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |			МАКСИМУМ(ВЗ_Полный.ТекПроцентРМП) КАК ТекПроцентРМП
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВТПланы.Номенклатура КАК Номенклатура,
	               |				ЕСТЬNULL(ПланыПоХарактеристикам.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	               |				ВЫБОР
	               |					КОГДА НЕ ЕСТЬNULL(ВТПланы.Количество, 0) = 0
	               |						ТОГДА ЕСТЬNULL(ПланыПоХарактеристикам.Количество, 0) * 100 / ЕСТЬNULL(ВТПланы.Количество, 1)
	               |					ИНАЧЕ 0
	               |				КОНЕЦ КАК ТекПроцентРМП
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	               |					СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
	               |				ИЗ
	               |					РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |				ГДЕ
	               |					ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
	               |					И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТТ)
	               |					И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	               |					И НЕ ПланыПродажПоДнямНедели.Номенклатура В (&МассивПолныхАналогов)
	               |					И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ПланыПродажПоДнямНедели.Номенклатура) КАК ВТПланы
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						ПланыПоТТ.Номенклатура КАК Номенклатура,
	               |						ТоварныйАссортимент.Характеристика КАК ХарактеристикаНоменклатуры,
	               |						СУММА(ЕСТЬNULL(ПланыПоТТ.Количество, 0)) КАК Количество
	               |					ИЗ
	               |						(ВЫБРАТЬ
	               |							ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	               |							ПланыПродажПоДнямНедели.ТорговаяТочка КАК ТорговаяТочка,
	               |							СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
	               |						ИЗ
	               |							РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |						ГДЕ
	               |							ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
	               |							И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТТ)
	               |							И ПланыПродажПоДнямНедели.Номенклатура В(&МассивНоменклатуры)
	               |							И НЕ ПланыПродажПоДнямНедели.Номенклатура В (&МассивПолныхАналогов)
	               |							И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	               |						
	               |						СГРУППИРОВАТЬ ПО
	               |							ПланыПродажПоДнямНедели.Номенклатура,
	               |							ПланыПродажПоДнямНедели.ТорговаяТочка) КАК ПланыПоТТ
	               |							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |									,
	               |									ТорговаяТочка В (&МассивТТ)
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |									И (НЕ Номенклатура.Выведена)
				   //---АК MOSD 
	               |										И Номенклатура В (&МассивНоменклатуры)
	               |										И НЕ Номенклатура В (&МассивПолныхАналогов)) КАК ТоварныйАссортимент
	               |							ПО (ТоварныйАссортимент.ТорговаяТочка = ПланыПоТТ.ТорговаяТочка)
	               |								И (ТоварныйАссортимент.Номенклатура = ПланыПоТТ.Номенклатура)
	               |								И (НЕ ТоварныйАссортимент.Выведена)
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |								И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
				   |								И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
				   //---АК MOSD 
	               |					
	               |					СГРУППИРОВАТЬ ПО
	               |						ПланыПоТТ.Номенклатура,
	               |						ТоварныйАссортимент.Характеристика) КАК ПланыПоХарактеристикам
	               |					ПО (ПланыПоХарактеристикам.Номенклатура = ВТПланы.Номенклатура)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				ВТПланы.Номенклатура,
	               |				ВТПланы.ХарактеристикаНоменклатуры,
	               |				ВЫБОР
	               |					КОГДА НЕ ЕСТЬNULL(ВТПланыОбщие.Количество, 0) = 0
	               |						ТОГДА ЕСТЬNULL(ВТПланы.Количество, 0) * 100 / ЕСТЬNULL(ВТПланыОбщие.Количество, 1)
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ТЧТовары.Ссылка КАК Аналог,
	               |					ПланыПродажПоДнямНедели.Номенклатура КАК Номенклатура,
	               |					ЕСТЬNULL(ТоварныйАссортимент.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	               |					СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
	               |				ИЗ
	               |					РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК ТЧТовары
	               |						ПО (ТЧТовары.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	               |								,
	               |								ТорговаяТочка В (&МассивТТ)
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |								И (НЕ Номенклатура.Выведена)
				   //---АК MOSD 
	               |									И Номенклатура В (&МассивПолныхАналогов)) КАК ТоварныйАссортимент
	               |						ПО (ТоварныйАссортимент.ТорговаяТочка = ПланыПродажПоДнямНедели.ТорговаяТочка)
	               |							И (ТоварныйАссортимент.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	               |							И (НЕ ТоварныйАссортимент.Выведена)
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |							И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
				   |							И ТоварныйАссортимент.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
				   //---АК MOSD 
	               |				ГДЕ
	               |					ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
	               |					И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТТ)
	               |					И ПланыПродажПоДнямНедели.Номенклатура В(&МассивПолныхАналогов)
	               |					И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ТЧТовары.Ссылка,
	               |					ПланыПродажПоДнямНедели.Номенклатура,
	               |					ТоварныйАссортимент.Характеристика) КАК ВТПланы
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						ТЧТовары.Ссылка КАК Аналог,
	               |						СУММА(ПланыПродажПоДнямНедели.Количество) КАК Количество
	               |					ИЗ
	               |						РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНоменклатуры.Товары КАК ТЧТовары
	               |							ПО (ТЧТовары.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура)
	               |					ГДЕ
	               |						ПланыПродажПоДнямНедели.Дата МЕЖДУ &ДатаНачалаПлан И &ДатаОкончанияПлан
	               |						И ПланыПродажПоДнямНедели.ТорговаяТочка В(&МассивТТ)
	               |						И ПланыПродажПоДнямНедели.Номенклатура В(&МассивПолныхАналогов)
	               |						И ПланыПродажПоДнямНедели.Расчетчик = &Расчетчик
	               |					
	               |					СГРУППИРОВАТЬ ПО
	               |						ТЧТовары.Ссылка) КАК ВТПланыОбщие
	               |					ПО (ВТПланыОбщие.Аналог = ВТПланы.Аналог)) КАК ВЗ_Полный
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВЗ_Полный.Номенклатура,
	               |			ВЗ_Полный.ХарактеристикаНоменклатуры) КАК ВТПланы
	               |		ПО (ВТПланы.Номенклатура = ПараметрыНоменклатурыДляЗаказа.Номенклатура)
	               |			И (ВТПланы.ХарактеристикаНоменклатуры = ПараметрыНоменклатурыДляЗаказа.Характеристика)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отчет КАК ВТ_Отчет
	               |		ПО ПараметрыНоменклатурыДляЗаказа.Номенклатура.id_tov = ВТ_Отчет.id_tov
	               |			И ПараметрыНоменклатурыДляЗаказа.Характеристика.id_kontr = ВТ_Отчет.id_kontr
	               |ГДЕ
	               |	ПараметрыНоменклатурыДляЗаказа.Склад = &Склад
	               |	И ПараметрыНоменклатурыДляЗаказа.Номенклатура В(&МассивНоменклатуры)
				   //+++АК MOSD 2018.12.04 ИП-00018605
				   |	И (НЕ ПараметрыНоменклатурыДляЗаказа.Номенклатура.Выведена)
				   |	И ПараметрыНоменклатурыДляЗаказа.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
				   |	И ПараметрыНоменклатурыДляЗаказа.Характеристика.СтатусАктивностиХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
				   //---АК MOSD 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Отчет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Данные";
	Запрос.УстановитьПараметр("Склад"					, Объект.Расчетчик.Склад);
	Запрос.УстановитьПараметр("МассивНоменклатуры"		, ЭтаФорма.СписокНоменклатуры.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("МассивТТ"				, ЭтаФорма.СписокТорговыхТочек.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("МассивПолныхАналогов"	, ЭтаФорма.СписокПолныхАналоговТоваров.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ДатаНачалаПлан"			, Объект.ДатаНачалаПлан);
	Запрос.УстановитьПараметр("ДатаОкончанияПлан"		, Объект.ДатаОкончанияПлан);
	Запрос.УстановитьПараметр("Расчетчик"				, Объект.Расчетчик);
	Запрос.УстановитьПараметр("ТЗ_Данные"				, ТабОтчетСравнениеАналогов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Результат.Выгрузить();
	ПараметрыНоменклатурыДляЗаказаТЗ.Загрузить(ТЗ);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаКоэффициентПлановогоРасчетногоОстаткаПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаСкладируемаяПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

//+++АК MOSD 2018.12.04 ИП-00018605 
&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры
//---АК MOSD 

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаПроцентРаспределенияМеждуПоставщикамиПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаМинимальноеКоличествоЗаказаПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаМаксимальноеКоличествоЗаказаПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаЧислоДнейЗапасаПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляЗаказаКоэффициентЗаказаПриИзменении(Элемент)
	//+++АК MOSD 2018.12.04 ИП-00018605 
	//ОбновитьЗаписьРСПараметрыНоменклатурыДляЗаказа();
КонецПроцедуры

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервереБезКонтекста
Функция ДанныеДоступныхТорговыхТочек(Знач ТорговыеТочки = Неопределено, СпособОпределенияДоступности = "", Расчетчик = Неопределено, ПараметрОпределения = Неопределено)

	ДанныеТорговыхТочек = Новый Массив;
	
	Если ТорговыеТочки = Неопределено Тогда
		ТорговыеТочки = ДоступныеТорговыеТочки(СпособОпределенияДоступности, Расчетчик, ПараметрОпределения);
	КонецЕсли;
	
	Если ТорговыеТочки.Количество() = 0 Тогда
		Возврат ДанныеТорговыхТочек;
	КонецЕсли;
	
	ЗначенияРеквизитовТорговыхТочек = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТорговыеТочки, "НеУчаствуетВРаспределении, ОсновнойСклад");
	
	Для Каждого ТекТорговаяТочка Из ТорговыеТочки Цикл
		ЗначенияРеквизитов = ЗначенияРеквизитовТорговыхТочек.Получить(ТекТорговаяТочка);
		
		ДанныеТорговойТочки = Новый Структура;
		ДанныеТорговойТочки.Вставить("ТорговаяТочка",				ТекТорговаяТочка);
		ДанныеТорговойТочки.Вставить("НеУчаствуетВРаспределении",	ЗначенияРеквизитов.НеУчаствуетВРаспределении);
		ДанныеТорговойТочки.Вставить("ОсновнойСклад",				ЗначенияРеквизитов.ОсновнойСклад);
		
		ДанныеТорговыхТочек.Добавить(ДанныеТорговойТочки);
	КонецЦикла;
	
	Возврат ДанныеТорговыхТочек;

КонецФункции

//+++АК LATV 2018.10.11 ИП-00020042
&НаСервереБезКонтекста
Функция ДоступныеТорговыеТочки(СпособОпределенияДоступности, Расчетчик, ПараметрОпределения)

	ТорговыеТочки = Новый Массив;
	
	Склад = ПолучитьСкладРасчетчикаСервер(Расчетчик);
	
	Если СпособОпределенияДоступности = "ПоНоменклатуре" Тогда
		ТорговыеТочки = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Склад, ПараметрОпределения);
		
	ИначеЕсли СпособОпределенияДоступности = "ПоГруппеНоменклатурыУРЗ" Тогда
		ТорговыеТочки = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочекПоГруппеУРЗ(Склад, ПараметрОпределения);
		
	ИначеЕсли СпособОпределенияДоступности = "ПлюсНеучаствующие" Тогда
		//+++АК MOSD 2018.12.07 ИП-00018605 вернуть как было после тестирования
		//ТорговыеТочки = ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучаст(Склад, ПараметрОпределения);
		ТорговыеТочки = ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучаст(Склад, ПараметрОпределения);
		//---АК MOSD 
	КонецЕсли;
	
	Возврат ТорговыеТочки;

КонецФункции

//+++АК MOSD 2018.12.07 ИП-00018605 удалить после тестирования
// Функция возвращает массив доступных торговых точек расчетчика + не участвующие в распределении
//
&НаСервереБезКонтекста
Функция ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучаст(мСклад = Неопределено, мСписокНоменклатуры, мСписокМаршрутов = Неопределено) Экспорт
	
	Перем Запрос, РезультатЗапроса;
	
	ПоВсемСкладам 	= НЕ ЗначениеЗаполнено(мСклад);
	ЕстьМаршрут 	= ЗначениеЗаполнено(мСписокМаршрутов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущаяДата() + 86400));
	Если НЕ ПоВсемСкладам Тогда
		Запрос.УстановитьПараметр("Склад", мСклад);         // СправочникСсылка.СтруктурныеЕдиницы
	КонецЕсли;
	Если ЕстьМаршрут Тогда
		Запрос.УстановитьПараметр("СписокМаршрутов", мСписокМаршрутов);
	КонецЕсли;
	Если ТипЗнч(мСписокНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
		мМассивНоменклатуры = Новый Массив;
		мМассивНоменклатуры.Добавить(мСписокНоменклатуры);
		Запрос.УстановитьПараметр("СписокНоменклатуры", мМассивНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("СписокНоменклатуры", мСписокНоменклатуры);
	КонецЕсли;
	
	ТекстЗапроса ="
	//+++АК MOSD 2018.12.08 ИП-00018605 
	|ВЫБРАТЬ 
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втСписокНоменклатуры
	|ИЗ	
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//---АК MOSD 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ
	|ПОМЕСТИТЬ ВТГруппыУРЗ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ СпрНоменклатура.ПометкаУдаления
	|ИНДЕКСИРОВАТЬ ПО
	|	ГруппаУРЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ТТАссортимента
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка.Активное
	|				И ТорговаяТочка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//+++АК ILIK 2018.08.03 ИП-00019413
	//|				И НЕ ТорговаяТочка.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
	|				И НЕ ТорговаяТочка.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
	//---АК ILIK
	|				И НЕ ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И &УсловиеПоМаршруту
	//+++АК MOSD 2018.12.08 ИП-00018605 
	//|				И Номенклатура В (&СписокНоменклатуры)
	|				И Номенклатура В (ВЫБРАТЬ втСписокНоменклатуры.Ссылка ИЗ втСписокНоменклатуры)
	//---АК MOSD
	|) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В
	|					(ВЫБРАТЬ
	|						ТТАссортимента.ТорговаяТочка
	|					ИЗ
	|						ТТАссортимента)
	|				И ГруппаУРЗ В
	|					(ВЫБРАТЬ
	|						ВТГруппыУРЗ.ГруппаУРЗ
	|					ИЗ
	|						ВТГруппыУРЗ)) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
	|ГДЕ
	|	&УсловиеПоСкладу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка.id_TT";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу",
		?(НЕ ПоВсемСкладам, "ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик = &Склад", "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоМаршруту",
		?(ЕстьМаршрут, "ТорговаяТочка В (ВЫБРАТЬ ТЧТТ.СтруктурнаяЕдиница ИЗ Справочник.Маршруты.ТорговыеТочки КАК ТЧТТ ГДЕ ТЧТТ.Ссылка В(&СписокМаршрутов))", "ИСТИНА"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции
//---АК MOSD 

Процедура ПроверитьРазнуюНоменклатуруПоАналогамСервер(МассивНоменлатуры, Отказ)
	Отказ = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АналогиНоменклатурыТовары.Ссылка,
	|	СУММА(1) КАК Аналогов
	|ИЗ
	|	Справочник.АналогиНоменклатуры.Товары КАК АналогиНоменклатурыТовары
	|ГДЕ
	|	АналогиНоменклатурыТовары.Номенклатура В(&МассивНоменлатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналогиНоменклатурыТовары.Ссылка";
	
	Запрос.УстановитьПараметр("МассивНоменлатуры", МассивНоменлатуры);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.Аналогов = МассивНоменлатуры.Количество() Тогда
			Отказ = Ложь;			
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

//+++АК MOSD 2018.12.09 ИП-00018605 
//данные страниц заполняются при первом открытии страницы
//вместо "при создании на сервере"
&НаКлиенте
Процедура ГруппаПрогнозыПродажПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяСтраницы = ТекущаяСтраница.Имя;
	Если ПолучитьМассивОптимизированныхСтраниц().Найти(ИмяСтраницы) <> Неопределено
		И СписокОткрытыхСтраниц.НайтиПоЗначению(ИмяСтраницы) = Неопределено Тогда
		ПодключитьОбработчикОжидания("ГруппаПрогнозыПродажПриСменеСтраницыОбработчикОжидания",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры
//---АК MOSD 

//+++АК MOSD 2018.12.09 ИП-00018605 
&НаКлиенте
Процедура ГруппаПрогнозыПродажПриСменеСтраницыОбработчикОжидания()
	Состояние("Заполнение данных...");
	ЗаполнитьДанныеСтраницыНаСервере(Элементы.ГруппаПрогнозыПродаж.ТекущаяСтраница.Имя);
	Состояние("");
Конецпроцедуры
//---АК MOSD 

//+++АК MOSD 2018.12.09 ИП-00018605 
&НаКлиенте
Функция ПолучитьМассивОптимизированныхСтраниц()
	Рез = Новый Массив;
	Рез.Добавить("ГруппаПрогнозПоТорговымТочкам");
	Рез.Добавить("ГруппаПрогнозПоТоварам");
	Рез.Добавить("ГруппаТовары");
	Рез.Добавить("ГруппаПроизводителиТоваров");
	Рез.Добавить("ГруппаТоварныйАссортиментТочек");
	Рез.Добавить("ГруппаФактическиеОстатки");
	Рез.Добавить("ГруппаПоказателиЗаказов");
	Рез.Добавить("ГруппаГрафикЗаказов");
	Рез.Добавить("ГруппаЗаказы");
	Возврат Рез;
КонецФункции
//---АК MOSD 

//+++АК MOSD 2018.12.09 ИП-00018605 
&НаСервере
Процедура ЗаполнитьДанныеСтраницыНаСервере(ИмяСтраницы)
	
	Если ИмяСтраницы = "ГруппаПрогнозПоТоварам" ИЛИ ИмяСтраницы = "ГруппаПрогнозПоТорговымТочкам" Тогда
		ЗаполнитьТаблицыПродаж();
		СписокОткрытыхСтраниц.Добавить("ГруппаПрогнозПоТоварам" );
		СписокОткрытыхСтраниц.Добавить("ГруппаПрогнозПоТорговымТочкам");
	ИначеЕсли ИмяСтраницы = "ГруппаТовары" Тогда
		ЗаполнитьПараметрыНоменклатурыЗаказа();
		СписокОткрытыхСтраниц.Добавить(ИмяСтраницы);
	ИначеЕсли ИмяСтраницы = "ГруппаПроизводителиТоваров" Тогда
		ЗаполнитьПоставщиковИУсловияПоставки();
		СписокОткрытыхСтраниц.Добавить(ИмяСтраницы);
	ИначеЕсли ИмяСтраницы = "ГруппаФактическиеОстатки" Тогда
		ЗаполнитьТаблицуФактическихОстатков();
		СписокОткрытыхСтраниц.Добавить(ИмяСтраницы);
	ИначеЕсли ИмяСтраницы = "ГруппаПоказателиЗаказов" ИЛИ ИмяСтраницы = "ГруппаТоварныйАссортиментТочек" Тогда
		ЗаполнитьДеревоТоваров();
		СписокОткрытыхСтраниц.Добавить("ГруппаПоказателиЗаказов");
		СписокОткрытыхСтраниц.Добавить("ГруппаТоварныйАссортиментТочек");
	ИначеЕсли ИмяСтраницы = "ГруппаЗаказы" ИЛИ ИмяСтраницы = "ГруппаГрафикЗаказов" Тогда
		ЗаполнитьТаблицуРасчетчиковДляЗаказа();
		УстановитьОтборГрафикиЗаказовИРазвозаСервер();
		УстановитьОтборЗаказовПоставщикамСервер();
		СписокОткрытыхСтраниц.Добавить("ГруппаЗаказы");
		СписокОткрытыхСтраниц.Добавить("ГруппаГрафикЗаказов");
КонецЕсли;
КонецПроцедуры
//---АК MOSD 
