
// Добавляет запись в регистр сведений на основании строки таблицы на форме.
//
// Параметры:
// 	ИмяРегистра 		- Строка	, наименование регистра сведений;
// 	СтруктураЗначений 	- Структура	, значения измерений, ресурсов и реквизитов регистра сведений.
//
Процедура ДобавитьЗаписьВРегистрСведений(ИмяРегистра, СтруктураЗначений) Экспорт
	
	Перем МенеджерЗаписи;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗначений);
	
	Попытка
		МенеджерЗаписи.Записать(); 
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не удалось добавить запись в регистр сведений """ + ИмяРегистра + """";
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

// Записывает в регистр сведений результат запроса "к записи" и очищает записи "к очистке".
//
// Параметры:
// 	ИмяРегистра 		- Строка			, наименование регистра сведений;
// 	РезультатКЗаписи 	- РезультатЗапроса	, результат запроса к записи;
// 	РезультатКОчистке 	- РезультатЗапроса	, результат запроса к очистке;
// 	МассивИзмерений 	- Массив			, массив наименований измерений регистра сведений.
//
Процедура ЗаписатьВРегистрСведений(ИмяРегистра, РезультатКЗаписи, РезультатКОчистке, МассивИзмерений = "") Экспорт
	
	Перем мРегистр, Выборка, НаборЗаписей, МенеджерЗаписи;
	
	мРегистр = РегистрыСведений[ИмяРегистра];
	
	Выборка = РезультатКОчистке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
		Для Каждого ЭлементМассива Из МассивИзмерений Цикл
			НаборЗаписей.Отбор[ЭлементМассива].Установить(Выборка[ЭлементМассива]);
		КонецЦикла;
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не удалось очистить запись регистра """ + ИмяРегистра + """";
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
	КонецЦикла;	
	
	//Если ТипЗнч(РезультатКЗаписи) = Тип("РезультатЗапроса") Тогда	
	//	
	Если НЕ РезультатКЗаписи = Неопределено Тогда
		
		Выборка = РезультатКЗаписи.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				Сообщить("Не удалось добавить запись в регистр """ + ИмяРегистра + """" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
	//ИначеЕсли ТипЗнч(РезультатКЗаписи) = Тип("ТаблицаЗначений") Тогда	
	//	
	//	Для Каждого СтрокаТаблицы Из РезультатКЗаписи Цикл
	//		
	//		МенеджерЗаписи = мРегистр.СоздатьМенеджерЗаписи();
	//		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
	//		
	//		Попытка
	//			МенеджерЗаписи.Записать();
	//		Исключение
	//			Сообщить("Не удалось добавить запись в регистр """ + ИмяРегистра + """" + Символы.ПС + ОписаниеОшибки());
	//		КонецПопытки;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Записывает в регистр сведений "ПланыПродажПоДнямНедели" результат запроса "к записи" и очищает записи "к очистке".
//
// Параметры:
// 	РезультатКЗаписи 	- РезультатЗапроса	, результат запроса к записи;
// 	РезультатКОчистке 	- РезультатЗапроса	, результат запроса к очистке.
//
Процедура ЗаписатьВПланыПродажПоДнямНедели(мРасчетчик, РезультатКЗаписи, РезультатКОчистке = Неопределено,
															мНоменклатура = Неопределено, мТорговаяТочка = Неопределено) Экспорт
	
	мРегистр = РегистрыСведений.ПланыПродажПоДнямНедели;
	
	// очистка (если нужно)
	Если НЕ РезультатКОчистке = Неопределено Тогда
		
		Выборка = РезультатКОчистке.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Расчетчик.Установить(мРасчетчик);
			НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
			Если НЕ мНоменклатура = Неопределено Тогда
				НаборЗаписей.Отбор.Номенклатура.Установить(мНоменклатура);
			КонецЕсли;
			Если мТорговаяТочка = Неопределено Тогда
				НаборЗаписей.Отбор.ТорговаяТочка.Установить(Выборка.ТорговаяТочка);
			Иначе
				НаборЗаписей.Отбор.ТорговаяТочка.Установить(мТорговаяТочка);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// запись
	ТекСклад = мРасчетчик.Склад;
	ВыборкаПоДатам = РезультатКЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата");
	Пока ВыборкаПоДатам.Следующий() Цикл
		
		ТекДата = ВыборкаПоДатам.Дата;
		
		НаборЗаписей = мРегистр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Расчетчик.Установить(мРасчетчик);
		НаборЗаписей.Отбор.Дата.Установить(ТекДата);
		Если НЕ мНоменклатура = Неопределено Тогда
			НаборЗаписей.Отбор.Номенклатура.Установить(мНоменклатура);
		КонецЕсли;
		Если НЕ мТорговаяТочка = Неопределено Тогда
			НаборЗаписей.Отбор.ТорговаяТочка.Установить(мТорговаяТочка);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
		Выборка = ВыборкаПоДатам.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Дата 			= ТекДата;
			НоваяЗапись.Расчетчик 		= мРасчетчик;
			НоваяЗапись.ТорговаяТочка 	= Выборка.ТорговаяТочка;
			НоваяЗапись.Номенклатура 	= Выборка.Номенклатура;
			НоваяЗапись.Количество 		= Выборка.Количество;
			НоваяЗапись.Цена 			= Выборка.Цена;
			НоваяЗапись.Склад 			= ТекСклад;
		КонецЦикла;

		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


// Функция возвращает окончание недели по ее номеру
//
Функция ПолучитьДатуОкончанияНеделиПоНомеру(мНомерНедели)
	
	Перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерНедели", мНомерНедели);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НАЧАЛОПЕРИОДА(СоответствиеДатДнямНедели.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрСведений.СоответствиеДатДнямНедели КАК СоответствиеДатДнямНедели
	|ГДЕ
	|	СоответствиеДатДнямНедели.НомерНедели = &НомерНедели
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Дата;
	
КонецФункции

Функция ПолучитьСтруктуруНаличияДнейВПериоде(мСписокДатПериода) Экспорт
	
	Перем ЕстьПонедельник, ЕстьВторник, ЕстьСреда, ЕстьЧетверг, ЕстьПятница, ЕстьСуббота, ЕстьВоскресенье;
	
	ЕстьПонедельник = Ложь;
	ЕстьВторник 	= Ложь;
	ЕстьСреда 		= Ложь;
	ЕстьЧетверг 	= Ложь;
	ЕстьПятница 	= Ложь;
	ЕстьСуббота 	= Ложь;
	ЕстьВоскресенье = Ложь;
	Для Каждого ЭлементСписка Из мСписокДатПериода Цикл
		
		Если ДеньНедели(ЭлементСписка.Значение) 		= 1
				И НЕ ЕстьПонедельник Тогда
			ЕстьПонедельник = Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 2
				И НЕ ЕстьВторник Тогда
			ЕстьВторник 	= Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 3
				И НЕ ЕстьСреда Тогда
			ЕстьСреда 	= Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 4
				И НЕ ЕстьЧетверг Тогда
			ЕстьЧетверг 	= Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 5
				И НЕ ЕстьПятница Тогда
			ЕстьПятница 	= Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 6
				И НЕ ЕстьСуббота Тогда
			ЕстьСуббота 	= Истина;
		ИначеЕсли ДеньНедели(ЭлементСписка.Значение) 	= 7
				И НЕ ЕстьВоскресенье Тогда
			ЕстьВоскресенье 	= Истина;
		КонецЕсли;
	КонецЦикла;
	
	мСтруктура = Новый Структура;
	мСтруктура.Вставить("ЕстьПонедельник"	, ЕстьПонедельник);
	мСтруктура.Вставить("ЕстьВторник"		, ЕстьВторник);
	мСтруктура.Вставить("ЕстьСреда"			, ЕстьСреда);
	мСтруктура.Вставить("ЕстьЧетверг"		, ЕстьЧетверг);
	мСтруктура.Вставить("ЕстьПятница"		, ЕстьПятница);
	мСтруктура.Вставить("ЕстьСуббота"		, ЕстьСуббота);
	мСтруктура.Вставить("ЕстьВоскресенье"	, ЕстьВоскресенье);
	
	Возврат мСтруктура;
	
КонецФункции


Функция ПолучитьРезультатЗапросаПоНоменклатуре(мНоменклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", мНоменклатура);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	&УсловиеПоНоменклатуре
	|	И НЕ СпрНоменклатура.ЭтоГруппа
	//|	И НЕ СпрНоменклатура.Выведена
	|	И НЕ СпрНоменклатура.ПометкаУдаления";
	
	Если ТипЗнч(мНоменклатура) = Тип("СписокЗначений") Тогда
		СтрокаЗамены = "СпрНоменклатура.Ссылка В(&Номенклатура)";
	Иначе
		Если ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если НЕ мНоменклатура.Пустая() Тогда
				Если мНоменклатура.ЭтоГруппа Тогда
					СтрокаЗамены = "СпрНоменклатура.Ссылка В ИЕРАРХИИ(&Номенклатура)";
				Иначе
					СтрокаЗамены = "СпрНоменклатура.Ссылка = &Номенклатура";
	            КонецЕсли;
			Иначе 	// вся номенклатура
				СтрокаЗамены = "ИСТИНА";
			КонецЕсли;		
		Иначе
			СтрокаЗамены = "СпрНоменклатура.Ссылка В ИЕРАРХИИ(&Номенклатура)";
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатуре", СтрокаЗамены);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьТекстУсловияПоДатам(мДатаНачала, мДатаОкончания, ТекстПоляДаты)
	
	ТекстУсловияПоДатам =
	" " + ТекстПоляДаты + " >= '" + Формат(мДатаНачала, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
	| 	AND " + ТекстПоляДаты + " <= '" + Формат(мДатаОкончания, "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
	| 	AND";
	
	Возврат ТекстУсловияПоДатам;
	
КонецФункции 


Функция АДО_ПолучитьТаблицуПродаж(мДатаНачала, мДатаОкончания, мСписокТорговыхТочек, мНоменклатура)
	
	// описание служебных переменных
	мТипЧисло = Новый ОписаниеТипов("Число");
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	
	СтрокаОтбораТТ			= "(9999999)";
	Для Каждого ЭлементСписка Из мСписокТорговыхТочек Цикл		
		мТорговаяТочка = ЭлементСписка.Значение;
		СтрокаДобавления = ", (" + Формат(мТорговаяТочка.id_tt, "ЧГ=0") + ")";
		СтрокаОтбораТТ = СтрокаОтбораТТ + СтрокаДобавления;
	КонецЦикла;
	
	СтрокаОтбораНоменклатура = "(9999999)";
	РезультатЗапроса = ПолучитьРезультатЗапросаПоНоменклатуре(мНоменклатура);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОтбораНоменклатура = СтрокаОтбораНоменклатура + ", (" + Формат(Выборка.id_tov, "ЧГ=0") + ")";
	КонецЦикла;
	
	ТекстУсловияПоДатам2 = ПолучитьТекстУсловияПоДатам(мДатаНачала, мДатаОкончания, "dtt.date_tt");
	ТекстУсловияПоДатам3 = ПолучитьТекстУсловияПоДатам(мДатаНачала, мДатаОкончания, "LostSales.date_ls");
	
	
	// получение таблицы из SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"IF OBJECT_ID('tempdb..#ls') IS NOT NULL 			DROP TABLE #ls
	|IF OBJECT_ID('tempdb..#tabtovary') IS NOT NULL 	DROP TABLE #tabtovary
	|IF OBJECT_ID('tempdb..#tabtorgtochki') IS NOT NULL DROP TABLE #tabtorgtochki
	|IF OBJECT_ID('tempdb..#tabuidytov') IS NOT NULL    DROP TABLE #tabuidytov
	|IF OBJECT_ID('tempdb..#tabuidytt') IS NOT NULL     DROP TABLE #tabuidytt
	|IF OBJECT_ID('tempdb..#tabosnovnaya') IS NOT NULL  DROP TABLE #tabosnovnaya
	|-----------------------------------------------------------------------------------------------
	|CREATE TABLE	#tabtovary (coll int);
	|INSERT INTO 	#tabtovary
	|VALUES " + СтрокаОтбораНоменклатура + "
	|;
	|CREATE TABLE   #tabtorgtochki (coll int);
	|INSERT INTO    #tabtorgtochki
	|VALUES " + СтрокаОтбораТТ + "
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	[id_tov] as ID,
	|	[UID] as UID
	|INTO #tabuidytov
	|FROM IzbenkaFin..ArticleBin2UID (nolock)
	|WHERE
	|	[id_tov] IN (SELECT * FROM #tabtovary)
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	[id_tt] as ID,
	|	[UID] as UID
	|INTO #tabuidytt
	|FROM IzbenkaFin..TTBin2UID (nolock)
	|WHERE
	|	[id_tt] IN (SELECT * FROM #tabtorgtochki)
	|
	|-----------------------------------------------------------------------------------------------
	|create table #ls (id_tt int, id_tov int, date_tt date, quantity numeric(15, 3), discount50_qty numeric(15, 3), discount50_sms_qty numeric(15, 3)) 
    |
	|Insert into #ls
	|exec (
	|'SELECT
	|	DTT.id_tt,
	|	DTT.id_tov,
	|	DTT.date_tt,
	|	DTT.quantity,
	|	DTT.discount50_qty,
	|	DTT.discount50_sms_qty
	| FROM vv03..DTT as DTT (nolock) 
	| WHERE" + СтрЗаменить(ТекстУсловияПоДатам2, "'", "''") + " 
	| 	DTT.id_tt IN (" + СтрокаОтбораТТ + ")
	| 	And DTT.id_tov IN (" + СтрокаОтбораНоменклатура + ")
	|') at [SRV-SQL03]
	|	
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	tabuidytt.UID AS TTUID,
	|	tabuidytov.UID AS TovarUID,
	|	CONVERT(DATE, dtt.date_tt) AS Day_ch,
	|	dtt.quantity - dtt.discount50_qty - dtt.discount50_sms_qty as kol,
	|	0 as Kol_p
	|INTO #tabosnovnaya
	|FROM #ls as dtt (nolock)
	| LEFT OUTER JOIN	 #tabuidytt as tabuidytt (nolock)
	| ON dtt.id_tt = tabuidytt.ID
	| LEFT OUTER JOIN	 #tabuidytov as tabuidytov (nolock)
	| ON dtt.id_tov = tabuidytov.ID
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidytt.UID,
	|	tabuidytov.UID,
	|	CONVERT(DATE, LostSales.date_ls),
	|	0,
	|	LostSales.lost1
	|FROM M2..Lost_sales as LostSales (nolock)
	| LEFT OUTER JOIN  #tabuidytt as tabuidytt (nolock)
	| ON LostSales.id_tt_ls = tabuidytt.ID
	| LEFT OUTER JOIN  #tabuidytov as tabuidytov (nolock)
	| ON LostSales.id_tov_ls = tabuidytov.ID
	| WHERE" + ТекстУсловияПоДатам3 +
	" 	LostSales.id_tov_ls IN (SELECT * FROM #tabtovary)
	| 	AND LostSales.id_tt_ls IN (SELECT * FROM #tabtorgtochki)
	|
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	tabosnovnaya.TTUID as TTUID,
	|	tabosnovnaya.TovarUID as TovarUID,
	|	tabosnovnaya.Day_ch AS Day_ch,
	|	SUM(tabosnovnaya.Kol) as kol,
	|	SUM(tabosnovnaya.Kol_p) as Kol_p
	|FROM	#tabosnovnaya as tabosnovnaya (nolock)
	|GROUP BY 
	|	tabosnovnaya.Day_ch,
	|	tabosnovnaya.TTUID,
	|	tabosnovnaya.TovarUID
	|
	|-----------------------------------------------------------------------------------------------
	|DROP TABLE #ls
	|DROP TABLE #tabtovary
	|DROP TABLE #tabtorgtochki
	|DROP TABLE #tabuidytov
	|DROP TABLE #tabuidytt
	|DROP TABLE #tabosnovnaya";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("Дата"				, Новый ОписаниеТипов("Дата"));
	ТабДанные.Колонки.Добавить("ТорговаяТочка"		, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабДанные.Колонки.Добавить("НаименованиеТТ"		, Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("НаименованиеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТабДанные.Колонки.Добавить("Количество"			, мТипЧисло);
	ТабДанные.Колонки.Добавить("Количество_п"		, мТипЧисло);
	
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = ТабДанные.Добавить();
				НоваяСтрока.Дата 			= Выборка.Fields("Day_ch").Value;
				Если НЕ Выборка.Fields("TovarUID").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Сред(Выборка.Fields("TovarUID").Value, 2, 36));
					НоваяСтрока.Номенклатура 				= СпрНоменклатура.ПолучитьСсылку(мУникальныйИД);
					НоваяСтрока.НаименованиеНоменклатуры 	= НоваяСтрока.Номенклатура.Наименование;
				КонецЕсли;
				Если НЕ Выборка.Fields("TTUID").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Сред(Выборка.Fields("TTUID").Value, 2, 36));
					НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(мУникальныйИД);
					НоваяСтрока.НаименованиеТТ 	= НоваяСтрока.ТорговаяТочка.Наименование;
				КонецЕсли;
				НоваяСтрока.Количество 		= Выборка.Fields("kol").Value;
				НоваяСтрока.Количество_п 	= Выборка.Fields("kol_p").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();		
	
	ТабДанные.Сортировать("Дата, НаименованиеТТ, НаименованиеНоменклатуры");
	
	Возврат ТабДанные;
	
КонецФункции

Функция АДО_ПолучитьТаблицуПродажЗаПрошлыеНедели(мДатаНачала, мДатаОкончания, мСписокТорговыхТочек, мСписокНоменклатуры, мПоНоменклатуре = Истина)
	
	// описание служебных переменных
	мТипЧисло = Новый ОписаниеТипов("Число");
	СпрНоменклатура 	= Справочники.Номенклатура;
	СпрТорговыеТочки 	= Справочники.СтруктурныеЕдиницы;
	
	СтрокаОтбораТТ = "(9999999)";
	Для Каждого ЭлементСписка Из мСписокТорговыхТочек Цикл		
		мТорговаяТочка = ЭлементСписка.Значение;
		СтрокаДобавления = ", (" + Формат(мТорговаяТочка.id_tt, "ЧГ=0") + ")";
		СтрокаОтбораТТ = СтрокаОтбораТТ + СтрокаДобавления;
	КонецЦикла;
	
	СтрокаОтбораНоменклатура = "(9999999)";
	РезультатЗапроса = ПолучитьРезультатЗапросаПоНоменклатуре(мСписокНоменклатуры);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОтбораНоменклатура = СтрокаОтбораНоменклатура + ", (" + Формат(Выборка.id_tov, "ЧГ=0") + ")";
	КонецЦикла;
	
	ТекстУсловияПоДатам2 = ПолучитьТекстУсловияПоДатам(мДатаНачала, мДатаОкончания, "dtt.date_tt");
	ТекстУсловияПоДатам3 = ПолучитьТекстУсловияПоДатам(мДатаНачала, мДатаОкончания, "LostSales.date_ls");
	
	
	// получение таблицы из SQL
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("SMS_Izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"IF OBJECT_ID('tempdb..#tabtovary') IS NOT NULL         DROP TABLE #tabtovary
	|IF OBJECT_ID('tempdb..#tabtorgtochki') IS NOT NULL     DROP TABLE #tabtorgtochki
	|IF OBJECT_ID('tempdb..#tabuidy') IS NOT NULL           DROP TABLE #tabuidy
	|IF OBJECT_ID('tempdb..#tabnomeranedeli') IS NOT NULL   DROP TABLE #tabnomeranedeli
	|IF OBJECT_ID('tempdb..#tabosnovnaya') IS NOT NULL      DROP TABLE #tabosnovnaya
	|IF OBJECT_ID('tempdb..#tablica1') IS NOT NULL          DROP TABLE #tablica1
	|IF OBJECT_ID('tempdb..#tablica2') IS NOT NULL          DROP TABLE #tablica2
	|IF OBJECT_ID('tempdb..#ls') IS NOT NULL          		DROP TABLE #ls
	|-----------------------------------------------------------------------------------------------
	|CREATE TABLE 	#tabtovary (coll int);
	|INSERT INTO  	#tabtovary
	|VALUES " + СтрокаОтбораНоменклатура + "
	|;
	|CREATE TABLE 	#tabtorgtochki (coll int);
	|INSERT INTO  	#tabtorgtochki
	|VALUES " + СтрокаОтбораТТ + "
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	" + ?(мПоНоменклатуре, "[id_tov]", "[id_tt]") + " as ID,
	|	[UID] as UID
	|INTO 	#tabuidy
	|FROM [IzbenkaFin].[dbo]." + ?(мПоНоменклатуре, "[ArticleBin2UID]", "[TTBin2UID]") + " (nolock)
	|WHERE
	|	" + ?(мПоНоменклатуре, "[id_tov]", "[id_tt]") + " IN (SELECT * FROM #" + ?(мПоНоменклатуре, "tabtovary", "tabtorgtochki") + ")
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	CONVERT(DATE, DATEADD(year, -2000, NomeraNedeli._Fld2678)) as _DateOfWeek,
	|	NomeraNedeli._Fld2679 as _Week
	|INTO 	#tabnomeranedeli
	|FROM IzbenkaFin.._InfoRg2677 as NomeraNedeli (nolock)
	|WHERE
	|	NomeraNedeli._Fld2678 >= '4" + Сред(Формат(мДатаНачала, "ДФ='yyyy-MM-ddTHH:mm:ss'"), 2) + "'
	| 	AND NomeraNedeli._Fld2678 <= '4" + Сред(Формат(мДатаОкончания, "ДФ='yyyy-MM-ddTHH:mm:ss'"), 2) + "'
	|-----------------------------------------------------------------------------------------------
	|create table #ls (id_tt int, id_tov int, date_tt date, quantity numeric(15, 3), discount50_qty numeric(15, 3), discount50_sms_qty numeric(15, 3)) 
    |
	|Insert into #ls
	|exec (
	|'SELECT
	| 	DTT.id_tt,
	| 	DTT.id_tov,
	| 	DTT.date_tt,
	| 	DTT.quantity,
	| 	DTT.discount50_qty,
	|  	DTT.discount50_sms_qty
	| FROM vv03..DTT as DTT (nolock) 
	| WHERE" + СтрЗаменить(ТекстУсловияПоДатам2, "'", "''") + " 
	| 	DTT.id_tt IN (" + СтрокаОтбораТТ + ")
	| 	And DTT.id_tov IN (" + СтрокаОтбораНоменклатура + ")
	|') at [SRV-SQL03]
	|
	|SELECT
	|	tabuidy.UID as UID,
	|	CONVERT(DATE, dtt.date_tt) as Day_ch,
	|	dtt.quantity - dtt.discount50_qty - dtt.discount50_sms_qty as kol,
	|	0 as Kol_p
	|INTO 	#tabosnovnaya
	|FROM #ls as dtt (nolock)
	| LEFT OUTER JOIN	 #tabuidy as tabuidy (nolock)
	| ON dtt." + ?(мПоНоменклатуре, "id_tov", "id_tt") + " = tabuidy.ID
	| WHERE
	| 	dtt.id_tov IN (SELECT * FROM #tabtovary)
	| 	AND dtt.id_tt IN (SELECT * FROM #tabtorgtochki)
	|
	|UNION ALL
	|
	|SELECT
	|	tabuidy.UID,
	|	CONVERT(DATE, LostSales.date_ls),
	|	0,
	|	LostSales.lost1
	|FROM M2..Lost_sales as LostSales (nolock)
	| LEFT OUTER JOIN	 #tabuidy as tabuidy (nolock)
	| ON LostSales." + ?(мПоНоменклатуре, "id_tov_ls", "id_tt_ls") + " = tabuidy.ID
	| WHERE" + ТекстУсловияПоДатам3 +
	" LostSales.id_tov_ls IN (SELECT * FROM #tabtovary)
	| 	AND LostSales.id_tt_ls IN (SELECT * FROM #tabtorgtochki)
    |
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	tabosnovnaya.UID as UID,
	|	tabosnovnaya.Day_ch AS Day_ch,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'понедельник' THEN tabosnovnaya.Kol ELSE 0 END) as kol1,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'понедельник' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p1,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'вторник' THEN tabosnovnaya.Kol ELSE 0 END) as kol2,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'вторник' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p2,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'среда' THEN tabosnovnaya.Kol ELSE 0 END) as kol3,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'среда' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p3,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'четверг' THEN tabosnovnaya.Kol ELSE 0 END) as kol4,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'четверг' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p4,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'пятница' THEN tabosnovnaya.Kol ELSE 0 END) as kol5,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'пятница' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p5,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'суббота' THEN tabosnovnaya.Kol ELSE 0 END) as kol6,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'суббота' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p6,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'воскресенье' THEN tabosnovnaya.Kol ELSE 0 END) as kol7,
	|	SUM(CASE WHEN DATENAME(WEEKDAY, tabosnovnaya.Day_ch) = 'воскресенье' THEN tabosnovnaya.Kol_p ELSE 0 END) as Kol_p7,
	|	SUM(tabosnovnaya.Kol) as kol,
	|	SUM(tabosnovnaya.Kol_p) as Kol_p
	|INTO 	#tablica1
	|FROM 
	|	#tabosnovnaya as tabosnovnaya (nolock)
	|GROUP BY 
	|	tabosnovnaya.Day_ch,
	|	tabosnovnaya.UID
    |
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	tablica1.UID AS UID,
	|	ISNULL(tabnomeranedeli._Week, 0) AS NomerNedeli,
	|	tablica1.kol1 as kol1,
	|	tablica1.kol_p1 as kol_p1,
	|	tablica1.kol2 as kol2,
	|	tablica1.kol_p2 as kol_p2,
	|	tablica1.kol3 as kol3,
	|	tablica1.kol_p3 as kol_p3,
	|	tablica1.kol4 as kol4,
	|	tablica1.kol_p4 as kol_p4,
	|	tablica1.kol5 as kol5,
	|	tablica1.kol_p5 as kol_p5,
	|	tablica1.kol6 as kol6,
	|	tablica1.kol_p6 as kol_p6,
	|	tablica1.kol7 as kol7,
	|	tablica1.kol_p7 as kol_p7,
	|	tablica1.kol as kol,
	|	tablica1.Kol_p as Kol_p
	|INTO 	#tablica2
	|FROM 
	|	#tablica1 as tablica1 (nolock)
	| LEFT OUTER JOIN
	|	 #tabnomeranedeli as tabnomeranedeli (nolock)
	| ON tablica1.Day_ch = tabnomeranedeli._DateOfWeek
    |
	|-----------------------------------------------------------------------------------------------
	|SELECT
	|	tablica2.NomerNedeli as NomerNedeli,
	|	tablica2.UID AS UID,
	|	SUM(tablica2.kol1) as kol1,
	|	SUM(tablica2.kol_p1) as kol_p1,
	|	SUM(tablica2.kol2) as kol2,
	|	SUM(tablica2.kol_p2) as kol_p2,
	|	SUM(tablica2.kol3) as kol3,
	|	SUM(tablica2.kol_p3) as kol_p3,
	|	SUM(tablica2.kol4) as kol4,
	|	SUM(tablica2.kol_p4) as kol_p4,
	|	SUM(tablica2.kol5) as kol5,
	|	SUM(tablica2.kol_p5) as kol_p5,
	|	SUM(tablica2.kol6) as kol6,
	|	SUM(tablica2.kol_p6) as kol_p6,
	|	SUM(tablica2.kol7) as kol7,
	|	SUM(tablica2.kol_p7) as kol_p7,
	|	SUM(tablica2.kol) as kol,
	|	SUM(tablica2.Kol_p) as Kol_p
	|FROM 	#tablica2 as tablica2 (nolock)
	|GROUP BY 
	|	tablica2.NomerNedeli,
	|	tablica2.UID
    |
	|-----------------------------------------------------------------------------------------------
	|DROP TABLE #tabtovary
	|DROP TABLE #tabtorgtochki
	|DROP TABLE #tabuidy
	|DROP TABLE #tabnomeranedeli
	|DROP TABLE #tabosnovnaya
	|DROP TABLE #tablica1
	|DROP TABLE #tablica2
	|DROP TABLE #ls";
	
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	
	// обработка таблицы, полученной из SQL
	ТабДанные = Новый ТаблицаЗначений;
	Если мПоНоменклатуре Тогда
		ТабДанные.Колонки.Добавить("Номенклатура"				, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабДанные.Колонки.Добавить("НаименованиеНоменклатуры"	, Новый ОписаниеТипов("Строка"));
	Иначе
		ТабДанные.Колонки.Добавить("ТорговаяТочка"		, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		ТабДанные.Колонки.Добавить("НаименованиеТТ"		, Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	ТабДанные.Колонки.Добавить("НомерНедели"			, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоПонедельник"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоПонедельник_п", мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоВторник"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоВторник_п"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоСреда"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоСреда_п"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоЧетверг"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоЧетверг_п"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоПятница"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоПятница_п"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоСуббота"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоСуббота_п"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоВоскресенье"	, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоВоскресенье_п", мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоИтого"		, мТипЧисло);
	ТабДанные.Колонки.Добавить("КоличествоИтого_п"		, мТипЧисло);
	
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = ТабДанные.Добавить();
				НоваяСтрока.НомерНедели 			= Выборка.Fields("NomerNedeli").Value;
				Если НЕ Выборка.Fields("UID").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Сред(Выборка.Fields("UID").Value, 2, 36));
					Если мПоНоменклатуре Тогда
						НоваяСтрока.Номенклатура 				= СпрНоменклатура.ПолучитьСсылку(мУникальныйИД);
						НоваяСтрока.НаименованиеНоменклатуры 	= НоваяСтрока.Номенклатура.Наименование;
					Иначе
						НоваяСтрока.ТорговаяТочка 	= СпрТорговыеТочки.ПолучитьСсылку(мУникальныйИД);
						НоваяСтрока.НаименованиеТТ 	= НоваяСтрока.ТорговаяТочка.Наименование;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.КоличествоПонедельник 	= Выборка.Fields("kol1").Value;
				НоваяСтрока.КоличествоПонедельник_п = Выборка.Fields("kol_p1").Value;
				НоваяСтрока.КоличествоВторник 		= Выборка.Fields("kol2").Value;
				НоваяСтрока.КоличествоВторник_п 	= Выборка.Fields("kol_p2").Value;
				НоваяСтрока.КоличествоСреда 		= Выборка.Fields("kol3").Value;
				НоваяСтрока.КоличествоСреда_п 		= Выборка.Fields("kol_p3").Value;
				НоваяСтрока.КоличествоЧетверг 		= Выборка.Fields("kol4").Value;
				НоваяСтрока.КоличествоЧетверг_п 	= Выборка.Fields("kol_p4").Value;
				НоваяСтрока.КоличествоПятница 		= Выборка.Fields("kol5").Value;
				НоваяСтрока.КоличествоПятница_п 	= Выборка.Fields("kol_p5").Value;
				НоваяСтрока.КоличествоСуббота 		= Выборка.Fields("kol6").Value;
				НоваяСтрока.КоличествоСуббота_п 	= Выборка.Fields("kol_p6").Value;
				НоваяСтрока.КоличествоВоскресенье 	= Выборка.Fields("kol7").Value;
				НоваяСтрока.КоличествоВоскресенье_п = Выборка.Fields("kol_p7").Value;
				НоваяСтрока.КоличествоИтого 		= Выборка.Fields("kol").Value;
				НоваяСтрока.КоличествоИтого_п 		= Выборка.Fields("kol_p").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();		
	
	ТабДанные.Сортировать("НомерНедели Убыв, " + ?(мПоНоменклатуре, "НаименованиеНоменклатуры", "НаименованиеТТ"));
	
	Возврат ТабДанные;
	
КонецФункции


Функция ПолучитьПродажиЗаПрошлыеНедели(мНомерНедели, мСписокТорговыхТочек, мСписокНоменклатуры, мТипЗапроса) Экспорт
	
	Перем ДатаОкончанияПериода, Запрос;
	
	Если НЕ ТипЗнч(мСписокТорговыхТочек) = Тип("СписокЗначений") Тогда
		СписокТТ = Новый СписокЗначений;
		Если ЗначениеЗаполнено(мСписокТорговыхТочек) Тогда
			СписокТТ.Добавить(мСписокТорговыхТочек);
		КонецЕсли;
		мСписокТорговыхТочек = СписокТТ;
	КонецЕсли;
	Если мТипЗапроса = "ПоТорговойТочке"
			И мСписокТорговыхТочек.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(мСписокНоменклатуры) = Тип("СписокЗначений") Тогда
		СписокНом = Новый СписокЗначений;
		Если ЗначениеЗаполнено(мСписокНоменклатуры) Тогда
			СписокНом.Добавить(мСписокНоменклатуры);
		КонецЕсли;
		мСписокНоменклатуры = СписокНом;
	КонецЕсли;
	Если мТипЗапроса = "ПоНоменклатуре"
			И мСписокНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//ДатаОкончанияПериода = ПолучитьДатуОкончанияНеделиПоНомеру(мНомерНедели - 1);
	ДатаОкончанияПериода = ПолучитьДатуОкончанияНеделиПоНомеру(мНомерНедели);
	
	//мДатаНачала 	= ДатаОкончанияПериода - (3 * 7 - 1) * 86400;
	мДатаНачала 	= ДатаОкончанияПериода - (4 * 7 - 1) * 86400;
	мДатаОкончания 	= КонецДня(ДатаОкончанияПериода);
	
	
	ТабДанные = АДО_ПолучитьТаблицуПродажЗаПрошлыеНедели(мДатаНачала, мДатаОкончания, мСписокТорговыхТочек, мСписокНоменклатуры,
			(мТипЗапроса = "ПоНоменклатуре"));
	
	Возврат ТабДанные;
	
КонецФункции


// Функция возвращает результаты запроса по листам учета ОСНОВНАЯ ВЫБОРКА
//
Функция ПолучитьПакетЗапросовПоФактуПродаж(мДатаНачала, мДатаОкончания, мТорговаяТочка, мНоменклатура, мСч) Экспорт
	
	Перем мДатаНачала2, Запрос, НоваяСтрока, мСписокТТ;
	Перем ДатаДинамически, ПродажиНеДинамически, ПродажиДинамически;
	
	// таблица всех дней из анализируемого периода
	мДатаНачала2 = мДатаНачала;
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Пока мДатаНачала2 <= мДатаОкончания Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = мДатаНачала2;
		мДатаНачала2 = мДатаНачала2 + 86400;
	КонецЦикла;
	
	Если ТипЗнч(мТорговаяТочка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		мСписокТТ = Новый СписокЗначений;
		мСписокТТ.Добавить(мТорговаяТочка);
	Иначе
		мСписокТТ = мТорговаяТочка;
	КонецЕсли;
	
	ДатаДинамически = Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить();
	ПродажиДинамически = (ЗначениеЗаполнено(ДатаДинамически)
							И НЕ ДатаДинамически > НачалоДня(мДатаОкончания));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"		, мНоменклатура);
	Запрос.УстановитьПараметр("МассивТорговыхТочек"	, мСписокТТ);
	Запрос.УстановитьПараметр("ДатаНачала"			, мДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, мДатаОкончания);
	Запрос.УстановитьПараметр("ДатаАссортимента"	, КонецДня(мДатаОкончания + 86400));
	Запрос.УстановитьПараметр("ТаблицаДат"			, ТаблицаДат);
	
	ПродажиНеДинамически = Ложь;
	Если ПродажиДинамически Тогда
		Если ДатаДинамически > мДатаНачала Тогда
			Запрос.УстановитьПараметр("ДатаОкончанияДин", ДатаДинамически - 1);
			 // могут быть одновременно и динамически получаемые данные о продажах, и нединамически (из документов Лист учета)
			ПродажиНеДинамически = Истина;
		КонецЕсли;
		ТаблицаПродажДинамически = АДО_ПолучитьТаблицуПродаж(Макс(ДатаДинамически, мДатаНачала), мДатаОкончания, мСписокТТ, мНоменклатура);
		Запрос.УстановитьПараметр("ТаблицаПродажДинамически", ТаблицаПродажДинамически);
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончанияДин"	, мДатаОкончания);
	 	ПродажиНеДинамически = Истина;
	  КонецЕсли;
	
	ТекстЗапроса =
		?(ПродажиНеДинамически, 
	"ВЫБРАТЬ
	|	ЛистУчета.Ссылка КАК Ссылка,
	|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
	|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК НачалоДаты,
	|	ДЕНЬНЕДЕЛИ(ЛистУчета.Дата) КАК ДеньНедели
	|ПОМЕСТИТЬ ВТЛистыУчета
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	ЛистУчета.Дата МЕЖДУ &ДатаНачала И &ДатаОкончанияДин
	|	И ЛистУчета.ТорговаяТочка В(&МассивТорговыхТочек)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|", "") +
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура В(&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ?(ПродажиДинамически, // динамическое считывание за период макс(датадинамически, датаначала) - дата окончания
	"ВЫБРАТЬ
	|	ТаблицаПродажДинамически.ТорговаяТочка КАК ТорговаяТочка,
	|	ТаблицаПродажДинамически.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажДинамически.Дата КАК НачалоДаты,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 1
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПонедельник,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 2
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВторник,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 3
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСреда,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 4
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧетверг,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 5
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПятница,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 6
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСуббота,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) = 7
	|			ТОГДА ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВоскресенье,
	|	ДЕНЬНЕДЕЛИ(ТаблицаПродажДинамически.Дата) КАК ДеньНедели,
	|	ТаблицаПродажДинамически.Количество + ТаблицаПродажДинамически.Количество_п КАК ПланКоличество
	|ПОМЕСТИТЬ ВТПродажДинамически
	|ИЗ
	|	&ТаблицаПродажДинамически КАК ТаблицаПродажДинамически
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродажДинамически.ТорговаяТочка КАК ТорговаяТочка,
	|	ТаблицаПродажДинамически.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажДинамически.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТаблицаПродажДинамически.Номенклатура.Весовой КАК Весовой,
	|	ТаблицаПродажДинамически.НачалоДаты КАК Дата,
	|	ТаблицаПродажДинамически.ДеньНедели КАК ДеньНедели,
	|	ТаблицаПродажДинамически.КоличествоПонедельник КАК КоличествоПонедельник,
	|	ТаблицаПродажДинамически.КоличествоВторник КАК КоличествоВторник,
	|	ТаблицаПродажДинамически.КоличествоСреда КАК КоличествоСреда,
	|	ТаблицаПродажДинамически.КоличествоЧетверг КАК КоличествоЧетверг,
	|	ТаблицаПродажДинамически.КоличествоПятница КАК КоличествоПятница,
	|	ТаблицаПродажДинамически.КоличествоСуббота КАК КоличествоСуббота,
	|	ТаблицаПродажДинамически.КоличествоВоскресенье КАК КоличествоВоскресенье,
	|	ТаблицаПродажДинамически.ПланКоличество КАК ПланКоличество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ * ТаблицаПродажДинамически.ПланКоличество КАК ПланСумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТПродажДинамически КАК ТаблицаПродажДинамически
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.Номенклатура = ТаблицаПродажДинамически.Номенклатура)
	|			И (ВТЦены.ТорговаяТочка = ТаблицаПродажДинамически.ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.Номенклатура = ТаблицаПродажДинамически.Номенклатура)
	|			И (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|", "") +
		?(ПродажиНеДинамически, // нединамически - с начала периода до мин(датаокончания, датадинамически)
	"ВЫБРАТЬ
	|	ВТЛистыУчета.ТорговаяТочка КАК ТорговаяТочка,
	|	ЛистУчетаТовары.Номенклатура КАК Номенклатура,
	|	ЛистУчетаТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ЛистУчетаТовары.Номенклатура.Весовой КАК Весовой,
	|	ВТЛистыУчета.НачалоДаты КАК Дата,
	|	ВТЛистыУчета.ДеньНедели КАК ДеньНедели,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 1
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПонедельник,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 2
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВторник,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 3
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСреда,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 4
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧетверг,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 5
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПятница,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 6
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСуббота,
	|	ВЫБОР
	|		КОГДА ВТЛистыУчета.ДеньНедели = 7
	|			ТОГДА ЛистУчетаТовары.Расход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВоскресенье,
	|	ЛистУчетаТовары.Расход КАК ПланКоличество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ * ЛистУчетаТовары.Расход КАК ПланСумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЦены.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВТЦеныБезТТ.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТЦеныБезТТ.Цена, 0)
	|	КОНЕЦ КАК Цена" +
			?(НЕ ПродажиДинамически, "
	|ПОМЕСТИТЬ ВТОсновная", "") + "
	|ИЗ
	|	Документ.ЛистУчета.Товары КАК ЛистУчетаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛистыУчета КАК ВТЛистыУчета
	|		ПО (ВТЛистыУчета.Ссылка = ЛистУчетаТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО (ВТЦены.Номенклатура = ЛистУчетаТовары.Номенклатура)
	|			И (ВТЦены.ТорговаяТочка = ЛистУчетаТовары.ТорговаяТочка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦеныБезТТ
	|		ПО (ВТЦеныБезТТ.Номенклатура = ЛистУчетаТовары.Номенклатура)
	|			И (ВТЦеныБезТТ.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ЛистУчетаТовары.Номенклатура В(&Номенклатура)
	|	И ЛистУчетаТовары.Ссылка.ТорговаяТочка В(&МассивТорговыхТочек)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|", "") +
	"ВЫБРАТЬ
	|	ПотерянныеПродажи.ТорговаяТочка,
	|	ПотерянныеПродажи.Номенклатура,
	|	ПотерянныеПродажи.Номенклатура.Наименование,
	|	ПотерянныеПродажи.Номенклатура.Весовой,
	|	ПотерянныеПродажи.Дата,
	|	ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата),
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 1
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 2
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 3
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 4
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 5
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 6
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ПотерянныеПродажи.Дата) = 7
	|			ТОГДА ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ПотерянныеПродажи.Количество,
	|	ПотерянныеПродажи.Сумма,
	|	ВЫБОР
	|		КОГДА НЕ ПотерянныеПродажи.Количество = 0
	|			ТОГДА ПотерянныеПродажи.Сумма / ПотерянныеПродажи.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ПотерянныеПродажиПоТочкам КАК ПотерянныеПродажи
	|ГДЕ
	|	ПотерянныеПродажи.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПотерянныеПродажи.ТипПотери = ЗНАЧЕНИЕ(Перечисление.ТипыПотерь.Значение1)
	|	И ПотерянныеПродажи.Номенклатура В(&Номенклатура)
	|	И ПотерянныеПродажи.ТорговаяТочка В(&МассивТорговыхТочек)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.ТорговаяТочка КАК ТорговаяТочка,
	|	ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТТоварныйАссортимент
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ДатаАссортимента, ТорговаяТочка В(&МассивТорговыхТочек)
	|																				И Номенклатура В(&Номенклатура)) КАК ТоварныйАссортиментТочек
	|ГДЕ
	|	НЕ ТоварныйАссортиментТочек.Выведена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТОсновная.Номенклатура КАК Номенклатура,
	|	ВТОсновная.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТОсновная.Весовой КАК Весовой,
	|	ВТОсновная.Дата КАК Дата,
	|	ВТОсновная.ДеньНедели КАК ДеньНедели,
	|	ВТОсновная.КоличествоПонедельник КАК КоличествоПонедельник,
	|	ВТОсновная.КоличествоВторник КАК КоличествоВторник,
	|	ВТОсновная.КоличествоСреда КАК КоличествоСреда,
	|	ВТОсновная.КоличествоЧетверг КАК КоличествоЧетверг,
	|	ВТОсновная.КоличествоПятница КАК КоличествоПятница,
	|	ВТОсновная.КоличествоСуббота КАК КоличествоСуббота,
	|	ВТОсновная.КоличествоВоскресенье КАК КоличествоВоскресенье,
	|	ВТОсновная.ПланКоличество КАК ПланКоличество,
	|	ВТОсновная.ПланСумма КАК ПланСумма,
	|	ВТОсновная.Цена КАК Цена
	|ПОМЕСТИТЬ ВТПоследняя
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныйАссортимент КАК ВТТоварныйАссортимент
	|		ПО (ВТТоварныйАссортимент.Номенклатура = ВТОсновная.Номенклатура)
	|		И (ВТТоварныйАссортимент.ТорговаяТочка = ВТОсновная.ТорговаяТочка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПоследняя.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПн,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВт,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 3
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСр,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 4
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧт,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 5
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПт,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 6
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСб,
	|	ВЫБОР
	|		КОГДА ВТПоследняя.ДеньНедели = 7
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВс
	|ПОМЕСТИТЬ ВТДатыОсновнойТаблицы
	|ИЗ
	|	ВТПоследняя КАК ВТПоследняя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоПн), 0) КАК КоличествоПн,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоВт), 0) КАК КоличествоВт,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоСр), 0) КАК КоличествоСр,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоЧт), 0) КАК КоличествоЧт,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоПт), 0) КАК КоличествоПт,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоСб), 0) КАК КоличествоСб,
	|	ЕСТЬNULL(СУММА(ВТДатыОсновнойТаблицы.КоличествоВс), 0) КАК КоличествоВс
	|ИЗ
	|	ВТДатыОсновнойТаблицы КАК ВТДатыОсновнойТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоследняя.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТПоследняя.Номенклатура КАК Номенклатура,
	|	ВТПоследняя.Номенклатура.ГруппаНоменклатурыУРЗ КАК ГруппаУРЗ,
	|	ВТПоследняя.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТПоследняя.Весовой КАК Весовой,
	|	ВТПоследняя.Цена КАК Цена,
	|	СУММА(ВТПоследняя.КоличествоПонедельник) КАК КоличествоПонедельник,
	|	СУММА(ВТПоследняя.КоличествоВторник) КАК КоличествоВторник,
	|	СУММА(ВТПоследняя.КоличествоСреда) КАК КоличествоСреда,
	|	СУММА(ВТПоследняя.КоличествоЧетверг) КАК КоличествоЧетверг,
	|	СУММА(ВТПоследняя.КоличествоПятница) КАК КоличествоПятница,
	|	СУММА(ВТПоследняя.КоличествоСуббота) КАК КоличествоСуббота,
	|	СУММА(ВТПоследняя.КоличествоВоскресенье) КАК КоличествоВоскресенье
	|ИЗ
	|	ВТПоследняя КАК ВТПоследняя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоследняя.ТорговаяТочка,
	|	ВТПоследняя.Номенклатура,
	|	ВТПоследняя.Номенклатура.ГруппаНоменклатурыУРЗ,
	|	ВТПоследняя.НаименованиеНоменклатуры,
	|	ВТПоследняя.Весовой,
	|	ВТПоследняя.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДаты.Дата КАК Дата
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОсновнойТаблицы КАК Даты
	|		ПО ВТДаты.Дата = Даты.Дата
	|ГДЕ
	|	Даты.Дата ЕСТЬ NULL";
	
	Если ТипЗнч(мНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			И НЕ мНоменклатура.ЭтоГруппа Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура В(&Номенклатура)", "Номенклатура = &Номенклатура");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	// количество доп. подзапросов
	мСч = ?(ПродажиДинамически И ПродажиНеДинамически, 1, 0);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции
