
#Область ПрограммныйИнтерфейс

//+++АК LATV 2018.12.13 ИП-00020475
&НаСервере
Процедура ЗаполнитьРасходники(Параметры, АдресРезультата=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	// Проверки
	ОбязательныеСвойства = Новый Структура;
	ОбязательныеСвойства.Вставить("ДатаРаспределения",	Тип("Дата"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("Обработки.ЗаполнитьРасходникиПоЗаданиямНаРазборку.ЗаполнитьРасходники", "Параметры"
		, Параметры, Тип("Структура"), ОбязательныеСвойства);
		
	Параметры.ДатаРаспределения = НачалоДня(Параметры.ДатаРаспределения);
	
	ДатаРаспределения	= Параметры.ДатаРаспределения;
	Склад				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Склад");
	
	НеПроверятьВремя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НеПроверятьВремя", Ложь);
	Если ДатаРаспределения <= НачалоДня(ТекущаяДата()) Тогда
		НеПроверятьВремя = Истина;
	КонецЕсли;
	Если Не НеПроверятьВремя Тогда
		Если НельяСоздаватьРО() Тогда
			Если АдресРезультата <> Неопределено Тогда
				ПоместитьВоВременноеХранилище(-1, АдресРезультата);
			КонецЕСли;
			
			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, Неопределено, -1, "Нелья создавать РО", Истина);
			Возврат;
		КонецЕСли;
	КонецЕсли;
	
	// Чтение изменений
	Выборка = ВыбратьДанныеДляФормированияДокументов(Параметры);
	Если Выборка = Неопределено Тогда
		Если АдресРезультата <> Неопределено Тогда
			ПоместитьВоВременноеХранилище(0, АдресРезультата);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Склад = Параметры.Склад;
	
	// Создание и обновление РО и Рейсов
	мсОрдераНеОбновленные = Новый Массив;
	КоличествоДокументов = СформироватьРОиМаршрутныеЛисты(Параметры, Выборка, мсОрдераНеОбновленные);
	
	Для Каждого РО ИЗ мсОрдераНеОбновленные Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обновлен ордер %1 так как есть не подготовленные задания на разборку'"), РО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	// Обновление заданий на разборку
	ОбновитьЗаданияНаРазборку(Параметры, мсОрдераНеОбновленные);
	
	СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,, КоличествоДокументов, "Ок", Истина);
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(КоличествоДокументов, АдресРезультата);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК KIRN 2018.08.21 ИП-00019611.000.00000002
Функция НельяСоздаватьРО() Экспорт
	Если (ТекущаяДата() - НачалоДня(ТекущаяДата()) > 60*60*3) И (ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8) Тогда
		Возврат Истина;
	КонецЕсли;
    Возврат Ложь;
КонецФункции

//+++АК LATV 2018.12.11 ИП-00020475
Функция ВыбратьДанныеДляФормированияДокументов(Параметры)

	ДлительныеОперации.СообщитьПрогресс(0,"Чтение изменений");
	
	Результат = Неопределено;
	
	ДатаРаспределения	= Параметры.ДатаРаспределения;
	Склад				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Склад");
	
	СписокЗаданий		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокЗаданий");
	СписокРасходников	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокРасходников");
	
	ДлительныеОперации.СообщитьПрогресс(0,"Чтение изменений");
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
		|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
		|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерСкладТовары.ДатаПроизводства,
		|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
		|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втРасходники
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И ВЫБОР
		|			КОГДА &ОтборПоСкладу
		|				ТОГДА РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоРасходникам
		|				ТОГДА РасходныйОрдерСкладТовары.Ссылка В (&СписокРасходников)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
		|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И (РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаРазборку.Ссылка,
		|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) КАК Дата,
		|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
		|	ЗаданиеНаРазборкуТовары.Количество,
		|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
		|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
		|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
		|	ЗаданиеНаРазборкуТовары.Собран,
		|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
		|	ЗаданиеНаРазборку.Склад,
		|	ЗаданиеНаРазборку.Номенклатура,
		|	ЗаданиеНаРазборку.Характеристика,
		|	ЗаданиеНаРазборку.Напечатан,
		|	ЗаданиеНаРазборку.Сборщик
		|ПОМЕСТИТЬ втЗадания
		|ИЗ
		|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
		|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
		|ГДЕ
		|	ЗаданиеНаРазборку.Напечатан = ИСТИНА
		|	И ЗаданиеНаРазборку.Проведен = ИСТИНА
		|	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И ВЫБОР
		|			КОГДА &ОтборПоЗаданиям
		|				ТОГДА ЗаданиеНаРазборку.Ссылка В (&СписокЗаданий)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоСкладу
		|				ТОГДА ЗаданиеНаРазборку.Склад = &Склад
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадания.Ссылка КАК ЗаданиеНаРазборку,
		|	втЗадания.Дата,
		|	втЗадания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втЗадания.Количество,
		|	втЗадания.РасходныйОрдер КАК РасходныйОрдер,
		|	втЗадания.ДатаПроизводства,
		|	втЗадания.ДатаПроизводстваПред,
		|	втЗадания.Собран,
		|	втЗадания.НомерРаспределения,
		|	втЗадания.Склад КАК Склад,
		|	втЗадания.Номенклатура,
		|	втЗадания.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
		|	втЗадания.Характеристика,
		|	втЗадания.Напечатан,
		|	втЗадания.Сборщик,
		|	втРасходники.Ссылка КАК РасходныйОрдерРО,
		|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
		|	втРасходники.ДатаПроизводства КАК ДатаПроизводстваРО,
		|	втРасходники.Количество КАК КоличествоРО,
		|	ВЫБОР
		|		КОГДА втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьИзменения
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	втЗадания КАК втЗадания
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
		|		ПО втЗадания.Дата = втРасходники.Дата
		|			И втЗадания.Склад = втРасходники.Склад
		|			И втЗадания.Номенклатура = втРасходники.Номенклатура
		|			И втЗадания.Характеристика = втРасходники.Характеристика
		|			И втЗадания.СтруктурнаяЕдиница = втРасходники.СтруктурнаяЕдиница
		|			И втЗадания.Ссылка = втРасходники.ЗаданиеНаРазборку
		|			И (втЗадания.ДатаПроизводстваПред = втРасходники.ДатаПроизводства
		|				ИЛИ втЗадания.ДатаПроизводства = втРасходники.ДатаПроизводства)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.ЗаданиеНаРазборку,
		|	вт2.Дата,
		|	вт2.СтруктурнаяЕдиница,
		|	вт2.Количество,
		|	вт2.РасходныйОрдер,
		|	вт2.ДатаПроизводства,
		|	вт2.ДатаПроизводстваПред,
		|	вт2.Собран,
		|	вт2.НомерРаспределения,
		|	вт2.Склад,
		|	вт2.Номенклатура,
		|	вт2.ЕдИзм,
		|	вт2.Характеристика,
		|	вт2.Напечатан,
		|	вт2.Сборщик,
		|	вт2.РасходныйОрдерРО,
		|	вт2.ЗаданиеНаРазборкуРО,
		|	вт2.КоличествоРО,
		|	вт2.ЕстьИзменения
		|ПОМЕСТИТЬ втИзменения
		|ИЗ
		|	вт2 КАК вт2
		|ГДЕ
		|	(вт2.Количество - ЕСТЬNULL(вт2.КоличествоРО, 0) <> 0
		|			ИЛИ вт2.ДатаПроизводства <> вт2.ДатаПроизводстваПред
		|			ИЛИ вт2.РасходныйОрдер <> вт2.РасходныйОрдерРО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРасходники.Номенклатура,
		|	втРасходники.СтруктурнаяЕдиница,
		|	втРасходники.Склад,
		|	втРасходники.Характеристика,
		|	втРасходники.Количество,
		|	втРасходники.Ссылка,
		|	втРасходники.ДатаПроизводства,
		|	втРасходники.ЗаданиеНаРазборку,
		|	втРасходники.Закрыто,
		|	втРасходники.Дата
		|ИЗ
		|	втРасходники КАК втРасходники
		|ГДЕ
		|	втРасходники.ЗаданиеНаРазборку В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				вт2.ЗаданиеНаРазборку
		|			ИЗ
		|				вт2)
		|	И НЕ втРасходники.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					вт2.РасходныйОрдер
		|				ИЗ
		|					вт2)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втИзменения.ЗаданиеНаРазборку,
		|	втИзменения.Дата,
		|	втИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втИзменения.Количество,
		|	втИзменения.РасходныйОрдер КАК РасходныйОрдер,
		|	втИзменения.ДатаПроизводства,
		|	втИзменения.ДатаПроизводстваПред,
		|	втИзменения.Собран,
		|	втИзменения.НомерРаспределения,
		|	втИзменения.Склад КАК Склад,
		|	втИзменения.Номенклатура,
		|	втИзменения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
		|	втИзменения.Характеристика,
		|	втИзменения.Напечатан,
		|	втИзменения.Сборщик,
		|	втИзменения.РасходныйОрдерРО КАК РасходныйОрдерРО,
		|	втИзменения.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
		|	втИзменения.Количество КАК КоличествоРО,
		|	втИзменения.ЕстьИзменения,
		|	ВЗ_МаршрутыРейсы.Маршрут КАК Маршрут,
		|	ВЗ_МаршрутыРейсы.ТорговаяТочка КАК ТорговаяТочка,
		|	ВЗ_МаршрутыРейсы.Номенклатура КАК Номенклатура1,
		|	ВЗ_МаршрутыРейсы.Автомобиль,
		|	втИзменения.Склад.Организация КАК Организация
		|ИЗ
		|	втИзменения КАК втИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЗ_НоменклатураМаршрутов.Номенклатура КАК Номенклатура,
		|			ВЗ_НоменклатураМаршрутов.Маршрут КАК Маршрут,
		|			ВЗ_НоменклатураМаршрутов.ТорговаяТочка КАК ТорговаяТочка,
		|			ВЗ_НоменклатураМаршрутов.Организация КАК Организация,
		|			ВодителиПоМаршрутуСрезПоследних.Автомобиль КАК Автомобиль
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ВЗ_Номенклатура.Номенклатура КАК Номенклатура,
		|				ВЗ_Маршруты.Маршрут КАК Маршрут,
		|				ВЗ_Маршруты.ТорговаяТочка КАК ТорговаяТочка,
		|				ВЗ_Маршруты.Организация КАК Организация
		|			ИЗ
		|				(ВЫБРАТЬ
		|					Маршруты.Ссылка КАК Маршрут,
		|					ЕСТЬNULL(МаршрутыСклады.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		|					ЕСТЬNULL(МаршрутыТорговыеТочки.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТорговаяТочка,
		|					Маршруты.Организация КАК Организация
		|				ИЗ
		|					Справочник.Маршруты КАК Маршруты
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
		|						ПО Маршруты.Ссылка = МаршрутыСклады.Ссылка
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|						ПО Маршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
		|				ГДЕ
		|					НЕ Маршруты.ПометкаУдаления) КАК ВЗ_Маршруты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|						ДоступностьТоваровНаСкладах.Склад КАК Склад
		|					ИЗ
		|						РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах) КАК ВЗ_Номенклатура
		|					ПО (ВЗ_Маршруты.Склад = ВЗ_Номенклатура.Склад
		|							ИЛИ ВЗ_Маршруты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВЗ_НоменклатураМаршрутов
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаРаспределения, ) КАК ВодителиПоМаршрутуСрезПоследних
		|				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВодителиПоМаршрутуСрезПоследних.Маршрут) КАК ВЗ_МаршрутыРейсы
		|		ПО втИзменения.Номенклатура = ВЗ_МаршрутыРейсы.Номенклатура
		|			И втИзменения.СтруктурнаяЕдиница = ВЗ_МаршрутыРейсы.ТорговаяТочка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоРасходникам
		|				ТОГДА втИзменения.РасходныйОрдер В (&СписокРасходников)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЗ_МаршрутыРейсы.Маршрут,
		|	втИзменения.Склад,
		|	втИзменения.СтруктурнаяЕдиница,
		|	втИзменения.РасходныйОрдер";
		
	Запрос.УстановитьПараметр("ДатаРаспределения",	ДатаРаспределения);
	
	Запрос.УстановитьПараметр("ОтборПоСкладу",	Склад <> Неопределено);
	Запрос.УстановитьПараметр("Склад",			Склад);
	
	Запрос.УстановитьПараметр("ОтборПоЗаданиям",	СписокЗаданий <> Неопределено);
	Запрос.УстановитьПараметр("СписокЗаданий",		СписокЗаданий);
	
	Запрос.УстановитьПараметр("ОтборПоРасходникам",	СписокРасходников <> Неопределено);
	Запрос.УстановитьПараметр("СписокРасходников",	СписокРасходников);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РасходникиСНеправильнымЗаданием = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить();
	тзВыборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	Результат = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
	
	Для Каждого Стр из РасходникиСНеправильнымЗаданием Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Указано неверное задание на разборку %1 для номенклатуры %2 %3 %4'"), Стр.ЗаданиеНаРазборку, Стр.Номенклатура, Стр.Характеристика, Стр.ДатаПроизводства);
		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, Стр.Ссылка, -1, ТекстСообщения, Истина);
	КонецЦикла;
	
	// Склад по-умолчанию
	Если тзВыборка.Количество()>0 Тогда
		Если Склад = Неопределено Тогда
			Склад = тзВыборка[0].Склад;
		КонецЕСли;
	КонецЕСли;
	Если Склад = Неопределено Тогда
		Если СписокЗаданий <> Неопределено Тогда
			Склад = СписокЗаданий[0].Склад;
		ИначеЕсли СписокРасходников <> Неопределено Тогда
			Склад = СписокРасходников[0].Склад;
		КонецЕсли;
	КонецЕСли;
	
	Параметры.Вставить("Склад", Склад);
	
	тзВыборка.Свернуть("Номенклатура");
	ЕстьБлокировка = ДопМодульСервер.ЕстьБлокировкаТоваровДляРаспределения(тзВыборка.ВыгрузитьКолонку("Номенклатура"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Владелец"));
	Если ЕстьБлокировка Тогда
		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,, -1, "Есть товары, заблокированные для распределения! Проведение / отмена проведения невозможны.", Истина);
		
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#Область ФормированиеРО

//+++АК LATV 2018.12.13 ИП-00020475
Функция СформироватьРОиМаршрутныеЛисты(Параметры, Выборка, мсОрдераНеОбновленные)

	ДлительныеОперации.СообщитьПрогресс(0,"Создание документов");
	
	ДатаРаспределения	= Параметры.ДатаРаспределения;
	Склад				= Параметры.Склад;
	
	ОбновлятьТолькоЗакрытые = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОбновлятьТолькоЗакрытые", Ложь);
	
	МаршрутныеЛисты = Обработки.ЗагрузитьРаспределение1.НовыйСписокМаршрутныхЛистов();
	
	КоличествоДокументов = 0;
	
	х100	= Выборка.Количество();
	х		= 0;
	
	АвторЗаданияНаРзаборку = Неопределено;
	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
		ЕстьМаршрут = Ложь;
		Если ЗначениеЗаполнено(Выборка.Маршрут) Тогда
			ЕстьМаршрут = Истина;
			
			//На текущую дату формируется один маршрутный лист по каждому маршруту
			ТекСтрокаМаршрутныхЛистов = Обработки.ЗагрузитьРаспределение1.ДобавитьСтрокуВСписокМаршрутныхЛистов(МаршрутныеЛисты, Выборка);
		КонецЕсли;
		
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
					х = х+1;
					
					Если ОбновлятьТолькоЗакрытые Тогда
						Если НЕ Выборка.ЗаданиеНаРазборку.Подготовлен Тогда
							Если ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
								Если мсОрдераНеОбновленные.Найти(Выборка.РасходныйОрдер) = Неопределено Тогда
									мсОрдераНеОбновленные.Добавить(Выборка.РасходныйОрдер);
								КонецЕСли;
							КонецЕСли;
							Продолжить;
						КонецЕСли;
					КонецЕСли;
					
					Если ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
						РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
					Иначе
						РасхОрдерОбъект = ПолучитьРО(Выборка);
					КонецЕсли;
					
					Пока Выборка.Следующий() Цикл
						СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, ЗаданиеНаРазборку", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводстваПред, Выборка.ЗаданиеНаРазборку));
						
						Если СтрокиТовар.Количество() > 0 Тогда
							СтрокаТовар = СтрокиТовар[0];
						Иначе
							СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, ЗаданиеНаРазборку", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства, Выборка.ЗаданиеНаРазборку));
							Если СтрокиТовар.Количество() > 0 Тогда
								СтрокаТовар = СтрокиТовар[0];
							Иначе
								СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
							КонецЕСли;
						КонецЕсли;
						ЗаполнитьСтрокуРО(СтрокаТовар, Выборка);
						
						Если НЕ ЗначениеЗаполнено(АвторЗаданияНаРзаборку) Тогда 
							АвторЗаданияНаРзаборку = Выборка.ЗаданиеНаРазборку.Автор;
						КонецЕсли;
					КонецЦикла;
					
					Если Не РасхОрдерОбъект.ЭтоНовый()
					 Или (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
						
						РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
						РасхОрдерОбъект.Автор = АвторЗаданияНаРзаборку;
						Попытка
							РасхОрдерОбъект.Записать(?(РасхОрдерОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
						Исключение
							СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, РасхОрдерОбъект.Ссылка ,-1, ОписаниеОшибки(), Истина);
						КонецПопытки;
						
						КоличествоДокументов = КоличествоДокументов+1;
						
					КонецЕсли;
					
					Если ЕстьМаршрут Тогда
						ТекСтрокаМаршрутныхЛистов.РасходныеОрдера.Добавить(РасхОрдерОбъект.Ссылка);
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Есть товары, без маршрута. ТорговаяТочка = %1; Номенклатура = %2; Характеристика = %3'")
								, Выборка.СтруктурнаяЕдиница, Выборка.Номенклатура, Выборка.Характеристика);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад, РасхОрдерОбъект.Ссылка, 0, ТекстСообщения, Истина);
					КонецЕсли;
					
					ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Обработки.ЗагрузитьРаспределение1.СоздатьОбновитьМаршрутныеЛисты(Параметры, МаршрутныеЛисты, Ложь, Истина);
	
	ДлительныеОперации.СообщитьПрогресс(100, "Создание документов");
	
	Возврат КоличествоДокументов;

КонецФункции

//+++АК KIRN 2018.07.05 ИП-00019172
&НаСервере
Функция ПолучитьРО(Выборка)
	ЗапросРО = Новый Запрос;
	ЗапросРО.Текст = "ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
	|	И РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &СтруктурнаяЕдиница
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = Истина
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И (РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	//|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку = &ЗаданиеНаразборку
	//|	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	//|	И РасходныйОрдерСкладТовары.Характеристика = &Характеристика
	|";
	ЗапросРО.УстановитьПараметр("ДатаРаспределения", Выборка.Дата);
	ЗапросРО.УстановитьПараметр("Склад",Выборка.Склад);
	ЗапросРО.УстановитьПараметр("СтруктурнаяЕдиница",Выборка.СтруктурнаяЕдиница);
	//ЗапросРО.УстановитьПараметр("ЗаданиеНаразборку",Выборка.ЗаданиеНаразборку);
	//ЗапросРО.УстановитьПараметр("Номенклатура",Выборка.Номенклатура);
	//ЗапросРО.УстановитьПараметр("Характеристика",Выборка.Характеристика);
	ВыборкаРО = ЗапросРО.Выполнить().Выбрать();
	Если ВыборкаРО.Следующий() Тогда
		РасхОрдерОбъект = ВыборкаРО.Ссылка.ПолучитьОбъект();
	Иначе
		РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
		ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка);
	КонецЕсли;
	Возврат РасхОрдерОбъект;
КонецФункции

//+++АК KIRN 2018.06.28 ИП-00019109.000.00000002
Процедура ЗаполнитьСтрокуРО(СтрокаТовар, Выборка)
	СтрокаТовар.Номенклатура 		= Выборка.Номенклатура;
	СтрокаТовар.ЗаданиеНаРазборку	= Выборка.ЗаданиеНаРазборку;
	СтрокаТовар.Характеристика 		= Выборка.Характеристика;
	СтрокаТовар.ДатаПроизводства 	= Выборка.ДатаПроизводства;
	СтрокаТовар.НомерРаспределения	= Выборка.НомерРаспределения;
	СтрокаТовар.ЕдиницаИзмерения 	= Выборка.ЕдИзм;
	СтрокаТовар.КоличествоУРЗ 		= Выборка.Количество;
	СтрокаТовар.Количество 			= Выборка.Количество;
КонецПРоцедуры

//+++АК KIRN 2018.06.28 ИП-00019109.000.00000002
Процедура ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка)

	РасхОрдерОбъект.НеМенятьДатуПриПроведении = Истина;
	РасхОрдерОбъект.Дата			= Выборка.Дата;
	РасхОрдерОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	РасхОрдерОбъект.ВидОперации		= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;;
	РасхОрдерОбъект.Получатель 		= Выборка.СтруктурнаяЕдиница;
	РасхОрдерОбъект.Организация		= Выборка.Организация;
	РасхОрдерОбъект.Склад 			= Выборка.Склад;
	РасхОрдерОбъект.АвтозагрузкаУРЗ = Истина;
	РасхОрдерОбъект.Статус 			= Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	РасхОрдерОбъект.ДатаРаспределения 	= Выборка.Дата;

КонецПроцедуры

#КонецОбласти

//+++АК LATV 2018.12.11 ИП-00020475
Процедура ОбновитьЗаданияНаРазборку(Параметры, мсОрдераНеОбновленные)

	ДатаРаспределения	= Параметры.ДатаРаспределения;
	Склад				= Параметры.Склад;
	
	СписокЗаданий		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокЗаданий");
	СписокРасходников	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокРасходников");
	
	ДлительныеОперации.СообщитьПрогресс(0, "Выборка заданий на разборку для обновления");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
		|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
		|	РасходныйОрдерСкладТовары.Характеристика,
		|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
		|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерСкладТовары.ДатаПроизводства,
		|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
		|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ втРасходники
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И ВЫБОР
		|			КОГДА &ОтборПоСкладу
		|				ТОГДА РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
		|	И ВЫБОР
		|			КОГДА &ОтборПоРасходникам
		|				ТОГДА РасходныйОрдерСкладТовары.Ссылка В (&СписокРасходников)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ РасходныйОрдерСкладТовары.Ссылка В (&мсОрдераНеОбновленные)
		|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И (РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
		|			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
		|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаРазборкуШапка.Ссылка,
		|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) КАК Дата,
		|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
		|	ЗаданиеНаРазборкуТовары.Количество,
		|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
		|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
		|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
		|	ЗаданиеНаРазборкуТовары.Собран,
		|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
		|	ЗаданиеНаРазборкуШапка.Склад,
		|	ЗаданиеНаРазборкуШапка.Номенклатура,
		|	ЗаданиеНаРазборкуШапка.Характеристика,
		|	ЗаданиеНаРазборкуШапка.Напечатан,
		|	ЗаданиеНаРазборкуШапка.Сборщик
		|ПОМЕСТИТЬ втЗадания
		|ИЗ
		|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуШапка
		|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборкуШапка.Ссылка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) = &ДатаРаспределения
		|	И ВЫБОР
		|			КОГДА &ОтборПоЗаданиям
		|				ТОГДА ЗаданиеНаРазборкуШапка.Ссылка В (&СписокЗаданий)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадания.Ссылка,
		|	втЗадания.Дата,
		|	втЗадания.СтруктурнаяЕдиница,
		|	втЗадания.Количество,
		|	втЗадания.ДатаПроизводства,
		|	втЗадания.ДатаПроизводстваПред,
		|	втЗадания.Собран,
		|	втЗадания.НомерРаспределения,
		|	втЗадания.Склад,
		|	втЗадания.Номенклатура,
		|	втЗадания.Характеристика,
		|	втЗадания.Напечатан,
		|	втЗадания.Сборщик,
		|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
		|	втРасходники.Ссылка КАК РасходныйОрдер
		|ИЗ
		|	втРасходники КАК втРасходники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадания КАК втЗадания
		|		ПО втРасходники.ЗаданиеНаРазборку = втЗадания.Ссылка
		|			И втРасходники.Номенклатура = втЗадания.Номенклатура
		|			И втРасходники.Характеристика = втЗадания.Характеристика
		|			И втРасходники.ДатаПроизводства = втЗадания.ДатаПроизводства
		|			И втРасходники.СтруктурнаяЕдиница = втЗадания.СтруктурнаяЕдиница
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаданиеНаРазборку";

	Запрос.УстановитьПараметр("ДатаРаспределения",	ДатаРаспределения);
	
	Запрос.УстановитьПараметр("ОтборПоСкладу",	Склад <> Неопределено);
	Запрос.УстановитьПараметр("Склад",			Склад);
	
	Запрос.УстановитьПараметр("ОтборПоЗаданиям",	СписокЗаданий <> Неопределено);
	Запрос.УстановитьПараметр("СписокЗаданий",		СписокЗаданий);
	
	Запрос.УстановитьПараметр("ОтборПоРасходникам",	СписокРасходников <> Неопределено);
	Запрос.УстановитьПараметр("СписокРасходников",	СписокРасходников);
	
	Запрос.УстановитьПараметр("мсОрдераНеОбновленные", мсОрдераНеОбновленные);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	х100	= Выборка.Количество();
	х		= 0;
	
	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаРазборку") Цикл
		ОбъектЗаданиеНаРазборку = Выборка.ЗаданиеНаРазборку.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			х = х+1;
			СтрокиЗадание = ОбъектЗаданиеНаРазборку.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства", Выборка.СтруктурнаяЕдиница, Выборка.ДатаПроизводства));
			Если СтрокиЗадание.Количество()>0 Тогда
				СтрокиЗадание[0].РасходныйОрдер = Выборка.РасходныйОрдер;
				СтрокиЗадание[0].ДатаПроизводстваПред = СтрокиЗадание[0].ДатаПроизводства;
			КонецЕСли;
			ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Обновление документов");
		КонецЦикла;
		
		Если ОбъектЗаданиеНаРазборку.Товары.Найти(ДОкументы.РасходныйОрдерСклад.ПустаяСсылка()) = Неопределено Тогда
			ОбъектЗаданиеНаРазборку.Закрыто=Истина;
			Если ОбъектЗаданиеНаРазборку.Подготовлен Тогда
				ОбъектЗаданиеНаРазборку.ЗакрытоИОбновлено = Истина;
			КонецЕСли;
		КонецЕсли;
		ОбъектЗаданиеНаРазборку.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
		ОбъектЗаданиеНаРазборку.ОбменДанными.Загрузка = Истина;
		ОбъектЗаданиеНаРазборку.Проведен = Истина;
		Попытка
			ОбъектЗаданиеНаРазборку.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,ОбъектЗаданиеНаРазборку.Ссылка,-1,ОписаниеОшибки(), Истина);
		КонецПопытки;
	КонецЦИкла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "Обновление заданий на разборку");

КонецПроцедуры

#КонецОбласти
