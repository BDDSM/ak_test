//+++АК KIRN 2018.06.28 ИП-00019109.000.00000002  
&НаСервере
Процедура ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка)
	РасхОрдерОбъект.НеМенятьДатуПриПроведении = Истина;
	РасхОрдерОбъект.Дата			= Выборка.Дата;
	РасхОрдерОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	РасхОрдерОбъект.ВидОперации		= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;;
	РасхОрдерОбъект.Получатель 		= Выборка.СтруктурнаяЕдиница;
	РасхОрдерОбъект.Организация		= Выборка.Организация;
	РасхОрдерОбъект.Склад 			= Выборка.Склад;
	РасхОрдерОбъект.АвтозагрузкаУРЗ = Истина;
	РасхОрдерОбъект.Статус 			= Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	РасхОрдерОбъект.ДатаРаспределения 	= Выборка.Дата;
КонецПроцедуры

//+++АК KIRN 2018.07.05 ИП-00019172 
&НаСервере
Функция ПолучитьРО(Выборка)	
	ЗапросРО = Новый Запрос;
	ЗапросРО.Текст = "ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
	|	И РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &СтруктурнаяЕдиница
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И (РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	//|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку = &ЗаданиеНаразборку
	//|	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	//|	И РасходныйОрдерСкладТовары.Характеристика = &Характеристика
	|";
	ЗапросРО.УстановитьПараметр("ДатаРаспределения", Выборка.Дата);
	ЗапросРО.УстановитьПараметр("Склад",Выборка.Склад);
	ЗапросРО.УстановитьПараметр("СтруктурнаяЕдиница",Выборка.СтруктурнаяЕдиница);
	//ЗапросРО.УстановитьПараметр("ЗаданиеНаразборку",Выборка.ЗаданиеНаразборку);
	//ЗапросРО.УстановитьПараметр("Номенклатура",Выборка.Номенклатура);
	//ЗапросРО.УстановитьПараметр("Характеристика",Выборка.Характеристика);
	ВыборкаРО = ЗапросРО.Выполнить().Выбрать();
	Если ВыборкаРО.Следующий() Тогда
		РасхОрдерОбъект = ВыборкаРО.Ссылка.ПолучитьОбъект();
	Иначе
		РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
		ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка);
	КонецЕсли;
	Возврат РасхОрдерОбъект;
КонецФункции


//+++АК KIRN 2018.06.28 ИП-00019109.000.00000002  
&НаСервере
Процедура ЗаполнитьСтрокуРО(СтрокаТовар, Выборка)
	СтрокаТовар.Номенклатура 		= Выборка.Номенклатура;
	СтрокаТовар.ЗаданиеНаРазборку	= Выборка.ЗаданиеНаРазборку;
	СтрокаТовар.Характеристика 		= Выборка.Характеристика;
	СтрокаТовар.ДатаПроизводства 	= Выборка.ДатаПроизводства;
	СтрокаТовар.НомерРаспределения	= Выборка.НомерРаспределения;
	СтрокаТовар.ЕдиницаИзмерения 	= Выборка.ЕдИзм;
	СтрокаТовар.КоличествоУРЗ 		= Выборка.Количество;
	СтрокаТовар.Количество 			= Выборка.Количество;
КонецПРоцедуры

//+++АК KIRN 2018.08.21 ИП-00019611.000.00000002 
Функция НельяСоздаватьРО() Экспорт
	Если (ТекущаяДата() - НачалоДня(ТекущаяДата()) > 60*60*3) И (ТекущаяДата() - НачалоДня(ТекущаяДата()) < 60*60*8) Тогда
		Возврат Истина;
	КонецЕсли;
    Возврат Ложь;
КонецФункции


&НаСервере
Процедура ЗаполнитьРасходники(Параметры, АдресРезультата=Неопределено) Экспорт
	
	ДатаРаспределения = НачалоДня(ТекущаяДата());
	Склад = Неопределено;
	СписокЗаданий = Неопределено;
	СписокРасходников = Неопределено;
	ОбновлятьТолькоЗакрытые = Ложь;
	НеПроверятьВремя = Ложь;
	
	Если Параметры.Свойство("ДатаРаспределения") Тогда
		ДатаРаспределения = НачалоДня(Параметры.ДатаРаспределения);
	КонецЕсли;
	Если Параметры.Свойство("Склад") Тогда
		Склад = Параметры.Склад;		
	КонецЕсли;
	Если Параметры.Свойство("СписокЗаданий") Тогда
		СписокЗаданий = Параметры.СписокЗаданий;		
	КонецЕсли;
	//+++АК KIRN 2018.08.30 ИП-00019710
	Если Параметры.Свойство("СписокРасходников") Тогда
		СписокРасходников = Параметры.СписокРасходников;		
	КонецЕсли;
	Если Параметры.Свойство("ОбновлятьТолькоЗакрытые") Тогда
		ОбновлятьТолькоЗакрытые = Параметры.ОбновлятьТолькоЗакрытые;
	КонецЕСли;
	//---АК KIRN 

	Если ДатаРаспределения <= НачалоДня(ТекущаяДата()) Тогда
		НеПроверятьВремя = Истина;
	ИначеЕсли Параметры.Свойство("НеПроверятьВремя") Тогда
		НеПроверятьВремя = Параметры.НеПроверятьВремя;
	КонецЕсли;

	//+++АК KIRN 2018.08.21 ИП-00019611.000.00000002 
	Если НЕ НеПроверятьВремя Тогда
		Если НельяСоздаватьРО() Тогда
			Если АдресРезультата = Неопределено Тогда
			Иначе
				ПоместитьВоВременноеХранилище(-1, АдресРезультата);
			КонецЕСли;
			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,Неопределено,-1,"Нелья создавать РО", ИСтина);
			Возврат;
		КонецЕСли;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(0,"Чтение изменений");
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	               |	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	               |	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	               |	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ втРасходники
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоСкладу
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоРасходникам
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка В (&СписокРасходников)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |	И (РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	               |			ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
	               |	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРасходники.Номенклатура,
	               |	втРасходники.СтруктурнаяЕдиница,
	               |	втРасходники.Склад,
	               |	втРасходники.Характеристика,
	               |	втРасходники.Количество,
	               |	втРасходники.Ссылка,
	               |	втРасходники.ДатаПроизводства,
	               |	втРасходники.ЗаданиеНаРазборку,
	               |	втРасходники.Закрыто,
	               |	втРасходники.Дата
	               |ИЗ
	               |	втРасходники КАК втРасходники
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаданиеНаРазборку.Ссылка,
	               |	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) КАК Дата,
	               |	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
	               |	ЗаданиеНаРазборкуТовары.Количество,
	               |	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
	               |	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
	               |	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
	               |	ЗаданиеНаРазборкуТовары.Собран,
	               |	ЗаданиеНаРазборкуТовары.НомерРаспределения,
	               |	ЗаданиеНаРазборку.Склад,
	               |	ЗаданиеНаРазборку.Номенклатура,
	               |	ЗаданиеНаРазборку.Характеристика,
	               |	ЗаданиеНаРазборку.Напечатан,
	               |	ЗаданиеНаРазборку.Сборщик
	               |ПОМЕСТИТЬ втЗадания
	               |ИЗ
	               |	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
	               |		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
	               |ГДЕ
	               |	ЗаданиеНаРазборку.Напечатан = ИСТИНА
	               |	И ЗаданиеНаРазборку.Проведен = ИСТИНА
	               |	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоЗаданиям
	               |				ТОГДА ЗаданиеНаРазборку.Ссылка В (&СписокЗаданий)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоСкладу
	               |				ТОГДА ЗаданиеНаРазборку.Склад = &Склад
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗадания.Ссылка КАК ЗаданиеНаРазборку,
	               |	втЗадания.Дата,
	               |	втЗадания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	втЗадания.Количество,
	               |	втЗадания.РасходныйОрдер КАК РасходныйОрдер,
	               |	втЗадания.ДатаПроизводства,
	               |	втЗадания.ДатаПроизводстваПред,
	               |	втЗадания.Собран,
	               |	втЗадания.НомерРаспределения,
	               |	втЗадания.Склад КАК Склад,
	               |	втЗадания.Номенклатура,
	               |	втЗадания.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	               |	втЗадания.Характеристика,
	               |	втЗадания.Напечатан,
	               |	втЗадания.Сборщик,
	               |	втРасходники.Ссылка КАК РасходныйОрдерРО,
	               |	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
				   |	втРасходники.ДатаПроизводства КАК ДатаПроизводстваРО,
	               |	втРасходники.Количество КАК КоличествоРО,
	               |	ВЫБОР
	               |		КОГДА втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) = 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьИзменения
	               |ПОМЕСТИТЬ вт2
	               |ИЗ
	               |	втЗадания КАК втЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
	               |		ПО втЗадания.Дата = втРасходники.Дата
	               |			И втЗадания.Склад = втРасходники.Склад
	               |			И втЗадания.Номенклатура = втРасходники.Номенклатура
	               |			И втЗадания.Характеристика = втРасходники.Характеристика
	               |			И втЗадания.СтруктурнаяЕдиница = втРасходники.СтруктурнаяЕдиница
				   |			И втЗадания.Ссылка = втРасходники.ЗаданиеНаРазборку
	               |			И (втЗадания.ДатаПроизводстваПред = втРасходники.ДатаПроизводства
	               |				ИЛИ втЗадания.ДатаПроизводства = втРасходники.ДатаПроизводства)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт2.ЗаданиеНаРазборку,
	               |	вт2.Дата,
	               |	вт2.СтруктурнаяЕдиница,
	               |	вт2.Количество,
	               |	вт2.РасходныйОрдер,
	               |	вт2.ДатаПроизводства,
	               |	вт2.ДатаПроизводстваПред,
	               |	вт2.Собран,
	               |	вт2.НомерРаспределения,
	               |	вт2.Склад,
	               |	вт2.Номенклатура,
	               |	вт2.ЕдИзм,
	               |	вт2.Характеристика,
	               |	вт2.Напечатан,
	               |	вт2.Сборщик,
	               |	вт2.РасходныйОрдерРО,
	               |	вт2.ЗаданиеНаРазборкуРО,
	               |	вт2.КоличествоРО,
	               |	вт2.ЕстьИзменения
	               |ПОМЕСТИТЬ втИзменения
	               |ИЗ
	               |	вт2 КАК вт2
	               |ГДЕ
	               |	(вт2.Количество - ЕСТЬNULL(вт2.КоличествоРО, 0) <> 0
	               |			ИЛИ вт2.ДатаПроизводства <> вт2.ДатаПроизводстваПред
	               //|			ИЛИ вт2.ЗаданиеНаРазборку <> вт2.ЗаданиеНаРазборкуРО
	               |				ИЛИ вт2.РасходныйОрдер <> вт2.РасходныйОрдерРО)
				   //|ГДЕ
				   //|	втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) <> 0
				   //|	или втЗадания.ДатаПроизводства <> втЗадания.ДатаПроизводстваПред
				   //|	ИЛИ втЗадания.Ссылка <> втРасходники.ЗаданиеНаРазборку
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРасходники.Номенклатура,
	               |	втРасходники.СтруктурнаяЕдиница,
	               |	втРасходники.Склад,
	               |	втРасходники.Характеристика,
	               |	втРасходники.Количество,
	               |	втРасходники.Ссылка,
	               |	втРасходники.ДатаПроизводства,
	               |	втРасходники.ЗаданиеНаРазборку,
	               |	втРасходники.Закрыто,
	               |	втРасходники.Дата
	               |ИЗ
	               |	втРасходники КАК втРасходники
	               |ГДЕ
	               |	втРасходники.ЗаданиеНаРазборку В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				вт2.ЗаданиеНаРазборку
	               |			ИЗ
	               |				вт2)
	               |	И НЕ втРасходники.Ссылка В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					вт2.РасходныйОрдер
	               |				ИЗ
	               |					вт2)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втИзменения.ЗаданиеНаРазборку,
	               |	втИзменения.Дата,
	               |	втИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	втИзменения.Количество,
	               |	втИзменения.РасходныйОрдер КАК РасходныйОрдер,
	               |	втИзменения.ДатаПроизводства,
	               |	втИзменения.ДатаПроизводстваПред,
	               |	втИзменения.Собран,
	               |	втИзменения.НомерРаспределения,
	               |	втИзменения.Склад КАК Склад,
	               |	втИзменения.Номенклатура,
	               |	втИзменения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	               |	втИзменения.Характеристика,
	               |	втИзменения.Напечатан,
	               |	втИзменения.Сборщик,
	               |	втИзменения.РасходныйОрдерРО КАК РасходныйОрдерРО,
	               |	втИзменения.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
	               |	втИзменения.Количество КАК КоличествоРО,
	               |	втИзменения.ЕстьИзменения,
	               |	ВЗ_МаршрутыРейсы.Маршрут КАК Маршрут,
	               |	ВЗ_МаршрутыРейсы.ТорговаяТочка КАК ТорговаяТочка,
	               |	ВЗ_МаршрутыРейсы.Номенклатура КАК Номенклатура1,
	               |	ВЗ_МаршрутыРейсы.Автомобиль,
	               |	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
	               |	втИзменения.Склад.Организация КАК Организация
	               |ИЗ
	               |	втИзменения КАК втИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВЗ_НоменклатураМаршрутов.Номенклатура КАК Номенклатура,
	               |			ВЗ_НоменклатураМаршрутов.Маршрут КАК Маршрут,
	               |			ВЗ_НоменклатураМаршрутов.ТорговаяТочка КАК ТорговаяТочка,
	               |			ВЗ_НоменклатураМаршрутов.Организация КАК Организация,
	               |			ВодителиПоМаршрутуСрезПоследних.Автомобиль КАК Автомобиль,
	               |			ВЗ_Рейсы.Рейс КАК МаршрутныйЛист
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВЗ_Номенклатура.Номенклатура КАК Номенклатура,
	               |				ВЗ_Маршруты.Маршрут КАК Маршрут,
	               |				ВЗ_Маршруты.ТорговаяТочка КАК ТорговаяТочка,
	               |				ВЗ_Маршруты.Организация КАК Организация
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					Маршруты.Ссылка КАК Маршрут,
	               |					ЕСТЬNULL(МаршрутыСклады.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	               |					ЕСТЬNULL(МаршрутыТорговыеТочки.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТорговаяТочка,
	               |					Маршруты.Организация КАК Организация
	               |				ИЗ
	               |					Справочник.Маршруты КАК Маршруты
	               |						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
	               |						ПО Маршруты.Ссылка = МаршрутыСклады.Ссылка
	               |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	               |						ПО Маршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
	               |				ГДЕ
	               |					Маршруты.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_Маршруты
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура,
	               |						ДоступностьТоваровНаСкладах.Склад КАК Склад
	               |					ИЗ
	               |						РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах) КАК ВЗ_Номенклатура
	               |					ПО (ВЗ_Маршруты.Склад = ВЗ_Номенклатура.Склад
	               |							ИЛИ ВЗ_Маршруты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВЗ_НоменклатураМаршрутов
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаРаспределения, ) КАК ВодителиПоМаршрутуСрезПоследних
	               |				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВодителиПоМаршрутуСрезПоследних.Маршрут
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					МАКСИМУМ(ДокМаршЛист.Ссылка) КАК Рейс,
	               |					ДокМаршЛист.Маршрут КАК Маршрут,
	               |					ДокМаршЛист.Организация КАК Организация,
	               |					ДокМаршЛист.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	               |				ИЗ
	               |					Документ.МаршрутныйЛист КАК ДокМаршЛист
	               |				ГДЕ
	               |					ДокМаршЛист.ПометкаУдаления = ЛОЖЬ
	               |					И ДокМаршЛист.Отгружено = ЛОЖЬ
	               |					И (ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	               |							ИЛИ ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка))
	               |					И НАЧАЛОПЕРИОДА(ДокМаршЛист.Дата, ДЕНЬ) = &ДатаРаспределения
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ДокМаршЛист.Маршрут,
	               |					ДокМаршЛист.Организация,
	               |					ДокМаршЛист.СтруктурноеПодразделение) КАК ВЗ_Рейсы
	               |				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВЗ_Рейсы.Маршрут) КАК ВЗ_МаршрутыРейсы
	               |		ПО втИзменения.Номенклатура = ВЗ_МаршрутыРейсы.Номенклатура
	               |			И втИзменения.СтруктурнаяЕдиница = ВЗ_МаршрутыРейсы.ТорговаяТочка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ОтборПоРасходникам
	               |				ТОГДА втИзменения.РасходныйОрдер В (&СписокРасходников)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЗ_МаршрутыРейсы.Маршрут,
	               |	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
	               |	втИзменения.Склад,
	               |	втИзменения.СтруктурнаяЕдиница,
	               |	втИзменения.РасходныйОрдер";

	Запрос.УстановитьПараметр("ДатаРаспределения",ДатаРаспределения);
	Запрос.УстановитьПараметр("ОтборПоЗаданиям", ?(СписокЗаданий = Неопределено,Ложь,Истина));
	Запрос.УстановитьПараметр("ОтборПоСкладу", ?(Склад = Неопределено,Ложь,Истина));
	Запрос.УстановитьПараметр("ОтборПоРасходникам", ?(СписокРасходников = Неопределено,Ложь,Истина));
	Запрос.УстановитьПараметр("СписокЗаданий",СписокЗаданий);
	Запрос.УстановитьПараметр("СписокРасходников",СписокРасходников);
	Запрос.УстановитьПараметр("Склад",Склад);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВсеРасходники = РезультатЗапроса[1].Выгрузить();
	РасходникиСНеправильнымЗаданием = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить();
	Для Каждого Стр из РасходникиСНеправильнымЗаданием Цикл
		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,Стр.Ссылка,-1,"Указано неверное задание на разборку "+Стр.ЗаданиеНаРазборку+" для номенклатуры "+Стр.Номенклатура+" "+Стр.Характеристика+" " +Стр.ДатаПроизводства, ИСтина);		
	КонецЦикла;
	
	тзВыборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	
	//+++АК KIRN 2018.08.26 ИП-00019928  
	Если тзВыборка.Количество()>0 Тогда
		Если Склад = Неопределено Тогда
			Склад = тзВыборка[0].Склад;
		КонецЕСли;
	КонецЕСли;
	
	Если Склад = Неопределено Тогда
		Если СписокЗаданий <> Неопределено Тогда
			Склад = СписокЗаданий[0].Склад;
		ИначеЕсли СписокРасходников <> Неопределено Тогда
			Склад = СписокРасходников[0].Склад;
		КонецЕсли;
	КонецЕСли;

	тзВыборка.Свернуть("Номенклатура");
	ЕстьБлокировка = ДопМодульСервер.ЕстьБлокировкаТоваровДляРаспределения(тзВыборка.ВыгрузитьКолонку("Номенклатура"), Склад.Владелец);
	Если ЕстьБлокировка Тогда
		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,,-1,"Есть товары, заблокированные для распределения! Проведение / отмена проведения невозможны.", ИСтина);
		Если АдресРезультата = Неопределено Тогда
		Иначе
			ПоместитьВоВременноеХранилище(0, АдресРезультата);
		КонецЕСли;
		Возврат;
	КонецЕсли;
	//---АК KIRN 2018.08.26 ИП-00019928  

	
	КоличествоДокументов = 0;
	
	Выборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
	
	ДлительныеОперации.СообщитьПрогресс(0,"Создание документов");
	х100 = Выборка.Количество();
	х=0;  
	
	ВидПеревозкиНаТТ = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
	
	//+++АК sole 2018.06.19 ИП-00018944
	тзТарифы = РегистрыСведений.СтоимостьУслугПоДоставкеТовараНаТТ.ПолучитьТЗТарифы(ДатаРаспределения); 
	
	СтруктураОтбора = Новый Структура();
	//---АК sole 2018.06.19 ИП-00018944
	
	мсОрдераНеОбновленные = Новый Массив;
	
	//++АК hamz 2018.10.17 ИП-00020166      
	АвторПоставлен = "";
	//--АК hamz 2018.10.17 ИП-00020166

	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("МаршрутныйЛист") Цикл
			ЕстьМаршрут = Истина;
			Если НЕ ЗначениеЗаполнено(Выборка.МаршрутныйЛист) Тогда
				Если ЗначениеЗаполнено(Выборка.Маршрут) ТОгда
					//+++АК KIRN 2018.08.23  
					МаршЛистОбъект = СкладыСервер.ПолучитьРейсПоМаршруту(Выборка, тзТарифы, ДатаРаспределения);
					//---АК KIRN 
				Иначе
					ЕстьМаршрут = Ложь;
				КонецЕСли;
			Иначе
				МаршЛистОбъект = Выборка.МаршрутныйЛист.ПолучитьОбъект();
			КонецЕсли;
			//
			//Если ЕстьМаршрут Тогда
			//	МаршЛистОбъект.Заблокировать();
			//КонецЕСли;
			
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
						х = х+1;
						
						//+++АК KIRN 2018.08.30  
						Если ОбновлятьТолькоЗакрытые Тогда
							Если НЕ Выборка.ЗаданиеНаРазборку.Подготовлен Тогда
								Если ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
									Если мсОрдераНеОбновленные.Найти(Выборка.РасходныйОрдер) = Неопределено Тогда
										мсОрдераНеОбновленные.Добавить(Выборка.РасходныйОрдер);
									КонецЕСли;
								КонецЕСли;
								Продолжить;
							КонецЕСли;
						КонецЕСли;
						//---АК KIRN 
							
						Если НЕ ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
							РасхОрдерОбъект = ПолучитьРО(Выборка);
						Иначе
							РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
						КонецЕсли;
						
						//РасхОрдерОбъект.Заблокировать();
						
						Пока Выборка.Следующий() Цикл
							СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, ЗаданиеНаРазборку", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводстваПред, Выборка.ЗаданиеНаРазборку));
							
							Если СтрокиТовар.Количество() > 0 Тогда
								СтрокаТовар = СтрокиТовар[0];
							Иначе
								СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, ЗаданиеНаРазборку", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства, Выборка.ЗаданиеНаРазборку));
								Если СтрокиТовар.Количество() > 0 Тогда
									СтрокаТовар = СтрокиТовар[0];
								Иначе
									СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
								КонецЕСли;
							КонецЕсли;	
							ЗаполнитьСтрокуРО(СтрокаТовар, Выборка);
							
							//++АК hamz 2018.10.17 ИП-00020166
							Если НЕ ЗначениеЗаполнено(АвторПоставлен) Тогда 
								АвторПоставлен = Выборка.ЗаданиеНаРазборку.Автор;
							КонецЕсли;
							//--АК hamz 2018.10.17 ИП-00020166
						КонецЦикла;
						
						
						Если НЕ РасхОрдерОбъект.ЭтоНовый()
							ИЛИ (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
							КоличествоДокументов = КоличествоДокументов+1;
							РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
							Попытка
								//++АК hamz 2018.10.17 ИП-00020166
								РасхОрдерОбъект.Автор = АвторПоставлен;
								//--АК hamz 2018.10.17 ИП-00020166
								РасхОрдерОбъект.Записать(?(РасхОрдерОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
								
								Если ЕстьМаршрут ТОгда
									СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Найти(РасхОрдерОбъект.Ссылка, "Документ");
									Если СтрокаРасхОрдер = Неопределено Тогда
										СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Добавить();
										СтрокаРасхОрдер.Документ = РасхОрдерОбъект.Ссылка;
									КонецЕсли;
								Иначе
									ЗаписьЖурналаРегистрации("ЗаполнитьРОПоЗаданиям", УровеньЖурналаРегистрации.Ошибка,,,"Есть товары, без маршрута. Склад = "+Выборка.Склад+"; ТорговаяТочка = "+Выборка.СтруктурнаяЕдиница+"; Номенклатура = "+Выборка.Номенклатура+"; Характеристика = "+Выборка.Характеристика+"; РасходныйОрдер = "+РасхОрдерОбъект.Ссылка);
								КонецЕсли;
								
							Исключение
								СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,РасхОрдерОбъект.Ссылка,-1,ОписаниеОшибки(), ИСтина);
								//ЗаписьЖурналаРегистрации("ЗаполнитьРОПоЗаданиям", УровеньЖурналаРегистрации.Ошибка,,,"ошибка при записи РО. Склад = "+Выборка.Склад+"; ТорговаяТочка = "+Выборка.СтруктурнаяЕдиница+"; Номенклатура = "+Выборка.Номенклатура+"; Характеристика = "+Выборка.Характеристика+"Ошибка: "+ОписаниеОшибки());
							КонецПопытки;
							
						КонецЕсли;
						//+++АК KIRN 2018.08.21  
						ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");					
					КонецЦикла; //ро
				КонецЦикла; //тт
			КонецЦикла;//склад
			
			Если ЕстьМаршрут Тогда
				Если НЕ МаршЛистОбъект.ЭтоНовый()
					ИЛИ (МаршЛистОбъект.РасходныеОрдера.Количество() > 0 И МаршЛистОбъект.Модифицированность()) Тогда
					//+++АК KIRN 2018.08.14 
					МаршЛистОбъект.ОбменДанными.Загрузка = Истина;
					МаршЛистОбъект.Проведен = истина;
					Попытка
						МаршЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,МаршЛистОбъект.Ссылка,-1,ОписаниеОшибки(), ИСтина);
					КонецПопытки;
					//МаршЛистОбъект.Записать(?(МаршЛистОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
					//---АК KIRN 
				КонецЕсли;	
			КонецЕСли;
		КонецЦикла; //рейс
	КонецЦикла;	//маршрут
	
	//+++АК KIRN 2018.08.30 ИП-00019710
	для Каждого Ор ИЗ мсОрдераНеОбновленные Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не обновлен ордер "+ор+" так как есть не подготовленные задания на разборку");
	КонецЦикла;
	//---АК KIRN 
	
	//+++АК KIRN 2018.08.21  
	ДлительныеОперации.СообщитьПрогресс(0, "Выборка заданий на разборку для обновления");					
	
	Запрос.УстановитьПараметр("мсОрдераНеОбновленные",мсОрдераНеОбновленные);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ втРасходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
	|	И Выбор когда &ОтборПоСкладу тогда РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад Иначе Истина Конец
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
	|	И Выбор когда &ОтборПоРасходникам тогда РасходныйОрдерСкладТовары.Ссылка в (&СписокРасходников) Иначе Истина Конец
	|	И РасходныйОрдерСкладТовары.Ссылка НЕ в (&мсОрдераНеОбновленные)
	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И 
	|		(
	|				РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
	|		 	ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
	|		)
	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
	|;
	|
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаРазборкуШапка.Ссылка,
	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) КАК Дата,
	|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
	|	ЗаданиеНаРазборкуТовары.Количество,
	|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
	|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
	|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
	|	ЗаданиеНаРазборкуТовары.Собран,
	|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
	|	ЗаданиеНаРазборкуШапка.Склад,
	|	ЗаданиеНаРазборкуШапка.Номенклатура,
	|	ЗаданиеНаРазборкуШапка.Характеристика,
	|	ЗаданиеНаРазборкуШапка.Напечатан,
	|	ЗаданиеНаРазборкуШапка.Сборщик
	|ПОМЕСТИТЬ втЗадания
	|ИЗ
	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуШапка
	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборкуШапка.Ссылка
	|ГДЕ	
	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) = &ДатаРаспределения
	|	И Выбор когда &ОтборПоЗаданиям Тогда ЗаданиеНаРазборкуШапка.Ссылка В (&СписокЗаданий) Иначе Истина Конец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗадания.Ссылка,
	|	втЗадания.Дата,
	|	втЗадания.СтруктурнаяЕдиница,
	|	втЗадания.Количество,
	|	втЗадания.ДатаПроизводства,
	|	втЗадания.ДатаПроизводстваПред,
	|	втЗадания.Собран,
	|	втЗадания.НомерРаспределения,
	|	втЗадания.Склад,
	|	втЗадания.Номенклатура,
	|	втЗадания.Характеристика,
	|	втЗадания.Напечатан,
	|	втЗадания.Сборщик,
	|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
	|	втРасходники.Ссылка КАК РасходныйОрдер
	|ИЗ
	|	втРасходники КАК втРасходники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадания КАК втЗадания
	|		ПО втРасходники.ЗаданиеНаРазборку = втЗадания.Ссылка
	|			И втРасходники.Номенклатура = втЗадания.Номенклатура
	|			И втРасходники.Характеристика = втЗадания.Характеристика
	|			И втРасходники.ДатаПроизводства = втЗадания.ДатаПроизводства
	|			И втРасходники.СтруктурнаяЕдиница = втЗадания.СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаРазборку";
	Выборка = Запрос.Выполнить().Выбрать();
	
	х100 = Выборка.Количество();
	х=0;  
		
	ДлительныеОперации.СообщитьПрогресс(0, "Обновление заданий на разборку");					
	
	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаРазборку") Цикл
		ОбъектЗаданиеНаРазборку = Выборка.ЗаданиеНаРазборку.ПолучитьОбъект();
		пока Выборка.Следующий() Цикл
			//+++АК KIRN 2018.08.21  
			х = х+1;
			СтрокиЗадание = ОбъектЗаданиеНаРазборку.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства", Выборка.СтруктурнаяЕдиница, Выборка.ДатаПроизводства));
			Если СтрокиЗадание.Количество()>0 ТОгда
				СтрокиЗадание[0].РасходныйОрдер = Выборка.РасходныйОрдер;
				СтрокиЗадание[0].ДатаПроизводстваПред = СтрокиЗадание[0].ДатаПроизводства;
			КонецЕСли;
			ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Обновление документов");					
		КонецЦикла;
		
		Если ОбъектЗаданиеНаРазборку.Товары.Найти(ДОкументы.РасходныйОрдерСклад.ПустаяСсылка()) = Неопределено Тогда
			ОбъектЗаданиеНаРазборку.Закрыто=Истина;
			Если ОбъектЗаданиеНаРазборку.Подготовлен Тогда
				ОбъектЗаданиеНаРазборку.ЗакрытоИОбновлено = Истина;
			КонецЕСли;
		КонецЕсли;
		ОбъектЗаданиеНаРазборку.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
		//+++АК KIRN 2018.08.14 
		ОбъектЗаданиеНаРазборку.ОбменДанными.Загрузка = Истина;
		ОбъектЗаданиеНаРазборку.Проведен = истина;
		Попытка
			ОбъектЗаданиеНаРазборку.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,ОбъектЗаданиеНаРазборку.Ссылка,-1,ОписаниеОшибки(), ИСтина);
		КонецПопытки;
		//ОбъектЗаданиеНаРазборку.Записать(?(ОбъектЗаданиеНаРазборку.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));								
		//---АК KIRN 
	КонецЦИкла;
	
	
	//ДЛя Каждого Стр из ТаблицаБезМаршрутов Цикл
	//	Сообщить("Нет маршрута для "+Стр.Склад+" "+Стр.ТорговаяТочка + " "+Стр.Номенклатура + " "+Стр.Характеристика +" "+Стр.Количество +" "+Стр.РасходныйОрдер +" "+Стр.ЗаданиеНаРазборку);
	//КонецЦикла;
	
	СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,Неопределено,КоличествоДокументов,"Ок", ИСтина);
	
	Если АдресРезультата = Неопределено Тогда
	Иначе
		ПоместитьВоВременноеХранилище(КоличествоДокументов, АдресРезультата);
	КонецЕСли;
		
КонецПроцедуры

////+++АК KIRN 2018.08.23  
//&НаСервере
//Процедура ЗаполнитьРасходникиИзОчереди(Параметры) Экспорт
//	ДатаРаспределения = НачалоДня(ТекущаяДата());
//	СписокСкладов = Неопределено;
//	СписокЗаданий = Неопределено;
//	
//	Если Параметры.Свойство("ДатаРаспределения") Тогда
//		ДатаРаспределения = Параметры.ДатаРаспределения;
//	КонецЕсли;
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.Склад КАК Склад,
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.НомерЗадания КАК НомерЗадания,
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.Дата КАК Дата,
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.Статус КАК Статус
//	               |ИЗ
//	               |	РегистрСведений.ОчередьНаЗаполнениеРОПоЗаданиямНаРазборку.СрезПоследних(, Дата = &ДатаРаспределения) КАК ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних
//	               |ГДЕ
//	               |	ОчередьНаЗаполнениеРОПоЗаданиямНаРазборкуСрезПоследних.Статус = ЛОЖЬ";
//	Запрос.УстановитьПараметр("ДатаРаспределения",ДатаРаспределения);
//	тзОчередь = Запрос.Выполнить().Выгрузить();
//	ЕСли тзОчередь.Количество() = 0 Тогда
//		Возврат;
//	Иначе
//		СписокЗаданий = тзОчередь.Выгрузить("ЗаданиеНаРазборку");
//		СписокСкладов = тзОчередь.Выгрузить("Склад");
//	КонецЕСли;
//	
//	тзОчередь.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
//	тзОчередь.Колонки.Добавить("ОписаниеОшибки",Новый ОписаниеТипов("Строка"));
//	
//	//ДлительныеОперации.СообщитьПрогресс(0,"Чтение изменений");
//	Запрос.УстановитьПараметр("тзОчередь",тзОчередь);
//	Запрос.УстановитьПараметр("ОтборПоЗаданиям", ?(СписокЗаданий.Количество() = 0,Ложь,Истина));
//	Запрос.УстановитьПараметр("ОтборПоСкладу", ?(СписокСкладов.Количство() = 0,Ложь,Истина));
//	Запрос.УстановитьПараметр("СписокЗаданий",СписокЗаданий);
//	Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);

//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	тОчередь.Склад КАК Склад,
//	|	тОчередь.НомерЗадания КАК НомерЗадания,
//	|	тОчередь.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
//	|	тОчередь.Дата КАК Дата,
//	|	тОчередь.Статус КАК Статус
//	|ПОМЕСТИТЬ втОчередь
//	|    Из &тзОчередь КАК тОчередь
//	|;	
//	|/////////////////////////////	
//	|	ВЫБРАТЬ
//	|	РасходныйОрдерСкладТовары.Номенклатура,
//	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
//	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
//	|	РасходныйОрдерСкладТовары.Характеристика,
//	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
//	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
//	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
//	|ПОМЕСТИТЬ втРасходники
//	|ИЗ
//	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
//	|ГДЕ
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И Выбор когда &ОтборПоСкладу тогда РасходныйОрдерСкладТовары.Ссылка.Склад в (&СписокСкладов) Иначе Истина Конец
//	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
//	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
//	|	И 
//	|		(
//	|				РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|		 	ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|		)
//	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
//	|;
//	|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	втРасходники.Номенклатура,
//	//|	втРасходники.СтруктурнаяЕдиница,
//	//|	втРасходники.Склад,
//	//|	втРасходники.Характеристика,
//	//|	втРасходники.Количество,
//	//|	втРасходники.Ссылка,
//	//|	втРасходники.ДатаПроизводства,
//	//|	втРасходники.ЗаданиеНаРазборку,
//	//|	втРасходники.Закрыто,
//	//|	втРасходники.Дата
//	//|ИЗ
//	//|	втРасходники КАК втРасходники
//	//|;
//	//|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаданиеНаРазборку.Ссылка,
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) КАК Дата,
//	|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
//	|	ЗаданиеНаРазборкуТовары.Количество,
//	|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
//	|	ЗаданиеНаРазборкуТовары.Собран,
//	|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
//	|	ЗаданиеНаРазборку.Склад,
//	|	ЗаданиеНаРазборку.Номенклатура,
//	|	ЗаданиеНаРазборку.Характеристика,
//	|	ЗаданиеНаРазборку.Напечатан,
//	|	ЗаданиеНаРазборку.Сборщик
//	|ПОМЕСТИТЬ втЗадания
//	|ИЗ
//	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
//	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
//	|ГДЕ
//	|	ЗаданиеНаРазборку.Напечатан = ИСТИНА
//	|	И ЗаданиеНаРазборку.Проведен = ИСТИНА
//	|	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И Выбор когда &ОтборПоЗаданиям Тогда ЗаданиеНаРазборку.Ссылка В (&СписокЗаданий) Иначе Истина Конец
//	|	И Выбор когда &ОтборПоСкладу Тогда ЗаданиеНаРазборку.Склад в (&СписокСкладов) Иначе Истина Конец
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЗадания.Ссылка КАК ЗаданиеНаРазборку,
//	|	втЗадания.Дата,
//	|	втЗадания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	втЗадания.Количество,
//	|	втЗадания.РасходныйОрдер КАК РасходныйОрдер,
//	|	втЗадания.ДатаПроизводства,
//	|	втЗадания.ДатаПроизводстваПред,
//	|	втЗадания.Собран,
//	|	втЗадания.НомерРаспределения,
//	|	втЗадания.Склад КАК Склад,
//	|	втЗадания.Номенклатура,
//	|	втЗадания.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
//	|	втЗадания.Характеристика,
//	|	втЗадания.Напечатан,
//	|	втЗадания.Сборщик,
//	|	втРасходники.Ссылка КАК РасходныйОрдерРО,
//	|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
//	|	втРасходники.Количество КАК КоличествоРО,
//	|	ВЫБОР
//	|		КОГДА втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) = 0
//	|			ТОГДА ЛОЖЬ
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ КАК ЕстьИзменения
//	|ПОМЕСТИТЬ втИзменения
//	|ИЗ
//	|	втЗадания КАК втЗадания
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
//	|		ПО втЗадания.Дата = втРасходники.Дата
//	|			И втЗадания.Склад = втРасходники.Склад
//	|			И втЗадания.СтруктурнаяЕдиница = втРасходники.СтруктурнаяЕдиница
//	|			И втЗадания.Номенклатура = втРасходники.Номенклатура
//	|			И втЗадания.Характеристика = втРасходники.Характеристика
//	|			И втЗадания.ДатаПроизводстваПред = втРасходники.ДатаПроизводства
//	|ГДЕ
//	|	втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) <> 0
//	|	или втЗадания.ДатаПроизводства <> втЗадания.ДатаПроизводстваПред
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	втИзменения.ЗаданиеНаРазборку,
//	|	втИзменения.Дата,
//	|	втИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	втИзменения.Количество,
//	|	втИзменения.РасходныйОрдер КАК РасходныйОрдер,
//	|	втИзменения.ДатаПроизводства,
//	|	втИзменения.ДатаПроизводстваПред,
//	|	втИзменения.Собран,
//	|	втИзменения.НомерРаспределения,
//	|	втИзменения.Склад КАК Склад,
//	|	втИзменения.Номенклатура,
//	|	втИзменения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
//	|	втИзменения.Характеристика,
//	|	втИзменения.Напечатан,
//	|	втИзменения.Сборщик,
//	|	втИзменения.РасходныйОрдерРО КАК РасходныйОрдерРО,
//	|	втИзменения.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
//	|	втИзменения.Количество КАК КоличествоРО,
//	|	втИзменения.ЕстьИзменения,
//	|	ВЗ_МаршрутыРейсы.Маршрут КАК Маршрут,
//	|	ВЗ_МаршрутыРейсы.ТорговаяТочка КАК ТорговаяТочка,
//	|	ВЗ_МаршрутыРейсы.Номенклатура КАК Номенклатура1,
//	|	ВЗ_МаршрутыРейсы.Автомобиль,
//	|	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
//	|	втИзменения.Склад.Организация
//	|ИЗ
//	|	втИзменения КАК втИзменения
//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ВЗ_НоменклатураМаршрутов.Номенклатура КАК Номенклатура,
//	|			ВЗ_НоменклатураМаршрутов.Маршрут КАК Маршрут,
//	|			ВЗ_НоменклатураМаршрутов.ТорговаяТочка КАК ТорговаяТочка,
//	|			ВЗ_НоменклатураМаршрутов.Организация КАК Организация,
//	|			ВодителиПоМаршрутуСрезПоследних.Автомобиль КАК Автомобиль,
//	|			ВЗ_Рейсы.Рейс КАК МаршрутныйЛист
//	|		ИЗ
//	|			(ВЫБРАТЬ
//	|				ВЗ_Номенклатура.Номенклатура КАК Номенклатура,
//	|				ВЗ_Маршруты.Маршрут КАК Маршрут,
//	|				ВЗ_Маршруты.ТорговаяТочка КАК ТорговаяТочка,
//	|				ВЗ_Маршруты.Организация КАК Организация
//	|			ИЗ
//	|				(ВЫБРАТЬ
//	|					Маршруты.Ссылка КАК Маршрут,
//	|					ЕСТЬNULL(МаршрутыСклады.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
//	|					ЕСТЬNULL(МаршрутыТорговыеТочки.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТорговаяТочка,
//	|					Маршруты.Организация КАК Организация
//	|				ИЗ
//	|					Справочник.Маршруты КАК Маршруты
//	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
//	|						ПО Маршруты.Ссылка = МаршрутыСклады.Ссылка
//	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
//	|						ПО Маршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
//	|				ГДЕ
//	|					Маршруты.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_Маршруты
//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|						ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура,
//	|						ДоступностьТоваровНаСкладах.Склад КАК Склад
//	|					ИЗ
//	|						РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах) КАК ВЗ_Номенклатура
//	|					ПО (ВЗ_Маршруты.Склад = ВЗ_Номенклатура.Склад
//	|							ИЛИ ВЗ_Маршруты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВЗ_НоменклатураМаршрутов
//	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаРаспределения, ) КАК ВодителиПоМаршрутуСрезПоследних
//	|				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВодителиПоМаршрутуСрезПоследних.Маршрут
//	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|					ДокМаршЛист.Ссылка КАК Рейс,
//	|					ДокМаршЛист.Маршрут КАК Маршрут,
//	|					ДокМаршЛист.Организация КАК Организация,
//	|					ДокМаршЛист.СтруктурноеПодразделение КАК СтруктурноеПодразделение
//	|				ИЗ
//	|					Документ.МаршрутныйЛист КАК ДокМаршЛист
//	|				ГДЕ
//	|					ДокМаршЛист.ПометкаУдаления = ЛОЖЬ
//	|					И ДокМаршЛист.Отгружено = ЛОЖЬ
//	|					И 
//	|					  (						
//	|					  		ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|						ИЛИ	ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|					  )	
//	|					И НАЧАЛОПЕРИОДА(ДокМаршЛист.Дата, ДЕНЬ) = &ДатаРаспределения) КАК ВЗ_Рейсы
//	|				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВЗ_Рейсы.Маршрут) КАК ВЗ_МаршрутыРейсы
//	|		ПО втИзменения.Номенклатура = ВЗ_МаршрутыРейсы.Номенклатура
//	|			И втИзменения.СтруктурнаяЕдиница = ВЗ_МаршрутыРейсы.ТорговаяТочка
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ВЗ_МаршрутыРейсы.Маршрут,
//	|	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
//	|	втИзменения.Склад,
//	|	втИзменения.СтруктурнаяЕдиница,
//	|	втИзменения.РасходныйОрдер";
//	
//	РезультатЗапроса = Запрос.ВыполнитьПакет();
////	ВсеРасходники = РезультатЗапроса[2].Выгрузить();
//	тзВыборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
//	
//	тзЗадания = тзВыборка.Скопировать("ЗаданиеНаРазборку");
//	тзЗадания.Свернуть("ЗаданиеНаРазборку");
//	Для каждого СтрЗ из тзЗадания Цикл
//		Попытка
//			об = СтрЗ.ЗаданиеНаРаборку.ПолучитьОбъект();
//			об.Заблокировать();
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	
//	//+++АК KIRN 2018.08.20  ИП-00018130
//	
//	КоличествоДокументов = 0;
//	
//	Выборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
//	
//	ДлительныеОперации.СообщитьПрогресс(0,"Создание документов");
//	х100 = Выборка.Количество();
//	х=0;  

//	
//	ВидПеревозкиНаТТ = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
//	
//	//+++АК sole 2018.06.19 ИП-00018944
//	тзТарифы = РегистрыСведений.СтоимостьУслугПоДоставкеТовараНаТТ.ПолучитьТЗТарифы(ДатаРаспределения); 
//	
//	СтруктураОтбора = Новый Структура();
//	//---АК sole 2018.06.19 ИП-00018944
//	
//	
//	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
//		Пока Выборка.СледующийПоЗначениюПоля("МаршрутныйЛист") Цикл
//			ЕстьМаршрут = Истина;
//			Если НЕ ЗначениеЗаполнено(Выборка.МаршрутныйЛист) Тогда
//				Если ЗначениеЗаполнено(Выборка.Маршрут) ТОгда
//					МаршЛистОбъект = Документы.МаршрутныйЛист.СоздатьДокумент();
//					МаршЛистОбъект.Дата 					= ДатаРаспределения;
//					МаршЛистОбъект.Организация				= Выборка.СкладОрганизация;
//					МаршЛистОбъект.СтруктурноеПодразделение = Выборка.ТорговаяТочка;
//					МаршЛистОбъект.Автомобиль 				= Выборка.Автомобиль;
//					ТекМаршрут = Выборка.Маршрут;
//					МаршЛистОбъект.Маршрут 					= ТекМаршрут;
//					МаршЛистОбъект.ВидПеревозки				= ВидПеревозкиНаТТ;
//					СтруктураОтбора.Очистить();
//					СтруктураОтбора.Вставить("Маршрут", ТекМаршрут);
//					мТариф = тзТарифы.НайтиСтроки(СтруктураОтбора);
//					
//					Если мТариф.Количество() <> 0 Тогда
//						СтрТариф = мТариф[0];
//						МаршЛистОбъект.ВариантРасчетаНДС = СтрТариф["ВариантРасчетаНДС"];
//						МаршЛистОбъект.СтавкаНДС = СтрТариф["СтавкаНДС"]; 
//					КонецЕсли;
//					
//					ЗаполнитьЗначенияСвойств(МаршЛистОбъект, ТекМаршрут,
//					"СтруктурноеПодразделение, Перевозчик");
//					//---АК sole 2018.06.19 ИП-00018944
//					МаршЛистОбъект.ТорговыеТочки.Загрузить(ТекМаршрут.ТорговыеТочки.Выгрузить());
//				Иначе
//					ЕстьМаршрут = Ложь;
//				КонецЕСли;
//			Иначе
//				МаршЛистОбъект = Выборка.МаршрутныйЛист.ПолучитьОбъект();
//			КонецЕсли;
//			
//			Если ЕстьМаршрут Тогда
//				Попытка
//					МаршЛистОбъект.Заблокировать();
//				Исключение
//					мсРейсы.добавить(МаршЛистОбъект.Ссылка);
//					//1. задание
//					мсСтроки = тзОчередь.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку", Выборка.ЗаданиеНаРазборку));
//					если мсСтроки.Количество() >0 Тогда
//						Для Каждого мСтрока из мсСтроки Цикл
//							мсСтрока.ЕстьОшибки = Истина;
//							мсСтрока.ОписаниеОшибки = мсСтрока.ОписаниеОшибки + "
//							|"+ОписаниеОшибки();
//						КонецЦикла;
//					Иначе
//						мсСтроки = тзОчередь.НайтиСтроки(Новый Структура("Склад", Выборка.Склад));
//						если мсСтроки.Количество() >0 Тогда
//							Для Каждого мСтрока из мсСтроки Цикл
//								мсСтрока.ЕстьОшибки = Истина;
//								мсСтрока.ОписаниеОшибки = мсСтрока.ОписаниеОшибки + "
//								|"+ОписаниеОшибки();
//							КонецЦикла;
//						КонецЕСли;
//						//2 склад
//					КонецЕСли;
//					//3 больше нет
//				КонецПопытки;
//			КонецЕСли;
//			
//			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
//				Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
//					Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
//						х = х+1;
//						Если НЕ ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
//							РасхОрдерОбъект = ПолучитьРО(Выборка);
//							//мсСтрокиРО = ВсеРасходники.НайтиСтроки(Новый Структура("Склад, СтруктурнаяЕдиница", Выборка.Склад, Выборка.СтруктурнаяЕдиница));
//							//Если мсСтрокиРО.Количество()>0 ТОгда
//							//	РасхОрдерОбъект = мсСтрокиРО[0].Ссылка.ПолучитьОбъект();
//							//Иначе
//							//	РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
//							//	ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка);
//							//КонецЕСли;
//						Иначе
//							РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
//						КонецЕсли;
//						
//						Попытка
//							РасхОрдерОбъект.Заблокировать();
//						Исключение
//							мсОрдера.Добавить(РасхОрдерОбъект.Ссылка);
//							//1. задание
//							мсСтроки = тзОчередь.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку", Выборка.ЗаданиеНаРазборку));
//							если мсСтроки.Количество() >0 Тогда
//								Для Каждого мСтрока из мсСтроки Цикл
//									мсСтрока.ЕстьОшибки = Истина;
//									мсСтрока.ОписаниеОшибки = мсСтрока.ОписаниеОшибки + "
//									|"+ОписаниеОшибки();
//								КонецЦикла;
//							Иначе
//								мсСтроки = тзОчередь.НайтиСтроки(Новый Структура("Склад", Выборка.Склад));
//								если мсСтроки.Количество() >0 Тогда
//									Для Каждого мСтрока из мсСтроки Цикл
//										мсСтрока.ЕстьОшибки = Истина;
//										мсСтрока.ОписаниеОшибки = мсСтрока.ОписаниеОшибки + "
//										|"+ОписаниеОшибки();
//									КонецЦикла;
//								КонецЕСли;
//								//2 склад
//							КонецЕСли;
//							//3 больше нет

//						КонецПопытки;
//						
//						Пока Выборка.Следующий() Цикл
//							СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводстваПред));
//							
//							Если СтрокиТовар.Количество() > 0 Тогда
//								СтрокаТовар = СтрокиТовар[0];
//							Иначе
//								СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
//							КонецЕсли;	
//							ЗаполнитьСтрокуРО(СтрокаТовар, Выборка);
//						КонецЦикла;
//						
//						Если НЕ РасхОрдерОбъект.ЭтоНовый()
//							ИЛИ (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
//							КоличествоДокументов = КоличествоДокументов+1;
//							РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
//							РасхОрдерОбъект.Записать(?(РасхОрдерОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
//							
//							Если ЕстьМаршрут ТОгда
//								СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Найти(РасхОрдерОбъект.Ссылка, "Документ");
//								Если СтрокаРасхОрдер = Неопределено Тогда
//									СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Добавить();
//									СтрокаРасхОрдер.Документ = РасхОрдерОбъект.Ссылка;
//								КонецЕсли;
//							Иначе
//								ЗаписьЖурналаРегистрации("ЗаполнитьРОПоЗаданиямИзОчереди", УровеньЖурналаРегистрации.Ошибка,,,"Есть товары, без маршрута. Склад = "+Выборка.Склад+"; ТорговаяТочка = "+Выборка.СтруктурнаяЕдиница+"; Номенклатура = "+Выборка.Номенклатура+"; Характеристика = "+Выборка.Характеристика+"; РасходныйОрдер = "+РасхОрдерОбъект.Ссылка);
//							КонецЕсли;
//						КонецЕсли;
//						//+++АК KIRN 2018.08.21  
//						ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Создание документов");					
//					КонецЦикла; //ро
//				КонецЦикла; //тт
//			КонецЦикла;//склад
//			
//			Если ЕстьМаршрут Тогда
//				Если НЕ МаршЛистОбъект.ЭтоНовый()
//					ИЛИ (МаршЛистОбъект.РасходныеОрдера.Количество() > 0 И МаршЛистОбъект.Модифицированность()) Тогда
//					//+++АК KIRN 2018.08.14 
//					МаршЛистОбъект.ОбменДанными.Загрузка = Истина;
//					МаршЛистОбъект.Проведен = истина;
//					МаршЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
//					//МаршЛистОбъект.Записать(?(МаршЛистОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
//					//---АК KIRN 
//				КонецЕсли;	
//			КонецЕСли;
//		КонецЦикла; //рейс
//	КонецЦикла;	//маршрут
//	
//	//+++АК KIRN 2018.08.21  
//	ДлительныеОперации.СообщитьПрогресс(0, "Выборка заданий на разборку для обновления");					
//	
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	РасходныйОрдерСкладТовары.Номенклатура,
//	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
//	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
//	|	РасходныйОрдерСкладТовары.Характеристика,
//	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
//	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
//	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
//	|ПОМЕСТИТЬ втРасходники
//	|ИЗ
//	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
//	|ГДЕ
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
//	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
//	|	И 
//	|		(
//	|				РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|		 	ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|		)
//	|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
//	|;
//	|
//	
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаданиеНаРазборкуШапка.Ссылка,
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) КАК Дата,
//	|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
//	|	ЗаданиеНаРазборкуТовары.Количество,
//	|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
//	|	ЗаданиеНаРазборкуТовары.Собран,
//	|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
//	|	ЗаданиеНаРазборкуШапка.Склад,
//	|	ЗаданиеНаРазборкуШапка.Номенклатура,
//	|	ЗаданиеНаРазборкуШапка.Характеристика,
//	|	ЗаданиеНаРазборкуШапка.Напечатан,
//	|	ЗаданиеНаРазборкуШапка.Сборщик
//	|ПОМЕСТИТЬ втЗадания
//	|ИЗ
//	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуШапка
//	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборкуШапка.Ссылка
//	|ГДЕ	
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И Выбор когда &ОтборПоЗаданиям Тогда ЗаданиеНаРазборкуШапка.Ссылка В (&СписокЗаданий) Иначе Истина Конец
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЗадания.Ссылка,
//	|	втЗадания.Дата,
//	|	втЗадания.СтруктурнаяЕдиница,
//	|	втЗадания.Количество,
//	|	втЗадания.ДатаПроизводства,
//	|	втЗадания.ДатаПроизводстваПред,
//	|	втЗадания.Собран,
//	|	втЗадания.НомерРаспределения,
//	|	втЗадания.Склад,
//	|	втЗадания.Номенклатура,
//	|	втЗадания.Характеристика,
//	|	втЗадания.Напечатан,
//	|	втЗадания.Сборщик,
//	|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
//	|	втРасходники.Ссылка КАК РасходныйОрдер
//	|ИЗ
//	|	втРасходники КАК втРасходники
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадания КАК втЗадания
//	|		ПО втРасходники.ЗаданиеНаРазборку = втЗадания.Ссылка
//	|			И втРасходники.Номенклатура = втЗадания.Номенклатура
//	|			И втРасходники.Характеристика = втЗадания.Характеристика
//	|			И втРасходники.ДатаПроизводства = втЗадания.ДатаПроизводства
//	|			И втРасходники.СтруктурнаяЕдиница = втЗадания.СтруктурнаяЕдиница
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ЗаданиеНаРазборку";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	х100 = Выборка.Количество();
//	х=0;  
//		
//	ДлительныеОперации.СообщитьПрогресс(0, "Обновление заданий на разборку");					
//	
//	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаРазборку") Цикл
//		ОбъектЗаданиеНаРазборку = Выборка.ЗаданиеНаРазборку.ПолучитьОбъект();
//		пока Выборка.Следующий() Цикл
//			//+++АК KIRN 2018.08.21  
//			х = х+1;
//			СтрокиЗадание = ОбъектЗаданиеНаРазборку.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства", Выборка.СтруктурнаяЕдиница, Выборка.ДатаПроизводства));
//			Если СтрокиЗадание.Количество()>0 ТОгда
//				СтрокиЗадание[0].РасходныйОрдер = Выборка.РасходныйОрдер;
//				СтрокиЗадание[0].ДатаПроизводстваПред = СтрокиЗадание[0].ДатаПроизводства;
//			КонецЕСли;
//			ДлительныеОперации.СообщитьПрогресс(Окр(х*100/х100,0), "Обновление документов");					
//		КонецЦикла;
//		
//		Если ОбъектЗаданиеНаРазборку.Товары.Найти(ДОкументы.РасходныйОрдерСклад.ПустаяСсылка()) = Неопределено Тогда
//			ОбъектЗаданиеНаРазборку.Закрыто=Истина;
//			Если ОбъектЗаданиеНаРазборку.Подготовлен Тогда
//				ОбъектЗаданиеНаРазборку.ЗакрытоИОбновлено = Истина;
//			КонецЕСли;
//		КонецЕсли;
//		ОбъектЗаданиеНаРазборку.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
//		//+++АК KIRN 2018.08.14 
//		ОбъектЗаданиеНаРазборку.ОбменДанными.Загрузка = Истина;
//		ОбъектЗаданиеНаРазборку.Проведен = истина;
//		ОбъектЗаданиеНаРазборку.Записать(РежимЗаписиДокумента.Запись);
//		//ОбъектЗаданиеНаРазборку.Записать(?(ОбъектЗаданиеНаРазборку.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));								
//		//---АК KIRN 
//	КонецЦИкла;
//	
//	Если АдресРезультата = Неопределено Тогда
//	Иначе
//		ПоместитьВоВременноеХранилище(КоличествоДокументов, АдресРезультата);
//	КонецЕСли;
//		
//КонецПроцедуры




//&НаСервере
//Процедура ЗаполнитьРасходникиНовымиЗаданиями(ДатаРаспределения, СписокЗаданий = Неопределено, Склад = Неопределено) Экспорт
//	//+++АК KIRN 2018.08.21 ИП-00019611.000.00000002 
//	Если НельяСоздаватьРО() Тогда
//		СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,Неопределено,-1,"Нелья создавать РО", ИСтина);
//		Возврат;
//	КонецЕСли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	РасходныйОрдерСкладТовары.Номенклатура,
//	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
//	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
//	|	РасходныйОрдерСкладТовары.Характеристика,
//	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
//	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
//	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
//	|ПОМЕСТИТЬ втРасходники
//	|ИЗ
//	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
//	|ГДЕ
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И Выбор когда &ОтборПоСкладу тогда РасходныйОрдерСкладТовары.Ссылка.Склад = &Склад Иначе Истина Конец
//	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
//	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
//	|	И 
//	|		(
//	|				РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|		 	ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|		)
//	//|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втРасходники.Номенклатура,
//	|	втРасходники.СтруктурнаяЕдиница,
//	|	втРасходники.Склад,
//	|	втРасходники.Характеристика,
//	|	втРасходники.Количество,
//	|	втРасходники.Ссылка,
//	|	втРасходники.ДатаПроизводства,
//	|	втРасходники.ЗаданиеНаРазборку,
//	|	втРасходники.Закрыто,
//	|	втРасходники.Дата
//	|ИЗ
//	|	втРасходники КАК втРасходники
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаданиеНаРазборку.Ссылка,
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) КАК Дата,
//	|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
//	|	ЗаданиеНаРазборкуТовары.Количество,
//	|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
//	|	ЗаданиеНаРазборкуТовары.Собран,
//	|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
//	|	ЗаданиеНаРазборку.Склад,
//	|	ЗаданиеНаРазборку.Номенклатура,
//	|	ЗаданиеНаРазборку.Характеристика,
//	|	ЗаданиеНаРазборку.Напечатан,
//	|	ЗаданиеНаРазборку.Сборщик
//	|ПОМЕСТИТЬ втЗадания
//	|ИЗ
//	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
//	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборку.Ссылка
//	|ГДЕ
////	|	ЗаданиеНаРазборку.Напечатан = ИСТИНА
//	|	ЗаданиеНаРазборку.Проведен = ИСТИНА
//	|	И НАЧАЛОПЕРИОДА(ЗаданиеНаРазборку.Дата, ДЕНЬ) = &ДатаРаспределения
////	|	И ЗаданиеНаРазборкуТовары.РасходныйОрдер <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
//	|	И Выбор когда &ОтборПоЗаданиям Тогда ЗаданиеНаРазборку.Ссылка В (&СписокЗаданий) Иначе Истина Конец
//	|	И Выбор когда &ОтборПоСкладу Тогда ЗаданиеНаРазборку.Склад = &Склад Иначе Истина Конец
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЗадания.Ссылка КАК ЗаданиеНаРазборку,
//	|	втЗадания.Дата,
//	|	втЗадания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	втЗадания.Количество,
//	|	втЗадания.РасходныйОрдер КАК РасходныйОрдер,
//	|	втЗадания.ДатаПроизводства,
//	|	втЗадания.ДатаПроизводстваПред,
//	|	втЗадания.Собран,
//	|	втЗадания.НомерРаспределения,
//	|	втЗадания.Склад КАК Склад,
//	|	втЗадания.Номенклатура,
//	|	втЗадания.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
//	|	втЗадания.Характеристика,
//	|	втЗадания.Напечатан,
//	|	втЗадания.Сборщик,
//	|	втРасходники.Ссылка КАК РасходныйОрдерРО,
//	|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
//	|	втРасходники.Количество КАК КоличествоРО,
//	|	ВЫБОР
//	|		КОГДА втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) = 0
//	|			ТОГДА ЛОЖЬ
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ КАК ЕстьИзменения
//	|ПОМЕСТИТЬ втИзменения
//	|ИЗ
//	|	втЗадания КАК втЗадания
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходники КАК втРасходники
//	|		ПО втЗадания.Дата = втРасходники.Дата
//	|			И втЗадания.Склад = втРасходники.Склад
//	|			И втЗадания.СтруктурнаяЕдиница = втРасходники.СтруктурнаяЕдиница
//	|			И втЗадания.Номенклатура = втРасходники.Номенклатура
//	|			И втЗадания.Характеристика = втРасходники.Характеристика
//	|			И втЗадания.ДатаПроизводстваПред = втРасходники.ДатаПроизводства
//	|ГДЕ
//	|	втЗадания.Количество - ЕСТЬNULL(втРасходники.Количество, 0) <> 0
//	|	или втЗадания.ДатаПроизводства <> втЗадания.ДатаПроизводстваПред
//	|	или втРасходники.ЗаданиеНаРазборку <> втЗадания.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	втИзменения.ЗаданиеНаРазборку,
//	|	втИзменения.Дата,
//	|	втИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	втИзменения.Количество,
//	|	втИзменения.РасходныйОрдер КАК РасходныйОрдер,
//	|	втИзменения.ДатаПроизводства,
//	|	втИзменения.ДатаПроизводстваПред,
//	|	втИзменения.Собран,
//	|	втИзменения.НомерРаспределения,
//	|	втИзменения.Склад КАК Склад,
//	|	втИзменения.Номенклатура,
//	|	втИзменения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
//	|	втИзменения.Характеристика,
//	|	втИзменения.Напечатан,
//	|	втИзменения.Сборщик,
//	|	втИзменения.РасходныйОрдерРО КАК РасходныйОрдерРО,
//	|	втИзменения.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуРО,
//	|	втИзменения.Количество КАК КоличествоРО,
//	|	втИзменения.ЕстьИзменения,
//	|	ВЗ_МаршрутыРейсы.Маршрут КАК Маршрут,
//	|	ВЗ_МаршрутыРейсы.ТорговаяТочка КАК ТорговаяТочка,
//	|	ВЗ_МаршрутыРейсы.Номенклатура КАК Номенклатура1,
//	|	ВЗ_МаршрутыРейсы.Автомобиль,
//	|	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
//	|	втИзменения.Склад.Организация КАК Организация
//	|ИЗ
//	|	втИзменения КАК втИзменения
//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ВЗ_НоменклатураМаршрутов.Номенклатура КАК Номенклатура,
//	|			ВЗ_НоменклатураМаршрутов.Маршрут КАК Маршрут,
//	|			ВЗ_НоменклатураМаршрутов.ТорговаяТочка КАК ТорговаяТочка,
//	|			ВЗ_НоменклатураМаршрутов.Организация КАК Организация,
//	|			ВодителиПоМаршрутуСрезПоследних.Автомобиль КАК Автомобиль,
//	|			ВЗ_Рейсы.Рейс КАК МаршрутныйЛист
//	|		ИЗ
//	|			(ВЫБРАТЬ
//	|				ВЗ_Номенклатура.Номенклатура КАК Номенклатура,
//	|				ВЗ_Маршруты.Маршрут КАК Маршрут,
//	|				ВЗ_Маршруты.ТорговаяТочка КАК ТорговаяТочка,
//	|				ВЗ_Маршруты.Организация КАК Организация
//	|			ИЗ
//	|				(ВЫБРАТЬ
//	|					Маршруты.Ссылка КАК Маршрут,
//	|					ЕСТЬNULL(МаршрутыСклады.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
//	|					ЕСТЬNULL(МаршрутыТорговыеТочки.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТорговаяТочка,
//	|					Маршруты.Организация КАК Организация
//	|				ИЗ
//	|					Справочник.Маршруты КАК Маршруты
//	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.Склады КАК МаршрутыСклады
//	|						ПО Маршруты.Ссылка = МаршрутыСклады.Ссылка
//	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
//	|						ПО Маршруты.Ссылка = МаршрутыТорговыеТочки.Ссылка
//	|				ГДЕ
//	|					Маршруты.ПометкаУдаления = ЛОЖЬ) КАК ВЗ_Маршруты
//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|						ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура,
//	|						ДоступностьТоваровНаСкладах.Склад КАК Склад
//	|					ИЗ
//	|						РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах) КАК ВЗ_Номенклатура
//	|					ПО (ВЗ_Маршруты.Склад = ВЗ_Номенклатура.Склад
//	|							ИЛИ ВЗ_Маршруты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВЗ_НоменклатураМаршрутов
//	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВодителиПоМаршруту.СрезПоследних(&ДатаРаспределения, ) КАК ВодителиПоМаршрутуСрезПоследних
//	|				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВодителиПоМаршрутуСрезПоследних.Маршрут
//	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	//+++АК KIRN 2018.08.24  
//	|					МАКСИМУМ(ДокМаршЛист.Ссылка) КАК Рейс,
//	|					ДокМаршЛист.Маршрут КАК Маршрут,
//	|					ДокМаршЛист.Организация КАК Организация,
//	|					ДокМаршЛист.СтруктурноеПодразделение КАК СтруктурноеПодразделение
//	|				ИЗ
//	|					Документ.МаршрутныйЛист КАК ДокМаршЛист
//	|				ГДЕ
//	|					ДокМаршЛист.ПометкаУдаления = ЛОЖЬ
//	|					И ДокМаршЛист.Отгружено = ЛОЖЬ
//	|					И 
//	|					  (						
//	|					  		ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|						ИЛИ	ДокМаршЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|					  )	
//	|					И НАЧАЛОПЕРИОДА(ДокМаршЛист.Дата, ДЕНЬ) = &ДатаРаспределения
//	|				СГРУППИРОВАТЬ ПО
//	|					ДокМаршЛист.Маршрут,
//	|					ДокМаршЛист.Организация,
//	|					ДокМаршЛист.СтруктурноеПодразделение
//	|				) КАК ВЗ_Рейсы
//	|				ПО ВЗ_НоменклатураМаршрутов.Маршрут = ВЗ_Рейсы.Маршрут) КАК ВЗ_МаршрутыРейсы
//	|		ПО втИзменения.Номенклатура = ВЗ_МаршрутыРейсы.Номенклатура
//	|			И втИзменения.СтруктурнаяЕдиница = ВЗ_МаршрутыРейсы.ТорговаяТочка
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ВЗ_МаршрутыРейсы.Маршрут,
//	|	ВЗ_МаршрутыРейсы.МаршрутныйЛист,
//	|	втИзменения.Склад,
//	|	втИзменения.СтруктурнаяЕдиница,
//	|	втИзменения.РасходныйОрдер";
//	
//	Запрос.УстановитьПараметр("ДатаРаспределения",ДатаРаспределения);
//	Запрос.УстановитьПараметр("ОтборПоЗаданиям", ?(СписокЗаданий = Неопределено,Ложь,Истина));
//	Запрос.УстановитьПараметр("ОтборПоСкладу", ?(Склад = Неопределено,Ложь,Истина));
//	Запрос.УстановитьПараметр("СписокЗаданий",СписокЗаданий);
//	Запрос.УстановитьПараметр("Склад",Склад);
//	РезультатЗапроса = Запрос.ВыполнитьПакет();
//	ВсеРасходники = РезультатЗапроса[1].Выгрузить();
//	тзВыборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
//	
//	Выборка = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
//	
//	ВидПеревозкиНаТТ = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
//	
//	//+++АК sole 2018.06.19 ИП-00018944
//	тзТарифы = РегистрыСведений.СтоимостьУслугПоДоставкеТовараНаТТ.ПолучитьТЗТарифы(ДатаРаспределения); 
//	
//	СтруктураОтбора = Новый Структура();
//	//---АК sole 2018.06.19 ИП-00018944
//	
//	Пока Выборка.СледующийПоЗначениюПоля("Маршрут") Цикл
//		Пока Выборка.СледующийПоЗначениюПоля("МаршрутныйЛист") Цикл
//			ЕстьМаршрут = Истина;
//			Если НЕ ЗначениеЗаполнено(Выборка.МаршрутныйЛист) Тогда
//				Если ЗначениеЗаполнено(Выборка.Маршрут) ТОгда
//					//+++АК KIRN 2018.08.23  
//					МаршЛистОбъект = СкладыСервер.ПолучитьРейсПоМаршруту(Выборка, тзТарифы, ДатаРаспределения);
//					//---АК KIRN 
//				Иначе
//					ЕстьМаршрут = Ложь;
//				КонецЕСли;
//			Иначе
//				МаршЛистОбъект = Выборка.МаршрутныйЛист.ПолучитьОбъект();
//			КонецЕсли;
//			
//			//Если ЕстьМаршрут Тогда
//			//	МаршЛистОбъект.Заблокировать();
//			//КонецЕСли;
//			
//			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
//				Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
//					Пока Выборка.СледующийПоЗначениюПоля("РасходныйОрдер") Цикл
//						Если НЕ ЗначениеЗаполнено(Выборка.РасходныйОрдер) Тогда
//							РасхОрдерОбъект = ПолучитьРО(Выборка);
//							//мсСтрокиРО = ВсеРасходники.НайтиСтроки(Новый Структура("Склад, СтруктурнаяЕдиница", Выборка.Склад, Выборка.СтруктурнаяЕдиница));
//							//Если мсСтрокиРО.Количество()>0 ТОгда
//							//	РасхОрдерОбъект = мсСтрокиРО[0].Ссылка.ПолучитьОбъект();
//							//Иначе
//							//	РасхОрдерОбъект = Документы.РасходныйОрдерСклад.СоздатьДокумент();
//							//	ЗаполнитьШапкуРО(РасхОрдерОбъект,Выборка);
//							//КонецЕСли;
//						Иначе
//							РасхОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
//						КонецЕсли;
//						
//						//РасхОрдерОбъект.Заблокировать();
//						
//						Пока Выборка.Следующий() Цикл
//							СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Выборка.Номенклатура, Выборка.Характеристика, Выборка.ДатаПроизводства));
//							
//							Если СтрокиТовар.Количество() > 0 Тогда
//								СтрокаТовар = СтрокиТовар[0];
//							Иначе
//								СтрокаТовар = РасхОрдерОбъект.Товары.Добавить();
//							КонецЕсли;	
//							ЗаполнитьСтрокуРО(СтрокаТовар, Выборка);
//						КонецЦикла;
//						
//						
//						Если НЕ РасхОрдерОбъект.ЭтоНовый()
//							ИЛИ (РасхОрдерОбъект.Товары.Количество() > 0 И РасхОрдерОбъект.Модифицированность()) Тогда
//							РасхОрдерОбъект.Товары.Сортировать("Номенклатура");
//							//+++АК KIRN 2018.08.14 
//							РасхОрдерОбъект.ОбменДанными.Загрузка = Истина;
//							РасхОрдерОбъект.Проведен = истина;
//							попытка
//								РасхОрдерОбъект.Записать(РежимЗаписиДокумента.Запись);
//							исключение
//								СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,РасхОрдерОбъект.Ссылка,-1,ОписаниеОшибки(), ИСтина);
//							КонецПопытки;
//								
//							//РасхОрдерОбъект.Записать(?(РасхОрдерОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
//							//---АК KIRN 
//							
//							Если ЕстьМаршрут ТОгда
//								СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Найти(РасхОрдерОбъект.Ссылка, "Документ");
//								Если СтрокаРасхОрдер = Неопределено Тогда
//									СтрокаРасхОрдер = МаршЛистОбъект.РасходныеОрдера.Добавить();
//									СтрокаРасхОрдер.Документ = РасхОрдерОбъект.Ссылка;
//								КонецЕсли;
//							Иначе
//								ЗаписьЖурналаРегистрации("ЗаполнитьРОПоЗаданиям", УровеньЖурналаРегистрации.Ошибка,,,"Есть товары, без маршрута. Склад = "+Выборка.Склад+"; ТорговаяТочка = "+Выборка.СтруктурнаяЕдиница+"; Номенклатура = "+Выборка.Номенклатура+"; Характеристика = "+Выборка.Характеристика+"; РасходныйОрдер = "+РасхОрдерОбъект.Ссылка);
//							КонецЕсли;
//						КонецЕсли;
//					КонецЦикла; //ро
//				КонецЦикла; //тт
//			КонецЦикла;//склад
//			
//			Если ЕстьМаршрут Тогда
//				Если НЕ МаршЛистОбъект.ЭтоНовый()
//					ИЛИ (МаршЛистОбъект.РасходныеОрдера.Количество() > 0 И МаршЛистОбъект.Модифицированность()) Тогда
//					//+++АК KIRN 2018.08.14  
//					МаршЛистОбъект.ОбменДанными.Загрузка = Истина;
//					МаршЛистОбъект.Проведен = истина;
//					Попытка
//						МаршЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
//					исключение
//						СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,МаршЛистОбъект.Ссылка,-1,ОписаниеОшибки(), ИСтина);
//					КонецПопытки;
//						
//					//МаршЛистОбъект.Записать(?(МаршЛистОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
//					//---АК KIRN 
//				КонецЕсли;	
//			КонецЕСли;
//		КонецЦикла; //рейс
//	КонецЦикла;	//маршрут
//	
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	РасходныйОрдерСкладТовары.Номенклатура,
//	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
//	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
//	|	РасходныйОрдерСкладТовары.Характеристика,
//	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
//	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
//	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
//	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
//	|ПОМЕСТИТЬ втРасходники
//	|ИЗ
//	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
//	|ГДЕ
//	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	|	И НЕ РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен)
//	|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
//	|	И 
//	|		(
//	|				РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
//	|		 	ИЛИ РасходныйОрдерСкладТовары.Ссылка.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
//	|		)
//	//|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
//	|;
//	|
//	
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаданиеНаРазборкуШапка.Ссылка,
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) КАК Дата,
//	|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
//	|	ЗаданиеНаРазборкуТовары.Количество,
//	|	ЗаданиеНаРазборкуТовары.РасходныйОрдер,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
//	|	ЗаданиеНаРазборкуТовары.ДатаПроизводстваПред,
//	|	ЗаданиеНаРазборкуТовары.Собран,
//	|	ЗаданиеНаРазборкуТовары.НомерРаспределения,
//	|	ЗаданиеНаРазборкуШапка.Склад,
//	|	ЗаданиеНаРазборкуШапка.Номенклатура,
//	|	ЗаданиеНаРазборкуШапка.Характеристика,
//	|	ЗаданиеНаРазборкуШапка.Напечатан,
//	|	ЗаданиеНаРазборкуШапка.Сборщик
//	|ПОМЕСТИТЬ втЗадания
//	|ИЗ
//	|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборкуШапка
//	|		ПО ЗаданиеНаРазборкуТовары.Ссылка = ЗаданиеНаРазборкуШапка.Ссылка
//	|ГДЕ	
//	|	НАЧАЛОПЕРИОДА(ЗаданиеНаРазборкуШапка.Дата, ДЕНЬ) = &ДатаРаспределения
//	|	И Выбор когда &ОтборПоЗаданиям Тогда ЗаданиеНаРазборкуШапка.Ссылка В (&СписокЗаданий) Иначе Истина Конец
//	|	И ЗаданиеНаРазборкуТовары.РасходныйОрдер <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЗадания.Ссылка,
//	|	втЗадания.Дата,
//	|	втЗадания.СтруктурнаяЕдиница,
//	|	втЗадания.Количество,
//	|	втЗадания.ДатаПроизводства,
//	|	втЗадания.ДатаПроизводстваПред,
//	|	втЗадания.Собран,
//	|	втЗадания.НомерРаспределения,
//	|	втЗадания.Склад,
//	|	втЗадания.Номенклатура,
//	|	втЗадания.Характеристика,
//	|	втЗадания.Напечатан,
//	|	втЗадания.Сборщик,
//	|	втРасходники.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку,
//	|	втРасходники.Ссылка КАК РасходныйОрдер
//	|ИЗ
//	|	втРасходники КАК втРасходники
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадания КАК втЗадания
//	|		ПО втРасходники.ЗаданиеНаРазборку = втЗадания.Ссылка
//	|			И втРасходники.Номенклатура = втЗадания.Номенклатура
//	|			И втРасходники.Характеристика = втЗадания.Характеристика
//	|			И втРасходники.ДатаПроизводства = втЗадания.ДатаПроизводства
//	|			И втРасходники.СтруктурнаяЕдиница = втЗадания.СтруктурнаяЕдиница
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ЗаданиеНаРазборку";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаРазборку") Цикл
//		ОбъектЗаданиеНаРазборку = Выборка.ЗаданиеНаРазборку.ПолучитьОбъект();
//		пока Выборка.Следующий() Цикл
//			СтрокиЗадание = ОбъектЗаданиеНаРазборку.Товары.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, ДатаПроизводства", Выборка.СтруктурнаяЕдиница, Выборка.ДатаПроизводства));
//			Если СтрокиЗадание.Количество()>0 ТОгда
//				СтрокиЗадание[0].РасходныйОрдер = Выборка.РасходныйОрдер;
//				СтрокиЗадание[0].ДатаПроизводстваПред = СтрокиЗадание[0].ДатаПроизводства;
//			КонецЕСли;
//		КонецЦикла;
//		
//		Если ОбъектЗаданиеНаРазборку.Товары.Найти(ДОкументы.РасходныйОрдерСклад.ПустаяСсылка()) = Неопределено Тогда
//			ОбъектЗаданиеНаРазборку.Закрыто=Истина;
//			Если ОбъектЗаданиеНаРазборку.Подготовлен Тогда
//				ОбъектЗаданиеНаРазборку.ЗакрытоИОбновлено = Истина;
//			КонецЕСли;
//		КонецЕсли;
//		//+++АК KIRN 2018.08.14  
//		ОбъектЗаданиеНаРазборку.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
//		ОбъектЗаданиеНаРазборку.ОбменДанными.Загрузка = Истина;
//		ОбъектЗаданиеНаРазборку.Проведен = истина;
//		Попытка
//			ОбъектЗаданиеНаРазборку.Записать(РежимЗаписиДокумента.Запись);
//		Исключение
//			СкладыСервер.ЗаписатьЛогЗагрузкиДокументовПоРаспределению(Склад,ОбъектЗаданиеНаРазборку.Ссылка,-1,ОписаниеОшибки(), ИСтина);
//		КонецПопытки;
//		//ОбъектЗаданиеНаРазборку.Записать(?(ОбъектЗаданиеНаРазборку.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));								
//		//---АК KIRN 
//	КонецЦИкла;
//	
//КонецПроцедуры
