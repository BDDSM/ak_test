
//Процедура ВыгрузитьДанныеВоФронтолПользователи(РабочееМесто) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ККМ.Ссылка,
//				   |	ККМ.КаталогВыгрузкиВоФронтол
//				   |ИЗ
//				   |	Справочник.РабочиеМеста КАК ККМ
//				   |ГДЕ
//				   |	НЕ ККМ.ПометкаУдаления";
//				   
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ФайлВыгрузки = ПолучитьФайлВыгрузкиПользователи();
//	
//	ФайлФлаг = Новый ТекстовыйДокумент;
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Если НЕ ЗначениеЗаполнено(Выборка.КаталогВыгрузкиВоФронтол) Тогда
//			Продолжить;
//		КонецЕсли;	
//		
//		Попытка
//			ФайлВыгрузки.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
//		Исключение
//			//Результат = мОшибкаВыгрузкиТоваров;
//		КонецПопытки;
//		
//		Попытка
//			ФайлФлаг.Записать(мКаталогВыгрузкиВоФронтол + "\import.upd");
//		Исключение
//			
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

Процедура ВыгрузитьДанныеВоФронтол_(ТабКВыгрузке) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочиеМеста", ТабКВыгрузке.Выгрузитьколонку("РабочееМесто"));
	Запрос.УстановитьПараметр("ТекущаяДата"	, НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ККМ.Ссылка,
	|	ККМ.КаталогВыгрузкиВоФронтол,
	|	ККМ.СтруктурнаяЕдиница,
	//+++АК mika 2018.05.24 ИП-00018792 (Микромаркет)
	|	ККМ.СтруктурнаяЕдиница.ТипРозничнойТочки КАК ТипРозничнойТочки
	//---АК mika
	|ИЗ
	|	Справочник.РабочиеМеста КАК ККМ
	|ГДЕ
	|	ККМ.Ссылка В(&РабочиеМеста)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАкции.Ссылка КАК Товар,
	|	НоменклатураАкции.ПриПокупкеШтук,
	|	ВЫБОР
	|		КОГДА НоменклатураАкции.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте)
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена - НоменклатураАкции.ДействуетЦена_Скидка * ЦеныНоменклатурыСрезПоследних.Цена / 100 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ НоменклатураАкции.ДействуетЦена_Скидка
	|	КОНЕЦ КАК Цена,
	|	НоменклатураАкции.ТипСкидки,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	НоменклатураАкции.Ссылка.id_tov
	|ИЗ
	|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (НоменклатураАкции.ДействуетВМагазине = СтруктурныеЕдиницы.Ссылка
	|				ИЛИ НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураАкции.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|	И НоменклатураАкции.ДатаНачала <= &ТекущаяДата
	|	И НоменклатураАкции.ДатаОкончания >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.id_tov,
	|	СпрНоменклатура.Фишка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО (ШтриховыеКоды.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураУсловияДляПодарка.Ссылка КАК Товар,
	|	НоменклатураУсловияДляПодарка.ПриСуммеЧекаОт,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	НоменклатураУсловияДляПодарка.Ссылка.id_tov,
	|	НоменклатураУсловияДляПодарка.МожноПодаритьШтук
	|ИЗ
	|	Справочник.Номенклатура.УсловияДляПодарка КАК НоменклатураУсловияДляПодарка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (НоменклатураУсловияДляПодарка.ДействуетВМагазине = СтруктурныеЕдиницы.Ссылка
	|				ИЛИ НоменклатураУсловияДляПодарка.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|	И НоменклатураУсловияДляПодарка.ДатаНачала <= &ТекущаяДата
	|	И НоменклатураУсловияДляПодарка.ДатаОкончания >= &ТекущаяДата";
				   
	Результаты = Запрос.ВыполнитьПакет();				   
	Выборка 	= Результаты[0].Выбрать();
	ТабСкидки 	= Результаты[1].Выгрузить();
	ТабФишки 	= Результаты[2].Выгрузить();
	ТабПодарки 	= Результаты[3].Выгрузить();
	
	ФайлВыгрузки = ПолучитьФайлВыгрузки(Истина);
	ФайлВыгрузкиБезПользователей = ПолучитьФайлВыгрузки();
	//+++АК BELN 2018.12.06 ИП-00020532.01 
	ФайлВыгрузкиБезПользователейРУ = ПолучитьФайлВыгрузкиРеализуемаяУслуга();
	ФайлВыгрузкиРУ = ПолучитьФайлВыгрузкиРеализуемаяУслуга(Истина);
	//---АК BELN 2018.12.06   	
	ФайлФлаг = Новый ТекстовыйДокумент;
	
	СтрокаОписаниеТовары 	= "";
	СтрокаОписаниеФишки 	= "";
	ПервыйПроход = Истина;
	Для Каждого СтрокаФишка Из ТабФишки Цикл
		СтрокаФишкаТекст 		= СтрЗаменить(СокрЛП(СтрокаФишка.Фишка), ",", "~");
		СтрокаФишкаТекст 		= СтрЗаменить(СтрокаФишкаТекст, Символы.ПС, " ");
		СтрокаОписаниеТовары 	= СтрокаОписаниеТовары 	+ ?(ПервыйПроход, "", ",") + Формат(СтрокаФишка.id_tov, "ЧН=; ЧГ=0");
		СтрокаОписаниеФишки 	= СтрокаОписаниеФишки 	+ ?(ПервыйПроход, "", ",") + СтрокаФишкаТекст;
		ПервыйПроход = Ложь;
	КонецЦикла;	
	ФайлФишки = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(СтрокаОписаниеФишки) Тогда
		ФайлФишки.ДобавитьСтроку(СтрокаОписаниеТовары + "|" + СтрокаОписаниеФишки);
	Иначе
		ФайлФишки.ДобавитьСтроку("");
	КонецЕсли;
	
	//файл оценок по товарам
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаОценки = "";
	ТекстЗапроса = "SELECT [id_tov] id_tov
					|,isnull(id_kontr, 0) id_kontr  --если NULL, то общая оценка по товару.
					|,[колво] колво
					|,[reiting] reiting
					|FROM [Reports].[dbo].[reiting_tov]";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаОценки = СтрокаОценки + ?(ЗначениеЗаполнено(СтрокаОценки), ",", "") + Формат(Rs.Fields("id_tov").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("id_kontr").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("колво").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("reiting").Value, "ЧРД=.; ЧН=; ЧГ=0");
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ФайлОценки = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(СтрокаОценки) Тогда
		ФайлОценки.ДобавитьСтроку(СтрокаОценки);
	Иначе
		ФайлОценки.ДобавитьСтроку("");
	КонецЕсли;
	
	//
	Пока Выборка.Следующий() Цикл
		
		мКаталогВыгрузкиВоФронтол = Выборка.КаталогВыгрузкиВоФронтол;
		Если НЕ ЗначениеЗаполнено(мКаталогВыгрузкиВоФронтол) Тогда
			Продолжить;
		КонецЕсли;
		мКаталогВыгрузкиВоФронтол = мКаталогВыгрузкиВоФронтол + ?(Прав(мКаталогВыгрузкиВоФронтол, 1) <> "\", "\", "");
		
		СтрокаНастройка = ТабКВыгрузке.Найти(Выборка.Ссылка, "РабочееМесто");
		//+++АК mika 2018.05.25 ИП-00018792 (Микромаркет)
		//Если СтрокаНастройка.СПользователями Тогда
		Если СтрокаНастройка.СПользователями И Выборка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Микромаркет Тогда
		//---АК mika
			Попытка
				//+++АК BELN 2018.12.06 ИП-00020532.01 
				Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
					ФайлВыгрузкиРУ.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				Иначе	
					ФайлВыгрузки.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				КонецЕсли; 
				//---АК BELN 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Попытка
				//+++АК BELN 2018.12.06 ИП-00020532.01 
				Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
					ФайлВыгрузкиБезПользователейРУ.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				Иначе	
					ФайлВыгрузкиБезПользователей.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				КонецЕсли; 
				//---АК BELN 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
		
		СтрокиСкидок = ТабСкидки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница));
		СтрокаОписаниеТовары 	= "";
		СтрокаОписаниеКоличество = "";
		СтрокаОписаниеЦены 		= "";
		СтрокаОписаниеТипы 		= "";
		Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
			СтрокаОписаниеТовары = СтрокаОписаниеТовары + ?(ПустаяСтрока(СтрокаОписаниеТовары), "", ",") + Формат(СтрокаСкидки.id_tov, "ЧН=; ЧГ=0");
			Если СтрокаСкидки.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук Тогда
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "0";
			ИначеЕсли СтрокаСкидки.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "1";
			Иначе	
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "99";
			КонецЕсли;
			СтрокаОписаниеЦены = СтрокаОписаниеЦены + ?(ПустаяСтрока(СтрокаОписаниеЦены), "", ",") + Формат(СтрокаСкидки.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			СтрокаОписаниеКоличество = СтрокаОписаниеКоличество + ?(ПустаяСтрока(СтрокаОписаниеКоличество), "", ",") + Формат(СтрокаСкидки.ПриПокупкеШтук, "ЧРД=.; ЧН=; ЧГ=0");
		КонецЦикла;
		
		СтрокиСкидок = ТабПодарки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница));
		Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
			СтрокаОписаниеТовары 	= СтрокаОписаниеТовары + ?(ПустаяСтрока(СтрокаОписаниеТовары), "", ",") + Формат(СтрокаСкидки.id_tov, "ЧН=; ЧГ=0");
			СтрокаОписаниеТипы 		= СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "-1";
			СтрокаОписаниеЦены 		= СтрокаОписаниеЦены + ?(ПустаяСтрока(СтрокаОписаниеЦены), "", ",") + Формат(СтрокаСкидки.ПриСуммеЧекаОт, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			СтрокаОписаниеКоличество = СтрокаОписаниеКоличество + ?(ПустаяСтрока(СтрокаОписаниеКоличество), "", ",") + Формат(СтрокаСкидки.МожноПодаритьШтук, "ЧРД=.; ЧН=; ЧГ=0");
		КонецЦикла;
		
		ФайлСкидок = Новый ТекстовыйДокумент;
		Если ЗначениеЗаполнено(СтрокаОписаниеТовары) Тогда
			ФайлСкидок.ДобавитьСтроку(СтрокаОписаниеТовары + "|" + СтрокаОписаниеКоличество + "|" + СтрокаОписаниеЦены + "|" + СтрокаОписаниеТипы);
		Иначе
			ФайлСкидок.ДобавитьСтроку("");
		КонецЕсли;
		Попытка
			ФайлСкидок.Записать(мКаталогВыгрузкиВоФронтол + "disc.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ФайлФишки.Записать(мКаталогВыгрузкиВоФронтол + "feature.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ФайлОценки.Записать(мКаталогВыгрузкиВоФронтол + "ratings.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ФайлФлаг.Записать(мКаталогВыгрузкиВоФронтол + "import.upd");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПоПользователям(СтруктурнаяЕдиница, мРазделитель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата() - 3*86400));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата() + 3*86400));
	Запрос.УстановитьПараметр("ТорговаяТочка", СтруктурнаяЕдиница);
	Запрос.Текст =
				"ВЫБРАТЬ
				|	ВЗ_Полный.СотрудникКод КАК Код,
				|	ВЗ_Полный.ТорговаяТочка КАК ТорговаяТочка,
				|	ВЗ_Полный.Наименование,
				|	ВЗ_Полный.Пароль,
				|	МИНИМУМ(ВЫБОР
				|			КОГДА ВЗ_Полный.Старший
				|				ТОГДА ВЫБОР
				|						КОГДА ЕСТЬNULL(ВЗ_Полный.РольНаКассе, 4) < 3
				|								И ВЗ_Полный.РольНаКассе <> 0
				|							ТОГДА ВЗ_Полный.РольНаКассе
				|						ИНАЧЕ 3
				|					КОНЕЦ
				|			КОГДА ЕСТЬNULL(ВЗ_Полный.РольНаКассе, 0) = 0
				|				ТОГДА 4
				|			ИНАЧЕ ВЗ_Полный.РольНаКассе
				|		КОНЕЦ) КАК РольНаКассе
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЗ_Запрос.СотрудникКод КАК СотрудникКод,
				|		ВЗ_Запрос.ТорговаяТочка КАК ТорговаяТочка,
				|		ПерсоналККМ.Наименование КАК Наименование,
				|		ПерсоналККМ.Пароль КАК Пароль,
				|		ВЗ_Запрос.Старший КАК Старший,
				|		ПерсоналККМ.РольНаКассе КАК РольНаКассе
				|	ИЗ
				|		(ВЫБРАТЬ
				|			ТабельРаботыПродавцов.Сотрудник.Код КАК СотрудникКод,
				|			ТабельРаботыПродавцов.ТорговаяТочка КАК ТорговаяТочка,
				|			ВЫБОР
				|				КОГДА ТабельРаботыПродавцов.СвойствоПродавца В (2, 6)
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ КАК Старший
				|		ИЗ
				|			РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
				|		ГДЕ
				|			ТабельРаботыПродавцов.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ТабельРаботыПродавцов.Сотрудник.Код,
				|			ТабельРаботыПродавцов.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			РегистрСведений.ТабельРаботыВнештатныхСотрудников КАК ТабельРаботыПродавцов
				|		ГДЕ
				|			ТабельРаботыПродавцов.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ТабельРаботыПродавцов.Сотрудник.Код,
				|			ТабельРаботыПродавцов.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыПродавцов
				|		ГДЕ
				|			ТабельРаботыПродавцов.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ТабельРаботыПродавцов.Сотрудник.Код,
				|			ТабельРаботыПродавцов.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыПродавцов
				|		ГДЕ
				|			ТабельРаботыПродавцов.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ТабельРаботыПродавцов.Сотрудник.Код,
				|			ТабельРаботыПродавцов.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПродавцов
				|		ГДЕ
				|			ТабельРаботыПродавцов.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ТабельРаботыУборщиц.Сотрудник.Код,
				|			ТабельРаботыУборщиц.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			РегистрСведений.ТабельРаботыУборщиц КАК ТабельРаботыУборщиц
				|		ГДЕ
				|			ТабельРаботыУборщиц.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ДокТаб.Продавец.Код,
				|			ДокТаб.Ссылка.ТорговаяТочка,
				|			ВЫБОР
				|				КОГДА ДокТаб.Пч = 2
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ
				|		ИЗ
				|			Документ.ЛистУчета.Продавцы КАК ДокТаб
				|		ГДЕ
				|			ДокТаб.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ДокТаб.Промоутер.Код,
				|			ДокТаб.Ссылка.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			Документ.ЛистУчета.Промоутеры КАК ДокТаб
				|		ГДЕ
				|			ДокТаб.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ДокТаб.Кассир.Код,
				|			ДокТаб.Ссылка.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			Документ.ЛистУчета.Кассиры КАК ДокТаб
				|		ГДЕ
				|			ДокТаб.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ДокТаб.ФизЛицо.Код,
				|			ДокТаб.Ссылка.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			Документ.ЛистУчета.Грузчики КАК ДокТаб
				|		ГДЕ
				|			ДокТаб.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			ДокТаб.ФизЛицо.Код,
				|			ДокТаб.Ссылка.ТорговаяТочка,
				|			ЛОЖЬ
				|		ИЗ
				|			Документ.ЛистУчета.Уборщицы КАК ДокТаб
				|		ГДЕ
				|			ДокТаб.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон) КАК ВЗ_Запрос
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПерсоналККМ КАК ПерсоналККМ
				|			ПО ВЗ_Запрос.СотрудникКод = ПерсоналККМ.Код
				|	ГДЕ
				|		(ВЗ_Запрос.ТорговаяТочка = &ТорговаяТочка
				|				ИЛИ &ТорговаяТочка = НЕОПРЕДЕЛЕНО)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПерсоналПринудительноВыгружатьНаФронтол.ПерсоналККМ.Код,
				|		ПерсоналПринудительноВыгружатьНаФронтол.Магазин,
				|		ПерсоналПринудительноВыгружатьНаФронтол.ПерсоналККМ.Наименование,
				|		ПерсоналПринудительноВыгружатьНаФронтол.ПерсоналККМ.Пароль,
				|		ЛОЖЬ,
				|		ПерсоналПринудительноВыгружатьНаФронтол.ПерсоналККМ.РольНаКассе
				|	ИЗ
				|		РегистрСведений.ПерсоналПринудительноВыгружатьНаФронтол КАК ПерсоналПринудительноВыгружатьНаФронтол
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПерсоналККМ.Код,
				|		СтруктурныеЕдиницы.Ссылка,
				|		ПерсоналККМ.Наименование,
				|		ПерсоналККМ.Пароль,
				|		ЛОЖЬ,
				|		ПерсоналККМ.РольНаКассе
				|	ИЗ
				|		Справочник.ПерсоналККМ КАК ПерсоналККМ
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
				|			ПО (ПерсоналККМ.ВыгружатьНаФронтолПринудительно = ИСТИНА)
				|	ГДЕ
				|		СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)) КАК ВЗ_Полный
				|
				|СГРУППИРОВАТЬ ПО
				|	ВЗ_Полный.СотрудникКод,
				|	ВЗ_Полный.ТорговаяТочка,
				|	ВЗ_Полный.Наименование,
				|	ВЗ_Полный.Пароль,
				|	ВЗ_Полный.РольНаКассе
				|
				|УПОРЯДОЧИТЬ ПО
				|	ТорговаяТочка";
	
	ТабПользователей = Новый ТаблицаЗначений();
	ТабПользователей.Колонки.Добавить("ТорговаяТочка");
	ТабПользователей.Колонки.Добавить("МассивСтрок");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТорговаяТочка") Цикл
		СтрокаДоб = ТабПользователей.Добавить();
		СтрокаДоб.ТорговаяТочка = Выборка.ТорговаяТочка;
		
		МассивСтроки = Новый Массив();
		МассивСтроки.Добавить(Формат(1, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + ";Администратор БД;Администратор БД;1;000000;");
		
		Пока Выборка.Следующий() Цикл
			лКодПользователя = ?(ЗначениеЗаполнено(Выборка.Код), Формат(Число(Выборка.Код), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0"), "0");

			МассивСтроки.Добавить(лКодПользователя + мРазделитель
					+ Выборка.Наименование + мРазделитель
					+ Выборка.Наименование + мРазделитель
					+ Формат(Выборка.РольНаКассе, "ЧГ=0") + мРазделитель
					+ "1000000000" + мРазделитель
					+ Выборка.Пароль);
			
		КонецЦикла;
		СтрокаДоб.МассивСтрок = МассивСтроки;
		
	КонецЦикла;	
	Возврат ТабПользователей;
	
КонецФункции	

Процедура ВыгрузитьДанныеВоФронтол(ТабКВыгрузке, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	Если СтруктурнаяЕдиница = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПерсоналПринудительноВыгружатьНаФронтол.Магазин,
		               |	ПерсоналПринудительноВыгружатьНаФронтол.ПерсоналККМ
		               |ИЗ
		               |	РегистрСведений.ПерсоналПринудительноВыгружатьНаФронтол КАК ПерсоналПринудительноВыгружатьНаФронтол
		               |ГДЕ
		               |	ПерсоналПринудительноВыгружатьНаФронтол.ДатаДобавления <= &ДатаДобавления";
		Запрос.УстановитьПараметр("ДатаДобавления", ДобавитьМесяц(ТекущаяДата(), -3));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ПерсоналПринудительноВыгружатьНаФронтол.СоздатьНаборЗаписей();
			Набор.Отбор.Магазин.Установить(Выборка.Магазин);
			Набор.Отбор.ПерсоналККМ.Установить(Выборка.ПерсоналККМ);
			Набор.Записать();
		КонецЦикла;	
	КонецЕсли;	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочиеМеста", ТабКВыгрузке.Выгрузитьколонку("РабочееМесто"));
	Запрос.УстановитьПараметр("ТекущаяДата"	, НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ККМ.Ссылка,
	|	ККМ.КаталогВыгрузкиВоФронтол,
	|	ККМ.СтруктурнаяЕдиница,
	//+++АК mika 2018.05.24 ИП-00018792 (Микромаркет)
	|	ККМ.СтруктурнаяЕдиница.ТипРозничнойТочки КАК ТипРозничнойТочки
	//---АК mika
	|ИЗ
	|	Справочник.РабочиеМеста КАК ККМ
	|ГДЕ
	|	ККМ.Ссылка В(&РабочиеМеста)
	|	И (ККМ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|			ИЛИ &СтруктурнаяЕдиница = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАкции.Ссылка КАК Товар,
	|	НоменклатураАкции.ПриПокупкеШтук,
	|	ВЫБОР
	|		КОГДА НоменклатураАкции.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте)
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена - НоменклатураАкции.ДействуетЦена_Скидка * ЦеныНоменклатурыСрезПоследних.Цена / 100 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ НоменклатураАкции.ДействуетЦена_Скидка
	|	КОНЕЦ КАК Цена,
	|	НоменклатураАкции.ТипСкидки,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	НоменклатураАкции.Ссылка.id_tov
	|ИЗ
	|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (НоменклатураАкции.ДействуетВМагазине = СтруктурныеЕдиницы.Ссылка
	|				ИЛИ НоменклатураАкции.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					И ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураАкции.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|	И НоменклатураАкции.ДатаНачала <= &ТекущаяДата
	|	И НоменклатураАкции.ДатаОкончания >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.id_tov,
	|	СпрНоменклатура.Фишка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО (ШтриховыеКоды.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураУсловияДляПодарка.Ссылка КАК Товар,
	|	НоменклатураУсловияДляПодарка.ПриСуммеЧекаОт,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	НоменклатураУсловияДляПодарка.Ссылка.id_tov,
	|	НоменклатураУсловияДляПодарка.МожноПодаритьШтук
	|ИЗ
	|	Справочник.Номенклатура.УсловияДляПодарка КАК НоменклатураУсловияДляПодарка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (НоменклатураУсловияДляПодарка.ДействуетВМагазине = СтруктурныеЕдиницы.Ссылка
	|				ИЛИ НоменклатураУсловияДляПодарка.ДействуетВМагазине = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	|	И НоменклатураУсловияДляПодарка.ДатаНачала <= &ТекущаяДата
	|	И НоменклатураУсловияДляПодарка.ДатаОкончания >= &ТекущаяДата";
				   
	Результаты = Запрос.ВыполнитьПакет();				   
	Выборка 	= Результаты[0].Выбрать();
	ТабСкидки 	= Результаты[1].Выгрузить();
	ТабФишки 	= Результаты[2].Выгрузить();
	ТабПодарки 	= Результаты[3].Выгрузить();
	
	//ФайлВыгрузки = ПолучитьФайлВыгрузки(Истина);
	ФайлВыгрузкиБезПользователей = ПолучитьФайлВыгрузки();
	//+++АК BELN 2018.12.06 ИП-00020532.01 
	ФайлВыгрузкиБезПользователейРУ = ПолучитьФайлВыгрузкиРеализуемаяУслуга();
	//---АК BELN 2018.12.06    
	ФайлФлаг = Новый ТекстовыйДокумент;
	
	СтрокаОписаниеТовары 	= "";
	СтрокаОписаниеФишки 	= "";
	ПервыйПроход = Истина;
	Для Каждого СтрокаФишка Из ТабФишки Цикл
		СтрокаФишкаТекст 		= СтрЗаменить(СокрЛП(СтрокаФишка.Фишка), ",", "~");
		СтрокаФишкаТекст 		= СтрЗаменить(СтрокаФишкаТекст, Символы.ПС, " ");
		СтрокаОписаниеТовары 	= СтрокаОписаниеТовары 	+ ?(ПервыйПроход, "", ",") + Формат(СтрокаФишка.id_tov, "ЧН=; ЧГ=0");
		СтрокаОписаниеФишки 	= СтрокаОписаниеФишки 	+ ?(ПервыйПроход, "", ",") + СтрокаФишкаТекст;
		ПервыйПроход = Ложь;
	КонецЦикла;	
	ФайлФишки = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(СтрокаОписаниеФишки) Тогда
		ФайлФишки.ДобавитьСтроку(СтрокаОписаниеТовары + "|" + СтрокаОписаниеФишки);
	Иначе
		ФайлФишки.ДобавитьСтроку("");
	КонецЕсли;
	
	//файл оценок по товарам
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	СтрокаОценки = "";
	ТекстЗапроса = "SELECT [id_tov] id_tov
					|,isnull(id_kontr, 0) id_kontr  --если NULL, то общая оценка по товару.
					|,[колво] колво
					|,[reiting] reiting
					|FROM [Reports].[dbo].[reiting_tov]";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаОценки = СтрокаОценки + ?(ЗначениеЗаполнено(СтрокаОценки), ",", "") + Формат(Rs.Fields("id_tov").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("id_kontr").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("колво").Value, "ЧН=; ЧГ=0")
				+ "," + Формат(Rs.Fields("reiting").Value, "ЧРД=.; ЧН=; ЧГ=0");
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ФайлОценки = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(СтрокаОценки) Тогда
		ФайлОценки.ДобавитьСтроку(СтрокаОценки);
	Иначе
		ФайлОценки.ДобавитьСтроку("");
	КонецЕсли;
	
	ТабПользователи = ПолучитьТаблицуПоПользователям(СтруктурнаяЕдиница, ";");
	
	//+++АК SHEP 2018.10.07 ИП-00019906
	ЗапросАдреса = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ПОМЕСТИТЬ СтруктурныеЕдиницы
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|	И &СтруктурнаяЕдиница В (СтруктурныеЕдиницы.Ссылка, НЕОПРЕДЕЛЕНО)
		|	И СтруктурныеЕдиницы.ТипРозничнойТочки В (ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин), ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Микромаркет), ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПространствоВкуса))
		|	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|	ПривязкаТелефоновСрезПоследних.Номер КАК Номер
		|ПОМЕСТИТЬ ТелефонныеНомераПредв
		|ИЗ
		|	РегистрСведений.ПривязкаТелефонов.СрезПоследних(, НЕ Номер.Заблокирован) КАК ПривязкаТелефоновСрезПоследних
		|ГДЕ
		|	ПривязкаТелефоновСрезПоследних.Привязка ССЫЛКА Справочник.СтруктурныеЕдиницы
		|	И ПривязкаТелефоновСрезПоследних.Привязка В
		|			(ВЫБРАТЬ
		|				СтруктурныеЕдиницы.Ссылка
		|			ИЗ
		|				СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПривязкаТелефоновСрезПоследних.Привязка,
		|	ПривязкаТелефоновСрезПоследних.Назначение КАК Назначение,
		|	ПривязкаТелефоновСрезПоследних.Номер.Код КАК ТелефонныйНомер1,
		|	ВЫБОР
		|		КОГДА ОсновныеТелефоны.Телефон ЕСТЬ NULL
		|				И НЕ ВложенныйЗапрос.Номеров = 1
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Основной
		|ПОМЕСТИТЬ ТелефонныеНомераОсновные
		|ИЗ
		|	ТелефонныеНомераПредв КАК ПривязкаТелефоновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеТелефоны КАК ОсновныеТелефоны
		|		ПО ПривязкаТелефоновСрезПоследних.Привязка = ОсновныеТелефоны.Привязка
		|			И ПривязкаТелефоновСрезПоследних.Назначение = ОсновныеТелефоны.Назначение
		|			И ПривязкаТелефоновСрезПоследних.Номер = ОсновныеТелефоны.Телефон
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТелефонныеНомераПредв.Привязка КАК Привязка,
		|			ТелефонныеНомераПредв.Назначение КАК Назначение,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонныеНомераПредв.Номер) КАК Номеров
		|		ИЗ
		|			ТелефонныеНомераПредв КАК ТелефонныеНомераПредв
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТелефонныеНомераПредв.Привязка,
		|			ТелефонныеНомераПредв.Назначение) КАК ВложенныйЗапрос
		|		ПО ПривязкаТелефоновСрезПоследних.Привязка = ВложенныйЗапрос.Привязка
		|			И ПривязкаТелефоновСрезПоследних.Назначение = ВложенныйЗапрос.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТелефонныеНомераПредв
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТелефонныеНомераОсновные.Привязка,
		|	МАКСИМУМ(ТелефонныеНомераОсновные.Основной) КАК Основной
		|ПОМЕСТИТЬ ТелефонныеНомераМакс
		|ИЗ
		|	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
		|
		|СГРУППИРОВАТЬ ПО
		|	ТелефонныеНомераОсновные.Привязка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТелефонныеНомераОсновные.Привязка,
		|	МАКСИМУМ(ТелефонныеНомераОсновные.ТелефонныйНомер1) КАК ТелефонныйНомер1
		|ПОМЕСТИТЬ ТелефонныеНомера
		|ИЗ
		|	ТелефонныеНомераОсновные КАК ТелефонныеНомераОсновные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТелефонныеНомераМакс КАК ТелефонныеНомераМакс
		|		ПО ТелефонныеНомераОсновные.Привязка = ТелефонныеНомераМакс.Привязка
		|			И ТелефонныеНомераОсновные.Основной = ТелефонныеНомераМакс.Основной
		|
		|СГРУППИРОВАТЬ ПО
		|	ТелефонныеНомераОсновные.Привязка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТелефонныеНомераОсновные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТелефонныеНомераМакс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
		|	ЕСТЬNULL(ТелефонныеНомера.ТелефонныйНомер1, """") КАК ТелефонныйНомер,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Адрес
		|ИЗ
		|	СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефонныеНомера КАК ТелефонныеНомера
		|		ПО СтруктурныеЕдиницы.Ссылка = ТелефонныеНомера.Привязка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО СтруктурныеЕдиницы.Ссылка = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы))");
	ЗапросАдреса.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	ТаблицаАдресов = ЗапросАдреса.Выполнить().Выгрузить();
	//---АК SHEP 2018.10.07
	
	//
	Пока Выборка.Следующий() Цикл
		
		мКаталогВыгрузкиВоФронтол = Выборка.КаталогВыгрузкиВоФронтол;
		Если НЕ ЗначениеЗаполнено(мКаталогВыгрузкиВоФронтол) Тогда
			Продолжить;
		КонецЕсли;
		мКаталогВыгрузкиВоФронтол = мКаталогВыгрузкиВоФронтол + ?(Прав(мКаталогВыгрузкиВоФронтол, 1) <> "\", "\", "");
		
		СтрокаНастройка = ТабКВыгрузке.Найти(Выборка.Ссылка, "РабочееМесто");
		//+++АК mika 2018.05.25 ИП-00018792 (Микромаркет)
		//Если СтрокаНастройка.СПользователями Тогда
		Если СтрокаНастройка.СПользователями И Выборка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Микромаркет Тогда
		//---АК mika
			ФайлСПользователями = Новый ТекстовыйДокумент();
			//+++АК BELN 2018.12.06 ИП-00020532.01 
			Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
				ТекстСообщения=ФайлВыгрузкиБезПользователейРУ.ПолучитьТекст();
			Иначе	
				ТекстСообщения=ФайлВыгрузкиБезПользователей.ПолучитьТекст();
			КонецЕсли; 
			//---АК BELN 
			ФайлСПользователями.УстановитьТекст(ТекстСообщения);
			
			ФайлСПользователями.ДобавитьСтроку("// Персонал");
			ФайлСПользователями.ДобавитьСтроку("$$$DELETEALLUSERS");
			ФайлСПользователями.ДобавитьСтроку("$$$ADDUSERS");
			
			СтрокаТабПользователи = ТабПользователи.Найти(Выборка.СтруктурнаяЕдиница, "ТорговаяТочка");
			Если СтрокаТабПользователи <> Неопределено Тогда
				Для Каждого ЭлементСтрока Из СтрокаТабПользователи.МассивСтрок Цикл
					ФайлСПользователями.ДобавитьСтроку(ЭлементСтрока);
				КонецЦикла;	
			КонецЕсли;	
			
			Попытка
				ФайлСПользователями.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Попытка
				//+++АК BELN 2018.12.06 ИП-00020532.01 
				Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.ПространствоВкуса Тогда
					ФайлВыгрузкиБезПользователейРУ.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				Иначе	
					ФайлВыгрузкиБезПользователей.Записать(мКаталогВыгрузкиВоФронтол + "import.txt", КодировкаТекста.ANSI);
				КонецЕсли; 
				//---АК BELN 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
		
		СтрокиСкидок = ТабСкидки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница));
		СтрокаОписаниеТовары 	= "";
		СтрокаОписаниеКоличество = "";
		СтрокаОписаниеЦены 		= "";
		СтрокаОписаниеТипы 		= "";
		Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
			СтрокаОписаниеТовары = СтрокаОписаниеТовары + ?(ПустаяСтрока(СтрокаОписаниеТовары), "", ",") + Формат(СтрокаСкидки.id_tov, "ЧН=; ЧГ=0");
			Если СтрокаСкидки.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.ПриПокупкеНесколькихШтук Тогда
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "0";
			ИначеЕсли СтрокаСкидки.ТипСкидки = Перечисления.ТипыАкцийПоТоварам.СкидкаПоБонуснойКарте Тогда
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "1";
			Иначе	
				СтрокаОписаниеТипы = СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "99";
			КонецЕсли;
			СтрокаОписаниеЦены = СтрокаОписаниеЦены + ?(ПустаяСтрока(СтрокаОписаниеЦены), "", ",") + Формат(СтрокаСкидки.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			СтрокаОписаниеКоличество = СтрокаОписаниеКоличество + ?(ПустаяСтрока(СтрокаОписаниеКоличество), "", ",") + Формат(СтрокаСкидки.ПриПокупкеШтук, "ЧРД=.; ЧН=; ЧГ=0");
		КонецЦикла;
		
		СтрокиСкидок = ТабПодарки.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница));
		Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
			СтрокаОписаниеТовары 	= СтрокаОписаниеТовары + ?(ПустаяСтрока(СтрокаОписаниеТовары), "", ",") + Формат(СтрокаСкидки.id_tov, "ЧН=; ЧГ=0");
			СтрокаОписаниеТипы 		= СтрокаОписаниеТипы + ?(ПустаяСтрока(СтрокаОписаниеТипы), "", ",") + "-1";
			СтрокаОписаниеЦены 		= СтрокаОписаниеЦены + ?(ПустаяСтрока(СтрокаОписаниеЦены), "", ",") + Формат(СтрокаСкидки.ПриСуммеЧекаОт, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			СтрокаОписаниеКоличество = СтрокаОписаниеКоличество + ?(ПустаяСтрока(СтрокаОписаниеКоличество), "", ",") + Формат(СтрокаСкидки.МожноПодаритьШтук, "ЧРД=.; ЧН=; ЧГ=0");
		КонецЦикла;
		
		ФайлСкидок = Новый ТекстовыйДокумент;
		Если ЗначениеЗаполнено(СтрокаОписаниеТовары) Тогда
			ФайлСкидок.ДобавитьСтроку(СтрокаОписаниеТовары + "|" + СтрокаОписаниеКоличество + "|" + СтрокаОписаниеЦены + "|" + СтрокаОписаниеТипы);
		Иначе
			ФайлСкидок.ДобавитьСтроку("");
		КонецЕсли;
		Попытка
			ФайлСкидок.Записать(мКаталогВыгрузкиВоФронтол + "disc.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ФайлФишки.Записать(мКаталогВыгрузкиВоФронтол + "feature.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ФайлОценки.Записать(мКаталогВыгрузкиВоФронтол + "ratings.txt", КодировкаТекста.ANSI)
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		//+++АК SHEP 2018.10.07 ИП-00019906
		// Дмитрий Лаврик, [25.09.18 11:50] Смотрим есть/нет файл с адресом и проверяем что в нем. Если нет или не соответствует - грузим. иначе нет
		ФайлАдресов = Новый ТекстовыйДокумент;
		ИмяФайлаАдресов = мКаталогВыгрузкиВоФронтол + "addr.txt";
		ФайлСАдресами = Новый Файл(ИмяФайлаАдресов);
		Если ФайлСАдресами.Существует() Тогда
			ФайлАдресов.Прочитать(ИмяФайлаАдресов, КодировкаТекста.ANSI);
			СтарыеАдреса = ФайлАдресов.ПолучитьТекст();
		Иначе
			СтарыеАдреса = "" + Символы.ПС + "";
		КонецЕсли;
		
		СтрокаТЗнАдреса = ТаблицаАдресов.Найти(Выборка.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		Если СтрокаТЗнАдреса = Неопределено Тогда
			НовыеАдреса = "" + Символы.ПС + "";
		Иначе
			НовыеАдреса = СтрокаТЗнАдреса.Адрес + Символы.ПС + СтрокаТЗнАдреса.ТелефонныйНомер;
		КонецЕсли;
		Если СтарыеАдреса <> НовыеАдреса Тогда
			ФайлАдресов.УстановитьТекст(НовыеАдреса);
			Попытка
				ФайлАдресов.Записать(ИмяФайлаАдресов, КодировкаТекста.ANSI)
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		//---АК SHEP 2018.10.07
		
		Попытка
			ФайлФлаг.Записать(мКаталогВыгрузкиВоФронтол + "import.upd");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Функция ПолучитьФайлВыгрузкиПользователи()
//	
//	Файл = Новый ТекстовыйДокумент();

//	Файл.ДобавитьСтроку("##@@&&");
//	Файл.ДобавитьСтроку("#");
//	
//	Разделитель = ";";

//	Файл.ДобавитьСтроку("// Удаление справочников");
//	Файл.ДобавитьСтроку("$$$DELETEALLUSERS");

//	ВыгрузитьПерсоналВФайл(Файл, Разделитель);

//	Возврат Файл;

//КонецФункции

Функция ПолучитьФайлВыгрузки(ВыгружатьПользователей = Ложь)
	
	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Разделитель = ";";

	//Если НЕ Объект.ЧастичнаяВыгрузка Тогда
		Файл.ДобавитьСтроку("// Удаление справочников");
		Файл.ДобавитьСтроку("$$$DELETEALLWARES");
		Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
		Файл.ДобавитьСтроку("$$$DELETEALLASPECTSCHMS");		
		Файл.ДобавитьСтроку("$$$DELETEALLTAXGROUPRATES");
		Файл.ДобавитьСтроку("$$$DELETEALLTAXGROUPS");
		Файл.ДобавитьСтроку("$$$DELETEALLTAXRATES");
		Если ВыгружатьПользователей Тогда
			Файл.ДобавитьСтроку("$$$DELETEALLUSERS");
		КонецЕсли;	
		Файл.ДобавитьСтроку("$$$DELETEALLEMPLOYEES");		
	//Иначе
	//	Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
	//КонецЕсли;

	Товары = ПолучитьТОварыДляВыгрузки();
	
	АкцииПоТоварам = ПолучитьАкцииПоТоварам();
	
	ВыгрузитьНалогиВФайл(Файл, Разделитель);
	
	ВыгрузитьХарактеристикиВФайл(Товары, Файл, Разделитель);
	
	ВыгрузитьТоварыВФайл(Товары, Файл, Разделитель, АкцииПоТоварам);
	
	ВыгрузитьШтрихКодыВФайл(Товары, Файл, Разделитель);
	
	Если ВыгружатьПользователей Тогда
		ВыгрузитьПерсоналВФайл(Файл, Разделитель);
	КонецЕсли;	

	Возврат Файл;

КонецФункции
//+++АК BELN 2018.12.06 ИП-00020532.01   
Функция ПолучитьФайлВыгрузкиРеализуемаяУслуга(ВыгружатьПользователей = Ложь)
	
	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Разделитель = ";";

	//Если НЕ Объект.ЧастичнаяВыгрузка Тогда
		Файл.ДобавитьСтроку("// Удаление справочников");
		Файл.ДобавитьСтроку("$$$DELETEALLWARES");
		//Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
		//Файл.ДобавитьСтроку("$$$DELETEALLASPECTSCHMS");		
		Файл.ДобавитьСтроку("$$$DELETEALLTAXGROUPRATES");
		Файл.ДобавитьСтроку("$$$DELETEALLTAXGROUPS");
		Файл.ДобавитьСтроку("$$$DELETEALLTAXRATES");
		Если ВыгружатьПользователей Тогда
			Файл.ДобавитьСтроку("$$$DELETEALLUSERS");
		КонецЕсли;	
		Файл.ДобавитьСтроку("$$$DELETEALLEMPLOYEES");		
	//Иначе
	//	Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
	//КонецЕсли;

	Товары = ПолучитьТОварыДляВыгрузкиРеализуемаяУслуга();
	
	АкцииПоТоварам = ПолучитьАкцииПоТоварам();
	АкцииПоТоварам.Очистить();
	ВыгрузитьНалогиВФайл(Файл, Разделитель);
	
	//ВыгрузитьХарактеристикиВФайл(Товары, Файл, Разделитель);
	
	ВыгрузитьТоварыВФайл(Товары, Файл, Разделитель, АкцииПоТоварам);
	
	//ВыгрузитьШтрихКодыВФайл(Товары, Файл, Разделитель);
	
	Если ВыгружатьПользователей Тогда
		ВыгрузитьПерсоналВФайл(Файл, Разделитель);
	КонецЕсли;	

	Возврат Файл;

КонецФункции
//---АК BELN 2018.12.06 
Функция ПолучитьТоварыДляВыгрузки()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	СпрНоменклатура.id_tov,
	|	СпрНоменклатура.Наименование,
	|	СпрНоменклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	СпрНоменклатура.Весовой,
	|	СпрНоменклатура.Фронтол_БыстрыйВыбор,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				ИЛИ СпрНоменклатура.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустоеЗначение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоАлкоголь,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 13
	|		КОГДА СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 12
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ГруппаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ПО (ШтриховыеКоды.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))) КАК ВЗ_Характеристики
	|		ПО СпрНоменклатура.Ссылка = ВЗ_Характеристики.Владелец
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
	|	И НЕ СпрНоменклатура.Выведена
	|	И НЕ СпрНоменклатура.ЭтоКомплект
	|	И СпрНоменклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|	И ШтриховыеКоды.Характеристика.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))";
				   
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Товары;
	
КонецФункции

//+++АК BELN 2018.12.06 ИП-00020532.01   
Функция ПолучитьТоварыДляВыгрузкиРеализуемаяУслуга()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	СпрНоменклатура.id_tov,
	|	СпрНоменклатура.Наименование,
	|	СпрНоменклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	СпрНоменклатура.Весовой,
	|	СпрНоменклатура.Фронтол_БыстрыйВыбор,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				ИЛИ СпрНоменклатура.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустоеЗначение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоАлкоголь,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 13
	|		КОГДА СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ СпрНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 12
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ГруппаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	|					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И НЕ СпрНоменклатура.Выведена
	|	И НЕ СпрНоменклатура.ЭтоКомплект
	|	И СпрНоменклатура.ТорговаяМарка <> ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния)
	|	И СпрНоменклатура.ТипТовара = Значение(Перечисление.ТипыТоваров.РеализуемаяУслуга)";
				   
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Товары;
	
КонецФункции
//---АК BELN 2018.12.06 

Функция ПолучитьАкцииПоТоварам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАкции.Ссылка,
	|	НоменклатураАкции.ПриПокупкеШтук,
	|	НоменклатураАкции.ДействуетЦена_Скидка
	|ИЗ
	|	Справочник.Номенклатура.Акции КАК НоменклатураАкции
	|ГДЕ
	|	НоменклатураАкции.ДатаНачала <= &ТекущаяДата
	|	И НоменклатураАкции.ДатаОкончания >= &ТекущаяДата";
				   
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Товары;
	
КонецФункции

Процедура ВыгрузитьНалогиВФайл(Файл, мРазделитель)
	
	Файл.ДобавитьСтроку("// Налоги");
	Файл.ДобавитьСтроку("$$$ADDTAXRATES");
	Файл.ДобавитьСтроку("12;10 %;10 %;0;10.00");
	Файл.ДобавитьСтроку("13;18 %;18 %;0;18.00");
	Файл.ДобавитьСтроку("14;Без НДС;Без НДС;0;0.00");
	Файл.ДобавитьСтроку("$$$ADDTAXGROUPS");
	Файл.ДобавитьСтроку("12;10 %;10 %");
	Файл.ДобавитьСтроку("13;18 %;18 %");
	Файл.ДобавитьСтроку("14;Без НДС;Без НДС");
	Файл.ДобавитьСтроку("$$$ADDTAXGROUPRATES");
	Файл.ДобавитьСтроку("12;12;12;0");
	Файл.ДобавитьСтроку("13;13;13;0");
	Файл.ДобавитьСтроку("14;14;14;0");
	
КонецПроцедуры

Процедура ВыгрузитьХарактеристикиВФайл(Товары, Файл, мРазделитель)
	
	СписокТоваров = Новый СписокЗначений;
	СписокТоваров.ЗагрузитьЗначения(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Владелец.id_tov КАК ИД,
	               |	ХарактеристикиНоменклатуры.Владелец,
	               |	ХарактеристикиНоменклатуры.Наименование,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизводителя
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	               |		ПО (ШтриховыеКоды.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	               |ГДЕ
	               |	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	               |	И НЕ ШтриховыеКоды.Характеристика ЕСТЬ NULL 
	               |	И ХарактеристикиНоменклатуры.Владелец В(&СписокТоваров)
	               |	И ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХарактеристикиНоменклатуры.Владелец,
	               |	ХарактеристикиНоменклатуры.Наименование,
	               |	ХарактеристикиНоменклатуры.Владелец.id_tov,
	               |	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИД
	               |ИТОГИ ПО
	               |	ИД
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Коды = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Схемы разрезов	
	Файл.ДобавитьСтроку("// Разрезы");
	Файл.ДобавитьСтроку("$$$ADDASPECTSCHMS");	
	
	Пока Коды.Следующий() Цикл
		
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлСхемыХарактеристик(Коды, мРазделитель));		
		
	КонецЦикла;
	
	Коды.Сбросить();
	
	// Разрезы
	Файл.ДобавитьСтроку("$$$ADDASPECTS");	
	
	Пока Коды.Следующий() Цикл
		
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлХарактеристика(Коды, мРазделитель));	
		
	КонецЦикла;
	
	Коды.Сбросить();
	
	// Значения разрезов
	Файл.ДобавитьСтроку("$$$ADDASPECTVALUES");
	
	Пока Коды.Следующий() Цикл
		
		Значения = Коды.Выбрать();
		
		Если Значения.Количество() > 0 Тогда
			ЗаписатьСтрокуДляЗаписиВФайлЗначениеХарактеристикиПустая(Файл, Коды, мРазделитель);
		КонецЕсли;	
		
		Пока Значения.Следующий() Цикл
		
			ЗаписатьСтрокуДляЗаписиВФайлЗначениеХарактеристики(Файл, Значения, мРазделитель);			
						
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыгрузитьТоварыВФайл(Товары, Файл, мРазделитель, АкцииПоТоварам)
	
	
	СписокТоваров = Новый СписокЗначений;
	СписокТоваров.ЗагрузитьЗначения(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка.Родитель КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И СпрНоменклатура.Ссылка В(&СписокТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.Ссылка.Родитель
	|ИТОГИ ПО
	|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";			   
	
	Группы = Запрос.Выполнить().Выгрузить();
	
	
	//Если Группы.Количество() <> 0 Тогда
	//	Файл.ДобавитьСтроку("// Группы товаров");
	//	Файл.ДобавитьСтроку("$$$ADDQUANTITY");
	//КонецЕсли;
	//
	//Для Каждого Группа Из Группы Цикл
	//	
	//	Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлГруппа(Группа, мРазделитель));			
	//
	//КонецЦикла;
	//
	//Если Группы.Количество() <> 0 Тогда
	//	Файл.ДобавитьСтроку("$$$ADDDISCOBJECTS");
	//КонецЕсли;
	
	Если Товары.Количество() <> 0 Тогда
		Файл.ДобавитьСтроку("// Товары");
		Файл.ДобавитьСтроку("$$$ADDQUANTITY");
	КонецЕсли;
	
	Для Каждого Товар Из Товары Цикл
		
		СтрокиАкцииПоТоварам = АкцииПоТоварам.НайтиСтроки(Новый Структура("Ссылка", Товар.Номенклатура));
		
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлТовар(Товар, мРазделитель, СтрокиАкцииПоТоварам));
		
		//Если Товар.ПериодЦены = Дата("00010101") Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//Набор = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		//Набор.Отбор.Период.Установить(Товар.ПериодЦены);
		//Набор.Отбор.НОменклатура.Установить(ТОвар.НоменклатураЦены);
		//Набор.Отбор.ЕдиницаИзмерения.Установить(Товар.ЕдиницаИзмерения);
		//
		//Набор.Прочитать();
		//
		//Набор.Очистить();
		//
		//НовЗапись = Набор.Добавить();
		//НовЗапись.Период = Товар.ПериодЦены;
		//НовЗапись.Номенклатура = товар.Номенклатурацены;
		//НовЗапись.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
		//НовЗапись.Цена = Товар.Цена;
		//НовЗапись.НазначенаДляСЕ = Товар.НазначенаДляСЕ;
		//НовЗапись.ВыгружатьВоФронтол = Ложь;
		//
		//Попытка
		//	Набор.Записать(Истина);
		//Исключение
		//	
		//КонецПопытки;		
	
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьШтрихКодыВФайл(Товары, Файл, мРазделитель)
	
	СписокТоваров = Новый СписокЗначений;
	СписокТоваров.ЗагрузитьЗначения(Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Файл.ДобавитьСтроку("// Штрихкоды");
	Файл.ДобавитьСтроку("$$$ADDBARCODES");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтриховыеКоды.Номенклатура,
	|	ШтриховыеКоды.ШтрихКод,
	|	ШтриховыеКоды.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ШтриховыеКоды.Характеристика,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК ИДПроизводителя,
	|	ШтриховыеКоды.Номенклатура.id_tov КАК id_tov,
	|	ШтриховыеКоды.Номенклатура.Весовой КАК Весовой
	|ИЗ
	|	РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ШтриховыеКоды.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	НЕ ШтриховыеКоды.Номенклатура.ПометкаУдаления
	|	И ШтриховыеКоды.Номенклатура В(&СписокТоваров)
	|	И ШтриховыеКоды.Характеристика.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))
	|	И ШтриховыеКоды.ВыведенИзМагазинов = ЛОЖЬ
	|	И ШтриховыеКоды.Характеристика.ПометкаУдаления = ЛОЖЬ";
	//|	И ШтриховыеКоды.Характеристика.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена))";
				   
	ТЗШтрихи = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрШтрих Из ТЗШтрихи Цикл
		
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлШтрихКод(СтрШтрих			, мРазделитель));
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлШтрихКодСоСкидкой(СтрШтрих	, мРазделитель));
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлШтрихКодСЦенника(СтрШтрих	, мРазделитель));
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьПерсоналВФайл(Файл, мРазделитель)
	
	Файл.ДобавитьСтроку("// Персонал");
	Файл.ДобавитьСтроку("$$$ADDUSERS");
	
	ЗапросПоГрафикуАутсорса = Новый Запрос();
	ЗапросПоГрафикуАутсорса.Текст = "ВЫБРАТЬ
	                                |	СотрудникиАутсорсинг.ИД
	                                |ИЗ
	                                |	Справочник.СотрудникиАутсорсинг КАК СотрудникиАутсорсинг";
									
	ТабКоды = ЗапросПоГрафикуАутсорса.Выполнить().Выгрузить();
	ТабКоды.Колонки.Добавить("КодСтрока");
	Для Каждого СтрокаТаб Из ТабКоды Цикл
		СтрокаТаб.КодСтрока = Прав("0000000000" + Формат(СтрокаТаб.ИД, "ЧГ=0"), 10);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(ТекущаяДата(), -2));
	Запрос.УстановитьПараметр("КодыАутсорс", ТабКоды.ВыгрузитьКолонку("КодСтрока"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПерсоналККМ.Код КАК Код,
	|	ПерсоналККМ.Наименование,
	|	ПерсоналККМ.Пароль,
	|	ПерсоналККМ.РольНаКассе
	|ИЗ
	|	Справочник.ПерсоналККМ КАК ПерсоналККМ
	|ГДЕ
	|	ПерсоналККМ.ПометкаУдаления = ЛОЖЬ
	|	И (ПерсоналККМ.Код В
	|				(ВЫБРАТЬ
	|					ТабельРаботыПродавцов.Сотрудник.Код
	|				ИЗ
	|					РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|				ГДЕ
	|					ТабельРаботыПродавцов.Период >= &ДатаНач
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ТабельРаботыПродавцов.Сотрудник.Код
	|				ИЗ
	|					РегистрСведений.ТабельРаботыВнештатныхСотрудников КАК ТабельРаботыПродавцов
	|				ГДЕ
	|					ТабельРаботыПродавцов.Период >= &ДатаНач
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ТабельРаботыПродавцов.Сотрудник.Код
	|				ИЗ
	|					РегистрСведений.ТабельРаботыГрузчиков КАК ТабельРаботыПродавцов
	|				ГДЕ
	|					ТабельРаботыПродавцов.Период >= &ДатаНач
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ТабельРаботыПродавцов.Сотрудник.Код
	|				ИЗ
	|					РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыПродавцов
	|				ГДЕ
	|					ТабельРаботыПродавцов.Период >= &ДатаНач
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ТабельРаботыПродавцов.Сотрудник.Код
	|				ИЗ
	|					РегистрСведений.ТабельРаботыПромоутеров КАК ТабельРаботыПродавцов
	|				ГДЕ
	|					ТабельРаботыПродавцов.Период >= &ДатаНач)
	|			ИЛИ ПерсоналККМ.Код В (&КодыАутсорс)
	|			ИЛИ ПерсоналККМ.ВыгружатьНаФронтолПринудительно = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|АВТОУПОРЯДОЧИВАНИЕ";
				   
	ТзПользователи = Запрос.Выполнить().Выгрузить();
	
	КодПользователя = 1;
	
	Файл.ДобавитьСтроку(Формат(КодПользователя, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + ";Администратор БД;Администратор БД;1;000000;");
	
	Для Каждого СтрПерсонал Из ТзПользователи Цикл
		
		Файл.ДобавитьСтроку(ВернутьСтрокуДляЗаписиВФайлПользователи(СтрПерсонал, мРазделитель, КодПользователя));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьСтрокуДляЗаписиВФайлСхемыХарактеристик(СтрКод, мРазделитель)
	
//1081; // Код
//шкала товара 1111; // Наименование
//шкала товара 1111  // Текст	              

	ФорматИД =  Формат(СтрКод.ИД, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");

	Строка = ФорматИД + мРазделитель
			+ "шкала товара " + ФорматИД + мРазделитель
			+ "шкала товара " + ФорматИД;
			
	Возврат Строка;
	
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлХарактеристика(СтрКод, мРазделитель)
	
	//1081;  // Код схемы разрезов
	//1;		// Код 
	//шкала товара 1111; // Наименование
	//шкала товара 1111	 // Текст

	ФорматИД =  Формат(СтрКод.ИД, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");

	Строка = ФорматИД + мРазделитель
			+ 1 + мРазделитель
			+ "шкала товара " + ФорматИД + мРазделитель
			+ "шкала товара " + ФорматИД;
			
	Возврат Строка;
	
КонецФункции

Процедура ЗаписатьСтрокуДляЗаписиВФайлЗначениеХарактеристики(Файл, СтрКод, мРазделитель)
	 
	//1081; // Код схемы разрезов
	//1;    // Код разреза схемы
	//1338; // Код
	//Агрофирма Оптина ООО;    // Наименование
	//Агрофирма Оптина ООО	// Текст

	Если СтрКод.ИдПроизводителя = -1 Тогда  // большой косяк
		Возврат;
	КонецЕсли;
	
	ФорматКодСхемыРазрезов =  Формат(СтрКод.ИД, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");
	ФорматКод = Формат(Число(СтрКод.ИдПроизводителя), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");
	НаименованиеХарКи = ПодготовитьСтроку(СтрКод.Наименование, мРазделитель);

	Строка = ФорматКодСхемыРазрезов + мРазделитель
			+ 1 + мРазделитель
			+ ФорматКод + мРазделитель
			+ НаименованиеХарКи + мРазделитель
			+ НаименованиеХарКи;
			
	Файл.ДобавитьСтроку(Строка);
	
КонецПроцедуры

Процедура ЗаписатьСтрокуДляЗаписиВФайлЗначениеХарактеристикиПустая(Файл, СтрКод, мРазделитель)
	 
	//1081; // Код схемы разрезов
	//1;    // Код разреза схемы
	//1338; // Код
	//Агрофирма Оптина ООО;    // Наименование
	//Агрофирма Оптина ООО	// Текст

	Если СтрКод.ИдПроизводителя = -1 Тогда  // большой косяк
		Возврат;
	КонецЕсли;
	
	ФорматКодСхемыРазрезов =  Формат(СтрКод.ИД, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");
	ФорматКод = Формат(1, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");
	НаименованиеХарКи = ПодготовитьСтроку("Без характеристики", мРазделитель);

	Строка = ФорматКодСхемыРазрезов + мРазделитель
			+ 1 + мРазделитель
			+ ФорматКод + мРазделитель
			+ НаименованиеХарКи + мРазделитель
			+ НаименованиеХарКи;
			
	Файл.ДобавитьСтроку(Строка);
	
КонецПроцедуры

Функция ВернутьСтрокуДляЗаписиВФайлПользователи(СтрПользователь, мРазделитель, КодПользователя)
	
	//	3;  // Код
	//Герасимова Татьяна; // Наименование
	//Герасимова Татьяна; // Текст
	//3; // Код профиля пользователя
	//1000000000; // Пароль
	//1000000000016  // Карта пользователя

    лКодПользователя = ?(ЗначениеЗаполнено(СтрПользователь.Код), Формат(Число(СтрПользователь.Код), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0"), "0");

	Строка = лКодПользователя + мРазделитель
			+ СтрПользователь.Наименование + мРазделитель
			+ СтрПользователь.Наименование + мРазделитель
			+ ?(ЗначениеЗаполнено(СтрПользователь.РольНаКассе), Формат(СтрПользователь.РольНаКассе, "ЧГ=0"), "3") + мРазделитель
			+ "1000000000" + мРазделитель
			+ СтрПользователь.Пароль;
			
	КодПользователя = ?(лКодПользователя = 0, КодПользователя, лКодПользователя);			
			
	Возврат Строка;			
			
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлШтрихКодСоСкидкой(СтрШтрих, мРазделитель)
	
	//	2100080130005                 ; // ШтрихКод
	//1111;  // Идентификатор товара
	//1340; // Коды значений разрезов через запятую
	//1    // Коэффициент
	//	
	
	Штрих = СокрлП(СтрШтрих.ШтрихКод);
	
	Если СтрДлина(Штрих) > 7 Тогда
		Штрих = Прав(Штрих, СтрДлина(Штрих) - 2);
		Штрих = ?(СтрШтрих.Весовой, "98", "99") + Штрих;
		Штрих = ?(СтрДлина(Штрих) = 12, Штрих, Лев(Штрих, СтрДлина(Штрих) - 1));
		Штрих = Штрих + ВнешниеДанные.КонтрольныйСимволEAN(Штрих, 13);
	ИначеЕсли СтрДлина(Штрих) = 7 Тогда
		Штрих = Прав(Штрих, СтрДлина(Штрих) - 2);
		Штрих = "98" + Штрих;
	КонецЕсли;
	
	Строка = Штрих + мРазделитель
				+ Формат(СтрШтрих.id_tov, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Формат(СтрШтрих.ИДПроизводителя, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Строка(СтрШтрих.Коэффициент);
				
	Возврат Строка;
	
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлШтрихКодСЦенника(СтрШтрих, мРазделитель)
	
	//	2100080130005                 ; // ШтрихКод
	//1111;  // Идентификатор товара
	//1340; // Коды значений разрезов через запятую
	//1    // Коэффициент
	//	
	
	Штрих = СокрлП(СтрШтрих.ШтрихКод);
	
	Если СтрДлина(Штрих) > 7 Тогда
		Штрих = Прав(Штрих, СтрДлина(Штрих) - 2);
		Штрих = ?(СтрШтрих.Весовой, "96", "97") + Штрих;
		Штрих = ?(СтрДлина(Штрих) = 12, Штрих, Лев(Штрих, СтрДлина(Штрих) - 1));
		Штрих = Штрих + ВнешниеДанные.КонтрольныйСимволEAN(Штрих, 13);
	ИначеЕсли СтрДлина(Штрих) = 7 Тогда
		Штрих = Прав(Штрих, СтрДлина(Штрих) - 2);
		Штрих = "96" + Штрих;
	КонецЕсли;
	
	Строка = Штрих + мРазделитель
				+ Формат(СтрШтрих.id_tov, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Формат(СтрШтрих.ИДПроизводителя, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Строка(СтрШтрих.Коэффициент);
				
	Возврат Строка;
	
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлШтрихКод(СтрШтрих, мРазделитель)
	
	//	2100080130005                 ; // ШтрихКод
	//1111;  // Идентификатор товара
	//1340; // Коды значений разрезов через запятую
	//1    // Коэффициент
	//	
	
	Штрих = СокрлП(СтрШтрих.ШтрихКод);
	
	Строка = Штрих + мРазделитель
				+ Формат(СтрШтрих.id_tov, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Формат(СтрШтрих.ИДПроизводителя, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель
				+ Строка(СтрШтрих.Коэффициент);
				
	Возврат Строка;
	
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлТовар(Товар, мРазделитель, СтрокиАкцииПоТоварам)
	
	ИдНоменклатуры = Формат(Товар.id_tov, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0");
	ПодгНаименование = ПодготовитьСтроку(Товар.Наименование+","+Товар.ЕдиницаИзмеренияНаименование, мРазделитель);
	
	СтрокаАкции = "";
	//+++АК MIND 2018.01.30 отключаю, скидки в отдельном файле
	//Для Каждого СтрАкция Из СтрокиАкцииПоТоварам Цикл
	//	СтрокаАкции = СтрокаАкции + ?(ЗначениеЗаполнено(СтрокаАкции), ",", "") + ВнешниеДанные.ФорматПоля(СтрАкция.ПриПокупкеШтук) + "|" + + ВнешниеДанные.ФорматПоля(СтрАкция.ДействуетЦена_Скидка);
	//КонецЦикла;
	//---АК MIND 
	
	Строка =   ИдНоменклатуры 											       + мРазделитель // Код (1)
			         + "" + мРазделитель // Штрих-код (2)
			         + ПодгНаименование                + мРазделитель // Наименование (3)
			         + ПодгНаименование                + мРазделитель // Текст для чека (4)
			         + Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена (5)
			         + ?(Товар.Фронтол_БыстрыйВыбор, 1, 0)    + мРазделитель // Остаток (6)
			         + "0"                                                  + мРазделитель // Схема внутренней автоматической скидки (7)
			         + ?(Товар.Весовой, "1", "0")                                         // Флаги через запятую: (8)
			                                                                               // • дробное количество (весовой)
			                                                                               // • продажа
			                                                                               // • возврат
			                                                                               // • отрицательные остатки
			                                                                               // • без ввода количества
			                                                                               // • списание остатков
			                                                                               // • редактирование цены
			                                                                               // • ввод количества вручную
			         + ",1,1," + ?(Товар.ЭтоАлкоголь, "1", "0") + ",0,0," + ?(Товар.Цена = 0, "1", "0") + ",1,0,0,0,0,0,0,0" + мРазделитель
			         + ""                                                   + мРазделитель // Минимальная цена (9)
			         + ""                                                   + мРазделитель // Срок годности (10)
			         + ИдНоменклатуры + мРазделитель // Код схемы разрезов (11)
			         + 0                                                   + мРазделитель // Вариант использования разрезов: (12)
			                                                                               //  0 – полный список
			                                                                               //  1 – заданный список
			                                                                               //  2 – заданный список с остатком
			         + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки (13)
			         + "1"                    + мРазделитель // Коэффициент (14)
			         + ""                                                   + мРазделитель // Код базового товара (15)
			         //+ Формат(Товар.Номенклатура.Родитель.id_group, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")            + мРазделитель // Код родительской группы (16)
					 + ""            + мРазделитель // Код родительской группы (16)
			         + "1"													+ мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0» (17)
			         + "0"                                                  + мРазделитель // Номер уровня иерархического списка (18)
			         + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1» (19)
			         + СтрокаАкции		                                    + мРазделитель // Серия (20)
			         + ""                                                   + мРазделитель // Сертификат (21)
			         + ""                                                   + мРазделитель // Код ККМ (22)
			         + Товар.ГруппаНДС                                      + мРазделитель // Код налоговой группы (23)
			         + ""                                                   + мРазделитель // Код весов с ПЭ (24)
			         + ""						                            + мРазделитель // Код товара в весах ПЭ (25)
			         + ИдНоменклатуры + мРазделитель // Артикул (26)
			         + ""                                                   + мРазделитель // Тип скидки/надбавки: (27)
			                                                                               //  0 – процентная скидка
			                                                                               //  1 – скидка суммой
			                                                                               //  2 – процентная надбавка
			                                                                               //  3 – надбавка суммой
			         + ""                                                   + мРазделитель // Значение товарной скидки/надбавки (28)
			         + ""                                                   + мРазделитель // Максимальная скидка, % (29)
			         + ""                                                   + мРазделитель // Код принтера чеков (30)
			         + ""                                                   + мРазделитель // Файл *.bmp с картинкой (31)
			         + ""                                                   + мРазделитель // Описание (32)
			         + ?(Товар.Весовой, 0.001, 1); // Кратность количества (33)
	
	
	Возврат Строка;
	
КонецФункции

Функция ВернутьСтрокуДляЗаписиВФайлГруппа(Товар, мРазделитель)
	
	Строка =   Формат(Товар.Номенклатура.id_group, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код (1)
			         + "" + мРазделитель // Штрих-код (2)
			         + ПодготовитьСтроку(Товар.Номенклатура.Наименование, мРазделитель)                + мРазделитель // Наименование (3)
			         + ""                + мРазделитель // Текст для чека (4)
			         + ""       + мРазделитель // Цена (5)
			         + ""    + мРазделитель // Остаток (6)
			         + ""                                                  + мРазделитель // Схема внутренней автоматической скидки (7)
			         + ""                                         // Флаги через запятую: (8)
			                                                                               // • дробное количество (весовой)
			                                                                               // • продажа
			                                                                               // • возврат
			                                                                               // • отрицательные остатки
			                                                                               // • без ввода количества
			                                                                               // • списание остатков
			                                                                               // • редактирование цены
			                                                                               // • ввод количества вручную
			         + мРазделитель
			         + ""                                                   + мРазделитель // Минимальная цена (9)
			         + ""                                                   + мРазделитель // Срок годности (10)
			         + ""                                                   + мРазделитель // Код схемы разрезов (11)
			         + ""                                                   + мРазделитель // Вариант использования разрезов: (12)
			                                                                               //  0 – полный список
			                                                                               //  1 – заданный список
			                                                                               //  2 – заданный список с остатком
			         + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки (13)
			         + ""                   + мРазделитель // Коэффициент (14)
			         + ""                                                   + мРазделитель // Код базового товара (15)
			         + Формат(Товар.Номенклатура.Родитель.id_group, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")            + мРазделитель // Код родительской группы (16)
			         + "0"		+ мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0» (17)
			         + ""                                                  + мРазделитель // Номер уровня иерархического списка (18)
			         + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1» (19)
			         + ""				                                    + мРазделитель // Серия (20)
			         + ""                                                   + мРазделитель // Сертификат (21)
			         + ""                                                   + мРазделитель // Код ККМ (22)
			         + ""                                                   + мРазделитель // Код налоговой группы (23)
			         + ""                                                   + мРазделитель // Код весов с ПЭ (24)
			         + ""						                            + мРазделитель // Код товара в весах ПЭ (25)
			         + ""	                            + мРазделитель // Артикул (26)
			         + ""                                                   + мРазделитель // Тип скидки/надбавки: (27)
			                                                                               //  0 – процентная скидка
			                                                                               //  1 – скидка суммой
			                                                                               //  2 – процентная надбавка
			                                                                               //  3 – надбавка суммой
			         + ""                                                   + мРазделитель // Значение товарной скидки/надбавки (28)
			         + ""                                                   + мРазделитель // Максимальная скидка, % (29)
			         + ""                                                   + мРазделитель // Код принтера чеков (30)
			         + ""                                                   + мРазделитель // Файл *.bmp с картинкой (31)
			         + ""                                                   + мРазделитель // Описание (32)
			         + ""; // Кратность количества (33)
					

	Возврат Строка;
	
КонецФункции

Функция ПодготовитьСтроку(Знач ИсходнаяСтрока, мРазделитель);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), мРазделитель, " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	
	Возврат ИсходнаяСтрока;
	
КонецФункции
