
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументОтбор = Параметры.ДокументОтбор;
	
	Если Не ЗначениеЗаполнено(СДаты) Тогда
		СДаты = ТекущаяДата() - 86400 * 3;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоДату) Тогда
		ПоДату = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Магазин)
		И РольДоступна("Продавец") Тогда
		Попытка
			Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	КонстантаКаталогФайлов = Константы.КаталогХраненияФайловКартинок.Получить();
	
	Если Прав(КонстантаКаталогФайлов, 1) <> "\" Тогда
		КонстантаКаталогФайлов = КонстантаКаталогФайлов + "\";
	КонецЕсли;	
	
	КонстантаКаталогФайлов = КонстантаКаталогФайлов + "СписанияНаМагазинах\";
	
	ПеречитатьДокументы();
	
	МожетМенятьСтатус = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетМенятьСтатусПриложенныхКартинокСписаний, Ложь);
	Элементы.КартинкиПоСтрокеТовараУстановитьСтатусНеОбработано.Доступность = МожетМенятьСтатус;
	Элементы.КартинкиПоСтрокеТовараУстановитьСтатусНеПринято.Доступность = МожетМенятьСтатус;
	Элементы.КартинкиПоСтрокеТовараУстановитьСтатусПринято.Доступность = МожетМенятьСтатус;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДокументы()
	
	ТекУид = Неопределено;
	Если Элементы.ТабДокументы.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = ТабДокументы.НайтиПоИдентификатору(Элементы.ТабДокументы.ТекущаяСтрока);
		ТекУид = ТекДанные.УинДокумента;
	КонецЕсли;
	ТабДокументы.Очистить();
	Картинка = "";
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОпераций.code_operation,
	               |	ТипыОпераций.name_operation,
	               |	ТипыОпераций.Ссылка,
	               |	ТипыОпераций.Наименование,
	               |	ТипыОпераций.field_operation
	               |ИЗ
	               |	Справочник.ТипыОперацийМагазина КАК ТипыОпераций
	               |ГДЕ
	               |	ТипыОпераций.table_operation = &table_operation
	               |	И ТипыОпераций.is_photo = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.НомерТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.НомерТочки > 0";
				   
	Запрос.УстановитьПараметр("table_operation", "td_move");
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабКеш = Результаты[0].Выгрузить();
	ТабМагазины = Результаты[1].Выгрузить();
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "SELECT DISTINCT [Id_doc] as id
						|INTO #Docs
						|  FROM [SMS_REPL].[dbo].[TD_move] (nolock)
						|  WHERE ";
			Если ЗначениеЗаполнено(ДокументОтбор) Тогда
				ТекстЗапросаSQL = ТекстЗапросаSQL + " Id_doc = " + ВнешниеДанные.ФорматПоля(ДокументОтбор);
			Иначе
				ТекстЗапросаSQL = ТекстЗапросаSQL + " [opendate] >= " + ВнешниеДанные.ФорматПоля(СДаты) + " and [opendate] <= " + ВнешниеДанные.ФорматПоля(КонецДня(ПоДату));
			КонецЕсли;				
						ТекстЗапросаSQL = ТекстЗапросаSQL + "
						|	and CASE WHEN [operation_type] < 0 THEN [operation_type] * (-1) ELSE [operation_type] END IN (Select TOper.code_operation FROM [SMS_REPL].[dbo].[Types_Operation] as TOper (nolock) WHERE Toper.table_operation = 'td_move' and Toper.field_operation = 'operation_type_orig' and TOper.is_photo = 1
						|																" + ?(ЗначениеЗаполнено(ТипОперацииОтбор), " and TOper.code_operation = " + ВнешниеДанные.ФорматПоля(ТипОперацииОтбор.code_operation), "") + ")
						|" + ?(ЗначениеЗаполнено(Магазин), "and ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Магазин.НомерТочки), "") + "
						|" + ?(ЗначениеЗаполнено(ТоварОтбор), "and id_tov = " + ВнешниеДанные.ФорматПоля(ТоварОтбор.id_tov), "") + "
						|SELECT DISTINCT CAST(TD.Id_doc as nvarchar(36)) as id
						|	  ,CASE WHEN TD.closedate < '2001-01-01T00:00:00' THEN TD.opendate ELSE TD.closedate END as date
						|	  ,CASE WHEN TD.operation_type < 0 THEN TD.operation_type * (-1) ELSE TD.operation_type END as optype
						|	  ,TD.Descr
						|	  ,TD.ShopNo_rep
						|	  ,VZ.ISEmpty
						|	  ,VZ.ISNotWorked
						|  FROM [SMS_REPL].[dbo].[TD_move] TD (nolock)
						|  LEFT OUTER JOIN (SELECT TD.Id_doc, MAX(CASE WHEN PrFiles._Fld7130 IS NULL THEN 1 ELSE 0 END) as ISEmpty
						|					, MAX(CASE WHEN PrFiles._Fld7131 = 1 THEN 1 ELSE 0 END) as ISNotWorked
						|					FROM [SMS_REPL].[dbo].[TD_move] TD (nolock)
						|					LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg7128 as PrFiles (nolock)
						|					ON CAST(TD.tduid as nvarchar(36)) = PrFiles._Fld7129
						|					WHERE [Id_doc] IN (SELECT #Docs.id FROM #Docs)
						|					GROUP BY TD.Id_doc) as VZ
						|	ON TD.Id_doc = VZ.Id_doc
						|  WHERE TD.Id_doc IN (SELECT #Docs.id FROM #Docs)
						|order by date desc";
					
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			//Сообщить(Выборка.Confirm_type);
			НовСтр = ТабДокументы.Добавить();
			НовСтр.УинДокумента = rs.Fields("id").Value;
			НовСтр.ДатаДокумента = rs.Fields("date").Value;
			НовСтр.Комментарий = rs.Fields("Descr").Value;
			КодОперации = rs.Fields("optype").Value;
			СтрокиИзКеша = ТабКеш.НайтиСтроки(Новый Структура("field_operation, code_operation", "operation_type_orig", КодОперации));
			Если СтрокиИзКеша.Количество() > 0 Тогда
				НовСтр.ТипОперации = СтрокиИзКеша[0].Ссылка;
			Иначе
				НовСтр.operation_type = КодОперации;
			КонецЕсли;
			НомерМагазина = rs.Fields("ShopNo_rep").Value;
			СтрокаИзКеша = ТабМагазины.Найти(НомерМагазина, "НомерТочки");
			Если СтрокаИзКеша <> Неопределено Тогда
				НовСтр.Магазин = СтрокаИзКеша.Ссылка;
			КонецЕсли;
			НовСтр.ЕстьСтрокиБезКартинок = (rs.Fields("ISEmpty").Value = 1);
			НовСтр.ЕстьНеОбработанныеСтроки = (rs.Fields("ISNotWorked").Value = 1);
			
			rs.MoveNext();
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Если ЗначениеЗаполнено(ТекУид) Тогда
		ТекИденты = ТабДокументы.НайтиСтроки(Новый Структура("УинДокумента", ТекУид));
		Если ТекИденты.Количество() > 0 Тогда
			Элементы.ТабДокументы.ТекущаяСтрока = ТекИденты[0].ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура Обновить(Команда)
	
	ПеречитатьДокументы();
	
КонецПроцедуры

Процедура ОбновитьТоварыПоСтрокеДока()
	
	ТекУид = Неопределено;
	Если Элементы.ТоварыПоДокументу.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = ТоварыПоДокументу.НайтиПоИдентификатору(Элементы.ТоварыПоДокументу.ТекущаяСтрока);
		ТекУид = ТекДанные.УинСтроки;
	КонецЕсли;
	ТоварыПоДокументу.Очистить();
	Картинка = "";
	
	ТекСтрокаДок = Элементы.ТабДокументы.ТекущаяСтрока;
	Если ТекСтрокаДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекУинДока = ТабДокументы.НайтиПоИдентификатору(ТекСтрокаДок).УинДокумента;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "SELECT CAST(TD.tduid as nvarchar(36)) as id
						|	  ,TD.id_tov
						|	  ,TD.Quantity
						|	  ,VZ.ISEmpty
						|	  ,VZ.ISNotWorked
						|  FROM [SMS_REPL].[dbo].[TD_move] TD (nolock)
						|  LEFT OUTER JOIN (SELECT TD.tduid, MAX(CASE WHEN PrFiles._Fld7130 IS NULL THEN 1 ELSE 0 END) as ISEmpty
						|					, MAX(CASE WHEN PrFiles._Fld7131 = 1 THEN 1 ELSE 0 END) as ISNotWorked
						|					FROM [SMS_REPL].[dbo].[TD_move] TD (nolock)
						|					LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg7128 as PrFiles (nolock)
						|					ON CAST(TD.tduid as nvarchar(36)) = PrFiles._Fld7129
						|					WHERE TD.Id_doc = " + ВнешниеДанные.ФорматПоля(ТекУинДока) + " GROUP BY TD.tduid) as VZ
						|	ON TD.tduid = VZ.tduid
						|  WHERE TD.Id_doc = " + ВнешниеДанные.ФорматПоля(ТекУинДока) + "
						|order by TD.line_no";
					
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	МассивТовары = Новый Массив();
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			НовСтр = ТоварыПоДокументу.Добавить();
			НовСтр.УинСтроки = rs.Fields("id").Value;
			НовСтр.id_tov = rs.Fields("id_tov").Value;
			НовСтр.Количество = rs.Fields("Quantity").Value;
			НовСтр.БезКартинки = (rs.Fields("ISEmpty").Value = 1);
			НовСтр.ЕстьНеОбработанные = (rs.Fields("ISNotWorked").Value = 1);
			rs.MoveNext();
			МассивТовары.Добавить(НовСтр.id_tov);
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Айди", МассивТовары);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.id_tov
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.id_tov В(&Айди)";
				   
	ТабКеш = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДока Из ТоварыПоДокументу Цикл
		СтрокаКеш = ТабКеш.Найти(СтрокаДока.id_tov, "id_tov");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаДока.Товар = СтрокаКеш.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
				   
	Если ЗначениеЗаполнено(ТекУид) Тогда
		ТекИденты = ТоварыПоДокументу.НайтиСтроки(Новый Структура("УинСтроки", ТекУид));
		Если ТекИденты.Количество() > 0 Тогда
			Элементы.ТоварыПоДокументу.ТекущаяСтрока = ТекИденты[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Если ТоварыПоДокументу.Количество() > 0 Тогда
			Элементы.ТоварыПоДокументу.ТекущаяСтрока = ТоварыПоДокументу[0].ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабДокументыПриАктивизацииСтрокиСОттяжкой()
	
	ОбновитьТоварыПоСтрокеДока();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокументыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ТабДокументыПриАктивизацииСтрокиСОттяжкой", 0.3, Истина);
	
КонецПроцедуры

Процедура ОбновитьСписокКартинок()
	
	ТекУид = Неопределено;
	Если ЗначениеЗаполнено(УинСтрокиКартинкиДляПозиционирвоания) Тогда
		ТекУид = УинСтрокиКартинкиДляПозиционирвоания;
		УинСтрокиКартинкиДляПозиционирвоания = "";
	Иначе	
		Если Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока <> Неопределено Тогда
			ТекДанные = КартинкиПоСтрокеТовара.НайтиПоИдентификатору(Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока);
			ТекУид = ТекДанные.УинКартинки;
		КонецЕсли;
	КонецЕсли;	
	КартинкиПоСтрокеТовара.Очистить();
	Картинка = "";
	
	ТекСтрокаДок = Элементы.ТоварыПоДокументу.ТекущаяСтрока;
	Если ТекСтрокаДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекУинСтроки = ТоварыПоДокументу.НайтиПоИдентификатору(ТекСтрокаДок).УинСтроки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УинСтроки", ТекУинСтроки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриложенныеКартинкиКСписаниямМагазины.УинКартинки,
	               |	ПриложенныеКартинкиКСписаниямМагазины.СтатусКартинки,
	               |	ПриложенныеКартинкиКСписаниямМагазины.ДатаДобавленияЗаписи КАК ДатаДобавленияЗаписи,
	               |	ПриложенныеКартинкиКСписаниямМагазины.ДобавилПользователь,
	               |	ПриложенныеКартинкиКСписаниямМагазины.Расширение
	               |ИЗ
	               |	РегистрСведений.ПриложенныеКартинкиКСписаниямМагазины КАК ПриложенныеКартинкиКСписаниямМагазины
	               |ГДЕ
	               |	ПриложенныеКартинкиКСписаниямМагазины.УинСтроки = &УинСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаДобавленияЗаписи УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = КартинкиПоСтрокеТовара.Добавить();
		СтрокаТаб.УинКартинки = Выборка.УинКартинки;
		СтрокаТаб.ДатаДобавления = Выборка.ДатаДобавленияЗаписи;
		СтрокаТаб.ДобавилПользователь = Выборка.ДобавилПользователь;
		СтрокаТаб.Расширение = Выборка.Расширение;
		СтрокаТаб.СтатусКартинки = Выборка.СтатусКартинки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекУид) Тогда
		ТекИденты = КартинкиПоСтрокеТовара.НайтиСтроки(Новый Структура("УинКартинки", ТекУид));
		Если ТекИденты.Количество() > 0 Тогда
			Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока = ТекИденты[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Если КартинкиПоСтрокеТовара.Количество() > 0 Тогда
			Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока = КартинкиПоСтрокеТовара[0].ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПоДокументуПриАктивизацииСтрокиСОттяжкой()
	
	ОбновитьСписокКартинок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДокументуПриАктивизацииСтроки(Элемент)
	
	
	ПодключитьОбработчикОжидания("ТоварыПоДокументуПриАктивизацииСтрокиСОттяжкой", 0.1, Истина);
	
КонецПроцедуры

Процедура ВывестиКартинку()
	
	Картинка = "";
	ТекСтрока = Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = КартинкиПоСтрокеТовара.НайтиПоИдентификатору(ТекСтрока);
	
	Картинка = ПоместитьВоВременноеХранилище(Новый Картинка(КонстантаКаталогФайлов + Формат(ТекДанные.ДатаДобавления, "ДФ=yyyyMM") + "\" + ТекДанные.УинКартинки + "." + ТекДанные.Расширение));
	
КонецПроцедуры	

Процедура ВывестиКомментарии()
	
	КомментарииККартинке.Очистить();
	ТекСтрока = Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = КартинкиПоСтрокеТовара.НайтиПоИдентификатору(ТекСтрока);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УинКартинки", ТекДанные.УинКартинки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриложенныеКартинкиКСписаниямКомментарии.ДатаКомментария КАК Дата,
	               |	ПриложенныеКартинкиКСписаниямКомментарии.Пользователь,
	               |	ПриложенныеКартинкиКСписаниямКомментарии.Комментарий
	               |ИЗ
	               |	РегистрСведений.ПриложенныеКартинкиКСписаниямКомментарии КАК ПриложенныеКартинкиКСписаниямКомментарии
	               |ГДЕ
	               |	ПриложенныеКартинкиКСписаниямКомментарии.УинКартинки = &УинКартинки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаКомментария УБЫВ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КомментарииККартинке.Добавить(), Выборка);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура КартинкиПоСтрокеТовараПриАктивизацииСтроки(Элемент)
	
	ВывестиКартинку();
	ВывестиКомментарии();
	
КонецПроцедуры

Процедура УстановитьСтатус(УинСтроки, Статус)
	
	СтатусСтрокой = "";
	Если Статус = 1 Тогда
		СтатусСтрокой = "Не обработано";
	ИначеЕсли Статус = 2 Тогда
		СтатусСтрокой = "Не принято";
	ИначеЕсли Статус = 3 Тогда
		СтатусСтрокой = "Принято";	
	КонецЕсли;	
	Набор = РегистрыСведений.ПриложенныеКартинкиКСписаниямМагазины.СоздатьНаборЗаписей();
	Набор.Отбор.УинКартинки.Установить(УинСтроки);
	Набор.Прочитать();
	БылаЗапись = Ложь;
	Для Каждого Запись Из Набор Цикл
		Если Запись.СтатусКартинки <> Статус Тогда
			Запись.СтатусКартинки = Статус;
			БылаЗапись = Истина;
		КонецЕсли;
	КонецЦикла;	
	Если БылаЗапись Тогда
		Набор.Записать();
		
		Запись = РегистрыСведений.ПриложенныеКартинкиКСписаниямКомментарии.СоздатьМенеджерЗаписи();
		Запись.УинКартинки = УинСтроки;
		Запись.ДатаКомментария = ТекущаяДата();
		Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.Комментарий = "Пользователь изменил статус картинки на " + СтатусСтрокой;
		Запись.Записать();
		ПеречитатьДокументы();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьСтатусНеОбработано(Команда)
	
	ТекДанные = Элементы.КартинкиПоСтрокеТовара.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьСтатус(ТекДанные.УинКартинки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеПринято(Команда)
	
	ТекДанные = Элементы.КартинкиПоСтрокеТовара.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьСтатус(ТекДанные.УинКартинки, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПринято(Команда)
	
	ТекДанные = Элементы.КартинкиПоСтрокеТовара.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьСтатус(ТекДанные.УинКартинки, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииККартинкеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ДобавитьКомментарийККартинке(УинСтроки, Комментарий)
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ТекДата = ТекущаяДата();
		Запись = РегистрыСведений.ПриложенныеКартинкиКСписаниямКомментарии.СоздатьМенеджерЗаписи();
		Запись.УинКартинки = УинСтроки;
		Запись.ДатаКомментария = ТекДата;
		Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Запись.Комментарий = Комментарий;
		Запись.Записать();
		
		СтрокаДоб = КомментарииККартинке.Вставить(0);
		СтрокаДоб.Дата = ТекДата;
		СтрокаДоб.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		СтрокаДоб.Комментарий = Комментарий;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура КомментарииККартинкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекДанные = Элементы.КартинкиПоСтрокеТовара.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоммент = "";
	Если ВвестиСтроку(СтрокаКоммент, "Введите комментарий") Тогда
		ДобавитьКомментарийККартинке(ТекДанные.УинКартинки, СтрокаКоммент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииККартинкеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокОперацийКОтбору()
	
	МассивВыбора = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОперацийМагазина.Ссылка,
	               |	ТипыОперацийМагазина.Наименование
	               |ИЗ
	               |	Справочник.ТипыОперацийМагазина КАК ТипыОперацийМагазина
	               |ГДЕ
	               |	ТипыОперацийМагазина.table_operation = ""td_move""
	               |	И ТипыОперацийМагазина.field_operation = ""operation_type_orig""
	               |	И ТипыОперацийМагазина.is_photo = 1
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТипыОперацийМагазина.code_operation";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	
	Возврат МассивВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТипОперацииОтборНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ЗаполнитьСписокОперацийКОтбору());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФото(Команда)
	
	Если Элементы.ТоварыПоДокументу.ТекущиеДанные = Неопределено Тогда
		Предупреждение("В таблице товаров не выбрана строка товара");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПолученияИзображения",, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКартинкуКСтроке(ТекСтрока, ДанныеКартинки, Расширение = "png")
	
	КартинкаСписания = ПолучитьИзВременногоХранилища(ДанныеКартинки);
	
	КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КонстантаКаталог, 1) <> "\" Тогда
		КонстантаКаталог = КонстантаКаталог + "\";
	КонецЕсли;	
	
	ПодКаталог = "СписанияНаМагазинах\" + ПодКаталог + Формат(ТекущаяДата(), "ДФ=yyyyMM");
	
	СоздатьКаталог(КонстантаКаталог + ПодКаталог);
	
	УинКартинки = Строка(Новый УникальныйИдентификатор());
	
	КартинкаСписания.Записать(КонстантаКаталог + ПодКаталог + "\" + УинКартинки + "." + Расширение);
	
	ТекДанные = ТоварыПоДокументу.НайтиПоИдентификатору(ТекСтрока);
	
	Запись = РегистрыСведений.ПриложенныеКартинкиКСписаниямМагазины.СоздатьМенеджерЗаписи();
	Запись.УинСтроки = ТекДанные.УинСтроки;
	Запись.УинКартинки = УинКартинки;
	Запись.СтатусКартинки = 1;
	//Запись.Магазин = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	//Запись.ДатаОперации = ДатаСоздания;
	Запись.ДобавилПользователь = ПараметрыСеанса.ТекущийПользователь;
	Запись.Расширение = Расширение;
	Запись.ДатаДобавленияЗаписи = ТекущаяДата();
	Запись.Записать();
	УинСтрокиКартинкиДляПозиционирвоания = УинКартинки;
	
	ОбновитьСписокКартинок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВидДанных")
		И ВыбранноеЗначение.ВидДанных = "Фото"
		И ЗначениеЗаполнено(ВыбранноеЗначение.Данные) Тогда
		ЗаписатьКартинкуКСтроке(Элементы.ТоварыПоДокументу.ТекущаяСтрока, ВыбранноеЗначение.Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКартинкуИзСтроки(ТекСтрока)
	
	ТекДанные = КартинкиПоСтрокеТовара.НайтиПоИдентификатору(ТекСтрока);
	
	Набор = РегистрыСведений.ПриложенныеКартинкиКСписаниямМагазины.СоздатьНаборЗаписей();
	Набор.Отбор.УинКартинки.Установить(ТекДанные.УинКартинки);
	Набор.Записать();
	
	ОбновитьСписокКартинок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФото(Команда)
	
	Если Элементы.КартинкиПоСтрокеТовара.ТекущиеДанные.СтатусКартинки <> 1 Тогда
		Предупреждение("Нельзя удалить приложенную картинку с данным статусом!");
		Возврат;
	КонецЕсли;	
	
	Ответ = Вопрос("Вы действительно хотите удалить фото?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьКартинкуИзСтроки(Элементы.КартинкиПоСтрокеТовара.ТекущаяСтрока);
	
КонецПроцедуры
