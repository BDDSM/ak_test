Функция ПечатьЗаявкаНаРоуминг(Ссылка, Макет) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	ОбластьТело 		= Макет.ПолучитьОбласть("Тело");
	
	СтрокаПериодПоездки = "" + Формат(Ссылка.НачалоДействия, "ДФ=dd.MM.yyyy") + " - " + Формат(Ссылка.КонецДействия, "ДФ=dd.MM.yyyy");
	
	ОбластьТело.Параметры.НомерЗаявки 			= Ссылка.Номер;
	ОбластьТело.Параметры.ДатаЗаявки 			= Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
	ОбластьТело.Параметры.Сотрудник 			= Ссылка.Сотрудник.ПолноеФИО;
	ОбластьТело.Параметры.НомерТелефона 		= Ссылка.СлужебнаяSIMКарта;
	ОбластьТело.Параметры.ОператорСвязи 		= Ссылка.СлужебнаяSIMКарта.ОператорСвязи;
	//ОбластьТело.Параметры.Руководитель 			= Ссылка.РуководительСотрудника;
	ОбластьТело.Параметры.ТипПоездки 			= Ссылка.ТипПоездки;
	ОбластьТело.Параметры.ПериодПоездки 		= СтрокаПериодПоездки;
	ОбластьТело.Параметры.КоличествоДнейПоездки = (Ссылка.КонецДействия - Ссылка.НачалоДействия) / 86400;
	ОбластьТело.Параметры.Страна 				= Ссылка.Страна;
	
	//+++AK GREK 31.10.2018 ИП-00019927
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаРоуминг.Ссылка,
	               |	ДоговорыКонтрагентов.Дата КАК Дата,
	               |	ДоговорыКонтрагентов.КодовоеСловоОператораСвязи
	               |ИЗ
	               |	Документ.ЗаявкаНаРоуминг КАК ЗаявкаНаРоуминг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО ЗаявкаНаРоуминг.СлужебнаяSIMКарта.ОператорСвязи = ДоговорыКонтрагентов.Владелец
	               |			И ЗаявкаНаРоуминг.Организация = ДоговорыКонтрагентов.Организация
	               |ГДЕ
	               |	ЗаявкаНаРоуминг.Ссылка = &Ссылка
	               |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	               |	И ДоговорыКонтрагентов.КодовоеСловоОператораСвязи <> """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Таб = Рез.Выгрузить();
		ОбластьТело.Параметры.КодовоеСлово = Таб[0].КодовоеСловоОператораСвязи;
	КонецЕсли;
	//---AK	
	
	ТабДок.Вывести(ОбластьТело);
	
	Возврат ТабДок;
	
КонецФункции

// Обработка статуса документа на основании данных из письма
//
// Параметры:
//  ДокументСсылка       - <Тип.ДокументСсылка> - Документ для обработки
//  СтруктураПараметров  - <Тип.Структура> - Структура данных, которая хранит 
//                         данные по выполненному действию (Согласовано, Отклонено) 
Процедура ОбработатьСогласованиеДокументаИзПисьма(ДокументСсылка, СтруктураПараметров) Экспорт
	
	Если НЕ (ДокументСсылка.Статус = Перечисления.СтатусыЗаявокНаРоуминг.НаРассмотрении ИЛИ СтруктураПараметров.Свойство("РучноеИзменение")) Тогда
		Возврат;	
	КонецЕсли;	
		
	Статус = Перечисления.СтатусыЗаявокНаРоуминг.ПустаяСсылка();
	
	Если СтруктураПараметров.Согласовано И НЕ СтруктураПараметров.Отклонено Тогда
		
		Статус = Перечисления.СтатусыЗаявокНаРоуминг.Подтвержден;
		
	ИначеЕсли НЕ СтруктураПараметров.Согласовано И СтруктураПараметров.Отклонено Тогда
		
		Статус = Перечисления.СтатусыЗаявокНаРоуминг.Отклонен;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Статус) Тогда	
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ФоновоеЗадание");		
		ДокументОбъект.Статус = Статус;
			
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка	
			ОтправитьУведомленияОСменеСтатуса(ДокументСсылка); 
		Исключение
			ЗаписьЖурналаРегистрации("СогласованиеЗаявокНаРоуминг", УровеньЖурналаРегистрации.Ошибка, , , 
			СтрЗаменить("Не удалось ""отправить"" письмо о смене статуса, документ &Документ при согласовании через e-mail: ", "&Документ", ДокументОбъект)  + ОписаниеОшибки());
		КонецПопытки;
		
		Если Статус = Перечисления.СтатусыЗаявокНаРоуминг.Подтвержден И НЕ ДокументСсылка.ВыгруженаЗаявкаОператоруСвязи Тогда		
			ОбработкаРассылкиОператорам = Обработки.РассылкаОператорамСвязиПоЗаявкамНаРоуминг.Создать();		
			ОбработкаРассылкиОператорам.ВыполнитьРассылку();	
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры // ОбработатьСогласованиеДокументаИзПисьма()

// Процедура формирует и вызывает отправку письмем сотруднику
//
// Параметры:
//  ДокументСсылка  - <Тип.ДокументСсылка.ЗаявкаНаРоуминг> 
//
Процедура ОтправитьУведомленияОСменеСтатуса(ДокументСсылка) Экспорт
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	
	СтруктураПисьма.Вставить("ДокументСсылка", 	ДокументСсылка);
	СтруктураПисьма.Вставить("Отправитель", 	ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки());  
	СтруктураПисьма.Вставить("Получатели",     	Неопределено);
	СтруктураПисьма.Вставить("МассивСтрок",    	Неопределено);	
	СтруктураПисьма.Вставить("ОшибкаОтправки", 	Неопределено);
	СтруктураПисьма.Вставить("ОписаниеОшибки", 	Неопределено);
	СтруктураПисьма.Вставить("Тема", "Смена статуса документа " + ДокументСсылка); 
	СтруктураПисьма.Вставить("Текст", "");
		
	МассивКому = Новый Массив;
	
	ДопПолучатели = РегистрыСведений.ЗаявкиНаРоумингЛимиты.СоздатьНаборЗаписей();
    ДопПолучатели.Прочитать();
    
	Для Каждого Получатель Из ДопПолучатели Цикл
		МассивКому.Добавить(Получатель.ПолучательРассылок);	
	КонецЦикла;	
		
	МассивКому.Добавить(ДокументСсылка.Сотрудник);		
		
	Запрос = Новый Запрос;
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ                                                   
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В (&Объект)
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = Значение(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)";
	Запрос.УстановитьПараметр("Объект", МассивКому);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Получатели = "";
		ВыборкаПолучатели = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаПолучатели.Следующий() Цикл
			Получатели = Получатели + ВыборкаПолучатели.Представление + ";";
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(Получатели) Тогда 
			
			СтруктураПисьма.Получатели    = Получатели;		
			СформироватьПисьмоУведомлениеОбИзмененииСтатуса(СтруктураПисьма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

// Формирует тексты писем для ответственных технологов и помощников в разрезе доступных характеристик
//
// Параметры:
//
//  СтруктураПисьма - <Тип.Структура> 
//
//  Основные параметры структуры:
//
//  ДокументСсылка  - <Тип.ЗаявканаРоуминг> - Документ для отправки уведомлений
//                 
//  МассивНомеровСтрок  - <Тип.Массив> - Массив сток документа, которые должны быть разосланы
//
Процедура СформироватьПисьмоУведомлениеОбИзмененииСтатуса(СтруктураПисьма);
	
	//Формирование текста HTML письма 
	
	СхемаКомпоновкиДанных = ПолучитьМакет("МакетИзменениеСтатуса");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной").Настройки;
	
	//Заполнение параметров
	НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("Ссылка").Значение = СтруктураПисьма.ДокументСсылка;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанных")); 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ТабДок = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Запись в HTML файл
	
	МассивДляУдаления = Новый Массив();
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	МассивДляУдаления.Добавить(ИмяФайла);
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	СтруктураПисьма.Текст = ТекстовыйДокумент.ПолучитьТекст();	
	
	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	//Отправка письма
	Документы.ИзменениеЗакупочныхЦен.ОтправитьПисьмо(СтруктураПисьма);
	
КонецПроцедуры // СформироватьПисьмоУведомлениеОбИзмененииСтатуса(ДокументСсылка, МассивНомеровСтрок, МассивАдресовПолучателей);()

