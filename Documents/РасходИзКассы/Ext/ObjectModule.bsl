
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАвтоматическоеЗаполнениеДокумента Экспорт;
Перем мПараметрЗаполненияДокумента Экспорт;

		
Процедура СоздатьЗадачуПоДокументу(пДокумент, пВидЗадачи, пИсполнитель)
	
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи 		= пВидЗадачи;
	обЗадача.Дата 			= ТекущаяДата();
	обЗадача.ОбъектЗадачи 	= пДокумент;
	обЗадача.Ответственный 	= ЭтотОбъект.Ответственный;	
	обЗадача.Исполнитель 	= пИсполнитель;	
	обЗадача.Организация 	= пДокумент.Организация;
	обЗадача.Оповещение 	= Истина;
	обЗадача.СрокИсполнения = НачалоДня(ТекущаяДата());
	обЗадача.СрокОповещения = НачалоДня(ТекущаяДата());
	обЗадача.Наименование 	= "" + пДокумент + " оплачена";
	обЗадача.Записать();
	
	Задача = обЗадача.Ссылка;
	Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РКО", "Расходный кассовый ордер");

КонецФункции

Процедура УстановитьСчетаУчетаБУ() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ВидОперации"	, ЭтотОбъект.ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаБУ.СчетУчетаРасчетов,
	|	СчетаУчетаБУ.СчетУчетаПоАвансам
	|ИЗ
	|	РегистрСведений.СчетаУчетаБУ КАК СчетаУчетаБУ
	|ГДЕ
	|	(СчетаУчетаБУ.Организация = &Организация
	|			ИЛИ СчетаУчетаБУ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (СчетаУчетаБУ.Контрагент = &Контрагент
	|			ИЛИ СчетаУчетаБУ.Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	И (СчетаУчетаБУ.ВидОперации = &ВидОперации
	|			ИЛИ СчетаУчетаБУ.ВидОперации = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаУчетаБУ.Организация УБЫВ,
	|	СчетаУчетаБУ.Контрагент УБЫВ,
	|	СчетаУчетаБУ.ВидОперации УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	//
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Выборка.СчетУчетаРасчетов;
		ЭтотОбъект.СчетУчетаРасчетовПоАвансамБУ 	= Выборка.СчетУчетаПоАвансам;		
	Иначе
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЭтотОбъект.СчетУчетаРасчетовПоАвансамБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДоговорПоТТ(пОрганизация, пКонтрагент, пТорговаяТочка)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"			, пОрганизация);
	Запрос.УстановитьПараметр("Контрагент"			, пКонтрагент);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, пТорговаяТочка);
	Запрос.УстановитьПараметр("спВидыДоговоров"		, УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.Избенка))
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.ВидДоговора В(&спВидыДоговоров)
	|	И ДоговорыКонтрагентов.ТипДоговора = Значение(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
	|	И ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	//
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 

	КодыСчетов = Новый Структура("Дебет,Кредит");


	СчетКт = ПланыСчетов.Финансовый.Касса.Код;

	КодыСчетов.Кредит = СчетКт;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		СтрокаДебет	= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация.Код
	Иначе
		СтрокаДебет	= СчетУчетаРасчетовСКонтрагентом.Код
	КонецЕсли;

	КодыСчетов.Дебет = СтрокаДебет;

	Возврат КодыСчетов;

КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой РКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьРКО() Экспорт

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Контрагент.Представление КАК ФИОПолучателя,
	|	РасходныйКассовыйОрдер.Выдать,
	|	РасходныйКассовыйОрдер.Приложение,
	|	РасходныйКассовыйОрдер.Комментарий,
	|	РасходныйКассовыйОрдер.Ответственный,
	|	РасходныйКассовыйОрдер.СтруктурнаяЕдиница,
	|	РасходныйКассовыйОрдер.Основание,
	|	РасходныйКассовыйОрдер.ПоДокументу
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	//
	//ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	//ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	//Валютный                  = (НЕ Шапка.Валюта = мВалютаРегламентированногоУчета);

	//// Выводим шапку
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеСокращенное,");
	ОбластьМакета.Параметры.ПредставлениеПодразделения 	= Шапка.СтруктурнаяЕдиница;
	ОбластьМакета.Параметры.Сумма						= Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2");
	//
	СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, мВалютаРегламентированногоУчета);
	СуммаПрописьюПродолжение = "";
	Если СтрДлина(СуммаПрописью) > 92 Тогда
		н = 92;
		Пока н > 0
			И Сред(СуммаПрописью,н,1) <> " " Цикл
			
			н = н-1;
		КонецЦикла;
		СуммаПрописьюПродолжение 	= Сред(СуммаПрописью, н + 1);
		СуммаПрописью 				= Лев(СуммаПрописью, н);
	КонецЕсли;
	ОбластьМакета.Параметры.СуммаПрописью				= СуммаПрописью;
	ОбластьМакета.Параметры.СуммаПрописьюПродолжение 	= СуммаПрописьюПродолжение;
	//
	//ОбластьМакета.Параметры.ОрганизацияПоОКПО	= СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.НомерДокумента		= ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);

	ОбластьМакета.Параметры.ДатаДокументаПрописью = Формат(Шапка.ДатаДокумента, "ДФ='dd MMMM yyyy ""г.""'");

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.ДебетСубСчет		= КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.КредитСубСчет		= КодыСчетСубсчет.Кредит;

	//// {ОбособленныеПодразделения
	//ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	//// }ОбособленныеПодразделения
	//
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета.Параметры.ФИОРуководителя       = ОтветственныеЛица.РуководительПредставление;
	ОбластьМакета.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	ОбластьМакета.Параметры.ФИОКассира          = Шапка.Ответственный;
	//
	ОбластьМакета.Параметры.Основание           = ?(ЗначениеЗаполнено(Шапка.Основание), Шапка.Основание, Шапка.Комментарий);
	ОбластьМакета.Параметры.Приложение          = Шапка.Приложение;

	ОбластьМакета.Параметры.ФИОПолучателя 		= Шапка.Выдать;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = Шапка.ПоДокументу;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РКО" Тогда
		
		ТабДокумент = ПечатьРКО();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры

#КонецЕсли

//// Пересчитывает сумму НДС
////
//Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

//КонецПроцедуры // ПересчитатьСуммуНДС()

//Процедура РассчитатьСуммуДокумента() Экспорт
//	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаАрендыАрендодателю)
//		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗаАрендуАрендатору) Тогда
//		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	КонецЕсли;
//КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаАрендыАрендодателю
	//	ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗаАрендуАрендатору Тогда
	//	Если СуммаДокумента <> РасшифровкаПлатежа.Итог("СуммаПлатежа") Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не совпадает с расшифровкой");
	//		Отказ = Истина;
	//	КонецЕсли;
	//Иначе
	//	РасшифровкаПлатежа.Очистить();
	//КонецЕсли;
	//АК БЕЛН 06.04.2017+
	Если ЭтоНовый() Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли; 
	//АК БЕЛН 06.04.2017-
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		Отказ = Истина;
	КонецЕсли;
	
	//+++ SaMi
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходИзКассы.ВидОперации,
		|	РасходИзКассы.ПериодРегистрации,
		|	РасходИзКассы.ДоговорКонтрагента,
		|	РасходИзКассы.СуммаДокумента
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|ГДЕ
		|	РасходИзКассы.Ссылка <> &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		БылиИзменения = Ложь;
		
		Если Выборка.Следующий() Тогда
			Если	НЕ Проведен ИЛИ
						Выборка.ВидОперации<>ВидОперации ИЛИ
						Выборка.ПериодРегистрации<>ПериодРегистрации ИЛИ
						Выборка.ДоговорКонтрагента<>ДоговорКонтрагента ИЛИ
						Выборка.СуммаДокумента<>СуммаДокумента Тогда
				БылиИзменения = Истина;
			КонецЕсли;
		Иначе
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если БылиИзменения Тогда
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
			Иначе
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
			КонецЕсли;
			
			ПроцедурыНачисления.ПроверитьЛимитыПоАрендеЗаявкиИОплаты(ЭтотОбъект.Ссылка, ЭтотОбъект.ЗаявкаНаРасходованиеСредств,
																		ЭтотОбъект.СуммаДокумента, ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница,
																		ТипАренднойПлаты, ЭтотОбъект.ПериодРегистрации, Отказ);
		КонецЕсли;

	КонецЕсли;
	//--- SaMi
	
	//mind 2017-03-28
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(ПоДокументу)
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПоДокументу = Контрагент.УдостоверениеЛичности;
	КонецЕсли;
    ЭтотОбъект.НомерСумки = СокрЛП(ЭтотОбъект.НомерСумки);
	
	Пока Лев(ЭтотОбъект.НомерСумки,1)="0" И СтрДлина(ЭтотОбъект.НомерСумки)>0 Цикл
		ЭтотОбъект.НомерСумки = Прав(ЭтотОбъект.НомерСумки,СтрДлина(ЭтотОбъект.НомерСумки)-1);
	КонецЦикла;
	
	//+++АК LAGP 2017.11.22 ИП-00017210
	Если НЕ Отказ И ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация И НЕ ЗначениеЗаполнено(ЭтотОбъект.НомерСумки) И ЭтотОбъект.СтруктурнаяЕдиница.Самоинкассация Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.СтруктурнаяЕдиница.НомерЯвочнойКартыДляИнкассации) Тогда
			ЭтотОбъект.НомерСумки = ЭтотОбъект.СтруктурнаяЕдиница.НомерЯвочнойКартыДляИнкассации;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.01.09 ИП-00017210.04
	Если НЕ Отказ И ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация И НЕ ЗначениеЗаполнено(ЭтотОбъект.НомерПТК) И ЭтотОбъект.СтруктурнаяЕдиница.Самоинкассация Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.СтруктурнаяЕдиница.НомерПТК) Тогда
			ЭтотОбъект.НомерПТК = ЭтотОбъект.СтруктурнаяЕдиница.НомерПТК;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)
			И НЕ ЭтотОбъект.ЗаявкаНаРасходованиеСредств.УведомлениеОтветственномуОтправлено Тогда
		Попытка
			УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявкеОтветственному(ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
			//УведомлениеОтветственномуОтправлено = Истина;
		Исключение
			//УведомлениеОтветственномуОтправлено = Ложь;
			Сообщить("Не удалось отправить уведомление о заявке. Обратитесь к администратору!", СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если (НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация)
			И НЕ (ЭтотОбъект.ДополнительныеСвойства.Свойство("НеПроверятьЗаявку")
					И ЭтотОбъект.ДополнительныеСвойства.НеПроверятьЗаявку)
			И ЭтотОбъект.ЗаявкаНаРасходованиеСредств.Пустая()
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.НомерВАсторе) Тогда
		Сообщить("Не указана заявка на расходование средств! Проведение невозможно.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ.Пустая()
			И ЭтотОбъект.Дата >= Дата(2015, 5, 8)
			И НЕ ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья ДДС бух.учета");
		Отказ = Истина;
	КонецЕсли;
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	Движения.РасчетыСПерсоналом.Записывать = Истина;
	Движения.РасчетыСПерсоналом.Очистить();
	
	//Если Не ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)
	//	ИЛИ ЗаявкаНаРасходованиеСредств.ТорговыеТочки.Количество() = 0 Тогда
		
		//Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк  Тогда
		//	Проводка.СчетДт										= ПланыСчетов.Финансовый.РасчетныйСчет;
		//	Проводка.СубконтоДт.Организации						= Организация;
		//	Проводка.СубконтоДт.БанковскиеСчета					= СчетОрганизации;
		//	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств   = СтатьяДвиженияДенежныхСредств;
		//	Проводка.Содержание									= "Взнос наличными в банк";
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Пустая()
				И НЕ ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
			Сообщить("Не указан счет учета (БУ)! Проведение невозможно.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 				= ЭтотОбъект.Дата;
		Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
		Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
		//Проводка.Организация			= ЭтотОбъект.Организация;
		//Проводка.СтруктурнаяЕдиница		= ЭтотОбъект.СтруктурнаяЕдиница;
		
		Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		Если Проводка.Период >= '20150101' Тогда
			Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
		Иначе
			Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();	
		КонецЕсли;
	
		Проводка.СчетДт										= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
		Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
		Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ЭтотОбъект.СтруктурнаяЕдиница;
		//+++АК MIND 2017.12.26 добавлено субконто контрагентов, кто инкассирует
		Проводка.СубконтоДт.Контрагенты						= ЭтотОбъект.Контрагент;
		Проводка.Содержание									= "Инкассация";
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.Инвестиции Тогда //01
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				Если Проводка.Период >= '20150101' Тогда
					Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
				Иначе
					Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();	
				КонецЕсли;
				
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
				Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
				Проводка.СубконтоДт.ФизическиеЛица					= Справочники.ФизическиеЛица.СтороннееФизическоеЛицо;
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.Организации						= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.ФизическиеЛица					= Справочники.ФизическиеЛица.СтороннееФизическоеЛицо;
				
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.КапитальныеВложения; //08
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.КапитальныеВложения; //08
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= СтатьяДвиженияДенежныхСредств;
				
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.Инвестиции; //01
				Проводка.СубконтоДт.ТорговыеТочки 					= ЭтотОбъект.СубконтоДт1;
			Иначе	
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				Если Проводка.Период >= '20150101' Тогда
					Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
				Иначе
					Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();		
				КонецЕсли;
				
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.КапитальныеВложения; //08
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.КапитальныеВложения; //08
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.Инвестиции; //01
				Проводка.СубконтоДт.ТорговыеТочки 					= ЭтотОбъект.СубконтоДт1;
			КонецЕсли;	
		Иначе
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				Если Проводка.Период >= '20150101' Тогда
					Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
				Иначе
					Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();	
				КонецЕсли;
		
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
				Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
				Проводка.СубконтоДт.ФизическиеЛица					= Справочники.ФизическиеЛица.СтороннееФизическоеЛицо;
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.Организации						= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.ФизическиеЛица					= Справочники.ФизическиеЛица.СтороннееФизическоеЛицо;
		
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда Тогда
					Движение 									= Движения.РасчетыСПерсоналом.Добавить();
					Движение.ВидДвижения						= ВидДвиженияНакопления.Расход;
					Движение.Регистратор						= ЭтотОбъект.Ссылка;
					Движение.Период								= ЭтотОбъект.Дата;
					Движение.Организация						= ЭтотОбъект.Организация;
					Движение.Физлицо							= ЭтотОбъект.Контрагент;
					Движение.Сумма								= ЭтотОбъект.СуммаДокумента;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.СубконтоДт3);
				КонецЕсли;
			Иначе	
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 				= ЭтотОбъект.Дата;
				Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
				Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
				
				Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				Если Проводка.Период >= '20150101' Тогда
					Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
				Иначе
					Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();		
				КонецЕсли;
		
				Проводка.Содержание									= "Прочий расход денежных средств";
				Проводка.СчетДт										= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда Тогда
					Движение 									= Движения.РасчетыСПерсоналом.Добавить();
					Движение.ВидДвижения						= ВидДвиженияНакопления.Расход;
					Движение.Регистратор						= ЭтотОбъект.Ссылка;
					Движение.Период								= ЭтотОбъект.Дата;
					Движение.Организация						= ЭтотОбъект.Организация;
					Движение.Физлицо							= ЭтотОбъект.Контрагент;
					Движение.Сумма								= ЭтотОбъект.СуммаДокумента;
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 				= ЭтотОбъект.Дата;
		Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
		Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
		//Проводка.Организация			= Организация;
		//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
		
		Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		Если Проводка.Период >= '20150101' Тогда
			Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
		Иначе
			Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();		
		КонецЕсли;
		
		Проводка.Содержание									= "Выплата ЗП";
		Проводка.СчетДт										= ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
		Проводка.СубконтоДт.Организации				= ЭтотОбъект.Организация;
		
		Движение 									= Движения.РасчетыСПерсоналом.Добавить();
		Движение.ВидДвижения						= ВидДвиженияНакопления.Расход;
		Движение.Регистратор						= ЭтотОбъект.Ссылка;
		Движение.Период								= ЭтотОбъект.Дата;
		Движение.Организация						= ЭтотОбъект.Организация;
		Движение.Физлицо							= ЭтотОбъект.Контрагент;
		Движение.Сумма								= ЭтотОбъект.СуммаДокумента;
		
	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДепозитаАрендатору) Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 				= ЭтотОбъект.Дата;
		Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
		Проводка.Сумма					= ЭтотОбъект.СуммаДокумента;
		//Проводка.Организация			= Организация;
		//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
		
		Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		Если Проводка.Период >= '20150101' Тогда
			Проводка.СубконтоКт.Организации 				= ЭтотОбъект.Организация;
		Иначе
			Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();		
		КонецЕсли;
		
		Проводка.СчетДт										= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.СубконтоДт3);
		Проводка.Содержание									= ЭтотОбъект.ВидОперации;
		
	КонецЕсли;
	
	
	Если ЭтотОбъект.ИнкассацияПринята Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 									= ЭтотОбъект.ДатаПриемаИнкассации;
		Проводка.Сумма										= ЭтотОбъект.СуммаПриемаИнкассации;
		//Проводка.Организация								= Организация;
		//Проводка.СтруктурнаяЕдиница							= СтруктурнаяЕдиница;
		
		Проводка.СчетДт										= ПланыСчетов.Финансовый.Касса;
		Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяиЕдиницаПриемаИнкассации;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		Если Проводка.Период >= '20150101' Тогда
			Проводка.СубконтоДт.Организации 				= ЭтотОбъект.Организация;
		Иначе
			Проводка.СубконтоКт.Организации 				= Справочники.Организации.ПустаяСсылка();		
		КонецЕсли;
		Проводка.СчетКт										= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
		Проводка.СубконтоКт.Организации						= ЭтотОбъект.Организация;
		Проводка.СубконтоКт.ИсточникиДенежныхСредств		= ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.Содержание									= "Прием инкассации";
		
	КонецЕсли;
	//Иначе
	//	Для Каждого Строка Из ЗаявкаНаРасходованиеСредств.ТорговыеТочки Цикл
	//		Проводка = Движения.Финансовый.Добавить();
	//		Проводка.Период 				= Дата;
	//		Проводка.СчетКт 				= ПланыСчетов.Финансовый.Касса;
	//		Проводка.Сумма					= Строка.Сумма;
	//		Проводка.Организация			= Организация;
	//		Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
	//		
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтруктурныеЕдиницы", СтруктурнаяЕдиница);
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.ТорговаяТочка);	
	//		
	//		Проводка.СчетДт										= СчетУчетаРасчетовСКонтрагентом;
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СубконтоДт1);
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СубконтоДт2);
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СубконтоДт3);
	//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,Строка.ТорговаяТочка);
	//		Проводка.Содержание									= "Оплата поставщику";
	//	КонецЦикла;
	//КонецЕсли;
	
	ОбщиеПроцедуры.ПровестиДокументПоРегиструВзаиморасчетыПоАренде(ЭтотОбъект, Отказ);
	
	
	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьРасход();
	Движение.Период 			= ЭтотОбъект.Дата;
	Движение.Организация 		= ЭтотОбъект.Организация;
	Движение.Контрагент 		= ЭтотОбъект.Контрагент;
	Движение.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
	Движение.ЗаявкаНаРасходованиеСредств = ЭтотОбъект.ЗаявкаНаРасходованиеСредств;
	Движение.Сумма 				= ЭтотОбъект.СуммаДокумента;
	
	//Если НЕ ЗначениеЗаполнено(Задача)
	//		И ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
	//	СоздатьЗадачуПоДокументу(ЗаявкаНаРасходованиеСредств, Справочники.ВидыЗадачПользователей.ОплатаЗаявкиНаРасходование, ЗаявкаНаРасходованиеСредств.Ответственный)	
	//КонецЕсли;
	
	БухгалтерскийУчет.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Финансовый);
	//АК++ tuga #13455
	АК_КонтрольЗадолженности.ОбработкаПроведения(ЭтотОбъект.Ссылка, Отказ, РежимПроведения);
	//AK-
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый, ЭтотОбъект.Организация);
	
	//+++АК БЕЛН 20170413
	Если Не Отказ Тогда
		Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Ссылка);
		ОбменДанными.Получатели.Добавить(Узел);
	КонецЕсли; 
	//---АК БЕЛН 20170413
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ПериодРегистрации 	= Дата("00010101");
	ЭтотОбъект.Депозит 				= Ложь;
	ЭтотОбъект.НомерВАсторе 		= "";
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
	
	ЭтотОбъект.НомерСумки = "";
	
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		Если ДанныеЗаполнения.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для оплаты заявка должна быть акцептована");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если НЕ ДанныеЗаполнения.ПринятоКОплате Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для оплаты заявка должна быть принята к оплате");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Если (ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "131010"
					ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "131011")
				И (ДанныеЗаполнения.ТорговыеТочки.Количество() > 1) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС необходико создавать отдельный РКО по каждой ТТ");
			СтандартнаяОбработка = Ложь;
			Возврат;
		ИначеЕсли (ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "120610" //Оплата промоутера
				ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "200701" //Оплата промоутера для открытия ТТ
				ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
				ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "200703" //Оплата оформления для открытия ТТ
				ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "139290" //Оплата прочего (Оплата за замену продавцов)
				ИЛИ ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код = "141023") //Оплата расходов на проект "Общественный контроль" (оплата УЕК)
				И НЕ мАвтоматическоеЗаполнениеДокумента Тогда
			//тзТТ = ДанныеЗаполнения.ТорговыеТочки.Выгрузить(, "ТорговаяТочка, ФИОПолучателя");
			//тзТТ.Свернуть("ТорговаяТочка, ФИОПолучателя");
			//Если тзТТ.Количество() <> 1  Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС необходико создавать отдельный РКО по каждого соответствия Торговая точка - ФИО получателя");
			//	СтандартнаяОбработка = Ложь;
			//	Возврат;				
			//КонецЕсли;
			тзТТ = ДанныеЗаполнения.ТорговыеТочки.Выгрузить(, "ТорговаяТочка");
			тзТТ.Свернуть("ТорговаяТочка");
			Если тзТТ.Количество() <> 1  Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС необходимо создавать отдельный РКО для каждого соответствия Торговой точки");
				СтандартнаяОбработка = Ложь;
				Возврат;				
			КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
		Если НЕ мАвтоматическоеЗаполнениеДокумента Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ДанныеЗаполнения);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходИзКассы.Ссылка
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходИзКассы
			|ГДЕ
			|	РасходИзКассы.Проведен
			|	И РасходИзКассы.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств
			|
			|УПОРЯДОЧИТЬ ПО
			|	РасходИзКассы.Дата";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				Если Вопрос("Данная заявка уже оплачена, все равно оплатить? Нажмите ДА для создания платежа по текущей заявке, нажмите НЕТ для открытия существующих платежей", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Пока Выборка.Следующий() Цикл
						Выборка.Ссылка.ПолучитьФорму().Открыть();
					КонецЦикла;
					
					СтандартнаяОбработка = Ложь;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
		ЭтотОбъект.ЦФО 					= ДанныеЗаполнения.ЦФО;
		ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.БанковскийСчетКасса;
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		ЭтотОбъект.СуммаДокумента 		= ДанныеЗаполнения.СуммаДокумента;
		ЭтотОбъект.СчетОрганизации 		= ДанныеЗаполнения.БанковскийСчетКасса;
		Если ДанныеЗаполнения.Контрагент = "Стороннее физическое лицо" Тогда
			ЭтотОбъект.Выдать = ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество;
			ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу = Истина;
		Иначе	
			ЭтотОбъект.Выдать = ДанныеЗаполнения.Контрагент;
		КонецЕсли;	
			
		ЭтотОбъект.ЗаявкаНаРасходованиеСредств = ДанныеЗаполнения.Ссылка;
		//АК БЕЛН 14.07.2016++
		//Стр=ДокументыОснования.Добавить();
		//Стр.ДокументОснование=ЗаявкаНаРасходованиеСредств;
		//АК БЕЛН 14.07.2016--
		ЭтотОбъект.ПериодРегистрации = НачалоМесяца(ДанныеЗаполнения.НачалоПериодаАренды);
		
		Если ДанныеЗаполнения.ТорговыеТочки.Количество() = 1 Тогда
			ЭтотОбъект.ТорговаяТочкаЗаявки = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
		КонецЕсли;
		
		Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010" //Оплата аренды (торговых точек и магазинов)
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131011" Тогда //Оплата депозита за аренду (торговых точек и магазинов)
			
			Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
			Иначе
				Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010" Тогда //Оплата аренды (торговых точек и магазинов)
					ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыПоАренде; //60.2
				ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131011" Тогда  //Оплата депозита за аренду (торговых точек и магазинов)
					ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ОбеспечительныйВзнос; //60.1
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010" Тогда //Оплата аренды (торговых точек и магазинов)
				Если ДанныеЗаполнения.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
					ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю;
				Иначе
					ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю;
				КонецЕсли;
			ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131011" Тогда  //Оплата депозита за аренду (торговых точек и магазинов)
				ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю;
			КонецЕсли;
			
			ЭтотОбъект.СубконтоДт1 = ЭтотОбъект.Организация;
			ЭтотОбъект.СубконтоДт2 = ЭтотОбъект.Контрагент;
			ЭтотОбъект.СубконтоДт3 = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
			
			пКонтрагент = ?(ТипЗнч(ДанныеЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты"), ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.КонтрагентПоАренде);
			ЭтотОбъект.Контрагент 			= пКонтрагент;
			ЭтотОбъект.ДоговорКонтрагента 	= ПолучитьДоговорПоТТ(ЭтотОбъект.Организация, пКонтрагент, ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка);
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " +
											ДанныеЗаполнения.ВнешнееФизЛицоОтчество	+
											?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.Контрагент +
								?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") +
								ДанныеЗаполнения.НазначениеПлатежа, "") +
								?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "",
									", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "135012" Тогда //Оплата Зарплаты (Зарплата Складских работников)
			
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты;
			ЭтотОбъект.СубконтоДт1 = ЭтотОбъект.Контрагент;
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
								+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, "") + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.КонтрагентПоАренде), ", контрагент: " + ДанныеЗаполнения.КонтрагентПоАренде, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "134010" Тогда //Оплата Зарплаты (Зарплата Управления расчета заказов)
			
			ЭтотОбъект.ВидОперации 	= Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты;
			ЭтотОбъект.СубконтоДт1 	= Контрагент;
			
			СтрСотрудники = "";
			Для Каждого Строка Из ДанныеЗаполнения.ТорговыеТочки Цикл
				СтрСотрудники = СтрСотрудники + ?(СокрЛП(СтрСотрудники) <> "", ", ", "") + Строка.ФИОПолучателя + " - " + Формат(Строка.Сумма, "ЧДЦ=2; ЧН=0,00");
			КонецЦикла;
			ЭтотОбъект.Основание 	= "выплата зарплаты сотрудникам: " + СтрСотрудники;
			ЭтотОбъект.Комментарий 	= "" + ЭтотОбъект.Контрагент + ?(ЗначениеЗаполнено(ЭтотОбъект.Контрагент), ", ", "") + "выплата зарплаты сотрудникам: " + СтрСотрудники;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "310310" Тогда
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
			ЭтотОбъект.СубконтоДт1 = Организация;
			ЭтотОбъект.СубконтоДт2 = Контрагент;
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа;
			Если ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
								+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "120610" Тогда //Оплата промоутера
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; //44.3
			ЭтотОбъект.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20610"); //Промо на точке (в магазине)
			ЭтотОбъект.СубконтоДт3 = ДанныеЗаполнения.ЦФО;
			
			СтрТТ = "";
			Если мАвтоматическоеЗаполнениеДокумента Тогда
				ЭтотОбъект.СубконтоДт1 = мПараметрЗаполненияДокумента.ТорговаяТочка;
				Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
					мПараметрЗаполненияДокумента.ФИОПолучателя = ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество;
				КонецЕсли;	
				
				ЭтотОбъект.ТорговаяТочкаЗаявки 	= мПараметрЗаполненияДокумента.ТорговаяТочка;
				
				ЭтотОбъект.СуммаДокумента 		= 0;
				Для Каждого Строка Из ДанныеЗаполнения.ТорговыеТочки Цикл
					Если Строка.ТорговаяТочка = мПараметрЗаполненияДокумента.ТорговаяТочка Тогда //Резерв
						СтрТТ = СтрТТ + ?(СокрЛП(СтрТТ) <> "", ", ", "") + ?(Строка.ТорговаяТочка.Код <> "ЦФО_100", Строка.ТорговаяТочка, Строка.Адрес) + " (" + Формат(Строка.НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(Строка.КонецПериода, "ДФ=dd.MM.yyyy") + ")";
						ЭтотОбъект.СуммаДокумента = ЭтотОбъект.СуммаДокумента + Строка.Сумма;
					КонецЕсли;
				КонецЦикла;
				ЭтотОбъект.Комментарий 	= ?(СокрЛП(мПараметрЗаполненияДокумента.ФИОПолучателя) <> "", ", " + мПараметрЗаполненияДокумента.ФИОПолучателя, "") + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "" ИЛИ СокрЛП(мПараметрЗаполненияДокумента.ФИОПолучателя) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(СтрТТ) <> "", ", по ТТ: " + СтрТТ, "");
				ЭтотОбъект.Основание 	= ЭтотОбъект.Комментарий;
				ЭтотОбъект.Выдать 		= мПараметрЗаполненияДокумента.ФИОПолучателя;
			Иначе
				ЭтотОбъект.СубконтоДт1 = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
				
				Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
					ФИОПолучателя = ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество;
				Иначе
					//ФИОПолучателя = ДанныеЗаполнения.ТорговыеТочки[0].ФИОПолучателя;
					ФИОПолучателя = ДанныеЗаполнения.Контрагент;
				КонецЕсли;
				
				ЭтотОбъект.Комментарий 	= ?(СокрЛП(ФИОПолучателя) <> "", ", " + ФИОПолучателя, "") + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "" ИЛИ СокрЛП(ФИОПолучателя) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ", " + ?(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка.Код <> "ЦФО_100", ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, ДанныеЗаполнения.ТорговыеТочки[0].Адрес) + " (" + Формат(ДанныеЗаполнения.ТорговыеТочки[0].НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(ДанныеЗаполнения.ТорговыеТочки[0].КонецПериода, "ДФ=dd.MM.yyyy") + ")";
				ЭтотОбъект.Основание 	= ЭтотОбъект.Комментарий;
				ЭтотОбъект.Выдать 		= ФИОПолучателя;				
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "200701" //Оплата промоутера для открытия ТТ
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "200703" Тогда //Оплата оформления для открытия ТТ
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.Инвестиции; //01
			
			СтрТТ = "";
			Если мАвтоматическоеЗаполнениеДокумента Тогда
				ЭтотОбъект.СубконтоДт1 = мПараметрЗаполненияДокумента.ТорговаяТочка;
				Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
					мПараметрЗаполненияДокумента.ФИОПолучателя = ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество;
				КонецЕсли;
				
				ЭтотОбъект.ЭтотОбъект.ТорговаяТочкаЗаявки = мПараметрЗаполненияДокумента.ТорговаяТочка;
				
				ЭтотОбъект.СуммаДокумента = 0;
				Для Каждого Строка Из ДанныеЗаполнения.ТорговыеТочки Цикл
					Если Строка.ТорговаяТочка = мПараметрЗаполненияДокумента.ТорговаяТочка Тогда
						СтрТТ = СтрТТ + ?(СокрЛП(СтрТТ) <> "", ", ", "") + ?(Строка.ТорговаяТочка.Код <> "ЦФО_100", Строка.ТорговаяТочка, Строка.Адрес) + " (" + Формат(Строка.НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(Строка.КонецПериода, "ДФ=dd.MM.yyyy") + ")";
						ЭтотОбъект.СуммаДокумента = ЭтотОбъект.СуммаДокумента + Строка.Сумма;
					КонецЕсли;
				КонецЦикла;
				ЭтотОбъект.Комментарий 	= "" + ЭтотОбъект.Контрагент + ?(СокрЛП(мПараметрЗаполненияДокумента.ФИОПолучателя) <> "", ", " + мПараметрЗаполненияДокумента.ФИОПолучателя, "") + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "" ИЛИ СокрЛП(мПараметрЗаполненияДокумента.ФИОПолучателя) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(СтрТТ) <> "", ", по ТТ: " + СтрТТ, "");
				ЭтотОбъект.Основание 	= ЭтотОбъект.Комментарий;
				ЭтотОбъект.Выдать 		= мПараметрЗаполненияДокумента.ФИОПолучателя;
			Иначе
				ЭтотОбъект.СубконтоДт1 = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
				
				Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
					ФИОПолучателя = ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество;
				Иначе
					//ФИОПолучателя = ДанныеЗаполнения.ТорговыеТочки[0].ФИОПолучателя;
					ФИОПолучателя = ДанныеЗаполнения.Контрагент;
				КонецЕсли;
				
				Комментарий = "" + Контрагент + ?(СокрЛП(ФИОПолучателя) <> "", ", " + ФИОПолучателя, "") + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "" ИЛИ СокрЛП(ФИОПолучателя) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка.Код <> "ЦФО_100", ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка, ДанныеЗаполнения.ТорговыеТочки[0].Адрес) + " (" + Формат(ДанныеЗаполнения.ТорговыеТочки[0].НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(ДанныеЗаполнения.ТорговыеТочки[0].КонецПериода, "ДФ=dd.MM.yyyy") + ")";
				Основание = Комментарий;
				Выдать = ФИОПолучателя;				
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "132010" //Оплата за доставку транспорт Строгино
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "132020" //Оплата за доставку транспорт Марьино
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "135011" Тогда //Оплата Аренда склада Строгино + доп. Расходы
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ПрочаяЗадолженность; //60.4
			ЭтотОбъект.СубконтоДт1 						= ЭтотОбъект.Организация;
			Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "135011" Тогда //Оплата Аренда склада Строгино + доп. Расходы
				ЭтотОбъект.СубконтоДт2 = Справочники.Контрагенты.НайтиПоКоду("000000113"); //Портленд(склад)
			Иначе
				ЭтотОбъект.СубконтоДт2 = ЭтотОбъект.Контрагент;
			КонецЕсли;			
			
			Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "132010" //Оплата за доставку транспорт Строгино
					ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "132020" Тогда //Оплата за доставку транспорт Марьино
				пСтатья = "транспортные расходы";
			ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "135011" Тогда  //Оплата Аренда склада Строгино +доп. Расходы
				пСтатья = "аренда склада Строгино";
			КонецЕсли;
			ЭтотОбъект.Основание = пСтатья + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy");
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
						+ ", " + пСтатья + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ", " + пСтатья + ", за период с " + Формат(ДанныеЗаполнения.НачалоПериодаАренды, "ДФ=dd.MM.yyyy") + " по " + Формат(ДанныеЗаполнения.КонецПериодаАренды, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "139397" Тогда //Оплата Материальной помощи, компенсаций и премий
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения; //44.2
			ЭтотОбъект.СубконтоДт1 = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
			ЭтотОбъект.СубконтоДт2 = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39397"); //Материальная помощь, компенсации и премии
			ЭтотОбъект.СубконтоДт3 = ДанныеЗаполнения.ЦФО;
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа;
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
						+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "139290" Тогда //Оплата прочего (Оплата за замену продавцов)
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ?(ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.ПустаяСсылка(), ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения, ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения); //44.3, 44.2
			ЭтотОбъект.СубконтоДт1 	= ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
			ЭтотОбъект.СубконтоДт2 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39290"); //Прочие (Управление Персонала)
			ЭтотОбъект.СубконтоДт3 	= ДанныеЗаполнения.ЦФО;
			ЭтотОбъект.ЦФО 			= ДанныеЗаполнения.ТорговыеТочки[0].ЦФО;
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа;
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
						+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "141023" Тогда //Оплата расходов на проект "Общественный контроль" (оплата УЕК)
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения; //44.2
			ЭтотОбъект.СубконтоДт1 	= ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
			ЭтотОбъект.СубконтоДт2 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39290"); //Прочие (Управление Персонала)
			ЭтотОбъект.СубконтоДт3 	= ДанныеЗаполнения.ЦФО;
			ЭтотОбъект.ЦФО 			= ДанныеЗаполнения.ТорговыеТочки[0].ЦФО;
			
			ЭтотОбъект.Основание 	= ДанныеЗаполнения.НазначениеПлатежа;
			ЭтотОбъект.Комментарий 	= "" + ДанныеЗаполнения.КонтрагентПоАренде + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			
		ИначеЕсли ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные Тогда
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
			ЭтотОбъект.СубконтоДт1 = Организация;
			ЭтотОбъект.СубконтоДт2 = Контрагент;
			                                                      
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа;
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
							+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "139311"
				ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "139313" Тогда
				
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
			ЭтотОбъект.СубконтоДт1 	= ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
			ЭтотОбъект.СубконтоДт2 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду(Прав(СокрЛП(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код), 5));
			ЭтотОбъект.СубконтоДт3 	= ДанныеЗаполнения.ЦФО;
			ЭтотОбъект.ЦФО 			= ДанныеЗаполнения.ТорговыеТочки[0].ЦФО;
			
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа;
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
						+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "");
			Иначе	
				ЭтотОбъект.Комментарий = СокрЛП(ДанныеЗаполнения.НазначениеПлатежа);
			КонецЕсли;
			
		Иначе
			
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами; //71
			ЭтотОбъект.СубконтоДт1 						= ЭтотОбъект.Организация;
			ЭтотОбъект.СубконтоДт2 						= ЭтотОбъект.Контрагент;
			                          
			ЭтотОбъект.Основание = ДанныеЗаполнения.НазначениеПлатежа + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочкиСписок) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочкиСписок, "");
			Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
				ЭтотОбъект.Комментарий = "" + ДанныеЗаполнения.ВнешнееФизЛицоФамилия + " " + ДанныеЗаполнения.ВнешнееФизЛицоИмя + " " + ДанныеЗаполнения.ВнешнееФизЛицоОтчество
								+ ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочкиСписок) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочкиСписок, "");
			Иначе	
				ЭтотОбъект.Комментарий = "" + ЭтотОбъект.Контрагент + ?(СокрЛП(ДанныеЗаполнения.НазначениеПлатежа) <> "", ?(ЗначениеЗаполнено(Контрагент), ", ", "") + ДанныеЗаполнения.НазначениеПлатежа, "") + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТорговыеТочкиСписок) <> "", ", по ТТ: " + ДанныеЗаполнения.ТорговыеТочкиСписок, "");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтотОбъект.ВыдачаСтороннемуФизическомуЛицу Тогда
			пСчетУчета = ОбщиеПроцедуры.ПолучитьСчетДляРКОПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
			Если НЕ ЗначениеЗаполнено(пСчетУчета) Тогда
				Если Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "1" Тогда
					//Если СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные = Ложь Тогда
						пСчетУчета = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; //44.3
					//Иначе
					//	пСчетУчета = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения; //44.2
					//КонецЕсли;
				КонецЕсли;
				
				Если Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "2" Тогда
					пСчетУчета = ПланыСчетов.Финансовый.Инвестиции; //01
				КонецЕсли;	
			КонецЕсли;
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = пСчетУчета;
			Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения //44.3
					ИЛИ ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения //44.2
				Тогда 
				Если ДанныеЗаполнения.ТорговыеТочки.Количество() > 0 Тогда
					ЭтотОбъект.СубконтоДт1 	= ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
				Иначе
					ЭтотОбъект.СубконтоДт1 	= Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все", Истина);
				КонецЕсли;
				//+++АК SUVV 2018.02.28 ИП-00017941
				//ЭтотОбъект.СубконтоДт2 		= ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
				ЭтотОбъект.СубконтоДт2 		= ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(Дата, СтатьяДвиженияДенежныхСредств);
				//---АК SUVV
				ЭтотОбъект.СубконтоДт3 		= ДанныеЗаполнения.ЦФО;
			ИначеЕсли ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.Инвестиции Тогда
				Если ДанныеЗаполнения.ТорговыеТочки.Количество() > 0 Тогда
					ЭтотОбъект.СубконтоДт1 = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ТипЗнч(ДанныеЗаполнения.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")
				И (Найти(НРег(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Наименование), "зарплаты") > 0
					ИЛИ Найти(НРег(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Наименование), "зарплата") > 0) Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты;
		КонецЕсли;	
	КонецЕсли;
	
	ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ЭтотОбъект.СтатьяДвиженияДенежныхСредств, ЭтотОбъект.ВидОперации);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	////mind заблокируем таблицу
	//ДокМетаданные = Метаданные();
	//Блокировка = Новый БлокировкаДанных();
	//ЭлементБлокировка = Блокировка.Добавить();
	//ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
	//ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировка.УстановитьЗначение("Вид", ДокМетаданные.Имя);
	//ЭлементБлокировка.УстановитьЗначение("Организация", Организация);
	//ЭлементБлокировка.УстановитьЗначение("Период", Дата);
	//Блокировка.Заблокировать();
	//
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Вид", ДокМетаданные.Имя);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	НомераДокументов.Номер,
	//               |	НомераДокументов.Организация.Префикс КАК Префикс
	//               |ИЗ
	//               |	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
	//               |ГДЕ
	//               |	НомераДокументов.Период = &Период
	//               |	И НомераДокументов.Вид = &Вид
	//               |	И НомераДокументов.Организация = &Организация";
	//			   
	//Выборка = Запрос.Выполнить().Выбрать();
	//СтандартнаяОбработка = Ложь;
	//Если Выборка.Следующий() Тогда
	//	МаксНомер = Выборка.Номер + 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
	//		Номер = СокрЛП(Выборка.Префикс) + Сред(Номер, СтрДлина(Выборка.Префикс) + 1);
	//	КонецЕсли;
	//Иначе
	//	МаксНомер = 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Организация.Префикс) Тогда
	//		Номер = СокрЛП(Организация.Префикс) + Сред(Номер, СтрДлина(Организация.Префикс) + 1);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
	//Запись.Период = НачалоГода(Дата);
	//Запись.Вид = ДокМетаданные.Имя;
	//Запись.Организация = Организация;
	//Запись.Номер = МаксНомер;
	//Запись.Записать();
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мАвтоматическоеЗаполнениеДокумента = Ложь;
