
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура УстановитьВидимостьСубконто()

	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьСубконо()

Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)

	УстановитьВидимостьСубконто();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоДт1, ЭлементыФормы.СубконтоДт1,
	СубконтоДт2, ЭлементыФормы.СубконтоДт2,
	СубконтоДт3, ЭлементыФормы.СубконтоДт3);
	
	
	Для Ном = 1 по СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоДт"+Ном].Значение) Тогда
			Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
				ОтборЦФО = Новый Структура;
				ОтборЦФО.Вставить("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
				СтруктураРезультата = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(Дата,ОтборЦФО);
				ЭлементыФормы["СубконтоДт"+Ном].Значение = СтруктураРезультата.ЦФО;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт"+Ном].Значение) = Тип("СправочникСсылка.Организации") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = Организация;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт"+Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = СтруктурнаяЕдиница;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт"+Ном].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = СтатьяДвиженияДенежныхСредств;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт"+Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	мСчетБУ = Элемент.Значение;

КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьТипКонтрагент();
	
	УстановитьСчетаУчетаБУ();
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);
	
	УстановитьВидимость();
	
	ИзменитьРеквизитыПоВидуОперации();
	
	СтатьяДДС_БУ_ПоУмолчанию();
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	УстановитьВидимостьСубконто();
	//Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	//	РаботаСДиалогами.УстановитьТекущуюСтраницу("ВзносНаличнымиВБанк",ЭлементыФормы.ОсновнаяПанель);

	ЭлементыФормы.КонтрагентШапка.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.КонтрагентШапка.КнопкаВыбора = Истина;
	ЭлементыФормы.КонтрагентШапка.КнопкаСпискаВыбора = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация  Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Инкассация",ЭлементыФормы.ОсновнаяПанель);
        УстановитьДоступностьПолейИнкассации();
	//	ЭлементыФормы.РамкаПолучатель.Заголовок = "Взаиморасчеты с подотчетным лицом";
	//	ЭлементыФормы.НадписьФизЛицо.Заголовок	= "Подотчетник:";
	
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Ложь;
		//ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Ложь;
		//ЭлементыФормы.КонтрагентШапка.Видимость = Ложь;
		ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Истина;
		ЭлементыФормы.КонтрагентШапка.Видимость = Истина;
		
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000203"));
		СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("Т0002607"));
		ЭлементыФормы.КонтрагентШапка.СписокВыбора = СписокКонтрагентов;
		ЭлементыФормы.КонтрагентШапка.КнопкаВыбора = Ложь;
		ЭлементыФормы.КонтрагентШапка.КнопкаСпискаВыбора = Истина;
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);

	//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
	//	РаботаСДиалогами.УстановитьТекущуюСтраницу("ВозвратПодотчетника",ЭлементыФормы.ОсновнаяПанель);
	//	ЭлементыФормы.РамкаПолучатель.Заголовок = "Расчеты с работниками по займам";
	//	ЭлементыФормы.НадписьФизЛицо.Заголовок  = "Сотрудник:";
	//
	
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Ложь;
		ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Ложь;
		ЭлементыФормы.КонтрагентШапка.Видимость = Ложь;
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ЗаработняПлата",ЭлементыФормы.ОсновнаяПанель);
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			УстановитьТипФизическиеЛица();
		КонецЕсли;
	//	ЭлементыФормы.РамкаПолучатель.Заголовок ="Расчеты с работниками";
	//	ЭлементыФормы.НадписьФизЛицо.Заголовок  ="Сотрудник:";
	
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Ложь;
		ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Ложь;
		ЭлементыФормы.КонтрагентШапка.Видимость = Ложь;
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Истина;
		ЭлементыФормы.КонтрагентШапка.Видимость = Истина;
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость = Истина;
		ЭлементыФормы.ПериодРегистрации.Видимость = Истина;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Истина;
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДепозитаАрендатору) Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.НадписьКонтрагентШапка.Видимость = Истина;
		ЭлементыФормы.КонтрагентШапка.Видимость = Истина;
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьТипКонтрагент(флПриОткрытии=ложь)

	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента="РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаДепозитаАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДепозитаАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее) Тогда
		
		ИмяСправочника = "Контрагенты";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты Тогда
		
		ИмяСправочника = "ФизическиеЛица";
		
	Иначе

		ЕстьКонтрагент=Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Контрагент.ОграничениеТипа = новый ОписаниеТипов(Массив);
			ЭлементыФормы.КонтрагентШапка.ОграничениеТипа = новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если не флПриОткрытии Тогда
			Если НЕ Контрагент=Неопределено Тогда
				Контрагент=Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // УстановитьТипКонтрагент()

Процедура УстановитьТипФизическиеЛица(флПриОткрытии=ложь)

	ИмяСправочника = "ФизическиеЛица";
	ИмяРасчетногоДокумента="РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда

		ЕстьКонтрагент=Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Сотрудник.ОграничениеТипа = новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если не флПриОткрытии Тогда
			Если НЕ Контрагент=Неопределено Тогда
				Контрагент=Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // УстановитьТипФизическиеЛица()


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Расход из кассы");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	УстановитьТипКонтрагент(истина);
	
	УстановитьКнопкиПечати();
КонецПроцедуры

Процедура ПриОткрытии()
		
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		Если ПараметрОбъектКопирования = Неопределено
			И Не ЗначениеЗаполнено(ВидОперации) Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
//			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
		КонецЕсли;
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекущийПользователь);
		
		СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	УстановитьТипКонтрагент(Истина);
	
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОтветственныйЗаявки = ЗаявкаНаРасходованиеСредств.Ответственный;
	ТорговыеТочкиСписок = ЗаявкаНаРасходованиеСредств.ТорговыеТочкиСписок;
	
	Если ЭтоНовый() ИЛИ (ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю 
		И 	ВидОперации <>Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПараметрыАренды);
	КонецЕсли; 
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ПослеЗаписи()
	АК_КонтрольЗадолженности.ЗаполнитьРазделыУчетаКонтрагентаПоДокументу(ЭтотОбъект.Ссылка);
	
	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
КонецПроцедуры


Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
			
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
		ЗаполнитьПоляПечати();
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УстановитьСчетаУчетаБУ();
	
	//СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;

КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Организации") Тогда
			СписокПараметров.Вставить("Организация", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоДт3ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура ИнкассацияПринятаПриИзменении(Элемент)
	УстановитьДоступностьПолейИнкассации();
	Если ИнкассацияПринята Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка",СтруктурнаяЕдиница);
		СтруктураРезультата = РегистрыСведений.СкладыТорговыхТочек.ПолучитьПоследнее(Дата,Отбор);
		ЦентральнаяКасса = СтруктураРезультата.Склад;
		
		ДатаПриемаИнкассации 					= ТекущаяДата();
		СуммаПриемаИнкассации 					= СуммаДокумента;
		СтруктурнаяиЕдиницаПриемаИнкассации 	= ЦентральнаяКасса;
	КонецЕсли
КонецПроцедуры

Процедура УстановитьДоступностьПолейИнкассации()
	ЭлементыФормы.НадписьДатаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.ДатаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.НадписьДатаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.НадписьСуммаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.СуммаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.НадписьСтруктурнаяиЕдиницаПриемаИнкассации.Доступность = ИнкассацияПринята;
	ЭлементыФормы.СтруктурнаяиЕдиницаПриемаИнкассации.Доступность = ИнкассацияПринята;
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, Ссылка, ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	//Если ЭтотОбъект.ЗаявкаНаРасходованиеСредств.Пустая() Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	//Иначе
	//	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ЦФОНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	пФорма = Справочники.СтруктурныеЕдиницы.ПолучитьФормуВыбора(, Элемент);
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Значение = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Использование = Истина;
	пФорма.Открыть();
КонецПроцедуры

Процедура СчетКассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 
	 пФорма = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора(, Элемент);
	 пФорма.ПланСчетовСписок.Отбор.Ссылка.Значение = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	 пФорма.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	 пФорма.Открыть();
КонецПроцедуры

Процедура КонтрагентШапкаПриИзменении(Элемент)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Элемент.Значение.ВАрхиве Тогда
			Предупреждение("Вы выбрали архивного контрагента. Его контактные данные также находятся в архиве", 120);
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Организация <> Справочники.Организации.Избенка Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
			ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
			УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		пФорма = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(, Элемент);
		пФорма.СправочникСписок.Отбор.ВидДоговора.ВидСравнения 	= ВидСравнения.ВСписке;
		пФорма.СправочникСписок.Отбор.ВидДоговора.Значение 		= УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		пФорма.СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
		пФорма.СправочникСписок.Отбор.Владелец.Значение 		= Контрагент;
		пФорма.СправочникСписок.Отбор.Владелец.Использование 	= Истина;
		пФорма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизЛицоПриИзменении(Элемент)
	УстановитьСчетаУчетаБУ();
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);
	
	//mind 2017-03-28
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПоДокументу = Контрагент.УдостоверениеЛичности;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОперацииИсключить = Новый Массив();
	МассивОперацииИсключить.Добавить(Перечисления.ВидыОперацийРКО.Инкассация);
	МассивОперацииИсключить.Добавить(Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	Если МассивОперацииИсключить.Найти(ВидОперации) = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать заявку на расходование средств!");
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ((ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору) 
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору))
		И (Не ЗначениеЗаполнено(ПериодРегистрации)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период аренды (месяц)");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
		Если СуммаДокумента <> ЗаявкаНаРасходованиеСредств.СуммаДокумента
			И СтатьяДвиженияДенежныхСредств.Код <> "120610" //Оплата промоутера
			И СтатьяДвиженияДенежныхСредств.Код <> "200701" //Оплата промоутера для открытия ТТ
			И СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
			И СтатьяДвиженияДенежныхСредств.Код = "200703" //Оплата оформления для открытия ТТ
			Тогда 
			ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не соответствует сумме заявки на расходование средств");
			Отказ = Истина;			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации =  Перечисления.ВидыОперацийРКО.Инкассация И Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент) И ЭтотОбъект.Дата>=Дата(2017,07,24) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать контрагента для инкассации(МКБ или Финчер)");
		Отказ = Истина;			
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеСредствПриИзменении(Элемент)
	ОтветственныйЗаявки = ЗаявкаНаРасходованиеСредств.Ответственный;
	ТорговыеТочкиСписок = ЗаявкаНаРасходованиеСредств.ТорговыеТочкиСписок;
	//АК БЕЛН 14.07.2016++
	//ДокументыОснования.Очистить();
	//Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
	//	Стр=ДокументыОснования.Добавить();
	//	Стр.ДокументОснование=ЗаявкаНаРасходованиеСредств;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ДокументОснование) Тогда
	//	Стр=ДокументыОснования.Добавить();
	//	Стр.ДокументОснование=ДокументОснование;
	//КонецЕсли;
	//АК БЕЛН 14.07.2016--
КонецПроцедуры

Процедура КомментарийПриИзменении(Элемент)
	ЗаполнитьПоляПечати();
КонецПроцедуры

Процедура ЗаполнитьПоляПечати()
	НомерСимвола_Запятая = Найти(Комментарий, ",");
	Если НомерСимвола_Запятая = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Выдать = СокрЛП(Лев(Комментарий, НомерСимвола_Запятая - 1));
	Основание = СокрЛП(Сред(Комментарий, НомерСимвола_Запятая + 1));
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	СтатьяДДС_БУ_ПоУмолчанию();
КонецПроцедуры

Процедура СтатьяДДС_БУ_ПоУмолчанию()
	СтатьяДвиженияДенежныхСредствБУ=ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(СтатьяДвиженияДенежныхСредств,ВидОперации)
КонецПроцедуры	

Процедура СуммаДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеОтчетамиПереопределяемый.ОткрытьОтчетПоАренднымПлатежам(ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница);
	
КонецПроцедуры

Процедура ДействияФормыПараметрыАренды(Кнопка)
	
	Если ЭтоНовый() Тогда
		Сообщить("Данный механизм недоступен для новых документов!");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Если Вопрос("Внимание! Другие изменения будут потеряны! Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Прочитать();
	КонецЕсли;
	
	// Период регистрации
	НовыйПериод = ПериодРегистрации;
	
	БылиИзменения = Ложь;
	
	Если ВвестиЗначение(НовыйПериод, "Введите период аренды", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата)) И ПериодРегистрации<>НовыйПериод Тогда
		ПериодРегистрации = НовыйПериод;
		БылиИзменения = Истина;
	КонецЕсли;
	
	// Тип арендной платы
	Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору) Тогда	
		НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
	Иначе
		НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
	КонецЕсли;
	
	Если ВвестиЗначение(НовыйТипАренднойПлаты, "Введите тип арендной платы") Тогда
		Если НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю Тогда
				ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю;
				БылиИзменения = Истина;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору Тогда
				ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору ;
				БылиИзменения = Истина;
			КонецЕсли;
		ИначеЕсли НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
				ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю ;
				БылиИзменения = Истина;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПостояннойЧастиАрендыАрендатору Тогда
				ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПеременнойЧастиАрендыАрендатору;
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	// Сохранение изменений
	Если БылиИзменения Тогда
		Попытка 
			ОбменДанными.Загрузка = Истина;
			Записать(РежимЗаписиДокумента.Запись);
			ОбменДанными.Загрузка = Ложь;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

//АК++ tuga #13455 19=09-16
Процедура ДействияФормыКонтрольДЗ(Кнопка)
	Если ЭтаФорма.Модифицированность Тогда
		Если Вопрос("Перед выполнением операции документ должен быть записан. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Записать()
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	ОткрытьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ",Новый Структура("СписокДокументов",МассивСсылок),ЭтаФорма);

КонецПроцедуры

//АК--

//mind 2017-03-28
Процедура СотрудникПриИзменении(Элемент)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПоДокументу = Контрагент.УдостоверениеЛичности;
	КонецЕсли;	
	
КонецПроцедуры

//+++susk
Процедура ИзменитьРеквизитыПоВидуОперации()
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлаты Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорКонтрагента = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//ИП-00016878
Процедура ДействияФормыВыгрузитьВБП(Кнопка)
	
	Если ЭтоНовый() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	
	Если Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ");
		Возврат;
	КонецЕсли;
	
	Если Организация = Справочники.Организации.Избенка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У документа организация равна ""Избенка"". Выгрузка производиться не будет.");
		Возврат;
	КонецЕсли;
	
	Если Дата < Дата(2015, 4, 1) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У документа дата меньше 1 апреля 2015. Выгрузка производиться не будет.");
		Возврат;
	КонецЕсли;
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("РасходИзКассы", "РасходИзКассы", ЭтотОбъект); 
	
КонецПроцедуры

//---susk

Процедура СтатьяДвиженияДенежныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры


Процедура СубконтоДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры


Процедура СубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры


Процедура СубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

