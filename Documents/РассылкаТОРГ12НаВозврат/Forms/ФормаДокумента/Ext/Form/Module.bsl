Перем Бухгалтерия;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Рассылка возвратных документов поставщику");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.ОтветственныйБухгалтер = Объект.Ответственный;
		Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
		
		СчетаПоУмолчанию = Новый Массив();
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
		
        Для каждого ТекЭлемент Из СчетаПоУмолчанию Цикл
		
			НоваяСтрока = Объект.СписокСчетов.Добавить();	
			
			НоваяСтрока.Счет = ТекЭлемент;
			НоваяСтрока.УчаствуетВРасчетах = Истина;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) или ЗначениеЗаполнено(ТекСтрока.ОтправленоСФ) 
			//+++ AK suvv 2018.12.10 ИП-00020483
			или ЗначениеЗаполнено(ТекСтрока.ОтправленУПД) или ЗначениеЗаполнено(ТекСтрока.ОтправленУПДПоЭДО) Тогда
			//--- AK suvv 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Заполнение таблицы не возможно так как имеются постоянные данные!";
			Сообщение.Сообщить();	
			
			Возврат
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьНаСервере();
	СоздатьАктыВБухгалтерииНаСервере();	
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)                                                     
	
	ОтправитьПисьмаНаКлиенте("АктСверкиПДФ");
	
	Записать();
КонецПроцедуры

Процедура ПроверитьСтрокуТЧ(МассивСообщений,Знач ПодчиненнаяСтрока = Неопределено,Отказ)
	
	Если ПодчиненнаяСтрока = Неопределено Тогда
		ПодчиненнаяСтрока = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока];
	КонецЕсли;		

	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
			
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
		
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ПочтаБухгалтера) Тогда
		
		МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнен учетная запись электронной почты!");	
		Отказ = Истина;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
		
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстHTML(ПодчиненнаяСтрока,ФамилияИмяБухгалтера="")
	
	СтруктураПараметров = Новый Структура;
		
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ПодчиненнаяСтрока.Организация,ТекущаяДата());
	
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование",ПодчиненнаяСтрока.Контрагент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ПериодОбработки","с "+Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	
	СтруктураПараметров.Вставить("Организация",ПодчиненнаяСтрока.Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор",Руководители.Руководитель);
	
	СтруктураПараметров.Вставить("Комментарий",  ПодчиненнаяСтрока.Комментарий);
	СтруктураПараметров.Вставить("АдресДоставки",Объект.АдресДоставки.ПочтовыйАдрес);
	
	//Для каждого ТекПараметр Из СтруктураПараметров Цикл
	//	
	//	ТекстHTML = СтрЗаменить(ТекстHTML,"%"+ТекПараметр.Ключ,ТекПараметр.Значение);
	//	
	//КонецЦикла;
	
	СтруктураПараметровМногострочные = Новый Структура;  		
	
	ДанныеФизЛицаМенеджера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя.ФизЛицо);
	ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя.ФизЛицо);
	ДанныеФизЛицаДир = ОбщегоНазначения.ПолучитьМассивФИО(Руководители.Руководитель);
	
	
	ФамилияИмяМенеджера = ДанныеФизЛицаМенеджера[0] + " "+ДанныеФизЛицаМенеджера[1];
	ФамилияИмяБухгалтера = ДанныеФизЛицаБухгалтера[0] + " "+ДанныеФизЛицаБухгалтера[1];
	ФамилияИмяДир = ДанныеФизЛицаДир[0] + " "+Лев(ДанныеФизЛицаДир[1],1)+ "."+Лев(ДанныеФизЛицаДир[2],1)+".";
	
	
	
	
	
	Телефоны =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера);
	Телефоны1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера);
	
	ФИОEMAIL =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера,Истина);
	ФИОEMAIL1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера,Истина);
	
	СтруктураПараметровМногострочные.Вставить("Телефоны",Телефоны);
	СтруктураПараметровМногострочные.Вставить("Телефоны1",Телефоны1);
	
	СтруктураПараметровМногострочные.Вставить("ФИОEmail",ФИОEMAIL);
	СтруктураПараметровМногострочные.Вставить("ФИОEmail1",ФИОEMAIL1);
	
	
	
	Макет=Документы.РассылкаТОРГ12НаВозврат.ПолучитьМакет("МакетПисьма");
	Обл=Макет.ПолучитьОбласть("Письмо");
	
	ЗаполнитьЗначенияСвойств(Обл.Параметры,СтруктураПараметров);
	
	Обл.Параметры.Организация=ПодчиненнаяСтрока.Организация.НаименованиеСокращенное;
	Обл.Параметры.Контрагент=ПодчиненнаяСтрока.Контрагент.НаименованиеПолное;
	Обл.Параметры.НомерДог=ПодчиненнаяСтрока.НомерДоговора;                                                                                
	Обл.Параметры.ДатаДог=Формат(ПодчиненнаяСтрока.ДатаДоговора,"ДЛФ=DD");
	СтрПериод=Строка(Формат(Объект.ДатаНачала,"ДФ=dd.MM.yy"))+" - "+Строка(Формат(Объект.ДатаОкончания,"ДФ=dd.MM.yy"));
	Обл.Параметры.Период=СтрПериод;
	Обл.Параметры.Менеджер=ФамилияИмяМенеджера+" "+ПодчиненнаяСтрока.ТелефонМенеджера;
	Обл.Параметры.Бухгалтер=ФамилияИмяБухгалтера+" "+ПодчиненнаяСтрока.ТелефонБухгалтера;
	Обл.Параметры.ФИОДир=ФамилияИмяДир;
	
	
	ТабДок=Новый ТабличныйДокумент;
	ТабДок.Вывести(Обл);
	
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС + ТекстСтиль + Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; border = 0");	
	
	Возврат ТекстПолный;
	
КонецФункции

Процедура УстановитьПараметрыHTML(ТекстHTML,ПодчиненнаяСтрока,ФамилияИмяБухгалтера="")
	
	
КонецПроцедуры	

//+++ AK suvv 2018.12.10 ИП-00020483
&НаКлиенте 
Процедура ОтправитьПисьмаНаКлиенте(Реквизит)
	
	НомераВыбранныхСтрок = ПолучитьНомераВыбранныхСтрок();
	
	Если НомераВыбранныхСтрок.Количество() <> 0 Тогда
		ОтправитьПисьмаНаСервере(Реквизит, НомераВыбранныхСтрок);
	КонецЕсли;	

КонецПроцедуры //--- AK suvv

&НаСервере
Процедура ОтправитьПисьмаНаСервере(Реквизит, НомераВыбранныхСтрок)
	
	СоответствиеШаблонов = Новый Соответствие;
	МассивСообщений = Новый Массив;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
		
	Для каждого ПодчиненнаяСтрока Из ДокОбъект.СписокРассылки Цикл
		//+++ AK suvv 2018.12.10 ИП-00020483
		Если НомераВыбранныхСтрок.Найти(ПодчиненнаяСтрока.НомерСтроки) = неопределено Тогда
			 Продолжить;
		КонецЕсли;
		//--- AK suvv
		
		Если Не	ПодчиненнаяСтрока.Пометка или Не ПодчиненнаяСтрока.ЕстьДокументВБухгалтерии Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Реквизит="СчетФактураПДФ" и ЗначениеЗаполнено(ПодчиненнаяСтрока.ОтправленоСФ) или Реквизит="АктСверкиПДФ" и ЗначениеЗаполнено(ПодчиненнаяСтрока.Отправлено) 
			//+++ AK suvv 2018.12.10 ИП-00020483
			или Реквизит="УПДПДФ" и ЗначениеЗаполнено(ПодчиненнаяСтрока.ОтправленУПД) Тогда
			//--- AK suvv
			
			Продолжить;
			
		КонецЕсли;

		//+++ AK suvv 2018.12.10 ИП-00020483
		Если Реквизит = "СчетФактураПДФ" или Реквизит = "АктСверкиПДФ" Тогда 
			ЗаписатьАктСверкиВХранилище(ПодчиненнаяСтрока);
		ИначеЕсли Реквизит = "УПДПДФ" Тогда
			ЗаписатьУПДВХранилище(ПодчиненнаяСтрока);
		КонецЕсли; 
		//--- AK suvv
	
		Отказ = Ложь;
		
		Если Не	ПодчиненнаяСтрока.Пометка или Не ПодчиненнаяСтрока.ЕстьДокументВБухгалтерии или (Реквизит="СчетФактураПДФ" и Не ЗначениеЗаполнено(ПодчиненнаяСтрока.СчетФактура)) Тогда
			Продолжить;	
		КонецЕсли;
			
		ПроверитьСтрокуТЧ(МассивСообщений,ПодчиненнаяСтрока,Отказ);
		
		//Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
		//	МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон рассылки ТОРГ12 на возврат!");	
		//	Отказ = Истина;
		//КонецЕсли;
		
				
		//Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.АктВБухгалтерииНомер) Тогда
		//	
		//	МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не создан акт в бухгалтерии!!!");	
		//	Отказ = Истина;
		//	
		//КонецЕсли;
		
		Если Отказ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		//ТекстHTML = СоответствиеШаблонов.Получить(ПодчиненнаяСтрока.Организация);
		//
		//
		//Если ТекстHTML = Неопределено Тогда
		//	
		//	ТекстHTML = ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки.ОписаниеHTML;
		//	
		//	ЧтениеHTML = Новый ЧтениеHTML;
		//	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		//	ПостроительDOM = Новый ПостроительDOM;
		//	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		//	
		//	Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		//		
		//		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		//		
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = 
		//		"ВЫБРАТЬ
		//		|	ХранилищеДополнительнойИнформации.Ссылка,
		//		|	ХранилищеДополнительнойИнформации.ИмяФайла
		//		|ИЗ
		//		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		//		|ГДЕ
		//		|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
		//		
		//		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		//		
		//		Результат = Запрос.Выполнить();
		//		
		//		Если Результат.Пустой() Тогда
		//			
		//			Сообщение = Новый СообщениеПользователю;
		//			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
		//			Сообщение.Сообщить();
		//			
		//			Продолжить;
		//			
		//		КонецЕсли;
		//		
		//		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		//		
		//		ВыборкаДетальныеЗаписи.Следующий();
		//		
		//		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		//		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		//		Если Файлы.Количество() = 0 Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		//		
		//		//ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
		//		//
		//		//ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//		//
		//		//ЗначениеКартинка.Записать(ИмяВременногоФайла);
		//		
		//		//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
		//		
		//		ТекстHTML = СтрЗаменить(ТекстHTML,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
		//		
		//	КонецЦикла;
		//	
		//	СоответствиеШаблонов.Вставить(ПодчиненнаяСтрока.Организация,ТекстHTML);
		//	
		//КонецЕсли;
		
		ФамилияИмяБухгалтера = "";
		ТекстПолный = ПолучитьТекстHTML(ПодчиненнаяСтрока,ФамилияИмяБухгалтера);
		
		//Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
		//	
		//	ЖирныйШрифтНач = "";
		//	ЖирныйШрифтКонец = "";                                                                 
		//	Если Не Найти(ТекстHTML,"<P>%"+ТекПараметр.Ключ+"</P>") Тогда
		//		ЖирныйШрифтНач = "<STRONG>";
		//		ЖирныйШрифтКонец = "</STRONG>";  					
		//	КонецЕсли;
		//	
		//	ТекстHTML = СтрЗаменить(ТекстHTML,"<P>"+ЖирныйШрифтНач+"%"+ТекПараметр.Ключ+ЖирныйШрифтКонец+"</P>",ТекПараметр.Значение);
		//	
		//КонецЦикла;
		
		ТаблицаОбъектовКому = СтрЗаменить(ПодчиненнаяСтрока.Почта, ";",Символы.ПС);
		
		МаксимальноеЗначение = СтрЧислоСтрок(ТаблицаОбъектовКому);
		
		//ЗаписатьАктСверкиВХранилище(ПодчиненнаяСтрока);
		
		//ВложенныйАкт =  ПодчиненнаяСтрока[Реквизит].Получить();
		
		ВложенныйАкт=Новый ДвоичныеДанные(ПодчиненнаяСтрока[Реквизит+"ИмяФайла"]);
		
		//+++ AK suvv 2018.12.10 ИП-00020483
		Если Реквизит="АктСверкиПДФ" Тогда
			ВремФайл=КаталогВременныхФайлов()+"ТОРГ12.pdf";
			ВидДокументаВРассылке = "Торг-12";
		ИначеЕсли Реквизит="СчетФактураПДФ" Тогда                                                                                  
			ВремФайл=КаталогВременныхФайлов()+"СчетФактура.pdf";
			ВидДокументаВРассылке = "Счет-фактура";
		ИначеЕсли Реквизит="УПДПДФ" Тогда                                                                                  
			ВремФайл=КаталогВременныхФайлов()+"УПД.pdf";
			ВидДокументаВРассылке = "УПД";
		//--- AK suvv
		КонецЕсли; 
		
		ВложенныйАкт.Записать(ВремФайл);
		
		Для сч=1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
			АдресПолучателя=СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому,сч));
			Попытка
				Послать(АдресПолучателя,ТекстПолный,ПодчиненнаяСтрока.ПочтаБухгалтера,"Рассылка возвратных документов поставщику "+ПодчиненнаяСтрока.Контрагент+" от "+ПодчиненнаяСтрока.Организация,ФамилияИмяБухгалтера,ВремФайл);
				Если Реквизит="АктСверкиПДФ" Тогда
					ПодчиненнаяСтрока.Отправлено = ТекущаяДата();
				//+++ AK suvv 2018.12.10 ИП-00020483
				ИначеЕсли Реквизит="СчетФактураПДФ" Тогда                                                                                 
					ПодчиненнаяСтрока.ОтправленоСФ = ТекущаяДата();
				ИначеЕсли  Реквизит="УПДПДФ" Тогда
					ПодчиненнаяСтрока.ОтправленУПД = ТекущаяДата();
				//--- AK suvv
			КонецЕсли;
			//+++ AK suvv 2018.12.10 ИП-00020483
			Сообщить("Рассылка возвратных документов вида " + ВидДокументаВРассылке + " поставщику " + ПодчиненнаяСтрока.Контрагент + " успешно выполнена.");
			//--- AK suvv
			Исключение
				Сообщить(АдресПолучателя);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;    
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект,"Объект");
	
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры // ОтправитьПисьмаНаСервере()

&НаСервере
Функция СформироватьПредставленияКонтакта(Контакт,ОсновнойБухгалтерПокупателя,ОсновнойМенеджерПокупателя,Должность,ФамилияИмяМенеджера,Жирным = Ложь)
	ЖирныйШрифтНач = "";
	ЖирныйШрифтКонец = "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач = "<STRONG>";
		ЖирныйШрифтКонец = "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
	И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя Или Должность = "Бухгалтер")
	,"<P>"+ЖирныйШрифтНач+Должность+" " +ФамилияИмяМенеджера + " "+Контакт+ЖирныйШрифтКонец+"</P>",""); 
	
КонецФункции // СформироватьПредставленияКонтакта()
 

&НаСервере
Процедура ЗаполнитьНаСервере(Номер = Неопределено,ПоСтроке = Ложь)
	
	Если Номер <> Неопределено Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ТекущиеДанные = ДокументОбъект.СписокРассылки.Получить(Номер-1);
	КонецЕсли;
	
	Если Объект.СписокРассылки.Количество() И ПоСтроке = Ложь Тогда
		
		Объект.СписокРассылки.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	
	//Если Не ПоСтроке Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
		               |	ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
		               |	ЛОЖЬ КАК Пометка,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто3 КАК ТорговаяТочка,
		               |	ФинансовыйОстаткиИОбороты.Регистратор КАК ДокументВозврата
		               |ПОМЕСТИТЬ Данные
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
		               |			&ДатаНачала,
		               |			&ДатаОкончания,
		               |			Регистратор,
		               |			,
		               |			Счет В (&МассивСчетов),
		               |			,
					   |			Субконто2 ССЫЛКА Справочник.Контрагенты
					   |				И Субконто2.НеОтправлятьУведомления = ЛОЖЬ
					   |				И Субконто1 ССЫЛКА Справочник.Организации
					   |				И Субконто1 = &Субконто1
					   |				И (Субконто2.СтатьяДвиженияДенежныхСредств = &СтатьяДДС
					   |					ИЛИ &СтатьяДДС = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
					   |				И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя
					   |) КАК ФинансовыйОстаткиИОбороты
					   |ГДЕ
					   |	ФинансовыйОстаткиИОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику и ФинансовыйОстаткиИОбороты.Регистратор=&Регистратор
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ФинансовыйОстаткиИОбороты.Субконто1,
		               |	ФинансовыйОстаткиИОбороты.Субконто2,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто3,
		               |	ФинансовыйОстаткиИОбороты.Регистратор
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОсновнойБухгалтерПокупателя,
		               |	ОсновнойМенеджерПокупателя;";
						
						
						
		
	//Иначе
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	ЛОЖЬ КАК Пометка,
	//	|	Контрагенты.Ссылка КАК Контрагент,
	//	|	Организации.Ссылка КАК Организация,
	//	|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
	//	|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
	//	|   NULL как ТорговаяТочка
	//	|ПОМЕСТИТЬ Данные
	//	|ИЗ
	//	|	Справочник.Контрагенты КАК Контрагенты
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	//	|		ПО (ИСТИНА)
	//	|ГДЕ
	//	|	Контрагенты.Ссылка = &Контрагент
	//	|	И Организации.Ссылка = &Организация
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	ОсновнойБухгалтерПокупателя,
	//	|	ОсновнойМенеджерПокупателя;";
	//	
	//	Запрос.УстановитьПараметр("Организация",?(ТекущиеДанные.Организация.Пустая(),Объект.Организация,ТекущиеДанные.Организация));
	//	Запрос.УстановитьПараметр("Контрагент",ТекущиеДанные.Контрагент);
	//	
	//КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	Данные.Организация,
	                              |	Данные.Контрагент КАК Контрагент,
	                              |	Данные.Пометка,
	                              |	Данные.ОсновнойБухгалтерПокупателя,
	                              |	Данные.ОсновнойМенеджерПокупателя,
	                              |	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	                              |	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	                              |	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	                              |	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	                              |	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера,
	                              |	Данные.ТорговаяТочка КАК ТорговаяТочка,
	                              |	Данные.ДокументВозврата КАК ДокументВозврата,
	                              |	ДоговорыКонтрагентов.Ссылка КАК Договор
	                              |ИЗ
	                              |	Данные КАК Данные
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	                              |			И (ТелефонМенеджер.Тип = &ТипТелефон)
	                              |			И (ТелефонМенеджер.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	                              |			И (ТелефонБухгалтера.Тип = &ТипТелефон)
	                              |			И (ТелефонБухгалтера.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	                              |			И (НастройкиПользователей.Настройка = &Настройка)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	                              |			И (ПочтаМенеджера.Тип = &ТипПочта)
	                              |			И (ПочтаМенеджера.Вид = &ПочтаФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	                              |		ПО (ПочтаБухгалтера.Вид = &ПочтаФизЛица)
	                              |			И (ПочтаБухгалтера.Тип = &ТипПочта)
	                              |			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                              |		ПО Данные.Контрагент = ДоговорыКонтрагентов.Владелец
	                              |			И Данные.Организация = ДоговорыКонтрагентов.Организация
	                              |			И (Данные.ТорговаяТочка = ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница
	                              |				ИЛИ Данные.ТорговаяТочка = ДоговорыКонтрагентов.СтруктурнаяЕдиница)
	                              |			И (ДоговорыКонтрагентов.СрокДействия >= &ДатаНачала
	                              |				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	Контрагент,
	                              |	ДокументВозврата,
	                              |	ТорговаяТочка";
								  
	Если Не ПоСтроке Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"и ФинансовыйОстаткиИОбороты.Регистратор=&Регистратор","");
		
	Иначе
		Запрос.УстановитьПараметр("Регистратор",ТекущиеДанные.ДокументВозврата);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто1 = &Субконто1","");
		
	Иначе
		
		Запрос.УстановитьПараметр("Субконто1",Объект.Организация);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя","");
		
	Иначе
		
		Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя",Объект.ОтветственныйБухгалтер);
		
	КонецЕсли;
	
	СчетаПоУмолчанию = Новый Массив;	
	
	Для каждого ТекЭлемент Из Объект.СписокСчетов Цикл
		
		Если ТекЭлемент.УчаствуетВРасчетах Тогда
			
			СчетаПоУмолчанию.Добавить(ТекЭлемент.Счет);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПочтаФизЛица",Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТипПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТелефонФизЛица",Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("МассивСчетов",СчетаПоУмолчанию);
	Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись);
	//АК БЕЛН 27.03.2016+
	Запрос.УстановитьПараметр("СтатьяДДС",Объект.СтатьяДДС);
	//АК БЕЛН 27.03.2016-
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ТЗ_Результа =  Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление КАК Почта,
	//|	КонтактнаяИнформация.Объект КАК Контрагент
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект.Ссылка В(&Массив)
	//|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, КонтактнаяИнформация1.Представление) КАК Почта,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО КонтактнаяИнформация.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО КонтактнаяИнформация1.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация1.Вид = &Вид)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Массив)";

	
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Запрос.УстановитьПараметр("Массив", Результат.ВыгрузитьКолонку("Контрагент"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Для каждого ТекСтрока Из Результат Цикл
		
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент",ТекСтрока.Контрагент)) Тогда
			
			ТекСтрока.Почта = ВыборкаДетальныеЗаписи.Почта;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Если Не ПоСтроке Тогда
		
			НоваяСтрока = Объект.СписокРассылки.Добавить();
		
		Иначе
		
			НоваяСтрока = ТекущиеДанные;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		
	КонецЦикла;
	
	Если ПоСтроке Тогда
		
		ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекСтрока.Пометка = ТекСтрока.Пометка;	
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьСнятьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьСнятьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(Пометка)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) или ЗначениеЗаполнено(ТекСтрока.ОтправленоСФ) 
			//+++ AK suvv 2018.12.10 ИП-00020483
			или ЗначениеЗаполнено(ТекСтрока.ОтправленУПД) или ЗначениеЗаполнено(ТекСтрока.ОтправленУПДПоЭДО) Тогда
			//--- AK suvv
		
			Продолжить;	
		
		КонецЕсли;
		
		ТекСтрока.Пометка = Пометка;
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьСнятьПометки()

&НаКлиенте
Процедура ПроверитьНаНаличиеОшибок(Команда)
	
	//МассивСообщений = Новый Массив;
	//
	//Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
	//	
	//	Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы()  Цикл
	//		Если Не	ПодчиненнаяСтрока.Пометка Тогда
	//			Продолжить;	
	//		КонецЕсли;
	//		
			//Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
			//	
			//	МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
			//	
			//КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
	//			
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
	//			
	//		КонецЕсли;
	//		
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.УчетнаяЗаписьЭлектроннойПочты) Тогда
	//			
	//			МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнена учетная запись электронной почты!");	
	//			
	//		КонецЕсли;
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;	
	//
	//МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	//
	//Для каждого ТекСтрока Из МассивСообщений Цикл
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = ТекСтрока;
	//	Сообщение.Сообщить();
	//	
	//КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура Послать(АдресПолучателя,ТекстПисьма,УЗ,Тема,Пользователь,АдресФайла)
	
	//+++АК SHEP 2018.02.15 ИП-00017889
	УправлениеЭлектроннойПочтой.ПослатьОтРассылкиСОбратнымАдресом(АдресПолучателя, ТекстПисьма, УЗ, Тема, Пользователь,, АдресФайла);
	Возврат;
	//---АК SHEP 2018.02.15
	
	//+++АК SHEP 2018.02.06 ИП-00017780
	//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	//---АК SHEP 2018.02.06
	СпАдресов=Новый СписокЗначений;
	МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(АдресПолучателя,";");	
	Для каждого Эл Из МассивАдресов Цикл
		Если ЗначениеЗаполнено(Эл) Тогда
			СпАдресов.Добавить(Сокрлп(Эл));
		КонецЕсли; 
	КонецЦикла; 
	Почта = Новый ИнтернетПочта;
	//+++АК SHEP 2018.02.06 ИП-00017780
	//Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофильБезАутентификации(Пользователь);
	//---АК SHEP 2018.02.06
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	//+++АК SHEP 2018.02.06 ИП-00017780
	//Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
	//Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	//Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.ИмяОтправителя  	= СокрЛП(Пользователь);
	Письмо.Отправитель     	= СокрЛП(УЗ);
	//---АК SHEP 2018.02.06
	
	Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	
	Письмо.Вложения.Добавить(АдресФайла);
	
	Письмо.Тема=Тема;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = Адрес.Значение;
	КонецЦикла;	
	
//_______________________	
	//ИПП=Новый ИнтернетПочтовыйПрофиль;
	//
	//ИПП.АдресСервераSMTP="10.0.0.30";
	//ИПП.Пользователь=Пользователь;
	//ИПП.ПортSMTP=25;
	////
	////Если УЗ.ТребуетсяSMTPАутентификация Тогда
	////	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	////	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
	////	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	////Иначе
	//ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	//ИПП.ПарольSMTP         = "";
	//ИПП.ПользовательSMTP   = "";
	////КонецЕсли;
	//
	//Письмо=Новый ИнтернетПочтовоеСообщение;
	//Письмо.Отправитель=УЗ;
	//Письмо.Получатели.Добавить(АдресПолучателя);
	//
	////Для Каждого ТекАдр Из Вложения Цикл
	//	Письмо.Вложения.Добавить(АдресФайла);
	////КонецЦикла;
	//
	//Письмо.Тема=Тема;
	//
	//Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	//
	//Почта=Новый ИнтернетПочта;
	//
	//Почта.Подключиться(ИПП);
	
	Почта.Послать(Письмо);
	Сообщить("Отправлено письмо на "+АдресПолучателя);
	Почта.Отключиться();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктыВБухгалтерии(Команда)

	СоздатьАктыВБухгалтерииНаСервере();	
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыВБухгалтерииНаСервере(Номер = Неопределено)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Для каждого ТекСтрока Из ДокОбъект.СписокРассылки Цикл
		Если Не Номер = Неопределено Тогда
		   Если ТекСтрока.НомерСтроки<>Номер Тогда
		   		Продолжить;
		   КонецЕсли; 
		КонецЕсли; 
		
		//Если Не ТекСтрока.Пометка Или ЗначениеЗаполнено(ТекСтрока.АктВБухгалтерииНомер) Или ЗначениеЗаполнено(ТекСтрока.Отправлено)   Тогда
		//
		//	Продолжить;
		//
		//КонецЕсли;
		
		Если бухгалтерия = Неопределено Тогда
		
			бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
		
		КонецЕсли;
		
		//ДокументСверки = бухгалтерия.Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		//
		//ДокументСверки.Дата = КонецДня(ДокОбъект.Дата);
		//
		//ДокументСверки.ВалютаДокумента = бухгалтерия.Константы.ВалютаРегламентированногоУчета.Получить();
		//
		//бухгалтерияОрганизация = бухгалтерия.Справочники.Организации.НайтиПоРеквизиту("ИНН",ТекСтрока.Организация.ИНН);
		//
		//Если бухгалтерияОрганизация.Пустая() Тогда
		//
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Не удалось найти организацию в бухгалтерие по "+ТекСтрока.Организация.ИНН;
		//	Сообщение.Сообщить();
		//	Продолжить;
		//КонецЕсли;
		//
		//ДокументСверки.Организация = бухгалтерияОрганизация;
		//
		//бухгалтерияКонтрагент = бухгалтерия.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ТекСтрока.Контрагент.ИНН);

		//Если бухгалтерияКонтрагент.Пустая() Тогда
		//
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Не удалось найти Контрагента в бухгалтерие по "+ТекСтрока.Контрагент.ИНН;
		//	Сообщение.Сообщить();
		//	Продолжить;
		//КонецЕсли;
		//		
		//Если Не ЗначениеЗаполнено(ТекСтрока.ДатаНачала) Тогда
		//
		//	ТекСтрока.ДатаНачала = ДокОбъект.ДатаНачала;	
		//
		//КонецЕсли;
		//Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда
		//
		//	ТекСтрока.ДатаОкончания = ДокОбъект.ДатаОкончания;	
		//
		//КонецЕсли;
		//ДокументСверки.Контрагент = бухгалтерияКонтрагент;
		//Если ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
		//	бухгалтерияДоговор = бухгалтерия.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(ТекСтрока.Договор.Код,,,бухгалтерияКонтрагент);
		//	Если бухгалтерияДоговор.Пустая() Тогда
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = "Не удалось найти договор контрагента в бухгалтерие по коду"+ТекСтрока.Договор.Код;
		//		Сообщение.Сообщить();
		//	Иначе	
		//		ДокументСверки.ДоговорКонтрагента=бухгалтерияДоговор;
		//	КонецЕсли;	
		//КонецЕсли;	
		//ДокументСверки.ДатаНачала = ТекСтрока.ДатаНачала;
		//ДокументСверки.ДатаОкончания = ТекСтрока.ДатаОкончания;
		//ДокументСверки.Комментарий = "Сформирован в финансах документом рассылки актов сверки";
		//
		//СчетаПоУмолчанию = бухгалтерия.NewObject("Массив");
		//СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
		//СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
		//СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
		//СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
		//СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
		//
		//Для Счетчик =1  По СчетаПоУмолчанию.Количество() Цикл
		//	СтрокаСчета = ДокументСверки.СписокСчетов.Добавить();
		//	СтрокаСчета.УчаствуетВРасчетах = Истина;
		//КонецЦикла; 
		//
		//ДокументСверки.СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
		//
		//ДокументСверки.ЗаполнитьПоДаннымБухгалтерскогоУчета();
		////ДокументСверки.ЗаполнитьПоДаннымОрганизации();
		//
		//Попытка
		//
		//	ДокументСверки.Записать();
		//
		//Исключение
		//	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = ОписаниеОшибки();
		//	Сообщение.Сообщить();
		//	
		//	Продолжить;
		//
		//КонецПопытки;
		//
		//ТекСтрока.АктВБухгалтерииНомер = ДокументСверки.Номер;
		//
		//ТекСтрока.АктВБухгалтерииДата = ДокументСверки.Дата;
		//
		//ТекСтрока.АктУИД = Бухгалтерия.String(ДокументСверки.Ссылка.УникальныйИдентификатор());
		//
		//ТекСтрока.ЕстьОбороты = ДокументСверки.ПоДаннымОрганизации.Количество() Или ДокументСверки.ОстатокНаНачало;
		
		ДокБух=Бухгалтерия.Документы.ВозвратТоваровПоставщику.НайтиПоНомеру(ТекСтрока.ДокументВозврата.Номер,ТекСтрока.ДокументВозврата.Дата);
		Если Бухгалтерия.ЗначениеЗаполнено(ДокБух) Тогда
			ДокБухОбъект=ДокБух.ПолучитьОбъект();

			ТабДок = ДокБухОбъект.ПечатьТОРГ12();
			//ВремФайл=ПолучитьИмяВременногоФайла("mxl");
			//
			//ТабДок.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.mxl);
			//ТабДок=Новый ТабличныйДокумент;
			//ТабДок.Прочитать(ВремФайл);
			//УдалитьФайлы(ВремФайл);
			Руководители 		= ОбщегоНазначения.ОтветственныеЛица(ТекСтрока.Организация, КонецДня(ТекСтрока.ДокументВозврата.Дата),);
			ФИОДир = Руководители.Руководитель;
			ФИОБух=  Руководители.Руководитель;
			//+++ AK suvv 2018.12.17 ИП-00020483.01
			Факсимиле=Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо",ФИОДир).Подпись;
			ФаксимилеБух=Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо",ФИОБух).Подпись;
			ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДок,8,30,6,5);	
			ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДок,8,30,8,5);
			//--- AK suvv
			
			//Если ЗначениеЗаполнено(Факсимиле) Тогда
			//	ДД=Факсимиле.Подпись.Получить();
			//	Если ТипЗнч(ДД)=Тип("Картинка") Тогда
			//		Область = ТабДок.Область(ТабДок.ВысотаТаблицы-7,5,ТабДок.ВысотаТаблицы-7,5);
			//		Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
			//		Рис.РазмерКартинки = Бухгалтерия.РазмерКартинки.РеальныйРазмер;
			//		ИмяКартинки=ПолучитьИмяВременногоФайла(Строка(ДД.Формат()));
			//		ДД.Записать(ИмяКартинки);
			//		КартинкаВБух=Бухгалтерия.NewObject("Картинка",ИмяКартинки,Истина);
			//		
			//		Рис.Картинка = КартинкаВБух; 
			//		Рис.Расположить(Область);
			//		Верх = Рис.Верх;
			//		Лево = Рис.Лево;
			//		ТабДок.Рисунки.Удалить(Рис);

			//		Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
			//		Индекс = Табдок.Рисунки.Индекс(Рис);
			//		ТабДок.Рисунки.Получить(Индекс).РазмерКартинки = Бухгалтерия.РазмерКартинки.РеальныйРазмер;
			//		ТабДок.Рисунки.Получить(Индекс).Картинка = КартинкаВБух; 
			//		ТабДок.Рисунки.Получить(Индекс).Верх = Верх;
			//		ТабДок.Рисунки.Получить(Индекс).Лево = Лево;
			//		ТабДок.Рисунки.Получить(Индекс).Ширина = 30;
			//		ТабДок.Рисунки.Получить(Индекс).Высота = 10;
			//		ТипЛинии= Бухгалтерия.NewObject("Линия",Бухгалтерия.ТипЛинииРисункаТабличногоДокумента.НетЛинии,0);
			//		ТабДок.Рисунки.Получить(Индекс).Линия=ТипЛинии;					
			//	КонецЕсли; 
			//КонецЕсли;
			
			ТабДок.АвтоМасштаб=Истина;
			ВремФайл=ПолучитьИмяВременногоФайла("pdf");
			
			ТабДок.Записать(ВремФайл,ТипФайлаТабличногоДокумента.pdf);
			
			
			Попытка
				КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
				
				
			Исключение
				Сообщить("Не удалось получить каталог хранения файлов.");
				Возврат;
				
			КонецПопытки;

			УникальноеИмяФайла = Новый УникальныйИдентификатор;
			ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + "pdf";

			Попытка
				ДвоичныеДанные=Новый ДвоичныеДанные(ВремФайл);
				ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
				ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ИмяФайлаНаСервере, "\");
				
				ТекСтрока.АктСверкиПДФИмяФайла = ИмяФайлаНаСервере;
				ТекСтрока.АктСверкиПДФИмяФайлаСРасширением = ИмяФайлаСРасширением;
				
				//Модифицированность = Истина;
				
			Исключение
				Сообщить("Не удалось добавить ТОРГ12. "+ОписаниеОшибки());
				Возврат
			КонецПопытки;
			
			
			
			
			//ТекСтрока.АктСверкиПДФ = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
			ТекСтрока.АктУИД = Бухгалтерия.String(ДокБухОбъект.Ссылка.УникальныйИдентификатор());
			ТекСтрока.ЕстьДокументВБухгалтерии=Истина;
		    ТекСтрока.НомерДоговора=ДокБухОбъект.ДоговорКонтрагента.Номер;
		    ТекСтрока.ДатаДоговора=ДокБухОбъект.ДоговорКонтрагента.Дата; 
			
			СчетФакт=Бухгалтерия.УчетНДС.НайтиПодчиненныйСчетФактуру(ДокБух, ?(Не ДокБух.ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
			Если Бухгалтерия.ЗначениеЗаполнено(СчетФакт) Тогда
				СчетФактОбъект=СчетФакт.ПолучитьОбъект();
				
				ОбщиеДанныеДляПечати = СчетФактОбъект.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
				
				Если ОбщиеДанныеДляПечати = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТабДокСчФ = СчетФактОбъект.ПечатьСчетаФактуры1137(ОбщиеДанныеДляПечати);
				//+++ AK suvv 2018.12.17 ИП-00020483.01
				ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДокСчФ,10,30,5,3);
				ДобавитьФаксимилеПечатьОрг(ФаксимилеБух,ТабДокСчФ,10,30,5,11);
				//--- AK suvv
				ТабДокСчФ.АвтоМасштаб=Истина;
				//ТабДокСчФ = ДокБухОбъект.Печать("СчетФактура");
				ВремФайл=ПолучитьИмяВременногоФайла("pdf");
				                                                                                    
				ТабДокСчФ.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.pdf);
				
				Попытка
					КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
					
					
				Исключение
					Сообщить("Не удалось получить каталог хранения файлов.");
					Возврат;
					
				КонецПопытки;
				
				УникальноеИмяФайла = Новый УникальныйИдентификатор;
				ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + "pdf";
				
				Попытка
					ДвоичныеДанные=Новый ДвоичныеДанные(ВремФайл);
					ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
					ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ИмяФайлаНаСервере, "\");
					
					ТекСтрока.СчетФактураПДФИмяФайла = ИмяФайлаНаСервере;
					ТекСтрока.СчетФактураПДФИмяФайлаСРасширением = ИмяФайлаСРасширением;
					
					//Модифицированность = Истина;
					
				Исключение
					Сообщить("Не удалось добавить Счет-фактуру. "+ОписаниеОшибки());
					Возврат
				КонецПопытки;
				
				
				
				
				//ТекСтрока.СчетФактураПДФ= Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
				ТекСтрока.СчетФактура = Бухгалтерия.String(СчетФакт);
			
			КонецЕсли; 
		КонецЕсли; 
		//ТабДок = Новый ТабличныйДокумент;
		
		//Модифицированность = Истина;
		
	КонецЦикла;	
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // СоздатьАктыВБухгалтерии()

&НаКлиенте
Процедура СписокРассылкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	//+++ AK suvv 2018.12.10 ИП-00020483
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено) или ЗначениеЗаполнено(ТекСтрока.ОтправленоСФ) или ЗначениеЗаполнено(ТекСтрока.ОтправленУПД) или ЗначениеЗаполнено(ТекСтрока.ОтправленУПДПоЭДО);
	//--- AK suvv
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСогласованныеАкты(Команда)
	
	Если Вопрос("Даты сверки актов будут замещены на даты с учетом сверенных актов! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	
		Возврат
	
	КонецЕсли;
	
	ПроверитьСогласованныеАктыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСогласованныеАктыНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(АктСверкиВзаиморасчетов.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(АктСверкиВзаиморасчетов.ДатаОкончания) КАК ДатаОкончания,
		|	АктСверкиВзаиморасчетов.Организация,
		|	АктСверкиВзаиморасчетов.Контрагент,
		|	ВложенныйЗапрос.Ссылка КАК ПоследнийАктСверки
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
		|			ВложенныйЗапрос.Организация КАК Организация,
		|			ВложенныйЗапрос.Контрагент КАК Контрагент,
		|			МАКСИМУМ(АктСверкиВзаиморасчетов.Ссылка) КАК Ссылка
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(АктСверкиВзаиморасчетов.ДатаОкончания) КАК ДатаОкончания,
		|				АктСверкиВзаиморасчетов.Организация КАК Организация,
		|				АктСверкиВзаиморасчетов.Контрагент КАК Контрагент
		|			ИЗ
		|				Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|			ГДЕ
		|				АктСверкиВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|				И АктСверкиВзаиморасчетов.СверкаСогласована
		|				И АктСверкиВзаиморасчетов.Организация В(&Организация)
		|				И АктСверкиВзаиморасчетов.Контрагент В(&Контрагент)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				АктСверкиВзаиморасчетов.Контрагент,
		|				АктСверкиВзаиморасчетов.Организация) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|				ПО ВложенныйЗапрос.ДатаОкончания = АктСверкиВзаиморасчетов.ДатаОкончания
		|					И ВложенныйЗапрос.Организация = АктСверкиВзаиморасчетов.Организация
		|					И ВложенныйЗапрос.Контрагент = АктСверкиВзаиморасчетов.Контрагент
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.ДатаОкончания,
		|			ВложенныйЗапрос.Контрагент,
		|			ВложенныйЗапрос.Организация) КАК ВложенныйЗапрос
		|		ПО АктСверкиВзаиморасчетов.Организация = ВложенныйЗапрос.Организация
		|			И АктСверкиВзаиморасчетов.Контрагент = ВложенныйЗапрос.Контрагент
		|ГДЕ
		|	АктСверкиВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И АктСверкиВзаиморасчетов.СверкаСогласована
		|	И АктСверкиВзаиморасчетов.Организация В(&Организация)
		|	И АктСверкиВзаиморасчетов.Контрагент В(&Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	АктСверкиВзаиморасчетов.Контрагент,
		|	АктСверкиВзаиморасчетов.Организация,
		|	ВложенныйЗапрос.Ссылка";

	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Объект.СписокРассылки.Выгрузить(,"Организация").ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("Контрагент",  Объект.СписокРассылки.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
		
			Продолжить;
		
		КонецЕсли;
	
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("Организация",ТекСтрока.Организация);
		СтруктураПоиска.Вставить("Контрагент",ТекСтрока.Контрагент);
		
		Если  ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
			
			ТекСтрока.ДатаНачала = Макс(КонецДня(ВыборкаДетальныеЗаписи.ДатаОкончания)+1,Период.ДатаНачала);
			ТекСтрока.ДатаОкончания = период.ДатаОкончания;
			ТекСтрока.ПоследнийАктСверки = ВыборкаДетальныеЗаписи.ПоследнийАктСверки;
			
			Если ТекСтрока.ДатаНачала > Период.ДатаОкончания Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Период уже сверен, установите период вручную!";
				Сообщение.Поле = "СписокРассылки["+Объект.СписокРассылки.Индекс(ТекСтрока)+"].Контрагент";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				ТекСтрока.ДатаНачала = Период.ДатаНачала;
				
			КонецЕсли;
			
			
		Иначе
			ТекСтрока.ДатаНачала = Период.ДатаНачала;
			ТекСтрока.ДатаОкончания = период.ДатаОкончания;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
	
	КонецЦикла;

КонецПроцедуры // ПроверитьСогласованныеАкты()

&НаКлиенте
Процедура СписокРассылкиПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено) Или ЗначениеЗаполнено(ТекСтрока.АктВБухгалтерииНомер);
	
КонецПроцедуры

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаКлиенте
Процедура ОткрытьВложенныйАктСверки(Команда)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьСохраненныйФайл("ТОРГ12.pdf", ТекСтрока.НомерСтроки, "АктСверкиПДФИмяФайла");				
	КонецЕсли;
		
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаКлиенте
Процедура ОткрытьАктСверки(Команда)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьСохраненныйФайл("СчетФактура.pdf", ТекСтрока.НомерСтроки, "СчетФактураПДФИмяФайла");				
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаКлиенте
Процедура ОткрытьУПД(Команда)
	
	 ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	 
	 Если ТекСтрока <> Неопределено Тогда 
		 ОткрытьСохраненныйФайл("УПД.pdf", ТекСтрока.НомерСтроки, "УПДПДФИмяФайла");
	 КонецЕсли;
	 
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаКлиенте
Процедура ОткрытьУПДДЭДО(Команда)
	
	 ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	 
	 Если ТекСтрока <> Неопределено Тогда
		 ПутьКФайлуPDF = ПолучитьПутьКФайлуПДФ_УПД_ЭДО(ТекСтрока.ДокументВозврата);
		 Если ЗначениеЗаполнено(ПутьКФайлуPDF) Тогда
			 ФайлТемп = ПолучитьИмяВременногоФайла(".pdf");
			 КопироватьФайл(ПутьКФайлуPDF, ФайлТемп);
			 ЗапуститьПриложение(ФайлТемп);
		 Иначе
			 Сообщить("УПД по ЭДО не был отправлен. Доступен просмотр только обычного УПД."); 
		 КонецЕсли;
	 КонецЕсли;

 КонецПроцедуры //--- AK suvv
 
 //+++ AK suvv 2018.12.17 ИП-00020483.01
 &НаСервере
 Функция ПолучитьПутьКФайлуПДФ_УПД_ЭДО(Док)
	 
	 ПутьКФайлуПДФ = "";
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЭДО_СопоставлениеДокументов.ДокументЭДО.ФайлPDF КАК ФайлPDF
	 |ИЗ
	 |	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	 |ГДЕ
	 |	ЭДО_СопоставлениеДокументов.Документ = &Док
	 |	И ЭДО_СопоставлениеДокументов.ДокументЭДО ССЫЛКА Документ.ЭДО_ИсходящийДокумент";
	 Запрос.УстановитьПараметр("Док", Док);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 ПутьКФайлуПДФ = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Выборка.ФайлPDF);
	 КонецЦикла;
		 
	 Возврат ПутьКФайлуПДФ;
	 
 КонецФункции //--- AK suvv 

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаКлиенте
Процедура ОткрытьСохраненныйФайл(ИмяФайлаPDF, ТекНомерСтроки, ИмяРеквизитаСФайломPDF)
	
	ВремФайл = КаталогВременныхФайлов()+ ИмяФайлаPDF;
	
	ВложенныйАкт = ОткрытьВложенныйФайлPDFНаСервере(ТекНомерСтроки, ИмяРеквизитаСФайломPDF);
	
	Если ЗначениеЗаполнено(ВложенныйАкт) Тогда
		ВложенныйАкт.Записать(ВремФайл);
		ЗапуститьПриложение(ВремФайл);
	КонецЕсли;
		
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.12.17 ИП-00020483.01
&НаСервере
Функция ОткрытьВложенныйФайлPDFНаСервере(НомерСтроки, ИмяРеквизитаСФайломPDF)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	ПутьКОткрываемомуФайлу = ДокОбъект.СписокРассылки[НомерСтроки-1][ИмяРеквизитаСФайломPDF];
	Если ПутьКОткрываемомуФайлу = "" Тогда 
		Если ИмяРеквизитаСФайломPDF = "" Тогда 
			ЗаписатьУПДВХранилище(ДокОбъект.СписокРассылки[НомерСтроки-1]);
		Иначе		
			ЗаписатьАктСверкиВХранилище(ДокОбъект.СписокРассылки[НомерСтроки-1]);
		КонецЕсли;
		ПутьКОткрываемомуФайлу = ДокОбъект.СписокРассылки[НомерСтроки-1][ИмяРеквизитаСФайломPDF];
	КонецЕсли;
	
	Хранилище = Новый ДвоичныеДанные(ПутьКОткрываемомуФайлу);
	
	Если Не ЗначениеЗаполнено(Хранилище) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Хранилище;
	
КонецФункции //--- AK suvv

&НаКлиенте
Процедура ОбновитьИнформациюОбОборотах(Команда)
 	ОбновитьИнформациюОбОборотахНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОборотахНаСервере()

	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.ЕстьОбороты) И ЗначениеЗаполнено(ТекСтрока.АктУИД) Тогда
		
			Если бухгалтерия = Неопределено Тогда
				
				бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
				
			КонецЕсли;
			
			УникальныйИдентификаторБух = Бухгалтерия.NewObject("УникальныйИдентификатор",ТекСтрока.АктУИД);
			
			ДокументСверки = Бухгалтерия.Документы.АктСверкиВзаиморасчетов.ПолучитьСсылку(УникальныйИдентификаторБух);
			
			ТекСтрока.ЕстьОбороты = ДокументСверки.ПоДаннымОрганизации.Количество();
		
		КонецЕсли;	
	
	КонецЦикла;	

КонецПроцедуры // ()

&НаСервере
Процедура ЗаписатьАктСверкиВХранилище(ТекСтрока)
	
	Если бухгалтерия = Неопределено Тогда
		
		бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.АктУИД) Тогда
		Возврат;
	КонецЕсли; 
	УникальныйИдентификаторБух = Бухгалтерия.NewObject("УникальныйИдентификатор",ТекСтрока.АктУИД);
	
	ДокументСверки = Бухгалтерия.Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УникальныйИдентификаторБух).ПолучитьОбъект();
	
	ТабДок = ДокументСверки.ПечатьТОРГ12();
	
	
	//ВремФайл=ПолучитьИмяВременногоФайла("mxl");
	//
	//ТабДок.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.mxl);
	//ТабДок=Новый ТабличныйДокумент;
	//ТабДок.Прочитать(ВремФайл);
	//УдалитьФайлы(ВремФайл);
	Руководители 		= ОбщегоНазначения.ОтветственныеЛица(ТекСтрока.Организация, КонецДня(ТекСтрока.ДокументВозврата.Дата),);
	ФИОДир = Руководители.Руководитель;
	ФИОБух=  Руководители.Руководитель;
	//+++ AK suvv 2018.12.17 ИП-00020483.01
	Факсимиле=Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо",ФИОДир).Подпись;
	ФаксимилеБух=Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо",ФИОБух).Подпись;
	ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДок,8,30,6,5);	
	ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДок,8,30,8,5);
	//--- AK suvv
	//Если ЗначениеЗаполнено(Факсимиле) Тогда
	//	ДД=Факсимиле.Подпись.Получить();
	//	Если ТипЗнч(ДД)=Тип("Картинка") Тогда
	//		Область = ТабДок.Область(ТабДок.ВысотаТаблицы-7,5,ТабДок.ВысотаТаблицы-7,5);
	//		Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
	//		Рис.РазмерКартинки = Бухгалтерия.РазмерКартинки.РеальныйРазмер;
	//		ИмяКартинки=ПолучитьИмяВременногоФайла(Строка(ДД.Формат()));
	//		ДД.Записать(ИмяКартинки);
	//		КартинкаВБух=Бухгалтерия.NewObject("Картинка",ИмяКартинки,Истина);
	//		
	//		Рис.Картинка = КартинкаВБух; 
	//		Рис.Расположить(Область);
	//		Верх = Рис.Верх;
	//		Лево = Рис.Лево;
	//		ТабДок.Рисунки.Удалить(Рис);

	//		Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
	//		Индекс = Табдок.Рисунки.Индекс(Рис);
	//		ТабДок.Рисунки.Получить(Индекс).РазмерКартинки = Бухгалтерия.РазмерКартинки.РеальныйРазмер;
	//		ТабДок.Рисунки.Получить(Индекс).Картинка = КартинкаВБух; 
	//		ТабДок.Рисунки.Получить(Индекс).Верх = Верх;
	//		ТабДок.Рисунки.Получить(Индекс).Лево = Лево;
	//		ТабДок.Рисунки.Получить(Индекс).Ширина = 30;
	//		ТабДок.Рисунки.Получить(Индекс).Высота = 10;
	//		ТипЛинии= Бухгалтерия.NewObject("Линия",Бухгалтерия.ТипЛинииРисункаТабличногоДокумента.НетЛинии,0);
	//		ТабДок.Рисунки.Получить(Индекс).Линия=ТипЛинии;			
	//	КонецЕсли;
	//КонецЕсли; 
	
	ТабДок.АвтоМасштаб=Истина;
	
	ВремФайл=ПолучитьИмяВременногоФайла("pdf");
	ТабДок.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.pdf);
	
	Попытка
		КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
		
		
	Исключение
		Сообщить("Не удалось получить каталог хранения файлов.");
		Возврат;
		
	КонецПопытки;
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + "pdf";
	
	Попытка
		ДвоичныеДанные=Новый ДвоичныеДанные(ВремФайл);
		ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
		ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ИмяФайлаНаСервере, "\");
		
		ТекСтрока.АктСверкиПДФИмяФайла = ИмяФайлаНаСервере;
		ТекСтрока.АктСверкиПДФИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		//Модифицированность = Истина;
		
	Исключение
		Сообщить("Не удалось добавить Торг12. "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	
	
	
	ТекСтрока.ЕстьДокументВБухгалтерии=Истина;
	//ТекСтрока.АктСверкиПДФ = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
	

	СчетФакт=Бухгалтерия.УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументСверки.Ссылка, ?(Не ДокументСверки.ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	Если Бухгалтерия.ЗначениеЗаполнено(СчетФакт) Тогда
		СчетФактОбъект=СчетФакт.ПолучитьОбъект();
		
		ОбщиеДанныеДляПечати = СчетФактОбъект.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТабДокСчФ = СчетФактОбъект.ПечатьСчетаФактуры1137(ОбщиеДанныеДляПечати);
		//+++ AK suvv 2018.12.17 ИП-00020483.01
		ДобавитьФаксимилеПечатьОрг(Факсимиле,ТабДокСчФ,10,30,5,3);
		ДобавитьФаксимилеПечатьОрг(ФаксимилеБух,ТабДокСчФ,10,30,5,11);
		//--- AK suvv
		ТабДокСчФ.АвтоМасштаб=Истина;
		
		//ТабДокСчФ = ДокБухОбъект.Печать("СчетФактура");
		ВремФайл=ПолучитьИмяВременногоФайла("pdf");
		                                                                                    
		ТабДокСчФ.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.pdf);
		
		Попытка
			КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
			
			
		Исключение
			Сообщить("Не удалось получить каталог хранения файлов.");
			Возврат;
			
		КонецПопытки;
		
		УникальноеИмяФайла = Новый УникальныйИдентификатор;
		ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + "pdf";
		
		Попытка
			ДвоичныеДанные=Новый ДвоичныеДанные(ВремФайл);
			ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ИмяФайлаНаСервере, "\");
			
			ТекСтрока.СчетФактураПДФИмяФайла = ИмяФайлаНаСервере;
			ТекСтрока.СчетФактураПДФИмяФайлаСРасширением = ИмяФайлаСРасширением;
			
			//Модифицированность = Истина;
			
		Исключение
			Сообщить("Не удалось добавить Счет-фактуру. "+ОписаниеОшибки());
			Возврат
		КонецПопытки;

		//ТекСтрока.СчетФактураПДФ= Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
		ТекСтрока.СчетФактура = Бухгалтерия.String(СчетФакт);
	
	КонецЕсли; 
	
КонецПроцедуры

//+++ AK suvv 2018.12.10 ИП-00020483
&НаСервере
Процедура ЗаписатьУПДВХранилище(ТекСтрока)
	
	Если Бухгалтерия = Неопределено Тогда		
		Бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.АктУИД) Тогда
		Возврат;
	КонецЕсли; 
	
	УникальныйИдентификаторБух = Бухгалтерия.NewObject("УникальныйИдентификатор",ТекСтрока.АктУИД);
	
	ДокументСверки = Бухгалтерия.Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УникальныйИдентификаторБух).ПолучитьОбъект();	
	СчетФакт       = Бухгалтерия.УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументСверки.Ссылка, ?(Не ДокументСверки.ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	
	Если Бухгалтерия.ЗначениеЗаполнено(СчетФакт) Тогда
		
		СчетФактОбъект = СчетФакт.ПолучитьОбъект();

		ОбщиеДанныеДляПечати = СчетФактОбъект.ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента();
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТабДокУПД = СчетФактОбъект.ПечатьУниверсальногоПередаточногоДокумента(ОбщиеДанныеДляПечати);
		
		Руководители = ОбщегоНазначения.ОтветственныеЛица(ТекСтрока.Организация, КонецДня(ТекСтрока.ДокументВозврата.Дата),);
		ФИОДир       = Руководители.Руководитель;
		ФИОБух       = Руководители.Руководитель;
		//+++ AK suvv 2018.12.17 ИП-00020483.01
		Факсимиле    = Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо", ФИОДир).Подпись;
		ФаксимилеБух = Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо", ФИОБух).Подпись;
		ПечатьОрганизации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Организация, "Печать");
		
		ДобавитьФаксимилеПечатьОрг(Факсимиле, ТабДокУПД, 7, 25, 24, 5);
		ДобавитьФаксимилеПечатьОрг(ФаксимилеБух, ТабДокУПД ,7, 25, 24, 11);
		ДобавитьФаксимилеПечатьОрг(ПечатьОрганизации, ТабДокУПД ,40, 40, 10, 2);
		//--- AK suvv
		
		ТабДокУПД.АвтоМасштаб = Истина;
		
		ВремФайл = ПолучитьИмяВременногоФайла("pdf");
		
		Попытка
			КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();	
		Исключение
			Сообщить("Не удалось получить каталог хранения файлов.");
			Возврат;		
		КонецПопытки;
		
		ТабДокУПД.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.pdf);
		
		УникальноеИмяФайла = Новый УникальныйИдентификатор;
		ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + "pdf";
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
			ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ИмяФайлаНаСервере, "\");
			
			ТекСтрока.УПДПДФИмяФайла             = ИмяФайлаНаСервере;
			ТекСтрока.УПДПДФИмяФайлаСРасширением = ИмяФайлаСРасширением;
			
		Исключение
			Сообщить("Не удалось добавить УПД. "+ОписаниеОшибки());
			Возврат
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры //--- AK suvv
		

&НаСервере
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьКаталогХраненияФайлов()

	КаталогХраненияФайлов = Константы.КаталогХраненияФайлов.Получить();	
		
	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	КонецЕсли;
	
	Возврат 	КаталогХраненияФайлов + "Возвраты\"

КонецФункции // ()

&НаСервере
Процедура ДобавитьФаксимилеПечатьОрг(Факсимиле, ТабДок, Высота, Ширина, ОтступНиз, Колонка) //+++ AK suvv 2018.12.17 ИП-00020483.01 (процедура переименована)
	Если ЗначениеЗаполнено(Факсимиле) Тогда
		//+++ AK suvv 2018.12.17 ИП-00020483.01 
		ДД = Факсимиле.Получить();
		//--- AK suvv
		Если ТипЗнч(ДД)=Тип("Картинка") Тогда
			Область = ТабДок.Область(ТабДок.ВысотаТаблицы-ОтступНиз,Колонка,ТабДок.ВысотаТаблицы-ОтступНиз,Колонка);
			Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
			Рис.РазмерКартинки = Бухгалтерия.РазмерКартинки.Пропорционально; //+++ AK suvv 2018.12.10 ИП-00020483
			Рис.Узор = Бухгалтерия.ТипУзораТабличногоДокумента.БезУзора; //+++ AK suvv 2018.12.17 ИП-00020483.01  
			ИмяКартинки=ПолучитьИмяВременногоФайла(Строка(ДД.Формат()));
			ДД.Записать(ИмяКартинки);
			КартинкаВБух=Бухгалтерия.NewObject("Картинка",ИмяКартинки,Истина);
			
			Рис.Картинка = КартинкаВБух; 
			Рис.Расположить(Область);
			Верх = Рис.Верх;
			Лево = Рис.Лево;
			ТабДок.Рисунки.Удалить(Рис);

			Рис=ТабДок.Рисунки.Добавить(Бухгалтерия.ТипРисункаТабличногоДокумента.Картинка);
			Индекс = Табдок.Рисунки.Индекс(Рис);
			ТабДок.Рисунки.Получить(Индекс).РазмерКартинки = Бухгалтерия.РазмерКартинки.Пропорционально; //+++ AK suvv 2018.12.10 ИП-00020483
			ТабДок.Рисунки.Получить(Индекс).Узор = Бухгалтерия.ТипУзораТабличногоДокумента.БезУзора; //+++ AK suvv 2018.12.17 ИП-00020483.01
			ТабДок.Рисунки.Получить(Индекс).Картинка = КартинкаВБух; 
			ТабДок.Рисунки.Получить(Индекс).Верх = Верх;
			ТабДок.Рисунки.Получить(Индекс).Лево = Лево;
			ТабДок.Рисунки.Получить(Индекс).Ширина = Ширина;
			ТабДок.Рисунки.Получить(Индекс).Высота = Высота;
			ТипЛинии= Бухгалтерия.NewObject("Линия",Бухгалтерия.ТипЛинииРисункаТабличногоДокумента.НетЛинии,0);
			ТабДок.Рисунки.Получить(Индекс).Линия=ТипЛинии;			
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры
 

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
    ФормаВыбора = ПолучитьФорму("Документ.АктСверкиВзаиморасчетов.ФормаВыбора",,Элемент);
	
	ФормаВыбора.Отбор.Контрагент.Значение = ТекСтрока.Контрагент;
	ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	
	ФормаВыбора.Отбор.Организация.Значение = ТекСтрока.Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.Отбор.СверкаСогласована.Значение = Истина;
	ФормаВыбора.Отбор.СверкаСогласована.Использование = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиКонтрагентПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	СтрПустая=Объект.СписокРассылки.Добавить();
	ЗаполнитьЗначенияСвойств(ТекСтрока,СтрПустая,,СтрЗаменить(Элемент.Имя,"СписокРассылки",""));
	Объект.СписокРассылки.Удалить(Объект.СписокРассылки.Количество()-1);
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	//ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиОрганизацияПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	СтрПустая=Объект.СписокРассылки.Добавить();
	ЗаполнитьЗначенияСвойств(ТекСтрока,СтрПустая,,СтрЗаменить(Элемент.Имя,"СписокРассылки",""));
	Объект.СписокРассылки.Удалить(Объект.СписокРассылки.Количество()-1);
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	//ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиПриИзменении(Элемент)
	
	
	СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере()
	
	ТекСтрока = объект.СписокРассылки.Получить(Элементы.СписокРассылки.ТекущаяСтрока);
	
	ТекСтрока.ДатаНачала = Макс(КонецДня(ТекСтрока.ПоследнийАктСверки.ДатаОкончания)+1,Период.ДатаНачала);
	ТекСтрока.ДатаОкончания = период.ДатаОкончания;
	
	Если ТекСтрока.ДатаНачала > Период.ДатаОкончания Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Период уже сверен, установите период вручную!";
		Сообщение.Поле = "СписокРассылки["+Объект.СписокРассылки.Индекс(ТекСтрока)+"].Контрагент";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		ТекСтрока.ДатаНачала = Период.ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры // ()

&НаКлиенте
Процедура СписокРассылкиДокументВозвратаПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	СтрПустая=Объект.СписокРассылки.Добавить();
	ЗаполнитьЗначенияСвойств(ТекСтрока,СтрПустая,,СтрЗаменить(Элемент.Имя,"СписокРассылки",""));
	Объект.СписокРассылки.Удалить(Объект.СписокРассылки.Количество()-1);
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьНаСервере(Номер,Истина);
	СоздатьАктыВБухгалтерииНаСервере(Номер);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСчетаФактуры(Команда)
	
	ОтправитьПисьмаНаКлиенте("СчетФактураПДФ");
	                                                                                         
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредварительныйПросмотр()
	
	Отказ = Ложь;
	МассивСообщений 		= Новый Массив;

	ПроверитьСтрокуТЧ(МассивСообщений,,Отказ);
	
	Если Отказ Тогда
		МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
		
		Для каждого ТекСтрока Из МассивСообщений Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекСтрока;
			Сообщение.Сообщить();
		КонецЦикла;
	Иначе	
		ПараметрыОткрытия = Новый Структура;
		ТекстHTML =  СформироватьТекстHTMLПредварительный();
		ПараметрыОткрытия.Вставить("ТекстHTML",ТекстHTML);		
		ОткрытьФорму("Документ.РассылкаТОРГ12НаВозврат.Форма.ФормаПредварительныйПросмотр",ПараметрыОткрытия);
	КонецЕсли;
		
КонецПроцедуры	

Функция СформироватьТекстHTMLПредварительный()
	
	ТекущаяСтрокаРассылка = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока]; 
	ТекстHTML = ПолучитьТекстHTML(ТекущаяСтрокаРассылка);
	УстановитьПараметрыHTML(ТекстHTML,ТекущаяСтрокаРассылка);
	Возврат ТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТекстПисьма(Команда)
	ОткрытьФормуПредварительныйПросмотр();
КонецПроцедуры

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры

//+++ AK suvv 2018.12.10 ИП-00020483
&НаКлиенте
Процедура ОтправитьУПД(Команда)
	
	ОтправитьПисьмаНаКлиенте("УПДПДФ");
	
	Записать();
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.12.10 ИП-00020483
&НаКлиенте
Функция ПолучитьНомераВыбранныхСтрок()
	
	НомераВыбранныхСтрок = Новый Массив;
	
	Для Каждого СтрокаТаблицыФормы Из Объект.СписокРассылки Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.СписокРассылки.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			НомераВыбранныхСтрок.Добавить(СтрокаТаблицыФормы.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомераВыбранныхСтрок;
	
КонецФункции //--- AK suvv

//+++ AK suvv 2018.12.10 ИП-00020483
&НаКлиенте
Процедура ОтправитьУПДПоЭДО(Команда)
	
	НомераВыбранныхСтрок = ПолучитьНомераВыбранныхСтрок();
	
	Для Каждого ПодчиненнаяСтрока из Объект.СписокРассылки Цикл
		
		Если НомераВыбранныхСтрок.Найти(ПодчиненнаяСтрока.НомерСтроки) = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не	ПодчиненнаяСтрока.Пометка или Не ПодчиненнаяСтрока.ЕстьДокументВБухгалтерии или ЗначениеЗаполнено(ПодчиненнаяСтрока.ОтправленУПДПоЭДО) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если не ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПодчиненнаяСтрока.Контрагент, "ЭДО") Тогда
			Сообщить("Рассылка возвратных документов поставщику " + ПодчиненнаяСтрока.Контрагент + " не может быть выполнена: у контрагента не подключен ЭДО.");
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ДокументВозврата.Пустая() Тогда
			Сообщить("По строке " + ПодчиненнаяСтрока.НомерСтроки + " рассылка возвратных документов поставщику " + ПодчиненнаяСтрока.Контрагент + " не может быть выполнена: не заполнен документ возврата.");
			Продолжить;		
		КонецЕсли;
		
		Сообщить("Отправка УПД поставщику " + ПодчиненнаяСтрока.Контрагент + " по возврату " + ПодчиненнаяСтрока.ДокументВозврата);
		
		ДокВозврат = ПодчиненнаяСтрока.ДокументВозврата;
		Если ЗначениеЗаполнено(ДокВозврат.НомерИсходящегоСчетаФактуры) = Ложь или ЗначениеЗаполнено(ДокВозврат.ДатаИсходящегоСчетаФактуры) = Ложь Тогда
			Сообщить("Рассылка возвратных документов не может быть выполнена: не заполнен номер и/или дата исходящего счета фактуры!");
			Продолжить;
		КонецЕсли;	
		
		Результат = ЭДО_ОбщегоНазначения.ОтправитьДокументЭДО(ДокВозврат, "УПД");
		
		Если Результат.ДокументОтправлен = Ложь Тогда
			Сообщить("Документ не был отправлен.");				
			Сообщить(Результат.ТекстОшибки);
			Продолжить;
		Иначе
			Сообщить("Документ успешно отправлен.");
			ПодчиненнаяСтрока.ОтправленУПДПоЭДО = ТекущаяДата();
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры //--- AK suvv








