
&НаСервереБезКонтекста
Функция СчетМожноИспользоватьВПроводках(мСчет)
	
	Если НЕ ТипЗнч(мСчет) = Тип("ПланСчетовСсылка.Финансовый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если мСчет = ПланыСчетов.Финансовый.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если мСчет.ЗапретитьИспользоватьВПроводках Тогда

 		Сообщение = Новый СообщениеПользователю();
		//Сообщение.ПутьКДанным 	= мСчет;
		Сообщение.Текст 		= "Счет " + СокрЛП(мСчет)+ " """ + мСчет.Наименование + """ нельзя использовать в проводках.";
		Сообщение.Сообщить();

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОС(мОсновноеСредство, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	Запрос.УстановитьПараметр("Дата"			, мДата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)), , Субконто3 = &ОсновноеСредство) КАК ФинансовыйОстатки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Счет;
	Иначе
		Возврат ПланыСчетов.Финансовый.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Функция определяет статью ДДС для передаваемого в качестве параметра основного средства
// как статью ДДС, указанную в последнем на дату (второй параметр) документе поступления данного ОС.
//
// Параметры:
// 	 мОсновноеСредство 	- СправочникСсылка.ОсновныеСредства;
//   мДата				- Дата.
//
Функция ПолучитьСтатьюДДСОС(мОсновноеСредство, мДата) Экспорт
	
	Перем Запрос, Выборка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	Запрос.УстановитьПараметр("Дата"			, мДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПоступлениеОСНоменклатура.Ссылка.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ПоступлениеОС.Номенклатура КАК ПоступлениеОСНоменклатура
	|ГДЕ
	|	ПоступлениеОСНоменклатура.Ссылка.Дата < &Дата
	|	И ПоступлениеОСНоменклатура.Ссылка.Проведен
	|	И ПоступлениеОСНоменклатура.ОсновноеСредство = &ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеОСНоменклатура.Ссылка.МоментВремени УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатьяДДС;
	Иначе
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦФОПоТТ(мТорговаяТочка, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТТ"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("Дата", мДата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &ТТ) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЦФО;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСебестоимостьОС(мОсновноеСредство, мДата, мСклад, мЦФО)
	
	мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
	ЕстьНовыйУчетСчетовОС = (НЕ мДата < мДатаНовогоУчетаСчетовОС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"			, мДата);
	Запрос.УстановитьПараметр("Склад"			, мСклад);
	Если НЕ ЕстьНовыйУчетСчетовОС Тогда
		Запрос.УстановитьПараметр("ЦФО"			, мЦФО);
	КонецЕсли;
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.СуммаОстаток КАК Себестоимость
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Дата,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)),
	|			,
	|			Субконто2 = &Склад
	|				И Субконто3 = &ОсновноеСредство
	|				И &УсловиеПоЦФО) КАК ФинансовыйОстатки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|				И &УсловиеПоЦФО",
		?(НЕ ЕстьНовыйУчетСчетовОС, "
	|				И Субконто1 = &ЦФО", ""));
	
	Запрос.Текст = ТекстЗапроса;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Себестоимость;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуЗакрытияТТ(мСклад)
	
	Возврат мСклад.ДатаЗакрытия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОстаткиСервер(мДата, мСкладОтправитель, мЦФООтправитель)
	
	Перем Запрос, мСписокОС;
	
	мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
	ЕстьНовыйУчетСчетовОС = (НЕ мДата < мДатаНовогоУчетаСчетовОС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	, мДата);
	Запрос.УстановитьПараметр("Склад"	, мСкладОтправитель);
	Если НЕ ЕстьНовыйУчетСчетовОС Тогда
		Запрос.УстановитьПараметр("ЦФО"	, мЦФООтправитель);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.Субконто3 КАК ОсновноеСредство
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Дата,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)),
	|			,
	|			Субконто2 = &Склад
	|				И &УсловиеПоЦФО) КАК ФинансовыйОстатки
	|ГДЕ
	|	ФинансовыйОстатки.КоличествоОстаток > 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|				И &УсловиеПоЦФО",
		?(НЕ ЕстьНовыйУчетСчетовОС, "
	|				И Субконто1 = &ЦФО", ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	мСписокОС = Новый СписокЗначений;
	мСписокОС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	
	Возврат мСписокОС;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоКт(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконтоКт(Форма, Объект, "СубконтоКт%Индекс%");
	БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоКт%Индекс%", "СубконтоКт%Индекс%Прочие", ПараметрыДокумента);
	БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоКт%Индекс%", "СубконтоКт%Индекс%УслугиБанка", ПараметрыДокумента);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоДт(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконтоДт(Форма, Объект, "СубконтоДт%Индекс%");
	БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоДт%Индекс%", "СубконтоДт%Индекс%Прочие", ПараметрыДокумента);
	БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоДт%Индекс%", "СубконтоДт%Индекс%УслугиБанка", ПараметрыДокумента);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконтоДт(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		//Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		//	СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		//ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		//	СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		//ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
		//	СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		//Иначе
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта.СкладПолучатель);
		КонецЕсли;
	КонецЦикла;
	//СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконтоКт(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		//Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		//	СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		//ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		//	СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		//ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
		//	СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		//Иначе
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта.СкладОтправитель);
		КонецЕсли;
	КонецЦикла;
	//СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконтоДт(Форма, Счет, Префикс = "", Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДт1" + Постфикс,
		Префикс + "СубконтоДт2" + Постфикс,
		Префикс + "СубконтоДт3" + Постфикс);

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДт1", "ЗаголовокСубконтоДт2", "ЗаголовокСубконтоДт3");

	//Если ЕстьПодразделение Тогда
	//	ПоляФормы.Вставить("Подразделение",      Префикс + "ПодразделениеКт" + Постфикс);
	//	ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение");
	//КонецЕсли;

	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);

	//Форма.ЗаголовокПодразделение = "Подразделение:";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконтоКт(Форма, Счет, Префикс = "", Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоКт1" + Постфикс,
		Префикс + "СубконтоКт2" + Постфикс,
		Префикс + "СубконтоКт3" + Постфикс);

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоКт1", "ЗаголовокСубконтоКт2", "ЗаголовокСубконтоКт3");

	//Если ЕстьПодразделение Тогда
	//	ПоляФормы.Вставить("Подразделение",      Префикс + "ПодразделениеКт" + Постфикс);
	//	ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение");
	//КонецЕсли;

	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);

	//Форма.ЗаголовокПодразделение = "Подразделение:";

КонецПроцедуры

Процедура УстановитьВидимость(мДата, мСкладОтправитель, мСкладПолучатель)
	
	Если ТипЗнч(мСкладОтправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			И ЗначениеЗаполнено(мСкладОтправитель) Тогда
		мДатаЗакрытия = ПолучитьДатуЗакрытияТТ(мСкладОтправитель);
		Если ЗначениеЗаполнено(мДатаЗакрытия)
				И мДатаЗакрытия < мДата Тогда
			Элементы.СкладОтправитель.ЦветФона = Новый Цвет(222, 222, 222);
		Иначе
			Элементы.СкладОтправитель.ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
	Иначе
		Элементы.СкладОтправитель.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	Если ТипЗнч(мСкладПолучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			И ЗначениеЗаполнено(мСкладПолучатель) Тогда
		мДатаЗакрытия = ПолучитьДатуЗакрытияТТ(мСкладПолучатель);
		Если ЗначениеЗаполнено(мДатаЗакрытия)
				И мДатаЗакрытия < мДата Тогда
			Элементы.СкладПолучатель.ЦветФона = Новый Цвет(222, 222, 222);
		Иначе
			Элементы.СкладПолучатель.ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
	Иначе
		Элементы.СкладПолучатель.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	Элементы.НоменклатураСебестоимость.Видимость = (мДата < Дата("20131201"));
	
	//+++susk
	//ИП-00016825
	ВидимостьПоДате = Объект.Дата >= Дата("20170101");
		
	Элементы.Группа7.Видимость = НЕ ВидимостьПоДате;
	Элементы.НоменклатураСчетУчетаЗабалансовый.Видимость = НЕ ВидимостьПоДате;
	Элементы.НоменклатураСебестоимость.Видимость = НЕ ВидимостьПоДате;
	Элементы.НоменклатураСтруктурнаяЕдиницаПолучатель.Видимость = ВидимостьПоДате;
	Элементы.НоменклатураСтруктурнаяЕдиницаОтправитель.Видимость = ВидимостьПоДате;
	Элементы.Группа2.Видимость = НЕ ВидимостьПоДате;
	Элементы.Группа3.Видимость = НЕ ВидимостьПоДате;
	//---susk
	
КонецПроцедуры

Процедура УстановитьСчетаОтправителяПолучателяПоУмолчанию(ФлагИзменились)
	
	Если ЗначениеЗаполнено(Объект.СкладОтправитель)
			И ТипЗнч(Объект.СкладОтправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			И ЗначениеЗаполнено(Объект.СкладПолучатель)
			И ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584
		//Если Объект.СкладОтправитель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_69")
		Если Объект.СкладОтправитель = ПолучитьЭлементСправочникаПоКоду("СтруктурныеЕдиницы", "ЦФО_69")
		//---АК Susk (Суслин К.В.) 
				И (НЕ (Объект.СкладПолучатель.id_TT = 0
						И Объект.СкладПолучатель.id_ЦФО = 0))
				И НЕ ЗначениеЗаполнено(Объект.СкладПолучатель.ДатаЗакрытия) Тогда // со склада на ТТ
			
			//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584	
			//Объект.СчетОтправитель 	= ПланыСчетов.Финансовый.КапитальныеВложения;
			//Объект.СчетПолучатель 	= ПланыСчетов.Финансовый.Инвестиции;
			Объект.СчетОтправитель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения");
			Объект.СчетПолучатель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.Инвестиции");
			//---АК Susk (Суслин К.В.) 
			Объект.НеФормироватьПроводкиПоБалансовымСчетам = Ложь;
		
		Иначе
			
			//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584	
			//Объект.СчетОтправитель 	= ПланыСчетов.Финансовый.ПустаяСсылка(); 
			//Объект.СчетПолучатель 	= ПланыСчетов.Финансовый.ПустаяСсылка(); 
			Объект.СчетОтправитель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.ПустаяСсылка");
			Объект.СчетПолучатель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.ПустаяСсылка");
			//---АК Susk (Суслин К.В.) 
			Объект.НеФормироватьПроводкиПоБалансовымСчетам = Истина;
			
		КонецЕсли;
		
		ФлагИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаСубконтоДтСервер()
	
	Инд = 1;
	мВидыСубконто 		= ПланыВидовХарактеристик.ВидыСубконто;
	мВидыСубконтоСчета 	= Объект.СчетПолучатель.ВидыСубконто;
	Для Каждого СтрокаВидСубконто Из мВидыСубконтоСчета Цикл
		Если НЕ ЗначениеЗаполнено(Объект["СубконтоДт" + Инд]) Тогда
			Если СтрокаВидСубконто.ВидСубконто = мВидыСубконто.ЦФО Тогда
				Объект["СубконтоДт" + Инд] = Объект.ЦФОПолучатель;
			ИначеЕсли СтрокаВидСубконто.ВидСубконто = мВидыСубконто.СтруктурныеЕдиницы
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.ТорговыеТочки
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.МестаХраненияОС
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.Склады Тогда
				Объект["СубконтоДт" + Инд] = Объект.СкладПолучатель;
			//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584		 	
			//ИначеЕсли Объект.СчетПолучатель = ПланыСчетов.Финансовый.КапитальныеВложения
			ИначеЕсли Объект.СчетПолучатель = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения")
			//---АК Susk (Суслин К.В.) 
					И Инд = 1 Тогда
				Если Объект.Номенклатура.Количество() > 0 Тогда					
					ТекСчетЗабалансовый = Объект.Номенклатура[0].СчетУчетаЗабалансовый;
					//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584
					//Если ТекСчетЗабалансовый = ПланыСчетов.Финансовый.ККМ Тогда
					Если ТекСчетЗабалансовый = ПредопределенноеЗначение("ПланСчетов.Финансовый.ККМ") Тогда
					//---АК Susk (Суслин К.В.) 
					    Объект.СубконтоДт1 = ПолучитьСтатьюДДСОС(Объект.Номенклатура[0].ОсновноеСредство,
															?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаСубконтоКтСервер()
	
	Инд = 1;
	мВидыСубконто 		= ПланыВидовХарактеристик.ВидыСубконто;
	мВидыСубконтоСчета 	= Объект.СчетОтправитель.ВидыСубконто;
	Для Каждого СтрокаВидСубконто Из мВидыСубконтоСчета Цикл
		Если НЕ ЗначениеЗаполнено(Объект["СубконтоКт" + Инд]) Тогда
			Если СтрокаВидСубконто.ВидСубконто = мВидыСубконто.ЦФО Тогда
				Объект["СубконтоКт" + Инд] = Объект.ЦФООтправитель;
			ИначеЕсли СтрокаВидСубконто.ВидСубконто = мВидыСубконто.СтруктурныеЕдиницы
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.ТорговыеТочки
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.МестаХраненияОС
						ИЛИ СтрокаВидСубконто.ВидСубконто = мВидыСубконто.Склады Тогда
				Объект["СубконтоКт" + Инд] = Объект.СкладОтправитель;
			//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584	
			//ИначеЕсли Объект.СчетОтправитель = ПланыСчетов.Финансовый.КапитальныеВложения
			ИначеЕсли Объект.СчетОтправитель = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения")
			//---АК Susk (Суслин К.В.) 
					И Инд = 1 Тогда
				Если Объект.Номенклатура.Количество() > 0 Тогда
					ТекСчетЗабалансовый = Объект.Номенклатура[0].СчетУчетаЗабалансовый;
					//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584	
					//Если ТекСчетЗабалансовый = ПланыСчетов.Финансовый.ККМ Тогда
					Если ТекСчетЗабалансовый = ПредопределенноеЗначение("ПланСчетов.Финансовый.ККМ") Тогда
					//---АК Susk (Суслин К.В.) 
					    Объект.СубконтоКт1 = ПолучитьСтатьюДДСОС(Объект.Номенклатура[0].ОсновноеСредство,
															?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018466
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Перемещение ОС");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый документ
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	УстановитьВидимость(Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);
	
	мДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"); 
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		Объект.СкладОтправитель = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Объект.СкладПолучатель = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
	УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
	
	//+++АК SaMi 2018.10.10 ИП-00019767^01 
	СкладХолодильников = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников");
	//---АК SaMi  2018.10.10 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+++susk
	//ИП-00016825
	Если Не ПеремещениеПоНовойСхеме() Тогда
		Если Объект.СкладОтправитель = Объект.СкладПолучатель
				И Объект.ЦФООтправитель = Объект.ЦФОПолучатель Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.ПутьКДанным 	= ?(Объект.СкладОтправитель = Объект.СкладПолучатель, Объект.СкладПолучатель, Объект.ЦФОПолучатель);
			Сообщение.Текст 		= "Ошибка! Данные отправителя и получателя ОС идентичны";
			Сообщение.Сообщить();
			Отказ = Истина;		
		КонецЕсли;
	КонецЕсли;
	//---susk
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрЧислоВхождений(ИсточникВыбора.ИмяФормы, "Справочник.ОсновныеСредства") > 0 Тогда
		
		// Проверка на то, что ОС уже есть в ТЧ
		Массив = Объект.Номенклатура.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранноеЗначение));
		Если Массив.Количество() > 0
				И НЕ Вопрос(Строка(ВыбранноеЗначение) + " уже есть в табличной части. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ = Объект.Номенклатура.Добавить();
		СтрокаТЧ.ОсновноеСредство = ВыбранноеЗначение;
		
		мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
		пСчетУчета = ПолучитьСчетУчетаОС(ВыбранноеЗначение, мДата);
		Если ЗначениеЗаполнено(пСчетУчета) Тогда
			СтрокаТЧ.СчетУчетаЗабалансовый = пСчетУчета;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьВидимость(Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.СкладОтправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
		Объект.ЦФООтправитель = ПолучитьЦФОПоТТ(Объект.СкладОтправитель, мДата);
	КонецЕсли;
	
	ФлагИзменились = Ложь;
	УстановитьСчетаОтправителяПолучателяПоУмолчанию(ФлагИзменились);
	
	Если ФлагИзменились Тогда
		ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
		Если ЗначениеЗаполнено(Объект.СчетПолучатель) Тогда
			ОбработкаСубконтоДтСервер();
		КонецЕсли;
		ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
		Если ЗначениеЗаполнено(Объект.СчетОтправитель) Тогда
			ОбработкаСубконтоКтСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость(Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
		Объект.ЦФОПолучатель = ПолучитьЦФОПоТТ(Объект.СкладПолучатель, мДата);
	КонецЕсли;
	
	ФлагИзменились = Ложь;
	УстановитьСчетаОтправителяПолучателяПоУмолчанию(ФлагИзменились);
	
	Если ФлагИзменились Тогда
		ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
		Если ЗначениеЗаполнено(Объект.СчетПолучатель) Тогда
			ОбработкаСубконтоДтСервер();
		КонецЕсли;
		ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
		Если ЗначениеЗаполнено(Объект.СчетОтправитель) Тогда
			ОбработкаСубконтоКтСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость(Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОтправительПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
	Если ЗначениеЗаполнено(Объект.СчетОтправитель) Тогда
		ОбработкаСубконтоКтСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПолучательПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
	Если ЗначениеЗаполнено(Объект.СчетПолучатель) Тогда
		ОбработкаСубконтоДтСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НеФормироватьПроводкиПоБалансовымСчетамПриИзменении(Элемент)
	
	Если Объект.НеФормироватьПроводкиПоБалансовымСчетам Тогда
		Объект.СчетОтправитель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.ПустаяСсылка");
		Объект.СчетПолучатель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.ПустаяСсылка");		
		ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
		ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
	Иначе
		//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584
		//Если Объект.СкладОтправитель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_69")
		Если Объект.СкладОтправитель = ПолучитьЭлементСправочникаПоКоду("СтруктурныеЕдиницы", "ЦФО_69")
		//---АК Susk (Суслин К.В.) 
				И ЗначениеЗаполнено(Объект.СкладПолучатель)
				И ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
				И (НЕ (Объект.СкладПолучатель.id_TT = 0
						И Объект.СкладПолучатель.id_ЦФО = 0))
				И НЕ ЗначениеЗаполнено(Объект.СкладПолучатель.ДатаЗакрытия) Тогда // со склада на ТТ
			//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584
			//Объект.СчетОтправитель 	= ПланыСчетов.Финансовый.КапитальныеВложения;
			//Объект.СчетПолучатель 	= ПланыСчетов.Финансовый.Инвестиции;
			Объект.СчетОтправитель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения");	
			Объект.СчетПолучатель 	= ПредопределенноеЗначение("ПланСчетов.Финансовый.Инвестиции");
			//---АК Susk (Суслин К.В.) 
			ИзменитьПараметрыВыбораПолейСубконтоКт(ЭтаФорма);
			УстановитьЗаголовкиИДоступностьСубконтоКт(ЭтаФорма, Объект.СчетОтправитель,, "", Истина);
			ОбработкаСубконтоКтСервер();
			ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
			УстановитьЗаголовкиИДоступностьСубконтоДт(ЭтаФорма, Объект.СчетПолучатель,, "", Истина);
			ОбработкаСубконтоДтСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Подбор(Команда)
	
	//+++susk
	//ИП-00016825
	Если ПеремещениеПоНовойСхеме() Тогда
		ПараметрыФормы = Новый Структура;
		//мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), КонецДня(Объект.Дата));
		//мСписокОС = ПолучитьОстаткиСервер(мДата, Объект.СкладОтправитель, Объект.ЦФООтправитель);
		//ПараметрыФормы.Вставить("СписокПриОткрытии"	, мСписокОС);
		//ПараметрыФормы.Вставить("ДатаОстатков"		, мДата);
		//ПараметрыФормы.Вставить("Склад"				, Объект.СкладОтправитель);
		//ПараметрыФормы.Вставить("ЦФО"				, Объект.ЦФООтправитель);
		
		Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элементы.Номенклатура);
		
		Форма.Заголовок						= "Основные средства. Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		Форма.ОткрытьМодально();
	Иначе
		//---susk
		ПараметрыФормы = Новый Структура;
		мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), КонецДня(Объект.Дата));
		мСписокОС = ПолучитьОстаткиСервер(мДата, Объект.СкладОтправитель, Объект.ЦФООтправитель);
		ПараметрыФормы.Вставить("СписокПриОткрытии"	, мСписокОС);
		ПараметрыФормы.Вставить("ДатаОстатков"		, мДата);
		ПараметрыФормы.Вставить("Склад"				, Объект.СкладОтправитель);
		ПараметрыФормы.Вставить("ЦФО"				, Объект.ЦФООтправитель);
		
		Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
		
		Форма.Заголовок						= "Основные средства. Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		Форма.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуДокументаСервер()
	
	Возврат Объект.Номенклатура.Итог("Сумма");
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Объект.СуммаДокумента = ПолучитьСуммуДокументаСервер();
	
	ПеречитатьДанныеДатчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		//+++susk
		//ИП-00016825
		
		мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
		
		Если ПеремещениеПоНовойСхеме() Тогда
			
			СтрЕд = ПолучитьСтруктурнуюЕдиницуОтправитель(ВыбранноеЗначение, Объект.Дата);
			
			Если СтрЕд <> Неопределено Тогда
				
				НоваяСтрока = Объект.Номенклатура.Добавить();
				НоваяСтрока.ОсновноеСредство		= ВыбранноеЗначение;
			
				НоваяСтрока.СтруктурнаяЕдиницаОтправитель = СтрЕд;				
				
			КонецЕсли;
			
		Иначе
		//---susk			
			НоваяСтрока = Объект.Номенклатура.Добавить();
			НоваяСтрока.ОсновноеСредство		= ВыбранноеЗначение;			
			НоваяСтрока.Сумма = ПолучитьСебестоимостьОС(ВыбранноеЗначение, мДата, Объект.СкладОтправитель, Объект.ЦФООтправитель);
			НоваяСтрока.СчетУчетаЗабалансовый 	= ПолучитьСчетУчетаОС(ВыбранноеЗначение, мДата);
			Объект.СуммаДокумента = ПолучитьСуммуДокументаСервер();
			ТекСтатьяДДС = ПолучитьСтатьюДДСОС(ВыбранноеЗначение, мДата);
			Если ЗначениеЗаполнено(ТекСтатьяДДС)
					И (НЕ Объект.СчетОтправитель.Пустая())
					И ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				Объект.СубконтоКт1 = ТекСтатьяДДС;
			КонецЕсли;		
		КонецЕсли;			
		
	//+++АК SaMi 2018.10.10 ИП-00019767^01 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если Объект.Номенклатура.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранноеЗначение.ОсновноеСредство)).Количество() = 0 Тогда
			НоваяСтрока = Объект.Номенклатура.Добавить();
			
			НоваяСтрока.ОсновноеСредство		= ВыбранноеЗначение.ОсновноеСредство;
			НоваяСтрока.СтруктурнаяЕдиницаОтправитель = ВыбранноеЗначение.Местоположение;				
			НоваяСтрока.СтруктурнаяЕдиницаПолучатель = СкладХолодильников;
		КонецЕсли; 
	//---АК SaMi  2018.10.10 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОсновноеСредствоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
	
	//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00016825	
	Если ПеремещениеПоНовойСхеме() Тогда
			
		СтрЕд = ПолучитьСтруктурнуюЕдиницуОтправитель(ТекДанные.ОсновноеСредство, Объект.Дата);
		ТекДанные.СтруктурнаяЕдиницаОтправитель = СтрЕд;
			
		Если СтрЕд = Неопределено Тогда
			ТекДанные.ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
		КонецЕсли;

	Иначе
	//---АК Susk (Суслин К.В.) 
		ТекДанные.Сумма = ПолучитьСебестоимостьОС(ТекДанные.ОсновноеСредство, мДата, Объект.СкладОтправитель, Объект.ЦФООтправитель);
		пСчетУчета 		= ПолучитьСчетУчетаОС(ТекДанные.ОсновноеСредство, мДата);
		Если ЗначениеЗаполнено(пСчетУчета) Тогда
			ТекДанные.СчетУчетаЗабалансовый = пСчетУчета;
		КонецЕсли;
	КонецЕсли;
	
	Объект.СуммаДокумента = ПолучитьСуммуДокументаСервер();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 б\н 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость(Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);	
	ПеречитатьДанныеДатчиков();
	
	//+++АК sils 08.06.2018 ИП-00018466
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 б\н
&НаКлиенте
Функция ПеремещениеПоНовойСхеме()
	
	Возврат Объект.Дата >= Дата("20170101");
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 б\н
&НаСервереБезКонтекста
Функция ПолучитьСтруктурнуюЕдиницуОтправитель(ОС, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостояниеОССрезПоследних.ОсновноеСредство,
	               |	СостояниеОССрезПоследних.Местоположение,
	               |	СостояниеОССрезПоследних.Списано
	               |ИЗ
	               |	РегистрСведений.СостояниеОС.СрезПоследних(&Период, ) КАК СостояниеОССрезПоследних
	               |ГДЕ
	               |	СостояниеОССрезПоследних.ОсновноеСредство = &СписокОС";
	
	Запрос.УстановитьПараметр("СписокОС", ОС);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Списано Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство: " + Строка(Выборка.ОсновноеСредство) + " с инв. номером: " + Строка(Выборка.ОсновноеСредство.ИнвентарныйНомер) + " - уже списано, перемещение невозможно!");
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Основное средство: " + Строка(ОС) + " с инв. номером: " + Строка(ОС.ИнвентарныйНомер) + " - отсутствует текущее местоположение!");
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Выборка.Местоположение;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаКлиенте
Процедура ЗаполнитьПоСостояниюДатчиков(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		Предупреждение("Не заполнена организация в шапке документа! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		Предупреждение("Для заполнения необходимо отменить проведение документа!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Номенклатура.Количество() ИЛИ Объект.ПривязкаДатчиков.Количество() Тогда
		Ответ = Вопрос("Табличные части документа будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОБъект.Номенклатура.Очистить();
	Объект.ПривязкаДатчиков.Очистить();
	
	ТаблицаДатчикиПоОсам = ЗаполнитьПоСостояниюДатчиковСервер();	
		
	П = Новый Структура();
	П.Вставить("ТЗПривязки", ТаблицаПривязки);
	П.Вставить("ТаблицаДатчикиПоОсам", ТаблицаДатчикиПоОсам);
	П.Вставить("Организация", Объект.Организация);
		
	Оп = Новый ОписаниеОповещения("ОбработатьРезультатПривязкиДатчиков", ЭтаФорма);	
	ОткрытьФорму("Документ.ПеремещениеОС.Форма.ФормаПервоначальнойПривязкиДатчиков", П, ЭтаФорма, , , , Оп);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаКлиенте
Процедура ОбработатьРезультатПривязкиДатчиков(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из РезультатЗакрытия Цикл
		НовСтр = Объект.ПривязкаДатчиков.Добавить();
		НовСтр.ОсновноеСредство = Стр.ОсновноеСредство;
		НовСтр.Датчик = Стр.Датчик;
		НовСтр.МестоВыкладки = Стр.МестоВыкладки;
		НовСтр.СтруктурнаяЕдиница = Стр.СтруктурнаяЕдиница;
	КонецЦикла;
	
	ОпределитьПеремещениеТоварамПоМестоположениюДатчиков(РезультатЗакрытия);	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Процедура ОпределитьПеремещениеТоварамПоМестоположениюДатчиков(РезультатЗакрытия)
	
	МассивОС = Новый Массив;
	ТаблицаДатчиков = РезультатЗакрытия;
	
	Для Каждого Стр Из ТаблицаДатчиков Цикл
		МассивОС.Добавить(Стр.ОсновноеСредство);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостояниеОССрезПоследних.ОсновноеСредство,
	               |	СостояниеОССрезПоследних.Местоположение
	               |ИЗ
	               |	РегистрСведений.СостояниеОС.СрезПоследних(&Дата, ОсновноеСредство В (&МассивОС)) КАК СостояниеОССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайдСтр = ТаблицаДатчиков.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
		
		Если НайдСтр.СтруктурнаяЕдиница <> Выборка.Местоположение Тогда
			НовСтр = ДобавитьСтрокуПеремещения(Выборка.ОсновноеСредство);
			НовСтр.СтруктурнаяЕдиницаОтправитель = Выборка.Местоположение;
			НовСтр.СтруктурнаяЕдиницаПолучатель = НайдСтр.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ПолучитьТаблицуОСДатчиков(ДатчикиПоРегистру, ТаблицаДатчики)
	
	МассивНеНайденных = Новый Массив;
	
	ТаблицаВозврат = Новый ТаблицаЗначений;
	ТаблицаВозврат.Колонки.Добавить("ОсновноеСредство");
	ТаблицаВозврат.Колонки.Добавить("Датчик");
	ТаблицаВозврат.Колонки.Добавить("Магазин");
	ТаблицаВозврат.Колонки.Добавить("МестоВыкладки");
	
	Для Каждого Стр Из ДатчикиПоРегистру Цикл	
		
		НайдСтр = ТаблицаДатчики.Найти(Стр.Датчик, "Датчик");
		
		Если НайдСтр = Неопределено Тогда
			МассивНеНайденных.Добавить(Стр.Датчик);
		Иначе
			НовСтр = ТаблицаВозврат.Добавить();
			НовСтр.ОсновноеСредство = Стр.ОсновноеСредство;
			НовСтр.Датчик = НайдСтр.Датчик;
			НовСтр.Магазин = НайдСтр.Магазин;
			НовСтр.МестоВыкладки = НайдСтр.МестоВыкладки;
		КонецЕсли;
	КонецЦикла;
		
	Если МассивНеНайденных.Количество() = 0 Тогда
		Возврат ТаблицаВозврат;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрокаДатчики = "";
	
	Для Каждого Датчик Из МассивНеНайденных Цикл
		СтрокаДатчики = СтрокаДатчики + Формат(Датчик.ИД,"ЧГ=0") + ",";
	КонецЦикла;
	
	СтрокаДатчики = Лев(СтрокаДатчики, СтрДлина(СтрокаДатчики) - 1);
	
	ТекстЗапроса = "exec M2.dbo.sp_GetSensorShopNoByID '" + СтрокаДатчики + "'";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	ТаблицаДатчикиПоИд = Новый ТаблицаЗначений;
	ТаблицаДатчикиПоИд.Колонки.Добавить("МестоВыкладки");
	ТаблицаДатчикиПоИд.Колонки.Добавить("Магазин");
	ТаблицаДатчикиПоИд.Колонки.Добавить("Датчик");
	ТаблицаДатчикиПоИд.Колонки.Добавить("НомерМагазина");
	
	ЗапросСпр = Новый Запрос;
	ЗапросСпр.Текст = "ВЫБРАТЬ
	                  |	Датчики.Ссылка,
	                  |	Датчики.Наименование,
	                  |	Датчики.ИД
	                  |ИЗ
	                  |	Справочник.Датчики КАК Датчики
	                  |ГДЕ
	                  |	Датчики.Ссылка В(&МассивНеНайденных)";
	
	ЗапросСпр.УстановитьПараметр("МассивНеНайденных", МассивНеНайденных);
	
	ТаблицаДатчикиБазы = ЗапросСПр.Выполнить().Выгрузить();
	
	Попытка
		rs.MoveFirst();
		Пока НЕ rs.Eof() Цикл
			
			МестоВыкладки = СокрЛП(rs.Fields("МестоВыкладки").Value);			
			
			НайдСтр = ТаблицаДатчикиБазы.Найти(rs.Fields("ИдДатчика").Value, "ИД");
				
			Датчик = НайдСтр.Ссылка;											
			
			НовСтр = ТаблицаДатчикиПоИд.Добавить();
			НовСтр.НомерМагазина = rs.Fields("НомерМагазина").Value;
			НовСтр.Датчик =	Датчик;
			НовСтр.МестоВыкладки = МестоВыкладки; 
			
			rs.MoveNext();
			
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	МассивТочек = Новый Массив;
	
	Для Каждого Стр Из ТаблицаДатчикиПоИд Цикл
		МассивТочек.Добавить(Стр.НОмерМагазина);
	КонецЦикла;
	
	ЗапросСпр.Текст = "ВЫБРАТЬ
	                  |	СтруктурныеЕдиницы.Ссылка,
	                  |	СтруктурныеЕдиницы.НомерТочки
	                  |ИЗ
	                  |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                  |ГДЕ
	                  |	СтруктурныеЕдиницы.НомерТочки В(&НомераТочек)";
	
	ЗапросСпр.УстановитьПараметр("НомераТочек", МассивТочек);
	
	ТзТочки = ЗапросСпр.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ДатчикиПоРегистру Цикл
		НайдСтр = ТаблицаДатчики.Найти(Стр.Датчик, "Датчик");		
		
		Если НайдСтр = Неопределено Тогда
			НайдСтр = ТаблицаДатчикиПоИд.Найти(Стр.Датчик, "Датчик");
			
			Если НайдСтр = Неопределено Тогда
				Продолжить;
			Иначе
				НовСтр = ТаблицаВозврат.Добавить();
				НовСтр.ОсновноеСредство = Стр.ОсновноеСредство;
				НовСтр.Датчик = НайдСтр.Датчик;
				
				НайдСтрТТ = ТЗТочки.Найти(НайдСтр.НомерМагазина, "НомерТочки");
				
				Если НЕ НайдСтрТТ = Неопределено Тогда
					НовСтр.Магазин = НайдСтрТТ.Ссылка;
				КонецЕсли;
				
				НовСтр.МестоВыкладки = НайдСтр.МестоВыкладки;	
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВозврат;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервереБезКонтекста
Функция ПолучитьТаблицуДатчиковПоРегистру(Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеДатчиковИОсновныхСредствСрезПоследних.Датчик,
	               |	СоответствиеДатчиковИОсновныхСредствСрезПоследних.ОсновноеСредство,
	               |	ЛОЖЬ КАК Обработан
	               |ИЗ
	               |	РегистрСведений.СоответствиеДатчиковИОсновныхСредств.СрезПоследних(&Дата, ) КАК СоответствиеДатчиковИОсновныхСредствСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ЗаполнитьПоСостояниюДатчиковСервер()
		
	ТаблицаНаименованийОС = ПолучитьТаблицуНаименованийОСФорма();
	ТаблицаИсключаемыхНаименований = ПолучитьТаблицуИсключаемыхНаименований();
	ТаблицаПривязки.Очистить();
	
	СписокНаименований = Новый Массив;
	
	Для Каждого Стр Из ТаблицаНаименованийОС Цикл
		НайдСтр = ТаблицаИсключаемыхНаименований.Найти(Стр.ОС, "ОС");
		
		Если НайдСтр = Неопределено Тогда
			СписокНаименований.Добавить(Стр.ОС);
		КонецЕсли;
	КонецЦикла;
	
	СкладХолодильников = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников");
	
	ДатчикиПоРегистру = ПолучитьТаблицуДатчиковПоРегистру(Объект.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНаименований", СписокНаименований);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваВОрганизации);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваДо100000);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Дата", Объект.Дата); 
	Запрос.УстановитьПараметр("СкладОборудование", Справочники.Склады.НайтиПоНаименованию("Склад_Оборудование", Истина));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка
	               |ПОМЕСТИТЬ Комплекты
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.Наименование В(&СписокНаименований)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Комплекты.Ссылка КАК ОсновноеСредство,
	               |	СостояниеОССрезПоследних.Местоположение,
	               |	ЕСТЬNULL(СоответствиеДатчиковИОсновныхСредствСрезПоследних.Датчик, ЗНАЧЕНИЕ(Справочник.Датчики.ПустаяСсылка)) КАК Датчик,
	               |	ЛОЖЬ КАК Обработан
	               |ИЗ
	               |	Комплекты КАК Комплекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Остатки(
	               |				&Дата,
	               |				Счет В (&СписокСчетов),
	               |				,
	               |				Субконто1 В
	               |						(ВЫБРАТЬ
	               |							комплекты.Ссылка
	               |						ИЗ
	               |							комплекты)
	               |					И Организация = &Организация) КАК ФинансовыйОстатки
	               |		ПО Комплекты.Ссылка = ФинансовыйОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
	               |				&Дата,
	               |				ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						Комплекты.Ссылка
	               |					ИЗ
	               |						Комплекты)) КАК СостояниеОССрезПоследних
	               |		ПО Комплекты.Ссылка = СостояниеОССрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДатчиковИОсновныхСредств.СрезПоследних(&Дата, ) КАК СоответствиеДатчиковИОсновныхСредствСрезПоследних
	               |		ПО Комплекты.Ссылка = СоответствиеДатчиковИОсновныхСредствСрезПоследних.ОсновноеСредство
	               |ГДЕ
	               |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0) <> 0
	               |	И НЕ СостояниеОССрезПоследних.Местоположение ЕСТЬ NULL
	               |	И НЕ СостояниеОССрезПоследних.Списано
	               |	И СостояниеОССрезПоследних.Местоположение <> &СкладОборудование";	
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДатчики = Документы.ПеремещениеОС.ПолучитьДатчикиВМестахХранения(Объект.Дата);
	
	ТаблицаОСДатчик = ПолучитьТаблицуОСДатчиков(ДатчикиПоРегистру, ТаблицаДатчики);
	
	ТаблицаСдвоенныхДатчиков = ПолучитьТаблицуСдвоенныхДатчиков(ТаблицаОС);
	
	ЗапросВиртСклад = Новый Запрос;
	ЗапросВиртСклад.Текст = "ВЫБРАТЬ
	                        |	СостояниеОССрезПоследних.ОсновноеСредство,
	                        |	ЛОЖЬ КАК Обработан
	                        |ИЗ
	                        |	РегистрСведений.СостояниеОС.СрезПоследних КАК СостояниеОССрезПоследних
	                        |ГДЕ
	                        |	СостояниеОССрезПоследних.Местоположение = &Местоположение
	                        |	И СостояниеОССрезПоследних.ОсновноеСредство.Наименование В (&СписокНаименований)";
	
	ЗапросВиртСклад.УстановитьПараметр("СписокНаименований", СписокНаименований);
	ЗапросВиртСклад.УстановитьПараметр("Местоположение", Справочники.Склады.НайтиПоНаименованию("Склад Холодильников", Истина));
	
	ТЗВирт = ЗАпросВиртСклад.Выполнить().Выгрузить();
	
	//подготовим структуру поиска
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Обработан", Ложь);
	
	СтруктураПоискаДвойников = Новый Структура;
		
	//сперва обработаем привязанные датчики к ОСам
	Для Каждого Стр Из ТаблицаОС Цикл
		
		// Датчик к ОСу уже привязан
		Если ЗначениеЗаполнено(Стр.Датчик) Тогда
			
			//ищем этот датчик по данным sql
			НайдСтр = ТаблицаДатчики.Найти(Стр.Датчик, "Датчик");
			
			// а в sql этого датчика нет. Значит надо само ОС переместить на вирт. склад
			Если НайдСтр = Неопределено Тогда
				
				//ищем, может это сдвоенный ОС на два датчика
				СтруктураПоискаДвойников.Вставить("ОсновноеСредство", Стр.ОсновноеСредство);
				СтруктураПоискаДвойников.Вставить("Датчик", Стр.Датчик);
				
				НайдСтроки = ТаблицаСдвоенныхДатчиков.НайтиСтроки(СтруктураПоискаДвойников);
				
				//нашли двойника, меняем состояние у датчика на "не работает". Потом их буду перемещать по принципу
				//если оба датчика в отрубе, то перемещаю.
				Если НайдСтроки.Количество() <> 0 Тогда
					Для Каждого НСтр Из НайдСтроки Цикл
						НСтр.Состояние = 0;
					КонецЦикла;
				Иначе				
					//одинарный ос, просто перемещаю.
					НовСтр = ДобавитьСтрокуПеремещения(Стр.ОсновноеСредство);
					НовСтр.СтруктурнаяЕдиницаОтправитель = Стр.Местоположение;
					НовСтр.СтруктурнаяЕдиницаПолучатель = СкладХолодильников;
				КонецЕсли;
				
				Стр.Обработан = Истина;
				Продолжить;
			КонецЕсли;
			
			//в sql датчик есть. Проверяем совпадает ли местоположение из 1С и в sql
			Если НайдСтр.Магазин <> Стр.Местоположение Тогда
				
				//Если это одинарный датчик, то его перемещаем. А вот если двойной, то значит надо датчик показать в непривязанных, а сам ОС не перемещать при этом.
				//Однако, если оба датчика у ОСа переместились на новую точку, то сам ОС тоже туда перекидываю
				СтруктураПоискаДвойников.Вставить("ОсновноеСредство", Стр.ОсновноеСредство);
				СтруктураПоискаДвойников.Вставить("Датчик", Стр.Датчик);
				
				НайдСтроки = ТаблицаСдвоенныхДатчиков.НайтиСтроки(СтруктураПоискаДвойников);

				Если НайдСтроки.Количество() <> 0 Тогда
					Для Каждого НСтр Из НайдСтроки Цикл
						НСтр.СостояниеСмениласьТочка = 0; //ноль, потому что в конце сворачиваю и суммирую колонку. Если 0 остался, то перемещаю, иначе если 0 и 1, будет 1 - значит не перемещаю.
					КонецЦикла;					
				Иначе				
					//одинарная привязка, не совпало - перемещаем
					НовСтр = ДобавитьСтрокуПеремещения(Стр.ОсновноеСредство);
					НовСтр.СтруктурнаяЕдиницаОтправитель = Стр.Местоположение;
					НовСтр.СтруктурнаяЕдиницаПолучатель = НайдСтр.Магазин;
				КонецЕсли;
				
			Иначе //совпало местоположение
				//ничего не делаем
			КонецЕсли;
			
			Стр.Обработан = Истина; //эту строчку больше не трогаем, привязывать заново не надо, итак верно привязано.						
					
		КонецЕсли;	
		
	КонецЦикла;
	
	//***
	//обработаю сразу двойников, по которым сменилась точка
	ТаблицаСдвоенныхСмениласьТочка = ТаблицаСдвоенныхДатчиков.Скопировать();	
	ТаблицаСдвоенныхСмениласьТочка.Свернуть("ОсновноеСредство", "СостояниеСмениласьТочка");
	
	МассивДатчиковСдвоенныВклВПривязку = Новый Массив;
	
	Для Каждого Стр Из ТаблицаСдвоенныхСмениласьТочка Цикл
		Если Стр.СостояниеСмениласьТочка = 0 Тогда //перемещаем ОС вместе с датчиками на новую точку
			НовСтр = ДобавитьСтрокуПеремещения(Стр.ОсновноеСредство);			
			НайдСтрПолучитьДатчик = ТаблицаСдвоенныхДатчиков.Найти(Стр.ОсновноеСредство, "ОсновноеСредство");			
			НайдСтрДатчики = ТаблицаДатчики.Найти(НайдСтрПолучитьДатчик.Датчик, "Датчик");
			НайдСтрОС = ТаблицаОС.Найти(Стр.ОсновноеСредство, "ОсновноеСредство");			
			НовСтр.СтруктурнаяЕдиницаОтправитель = НайдСтрОС.Местоположение;
			НовСтр.СтруктурнаяЕдиницаПолучатель = НайдСтрДатчики.Магазин;			
		Иначе // переместился только один датчик с ОСа, значит его отвязываем от ОСа
			
			НайдСтрПолучитьДатчик = ТаблицаСдвоенныхДатчиков.НайтиСтроки(Новый Структура("ОсновноеСредство", Стр.ОсновноеСредство));			
			
			Для Каждого НСтр Из НайдСтрПолучитьДатчик Цикл 
				Если НСтр.СостояниеСмениласьТочка = 0 Тогда //сменилась точка			
					МассивДатчиковСдвоенныВклВПривязку.Добавить(НСтр.Датчик);					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	//***
	
	МассивСтрДляУд = Новый Массив;
	
	Для Каждого Стр Из ТаблицаДатчики Цикл
		//если датчик уже когда-то был привязан к ОС, то выкидываем его из распределения.
		//но если он вдруг освободился (в случае двойников), то не выкидываем.
		Если ДатчикиПоРегистру.Найти(Стр.Датчик, "Датчик") <> Неопределено И МассивДатчиковСдвоенныВклВПривязку.Найти(Стр.Датчик) = Неопределено Тогда
			МассивСтрДляУд.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из МассивСтрДляУд Цикл
		ТаблицаДатчики.Удалить(Стр);
	КонецЦикла;		
	
	//теперь уже непосредственно привязываем
	//сперва молочку отдельно	
	МассивМагазинов = ТаблицаДатчики.ВыгрузитьКолонку("Магазин");
	ОБщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивМагазинов);
	
	СтруктураПоиска2 = Новый Структура;
	СтруктураПоиска2.Вставить("Обработан", Ложь);
	
	ВыданоСообщениеОТомЧтоЗакончилосьОборудование = Ложь;
	
	Для Каждого Магаз Из МассивМагазинов Цикл
		
		СтруктураПоиска2.Вставить("Магазин", Магаз);
		СтруктураПоиска2.Вставить("МестоВыкладки", "Молочка");
		
		НайдСтроки = ТаблицаДатчики.НайтиСтроки(СтруктураПоиска2);
		
		СчОс = 0;
		
		Для Каждого Стр Из НайдСтроки Цикл
			СчОс = СчОС + 1;
			
			Стр.Обработан = Истина;
				
			Если СчОС = 1 Тогда
				
				СтруктураПоиска.Вставить("Местоположение", Стр.Магазин);
				СтруктураПоиска.Вставить("Датчик", Справочники.Датчики.ПустаяСсылка());
		
				НайдСтроки = ТАблицаОС.НайтиСтроки(СтруктураПоиска);
		
				Если НайдСтроки.Количество() = 0 Тогда
					НайдСтроки = ТзВирт.НайтиСтроки(Новый Структура("Обработан", Ложь));
			
					Если НайдСтроки.Количество() = 0 Тогда
						Если НЕ ВыданоСообщениеОТомЧтоЗакончилосьОборудование Тогда
							Сообщить("Кончилось оборудование на виртуальном складе!");
							ВыданоСообщениеОТомЧтоЗакончилосьОборудование = Истина;
						КонецЕсли;
						
						НовСтр = ТаблицаПривязки.Добавить();
						НовСтр.СтруктурнаяЕдиница = Стр.Магазин;
						НовСтр.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
						НовСтр.Датчик = Стр.Датчик;
						НовСтр.МестоВыкладки = Стр.МестоВыкладки;					
												
						Прервать;
					Иначе
						НСтрока = НайдСтроки[0];
						НовСтр = ДобавитьСтрокуПеремещения(НСтрока.ОсновноеСредство);
						НовСтр.СтруктурнаяЕдиницаОтправитель = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников", Истина);
						НовСтр.СтруктурнаяЕдиницаПолучатель = Стр.Магазин;
					КонецЕсли;
					
				КонецЕсли;		
		
				НСтрока = НайдСтроки[0];
		
				НовСтр = ТаблицаПривязки.Добавить();
				НовСтр.ОсновноеСредство = НСтрока.ОсновноеСредство;
				НОвСтр.Датчик = Стр.Датчик;
				НовСтр.СтруктурнаяЕдиница = Стр.Магазин;
				НовСтр.МестоВыкладки = Стр.МестоВыкладки;
										
				НСтрока.Обработан = Истина;
				
			Иначе
				
				СчОс = 0;
				
				НовСтр = ТаблицаПривязки.Добавить();
				НовСтр.ОсновноеСредство = НСтрока.ОсновноеСредство;
				НОвСтр.Датчик = Стр.Датчик;
				НовСтр.СтруктурнаяЕдиница = Стр.Магазин;
				НовСтр.МестоВыкладки = Стр.МестоВыкладки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//остальное
	Для Каждого Стр Из ТаблицаДатчики Цикл
		
		Если Стр.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		//ищем только по непривязанным ОС
		СтруктураПоиска.Вставить("Местоположение", Стр.Магазин);
		СтруктураПоиска.Вставить("Датчик", Справочники.Датчики.ПустаяСсылка());
		
		НайдСтроки = ТАблицаОС.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтроки.Количество() = 0 Тогда
			НайдСтроки = ТзВирт.НайтиСтроки(Новый Структура("Обработан", Ложь));
			
			Если НайдСтроки.Количество() = 0 Тогда
				
				Если Не ВыданоСообщениеОТомЧтоЗакончилосьОборудование Тогда
					Сообщить("Кончилось оборудование на виртуальном складе!");
					ВыданоСообщениеОТомЧтоЗакончилосьОборудование = Истина;
				КонецЕсли;
				
				НовСтр = ТаблицаПривязки.Добавить();
				НовСтр.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
				НОвСтр.Датчик = Стр.Датчик;
				НовСтр.СтруктурнаяЕдиница = Стр.Магазин;
				НовСтр.МестоВыкладки = Стр.МестоВыкладки;
				
				Продолжить;
			Иначе
				НСтрока = НайдСтроки[0];
				НовСтр = ДобавитьСтрокуПеремещения(НСтрока.ОсновноеСредство);				
				НовСтр.СтруктурнаяЕдиницаОтправитель = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников", Истина);
				НовСтр.СтруктурнаяЕдиницаПолучатель = Стр.Магазин;
			КонецЕсли;
		КонецЕсли;		
		
		НСтрока = НайдСтроки[0];
		
		НовСтр = ТаблицаПривязки.Добавить();
		НовСтр.ОсновноеСредство = НСтрока.ОсновноеСредство;
		НОвСтр.Датчик = Стр.Датчик;
		НовСтр.СтруктурнаяЕдиница = Стр.Магазин;
		НовСтр.МестоВыкладки = Стр.МестоВыкладки;
		
		НСтрока.Обработан = Истина;
		
		Стр.Обработан = Истина;
		
	КонецЦикла;
	
	//для раскраски
	Для Каждого Эл Из МассивДатчиковСдвоенныВклВПривязку Цикл
		НайдСтр = ТаблицаПривязки.НайтиСтроки(Новый Структура("Датчик", Эл));
		
		Для Каждого НСтр Из НайдСтр Цикл
			НСтр.ДатчикСменилМестоположение = Истина;
		КонецЦикла;
	КонецЦикла;
	
	//двойники отдельно	
	ТаблицаСдвоенныхДатчиков.Свернуть("ОсновноеСредство", "Состояние");
	
	Для Каждого Стр Из ТаблицаСдвоенныхДатчиков Цикл
		//Сообщить(Строка(Стр.ОсновноеСредство) + ", состояние: " + Строка(Стр.Состояние));
		Если Стр.Состояние = 0 Тогда	
			НовСтр = ДобавитьСтрокуПеремещения(Стр.ОсновноеСредство);
			
			НайдСтр = ТаблицаОС.Найти(Стр.ОсновноеСредство, "ОсновноеСредство");
			
			НовСтр.СтруктурнаяЕдиницаОтправитель = НайдСтр.Местоположение;
			НовСтр.СтруктурнаяЕдиницаПолучатель = СкладХолодильников;
		КонецЕсли;
	КонецЦИкла;
	 	
	ПроставитьОрганизациюВТаблицеПривязки(ТаблицаПривязки);
		
	Возврат ТаблицаОСДатчик;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ПолучитьТаблицуНаименованийОСФорма()
	
	Об = РеквизитФормыВЗначение("Объект");
	ТаблицаИменОС = Об.ПолучитьТаблицуНаименованийОС();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	Возврат ТаблицаИменОС;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ПолучитьТаблицуИсключаемыхНаименований()
	
	Об = РеквизитФормыВЗначение("Объект");
	ТаблицаИменОС = Об.ПолучитьТаблицуИсключаемыхНаименований();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	Возврат ТаблицаИменОС;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаКлиенте
Процедура ЗаполнитьПеремещениеВиртСклад(Команда)
	
	Если Объект.Номенклатура.Количество() Тогда
		Ответ = Вопрос("Табличная часть ""Перемещение ОС"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Номенклатура.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Предупреждение("Не заполнена организация в шапке документа! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПеремещениеВиртСкладСервер();
		
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Процедура ЗаполнитьПеремещениеВиртСкладСервер()

	СкладХолодильников = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников", Истина);
	
	Если СкладХолодильников.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось подобрать склад ""Склад Холодильников"" для перемещения!");
		Возврат;
	КонецЕсли;
	
	ТаблицаНаименованийОС = ПолучитьТаблицуНаименованийОСФорма();
	
	СписокНаименований = Новый Массив;
	
	Для Каждого Стр Из ТаблицаНаименованийОС Цикл
		СписокНаименований.Добавить(Стр.ОС);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНаименований", СписокНаименований);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваВОрганизации);
	СписокСчетов.Добавить(ПланыСчетов.Финансовый.ОсновныеСредстваДо100000);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Дата", Объект.Дата); 
	Запрос.УстановитьПараметр("СкладОборудование", Справочники.Склады.НайтиПоНаименованию("Склад_Оборудование", Истина));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка
	               |ПОМЕСТИТЬ Комплекты
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.Наименование В(&СписокНаименований)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Комплекты.Ссылка КАК ОсновноеСредство,
	               |	СостояниеОССрезПоследних.Местоположение
	               |ИЗ
	               |	Комплекты КАК Комплекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Остатки(
	               |				&Дата,
	               |				Счет В (&СписокСчетов),
	               |				,
	               |				Субконто1 В
	               |						(ВЫБРАТЬ
	               |							комплекты.Ссылка
	               |						ИЗ
	               |							комплекты)
	               |					И Организация = &Организация) КАК ФинансовыйОстатки
	               |		ПО Комплекты.Ссылка = ФинансовыйОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
	               |				&Дата,
	               |				ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						Комплекты.Ссылка
	               |					ИЗ
	               |						Комплекты)) КАК СостояниеОССрезПоследних
	               |		ПО Комплекты.Ссылка = СостояниеОССрезПоследних.ОсновноеСредство
	               |ГДЕ
	               |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0) <> 0
	               |	И НЕ СостояниеОССрезПоследних.Местоположение ЕСТЬ NULL
	               |	И НЕ СостояниеОССрезПоследних.Списано
	               |	И СостояниеОССрезПоследних.Местоположение <> &СкладОборудование";	
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого Стр Из ТаблицаОС Цикл
		Если ТипЗнч(Стр.Местоположение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") И ЗначениеЗаполнено(Стр.Местоположение.ДатаЗакрытия) Тогда
			НовСтр = ДобавитьСтрокуПеремещения(Стр.ОсновноеСредство);
			НовСтр.СтруктурнаяЕдиницаОтправитель = Стр.Местоположение;
			НовСтр.СтруктурнаяЕдиницаПолучатель = Справочники.Склады.НайтиПоНаименованию("Склад Холодильников", Истина);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ДобавитьСтрокуПеремещения(ОС)
	
	//могут быть дубли, т.к. бывают 2 датчика на одном ОСе.
	НайдСтр = Объект.Номенклатура.НайтиСтроки(Новый Структура("ОсновноеСредство", ОС));
	
	Если НайдСтр.Количество() = 0 Тогда	
		НовСтр = Объект.Номенклатура.Добавить();
		НовСтр.ОсновноеСредство = ОС;
	Иначе
		НовСтр = НайдСтр[0];
	КонецЕсли;
	
	Возврат НовСтр;	

КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162 
&НаСервере
Функция ПолучитьТаблицуСдвоенныхДатчиков(ТаблицаОС)
	
	СтруктураПоиска = Новый Структура;
	
	ТаблицаДвойники = Новый ТаблицаЗначений;
	ТаблицаДвойники.Колонки.Добавить("ОсновноеСредство");
	ТаблицаДвойники.Колонки.Добавить("Датчик");
	ТаблицаДвойники.Колонки.Добавить("Состояние");
	ТаблицаДвойники.Колонки.Добавить("СостояниеСмениласьТочка");
	
	Для Каждого Стр Из ТаблицаОС Цикл
		СтруктураПоиска.Вставить("ОсновноеСредство", Стр.ОсновноеСредство);
		НайдСтроки = ТаблицаОС.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НСтр Из НайдСтроки Цикл
			Если НСтр <> Стр Тогда
				НовСтр = ТаблицаДвойники.Добавить();
				НовСтр.ОсновноеСредство = Стр.ОсновноеСредство;
				НовСтр.Датчик = Стр.Датчик;
				НовСтр.Состояние = 1;
				НовСтр.СостояниеСмениласьТочка = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДвойники;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162
&НаСервере
Процедура ПеречитатьДанныеДатчиков()
    Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
                          |	СоответствиеДатчиковИОсновныхСредствСрезПоследних.Датчик,
                          |	СоответствиеДатчиковИОсновныхСредствСрезПоследних.ОсновноеСредство
                          |ИЗ
                          |	РегистрСведений.СоответствиеДатчиковИОсновныхСредств.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК СоответствиеДатчиковИОсновныхСредствСрезПоследних");
    Запрос.УстановитьПараметр("СписокОС",Объект.Номенклатура.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
    Выборка = Запрос.Выполнить().Выбрать();
	
    Для Каждого Стр Из Объект.Номенклатура Цикл
        Если Выборка.НайтиСледующий(Стр.ОсновноеСредство,"ОсновноеСредство") Тогда
            Стр.Датчик = Выборка.Датчик;        
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.21 ИП-00017162
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПеречитатьДанныеДатчиков();
	
	//+++АК LAGP 2018.02.01 ИП-00017756 Отправка письма о создании документа операторам склада получателя (магазины не интересуют).
	Если НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref") = "IzbenkaFin" Тогда
		Если ЗначениеЗаполнено(Объект.СкладПолучатель) И ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.Склады") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
			ОтправитьПисьмоПоПочте(Объект.СкладОтправитель, Объект.СкладПолучатель, "");
		ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТЗПолучателей = ПолучитьТЗПолучателей();
			Для каждого СтрокаТЗ Из ТЗПолучателей Цикл			
				Если ТипЗнч(СтрокаТЗ.СтруктурнаяЕдиницаПолучатель) = Тип("СправочникСсылка.Склады") Тогда
					ОтправитьПисьмоПоПочте(СтрокаТЗ.СтруктурнаяЕдиницаОтправитель, СтрокаТЗ.СтруктурнаяЕдиницаПолучатель, СтрокаТЗ.ОсновноеСредство);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

//+++АК LAGP 2018.02.27 ИП-00017756 Отправка письма о создании документа операторам склада получателя (магазины не интересуют).
&НаСервере
Функция ПолучитьТЗПолучателей()
	
	ТЗПолучателей = Объект.Номенклатура.Выгрузить();
	ТЗПолучателей.Свернуть("СтруктурнаяЕдиницаОтправитель, СтруктурнаяЕдиницаПолучатель, ОсновноеСредство");  //свёртка, чтобы одному и тому же не пришло письмо несколько раз.
	
	Возврат ТЗПолучателей;
	
КонецФункции	

//+++АК LAGP 2018.02.01 ИП-00017756 Отправка письма о создании документа операторам склада получателя (магазины не интересуют).
&НаСервере
Процедура ОтправитьПисьмоПоПочте(СкладОтправитель, СкладПолучатель, ОсновноеСредство)  	
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНовогоПисьма = Новый Структура;
	ЗапросПользователейСклада = Новый Запрос;
	ЗапросПользователейСклада.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыПользователейДоступностьСкладов.Ссылка
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	Справочник.ГруппыПользователей.ДоступностьСкладов КАК ГруппыПользователейДоступностьСкладов
	|ГДЕ
	|	ГруппыПользователейДоступностьСкладов.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыПользователейПользователиГруппы.Пользователь
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	|		ПО втГруппы.Ссылка = ГруппыПользователейПользователиГруппы.Ссылка";
	
	ЗапросПользователейСклада.УстановитьПараметр("Склад", СкладПолучатель);
	
	РезультатЗапросаПользователейСклада = ЗапросПользователейСклада.Выполнить();
	
	ВыборкаДетальныеЗаписиПользователейСклада = РезультатЗапросаПользователейСклада.Выбрать();
	
	МассивФизЛиц = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписиПользователейСклада.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаДетальныеЗаписиПользователейСклада.Пользователь.ИдентификаторПользователяИБ);
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ОператорСклада) И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ОператорСкладаДоступКоВсемСкладам) Тогда
			ВыбранноеФизЛицо = ВыборкаДетальныеЗаписиПользователейСклада.Пользователь.ФизЛицо;
			Если ЗначениеЗаполнено(ВыбранноеФизЛицо) Тогда
				МассивФизЛиц.Добавить(ВыбранноеФизЛицо);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Кому = Новый Массив;
	
	ЗапросАдресовЭП = Новый Запрос;
	ЗапросАдресовЭП.УстановитьПараметр("Объект", МассивФизЛиц);
	ЗапросАдресовЭП.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Объект)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	ВыборкаДетальныеЗаписиЭП = ЗапросАдресовЭП.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписиЭП.Следующий() Цикл
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписиЭП.Представление)) Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписиЭП.Представление);
		КонецЕсли; 
	КонецЦикла;
	
	//Кому.Добавить("abdr@automacon.ru");  //+++АК LAGP 2018.03.03 ИП-00017756 говорят не приходят письма, хотим убедиться 
	Кому.Добавить("lagp@automacon.ru");
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
			
	СтрокаПредставления = "" + Объект.Ссылка + ". Со склада: " + СкладОтправитель + ", на склад: " + СкладПолучатель;
	СтруктураНовогоПисьма.Вставить("Тема",	СтрокаПредставления);
	СтруктураНовогоПисьма.Вставить("Тело", "Внимание, проведено " + СтрокаПредставления + Символы.ПС + "Автор: " + Объект.Ответственный + Символы.ПС + ?(ЗначениеЗаполнено(ОсновноеСредство), "ОсновноеСредство: " + ОсновноеСредство, "") + Символы.ПС + "Документ провел: " + ПараметрыСеанса.ТекущийПользователь.Наименование);
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	СпАдресов = Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп, ";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = ТабДок;	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
 	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.11.23 ИП-00017162.03
&НаСервереБезКонтекста
Процедура ПроставитьОрганизациюВТаблицеПривязки(ТаблицаПривязки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |		ПО СтруктурныеЕдиницы.Ссылка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Стр Из ТаблицаПривязки Цикл
		Если Выборка.НайтиСледующий(Новый Структура("Ссылка", Стр.СтруктурнаяЕдиница)) Тогда
			Стр.Организация = Выборка.Организация;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.12.27 ИП-00017584
&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочникаПоКоду(ТипСправочника, Код)
	
	Возврат Справочники[ТипСправочника].НайтиПоКоду(Код);
	
КонецФункции
 
//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаКлиенте
Процедура ВыгрузитьВБП(Команда)
	
	Если НЕ ПроверкаПередВыгрузкойСервер(Параметры.Ключ.Пустая(), ЭтаФорма.Модифицированность, , Объект.НеВыгружатьВБУ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВБПСервер();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530
&НаСервере
Процедура ВыгрузитьВБПСервер()
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("ПеремещениеОС", "ПеремещениеОС", Объект.Ссылка); 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаСервере
Функция ПроверкаПередВыгрузкойСервер(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ)
	
	Возврат ОбменСБП2_0.ПроверкаПередВыгрузкой(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ);
	
КонецФункции

//+++АК SaMi 2018.10.10 ИП-00019767^01
&НаСервере
Функция ПолучитьОСДляПеремещенияНаВиртуальныйСклад()
	
	ДатаПросмотра = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	
	ИдентификаторыАктивныхДатчиков = Документы.ПеремещениеОС.ПолучитьИдентификаторыАктивныхДатчиков(ДатаПросмотра);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СоответствиеДатчиковИХолодильниковСрезПоследних.ОсновноеСредство
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеДатчиковИХолодильников.СрезПоследних(&Дата, ) КАК СоответствиеДатчиковИХолодильниковСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(&Дата, ) КАК СостояниеОССрезПоследних
	                      |		ПО СоответствиеДатчиковИХолодильниковСрезПоследних.ОсновноеСредство = СостояниеОССрезПоследних.ОсновноеСредство
	                      |ГДЕ
	                      |	НЕ СоответствиеДатчиковИХолодильниковСрезПоследних.Датчик.ИД В (&ИдентификаторыАктивныхДатчиков)
	                      |	И ЕСТЬNULL(СостояниеОССрезПоследних.Местоположение, НЕОПРЕДЕЛЕНО) <> &СкладХолодильников");
	
	Запрос.УстановитьПараметр("ИдентификаторыАктивныхДатчиков", ИдентификаторыАктивныхДатчиков);
	Запрос.УстановитьПараметр("СкладХолодильников", СкладХолодильников);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Результат = Новый СписокЗначений;
	
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	
	Возврат Результат;
	
КонецФункции 
//---АК SaMi  2018.10.10 

//+++АК SaMi 2018.10.10 ИП-00019767^01
&НаКлиенте
Процедура ПодборВиртуальныйСклад(Команда)
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьОСДляПеремещенияНаВиртуальныйСклад());
		ПараметрыФормы.Вставить("НаВиртуальныйСклад", Истина);
		ПараметрыФормы.Вставить("ДатаОстатков", Объект.Дата);
	
		Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элементы.Номенклатура);
		
		Форма.Заголовок						= "Основные средства. Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		Форма.Открыть();

КонецПроцедуры
//---АК SaMi  2018.10.10 

