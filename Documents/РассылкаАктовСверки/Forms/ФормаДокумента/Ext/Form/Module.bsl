Перем Бухгалтерия;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.ОтветственныйБухгалтер = Объект.Ответственный;
		Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
		
		СчетаПоУмолчанию = Новый Массив();
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиОборудования);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками);
		
        Для каждого ТекЭлемент Из СчетаПоУмолчанию Цикл
		
			НоваяСтрока = Объект.СписокСчетов.Добавить();	
			
			НоваяСтрока.Счет = ТекЭлемент;
			НоваяСтрока.УчаствуетВРасчетах = Истина;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Или ЗначениеЗаполнено(ТекСтрока.АктВБухгалтерииНомер) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Заполнение таблицы не возможно так как имеются постоянные данные!";
			Сообщение.Сообщить();	
			
			Возврат
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	ОтправитьПисьмаНаСервере();
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	
	СоответствиеШаблонов = Новый Соответствие;
	МассивСообщений = Новый Массив;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	Для каждого ПодчиненнаяСтрока Из ДокОбъект.СписокРассылки Цикл
		
		Отказ = Ложь;
		
		Если Не	ПодчиненнаяСтрока.Пометка Или Не ПодчиненнаяСтрока.ЕстьОбороты Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
			МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
			
			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
			
			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ПочтаБухгалтера) Тогда
			
			МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнен учетная запись электронной почты!");	
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчиненнаяСтрока.Отправлено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
			
			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.АктВБухгалтерииНомер) Тогда
			
			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не создан акт в бухгалтерии!!!");	
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML = СоответствиеШаблонов.Получить(ПодчиненнаяСтрока.Организация);
		
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки.ОписаниеHTML;
			
			ЧтениеHTML = Новый ЧтениеHTML;
			ЧтениеHTML.УстановитьСтроку(ТекстHTML);
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
			
			Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
				
				ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ХранилищеДополнительнойИнформации.Ссылка,
				|	ХранилищеДополнительнойИнформации.ИмяФайла
				|ИЗ
				|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
				|ГДЕ
				|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
				
				Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
				
				Результат = Запрос.Выполнить();
				
				Если Результат.Пустой() Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
					Сообщение.Сообщить();
					
					Продолжить;
					
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				
				Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
				Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
				Если Файлы.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
				КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
				
				//ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
				//
				//ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
				//
				//ЗначениеКартинка.Записать(ИмяВременногоФайла);
				
				//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
				
				ТекстHTML = СтрЗаменить(ТекстHTML,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
				
			КонецЦикла;
			
			СоответствиеШаблонов.Вставить(ПодчиненнаяСтрока.Организация,ТекстHTML);
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ПодчиненнаяСтрока.Организация,ТекущаяДата());
		
		СтруктураПараметров.Вставить("КонтрагентПолноеНаименование",ПодчиненнаяСтрока.Контрагент.НаименованиеПолное);
		СтруктураПараметров.Вставить("ПериодОбработки","с "+Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		
		СтруктураПараметров.Вставить("Организация",ПодчиненнаяСтрока.Организация.НаименованиеСокращенное);
		СтруктураПараметров.Вставить("ГенеральныйДиректор",Руководители.Руководитель);
		
		СтруктураПараметров.Вставить("Комментарий","");
		//+++АК SHEP 2018.02.22 ИП-00017981
		//СтруктураПараметров.Вставить("АдресДоставки"," 123592, г. Москва, ул.Кулакова, д. 20, строение 1Л ");
		СтруктураПараметров.Вставить("АдресДоставки"," почтой или курьером по адресу: 123592, г. Москва, ул.Кулакова, д. 20, строение 1Л ");
		//---АК SHEP 2018.02.22
		
		
		Для каждого ТекПараметр Из СтруктураПараметров Цикл
			
			ТекстHTML = СтрЗаменить(ТекстHTML,"%"+ТекПараметр.Ключ,ТекПараметр.Значение);
			
		КонецЦикла;
		
		СтруктураПараметровМногострочные = Новый Структура;  		
		
		ДанныеФизЛицаМенеджера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя.ФизЛицо);
		ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя.ФизЛицо);
		
		ФамилияИмяМенеджера = ДанныеФизЛицаМенеджера[0] + " "+ДанныеФизЛицаМенеджера[1];
		ФамилияИмяБухгалтера = ДанныеФизЛицаБухгалтера[0] + " "+ДанныеФизЛицаБухгалтера[1];
		
		Телефоны =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
		,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера);
		Телефоны1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
		,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера);
		
		ФИОEMAIL =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
		,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера,Истина);
		ФИОEMAIL1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
		,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера,Истина);
		
		СтруктураПараметровМногострочные.Вставить("Телефоны",СокрЛП(Телефоны) + " " + ПодчиненнаяСтрока.ПочтаМенеджера);
		СтруктураПараметровМногострочные.Вставить("Телефоны1",СокрЛП(Телефоны1) + " " + ПодчиненнаяСтрока.ПочтаБухгалтера);
		
		СтруктураПараметровМногострочные.Вставить("ФИОEmail",ФИОEMAIL);
		СтруктураПараметровМногострочные.Вставить("ФИОEmail1",ФИОEMAIL1);
		
		Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
			
			ЖирныйШрифтНач = "";
			ЖирныйШрифтКонец = "";
			Если Не Найти(ТекстHTML,"<P>%"+ТекПараметр.Ключ+"</P>") Тогда
				ЖирныйШрифтНач = "<STRONG>";
				ЖирныйШрифтКонец = "</STRONG>";  					
			КонецЕсли;
			
			ТекстHTML = СтрЗаменить(ТекстHTML,"<P>"+ЖирныйШрифтНач+"%"+ТекПараметр.Ключ+ЖирныйШрифтКонец+"</P>",ТекПараметр.Значение);
			
		КонецЦикла;
		
		ТаблицаОбъектовКому = СтрЗаменить(ПодчиненнаяСтрока.Почта, ";",Символы.ПС);
		
		МаксимальноеЗначение = СтрЧислоСтрок(ТаблицаОбъектовКому);
		
		ЗаписатьАктСверкиВХранилище(ПодчиненнаяСтрока);
		
		ВложенныйАкт =  ПодчиненнаяСтрока.АктСверкиПДФ.Получить();		
		
		ВремФайл=КаталогВременныхФайлов()+"АктСверки.pdf";
		
		ВложенныйАкт.Записать(ВремФайл);
		
		Для сч=1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
			АдресПолучателя=СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому,сч));
			Попытка
				Послать(АдресПолучателя,ТекстHTML,ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки.Тема,ФамилияИмяБухгалтера,ВремФайл);
				ПодчиненнаяСтрока.Отправлено = ТекущаяДата();
			Исключение
				Сообщить(АдресПолучателя);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;    
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект,"Объект");
	
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры // ОтправитьПисьмаНаСервере()

&НаСервере
Функция СформироватьПредставленияКонтакта(Контакт,ОсновнойБухгалтерПокупателя,ОсновнойМенеджерПокупателя,Должность,ФамилияИмяМенеджера,Жирным = Ложь)
	ЖирныйШрифтНач = "";
	ЖирныйШрифтКонец = "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач = "<STRONG>";
		ЖирныйШрифтКонец = "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
	И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя Или Должность = "Бухгалтер")
	,"<P>"+ЖирныйШрифтНач+Должность+" " +ФамилияИмяМенеджера + " "+Контакт+ЖирныйШрифтКонец+"</P>",""); 
	
КонецФункции // СформироватьПредставленияКонтакта()

&НаСервере
Процедура ЗаполнитьНаСервере(Номер = Неопределено,ПоСтроке = Ложь)
	
	Если Номер <> Неопределено Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
		ТекущиеДанные = ДокументОбъект.СписокРассылки.Получить(Номер-1);
	
	КонецЕсли;
	
	Если Объект.СписокРассылки.Количество() И ПоСтроке = Ложь Тогда
		
		Объект.СписокРассылки.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	
	Если Не ПоСтроке Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
		               |	ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
		               |	ЛОЖЬ КАК Пометка,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		               |	ФинансовыйОстаткиИОбороты.Субконто1.ШаблонЗапросаАктаСверки КАК ШаблонЗапросаАктаСверки,
		               |	ФинансовыйОстаткиИОбороты.Субконто3 КАК ТорговаяТочка
		               |ПОМЕСТИТЬ Данные
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
		               |			&ДатаНачала,
		               |			&ДатаОкончания,
		               |			,
		               |			,
		               |			Счет В (&МассивСчетов),
		               |			,
		               |			Субконто2 ССЫЛКА Справочник.Контрагенты
		               |				И Субконто2.НеОтправлятьУведомления = ЛОЖЬ
		               |				И Субконто1 ССЫЛКА Справочник.Организации      
		               |				И Субконто1 = &Субконто1
					   //АК БЕЛН 27.03.2016+
		               |				И (Субконто2.СтатьяДвиженияДенежныхСредств = &СтатьяДДС ИЛИ  &СтатьяДДС=Значение(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
					   //АК БЕЛН 27.03.2016-
		               |				И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя) КАК ФинансовыйОстаткиИОбороты
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОсновнойБухгалтерПокупателя,
		               |	ОсновнойМенеджерПокупателя
					   |;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ЛОЖЬ КАК Пометка,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Организации.Ссылка КАК Организация,
		|	Организации.ШаблонЗапросаАктаСверки,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		|   NULL как ТорговаяТочка
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|	И Организации.Ссылка = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя;";
		
		Запрос.УстановитьПараметр("Организация",?(ТекущиеДанные.Организация.Пустая(),Объект.Организация,ТекущиеДанные.Организация));
		Запрос.УстановитьПараметр("Контрагент",ТекущиеДанные.Контрагент);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	Данные.Организация,
	                              |	Данные.Контрагент КАК Контрагент,
	                              |	Данные.Пометка,
	                              |	Данные.ОсновнойБухгалтерПокупателя,
	                              |	Данные.ОсновнойМенеджерПокупателя,
	                              |	Данные.ШаблонЗапросаАктаСверки,
	                              |	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	                              |	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	                              |	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	                              |	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	                              |	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера,
	                              |	Данные.ТорговаяТочка КАК ТорговаяТочка,
	                              |	ДоговорыКонтрагентов.Ссылка КАК Договор
	                              |ИЗ
	                              |	Данные КАК Данные
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	                              |			И (ТелефонМенеджер.Тип = &ТипТелефон)
	                              |			И (ТелефонМенеджер.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	                              |			И (ТелефонБухгалтера.Тип = &ТипТелефон)
	                              |			И (ТелефонБухгалтера.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	                              |			И (НастройкиПользователей.Настройка = &Настройка)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	                              |			И (ПочтаМенеджера.Тип = &ТипПочта)
	                              |			И (ПочтаМенеджера.Вид = &ПочтаФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	                              |		ПО (ПочтаБухгалтера.Вид = &ПочтаФизЛица)
	                              |			И (ПочтаБухгалтера.Тип = &ТипПочта)
	                              |			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                              |		ПО Данные.Контрагент = ДоговорыКонтрагентов.Владелец
	                              |			И Данные.Организация = ДоговорыКонтрагентов.Организация
	                              |			И (Данные.ТорговаяТочка = ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница
	                              |				ИЛИ Данные.ТорговаяТочка = ДоговорыКонтрагентов.СтруктурнаяЕдиница)
	                              |			И (ДоговорыКонтрагентов.СрокДействия >= &ДатаНачала
	                              |				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))";
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто1 = &Субконто1","");
		
	Иначе
		
		Запрос.УстановитьПараметр("Субконто1",Объект.Организация);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя","");
		
	Иначе
		
		Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя",Объект.ОтветственныйБухгалтер);
		
	КонецЕсли;
	
	СчетаПоУмолчанию = Новый Массив;	
	
	Для каждого ТекЭлемент Из Объект.СписокСчетов Цикл
		
		Если ТекЭлемент.УчаствуетВРасчетах Тогда
			
			СчетаПоУмолчанию.Добавить(ТекЭлемент.Счет);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПочтаФизЛица",Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТипПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТелефонФизЛица",Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("МассивСчетов",СчетаПоУмолчанию);
	Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись);
	//АК БЕЛН 27.03.2016+
	Запрос.УстановитьПараметр("СтатьяДДС",Объект.СтатьяДДС);
	//АК БЕЛН 27.03.2016-
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ТЗ_Результа =  Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление КАК Почта,
	//|	КонтактнаяИнформация.Объект КАК Контрагент
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект.Ссылка В(&Массив)
	//|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, КонтактнаяИнформация1.Представление) КАК Почта,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО КонтактнаяИнформация.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО КонтактнаяИнформация1.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация1.Вид = &Вид)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Массив)";

	
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Запрос.УстановитьПараметр("Массив", Результат.ВыгрузитьКолонку("Контрагент"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Для каждого ТекСтрока Из Результат Цикл
		
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент",ТекСтрока.Контрагент)) Тогда
			
			ТекСтрока.Почта = ВыборкаДетальныеЗаписи.Почта;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Если Не ПоСтроке Тогда
		
			НоваяСтрока = Объект.СписокРассылки.Добавить();
		
		Иначе
		
			НоваяСтрока = ТекущиеДанные;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		
	КонецЦикла;
	
	Если ПоСтроке Тогда
		
		ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекСтрока.Пометка = ТекСтрока.Пометка;	
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьСнятьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьСнятьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(Пометка)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		ТекСтрока.Пометка = Пометка;
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьСнятьПометки()

&НаКлиенте
Процедура ПроверитьНаНаличиеОшибок(Команда)
	
	//МассивСообщений = Новый Массив;
	//
	//Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
	//	
	//	Для каждого ПодчиненнаяСтрока Из ТекСтрока.ПолучитьЭлементы()  Цикл
	//		Если Не	ПодчиненнаяСтрока.Пометка Тогда
	//			Продолжить;	
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапросаАктаСверки) Тогда
	//			
	//			МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
	//			
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
	//			
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
	//			
	//		КонецЕсли;
	//		
	//		
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.УчетнаяЗаписьЭлектроннойПочты) Тогда
	//			
	//			МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнена учетная запись электронной почты!");	
	//			
	//		КонецЕсли;
	//		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
	//			
	//			МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;	
	//
	//МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	//
	//Для каждого ТекСтрока Из МассивСообщений Цикл
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = ТекСтрока;
	//	Сообщение.Сообщить();
	//	
	//КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура Послать(АдресПолучателя,ТекстПисьма,УЗ,Тема,Пользователь,АдресФайла)
	
	//+++АК SHEP 2018.02.15 ИП-00017889
	УправлениеЭлектроннойПочтой.ПослатьОтРассылкиСОбратнымАдресом(АдресПолучателя, ТекстПисьма, УЗ, Тема, Пользователь,, АдресФайла);
	Возврат;
	//---АК SHEP 2018.02.15
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP="10.0.0.30";
	ИПП.Пользователь=Пользователь;
	ИПП.ПортSMTP=25;
	//
	//Если УЗ.ТребуетсяSMTPАутентификация Тогда
	//	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
	//	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	//Иначе
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	//КонецЕсли;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ;
	Письмо.ИмяОтправителя = Пользователь; //+++АК SHEP 2018.02.06 ИП-00017780
	Письмо.Получатели.Добавить(АдресПолучателя);
	
	//Для Каждого ТекАдр Из Вложения Цикл
		Письмо.Вложения.Добавить(АдресФайла);
	//КонецЦикла;
	
	Письмо.Тема=Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	
	Почта=Новый ИнтернетПочта;
	
	Почта.Подключиться(ИПП);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктыВБухгалтерии(Команда)

	СоздатьАктыВБухгалтерииНаСервере();	
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыВБухгалтерииНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Для каждого ТекСтрока Из ДокОбъект.СписокРассылки Цикл
		
		Если Не ТекСтрока.Пометка Или ЗначениеЗаполнено(ТекСтрока.АктВБухгалтерииНомер) Или ЗначениеЗаполнено(ТекСтрока.Отправлено)   Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Если бухгалтерия = Неопределено Тогда
		
			бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
		
		КонецЕсли;
		
		ДокументСверки = бухгалтерия.Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		
		ДокументСверки.Дата = КонецДня(ДокОбъект.Дата);
		
		ДокументСверки.ВалютаДокумента = бухгалтерия.Константы.ВалютаРегламентированногоУчета.Получить();
		
		бухгалтерияОрганизация = бухгалтерия.Справочники.Организации.НайтиПоРеквизиту("ИНН",ТекСтрока.Организация.ИНН);
		
		Если бухгалтерияОрганизация.Пустая() Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось найти организацию в бухгалтерие по "+ТекСтрока.Организация.ИНН;
			Сообщение.Сообщить();
		    Продолжить;
		КонецЕсли;
		
		ДокументСверки.Организация = бухгалтерияОрганизация;
		
		бухгалтерияКонтрагент = бухгалтерия.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ТекСтрока.Контрагент.ИНН);

		Если бухгалтерияКонтрагент.Пустая() Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось найти Контрагента в бухгалтерие по "+ТекСтрока.Контрагент.ИНН;
			Сообщение.Сообщить();
		    Продолжить;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаНачала) Тогда
		
			ТекСтрока.ДатаНачала = ДокОбъект.ДатаНачала;	
		
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда
		
			ТекСтрока.ДатаОкончания = ДокОбъект.ДатаОкончания;	
		
		КонецЕсли;
		ДокументСверки.Контрагент = бухгалтерияКонтрагент;
		Если ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
			бухгалтерияДоговор = бухгалтерия.Справочники.ДоговорыКонтрагентов.НайтиПоКоду(ТекСтрока.Договор.Код,,,бухгалтерияКонтрагент);
			Если бухгалтерияДоговор.Пустая() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось найти договор контрагента в бухгалтерие по коду"+ТекСтрока.Договор.Код;
				Сообщение.Сообщить();
			Иначе	
				ДокументСверки.ДоговорКонтрагента=бухгалтерияДоговор;
			КонецЕсли;	
		КонецЕсли;	
		ДокументСверки.ДатаНачала = ТекСтрока.ДатаНачала;
		ДокументСверки.ДатаОкончания = ТекСтрока.ДатаОкончания;
		ДокументСверки.Комментарий = "Сформирован в финансах документом рассылки актов сверки";
		
		СчетаПоУмолчанию = бухгалтерия.NewObject("Массив");
		СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
		СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
		СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
		СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
		СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
		
		Для Счетчик =1  По СчетаПоУмолчанию.Количество() Цикл
			СтрокаСчета = ДокументСверки.СписокСчетов.Добавить();
			СтрокаСчета.УчаствуетВРасчетах = Истина;
		КонецЦикла; 
		
		ДокументСверки.СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
		
		ДокументСверки.ЗаполнитьПоДаннымБухгалтерскогоУчета();
		//ДокументСверки.ЗаполнитьПоДаннымОрганизации();
		
		Попытка
		
			ДокументСверки.Записать();
		
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
			Продолжить;
		
		КонецПопытки;
		
		ТекСтрока.АктВБухгалтерииНомер = ДокументСверки.Номер;
		
		ТекСтрока.АктВБухгалтерииДата = ДокументСверки.Дата;
		
		ТекСтрока.АктУИД = Бухгалтерия.String(ДокументСверки.Ссылка.УникальныйИдентификатор());
		
		ТекСтрока.ЕстьОбороты = ДокументСверки.ПоДаннымОрганизации.Количество() Или ДокументСверки.ОстатокНаНачало;
		
		//ТабДок = Новый ТабличныйДокумент;
		
		ТабДок = Бухгалтерия.АК_ДопМодуль.ПечатьАктСверки(ДокументСверки);
		
		ВремФайл=ПолучитьИмяВременногоФайла("pdf");
		
		ТабДок.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.PDF);
		
		ТекСтрока.АктСверкиПДФ = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
		
		//Модифицированность = Истина;
		
	КонецЦикла;	
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // СоздатьАктыВБухгалтерии()

&НаКлиенте
Процедура СписокРассылкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСогласованныеАкты(Команда)
	
	Если Вопрос("Даты сверки актов будут замещены на даты с учетом сверенных актов! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	
		Возврат
	
	КонецЕсли;
	
	ПроверитьСогласованныеАктыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСогласованныеАктыНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(АктСверкиВзаиморасчетов.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(АктСверкиВзаиморасчетов.ДатаОкончания) КАК ДатаОкончания,
		|	АктСверкиВзаиморасчетов.Организация,
		|	АктСверкиВзаиморасчетов.Контрагент,
		|	ВложенныйЗапрос.Ссылка КАК ПоследнийАктСверки
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
		|			ВложенныйЗапрос.Организация КАК Организация,
		|			ВложенныйЗапрос.Контрагент КАК Контрагент,
		|			МАКСИМУМ(АктСверкиВзаиморасчетов.Ссылка) КАК Ссылка
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(АктСверкиВзаиморасчетов.ДатаОкончания) КАК ДатаОкончания,
		|				АктСверкиВзаиморасчетов.Организация КАК Организация,
		|				АктСверкиВзаиморасчетов.Контрагент КАК Контрагент
		|			ИЗ
		|				Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|			ГДЕ
		|				АктСверкиВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|				И АктСверкиВзаиморасчетов.СверкаСогласована
		|				И АктСверкиВзаиморасчетов.Организация В(&Организация)
		|				И АктСверкиВзаиморасчетов.Контрагент В(&Контрагент)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				АктСверкиВзаиморасчетов.Контрагент,
		|				АктСверкиВзаиморасчетов.Организация) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|				ПО ВложенныйЗапрос.ДатаОкончания = АктСверкиВзаиморасчетов.ДатаОкончания
		|					И ВложенныйЗапрос.Организация = АктСверкиВзаиморасчетов.Организация
		|					И ВложенныйЗапрос.Контрагент = АктСверкиВзаиморасчетов.Контрагент
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.ДатаОкончания,
		|			ВложенныйЗапрос.Контрагент,
		|			ВложенныйЗапрос.Организация) КАК ВложенныйЗапрос
		|		ПО АктСверкиВзаиморасчетов.Организация = ВложенныйЗапрос.Организация
		|			И АктСверкиВзаиморасчетов.Контрагент = ВложенныйЗапрос.Контрагент
		|ГДЕ
		|	АктСверкиВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|	И АктСверкиВзаиморасчетов.СверкаСогласована
		|	И АктСверкиВзаиморасчетов.Организация В(&Организация)
		|	И АктСверкиВзаиморасчетов.Контрагент В(&Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	АктСверкиВзаиморасчетов.Контрагент,
		|	АктСверкиВзаиморасчетов.Организация,
		|	ВложенныйЗапрос.Ссылка";

	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Объект.СписокРассылки.Выгрузить(,"Организация").ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("Контрагент",  Объект.СписокРассылки.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
		
			Продолжить;
		
		КонецЕсли;
	
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("Организация",ТекСтрока.Организация);
		СтруктураПоиска.Вставить("Контрагент",ТекСтрока.Контрагент);
		
		Если  ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
			
			ТекСтрока.ДатаНачала = Макс(КонецДня(ВыборкаДетальныеЗаписи.ДатаОкончания)+1,Период.ДатаНачала);
			ТекСтрока.ДатаОкончания = период.ДатаОкончания;
			ТекСтрока.ПоследнийАктСверки = ВыборкаДетальныеЗаписи.ПоследнийАктСверки;
			
			Если ТекСтрока.ДатаНачала > Период.ДатаОкончания Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Период уже сверен, установите период вручную!";
				Сообщение.Поле = "СписокРассылки["+Объект.СписокРассылки.Индекс(ТекСтрока)+"].Контрагент";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				ТекСтрока.ДатаНачала = Период.ДатаНачала;
				
			КонецЕсли;
			
			
		Иначе
			ТекСтрока.ДатаНачала = Период.ДатаНачала;
			ТекСтрока.ДатаОкончания = период.ДатаОкончания;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
	
	КонецЦикла;

КонецПроцедуры // ПроверитьСогласованныеАкты()

&НаКлиенте
Процедура СписокРассылкиПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено) Или ЗначениеЗаполнено(ТекСтрока.АктВБухгалтерииНомер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложенныйАктСверки(Команда)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		ВремФайл=КаталогВременныхФайлов()+"АктСверки.pdf";
		
		ВложенныйАкт = ОткрытьВложенныйАктСверкиНаСервере(ТекСтрока.НомерСтроки);
		
		Если ЗначениеЗаполнено(ВложенныйАкт) Тогда
		    ВложенныйАкт.Записать(ВремФайл);
			
			ЗапуститьПриложение(ВремФайл);
		
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция  ОткрытьВложенныйАктСверкиНаСервере(НомерСтроки)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	ЗаписатьАктСверкиВХранилище(ДокОбъект.СписокРассылки[НомерСтроки-1]);
	
	Хранилище = ДокОбъект.СписокРассылки[НомерСтроки-1].АктСверкиПДФ.Получить();
	  
	//ВремФайл=КаталогВременныхФайлов()+"АктСверки.pdf";
	Если Не ЗначениеЗаполнено(Хранилище) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	//Хранилище.Записать(ВремФайл);
	
	Возврат Хранилище;
КонецФункции // ОткрытьВложенныйАктСверки()

&НаКлиенте
Процедура ОткрытьАктСверки(Команда)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.ПоследнийАктСверки) Тогда
		
		ОткрытьЗначение(ТекСтрока.ПоследнийАктСверки);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбОборотах(Команда)
 	ОбновитьИнформациюОбОборотахНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОборотахНаСервере()

	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.ЕстьОбороты) И ЗначениеЗаполнено(ТекСтрока.АктУИД) Тогда
		
			Если бухгалтерия = Неопределено Тогда
				
				бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
				
			КонецЕсли;
			
			УникальныйИдентификаторБух = Бухгалтерия.NewObject("УникальныйИдентификатор",ТекСтрока.АктУИД);
			
			ДокументСверки = Бухгалтерия.Документы.АктСверкиВзаиморасчетов.ПолучитьСсылку(УникальныйИдентификаторБух);
			
			ТекСтрока.ЕстьОбороты = ДокументСверки.ПоДаннымОрганизации.Количество();
		
		КонецЕсли;	
	
	КонецЦикла;	

КонецПроцедуры // ()

&НаСервере
Процедура ЗаписатьАктСверкиВХранилище(ТекСтрока)
	
	Если бухгалтерия = Неопределено Тогда
		
		бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
		
	КонецЕсли;
	
	УникальныйИдентификаторБух = Бухгалтерия.NewObject("УникальныйИдентификатор",ТекСтрока.АктУИД);
	
	ДокументСверки = Бухгалтерия.Документы.АктСверкиВзаиморасчетов.ПолучитьСсылку(УникальныйИдентификаторБух).ПолучитьОбъект();
	
	ТекСтрока.ЕстьОбороты = ДокументСверки.ПоДаннымОрганизации.Количество() Или ДокументСверки.ОстатокНаНачало;
	
	ТабДок = Бухгалтерия.АК_ДопМодуль.ПечатьАктСверки(ДокументСверки);
	
	ВремФайл=ПолучитьИмяВременногоФайла("pdf");
	
	ТабДок.Записать(ВремФайл,Бухгалтерия.ТипФайлаТабличногоДокумента.PDF);
	
	ТекСтрока.АктСверкиПДФ = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
    ФормаВыбора = ПолучитьФорму("Документ.АктСверкиВзаиморасчетов.ФормаВыбора",,Элемент);
	
	ФормаВыбора.Отбор.Контрагент.Значение = ТекСтрока.Контрагент;
	ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	
	ФормаВыбора.Отбор.Организация.Значение = ТекСтрока.Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.Отбор.СверкаСогласована.Значение = Истина;
	ФормаВыбора.Отбор.СверкаСогласована.Использование = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиКонтрагентПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиОрганизацияПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиПриИзменении(Элемент)
	
	
	СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере()
	
	ТекСтрока = объект.СписокРассылки.Получить(Элементы.СписокРассылки.ТекущаяСтрока);
	
	ТекСтрока.ДатаНачала = Макс(КонецДня(ТекСтрока.ПоследнийАктСверки.ДатаОкончания)+1,Период.ДатаНачала);
	ТекСтрока.ДатаОкончания = период.ДатаОкончания;
	
	Если ТекСтрока.ДатаНачала > Период.ДатаОкончания Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Период уже сверен, установите период вручную!";
		Сообщение.Поле = "СписокРассылки["+Объект.СписокРассылки.Индекс(ТекСтрока)+"].Контрагент";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		ТекСтрока.ДатаНачала = Период.ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры // ()








