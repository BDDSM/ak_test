
Процедура ОтправитьПисьма(СтруктураПисьма) Экспорт
	
	Если НЕ СтруктураПисьма.Свойство("Назначение") Тогда
		СтруктураПисьма.Вставить("Назначение","");
	КонецЕсли;
	
	Для каждого Строка Из СтруктураПисьма.Получатели Цикл
		
		МассивПолучатели = РазложитьСтрокуВМассивПодстрок(Строка.Представление,";");
		
		Почта   = Новый ИнтернетПочта;
		//+++АК SHEP 2018.02.09 ИП-00017663
		//Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(СтруктураПисьма.Отправитель);
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофильБезАутентификации(СокрЛП(СтруктураПисьма.Отправитель));
		//---АК SHEP 2018.02.09
		Письмо  = Новый ИнтернетПочтовоеСообщение;
		
		Почта.Подключиться(Профиль);
		
		Письмо.Тема = ЗаполнитьПараметрыШабона(СтруктураПисьма.Назначение, СтруктураПисьма.Тема, Строка);
		
		Письмо.ИмяОтправителя  = СокрЛП(СтруктураПисьма.Отправитель);
		Письмо.Отправитель     = СокрЛП(СтруктураПисьма.Отправитель);
		
		//Удаление дублей электронынх адресов
		СоответствиеАдресов = Новый Соответствие();
		
		Для Каждого ЭлементПолучатель Из МассивПолучатели Цикл
			Если ЗначениеЗаполнено(ЭлементПолучатель) Тогда
				СоответствиеАдресов.Вставить(СокрЛП(ЭлементПолучатель),СокрЛП(ЭлементПолучатель));
			КонецЕсли;	
		КонецЦикла;	
		
		//Добавление получателей
		СтрокаПолучателейТест = "";
		Для Каждого ЭлементПолучатель Из СоответствиеАдресов Цикл
			Если ЗначениеЗаполнено(ЭлементПолучатель.Ключ) Тогда
				Получатель = Письмо.Получатели.Добавить();
				Получатель.Адрес           = СокрЛП(ЭлементПолучатель.Ключ);
				Получатель.ОтображаемоеИмя = СокрЛП(ЭлементПолучатель.Значение);
				СтрокаПолучателейТест      = СтрокаПолучателейТест + Получатель.Адрес + "; ";
			КонецЕсли;	
		КонецЦикла;	
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		
		ТекстСообщения.Текст = ЗаполнитьПараметрыШабона(СтруктураПисьма.Назначение, СтруктураПисьма.Текст, Строка); 
		
		Если СтруктураПисьма.Свойство("ТипТекста") Тогда
			ТекстСообщения.ТипТекста = СтруктураПисьма.ТипТекста;
		Иначе
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		КонецЕсли;
		
		ДобавитьВложения(Письмо, Строка, СтруктураПисьма);
		
		Почта.Послать(Письмо);
		
		Почта.Отключиться();
		
		УдалитьВременныеФайлы(СтруктураПисьма);
	
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьПараметрыШабона(Назначение, Знач ТекстПисьма, Строка)
	
	Если Назначение = "ЗапросТехнологам" ИЛИ Назначение = "КонтрагентыБезСпецификации" Тогда
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "#Контрагент", СокрЛП(Строка.Контрагент));
	КонецЕсли;
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Стр = СокрЛП(Стр);
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

КонецФункции //

Процедура ДобавитьВложения(Письмо, Строка, СтруктураПисьма)
	
	Если СтруктураПисьма.Назначение = "КонтрагентыБезСпецификации" Тогда
		
		//+++АК SHEP 2018.05.03 ИП-00018453
		//ИмяФайла = СохранитьДанныеПолучитьПуть(СформироватьОтчетНаСервере(Строка.Контрагент, СтруктураПисьма.Дата));
		ИмяФайла = СохранитьДанныеПолучитьПуть(СформироватьОтчётНаСервере(СтруктураПисьма.Организация, Строка.Контрагент, СтруктураПисьма.Дата));
		//---АК SHEP 2018.05.03
		
		Если ИмяФайла <> Неопределено Тогда
			
			Письмо.Вложения.Добавить(ИмяФайла);
			
			Если СтруктураПисьма.Свойство("ИмяФайла") Тогда
				СтруктураПисьма.ИмяФайла = ИмяФайла;
			Иначе
				СтруктураПисьма.Вставить("ИмяФайла", ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьДанныеПолучитьПуть(ТабДок);
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".xls");
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	УстановитьЗащитуФайла(ИмяФайла);
		
	Возврат ИмяФайла;
		
КонецФункции

Процедура УстановитьЗащитуФайла(ИмяФайла)
	
	Попытка
		
		ExcelApp 	 = Новый COMОбъект("Excel.Application");
		РабочаяКнига = ExcelApp.WorkBooks;
		РабочаяКнига = РабочаяКнига.Open(ИмяФайла,0,0); 
		
		ExcelApp.DisplayAlerts = 0; 
		
		РабочийЛист = РабочаяКнига.Worksheets(1);
		
		Счетчик = 7;
		Пока Истина Цикл
			Если ПустаяСтрока(РабочийЛист.Range("F" + Формат(Счетчик, "ЧГ=0")).Text) Тогда
				Прервать;
			КонецЕсли;
			РабочийЛист.Range("M" + Формат(Счетчик, "ЧГ=0")).FormulaR1C1 = "=RC[-1]-RC[-2]";
			РабочийЛист.Range("L" + Формат(Счетчик, "ЧГ=0")).Locked = Ложь;
			Счетчик = Счетчик + 1;
		КонецЦикла;		
		
		РабочийЛист.Protect("112233", Истина, Истина, Истина);
		
		РабочаяКнига.Save();
		РабочаяКнига.Close();
		ExcelApp.Quit();
		
		ExcelApp 	 = Неопределено;
		РабочаяКнига = Неопределено; 
		РабочийЛист  = Неопределено;
		
	Исключение 
		
		РабочийЛист  = Неопределено;
		РабочаяКнига = Неопределено;
		ExcelApp     = Неопределено; 
		
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьВременныеФайлы(СтруктураПисьма)
	
	Если СтруктураПисьма.Свойство("ИмяФайла") И ЗначениеЗаполнено(СтруктураПисьма.ИмяФайла) Тогда
		Попытка
			УдалитьФайлы(СтруктураПисьма.ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Функция продублирована из формы документа(рефакторинг не проводился)
//
Функция СформироватьОтчетНаСервере(Контрагент, Дата)
	
	ТабДок = Новый ТабличныйДокумент();
	Макет = Документы.ЗапросОстатковУпаковкиУПоставщиков.ПолучитьМакет("ОтчетПоУпаковке");
	
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Дата = Формат(Дата, "ДФ=dd.MM.yyyy");
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Склады") Тогда
		Область.Параметры.Ид = Строка(Контрагент.УникальныйИдентификатор());
		Область.Параметры.Контрагент = Контрагент;
	Иначе
		Область.Параметры.Ид = Формат(Контрагент.ИД, "ЧГ=0");
		Область.Параметры.Контрагент = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,ФактическийАдрес");
	КонецЕсли;		
			
	ТабДок.Вывести(Область);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковДатой", КонецДня(Дата));
	Запрос.УстановитьПараметр("Владелец", Справочники.СтруктурныеЕдиницы.СторонняяПереработка);
	
	//+++АК mika Дата: 2017.07.28 ИП-00016344
	//Фортирование шапки по контрагенту, указанному в строке, при этом запрос по товарам "по холдингу". 
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) Тогда 
		Запрос.УстановитьПараметр("Контрагент", Контрагент.ГоловнойКонтрагент);
	Иначе
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	//---АК

	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, ВЗ_Спецификации.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков, ВЗ_Спецификации.Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдИзм,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.id_tov, ВЗ_Спецификации.Номенклатура.id_tov) КАК id_tov,
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Наименование, ВЗ_Спецификации.Номенклатура.Наименование) КАК Наименование,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Склад.Контрагент КАК Контрагент,
	               |	ТоварыНаСкладахОстатки.Склад.ИД КАК СкладИД
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВЗ_Запрос.НоменклатураСырье КАК Номенклатура
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			СпецификацииПоставщиков.Номенклатура КАК Номенклатура,
	               |			СпецификацииПоставщиков.НоменклатураСырье КАК НоменклатураСырье,
	               |			МАКСИМУМ(СпецификацииПоставщиков.Период) КАК Период
	               |		ИЗ
	               |			РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
	               |		ГДЕ
	               |			(СпецификацииПоставщиков.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
	               |					ИЛИ СпецификацииПоставщиков.ДатаКонца > &ДатаОстатковДатой)
	               |			И СпецификацииПоставщиков.Номенклатура.Выведена = ЛОЖЬ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СпецификацииПоставщиков.Номенклатура,
	               |			СпецификацииПоставщиков.НоменклатураСырье) КАК ВЗ_Запрос
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
	               |			ПО ВЗ_Запрос.Период = СпецификацииПоставщиков.Период
	               |				И ВЗ_Запрос.Номенклатура = СпецификацииПоставщиков.Номенклатура
	               |				И ВЗ_Запрос.НоменклатураСырье = СпецификацииПоставщиков.НоменклатураСырье
	               |	ГДЕ
	               |		(СпецификацииПоставщиков.Поставщик = &Контрагент
	               |				ИЛИ СпецификацииПоставщиков.Поставщик.ГоловнойКонтрагент = &Контрагент)
	               |		И ВЗ_Запрос.НоменклатураСырье <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ВЗ_Спецификации
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				&ДатаОстатков,
	               |				Склад.Владелец = &Владелец
	               |					И (Склад.Контрагент.ГоловнойКонтрагент = &Контрагент
	               |						ИЛИ Склад.Контрагент = &Контрагент
	               |						ИЛИ Склад = &Контрагент)
	               |					И Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)) КАК ТоварыНаСкладахОстатки
	               |		ПО ВЗ_Спецификации.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склады.Ссылка,
	               |	Склады.Контрагент КАК Контрагент,
	               |	Склады.ИД
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контрагент,
	               |	Склады.ПометкаУдаления";
				   
	Результаты = Запрос.ВыполнитьПакет();
				   
	Выборка = Результаты[0].Выбрать();
	ТабСклады = Результаты[1].Выгрузить();
	Пока Выборка.Следующий() Цикл
		СкладОтбор = Выборка.Склад;
		Область = Макет.ПолучитьОбласть("Строка");
		Если НЕ ЗначениеЗаполнено(Выборка.СкладИД) Тогда
			СтрокаСклад = ТабСклады.Найти(Контрагент, "Контрагент");
			Если СтрокаСклад <> Неопределено Тогда
				Область.Параметры.Контрагент = СтрокаСклад.Контрагент;
				Область.Параметры.id_sklad = Формат(СтрокаСклад.ИД, "ЧГ=0");
			КонецЕсли;	
		Иначе	
			Область.Параметры.Контрагент = Выборка.Контрагент;
			Область.Параметры.id_sklad = Формат(Выборка.СкладИД, "ЧГ=0");
		КонецЕсли;	
		Область.Параметры.Товар = Выборка.Наименование;
		Область.Параметры.ЕдИзм = Выборка.ЕдИзм;
		Область.Параметры.id = Формат(Выборка.id_tov, "ЧГ=0");
		ЗапросИнвент = Новый Запрос();
		ЗапросИнвент.Текст = "ВЫБРАТЬ
		                     |	ВЗ_МаксДата.Дата,
		                     |	ИнвентаризацияСкладТовары.Количество
		                     |ИЗ
		                     |	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
		                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                     |			МАКСИМУМ(ИнвентаризацияСкладТовары.Ссылка.Дата) КАК Дата
		                     |		ИЗ
		                     |			Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
		                     |		ГДЕ
		                     |			ИнвентаризацияСкладТовары.Номенклатура = &Номенклатура
		                     |			И ИнвентаризацияСкладТовары.Склад = &Склад
		                     |			И ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
		                     |			И ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам = ИСТИНА
		                     |			И ИнвентаризацияСкладТовары.Ссылка.Дата < &Дата) КАК ВЗ_МаксДата
		                     |		ПО ИнвентаризацияСкладТовары.Ссылка.Дата = ВЗ_МаксДата.Дата
		                     |ГДЕ
		                     |	ИнвентаризацияСкладТовары.Номенклатура = &Номенклатура
		                     |	И ИнвентаризацияСкладТовары.Склад = &Склад
		                     |	И ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
		                     |	И ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам = ИСТИНА";
							 
		ЗапросИнвент.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
		ЗапросИнвент.УстановитьПараметр("Склад", СкладОтбор);
		ЗапросИнвент.УстановитьПараметр("Дата", НачалоДня(Дата));
		ДатаПослИнвентарки = '00010101';
		КолвоПоИнвентаризации = 0;
		ВыборкаДата = ЗапросИнвент.Выполнить().Выбрать();
		Если ВыборкаДата.Следующий() Тогда
			ДатаПослИнвентарки = ВыборкаДата.Дата;
			КолвоПоИнвентаризации = Цел(ВыборкаДата.Количество);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПослИнвентарки) Тогда
			Область.Параметры.ДатаИнвент = Формат(ДатаПослИнвентарки, "ДФ=dd.MM.yyyy");
			Область.Параметры.ОстатокПоИнвент = КолвоПоИнвентаризации;
			
			ЗапросДвижения = Новый Запрос();
			ЗапросДвижения.Текст = "ВЫБРАТЬ
			                       |	ТоварыНаСкладахОбороты.Номенклатура,
			                       |	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК Приход,
			                       |	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК Расход
			                       |ИЗ
			                       |	РегистрНакопления.ТоварыНаСкладах.Обороты(
			                       |			&ДатаНач,
			                       |			&ДатаКон,
			                       |			Регистратор,
			                       |			Склад = &Склад
			                       |				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОбороты
			                       |ГДЕ
			                       |	НЕ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
			                       |
			                       |СГРУППИРОВАТЬ ПО
			                       |	ТоварыНаСкладахОбороты.Номенклатура";
								   
			ЗапросДвижения.УстановитьПараметр("ДатаНач", Новый Граница(ДатаПослИнвентарки + 1, ВидГраницы.Включая));
			ЗапросДвижения.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
			ЗапросДвижения.УстановитьПараметр("Склад", СкладОтбор);
			ЗапросДвижения.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
			Приход = 0;
			Расход = 0;
			ВыборкаДвижения = ЗапросДвижения.Выполнить().Выбрать();
			Если ВыборкаДвижения.Следующий() Тогда
				Приход = Цел(ВыборкаДвижения.Приход);
				Расход = Цел(ВыборкаДвижения.Расход);
			КонецЕсли;
			Область.Параметры.Перемещено = Приход;
			Область.Параметры.Списано = Расход;
			Область.Параметры.Остаток = КолвоПоИнвентаризации + Приход - Расход;
		Иначе
			Область.Параметры.Остаток = Цел(Выборка.Количество);
		КонецЕсли;	
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	
	Возврат ТабДок;
	
КонецФункции	

//+++АК LATV 2018.07.14 ИП-00019244
Функция СформироватьОтчётНаСервере(Организация, Контрагент, НаДату, ВозвращатьТЗн = Ложь) Экспорт

	ТабДок = Новый ТабличныйДокумент();
	Макет = Документы.ЗапросОстатковУпаковкиУПоставщиков.ПолучитьМакет("ОтчетПоУпаковке");
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, НаДату);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Дата = Формат(НаДату, "ДФ=dd.MM.yyyy");
	Область.Параметры.Организация = Организация;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Склады") Тогда
		Область.Параметры.Ид = Строка(Контрагент.УникальныйИдентификатор());
		Область.Параметры.Контрагент = Контрагент;
	Иначе
		Область.Параметры.Ид = Формат(Контрагент.ИД, "ЧГ=0");
		Область.Параметры.Контрагент = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,ФактическийАдрес");
	КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(НаДату), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковДатой", КонецДня(НаДату));
	Запрос.УстановитьПараметр("Владелец", ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//Фортирование шапки по контрагенту, указанному в строке, при этом запрос по товарам "по холдингу". 
	Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) Тогда 
		Запрос.УстановитьПараметр("Контрагент", Контрагент.ГоловнойКонтрагент);
	Иначе
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацииПоставщиков.Номенклатура КАК Номенклатура,
		|	СпецификацииПоставщиков.НоменклатураСырье КАК НоменклатураСырье,
		|	МАКСИМУМ(СпецификацииПоставщиков.Период) КАК Период
		|ПОМЕСТИТЬ втСпецификации
		|ИЗ
		|	РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
		|ГДЕ
		|	(СпецификацииПоставщиков.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СпецификацииПоставщиков.ДатаКонца > &ДатаОстатковДатой)
		|	И СпецификацииПоставщиков.Номенклатура.Выведена = ЛОЖЬ
		|	И СпецификацииПоставщиков.НоменклатураСырье.ТорговаяМарка.ОрганизацияЗакупки = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацииПоставщиков.Номенклатура,
		|	СпецификацииПоставщиков.НоменклатураСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втСпецификации.НоменклатураСырье КАК Номенклатура
		|ПОМЕСТИТЬ втСырье
		|ИЗ
		|	втСпецификации КАК втСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков КАК СпецификацииПоставщиков
		|		ПО втСпецификации.Период = СпецификацииПоставщиков.Период
		|			И втСпецификации.Номенклатура = СпецификацииПоставщиков.Номенклатура
		|			И втСпецификации.НоменклатураСырье = СпецификацииПоставщиков.НоменклатураСырье
		|ГДЕ
		|	(СпецификацииПоставщиков.Поставщик = &Контрагент
		|			ИЛИ СпецификацииПоставщиков.Поставщик.ГоловнойКонтрагент = &Контрагент)
		|	И втСпецификации.НоменклатураСырье <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура, втСырье.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков, втСырье.Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдИзм,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.id_tov, втСырье.Номенклатура.id_tov) КАК id_tov,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Наименование, втСырье.Номенклатура.Наименование) КАК Наименование,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Склад.Контрагент КАК Контрагент,
		|	ТоварыНаСкладахОстатки.Склад.ИД КАК СкладИД
		|ИЗ
		|	втСырье КАК втСырье
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				&ДатаОстатков,
		|				Склад.Владелец = &Владелец
		|					И (Склад.Контрагент.ГоловнойКонтрагент = &Контрагент
		|						ИЛИ Склад.Контрагент = &Контрагент
		|						ИЛИ Склад = &Контрагент)
		|					И Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
		|					И Номенклатура.ТорговаяМарка.ОрганизацияЗакупки = &Организация) КАК ТоварыНаСкладахОстатки
		|		ПО втСырье.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка,
		|	Склады.Контрагент КАК Контрагент,
		|	Склады.ИД,
		|	Склады.Организация
		|ИЗ
		|	Справочник.Склады КАК Склады
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Склады.ПометкаУдаления";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[2].Выбрать();
	ТабСклады = Результаты[3].Выгрузить();
	
	//+++АК SHEP 2018.01.16 
	Если ВозвращатьТЗн Тогда
		ТЗнДляВозврата = Новый ТаблицаЗначений;
		ТЗнДляВозврата.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТЗнДляВозврата.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗнДляВозврата.Колонки.Добавить("Перемещено", Новый ОписаниеТипов("Число"));
		ТЗнДляВозврата.Колонки.Добавить("Списано", Новый ОписаниеТипов("Число"));
		ТЗнДляВозврата.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	//---АК SHEP 2018.01.16
	
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		Если НЕ ЗначениеЗаполнено(Выборка.СкладИД) Тогда
			СтрокаСклад = ТабСклады.Найти(Контрагент, "Контрагент");
			Если СтрокаСклад <> Неопределено Тогда
				Область.Параметры.Контрагент = СтрокаСклад.Контрагент;
				Область.Параметры.id_sklad = Формат(СтрокаСклад.ИД, "ЧГ=0");
			КонецЕсли;
		Иначе
			Область.Параметры.Контрагент = Выборка.Контрагент;
			Область.Параметры.id_sklad = Формат(Выборка.СкладИД, "ЧГ=0");
		КонецЕсли;
		
		Область.Параметры.Товар = Выборка.Наименование;
		Область.Параметры.ЕдИзм = Выборка.ЕдИзм;
		Область.Параметры.id = Формат(Выборка.id_tov, "ЧГ=0");
		ЗапросИнвент = Новый Запрос();
		ЗапросИнвент.Текст =
			"ВЫБРАТЬ
			|	ВЗ_МаксДата.Дата,
			|	ИнвентаризацияСкладТовары.Количество
			|ИЗ
			|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(ИнвентаризацияСкладТовары.Ссылка.Дата) КАК Дата
			|		ИЗ
			|			Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
			|		ГДЕ
			|			ИнвентаризацияСкладТовары.Номенклатура = &Номенклатура
			|			И ИнвентаризацияСкладТовары.Склад = &Склад
			|			И ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
			|			И ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам = ИСТИНА
			|			И ИнвентаризацияСкладТовары.Ссылка.Дата < &Дата) КАК ВЗ_МаксДата
			|		ПО ИнвентаризацияСкладТовары.Ссылка.Дата = ВЗ_МаксДата.Дата
			|ГДЕ
			|	ИнвентаризацияСкладТовары.Номенклатура = &Номенклатура
			|	И ИнвентаризацияСкладТовары.Склад = &Склад
			|	И ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
			|	И ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам = ИСТИНА";
		
		ЗапросИнвент.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
		ЗапросИнвент.УстановитьПараметр("Склад", Выборка.Склад);
		ЗапросИнвент.УстановитьПараметр("Дата", НачалоДня(НаДату));
		ДатаПослИнвентарки = '00010101';
		КолвоПоИнвентаризации = 0;
		ВыборкаДата = ЗапросИнвент.Выполнить().Выбрать();
		Если ВыборкаДата.Следующий() Тогда
			ДатаПослИнвентарки = ВыборкаДата.Дата;
			КолвоПоИнвентаризации = Цел(ВыборкаДата.Количество);
		КонецЕсли;
		
		Приход = 0;
		Расход = 0;
		Если ЗначениеЗаполнено(ДатаПослИнвентарки) Тогда
			Область.Параметры.ДатаИнвент = Формат(ДатаПослИнвентарки, "ДФ=dd.MM.yyyy");
			Область.Параметры.ОстатокПоИнвент = КолвоПоИнвентаризации;
			
			ЗапросДвижения = Новый Запрос();
			ЗапросДвижения.Текст =
				"ВЫБРАТЬ
				|	ТоварыНаСкладахОбороты.Номенклатура,
				|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК Приход,
				|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК Расход
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Обороты(
				|			&ДатаНач,
				|			&ДатаКон,
				|			Регистратор,
				|			Склад = &Склад
				|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОбороты
				|ГДЕ
				|	НЕ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ИнвентаризацияСклад
				|
				|СГРУППИРОВАТЬ ПО
				|	ТоварыНаСкладахОбороты.Номенклатура";
			
			ЗапросДвижения.УстановитьПараметр("ДатаНач", Новый Граница(ДатаПослИнвентарки + 1, ВидГраницы.Включая));
			ЗапросДвижения.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(НаДату), ВидГраницы.Включая));
			ЗапросДвижения.УстановитьПараметр("Склад", Выборка.Склад);
			ЗапросДвижения.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
			ВыборкаДвижения = ЗапросДвижения.Выполнить().Выбрать();
			Если ВыборкаДвижения.Следующий() Тогда
				Приход = Цел(ВыборкаДвижения.Приход);
				Расход = Цел(ВыборкаДвижения.Расход);
			КонецЕсли;
			Область.Параметры.Перемещено = Приход;
			Область.Параметры.Списано = Расход;
			Область.Параметры.Остаток = КолвоПоИнвентаризации + Приход - Расход;
		Иначе
			Область.Параметры.Остаток = Цел(Выборка.Количество);
		КонецЕсли;
		
		ВыбОбластьЯчеек = ТабДок.Вывести(Область);
		Если Приход = 0 И Расход = 0 И Область.Параметры.Остаток <> 0 Тогда
			ВыбОбластьЯчеек.ЦветФона = WebЦвета.Розовый;
		КонецЕсли;
		
		Если ВозвращатьТЗн Тогда
			НоваяСтрокаТЗн = ТЗнДляВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗн, Область.Параметры);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗн, Выборка, "Номенклатура");
		КонецЕсли;
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	
	Если ВозвращатьТЗн Тогда
		Возврат ТЗнДляВозврата;
	КонецЕсли;
	
	Возврат ТабДок;

КонецФункции
