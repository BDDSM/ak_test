
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Рассылка задолженности по счет-фактурам");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.ОтветственныйБухгалтер = Объект.Ответственный;
		Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
		
		СчетаПоУмолчанию = Новый Массив();
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
		
        Для каждого ТекЭлемент Из СчетаПоУмолчанию Цикл
		
			НоваяСтрока = Объект.СписокСчетов.Добавить();	
			
			НоваяСтрока.Счет = ТекЭлемент;
			НоваяСтрока.УчаствуетВРасчетах = Истина;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Заполнение таблицы не возможно так как имеются постоянные данные!";
			Сообщение.Сообщить();	
			
			Возврат
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	ОтправитьПисьмаНаСервере();
	
	Записать();
	
КонецПроцедуры

Процедура ПроверитьСтрокуТЧ(МассивСообщений,Знач ПодчиненнаяСтрока = Неопределено,Отказ)

	
	Если ПодчиненнаяСтрока = Неопределено Тогда
		ПодчиненнаяСтрока = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока];
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ШаблонЗапроса) Тогда
		МассивСообщений.Добавить("У Организации "+ПодчиненнаяСтрока.Организация + " не заполнен шаблон запроса акта сверки!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя) Тогда
		
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной менеджер!");	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя) Тогда
		
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен основной бухгалер!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ПочтаБухгалтера) Тогда
		
		МассивСообщений.Добавить("У пользователя "+ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя + " не заполнен учетная запись электронной почты!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Почта) Тогда
		
		МассивСообщений.Добавить("У Контрагента "+ПодчиненнаяСтрока.Контрагент + " не заполнен email адрес!");	
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстHTML(СтрокаТЧ)

	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	ТекстHTML = СтрокаТЧ.ШаблонЗапроса.ОписаниеHTML;
			
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ИмяФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
		
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
				
		ТекстHTML = СтрЗаменить(ТекстHTML,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции	

Процедура УстановитьПараметрыHTML(ТекстHTML,ПодчиненнаяСтрока,ФамилияИмяБухгалтера="")

	СтруктураПараметров = Новый Структура;
		
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ПодчиненнаяСтрока.Организация,ТекущаяДата());
	
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование",ПодчиненнаяСтрока.Контрагент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ПериодОбработки","с "+Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	
	СтруктураПараметров.Вставить("Организация",ПодчиненнаяСтрока.Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор",Руководители.Руководитель);
		
	СтруктураПараметров.Вставить("Комментарий",ПодчиненнаяСтрока.Комментарий);
	СтруктураПараметров.Вставить("АдресДоставки",Объект.АдресДоставки.ПочтовыйАдрес);	

	Для каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"%"+ТекПараметр.Ключ,ТекПараметр.Значение);
		
	КонецЦикла;
	
	СтруктураПараметровМногострочные = Новый Структура;  		
	
	ДанныеФизЛицаМенеджера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя.ФизЛицо);
	ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя.ФизЛицо);
	
	ФамилияИмяМенеджера = ДанныеФизЛицаМенеджера[0] + " "+ДанныеФизЛицаМенеджера[1];
	ФамилияИмяБухгалтера = ДанныеФизЛицаБухгалтера[0] + " "+ДанныеФизЛицаБухгалтера[1];
	
	Телефоны =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонМенеджера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Менеджер",ФамилияИмяМенеджера);
	Телефоны1 =  СформироватьПредставленияКонтакта(ПодчиненнаяСтрока.ТелефонБухгалтера,ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя
	,ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя,"Бухгалтер",ФамилияИмяБухгалтера);
	
	ФИОEMAIL =  СокрЛП(ПодчиненнаяСтрока.ОсновнойБухгалтерПокупателя);
	
	СтруктураПараметровМногострочные.Вставить("Телефоны",СокрЛП(Телефоны) + " " + ПодчиненнаяСтрока.ПочтаМенеджера);
	СтруктураПараметровМногострочные.Вставить("Телефоны1",СокрЛП(Телефоны1) + " " + ПодчиненнаяСтрока.ПочтаБухгалтера);
	
	СтруктураПараметровМногострочные.Вставить("ФИОEmail",ФИОEMAIL);
	СтруктураПараметровМногострочные.Вставить("Документы",СтрЗаменить(ПодчиненнаяСтрока.ТекстЗадолженности, Символы.ПС, "<br>"));
	
	Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
		
		ЖирныйШрифтНач = "";
		ЖирныйШрифтКонец = "";
		Если Не Найти(ТекстHTML,"<P>%"+ТекПараметр.Ключ+"</P>") Тогда
			ЖирныйШрифтНач = "<STRONG>";
			ЖирныйШрифтКонец = "</STRONG>";  					
		КонецЕсли;
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"<P>"+ЖирныйШрифтНач+"%"+ТекПараметр.Ключ+ЖирныйШрифтКонец+"</P>",ТекПараметр.Значение);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	
	СоответствиеШаблонов = Новый Соответствие;
	МассивСообщений = Новый Массив;
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	Для каждого ПодчиненнаяСтрока Из Объект.СписокРассылки Цикл
		
		Отказ = Ложь;
		
		Если Не	ПодчиненнаяСтрока.Пометка Или Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ТекстЗадолженности) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчиненнаяСтрока.Отправлено) Тогда			
			Продолжить;			
		КонецЕсли;	
		
		ПроверитьСтрокуТЧ(МассивСообщений,ПодчиненнаяСтрока,Отказ);
		
		Если Отказ Тогда			
			Продолжить;			
		КонецЕсли;
		
		ТекстHTML = СоответствиеШаблонов.Получить(ПодчиненнаяСтрока.Организация);
		
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = ПолучитьТекстHTML(ПодчиненнаяСтрока);
			СоответствиеШаблонов.Вставить(ПодчиненнаяСтрока.Организация,ТекстHTML);
			
		КонецЕсли;
		
		ФамилияИмяБухгалтера = "";
		УстановитьПараметрыHTML(ТекстHTML,ПодчиненнаяСтрока,ФамилияИмяБухгалтера);
		
		ТаблицаОбъектовКому = СтрЗаменить(ПодчиненнаяСтрока.Почта, ";",Символы.ПС);
		
		Для сч=1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
			АдресПолучателя=СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому,сч));
			Попытка
				Послать(АдресПолучателя,ТекстHTML,ПодчиненнаяСтрока.ПочтаБухгалтера,ПодчиненнаяСтрока.ШаблонЗапроса.Тема,ФамилияИмяБухгалтера);
				ПодчиненнаяСтрока.Отправлено = ТекущаяДата();
			Исключение
				Сообщить(АдресПолучателя);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;    
	
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры // ОтправитьПисьмаНаСервере()

&НаСервере
Функция СформироватьПредставленияКонтакта(Контакт,ОсновнойБухгалтерПокупателя,ОсновнойМенеджерПокупателя,Должность,ФамилияИмяМенеджера,Жирным = Ложь)
	ЖирныйШрифтНач = "";
	ЖирныйШрифтКонец = "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач = "<STRONG>";
		ЖирныйШрифтКонец = "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
	И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя Или Должность = "Бухгалтер")
	,"<P>"+ЖирныйШрифтНач+Должность+" " +ФамилияИмяМенеджера + " "+Контакт+ЖирныйШрифтКонец+"</P>",""); 
	
КонецФункции // СформироватьПредставленияКонтакта()

&НаСервере
Процедура ЗаполнитьНаСервере(Номер = Неопределено,ПоСтроке = Ложь)
	
	Если Номер <> Неопределено Тогда
		
		ТекущиеДанные = Объект.СписокРассылки[Номер-1];
	
	КонецЕсли;
	
	Если Объект.СписокРассылки.Количество() И ПоСтроке = Ложь Тогда
		
		Объект.СписокРассылки.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	
	Если Не ПоСтроке Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ЛОЖЬ КАК Пометка,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ИНН КАК ИНН,
		|	Организации.Ссылка КАК Организация,
		|	Организации.ШаблонЗапросаСчетФактур КАК ШаблонЗапроса,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя
		|	И Организации.Ссылка = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя;";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ЛОЖЬ КАК Пометка,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ИНН КАК ИНН,
		|	Организации.Ссылка КАК Организация,
		|	Организации.ШаблонЗапросаСчетФактур КАК ШаблонЗапроса,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|	И Организации.Ссылка = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя;";
		
		Запрос.УстановитьПараметр("Контрагент",ТекущиеДанные.Контрагент);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	Данные.Организация,
	                              |	Данные.Контрагент КАК Контрагент,
								  |	Данные.ИНН КАК ИНН,
	                              |	Данные.Пометка,
	                              |	Данные.ОсновнойБухгалтерПокупателя,
	                              |	Данные.ОсновнойМенеджерПокупателя,
								  |	Данные.ШаблонЗапроса,
	                              |	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	                              |	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	                              |	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	                              |	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	                              |	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера
	                              |ИЗ
	                              |	Данные КАК Данные
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	                              |			И (ТелефонМенеджер.Тип = &ТипТелефон)
	                              |			И (ТелефонМенеджер.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	                              |			И (ТелефонБухгалтера.Тип = &ТипТелефон)
	                              |			И (ТелефонБухгалтера.Вид = &ТелефонФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                              |		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	                              |			И (НастройкиПользователей.Настройка = &Настройка)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	                              |		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	                              |			И (ПочтаМенеджера.Тип = &ТипПочта)
	                              |			И (ПочтаМенеджера.Вид = &ПочтаФизЛица)
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	                              |		ПО (ПочтаБухгалтера.Вид = &ПочтаФизЛица)
	                              |			И (ПочтаБухгалтера.Тип = &ТипПочта)
	                              |			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект";
								  
								  
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя",Объект.ОтветственныйБухгалтер);
	
	Запрос.УстановитьПараметр("ПочтаФизЛица",Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("ТипПочта",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТелефонФизЛица",Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Запрос.УстановитьПараметр("ТипТелефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ТекстЗадолженности");
	
	//теперь получим данные из бухгалтерии
	
	Бухгалтерия = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
	СчетаПоУмолчанию = бухгалтерия.NewObject("Массив");
	Для Каждого СтрокаСчет Из Объект.СписокСчетов Цикл
		Если СтрокаСчет.УчаствуетВРасчетах Тогда
			СчетаПоУмолчанию.Добавить(бухгалтерия.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаСчет.Счет.Код));
		КонецЕсли;	
	КонецЦикла;	
	ЗапросБухия = бухгалтерия.NewObject("Запрос");
	ЗапросБухия.УстановитьПараметр("ДатаОстатков", КонецДня(Объект.Дата));
	ЗапросБухия.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНачала));
	ЗапросБухия.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаОкончания));
	ЗапросБухия.УстановитьПараметр("ИННОрг", Объект.Организация.ИНН);
	ЗапросБухия.УстановитьПараметр("Счета", СчетаПоУмолчанию);
	ЗапросБухия.Текст = "ВЫБРАТЬ
					|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ИНН КАК ИННКонтрагента,
					|	ХозрасчетныйОстатки.Субконто2.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
					|	ХозрасчетныйОстатки.Субконто2.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
					|	ХозрасчетныйОстатки.Субконто2.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&Счета), , ) КАК ХозрасчетныйОстатки
					|ГДЕ
					|	ХозрасчетныйОстатки.СуммаОстаток > 0
					|	И ХозрасчетныйОстатки.Субконто2.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|	И ХозрасчетныйОстатки.Организация.ИНН = &ИННОрг
					|УПОРЯДОЧИТЬ ПО ИННКонтрагента, ДатаВходящегоДокумента";
	
	ВыборкаБухия = ЗапросБухия.Выполнить().Выбрать();
	Пока ВыборкаБухия.СледующийПоЗначениюПоля("ИННКонтрагента") Цикл
		СтрокаВРезультате = Результат.Найти(ВыборкаБухия.ИННКонтрагента, "ИНН");
		Если СтрокаВРезультате = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаЗадолженности = "";
		Пока ВыборкаБухия.Следующий() Цикл
			СтрокаЗадолженности = СтрокаЗадолженности + ?(ЗначениеЗаполнено(СтрокаЗадолженности), Символы.ПС, "")
				+ "№" + ВыборкаБухия.НомерВходящегоДокумента + " от " + Формат(ВыборкаБухия.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + " на сумму " + Формат(ВыборкаБухия.СуммаДокумента, "ЧДЦ=2");
		КонецЦикла;
		СтрокаВРезультате.ТекстЗадолженности = СтрокаЗадолженности;
	КонецЦикла;
	
	КолвоСтрок = Результат.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если Не ЗначениеЗаполнено(Результат[КолвоСтрок - н].ТекстЗадолженности) Тогда
			Результат.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
					
					
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, КонтактнаяИнформация1.Представление) КАК Почта,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО КонтактнаяИнформация.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО КонтактнаяИнформация1.Объект = Контрагенты.Ссылка
	|			И (КонтактнаяИнформация1.Вид = &Вид)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Массив)";

	
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Запрос.УстановитьПараметр("Массив", Результат.ВыгрузитьКолонку("Контрагент"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта",Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
		
	Для каждого ТекСтрока Из Результат Цикл
		
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент",ТекСтрока.Контрагент)) Тогда
			
			ТекСтрока.Почта = ВыборкаДетальныеЗаписи.Почта;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Если Не ПоСтроке Тогда
		
			НоваяСтрока = Объект.СписокРассылки.Добавить();
		
		Иначе
		
			НоваяСтрока = ТекущиеДанные;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекСтрока.Пометка = ТекСтрока.Пометка;	
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьСнятьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьСнятьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(Пометка)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		ТекСтрока.Пометка = Пометка;
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьСнятьПометки()



&НаСервере
Процедура Послать(АдресПолучателя,ТекстПисьма,УЗ,Тема,Пользователь)
	
	//+++АК SHEP 2018.02.15 ИП-00017889
	УправлениеЭлектроннойПочтой.ПослатьОтРассылкиСОбратнымАдресом(АдресПолучателя, ТекстПисьма, УЗ, Тема, Пользователь);
	Возврат;
	//---АК SHEP 2018.02.15
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP="10.0.0.30";
	ИПП.Пользователь=Пользователь;
	ИПП.ПортSMTP=25;
	//
	//Если УЗ.ТребуетсяSMTPАутентификация Тогда
	//	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
	//	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	//Иначе
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	//КонецЕсли;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ;
	Письмо.ИмяОтправителя = Пользователь; //+++АК SHEP 2018.02.06 ИП-00017780
	Письмо.Получатели.Добавить(АдресПолучателя);
	
	//Для Каждого ТекАдр Из Вложения Цикл
	//	Письмо.Вложения.Добавить(АдресФайла);
	//КонецЦикла;
	
	Письмо.Тема=Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	
	Почта=Новый ИнтернетПочта;
	
	Почта.Подключиться(ИПП);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокРассылкиКонтрагентПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиОрганизацияПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	Номер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьНаСервере(Номер,Истина)
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстПисьма(Команда)
	
	ОткрытьФормуПредварительныйПросмотр();
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ОткрытьФормуПредварительныйПросмотр()
	
	Отказ = Ложь;
	МассивСообщений 		= Новый Массив;

	ПроверитьСтрокуТЧ(МассивСообщений,,Отказ);
	
	Если Отказ Тогда
		МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
		
		Для каждого ТекСтрока Из МассивСообщений Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекСтрока;
			Сообщение.Сообщить();
		КонецЦикла;
	Иначе	
		ПараметрыОткрытия = Новый Структура;
		ТекстHTML =  СформироватьТекстHTMLПредварительный();
		ПараметрыОткрытия.Вставить("ТекстHTML",ТекстHTML);		
		ОткрытьФорму("Документ.РассылкаЗадолженностиПоСчетФактурам.Форма.ФормаПредварительныйПросмотр",ПараметрыОткрытия);
	КонецЕсли;
		
КонецПроцедуры	

Функция СформироватьТекстHTMLПредварительный()
	
	ТекущаяСтрокаРассылка = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока]; 
	ТекстHTML = ПолучитьТекстHTML(ТекущаяСтрокаРассылка);
	УстановитьПараметрыHTML(ТекстHTML,ТекущаяСтрокаРассылка);
	Возврат ТекстHTML;
	
КонецФункции	

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры










