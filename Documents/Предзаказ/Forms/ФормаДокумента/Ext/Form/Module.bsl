
//
Процедура ЗаполнитьПроизводителя()
	
	ЭтаФорма.Производитель = Объект.ГрафикЗаказа.Владелец;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСписокХарактеристик(мПроизводитель, мНоменклатура)
	
	СписокХарактеристик = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Производитель"	, мПроизводитель);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводителиТоваров.Объект КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ПроизводителиТоваров
	|ГДЕ
	|	ПроизводителиТоваров.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	|	И ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Номенклатура
	|	И НЕ ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная
	|	И НЕ ВЫРАЗИТЬ(ПроизводителиТоваров.Объект КАК Справочник.ХарактеристикиНоменклатуры).ПометкаУдаления
	|	И (ВЫРАЗИТЬ(ПроизводителиТоваров.Значение КАК Справочник.Контрагенты)) = &Производитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводителиТоваров.Объект.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокХарактеристик.Добавить(Выборка.ХарактеристикаНоменклатуры);
	КонецЦикла;
	
	Возврат СписокХарактеристик;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеВедетсяУчетХарактеристик(мНоменклатура)
	
	Возврат мНоменклатура.НеВедетсяУчетПоХарактеристикам;
	
КонецФункции

Процедура ПриИзмененииПроизводителя()
	
	Если НЕ ЭтаФорма.Производитель.Пустая() Тогда
		Если НЕ Объект.ГрафикЗаказа.Владелец = ЭтаФорма.Производитель Тогда
			
			Если НЕ Объект.ГрафикЗаказа.Пустая() Тогда
				Сообщить("Необходимо выбрать график, соответствующий производителю """ + СокрЛП(ЭтаФорма.Производитель.Наименование) + """");
			КонецЕсли;
			
			Объект.ГрафикЗаказа = Справочники.ГрафикиПоставкиТовара.ПустаяСсылка();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьИспользоватьРежимПроведенияСервер()
	
	Если Объект.Дата > ТекущаяДата() Тогда
		ЭтаФорма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
	Иначе
		ЭтаФорма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Авто;
	КонецЕсли;
	
КонецПроцедуры
	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018466
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Предзаказ");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;  // нельзя вводить вручную
		Возврат;
		
		//Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//
		//Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		//	Объект.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеСтруктурноеПодразделение");
		//КонецЕсли;
		
	КонецЕсли;	
	//++AK Lobv 04/12/2016
	ЭтаФорма.Элементы.ФормироватьПоступлениеНаВиртуальныйСклад.Доступность=УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.СоздаватьПредзаказыНаВиртуальныйСклад, Ложь);
	//--АК Lobv
	
	ЗаполнитьПроизводителя();
	
	//+++AK GREK 23.08.2018 ИП-00017119.01
	КонтролироватьНулевыеЦены = Истина;
	//---AK
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ссылка.Пустая()
			ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущийОбъект.ДатаПоступления = ТекущийОбъект.Ссылка.ДатаПоступления Тогда
		
		НаборЗаписей = РегистрыСведений.АК_ИсторияИзмененийПредзаказа_ДатаПоступления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Предзаказ.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда // в первый раз записывается изменение - пишется первоначальное значение, на дату документа
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период 				= ТекущаяДата() - 1;
			НоваяЗапись.Предзаказ 			= ТекущийОбъект.Ссылка;
			НоваяЗапись.ДатаПоступления 	= ТекущийОбъект.Ссылка.ДатаПоступления;
			НоваяЗапись.Автор 				= Объект.Ответственный;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		НаборЗаписей = Неопределено; // забота о памяти приложения 1С
		
		// измененное значение
		МенеджерЗаписи = РегистрыСведений.АК_ИсторияИзмененийПредзаказа_ДатаПоступления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= ТекущаяДата();
		МенеджерЗаписи.Предзаказ 		= ТекущийОбъект.Ссылка;
		МенеджерЗаписи.ДатаПоступления 	= ТекущийОбъект.ДатаПоступления;
		МенеджерЗаписи.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	УстановитьИспользоватьРежимПроведенияСервер();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЭтаФорма.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	УстановитьИспользоватьРежимПроведенияСервер();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЭтаФорма.Записать(ПараметрыЗаписи);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ищем все заказы и перепроводим их
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщикуПредзаказы.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|ГДЕ
	|	ЗаказПоставщикуПредзаказы.Документ = &Ссылка
	|	И ЗаказПоставщикуПредзаказы.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуПредзаказы.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		Док = Выборка.Заказ.ПолучитьОбъект();
		Док.записать(режимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ГрафикЗаказаПриИзменении(Элемент)
	
	ЗаполнитьПроизводителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ЭтаФорма.Производитель) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		Если НеВедетсяУчетХарактеристик(ТекДанные.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",, Элемент);
		ФормаВыбора.Элементы.Список.ТекущаяСтрока = ТекДанные.Характеристика;

		мСписок = ФормаВыбора.Список;
		ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");   
	    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	    ЭлементОтбора.Использование  = Истина;
	    ЭлементОтбора.ПравоеЗначение = ПолучитьСписокХарактеристик(ЭтаФорма.Производитель, ТекДанные.Номенклатура);
	    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюИзмененийДатыПоступления(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//
	ФормаСписка = ПолучитьФорму("РегистрСведений.АК_ИсторияИзмененийПредзаказа_ДатаПоступления.ФормаСписка",, ЭтаФорма);
	
	мСписок = ФормаСписка.Список;
	ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Предзаказ");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаСписка.ТолькоПросмотр = Истина;
	ФормаСписка.Элементы.Предзаказ.Видимость = Ложь;
	ФормаСписка.ОткрытьМодально();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетСервер()
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Документы.Предзаказ.ПолучитьМакет("ИзмененияТоваров");
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ЭтаФорма.ОтчетИзмененияТоваров.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ОтчетИзмененияТоваров);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ЭтаФорма.ОтчетИзмененияТоваров.ФиксацияСверху = 0;
	ЭтаФорма.ОтчетИзмененияТоваров.ФиксацияСлева = 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОтчетПоИзменениюТоваров(Команда)
	
	ОбновитьОтчетСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаИзменения" Тогда
		
		ОбновитьОтчетСервер();
		
	КонецЕсли;
	
КонецПроцедуры

//+++AK GREK 13.11.2017 ИП-00017119
&НаСервере
Функция ПолучитьПустыеЦены() 
	ПустыеЦены = Новый Структура;
	ПустыеЦены.Вставить("НетРозничнойЦены", Неопределено);
	ПустыеЦены.Вставить("НетЗакупочнойЦены", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.Характеристика,
	               |	ТаблицаТоваров.ТорговаяТочка,
	               |	ТаблицаТоваров.Количество
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	               |	ВТ.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ВТ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И (ВТ.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |				ИЛИ ЦеныНоменклатурыСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	               |			И (ВТ.ТорговаяТочка = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
	               |				ИЛИ ЦеныНоменклатурыСрезПоследних.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	               |ГДЕ
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	               |	И ВТ.Количество > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Номенклатура";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить());
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
			ТоварыБезЦен = Результат.Выгрузить();
			ПустыеЦены.НетРозничнойЦены = ТоварыБезЦен.ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.Характеристика,
	               |	ТаблицаТоваров.Количество
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Номенклатура,
	               |	ВТ.Характеристика,
	               |	ЦеныПоставщиковСрезПоследних.Цена
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Дата, ) КАК ЦеныПоставщиковСрезПоследних
	               |		ПО ВТ.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	               |			И (ВТ.Характеристика = ЦеныПоставщиковСрезПоследних.Характеристика
	               |				ИЛИ ЦеныПоставщиковСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	               |ГДЕ
	               |	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) = 0
	               |	И ВТ.Количество > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Номенклатура,
	               |	ВТ.Характеристика,
	               |	ЦеныПоставщиковСрезПоследних.Цена";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить());
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
			ТоварыБезЦен = Результат.Выгрузить();
			ПустыеЦены.НетЗакупочнойЦены = ТоварыБезЦен.ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
	Возврат ПустыеЦены;
КонецФункции

		
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//+++AK GREK 13.11.2017 ИП-00017119
	Если НЕ Отказ И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И КонтролироватьНулевыеЦены Тогда
		ТоварыБезЦен = ПолучитьПустыеЦены();
		Если ТоварыБезЦен.НетРозничнойЦены <> Неопределено Тогда
			Для Каждого ТоварБезРозничнойЦены из ТоварыБезЦен.НетРозничнойЦены Цикл
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", ТоварБезРозничнойЦены);
				НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				СтрНомераСтрок = "";
				Для каждого Стр из  НайденныеСтроки Цикл
					СтрНомераСтрок = СтрНомераСтрок + " " + Стр.НомерСтроки;
				КонецЦикла;
				Сообщить("В строках" + СтрНомераСтрок + " по товару " + ТоварБезРозничнойЦены + " отсутствует розничная цена");	
			КонецЦикла;
		КонецЕсли;
		Если ТоварыБезЦен.НетЗакупочнойЦены <> Неопределено Тогда
			Для Каждого ТоварБезЗакупочнойЦены из ТоварыБезЦен.НетЗакупочнойЦены Цикл
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", ТоварБезЗакупочнойЦены);
				НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				СтрНомераСтрок = "";
				Для каждого Стр из  НайденныеСтроки Цикл
					СтрНомераСтрок = СтрНомераСтрок + " " + Стр.НомерСтроки;
				КонецЦикла;
				Сообщить("В строках" + СтрНомераСтрок + " по товару " + ТоварБезЗакупочнойЦены + " отсутствует закупочная цена");	
			КонецЦикла;
		КонецЕсли;	
		Если ТоварыБезЦен.НетРозничнойЦены <> Неопределено ИЛИ ТоварыБезЦен.НетЗакупочнойЦены <> Неопределено Тогда
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтаФорма, ТоварыБезЦен);
			ПоказатьВопрос(Оп, "ВНИМАНИЕ! Документ не проведен! Для указанных в документе товаров отсутствуют розничные/закупочные цены." + Символы.ПС  + Символы.ПС + "Уведомить технолога об отсутствии цен?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Вопрос");
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	//---AK
КонецПроцедуры

//+++AK GREK 13.11.2017 ИП-00017119
&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВопроса(Результат, параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтправитьПисьмоТехнологу(Параметры);	
	КонецЕсли;
КонецПроцедуры


//+++AK GREK 13.11.2017 ИП-00017119
&НаСервере
Процедура ОтправитьПисьмоТехнологу(ТоварыБезЦен)
	Технолог = Объект.Поставщик.ОсновнойМенеджерПокупателя.ФизЛицо;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление КАК Email
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Запрос.УстановитьПараметр("Объект", Технолог);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗПолучатель = Результат.Выгрузить();
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();	
		НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
		НовоеПисьмо.УчетнаяЗапись 	= УчетнаяЗапись;
		НовоеПисьмо.ОснованиеПисьма = объект.Ссылка;
		НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
		НовоеПисьмо.Дата 			= ТекущаяДата();
		НовоеПисьмо.ДатаОтправления = ТекущаяДата();
		//НовоеПисьмо.ЕстьВложения = ?(Неопределено,Ложь,Вложения.Количество());
		НовоеПисьмо.Тема 			= "Отсутствуют розничные/закупочные цены";
		НовоеПисьмо.Кому 				= ТЗПолучатель[0].Email;
		НовоеПисьмо.КомуПредставление 	= ТЗПолучатель[0].Email;
		Получатель = НовоеПисьмо.КомуТЧ.Добавить();
		Получатель.АдресЭлектроннойПочты 	= ТЗПолучатель[0].Email;
		Получатель.Представление 			= ТЗПолучатель[0].Email;
		
		ТекстПисьма = "При проведении документа Предзаказ №" + Объект.Номер + " от " + Объект.Дата + Символы.ПС;
		Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ТекстПисьма = ТекстПисьма + "Ответственный " + Объект.Ответственный.Наименование + Символы.ПС;
		КонецЕсли;
		ТекстПисьма = ТекстПисьма + Символы.ПС + "Обнаружены следующие ошибки:" + Символы.ПС;
		Если ТоварыБезЦен.НетРозничнойЦены  <> Неопределено Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС + "Отсутствует розничная цена у следующих товаров:" + Символы.ПС;
			Для Каждого Стр из ТоварыБезЦен.НетРозничнойЦены Цикл
				ТекстПисьма = ТекстПисьма + Стр + Символы.ПС;	
			КонецЦикла;
		КонецЕсли;	
		Если ТоварыБезЦен.НетЗакупочнойЦены <> Неопределено Тогда	
			ТекстПисьма = ТекстПисьма + Символы.ПС + "Отсутствует закупочная цена у следующих товаров:" + Символы.ПС;
			Для Каждого Стр из ТоварыБезЦен.НетЗакупочнойЦены Цикл
				ТекстПисьма = ТекстПисьма + Стр + Символы.ПС;	
			КонецЦикла;
		КонецЕсли;
		НовоеПисьмо.ТекстПисьма 	= ТекстПисьма;
		НовоеПисьмо.Записать();
	
		УчетныеЗаписи = Новый Массив;
		УчетныеЗаписи.Добавить(УчетнаяЗапись);
		Письма = Новый Соответствие;
		Письма.Вставить(НовоеПисьмо.Ссылка, НовоеПисьмо);
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	КонецЕсли;
КонецПроцедуры

//+++АК KIRN 2018.04.24  
&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Объект.Организация = Объект.Склад.Организация;
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.24  
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры
//---АК KIRN 

//+++АК sils 08.06.2018 ИП-00018466
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры
