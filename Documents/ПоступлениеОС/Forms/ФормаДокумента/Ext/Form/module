
Процедура УстановитьОССервер(пСтрока)
	
	Если ЗначениеЗаполнено(пСтрока.ОсновноеСредство)
			И Найти(пСтрока.ОсновноеСредство, "<Объект не найден>") = 0 Тогда
		обСпр = пСтрока.ОсновноеСредство.ПолучитьОбъект();
	Иначе
		обСпр = Справочники.ОсновныеСредства.СоздатьЭлемент();
		обСпр.Наименование = пСтрока.Номенклатура.Наименование;
	КонецЕсли;
	
	обСпр.Номенклатура 				= пСтрока.Номенклатура;
	обСпр.ПервоначальнаяСтоимость 	= пСтрока.Сумма;
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	обСпр.ИнвентарныйНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ИнвентарныйНомер);
	обСпр.ЗаводскойНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ЗаводскойНомер);
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
			И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер) Тогда
		пСтрока.ИнвентарныйНомер 	= обСпр.Код;
		пСтрока.ЗаводскойНомер 		= обСпр.Код;
	КонецЕсли;
	
	пСтрока.ОсновноеСредство = обСпр.Ссылка;
	
КонецПроцедуры

Процедура СоздатьЭлементыОССервер()
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого Строка Из Номенклатура Цикл
			УстановитьОССервер(Строка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании ОС по строке № " + Строка.НомерСтроки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОсновныеСредства(Команда)
	
	СоздатьЭлементыОССервер();
	
КонецПроцедуры

Функция ОСУжеЕстьНаСкладе(пОсновноеСредство)
	
	Запрос = Новый Запрос;
	
	Параметры = Новый Массив(2);
	Параметры[0] = Дата;
	Параметры[1] = Ссылка;
	Запрос.УстановитьПараметр("Дата"			, Новый (Тип("МоментВремени"), Параметры));
	Запрос.УстановитьПараметр("ОсновноеСредство", пОсновноеСредство);
	
	Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ЕСТЬNULL(УчетОсновныхСредствОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	//|ИЗ
	//|	РегистрНакопления.УчетОсновныхСредств.Остатки(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК УчетОсновныхСредствОстатки";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФинансовыйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)), , Субконто3 = &ОсновноеСредство) КАК ФинансовыйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоОстаток > 0;
	
КонецФункции

Функция НомерОССуществует(пИнвентарныйНомер, пОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнвентарныйНомер", пИнвентарныйНомер);
	Запрос.УстановитьПараметр("ОсновноеСредство", пОсновноеСредство);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ИнвентарныйНомер = &ИнвентарныйНомер
	|	И НЕ ОсновныеСредства.Ссылка = &ОсновноеСредство";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ЕстьПоступлениеНаОсновании(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументОснование", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеОС.Ссылка
	|ИЗ
	|	Документ.ПоступлениеОС КАК ПоступлениеОС
	|ГДЕ
	|	ПоступлениеОС.ДокументОснование = &ДокументОснование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьЦФОПоТТ(ТТ, Дата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТТ"	, ТТ);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &ТТ) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЦФО;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВидимость()
	
	Если ТипЗнч(Склад) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			И ЗначениеЗаполнено(Склад) Тогда
		Если ЗначениеЗаполнено(Склад.ДатаЗакрытия)
				И Склад.ДатаЗакрытия < Дата Тогда
			ЭлементыФормы.Склад.ЦветФона = Новый Цвет(222, 222, 222);
		Иначе
			ЭлементыФормы.Склад.ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
	Иначе
		ЭлементыФормы.Склад.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЦФОСотрудника()
	
	ТекДоступность = ЗначениеЗаполнено(ЭтотОбъект.Контрагент)
						И ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица");
						
	ЭлементыФормы.ЦФОСотрудника.ТолькоПросмотр = НЕ ТекДоступность;
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовИСубконто()

	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом), 0, СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			ЭлементыФормы["НадписьСубконтоКт" + К].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[К - 1].ВидСубконто.Наименование;
		КонецЕсли;
		ЭлементыФормы["СубконтоКт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоКт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует табличный документ унифицированной формы ОС-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-14 (приходный ордер).
//
Функция обПечатьОС14()

	Макет = ПолучитьОбщийМакет("ОС14");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг_ОС14";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеОС.Дата КАК ДатаДокумента,
	|	ПоступлениеОС.Номер КАК НомерДокумента,
	|	ПоступлениеОС.Организация КАК ОрганизацияПолучатель,
	|	ПоступлениеОС.Организация.КодПоОКПО КАК ОрганизацияПолучательКодПоОКПО,
	|	ПоступлениеОС.Склад КАК МестоПриема,
	|	ПоступлениеОС.Склад.Представление КАК МестоПриемаНаименование,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	0 КАК СуммаДокумента,
	|	ПоступлениеОС.Контрагент КАК ОрганизацияПоставщик,
	|	ПоступлениеОС.Контрагент КАК ОрганизацияГрузоотправитель,
	|	"""" КАК ОрганизацияПоставщикКодПоОКПО,
	|	"""" КАК Основание,
	|	ПоступлениеОС.НомерВходящегоДокумента КАК ОснованиеНомер,
	|	ПоступлениеОС.ДатаВходящегоДокумента КАК ОснованиеДата,
	|	ПоступлениеОС.ЦФО КАК ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПоступлениеОС.ЦФО.Наименование КАК СТРОКА(200)) КАК ПодразделениеНаименование,
	|	ЛОЖЬ КАК РасчетыВВалюте
	|ИЗ
	|	Документ.ПоступлениеОС КАК ПоступлениеОС
	|ГДЕ
	|	ПоступлениеОС.Ссылка = &Ссылка";
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал        = Макет.ПолучитьОбласть("Подвал");
	
	ОрганизацияПолучательНаименование = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "НаименованиеДляПечатныхФорм,");
	ОрганизацияПолучательТелефоны = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "Телефоны,");
	ОрганизацияПолучательБанковскиеРеквизиты = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "НомерСчета,Банк,БИК,КоррСчет,");
	ОрганизацияПоставщикНаименование = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "ПолноеНаименование,");
	ОрганизацияПоставщикТелефоны = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "Телефоны,");
	ОрганизацияПоставщикБанковскиеРеквизиты = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "НомерСчета,Банк,БИК,КоррСчет,");
	ОрганизацияГрузоотправительНаименование = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияГрузоотправитель, ВыборкаПоШапке.ДатаДокумента), "НаименованиеДляПечатныхФорм,");
	ОрганизацияГрузоотправительБанковскиеРеквизиты = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияГрузоотправитель, ВыборкаПоШапке.ДатаДокумента), "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
	
	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	Шапка.Параметры.ОрганизацияПолучательНаименование               = ОрганизацияПолучательНаименование;
	Шапка.Параметры.ОрганизацияПолучательТелефоны                   = ОрганизацияПолучательТелефоны;
	Шапка.Параметры.ОрганизацияПолучательБанковскиеРеквизиты        = ОрганизацияПолучательБанковскиеРеквизиты;
	Шапка.Параметры.ОрганизацияПоставщикНаименование                = ОрганизацияПоставщикНаименование;
	Шапка.Параметры.ОрганизацияПоставщикТелефоны                    = ОрганизацияПоставщикТелефоны;
	Шапка.Параметры.ОрганизацияПоставщикБанковскиеРеквизиты         = ОрганизацияПоставщикБанковскиеРеквизиты;
	Шапка.Параметры.ОрганизацияГрузоотправительНаименование         = ОрганизацияГрузоотправительНаименование;
	Шапка.Параметры.ОрганизацияГрузоотправительБанковскиеРеквизиты  = ОрганизацияГрузоотправительБанковскиеРеквизиты;

	ПодразделениеОтветственныхЛиц = ВыборкаПоШапке.ПодразделениеОрганизации;
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(
		ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента, ПодразделениеОтветственныхЛиц);

	Шапка.Параметры.РуководительДолжность    = ОтветственныеЛица.РуководительДолжность;
	Шапка.Параметры.РуководительНаименование = ОтветственныеЛица.РуководительПредставление;
	
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаТаблицы);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеОСНоменклатура.Ссылка,
	|	ПоступлениеОСНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеОСНоменклатура.ОсновноеСредство КАК Оборудование,
	|	ВЫРАЗИТЬ(ПоступлениеОСНоменклатура.ОсновноеСредство.Наименование КАК СТРОКА(1000)) КАК ОборудованиеНаименование,
	|	ПоступлениеОСНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	1 КАК Коэффициент,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	1 КАК Количество,
	|	1 КАК ФактическиПринято,
	|	ПоступлениеОСНоменклатура.Сумма КАК СтоимостьЗаЕдиницу,
	|	ПоступлениеОСНоменклатура.Сумма КАК Сумма,
	|	0 КАК СуммаНДС,
	|	ПоступлениеОСНоменклатура.Сумма КАК СуммаВВалютеДокумента,
	|	0 КАК СуммаНДСВВалютеДокумента
	|ИЗ
	|	Документ.ПоступлениеОС.Номенклатура КАК ПоступлениеОСНоменклатура
	|ГДЕ
	|	ПоступлениеОСНоменклатура.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеОСНоменклатура.НомерСтроки";
	ТаблицаПоОборудованию = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОборудование Из ТаблицаПоОборудованию Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаОборудование);
		СтрокаТаблицы.Параметры.ОборудованиеНаименование = СокрЛП(СтрокаОборудование.ОборудованиеНаименование);
		
		Если ВыборкаПоШапке.УчитыватьНДС Тогда
			Если ВыборкаПоШапке.СуммаВключаетНДС Тогда
				СтрокаТаблицы.Параметры.СтоимостьВсего     = СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = ?(СтрокаОборудование.Количество > 0,
															  (СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС) / СтрокаОборудование.Количество,
															   СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС);
			Иначе
				СтрокаТаблицы.Параметры.СтоимостьВсего     = СтрокаОборудование.Сумма;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = СтрокаОборудование.СтоимостьЗаЕдиницу;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Параметры.СтоимостьВсего = СтрокаОборудование.Сумма;
		КонецЕсли;

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;
	
	Подвал.Параметры.ГлавныйБухгалтерНаименование = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции

Процедура ПечатьОС14(Команда)
	
	обПечатьОС14().Показать("ОС-14");
	
КонецПроцедуры

Процедура РедактированиеДвижений(Команда)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, Ссылка, ЭтотОбъект);	
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
			И ЗначениеЗаполнено(ДокументОснование)
			И ЕстьПоступлениеНаОсновании(ДокументОснование) Тогда
		Если Вопрос("На основании этого документа уже есть поступление ОС. Продолжить?", РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;			//на случай, если ниже будет что-то от других разработчиков
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		ЭтотОбъект.Ответственный 					= ПараметрыСеанса.ТекущийПользователь;
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ПрочаяЗадолженность; //60.4
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ОСвОрганизации; //08.01
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступностьЦФОСотрудника();
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СчетУчетаРасчетовСКонтрагентом,
		СубконтоКт1, ЭлементыФормы.СубконтоКт1,
		СубконтоКт2, ЭлементыФормы.СубконтоКт2,
		СубконтоКт3, ЭлементыФормы.СубконтоКт3);
		
	УстановитьВидимостьСчетовИСубконто()
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Номенклатура Цикл
		Если СокрЛП(СтрокаТЧ.ИнвентарныйНомер) <> "" Тогда;
			Если Номенклатура.НайтиСтроки(Новый Структура("ИнвентарныйНомер", СтрокаТЧ.ИнвентарныйНомер)).Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка! Обранужены задвоения инвентарного номера <" + СтрокаТЧ.ИнвентарныйНомер + ">");
				Отказ = Истина;
			КонецЕсли;				
			Если НомерОССуществует(СтрокаТЧ.ИнвентарныйНомер, СтрокаТЧ.ОсновноеСредство) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка! В строке № " + СтрокаТЧ.НомерСтроки + " инвентарный номер <" + СтрокаТЧ.ИнвентарныйНомер + "> уже существует");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство) Тогда;
			Если Номенклатура.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаТЧ.ОсновноеСредство)).Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка! Обранужены задвоения основного средства <" + СтрокаТЧ.ОсновноеСредство + "> (Код: " + СтрокаТЧ.ОсновноеСредство.Код + ")");
				Отказ = Истина;
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура СкладПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ЦФО = ПолучитьЦФОПоТТ(Элемент.Значение, Дата);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьДоступностьЦФОСотрудника();
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)	
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоКт1, ЭлементыФормы.СубконтоКт1,
	СубконтоКт2, ЭлементыФормы.СубконтоКт2,
	СубконтоКт3, ЭлементыФормы.СубконтоКт3);
	
	УстановитьВидимостьСчетовИСубконто();
	
	Для Ном = 1 по СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоКт"+Ном].Значение) Тогда
			Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Организации Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Организация;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = СтатьяДвиженияДенежныхСредств;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Контрагент;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.МестаХраненияОС Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Склад;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Склад;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Склады Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Склад;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = ЦФО;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.БанковскиеСчета Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Организация.ОсновнойБанковскийСчет;
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица
					И ТипЗнч(Этотобъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ЭлементыФормы["СубконтоКт"+Ном].Значение = Этотобъект.Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СубконтоКт1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт2");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоКт2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н = 1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоКт" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоКт" + н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоКт" + н]) = Тип("СправочникСсылка.Организации") Тогда
			СписокПараметров.Вставить("Организация", ЭтотОбъект["СубконтоКт" + н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеСредствНачалоВыбора(Элемент, СтандартнаяОбработка)

	Перем ФормаВыбора, ОтборПоКонтрагенту;
	
	Если ЭтотОбъект.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ОтборПоКонтрагенту = ФормаВыбора.Отбор.Контрагент;
	ОтборПоКонтрагенту.Установить(ЭтотОбъект.Контрагент);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


Процедура НоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = ЭтотОбъект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементыФормы.Номенклатура.ТекущиеДанные,, "ОсновноеСредство, ЗаводскойНомер, ИнвентарныйНомер");
		ЭлементыФормы.Номенклатура.ТекущаяСтрока = НоваяСтрока;
		ЭлементыФормы.Номенклатура.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НоменклатураПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Номенклатура.Итог("Сумма");
	
КонецПроцедуры

Процедура НоменклатураПослеУдаления(Элемент)
	
	ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Номенклатура.Итог("Сумма");
	
КонецПроцедуры

Процедура НоменклатураНоменклатураПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Номенклатура.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура.ТипОборудования.СчетУчетаПоУмолчанию) Тогда
		ТекДанные.СчетУчетаЗабалансовый = ТекДанные.Номенклатура.ТипОборудования.СчетУчетаПоУмолчанию;
		ТекДанные.СчетУчетаБУ 			= ПланыСчетов.Хозрасчетный.ОСвОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Процедура НоменклатураОсновноеСредствоПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Номенклатура.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено
			И ЗначениеЗаполнено(ТекДанные.ОсновноеСредство) Тогда
		ТекДанные.ИнвентарныйНомер	= ТекДанные.ОсновноеСредство.ИнвентарныйНомер;
		ТекДанные.ЗаводскойНомер	= ТекДанные.ОсновноеСредство.ЗаводскойНомер;
	КонецЕсли;
	
КонецПроцедуры
