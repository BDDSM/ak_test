Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//#Если Клиент Тогда
Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()
	

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип, СПодписью = Ложь) Экспорт
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	Контрагент КАК Покупатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	ОрганизацияПолучатель КАК Получатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|    1 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|	
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	ЗаказПокупателя.Номенклатура.Код КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|    2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|    ID,
	|	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИННПолучателя = СведенияОПолучателе.ИНН;
		ОбластьМакета.Параметры.КПППолучателя = СведенияОПолучателе.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	        Банк = ?(НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ВернутьРасчетныйСчет(СтруктурнаяЕдиница);

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктурнаяЕдиница.ТекстКорреспондента) Тогда
			ТекстКорреспондента = СведенияОПолучателе.НаименованиеДляПечатныхФорм;
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов) Тогда
				ТекстКорреспондента = ТекстКорреспондента + " р/с " + СтруктурнаяЕдиница.НомерСчета
				+ " в " + СтруктурнаяЕдиница.Банк + " " + СтруктурнаяЕдиница.Банк.Город;
			КонецЕсли;	
		Иначе
			ТекстКорреспондента = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;		
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ТекстКорреспондента;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОПокупателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	//Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
	//	ВыводитьКоды = Истина;
	//	Колонка = "Артикул";
	//ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
	//	ВыводитьКоды = Истина;
	//	Колонка = "Код";
	//Иначе
	//	ВыводитьКоды = Ложь;
	//КонецЕсли;
	Колонка = "";
	ВыводитьКоды = Ложь;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если СуммаНДС <> 0 Тогда
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
		ОбластьСуммы.Параметры.ВсегоНДС = "-";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоКОплате
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
	ОбластьКодов = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	СуммаКОплате = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьСуммы.Параметры.ИтогоКОплате = ОбщегоНазначения.ФорматСумм(СуммаКОплате);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		
		Если Шапка.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
			
			// {ОбособленныеПодразделения
			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
			// }ОбособленныеПодразделения
			
			Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.Дата, ПодразделениеОтветственныхЛиц);
			Руководитель = Руководители.РуководительПредставление;
			Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
			
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
			ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
			
			ФЛ = Шапка.Получатель.ИндивидуальныйПредприниматель;
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Предприниматель = СокрЛП(ДанныеФЛ[0].Фамилия) + " " + Лев(СокрЛП(ДанныеФЛ[0].Имя),1) + ". " + Лев(СокрЛП(ДанныеФЛ[0].Отчество),1) + ".";
			Иначе
				Предприниматель = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ФИОПредпринимателя = Предприниматель;
			
		КонецЕсли;
		
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	
	//+++АК SHEP 20160615: выводим подписи руководителя / бухгалтера
	Если СПодписью Тогда
		ВывестиПодписи(ТабДокумент, ОбластьМакета, Руководители);
	КонецЕсли;
	//---АК SHEP 20160615
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	//+++АК SHEP 20160629: выводим печать
	Если СПодписью Тогда
		ВывестиПечать(ТабДокумент);
	КонецЕсли;
	//---АК SHEP 20160629

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

//+++АК SHEP 20160615
Процедура ВывестиПодписи(ТабДокумент, ОбластьМакета, Руководители)
	
	// Руководитель
	НачСтрокаТаблицы = 2; КонСтрокаТаблицы = 3;
	Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
		ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Руководители.Руководитель).Получить();
		Если ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
			//ОбластьМакета.Рисунки.Очистить();
			РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	    	РисунокПодписи.Расположить(ОбластьМакета.Область(НачСтрокаТаблицы, 7, КонСтрокаТаблицы, 10));
			РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
	    	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
	    	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	    	РисунокПодписи.Картинка 	= ПодписьДиректора;
		КонецЕсли;
	КонецЕсли;
	
	// ГлавныйБухгалтер
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
		ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Руководители.ГлавныйБухгалтер).Получить();
		Если ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
			//ОбластьМакета.Рисунки.Очистить();
			РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	    	РисунокПодписи.Расположить(ОбластьМакета.Область(НачСтрокаТаблицы, 24, КонСтрокаТаблицы, 27));
			РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
	    	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
	    	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	    	РисунокПодписи.Картинка 	= ПодписьДиректора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПечать(ТабДокумент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПечатьОрганизации = Организация.Печать.Получить();
		Если ТипЗнч(ПечатьОрганизации) = Тип("Картинка") Тогда
			//ОбластьМакета.Рисунки.Очистить();
			НачСтрокаТаблицы = ТабДокумент.ВысотаТаблицы - 10; КонСтрокаТаблицы = ТабДокумент.ВысотаТаблицы;
			РисунокПодписи = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	    	РисунокПодписи.Расположить(ТабДокумент.Область(НачСтрокаТаблицы, 6, КонСтрокаТаблицы, 8));
			РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
	    	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
	    	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	    	РисунокПодписи.Картинка 	= ПечатьОрганизации;
			РисунокПодписи.Высота = 50;
			РисунокПодписи.Ширина = 50;
			//РисунокПодписи.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Функция СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки)
	
	Если НЕ ЗначениеЗаполнено(ШаблонРассылки) Тогда
		ТекстПисьма =
			"Добрый день.
			|По результатам  предоставленной вами инвентаризации нашей этикетки/упаковки, на вашем складе выявлены расхождения.
			|
			|В связи с чем, нами выставлен счёт на погашение данного расхождения (во вложении).";
		Возврат ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;
	
	ТекстПисьма = ШаблонРассылки.ОписаниеHTML;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор", Руководители.Руководитель);
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование", Контрагент.НаименованиеПолное);
	
	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%" + ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстПисьма);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ХранилищеДополнительнойИнформации.Ссылка,
			|	ХранилищеДополнительнойИнформации.ИмяФайла
			|ИЗ
			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			|ГДЕ
			|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла");
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		
		//ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
		//
		//ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//
		//ЗначениеКартинка.Записать(ИмяВременногоФайла);
		
		//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
		
	КонецЦикла;

	Возврат ТипТекстаПочтовогоСообщения.HTML;
	
КонецФункции // СформироватьТекстПисьма()

#Если ТонкийКлиент Тогда
&НаСервере
#КонецЕсли
Процедура ОтправитьПисьмо(Кому = "", Тема = "", ШаблонРассылки = "", АдресЭПОтправителя = "") Экспорт
	
	Если ПустаяСтрока(Кому) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК АдресКонтрагента
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Вид = &Вид");
		Запрос.УстановитьПараметр("Объект", Контрагент);
		Запрос.УстановитьПараметр("Вид", ?(ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования), Контрагент.ВидКИ_ДляИнформирования, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаЗапроса.Следующий();
			
			Кому = ВыборкаЗапроса.АдресКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Кому) Тогда
		Сообщить("Адрес для отправки пуст!");
		Возврат;
	КонецЕсли;
	
	МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Кому, ";");
	Если МассивАдресов.Количество() = 0 Тогда
		Сообщить("У контрагента не указаны эл. адреса для отправки!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		Тема = "Расхождения по инвентаризации этикетки/упаковки";
	КонецЕсли;
	
	ТабДокумент = ПечатьСчетаЗаказа("Счет", Истина);
	Если ТабДокумент = Ложь Тогда Возврат; КонецЕсли;
	
	ТекстПисьма = "";
	ТипТекста = СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки);
	
	//УчетнаяЗапись = ОтКого;
	
	Почта = Новый ИнтернетПочта;
	//АдресЭПОтправителя = "upakovka@vkusvill.ru";
	УчёткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	//АдресЭПОтправителя = УчёткаДляНастройки.Логин; //!!!
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	//Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Профиль.Пароль = "Asdqaz123";
	Профиль.ПарольSMTP = "Asdqaz123";
	Профиль.ПользовательIMAP = АдресЭПОтправителя;
	Профиль.АдресСервераIMAP = "imap.yandex.ru";
	Профиль.ПарольIMAP = "Asdqaz123";
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	//Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	Для Каждого АдресДляОтправки Из МассивАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресДляОтправки);
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма, ТипТекста);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".pdf");
	ТабДокумент.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.PDF);
	Письмо.Вложения.Добавить(ИмяВремФайла, "Счёт");
	//УдалитьФайлы(ИмяВремФайла);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".MXL");
	ТабДокумент.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.MXL);
	Письмо.Вложения.Добавить(ИмяВремФайла, "Счёт");
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();

КонецПроцедуры	
//---АК SHEP 20160615

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Счет" Тогда
		
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СчетСПодписями" Тогда
		
		ТабДокумент = ПечатьСчетаЗаказа("Счет", Истина);
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

//#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Счет,СчетСПодписями", "Счет на оплату", "Счет на оплату (с подписями и печатью)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура СкопироватьТовары(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.НомерСтроки,
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка";
	ВозвратнаяТара.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьУслуги(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	1 КАК Порядок
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки,
	|	РеализацияТоваровУслугАгентскиеУслуги.Содержание,
	|	РеализацияТоваровУслугАгентскиеУслуги.Количество,
	|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
	|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
	|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());

	Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			// Выполнить общие действия для всех документов при изменении Суммы.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполним табличные части
		СкопироватьТовары(Основание);
		СкопироватьВозвратнуюТару(Основание);
		СкопироватьУслуги(Основание);
						
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
	//	
	//	// Заполним реквизиты шапки по документу основанию.
	//	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	//	
	//	// Заполним табличные части
	//	НоваяСтрока = Услуги.Добавить();
	//	//НоваяСтрока.Количество = 1;
	//	НоваяСтрока.Номенклатура = Основание.УслугаПоВознаграждению;
	//	НоваяСтрока.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
	//	НоваяСтрока.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
	//	
	//	СуммаВознаграждения      = Основание.Товары.Итог("СуммаВознаграждения");
	//	НоваяСтрока.Сумма        = СуммаВознаграждения;
	//	НоваяСтрока.Цена         = СуммаВознаграждения;
	//	
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
	//	// Заполнение шапки
	//	ВалютаДокумента = Основание.ВалютаДокумента;
	//	ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	//	Комментарий = Основание.Комментарий;
	//	Контрагент = Основание.Контрагент;
	//	КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
	//	КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
	//	Организация = Основание.Организация;
	//	Ответственный = Основание.Ответственный;
	//	СуммаВключаетНДС = Основание.СуммаВключаетНДС;
	//	СуммаДокумента = Основание.СуммаДокумента;
	//	ТипЦен = Основание.ТипЦен;
	//	УчитыватьНДС = Основание.УчитыватьНДС;
	//	
	//	
	//	Запрос = Новый Запрос();
	//	Запрос.УстановитьПараметр("Ссылка", Основание.Ссылка);
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
	//	|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС,
	//	|	АктОбОказанииПроизводственныхУслугУслуги.Цена,
	//	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.Количество) КАК Количество,
	//	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.Сумма) КАК Сумма,
	//	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС) КАК СуммаНДС
	//	|ИЗ
	//	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
	//	|ГДЕ
	//	|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка = &Ссылка
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
	//	|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС,
	//	|	АктОбОказанииПроизводственныхУслугУслуги.Цена";
	//	ВыборкаУслуг = Запрос.Выполнить().Выбрать();
	//	
	//	Пока ВыборкаУслуг.Следующий() Цикл
	//		
	//		НоваяСтрока = Услуги.Добавить();
	//		НоваяСтрока.Количество = ВыборкаУслуг.Количество;
	//		НоваяСтрока.Номенклатура = ВыборкаУслуг.Номенклатура;
	//		НоваяСтрока.СтавкаНДС = ВыборкаУслуг.СтавкаНДС;
	//		НоваяСтрока.Сумма = ВыборкаУслуг.Сумма;
	//		НоваяСтрока.СуммаНДС = ВыборкаУслуг.СуммаНДС;
	//		НоваяСтрока.Цена = ВыборкаУслуг.Цена;
	//	КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
