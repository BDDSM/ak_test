
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++ AK BARA ИП-00015673.000.00000001
	Попытка
		//Контрагент = ВладелецФормы.Объект.Ссылка.Склад.Контрагент;
		Контрагент = Параметры.МассивСкладов[0].Контрагент;
	Исключение
		
	КонецПопытки;

	
	АдресОтправки = "upakovka@vkusvill.ru";	
	//--- AK BARA ИП-00015673.000.00000001
	
	
	АдресРасхождений = "";
	Если Параметры.Свойство("АдресРасхождений", АдресРасхождений) Тогда
		Расхождения.Загрузить(ПолучитьИзВременногоХранилища(АдресРасхождений));
	Иначе
		Элементы.Расхождения.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Склад", Склад) Тогда
		Элементы.Склад.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Склад.СписокВыбора.ЗагрузитьЗначения(Параметры.МассивСкладов);
		Склад = Параметры.МассивСкладов[0];
	КонецЕсли;
	СкладПриИзмененииНаСервере();

	Если Параметры.Свойство("Организация", Организация) Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
	Иначе
		Организация = Справочники.Организации.НайтиПоНаименованию("Вкусвилл");
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю) Тогда
		Элементы.ФормаОтправитьПисьмо.Заголовок = "Создать счёт на оплату и отправить письмо";
	Иначе
		Элементы.СоздатьИОткрытьСчёт.Видимость = Ложь;
	КонецЕсли;
	
	Параметры.Свойство("ДокументОснование", ДокументОснование);
	
	ШаблонРассылки = ПолучитьШаблонРассылкиНаСервере(Организация);
	Если ЗначениеЗаполнено(ШаблонРассылки) Тогда
		Тема = ШаблонРассылки.Тема;
	Иначе
		Тема = "Расхождения по инвентаризации этикетки/упаковки";
	КонецЕсли;
	    Тема = Тема + " " + Контрагент.НаименованиеПолное;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо(Команда)
	
	//+++ AK BARA ИП-00015673.000.00000001
	//СоздатьСчетНаОплатуПокупателю(Истина);
	СоздатьРТУСервер(Истина,ВладелецФормы.Объект.Ссылка);
	//Если ЗначениеЗаполнено(СчетНаОплатуПокупателю) Тогда
	//	Попытка
	//		ВладелецФормы.Объект.ТребуетсяВыставитьСчётНаОплату = Ложь;
	//	Исключение КонецПопытки; 
	//КонецЕсли;
	Закрыть(Ложь);
	//--- AK BARA ИП-00015673.000.00000001

КонецПроцедуры


&НаКлиенте
Процедура СоздатьИОткрытьСчёт(Команда)
	
	СоздатьСчетНаОплатуПокупателю(Ложь);
	Если ЗначениеЗаполнено(СчетНаОплатуПокупателю) Тогда
		ВладелецФормы.Объект.ТребуетсяВыставитьСчётНаОплату = Ложь;
		ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", Новый Структура("Ключ", СчетНаОплатуПокупателю),, УникальныйИдентификатор);
	КонецЕсли;
	Закрыть(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦеныПоставщиков(ТаблицаТоваров, Контрагент, Период)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			&Период,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					ТаблицаТоваров.Номенклатура
		|				ИЗ
		|					ТаблицаТоваров)) КАК ЦеныПоставщиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоваров");
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Период", Период);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СоздатьСчетНаОплатуПокупателю(ОтправитьПисьмо = Истина)
	
	Если НЕ ЗначениеЗаполнено(СчетНаОплатуПокупателю) Тогда
		МассивСтрок = Расхождения.НайтиСтроки(Новый Структура("Склад", Склад));
		Если МассивСтрок.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		
		ДокСчетНаОплатуОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		ДокСчетНаОплатуОбъект.Дата = ТекущаяДата();
		ДокСчетНаОплатуОбъект.УстановитьНовыйНомер();
		ДокСчетНаОплатуОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокСчетНаОплатуОбъект.Организация = Организация;
		ДокСчетНаОплатуОбъект.Склад = Склад;
		ДокСчетНаОплатуОбъект.Контрагент = Контрагент;
		ДокСчетНаОплатуОбъект.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		ВалютаДокумента = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
		ДокСчетНаОплатуОбъект.ВалютаДокумента = ?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить());
		
		СтруктурнаяЕдиница = "";
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СтруктурнаяЕдиница, Организация, ДокСчетНаОплатуОбъект.ВалютаДокумента);
		ДокСчетНаОплатуОбъект.ОрганизацияПолучатель = ?(ЗначениеЗаполнено(СтруктурнаяЕдиница), СтруктурнаяЕдиница.Владелец, Организация);
		ДокСчетНаОплатуОбъект.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		ДокСчетНаОплатуОбъект.ДокументОснование = ДокументОснование;
		
		ДокСчетНаОплатуОбъект.УчитыватьНДС = Истина;
		ДокСчетНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		ТаблицаЦен = ПолучитьЦеныПоставщиков(РеквизитФормыВЗначение("Расхождения"), Контрагент, ДокСчетНаОплатуОбъект.Дата);
		
		Для Каждого СтрокаРазличия Из МассивСтрок Цикл
			Если НЕ СтрокаРазличия.Отправлять Тогда Продолжить; КонецЕсли;
			НоваяСтрокаТЧ = ДокСчетНаОплатуОбъект.Товары.Добавить();
			НоваяСтрокаТЧ.Номенклатура = СтрокаРазличия.Номенклатура;
			НоваяСтрокаТЧ.Количество = СтрокаРазличия.Разница;
			СтрокаТЗнЦен = ТаблицаЦен.Найти(СтрокаРазличия.Номенклатура, "Номенклатура");
			Если СтрокаТЗнЦен <> Неопределено Тогда
				НоваяСтрокаТЧ.Цена = СтрокаТЗнЦен.Цена;
			КонецЕсли;
			НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена;
			НоваяСтрокаТЧ.СтавкаНДС = НоваяСтрокаТЧ.Номенклатура.СтавкаНДС;
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТЧ, ДокСчетНаОплатуОбъект);
		КонецЦикла;
		
		Если ДокСчетНаОплатуОбъект.Товары.Количество() = 0 Тогда
			Сообщить("Не выбрана ни одна строка для отправки!");
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ДокСчетНаОплатуОбъект.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
	Иначе
		ДокСчетНаОплатуОбъект = СчетНаОплатуПокупателю.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОтправитьПисьмо Тогда
		ДокСчетНаОплатуОбъект.ОтправитьПисьмо(Кому, Тема, ШаблонРассылки,ОТКого);
	КонецЕсли;
	
	СчетНаОплатуПокупателю = ДокСчетНаОплатуОбъект.Ссылка;
	
КонецФункции

//+++ AK BARA ИП-00015673.000.00000001
&НаСервере
Функция СоздатьРТУСервер(ОтправитьПисьмо = Истина,ИнвентаризацияСсылка)
	 //Проверим есть ли созданный документ РТУ

	 Наценка = Константы.НаценкаНаРеализациюУпаковки.Получить();
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РеализацияТоваровУслуг.Ссылка
	 |ИЗ
	 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	 |ГДЕ
	 |	РеализацияТоваровУслуг.ДокументОснование = &ДокументОснование";
	 
	 Запрос.УстановитьПараметр("ДокументОснование", ИнвентаризацияСсылка);
	 
	 Результат = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = Результат.Выбрать();
	 
	 Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		 РТУ = ВыборкаДетальныеЗаписи.Ссылка;
		 Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		 Если ОтправитьПисьмо Тогда
			 Док.ОтправитьПисьмо(Кому, Тема, ШаблонРассылки,АдресОтправки);
		 КонецЕсли;
		 Возврат РТУ;
	 КонецЕсли;
	 //
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияСкладТовары.Номенклатура,
	|	ИнвентаризацияСкладТовары.Характеристика,
	|	ИнвентаризацияСкладТовары.ЕдиницаИзмерения,
	|	ИнвентаризацияСкладТовары.Количество,
	|	ИнвентаризацияСкладТовары.Склад
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
	|ГДЕ
	|	ИнвентаризацияСкладТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ111
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				вт.Номенклатура
	|			ИЗ
	|				вт КАК вт)
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата < &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Количество <> 0
	|			ТОГДА (ПоступлениеТоваровУслугТовары.Сумма) / ПоступлениеТоваровУслугТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаСНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ111 КАК ВТ111
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВТ111.Номенклатура
	|			И ПоступлениеТоваровУслугТовары.Ссылка.Дата = ВТ111.Дата
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка",ИнвентаризацияСсылка);
	Запрос.УстановитьПараметр("Дата",ИнвентаризацияСсылка.Дата);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	СтруктураНастроек 		= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиУпаковки, ТекущаяДата());
	
	Если НЕ ЗначениеЗаполнено(РТУ) Тогда
		 //+++ АК BARA 09.11.2017 15637
		МассивСтрок = Расхождения.НайтиСтроки(Новый Структура("Склад,Отправлять", Склад,Истина));	
		//--- АК BARA 09.11.2017 15637

		Если МассивСтрок.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		
		Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Док.Организация=Организация;   // Тип:Организации
		Док.Дата = ТекущаяДата();
		Док.ДатаИсходящегоДокумента = Док.Дата;
		Док.УстановитьНовыйНомер();
		Док.НомерИсходящегоДокумента = Док.Номер;
		Если ЗначениеЗаполнено(Склад.Контрагент) Тогда 
			Док.Контрагент = Склад.Контрагент;
		Иначе
			Док.Контрагент=Справочники.Контрагенты.НайтиПоКоду("000000561");   // Тип:Контрагенты
		КонецЕсли;
		СтруктурнаяЕдиница = СтруктураНастроек.СтруктурнаяЕдиница;
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СтруктурнаяЕдиница, Организация, Справочники.Валюты.НайтиПоКоду("643"));
		//ДокСчетНаОплатуОбъект.ОрганизацияПолучатель = ?(ЗначениеЗаполнено(СтруктурнаяЕдиница), СтруктурнаяЕдиница.Владелец, Организация);		
		Док.ДокументОснование = ИнвентаризацияСсылка;
		Док.СтруктурнаяЕдиница=СтруктурнаяЕдиница;   // Тип:Структурные единицы
		Док.Склад=Склад;   // Тип:Склады (места хранения)
		Док.ВариантРасчетаНДС=Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		Док.ДокументыПолучены=Ложь;   
		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
		
		
		Для Каждого СтрокаРазличия Из МассивСтрок Цикл
			
			НовСтр=Док.Товары.Добавить();
			НовСтр.Номенклатура=СтрокаРазличия.Номенклатура;   // Тип:Номенклатура
			//НовСтр.ЕдиницаИзмерения=кг;   // Тип:Единица измерения
			НовСтр.Коэффициент=1;   // Тип:Число
			НовСтр.Количество= СтрокаРазличия.Разница;   // Тип:Число
			СтрокаТЗнЦен = ТаблицаЦен.Найти(СтрокаРазличия.Номенклатура, "Номенклатура");
			Если СтрокаТЗнЦен <> Неопределено Тогда
				НовСтр.Цена = СтрокаТЗнЦен.ЦенаСНДС * (100+Наценка)/100;
			КонецЕсли;
			
			
			НовСтр.Сумма=НовСтр.Количество * НовСтр.Цена;   // Тип:Число
			НовСтр.СтавкаНДС=НовСтр.Номенклатура.СтавкаНДС;   // Тип:Ставки НДС
			НовСтр.СчетУчета= ПланыСчетов.Финансовый.МатералыДляВыпуска;   // Тип:Число
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр, Док);
			
			НовСтр.СтатьяТовародвижения=Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
			
		КонецЦикла;
		
		Если Док.Товары.Количество() = 0 Тогда
			Сообщить("Не выбрана ни одна строка для отправки!");
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Док.Записать();	
			РТУ = Док.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Если ОтправитьПисьмо Тогда
			Док.ОтправитьПисьмо(Кому, Тема, ШаблонРассылки,ОтКого);
		КонецЕсли;
		
	КонецЕсли;
КонецФункции
//--- AK BARA ИП-00015673.000.00000001


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Кому = КонтрагентПриИзмененииНаСервере(Контрагент,АдресОтправки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентПриИзмененииНаСервере(Контрагент,АдресОтправки)
	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	КонтактнаяИнформация.Представление КАК АдресКонтрагента
	//	|ИЗ
	//	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|ГДЕ
	//	|	КонтактнаяИнформация.Объект = &Объект
	//	|	И КонтактнаяИнформация.Вид = &Вид");
	//Запрос.УстановитьПараметр("Объект", Контрагент);
	//Запрос.УстановитьПараметр("Вид", ?(ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования), Контрагент.ВидКИ_ДляИнформирования, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами));
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	//
	//ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	//ВыборкаЗапроса.Следующий();
	//Возврат ВыборкаЗапроса.АдресКонтрагента;

	////////////////////////
	//+++ AK BARA ИП-00015673.000.00000005
	
	Кому = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	0 КАК порядок
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	1
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &ОсновнойМенеджерПокупателя
	|	И КонтактнаяИнформация.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	порядок";
	
	Запрос.УстановитьПараметр("Вид",  ?(ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования), Контрагент.ВидКИ_ДляИнформирования, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами));
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("ОсновнойМенеджерПокупателя", Контрагент.ОсновнойМенеджерПокупателя);	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл 
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Представление) Тогда 
			Если ЗначениеЗаполнено(Кому) Тогда 
				Кому = Кому+";"+ВыборкаДетальныеЗаписи.Представление;
			Иначе 
				Кому = ВыборкаДетальныеЗаписи.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Кому) Тогда 
		Кому = Кому+";"+АдресОтправки;
	КонецЕсли;
	
	Возврат  Кому ;
	//--- AK BARA ИП-00015673.000.00000005
	
	///
          
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ШаблонРассылки = ПолучитьШаблонРассылкиНаСервере(Организация);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШаблонРассылкиНаСервере(Организация)
	Возврат Организация["ШаблонРассылкиРасхожденийЭтикеткиУпаковки"];
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Элементы.Расхождения.ОтборСтрок = Новый ФиксированнаяСтруктура("Склад", Склад);
	Контрагент = Склад.Контрагент;
	Кому = КонтрагентПриИзмененииНаСервере(Контрагент,АдресОтправки);
КонецПроцедуры

//+++ AK BARA ИП-00015673.000.00000001
&НаКлиенте
Процедура СоздатьРТУ(Команда)
	
	СоздатьРТУСервер(Ложь,ВладелецФормы.Объект.Ссылка);
	Если ЗначениеЗаполнено(РТУ) Тогда
		//ВладелецФормы.Объект.ТребуетсяВыставитьСчётНаОплату = Ложь;  //+++ AK BARA ИП-00015673.000.00000001
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", Новый Структура("Ключ", РТУ),, УникальныйИдентификатор);
	КонецЕсли;
	//Закрыть(Ложь); 

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо2(Команда)
	
	ОтправитьЭлектронноеПисьмо(Кому, Тема, ШаблонРассылки,АдресОтправки,ПроизвольныйТекст);
		
	Закрыть(Ложь);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки)
	
	Если НЕ ЗначениеЗаполнено(ШаблонРассылки) Тогда
		ТекстПисьма =
			"Добрый день.
			|По результатам  предоставленной вами инвентаризации нашей этикетки/упаковки, на вашем складе выявлены расхождения.
			|
			|В связи с чем, нами выставлен счёт на погашение данного расхождения (во вложении).";
		Возврат ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;
	
	ТекстПисьма = ШаблонРассылки.ОписаниеHTML;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор", Руководители.Руководитель);
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование", Контрагент.НаименованиеПолное);
	
	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%" + ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
	ТаблицаТовараСтр = "";
	Для каждого Стр Из ЭтаФорма.Расхождения Цикл
		
		ТаблицаТовараСтр = ТаблицаТовараСтр+ "<tr><td>"+ СокрЛП(Стр.Номенклатура)+"</td><td>"+Стр.Количество+"</td><td>"+Стр.УчетноеКоличество+"</td><td>"+Стр.Разница+"</td></tr> "
	КонецЦикла;
	ТекстПисьма = СтрЗаменить(ТекстПисьма,"%СтрокаТаблицы",ТаблицаТовараСтр);
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстПисьма);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ХранилищеДополнительнойИнформации.Ссылка,
			|	ХранилищеДополнительнойИнформации.ИмяФайла
			|ИЗ
			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			|ГДЕ
			|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла");
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		//
		//Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		//Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + ?(ЗначениеЗаполнено(Расширение),".","") + Расширение, Истина);
		//Если Файлы.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		КопироватьФайл(ТекКартинкаНТМЛ.Источник, ИмяВременногоФайла);

		
		
		//ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
		//
		//ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//
		//ЗначениеКартинка.Записать(ИмяВременногоФайла);
		
		//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
		
	КонецЦикла;
		//ТекстHTML.УстановитьHTML(ТекстПисьма,Новый Структура("pi",ИмяВременногоФайла));

	Возврат ТипТекстаПочтовогоСообщения.HTML;
	
КонецФункции // СформироватьТекстПисьма()

 &НаСервере
Процедура ОтправитьЭлектронноеПисьмо(Кому = "", Тема = "", ШаблонРассылки = "", АдресЭПОтправителя = "",ПроизвольныйТекст) Экспорт
	
	Если ПустаяСтрока(Кому) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК АдресКонтрагента
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Вид = &Вид");
		Запрос.УстановитьПараметр("Объект", Контрагент);
		Запрос.УстановитьПараметр("Вид", ?(ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования), Контрагент.ВидКИ_ДляИнформирования, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаЗапроса.Следующий();
			
			Кому = ВыборкаЗапроса.АдресКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Кому) Тогда
		Сообщить("Адрес для отправки пуст!");
		Возврат;
	КонецЕсли;
	
	МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Кому, ";");
	Если МассивАдресов.Количество() = 0 Тогда
		Сообщить("У контрагента не указаны эл. адреса для отправки!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		Тема = "Расхождения по инвентаризации этикетки/упаковки";
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекстHTML) Тогда 
	//	ТекстПисьма = ТекстHTML;
	//	ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	//Иначе 
		ТекстПисьма = "";
		ТипТекста = СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки);
		//ТекстПисьма = СтрЗаменить(ТекстПисьма,"<FONT face=Arial>Согласно предоставленным","<FONT contenteditable=""true"" face=Arial>Согласно предоставленным");
	//КонецЕсли;
	ТекстПисьма = СтрЗаменить(ТекстПисьма,"%ПроизвольныйТекст",ПроизвольныйТекст);
	
	
	Почта = Новый ИнтернетПочта;   
	
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);

	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
	Письмо.Отправитель.Адрес = АдресОтправки;
	Для Каждого АдресДляОтправки Из МассивАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресДляОтправки);
	КонецЦикла;	

	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма, ТипТекста);
	Попытка
		Почта.Послать(Письмо);
		Сообщить("Письмо отправлено.");
	Исключение
		Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
	КонецПопытки;
	Почта.Отключиться();

КонецПроцедуры	


&НаКлиенте
Процедура Команда1(Команда)
	
	Команда1сер();
	ОбновитьОтображениеДанных();
	
	//ОтветJS = Элементы.ТекстHTML.Документ.parentWindow.eval("document.getElementById('#edit-content').innerHtml");
	
КонецПроцедуры

&НаСервере
Процедура Команда1сер()
	
	ТекстПисьма = "";
	ТипПисьма = СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки);
	ТекстПисьма = СтрЗаменить(ТекстПисьма,"<FONT face=Arial>Согласно предоставленным","<FONT contenteditable=""true"" id=""edit-content"" face=Arial>Согласно предоставленным");
	
	ТекстHTML = ТекстПисьма;
	// ОткрытьФорму("Обработка.АК_РедакторHTML.Форма.Форма",П);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	//ОтветJS = Элементы.ТекстHTML.Документ.parentWindow.eval("document.getElementById('#edit-content').innerHtml");
	
КонецПроцедуры

//--- AK BARA ИП-00015673.000.00000001
