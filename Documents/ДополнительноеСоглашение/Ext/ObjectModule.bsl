
Перем мВалютаРегламентированногоУчета Экспорт;


Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительноеСоглашение.Ссылка,
	|	ДополнительноеСоглашение.Дата,
	|	ДополнительноеСоглашение.Организация,
	|	ДополнительноеСоглашение.Контрагент,
	|	ДополнительноеСоглашение.ДоговорКонтрагента,
	|	ДополнительноеСоглашение.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДополнительноеСоглашение.ДатаЗаключенияДоговора,
	|	ДополнительноеСоглашение.ДатаОкончанияДоговора,
	|	ДополнительноеСоглашение.ДокументОснование,
	|	ДополнительноеСоглашение.УчитыватьЗалог,
	|	ДополнительноеСоглашение.СпособРасчетаЗалога,
	|	ДополнительноеСоглашение.СуммаЗалогаБезналичные,
	|	ДополнительноеСоглашение.СуммаЗалогаНаличные,
	//+++АК sils 23.10.2018 ИП-00020193
	|	ДополнительноеСоглашение.СуммаЗалогаМСФО,
	//---АК
	|	ДополнительноеСоглашение.ВалютаСпособаНачисления КАК Валюта,
	|	ДополнительноеСоглашение.Валюта2СпособаНачисления КАК Валюта2,
	|	ДополнительноеСоглашение.Курс,
	|	ДополнительноеСоглашение.Кратность,
	|	ДополнительноеСоглашение.СпособРасчета,
	|	ДополнительноеСоглашение.Коэффициент,
	|	ДополнительноеСоглашение.НижняяГраница,
	|	ДополнительноеСоглашение.ВерхняяГраница,
	|	ДополнительноеСоглашение.СтавкаНДСЗалогаБезналичные,
	|	ДополнительноеСоглашение.СтавкаНДСЗалогаНаличные,
	|	ДополнительноеСоглашение.УсловиеИспользованияДепозита
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ОбъектАренды, ДоговорКонтрагента, ДатаЗаключенияДоговора, ДатаОкончанияДоговора");
	СтруктураОбязательныхПолей.Вставить("ВалютаСпособаНачисления");
	СтруктураОбязательныхПолей.Вставить("СпособРасчета");
	Если СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		СтруктураОбязательныхПолей.Вставить("Курс");
		СтруктураОбязательныхПолей.Вставить("Кратность");			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		СтруктураОбязательныхПолей.Вставить("Коэффициент");
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
		СтруктураОбязательныхПолей.Вставить("Валюта2СпособаНачисления");
	КонецЕсли;
	//+++ AK suvv 03.06.2018 ИП-00018425
	Если Дата >= Дата(2018,06,01) Тогда
		СтруктураОбязательныхПолей.Вставить("РазмерИндексацииПриПерезаключенииДоговора");
		СтруктураОбязательныхПолей.Вставить("Превышение");
		//СтруктураОбязательныхПолей.Вставить("АренднаяСтавка");
	КонецЕсли;
	//--- AK suvv
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ДатаЗаключенияДоговора>ДатаОкончанияДоговора Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата заключения договора превышает дату окончания действия договора",Отказ,Заголовок);
	КонецЕсли;
	
	Если ДатаЗаключенияДоговора>ДатаОкончанияДоговора Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата заключения договора превышает дату окончания действия договора",Отказ,Заголовок);
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный 
		И ЗначениеЗаполнено(ВерхняяГраница)
		И ВерхняяГраница < НижняяГраница Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нижняя граница курса валюты не может превышать верхнюю границу", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

//Процедура предназначена для проверки статуса объекта аренды (объект должен быть свободным в течение
//всего срока аренды)
Процедура ПроверитьСтатусыОбъектовАренды(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//
	//// Проверим, что нет повторяющихся пар объект аренды и услуга     
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга КАК Услуга,
	//|	СУММА(1) КАК Количество
	//|ИЗ
	//|	Документ.ДополнительноеСоглашение." + ИмяТабличнойЧасти + " КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	//|ГДЕ
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды,
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Количество > 1 Тогда
	//		СтрокаСообщения = "Для объекта аренды """ + Выборка.ОбъектАренды + """ с услугой """ + Выборка.Услуга + """ имеются повторяющиеся строки";
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	//	КонецЕсли;   		
	//КонецЦикла;
	//
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	       
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.НеКонтролироватьЗанятость КАК НеКонтролироватьЗанятость,
	//|	СтатусыОбъектовАрендыСрезПоследних.Услуга КАК Услуга,
	//|	СтатусыОбъектовАрендыСрезПоследних.Статус,
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.НомерСтроки,
	//|	СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды КАК ДатаНачала,
	//|	СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды КАК ДатаОкончания,
	//|	СтатусыОбъектовАрендыСрезПоследних.ЗаключениеДоговора
	//|ИЗ
	//|	Документ.ДополнительноеСоглашение." + ИмяТабличнойЧасти + " КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(&МоментВремени, (НЕ ЗаключениеДоговора = &ЗаключениеДоговора)) КАК СтатусыОбъектовАрендыСрезПоследних
	//|		ПО ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды = СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды
	//|			И (СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора)
	//|			И (СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|				ИЛИ СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора)
	//|			И (ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга = СтатусыОбъектовАрендыСрезПоследних.Услуга
	//|				ИЛИ СтатусыОбъектовАрендыСрезПоследних.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	//|ГДЕ
	//|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(Выборка.НомерСтроки) + """ табличной части """ + ИмяТабличнойЧасти + """: ";	
	//	Если ЗначениеЗаполнено(Выборка.Услуга) Тогда // Объект в аренде
	//		Если Не Выборка.НеКонтролироватьЗанятость Тогда
	//			СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Услуга """ + Выборка.Услуга + """ по объекту """ + Выборка.ОбъектАренды.Наименование + 
	//			""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
	//			" по " + Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + ".
	//			|Заключение договора невозможно";
	//			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	//		КонецЕсли;
	//	Иначе // У объекта другой статус
	//		СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Объект """ + Выборка.ОбъектАренды.Наименование + 
	//		""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
	//		" по "+ Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + "
	//		|Для изменения статуса необходимо установить соответстующую дату окончания в документе """ + Выборка.ЗаключениеДоговора + """";
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;    
		
КонецПроцедуры

Процедура ПроверитьПлощадьОбъектовАренды(Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	//
	//// Проверим, что нет повторяющихся пар объект аренды и услуга     
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПостояннаяЧастьАренднойПлаты.НомерСтроки КАК НомерСтроки,
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	//|	ПостояннаяЧастьАренднойПлаты.Количество КАК ПлощадьПоТекущемуДокументу,
	//|	ЕСТЬNULL(Ставки.Площадь, 0) КАК ПлощадьПоДокументам,
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.ЗначениеХарактеристики КАК Площадь
	//|ИЗ
	//|	Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ПостояннаяЧастьАренднойПлаты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(
	//|				&МоментВремени,
	//|				Услуга.УслугаАрендыПомещения
	//|					И ЗаключениеДоговора <> &ЗаключениеДоговора) КАК СтатусыОбъектовАренды
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ставки КАК Ставки
	//|			ПО СтатусыОбъектовАренды.Регистратор = Ставки.Регистратор
	//|				И СтатусыОбъектовАренды.ОбъектАренды = Ставки.ОбъектАренды
	//|				И СтатусыОбъектовАренды.Услуга = Ставки.Услуга
	//|		ПО ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды = СтатусыОбъектовАренды.ОбъектАренды
	//|			И ПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора <= СтатусыОбъектовАренды.ДатаОкончанияАренды
	//|			И ПостояннаяЧастьАренднойПлаты.Ссылка.ДатаОкончанияДоговора >= СтатусыОбъектовАренды.ДатаНачалаАренды
	//|ГДЕ
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	//|	И ПостояннаяЧастьАренднойПлаты.Услуга.УслугаАрендыПомещения
	//|	И (НЕ ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.НеКонтролироватьПлощадь)
	//|ИТОГИ
	//|	МАКСИМУМ(НомерСтроки),
	//|	МАКСИМУМ(ПлощадьПоТекущемуДокументу),
	//|	СУММА(ПлощадьПоДокументам),
	//|	МАКСИМУМ(Площадь)
	//|ПО
	//|	ОбъектАренды";
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока Выборка.Следующий() Цикл
	//	СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(Выборка.НомерСтроки) + """ табличной части ""Постоянная часть арендной платы"": ";	
	//	Если Выборка.Площадь < Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу Тогда
	//		СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Для объекта аренды """ + Выборка.ОбъектАренды + """ сдаваемая площадь с учетом текущего документа
	//		|составляет: " + Формат(Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу, "ЧДЦ=2; ЧРД=.") + " м2, что превышает площадь объекта аренды: " + Формат(Выборка.Площадь, "ЧДЦ=2; ЧРД=.") + " м2";
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;   
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок)
    
   	ПостояннаяЧасть = (ИмяТабличнойЧасти = "ПостояннаяЧастьАренднойПлаты");
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
		
	// Теперь вызовем общую процедуру проверки.
    СтруктураОбязательныхПолей = Новый Структура("Услуга, Количество, СпособНачисления, СтавкаНДС, ФормаОплаты");
  	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//// Проверим что нет услуг которые не заключали
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ЗаключениеДоговора", ДокументОснование);
	//Запрос.УстановитьПараметр("ВАренде", Перечисления.СтатусыОбъектовАренды.ВАренде);
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//Запрос.УстановитьПараметр("ПостояннаяЧасть", ПостояннаяЧасть);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СтатусыОбъектовАрендыСрезПоследних.Услуга,
	//|	СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды
	//|ИЗ
	//|	РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(&МоментВремени, ЗаключениеДоговора = &ЗаключениеДоговора) КАК СтатусыОбъектовАрендыСрезПоследних
	//|ГДЕ
	//|	СтатусыОбъектовАрендыСрезПоследних.Статус = &ВАренде
	//|	И СтатусыОбъектовАрендыСрезПоследних.Услуга.ПостояннаяЧастьОплаты = &ПостояннаяЧасть";
	//Выборка = Запрос.Выполнить().Выбрать();

	//Отбор = Новый Структура("ОбъектАренды, Услуга");
	//Для Каждого Стр Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
	//	Выборка.Сбросить();
	//	Отбор.ОбъектАренды = ОбъектАренды;
	//	Отбор.Услуга = Стр.Услуга;
	//	Если Не Выборка.НайтиСледующий(Отбор) Тогда
	//		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Стр.НомерСтроки) +
	//								   """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
	//								   
	//		СтрокаСообщения = "услуга """ + Стр.Услуга + """ по объекту аренды """ + ОбъектАренды + """ не была заключена договором!";							   
	//		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;
	
	// Проверим корректность заполнения услуг
	Для Каждого СтрокаТЧ Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		Если СтрокаТЧ.Услуга.ПостояннаяЧастьОплаты <> ПостояннаяЧасть Тогда
			СтрокаСообщения = "указанная услуга не соответствует назначению табличной части!";							   
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		//++lobv 150216 проверим заполнение НДФЛ
		Если ПостояннаяЧасть и ЭтотОбъект.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента тогда
			Если СтрокаТЧ.НДФЛ=0 тогда
				СтрокаСообщения = "не указана сумма НДФЛ!";							   
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		//--lobv
	
	КонецЦикла;
	
	ПроверитьСтатусыОбъектовАренды(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ПостояннаяЧасть Тогда
		ПроверитьПлощадьОбъектовАренды(Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДни, ТипАренднойПлаты = Неопределено)
	
		Для Каждого СтрокаДень Из ТЗДни Цикл
			Движение = Движения.ПланируемыеПлатежиПоДоговорамАренды.Добавить();
			Движение.Период = НачалоДня(Дата);
			Движение.Дата = СтрокаДень.Дата;
			Движение.Организация = Организация;
			Движение.Контрагент = Контрагент;
			Движение.Договор = ДоговорКонтрагента;
			Движение.ОбъектАренды = ОбъектАренды;
			Движение.Услуга = Строка.Услуга;
			Движение.Ставка = Строка.Ставка;
			Движение.СпособНачисления = Строка.СпособНачисления;
			Движение.Площадь = Строка.Количество;
			Движение.СтавкаНДС = Строка.СтавкаНДС;
			Движение.ФормаОплаты = Строка.ФормаОплаты;
			Движение.ТипАренднойПлаты = ?(ТипАренднойПлаты = Неопределено, Строка.ТипАренднойПлаты, ТипАренднойПлаты);			
			Движение.Ставка = Строка.Ставка;
			Движение.Сумма = СтрокаДень.Сумма;
			Если Не ((ВалютаСпособаНачисления = мВалютаРегламентированногоУчета)
				И (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)) 
				И НЕ Строка.Валюта = мВалютаРегламентированногоУчета Тогда				
				Движение.СуммаВал = СтрокаДень.СуммаВал;
			КонецЕсли;
			Движение.Валюта = Строка.Валюта;			
			Движение.ЗаключениеДоговора = Ссылка;
			Движение.Документ = Ссылка;
			//+++ AK suvv 14.06.2018 ИП-00018763
			Движение.Аванс = Строка.Аванс;
			//--- AK suvv
			//Движение.Вес = Инд;
			//Инд = Инд + 1;
		КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента)
	
	ТЗНачисления = ЭтотОбъект.ПостояннаяЧастьАренднойПлаты.ВыгрузитьКолонки();
	ТЗНачисления.Колонки.Добавить("ТипАренднойПлаты");
	//+++ AK suvv 14.06.2018 ИП-00018763
	ТЗНачисления.Колонки.Добавить("Аванс");
	//--- AK suvv
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПостояннаяЧастьАренднойПлаты Цикл
		НСтрока = ТЗНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТЧ);
		НСтрока.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
		//+++ AK suvv 14.06.2018 ИП-00018763
		НСтрока.Аванс = Ложь;
		//--- AK suvv
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПеременнаяЧастьАренднойПлаты Цикл
		НСтрока = ТЗНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТЧ);
		НСтрока.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
	КонецЦикла;
	//+++ AK suvv 14.06.2018 ИП-00018763
	//ТЗНачисления.Свернуть("Услуга, СпособНачисления, СтавкаНДС, ФормаОплаты, ТипАренднойПлаты, Валюта", "Количество, Ставка, НДФЛ");
	ТЗНачисления.Свернуть("Услуга, СпособНачисления, СтавкаНДС, ФормаОплаты, ТипАренднойПлаты, Валюта, Аванс", "Количество, Ставка, НДФЛ");
	//--- AK suvv
	
	Инд = 1;
	Для Каждого СтрокаТаблицы Из ТЗНачисления Цикл
		//+++ AK suvv 14.06.2018 ИП-00018763
		Если не СтрокаТаблицы.Аванс Тогда
		//--- AK suvv
		Движение = Движения.УслугиПоДоговорамАренды.Добавить();
		Движение.Период 			= НачалоДня(ЭтотОбъект.Дата);
		Движение.Организация 		= ЭтотОбъект.Организация;
		Движение.Контрагент 		= ЭтотОбъект.Контрагент;
		Движение.Договор 			= ЭтотОбъект.ДоговорКонтрагента;
		Движение.ОбъектАренды 		= ЭтотОбъект.ОбъектАренды;
		Движение.Услуга 			= СтрокаТаблицы.Услуга;
		Движение.Ставка 			= СтрокаТаблицы.Ставка;
		Движение.СпособНачисления 	= СтрокаТаблицы.СпособНачисления;
		Движение.Площадь 			= СтрокаТаблицы.Количество;
		Движение.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
		Движение.ФормаОплаты 		= СтрокаТаблицы.ФормаОплаты;
		Движение.Ставка 			= СтрокаТаблицы.Ставка;
		Движение.Статус 			= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		Движение.ЗаключениеДоговора = ЭтотОбъект.ДокументОснование;
		Движение.ТипАренднойПлаты 	= СтрокаТаблицы.ТипАренднойПлаты;
		Движение.Документ 			= ЭтотОбъект.Ссылка;
		//+++ AK suvv 14.06.2018 ИП-00018763
	    КонецЕсли;
		//--- AK suvv

		пДатаОкончанияДоговора = КонецМесяца(ДобавитьМесяц(ЭтотОбъект.ДатаОкончанияДоговора, 6));
		
		ТЗДни = ПроцедурыНачисления.ПолучитьСуммыАрендыПоДням(НачалоДня(ЭтотОбъект.Дата), пДатаОкончанияДоговора, ЭтотОбъект,
											СтрокаТаблицы.СпособНачисления, СтрокаТаблицы.Количество, СтрокаТаблицы.Ставка, СтрокаТаблицы.Валюта);
		
		СформироватьДвиженияПланируемыхПлатажейПоДням(СтрокаТаблицы, ТЗДни);		
		
		Если ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента Тогда
			ТЗДниНДФЛ = ПроцедурыНачисления.ПолучитьСуммыАрендыПоДням(НачалоДня(ЭтотОбъект.Дата), пДатаОкончанияДоговора, ЭтотОбъект,
												СтрокаТаблицы.СпособНачисления, СтрокаТаблицы.Количество, СтрокаТаблицы.НДФЛ, СтрокаТаблицы.Валюта);
			//+++АК BELN 2017.12.14 ИП-00017028
			//СформироватьДвиженияПланируемыхПлатажейПоДням(СтрокаТаблицы, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ);
			Если СтрокаТаблицы.ТипАренднойПлаты=Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				СформироватьДвиженияПланируемыхПлатажейПоДням(СтрокаТаблицы, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ);
			Иначе	
				СформироватьДвиженияПланируемыхПлатажейПоДням(СтрокаТаблицы, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ);
			КонецЕсли; 
			//---АК BELN 2017.12.14 
		КонецЕсли;
		
	КонецЦикла;
		
	//// Движения по регистру Курсы валют для расчета с арендаторами
	//Запись = Движения.КурсыВалютДляРасчетовПоАренде.Добавить();
	//Запись.Период = СтруктураШапкиДокумента.Дата;
	//ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
	//Если УчитыватьЗалог Тогда
	//	Если (СуммаЗалогаБезналичные > 0)
	//		ИЛИ (СуммаЗалогаНаличные > 0) Тогда
	//		Запись = Движения.ДепозитыПоДоговорамАренды.Добавить();
	//		Запись.Период = СтруктураШапкиДокумента.Дата;
	//		ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
	//		Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)
	//			И (ВалютаСпособаНачисления = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
	//		Иначе
	//			Запись.СуммаЗалогаБезналичныеВал = СуммаЗалогаБезналичные;
	//			Запись.СуммаЗалогаНаличныеВал = СуммаЗалогаНаличные;
	//		КонецЕсли;
	//		пКурс = ПроцедурыНачисления.ПолучитьКурсВалютыПоДокументу(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), Ссылка).Курс;
	//		Запись.СуммаЗалогаБезналичные = СуммаЗалогаБезналичные * пКурс;
	//		Запись.СуммаЗалогаНаличные = СуммаЗалогаНаличные * пКурс;
	//	КонецЕсли;
	//КонецЕсли;
	
	// Движения по регистру Курсы валют для расчета с арендаторами
	Запись = Движения.КурсыВалютДляРасчетовПоАренде.Добавить();
	Запись.Период = СтруктураШапкиДокумента.Дата;
	ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
	Если УчитыватьЗалог Тогда
		Если (СуммаЗалогаБезналичные > 0)
				ИЛИ (СуммаЗалогаНаличные > 0) Тогда
			ТЗДепозиты = Новый ТаблицаЗначений;
			ТЗДепозиты.Колонки.Добавить("Услуга");
			ТЗДепозиты.Колонки.Добавить("ФормаОплаты");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДС");
			ТЗДепозиты.Колонки.Добавить("СпособНачисления");
			ТЗДепозиты.Колонки.Добавить("УчитыватьЗалог");
			ТЗДепозиты.Колонки.Добавить("СпособРасчетаЗалога");
			ТЗДепозиты.Колонки.Добавить("ВалютаДепозита");
			ТЗДепозиты.Колонки.Добавить("ВалютаДепозита2");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДСЗалогаБезналичные");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДСЗалогаНаличные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаБезналичные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаНаличные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаБезналичныеВал");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаНаличныеВал");
			ТЗДепозиты.Колонки.Добавить("Ставка");
			Для Каждого Строка Из ПостояннаяЧастьАренднойПлаты Цикл
				НСтрока = ТЗДепозиты.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, Строка);
				НСтрока.УчитыватьЗалог 				= УчитыватьЗалог;
				НСтрока.СпособРасчетаЗалога 		= СпособРасчетаЗалога;
				НСтрока.ВалютаДепозита 				= ВалютаДепозита;
				НСтрока.ВалютаДепозита2 			= ВалютаДепозита2;
				НСтрока.СтавкаНДСЗалогаБезналичные 	= СтавкаНДСЗалогаБезналичные;
				НСтрока.СтавкаНДСЗалогаНаличные 	= СтавкаНДСЗалогаНаличные;
			КонецЦикла;
			
			пКурс = ПроцедурыНачисления.ПолучитьКурсВалютыДепозитаПоДокументу(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), Ссылка).Курс;
			ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаБезналичные"	, СуммаЗалогаБезналичные * пКурс);
			ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаНаличные"	, СуммаЗалогаНаличные * пКурс);
			Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)
				И (ВалютаСпособаНачисления = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
			Иначе
				ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаБезналичныеВал"	, СуммаЗалогаБезналичные);
				ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаНаличныеВал"		, СуммаЗалогаНаличные);			
			КонецЕсли;			
			
			Для Каждого Строка Из ТЗДепозиты Цикл
				Запись = Движения.ДепозитыПоДоговорамАренды.Добавить();
				Запись.Период = СтруктураШапкиДокумента.Дата;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
				ЗаполнитьЗначенияСвойств(Запись, Строка);
			КонецЦикла;
			//Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)
			//	И (ВалютаСпособаНачисления = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
			//Иначе
			//	Запись.СуммаЗалогаБезналичныеВал = СуммаЗалогаБезналичные;
			//	Запись.СуммаЗалогаНаличныеВал = СуммаЗалогаНаличные;
			//КонецЕсли;
			//пКурс = ПроцедурыНачисления.ПолучитьКурсВалютыПоДокументу(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), Ссылка).Курс;
			//Запись.СуммаЗалогаБезналичные = СуммаЗалогаБезналичные * пКурс;
			//Запись.СуммаЗалогаНаличные = СуммаЗалогаНаличные * пКурс;
		КонецЕсли;
	КонецЕсли;
	
	//
 	Запись = Движения.СтатусыДоговоровАренды.Добавить();
	Запись.Период 				= НачалоДня(ЭтотОбъект.Дата);
	Запись.Договор 				= ЭтотОбъект.ДоговорКонтрагента;
	Запись.ОбъектАренды 		= ЭтотОбъект.ОбъектАренды;
	Запись.Статус 				= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
		Запись.ДатаНачалаАренды = ЭтотОбъект.ДокументОснование.ДатаЗаключенияДоговора;		
	Иначе
		Запись.ДатаНачалаАренды = ЭтотОбъект.ДатаЗаключенияДоговора;		
	КонецЕсли; 
	Запись.ДатаОкончанияАренды 	= ЭтотОбъект.ДатаОкончанияДоговора;
	
	Запись.Документ 			= ЭтотОбъект.Ссылка;
	Запись.ЗаключениеДоговора 	= ЭтотОбъект.ДокументОснование;
    Запись.СрокУведомленияОПерезаключении = ЭтотОбъект.СрокУведомленияОПерезаключении;
	
	//+++ AK suvv 03.06.2018 ИП-00018425
	// движение по регистру сведений "Динамика арендной ставки"	
	НовЗапись = Движения.ДинамикаАренднойСтавки.Добавить();
	НовЗапись.Регистратор = Ссылка;
	НовЗапись.Период = Дата;
	НовЗапись.Контрагент = Контрагент;
	НовЗапись.ДоговорКонтрагента = ДоговорКонтрагента;
	НовЗапись.ОбъектАренды = ОбъектАренды;
	НовЗапись.АренднаяСтавка = АренднаяСтавка;
	НовЗапись.ПеременнаяЧасть = ПеременнаяЧасть;
	НовЗапись.РазмерИндексацииПриПерезаключенииДоговора = РазмерИндексацииПриПерезаключенииДоговора;
	//--- AK suvv
	//+++АК sils 28.10.2018 ИП-00020257
	НовЗапись.РазмерИндексацииМСФО = РазмерИндексацииМСФО;
	//---АК

	//+++АК sils 20.08.2017 ИП-00014584
	Если ЗначениеЗаполнено(ДокументСтимула) и 
		ДокументСтимула.ТипСтимулаАренды <> Перечисления.АК_ТипыЛьготПоАренде.ПустаяСсылка() и
		ЭтотОбъект.Стимул.Количество() > 0 Тогда
		
		ОбщаяСумма = ЭтотОбъект.Стимул.Итог("Сумма");
		//ДатаНачСтимула = ?(ЗначениеЗаполнено(ДокументСтимула.ДатаАкта), ДокументСтимула.ДатаАкта, ДокументСтимула.Дата);
		//+++АК sils 22.08.2018 ИП-00014584.04
		//ДатаНачСтимула = ?(ЗначениеЗаполнено(ДокументСтимула.ДатаЗаключенияДоговора), ДокументСтимула.ДатаЗаключенияДоговора, ДокументСтимула.Дата);
		Если ТипЗнч(ДокументСтимула) = Тип("ДокументСсылка.ЗаключениеДоговораАренды") и ЗначениеЗаполнено(ДокументСтимула) Тогда
			ДатаНачСтимула = ?(ЗначениеЗаполнено(ДокументСтимула.ДатаЗаключенияДоговора), ДокументСтимула.ДатаЗаключенияДоговора, ДокументСтимула.Дата);
		Иначе
			ДатаНачСтимула = ДокументСтимула.Дата;
		КонецЕсли;
		//---АК
		
		Для каждого стр из ЭтотОбъект.Стимул Цикл
			Запись = Движения.СтимулыПоДоговорамАрендыПоМесяцам.Добавить();
			Запись.Период 				= НачалоДня(ЭтотОбъект.Дата);
			Запись.ДопСоглашение 		= ДокументСтимула.Ссылка;
			Запись.ПериодНачисления 	= стр.ПериодНачисления;
			Запись.Сумма 				= стр.Сумма;
			Если НачалоМесяца(стр.ПериодНачисления) = НачалоМесяца(ДатаНачСтимула) и ОбщаяСумма > 0 Тогда
				Запись.СуммаОбщая = ОбщаяСумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//---АК
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим заполнение обязательных полей в шапке документа
	СтруктураШапкиДокумента = СформироватьЗапросПоШапке();
	СтруктураШапкиДокумента.Следующий();
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
		
	// Проверим заполнение табличных частей
	ПроверитьЗаполнениеТабличнойЧасти("ПостояннаяЧастьАренднойПлаты", СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧасти("ПеременнаяЧастьАренднойПлаты", СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента);
	КонецЕсли;
	
	//+++АК sils 20.08.2017 ИП-00014584
	Движения.СтимулыПоДоговорамАрендыПоМесяцам.Записать();
	//---АК
	// Проверка лимитов по аренде
	Движения.СтатусыДоговоровАренды.Записать();
	Движения.КурсыВалютДляРасчетовПоАренде.Записать();
	ПроцедурыНачисления.ПроверитьЛимитыПоАрендеДокументыУчетаДоговоров(ОбъектАренды.СтруктурнаяЕдиница, Дата, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ДокументОснование = Основание;
		
	СтрокаСвойств = "Организация, Контрагент, ОбъектАренды, ДоговорКонтрагента, ДатаЗаключенияДоговора, ДатаОкончанияДоговора";
	СтрокаСвойств = СтрокаСвойств + ", СрокУведомленияОПерезаключении, СрокУведомленияОДосрочномРасторжении, ПериодичностьПредоставленияОтчетаОВыручке, УсловиеИспользованияДепозита";
	СтрокаСвойств = СтрокаСвойств + ", ТипСтимулаАренды, КоличествоДнейСтимулаАренды, СогласиеНаСубаренду, КомментарийКСогласиюНаСубаренду";
	СтрокаСвойств = СтрокаСвойств + ", ТипДоговораАренды, НаименованиеСобственникаОбъектаСубаренды"; //+++АК CISA 2018.09.26 ИП-00019931
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, СтрокаСвойств);
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаОкончанияДоговора) Тогда
		ЗаполнитьТабличныеЧасти();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Сообщить("Необходимо выбрать документ основание!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ПеременнаяЧастьАренднойПлаты.Количество() + ПостояннаяЧастьАренднойПлаты.Количество() > 0 Тогда
		#Если Клиент Тогда
			Если Вопрос("Табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
				ПостояннаяЧастьАренднойПлаты.Очистить();
				ПеременнаяЧастьАренднойПлаты.Очистить();
			Иначе
				Возврат;
			КонецЕсли;
		#Иначе
			ПостояннаяЧастьАренднойПлаты.Очистить();
			ПеременнаяЧастьАренднойПлаты.Очистить();
		#КонецЕсли
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончания"		, ДатаОкончанияДоговора);
	Запрос.УстановитьПараметр("ЗаключениеДоговора"	, ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени"		, Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УслугиПоДоговорамАрендыСрезПоследних.Услуга,
	|	УслугиПоДоговорамАрендыСрезПоследних.ОбъектАренды,
	|	СтатусыДоговоровАрендыСрезПоследних.ДатаНачалаАренды КАК ДатаНачалаСрокаАренды,
	|	ВЫБОР
	|		КОГДА СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды < &ДатаОкончания
	|			ТОГДА СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды
	|		ИНАЧЕ &ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияСрокаАренды,
	|	УслугиПоДоговорамАрендыСрезПоследних.Ставка КАК Ставка,
	|	УслугиПоДоговорамАрендыСрезПоследних.СпособНачисления,
	|	ВЫБОР
	|		КОГДА УслугиПоДоговорамАрендыСрезПоследних.СпособНачисления.ЗаОбъектВЦелом
	|			ТОГДА 1
	|		ИНАЧЕ УслугиПоДоговорамАрендыСрезПоследних.Площадь
	|	КОНЕЦ КАК Количество,
	//|	УслугиПоДоговорамАрендыСрезПоследних.Услуга.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УслугиПоДоговорамАрендыСрезПоследних.СтавкаНДС,
	|	УслугиПоДоговорамАрендыСрезПоследних.ФормаОплаты
	|ИЗ
	|	РегистрСведений.УслугиПоДоговорамАренды.СрезПоследних(
	|			&МоментВремени,
	|			ЗаключениеДоговора = &ЗаключениеДоговора
	|				И Услуга.ПостояннаяЧастьОплаты = &ПостояннаяЧасть) КАК УслугиПоДоговорамАрендыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(&МоментВремени, ЗаключениеДоговора = &ЗаключениеДоговора) КАК СтатусыДоговоровАрендыСрезПоследних
	|		ПО УслугиПоДоговорамАрендыСрезПоследних.Договор = СтатусыДоговоровАрендыСрезПоследних.Договор";
	//АК БЕЛН 23.05.2016++
	Запрос.УстановитьПараметр("Док"	, Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УслугиПоДоговорамАрендыСрезПоследних.Услуга,
	|	УслугиПоДоговорамАрендыСрезПоследних.ОбъектАренды,
	|	УслугиПоДоговорамАрендыСрезПоследних.Ставка КАК Ставка,
	|	УслугиПоДоговорамАрендыСрезПоследних.СпособНачисления,
	|	ВЫБОР
	|		КОГДА УслугиПоДоговорамАрендыСрезПоследних.СпособНачисления.ЗаОбъектВЦелом
	|			ТОГДА 1
	|		ИНАЧЕ УслугиПоДоговорамАрендыСрезПоследних.Площадь
	|	КОНЕЦ КАК Количество,
	|	УслугиПоДоговорамАрендыСрезПоследних.СтавкаНДС,
	|	УслугиПоДоговорамАрендыСрезПоследних.ФормаОплаты,
	|	УслугиПоДоговорамАрендыСрезПоследних.Период,
	|	УслугиПоДоговорамАрендыСрезПоследних.Регистратор,
	|	УслугиПоДоговорамАрендыСрезПоследних.Договор
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.УслугиПоДоговорамАренды.СрезПоследних(
	|			&МоментВремени,
	|			ЗаключениеДоговора = &ЗаключениеДоговора
	|				И Услуга.ПостояннаяЧастьОплаты = &ПостояннаяЧасть
	|				И Регистратор <> &Док) КАК УслугиПоДоговорамАрендыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Услуга,
	|	вт.ОбъектАренды,
	|	МАКСИМУМ(вт.Период) КАК Период
	|ПОМЕСТИТЬ втМаксПериод
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Услуга,
	|	вт.ОбъектАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Услуга,
	|	вт.ОбъектАренды,
	|	вт.Регистратор,
	|	вт.Период
	|ПОМЕСТИТЬ втОтборПоМаксПериоду
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериод КАК втМаксПериод
	|		ПО вт.ОбъектАренды = втМаксПериод.ОбъектАренды
	|			И вт.Услуга = втМаксПериод.Услуга
	|			И вт.Период = втМаксПериод.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтборПоМаксПериоду.Услуга,
	|	втОтборПоМаксПериоду.ОбъектАренды,
	|	МАКСИМУМ(втОтборПоМаксПериоду.Регистратор) КАК Регистратор,
	|	втОтборПоМаксПериоду.Период
	|ПОМЕСТИТЬ втМаксРегистратор
	|ИЗ
	|	втОтборПоМаксПериоду КАК втОтборПоМаксПериоду
	|
	|СГРУППИРОВАТЬ ПО
	|	втОтборПоМаксПериоду.Услуга,
	|	втОтборПоМаксПериоду.ОбъектАренды,
	|	втОтборПоМаксПериоду.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Услуга,
	|	вт.ОбъектАренды,
	|	вт.Ставка,
	|	вт.СпособНачисления,
	|	вт.Количество,
	|	вт.СтавкаНДС,
	|	вт.Договор,
	|	вт.ФормаОплаты
	|ПОМЕСТИТЬ втИтог
	|ИЗ
	|	втМаксРегистратор КАК втМаксРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО втМаксРегистратор.Услуга = вт.Услуга
	|			И втМаксРегистратор.ОбъектАренды = вт.ОбъектАренды
	|			И втМаксРегистратор.Период = вт.Период
	|			И втМаксРегистратор.Регистратор = вт.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтог.Услуга,
	|	втИтог.ОбъектАренды,
	|	СтатусыДоговоровАрендыСрезПоследних.ДатаНачалаАренды КАК ДатаНачалаСрокаАренды,
	|	ВЫБОР
	|		КОГДА СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды < &ДатаОкончания
	|			ТОГДА СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды
	|		ИНАЧЕ &ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияСрокаАренды,
	|	втИтог.Ставка,
	|	втИтог.СпособНачисления,
	|	втИтог.Количество,
	|	втИтог.СтавкаНДС,
	|	втИтог.ФормаОплаты
	|ИЗ
	|	втИтог КАК втИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(
	|				&МоментВремени,
	|				ЗаключениеДоговора = &ЗаключениеДоговора
	|					И Регистратор <> &Док) КАК СтатусыДоговоровАрендыСрезПоследних
	|		ПО втИтог.Договор = СтатусыДоговоровАрендыСрезПоследних.Договор";
	//АК БЕЛН 23.05.2016--
	
	Запрос.УстановитьПараметр("ПостояннаяЧасть", Истина);
	ПостояннаяЧастьАренднойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.УстановитьПараметр("ПостояннаяЧасть", Ложь);
	ПеременнаяЧастьАренднойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции


//========= ПРОЦЕДУРЫ ПЕЧАТИ
#Если Клиент Тогда
	
Функция ПечатьСтруктурыАссортимента()

	//ТабДокумент = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("СтруктураАссортимента");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ДополнительноеСоглашение.Организация,
	//|	ДополнительноеСоглашение.Дата,
	//|	ДополнительноеСоглашение.Контрагент.ГенеральныйДиректор КАК РуководительКонтрагента,
	//|	ДополнительноеСоглашение.НомерАссортимента,
	//|	ДополнительноеСоглашение.ДатаНачалаАссортимента КАК ДатаАссортиментаС,
	//|	ДополнительноеСоглашение.ДатаОкончанияАссортимента КАК ДатаАссортиментаПо
	//|ИЗ
	//|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	//|ГДЕ
	//|	ДополнительноеСоглашение.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//
	//Шапка = Запрос.Выполнить().Выбрать();
	//Шапка.Следующий();
	//
	//Область = Макет.ПолучитьОбласть("Заголовок");		
	//Область.Параметры.НомерАссортимента = Шапка.НомерАссортимента;
	//Область.Параметры.ДатаАссортиментаС = Формат(Шапка.ДатаАссортиментаС,"ДФ='д ММММ гггг'");
	//Область.Параметры.ДатаАссортиментаПо = Формат(Шапка.ДатаАссортиментаПо,"ДФ='д ММММ гггг'");
	//ТабДокумент.Вывести(Область);
	//
	//Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СтруктураАссортимента.Наименование КАК СтруктураАссортимента
	//|ИЗ
	//|	Справочник.СтруктураАссортимента КАК СтруктураАссортимента
	//|ГДЕ
	//|	СтруктураАссортимента.Владелец В
	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды
	//|			ИЗ
	//|				Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
	//|			ГДЕ
	//|				ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	//|		
	//|			ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды
	//|			ИЗ
	//|				Документ.ДополнительноеСоглашение.ПеременнаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты
	//|			ГДЕ
	//|				ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СтруктураАссортимента";
	//
	//Ассортимент = Запрос.Выполнить().Выбрать();
	//
	//НомерСтроки = 1;
	//Пока Ассортимент.Следующий() Цикл
	//	Область.Параметры.Номер = НомерСтроки;
	//	Область.Параметры.Заполнить(Ассортимент);
	//	ТабДокумент.Вывести(Область);
	//	НомерСтроки = НомерСтроки + 1;
	//КонецЦикла;
	//
	//Область = Макет.ПолучитьОбласть("Подвал");
	//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	//Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	//Область.Параметры.РуководительКонтрагента = Шапка.РуководительКонтрагента;
	// 	
	//ТабДокумент.Вывести(Область);
	//
	//Возврат ТабДокумент;
	
КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьПротоколаСогласованияЦены()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПротоколСогласованияЦены");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент
	|		ИНАЧЕ ДополнительноеСоглашение.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.ГенеральныйДиректор
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.ГенеральныйДиректор
	|	КОНЕЦ КАК РуководительКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаОсновании
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаОсновании
	|	КОНЕЦ КАК КонтрагентНаОсновании,
	|	ДополнительноеСоглашение.ДоговорКонтрагента КАК Договор,
	|	ДополнительноеСоглашение.Дата,
	|	ДополнительноеСоглашение.НомерПротокола,
	|	ДополнительноеСоглашение.ДатаПротокола
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//только для первого листа выводим текст "Приложение 1"
	ОбластьЗаголовка.Параметры.Заполнить(Шапка);
	//ОбластьЗаголовка.Параметры.РуководительКонтрагентаРодительныйПадеж = ОбщегоНазначения.ПадежФИО(Шапка.РуководительКонтрагента, 2);
	ТабДокумент.Вывести(ОбластьЗаголовка);
	
	Область = Макет.ПолучитьОбласть("Протокол");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.ДатаПротокола 			= Формат(Шапка.ДатаПротокола, "ДФ='д ММММ гггг'");
	Область.Параметры.РуководительОрганизации 	= Руководители.Руководитель;
	
	//теперь для каждого объекта формируем свой протокол согласования
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыАренды.ОбъектАренды,
	|	ОбъектыАренды.УслугаСтавкаНДС КАК СтавкаНДС,
	|	ОбъектыАренды.Количество КАК ПлощадьОбъекта,
	//|	ОбъектыАренды.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОбъекта,
	|	ОбъектыАренды.СпособНачисленияВалюта.Наименование КАК Валюта,
	|	ОбъектыАренды.СпособНачисленияПериодНачисления КАК ПериодНачисления,
	|	ОбъектыАренды.Ставка,
	|	ОбъектыАренды.ДатаНачалаСрокаАренды КАК ДатаНачалаАренды,
	|	ОбъектыАренды.ДатаОкончанияСрокаАренды КАК ДатаОкончанияАренды
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Услуга.СтавкаНДС КАК УслугаСтавкаНДС,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Количество КАК Количество,
	//|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Услуга.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК СпособНачисленияВалюта,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления КАК СпособНачисленияПериодНачисления,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ставка КАК Ставка,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора КАК ДатаНачалаСрокаАренды,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ДатаОкончанияДоговора КАК ДатаОкончанияСрокаАренды
	|	ИЗ
	|		Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
	|	ГДЕ
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Услуга.СтавкаНДС,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Количество,
	//|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.ЕдиницаИзмерения.Наименование,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ставка,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ДатаОкончанияДоговора
	|	ИЗ
	|		Документ.ДополнительноеСоглашение.ПеременнаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты
	|	ГДЕ
	//+++ AK suvv 14.06.2018 ИП-00018763
	//|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка) КАК ОбъектыАренды";
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка и не ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Аванс) КАК ОбъектыАренды";
	//--- AK suvv
	
	ОбъектыАренды = Запрос.Выполнить().Выбрать();
	
	//
	Индекс = 1;
	Пока ОбъектыАренды.Следующий() Цикл
		Область.Параметры.НомерПротокола 		= Шапка.НомерПротокола + "\" + Индекс;
		Область.Параметры.Заполнить(ОбъектыАренды);
		Область.Параметры.ДатаНачалаАренды 		= Формат(ОбъектыАренды.ДатаНачалаАренды		, "ДФ='д ММММ гггг'");
		Область.Параметры.ДатаОкончанияАренды 	= Формат(ОбъектыАренды.ДатаОкончанияАренды	, "ДФ='д ММММ гггг'");
		
		ФорматнаяСтрока = "Л=ru_RU;НП=Ложь;НД=Ложь;ДП=Ложь";
		
		Область.Параметры.СтавкаПрописью 			= НРег(ЧислоПрописью(ОбъектыАренды.Ставка,ФорматнаяСтрока,));
		Область.Параметры.ПериодНачисленияПрописью 	= НРег(ОбъектыАренды.ПериодНачисления);
		
		Если ЗначениеЗаполнено(ОбъектыАренды.СтавкаНДС)
				И НЕ (ОбъектыАренды.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС) Тогда
			ТекстНДС = "Арендная плата облагается НДС по ставке " + ОбъектыАренды.СтавкаНДС;
		Иначе
			ТекстНДС = "Арендная плата НДС не облагается";
		КонецЕсли;
		
		Область.Параметры.ТекстНДС = ТекстНДС;
	
		ТабДокумент.Вывести(Область);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСоглашенияОПролонгации()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("СоглашениеОПролонгации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент
	|		ИНАЧЕ ДополнительноеСоглашение.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.ГенеральныйДиректор
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.ГенеральныйДиректор
	|	КОНЕЦ КАК РуководительКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаОсновании
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаОсновании
	|	КОНЕЦ КАК КонтрагентНаОсновании,
	|	ДополнительноеСоглашение.ДоговорКонтрагента КАК Договор,
	|	ДополнительноеСоглашение.Дата,
	|	ДополнительноеСоглашение.Номер КАК НомерСоглашения,
	|	ДополнительноеСоглашение.ДатаОкончанияДоговора
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("Протокол");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.РуководительКонтрагентаРодительныйПадеж = ОбщегоНазначения.ПадежФИО(Шапка.РуководительКонтрагента, 2);
	Область.Параметры.ДатаСоглашения 			= Формат(Шапка.Дата					, "ДФ='д ММММ гггг'");
	Область.Параметры.ДатаОкончанияДоговора 	= Формат(Шапка.ДатаОкончанияДоговора, "ДФ='д ММММ гггг'");
	Область.Параметры.РуководительОрганизации 	= Руководители.Руководитель;
	
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПередаточногоАкта()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПередаточныйАкт");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент
	|		ИНАЧЕ ДополнительноеСоглашение.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Организация.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаименованиеПолное
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.ГенеральныйДиректор
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.ГенеральныйДиректор
	|	КОНЕЦ КАК РуководительКонтрагента,
	|	ВЫБОР
	|		КОГДА ДополнительноеСоглашение.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ДополнительноеСоглашение.Контрагент.НаОсновании
	|		ИНАЧЕ ДополнительноеСоглашение.Организация.НаОсновании
	|	КОНЕЦ КАК КонтрагентНаОсновании,
	|	ДополнительноеСоглашение.ДоговорКонтрагента КАК Договор,
	|	ДополнительноеСоглашение.Дата,
	|	ДополнительноеСоглашение.НомерАкта,
	|	ДополнительноеСоглашение.ДатаАкта
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|ГДЕ
	|	ДополнительноеСоглашение.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//только для первого листа выводим текст "Приложение 1"
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.РуководительКонтрагентаРодительныйПадеж 	= ОбщегоНазначения.ПадежФИО(Шапка.РуководительКонтрагента, 2);
	Область.Параметры.ДатаАкта 									= Формат(Шапка.ДатаАкта, "ДФ='д ММММ гггг'");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	
	ТабДокумент.Вывести(Область);
	
	
	//теперь для каждого объекта заполняем таблицу
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыАренды.ОбъектАренды,
	|	ОбъектыАренды.Количество КАК Площадь,
	//|	ОбъектыАренды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОбъектыАренды.ДатаНачалаАренды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Количество КАК Количество,
	//|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Услуга.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора КАК ДатаНачалаАренды
	|	ИЗ
	|		Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
	|	ГДЕ
	|		ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.Наименование + ""/"" + ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Услуга.Наименование,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Количество,
	//|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.ЕдиницаИзмерения.Наименование,
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора
	|	ИЗ
	|		Документ.ДополнительноеСоглашение.ПеременнаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты
	|	ГДЕ
	//+++ AK suvv 14.06.2018 ИП-00018763
	//|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка) КАК ОбъектыАренды";
	|		ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка и не ДополнительноеСоглашениеПеременнаяЧастьАренднойПлаты.Аванс) КАК ОбъектыАренды";
	//--- AK suvv
	
	ОбъектыАренды = Запрос.Выполнить().Выбрать();
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	Индекс = 1;
	Пока ОбъектыАренды.Следующий() Цикл
		Область.Параметры.НомерСтроки = Индекс;
		Область.Параметры.Заполнить(ОбъектыАренды);
		Область.Параметры.ДатаНачалаАренды = Формат(ОбъектыАренды.ДатаНачалаАренды,"ДФ='д ММММ гггг'");
		
		ТабДокумент.Вывести(Область);
			
		Индекс = Индекс+1;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	Область.Параметры.РуководительКонтрагента = Шапка.РуководительКонтрагента;
	
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
		
КонецФункции

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаНаОплатуДепозита()

	Запрос = Новый Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("МоментВремени"		, МоментВремени());
	Запрос.УстановитьПараметр("ДоговорКонтрагента"	, ДоговорКонтрагента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаказПокупателя.Организация
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаказПокупателя.Организация.ОсновнойБанковскийСчет
	|		ИНАЧЕ ЗаказПокупателя.Контрагент.ОсновнойБанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаказПокупателя.Контрагент
	|		ИНАЧЕ ЗаказПокупателя.Организация
	|	КОНЕЦ КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаказПокупателя.Организация
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Руководители,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаказПокупателя.Организация
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	ЗаказПокупателя.СуммаЗалогаБезналичные + ЗаказПокупателя.СуммаЗалогаНаличные - ЕСТЬNULL(-ОплаченныйДепозит.СуммаОстаток, 0) КАК СуммаЗалога,
	|	ЗаказПокупателя.СтавкаНДСЗалога,
	|	ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ИСТИНА КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ДополнительноеСоглашение КАК ЗаказПокупателя,
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыПоАрендеСАрендаторамиОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоАрендеСАрендаторами.Остатки(
	|				&МоментВремени,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Депозит) КАК ВзаиморасчетыПоАрендеСАрендаторамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыПоАрендеСАрендодателямиОстатки.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоАрендеСАрендодателями.Остатки(
	|				&МоментВремени,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Депозит) КАК ВзаиморасчетыПоАрендеСАрендодателямиОстатки) КАК ОплаченныйДепозит
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	
	СтруктурнаяЕдиница = Шапка.БанковскийСчет;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
	ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Банк = ?(НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
		БИК        = Банк.Код;
		КоррСчет   = Банк.КоррСчет;
		ГородБанка = Банк.Город;
		НомерСчета = ВернутьРасчетныйСчет(СтруктурнаяЕдиница);

		ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
		ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
		ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
		ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
		ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктурнаяЕдиница.ТекстКорреспондента) Тогда
		ТекстКорреспондента = СведенияОПоставщике.ПолноеНаименование;
		Если ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов) Тогда
			ТекстКорреспондента = ТекстКорреспондента + " р/с " + СтруктурнаяЕдиница.НомерСчета
			+ " в " + СтруктурнаяЕдиница.Банк + " " + СтруктурнаяЕдиница.Банк.Город;
		КонецЕсли;	
	Иначе
		ТекстКорреспондента = СтруктурнаяЕдиница.ТекстКорреспондента;
	КонецЕсли;		
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ТекстКорреспондента;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	СуммаНДСЗалога = УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДСЗалога)/100*Шапка.СуммаЗалога;
	
	Сумма          = Шапка.СуммаЗалога;
	СуммаНДС       = СуммаНДСЗалога;
	
	Если (НЕ ВалютаДепозита.Пустая())
			И (НЕ Шапка.ВалютаДокумента.Пустая())тогда
		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
		ВалютаДепозита, 
		Шапка.ВалютаДокумента,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Курс, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Курс,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Кратность, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Кратность);
		
		СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
		ВалютаДепозита, 
		Шапка.ВалютаДокумента,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Курс, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Курс,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Кратность, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Кратность);
	КонецЕсли;
	
	ОбластьНомера.Параметры.НомерСтроки = 1;
	ТабДокумент.Вывести(ОбластьНомера);

	ОбластьДанных.Параметры.Товар       		= "Страховой депозит по договору " + ДоговорКонтрагента;
	ОбластьДанных.Параметры.Количество  		= "1";
	ОбластьДанных.Параметры.Цена 				= Сумма;
	ОбластьДанных.Параметры.ЕдиницаИзмерения 	= "<>";
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьСуммы.Параметры.Сумма = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если СуммаНДС <> 0 Тогда
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
		ОбластьСуммы.Параметры.ВсегоНДС = "-";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока 	= "Всего наименований 1, на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью 	= ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
	ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;	
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СтруктураАссортимента" Тогда
		
		ТабДокумент = ПечатьСтруктурыАссортимента();
		
	ИначеЕсли ИмяМакета = "ПротоколСогласованияЦены" Тогда
		
		ТабДокумент = ПечатьПротоколаСогласованияЦены();
		
	ИначеЕсли ИмяМакета = "ПередаточныйАкт" Тогда
		
		ТабДокумент = ПечатьПередаточногоАкта();
		
	ИначеЕсли ИмяМакета = "Счет" Тогда
		
		Если УчитыватьЗалог Тогда
			ТабДокумент = ПечатьСчетаНаОплатуДепозита();
		Иначе
			Сообщить("Печать счета на оплату депозита возможно только в том случае, когда установлен признак ""Учитывать депозит""!");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "СоглашениеОПролонгации" Тогда
		
		ТабДокумент = ПечатьСоглашенияОПролонгации();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), НепосредственнаяПечать);
	
КонецПроцедуры

// Функция возвращает табличный документ печатной формы
Функция ПолучитьПечатнуюФорму(ИмяМакета) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СтруктураАссортимента" Тогда
		
		ТабДокумент = ПечатьСтруктурыАссортимента();
		
	ИначеЕсли ИмяМакета = "ПротоколСогласованияЦены" Тогда
		
		ТабДокумент = ПечатьПротоколаСогласованияЦены();
		
	ИначеЕсли ИмяМакета = "ПередаточныйАкт" Тогда
		
		ТабДокумент = ПечатьПередаточногоАкта();
		
	ИначеЕсли ИмяМакета = "Счет" Тогда
		
		Если УчитыватьЗалог Тогда
			ТабДокумент = ПечатьСчетаНаОплатуДепозита();
		Иначе
			Сообщить("Печать счета на оплату депозита возможно только в том случае, когда установлен признак ""Учитывать депозит""!");
			Возврат ТабДокумент;
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "СоглашениеОПролонгации" Тогда
		
		ТабДокумент = ПечатьСоглашенияОПролонгации();
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("СоглашениеОПролонгации"		, "Соглашение о пролонгации");
	//СтруктураПечатныхФорм.Вставить("СтруктураАссортимента","Структура ассортимента");
	СтруктураПечатныхФорм.Вставить("ПротоколСогласованияЦены"	, "Протокол согласования цены");
	СтруктураПечатныхФорм.Вставить("ПередаточныйАкт"			, "Передаточный акт");
	СтруктураПечатныхФорм.Вставить("Счет"						, "Счет на оплату депозита");
	Возврат СтруктураПечатныхФорм;


КонецФункции

#КонецЕсли

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		Отказ = Истина;
	КонецЕсли;
	
	ВидДоговора = ?(ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Перечисления.ВидыОперацийДоговоровАренды.САрендатором, Перечисления.ВидыОперацийДоговоровАренды.САрендодателем);
	
	Если ЭтотОбъект.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		Коэффициент 	= 0;
		ВерхняяГраница 	= 0;
		НижняяГраница 	= 0;
	ИначеЕсли ЭтотОбъект.СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		Курс 		= 0;
		Кратность 	= 0;
	КонецЕсли;
	
	//+++АК sils 10.07.2018 ИП-00014584.02
	//+++АК sils 22.08.2018 ИП-00014584.04
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение и ЭтотОбъект.ТипСтимулаАренды = Перечисления.АК_ТипыЛьготПоАренде.ПустаяСсылка() и
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и
	//---АК
		ЭтотОбъект.Стимул.Количество() = 0 Тогда
		РасчитатьСтимулы();
	КонецЕсли;
	//---АК
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ДокументПодписан = Ложь;
	
	//+++АК sils 22.08.2018 ИП-00014584.04
	ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
	ЭтотОбъект.Стимул.Очистить();
	//---АК
КонецПроцедуры

//+++АК sils 11.07.2018 ИП-00014584.02
Процедура РасчитатьСтимулы() Экспорт
	ЭтотОбъект.Стимул.Очистить();
	
	// Сумма аренды из крайнего самого свежего документа (доп или заключения)
	// до этого доп.соглашения со стимулом
	#Область ПолучениеДокументаСоСтимулом
	ТЗ = ПолучитьДокументСтимула();
	Если ТЗ.Количество() = 0 Тогда
		ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	ДокСтимула = ТЗ[0].Ссылка;
	
	флСуммаВДень = Ложь;
	знДень = Перечисления.Периодичность.День;
	Сумма1 = 0;
	Для каждого стр из ДокСтимула.ПостояннаяЧастьАренднойПлаты Цикл
		Сумма1 = Сумма1 + стр.Ставка * ?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стр.СпособНачисления, "ЗаОбъектВЦелом"), 1, стр.Количество);
		Если ЗначениеЗаполнено(стр.СпособНачисления) и 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стр.СпособНачисления, "ПериодНачисления") = знДень Тогда
			флСуммаВДень = Истина;
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти
	ЭтотОбъект.ДокументСтимула = ДокСтимула.Ссылка;
	
	// Сумма аренды этого документа
	#Область ПолучениеПоследнейСуммыАренды
	Сумма2 = ПолучениеСуммыПоследнегоДокумента();
	#КонецОбласти
	
	// Срок действия скидки. Если не указано - расчитываем.
	#Область СрокДействияСтимула
	СрокДействияСкидки = ДокСтимула.КоличествоДнейСтимулаАренды;
	Если СрокДействияСкидки = 0 и ТипЗнч(ДокСтимула) = Тип("ДокументСсылка.ДополнительноеСоглашение") и
		ЗначениеЗаполнено(ДокСтимула.ДатаОкончанияСтимула) и ЗначениеЗаполнено(ДокСтимула.ДатаНачалаСтимула) и
		ДокСтимула.ДатаОкончанияСтимула > ДокСтимула.ДатаНачалаСтимула Тогда
		СрокДействияСкидки = (КонецДня(ДокСтимула.ДатаОкончанияСтимула) - НачалоДня(ДокСтимула.ДатаНачалаСтимула) + 1) / 86400;
	КонецЕсли;
	Если СрокДействияСкидки = 0 Тогда
		ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
		Сообщить("Не удалось расчитать стимул в доп.соглашении №" + ЭтотОбъект.Номер);
		Возврат;
	КонецЕсли;
	Если флСуммаВДень Тогда
		Сумма1 = Сумма1 * СрокДействияСкидки / (СрокДействияСкидки / 30);
	КонецЕсли;
	#КонецОбласти
	
	// Сумма скидки за месяц
	СуммаСкидкиНаМесяц = Сумма2 - Сумма1;
	Если СуммаСкидкиНаМесяц < 0 Тогда
		ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
		Сообщить("Не удалось расчитать сумму стимула в доп.соглашении №" + ЭтотОбъект.Номер + " от " +
			Формат(ЭтотОбъект.Дата, "ДФ=dd.MM.yyyy") + " (отрицательная сумма скидки).");
		Возврат;
	КонецЕсли;
	
	// Определение даты начала и окночания действия документа
	#Область ДатаНачалаОкончанияДействияДоговора
	ТЗ1 = ПолучитьДатуОкончанияДокумента();
	Если ТЗ1.Количество() = 0 Тогда
		ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	ДатаОкончания = ТЗ1[0].ДатаОкончания;
	//ДатаНачала = ?(ЗначениеЗаполнено(ДокСтимула.ДатаАкта), ДокСтимула.ДатаАкта, ДокСтимула.Дата);
	//ДатаНачала = ?(ЗначениеЗаполнено(ДокСтимула.ДатаЗаключенияДоговора), ДокСтимула.ДатаЗаключенияДоговора, ДокСтимула.Дата);
	Если ТипЗнч(ДокСтимула) = Тип("ДокументСсылка.ЗаключениеДоговораАренды") Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(ДокСтимула.ДатаЗаключенияДоговора), ДокСтимула.ДатаЗаключенияДоговора, ДокСтимула.Дата);
	Иначе
		ДатаНачала = ДокСтимула.Дата;
	КонецЕсли;
	#КонецОбласти
	
	// Расчет оставшегося периода действия договора
	#Область ПолучениеПериодов
	ПериодыДействияДоговора = Новый ТаблицаЗначений;
	ПериодыДействияДоговора.Колонки.Добавить("Период");
	ПериодыДействияДоговора.Колонки.Добавить("КоличествоДней");
	Дата1 = НачалоДня(ДатаНачала);
	Дата2 = КонецДня(ДатаОкончания);
	
	ОставшийсяПериодДействияДоговора = 0;
	Если Дата1 <= КонецМесяца(Дата2) Тогда
		НовСтр = ПериодыДействияДоговора.Добавить();
		НовСтр.Период = НачалоМесяца(Дата1);
		НовСтр.КоличествоДней = (КонецМесяца(Дата1) - Дата1 + 1) / (60*60*24);
		
		ОставшийсяПериодДействияДоговора = ОставшийсяПериодДействияДоговора + НовСтр.КоличествоДней;
		
		Дата1 = КонецМесяца(ДобавитьМесяц(Дата1, 1));
	КонецЕсли;
	Пока Дата1 <= КонецМесяца(Дата2) Цикл
		НовСтр = ПериодыДействияДоговора.Добавить();
		НовСтр.Период = НачалоМесяца(Дата1);
		НовСтр.КоличествоДней = (Мин(Дата1, Дата2) - НачалоМесяца(Дата1) + 1) / (60*60*24);
		
		ОставшийсяПериодДействияДоговора = ОставшийсяПериодДействияДоговора + НовСтр.КоличествоДней;
		
		Дата1 = КонецМесяца(ДобавитьМесяц(Дата1, 1));
	КонецЦикла;
	#КонецОбласти
	
	Если ДокСтимула.ТипСтимулаАренды = Перечисления.АК_ТипыЛьготПоАренде.Скидка Тогда
		// Сумма из доп.договора
		ОбщаяСуммаСкидки = СуммаСкидкиНаМесяц * СрокДействияСкидки / 30;
		
		СуммаСкидкиНаДень = ОбщаяСуммаСкидки / ОставшийсяПериодДействияДоговора;
		
		Если СуммаСкидкиНаДень > 0 Тогда
			Для каждого стр из ПериодыДействияДоговора Цикл
				СредняяСкидкаЗаМесяц = Окр(СуммаСкидкиНаДень * стр.КоличествоДней, 2, 1);
				ОбщаяСуммаСкидки = ОбщаяСуммаСкидки - СредняяСкидкаЗаМесяц;
				
				Если СредняяСкидкаЗаМесяц > 0 Тогда
				 	НовСтр = ЭтотОбъект.Стимул.Добавить();
					НовСтр.ПериодНачисления 	= стр.Период;
					НовСтр.Сумма 				= СредняяСкидкаЗаМесяц;
				КонецЕсли;
				Если ПериодыДействияДоговора.Индекс(стр) = ПериодыДействияДоговора.Количество() - 1 Тогда
					Если СредняяСкидкаЗаМесяц = 0 Тогда
					 	НовСтр = ЭтотОбъект.Стимул.Добавить();
						НовСтр.ПериодНачисления 	= стр.Период;
						НовСтр.Сумма 				= 0;
					КонецЕсли;	
					НовСтр.Сумма = НовСтр.Сумма + ОбщаяСуммаСкидки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ДокСтимула.ТипСтимулаАренды = Перечисления.АК_ТипыЛьготПоАренде.Каникулы Тогда
		СуммаКаникулВДень = СуммаСкидкиНаМесяц * 12 / 365;
		СтоимостьКаникул = СуммаКаникулВДень * СрокДействияСкидки;
		СуммаКаникулВДень = СтоимостьКаникул / ОставшийсяПериодДействияДоговора;
		
		Если СуммаКаникулВДень > 0 Тогда
			Для каждого стр из ПериодыДействияДоговора Цикл
				СредняяСкидкаЗаМесяц = Окр(СуммаКаникулВДень * стр.КоличествоДней, 2, 1);
				СтоимостьКаникул = СтоимостьКаникул - СредняяСкидкаЗаМесяц;

				НовСтр = ЭтотОбъект.Стимул.Добавить();
				НовСтр.ПериодНачисления = стр.Период;
				НовСтр.Сумма = 0;
				Если СредняяСкидкаЗаМесяц <> 0 Тогда
					НовСтр.Сумма = СредняяСкидкаЗаМесяц;
				КонецЕсли;
				Если ПериодыДействияДоговора.Индекс(стр) = ПериодыДействияДоговора.Количество() - 1 Тогда
					НовСтр.Сумма = НовСтр.Сумма + СтоимостьКаникул;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//+++АК sils 22.08.2018 ИП-00014584.04
	Если ЭтотОбъект.Стимул.Количество() = 0 Тогда
		ЭтотОбъект.ДокументСтимула = Документы.ДополнительноеСоглашение.ПустаяСсылка();
	КонецЕсли;
	//---АК
КонецПроцедуры

//+++АК sils 20.08.2017 ИП-00014584
// Предыдущий документ со стимулом (доп.соглашение или заключение)
Функция ПолучитьДокументСтимула()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительноеСоглашение.ДокументОснование КАК ДокументОснование,
	               |	ДополнительноеСоглашение.Дата КАК Дата,
	               |	ДополнительноеСоглашение.Ссылка
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |ГДЕ
	               |	ДополнительноеСоглашение.Проведен = ИСТИНА
	               |	И ДополнительноеСоглашение.ДокументОснование = &Док
	               |	И ДополнительноеСоглашение.Дата < &Дата
	               |	И ДополнительноеСоглашение.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаключениеДоговораАренды.Ссылка,
	               |	ЗаключениеДоговораАренды.Дата,
	               |	ЗаключениеДоговораАренды.Ссылка
	               |ИЗ
	               |	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |ГДЕ
	               |	ЗаключениеДоговораАренды.Проведен = ИСТИНА
	               |	И ЗаключениеДоговораАренды.Ссылка = &Док
	               |	И ЗаключениеДоговораАренды.Дата < &Дата
	               |	И ЗаключениеДоговораАренды.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.ДокументОснование,
	               |	Документы.Дата,
	               |	Документы.Ссылка
	               |ПОМЕСТИТЬ ПоследнийДокумент
	               |ИЗ
	               |	Документы КАК Документы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Документы.Дата) КАК Дата,
	               |			Документы.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документы КАК Документы
	               |		ГДЕ
	               |			НЕ Документы.Ссылка В
	               |						(ВЫБРАТЬ
	               |							ВложенныйЗапрос.Ссылка КАК Ссылка
	               |						ИЗ
	               |							(ВЫБРАТЬ
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка КАК Ссылка,
	               |								СУММА(ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ставка) КАК Ставка
	               |							ИЗ
	               |								Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
	               |							ГДЕ
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка В
	               |									(ВЫБРАТЬ
	               |										Документы.Ссылка
	               |									ИЗ
	               |										Документы КАК Документы)
	               |							СГРУППИРОВАТЬ ПО
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка) КАК ВложенныйЗапрос
	               |						ГДЕ
	               |							ВложенныйЗапрос.Ставка = 0)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Документы.ДокументОснование) КАК ВложенныйЗапрос
	               |		ПО Документы.ДокументОснование = ВложенныйЗапрос.ДокументОснование
	               |			И Документы.Дата = ВложенныйЗапрос.Дата
	               |ГДЕ
	               |	Документы.Ссылка.ТипСтимулаАренды <> ЗНАЧЕНИЕ(Перечисление.АК_ТипыЛьготПоАренде.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПоследнийДокумент.ДокументОснование,
	               |	ПоследнийДокумент.Дата КАК Дата,
	               |	ПоследнийДокумент.Ссылка
	               |ИЗ
	               |	ПоследнийДокумент КАК ПоследнийДокумент
	               |ГДЕ
	               |	НЕ ПоследнийДокумент.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ДополнительноеСоглашение.ДокументСтимула КАК ДокументСтимула
	               |				ИЗ
	               |					Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |				ГДЕ
	               |					ДополнительноеСоглашение.ДокументСтимула <> НЕОПРЕДЕЛЕНО
	               |					И ДополнительноеСоглашение.Проведен)" 
				   + ?(ЗначениеЗаполнено(ЭтотОбъект.ДокументСтимула), "
				   | или ПоследнийДокумент.Ссылка = &ДокументСтимула", "") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("Док", ЭтотОбъект.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ДокументСтимула", ЭтотОбъект.ДокументСтимула);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//+++АК sils 22.08.2018 ИП-00014584.04
Функция ПолучениеСуммыПоследнегоДокумента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительноеСоглашение.ДокументОснование КАК ДокументОснование,
	               |	ДополнительноеСоглашение.Дата КАК Дата,
	               |	ДополнительноеСоглашение.Ссылка
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |ГДЕ
	               |	ДополнительноеСоглашение.Проведен = ИСТИНА
	               |	И ДополнительноеСоглашение.ДокументОснование = &Док
	               |	И ДополнительноеСоглашение.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаключениеДоговораАренды.Ссылка,
	               |	ЗаключениеДоговораАренды.Дата,
	               |	ЗаключениеДоговораАренды.Ссылка
	               |ИЗ
	               |	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |ГДЕ
	               |	ЗаключениеДоговораАренды.Проведен = ИСТИНА
	               |	И ЗаключениеДоговораАренды.Ссылка = &Док
	               |	И ЗаключениеДоговораАренды.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Документы.ДокументОснование,
	               |	Документы.Дата,
	               |	Документы.Ссылка
	               |ИЗ
	               |	Документы КАК Документы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МИНИМУМ(Документы.Дата) КАК Дата,
	               |			Документы.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документы КАК Документы
	               |		ГДЕ
	               |			НЕ Документы.Ссылка В
	               |						(ВЫБРАТЬ
	               |							ВложенныйЗапрос.Ссылка КАК Ссылка
	               |						ИЗ
	               |							(ВЫБРАТЬ
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка КАК Ссылка,
	               |								СУММА(ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ставка) КАК Ставка
	               |							ИЗ
	               |								Документ.ДополнительноеСоглашение.ПостояннаяЧастьАренднойПлаты КАК ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты
	               |							ГДЕ
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка В
	               |									(ВЫБРАТЬ
	               |										Документы.Ссылка
	               |									ИЗ
	               |										Документы КАК Документы)
	               |							СГРУППИРОВАТЬ ПО
	               |								ДополнительноеСоглашениеПостояннаяЧастьАренднойПлаты.Ссылка) КАК ВложенныйЗапрос
	               |						ГДЕ
	               |							ВложенныйЗапрос.Ставка = 0)
	               |			И Документы.Дата >= &ДатаТекДокСтимула
	               |			И Документы.Ссылка.ТипСтимулаАренды = ЗНАЧЕНИЕ(Перечисление.АК_ТипыЛьготПоАренде.ПустаяСсылка)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Документы.ДокументОснование) КАК ВложенныйЗапрос
	               |		ПО Документы.ДокументОснование = ВложенныйЗапрос.ДокументОснование
	               |			И Документы.Дата = ВложенныйЗапрос.Дата";
	Запрос.УстановитьПараметр("Док", ЭтотОбъект.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ДатаТекДокСтимула", ЭтотОбъект.Дата);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		ТекДок = ЭтотОбъект.Ссылка;
	Иначе
		ТекДок = ТЗ[0].Ссылка;
	КонецЕсли;
	ТекСумма = 0;
	Для каждого стр из ТекДок.ПостояннаяЧастьАренднойПлаты Цикл
		ТекСумма = ТекСумма + стр.Ставка * ?(стр.СпособНачисления.ЗаОбъектВЦелом, 1, стр.Количество);
	КонецЦикла;
	
	Возврат ТекСумма;
КонецФункции

//+++АК sils 20.08.2017 ИП-00014584
Функция ПолучитьДатуОкончанияДокумента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительноеСоглашение.ДокументОснование КАК ДокументОснование,
	               |	ДополнительноеСоглашение.Дата КАК Дата,
	               |	ДополнительноеСоглашение.Ссылка
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |ГДЕ
	               |	ДополнительноеСоглашение.Проведен = ИСТИНА
	               |	И ДополнительноеСоглашение.ДокументОснование = &Док
	               |	И ДополнительноеСоглашение.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаключениеДоговораАренды.Ссылка,
	               |	ЗаключениеДоговораАренды.Дата,
	               |	ЗаключениеДоговораАренды.Ссылка
	               |ИЗ
	               |	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |ГДЕ
	               |	ЗаключениеДоговораАренды.Проведен = ИСТИНА
	               |	И ЗаключениеДоговораАренды.Ссылка = &Док
	               |	И ЗаключениеДоговораАренды.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендатором)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.ДокументОснование,
	               |	МИНИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Дата, Документы.Ссылка.Дата)) КАК Дата,
	               |	Документы.Ссылка
	               |ПОМЕСТИТЬ ВТ_ДокументыСДатой
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Документы.Дата КАК Дата,
	               |			Документы.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документы КАК Документы
	               |		ГДЕ
	               |			Документы.Ссылка.ТипСтимулаАренды = ЗНАЧЕНИЕ(Перечисление.АК_ТипыЛьготПоАренде.ПустаяСсылка)) КАК ВложенныйЗапрос
	               |		ПО Документы.ДокументОснование = ВложенныйЗапрос.ДокументОснование
	               |			И Документы.Дата <= ВложенныйЗапрос.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Документы.ДокументОснование,
	               |	Документы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыСДатой.ДокументОснование,
	               |	ВТ_ДокументыСДатой.Ссылка КАК Документ,
	               |	ВЫБОР
	               |		КОГДА Документы.Ссылка.ДатаОкончанияДоговора > ВТ_ДокументыСДатой.Ссылка.ДатаОкончанияДоговора
	               |			ТОГДА Документы.Ссылка.ДатаОкончанияДоговора
	               |		ИНАЧЕ ВТ_ДокументыСДатой.Ссылка.ДатаОкончанияДоговора
	               |	КОНЕЦ КАК ДатаОкончания
	               |ИЗ
	               |	ВТ_ДокументыСДатой КАК ВТ_ДокументыСДатой
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
	               |		ПО ВТ_ДокументыСДатой.ДокументОснование = Документы.ДокументОснование
	               |			И ВТ_ДокументыСДатой.Дата = Документы.Дата
	               |ГДЕ
	               |	ВТ_ДокументыСДатой.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Док", ЭтотОбъект.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//+++АК sils 23.10.2018 ИП-00020193
Процедура РассчитатьСуммуДепозитаМСФО() Экспорт
	Если не ЗначениеЗаполнено(ДокументОснование) Тогда
		СуммаЗалогаМСФО = 0;
		Возврат;
	КонецЕсли;
	Если ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийДоговоровАренды.САрендодателем Тогда
		СуммаЗалогаМСФО = 0;
		Возврат;
	КонецЕсли;
	ТекДатаКурса = ?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора);
	
	пКурс = 1;
	Если (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ПустаяСсылка())
		ИЛИ (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаОплатыПоследнегоПериодаАренды) Тогда
		пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита)).Курс;
	ИначеЕсли (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ФиксированнойСуммой) Тогда
		Если ВалютаДепозита = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			пКурс = 1;
		ИначеЕсли ВалютаДепозита = ВалютаСпособаНачисления Тогда
			Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.ПустаяСсылка())
					ИЛИ (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ) Тогда
				пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
				пКурс = Курс;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
				пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
				пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", Валюта2СпособаНачисления)).Курс;
				ТекКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
				
				Если ТекКурс < НижняяГраница Тогда
					пКурс = НижняяГраница;
				ИначеЕсли (ТекКурс > ВерхняяГраница)
						И (ВерхняяГраница > 0) Тогда
					пКурс = ВерхняяГраница;
				Иначе
					пКурс = ТекКурс;
				КонецЕсли;
				
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
				ТекКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
				Если ТекКурс < НижняяГраница Тогда
					пКурс = НижняяГраница;
				ИначеЕсли (ТекКурс > ВерхняяГраница)
						И (ВерхняяГраница > 0) Тогда
					пКурс = ВерхняяГраница;
				Иначе
					пКурс = ТекКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаДвухКурсовВалютДеленнаяПололам) Тогда
		пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита)).Курс;
		пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита2)).Курс;
		пКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
	КонецЕсли;
	
	СуммаЗалогаМСФО = СуммаЗалогаБезналичные * пКурс + СуммаЗалогаНаличные * пКурс;
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
