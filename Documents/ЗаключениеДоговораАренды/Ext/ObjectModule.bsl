Перем мВалютаРегламентированногоУчета Экспорт;
Перем СтавкаНДФЛ Экспорт;

Перем СпособНачисленияНетОплат Экспорт; //+++АК ILIK 2018.12.17 ИП-00020685

Функция НалогПоСтроке(Сумма) Экспорт
	//+++АК BELN 2018.03.20 
	//Налог=окр(Сумма * СтавкаНДФЛ / (100-СтавкаНДФЛ),3,РежимОкругления.Окр15как20);
	//Если цел(Налог)=Налог тогда
	//	Возврат Налог;
	//иначе
	//	Возврат цел(Налог)+1;
	//КонецЕсли;
	Налог=окр(Сумма * СтавкаНДФЛ / (100-СтавкаНДФЛ));
	//Если цел(Налог)=Налог тогда
		Возврат Налог;
	//иначе
	//	Возврат цел(Налог)+1;
	//КонецЕсли;
	//---АК BELN 2018.03.20 
КонецФункции

Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаключениеДоговораАренды.Ссылка,
	|	ЗаключениеДоговораАренды.Дата,
	|	ЗаключениеДоговораАренды.Организация,
	|	ЗаключениеДоговораАренды.Контрагент,
	|	ЗаключениеДоговораАренды.ДоговорКонтрагента,
	|	ЗаключениеДоговораАренды.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаключениеДоговораАренды.ДатаЗаключенияДоговора,
	|	ЗаключениеДоговораАренды.ДатаОкончанияДоговора,
	|	ЗаключениеДоговораАренды.ВалютаСпособаНачисления КАК Валюта,
	|	ЗаключениеДоговораАренды.Валюта2СпособаНачисления КАК Валюта2,
	|	ЗаключениеДоговораАренды.Курс,
	|	ЗаключениеДоговораАренды.Кратность,
	|	ЗаключениеДоговораАренды.СпособРасчета,
	|	ЗаключениеДоговораАренды.Коэффициент,
	|	ЗаключениеДоговораАренды.НижняяГраница,
	|	ЗаключениеДоговораАренды.ВерхняяГраница,
	|	ЗаключениеДоговораАренды.УчитыватьЗалог,
	|	ЗаключениеДоговораАренды.СпособРасчетаЗалога,
	|	ЗаключениеДоговораАренды.СуммаЗалогаБезналичные,
	|	ЗаключениеДоговораАренды.СуммаЗалогаНаличные,
	|	ЗаключениеДоговораАренды.СтавкаНДСЗалогаБезналичные,
	|	ЗаключениеДоговораАренды.СтавкаНДСЗалогаНаличные,
	//+++АК sils 23.10.2018 ИП-00020193
	|	ЗаключениеДоговораАренды.СуммаЗалогаМСФО,
	//---АК
	|	ЗаключениеДоговораАренды.ВалютаДепозита,
	|	ЗаключениеДоговораАренды.УсловиеИспользованияДепозита
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|ГДЕ
	|	ЗаключениеДоговораАренды.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок) Экспорт
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ОбъектАренды, ДоговорКонтрагента, ДатаЗаключенияДоговора, ДатаОкончанияДоговора");
	СтруктураОбязательныхПолей.Вставить("ВалютаСпособаНачисления");
	СтруктураОбязательныхПолей.Вставить("СпособРасчета");
	Если СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		СтруктураОбязательныхПолей.Вставить("Курс");
		СтруктураОбязательныхПолей.Вставить("Кратность");			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		СтруктураОбязательныхПолей.Вставить("Коэффициент");
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
		СтруктураОбязательныхПолей.Вставить("Валюта2СпособаНачисления");
	КонецЕсли;
	//+++ AK suvv 03.06.2018 ИП-00018425
	Если Дата >= Дата(2018,06,01) Тогда
		СтруктураОбязательныхПолей.Вставить("РазмерИндексацииПриПерезаключенииДоговора");
		СтруктураОбязательныхПолей.Вставить("Превышение");
		//СтруктураОбязательныхПолей.Вставить("АренднаяСтавка");
	КонецЕсли;
	//--- AK suvv
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ДоговорКонтрагента.ОбъектАренды <> ОбъектАренды Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Объект аренды договора (" + ДоговорКонтрагента.ОбъектАренды + ") не соответствует объекту аренды документа (" + ОбъектАренды + ")",Отказ,Заголовок);
	КонецЕсли;
	
	Если ДатаЗаключенияДоговора>ДатаОкончанияДоговора Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата заключения договора превышает дату окончания действия договора",Отказ,Заголовок);
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный 
		И ЗначениеЗаполнено(ВерхняяГраница)
		И ВерхняяГраница < НижняяГраница Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нижняя граница курса валюты не может превышать верхнюю границу", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

////Процедура предназначена для проверки статуса объекта аренды (объект должен быть свободным в течение
////всего срока аренды)
//Процедура ПроверитьСтатусыОбъектовАренды(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок)
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
//	
//	// Проверим, что нет повторяющихся пар объект аренды и услуга     
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга КАК Услуга,
//	|	СУММА(1) КАК Количество
//	|ИЗ
//	|	Документ.ЗаключениеДоговораАренды." + ИмяТабличнойЧасти + " КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
//	|ГДЕ
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды,
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Если Выборка.Количество > 1 Тогда
//			СтрокаСообщения = "Для объекта аренды """ + Выборка.ОбъектАренды + """ с услугой """ + Выборка.Услуга + """ имеются повторяющиеся строки";
//			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
//		КонецЕсли;   		
//	КонецЦикла;
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//		   
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.НеКонтролироватьЗанятость КАК НеКонтролироватьЗанятость,
//	|	СтатусыОбъектовАрендыСрезПоследних.Услуга КАК Услуга,
//	|	СтатусыОбъектовАрендыСрезПоследних.Статус,
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.НомерСтроки,
//	|	СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды КАК ДатаНачала,
//	|	СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды КАК ДатаОкончания,
//	|	СтатусыОбъектовАрендыСрезПоследних.ЗаключениеДоговора
//	|ИЗ
//	|	Документ.ЗаключениеДоговораАренды." + ИмяТабличнойЧасти + " КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовАренды.СрезПоследних(&МоментВремени, ) КАК СтатусыОбъектовАрендыСрезПоследних
//	|		ПО ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды = СтатусыОбъектовАрендыСрезПоследних.ОбъектАренды
//	|			И (СтатусыОбъектовАрендыСрезПоследних.ДатаНачалаАренды <= ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.ДатаНачалаСрокаАренды)
//	|			И (СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//	|				ИЛИ СтатусыОбъектовАрендыСрезПоследних.ДатаОкончанияАренды >= ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.ДатаНачалаСрокаАренды)
//	|			И (ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга = СтатусыОбъектовАрендыСрезПоследних.Услуга
//	|				ИЛИ СтатусыОбъектовАрендыСрезПоследних.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
//	|ГДЕ
//	|	ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка";
//									
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(Выборка.НомерСтроки) + """ табличной части """ + ИмяТабличнойЧасти + """: ";	
//		Если ЗначениеЗаполнено(Выборка.Услуга) Тогда // Объект в аренде
//			Если Не Выборка.НеКонтролироватьЗанятость Тогда
//				СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Услуга """ + Выборка.Услуга + """ по объекту """ + Выборка.ОбъектАренды.Наименование + 
//				""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
//				" по " + Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + ".
//				|Заключение договора невозможно";
//				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
//			КонецЕсли;
//		Иначе // У объекта другой статус
//			СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Объект """ + Выборка.ОбъектАренды.Наименование + 
//			""" с " + Формат(Выборка.ДатаНачала, "ДФ = дд.ММ.гггг") +
//			" по "+ Формат(Выборка.ДатаОкончания, "ДФ = дд.ММ.гггг")+ " имеет статус """ + Выборка.Статус + """" + "
//			|Для изменения статуса необходимо установить соответстующую дату окончания в документе """ + Выборка.ЗаключениеДоговора + """";
//			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
//		КонецЕсли;
//	КонецЦикла;    
//		
//КонецПроцедуры

Процедура ПроверитьПлощадьОбъектовАренды(Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//
	//// Проверим, что нет повторяющихся пар объект аренды и услуга     
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПостояннаяЧастьАренднойПлаты.НомерСтроки КАК НомерСтроки,
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	//|	ПостояннаяЧастьАренднойПлаты.Количество КАК ПлощадьПоТекущемуДокументу,
	//|	ЕСТЬNULL(Ставки.Площадь, 0) КАК ПлощадьПоДокументам,
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.ЗначениеХарактеристики КАК Площадь
	//|ИЗ
	//|	Документ.ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК ПостояннаяЧастьАренднойПлаты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды.СрезПоследних(
	//|				&МоментВремени,
	//|				Услуга.УслугаАрендыПомещения
	//|					И ЗаключениеДоговора <> &Ссылка) КАК СтатусыОбъектовАренды
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УслугиПоДоговорамАренды.Остатки(&МоментВремени) КАК УслугиПоДоговорамАренды
	//|			ПО СтатусыОбъектовАренды.Регистратор = УслугиПоДоговорамАренды.Регистратор
	//|				И СтатусыОбъектовАренды.ОбъектАренды = УслугиПоДоговорамАренды.ОбъектАренды
	//|				И СтатусыОбъектовАренды.Услуга = УслугиПоДоговорамАренды.Услуга
	//|		ПО ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды = СтатусыОбъектовАренды.ОбъектАренды
	//|			И ПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора <= СтатусыОбъектовАренды.ДатаОкончанияАренды
	//|			И ПостояннаяЧастьАренднойПлаты.Ссылка.ДатаОкончанияДоговора >= СтатусыОбъектовАренды.ДатаНачалаАренды
	//|ГДЕ
	//|	ПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	//|	И ПостояннаяЧастьАренднойПлаты.Услуга.УслугаАрендыПомещения
	//|	И (НЕ ПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.НеКонтролироватьПлощадь)
	//|ИТОГИ
	//|	МАКСИМУМ(НомерСтроки),
	//|	МАКСИМУМ(ПлощадьПоТекущемуДокументу),
	//|	СУММА(ПлощадьПоДокументам),
	//|	МАКСИМУМ(Площадь)
	//|ПО
	//|	ОбъектАренды";
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока Выборка.Следующий() Цикл
	//	СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(Выборка.НомерСтроки) + """ табличной части ""Постоянная часть арендной платы"": ";	
	//	Если Выборка.Площадь < Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу Тогда
	//		СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + "Для объекта аренды """ + Выборка.ОбъектАренды + """ сдаваемая площадь с учетом текущего документа
	//		|составляет: " + Формат(Выборка.ПлощадьПоДокументам + Выборка.ПлощадьПоТекущемуДокументу, "ЧДЦ=2; ЧРД=.") + " м2, что превышает площадь объекта аренды: " + Формат(Выборка.Площадь, "ЧДЦ=2; ЧРД=.") + " м2";
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;   
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
    
  	ПостояннаяЧасть = (ИмяТабличнойЧасти = "ПостояннаяЧастьАренднойПлаты");
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Теперь вызовем общую процедуру проверки.
    СтруктураОбязательныхПолей = Новый Структура("Услуга, Количество, СпособНачисления, СтавкаНДС, ФормаОплаты");
   	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		// Проверим корректность заполнения услуг
		Если СтрокаТЧ.Услуга.ПостояннаяЧастьОплаты <> ПостояннаяЧасть Тогда
			СтрокаСообщения = "указанная услуга не соответствует назначению табличной части!";							   
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		//mind вынесм в форму
		////++lobv 150216 проверим заполнение НДФЛ
		//Если ПостояннаяЧасть и ЭтотОбъект.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента тогда
		//	Если СтрокаТЧ.НДФЛ=0 тогда
		//		СтрокаСообщения = "не указана сумма НДФЛ!";							   
		//		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		//	КонецЕсли;
		//КонецЕсли;
		////--lobv
	КонецЦикла;
	
	//ПроверитьСтатусыОбъектовАренды(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ПостояннаяЧасть Тогда
				
		ПроверитьПлощадьОбъектовАренды(Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим заполнение обязательных полей в шапке документа
	СтруктураШапкиДокумента = СформироватьЗапросПоШапке();
	СтруктураШапкиДокумента.Следующий();
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Проверим заполнение табличных частей
	ПроверитьЗаполнениеТабличнойЧасти("ПостояннаяЧастьАренднойПлаты", СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧасти("ПеременнаяЧастьАренднойПлаты", СтруктураШапкиДокумента, Отказ, Заголовок);
			
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Проверка лимитов по аренде
	Движения.СтатусыДоговоровАренды.Записать();
	Движения.КурсыВалютДляРасчетовПоАренде.Записать();
	ПроцедурыНачисления.ПроверитьЛимитыПоАрендеДокументыУчетаДоговоров(ОбъектАренды.СтруктурнаяЕдиница, Дата, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДни, ТипАренднойПлаты = Неопределено)
	
		Для Каждого СтрокаДень Из ТЗДни Цикл
			Движение = Движения.ПланируемыеПлатежиПоДоговорамАренды.Добавить();
			Движение.Период = ?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, Дата);
			Движение.Дата = СтрокаДень.Дата;
			Движение.Организация = Организация;
			Движение.Контрагент = Контрагент;
			Движение.Договор = ДоговорКонтрагента;
			Движение.ОбъектАренды = ОбъектАренды;
			Движение.Услуга = Строка.Услуга;
			Движение.Ставка = Строка.Ставка;
			Движение.СпособНачисления = Строка.СпособНачисления;
			Движение.Площадь = Строка.Количество;
			Движение.СтавкаНДС = Строка.СтавкаНДС;
			Движение.ФормаОплаты = Строка.ФормаОплаты;
			Движение.ТипАренднойПлаты = ?(ТипАренднойПлаты = Неопределено, Строка.ТипАренднойПлаты, ТипАренднойПлаты);
			Движение.Ставка = Строка.Ставка;
			Движение.Сумма = СтрокаДень.Сумма;
			Если Не ((ВалютаСпособаНачисления = мВалютаРегламентированногоУчета)
				И (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)) 
				И НЕ Строка.Валюта = мВалютаРегламентированногоУчета Тогда
				Движение.СуммаВал = СтрокаДень.СуммаВал;
			КонецЕсли;
			Движение.Валюта = Строка.Валюта;
			Движение.ЗаключениеДоговора = Ссылка;
			Движение.Документ = Ссылка;
			//+++ AK suvv 14.06.2018 ИП-00018763	
		    Движение.Аванс = Строка.Аванс;
		    //--- AK suvv
			//Движение.Вес = Инд;
			//Инд = Инд + 1;
		КонецЦикла;
	
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента)
	
	ТЗНачисления = ЭтотОбъект.ПостояннаяЧастьАренднойПлаты.ВыгрузитьКолонки();
	ТЗНачисления.Колонки.Добавить("ТипАренднойПлаты");
	//+++ AK suvv 14.06.2018 ИП-00018763
	ТЗНачисления.Колонки.Добавить("Аванс");
	//--- AK suvv
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПостояннаяЧастьАренднойПлаты Цикл
		//+++АК ILIK 2018.12.17 ИП-00020685
		Если СтрокаТЧ.СпособНачисления = СпособНачисленияНетОплат Тогда
			Продолжить;
		КонецЕсли;
		//---АК ILIK
		НСтрока = ТЗНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТЧ);
		НСтрока.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
		//+++ AK suvv 14.06.2018 ИП-00018763
		НСтрока.Аванс = Ложь;
		//--- AK suvv
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПеременнаяЧастьАренднойПлаты Цикл
		НСтрока = ТЗНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТЧ);
		НСтрока.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
	КонецЦикла;
	//+++ AK suvv 14.06.2018 ИП-00018763
	//ТЗНачисления.Свернуть("Услуга, СпособНачисления, СтавкаНДС, ФормаОплаты, ТипАренднойПлаты, Валюта", "Количество, Ставка, НДФЛ");
	ТЗНачисления.Свернуть("Услуга, СпособНачисления, СтавкаНДС, ФормаОплаты, ТипАренднойПлаты, Валюта, Аванс", "Количество, Ставка, НДФЛ");
	//--- AK suvv
	
	Инд = 1;
	Для Каждого Строка Из ТЗНачисления Цикл
		//+++ AK suvv 14.06.2018 ИП-00018763
		Если не Строка.Аванс Тогда 
		//--- AK suvv
		Движение = Движения.УслугиПоДоговорамАренды.Добавить();
		Движение.Период = ?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, Дата);
		Движение.Организация = Организация;
		Движение.Контрагент = Контрагент;
		Движение.Договор = ДоговорКонтрагента;
		Движение.ОбъектАренды = ОбъектАренды;
		Движение.Услуга = Строка.Услуга;
		Движение.Ставка = Строка.Ставка;
		Движение.СпособНачисления = Строка.СпособНачисления;
		Движение.Площадь = Строка.Количество;
		Движение.СтавкаНДС = Строка.СтавкаНДС;
		Движение.ФормаОплаты = Строка.ФормаОплаты;
		Движение.ТипАренднойПлаты = Строка.ТипАренднойПлаты;
		Движение.Ставка = Строка.Ставка;
		Движение.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		Движение.ЗаключениеДоговора = Ссылка;
		Движение.Документ = Ссылка;
		//+++ AK suvv 14.06.2018 ИП-00018763	
		КонецЕсли;
		//--- AK suvv
		
		пДатаОкончанияДоговора = КонецМесяца(ДобавитьМесяц(ДатаОкончанияДоговора, 6));
		
		ТЗДни = ПроцедурыНачисления.ПолучитьСуммыАрендыПоДням(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), пДатаОкончанияДоговора, ЭтотОбъект, Строка.СпособНачисления, Строка.Количество, Строка.Ставка, Строка.Валюта);
		СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДни);		
		
		Если ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента Тогда
			
			ТЗДниНДФЛ = ПроцедурыНачисления.ПолучитьСуммыАрендыПоДням(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), пДатаОкончанияДоговора, ЭтотОбъект, Строка.СпособНачисления, Строка.Количество, Строка.НДФЛ, Строка.Валюта);
			//+++АК BELN 2017.12.14 ИП-00017028
			//СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ);
			Если Строка.ТипАренднойПлаты=Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ);
			Иначе	
				СформироватьДвиженияПланируемыхПлатажейПоДням(Строка, ТЗДниНДФЛ, Перечисления.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ);
			КонецЕсли; 
			//---АК BELN 2017.12.14 
		КонецЕсли;
		
	КонецЦикла;		
		
	// Движения по регистру Курсы валют для расчета с арендаторами
	Запись = Движения.КурсыВалютДляРасчетовПоАренде.Добавить();
	Запись.Период = СтруктураШапкиДокумента.Дата;
	ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
	Если УчитыватьЗалог Тогда
		Если (СуммаЗалогаБезналичные > 0)
			ИЛИ (СуммаЗалогаНаличные > 0) Тогда
			ТЗДепозиты = Новый ТаблицаЗначений;
			ТЗДепозиты.Колонки.Добавить("Услуга");
			ТЗДепозиты.Колонки.Добавить("ФормаОплаты");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДС");
			ТЗДепозиты.Колонки.Добавить("СпособНачисления");
			ТЗДепозиты.Колонки.Добавить("Ставка");
			ТЗДепозиты.Колонки.Добавить("УчитыватьЗалог");
			ТЗДепозиты.Колонки.Добавить("СпособРасчетаЗалога");
			ТЗДепозиты.Колонки.Добавить("ВалютаДепозита");
			ТЗДепозиты.Колонки.Добавить("ВалютаДепозита2");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДСЗалогаБезналичные");
			ТЗДепозиты.Колонки.Добавить("СтавкаНДСЗалогаНаличные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаБезналичные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаНаличные");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаБезналичныеВал");
			ТЗДепозиты.Колонки.Добавить("СуммаЗалогаНаличныеВал");
			Для Каждого Строка Из ПостояннаяЧастьАренднойПлаты Цикл
				НСтрока = ТЗДепозиты.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, Строка);
				НСтрока.УчитыватьЗалог = УчитыватьЗалог;
				НСтрока.СпособРасчетаЗалога = СпособРасчетаЗалога;
				НСтрока.ВалютаДепозита = ВалютаДепозита;
				НСтрока.ВалютаДепозита2 = ВалютаДепозита2;
				НСтрока.СтавкаНДСЗалогаБезналичные = СтавкаНДСЗалогаБезналичные;
				НСтрока.СтавкаНДСЗалогаНаличные = СтавкаНДСЗалогаНаличные;
			КонецЦикла;
			
			пКурс = ПроцедурыНачисления.ПолучитьКурсВалютыДепозитаПоДокументу(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), Ссылка).Курс;
			ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаБезналичные", СуммаЗалогаБезналичные * пКурс);
			ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаНаличные", СуммаЗалогаНаличные * пКурс);
			Если (ВалютаДепозита = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
			Иначе
				ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаБезналичныеВал", СуммаЗалогаБезналичные);
				ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДепозиты, "Ставка", "СуммаЗалогаНаличныеВал", СуммаЗалогаНаличные);			
			КонецЕсли;			
			
			Для Каждого Строка Из ТЗДепозиты Цикл
				Запись = Движения.ДепозитыПоДоговорамАренды.Добавить();
				Запись.Период = СтруктураШапкиДокумента.Дата;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураШапкиДокумента);
				ЗаполнитьЗначенияСвойств(Запись, Строка);
			КонецЦикла;
			//Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ)
			//	И (ВалютаСпособаНачисления = Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
			//Иначе
			//	Запись.СуммаЗалогаБезналичныеВал = СуммаЗалогаБезналичные;
			//	Запись.СуммаЗалогаНаличныеВал = СуммаЗалогаНаличные;
			//КонецЕсли;
			//пКурс = ПроцедурыНачисления.ПолучитьКурсВалютыПоДокументу(?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора), Ссылка).Курс;
			//Запись.СуммаЗалогаБезналичные = СуммаЗалогаБезналичные * пКурс;
			//Запись.СуммаЗалогаНаличные = СуммаЗалогаНаличные * пКурс;
		КонецЕсли;
	КонецЕсли;
	
	//
	Запись = Движения.СтатусыДоговоровАренды.Добавить();
	Запись.Период 				= ЭтотОбъект.Дата;
	Запись.Договор 				= ЭтотОбъект.ДоговорКонтрагента;
	Запись.ОбъектАренды 		= ЭтотОбъект.ОбъектАренды;
	Запись.Статус 				= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	Запись.ДатаНачалаАренды 	= ЭтотОбъект.ДатаЗаключенияДоговора;
	Запись.ДатаОкончанияАренды 	= ЭтотОбъект.ДатаОкончанияДоговора;
	
	Запись.Документ 			= ЭтотОбъект.Ссылка;
	Запись.ЗаключениеДоговора 	= ЭтотОбъект.Ссылка;
    Запись.СрокУведомленияОПерезаключении = ЭтотОбъект.СрокУведомленияОПерезаключении;
	
	//+++ AK suvv 03.06.2018 ИП-00018425
	// движение по регистру сведений "Динамика арендной ставки"
	НовЗапись = Движения.ДинамикаАренднойСтавки.Добавить();
	НовЗапись.Регистратор = Ссылка;
	НовЗапись.Период = Дата;
	НовЗапись.Контрагент = Контрагент;
	НовЗапись.ДоговорКонтрагента = ДоговорКонтрагента;
	НовЗапись.ОбъектАренды = ОбъектАренды;
	НовЗапись.АренднаяСтавка = АренднаяСтавка;
	НовЗапись.ПеременнаяЧасть = ПеременнаяЧасть;
	НовЗапись.РазмерИндексацииПриПерезаключенииДоговора = РазмерИндексацииПриПерезаключенииДоговора;
	//--- AK suvv
	//+++АК sils 28.10.2018 ИП-00020257
	НовЗапись.РазмерИндексацииМСФО = РазмерИндексацииМСФО;
	//---АК
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()

//========= ПРОЦЕДУРЫ ПЕЧАТИ
#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСтруктурыАссортимента()

	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("СтруктураАссортимента");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаключениеДоговораАренды.Организация,
	|	ЗаключениеДоговораАренды.Дата,
	|	ЗаключениеДоговораАренды.Контрагент.ГенеральныйДиректор КАК РуководительКонтрагента,
	|	ЗаключениеДоговораАренды.НомерАссортимента,
	|	ЗаключениеДоговораАренды.ДатаНачалаАссортимента КАК ДатаАссортиментаС,
	|	ЗаключениеДоговораАренды.ДатаОкончанияАссортимента КАК ДатаАссортиментаПо
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|ГДЕ
	|	ЗаключениеДоговораАренды.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("Заголовок");		
	Область.Параметры.НомерАссортимента = Шапка.НомерАссортимента;
	Область.Параметры.ДатаАссортиментаС = Формат(Шапка.ДатаАссортиментаС,"ДФ='д ММММ гггг'");
	Область.Параметры.ДатаАссортиментаПо = Формат(Шапка.ДатаАссортиментаПо,"ДФ='д ММММ гггг'");
	ТабДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураАссортимента.Наименование КАК СтруктураАссортимента
	|ИЗ
	|	Справочник.СтруктураАссортимента КАК СтруктураАссортимента
	|ГДЕ
	|	СтруктураАссортимента.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды
	|			ИЗ
	|				Документ.ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	|			ГДЕ
	|				ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды
	|			ИЗ
	|				Документ.ЗаключениеДоговораАренды.ПеременнаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты
	|			ГДЕ
	//+++ AK suvv 14.06.2018 ИП-00018763
	//|				ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка)
	|				ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка и не ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Аванс)
	//--- AK suvv
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураАссортимента";
	
	Ассортимент = Запрос.Выполнить().Выбрать();
	
	НомерСтроки = 1;
	Пока Ассортимент.Следующий() Цикл
		Область.Параметры.Номер = НомерСтроки;
		Область.Параметры.Заполнить(Ассортимент);
		ТабДокумент.Вывести(Область);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
    Область.Параметры.РуководительКонтрагента = Шапка.РуководительКонтрагента;
 		
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьПротоколаСогласованияЦены()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПротоколСогласованияЦены");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Организация
	|		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Организация.НаименованиеПолное
	|		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.НаименованиеПолное
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.ГенеральныйДиректор
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.ГенеральныйДиректор
	|	КОНЕЦ КАК РуководительКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.НаОсновании
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.НаОсновании
	|	КОНЕЦ КАК КонтрагентНаОсновании,
	|	ЗаключениеДоговораАренды.ДоговорКонтрагента КАК Договор,
	|	ЗаключениеДоговораАренды.Дата
	//,
	//|	ЗаключениеДоговораАренды.НомерПротокола,
	//|	ЗаключениеДоговораАренды.ДатаПротокола
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|ГДЕ
	|	ЗаключениеДоговораАренды.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//только для первого листа выводим текст "Приложение 1"
	ОбластьЗаголовка.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьЗаголовка);
	
	Область = Макет.ПолучитьОбласть("Протокол");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.РуководительКонтрагентаРодительныйПадеж = ОбщегоНазначения.ПадежФИО(Шапка.РуководительКонтрагента, 2);
	//Область.Параметры.ДатаПротокола = Формат(Шапка.ДатаПротокола,"ДФ='д ММММ гггг'");
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	
	//теперь для каждого объекта формируем свой протокол согласования
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыАренды.ОбъектАренды,
	|	ОбъектыАренды.УслугаСтавкаНДС КАК СтавкаНДС,
	|	ОбъектыАренды.Количество КАК ПлощадьОбъекта,
	//|	ОбъектыАренды.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОбъекта,
	|	ОбъектыАренды.СпособНачисленияВалюта.Наименование КАК Валюта,
	|	ОбъектыАренды.СпособНачисленияПериодНачисления КАК ПериодНачисления,
	|	ОбъектыАренды.Ставка,
	|	ОбъектыАренды.ДатаНачалаСрокаАренды КАК ДатаНачалаАренды,
	|	ОбъектыАренды.ДатаОкончанияСрокаАренды КАК ДатаОкончанияАренды
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга.СтавкаНДС КАК УслугаСтавкаНДС,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Количество КАК Количество,
	//|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК СпособНачисленияВалюта,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления КАК СпособНачисленияПериодНачисления,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ставка КАК Ставка,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора КАК ДатаНачалаСрокаАренды,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДатаОкончанияДоговора КАК ДатаОкончанияСрокаАренды
	|	ИЗ
	|		Документ.ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	|	ГДЕ
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Услуга.СтавкаНДС,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Количество,
	////|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.ЕдиницаИзмерения.Наименование,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.СпособНачисления.ПериодНачисления,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ставка,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.ДатаНачалаСрокаАренды,
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.ДатаОкончанияСрокаАренды
	//|	ИЗ
	//|		Документ.ЗаключениеДоговораАренды.ПеременнаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты
	//|	ГДЕ
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка
	|) КАК ОбъектыАренды";
	
	
	ОбъектыАренды = Запрос.Выполнить().Выбрать();
	Индекс = 1;
	Пока ОбъектыАренды.Следующий() Цикл
		//Область.Параметры.НомерПротокола = Шапка.НомерПротокола+"\"+Индекс;
		Область.Параметры.Заполнить(ОбъектыАренды);
		Область.Параметры.ДатаНачалаАренды = Формат(ОбъектыАренды.ДатаНачалаАренды,"ДФ='д ММММ гггг'");
		Область.Параметры.ДатаОкончанияАренды = Формат(ОбъектыАренды.ДатаОкончанияАренды,"ДФ='д ММММ гггг'");
		
		ФорматнаяСтрока = "Л=ru_RU;НП=Ложь;НД=Ложь;ДП=Ложь";
		
		Область.Параметры.СтавкаПрописью = НРег(ЧислоПрописью(ОбъектыАренды.Ставка,ФорматнаяСтрока,));
		Область.Параметры.ПериодНачисленияПрописью = НРег(ОбъектыАренды.ПериодНачисления);
		
		Если ЗначениеЗаполнено(ОбъектыАренды.СтавкаНДС) И НЕ (ОбъектыАренды.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС) Тогда
			ТекстНДС = "Арендная плата облагается НДС по ставке "+ОбъектыАренды.СтавкаНДС;
		Иначе
			ТекстНДС = "Арендная плата НДС не облагается";
		КонецЕсли;
		
		Область.Параметры.ТекстНДС = ТекстНДС;
	
		ТабДокумент.Вывести(Область);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Индекс = Индекс+1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПередаточногоАкта()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПередаточныйАкт");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Организация
	|		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Организация.НаименованиеПолное
	|		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.НаименованиеПолное
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.ГенеральныйДиректор
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.ГенеральныйДиректор
	|	КОНЕЦ КАК РуководительКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА ЗаключениеДоговораАренды.Контрагент.НаОсновании
	|		ИНАЧЕ ЗаключениеДоговораАренды.Организация.НаОсновании
	|	КОНЕЦ КАК КонтрагентНаОсновании,
	|	ЗаключениеДоговораАренды.ДоговорКонтрагента КАК Договор,
	|	ЗаключениеДоговораАренды.Дата,
	|	ЗаключениеДоговораАренды.НомерАкта,
	|	ЗаключениеДоговораАренды.ДатаАкта
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|ГДЕ
	|	ЗаключениеДоговораАренды.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//только для первого листа выводим текст "Приложение 1"
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.РуководительКонтрагентаРодительныйПадеж = ОбщегоНазначения.ПадежФИО(Шапка.РуководительКонтрагента, 2);
	Область.Параметры.ДатаАкта = Формат(Шапка.ДатаАкта,"ДФ='д ММММ гггг'");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	
	ТабДокумент.Вывести(Область);
	
	
	//теперь для каждого объекта заполняем таблицу
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыАренды.ОбъектАренды,
	|	ОбъектыАренды.Количество КАК Площадь,
	//|	ОбъектыАренды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОбъектыАренды.ДатаНачалаАренды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ОбъектАренды КАК ОбъектАренды,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Количество КАК Количество,
	//|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Услуга.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора КАК ДатаНачалаАренды
	|	ИЗ
	|		Документ.ЗаключениеДоговораАренды.ПостояннаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты
	|	ГДЕ
	|		ЗаключениеДоговораАрендыПостояннаяЧастьАренднойПлаты.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка.ОбъектАренды.Наименование + ""/"" + ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Услуга.Наименование,
	|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Количество,
	////|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.ЕдиницаИзмерения.Наименование,
	|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка.ДатаЗаключенияДоговора
	|	ИЗ
	|		Документ.ЗаключениеДоговораАренды.ПеременнаяЧастьАренднойПлаты КАК ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты
	|	ГДЕ
	//+++ AK suvv 14.06.2018 ИП-00018763
	//|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка) КАК ОбъектыАренды";
	|		ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Ссылка = &Ссылка и не ЗаключениеДоговораАрендыПеременнаяЧастьАренднойПлаты.Аванс) КАК ОбъектыАренды";
	//--- AK suvv
	
	ОбъектыАренды = Запрос.Выполнить().Выбрать();
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	Индекс = 1;
	Пока ОбъектыАренды.Следующий() Цикл
		Область.Параметры.НомерСтроки = Индекс;
		Область.Параметры.Заполнить(ОбъектыАренды);
		Область.Параметры.ДатаНачалаАренды = Формат(ОбъектыАренды.ДатаНачалаАренды,"ДФ='д ММММ гггг'");
		
		ТабДокумент.Вывести(Область);
			
		Индекс = Индекс+1;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.РуководительОрганизации = Руководители.Руководитель;
	Область.Параметры.РуководительКонтрагента = Шапка.РуководительКонтрагента;
	
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьСчетаНаОплатуДепозита()
	
	Запрос = Новый Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ЗаключениеДоговораАренды.Номер,
	              |	ЗаключениеДоговораАренды.Дата,
	              |	ЗаключениеДоговораАренды.ДоговорКонтрагента,
	              |	ВЫБОР
	              |		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |			ТОГДА ЗаключениеДоговораАренды.Организация
	              |		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент
	              |	КОНЕЦ КАК Организация,
	              |	ВЫБОР
	              |		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |			ТОГДА ЗаключениеДоговораАренды.Организация.ОсновнойБанковскийСчет
	              |		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент.ОсновнойБанковскийСчет
	              |	КОНЕЦ КАК БанковскийСчет,
	              |	ВЫБОР
	              |		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |			ТОГДА ЗаключениеДоговораАренды.Контрагент
	              |		ИНАЧЕ ЗаключениеДоговораАренды.Организация
	              |	КОНЕЦ КАК Получатель,
	              |	ВЫБОР
	              |		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |			ТОГДА ЗаключениеДоговораАренды.Организация
	              |		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент
	              |	КОНЕЦ КАК Руководители,
	              |	ВЫБОР
	              |		КОГДА ЗаключениеДоговораАренды.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |			ТОГДА ЗаключениеДоговораАренды.Организация
	              |		ИНАЧЕ ЗаключениеДоговораАренды.Контрагент
	              |	КОНЕЦ КАК Поставщик,
	              |	ЗаключениеДоговораАренды.СуммаЗалогаБезналичные + ЗаключениеДоговораАренды.СуммаЗалогаНаличные КАК СуммаЗагога,
	              |	ЗаключениеДоговораАренды.СтавкаНДСЗалога,
	              |	ЗаключениеДоговораАренды.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	              |	ИСТИНА КАК УчитыватьНДС,
	              |	ИСТИНА КАК СуммаВключаетНДС
	              |ИЗ
	              |	Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	              |ГДЕ
	              |	ЗаключениеДоговораАренды.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	
	СтруктурнаяЕдиница = Шапка.БанковскийСчет;
	
	
	ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
	ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Банк = ?(НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
		БИК        = Банк.Код;
		КоррСчет   = Банк.КоррСчет;
		ГородБанка = Банк.Город;
		НомерСчета = ВернутьРасчетныйСчет(СтруктурнаяЕдиница);

		ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
		ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
		ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
		ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
		ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктурнаяЕдиница.ТекстКорреспондента) Тогда
		ТекстКорреспондента = СведенияОПоставщике.ПолноеНаименование;
		Если ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов) Тогда
			ТекстКорреспондента = ТекстКорреспондента + " р/с " + СтруктурнаяЕдиница.НомерСчета
			+ " в " + СтруктурнаяЕдиница.Банк + " " + СтруктурнаяЕдиница.Банк.Город;
		КонецЕсли;	
	Иначе
		ТекстКорреспондента = СтруктурнаяЕдиница.ТекстКорреспондента;
	КонецЕсли;		
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ТекстКорреспондента;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	
	СуммаНДСЗалога = УчетНДС.РассчитатьСуммуНДС(Шапка.СуммаЗалога, Истина, Истина,
	            	                                       УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДСЗалога));
	Сумма          = Шапка.СуммаЗалога;
	СуммаНДС       = СуммаНДСЗалога;
	
	Если (не ВалютаДепозита.Пустая()) и (не Шапка.ВалютаДокумента.Пустая())тогда
		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
		ВалютаДепозита, 
		Шапка.ВалютаДокумента,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Курс, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Курс,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Кратность, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Кратность);
		
		СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
		ВалютаДепозита, 
		Шапка.ВалютаДокумента,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Курс, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Курс,
		МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДепозита, Дата).Кратность, 
		МодульВалютногоУчета.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Дата).Кратность);
	КонецЕсли;
	
	ОбластьНомера.Параметры.НомерСтроки = 1;
	ТабДокумент.Вывести(ОбластьНомера);

	ОбластьДанных.Параметры.Товар       = "Страховой депозит по договору "+ДоговорКонтрагента;
	ОбластьДанных.Параметры.Количество  = "1";
	ОбластьДанных.Параметры.Цена = Сумма;
	ОбластьДанных.Параметры.ЕдиницаИзмерения = "<>";
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьСуммы.Параметры.Сумма = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если СуммаНДС <> 0 Тогда
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
		ОбластьСуммы.Параметры.ВсегоНДС = "-";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
	ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;	
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СтруктураАссортимента" Тогда
		
		ТабДокумент = ПечатьСтруктурыАссортимента();
		
	ИначеЕсли ИмяМакета = "ПротоколСогласованияЦены" Тогда
		
		ТабДокумент = ПечатьПротоколаСогласованияЦены();
		
	ИначеЕсли ИмяМакета = "ПередаточныйАкт" Тогда
		
		ТабДокумент = ПечатьПередаточногоАкта();
		
	ИначеЕсли ИмяМакета = "Счет" Тогда
		
		Если УчитыватьЗалог Тогда
			ТабДокумент = ПечатьСчетаНаОплатуДепозита();
		Иначе
			Сообщить("Печать счета на оплату депозита возможно только в том случае, когда установлен признак ""Учитывать депозит""!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), НепосредственнаяПечать);
	
КонецПроцедуры // Печать
#КонецЕсли
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	//СтруктураПечатныхФорм.Вставить("СтруктураАссортимента","Структура ассортимента");
	СтруктураПечатныхФорм.Вставить("ПротоколСогласованияЦены","Протокол согласования цены");
	СтруктураПечатныхФорм.Вставить("ПередаточныйАкт","Передаточный акт");
	СтруктураПечатныхФорм.Вставить("Счет","Счет на оплату депозита");
	//
	//СтруктураПечатныхФорм.Вставить("Счет","Счет на оплату депозита");
	//СтруктураПечатныхФорм.Вставить("Счет","Счет на оплату депозита");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина
		Тогда Возврат;
	КонецЕсли;
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		Отказ = Истина;
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
		Коэффициент = 0;
		ВерхняяГраница = 0;
		НижняяГраница = 0;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
		Курс = 0;
		Кратность = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументПодписан = Ложь;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка = Истина
		Тогда Возврат;
	КонецЕсли;
КонецПроцедуры

//+++АК sils 23.10.2018 ИП-00020193
Процедура РассчитатьСуммуДепозитаМСФО() Экспорт
	Если ВидОперации <> Перечисления.ВидыОперацийДоговоровАренды.САрендодателем Тогда
		СуммаЗалогаМСФО = 0;
		Возврат;
	КонецЕсли;
	ТекДатаКурса = ?(ЗначениеЗаполнено(ДатаАкта), ДатаАкта, ДатаЗаключенияДоговора);
	
	пКурс = 1;
	Если (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ПустаяСсылка())
		ИЛИ (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаОплатыПоследнегоПериодаАренды) Тогда
		пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита)).Курс;
	ИначеЕсли (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.ФиксированнойСуммой) Тогда
		Если ВалютаДепозита = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			пКурс = 1;
		ИначеЕсли ВалютаДепозита = ВалютаСпособаНачисления Тогда
			Если (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.ПустаяСсылка())
					ИЛИ (СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.КурсЦБ) Тогда
				пКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Фиксированный Тогда
				пКурс = Курс;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.СуммаДвухКурсовВалютДеленнаяПололам Тогда
				пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
				пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", Валюта2СпособаНачисления)).Курс;
				ТекКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
				
				Если ТекКурс < НижняяГраница Тогда
					пКурс = НижняяГраница;
				ИначеЕсли (ТекКурс > ВерхняяГраница)
						И (ВерхняяГраница > 0) Тогда
					пКурс = ВерхняяГраница;
				Иначе
					пКурс = ТекКурс;
				КонецЕсли;
				
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаКурсаВалюты.Расчетный Тогда
				ТекКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаСпособаНачисления)).Курс;
				Если ТекКурс < НижняяГраница Тогда
					пКурс = НижняяГраница;
				ИначеЕсли (ТекКурс > ВерхняяГраница)
						И (ВерхняяГраница > 0) Тогда
					пКурс = ВерхняяГраница;
				Иначе
					пКурс = ТекКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (СпособРасчетаЗалога = Перечисления.СпособРасчетаЗалога.СуммаДвухКурсовВалютДеленнаяПололам) Тогда
		пКурсВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита)).Курс;
		пКурсВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДатаКурса, Новый Структура("Валюта", ВалютаДепозита2)).Курс;
		пКурс = (пКурсВалюты1 + пКурсВалюты2) / 2;
	КонецЕсли;
	
	СуммаЗалогаМСФО = СуммаЗалогаБезналичные * пКурс + СуммаЗалогаНаличные * пКурс;
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
//+++АК pozm 11.07.17 ИП-00014695
//СтавкаНДФЛ=13;
СтавкаНДФЛ = ?(Контрагент.НеРезидент,30,13);
//---АК pozm 11.07.17 ИП-00014695

//+++АК ILIK 2018.12.17 ИП-00020685
СпособНачисленияНетОплат = Справочники.СпособыНачисленияАренднойПлаты.НайтиПоНаименованию("нет оплат", Истина);
//---АК ILIK
