Функция Печать(Ссылка) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати="АКИнвентаризация";
	Макет = Документы.ИнвентаризацияСклад.ПолучитьМакет("Инвентаризация");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияСклад.Ссылка,
	               |	ИнвентаризацияСклад.ВерсияДанных,
	               |	ИнвентаризацияСклад.ПометкаУдаления,
	               |	ИнвентаризацияСклад.Номер,
	               |	ИнвентаризацияСклад.Дата,
	               |	ИнвентаризацияСклад.Проведен,
	               |	ИнвентаризацияСклад.Склад,
				   //+++АК SHEP 2018.04.06 ИП-00018324
				   |	ИнвентаризацияСклад.ОтветственныйСборщик,
				   //---АК SHEP 2018.04.06
	               |	ИнвентаризацияСклад.Автор,
	               |	ИнвентаризацияСклад.Товары.(
	               |		Ссылка,
	               |		НомерСтроки,
	               |		Номенклатура,
	               |		Характеристика,
				   |		ДатаПроизводства,
	               |		ЕдиницаИзмерения,
	               |		Количество
	               |	)
	               |ИЗ
	               |	Документ.ИнвентаризацияСклад КАК ИнвентаризацияСклад
	               |ГДЕ
	               |	ИнвентаризацияСклад.Ссылка = &Ссылка" ;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");
	

	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());

		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ВыборкаНоменклатура = Выборка.Товары.Выбрать();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			ТабДок.Вывести(ОбластьСтрока, ВыборкаНоменклатура.Уровень());
		КонецЦикла;

		ОбластьВремяПечати.Параметры.ВремяПечати = "["+ТекущаяДата()+"] "+"Автор: "+Выборка.Автор;
		
		ТабДок.Вывести(ОбластьПодвал);

		ВставлятьРазделительСтраниц = Истина;
		ТабДок.Вывести(ОбластьВремяПечати);
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции
	
Функция СличительнаяВедомость(Ссылка) Экспорт 
	
	ТабДок	= Новый ТабличныйДокумент;
	Макет 	= Документы.ИнвентаризацияСклад.ПолучитьМакет("СличительнаяВедомость");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладТовары.Склад
	|		ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
	|	КОНЕЦ КАК Склад,
	|	ИнвентаризацияСкладТовары.Номенклатура,
	|	ИнвентаризацияСкладТовары.Характеристика,
	|	ИнвентаризацияСкладТовары.ДатаПроизводства,
	|	ИнвентаризацияСкладТовары.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
	|ГДЕ
	|	ИнвентаризацияСкладТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ДатаПроизводства,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения,
	|	СУММА(ТоварыНаСкладахОбороты.КоличествоОборот) КАК КоличествоОборот
	|ПОМЕСТИТЬ ДвиженияПослеИнвентаризации
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			&Период,
	|			,
	|			Регистратор,
	|			(Склад, Номенклатура, Характеристика, ДатаПроизводства, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ
	|					ТаблицаТоваров.Склад,
	|					ТаблицаТоваров.Номенклатура,
	|					ТаблицаТоваров.Характеристика,
	|					ТаблицаТоваров.ДатаПроизводства,
	|					ТаблицаТоваров.ЕдиницаИзмерения
	|				ИЗ
	|					ТаблицаТоваров)) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ТоварыНаСкладахОбороты.Регистратор.Дата < &Период
	|	И ТоварыНаСкладахОбороты.Регистратор.Ссылка <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ДатаПроизводства,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияСкладНоменклатура.Ссылка КАК Ссылка,
	|	ИнвентаризацияСкладНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияСкладНоменклатура.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияСкладНоменклатура.Характеристика КАК Характеристика,
	|	ИнвентаризацияСкладНоменклатура.ДатаПроизводства КАК ДатаПроизводства,
	|	ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) КАК КоличествоФакт,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) - СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) + ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) КАК КоличествоУчет,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.ПометкаУдаления,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Номер,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|		ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|	КОНЕЦ КАК Склад,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Автор,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) - ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) КАК Расхождение,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) - ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаРасхождения
	|ИЗ
	|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, ) КАК ТоварыНаСкладахОбороты
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = ТоварыНаСкладахОбороты.Номенклатура
	|			И ИнвентаризацияСкладНоменклатура.Характеристика = ТоварыНаСкладахОбороты.Характеристика
	|			И ИнвентаризацияСкладНоменклатура.ДатаПроизводства = ТоварыНаСкладахОбороты.ДатаПроизводства
	|			И ИнвентаризацияСкладНоменклатура.Ссылка = ТоварыНаСкладахОбороты.Регистратор
	|			И (ВЫБОР
	|				КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|					ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|				ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|			КОНЕЦ = ТоварыНаСкладахОбороты.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПослеИнвентаризации КАК ДвиженияПослеИнвентаризации
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = ДвиженияПослеИнвентаризации.Номенклатура
	|			И ИнвентаризацияСкладНоменклатура.Характеристика = ДвиженияПослеИнвентаризации.Характеристика
	|			И ИнвентаризацияСкладНоменклатура.ДатаПроизводства = ДвиженияПослеИнвентаризации.ДатаПроизводства
	|			И ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения = ДвиженияПослеИнвентаризации.ЕдиницаИзмерения
	|			И (ВЫБОР
	|				КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|					ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|				ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|			КОНЕЦ = ДвиженияПослеИнвентаризации.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаКон, ) КАК СебестоимостьТоваровСрезПоследних
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
	|ГДЕ
	|	ИнвентаризацияСкладНоменклатура.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияСкладНоменклатура.Номенклатура,
	|	ИнвентаризацияСкладНоменклатура.Характеристика,
	|	ИнвентаризацияСкладНоменклатура.ДатаПроизводства,
	|	ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения,
	|	ИнвентаризацияСкладНоменклатура.Ссылка,
	|	ИнвентаризацияСкладНоменклатура.НомерСтроки,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.ПометкаУдаления,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Номер,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Дата,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Автор,
	|	ДвиженияПослеИнвентаризации.КоличествоОборот,
	|	СебестоимостьТоваровСрезПоследних.Себестоимость,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|		ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Ссылка.Дата);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Ссылка.Дата));

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Ссылка");

	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");
	
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
 
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ВыборкаНоменклатура = Выборка.Выбрать();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			ТабДок.Вывести(ОбластьСтрока, ВыборкаНоменклатура.Уровень());
		КонецЦикла;

		ОбластьВремяПечати.Параметры.ВремяПечати = "["+ТекущаяДата()+"] "+"Автор: "+Выборка.Автор;
		
		ТабДок.Вывести(ОбластьПодвал);

		ВставлятьРазделительСтраниц = Истина;
		ТабДок.Вывести(ОбластьВремяПечати);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьУчетноеКоличество(Склад, Период, Номенклатура, Характеристика, ЕдиницаИзмерения)Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&Период,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ЕдиницаИзмерения = &ЕдиницаИзмерения) КАК ТоварыНаСкладахОстатки"
	);
				   
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Период",				Период);
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 	Характеристика);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.КоличествоОстаток;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


Функция ПечатьИНВ19(МассивОбъектов ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ВалютаПечати = ВалютаРегламентированногоУчета;
	Шапка = ПолучитьВыборкуШапок(МассивОбъектов);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
	
	//СисИнфо = Новый СистемнаяИнформация;
	//Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
	//	ТабДокумент.ПолеСлева          = 0;
	//Иначе
	//	ТабДокумент.ПолеСлева          = 20;
	//	ТабДокумент.ПолеСправа         = 0;
	//КонецЕсли;

	
	// Получение областей макета.
	Макет = Документы.ИнвентаризацияСклад.ПолучитьМакет("ИНВ19");
	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		//ЧленКомиссии = Шапка.ИнвентаризационнаяКомиссия.Выбрать();
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоТаблицы1");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

		// Вывод шапки документа.
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Ссылка.Склад.Владелец.Организация, Шапка.Ссылка.Дата);
		ПредставлениеОрганизации = СведенияОбОрганизации.НаименованиеСокращенное;
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = ?(ЗначениеЗаполнено(СведенияОбОрганизации.КодПоОКПО),СведенияОбОрганизации.КодПоОКПО,"-");
		ОбластьМакетаШапка.Параметры.ДатаДокумента            = Шапка.Ссылка.Дата;
		ОбластьМакетаШапка.Параметры.ДатаНачалаИнвентаризации = Шапка.Ссылка.Дата;
		ОбластьМакетаШапка.Параметры.ДатаОкончанияИнвентаризации = Шапка.Ссылка.Дата;
		
		ОбластьМакетаШапка.Параметры.ДокументОснованиеВид     ="распоряжение";
		ОбластьМакетаШапка.Параметры.НомерДокумента           =Прав("000000000"+Шапка.Ссылка.Номер,9) ;
		
		//ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.Дата);
		//ОбластьМакетаШапка.Параметры.ДолжностьМОЛ1     = ДанныеМОЛ.Должность;
		//ОбластьМакетаШапка.Параметры.ФИОМОЛ1           = ДанныеМОЛ.Представление;
		ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = Шапка.Ссылка.Склад;

		//Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);

		ТабДокумент.Вывести(ОбластьМакетаШапка);
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		НомерСтраницы   = 2;
		НомерСтроки     = 1;
		ВыборкаСтрокТовары = Шапка.Выбрать();
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();

		ИтогоРезультатИзлишекКоличество   = 0;
		ИтогоРезультатИзлишекСумма        = 0;
		ИтогоРезультатНедостачаКоличество = 0;
		ИтогоРезультатНедостачаСумма      = 0;

		// Вывод заголовка таблицы.
		//ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
        ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		// Вывод многострочной части докмента.
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			//ОбластьМакетаСтрока.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар), 
			//												ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварКратко);

			Разница     = 0;
			РазницаСумм = 0;

			Разница     = ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.КоличествоПоУчету;
			РазницаСумм = ВыборкаСтрокТовары.Сумма      - ВыборкаСтрокТовары.СуммаПоУчету;
			
			//Если Разница = 0 Тогда
			//	Продолжить;
			//КонецЕсли;

			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
												  
			Если Разница < 0 Тогда
				
				ОбластьМакетаСтрока.Параметры.РезультатНедостачаКоличество = - Разница;
				ОбластьМакетаСтрока.Параметры.РезультатНедостачаСумма      = - РазницаСумм;
				ОбластьМакетаСтрока.Параметры.РезультатИзлишекКоличество   = 0;
				ОбластьМакетаСтрока.Параметры.РезультатИзлишекСумма        = 0;

				ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + ( - Разница);
				ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + ( - РазницаСумм);
				ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + 0;
				ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + 0;
				
			Иначе
				
				ОбластьМакетаСтрока.Параметры.РезультатНедостачаКоличество = 0;
				ОбластьМакетаСтрока.Параметры.РезультатНедостачаСумма      = 0;
				ОбластьМакетаСтрока.Параметры.РезультатИзлишекКоличество   = Разница;
				ОбластьМакетаСтрока.Параметры.РезультатИзлишекСумма        = РазницаСумм;

				ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + 0;
				ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + 0;
				ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + Разница;
				ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + РазницаСумм;
				
			КонецЕсли;

			// Проверка вывода.
			СтрокаСПодвалом = Новый Массив();
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			//СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			
			Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок <> 1 Тогда
			
					// Вывод итого по странице.
					//ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					// Вывод разделителя страниц.
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Вывод заголовка таблицы.
					НомерСтраницы = НомерСтраницы + 1;
					//ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;

			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;

		// Вывод итого по странице.
		//ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма;
		//ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма;
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Вывод подвала.
		//ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		//ОбластьМакетаПодвал.Параметры.ФИОБухгалтера = Руководители.ГлавныйБухгалтерПредставление;
		//ОбластьМакетаПодвал.Параметры.ДолжностьМОЛ1 = ДанныеМОЛ.Должность;
		//ОбластьМакетаПодвал.Параметры.ФИОМОЛ1 = ДанныеМОЛ.Представление;
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			//НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;	//Шапки.Следующий() 

	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьВыборкуШапок(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладТовары.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладТовары.Склад
	|		ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
	|	КОНЕЦ КАК Склад,
	|	ИнвентаризацияСкладТовары.Номенклатура,
	|	ИнвентаризацияСкладТовары.Характеристика,
	|	ИнвентаризацияСкладТовары.ДатаПроизводства,
	|	ИнвентаризацияСкладТовары.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
	|ГДЕ
	|	ИнвентаризацияСкладТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ДатаПроизводства,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения,
	|	СУММА(ТоварыНаСкладахОбороты.КоличествоОборот) КАК КоличествоОборот
	|ПОМЕСТИТЬ ДвиженияПослеИнвентаризации
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			&Период,
	|			,
	|			Регистратор,
	|			(Склад, Номенклатура, Характеристика, ДатаПроизводства, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ
	|					ТаблицаТоваров.Склад,
	|					ТаблицаТоваров.Номенклатура,
	|					ТаблицаТоваров.Характеристика,
	|					ТаблицаТоваров.ДатаПроизводства,
	|					ТаблицаТоваров.ЕдиницаИзмерения
	|				ИЗ
	|					ТаблицаТоваров)) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ТоварыНаСкладахОбороты.Регистратор.Дата < &Период
	|	И ТоварыНаСкладахОбороты.Регистратор.Ссылка <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ДатаПроизводства,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияСкладНоменклатура.Ссылка КАК Ссылка,
	|	ИнвентаризацияСкладНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияСкладНоменклатура.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияСкладНоменклатура.Характеристика КАК Характеристика,
	|	ИнвентаризацияСкладНоменклатура.ДатаПроизводства КАК ДатаПроизводства,
	|	ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) КАК Количество,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) - СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) + ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) КАК КоличествоПоУчету,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК Сумма,
	|	СУММА(ИнвентаризацияСкладНоменклатура.Количество) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) - СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) + ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаПоУчету,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.ПометкаУдаления,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Номер,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|		ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|	КОНЕЦ КАК Склад,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Автор,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) - ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) КАК Расхождение,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.КоличествоОборот, 0)) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) - ЕСТЬNULL(ДвиженияПослеИнвентаризации.КоличествоОборот, 0) * ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК СуммаРасхождения
	|ИЗ
	|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, ) КАК ТоварыНаСкладахОбороты
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = ТоварыНаСкладахОбороты.Номенклатура
	|			И ИнвентаризацияСкладНоменклатура.Характеристика = ТоварыНаСкладахОбороты.Характеристика
	|			И ИнвентаризацияСкладНоменклатура.ДатаПроизводства = ТоварыНаСкладахОбороты.ДатаПроизводства
	|			И ИнвентаризацияСкладНоменклатура.Ссылка = ТоварыНаСкладахОбороты.Регистратор
	|			И (ВЫБОР
	|				КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|					ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|				ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|			КОНЕЦ = ТоварыНаСкладахОбороты.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПослеИнвентаризации КАК ДвиженияПослеИнвентаризации
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = ДвиженияПослеИнвентаризации.Номенклатура
	|			И ИнвентаризацияСкладНоменклатура.Характеристика = ДвиженияПослеИнвентаризации.Характеристика
	|			И ИнвентаризацияСкладНоменклатура.ДатаПроизводства = ДвиженияПослеИнвентаризации.ДатаПроизводства
	|			И ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения = ДвиженияПослеИнвентаризации.ЕдиницаИзмерения
	|			И (ВЫБОР
	|				КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|					ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|				ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|			КОНЕЦ = ДвиженияПослеИнвентаризации.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаКон, ) КАК СебестоимостьТоваровСрезПоследних
	|		ПО ИнвентаризацияСкладНоменклатура.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
	|ГДЕ
	|	ИнвентаризацияСкладНоменклатура.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияСкладНоменклатура.Номенклатура,
	|	ИнвентаризацияСкладНоменклатура.Характеристика,
	|	ИнвентаризацияСкладНоменклатура.ДатаПроизводства,
	|	ИнвентаризацияСкладНоменклатура.ЕдиницаИзмерения,
	|	ИнвентаризацияСкладНоменклатура.Ссылка,
	|	ИнвентаризацияСкладНоменклатура.НомерСтроки,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.ПометкаУдаления,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Номер,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Дата,
	|	ИнвентаризацияСкладНоменклатура.Ссылка.Автор,
	|	ДвиженияПослеИнвентаризации.КоличествоОборот,
	|	СебестоимостьТоваровСрезПоследних.Себестоимость,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияСкладНоменклатура.Ссылка.ПоНесколькимСкладам
	|			ТОГДА ИнвентаризацияСкладНоменклатура.Склад
	|		ИНАЧЕ ИнвентаризацияСкладНоменклатура.Ссылка.Склад
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Ссылка.Дата);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Ссылка.Дата));


	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции	


Процедура АктНаСписание(ТабДок, Ссылка,ВидАкта = "НА СПИСАНИЕ") Экспорт
	//ВидАкта = "НА СПИСАНИЕ";
	
	Макет = Документы.ИнвентаризацияСклад.ПолучитьМакет("АктНаСписание");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияСклад.Автор,
	|	ИнвентаризацияСклад.Дата,
	|	ИнвентаризацияСклад.Склад.Контрагент КАК Контрагент,
	|	ИнвентаризацияСклад.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Количество,
	|		0 КАК Сумма
	|	),
	|	ИнвентаризацияСклад.Склад.Контрагент.ОсновнойМенеджерПокупателя КАК МенеджерПокупателя,
	|	ИнвентаризацияСклад.Склад.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо КАК МенеджерПокупателяФизЛицо,
	|	ИнвентаризацияСклад.Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияСклад КАК ИнвентаризацияСклад
	|ГДЕ
	|	ИнвентаризацияСклад.Ссылка В(&Ссылка)";
	//|	И ИнвентаризацияСклад.Товары.Количество <> 0";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьТоварыШапка = Макет.ПолучитьОбласть("ТоварыШапка");
	ОбластьТовары = Макет.ПолучитьОбласть("Товары");
	ТабДок.Очистить();
    ТоварыСч =  ПланыСчетов.Финансовый.МатералыДляВыпуска;
	ВставлятьРазделительСтраниц = Ложь;
	Технолог = "";
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ДатаФормат = Формат(Выборка.Дата,"ДЛФ=DD");
		
		ОбластьЗаголовок.Параметры.Дата1 = ДатаФормат;
		ТабДок.Вывести(ОбластьЗаголовок);
		ОбластьТоварыШапка.Параметры.ВИДАКТА = ВидАкта;
		ТабДок.Вывести(ОбластьТоварыШапка);
		ВыборкаТовары = Выборка.Товары.Выбрать();
		//Пока ВыборкаТовары.Следующий() Цикл
		//	ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
		//	ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
		//КонецЦикла;
		СуммаКПрописи = 0;

		Если ВидАкта = "НА ОПРИХОДОВАНИЕ" Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФинансовыйДвиженияССубконто.СубконтоДт2.Контрагент.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя
			|ИЗ
			|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
			|			,
			|			,
			|			Регистратор = &Регистратор
			|				И СчетДт = &СчетДт,
			|			,
			|			) КАК ФинансовыйДвиженияССубконто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ФинансовыйДвиженияССубконто.СубконтоДт1 КАК Номенклатура,
			|	ФинансовыйДвиженияССубконто.КоличествоДт КАК Количество,
			|	ФинансовыйДвиженияССубконто.Сумма
			|ИЗ
			|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
			|			,
			|			,
			|			Регистратор = &Регистратор
			|				И СчетДт = &СчетДт,
			|			,
			|			) КАК ФинансовыйДвиженияССубконто";
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Ссылка);
			Запрос.УстановитьПараметр("СчетДт", ТоварыСч);
			
			Результат = Запрос.ВыполнитьПакет();
			ВыборкаТехнолог = Результат[0].Выбрать();
			Если ВыборкаТехнолог.Следующий() Тогда
				Технолог = ВыборкаТехнолог.ОсновнойМенеджерПокупателя;
				Если ВыборкаТехнолог.Следующий() Тогда
					Технолог = "";
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
			НомерПП = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбластьТовары.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ОбластьТовары.Параметры.НомерСтроки = НомерПП;
				НомерПП = НомерПП + 1;
				ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());	
				СуммаКПрописи = СуммаКПрописи + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФинансовыйДвиженияССубконто.СубконтоДт2.Контрагент.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя
			|ИЗ
			|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
			|			,
			|			,
			|			Регистратор = &Регистратор
			|				И СчетДт = &СчетДт,
			|			,
			|			) КАК ФинансовыйДвиженияССубконто
			|;
			|////////////////////////////////////////////////////////////////////////////////			
			|ВЫБРАТЬ
			|	ФинансовыйДвиженияССубконто.СубконтоКт1 КАК Номенклатура,
			|	ФинансовыйДвиженияССубконто.КоличествоКт КАК Количество,
			|	ФинансовыйДвиженияССубконто.Сумма
			|ИЗ
			|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
			|			,
			|			,
			|			Регистратор = &Регистратор
			|				И СчетКт = &СчетДт,
			|			,
			|			) КАК ФинансовыйДвиженияССубконто";
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Ссылка);
			Запрос.УстановитьПараметр("СчетДт", ТоварыСч);
			
			Результат = Запрос.ВыполнитьПакет();
			ВыборкаТехнолог = Результат[0].Выбрать();
			Если ВыборкаТехнолог.Следующий() Тогда
				Технолог = ВыборкаТехнолог.ОсновнойМенеджерПокупателя;
				Если ВыборкаТехнолог.Следующий() Тогда
					Технолог = "";
				КонецЕсли;
			КонецЕсли;

			ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
			
			НомерПП = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбластьТовары.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ОбластьТовары.Параметры.НомерСтроки = НомерПП;				
				НомерПП = НомерПП + 1;				
				ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());	
				СуммаКПрописи = СуммаКПрописи + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;

		КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		Подвал.Параметры.Заполнить(Выборка);
		Подвал.Параметры.Дата1 = ДатаФормат;
		Если ЗначениеЗаполнено(Технолог) Тогда 
			Подвал.Параметры.ФИОКЛАДОВЩИК = Технолог;
		Иначе
			 Подвал.Параметры.ФИОКЛАДОВЩИК = "________________________";
		КонецЕсли;
				Подвал.Параметры.СуммаПрописью =  ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Справочники.Валюты.НайтиПоКоду("643"));

		
		Если ВидАкта = "НА ОПРИХОДОВАНИЕ" Тогда 	 
			Подвал.Параметры.ОпрСпи =  "оприходования";
		Иначе 
			Подвал.Параметры.ОпрСпи =  "списания";		 
		КонецЕсли;
		
		ТабДок.Вывести(Подвал);

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	//}}
КонецПроцедуры
	
//АК БЕЛН 20170919+
Процедура ЗаполнитьПросрочки(ДокОбъект) Экспорт
	ТЗТовары=ДокОбъект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Характеристика,
		|	ТЗ.ДатаПроизводства
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ВЫБОР
		|		КОГДА вт.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
		|				И НЕ ХарактеристикиНоменклатуры.Ссылка.СрокГодности = 0
		|			ТОГДА ВЫБОР
		|					КОГДА РАЗНОСТЬДАТ(вт.ДатаПроизводства, &КонецПериода, ДЕНЬ) <= ХарактеристикиНоменклатуры.Ссылка.СрокГодности * ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка.ТипСрокаГодности.КоэффициентВСутках, 0) / 2
		|						ТОГДА 1
		|					КОГДА РАЗНОСТЬДАТ(вт.ДатаПроизводства, &КонецПериода, ДЕНЬ) <= ХарактеристикиНоменклатуры.Ссылка.СрокГодности * ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка.ТипСрокаГодности.КоэффициентВСутках, 0) * 2 / 3
		|						ТОГДА 2
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Просрочка,
		|	вт.ДатаПроизводства
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|		ПО ХарактеристикиНоменклатуры.Ссылка = вт.Характеристика";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗТовары);
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(ДокОбъект.Дата));
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗПросрочка = РезультатЗапроса.Выгрузить();
	
	Для каждого Стр Из ДокОбъект.Товары Цикл
		МасСтр=ТЗПросрочка.НайтиСтроки(Новый Структура("Характеристика,ДатаПроизводства",Стр.Характеристика,Стр.ДатаПроизводства));
		Если МасСтр.Количество() Тогда
			Стр.Просрочка=МасСтр[0].Просрочка;
		Иначе	
			Стр.Просрочка=0;
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры
//АК БЕЛН 20170919-

#Область ДвиженияДокумента

//+++АК LATV 2018.06.23 ИП-00018971
Функция ДвиженияДокумента(Ссылка) Экспорт

	ДвиженияДокумента = Новый Структура();
	ДвиженияДокумента.Вставить("Финансовый", СформироватьДвижения_Финансовый(Ссылка));
	
	Возврат ДвиженияДокумента;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Функция СформироватьДвижения_Финансовый(Ссылка) Экспорт

	// Инициализация
	Отказ = Ложь;
	
	ДвиженияФин = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	
	// Получение данных документа
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Дата, Организация");
	
	// Формирование движений
	ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ);
	
	// Итоговые действия с движениями
	Если ДанныеДокумента.Дата >= Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		тзНеразделямыеКомплекты = Товародвижение.АК_РазобратьКомплектыВДвиженияхПо41Счёту(ДвиженияФин, Ссылка);
		
		Если тзНеразделямыеКомплекты.Количество() <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
			Для Каждого Стр Из тзНеразделямыеКомплекты Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Комплект ""%1"" невозможно разбить на составляющие из-за нулевого количества всех составляющих комплекта'")
					, Стр["Наименование"]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение результата
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДвижений = ДвиженияФин.Выгрузить();
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Возврат ТаблицаДвижений;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Процедура ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ)

	Если ДанныеДокумента.Дата < Дата(2013, 12, 1) Тогда
		Возврат;
	КонецЕсли;
	
	//mind для всех товаров у которых счет учета не входит в 41 не нужно проводить движения по бух (вопрос Верени по счету 10.6)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",	ДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Дата",			ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("ЦФОВсе",			Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладах.Склад.Владелец КАК СтруктурнаяЕдиница,
		|	ТоварыНаСкладах.Номенклатура,
		|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
		|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладах.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА &ЦФОВсе
		|		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
		|	КОНЕЦ КАК ЦФО,
		|	ТоварыНаСкладах.Склад.Владелец.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ТоварыНаСкладах.Номенклатура.ТипТовара КАК ТипТовара,
		|	ТоварыНаСкладах.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТоварыНаСкладах.Склад
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|		ПО ТоварыНаСкладах.Склад.Владелец = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&Дата, ) КАК СчетаУчетаНоменклатурыСрезПоследних
		|		ПО ТоварыНаСкладах.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	ТоварыНаСкладах.Регистратор = &Регистратор
		//|	И ВЫБОР
		//|			КОГДА СчетаУчетаНоменклатурыСрезПоследних.СчетУчета ЕСТЬ NULL
		////+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		 
		////|					ИЛИ СчетаУчетаНоменклатурыСрезПоследних.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ))
		//|					ИЛИ СчетаУчетаНоменклатурыСрезПоследних.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ТМЦ), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеМатериалы))
		////---АК Susk (Суслин К.В.) 
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладах.Склад.Владелец,
		|	ТоварыНаСкладах.Номенклатура,
		|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
		|	ТоварыНаСкладах.Склад.Владелец.ТипСтруктурнойЕдиницы,
		|	ТоварыНаСкладах.Номенклатура.ТипТовара,
		|	ТоварыНаСкладах.Склад,
		|	ТоварыНаСкладах.Номенклатура.ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1
		|ИЗ
		|	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&Дата, ) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнвентаризацияСкладТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
		|ГДЕ
		|	ИнвентаризацияСкладТовары.Ссылка = &Регистратор";
	
	// Отражать движение только если склад не равен
	// СкладДегустация, СкладСписаниеПоСроку, СкладСписаниеПоКачеству заполненных у владельца реквизита Склад
	Результаты = Запрос.ВыполнитьПакет();
	ТекСтрокаТовары	= Результаты[0].Выбрать();
	ТабНастройки	= Результаты[1].Выгрузить();
	ТабТовары		= Результаты[2].Выгрузить();
	ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(ТабТовары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
	ТипыСтруктурныхЕдиницРозница = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	
	СтруктурныеЕдиницыСторонняяПереработка	= ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(ДанныеДокумента.Организация);
	ТипыТоваровУпаковка						= Перечисления.ТипыТоваров.Упаковка;
	ВидНоменклатурыТовар					= Перечисления.ВидыНоменклатуры.Товар;
	
	СчетТовары		= ПланыСчетов.Финансовый.Товары;
	СчетМатериалы	= ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02	 
	СчетПрочиеМатериалы = ПланыСчетов.Финансовый.ПрочиеМатериалы;
	//---АК Susk (Суслин К.В.) 
	
	ОрганизацияВкусВилл = АК_УчетМСФО.ОрганизацияВкусВилл(ДанныеДокумента.Дата);
	ОрганизацияДвижений = ?(ЗначениеЗаполнено(ДанныеДокумента.Организация), ДанныеДокумента.Организация, ОрганизацияВкусВилл);
	
	//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02	 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, ДанныеДокумента.Дата);
	
	МассивНоменклатур = Новый Массив;
	
	Пока ТекСтрокаТовары.Следующий() Цикл
		МассивНоменклатур.Добавить(ТекСтрокаТовары.Номенклатура);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатур);
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатур, ДанныеДокумента.Дата);
	
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатур, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	
	ТекСтрокаТовары.Сбросить();
	//---АК Susk (Суслин К.В.) 
	
	Пока ТекСтрокаТовары.Следующий() Цикл
		
		//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
		
		//Если ТекСтрокаТовары.ВидНоменклатуры <> ВидНоменклатурыТовар Тогда
		//	Продолжить;
		//КонецЕсли;			
				
		//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");		
		СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);	
		
		Сообщить(Строка(ТекСтрокаТовары.Номенклатура) + " " + Строка(СтрокаСчетУчета.СчетУчета));
		
		Если СтрокаСчетУчета.СчетУчета <> СчетТовары И СтрокаСчетУчета.СчетУчета <> СчетМатериалы И СтрокаСчетУчета.СчетУчета <> СчетПрочиеМатериалы Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
			
			НайдЗначенияРеквизитов = ЗначенияРеквизитовНом.Получить(ТекСтрокаТовары.Номенклатура);
		
			Если НайдЗначенияРеквизитов["ВидНоменклатуры"] <> Перечисления.ВидыНоменклатуры.Материал Тогда
				Продолжить;
			Иначе	
				Если НайдЗначенияРеквизитов["РекламныйМатериал"] ИЛИ НайдЗначенияРеквизитов["НеУчитыватьВЗакрытииМесяца"] Тогда		
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		// Недостача
		Если ТекСтрокаТовары.Количество < 0 Тогда
			
			Если ТекСтрокаТовары.ТипСтруктурнойЕдиницы = ТипыСтруктурныхЕдиницРозница Тогда
				СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл, "ВидОперации");
			Иначе
				Если ТекСтрокаТовары.СтруктурнаяЕдиница = СтруктурныеЕдиницыСторонняяПереработка Тогда
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиПроизводителей, "ВидОперации");
					Иначе	
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиСырьяПроизводителей, "ВидОперации");
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиУпаковки, "ВидОперации");
					Иначе	
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_Излишки, "ВидОперации");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				ПроводкаНедостачи = ДвиженияФин.Добавить();
				
				ПроводкаНедостачи.Период 		= ДанныеДокумента.Дата;
				ПроводкаНедостачи.НомерЖурнала	= "ТД";
				ПроводкаНедостачи.Организация	= ОрганизацияДвижений;
				
				// Дт
				ПроводкаНедостачи.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаНедостачи.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ТекСтрокаТовары.ЦФО);
				
				Если СтрокаСчетУчета <> Неопределено
				   И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаНедостачи.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаНедостачи.КоличествоКт						= -ТекСтрокаТовары.Количество;
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= ТекСтрокаТовары.СтруктурнаяЕдиница;
						ПроводкаНедостачи.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаНедостачи.Содержание						= "Недостача товара";
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаНедостачи.КоличествоКт 						= -ТекСтрокаТовары.Количество;
						ПроводкаНедостачи.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= ТекСтрокаТовары.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаНедостачи.Содержание						= "Недостача упаковки";					
					Иначе
						ПроводкаНедостачи.КоличествоКт 						= -ТекСтрокаТовары.Количество;
						ПроводкаНедостачи.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
					
				Иначе
					// Кт
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаНедостачи.КоличествоКт 						= -ТекСтрокаТовары.Количество;
						ПроводкаНедостачи.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= ТекСтрокаТовары.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаНедостачи.Содержание						= "Недостача упаковки";
					Иначе
						ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
						ПроводкаНедостачи.КоличествоКт 						= -ТекСтрокаТовары.Количество;
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= ТекСтрокаТовары.СтруктурнаяЕдиница;
						ПроводкаНедостачи.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаНедостачи.Содержание						= "Недостача товара";
					КонецЕсли;
				КонецЕсли;
				
				СтрСебестоимость = ТабСебестоимость.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
				ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				
			КонецЕсли;
			
		// Излишки
		ИначеЕсли ТекСтрокаТовары.Количество > 0 Тогда
			
			Если ТекСтрокаТовары.ТипСтруктурнойЕдиницы = ТипыСтруктурныхЕдиницРозница Тогда
				СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл, "ВидОперации");
			Иначе
				Если ТекСтрокаТовары.СтруктурнаяЕдиница = СтруктурныеЕдиницыСторонняяПереработка Тогда
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиПроизводителей, "ВидОперации");
					Иначе
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиСырьяПроизводителей, "ВидОперации");
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиУпаковки, "ВидОперации");
					Иначе
						СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_Недостачи, "ВидОперации");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				
				ПроводкаИзлишки.Период 			= ДанныеДокумента.Дата;
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Организация		= ОрганизацияДвижений;
				
				// Дт
				Если СтрокаСчетУчета <> Неопределено
				   И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетДт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.КоличествоДт 					= ТекСтрокаТовары.Количество;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= ТекСтрокаТовары.СтруктурнаяЕдиница;
						ПроводкаИзлишки.СубконтоДт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаИзлишки.Содержание						= "Излишки товара";
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.КоличествоДт 					= ТекСтрокаТовары.Количество;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= ТекСтрокаТовары.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаИзлишки.Содержание						= "Излишки упаковки";
					Иначе
						ПроводкаИзлишки.КоличествоДт 					= ТекСтрокаТовары.Количество;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.ТипТовара = ТипыТоваровУпаковка Тогда
						ПроводкаИзлишки.СчетДт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаИзлишки.КоличествоДт 					= ТекСтрокаТовары.Количество;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= ТекСтрокаТовары.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаИзлишки.Содержание						= "Излишки упаковки";
					Иначе
						ПроводкаИзлишки.СчетДт 							= ПланыСчетов.Финансовый.Товары;
						ПроводкаИзлишки.КоличествоДт 					= ТекСтрокаТовары.Количество;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= ТекСтрокаТовары.СтруктурнаяЕдиница;
						ПроводкаИзлишки.СубконтоДт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						ПроводкаИзлишки.Содержание						= "Излишки товара";
					КонецЕсли;
				КонецЕсли;
				
				// Кт
				ПроводкаИзлишки.СчетКт = СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоКт.ЦФО 						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ТекСтрокаТовары.ЦФО);
				
				СтрСебестоимость = ТабСебестоимость.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоДт * СтрСебестоимость.Себестоимость;
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
