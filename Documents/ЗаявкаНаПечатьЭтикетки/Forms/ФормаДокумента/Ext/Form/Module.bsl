
///////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолныйВыборПоСкладу()
	
	//Если ЗначениеЗаполнено(Объект.Склад.Владелец) Тогда
		Разрешено = Ложь;
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат поставщику") > 0);
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат покупателя") > 0);
		//+++АК SHEP 2018.05.03 ИП-00018453
		//Разрешено = Разрешено ИЛИ Объект.Склад.Владелец = Справочники.СтруктурныеЕдиницы.СторонняяПереработка;
		Разрешено = Разрешено ИЛИ Объект.Склад.Владелец.СторонняяПереработка;
		//---АК SHEP 2018.05.03
		Возврат Разрешено
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;	
	
КонецФункции

&НаСервере
Функция НаОснованииЗаявкиБылВведенРО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСклад.Ссылка
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	               |ГДЕ
	               |	РасходныйОрдерСклад.Основание = &Основание
	               |	И РасходныйОрдерСклад.Проведен";
				   
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

&НаСервере
Функция ЗаполнитьСписокПодбораНОменклатурыСервер(Текст)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникНоменклатура.Ссылка КАК Ссылка,
	               |	СправочникНоменклатура.ЭтоГруппа,
	               |	СправочникНоменклатура.Родитель,
	               |	СправочникНоменклатура.Наименование
	               |ИЗ
	               |	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК ЦеныПоставщиковСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ЦеныПоставщиковСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	               |ГДЕ
	               |	ЦеныПоставщиковСрезПоследних.Поставщик = &Поставщик
	               |	И СправочникНоменклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	               |	И СправочникНоменклатура.Наименование ПОДОБНО &Наименование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СправочникНоменклатура.Ссылка,
	               |	СправочникНоменклатура.ЭтоГруппа,
	               |	СправочникНоменклатура.Родитель,
	               |	СправочникНоменклатура.Наименование";
				   
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	Запрос.УстановитьПараметр("Поставщик", ОБъект.Поставщик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока вЫборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.ССылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВладельцаРеквизитаСервер(мРеквизит)
	
	Возврат мРеквизит.Владелец;
	
КонецФункции

&НаСервере
Функция НеВедетсяУчетПоХарактеристикам(мНоменклатура)
	
	Возврат мНоменклатура.НеВедетсяУчетПоХарактеристикам;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Контрагент"				, СтруктураДанные.Контрагент);
	
	Если НЕ СтруктураДанные.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И ЗначенияСвойствОбъектов.Значение = &Контрагент";
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Если ТабРезультат.Количество() = 1 Тогда
			СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЭтикеткиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Этикетки.ТекущиеДанные;
	мДата			= ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	
	//Если НЕ ТекущиеДанные.Товар = ПолучитьВладельцаРеквизитаСервер(ТекущиеДанные.ЕдиницаИзмерения) Тогда
	//	ТекущиеДанные.ЕдиницаИзмерения 	= ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	//КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура"		, ТекущиеДанные.Товар);
	СтруктураДанные.Вставить("Контрагент"		, Объект.Поставщик);
	СтруктураДанные.Вставить("Характеристика"	, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ТекущиеДанные.Характеристика 	= СтруктураДанные.Характеристика;
	ТекущиеДанные.Этикетка			= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
///////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Заявка на производство упаковки");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	//
	Для Каждого ЭлементОтбора Из ОтправленныеПисьма.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "ОтборПоТекущейЗаявке" Тогда
			ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;	
		КонецЕсли;
	КонецЦикла;
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		//
		Объект.Автор 	= ПараметрыСеанса.ТекущийПользователь;
		Объект.Дата 	= ТекущаяДата();
		
		//
		Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
		
		//
		Объект.Склад = Константы.ОсновнойСкладУпаковки.Получить();//Справочники.Склады.НайтиПоРеквизиту("ИД", 727); //Склад_Упаковки_Котляково
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Организация = Объект.Склад.Организация;
		КонецЕсли;	
		
	КонецЕсли;
	
	//+++АК SHEP 2018.05.29 ИП-00018239
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураРеквизитовБыли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "СтатусЗаявки,ОтправитьДо");
	Иначе
		СтруктураРеквизитовБыли = Новый Структура("СтатусЗаявки,ОтправитьДо", ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.ПустаяСсылка"), Дата(1,1,1));
	КонецЕсли;
	СтатусЗаявкиБыло = СтруктураРеквизитовБыли.СтатусЗаявки;
	ПлановаяДатаПоставкиБыло = СтруктураРеквизитовБыли.ОтправитьДо;
	//---АК SHEP 2018.05.29
	
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор 	= ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	ЭтоТехнолог = ПараметрыСеанса.ТекущийПользователь.Технолог;
	//ЭтоСпециалистПоУпаковке = ПараметрыСеанса.ТекущийПользователь.СпециалистПоУпаковке;
	
	Элементы.ОтправитьДо.ТолькоПросмотр = НЕ ЭтоТехнолог;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеИзРегистра();	
	КонецЕсли;
	
	//
	ТекстПисьмаHTML = "
					|<html><body>" + Объект.ТекстПисьмаHTML + "</body></html>";
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		//???ZEZA Предупреждение("Следует заполнить реквизит Поставщик");
		//???ZEZA Возврат;
	КонецЕсли;
		
	СтрокаТабличнойЧасти = Элементы.Этикетки.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поставщик",Объект.Поставщик);
		
	Результат = ОткрытьФормуМодально("Документ.ЗаявкаНаПечатьЭтикетки.Форма.ФормаВыбораПоКонтрагенту",ПараметрыФормы);
	
	Если Результат = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		СтрокаТабличнойЧасти.Товар = Результат;
		ЭтикеткиНоменклатураПриИзменении(Элемент);
	КонецЕсли;				
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		Элемент.ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОБработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Предупреждение("Следует заполнить реквизит Поставщик");
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ЗаполнитьСписокПодбораНОменклатурыСервер(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ВыбранноеЗначение.ТипТовара = ПредопределенноеЗначение("Перечисления.ТипыТоваров.Упаковка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	Если НЕ Объект.Ссылка.Пустая() Тогда
		//ЭтаФорма.ТолькоПросмотр = НаОснованииЗаявкиБылВведенРО();
	КонецЕсли;
	
	//
	УстановитьСвойстваЭлементовФормы();
	
	//
	ВидимостьТекстаПисьма();
	ПодключитьОбработчикОжидания("ОбновитьДатыИзмененияФайлов",0.5,Истина);
	
	Элементы.ДатаСписанияПустографки.Видимость=Объект.СписатьЗаменитель;	
	Элементы.Пустографка.Видимость=Объект.СписатьЗаменитель;
	
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатыИзмененияФайлов()
	
	Для Каждого Стр из Объект.Этикетки Цикл
		Файл = Новый Файл(Стр.ИмяФайла);
		Попытка
			Стр.ДатаИзменения = Файл.ПолучитьВремяИзменения();	
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОБработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Предупреждение("Следует заполнить реквизит Поставщик");
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ЗаполнитьСписокПодбораНОменклатурыСервер(Текст);

КонецПроцедуры

&НаСервере
Процедура ПодставитьСкладСервер()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Поставщик);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Склады.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка
	|	И Склады.Владелец.Наименование = ""Сторонняя переработка""";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Склад = Выборка.Ссылка;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	//ПодставитьСкладСервер();
	ЗаполнитьОстаткиПоставщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//++AK GREK 	
	//Проверим не попадает ли данная заявка под ограничения
	Объект.ОбнаруженыОшибки = Ложь;
	Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано") Тогда
		Для каждого Стр из Объект.Этикетки цикл
			//При заказе поставщиком упаковки на выводимую позицию не принимать заявку
			Если Стр.Характеристика.СтатусАктивностиХарактеристики = ПредопределенноеЗначение("Перечисление.СтатусыАктивностиХарактеристик.Выведена") 
				ИЛИ Стр.Характеристика.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.Приостановлена") 
				ИЛИ Стр.Характеристика.Статус = ПредопределенноеЗначение("Перечисление.СтатусыХарактеристик.НаВывод") тогда
				Сообщить("Указаный в строке № " + Стр.НомерСтроки + " товар выводится! заказ упаковки можно сделать только через технолога. Поставщику будет отправлено соответствующее сообщение.", СтатусСообщения.Важное);
				Объект.ОбнаруженыОшибки = Истина;
			КонецЕсли;
			//Запретить проведение заявки, если заказывается количество, более чем на три месяца.
			Если ЗначениеЗаполнено(Стр.СправочноРасходЗаПредыдущийМесяц) тогда
				Если Стр.КоличествоЗаказано > Стр.СправочноРасходЗаПредыдущийМесяц*3 Тогда
					Сообщить("Указанное в строке № " + стр.НомерСтроки + " заказываемое количество, привышет величину расхода за три месяца. Поставщику будет отправлено соответствующее сообщение.", СтатусСообщения.Важное);	
					Объект.ОбнаруженыОшибки = Истина;	
				КонецЕсли;
			Иначе
				Сообщить("Не указан средний расход за месяц, для строки № " + Стр.НомерСтроки);
			КонецЕсли;
			//+++AK GREK 01.11.2017 ИП-00017114 количество заказано должно быть равным "произвести" + "взять со склада"
			Если ЗначениеЗаполнено(Стр.КоличествоЗаказано) тогда
				Если Стр.КоличествоЗаказано <> Стр.КоличествоСоСклада + Стр.КоличествоЗаказано Тогда
					Сообщить("Указанное в строке № " + стр.НомерСтроки + " заказываемое количество, должно быть равно сумме количества заказываемого у поставщика и количества забираемого мо склада", СтатусСообщения.Важное);	
					Объект.ОбнаруженыОшибки = Истина;	
				КонецЕсли;
			КонецЕсли;
			//---AK
		КонецЦикла;	
	КонецЕсли;
	
	//Если обнаружены ошибки, спросим пользователя что делать с такой заявкой.
	Если Объект.ОбнаруженыОшибки И НЕ Объект.НеКонтролироватьЛимиты Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(Нстр("ru = 'В заявке обнаружены ошибки! Изменить статус на Отменена?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		Иначе
			Объект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена");
		КонецЕсли;
	КонецЕсли;
	//AK-- GREK
	//
	//ПроверитьЗаполнение();
	
	//
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано")
		И НЕ ЗначениеЗаполнено(Объект.ОтправитьДо) Тогда
		
		//
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Не указана ""Плановая дата поставки"". Продолжить?", РежимДиалогаВопрос.ДаНет,,Ответ);
		
		//
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;		
	
	//
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		//
		Если ЗначениеЗаполнено(Объект.ОтправитьДо) Тогда
			
			//
			Если (Объект.ОтправитьДо - НачалоДня(Объект.Дата)) / 86400 < 2 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя указать Отправить до менее, чем 2 дня от даты заявки",,,, Отказ);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		//
		Если Объект.ПризнакЗакрытаВручную Тогда
			
			//
			Если НЕ ЗначениеЗаполнено(Объект.КомментарийПриЗакрытииВручную) Тогда
				
				//
				Предупреждение("Необходимо указать Причину закрытия вручную.");
				Отказ = Истина;
			
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЕсли;		
	
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоПроизведеноСервер(Письмо)
	
	Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмоПроизведено(Объект.Ссылка,, Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапуститьПриложение(Элементы.Этикетки.ТекущиеДанные.ИмяФайла);
	
	//ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Если ДиалогВыбора.Выбрать() Тогда
	//	Элементы.Этикетки.ТекущиеДанные.ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапуститьПриложение(Элементы.Этикетки.ТекущиеДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)
	
	//
	УстановитьСвойстваЭлементовФормы();
	
	//+++АК SHEP 2018.05.29 ИП-00018239
	Если СтатусЗаявкиБыло = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена") Тогда
		Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена")
		ИЛИ НЕ ЗначениеЗаполнено(ПлановаяДатаПоставкиБыло) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаСтатусаПриостановлена) Тогда
			Объект.ОтправитьДо = ПлановаяДатаПоставкиБыло;
		Иначе
			Объект.ОтправитьДо = ПлановаяДатаПоставкиБыло + (НачалоДня(ТекущаяДата()) - НачалоДня(Объект.ДатаСтатусаПриостановлена));
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 2018.05.29
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоТехнологу()
	//СписокПолучателей = ПолучитьПочтуТехнологов();
	//Если СписокПолучателей.Количество() > 0 Тогда
	//	Обработано="Заявка №"+Объект.Номер+" обработана.";
	//	Письмо = ПолучитьПисьмо(Обработано, Обработано, СписокПолучателей);
	//	Для Каждого СтрокаТЧ Из Объект.Этикетки Цикл
	//		ПолученныйФайл = Новый Файл(СтрокаТЧ.ИмяФайла);
	//		Попытка
	//			Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
	//			//НовыйФайл.Записать();
	//		Исключение
	//			Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
	//		КонецПопытки;
	//		СохранитьВложение(Хранилище, ПолученныйФайл.Имя, Письмо);
	//	КонецЦикла;
	//	ОтправкаОповещенияКлиента(Письмо);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаОповещенияКлиентаКл()
	//Обработано="Заявка №"+Объект.Номер+" обработана.";
	//Письмо = ПолучитьПисьмо(Обработано, Обработано, Объект.АдресОтправителя);
	//Для Каждого СтрокаТЧ Из Объект.Этикетки Цикл
	//	ПолученныйФайл = Новый Файл(СтрокаТЧ.ИмяФайла);
	//	Попытка
	//		Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
	//		//НовыйФайл.Записать();
	//	Исключение
	//		Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
	//	КонецПопытки;
	//	СохранитьВложение(Хранилище, ПолученныйФайл.Имя, Письмо);
	//КонецЦикла;
	//ОтправкаОповещенияКлиента(Письмо);
КонецПроцедуры

&НаСервере
Функция ПолучитьПисьмо(Тема, ТекстПисьма, СписокПолучателей)
	
	Возврат Документы.ЗаявкаНаПечатьЭтикетки.ЗаполнитьПисьмо(Тема, ТекстПисьма, Объект.Ссылка, СписокПолучателей);
	
КонецФункции

&НаСервере
Процедура СохранитьВложение(Хранилище, ИмяФайла, Письмо)
	
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= Письмо;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Хранилище;
	НовыйФайл.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОтправкаОповещенияКлиента(Письмо)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ДокументОбъект.ОтправитьПисьмоОбработано(Письмо);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиПоставщикаСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ЗаполнитьОстаткиНаСкладеПоставщика();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Этикетки.ТекущийЭлемент = Элементы.ЭтикеткиИмяФайла
			И НЕ НоваяСтрока
			И НЕ Копирование Тогда
		ЗапуститьПриложение(Элементы.Этикетки.ТекущиеДанные.ИмяФайла);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеИзРегистра()
	
	ТаблциаОстатков = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоКОтгрузкеПриход, 0) КАК Получено,
	|	ЕСТЬNULL(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоКОтгрузкеРасход, 0) КАК Отгружено,
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Этикетка,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка КАК Ссылка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК Этикетка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Товар КАК Товар,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Характеристика КАК Характеристика
	|	ИЗ
	|		Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	|	ГДЕ
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка = &Заявка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Характеристика,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Товар,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка,
	|		ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты
	|		ПО ВложенныйЗапрос.Ссылка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Заявка
	|			И ВложенныйЗапрос.Этикетка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура";
	ТаблциаОстатков = Запрос.Выполнить().Выгрузить();
	Если ТаблциаОстатков.Количество() Тогда
		Для Каждого СтрокаТЧ Из Объект.Этикетки Цикл 
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Этикетка"			, СтрокаТЧ.Этикетка);
			СтруктураОтбора.Вставить("Товар"			, СтрокаТЧ.Товар);
			СтруктураОтбора.Вставить("Характеристика"	, СтрокаТЧ.Характеристика);
			МассивСтрок = ТаблциаОстатков.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() Тогда
				СтрокаИзМассива = МассивСтрок[0];
				Получено 	= Мин(СтрокаИзМассива.Получено	, СтрокаТЧ.КоличествоЗаказано);
				Отгружено 	= Мин(СтрокаИзМассива.Отгружено	, СтрокаТЧ.КоличествоЗаказано);
				СтрокаТЧ.Получено 	= Получено;
				СтрокаТЧ.Отгружено 	= Отгружено;
                СтрокаИзМассива.Получено 	= СтрокаИзМассива.Получено	- Получено;
				СтрокаИзМассива.Отгружено 	= СтрокаИзМассива.Отгружено	- Отгружено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвижения(Команда)
	
	Если Модифицированность Тогда
		Если Вопрос("Документ был изменен, перед обновлением данных необходимо записать. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
		иначе
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	//
	ОбновитьДанныеИзРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТекстаПисьма()
	Элементы.HTMLТекст.Доступность = ЗначениеЗаполнено(Объект.ТекстПисьмаHTML);
	Элементы.ПростойТекст.Доступность = ЗначениеЗаполнено(Объект.ТекстПисьмаПростой);
	ВключитьHTML(ЗначениеЗаполнено(Объект.ТекстПисьмаHTML));	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьHTML(ВидимостьHTML)
	Элементы.ГруппаТекстПисьмаHTML.Видимость = ВидимостьHTML;
	Элементы.ГруппаТекстПисьма.Видимость = НЕ ВидимостьHTML; 
КонецПроцедуры

&НаКлиенте
Процедура HTMLТекст(Команда)
	ВключитьHTML(Истина);
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТекстПисьмаHTML;
	ТекущийЭлемент = Элементы.ПростойТекст;
КонецПроцедуры

&НаКлиенте
Процедура ПростойТекст(Команда)
	ВключитьHTML(Ложь);
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТекстПисьма;
	ТекущийЭлемент = Элементы.HTMLТекст;
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьДатыИзмененияФайлов",0.5,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправленныеПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьПочтуТехнологов()
	СписокНоменклатуры = Новый СписокЗначений;
	СписокПолучателей = Новый СписокЗначений;
	Для Каждого Стр Из Объект.Этикетки Цикл
		Если Стр.КоличествоЗаказано > 0 Тогда
			СписокНоменклатуры.Добавить(Стр.Характеристика);		
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.Период,
	|	СоответствиеОбъектРоль.ТипРоли,
	|	СоответствиеОбъектРоль.Объект,
	|	СоответствиеОбъектРоль.РольПользователя,
	|	СоответствиеОбъектРоль.ТипРолиID,
	|	РолиПользователейСоставРоли.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК АдресПочты
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|			ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|		ПО СоответствиеОбъектРоль.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	(КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип ЕСТЬ NULL )
	|	И СоответствиеОбъектРоль.ТипРоли = &ТипРоли
	|	И (СоответствиеОбъектРоль.Объект В (&Номенклатура)
	|			ИЛИ СоответствиеОбъектРоль.Объект = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеОбъектРоль.Объект,
	|	СоответствиеОбъектРоль.ТипРолиID,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	СоответствиеОбъектРоль.РольПользователя,
	|	СоответствиеОбъектРоль.Период,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|	СоответствиеОбъектРоль.ТипРоли
	|ИТОГИ ПО
	|	Сотрудник";
	Запрос.УстановитьПараметр("ТипРоли",ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
	Запрос.УстановитьПараметр("Контрагент",Объект.Поставщик);
	ВыбокраГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыбокраГрупп.Следующий() Цикл
		Выборка = ВыбокраГрупп.Выбрать();
		Пока Выборка.Следующий() Цикл
			Разделитель = Найти(Выборка.АдресПочты,";");
			Если Разделитель > 0 Тогда
				АдресПолучателя = Лев(Выборка.АдресПочты,Разделитель-1);
			Иначе
				АдресПолучателя = Выборка.АдресПочты;
			КонецЕсли;
			СписокПолучателей.Добавить(АдресПолучателя);
		КонецЦикла;
	КонецЦикла;
	Возврат СписокПолучателей;
КонецФункции

&НаКлиенте
Процедура ПроставитьИзНаличия(Команда)
	Если Модифицированность Тогда
		Если Вопрос("Документ был изменен, перед обновлением данных необходимо записать. Записать?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроставитьИзНаличияСервер();
	Если ТаблицаСвободныхОстатков.Количество() Тогда
		н=0;
		Форма = ПолучитьФорму("Документ.ЗаявкаНаПечатьЭтикетки.Форма.ФормаФормированияНаличия",,ЭтаФорма);
		Для Каждого СтрокаТЧ Из Объект.Этикетки Цикл 
			н=н+1;
			СтрокаТЧ.ИндексСортировки = н*10;
			Если НЕ СтрокаТЧ.ИзНаличия Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Этикетка", СтрокаТЧ.Этикетка);
				МассивСтрок = ТаблицаСвободныхОстатков.НайтиСтроки(СтруктураОтбора);			
				Если МассивСтрок.Количество() Тогда
					СтрокаИзМассива	= МассивСтрок[0];
					Списать = Мин(СтрокаИзМассива.СвободныйОстаток, СтрокаТЧ.КоличествоЗаказано);
					НоваяСтрока = Форма.Этикетки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.Перенести = Истина;
					НоваяСтрока.ИзНаличия = Истина;
					НоваяСтрока.КоличествоЗаказано = Списать;
					Если СтрокаТЧ.КоличествоЗаказано > Списать Тогда
						НоваяСтрока = Форма.Этикетки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						НоваяСтрока.Перенести = Истина;
						НоваяСтрока.ИндексСортировки = СтрокаТЧ.ИндексСортировки + 1;
						НоваяСтрока.КоличествоЗаказано = СтрокаТЧ.КоличествоЗаказано - Списать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Форма.Открыть();
	КонецЕсли;
	//ОбновитьДанныеИзРегистра();
	ОбновитьДатыИзмененияФайлов();
КонецПроцедуры

&НаСервере
Процедура ПроставитьИзНаличияСервер()
	
	//
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ИзНаличия", Ложь);
	
	//
	ТаблицаДляОбработки = Объект.Этикетки.Выгрузить(СтруктураОтбор);
	
	//
	ТаблицаСвободныхОстатков.Очистить();	
	Для каждого СтрокаТЧ из Объект.Этикетки Цикл
		СтрокаТЧ.СправочноОстаткиНаСкладеПоставщика = 0;	
	КонецЦикла;
	
	//
	Если ЗначениеЗаполнено(Объект.Поставщик) и Объект.Этикетки.Количество()>0 Тогда
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		
		//
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",ТаблицаДляОбработки);
		
		//
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаНоменклатуры.Этикетка,
		               |	ТаблицаНоменклатуры.Товар,
		               |	ТаблицаНоменклатуры.Характеристика,
		               |	ТаблицаНоменклатуры.КоличествоЗаказано
		               |ПОМЕСТИТЬ ВТ_ТаблицаНоменкалтуры
		               |ИЗ
		               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаНоменкалтуры.Этикетка,
		               |	ВТ_ТаблицаНоменкалтуры.Товар,
		               |	ВТ_ТаблицаНоменкалтуры.Характеристика,
		               |	ВТ_ТаблицаНоменкалтуры.КоличествоЗаказано,
		               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоКОтгрузкеОстаток, 0) КАК СвободныйОстаток
		               |ИЗ
		               |	ВТ_ТаблицаНоменкалтуры КАК ВТ_ТаблицаНоменкалтуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		               |		ПО ВТ_ТаблицаНоменкалтуры.Этикетка = ТоварыНаСкладахОстатки.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
		               |				&Дата,
		               |				НЕ Заявка.Ссылка ЕСТЬ NULL 
		               |					И Заявка <> &Заявка) КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки
		               |		ПО ВТ_ТаблицаНоменкалтуры.Этикетка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура
		               |ГДЕ
		               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоКОтгрузкеОстаток, 0) > 0";
					   
		//			   
		ТаблицаСвободныхОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры


//+++ZEZA

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	//
	Элементы.ОписаниеПричиныПриостановки.АвтоОтметкаНезаполненного = Объект.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРевизитыНеСвязанныеСДанными()
	
	//
	ОбновитьДанныеИзРегистра();
	
	//
	Для Каждого СтрокаТЧ Из Объект.Этикетки Цикл
		
		//
		СтрокаТЧ.КоличествоКПроизводству = МАКС(0, СтрокаТЧ.КоличествоЗаказано - СтрокаТЧ.КоличествоСоСклада);
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЭтикеткиКоличествоЭтикетокПриИзменении(Элемент)
	ЗаполнитьРевизитыНеСвязанныеСДанными();
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиКоличествоСоСкладаПриИзменении(Элемент)
	ЗаполнитьРевизитыНеСвязанныеСДанными();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСкладеСервер()
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Номенклатура,
	     |	Таблица.КоличествоОстаток
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	     |			,
	     |			Склад = &Склад
	     |				И Номенклатура = &Номенклатура) КАК Таблица
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	Таблица.Номенклатура,
	     |	-Таблица.КоличествоКОтгрузкеОстаток
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
	     |			&Дата,
	     |			НЕ Заявка.Ссылка ЕСТЬ NULL 
	     |				И Заявка <> &Заявка) КАК Таблица
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ.Номенклатура,
	     |	ЕСТЬNULL(ТЗ.КоличествоОстаток, 0) КАК КоличествоОстаток
	     |ИЗ
	     |	ТЗ КАК ТЗ";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, КонецДня(ТекущаяДата())));
	ПЗ.Параметры.Вставить("Склад", Объект.Склад);
	ПЗ.Параметры.Вставить("Заявка", Объект.Ссылка);
	
	//
	ТЗ_Этикетки = Объект.Этикетки.Выгрузить();
	ТЗ_Этикетки.Свернуть("Этикетка");
	
	//
	Для каждого СтрокаТЗ Из ТЗ_Этикетки Цикл
		
		//
		ПЗ.Параметры.Вставить("Номенклатура", СтрокаТЗ.Этикетка);
		
		//
		ПЗ.Выполнить();
		Если ПЗ.Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		КоличествоКРаспределению = 0;
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоКРаспределению = Выборка.КоличествоОстаток; 	
		КонецЕсли; 
		
		//
		Если КоличествоКРаспределению = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		СП = Новый Структура("Этикетка", СтрокаТЗ.Этикетка);
		
		//
		НайденныеСтроки = Объект.Этикетки.НайтиСтроки(СП);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			//
			НайденнаяСтрока.КоличествоСоСклада = мин(НайденнаяСтрока.КоличествоЗаказано, КоличествоКРаспределению);
			
			//
			КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрока.КоличествоСоСклада;
		
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладе(Команда)
	
	//
	ЗаполнитьПоОстаткамНаСкладеСервер();
	ЗаполнитьРевизитыНеСвязанныеСДанными();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРевизитыНеСвязанныеСДанными();
	
КонецПроцедуры

Процедура СформироватьРасходныйОрдерНаСервере()
	
	Если Объект.Склад=Константы.ОсновнойСкладУпаковки.Получить() Тогда
		Возврат
	КонецЕсли;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.СформироватьРасходныйОрдер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьРевизитыНеСвязанныеСДанными();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.СписатьЗаменитель Тогда
			СформироватьРасходныйОрдерНаСервере();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
 
Функция ПроверитьКорректностьЗаполненияСтроки(Номенклатура, Характеристика, Этикетка)
	
	//
	ВсеОК = Истина;
	
	//
	Если ЗначениеЗаполнено(Характеристика) Тогда	
				
		//1. Проверяем принадлежность Характеристики
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.Ссылка,
		     |	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		     |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение.ГоловнойКонтрагент, ЗначенияСвойствОбъектов.Значение) КАК ГоловнойКонтрагент
		     |ИЗ
		     |	Справочник.ХарактеристикиНоменклатуры КАК Таблица
		     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		     |		ПО Таблица.Ссылка = ЗначенияСвойствОбъектов.Объект
		     |			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Производитель"")
		     |ГДЕ
		     |	Таблица.Ссылка = &Характеристика";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Характеристика", Характеристика);
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			
			//
			Если Выборка.ГоловнойКонтрагент <> Объект.Поставщик.ГоловнойКонтрагент Тогда
				
				//
				Сообщить("Внимание! Производитель, указанный в Характеристике """ + Характеристика + """ [" + Выборка.Производитель + "] не равен Потребителю упаковки [" + Объект.Поставщик + "]");
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		//2. Проверяем принадлежность Этикетки
		
		Если НЕ Объект.СписатьЗаменитель Тогда
			
			//
			ДатаПроверки = Объект.ДатаСтатусаОбработано;
			Если НЕ ЗначениеЗаполнено(ДатаПроверки) Тогда
				ДатаПроверки = ТекущаяДата();
			КонецЕсли;	
			
			//
			ДатаПроверки = КонецДня(ДатаПроверки);
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.Номенклатура,
			     |	Таблица.Характеристика,
			     |	Таблица.Период КАК Период,
			     |	Таблица.НоменклатураСырье
			     |ИЗ
			     |	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(
			     |			,
			     |			Номенклатура = &Номенклатура
			     |				И Характеристика = &Характеристика
			     |				И НоменклатураСырье = &Этикетка) КАК Таблица
			     |ГДЕ
			     |	(Таблица.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
			     |			ИЛИ Таблица.ДатаКонца >= &Дата)";
				 
			//
			ПЗ = Новый ПостроительЗапроса;
			ПЗ.Текст = ТЗ;
			
			//
			ПЗ.Параметры.Вставить("Дата", ДатаПроверки);
			
			//
			ПЗ.Параметры.Вставить("Номенклатура", Номенклатура);
			ПЗ.Параметры.Вставить("Характеристика", Характеристика);
			ПЗ.Параметры.Вставить("Этикетка", Этикетка);
			
			//
			ПЗ.Выполнить();
			
			//
			Если ПЗ.Результат.Пустой() Тогда
				
				//
				Сообщить("Внимание! Упаковка/Этикетка """ + Этикетка + """ не найдена в Спецфикации для [" + Номенклатура + " / " + Характеристика + "]");
				ВсеОК = (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена);
				
			КонецЕсли;
			
		КонецЕсли;	
	
		//3. Проверяем активность характеристики
		
		//
		Если (Характеристика.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Новая 
				ИЛИ Характеристика.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Активна) Тогда
			
			//тут ВсеОК
			
		Иначе 
			
			//
			Сообщить("Внимание! Характеристика """ + Характеристика + """ находится в Статусе [" + ?(ЗначениеЗаполнено(Характеристика.Статус), Характеристика.Статус, Характеристика.СтатусАктивностиХарактеристики) + "]");
			
			//
			ВсеОК = (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена);
			
		КонецЕсли;
		
	//
	Иначе
		
		//
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Поставщик) Тогда
			
			//
			Если Объект.Организация.ИНН <> Объект.Поставщик.ИНН Тогда
				
				//
				Сообщить("Внимание! Для " + Этикетка + " не указана Характеристика");
				
				//
				ВсеОК = (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//
		ПризнакЭтоНашСклад = Ложь;
		Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
			 ПризнакЭтоНашСклад = (СокрЛП(Объект.Поставщик.ИНН) = "7734675810"); //это Вкусвилл
			 ПризнакЭтоНашСклад = ПризнакЭтоНашСклад ИЛИ (СокрЛП(Объект.Поставщик.ИНН) = "7734410589"); //это Тилси
		КонецЕсли;	
		
		//
		Если ПризнакЭтоНашСклад = ИСТИНА Тогда //если потребитель упаковки Мы, то пропускаем проверку на присутствие в спецификации 
			
			//
			
		ИначеЕсли НЕ Объект.СписатьЗаменитель Тогда
			
			//
			ДатаПроверки = Объект.ДатаСтатусаОбработано;
			Если НЕ ЗначениеЗаполнено(ДатаПроверки) Тогда
				ДатаПроверки = ТекущаяДата();
			КонецЕсли;	
			
			//
			ДатаПроверки = КонецДня(ДатаПроверки);
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.Номенклатура,
			     |	Таблица.Характеристика,
			     |	Таблица.Период КАК Период,
			     |	Таблица.НоменклатураСырье
			     |ИЗ
			     |	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, НоменклатураСырье = &Этикетка) КАК Таблица
			     |ГДЕ
			     |	(Таблица.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
			     |			ИЛИ Таблица.ДатаКонца >= &Дата)";
				 
			//
			ПЗ = Новый ПостроительЗапроса;
			ПЗ.Текст = ТЗ;
			
			//
			ПЗ.Параметры.Вставить("Дата", ДатаПроверки);
			ПЗ.Параметры.Вставить("Этикетка", Этикетка);
			
			//
			ПЗ.Выполнить();
			
			//
			Если ПЗ.Результат.Пустой() Тогда 			
				
				//
				Сообщить("Внимание! Упаковка/Этикетка """ + Этикетка + """ не найдена активная Спецфикация");
				
				//
				ВсеОК = (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена) ИЛИ (Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена);
				
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЕсли;
	
	//
	Возврат ВсеОК;
	
КонецФункции

Процедура ПроверитьСпецификацииПоставщиков(ТабЭтикетки, Отказ)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабЭтикетки"			, ТабЭтикетки);
	Запрос.УстановитьПараметр("МассивХарактеристик"	, ТабЭтикетки.ВыгрузитьКолонку("Характеристика"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабЭтикетки.НомерСтроки,
	|	ТабЭтикетки.Товар КАК Номенклатура,
	|	ТабЭтикетки.Характеристика,
	|	ТабЭтикетки.Этикетка
	|ПОМЕСТИТЬ ВТЭтикетки
	|ИЗ
	|	&ТабЭтикетки КАК ТабЭтикетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтикетки.НомерСтроки,
	|	ВТЭтикетки.Номенклатура,
	|	ВТЭтикетки.Характеристика,
	|	ВТЭтикетки.Этикетка
	|ИЗ
	|	ВТЭтикетки КАК ВТЭтикетки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(, Характеристика В (&МассивХарактеристик)) КАК СпецификацииПоставщиков
	|		ПО (СпецификацииПоставщиков.Характеристика = ВТЭтикетки.Характеристика)
	|			И (СпецификацииПоставщиков.НоменклатураСырье = ВТЭтикетки.Этикетка)
	|ГДЕ
	|	СпецификацииПоставщиков.Характеристика ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//
	Отказ = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Строка " + Формат(Выборка.НомерСтроки, "ЧГ=") + ": этикетки """ + Выборка.Этикетка + """ нет в спецификации поставщиков!");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//
		Если ТекущийОбъект.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена Тогда
			
			//	
			ВсеОК = Истина;
			
			//
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				
				//
				Объект.Организация = Объект.Склад.Организация;
				
				//
				Если Объект.Склад.Организация <> Объект.Организация Тогда
					
					//
					Сообщить("Внимание! Указанный склад [" + Объект.Склад + "] не соответствует организации [" + Объект.Организация + "]");
					
					//
					ВсеОК = Ложь;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			//
			Для Каждого СтрокаТЧ Из ТекущийОбъект.Этикетки Цикл
				ВсеОК = ВсеОК И ПроверитьКорректностьЗаполненияСтроки(СтрокаТЧ.Товар, СтрокаТЧ.Характеристика, СтрокаТЧ.Этикетка);
			КонецЦикла;	
			
			//
			Отказ = Отказ ИЛИ НЕ ВсеОК;
			
		КонецЕсли;
		
		// +++ tuta
		Если НЕ ТекущийОбъект.Поставщик.Код = "000000561" Тогда // не "Вкусвилл ООО"
			
			//ТабЭтикетки = ТекущийОбъект.Этикетки.Выгрузить();
			
			//ПроверитьСпецификацииПоставщиков(ТабЭтикетки, Отказ);
	
		КонецЕсли;
		// --- tuta
        		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// Проверим заполненность реквизита "Покупатель"
	Если Объект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена И НЕ ЗначениеЗаполнено(Объект.ОписаниеПричиныПриостановки) Тогда
	    
	    // Если он не заполнен, сообщим об этом пользователю
	    Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Внимание! Необходимо указать причину Приостановки! (см. закладку ""Дополнительно"")";
	    Сообщение.Поле = "ОписаниеПричиныПриостановки";
		Сообщение.ПутьКДанным = "ОписаниеПричиныПриостановки";
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();
	   
	    // Так как информация в документе не консистентна, то продолжать работу дальше смысла нет
	    Отказ = Истина;
	        
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьПустографкуПриИзменении(Элемент)
	Элементы.ДатаСписанияПустографки.Видимость=Объект.СписатьЗаменитель;	
	Элементы.Пустографка.Видимость=Объект.СписатьЗаменитель;	
	Если Объект.СписатьЗаменитель Тогда
		Объект.ДатаСписанияПустографки = ТекущаяДата()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПризнакЗакрытаВручнуюПриИзменении(Элемент)
	
	//
	Если Объект.ПризнакЗакрытаВручную Тогда
		Объект.ДатаЗакрытияВручную = ТекущаяДата();
		Элементы.КомментарийПриЗакрытииВручную.ОтметкаНезаполненного = Истина;
	Иначе	
		Объект.ДатаЗакрытияВручную = Неопределено;
		Элементы.КомментарийПриЗакрытииВручную.ОтметкаНезаполненного = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоставПоСпецификации(Товар,Характеристика)
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК СпецификацииПоставщиковСрезПоследних
	|ГДЕ
	|	СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
	|	Или СпецификацииПоставщиковСрезПоследних.ДатаКонца > &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье";
	Запрос.УстановитьПараметр("Номенклатура",Товар);
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НоменклатураСырье");
КонецФункции

&НаКлиенте
Процедура ЭтикеткиЭтикеткаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не Объект.Поставщик.Пустая()Тогда
		Если Объект.Поставщик.Код = "000000561" Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;
	Если ТекущиеДанные.Товар.Пустая()Тогда
		Возврат
	КонецЕсли;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(ПолучитьСоставПоСпецификации(ТекущиеДанные.Товар,ТекущиеДанные.Характеристика));
КонецПроцедуры

&НаКлиенте
Процедура Склад1ПриИзменении(Элемент)
	
	//
	Если ЗначениеЗаполнено(Объект.Склад) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Склад1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		//
		СтандартнаяОбработка = Ложь;
		
		//
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		ПараметрыОтбора.Вставить("ВидСклада", ПредопределенноеЗначение("Перечисление.ВидыСкладов.Оптовый"));
		
		//
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
		//
		Форма = ПолучитьФорму("Справочник.Склады.Форма.ФормаВыбораУправляемая", ПараметрыОткрытия, Элемент);
		Форма.Открыть();
			
	КонецЕсли;		
	
КонецПроцедуры

//---ZEZA
