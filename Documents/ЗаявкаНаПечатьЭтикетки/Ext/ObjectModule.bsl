
Процедура ДобавитьФайлы(СсылкаНаПисьмо, ПолученноеИмяФайла, ИмяСправочника = "ВложенияЭлектронныхПисем") Экспорт
	
	ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
	//Состояние("Добавляется файл: " + ПолученныйФайл.Имя);
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	
	НовыйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	НовыйФайл.Объект 	= СсылкаНаПисьмо;
	НовыйФайл.ИмяФайла 	= ПолученныйФайл.Имя;
	//НовыйФайл.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		
	Попытка
		НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
		НовыйФайл.Записать();
	Исключение
		//Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
		Отказ = Истина;
	КонецПопытки;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтправитьПисьмо(Тема, ТекстПисьма, Вложения = Неопределено, НовоеПисьмо = Неопределено)
	
	//
	Если НовоеПисьмо = Неопределено Тогда
		НовоеПисьмо = Документы.ЗаявкаНаПечатьЭтикетки.ЗаполнитьПисьмо(Тема, ТекстПисьма, Ссылка, АдресОтправителя);
	КонецЕсли;
	
	//
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(НовоеПисьмо.УчетнаяЗапись);
	
	//
	Письма = Новый Соответствие;
	Письма.Вставить(НовоеПисьмо.Ссылка, НовоеПисьмо);
	
	//
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	
КонецПроцедуры

Процедура ОтправитьПисьмоОбработано(НовоеПисьмо = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка)
			И ЗначениеЗаполнено(АдресОтправителя) Тогда
			
		Обработано = "Заявка №" + Номер + " обработана.";
		ОтправитьПисьмо(Обработано, Обработано,, НовоеПисьмо);
		//ОтправитьПисьмоТехнологу(Обработано,ТаблицаВложений, НовоеПисьмо);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмоТехнологу(Тема, Вложения, НовоеПисьмо = Неопределено)
	
	СписокНоменклатуры 	= Новый СписокЗначений;
	СписокПолучателей 	= Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из Этикетки Цикл
		Если СтрокаТЧ.КоличествоЗаказано > 0 Тогда
			СписокНоменклатуры.Добавить(СтрокаТЧ.Характеристика);		
		КонецЕсли;
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Контрагент"	, Поставщик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРоль.Период,
	|	СоответствиеОбъектРоль.ТипРоли,
	|	СоответствиеОбъектРоль.Объект,
	|	СоответствиеОбъектРоль.РольПользователя,
	|	СоответствиеОбъектРоль.ТипРолиID,
	|	РолиПользователейСоставРоли.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК АдресПочты
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|			ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
	|		ПО СоответствиеОбъектРоль.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|ГДЕ
	|	(КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип ЕСТЬ NULL )
	|	И СоответствиеОбъектРоль.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
	|	И (СоответствиеОбъектРоль.Объект В (&Номенклатура)
	|			ИЛИ СоответствиеОбъектРоль.Объект = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеОбъектРоль.Объект,
	|	СоответствиеОбъектРоль.ТипРолиID,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	СоответствиеОбъектРоль.РольПользователя,
	|	СоответствиеОбъектРоль.Период,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|	СоответствиеОбъектРоль.ТипРоли
	|ИТОГИ ПО
	|	Сотрудник";
	ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГрупп.Следующий() Цикл
		Выборка = ВыборкаГрупп.Выбрать();
		Пока Выборка.Следующий() Цикл
			Разделитель = Найти(Выборка.АдресПочты, ";");
			Если Разделитель > 0 Тогда
				АдресПолучателя = Лев(Выборка.АдресПочты, Разделитель - 1);
			Иначе
				АдресПолучателя = Выборка.АдресПочты;
			КонецЕсли;
			СписокПолучателей.Добавить(АдресПолучателя);
		КонецЦикла;
	КонецЦикла;
	Если СписокПолучателей.Количество() = 0 Тогда
		Сообщить("Не найдена почта технологов по качеству");
		Возврат;
	КонецЕсли;

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= УчетнаяЗапись;
	НовоеПисьмо.ОснованиеПисьма = Ссылка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	НовоеПисьмо.Дата 			= ТекущаяДата();
	НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	//НовоеПисьмо.ЕстьВложения = ?(Неопределено,Ложь,Вложения.Количество());
	НовоеПисьмо.ТекстПисьма 	= Тема;
	НовоеПисьмо.Тема 			= Тема;
	Для Каждого ТекТехнолог Из СписокПолучателей Цикл
		НовоеПисьмо.Кому 				= ТекТехнолог.Значение;
		НовоеПисьмо.КомуПредставление 	= ТекТехнолог.Значение;
		Получатель = НовоеПисьмо.КомуТЧ.Добавить();
		Получатель.АдресЭлектроннойПочты 	= ТекТехнолог.Значение;//Заявка.АдресОтправителя;
		Получатель.Представление 			= ТекТехнолог.Значение;//Заявка.АдресОтправителя;
 	КонецЦикла;
	НовоеПисьмо.Записать();
	
	Для Каждого Вложение Из Вложения Цикл
		ДобавитьФайлы(НовоеПисьмо.Ссылка, Вложение.Файл); 		
	КонецЦикла;
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(УчетнаяЗапись);
	Письма = Новый Соответствие;
	Письма.Вставить(НовоеПисьмо.Ссылка, НовоеПисьмо);
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	
КонецПроцедуры

Процедура ОтправитьПисьмоПроизведено(НовоеПисьмо = Неопределено) Экспорт
	//ТаблицаВложений = Новый ТаблицаЗначений;
	//ТаблицаВложений.Колонки.Добавить("Файл", Новый ОписаниеТипов("Строка"));
	//ТаблицаВложений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"));
	//ТабДок = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьВыполненнойЗаявки(Ссылка);
	//мИмяФайла = КаталогВременныхФайлов() + Номер + ".PDF";
	//Попытка
	//	ТабДок.Записать(мИмяФайла, ТипФайлаТабличногоДокумента.PDF); 
	//	ИмяФайла = мИмяФайла;
	//	НовоеВложение = ТаблицаВложений.Добавить();
	//	НовоеВложение.Файл = мИмяФайла;
	//	НовоеВложение.Номенклатура = ОбщегоНазначения.ПолучитьНомерНаПечать(Номер);
	//Исключение
	//	
	//КонецПопытки;
	Возврат;
	
	Если ЗначениеЗаполнено(Ссылка)
			И ЗначениеЗаполнено(АдресОтправителя) Тогда
		ТемаГотово = "Заявка №" + Номер + " Выполнена.";
		ТекстГотово = "Этикетки по заявке №" + Номер + " произведены.";
		Для каждого СтрокаТЧ Из Этикетки Цикл
			ТекстГотово = ТекстГотово + Символы.ПС + "Для " + СтрокаТЧ.Товар.Наименование + " " + Строка(СтрокаТЧ.КоличествоЗаказано) + "шт. " +
							СтрокаТЧ.Этикетка;
		КонецЦикла;
		ОтправитьПисьмо(ТемаГотово, ТекстГотово, НовоеПисьмо);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмоЗакрыта(НовоеПисьмо = Неопределено) Экспорт
	
	//
	Возврат;
	
	//
	Если ЗначениеЗаполнено(Ссылка)
			И ЗначениеЗаполнено(АдресОтправителя) Тогда
		
		ТемаГотово = "Заявка №" + Номер + " Закрыта.";
		ТекстГотово = "Этикетки по заявке №" + Номер + " отгружены. Заявка закрыта";
		
		Для каждого СтрокаТЧ Из Этикетки Цикл
			ТекстГотово = ТекстГотово + Символы.ПС + "Для " + СтрокаТЧ.Товар.Наименование + " " + Строка(СтрокаТЧ.КоличествоЗаказано) + " шт. " +
							СтрокаТЧ.Этикетка;
		КонецЦикла;
		
		ОтправитьПисьмо(ТемаГотово, ТекстГотово, НовоеПисьмо);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиНаСкладеПоставщика() Экспорт
	
	Для каждого СтрокаТЧ Из Этикетки Цикл
		СтрокаТЧ.СправочноОстаткиНаСкладеПоставщика = 0;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Поставщик)
			И Этикетки.Количество() > 0 Тогда
			
		ТаблицаНоменклатуры = Этикетки.Выгрузить();
		МассивОстатков = Новый Массив;
		МассивРасходов = Новый Массив;
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры"	, ТаблицаНоменклатуры);
		Запрос.УстановитьПараметр("Контрагент"			, Поставщик);
		Запрос.УстановитьПараметр("НачалоПериода"		, ДобавитьМесяц(ТекущаяДата(), -3));
		Запрос.УстановитьПараметр("ТекДата"				, ТекущаяДата());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Этикетка,
		|	ТаблицаНоменклатуры.Товар,
		|	ТаблицаНоменклатуры.Характеристика,
		|	ТаблицаНоменклатуры.КоличествоЗаказано
		|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНоменклатуры.Этикетка,
		|	ВТ_ТаблицаНоменклатуры.Товар,
		|	ВТ_ТаблицаНоменклатуры.Характеристика,
		|	ВТ_ТаблицаНоменклатуры.КоличествоЗаказано,
		|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК Остаток,
		|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход / 3 КАК Расход
		|ИЗ
		|	ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&ТекДата,
		|				,
		|				,
		|				Склад.Контрагент = &Контрагент
		|					И Склад.Владелец = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)) КАК ТоварыНаСкладахОстаткиИОбороты
		|		ПО ВТ_ТаблицаНоменклатуры.Этикетка = ТоварыНаСкладахОстаткиИОбороты.Номенклатура";
		
		//+++АК SHEP 2018.05.06 ИП-00018453
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)", "&СтруктурныеЕдиницыСторонняяПереработка");
		Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация));
		//---АК SHEP 2018.05.06
		
		Выборка = Запрос.Выполнить().Выбрать();	
		Пока Выборка.Следующий() Цикл
			МассивОстатков.Добавить(Выборка.Остаток);
			МассивРасходов.Добавить(Выборка.Расход);
		КонецЦикла;
		
		//
		Этикетки.ЗагрузитьКолонку(МассивОстатков, "СправочноОстаткиНаСкладеПоставщика");
		Этикетки.ЗагрузитьКолонку(МассивРасходов, "СправочноРасходЗаПредыдущийМесяц");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////

//
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ВыполненЗаказ 		= Ложь;
	ОтправитьДо 			= Неопределено;
	СтатусЗаявки			= Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
	ТекстПисьмаHTML 		= Неопределено;
	ТекстПисьмаПростой 	= Неопределено;
	Тема 				= Неопределено;
	ВысланаПФЗаявки 		= Ложь;
	
	АдресОтправителя 	= "";
	
	Для Каждого СтрокаТаб Из Этикетки Цикл
		СтрокаТаб.КоличествоРаспечатанных = 0;
	КонецЦикла;	
	
	//+++ZEZA
	ДатаСтатусаОбработано = Неопределено;	
	ДатаСтатусаПроизведено = Неопределено;
	ДатаСтатусаВыполнено = Неопределено;
	ДатаСтатусаОтменена = Неопределено;
	ДатаСоздания = Неопределено;
	
	ПризнакЗакрытаВручную = Ложь;
	ДатаЗакрытияВручную = Ложь;
	КомментарийПриЗакрытииВручную = "";
	Комментарий = "";
	
	//---ZEZA
	
	ДатаСтатусаПриостановлена = Дата(1,1,1); //+++АК SHEP 2018.05.29 ИП-00018239
	
КонецПроцедуры

//
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//++AK GREK
	//Если документ по складу "склад_офис", проставлять сразу статус "выполнено" при проведении документа.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Склад = Справочники.Склады.НайтиПоНаименованию("Склад_Офис") Тогда
		СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено;	
	КонецЕсли;
	
	//--AK GREK

	//
	ДополнительныеСвойства.Вставить("СтатусЗаявки_Текущий", Ссылка.СтатусЗаявки);
	
	//
	Если ЗначениеЗаполнено(АдресОтправителя)
			И ЛОЖЬ Тогда //пока выключим запоминание, т.к. оно довольно опасно
		
		//
		Если ЗначениеЗаполнено(Ссылка)
				И ЗначениеЗаполнено(Поставщик)
				И НЕ Поставщик = Ссылка.Поставщик Тогда
			
			//
			НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Поставщик);
			НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			НаборЗаписей.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
			НаборЗаписей.Прочитать();
			
			//
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Объект 			= Поставщик;
				НоваяЗапись.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяЗапись.Вид 			= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
				НоваяЗапись.Представление 	= АдресОтправителя;
			Иначе
				
				ТекущаяЗапись = НаборЗаписей[0];
				Если Найти(ТекущаяЗапись.Представление,АдресОтправителя) = 0 Тогда
					ТекущаяЗапись.Представление = ?(ЗначениеЗаполнено(ТекущаяЗапись.Представление),
													ТекущаяЗапись.Представление + "; " + АдресОтправителя,
													АдресОтправителя);
				КонецЕсли;
				
			КонецЕсли;
			
			//
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать(Истина);	
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда		
		
		//
		Если НЕ ЗначениеЗаполнено(АдресОтправителя)
			ИЛИ (ЗначениеЗаполнено(Поставщик)
					И НЕ Ссылка.Поставщик = Поставщик) Тогда
				
			Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
			Если ЗначениеЗаполнено(Структура) Тогда
				АдресОтправителя = СокрЛП(Структура.Представление);
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	//
	Для каждого СтрокаТЧ Из Этикетки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КоличествоЗаказано) Тогда
			СтрокаТЧ.КоличествоЗаказано = СтрокаТЧ.КоличествоСоСклада;	
		КонецЕсли; 
	
	КонецЦикла; 
	
	//
	ДополнительныеСвойства.Вставить("Проведен"		, Ссылка.Проведен);
	ДополнительныеСвойства.Вставить("СтатусЗаявки"	, Ссылка.СтатусЗаявки);
	
	//
	Если ЭтоНовый() Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
	//
	Если СтатусЗаявки <> Ссылка.СтатусЗаявки Тогда
		
		//
		Если НЕ ЗначениеЗаполнено(ДатаСтатусаОбработано) И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда
			
			//
			ДатаСтатусаОбработано = ТекущаяДата();
			
			//
			ДатаСтатусаПроизведено = Неопределено;
			ДатаСтатусаВыполнено = Неопределено;
			ДатаСтатусаОтменена = Неопределено;
			
		КонецЕсли;	
		
		//
		Если СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено Тогда
			
			//
			ДатаСтатусаПроизведено = ТекущаяДата();
			
			//
			ДатаСтатусаВыполнено = Неопределено;
			ДатаСтатусаОтменена = Неопределено;
			
		КонецЕсли;
		
		//
		Если СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено Тогда
			
			//
			ДатаСтатусаВыполнено = ТекущаяДата();
			
			//
			ДатаСтатусаОтменена = Неопределено;
			
		КонецЕсли;
		
		//
		Если СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена Тогда
			ДатаСтатусаОтменена = ТекущаяДата();
		//+++АК SHEP 2018.05.29 ИП-00018239
		ИначеЕсли СтатусЗаявки = ПредопределенноеЗначение("Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена") Тогда
			ДатаСтатусаПриостановлена = ТекущаяДата();
		//---АК SHEP 2018.05.29
		КонецЕсли;
		
	КонецЕсли;		
	
	//
	Если ПризнакЗакрытаВручную
			И НЕ Ссылка.ПризнакЗакрытаВручную Тогда
		
		ДатаЗакрытияВручную = ТекущаяДата();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьРасходныйОрдер() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерСклад.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	НЕ РасходныйОрдерСклад.ПометкаУдаления
	|	И РасходныйОрдерСклад.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерСклад.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументОрдер = Выборка.Ссылка.ПолучитьОбъект()
	Иначе
		ДокументОрдер = Документы.РасходныйОрдерСклад.СоздатьДокумент();
	КонецЕсли;
	ДокументОрдер.ЗаполнитьДокументПоСписаниюЗаменителяУпаковки(Ссылка);
	ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

//
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Проверим не попадает ли данная заявка под ограничения
	Если СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано И НЕ НеКонтролироватьЛимиты Тогда
		Для каждого Стр из Этикетки цикл
			//При заказе поставщиком упаковки на выводимую позицию не принимать заявку
			Если Стр.Характеристика.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Выведена 
				ИЛИ Стр.Характеристика.Статус = Перечисления.СтатусыХарактеристик.Приостановлена 
				ИЛИ Стр.Характеристика.Статус = Перечисления.СтатусыХарактеристик.НаВывод тогда
					Отказ = Истина;
			КонецЕсли;
			//Запретить проведение заявки, если заказывается количество, более чем на три месяца.
			Если ЗначениеЗаполнено(Стр.СправочноРасходЗаПредыдущийМесяц) тогда
				Если Стр.КоличествоЗаказано > Стр.СправочноРасходЗаПредыдущийМесяц*3 Тогда
					Сообщить("Указанное в строке № " + стр.НомерСтроки + " заказываемое количество, привышет величину расхода за три месяца. Поставщику будет отправлено соответствующее сообщение.", СтатусСообщения.Важное);	
					Отказ = Истина;	
				КонецЕсли;
			КонецЕсли;
			//+++AK GREK 01.11.2017 ИП-00017114 количество заказано должно быть равным "произвести" + "взять со склада"
			Если ЗначениеЗаполнено(Стр.КоличествоЗаказано) тогда
				Если Стр.КоличествоЗаказано <> Стр.КоличествоСоСклада + Стр.КоличествоЗаказано Тогда
					Сообщить("Указанное в строке № " + стр.НомерСтроки + " заказываемое количество, должно быть равно сумме количества заказываемого у поставщика и количества забираемого со склада", СтатусСообщения.Важное);	
					Отказ = Истина;	
				КонецЕсли;
			КонецЕсли;
			//---AK
		КонецЦикла;
		//+++AK GREK 01.11.2017 ИП-00017418 нужны проверки при проведении заявки на активную спецификацию по всем элементам упаковки в заявке. Если в заявке есть позиция, которой нет в активной спецификации, тогда не давать проводить заявку.
		//+++ AK suvv 12.04.2018 ИП-00018397
		//Если НЕ СписатьЗаменитель Тогда
		
		//+++ZEZA
		Если Истина Тогда
			
			//проверки на активность спецификации делаем в форме 
			
		//
		ИначеЕсли НЕ СписатьЗаменитель Тогда
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.НомерСтроки,
			     |	Таблица.Товар,
			     |	Таблица.Характеристика,
			     |	Таблица.Этикетка,
			     |	МАКСИМУМ(Спецификации.Спецификация) КАК Спецификация
			     |ПОМЕСТИТЬ ТЗ
			     |ИЗ
			     |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
			     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Дата, ) КАК Спецификации
			     |		ПО Таблица.Товар = Спецификации.Номенклатура
			     |			И Таблица.Характеристика = Спецификации.Характеристика
			     |			И Таблица.Этикетка = Спецификации.НоменклатураСырье
			     |			И (Спецификации.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
			     |				ИЛИ Спецификации.ДатаКонца >= &Дата)
			     |ГДЕ
			     |	Таблица.Ссылка = &Ссылка
			     |	И НЕ Таблица.Характеристика.Ссылка ЕСТЬ NULL
			     |
			     |СГРУППИРОВАТЬ ПО
			     |	Таблица.НомерСтроки,
			     |	Таблица.Товар,
			     |	Таблица.Характеристика,
			     |	Таблица.Этикетка
			     |
			     |ОБЪЕДИНИТЬ
			     |
			     |ВЫБРАТЬ
			     |	Таблица.НомерСтроки,
			     |	Таблица.Товар,
			     |	Таблица.Характеристика,
			     |	Таблица.Этикетка,
			     |	МАКСИМУМ(Спецификации.Спецификация)
			     |ИЗ
			     |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
			     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Дата, ) КАК Спецификации
			     |		ПО Таблица.Этикетка = Спецификации.НоменклатураСырье
			     |			И (Спецификации.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
			     |				ИЛИ Спецификации.ДатаКонца >= &Дата)
			     |ГДЕ
			     |	Таблица.Ссылка = &Ссылка
			     |	И Таблица.Характеристика.Ссылка ЕСТЬ NULL
			     |
			     |СГРУППИРОВАТЬ ПО
			     |	Таблица.НомерСтроки,
			     |	Таблица.Товар,
			     |	Таблица.Характеристика,
			     |	Таблица.Этикетка
			     |;
			     |
			     |////////////////////////////////////////////////////////////////////////////////
			     |ВЫБРАТЬ
			     |	ТЗ.НомерСтроки КАК НомерСтроки,
			     |	ТЗ.Товар,
			     |	ТЗ.Характеристика,
			     |	ТЗ.Этикетка,
			     |	ТЗ.Спецификация
			     |ИЗ
			     |	ТЗ КАК ТЗ
			     |
			     |УПОРЯДОЧИТЬ ПО
			     |	НомерСтроки";
			
		//---ZEZA
		ИначеЕсли НЕ СписатьЗаменитель и не Поставщик.ИНН = "7734675810" Тогда
		//--- AK suvv
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Товар,
		               |	Таб.Характеристика,
		               |	Таб.Этикетка
		               |ПОМЕСТИТЬ ВТ_ЗаказНаПроизводствоУпаковки
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Товар,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Характеристика КАК Характеристика,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Этикетка,
		               |	СпецификацииПоставщиковСрезПоследних.Количество
		               |ПОМЕСТИТЬ ВТ_Спецификации
		               |ИЗ
		               |	ВТ_ЗаказНаПроизводствоУпаковки КАК ВТ_ЗаказНаПроизводствоУпаковки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&Дата, ) КАК СпецификацииПоставщиковСрезПоследних
		               |		ПО ВТ_ЗаказНаПроизводствоУпаковки.Товар = СпецификацииПоставщиковСрезПоследних.Номенклатура
		               |			И ВТ_ЗаказНаПроизводствоУпаковки.Характеристика = СпецификацииПоставщиковСрезПоследних.Характеристика
		               |			И ВТ_ЗаказНаПроизводствоУпаковки.Этикетка = СпецификацииПоставщиковСрезПоследних.НоменклатураСырье
		               |ГДЕ
					   //+++ AK suvv 18.04.2018 ИП-00018397
					   //|	(СпецификацииПоставщиковСрезПоследних.ДатаКонца >= &Дата
					   |	(СпецификацииПоставщиковСрезПоследних.ДатаКонца >= &ДатаДокумента
					   //--- AK suvv
		               |			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
		               |	И СпецификацииПоставщиковСрезПоследних.Период <= &Дата
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Этикетка,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Товар,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Характеристика,
		               |	СУММА(ЕСТЬNULL(ВТ_Спецификации.Количество, 0)) КАК Количество
		               |ИЗ
		               |	ВТ_ЗаказНаПроизводствоУпаковки КАК ВТ_ЗаказНаПроизводствоУпаковки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Спецификации КАК ВТ_Спецификации
		               |		ПО ВТ_ЗаказНаПроизводствоУпаковки.Этикетка = ВТ_Спецификации.Этикетка
		               |			И ВТ_ЗаказНаПроизводствоУпаковки.Товар = ВТ_Спецификации.Товар
		               |			И ВТ_ЗаказНаПроизводствоУпаковки.Характеристика = ВТ_Спецификации.Характеристика
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Этикетка,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Товар,
		               |	ВТ_ЗаказНаПроизводствоУпаковки.Характеристика";
			Запрос.УстановитьПараметр("Таб", Этикетки.Выгрузить());
			//+++ AK suvv 18.04.2018 ИП-00018397
			//Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Дата", Дата + 30*86400);
			Запрос.УстановитьПараметр("ДатаДокумента", Дата);
			//--- AK suvv
			ЭтикеткиПоДаннымСпецификаций = Запрос.Выполнить().Выбрать();
			Пока ЭтикеткиПоДаннымСпецификаций.Следующий() Цикл
				Если ЭтикеткиПоДаннымСпецификаций.Количество = 0 Тогда
					//+++ AK suvv 12.04.2018 ИП-00018397
					Сообщить("Для этикетки " + ЭтикеткиПоДаннымСпецификаций.Этикетка + " не найдена активная спецификация.");
					//--- AK suvv
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//---AK	

	КонецЕсли;
	
	//
	Если СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена Тогда	
		//
		ТЗ =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА &СписатьАналог
		|				И НЕ Таблица.Ссылка.Пустографка.Ссылка ЕСТЬ NULL
		|			ТОГДА Таблица.Ссылка.Пустографка
		|		ИНАЧЕ Таблица.Этикетка
		|	КОНЕЦ КАК Этикетка,
		|	СУММА(Таблица.КоличествоЗаказано) КАК КоличествоЗаказано,
		|	СУММА(Таблица.КоличествоСоСклада) КАК КоличествоСоСклада,
		|	СУММА(Таблица.КоличествоЗаказано - Таблица.КоличествоСоСклада) КАК КоличествоКПроизводству
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	ВЫБОР
		|		КОГДА &СписатьАналог
		|				И НЕ Таблица.Ссылка.Пустографка.Ссылка ЕСТЬ NULL
		|			ТОГДА Таблица.Ссылка.Пустографка
		|		ИНАЧЕ Таблица.Этикетка
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Регистратор,
		|	Таблица.Ссылка КАК Заявка,
		|	Таблица.Этикетка КАК Номенклатура,
		|	Таблица.КоличествоЗаказано КАК КоличествоЗаказано,
		|	Таблица.КоличествоСоСклада КАК КоличествоКОтгрузке,
		|	Таблица.КоличествоЗаказано - Таблица.КоличествоСоСклада КАК КоличествоКПроизводству,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоРезерв, 0)) КАК КоличествоРезерв
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Таблица.Номенклатура КАК Номенклатура,
		|			Таблица.КоличествоОстаток КАК КоличествоОстаток,
		|			0 КАК КоличествоРезерв
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад) КАК Таблица
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Таблица.Номенклатура,
		|			-Таблица.КоличествоКОтгрузкеОстаток,
		|			Таблица.КоличествоКОтгрузкеОстаток
		|		ИЗ
		|			РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
		|					&Дата,
		|					НЕ Заявка.Ссылка ЕСТЬ NULL
		|						И Заявка <> &Ссылка) КАК Таблица) КАК ТоварыНаСкладахОстатки
		|		ПО Таблица.Этикетка = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Этикетка,
		|	Таблица.КоличествоЗаказано,
		|	Таблица.КоличествоСоСклада,
		|	Таблица.Ссылка";
		
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Дата", МоментВремени());
		ПЗ.Параметры.Вставить("Ссылка", Ссылка);
		ПЗ.Параметры.Вставить("Склад", Склад);
		ПЗ.Параметры.Вставить("СписатьАналог", СписатьЗаменитель);
		ПЗ.Параметры.Вставить("Аналог", Пустографка);
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			Если Выборка.КоличествоКОтгрузке >  МАКС(0, Выборка.КоличествоОстаток) Тогда
				
				//
				Сообщить("" + Выборка.Номенклатура + ": количество к отгрузке [" + Формат(Выборка.КоличествоКОтгрузке, "ЧГ=") +
						"] превышает остаток на " + Склад + " [" +  Формат(Выборка.КоличествоОстаток, "ЧН=0; ЧГ=") + "]", СтатусСообщения.Важное);
					
				
				//
				Если Выборка.КоличествоРезерв > 0 Тогда
					
					//
					ТЗ = "ВЫБРАТЬ
					     |	Таблица.Заявка.Дата КАК ЗаявкаДата,
					     |	Таблица.Номенклатура,
					     |	Таблица.Заявка,
					     |	Таблица.КоличествоКОтгрузкеОстаток КАК КоличествоРезерв,
					     |	Таблица.Заявка.Номер,
					     |	Таблица.Заявка.Поставщик КАК Поставщик
					     |ИЗ
					     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
					     |			&Дата,
					     |			НЕ Заявка.Ссылка ЕСТЬ NULL
					     |				И Заявка <> &Ссылка
					     |				И Номенклатура = &Номенклатура) КАК Таблица
					     |
					     |УПОРЯДОЧИТЬ ПО
					     |	ЗаявкаДата";
					
					
					//
					ПЗ = Новый ПостроительЗапроса;
					ПЗ.Текст = ТЗ;
					
					//
					ПЗ.Параметры.Вставить("Дата", МоментВремени());
					ПЗ.Параметры.Вставить("Ссылка", Ссылка);
					ПЗ.Параметры.Вставить("Номенклатура", Выборка.Номенклатура);
					
					//
					ПЗ.Выполнить();
					
					//
					Если НЕ ПЗ.Результат.Пустой() Тогда
						
						//
						Сообщить("Действующие резервы:");
						
						//	
						ВыборкаРезервы = ПЗ.Результат.Выбрать();
						Пока ВыборкаРезервы.Следующий() Цикл
							Сообщить(Символы.Таб + " - Заявка №" + ВыборкаРезервы.ЗаявкаНомер + " от " + Формат(ВыборкаРезервы.ЗаявкаДата, "ДФ=dd.MM.yyyy") + ": " + Формат(ВыборкаРезервы.КоличествоРезерв, "ЧГ=") + "; Потребитель: " + ВыборкаРезервы.Поставщик);
						КонецЦикла;	
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				//
				Отказ = Истина;
				
				//
				Продолжить;
				
			КонецЕсли; 
			
			//1. ПРИХОД
			НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			//
			НоваяЗапись.КоличествоКПроизводству = МАКС(0, НоваяЗапись.КоличествоКПроизводству);
			Если Поставщик.Пустая() Тогда
				НоваяЗапись.КоличествоКОтгрузке = 0;
			КонецЕсли;
			
			//
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период = Дата;
			
			//2. РАСХОД. т.е. тут же закрываем кол-во Заказано
			Если Ложь
					И Выборка.КоличествоКОтгрузке > 0  Тогда
				
				//
				НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
				//
				НоваяЗапись.КоличествоЗаказано = МАКС(0, НоваяЗапись.КоличествоКОтгрузке);
				НоваяЗапись.КоличествоКОтгрузке	= 0;
				НоваяЗапись.КоличествоКПроизводству = 0;
				
				//
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				//
				НоваяЗапись.Регистратор = Ссылка;
				НоваяЗапись.Период = Дата;
			
			КонецЕсли; 
			
		КонецЦикла; 
		
		//
		Если Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Модифицированность() Тогда
			Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	//
	Документы.ЗаявкаНаПечатьЭтикетки.ДобавитьИнформациюВОчередьУведомлений(Ссылка);
	
	//
	Если НЕ Отказ Тогда
		
		//
		Если ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда
			
			//
			Попытка
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаОбработана(Ссылка);
			Исключение
			КонецПопытки;	
			
		ИначеЕсли ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено Тогда
			
			//
			Попытка
				//Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаПроизведено(Ссылка);
			Исключение
			КонецПопытки;		
			
		ИначеЕсли ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено Тогда
			
			//
			Попытка
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаВыполнена(Ссылка);
			Исключение
			КонецПопытки;	
			
		ИначеЕсли ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена Тогда
			
			//
			Попытка
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаПриостановлена(Ссылка);
			Исключение
			КонецПопытки;		
			
		ИначеЕсли ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена И ОбнаруженыОшибки Тогда
			
			//
			Попытка
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаНеПринята(Ссылка);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ДополнительныеСвойства.СтатусЗаявки <> Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена
				И СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена Тогда
			
			Попытка
				Документы.ЗаявкаНаПечатьЭтикетки.ОтправитьПисьмо_ЗаявкаОтменена(Ссылка);
				
			Исключение
			КонецПопытки;		
			
		КонецЕсли; 	
	
	КонецЕсли; 
	
	//
	Если ПризнакЗакрытаВручную Тогда
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.Номенклатура,
		     |	Таблица.Заявка,
		     |	Таблица.КоличествоЗаказаноОстаток,
		     |	Таблица.КоличествоКОтгрузкеОстаток,
		     |	Таблица.КоличествоКПроизводствуОстаток
		     |ИЗ
		     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(&Дата, Заявка = &Ссылка) КАК Таблица";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Дата", ДатаЗакрытияВручную);
		ПЗ.Параметры.Вставить("Ссылка", Ссылка);
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//
			НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			//
			НоваяЗапись.КоличествоЗаказано = -Выборка.КоличествоЗаказаноОстаток;
			НоваяЗапись.КоличествоКОтгрузке = -Выборка.КоличествоКОтгрузкеОстаток;
			НоваяЗапись.КоличествоКПроизводству = -Выборка.КоличествоКПроизводствуОстаток;
			
			//
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период = ДатаЗакрытияВручную;
			
		КонецЦикла;	
		
		//
		Если Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Модифицированность() Тогда
			Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
		КонецЕсли;	
		
	КонецЕсли;	
	
	//
	СтатусЗаявки_Текущий = Неопределено;
	Если ДополнительныеСвойства.Свойство("СтатусЗаявки_Текущий", СтатусЗаявки_Текущий) Тогда
		
		//
		Если СтатусЗаявки <> СтатусЗаявки_Текущий Тогда
			
			//
			ВсеОК = ПроверитьВозможностьИзмененияСтатуса(СтатусЗаявки_Текущий, СтатусЗаявки, РежимЗаписиДокумента.Проведение);
			
			//
			//???ZEZA Отказ = Отказ ИЛИ НЕ ВсеОК; //пока проверяем без отлупа
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	//
	Если НЕ Отказ Тогда
		
		////
		//РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку();
		
		//
		//ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку",, Строка(Ссылка.УникальныйИдентификатор()), "Фоновая обработка заявок на этикетку. " + Ссылка);
		Попытка
			ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку",, "ЗаявкаНаПечатьЭтикетки", "Фоновая обработка заявок на этикетку. " + Ссылка);
		Исключение
		КонецПопытки;	
		
	КонецЕсли;								
	
КонецПроцедуры

Процедура ОтменитьРасходныеОрдеры(Отказ)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерСклад.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	НЕ РасходныйОрдерСклад.ПометкаУдаления
	|	И РасходныйОрдерСклад.Основание = &Основание
	|	И РасходныйОрдерСклад.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерСклад.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Попытка
		Пока Выборка.Следующий()Цикл
			Сообщить("Будет отменено проведение документа, введенного на основании заявки: " + Строка(Выборка.Ссылка));
			ДокРО = Выборка.Ссылка.ПолучитьОбъект();
			ДокРО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	Исключение
		Сообщить("Не удалось записать документ. Операция не может быть выполнена!", СтатусСообщения.ОченьВажное);
		Отказ = Истина;
	КонецПопытки
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//
	СтатусЗаявки_Текущий = Неопределено;
	Если ДополнительныеСвойства.Свойство("СтатусЗаявки_Текущий", СтатусЗаявки_Текущий) Тогда
		
		//
		Если СтатусЗаявки <> СтатусЗаявки_Текущий Тогда
			ВсеОК = ПроверитьВозможностьИзмененияСтатуса(СтатусЗаявки_Текущий, СтатусЗаявки, РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;	
		
	КонецЕсли;
	
	//
	ОтменитьРасходныеОрдеры(Отказ);
	
	//
	Если НЕ Отказ Тогда
		
		//
		СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
		
		//
		ПризнакЗакрытаВручную = Ложь;
		ДатаЗакрытияВручную = Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	ОтменитьРасходныеОрдеры(Отказ);
	
КонецПроцедуры



/////////////////////////////////////////////////////////////////////
//




Функция ПроверитьВозможностьПрисвоенияСтатуса_НЕОБРАБОТАНО(СтатусЗаявки_Текущий, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	Возврат ВсеОК;
	
КонецФункции	


Функция ПроверитьВозможностьПрисвоенияСтатуса_ОБРАБОТАНО(СтатусЗаявки_Текущий, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	Возврат ВсеОК;
	
КонецФункции	


Функция ПроверитьВозможностьПрисвоенияСтатуса_ОТМЕНЕНА(СтатусЗаявки_Текущий, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблицу.Заявка,
	     |	Таблицу.Номенклатура КАК Номенклатура,
	     |	Таблицу.Регистратор,
	     |	Таблицу.КоличествоЗаказаноПриход КАК КоличествоЗаказаноПриход,
	     |	Таблицу.КоличествоЗаказаноРасход КАК КоличествоЗаказаноРасход,
	     |	Таблицу.КоличествоКОтгрузкеПриход КАК КоличествоКОтгрузкеПриход,
	     |	Таблицу.КоличествоКОтгрузкеРасход КАК КоличествоКОтгрузкеРасход,
	     |	Таблицу.КоличествоКПроизводствуПриход КАК КоличествоКПроизводствуПриход,
	     |	Таблицу.КоличествоКПроизводствуРасход КАК КоличествоКПроизводствуРасход
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , Регистратор, Заявка = &Заявка) КАК Таблицу
	     |ИТОГИ
	     |	СУММА(КоличествоЗаказаноПриход),
	     |	СУММА(КоличествоЗаказаноРасход),
	     |	СУММА(КоличествоКОтгрузкеПриход),
	     |	СУММА(КоличествоКОтгрузкеРасход),
	     |	СУММА(КоличествоКПроизводствуПриход),
	     |	СУММА(КоличествоКПроизводствуРасход)
	     |ПО
	     |	Номенклатура";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Заявка", Ссылка);
	
	//
	ПЗ.Выполнить();
	
	//
	ТекстОшибки = "";
	
	//
	Выборка = ПЗ.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.КоличествоКПроизводствуРасход > 0  Тогда
			
			//
			ТекстОшибки = ТекстОшибки + "- " + Выборка.Номенклатура + " уже Произведено: " + Формат(Выборка.КоличествоКПроизводствуРасход, "ЧН=0; ЧГ=") + Символы.ПС;
			
			//
			ВыборкаДЗ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДЗ.Следующий() Цикл
				
				//
				Если ВыборкаДЗ.КоличествоКПроизводствуРасход > 0 Тогда
					ТекстОшибки = ТекстОшибки + Символы.Таб + ВыборкаДЗ.Регистратор + Символы.ПС;
				КонецЕсли;	
				
			КонецЦикла;	
			
			//
			ВыборкаДЗ.Сбросить();
			
		КонецЕсли;
		
		//
		Если Выборка.КоличествоКОтгрузкеРасход > 0  Тогда
			
			//
			ТекстОшибки = ТекстОшибки + "- " + Выборка.Номенклатура + " уже Отгружено: " + Формат(Выборка.КоличествоКОтгрузкеРасход, "ЧН=0; ЧГ=") + Символы.ПС;
			
			//
			ВыборкаДЗ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДЗ.Следующий() Цикл
				
				//
				Если ВыборкаДЗ.КоличествоКОтгрузкеРасход > 0 Тогда
					ТекстОшибки = ТекстОшибки + Символы.Таб + ВыборкаДЗ.Регистратор + Символы.ПС;
				КонецЕсли;	
				
			КонецЦикла;	
			
			//
			ВыборкаДЗ.Сбросить();
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		//
		ВсеОК = Ложь;
		
		//
		ТекстОшибки = "Выявлены ошибки при переводе в статус <ОТМЕНЕНА>:" + Символы.ПС + ТекстОшибки;
		
		//
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		
	КонецЕсли;		
	
	//
	Возврат ВсеОК;
	
КонецФункции	


Функция ПроверитьВозможностьПрисвоенияСтатуса_ПРОИЗВЕДЕНО(СтатусЗаявки_Текущий, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблицу.Заявка,
	     |	Таблицу.Номенклатура,
	     |	Таблицу.КоличествоКПроизводствуПриход КАК КоличествоПриход,
	     |	Таблицу.КоличествоКПроизводствуРасход КАК КоличествоРасход
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , , Заявка = &Заявка) КАК Таблицу";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Заявка", Ссылка);
	
	//
	ПЗ.Выполнить();
	
	//
	ТекстОшибки = "";
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.КоличествоПриход > Выборка.КоличествоРасход Тогда
			
			//
			ТекстОшибки = ТекстОшибки + "- " + Выборка.Номенклатура + " произведено меньше: " + Формат(Выборка.КоличествоРасход, "ЧН=0; ЧГ=") + ", чем необходимо: " + Формат(Выборка.КоличествоПриход, "ЧН=0; ЧГ=") + Символы.ПС;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		//
		ВсеОК = Ложь;
		
		//
		ТекстОшибки = "Выявлены ошибки при переводе в статус <ПРОИЗВЕДЕНО>:" + Символы.ПС + ТекстОшибки;
		
		//
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		
	КонецЕсли;		
	
	//
	Возврат ВсеОК;
	
КонецФункции	


Функция ПроверитьВозможностьПрисвоенияСтатуса_ВЫПОЛНЕНО(СтатусЗаявки_Текущий, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблицу.Заявка,
	     |	Таблицу.Номенклатура,
	     |	Таблицу.КоличествоЗаказаноПриход КАК КоличествоПриход,
	     |	Таблицу.КоличествоЗаказаноРасход КАК КоличествоРасход
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , , Заявка = &Заявка) КАК Таблицу";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Заявка", Ссылка);
	
	//
	ПЗ.Выполнить();
	
	//
	ТекстОшибки = "";
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.КоличествоПриход > Выборка.КоличествоРасход Тогда
			
			//
			ТекстОшибки = ТекстОшибки + "- " + Выборка.Номенклатура + " Отгружено меньше: " + Формат(Выборка.КоличествоРасход, "ЧН=0; ЧГ=") + ", чем необходимо: " + Формат(Выборка.КоличествоПриход, "ЧН=0; ЧГ=") + Символы.ПС;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		//
		ВсеОК = Ложь;
		
		//
		ТекстОшибки = "Выявлены ошибки при переводе в статус <ВЫПОЛНЕНО>:" + Символы.ПС + ТекстОшибки;
		
		//
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		
	КонецЕсли;		
	
	//
	Возврат ВсеОК;
	
КонецФункции	


Функция ПроверитьВозможностьИзмененияСтатуса(СтатусЗаявки_Текущий, СтатусЗаявки_Новый, РежимЗаписи)
	
	//
	ВсеОК = Истина;
	
	//
	Если СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано Тогда
		
		//НЕОБРАБОТАНО
		ВсеОК = ПроверитьВозможностьПрисвоенияСтатуса_НЕОБРАБОТАНО(СтатусЗаявки_Текущий, РежимЗаписи);
		
	ИначеЕсли СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда	
		
		//ОБРАБОТАНО
		ВсеОК = ПроверитьВозможностьПрисвоенияСтатуса_ОБРАБОТАНО(СтатусЗаявки_Текущий, РежимЗаписи);
		
	ИначеЕсли СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена Тогда		
		
		//ОТМЕНЕНА
		ВсеОК = ПроверитьВозможностьПрисвоенияСтатуса_ОТМЕНЕНА(СтатусЗаявки_Текущий, РежимЗаписи);
		
	ИначеЕсли СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено Тогда	
		
		//ПРОИЗВЕДЕНО
		ВсеОК = ПроверитьВозможностьПрисвоенияСтатуса_ПРОИЗВЕДЕНО(СтатусЗаявки_Текущий, РежимЗаписи);
	
	ИначеЕсли СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено Тогда	
		
		//ВЫПОЛНЕНО
		ВсеОК = ПроверитьВозможностьПрисвоенияСтатуса_ВЫПОЛНЕНО(СтатусЗаявки_Текущий, РежимЗаписи);
		
	ИначеЕсли СтатусЗаявки_Новый = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена Тогда
		
	КонецЕсли;	
	
	//
	Возврат ВсеОК;
	
КонецФункции	
