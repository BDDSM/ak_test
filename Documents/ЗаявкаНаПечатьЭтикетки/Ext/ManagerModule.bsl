
Функция _ПечатьЗаявка(Ссылка) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	Макет = Документы.ЗаявкаНаПечатьЭтикетки.ПолучитьМакет("Заявка");
	
	//
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаПечатьЭтикетки.Ссылка,
	|	ЗаявкаНаПечатьЭтикетки.Номер,
	|	ЗаявкаНаПечатьЭтикетки.Дата,
	|	ЗаявкаНаПечатьЭтикетки.СКакогоСкладаЭтикеткаБудетОтгружена КАК Склад,
	|	ЗаявкаНаПечатьЭтикетки.Поставщик.НаименованиеПолное КАК Поставщик,
	|	ЗаявкаНаПечатьЭтикетки.Этикетки.(
	|		НомерСтроки,
	|		Этикетка,
	|		Товар,
	|		КоличествоРаспечатанных КАК КоличествоЭтикеток
	|	)
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикетки.Ссылка = &Ссылка";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();

	Если Выборка.Следующий() Тогда
		
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Номер = Выборка.Номер;
		Область.Параметры.Дата 	= Формат(Выборка.Дата, "ДЛФ=DD");
		ТабДок.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Склад");
		Область.Параметры.Производитель = Выборка.Поставщик;
		Область.Параметры.Склад 		= Выборка.Склад;
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДок.Вывести(Область);
		
		ТабНоменклатура = Выборка.Этикетки.Выгрузить();
		ТабНоменклатура.Сортировать("НомерСтроки");
		
		Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.НомерСтроки 	= ВыборкаНоменклатура.НомерСтроки;
			Область.Параметры.Этикетка 		= ВыборкаНоменклатура.Этикетка;
			Область.Параметры.Товар 		= ВыборкаНоменклатура.Товар;
			Область.Параметры.Количество 	= ВыборкаНоменклатура.КоличествоЭтикеток;
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		// Подвал
		Область = Макет.ПолучитьОбласть("Итог");
		ТабДок.Вывести(Область);
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьВыполненнойЗаявки(Ссылка, ПриходныйОрдер = Неопределено, Письмо = Неопределено) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	Макет = Документы.ЗаявкаНаПечатьЭтикетки.ПолучитьМакет("ВыполненнаяЗаявка");
	
	//
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка"			, Ссылка);
	Запрос.Параметры.Вставить("ДатаСреза"		, КонецДня(Ссылка.Дата));
	Запрос.Параметры.Вставить("ПриходныйОрдер"	, ?(ПриходныйОрдер = Неопределено, Документы.ПриходныйОрдерСклад.ПустаяСсылка(), ПриходныйОрдер));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаПечатьЭтикетки.Номер,
	|	ЗаявкаНаПечатьЭтикетки.Дата,
	|	ЗаявкаНаПечатьЭтикетки.Склад,
	|	ЗаявкаНаПечатьЭтикетки.Комментарий,
	|	ЗаявкаНаПечатьЭтикетки.Поставщик КАК Получатель,
	|	ЗаявкаНаПечатьЭтикетки.Автор
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикетки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоЗаказано КАК Количество,
	|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка.Наименование КАК Наименование,
	|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.Номер КАК ЗаявкаНаПроизводство
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	|ГДЕ
	|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка = &Ссылка
	|	И ЗаявкаНаПечатьЭтикеткиЭтикетки.ИзНаличия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.Количество,
	|	ПриходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки.Номер КАК ЗаявкаНаПроизводство,
	|	ПриходныйОрдерСкладТовары.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки = &Ссылка
	|	И ПриходныйОрдерСкладТовары.Ссылка = &ПриходныйОрдер";
	
	Результаты 	= Запрос.ВыполнитьПакет();
	Выборка 	= Результаты[0].Выбрать();
	ТабЭтикетки = ?(ПриходныйОрдер = Неопределено, Результаты[1].Выгрузить(), Результаты[2].Выгрузить());
	
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
	ОбластьПолучатель 	= Макет.ПолучитьОбласть("Получатель");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьИтог         = Макет.ПолучитьОбласть("Итог");
	
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПриходныйОрдер = Неопределено Тогда 
			Дата_Пар 	= ПриходныйОрдер.Дата;
			Номер_Пар 	= ПриходныйОрдер.Номер;
		ИначеЕсли НЕ Письмо = Неопределено Тогда
			Дата_Пар 	= Письмо.Дата;
			Номер_Пар 	= Письмо.Номер;
		Иначе
			Дата_Пар 	= Ссылка.Дата;
			Номер_Пар 	= Ссылка.Номер;
		КонецЕсли;
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Номер 	= Номер_Пар;
		ОбластьЗаголовок.Параметры.Дата		= Формат(Дата_Пар, "ДЛФ=DD");
		ТекДоговор = ПолучитьДоговорКонтрагента(Ссылка.Поставщик);
		ОбластьЗаголовок.Параметры.ОрганизацияНаименование = ?(ЗначениеЗаполнено(ТекДоговор), ТекДоговор.Организация, Справочники.Организации.ПустаяСсылка());
		 			
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		
		ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
		
		ОбластьПолучатель.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьПолучатель, Выборка.Уровень());
		
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
			ОбластьКоммент = Макет.ПолучитьОбласть("Комментарий");
			ОбластьКоммент.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
			ТабДок.Вывести(ОбластьКоммент);
		КонецЕсли;	
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
						
		// Строка
		КолвоКор 	= 0;
		КолвоЕд 	= 0;
		КолвоУРЗ 	= 0;
		КолвоТТ 	= 0;
		Для Каждого ВыборкаНоменклатура Из ТабЭтикетки Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			КолвоЕд = КолвоЕд + ВыборкаНоменклатура.Количество;
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		// Подвал
		ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
		ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
		ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
		//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
		ТабДок.Вывести(ОбластьИтог);
		
		ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
		
		ТабДок.Вывести(ОбластьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		ТабДок.Вывести(ОбластьВремяПечати);
		
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции	
 
Функция ПолучитьДоговорКонтрагента(мКонтрагент)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", мКонтрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка1 = РезультатыЗапроса[0].Выбрать();
	Если Выборка1.Следующий() Тогда
		Если Выборка1.Количество > 0 Тогда
			Если Выборка1.Количество > 1
					И НЕ мКонтрагент.ОсновнойДоговорКонтрагента.пустая() Тогда
				Возврат мКонтрагент.ОсновнойДоговорКонтрагента
			КонецЕсли;
			
			Выборка2 = РезультатыЗапроса[1].Выбрать();
			Выборка2.Следующий();
			Возврат Выборка2.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ЗаполнитьПисьмо(Тема, ТекстПисьма, Ссылка, АдресОтправителя) Экспорт	
	
	//
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Ссылка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	НовоеПисьмо.Дата 			= ТекущаяДата();
	НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	//НовоеПисьмо.ЕстьВложения = ?(Неопределено,Ложь,Вложения.Количество());
	НовоеПисьмо.ТекстПисьма 	= ТекстПисьма;
	НовоеПисьмо.Тема 			= Тема;
	НовоеПисьмо.УчетнаяЗапись 	= УчетнаяЗапись;
	
	//
	Если ТипЗнч(АдресОтправителя) = Тип("СписокЗначений") Тогда
		
		Для Каждого Технолог Из АдресОтправителя Цикл
			
			НовоеПисьмо.Кому 				= Технолог.Значение;
			НовоеПисьмо.КомуПредставление 	= Технолог.Значение;
			Получатель = НовоеПисьмо.КомуТЧ.Добавить();
			Получатель.АдресЭлектроннойПочты 	= Технолог.Значение;//Заявка.АдресОтправителя;
			Получатель.Представление 			= Технолог.Значение;//Заявка.АдресОтправителя;
			
		КонецЦикла;
		
	Иначе 
		
		//
		НовоеПисьмо.Кому 				= АдресОтправителя;
		НовоеПисьмо.КомуПредставление 	= АдресОтправителя;
		Получатель = НовоеПисьмо.КомуТЧ.Добавить();
		Получатель.АдресЭлектроннойПочты 	= АдресОтправителя;//Заявка.АдресОтправителя;
		Получатель.Представление 			= АдресОтправителя;//Заявка.АдресОтправителя;
		
	КонецЕсли;
	
	//
	НовоеПисьмо.Записать();
	
	//
	Возврат НовоеПисьмо.Ссылка;
	
КонецФункции

Процедура ОтправитьПисьмоПроизведено(Заявка ,ПриходныйОрдер = Неопределено, Письмо = Неопределено) Экспорт
	
	Если Письмо = Неопределено Тогда
		Письмо = ЗаполнитьПисьмо("Оповещение о прозводстве упаковки", "Этикетки по заявке " + Заявка.Номер + " произведены", Заявка, Заявка.АдресОтправителя);
	КонецЕсли;
	
	//
	ТабДок = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьВыполненнойЗаявки(Заявка, ПриходныйОрдер, Письмо);
	ИмяВСПравочник = Заявка.Номер + ".PDF"; 
	мИмяФайла = КаталогВременныхФайлов() + ИмяВСПравочник;
	Попытка
		ТабДок.Записать(мИмяФайла, ТипФайлаТабличногоДокумента.PDF); 
		Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(мИмяФайла), Новый СжатиеДанных());
		СохранитьВложение(Хранилище, ИмяВСПравочник, Письмо);
	Исключение
	КонецПопытки;
	
	//
	ОтправитьПисьмо(Письмо);
	
КонецПроцедуры

Процедура СохранитьВложение(Хранилище, ИмяФайла, Письмо)
	
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= Письмо;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Хранилище;
	НовыйФайл.Записать();
	
КонецПроцедуры

Процедура ОтправитьПисьмо(НовоеПисьмо) Экспорт
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(НовоеПисьмо.УчетнаяЗапись);
	
	Письма = Новый Соответствие;
	Письма.Вставить(НовоеПисьмо.Ссылка, НовоеПисьмо);
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	
КонецПроцедуры
 
//
//
Функция ДобавитьИнформациюВОчередьУведомлений(Заявка) Экспорт
	
	//
	Если Заявка.Дата <= '20160824' Тогда
		Возврат Истина;
	КонецЕсли; 
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Заявка,
	|	Таблица.УпаковкаЭтикетка,
	|	СУММА(Таблица.КоличествоКОтгрузке) КАК КоличествоКОтгрузке
	|ПОМЕСТИТЬ ТЗ_Уведомления
	|ИЗ
	|	РегистрСведений.АК_УведомленияОПроизводствеУпаковки КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ЭлектронноеПисьмо.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Заявка,
	|	Таблица.УпаковкаЭтикетка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Заявка,
	|	Таблица.Этикетка,
	|	ЕСТЬNULL(ЗаявкиНаПроизводствоОстатки.КоличествоКОтгрузкеПриход, 0) КАК КоличествоКОтгрузке,
	|	ЕСТЬNULL(УведомленияОПроизводствеУпаковки.КоличествоКОтгрузке, 0) КАК КоличествоКОтгрузкеВУведомлении
	|ИЗ
	|	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , , Заявка = &Ссылка) КАК ЗаявкиНаПроизводствоОстатки
	|		ПО Таблица.Ссылка = ЗаявкиНаПроизводствоОстатки.Заявка
	|			И Таблица.Этикетка = ЗаявкиНаПроизводствоОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Уведомления КАК УведомленияОПроизводствеУпаковки
	|		ПО Таблица.Ссылка = УведомленияОПроизводствеУпаковки.Заявка
	|			И Таблица.Этикетка = УведомленияОПроизводствеУпаковки.УпаковкаЭтикетка
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
		 
	//
	РегСвУведомления 	= РегистрыСведений.АК_УведомленияОПроизводствеУпаковки;
	мПустоеПисьмо		= Документы.ЭлектронноеПисьмо.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		//
		Если Выборка.КоличествоКОтгрузкеВУведомлении >= Выборка.КоличествоКОтгрузке Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		МенеджерЗаписи = РегСвУведомления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заявка 				= Заявка;
		МенеджерЗаписи.УпаковкаЭтикетка 	= Выборка.Этикетка;
		МенеджерЗаписи.ЭлектронноеПисьмо 	= мПустоеПисьмо;
		
		МенеджерЗаписи.КоличествоКОтгрузке 	= Выборка.КоличествоКОтгрузке - Выборка.КоличествоКОтгрузкеВУведомлении;
		
		МенеджерЗаписи.ДатаДобавления 		= ТекущаяДата();
		
		МенеджерЗаписи.Записать();
	
	КонецЦикла; 
	
	//
	Документы.ЗаявкаНаПечатьЭтикетки.ОбработатьОчередьУведомлений(Заявка);
	
КонецФункции	

//
//
Функция ПолучитьАдресаТехнологов(Контрагент, Характеристика, Этикетка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Результат = Новый Соответствие;
	
	//
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"		, Характеристика);
		Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Приоритет,
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК EMail
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|				И Объект = &Объект) КАК СоответствиеОбъектРольСрезПервых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
		|				И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|		ПО СоответствиеОбъектРольСрезПервых.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ПОДСТРОКА(КонтактнаяИнформация.Представление, 0, 100), """") <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	1,
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100))
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			,
		|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|				И Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПервых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
		|				И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|		ПО СоответствиеОбъектРольСрезПервых.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ПОДСТРОКА(КонтактнаяИнформация.Представление, 0, 100), """") <> """"";
			 
		//
		ТЗ_Результат = Запрос.Выполнить().Выгрузить();
		
		ТЗ = ТЗ_Результат.НайтиСтроки(Новый Структура("Приоритет", 0));
		Если ТЗ.Количество() = 0 Тогда
			ТЗ = ТЗ_Результат.НайтиСтроки(Новый Структура("Приоритет", 1));
		КонецЕсли; 
		
		//
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.EMail) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаТЗ.EMail, СтрокаТЗ.Сотрудник);
		
		КонецЦикла; 
		
	Иначе
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
		Запрос.УстановитьПараметр("Этикетка"	, Этикетка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпецификацииСостав.Ссылка.Владелец КАК Номенклатура,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &Контрагент) КАК Контрагент,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Контрагент) КАК Характеристика
		|ИЗ
		|	Справочник.Спецификации.Состав КАК СпецификацииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО (ВЫБОР
		|					КОГДА ХарактеристикиНоменклатуры.Владелец.НеВедетсяУчетПоХарактеристикам
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|							И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|							//???ZEZA И ЗначенияСвойствОбъектов.Значение = &Контрагент
		|				КОНЕЦ)
		|		ПО СпецификацииСостав.Ссылка.Владелец = ХарактеристикиНоменклатуры.Владелец
		|ГДЕ
		|	СпецификацииСостав.Номенклатура = &Этикетка";
			 
		//
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			//
			Адреса = ПолучитьАдресаТехнологов(Выборка.Контрагент, Выборка.Характеристика, Этикетка);
			Для каждого ЭлементСоответствия Из Адреса Цикл
				Результат.Вставить(ЭлементСоответствия.Ключ);
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции

//
//
Функция ПолучитьАдресаПеревозчиков(Контрагент, Склад, Характеристика, Этикетка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Результат = Новый Соответствие;
	
	//
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		//
		ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	Таблица.Перевозчик
		     |ПОМЕСТИТЬ ТЗ
		     |ИЗ
		     |	Справочник.МаршрутыТранспортныхКомпаний КАК Таблица
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.Поставщики КАК ТаблицаПоставщики
		     |		ПО Таблица.Ссылка = ТаблицаПоставщики.Ссылка
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.ДоставкаНаСклад КАК ТаблицаСклады
		     |		ПО Таблица.Ссылка = ТаблицаСклады.Ссылка
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыТранспортныхКомпаний.Товары КАК ТаблицаТовары
		     |		ПО Таблица.Ссылка = ТаблицаТовары.Ссылка
		     |ГДЕ
		     |	НЕ Таблица.Устаревший
		     |	И ТаблицаПоставщики.Поставщик = &Контрагент
		     |	И (Таблица.ЛюбойИзСкладов
		     |			ИЛИ ТаблицаСклады.Склад ЕСТЬ NULL 
		     |			ИЛИ ТаблицаСклады.Склад = &Склад
		     |			ИЛИ ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).Владелец = ТаблицаСклады.Склад)
		     |	И (ТаблицаТовары.Номенклатура ЕСТЬ NULL 
		     |			ИЛИ ТаблицаТовары.Номенклатура = &Номенклатура)
		     |;
		     |
		     |////////////////////////////////////////////////////////////////////////////////
		     |ВЫБРАТЬ
		     |	0 КАК Приоритет,
		     |	КонтактныеЛицаКонтрагентов.Ссылка КАК Перевозчик,
		     |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100)) КАК EMail
		     |ИЗ
		     |	ТЗ КАК ТЗ
		     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		     |		ПО ТЗ.Перевозчик = КонтактныеЛицаКонтрагентов.Владелец
		     |			И (КонтактныеЛицаКонтрагентов.РольКонтактногоЛица.Наименование ПОДОБНО ""%транспорт%"")
		     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		     |		ПО (КонтактныеЛицаКонтрагентов.Ссылка = КонтактнаяИнформация.Объект)
		     |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента))
		     |
		     |ОБЪЕДИНИТЬ
		     |
		     |ВЫБРАТЬ
		     |	1,
		     |	ТЗ.Перевозчик,
		     |	ВЫРАЗИТЬ(ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК СТРОКА(100))
		     |ИЗ
		     |	ТЗ КАК ТЗ
		     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		     |		ПО ТЗ.Перевозчик = КонтактнаяИнформация.Объект
		     |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Контрагент", Контрагент);
		ПЗ.Параметры.Вставить("Склад", Склад);
		ПЗ.Параметры.Вставить("Номенклатура", Характеристика.Владелец);
		
		//
		ПЗ.Выполнить();
		
		//
		ТЗ_Результат = ПЗ.Результат.Выгрузить();
		
		//
		ТЗ = ТЗ_Результат.НайтиСтроки(Новый Структура("Приоритет", 0));
		Если ТЗ.Количество() = 0 Тогда
			ТЗ = ТЗ_Результат.НайтиСтроки(Новый Структура("Приоритет", 1));
		КонецЕсли; 
		
		//
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			//
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.EMail) Тогда
				Продолжить;
			КонецЕсли;
			
			//
			Результат.Вставить(СтрокаТЗ.EMail, СтрокаТЗ.Перевозчик);
		
		КонецЦикла; 
		
	Иначе
		
		//
		ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	СпецификацииСостав.Ссылка.Владелец КАК Номенклатура,
			 |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &Контрагент) КАК Контрагент,
		     |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Контрагент) КАК Характеристика
		     |ИЗ
		     |	Справочник.Спецификации.Состав КАК СпецификацииСостав
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		     |			ПО (ВЫБОР
		     |					КОГДА ХарактеристикиНоменклатуры.Владелец.НеВедетсяУчетПоХарактеристикам
		     |						ТОГДА ЛОЖЬ
		     |					ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		     |							И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		     |							//???ZEZA И ЗначенияСвойствОбъектов.Значение = &Контрагент
		     |				КОНЕЦ)
		     |		ПО СпецификацииСостав.Ссылка.Владелец = ХарактеристикиНоменклатуры.Владелец
		     |ГДЕ
		     |	СпецификацииСостав.Номенклатура = &Этикетка";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("Контрагент", Контрагент); 
		ПЗ.Параметры.Вставить("Этикетка", Этикетка);
		
		//
		ПЗ.Выполнить();
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			//
			Адреса = ПолучитьАдресаПеревозчиков(Выборка.Контрагент, Склад, Выборка.Характеристика, Этикетка);
			Для каждого ЭлементСоответствия Из Адреса Цикл
				Результат.Вставить(ЭлементСоответствия.Ключ);
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции // ()

//
//
Функция ОбработатьОчередьУведомлений(Заявка = Неопределено) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ТЗ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |	Таблица.Заявка КАК Заявка,
	     |	Таблица.УпаковкаЭтикетка,
	     |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Товар КАК Номенклатура,
	     |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Характеристика,
	     |	Таблица.КоличествоКОтгрузке
	     |ИЗ
	     |	РегистрСведений.АК_УведомленияОПроизводствеУпаковки КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	     |		ПО Таблица.Заявка = ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка
	     |			И Таблица.УпаковкаЭтикетка = ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка
	     |ГДЕ
	     |	Таблица.ЭлектронноеПисьмо.Ссылка ЕСТЬ NULL 
	     |{ГДЕ
	     |	Таблица.Заявка.*}
	     |ИТОГИ ПО
	     |	Заявка";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	Если ЗначениеЗаполнено(Заявка) Тогда
		
		//
		спЗаявки = Новый СписокЗначений;
		Если ТипЗнч(Заявка) = Тип("Массив") Тогда	
			спЗаявки.ЗагрузитьЗначения(Заявка);
		ИначеЕсли ТипЗнч(Заявка) = Тип("СписокЗначений") Тогда
			спЗаявки = Заявка;
		Иначе
			спЗаявки.Добавить(Заявка);
		КонецЕсли;	
		
		//
		ЭлементОтбора = ПЗ.Отбор.Добавить("Заявка");
		ЭлементОтбора.ВидСравнения 	= ВидСравнения.ВСписке;
		ЭлементОтбора.Значение 		= спЗаявки;
		ЭлементОтбора.Использование = Истина;
	
	КонецЕсли; 
	
	//
	ПЗ.Выполнить();
	
	//
	ВыборкаЗаявка = ПЗ.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявка.Следующий() Цикл
		
		//
		МассивЭтикетки = Новый Массив;
		
		//
		ТекущаяЗаявка = ВыборкаЗаявка.Заявка;
		
		//АДРЕСА ПОСТАВЩИКОВ
		спАдресаПоставщиков = Новый Соответствие;
		Если ЗначениеЗаполнено(ТекущаяЗаявка.АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(ТекущаяЗаявка.АдресОтправителя);	
		КонецЕсли; 
		
		//	
		Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(ТекущаяЗаявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
		Если ЗначениеЗаполнено(Структура) Тогда
			
			//
			АдресОтправителя = СокрЛП(Структура.Представление);
			Если ЗначениеЗаполнено(АдресОтправителя) Тогда
				спАдресаПоставщиков.Вставить(ТекущаяЗаявка.АдресОтправителя);	
			КонецЕсли; 
			
		КонецЕсли;
		
		//АДРЕСА ТЕХНОЛОГОВ
		спАдресаТехнологов = Новый Соответствие;
		
		//АДРЕСА ПЕРЕВОЗЧИКОВ
		спАдресаПеревозчиков = Новый Соответствие;
		
		//
		ТекстПисьма = "";
		
		//
		ВыборкаДЗ = ВыборкаЗаявка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДЗ.Следующий() Цикл
			
			//
			МассивЭтикетки.Добавить(ВыборкаДЗ.УпаковкаЭтикетка);
			
			//
			ТекстПисьма = ТекстПисьма + Символы.Таб + "• " + СокрЛП(ВыборкаДЗ.УпаковкаЭтикетка) + ": " + Формат(ВыборкаДЗ.КоличествоКОтгрузке, "ЧГ=") + Символы.ПС;
			
			//
			Адреса = ПолучитьАдресаТехнологов(Заявка.Поставщик, ВыборкаДЗ.Характеристика, ВыборкаДЗ.УпаковкаЭтикетка);
			Для каждого ЭлементСоответствия Из Адреса Цикл
				спАдресаТехнологов.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла; 
			
			//
			Адреса = ПолучитьАдресаПеревозчиков(Заявка.Поставщик, Заявка.Склад, ВыборкаДЗ.Характеристика, ВыборкаДЗ.УпаковкаЭтикетка);
			Для каждого ЭлементСоответствия Из Адреса Цикл
				спАдресаПеревозчиков.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
		КонецЦикла; 
		
		//
		Если спАдресаПоставщиков.Количество() = 0 И спАдресаТехнологов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		Если ЗначениеЗаполнено(ТекстПисьма) Тогда
			
			//
			ТекстПисьма = "По Заявке на производство Упаковки/Этикетки №" + СокрЛП(ТекущаяЗаявка.Номер) + " ПРОИЗВЕДЕНЫ и готовы к ОТГРУЗКЕ:" + Символы.ПС + ТекстПисьма;
							
			//
			ПодвалПисьма = 	"──── ВНИМАНИЕ ──────────────────────────────────────────────────────────────────────────────────────────
							|	Не позднее 6-ти часов до даты/времени забора этикетки/упаковки необходимо переслать данное письмо 
							|на [operator.2013@list.ru, sklad2@izbenka.msk.ru, dasha-kld@mail.ru] с указанием даты и времени забора.
							|                                      
							|	В письме должен быть тот же вложенный файл, который содержится в данном письме.                  
							|	В противном случае процесс сбора и отгрузки упаковки/этикетки будет затянут.                       
							|────────────────────────────────────────────────────────────────────────────────────────────────────────";
										
							
			//
			ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
		КонецЕсли; 
		
		//СОЗДАЕМ ПИСЬМО
		НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
		НовоеПисьмо.УстановитьНовыйНомер("1");
		НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
		
		//
		НовоеПисьмо.ОснованиеПисьма = ТекущаяЗаявка;
		НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
		
		//
		НовоеПисьмо.Дата = ТекущаяДата();
		//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
		
		//
		НовоеПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
		
		//
		НовоеПисьмо.Тема = "По Заявке на производство Упаковки/Этикетки №" + СокрЛП(ТекущаяЗаявка.Номер) + " заказанные позиции ПРОИЗВЕДЕНЫ и готовы к ОТГРУЗКЕ";
		НовоеПисьмо.ТекстПисьма = СокрЛП(ТекстПисьма);
		
		//
		Если спАдресаПоставщиков.Количество() > 0 Тогда
			
			//
			Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
				
				//
				НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
				НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
				НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
				
			КонецЦикла; 
		
		КонецЕсли;
		
		//
		Если спАдресаТехнологов.Количество() > 0 Тогда
			
			//
			ИмяТЧ = "КопииТЧ";
			Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
				ИмяТЧ = "КомуТЧ";
			КонецЕсли; 
			
			//
			Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
				
				//
				НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
				НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
				НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
				
			КонецЦикла;	
		
		КонецЕсли;
		
		//
		Если спАдресаПеревозчиков.Количество() > 0 Тогда
			
			//
			ИмяТЧ = "СкрытыеКопииТЧ";
			
			//
			Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
				ИмяТЧ = "КомуТЧ";
			ИначеЕсли НовоеПисьмо.КопииТЧ.Количество() = 0 Тогда
				ИмяТЧ = "КопииТЧ";
			КонецЕсли; 
			
			//
			Для каждого ЭлементСоответствия Из спАдресаПеревозчиков Цикл
				
				//
				НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
				НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
				НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
				
			КонецЦикла;	
		
		КонецЕсли; 
		
		//
		НовоеПисьмо.ЕстьВложения = Истина;
		
		//
		НовоеПисьмо.Записать();
		
		//
		НовоеПисьмо.Кому = НовоеПисьмо.КомуПредставление;
		НовоеПисьмо.Копии = НовоеПисьмо.КопииПредставление;
		
		//
		НовоеПисьмо.Записать();
		
		//
		ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(ВыборкаЗаявка.Заявка);
		
		//
		ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(ТекущаяЗаявка.Номер) + ".pdf";
		ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
		
		//
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
		//
		НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
		НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
		НовыйФайл.ИмяФайла 	= ИмяФайла;
		НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
		НовыйФайл.Записать();
		
		//
		УдалитьФайлы(ПолноеИмяФайла);
		
		//
		Для каждого ЭлементМассива Из МассивЭтикетки Цикл
		
			//
			МЗ = РегистрыСведений.АК_УведомленияОПроизводствеУпаковки.СоздатьМенеджерЗаписи();
			МЗ.Заявка 				= ТекущаяЗаявка;
			МЗ.УпаковкаЭтикетка 	= ЭлементМассива;
			МЗ.ЭлектронноеПисьмо 	= Документы.ЭлектронноеПисьмо.ПустаяСсылка();
			МЗ.Прочитать();
			
			//
			МЗ.Заявка = ТекущаяЗаявка;
			МЗ.УпаковкаЭтикетка 	= ЭлементМассива;
			МЗ.ЭлектронноеПисьмо 	= НовоеПисьмо.Ссылка;
			
			//
			МЗ.Записать();
		
		КонецЦикла; 
		
		
		//		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(НовоеПисьмо.Ссылка); 

		//						
		ТекстОшибок = "";
		УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);
		
	КонецЦикла; 

КонецФункции

//
//
Функция ПечатьЗаявкаПотребителя(Ссылка, ТабличныйДокумент = Неопределено) Экспорт

	//
	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент) Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;	
	КонецЕсли; 
	
	//
	Макет = Документы.ЗаявкаНаПечатьЭтикетки.ПолучитьМакет("ЗаявкаПотребителя");
	
	//
	СтруктураПолейШапки = Новый Структура;
	
	//
	СтруктураПолейШапки.Вставить("Дата"	, Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy"));
	СтруктураПолейШапки.Вставить("Номер", Ссылка.Номер);
	
	//
	Организация = ОбщиеПроцедуры.ПолучитьОрганизациюПоСтруктурнойЕдинице(Ссылка.Склад.Владелец);
	
	//
	ОрганизацияНаименование = "ООО ""Вкусвилл""";
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияНаименование = СокрЛП(Организация.НаименованиеСокращенное);
	КонецЕсли; 
	
	//
	СтруктураПолейШапки.Вставить("ОрганизацияНаименование"	, ОрганизацияНаименование);
	СтруктураПолейШапки.Вставить("Склад"					, Ссылка.Склад);
	СтруктураПолейШапки.Вставить("Получатель"				, Ссылка.Поставщик);
	
	//ЗАГОЛОВОК
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ПОЛУЧАТЕЛЬ
	ОбластьМакета = Макет.ПолучитьОбласть("Получатель");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//СКЛАД
	ОбластьМакета = Макет.ПолучитьОбласть("Склад");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Номенклатура,
	     |	Таблица.КоличествоЗаказаноНачальныйОстаток,
	     |	Таблица.КоличествоЗаказаноПриход,
	     |	Таблица.КоличествоЗаказаноРасход,
	     |	Таблица.КоличествоЗаказаноКонечныйОстаток,
	     |	Таблица.КоличествоКОтгрузкеНачальныйОстаток,
	     |	Таблица.КоличествоКОтгрузкеПриход,
	     |	Таблица.КоличествоКОтгрузкеРасход,
	     |	Таблица.КоличествоКОтгрузкеКонечныйОстаток,
	     |	Таблица.КоличествоКПроизводствуНачальныйОстаток,
	     |	Таблица.КоличествоКПроизводствуПриход,
	     |	Таблица.КоличествоКПроизводствуРасход,
	     |	Таблица.КоличествоКПроизводствуКонечныйОстаток
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.ОстаткиИОбороты(, , , , Заявка = &Заявка) КАК Таблица";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Заявка", Ссылка);
	
	//
	ПЗ.Выполнить();
	
	//ШАПКА ТАБЛИЦЫ
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	НомерСтроки = 1;
	
	//
	ВсегоКоличествоЗаказано 	= 0;
	ВсегоКоличествоОтгружено 	= 0;
	ВсегоКоличествоКОтгрузке 	= 0;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//СТРОКА ТАБЛИЦЫ
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		//
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		//
		ОбластьМакета.Параметры.КоличествоЗаказано = Выборка.КоличествоЗаказаноПриход;
		ОбластьМакета.Параметры.КоличествоОтгружено = Выборка.КоличествоЗаказаноРасход;
		ОбластьМакета.Параметры.КоличествоКОтгрузке = МАКС(0, Выборка.КоличествоКОтгрузкеКонечныйОстаток);
		
		//
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//
		НомерСтроки = НомерСтроки + 1;
		
		//
		ВсегоКоличествоЗаказано = ВсегоКоличествоЗаказано + ОбластьМакета.Параметры.КоличествоЗаказано;
		ВсегоКоличествоОтгружено = ВсегоКоличествоОтгружено + ОбластьМакета.Параметры.КоличествоОтгружено;
		ВсегоКоличествоКОтгрузке = ВсегоКоличествоКОтгрузке + ОбластьМакета.Параметры.КоличествоКОтгрузке;
		
	КонецЦикла; 
	
	//ИТОГ
	ОбластьМакета = Макет.ПолучитьОбласть("Итог");
	
	//
	ОбластьМакета.Параметры.КоличествоЗаказано = ВсегоКоличествоЗаказано;
	ОбластьМакета.Параметры.КоличествоОтгружено = ВсегоКоличествоОтгружено;
	ОбластьМакета.Параметры.КоличествоКОтгрузке = ВсегоКоличествоКОтгрузке;
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ПОДВАЛ
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ВРЕМЯ ПЕЧАТИ
	ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьМакета.Параметры.ВремяПечати = ТекущаяДата();
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	Возврат ТабличныйДокумент;
	
КонецФункции
 
//
//
Функция ПечатьЗаявкаПроизводителю(Ссылка, ТабличныйДокумент = Неопределено) Экспорт

	//
	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент) Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;	
	КонецЕсли; 
	
	//
	Макет = Документы.ЗаявкаНаПечатьЭтикетки.ПолучитьМакет("ЗаявкаПроизводителю");
	
	//
	СтруктураПолейШапки = Новый Структура;
	
	//
	СтруктураПолейШапки.Вставить("Дата", Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy"));
	СтруктураПолейШапки.Вставить("Номер", Ссылка.Номер);
	
	//
	Организация = ОбщиеПроцедуры.ПолучитьОрганизациюПоСтруктурнойЕдинице(Ссылка.Склад.Владелец);
	
	//
	ОрганизацияНаименование = "ООО ""Вкусвилл""";
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияНаименование = СокрЛП(Организация.НаименованиеСокращенное);
	КонецЕсли; 
	
	//
	СтруктураПолейШапки.Вставить("ОрганизацияНаименование", ОрганизацияНаименование);
	СтруктураПолейШапки.Вставить("Склад", Ссылка.Склад);
	СтруктураПолейШапки.Вставить("Получатель", Ссылка.Поставщик);
	СтруктураПолейШапки.Вставить("Производитель", Ссылка.Исполнитель);
	
	//ЗАГОЛОВОК
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ПОЛУЧАТЕЛЬ
	ОбластьМакета = Макет.ПолучитьОбласть("Производитель");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//СКЛАД
	ОбластьМакета = Макет.ПолучитьОбласть("Склад");
	ОбластьМакета.Параметры.Заполнить(СтруктураПолейШапки);
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Этикетка КАК Номенклатура,
	     |	Таблица.Товар КАК Товар,
	     |	СУММА(Таблица.КоличествоЗаказано - Таблица.КоличествоСоСклада) КАК Количество
	     |ИЗ
	     |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
	     |ГДЕ
	     |	Таблица.Ссылка = &Ссылка
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Этикетка,
	     |	Таблица.Товар";
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Ссылка", Ссылка);
	
	//
	ПЗ.Выполнить();
	
	//ШАПКА ТАБЛИЦЫ
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	НомерСтроки = 1;
	
	//
	ВсегоКоличество = 0;
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//СТРОКА ТАБЛИЦЫ
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		//
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		//
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//
		НомерСтроки = НомерСтроки + 1;
		
		//
		ВсегоКоличество = ВсегоКоличество + ОбластьМакета.Параметры.Количество;
		
	КонецЦикла; 
	
	//ИТОГ
	ОбластьМакета = Макет.ПолучитьОбласть("Итог");
	
	//
	ОбластьМакета.Параметры.ВсегоКоличество = ВсегоКоличество;
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ПОДВАЛ
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ВРЕМЯ ПЕЧАТИ
	ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьМакета.Параметры.ВремяПечати = ТекущаяДата();
	
	//
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//
	Возврат ТабличныйДокумент;
	
КонецФункции


////////////////////////////////////////////////////////////////

//
//
Функция ОтправитьПисьмо_ЗаявкаПринята(Заявка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик,
														Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "";
	
	//
	Для каждого СтрокаТЗ Из Заявка.Этикетки Цикл
	
		//
		ТекстПисьма = ТекстПисьма + Символы.Таб + "• " + СокрЛП(СтрокаТЗ.Этикетка) + ": " + Формат(СтрокаТЗ.КоличествоЗаказано, "ЧГ=") + Символы.ПС;
		
		//
		Адреса = ПолучитьАдресаТехнологов(Заявка.Поставщик, СтрокаТЗ.Характеристика, СтрокаТЗ.Этикетка);
		Для каждого ЭлементСоответствия Из Адреса Цикл
			спАдресаТехнологов.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		//
		ТекстПисьма = "По Заявке на производство Упаковки/Этикетки №" + Заявка.Номер + " ПРИНЯТЫ к обработке: " + Символы.ПС + ТекстПисьма;
		
		//
		ПодвалПисьма = 	"";
		
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата = ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ПРИНЯТА";
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);

КонецФункции
 
//
//
Функция ОтправитьПисьмо_ЗаявкаОбработана(Заявка) Экспорт

	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "";
	
	//
	Для каждого СтрокаТЗ Из Заявка.Этикетки Цикл
	
		//
		ТекстПисьма = ТекстПисьма + Символы.Таб + "• " + СокрЛП(СтрокаТЗ.Этикетка) + ": " + Формат(СтрокаТЗ.КоличествоЗаказано, "ЧГ=") + Символы.ПС;
		
		//
		Адреса = ПолучитьАдресаТехнологов(Заявка.Поставщик, СтрокаТЗ.Характеристика, СтрокаТЗ.Этикетка);
		Для каждого ЭлементСоответствия Из Адреса Цикл
			спАдресаТехнологов.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		//
		ТекстПисьма = "По Заявке на производство Упаковки/Этикетки №" + Заявка.Номер + " ОБРАБОТАНЫ и переданы в производство:" + Символы.ПС + ТекстПисьма;
		
		//
		ПодвалПисьма = 	"";
		Если ЗначениеЗаполнено(Заявка.ОтправитьДо) Тогда
			ПодвалПисьма = 	"Плановая дата отгрузки: " + Формат(Заявка.ОтправитьДо, "ДФ=dd.MM.yyyy");	
		КонецЕсли; 
		
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата = ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ОБРАБОТАНА и передана в производство" ;
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);
	
КонецФункции

//
//
Функция ОтправитьПисьмо_ЗаявкаПроизведено(Заявка) Экспорт

	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "";
	
	//
	Для каждого СтрокаТЗ Из Заявка.Этикетки Цикл
	
		//
		ТекстПисьма = ТекстПисьма + Символы.Таб + "• " + СокрЛП(СтрокаТЗ.Этикетка) + ": " + Формат(СтрокаТЗ.КоличествоЗаказано, "ЧГ=") + Символы.ПС;
		
		//
		Адреса = ПолучитьАдресаТехнологов(Заявка.Поставщик, СтрокаТЗ.Характеристика, СтрокаТЗ.Этикетка);
		Для каждого ЭлементСоответствия Из Адреса Цикл
			спАдресаТехнологов.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		//
		ТекстПисьма = "По Заявке на производство Упаковки/Этикетки №" + Заявка.Номер + " ПРОИЗВЕДЕНЫ и готовы к отгрузке:" + Символы.ПС + ТекстПисьма;
		
		//
		ПодвалПисьма = 	"";
		Если ЗначениеЗаполнено(Заявка.ОтправитьДо) Тогда
			ПодвалПисьма = 	"Плановая дата отгрузки: " + Формат(Заявка.ОтправитьДо, "ДФ=dd.MM.yyyy");	
		КонецЕсли; 
		
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата = ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ПРОИЗВЕДЕНА и готова к отгрузке" ;
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);
	
КонецФункции

//
//
Функция ОтправитьПисьмо_ЗаявкаПриостановлена(Заявка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "Выполнение Заявки на производство Упаковки/Этикетки №" + Заявка.Номер + " ПРИОСТАНОВЛЕНО"; 
	ТекстПисьма = ТекстПисьма + ?(ЗначениеЗаполнено(Заявка.ОписаниеПричиныПриостановки), " по причине:" + Символы.ПС + Символы.ПС + Заявка.ОписаниеПричиныПриостановки, "");
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		//
		//ТекстПисьма = "Заявка на производство Упаковки/Этикетки №" + Заявка.Номер + " ПРИОСТАНОВЛЕНА" + Символы.ПС + ТекстПисьма;
		
		//
		ПодвалПисьма = 	"";
		
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата = ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ПРИОСТАНОВЛЕНА" ;
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);

КонецФункции

//
//
Функция ОтправитьПисьмо_ЗаявкаОтменена(Заявка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	// АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	// АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	Для каждого СтрокаТЧ Из Заявка.Этикетки Цикл
	
		Адреса = ПолучитьАдресаТехнологов(Заявка.Поставщик, СтрокаТЧ.Характеристика, СтрокаТЧ.Этикетка);
		Для каждого ЭлементСоответствия Из Адреса Цикл
			спАдресаТехнологов.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	
	// СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.Дата 			= ТекущаяДата();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	
	//
	НовоеПисьмо.Тема 		= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ОТМЕНЕНА";
	НовоеПисьмо.ТекстПисьма = "Выполнение Заявки на производство Упаковки/Этикетки №" + СокрЛП(Заявка.Номер) + " ОТМЕНЕНО" + Символы.ПС +
								?(ЗначениеЗаполнено(Заявка.Комментарий), "Комментарий: " + СокрЛП(Заявка.Комментарий), "") + Символы.ПС;
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	НовоеПисьмо.ЕстьВложения = Истина;
	
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь);

КонецФункции

//
//
Функция ОтправитьПисьмо_ЗаявкаВыполнена(Заявка) Экспорт
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "";
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
		
		//
		ТекстПисьма = "Заявка на производство Упаковки/Этикетки №" + Заявка.Номер + " ВЫПОЛНЕНА" + Символы.ПС + ТекстПисьма;
		
		//
		ПодвалПисьма = 	"";
		
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата 			= ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "Заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ВЫПОЛНЕНА" ;
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление = ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты = ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);

КонецФункции

//
//
Функция ОтправитьПисьмо_ЗаявкаНеПринята(Заявка) Экспорт

	//
	УстановитьПривилегированныйРежим(Истина);
	
	//
	ВсеОК = Истина;
	
	//АДРЕСА ПОСТАВЩИКОВ
	спАдресаПоставщиков = Новый Соответствие;
	Если ЗначениеЗаполнено(Заявка.АдресОтправителя) Тогда
		спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
	КонецЕсли; 
	
	//	
	Структура = ОбщегоНазначения.ПолучитьКонтактнуюИнформациюПоВиду(Заявка.Поставщик, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Если ЗначениеЗаполнено(Структура) Тогда
		
		//
		АдресОтправителя = СокрЛП(Структура.Представление);
		Если ЗначениеЗаполнено(АдресОтправителя) Тогда
			спАдресаПоставщиков.Вставить(Заявка.АдресОтправителя);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//АДРЕСА ТЕХНОЛОГОВ
	спАдресаТехнологов = Новый Соответствие;
	
	//
	ТекстПисьма = "";
	ТекстПисьмаОВыводимыхПозициях = "";
	ЕстьВыводимаяХарактеристика = Ложь;
	ТекстПисьмаОПревышениях = ""; 
	ЕстьПревышениеВеличиныЗаказа = Ложь;
	//
	Для каждого СтрокаТЗ Из Заявка.Этикетки Цикл
		//При заказе поставщиком упаковки на выводимую позицию не принимать заявку
		Если СтрокаТЗ.Характеристика.СтатусАктивностиХарактеристики = Перечисления.СтатусыАктивностиХарактеристик.Выведена 
			ИЛИ СтрокаТЗ.Характеристика.Статус = Перечисления.СтатусыХарактеристик.Приостановлена 
			ИЛИ СтрокаТЗ.Характеристика.Статус = Перечисления.СтатусыХарактеристик.НаВывод тогда
			ТекстПисьмаОВыводимыхПозициях = ТекстПисьмаОВыводимыхПозициях + Символы.Таб + "• " + СокрЛП(СтрокаТЗ.Этикетка) + ": " + Формат(СтрокаТЗ.КоличествоЗаказано, "ЧГ=") + Символы.ПС;
			ЕстьВыводимаяХарактеристика = Истина;
		КонецЕсли;
		//Запретить проведение заявки, если заказывается количество, более чем на три месяца.
		Если ЗначениеЗаполнено(СтрокаТЗ.СправочноРасходЗаПредыдущийМесяц) тогда
			Если СтрокаТЗ.КоличествоЗаказано > СтрокаТЗ.СправочноРасходЗаПредыдущийМесяц*3 Тогда
				ТекстПисьмаОПревышениях = ТекстПисьмаОПревышениях + Символы.Таб + "• " + СокрЛП(СтрокаТЗ.Этикетка) + ": " + Формат(СтрокаТЗ.КоличествоЗаказано, "ЧГ=") + Символы.ПС;	
				ЕстьПревышениеВеличиныЗаказа = Истина;	
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла; 
	
	//
	Если спАдресаПоставщиков.Количество() = 0
			И спАдресаТехнологов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//
	Если ЕстьВыводимаяХарактеристика ИЛИ ЕстьПревышениеВеличиныЗаказа Тогда
		ТекстПисьма = "В Заявке на производство Упаковки/Этикетки №" + Заявка.Номер + " обнаружены ошибки:" + Символы.ПС;
		
		
		Если ЕстьВыводимаяХарактеристика Тогда
		
			//
			ТекстПисьма = ТекстПисьма + Символы.ПС + "Следующие товары выводится из ассортимента, заказ упаковки можно сделать только через технолога:" + Символы.ПС + ТекстПисьмаОВыводимыхПозициях;
		КонецЕсли; 
	
		Если ЕстьПревышениеВеличиныЗаказа Тогда
		
			//
			ТекстПисьма = ТекстПисьма + Символы.ПС + "По следующим товарам осушествляется заказ объемом больше чем на три месяца:" + Символы.ПС + ТекстПисьмаОПревышениях;
		КонецЕсли;
	
		//
		ПодвалПисьма = 	"";
	
		//
		ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ПодвалПисьма;
		
	КонецЕсли; 
	
	//СОЗДАЕМ ПИСЬМО
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	НовоеПисьмо.УчетнаяЗапись 	= Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;	
	
	//
	НовоеПисьмо.ОснованиеПисьма = Заявка;
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	//
	НовоеПисьмо.Дата = ТекущаяДата();
	//???ZEZA НовоеПисьмо.ДатаОтправления = ТекущаяДата();
	
	//
	НовоеПисьмо.СтатусПисьма 	= Перечисления.СтатусыПисем.Исходящее;
	
	//
	НовоеПисьмо.Тема 			= "В заявка на производство Упаковки/Этикетки № " + СокрЛП(Заявка.Номер) + ": ОБНАРУЖЕНЫ ОШИБКИ!" ;
	НовоеПисьмо.ТекстПисьма 	= СокрЛП(ТекстПисьма);
	
	//
	Если спАдресаПоставщиков.Количество() > 0 Тогда
		
		//
		Для каждого ЭлементСоответствия Из спАдресаПоставщиков Цикл
			
			//
			НоваяСтрока = НовоеПисьмо.КомуТЧ.Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//
	Если спАдресаТехнологов.Количество() > 0 Тогда
		
		//
		ИмяТЧ = "КопииТЧ";
		Если НовоеПисьмо.КомуТЧ.Количество() = 0 Тогда
			ИмяТЧ = "КомуТЧ";
		КонецЕсли; 
		
		//
		Для каждого ЭлементСоответствия Из спАдресаТехнологов Цикл
			
			//
			НоваяСтрока = НовоеПисьмо[ИмяТЧ].Добавить();
			НоваяСтрока.Представление 			= ?(ЗначениеЗаполнено(ЭлементСоответствия.Значение), ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);
			НоваяСтрока.АдресЭлектроннойПочты 	= ЭлементСоответствия.Ключ;
			
		КонецЦикла;	
		
	КонецЕсли; 
	
	//
	НовоеПисьмо.ЕстьВложения = Истина;
	
	//
	НовоеПисьмо.Записать();
	
	//
	НовоеПисьмо.Кому 	= НовоеПисьмо.КомуПредставление;
	НовоеПисьмо.Копии 	= НовоеПисьмо.КопииПредставление;
	
	//
	НовоеПисьмо.Записать();
	
	//
	ПечатнаяФорма = Документы.ЗаявкаНаПечатьЭтикетки.ПечатьЗаявкаПотребителя(Заявка);
	
	//
	ИмяФайла = "Уведомление_по_заявке_№" + СокрЛП(Заявка.Номер) + ".pdf";
	ПолноеИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайла; 
	
	//
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект 	= НовоеПисьмо.Ссылка;
	НовыйФайл.ИмяФайла 	= ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
	НовыйФайл.Записать();
	
	//
	УдалитьФайлы(ПолноеИмяФайла);
	
	//		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(НовоеПисьмо.Ссылка); 
	
	//						
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Соответствие, "", глЗначениеПеременной("глТекущийПользователь"), Ложь, ТекстОшибок);
	
КонецФункции


////////////////////////////////////////////////////////////////////

//
Процедура ВыполнитьОтменуУстаревшихЗаявокНаПроизводствоУпаковки() Экспорт
	
	//
	Возврат;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Заявка КАК Заявка,
	     |	Таблица.Заявка.СтатусЗаявки,
	     |	Таблица.Заявка.Дата КАК ЗаявкаДата
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки КАК ЗаявкаПоступления
	     |		ПО Таблица.Заявка = ЗаявкаПоступления.Заявка
	     |			И (ЗаявкаПоступления.КоличествоКОтгрузке > 0)
	     |			И (ЗаявкаПоступления.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад)
	     |ГДЕ
	     |	Таблица.КоличествоКОтгрузкеОстаток > 0
	     |	И НЕ ЗаявкаПоступления.Регистратор ЕСТЬ NULL
	     |	И НЕ Таблица.Заявка.Ссылка ЕСТЬ NULL
	     |	И НЕ Таблица.Заявка.СписатьЗаменитель
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Номенклатура,
	     |	Таблица.Заявка,
	     |	Таблица.Заявка.СтатусЗаявки,
	     |	Таблица.Заявка.Дата
	     |
	     |ИМЕЮЩИЕ
	     |	РАЗНОСТЬДАТ(МАКСИМУМ(ЗаявкаПоступления.Период), &ТекущаяДата, ДЕНЬ) > 7
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ЗаявкаДата";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Заявка.ПолучитьОбъект();
		ДокументОбъект.ПризнакЗакрытаВручную = Истина;
		ДокументОбъект.ДатаЗакрытияВручную = ТекущаяДата();
		ДокументОбъект.КомментарийПриЗакрытииВручную = "###ЗакрытаАвтоматически";
		
		//
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	//
	Возврат; //+++AK CISA 20181011 отбой ИП-00020011.01
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Ссылка,
	     |	Таблица.Этикетка
	     |ПОМЕСТИТЬ ТЗ_ЗаявкиИЭтикетки
	     |ИЗ
	     |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК Таблица
		 //+++АК CISA 2018.10.08 ИП-00020011.01 убрать условие на Приходные ордера
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	     |		ПО Таблица.Ссылка = ПриходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки
	     |			И (ПриходныйОрдерСкладТовары.Ссылка.Проведен)
		 //---АК CISA
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	     |		ПО Таблица.Ссылка = РасходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки
	     |			И (РасходныйОрдерСкладТовары.Ссылка.Проведен)
	     |ГДЕ
	     |	Таблица.Ссылка.Проведен
		 //+++АК CISA 2018.10.08 ИП-00020011.01
	     |	И Таблица.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена)
	     |	И Таблица.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Приостановлена)
		 //---АК CISA
	     |	И Таблица.Ссылка.СтатусЗаявки <> ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено)
		 //+++АК CISA 2018.10.08 ИП-00020011.01 убрать условие на Приходные ордера
		 |	И ПриходныйОрдерСкладТовары.Ссылка ЕСТЬ NULL
		 //---АК CISA
	     |	И РасходныйОрдерСкладТовары.Ссылка ЕСТЬ NULL 
	     |	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВЫБОР
	     |					КОГДА Таблица.Ссылка.ДатаСтатусаОбработано <> ДАТАВРЕМЯ(1, 1, 1)
	     |						ТОГДА Таблица.Ссылка.ДатаСтатусаОбработано
	     |					ИНАЧЕ Таблица.Ссылка.Дата
	     |				КОНЕЦ, ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) > 7
		 //+++АК CISA 2018.10.08 ИП-00020011.01
	     |	И Таблица.Ссылка.Поставщик.ИД <> 152
	     |	И Таблица.КоличествоСоСклада > 0
	     |	И НЕ Таблица.Ссылка.Комментарий ПОДОБНО ""#ОтмененаАвтоматически%""
		 //---АК CISA
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК Этикетка
		 //+++АК CISA 2018.10.03 ИП-00020011 "Исключить из запроса проверку на "поставщиков больше 1""
	     //|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПоставщиковСрезПоследних.Поставщик) КАК Поставщик
		 //--АК CISA
	     |ПОМЕСТИТЬ ТЗ_УниверсальныеУпаковки
	     |ИЗ
	     |	РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК СпецификацииПоставщиковСрезПоследних
	     |ГДЕ
	     |	(СпецификацииПоставщиковСрезПоследних.ДатаКонца > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	     |			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
	     |	И СпецификацииПоставщиковСрезПоследних.НоменклатураСырье В
	     |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	     |				Таблица.Этикетка
	     |			ИЗ
	     |				ТЗ_ЗаявкиИЭтикетки КАК Таблица)
	     |
		 //+++АК CISA 2018.10.03 ИП-00020011 "Исключить из запроса проверку на "поставщиков больше 1""
	     //|СГРУППИРОВАТЬ ПО
	     //|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье
	     //|		 
	     //|ИМЕЮЩИЕ
	     //|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПоставщиковСрезПоследних.Поставщик) > 1
		 //--АК CISA
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ТЗ_ЗаявкиИЭтикетки.Ссылка,
	     |	СУММА(ВЫБОР
	     |			КОГДА ТЗ_УниверсальныеУпаковки.Этикетка ЕСТЬ NULL 
	     |				ТОГДА 1
	     |			ИНАЧЕ 0
	     |		КОНЕЦ) КАК КоличествоНеУниверсальныхЭтикеток
	     |ИЗ
	     |	ТЗ_ЗаявкиИЭтикетки КАК ТЗ_ЗаявкиИЭтикетки
	     |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_УниверсальныеУпаковки КАК ТЗ_УниверсальныеУпаковки
	     |		ПО ТЗ_ЗаявкиИЭтикетки.Этикетка = ТЗ_УниверсальныеУпаковки.Этикетка
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ТЗ_ЗаявкиИЭтикетки.Ссылка
	     |
	     |ИМЕЮЩИЕ
	     |	СУММА(ВЫБОР
	     |			КОГДА ТЗ_УниверсальныеУпаковки.Этикетка ЕСТЬ NULL 
	     |				ТОГДА 1
	     |			ИНАЧЕ 0
	     |		КОНЕЦ) = 0
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	ТЗ_ЗаявкиИЭтикетки.Ссылка.Дата";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ТекущаяДата = ТекущаяДата();
	ПЗ.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//
		ДокументОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Отменена;
		ДокументОбъект.Комментарий 	= "#ОтмененаАвтоматически " + ТекущаяДата;
		
		//
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;	
	
КонецПроцедуры	

//
//
Функция ОтправитьПростоеПочтовоеСообщение(УчетнаяЗапись, Тема, Тексты, Получатели, Копии = Неопределено, СлепыеКопии = Неопределено)
	
	//
	ВсеОК = Истина;
	
	//
	_Получатели = Новый СписокЗначений;
	_Копии = Новый СписокЗначений;
	_СлепыеКопии = Новый СписокЗначений;
	
	//ПОЛУЧАТЕЛИ
	Если ТипЗнч(Получатели) = Тип("СписокЗначений") Тогда
		
		//
		_Получатели = Получатели;
		
	ИначеЕсли ТипЗнч(Получатели) = Тип("Строка") Тогда
		
		//
		_Получатели.Добавить(Получатели);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;		
	
	//КОПИИ
	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
		
		//
		_Копии = Копии;
		
	ИначеЕсли ТипЗнч(Копии) = Тип("Строка") Тогда
		
		//
		_Копии.Добавить(Копии);
		
	Иначе
		//Возврат Ложь;
	КонецЕсли;
	
	//СЛЕПЫЕ КОПИИ
	Если ТипЗнч(СлепыеКопии) = Тип("СписокЗначений") Тогда
		
		//
		_СлепыеКопии = СлепыеКопии;
		
	ИначеЕсли ТипЗнч(СлепыеКопии) = Тип("Строка") Тогда
		
		//
		_СлепыеКопии.Добавить(СлепыеКопии);
		
	Иначе
		//Возврат Ложь;
	КонецЕсли;
	
	//
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	ЗаполнитьЗначенияСвойств(Профиль, УчетнаяЗапись);
	
	//
	Профиль.АдресСервераPOP3 	= УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP 	= УчетнаяЗапись.SMTPСервер;
	Профиль.АутентификацияSMTP 	= СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.Пользователь 		= УчетнаяЗапись.Логин;
	Профиль.ПользовательSMTP 	= УчетнаяЗапись.ЛогинSMTP;
	
	//
	Почта = Новый ИнтернетПочта;
	
	//
	Попытка
		
		//
		Почта.Подключиться(Профиль);
		
	Исключение
		
		// Ошибка при подключении к серверу или при приеме сообщения обмена
		Сообщить("Ошибка при подключении " + ОписаниеОшибки());
		
		//
		Возврат Ложь;
		
	КонецПопытки;
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	//
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	//Получатели
	Для Каждого ЭлементСписка Из _Получатели Цикл
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес			= ЭлементСписка.Значение;
		//Получатель.Пользователь = ЭлементСписка.Значение;
		Получатель.ОтображаемоеИмя 	= ЭлементСписка.Представление;
		
	КонецЦикла;		
	
	//Копии
	Для Каждого ЭлементСписка Из _Копии Цикл
		
		Получатель = Письмо.Копии.Добавить();
		Получатель.Адрес 			= ЭлементСписка.Значение;
		//Получатель.Пользователь = ЭлементСписка.Значение;
		Получатель.ОтображаемоеИмя 	= ЭлементСписка.Представление;
		
	КонецЦикла;		
	
	//Слепые Копии
	Для Каждого ЭлементСписка Из _СлепыеКопии Цикл
		
		Получатель = Письмо.СлепыеКопии.Добавить();
		Получатель.Адрес 			= ЭлементСписка.Значение;
		//Получатель.Пользователь = ЭлементСписка.Значение;
		Получатель.ОтображаемоеИмя 	= ЭлементСписка.Представление;
		
	КонецЦикла;		
	
	//ТЕМА
	Письмо.Тема = Тема;
		
	//ТЕКСТЫ
	Для Каждого _Текст Из Тексты Цикл
	
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= _Текст.Значение;
		ТекстПисьма.Текст 		= _Текст.Представление;
		
	КонецЦикла;		
	
	//
	Попытка
		Почта.Послать(Письмо);
	Исключение
		Сообщить(ОписаниеОшибки());
		ВсеОК = Ложь;
	КонецПопытки;	
	
	//
	Возврат ВсеОК;
	
КонецФункции

//
//
Процедура ПолучениеЗаявокНаПечатьЭтикеток() Экспорт
	
	//Заодно проверим на наличие заявок, по которым не забирают Этикетки и отменим Их
	ВыполнитьОтменуУстаревшихЗаявокНаПроизводствоУпаковки();
	
	//
	ОбновитьНумерациюОбъектов(Метаданные.Документы.ЗаявкаНаПечатьЭтикетки);
	
	//
	Сообщ = Новый СообщениеПользователю();
	
	//
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ЗаявкиНаЭтикетки;
	
	//
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	ЗаполнитьЗначенияСвойств(Профиль,УчетнаяЗапись);
	
	//
	Профиль.АдресСервераPOP3 	= УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP 	= УчетнаяЗапись.SMTPСервер;
	Профиль.АутентификацияSMTP 	= СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.Пользователь 		= УчетнаяЗапись.Логин;
	Профиль.ПользовательSMTP 	= УчетнаяЗапись.ЛогинSMTP;
	
	//
	Почта = Новый ИнтернетПочта;
	
	//
	Попытка
		
		//
		Почта.Подключиться(Профиль);
		
		// Получаем все сообщения из почтового ящика
		Заголовки = Почта.ПолучитьЗаголовки();
		
		//
		МассивСообщений = Новый Массив;
		МассивСообщений = Почта.Выбрать(Ложь, Заголовки);
		
	Исключение
		
		// Ошибка при подключении к серверу или при приеме сообщения обмена
		Сообщ.Текст = " - Ошибка при подключении или приеме" + ОписаниеОшибки();
		Сообщ.Сообщить();
		//+++АК ILIK 2018.08.15 ИП-00019547
		ОповеститьОтветственныхОбОшибке(УчетнаяЗапись.Логин);
		//---АК ILIK
		Возврат;
		
	КонецПопытки;
	
	//
	Если МассивСообщений.Количество() = 0 Тогда
		
		// Сообщений в почтовом ящике нет
		Сообщ.Текст = " - Сообщений в почтовом ящике нет.";
		Сообщ.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////
	
	//
	//	
	Для Каждого Сообщение Из МассивСообщений Цикл
		
		//
		ID_Сообщения = СокрЛП(СокрЛП(Сообщение.Идентификатор[0]));
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	ЗаявкаНаПечатьЭтикетки.Ссылка
		     |ИЗ
		     |	Документ.ЗаявкаНаПечатьЭтикетки КАК ЗаявкаНаПечатьЭтикетки
		     |ГДЕ
		     |	ЗаявкаНаПечатьЭтикетки.ИдентификаторПочтовогоСообщения = &ИдентификаторПочтовогоСообщения";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("ИдентификаторПочтовогоСообщения", ID_Сообщения);
		
		//
		ПЗ.Выполнить();
		
		Если НЕ ПЗ.Результат.Пустой() Тогда
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(ID_Сообщения);
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
			//
			Продолжить;
			
		КонецЕсли;		
		
		//
		Если ВРЕГ(СокрЛП(УчетнаяЗапись.АдресЭлектроннойПочты)) = ВРЕГ(СокрЛП(Сообщение.Отправитель.Адрес)) Тогда
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(ID_Сообщения);
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
			//
			Продолжить;
			
		КонецЕсли;	
		
		//
		Если Найти(ВРЕГ(Сообщение.Тема), "RE") > 0 Тогда
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(ID_Сообщения);
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
			//
			Продолжить;
			
		КонецЕсли;	
		
		//
		АдресОтправителя = СокрЛП(Сообщение.Отправитель.Адрес); 
		Если ВРЕГ(АдресОтправителя) <> "ZEZA@AUTOMACON.RU" Тогда
			//Продолжить;
		КонецЕсли;	
		
		//
		КонтрагентОтправитель = "";
		
		//
		ШтрихКод = СокрЛП(Сообщение.Тема);
		ШтрихКод = СтрЗаменить(ВРЕГ(ШтрихКод), "FWD:"	, "");
		ШтрихКод = СтрЗаменить(ВРЕГ(ШтрихКод), "FWD"	, "");
		ШтрихКод = СтрЗаменить(ВРЕГ(ШтрихКод), ":"		, "");
		ШтрихКод = СокрЛП(ШтрихКод);
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.ШтрихКод,
		     |	Таблица.Номенклатура,
		     |	Таблица.ЕдиницаИзмерения,
		     |	Таблица.Характеристика,
		     |	ЗначенияСвойствОбъектов.Значение КАК Характеристика_Производитель,
		     |	Таблица.Характеристика.СтатусАктивностиХарактеристики КАК Характеристика_СтатусАктивности,
		     |	Таблица.Характеристика.Статус КАК Характеристика_Статус,
		     |	ВЫБОР
		     |		КОГДА Таблица.Характеристика.СтатусАктивностиХарактеристики В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая), ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна))
		     |				И НЕ Таблица.Характеристика.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.Приостановлена), ЗНАЧЕНИЕ(Перечисление.СтатусыХарактеристик.НаВывод))
		     |			ТОГДА ИСТИНА
		     |		ИНАЧЕ ЛОЖЬ
		     |	КОНЕЦ КАК ПризнакХарактеристикаАктивна,
		     |	Таблица.ВыведенИзМагазинов
		     |ИЗ
		     |	РегистрСведений.ШтриховыеКоды КАК Таблица
		     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		     |		ПО Таблица.Характеристика = ЗначенияСвойствОбъектов.Объект
		     |			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Производитель"")
		     |ГДЕ
		     |	Таблица.ШтрихКод = &ШтрихКод";
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("ШтрихКод", ШтрихКод);
		
		//
		ПЗ.Выполнить();
		
		//
		Если ПЗ.Результат.Пустой() Тогда
			
			//
			Тема = "Re: " + ШтрихКод;
			
			//
			ТекстПисьма = "Заявка на производство Упаковки/Этикетки не принята:" + Символы.ПС;
			ТекстПисьма = ТекстПисьма + " - Не найдена номенклатура по ШК: " + ШтрихКод + Символы.ПС + "---";
			
			//СОЕРЖАНИЕ
			Тексты = Новый СписокЗначений;
			Тексты.Добавить(ТипТекстаПочтовогоСообщения.ПростойТекст, ТекстПисьма);
			
			//ЦИТИРУЕМ ИСХОДНОЕ
			Для Каждого ТекстИсходногоСообщения Из Сообщение.Тексты Цикл
				  //+++АК BARA  ИП-00017643  2018.02.12
				 ТекстИсходногоСообщения.Текст = СтрЗаменить(ТекстИсходногоСообщения.Текст,"<img height=""53"" width=""191"" src=""http://savepic.ru/13556488.jpg"" />","");
				 ТекстИсходногоСообщения.Текст = СтрЗаменить(ТекстИсходногоСообщения.Текст,"<img src=""//gstat.imgsmail.ru/gstat?clienterror.emptybody=1&amp;logme=EMPTYBODY_samvel-hleb@mail.ru_15100528720000000098"" alt="""">","");

				 //---
				//
				Если Сообщение.Тексты.Количество() = 1 Тогда	
					
					//
					Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					
				Иначе
					
					//
					Если ТекстИсходногоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
						Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					КонецЕсли;	
					
				КонецЕсли;	
					
			КонецЦикла;	
			
			//КОПИИ
			Копии = Новый СписокЗначений;
			Копии.Добавить("derbyshev-sergey@yandex.ru");
			Копии.Добавить("zeza@automacon.ru");
			Копии.Добавить("sklad.upakovka@mail.ru");
			
			//
			ВсеОК = ОтправитьПростоеПочтовоеСообщение(УчетнаяЗапись, Тема, Тексты, АдресОтправителя, Копии);
			Если ВсеОК Тогда
				
				//
				МассивСообщенийКУдалению = Новый Массив;
				МассивСообщенийКУдалению.Добавить(ID_Сообщения);
				
				//
				Почта.УдалитьСообщения(МассивСообщенийКУдалению);	
				
			КонецЕсли;	
			
			//
			Продолжить;
			
		КонецЕсли;
		
		//
		Выборка = ПЗ.Результат.Выбрать();
		Выборка.Следующий();
		
		//РАЗБЕРЕМСЯ С АКТИВНОСТЬЮ ХАРАКТЕРИСТИКИ
		Если НЕ Выборка.ПризнакХарактеристикаАктивна Тогда
			
			//
			Тема = "Re: " + ШтрихКод;
			
			//
			ТекстПисьма = "Заявка на производство Упаковки/Этикетки не принята:" + Символы.ПС;
			ТекстПисьма = ТекстПисьма + " - Приостановлен прием заявок по ШК: " + ШтрихКод + Символы.ПС + " Обратитесь к ответственному Менеджеру." + Символы.ПС + "---";
			
			//СОДЕРЖАНИЕ
			Тексты = Новый СписокЗначений;
			Тексты.Добавить(ТипТекстаПочтовогоСообщения.ПростойТекст, ТекстПисьма);
			
			//ЦИТИРУЕМ ИСХОДНОЕ
			Для Каждого ТекстИсходногоСообщения Из Сообщение.Тексты Цикл
				
				//
				Если Сообщение.Тексты.Количество() = 1 Тогда	
					
					//
					Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					
				Иначе
					
					//
					Если ТекстИсходногоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
						Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					КонецЕсли;	
					
				КонецЕсли;	
					
			КонецЦикла;	
			
			//КОПИИ
			Копии = Новый СписокЗначений;
			Копии.Добавить("derbyshev-sergey@yandex.ru");
			Копии.Добавить("zeza@automacon.ru");
			Копии.Добавить("sklad.upakovka@mail.ru");
			
			//
			ВсеОК = ОтправитьПростоеПочтовоеСообщение(УчетнаяЗапись, Тема, Тексты, АдресОтправителя, Копии);
			Если ВсеОК Тогда
				
				//
				МассивСообщенийКУдалению = Новый Массив;
				МассивСообщенийКУдалению.Добавить(ID_Сообщения);
				
				//
				Почта.УдалитьСообщения(МассивСообщенийКУдалению);	
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//
		Номенклатура 					= Выборка.Номенклатура;
		Характеристика 					= Выборка.Характеристика;
		Характеристика_Производитель 	= Выборка.Характеристика_Производитель;
		
		//
		ТЗ = "ВЫБРАТЬ
		     |	Таблица.Номенклатура,
		     |	Таблица.Характеристика,
		     |	МАКСИМУМ(Таблица.Период) КАК Период
		     |ПОМЕСТИТЬ ТЗ_Последние
		     |ИЗ
		     |	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(
		     |			&ТекущаяДата,
		     |			Номенклатура = &Номенклатура
		     |				И Характеристика = &Характеристика) КАК Таблица
		     |ГДЕ
		     |	(Таблица.ДатаКонца >= &ТекущаяДата
		     |			ИЛИ Таблица.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1))
		     |
		     |СГРУППИРОВАТЬ ПО
		     |	Таблица.Номенклатура,
		     |	Таблица.Характеристика
		     |;
		     |
		     |////////////////////////////////////////////////////////////////////////////////
		     |ВЫБРАТЬ РАЗЛИЧНЫЕ
		     |	ТаблицаНоменклатура.Ссылка КАК Номенклатура,
		     |	ТаблицаХарактеристики.Ссылка КАК Характеристика,
		     |	ТаблицаСпецификация.НоменклатураСырье КАК Этикетка,
		     |	ВЫРАЗИТЬ(НоменклатураЭтикетки.ИмяФайла КАК СТРОКА(1000)) КАК ИмяФайла
		     |ИЗ
		     |	Справочник.Номенклатура КАК ТаблицаНоменклатура
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристики
		     |		ПО ТаблицаНоменклатура.Ссылка = ТаблицаХарактеристики.Владелец
		     |			И (ТаблицаХарактеристики.Ссылка = &Характеристика)
		     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоставщиков.СрезПоследних КАК ТаблицаСпецификация
		     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Последние КАК ТЗ_Последние
		     |			ПО ТаблицаСпецификация.Номенклатура = ТЗ_Последние.Номенклатура
		     |				И ТаблицаСпецификация.Характеристика = ТЗ_Последние.Характеристика
		     |				И ТаблицаСпецификация.Период = ТЗ_Последние.Период
		     |		ПО ТаблицаНоменклатура.Ссылка = ТаблицаСпецификация.Номенклатура
		     |			И (ТаблицаХарактеристики.Ссылка = ТаблицаСпецификация.Характеристика)
		     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
		     |		ПО ТаблицаНоменклатура.Ссылка = НоменклатураЭтикетки.Ссылка
		     |			И (ТаблицаХарактеристики.Ссылка = НоменклатураЭтикетки.Характеристика)
		     |ГДЕ
		     |	ТаблицаНоменклатура.Ссылка = &Номенклатура";
		
			 
		//
		ПЗ = Новый ПостроительЗапроса;
		ПЗ.Текст = ТЗ;
		
		//
		ПЗ.Параметры.Вставить("ТекущаяДата"		, ТекущаяДата());
		ПЗ.Параметры.Вставить("Номенклатура"	, Номенклатура);
		ПЗ.Параметры.Вставить("Характеристика"	, Характеристика);
			 
		//
		ПЗ.Выполнить();
		
		Если НЕ ПЗ.Результат.Пустой() Тогда
			//???Какое письмо и кому отправлять?
		КонецЕсли;	
		
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
		
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Характеристика,
		|	Таблица.Поставщик
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних КАК Таблица
		|ГДЕ
		|	Таблица.Характеристика = &Характеристика";
		
		//
		Поставщик = Неопределено;
		
		//					   
		ВыборкаПоставщик = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоставщик.Следующий() Цикл
			Поставщик = ВыборкаПоставщик.Поставщик;		
		КонецЦикла;
		
		//
		Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
			Поставщик = Характеристика_Производитель;
		КонецЕсли; 
		
		//
		Если ЗначениеЗаполнено(Поставщик)
				И Поставщик.ПризнакНеПриниматьЗаявкиНаУпаковку Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		ТекстПростой = "";
		ТекстHTML = "";
		
		//ЦИТИРУЕМ ИСХОДНОЕ
		Для Каждого ТекстИсходногоСообщения Из Сообщение.Тексты Цикл
			
			//
			Если ТекстИсходногоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
				ТекстПростой = ТекстПростой +  ТекстИсходногоСообщения.Текст + Символы.ПС;
			КонецЕсли;	
			
			//
			Если ТекстИсходногоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
				ТекстHTML = ТекстИсходногоСообщения.Текст;
			КонецЕсли;	
			
		КонецЦикла;
		
		//
		ЗаявкаОбъект = Документы.ЗаявкаНаПечатьЭтикетки.СоздатьДокумент();
		
		//
		ЗаявкаОбъект.ИдентификаторПочтовогоСообщения = ID_Сообщения;
		
		//
		ЗаявкаОбъект.Дата 				= ТекущаяДата();
		
		//
		ЗаявкаОбъект.АдресОтправителя 	= АдресОтправителя; 
		
		//
		ЗаявкаОбъект.Тема 				= Сообщение.Тема;
		ЗаявкаОбъект.ТекстПисьмаHTML 	= ТекстHTML;
		ЗаявкаОбъект.ТекстПисьмаПростой = ТекстПростой; 
		
		//
		ЗаявкаОбъект.Поставщик 			= Поставщик;
		ЗаявкаОбъект.СтатусЗаявки 		= Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.НеОбработано;
		
		//
		ЗаявкаОбъект.Склад 				= Справочники.Склады.НайтиПоРеквизиту("ИД", 727);//Склад_Упаковки_Котляково
		
		//
		ВыборкаНоменклатура = ПЗ.Результат.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			//
			НоваяСтрока = ЗаявкаОбъект.Этикетки.Добавить();
			НоваяСтрока.Товар 			= ВыборкаНоменклатура.Номенклатура;
			НоваяСтрока.Характеристика 	= ВыборкаНоменклатура.Характеристика;
			НоваяСтрока.Этикетка 		= ВыборкаНоменклатура.Этикетка;
			
			//
			НоваяСтрока.ИмяФайла 		= ВыборкаНоменклатура.ИмяФайла;
			
		КонецЦикла;
		
		//
		ЗаявкаОбъект.ЗаполнитьОстаткиНаСкладеПоставщика();
		
		//
		Попытка
			
			//
			ЗаявкаОбъект.Записать();
			
			//
			МассивСообщенийКУдалению = Новый Массив;
			МассивСообщенийКУдалению.Добавить(ID_Сообщения);
			
			//
			Почта.УдалитьСообщения(МассивСообщенийКУдалению);
			
		Исключение
		КонецПопытки;	
		
		//
		Если ЗначениеЗаполнено(ЗаявкаОбъект.Ссылка) Тогда
			
			//
			Тема = "Принята Заявка на производство Упаковки/Этикетки №" + ЗаявкаОбъект.Номер + " по ШК: " + ШтрихКод;
			
			//
			ТекстПисьма = "Принята Заявка на производство Упаковки/Этикетки №" + ЗаявкаОбъект.Номер + " к товару " + Номенклатура + Символы.ПС + "---";
			
			//СОДЕРЖАНИЕ
			Тексты = Новый СписокЗначений;
			Тексты.Добавить(ТипТекстаПочтовогоСообщения.ПростойТекст, ТекстПисьма);
			
			//ЦИТИРУЕМ ИСХОДНОЕ
			Для Каждого ТекстИсходногоСообщения Из Сообщение.Тексты Цикл
				
				//
				Если Сообщение.Тексты.Количество() = 1 Тогда	
					
					//
					Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					
				Иначе
					
					//
					Если ТекстИсходногоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
						Тексты.Добавить(ТекстИсходногоСообщения.ТипТекста, ТекстИсходногоСообщения.Текст);
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			//КОПИИ
			Копии = Новый СписокЗначений;
			Копии.Добавить("derbyshev-sergey@yandex.ru");
			Копии.Добавить("zeza@automacon.ru");
			Копии.Добавить("sklad.upakovka@mail.ru");
			
			//
			ВсеОК = ОтправитьПростоеПочтовоеСообщение(УчетнаяЗапись, Тема, Тексты, АдресОтправителя, Копии);
			
		КонецЕсли;	
		
	КонецЦикла;		
	
	//
	Почта.Отключиться();
	
КонецПроцедуры

//+++АК ILIK 2018.08.15 ИП-00019547
Процедура ОповеститьОтветственныхОбОшибке(ПочтовыйЯщик)
	СписокПользователей = Новый СписокЗначений;
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Пользователь.Роли.Содержит(Метаданные.Роли.РаботаСЗаявкамиНаПроизводствоУпаковки) Тогда
			СписокПользователей.Добавить(Пользователь.Имя);
		КонецЕсли;
	КонецЦикла;
	
	АдресаПолучателей = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект ССЫЛКА Справочник.Пользователи
	               |	И КонтактнаяИнформация.Объект.Код В(&СписокПользователей)
	               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |	И ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 1) <> """"";
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		АдресаПолучателей = АдресаПолучателей + ?(ПустаяСтрока(АдресаПолучателей), "", ";") + Выборка.Представление; 
	КонецЦикла;
	
	Если ПустаяСтрока(АдресаПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@vkusvill.ru", Истина);
		
		Тема = "Проблема с почтовым ящиком для получения заказов по упаковке";

		Тексты = Новый СписокЗначений;
		Тексты.Добавить(ТипТекстаПочтовогоСообщения.ПростойТекст, "Не удалось подключиться или получить сообщения с почтового ящика: " + ПочтовыйЯщик);

		ОтправитьПростоеПочтовоеСообщение(УчетнаяЗапись, Тема, Тексты, АдресаПолучателей);
	Исключение
	КонецПопытки;
КонецПроцедуры
