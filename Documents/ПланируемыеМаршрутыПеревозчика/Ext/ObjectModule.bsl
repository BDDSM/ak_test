
Процедура ОбработкаПроведения(Отказ, Режим)
	Перевозчик=ПараметрыСеанса.ТекущийПользователь.ФизЛицо.Контрагент;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременныеИнтервалы.Ссылка,
		|	ВременныеИнтервалы.ВерсияДанных,
		|	ВременныеИнтервалы.ПометкаУдаления,
		|	ВременныеИнтервалы.Предопределенный,
		|	ВременныеИнтервалы.Код,
		|	ВременныеИнтервалы.Наименование,
		|	ВременныеИнтервалы.ВремяНачала,
		|	ВременныеИнтервалы.ВремяОкончания
		|ИЗ
		|	Справочник.ВременныеИнтервалы КАК ВременныеИнтервалы
		|ГДЕ
		|	ВременныеИнтервалы.ПометкаУдаления = ЛОЖЬ";

	Результат = Запрос.Выполнить();

	ТЗВремя = Результат.Выгрузить();


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремяВыездаПоМаршруту.Ссылка,
		|	ВремяВыездаПоМаршруту.ВерсияДанных,
		|	ВремяВыездаПоМаршруту.ПометкаУдаления,
		|	ВремяВыездаПоМаршруту.Предопределенный,
		|	ВремяВыездаПоМаршруту.Код,
		|	ВремяВыездаПоМаршруту.Наименование,
		|	ВремяВыездаПоМаршруту.ВремяВыезда,
		|	ВремяВыездаПоМаршруту.Представление
		|ИЗ
		|	Справочник.ВремяВыездаПоМаршруту КАК ВремяВыездаПоМаршруту";

	Результат = Запрос.Выполнить();

	ТЗВремяВыезда = Результат.Выгрузить();
	
	
	
	

	Для каждого Стр Из Маршруты Цикл
		Если Не ЗначениеЗаполнено(Стр.ВременнойИнтервал) ИЛИ Не ЗначениеЗаполнено(Стр.ВремяВыезда) Тогда
			Продолжить;
		КонецЕсли; 
		Если ТЗВремяВыезда.НайтиСтроки(Новый Структура("Ссылка",Стр.ВремяВыезда))[0].ВремяВыезда<ТЗВремя.НайтиСтроки(Новый Структура("Ссылка",Стр.ВременнойИнтервал))[0].ВремяНачала
			ИЛИ ТЗВремяВыезда.НайтиСтроки(Новый Структура("Ссылка",Стр.ВремяВыезда))[0].ВремяВыезда>ТЗВремя.НайтиСтроки(Новый Структура("Ссылка",Стр.ВременнойИнтервал))[0].ВремяОкончания Тогда
			Сообщить("В строке "+Строка(Стр.НомерСтроки)+" указанное время не входит в интервал");	
			Отказ=Истина;
		КонецЕсли; 
	КонецЦикла; 
	ТЗМарш=Маршруты.Выгрузить();
	ТЗМарш.Свернуть("Маршрут");
	МассивМаршрутов=ТЗМарш.ВыгрузитьКолонку("Маршрут");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршруты.Ссылка,
		|	ВЫБОР
		|		КОГДА Маршруты.Организация = ЗНАЧЕНИЕ(Справочник.организации.ПустаяСсылка)
		|			ТОГДА &Вкусвилл
		|		ИНАЧЕ Маршруты.Организация
		|	КОНЕЦ КАК Организация
		|ИЗ
		|	Справочник.Маршруты КАК Маршруты
		|ГДЕ
		|	Маршруты.Ссылка В(&Ссылка)";
	Вкусвилл= Справочники.Организации.НайтиПоКоду("000000006");
	
	Запрос.УстановитьПараметр("Ссылка", МассивМаршрутов);
	Запрос.УстановитьПараметр("Вкусвилл", Вкусвилл);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТекстСооб="ru = 'Маршрут &Маршрут не относится к этой организации'";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Организация<>?(ЗначениеЗаполнено(Организация),Организация,Вкусвилл) Тогда
			ТекстСооб=СтрЗаменить(ТекстСооб,"&Маршрут",Строка(ВыборкаДетальныеЗаписи.Ссылка));
			Сообщить(НСтр(ТекстСооб));
			Отказ=Истина;
			Возврат;
		КонецЕсли; 	
	КонецЦикла;
	//+++АК BELN 2018.07.18 
	ЭтоВнешняяОрганизация = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация);
	//---АК BELN 2018.07.18 
	
	Если Константы.НеБолее2МагазиновВМаршруте.Получить()=Истина И РольДоступна("Перевозчик") И НЕ ЭтоВнешняяОрганизация Тогда
		Для каждого Стр Из ТЗМарш Цикл
			Если ЗначениеЗаполнено(Стр.Маршрут) Тогда
			
				МасСтр=Магазины.НайтиСтроки(Новый Структура("Маршрут",Стр.Маршрут));
				Если МасСтр.Количество()>2 Тогда
					ТекстСооб="ru = 'Маршрут &Маршрут имеет более 2 магазинов'";
					ТекстСооб=СтрЗаменить(ТекстСооб,"&Маршрут",Строка(Стр.Маршрут));
					Сообщить(НСтр(ТекстСооб));
					Отказ=Истина;
					Возврат;
				
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПланируемыеМаршрутыПеревозчикаСрезПоследних.ДатаПланирования) КАК ДатаПланирования,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|ПОМЕСТИТЬ втМарш
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(
		|			&Дата,
		|			Подрядчик = &Подрядчик
		|				И НЕ Маршрут В (&Маршрут)
		|				И ДатаПланирования <= &ДатаПланирования И ВЫБОР
		|					КОГДА Маршрут.Организация = ЗНАЧЕНИЕ(Справочник.организации.ПустаяСсылка)
		|						ТОГДА &Вкусвилл
		|					ИНАЧЕ Маршрут.Организация
		|				КОНЕЦ = &Организация) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Регистратор <> &Регистратор
		|	И ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ВременнойИнтервал,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|ПОМЕСТИТЬ ВтИнтервалы
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(
		|			&Дата,
		|			Подрядчик = &Подрядчик
		|				И НЕ Маршрут В (&Маршрут) И ВЫБОР
		|					КОГДА Маршрут.Организация = ЗНАЧЕНИЕ(Справочник.организации.ПустаяСсылка)
		|						ТОГДА &Вкусвилл
		|					ИНАЧЕ Маршрут.Организация
		|				КОНЕЦ = &Организация) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМарш КАК втМарш
		|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = втМарш.Маршрут
		|			И ПланируемыеМаршрутыПеревозчикаСрезПоследних.ДатаПланирования = втМарш.ДатаПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = МаршрутыТорговыеТочки.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.ВременнойИнтервал,
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИнтервалы.ВременнойИнтервал,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтИнтервалы.Маршрут) КАК Кол
		|ИЗ
		|	ВтИнтервалы КАК ВтИнтервалы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтИнтервалы.ВременнойИнтервал";
	Запрос.УстановитьПараметр("Дата", Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Подрядчик", Подрядчик);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Маршрут", МассивМаршрутов);
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация),Организация,Вкусвилл));
	Запрос.УстановитьПараметр("Вкусвилл", Вкусвилл);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
 	
	ТЗ=Маршруты.Выгрузить();
	ТЗ.Колонки.Добавить("Кол",Новый ОписаниеТипов("Число"));
	ТЗ.ЗаполнитьЗначения(1,"Кол");
	Кол=ТЗ.Количество()-1;
	
	Для Сч=0 По Кол Цикл
		Если Не ЗначениеЗаполнено(ТЗ[Кол-Сч].Маршрут) ИЛИ Магазины.НайтиСтроки(Новый Структура("УИН_Строки",ТЗ[Кол-Сч].УИН_Строки)).Количество()=0 Тогда
			ТЗ.Удалить(Кол-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтр=ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
	КонецЦикла;

	
	
	ТЗ.Свернуть("ВременнойИнтервал","Кол");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КвотаПеревозчикаСрезПоследних.КоличествоМаршрутов,
		|	КвотаПеревозчикаСрезПоследних.ВременнойИнтервал
		|ИЗ
		|	РегистрСведений.КвотаПеревозчика.СрезПоследних(&Дата, Подрядчик = &Подрядчик и Организация=&организация) КАК КвотаПеревозчикаСрезПоследних
		|ГДЕ
		|	КвотаПеревозчикаСрезПоследних.КоличествоМаршрутов > 0";

	Запрос.УстановитьПараметр("Подрядчик", Подрядчик);
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаПланирования));
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация),Организация,Справочники.Организации.НайтиПоКоду("000000006")));
	Запрос.УстановитьПараметр("Вкусвилл", Вкусвилл);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Для каждого Стр Из ТЗ Цикл
		Кол=0;
		Если Не ЗначениеЗаполнено(Стр.ВременнойИнтервал)  Тогда
			Продолжить;
		КонецЕсли; 
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("ВременнойИнтервал",Стр.ВременнойИнтервал))  Тогда
			Кол=ВыборкаДетальныеЗаписи.КоличествоМаршрутов;
		КонецЕсли;
		Если Кол<Стр.Кол Тогда
			Сообщить("Для временного интервала "+Стр.ВременнойИнтервал+" обнаружено несоответствие количества маршрутов: в документах их заложено "+Строка(Стр.Кол)
			+", а по квоте у этого перевозчика "+Строка(Кол)+" активных маршрутов");
			Отказ=Истина;
		КонецЕсли; 
		ВыборкаДетальныеЗаписи.Сбросить();
	
	КонецЦикла; 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Маршруты.НайтиСтроки(Новый Структура("ВременнойИнтервал",ВыборкаДетальныеЗаписи.ВременнойИнтервал)).Количество()>ВыборкаДетальныеЗаписи.КоличествоМаршрутов Тогда
			Сообщить("Для временного интервала "+ВыборкаДетальныеЗаписи.ВременнойИнтервал+" обнаружено превышение количества строк, по квоте их должно быть не больше "+Строка(ВыборкаДетальныеЗаписи.КоличествоМаршрутов));
			Отказ=Истина;

		КонецЕсли; 	
	КонецЦикла; 
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Движения.ПланируемыеМаршрутыПеревозчика.Записывать = Истина;
	Движения.ПланируемыеМаршрутыПеревозчика.Очистить();
	
	ТЗМаршруты=Маршруты.Выгрузить();
	
	ТЗМаршруты.Колонки.Добавить("Время",Новый ОписаниеТипов("Дата"));
	ТЗМаршруты.Колонки.Добавить("ВремяВыезда1",Новый ОписаниеТипов("Дата"));
	Для каждого Стр Из ТЗМаршруты Цикл
		Если Не ЗначениеЗаполнено(Стр.Маршрут) Тогда
			Стр.ВремяВыезда=Неопределено;	
		
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.ВремяВыезда) Тогда
			Стр.ВремяВыезда1=ТЗВремяВыезда.НайтиСтроки(Новый Структура("Ссылка",Стр.ВремяВыезда))[0].ВремяВыезда;
		Иначе
			Стр.ВремяВыезда1=КонецДня(Дата(2999,12,31));
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ВременнойИнтервал) Тогда
			Стр.Время=ТЗВремя.НайтиСтроки(Новый Структура("Ссылка",Стр.ВременнойИнтервал))[0].ВремяНачала;
		Иначе	
			Стр.Время=КонецДня(Дата(2999,12,31));
		КонецЕсли; 
	КонецЦикла; 
	ТЗМаршруты.Сортировать("Время,ВремяВыезда1");
	
	
	Сч=0;
	Для Каждого ТекСтрокаМаршруты Из ТЗМаршруты Цикл
		Сч=Сч+1;
		Если Не ЗначениеЗаполнено(ТекСтрокаМаршруты.Маршрут) Тогда
			Продолжить;
		КонецЕсли; 
		Движение = Движения.ПланируемыеМаршрутыПеревозчика.Добавить();
		Движение.Период = Дата;
		Движение.Подрядчик = Подрядчик;
		Движение.ДатаПланирования = ДатаПланирования;
		Движение.ВременнойИнтервал = ТекСтрокаМаршруты.ВременнойИнтервал;
		Движение.Маршрут = ТекСтрокаМаршруты.Маршрут;
		Движение.ВремяВыезда = ТекСтрокаМаршруты.ВремяВыезда;
		
		НомСтр=ТекСтрокаМаршруты.НомерСтроки;
		Если Сч<Маршруты.Количество() Тогда
			Если Не ЗначениеЗаполнено(ТЗМаршруты[Сч].Маршрут) Тогда
				КолПропущ=Маршруты.НайтиСтроки(Новый Структура("ВременнойИнтервал,Маршрут",ТекСтрокаМаршруты.ВременнойИнтервал,Справочники.Маршруты.ПустаяСсылка())).Количество();
		        Движение.ПропущенныхНомеровМаршрута = КолПропущ;
			КонецЕсли; 
		КонецЕсли; 
		Если ТекСтрокаМаршруты.ОчиститьМагазины И Магазины.НайтиСтроки(Новый Структура("УИН_Строки",ТекСтрокаМаршруты.УИН_Строки)).Количество()=0 Тогда
			Движение.ОчиститьМагазины = Истина;
			
		
		КонецЕсли; 
	КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
		|ИЗ
		|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(
		|			&Дата,
		|			Подрядчик = &Подрядчик
		|				И Маршрут В (&Маршрут)
		|				И ДатаПланирования = &ДатаПланирования
		|				И Регистратор <> &Ссылка ) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
		|ГДЕ
		|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ";

	Запрос.УстановитьПараметр("Дата", Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	Запрос.УстановитьПараметр("Маршрут", Маршруты.ВыгрузитьКолонку("Маршрут"));
	Запрос.УстановитьПараметр("Подрядчик", Подрядчик);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация),Организация,Вкусвилл));
	Запрос.УстановитьПараметр("Вкусвилл", Вкусвилл);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ=Истина;
		Сообщить("Для маршрута "+ВыборкаДетальныеЗаписи.Маршрут+" уже назначано время выезда на эту дату планирования другим документом");
	КонецЦикла;


	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЗ.Маршрут
	//	|ПОМЕСТИТЬ вт
	//	|ИЗ
	//	|	&ТЗ КАК ТЗ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут
	//	|ИЗ
	//	|	РегистрСведений.ПланируемыеМаршрутыПеревозчика.СрезПоследних(
	//	|			,
	//	|			ДатаПланирования = &ДатаПланирования
	//	|				И Подрядчик = &Подрядчик) КАК ПланируемыеМаршрутыПеревозчикаСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК ПланируемыеМаршрутыПеревозчикаМаршруты
	//	|		ПО ПланируемыеМаршрутыПеревозчикаСрезПоследних.Маршрут = ПланируемыеМаршрутыПеревозчикаМаршруты.Маршрут
	//	|ГДЕ
	//	|	ПланируемыеМаршрутыПеревозчикаМаршруты.Маршрут   ЕСТЬ NULL 
	//	|	И ПланируемыеМаршрутыПеревозчикаСрезПоследних.Отменен = ЛОЖЬ";

	//Запрос.УстановитьПараметр("ТЗ", Маршруты.Выгрузить());
	//Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
	//Запрос.УстановитьПараметр("Подрядчик", Подрядчик);
	//Результат = Запрос.Выполнить();

	//ВыборкаДетальныеЗаписи = Результат.Выбрать();

	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Движение = Движения.ПланируемыеМаршрутыПеревозчика.Добавить();
	//	Движение.Период = Дата;
	//	Движение.Подрядчик = Подрядчик;
	//	Движение.ДатаПланирования = ДатаПланирования;
	//	Движение.Маршрут = ВыборкаДетальныеЗаписи.Маршрут;
	//	Движение.Отменен = Истина;
	//КонецЦикла;
	Если Не Отказ и Маршруты.Количество()>0 Тогда
		ОтправитьПисьмоОбИзмененииГрафикаСервер();
	КонецЕсли; 
	Движения.ПланируемыеМагазиныПеревозчика.Записывать = Истина;
	Движения.ПланируемыеМагазиныПеревозчика.Очистить();
	Для Каждого ТекСтрокаМаршруты Из Магазины Цикл
		Если Не ЗначениеЗаполнено(ТекСтрокаМаршруты.Магазин) Тогда
			Продолжить;
		КонецЕсли; 
		Движение = Движения.ПланируемыеМагазиныПеревозчика.Добавить();
		Движение.Период = Дата;
		Движение.Подрядчик = Подрядчик;
		Движение.ДатаПланирования = ДатаПланирования;
		Движение.Маршрут = ТекСтрокаМаршруты.Маршрут;
		Движение.Магазин = ТекСтрокаМаршруты.Магазин;
		Движение.ПорядокДоставки = ТекСтрокаМаршруты.ПорядокДоставки;
		Движение.Стоимость = ТекСтрокаМаршруты.Стоимость;
		Движение.ПоставкаВСетках = ТекСтрокаМаршруты.ПоставкаВСетках;
   КонецЦикла;
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КвотаНаДоставкуТовараНаТТ") Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.ФизЛицо.Контрагент) Тогда
			СтандартнаяОбработка=Ложь;
			Возврат;
		Иначе
			Перевозчик=ПараметрыСеанса.ТекущийПользователь.ФизЛицо.Контрагент;	
		КонецЕсли; 
		// Заполнение шапки                                             
		Подрядчик=Перевозчик;
		Склад=ДанныеЗаполнения.Склад;
		ДатаПланирования=ТекущаяДата()+24*60*60;
		Для Каждого ТекСтрокаВременныеИнтервалы Из ДанныеЗаполнения.ВременныеИнтервалы Цикл
			Если Не ДанныеЗаполнения.Подрядчик=Перевозчик Тогда
				Продолжить;
			КонецЕсли;
			Для Сч=1 По ТекСтрокаВременныеИнтервалы.КоличествоМаршрутов Цикл
				НоваяСтрока = Маршруты.Добавить();
				НоваяСтрока.ВременнойИнтервал = ТекСтрокаВременныеИнтервалы.ВременнойИнтервал;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры                                               


Процедура ОтправитьПисьмоОбИзмененииГрафикаСервер()
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремяВыездаПоМаршруту.Ссылка,
		|	ВремяВыездаПоМаршруту.ВерсияДанных,
		|	ВремяВыездаПоМаршруту.ПометкаУдаления,
		|	ВремяВыездаПоМаршруту.Предопределенный,
		|	ВремяВыездаПоМаршруту.Код,
		|	ВремяВыездаПоМаршруту.Наименование,
		|	ВремяВыездаПоМаршруту.ВремяВыезда,
		|	ВремяВыездаПоМаршруту.Представление
		|ИЗ
		|	Справочник.ВремяВыездаПоМаршруту КАК ВремяВыездаПоМаршруту";

	Результат = Запрос.Выполнить();

	ТЗВремяВыезда = Результат.Выгрузить();
	

	СтруктураНовогоПисьма.Вставить("Тема", "Перевозчик " 			+ Подрядчик +
												" с " + Строка(Формат(ДатаПланирования, "ДФ=dd.MM.yyyy")) + " изменил свои графики маршрутов поставок");
												
	ТекстПисьма="";
	Для каждого Стр Из Маршруты Цикл
		Если Не ЗначениеЗаполнено(Стр.ВременнойИнтервал) ИЛИ Не ЗначениеЗаполнено(Стр.ВремяВыезда) Тогда
			Продолжить;
		КонецЕсли; 
		ТекстПисьма=ТекстПисьма+Символы.ПС+"Маршрут "+Стр.Маршрут+" установлен на "
		+Строка(Формат(ТЗВремяВыезда.НайтиСтроки(Новый Структура("Ссылка",Стр.ВремяВыезда))[0].ВремяВыезда,"ДФ=HH:mm:ss"));
	КонецЦикла; 
												
	СтруктураНовогоПисьма.Вставить("Тело", ТекстПисьма);
	
	
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
    МассивАдресов=Новый Массив;
	Кому=Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	АК_ГруппыРассылки.Емейл как Представление
		|ИЗ
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	АК_ГруппыРассылки.Группа = &Группа";
	
	
	

	
	Запрос.УстановитьПараметр("Группа", Справочники.АК_ГруппыРассылки.НайтиПоНаименованию("Рассылка при изменении графиков"));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Кому.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Представление)=Неопределено Тогда
				Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли; 
	
		
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	СтрКому="";
	Для каждого Эл Из Кому Цикл
	    СтрКому=СтрКому+Эл.Значение+"; ";
	КонецЦикла; 
	Попытка
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
	    Сообщить("Отправлено письмо с информацией об измененном графике на "+СтрКому);
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

