//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура СопоставитьНаСервере()
	СоответсвиеСчетовФинБух = БухгалтерскийУчетВызовСервераПовтИспУФ.СоответствиеСчетовФинБух();
	СоответсвиеСчетовБухФин = БухгалтерскийУчетВызовСервераПовтИспУФ.СоответствиеСчетовБухФин();
	
	Для Каждого СтрокаТЗ Из Проводки Цикл
		// СЧЕТА ДТ
		Если ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Дт", СоответсвиеСчетовФинБух);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Дт", СоответсвиеСчетовБухФин, "Фин");
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетДТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетДТБух) Тогда
			ПроверитьСоответствиеСчетов(СтрокаТЗ,"Дт", СтрокаТЗ.СчетДт, СтрокаТЗ.СчетДТБух, СоответсвиеСчетовФинБух);
		КонецЕсли;
		
		// СЧЕТА КТ
		Если ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Кт", СоответсвиеСчетовФинБух);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда 
			ЗаполнитьСчетиСубконто(СтрокаТЗ, "Кт", СоответсвиеСчетовБухФин, "Фин");
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетКТ) И ЗначениеЗаполнено(СтрокаТЗ.СчетКТБух) Тогда
			ПроверитьСоответствиеСчетов(СтрокаТЗ,"Кт", СтрокаТЗ.СчетКт, СтрокаТЗ.СчетКТБух, СоответсвиеСчетовФинБух);
		КонецЕсли;		

	КонецЦикла;
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ЗаполнитьСчетИСубконто(СтрокаТЗ, ВидСчета, СоответствиеСчетов, БазаСчета="Бух")
	БазаСчетаИсточника = ?(БазаСчета="Бух", "", "Бух");
	СчетИсточник = СтрокаТЗ["Счет" + ВидСчета + БазаСчетаИсточника];
	Соответствие = СоответствиеСчетов[СчетИсточник];
	Если Соответствие <> Неопределено И Соответствие.Количество() > 0 Тогда 
		СтрокаТЗ["Счет" + ВидСчета + ?(БазаСчета="Бух", БазаСчета, "") ] = Соответствие[0]["Счет"+БазаСчета];
		ОбработатьИзменениеСчета(ЭтаФорма, ВидСчета, ?(БазаСчета="Бух", БазаСчета, ""), СтрокаТЗ);
		ОбработатьЗаполнениеСубконто(СтрокаТЗ, ВидСчета, БазаСчета, Соответствие[0].СоответствиеСубконто);
	Иначе
		ТекстСоощения = "В строке %1 для счета %2 не настроены соответствия";
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоощения, 
			Строка(СтрокаТЗ.НомерСтроки),
			СтрокаТЗ["Счет" + ВидСчета + БазаСчетаИсточника]);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСоощения);		
	КонецЕсли;
КонецПроцедуры 

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ПроверитьСоответствиеСчетов(СтрокаТЗ,ВидСчета, СчетФин, СчетБух, СоответствиеФинБух)	
	
	Соответствие = СоответствиеФинБух[СчетФин]; // Массив счетов для счета ФИн
	Если Соответствие <> Неопределено И Соответствие.Количество() > 0 Тогда 
		СоответствиеСчетов = Ложь;
		ВозможныеСчета = "";
		Для Каждого ЭлементСчета Из Соответствие Цикл 
			Если ЭлементСчета.СчетБух = СчетБух Тогда 
				СоответствиеСчетов = Истина;				
				Прервать;
			КонецЕсли;			
			ВозможныеСчета = ВозможныеСчета + ?(ЗначениеЗаполнено(ВозможныеСчета), ",", "") + Строка(ЭлементСчета.СчетБух);
		КонецЦикла;
		Если НЕ СоответствиеСчетов Тогда 
			ТекстСообщения = "В строке %1 счет %2 не соответствует счету %3, возможны счета %4";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								Строка(СтрокаТЗ.НомерСтроки),
								Строка(СчетФин),
								Строка(СчетБух),
								ВозможныеСчета);
								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли  Соответствие = Неопределено Тогда  
		ТекстСообщения = "В строке %1 счет %2 не соответствует счету %3, соответствия не определены";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
		Строка(СтрокаТЗ.НомерСтроки),
		Строка(СчетФин),
		Строка(СчетБух));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры 

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ОбработатьЗаполнениеСУбконто(СтрокаТЗ, ВидСчета, БазаСчета, СоответствиеСубконто)
	БазаСчетаИсточника = ?(БазаСчета="Бух", "Фин", "Бух");
	
	Если ТипЗнч(СоответствиеСубконто) = Тип("ТаблицаЗначений") Тогда 		
		
		Для Каждого Соответствие Из СоответствиеСубконто Цикл 
			Если НЕ ЗначениеЗаполнено(Соответствие["Поле"+БазаСчета]) Тогда 
				Продолжить;
			КонецЕсли;
			ИмяПоля  = ИмяПоля(ВидСчета, Соответствие["Поле"+БазаСчета], БазаСчета);
			
			Если ЗначениеЗаполнено(Соответствие["Поле"+БазаСчетаИсточника]) Тогда 
				Значение 	= СтрокаТЗ[ИмяПоля(ВидСчета, Соответствие["Поле"+БазаСчетаИсточника], БазаСчетаИсточника)];
				Выражение   = Соответствие["Выражение" +БазаСчета];
				Если ЗначениеЗаполнено(Выражение) Тогда 
					// Значение должно быть задано, учитывая вычисленного значение, Например Значение.ФизЛицо
					СтрокаТЗ[ИмяПоля] = Вычислить(Выражение);
				Иначе
					//Значение 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Значение, "Наименование");
					СтрокаТЗ[ИмяПоля] = Значение;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Соответствие.Значение) Тогда 
				СтрокаТЗ[ИмяПоля] = Соответствие.Значение;
			ИначеЕсли ЗначениеЗаполнено(Соответствие["Выражение" +БазаСчета]) Тогда 
				СтрокаТЗ[ИмяПоля] = Вычислить(Соответствие["Выражение" +БазаСчета]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Функция ЗначениеПоляПонаименованию(СтрокаТЗ, ИмяПоля, Наименование)
	Если СтрокаТЗ[ИмяПоля] <> Неопределено Тогда 
		МетаданныеПоля = СтрокаТЗ[ИмяПоля].Метаданные();
		Возврат Справочники[МетаданныеПоля.Имя].НайтиПоНаименованию(Наименование);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Функция ИмяПоля(ВидСчета, ИмяПоля, Знач БазаСчета="")
	//
	БазаСчета = ?(БазаСчета="Бух", БазаСчета, "");
	Если Лев(ИмяПоля, 8) = "Субконто" Тогда 
		Возврат "Субконто" + ВидСчета + БазаСчета + Прав(ИмяПоля, 1);
	Иначе
		Возврат ИмяПоля + ВидСчета + БазаСчета;
	КонецЕсли;
	
КонецФункции

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ОбработатьИзменениеСчета(Форма, ДтКт, Префикс, СтрокаТаблицы)	
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ПроводкиСубконто" + ДтКт + Префикс + "1";
	ПоляФормы.Субконто2 = "ПроводкиСубконто" + ДтКт + Префикс + "2";
	ПоляФормы.Субконто3 = "ПроводкиСубконто" + ДтКт + Префикс + "3";
	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт + Префикс], Форма, ПоляФормы, Неопределено, Истина, ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3," + ?(Префикс = "Бух", "Подразделение", "") + ",Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + Префикс + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + Префикс + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + Префикс + "3";
	
	Если Префикс = "Бух" Тогда
		ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт + Префикс;
	КонецЕсли;
	
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт + Префикс;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт + Префикс;

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт + Префикс], СтрокаТаблицы, ПоляОбъекта, Истина, ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	
	ИзменитьПараметрыВыбораПолейСубконто(СтрокаТаблицы, Форма, ДтКт+Префикс);
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Организация, ТекущиеДанные[ИмяПоляСчетУчета], "КтБух");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемыйУФ.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ИзменитьПараметрыВыбораПолейСубконто(СтрокаТаблицы, Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	Если ДтКт <> "КтБух" ИЛИ ДтКт <> "Кт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("Субконто" + ДтКт + "1,Субконто" + ДтКт + "3,Субконто" + ДтКт + "3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "Субконто" + ДтКт + "%Индекс%", "ПроводкиСубконто" + ДтКт + "%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;
	Если ДтКт <> "ДтБух" ИЛИ ДтКт <> "Дт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("Субконто" + ДтКт + "1,Субконто" + ДтКт + "2,Субконто" + ДтКт + "3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "Субконто" + ДтКт + "%Индекс%", "ПроводкиСубконто" + ДтКт + "%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;

КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура Сопоставить(Команда) Экспорт
	СопоставитьНаСервере();
КонецПроцедуры
//+++АК VERT 2018.04.03 ИП-00017500.01
Функция СоответствиеВидовСубконто()
	Перем Соответствие;
	Соответствие = Новый Соответствие;
	
	//Соответствие.Вставить(ПланыВидовХарактеристик.ВидыСубконто.БанковскиеСчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.
КонецФункции

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОБработка)
	
	ЭтоБух = Найти(Элемент.Имя, "Бух");
	ДтКтСубконто = Прав(Элемент.Имя, ?(ЭтоБух, 6, 3)); //Дт2
	СчетчикСубконто = Прав(ДтКтСубконто, 1);  //2
	ДтКт = Лев(ДтКтСубконто, ?(ЭтоБух, 5, 2)); //Дт (ДтБух)
	
	ОбработатьВыборСубконтоНестандартно(Элемент, СтандартнаяОбработка, ДтКт, СчетчикСубконто);

КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ОбработатьВыборСубконтоНестандартно(Элемент, СтандартнаяОбработка, ДтКт, СчетчикСубконто)
		
	ТекДанные = Элементы.Проводки.ТекущиеДанные;		
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекДанные["Счет"+ДтКт], ?(Найти(ДтКт, "Бух"), "Хозрасчетный", "Финансовый"));
	
	ВидСубконтоВыбираемый = ДанныеСчета["ВидСубконто" + СчетчикСубконто];
	МассивТиповВыбранногоСубконто = ВидСубконтоВыбираемый.ТипЗначения.Типы();
	
	Если МассивТиповВыбранногоСубконто.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокДляВыбора = Новый СписокЗначений;
		
		Для Каждого Эл Из МассивТиповВыбранногоСубконто Цикл
			СписокДляВыбора.Добавить(Эл, Строка(Эл));
		КонецЦикла;
		
		ВыбранныйТип = СписокДляВыбора.ВыбратьЭлемент("Выберите тип");
		
		Если ВыбранныйТип <> Неопределено Тогда
			
			//типизация на выбранный тип
			ТекДанные["Субконто"+ДтКт+СчетчикСубконто] = XMLЗначение(ВыбранныйТип.Значение, "00000000-0000-0000-0000-000000000000");
			
		Иначе
			
			Возврат; //чтобы исключить ошибки далее по коду.
			
		КонецЕсли;		
			
	КонецЕсли;
	
	ТипыОбрабатываемыеНестандартно = Новый Структура;
	ТипыОбрабатываемыеНестандартно.Вставить("ДоговорыКонтрагентов", "Контрагенты");
	ТипыОбрабатываемыеНестандартно.Вставить("БанковскиеСчета", "Организации");
	
	Если НЕ СтандартнаяОбработка Тогда
		Мет = ТекДанные["Субконто"+ДтКт+СчетчикСубконто].Метаданные();		
		ТипСтрокой = Мет.Имя;
		
		Если ПринадлежностьКлассуМетаданных("Справочники", Мет) Тогда			
			Если НЕ ТипыОбрабатываемыеНестандартно.Свойство(ТипСтрокой) Тогда
				СтандартнаяОбработкаВыбораСоставногоСубконтоСправочника(Элемент, ТипСтрокой);
			КонецЕсли;
		ИначеЕсли ПринадлежностьКлассуМетаданных("Документы", Мет) Тогда
			СтандартнаяОбработкаВыбораСоставногоСубконтоДокумента(Элемент, ТипСтрокой);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ТипыОбрабатываемыеНестандартно Цикл
		ОбработкаНестандартногоТипаСубконто(ТекДанные, Элемент, ДтКт, СчетчикСубконто, ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение, СтандартнаяОбработка);
	КонецЦикла;	
		
КонецПроцедуры
//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура СтандартнаяОбработкаВыбораСоставногоСубконтоСправочника(Элемент, ТипСтрокой)
	
	ФормаВыбора = ПолучитьФорму("Справочник." + ТипСтрокой + ".ФормаВыбора", , Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура СтандартнаяОбработкаВыбораСоставногоСубконтоДокумента(Элемент, ТипСтрокой)
	
	ФормаВыбора = ПолучитьФорму("Документ." + ТипСтрокой + ".ФормаВыбора", , Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ОбработкаНестандартногоТипаСубконто(ТекДанные, Элемент, ДтКт, СчетчикСубконто, ТипСтрокой, ВладелецДляТипа, СтандартнаяОбработка)
	
	Если ТипЗнч(ТекДанные["Субконто"+ДтКт+СчетчикСубконто]) = Тип("СправочникСсылка." + ТипСтрокой) Тогда
		
		Владелец = Неопределено;
		
		Для Инд = 1 По 3 Цикл
			Если ТипЗнч(ТекДанные["Субконто" + ДтКт + Строка(Инд)]) = Тип("СправочникСсылка." + ВладелецДляТипа) Тогда
				Владелец = ТекДанные["Субконто" + ДтКт + Строка(Инд)];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Владелец <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			П = Новый Структура;
			П.Вставить("Владелец", Владелец);
			ФормаВыбора = ПолучитьФорму("Справочник." + ТипСтрокой + ".ФормаВыбора", П, Элемент);
						
			ФормаВыбора.ПараметрОтборПоВладельцу = Владелец;			
			ФормаВыбора.Открыть();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Функция ПринадлежностьКлассуМетаданных(Класс, Объект) Экспорт 
	
	Для Каждого МДОбъект Из Метаданные[Класс] Цикл 
       Если МДОбъект = Объект Тогда 
           Возврат Истина; 
       КонецЕсли; 
   КонецЦикла; 
   
   Возврат Ложь;
   
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетаСервер(Счет, ИмяПланаСчетов = "Финансовый")
	
	Возврат БухгалтерскийУчетВызовСервераПовтИспУФ.ПолучитьСвойстваСчета(Счет, ИмяПланаСчетов);	
	
КонецФункции

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПроводкиСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПроводкиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьДоступностьСубконто", 0.5, Истина);		
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура УстановитьДоступностьСубконто() Экспорт
	ОтключитьОбработчикОжидания("УстановитьДоступностьСубконто");
	УстановитьДОступностьСубконтоТолстыйКлиент();
	УстановитьДОступностьСубконтоТолстыйКлиент("Бух");
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура УстановитьДОступностьСубконтоТолстыйКлиент(Префикс = "")
	
	ТекСтр = Элементы.Проводки.ТекущиеДанные;
	
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//Дт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр["СчетДт" + Префикс], ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "ПроводкиСубконтоДт" + Префикс + "1", "ПроводкиСубконтоДт" + Префикс + "2", "ПроводкиСубконтоДт" + Префикс + "3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла; 
	
	Если Префикс = "Бух" Тогда
		ТекСтр.ПодразделениеДТБухДоступность = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	//Кт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр["СчетКт" + Префикс], ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "ПроводкиСубконтоКт" + Префикс + "1", "ПроводкиСубконтоКт" + Префикс + "2", "ПроводкиСубконтоКт" + Префикс + "3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> "Бух" Тогда
		ТекСтр.ВалютныйКтДоступность = ДанныеСчета.Валютный;
	Иначе
		ТекСтр.ПодразделениеКТБухДоступность = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
	
	Если Префикс = "Бух" Тогда		
	
		Элементы.ПроводкиПодразделениеДтБух.Доступность = ТекСтр.ПодразделениеДТБухДоступность;
		Элементы.ПроводкиПодразделениеКтБух.Доступность = ТекСтр.ПодразделениеКтБухДоступность;
	КонецЕсли;
	
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПроводкиПередНачаломИзменения(Элемент, Отказ)
	УстановитьДОступностьСубконтоТолстыйКлиент();
	УстановитьДОступностьСубконтоТолстыйКлиент("Бух");
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Организация = Параметры.Организация;
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПринятьИзменения(Команда) Экспорт
	
	Для Каждого ЭлементПроводки Из Проводки Цикл
		СтрокаПроводки = ЭтаФорма.ВладелецФормы.Объект.Проводки.НайтиПоИдентификатору(ЭлементПроводки.НомерСтроки - 1);
		Если СтрокаПроводки <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаПроводки, ЭлементПроводки);			
		КонецЕсли;;
	КонецЦикла;
	ЭтаФорма.ВладелецФормы.Модифицированность = Истина;	
	Если ЭтаФорма.Открыта() Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

