//модуль написан Susk (Суслиным К.В.) - чтобы не префиксовать каждую процедуру.

&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетаСервер(Счет, ИмяПланаСчетов = "Финансовый")
	
	Возврат БухгалтерскийУчетВызовСервераПовтИспУФ.ПолучитьСвойстваСчета(Счет, ИмяПланаСчетов);	
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЭтоТаблица = Ложь, ИмяПланаСчетов = "Финансовый")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"ПроводкиСубконто" + Постфикс + "1",
								"ПроводкиСубконто" + Постфикс + "2",
								"ПроводкиСубконто" + Постфикс + "3");
								
	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица, ИмяПланаСчетов);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетБухПоСоответствиюСервер(СчетФин)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеФинИБухПлановСчетов.ФинСчет,
	               |	СоответствиеФинИБухПлановСчетов.БухСчет
	               |ИЗ
	               |	РегистрСведений.СоответствиеФинИБухПлановСчетов КАК СоответствиеФинИБухПлановСчетов
	               |ГДЕ
	               |	СоответствиеФинИБухПлановСчетов.ФинСчет = &ФинСчет";
	
	Запрос.УстановитьПараметр("ФинСчет", СчетФин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БухСчет;
	КонецЕсли;
	
	Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ИзменениеСубконтоФин(СубконтоФин, ТекСтрока, Префикс)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто"+ Префикс + "Бух1", "Субконто"+ Префикс + "Бух2", "Субконто"+ Префикс + "Бух3");

	Для Индекс = 1 По 3 Цикл
		Если ТипЗнч(СубконтоФин) = ТипЗнч(ТекСтрока[ПоляОбъекта["Субконто" + Индекс]]) И НЕ ЗначениеЗаполнено(ТекСтрока[ПоляОбъекта["Субконто" + Индекс]]) Тогда
			ТекСтрока[ПоляОбъекта["Субконто" + Индекс]] = СубконтоФин;
		КонецЕсли;			
	КонецЦикла;   
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление(Фин, Префикс)
	
	// Субконто
	Для Сч = 1 По 3 Цикл

		// Видимость СубконтоДт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиСубконтоДт" + Префикс + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоДт" + Префикс + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		// Выделение не заполненного СубконтоДт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиСубконтоДт" + Префикс + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоДт" + Префикс + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоДт" + Префикс + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));		

		// Видимость СубконтоКт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиСубконтоКт" + Префикс + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоКт" + Префикс + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		// Выделение не заполненного СубконтоКт		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиСубконтоКт" + Префикс + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоКт" + Префикс + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.СубконтоКт" + Префикс + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;

	Если НЕ Фин Тогда
		
		// ПодразделениеДт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиПодразделениеДТБух");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеДТБухДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеДТБух", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


		// ХозрасчетныйПодразделениеДт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиПодразделениеДТБух");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеДТБухДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


		// ПодразделениеКт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиПодразделениеКтБух");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеКтБухДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеКтБух", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


		// ХозрасчетныйПодразделениеКт
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиПодразделениеКтБух");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Проводки.ПодразделениеКтБухДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	КонецЕсли;
	
	УстановитьУсловноеОформлениеКоличествоВалюта("Дт" + Префикс);
	УстановитьУсловноеОформлениеКоличествоВалюта("Кт" + Префикс);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКоличествоВалюта(Префикс)
	
	// Количество и валюта
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиКоличество" + Префикс);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиНадписьКоличество" + Префикс);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Проводки.Количественный" + Префикс + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Проводки.Валютный" + Префикс + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиВалюта" + Префикс);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроводкиВалютнаяСумма" + Префикс);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Проводки.Валютный" + Префикс + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДОступностьСубконтоТолстыйКлиент(Префикс = "")
	
	ТекСтр = Элементы.Проводки.ТекущиеДанные;
	
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//Дт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр["СчетДт" + Префикс], ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "ПроводкиСубконтоДт" + Префикс + "1", "ПроводкиСубконтоДт" + Префикс + "2", "ПроводкиСубконтоДт" + Префикс + "3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла; 
	
	Если Префикс <> "Бух" Тогда
		ТекСтр.КоличественныйДтДоступность = ДанныеСчета.Количественный; 
		ТекСтр.ВалютныйДтДоступность = ДанныеСчета.Валютный;		
	Иначе
		ТекСтр.ПодразделениеДТБухДоступность = ДанныеСчета.УчетПоПодразделениям;
		ТекСтр.КоличественныйДтБухДоступность = ДанныеСчета.Количественный; 
		ТекСтр.ВалютныйДтБухДоступность = ДанныеСчета.Валютный;
	КонецЕсли;
	
	//Кт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр["СчетКт" + Префикс], ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "ПроводкиСубконтоКт" + Префикс + "1", "ПроводкиСубконтоКт" + Префикс + "2", "ПроводкиСубконтоКт" + Префикс + "3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> "Бух" Тогда
		ТекСтр.КоличественныйКтДоступность = ДанныеСчета.Количественный;
		ТекСтр.ВалютныйКтДоступность = ДанныеСчета.Валютный;
	Иначе
		ТекСтр.ПодразделениеКТБухДоступность = ДанныеСчета.УчетПоПодразделениям;
		ТекСтр.КоличественныйКтБухДоступность = ДанныеСчета.Количественный;
		ТекСтр.ВалютныйКтБухДоступность = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если Префикс = "Бух" Тогда
		Элементы.ПроводкиКоличествоДтБух.Доступность = ТекСтр.КоличественныйДтБухДоступность;
		Элементы.ПроводкиКоличествоКтБух.Доступность = ТекСтр.КоличественныйКтБухДоступность;
	
		Элементы.ПроводкиВалютаДтБух.Доступность = ТекСтр.ВалютныйДтБухДоступность;
		Элементы.ПроводкиВалютаКтБух.Доступность = ТекСтр.ВалютныйКтБухДоступность;
	
		Элементы.ПроводкиВалютнаяСуммаДтБух.Доступность = ТекСтр.ВалютныйДтБухДоступность;
		Элементы.ПроводкиВалютнаяСуммаКтБух.Доступность = ТекСтр.ВалютныйКтБухДоступность;
	
		Элементы.ПроводкиПодразделениеДтБух.Доступность = ТекСтр.ПодразделениеДТБухДоступность;
		Элементы.ПроводкиПодразделениеКтБух.Доступность = ТекСтр.ПодразделениеКтБухДоступность;
	Иначе
		Элементы.ПроводкиКоличествоДт.Доступность = ТекСтр.КоличественныйДтДоступность;
		Элементы.ПроводкиКоличествоКт.Доступность = ТекСтр.КоличественныйКтДоступность;
	
		Элементы.ПроводкиВалютаДт.Доступность = ТекСтр.ВалютныйДтДоступность;
		Элементы.ПроводкиВалютаКт.Доступность = ТекСтр.ВалютныйКтДоступность;
	
		Элементы.ПроводкиВалютнаяСуммаДт.Доступность = ТекСтр.ВалютныйДтДоступность;
		Элементы.ПроводкиВалютнаяСуммаКт.Доступность = ТекСтр.ВалютныйКтДоступность;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	ВидимостьБух = НЕ Объект.НеВыгружатьВБухгалтерию И НЕ ЗначениеЗаполнено(Объект.ВидОперации);
	
	Элементы.ПроводкиБухгалтерияДт.Видимость = ВидимостьБух;
	Элементы.ПроводкиБухгалтерияКт.Видимость = ВидимостьБух;
	Элементы.ПроводкиСуммаНУБухДт.Видимость = ВидимостьБух;
	Элементы.ПроводкиСуммаНУБухКт.Видимость = ВидимостьБух;
	Элементы.ПроводкиКоличествоДтБух.Видимость = ВидимостьБух;	
	Элементы.ПроводкиКоличествоКтБух.Видимость = ВидимостьБух;
	Элементы.ПроводкиВалютаДтБух.Видимость = ВидимостьБух;
	Элементы.ПроводкиВалютаКтБух.Видимость = ВидимостьБух;
	Элементы.ПроводкиВалютнаяСуммаДтБух.Видимость = ВидимостьБух;
	Элементы.ПроводкиВалютнаяСуммаКтБух.Видимость = ВидимостьБух;	
	Элементы.НастроитьСоставРегистров.Видимость = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактироватьРСРН_В_Операции, Ложь);
	                            	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуОперации()
	
	Объект.СуммаОперации = 0;

	Для каждого Проводка Из Объект.Проводки Цикл
		Объект.СуммаОперации = Объект.СуммаОперации + Проводка.Сумма;
		Объект.СуммаОперацииМСФО = Объект.СуммаОперацииМСФО + Проводка.СуммаМСФО;
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Операция");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ТипЗнч(Параметры.ПараметрОбъект) = Тип("ДокументОбъект.Операция") Тогда
		ДокОб = Параметры.ПараметрОбъект;
		
		Для Каждого Рекв Из ДокОб.Метаданные().Реквизиты Цикл
			Объект[Рекв.Имя] = ДокОб[Рекв.Имя];
		КонецЦикла;
			
		Для Каждого Стр Из Параметры.ПараметрОбъект.Проводки Цикл
			НовСтр = Объект.Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
			
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
					
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаУпрФорма(Объект, "Продажа", Объект.Ссылка.Метаданные());
		
	КонецЕсли;
	
	УстановитьУсловноеОформление(Истина, "");
	УстановитьУсловноеОформление(Ложь, "Бух");
	АктивностьДвижений = Истина;
	ПодготовитьФормуНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСчета(СтрокаТаблицы, Счет, ДтКт, Префикс, ПланСчетов)
	
	Если ЗначениеЗаполнено(Счет) Тогда
	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Счет, ДтКт + Префикс, Истина, "Хозрасчетный");
	
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "Субконто" + ДтКТ + Префикс + "1", "Субконто" + ДтКТ + Префикс + "2", "Субконто" + ДтКТ + Префикс + "3");

		БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(Счет, СтрокаТаблицы, ПоляОбъекта, Истина, ПланСчетов);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетДтПриИзменении(Элемент)
	
	//СтрокаТаблицы = Элементы.Проводки.ТекущиеДанные;	

	//// фин
	//ИзменениеСчета(СтрокаТаблицы, СтрокаТаблицы.СчетДт, "Дт", , "Финансовый");
	//
	//// бух
	//СтрокаТаблицы.СчетДтБух = ПолучитьСчетБухПоСоответствиюСервер(Элементы.Проводки.ТекущиеДанные.СчетДт);	
	//ИзменениеСчета(СтрокаТаблицы, СтрокаТаблицы.СчетДтБух, "Дт", "Бух", "Хозрасчетный");
	//	
	//Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
	//	УстановитьДОступностьСубконтоТолстыйКлиент();
	//КонецЕсли;
	//
	//Для Индекс = 1 По 3 Цикл
	//	ИзменениеСубконтоФин(СтрокаТаблицы["СубконтоДт" + Строка(Индекс)], СтрокаТаблицы, "Дт");
	//КонецЦикла;
	
	ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Дт", "");	
	УстановитьДОступностьСубконтоТолстыйКлиент();	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетДтБухПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Дт", "Бух");	
	УстановитьДОступностьСубконтоТолстыйКлиент("Бух");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетКтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Кт", "");
	
	УстановитьДОступностьСубконтоТолстыйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетКтБухПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Кт", "Бух");
	
	УстановитьДОступностьСубконтоТолстыйКлиент("Бух");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Объект, Форма, ДтКт, Префикс)

	ИдСтроки = Форма.Элементы.Проводки.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Объект.Проводки.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ПроводкиСубконто" + ДтКт + Префикс + "1";
	ПоляФормы.Субконто2 = "ПроводкиСубконто" + ДтКт + Префикс + "2";
	ПоляФормы.Субконто3 = "ПроводкиСубконто" + ДтКт + Префикс + "3";
	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт + Префикс], Форма, ПоляФормы, Неопределено, Истина, ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3," + ?(Префикс = "Бух", "Подразделение", "") + ",Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + Префикс + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + Префикс + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + Префикс + "3";
	
	Если Префикс = "Бух" Тогда
		ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт + Префикс;
	КонецЕсли;
	
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт + Префикс;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт + Префикс;
	ПоляОбъекта.Организация    = Объект.Организация;
	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт + Префикс], СтрокаТаблицы, ПоляОбъекта, Истина, ?(Префикс = "Бух", "Хозрасчетный", "Финансовый"));
	
	ИзменитьПараметрыВыбораПолейСубконто(Объект, Форма, ДтКт+Префикс);
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы, Префикс);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка, Префикс)
	
	НадписьДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	НадписьКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");
		
	Если Префикс = "Бух" Тогда
		Проводка.НадписьКоличествоДтБух = ?(Проводка.КоличественныйДтБухДоступность, НСтр("ru = 'Кол.:'"), "");
		Проводка.НадписьКоличествоКтБух = ?(Проводка.КоличественныйКтБухДоступность, НСтр("ru = 'Кол.:'"), "");
	Иначе		
		Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
		Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "КтБух");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемыйУФ.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Объект, Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.Проводки.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Объект.Проводки.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "КтБух" ИЛИ ДтКт <> "Кт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("Субконто" + ДтКт + "1,Субконто" + ДтКт + "3,Субконто" + ДтКт + "3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "Субконто" + ДтКт + "%Индекс%", "ПроводкиСубконто" + ДтКт + "%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;
	Если ДтКт <> "ДтБух" ИЛИ ДтКт <> "Дт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("Субконто" + ДтКт + "1,Субконто" + ДтКт + "2,Субконто" + ДтКт + "3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСерверУФ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "Субконто" + ДтКт + "%Индекс%", "ПроводкиСубконто" + ДтКт + "%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;

КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура ПроводкиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьДоступностьСубконто", 0.5, Истина);		
КонецПроцедуры

//+++АК VERT 2018.04.03 ИП-00017500.01
&НаКлиенте
Процедура УстановитьДоступностьСубконто() Экспорт
	ОтключитьОбработчикОжидания("УстановитьДоступностьСубконто");
	УстановитьДОступностьСубконтоТолстыйКлиент();
	УстановитьДОступностьСубконтоТолстыйКлиент("Бух");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		Модифицированность = Истина;
		Объект.НовыйМеханизм = Истина;		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура НеВыгружатьВБухгалтериюПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивность(Команда)
	
	Для Каждого Стр Из Объект.Проводки Цикл
		Стр.Активность = НЕ Стр.Активность;
	КонецЦикла;
	
	ПерезаполнитьРасчетыСКонтрагентами();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Проводки.Количество() Тогда
		Ответ = Вопрос("При смене операции рекомендуется очистить все строки табличной части. Сделать это сейчас?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Объект.Проводки.Очистить();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита)
	
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоКоду(Код)
	
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Код);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочникаСтатьиДРПоКоду(Код)
	
	Возврат Справочники.СтатьиДоходовРасходов.НайтиПоКоду(Код);
	
КонецФункции

&НаКлиенте
Процедура ПроводкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ВидОперации = Объект.ВидОперации;
	
	ТекСтр = Элементы.Проводки.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтр.Активность = Истина;
	КонецЕсли;
	
	Если НоваяСтрока И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДокументаОперация.НачислениеПроцентовПоДепозитамЗаймам") Тогда
				
		ТекСтр.СчетДт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПрочиеЗаймыВыданные");
		ТекСтр.СчетКт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ВыручкаПрочая");
		
		ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Дт", "");	
		ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Кт", "");	
				
		ТекСтр.СубконтоКт1 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоРеквизиту("id_TT", 10969);
		ТекСтр.СубконтоКт2 = ПолучитьЭлементСправочникаСтатьиДРПоКоду("39395");
		ТекСтр.СубконтоКт3 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоРеквизиту("id_ЦФО", 10067);
	//+++АК NEVV 2017.12.04 ИП-00016538.01
	//+++АК Susk (Суслин К.В.) 2018.02.05 ИП-00017500
	// подправил код на новые алгоритмы	 
	ИначеЕсли НоваяСтрока И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДокументаОперация.КорректировкаОстатковПоТоваруУпаковке") Тогда
		
		СписокВыбораОперации = Новый СписокЗначений;                       
		СписокВыбораОперации.Добавить("Оприходование товара");
		СписокВыбораОперации.Добавить("Списание товара");
		СписокВыбораОперации.Добавить("Оприходование упаковки");
		СписокВыбораОперации.Добавить("Списание упаковки");
		
		ВыбЭлемент = СписокВыбораОперации.ВыбратьЭлемент("Выберите требуемую операцию", ВыбЭлемент);
		Если ВыбЭлемент = Неопределено Тогда 
			Возврат;
		Иначе
			ВыбЗначение = ВыбЭлемент.Значение;
		КонецЕсли;
		
		ЗаполнятьСубконтоДт = Ложь;
				
		Если ВыбЗначение = "Списание товара" Тогда
			ТекСтр.СчетДт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения");
			ТекСтр.СчетКт = ПредопределенноеЗначение("ПланСчетов.Финансовый.Товары");		    
			ЗаполнятьСубконтоДт = Истина;
		ИначеЕсли ВыбЗначение = "Оприходование товара" Тогда
			ТекСтр.СчетДт = ПредопределенноеЗначение("ПланСчетов.Финансовый.Товары"); 
			ТекСтр.СчетКт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения");			
		ИначеЕсли ВыбЗначение = "Оприходование упаковки" Тогда
			ТекСтр.СчетДт = ПредопределенноеЗначение("ПланСчетов.Финансовый.МатералыДляВыпуска");
			ТекСтр.СчетКт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения");			
		ИначеЕсли ВыбЗначение = "Списание упаковки" Тогда
			ТекСтр.СчетДт = ПредопределенноеЗначение("ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения");
			ТекСтр.СчетКт = ПредопределенноеЗначение("ПланСчетов.Финансовый.МатералыДляВыпуска");
			ЗаполнятьСубконтоДт = Истина;
		Иначе
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Дт", "");	
		ОбработатьИзменениеСчета(Объект, ЭтаФорма, "Кт", "");
		
		Если ЗаполнятьСубконтоДт Тогда
			ТекСтр.СубконтоДт1 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоКоду("ЦФО_000");
			ТекСтр.СубконтоДт2 = ПолучитьЭлементСправочникаСтатьиДРПоКоду("20120");
			ТекСтр.СубконтоДт3 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоКоду("ЦФО_16");
		Иначе
			ТекСтр.СубконтоКт1 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоКоду("ЦФО_000");
			ТекСтр.СубконтоКт2 = ПолучитьЭлементСправочникаСтатьиДРПоКоду("20120");
			ТекСтр.СубконтоКт3 = ПолучитьЭлементСправочникаСтруктурныеЕдиницыПоКоду("ЦФО_16");
		КонецЕсли;
		
		//---АК NEVV 
	КонецЕсли;
	
	УстановитьДОступностьСубконтоТолстыйКлиент();
	
КонецПроцедуры

//почему все обработчики сюда не вешаю? Потому что резервирую, вдруг придется отдельно обрабатывать счета, на будущее.
//
&НаКлиенте
Процедура ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОБработка)
	
	ЭтоБух = Найти(Элемент.Имя, "Бух");
	ДтКтСубконто = Прав(Элемент.Имя, ?(ЭтоБух, 6, 3)); //Дт2
	СчетчикСубконто = Прав(ДтКтСубконто, 1);  //2
	ДтКт = Лев(ДтКтСубконто, ?(ЭтоБух, 5, 2)); //Дт (ДтБух)
	
	ОбработатьВыборСубконтоНестандартно(Элемент, СтандартнаяОбработка, ДтКт, СчетчикСубконто);

КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконтоДтБухНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроводкиСубконтоКтБухНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроводкиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяОбработкаВыбораСоставногоСубконтоСправочника(Элемент, ТипСтрокой)
	
	ФормаВыбора = ПолучитьФорму("Справочник." + ТипСтрокой + ".ФормаВыбора", , Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяОбработкаВыбораСоставногоСубконтоДокумента(Элемент, ТипСтрокой)
	
	ФормаВыбора = ПолучитьФорму("Документ." + ТипСтрокой + ".ФормаВыбора", , Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНестандартногоТипаСубконто(ТекДанные, Элемент, ДтКт, СчетчикСубконто, ТипСтрокой, ВладелецДляТипа, СтандартнаяОбработка)
	
	Если ТипЗнч(ТекДанные["Субконто"+ДтКт+СчетчикСубконто]) = Тип("СправочникСсылка." + ТипСтрокой) Тогда
		
		Владелец = Неопределено;
		
		Для Инд = 1 По 3 Цикл
			Если ТипЗнч(ТекДанные["Субконто" + ДтКт + Строка(Инд)]) = Тип("СправочникСсылка." + ВладелецДляТипа) Тогда
				Владелец = ТекДанные["Субконто" + ДтКт + Строка(Инд)];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Не нашлось владельца в  других субконто - берем из шапки, если это организация. Иначе не судьба.
		Если Владелец = Неопределено Тогда
			Если ВладелецДляТипа = "Организации" Тогда
				Если Объект.Организация.Пустая() Тогда
					Предупреждение("Не удалось определить организацию для подбора субконто, т.к. в шапке организация не заполнена!");
					СтандартнаяОбработка = Ложь;
					Возврат;
				КонецЕсли;
				
				Владелец = Объект.Организация;				
				
			КонецЕсли;
		КонецЕсли;
		
		Если Владелец <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			П = Новый Структура;
			П.Вставить("Владелец", Владелец);
			ФормаВыбора = ПолучитьФорму("Справочник." + ТипСтрокой + ".ФормаВыбора", П, Элемент);
						
			ФормаВыбора.ПараметрОтборПоВладельцу = Владелец;			
			ФормаВыбора.Открыть();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСубконтоНестандартно(Элемент, СтандартнаяОбработка, ДтКт, СчетчикСубконто)
		
	ТекДанные = Элементы.Проводки.ТекущиеДанные;		
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекДанные["Счет"+ДтКт], ?(Найти(ДтКт, "Бух"), "Хозрасчетный", "Финансовый"));
	
	ВидСубконтоВыбираемый = ДанныеСчета["ВидСубконто" + СчетчикСубконто];
	МассивТиповВыбранногоСубконто = ВидСубконтоВыбираемый.ТипЗначения.Типы();
	
	Если МассивТиповВыбранногоСубконто.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокДляВыбора = Новый СписокЗначений;
		
		Для Каждого Эл Из МассивТиповВыбранногоСубконто Цикл
			СписокДляВыбора.Добавить(Эл, Строка(Эл));
		КонецЦикла;
		
		ВыбранныйТип = СписокДляВыбора.ВыбратьЭлемент("Выберите тип");
		
		Если ВыбранныйТип <> Неопределено Тогда
			
			//типизация на выбранный тип
			ТекДанные["Субконто"+ДтКт+СчетчикСубконто] = XMLЗначение(ВыбранныйТип.Значение, "00000000-0000-0000-0000-000000000000");
			
		Иначе
			
			Возврат; //чтобы исключить ошибки далее по коду.
			
		КонецЕсли;		
			
	КонецЕсли;
	
	ТипыОбрабатываемыеНестандартно = Новый Структура;
	ТипыОбрабатываемыеНестандартно.Вставить("ДоговорыКонтрагентов", "Контрагенты");
	ТипыОбрабатываемыеНестандартно.Вставить("БанковскиеСчета", "Организации");
	
	Если НЕ СтандартнаяОбработка Тогда
		Мет = ТекДанные["Субконто"+ДтКт+СчетчикСубконто].Метаданные();		
		ТипСтрокой = Мет.Имя;
		
		Если ПринадлежностьКлассуМетаданных("Справочники", Мет) Тогда			
			Если НЕ ТипыОбрабатываемыеНестандартно.Свойство(ТипСтрокой) Тогда
				СтандартнаяОбработкаВыбораСоставногоСубконтоСправочника(Элемент, ТипСтрокой);
			КонецЕсли;
		ИначеЕсли ПринадлежностьКлассуМетаданных("Документы", Мет) Тогда
			СтандартнаяОбработкаВыбораСоставногоСубконтоДокумента(Элемент, ТипСтрокой);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ТипыОбрабатываемыеНестандартно Цикл
		ОбработкаНестандартногоТипаСубконто(ТекДанные, Элемент, ДтКт, СчетчикСубконто, ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение, СтандартнаяОбработка);
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСуммаПриИзменении(Элемент)
	
	ПересчитатьСуммуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСуммаМСФОПриИзменении(Элемент)
	
	ПересчитатьСуммуОперации();
	
КонецПроцедуры

&НаКлиенте
Функция ПринадлежностьКлассуМетаданных(Класс, Объект) Экспорт 
	
	Для Каждого МДОбъект Из Метаданные[Класс] Цикл 
       Если МДОбъект = Объект Тогда 
           Возврат Истина; 
       КонецЕсли; 
   КонецЦикла; 
   
   Возврат Ложь;
   
КонецФункции

&НаСервере
Процедура ПроверитьСчетаНаСервере()
	СоответствиеСчетов = БухгалтерскийУчетВызовСервераПовтИспУФ.СоответствиеСчетовФинБух();
	Для Каждого СтрокаТЧ Из Объект.Проводки Цикл 
		
		Если СоответствиеСчетов[СтрокаТЧ.СчетКт] <> Неопределено 
			И СоответствиеСчетов[СтрокаТЧ.СчетКт].Найти(СтрокаТЧ.СчетКТБух) = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счет КТ бух " +СтрокаТЧ.СчетКтБух+ "не соответствует счету ФИН"+ СтрокаТЧ.СчетКТ, 
																Объект.Ссылка,
																"Проводки[" + Формат(СтрокаТч.НомерСтроки, "ЧГ=") +"].СчетКтБух");
		КонецЕсли;
		
		Если СоответствиеСчетов[СтрокаТЧ.СчетДт] <> Неопределено 
			И СоответствиеСчетов[СтрокаТЧ.СчетДт].Найти(СтрокаТЧ.СчетДТБух) = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счет ДТ бух " +СтрокаТЧ.СчетДтБух+ " не соответствует счету ФИН " + СтрокаТЧ.СчетДТ,
															Объект.Ссылка,
															"Проводки[" + Формат(СтрокаТч.НомерСтроки, "ЧГ=") +"].СчетДтБух");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСчета(Команда)
КонецПроцедуры

//+++АК VERT 2018.05.30 ИП-00017500.01^01
&НаКлиенте
Процедура ПроставитьБухСчета(Команда)
	
	Параметр = Новый Структура("Ссылка, Организация", Объект.Ссылка, Объект.Организация);
	ФормаСопоставления = ПолучитьФорму("Документ.Операция.Форма.ФормаСоспоставленияСчетов", Параметр , ЭтаФорма);
	//ФормаСопоставления = ОткрытьФорму("Документ.Операция.Форма.ФормаСоспоставленияСчетов", Параметр , ЭтаФорма);
	Для Каждого СтрокаПроводка Из Объект.Проводки Цикл 
		ЗаполнитьЗначенияСвойств(ФормаСопоставления.Проводки.Добавить(), СтрокаПроводка);
	КонецЦикла;;
	ФормаСопоставления.Сопоставить(Неопределено);
	ФормаСопоставления.ПринятьИзменения(Неопределено);

КонецПроцедуры

//ИП-00019332
&НаКлиенте
Процедура ПроводкиПослеУдаления(Элемент)
	
	ПересчитатьСуммуОперации();	
	
	ПодключитьОбработчикОжидания("ОбработкаДвиженийРК", 0.5, Истина);
	
КонецПроцедуры

//ИП-00019332
&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Документ.Операция.Форма.ФормаВыбораРегистров", СтруктураПараметров, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

//ИП-00019332
&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		РезультатПоиска = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРегистра = РезультатПоиска[0];
		
		СтрокаРегистра.Отображение = ИзмененныйРегистр.Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтаФорма[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
				
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

//ИП-00019332
&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;

			РеквизитыНабораЗаписей = ЭтаФорма[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли; 
				
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	//Если отображается не более одного регистра - прячем заголовок у панели регистров
	Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;	

КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

//ИП-00019332
&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда 
			СтрокаРегистра.ЕстьДвижения = ЭтаФорма[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0;
		КонецЕсли;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

//ИП-00019332
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация = Объект.Организация;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	
	РегистрыСДвижениями = Новый Массив;	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(Объект.Ссылка);
	СоздатьЭлементыФормы();
	
КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтаФорма[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтаФорма[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

//ИП-00019332
&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
		ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
		СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
			ИЛИ ДобавленПользователем;		

	КонецЦикла;

КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя + "НаборЗаписей");
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТекущийОбъект.Движения[СтрокаРегистра.Имя].Загрузить(ТаблицаДвижений);
			СтрокаРегистра.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//ИП-00019332
&НаСервере
Процедура ПерезаполнитьРасчетыСКонтрагентами()
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ПерезаполнитьРасчетыСКонтрагентамиОбъект();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	ЕстьДвижения = Об.Движения.РасчетыСКонтрагентами.Количество();
	НайдСтр = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("Имя", "РасчетыСКонтрагентами"));
	
	Если ЕстьДвижения Тогда
		
		Если НайдСтр.Количество() = 0 Тогда
			НовСтр = Объект.ТаблицаРегистровНакопления.Добавить();
			НовСтр.Имя = "РасчетыСКонтрагентами";
		КонецЕсли;
		
	Иначе
		
		Если НайдСтр.Количество() <> 0 Тогда
			Для Каждого Стр Из НайдСтр Цикл
				Объект.ТаблицаРегистровНакопления.Удалить(Стр);
			КонецЦикла;
		КонецЕсли;     	
		
	КонецЕсли;	
	
	РегистрыСДвижениями = Новый Массив;	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	
	Если ЕстьДвижения Тогда
		ИмяРеквизита = "РасчетыСКонтрагентамиНаборЗаписей";
		
		НаборЗаписей = Об.Движения.РасчетыСКонтрагентами;
		ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
	
		НайдСтр = Регистры.НайтиСтроки(Новый Структура("Имя", "РасчетыСКонтрагентами"));
	
		Если НайдСтр.Количество() Тогда
			СтрокаРегистра = НайдСтр[0];
			СтрокаРегистра.Записывать = ЭтаФорма[ИмяРеквизита].Количество() > 0;		
		КонецЕсли;
	КонецЕсли;
	
	СоздатьЭлементыФормы();
	
КонецПроцедуры 

//ИП-00019332
&НаКлиенте
Процедура ОбработкаДвиженийРК()
	
	СчетаДляУчетаНаРегистреРасчетовСКонтрагентами = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаДляУчетаНаРегистреРасчетовСКонтрагентами();
	
	Для Каждого Стр Из Объект.Проводки Цикл
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Стр.СчетДт) <> Неопределено
			ИЛИ СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Стр.СчетКт) <> Неопределено Тогда
				ПерезаполнитьРасчетыСКонтрагентами();	
				Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
//ИП-00019332
&НаКлиенте
Процедура ПроводкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбработкаДвиженийРК();
	КонецЕсли;
	
КонецПроцедуры

