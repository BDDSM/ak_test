Перем РанееУстановленнаяПометкаУдаления;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Операция.Организация,
	|	Операция.Номер,
	|	Операция.Дата,
	|	Операция.Содержание
	|ИЗ
	|	Документ.Операция КАК Операция
	|ГДЕ
	|	Операция.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ФинансовыйДвиженияССубконто.СчетДт,
	|	ФинансовыйДвиженияССубконто.СубконтоДт1,
	|	ФинансовыйДвиженияССубконто.СубконтоДт2,
	|	ФинансовыйДвиженияССубконто.СубконтоДт3,
	|	ФинансовыйДвиженияССубконто.СчетКт,
	|	ФинансовыйДвиженияССубконто.СубконтоКт1,
	|	ФинансовыйДвиженияССубконто.СубконтоКт2,
	|	ФинансовыйДвиженияССубконто.СубконтоКт3,
	|	ФинансовыйДвиженияССубконто.Сумма,
	|	ФинансовыйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ФинансовыйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ФинансовыйДвиженияССубконто.КоличествоДт,
	|	ФинансовыйДвиженияССубконто.КоличествоКт,
	|	ФинансовыйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ФинансовыйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	//
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Операция_БухгалтерскаяСправка";

	// Выведем шапку документа.
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ШапкаДокумента.Параметры.НомерДокумента = Док.Номер;//ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	ИначеЕсли ИмяМакета = "БухгалтерскаяСправка" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БухгалтерскаяСправка", "Бухгалтерская справка");

КонецФункции

//+++АК Susk (Суслин К.В.) 2018.08.09 ИП-00019332
Процедура ДобавитьРегистрСведений(ИмяРегистра)
	
	Если ТаблицаРегистровСведений.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровСведений.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.09 ИП-00019332
Процедура ДобавитьРегистрНакопления(ИмяРегистра)
	
	Если ТаблицаРегистровНакопления.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровНакопления.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.Операция") Тогда
		Возврат;
	КонецЕсли;

	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Содержание    = ОбъектКопирования.Содержание;
	Ответственный = ОбъектКопирования.Ответственный;

	ДвиженияБУ = РегистрыБухгалтерии.Финансовый.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияБУ.Следующий() Цикл

		Проводка = Движения.Финансовый.Добавить();

		Проводка.СчетДт          = ДвиженияБУ.СчетДт;
		Проводка.СчетКт          = ДвиженияБУ.СчетКт;

		Для каждого Субконто Из ДвиженияБУ.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияБУ.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.ВалютнаяСуммаДт = ДвиженияБУ.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = ДвиженияБУ.ВалютнаяСуммаКт;
		Проводка.КоличествоДт    = ДвиженияБУ.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияБУ.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияБУ.НомерЖурнала;
		Проводка.Содержание      = ДвиженияБУ.Содержание;
		Проводка.Сумма           = ДвиженияБУ.Сумма;
 		Проводка.СуммаМСФО       = ДвиженияБУ.СуммаМСФО;

	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	//+++АК ZICD 12.01.2017 ИП-00014363
	Если АК_УчетМСФОПривилегированный.УчётВключён(ЭтотОбъект.Дата)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Организация""!");
		Возврат;
	КонецЕсли;
	//---АК
	
	//++++ АК AZAP 24.05.2017 ИП-00015804
	Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСписаниеБДЗвОперации, Ложь) Тогда	//НЕ РольДоступна("АК_СписаниеБДЗвОперации")
		
		//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00017500
		Если НовыйМеханизм Тогда
			ТЧДляПеребора = Проводки;
		Иначе
			ТЧДляПеребора = Движения.Финансовый;
		КонецЕсли;
		//---AK susk
		
		Для каждого Запись ИЗ ТЧДляПеребора Цикл
			Если ((Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("44")
						ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("44"))
					И (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
						ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
						ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
					И Запись.Сумма <> 0)
					И Запись.СчетДт.Родитель <> Запись.СчетКт.Родитель
				Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав для списания со счетов 60, 62, 76.1 или оприходования на 44 счета");
				Возврат;
			КонецЕсли;
			//++++ АК sils 14.07.2017 ИП-00015775
			Если ((Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
				        //+++АК Susk (Суслин К.В.) ИП-00016668						
						//ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
						ИЛИ (Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60") И Запись.СчетДт <> ПланыСчетов.Финансовый.РезервыПоПоставщикамИПодрядчикам)
						//---AK susk
						ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
					ИЛИ (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
						//+++АК Susk (Суслин К.В.) ИП-00016668						
						//ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
						ИЛИ (Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60") И Запись.СчетКт <> ПланыСчетов.Финансовый.РезервыПоПоставщикамИПодрядчикам)
						//---AK susk
						ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
					И Запись.Сумма <> 0)
				Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке("Операции по счетам 60, 62, 76.1 должны проводиться только с помощью документа ""Корректировка взаиморасчетов""!");
				Возврат;
			КонецЕсли;
			//---- АК sils	
		КонецЦикла;
	КонецЕсли;
	//---- АК AZAP	
	
	ЭтоНовыйДокумент = ЭтотОбъект.Ссылка.Пустая();

	Если ЭтоНовыйДокумент Тогда
		РанееУстановленнаяПометкаУдаления = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаОперацию", ЭтотОбъект.Ссылка); 
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	0 
		|ИЗ
		|	Документ.Операция КАК Операция
		|
		|ГДЕ
		|	(Операция.Ссылка = &СсылкаНаОперацию) И
		|	(Операция.ПометкаУдаления = Ложь)";

		Результат = Запрос.Выполнить();
		РанееУстановленнаяПометкаУдаления = Результат.Пустой();

	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХранилищеДополнительнойИнформации.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Ссылка
	|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.ЕстьВложения = (Выборка.Ссылка > 0);
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.08.09 ИП-00019332	 
	Если НЕ Отказ Тогда
		Для каждого НаборЗаписей Из Движения Цикл
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
			ЕстьОрганизация = ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
			ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
			
			Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			Если ЕстьОрганизация Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
			КонецЕсли;
			Если ЕстьПериод Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
			КонецЕсли;
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			
			// Актуализируем списки регистров
			ИмяРегистра = НаборЗаписей.Метаданные().Имя;
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				ДобавитьРегистрНакопления(ИмяРегистра);
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) Тогда
				ДобавитьРегистрСведений(ИмяРегистра);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("АдресТаблицаЗаполненияПроводок") Тогда
		СтандартнаяОбработка = Ложь;
		Таб = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТаблицаЗаполненияПроводок);
		Для Каждого СтрокаТаб Из Таб Цикл
			Движение = Движения.Финансовый.Добавить();
			Движение.Организация 		= СтрокаТаб.Организация;
			Движение.СтруктурнаяЕдиница = СтрокаТаб.СтруктурнаяЕдиница;
			Движение.СчетКт 			= СтрокаТаб.СчетКт;
			Движение.СубконтоКт[СтрокаТаб.ВидСубконтоКт1] = СтрокаТаб.СубконтоКт1;
			Движение.Сумма 				= СтрокаТаб.Сумма;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьСубконтоПоСчету(Движение, Стр)
	
	Для Инд = 1 По 3 Цикл
		Если Стр["СубконтоДт" + Инд] <> Неопределено Тогда
			Движение.СубконтоДт[Стр.СчетДт.ВидыСубконто[Инд-1].ВидСубконто] = Стр["СубконтоДт" + Инд];			
		КонецЕсли;
		Если Стр["СубконтоКт" + Инд] <> Неопределено Тогда
			Движение.СубконтоКт[Стр.СчетКт.ВидыСубконто[Инд-1].ВидСубконто] = Стр["СубконтоКт" + Инд];			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00017500
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйМеханизм Тогда
		Движ = Движения.Финансовый;
		Движ.Прочитать();
		Движ.Очистить();
	
		Для Каждого Стр Из Проводки Цикл
			Если ЗначениеЗаполнено(Стр.СчетДт) ИЛИ ЗначениеЗаполнено(Стр.СчетКт) Тогда
				НовДвиж = Движ.Добавить();
				ЗаполнитьЗначенияСвойств(НовДвиж, Стр);					
				ДобавитьСубконтоПоСчету(НовДвиж, Стр);		
				НовДвиж.Организация = Организация;
				НовДвиж.Период = Дата;
				НовДвиж.Активность = Стр.Активность;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	//
	ЭтоНовыйДокумент = ЭтотОбъект.Ссылка.Пустая();
	
	Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактировать41ВБухОперации, Ложь) = Ложь
			И ЭтотОбъект.ПометкаУдаления = Ложь Тогда
			
		ПроводкиДокумента = Движения.Финансовый;

		Если (НЕ ПроводкиДокумента.Модифицированность()) И 
				(НЕ ПроводкиДокумента.Выбран()) И
				(НЕ ЭтоНовыйДокумент) Тогда

			ПроводкиДокумента.Прочитать();

		КонецЕсли;

		КоличествоПроводок = ПроводкиДокумента.Количество();

		Если КоличествоПроводок > 0
				И ПроводкиДокумента[0].Активность = Истина Тогда

			Счет411 = ПланыСчетов.Финансовый.Товары;
			Счет412 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
			ВремТаблица = ПроводкиДокумента.Выгрузить(, "СчетДт, СчетКт");
			Если НЕ (ВремТаблица.Найти(Счет411, "СчетДт") = Неопределено
					И ВремТаблица.Найти(Счет411, "СчетКт") = Неопределено
					И ВремТаблица.Найти(Счет412, "СчетДт") = Неопределено
					И ВремТаблица.Найти(Счет412, "СчетКт") = Неопределено) Тогда
				Сообщить("Нет прав на проведение документа (счет 41). Проводки будут неактивны.");
				ПроводкиДокумента.УстановитьАктивность(Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
	//+++АК SaMi 17.05.2017. 
	// Установим активность для упр. регистра по взаиморасчетам 
	ПроводкиДокумента = Движения.Финансовый;

	Если (НЕ ПроводкиДокумента.Модифицированность()) И 
			(НЕ ПроводкиДокумента.Выбран()) И
			(НЕ ЭтоНовыйДокумент) Тогда
		ПроводкиДокумента.Прочитать();
	КонецЕсли;
	
	Если (НЕ Движения.РасчетыСКонтрагентами.Модифицированность()) И 
			(НЕ Движения.РасчетыСКонтрагентами.Выбран()) И
			(НЕ ЭтоНовыйДокумент) Тогда
		Движения.РасчетыСКонтрагентами.Прочитать();
	КонецЕсли;
	
	Если Движения.РасчетыСКонтрагентами.Количество()>0 И ПроводкиДокумента.Количество()>0 Тогда
		НужнаяАктивность = ПроводкиДокумента[0].Активность;
		ТекущаяАктивность = Движения.РасчетыСКонтрагентами[0].Активность;;

		Если ТекущаяАктивность <> НужнаяАктивность Тогда
			Движения.РасчетыСКонтрагентами.УстановитьАктивность(НужнаяАктивность);
		КонецЕсли;
		
	КонецЕсли; 
	//---АК SaMi  17.05.2017 
	
	Если ПометкаУдаления <> РанееУстановленнаяПометкаУдаления Тогда

		Для Каждого ПроводкиДокумента Из Движения Цикл
			
			//ПроводкиДокумента = Движения.Финансовый;		
			
			Если (НЕ ПроводкиДокумента.Модифицированность()) И 
				(НЕ ПроводкиДокумента.Выбран()) И
				(НЕ ЭтоНовыйДокумент) Тогда
				
				ПроводкиДокумента.Прочитать();
				
			КонецЕсли;
			
			КоличествоПроводок = ПроводкиДокумента.Количество();
			
			Если КоличествоПроводок > 0 Тогда
				
				// Определяем текущую активность проводок по первой проводке
				ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
				НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;
				
				Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
					ПроводкиДокумента.УстановитьАктивность(НужнаяАктивностьПроводок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Движения.Финансовый.Записать();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00017500
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ НеВыгружатьВБухгалтерию И НовыйМеханизм И Не ЗначениеЗаполнено(ВидОперации) Тогда
		ПроверяемыеРеквизиты.Добавить("Проводки.СчетДтБух");
		ПроверяемыеРеквизиты.Добавить("Проводки.СчетКтБух");		
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00017500
Процедура ПерезаполнитьРасчетыСКонтрагентамиОбъект() Экспорт
	
	СчетаДляУчетаНаРегистреРасчетовСКонтрагентами = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаДляУчетаНаРегистреРасчетовСКонтрагентами();
	
	ТаблицаДвижений = Движения.Финансовый.Выгрузить();
	УдаляемыеДвижения = Новый Массив;
	
	Для Каждого Строка Из Движения.РасчетыСКонтрагентами Цикл
		НС1 = ТаблицаДвижений.НайтиСтроки(Новый Структура("СубконтоДт1, СубконтоДт2, СчетДт", Строка.Организация, Строка.Контрагент, Строка.СчетУчета));		
		НС2 = ТаблицаДвижений.НайтиСтроки(Новый Структура("СубконтоКт1, СубконтоКт2, СчетКт", Строка.Организация, Строка.Контрагент, Строка.СчетУчета));		
		
		Если НС1.Количество() = 0 И НС2.Количество() = 0 Тогда
			УдаляемыеДвижения.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла;  
	
	Для Каждого Движение ИЗ УдаляемыеДвижения Цикл
		Движения.РасчетыСКонтрагентами.Удалить(Движение);
	КонецЦикла;  
	
	// 
	ТаблицаКопия = Движения.РасчетыСКонтрагентами.ВыгрузитьКолонки();
	
	Для Каждого Строка Из Проводки Цикл
		Если НЕ Строка.Активность Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Строка.СчетДт) <> Неопределено Тогда                                                                            
			НоваяСтрока = ТаблицаКопия.Добавить();
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Организация = Строка.СубконтоДт1;
			НоваяСтрока.Контрагент = Строка.СубконтоДт2;
			НоваяСтрока.СчетУчета = Строка.СчетДт;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЕсли;		
			
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Строка.СчетКт) <> Неопределено Тогда                                                                            
			НоваяСтрока = ТаблицаКопия.Добавить();
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Организация = Строка.СубконтоКт1;
			НоваяСтрока.Контрагент = Строка.СубконтоКт2;
			НоваяСтрока.СчетУчета = Строка.СчетКт;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЕсли;		
	КонецЦикла;
	
	ТаблицаКопия.Свернуть("ВидДвижения, Организация, Контрагент, СчетУчета", "Сумма");
	ТаблицаДвижений = Движения.РасчетыСКонтрагентами.Выгрузить();
	
	Для Каждого Строка ИЗ ТаблицаКопия Цикл
		СтруктураОтбора = Новый Структура("ВидДвижения, Организация, Контрагент, СчетУчета");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		
		НС = ТаблицаДвижений.НайтиСтроки(СтруктураОтбора);		
		
		Если НС.Количество() = 0 Тогда
			НоваяЗапись = Движения.РасчетыСКонтрагентами.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Период = Дата;
		ИначеЕсли НС.Количество() = 1 Тогда
			Движения.РасчетыСКонтрагентами[ТаблицаДвижений.Индекс(НС[0])].Сумма = Строка.Сумма;
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры 