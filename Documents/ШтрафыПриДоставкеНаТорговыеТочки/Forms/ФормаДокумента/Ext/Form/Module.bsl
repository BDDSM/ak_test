
&НаСервереБезКонтекста
Функция ПолучитьСуммуШтрафаСклад(мДатаДоставки, мТорговаяТочка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДоставки"	, мДатаДоставки);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	
	Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СУММА(ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(КоличествоВКоробке.Количество, 0) = 0
	//|				ТОГДА ОстаткиРаспределенныеПоТТ.Количество / ЕСТЬNULL(КоличествоВКоробке.Количество, 0)
	//|			ИНАЧЕ 0
	//|		КОНЕЦ * ЕСТЬNULL(Ставки.Ставка, 0)) * 0.5 КАК Сумма
	//|ИЗ
	//|	РегистрСведений.ОстаткиРаспределенныеПоТТ КАК ОстаткиРаспределенныеПоТТ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаДоставки, ) КАК КоличествоВКоробке
	//|		ПО (КоличествоВКоробке.СтруктурнаяЕдиница = ОстаткиРаспределенныеПоТТ.Расчетчик.Склад)
	//|			И (КоличествоВКоробке.Номенклатура = ОстаткиРаспределенныеПоТТ.Номенклатура)
	//|			И (КоличествоВКоробке.Характеристика = ОстаткиРаспределенныеПоТТ.Характеристика)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЗаОбработкуКоробокНаСкладе.СрезПоследних(&ДатаДоставки, ) КАК Ставки
	//|		ПО (Ставки.Склад = ОстаткиРаспределенныеПоТТ.Расчетчик.Склад)
	//|ГДЕ
	//|	ОстаткиРаспределенныеПоТТ.Дата = &ДатаДоставки
	//|	И ОстаткиРаспределенныеПоТТ.ТорговаяТочка = &ТорговаяТочка";
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(КоличествоВКоробке.Количество, 0) = 0
	|				ТОГДА РасходныйОрдерСкладТовары.КоличествоУРЗ / ЕСТЬNULL(КоличествоВКоробке.Количество, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ * ЕСТЬNULL(Ставки.Ставка, 0)) * 0.5 КАК Сумма
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ПО (РасходныйОрдерСклад.Ссылка = РасходныйОрдерСкладТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаДоставки, ) КАК КоличествоВКоробке
	|		ПО (КоличествоВКоробке.СтруктурнаяЕдиница = РасходныйОрдерСклад.Склад.Владелец)
	|			И (КоличествоВКоробке.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|			И (КоличествоВКоробке.Характеристика = РасходныйОрдерСкладТовары.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЗаОбработкуКоробокНаСкладе.СрезПоследних(&ДатаДоставки, ) КАК Ставки
	|		ПО (Ставки.Склад = РасходныйОрдерСклад.Склад.Владелец)
	|ГДЕ
	|	РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И ВЫБОР
	|			КОГДА НЕ РасходныйОрдерСклад.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходныйОрдерСклад.ДатаРаспределения
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.Дата, ДЕНЬ)
	|		КОНЕЦ = &ДатаДоставки
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|	И РасходныйОрдерСклад.Получатель = &ТорговаяТочка
	|	И РасходныйОрдерСклад.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруШтрафаНеСклад(мДатаДоставки, мТорговаяТочка)
	
	СпрСтруктурныеЕдиницы 	= Справочники.СтруктурныеЕдиницы;
	СпрКонтрагенты 			= Справочники.Контрагенты;
	
	СтруктураШтрафа = Новый Структура;
	СтруктураШтрафа.Вставить("ЦФО"			, СпрСтруктурныеЕдиницы.ПустаяСсылка());
	СтруктураШтрафа.Вставить("Перевозчик"	, СпрКонтрагенты.ПустаяСсылка());
	СтруктураШтрафа.Вставить("Сумма"		, 0);
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса = ДопМодульСервер.ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговуюТочку(мДатаДоставки, мТорговаяТочка);
	
	Попытка
		Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		Сообщить("Не удалось выполнить запрос к SQL!" + Символы.ПС + ИнформацияОбОшибке().Описание);
		Возврат СтруктураШтрафа;
	КонецПопытки;
	
	//
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				Если НЕ Выборка.Fields("UIN_CFO").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_CFO").Value);
					СтруктураШтрафа.ЦФО 		= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				
				ТекИДПеревозчика = Выборка.Fields("id_kontr").Value;
				Если ЗначениеЗаполнено(ТекИДПеревозчика) Тогда
					СтруктураШтрафа.Перевозчик 	= СпрКонтрагенты.НайтиПоРеквизиту("ИД", ТекИДПеревозчика);
				КонецЕсли;
				СтруктураШтрафа.Сумма			= Выборка.Fields("Summa").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();		
	
	Возврат СтруктураШтрафа;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// значения "по умолчанию"
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата 		= ТекущаяДата();
		Объект.Автор 		= ПараметрыСеанса.ТекущийПользователь;
		Объект.Организация 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Объект.ДатаДоставки = НачалоДня(ТекущаяДата()) - 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(Объект.Ссылка.ПолучитьОбъект(), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьШтрафыСервер()
	
	//ОбъектДок = РеквизитФормыВЗначение("Объект");
	ТЧТорговыеТочки = Объект.ТорговыеТочки;
	Если ТЧТорговыеТочки.Количество() > 0 Тогда
		ТЧТорговыеТочки.Очистить();
	КонецЕсли;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса = ДопМодульСервер.ПолучитьТекстЗапросаШтрафыПриДоставкеНаТорговыеТочки(Объект.ДатаДоставки);
	
	Попытка
		Выборка = ADOСоединение.Execute(ТекстЗапроса);
	Исключение
		Сообщить("Не удалось выполнить запрос к SQL!" + Символы.ПС + ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	//
	ТекПричинаШтрафа 		= Перечисления.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ;
	СпрСтруктурныеЕдиницы 	= Справочники.СтруктурныеЕдиницы;
	СпрКонтрагенты 			= Справочники.Контрагенты;
	
	
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = ТЧТорговыеТочки.Добавить();
				Если НЕ Выборка.Fields("UIN_CFO").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_CFO").Value);
					НоваяСтрока.ЦФО 			= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				Если НЕ Выборка.Fields("UIN_TT").Value = NULL Тогда
					мУникальныйИД = Новый УникальныйИдентификатор(Выборка.Fields("UIN_TT").Value);
					НоваяСтрока.ТорговаяТочка 	= СпрСтруктурныеЕдиницы.ПолучитьСсылку(мУникальныйИД);
				КонецЕсли;
				
				НоваяСтрока.ВремяДоставки 	= Выборка.Fields("Vremya").Value;
				НоваяСтрока.ПричинаШтрафа 	= ТекПричинаШтрафа;
				НоваяСтрока.ДанныеИзТранспортнойСистемы = Выборка.Fields("IsTransport").Value;
				ТекИДПеревозчика = Выборка.Fields("id_kontr").Value;
				Если ЗначениеЗаполнено(ТекИДПеревозчика) Тогда
					НоваяСтрока.Перевозчик 	= СпрКонтрагенты.НайтиПоРеквизиту("ИД", ТекИДПеревозчика);
				КонецЕсли;
				НоваяСтрока.Сумма			= Выборка.Fields("Summa").Value;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();		
	
	//ЗначениеВРеквизитФормы(ОбъектДок, "Объект");
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаНачала"		, Объект.ДатаДоставки);
	//Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(Объект.ДатаДоставки));
	//Запрос.УстановитьПараметр("ГруппаДоставки"	, Объект.ГруппаДоставкиНоменклатуры);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЛистУчета.Дата,
	//|	ЛистУчета.ТорговаяТочка,
	//|	ЛистУчета.ТорговаяТочка.id_TT КАК id_TT,
	//|	ЛистУчета.ЦФО,
	//|	ЛистУчета.ВремяДоставки КАК ВремяДоставки
	//|ПОМЕСТИТЬ ВТОсновная
	//|ИЗ
	//|	Документ.ЛистУчета КАК ЛистУчета
	//|ГДЕ
	//|	ЛистУчета.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|	И НЕ ЛистУчета.ВремяДоставки = ДАТАВРЕМЯ(1, 1, 1)
	//|	И (ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Избенка)
	//|				И (ЧАС(ЛистУчета.ВремяДоставки) > 10
	//|					ИЛИ ЧАС(ЛистУчета.ВремяДоставки) = 10
	//|						И МИНУТА(ЛистУчета.ВремяДоставки) > 30)
	//|			ИЛИ ЛистУчета.ТорговаяТочка.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин)
	//|				И (ЧАС(ЛистУчета.ВремяДоставки) > 8
	//|					ИЛИ ЧАС(ЛистУчета.ВремяДоставки) = 8
	//|						И МИНУТА(ЛистУчета.ВремяДоставки) > 30))
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Период КАК Период,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Контрагент КАК Контрагент,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ КАК ТТ,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Ставка
	//|ПОМЕСТИТЬ ВТСтавки
	//|ИЗ
	//|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(
	//|			&ДатаНачала,
	//|			ГруппаДоставкиНоменклатуры = &ГруппаДоставки
	//|				И ТТ В
	//|					(ВЫБРАТЬ
	//|						ВТОсновная.ТорговаяТочка
	//|					ИЗ
	//|						ВТОсновная)) КАК СтоимостьУслугПоДоставкеТовараНаТТ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Период,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Контрагент,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ,
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Ставка
	//|ИЗ
	//|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ КАК СтоимостьУслугПоДоставкеТовараНаТТ
	//|ГДЕ
	//|	СтоимостьУслугПоДоставкеТовараНаТТ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|	И СтоимостьУслугПоДоставкеТовараНаТТ.ГруппаДоставкиНоменклатуры = &ГруппаДоставки
	//|	И СтоимостьУслугПоДоставкеТовараНаТТ.ТТ В
	//|			(ВЫБРАТЬ
	//|				ВТОсновная.ТорговаяТочка
	//|			ИЗ
	//|				ВТОсновная)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ТТ,
	//|	Период
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТСтавки.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодСтавки,
	//|	ВТОсновная.ТорговаяТочка,
	//|	ВТОсновная.id_TT,
	//|	ВТОсновная.ЦФО,
	//|	ВТОсновная.ВремяДоставки КАК ВремяДоставки,
	//|	ЕСТЬNULL(ВТСтавки.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Перевозчик,
	//|	ЕСТЬNULL(ВТСтавки.Ставка, 0) * 0.5 КАК Сумма
	//|ПОМЕСТИТЬ ВТПромежуточная
	//|ИЗ
	//|	ВТОсновная КАК ВТОсновная
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавки КАК ВТСтавки
	//|		ПО (ВТСтавки.ТТ = ВТОсновная.ТорговаяТочка)
	//|			И (НЕ ВТСтавки.Период > ВТОсновная.Дата)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ПериодСтавки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТПромежуточная.ТорговаяТочка КАК ТорговаяТочка,
	//|	МАКСИМУМ(ВТПромежуточная.ПериодСтавки) КАК ПериодСтавки
	//|ПОМЕСТИТЬ ВТСвернутая
	//|ИЗ
	//|	ВТПромежуточная КАК ВТПромежуточная
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТПромежуточная.ТорговаяТочка
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ТорговаяТочка,
	//|	ПериодСтавки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТПромежуточная.ТорговаяТочка,
	//|	ВТПромежуточная.id_TT,
	//|	ВТПромежуточная.ЦФО,
	//|	ВТПромежуточная.ВремяДоставки КАК ВремяДоставки,
	//|	ЗНАЧЕНИЕ(Перечисление.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ) КАК ПричинаШтрафа,
	//|	ВТПромежуточная.Перевозчик КАК Перевозчик,
	//|	ВТПромежуточная.Сумма КАК Сумма
	//|ИЗ
	//|	ВТПромежуточная КАК ВТПромежуточная
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвернутая КАК ВТСвернутая
	//|		ПО (ВТСвернутая.ТорговаяТочка = ВТПромежуточная.ТорговаяТочка)
	//|			И (ВТСвернутая.ПериодСтавки = ВТПромежуточная.ПериодСтавки)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТПромежуточная.id_TT,
	//|	ВТПромежуточная.ВремяДоставки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТОсновная
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТСтавки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТПромежуточная
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТСвернутая";
	//
	//Объект.ТорговыеТочки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШтрафы(Команда)
	
	//Если Объект.ГруппаДоставкиНоменклатуры.Пустая() Тогда
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Не заполнена группа доставки товара!";
	//	СообщениеПользователю.Поле	= Объект.ГруппаДоставкиНоменклатуры;
	//	СообщениеПользователю.Сообщить();
	//	Возврат;
	//КонецЕсли;
	
	
	ЗаполнитьШтрафыСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ТорговыеТочкиПричинаШтрафаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	
	Если ТекДанные.ПричинаШтрафа = ПредопределенноеЗначение("Перечисление.ПричиныШтрафовПриДоставкеНаТочки.Склад") Тогда
		ТекДанные.Перевозчик 	= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");	
		ТекДанные.Сумма 		= ПолучитьСуммуШтрафаСклад(Объект.ДатаДоставки, ТекДанные.ТорговаяТочка);
	ИначеЕсли ТекДанные.ПричинаШтрафа = ПредопределенноеЗначение("Перечисление.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ") Тогда
		СтруктураШтрафа = ПолучитьСтруктуруШтрафаНеСклад(Объект.ДатаДоставки, ТекДанные.ТорговаяТочка);
		Если ТекДанные.ЦФО.Пустая() Тогда
			ТекДанные.ЦФО 		= СтруктураШтрафа.ЦФО;
		КонецЕсли;
		ТекДанные.Перевозчик	= СтруктураШтрафа.Перевозчик;
		ТекДанные.Сумма 		= СтруктураШтрафа.Сумма;
	Иначе
		ТекДанные.Перевозчик 	= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");	
		ТекДанные.Сумма 		= 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиПеревозчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	
	СтандартнаяОбработка = (ТекДанные.ПричинаШтрафа = ПредопределенноеЗначение("Перечисление.ПричиныШтрафовПриДоставкеНаТочки.ДоставкаНаТТ"));
	
КонецПроцедуры
