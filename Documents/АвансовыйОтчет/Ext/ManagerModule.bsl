
Функция ПолучитьСпецификации(Период, МассивНоменклатуры, Контрагент) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СпецификацииПоставщиковСрезПоследних.Номенклатура,
	|	СпецификацииПоставщиковСрезПоследних.Спецификация
	|ИЗ
	|	РегистрСведений.СпецификацииПоставщиков.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И Поставщик = &Поставщик) КАК СпецификацииПоставщиковСрезПоследних");
	Запрос.УстановитьПараметр("МассивНоменклатуры"	, МассивНоменклатуры);
	Запрос.УстановитьПараметр("Поставщик"			, Контрагент);
	Запрос.УстановитьПараметр("Период"				, Период);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьДвиженияПоСебестоимостиСырьяИУпаковки(Движения, Знач СсылкаНаОбъект, Знач СтрокаТЧ, ТаблицаСпецификаций) Экспорт
	
	НайденнаяСтрока = ТаблицаСпецификаций.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Спецификация = НайденнаяСтрока.Спецификация;
		
		СоставСпецификации = Спецификация.Состав;
		
		ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(СоставСпецификации.ВыгрузитьКолонку("Номенклатура"), СсылкаНаОбъект.Дата);
		СчетТовары = ПланыСчетов.Финансовый.Товары;
		СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		
		//+++АК SHEP 2018.05.03 ИП-00018453
		СтруктурныеЕдиницыСторонняяПереработка = ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(СсылкаНаОбъект.Организация);
		СкладПереработчика = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(СсылкаНаОбъект.Контрагент, СсылкаНаОбъект.Организация);
		//---АК SHEP 2018.05.03
		
		Для Каждого СоставляющаяПродукции Из СоставСпецификации Цикл
			
			Если СоставляющаяПродукции.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
				СтруктураНастроек = РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(СсылкаНаОбъект.Дата, Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.СписаниеСебестоимостиУпаковки));
			Иначе
				СтруктураНастроек = РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(СсылкаНаОбъект.Дата, Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.СписаниеСебестоимостиСырья));
			КонецЕсли;
			
			Проводка = Движения.Финансовый.Добавить();
			
			Проводка.Период = СсылкаНаОбъект.Дата;
			
			// Дт
			Проводка.СчетДт 							= СтрокаТЧ.СчетУчета;
			Проводка.СубконтоДт.МестаХранения  			= СсылкаНаОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров41;//СтруктураНастроек.СтатьяДвиженияТоваров;
			
			// Кт
			СтрокаСчетУчета = ТабСчетаУчета.Найти(СоставляющаяПродукции.Номенклатура, "Номенклатура");
			Если СтрокаСчетУчета <> Неопределено
				И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
				Проводка.СчетКт 							= СтрокаСчетУчета.СчетУчета;
				Если СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
					Проводка.СубконтоКт.Материалы	  			= СоставляющаяПродукции.Номенклатура;
					//+++АК SHEP 2018.05.03 ИП-00018453
					//Проводка.СубконтоКт.Склады					= Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(СсылкаНаОбъект.Контрагент);
					Проводка.СубконтоКт.Склады					= СкладПереработчика;
					//---АК SHEP 2018.05.03
					Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Проводка.Содержание							= "Себестоимость упаковки";
				ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
					//+++АК SHEP 2018.05.03 ИП-00018453
					//Проводка.СубконтоКт.МестаХранения  			= Справочники.СтруктурныеЕдиницы.СторонняяПереработка;//СсылкаНаОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоКт.МестаХранения  			= СтруктурныеЕдиницыСторонняяПереработка;
					//---АК SHEP 2018.05.03
					Проводка.СубконтоКт.Товары					= СоставляющаяПродукции.Номенклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Проводка.Содержание							= "Себестоимость сырья";
				Иначе
					Проводка.СубконтоКт.Материалы	  			= СоставляющаяПродукции.Номенклатура;
					Проводка.Содержание							= "Себестоимость сырья";
				КонецЕсли;
			Иначе	
				Если СоставляющаяПродукции.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					Проводка.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
					Проводка.СубконтоКт.Материалы	  			= СоставляющаяПродукции.Номенклатура;
					//+++АК SHEP 2018.05.03 ИП-00018453
					//Проводка.СубконтоКт.Склады					= Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(СсылкаНаОбъект.Контрагент);
					Проводка.СубконтоКт.Склады					= СкладПереработчика;
					//---АК SHEP 2018.05.03
					Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Проводка.Содержание							= "Себестоимость упаковки";
				Иначе
					Проводка.СчетКт 							= СтрокаТЧ.СчетУчета;
					//+++АК SHEP 2018.05.03 ИП-00018453
					//Проводка.СубконтоКт.МестаХранения  			= Справочники.СтруктурныеЕдиницы.СторонняяПереработка;//СсылкаНаОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоКт.МестаХранения  			= СтруктурныеЕдиницыСторонняяПереработка;
					//---АК SHEP 2018.05.03
					Проводка.СубконтоКт.Товары					= СоставляющаяПродукции.Номенклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Проводка.Содержание							= "Себестоимость сырья";
				КонецЕсли;
			КонецЕсли;	

			КоэффициентПересчета 	= СоставляющаяПродукции.ЕдиницаИзмерения.Коэффициент;
			Проводка.КоличествоКт 	= СтрокаТЧ.Количество * СоставляющаяПродукции.Количество * КоэффициентПересчета;
			
			Проводка.НомерЖурнала	= "ТД";
			//Проводка.Организация 	= СсылкаНаОбъект.Организация;
			Проводка.Сумма 			= Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СоставляющаяПродукции.Номенклатура, , СсылкаНаОбъект.Дата);
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(Знач СтрокаТЧ, ВариантРасчетаНДС, Контрагент, Дата) Экспорт
	
	//Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура"		, СтрокаТЧ.Номенклатура);
	//Отбор.Вставить("ЕдиницаИзмерения"	, СтрокаТЧ.ЕдиницаИзмерения);
	//Отбор.Вставить("Поставщик"			, Контрагент);
	//
	//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(Дата, Отбор);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик"		, Контрагент);
	Запрос.УстановитьПараметр("ДатаСреза"		, Дата);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	0 КАК ЦенаБезНДС,
	|	ЦеныПоставщиковСрезПоследних.Допуск
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураЦены = РезультатЗапроса.Выбрать();
		СтруктураЦены.Следующий();
	Иначе
		СтруктураЦены = Новый Структура("Цена, ЦенаБезНДС, Допуск", 0, 0, 0);
	КонецЕсли;
	
	
	ПроцентОтклонения = СтруктураЦены.Допуск;
	
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		Цена = СтруктураЦены.Цена;
	Иначе		
		Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			ЦенаБезНДС = (СтруктураЦены.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС))) * 100;
			Цена = ЦенаБезНДС;
		Иначе
			Цена = СтруктураЦены.ЦенаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПределов = Новый Структура;
	СтруктураПределов.Вставить("СуммаМаксимум"	, ?(ПроцентОтклонения > 0, Цена*СтрокаТЧ.Количество*(1 + ПроцентОтклонения), (Цена + 0.01)*СтрокаТЧ.Количество));
	СтруктураПределов.Вставить("СуммаМинимум"	, ?(ПроцентОтклонения > 0, Цена*СтрокаТЧ.Количество*(1 - ПроцентОтклонения), (Цена - 0.01)*СтрокаТЧ.Количество));
	
	// НДС
	УчитыватьНДС 		= Истина;
	СуммаВключаетНДС 	= (ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Цена * СтрокаТЧ.Количество,
										  УчитыватьНДС, СуммаВключаетНДС,
										  УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	
	СтруктураПределов.Вставить("СуммаНДСМаксимум"	, ?(ПроцентОтклонения > 0, СуммаНДС*(1 + ПроцентОтклонения), СуммаНДС + СтрокаТЧ.Количество * 0.01));
	СтруктураПределов.Вставить("СуммаНДСМинимум"	, ?(ПроцентОтклонения > 0, СуммаНДС*(1 - ПроцентОтклонения), СуммаНДС - СтрокаТЧ.Количество * 0.01));
	
	Возврат СтруктураПределов;
	
КонецФункции

Функция РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧПоОборудованию(Знач СтрокаТЧ, ВариантРасчетаНДС, Контрагент, Дата) Экспорт
	
	//Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура"	, СтрокаТЧ.Номенклатура);	
	//Отбор.Вставить("Поставщик"		, Контрагент);
	//
	//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(Дата, Отбор);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик"	, Контрагент);
	Запрос.УстановитьПараметр("ДатаСреза"	, Дата);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	0 КАК ЦенаБезНДС,
	|	ЦеныПоставщиковСрезПоследних.Допуск
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураЦены = РезультатЗапроса.Выбрать();
		СтруктураЦены.Следующий();
	Иначе
		СтруктураЦены = Новый Структура("Цена, ЦенаБезНДС, Допуск", 0, 0, 0);
	КонецЕсли;
	
	
	ПроцентОтклонения = СтруктураЦены.Допуск;
	
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		Цена = СтруктураЦены.Цена;
	Иначе		
		Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			ЦенаБезНДС = (СтруктураЦены.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС))) * 100;
			Цена = ЦенаБезНДС;
		Иначе
			Цена = СтруктураЦены.ЦенаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПределов = Новый Структура;
	СтруктураПределов.Вставить("СуммаМаксимум"	, ?(ПроцентОтклонения > 0, Цена*(1 + ПроцентОтклонения), (Цена + 0.01)));
	СтруктураПределов.Вставить("СуммаМинимум"	, ?(ПроцентОтклонения > 0, Цена*(1 - ПроцентОтклонения), (Цена - 0.01)));
	
	// НДС
	УчитыватьНДС 		= Истина;
	СуммаВключаетНДС 	= (ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Цена,
										  УчитыватьНДС, СуммаВключаетНДС,
										  УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	
	СтруктураПределов.Вставить("СуммаНДСМаксимум"	, ?(ПроцентОтклонения > 0, СуммаНДС*(1 + ПроцентОтклонения), СуммаНДС + 0.01));
	СтруктураПределов.Вставить("СуммаНДСМинимум"	, ?(ПроцентОтклонения > 0, СуммаНДС*(1 - ПроцентОтклонения), СуммаНДС - 0.01));
	
	Возврат СтруктураПределов;
	
КонецФункции


Функция НайтиПоступлениеПоПриходнику(ПриходныйОрдер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугРасходныеОрдера.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугРасходныеОрдера
	|ГДЕ
	|	ПоступлениеТоваровУслугРасходныеОрдера.ПриходныйОрдер = &ПриходныйОрдер
	|	И НЕ ПоступлениеТоваровУслугРасходныеОрдера.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ПриходныйОрдер", ПриходныйОрдер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции