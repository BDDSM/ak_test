
Процедура ПроверитьИСместитьГраницу()
	
	//ТекГраница = Последовательности.Себестоимость.ПолучитьГраницу();
	//Если ТипЗнч(ТекГраница) = Тип("МоментВремени") Тогда
	//	Если ТекГраница.Сравнить(МоментВремени()) = 1 Тогда
	//		Последовательности.Себестоимость.УстановитьГраницу(МоментВремени());
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры	

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, мВариантРасчета) Экспорт
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = (мВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура ПосчитатьСуммуТабличнойЧасти() Экспорт
	
	//Название не совсем адекватно, это расчет суммы документа
	СуммаДок = ЭтотОбъект.Товары.Итог("Сумма") + ЭтотОбъект.Услуги.Итог("Сумма") + ЭтотОбъект.ОплатаПоставщикам.Итог("Сумма");
	Если НЕ ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		СуммаДок = СуммаДок + ЭтотОбъект.Товары.Итог("СуммаНДС") + ЭтотОбъект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	ЭтотОбъект.СуммаДокумента = СуммаДок;
	
Конецпроцедуры

Процедура ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ) Экспорт
	
	//Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура"		, СтрокаТЧ.Номенклатура);
	//Отбор.Вставить("ЕдиницаИзмерения"	, СтрокаТЧ.ЕдиницаИзмерения);
	//Отбор.Вставить("Поставщик"			, Контрагент);
	//
	//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(?(Дата = Дата(1, 1, 1), НачалоДня(ТекущаяДата()), Дата), Отбор);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик"		, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДатаСреза"		, ?(ЗначениеЗаполнено(ЭтотОбъект.Дата), ЭтотОбъект.Дата, НачалоДня(ТекущаяДата())));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	0 КАК ЦенаБезНДС
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	СтруктураЦены = РезультатЗапроса.Выбрать();
	СтруктураЦены.Следующий();
	
	//
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		СтрокаТЧ.Цена = СтруктураЦены.Цена;
	Иначе		
		
		Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			
			ЦенаБезНДС = (СтруктураЦены.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС))) * 100;
			
			СтрокаТЧ.Цена = ЦенаБезНДС;
			
		Иначе
			СтрокаТЧ.Цена = СтруктураЦены.ЦенаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
	
КонецПроцедуры

Функция ПолучитьБазовуюЕдиницуИзмерения(мНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, мНоменклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьСчетУчетаПоДокументуРасходИзБанка(ЗаявкаНаРасходованиеСредств)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств");
	
	Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ЗаявкаНаРасходованиеСредств);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.СчетУчета;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтатьюДДСОсновногоСредства(мОсновноеСредство)
	
	// остатки по счету 08
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ОсновноеСредство", мОсновноеСредство);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФинансовыйОстатки.Субконто1 КАК СтатьяДДС,
	|	ФинансовыйОстатки.Субконто2 КАК ОсновноеСредство
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство) КАК ФинансовыйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьяДДС УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.СтатьяДДС, Неопределено);

КонецФункции

Функция Оборудование_УжеСписано(мОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков"	, ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйОбороты.Субконто2
	|ПОМЕСТИТЬ ВТОбороты
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(, &ДатаОстатков, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство, , ) КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.СуммаОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОстатки.Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство) КАК ФинансовыйОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбороты КАК ВТОбороты
	|		ПО (ВТОбороты.Субконто2 = ФинансовыйОстатки.Субконто2)
	|ГДЕ
	|	ФинансовыйОстатки.СуммаОстаток = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ОтразитьДвиженияПоТоварамНеОблагающимсяНДС(СуммаПроводки, СтрокаТЧ)
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтражениеНДСПоТоварамБезНДС, Дата, Организация);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		//ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		пСумма = (СуммаПроводки * ОбщегоНазначенияСервер.ПолучитьСтавкуНДСПриОтгрузкеБезНДС(ЭтотОбъект.Дата))/100;
		Если пСумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроводкаНДС = Движения.Финансовый.Добавить();
		
		ПроводкаНДС.Период 			= ЭтотОбъект.Дата;
		//ПроводкаНДС.Организация 	= ЭтотОбъект.Организация;
		ПроводкаНДС.Сумма 			= пСумма;
		ПроводкаНДС.Содержание		= "НДС";
		
		// Дт 41.1 или 41.2
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			ПроводкаНДС.СчетДт 							= ПланыСчетов.Финансовый.Товары;
			ПроводкаНДС.СубконтоДт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
			ПроводкаНДС.СубконтоДт.Товары				= СтрокаТЧ.Номенклатура;
			ПроводкаНДС.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров41;
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			ПроводкаНДС.СчетДт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
			ПроводкаНДС.СубконтоДт.Склады		 		= ЭтотОбъект.Склад;
			ПроводкаНДС.СубконтоДт.Материалы			= СтрокаТЧ.Номенклатура;
			ПроводкаНДС.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров41;
		КонецЕсли;
		
		// Кт 44.3
		Если СтруктураНастроек.Счет = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения Тогда 
			ПроводкаНДС.СчетКт 							 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
			ПроводкаНДС.СубконтоКт.ТорговыеТочки 		 = СтруктураНастроек.СтруктурнаяЕдиница;
			ПроводкаНДС.СубконтоКт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
			ПроводкаНДС.СубконтоКт.ЦФО 					 = СтруктураНастроек.ЦФО;
		КонецЕсли;
		
		//// Дт
		//ПроводкаНДС.СчетДт 					= ПланыСчетов.Финансовый.НалогиУН;
		//ПроводкаНДС.СубконтоДт.Организации 	= Организация;
		//ПроводкаНДС.СубконтоДт.ВидыНалогов 	= Справочники.ВидыНалогов.НайтиПоКоду("000000001");
		//
		//// Кт
		//ПроводкаНДС.СчетКт 							= СтруктураНастроек.Счет;
		//ПроводкаНДС.СубконтоКт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
		//ПроводкаНДС.СубконтоКт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
		//ПроводкаНДС.СубконтоКт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоИзлишкамТоваров(СтрокаТЧ, СуммаВсего)
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Излишки, Дата, Организация);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Дата);
		
		Проводка = Движения.Финансовый.Добавить();
		
		Проводка.Период 		= Дата;
		//Проводка.Организация	= Организация;
		//Проводка.Сумма 			= (СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам)*СуммаВсего/СтрокаТЧ.Количество;
		
		// Дт
		Проводка.СчетДт 							= СтруктураНастроек.Счет;
		Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		// Кт
		Проводка.СчетКт 								= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоКт 							= СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоКт.МестаХранения  			= СтруктурнаяЕдиница;
			Проводка.СубконтоКт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Недостача товара";//"Излишки товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоКт.Склады		 			= Склад;
			Проводка.СубконтоКт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.КоличествоКт						= (СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам) * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Недостача материалов";//"Излишки материалов";
			
		КонецЕсли;
		
		Проводка.Сумма = Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура, , Дата);
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоНедостачеТоваров(СтрокаТЧ, СуммаВсего)
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Недостачи, Дата, Организация);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Дата);
		
		Проводка = Движения.Финансовый.Добавить();
		
		Проводка.Период			= Дата;
		//Проводка.Организация 	= Организация;
		//Проводка.Сумма 			= (СтрокаТЧ.ПоПриходнымОрдерам - СтрокаТЧ.Количество)*СуммаВсего/СтрокаТЧ.Количество;
		
		// Дт
		Проводка.СчетДт 		= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоДт 	= СтрокаТЧ.ПоПриходнымОрдерам - СтрокаТЧ.Количество;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоДт.МестаХранения  			= СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Излишки товаров";//"Недостача товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоДт.Склады		 			= Склад;
			Проводка.СубконтоДт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.КоличествоДт						= (СтрокаТЧ.ПоПриходнымОрдерам - СтрокаТЧ.Количество) * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Излишки материалов";//"Недостача материалов";
			
		КонецЕсли;
		
		// Кт
		Проводка.СчетКт 							= СтруктураНастроек.Счет;
		Проводка.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоКт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		Проводка.Сумма = Проводка.КоличествоДт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура, , Дата);
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияТоварыНаСкладах(Отказ, РежимПроведения, ТаблицаСпецификаций)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Очистить();
	
	Если Дата >= '20131201'
			И ТаблицаСпецификаций.Количество() > 0 Тогда
		
		СкладСписания = Склад;
		
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			
			НайденнаяСтрока = ТаблицаСпецификаций.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Спецификация = НайденнаяСтрока.Спецификация;
				
				//КоэффициентПересчета 	= ТекСтрокаТовары.ЕдиницаИзмерения.Коэффициент/Спецификация.ЕдиницаИзмерения.Коэффициент;
				СоставСпецификации 		= Спецификация.Состав;
				
				Для Каждого СоставляющаяПродукции Из СоставСпецификации Цикл
					
					КоэффициентПересчета 	= СоставляющаяПродукции.ЕдиницаИзмерения.Коэффициент;
					КоличествоКСписанию 	= ТекСтрокаТовары.Количество * СоставляющаяПродукции.Количество * КоэффициентПересчета;
					
					Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
					Движение.Период 			= Дата;
					Движение.Склад	 			= СкладСписания;
					Движение.Номенклатура 		= СоставляющаяПродукции.Номенклатура;
					Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Движение.ЕдиницаИзмерения	= ПолучитьБазовуюЕдиницуИзмерения(СоставляющаяПродукции.Номенклатура);
					Движение.Количество 		= КоличествоКСписанию;
					Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСуммПоКорпКартам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.ДатаВходящегоДокумента КАК Дата,
	|	АвансовыйОтчетТовары.НомерВходящегоДокумента КАК Номер,
	|	СУММА(АвансовыйОтчетТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.ДатаВходящегоДокумента,
	|	АвансовыйОтчетТовары.НомерВходящегоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетУслуги.ДатаВходящегоДокумента,
	|	АвансовыйОтчетУслуги.НомерВходящегоДокумента,
	|	СУММА(АвансовыйОтчетУслуги.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет.Услуги КАК АвансовыйОтчетУслуги
	|ГДЕ
	|	АвансовыйОтчетУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетУслуги.ДатаВходящегоДокумента,
	|	АвансовыйОтчетУслуги.НомерВходящегоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетУслуги.ДатаВходящегоДокумента,
	|	АвансовыйОтчетУслуги.НомерВходящегоДокумента,
	|	СУММА(АвансовыйОтчетУслуги.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетУслуги
	|ГДЕ
	|	АвансовыйОтчетУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетУслуги.ДатаВходящегоДокумента,
	|	АвансовыйОтчетУслуги.НомерВходящегоДокумента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоКорпоративнымКартам(Отказ, РежимПроведения)
	
	мДвижения = ЭтотОбъект.Движения.ДвиженияПоКорпоративнымКартам;
	мДвижения.Записывать = Истина;
	мДвижения.Очистить();
	
	Если НЕ ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвернутая = ПолучитьТаблицуСуммПоКорпКартам();
	
	мНомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("ФизЛицо", ЭтотОбъект.ФизЛицо);
	Для Каждого СтрокаТаблицы Из ТаблицаСвернутая Цикл
        НовоеДвижение = мДвижения.ДобавитьРасход();
		НовоеДвижение.Период = ЭтотОбъект.Дата;
		НовоеДвижение.ДатаСписания 				= СтрокаТаблицы.Дата;
		НовоеДвижение.Организация 				= ЭтотОбъект.Организация;
		НовоеДвижение.НомерКорпоративнойКарты 	= мНомерКорпоративнойКарты;
		НовоеДвижение.Сумма 					= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУслугиПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения)
	
	мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
	мНовыйУчетСчетовОС = (Лев(ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код, 1) = "2" // инвестиционная деятельность
							И НЕ ТекущаяДата() < мДатаНовогоУчетаСчетовОС);

	Для Каждого СтрокаТЧ Из ДанныеЗаполнения.ТорговыеТочки Цикл
		
		НоваяСтрока = ЭтотОбъект.Услуги.Добавить();
		
		НоваяСтрока.Количество 	= 1;
		НоваяСтрока.Цена 		= СтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС 	= ДанныеЗаполнения.СтавкаНДС;
		Если мНовыйУчетСчетовОС Тогда
			НоваяСтрока.СчетЗатрат 	= ПланыСчетов.Финансовый.КапитальныеВложения;
			НоваяСтрока.Субконто1 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Субконто3 		= СтрокаТЧ.ЦФО;
			НоваяСтрока.ТорговаяТочка 	= СтрокаТЧ.ТорговаяТочка;
		Иначе
			НоваяСтрока.СчетЗатрат 		= ?(ЗначениеЗаполнено(ДанныеЗаполнения.СчетЗатрат), ДанныеЗаполнения.СчетЗатрат, ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения);
			НоваяСтрока.Субконто1 		= СтрокаТЧ.ТорговаяТочка;
			НоваяСтрока.Субконто2 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов;
			НоваяСтрока.Субконто3 		= СтрокаТЧ.ЦФО;
		КонецЕсли;
		
		ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
		
	КонецЦикла;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоПриходномуОрдеру(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК ПоПриходнымОрдерам
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент";
	
	ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275	
	 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), Дата);
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	//---АК Susk (Суслин К.В.)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275	
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТЧ.Номенклатура);			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);			
			
			//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
			
			#Область КомментКод_ЗаполнитьТоварыПоПриходномуОрдеру 
			//Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			//	ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.Товары;
			//	
			//ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
			//	
			//КонецЕсли;
			//
			//Если СтрокаТЧ.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			//	СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
			//КонецЕсли;
			//
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	СчетУчета = СтрокаСчетУчета.СчетУчета;
			//КонецЕсли;	
			//
			//СтрокаТЧ.СчетУчета 				= ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
			#КонецОбласти
			
			//---АК Susk (Суслин К.В.) 
			
			СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
			
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//АК БЕЛН 06.04.2017+
	Если ЭтоНовый() Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли; 
	//АК БЕЛН 06.04.2017-
	Если НЕ ЗначениеЗаполнено(ВариантРасчетаНДС) Тогда
		ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХранилищеДополнительнойИнформации.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Ссылка
	|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.ЕстьВложения = (Выборка.Ссылка > 0);
	КонецЕсли;

	
	//ТаблицаСпецификаций =
	//	Документы.ПоступлениеТоваровУслуг.ПолучитьСпецификации(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата), Товары.ВыгрузитьКолонку("Номенклатура"), Контрагент);
	//ЕстьСпецификации	= (ТаблицаСпецификаций.Количество() > 0);
	//
	//Если ЕстьСпецификации
	//		И НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда
	//	
	//	#Если Клиент Тогда
	//		Сообщить("В табличной части ""Товары"" присутстуют позиции, имеющие спецификации!" + Символы.ПС +
	//					"Рекомендуется установить вид операции ""Приход из переработки""!", СтатусСообщения.Информация);	
	//	#КонецЕсли
	//	
	//ИначеЕсли НЕ ЕстьСпецификации
	//		И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда
	//	
	//	#Если Клиент Тогда
	//		Сообщить("В табличной части ""Товары"" нет позиций, имеющих спецификации!" + Символы.ПС +
	//					"Рекомендуется установить вид операции ""Покупка"" или ""Оборудование""!", СтатусСообщения.Информация);	
	//	#КонецЕсли
	//	
	//КонецЕсли;
	
	ПосчитатьСуммуТабличнойЧасти();
	
	//Счет08 = ПланыСчетов.Финансовый.КапитальныеВложения;
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
	//	Если СтрокаТЧ.СчетЗатрат = Счет08
	//		 	И (НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто2)
	//		 		ИЛИ Оборудование_УжеСписано(СтрокаТЧ.Субконто2))
	//			И СтрокаТЧ.ТорговаяТочка.Пустая() Тогда
	//		
	//		#Если Клиент Тогда
	//			Сообщить("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " табличной части ""Услуги"" не указана торговая точка");
	//		#КонецЕсли
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ЭтотОбъект.Услуги.Количество() > 0 Тогда
	//	Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщиками Тогда
	//		#Если Клиент Тогда
	//			Сообщить("Для поступления услуг указан счет учета расчетов с контрагентом 60.3!" + Символы.ПС +
	//						"Рекомендуется установить счет 60.4!", СтатусСообщения.Информация);	
	//		#КонецЕсли
	//	КонецЕсли;
	//	Если ЭтотОбъект.СтатьяДДС.Пустая() Тогда
	//		#Если Клиент Тогда
	//			Сообщить("Не указана статья ДДС");
	//		#КонецЕсли
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		мНомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("ФизЛицо", ЭтотОбъект.ФизЛицо);
		Если мНомерКорпоративнойКарты.Пустая() Тогда
			Сообщить("Для физ.лица """ + СокрЛП(ЭтотОбъект.ФизЛицо.Наименование) + """ не обнаружена корпоративная карта!");
			Отказ = Истина;
		КонецЕсли;
		
		ПустаяДата = Дата(1, 1, 1);
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
			Если СтрокаТЧ.ДатаВходящегоДокумента = ПустаяДата Тогда
				Сообщить("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " таблицы ""Товары"" не указана дата вход. документа!");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ОплатаПоставщикам Цикл
			Если СтрокаТЧ.ДатаВходящегоДокумента = ПустаяДата Тогда
				Сообщить("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " таблицы ""Оплата"" не указана дата вход. документа!");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
			Если СтрокаТЧ.ДатаВходящегоДокумента = ПустаяДата Тогда
				Сообщить("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " таблицы ""Прочее"" не указана дата документа!");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// koro 16505 контроль на заведомо некорректные даты 
	АК_УчетМСФО.КонтрольДатыВходящегоДокумента(ЭтотОбъект,Отказ);	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//Если НЕ Отказ
	//		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
	//		И ЗначениеЗаполнено(ДокументОснование) 
	//		И ДокументОснование.ВсеДокументыВНаличии = Ложь Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
	//	|ИЗ
	//	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//	|ГДЕ
	//	|	ПоступлениеТоваровУслуг.ДокументОснование = &ДокументОснование
	//	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	//	|	И ПоступлениеТоваровУслуг.ДокументыПолучены = ИСТИНА";
	//				   
	//	ОбщаяСумма = 0;
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		ОбщаяСумма = ?(Выборка.СуммаДокумента = Null, 0, Выборка.СуммаДокумента);
	//	КонецЕсли;
	//	Если ОбщаяСумма >= ДокументОснование.СуммаДокумента Тогда
	//		ОбъектДокумента = ДокументОснование.ПолучитьОбъект();
	//		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
	//		
	//		ОбъектДокумента.ВсеДокументыВНаличии = Истина;
	//		
	//		Попытка
	//			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
	//		Исключение
	//			Сообщить(ОписаниеОшибки());
	//		КонецПопытки;
	//	КонецЕсли;	
	//КонецЕсли;	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	//ЭтотОбъект.ПриходныеОрдера.Очистить();
	//
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
	//	СтрокаТЧ.ПоПриходнымОрдерам = 0;
	//КонецЦикла;
	//
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
	//	СтрокаТЧ.ОсновноеСредство = Неопределено;
	//КонецЦикла;
	//
	
	//+++AK susk
	Для Каждого Стр Из Товары Цикл
		Стр.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЦикла;
	//---AK susk
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	//Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
	//	
	//	ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения;
	//	ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
	//	ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
	//	ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.ЦФО;
	//	ЭтотОбъект.ВариантРасчетаНДС 	=
	//		?(ДанныеЗаполнения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	//	
	//	Если ДанныеЗаполнения.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
	//		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(ДанныеЗаполнения);
	//	КонецЕсли;
	//	
	//	ЗаполнитьУслугиПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения);
	//	
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
	//	
	//	ЭтотОбъект.Организация				= ДанныеЗаполнения.Организация;
	//	ЭтотОбъект.Контрагент 				= ДанныеЗаполнения.Поставщик;
	//	ЭтотОбъект.Склад					= ДанныеЗаполнения.Склад;
	//	ЭтотОбъект.СтруктурнаяЕдиница 		= ДанныеЗаполнения.Склад.Владелец;
	//	ЭтотОбъект.НомерВходящегоДокумента 	= ДанныеЗаполнения.НомерДокументаПоставщика;
	//	ЭтотОбъект.ДатаВходящегоДокумента 	= ДанныеЗаполнения.ДатаДокументаПоставщика;
	//	ЭтотОбъект.ВариантРасчетаНДС		= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	//	
	//	НовСтрОрдер = ЭтотОбъект.ПриходныеОрдера.Добавить();
	//	НовСтрОрдер.ПриходныйОрдер = ДанныеЗаполнения;
	//	
	//	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
	//		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
	//		ЭтотОбъект.Оборудование.Загрузить(ДанныеЗаполнения.Оборудование.Выгрузить());
	//		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
	//			СтрокаТЧ.ИнвентарныйНомер =
	//					?(ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство), СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер, Неопределено);
	//		КонецЦикла;
	//	Иначе
	//		ЗаполнитьТоварыПоПриходномуОрдеру(ДанныеЗаполнения);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//+++АК GEYV 24.07.2015
	СтатьяДРКомандировка = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("36198");
	
	ЕстьСтатьяКомандировки = Услуги.Найти(СтатьяДРКомандировка) <> Неопределено;
	
	Если ЕстьСтатьяКомандировки Тогда
		
		ОбщегоНазначения.ПроверитьСуществованиеПриказаНаКомандировку(Ссылка,Отказ);	
		
	КонецЕсли;
	//---АК
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.Наличные Тогда
		Счет = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.БезНаличные Тогда
		Счет = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
	Иначе  
		Счет = ПланыСчетов.Финансовый.НайтиПоКоду("71.3");  // командировочные
	КонецЕсли;	
	
	Для Каждого ТекСтрокаУслуги Из ЭтотОбъект.Услуги Цикл
		
		//ЭтоСчет44 = (ТекСтрокаУслуги.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения));
			 			
		СуммаВсего = 0;
		СуммаНДСОтдельно = 0;
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
			СуммаВсего = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаНДС;
		Иначе
			СуммаВсего = ТекСтрокаУслуги.Сумма;
		КонецЕсли;
		СуммаНДСОтдельно = ТекСтрокаУслуги.СуммаНДС;
        		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период	= ЭтотОбъект.Дата;
		Проводка.СчетДт	= ТекСтрокаУслуги.СчетЗатрат;
		//ТекНоменклатура 		= ТекСтрокаУслуги.Номенклатура;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаУслуги.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСтрокаУслуги.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.Субконто3);
		Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
		
		Проводка.СчетКт	= Счет;
		Проводка.СубконтоКт.Организации 	= ЭтотОбъект.Организация;
		Проводка.СубконтоКт.ФизическиеЛица 	= ЭтотОбъект.ФизЛицо;
		
		//Проводка.Организация 			= ЭтотОбъект.Организация;
		Проводка.Сумма 	= СуммаВсего;
		
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(Движения.Финансовый,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,ЭтотОбъект.Дата,ДатаОтраженияМСФО,Отказ);
		//Если ЭтоСчет44 Тогда
		//	АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(Движения.Финансовый,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,ЭтотОбъект.Дата);
		//КонецЕсли;

		Если ТекСтрокаУслуги.Инвестиция Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период	= ЭтотОбъект.Дата;
			Проводка.СчетКт	= ТекСтрокаУслуги.СчетЗатрат;
			//ТекНоменклатура 		= ТекСтрокаУслуги.Номенклатура;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
			//Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
			
			Проводка.СчетДт	= ПланыСчетов.Финансовый.Инвестиции;
			Проводка.СубконтоДт.ТорговыеТочки 	= ТекСтрокаУслуги.ТорговаяТочка;
			
			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма 	= ТекСтрокаУслуги.Сумма;

		КонецЕсли;	
		
		Если СуммаНДСОтдельно <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
		
			Проводка.Период = ЭтотОбъект.Дата;
			Проводка.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("68.2");
			
			
			Проводка.СубконтоДт.Организации  	= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.ВидыНалогов		= Справочники.ВидыНалогов.НайтиПоКоду("000000001");
			Проводка.СубконтоДт.СтавкиНДС		= ТекСтрокаУслуги.СтавкаНДС;
			
			Проводка.СчетКт = Счет;
			Проводка.СубконтоКт.Организации 	= ЭтотОбъект.Организация;
			Проводка.СубконтоКт.ФизическиеЛица 	= ЭтотОбъект.ФизЛицо;

			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма = СуммаНДСОтдельно;
			
			//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(Движения.Финансовый,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,ЭтотОбъект.Дата,ДатаОтраженияМСФО,Отказ);
			//Если ЭтоСчет44 Тогда
			//	АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(Движения.Финансовый,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,ЭтотОбъект.Дата);
			//КонецЕсли;

		КонецЕсли;

		
	КонецЦикла;
	
	НастройкаОтраженияНДСПоТоварам = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, Дата, Организация);
	
	Для Каждого ТекСтрока Из ЭтотОбъект.Прочее Цикл
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период		= ЭтотОбъект.Дата;
		Проводка.СчетДт		= ТекСтрока.СчетДт;
				
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрока.Субконто1Дт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСтрока.Субконто2Дт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрока.Субконто3Дт);
		
		Проводка.СчетКт		= ТекСтрока.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрока.Субконто1Кт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрока.Субконто2Кт);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрока.Субконто3Кт);
		
		//Проводка.Организация 			= ЭтотОбъект.Организация;
		Проводка.Сумма 		= ТекСтрока.Сумма;
		Проводка.Содержание	= ТекСтрока.Содержание;
				
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(Движения.Финансовый,Проводка,ТекСтрокаУслуги.ДатаВходящегоДокумента,ЭтотОбъект.Дата);

	КонецЦикла;

	
	
	Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
		
		//+++АК Susk (Суслин К.В.) 2018.03.15 ИП-00018114		 
		//Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
		Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Инвентарь ИЛИ ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств Тогда
		//---АК Susk (Суслин К.В.) 
			ЭтоОсновноеСредство = Истина;
			ЭтоМатериал = Ложь;
		ИначеЕсли ТекСтрокаТовары.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы)
				И ТекСтрокаТовары.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			ЭтоМатериал = Истина;
			ЭтоОсновноеСредство = Ложь;
		Иначе 
			ЭтоМатериал = Ложь;	
			ЭтоОсновноеСредство = Ложь;
		КонецЕсли;	
		
		СуммаВсего = 0;
		СуммаНДСОтдельно = 0;
		Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
				СуммаВсего = ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаНДС;
			Иначе
				СуммаВсего = ТекСтрокаТовары.Сумма;
			КонецЕсли;
			СуммаНДСОтдельно = ТекСтрокаТовары.СуммаНДС;
		Иначе	
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
				СуммаВсего = ТекСтрокаТовары.Сумма;
			Иначе
				СуммаВсего = ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.СчетДт 		= ТекСтрокаТовары.СчетУчета;
		ТекНоменклатура 		= ТекСтрокаТовары.Номенклатура;
		
		Если ЭтоОсновноеСредство Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаТовары.ОсновноеСредство) Тогда
				Сообщить("Для учета инвентаря необходимо создать основные средства");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаТовары.ТорговаяТочка) Тогда
				Сообщить("Для учета инвентаря необходимо указать торговую точку");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	

			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаТовары.ОсновноеСредство);
			
		ИначеЕсли ЭтоМатериал Тогда 
		
			Если НЕ ЗначениеЗаполнено(ТекНоменклатура) Тогда
				Сообщить("Для учета материалов поле номенклатура должно быть заполнено");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ТекНоменклатура.ЭтоГруппа) Тогда
				Сообщить("Не допускается выбор группы: " + ТекНоменклатура);
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекНоменклатура);

			Проводка.КоличествоДт = ТекСтрокаТовары.Количество;

		Иначе
						
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаТовары.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСтрокаТовары.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаТовары.Субконто3);
			
		КонецЕсли;
		
		Проводка.Содержание				= ТекСтрокаТовары.Содержание;
		
		Проводка.СчетКт 				= Счет;
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.ФизическиеЛица = ЭтотОбъект.ФизЛицо;
		
		//Проводка.Организация 			= ЭтотОбъект.Организация;
		Проводка.Сумма = ТекСтрокаТовары.Сумма;                                 
		
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(Движения.Финансовый,Проводка,ТекСтрокаТовары.ДатаВходящегоДокумента,ЭтотОбъект.Дата,ДатаОтраженияМСФО,Отказ);
		//Если Отказ Тогда
		//	Возврат;
		//КонецЕсли;	
		
		Если ТекСтрокаТовары.Инвестиция Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
			//ТекНоменклатура 		= ТекСтрокаУслуги.Номенклатура;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаТовары.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаТовары.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаТовары.Субконто3);
			//Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
			
			Проводка.СчетДт 					= ПланыСчетов.Финансовый.Инвестиции;
			Проводка.СубконтоДт.ТорговыеТочки 	= ТекСтрокаТовары.ТорговаяТочка;
			
			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма = ТекСтрокаТовары.Сумма;

		КонецЕсли;	
		
		//Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
		//	Проводка.СубконтоДт.МестаХранения  	= ЭтотОбъект.СтруктурнаяЕдиница;
		//	Проводка.СубконтоДт.Товары			= ТекНоменклатура;
		//	Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
		//	Проводка.НомерЖурнала			= "ТД";
		//	Проводка.Содержание				= "Покупка товара";
		//ИначеЕсли ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
		//	//Проводка.СубконтоДт.Контрагенты		 	= Контрагент;
		//	Проводка.СубконтоДт.Склады		 		= ЭтотОбъект.Склад;
		//	Проводка.СубконтоДт.Материалы			= ТекНоменклатура;
		//	Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
		//	Проводка.КоличествоДт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
		//	Проводка.НомерЖурнала			= "МВ";
		//	Проводка.Содержание				= "Покупка материалов";
		//ИначеЕсли ТекСтрокаТовары.СчетУчета 	= ПланыСчетов.Финансовый.КапитальныеВложения Тогда
		//	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("").Ссылка;//НаПриобретениеОборудованияТорговыхТочек;
		//	Проводка.НомерЖурнала			= "КВ";
		//	Проводка.Содержание				= "Покупка оборудования";
		//КонецЕсли;
		//Проводка.СчетКт 				= Счет;
		//Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		//Проводка.СубконтоКт.ФизическиеЛица = ЭтотОбъект.ФизЛицо;

		//
		////Проводка.Организация 			= ЭтотОбъект.Организация;
		//Проводка.Сумма = СуммаВсего;
		
		//отдельная проводка по НДС при включенной новой системе
		Если СуммаНДСОтдельно <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
		
			Проводка.Период = ЭтотОбъект.Дата;
			Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
			
			
			Проводка.СубконтоДт.Организации  	= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.ВидыНалогов		= НастройкаОтраженияНДСПоТоварам.ДопРеквизит;
			Проводка.СубконтоДт.СтавкиНДС		= ТекСтрокаТовары.СтавкаНДС;
			
			Проводка.СчетКт 				= Счет;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.ФизическиеЛица = ЭтотОбъект.ФизЛицо;

			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма 					= СуммаНДСОтдельно;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаУслуги Из ЭтотОбъект.ОплатаПоставщикам Цикл
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.СчетДт 		= ТекСтрокаУслуги.СчетУчетаРасчетовСКонтрагентом;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаУслуги.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСтрокаУслуги.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.Субконто3);


		Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
		
		Проводка.СчетКт 				= Счет;
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.ФизическиеЛица = ЭтотОбъект.ФизЛицо;
			
		Проводка.Сумма = ТекСтрокаУслуги.СуммаВзаиморасчетов;
		
		Если ТекСтрокаУслуги.Инвестиция Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетКт 		= ТекСтрокаУслуги.СчетУчетаРасчетовСКонтрагентом;
			//ТекНоменклатура 		= ТекСтрокаУслуги.Номенклатура;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
			//Проводка.Содержание				= ТекСтрокаУслуги.Содержание;
			
			Проводка.СчетДт 					= ПланыСчетов.Финансовый.Инвестиции;
			Проводка.СубконтоДт.ТорговыеТочки 	= ТекСтрокаУслуги.ТорговаяТочка;
			
			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма = ТекСтрокаУслуги.Сумма;

		КонецЕсли;	
	КонецЦикла;

	
	Если ПеребросСальдо Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ФинансовыйОстатки.СуммаОстаток КАК Остаток,
		|	ФинансовыйОстатки.Субконто1 КАК Организация
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(
		|			&Дата,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПодотчетнымиЛицами),
		|			,
		|			Субконто2 = &ФизЛицо
		|				И Субконто1 <> ЗНАЧЕНИЕ(Справочник.Организации.Избенка)) КАК ФинансовыйОстатки";
					 
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Запрос.УстановитьПараметр("Дата"	, ЭтотОбъект.Дата - 1);
		Запрос.УстановитьПараметр("ФизЛицо"	, ЭтотОбъект.ФизЛицо);
		выборка = Запрос.Выполнить().Выбрать();
		СчетПодОтчета = Счет;
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			
			Проводка.СчетДт 		= СчетПодОтчета;
			Проводка.СчетКт 		= СчетПодОтчета;
			
			Проводка.СубконтоДт.ФизическиеЛица=ФизЛицо;
			Проводка.СубконтоКт.ФизическиеЛица=ФизЛицо;
			
			Проводка.СубконтоДт.Организации=Справочники.Организации.Избенка;
			Проводка.СубконтоКт.Организации=Выборка.Организация;
			Проводка.Сумма = Выборка.Остаток;
		КонецЦикла;	
		Если Организация <> Справочники.Организации.Избенка Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			
			Проводка.СчетДт 		= СчетПодОтчета;
			Проводка.СчетКт 		= СчетПодОтчета;
			
			Проводка.СубконтоДт.ФизическиеЛица=ФизЛицо;
			Проводка.СубконтоКт.ФизическиеЛица=ФизЛицо;
			
			Проводка.СубконтоКт.Организации=Справочники.Организации.Избенка;
			Проводка.СубконтоДт.Организации=Организация;
			Проводка.Сумма = Услуги.Итог("Сумма");

		КонецЕсли;
	КонецЕсли;	
	
	//
	ДвиженияПоКорпоративнымКартам(Отказ, РежимПроведения);
	
	ОтразитьСостояниеОС(Отказ);
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	//+++АК БЕЛН 20170413
	Если  Не Отказ Тогда
		Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Ссылка);
		ОбменДанными.Получатели.Добавить(Узел);
	КонецЕсли; 
	//---АК БЕЛН 20170413
	
КонецПроцедуры

Процедура ОтразитьСостояниеОС(Отказ)	
	
	ЭтотОбъект.Движения.СостояниеОС.Очистить();			
	ЭтотОбъект.Движения.СостояниеОС.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансовыйОтчетТовары.ОсновноеСредство,
		|	АвансовыйОтчетТовары.ТорговаяТочка КАК Местоположение,
		|	ЛОЖЬ КАК Эксплуатируется,
		|	АвансовыйОтчетТовары.Ссылка.Организация,
		|	ЛОЖЬ КАК Списано,
		|	АвансовыйОтчетТовары.Ссылка.Дата КАК Период
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		|ГДЕ
		|	АвансовыйОтчетТовары.Ссылка = &Ссылка
		//+++АК Susk (Суслин К.В.) 2018.04.19 б/н		 
		//|	И АвансовыйОтчетТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвентарь)";
		|	И АвансовыйОтчетТовары.СчетУчета В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвентарь),ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПриобретениеОсновныхСредств))";
		//---АК Susk (Суслин К.В.) 

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	ЭтотОбъект.Движения.СостояниеОС.Загрузить(Запрос.Выполнить().Выгрузить());
						
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//сдвинем границу последовательности себестоимости
	ПроверитьИСместитьГраницу();
	
КонецПроцедуры


#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()
	Перем ПодразделениеОтветственныхЛиц;

	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата    КАК ДатаДокумента,
	|	ФизЛицо КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	СтруктурнаяЕдиница КАК ПодразделениеОрганизации,
	|	СтруктурнаяЕдиница.Наименование КАК ПредставлениеПодразделения,
	|	СтруктурнаяЕдиница.Код КАК КодПодразделения,
	|	Организация.Ссылка    КАК Организация,
	|	НазначениеАванса      КАК НазначениеАванса,
	|	ВариантРасчетаНДС,
	|	СуммаДокумента,
	|	КоличествоДокументов,
	|	КоличествоЛистов,
	|	ВыданныеАвансы.(
	|		Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Авансы = Шапка.ВыданныеАвансы.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";

	Макет       = ПолучитьМакет("АвансовыйОтчет");

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
	//Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
	//	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	//Иначе
		Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами);
	//КонецЕсли;
	Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",Шапка.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", Ссылка.МоментВремени());
	
	//// {ОбособленныеПодразделения
	//Запрос.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
	//// }ОбособленныеПодразделения
	//
	Запрос.Текст = "ВЫБРАТЬ
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.СуммаОстатокДт,
	|	ФинансовыйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаИтогов,
	|			Счет В ИЕРАРХИИ (&Счет71),
	|			,
	|			Субконто1 = &Организация
	|				И Субконто2 = &Сотрудник
	//// {ОбособленныеПодразделения
	//|				И Подразделение = &Подразделение
	//// }ОбособленныеПодразделения
	|) КАК ФинансовыйОстатки";
	//
	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	//ДанныеВал  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	СуммаДоДокумента = 0;

	Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;
	
	МассивАвансовыхДокументов = ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СУММА(ВыдачаДенежныхДокументов.СуммаДокумента) КАК СуммаДокумента
	//|ИЗ
	//|	Документ.ВыдачаДенежныхДокументов КАК ВыдачаДенежныхДокументов
	//|ГДЕ
	//|	ВыдачаДенежныхДокументов.Ссылка В(&МассивАвансовыхДокументов)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВыдачаДенежныхДокументов.Ссылка
	|";
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СписаниеСРасчетногоСчета.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходИзБанка КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчета.Ссылка
	|";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассыПоКартам = Число(Таб.Итог("СуммаДокумента"));

	ОбластьМакета = Макет.ПолучитьОбласть("Титул");

	КурсДока = 1;
	КратДока = 1;
	КурсоваяРазница = 0;
	
	ИтогоПолучено = ПолученоИзКассы + ПолученоИзКассыПоКартам;

	СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;

	ДанныеПодотчетногоЛица = ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
	ПодотчетноеЛицо   = ДанныеПодотчетногоЛица.Представление;
	ПодотчетноеЛицоОт = ПодотчетноеЛицо;
	ТабельныйНомер    = ДанныеПодотчетногоЛица.ТабельныйНомер;
	Подразделение     = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
	Должность         = ДанныеПодотчетногоЛица.Должность;

	// Выводим титульный лист авансового отчета
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ПредставлениеПодразделения = СокрЛП(СтруктурнаяЕдиница.Наименование);
	КонецЕсли;		
	
		
	ОбластьМакета.Параметры.ПредставлениеПодразделения         = ПредставлениеПодразделения;
	ОбластьМакета.Параметры.КодПодразделения                   = "";
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛицаОт        = ПодотчетноеЛицоОт;
	ОбластьМакета.Параметры.ТабельныйНомер                         = ТабельныйНомер;
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
	ОбластьМакета.Параметры.НомерДокумента                         = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
	ОбластьМакета.Параметры.ПолученоИзКассыПоКартам                = ПолученоИзКассыПоКартам;

	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
	Израсходовано = Шапка.СуммаДокумента;
	
	ОбластьМакета.Параметры.Израсходовано = Израсходовано;

	ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеСокращенное,");

	
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	Кассир       = Руководители.КассирПредставление;

	ДляРасчета   = Шапка.СуммаДокумента ;

	ИспСумма     = Окр(ДляРасчета, 2, 1);
	ЦелСумма     = Цел(ИспСумма);
	КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");

	ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
	ОбластьМакета.Параметры.ИзрасходованоКоп    = КопСумма;

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИспСумма, мВалютаРегламентированногоУчета) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";
	ОбластьМакета.Параметры.КоличествоДокументов= КоличествоДокументов;
	ОбластьМакета.Параметры.КоличествоЛистов    = КоличествоЛистов;
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
	ОбластьМакета.Параметры.Кассир                             = Кассир;
	ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжность;
	
	
	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросПоПроводкам.УстановитьПараметр("CчКт",ПланыСчетов.Хозрасчетный.НайтиПоКоду("71"));
	//ЗапросПоПроводкам.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 8
	//|	Хозрасчетный.СчетДт,
	//|	Хозрасчетный.СчетКт,
	//|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	//|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	//|ИЗ
	//|	РегистрБухгалтерии.Финансовый КАК Хозрасчетный
	//|ГДЕ
	//|	Хозрасчетный.Регистратор = &Ссылка
	//|	И (НЕ(Хозрасчетный.СчетДт.Забалансовый
	//|				ИЛИ Хозрасчетный.СчетКт.Забалансовый))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Хозрасчетный.СчетДт,
	//|	Хозрасчетный.СчетКт
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	
	ЗапросПоПроводкам.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 8
	|	ВложенныйЗапрос.СчетДт,
	|	ВложенныйЗапрос.CчетКт КАК СчетКт,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		АвансовыйОтчетТовары.СчетУчетаБУ КАК СчетДт,
	|		&CчКт КАК CчетКт,
	|		АвансовыйОтчетТовары.Сумма КАК Сумма,
	|		АвансовыйОтчетТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|	ГДЕ
	|		АвансовыйОтчетТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетУслуги.СчетЗатратБУ,
	|		&CчКт,
	|		АвансовыйОтчетУслуги.Сумма,
	|		АвансовыйОтчетУслуги.НомерСтроки
	|	ИЗ
	|		Документ.АвансовыйОтчет.Услуги КАК АвансовыйОтчетУслуги
	|	ГДЕ
	|		АвансовыйОтчетУслуги.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентомБУ,
	|		&CчКт,
	|		АвансовыйОтчетОплатаПоставщикам.Сумма,
	|		АвансовыйОтчетОплатаПоставщикам.НомерСтроки
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|	ГДЕ
	|		АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.СчетДт.Забалансовый
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетДт,
	|	ВложенныйЗапрос.CчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выбрать();

	Счетчик = 0;
	Пока ВыборкаПроводок.Следующий() Цикл

		ОбластьМакета.Параметры["СубСчетДебет"  + (Счетчик + 1)] = ВыборкаПроводок.СчетДт;
		ОбластьМакета.Параметры["СуммаДебет"    + (Счетчик + 1)] = ВыборкаПроводок.Сумма;
		ОбластьМакета.Параметры["СубСчетКредит" + (Счетчик + 1)] = ВыборкаПроводок.СчетКт;
		ОбластьМакета.Параметры["СуммаКредит"   + (Счетчик + 1)] = ВыборкаПроводок.Сумма;

		Счетчик = Счетчик + 1;

	КонецЦикла;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	ЗапросТовары.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	// Выборка данных из табличных частей документа.
	
	//ЗапросТовары.Текст =
	//"ВЫБРАТЬ
	//|	АвансовыйОтчет.Поставщик КАК Поставщик,
	//|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	//|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	//|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	//|	СУММА( АвансовыйОтчет.Сумма)	КАК ПоОтчету,
	//|	СУММА(0) КАК ПоОтчетуВВалюте,
	//|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	//|	АвансовыйОтчет.СчетУчета.Код КАК СчетЗатрат
	////|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС
	//|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	//|ИЗ
	//|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	//|ГДЕ
	//|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	АвансовыйОтчет.Поставщик,
	//|	АвансовыйОтчет.НомерВходящегоДокумента,
	//|	АвансовыйОтчет.ДатаВходящегоДокумента,
	//|	АвансовыйОтчет.ВидДокВходящий,
	//|	АвансовыйОтчет.СчетУчета.Код
	////|	АвансовыйОтчет.СчетУчетаНДС
	////|";
	////|ОБЪЕДИНИТЬ
	////|
	////|ВЫБРАТЬ
	////|	АвансовыйОтчет.Контрагент,
	////|	АвансовыйОтчет.НомерВходящегоДокумента,
	////|	АвансовыйОтчет.ДатаВходящегоДокумента,
	////|	АвансовыйОтчет.ВидДокВходящий,
	////|	СУММА(ВЫБОР
	////|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	////|				ТОГДА АвансовыйОтчет.Сумма
	////|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов * (АвансовыйОтчет.КурсВзаиморасчетов / АвансовыйОтчет.КратностьВзаиморасчетов)
	////|		КОНЕЦ),
	////|	СУММА(ВЫБОР
	////|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	////|				ТОГДА 0
	////|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	////|		КОНЕЦ),
	////|	СУММА(0),
	////|	ВЫБОР
	////|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	////|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	////|		ИНАЧЕ ВЫБОР
	////|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	////|					ТОГДА """"
	////|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	////|			КОНЕЦ + ВЫБОР
	////|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	////|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	////|					ТОГДА "", ""
	////|				ИНАЧЕ """"
	////|			КОНЕЦ + ВЫБОР
	////|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	////|					ТОГДА """"
	////|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	////|			КОНЕЦ
	////|	КОНЕЦ,
	////|	НЕОПРЕДЕЛЕНО
	////|ИЗ
	////|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	////|ГДЕ
	////|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	////|
	////|СГРУППИРОВАТЬ ПО
	////|	АвансовыйОтчет.Контрагент,
	////|	АвансовыйОтчет.НомерВходящегоДокумента,
	////|	АвансовыйОтчет.ДатаВходящегоДокумента,
	////|	АвансовыйОтчет.ВидДокВходящий,
	////|	ВЫБОР
	////|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	////|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	////|		ИНАЧЕ ВЫБОР
	////|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	////|					ТОГДА """"
	////|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	////|			КОНЕЦ + ВЫБОР
	////|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	////|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	////|					ТОГДА "", ""
	////|				ИНАЧЕ """"
	////|			КОНЕЦ + ВЫБОР
	////|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	////|					ТОГДА """"
	////|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	////|			КОНЕЦ
	////|	КОНЕЦ
	////|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	АвансовыйОтчет.Поставщик,
	//|	АвансовыйОтчет.НомерВходящегоДокумента,
	//|	АвансовыйОтчет.ДатаВходящегоДокумента,
	//|	АвансовыйОтчет.ВидДокВходящий,
	//|	СУММА(АвансовыйОтчет.Сумма),
	//|	СУММА(0),
	//|	СУММА(АвансовыйОтчет.СуммаНДС),
	//|	АвансовыйОтчет.СчетЗатрат.Код
	////|	АвансовыйОтчет.СчетУчетаНДС
	//|ИЗ
	//|	Документ.АвансовыйОтчет.Услуги КАК АвансовыйОтчет
	//|ГДЕ
	//|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	АвансовыйОтчет.Поставщик,
	//|	АвансовыйОтчет.НомерВходящегоДокумента,
	//|	АвансовыйОтчет.ДатаВходящегоДокумента,
	//|	АвансовыйОтчет.ВидДокВходящий,
	//|	АвансовыйОтчет.СчетЗатрат.Код";
	////|	АвансовыйОтчет.СчетУчетаНДС";
	//ЗапросТовары.Выполнить();
	
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	|	СУММА(АвансовыйОтчет.Сумма) КАК ПоОтчету,
	|	СУММА(0) КАК ПоОтчетуВВалюте,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчетаБУ.Код КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчетаБУ.Код,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетДок.Контрагент,
	|	АвансовыйОтчетДок.НомерВходящегоДокумента,
	|	АвансовыйОтчетДок.ДатаВходящегоДокумента,
	|	АвансовыйОтчетДок.ВидДокВходящий,
	|	СУММА(АвансовыйОтчетДок.Сумма),
	|	СУММА(0),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код = АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ.Код
	|			ТОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ = &ПустойСчет
	|						И НЕ АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетДок
	|ГДЕ
	|	АвансовыйОтчетДок.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетДок.ВидДокВходящий,
	|	АвансовыйОтчетДок.ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код = АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ.Код
	|			ТОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчетДок.СчетУчетаРасчетовСКонтрагентомБУ = &ПустойСчет
	|						И НЕ АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчетДок.СчетУчетаРасчетовПоАвансамБУ.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АвансовыйОтчетДок.Контрагент,
	|	АвансовыйОтчетДок.НомерВходящегоДокумента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(0),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	АвансовыйОтчет.СчетЗатратБУ.Код,
	|	АвансовыйОтчет.СчетУчетаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Услуги КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетЗатратБУ.Код,
	|	АвансовыйОтчет.СчетУчетаНДС";
	ЗапросТовары.Выполнить();

	
	// Выборка уникальных счетов учета по документам, подтверждающим расходы.
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	Поставщик КАК Поставщик,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СчетЗатрат КАК Счет
	|ПОМЕСТИТЬ
	|	СписокСчетов
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|";
	//Если УчитыватьНДС Тогда
	//
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ 
		|	Поставщик,
		|	ДокументНомер,
		|	ДокументДата,
		|	НаименованиеРасхода,
		|	СчетНДС
		|ИЗ 
		|	ДанныеАвансовогоОтчета
		|";
	
	//КонецЕсли;
	//
	ЗапросТовары.Текст = ТекстЗапроса;
	ЗапросТовары.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Поставщик КАК Поставщик,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ПоОтчету) КАК ПоОтчету,
	|	СУММА(ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(СуммаНДС) КАК СуммаНДС
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Поставщик,
	|	ДокументНомер,
	|	ДокументДата,
	|	НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер
	|";
	Товар = ЗапросТовары.Выполнить().Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(Товар.НаименованиеРасхода);
		ОбластьМакета.Параметры.ДебетСубСчета 		= "";
		
		// Выборка счетов, соответствующих документу расхода.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Поставщик", Товар.Поставщик);
		Запрос.УстановитьПараметр("ДокументНомер", Товар.ДокументНомер);
		Запрос.УстановитьПараметр("ДокументДата", Товар.ДокументДата);
		Запрос.УстановитьПараметр("НаименованиеРасхода", Товар.НаименованиеРасхода);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Счет
		|ИЗ
		|	СписокСчетов
		|ГДЕ
		|	Поставщик = &Поставщик 
		|	И ДокументНомер = &ДокументНомер
		|	И ДокументДата = &ДокументДата
		|	И НаименованиеРасхода = &НаименованиеРасхода
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|";
			
		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл
			ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
												  + ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
												  + ВыборкаСчетов.Счет;
		КонецЦикла;
		
		Сумма = Товар.ПоОтчету;

		ОбластьМакета.Параметры.ПоОтчету = Сумма;
		ОбластьМакета.Параметры.ПоУчету  = Сумма;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ИмяМакета = "Аванс_Отчет" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАвансовогоОтчета();
	ИначеЕсли ИмяМакета = "Командировка" Тогда
		
		НаПринтер = Истина;
		
		ТабДокумент = НапечататьМакеЗадание("ПриказОКомандировке");
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);
		
		ТабДокумент = НапечататьМакеЗадание("ПутевойЛистЛегковогоАвтомобиля");
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);
		
		ТабДокумент = НапечататьМакеЗадание("ПутевойЛистЛегковогоАвтомобиляОборотнаяСторона");
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);
		
		ТабДокумент = НапечататьМакеЗадание("СлужебноеЗадание");
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);

КонецПроцедуры // Печать

Функция ПечатьКомандировка()

	ТабДокумент = Новый ТабличныйДокумент;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровКомандировка();
	
	Макет = ПолучитьМакет("ПриказОКомандировке");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Макет = ПолучитьМакет("ПутевойЛистЛегковогоАвтомобиля");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Макет = ПолучитьМакет("ПутевойЛистЛегковогоАвтомобиляОборотнаяСторона");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	
	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	//ДанныеФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(Документ.Расчетчик.ФизЛицо);
	//ДанныеФизЛица = ОбщегоНазначения.ДанныеФизЛица(Документ.Организация,Документ.Расчетчик.ФизЛицо,Документ.Дата);
	
	//ОбластьШапка.Параметры.НомерТТ = ?(Документ.Организация.Код = "000000004","ТТ","магазина");
	//ОбластьШапка.Параметры.НомерТТ = Документ.ТорговаяТочка.id_TT;
	//ОбластьШапка.Параметры.Дата = Документ.Дата;
	//ОбластьШапка.Параметры.Организация = Документ.Организация.Наименование;
	//ОбластьШапка.Параметры.ФИОКратко = ДанныеФизЛица;
	//ОбластьШапка.Параметры.Сумма = ?(Документ.КорректировкаZ<0,Документ.КорректировкаZ*(-1),Документ.КорректировкаZ)+?(Документ.КорректировкаБезнал<0,Документ.КорректировкаБезнал*(-1),Документ.КорректировкаБезнал);
	//ОбластьШапка.Параметры.ФИО = ОбщегоНазначения.ПросклонятьФИО(Документ.Расчетчик.ФизЛицо,2);
	
	
	Возврат ТабДокумент;
	

КонецФункции // ПечатьКомандировка()

Функция НапечататьМакеЗадание(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровКомандировка();
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
	
	ТабДокумент.Вывести(ОбластьШапка);

	Возврат ТабДокумент;
	
КонецФункции // НапечататьСлужебноеЗадание()

Функция ПолучитьСтруктуруПараметровКомандировка()
	
	СтруктураПараметров = Новый Структура;
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Организация,Дата);
	
	РуководительПредставление = ОтветственныеЛица.РуководительПредставление;
	
	РуководительДолжность = ОтветственныеЛица.РуководительДолжность; 
	
	СведенияООрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация,Дата);
	
	ПолучитьНомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	
	ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
	СведенияООрганизации, "НаименованиеДляПечатныхФорм,ФактическийАдрес,Телефоны");
	
	СтруктураПараметров.Вставить("Организация",Организация.Наименование);
	СтруктураПараметров.Вставить("ДатаНачала",НачалоМесяца(Дата));
	СтруктураПараметров.Вставить("ФИОФизЛица",ФизЛицо.Наименование);
	СтруктураПараметров.Вставить("ДолжностьРуководителя",РуководительДолжность);
	СтруктураПараметров.Вставить("ФИОРуководителя",РуководительПредставление);
	СтруктураПараметров.Вставить("ИнформацияОбОрганизации",ПредставлениеОрганизации);
	СтруктураПараметров.Вставить("ДатаОкончания",Дата);
	СтруктураПараметров.Вставить("НомерДокумента",ПолучитьНомерНаПечать);
	
    Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровКомандировка()


#КонецЕсли

Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	"""" КАК ТабельныйНомер,
	|	"""" КАК Должность,
	|	"""" КАК ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ Ссылка КАК ФизЛицо ИЗ Справочник.ФизическиеЛица ГДЕ Ссылка = &ФизЛицо) КАК ФизЛица
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|	ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|	ПО ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	//|	ЛЕВОЕ СОЕДИНЕНИЕ 
	//|		(ВЫБРАТЬ 
	//|			РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	//|			РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо КАК ФизЛицо,
	//|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	//|			РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	//|		ИЗ
	//|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза,	Сотрудник.ФизЛицо = &ФизЛицо И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	//|		ГДЕ
	//|			РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	//|		) КАК РаботникиОрганизацийСрезПоследних
	//|	ПО ФизЛица.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо
	|";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);

	Результат.Представление          = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица

Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт

	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
			ДанныеФизЛица.ДокументСерия       + ", номер " +
			ДанныеФизЛица.ДокументНомер       + ", выданный " +
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДанныеФизЛица.ДокументКемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

//shae 2018.08.07 ИП-00019236 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(ЭтотОбъект.Организация, ЭтотОбъект.Товары.Выгрузить(), Отказ);		

КонецПроцедуры

