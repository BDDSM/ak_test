
Перем мКолонкиТовары;
Перем СальдоТекОрг, СальдоОстальных;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступность()
	
	НеВыгружатьВБУ = НЕ ЭтотОбъект.ВыгружатьВ_БП;
	//Если НеВыгружатьВБУ Тогда
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ1.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ2.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ3.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СчетЗатратБУ.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СчетЗатратНУ.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ1.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ2.Видимость	= ложь;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ3.Видимость	= ложь;
	//	
	//	ЭлементыФормы.Товары.Колонки.СубконтоБУ1.Видимость	= ложь;
	//	ЭлементыФормы.Товары.Колонки.СубконтоБУ2.Видимость	= ложь;
	//	ЭлементыФормы.Товары.Колонки.СубконтоБУ3.Видимость	= ложь;
	//	ЭлементыФормы.Товары.Колонки.СчетУчетаБУ.Видимость	= ложь;
	//	
	//Иначе
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ1.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ2.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоБУ3.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СчетЗатратБУ.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СчетЗатратНУ.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ1.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ2.Видимость	= истина;
	//	ЭлементыФормы.Услуги.Колонки.СубконтоНУ3.Видимость	= истина;
	//	
	//	//ЭлементыФормы.Товары.Колонки.СубконтоБУ1.Видимость	= истина;
	//	//ЭлементыФормы.Товары.Колонки.СубконтоБУ2.Видимость	= истина;
	//	//ЭлементыФормы.Товары.Колонки.СубконтоБУ3.Видимость	= истина;
	//	ЭлементыФормы.Товары.Колонки.СчетУчетаБУ.Видимость	= истина;
	//КонецЕсли;
	
	ЭтоБезнал = (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.БезНаличные);
	//ЭлементыФормы.НадписьЗадолженностьНаНачало.Видимость = НЕ ЭтоБезнал;;
	//ЭлементыФормы.НадписьЗадолженностьНаКонец.Видимость = НЕ ЭтоБезнал;;
	ЭлементыФормы.ДействияФормы.Кнопки.СоздатьЗаявку_ПКО.Доступность		= НЕ ЭтоБезнал;
	ЭлементыФормы.ДействияФормы.Кнопки.ПерераспределитьСальдо.Доступность	= НЕ ЭтоБезнал;;
	
	ЭлементыФормы.СписаниеСКорпоративнойКарты.Доступность 	= ЭтоБезнал;
	ЭлементыФормы.СуммаТранзакцииБанка.Доступность 			= ЭтоБезнал;
	
	//ЭтоОборудование = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
	//
	////Видимость страниц
	//ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость	= ЭтоОборудование;
	//ЭлементыФормы.Панель1.Страницы.Товары.Видимость			= НЕ ЭтоОборудование;
	
	////Обязательность заполнения
	//ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного		= ЭтоОборудование;
	//ЭлементыФормы.СтатьяДДС.АвтоОтметкаНезаполненного							= ЭтоОборудование;
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаРаспределитьНаОС.Доступность	= ЭтоОборудование;
	//
	
	//+++АК GEYV 23.07.2015
	//СтатьяДРКомандировка = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("36198");
	//
	//ЕстьСтатьяКомандировки = Услуги.Найти(СтатьяДРКомандировка) <> Неопределено;
	
	//ЭлементыФормы.ПриказНаКомандировку.Видимость = ЕстьСтатьяКомандировки;
	//ЭлементыФормы.НадписьПриказНаКомандировку.Видимость = ЕстьСтатьяКомандировки; 
	//---АК
	//+++АК БЕЛН 11.07.2016
	ЭлементыФормы.ЗаявкаНаОплату.Доступность=Не РазличныеЗаявки;
	ЭлементыФормы.Товары.Колонки.ЗаявкаНаОплату.Видимость=РазличныеЗаявки;
	ЭлементыФормы.Услуги.Колонки.ЗаявкаНаОплату.Видимость=РазличныеЗаявки;
	ЭлементыФормы.Прочее.Колонки.ЗаявкаНаОплату.Видимость=РазличныеЗаявки;
	//---АК БЕЛН 11.07.2016
КонецПроцедуры

Процедура УстановитьДоступностьСписаниеСКорпоративнойКарты()
	
	ЭлементыФормы.НомерКорпоративнойКарты.Доступность 	= ЭтотОбъект.СписаниеСКорпоративнойКарты;
	ЭлементыФормы.СуммаТранзакцииБанка.Доступность 		= ЭтотОбъект.СписаниеСКорпоративнойКарты;
	ЭлементыФормы.НаименованиеОперацииБанка.Доступность = ЭтотОбъект.СписаниеСКорпоративнойКарты;
	
	Если ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		//ЭтаФорма.НомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.НайтиПоРеквизиту("ФизЛицо", ЭтотОбъект.ФизЛицо);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо"		, ЭтотОбъект.ФизЛицо);
		Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КорпоративныеБанковскиеКарты.Ссылка
		|ИЗ
		|	Справочник.КорпоративныеБанковскиеКарты КАК КорпоративныеБанковскиеКарты
		|ГДЕ
		|	КорпоративныеБанковскиеКарты.ФизЛицо = &ФизЛицо
		|	И КорпоративныеБанковскиеКарты.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		//+++АК ILIK 2018.10.12 ИП-00020105
		//|	КорпоративныеБанковскиеКарты.ПометкаУдаления";
		|	КорпоративныеБанковскиеКарты.ПометкаУдаления,
		|	КорпоративныеБанковскиеКарты.Закрыта";
		//---АК ILIK
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтаФорма.НомерКорпоративнойКарты = Выборка.Ссылка;
		КонецЕсли;	
	Иначе
	    ЭтаФорма.НомерКорпоративнойКарты = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ОтчетПоКорпоративнымКартам.Доступность = ЭтотОбъект.СписаниеСКорпоративнойКарты;
	
КонецПроцедуры

Процедура УстановитьДоступностьТТОборудования()
	
	//ЕстьДоступность = (ЭтотОбъект.ПриходныеОрдера.Количество() = 0);
	//ЭлементыФормы.Оборудование.Колонки.ТорговаяТочка.Видимость 	= ЕстьДоступность;
	//ЭлементыФормы.Оборудование.Колонки.Инвестиция.Видимость 	= ЕстьДоступность;
	
КонецПроцедуры

Процедура ПерераспределитьСальдо(Кнопка)
	
	ФормаОбработки = Обработки.ПерераспределениеСуммПодотчетника.ПолучитьФорму();
	ФормаОбработки.Объект.Дата			= ТекущаяДата();
	ФормаОбработки.Объект.Организация	= ЭтотОбъект.Организация;
	ФормаОбработки.Объект.ФизЛицо		= ЭтотОбъект.ФизЛицо;
	ФормаОбработки.Объект.АвансовыйОтчет= ЭтотОбъект.Ссылка;
	ФормаОбработки.Открыть();
	
КонецПроцедуры
	
Процедура ЗаполнитьТекстКонОст()
	
	Остаток		= 0;
	Перерасход	= 0;
	Если (СальдоТекОрг - ЭтотОбъект.СуммаДокумента) < 0 Тогда
		Перерасход	= Перерасход	- (СальдоТекОрг - ЭтотОбъект.СуммаДокумента);
	Иначе
		Остаток		= Остаток		+ СальдоТекОрг - ЭтотОбъект.СуммаДокумента;
	КонецЕсли;	
	
	ИОстаток	= 0;
	ИПерерасход	= 0;
	Если (СальдоТекОрг + СальдоОстальных - ЭтотОбъект.СуммаДокумента) < 0 Тогда
		ИПерерасход	= ИПерерасход	- (СальдоТекОрг + СальдоОстальных - ЭтотОбъект.СуммаДокумента);
	Иначе
		ИОстаток	= ИОстаток		+ (СальдоТекОрг + СальдоОстальных - ЭтотОбъект.СуммаДокумента);
	КонецЕсли;	
			
	КНОстаток		= Остаток;
	КНПерерасход	= Перерасход;
	КИНОстаток		= ИОстаток;
	КИНПерерасход	= ИПерерасход;
	
КонецПроцедуры	

Процедура ЗаполнитьТекстЗадолженности()
	
	//				 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	, ЭтотОбъект.Дата - 1);
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.Наличные Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами);
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.БезНаличные Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Финансовый.НайтиПоКоду("71.3"));
	КонецЕсли;	
	Запрос.УстановитьПараметр("ФизЛицо"	, ЭтотОбъект.ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйОстатки.СуммаОстаток КАК Остаток,
	|	ФинансовыйОстатки.Субконто1 КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет = &Счет, , Субконто2 = &ФизЛицо) КАК ФинансовыйОстатки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СальдоТекОрг	= 0;
	СальдоОстальных	= 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Организация = ЭтотОбъект.Организация Тогда
			СальдоТекОрг	= СальдоТекОрг		+ Выборка.Остаток;
		Иначе
			СальдоОстальных	= СальдоОстальных	+ Выборка.Остаток;
		КонецЕсли;	
	КонецЦикла;	
    //ЭлементыФормы.НадписьЗадолженностьНаНачало.Заголовок="Нач.ост по тек.орг: "+-СальдоТекОрг+"("+(-СальдоТекОрг-СальдоОстальных)+"- всего)";
	
	Остаток		= 0;
	Перерасход	= 0;
	Если СальдоТекОрг < 0 Тогда
		Перерасход	= Перерасход	- СальдоТекОрг;
	Иначе
		Остаток		= Остаток		+ СальдоТекОрг;
	КонецЕсли;	
	
	ИОстаток	= 0;
	ИПерерасход	= 0;
	Если (СальдоТекОрг + СальдоОстальных) < 0 Тогда
		ИПерерасход	= ИПерерасход	- СальдоОстальных - СальдоТекОрг;
	Иначе
		ИОстаток	= ИОстаток		+ СальдоОстальных + СальдоТекОрг;
	КонецЕсли;	
			
	НОстаток		= Остаток;
	НПерерасход		= Перерасход;
	ИНОстаток		= ИОстаток;
	ИНПерерасход	= ИПерерасход;
	
	ЗаполнитьТекстКонОст();
	
КонецПроцедуры	

Процедура ЗаполнитьСуммуДокумента()
	
	ПосчитатьСуммуТабличнойЧасти();
	
	ЭтаФорма.ОстатокСуммыТранзакции = ЭтотОбъект.СуммаТранзакцииБанка - ЭтотОбъект.СуммаДокумента;
	ЗаполнитьТекстКонОст();
	
КонецПроцедуры

Функция ПолучитьСуммуТранзакцииБанка()
	
	Запрос = Новый Запрос;
	
	//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
	//Запрос.УстановитьПараметр("ДатаОстатков"		, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	ДатаОстатков = ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ДатаОстатков"		, ДатаОстатков);
	
	Запрос.УстановитьПараметр("Организация"			, ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("КорпоративнаяКарта"	, ЭтаФорма.НомерКорпоративнойКарты);
	
	Запрос.УстановитьПараметр("СчетПереводыНаКартыСотрудников", ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ДатаОстатков)));
	//---АК LAGP
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетПереводыНаКартыСотрудников,
	|			,
	|			Субконто1 = &Организация
	|				И Субконто3 = &КорпоративнаяКарта) КАК ФинансовыйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


///////////////////
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Авансовый отчет");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЭтоНовый()
			И ЗначениеЗаполнено(ПараметрОснование)
			И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерСклад")
			И НЕ ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
		
		Поступление = Документы.ПоступлениеТоваровУслуг.НайтиПоступлениеПоПриходнику(ПараметрОснование);
		Если НЕ Поступление = Неопределено Тогда
			Поступление.ПолучитьФорму().Открыть();
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
		
		////Установка текущей страницы
		//Если Товары.Количество() > 0 Тогда
		//	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Товары;
		////ИначеЕсли Оборудование.Количество() > 0 Тогда
		////	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Оборудование;
		//ИначеЕсли Услуги.Количество() > 0 Тогда
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Товары;
		//КонецЕсли;
	Иначе
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			//Если НЕ ЗначениеЗаполнено(ВидОперации)Тогда
			//	ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
			//КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВариантРасчетаНДС)Тогда
				ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
			
		Иначе
			//ИД = 0;
		КонецЕсли;
		//ВыгружатьВ_БП=истина;
		ЭтотОбъект.Склад 				= Справочники.Склады.НайтиПоКоду("000000882");
		ЭтотОбъект.СтруктурнаяЕдиница	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000250");
	КонецЕсли;
	
	//ЕстьПравоРедактировать = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзменениеЦеныИСуммыВДокументе, Ложь);
	//ЭлементыФормы.Товары.Колонки.Сумма.ТолькоПросмотр		= НЕ ЕстьПравоРедактировать;
	//ЭлементыФормы.Товары.Колонки.СтавкаНДС.ТолькоПросмотр	= НЕ ЕстьПравоРедактировать;
	//
	//ЭлементыФормы.Товары.Колонки.Цена.ТолькоПросмотр = НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
	//
	//ДобавитьТоварыИзОрдеров(, Истина);
	//
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	УстановитьВидимостьДоступность();
	УстановитьДоступностьСписаниеСКорпоративнойКарты();
	
	//УстановитьДоступностьТТОборудования();
	ЗаполнитьТекстЗадолженности();

	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение
	//		И ЭтотОбъект.Товары.Количество() > 0
	//		И ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
	//	Сообщить("Поступление товара не может быть проведено без указания приходного ордера (склад)");
	//	Отказ = Истина;
	//КонецЕсли;	
	//
	//	
	//	ДобавитьТоварыИзОрдеров(Отказ);
	//	
	//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
	//			И ЭтотОбъект.ПриходныеОрдера.Количество() > 0 Тогда
	//		
	//		ЕстьОшибки = Ложь;
	//		Для Каждого Строка Из ЭтотОбъект.ПриходныеОрдера Цикл
	//			Если Строка.ПриходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
	//				ЕстьОшибки = Истина;
	//			КонецЕсли;
	//		КонецЦикла;
	//	
	//		Если ЕстьОшибки Тогда
	//			ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ! Имеются приходные ордера с видом операции отличным от <<Поступление от поставщика>>", Отказ);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	
	ЕстьОсновныеСредства = Ложь;
	
	Для каждого Строка из ЭтотОбъект.Товары Цикл
		
		Если Строка.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
			ЕстьОсновныеСредства = Истина;
		КонецЕсли;	
			
		Если Строка.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы
				ИЛИ Строка.СчетУчета = ПланыСчетов.Финансовый.ГСМ Тогда
			 
			Если Строка.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Материал Тогда	 
			 
				Сообщить("На счет " + Строка.СчетУчета + " можно отнести только номенклатуру с типом материал");
				Отказ = Истина;
				
			КонецЕсли;
			
		 КонецЕсли;
		
	КонецЦикла;	
	
	Если ЕстьОсновныеСредства Тогда
		Если НЕ ЗначениеЗаполнено(СтатьяЗатрат)
				И НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			Сообщить("Для последующего списания инвентаря необходимо указать статью затрат");	
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	//АК_УчетМСФО.УстановитьДатуОтраженияМСФО(ЭтотОбъект);
	
	//+++АК Susk (Суслин К.В.) 2018.08.30 ИП-00019041.02
	РаботаСДиалогамиКлиент.ПроверитьСтатьюДДССчетУчетаРасчетовОбъектаСВопросом(ЭтотОбъект);
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//Если НЕ Отказ
	//		И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
	//		И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ДокументОснование", ЭтотОбъект.ДокументОснование);
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
	//	|ИЗ
	//	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//	|ГДЕ
	//	|	ПоступлениеТоваровУслуг.ДокументОснование = &ДокументОснование
	//	|	И ПоступлениеТоваровУслуг.Проведен";
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ЗначениеЗаполнено(Выборка.СуммаДокумента)
	//				И Выборка.СуммаДокумента > ЭтотОбъект.ДокументОснование.СуммаДокумента Тогда
	//			Предупреждение("Сумма поступлений, привязанных к заявке <" + ЭтотОбъект.ДокументОснование + ">, превысила сумму заявки", 60);
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//КонецЕсли;	
		
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (в т. ч.):";	
	Иначе
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
	ЭлементыФормы.СуммаНДС.Значение = ЭтотОбъект.Товары.Итог("СуммаНДС") + ЭтотОбъект.Услуги.Итог("СуммаНДС") ;
	
КонецПроцедуры


///////////////////
// Реквизиты формы
///////////////////

Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьТекстЗадолженности();
	
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Элемент)
	
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос("Табличная часть документа будет очищена. Продолжить?", Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	Товары.Очистить();
	//КонецЕсли;
	Если Элемент.Значение = Перечисления.ВидыОперацийАвансовогоОтчета.Наличные
			И ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		ЭтотОбъект.СписаниеСКорпоративнойКарты 	= Ложь;	
		ЭтотОбъект.СуммаТранзакцииБанка 		= 0;	
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	УстановитьДоступностьСписаниеСКорпоративнойКарты();
	
	ЗаполнитьТекстЗадолженности();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(ЭтотОбъект.Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	Если НЕ ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
		ЭтотОбъект.Склад = Справочники.Склады.НайтиПоКоду("000000882");
	КонецЕсли;	
	
	ЗаполнитьТекстЗадолженности();
	
КонецПроцедуры

Процедура НеВыгружатьВБУПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение = ЭтотОбъект.Склад.Владелец Тогда
		ЭтотОбъект.Склад = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизЛицоПриИзменении(Элемент)
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	СотрудникиОрганизаций.Ссылка
	//			 |ИЗ
	//			 |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	//			 |ГДЕ
	//			 |	НЕ СотрудникиОрганизаций.ПометкаУдаления
	//			 |	И СотрудникиОрганизаций.Физлицо = &Физлицо
	//			 |	И СотрудникиОрганизаций.ДатаУвольнения = &ПустаяДата
	//			 |	И СотрудникиОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)";
	//Запрос=Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("Физлицо",ФизЛицо);
	//Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
	//Выборка=Запрос.Выполнить().Выбрать();
	//Если выборка.Следующий() Тогда
	//	Организация=Выборка.ссылка.Организация;
	ОргФЛ = ОбщиеПроцедуры.ПолучитьОрганизациюФизЛица(ЭтотОбъект.ФизЛицо, ЭтотОбъект.Дата);
	Если ЗначениеЗаполнено(ОргФЛ) Тогда
		ЭтотОбъект.Организация = ОргФЛ;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;
	
	ЗаполнитьТекстЗадолженности();
	
	Если ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		ЭтаФорма.НомерКорпоративнойКарты = Элемент.Значение.НомерКорпоративнойКарты;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	//ЭтотОбъект.СтруктурнаяЕдиница = Элемент.Значение.Владелец;
	
КонецПроцедуры

Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		СтандартнаяОбработка = Ложь;
		    
		Форма = Справочники.Склады.ПолучитьФормуВыбора(, ЭтаФорма);
		Форма.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		Результат = Форма.ОткрытьМодально();
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Элемент.Значение = Результат;
			СкладПриИзменении(Неопределено);
		КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	//Товары
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		Если Элемент.Значение = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		КонецЕсли;
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;	
	
	ЗаполнитьСуммуДокумента();
	
	//Оборудование
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		
		Если Элемент.Значение = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		КонецЕсли;
		Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СписаниеСКорпоративнойКартыПриИзменении(Элемент)
	
	Если ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.БезНаличные Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовогоОтчета.БезНаличные;
			
			УстановитьВидимостьДоступность();
			ЗаполнитьТекстЗадолженности();
		КонецЕсли;
	Иначе
		ЭтотОбъект.СуммаТранзакцииБанка 	= 0;
	КонецЕсли;
	
	УстановитьДоступностьСписаниеСКорпоративнойКарты();
	
КонецПроцедуры

Процедура СуммаТранзакцииБанкаПриИзменении(Элемент)

	ЭтаФорма.ОстатокСуммыТранзакции = Элемент.Значение - ЭтотОбъект.СуммаДокумента;
	
КонецПроцедуры

Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;

КонецПроцедуры


///////////////
// ТОВАРЫ
///////////////

Процедура КоманднаяПанельТоварыОбновитьЦены(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
	КонецЦикла;
	
	ЗаполнитьСуммуДокумента();
	
КонецПроцедуры

Функция ПолучитьКоличествоВОрдерах(мНоменклатура)
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ПриходныйОрдерСкладТовары.Номенклатура = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().Итог("Количество");
	
КонецФункции

Процедура КоманднаяПанельТоварыПроверено(Кнопка)
	
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
	//	
	//	СтрокаТЧ.ПоПриходнымОрдерам = ПолучитьКоличествоВОрдерах(СтрокаТЧ.Номенклатура);	 
	//	
	//КонецЦикла;
	
КонецПроцедуры


Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСуммуДокумента();
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мЯчейки = ОформлениеСтроки.Ячейки;
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, мЯчейки, ДанныеСтроки.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
		Если (ДанныеСтроки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы)				
				И ДанныеСтроки.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал)
				ИЛИ ДанныеСтроки.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
			
			мЯчейки.Субконто1.УстановитьТекст("<Авто>");
			мЯчейки.Субконто1.ЦветТекста = ЦветаСтиля.СтатусОтложен;
			
			мЯчейки.Субконто2.УстановитьТекст("<Авто>");
			мЯчейки.Субконто2.ЦветТекста = ЦветаСтиля.СтатусОтложен;
			
			мЯчейки.Субконто3.УстановитьТекст("<Авто>");
			мЯчейки.Субконто3.ЦветТекста = ЦветаСтиля.СтатусОтложен;
			
		КонецЕсли;
	КонецЕсли;	

	Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда	
		
		мЯчейки.ЗаводскойНомер.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.ЗаводскойНомер);	
		мЯчейки.ИнвентарныйНомер.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.ИнвентарныйНомер);	
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	//ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	//МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	//
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ПриходныйОрдерСкладТовары.Номенклатура
	//|ИЗ
	//|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	//|ГДЕ
	//|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	//|	И ПриходныйОрдерСкладТовары.Номенклатура = &Номенклатура"
	//);
	//Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	//Запрос.УстановитьПараметр("Номенклатура"	, ТекущиеДанные.Номенклатура);
	//
	//Если НЕ Запрос.Выполнить().Пустой() Тогда
	//	Предупреждение("Товар присутствует в ордерах. Удаление строки запрещено!");
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	//	
	//	ВОрдерах = ПолучитьКоличествоВОрдерах(ОформлениеСтроки.ДанныеСтроки.Номенклатура);	
	//	ПредыущееКоличествоВНакладной = ОформлениеСтроки.ДанныеСтроки.ПоПриходнымОрдерам;
	//	
	//	Если ВОрдерах <> ПредыущееКоличествоВНакладной Тогда
	//		ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ПредыущееКоличествоВНакладной, "ЧДЦ=3")) + " → " + Строка(Формат(ВОрдерах, "ЧДЦ=3"));
	//		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	//	Иначе
	//		ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ВОрдерах, "ЧДЦ=3"));
	//		ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекНоменклатура = Элемент.Значение;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(ТекНоменклатура, Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);

		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		#Область ЗакоментКод_ТоварыНоменклатураПриИзменении
		//Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//		ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; //.Товары;
		////ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		////	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//КонецЕсли;
		////
		////Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		////	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		////КонецЕсли;		
		//
		//СтрокаТабличнойЧасти.СчетУчета = ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения, ТекСчетУчета);
		#КонецОбласти
		
		Колонки = ЭлементыФормы.Товары.Колонки;
	    
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетУчета, 
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);
		
		//+++АК SHEP 20161122
		//взял из поступления
		//СтрокаТабличнойЧасти.СтатьяТовародвижения = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
			СтрокаТабличнойЧасти.СтатьяТовародвижения = ?(Дата >= '20150801', Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика, Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
		Иначе
			СтрокаТабличнойЧасти.СтатьяТовародвижения = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПрочиеМатериалы;
		КонецЕсли;
		//---АК SHEP 20161122
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= ТекНоменклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент 		= ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС		= ТекНоменклатура.СтавкаНДС;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидНоменклатуры.Доступность = Ложь;
	//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка Тогда
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.ВСписке;
		СписокВидовНоменклатуры = Новый СписокЗначений;
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Товар);
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Материал);
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = СписокВидовНоменклатуры;
		//ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = СписокВидовНоменклатуры;
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
	//	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.Равно;
	//	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = Перечисления.ВидыНоменклатуры.Оборудование;
	//КонецЕсли;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
	Если НЕ НовоеЗначениеКоэффициента = СтароеЗначениеКоэффициента Тогда
		СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
		ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество, 2));
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыСуммаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	//РазрешеноРедактированиеСумм = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
	//
	//Если Не РазрешеноРедактированиеСумм Тогда
	//	
	//	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	//	
	//	// Проверим пределы редактирования суммы
	//	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	//	
	//	НайденноеЗначение = Неопределено;
	//	СтруктураПределов.Свойство("СуммаМаксимум", НайденноеЗначение);
	//	
	//	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
	//		СтандартнаяОбработка = Ложь;
	//		Значение = СтрокаТабличнойЧасти.Сумма;
	//		Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
	//		Возврат;
	//	КонецЕсли;
	//	
	//	НайденноеЗначение = Неопределено;
	//	СтруктураПределов.Свойство("СуммаМинимум", НайденноеЗначение);
	//	
	//	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
	//		СтандартнаяОбработка = Ложь;
	//		Значение = СтрокаТабличнойЧасти.Сумма;
	//		Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСуммаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	//СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	//
	//// Проверим пределы редактирования суммы
	//СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	//
	//НайденноеЗначение = Неопределено;
	//СтруктураПределов.Свойство("СуммаНДСМаксимум", НайденноеЗначение);
	//
	//Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Значение = СтрокаТабличнойЧасти.СуммаНДС;
	//	Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
	//	Возврат;
	//КонецЕсли;
	//
	//НайденноеЗначение = Неопределено;
	//СтруктураПределов.Свойство("СуммаНДСМинимум", НайденноеЗначение);
	//
	//Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Значение = СтрокаТабличнойЧасти.СуммаНДС;
	//	Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры


///////////////
// УСЛУГИ
///////////////

Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ЗаполнитьСуммуДокумента();
	
КонецПроцедуры

Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	
	
	ТекНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
	Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.06");
		СтрокаТабличнойЧасти.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.06");
	ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
		СтрокаТабличнойЧасти.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	КонецЕсли;	
	
	
	Колонки = ЭлементыФормы.Услуги.Колонки;
    попытка
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
			СтрокаТабличнойЧасти.СубконтоБУ1, Колонки.Субконто1,
			СтрокаТабличнойЧасти.СубконтоБУ2, Колонки.Субконто2,
			СтрокаТабличнойЧасти.СубконтоБУ3, Колонки.Субконто3);
	исключение
		Сообщить("Неверно настроены субконто в плане счетов БУ для счета " + СтрокаТабличнойЧасти.СчетЗатратБУ);
	конецпопытки;		
		
	ЗаполнитьСчетНалоговогоУчета();
	
КонецПроцедуры

Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
	
КонецПроцедуры

Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
	
КонецПроцедуры

Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДСТабЧасти(ТекДанные, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
													СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
													СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);
	
	//мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	//Если ЭтотОбъект.Проведен
	//		И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
	//		И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
	//		И НЕ мНеПроверять Тогда
	//	
	//	мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
	//	Если НЕ СтрокаТабличнойЧасти.Субконто2 = мСтатьяДР Тогда
	//		СтрокаТабличнойЧасти.Субконто2 = мСтатьяДР;
	//	КонецЕсли;
	//								
	//КонецЕсли;
		
КонецПроцедуры

Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.СубконтоБУ1, Колонки.СубконтоБУ1,
		СтрокаТабличнойЧасти.СубконтоБУ2, Колонки.СубконтоБУ2,
		СтрокаТабличнойЧасти.СубконтоБУ3, Колонки.СубконтоБУ3);
		
	ЗаполнитьСчетНалоговогоУчета();

КонецПроцедуры

Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.СубконтоНУ1, Колонки.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2, Колонки.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3, Колонки.СубконтоНУ3);

КонецПроцедуры

Процедура УслугиСубконтоБУ1ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.СубконтоБУ1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры

Процедура УслугиСубконтоБУ2ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.СубконтоБУ2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры

Процедура УслугиСубконтоБУ3ПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.СубконтоБУ3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры

Функция МожноРедактироватьСтатьюДРВСтроке(Элемент)
	
	Перем мНеПроверять, мСтатьяДР;
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если ЗначениеЗаполнено(мСтатьяДР)
				И НЕ мСтатьяДР = Элемент.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УслугиСубконто2ПриИзменении(Элемент)
	
	Если НЕ ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если ЗначениеЗаполнено(мСтатьяДР)
				И НЕ мСтатьяДР = Элемент.Значение Тогда
			Сообщить("Недостаточно прав для указания статьи, не соответствующей заявке на расходование средств.");
			Элемент.Значение = мСтатьяДР;
		КонецЕсли;
		
	КонецЕсли;
	
	//+++AK susk	
	ТекСтрока = ЭлементыФормы.Услуги.ТекущаяСтрока;
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") И ТипЗнч(ТекСтрока.СубконтоБУ1) = Тип("СправочникСсылка.СтатьиЗатратБУ") Тогда
		
		ТекСтрока.СубконтоБУ1 = ПолучитьСтатьюЗатратБухПоСтатьеДР(Элемент.Значение, ТекСтрока.СчетЗатрат);
		УслугиСубконтоБУ1ПриИзменении(ЭлементыФормы.Услуги.ТекущаяСтрока.СубконтоБУ1);
		
	КонецЕсли;	
	//---AK susk
	
КонецПроцедуры

Процедура УслугиСубконто2Очистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
		Возврат;
	КонецЕсли;	
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если ЗначениеЗаполнено(мСтатьяДР) Тогда
			Сообщить("Недостаточно прав для указания статьи, не соответствующей заявке на расходование средств.");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;							
	КонецЕсли;
	
	//СтандартнаяОбработка = МожноРедактироватьСтатьюДРВСтроке(Элемент);
	
КонецПроцедуры


/////////////////
// ОБОРУДОВАНИЕ
/////////////////

Процедура Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)
	
	//Используется также в ВариантРасчетаНДСПриИзменении()
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура УстановитьОС(пСтрока)
	
	Если ЗначениеЗаполнено(пСтрока.ОсновноеСредство)
			И Найти(пСтрока.ОсновноеСредство, "<Объект не найден>") = 0 Тогда
		обСпр = пСтрока.ОсновноеСредство.ПолучитьОбъект();
	Иначе
		обСпр = Справочники.ОсновныеСредства.СоздатьЭлемент();
		обСпр.Наименование = пСтрока.Номенклатура.Наименование;
	КонецЕсли;
	
	обСпр.Номенклатура 				= пСтрока.Номенклатура;
	обСпр.ПервоначальнаяСтоимость 	= пСтрока.Сумма;
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	обСпр.ИнвентарныйНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ИнвентарныйНомер);
	обСпр.ЗаводскойНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ЗаводскойНомер);
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер) Тогда
		пСтрока.ИнвентарныйНомер 	= обСпр.Код;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер) Тогда
		пСтрока.ЗаводскойНомер 		= обСпр.Код;
	КонецЕсли;
	
	пСтрока.ОсновноеСредство = обСпр.Ссылка;
	
КонецПроцедуры

Процедура КоманднаяПанельОборудованиеСоздатьОсновныеСредства(Кнопка)
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			УстановитьОС(СтрокаТЧ);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании ОС по строке № " + СтрокаТЧ.НомерСтроки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ОсновноеСредство = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.ОсновноеСредство.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекДанные.Номенклатура = ТекДанные.ОсновноеСредство.Номенклатура Тогда
		ТекДанные.Номенклатура = ТекДанные.ОсновноеСредство.Номенклатура;
	КонецЕсли;
	Если НЕ ТекДанные.ИнвентарныйНомер = ТекДанные.ОсновноеСредство.ИнвентарныйНомер Тогда
		ТекДанные.ИнвентарныйНомер = ТекДанные.ОсновноеСредство.ИнвентарныйНомер;
	КонецЕсли;
	Если НЕ ТекДанные.ЗаводскойНомер = ТекДанные.ОсновноеСредство.ЗаводскойНомер Тогда
		ТекДанные.ЗаводскойНомер = ТекДанные.ОсновноеСредство.ЗаводскойНомер;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	ТекущиеДанные.СтавкаНДС = ТекущиеДанные.Номенклатура.СтавкаНДС;
	
	ОборудованиеСтавкаНДСПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ОборудованиеИнвентарныйНомерПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	ТекущиеДанные.ЗаводскойНомер = ТекущиеДанные.ИнвентарныйНомер;
	
КонецПроцедуры

Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;
	Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
	
КонецПроцедуры

Процедура ОборудованиеСуммаПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;
	Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
	
	ЗаполнитьСуммуДокумента();	//название не совсем адекватно, это расчет суммы документа
	
КонецПроцедуры

Процедура ОборудованиеСуммаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
//	
//	РазрешеноРедактированиеСумм = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
//	
//	Если Не РазрешеноРедактированиеСумм И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
//		
//		СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущаяСтрока;
//		
//		Если НЕ СтрокаТабличнойЧасти.СчетУчетаЗабалансовый.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ОсновныеСредства) Тогда
//			Возврат;
//		КонецЕсли;
//		
//		// Проверим пределы редактирования суммы
//		СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧПоОборудованию(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
//		
//		НайденноеЗначение = Неопределено;
//		СтруктураПределов.Свойство("СуммаМаксимум", НайденноеЗначение);
//		
//		Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//			СтандартнаяОбработка = Ложь;
//			Значение = СтрокаТабличнойЧасти.Сумма;
//			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
//			Возврат;
//		КонецЕсли;
//		
//		НайденноеЗначение = Неопределено;
//		СтруктураПределов.Свойство("СуммаМинимум", НайденноеЗначение);
//		
//		Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//			СтандартнаяОбработка = Ложь;
//			Значение = СтрокаТабличнойЧасти.Сумма;
//			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
//			Возврат;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
КонецПроцедуры

Процедура ОборудованиеСуммаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
//	
//	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущаяСтрока;
//	
//	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ НЕ СтрокаТабличнойЧасти.СчетУчетаЗабалансовый.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ОсновныеСредства) Тогда
//		Возврат;
//	КонецЕсли; 	
//	
//	// Проверим пределы редактирования суммы
//	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧПоОборудованию(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
//	
//	НайденноеЗначение = Неопределено;
//	СтруктураПределов.Свойство("СуммаНДСМаксимум", НайденноеЗначение);
//	
//	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//		СтандартнаяОбработка = Ложь;
//		Значение = СтрокаТабличнойЧасти.СуммаНДС;
//		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
//		Возврат;
//	КонецЕсли;
//	
//	НайденноеЗначение = Неопределено;
//	СтруктураПределов.Свойство("СуммаНДСМинимум", НайденноеЗначение);
//	
//	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//		СтандартнаяОбработка = Ложь;
//		Значение = СтрокаТабличнойЧасти.СуммаНДС;
//		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
//		Возврат;
//	КонецЕсли;
//	
КонецПроцедуры


/////////////////////
// ПРИХОДНЫЕ ОРДЕРА
/////////////////////

Процедура ЗаполнитьТЧПоПриходнымОрдерам()
	
	Если ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
		
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйОрдерСкладОборудование.Номенклатура,
		|	ПриходныйОрдерСкладОборудование.ЗаводскойНомер,
		|	ПриходныйОрдерСкладОборудование.ОсновноеСредство
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Оборудование КАК ПриходныйОрдерСкладОборудование
		|ГДЕ
		|	ПриходныйОрдерСкладОборудование.Ссылка В(&МассивОрдеров)";
		
		ЭтотОбъект.Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			СтрокаТЧ.ИнвентарныйНомер = ?(ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство), СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер, Неопределено);
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК ПоПриходнымОрдерам,
		|	ПриходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|ГДЕ
		|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
		
		ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Счет411 = ПланыСчетов.Финансовый.Товары;
		Счет412 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		Счет08 	= ПланыСчетов.Финансовый.КапитальныеВложения;
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275		
		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");	
		СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
		//---АК Susk (Суслин К.В.)
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275	
				СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТЧ.Номенклатура);			
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);			
			
				//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.

				#Область КомментКод_ЗаполнитьТЧПоПриходнымОрдерам
				//Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
				//		ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
				//	
				//	ТекСчетУчета = Счет411;
				//	
				//ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
				//	
				//	ТекСчетУчета = Счет08;
				//	
				//КонецЕсли;
				//
				//Если СтрокаТЧ.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
				//	ТекСчетУчета = Счет412;
				//КонецЕсли;
				//
				//СтрокаТЧ.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), Счет411, ТекСчетУчета);
				#КонецОбласти
				
				//---АК Susk (Суслин К.В.) 
				
				СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
				
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
					СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
				КонецЕсли;	
				
			КонецЕсли;
			
			ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСуммуДокумента();
	
КонецПроцедуры

Процедура КоманднаяПанельПриходныеОрдераЗаполнить(Кнопка)
	
//	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
//		Предупреждение("Не заполнено поле Контрагент!");
//		Возврат;
//	КонецЕсли;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
//		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0
//				ИЛИ ЭтотОбъект.Оборудование.Количество() > 0 Тогда
//			Текст = "Табличные части ""Приходные ордера"" и ""Оборудование"" будут очищены!" + Символы.ПС + "Продолжить?";
//			Если Вопрос(Текст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
//				Возврат;
//			КонецЕсли;
//			ЭтотОбъект.ПриходныеОрдера.Очистить();
//			ЭтотОбъект.Оборудование.Очистить();
//		КонецЕсли;
//	Иначе
//		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0
//				ИЛИ ЭтотОбъект.Товары.Количество() > 0 Тогда
//			Текст = "Табличные части ""Приходные ордера"" и ""Товары"" будут очищены!" + Символы.ПС + "Продолжить?";
//			Если Вопрос(Текст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
//				Возврат;
//			КонецЕсли;
//			ЭтотОбъект.ПриходныеОрдера.Очистить();
//			ЭтотОбъект.Товары.Очистить();
//		КонецЕсли;
//	КонецЕсли;
//	
//	
//	ФормаПодбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаПодбораПриходныхОрдеров");
//	ФормаПодбора.Поставщик 		= ЭтотОбъект.Контрагент;
//	ФормаПодбора.НомерНакладной = ЭтотОбъект.НомерВходящегоДокумента;
//	ФормаПодбора.ДатаНакладной 	= ЭтотОбъект.ДатаВходящегоДокумента;
//	ФормаПодбора.ПоступлениеТУ 	= ЭтотОбъект.Ссылка;
//	ФормаПодбора.ВидОперации 	= ЭтотОбъект.ВидОперации;
//	
//	Если ФормаПодбора.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
//		МассивОрдеров = ФормаПодбора.Список.ВыгрузитьЗначения();
//		Если МассивОрдеров.Количество() > 0 Тогда
//			
//			ЭтотОбъект.НомерВходящегоДокумента 	= МассивОрдеров[0].НомерНакладной;
//			ЭтотОбъект.ДатаВходящегоДокумента	= МассивОрдеров[0].ДатаНакладной;
//			
//			//Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
//			ЭтотОбъект.СтруктурнаяЕдиница 		= МассивОрдеров[0].Ордер.Склад.Владелец;
//			//КонецЕсли;
//			
//			Для Каждого СтрокаМассива Из МассивОрдеров Цикл
//				НовСтр = ЭтотОбъект.ПриходныеОрдера.Добавить();
//				НовСтр.ПриходныйОрдер = СтрокаМассива.Ордер;
//			КонецЦикла;
//			УстановитьДоступностьТТОборудования();
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//	//
//	ЗаполнитьТЧПоПриходнымОрдерам();		
		
КонецПроцедуры

Процедура ПриходныеОрдераПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
//	УстановитьДоступностьТТОборудования();
	
КонецПроцедуры

Процедура ПриходныеОрдераПослеУдаления(Элемент)
	
//	УстановитьДоступностьТТОборудования();
	
КонецПроцедуры

Процедура ПриходныеОрдераПриходныйОрдерПриИзменении(Элемент)
	
//	ТекСтруктурнаяЕдиница = Элемент.Значение.Склад.Владелец;
//	Если НЕ ЭтотОбъект.СтруктурнаяЕдиница = ТекСтруктурнаяЕдиница Тогда
//		ЭтотОбъект.СтруктурнаяЕдиница = ТекСтруктурнаяЕдиница;
//	КонецЕсли;
//	
//	//
//	ЗаполнитьТЧПоПриходнымОрдерам();		
	
КонецПроцедуры

Процедура ПриходныеОрдераПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

//	СтандартнаяОбработка = Ложь;
//	
//	ФормаВыбора = Документы.ПриходныйОрдерСклад.ПолучитьФормуВыбора(, Элемент);
//	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
//		мОтбор = ФормаВыбора.Отбор.ВидОперации;
//		мОтбор.ВидСравнения 	= ВидСравнения.Равно;
//		мОтбор.Значение 		= Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика;
//		мОтбор.Использование 	= Истина;
//		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
//	КонецЕсли;
//	
//	мОтбор = ФормаВыбора.Отбор.Поставщик;
//	мОтбор.ВидСравнения 	= ВидСравнения.Равно;
//	мОтбор.Значение 		= ЭтотОбъект.Контрагент;
//	мОтбор.Использование 	= Истина;
//	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Поставщик.Доступность = Ложь;
//	
//	ФормаВыбора.Открыть();
	
КонецПроцедуры


Процедура ДействияФормыПерейтиВЖурналПроводок(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	
	//+++АК susk 30/07/2014
	// Если поступление введено на основании заявки на расх. средств, то в структуре подчиненности показывать структуру данной заявки
	
	//РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	
	Если ДокументОснование = Неопределено
			ИЛИ ДокументОснование.Пустая()
			ИЛИ НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	Иначе
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ДокументОснование);
	КонецЕсли;
	//---АК susk                                                 
	
КонецПроцедуры


//+++АК

Процедура ДобавитьТоварыИзОрдеров(Отказ = Ложь, ЭтоОткрытие = Ложь)
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	Если МассивОрдеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ЭтотОбъект.Товары.Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	ПриходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТоварыОрдеров
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.ЕдиницаИзмерения,
	|	ТоварыОрдеров.Количество,
	|	ТоварыОрдеров.Коэффициент
	|ИЗ
	|	ТоварыОрдеров КАК ТоварыОрдеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТоварыОрдеров.Номенклатура = Товары.Номенклатура
	|			И ТоварыОрдеров.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|ГДЕ
	|	Товары.Номенклатура ЕСТЬ NULL 
	|	И Товары.ЕдиницаИзмерения ЕСТЬ NULL "
	);
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("ТЗ"				, ТаблицаТоваров);
	
	Если НЕ Запрос.Выполнить().Пустой()Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если ЭтоОткрытие Тогда
			
			ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, Истина);
			
		Иначе
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "В табличной части ""Товары"" присутствует не вся номенклатура из ордеров." + Символы.ПС +  "Выполнить добавление отсутствующих позиций?";
			Ответ = Вопрос(Текст, Режим, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, ЭтоОткрытие = Ложь)
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
	МассивНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	Выборка.Сбросить();
	//---АК Susk (Суслин К.В.) 
	
	Пока Выборка.Следующий()Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ЭтоОткрытие Тогда
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(НоваяСтрока.Номенклатура);			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСчетов);
		
		#Область ЗакоментКод_ДобавитьСтрокиВТабличнуюЧастьТовары
		//Если НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//	ИЛИ НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	
		//	ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
		//	
		//ИначеЕсли НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	
		//	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//	
		//КонецЕсли;
		//
		//Если НоваяСтрока.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//КонецЕсли;
		//
		//НоваяСтрока.СчетУчета 				= ТекСчетУчета;
		#КонецОбласти
		
		//---АК Susk (Суслин К.В.) 
		
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

	
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = Ложь)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
	
	попытка
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
			СтрокаТабличнойЧасти.СубконтоНУ1, Колонки.СубконтоНУ1,
			СтрокаТабличнойЧасти.СубконтоНУ2, Колонки.СубконтоНУ2,
			СтрокаТабличнойЧасти.СубконтоНУ3, Колонки.СубконтоНУ3);
	исключение
		Сообщить("Неверно настроены субконто в плане счетов БУ для счета "+СтрокаТабличнойЧасти.СчетЗатратБУ);
	конецпопытки;			

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()	

Процедура КнопкаРаспределитьНаОСНажатие(Кнопка)
	
	Если Услуги.Количество() <> 1 Тогда
		Предупреждение("В табличной части ""Услуги"" должна быть ровно одна строка");
		Возврат;
	КонецЕсли;
		
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаРаспределенияУслугПоПриобретениюОС");
	Форма.ИсточникРаспределения = Ссылка;
	Если Форма.ОткрытьМодально() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	//Получим ОС из документа
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Форма.ИсточникРаспределения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.ОсновноеСредство
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Предупреждение("В документе " + Строка(Форма.ИсточникРаспределения) + " нет ОС, или документ еще не записан." + Символы.ПС
					 + "Операция отменена");
		Возврат;
	КонецЕсли;
	
	//Приступаем
	ТаблицаУслугНовая 		= ЭтотОбъект.Услуги.ВыгрузитьКолонки();	//таблица для наполнения
	ОсталосьРаспределить	= ЭтотОбъект.Услуги[0].Сумма;				//чтобы не ушли копейки, если при делении будут доли копеек
	Порция					= Окр(Услуги[0].Сумма / Выборка.Количество(), 2, РежимОкругления.Окр15как20);
	
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = ТаблицаУслугНовая.Добавить();
		
		//скопируем значения реквизитов строки
		Для Каждого Колонка Из ТаблицаУслугНовая.Колонки Цикл
			СтрокаТЧ[Колонка.Имя] = Услуги[0][Колонка.Имя];
		КонецЦикла;
		
		//сумма
		Если Сч = Выборка.Количество() Тогда
			СтрокаТЧ.Сумма			= ОсталосьРаспределить;	//на последнюю строку идет остаток
		Иначе
			СтрокаТЧ.Сумма			= Порция;
			ОсталосьРаспределить	= ОсталосьРаспределить - Порция;
		КонецЕсли;
		
		СтрокаТЧ.Количество	= 1;
		СтрокаТЧ.Цена		= СтрокаТЧ.Сумма;
			
		Сч = Сч + 1;
	КонецЦикла;
	
	ЭтотОбъект.Услуги.Загрузить(ТаблицаУслугНовая);
	
КонецПроцедуры


Процедура ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, Индекс, Префикс = "")
	
	мВидыСубконто 	= ТекДанные["СчетЗатрат" + Префикс].ВидыСубконто;
	ТекВидыСубконто = СтрокаТЧ["СчетЗатрат" + Префикс].ВидыСубконто;
	Если мВидыСубконто.Количество() > (Индекс - 1)
			И ТекВидыСубконто.Количество() > (Индекс - 1)
			И ТекВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения = мВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения Тогда
		СтрокаТЧ["Субконто" + Префикс + Строка(Индекс)] = ТекДанные["Субконто" + Префикс + Строка(Индекс)];
	Иначе
		СтрокаТЧ["Субконто" + Префикс + Строка(Индекс)] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2ДублироватьНаВсеСтроки(Кнопка)
	
	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКолонка = ЭлементыФормы.Услуги.ТекущаяКолонка;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = ТекКолонка.Имя;
	Если ИмяКолонки = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли;
	ТекЗначение = ТекДанные[ИмяКолонки];
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		Если СтрокаТЧ[ИмяКолонки] = ТекЗначение Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяКолонки = "Номенклатура" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
		ИначеЕсли ИмяКолонки = "Количество"
				ИЛИ ИмяКолонки = "Цена"
				ИЛИ ИмяКолонки = "СтавкаНДС" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
		ИначеЕсли ИмяКолонки = "Сумма" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект.ВариантРасчетаНДС);
		ИначеЕсли ИмяКолонки = "СчетЗатрат" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			СтрокаТЧ.Субконто1 = ТекДанные.Субконто1;
			СтрокаТЧ.Субконто2 = ТекДанные.Субконто2;
			СтрокаТЧ.Субконто3 = ТекДанные.Субконто3;
		ИначеЕсли ИмяКолонки = "Субконто1" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1);
		ИначеЕсли ИмяКолонки = "Субконто2" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2);
		ИначеЕсли ИмяКолонки = "Субконто3" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3);
		ИначеЕсли ИмяКолонки = "СчетЗатратБУ" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			СтрокаТЧ.СубконтоБУ1 = ТекДанные.СубконтоБУ1;
			СтрокаТЧ.СубконтоБУ2 = ТекДанные.СубконтоБУ2;
			СтрокаТЧ.СубконтоБУ3 = ТекДанные.СубконтоБУ3;
		ИначеЕсли ИмяКолонки = "СубконтоБУ1" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1, "БУ");
		ИначеЕсли ИмяКолонки = "СубконтоБУ2" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2, "БУ");
		ИначеЕсли ИмяКолонки = "СубконтоБУ3" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3, "БУ");
		ИначеЕсли ИмяКолонки = "СчетЗатратНУ" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			СтрокаТЧ.СубконтоНУ1 = ТекДанные.СубконтоНУ1;
			СтрокаТЧ.СубконтоНУ2 = ТекДанные.СубконтоНУ2;
			СтрокаТЧ.СубконтоНУ3 = ТекДанные.СубконтоНУ3;
		ИначеЕсли ИмяКолонки = "СубконтоНУ1" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1, "НУ");
		ИначеЕсли ИмяКолонки = "СубконтоНУ2" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2, "НУ");
		ИначеЕсли ИмяКолонки = "СубконтоНУ3" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3, "НУ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыАвансовыйОтчет(Кнопка)
	
	Печать("Аванс_Отчет");
	
КонецПроцедуры

Процедура ПрочееСчетДтПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Прочее.ТекущиеДанные;
	Колонки = ЭлементыФормы.Прочее.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1Дт, Колонки.Субконто1Дт,
													СтрокаТабличнойЧасти.Субконто2Дт, Колонки.Субконто2Дт,
													СтрокаТабличнойЧасти.Субконто3Дт, Колонки.Субконто3Дт);
КонецПроцедуры

Процедура ПрочееСчетКтПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Прочее.ТекущиеДанные;
	Колонки = ЭлементыФормы.Прочее.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1Кт, Колонки.Субконто1Кт,
													СтрокаТабличнойЧасти.Субконто2Кт, Колонки.Субконто2Кт,
													СтрокаТабличнойЧасти.Субконто3Кт, Колонки.Субконто3Кт);

КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект", ЭтотОбъект.Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();

КонецПроцедуры

Процедура ДействияФормыСоздатьЗаявку_ПКО(Кнопка)
	
	СуммаДолга = ( - СальдоТекОрг + ЭтотОбъект.СуммаДокумента);
		
	Если СуммаДолга < 0 Тогда
		
		ПКО = Документы.ПоступлениеВКассу.СоздатьДокумент();
		ПКО.Организация			= ЭтотОбъект.Организация;
		ПКО.Дата				= ЭтотОбъект.Дата;
		ПКО.ВидОперации			= Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		//ПКО.Комментарий		= "Сформирован обработкой перераспределения сумм подотчетника";
		ПКО.ПринятоОт			= ЭтотОбъект.ФизЛицо.Наименование;
		ПКО.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012");
		ПКО.СтруктурнаяЕдиница 	= ЭтотОбъект.СтруктурнаяЕдиница;
		ПКО.СубконтоКт1			= ЭтотОбъект.Организация;
		ПКО.СубконтоКт2			= ЭтотОбъект.ФизЛицо;
		ПКО.СуммаДокумента		= - СуммаДолга;
		ПКО.СчетБУ				= ПланыСчетов.Хозрасчетный.НайтиПоКоду("71");
		ПКО.СчетКасса			= ПланыСчетов.Хозрасчетный.НайтиПоКоду("50");
		ПКО.СчетУчетаРасчетовСКонтрагентом	= ПланыСчетов.Финансовый.НайтиПоКоду("71.1");
		ПКО.ТорговаяТочка		= ЭтотОбъект.СтруктурнаяЕдиница;
		ПКО.ПолучитьФорму().Открыть();
		
	ИначеЕсли СуммаДолга > 0 Тогда
		
		Заявка = Документы.ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		Заявка.Дата					= ЭтотОбъект.Дата;
		Заявка.Организация			= ЭтотОбъект.Организация;
		Заявка.ФормаОплаты			= Перечисления.ФормыОплаты.Наличные;
		Заявка.БанковскийСчетКасса	= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		Заявка.Контрагент			= ЭтотОбъект.ФизЛицо;
		Заявка.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012");
		Заявка.ДатаРасхода			= Макс(ЭтотОбъект.Дата, ТекущаяДата());
		Заявка.НазначениеПлатежа	= "Выдача в подотчет на основании авансовового отчета";
		МассивЦФО = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ЭтотОбъект.Дата, ЭтотОбъект.Ответственный);
		Если МассивЦФО.Количество() > 0 Тогда
			Заявка.ЦФО 				= МассивЦФО[0].Значение;
		КонецЕсли;

		Заявка.СуммаДокумента		= СуммаДолга;
		Заявка.ПолучитьФорму().Открыть();
		
	КонецЕсли;	

КонецПроцедуры

// Рассчитывает сумму взаиморасчетов в строке ТЧ "Оплата поставщикам".
//
Процедура РассчитатьСуммуВзаиморасчетов()

	СтрокаПлатеж = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.Сумма*СтрокаПлатеж.КурсВзаиморасчетов;

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Колонки = ЭлементыФормы.Товары.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
													СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
													СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);

КонецПроцедуры

//
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСуммуДокумента();
	
КонецПроцедуры

Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если ТекДанные.ДоговорКонтрагента.Пустая() Тогда
		ТекДанные.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ТекДанные.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	
	СтрокаПлатеж.КурсВзаиморасчетов      = 1;
	СтрокаПлатеж.КратностьВзаиморасчетов = 1;

КонецПроцедуры

Процедура ОплатаПоставщикамСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	Колонки = ЭлементыФормы.ОплатаПоставщикам.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
													СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
													СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);


КонецПроцедуры

Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

//
Процедура ВыданныеАвансыДокументАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВыданныеАвансы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДокументАванса <> Неопределено Тогда
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ДокументАванса.СуммаДокумента;
		
		// Если ФизЛицо еще не было выбрано, заполним его по документу аванса
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументАванса)
			И НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			
			//Если ТипЗнч(СтрокаТабличнойЧасти.ДокументАванса) = Тип("ДокументСсылка.РасходИзБанка") Тогда
			//	ФизЛицо = СтрокаТабличнойЧасти.ДокументАванса.ФизЛицо;
			//Иначе
				ФизЛицо = СтрокаТабличнойЧасти.ДокументАванса.Контрагент;
			//КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументАванса) Тогда
		
		СтрокаТабличнойЧасти.Сумма = 0;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыданныеАвансыДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Отбор = Новый Структура("Организация", Организация);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ВыданныеАвансы");
	
	// Надо отфильтровать список по физ. лицу .
	
	Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		ФормаВыбора = Документы.РасходИзКассы.ПолучитьФормуВыбора(,Элемент,);
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ФормаВыбора.Отбор.Контрагент.Установить(ФизЛицо);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.РасходИзБанка") Тогда
		
		ФормаВыбора = Документы.РасходИзБанка.ПолучитьФормуВыбора(,Элемент,);
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ФормаВыбора.Отбор.ФизЛицо.Установить(ФизЛицо);
		КонецЕсли;		
		
	//ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
	//	
	//	ФормаВыбора = Документы.ВыдачаДенежныхДокументов.ПолучитьФормуВыбора(,Элемент,);
	//	ФормаВыбора.Отбор.ВидОперации.Установить(Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу);
	//	Если ЗначениеЗаполнено(ФизЛицо) Тогда
	//		ФормаВыбора.Отбор.Контрагент.Установить(ФизЛицо);
	//	КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ФормаВыбора = Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;


КонецПроцедуры

Процедура ВыданныеАвансыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ДокументАванса <> неопределено Тогда
		Если ЭлементыФормы.ВыданныеАвансы.Колонки.СуммаАванса.Видимость Тогда
			ОформлениеСтроки.Ячейки.СуммаАванса.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.ДокументАванса.СуммаДокумента));
		КонецЕсли;
		
		//Если ЭлементыФормы.ВыданныеАвансы.Колонки.Валюта.Видимость Тогда
		//	ОформлениеСтроки.Ячейки.Валюта.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.ДокументАванса.ВалютаДокумента));
		//КонецЕсли;
		
		Если ЭлементыФормы.ВыданныеАвансы.Колонки.Выдано.Видимость Тогда
			ОформлениеСтроки.Ячейки.Выдано.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.ДокументАванса.СуммаДокумента));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанель4ЗаполнитьДокументамиЗаПериод(Кнопка)
	
	Если Вопрос("Перезаполнить выданные авансы документами за период?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	ВыданныеАвансы.Очистить();
	
	ДатаС = НачалоМесяца(ТекущаяДата());
	ВвестиДату(ДатаС, "Введите дату начала периода");
	ДатаПо = КонецМесяца(ТекущаяДата());
	ВвестиДату(ДатаПо, "Введите дату окончания периода");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ДокументАванса,
	|	РасходИзКассы.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.Контрагент = &Контрагент
	|	И РасходИзКассы.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПодотчетными))
	|	И РасходИзКассы.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзБанка.Ссылка,
	|	РасходИзБанка.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.Контрагент = &Контрагент
	|	И РасходИзБанка.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПодотчетными))
	|	И РасходИзБанка.Дата МЕЖДУ &ДатаС И &ДатаПо";
	
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ДатаС"		, ДатаС);
	Запрос.УстановитьПараметр("ДатаПо"		, ДатаПо);
	Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.ФизЛицо);
	
	ВыданныеАвансы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура НомерКорпоративнойКартыПриИзменении(Элемент)
	
	ЭтотОбъект.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

Процедура НомерКорпоративнойКартыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//Если ЭтотОбъект.ФизЛицо.Пустая() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ФормаВыбора = Справочники.КорпоративныеБанковскиеКарты.ПолучитьФормуВыбора(, Элемент);
	//
	//ФормаВыбора.Элементы.Список.ТекущаяСтрока = Элемент.Значение;

	//мСписок = ФормаВыбора.Список;
	//ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ФизЛицо");   
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование  = Истина;
	//ЭлементОтбора.ПравоеЗначение = ЭтотОбъект.ФизЛицо;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//
	//ФормаВыбора.Открыть();
	
КонецПроцедуры

//+++АК GEYV 22.05.2015

Процедура ОсновныеДействияФормыПечатьКомандировка(Кнопка)
	Печать("Командировка");
КонецПроцедуры


Процедура ТранзакцииБанкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//МассивСумм = Новый Массив;
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
	//	Если МассивСумм.Найти(СтрокаТЧ.Сумма) = Неопределено Тогда
	//		МассивСумм.Добавить(СтрокаТЧ.Сумма);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
	//	Если МассивСумм.Найти(СтрокаТЧ.Сумма) = Неопределено Тогда
	//		МассивСумм.Добавить(СтрокаТЧ.Сумма);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Прочее Цикл
	//	Если МассивСумм.Найти(СтрокаТЧ.Сумма) = Неопределено Тогда
	//		МассивСумм.Добавить(СтрокаТЧ.Сумма);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.ОплатаПоставщикам Цикл
	//	Если МассивСумм.Найти(СтрокаТЧ.Сумма) = Неопределено Тогда
	//		МассивСумм.Добавить(СтрокаТЧ.Сумма);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	//	
	//	ТекСумма = ОформлениеСтроки.ДанныеСтроки.Сумма;
	//	
	//	Если НЕ МассивСумм.Найти(ТекСумма) = Неопределено Тогда
	//		ОформлениеСтроки.Ячейки.ОтчетнаяСумма.Значение 	= ТекСумма;
	//		ОформлениеСтроки.Ячейки.Погашено.Значение 		= "Да";
	//		ОформлениеСтроки.ЦветФона 						= WebЦвета.Белый;
	//	Иначе
	//		ОформлениеСтроки.Ячейки.ОтчетнаяСумма.Значение 	= 0;
	//		ОформлениеСтроки.Ячейки.Погашено.Значение 		= "Нет";
	//		ОформлениеСтроки.ЦветФона 						= WebЦвета.ЗамшаСветлый;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ТранзакцииБанкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//ЭтотОбъект.СуммаТранзакцииБанка = ЭтотОбъект.ТранзакцииБанка.Итог("Сумма");
	
КонецПроцедуры

Процедура ТранзакцииБанкаПослеУдаления(Элемент)
	
	//ЭтотОбъект.СуммаТранзакцииБанка = ЭтотОбъект.ТранзакцииБанка.Итог("Сумма");
	
КонецПроцедуры

Процедура КнопкаЗаполнитьТранзакцииНажатие(Элемент)
	
	//Если ЭтотОбъект.ТранзакцииБанка.Количество() > 0 Тогда
	//	Если Вопрос("Табличная часть не пуста и будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//	ЭтотОбъект.ТранзакцииБанка.Очистить();
	//КонецЕсли;
	//
	////
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ДатаНачала"		, ЭтотОбъект.ДатаНачалаТранзакций);
	//Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(ЭтотОбъект.ДатаОкончанияТранзакций));
	//Запрос.УстановитьПараметр("ФизЛицо"			, ЭтотОбъект.ФизЛицо);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СписаниеСКорпоративныхКартРасшифровкаПлатежа.ДатаТранзакции КАК ДатаТранзакции,
	//|	СписаниеСКорпоративныхКартРасшифровкаПлатежа.ТипТранзакции КАК ТипТранзакции,
	//|	СписаниеСКорпоративныхКартРасшифровкаПлатежа.Сумма КАК Сумма
	//|ИЗ
	//|	Документ.СписаниеСКорпоративныхКарт.РасшифровкаПлатежа КАК СписаниеСКорпоративныхКартРасшифровкаПлатежа
	//|ГДЕ
	//|	СписаниеСКорпоративныхКартРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//|	И СписаниеСКорпоративныхКартРасшифровкаПлатежа.Физлицо = &ФизЛицо
	//|	И СписаниеСКорпоративныхКартРасшифровкаПлатежа.Ссылка.Проведен
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатаТранзакции,
	//|	ТипТранзакции,
	//|	Сумма";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НоваяСтрока = ЭтотОбъект.ТранзакцииБанка.Добавить();
	//	НоваяСтрока.ДатаТранзакции 	= Выборка.ДатаТранзакции;
	//	НоваяСтрока.ТипТранзакции 	= Выборка.ТипТранзакции;
	//	НоваяСтрока.Сумма 			= Выборка.Сумма;
	//КонецЦикла;
	//
	//ЭтотОбъект.СуммаТранзакцииБанка = ЭтотОбъект.ТранзакцииБанка.Итог("Сумма");
	
КонецПроцедуры


Процедура ДействияФормыОтчетПоКорпоративнымКартам(Кнопка)
	
	Если НЕ ЭтотОбъект.СписаниеСКорпоративнойКарты Тогда
		Сообщить("Отчет доступен только для списаний с корпоративных карт!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Проведен Тогда
		Сообщить("Сначала документ надо провести!");
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = ОткрытьФорму("Отчет.ОстаткиПоКорпоративнымКартам.Форма.ФормаОтчета");
	
	//ЭлементыОтбораВОтчете = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	//ПолеОтбораФизЛицо = Новый ПолеКомпоновкиДанных("НомерКорпоративнойКарты.Физлицо");
	//Для Каждого ЭлементОтбора Из ЭлементыОтбораВОтчете Цикл
	//	Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбораФизЛицо Тогда
	//		ЭлементОтбора.Использование 	= Истина;
	//		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	//		ЭлементОтбора.ПравоеЗначение 	= ЭтотОбъект.ФизЛицо;
	//	КонецЕсли;
	//КонецЦикла;
	
	ЭлементОтбора = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1];
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= ЭтотОбъект.ФизЛицо;
	
	ФормаОтчета.СкомпоноватьРезультат();
	
КонецПроцедуры

//+++АК БЕЛН 11.07.2016
Процедура РазличныеЗаявкиПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
	Если РазличныеЗаявки Тогда
		Для каждого Стр Из Товары Цикл
			Стр.ЗаявкаНаОплату=ЗаявкаНаОплату;
		КонецЦикла;
		Для каждого Стр Из Услуги Цикл
			Стр.ЗаявкаНаОплату=ЗаявкаНаОплату;
		КонецЦикла;
		Для каждого Стр Из Прочее Цикл
			Стр.ЗаявкаНаОплату=ЗаявкаНаОплату;
		КонецЦикла;
	    ЗаявкаНаОплату=Неопределено;
	Иначе
		Для каждого Стр Из Товары Цикл
			Стр.ЗаявкаНаОплату=Неопределено;
		КонецЦикла;
		Для каждого Стр Из Услуги Цикл
			Стр.ЗаявкаНаОплату=Неопределено;
		КонецЦикла;
		Для каждого Стр Из Прочее Цикл
			Стр.ЗаявкаНаОплату=Неопределено;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаявкаНаОплатуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ЗаявкаНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуСОтбором(Элемент);
КонецПроцедуры

Процедура ОткрытьФормуСОтбором(Элемент)
 	ФормаВыбора=Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.Отбор.Контрагент.Установить(ФизЛицо);
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ТоварыЗаявкаНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуСОтбором(Элемент);
КонецПроцедуры

Процедура УслугиЗаявкаНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуСОтбором(Элемент);
КонецПроцедуры

Процедура ПрочееЗаявкаНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуСОтбором(Элемент);
КонецПроцедуры

Процедура ПослеЗаписи()
	
	АК_УчетМСФО.ОчиститьДляНепроведенныхДатуОтраженияМСФО(ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
		
		Если ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто1")
			ИЛИ ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто2")
			ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто3") Тогда
							
				СтандартнаяОбработка = Ложь;
						
			КонецЕсли;
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Номенклатура) Тогда
		
		Если ВыбраннаяСтрока.Номенклатура.ВидНоменклатуры  = Перечисления.ВидыНоменклатуры.Материал Тогда
			
			Если ЗначениеЗаполнено(ВыбраннаяСтрока.СчетУчета) Тогда
				
				Если ВыбраннаяСтрока.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы) 
						И НЕ ВыбраннаяСтрока.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
					
					Если ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто1")
							ИЛИ ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто2")
							ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто3") Тогда
							
						СтандартнаяОбработка = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
    КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыСоздатьОС(Кнопка)
	
	СоздатьОсновныеСредства();
	
КонецПроцедуры

Процедура СоздатьОсновныеСредства()
	
	Для каждого СтрокаТовары из ЭтотОбъект.Товары Цикл
		
		//+++АК Susk (Суслин К.В.) 2018.03.15 ИП-00018114		 
		//Если СтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Инвентарь И НЕ ЗначениеЗаполнено(СтрокаТовары.ОсновноеСредство) Тогда		
		Если (СтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Инвентарь ИЛИ СтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств) И НЕ ЗначениеЗаполнено(СтрокаТовары.ОсновноеСредство) Тогда		
		//---АК Susk (Суслин К.В.) 
			
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				НовоеОС	= АК_ОсновныеСредства.СоздатьНовоеОС(СтрокаТовары.Номенклатура,Истина);	
				СтрокаТовары.ОсновноеСредство = НовоеОС;
			Иначе 
				Сообщить("Для создания основного средства необходимо заполнить номенклатуру");
			КонецЕсли;	
					
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

//+++АК БЕЛН 11.07.2016

//---АК

//+++susk

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда		
		ЭлементыФормы.Товары.ТекущаяСтрока.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();		
	КонецЕсли;
		
КонецПроцедуры

//
//
Функция ПолучитьСтатьюЗатратБухПоСтатьеДР(Статья, Счет)
	
	//+++АК Susk (Суслин К.В.) 2018.01.22 ИП-00016321.01	   
	Возврат ОбщиеПроцедуры.ПолучитьСтатьюЗатратБухПоСтатьеДР("СтатьиЗатратБУ", Статья, Счет);
		
	//Пока закоментирую:
	
	//Результат = Неопределено;
	//
	////
	//ТЗ =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	//|ИЗ
	//|	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	//|ГДЕ
	//|	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	//|	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет
	//|	И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.СтатьиЗатратБУ";
	//	 
	////
	//ПЗ = Новый ПостроительЗапроса;
	//ПЗ.Текст = ТЗ;
	//
	////
	//ПЗ.Параметры.Вставить("Статья"	, Статья);
	//ПЗ.Параметры.Вставить("Счет"	, Счет);
	//
	////
	//ПЗ.Выполнить();
	//
	////
	//Выборка = ПЗ.Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Результат = Выборка.СтатьяБУ;
	//КонецЕсли; 
	//
	////
	//Возврат Результат;
	
	//---АК Susk (Суслин К.В.) 
	
КонецФункции

//ИП-00016878
Процедура ДействияФормыВыгрузитьВБП(Кнопка)
	
	Если ЭтоНовый() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	
	Если Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ");
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыгружатьВ_БП Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У документа установлен признак ""Не выгружать в БУ"". Выгрузка производиться не будет.");
		Возврат;
	КонецЕсли;
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("АвансовыйОтчет", "АвансовыйОтчет", ЭтотОбъект); 
	
КонецПроцедуры

//---susk

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
