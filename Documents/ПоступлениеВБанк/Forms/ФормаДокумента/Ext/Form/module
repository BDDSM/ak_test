
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, ЭтотОбъект.Ссылка, ЭтотОбъект);

КонецПроцедуры

Процедура ДействияФормыДействие6(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ЭтотОбъект.Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура УстановитьЦФО()
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		ЭтаФорма.ЦФО = ПолучитьПервыйЦФОВПериоде(ЭтотОбъект.ТорговаяТочка, ЭтотОбъект.Дата);
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно
			И ЭтотОбъект.ЭквайрингРасшифровка.Количество() > 0 Тогда	
		ЭтаФорма.ЦФО = ПолучитьПервыйЦФОВПериоде(ЭтотОбъект.ЭквайрингРасшифровка[0].ТорговаяТочка, ЭтотОбъект.Дата);
	Иначе
		Если НЕ ЭтаФорма.ЦФО.Пустая() Тогда
			ЭтаФорма.ЦФО = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПодборРКО()
	
	Если ЭтотОбъект.Организация.Пустая() Тогда
		Предупреждение("Не заполнен реквизит ""Организация""!");
		Возврат;
	КонецЕсли;
	
	//
	ФормаПодбора = ЭтотОбъект.ПолучитьФорму("ФормаПодбораДокументаИнкассации");
	ФормаПодбора.Подобранные 	= Инкассация.Выгрузить();
	ФормаПодбора.СуммаДокумента = ЭтотОбъект.СуммаДокумента;
	ФормаПодбора.Дата 			= ЭтотОбъект.Дата;
	ФормаПодбора.ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*3;
	ФормаПодбора.ДатаКон 		= ЭтотОбъект.Дата;
	ФормаПодбора.Организация 	= ЭтотОбъект.Организация;
	ФормаПодбора.СуммаФальшивокДокумента = ЭтотОбъект.СуммаОтклоненийДокумента();
	//+++АК Познахарёв 2017-05-03
		
	ФормаПодбора.НомерПТС = ЭтотОбъект.НомерПТК;
	
	ПодобранныеРКО = ФормаПодбора.ОткрытьМодально();
	Если ТипЗнч(ПодобранныеРКО)= Тип("ТаблицаЗначений") Тогда
		ЭтотОбъект.Инкассация.Загрузить(ПодобранныеРКО);
		//+++АК пмм 11.05.2017
		Если Не ЭтотОбъект.Самоинкассация Тогда
		//---АК пмм 11.05.2017	
			ОтразитьОтклоненияВИнкассации();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), 0, ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			ЭлементыФормы["НадписьСубконтоКт" + К].Заголовок = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[К - 1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьИЛСубконтоКт" + К].Заголовок = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[К - 1].ВидСубконто.Наименование; //+++АК LAGP 2017.11.17
		КонецЕсли;
		ЭлементыФормы["СубконтоКт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоКт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	//пмм
	ЭлементыФормы.СуммаДокумента.Доступность = Истина;
	//пмм
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
			УстановитьТипФизическиеЛица()
		КонецЕсли;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Ложь;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость =
											(ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога);
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		=
											(ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога);
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Эквайринг", ЭлементыФормы.ПанельПлатежи);
		//Если ПроцентКомиссииБанка = 0 Тогда
		//	ПроцентКомиссииБанка = 1.8;
		//КонецЕсли;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
		
	//пмм
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ЭквайрингСводно", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.СуммаДокумента.Доступность = Ложь;		
		//ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		//ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		//ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		//ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		//
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		//
		//ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		//ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
		
    //пмм.
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Инкассация", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Ложь;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Ложь;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Истина;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Истина;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя Тогда
			
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
		
	//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПеречислениеПоИсполнительнымЛистамПоступление Тогда
			
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ИсполнительныйЛист", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
	//---АК LAGP	
		
	Иначе
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;	
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;	
		ЭлементыФормы.ДоговорКонтрагента.Видимость 			= Истина;	
		ЭлементыФормы.ДоговорКонтрагента1.Видимость 		= Истина;	
		
		ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		
		ЭлементыФормы.НадписьВидПлатежаВГосБюджет.Видимость = Ложь;
		ЭлементыФормы.ВидПлатежаВГосБюджет.Видимость 		= Ложь;
		
	КонецЕсли;
	
	//+++АК LAGP 2018.05.13 ИП-00018465 Для подстановки в РТУ Тилси-Перекресток
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.СторонняяРозницаРасчетыПоРТУ Тогда
		ЭлементыФормы.ТабличноеПолеСопоставлениеРТУ.Видимость = Истина;
	Иначе 
		ЭлементыФормы.ТабличноеПолеСопоставлениеРТУ.Видимость = Ложь;
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура УстановитьТипКонтрагент(флПриОткрытии = Ложь)

	ИмяРасчетногоДокумента = "РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент			= Истина;
	ЕстьРасчетныйДокумент	= Ложь;
	
	Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя) //+++АК LAGP 2018.04.06
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств) Тогда

		//ИмяСправочника = ?( ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ, "Склады", "КассыККМ");
		ИмяСправочника = "Контрагенты";

	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником  Тогда

	//	ИмяСправочника = "ФизическиеЛица";
	//	ЕстьРасчетныйДокумент=Истина;
		
	//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
	//	
	//	ИмяСправочника="ФизическиеЛица";
	//	ИмяРасчетногоДокумента="ДоговорЗаймаСРаботником";
	//	ЕстьРасчетныйДокумент=Истина;

	//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
	//	
	//	ИмяСправочника="ФизическиеЛица";
	//	ЕстьРасчетныйДокумент=Ложь;

	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОтФизЛиц) Тогда //+++АК LAGP 2018.03.30 ИП-00018263

		ИмяСправочника = "ФизическиеЛица";
		
	Иначе
		
		ЕстьКонтрагент = Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(ЭтотОбъект.Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				ЭтотОбъект.Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если НЕ флПриОткрытии Тогда
			Если НЕ ЭтотОбъект.Контрагент = Неопределено Тогда
				ЭтотОбъект.Контрагент = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипФизическиеЛица(флПриОткрытии = Ложь)

	ИмяСправочника 			= "ФизическиеЛица";
	ИмяРасчетногоДокумента	= "РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент			= Истина;
	ЕстьРасчетныйДокумент	= Ложь;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда

		ЕстьКонтрагент = Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Сотрудник.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(ЭтотОбъект.Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				ЭтотОбъект.Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если НЕ флПриОткрытии Тогда
			Если НЕ ЭтотОбъект.Контрагент = Неопределено Тогда
				ЭтотОбъект.Контрагент = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Поступление в банк");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	УстановитьТипКонтрагент(Истина);
	Если Не ЗначениеЗаполнено(ЭтотОбъект.НомерПТК) Тогда
		НомерПТС="";
			НачалоПТС = Найти(ЭтотОбъект.НазначениеПлатежа,"ПТС");
			КонецПТС = Найти(ЭтотОбъект.НазначениеПлатежа,"поДог");
			Если НачалоПТС<>0 И КонецПТС<>0 Тогда
				НомерПТС = Сред(ЭтотОбъект.НазначениеПлатежа,НачалоПТС+3,КонецПТС-НачалоПТС-3);
				//+++АК пмм 11.05.2017
				ЭтотОбъект.Самоинкассация = Истина;
				ЭтотОбъект.НомерПТК = НомерПТС;
				//---АК пмм 11.05.2017
			КонецЕсли;	
	КонецЕсли;
	
	УстановитьКнопкиПечати(); //+++АК SHEP 2017.11.10 ИП-00017206
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если НЕ мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ПриОткрытии()
			
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ЭтотОбъект, ЭтаФорма);
	Иначе
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекущийПользователь);
		СтатьяДДС_БУ_ПоУмолчанию();
		//+++АК sils 03.04.2018 ИП-00018099
		СообщениеПоАрендеОтправлено = Ложь;
		//---АК
	КонецЕсли;
	
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = ЭтотОбъект.Дата;
	
	УстановитьЦФО();
	
	Если ЭтотОбъект.Проведен Тогда
		Если РольДоступна("ИзменениеТТИДоговораПроведенныхБанковскихДокументов") Тогда
			Для Каждого Элемент Из ЭлементыФормы Цикл
				Если ТипЗнч(Элемент) = Тип("Панель")
						ИЛИ ТипЗнч(Элемент) = Тип("Надпись") Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					И (Элемент.Имя = "ДействияФормы" 
						ИЛИ Элемент.Имя = "ОсновныеДействияФормы") Тогда
					Продолжить;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
				//	И Элемент.Имя = "ПанельПодчиненныеДокументы" Тогда
				//	Продолжить;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле")
				//	И Элемент.Имя = "ПодчиненныеДокументы" Тогда
				//	Продолжить;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
				//	И Элемент.Имя = "ПанельРасчетыСФилиалом" Тогда
				//	Продолжить;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле")
				//	И Элемент.Имя = "РасчетыСФилиалом" Тогда
				//	Продолжить;
				//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
				//	И Элемент.Имя = "ПанельПретензии" Тогда
				//	Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("Панель") Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода")
					И ((Элемент.Имя = "ДоговорКонтрагента")
						ИЛИ (Элемент.Имя = "СчетУчетаРасчетовСКонтрагентом")
						ИЛИ (Элемент.Имя = "ПериодРегистрации")
						ИЛИ (Элемент.Имя = "ТорговаяТочка")
						ИЛИ (Элемент.Имя = "Терминал")
						ИЛИ (Элемент.Имя = "СубконтоДт1")
						ИЛИ (Элемент.Имя = "СубконтоДт1")
						ИЛИ (Элемент.Имя = "СубконтоДт3")) Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
					Для Каждого Колонка Из Элемент.Колонки Цикл
						//Если Колонка.Имя <> "СкладВыгрузка" И Колонка.Имя <> "ЗаявкаНаСГВыгрузка" И Колонка.Имя <> "ВесКгПришло" И Колонка.Имя <> "ОбъемМ3Пришло" И Лев(Колонка.Имя, 3) <> "Доп" И Колонка.Имя <> "Загрузка" И Колонка.Имя <> "Бонус" И Колонка.Имя <> "Плательщик" И Лев(Колонка.Имя, 20) <> "ВнутритарныйПересчет" Тогда
							Колонка.ТолькоПросмотр = Истина;
							Колонка.ЦветФонаПоля = Новый Цвет(255, 255, 255);					
						//КонецЕсли;
					КонецЦикла;
						
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					//И (Элемент.Имя = "ПанельГруз"
					//	ИЛИ Элемент.Имя = "ПанельУслуги") 
					Тогда
						Для Каждого Кнопка Из Элемент.Кнопки Цикл
							//Если Кнопка.Имя <> "ПодменюРассчитатьПришло" Тогда
								Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
									Для Каждого Кнопка1 Из Кнопка.Кнопки Цикл
										Попытка
											Кнопка1.Доступность = Ложь;
										Исключение
										КонецПопытки;
									КонецЦикла;
								ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
									Попытка
										Кнопка.Доступность = Ложь;
									Исключение
									КонецПопытки;
								КонецЕсли;
							//КонецЕсли;
						КонецЦикла;
						
					Продолжить;
				КонецЕсли;
					
				Попытка
					Элемент.ТолькоПросмотр = Истина;
				Исключение
					Попытка
						Элемент.Доступность = Ложь;
					Исключение
					КонецПопытки;
				КонецПопытки;
			КонецЦикла;	
		ИначеЕсли НЕ РольДоступна("ИзменениеПроведенныхБанковскихДокументов") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ((ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора)
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора)
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)) 
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период аренды (месяц)");
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья движения денежных средств");
		Отказ = Истина;			
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом)) 
			//пмм
			И (ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно)
			//пмм
			И (ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета расчетов с контрагентом");
		Отказ = Истина;			
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидПлатежаВГосБюджет) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен вид платежа в гос. бюджет");
		Отказ = Истина;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация
			И НЕ ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Инкассация.Итог("Сумма")  Тогда
		ЭлементыФормы.КартинкаНеСогласованаСумма.Видимость = Истина;
		ЭлементыФормы.КартинкаНеСогласованаСумма.Подсказка = "Сумма документа не согласована с суммами табличных частей инкассации на " +
						(ЭтотОбъект.СуммаДокумента - ЭтотОбъект.Инкассация.Итог("Сумма")) + " !";
	Иначе
		ЭлементыФормы.КартинкаНеСогласованаСумма.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		ЭтаФорма.СуммаСлипЧека = ЭтотОбъект.СуммаДокумента + ЭтотОбъект.СуммаКомиссииБанка;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = ЭтотОбъект.Дата; // запомним текущую дату документа для контроля номера документа
		
	УстановитьЦФО();
	
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьТипКонтрагент();
	
	УстановитьСчетаУчетаБУ();
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ЭтотОбъект.ДоговорКонтрагента, ЭтотОбъект.Контрагент, ЭтотОбъект.Организация, СписокВидовДоговора);
	
	УстановитьВидимость();
	
	УстановитьЦФО();
	
	СтатьяДДС_БУ_ПоУмолчанию();
	
	//+++ АК Pans 20170406 ИП-00015475
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101");
		СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000007");
	//+++АК POZM 2018.04.18 ИП-00018444
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("76.1");
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05");
		ЭтотОбъект.СубконтоКт1 = ЭтотОбъект.Организация;
		ЭтотОбъект.СубконтоКт2 = ЭтотОбъект.Контрагент;
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("210110");
		ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("901010");
		ЭтотОбъект.СчетБанк = ПланыСчетов.Хозрасчетный.НайтиПоКоду("52");
	//---АК POZM 
	КонецЕсли;
	//--- АК Pans 20170406 ИП-00015475
	
	//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
	МассивСтруктурДДС_УУБУ = ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ_ПоВидуОперации(ЭтотОбъект.ВидОперации);
	Если МассивСтруктурДДС_УУБУ.Количество() > 0 Тогда
		СтрокаДДС_УУБУ = МассивСтруктурДДС_УУБУ[0];
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств	 = СтрокаДДС_УУБУ.ДДС_УУ;
		ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ	 = СтрокаДДС_УУБУ.ДДС_БУ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СубконтоКт1) И ЗначениеЗаполнено(СубконтоКт2) Тогда
		УдержаниеПоИспЛистам = НайтиУдержаниеПоИсполнительнымЛистам();	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(ЭтотОбъект.Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УстановитьСчетаУчетаБУ();
	
	//СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент,
																							?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
													ЭтотОбъект.СубконтоКт1, ЭлементыФормы.СубконтоКт1,
													ЭтотОбъект.СубконтоКт2, ЭлементыФормы.СубконтоКт2,                                 
													ЭтотОбъект.СубконтоКт3, ЭлементыФормы.СубконтоКт3);
	
	ЭтоПереводДС = ((ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
							ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
						И (Элемент.Значение = ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация));
	
	Для Ном = 1 по 3 Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоКт" + Ном].Значение) Тогда
            Если ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.Организации") Тогда
				Если СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда
					Если ЗначениеЗаполнено(Контрагент) Тогда
						ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.Контрагент.Организация;
					КонецЕсли;	
				Иначе    //Перемещения денежных средств
					ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.Организация;
				КонецЕсли;
				//ЭлементыФормы["СубконтоКт"+Ном].Значение = Контрагент.Организация;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.Контрагент;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда
					ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.Контрагент.Организация.ОсновнойБанковскийСчет;
				Иначе              //Перемещения денежных средств
					ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.СчетОрганизации;
				КонецЕсли;
			ИначеЕсли ЭтоПереводДС
						И Ном = 2 Тогда
				мДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"); 
				ЭлементыФормы.СубконтоКт2.ОграничениеТипа = мДопустимыйТип; 
				Если ЭтотОбъект.СубконтоКт2 <> мДопустимыйТип.ПривестиЗначение(ЭтотОбъект.СубконтоКт2) Тогда
					ЭтотОбъект.СубконтоКт2 = мДопустимыйТип.ПривестиЗначение(ЭтотОбъект.СубконтоКт2);
				КонецЕсли;				
				ЭтотОбъект.СубконтоКт2	= ЭтотОбъект.СчетОрганизации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	мСчетБУ = Элемент.Значение;

КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура;
	Для н = 1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоКт" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоКт" + н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоКт" + н]) = Тип("СправочникСсылка.Организации") Тогда
			СписокПараметров.Вставить("Организация", ЭтотОбъект["СубконтоКт" + н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ЭтотОбъект.Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СубконтоКт1ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	
	СписокСубконто = Новый СписокЗначений;
	СписокСубконто.Добавить("СубконтоКт2");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимость();
	
	//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
	Если ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница.Имя = "ИсполнительныйЛист" Тогда
		УдержаниеПоИспЛистам = НайтиУдержаниеПоИсполнительнымЛистам();	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура СубконтоКт2ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	
	СписокСубконто = Новый СписокЗначений;
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимость();
	
	//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
	Если ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница.Имя = "ИсполнительныйЛист" Тогда
		УдержаниеПоИспЛистам = НайтиУдержаниеПоИсполнительнымЛистам();	
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		ЭтотОбъект.СуммаКомиссииБанка = (ЭтотОбъект.СуммаДокумента * 100 / (100 - ЭтотОбъект.ПроцентКомиссииБанка)) - ЭтотОбъект.СуммаДокумента;
	КонецЕсли;
	
	ПересчитатьСуммуНДС();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьСчетаУчетаБУ();
	
	//+++АК LAGP 2018.09.03 ИП-00019734 При некоторых операциях определение договора не нужно
	НуженДоговор = Истина;
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПеречислениеПоИсполнительнымЛистамПоступление ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
		НуженДоговор = Ложь;	
	КонецЕсли;	
	//---АК LAGP
	
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() И НуженДоговор Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент,
																							?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
																							
	//+++АК LAGP 2018.09.03 ИП-00019734 При некоторых операциях определение договора не нужно
	ИначеЕсли НЕ НуженДоговор Тогда
		ЭтотОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();																						
	//---АК LAGP
	
	КонецЕсли;
																							
	//СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
	
КонецПроцедуры

Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ЭтотОбъект.ПериодРегистрации = НачалоМесяца(ЭтотОбъект.ПериодРегистрации);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, ЭтотОбъект.Контрагент, ЭтотОбъект.ДоговорКонтрагента,
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации), СтандартнаяОбработка);
		
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Для Ном = 1 по 3 Цикл
		Если ТипЗнч(ЭлементыФормы["СубконтоКт" + Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ЭлементыФормы["СубконтоКт" + Ном].Значение = ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СчетБанкНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//
	пФорма = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора(, Элемент);
	пФорма.ПланСчетовСписок.Отбор.Ссылка.Значение 		= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	пФорма.ПланСчетовСписок.Отбор.Ссылка.Использование 	= Истина;
	пФорма.Открыть();
	 
КонецПроцедуры

Процедура СчетУчетаБУПрочиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводкахБУ(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетАвансовБУПрочиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводкахБУ(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТорговаяТочкаПриИзменении(Элемент)
	
	УстановитьЦФО();
	
КонецПроцедуры

Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
				
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(ЭтотОбъект.Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		ЭтотОбъект.Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;

КонецПроцедуры


// Инкассация
Процедура КоманднаяПанельИнкассацияПодбор(Кнопка)
	
	ОткрытьПодборРКО();
	
КонецПроцедуры

Процедура КоманднаяПанельИнкассацияЗаполнитьАвтоматически(Кнопка)
	
	ЗаполнитьРасходникиАвтоматически(ЭтотОбъект, Истина);
	
КонецПроцедуры

Процедура ИнкассацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	мРКО = ДанныеСтроки.ДокументРасхода;
	Если ЗначениеЗаполнено(мРКО) Тогда
		ОформлениеСтроки.Ячейки.СуммаРКО.Значение 	= мРКО.СуммаДокумента;
		ОформлениеСтроки.Ячейки.Точка.Значение 		= мРКО.СтруктурнаяЕдиница;
		ОформлениеСтроки.Ячейки.Отклонение.Значение = ДанныеСтроки.Сумма - мРКО.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнкассацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОткрытьПодборРКО();
	
КонецПроцедуры


// Акты на списание
Процедура КоманднаяПанельАктыНаСписаниеКнопкаЗаполнить(Кнопка)

	Если ЭтотОбъект.АктыНаСписание.Количество() > 0
			И Вопрос("Табличная часть не пуста и будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВремТаблица = Новый ТаблицаЗначений;
	ВремТаблица.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ВремТаблица.Колонки.Добавить("Сумма"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Инкассация Цикл
		ТекРКО = СтрокаТЧ.ДокументРасхода;
		ТекОтклонение = СтрокаТЧ.Сумма - ТекРКО.СуммаДокумента;
		Если ТекОтклонение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВремТаблица.Добавить();
		НоваяСтрока.ТорговаяТочка 	= ТекРКО.СтруктурнаяЕдиница; 
		НоваяСтрока.Сумма 			= ТекОтклонение; 
	КонецЦикла;
	
	ВремТаблица.Свернуть("ТорговаяТочка", "Сумма");
	
	ЭтотОбъект.АктыНаСписание.Загрузить(ВремТаблица);
	
КонецПроцедуры


// Эквайринг сводно
Процедура ЭквайрингПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЦФО.УстановитьТекст(ПолучитьПервыйЦФОВПериоде(ДанныеСтроки.ТорговаяТочка, ЭтотОбъект.Дата));
	Процент = Окр(ДанныеСтроки.СуммаКомиссииБанка / (ДанныеСтроки.СуммаДокумента+ДанныеСтроки.СуммаКомиссииБанка)* 100, 4);
	ОформлениеСтроки.Ячейки.ПроцентКомиссии.УстановитьТекст(Процент);
	
КонецПроцедуры

Процедура КоманднаяПанельИнкассацияРаспределитьАкты(Кнопка)
	
	ОтразитьОтклоненияВИнкассации();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	
	СтатьяДДС_БУ_ПоУмолчанию();
	
КонецПроцедуры

Процедура СтатьяДДС_БУ_ПоУмолчанию()
	
	ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ = ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ЭтотОбъект.СтатьяДвиженияДенежныхСредств, ЭтотОбъект.ВидОперации)
		
КонецПроцедуры	

Процедура ДействияФормыОтчетПоСоответствиюСSQL(Кнопка)
	
	Если ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		Сообщить("Отчет используется только для эквайринга");
		Возврат;
	КонецЕсли;	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Необходимо сначала записать документ");
		Возврат;
	КонецЕсли;	
	
	ДатаПредыдущейВыписки = ЭтотОбъект.ПредыдущаяВыписка().Дата;	
	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПоТерминаламИ_ЛУ");
	
	ФормаОтчета = ПолучитьФорму("Отчет.Сопоставление1С_SQL_ПоЭквайрингу.Форма.ФормаОтчета", ПараметрыФормы);
	
	Эл = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0];
	Эл.Значение = Новый СтандартныйПериод(КонецДня(ДатаПредыдущейВыписки) + 1, КонецДня(ЭтотОбъект.Дата));
	
	//Эл=ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1];
	//Эл.ПравоеЗначение=СчетОрганизации.НомерСчета;
	//Эл.Использование=Истина;
	
	Эл = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2];
	Эл.Использование = Ложь;
	
	ФормаОтчета.Открыть();
	ФормаОтчета.СкомпоноватьРезультат();
	
КонецПроцедуры

Процедура ДействияФормыСравнитьСВыпиской(Кнопка)
	ФормаОтчета = Отчеты.СопоставлениеВыпискиСамоинкассацииИДанных1С.ПолучитьФорму("ФормаОтчета");
	Формаотчета.ЭлементыФормы.СопоставляемыйДокумент.Значение = ЭтотОбъект.Ссылка;
	ФормаОтчета.Открыть();
КонецПроцедуры

Процедура КоманднаяПанельИнкассацияПодобратьНаСумму(Кнопка)
	Инкассация.Очистить();
	//ПодобратьРасходникиНаСумму();
	//ПодобратьРасходникиНаСуммуПсевдополиномиальнымАлгоритмом();
	ПодобратьРасходникиНаСуммуРандомом();
	ОтразитьОтклоненияВИнкассации();
КонецПроцедуры

Процедура ОсновныеДействияФормыСписокДокументовРасходБанка(Кнопка)
	ФРасходБанка = ЭтотОбъект.ПолучитьФорму("ФормаРасходБанка");
	Для каждого Стр Из РасходБанка Цикл
		НовСтр = ФРасходБанка.СписокРасходИзБанка.Добавить();	
		НовСтр.РасходБанка = Стр.ДокументРасходИзБанка;
		НовСтр.Сумма = Стр.Сумма;		
	КонецЦикла;
	ФРасходБанка.Открыть();
КонецПроцедуры

Процедура СубконтоКт3ПриИзменении(Элемент)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоКт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура АктыНаСписаниеСканНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.АктыНаСписание.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			ТекущиеДанные.Скан = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры


Процедура АктыНаСписаниеСканОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ЭлементыФормы.АктыНаСписание.ТекущиеДанные;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТекущиеДанные.Скан);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры


Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


Процедура КоманднаяПанельАктыНаСписаниеОтправитьПисьмоОбАктах(Кнопка)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Отправить письма о расхождении инкассации?"";";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоОРасхожденииИнкассации();
КонецПроцедуры

//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
Функция НайтиУдержаниеПоИсполнительнымЛистам()
	
	Если НЕ ТипЗнч(СубконтоКт2) = ТипЗнч(Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
		Сообщить("Не указано физическое лицо.");
		Возврат Документы.УдержаниеПоИсполнительнымЛистам.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ ТипЗнч(СубконтоКт1) = ТипЗнч(Справочники.Организации.ПустаяСсылка()) Тогда
		Сообщить("Не указана организация.");
		Возврат Документы.УдержаниеПоИсполнительнымЛистам.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПерсоналомОбороты.Регистратор,
		|	РасчетыСПерсоналомОбороты.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрНакопления.РасчетыСПерсоналом.Обороты(
		|			,
		|			&ДатаДокумента,
		|			Регистратор,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо) КАК РасчетыСПерсоналомОбороты
		|ГДЕ
		|	РасчетыСПерсоналомОбороты.СуммаОборот <= -&СуммаОборот
		|	И ТИПЗНАЧЕНИЯ(РасчетыСПерсоналомОбороты.Регистратор) = ТИП(Документ.УдержаниеПоИсполнительнымЛистам)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСПерсоналомОбороты.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Организация", СубконтоКт1);
	Запрос.УстановитьПараметр("СуммаОборот", СуммаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо", СубконтоКт2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.УдержаниеПоИсполнительнымЛистам.ПустаяСсылка();
	КонецЕсли;	

	ТЗУдержаний = РезультатЗапроса.Выгрузить();
	СтрокаДокументаСПодходящейСуммой = ТЗУдержаний.Найти(-СуммаДокумента, "СуммаОборот");
	
	Если СтрокаДокументаСПодходящейСуммой = Неопределено Тогда
		Возврат ТЗУдержаний[0].Регистратор;
	Иначе
		Возврат СтрокаДокументаСПодходящейСуммой.Регистратор;
	КонецЕсли;	

КонецФункции	

//+++АК LAGP 2017.11.17 ИП-00016940 Возврат по исполнительному листу
Процедура УдержаниеПоИспЛистамНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = Документы.УдержаниеПоИсполнительнымЛистам.ПолучитьФормуВыбора(,Элемент);
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Организация.Использование = Истина;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Организация.Значение 		= Организация;
	
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Дата.Использование = Истина;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Дата.ВидСравнения  = ВидСравнения.МеньшеИлиРавно;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Дата.Значение 	 = Дата;
	
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Проведен.Использование = Истина;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Проведен.ВидСравнения  = ВидСравнения.Равно;
	Форма.ЭлементыФормы.ДокументСписок.Значение.Отбор.Проведен.Значение 	 = Истина;
	Форма.Открыть();
	
КонецПроцедуры

//+++АК LATV 2018.09.04 ИП-00019698
Процедура ВыгрузитьВБП(Кнопка)

	Если Не ОбменСБП2_0.ПроверкаПередВыгрузкой(Ссылка.Пустая(), Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПравил = "ПоступлениеВБанк";
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту Тогда
		ИмяПравил = "ПоступлениеВБанк_ВозвратНаКорпКарты";
	КонецЕсли;
	ОбменСБП2_0.ВыгрузитьДокументВБП(ИмяПравил, "ПоступлениеВБанк", Ссылка);

КонецПроцедуры

//+++АК POZM 2018.09.20 ИП-00019739

Процедура КоманднаяПанельИнкассацияЗаполнитьИзРасшифровок(Кнопка)
	ФормаОбработки = Обработки.ЗаполнениеИнкассацииРасходникамиПоФайлу.ПолучитьФорму();
	ФормаОбработки.СопоставляемыйДокумент = ЭтотОбъект.Ссылка;
	ФормаОбработки.Открыть();
	Закрыть();
КонецПроцедуры

//---АК POZM 