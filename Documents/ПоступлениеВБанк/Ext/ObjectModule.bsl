
Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЦФО;


Процедура УстановитьСчетаУчетаБУ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ВидОперации"	, ЭтотОбъект.ВидОперации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаБУ.СчетУчетаРасчетов,
	|	СчетаУчетаБУ.СчетУчетаПоАвансам
	|ИЗ
	|	РегистрСведений.СчетаУчетаБУ КАК СчетаУчетаБУ
	|ГДЕ
	|	(СчетаУчетаБУ.Организация = &Организация
	|			ИЛИ СчетаУчетаБУ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (СчетаУчетаБУ.Контрагент = &Контрагент
	|			ИЛИ СчетаУчетаБУ.Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	И (СчетаУчетаБУ.ВидОперации = &ВидОперации
	|			ИЛИ СчетаУчетаБУ.ВидОперации = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаУчетаБУ.Организация УБЫВ,
	|	СчетаУчетаБУ.Контрагент УБЫВ,
	|	СчетаУчетаБУ.ВидОперации УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетУчетаРасчетовСКонтрагентомБУ 	= Выборка.СчетУчетаРасчетов;
		СчетУчетаРасчетовПоАвансамБУ 		= Выборка.СчетУчетаПоАвансам;		
	Иначе
		СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	//+++ АК Pans 20170406 ИП-00015475
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	КонецЕсли;
	//--- АК Pans 20170406 ИП-00015475
	
	//+++АК mika Дата: 2017.07.26 ИП-00016238
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПокупателямиПоАренде;
	КонецЕсли;
	//---АК
	
	//+++АК LAGP 2017.11.17 ИП-00016940
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПеречислениеПоИсполнительнымЛистамПоступление Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыССотрудникамиПоИсполнительнымЛистам;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.03.30 ИП-00018263
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОтФизЛиц Тогда
		СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("58.1", "Финансовый");
	КонецЕсли;
	//---АК LAGP
	
КонецПроцедуры

Функция ПолучитьПервыйЦФОВПериоде(мТорговаяТочка, мДата) Экспорт
	
	Если ТабЦФО = Неопределено
		ИЛИ ТабЦФО.Количество() = 0
		ИЛИ ТабЦФО.Найти(НачалоДня(мДата), "Дата") = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата", НачалоДня(мДата));
		//Запрос.Текст = "ВЫБРАТЬ
		//			   |	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ), &Дата) КАК Дата,
		//			   |	ЕСТЬNULL(ЛистУчета.ТорговаяТочка, ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница) КАК ТорговаяТочка,
		//			   |	ЕСТЬNULL(ЛистУчета.ЦФО, ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО) КАК ЦФО
		//			   |ИЗ
		//			   |	Документ.ЛистУчета КАК ЛистУчета
		//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		//			   |		ПО ЛистУчета.ТорговаяТочка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		//			   |ГДЕ
		//			   |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
		//			   |	И ЛистУчета.Проведен = ИСТИНА";
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
		|	ЛистУчета.ЦФО КАК ЦФО
		|ПОМЕСТИТЬ ЛистыУчета
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
		|	И ЛистУчета.Проведен = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчета.ЦФО,
		|	ЛистУчета.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	ЕСТЬNULL(ЛистыУчета.ТорговаяТочка, ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница) КАК ТорговаяТочка,
		|	ЕСТЬNULL(ЛистыУчета.ЦФО, ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО) КАК ЦФО
		|ИЗ
		|	ЛистыУчета КАК ЛистыУчета
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|		ПО ЛистыУчета.ТорговаяТочка = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЛистыУчета.ТорговаяТочка, ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница),
		|	ЕСТЬNULL(ЛистыУчета.ЦФО, ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО)";
		
		ТабЦФО = Запрос.Выполнить().Выгрузить();
		
		СтрокаДоб = ТабЦФО.Добавить();
		СтрокаДоб.Дата 			= НачалоДня(мДата);
		СтрокаДоб.ТорговаяТочка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", 192);
		СтрокаДоб.ЦФО 			= СтрокаДоб.ТорговаяТочка;
	КонецЕсли;	
	
	СтрокаЦФО = ТабЦФО.Найти(мТорговаяТочка, "ТорговаяТочка");
	Если СтрокаЦФО <> Неопределено Тогда
		Возврат СтрокаЦФО.ЦФО;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьЦФОИзРегистра(мТорговаяТочка, мДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, мДата);
	Запрос.УстановитьПараметр("Точка"		, мТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Точка) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ЦФО;
		КонецЕсли
	КонецЕсли;
	
КонецФункции	

//#Если Клиент Тогда
Процедура ЗаполнитьРасходникиАвтоматически(ДокументОбъект, РежимКлиента = Ложь) Экспорт
	//+++АК POZM 2018.03.14 ИП-00018027 
	ДатаИнкассацииВНазначении = Дата(1,1,1);
	ПозицияГода = Найти(ЭтотОбъект.НазначениеПлатежа,"2018");
	Если ПозицияГода>0 и Найти("-1234567890",Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-7,1))=0 Тогда
		Попытка
			
			ДатаИнкассацииВНазначении = Дата(Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода,4)),Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-3,2)),Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-6,2)));
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;	
	//---АК POZM 
	
	ДокументОбъект.Инкассация.Очистить();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперации"			, Перечисления.ВидыОперацийРКО.Инкассация);
	Запрос.УстановитьПараметр("СуммаДокумента"		, ДокументОбъект.СуммаДокумента);
	//+++АК POZM 2018.03.14 ИП-00018027 
	//Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДокументОбъект.Дата - 60*60*24*5));
	//Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДокументОбъект.Дата));
	
	Если ЗначениеЗаполнено(ДатаИнкассацииВНазначении) Тогда
		Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДатаИнкассацииВНазначении));
		Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДатаИнкассацииВНазначении));
	Иначе	
		Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДокументОбъект.Дата - 60*60*24*5));
		Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДокументОбъект.Дата));
	КонецЕсли;	
	
	//---АК POZM 
	Запрос.УстановитьПараметр("ИнкассируемыйБанк"	, ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация"	, ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("НомерПТК"	, СокрЛП(ДокументОбъект.НомерПТК));
	//+++АК POZM 2018.02.19 ИП-00017874 
	//Запрос.УстановитьПараметр("ЭтоМКБ"	, СокрЛП(ДокументОбъект.Контрагент.Код) = "Т0002607");
	//---АК POZM 
	Запрос.УстановитьПараметр("Контрагент"	, ДокументОбъект.Контрагент);
	
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.СуммаДокумента,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
	|		ПО (ПоступлениеВБанкИнкассация.ДокументРасхода = РасходИзКассы.Ссылка)
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = &ВидОперации
	|	И РасходИзКассы.СуммаДокумента = &СуммаДокумента
	|	И РасходИзКассы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И (РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор = &ИнкассируемыйБанк
	|			ИЛИ РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И РасходИзКассы.Организация = &Организация
	|	И (РасходИзКассы.СтруктурнаяЕдиница.НомерПТК = &НомерПТК
	|			ИЛИ РасходИзКассы.СтруктурнаяЕдиница.НомерЯвочнойКартыДляИнкассации = &НомерПТК)
	|	И ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL
	|	И РасходИзКассы.Контрагент = &Контрагент";
	//---АК POZM 
	
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	Выборка = Результат.Выбрать();
	//+++АК POZM 2018.03.14 ИП-00018027 
	Если ЗначениеЗаполнено(ДатаИнкассацииВНазначении) Тогда
		ДатаНач = ДатаИнкассацииВНазначении;
	Иначе	
		ДатаНач = НачалоДня(ДокументОбъект.Дата - 60*60*24*5);
	КонецЕсли;	
	Если Выборка.Количество() > 1 Тогда
		//Сообщить("Документы расхода автоматически заполнится не могут, нет однозначного документа для заполнения!", СтатусСообщения.Важное);
		Пока ДатаНач <= НачалоДня(ДокументОбъект.Дата) Цикл
			ДатаНачСтрока = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
			НайденнаяДата = Найти(НазначениеПлатежа, ДатаНачСтрока);
			Если НайденнаяДата = 0 Тогда
				ДатаНач = ДатаНач + 60*60*24*1;
				Продолжить;
			КонецЕсли;
			НайденнаяСтрокаДокумента = Выгрузка.Найти(НачалоДня(ДатаНач), "Дата");
			Если НайденнаяСтрокаДокумента = Неопределено Тогда
				ДатаНач = ДатаНач + 60*60*24*1;
				Продолжить;
			КонецЕсли;
			НовСтрока = ДокументОбъект.Инкассация.Добавить();    
			НовСтрока.ДокументРасхода = НайденнаяСтрокаДокумента.Ссылка;
			НовСтрока.Сумма = НайденнаяСтрокаДокумента.СуммаДокумента;
			Прервать;	
		КонецЦикла;
		
	ИначеЕсли Выборка.Количество() = 1 Тогда
		
		Пока Выборка.Следующий() Цикл		
			НовСтрока = ДокументОбъект.Инкассация.Добавить();    
			НовСтрока.ДокументРасхода = Выборка.Ссылка;
			НовСтрока.Сумма = Выборка.СуммаДокумента;
		КонецЦикла; 
		
	Иначе
		
		#Если Клиент Тогда
			Если РежимКлиента И ДокументОбъект.Инкассация.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(ДатаИнкассацииВНазначении) Тогда
					ДатаС	= ДатаИнкассацииВНазначении;
					ДатаПо	= ДатаИнкассацииВНазначении;
				Иначе	
					ДатаС	= Дата;
					ДатаПо	= Дата;
				КонецЕсли;
				ФормаВыбораПериода = Документы.ПоступлениеВБанк.ПолучитьФорму("ФормаВыбораПериода");
				ФормаВыбораПериода.НачПериода = ДатаС;
				ФормаВыбораПериода.КонПериода = ДатаПо;
				Если ФормаВыбораПериода.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
					ДатаС	= ФормаВыбораПериода.НачПериода;
					ДатаПо	= ФормаВыбораПериода.КонПериода;
				Иначе
					Возврат;
				КонецЕсли;	
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ВидОперации"			, Перечисления.ВидыОперацийРКО.Инкассация);
				Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДатаС));
				Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДатаПо));
				Запрос.УстановитьПараметр("ИнкассируемыйБанк"	, ДокументОбъект.Контрагент);
				Запрос.УстановитьПараметр("Организация"			, ДокументОбъект.Организация);
				Запрос.УстановитьПараметр("Самоинкассация"	, Найти(ДокументОбъект.НазначениеПлатежа,"АДМ")>0);
				
				Запрос.УстановитьПараметр("Контрагент"	, ДокументОбъект.Контрагент);
				
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	РасходИзКассы.Ссылка,
				|	РасходИзКассы.СуммаДокумента,
				|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК Дата
				|ИЗ
				|	Документ.РасходИзКассы КАК РасходИзКассы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
				|		ПО (ПоступлениеВБанкИнкассация.ДокументРасхода = РасходИзКассы.Ссылка)
				|ГДЕ
				|	РасходИзКассы.Проведен
				|	И РасходИзКассы.ВидОперации = &ВидОперации
				|	И РасходИзКассы.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|	И (РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор = &ИнкассируемыйБанк
				|			ИЛИ РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
				|	И РасходИзКассы.Организация = &Организация
				|	И ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL
				|	И ВЫБОР
				|			КОГДА &Самоинкассация
				|				ТОГДА РасходИзКассы.СтруктурнаяЕдиница.НомерПТК <> """"
				|			ИНАЧЕ РасходИзКассы.СтруктурнаяЕдиница.НомерПТК = """"
				|		КОНЕЦ
				|	И РасходИзКассы.Контрагент = &Контрагент";
				 
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НовСтрока = ДокументОбъект.Инкассация.Добавить();    
					НовСтрока.ДокументРасхода 	= Выборка.Ссылка;
					НовСтрока.Сумма 			= Выборка.СуммаДокумента;
				КонецЦикла;	
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	ОтразитьОтклоненияВИнкассации();
	
КонецПроцедуры
//#КонецЕсли 

Процедура ПодобратьРасходникиНаСумму() Экспорт
	ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*5;
	ДатаКон 		= ЭтотОбъект.Дата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СуммаДокумента"		, СуммаДокумента);
	Запрос.УстановитьПараметр("Организация"			, Организация);
	Запрос.УстановитьПараметр("ЭтотДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерПТК"			, ЭтотОбъект.НомерПТК);
	//+++АК POZM 2018.05.03 ИП-00018517
	Запрос.УстановитьПараметр("Контрагент"			, ЭтотОбъект.Контрагент);
	//---АК POZM 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходИзКассы.Дата КАК Дата,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Ссылка КАК ДокументРасхода,
	|	РасходИзКассы.СуммаДокумента КАК Сумма,
	|	РасходИзКассы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор КАК ИнкассируемыйБанк,
	|	ПОДСТРОКА(РасходИзКассы.Комментарий, 1, 200) КАК Комментарий,
	|	ЛОЖЬ КАК Подобран
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
	|		ПО (ПоступлениеВБанкИнкассация.ДокументРасхода = РасходИзКассы.Ссылка)
	|ГДЕ
	|	(ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL 
	|			ИЛИ ПоступлениеВБанкИнкассация.Ссылка = &ЭтотДокумент)
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	|	И РасходИзКассы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.СуммаДокумента < &СуммаДокумента
	|	И РасходИзКассы.СтруктурнаяЕдиница.НомерПТК = &НомерПТК
	//+++АК POZM 2018.05.03 ИП-00018517
	|	И РасходИзКассы.Контрагент = &Контрагент
	//---АК POZM 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	
	ТабРКОПодбора = Запрос.Выполнить().Выгрузить();
	
	ТаблВозврата = Новый ТаблицаЗначений();
	ТаблВозврата.Колонки.Добавить("СтрокаТаб");
	Допуск = 0;
	ТаблВозврата = Погружение(ЭтотОбъект.СуммаДокумента-ЭтотОбъект.АктыНаСписание.Итог("Сумма"),ТабРКОПодбора,Допуск);
	
	Если ТаблВозврата = Неопределено Тогда
		Сообщить(" Не удалось подобрать расходников на сумму документа");
	Иначе
		Для Каждого СтрТВ Из ТаблВозврата Цикл
			ИндексСтроки = СтрТВ.СтрокаТаб;	
			СтрТМ = ТабРКОПодбора.Получить(ИндексСтроки);
			//СтрТМ.Подобран = Истина;
			НС = ЭтотОбъект.Инкассация.Добавить();
			НС.ДокументРасхода = СтрТМ.ДокументРасхода;
			НС.Сумма = СтрТМ.Сумма;
		КонецЦикла;
		
	КонецЕсли;
	
	//Объект.ТМелких.Загрузить(ТабРКОПодбора);
	
КонецПроцедуры


//******************************************************************************
//Сравнивает Первое со Вторым (+ -) допуск
//  При равенстве Возвращает 0
//  При неравенстве Возвращает (Первое - Второе)
//
Функция СравнитьСдопуском(Первое,Второе,Допуск = 0.1)
	Раз = Первое - Второе;
	Если Раз < 0 Тогда 
		Раз = Раз * (-1);
		Если Раз < Допуск Тогда
			Возврат 0;
		КонецЕсли;
		Раз = Раз * (-1);
	Иначе
		Если Раз < Допуск Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Раз;
	
КонецФункции 


///******************************************************************************
//  Функция Погружение(СуммаДокумента,ТабРКОПодбора,Допуск)
//
// Входные параметры:
//  СуммаДокумента 	- Число, содержащее много мелких "сумм"
//  ТабРКОПодбора 	- Таблица значений в которой должна быть колонка "Сумма" содержащая мелкие суммы
//					Могут быть и числа > СуммаДокумента, они естественно в подбор не попадут.
//  Допуск		- Допустимая погрешность (так как разные программы округляют по разному,
//					особенно если считают проценты за банковские операции).
//
//	Возвращает: Неопределено - Если подбор не удался или
//  			ТаблВозврата - ТаблицаЗначений, Состоит из одной колонки "СтрокаТаб" в которой собраны 
//							индексы строк таблицы ТабРКОПодбора	с удавшимся подбором.
//

Функция Погружение(СуммаДокумента,ТабРКОПодбора,Допуск)
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ15 = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	КЧ = Новый КвалификаторыЧисла(8,0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ8 = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	Матрица = Новый ТаблицаЗначений(); 
	Матрица.Колонки.Добавить("Глубина0",ОписаниеТиповЧ15,"Глубина0",);
	
	ИндЛинейкаГраница = 0;
	ИндЛинейкаОстаток = 1;
	ИндЛинейкаШтОстатков = 2;
	
	Линейка  = Новый ТаблицаЗначений(); 
	Линейка.Колонки.Добавить("Граница",ОписаниеТиповЧ8);    //  [0]
	Линейка.Колонки.Добавить("Остаток",ОписаниеТиповЧ15);   //  [1] 
	Линейка.Колонки.Добавить("ШтОстатков",ОписаниеТиповЧ8); //  [2]   
	СтрЛинейка = Линейка.Добавить();
	СтрЛинейка.Остаток = СуммаДокумента;
	СтрЛинейка.ШтОстатков = 0;
	
	Строк = ТабРКОПодбора.Количество();
	
	Если Строк < 1 Тогда
		Возврат Неопределено; // Негде искать
	КонецЕсли;
	
	ТаблВозврата = Новый ТаблицаЗначений(); 
	ТаблВозврата.Колонки.Добавить("СтрокаТаб",ОписаниеТиповЧ8,"СтрокаТаб");
	
	СчСтрок = 0;
	// Заполняем 0ю колонку МАТРИЦЫ 
	Для СчСтрок = 1 По Строк Цикл 
		СтрМатрица = Матрица.Добавить();
		СтрТабРКОПодбора = ТабРКОПодбора.Получить(СчСтрок-1);
		Сумма = СтрТабРКОПодбора.Сумма;
		Рез = СравнитьСдопуском(Сумма,СуммаДокумента,Допуск); //При неравенстве Возвращает (Первое - Второе)
		Если Сумма = 0 Тогда
			СтрМатрица.Установить(0,0);
		ИначеЕсли Рез = 0 Тогда 						// Есть одно число совпадающее с большим
			СтрТаблВозвр = ТаблВозврата.Добавить();
			СтрТаблВозвр.СтрокаТаб = СчСтрок-1;
			Возврат ТаблВозврата;
		ИначеЕсли Сумма < СуммаДокумента Тогда 
			СтрМатрица.Установить(0,Сумма); 			//Число участвует в подборе;
			Если СтрЛинейка.ШтОстатков = 0 Тогда 
				СтрЛинейка.Граница = СчСтрок-1;   		// Поставили указатель Граница
			КонецЕсли;
			СтрЛинейка.ШтОстатков = СтрЛинейка.ШтОстатков + 1;
		Иначе	
			СтрМатрица.Установить(0,0);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрЛинейка.ШтОстатков < 2 Тогда 
		// Вообще нечего искать
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексПоследнейСтрокиМатрицы = Матрица.Количество()-1;
	
	Пока Истина Цикл
		
		// Это начало "Погружения" т.е. Добавление колонки в матрицу и строки в линейку.
		// У них будет один и тот же индекс "ГлубинаПлюс"
		// "Граница" указывает на строку в матрице 
		
		Глубина = Линейка.Количество()-1;  
		// Погружаемся 
		Граница = Линейка[Глубина][ИндЛинейкаГраница];
		Остаток = Линейка[Глубина][ИндЛинейкаОстаток];
		
		ГлубинаПлюс = Глубина + 1;
		СтрЛинейка = Линейка.Добавить();                    // Линейка  Глубина+
		
		ИмяКолонки = "Глубина" + Строка(ГлубинаПлюс);
		Матрица.Колонки.Добавить(ИмяКолонки,ОписаниеТиповЧ15,ИмяКолонки,);   // Колонка Матрицы Глубина+
		
		Линейка[ГлубинаПлюс][ИндЛинейкаОстаток] 	= Остаток - Матрица[Граница][Глубина];                      // Остаток
		Линейка[ГлубинаПлюс][ИндЛинейкаШтОстатков] 	= 0;
		
		// Заполняем следующую колонку матрицы
		// и поглядываем на результат
		
		Для СчСтр = Граница+1 По ИндексПоследнейСтрокиМатрицы Цикл
			
			Сумма = Матрица[СчСтр][Глубина];
			Если Сумма = 0 Тогда
				Матрица[СчСтр][ГлубинаПлюс] = 0;
				Продолжить;
			КонецЕсли;
			Ост2 = СравнитьСдопуском(Линейка[ГлубинаПлюс][ИндЛинейкаОстаток],Сумма);
			Если Ост2 = 0 Тогда
				// Нашли !!!
				Линейка[ГлубинаПлюс][ИндЛинейкаГраница] = СчСтр;
				Для Каждого СтрЛинейка Из Линейка Цикл
					СтрТаблВозврата = ТаблВозврата.Добавить();
					СтрТаблВозврата.СтрокаТаб = СтрЛинейка.Граница;   // Возвращаем  индекс
				КонецЦикла;
				Возврат ТаблВозврата;
			ИначеЕсли Ост2 > 0 Тогда
				Матрица[СчСтр][ГлубинаПлюс] = Сумма;
				Если Линейка[ГлубинаПлюс][ИндЛинейкаШтОстатков] = 0 Тогда
					Линейка[ГлубинаПлюс][ИндЛинейкаГраница] = СчСтр;
				КонецЕсли;
				Линейка[ГлубинаПлюс][ИндЛинейкаШтОстатков] = Линейка[ГлубинаПлюс][ИндЛинейкаШтОстатков] +1;
			Иначе
				Матрица[СчСтр][ГлубинаПлюс] = 0;
			КонецЕсли;
		КонецЦикла;
		
		// теперь надо проверить, чего мы достигли
		//СтрЛинейка = Линейка.Получить(ГлубинаПлюс-1);
		Если Линейка[ГлубинаПлюс][ИндЛинейкаШтОстатков] > 1 Тогда  // 
			// Уходим на след погружение	
			Продолжить;  // Продолжаем погружение
		КонецЕсли;
		
		// Здесь откат матрицы и линейки !!!
		
		Матрица.Колонки.Удалить(ГлубинаПлюс);
		Линейка.Удалить(ГлубинаПлюс);            // Усе по индексу "ГлубинаПлюс" Нихрена уже нет.
		
		// ставим указатель на новое место
		
		Если Линейка[Глубина][ИндЛинейкаШтОстатков] > 2 Тогда
			Линейка[Глубина][ИндЛинейкаШтОстатков] = 0;
			//Но указатель Граница надо сдвинуть
			Для СчСтр = Граница+1 По ИндексПоследнейСтрокиМатрицы Цикл
				Если Матрица[СчСтр][Глубина] = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Линейка[Глубина][ИндЛинейкаШтОстатков] = 0 Тогда 
					Линейка[Глубина][ИндЛинейкаГраница] = СчСтр;
				КонецЕсли;
				Линейка[Глубина][ИндЛинейкаШтОстатков] = Линейка[Глубина][ИндЛинейкаШтОстатков] +1;
			КонецЦикла;
			Продолжить;  // Продолжаем погружение
		КонецЕсли;
		// Катимся еще наверх	
		ГлубинаМинус = Глубина - 1;
		Если ГлубинаМинус >= 0 Тогда
			
			Матрица.Колонки.Удалить(Глубина);
			Линейка.Удалить(Глубина);
			
			ГраницаМинус = Линейка[ГлубинаМинус][ИндЛинейкаГраница];
			Для СчСтр = ГраницаМинус+1  По ИндексПоследнейСтрокиМатрицы Цикл 
				Если   Матрица[СчСтр][ГлубинаМинус] <> 0 Тогда
					Линейка[ГлубинаМинус][ИндЛинейкаГраница] = СчСтр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Продолжить;  // Продолжаем погружение
		КонецЕсли;
		
		Возврат Неопределено;  // Не подобрали 
		
	КонецЦикла;
	
	
КонецФункции





Процедура ОтразитьОтклоненияВИнкассации() Экспорт
	
	Для каждого стрИ Из Инкассация Цикл
		СтрИ.Сумма = СтрИ.ДокументРасхода.СуммаДокумента;
	КонецЦикла;
	
	Если Инкассация.Количество() > 0 Тогда
		Для каждого стрА из АктыНаСписание Цикл
			Если СтрА.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.ФальшиваяКупюра
				ИЛИ (СтрА.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.Недостача_Излишек
				И СтрА.Сумма < 0) Тогда
				Распределить = ?(СтрА.Сумма < 0, - СтрА.Сумма, СтрА.Сумма);
				Для каждого стрИ Из Инкассация Цикл
					Если СтрИ.ДокументРасхода.СтруктурнаяЕдиница = стрА.ТорговаяТочка Тогда
						Сум = Мин(СтрИ.Сумма,Распределить);
						СтрИ.Сумма = СтрИ.Сумма-Сум;
						Распределить = Распределить-Сум;
					КонецЕсли;
					Если Распределить = 0 Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли (СтрА.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.Недостача_Излишек
				И СтрА.Сумма > 0) Тогда
				Распределить = СтрА.Сумма;
				Для каждого стрИ Из Инкассация Цикл
					Если СтрИ.ДокументРасхода.СтруктурнаяЕдиница = стрА.ТорговаяТочка Тогда
						СтрИ.Сумма = СтрИ.Сумма+Распределить;
						Распределить = 0;
						прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			Если Распределить <> 0 Тогда
				Сообщить("Не смог найти расходник к строке номер " + СтрА.НомерСтроки + " актов на списание");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	


Функция СуммаОтклоненийДокумента() Экспорт
	
	мСумма = 0;
	//Для каждого СтрокаТЧ Из ЭтотОбъект.АктыНаСписание Цикл
	//	Если СтрокаТЧ.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.ФальшиваяКупюра 
	//			ИЛИ (СтрокаТЧ.ВидАктаНаСписание = перечисления.ВидыАктовНаСписаниеПриИнкассации.Недостача_Излишек
	//					И СтрокаТЧ.Сумма < 0) Тогда
	//		мСумма = мСумма + ?(СтрокаТЧ.Сумма < 0, - СтрокаТЧ.Сумма, СтрокаТЧ.Сумма);
	//	КонецЕсли;	
	//КонецЦикла;	
	мСумма = ЭтотОбъект.АктыНаСписание.Итог("Сумма");
	Возврат мСумма;
	
КонецФункции	

Функция СчетаДокументаНеКорректны() Экспорт
	
	Если ЭтотОбъект.ВидОперации = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;	
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора Тогда
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "62.01" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета расчетов с контрагентом должен быть 62.01!");
			Возврат Истина;
		КонецЕсли;	
		Если ЭтотОбъект.СчетУчетаРасчетовПоАвансамБУ.Код <> "62.02" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета расчетов по авансам должен быть 62.02!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика
		или ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя
		или ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя
		или ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "60.01" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета расчетов с контрагентом должен быть 60.01!");
			Возврат Истина;
		КонецЕсли;	
		Если ЭтотОбъект.СчетУчетаРасчетовПоАвансамБУ.Код <> "60.02" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета расчетов по авансам должен быть 60.02!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "70" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 70!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "58.03"
			И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "76.05" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 58.03 или 76.05!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "76.05" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 76.05!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "57.01" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 57.01!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "57.03" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 57.03!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "91.01"
			И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "55.03" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 91.01 или 55.03!");
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет должен принадлежать счету 68!");
			Возврат Истина;
		КонецЕсли;	
		
		//+++АК LAGP 2017.11.17 ИП-00016940	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПеречислениеПоИсполнительнымЛистамПоступление Тогда	
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Код <> "76.41" Тогда
			Сообщить("Для вида операции(упр) (" + ЭтотОбъект.ВидОперации + ") счет учета должен быть 76.41!");
			Возврат Истина;
		КонецЕсли;	
		//---АК LAGP
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

Процедура ПроверитьСуммыАктов(Отказ)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеВБанкАктыНаСписание.ТорговаяТочка КАК ТорговаяТочка,
	|	СУММА(ПоступлениеВБанкАктыНаСписание.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТСуммыАктов
	|ИЗ
	|	Документ.ПоступлениеВБанк.АктыНаСписание КАК ПоступлениеВБанкАктыНаСписание
	|ГДЕ
	|	ПоступлениеВБанкАктыНаСписание.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВБанкАктыНаСписание.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВБанкИнкассация.ДокументРасхода.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	СУММА(ПоступлениеВБанкИнкассация.Сумма - ПоступлениеВБанкИнкассация.ДокументРасхода.СуммаДокумента) КАК Отклонение
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
	|ГДЕ
	|	ПоступлениеВБанкИнкассация.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеВБанкИнкассация.ДокументРасхода.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтклонения.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТОтклонения.Отклонение КАК Отклонение,
	|	ЕСТЬNULL(ВТСуммыАктов.Сумма, 0) КАК Сумма
	|ИЗ
	|	ВТОтклонения КАК ВТОтклонения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыАктов КАК ВТСуммыАктов
	|		ПО (ВТСуммыАктов.ТорговаяТочка = ВТОтклонения.ТорговаяТочка)
	|ГДЕ
	|	НЕ ВТОтклонения.Отклонение = 0
	|	И НЕ ВТОтклонения.Отклонение = ЕСТЬNULL(ВТСуммыАктов.Сумма, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСуммыАктов.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТСуммыАктов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВТОтклонения.Отклонение, 0) КАК Отклонение
	|ИЗ
	|	ВТСуммыАктов КАК ВТСуммыАктов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтклонения КАК ВТОтклонения
	|		ПО ВТСуммыАктов.ТорговаяТочка = ВТОтклонения.ТорговаяТочка
	|ГДЕ
	|	НЕ ВТСуммыАктов.Сумма = ЕСТЬNULL(ВТОтклонения.Отклонение, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСуммыАктов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтклонения";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[2];
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("Для торговой точки """ + Выборка.ТорговаяТочка + """ сумма отклонения по инкассации (" + Формат(Выборка.Отклонение, "ЧГ=") +
			") отличается от суммы акта (" + Формат(Выборка.Сумма, "ЧГ=") + ")");
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		РезультатЗапроса = РезультатыЗапроса[3];
		Если НЕ РезультатЗапроса.Пустой() Тогда
			//Отказ = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить("Для торговой точки """ + Выборка.ТорговаяТочка + """ сумма акта (" + Формат(Выборка.Сумма, "ЧГ=") +
				") отличается от суммы отклонения по инкассации (" + Формат(Выборка.Отклонение, "ЧГ=") + ")");
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаАрендыОтАрендатора
	//	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаАрендуОтАрендодателя Тогда
	//	Если СуммаДокумента <> РасшифровкаПлатежа.Итог("СуммаПлатежа") Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не совпадает с расшифровкой");
	//		Отказ = Истина;
	//	КонецЕсли;
	//Иначе
	//	РасшифровкаПлатежа.Очистить();
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		Если ЭтотОбъект.ДоговорКонтрагента.Организация <> ЭтотОбъект.Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация договора не соответствует организации документа");
			Отказ = Истина;		
		КонецЕсли;
		Если ЭтотОбъект.ДоговорКонтрагента.Владелец <> ЭтотОбъект.Контрагент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Владелец договора не соответствует контрагенту документа");
			Отказ = Истина;		
		КонецЕсли;
		СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации);
		Если СписокВидовДоговора.НайтиПоЗначению(ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вид договора не соответствует виду операции документа");
			Отказ = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
		И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		//Отказ = Истина; //+++АК LAGP 2018.08.22 ИП-00019515.01 При загрузке из клиент-банка, необходимо создание таких документов
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
		ЭтотОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		
		Если ЭтотОбъект.Комментарий = "Загружен из Клиент-Банка"
			И ЭтотОбъект.ПроцентКомиссииБанка = 0 Тогда
			ЭтотОбъект.ПроцентКомиссииБанка = 1.8;
			Если НЕ Прав(ЭтотОбъект.НазначениеПлатежа, 19) = ", ком. по умолчанию" Тогда
				ЭтотОбъект.НазначениеПлатежа = ЭтотОбъект.НазначениеПлатежа + ", ком. по умолчанию";
			КонецЕсли;
		КонецЕсли;
		
		ЭтотОбъект.СуммаКомиссииБанка = (ЭтотОбъект.СуммаДокумента * 100 / (100 - ЭтотОбъект.ПроцентКомиссииБанка) ) - ЭтотОбъект.СуммаДокумента;
		
		//пмм
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		
		//Если ЭтотОбъект.Комментарий = "Загружен из Клиент-Банка"
		//		И ЭтотОбъект.ПроцентКомиссииБанка = 0 Тогда
		//	ЭтотОбъект.ПроцентКомиссииБанка = 1.8;
		//	Если НЕ Прав(ЭтотОбъект.НазначениеПлатежа, 19) = ", ком. по умолчанию" Тогда
		//		ЭтотОбъект.НазначениеПлатежа = ЭтотОбъект.НазначениеПлатежа + ", ком. по умолчанию";
		//	КонецЕсли;
		//КонецЕсли;
		//	
		//ЭтотОбъект.СуммаКомиссииБанка = (ЭтотОбъект.СуммаДокумента * 100 / (100 - ЭтотОбъект.ПроцентКомиссииБанка) ) - ЭтотОбъект.СуммаДокумента;
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ЭквайрингРасшифровка.Итог("СуммаДокумента");
		//пмм.
		СтатьяДДСБУ = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901054");
		Если ЗначениеЗаполнено(СтатьяДДСБУ) Тогда
			ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ = СтатьяДДСБУ;
		КонецЕсли;	
		ВыборкаДоговоры = Справочники.ДоговорыКонтрагентов.Выбрать(,ЭтотОбъект.Контрагент);
		Пока ВыборкаДоговоры.Следующий() Цикл
			Если ВыборкаДоговоры.Организация = ЭтотОбъект.Организация И Найти(НРег(ВыборкаДоговоры.Наименование),"эквайринг")>0 Тогда
				ЭтотОбъект.ДоговорКонтрагента = ВыборкаДоговоры.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
		Если ЭтотОбъект.СоставДокументовИнкассации.Количество()=0 Тогда
			НоваяСтрока = ЭтотОбъект.СоставДокументовИнкассации.Добавить();
			НоваяСтрока.НомерВходящегоДокумента = ЭтотОбъект.НомерВходящегоДокумента;
			НоваяСтрока.Сумма = ЭтотОбъект.СуммаДокумента;
			//+++АК POZM 2017.10.28 ИП-00016987 
			НоваяСтрока.Дата = НачалоДня(ЭтотОбъект.Дата)-1;
			//---АК POZM 
		КонецЕсли;	
		
		Если ЭтотОбъект.Инкассация.Количество() = 0 И РежимЗаписи = РежимЗаписиДокумента.Проведение И ЭтотОбъект.СуммаДокумента <> 0 Тогда
			//+++АК POZM 2018.09.28 ИП-00019971
			Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.Контрагент,"ИнкассацияЗаполняетсяРасшифровками") = Ложь  Тогда
			//---АК POZM 
						
				ЗаполнитьРасходникиАвтоматически(ЭтотОбъект);
				Если ЭтотОбъект.Инкассация.Количество() = 0 Тогда
					ПодобратьРасходникиНаСуммуРандомом();
					ОтразитьОтклоненияВИнкассации();
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			
			ТекСуммаДокумента = ЭтотОбъект.Инкассация.Итог("Сумма");
			Если НЕ ЭтотОбъект.СуммаДокумента = ТекСуммаДокумента Тогда
				Сообщить("Сумма документа не согласована с суммами табличных частей инкассации на " +
				(ЭтотОбъект.СуммаДокумента - ТекСуммаДокумента) + " !");
				//Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ПроверитьСоответствиеДанныхСSQL();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ПериодРегистрации 	= Дата("00010101");
	ЭтотОбъект.Депозит 				= Ложь;
	
	//+++ AK BARA #16057
	
	ЭтотОбъект.РасходБанка.Очистить();
	ЭтотОбъект.ДокументыРасходИзБанкаУказаны = Ложь;
	//--- AK BARA #16057
	
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ)
		И ЭтотОбъект.Дата >= Дата(2015,5,8)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья ДДС бух.учета");
		Отказ = Истина;
	КонецЕсли;	
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	Движения.РасчетыСПерсоналом.Записывать = Истина;
	Движения.РасчетыСПерсоналом.Очистить();
	
	Если СчетаДокументаНеКорректны() Тогда
		
	КонецЕсли;
	
	
	МассивЗаменыЦФО = Новый Массив;
	МассивЗаменыЦФО.Добавить("P00000231");
	МассивЗаменыЦФО.Добавить("P00000243");
	МассивЗаменыЦФО.Добавить("000000251");
	
	ТТДоставка 		= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000230");
	ЦФОВсе 			= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	ЦФОУпрРозницей 	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003");
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозита
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеПроцентовПоДепозиту
		
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПеречислениеПоИсполнительнымЛистамПоступление //+++АК LAGP 2017.11.17 ИП-00016940
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОтФизЛиц //+++АК LAGP 2018.03.30 ИП-00018263
		
		//+++АК POZM 2018.04.18 ИП-00018444
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		//---АК POZM 
		
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств		
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период	= ЭтотОбъект.Дата;
		//+++АК POZM 2018.04.18 ИП-00018444
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Проводка.СчетДт	= ПланыСчетов.Финансовый.ВалютныеСчета;
			//+++АК LAGP 2018.05.12 Дежурство. Просьба Павла Жмако via Юля Шеронова
			Проводка.ВалютаДт = ЭтотОбъект.ВалютаДокумента;           
			Проводка.ВалютнаяСуммаДт = ЭтотОбъект.СуммаДокумента; 
			//---АК LAGP
		Иначе	
		//---АК POZM 	
			
			//+++АК LAGP 2018.08.20 б/н просьба Юлии Шероновой, письмо от 2018.08.20
		    //Проводка.СчетДт	= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.СчетДт	= ?(ЭтотОбъект.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51"), ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.1", "Финансовый"), ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.СчетБанк, "Код"), "Финансовый"));
			
			Если НЕ Проводка.СчетДт = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("52", "Финансовый") Тогда
				//+++АК POZM 2018.04.18 ИП-00018444		
				Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
				//---АК POZM
			КонецЕсли;	
			//---АК LAGP
			
		КонецЕсли;	
		//+++АК LAGP 2018.05.12 Дежурство. Просьба Павла Жмако via Юля Шеронова
		//Проводка.Сумма	= ЭтотОбъект.СуммаДокумента;              
		Проводка.Сумма	= МодульВалютногоУчета.ПересчитатьВСуммуРегл(ЭтотОбъект.СуммаДокумента, мВалютаРегламентированногоУчета, ЭтотОбъект.ВалютаДокумента, ЭтотОбъект.Дата);
		//---АК LAGP
		
		//Проводка.Организация			= Организация;
		
		
		Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.СубконтоКт3);
		
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
			
			Проводка.Содержание		= "Возврат заработной платы";
			Проводка.НомерЖурнала	= "ЗП";
			
			Движение = Движения.РасчетыСПерсоналом.Добавить();
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			Движение.Регистратор	= ЭтотОбъект.Ссылка;
			Движение.Период			= ЭтотОбъект.Дата;
			Движение.Организация	= ЭтотОбъект.Организация;
			Движение.Физлицо		= ЭтотОбъект.Контрагент;
			Движение.Сумма			= - ЭтотОбъект.СуммаДокумента;
			
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			
			Проводка.Содержание		= СтрЗаменить(ЭтотОбъект.ВидОперации, " (поступление)", "");
			
		КонецЕсли;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Эквайринг Тогда
		
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.СчетДт 		= ПланыСчетов.Финансовый.РасчетныйСчет; // 51
		Проводка.Сумма			= ЭтотОбъект.СуммаДокумента;
		//Проводка.Организация	= Организация;
		
		Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
		Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		
		Проводка.СчетКт	= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;  // 57.2
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.ТорговаяТочка);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Эквайринг.ПолучитьТерминал(ЭтотОбъект.Терминал, ЭтотОбъект.Дата));
		Проводка.Содержание		= "Возмещение по эквайрингу";
		
		
		Проводка 				= Движения.Финансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.Сумма			= ЭтотОбъект.СуммаКомиссииБанка;
		//Проводка.Организация	= Организация;
		
		Проводка.СчетДт	= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; // 44.3
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.ТорговаяТочка);
		
		УслугиБанка = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391");
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, УслугиБанка); //СтатьяДоходовРасходов
		
		//ОтборЦФО = Новый Структура;
		//ОтборЦФО.Вставить("СтруктурнаяЕдиница",ТорговаяТочка);
		//СтруктураРезультата 					  = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(Дата,ОтборЦФО);
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтруктураРезультата.ЦФО);
		ПервыйЦФОВПериоде = ПолучитьПервыйЦФОВПериоде(ЭтотОбъект.ТорговаяТочка, ЭтотОбъект.Дата);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПервыйЦФОВПериоде);
		
		Проводка.СчетКт			= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.ТорговаяТочка);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Эквайринг.ПолучитьТерминал(ЭтотОбъект.Терминал, ЭтотОбъект.Дата));
		
		Проводка.Содержание		= "Комиссия банка по эквайрингу";
		//пмм
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		
		ЗапросТермДоставок = Новый Запрос;
		ЗапросТермДоставок.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.ДатаВходящегоДокумента));
		ЗапросТермДоставок.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛистУчетаДоставка.Терминал,
		|	ЛистУчетаДоставка.Ссылка.ТорговаяТочка,
		|	ЛистУчетаДоставка.Ссылка.ЦФО
		|ИЗ
		|	Документ.ЛистУчета.Доставка КАК ЛистУчетаДоставка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЛистУчетаДоставка.Ссылка.Дата, ДЕНЬ) = &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛистУчетаДоставка.Терминал,
		|	ЛистУчетаДоставка.Ссылка.ТорговаяТочка,
		|	ЛистУчетаДоставка.Ссылка.ЦФО
		|ИЗ
		|	Документ.ЛистУчета.Доставка КАК ЛистУчетаДоставка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЛистУчетаДоставка.Ссылка.Дата, ДЕНЬ) МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -1) И &Дата";
		
		Результаты = ЗапросТермДоставок.ВыполнитьПакет();
		ТабКешТерминаловДоставки 		= Результаты[0].Выгрузить();
		ТабКешТерминаловДоставкиЗаМесяц = Результаты[1].Выгрузить();
		
		СтруктураНастроек = РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(ЭтотОбъект.Дата,
		Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.ПриходПоЭквайрингуКомиссия));
		УслугиБанка = СтруктураНастроек.СтатьяДоходовРасходов;
		Для каждого Строка Из ЭтотОбъект.ЭквайрингРасшифровка Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетДт 		= ПланыСчетов.Финансовый.РасчетныйСчет; // 51
			Проводка.Сумма			= Строка.СуммаДокумента;
			//Проводка.Организация	= Организация;
			
			Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
			
			Проводка.СчетКт			= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;  // 57.2
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.ТорговаяТочка);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Эквайринг.ПолучитьТерминал(Строка.Терминал, ЭтотОбъект.Дата));
			Проводка.Содержание		= "Возмещение по эквайрингу";
			
			Проводка 				= Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.Сумма			= Строка.СуммаКомиссииБанка;
			//Проводка.Организация	= Организация;
			
			Проводка.СчетДт	= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; // 44.3
			СтрокаКешТерминалДоставки = ТабКешТерминаловДоставки.Найти(Строка.Терминал, "Терминал");
			Если СтрокаКешТерминалДоставки = Неопределено Тогда
				СтрокаКешТерминалДоставки = ТабКешТерминаловДоставкиЗаМесяц.Найти(Строка.Терминал, "Терминал");
			КонецЕсли;	
			Если СтрокаКешТерминалДоставки = Неопределено Тогда
				Если Строка.ТорговаяТочка = ТТДоставка Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЦФОВсе);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.ТорговаяТочка);
				КонецЕсли;	
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаКешТерминалДоставки.ТорговаяТочка);
			КонецЕсли;	
			
			//Если ЭтотОбъект.Дата>=Дата(2014,7,1) Тогда
			//	УслугиБанка = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39392");
			//Иначе	
			//	УслугиБанка = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391");
			//КонецЕсли;	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, УслугиБанка); //СтатьяДоходовРасходов
			
			Если СтрокаКешТерминалДоставки = Неопределено Тогда
				Если Строка.ТорговаяТочка = ТТДоставка Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЦФОУпрРозницей);
				Иначе	
					ПервыйЦФОВПериоде = ПолучитьПервыйЦФОВПериоде(Строка.ТорговаяТочка, ЭтотОбъект.Дата);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПервыйЦФОВПериоде);
				КонецЕсли;	
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаКешТерминалДоставки.ЦФО);
			КонецЕсли;	
			
			Проводка.СчетКт	= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.ТорговаяТочка);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Эквайринг.ПолучитьТерминал(Строка.Терминал, ЭтотОбъект.Дата));
			
			Проводка.Содержание		= "Комиссия банка по эквайрингу";
			
		КонецЦикла;	
		
		
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация И ЭтотОбъект.СуммаДокумента <> 0 Тогда
				
		Если НЕ Отказ Тогда
			//НеРаспределеннаяСумма = СуммаДокумента-СуммаОтклоненийДокумента();
			НеРаспределеннаяСумма = ЭтотОбъект.СуммаДокумента;
			
			Для Каждого СтрокаИнкассация ИЗ ЭтотОбъект.Инкассация Цикл
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период		= ЭтотОбъект.Дата;
				Проводка.СчетДт		= ПланыСчетов.Финансовый.РасчетныйСчет;
				Проводка.Сумма		= СтрокаИнкассация.Сумма;
				//Проводка.Организация			= Организация;
				
				Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
				Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка.СчетКт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаИнкассация.ДокументРасхода.СтруктурнаяЕдиница);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.Контрагент); //+++АК MIND 2017.12.26 добавлено субконто контрагенты
				Проводка.Содержание	= "Инкассация в банк";
				
				НеРаспределеннаяСумма = НеРаспределеннаяСумма - СтрокаИнкассация.Сумма;
			КонецЦикла;
			
			
			Если НеРаспределеннаяСумма > 0 Тогда
				//Пишем проводку без распределения по источникам
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период		= ЭтотОбъект.Дата;
				Проводка.СчетДт		= ПланыСчетов.Финансовый.РасчетныйСчет;
				Проводка.Сумма		= НеРаспределеннаяСумма;
				//Проводка.Организация			= Организация;
				
				Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
				Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка.СчетКт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.Контрагент); //+++АК MIND 2017.12.26 добавлено субконто контрагенты
				Проводка.Содержание	= "Нераспределенная инкассация в банк";
			КонецЕсли;
			
			
			СтруктураНастроекФальшивок 	= РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(ЭтотОбъект.Дата,
			Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.ФальшивыеДеньги));
			СтруктураНастроекИзлишек 	= РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(ЭтотОбъект.Дата,
			Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.ИзлишкиПриИнкассации));
			СтруктураНастроекНедостач 	= РегистрыСведений.НастройкаОтраженияОперацийВУчете.ПолучитьПоследнее(ЭтотОбъект.Дата,
			Новый Структура("ВидОперации", Перечисления.ВидыОперацийВУчете.НедостачаПриИнкассации));
			
			Для каждого СтрокаАкта Из ЭтотОбъект.АктыНаСписание Цикл
				
				Если СтрокаАкта.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.ФальшиваяКупюра Тогда
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период		= ЭтотОбъект.Дата;
					
					Проводка.СчетКт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаАкта.ТорговаяТочка);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.Контрагент); //+++АК MIND 2017.12.26 добавлено субконто контрагенты
					
					Проводка.СчетДт		= СтруктураНастроекФальшивок.Счет;
					Проводка.Сумма		= - СтрокаАкта.Сумма;
					//Проводка.Сумма		= СтрокаАкта.Сумма;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"),СтрокаАкта.ТорговаяТочка));
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураНастроекФальшивок.СтатьяДоходовРасходов);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15"),ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаАкта.ТорговаяТочка, Дата)));
					
					//Проводка.СчетДт		= СтруктураНастроекФальшивок.Счет;
					//				
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ?(СтрокаАкта.ТорговаяТочка.Код="P00000231" или СтрокаАкта.ТорговаяТочка.Код="P00000243",справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"),СтрокаАкта.ТорговаяТочка));
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураНастроекФальшивок.СтатьяДоходовРасходов);
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ?(СтрокаАкта.ТорговаяТочка.Код="P00000231" или СтрокаАкта.ТорговаяТочка.Код="P00000243",справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15"),ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаАкта.ТорговаяТочка, Дата)));
					
					//				
					//Проводка.СчетКт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Организация);
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаАкта.ТорговаяТочка);
					
					Проводка.Содержание	= "Фальшивая купюра";
					
				ИначеЕсли СтрокаАкта.ВидАктаНаСписание = Перечисления.ВидыАктовНаСписаниеПриИнкассации.Недостача_Излишек Тогда
					
					// Излишек
					Если СтрокаАкта.Сумма > 0 Тогда
						
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период		= ЭтотОбъект.Дата;
						
						Проводка.СчетДт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаАкта.ТорговаяТочка);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.Контрагент); //+++АК MIND 2017.12.26 добавлено субконто контрагенты
						
						Проводка.СчетКт		= СтруктураНастроекИзлишек.Счет;
						Проводка.Сумма		= СтрокаАкта.Сумма;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"),СтрокаАкта.ТорговаяТочка));
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураНастроекИзлишек.СтатьяДоходовРасходов);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15"),ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаАкта.ТорговаяТочка,Дата)));
						
						Проводка.Содержание	= "Излишки при инкассации";
						
						// недостачи	
					Иначе 
						
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период		= ЭтотОбъект.Дата;
						
						Проводка.СчетКт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаАкта.ТорговаяТочка);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.Контрагент); //+++АК MIND 2017.12.26 добавлено субконто контрагенты
						
						Проводка.СчетДт		= СтруктураНастроекНедостач.Счет;
						Проводка.Сумма		= - СтрокаАкта.Сумма;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"),СтрокаАкта.ТорговаяТочка));
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураНастроекНедостач.СтатьяДоходовРасходов);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ?(МассивЗаменыЦФО.Найти(СтрокаАкта.ТорговаяТочка.Код) <> Неопределено,справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_15"),ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтрокаАкта.ТорговаяТочка,Дата)));
						
						Проводка.Содержание	= "Недостачи при инкассации";
						
					КонецЕсли;	
					
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПостояннойЧастиАрендыОтАрендатора)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПеременнойЧастиАрендыОтАрендатора)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаДепозитаОтАрендатора)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя) 
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика) Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Содержание = ЭтотОбъект.ВидОперации;						
		Проводка.Период		= ЭтотОбъект.Дата;
		Проводка.СчетДт		= ПланыСчетов.Финансовый.РасчетныйСчет;
		Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
		//Проводка.Организация			= Организация;
		
		Проводка.СубконтоДт.Организации 					= ЭтотОбъект.Организация;
		Проводка.СубконтоДт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.СубконтоКт3);
		
	КонецЕсли;
	
	ОбщиеПроцедуры.ПровестиДокументПоРегиструВзаиморасчетыПоАренде(ЭтотОбъект, Отказ);
	
	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьПриход();
	Движение.Период 			= ЭтотОбъект.Дата;
	Движение.Организация 		= ЭтотОбъект.Организация;
	Движение.Контрагент 		= ЭтотОбъект.Контрагент;
	Движение.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента; 
	//Движение.ЗаявкаНаРасходованиеСредств = ЗаявкаНаРасходованиеСредств;
	Движение.Сумма 				= ЭтотОбъект.СуммаДокумента;
	
	//+++ZEZA //20170323
	
	//
	Счет443 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	Счет511 = ПланыСчетов.Финансовый.РасчетныйСчет;
	
	//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
	//Счет574 = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
	Счет574 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
	//---АК LAGP
	
	Счет712 = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
	
	//
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
		
		//1. Сначала пополнение карты 
		
		//
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = Дата;
		
		//---КТ
		Проводка.СчетКт	= Счет511;
		
		//
		Проводка.СубконтоКт.Организации = Организация;
		Проводка.СубконтоКт.БанковскиеСчета = СчетКонтрагента;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		
		//---ДТ
		Проводка.СчетДт = Счет574;
		
		//
		Проводка.СубконтоДт.Организации = Организация;
		Проводка.СубконтоДт.ИсточникиДенежныхСредств = СчетОрганизации;
		Проводка.СубконтоДт.КорпоративныеБанковскиеКарты = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
		
		//---СУММА
		Проводка.Сумма = СуммаДокумента;
		
		//ПЕРИОД И ПРОЧЕЕ
		Проводка.Период = Дата;
		Проводка.Содержание	= ВидОперацииСКорпоративнойКартой;
		
		//2. Теперь списание на затраты
		
		//
		Проводка = Движения.Финансовый.Добавить();
		
		
		//---КТ
		Проводка.СчетКт	= Счет574;
		
		//
		Проводка.СубконтоКт.Организации = Организация;
		Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетОрганизации;
		Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
		
		//---ДТ
		Проводка.СчетДт = Счет443;
		
		//
		Проводка.СубконтоДт.ТорговыеТочки = СубконтоДт1;//Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
		Проводка.СубконтоДт.СтатьиДоходовРасходов = СубконтоДт2;//Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
		Проводка.СубконтоДт.ЦФО	= СубконтоДт3;//Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Управление розницей
		
		//---СУММА
		Проводка.Сумма = СуммаДокумента;
		
		//ПЕРИОД И ПРОЧЕЕ
		Проводка.Период = Дата;
		Проводка.Содержание	= "Списание с корпоративной карты: " + ВидОперацииСКорпоративнойКартой;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНаКорпоративнуюКарту) Тогда
		
		//
		Проводка = Движения.Финансовый.Добавить();
		
		//ДТ
		Проводка.СчетДт	= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
		
		//
		Проводка.СубконтоДт.Организации	= СубконтоДт1;
		Проводка.СубконтоДт.ИсточникиДенежныхСредств = СубконтоДт2;
		Проводка.СубконтоДт.КорпоративныеБанковскиеКарты = СубконтоДт3;
		
		//КТ
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		
		//
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоКт3);
		
		//СУММА
		Проводка.Сумма = СуммаДокумента;
		
		//ПЕРИОД И ПРОЧЕЕ
		Проводка.Период = Дата;
		Проводка.Содержание = ВидОперации;						
		
		//+++АК pozm 30.08.2017 ИП-00016579
		Проводка.Организация = ЭтотОбъект.Организация;
		//---АК pozm 30.08.2017 ИП-00016579
	КонецЕсли;	
	
	//---ZEZA
	
	//+++АК SHEP 2018.04.28 ИП-00018492: перенёс сюда (ниже)
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
	//+++ AK BARA
	Если Отказ = Ложь и ДокументыРасходИзБанкаУказаны = Ложь и (ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДепозитаОтАрендодателя
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПеременнойЧастиАрендыОтАрендодателя
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПостояннойЧастиАрендыОтАрендодателя
		) Тогда
		//УстановитьПривилегированныйРежим(Истина);
		//Движения.Финансовый.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК EmailАдрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Пользователь
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
		Запрос.УстановитьПараметр("Пользователь", Контрагент.ОсновнойБухгалтерПокупателя);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 		
			
			АдресОтправки = "no-reply@vkusvill.ru";
			Почта = Новый ИнтернетПочта;   	
			УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресОтправки);	
			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
			Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Тема = "Проведение документа Поступление в банк";
			Письмо.ИмяОтправителя  = ""+СокрЛП(УчёткаДляНастройки)+"";
			Письмо.Отправитель.Адрес = АдресОтправки;
			
			//отрпавляем только бухгатеру.
			//Попытка
			//	СпРассылки = Константы.ДопСписокРассылкиСвязокПостБанка.Получить().Получить().ВыгрузитьКолонку("физЛицо");
			//Исключение
			//	СпРассылки = Новый Массив;
			//КонецПопытки;
			//
			//Запрос1 = Новый Запрос;
			//Запрос1.Текст = 
			//"ВЫБРАТЬ
			//|	КонтактнаяИнформация.Представление КАК ЕМайл
			//|ИЗ
			//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			//|ГДЕ
			//|	КонтактнаяИнформация.Объект В(&СписокРассылки)
			//|	И КонтактнаяИнформация.Тип = &Тип
			//|	И КонтактнаяИнформация.Вид = &Вид";
			//
			//Запрос1.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
			//Запрос1.УстановитьПараметр("СписокРассылки", СпРассылки);
			//Запрос1.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			//
			//Результат1 = Запрос1.Выполнить();
			//
			//ВыборкаПочта = Результат1.Выбрать();
			//
			//Пока ВыборкаПочта.Следующий() Цикл
			//	Получатель = Письмо.Получатели.Добавить();		
			//	Получатель.Адрес = "bancom@yandex.ru";//ВыборкаПочта.ЕМайл;
			//КонецЦикла;
			
			
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = СокрЛП(ВыборкаДетальныеЗаписи.EmailАдрес);
			//Получатель.Адрес = "bancom@yandex.ru";
			
			//Получатель.Адрес = "no-reply@vkusvill.ru";
			ТекстПисьма = "Добрый день.
			|Проведен возрат денежных средств от "+Контрагент+", номер "+Номер+", сумма "+СуммаДокумента+".
			|Необходимо в срочно порядке привязать  возврат к выплатам. Для формирования проводок по возврату.
			|";
			ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
			Попытка
				Почта.Послать(Письмо);
				Сообщить("Письмо отправлено.");
			Исключение
				Сообщить("Письмо не отправлено. " + ОписаниеОшибки());
			КонецПопытки;	
			
		КонецЕсли;
		//УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	//--- AK BARA
КонецПроцедуры

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС() Экспорт
	
	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС = СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

Процедура ПроверитьСоответствиеДанныхСSQL() Экспорт
	
	Если ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЭквайрингСводно Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПредыдущейВыписки = ПредыдущаяВыписка().Дата;
	ДатаПо	= КонецДня(Дата);
	ДатаС	= КонецДня(ДатаПредыдущейВыписки) + 1;
	
	
	//mind 2017-08-29 переделал логику проверки и убрал обращение к объекту внешний источник данных
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	dbo_Terminal_prihod.id_terminal,
	//|	ВЫРАЗИТЬ(СУММА(dbo_Terminal_prihod.summa) КАК ЧИСЛО(15, 2)) КАК SummaSQL,
	//|	0 КАК СуммаВДокументе
	//|ИЗ
	//|	ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Terminal_prihod КАК dbo_Terminal_prihod
	//|ГДЕ
	//|	dbo_Terminal_prihod.date МЕЖДУ &ДатаС И &ДатаПо
	//|	И dbo_Terminal_prihod.schet = &schet
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	dbo_Terminal_prihod.id_terminal";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ДатаС"	, ДатаС);
	//Запрос.УстановитьПараметр("ДатаПо"	, ДатаПо);
	//Запрос.УстановитьПараметр("schet"	, ЭтотОбъект.СчетОрганизации.НомерСчета);
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//Для каждого Стр Из ЭтотОбъект.ЭквайрингРасшифровка Цикл
	//	НС = ТЗ.Добавить();
	//	НС.id_terminal		= Стр.Терминал.ИД;
	//	НС.SummaSQL			= 0;
	//	НС.СуммаВДокументе	= Стр.СуммаДокумента;
	//КонецЦикла;	
	//ТЗ.Свернуть("id_terminal", "SummaSQL, СуммаВДокументе");
	//Для Каждого Стр Из ТЗ Цикл
	//	Если Стр.SummaSQL <> Стр.СуммаВДокументе Тогда
	//		ЭтотОбъект.ЭквайрингНеСоответствуетДаннымВSQL = Истина;
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT 
	|    SUM(CAST(ISNULL([summa], 0) as numeric(15, 2))) as summaSql
	|    ,CAST([id_terminal] as nvarchar(20)) id_terminal
	|    
	|FROM [SMS_IZBENKA].[dbo].[terminal_prihod] (nolock)
	|WHERE date between " + ВнешниеДанные.ФорматПоля(ДатаС, Истина) + " and " + ВнешниеДанные.ФорматПоля(ДатаПо, Истина) + " and schet = " + ВнешниеДанные.ФорматПоля(ЭтотОбъект.СчетОрганизации.НомерСчета) + "
	|GROUP BY id_terminal";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанные = Новый ТаблицаЗначений();
	ТабДанные.Колонки.Добавить("id_terminal");
	ТабДанные.Колонки.Добавить("summaSql", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабДанные.Колонки.Добавить("СуммаВДокументе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			СтрокаДоб.id_terminal = СокрЛП(Rs.Fields("id_terminal").Value);
			СтрокаДоб.summaSql = Rs.Fields("summaSql").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("Терминалы", ЭтотОбъект.ЭквайрингРасшифровка.ВыгрузитьКолонку("Терминал"));
	ЗапросКеш.Текст = "ВЫБРАТЬ
	|	Терминалы.Ссылка,
	|	Терминалы.ИД
	|ИЗ
	|	Справочник.Терминалы КАК Терминалы
	|ГДЕ
	|	Терминалы.Ссылка В(&Терминалы)";
	
	ТабКеш = ЗапросКеш.Выполнить().Выгрузить();
	ТабКеш.Индексы.Добавить("Ссылка");
	
	Для каждого Стр Из ЭтотОбъект.ЭквайрингРасшифровка Цикл
		СтрокаДоб = ТабДанные.Добавить();
		СтрокаКеш = ТабКеш.Найти(Стр.Терминал, "Ссылка");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаДоб.id_terminal		= СокрЛП(СтрокаКеш.ИД);
		КонецЕсли;	
		СтрокаДоб.СуммаВДокументе	= Стр.СуммаДокумента;
	КонецЦикла;
	
	ТабДанные.Свернуть("id_terminal", "SummaSQL, СуммаВДокументе");
	ЭтотОбъект.ЭквайрингНеСоответствуетДаннымВSQL = Ложь;
	Для Каждого Стр Из ТабДанные Цикл
		Если Стр.SummaSQL <> Стр.СуммаВДокументе Тогда
			ЭтотОбъект.ЭквайрингНеСоответствуетДаннымВSQL = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПредыдущаяВыписка() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеВБанк.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВБанк КАК ПоступлениеВБанк
	|ГДЕ
	|	ПоступлениеВБанк.Проведен
	|	И ПоступлениеВБанк.Дата < &Дата
	|	И ПоступлениеВБанк.СчетОрганизации = &СчетОрганизации
	|	И ПоступлениеВБанк.ВидОперации = &ВидОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеВБанк.Дата УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Дата"			, НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("СчетОрганизации"	, ЭтотОбъект.СчетОрганизации);
	Запрос.УстановитьПараметр("ВидОперации"		, ЭтотОбъект.ВидОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредыдущаяВыписка = Неопределено;
	Если Выборка.Следующий() Тогда
		ПредыдущаяВыписка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПредыдущаяВыписка;
	
КонецФункции	

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	////mind заблокируем таблицу
	//ДокМетаданные = Метаданные();
	//Блокировка = Новый БлокировкаДанных();
	//ЭлементБлокировка = Блокировка.Добавить();
	//ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
	//ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировка.УстановитьЗначение("Вид", ДокМетаданные.Имя);
	//ЭлементБлокировка.УстановитьЗначение("Организация", Организация);
	//ЭлементБлокировка.УстановитьЗначение("Период", Дата);
	//Блокировка.Заблокировать();
	//
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Вид", ДокМетаданные.Имя);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	//Запрос.Текст = "ВЫБРАТЬ
	//|	НомераДокументов.Номер,
	//|	НомераДокументов.Организация.Префикс КАК Префикс
	//|ИЗ
	//|	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
	//|ГДЕ
	//|	НомераДокументов.Период = &Период
	//|	И НомераДокументов.Вид = &Вид
	//|	И НомераДокументов.Организация = &Организация";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//СтандартнаяОбработка = Ложь;
	//Если Выборка.Следующий() Тогда
	//	МаксНомер = Выборка.Номер + 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
	//		Номер = СокрЛП(Выборка.Префикс) + Сред(Номер, СтрДлина(Выборка.Префикс) + 1);
	//	КонецЕсли;
	//Иначе
	//	МаксНомер = 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Организация.Префикс) Тогда
	//		Номер = СокрЛП(Организация.Префикс) + Сред(Номер, СтрДлина(Организация.Префикс) + 1);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
	//Запись.Период = НачалоГода(Дата);
	//Запись.Вид = ДокМетаданные.Имя;
	//Запись.Организация = Организация;
	//Запись.Номер = МаксНомер;
	//Запись.Записать();
	
	
КонецПроцедуры

Процедура ПодобратьРасходникиНаСуммуПсевдополиномиальнымАлгоритмом(Масштаб=1000) Экспорт
	ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*5;
	ДатаКон 		= ЭтотОбъект.Дата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СуммаДокумента"		, СуммаДокумента);
	Запрос.УстановитьПараметр("Организация"			, Организация);
	Запрос.УстановитьПараметр("Масштаб"				, Масштаб);
	Запрос.УстановитьПараметр("ЭтотДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерПТК"			, ЭтотОбъект.НомерПТК);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходИзКассы.Дата КАК Дата,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Ссылка КАК ДокументРасхода,
	|	Выразить(РасходИзКассы.СуммаДокумента/&Масштаб Как Число(5,0)) КАК Сумма,// алгоритм для целых
	|	РасходИзКассы.СуммаДокумента КАК СуммаДокумента,
	|	РасходИзКассы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор КАК ИнкассируемыйБанк,
	|	ПОДСТРОКА(РасходИзКассы.Комментарий, 1, 200) КАК Комментарий,
	|	ЛОЖЬ КАК Подобран
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
	|		ПО (ПоступлениеВБанкИнкассация.ДокументРасхода = РасходИзКассы.Ссылка)
	|ГДЕ
	|	(ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL 
	|			ИЛИ ПоступлениеВБанкИнкассация.Ссылка = &ЭтотДокумент)
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	|	И РасходИзКассы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.СуммаДокумента < &СуммаДокумента
	|	И РасходИзКассы.СтруктурнаяЕдиница.НомерПТК = &НомерПТК
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	
	ТабРКОПодбора = Запрос.Выполнить().Выгрузить();
	
	//	T[0, 0] := 1;
	//for j := 1 to 16 do T[0, j] := 0;
	//for i := 1 to  5 do T[i, 0] := 0;
	
	//for i := 1 to 5 do begin
	//  for j := 1 to 16 do begin
	//	if j >= M[i] then begin
	//	   T[i, j] = max(T[i - 1, j], T[i - 1, j - M[i]])
	//	end else begin
	//	   T[i, j] = T[i - 1, j];
	//	end;
	//  end;
	//end;
	
	//sum := 16;
	//if T[5, 16] = 1 then begin
	//  for i := 5 downto 1 do begin
	//	if T[i, sum] = T[i - 1, sum] then begin
	//	   writeln (i, "---No")
	//	end else begin
	//	   writeln (i, "---Yes");
	//	   sum := sum - M[i];
	//	end;
	//  end;
	//end else begin
	//  writeln("No solution");
	//end;
	
	T = Новый ТаблицаЗначений();
	T.Колонки.Добавить();
	T.Добавить();
	T[0][0] = 1;
	
	ЗаданнаяСумма = ОКР((ЭтотОбъект.СуммаДокумента-ЭтотОбъект.АктыНаСписание.Итог("Сумма"))/Масштаб);// масштабируем и работаем с целыми
	
	Для жи = 1 По ЗаданнаяСумма Цикл
		T.Колонки.Добавить();
		T[0][жи]=0;
	КонецЦикла;
	
	ДокументовВНаборе = ТабРКОПодбора.Количество();
	
	Для й = 1 По ДокументовВНаборе Цикл
		T.Добавить();
		T[й][0] = 1;
	КонецЦикла;	
	
	Для i = 1 По ДокументовВНаборе Цикл
		Для j = 1 По ЗаданнаяСумма Цикл
			Если j >= ТабРКОПодбора[i-1].Сумма Тогда
				T[i][j] = Макс(T[i - 1][j], T[i - 1] [j - ТабРКОПодбора[i-1].Сумма])
			Иначе
				T[i][j] = T[i - 1] [j];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	sum = ЗаданнаяСумма;
	
	Если T[ДокументовВНаборе][ЗаданнаяСумма ] = 1 Тогда
		i = ДокументовВНаборе;
		Пока i>= 1 Цикл
			Если T[i] [sum] = T[i - 1] [sum] Тогда
				
			Иначе
				НС = ЭтотОбъект.Инкассация.Добавить();
				НС.ДокументРасхода = ТабРКОПодбора[i-1].ДокументРасхода;
				НС.Сумма = ТабРКОПодбора[i-1].СуммаДокумента;
				sum = sum - ТабРКОПодбора[i-1].Сумма;
			КонецЕсли;
			i=i-1;
		КонецЦикла;	
		
		
	Иначе
		Сообщить("Нет решений");
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ПодобратьРасходникиНаСуммуРандомом() Экспорт
	
	//+++АК POZM 2018.03.14 ИП-00018027 
	ДатаИнкассацииВНазначении = Дата(1,1,1);
	ПозицияГода = Найти(ЭтотОбъект.НазначениеПлатежа,"2018");
	Если ПозицияГода>0 и Найти("-1234567890",Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-7,1))=0 Тогда
		Попытка
			
			ДатаИнкассацииВНазначении = Дата(Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода,4)),Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-3,2)),Число(Сред(ЭтотОбъект.НазначениеПлатежа,ПозицияГода-6,2)));
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;	
	//---АК POZM 
	
	Если ЭтотОбъект.Контрагент.Код = "000000203" Тогда // Финчер
		//+++АК POZM 2018.03.14 ИП-00018027 
		//ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*5;
		//ДатаКон 		= ЭтотОбъект.Дата;
		Если ЗначениеЗаполнено(ДатаИнкассацииВНазначении) Тогда
			ДатаНач 		= ДатаИнкассацииВНазначении;
			ДатаКон 		= КонецДня(ДатаИнкассацииВНазначении);
		Иначе
			ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*5;
			ДатаКон 		= ЭтотОбъект.Дата;
		КонецЕсли;	
	Иначе	
		//+++АК POZM 2018.03.14 ИП-00018027 
		//ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*10;
		//ДатаКон 		= ЭтотОбъект.Дата;
		Если ЗначениеЗаполнено(ДатаИнкассацииВНазначении) Тогда
			ДатаНач 		= ДатаИнкассацииВНазначении;
			ДатаКон 		= КонецДня(ДатаИнкассацииВНазначении);
		Иначе
			ДатаНач 		= ЭтотОбъект.Дата - 60*60*24*10;
			ДатаКон 		= ЭтотОбъект.Дата;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"				, НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"				, КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СуммаДокумента"		, СуммаДокумента);
	Запрос.УстановитьПараметр("Организация"			, Организация);
	Запрос.УстановитьПараметр("ЭтотДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерПТК"			, ЭтотОбъект.НомерПТК);
	Запрос.УстановитьПараметр("ЭтоМКБ"	, СокрЛП(ЭтотОбъект.Контрагент.Код) = "Т0002607");
	Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("Самоинкассация"	, Найти(ЭтотОбъект.НазначениеПлатежа,"АДМ")>0);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходИзКассы.Дата КАК Дата,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Ссылка КАК ДокументРасхода,
	|	РасходИзКассы.СуммаДокумента КАК Сумма,
	|	РасходИзКассы.СуммаДокумента КАК СуммаДокумента,
	|	РасходИзКассы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходИзКассы.СтруктурнаяЕдиница.КонтрагентИнкассатор КАК ИнкассируемыйБанк,
	|	ПОДСТРОКА(РасходИзКассы.Комментарий, 1, 200) КАК Комментарий,
	|	ЛОЖЬ КАК Подобран
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВБанк.Инкассация КАК ПоступлениеВБанкИнкассация
	|		ПО (ПоступлениеВБанкИнкассация.ДокументРасхода = РасходИзКассы.Ссылка)
	|ГДЕ
	|	(ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL
	|			ИЛИ ПоступлениеВБанкИнкассация.Ссылка = &ЭтотДокумент)
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.Инкассация)
	|	И РасходИзКассы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.СуммаДокумента < &СуммаДокумента
	|	И ВЫБОР
	|			КОГДА &Самоинкассация
	|				ТОГДА РасходИзКассы.СтруктурнаяЕдиница.НомерПТК <> """"
	|			ИНАЧЕ РасходИзКассы.СтруктурнаяЕдиница.НомерПТК = """"
	|		КОНЕЦ
	|	И ПоступлениеВБанкИнкассация.Ссылка ЕСТЬ NULL
	|	И РасходИзКассы.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	
	ТабРКОПодбора = Запрос.Выполнить().Выгрузить();
	
	Если ТабРКОПодбора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданнаяСумма = ЭтотОбъект.СуммаДокумента-ЭтотОбъект.АктыНаСписание.Итог("Сумма");
	
	Для й=1 По 5000 Цикл
		ТЗ = ТабРКОПодбора.Скопировать();
		ГСЧ= новый ГенераторСлучайныхЧисел();
		ТЗ.Колонки.Добавить("СЧ");
		Для Каждого Стр ИЗ ТЗ Цикл
			Стр.СЧ = ГСЧ.СлучайноеЧисло();
		КонецЦикла;	
		ТЗ.Сортировать("СЧ Возр");
		Пока ТЗ.Итог("Сумма")>ЗаданнаяСумма Цикл
			ТЗ.Удалить(0);
			Если ТЗ.Итог("Сумма")=ЗаданнаяСумма Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если ТЗ.Итог("Сумма")=ЗаданнаяСумма Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ТЗ.Итог("Сумма")=ЗаданнаяСумма Тогда
		Для Каждого Стр ИЗ ТЗ Цикл
			НС = ЭтотОбъект.Инкассация.Добавить();
			НС.ДокументРасхода = Стр.ДокументРасхода;
			НС.Сумма = Стр.Сумма;
		КонецЦикла;	
		
	Иначе
		Сообщить("Не удалось подобрать решение. Можете попробовать ещё раз, должно повезти!");
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтправитьПисьмоОРасхожденииИнкассации()  Экспорт
	Если ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.Инкассация Тогда
		Возврат;
	КонецЕсли;	
	
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//
	//СКД=Документы.СделкаСПоставщиком.ПолучитьМакет("СхемаОтчетаОтправкиПоставщикуОбОплате");
	//НастройкиСКД = СКД.НастройкиПоУмолчанию;
	//НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Заявка", ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
	//НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", ЭтотОбъект.Ссылка);
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	//
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
	//
	//ТабДок=Новый ТабличныйДокумент;
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ТабДок);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//
	//ИмяФайла=Новый УникальныйИдентификатор;
	//ИмяФайла=КаталогВременныхФайлов()+ИмяФайла+".xls";
	//
	//ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	//Отправка письма
	Для Каждого Стр ИЗ ЭтотОбъект.АктыНаСписание Цикл
		СписокКому = Новый СписокЗначений;
		
		СписокКому.Добавить("buh02@p01.vkusvill.ru");
		СписокКому.Добавить("buh56@vkusvill.ru");
		СписокКому.Добавить("buh18@vkusvill.ru");
		СписокКому.Добавить("buh53@vkusvill.ru");
		
		//СписокКому.Добавить("product_18@vkusvill.ru");
		СписокКому.Добавить("buh39@vkusvill.ru");
		СписокКому.Добавить("buh43@vkusvill.ru");
		СписокКому.Добавить("buh52@vkusvill.ru");
		//СписокКому.Добавить("buh07@vkusvill.ru");
		
		
		
		
		
		Если ЗначениеЗаполнено(Стр.ТорговаяТочка.АдресЭлектроннойПочты) Тогда
			СписокКому.Добавить(Стр.ТорговаяТочка.АдресЭлектроннойПочты);
		КонецЕсли;	
		
		
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Внимание:расхождение инкассации за "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")
		+", "+Стр.ВидАктаНаСписание+", "+ЭтотОбъект.Ссылка+", "+Стр.ТорговаяТочка+", "
		+Формат(ЭтотОбъект.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")+", "+Стр.Сумма;
		
		
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		Для Каждого ПолучательЭлемент Из СписокКому Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = ПолучательЭлемент.Значение;
		КонецЦикла;	
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		//ТекстСообщения.Текст     = "Во вложении находится информация об оплаченном оборудовании";
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		Если ЗначениеЗаполнено(Стр.Скан) Тогда
			Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Скан));
		КонецЕсли;	
		
		//	Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Почта.Послать(Письмо);
		//	КонецЕсли;	
		Почта.Отключиться();
	КонецЦикла;	
	
	
КонецПроцедуры	

//+++АК SHEP 2017.11.10 ИП-00017206
// Формирует печатную форму платежного поручения
//
// Возвращает:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт
	
	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		//И НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	//mind 2017-08-23 не понятно зачем такое ограничение
	//Если Прав(НомерПечать, 3) = "000" Тогда
	//	Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеВБанк_ПлатежноеПоручение";
	
	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);
	
	ДатаОплаты = ДатаВходящегоДокумента;
	Если ЭтотОбъект.СчетОрганизации.Банк.Код = "044525994" Тогда
		Макет = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьМакет("ПлатежноеПоручение");	
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		БанкОрганизации = СчетОрганизации.Банк;
		Обл.Параметры.ПодписьБанкПлательщика	= "" + БанкОрганизации;
		Обл.Параметры.ПодписьГородПлательщика 	= "" + БанкОрганизации.Город;
		ДатаПрописью = Формат(ДатаОплаты, "ДФ='дд ММММ гггг'");                                                        
		Обл.Параметры.ПодписьДатаОплаты			= Лев(ДатаПрописью, 2) + " " + ВРег(Сред(ДатаПрописью, 4, 3)) + " " + Прав(ДатаПрописью, 4);
		Обл.Параметры.ПодписьКорСчет     		= "к/с " + БанкОрганизации.КоррСчет + " БИК " + БанкОрганизации.Код; 
		Обл.Параметры.ДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);
	ИначеЕсли ЭтотОбъект.СчетОрганизации.Банк.Код = "044525225" Тогда
		Макет = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьМакет("ПлатежноеПоручение_Сбер");	
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		БанкОрганизации = СчетОрганизации.Банк;
		Обл.Параметры.ПодписьБанкПлательщика	= "ПАО Сбербанк";
		Обл.Параметры.ПодписьГородПлательщика 	= "Московский банк ПАО Сбербанк" + Символы.ПС + "Дополнительный офис № 1869" + Символы.ПС + "БИК 044525225";
		Обл.Параметры.ДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);	
		Обл.Параметры.ПодписьДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);
	Иначе
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	
	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерВходящегоДокумента;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ""; //СокрЛП(ВидОперации);
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);
	
	Обл.Параметры.ПлательщикИНН           = "ИНН " + Контрагент.ИНН;
	Обл.Параметры.ПлательщикКПП           = "КПП " + "";
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент = "";
	Иначе	
		СтрКорреспондент = " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Обл.Параметры.Плательщик			= Контрагент.НаименованиеПолное;
	Обл.Параметры.БанкПлательщика		= "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	
	Обл.Параметры.НомерСчетаПлательщика	= ВернутьРасчетныйСчет(СчетКонтрагента);
	
	Обл.Параметры.БикБанкаПлательщика	= БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПлательщика	= БанкКонтрагента.КоррСчет;
	
	Обл.Параметры.ПолучательИНН		= "ИНН " + Организация.ИНН;
	Обл.Параметры.ПолучательКПП		= "КПП " + "";
	Обл.Параметры.Получатель		= Организация.НаименованиеПолное;
	
	Обл.Параметры.БанкПолучателя		= "" + БанкОрганизации + " " + БанкОрганизации.Город;
	Обл.Параметры.БикБанкаПолучателя	= БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПолучателя	= БанкОрганизации.КоррСчет;
	
	Обл.Параметры.НомерСчетаПолучателя	= ВернутьРасчетныйСчет(СчетОрганизации);
	
	Обл.Параметры.НазначениеПлатежа		= СокрЛП(НазначениеПлатежа);
	Обл.Параметры.СрокПлатежа			= "";
	
	ТабДокумент.Вывести(Обл);
	
	//Если ЭтотОбъект.СчетОрганизации.Банк.Код = "044525994" Тогда
	//	Обл   = Макет.ПолучитьОбласть("ЭЦП");
	//	ТабДокумент.Вывести(Обл);
	//	Если ЭтотОбъект.Организация.ИНН = "7734675810" Тогда
	//		Обл   = Макет.ПолучитьОбласть("ЭЦП1");
	//		Обл.Параметры.Владелец = "CN=Demnichenko Natalija Vaclavovna, O=OOO 'Vkusvill', L=Moskva, C=RU";
	//		Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
	//		ТабДокумент.Вывести(Обл);
	//		
	//		Обл   = Макет.ПолучитьОбласть("ЭЦП1");
	//		Обл.Параметры.Владелец = "CN=Farafonov Aleksejj Vladimirovich, O=OOO 'Vkusvill', L=Moskva, C=RU";
	//		Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
	//		ТабДокумент.Вывести(Обл);
	//	ИначеЕсли ЭтотОбъект.Организация.ИНН = "7726660031" Тогда
	//		Обл   = Макет.ПолучитьОбласть("ЭЦП1");
	//		Обл.Параметры.Владелец = "CN=Krivenko Andrejj Aleksandrovich, O=OOO 'Lug da Pole', L=Moskva, C=RU";
	//		Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
	//		ТабДокумент.Вывести(Обл);
	//		
	//		Обл   = Макет.ПолучитьОбласть("ЭЦП1");
	//		Обл.Параметры.Владелец = "CN=Demnichenko Natalija Vaclavovna, O=OOO 'Lug da Pole', L=Moskva, C=RU";
	//		Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
	//		ТабДокумент.Вывести(Обл);
	//	ИначеЕсли ЭтотОбъект.Организация.ИНН = "7734641716" Тогда
	//		Обл   = Макет.ПолучитьОбласть("ЭЦП1");
	//		Обл.Параметры.Владелец = "CN=Krivenko Andrejj Aleksandrovich, O=OOO 'Proekt Izbjonka', L=Moskva, C=RU";
	//		Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
	//		ТабДокумент.Вывести(Обл);
	//	КонецЕсли;	
	//КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);
	
	Возврат Результат;
	
КонецФункции

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок, СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок, СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	#Если Клиент Тогда
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		
		Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ПлатежноеПоручение" тогда
			
			// Управленческая печатная форма документа
			ТабДокумент = ПечатьПлатежногоПоручения();
			
			//ИначеЕсли ИмяМакета = "ПечатьПеречисленияЗарплаты" тогда
			
			//	// Управленческая печатная форма документа
			//	ТабДокумент = ПечатьПеречисленияЗарплаты();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	#КонецЕсли
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
