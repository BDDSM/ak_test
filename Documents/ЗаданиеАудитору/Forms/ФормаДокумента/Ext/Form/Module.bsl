&НаСервереБезКонтекста
Функция ЭтоАудитор()
	
	Возврат РольДоступна("АудиторТоваров");
	
КонецФункции 

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если ЭтоАудитор() Тогда
		Элементы.Номер.ТолькоПросмотр = Истина;
		Элементы.Дата.ТолькоПросмотр = Истина;
		Элементы.ТипЗадания.ТолькоПросмотр = Истина;
		Элементы.Аудитор.Видимость= Ложь;
		Элементы.Номенклатура.ТолькоПросмотр = Истина;
		Элементы.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
		Элементы.Производитель.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()

	Элементы.Номенклатура.Видимость = НЕ (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.АудитПроизводителя"));
	Элементы.ХарактеристикаНоменклатуры.Видимость = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПроверитьЭтикетку") ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.СоздатьЭтикетку"));
    Элементы.Производитель.Видимость = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.АудитПроизводителя"));

	Элементы.ГруппаТовары.Видимость = НЕ (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПроверитьЭтикетку") ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.СоздатьЭтикетку"));

	Элементы.ТоварыНоменклатура.Видимость = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.АудитПроизводителя"));
	Элементы.ТоварыХарактеристикаНоменклатурыКонтекстноеМеню.Видимость = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПоискНовыхПроизводителей"));

	//
	Элементы.СтраницаЭтикетки.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	Элементы.СтраницаСертификаты.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	Элементы.СтраницаСообщения.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	//Элементы.СтраницаЖалобы.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	Элементы.СтраницаАнализы.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	//Элементы.СтраницаЦеныОбъемы.Видимость = ЗначениеЗаполнено(ТекущаяХарактеристика);
	
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьHTML()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Жалобы.Отбор.Элементы.Очистить();
	
	Если Объект.ТипЗадания = Перечисления.ТипыЗаданийАудитору.АудитПроизводителя И ЗначениеЗаполнено(Объект.Производитель) Тогда
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Производитель");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = Объект.Производитель;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Примечание");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	Иначе
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("id_OK");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = -1;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	//
	
	Если НЕ ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
		Возврат;
	КонецЕсли; 
	
	//
	Производитель = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗначенияСвойствОбъектов.Значение
	                      |ИЗ
	                      |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                      |ГДЕ
	                      |	ЗначенияСвойствОбъектов.Объект = &Объект
	                      |	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)");
	
	Запрос.УстановитьПараметр("Объект", ТекущаяХарактеристика);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Производитель = Выборка.Значение;
	КонецЕсли;   	
	
	//
	Если Объект.ТипЗадания <> Перечисления.ТипыЗаданийАудитору.АудитПроизводителя Тогда
		Жалобы.Отбор.Элементы.Очистить();
		
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = ТекущаяХарактеристика.Владелец;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Производитель");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = Производитель;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора = Жалобы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Примечание");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли; 
	
	//
	Анализы.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Анализы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ТекущаяХарактеристика.Владелец;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = Анализы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ХарактеристикаНоменклатуры");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ТекущаяХарактеристика;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	//
	ЦеныПоставщиков.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = ЦеныПоставщиков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ТекущаяХарактеристика.Владелец;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ЦеныПоставщиков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Характеристика");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ТекущаяХарактеристика;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	

	//
	ТаблицаКартинокИзБазы.Очистить();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НоменклатураЭтикетки.ИмяФайла,
	                      |	НоменклатураЭтикетки.Комментарий
	                      |ИЗ
	                      |	Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
	                      |ГДЕ
	                      |	НоменклатураЭтикетки.Характеристика = &Характеристика
	                      |	И НоменклатураЭтикетки.Ссылка = &Номенклатура
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НоменклатураЭтикетки.НомерСтроки");
	
	Запрос.УстановитьПараметр("Характеристика", ТекущаяХарактеристика); 

	Запрос.УстановитьПараметр("Номенклатура", ТекущаяХарактеристика.Владелец); 

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Файл = Новый Файл(Выборка.ИмяФайла);
		
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		Иначе
			НоваяСтрока = ТаблицаКартинокИзБазы.Добавить();
			НоваяСтрока.ИмяФайла = Выборка.ИмяФайла;
			НоваяСтрока.Комментарий = Выборка.Комментарий;
		КонецЕсли;	
	КонецЦикла;

	// 
	ТаблицаКартинокИзМагазина.Очистить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИнвентаризацияУпаковки.ОтносительноеИмяФайла КАК ИмяФайла,
	                      |	ИнвентаризацияУпаковки.Дата,
	                      |	ИнвентаризацияУпаковки.Магазин
	                      |ИЗ
	                      |	Документ.ИнвентаризацияУпаковки КАК ИнвентаризацияУпаковки
	                      |ГДЕ
	                      |	НЕ ИнвентаризацияУпаковки.ПометкаУдаления
	                      |	И ИнвентаризацияУпаковки.ХарактеристикаНоменклатуры = &Характеристика
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИнвентаризацияУпаковки.Дата");
	
	Запрос.УстановитьПараметр("Характеристика", ТекущаяХарактеристика); 

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Файл = Новый Файл(КаталогФотографий+Выборка.ИмяФайла);
		
		Если ПустаяСтрока(Выборка.ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;

		Попытка 
			Если  НЕ Файл.Существует() Тогда
				Продолжить;
			КонецЕсли;

		Исключение
						
		КонецПопытки; 

		Если НЕ Файл.Существует() Тогда 
		Иначе
			НоваяСтрока = ТаблицаКартинокИзМагазина.Добавить();
			НоваяСтрока.ИмяФайла = КаталогФотографий+Выборка.ИмяФайла;
			НоваяСтрока.Комментарий = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ". " + Выборка.Магазин;
		КонецЕсли;	
	КонецЦикла;

	////
	ТаблицаСертификатов.Очистить();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СертификатыНаПродукцию.Характеристика,
	                      |	МАКСИМУМ(СертификатыНаПродукцию.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТ_ПоследниеПериоды
	                      |ИЗ
	                      |	РегистрСведений.СертификатыНаПродукцию.СрезПоследних КАК СертификатыНаПродукцию
	                      |ГДЕ
	                      |	СертификатыНаПродукцию.Характеристика = &Характеристика
	                      |	И СертификатыНаПродукцию.Удален = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СертификатыНаПродукцию.Характеристика
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СертификатыНаПродукцию.ХранилищеИменФайловСертификата,
	                      |	СертификатыНаПродукцию.РегистрационныйНомер,
	                      |	СертификатыНаПродукцию.ДействуетДо
	                      |ИЗ
	                      |	РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеПериоды КАК ВТ_ПоследниеПериоды
	                      |		ПО СертификатыНаПродукцию.Характеристика = ВТ_ПоследниеПериоды.Характеристика
	                      |			И СертификатыНаПродукцию.Период = ВТ_ПоследниеПериоды.Период");
	
	Запрос.УстановитьПараметр("Характеристика", ТекущаяХарактеристика); 

	//ИмяФайлаСертификата = "";
	//Сертификат = Неопределено;
	//Элементы.Сертификат.ТекстНевыбраннойКартинки = "";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИменаФайлов = Выборка.ХранилищеИменФайловСертификата.Получить();;

		Если ИменаФайлов<>Неопределено Тогда
			ТаблицаСертификатов.Загрузить(ИменаФайлов.Скопировать(, "ИмяФайла"));
		КонецЕсли; 
		
		Для Каждого Строка Из ТаблицаСертификатов Цикл
			Строка.Комментарий = "Рег. номер: " + Выборка.РегистрационныйНомер + ". Действует до: " + Формат(Выборка.ДействуетДо, "ДФ=dd.MM.yyyy");
		КонецЦикла;  
	КонецЕсли; 
	
	//
	ТаблицаКартинокСообщений.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СообщениеМОСКартинки.Ссылка,
	                      |	СообщениеМОСКартинки.КлючСтроки,
	                      |	СообщениеМОСКартинки.Расширение,
	                      |	СообщениеМОСКартинки.Ссылка.ТекстСообщения КАК Комментарий,
	                      |	СообщениеМОСКартинки.Ссылка.Дата
	                      |ИЗ
	                      |	Документ.СообщениеМОС.Картинки КАК СообщениеМОСКартинки
	                      |ГДЕ
	                      |	СообщениеМОСКартинки.Ссылка.Товар = &Товар
	                      |	И СообщениеМОСКартинки.Ссылка.Производитель = &Производитель
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	СообщениеМОСКартинки.Ссылка.Дата,
	                      |	СообщениеМОСКартинки.НомерСтроки");
	
	Запрос.УстановитьПараметр("Товар", ТекущаяХарактеристика.Владелец);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();	
	
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКартинокСообщений.Добавить();
		НоваяСтрока.ИмяФайла = КаталогКЗаписи + Строка(Выборка.Ссылка.УникальныйИдентификатор()) + "_" + Строка(Выборка.КлючСтроки) + ?(Лев(Выборка.Расширение, 1) = ".", "", ".") + Выборка.Расширение;
		НоваяСтрока.Комментарий = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ". " + Выборка.Комментарий;
	КонецЦикла;   
	
	//
	ЭтикеткиИзБазыHTML = ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинокИзБазы);
	ЭтикеткиИзМагазинаHTML = ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинокИзМагазина);
	СертификатыHTML = ПолучитьHTMLПоТаблицеКартинок(ТаблицаСертификатов);
	СообщенияHTML = ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинокСообщений);

КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинок)

	КартинокВСтроке = 8;

	ПолныйТекстHTML = "
		|<html><body>
		|<table name = ""PictView"">";

	Для НомерСтроки = 1 По ОбщегоНазначения.ЦелМаксимальное(ТаблицаКартинок.Количество()/КартинокВСтроке) Цикл
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|<tr>";
		Для НомерКолонки = 1 По КартинокВСтроке Цикл
			ИндексСтрокиКартики = (НомерСтроки-1) * КартинокВСтроке + НомерКолонки - 1;
			Если ИндексСтрокиКартики = ТаблицаКартинок.Количество() Тогда
				Прервать;
			КонецЕсли; 
			ИмяФайла = ТаблицаКартинок[ИндексСтрокиКартики].ИмяФайла;
			ПолныйТекстHTML = ПолныйТекстHTML+ "
			|<td><table id=""" + ИндексСтрокиКартики + "_T" + """ border=""2"" cellpadding=""0"" bordercolor=#ffffff cellspacing=""0""><tr><td><img name=""picture"" width = 125 height=125 style = ""cursor: pointer"" id = """  + ИндексСтрокиКартики  + """ src = ""file:///" + СтрЗаменить(ИмяФайла, "\", "/") + """></td></tr></table></td>";
		КонецЦикла;	
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|</tr>";
	КонецЦикла;	

	ПолныйТекстHTML = ПолныйТекстHTML + "</body></html>";

	Возврат ПолныйТекстHTML;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКаталогХраненияФайлов()

	КаталогХраненияФайлов = Константы.КаталогХраненияФайлов.Получить();	
		
	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	КонецЕсли;
	
	Возврат 	КаталогХраненияФайлов + "Аудит товаров\"

КонецФункции // ()

&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервере(ИмяФайла)
	
	Попытка
	
		УдалитьФайлы(ИмяФайла);
	
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Попытка
		КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
		
		
	Исключение
		Сообщить("Не удалось получить каталог хранения файлов.");
		Возврат;
		
	КонецПопытки;
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		
		ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
		
		НоваяСтрока = Объект.ПриложенныеФайлы.Добавить();
		
		НоваяСтрока.ИмяФайла = ИмяФайлаНаСервере;
		НоваяСтрока.ИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		//Модифицированность = Истина;
		
	Исключение
		Сообщить("Не удалось добавить файл. "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

&НаСервере
Функция ПоместитьФайлВоВременноеХранилище(ИмяФайла)

	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор());	

КонецФункции // ()

&НаКлиенте
Процедура ПроверитьТекущуюХарактеристику(Обновить = Ложь)
	
	НоваяТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	
	Если Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПроверитьЭтикетку") ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.СоздатьЭтикетку") Тогда
	    НоваяТекущаяХарактеристика = Объект.ХарактеристикаНоменклатуры;	
	ИначеЕсли Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		НоваяТекущаяХарактеристика = Элементы.Товары.ТекущиеДанные.ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если ТекущаяХарактеристика = НоваяТекущаяХарактеристика И НЕ Обновить Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяХарактеристика = НоваяТекущаяХарактеристика;
	
	УстановитьВидимость();
	
	ОбновитьHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаданияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	ПроверитьТекущуюХарактеристику(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТипЗаданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.ТипЗадания Тогда
		Объект.Товары.Очистить();
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.АудитПроизводителя")  Тогда
			Объект.Номенклатура = Неопределено;
		Иначе
			Объект.Производитель = Неопределено;
		КонецЕсли; 
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПоискНовыхПроизводителей")  Тогда
			ЗаполнитьХарактеристикиПоНоменклатуре();
		КонецЕсли; 

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПоискНовыхПроизводителей") Тогда
		ЗаполнитьХарактеристикиПоНоменклатуре();
				
	ИначеЕсли Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПроверитьЭтикетку") ИЛИ 
					    Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.СоздатьЭтикетку") Тогда
		
		УстановитьХарактеристику();
	КонецЕсли; 

	ПроверитьТекущуюХарактеристику();

КонецПроцедуры

&НаСервере
Процедура УстановитьХарактеристику()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И НЕ ХарактеристикиНоменклатуры.Неактивная");
	
	Запрос.УстановитьПараметр("Владелец", Объект.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ХарактеристикаНоменклатуры = Выборка.Ссылка;
	КонецЕсли; 	
		
КонецПроцедуры		
		
&НаСервере
Процедура ЗаполнитьХарактеристикиПоНоменклатуре()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                      |ГДЕ
	                      |	ХарактеристикиНоменклатуры.Владелец = &Владелец
	                      |	И НЕ ХарактеристикиНоменклатуры.Неактивная
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ХарактеристикиНоменклатуры.Наименование");
	
	Запрос.УстановитьПараметр("Владелец", Объект.Номенклатура);

	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)

	ЗаполнитьНоменклатуруПоПроизводителю();

	ПроверитьТекущуюХарактеристику(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоПроизводителю()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗначенияСвойствОбъектов.Объект.Владелец КАК Номенклатура, 	ЗначенияСвойствОбъектов.Объект КАК ХарактеристикаНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                      |ГДЕ
	                      |	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
	                      |	И ЗначенияСвойствОбъектов.Значение = &Значение");
//	                      |	И НЕ ЗначенияСвойствОбъектов.Объект.Неактивная");
	
	Запрос.УстановитьПараметр("Значение", Объект.Производитель);

	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	Объект.Товары.Сортировать("Номенклатура"); 
	
КонецПроцедуры 

&НаКлиенте
Процедура ХарактеристикаНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", Объект.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("ТипЗадания", Объект.ТипЗадания);

	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаДляАудита", СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ПроверитьТекущуюХарактеристику();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",, Элемент);
	
	ФормаВыбора.СправочникСписок.Отбор.Владелец.Установить(Объект.Номенклатура);
	ФормаВыбора.СправочникСписок.Отбор.Неактивная.Установить(Ложь);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", Элементы.Товары.ТекущиеДанные.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("ТипЗадания", Объект.ТипЗадания);

	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаДляАудита", СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПроверитьТекущуюХарактеристику();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Элемент.Имя = "ЭтикеткиИзБазыHTML" Тогда
		ТаблицаКартинок = ТаблицаКартинокИзБазы;
	ИначеЕсли Элемент.Имя = "ЭтикеткиИзМагазинаHTML" Тогда
		ТаблицаКартинок = ТаблицаКартинокИзМагазина;
	ИначеЕсли Элемент.Имя = "СертификатыHTML" Тогда
		ТаблицаКартинок = ТаблицаСертификатов;
	ИначеЕсли Элемент.Имя = "СообщенияHTML" Тогда
		ТаблицаКартинок = ТаблицаКартинокСообщений;
	КонецЕсли; 

	Попытка 
		
		Если ДанныеСобытия.Element.name = "picture" Тогда
			ИндексСтроки = Число(ДанныеСобытия.Element.id);

			Картинка = Новый Картинка(ТаблицаКартинок[ИндексСтроки].ИмяФайла);
			Комментарий = ТаблицаКартинок[ИндексСтроки].Комментарий;
			АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
			ПараметрыФормы = Новый Структура("КартинкаСсылка, Комментарий", АдресКартинки, Комментарий); 
			
			ОткрытьФорму("ОбщаяФорма.Фото", ПараметрыФормы);
		КонецЕсли;

	Исключение
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМакет(Команда)
	
	//ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	//Если ДиалогВыбора.Выбрать() Тогда
	//	Элементы.Этикетки.ТекущиеДанные.ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
	//КонецЕсли;	

	АдресВременногоХранилища = "";
	ВыбранноеИмяФайла = "";

	Если  ПоместитьФайл(АдресВременногоХранилища, , ВыбранноеИмяФайла, ,УникальныйИдентификатор) Тогда
		Комментарий = "";
		ВвестиСтроку(Комментарий, "Введите комментарий");
		Файл = Новый Файл(ВыбранноеИмяФайла);
		ДобавитьМакетНаСервере(АдресВременногоХранилища, Файл.ИмяБезРасширения, Файл.Расширение, Комментарий);
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура 	ДобавитьМакетНаСервере(АдресВременногоХранилища, ИмяБезРасширения, Расширение, Комментарий)

	КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();	
	
	ИмяБезРасширенияНаСервере = КаталогХраненияФайлов + ИмяБезРасширения;

	ИмяФайлаНаСервере = ИмяБезРасширенияНаСервере + Расширение;
	Файл = Новый Файл(ИмяФайлаНаСервере);
	
 	Сч = 1;
	Пока Файл.Существует() Цикл
		ИмяФайлаНаСервере = ИмяБезРасширенияНаСервере + "_" + Сч  + Расширение;
		Файл = Новый Файл(ИмяФайлаНаСервере);
		Сч = Сч+1;
	КонецЦикла;  	

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);	

	Попытка 
		ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 

	НоменклатураОбъект = ТекущаяХарактеристика.Владелец.ПолучитьОбъект();

	НоваяСтрока = НоменклатураОбъект.Этикетки.Добавить();
	
	НоваяСтрока.Характеристика = ТекущаяХарактеристика;
	НоваяСтрока.ИмяФайла = ИмяФайлаНаСервере;
	НоваяСтрока.Комментарий = Комментарий;
	Попытка 
		НоменклатураОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 

	ОбновитьHTML();

КонецПроцедуры 

&НаКлиенте
Процедура ПрочитатьПродажи(Команда)
	
	ПрочитатьПродажиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПродажиСервер()
	
	Если НЕ ЗначениеЗаполнено(ТекущаяХарактеристика) ИЛИ НЕ ЗначениеЗаполнено(Производитель) Тогда
		ОбъемыПродаж.Очистить();
		Возврат;
	КонецЕсли; 
	
	//
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//ДатаНачала = Дата(2000,1,1);
	//ДатаОкончания = ТекущаяДата();
	id_tov = ТекущаяХарактеристика.Владелец.id_tov;
	id_kontr = Производитель.ИД;
	
	//ТекстЗапроса = "declare @date1 as date = " + ВнешниеДанные.ФорматПоля(ДатаНачала, Истина) + ", @date2 as date = " + ВнешниеДанные.ФорматПоля(ДатаОкончания, Истина) + ", @id_tov as int = " + id_tov +", @id_kontr as int = " + id_kontr; 
	
	ТекстЗапроса = "declare @id_tov as int = " + Формат(id_tov, "ЧГ=") +", @id_kontr as int = " + Формат(id_kontr, "ЧГ="); 
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Справочники.ХарактеристикиНоменклатуры.ПолучитьМакет("ТекстЗапросаПродажи").ПолучитьТекст();
		
	rs = ADOСоединение.Execute(ТекстЗапроса);
	
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;

	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			НоваяСтрока = ОбъемыПродаж.Добавить();
			
			НоваяСтрока.ПериодС = Rs.Fields("ned").Value;
			НоваяСтрока.ПериодПо = КонецНедели(НоваяСтрока.ПериодС);
			НоваяСтрока.Количество = Rs.Fields("Qty").Value;

			rs.MoveNext();
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	
КонецПроцедуры 

&НаКлиенте
Процедура ПриложенныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенныеФайлыПередУдалением(Элемент, Отказ)
	
	ИмяФайла = Элементы.ПриложенныеФайлы.ТекущиеДанные.ИмяФайла;
	
	Если ПустаяСтрока(ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите удалить файл с результатами?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдалитьФайлНаСервере(ИмяФайла);
	
	Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПриложенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПриложенныеФайлы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ТекущиеДанные.ИмяФайлаСРасширением);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		АдресФайла = ПоместитьФайлВоВременноеХранилище(ТекущиеДанные.ИмяФайла);
		Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
		
	#Иначе	
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ТекущиеДанные.ИмяФайла, ПоместитьФайлВоВременноеХранилище(ТекущиеДанные.ИмяФайла));
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
			ПолученныеФайлы = Новый Массив;
			
			ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДВ.Заголовок = "Укажите каталог для скачивания...";
			
			Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДВ, Истина) Тогда	
				
				ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
				ДвоичныеДанные = ПолучитьИзвременногохранилища(ПолученныеФайлы[0].Хранение);
				
				ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогФайла.МножественныйВыбор = Ложь;
		ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
		
		Если ДиалогФайла.Выбрать() Тогда
			
			ПолноеИмяФайла   = ДиалогФайла.ПолноеИмяФайла;
			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
			Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
			
			АдресВременногоХранилища = "";
			Если ПоместитьФайл(АдресВременногоХранилища, ПолноеИмяФайла,, Ложь)Тогда
				ТекстОшибки = "";
				ЗаписатьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение);
				Записать();
			Иначе 
				Сообщить("Не удалось добавить файл. ");
			КонецЕсли;
			
		КонецЕсли;
		
	#Иначе	
	//
	//	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
	//		УстановитьРасширениеРаботыСФайлами();
	//	КонецЕсли;
	//	
	//	Если ПодключитьРасширениеРаботыСФайлами() Тогда
	//		
	//		Режим = РежимДиалогаВыбораФайла.Открытие;
	//		ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
	//		
	//		ДиалогФайла.МножественныйВыбор = Ложь;
	//		ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
	//		
	//		Если ДиалогФайла.Выбрать() Тогда
	//			
	//			ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
	//			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
	//			
	//			Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
	//			Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
	//			
	//			//
	//			ПомещаемыеФайлы = Новый Массив;
	//			ПомещаемыеФайлы.Добавить(Описание);
	//			
	//			//
	//			ПомещенныеФайлы = Новый Массив;
	//			
	//			Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
	//				СохранитьФайлПротоколаНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением);
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
	//		
	//	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ФормаКомментария = ПолучитьФорму("Документ.ЗаданиеАудитору.Форма.ФормаКомментария");
	ФормаКомментария.ЭтоНовый = Истина;
	
	Если ФормаКомментария.ОткрытьМодально() = КодВозвратаДиалога.ОК И НЕ ПустаяСтрока(ФормаКомментария.Комментарий) Тогда
		НоваяСтрока = Объект.Комментарии.Вставить(0);
		
		НоваяСтрока.Комментарий = ФормаКомментария.Комментарий;
		НоваяСтрока.Пользователь = ТекущийПользователь;
		НоваяСтрока.Дата = ТекущаяДата();
	КонецЕсли; 
	
	Попытка 
		Записать();
	Исключение
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаКомментария = ПолучитьФорму("Документ.ЗаданиеАудитору.Форма.ФормаКомментария");
	ФормаКомментария.Комментарий = Элементы.Комментарии.ТекущиеДанные.Комментарий;
	
	ФормаКомментария.ОткрытьМодально();

КонецПроцедуры

&НаКлиенте
Процедура ДатаАудитаПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(Объект.ПовторнаяДатаАудитаПлан) И ЗначениеЗаполнено(Объект.ДатаАудита) Тогда
		Объект.ПовторнаяДатаАудитаПлан = Объект.ДатаАудита + 90*24*60*60;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимость();
	
	УстановитьДоступность();
	
	ПроверитьТекущуюХарактеристику(Истина);

	//Если Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.ПроверитьЭтикетку") ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийАудитору.СоздатьЭтикетку") Тогда
	//	ТекущаяХарактеристика = Объект.ХарактеристикаНоменклатуры;
	//	ОбновитьHTML();
	//КонецЕсли; 

	//+++АК sils 08.06.2018 ИП-00018466
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018466
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Задание аудитору");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если РольДоступна("Технолог") И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("АудиторТоваровПостановкаЗадач")
		И НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ДоступКоВсемАудитам, Ложь) и ЛОЖЬ Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РолиПользователей.Ссылка
		|ПОМЕСТИТЬ ВТ_Роли
		|ИЗ
		|	Справочник.РолиПользователей КАК РолиПользователей
		|ГДЕ
		|	РолиПользователей.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				РолиПользователейСоставРоли.Ссылка
		|			ИЗ
		|				Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|			ГДЕ
		|				РолиПользователейСоставРоли.Сотрудник = &Сотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.Объект
		|ПОМЕСТИТЬ ВТ_Объекты
		|ИЗ
		|	ВТ_Роли КАК ВТ_Роли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних КАК СоответствиеОбъектРольСрезПоследних
		|		ПО ВТ_Роли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ГДЕ
		|	СоответствиеОбъектРольСрезПоследних.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объекты.Объект
		|ИЗ
		|	ВТ_Объекты КАК ВТ_Объекты
		|ГДЕ
		|	ВТ_Объекты.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение В
		|			(ВЫБРАТЬ
		|				ВТ_Объекты.Объект
		|			ИЗ
		|				ВТ_Объекты КАК ВТ_Объекты
		|			ГДЕ
		|				ВТ_Объекты.Объект ССЫЛКА Справочник.Контрагенты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объекты.Объект
		|ИЗ
		|	ВТ_Объекты КАК ВТ_Объекты
		|ГДЕ
		|	ВТ_Объекты.Объект ССЫЛКА Справочник.Контрагенты");
		
		Запрос.УстановитьПараметр("Сотрудник", ТекущийПользователь.ФизЛицо);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		РазрешеннныеХарактеристики = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
		РазрешеннныеПроизводители = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
		
		Если (Объект.ТипЗадания = Перечисления.ТипыЗаданийАудитору.АудитПроизводителя И РазрешеннныеПроизводители.Найти(Объект.Производитель)=Неопределено) ИЛИ 
				  (Объект.ТипЗадания <> Перечисления.ТипыЗаданийАудитору.АудитПроизводителя И РазрешеннныеХарактеристики.Найти(Объект.ХарактеристикаНоменклатуры)=Неопределено) Тогда
			Сообщить("Недостаточно прав доступа!");				 
			Отказ = Истина;				  
		КонецЕсли; 
		
	КонецЕсли; 
	ТекСтатус=Объект.Статус;
	ТекАудитор=Объект.Аудитор;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.Товары.Количество()>0 и Объект.ТипЗадания=Перечисления.ТипыЗаданийАудитору.АудитПроизводителя Тогда
		Если Объект.Статус=Перечисления.СтатусыЗаданийАудиторам.Создано и ТекАудитор<>Объект.Аудитор  Тогда
		    ОтправитьПисьмоОСозданииСервер();
		КонецЕсли;
		Если ТекСтатус<>Объект.Статус и Объект.Статус=Перечисления.СтатусыЗаданийАудиторам.ПервичныйАудитПроведен Тогда
		    ОтправитьПисьмоОПервичАудитеСервер();
		ИначеЕсли Объект.Статус=Перечисления.СтатусыЗаданийАудиторам.ПовторныйАудитПроведен Тогда
		    ОтправитьПисьмоОПовторАудитеСервер();
		КонецЕсли; 
		
	КонецЕсли;
    ТекСтатус=Объект.Статус;
	ТекАудитор=Объект.Аудитор;
КонецПроцедуры


&НаСервере
Процедура ОтправитьПисьмоОСозданииСервер()
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Заявка на проведение аудита_"+Объект.Производитель+" ("+Объект.Ссылка+")");
	Для каждого Стр Из Объект.ПриложенныеФайлы Цикл
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Стр.ИмяФайла));
	КонецЦикла; 
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Характеристика) КАК СоответствиеОбъектРольСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	2
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(вт.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втМин
		|ИЗ
		|	вт КАК вт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.РольПользователя,
		|	вт.Приоритет
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
		|		ПО вт.Приоритет = втМин.Приоритет";

	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("Характеристика", Объект.Товары[0].ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Контрагент", Объект.Производитель);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    МассивАдресов=Новый Массив;
    МассивАдресовРоли=Новый Массив;
	Если ЗначениеЗаполнено(Объект.Аудитор) Тогда
		МассивАдресов.Добавить(Объект.Аудитор.ФизЛицо);
	КонецЕсли;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для каждого Стр Из ВыборкаДетальныеЗаписи.РольПользователя.СоставРоли Цикл
			МассивАдресов.Добавить(Стр.Сотрудник);
			МассивАдресовРоли.Добавить(Стр.Сотрудник);
		КонецЦикла; 
	КонецЦикла; 
                                                                                  
	
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И (КонтактнаяИнформация.Тип = &Тип
		|			ИЛИ КонтактнаяИнформация.Тип = &ТипДоп)";
	
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЕсли; 
	КонецЦикла;
	ВыборкаДетальныеЗаписи.Сбросить();
	СтрТехнолог="";
	Для каждого Эл Из МассивАдресовРоли Цикл
		СтрЭлемент=Строка(Эл)+", e-mail: ";
	    Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Цикл
		     СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
		КонецЦикла; 
		ВыборкаДетальныеЗаписи.Сбросить();
		СтрЭлемент=СтрЭлемент+" телефон: ";
	    Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.Телефон)) Цикл
		     СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
		КонецЦикла;
		СтрЭлемент=Лев(СтрЭлемент,СтрДлина(СтрЭлемент)-1); 
		СтрТехнолог= СтрТехнолог+" "+СтрЭлемент+"
		|";
		ВыборкаДетальныеЗаписи.Сбросить();
	КонецЦикла; 
	
	Кому.Добавить("product_1@vkusvill.ru");
	Кому.Добавить("reklama@izbenka.msk.ru");
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	СтруктураНовогоПисьма.Вставить("Тело","Просьба в ближайшее время провести производственный аудит нашего поставщика "+Объект.Производитель+".
	|Ответственный технолог - "+СтрТехнолог+"
	|Контакты производителя, а также ассортимент, протоколы испытаний и жалобы покупателей созданы в 1С.");
	СтрКому="";
	Для каждого Эл Из Кому Цикл
	    СтрКому=СтрКому+Эл.Значение+"; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией о созданном задании на аудит на "+СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоОПервичАудитеСервер()
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Первичный аудит проведен_"+Объект.Производитель+"_"+Объект.Маркер+" ("+Объект.Ссылка+")");
	Для каждого Стр Из Объект.ПриложенныеФайлы Цикл
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Стр.ИмяФайла));
	КонецЦикла; 

	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Характеристика) КАК СоответствиеОбъектРольСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	2
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли1
		|				И Объект В (&Номенклатура)) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(вт.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втМин
		|ИЗ
		|	вт КАК вт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.РольПользователя
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
		|		ПО вт.Приоритет = втМин.Приоритет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт1.РольПользователя
		|ИЗ
		|	вт1 КАК вт1";


	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	Запрос.УстановитьПараметр("Характеристика", Объект.Товары[0].ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Контрагент", Объект.Производитель);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    МассивАдресов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для каждого Стр Из ВыборкаДетальныеЗаписи.РольПользователя.СоставРоли Цикл
			Если МассивАдресов.Найти(Стр.Сотрудник)=Неопределено Тогда
				МассивАдресов.Добавить(Стр.Сотрудник);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И (КонтактнаяИнформация.Тип = &Тип
		|			ИЛИ КонтактнаяИнформация.Тип = &ТипДоп)";
	
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЕсли; 
	КонецЦикла;
	Кому.Добавить("product_1@vkusvill.ru");
	Кому.Добавить("reklama@izbenka.msk.ru");
	//ВыборкаДетальныеЗаписи.Сбросить();
	//СтрТехнолог="";
	//Для каждого Эл Из МассивАдресовРоли Цикл
	//	СтрЭлемент=Строка(Эл)+", e-mail: ";
	//	Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Цикл
	//		 СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
	//	КонецЦикла; 
	//	ВыборкаДетальныеЗаписи.Сбросить();
	//	СтрЭлемент=СтрЭлемент+" телефон: ";
	//	Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.Телефон)) Цикл
	//		 СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
	//	КонецЦикла;
	//	СтрЭлемент=Лев(СтрЭлемент,СтрДлина(СтрЭлемент)-1); 
	//	СтрТехнолог= СтрТехнолог+" "+СтрЭлемент+"
	//	|";
	//	ВыборкаДетальныеЗаписи.Сбросить();
	//КонецЦикла; 
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело","Просьба в ближайшее время провести производственный аудит нашего поставщика "+Объект.Производитель+".
	//|Ответственный технолог - "+СтрТехнолог+"
	//|Контакты производителя, а также ассортимент, протоколы испытаний и жалобы покупателей созданы в 1С.");
	СтруктураНовогоПисьма.Вставить("Тело","Первичный аудит проведен_"+Объект.Производитель+"_"+Объект.Маркер+" ("+Объект.Ссылка+")");
	
	СтрКому="";
	Для каждого Эл Из Кому Цикл
	    СтрКому=СтрКому+Эл.Значение+"; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией о проведенном первичном аудите на "+СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоОПовторАудитеСервер()
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Повторный аудит проведен_"+Объект.Производитель+"_"+Объект.Маркер+" ("+Объект.Ссылка+")");
	Для каждого Стр Из Объект.ПриложенныеФайлы Цикл
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Стр.ИмяФайла));
	КонецЦикла; 

	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Характеристика) КАК СоответствиеОбъектРольСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	2
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли
		|				И Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&Дата,
		|			ТипРоли = &ТипРоли1
		|				И Объект В (&Номенклатура)) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(вт.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втМин
		|ИЗ
		|	вт КАК вт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.РольПользователя
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
		|		ПО вт.Приоритет = втМин.Приоритет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт1.РольПользователя
		|ИЗ
		|	вт1 КАК вт1";


	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТипРоли", ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	Запрос.УстановитьПараметр("Характеристика", Объект.Товары[0].ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Контрагент", Объект.Производитель);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    МассивАдресов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для каждого Стр Из ВыборкаДетальныеЗаписи.РольПользователя.СоставРоли Цикл
			Если МассивАдресов.Найти(Стр.Сотрудник)=Неопределено Тогда
				МассивАдресов.Добавить(Стр.Сотрудник);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
                                                                                  
	
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И (КонтактнаяИнформация.Тип = &Тип
		|			ИЛИ КонтактнаяИнформация.Тип = &ТипДоп)";
	
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЕсли; 
	КонецЦикла;
	Кому.Добавить("product_1@vkusvill.ru");
	Кому.Добавить("reklama@izbenka.msk.ru");
	//ВыборкаДетальныеЗаписи.Сбросить();
	//СтрТехнолог="";
	//Для каждого Эл Из МассивАдресовРоли Цикл
	//	СтрЭлемент=Строка(Эл)+", e-mail: ";
	//	Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Цикл
	//		 СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
	//	КонецЦикла; 
	//	ВыборкаДетальныеЗаписи.Сбросить();
	//	СтрЭлемент=СтрЭлемент+" телефон: ";
	//	Пока ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Объект,Тип",Эл,Перечисления.ТипыКонтактнойИнформации.Телефон)) Цикл
	//		 СтрЭлемент=СтрЭлемент+" "+ВыборкаДетальныеЗаписи.Представление+",";
	//	КонецЦикла;
	//	СтрЭлемент=Лев(СтрЭлемент,СтрДлина(СтрЭлемент)-1); 
	//	СтрТехнолог= СтрТехнолог+" "+СтрЭлемент+"
	//	|";
	//	ВыборкаДетальныеЗаписи.Сбросить();
	//КонецЦикла; 
	
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	//СтруктураНовогоПисьма.Вставить("Тело","Просьба в ближайшее время провести производственный аудит нашего поставщика "+Объект.Производитель+".
	//|Ответственный технолог - "+СтрТехнолог+"
	//|Контакты производителя, а также ассортимент, протоколы испытаний и жалобы покупателей созданы в 1С.");
	СтруктураНовогоПисьма.Вставить("Тело","Повторный аудит проведен_"+Объект.Производитель+"_"+Объект.Маркер+" ("+Объект.Ссылка+")");
	
	СтрКому="";
	Для каждого Эл Из Кому Цикл
	    СтрКому=СтрКому+Эл.Значение+"; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией о проведенном повторном аудите на "+СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма)  Экспорт
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	СпАдресов=Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение,";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = 	ТабДок;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	
	
	Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
		Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
	КонецЦикла;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
КонецПроцедуры






