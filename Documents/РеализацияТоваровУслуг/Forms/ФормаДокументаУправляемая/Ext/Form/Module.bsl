
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		Реализация = НайтиРеализациюНаСервере();
		Если Реализация <> Неопределено Тогда
			
			П = Новый Структура("Ключ", Реализация);
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаУправляемая", П);
			Отказ = Истина;
			
		КонецЕсли;                                
	КонецЕсли;
	
	//+++АК KIRN 2018.04.26 Сравнение аналогов 
	УправлениеФормой();
	//---АК KIRN 
	
КонецПроцедуры

&НаСервере
Функция НайтиРеализациюНаСервере()
	
	Возврат Документы.РеализацияТоваровУслуг.НайтиРеализациюПоРасходнику(Основание);
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Основание = Параметры.Основание;
	
	//++ АК luza 20.09.2018 ИП-00019881
	Если Параметры.Ключ.Пустая() = Ложь Тогда
		ЗаполнитьПрикрепленныеФайлы();
	КонецЕсли;	
	//-- АК luza 20.09.2018 ИП-00019813	

	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.РасходныеОрдера.Количество() > 0 Тогда
		
		Если ПолучтьОрдераСНедопустимымВидомОперации() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ! Имеются расходные ордера с видом операции отличным от <<Реализация>>", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучтьОрдераСНедопустимымВидомОперации()
	
	//+++АК KIRN 2018.04.12 ИП-00018209 
	ЕСли ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Объект.Организация) ТОгда
		Возврат Ложь;
	Конецесли;
	//---АК KIRN 
	
	Для Каждого Строка Из Объект.РасходныеОрдера Цикл
		
		Если Строка.РасходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.Реализация Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//+++АК KIRN 2018.04.24 ИП-00018209^02 
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы",Истина);
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.26 
&НаСервере
Процедура СохранитьФайлНаСервере(ПомещенныйФайл, ИмяФайлаСРасширением, Расширение)
	
	КаталогХраненияФайлов = СокрЛП(Константы.КаталогХраненияФайлов.Получить());
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(Прав(КаталогХраненияФайлов, 1) = "\", "", "\");
	
	ФайлКаталогХраненияФайлов = Новый Файл(КаталогХраненияФайлов);
	Если НЕ ФайлКаталогХраненияФайлов.Существует() Тогда
		СоздатьКаталог(КаталогХраненияФайлов);
	КонецЕсли;

	// Всегда помещен только 1 файл
	ЭлементМассива = ПомещенныйФайл;	
	
	// Получаем двоичные данные
	ФайлИзХранилища = ПолучитьИзВременногоХранилища(ЭлементМассива);
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		ФайлИзХранилища.Записать(ИмяФайлаНаСервере);
		Объект.ИмяФайла = ИмяФайлаНаСервере;
		Объект.ИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		Модифицированность = Истина;
	Исключение
		Сообщить("Не удалось записать файл на сервере.");
	КонецПопытки;	
	
КонецПроцедуры
//---АК KIRN  

//+++АК KIRN 2018.04.26 ИП-00018470 
&НаСервере
Процедура УправлениеФормой()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		Элементы.ГруппаФайл.ТекущаяСтраница = Элементы.ГруппаФайлДобавление;
	Иначе
		Элементы.ГруппаФайл.ТекущаяСтраница = Элементы.ГруппаФайлОткрытие;
	КонецЕсли;
	
	//+++АК LAGP 2018.05.10 ИП-00018465 Учет расчетов с ТТПерекресток.
	ТаблицаПроверки = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуНезаполненныхДоговоров(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаПроверки) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.26  ИП-00018470
&НаСервере
Процедура УдалитьФайлНаСервере()
	
	Попытка
	
		УдалитьФайлы(Объект.ИмяФайла);
		
		Объект.ИмяФайла = "";
		Объект.ИмяФайлаСРасширением = "";
		Модифицированность = Истина;
	
	Исключение
		
	КонецПопытки;	
	
	УправлениеФормой();
	
КонецПроцедуры
//---АК KIRN 


//+++АК KIRN 2018.04.26 ИП-00018470 
&НаКлиенте
Процедура ВыбратьФайлВебКлиент(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогФайла.МножественныйВыбор = Ложь;
		ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
		
		Если ДиалогФайла.Выбрать() Тогда
			
			ПолноеИмяФайла   = ДиалогФайла.ПолноеИмяФайла;
			ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
			Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
			
			АдресВременногоХранилища = "";
			Если ПоместитьФайл(АдресВременногоХранилища, ПолноеИмяФайла,, Ложь)Тогда
				СохранитьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение);
			Иначе 
				Сообщить("Не удалось добавить файл.");
			КонецЕсли;
			
		КонецЕсли;
		
	#Иначе	
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
			
			ДиалогФайла.МножественныйВыбор = Ложь;
			ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
			
			Если ДиалогФайла.Выбрать() Тогда
				
				ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
				ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
				
				Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
				Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
				
				//
				ПомещаемыеФайлы = Новый Массив;
				ПомещаемыеФайлы.Добавить(Описание);
				
				//
				ПомещенныеФайлы = Новый Массив;
				
				Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					СохранитьФайлНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
	
	#КонецЕсли
	
	УправлениеФормой();
	
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.26 ИП-00018470
&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите удалить файл?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	УдалитьФайлНаСервере();
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.26 ИП-00018470  
&НаКлиенте
Процедура ИмяФайлаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Объект.ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(Объект.ИмяФайлаСРасширением);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		//АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
		АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
		Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	
	#Иначе
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайла, ПоместитьФайлВоВременноеХранилище());
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
			ПолученныеФайлы = Новый Массив;
			
			ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДВ.Заголовок = "Укажите каталог для скачивания...";
			
			Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДВ, Истина) Тогда	
				
				ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
				ДвоичныеДанные = ПолучитьИзвременногохранилища(ПолученныеФайлы[0].Хранение);
				
				ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
		
	#КонецЕсли	
	
КонецПроцедуры
//---АК KIRN 

//+++АК LAGP 2018.05.10 ИП-00018465 Учет расчетов с ТТПерекресток.
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//+++АК LAGP 2018.10.21 ИП-00018465 Исправил работу на тонком клиенте
	//НачалоВыбораЗначенияДоговораКонтрагента(
	//	Объект, Элемент, Объект.Контрагент, Объект.ДоговорКонтрагента, ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"), СтандартнаяОбработка); 
	
	СтандартнаяОбработка = Ложь;
	
	НастройкаОтбораПоВладельцу = Новый Структура;
	НастройкаОтбораПоВладельцу.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Владелец"));
	НастройкаОтбораПоВладельцу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	НастройкаОтбораПоВладельцу.Вставить("ПравоеЗначение", Объект.Контрагент);
	НастройкаОтбораПоВладельцу.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	НастройкаОтбораВидуДоговора = Новый Структура;
	НастройкаОтбораВидуДоговора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("ВидДоговора"));
	НастройкаОтбораВидуДоговора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	НастройкаОтбораВидуДоговора.Вставить("ПравоеЗначение", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	НастройкаОтбораВидуДоговора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", НастройкаОтбораПоВладельцу);
	ПараметрыОтбора.Вставить("ВидДоговора", НастройкаОтбораВидуДоговора); 
	ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбораУправляемая", ПараметрыОткрытия, Элемент, ЭтаФорма);
	//---АК LAGP
	
КонецПроцедуры

//+++АК LAGP 2018.10.21 ИП-00018465 Исправил работу на тонком клиенте
&НаСервере
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт
												  
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	
	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.НачальноеЗначениеВыбора = ДоговорКонтрагента;

	ФормаВыбора.Открыть();
	
КонецПроцедуры												  
	
//+++ АК luza 20.09.2018 ИП-00019881
&НаСервере
Процедура ЗаполнитьПрикрепленныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	МАКСИМУМ(ЭДО_СопоставлениеДокументов.ДокументЭДО.ФайлPDF) КАК ДокументЭДОФайлPDF
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_СопоставлениеДокументов.ВидДокумента";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			ФайлАкт = Стр.ДокументЭДОФайлPDF;
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда
			ФайлНакладная = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			ФайлСФ = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
			ФайлУПД = Стр.ДокументЭДОФайлPDF;	
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры	
