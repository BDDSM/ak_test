Перем мКолонкиТовары;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПосчитатьСуммуТабличнойЧасти();
КонецПроцедуры

Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
КонецПроцедуры

Процедура УслугиЦенаПриИзменении(Элемент)
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Номенклатура = Элемент.Значение;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275		 
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(Номенклатура, Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);
		
		//это переписал более оптимально:
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипТовара") = Перечисления.ТипыТоваров.Упаковка Тогда
			КонтрагентСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Контрагент");
			Если ЗначениеЗаполнено(Склад) и ЗначениеЗаполнено(КонтрагентСклада) и КонтрагентСклада = Контрагент Тогда
				Наценка = Константы.НаценкаНаРеализациюУпаковки.Получить();
				СтрокаТабличнойЧасти.Цена = ПолучитьЦеныПоставщиков(Номенклатура,Дата) * (100+Наценка)/100;
			КонецЕсли; 			
		КонецЕсли;                       
		
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		#Область ЗакоментКод_ТоварыНоменклатураПриИзменении
		//Если Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//	ИЛИ Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	СчетУчета = ПланыСчетов.Финансовый.Товары;
		//ИначеЕсли Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//КонецЕсли;
		//
		
		//Если Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		////	СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//	//+++АК BARA 06.11.17 ИП-00016124.000.00000011
		//	Если ЗначениеЗаполнено(Склад) и ЗначениеЗаполнено(Склад.Контрагент) и Склад.Контрагент = Контрагент Тогда
		//		Наценка = Константы.НаценкаНаРеализациюУпаковки.Получить();
		//		СтрокаТабличнойЧасти.Цена = ПолучитьЦеныПоставщиков(Номенклатура,Дата) * (100+Наценка)/100;
		//	КонецЕсли; 
		//	//+++АК BARA 06.11.17 ИП-00016124.000.00000011
		//КонецЕсли;
		
		//
		//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Номенклатура, Дата);
		//Если ТабСчетаУчета.Количество() > 0
		//	И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
		//	СчетУчета = ТабСчетаУчета[0].СчетУчета
		//КонецЕсли;	
		//
		//СтрокаТабличнойЧасти.СчетУчета 				= ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
		#КонецОбласти
		
		//---АК Susk (Суслин К.В.) 
		
		СтрокаТабличнойЧасти.СтатьяТовародвижения 	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент 			= Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС				= Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС				= Номенклатура.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//+++АК BARA 06.11.17 ИП-00016124.000.00000011
Функция ПолучитьЦеныПоставщиков(ТаблицаТоваров,  Период)	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Период, Номенклатура В (&Номенклатура)) КАК ЦеныПоставщиковСрезПоследних");
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Период", Период);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Цена =  ВыборкаДетальныеЗаписи.Цена; 
	Иначе
		Цена =  0; 
	КонецЕсли;
	
	Возврат Цена;	
КонецФункции
//--- АК BARA 06.11.17 ИП-00016124.000.00000011


Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		Если ЗначениеЗаполнено(ИД) Тогда
			ЭтаФорма.ТолькоПросмотр=Истина;
		Иначе
			НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		КонецЕсли;
		
		ЗаполнитьПрикрепленныеФайлы();
	Иначе
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ВариантРасчетаНДС)Тогда
				ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
			
		Иначе
			ИД = 0;
		КонецЕсли
		
	КонецЕсли;
	
	ЕстьПравоРедактировать = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзменениеЦеныИСуммыВДокументе, Ложь);
	//ЭлементыФормы.Товары.Колонки.Цена.ТолькоПросмотр		= Не ЕстьПравоРедактировать;
	ЭлементыФормы.Товары.Колонки.Сумма.ТолькоПросмотр		= Не ЕстьПравоРедактировать;
	ЭлементыФормы.Товары.Колонки.СтавкаНДС.ТолькоПросмотр	= Не ЕстьПравоРедактировать;
	
	ДобавитьТоварыИзОрдеров(, Истина);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	//+++АК SaMi 2018.03.30 ИП-00018178 
	EDI_УстановитьДоступность();
	//---АК SaMi  2018.03.30 
	
	//+++АК KIRN 2018.04.26 ИП-00018470
	УправлениеФормой();
	//---АК KIRN    
	
	//+++АК sole 2018.07.30 ИП-00018320.05
	УстановитьВидимостьТранспортныеДокументы();
	//---АК sole 2018.07.30 ИП-00018320.05
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Табличная часть документа будет очищена. Продолжить?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
	    Товары.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидНоменклатуры.Доступность = Ложь;
	
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.ВСписке;
	СписокВидовНоменклатуры = Новый СписокЗначений;
	СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Товар);
	СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Материал);
	СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Оборудование);
	
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = СписокВидовНоменклатуры;
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение = СписокВидовНоменклатуры;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
	Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
		СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
		ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура УслугиСчетЗатратПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);
		
	//+++АК Susk (Суслин К.В.) 2018.07.27 ИП-00018930
	ИзменениеСчетаИлиСубконтоДляБУ(Ложь);
	//---АК Susk (Суслин К.В.)  	
		
КонецПроцедуры

Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПосчитатьСуммуТабличнойЧасти();
КонецПроцедуры

Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Контрагент.СтавкаНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПерейтиВЖурналПроводок(Кнопка)
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	Если Элемент.Значение.ВАрхиве Тогда
		Предупреждение("Вы выбрали архивного контрагента. Его контактные данные также находятся в архиве", 120);
	КонецЕсли;
	
	//+++АК SUVV 2018.02.20 ИП-00017941
	//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Элемент.Значение.СтатьяДвиженияДенежныхСредств, Контрагент, "Реализация");
	МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Дата, Элемент.Значение.СтатьяДвиженияДенежныхСредств, Контрагент, "Реализация");
	//---АК SUVV
	
	Если МассивСчетов.Количество() = 1 Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
	Иначе
		СчетУчетаРасчетовСКонтрагентом	= Планысчетов.Финансовый.РасчетыСПоставщиками;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьОрганизациюПоДоговоруКонтрагента();
	Иначе
		ОбработатьВыборКонтрагента(Контрагент);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ВариантРасчетаНДС = ?(Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);						
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество,2);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (в т. ч.):";	
	Иначе
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
	ЭлементыФормы.СуммаНДС.Значение = Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");
	
	СтраницаПанели  = ЭлементыФормы.Панель1.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.РасходныеОрдера.Заголовок = "Расходные ордера (" + ДокументОбъект.РасходныеОрдера.Количество() + " поз.)";
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

//+++АК
Процедура КоманднаяПанель3Заполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не заполнено поле Контрагент!");
		Возврат;
	КонецЕсли;
	
	Если РасходныеОрдера.Количество() > 0 ИЛИ Товары.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Табличные части ""Расходные ордера"" и ""Товары"" будут очищены!" + Символы.ПС + "Продолжить?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		Иначе
			РасходныеОрдера.Очистить();
			Товары.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
	ФормаПодбора = Документы.РеализацияТоваровУслуг.ПолучитьФорму("ФормаПодбораРасходныхОрдеров");;
	ФормаПодбора.Контрагент		= Контрагент;
	ФормаПодбора.РеализацияТУ	= Ссылка;
	Если ФормаПодбора.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		
		МассивОрдеров = ФормаПодбора.Список.ВыгрузитьЗначения();
		
		Для Каждого СтрокаМассива Из МассивОрдеров Цикл
			НовСтр = РасходныеОрдера.Добавить();
			НовСтр.РасходныйОрдер = СтрокаМассива.РасходныйОрдер;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РасходныеОрдера.Количество() > 0 Тогда
		//+++АК KIRN 2018.05.25  ИП-00018663.000.00000002
		стОбновленныеДанные = ОбщиеПроцедуры.ПолучитьТЗТоварыДляРО(РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
		Товары.Загрузить(стОбновленныеДанные.тзТовары);
		EDI_Товары.Загрузить(стОбновленныеДанные.тзТовары);
		//---АК KIRN 		
		
		//+++АК ILIK 2018.06.04 ИП-00018886
		// организация Тилси
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "ИНН") = "7734410589" Тогда
			Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
		КонецЕсли;
		//---АК ILIK
		//+++АК sils 19.10.2018 ИП-00020171
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "ИНН") = "7734675810" Тогда
			Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения, СтруктурнаяЕдиница", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
		КонецЕсли;
		//---АК
		
		//МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
		//
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	РасходныйОрдерСкладТовары.Номенклатура,
		////+++АК KIRN 2018.05.21 ИП-00018709      
		//|	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
		////---АК KIRN 
		//|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
		//|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
		//|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК ПоРасходнымОрдерам,
		//|	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
		//|ИЗ
		//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		//|ГДЕ
		//|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
		//|	РасходныйОрдерСкладТовары.Номенклатура,
		////+++АК KIRN 2018.05.21 ИП-00018709       
		//|	РасходныйОрдерСкладТовары.ДатаПроизводства,
		////---АК KIRN 
		//|	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"
		//);
		//Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		//Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		//
		//ТаблицаЦенПоставщиков = Документы.ВозвратТоваровПоставщику.ПолучитьЦеныПоставщиков(Товары.Выгрузить(,"Номенклатура"), 
		//																				   Контрагент, 
		//																				   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		//
		//Для Каждого СтрокаТЧ Из Товары Цикл
		//	
		//	Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		//		
		//		Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//			ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//			
		//			СчетУчета = ПланыСчетов.Финансовый.Товары;
		//			
		//		ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//			
		//			СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//			
		//		КонецЕсли;
		//		
		//		СтрокаТЧ.СчетУчета 				= ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
		//		СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		//		
		//		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		//			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//		Иначе
		//			СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		//		КонецЕсли;	
		//		
		//		МассивСтрок = ТаблицаЦенПоставщиков.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
		//		Если МассивСтрок.Количество()>0 Тогда
		//			
		//			СтрокаТЧ.Цена = МассивСтрок[0].Цена;
		//			
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		//	ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
		//	
		//КонецЦикла;
		
	КонецЕсли;

	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

//+++АК KIRN 2018.07.25 ИП-00018929 
//Процедура КоманднаяПанель1ОбновитьЦены(Кнопка)
//	
//	Для Каждого СтрокаТЧ Из Товары Цикл
//		
//		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
//		
//	КонецЦикла;
//	
//	ПосчитатьСуммуТабличнойЧасти();
//	
//КонецПроцедуры
//---АК KIRN 

Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура"
	);
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
	
	Если Не Запрос.Выполнить().Пустой()Тогда
		Предупреждение("Товар присутствует в ордерах. Удаление строки запрещено!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДобавитьТоварыИзОрдеров(Отказ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И РасходныеОрдера.Количество()>0 Тогда
		
		ЕстьОшибки = Ложь;
		
		Для Каждого Строка Из РасходныеОрдера Цикл
			//+++АК KIRN 2018.04.11 ИП-00018209
			//+++АК SHEP 2018.10.04 ИП-00020060
			//Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Организация) ТОгда
			Если ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.РасходныйОрдер, "Получатель")) Тогда
			//---АК SHEP 2018.10.04
			//Если Строка.РасходныйОрдер.Получатель.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Перекресток ТОгда
			Иначе
			//---АК KIRN 
				Если Строка.РасходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.Реализация Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕСли;
			
		КонецЦикла;
	
		Если ЕстьОшибки Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ! Имеются расходные ордера с видом операции отличным от <<Реализация>>", Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ЗаписьИзФормы",Истина);
	//---АК KIRN 
	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		//+++АК KIRN 2018.05.21  ИП-00018709      
		ВОрдерах = ПолучитьКоличествоВОрдерах(ОформлениеСтроки.ДанныеСтроки.Номенклатура,ОформлениеСтроки.ДанныеСтроки.ДатаПроизводства);	
		//ВОрдерах = ПолучитьКоличествоВОрдерах(ОформлениеСтроки.ДанныеСтроки.Номенклатура);	
		//---АК KIRN 
		ПредыущееКоличествоВНакладной = ОформлениеСтроки.ДанныеСтроки.ПоРасходнымОрдерам;
		
		Если ВОрдерах <> ПредыущееКоличествоВНакладной Тогда
			ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ПредыущееКоличествоВНакладной, "ЧДЦ=3")) + " → " + Строка(Формат(ВОрдерах, "ЧДЦ=3"));
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		Иначе
			ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ВОрдерах, "ЧДЦ=3"));
			ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК KIRN 2018.05.21  ИП-00018709      
//Функция ПолучитьКоличествоВОрдерах(Номенклатура)
//+++АК KIRN 2018.05.21  ИП-00018709      
//Функция ПолучитьКоличествоВОрдерах(Номенклатура)
Функция ПолучитьКоличествоВОрдерах_KIRN(Номенклатура, ДатаПроизводства = Неопределено)
	//---АК KIRN 
	
	МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	//+++АК KIRN 2018.05.21 ИП-00018709       
	|	И (&НеОтбиратьПоДатеПроизводства ИЛИ РасходныйОрдерСкладТовары.ДатаПроизводства = &ДатаПроизводства)");
	
	Запрос.УстановитьПараметр("НеОтбиратьПоДатеПроизводства", НЕ ЗначениеЗаполнено(ДатаПроизводства));
	//Запрос.УстановитьПараметр("НеОтбиратьПоДатеПроизводства", Ложь);
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	//---АК KIRN 
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если Запрос.Выполнить().Пустой()Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().Итог("Количество");
	
КонецФункции

//+++АК SHEP 2018.10.05 ИП-00020071
// Предыдущая версия в ПолучитьКоличествоВОрдерах_KIRN()
Функция ПолучитьКоличествоВОрдерах(Номенклатура, ДатаПроизводства = Неопределено)
	
	МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
		|			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомплект,
		|	РасходныйОрдерСкладТовары.Количество КАК Количество
		|ПОМЕСТИТЬ втО_ТоварыСКомплектами
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		|	И (РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
		|			ИЛИ ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
		|				И РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект)
		|	И (&НеОтбиратьПоДатеПроизводства
		|			ИЛИ РасходныйОрдерСкладТовары.ДатаПроизводства = &ДатаПроизводства)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втО_ТоварыСКомплектами.Номенклатура КАК Номенклатура,
		|	втО_ТоварыСКомплектами.Количество КАК Количество
		|ПОМЕСТИТЬ втО_ТоварыБезКомплектов
		|ИЗ
		|	втО_ТоварыСКомплектами КАК втО_ТоварыСКомплектами
		|ГДЕ
		|	НЕ втО_ТоварыСКомплектами.ЭтоКомплект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.ТоварКомплекта,
		|	втО_ТоварыСКомплектами.Количество * СоставКомплектаСрезПоследних.Количество
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(
		|			&ДатаРО,
		|			(Комплект, Характеристика) В
		|				(ВЫБРАТЬ
		|					втО_ТоварыСКомплектами.Номенклатура,
		|					втО_ТоварыСКомплектами.Характеристика
		|				ИЗ
		|					втО_ТоварыСКомплектами КАК втО_ТоварыСКомплектами)) КАК СоставКомплектаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втО_ТоварыСКомплектами КАК втО_ТоварыСКомплектами
		|		ПО (втО_ТоварыСКомплектами.Номенклатура = СоставКомплектаСрезПоследних.Комплект)
		|			И (втО_ТоварыСКомплектами.Характеристика = СоставКомплектаСрезПоследних.Характеристика)
		|ГДЕ
		|	втО_ТоварыСКомплектами.ЭтоКомплект
		|	И СоставКомплектаСрезПоследних.ТоварКомплекта = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
		|ИЗ
		|	втО_ТоварыБезКомплектов КАК РасходныйОрдерСкладТовары");
	Запрос.УстановитьПараметр("НеОтбиратьПоДатеПроизводства", НЕ ЗначениеЗаполнено(ДатаПроизводства));
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ДатаРО", НачалоДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат 0; КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().Итог("Количество");
	
КонецФункции

Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;	
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура КоманднаяПанель1Проверено(Кнопка)
	
	Для Каждого Строка Из Товары Цикл
		//+++АК KIRN 2018.05.21 ИП-00018709        
		Строка.ПоРасходнымОрдерам = ПолучитьКоличествоВОрдерах(Строка.Номенклатура, Строка.ДатаПроизводства);	 
		//Строка.ПоРасходнымОрдерам = ПолучитьКоличествоВОрдерах(Строка.Номенклатура);	 
		//---АК KIRN 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТоварыИзОрдеров_Было(Отказ = Ложь, ЭтоОткрытие = Ложь)
	
	МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	
	Если МассивОрдеров.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Товары.Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	|	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТоварыОрдеров
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	//+++АК KIRN 2018.05.17 ИП-00018709 
	|	И РасходныйОрдерСкладТовары.Количество > 0 
	//---АК KIRN 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.ЕдиницаИзмерения,
	|	ТоварыОрдеров.Количество,
	|	ТоварыОрдеров.Коэффициент
	|ИЗ
	|	ТоварыОрдеров КАК ТоварыОрдеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТоварыОрдеров.Номенклатура = Товары.Номенклатура
	|			И ТоварыОрдеров.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|ГДЕ
	|	Товары.Номенклатура ЕСТЬ NULL 
	|	И Товары.ЕдиницаИзмерения ЕСТЬ NULL "
	);
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаТоваров);
	
	Если Не Запрос.Выполнить().Пустой()Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если ЭтоОткрытие Тогда
			
			ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, Истина);
			
		Иначе
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "В табличной части ""Товары"" присутствует не вся номенклатура из ордеров." + Символы.ПС +  "Выполнить добавление отсутствующих позиций?";
			Ответ = Вопрос(Текст, Режим, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.10.05 ИП-00020071
// предыдущая версия в ДобавитьТоварыИзОрдеров_Было()
Процедура ДобавитьТоварыИзОрдеров(Отказ = Ложь, ЭтоОткрытие = Ложь)
	
	МассивОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	
	Если МассивОрдеров.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Товары.Выгрузить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЗ.Номенклатура,
		|	ТЗ.ЕдиницаИзмерения
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСкладТовары.Номенклатура,
		|	РасходныйОрдерСкладТовары.Характеристика КАК Характеристика,
		|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы).ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Вкусомат)
		|			ТОГДА РасходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомплект,
		|	РасходныйОрдерСкладТовары.Количество КАК Количество,
		|	РасходныйОрдерСкладТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТоварыОрдеровПредв
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втО_ТоварыСКомплектами.Номенклатура КАК Номенклатура,
		|	втО_ТоварыСКомплектами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	втО_ТоварыСКомплектами.Количество КАК Количество,
		|	втО_ТоварыСКомплектами.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТоварыБезКомплектов
		|ИЗ
		|	ТоварыОрдеровПредв КАК втО_ТоварыСКомплектами
		|ГДЕ
		|	НЕ втО_ТоварыСКомплектами.ЭтоКомплект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставКомплектаСрезПоследних.ТоварКомплекта,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта.ЕдиницаХраненияОстатков,
		|	втО_ТоварыСКомплектами.Количество * СоставКомплектаСрезПоследних.Количество,
		|	СоставКомплектаСрезПоследних.ТоварКомплекта.ЕдиницаХраненияОстатков.Коэффициент
		|ИЗ
		|	РегистрСведений.СоставКомплекта.СрезПоследних(
		|			&ДатаРО,
		|			(Комплект, Характеристика) В
		|				(ВЫБРАТЬ
		|					втО_ТоварыСКомплектами.Номенклатура,
		|					втО_ТоварыСКомплектами.Характеристика
		|				ИЗ
		|					ТоварыОрдеровПредв КАК втО_ТоварыСКомплектами)) КАК СоставКомплектаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыОрдеровПредв КАК втО_ТоварыСКомплектами
		|		ПО (втО_ТоварыСКомплектами.Номенклатура = СоставКомплектаСрезПоследних.Комплект)
		|			И (втО_ТоварыСКомплектами.Характеристика = СоставКомплектаСрезПоследних.Характеристика)
		|ГДЕ
		|	втО_ТоварыСКомплектами.ЭтоКомплект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыБезКомплектов.Номенклатура,
		|	ТоварыБезКомплектов.ЕдиницаИзмерения,
		|	СУММА(ТоварыБезКомплектов.Количество) КАК Количество,
		|	ТоварыБезКомплектов.Коэффициент
		|ПОМЕСТИТЬ ТоварыОрдеров
		|ИЗ
		|	ТоварыБезКомплектов КАК ТоварыБезКомплектов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыБезКомплектов.Номенклатура,
		|	ТоварыБезКомплектов.ЕдиницаИзмерения,
		|	ТоварыБезКомплектов.Коэффициент
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыБезКомплектов.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрдеров.Номенклатура,
		|	ТоварыОрдеров.ЕдиницаИзмерения,
		|	ТоварыОрдеров.Количество,
		|	ТоварыОрдеров.Коэффициент
		|ИЗ
		|	ТоварыОрдеров КАК ТоварыОрдеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО ТоварыОрдеров.Номенклатура = Товары.Номенклатура
		|			И ТоварыОрдеров.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
		|ГДЕ
		|	Товары.Номенклатура ЕСТЬ NULL
		|	И Товары.ЕдиницаИзмерения ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ДатаРО", НачалоДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если ЭтоОткрытие Тогда
			
			ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, Истина);
			
		Иначе
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "В табличной части ""Товары"" присутствует не вся номенклатура из ордеров." + Символы.ПС +  "Выполнить добавление отсутствующих позиций?";
			Ответ = Вопрос(Текст, Режим, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, ЭтоОткрытие = Ложь)
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
	МассивНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	Выборка.Сбросить();
	//---АК Susk (Суслин К.В.) 
	
	Пока Выборка.Следующий()Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ЭтоОткрытие Тогда
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275				
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(НоваяСтрока.Номенклатура);			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСчетов);
		
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		#Область ЗакоментКод_ДобавитьСтрокиВТабличнуюЧастьТовары
		
		//Если НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//	ИЛИ НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	
		//	СчетУчета = ПланыСчетов.Финансовый.Товары;
		//	
		//ИначеЕсли НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	
		//	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//	
		//КонецЕсли;
		//
		//Если НоваяСтрока.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		//	СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//КонецЕсли;
		//
		//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(НоваяСтрока.Номенклатура, Дата);
		//Если ТабСчетаУчета.Количество() > 0
		//	И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
		//	СчетУчета = ТабСчетаУчета[0].СчетУчета
		//КонецЕсли;
		//
		//НоваяСтрока.СчетУчета 				= СчетУчета;
		#КонецОбласти
		
		//---АК Susk (Суслин К.В.) 
		
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюПоДоговоруКонтрагента()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
		ФормаВыбора.НачальноеЗначениеВыбора = Контрагент;
		Результат = ФормаВыбора.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			
			ОбработатьВыборКонтрагента(Результат);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборКонтрагента(пКонтрагент)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация");
	Запрос.УстановитьПараметр("Владелец", пКонтрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Контрагент = пКонтрагент;
		
		//+++АК LAGP 2018.05.10 ИП-00018465 Для подстановки в РТУ Тилси-Перекресток
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если РасходныеОрдера.Количество() > 0 Тогда 
			СтруктурнаяЕдиницаРСО = РасходныеОрдера[0].РасходныйОрдер.Получатель;
			Если ТипЗнч(СтруктурнаяЕдиницаРСО) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда //получаю только по первому в списке, подразумевается что а нашем случае не будет больше 1 записи в ТЗ. 	
				ДоговорКонтрагента = Обработки.МаршрутныеЛисты.ПолучитьДоговорКонтрагентаСтороннейРозницы(Контрагент, СтруктурнаяЕдиницаРСО, Организация, Дата); 			
		    КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость        = Истина;	
		Иначе
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Ложь;
			ЭлементыФормы.ДоговорКонтрагента.Видимость        = Ложь;
			ЭтотОбъект.ДоговорКонтрагента					  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;	
		//---АК LAGP
		
		
		//+++АК luza 
		ЗаполнитьГрузополучателяПоУмолчанию(Контрагент);
		
	Иначе
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Предупреждение("Запрещено выбирать контрагента у которого нет договора с " + Организация);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыСуммаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	// Проверим пределы редактирования суммы
	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаМаксимум", НайденноеЗначение);
	
	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.Сумма;
		Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаМинимум", НайденноеЗначение);
	
	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.Сумма;
		Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСуммаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	// Проверим пределы редактирования суммы
	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаНДСМаксимум", НайденноеЗначение);
	
	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.СуммаНДС;
		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаНДСМинимум", НайденноеЗначение);
	
	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.СуммаНДС;
		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиКоличествоПриИзменении(Элемент)
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	КонтрагентАдресаДоставки = Контрагент;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ВвестиЗначение(КонтрагентАдресаДоставки, "Выберите контрагента");
	КонецЕсли;

	Если ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентАдресаДоставки;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Реализация товаров и услуг");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОснование) И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		Реализация = Документы.РеализацияТоваровУслуг.НайтиРеализациюПоРасходнику(ПараметрОснование);
		Если Реализация <> Неопределено Тогда
			
			Реализация.ПолучитьФорму().Открыть();
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
	КонецЕсли;                            
	
КонецПроцедуры
//---АК

//+++АК Susk (Суслин К.В.) 2018.02.13 ИП-00017908
Процедура ДействияФормыВыгрузитьВБПНов(Кнопка)
	
	Если НЕ ОбменСБП2_0.ПроверкаПередВыгрузкой(Ссылка.Пустая(), Модифицированность) Тогда
		Возврат;
	КонецЕсли;	
		
	ОбменСБП2_0.ВыгрузитьДокументВБП("РеализацияТоваровУслуг", "РеализацияТоваровУслуг", Ссылка); 
	
КонецПроцедуры	

//+++АК SaMi 2018.04.04 ИП-00018178 
Процедура EDI_ТочкаДоставкиПриИзменении(Элемент)
	
	EDI_УстановитьДоступность();
	
КонецПроцедуры
//---АК SaMi  2018.04.04 

//+++АК SaMi 2018.04.04 ИП-00018178 
Процедура EDI_УстановитьДоступность()
	
	ЭлементыФормы.EDI_РамкаГруппыТовары.Видимость = ЗначениеЗаполнено(EDI_ТочкаДоставки);
	ЭлементыФормы.EDI_Товары.Видимость = ЗначениеЗаполнено(EDI_ТочкаДоставки);
	ЭлементыФормы.EDI_ГотовКОбмену.Видимость = ЗначениеЗаполнено(EDI_ТочкаДоставки);
	
	ДоступностьEDI = РольДоступна("ПолныеПрава");
	
	ЭлементыФормы.EDI_ТочкаДоставки.Доступность = ДоступностьEDI;
	ЭлементыФормы.EDI_Товары.Доступность = ДоступностьEDI;
	ЭлементыФормы.EDI_ГотовКОбмену.Доступность = ДоступностьEDI;
	
	//+++АК KIRN 2018.04.24 
	ЕстьПравоРедактироватьТЧ = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетИзменятьДанныеРТУПослеОтправкиEDI, Ложь);
	ЭлементыФормы.Товары.ТолькоПросмотр = (EDI_ГотовКОбмену) И (НЕ ЕстьПравоРедактироватьТЧ);
	ЭлементыФормы.EDI_Товары.ТолькоПросмотр = (EDI_ГотовКОбмену) И (НЕ ЕстьПравоРедактироватьТЧ);
	ЭлементыФормы.EDI_ГотовКОбмену.Доступность = (НЕ EDI_ГотовКОбмену) ИЛИ (ДоступностьEDI и EDI_ГотовКОбмену и НЕ ОбщиеПроцедуры.ЕстьДвиженияПоДОкументуВРегистре_КонтурEDI_СтатусыДокументов(Ссылка));
	//---АК KIRN 		
	
КонецПроцедуры 
//---АК SaMi  2018.04.04 

//+++АК KIRN 2018.04.11 ИП-00018209 
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(EDI_ТочкаДоставки) ИЛИ РольДоступна("ПолныеПрава") ТОгда
	Иначе
		Отказ = Истина;
	КонецЕСли;
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.17 ИП-00018209^01, 2018.07.22 ИП-00018929.000.00000002    
Процедура КоманднаяПанель1ОбновитьЦеныБезНДС(Кнопка)
	
	//+++АК SHEP 2018.10.05 ИП-00020071: перенёс в модуль объекта
	ОбновитьЦеныБезНДС();
	//---АК SHEP 2018.10.05
	
КонецПроцедуры
//---АК KIRN 


//+++АК KIRN 2018.04.26 ИП-00018470 
Процедура УправлениеФормой()
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ЭлементыФормы.Панель2.ТекущаяСтраница = ЭлементыФормы.Панель2.Страницы.СтраницаДобавить;
	Иначе
		ЭлементыФормы.Панель2.ТекущаяСтраница = ЭлементыФормы.Панель2.Страницы.СтраницаУдалить;
	КонецЕсли;
	
	//+++АК LAGP 2018.05.10 ИП-00018465 Учет расчетов с ТТПерекресток.
	ТаблицаПроверки = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуНезаполненныхДоговоров(ЭтотОбъект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаПроверки) ИЛИ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость        = Истина;
	КонецЕсли;	
	//---АК LAGP	
	
КонецПроцедуры
//---АК KIRN 


//+++АК KIRN 2018.04.26  ИП-00018470 
Процедура УдалитьФайлНажатие(Элемент)
	Если ПустаяСтрока(ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите удалить файл?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		УдалитьФайлы(ИмяФайла);
		
		ИмяФайла = "";
		ИмяФайлаСРасширением = "";
		Модифицированность = Истина;
		
	Исключение
		
	КонецПопытки;	
	
	УправлениеФормой();
КонецПроцедуры
//---АК KIRN

//+++АК KIRN 2018.04.26  ИП-00018470 
Процедура ИмяФайлаСРасширениемНажатие(Элемент)
	Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ИмяФайлаСРасширением);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	//АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор());
	Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
		ЗапуститьПриложение(ИмяВременногоФайла);
	КонецЕсли;
КонецПроцедуры
//---АК KIRN 

//+++АК KIRN 2018.04.26   ИП-00018470 
Процедура СохранитьФайлНаСервере(ПомещенныйФайл, ИмяФайлаСРасширением, Расширение)
	
	КаталогХраненияФайлов = СокрЛП(Константы.КаталогХраненияФайлов.Получить());
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(Прав(КаталогХраненияФайлов, 1) = "\", "", "\");
	
	ФайлКаталогХраненияФайлов = Новый Файл(КаталогХраненияФайлов);
	Если НЕ ФайлКаталогХраненияФайлов.Существует() Тогда
		СоздатьКаталог(КаталогХраненияФайлов);
	КонецЕсли;

	// Всегда помещен только 1 файл
	ЭлементМассива = ПомещенныйФайл;	
	
	// Получаем двоичные данные
	ФайлИзХранилища = ПолучитьИзВременногоХранилища(ЭлементМассива);
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		ФайлИзХранилища.Записать(ИмяФайлаНаСервере);
		ИмяФайла = ИмяФайлаНаСервере;
		ИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		Модифицированность = Истина;
	Исключение
		Сообщить("Не удалось записать файл на сервере.");
	КонецПопытки;	
	
КонецПроцедуры
//---АК KIRN  

//+++АК KIRN 2018.04.26   ИП-00018470 
Процедура ДобавитьФайлНажатие(Элемент)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогФайла.МножественныйВыбор = Ложь;
	ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогФайла.Выбрать() Тогда
		
		ПолноеИмяФайла   = ДиалогФайла.ПолноеИмяФайла;
		ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
		
		АдресВременногоХранилища = "";
		Если ПоместитьФайл(АдресВременногоХранилища, ПолноеИмяФайла,, Ложь)Тогда
			СохранитьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение);
		Иначе 
			Сообщить("Не удалось добавить файл.");
		КонецЕсли;
		
	КонецЕсли;
	УправлениеФормой();

КонецПроцедуры
//---АК KIRN 

//+++АК LAGP 2018.05.10 ИП-00018465 Учет расчетов с ТТПерекресток.
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК KIRN 2018.05.25  ИП-00018663.000.00000002
Процедура EDI_ГотовКОбменуПриИзменении(Элемент)
	Если EDI_ГотовКОбмену ТОгда
		Ответ = Вопрос("Перезаполнить РТУ на основании ордеров?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да ТОгда
			стОбновленныеДанные = ОбщиеПроцедуры.ПолучитьТЗТоварыДляРО(РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
			Товары.Загрузить(стОбновленныеДанные.тзТовары);
			EDI_Товары.Загрузить(стОбновленныеДанные.тзТовары);
			
			//+++АК ILIK 2018.06.04 ИП-00018886
			// организация Тилси
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "ИНН") = "7734410589" Тогда
				Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
			КонецЕсли;
			//---АК ILIK
			//+++АК sils 19.10.2018 ИП-00020171
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "ИНН") = "7734675810" Тогда
				Товары.Свернуть("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, СтавкаНДС, СчетУчета, СтатьяТовародвижения, СтруктурнаяЕдиница", "Количество, Сумма, СуммаНДС, ПоРасходнымОрдерам");
			КонецЕсли;
			//---АК
		//---АК
		КонецЕСли
	КонецЕСли;
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.27 ИП-00018930 
//универсальная на изменение любого субконто фин. 
Процедура УслугиСубконтоПриИзменении(Элемент)
	
	ИзменениеСчетаИлиСубконтоДляБУ();	
	
КонецПроцедуры 

//+++АК Susk (Суслин К.В.) 2018.07.27 ИП-00018930
//Процедура ИзменитьСчетЗатратИСубконтоБух()
//	
//	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
//	
//	Если НЕ ЗначениеЗаполнено(ТекДанные.СчетЗатрат) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВидСубконто = "";
//	
//	Если НЕ ЗначениеЗаполнено(ТекДанные.СчетДоходовБУ) Тогда
//		ТекДанные.СчетДоходовБУ = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
//		ВидСубконто = "ПрочиеДоходыИРасходыБУ";
//	Иначе
//		СвойстваБухСчета = БухгалтерскийУчетВызовСервераПовтИспУФ.ПолучитьСвойстваСчета(ТекДанные.СчетДоходовБУ, "Хозрасчетный");
//		
//		Для ИндексСубконто = 1 По СвойстваБухСчета.КоличествоСубконто Цикл
//			Если СвойстваБухСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьСсылку(Новый УникальныйИдентификатор("ecf36c81-b420-4adc-bd71-71c85f3a706f")) Тогда //ПрочиеДоходыИРасходыБУ
//				ВидСубконто = "ПрочиеДоходыИРасходыБУ";
//				Прервать;
//			ИначеЕсли СвойстваБухСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратБУ Тогда
//				ВидСубконто = "СтатьиЗатратБУ";
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
//		Возврат
//	КонецЕсли;
//	
//	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИспУФ.ПолучитьСвойстваСчета(ТекДанные.СчетЗатрат);
//	
//	Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
//		Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов Тогда
//			
//			Если ЗначениеЗаполнено(ТекДанные["Субконто" + ИндексСубконто]) Тогда
//				ТекДанные.СубконтоБУ = ОбщиеПроцедуры.ПолучитьСтатьюЗатратБухПоСтатьеДР(ВидСубконто, ТекДанные["Субконто" + ИндексСубконто], ТекДанные.СчетЗатрат);
//			КонецЕсли;
//			
//			Прервать;
//			
//		КонецЕсли;			
//	КонецЦикла;	
//	
//КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.27 ИП-00018930
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Счет   = СтрокаТЧ.СчетЗатратБУ;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоБУ1 = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.СубконтоБУ1 = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Услуги.Колонки.СубконтоБУ1.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.02 
Процедура ИзменениеСчетаИлиСубконтоДляБУ(ИзменениеСубконто = Истина)
	
	ТекСтрока = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Проводки = ЗаполнениеДокументов.ВернутьТаблицуДляСопоставления();
	НовСтр = Проводки.Добавить();
	НовСтр.СчетДт = ТекСтрока.СчетЗатрат;		
	НовСтр.СубконтоДт1 = ТекСтрока.Субконто1;
	НовСтр.СубконтоДт2 = ТекСтрока.Субконто2;
	НовСтр.СубконтоДт3 = ТекСтрока.Субконто3;		
	НовСтр.НомерСтроки = ТекСтрока.НомерСтроки;
	
	ЗаполнениеДокументов.ПроставитьСчетИСубконтоБУВДокумент(ЭтотОбъект, Проводки, "Услуги", 1, "БУ");	
	
	Если НЕ ИзменениеСубконто Тогда
		УслугиСчетДоходовБУПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры 

//+++АК sole 2018.07.30 ИП-00018320.05
Процедура ЗаполнитьНажатие(Элемент)
	
	Если ЕстьНезаполненныеЗначенияДляЗагрузкиТранспортныхДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТранспортныеДокументы();
	ЗаполнитьУслугиПоТранспортнымДокументам();
	
КонецПроцедуры

//+++АК sole 2018.07.30 ИП-00018320.05
Функция ЕстьНезаполненныеЗначенияДляЗагрузкиТранспортныхДокументов()
	
	Перем Результат, ШаблонСообщения;
	
	Результат = Ложь;
	
	ШаблонСообщения = "Для загрузки транспортных документов необходимо заполнить ";	
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НачалоПериода) Тогда
		Сообщить(ШаблонСообщения + """НачалоПериода"".");	
		Результат = Истина;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ОкончаниеПериода) Тогда
		Сообщить(ШаблонСообщения + """ОкончаниеПериода"".");
		Результат = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		Сообщить(ШаблонСообщения + """Организация"".");
		Результат = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		Сообщить(ШаблонСообщения + """Контрагент"".");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//+++АК sole 2018.07.30 ИП-00018320.05	
Процедура ЗаполнитьТранспортныеДокументы()
	
	Перем Запрос;
	
	Запрос = Новый Запрос();

	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
|	МаршрутныйЛист.Сумма,
|	МаршрутныйЛист.СуммаНДС
|	
|ИЗ Документ.МаршрутныйЛист КАК МаршрутныйЛист
|ГДЕ
|		НЕ МаршрутныйЛист.ПометкаУдаления
|	И	МаршрутныйЛист.Проведен
|	И	МаршрутныйЛист.Дата >= &НачалоПериода
|	И	МаршрутныйЛист.Дата <= &ОкончаниеПериода
|	И	МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ВозвратПоставщику)
|	И	МаршрутныйЛист.Организация = &Организация
|	И	ТИПЗНАЧЕНИЯ(МаршрутныйЛист.ДокументОснование) = ТИП(Документ.АК_ЗаявкаНаПеревозку)
|	И	МаршрутныйЛист.ДокументОснование.Поставщик = &Поставщик
|";
	Запрос.УстановитьПараметр("НачалоПериода", ЭтотОбъект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ЭтотОбъект.ОкончаниеПериода));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Поставщик", ЭтотОбъект.Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтотОбъект.ТранспортныеДокументы.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НСтр = ЭтотОбъект.ТранспортныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Выборка);
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.07.30 ИП-00018320.05
Процедура ЗаполнитьУслугиПоТранспортнымДокументам()
	
	Перем Запрос, БазаДляНДС, КодТранспортныеУслуги, СтрокаУслуги, чСуммаИтог;
	
	КодТранспортныеУслуги = "000620351";
	
	ЭтотОбъект.Услуги.Очистить();
	СтрокаУслуги = ЭтотОбъект.Услуги.Добавить();

	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ ПЕРВЫЕ 1
|	Номенклатура.Ссылка,
|	Номенклатура.СтавкаНДС
|
|ИЗ Справочник.Номенклатура КАК Номенклатура
|ГДЕ Номенклатура.Код = &КодТранспортныеУслуги
|";
	Запрос.УстановитьПараметр("КодТранспортныеУслуги", КодТранспортныеУслуги);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаУслуги.Номенклатура = Выборка.Ссылка;
		СтрокаУслуги.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаУслуги.Количество = 1;	
	КонецЕсли;	
	
	чСтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаУслуги.СтавкаНДС);

	БазаДляНДС = 0;
	чСуммаИтог = 0;	
	
	Для Каждого Стр Из ЭтотОбъект.ТранспортныеДокументы Цикл
		БазаДляНДС = БазаДляНДС + Стр.Сумма - Стр.СуммаНДС;
		чСуммаИтог = чСуммаИтог + Стр.Сумма;
	КонецЦикла;	
	
	СтрокаУслуги.Сумма = чСуммаИтог;
	СтрокаУслуги.СуммаНДС = БазаДляНДС * чСтавкаНДС / 100;
	
	//+++АК sole 2018.08.13 ИП-00018320.08
	СтрокаУслуги.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.ПрочиеДоходы; //91.01
	//---АК sole 2018.08.13 ИП-00018320.08
	
КонецПроцедуры

//+++АК sole 2018.07.30 ИП-00018320.05
Процедура ТранспортныеУслугиПриИзменении(Элемент)
	УстановитьВидимостьТранспортныеДокументы();	
КонецПроцедуры

//+++АК sole 2018.07.30 ИП-00018320.05
Процедура УстановитьВидимостьТранспортныеДокументы()
	ЭтаФорма.ЭлементыФормы.Панель1.Страницы.ТранспортныеДокументы.Видимость = ЭтотОбъект.ТранспортныеУслуги;	
КонецПроцедуры

//+++АК luza 2018.08.23 ИП-00019074
Процедура ДействияФормыОтправитьПоЭДО_УПД(Кнопка)
	ЭтотОбъект.ОтправитьПоЭДО("УПД");
КонецПроцедуры

//+++АК luza 2018.08.23 ИП-00019074
Процедура ДействияФормыОтправитьПоЭДО_СФ(Кнопка)
	ЭтотОбъект.ОтправитьПоЭДО("СФ");
КонецПроцедуры

//+++АК luza 2018.08.23 ИП-00019074
Процедура ДействияФормыОтправитьПоЭДО_ТОРГ12(Кнопка)
	ЭтотОбъект.ОтправитьПоЭДО("ТОРГ-12");
КонецПроцедуры

//+++АК luza 2018.09.02 ИП-00019074
Процедура ДействияФормыОтправитьПоЭДО_АКТ(Кнопка)
	ЭтотОбъект.ОтправитьПоЭДО("АКТ");
КонецПроцедуры

//+++ АК luza 20.09.2018 ИП-00019881
Процедура ЗаполнитьПрикрепленныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	МАКСИМУМ(ЭДО_СопоставлениеДокументов.ДокументЭДО.ФайлPDF) КАК ДокументЭДОФайлPDF
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_СопоставлениеДокументов.ВидДокумента";
	
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			ФайлАкт = Стр.ДокументЭДОФайлPDF;
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда
			ФайлНакладная = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			ФайлСФ = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
			ФайлУПД = Стр.ДокументЭДОФайлPDF;	
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры	

//+++АК luza ИП-00019743 
Процедура ЗаполнитьГрузополучателяПоУмолчанию(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Контрагент.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.Грузоотправитель_По_Умолчанию);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Грузополучатель = ТЗ[0].Значение;		
	КонецЕсли;	
	
КонецПроцедуры


мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
