
Перем мВалютаРегламентированногоУчета Экспорт;

//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00019917.04
Перем мЭтоНовыйОбъект;
//---АК Susk (Суслин К.В.)  

//+++ AK BARA ИП-00015673.000.00000001
Функция СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки)
	
	Если НЕ ЗначениеЗаполнено(ШаблонРассылки) Тогда
		ТекстПисьма =
			"Добрый день.
			|По результатам  предоставленной вами инвентаризации нашей этикетки/упаковки, на вашем складе выявлены расхождения.
			|
			|В связи с чем, нами выставлен счёт на погашение данного расхождения (во вложении).";
		Возврат ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;
	
	ТекстПисьма = ШаблонРассылки.ОписаниеHTML;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор", Руководители.Руководитель);
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование", Контрагент.НаименованиеПолное);
	
	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%" + ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстПисьма);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ХранилищеДополнительнойИнформации.Ссылка,
			|	ХранилищеДополнительнойИнформации.ИмяФайла
			|ИЗ
			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			|ГДЕ
			|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла");
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		
		//ЗначениеКартинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
		//
		//ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		//
		//ЗначениеКартинка.Записать(ИмяВременногоФайла);
		
		//ТекКартинкаНТМЛ.Источник = ИмяВременногоФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
		
	КонецЦикла;

	Возврат ТипТекстаПочтовогоСообщения.HTML;
	
КонецФункции // СформироватьТекстПисьма()

Процедура ОтправитьПисьмо(Кому = "", Тема = "", ШаблонРассылки = "", АдресЭПОтправителя = "") Экспорт
	
	Если ПустаяСтрока(Кому) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК АдресКонтрагента
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Вид = &Вид");
		Запрос.УстановитьПараметр("Объект", Контрагент);
		Запрос.УстановитьПараметр("Вид", ?(ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования), Контрагент.ВидКИ_ДляИнформирования, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаЗапроса.Следующий();
			
			Кому = ВыборкаЗапроса.АдресКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Кому) Тогда
		Сообщить("Адрес для отправки пуст!");
		Возврат;
	КонецЕсли;
	
	МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Кому, ";");
	Если МассивАдресов.Количество() = 0 Тогда
		Сообщить("У контрагента не указаны эл. адреса для отправки!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		Тема = "Расхождения по инвентаризации этикетки/упаковки";
	КонецЕсли;
	
	//ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент = ПечатьТорг12(Ссылка);
	Если ТабДокумент = Ложь Тогда Возврат; КонецЕсли;
	
	ТекстПисьма = "";
	ТипТекста = СформироватьТекстПисьма(ТекстПисьма, ШаблонРассылки);
	
	//УчетнаяЗапись = ОтКого;
	 //АдресЭПОтправителя = АдресЭПОтправителя;
	Почта = Новый ИнтернетПочта;        МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресЭПОтправителя);
	//АдресЭПОтправителя = "upakovka@vkusvill.ru";механи
	УчёткаДляНастройки =  МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу( АдресЭПОтправителя);

	//УчёткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу("000000018");
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаДляНастройки);
	//Профиль.Пользователь = АдресЭПОтправителя;
	//Профиль.ПользовательSMTP = АдресЭПОтправителя;
	//Профиль.Пароль = "Asdqaz123";
	//Профиль.ПарольSMTP = "Asdqaz123";
	//Профиль.ПользовательIMAP = АдресЭПОтправителя;
	//Профиль.АдресСервераIMAP = "imap.yandex.ru";
	//Профиль.ПарольIMAP = "Asdqaz123";
	Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	//Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	Для Каждого АдресДляОтправки Из МассивАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(АдресДляОтправки);
		//Получатель.Адрес = СокрЛП("bancom@yandex.ru");//На время теста		
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма, ТипТекста);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".pdf");
	ТабДокумент.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.PDF);
	Письмо.Вложения.Добавить(ИмяВремФайла, "Торг12");
	//УдалитьФайлы(ИмяВремФайла);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".MXL");
	ТабДокумент.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.MXL);
	Письмо.Вложения.Добавить(ИмяВремФайла, "Торг12");
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();

КонецПроцедуры	
 //--- AK BARA ИП-00015673.000.00000001


Функция ПечатьТорг12(СсылкаНаДокумент) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	//+++АК SHEP 2018.10.12 ИП-00020100: вызываем одну и ту же функцию!!!
	Возврат Документы.РеализацияТоваровУслуг.ПечатьТорг12(СсылкаНаДокумент);
	//---АК SHEP 2018.10.12

	#Область НикомуНенужнаяДублирующаяПечатьТорг12
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента = """"
	|			ТОГДА РеализацияТоваровУслуг.Номер
	|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоДокумента
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РеализацияТоваровУслуг.Дата
	|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Организация КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	//+++АК SHEP 2018.10.10 ИП-00020100
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	//---АК SHEP 2018.10.10
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Количество КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.Сумма КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID,
	|	ВЗ_Свойства.Производитель,
	|	ВЗ_Свойства.СтранаПроисхождения,
	|	ВЗ_Свойства.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика,
	|	ВЗ_Свойства.Характеристика
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Производитель,
	|			МАКСИМУМ(ЗначенияСвойствОбъектов1.Значение) КАК СтранаПроисхождения,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РасходныйОрдерСкладТовары.Характеристика) КАК Характеристика,
	|				РасходныйОрдерСкладТовары.Характеристика.Владелец КАК Номенклатура
	|			ИЗ
	|				Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|			ГДЕ
	|				РасходныйОрдерСкладТовары.Ссылка В
	|						(ВЫБРАТЬ
	|							РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
	|						ИЗ
	|							Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|						ГДЕ
	|							РеализацияТоваровУслугРасходныеОрдера.Ссылка = &ТекущийДокумент)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасходныйОрдерСкладТовары.Характеристика.Владелец) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов.Объект
	|					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов1.Объект
	|					И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура,
	|			ВложенныйЗапрос.Характеристика) КАК ВЗ_Свойства
	|		ПО РеализацияТоваровУслуг.Номенклатура = ВЗ_Свойства.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	Запрос.Текст = Текст;
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//АК БЕЛН 13.07.2016++
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
	//Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12Изм");
	//Запрос.Текст = 	
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	//|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	//|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
	//|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
	//|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
	//|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
	//|ГДЕ
	//|	РасходныйОрдерСкладТовары.Ссылка в (&МассивРО)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	//|	СертификатыНаПродукциюСрезПоследних.Характеристика
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СертификатыНаПродукцию.Номенклатура,
	//|	СертификатыНаПродукцию.Характеристика,
	//|	СертификатыНаПродукцию.РегистрационныйНомер,
	//|	СертификатыНаПродукцию.ДействуетДо
	//|ИЗ
	//|	вт КАК вт
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	//|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
	//|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
	//|			И вт.Период = СертификатыНаПродукцию.Период";
	//Запрос.УстановитьПараметр("МассивРО", СсылкаНаДокумент.РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
	//ВыборкаСертификаты=Запрос.Выполнить().Выбрать();
	//АК БЕЛН 13.07.2016--
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
			"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
			+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		//АК БЕЛН 13.07.2016++
		//ТекстСертификатов = "";
		//Пока ВыборкаСертификаты.НайтиСледующий(Новый Структура("Номенклатура",ВыборкаСтрок.Номенклатура)) Цикл
		//	Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
		//	Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
		//	ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
		//												Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
		//КонецЦикла;
		//ВыборкаСертификаты.Сбросить();											
		//Если НЕ ТекстСертификатов = "" Тогда
		//	ТекстСертификатов = Сред(ТекстСертификатов, 3);
		//КонецЕсли;
		//ОбластьМакетаСтрока.Параметры.Сертификаты = ТекстСертификатов + ".";
		//АК БЕЛН 13.07.2016--
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		НаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		
		//+++ gusd
		Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
			И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
			
			НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		//--- gusd
		
		//+++ АК BARA ИП-00018040      01.03.2018
		Если ЗначениеЗаполнено(ВыборкаСтрок.Характеристика) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Характеристика;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВыборкаСтрок.Производитель) Тогда
		//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Производитель;
		//КонецЕсли;
		//--- АК BARA ИП-00018040

		Если ЗначениеЗаполнено(ВыборкаСтрок.СтранаПроисхождения) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.СтранаПроисхождения;
		КонецЕсли;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = НаименованиеТовара;

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		Если НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		#Если Клиент Тогда
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
		#Иначе	
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		#КонецЕсли
			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;
	#КонецОбласти
	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "Торг12" Тогда
		
		ТабДокумент = ПечатьТорг12(ЭтотОбъект.Ссылка);
		//+++АК BARA ИП-00017657 2018.01.22     	
	ИначеЕсли ИмяМакета = "СчетНаЗаказ" Тогда
		
		ТабДокумент = СчетНоОплату(ЭтотОбъект.Ссылка);
		
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент981" Тогда
		
		ТабДокумент = ПечатьУниверсальныйПередаточныйДокумент(ЭтотОбъект.Ссылка);
		
		//---АК		
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка,
			Новый Структура("ПолеСлева, ПолеСправа, ПолеСверху, ПолеСнизу, ОриентацияСтраницы, ОтображатьЗаголовки, ОтображатьСетку, ТолькоПросмотр, Защита, ИмяПараметровПечати", 4, 4, 0, 0, ОриентацияСтраницы.Ландшафт));

		
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	//+++АК BARA ИП-00017657 2018.01.22     
	Резфункции =  Новый Структура("Торг12", "ТОРГ-12 (Товарная накладная)");
	Резфункции.Вставить("СчетНаЗаказ", "Счет на оплату");
	Резфункции.Вставить("УниверсальныйПередаточныйДокумент981", "Универсальный передаточный документ");
	Возврат Резфункции;
	//---АК BARA ИП-00017657 2018.01.22     
КонецФункции

Процедура ПроверитьИСместитьГраницу()
	
	//ТекГраница = Последовательности.Себестоимость.ПолучитьГраницу();
	//Если ТипЗнч(ТекГраница) = Тип("МоментВремени") Тогда
	//	Если ТекГраница.Сравнить(МоментВремени()) = 1 Тогда
	//		Последовательности.Себестоимость.УстановитьГраницу(МоментВремени());
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьТоварыПоРасходномуОрдеру(СсылкаНаДокумент)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	//+++АК KIRN 2018.05.21 ИП-00018709       
	|	РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
	//---АК KIRN
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК ПоРасходнымОрдерам,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&Дата, ) КАК СчетаУчетаНоменклатурыСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	//+++АК KIRN 2018.05.21 ИП-00018709       
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	//---АК KIRN 
	|	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Дата", СсылкаНаДокумент.Дата);
	
	//+++АК ILIK 2018.06.04 ИП-00018886
	// организация Тилси
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "ИНН") = "7734410589" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерСкладТовары.ДатаПроизводства КАК ДатаПроизводства,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерСкладТовары.ДатаПроизводства,", "");
	КонецЕсли;
	//---АК ILIK
	
	ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275	
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	//---АК Susk (Суслин К.В.) 
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТЧ.Номенклатура);			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);	
			
			//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
			
			#Область ЗакоментКод_ЗаполнитьТоварыПоРасходномуОрдеру
			//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчета) Тогда
			//	Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			//		ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			//		
			//		СчетУчета = ПланыСчетов.Финансовый.Товары;
			//		
			//	ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			//		
			//		СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
			//		
			//	КонецЕсли;
			//	
			//	Если СтрокаТЧ.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			//		СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
			//	КонецЕсли;
			//	
			//	СтрокаТЧ.СчетУчета 				= ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
			//КонецЕсли;
			#КонецОбласти
			
			//---АК Susk (Суслин К.В.) 
			
			СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
			
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		ПосчитатьСуммуТабличнойЧасти();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ)Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
	Отбор.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
	Отбор.Вставить("Контрагент",			Контрагент);
	
	//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(?(Дата = Дата(1,1,1), НачалоДня(ТекущаяДата()), Дата), Отбор);
	СтруктураЦены = РегистрыСведений.ЦеныРеализации.ПолучитьПоследнее(?(Дата = Дата(1,1,1), НачалоДня(ТекущаяДата()), Дата), Отбор);
	
	Если  СтруктураЦены.Цена=0 Тогда
	
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		Отбор.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		Отбор.Вставить("Контрагент",			Справочники.Контрагенты.ПустаяСсылка());
		
		//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(?(Дата = Дата(1,1,1), НачалоДня(ТекущаяДата()), Дата), Отбор);
		СтруктураЦены = РегистрыСведений.ЦеныРеализации.ПолучитьПоследнее(?(Дата = Дата(1,1,1), НачалоДня(ТекущаяДата()), Дата), Отбор);
	
	КонецЕсли; 	
	
	
	
	Если ВариантРасчетаНДС= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		СтрокаТЧ.Цена	= СтруктураЦены.Цена;
	Иначе		
		
		//Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			
			ЦенаБезНДС = (СтруктураЦены.Цена/(100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС)))*100;
			
			СтрокаТЧ.Цена = ЦенаБезНДС;
			
		//Иначе
		//	СтрокаТЧ.Цена	= СтруктураЦены.ЦенаБезНДС;
		//КонецЕсли;
	КонецЕсли;
	
	ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
	
КонецПроцедуры

Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчетаНДС);
	
	//++АК LOBV 
	ПосчитатьСуммуТабличнойЧасти();
	//--AK LOBV
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчета)
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = ВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

Процедура ПосчитатьСуммуТабличнойЧасти() Экспорт
	
	СуммаДок = 0;
	
	Для Каждого СтрокаТабличнойЧастиТовары Из ЭтотОбъект.Товары Цикл
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиТовары.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиТовары.Сумма + СтрокаТабличнойЧастиТовары.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧастиУслуги Из ЭтотОбъект.Услуги Цикл
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиУслуги.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиУслуги.Сумма + СтрокаТабличнойЧастиУслуги.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	СуммаДокумента = СуммаДок;
	
Конецпроцедуры

Функция ПолучитьБазовуюЕдиницуИзмерения(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	Возврат Номенклатура.БазоваяЕдиницаИзмерения;
	
КонецФункции

//+++АК KIRN 2018.05.17 ИП-00018596 
//Процедура ОтразитьДвиженияПоИзлишкамТоваров(СтрокаТЧ)
Процедура ОтразитьДвиженияПоИзлишкамТоваров(СтрокаТЧ, пСтруктурнаяЕдиница = Неопределено)
//---АК KIRN 
	
	Если СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам >= 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.РеализацияПрочая_Излишки, ЭтотОбъект.Дата);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		Проводка = Движения.Финансовый.Добавить();
		
		Проводка.Период 		= Дата;
		Проводка.Организация	= Организация; //+++АК Susk (Суслин К.В.) 2018.05.23 раскоментировал, было закоменчено
		
		//Проводка.Сумма 			= (СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам)*СуммаВсего/СтрокаТЧ.Количество;
		
		// Дт
		Проводка.СчетДт 							= СтруктураНастроек.Счет;
		//+++АК KIRN 2018.05.17 ИП-00018596  
		//Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоДт.ТорговыеТочки  			= ?(ЗначениеЗаполнено(пСтруктурнаяЕдиница),пСтруктурнаяЕдиница,СтруктураНастроек.СтруктурнаяЕдиница);
		//---АК KIRN 
		Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		// Кт
		Проводка.СчетКт 								= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоКт 							= СтрокаТЧ.ПоРасходнымОрдерам - СтрокаТЧ.Количество;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоКт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Недостача товара";//"Излишки товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоКт.Склады		 			= ЭтотОбъект.Склад;
			Проводка.СубконтоКт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= ?(ЗначениеЗаполнено(СтруктураНастроек.ДопСтатьяДвиженияТоваров), СтруктураНастроек.ДопСтатьяДвиженияТоваров, СтруктураНастроек.СтатьяДвиженияТоваров);//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.КоличествоКт						= (СтрокаТЧ.ПоРасходнымОрдерам - СтрокаТЧ.Количество) * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Недостача материалов";//"Излишки материалов";
		Иначе
			Проводка.СубконтоКт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.КоличествоКт						= (СтрокаТЧ.ПоРасходнымОрдерам - СтрокаТЧ.Количество) * СтрокаТЧ.Коэффициент;
		КонецЕсли;
		
		Проводка.Сумма = Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура, , ЭтотОбъект.Дата);
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК KIRN 2018.05.17 ИП-00018596  
//Процедура ОтразитьДвиженияПоНедостачеТоваров(СтрокаТЧ)
Процедура ОтразитьДвиженияПоНедостачеТоваров(СтрокаТЧ, пСтруктурнаяЕдиница = Неопределено)
//---АК KIRN 	
	//+++АК POZM 2018.08.29 ИП-00019521 
	Если ЭтотОбъект.ПродажиКурьеров Тогда
		Возврат;
	КонецЕсли;	
	//---АК POZM 

	Если СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.РеализацияПрочая_Недостачи, ЭтотОбъект.Дата);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		Проводка = Движения.Финансовый.Добавить();
		
		Проводка.Период			= ЭтотОбъект.Дата;
		Проводка.Организация 	= Организация; //+++АК Susk (Суслин К.В.) 2018.05.23 раскоментировал, было закоменчено
		
		// Дт
		Проводка.СчетДт 		= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоДт 	= СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			//+++АК POZM 2018.08.28 ИП-00019521 
			Если ЗначениеЗаполнено(СтрокаТЧ.СтруктурнаяЕдиница) Тогда
				Проводка.СубконтоДт.МестаХранения  		= СтрокаТЧ.СтруктурнаяЕдиница;
			КонецЕсли;	
			//---АК POZM 
			Проводка.СубконтоДт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Излишки товаров";//"Недостача товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоДт.Склады		 			= ЭтотОбъект.Склад;
			Проводка.СубконтоДт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= ?(ЗначениеЗаполнено(СтруктураНастроек.ДопСтатьяДвиженияТоваров), СтруктураНастроек.ДопСтатьяДвиженияТоваров, СтруктураНастроек.СтатьяДвиженияТоваров);//СтрокаТЧ.СтатьяТовародвижения;
			Проводка.КоличествоДт						= (СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам) * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Излишки материалов";//"Недостача материалов";
			
		Иначе
			
			Проводка.СубконтоДт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.КоличествоДт						= (СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам) * СтрокаТЧ.Коэффициент;
			
		КонецЕсли;
		
		// Кт
		Проводка.СчетКт 							= СтруктураНастроек.Счет;
		//+++АК KIRN 2018.05.17  ИП-00018596
		//Проводка.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.ТорговыеТочки 			= ?(ЗначениеЗаполнено(пСтруктурнаяЕдиница),пСтруктурнаяЕдиница,СтруктураНастроек.СтруктурнаяЕдиница);
		//---АК KIRN 
		Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоКт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		Проводка.Сумма = Проводка.КоличествоДт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура, , ЭтотОбъект.Дата);
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//+++АК sole 2018.07.30 ИП-00018320.05
	Если ЭтотОбъект.ТранспортныеУслуги Тогда
		СформироватьПроводкиТранспортныеУслуги(Отказ);
		Возврат;
	КонецЕсли;
	//---АК sole 2018.07.30 ИП-00018320.05
	
	//+++ AK BARA ИП-00015673.000.00000001
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияСклад") и ЗначениеЗаполнено(ДокументОснование) Тогда 
		ПроводкиПоИнвенаризации2();
	Иначе
	//--- AK BARA ИП-00015673.000.00000001

	
	//++АК LOBV Заполним сумму документа, если она не заполнена (актуально для документов услуг)
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СуммаДокумента) Тогда
		ПосчитатьСуммуТабличнойЧасти();
	КонецЕсли;
	//--АК LOBV	
	
	мДвиженияФинансовый = ЭтотОбъект.Движения.Финансовый;
	
	мДвиженияФинансовый.Записывать = Истина;
	мДвиженияФинансовый.Очистить();
	
	ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, ЭтотОбъект.Дата);
	
	мНДСвТомЧисле		= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	мТипТовараУпаковка 	= Перечисления.ТипыТоваров.Упаковка;
	
	СтруктураНастроек 		= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация, ЭтотОбъект.Дата);
	
	//+++АК KIRN 2018.05.14 
	ЭтоТилси = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(ЭтотОбъект.Организация);
	
	//+++АК Susk (Суслин К.В.) 2018.12.06 ИП-00020497	
	//получаю настройку в разрезе организации.
	//СтруктураНастроекВыручка_вн= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_ВыручкаТовары_вн, ЭтотОбъект.Дата);
	СтруктураНастроекВыручка_вн= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_ВыручкаТовары_вн, ЭтотОбъект.Дата, Организация);
	//---АК Susk (Суслин К.В.) 
	
	СтруктураНастроек_вн 		= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_вн, ЭтотОбъект.Дата);	
	//---АК KIRN 
	СтруктураНастроекВыручка= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_ВыручкаТовары, ЭтотОбъект.Дата);
	СтруктураНастроекСебест	= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_СебестоимостьТоваров, ЭтотОбъект.Дата);
	СтруктураНастроекНДС 	= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыРеализацияТоваров, ЭтотОбъект.Дата);
	//+++АК sils 22.11.2018 ЗА-00018918
	СтруктураНастроекВыручка_ОП = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_ВыручкаТовары_ОП, ЭтотОбъект.Дата);
	СтруктураНастроекСебест_ОП = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_СебестоимостьТоваров_ОП, ЭтотОбъект.Дата);
	//---АК
	
	ЕстьРасходныеОрдера = (ЭтотОбъект.РасходныеОрдера.Количество() > 0);
	
	//+++АК KIRN 2018.05.14  
	ЭтоОтгрузка = Истина;
	ЭтоСторонняяРозница = Неопределено; //+++АК SHEP 2018.10.04 ИП-00020060
	Для Каждого стрРО из ЭтотОбъект.РасходныеОрдера Цикл
		Если стрРО.РасходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку ТОгда
			ЭтоОтгрузка = ложь;
		КонецЕСли;
		//+++АК SHEP 2018.10.04 ИП-00020060
		Если ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стрРО.РасходныйОрдер, "Получатель")) Тогда
			Если ЭтоСторонняяРозница = Неопределено Тогда
				ЭтоСторонняяРозница = Истина;
			КонецЕсли;
		Иначе
			ЭтоСторонняяРозница = Ложь;
		КонецЕсли;
		//---АК SHEP 2018.10.04
	КонецЦикла;
	//---АК KIRN 
	
	
	ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект.Дата);
	
	//+++АК POZM 2018.08.30 ИП-00019521 
	Сч90_4 = ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	Сч90_5 = ПланыСчетов.Финансовый.ВыручкаПрочая;
	РозничнаяВыручка = Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	//---АК POZM 
	
	//+++АК KIRN 2018.05.14 ИП-00018596 
	//временно отключаю проверку
	//Если ЭтоТилси и ЕстьРасходныеОрдера и ЭтоОтгрузка ТОгда
	//+++АК SHEP 2018.10.04 ИП-00020060
	//Если ЭтоТилси ТОгда
	Если ЭтоСторонняяРозница = Истина Тогда
	//---АК SHEP 2018.10.04
		Если ЗначениеЗаполнено(СтруктураНастроекВыручка_вн) и ЗначениеЗаполнено(СтруктураНастроек_вн) Тогда
			тзТовары = ЭтотОбъект.Товары.Выгрузить();
			//+++АК POZM 2018.08.29 ИП-00019521 
			Если НЕ ЭтотОбъект.ПродажиКурьеров Тогда
			//---АК POZM 
				ДЛя Каждого ТекСтрокаТовары из тзТовары Цикл
					ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
					ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
					
					ПроводкаСебестоимость.СчетДт = СтруктураНастроек_вн.Счет;
					ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= ЭтотОбъект.EDI_ТочкаДоставки;
					ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек_вн.СтатьяДоходовРасходов;
					ПроводкаСебестоимость.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек_вн.ЦФО), СтруктураНастроек_вн.ЦФО, ЦФО);
					
					ПроводкаСебестоимость.Содержание		= "Себестоимость оптовых продаж";
					
					ПроводкаСебестоимость.СчетКт 							= ТекСтрокаТовары.СчетУчета;
					Если ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.Товары Тогда
						ПроводкаСебестоимость.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
						ПроводкаСебестоимость.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
						ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек_вн.СтатьяДвиженияТоваров;
					ИначеЕсли ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
						ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаСебестоимость.СубконтоКт.Склады					= ЭтотОбъект.Склад;
						ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= ?(ЗначениеЗаполнено(СтруктураНастроек_вн.ДопСтатьяДвиженияТоваров), СтруктураНастроек_вн.ДопСтатьяДвиженияТоваров, СтруктураНастроек_вн.СтатьяДвиженияТоваров);	
					Иначе
						ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;	
					КонецЕсли;	
					ПроводкаСебестоимость.КоличествоКт 						= ТекСтрокаТовары.Количество;
					
					СтрСебестоимость = ТабСебестоимость.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
					ПроводкаСебестоимость.Сумма = ТекСтрокаТовары.Количество * СтрСебестоимость.Себестоимость;
					ПроводкаСебестоимость.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
					
					
					Если ЭтотОбъект.Дата >= '20140601' Тогда
						//+++АК Susk (Суслин К.В.) 2018.05.23 б/н по просьбе Николая Чиркова					 
						//И ЕстьРасходныеОрдера Тогда  
						//---АК Susk (Суслин К.В.) 
						ОтразитьДвиженияПоИзлишкамТоваров(ТекСтрокаТовары,ЭтотОбъект.EDI_ТочкаДоставки);
						ОтразитьДвиженияПоНедостачеТоваров(ТекСтрокаТовары, ЭтотОбъект.EDI_ТочкаДоставки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			тзТовары.Свернуть("СтавкаНДС","Сумма, СуммаНДС");
			Для Каждого стрСтавкаНДС из тзТовары Цикл
				ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
				ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
				ПроводкаСебестоимость.Содержание	= "НДС";
				// Дт
				ПроводкаСебестоимость.СчетДт = СтруктураНастроекВыручка_вн.Счет;
				ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  			= ЭтотОбъект.EDI_ТочкаДоставки;
				ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка_вн.СтатьяДоходовРасходов;
				ПроводкаСебестоимость.СубконтоДт.ЦФО						= СтруктураНастроекВыручка_вн.ЦФО;
				
				// Кт
				ПроводкаСебестоимость.СчетКт 							= СтруктураНастроекНДС.Счет;
				ПроводкаСебестоимость.СубконтоКт.Организации  			= ЭтотОбъект.Организация;
				ПроводкаСебестоимость.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
				ПроводкаСебестоимость.СубконтоКт.СтавкиНДС			 	= стрСтавкаНДС.СтавкаНДС;
				
				ПроводкаСебестоимость.Сумма = стрСтавкаНДС.СуммаНДС;
			КонецЦикла;
			
			// Выручка
			Проводка = мДвиженияФинансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
				СуммаВсего = тзТОвары.Итог("Сумма");
			Иначе
				СуммаВсего = тзТОвары.Итог("Сумма") + тзТОвары.Итог("СуммаНДС");
			КонецЕсли;

			Проводка.Сумма 			= СуммаВсего;
			Проводка.Содержание		= "Выручка от оптовых продаж";

			// Дт
			Проводка.СчетДт = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
			Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
			
			// Кт
			Проводка.СчетКт = СтруктураНастроекВыручка_вн.Счет;
			Проводка.СубконтоКт.ТорговыеТочки  			= ЭтотОбъект.EDI_ТочкаДоставки;
			Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка_вн.СтатьяДоходовРасходов;
			Проводка.СубконтоКт.ЦФО						= СтруктураНастроекВыручка_вн.ЦФО;
		КонецЕСли;	
	//+++АК sils 26.11.2018 ЗА-00018918
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроекВыручка_ОП.Счет) и ЗначениеЗаполнено(СтруктураНастроекСебест_ОП.Счет) 
		и ЭтоТилси и не ЗначениеЗаполнено(ЭтотОбъект.EDI_ТочкаДоставки) и
		ЭтотОбъект.Дата >= Дата(2018, 11, 1) и не ЭтотОбъект.ПродажиКурьеров И ЕстьРасходныеОрдера Тогда
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			ТЗТоваров = ЭтотОбъект.Товары.Выгрузить();
			
			Для Каждого ТекСтрокаТовары Из ТЗТоваров Цикл
				Если Не ЭтотОбъект.ПродажиКурьеров И (НЕ ТекСтрокаТовары.Количество = 0)
					И ТекСтрокаТовары.Сумма = 0 Тогда
					Сообщить("В строке №" + Формат(ТекСтрокаТовары.НомерСтроки, "ЧГ=") + " не указана сумма!");
					Отказ = Истина;
					Продолжить;
				КонецЕсли;
				Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма;
				Иначе
					СуммаВсего = ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаТовары.СтруктурнаяЕдиница) Тогда
					ЦФОСтроки = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ТекСтрокаТовары.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
					Если Не ЗначениеЗаполнено(ЦФОСтроки) Тогда
						ЦФОСтроки = ЦФО;
					КонецЕсли;	
				Иначе	
					ЦФОСтроки = ЦФО;
				КонецЕсли;	
			
				// Себестоимость
				ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
				ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
				//ПроводкаСебестоимость.Организация	= Организация;
				ПроводкаСебестоимость.Содержание	= "Себестоимость товаров";
				
				// Дт
				ПроводкаСебестоимость.СчетДт = СтруктураНастроекСебест_ОП.Счет;
				ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекСебест_ОП.СтруктурнаяЕдиница;
				ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекСебест_ОП.СтатьяДоходовРасходов;
				ПроводкаСебестоимость.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроекСебест_ОП.ЦФО), СтруктураНастроекСебест_ОП.ЦФО, ЦФО);

				ПроводкаСебестоимость.СчетКт 							= ТекСтрокаТовары.СчетУчета;
				Если ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.Товары Тогда
					ПроводкаСебестоимость.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
					Если ЗначениеЗаполнено(ТекСтрокаТовары.СтруктурнаяЕдиница) Тогда
						ПроводкаСебестоимость.СубконтоКт.МестаХранения  	= ТекСтрокаТовары.СтруктурнаяЕдиница;
					КонецЕсли;	
					ПроводкаСебестоимость.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
					ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				ИначеЕсли ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
					ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;
					ПроводкаСебестоимость.СубконтоКт.Склады					= ЭтотОбъект.Склад;
					ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= ?(ЗначениеЗаполнено(СтруктураНастроек.ДопСтатьяДвиженияТоваров), СтруктураНастроек.ДопСтатьяДвиженияТоваров, СтруктураНастроек.СтатьяДвиженияТоваров);	
				Иначе
					ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;	
				КонецЕсли;	
				ПроводкаСебестоимость.КоличествоКт 						= ТекСтрокаТовары.Количество;
				
				СтрСебестоимость = ТабСебестоимость.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаСебестоимость.Сумма = ТекСтрокаТовары.Количество * СтрСебестоимость.Себестоимость;
				ПроводкаСебестоимость.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";

				ОтразитьДвиженияПоИзлишкамТоваров(ТекСтрокаТовары);
				ОтразитьДвиженияПоНедостачеТоваров(ТекСтрокаТовары);
			КонецЦикла;
			
			ТЗТоваров_Свернуто = ЭтотОбъект.Товары.Выгрузить();
			ТЗТоваров_Свернуто.Свернуть("СтавкаНДС","Сумма, СуммаНДС");
			Для Каждого ТекСтрокаТовары Из ТЗТоваров_Свернуто Цикл
				Если ТекСтрокаТовары.Сумма = 0 Тогда
					Сообщить("В строке №" + Формат(ТекСтрокаТовары.НомерСтроки, "ЧГ=") + " не указана сумма!");
					Отказ = Истина;
					Продолжить;
				КонецЕсли;
				Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма;
				Иначе
					СуммаВсего = ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;
				
				// Выручка
				Проводка = мДвиженияФинансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				//Проводка.Организация	= Организация;
				Проводка.Сумма 			= СуммаВсего;
				Проводка.Содержание		= "Выручка от оптовых продаж";
				
				// Дт
				Проводка.СчетДт = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
				Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
				
				// Кт
				Проводка.СчетКт = СтруктураНастроекВыручка_ОП.Счет;
				Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроекВыручка_ОП.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
				Проводка.СубконтоКт.ЦФО						= СтруктураНастроекВыручка.ЦФО;

				Если ЗначениеЗаполнено(СтруктураНастроекНДС.Счет) Тогда
					ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
					ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
					ПроводкаСебестоимость.Содержание	= "НДС";
					
					// Дт
					ПроводкаСебестоимость.СчетДт = СтруктураНастроекВыручка_ОП.Счет;
					ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекВыручка_ОП.СтруктурнаяЕдиница;
					ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
					ПроводкаСебестоимость.СубконтоДт.ЦФО					= СтруктураНастроекВыручка.ЦФО;
					
					// Кт
					ПроводкаСебестоимость.СчетКт 							= СтруктураНастроекНДС.Счет;
					ПроводкаСебестоимость.СубконтоКт.Организации  			= ЭтотОбъект.Организация;
					ПроводкаСебестоимость.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
					ПроводкаСебестоимость.СубконтоКт.СтавкиНДС			 	= ТекСтрокаТовары.СтавкаНДС;
					
					ПроводкаСебестоимость.Сумма = ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	//---АК
	Иначе
		//---АК KIRN 
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			//+++АК POZM 2018.08.29 ИП-00019521 
			ТЗТоваров = ЭтотОбъект.Товары.Выгрузить();
			Если ЭтотОбъект.ПродажиКурьеров Тогда
				ТЗТоваров.Свернуть("СтавкаНДС,СтруктурнаяЕдиница","Сумма,СуммаНДС");
			КонецЕсли;	
			//---АК POZM 
			Для Каждого ТекСтрокаТовары Из ТЗТоваров Цикл
				
				Если Не ЭтотОбъект.ПродажиКурьеров И (НЕ ТекСтрокаТовары.Количество = 0)
					И ТекСтрокаТовары.Сумма = 0 Тогда
					Сообщить("В строке №" + Формат(ТекСтрокаТовары.НомерСтроки, "ЧГ=") + " не указана сумма!");
					Отказ = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма;
				Иначе
					СуммаВсего = ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;
				
				//+++АК POZM 2018.08.29 ИП-00019521 
				Если ЗначениеЗаполнено(ТекСтрокаТовары.СтруктурнаяЕдиница) Тогда
					ЦФОСтроки = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ТекСтрокаТовары.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
					Если Не ЗначениеЗаполнено(ЦФОСтроки) Тогда
						ЦФОСтроки = ЦФО;
					КонецЕсли;	
				Иначе	
					ЦФОСтроки = ЦФО;
				КонецЕсли;	
				//---АК POZM 
				
				// Выручка
				Проводка = мДвиженияФинансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				//Проводка.Организация	= Организация;
				Проводка.Сумма 			= СуммаВсего;
				//Проводка.Содержание		= "Выручка";
				
				// Дт
				Проводка.СчетДт = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
				Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
				
				// Кт
				Если ЭтотОбъект.Дата >= Дата(2017, 1, 1)
					И ЕстьРасходныеОрдера Тогда
					Проводка.Содержание		= "Выручка от оптовых продаж";
					Проводка.СчетКт = СтруктураНастроекВыручка.Счет;
					
					Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроекВыручка.СтруктурнаяЕдиница;
					
					Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
					Проводка.СубконтоКт.ЦФО						= СтруктураНастроекВыручка.ЦФО;
				Иначе
					Проводка.Содержание		= "Выручка";
					//+++АК POZM 2018.08.30 ИП-00019521 
					Если ЭтотОбъект.ПродажиКурьеров Тогда
						Проводка.СчетКт = Сч90_4;
						Проводка.СубконтоКт.СтатьиДоходовРасходов	= РозничнаяВыручка;
						Проводка.СубконтоКт.ТорговыеТочки  			= ТекСтрокаТовары.СтруктурнаяЕдиница;
					Иначе	
					//---АК POZM 	
						Проводка.СчетКт = СтруктураНастроек.Счет;
						Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
						Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
					КонецЕсли;
						
					
					
					Проводка.СубконтоКт.ЦФО						= ЦФОСтроки;
					
				КонецЕсли;
				//Проводка.СчетКт = СтруктураНастроек.Счет;
				//Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
				//Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				//Проводка.СубконтоКт.ЦФО						= ЦФО;
				
				//+++АК POZM 2018.08.29 ИП-00019521 
				Если Не ЭтотОбъект.ПродажиКурьеров Тогда
				//---АК POZM 
					// Себестоимость
					ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
					ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
					//ПроводкаСебестоимость.Организация	= Организация;
					ПроводкаСебестоимость.Содержание	= "Себестоимость товаров";
					
					// Дт
					Если ЭтотОбъект.Дата >= Дата(2017, 1, 1)
						И ЕстьРасходныеОрдера Тогда
						ПроводкаСебестоимость.СчетДт = СтруктураНастроекСебест.Счет;
						ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекСебест.СтруктурнаяЕдиница;
						ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекСебест.СтатьяДоходовРасходов;
						ПроводкаСебестоимость.СубконтоДт.ЦФО					= СтруктураНастроекСебест.ЦФО;
					Иначе
						ПроводкаСебестоимость.СчетДт = СтруктураНастроек.Счет;
						ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
						ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
						ПроводкаСебестоимость.СубконтоДт.ЦФО					=  ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
					КонецЕсли;
					//ПроводкаСебестоимость.СчетДт = СтруктураНастроек.Счет;
					//ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
					//ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
					//ПроводкаСебестоимость.СубконтоДт.ЦФО					=  ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
					
					// Кт
					//Если ТекСтрокаТовары.Номенклатура.ТипТовара = мТипТовараУпаковка Тогда
					//	ПроводкаСебестоимость.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
					//	ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;
					//	ПроводкаСебестоимость.СубконтоКт.Склады					= ЭтотОбъект.Склад;
					//	ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					//	ПроводкаСебестоимость.КоличествоКт						= ТекСтрокаТовары.Количество;
					//Иначе
					//	ПроводкаСебестоимость.СчетКт 							= ПланыСчетов.Финансовый.Товары;
					//	ПроводкаСебестоимость.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
					//	ПроводкаСебестоимость.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
					//	ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					//	ПроводкаСебестоимость.КоличествоКт 						= ТекСтрокаТовары.Количество;
					//КонецЕсли;
					ПроводкаСебестоимость.СчетКт 							= ТекСтрокаТовары.СчетУчета;
					Если ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.Товары Тогда
						ПроводкаСебестоимость.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
						//+++АК POZM 2018.08.28 ИП-00019521 
						Если ЗначениеЗаполнено(ТекСтрокаТовары.СтруктурнаяЕдиница) Тогда
							ПроводкаСебестоимость.СубконтоКт.МестаХранения  	= ТекСтрокаТовары.СтруктурнаяЕдиница;
						КонецЕсли;	
						//---АК POZM 
						ПроводкаСебестоимость.СубконтоКт.Товары					= ТекСтрокаТовары.Номенклатура;
						ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли ПроводкаСебестоимость.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
						ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаСебестоимость.СубконтоКт.Склады					= ЭтотОбъект.Склад;
						ПроводкаСебестоимость.СубконтоКт.СтатьиТовародвижения 	= ?(ЗначениеЗаполнено(СтруктураНастроек.ДопСтатьяДвиженияТоваров), СтруктураНастроек.ДопСтатьяДвиженияТоваров, СтруктураНастроек.СтатьяДвиженияТоваров);	
					Иначе
						ПроводкаСебестоимость.СубконтоКт.Материалы	  			= ТекСтрокаТовары.Номенклатура;	
					КонецЕсли;	
					ПроводкаСебестоимость.КоличествоКт 						= ТекСтрокаТовары.Количество;
					
					СтрСебестоимость = ТабСебестоимость.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
					ПроводкаСебестоимость.Сумма = ТекСтрокаТовары.Количество * СтрСебестоимость.Себестоимость;
					ПроводкаСебестоимость.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				КонецЕсли;	
				//отражение себестоимости
				Если ЗначениеЗаполнено(СтруктураНастроекНДС.Счет) Тогда
					ПроводкаСебестоимость = мДвиженияФинансовый.Добавить();
					ПроводкаСебестоимость.Период 		= ЭтотОбъект.Дата;
					ПроводкаСебестоимость.Содержание	= "НДС";
					
					// Дт
					Если ЭтотОбъект.Дата >= Дата(2017, 1, 1)
						И ЕстьРасходныеОрдера Тогда
						ПроводкаСебестоимость.СчетДт = СтруктураНастроекСебест.Счет;
						ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекСебест.СтруктурнаяЕдиница;
						
						// АК koro ИП-00016414 Изменяем статью в проводке
						//ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекСебест.СтатьяДоходовРасходов;					
						ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
						
						ПроводкаСебестоимость.СубконтоДт.ЦФО					= СтруктураНастроекСебест.ЦФО;
					Иначе
						//+++АК POZM 2018.08.30 ИП-00019521 
						Если ЭтотОбъект.ПродажиКурьеров Тогда
							
							ПроводкаСебестоимость.СчетДт = Сч90_4;
							СтатьиДоходовРасходов	= РозничнаяВыручка;
							ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= РозничнаяВыручка;
							
						Иначе	

							ПроводкаСебестоимость.СчетДт = СтруктураНастроек.Счет;
							ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
							
						КонецЕсли;	
							ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= ?(ЗначениеЗаполнено(ТекСтрокаТовары.СтруктурнаяЕдиница),ТекСтрокаТовары.СтруктурнаяЕдиница,СтруктураНастроек.СтруктурнаяЕдиница);
							
							ПроводкаСебестоимость.СубконтоДт.ЦФО					=  ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФОСтроки);
					КонецЕсли;
					//ПроводкаСебестоимость.СчетДт = СтруктураНастроек.Счет;
					//ПроводкаСебестоимость.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
					//ПроводкаСебестоимость.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
					//ПроводкаСебестоимость.СубконтоДт.ЦФО					=  ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
					
					// Кт
					ПроводкаСебестоимость.СчетКт 							= СтруктураНастроекНДС.Счет;
					ПроводкаСебестоимость.СубконтоКт.Организации  			= ЭтотОбъект.Организация;
					ПроводкаСебестоимость.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
					ПроводкаСебестоимость.СубконтоКт.СтавкиНДС			 	= ТекСтрокаТовары.СтавкаНДС;
					
					ПроводкаСебестоимость.Сумма = ТекСтрокаТовары.СуммаНДС;
				КонецЕсли;	
				//+++АК POZM 2018.08.29 ИП-00019521 
				Если Не ЭтотОбъект.ПродажиКурьеров Тогда
				//---АК POZM 	
					Если ЭтотОбъект.Дата >= '20140601' Тогда
						//+++АК Susk (Суслин К.В.) 2018.05.23 б/н по просьбе Николая					 
						//И ЕстьРасходныеОрдера Тогда
						//---АК Susk (Суслин К.В.) 
						ОтразитьДвиженияПоИзлишкамТоваров(ТекСтрокаТовары);
						ОтразитьДвиженияПоНедостачеТоваров(ТекСтрокаТовары);
					КонецЕсли;	
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		//+++АК KIRN 2018.05.14 ИП-00018596 
	КонецЕСли;
	//---АК KIRN 

	
	//++AK LOBV 13.10.2016 Сформируем проводки для услуг
	СтруктураНастроекВыручка = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Реализация_ВыручкаУслуги, ЭтотОбъект.Дата);
	Для каждого ТекСтрокаУслуги Из ЭтотОбъект.Услуги цикл
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			Сообщить("Не заполнен счет учета расчетов с контрагентом!");
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		Если ТекСтрокаУслуги.Сумма = 0 Тогда
			Сообщить("В строке №" + Формат(ТекСтрокаУслуги.НомерСтроки, "ЧГ=") + " не указана сумма!");
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.СчетЗатрат) тогда
			Сообщить("В строке №" + Формат(ТекСтрокаУслуги.НомерСтроки, "ЧГ=") + " не указан счет затрат!");
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
			СуммаВсего = ТекСтрокаУслуги.Сумма;
		Иначе
			//+++АК LAGP 2018.02.09 Исангужина Гульзар нашла недоработку, поправлена по просьбе
			//СуммаВсего = ТекСтрокаУслуги.Сумма + ТекСтрокаТовары.СуммаНДС;
			СуммаВсего = ТекСтрокаУслуги.Сумма + ТекСтрокаУслуги.СуммаНДС;
			//---АК LAGP
		КонецЕсли;
		
		// Выручка
		Проводка = мДвиженияФинансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		//Проводка.Организация	= Организация;
		Проводка.Сумма 			= СуммаВсего;
		
		// Дт
		Проводка.СчетДт = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
		
		// Кт
		Если ЭтотОбъект.Дата >= Дата(2017, 1, 1) Тогда
			Проводка.Содержание		= "Доходы от оказания услуг";
			Проводка.СчетКт = СтруктураНастроекВыручка.Счет;
			Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроекВыручка.СтруктурнаяЕдиница;
			Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
			Проводка.СубконтоКт.ЦФО						= СтруктураНастроекВыручка.ЦФО;
		Иначе
			Проводка.Содержание		= "Выручка";
			Проводка.СчетКт = ТекСтрокаУслуги.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
		КонецЕсли;
		//Проводка.СчетКт = ТекСтрокаУслуги.СчетЗатрат;
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
		
		//НДС
		Если ЗначениеЗаполнено(СтруктураНастроекНДС.Счет) Тогда
			
			ПроводкаНДС = мДвиженияФинансовый.Добавить();
			ПроводкаНДС.Период 		= ЭтотОбъект.Дата;
			ПроводкаНДС.Содержание	= "НДС";
			
			// Дт
			Если ЭтотОбъект.Дата >= Дата(2017, 1, 1) Тогда
				ПроводкаНДС.СчетДт = СтруктураНастроекВыручка.Счет;
				ПроводкаНДС.СубконтоДт.ТорговыеТочки  			= СтруктураНастроекВыручка.СтруктурнаяЕдиница;
				ПроводкаНДС.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроекВыручка.СтатьяДоходовРасходов;
				ПроводкаНДС.СубконтоДт.ЦФО						= СтруктураНастроекВыручка.ЦФО;
			Иначе
				ПроводкаНДС.СчетДт = ТекСтрокаУслуги.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаУслуги.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, Проводка.СубконтоДт, 2, ТекСтрокаУслуги.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.Субконто3);
			КонецЕсли;
			//ПроводкаНДС.СчетДт = ТекСтрокаУслуги.СчетЗатрат;
			//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, ПроводкаНДС.СубконтоДт, 1, ТекСтрокаУслуги.Субконто1);
			//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, ПроводкаНДС.СубконтоДт, 2, ТекСтрокаУслуги.Субконто2);
			//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНДС.СчетДт, ПроводкаНДС.СубконтоДт, 3, ТекСтрокаУслуги.Субконто3);
			
			// Кт
			ПроводкаНДС.СчетКт = СтруктураНастроекНДС.Счет;
			ПроводкаНДС.СубконтоКт.Организации = ЭтотОбъект.Организация;
			ПроводкаНДС.СубконтоКт.ВидыНалогов = СтруктураНастроекНДС.ДопРеквизит;
			ПроводкаНДС.СубконтоКт.СтавкиНДС   = ТекСтрокаУслуги.СтавкаНДС;
			
			ПроводкаНДС.Сумма = ТекСтрокаУслуги.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	//--АК LOBV		
	////сдвинем границу последовательности себестоимости
	//ПроверитьИСместитьГраницу();	
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый, ЭтотОбъект.Организация);
	//+++ AK BARA ИП-00015673.000.00000001
	КонецЕсли;
	//--- AK BARA ИП-00015673.000.00000001

	// +++ AK BARA   16124
	Если Отказ = Ложь Тогда	
		СоздатьРСО(Отказ);	
	КонецЕсли;
	// --- AK BARA   16124
	
КонецПроцедуры

//+++ AK BARA ИП-00015673.000.00000001
Процедура ПроводкиПоИнвенаризации2()
	
	//+++АК POZM 2018.08.29 ИП-00019521 
	Если ЭтотОбъект.ПродажиКурьеров Тогда
		Возврат;
	КонецЕсли;	
	//---АК POZM 
	
	ОрганизацияВкусВилл = АК_УчетМСФО.ОрганизацияВкусВилл(Дата);
	ВидНалогаНДС = Справочники.ВидыНалогов.НайтиПоКоду("000000001");
	
	мДвиженияФинансовый = ЭтотОбъект.Движения.Финансовый;
	
	мДвиженияФинансовый.Записывать = Истина;
	мДвиженияФинансовый.Очистить();
		
	мНДСвТомЧисле		= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	мТипТовараУпаковка 	= Перечисления.ТипыТоваров.Упаковка;
	
	СтруктураНастроек 		= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиУпаковки, ЭтотОбъект.Дата);
	//mind переделал?? пока тут вообще непонятки 
	//СтруктураНастроек 		= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.РеализацияПоИнвентаризации, ЭтотОбъект.Дата);
	//+++АК sils 26.12.2017 ИП-00017531 
	// Необходимо поменять аналитику в проводках. А поскольку этот вид операции используется 
	// еще в ряде документов, то ставлю условие - если по "РеализацияПоИнвентаризации" что-то введено, то используем его.
	СтруктураНастроек1 = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.РеализацияПоИнвентаризации, ЭтотОбъект.Дата);
	Если ЗначениеЗаполнено(СтруктураНастроек1.Счет) Тогда
		СтруктураНастроек = СтруктураНастроек1;
	КонецЕсли;
	//---АК
	
	//ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктураНастроек.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
	
	//+++АК Susk (Суслин К.В.) 2018.05.03 ИП-00018428		
	//получаю себестоимость из регистра.
	ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект.Дата);
	ТабСебестоимость.Индексы.Добавить("Номенклатура");
	//---АК Susk (Суслин К.В.) 
	
	Для каждого Стр Из Товары Цикл
		
		Если ЭтотОбъект.ВариантРасчетаНДС = мНДСвТомЧисле Тогда
			СуммаВсего = Стр.Сумма;
		Иначе
			СуммаВсего = Стр.Сумма + Стр.СуммаНДС;
		КонецЕсли;

		//Выручка
		ПроводкаВыручка = мДвиженияФинансовый.Добавить();
		ПроводкаВыручка.Период = Дата;
		ПроводкаВыручка.Организация = Организация;
		ПроводкаВыручка.Содержание = "Выручка";
		ПроводкаВыручка.СчетДт =  ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
		ПроводкаВыручка.СубконтоДт.Организации = ОрганизацияВкусВилл;
		ПроводкаВыручка.СубконтоДт.Контрагенты = Контрагент;
		ПроводкаВыручка.СчетКт = ПланыСчетов.Финансовый.ВыручкаПрочая;
		ПроводкаВыручка.СубконтоКт.ТорговыеТочки = СтруктураНастроек.СтруктурнаяЕдиница;
		ПроводкаВыручка.СубконтоКт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
		ПроводкаВыручка.СубконтоКт.ЦФО = СтруктураНастроек.ЦФО;
		ПроводкаВыручка.Сумма = СуммаВсего;
		
		
		//Себестоимость товаров"
		ПроводкаСебестоймость = мДвиженияФинансовый.Добавить();
		ПроводкаСебестоймость.Период = Дата;	
		ПроводкаСебестоймость.Организация = Организация;
		ПроводкаСебестоймость.Содержание = "Себестоимость товаров";
		ПроводкаСебестоймость.СчетДт = ПланыСчетов.Финансовый.ВыручкаПрочая;
		ПроводкаСебестоймость.СубконтоДт.ТорговыеТочки = СтруктураНастроек.СтруктурнаяЕдиница;
		//+++АК sils 26.12.2017 ИП-00017531
		//ПроводкаСебестоймость.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
		Если ЗначениеЗаполнено(СтруктураНастроек.ДопРеквизит) и 
			ТипЗнч(СтруктураНастроек.ДопРеквизит) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
			ПроводкаСебестоймость.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.ДопРеквизит;
		Иначе
			ПроводкаСебестоймость.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
		КонецЕсли;
		//---АК
		ПроводкаСебестоймость.СубконтоДт.ЦФО = СтруктураНастроек.ЦФО;
		
		ПроводкаСебестоймость.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		ПроводкаСебестоймость.СубконтоКт.Материалы = Стр.Номенклатура;
		ПроводкаСебестоймость.СубконтоКт.Склады = Склад;
		ПроводкаСебестоймость.СубконтоКт.СтатьиТовародвижения = ?(ЗначениеЗаполнено(СтруктураНастроек.ДопСтатьяДвиженияТоваров), СтруктураНастроек.ДопСтатьяДвиженияТоваров, СтруктураНастроек.СтатьяДвиженияТоваров);
		ПроводкаСебестоймость.КоличествоКт = Стр.Количество;
		
		//+++АК Susk (Суслин К.В.) 2018.05.03 ИП-00018428
		//подменяю сумму в проводке от себестоимости, а не расчетную из последнего ПТУ, так нельзя делать.
		 
		//СтрокаТЗнЦен = ТаблицаЦен.Найти(Стр.Номенклатура, "Номенклатура");
		//Если СтрокаТЗнЦен <> Неопределено Тогда
		//	ПроводкаСебестоймость.Сумма = СтрокаТЗнЦен.ЦенаСНДС * Стр.Количество;
		//КонецЕсли;
		
		СтрСебестоимость = ТабСебестоимость.Найти(Стр.Номенклатура, "Номенклатура");
		ПроводкаСебестоймость.Сумма = Стр.Количество * СтрСебестоимость.Себестоимость;
		ПроводкаСебестоймость.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		//---АК Susk (Суслин К.В.) 
		
		//ндс
		ПроводкаНДС = мДвиженияФинансовый.Добавить();
		ПроводкаНДС.Период = Дата;
		ПроводкаНДС.Организация = Организация;
		ПроводкаНДС.Содержание = "НДС";
		ПроводкаНДС.СчетДт = ПланыСчетов.Финансовый.ВыручкаПрочая;
		ПроводкаНДС.СубконтоДт.ТорговыеТочки = СтруктураНастроек.СтруктурнаяЕдиница;
		//+++АК sils 26.12.2017 ИП-00017531
		//ПроводкаНДС.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
		Если ЗначениеЗаполнено(СтруктураНастроек.ДопРеквизит) и 
			ТипЗнч(СтруктураНастроек.ДопРеквизит) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
			ПроводкаНДС.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.ДопРеквизит;
		Иначе
			ПроводкаНДС.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
		КонецЕсли;
		//---АК
		ПроводкаНДС.СубконтоДт.ЦФО = СтруктураНастроек.ЦФО;
		
		ПроводкаНДС.СчетКт = ПланыСчетов.Финансовый.НалогиУН;
		ПроводкаНДС.СубконтоКт.Организации = ОрганизацияВкусВилл;
		ПроводкаНДС.СубконтоКт.ВидыНалогов= ВидНалогаНДС;
		//+++АК sils 26.12.2017 ИП-00017531
		//ПроводкаНДС.СубконтоКт.СтавкиНДС = СтруктураНастроек.СтатьяДвиженияТоваров;		
		Если ЗначениеЗаполнено(СтруктураНастроек.ДопРеквизит1) и 
			ТипЗнч(СтруктураНастроек.ДопРеквизит1) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
			ПроводкаНДС.СубконтоКт.СтавкиНДС = СтруктураНастроек.ДопРеквизит1;
		Иначе
			ПроводкаНДС.СубконтоКт.СтавкиНДС = СтруктураНастроек.СтатьяДвиженияТоваров;
		КонецЕсли;
		//---АК
		ПроводкаНДС.Сумма = Стр.СуммаНДС;
		
	КонецЦикла;
	
	
КонецПроцедуры
//--- AK BARA ИП-00015673.000.00000001

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//сдвинем границу последовательности себестоимости
	//ПроверитьИСместитьГраницу();
	  	// +++ AK BARA   16124
	Если Отказ = Ложь Тогда	
		СоздатьРСООтмена(Отказ);	
	КонецЕсли;
	// --- AK BARA   16124
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//+++АК KIRN 2018.04.23 ИП-00018209^01 ИП-00018209^02 ИП-00018697 ИП-00018663.000.00000002        
	ЕстьДопПраво = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетИзменятьДанныеРТУПослеОтправкиEDI, Ложь);
	ТолькоЧтоУстановилиФлагГотовКОбмену = ЭтотОбъект.EDI_ГотовКОбмену И (НЕ ЭтотОбъект.Ссылка.EDI_ГотовКОбмену);
	
	Если НЕ Модифицированность() Тогда
	ИначеЕсли ОбменДанными.Загрузка Тогда
	ИначеЕсли ДополнительныеСвойства.Свойство("НеПроверятьБлокировкуОбменомПоEDI") ТОгда
	ИначеЕсли ДополнительныеСвойства.Свойство("ЗаписьИзФормы") ТОгда
	ИначеЕсли ДополнительныеСвойства.Свойство("ОбновленаДатаЗавершенияПогрузки") Тогда
	ИначеЕсли ТолькоЧтоУстановилиФлагГотовКОбмену Тогда
	ИначеЕсли ЕстьДопПраво ТОгда
	Иначе
		Если ЗначениеЗаполнено(Ссылка) ТОгда
			Если Ссылка.EDI_ГотовКОбмену ТОгда
				Если ОбщиеПроцедуры.ЕстьДвиженияПоДОкументуВРегистре_КонтурEDI_СтатусыДокументов(Ссылка) ТОгда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено изменение РТУ с установленным флагом <EDI_ГотовКОбмену>");
					Возврат;
				КонецЕСли;
			КонецЕСли;
		КонецЕСли;
	КонецеСли;
	//---АК KIRN
	
	ПосчитатьСуммуТабличнойЧасти();
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВариантРасчетаНДС) Тогда
		ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	КонецЕсли;	
	
	//+++АК SaMi 2018.04.10 ИП-00018178 
	ПроверитьEDIТовары(Отказ);
	//---АК SaMi  2018.04.10
	
	//+++АК CISA 2018.10.17 ИП-00020148
	ЭтотОбъект.Движения.Финансовый.ДополнительныеСвойства.Вставить("ДатаДокумента", НачалоДня(Дата));
	//---АК CISA
	
	//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00019917.04 
	Если ЭтоНовый() Тогда
		мЭтоНовыйОбъект = Истина;
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

// +++ AK BARA   16124
Процедура СоздатьРСООтмена(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка 
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Основание = &Основание"; 
	
	Запрос.УстановитьПараметр("Основание", ЭтотОбъект.Ссылка);
	
	//+++АК LAGP 2018.07.17 ИП-00018785 Задавать вопрос при отмене проведения
	//Результат = Запрос.Выполнить();	
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	МассивРасходныхОрдеров = РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер");
	
	СделатьОтменуПроведения = Ложь;
	
	СписокПроведенных = "";
	Для каждого СтрокаМассиваОрдеров из МассивРасходныхОрдеров Цикл
		Если СтрокаМассиваОрдеров.Проведен Тогда
			СписокПроведенных = СписокПроведенных + СтрокаМассиваОрдеров + Символы.ПС;	
		КонецЕсли;	
	КонецЦикла;	
	
	
	#Если Клиент Тогда
	Если НЕ СписокПроведенных = "" Тогда
		ОповещениеПриОтменеПроведения = Новый ОписаниеОповещения("ЗадатьВопросНеМодально", ЭтотОбъект, Новый Структура("ПричинаВопроса, ОтменяемыеДокументы", "ОтменаПроведенияРСО", МассивРасходныхОрдеров));
		ПоказатьВопрос(ОповещениеПриОтменеПроведения, "В системе есть взаимосвязанные проведенные документы: " + Символы.ПС + СписокПроведенных + "Желаете снять их с проведения?", РежимДиалогаВопрос.ДаНет,,, "Отмена проведения " + Ссылка);	
	КонецЕсли;
	#КонецЕсли
		
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	ДокРСО = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//	УстановитьПривилегированныйРежим(Истина);
	//	ДокРСО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;
	//---АК LAGP
	
КонецПроцедуры

//+++АК LAGP 2018.07.17 ИП-00018785 Задавать вопрос при отмене проведения
#Если Клиент Тогда
Процедура ЗадатьВопросНеМодально(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ПричинаВопроса") Тогда
		Если Результат = КодВозвратаДиалога.Да И ДополнительныеПараметры.ПричинаВопроса = "ОтменаПроведенияРСО" Тогда
			Для каждого СтрокаДокументаРасходныОрдер Из ДополнительныеПараметры.ОтменяемыеДокументы Цикл
				Если СтрокаДокументаРасходныОрдер.Проведен Тогда
					ОбъектОтменяемого = СтрокаДокументаРасходныОрдер.ПолучитьОбъект();
					УстановитьПривилегированныйРежим(Истина);
					ОбъектОтменяемого.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры
#КонецЕсли
	
Процедура СоздатьРСО(Отказ)
	//Отказ = Ложь;
	//+++АК BELN 2018.07.12 ИП-00019060      
	Если РасходныеОрдера.Количество() Тогда
		Возврат;	
	КонецЕсли; 
	//---АК BELN 2018.07.12 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	СделатьОтменуПроведения = Ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокРСО = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СделатьОтменуПроведения = Истина;
		//+++АК BELN 2018.07.12 ИП-00019060      
		Если ДокРСО.ПометкаУдаления Тогда
			СообщениеТекст="Для этой реализации уже существует помеченный на удаление &РО. Снимите пометку удаления и повторите попытку проведения!";
			Сообщить(Нстр("ru = '"+СтрЗаменить(СообщениеТекст,"&РО",Строка(ВыборкаДетальныеЗаписи.Ссылка))+"'"));
		    Отказ=Истина;
			Возврат;	

		КонецЕсли; 
		//---АК BELN 2018.07.12 
		//ДокРСО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ДокРСО = Документы.РасходныйОрдерСклад.СоздатьДокумент();
	КонецЕсли;;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
 	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура,
	|	ВТ.Номенклатура.ТипТовара КАК ТипТовара
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Номенклатура.ТипТовара <> &НоменклатураТипТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура,
	|	ВТ.Номенклатура.ТипТовара КАК ТипТовара
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Номенклатура.ТипТовара = &НоменклатураТипТовара";
	
	Запрос.УстановитьПараметр("НоменклатураТипТовара", Перечисления.ТипыТоваров.Упаковка);
	//Запрос.УстановитьПараметр("ТоварыРТУ", Товары.ВыгрузитьКолонки("Номенклатура"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ПакЗапросов = Запрос.ВыполнитьПакет();
	Если ПакЗапросов[2].Пустой() Тогда 
		Возврат;
		Иначе
		Если ПакЗапросов[1].Пустой() = Ложь   Тогда 
				Отказ = Истина;
			Сообщить("Имеются товары с видом товара отличающися от упаковки.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Склад.Пустая() или Склад.Контрагент.Пустая() или  Склад.Контрагент <> Контрагент Тогда 
		Отказ = Истина;  
	Сообщить("Склад контрагентеа и склад в документе отличаются");
		Возврат;
	КонецЕсли;
	
	ЕСли СделатьОтменуПроведения Тогда 
		УстановитьПривилегированныйРежим(Истина);
		ДокРСО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ДокРСО.Организация= ЭтотОбъект.Организация;
	ДокРСО.Дата= ЭтотОбъект.Дата;
	ДокРСО.Склад= ЭтотОбъект.Склад;
	ДокРСО.Основание = ЭтотОбъект.Ссылка;
	ДокРСО.ВидОперации= Перечисления.ВидыОперацийРасходСкладскойУчет.Реализация;
	ДокРСО.Получатель= ЭтотОбъект.Склад.Контрагент;
	ДокРСО.Статус= Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	
	ДокРСО.Товары.Очистить();
	Для Каждого Стр Из ЭтотОбъект.Товары Цикл
		
		НовСтр=ДокРСО.Товары.Добавить();
		НовСтр.Номенклатура=Стр.Номенклатура;
		//НовСтр.Характеристика=Стр.Характеристика;
		НовСтр.ЕдиницаИзмерения=Стр.ЕдиницаИзмерения;
		Если ЗначениеЗаполнено(НовСтр.ЕдиницаИзмерения) Тогда		
			НовСтр.ЕдиницаИзмерения = Стр.Номенклатура.ЕдиницаХраненияОстатков ;		
		КонецЕсли;
		НовСтр.Количество=Стр.Количество;
	КонецЦикла;
	
	Попытка
		ДокРСО.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокРСО.Товары.Очистить();
		ДокРСО.Записать(РежимЗаписиДокумента.Запись);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры
// --- AK BARA   16124


Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.РасходныеОрдера.Очистить();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		СтрокаТЧ.ПоРасходнымОрдерам = 0;
	КонецЦикла;
	
	//+++АК SaMi 2018.04.04 ИП-00018178 
	EDI_ТочкаДоставки = Неопределено;
	EDI_Товары.Очистить();
	EDI_ГотовКОбмену = Ложь;
	//---АК SaMi  2018.04.04 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйОрдерСклад")Тогда
		
		//+++АК SHEP 2018.10.08 ИП-00020060: создаём через общую процедуру
		МассивРТУ = ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения),, ЭтотОбъект);
		Если МассивРТУ.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			Для Каждого мРТУ Из МассивРТУ Цикл
				Сообщить("Уже есть РТУ: " + мРТУ);
			КонецЦикла;
		КонецЕсли;
		
		// закомментировал, перенёс всё в ЗаполнитьПоРасходномуОрдеру(ДанныеЗаполнения)
		//ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;		
		//
		////+++АК LAGP 2018.05.13 ИП-00018465 Учет расчетов с ТТПерекресток.
		////ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Получатель;	
		//Если ТипЗнч(ДанныеЗаполнения.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") ТОгда
		//	ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Получатель.КонтрагентСтороннейРозницы;		
		//	ЭтотОбъект.ДоговорКонтрагента 	= Обработки.МаршрутныеЛисты.ПолучитьДоговорКонтрагентаСтороннейРозницы(ЭтотОбъект.Контрагент, ДанныеЗаполнения.Получатель, ДанныеЗаполнения.Организация, ТекущаяДата()); 	
		//Иначе
		//	ЭтотОбъект.Контрагент 		= ДанныеЗаполнения.Получатель;
		//КонецЕсли;	
		////---АК LAGP
		//
		//ЭтотОбъект.Склад				= ДанныеЗаполнения.Склад;
		//ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.Склад.Владелец;
		//ЭтотОбъект.ВариантРасчетаНДС	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		//
		//ЭтотОбъект.РасходныеОрдера.Очистить();
		//НовСтрОрдер = ЭтотОбъект.РасходныеОрдера.Добавить();
		//НовСтрОрдер.РасходныйОрдер = ДанныеЗаполнения;
		//
		//ЗаполнитьТоварыПоРасходномуОрдеру(ДанныеЗаполнения);			
		
		//---АК SHEP 2018.10.08
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	////mind заблокируем таблицу
	//ДокМетаданные = Метаданные();
	//Блокировка = Новый БлокировкаДанных();
	//ЭлементБлокировка = Блокировка.Добавить();
	//ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
	//ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировка.УстановитьЗначение("Вид", ДокМетаданные.Имя);
	//ЭлементБлокировка.УстановитьЗначение("Организация", Организация);
	//ЭлементБлокировка.УстановитьЗначение("Период", Дата);
	//Блокировка.Заблокировать();
	//
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Вид", ДокМетаданные.Имя);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	НомераДокументов.Номер,
	//               |	НомераДокументов.Организация.Префикс КАК Префикс
	//               |ИЗ
	//               |	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
	//               |ГДЕ
	//               |	НомераДокументов.Период = &Период
	//               |	И НомераДокументов.Вид = &Вид
	//               |	И НомераДокументов.Организация = &Организация";
	//			   
	//Выборка = Запрос.Выполнить().Выбрать();
	//СтандартнаяОбработка = Ложь;
	//Если Выборка.Следующий() Тогда
	//	МаксНомер = Выборка.Номер + 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
	//		Номер = СокрЛП(Выборка.Префикс) + Сред(Номер, СтрДлина(Выборка.Префикс) + 1);
	//	КонецЕсли;
	//Иначе
	//	МаксНомер = 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Организация.Префикс) Тогда
	//		Номер = СокрЛП(Организация.Префикс) + Сред(Номер, СтрДлина(Организация.Префикс) + 1);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
	//Запись.Период = НачалоГода(Дата);
	//Запись.Вид = ДокМетаданные.Имя;
	//Запись.Организация = Организация;
	//Запись.Номер = МаксНомер;
	//Запись.Записать();
	
КонецПроцедуры

//+++АК BARA ИП-00017657 2018.01.22 
Функция  СчетНоОплату(СсылкаНаДокумент) Экспорт

		Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента = """"
	|			ТОГДА РеализацияТоваровУслуг.Номер
	|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоДокумента
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РеализацияТоваровУслуг.Дата
	|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Организация КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Контрагент.ИНН КАК ИНН,
	|	РеализацияТоваровУслуг.Контрагент.КПП КАК КПП,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк КАК БАНК,
	|	РеализацияТоваровУслуг.ВариантРасчетаНДС,
	|	РеализацияТоваровУслуг.Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

		// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	

	ПараметрыНомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ПараметрыДатаДокумента  = Формат(Шапка.ДатаДокумента,"ДЛФ=DD");
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
			"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
			+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);   //
	КонецЕсли;
	
	ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике); //
	ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);

	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.РеализацияТоваровУслуг.ПолучитьМакет("СчетЗаказ");
	// Заголовок   Заголовок  Покупатель
	ГрузополучательНомерСчета = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "НомерСчета");
	ГрузополучательБанк = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "Банк");
	ГрузополучательБИК = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "БИК");
	ГрузополучательКоррСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КоррСчет");	
	
	Область = Макет.ПолучитьОбласть("ЗаголовокСчета");
	Область.Параметры.ИННПолучателя = Шапка.ИНН;
	Область.Параметры.КПППолучателя =  Шапка.КПП;
	Область.Параметры.БанкПолучателяПредставление =  ГрузополучательБанк;
	Область.Параметры.БИКБанкаПолучателя =  ГрузополучательБИК;
	Область.Параметры.СчетБанкаПолучателяПредставление =  ГрузополучательКоррСчет;
	Область.Параметры.СчетПолучателяПредставление =  ГрузополучательНомерСчета;
	Область.Параметры.ПредставлениеПолучателя = ПредставлениеПлательщика;

	//ИННПолучателя КПППолучателя БанкПолучателяПредставление БИКБанкаПолучателя СчетБанкаПолучателяПредставление СчетПолучателяПредставление
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Счет на оплату № "+ПараметрыНомерДокумента+" от "+ПараметрыДатаДокумента+" г.";																																																														
	ТабДок.Вывести(Область);
	
	
	
	
	Область = Макет.ПолучитьОбласть("Поставщик");
	Область.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Покупатель");
	Область.Параметры.ПредставлениеПокупателя = ПредставлениеПлательщика;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(Область);
	
	
	ОбластьТовары = Макет.ПолучитьОбласть("Строка");
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		ОбластьТовары.Параметры.Заполнить(ТекСтрокаТовары);
		ОбластьТовары.Параметры.Товар = ТекСтрокаТовары.Номенклатура;
		ТабДок.Вывести(ОбластьТовары);
	КонецЦикла;

	
	Область = Макет.ПолучитьОбласть("Итого");
	Область.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаДокумента);

	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ИтогоНДС");
	СуммаНДС = Товары.Итог("СуммаНДС");
	Если СуммаНДС <> 0 Тогда
		Область.Параметры.НДС = ?(Шапка.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле, "В том числе НДС:", "Сумма НДС:");
		Область.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		Область.Параметры.НДС = "Без налога (НДС)";
		Область.Параметры.ВсегоНДС = "-";
	КонецЕсли;

	ТабДок.Вывести(Область);
	Область = Макет.ПолучитьОбласть("ИтогоКОплате");
	Область.Параметры.ИтогоКОплате = ОбщегоНазначения.ФорматСумм(СуммаДокумента);
	ТабДок.Вывести(Область);
	
	ШапкаВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	
	Область = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаДокумента + ?(Шапка.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле, 0, СуммаНДС);
	Область.Параметры.ИтоговаяСтрока = "Всего наименований " + Товары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ШапкаВалютаДокумента);
	Область.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, ШапкаВалютаДокумента);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПодвалСчета");
	Область.Параметры.ФИОРуководителя = Руководитель;
	Область.Параметры.ФИОБухгалтера   = Бухгалтер;	
	ТабДок.Вывести(Область);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();

	Возврат  ТабДок;
КонецФункции

//+++АК BARA ИП-00017657 2018.01.22 
Функция  ПечатьУниверсальныйПередаточныйДокумент(СсылкаНаДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента = """"
	|			ТОГДА РеализацияТоваровУслуг.Номер
	|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоДокумента
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РеализацияТоваровУслуг.Дата
	|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	//+++АК sils 13.07.2018 ИП-00019258
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры = """"
	|			ТОГДА РеализацияТоваровУслуг.Номер
	|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоСчетаФактуры
	|	КОНЕЦ КАК НомерСФ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РеализацияТоваровУслуг.Дата
	|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоСчетаФактуры
	|	КОНЕЦ КАК ДатаСФ,
	//---АК
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Контрагент.ИНН КАК КонтрагентИНН,
	|	РеализацияТоваровУслуг.Контрагент.КПП КАК КонтрагентКПП,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет КАК КонтрагентОсновнойБанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойБанковскийСчет.Банк КАК КонтрагентБАНК,
	|	РеализацияТоваровУслуг.ВариантРасчетаНДС,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация.ИНН,
	|	РеализацияТоваровУслуг.Организация.КПП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	

	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	
	ПараметрыНомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ПараметрыДатаДокумента  = Формат(Шапка.ДатаДокумента,"ДЛФ=DD");
	
	ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ШапкаВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;


	ГрузополучательНомерСчета = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета");
	ГрузополучательБанк = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "Банк");
	ГрузополучательБИК = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "БИК");
	ГрузополучательКоррСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КоррСчет");	
	
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.РеализацияТоваровУслуг.ПолучитьМакет("УниверсальныйПередаточныйДокумент981");
	
	Область = Макет.ПолучитьОбласть("Шапка");

	ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм");
	АдресПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны");
	ИННПоставщика =  ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь);
	КПППоставщика =  ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП", Ложь);
	ПредставлениеГрузоотправителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны");
	ПредставлениеПокупателя  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм");
	ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны");
	
	Область.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	Область.Параметры.АдресПоставщика = АдресПоставщика;
	Область.Параметры.ИННПоставщика = ИННПоставщика + ?(ЗначениеЗаполнено(КПППоставщика), "/", "") + КПППоставщика;
	Область.Параметры.ПредставлениеГрузоотправителя = "он же";
	Область.Параметры.ПредставлениеГрузополучателя = ПредставлениеПокупателя + "," + ПредставлениеГрузополучателя;
	
	//+++АК Susk (Суслин К.В.) 2018.10.19 ИП-00020101
	Область.Параметры.СтатусУПД = ?(ЗначениеЗаполнено(НомерИсходящегоСчетаФактуры), "1", "2");
	Область.Параметры.НомерИсправления = "--"; 
	Область.Параметры.ДатаИсправления = "--";
	Область.Параметры.ПоДокументу = "   от";
	Область.Параметры.Валюта = "Российский рубль, 643";
	//---АК Susk (Суслин К.В.) 
	
	//+++АК sils 13.07.2018 ИП-00019258
	ПараметрыНомерСФ = ПолучитьНомерСФНаПечать(Шапка);
	ПараметрыДатаСФ  = Формат(Шапка.ДатаСФ,"ДЛФ=DD");
	Область.Параметры.Номер = ПараметрыНомерСФ;
	Область.Параметры.Дата = ПараметрыДатаСФ;
	//---АК 	
	
	АдресПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны");
	ИННПокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
	КПППокупателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП", Ложь);
	Область.Параметры.ПредставлениеПокупателя = ПредставлениеПокупателя;
	Область.Параметры.АдресПокупателя = АдресПокупателя;
	Область.Параметры.ИННПокупателя = ИННПокупателя + ?(ЗначениеЗаполнено(КПППокупателя), "/", "") + КПППокупателя;
	ТабДок.Вывести(Область);

	//+++АК Susk (Суслин К.В.) 2018.10.19 ИП-00020101
	Область = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
	ТабДок.Вывести(Область);
	//---АК Susk (Суслин К.В.) 
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДок.Вывести(ОбластьМакетаЗаголовокТаблицы); 
	ОбластьТовары = Макет.ПолучитьОбласть("Строка");
	
	//susk - немного модифицировал, добавил доп. поля
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	|	КОНЕЦ КАК Стоимость,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	КлассификаторЕдиницИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	""без акциза"" КАК Акциз,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Всего,
	|	""--"" КАК СтранаПроисхожденияКод,
	|	""--"" КАК ПредставлениеСтраны,
	|	""--"" КАК ПредставлениеГТД,
	|	""--"" КАК ТоварКодТНВЭД
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|			ПО ЕдиницыИзмерения.ЕдиницаПоКлассификатору = КлассификаторЕдиницИзмерения.Ссылка
	|		ПО РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	//--
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
	ИтогоСтоимость = 0;
	ИтогоСуммаНДС = 0;
	ИтогоВсего = 0;
	СчетчикСтрок = 0;
	КоличествоСтрок = Выборка.Количество();
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	КоличествоСтраниц = 1;
	//---АК Susk (Суслин К.В.) 
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьТовары.Параметры.Заполнить(Выборка);
		ОбластьТовары.Параметры.ТоварНаименование = Выборка.Наименование;				
		ОбластьТовары.Параметры.Цена = ?(Выборка.Количество = 0, 0, Формат(Выборка.Стоимость / Выборка.Количество, "ЧЦ=15; ЧДЦ=2"));
		
		//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101		
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьТовары);
		Если СчетчикСтрок = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);			
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КоличествоСтраниц = КоличествоСтраниц + 1;
				
				ОбластьШапкаСледСтраницы = Макет.ПолучитьОбласть("НумерацияЛистов");
				ОбластьШапкаСледСтраницы.Параметры.Номер = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "Универсальный передаточный документ");
				ОбластьШапкаСледСтраницы.Параметры.НомерЛиста = КоличествоСтраниц;
				ТабДок.Вывести(ОбластьШапкаСледСтраницы);
				
				ТабДок.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		ТабДок.Вывести(ОбластьТовары);
		
		//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
		ИтогоСтоимость = ИтогоСтоимость + Выборка.Стоимость;
		ИтогоСуммаНДС = ИтогоСуммаНДС + Выборка.СуммаНДС;
		ИтогоВсего = ИтогоВсего + Выборка.Всего;
		//---АК Susk (Суслин К.В.) 
		
	КонецЦикла;
	
	
	//Область = Макет.ПолучитьОбласть("Строка");
	//ТабДок.Вывести(Область); 	
	
	//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
	ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ИтогоСтоимость;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ИтогоВсего;
	//---АК Susk (Суслин К.В.) 	
	
	ТабДок.Вывести(ОбластьМакетаИтого);	
		
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя   = Руководитель;
	ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера   = Бухгалтер;
	
	//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначения.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
			
	ОбластьМакетаПодвал.Параметры.КоличествоЛистов = КоличествоЛистов;	
	//---АК Susk (Суслин К.В.) 
	
	ТабДок.Вывести(ОбластьМакетаПодвал);
	
	ОбластьМакетаПодвалНакладной.Параметры.ДатаОтгрузкиПередачи = Формат(СсылкаНаДокумент.Дата,"ДЛФ=DD");
	ОбластьМакетаПодвалНакладной.Параметры.ПредставлениеОрганизации = ПредставлениеПоставщика;
	ОбластьМакетаПодвалНакладной.Параметры.ПредставлениеКонтрагента = ПредставлениеПокупателя;
	ОбластьМакетаПодвалНакладной.Параметры.Руководитель   = Руководитель;
	
	//+++АК Susk (Суслин К.В.) 2018.10.11 ИП-00020101
	ОбластьМакетаПодвалНакладной.Параметры.Основание = Строка(Шапка.ДоговорКонтрагента);
	ОбластьМакетаПодвалНакладной.Параметры.ПредставлениеОрганизации = ПредставлениеПоставщика + ", ИНН/КПП " + ИННПоставщика + "/" + КПППоставщика; 
	ОбластьМакетаПодвалНакладной.Параметры.ПредставлениеКонтрагента = ПредставлениеПокупателя + ", ИНН/КПП " + ИННПокупателя + "/" + КПППокупателя;
	ОбластьМакетаПодвалНакладной.Параметры.ФИООтветственного = Руководитель;
	//---АК Susk (Суслин К.В.) 
	
	ТабДок.Вывести(ОбластьМакетаПодвалНакладной);		
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;

	Возврат  ТабДок;
КонецФункции

//+++АК SaMi 2018.04.10 ИП-00018178 
Процедура ПроверитьEDIТовары(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ НЕ Модифицированность() ИЛИ ПометкаУдаления ИЛИ НЕ ЗначениеЗаполнено(EDI_ТочкаДоставки) ИЛИ НЕ EDI_ГотовКОбмену Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаСравнения = EDI_Товары.Выгрузить();
	
	Для Каждого Строка Из  Товары Цикл
		НоваяСтрока = ТаблицаСравнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Количество = -НоваяСтрока.Количество;
		НоваяСтрока.Сумма = -НоваяСтрока.Сумма;
		НоваяСтрока.СуммаНДС = -НоваяСтрока.СуммаНДС;
	КонецЦикла;  
	
	ТаблицаСравнения.Свернуть("Номенклатура, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС");
	
	СтрокиБезРасхождений = ТаблицаСравнения.НайтиСтроки(Новый Структура("Количество, Сумма, СуммаНДС", 0, 0, 0));
	
	Если СтрокиБезРасхождений.Количество() = ТаблицаСравнения.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначения.СообщитьОбОшибке("Обнаружены расхождения между табличными частями Товары и Товары (EDI) по следующим позициям:", Отказ);
	
	Для Каждого Строка Из ТаблицаСравнения Цикл
		Если СтрокиБезРасхождений.Найти(Строка) = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("<" + Строка.Номенклатура + ">, " + "<" + Строка.ЕдиницаИзмерения + "> (" + Строка.ЕдиницаИзмерения.Код + "). Цена: " + Формат(Строка.Цена, "ЧДЦ=2") + ". Ставка НДС: " + Строка.СтавкаНДС , Отказ);
		КонецЕсли; 
	КонецЦикла;   
	
КонецПроцедуры 
//---АК SaMi  2018.04.10 

//+++АК sils 13.07.2018 ИП-00019258
Функция ПолучитьНомерСФНаПечать(Документ, МассивПрефиксов = Неопределено) Экспорт
	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	//+++АК Susk (Суслин К.В.) 2018.10.16 б/н не надо так делать
	//Номер   = СокрЛП(Документ.НомерСФ);
	лНомер   = СокрЛП(Документ.НомерСФ);
	//---АК Susk (Суслин К.В.) 
	
	Префикс = "";
	
	//+++АК Susk (Суслин К.В.) 2018.10.16 нельзя называть переменные также, как реквизиты самого документа!
		
	//Если МассивПрефиксов = Неопределено Тогда
	//	Организация = Неопределено;
	//	Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса")
	//		ИЛИ ТипЗнч(Документ) = Тип("Структура") Тогда
	//		Организация = Документ.Организация;
	//	Иначе
	//		МетаданныеДокумента = Документ.Метаданные();

	//		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
	//			Организация = Документ.Организация;
	//		КонецЕсли;
	//	КонецЕсли;
	//	МассивПрефиксовДляОбхода = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация)
	//Иначе
	//	МассивПрефиксовДляОбхода = МассивПрефиксов;
	//КонецЕсли;
	
	Если МассивПрефиксов = Неопределено Тогда
		лОрганизация = Неопределено;
		Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса")
			ИЛИ ТипЗнч(Документ) = Тип("Структура") Тогда
			лОрганизация = Документ.Организация;
		Иначе
			МетаданныеДокумента = Документ.Метаданные();

			Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
				лОрганизация = Документ.Организация;
			КонецЕсли;
		КонецЕсли;
		МассивПрефиксовДляОбхода = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(лОрганизация)
	Иначе
		МассивПрефиксовДляОбхода = МассивПрефиксов;
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
		// удаление префикса из номера документа
		
		//+++АК Susk (Суслин К.В.) 2018.10.16 б/н		 
		
		//Если Найти(Номер, ТекущийПрефикс)=1 Тогда 		
		//	Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		//КонецЕсли;
		//
		//// так же, может остаться "минус" впереди
		//Если Лев(Номер, 1) = "-" Тогда
		//	Номер = Сред(Номер, 2);
		//КонецЕсли;
		//
		//// удаление ведущих нулей
		//Пока Лев(Номер, 1)="0" Цикл
		//	Номер = Сред(Номер, 2);
		//КонецЦикла;
		
		Если Найти(лНомер, ТекущийПрефикс)=1 Тогда 		
			лНомер = Сред(лНомер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(лНомер, 1) = "-" Тогда
			лНомер = Сред(лНомер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(лНомер, 1)="0" Цикл
			лНомер = Сред(лНомер, 2);
		КонецЦикла;
		//---АК Susk (Суслин К.В.) 
		
	КонецЦикла;

	Возврат лНомер;
КонецФункции // ПолучитьНомерНаПечать()

//+++АК sole 2018.07.30 ИП-00018320.05
Процедура СформироватьПроводкиТранспортныеУслуги(Отказ)
	
	Перем мДвижения, мДвижение;
		
	мДвижения = Движения.Финансовый;
	мДвижения.Очистить();
	мДвижения.Записывать = Истина;
	
	Если ЭтотОбъект.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоходыОтОказанияУслуг = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("10108");
	ВсеТорговыеТочки = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	ТранспортныеКомпании = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_101");
	Счёт621 = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	Счёт905 = ПланыСчетов.Финансовый.ВыручкаПрочая;
	Счёт682 = ПланыСчетов.Финансовый.НалогиУН;
	НДС = Справочники.ВидыНалогов.НайтиПоКоду("000000001");
	
	СтрокаУслуги = ЭтотОбъект.Услуги[0];
	
	мДвижение = мДвижения.Добавить();
	
	мДвижение.Период = ЭтотОбъект.Дата;
	мДвижение.Сумма = СтрокаУслуги.Сумма;
	мДвижение.Содержание = "Дополнительные транспортные услуги";
	
	мДвижение.СчетДт = Счёт621;
	мДвижение.СубконтоДт.Организации = ЭтотОбъект.Организация;
	мДвижение.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
	
	мДвижение.СчетКт = Счёт905;
	мДвижение.СубконтоКт.ТорговыеТочки = ВсеТорговыеТочки;
	мДвижение.СубконтоКт.СтатьиДоходовРасходов = ДоходыОтОказанияУслуг;
	мДвижение.СубконтоКт.ЦФО = ТранспортныеКомпании;
	
	//НДС
	мДвижение = мДвижения.Добавить();
	
	мДвижение.Период = ЭтотОбъект.Дата;
	мДвижение.Сумма = СтрокаУслуги.СуммаНДС;
	мДвижение.Содержание = "НДС";
	
	мДвижение.СчетДт = Счёт905; 
	мДвижение.СубконтоДт.ТорговыеТочки = ВсеТорговыеТочки;
	мДвижение.СубконтоДт.СтатьиДоходовРасходов = ДоходыОтОказанияУслуг;
	мДвижение.СубконтоДт.ЦФО = ТранспортныеКомпании;
	
	мДвижение.СчетКт = Счёт682;
	мДвижение.СубконтоКт.Организации = ЭтотОбъект.Организация;
	мДвижение.СубконтоКт.ВидыНалогов = НДС;
	мДвижение.СубконтоКт.СтавкиНДС = СтрокаУслуги.СтавкаНДС; 
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(мДвижения, ЭтотОбъект.Организация);
	
КонецПроцедуры

//shae 2018.08.07 ИП-00019236 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(ЭтотОбъект.Организация, ЭтотОбъект.Товары.Выгрузить(), Отказ);		

КонецПроцедуры

//+++АК luza 2018.08.23 ИП-00019074
Процедура ОтправитьПоЭДО(ТипДокумента) Экспорт	
	Отказ = Ложь;
	
	Если Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ!", Отказ);		
	КонецЕсли;	
	
	Если ЭтотОбъект.Модифицированность() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ!", Отказ);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.НомерИсходящегоСчетаФактуры) = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен номер исходящего счета фактуры!", Отказ);		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаИсходящегоСчетаФактуры) = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена дата исходящего счета фактуры!", Отказ);		
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЭДО_ОбщегоНазначения.ОтправитьДокументЭДО(ЭтотОбъект.Ссылка, ТипДокумента);
	
	Если Результат.ДокументОтправлен = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не был отправлен", Отказ);				
		ОбщегоНазначения.СообщитьОбОшибке(Результат.ТекстОшибки, Отказ);				
	КонецЕсли;	
	
КонецПроцедуры

//+++АК SHEP 2018.10.05 ИП-00020071: перенёс в модуль объекта
//+++АК KIRN 2018.04.17 ИП-00018209^01, 2018.07.22 ИП-00018929.000.00000002
Процедура ОбновитьЦеныБезНДС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.НомерСтроки,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.Коэффициент,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.СтавкаНДС КАК перечисление.СтавкиНДС) КАК СтавкаНДС,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.СчетУчета КАК ПланСчетов.Финансовый) КАК СчетУчета,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.СтатьяТовародвижения КАК Справочник.СтатьиТовародвижения) КАК СтатьяТовародвижения,
	               |	РеализацияТоваровУслугТовары.ПоРасходнымОрдерам,
	               |	ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	               |	ВЫРАЗИТЬ(&ВариантРасчетаНДС КАК Перечисление.ВариантыРасчетаНДС) КАК ВариантРасчетаНДС,
	               |	ВЫРАЗИТЬ(&Организация КАК Справочник.Организации) КАК Организация
	               |ПОМЕСТИТЬ втТЧ
	               |ИЗ
				   |	&тч КАК РеализацияТоваровУслугТовары
	               //|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               //|ГДЕ
	               //|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугEDI_Товары.НомерСтроки КАК НомерСтроки,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугEDI_Товары.СрокГодности,
	               |	РеализацияТоваровУслугEDI_Товары.Количество,
	               |	РеализацияТоваровУслугEDI_Товары.Цена,
	               |	РеализацияТоваровУслугEDI_Товары.Сумма,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.СтавкаНДС КАК перечисление.СтавкиНДС) КАК СтавкаНДС,
	               |	РеализацияТоваровУслугEDI_Товары.СуммаНДС,
	               |	РеализацияТоваровУслугEDI_Товары.КоличествоОтгружено,
	               |	РеализацияТоваровУслугEDI_Товары.СерийныйНомер,
				   |	ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
				   |	ВЫРАЗИТЬ(&ВариантРасчетаНДС КАК Перечисление.ВариантыРасчетаНДС) КАК ВариантРасчетаНДС,
				   |	ВЫРАЗИТЬ(&Организация КАК Справочник.Организации) КАК Организация
				   //|	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.Ссылка.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
				   //|	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.Ссылка.ВариантРасчетаНДС КАК Перечисление.ВариантыРасчетаНДС) КАК ВариантРасчетаНДС,
				   //|	ВЫРАЗИТЬ(РеализацияТоваровУслугEDI_Товары.Ссылка.Организация КАК Справочник.Организации) КАК Организация
	               |ПОМЕСТИТЬ втТЧ2
	               |ИЗ
				   |	&тч2 РеализацияТоваровУслугEDI_Товары
	               //|	Документ.РеализацияТоваровУслуг.EDI_Товары КАК РеализацияТоваровУслугEDI_Товары
	               //|ГДЕ
	               //|	РеализацияТоваровУслугEDI_Товары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныРеализацииСрезПоследних.Период КАК Период,
	               |	ЦеныРеализацииСрезПоследних.Номенклатура,
	               |	ЦеныРеализацииСрезПоследних.Характеристика,
	               |	ЦеныРеализацииСрезПоследних.ЕдиницаИзмерения,
	               |	ЦеныРеализацииСрезПоследних.Контрагент,
	               |	ВЫБОР
	               |		КОГДА ЦеныРеализацииСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет,
	               |	ЦеныРеализацииСрезПоследних.Цена КАК Цена,
	               |	ЦеныРеализацииСрезПоследних.БезНДС КАК БезНДС,
	               |	ЦеныРеализацииСрезПоследних.ЦенаБезНДС КАК ЦенаБезНДС
	               |ПОМЕСТИТЬ втЦены
	               |ИЗ
	               |	РегистрСведений.ЦеныРеализации.СрезПоследних(
	               |			&Период,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втТЧ.Номенклатура
	               |					ИЗ
	               |						втТЧ)
	               |				И Контрагент В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втТЧ.Контрагент
	               |					ИЗ
	               |						втТЧ
	               |			
	               |					ОБЪЕДИНИТЬ
	               |			
	               |					ВЫБРАТЬ
	               |						ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК ЦеныРеализацииСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЦены.Период КАК ПериодЦены,
	               |	втЦены.Приоритет КАК Приоритет,
	               |	втТЧ.НомерСтроки,
	               |	втТЧ.Номенклатура,
	               |	ЕСТЬNULL(втЦены.ЦенаБезНДС, 0) КАК ЦенаБезНДС,
	               |	ЕСТЬNULL(втЦены.БезНДС, 0) КАК БезНДС,
	               |	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |			ТОГДА 1.1
	               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |			ТОГДА 1.18
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК СтавкаНДС1,
	               |	ВЫБОР
	               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |			ТОГДА 0.1
	               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |			ТОГДА 0.18
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СтавкаНДС0,
	               |	втТЧ.ЕдиницаИзмерения,
	               |	втТЧ.Коэффициент,
	               |	втТЧ.Количество,
	               |	втТЧ.СтавкаНДС,
	               |	втТЧ.СчетУчета,
	               |	втТЧ.СтатьяТовародвижения,
	               |	втТЧ.ПоРасходнымОрдерам
	               |ПОМЕСТИТЬ втВсе
	               |ИЗ
	               |	втТЧ КАК втТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втТЧ.Номенклатура = втЦены.Номенклатура
	               |			И втТЧ.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЦены.Период КАК ПериодЦены,
	               |	втЦены.Приоритет КАК Приоритет,
	               |	втТЧ2.НомерСтроки,
	               |	втТЧ2.Номенклатура,
	               |	ЕСТЬNULL(втЦены.ЦенаБезНДС, 0) КАК ЦенаБезНДС,
	               |	ЕСТЬNULL(втЦены.БезНДС, 0) КАК БезНДС,
	               |	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |			ТОГДА 1.1
	               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |			ТОГДА 1.18
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК СтавкаНДС1,
	               |	ВЫБОР
	               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |			ТОГДА 0.1
	               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |			ТОГДА 0.18
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СтавкаНДС0,
	               |	втТЧ2.ЕдиницаИзмерения,
	               |	втТЧ2.Количество,
	               |	втТЧ2.СтавкаНДС,
	               |	втТЧ2.КоличествоОтгружено,
	               |	втТЧ2.СерийныйНомер,
	               |	втТЧ2.Номенклатура КАК Номенклатура1,
	               |	втТЧ2.НомерСтроки КАК НомерСтроки1,
	               |	втТЧ2.Характеристика,
	               |	втТЧ2.СрокГодности
	               |ПОМЕСТИТЬ втВсе2
	               |ИЗ
	               |	втТЧ2 КАК втТЧ2
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втТЧ2.Номенклатура = втЦены.Номенклатура
	               |			И втТЧ2.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	втВсе.ПериодЦены,
				   |	втВсе.Приоритет,
	               |	втВсе.НомерСтроки,
	               |	втВсе.Номенклатура,
	               |	втВсе.ЦенаБезНДС КАК ЦенаБезНДС,
	               |	ВЫБОР
	               |		КОГДА втВсе.БезНДС = ИСТИНА
	               |			ТОГДА втВсе.СтавкаНДС1 * втВсе.ЦенаБезНДС
	               |		ИНАЧЕ втВсе.Цена
	               |	КОНЕЦ КАК Цена,
	               |	ВЫБОР
	               |		КОГДА втВсе.БезНДС = ИСТИНА
	               |			ТОГДА втВсе.СтавкаНДС1 * втВсе.ЦенаБезНДС * втВсе.Количество
	               |		ИНАЧЕ втВсе.Цена * втВсе.Количество
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА втВсе.БезНДС = ИСТИНА
	               |			ТОГДА втВсе.ЦенаБезНДС * втВсе.Количество
	               |		ИНАЧЕ втВсе.Цена * втВсе.Количество - втВсе.Цена * втВсе.Количество * втВсе.СтавкаНДС0
	               |	КОНЕЦ КАК СуммаБезНДС,
	               |	ВЫБОР
	               |		КОГДА втВсе.БезНДС = ИСТИНА
	               |			ТОГДА втВсе.СтавкаНДС1 * втВсе.ЦенаБезНДС * втВсе.Количество - втВсе.ЦенаБезНДС * втВсе.Количество
	               |		ИНАЧЕ втВсе.Цена * втВсе.Количество / втВсе.СтавкаНДС1 / 10
	               |	КОНЕЦ КАК СуммаНДС,
	               |	втВсе.ЕдиницаИзмерения,
	               |	втВсе.Коэффициент,
	               |	втВсе.Количество,
	               |	втВсе.СтавкаНДС,
	               |	втВсе.СчетУчета,
	               |	втВсе.СтатьяТовародвижения,
	               |	втВсе.ПоРасходнымОрдерам
	               |ИЗ
	               |	втВсе КАК втВсе
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втВсе2.НомерСтроки,
				   |	втВсе2.Номенклатура,
				   |	втВсе2.ПериодЦены,
				   |	втВсе2.Приоритет,
	               |	втВсе2.ЦенаБезНДС КАК ЦенаБезНДС,
	               |	ВЫБОР
	               |		КОГДА втВсе2.БезНДС = ИСТИНА
	               |			ТОГДА втВсе2.СтавкаНДС1 * втВсе2.ЦенаБезНДС
	               |		ИНАЧЕ втВсе2.Цена
	               |	КОНЕЦ КАК Цена,
	               |	ВЫБОР
	               |		КОГДА втВсе2.БезНДС = ИСТИНА
	               |			ТОГДА втВсе2.СтавкаНДС1 * втВсе2.ЦенаБезНДС * втВсе2.Количество
	               |		ИНАЧЕ втВсе2.Цена * втВсе2.Количество
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА втВсе2.БезНДС = ИСТИНА
	               |			ТОГДА втВсе2.ЦенаБезНДС * втВсе2.Количество
	               |		ИНАЧЕ втВсе2.Цена * втВсе2.Количество - втВсе2.Цена * втВсе2.Количество * втВсе2.СтавкаНДС0
	               |	КОНЕЦ КАК СуммаБезНДС,
	               |	ВЫБОР
	               |		КОГДА втВсе2.БезНДС = ИСТИНА
	               |			ТОГДА втВсе2.СтавкаНДС1 * втВсе2.ЦенаБезНДС * втВсе2.Количество - втВсе2.ЦенаБезНДС * втВсе2.Количество
	               |		ИНАЧЕ втВсе2.Цена * втВсе2.Количество / втВсе2.СтавкаНДС1 / 10
	               |	КОНЕЦ КАК СуммаНДС,
	               |	втВсе2.ЕдиницаИзмерения,
	               |	втВсе2.Количество,
	               |	втВсе2.СтавкаНДС,
	               |	втВсе2.КоличествоОтгружено,
	               |	втВсе2.СерийныйНомер,
	               |	втВсе2.Номенклатура КАК Номенклатура1,
	               |	втВсе2.НомерСтроки КАК НомерСтроки1,
	               |	втВсе2.Характеристика,
	               |	втВсе2.СрокГодности
	               |ИЗ
	               |	втВсе2 КАК втВсе2";
	
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("тч",Товары.Выгрузить());
	Запрос.УстановитьПараметр("тч2",EDI_Товары.Выгрузить());
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВариантРасчетаНДС",ВариантРасчетаНДС);
	Результаты = Запрос.ВыполнитьПакет();
	тз1 = Результаты[Результаты.Количество()-2].Выгрузить();	
	тз2 = Результаты[Результаты.Количество()-1].Выгрузить();
	
	ДЛя Каждого Стр из Товары Цикл
		тзНом = тз1.Скопировать(Новый Структура("Номенклатура, ЕдиницаИзмерения",Стр.Номенклатура, Стр.ЕдиницаИзмерения));
		Если тзНом.Количество()>0 Тогда
			тзНом.Сортировать("Приоритет убыв, ПериодЦены убыв");
			ЗаполнитьЗначенияСвойств(Стр,тзНом[0]);
			//+++АК SHEP 2018.10.12 ИП-00020100: закомментировал и добавил расчёт по строке
			//Стр.Цена = Окр(Стр.Цена,2);
			Стр.Сумма = Окр(Стр.Сумма,2);
			//Стр.СуммаНДС = Окр(Стр.СуммаНДС,2);
			Стр.Цена = ?(Стр.Количество = 0, 0, Окр(Стр.Сумма/Стр.Количество,2));
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, ЭтотОбъект);
			//---АК SHEP 2018.10.12
		КонецЕСли;
	КонецЦикла;

	Для Каждого Стр из EDI_Товары Цикл 
		тзНом = тз2.Скопировать(Новый Структура("Номенклатура, ЕдиницаИзмерения",Стр.Номенклатура, Стр.ЕдиницаИзмерения));
		Если тзНом.Количество()>0 Тогда
			тзНом.Сортировать("Приоритет убыв, ПериодЦены убыв");
			ЗаполнитьЗначенияСвойств(Стр,тзНом[0]);
			//+++АК SHEP 2018.10.12 ИП-00020100: закомментировал и добавил расчёт по строке
			//Стр.Цена = Окр(Стр.Цена,2);
			Стр.Сумма = Окр(Стр.Сумма,2);
			//Стр.СуммаНДС = Окр(Стр.СуммаНДС,2);
			Стр.Цена = ?(Стр.Количество = 0, 0, Окр(Стр.Сумма/Стр.Количество,2));
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, ЭтотОбъект);
			//---АК SHEP 2018.10.12
		КонецЕСли;
	КонецЦикла;
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РеализацияТоваровУслугТовары.Ссылка,
	//               |	РеализацияТоваровУслугТовары.НомерСтроки,
	//               |	РеализацияТоваровУслугТовары.Номенклатура,
	//               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	//               |	РеализацияТоваровУслугТовары.Коэффициент,
	//               |	РеализацияТоваровУслугТовары.Количество,
	//               |	РеализацияТоваровУслугТовары.СтавкаНДС,
	//               |	РеализацияТоваровУслугТовары.СчетУчета,
	//               |	РеализацияТоваровУслугТовары.СтатьяТовародвижения,
	//               |	РеализацияТоваровУслугТовары.ПоРасходнымОрдерам,
	//               |	РеализацияТоваровУслугТовары.Ссылка.Контрагент
	//               |ПОМЕСТИТЬ втТЧ
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//               |ГДЕ
	//               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	РеализацияТоваровУслугEDI_Товары.НомерСтроки КАК НомерСтроки,
	//               |	РеализацияТоваровУслугEDI_Товары.Номенклатура КАК Номенклатура,
	//               |	РеализацияТоваровУслугEDI_Товары.Характеристика КАК Характеристика,
	//               |	РеализацияТоваровУслугEDI_Товары.ЕдиницаИзмерения,
	//               |	РеализацияТоваровУслугEDI_Товары.СрокГодности,
	//               |	РеализацияТоваровУслугEDI_Товары.Количество,
	//               |	РеализацияТоваровУслугEDI_Товары.Цена,
	//               |	РеализацияТоваровУслугEDI_Товары.Сумма,
	//               |	РеализацияТоваровУслугEDI_Товары.СтавкаНДС,
	//               |	РеализацияТоваровУслугEDI_Товары.СуммаНДС,
	//               |	РеализацияТоваровУслугEDI_Товары.КоличествоОтгружено,
	//               |	РеализацияТоваровУслугEDI_Товары.СерийныйНомер,
	//               |	РеализацияТоваровУслугEDI_Товары.Ссылка.Контрагент
	//               |ПОМЕСТИТЬ втТЧ2
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг.EDI_Товары КАК РеализацияТоваровУслугEDI_Товары
	//               |ГДЕ
	//               |	РеализацияТоваровУслугEDI_Товары.Ссылка = &Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ЦеныРеализацииСрезПоследних.Номенклатура,
	//               |	МАКСИМУМ(ЦеныРеализацииСрезПоследних.Цена) КАК Цена,
	//               |	МАКСИМУМ(ЦеныРеализацииСрезПоследних.БезНДС) КАК БезНДС,
	//               |	МАКСИМУМ(ЦеныРеализацииСрезПоследних.ЦенаБезНДС) КАК ЦенаБезНДС,
	//               |	ЦеныРеализацииСрезПоследних.Контрагент,
	//               |	ЦеныРеализацииСрезПоследних.ЕдиницаИзмерения
	//               |ПОМЕСТИТЬ втЦены
	//               |ИЗ
	//               |	РегистрСведений.ЦеныРеализации.СрезПоследних(
	//               |			&Период,
	//               |			Номенклатура В
	//               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |					втТЧ.Номенклатура
	//               |				ИЗ
	//               |					втТЧ)) КАК ЦеныРеализацииСрезПоследних
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЦеныРеализацииСрезПоследних.Номенклатура,
	//               |	ЦеныРеализацииСрезПоследних.Контрагент,
	//               |	ЦеныРеализацииСрезПоследних.ЕдиницаИзмерения
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втТЧ.Ссылка,
	//               |	втТЧ.НомерСтроки,
	//               |	втТЧ.Номенклатура,
	//               |	втЦены.Номенклатура КАК Номенклатура1,
	//               |	втЦены.ЦенаБезНДС КАК ЦенаБезНДС,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС КАК Цена,
	//               |	втТЧ.ЕдиницаИзмерения,
	//               |	втТЧ.Коэффициент,
	//               |	втТЧ.Количество,
	//               |	втТЧ.СтавкаНДС,
	//               |	втТЧ.СчетУчета,
	//               |	втТЧ.СтатьяТовародвижения,
	//               |	втТЧ.ПоРасходнымОрдерам,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС * втТЧ.Количество КАК Сумма,
	//               |	втЦены.ЦенаБезНДС * втТЧ.Количество КАК СуммаБезНДС,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС * втТЧ.Количество - втЦены.ЦенаБезНДС * втТЧ.Количество КАК СуммаНДС
	//               |ИЗ
	//               |	втТЧ КАК втТЧ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	//               |		ПО втТЧ.Номенклатура = втЦены.Номенклатура
	//               |			И втТЧ.Контрагент = втЦены.Контрагент
	//               |			И втТЧ.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втТЧ2.ЕдиницаИзмерения,
	//               |	втТЧ2.СрокГодности,
	//               |	втТЧ2.Количество,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС КАК Цена,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС * втТЧ2.Количество КАК Сумма,
	//               |	втЦены.ЦенаБезНДС * втТЧ2.Количество КАК СуммаБезНДС,
	//               |	ВЫБОР
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	//               |			ТОГДА 1.1
	//               |		КОГДА втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	//               |				ИЛИ втТЧ2.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	//               |			ТОГДА 1.18
	//               |		ИНАЧЕ 1
	//               |	КОНЕЦ * втЦены.ЦенаБезНДС * втТЧ2.Количество - втЦены.ЦенаБезНДС * втТЧ2.Количество КАК СуммаНДС,
	//               |	втТЧ2.СтавкаНДС,
	//               |	втТЧ2.КоличествоОтгружено,
	//               |	втТЧ2.СерийныйНомер,
	//               |	втТЧ2.Номенклатура,
	//               |	втТЧ2.НомерСтроки,
	//               |	втТЧ2.Характеристика
	//               |ИЗ
	//               |	втТЧ2 КАК втТЧ2
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	//               |		ПО втТЧ2.Номенклатура = втЦены.Номенклатура
	//               |			И втТЧ2.Контрагент = втЦены.Контрагент
	//               |			И втТЧ2.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения";
	//Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Результаты = Запрос.ВыполнитьПакет();
	//Товары.Загрузить(Результаты[Результаты.Количество()-2].Выгрузить());	
	//EDI_Товары.Загрузить(Результаты[Результаты.Количество()-1].Выгрузить());	
КонецПроцедуры

//+++АК SHEP 2018.10.08 ИП-00020060: не моё, перенёс в отдельную процедуру
Процедура ЗаполнитьПоРасходномуОрдеру(ДанныеЗаполнения) Экспорт
	
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;		
		
		//+++АК LAGP 2018.05.13 ИП-00018465 Учет расчетов с ТТПерекресток.
		//ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Получатель;	
		Если ТипЗнч(ДанныеЗаполнения.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") ТОгда
			ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Получатель.КонтрагентСтороннейРозницы;		
			ЭтотОбъект.ДоговорКонтрагента 	= Обработки.МаршрутныеЛисты.ПолучитьДоговорКонтрагентаСтороннейРозницы(ЭтотОбъект.Контрагент, ДанныеЗаполнения.Получатель, ДанныеЗаполнения.Организация, ТекущаяДата()); 	
		Иначе
			ЭтотОбъект.Контрагент 		= ДанныеЗаполнения.Получатель;
		КонецЕсли;	
		//---АК LAGP
		
		ЭтотОбъект.Склад				= ДанныеЗаполнения.Склад;
		ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.Склад.Владелец;
		ЭтотОбъект.ВариантРасчетаНДС	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		
		ЭтотОбъект.РасходныеОрдера.Очистить();
		НовСтрОрдер = ЭтотОбъект.РасходныеОрдера.Добавить();
		НовСтрОрдер.РасходныйОрдер = ДанныеЗаполнения;
		
		ЗаполнитьТоварыПоРасходномуОрдеру(ДанныеЗаполнения);			
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00019917.04
	//запишем еще отложенное действие по рассылке данных для Мастер-Вендор
	Если мЭтоНовыйОбъект Тогда
		Если ВключатьКонтрагентаВРассылкуПоВендингам() Тогда //Мастер-Вендор ООО
			ПользователиПолныеПрава.ЗаписатьОтложенноеДействиеДляОбъекта(Ссылка, Перечисления.ВидыОтложенныхДействийСОбъектами.РассылкаПоМастерВендор);
		КонецЕсли;
		//ИП-00020387
		ПользователиПолныеПрава.ЗаписатьОтложенноеДействиеДляОбъекта(Ссылка, Перечисления.ВидыОтложенныхДействийСОбъектами.СинхронизацияНомеровСчетФактур);
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 	 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00019917.04
Функция ВключатьКонтрагентаВРассылкуПоВендингам()
	
	//Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("a2c1add3-c71d-11e8-a251-005056a714c6"))
	ЗнСвойствКонтрагента = ЗаполнениеДокументов.ВернутьТаблицуЗначенийСвойств(ПланыВидовХарактеристик.СвойстваОбъектов.ВключатьВРассылкуПоВендингам, Контрагент);
	
	Если ЗнСвойствКонтрагента.Количество() Тогда
		Возврат ЗнСвойствКонтрагента[0].Значение;		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мЭтоНовыйОбъект = Ложь;