
Функция НайтиРеализациюПоРасходнику(РасходныйОрдер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|ГДЕ
	|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер
	|	И НЕ РеализацияТоваровУслугРасходныеОрдера.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//+++АК KIRN 2018.04.12 ИП-00018209 
Функция ПечатьТорг12(СсылкаНаДокумент) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	//+++АК BELN 2018.07.17 ИП-00019201 
	Если ТипЗнч(СсылкаНаДокумент)=Тип("Массив") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента = """"
		|			ТОГДА РеализацияТоваровУслуг.Номер
		|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоДокумента
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РеализацияТоваровУслуг.Дата
		|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоДокумента
		|	КОНЕЦ КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Руководители,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
		|	РеализацияТоваровУслуг.Организация КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаВключаетНДС,
		//+++АК SHEP 2018.10.10 ИП-00020100
		|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
		//---АК SHEP 2018.10.10
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.EDI_ТочкаДоставки = ЗНАЧЕНИЕ(Справочник.СТруктурныеЕдиницы.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.АдресДоставки
		|		ИНАЧЕ РеализацияТоваровУслуг.EDI_ТочкаДоставки.Адрес
		|	КОНЕЦ КАК АдресМагазина,
		|	РеализацияТоваровУслуг.EDI_ТочкаДоставки.Наименование КАК НаименованиеМагазина,
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&ТекущийДокумент)";
		Шапка = Запрос.Выполнить().Выбрать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
		Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
		|	РеализацияТоваровУслуг.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
		|	РеализацияТоваровУслуг.Количество,
		|	РеализацияТоваровУслуг.Количество КАК КоличествоМест,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
		|	РеализацияТоваровУслуг.Коэффициент,
		|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
		|	РеализацияТоваровУслуг.Цена КАК Цена,
		|	РеализацияТоваровУслуг.Сумма КАК Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслуг.Сумма КАК СуммаВВалютеДокумента,
		|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	1 КАК ID,
		|	ВЗ_Свойства.Производитель,
		|	ВЗ_Свойства.СтранаПроисхождения,
		|	ВЗ_Свойства.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика,
		|	ВЗ_Свойства.Характеристика,
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|			МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Производитель,
		|			МАКСИМУМ(ЗначенияСвойствОбъектов1.Значение) КАК СтранаПроисхождения,
		|			ВложенныйЗапрос.Характеристика КАК Характеристика
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РасходныйОрдерСкладТовары.Характеристика) КАК Характеристика,
		|				РасходныйОрдерСкладТовары.Характеристика.Владелец КАК Номенклатура
		|			ИЗ
		|				Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|			ГДЕ
		|				РасходныйОрдерСкладТовары.Ссылка В
		|						(ВЫБРАТЬ
		|							РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
		|						ИЗ
		|							Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
		|						ГДЕ
		|							РеализацияТоваровУслугРасходныеОрдера.Ссылка в (&ТекущийДокумент))
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РасходныйОрдерСкладТовары.Характеристика.Владелец) КАК ВложенныйЗапрос
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов.Объект
		|					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов1.Объект
		|					И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.Номенклатура,
		|			ВложенныйЗапрос.Характеристика) КАК ВЗ_Свойства
		|		ПО РеализацияТоваровУслуг.Номенклатура = ВЗ_Свойства.Номенклатура
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&ТекущийДокумент)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	Номер";
		Запрос.Текст = Текст;
		
		ЗапросТовары1 = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		//АК БЕЛН 13.07.2016++
		Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
		
		Фл=Ложь;
		Пока Шапка.Следующий() Цикл
			ЗапросТовары=ЗапросТовары1.НайтиСтроки(Новый Структура("Ссылка",Шапка.Ссылка));	
			Если Фл Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
			КонецЕсли; 	
			Фл=Истина;
			
			
			//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
			
			//Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12Изм");
			//Запрос.Текст = 	
			//"ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
			//|	СертификатыНаПродукциюСрезПоследних.Характеристика,
			//|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
			//|ПОМЕСТИТЬ вт
			//|ИЗ
			//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
			//|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
			//|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
			//|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
			//|ГДЕ
			//|	РасходныйОрдерСкладТовары.Ссылка в (&МассивРО)
			//|
			//|СГРУППИРОВАТЬ ПО
			//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
			//|	СертификатыНаПродукциюСрезПоследних.Характеристика
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	СертификатыНаПродукцию.Номенклатура,
			//|	СертификатыНаПродукцию.Характеристика,
			//|	СертификатыНаПродукцию.РегистрационныйНомер,
			//|	СертификатыНаПродукцию.ДействуетДо
			//|ИЗ
			//|	вт КАК вт
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
			//|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
			//|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
			//|			И вт.Период = СертификатыНаПродукцию.Период";
			//Запрос.УстановитьПараметр("МассивРО", СсылкаНаДокумент.РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
			//ВыборкаСертификаты=Запрос.Выполнить().Выбрать();
			//АК БЕЛН 13.07.2016--
			ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
			ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
			
			// Выводим общие реквизиты шапки
			СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
			СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
			
			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
			ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
			
			Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			КонецЕсли;
			
			Если СокрЛП(Шапка.АдресМагазина) <> "" Тогда
				ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
				ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
				ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
				"", ПредставлениеГрузополучателяДоАдреса+", ") +Шапка.НаименованиеМагазина + ", " + Шапка.АдресМагазина
				+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
			
			// Выводим всевозможные коды
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
			ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
			ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
			
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			
			// Инициализация счетчика страниц
			НомерСтраницы = 1;
			
			// Инициализация итогов по странице
			ИтогоМестНаСтранице       = 0;
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;
			
			// Инициализация итогов по документу
			ИтогоМест       = 0;
			ИтогоКоличество = 0;
			ИтогоСуммаСНДС  = 0;
			ИтогоСумма      = 0;
			ИтогоНДС        = 0;
			
			// Инициализация счетчика строк
			НомерСтроки     = 0;
			КоличествоСтрок = ЗапросТовары.Количество();
			
			// Выводим заголовок многострочной части
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			// Выводим многострочную часть документа
			Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
				
				ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
				//АК БЕЛН 13.07.2016++
				//ТекстСертификатов = "";
				//Пока ВыборкаСертификаты.НайтиСледующий(Новый Структура("Номенклатура",ВыборкаСтрок.Номенклатура)) Цикл
				//	Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
				//	Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
				//	ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
				//												Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
				//КонецЦикла;
				//ВыборкаСертификаты.Сбросить();											
				//Если НЕ ТекстСертификатов = "" Тогда
				//	ТекстСертификатов = Сред(ТекстСертификатов, 3);
				//КонецЕсли;
				//ОбластьМакетаСтрока.Параметры.Сертификаты = ТекстСертификатов + ".";
				//АК БЕЛН 13.07.2016--
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
					ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
					ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
				КонецЕсли;
				
				НаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
				
				//+++ gusd
				Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
					И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
					
					НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
					
				КонецЕсли;
				//--- gusd
				
				//+++ АК BARA ИП-00018040      01.03.2018
				Если ЗначениеЗаполнено(ВыборкаСтрок.Характеристика) Тогда
					НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Характеристика;
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(ВыборкаСтрок.Производитель) Тогда
				//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Производитель;
				//КонецЕсли;
				//--- АК BARA ИП-00018040
				
				Если ЗначениеЗаполнено(ВыборкаСтрок.СтранаПроисхождения) Тогда
					НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.СтранаПроисхождения;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.ТоварНаименование = НаименованиеТовара;
				
				СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
				
				КоличествоМест = ВыборкаСтрок.КоличествоМест;
				Количество     = ВыборкаСтрок.Количество;
				СуммаНДС       = ВыборкаСтрок.СуммаНДС;
				СуммаБезНДС    = СуммаСНДС - СуммаНДС;
				
				ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				
				Если НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0 Тогда
					ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
				Иначе
					ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
				КонецЕсли;
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;
				
				#Если Клиент Тогда
					Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
					#Иначе	
						Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
						#КонецЕсли
						Если КоличествоСтрок > 1 Тогда
							
							// Выводим итоги по странице
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
							ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
							
							ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
							
							// Очистим итоги по странице
							ИтогоМестНаСтранице       = 0;
							ИтогоКоличествоНаСтранице = 0;
							ИтогоСуммаНаСтранице      = 0;
							ИтогоНДСНаСтранице        = 0;
							ИтогоСуммаСНДСНаСтранице  = 0;
							
							// Выведем заголовок таблицы
							НомерСтраницы = НомерСтраницы + 1;
							ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
							ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ТабДокумент.Вывести(ОбластьМакетаСтрока);
					
					// Увеличим итоги по странице
					ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
					ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
					ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
					ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
					ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
					
					// Увеличим итоги по документу
					ИтогоМест       = ИтогоМест       + КоличествоМест;
					ИтогоКоличество = ИтогоКоличество + Количество;
					ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
					ИтогоНДС        = ИтогоНДС        + СуммаНДС;
					ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
					
				КонецЦикла;
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				// Выводим итоги по документу в целом
				ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
				ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
				ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
				ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
				ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
				
				ТабДокумент.Вывести(ОбластьМакетаВсего);
				
				// Выводим подвал документа
				
				Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
				
				мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
				
				ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
				ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
				ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
				
				ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
				ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
				ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
				
				ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
				ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
				ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
				ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
				
				ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
				ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
				ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
				
				ТабДокумент.Вывести(ОбластьМакетаПодвал);
				
			КонецЦикла; 
			
		Иначе	
			//---АК BELN 2018.07.17 
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.НомерИсходящегоДокумента = """"
			|			ТОГДА РеализацияТоваровУслуг.Номер
			|		ИНАЧЕ РеализацияТоваровУслуг.НомерИсходящегоДокумента
			|	КОНЕЦ КАК Номер,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА РеализацияТоваровУслуг.Дата
			|		ИНАЧЕ РеализацияТоваровУслуг.ДатаИсходящегоДокумента
			|	КОНЕЦ КАК ДатаДокумента,
			|	РеализацияТоваровУслуг.Организация,
			|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
			|	РеализацияТоваровУслуг.Организация КАК Поставщик,
			|	РеализацияТоваровУслуг.Организация КАК Контрагент,
			|	РеализацияТоваровУслуг.Организация КАК Руководители,
			|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
			|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
			|	РеализацияТоваровУслуг.Организация КАК Грузоотправитель,
			|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
			|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
			|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СуммаВключаетНДС,
			//+++АК SHEP 2018.10.10 ИП-00020100
			|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
			//---АК SHEP 2018.10.10
			|	ВЫбор когда РеализацияТоваровУслуг.EDI_ТочкаДоставки = ЗНАЧЕНИЕ(Справочник.СТруктурныеЕдиницы.ПустаяСсылка) тогда РеализацияТоваровУслуг.АдресДоставки Иначе РеализацияТоваровУслуг.EDI_ТочкаДоставки.Адрес Конец КАК АдресМагазина,
			|	РеализацияТоваровУслуг.EDI_ТочкаДоставки.Наименование КАК НаименованиеМагазина
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
			Текст =
			"ВЫБРАТЬ
			|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
			|	РеализацияТоваровУслуг.Номенклатура,
			|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
			|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
			|	РеализацияТоваровУслуг.Количество,
			|	РеализацияТоваровУслуг.Количество КАК КоличествоМест,
			|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
			|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
			|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
			|	РеализацияТоваровУслуг.Коэффициент,
			|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
			|	РеализацияТоваровУслуг.Цена КАК Цена,
			|	РеализацияТоваровУслуг.Сумма КАК Сумма,
			|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
			|	РеализацияТоваровУслуг.Сумма КАК СуммаВВалютеДокумента,
			|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
			|	РеализацияТоваровУслуг.СтавкаНДС,
			|	1 КАК ID,
			|	ВЗ_Свойства.Производитель,
			|	ВЗ_Свойства.СтранаПроисхождения,
			|	ВЗ_Свойства.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика,
			|	ВЗ_Свойства.Характеристика
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|			МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Производитель,
			|			МАКСИМУМ(ЗначенияСвойствОбъектов1.Значение) КАК СтранаПроисхождения,
			|			ВложенныйЗапрос.Характеристика КАК Характеристика
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(РасходныйОрдерСкладТовары.Характеристика) КАК Характеристика,
			|				РасходныйОрдерСкладТовары.Характеристика.Владелец КАК Номенклатура
			|			ИЗ
			|				Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
			|			ГДЕ
			|				РасходныйОрдерСкладТовары.Ссылка В
			|						(ВЫБРАТЬ
			|							РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
			|						ИЗ
			|							Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
			|						ГДЕ
			|							РеализацияТоваровУслугРасходныеОрдера.Ссылка = &ТекущийДокумент)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РасходныйОрдерСкладТовары.Характеристика.Владелец) КАК ВложенныйЗапрос
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов.Объект
			|					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
			|				ПО ВложенныйЗапрос.Характеристика = ЗначенияСвойствОбъектов1.Объект
			|					И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВложенныйЗапрос.Номенклатура,
			|			ВложенныйЗапрос.Характеристика) КАК ВЗ_Свойства
			|		ПО РеализацияТоваровУслуг.Номенклатура = ВЗ_Свойства.Номенклатура
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	Номер";
			Запрос.Текст = Текст;
			
			ЗапросТовары = Запрос.Выполнить().Выгрузить();
			
			ТабДокумент = Новый ТабличныйДокумент;
			
			//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
			
			// Зададим параметры макета
			ТабДокумент.ПолеСверху         = 0;
			ТабДокумент.ПолеСлева          = 0;
			ТабДокумент.ПолеСнизу          = 0;
			ТабДокумент.ПолеСправа         = 0;
			ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			//АК БЕЛН 13.07.2016++
			Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
			//Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12Изм");
			//Запрос.Текст = 	
			//"ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
			//|	СертификатыНаПродукциюСрезПоследних.Характеристика,
			//|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
			//|ПОМЕСТИТЬ вт
			//|ИЗ
			//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
			//|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
			//|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
			//|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
			//|ГДЕ
			//|	РасходныйОрдерСкладТовары.Ссылка в (&МассивРО)
			//|
			//|СГРУППИРОВАТЬ ПО
			//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
			//|	СертификатыНаПродукциюСрезПоследних.Характеристика
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	СертификатыНаПродукцию.Номенклатура,
			//|	СертификатыНаПродукцию.Характеристика,
			//|	СертификатыНаПродукцию.РегистрационныйНомер,
			//|	СертификатыНаПродукцию.ДействуетДо
			//|ИЗ
			//|	вт КАК вт
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
			//|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
			//|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
			//|			И вт.Период = СертификатыНаПродукцию.Период";
			//Запрос.УстановитьПараметр("МассивРО", СсылкаНаДокумент.РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
			//ВыборкаСертификаты=Запрос.Выполнить().Выбрать();
			//АК БЕЛН 13.07.2016--
			ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
			ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
			
			// Выводим общие реквизиты шапки
			СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
			СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
			
			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
			ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
			
			Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			КонецЕсли;
			
			Если СокрЛП(Шапка.АдресМагазина) <> "" Тогда
				ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
				ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
				ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
				"", ПредставлениеГрузополучателяДоАдреса+", ") +Шапка.НаименованиеМагазина + ", " + Шапка.АдресМагазина
				+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
			
			// Выводим всевозможные коды
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
			ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
			ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
			
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			
			// Инициализация счетчика страниц
			НомерСтраницы = 1;
			
			// Инициализация итогов по странице
			ИтогоМестНаСтранице       = 0;
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;
			
			// Инициализация итогов по документу
			ИтогоМест       = 0;
			ИтогоКоличество = 0;
			ИтогоСуммаСНДС  = 0;
			ИтогоСумма      = 0;
			ИтогоНДС        = 0;
			
			// Инициализация счетчика строк
			НомерСтроки     = 0;
			КоличествоСтрок = ЗапросТовары.Количество();
			
			// Выводим заголовок многострочной части
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			// Выводим многострочную часть документа
			Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
				
				ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
				//АК БЕЛН 13.07.2016++
				//ТекстСертификатов = "";
				//Пока ВыборкаСертификаты.НайтиСледующий(Новый Структура("Номенклатура",ВыборкаСтрок.Номенклатура)) Цикл
				//	Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
				//	Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
				//	ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
				//												Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
				//КонецЦикла;
				//ВыборкаСертификаты.Сбросить();											
				//Если НЕ ТекстСертификатов = "" Тогда
				//	ТекстСертификатов = Сред(ТекстСертификатов, 3);
				//КонецЕсли;
				//ОбластьМакетаСтрока.Параметры.Сертификаты = ТекстСертификатов + ".";
				//АК БЕЛН 13.07.2016--
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
					ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
					ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
				КонецЕсли;
				
				НаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
				
				//+++ gusd
				Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
					И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
					
					НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
					
				КонецЕсли;
				//--- gusd
				
				//+++ АК BARA ИП-00018040      01.03.2018
				Если ЗначениеЗаполнено(ВыборкаСтрок.Характеристика) Тогда
					НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Характеристика;
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(ВыборкаСтрок.Производитель) Тогда
				//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Производитель;
				//КонецЕсли;
				//--- АК BARA ИП-00018040
				
				Если ЗначениеЗаполнено(ВыборкаСтрок.СтранаПроисхождения) Тогда
					НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.СтранаПроисхождения;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.ТоварНаименование = НаименованиеТовара;
				
				СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
				
				КоличествоМест = ВыборкаСтрок.КоличествоМест;
				Количество     = ВыборкаСтрок.Количество;
				СуммаНДС       = ВыборкаСтрок.СуммаНДС;
				СуммаБезНДС    = СуммаСНДС - СуммаНДС;
				
				ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				
				Если НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0 Тогда
					ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
				Иначе
					ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
				КонецЕсли;
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;
				
				#Если Клиент Тогда
					Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
					#Иначе	
						Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
						#КонецЕсли
						Если КоличествоСтрок > 1 Тогда
							
							// Выводим итоги по странице
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
							ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
							ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
							
							ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
							
							// Очистим итоги по странице
							ИтогоМестНаСтранице       = 0;
							ИтогоКоличествоНаСтранице = 0;
							ИтогоСуммаНаСтранице      = 0;
							ИтогоНДСНаСтранице        = 0;
							ИтогоСуммаСНДСНаСтранице  = 0;
							
							// Выведем заголовок таблицы
							НомерСтраницы = НомерСтраницы + 1;
							ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
							ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ТабДокумент.Вывести(ОбластьМакетаСтрока);
					
					// Увеличим итоги по странице
					ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
					ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
					ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
					ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
					ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
					
					// Увеличим итоги по документу
					ИтогоМест       = ИтогоМест       + КоличествоМест;
					ИтогоКоличество = ИтогоКоличество + Количество;
					ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
					ИтогоНДС        = ИтогоНДС        + СуммаНДС;
					ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
					
				КонецЦикла;
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				// Выводим итоги по документу в целом
				ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
				ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
				ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
				ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
				ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
				
				ТабДокумент.Вывести(ОбластьМакетаВсего);
				
				// Выводим подвал документа
				
				Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
				
				мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
				
				ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
				ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
				ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
				
				ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
				ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
				ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
				
				ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
				ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
				ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
				ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
				
				ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
				ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
				ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
				
				ТабДокумент.Вывести(ОбластьМакетаПодвал);
				
			КонецЕсли; 
	
	//+++АК SHEP 2018.10.12 ИП-00020060
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.Представление КАК ПредставлениеДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугРасходныеОрдера.Ссылка = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ПО РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер = РасходныйОрдерСклад.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&Ссылка)
		|	И НЕ РасходныйОрдерСклад.СборкаТерминаломЗакончена");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("По документу " + ВыборкаЗапроса.ПредставлениеДокумента + " ещё рано печатать накладную, не завершена сборка расходных ордеров!");
		КонецЦикла;
	КонецЕсли;
	//---АК SHEP 2018.10.12
	
	Возврат ТабДокумент;
	
КонецФункции

//+++АК LAGP 2018.05.04 ИП-00018465 Учет расчетов с ТТПерекресток.
Функция ПолучитьТаблицуНезаполненныхДоговоров(МассивРеализаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер,
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ втРасхоныеОрдераРеализаций
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РеализацияТоваровУслугРасходныеОрдера.Ссылка = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивРеализаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРасхоныеОрдераРеализаций.Ссылка,
	|	втРасхоныеОрдераРеализаций.РасходныйОрдер.Получатель
	|ПОМЕСТИТЬ втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу
	|ИЗ
	|	втРасхоныеОрдераРеализаций КАК втРасхоныеОрдераРеализаций
	|ГДЕ
	|	втРасхоныеОрдераРеализаций.РасходныйОрдер.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу.Ссылка КАК РеализацияТоваровИУслуг
	|ИЗ
	|	втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу КАК втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу
	|ГДЕ
	|	втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу.РасходныйОрдерПолучатель.КонтрагентСтороннейРозницы <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И втРеализация_РасходныйОрдерНаСтруктурнуюЕдиницу.Ссылка.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивРеализаций", МассивРеализаций);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
		
		
//+++ АК luza 27.09.2018 ИП-00019940		
Функция ОтправитьТорг12НаEmailМагазина(СсылкаНаДокумент) Экспорт
	РезультатОтправки = Новый Структура("Результат, ТекстОшибки, Email", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_Сообщения.НомерЗаказа,
	|	КонтурEDI_Сообщения.НомерДокумента,
	|	КонтурEDI_Сообщения.ДатаДокумента,
	|	КонтурEDI_Сообщения.Документ
	|ПОМЕСТИТЬ ВТ_ДанныеЗаказа
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И КонтурEDI_Сообщения.Документ = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ ВТ_ЕмэйлыМагазинов
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.EMailМагазинаСтороннейРозницы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.EDI_ТочкаДоставки.НомерСтороннейТочки КАК НомерМагазина,
	|	ВТ_ДанныеЗаказа.НомерЗаказа,
	|	ВТ_ДанныеЗаказа.НомерДокумента,
	|	ВТ_ДанныеЗаказа.ДатаДокумента,
	|	ЕСТЬNULL(ВТ_ЕмэйлыМагазинов.Значение, """") КАК АдресПочты
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаказа КАК ВТ_ДанныеЗаказа
	|		ПО РеализацияТоваровУслуг.Ссылка = ВТ_ДанныеЗаказа.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕмэйлыМагазинов КАК ВТ_ЕмэйлыМагазинов
	|		ПО РеализацияТоваровУслуг.EDI_ТочкаДоставки = ВТ_ЕмэйлыМагазинов.Объект
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", СсылкаНаДокумент);	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Email = "";	
	
	Если ТЗ.Количество() > 0 Тогда	
		Email = ТЗ[0].АдресПочты;
		РезультатОтправки.Email = Email;
		НомерМагазина = Формат(ТЗ[0].НомерМагазина, "ЧГ=");
		НомерЗаказа = ТЗ[0].НомерЗаказа;
		ДатаДокумента = Формат(ТЗ[0].ДатаДокумента,"ДФ=dd.MM.yyyy");		
	Иначе
		РезультатОтправки.Результат = Ложь;
		РезультатОтправки.ТекстОшибки = "Нет данных по заказу";
		Возврат РезультатОтправки;
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер,
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка.Дата,
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка.EDI_ТочкаДоставки
	|ПОМЕСТИТЬ ВТ_РО
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|ГДЕ
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка,
	|	МаршрутныйЛистРасходныеОрдера.Документ,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Перевозчик
	|ПОМЕСТИТЬ ВТ_Рейс
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РО КАК ВТ_РО
	|		ПО МаршрутныйЛистРасходныеОрдера.Документ = ВТ_РО.РасходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	КонтактныеЛицаКонтрагентов.РольКонтактногоЛица,
	|	КонтактнаяИнформация.Представление КАК Email
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Рейс КАК ВТ_Рейс
	|		ПО КонтактныеЛицаКонтрагентов.Владелец = ВТ_Рейс.Перевозчик
	|			И (КонтактныеЛицаКонтрагентов.РольКонтактногоЛица = ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛиц.ОператорПеревозчикаX5))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО КонтактныеЛицаКонтрагентов.Ссылка = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента))";
	Запрос.УстановитьПараметр("Документ", СсылкаНаДокумент);	
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	EmailПеревозчика = "";
	
	Для каждого Стр Из ТЗ Цикл
		EmailПеревозчика = EmailПеревозчика + Стр.Email + ";";	
	КонецЦикла;     
	
	Если ЗначениеЗаполнено(Email) = Ложь И ЗначениеЗаполнено(EmailПеревозчика) = Ложь Тогда
		РезультатОтправки.Результат = Ложь;
		РезультатОтправки.ТекстОшибки = "У точки:" + Строка(СсылкаНаДокумент.EDI_ТочкаДоставки) 
		+ " не заполнен E-mail магазина сторонней розницы";
		Возврат РезультатОтправки;
	КонецЕсли;       	
	
	ТабДокументТорг12 = Документы.РеализацияТоваровУслуг.ПечатьТорг12(СсылкаНаДокумент);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".xls");
	
	Если ТипЗнч(ТабДокументТорг12) = Тип("ТабличныйДокумент") И ТабДокументТорг12.ВысотаТаблицы > 0 Тогда
		ТабДокументТорг12.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.XLS);	
	Иначе
		РезультатОтправки.Результат = Ложь;
		РезультатОтправки.ТекстОшибки = "Не удалось сформировать печатную форму";
		Возврат РезультатОтправки;
	КонецЕсли;	
	
	
	Файл = Новый Файл(ИмяВремФайла);
	Если Файл.Существует() Тогда
		Почта = Новый ИнтернетПочта;
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("sklad@tealsy.ru");
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Почта.Подключиться(Профиль);
		
			
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Тема 			= "Магазин № " + НомерМагазина + ", заказ №" + НомерЗаказа + " от " + ДатаДокумента;
		Письмо.Отправитель 		= УчетнаяЗапись.Логин;
		Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	       
	
		Письмо.Вложения.Добавить(Новый ДвоичныеДанные(ИмяВремФайла), "Накладная № " + СсылкаНаДокумент.Номер + " от " + ДатаДокумента + ".xls");		
		
		СпАдресов = Новый СписокЗначений;
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Email,";");
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла;
				
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(EmailПеревозчика,";");
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла;

		
		Для каждого Адрес Из СпАдресов Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адрес.Значение;
		КонецЦикла;
			
		Попытка		
			Почта.Послать(Письмо);		
		Исключение
			РезультатОтправки.Результат = Ложь;
			РезультатОтправки.ТекстОшибки = "Не удалось отправить письмо по адресу:" + Email
			+	" по причине: " +Строка(ОписаниеОшибки());
			Возврат РезультатОтправки;
		КонецПопытки;  
	КонецЕсли;     
	
	
	Возврат РезультатОтправки;
КонецФункции	