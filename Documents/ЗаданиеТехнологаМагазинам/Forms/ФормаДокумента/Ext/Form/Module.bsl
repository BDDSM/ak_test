
&НаКлиенте
Перем СтруктураОтборТЗнТовары;
&НаКлиенте
Перем ОтработанноеКоличествоБыло;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Задание технолога магазинам");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(Документы.ЗаданиеТехнологаМагазинам.СоздатьДокумент());
		Объект.Дата				= ТекущаяДата();
		Объект.Автор			= ТекПользователь;
		Объект.АвторИзменений	= Объект.Автор;
	КонецЕсли;
	
	ОбновитьТЗнТоварыНаСервере(Ложь);
	ЭтоВводНаОсновании = ЗначениеЗаполнено(Параметры.Основание);
	
	//Элементы.НеЗакрыватьАвтоматически.ТолькоПросмотр = НЕ ЭтоТехнологПоКачеству И НЕ ЭтоПолныеПрава;
	УстановитьВидимостьДоступность();
	
	КаталогХраненияФайлов = Документы.ЗаданиеТехнологаМагазинам.ПолучитьКаталогХраненияФайлов(Объект.Дата);
	
	ЗаданиеТехнологаМагазинамНаРазработке = (РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ЗаданиеТехнологаМагазинамНаРазработке") = Истина);
	
	//+++АК SHEP 2018.05.10 ИП-00018566
	Если Объект.Дата >= Дата(2018, 05, 11) Тогда
		Элементы.ТоварыСкладСклада.Видимость = Ложь;
		Элементы.ТоварыМагазин.Заголовок = "Магазин";
		Элементы.СтраницаПоМагазинам.Заголовок = "По магазинам";
	КонецЕсли;
	//---АК SHEP 2018.05.10
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаданиеТехнологаМагазинамНаРазработке Тогда
		Предупреждение("По данному функционалу проводятся сервисные работы,
			|попробуйте работать с данным документом чуть позже!");
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПредПоставщик = Объект.Поставщик;
	БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаВсеПартии, Ложь);
	БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаБезДатПроизводства, Ложь);
	СканироватьШтрихкод();
	НеЗакрыватьАвтоматическиПриИзменении(Неопределено);
	
	Если ЭтоВводНаОсновании И Объект.Номенклатура.Количество() = 1 Тогда
		НоваяСтрокаТЧ = ТЗнТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, Объект.Номенклатура[0]);
		Элементы.ТЗнТовары.ТекущаяСтрока = НоваяСтрокаТЧ.ПолучитьИдентификатор();
		ТЗнТоварыНоменклатураОбработкаВыбора(Элементы.ТЗнТоварыНоменклатура, НоваяСтрокаТЧ.Номенклатура, Истина);
	КонецЕсли;
	
	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
Перем ДатаПроизводстваНач, ДатаПроизводстваКон, ТекГод;
Перем ТекНоменклатура, ТекХарактеристика;
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда Возврат; КонецЕсли;
	
	СоздаватьДокументыЗадачаТехнолога = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	Если СоздаватьДокументыЗадачаТехнолога Тогда
		
		//+++АК SHEP 20161223: сделать выкидывающееся предупреждение, когда задание технолога создаётся, а одна или обе даты не указаны.
		Если НЕ (Объект.БезДатПроизводства ИЛИ Объект.ВсеПартии) Тогда
			
			ТекстОшибки = "";
			ТекГод = Год(ТекущаяДата());
			
			Для Каждого СтрокаТЗнТовары Из ТЗнТовары Цикл
				
				ДатаПроизводстваНач = СтрокаТЗнТовары.ДатаПроизводстваНач;
				ДатаПроизводстваКон = СтрокаТЗнТовары.ДатаПроизводстваКон;
				
				Если ДатаПроизводстваНач = Дата(1,1,1) ИЛИ ДатаПроизводстваКон = Дата(1,1,1) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.Таб + Строка(СтрокаТЗнТовары.Номенклатура) + ":
						|не указана начальная и/или конечная даты производства." + Символы.ПС;
				КонецЕсли;
				
				//+++АК SHEP 20170713 ИП-00016178
				Если ДатаПроизводстваНач <> Дата(1,1,1) И Год(ДатаПроизводстваНач) <> ТекГод ИЛИ ДатаПроизводстваКон <> Дата(1,1,1) И Год(ДатаПроизводстваКон) <> ТекГод Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.Таб + Строка(СтрокаТЗнТовары.Номенклатура) + ":
						|год периода с..по не совпадает с текущим." + Символы.ПС;
				КонецЕсли;
				//---АК SHEP 20170713 
				
			КонецЦикла;
			
			Если ТекстОшибки <> "" Тогда
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да, всё указано верно");
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет, нужно указать даты производства");
				
				Если Вопрос(
					"Для номенклатуры:
					|" + ТекстОшибки + "
					|
					|После записи документа, даты производства невозможно будет поменять.
					|
					|Записать задание технолога?", СписокКнопок,, КодВозвратаДиалога.Нет, "Задание технолога магазинам") <> КодВозвратаДиалога.Да Тогда
					
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		//---АК SHEP 20161223
		
		Если Вопрос("ВНИМАНИЕ! Будут созданы документы «Задача технолога», номенклатуру нельзя будет изменить!
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание технолога магазинам") <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//
	//Если Объект.НеЗакрыватьАвтоматически И Объект.ДатаАвтозакрытия <> Дата(1,1,1) Тогда
	//	Если Объект.ДатаАвтозакрытия < ДатаАвтозакрытия ИЛИ Объект.ДатаАвтозакрытия < ТекущаяДата() Тогда
	//		Предупреждение("Неверно указана дата автозакрытия!");
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок") Тогда
			Предупреждение("Для закрытия задания технолога необходимо поменять его тип на другой!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		//+++АК SHEP 20170314 Разгуляев Валерий 20170314 13:58
		//Паша, сделаешь, чтобы нельзя было закрыть задачу технолога в течение двух дней после смены типа задания технолога?
		//Соответственно, если происходит автоматическая смена перед закрытием, чтобы давалось ещё два дня на закрытие.
		ДатаЗакрытияНеРаньше = Объект.ДатаСменыЗадания + 2*24*60*60;
		Если (ТекущаяДата() < ДатаЗакрытияНеРаньше) Тогда
			Предупреждение("После смены типа задания должно пройти двое суток, прежде чем его можно будет закрыть!
			|
			|Закрытие будет доступно после " + Формат(ДатаЗакрытияНеРаньше, "ДЛФ=DDT"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		//---АК SHEP 20170314
		
		Если Вопрос("ВНИМАНИЕ! При проведении документа будет запрещён приём входящих данных от магазинов,
			|будут созданы документы «Возврат поставщику» и будут закрыты все документы «Задача технолога»!
			|
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание технолога магазинам") <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноМенятьСвереноСПоставщиком()
	Возврат (Объект.Товары.НайтиСтроки(Новый Структура("Обработано", Ложь)).Количество() = 0);
КонецФункции

&НаКлиенте
Процедура СвереноСПоставщикомПриИзменении(Элемент)
	
	Если Объект.СвереноСПоставщиком Тогда
		//+++АК SHEP 20161219: ограничение, что нельзя ставить галочку "согласовано с поставщиком" раньше двух суток с момента создания задания технолога,
		// или пока все магазины в задании технолога не отработали его. То есть любого из этих условий достаточно, чтобы поставить галочку.
		// До этого момента должно выкидываться сообщение, что ещё не все магазины отработали данную задачу.
		
		МожноМенятьПоДатеДокумента = (ТекущаяДата() - Объект.Дата >= 2*24*60*60);
		Если НЕ (МожноМенятьПоДатеДокумента ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки") ИЛИ МожноМенятьСвереноСПоставщиком()) Тогда
			//Если НЕ МожноМенятьПоДатеДокумента Тогда
			//	ТекстПредупреждения = "ещё не прошло двое суток с момента создания задания технолога!";
			//Иначе
			//	ТекстПредупреждения = "ещё не все магазины отработали данную задачу!";
			//КонецЕсли;
			ТекстПредупреждения = "ещё не прошло двое суток с момента создания задания технолога
				|или не все магазины отработали данную задачу!";
			Предупреждение("Нельзя устанавливать «Согласовано с поставщиком»:
			|" + ТекстПредупреждения);
			Объект.СвереноСПоставщиком = Ложь;
			Возврат;
		КонецЕсли;
		Объект.ДатаСверки = ТекущаяДата();
	КонецЕсли;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаданияПриИзменении(Элемент)
	Объект.ДатаСменыЗадания = ТекущаяДата();
	ОбновитьТЗнТоварыНаСервере();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ТолькоПросмотр = Объект.Проведен;
	
	//АК SHEP 20160804: Склад делаем видимым, но ТолькоПросмотр
	//Элементы.Склад.Видимость = ЭтоВозвратНаСклад; // ИЛИ ЭтоСамовывоз;
	//+++VERN
	Элементы.Склад.Доступность = ЭтоВозвратНаСклад;
	Если ЭтоВозвратНаСклад и НЕ ЗначениеЗаполнено(Объект.Склад) тогда
		Объект.Склад=Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Кавказский_1");
	КонецЕсли;
	//---VERN
	Элементы.СуммаКомпенсации.Видимость = ЭтоВозвратНаСклад;
	Элементы.СуммаПотенциальнойКомпенсации.Видимость = ЭтоВозвратНаСклад;
	Элементы.ИтогоПотенциальнаяСумма.Видимость = ЭтоВозвратНаСклад;
	Элементы.ИтогоРеализованнаяСумма.Видимость = ЭтоВозвратНаСклад;
	Элементы.СуммаРеализованногоВозврата.Видимость = НЕ ЭтоВозвратНаСклад;
	Элементы.СуммаРеализованногоВозвратаИтог.Видимость = ЭтоВозвратНаСклад;
	Элементы.ДатаВывоза.Видимость = (ЭтоВозвратНаСклад ИЛИ ЭтоСамовывоз);
	
	Элементы.ФормаЗаписать.Видимость = НЕ Объект.Проведен;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = НЕ Объект.Проведен;
	
	Если Элементы.Найти("ФормаПровести") <> Неопределено Тогда
		Элементы.ФормаПровести.Видимость = Объект.СвереноСПоставщиком;
		Элементы.ФормаПровестиИЗакрыть.Видимость = Объект.СвереноСПоставщиком;
		Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Объект.Проведен;
	КонецЕсли;
	
	Если Элементы.Найти("ОткрытьЗадание") <> Неопределено Тогда
		//АК SHEP ++ 20161118: не даём открывать задание, если оно старше 16 дней
		Элементы.ОткрытьЗадание.Видимость = Объект.Проведен И (ТекущаяДата() - Объект.Дата < 16*24*60*60);
	КонецЕсли;
	
	Элементы.ЗаполнитьПоОстаткам.Доступность = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	ТЗнТоварыУстановитьТолькоПросмотрКолонок(ЗначениеЗаполнено(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Созданы документы ""Задача технолога"", запрещено добавлять новые товары!");
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поставщик не заполнен!";
		Сообщение.Поле = "Объект.Поставщик";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить(); 
		Возврат;
		
	ИначеЕсли Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = "Внимание!" + Символы.ПС + "Табличная часть будет очищена." + Символы.ПС + "Продолжить выполнение операции?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0) <> КодВозвратаДиалога.Да Тогда
		    Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамSQL();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|	И ЗначенияСвойствОбъектов.Значение = &Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура
		|				ИЗ
		|					Товары КАК Товары)) КАК ЦеныПоставщиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад.Владелец КАК Магазин,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТоварыОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаДокумента,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура
		|				ИЗ
		|					Товары КАК Товары
		|				ГДЕ
		|					Товары.НеВедетсяУчетПоХарактеристикам)) КАК ТоварыНаСкладахОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад.Владелец,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаДокумента,
		|			Характеристика В
		|				(ВЫБРАТЬ
		|					Товары.Характеристика
		|				ИЗ
		|					Товары КАК Товары
		|				ГДЕ
		|					НЕ Товары.НеВедетсяУчетПоХарактеристикам)) КАК ТоварыНаСкладахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.Магазин,
		|	ТоварыОстатки.Номенклатура,
		|	ТоварыОстатки.ЕдиницаИзмерения,
		|	ТоварыОстатки.Характеристика,
		//|	ТоварыОстатки.ДатаПроизводства,
		//|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК ПотенциальноеКоличество,
		|	СУММА(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ТоварыОстатки.КоличествоОстаток) КАК СуммаПотенциальногоВозврата
		|ИЗ
		|	ТоварыОстатки КАК ТоварыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТоварыОстатки.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТоварыОстатки.Характеристика = ЦеныНоменклатуры.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.Магазин,
		|	ТоварыОстатки.Номенклатура,
		|	ТоварыОстатки.ЕдиницаИзмерения,
		|	ТоварыОстатки.Характеристика
		//|	ТоварыОстатки.ДатаПроизводства,
		//|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0),
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыОстатки.КоличествоОстаток) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыОстатки.Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	Запрос.УстановитьПараметр("ДатаПроизводстваНач", Объект.ДатаПроизводстваНач);
	Запрос.УстановитьПараметр("ДатаПроизводстваКон", КонецДня(Объект.ДатаПроизводстваКон));
	Запрос.УстановитьПараметр("ДатаДокумента", ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()));
	
	УсловиеДатаПроизводства = "";
	Если ЗначениеЗаполнено(Объект.ДатаПроизводстваКон) Тогда
		УсловиеДатаПроизводства = "МЕЖДУ &ДатаПроизводстваНач И &ДатаПроизводстваКон";
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаПроизводстваНач) Тогда
		УсловиеДатаПроизводства = " >= &ДатаПроизводстваНач";
	КонецЕсли;
	Если НЕ ПустаяСтрока(УсловиеДатаПроизводства) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаДокумента,", "&ДатаДокумента,
			|			И ДатаПроизводства " + УсловиеДатаПроизводства);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Объект.Товары.Очистить();
	Иначе
		Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
	ОбновитьТЗнТоварыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамSQL_ВкусВилл(ТекНоменклатура = Неопределено, ТекХарактеристика = Неопределено)
	
	МенеджерВремТаб = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.id_tov КАК id_tov,
		|	Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка
		|			И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТекНоменклатура = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|						И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|						И ВЫБОР
		|							КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЗначенияСвойствОбъектов.Значение = &Контрагент
		|						КОНЕЦ
		|			ИНАЧЕ Номенклатура.Ссылка = &ТекНоменклатура
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТекХарактеристика = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка = &ТекХарактеристика
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	id_tov
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.id_tov,
		|	Товары.Характеристика
		|ИЗ
		|	Товары КАК Товары");
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("ТекХарактеристика", ТекХарактеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
		Возврат;
 	КонецЕсли;
	
	//СтрокаПодключения = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Loyalty;Data Source=srv-sql01;Password=cjyzcjyz;User ID=izbenka";
	
	//+++АК Susk (Суслин К.В.) 2018.08.09 
	ПользовательSQL = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЛогинSQL");
	ПарольSQL = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПарольSQL");
	//
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut = 0;
	//
	//ADOСоединение.ConnectionString = "SERVER=10.0.0.40; DRIVER=SQL Server; UID=izbenka; PWD=cjyzcjyz; OLE DB Services=-2;";
	ADOСоединение.ConnectionString = "SERVER=10.0.0.40; DRIVER=SQL Server; UID=" + ПользовательSQL + "; PWD=" + ПарольSQL + "; OLE DB Services=-2;";
	//---АК Susk (Суслин К.В.) 
	
	ADOСоединение.Open();
	
	ОтборТДТов = "";
	МассивИДТов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("id_tov");
	Для Каждого ИДТов Из МассивИДТов Цикл
		ОтборТДТов = ОтборТДТов + "'" + Формат(ИДТов, "ЧГ=") + "',";
	КонецЦикла;
	ОтборТДТов = Лев(ОтборТДТов, СтрДлина(ОтборТДТов) - 1); // убираем последнюю запятую
	
	ТекстЗапросаSQL =
		"SELECT
		|	id_tov, Ost_kon, ShopNo_rep
		|FROM SMS_REPL..TD_ost WITH(NOLOCK)
		|WHERE id_tov IN (" + ОтборТДТов + ") AND Ost_kon != 0";
	
	ТЗнОстатки = Новый ТаблицаЗначений;
	ТЗнОстатки.Колонки.Добавить("ShopNo_rep", Новый ОписаниеТипов("Число"));
	ТЗнОстатки.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТЗнОстатки.Колонки.Добавить("Ost_kon", Новый ОписаниеТипов("Число"));
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Пока НЕ rs.EOF() Цикл
		
		СтруктураСтроки = Новый Структура();
		Для Каждого Field Из rs.Fields Цикл
			СтруктураСтроки.Вставить(Field.Name, Field.Value);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ТЗнОстатки.Добавить(), СтруктураСтроки);
		
		rs.MoveNext();
	КонецЦикла;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОстатки.ShopNo_rep,
		|	ТаблицаОстатки.id_tov,
		|	ТаблицаОстатки.Ost_kon
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	&ТаблицаОстатки КАК ТаблицаОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура
		|				ИЗ
		|					Товары КАК Товары)) КАК ЦеныПоставщиковСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЭтоСклад,
		|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
		|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ТаблицаОстатки.Ost_kon, 0) КАК ПотенциальноеКоличество,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ТаблицаОстатки.Ost_kon КАК СуммаПотенциальногоВозврата
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
		|		ПО (ТаблицаОстатки.id_tov = Товары.id_tov)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ВЫБОР
		|				КОГДА Товары.НеВедетсяУчетПоХарактеристикам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ Товары.Характеристика = ЦеныНоменклатуры.Характеристика
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО (ТаблицаОстатки.ShopNo_rep = СтруктурныеЕдиницы.НомерТочки)
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.НомерТочки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0),
		|	0,
		|	0
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ВЫБОР
		|				КОГДА Товары.НеВедетсяУчетПоХарактеристикам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ Товары.Характеристика = ЦеныНоменклатуры.Характеристика
		|			КОНЕЦ),
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.id_TT = 8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.НомерТочки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0),
		|	0,
		|	0
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ВЫБОР
		|				КОГДА Товары.НеВедетсяУчетПоХарактеристикам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ Товары.Характеристика = ЦеныНоменклатуры.Характеристика
		|			КОНЕЦ),
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.id_TT = 30
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоСклад УБЫВ,
		|	НомерТочки
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТЗнОстатки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
	Иначе
		ТЗнЗапроса = РезультатЗапроса.Выгрузить();
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Загрузить(ТЗнЗапроса);
		Иначе
			Для Каждого СтрокаТЗн Из ТЗнЗапроса Цикл
				ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТЗн);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТЗнТоварыНаСервере();
	
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		МассивНайденныхСтрок = ТЗнТовары.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Элементы.ТЗнТовары.ТекущаяСтрока = МассивНайденныхСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамSQL(ТекНоменклатура = Неопределено, ТекХарактеристика = Неопределено, ДатаПроизводстваНач = '00010101', ДатаПроизводстваКон = '00010101', УИДСтрокиНоменклатуры = "")
	
	МенеджерВремТаб = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.id_tov КАК id_tov,
		|	Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		|	Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка
		|			И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТекНоменклатура = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|						И ВЫБОР
		|							КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЗначенияСвойствОбъектов.Значение = &Контрагент
		|						КОНЕЦ
		|			ИНАЧЕ Номенклатура.Ссылка = &ТекНоменклатура
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТекХарактеристика = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка = &ТекХарактеристика
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	id_tov
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.id_tov,
		|	Товары.Производитель,
		|	Товары.Характеристика
		|ИЗ
		|	Товары КАК Товары");
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("ТекХарактеристика", ТекХарактеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
		Возврат;
 	КонецЕсли;
	
	СписокНоменклатурыДляОтбора = Новый СписокЗначений;
	Если ТекНоменклатура <> Неопределено Тогда СписокНоменклатурыДляОтбора.Добавить(ТекНоменклатура); КонецЕсли;
	
	СписокПоставщиковДляОтбора = Новый СписокЗначений;
	// со списком поставщиков не работает, может, в тестовой?
	//Если ТекХарактеристика <> Неопределено Тогда
	//	СписокПоставщиковДляОтбора = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Производитель");
	//ИначеЕсли ЗначениеЗаполнено(Объект.Поставщик) Тогда
	//	СписокПоставщиковДляОтбора.Добавить(Объект.Поставщик);
	//КонецЕсли;
	
	ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
	ТЗнОстатки = ОбработкаПочтоваяРассылкаОбъект.ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора);
	ОбработкаПочтоваяРассылкаОбъект = Неопределено;
	
	//ТаблицаДанных = Новый ТаблицаЗначений();
	//ТаблицаДанных.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//ТаблицаДанных.Колонки.Добавить("id_ТТ", Новый ОписаниеТипов("Число"));
	//ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТаблицаДанных.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	//ТаблицаДанных.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	//ТаблицаДанных.Колонки.Добавить("ОстатокНаТочке", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОстатки.ТТ,
		|	ТаблицаОстатки.Номенклатура,
		|	ТаблицаОстатки.Поставщик,
		|	ТаблицаОстатки.ОстатокНаТочке
		|ПОМЕСТИТЬ ТаблицаОстаткиSQL
		|ИЗ
		|	&ТаблицаОстатки КАК ТаблицаОстатки
		|ГДЕ
		|	ТаблицаОстатки.ОстатокНаТочке <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЭтоСклад,
		|	ТаблицаОстатки.ТТ,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладСклада,
		|	ТаблицаОстатки.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ТаблицаОстатки.Поставщик,
		|	ТаблицаОстатки.ОстатокНаТочке
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	ТаблицаОстаткиSQL КАК ТаблицаОстатки
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаОстатки.ТТ КАК Справочник.СтруктурныеЕдиницы).ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		|
		//+++АК SHEP 2018.05.08 ИП-00018566: убрать заполнение складов
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ИСТИНА,
		//|	ТоварыНаСкладахОстатки.Склад.Владелец,
		//|	ТоварыНаСкладахОстатки.Склад,
		//|	ТоварыНаСкладахОстатки.Номенклатура,
		//|	ТоварыНаСкладахОстатки.Характеристика,
		//|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		//|	ТоварыНаСкладахОстатки.КоличествоОстаток
		//|ИЗ
		//|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		//|			,
		//|			Склад.Владелец.id_TT В (8, 30)
		//|				И Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
		//|				И (Номенклатура, Характеристика) В
		//|					(ВЫБРАТЬ
		//|						Товары.Номенклатура,
		//|						Товары.Характеристика
		//|					ИЗ
		//|						Товары КАК Товары)
		//|				И ВЫБОР
		//|					КОГДА &ДатаПроизводстваКон <> ДАТАВРЕМЯ(1, 1, 1)
		//|						ТОГДА ДатаПроизводства МЕЖДУ &ДатаПроизводстваНач И &ДатаПроизводстваКон
		//|					КОГДА &ДатаПроизводстваНач <> ДАТАВРЕМЯ(1, 1, 1)
		//|						ТОГДА ДатаПроизводства >= &ДатаПроизводстваНач
		//|					ИНАЧЕ ИСТИНА
		//|				КОНЕЦ) КАК ТоварыНаСкладахОстатки
		//---АК SHEP 2018.05.08
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстаткиSQL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура
		|				ИЗ
		|					Товары КАК Товары)) КАК ЦеныПоставщиковСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатки.ЭтоСклад КАК ЭтоСклад,
		|	СтруктурныеЕдиницы.Ссылка КАК Магазин,
		|	СтруктурныеЕдиницы.НомерТочки КАК НомерТочки,
		|	ТаблицаОстатки.СкладСклада КАК СкладСклада,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	&ДатаПроизводстваНач КАК ДатаПроизводстваНач,
		|	&ДатаПроизводстваКон КАК ДатаПроизводстваКон,
		|	&УИДСтрокиНоменклатуры КАК УИДСтрокиНоменклатуры,
		|	ЕСТЬNULL(ТаблицаОстатки.ОстатокНаТочке, 0) КАК ПотенциальноеКоличество,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ТаблицаОстатки.ОстатокНаТочке КАК СуммаПотенциальногоВозврата
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|			ПО ТаблицаОстатки.ТТ = СтруктурныеЕдиницы.Ссылка
		|		ПО Товары.Номенклатура = ТаблицаОстатки.Номенклатура
		|			И (ВЫБОР
		|				КОГДА ТаблицаОстатки.ЭтоСклад
		|					ТОГДА Товары.Характеристика = ТаблицаОстатки.Характеристика
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ВЫБОР
		|				КОГДА Товары.НеВедетсяУчетПоХарактеристикам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ Товары.Характеристика = ЦеныНоменклатуры.Характеристика
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL
		//+++АК ILIK 2018.08.08 ИП-00019413
		//|	И НЕ СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт)
		|	И НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен))
		//---АК ILIK
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоСклад УБЫВ,
		|	НомерТочки
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТЗнОстатки);
	Запрос.УстановитьПараметр("ДатаПроизводстваНач", ДатаПроизводстваНач);
	Запрос.УстановитьПараметр("ДатаПроизводстваКон", ДатаПроизводстваКон);
	Запрос.УстановитьПараметр("УИДСтрокиНоменклатуры", УИДСтрокиНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
	Иначе
		ТЗнЗапроса = РезультатЗапроса.Выгрузить();
		Если ТекНоменклатура = Неопределено Тогда
			Объект.Товары.Загрузить(ТЗнЗапроса);
		Иначе
			Для Каждого СтрокаТЗн Из ТЗнЗапроса Цикл
				
				ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТЗн);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТЗнОстатки = Неопределено;
	
	ОбновитьТЗнТоварыНаСервере();
	
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		МассивНайденныхСтрок = ТЗнТовары.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Элементы.ТЗнТовары.ТекущаяСтрока = МассивНайденныхСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборПоНоменклатуре(Команда)
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.ТоварыОтключитьОтборПоНоменклатуре.Видимость = Ложь;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуОтбора()
	Возврат "Номенклатура,Характеристика,ЕдиницаИзмерения,Цена,ДатаПроизводстваНач,ДатаПроизводстваКон,УИДСтрокиНоменклатуры";
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОтбора(ТекущиеДанные)
	
	СтруктураОтбор = Новый Структура(ПолучитьСтрокуОтбора());
	ЗаполнитьЗначенияСвойств(СтруктураОтбор, ТекущиеДанные);
	Возврат СтруктураОтбор;
	
КонецФункции // ПолучитьСтруктуруОтбора()
  
&НаКлиенте
Процедура ТЗнТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "Количество") = 0 Тогда Возврат; КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтбор = ПолучитьСтруктуруОтбора(ТекущиеДанные);
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	ТекущийЭлемент = Элементы.СтраницаПоМагазинам;
	Элементы.ТоварыОтключитьОтборПоНоменклатуре.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтруктураОтбор = Элементы.Товары.ОтборСтрок;
	Если СтруктураОтбор = Неопределено Тогда
		Предупреждение(
			"Должен быть установлен отбор по номенклатуре!
			|
			|На закладке ""Товар"" в строке номенклатуры щёлкните 2 раза мышкой в значении столбца ""Потенц. к-во"".");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Объект.СвереноСПоставщиком Тогда
		Предупреждение("После согласования с поставщиком новые магазины добавлять запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда Отказ = Истина; Возврат; КонецЕсли;
	Элементы.ТоварыМагазин.ТолькоПросмотр = Ложь;
	Элементы.ТоварыСкладСклада.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		СтруктураОтбор = Элементы.Товары.ОтборСтрок;
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СтруктураОтбор);
	КонецЕсли;
	ОтработанноеКоличествоБыло = Элемент.ТекущиеДанные.ОтработанноеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		ОбновитьТЗнТоварыНаСервере();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПоМагазинам Тогда
		
		// если у нас один товар, по умолчанию устанавливаем отбор по нему
		Если ТЗнТовары.Количество() = 1 Тогда
			СтруктураОтбор = ПолучитьСтруктуруОтбора(ТЗнТовары[0]);
			Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
		КонецЕсли;
		
		Элементы.ТоварыОтключитьОтборПоНоменклатуре.Видимость = (Элементы.Товары.ОтборСтрок <> Неопределено);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРасчётБонусов Тогда
		
		Если Объект.ВозвратБонусовПроцентВозврата = 0 Тогда Объект.ВозвратБонусовПроцентВозврата = 100; КонецЕсли;
		
		// перезаполняем Номенклатуру и Характеристику товара по УИДСтрокиНоменклатуры
		Если Объект.РасчётБонусов.Количество() > 0 Тогда ОбновитьТЧРасчётБонусовНаСервере(); КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
Перем Товары;

	Товары = Объект.Товары;
	
	Объект.СуммаПотенциальногоВозврата = Товары.Итог("СуммаПотенциальногоВозврата");
	Объект.СуммаРеализованногоВозврата = Товары.Итог("СуммаРеализованногоВозврата");
	Объект.СуммаКомпенсации = Объект.КомпенсацияПоМагазинам.Итог("Сумма");
	Если ЭтоВозвратНаСклад Тогда
		СуммаПотенциальнойКомпенсации = Объект.КомпенсацияПоМагазинам.Количество() * 500;
		ИтогоПотенциальнаяСумма = Объект.СуммаПотенциальногоВозврата + СуммаПотенциальнойКомпенсации;
		ИтогоРеализованнаяСумма = Объект.СуммаРеализованногоВозврата + Объект.СуммаКомпенсации;
	КонецЕсли;
	
	Элементы.ТЗнТоварыПотенциальноеКоличество.ТекстПодвала = Товары.Итог("ПотенциальноеКоличество");
	Элементы.ТЗнТоварыСуммаПотенциальногоВозврата.ТекстПодвала = Объект.СуммаПотенциальногоВозврата;
	Элементы.ТЗнТоварыРеализованноеКоличество.ТекстПодвала = Товары.Итог("РеализованноеКоличество");
	Элементы.ТЗнТоварыСуммаРеализованногоВозврата.ТекстПодвала = Объект.СуммаРеализованногоВозврата;
	Элементы.ТЗнТоварыОтработанноеКоличество.ТекстПодвала = Товары.Итог("ОтработанноеКоличество");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗнТоварыНаСервере(ОбновлятьКомпенсацию = Истина)
	
	ТЗн = Объект.Товары.Выгрузить();
	
	ЭтоВозвратНаСклад = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад"));
	ЭтоСамовывоз = (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов"));
	
	//Если НЕ (ЭтоВозвратНаСклад ИЛИ ЭтоСамовывоз) И ЗначениеЗаполнено(Объект.Склад) Тогда
	//	НужныйСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	//ИначеЕсли ЭтоСамовывоз И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	//	НужныйСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.СкладСамовывозПоставщика");
	//КонецЕсли;
	
	НужныйСклад = РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ВернутьСклад(Объект.ТипЗадания);
	Если Объект.Склад <> НужныйСклад Тогда Объект.Склад = НужныйСклад; КонецЕсли;
	
	Если ОбновлятьКомпенсацию Тогда
		Объ = РеквизитФормыВЗначение("Объект");
		Объ.ОбновитьСуммуКомпенсации();
		ЗначениеВРеквизитФормы(Объ, "Объект");
		//Если ЭтоВозвратНаСклад Тогда
		//	ТЗнКомпенсация = ТЗн.Скопировать();
		//	ТЗнКомпенсация.Свернуть("Магазин", "");
		//	ТЗнКомпенсация.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		//	ТЗнКомпенсация.ЗаполнитьЗначения(500, "Сумма");
		//	Объект.КомпенсацияПоМагазинам.Загрузить(ТЗнКомпенсация);
		//ИначеЕсли Объект.КомпенсацияПоМагазинам.Количество() > 0 Тогда
		//	Объект.КомпенсацияПоМагазинам.Очистить();
		//КонецЕсли;
	КонецЕсли;
	
	ТЗн.Свернуть(ПолучитьСтрокуОтбора(), "ПотенциальноеКоличество,СуммаПотенциальногоВозврата,РеализованноеКоличество,СуммаРеализованногоВозврата,ОтработанноеКоличество");
	ТЗн.Сортировать("Номенклатура");
	ТЗнТовары.Загрузить(ТЗн);
	
	ЭтоНовыйОбъект = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	//+++АК SHEP 20170117: если у одного из товаров нет штрих-кода, делаем СканироватьШтрихкод = Ложь и недоступным
	Если ЭтоНовыйОбъект Тогда
		СканироватьШтрихкодДоступность = СканироватьШтрихкодДоступность(ТЗнТовары);
		Если НЕ СканироватьШтрихкодДоступность И Объект.СканироватьШтрихкод Тогда
			Объект.СканироватьШтрихкод = Ложь;
		ИначеЕсли СканироватьШтрихкодДоступность И НЕ Объект.СканироватьШтрихкод И Объект.Дата >= Дата("20170323") Тогда
			Объект.СканироватьШтрихкод = Истина;
		КонецЕсли;
		Элементы.ТЗнТоварыСканироватьШтрихкод.Доступность = СканироватьШтрихкодДоступность;
	КонецЕсли;
	//---АК SHEP 20170117
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПотенциальноеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные.СуммаПотенциальногоВозврата = ТекущиеДанные.Цена * ТекущиеДанные.ПотенциальноеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыНоменклатураПриИзменении(Элемент)
	
	//ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда Возврат;
	//ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат;
	//КонецЕсли;
	//
	//Если НЕ ТЗнТоварыНоменклатураПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
	//	// все имеющиеся характеристики по товару не добавляются, а фильтруются в списке характеристик для выбора
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТЗнТоварыНоменклатураПриИзмененииНаСервере(ТекущиеДанныеИД)
Перем ТекНоменклатура;

	ТекущиеДанные = ТЗнТовары.НайтиПоИдентификатору(ТекущиеДанныеИД);
	
	ТекНоменклатура = ТекущиеДанные.Номенклатура;
	ТекХарактеристика = ТекущиеДанные.Характеристика;
	
	Если ТекХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка") ИЛИ ТекХарактеристика.Владелец <> ТекНоменклатура Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			|	Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка
			|			И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
			|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
			//|	И ЗначенияСвойствОбъектов.Значение = &Контрагент
			|	И ХарактеристикиНоменклатуры.Владелец = &Номенклатура");
		//Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
		Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаЗапроса.Количество() = 1 Тогда
			ВыборкаЗапроса.Следующий();
			ТекХарактеристика = ВыборкаЗапроса.Характеристика;
		Иначе
			ТекущиеДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.ЕдиницаИзмерения = ТекНоменклатура.ЕдиницаХраненияОстатков;
	ТекущиеДанные.Цена = ПолучитьЦенуПоставщика(ТекНоменклатура, ТекХарактеристика, ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Дата), Объект.Поставщик);
	Если ПредПоставщик <> Объект.Поставщик Тогда
		ПредПоставщик = Объект.Поставщик;
	КонецЕсли;
	Если ТекущиеДанные.Цена = 0 Тогда
		Сообщить("Цена нулевая или характеристика не соответствует поставщику!");
		Возврат Ложь;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Поставщик не заполнен!";
	//	Сообщение.Поле = "Объект.Поставщик";
	//	Сообщение.УстановитьДанные(Объект);
	//	Сообщение.Сообщить(); 
	//	Возврат;
	//КонецЕсли;
	
	ТекущиеДанные.УИДСтрокиНоменклатуры = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьПоОстаткамSQL(ТекНоменклатура, ТекХарактеристика, ТекущиеДанные.ДатаПроизводстваНач, ТекущиеДанные.ДатаПроизводстваКон, ТекущиеДанные.УИДСтрокиНоменклатуры);
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПоставщика(Номенклатура, Характеристика, Период, Поставщик)
	Возврат РегистрыСведений.ЦеныПоставщиков.ПолучитьЦенуПоставщика(Номенклатура, Характеристика, Период, Поставщик);
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписатьЗаданиеТехнологаМагазинам" Тогда
		Попытка
			НеМенятьАвтораДокумента = Истина;
			Записать();
		Исключение КонецПопытки;
		НеМенятьАвтораДокумента = Ложь;
	ИначеЕсли ИмяСобытия = "ОбновитьСуммыРеализованногоВозврата" Тогда
		ОбновитьСуммыРеализованногоВозвратаНаСервере(Источник);
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыРеализованногоВозвратаНаСервере(ДокументИсточник)
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ОбновитьТЗнТоварыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НеМенятьАвтораДокумента = Ложь;
	
	// создаём задачи технолога по всем магазинам (сначала) и по новым (потом)
	СоздатьДокументыЗадачаТехнолога(ТекущийОбъект);
	
	// 3а) информировать одним письмом автора создания и технолога с товароведом товара и характеристики,
	// что создано такое задание и его состав с суммами и количествами,
	Если СоздаватьДокументыЗадачаТехнолога Тогда
		Попытка
			СформироватьСообщенияСотрудникам(ТекущийОбъект, Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Документ.ЗаданиеТехнологаМагазинам", УровеньЖурналаРегистрации.Ошибка,, ТекущийОбъект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	//+++АК SHEP 2018.08.29 ИП-00019388
	Если ИзмененаДатаАвтозакрытия Тогда
		ТекущийОбъект.ИзменитьДокументыЗадачаТехнологаИзмененаДатаАвтозакрытия();
	КонецЕсли;
	//---АК SHEP 2018.08.29
	
	// изменяем документы, если изменён тип задания
	ИзменитьДокументыЗадачаТехнолога(ТекущийОбъект);
	
	Если ИзменёнТипЗадания Тогда
		Попытка
			СформироватьСообщенияСотрудникам(ТекущийОбъект, Ложь);
		Исключение
			Сообщить(ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Документ.ЗаданиеТехнологаМагазинам", УровеньЖурналаРегистрации.Ошибка,, ТекущийОбъект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если ОповещатьОСменеДатыВывоза Тогда ОповеститьОСменеДатыВывоза(ТекущийОбъект); КонецЕсли;
	
	ПриЧтенииНаСервере(ТекущийОбъект);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Созданы документы ""Задача технолога"", запрещено удалять товары!");
		Отказ = Истина;
		Возврат;
	ИначеЕсли Вопрос("Будут удалены все магазины!" + Символы.ПС + Символы.ПС + "Удалить строку?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = ПолучитьСтруктуруОтбора(ТекущиеДанные);
	ТоварыУдалитьСтроки(СтруктураОтбор);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыУдалитьСтроки(СтруктураОтбор)
	
	Товары = Объект.Товары;
	МассивСтрок = Товары.НайтиСтроки(СтруктураОтбор);
	Для Каждого СтрокаТовары Из МассивСтрок Цикл
		Товары.Удалить(СтрокаТовары);
	КонецЦикла;
	
	ОбновитьТЗнТоварыНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСообщенияМагазинам(Ссылка, МассивМагазинов, НоваяЗадача = Истина) Экспорт
Перем НомерДатаСтр;
Перем СтрокаОтбор, ТЗнСписокНоменклатуры, СтрокаТЗн;
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда Возврат; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерДатаСтр = " №" + СокрЛП(Ссылка.Номер) + " от " + Формат(Ссылка.Дата, "ДФ='dd.MM.yyyy HH:mm'");
	Тема = ?(НоваяЗадача = Истина, "Новая", "Изменена") + " задача технолога" + НомерДатаСтр;
	Если ТипЗнч(НоваяЗадача) = Тип("Булево") Тогда
		
		СоответствиеДействийТипамЗадания = Новый Соответствие;
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок,			"Убери с полки и внеси количество в задание технолога");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов,	"Выбрасывай");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад,		"Распечатай документы и жди машину со склада, отдавай под роспись");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов,	"Распечатай документы и жди машину поставщика, отдавай под роспись");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт,	"Выбрасывай");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки,		"Выставляй обратно на полки и продолжать торговать");
		
		ТекстСообщения = ?(НоваяЗадача, "Создана новая задача", "Изменён тип задания в задаче") + НомерДатаСтр + "
			|Комментарий: %Комментарий%.
			|
			|Просьба выполнить отработку задачи:
			|%ДействияПоДокументу%.
			|Если ничего нет, то обязательно внеси ноль!
			|по номеклатуре:
			|%СписокНоменклатурыСтр%";
		
		ДействияПоДокументу = ?(Истина, СоответствиеДействийТипамЗадания[Ссылка.ТипЗадания], Строка(Ссылка.ТипЗадания));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДействияПоДокументу%", ДействияПоДокументу +
			?(Ссылка.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок,
			"", "," + Символы.ПС + "и внеси дату физического выполнения этой операции в задание технолога!"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Комментарий%", Ссылка.Комментарий);
		
	ИначеЕсли НоваяЗадача = "ДатаВывоза" Тогда
		ТекстСообщения = "По задаче технолога" + НомерДатаСтр + "
			|изменена дата вывоза на " + Формат(Ссылка.ДатаВывоза, "ДФ='dd.MM.yyyy'") + ".
			|Просьба подготовить товар к вывозу и распечатать документы для его передачи из задачи технолога.
			|После передачи товара в задаче технолога нужно указать факт. дату выполнения.
			|
			|Список номенклатуры:
			|%СписокНоменклатурыСтр%";
	КонецЕсли;
	
	СтрокаОтбор = "Номенклатура,Характеристика,ДатаПроизводстваНач,ДатаПроизводстваКон";
	ТЗнСписокНоменклатуры = Ссылка.Товары.Выгрузить(, СтрокаОтбор);
	ТЗнСписокНоменклатуры.Свернуть(СтрокаОтбор);
	ТЗнСписокНоменклатуры.Колонки.Добавить("ВсеПартии", Новый ОписаниеТипов("Булево"));
	ТЗнСписокНоменклатуры.Колонки.Добавить("БезДатПроизводства", Новый ОписаниеТипов("Булево"));
	ТЗнСписокНоменклатуры.ЗаполнитьЗначения(Ссылка.ВсеПартии, "ВсеПартии");
	ТЗнСписокНоменклатуры.ЗаполнитьЗначения(Ссылка.БезДатПроизводства, "БезДатПроизводства");
	
	СписокНоменклатурыСтр = "";
	Для Каждого СтрокаТЗн Из ТЗнСписокНоменклатуры Цикл
		СписокНоменклатурыСтр = СписокНоменклатурыСтр + Документы.ЗаданиеТехнологаМагазинам.ПредставлениеНоменклатуры(СтрокаТЗн) + Символы.ПС;
	КонецЦикла;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокНоменклатурыСтр%", СписокНоменклатурыСтр);
	
	// Сообщения в 1С отправляем только ВкусВиллам
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&МассивМагазинов)
		|	И СтруктурныеЕдиницы.ТипРозничнойТочки = &ТипРозничнойТочки");
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
		ПараметрыСообщения.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
		ПараметрыСообщения.Вставить("ВсемСменам", Истина);
		ПараметрыСообщения.Вставить("Тема", Тема);
		ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
		ПараметрыСообщения.Вставить("СписокМагазинов", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка")); //СтруктурныеЕдиницы
		ПараметрыСообщения.Вставить("ОбъектИнициатор", Ссылка.Ссылка);
		ПараметрыСообщения.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
		ПараметрыСообщения.Вставить("ШаблонСообщений", Справочники.ШаблоныСообщенийМОС.УведомлениеЗаданиеТехнолога);
		
		СообщениеОбОшибке = "";
		Попытка
			СообщениеОбОшибке = МеханизмОбменаСообщениями.СоздатьИОтправитьСообщение(ПараметрыСообщения, Истина);
			СообщениеОбОшибке = ?(ТипЗнч(СообщениеОбОшибке) = Тип("ДокументСсылка.СообщениеМОС"), "", СообщениеОбОшибке);
		Исключение
			СообщениеОбОшибке = ОписаниеОшибки();
		КонецПопытки; 
		
		Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = "Ошибка формирования сообщений магазинам: " + СообщениеОбОшибке;
			Сообщить(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Документ.ЗаданиеТехнологаМагазинам", УровеньЖурналаРегистрации.Ошибка,, Ссылка.Ссылка, СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	//+++АК SHEP 20161130: отправляем СМС только Избёнкам
	Запрос.УстановитьПараметр("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Избенка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СообщениеОбОшибке = "";
		
		СоответствиеДействийТипамЗадания = Новый Соответствие;
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок,			"останови продажи товара и жди дальнейших указаний");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов,	"411 ШК 980 КОД 21 ПИТОГ скан товара, количество ПИТОГ 730 КОД дата производства ИТОГ, а сам товар выбрасывай. Если ничего нет, то пробивай нулевое количество");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад,		"411 ШК 980 КОД 22 ПИТОГ скан товара, количество ПИТОГ 730 КОД дата производства ИТОГ, и жди машину со склада, отдавай под роспись на копии чека. Если ничего нет, то пробивай нулевое количество");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов,	"411 ШК 980 КОД 20 ПИТОГ скан товара, количество ПИТОГ 730 КОД дата производства ИТОГ, и жди машину поставщика, отдавай под роспись на копии чека. Если ничего нет, то пробивай нулевое количество");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт,	"103 ШК скан товара, количество ПИТОГ 730 КОД дата производства ИТОГ, а сам товар выбрасывай. Если ничего нет, то пробивай нулевое количество");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки,		"продолжай торговать этим товаром - ложная тревога");
		
		ДействияПоДокументу = ?(Истина, СоответствиеДействийТипамЗадания[Ссылка.ТипЗадания], Строка(Ссылка.ТипЗадания));
		
		Попытка
			
			ОбработкаПочтоваяРассылкаОбъект = Обработки.ПочтоваяРассылка.Создать();
			ОбработкаПочтоваяРассылкаОбъект.ТорговыеТочки = Истина;
			ОбработкаПочтоваяРассылкаОбъект.Избенка = Истина;
			ОбработкаПочтоваяРассылкаОбъект.АдресОтправителя = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
			ОбработкаПочтоваяРассылкаОбъект.ТекстПисьма = "" + СписокНоменклатурыСтр + " выполнить: " + ДействияПоДокументу +
				?(ПустаяСтрока(Ссылка.Комментарий), "", ". Прим.: " + Ссылка.Комментарий);
			
			МассивМагазиновДляОтправки = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого ЭлементМассива Из МассивМагазиновДляОтправки Цикл
				ОбработкаПочтоваяРассылкаОбъект.СписокТТ.Добавить().ТорговаяТочка = ЭлементМассива;
			КонецЦикла; 
			//ОбработкаПочтоваяРассылкаОбъект.СписокТТ.ЗагрузитьКолонку(МассивМагазиновДляОтправки, "ТорговаяТочка");
			ОбработкаПочтоваяРассылкаОбъект.ОтправитьСМСНаСервере();
			ОбработкаПочтоваяРассылкаОбъект = Неопределено;
			
		Исключение
		    СообщениеОбОшибке = ОписаниеОшибки();
		КонецПопытки; 
		
		Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = "Ошибка при отправке СМС магазинам: " + СообщениеОбОшибке;
			Сообщить(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Документ.ЗаданиеТехнологаМагазинам", УровеньЖурналаРегистрации.Ошибка,, Ссылка.Ссылка, СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	//---АК SHEP 20161130
	
	//+++АК SHEP 20161013: убрал первичную рассылку по эл. почте
	Если НоваяЗадача <> Ложь Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.АдресЭлектроннойПочты КАК АдресЭП
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&МассивМагазинов)
		|	И (ВЫРАЗИТЬ(СтруктурныеЕдиницы.АдресЭлектроннойПочты КАК СТРОКА(1))) <> """"");
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаАдресовЭП = "";
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл		
		СтрокаАдресовЭП = СтрокаАдресовЭП + ?(ПустаяСтрока(СтрокаАдресовЭП), "", ";") + ВыборкаЗапроса.АдресЭП;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаАдресовЭП) Тогда
		Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение(Тема, ТекстСообщения, СтрокаАдресовЭП, "Задача технолога");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСообщенияСотрудникам(Ссылка, ЭтоНоваяЗадача = Истина) Экспорт
Перем НомерДатаСтр;
Перем СтрокаОтбор, ТЗнСписокНоменклатуры, СтрокаТЗн;
	
	Если ОбщегоНазначения.ЭтоКопияБазы() Тогда Возврат; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерДатаСтр = " №" + СокрЛП(Ссылка.Номер) + " от " + Формат(Ссылка.Дата, "ДФ='dd.MM.yyyy HH:mm'");
	Тема = ?(ЭтоНоваяЗадача = Истина, "Новая", "Изменена") + " задача технолога" + НомерДатаСтр;
	Если ТипЗнч(ЭтоНоваяЗадача) = Тип("Булево") Тогда
		
		ТекстСообщения = ?(ЭтоНоваяЗадача, "Создана новая задача", "Изменён тип задания в задаче") + НомерДатаСтр + "
			|Автор" + ?(ЭтоНоваяЗадача, ": " + Ссылка.Автор, " изменений: " + Ссылка.АвторИзменений) + "
			|Комментарий: %Комментарий%.
			|
			|Тип задания: %ДействияПоДокументу%.
			|
			|Список номенклатуры:
			|%СписокНоменклатурыСтр%";
		
		ДействияПоДокументу = Строка(Ссылка.ТипЗадания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДействияПоДокументу%", ДействияПоДокументу);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Комментарий%", Ссылка.Комментарий);
		
	ИначеЕсли ЭтоНоваяЗадача = "ДатаВывоза" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтбор = "Номенклатура,Характеристика,ДатаПроизводстваНач,ДатаПроизводстваКон";
	ТЗнСписокНоменклатуры = Ссылка.Товары.Выгрузить(, СтрокаОтбор);
	ТЗнСписокНоменклатуры.Свернуть(СтрокаОтбор);
	ТЗнСписокНоменклатуры.Колонки.Добавить("ВсеПартии", Новый ОписаниеТипов("Булево"));
	ТЗнСписокНоменклатуры.Колонки.Добавить("БезДатПроизводства", Новый ОписаниеТипов("Булево"));
	ТЗнСписокНоменклатуры.ЗаполнитьЗначения(Ссылка.ВсеПартии, "ВсеПартии");
	ТЗнСписокНоменклатуры.ЗаполнитьЗначения(Ссылка.БезДатПроизводства, "БезДатПроизводства");
	
	СписокНоменклатурыСтр = "";
	Для Каждого СтрокаТЗн Из ТЗнСписокНоменклатуры Цикл
		СписокНоменклатурыСтр = СписокНоменклатурыСтр + Документы.ЗаданиеТехнологаМагазинам.ПредставлениеНоменклатуры(СтрокаТЗн) + Символы.ПС;
	КонецЦикла;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокНоменклатурыСтр%", СписокНоменклатурыСтр);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		//+++ AK suvv 19.04.2018 ИП-00018417
		//|	ЗаданиеТехнологаМагазинамТовары.Характеристика
		|	ЗаданиеТехнологаМагазинамТовары.Характеристика,
		|	ЗаданиеТехнологаМагазинамТовары.Магазин
		//--- AK suvv
		|ПОМЕСТИТЬ ЗаданиеТехнологаМагазинамТовары
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|ГДЕ
		|	ЗаданиеТехнологаМагазинамТовары.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданиеТехнологаМагазинам.Автор.ФизЛицо,
		|	""Автор"" КАК ТипРолиСтр,
		|	0 КАК ЭтоСотрудникСклада,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП,
		|	NULL КАК РольПользователя
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|		ПО (ЗаданиеТехнологаМагазинамТовары.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ЗаданиеТехнологаМагазинам.Автор.ФизЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	&ЭтоНоваяЗадача
		|	И ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Технолог по качеству"",
		|	0,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)),
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|ИЗ
		|	ЗаданиеТехнологаМагазинамТовары КАК ЗаданиеТехнологаМагазинамТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследнихХ
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (СоответствиеОбъектРольСрезПоследнихХ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследнихК
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект ЕСТЬ NULL )
		|			И (ЗначенияСвойствОбъектов.Значение = СоответствиеОбъектРольСрезПоследнихК.Объект)
		|			И (СоответствиеОбъектРольСрезПоследнихК.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (РолиПользователейСоставРоли.Ссылка = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя)
		|				ИЛИ РолиПользователейСоставРоли.Ссылка.Родитель = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Товаровед"",
		|	0,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)),
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|ИЗ
		|	ЗаданиеТехнологаМагазинамТовары КАК ЗаданиеТехнологаМагазинамТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследнихХ
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (СоответствиеОбъектРольСрезПоследнихХ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследнихК
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект ЕСТЬ NULL )
		|			И (ЗначенияСвойствОбъектов.Значение = СоответствиеОбъектРольСрезПоследнихК.Объект)
		|			И (СоответствиеОбъектРольСрезПоследнихК.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)
		|					И Объект ССЫЛКА Справочник.РолиПользователей) КАК СоответствиеОбъектРольСрезПоследнихБМ
		|		ПО (ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (СоответствиеОбъектРольСрезПоследнихБМ.Объект = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследнихБМ.РольПользователя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	&ЭтоНоваяЗадача
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АК_ГруппыРассылки.ФизЛицо,
		|	""Списания (горячка)"",
		|	2,
		|	ВЫРАЗИТЬ(АК_ГруппыРассылки.Емейл КАК СТРОКА(150)),
		|	NULL
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам,
		|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
		|ГДЕ
		|	ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И ЗаданиеТехнологаМагазинам.ТипЗадания В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов), ЗНАЧЕНИЕ(Перечисление.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт))
		|	И АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.ЗаданияТехнологов_ДляСписаний)
		|	И (ВЫРАЗИТЬ(АК_ГруппыРассылки.Емейл КАК СТРОКА(150))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Сотрудник склада"",
		|	1,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)),
		|	РолиПользователейСоставРоли.Ссылка
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|			ПО ЗаданиеТехнологаМагазинамТовары.Магазин = СтруктурныеЕдиницы.Ссылка
		|		ПО (ЗаданиеТехнологаМагазинамТовары.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка),
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
		|ГДЕ
		|	ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И РолиПользователейСоставРоли.Ссылка.Наименование = ""Сотрудники склада для заданий технологов""
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"
		|
		//+++ AK suvv 19.04.2018 ИП-00018417
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Технолог по качеству (дневной)"",
		|	0,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)),
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|ИЗ
		|	ЗаданиеТехнологаМагазинамТовары КАК ЗаданиеТехнологаМагазинамТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной)
		|					И Объект ССЫЛКА Справочник.СтруктурныеЕдиницы) КАК СоответствиеОбъектРольСрезПоследнихСЕ
		|		ПО (СоответствиеОбъектРольСрезПоследнихСЕ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И ЗаданиеТехнологаМагазинамТовары.Магазин = СоответствиеОбъектРольСрезПоследнихСЕ.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (СоответствиеОбъектРольСрезПоследнихСЕ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследнихСЕ.РольПользователя
		|				ИЛИ РолиПользователейСоставРоли.Ссылка.Родитель = СоответствиеОбъектРольСрезПоследнихСЕ.РольПользователя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"
		//--- AK suvv
		|ИТОГИ ПО
		|	ЭтоСотрудникСклада");
	Запрос.УстановитьПараметр("ЭтоНоваяЗадача", ЭтоНоваяЗадача);
	Запрос.УстановитьПараметр("ЗаданиеТехнологаМагазинамСсылка", Ссылка.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// сотрудников склада и остальных сотрудников делаем отдельными письмами
	ВыборкаПоСотрудникам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		СтрокаАдресовЭП = "";
		
		ВыборкаДетальныеЗаписи = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаАдресовЭП = СтрокаАдресовЭП + ?(ПустаяСтрока(СтрокаАдресовЭП), "", ";") + ВыборкаДетальныеЗаписи.АдресЭП;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаАдресовЭП) Тогда
			Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение(Тема, ТекстСообщения, СтрокаАдресовЭП, "Задача технолога");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСообщенияПоВозвратуБонусов(ВозвратБонусовЗаНекачественныйТоварСсылка) Экспорт
	
	//Если ОбщегоНазначения.ЭтоКопияБазы() Тогда Возврат; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВозвратыБонусовЗаНекачественныйТовар.Товар КАК Номенклатура,
		|	ВозвратыБонусовЗаНекачественныйТовар.Характеристика,
		|	РолиПользователейСоставРоли.Сотрудник,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
		|ИЗ
		|	Справочник.ВозвратыБонусовЗаНекачественныйТовар КАК ВозвратыБонусовЗаНекачественныйТовар,
		|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
		|ГДЕ
		|	ВозвратыБонусовЗаНекачественныйТовар.Ссылка = &ВозвратБонусовЗаНекачественныйТоварСсылка
		|	И РолиПользователейСоставРоли.Ссылка.Наименование = ""Задания технологов:уведомления по возврату бонусов""
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))) <> """"");
	Запрос.УстановитьПараметр("ВозвратБонусовЗаНекачественныйТоварСсылка", ВозвратБонусовЗаНекачественныйТоварСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	СтрокаАдресовЭП = "";
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаАдресовЭП = СтрокаАдресовЭП + ?(ПустаяСтрока(СтрокаАдресовЭП), "", ";") + ВыборкаДетальныеЗаписи.АдресЭП;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаАдресовЭП) Тогда
		Тема = "Необходимо выполнить возврат бонусов";
		ТекстСообщения = "Необходимо выполнить возврат бонусов по созданному элементу из задания технолога: " + Строка(ВозвратБонусовЗаНекачественныйТоварСсылка);
		Документы.ЗаданиеТехнологаМагазинам.ОтправитьСообщение(Тема, ТекстСообщения, СтрокаАдресовЭП, "Задача технолога");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьДокументыЗадачаТехнолога(ТекущийОбъект)
	
	МассивМагазинов = ТекущийОбъект.СоздатьДокументыЗадачаТехнолога();
	
	Если МассивМагазинов.Количество() > 0 Тогда
		СформироватьСообщенияМагазинам(ТекущийОбъект, МассивМагазинов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьДокументыЗадачаТехнолога(ТекущийОбъект)
	
	МассивМагазинов = ТекущийОбъект.ИзменитьДокументыЗадачаТехнолога();
	
	Если МассивМагазинов.Количество() > 0 Тогда
		СформироватьСообщенияМагазинам(ТекущийОбъект, МассивМагазинов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОповеститьОСменеДатыВывоза(ТекущийОбъект)
	
	// оповещаем магазины о смене даты вывоза
	Запрос = Новый Запрос(Отчеты.НеотработанныеЗадачиТехнолога.ПолучитьТекстЗапросаПоНеотработаннымЗадачамТехнолога(Ложь, Истина));
	Запрос.УстановитьПараметр("ДокументОснование", ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	МассивМагазинов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");
	Если МассивМагазинов.Количество() > 0 Тогда
		СформироватьСообщенияМагазинам(ТекущийОбъект, МассивМагазинов, "ДатаВывоза");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	//ОбновитьТЗнТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзменёнТипЗадания = (ЗначениеЗаполнено(ТекущийОбъект.Ссылка) И ТекущийОбъект.ТипЗадания <> ТекущийОбъект.Ссылка.ТипЗадания);
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ИзменёнТипЗадания Тогда
		Отказ = Истина;
		ВызватьИсключение "Был изменён тип задания! Сначала сохраните документ, а потом уже проводите!";
	КонецЕсли;
	
	Если ИзменёнТипЗадания Тогда
		// загружаем задачи по Избёнкам
		ВнешниеОбработкиСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Уведомление по задачам технологов");
		Если ЗначениеЗаполнено(ВнешниеОбработкиСсылка) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВнешниеОбработкиСсылка.ХранилищеВнешнейОбработки.Получить());
			ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
			
			ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки);
			РезультатЗагрузкиОпераций = ВнешняяОбработкаОбъект.ЗагрузкаОперацийПоИзбёнкам(ТекущийОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если НеМенятьАвтораДокумента = Ложь Тогда
		ТекущийОбъект.АвторИзменений = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) И ЗначениеЗаполнено(ТекущийОбъект.ДатаВывоза) И ТекущийОбъект.ДатаВывоза <> ТекущийОбъект.Ссылка.ДатаВывоза Тогда
		ОповещатьОСменеДатыВывоза = Истина;
	Иначе
		ОповещатьОСменеДатыВывоза = Ложь;
	КонецЕсли;
	
	//+++АК SHEP 2018.08.29 ИП-00019388
	ИзмененаДатаАвтозакрытия = ЗначениеЗаполнено(ТекущийОбъект.Ссылка) И ТекущийОбъект.ДатаАвтозакрытия <> ТекущийОбъект.Ссылка.ДатаАвтозакрытия;
	//---АК SHEP 2018.08.29
	
	// сохраняем ТЧ Номенклатура
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ТекущийОбъект.Номенклатура.Загрузить(ТЗнТовары.Выгрузить());
	КонецЕсли;
	
	Если ТекущийОбъект.НеобходимоВернутьБонусы Тогда
		
		//ТЧВозвратБонусовПоКартам = ТекущийОбъект.ВозвратБонусовПоКартам;
		//МассивСтрокДляОбработки = ТЧВозвратБонусовПоКартам.НайтиСтроки(Новый Структура("Начислено", Ложь));
		//Если МассивСтрокДляОбработки.Количество() > 0 Тогда
		//	ПредставлениеСсылки = Строка(ТекущийОбъект.Ссылка);
		//	ЦельНачисления = "Возврат бонусов. " + Лев(ПредставлениеСсылки, СтрДлина(ПредставлениеСсылки) - 9); // убираем время
		//	
		//	Для Каждого СтрокаТЧ Из МассивСтрокДляОбработки Цикл
		//		Обработки.ОтчетыПоКартам.НачислитьБаллыНаКарту(СтрокаТЧ.НомерКарты, , СтрокаТЧ.Сумма, ЦельНачисления);
		//		СтрокаТЧ.Начислено = Истина;
		//	КонецЦикла;
		//КонецЕсли;
		
		МассивСтрокДляОбработки = Объект.РасчётБонусов.НайтиСтроки(
			Новый Структура("ВозвратБонусовЗаНекачественныйТовар", ПредопределенноеЗначение("Справочник.ВозвратыБонусовЗаНекачественныйТовар.ПустаяСсылка")));
		
		Если МассивСтрокДляОбработки.Количество() > 0 Тогда
			ОбновитьТЧРасчётБонусовНаСервере();
			ПредставлениеСсылки = Строка(ТекущийОбъект.Ссылка);
			ПредставлениеСсылки = Лев(ПредставлениеСсылки, СтрДлина(ПредставлениеСсылки) - 9); // убираем время
			
			Для Каждого СтрокаТЧ Из МассивСтрокДляОбработки Цикл
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект = Справочники.ВозвратыБонусовЗаНекачественныйТовар.СоздатьЭлемент();
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.Наименование = "" + Строка(СтрокаТЧ.Номенклатура) + " (" + Строка(СтрокаТЧ.Характеристика) + "). " + ПредставлениеСсылки;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.Товар = СтрокаТЧ.Номенклатура;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.Характеристика = СтрокаТЧ.Характеристика;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.ДатаНачалаПродаж = Объект.ВозвратБонусовНачДата;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.ДатаОкончанияПродаж = Объект.ВозвратБонусовКонДата;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.ПроцентВозврата = Объект.ВозвратБонусовПроцентВозврата;
				СпрВозвратыБонусовЗаНекачественныйТоварОбъект.Записать();
				СтрокаТЧ.ВозвратБонусовЗаНекачественныйТовар = СпрВозвратыБонусовЗаНекачественныйТоварОбъект.Ссылка;
				
				// отправить по электронке
				СформироватьСообщенияПоВозвратуБонусов(СтрокаТЧ.ВозвратБонусовЗаНекачественныйТовар);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыИзменитьЦену(СтруктураОтбор, НоваяЦена)
	
	Товары = Объект.Товары;
	МассивСтрок = Товары.НайтиСтроки(СтруктураОтбор);
	Для Каждого СтрокаТовары Из МассивСтрок Цикл
		СтрокаТовары.Цена = НоваяЦена;
		СтрокаТовары.СуммаПотенциальногоВозврата = СтрокаТовары.ПотенциальноеКоличество * НоваяЦена;
		СтрокаТовары.СуммаРеализованногоВозврата = СтрокаТовары.РеализованноеКоличество * НоваяЦена;
	КонецЦикла;
	
	ОбновитьТЗнТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыЦенаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтбор = ПолучитьСтруктуруОтбора(ТекущиеДанные);
	ТоварыИзменитьЦену(СтруктураОтбор, Число(Текст));
	
КонецПроцедуры

&НаСервере
Процедура ТоварыИзменитьРекъ(СтруктураОтбор, ИмяРекъ, ЗначРекъ)
	
	Товары = Объект.Товары;
	МассивСтрок = Товары.НайтиСтроки(СтруктураОтбор);
	Для Каждого СтрокаТовары Из МассивСтрок Цикл
		СтрокаТовары[ИмяРекъ] = ЗначРекъ;
	КонецЦикла;
	
	ОбновитьТЗнТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыДатаПроизводстваПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтбор = ПолучитьСтруктуруОтбора(ТекущиеДанные);
	ТоварыИзменитьРекъ(СтруктураОтбор, Элемент.Имя, Дата(Текст));
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыДатаПроизводстваПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ИмяРекъ = СтрЗаменить(Элемент.Имя, "ТЗнТовары", "");
	ТоварыИзменитьРекъ(СтруктураОтборТЗнТовары, ИмяРекъ, ТекущиеДанные[ИмяРекъ]);
	
КонецПроцедуры

&НаСервере
Процедура ТЗнТоварыУстановитьТолькоПросмотрКолонок(ТолькоПросмотр)
	
	Элементы.ТЗнТоварыНоменклатура.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТЗнТоварыХарактеристика.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТЗнТоварыЕдиницаИзмерения.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТЗнТоварыЦена.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТЗнТоварыДатаПроизводстваНач.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТЗнТоварыДатаПроизводстваКон.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//ТЗнТоварыУстановитьТолькоПросмотрКолонок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияТехнологу(Команда)
	ОткрытьСправкуФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Созданы документы ""Задача технолога"", запрещено добавлять новые товары!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//ТЗнТоварыУстановитьТолькоПросмотрКолонок(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеМагазинаНаСервере(Знач Товары, Знач ОтборСтрокФикс, Знач Магазин, Знач СкладСклада)
	
	// В 8.2 нет конструктора из фикс. структуры в обычную ((
	ОтборСтрок = Новый Структура;
	Для Каждого КлючИЗначение Из ОтборСтрокФикс Цикл
		ОтборСтрок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ОтборСтрок.Вставить("Магазин", Магазин);
	ОтборСтрок.Вставить("СкладСклада", СкладСклада);
	
	// > 1, т.к. текущий магазин тоже уже есть в списке
	Возврат (Товары.НайтиСтроки(ОтборСтрок).Количество() > 1);
	
КонецФункции

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
Перем ТекущийМагазин;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ТоварыОтработанноеКоличество" Тогда ТекущиеДанные.ОтработанноеКоличество = ОтработанноеКоличествоБыло; КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Проверяем наличие этого магазина в списке
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекущийМагазин = ТекущиеДанные.Магазин;
		ТекущийСкладСклада = ТекущиеДанные.СкладСклада;
		Если ЗначениеЗаполнено(ТекущийМагазин) И ПроверитьНаличиеМагазинаНаСервере(Объект.Товары, Элементы.Товары.ОтборСтрок, ТекущийМагазин, ТекущийСкладСклада) Тогда
			Предупреждение("Магазин/склад ''" + Строка(ТекущийМагазин) + "'' уже есть в списке!");
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыОтработанноеКоличество" И НЕ ОтменаРедактирования Тогда
		
		Если Вопрос("Внимание! Было изменено отработанное количество!
			|
			|Будет изменено количество в задаче технолога. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Элемент.ЗакончитьРедактированиеСтроки(Истина);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СтрокаОшибки = ТоварыОтработанноеКоличествоПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ТекущиеДанные.ОтработанноеКоличество);
		Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Элемент.ЗакончитьРедактированиеСтроки(Истина);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ТоварыОтработанноеКоличество" Тогда
		Элементы.ТоварыМагазин.ТолькоПросмотр = Истина;
		Элементы.ТоварыСкладСклада.ТолькоПросмотр = Истина;
		ОбновитьТЗнТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Запрещено удалять магазины из списка!");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Вопрос("Удалить магазин(ы) из списка?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание технолога магазинам") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТоварыОтработанноеКоличествоПриИзмененииНаСервере(ТекущиеДанныеИД, ОтработанноеКоличество)
Перем ТекМагазин, СтрокаОшибки;
	
	СтрокаОшибки = "";
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИД);
	
	ТекМагазин = ТекущиеДанные.Магазин;
	Если ТекМагазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И ТекМагазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
		СтрокаОшибки = "Изменение отработанного количества не предусмотрено для магазинов «Избёнка»!";
		Возврат СтрокаОшибки;
	ИначеЕсли ТекМагазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт Тогда
		СтрокаОшибки = "Магазин закрыт, менять количество запрещено!";
		Возврат СтрокаОшибки;
	КонецЕсли;
	
	// правим документы "МП_ЗадачаТехнолога", если изменилось отработанное количество
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	МП_ЗадачаТехнолога.Ссылка,
		|	МП_ЗадачаТехнолога.Магазин,
		|	МП_ЗадачаТехнолога.ТипЗадания,
		|	МП_ЗадачаТехнолога.ФактическаяДатаВыполнения,
		|	МП_ЗадачаТехнолога.Проведен
		|ПОМЕСТИТЬ ЗадачиТехнолога
		|ИЗ
		|	Документ.МП_ЗадачаТехнолога КАК МП_ЗадачаТехнолога
		|ГДЕ
		|	МП_ЗадачаТехнолога.ДокументОснование = &Ссылка
		|	И МП_ЗадачаТехнолога.Магазин = &Магазин
		|	И НЕ МП_ЗадачаТехнолога.ПометкаУдаления
		|	И НЕ МП_ЗадачаТехнолога.Закрыта
		//+++АК SHEP 20170109: разрешаем менять отработанное кол-во и для неотработанных магазинов
		//|	И (МП_ЗадачаТехнолога.Проведен
		//|				И МП_ЗадачаТехнолога.ФактическаяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
		//|			ИЛИ МП_ЗадачаТехнолога.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок))
		//---АК SHEP 20170109
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка,
		|	МАКСИМУМ(МП_ЗадачаТехнологаПараметрыЗадачи.ИДСтроки) КАК МаксИДСтроки
		|ПОМЕСТИТЬ МаксИдСтрок
		|ИЗ
		|	Документ.МП_ЗадачаТехнолога.ПараметрыЗадачи КАК МП_ЗадачаТехнологаПараметрыЗадачи
		|ГДЕ
		|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка В
		|			(ВЫБРАТЬ
		|				ЗадачиТехнолога.Ссылка
		|			ИЗ
		|				ЗадачиТехнолога КАК ЗадачиТехнолога)
		|
		|СГРУППИРОВАТЬ ПО
		|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиТехнолога.Ссылка КАК ЗадачаТехнолога,
		|	ЗадачиТехнолога.Магазин,
		|	ЗадачиТехнолога.ТипЗадания,
		|	ЗадачиТехнолога.ФактическаяДатаВыполнения,
		|	ЗадачиТехнолога.Проведен,
		|	ЕСТЬNULL(МаксИдСтрок.МаксИДСтроки, 0) + 1 КАК МаксИДСтроки
		|ИЗ
		|	ЗадачиТехнолога КАК ЗадачиТехнолога
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаксИдСтрок КАК МаксИдСтрок
		|		ПО ЗадачиТехнолога.Ссылка = МаксИдСтрок.Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Магазин", ТекМагазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаОшибки = "Документ ""Задача технолога"" по этому магазину ещё не отработан! Изменение невозможно!";
		Возврат СтрокаОшибки;
	КонецЕсли;
	
	МассивМагазинов = Новый Массив;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЗадачаТехнологаОбъект = ВыборкаЗапроса.ЗадачаТехнолога.ПолучитьОбъект();
		
		МассивСтрокДляИзменения = ЗадачаТехнологаОбъект.ПараметрыЗадачи.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура));
		КвоСтрокДляИзменения = МассивСтрокДляИзменения.Количество();
		Если КвоСтрокДляИзменения = 0 Тогда
			СтрокаОшибки = "Документ ""Задача технолога"" для текущего магазина не найден!";
			Возврат СтрокаОшибки;
		ИначеЕсли КвоСтрокДляИзменения > 1 И ОтработанноеКоличество <> 0 Тогда
			СтрокаОшибки = "В документе ""Задача технолога"" по данной номенклатуре строк больше одной!
				|Нажмите на магазине правой кнопкой ""мышки"" и выберите ""Открыть задачу технолога по магазину"", в открывшемся документе откорректируйте количество!";
			Возврат СтрокаОшибки;
		КонецЕсли;
		
		// меняем КлючСтроки
		МаксИДСтроки = ВыборкаЗапроса.МаксИДСтроки;
		Для Каждого СтрокаТЧ Из МассивСтрокДляИзменения Цикл
			
			Если СтрокаТЧ.Количество = ОтработанноеКоличество Тогда Продолжить; КонецЕсли;
			
			СтрокаТЧ.КлючСтроки = Новый УникальныйИдентификатор;
			СтрокаТЧ.КлючСтрокиСтр = Строка(СтрокаТЧ.КлючСтроки);
			СтрокаТЧ.ИДСтроки = МаксИДСтроки;
			СтрокаТЧ.Количество = ОтработанноеКоличество;
			СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
			МаксИДСтроки = МаксИДСтроки + 1;
			
		КонецЦикла;
		
		//+++АК SHEP 2018.10.01 ИП-00019962
		//Если ЗадачаТехнологаОбъект.ФактическаяДатаВыполнения = Дата(1, 1, 1) Тогда // И ЗадачаТехнологаОбъект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок
		Если ЗадачаТехнологаОбъект.ФактическаяДатаВыполнения = Дата(1, 1, 1) И ЗадачаТехнологаОбъект.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок Тогда
		//---АК SHEP 2018.10.01
			ЗадачаТехнологаОбъект.ФактическаяДатаВыполнения = ТекущаяДата();
		КонецЕсли;
		
		Попытка
			Если НЕ ЗадачаТехнологаОбъект.ПроверитьЗаполнение() Тогда
				СтрокаОшибки = "Ошибка проверки заполнения документа " + Строка(ЗадачаТехнологаОбъект.Ссылка) + ": " + ОписаниеОшибки() + ".
				|Нажмите на магазине правой кнопкой ""мышки"" и выберите ""Открыть задачу технолога по магазину"", открывшийся документ откорректируйте!";
				Возврат СтрокаОшибки;
			КонецЕсли;
			ЗадачаТехнологаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СтрокаОшибки = "Ошибка записи/проведения документа " + Строка(ЗадачаТехнологаОбъект.Ссылка) + ": " + ОписаниеОшибки();
			Возврат СтрокаОшибки;
		КонецПопытки;
		
		Сообщить("Изменён документ " + ЗадачаТехнологаОбъект.Ссылка + " по магазину " + ВыборкаЗапроса.Магазин);
		
		МассивМагазинов.Добавить(ВыборкаЗапроса.Магазин);
		
	КонецЦикла;
	
	//Если МассивМагазинов.Количество() > 0 Тогда
	//	СформироватьСообщенияМагазинам(Объект.Ссылка, МассивМагазинов, Ложь);
	//КонецЕсли;
	
	Возврат СтрокаОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытьЗаданиеНаСервере(ДокументОснование)
	
	Возврат Документы.ЗаданиеТехнологаМагазинам.ВозможноОткрытьЗадание(ДокументОснование);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗадание(Команда)
	
	Если ОткрытьЗаданиеНаСервере(Объект.Ссылка) Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		Предупреждение("Невозможно открыть задание:
			|
			|существуют документы возврата или расх. ордера в закрытом периоде!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтборТЗнТовары = ПолучитьСтруктуруОтбора(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТоваровед(ЗаданиеТехнологаМагазинамСсылка)
Перем ТекСотрудник;
	
	УстановитьПривилегированныйРежим(Истина);
	
    ТекСотрудник = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Если НЕ ЗначениеЗаполнено(ТекСотрудник) ИЛИ НЕ ЗначениеЗаполнено(ЗаданиеТехнологаМагазинамСсылка) Тогда Возврат Ложь; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Товаровед"" КАК ТипРолиСтр,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП,
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		|	ЗаданиеТехнологаМагазинамТовары.Характеристика,
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|		ПО (ЗаданиеТехнологаМагазинамТовары.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследнихХ
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (СоответствиеОбъектРольСрезПоследнихХ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследнихК
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект ЕСТЬ NULL )
		|			И (ЗначенияСвойствОбъектов.Значение = СоответствиеОбъектРольСрезПоследнихК.Объект)
		|			И (СоответствиеОбъектРольСрезПоследнихК.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)
		|					И Объект ССЫЛКА Справочник.РолиПользователей) КАК СоответствиеОбъектРольСрезПоследнихБМ
		|		ПО (ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (СоответствиеОбъектРольСрезПоследнихБМ.Объект = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследнихБМ.РольПользователя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", ТекСотрудник);
	Запрос.УстановитьПараметр("ЗаданиеТехнологаМагазинамСсылка", ЗаданиеТехнологаМагазинамСсылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТехнологПоКачеству(ЗаданиеТехнологаМагазинамСсылка)
Перем ТекСотрудник;
	
	УстановитьПривилегированныйРежим(Истина);
	
    ТекСотрудник = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Если НЕ ЗначениеЗаполнено(ТекСотрудник) ИЛИ НЕ ЗначениеЗаполнено(ЗаданиеТехнологаМагазинамСсылка) Тогда Возврат Ложь; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Технолог по качеству"" КАК ТипРолиСтр,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП,
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		|	ЗаданиеТехнологаМагазинамТовары.Характеристика,
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|		ПО (ЗаданиеТехнологаМагазинамТовары.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследнихХ
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (СоответствиеОбъектРольСрезПоследнихХ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследнихК
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект ЕСТЬ NULL )
		|			И (ЗначенияСвойствОбъектов.Значение = СоответствиеОбъектРольСрезПоследнихК.Объект)
		|			И (СоответствиеОбъектРольСрезПоследнихК.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (РолиПользователейСоставРоли.Ссылка = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя)
		|				ИЛИ РолиПользователейСоставРоли.Ссылка.Родитель = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", ТекСотрудник);
	Запрос.УстановитьПараметр("ЗаданиеТехнологаМагазинамСсылка", ЗаданиеТехнологаМагазинамСсылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУправляющийКачества(ЗаданиеТехнологаМагазинамСсылка)
Перем ТекСотрудник;
	
	УстановитьПривилегированныйРежим(Истина);
	
    ТекСотрудник = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Если НЕ ЗначениеЗаполнено(ТекСотрудник) ИЛИ НЕ ЗначениеЗаполнено(ЗаданиеТехнологаМагазинамСсылка) Тогда Возврат Ложь; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник,
		|	""Управляющий управления качества"" КАК ТипРолиСтр,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП,
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		|	ЗаданиеТехнологаМагазинамТовары.Характеристика,
		|	ЕСТЬNULL(РолиПользователейСоставРоли.Ссылка, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|		ПО (ЗаданиеТехнологаМагазинамТовары.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследнихХ
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (СоответствиеОбъектРольСрезПоследнихХ.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамТовары.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|				,
		|				ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
		|					И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследнихК
		|		ПО (СоответствиеОбъектРольСрезПоследнихХ.Объект ЕСТЬ NULL )
		|			И (ЗначенияСвойствОбъектов.Значение = СоответствиеОбъектРольСрезПоследнихК.Объект)
		|			И (СоответствиеОбъектРольСрезПоследнихК.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО (ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя, СоответствиеОбъектРольСрезПоследнихК.РольПользователя) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
		|			И (РолиПользователейСоставРоли.Ссылка = ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХ.РольПользователя.Родитель, СоответствиеОбъектРольСрезПоследнихК.РольПользователя.Родитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|			И (РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект)
		|ГДЕ
		|	ЗаданиеТехнологаМагазинам.Ссылка = &ЗаданиеТехнологаМагазинамСсылка
		|	И РолиПользователейСоставРоли.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", ТекСотрудник);
	Запрос.УстановитьПараметр("ЗаданиеТехнологаМагазинамСсылка", ЗаданиеТехнологаМагазинамСсылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
Перем Поз, СтрокаТЗн, ТекТипЗадания;
	
	ЭтоНовыйОбъект = НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	
	Если ЭтоНеПервоеЧтение = Ложь Тогда
		
		ЭтоПолныеПрава = РольДоступна("ПолныеПрава");
		Если НЕ ЭтоНовыйОбъект Тогда
			//ЭтоТоваровед = ЭтоТоваровед(Объект.Ссылка);
			//ЭтоТехнологПоКачеству = ЭтоТехнологПоКачеству(Объект.Ссылка);
			//ЭтоУправляющийКачества = ЭтоУправляющийКачества(Объект.Ссылка);
			
			ОтветственныеЛица.Загрузить(Документы.ЗаданиеТехнологаМагазинам.ВернутьТЗнОтветственных(Объект.Ссылка));
			
			УстановитьПривилегированныйРежим(Истина);
			ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
			ТекФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПользователь, "ФизЛицо");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ЗначениеЗаполнено(ТекФизЛицо) Тогда
				
				СтруктураОтветственных = Новый Соответствие;
				СтруктураОтветственных.Вставить("Товаровед", "ЭтоТоваровед");
				СтруктураОтветственных.Вставить("Технолог по качеству", "ЭтоТехнологПоКачеству");
				СтруктураОтветственных.Вставить("Управляющий управления качества", "ЭтоУправляющийКачества");
				
				МассивНайденныхСтрок = ОтветственныеЛица.НайтиСтроки(Новый Структура("Сотрудник", ТекФизЛицо));
				Для Каждого СтрокаТЗн Из МассивНайденныхСтрок Цикл
					Поз = СтруктураОтветственных.Получить(СтрокаТЗн.ТипРолиСтр);
					Если Поз <> Неопределено Тогда ЭтаФорма[Поз] = Истина; КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ЭтоНеПервоеЧтение = Истина;
		КонецЕсли;
		
		ДатаАвтозакрытия = Объект.Дата + 16 * 24*60*60;
		
		// если уже начислили бонусы, второй раз не начисляем
		Элементы.СтраницаРасчётБонусов.ТолькоПросмотр = НЕ ЭтоНовыйОбъект И ТекущийОбъект.Ссылка.НеобходимоВернутьБонусы;
		Элементы.РассчитатьБонусыДляВозврата.Доступность = НЕ Элементы.СтраницаРасчётБонусов.ТолькоПросмотр;
		
	КонецЕсли;
	
	СписокВыбораТипаЗадания = Элементы.ТипЗадания.СписокВыбора;
	СписокВыбораТипаЗадания.Очистить();
	
	Если ЭтоНовыйОбъект Тогда
		СписокВыбораТипаЗадания.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
		
	Иначе
		
		// Изменить тип задания может только технолог по качеству или пользователь с полными правами
		Если ЭтоТехнологПоКачеству ИЛИ ЭтоПолныеПрава Тогда
			Для Каждого ТипЗаданийТехнологаМагазинам Из Перечисления.ТипыЗаданийТехнологаМагазинам Цикл
				СписокВыбораТипаЗадания.Добавить(ТипЗаданийТехнологаМагазинам);
			КонецЦикла;
		КонецЕсли;
		
		ТекТипЗадания = ТекущийОбъект.ТипЗадания;
		
		// убираем для записанного док-та тип задания "Убрать с полок"
		Если ТекТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок Тогда
			Поз = СписокВыбораТипаЗадания.НайтиПоЗначению(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
			Если Поз <> Неопределено Тогда
				СписокВыбораТипаЗадания.Удалить(Поз);
			КонецЕсли;
		КонецЕсли;
		
		// Тип задания "Вернуть на полки" доступен товароведу и пользователю с полными правами
		//++АК SHEP 20170927 ИП-00016847: Разгуляев Валерий: добавляем управляющего качеством
		Если ЭтоТоваровед ИЛИ ЭтоУправляющийКачества ИЛИ ЭтоПолныеПрава Тогда
			Поз = СписокВыбораТипаЗадания.НайтиПоЗначению(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки);
			Если Поз = Неопределено Тогда
				СписокВыбораТипаЗадания.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки);
			КонецЕсли;
		Иначе
			Поз = СписокВыбораТипаЗадания.НайтиПоЗначению(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки);
			Если Поз <> Неопределено Тогда
				СписокВыбораТипаЗадания.Удалить(Поз);
			КонецЕсли;
		КонецЕсли;
		
		// для остальных добавляем текущий тип задания
		Если СписокВыбораТипаЗадания.НайтиПоЗначению(ТекТипЗадания) = Неопределено Тогда
			СписокВыбораТипаЗадания.Добавить(ТекТипЗадания);
		//+++АК SHEP 20161215: убираем "Возврат на склад"
		ИначеЕсли ТекТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад Тогда
			Поз = СписокВыбораТипаЗадания.НайтиПоЗначению(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад);
			Если Поз <> Неопределено Тогда
				СписокВыбораТипаЗадания.Удалить(Поз);
			КонецЕсли;
		//---АК SHEP 20161215
		КонецЕсли;
		
		// признак "Не закрывать автоматически" доступен только управляющему качеством
		Элементы.НеЗакрыватьАвтоматически.ТолькоПросмотр = НЕ ЭтоУправляющийКачества;
	КонецЕсли;
	
	Элементы.ДатаАвтозакрытия.ТолькоПросмотр = НЕ (ЭтоУправляющийКачества И Объект.НеЗакрыватьАвтоматически);
	
	Элементы.Поставщик.ТолькоПросмотр = НЕ ЭтоНовыйОбъект;
	Элементы.ТЗнТоварыКнопкаВсеПартии.Доступность = ЭтоНовыйОбъект;
	Элементы.ТЗнТоварыКнопкаБезДатПроизводства.Доступность = ЭтоНовыйОбъект;
	
	//+++АК SHEP 20161219: ограничение, что нельзя ставить галочку "согласовано с поставщиком" раньше двух суток с момента создания задания технолога,
	// или пока все магазины в задании технолога не отработали его. То есть любого из этих условий достаточно, чтобы поставить галочку.
	Элементы.СвереноСПоставщиком.Доступность = (ЭтоТехнологПоКачеству ИЛИ ЭтоПолныеПрава);
	//---АК SHEP 20161219
	
	//+++АК SHEP 20170301 Расчёт бонусов
	Элементы.СтраницаРасчётБонусов.Видимость = (НЕ ЭтоНовыйОбъект И Объект.Номенклатура.Количество() > 0);
	//---АК SHEP 20170301
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.БезДатПроизводства ИЛИ Объект.ВсеПартии) Тогда
		ПоказатьОповещениеПользователя("Даты производства",, "Укажите начальную и конечную даты производства");
		
		ДиалогВыбораПериода = Новый ДиалогРедактированияСтандартногоПериода;
		ДиалогВыбораПериода.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ДиалогВыбораПериода.Период.ДатаНачала = ТекущиеДанные.ДатаПроизводстваНач;
		ДиалогВыбораПериода.Период.ДатаОкончания = ТекущиеДанные.ДатаПроизводстваКон;
		Если ДиалогВыбораПериода.Редактировать() = Ложь Тогда СтандартнаяОбработка = Ложь; Возврат; КонецЕсли;
		
		ТекущиеДанные.ДатаПроизводстваНач = ДиалогВыбораПериода.Период.ДатаНачала;
		ТекущиеДанные.ДатаПроизводстваКон = ДиалогВыбораПериода.Период.ДатаОкончания;
	Иначе
		ТекущиеДанные.ДатаПроизводстваНач = Дата(1,1,1);
		ТекущиеДанные.ДатаПроизводстваКон = Дата(1,1,1);
	КонецЕсли;
	
	//+++АК SHEP 2018.05.08 ИП-00018566: убрать заполнение складов
	//ПоказатьОповещениеПользователя("Подождите...",, "Заполняется потенциальное количество по остаткам в магазинах / на складах");
	ПоказатьОповещениеПользователя("Подождите...",, "Заполняется потенциальное количество по остаткам в магазинах");
	//---АК SHEP 2018.05.08
	
	ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
	Если НЕ ТЗнТоварыНоменклатураПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
		ТекущиеДанные.Характеристика = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаВыбораУпр", Новый Структура("Отбор, ЗакрыватьПриВыборе", Новый Структура("Владелец, Неактивная", ТекущиеДанные.Номенклатура, Ложь), Истина));
		Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
			ТЗнТоварыНоменклатураПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗнТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗнТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ИмяРекъ = СтрЗаменить(Элемент.Имя, "ТЗнТовары", "");
	ТоварыИзменитьРекъ(СтруктураОтборТЗнТовары, ИмяРекъ, ТекущиеДанные[ИмяРекъ]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Найти(ВыбранноеЗначение.ИНН, "9999999999") > 0 Тогда
		Предупреждение("Неправильно выбран поставщик!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Объект.Поставщик И Объект.Товары.Количество() > 0 Тогда
		Если Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Объект.Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОчистка(Элемент, СтандартнаяОбработка)
	
	ПоставщикОбработкаВыбора(Элемент, ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БезДатПроизводстваПриИзменении(Элемент, ИзменятьДатыПроизводства = Истина)
Перем СтруктураОтбор;
	
	// ВсеПартии или БезДатПроизводства
	ИмяПризнака = СтрЗаменить(Элемент.Имя, "ТЗнТоварыКнопка", "");
	ПризнакОбъекта = Объект[ИмяПризнака];
	Если ПризнакОбъекта Тогда
		Если ИмяПризнака = "БезДатПроизводства" И Объект["ВсеПартии"] Тогда
			Объект["ВсеПартии"] = Ложь;
			БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаВсеПартии, Ложь);
		ИначеЕсли ИмяПризнака = "ВсеПартии" И Объект["БезДатПроизводства"] Тогда
			Объект["БезДатПроизводства"] = Ложь;
			БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаБезДатПроизводства, Ложь);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТЗнТоварыГруппаБезДатПроизводства.Видимость = Объект["ВсеПартии"] ИЛИ Объект["БезДатПроизводства"];
	Элементы.ТЗнТоварыГруппаБезДатПроизводства.Заголовок = ?(Объект["ВсеПартии"], "Все партии", "Без дат производства");
	Элементы.ТЗнТоварыГруппаДатыПроизводства.Видимость = НЕ Элементы.ТЗнТоварыГруппаБезДатПроизводства.Видимость;
	Элементы.ТЗнТовары.ВысотаШапки = ?(ПризнакОбъекта, 2, 1);
	Элемент.Картинка = ?(ПризнакОбъекта, БиблиотекаКартинок.УстановитьФлажки, БиблиотекаКартинок.СнятьФлажки);
	
	Если ИзменятьДатыПроизводства И ПризнакОбъекта Тогда
		СтруктураОтбор = Новый Структура;
		ТоварыИзменитьРекъ(СтруктураОтбор, "ДатаПроизводстваНач", Дата(1,1,1));
		ТоварыИзменитьРекъ(СтруктураОтбор, "ДатаПроизводстваКон", Дата(1,1,1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезДатПроизводства(Команда)
	Объект.БезДатПроизводства = НЕ Объект.БезДатПроизводства;
	БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаБезДатПроизводства);
КонецПроцедуры

&НаКлиенте
Процедура ВсеПартии(Команда)
	Объект.ВсеПартии = НЕ Объект.ВсеПартии;
	БезДатПроизводстваПриИзменении(Элементы.ТЗнТоварыКнопкаВсеПартии);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачуТехнологаПоМагазину(Ссылка, Магазин)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МП_ЗадачаТехнолога.Ссылка
		|ИЗ
		|	Документ.МП_ЗадачаТехнолога КАК МП_ЗадачаТехнолога
		|ГДЕ
		|	НЕ МП_ЗадачаТехнолога.ПометкаУдаления
		|	И МП_ЗадачаТехнолога.ДокументОснование = &Ссылка
		|	И МП_ЗадачаТехнолога.Магазин = &Магазин");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ТоварныеОперацииПоМагазину(Команда)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗадачаТехнологаСсылка = Неопределено;
	//Если ТекущиеДанные.ТоварыМагазинТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
		МассивЗадачТехнолога = ПолучитьЗадачуТехнологаПоМагазину(Объект.Ссылка, ТекущиеДанные.Магазин);
		Если МассивЗадачТехнолога.Количество() = 1 Тогда
			ЗадачаТехнологаСсылка = МассивЗадачТехнолога[0];
		Иначе
		КонецЕсли;
	//КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаданиеТехнологаМагазинам.Форма.ТоварныеОперацииПоМагазину",
		Новый Структура("ЗаданиеТехнологаМагазинам,Магазин,ЗадачаТехнолога", Объект.Ссылка, ТекущиеДанные.Магазин, ЗадачаТехнологаСсылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуТехнологаПоМагазину(Команда)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗадачаТехнологаСсылка = Неопределено;
	МассивЗадачТехнолога = ПолучитьЗадачуТехнологаПоМагазину(Объект.Ссылка, ТекущиеДанные.Магазин);
	Если МассивЗадачТехнолога.Количество() = 1 Тогда
		ЗадачаТехнологаСсылка = МассивЗадачТехнолога[0];
	Иначе
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаТехнологаСсылка) Тогда
		ОткрытьЗначение(ЗадачаТехнологаСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(АдресВременногоХранилища, КаталогХраненияФайлов, ИмяФайла)
Перем Файл, ДвоичныеДанные;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Файл = Новый Файл(ИмяФайла);
	ОтносительноеИмяФайла = Строка(Новый УникальныйИдентификатор) + Файл.Расширение;
	
	Попытка
		ДвоичныеДанные.Записать(КаталогХраненияФайлов + ОтносительноеИмяФайла);
	Исключение
		Сообщить("Не удалось добавить файл.");
		Возврат "";
	КонецПопытки;
	
	Возврат ОтносительноеИмяФайла;
КонецФункции

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
Перем Файл, ОтносительноеИмяФайла;
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Все файлы (*.*)|*.*|";
	
	Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
	    Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	ОтносительноеИмяФайла = ЗаписатьФайлНаСервере(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя)), КаталогХраненияФайлов, Файл.Имя);
	Если НЕ ЗначениеЗаполнено(ОтносительноеИмяФайла) Тогда
		Предупреждение("Ошибка при добавлении файла!");
		Возврат;
	КонецЕсли;
	
	СтрокаФотографии = Объект.Вложения.Добавить();
	СтрокаФотографии.ИмяФайла = Файл.Имя;
	СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Вопрос("Удалить файл?", РежимДиалогаВопрос.ДаНетОтмена,,, "Задание технолога магазинам") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла) Тогда
		УдалитьФайлНаСервере(КаталогХраненияФайлов + ТекущиеДанные.ОтносительноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервере(ИмяФайла)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ИмяФайла, УникальныйИдентификатор)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Перем Файл, ОтносительноеИмяФайла;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтносительноеИмяФайла = ТекущиеДанные.ОтносительноеИмяФайла;
	Если НЕ ПустаяСтрока(ОтносительноеИмяФайла) Тогда
		АдресВремХранилища = ПолучитьФайлНаСервере(КаталогХраненияФайлов + ОтносительноеИмяФайла, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
			Файл = Новый Файл(ОтносительноеИмяФайла);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьШтрихкод(Команда = Неопределено)
	
	Если Команда <> Неопределено Тогда Объект.СканироватьШтрихкод = НЕ Объект.СканироватьШтрихкод; КонецЕсли;
	
	//Если Объект.СканироватьШтрихкод Тогда
	//	Элементы.ТЗнТоварыСканироватьШтрихкод.Заголовок = "Сканировать штрих-код";
	//	Элементы.ТЗнТоварыСканироватьШтрихкод.Картинка = БиблиотекаКартинок.Штрихкод;
	//Иначе
	//	Элементы.ТЗнТоварыСканироватьШтрихкод.Заголовок = "Без сканирования";
	//	Элементы.ТЗнТоварыСканироватьШтрихкод.Картинка = БиблиотекаКартинок.БезШтрихкода;
	//КонецЕсли;
	Элементы.ТЗнТоварыСканироватьШтрихкод.Картинка = ?(Объект.СканироватьШтрихкод, БиблиотекаКартинок.УстановитьФлажки, БиблиотекаКартинок.СнятьФлажки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СканироватьШтрихкодДоступность(ТЗнТовары)
	
	//+++АК SHEP 20170403 Валерий Разгуляев
	//И по умолчанию у нас для всех случаев всегда будет стоять эта галочка "обязательно сканировать", кроме двух ситуаций:
	//1. если это товар без единичной упаковки - есть такой признак в карточке товара;
	//2. только одна активная характеристика по товару, 
	//в таких случаях по умолчанию эта галочка будет не стоять.
	//---АК SHEP 20170403
	//+++АК SHEP 20170407 Валерий Разгуляев 7 апр. в 15:28:
	// Паша, получается, что по умолчанию всегда должна быть галочка "обязательно сканировать",
	// кроме случаев, когда в задании технолога есть хотя бы один товар без индивидуальной упаковки,
	// а на характеристики тогда не смотрим, так как они могут, вообще, другой товар по ошибке списать... :(
	//---АК SHEP 20170407
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЗнТовары.Номенклатура,
		|	ТЗнТовары.Характеристика
		|ПОМЕСТИТЬ ТЗнТовары
		|ИЗ
		|	&ТЗнТовары КАК ТЗнТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьШтрихКод
		|ИЗ
		|	ТЗнТовары КАК ТЗнТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
		|		ПО ТЗнТовары.Номенклатура = ШтриховыеКоды.Номенклатура
		|			И ТЗнТовары.Характеристика = ШтриховыеКоды.Характеристика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТЗнТовары.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
		|		ПО ТЗнТовары.Номенклатура = СпрХарактеристикиНоменклатуры.Владелец
		|			И СпрХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		|
		|ГДЕ
		|	СпрНоменклатура.БезУпаковки = ЛОЖЬ
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ИСТИНА
		//|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗнТовары.Характеристика) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрХарактеристикиНоменклатуры.Ссылка)
		|");
	Запрос.УстановитьПараметр("ТЗнТовары", ТЗнТовары.Выгрузить());
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ТоварыМагазинПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Элементы.ТоварыСкладСклада.ТолькоПросмотр = (ПолучитьРеквизитНаСервере(ТекущиеДанные.Магазин, "ТипСтруктурнойЕдиницы") <> ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНаСервере(Объ, ИмяРеквизита)
	Возврат Объ[ИмяРеквизита];
КонецФункции

&НаСервере
Процедура РассчитатьБонусыДляВозвратаНаСервереБыло()
Перем ТаблицаНоменклатуры;
Перем ВозвратБонусовНачДата, ВозвратБонусовКонДата;
	
	ТЧРасчётБонусов = Объект.РасчётБонусов;
	ТаблицаНоменклатуры = Объект.Номенклатура;
	ТЧВозвратБонусовПоКартам = Объект.ВозвратБонусовПоКартам;
	
	ВозвратБонусовНачДата = Объект.ВозвратБонусовНачДата;
	ВозвратБонусовКонДата = КонецДня(Объект.ВозвратБонусовКонДата);
	
	ВозвратБонусовНачДатаСтр = ВнешниеДанные.ФорматПоля(ВозвратБонусовНачДата, Истина);
	ВозвратБонусовКонДатаСтр = ВнешниеДанные.ФорматПоля(ВозвратБонусовКонДата, Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеТехнологаМагазинамНоменклатура.Номенклатура,
		|	ЗаданиеТехнологаМагазинамНоменклатура.Характеристика,
		|	СпрНоменклатура.id_tov,
		|	ЗаданиеТехнологаМагазинамНоменклатура.ДатаПроизводстваНач,
		|	ЗаданиеТехнологаМагазинамНоменклатура.ДатаПроизводстваКон,
		|	ЗаданиеТехнологаМагазинамНоменклатура.УИДСтрокиНоменклатуры,
		|	ЗаданиеТехнологаМагазинам.БезДатПроизводства,
		|	ЗаданиеТехнологаМагазинам.ВсеПартии
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам.Номенклатура КАК ЗаданиеТехнологаМагазинамНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ЗаданиеТехнологаМагазинамНоменклатура.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ПО ЗаданиеТехнологаМагазинамНоменклатура.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка
		|ГДЕ
		|	ЗаданиеТехнологаМагазинамНоменклатура.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	Если ТЧРасчётБонусов.Количество() > 0 Тогда ТЧРасчётБонусов.Очистить(); КонецЕсли;
	
	Если ТЧВозвратБонусовПоКартам.Количество() > 0 Тогда ТЧВозвратБонусовПоКартам.Очистить(); КонецЕсли;
	
	//**//
	СтрокаОтборТовары = "";
	Для Каждого СтрокаТаб Из ТаблицаНоменклатуры Цикл
		СтрокаОтборТовары = ?(ПустаяСтрока(СтрокаОтборТовары), "", СтрокаОтборТовары + ", ") + Формат(СтрокаТаб.Номенклатура.id_tov, "ЧГ=0");
	КонецЦикла;
	
	//
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика,
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|ГДЕ
		|	ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		|	И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
		|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|	И ПриходныйОрдерСкладТовары.Номенклатура В(&Товары)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура,
		|	ТоварныйАссортиментТочекСрезПоследних.Номенклатура.id_tov КАК id_tov,
		|	ТоварныйАссортиментТочекСрезПоследних.Характеристика,
		|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&КонДата, Номенклатура В (&Товары)) КАК ТоварныйАссортиментТочекСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.id_kontr,
		|	ХарактеристикиНоменклатуры.Владелец.id_tov КАК id_tov,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)");
	Запрос.УстановитьПараметр("НачДата", ВозвратБонусовНачДата);
	Запрос.УстановитьПараметр("КонДата", ВозвратБонусовКонДата);
	ТЗнНоменклатуры = ТаблицаНоменклатуры.Выгрузить();
	Запрос.УстановитьПараметр("Товары", ТЗнНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Характеристики", ТЗнНоменклатуры.ВыгрузитьКолонку("Характеристика"));
	ТЗнНоменклатуры = Неопределено;
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабПоставки 		= Результаты[0].Выгрузить();
	ТабКешАссортимент 	= Результаты[1].Выгрузить();
	ТабКешХарки 		= Результаты[2].Выгрузить();
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL =
		"SELECT
		|	SUM(VZ_Full.Quantity) Количество,
		|	SUM(VZ_Full.Summ) as Сумма,
		|	VZ_Full.id_tov,
		|	VZ_Full.id_kontr,
		|	VZ_Full.BonusCard,
		|	VZ_Full.id_tt
		|FROM (
		|	SELECT
		|		Ch.Quantity as Quantity,
		|		Ch.id_kontr as id_kontr
		|	 	,Ch.id_tov_cl as id_tov
		|	 	,Ch.id_tt_cl as id_tt
		|	 	,Ch.BonusCard_cl as BonusCard
		|		,Ch.BaseSum as Summ
		|
		| FROM [SMS_UNION].[dbo].[CheckLine] (nolock) as Ch
		| where Ch.date_ch BETWEEN " + ВозвратБонусовНачДатаСтр + " and " + ВозвратБонусовКонДатаСтр + " and Ch.OperationType_cl IN (1, 3)
		|		and Ch.id_tov_cl IN (" + СтрокаОтборТовары + ")
		|		and NOT BonusCard_cl = ''
		|		and NOT BonusCard_cl IS NULL

		|
		| UNION ALL
		| 
		| --архив по вкусвилл
		| SELECT
		|	Ch.Quantity as Quantity,
		|	Ch.id_kontr as id_kontr
		|	 ,Ch.id_tov_cl as id_tov
		|	 ,Ch.id_tt_cl
		|	 ,Ch.BonusCard_cl
		|	,Ch.BaseSum as Summ
		|
		| FROM [SMS_IZBENKA_ARC].[dbo].[su_Checkline] (nolock) as Ch
		| where Ch.date_ch BETWEEN " + ВозвратБонусовНачДатаСтр + " and " + ВозвратБонусовКонДатаСтр + " and Ch.OperationType_cl IN (1, 3)
		|		and Ch.id_tov_cl IN (" + СтрокаОтборТовары + ")
		|		and NOT BonusCard_cl = ''
		|		and NOT BonusCard_cl IS NULL
		|
		| UNION ALL
		| --избенка
		| SELECT
		|	Ch.Quantity as Quantity,
		|	Ch.ManufacturerID as id_kontr
		|	 ,Ch.id_tov_cl as id_tov
		|	 ,Ch.id_tt_cl
		|	 ,Ch.BonusCard_cl
		|	,Ch.BaseSum as Summ
		|
		| FROM [SMS_IZBENKA].[dbo].[CheckLine] (nolock) as Ch
		| where Ch.date_ch BETWEEN " + ВозвратБонусовНачДатаСтр + " and " + ВозвратБонусовКонДатаСтр + " and Ch.OperationType_cl IN (1, 3)
		|		and Ch.id_tov_cl IN (" + СтрокаОтборТовары + ")
		|		and NOT BonusCard_cl = ''
		|		and NOT BonusCard_cl IS NULL
		|
		| UNION ALL
		| --архив избенка
		| SELECT Ch.Quantity as Quantity, Ch.ManufacturerID as id_kontr
		|	 ,Ch.id_tov_cl as id_tov
		|	 ,Ch.id_tt_cl
		|	 ,Ch.BonusCard_cl
		|	,Ch.BaseSum as Summ
		|
		| FROM [SMS_IZBENKA_ARC].[dbo].[CheckLine] (nolock) as Ch
		| where Ch.date_ch BETWEEN " + ВозвратБонусовНачДатаСтр + " and " + ВозвратБонусовКонДатаСтр + " and Ch.OperationType_cl IN (1, 3)
		|		and Ch.id_tov_cl IN (" + СтрокаОтборТовары + ")
		|		and NOT BonusCard_cl = ''
		|		and NOT BonusCard_cl IS NULL
		|   
		|   ) as VZ_Full
		|
		|GROUP BY
		|	VZ_Full.id_tov,
		|	VZ_Full.id_kontr,
		|	VZ_Full.id_tt,
		|	VZ_Full.BonusCard";
		
	Если Элементы.РежимОтладки.Пометка Тогда Сообщить(ТекстЗапросаSQL); КонецЕсли;
	//Возврат;
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Пока rs <> Неопределено
			И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			id_kontr 	= Rs.Fields("id_kontr").Value;
			id_tov 		= Rs.Fields("id_tov").Value;
			id_tt 		= Rs.Fields("id_tt").Value;
			
			Если id_kontr = 0 ИЛИ id_kontr = NULL Тогда
				СтрокиКеш = ТабКешАссортимент.НайтиСтроки(Новый Структура("id_tov, id_tt", id_tov, id_tt));
			Иначе
				СтрокиКеш = ТабКешХарки.НайтиСтроки(Новый Структура("id_tov, id_kontr", id_tov, id_kontr));
			КонецЕсли;
			
			Если СтрокиКеш.Количество() > 0 Тогда
				
				СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокиКеш[0].Номенклатура, СтрокиКеш[0].Характеристика));
				Если СтрокиНоменклатуры.Количество() > 0 Тогда
					
					СуммаПродаж = Rs.Fields("Сумма").Value;
					СтрокаНоменклатуры = СтрокиНоменклатуры[0];
					СтрокаТЧ = ТЧРасчётБонусов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНоменклатуры);
					СтрокаТЧ.Количество = Rs.Fields("Количество").Value;
					СтрокаТЧ.Сумма = СуммаПродаж;
					
					СтрокаТЧ = ТЧВозвратБонусовПоКартам.Добавить();
					СтрокаТЧ.НомерКарты = СокрЛП(Rs.Fields("BonusCard").Value);
					СтрокаТЧ.Сумма = СуммаПродаж;
					
				КонецЕсли;
				
			КонецЕсли;
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//ТекстЗапросаSQL =
	//	"SELECT
	//	|	ls.id_tt_ls as id_tt
	//	|	,ls.id_tov_ls as id_tov
	//	|	,isnull(ls.id_kontr_ls, 0) as id_kontr
	//	|	,SUM(ls.lost1) as Количество
	//	|	,SUM(ls.lost1 * isnull(ls.Price_ls, 0)) as Сумма
	//	|	
	//	|FROM [M2].[dbo].[lost_sales] as ls
	//	|WHERE
	//	|	ls.date_ls BETWEEN " + ВозвратБонусовНачДатаСтр + " and " + ВозвратБонусовКонДатаСтр + "
	//	|		AND ls.id_tov_ls IN (" + СтрокаОтборТовары + ")
	//	|
	//	|GROUP BY
	//	|	ls.id_tt_ls
	//	|	,ls.id_tov_ls
	//	|	,isnull(ls.id_kontr_ls, 0)
	//	|	
	//	| HAVING SUM(ls.lost1) > 0";
	//	
	//Сообщить(ТекстЗапросаSQL);
	//
	//rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	//Пока rs <> Неопределено
	//		И rs.Fields.Count <= 0 Цикл
	//	rs = rs.NextRecordSet();
	//КонецЦикла;
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Пока НЕ rs.EOF() Цикл
	//		id_kontr 	= Rs.Fields("id_kontr").Value;
	//		id_tov 		= Rs.Fields("id_tov").Value;
	//		id_tt 		= Rs.Fields("id_tt").Value;
	//		
	//		Если id_kontr = 0 ИЛИ id_kontr = NULL Тогда
	//			СтрокиКеш = ТабКешАссортимент.НайтиСтроки(Новый Структура("id_tov, id_tt", id_tov, id_tt));
	//		Иначе
	//			СтрокиКеш = ТабКешХарки.НайтиСтроки(Новый Структура("id_tov, id_kontr", id_tov, id_kontr));
	//		КонецЕсли;
	//		
	//		Если СтрокиКеш.Количество() > 0 Тогда
	//			СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокиКеш[0].Номенклатура, СтрокиКеш[0].Характеристика));
	//			Если СтрокиНоменклатуры.Количество() > 0 Тогда
	//				СтрокаНоменклатуры = СтрокиНоменклатуры[0];
	//				СтрокаТЧ = ТЧРасчётБонусов.Добавить();
	//				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНоменклатуры);
	//				СтрокаТЧ.Количество = Rs.Fields("Количество").Value;
	//				СтрокаТЧ.Сумма = Rs.Fields("Сумма").Value;
	//			КонецЕсли;	
	//		КонецЕсли;
	//		
	//		rs.MoveNext();
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	
	//**//
	//ТекстЗапросаSQL = "";
	//КодОперации = 1; // продажа
	//КодОбратнойОперации = 3; // возврат
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	//ДатаПроизводстваНач = ВыборкаДетальныеЗаписи.ДатаПроизводстваНач;
	//	//ДатаПроизводстваКон = ВыборкаДетальныеЗаписи.ДатаПроизводстваКон;
	//	//Если ДатаПроизводстваНач = Дата(1,1,1) И ДатаПроизводстваКон = Дата(1,1,1) ИЛИ ВыборкаДетальныеЗаписи.БезДатПроизводства ИЛИ ВыборкаДетальныеЗаписи.ВсеПартии Тогда
	//	//	ДатыПроизводстваСтр = "";
	//	//ИначеЕсли ДатаПроизводстваНач = Дата(1,1,1) Тогда
	//	//	ДатыПроизводстваСтр = "and Date_proiizv <= " + ВнешниеДанные.ФорматПоля(ДатаПроизводстваКон, Истина);
	//	//ИначеЕсли ДатаПроизводстваКон = Дата(1,1,1) Тогда
	//	//	ДатыПроизводстваСтр = "and Date_proiizv >= " + ВнешниеДанные.ФорматПоля(ДатаПроизводстваНач, Истина);
	//	//ИначеЕсли ДатаПроизводстваНач = ДатаПроизводстваКон Тогда
	//	//	ДатыПроизводстваСтр = "and Date_proiizv = " + ВнешниеДанные.ФорматПоля(ДатаПроизводстваНач, Истина);
	//	//Иначе
	//	//	ДатыПроизводстваСтр = "and Date_proiizv BETWEEN " + ВнешниеДанные.ФорматПоля(ДатаПроизводстваНач, Истина) + " AND " + ВнешниеДанные.ФорматПоля(ДатаПроизводстваКон, Истина);
	//	//КонецЕсли;
	//	
	//	ДатыПроизводстваСтр = "";
	//	
	//	ТекстЗапросаSQL = ТекстЗапросаSQL + ?(ПустаяСтрока(ТекстЗапросаSQL), "", Символы.ПС + "UNION" + Символы.ПС) +
	//		"SELECT CheckLineUID,
	//		|	'" + ВыборкаДетальныеЗаписи.УИДСтрокиНоменклатуры + "' AS УИДСтрокиНоменклатуры,
	//		|	SUM(Quantity) Количество,
	//		|	SUM(BaseSum) Сумма
	//		|FROM SMS_IZBENKA.dbo.CheckLine as Chl (nolock)
	//		|WHERE date_ch BETWEEN " + ВнешниеДанные.ФорматПоля(Объект.ВозвратБонусовНачДата, Истина) + " AND " + ВнешниеДанные.ФорматПоля(Объект.ВозвратБонусовКонДата, Истина) + "
	//		|	and id_tov_cl = " + ВнешниеДанные.ФорматПоля(ВыборкаДетальныеЗаписи.id_tov) + "
	//		|	and OperationType_cl IN (" + ВнешниеДанные.ФорматПоля(КодОперации) + "," + ВнешниеДанные.ФорматПоля(КодОбратнойОперации) + ")
	//		|	and NOT BonusCard_cl = ''
	//		|	" + ДатыПроизводстваСтр;
	//	
	//КонецЦикла;
	
	// сворачиваем ТЧ "Расчёт бонусов"
	ТЗнРасчётБонусов = ТЧРасчётБонусов.Выгрузить();
	ТЗнРасчётБонусов.Свернуть("УИДСтрокиНоменклатуры,Номенклатура,Характеристика", "Количество,Сумма");
	ТЧРасчётБонусов.Загрузить(ТЗнРасчётБонусов);
	
	ТЗнРасчётБонусов = ТЧВозвратБонусовПоКартам.Выгрузить();
	ТЗнРасчётБонусов.Свернуть("НомерКарты", "Сумма");
	ТЧВозвратБонусовПоКартам.Загрузить(ТЗнРасчётБонусов);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьБонусыДляВозвратаНаСервере()
Перем ТаблицаНоменклатуры;
Перем ВозвратБонусовНачДата, ВозвратБонусовКонДата;
	
	ТЧРасчётБонусов = Объект.РасчётБонусов;
	//ТаблицаНоменклатуры = Объект.Номенклатура;
	//ТЧВозвратБонусовПоКартам = Объект.ВозвратБонусовПоКартам;
	
	ВозвратБонусовНачДата = Объект.ВозвратБонусовНачДата;
	ВозвратБонусовКонДата = КонецДня(Объект.ВозвратБонусовКонДата);
	
	ВозвратБонусовНачДатаСтр = ВнешниеДанные.ФорматПоля(ВозвратБонусовНачДата, Истина);
	ВозвратБонусовКонДатаСтр = ВнешниеДанные.ФорматПоля(ВозвратБонусовКонДата, Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеТехнологаМагазинамНоменклатура.Номенклатура,
		|	ЗаданиеТехнологаМагазинамНоменклатура.Характеристика,
		|	СпрНоменклатура.id_tov,
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты).ИД КАК id_kontr,
		|	ЗаданиеТехнологаМагазинамНоменклатура.ДатаПроизводстваНач,
		|	ЗаданиеТехнологаМагазинамНоменклатура.ДатаПроизводстваКон,
		|	ЗаданиеТехнологаМагазинамНоменклатура.УИДСтрокиНоменклатуры,
		|	ЗаданиеТехнологаМагазинам.БезДатПроизводства,
		|	ЗаданиеТехнологаМагазинам.ВсеПартии
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам.Номенклатура КАК ЗаданиеТехнологаМагазинамНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам КАК ЗаданиеТехнологаМагазинам
		|		ПО ЗаданиеТехнологаМагазинамНоменклатура.Ссылка = ЗаданиеТехнологаМагазинам.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ЗаданиеТехнологаМагазинамНоменклатура.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО (ЗначенияСвойствОбъектов.Объект = ЗаданиеТехнологаМагазинамНоменклатура.Характеристика)
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|ГДЕ
		|	ЗаданиеТехнологаМагазинамНоменклатура.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	Если ТЧРасчётБонусов.Количество() > 0 Тогда ТЧРасчётБонусов.Очистить(); КонецЕсли;
	
	//Если ТЧВозвратБонусовПоКартам.Количество() > 0 Тогда ТЧВозвратБонусовПоКартам.Очистить(); КонецЕсли;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапросаSQL = "";
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстЗапросаSQL = ТекстЗапросаSQL + ?(ПустаяСтрока(ТекстЗапросаSQL), "", Символы.ПС + "UNION ALL" + Символы.ПС) +
			"SELECT  chl.BonusCard_cl AS НомерКарты
			|	, SUM(chl.BaseSum) Сумма
			|	, SUM(chl.Quantity) Количество,
			|	'" + ВыборкаДетальныеЗаписи.УИДСтрокиНоменклатуры + "' AS УИДСтрокиНоменклатуры
			|FROM SMS_union..CheckLine (nolock) chl 
			|      inner join Loyalty..Customer (nolock) c on c.Email=chl.BonusCard_cl
			|      inner join Loyalty..discountcard (nolock) d on d.Number=chl.BonusCard_cl
			|      left join M2..kontr k on k.id_kontr = chl.id_kontr
			|WHERE c.MobilCarta = 1
			|	AND chl.date_ch between @date1 and @date2
			|	AND chl.id_tov_cl = " + ВнешниеДанные.ФорматПоля(ВыборкаДетальныеЗаписи.id_tov) + "
			|	AND chl.id_kontr = " + ВнешниеДанные.ФорматПоля(ВыборкаДетальныеЗаписи.id_kontr) + "
			|	AND chl.OperationType_cl = 1
			|	AND LEN(c.Phone) = 10
			|GROUP BY chl.BonusCard_cl
			|HAVING SUM(chl.BaseSum) > 0";
		
	КонецЦикла;
	
	// взято из метода возврата бонусов: [Loyalty].[dbo].[refund_bad_product]
	ТекстЗапросаSQL = "
		|DECLARE @proc float = " + ВнешниеДанные.ФорматПоля(Объект.ВозвратБонусовПроцентВозврата / 100) + "
		|DECLARE @date1 date = " + ВозвратБонусовНачДатаСтр + "
		|DECLARE @date2 date = " + ВозвратБонусовКонДатаСтр + "
		|
		|SELECT УИДСтрокиНоменклатуры, convert(int, sum(Сумма) * @proc) Сумма, sum(Количество) Количество
		|FROM 
		|(" + ТекстЗапросаSQL + "
		|)a
		|
		|GROUP BY УИДСтрокиНоменклатуры";
		
	Если Элементы.РежимОтладки.Пометка Тогда Сообщить(ТекстЗапросаSQL); КонецЕсли;
	
	ВыборкаSQL = ADOСоединение.Execute(ТекстЗапросаSQL);
	Пока ВыборкаSQL <> Неопределено	И ВыборкаSQL.Fields.Count <= 0 Цикл
		ВыборкаSQL = ВыборкаSQL.NextRecordSet();
	КонецЦикла;
	
	Попытка	
		
		СтруктураПолей = Новый Структура("УИДСтрокиНоменклатуры,Количество,Сумма");
		
		ВыборкаSQL.MoveFirst();
		Пока НЕ ВыборкаSQL.EOF() Цикл
			СтрокаТЧ = ТЧРасчётБонусов.Добавить();
			
			Для Каждого КлючИЗначение Из СтруктураПолей Цикл
				СтрокаТЧ[КлючИЗначение.Ключ] = ВыборкаSQL.Fields(КлючИЗначение.Ключ).Value;
			КонецЦикла;
			
			ВыборкаSQL.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	//// сворачиваем ТЧ "Расчёт бонусов"
	//ТЗнРасчётБонусов = ТЧРасчётБонусов.Выгрузить();
	//ТЗнРасчётБонусов.Свернуть("УИДСтрокиНоменклатуры,Номенклатура,Характеристика", "Количество,Сумма");
	//ТЧРасчётБонусов.Загрузить(ТЗнРасчётБонусов);
	//
	//ТЗнРасчётБонусов = ТЧВозвратБонусовПоКартам.Выгрузить();
	//ТЗнРасчётБонусов.Свернуть("НомерКарты", "Сумма");
	//ТЧВозвратБонусовПоКартам.Загрузить(ТЗнРасчётБонусов);
	
	ОбновитьТЧРасчётБонусовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБонусыДляВозврата(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ВозвратБонусовНачДата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана нач. дата!", ЭтаФорма, "ВозвратБонусовНачДата",, Отказ);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВозвратБонусовКонДата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана кон. дата!", ЭтаФорма, "ВозвратБонусовКонДата",, Отказ);
	ИначеЕсли Объект.ВозвратБонусовНачДата > Объект.ВозвратБонусовКонДата Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверно выбран период!", ЭтаФорма, "ВозвратБонусовНачДата",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	РассчитатьБонусыДляВозвратаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратБонусовСтандартныйПериодПриИзменении(Элемент)
	Объект.ВозвратБонусовНачДата = ВозвратБонусовСтандартныйПериод.ДатаНачала;
	Объект.ВозвратБонусовКонДата = ВозвратБонусовСтандартныйПериод.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратБонусовСтандартныйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВозвратБонусовСтандартныйПериод.ДатаНачала = Объект.ВозвратБонусовНачДата;
	ВозвратБонусовСтандартныйПериод.ДатаОкончания = Объект.ВозвратБонусовКонДата;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЧРасчётБонусовНаСервере()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЗнРасчётБонусов.НомерСтроки,
		|	ТЗнРасчётБонусов.УИДСтрокиНоменклатуры,
		|	ТЗнРасчётБонусов.Номенклатура,
		|	ТЗнРасчётБонусов.Характеристика,
		|	ТЗнРасчётБонусов.ВозвратБонусовЗаНекачественныйТовар,
		|	ТЗнРасчётБонусов.Количество,
		|	ТЗнРасчётБонусов.Сумма
		|ПОМЕСТИТЬ ВТРасчётБонусов
		|ИЗ
		|	&ТЗнРасчётБонусов КАК ТЗнРасчётБонусов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРасчётБонусов.НомерСтроки КАК НомерСтроки,
		|	ВТРасчётБонусов.УИДСтрокиНоменклатуры,
		|	ЗаданиеТехнологаМагазинамНоменклатура.Номенклатура,
		|	ЗаданиеТехнологаМагазинамНоменклатура.Характеристика,
		|	ВТРасчётБонусов.ВозвратБонусовЗаНекачественныйТовар,
		|	ВТРасчётБонусов.Количество,
		|	ВТРасчётБонусов.Сумма
		|ИЗ
		|	ВТРасчётБонусов КАК ВТРасчётБонусов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаМагазинам.Номенклатура КАК ЗаданиеТехнологаМагазинамНоменклатура
		|		ПО ВТРасчётБонусов.УИДСтрокиНоменклатуры = ЗаданиеТехнологаМагазинамНоменклатура.УИДСтрокиНоменклатуры
		|ГДЕ
		|	ЗаданиеТехнологаМагазинамНоменклатура.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТЗнРасчётБонусов", Объект.РасчётБонусов.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	Объект.РасчётБонусов.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьАвтоматическиПриИзменении(Элемент)
	
	Если Объект.НеЗакрыватьАвтоматически И Объект.ДатаАвтозакрытия = Дата(1,1,1) И Элемент <> Неопределено Тогда
		Объект.ДатаАвтозакрытия = ДатаАвтозакрытия;
	КонецЕсли;
	
	Элементы.ДатаАвтозакрытияСтр.Видимость = (ДатаАвтозакрытия <> Объект.ДатаАвтозакрытия) ИЛИ НЕ Объект.НеЗакрыватьАвтоматически;
	Элементы.ДатаАвтозакрытия.ТолькоПросмотр = НЕ (ЭтоУправляющийКачества И Объект.НеЗакрыватьАвтоматически);
	Элементы.ДатаАвтозакрытия.Видимость = Объект.НеЗакрыватьАвтоматически;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтладки(Команда)
	Элементы.РежимОтладки.Пометка = НЕ Элементы.РежимОтладки.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПеремещенияСоСклада(Команда)
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		Предупреждение("Сначала нужно записать документ!");
		Возврат;
	КонецЕсли;
	
	РассчитатьПеремещенияСоСкладаНаСервере();
	
КонецПроцедуры
	
&НаСервере
Процедура РассчитатьПеремещенияСоСкладаНаСервере()
	
	МинДатаПроизводстваНач = Дата(1,1,1);
	МинДатаПроизводстваКон = Дата(1,1,1);
	МаксДатаПроизводстваКон = Дата(1,1,1);
	Для Каждого СтрокаТЧ Из Объект.Номенклатура Цикл
		ЭтоПерваяСтрока = (СтрокаТЧ.НомерСтроки = 1);
		МинДатаПроизводстваНач = ?(ЭтоПерваяСтрока, СтрокаТЧ.ДатаПроизводстваНач, Мин(МинДатаПроизводстваНач, СтрокаТЧ.ДатаПроизводстваНач));
		МинДатаПроизводстваКон = ?(ЭтоПерваяСтрока, СтрокаТЧ.ДатаПроизводстваКон, Мин(МинДатаПроизводстваКон, СтрокаТЧ.ДатаПроизводстваКон));
		МаксДатаПроизводстваКон = ?(ЭтоПерваяСтрока, СтрокаТЧ.ДатаПроизводстваКон, Макс(МаксДатаПроизводстваКон, СтрокаТЧ.ДатаПроизводстваКон));
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика,
		|	ТаблицаНоменклатуры.ДатаПроизводстваНач,
		|	ТаблицаНоменклатуры.ДатаПроизводстваКон,
		|	ТаблицаНоменклатуры.УИДСтрокиНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&Номенклатура КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Магазины.НомерСтроки,
		|	Магазины.Магазин,
		|	Магазины.УИДСтрокиНоменклатуры КАК УИДСтрокиНоменклатуры
		|ПОМЕСТИТЬ ТаблицаСтрок
		|ИЗ
		|	&Магазины КАК Магазины
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УИДСтрокиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Магазины.Магазин
		|ПОМЕСТИТЬ Магазины
		|ИЗ
		|	ТаблицаСтрок КАК Магазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Получатель КАК Магазин,
		|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.ДатаПроизводства,
		|	СУММА(-ТоварыНаСкладахОбороты.КоличествоОборот) КАК Количество
		|ПОМЕСТИТЬ ПеремещенияНаМагазины
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТаблицаНоменклатуры.Номенклатура,
		|						ТаблицаНоменклатуры.Характеристика
		|					ИЗ
		|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
		|				И ВЫБОР
		|					КОГДА &МинДатаПроизводстваКон <> ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДатаПроизводства МЕЖДУ &МинДатаПроизводстваНач И &МаксДатаПроизводстваКон
		|					КОГДА &МинДатаПроизводстваНач <> ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДатаПроизводства >= &МинДатаПроизводстваНач
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ТоварыНаСкладахОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ПО ТоварыНаСкладахОбороты.Регистратор = РасходныйОрдерСклад.Ссылка
		|ГДЕ
		|	ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
		|	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСклад.Получатель В
		|			(ВЫБРАТЬ
		|				Магазины.Магазин
		|			ИЗ
		|				Магазины КАК Магазины)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Получатель,
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.ДатаПроизводства
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Магазин,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтрок.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСтрок.Магазин КАК Магазин,
		|	СУММА(ЕСТЬNULL(ПеремещенияНаМагазины.Количество, 0)) КАК КоличествоПеремещено
		|ИЗ
		|	ТаблицаСтрок КАК ТаблицаСтрок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО ТаблицаСтрок.УИДСтрокиНоменклатуры = ТаблицаНоменклатуры.УИДСтрокиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПеремещенияНаМагазины КАК ПеремещенияНаМагазины
		|		ПО ТаблицаСтрок.Магазин = ПеремещенияНаМагазины.Магазин
		|			И (ВЫБОР
		|				КОГДА &ОднаСтрока
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаНоменклатуры.Номенклатура = ПеремещенияНаМагазины.Номенклатура
		|						И ТаблицаНоменклатуры.Характеристика = ПеремещенияНаМагазины.Характеристика
		|						И ВЫБОР
		|							КОГДА ТаблицаНоменклатуры.ДатаПроизводстваКон <> ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА ПеремещенияНаМагазины.ДатаПроизводства МЕЖДУ ТаблицаНоменклатуры.ДатаПроизводстваНач И ТаблицаНоменклатуры.ДатаПроизводстваКон
		|							КОГДА ТаблицаНоменклатуры.ДатаПроизводстваНач <> ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА ПеремещенияНаМагазины.ДатаПроизводства >= ТаблицаНоменклатуры.ДатаПроизводстваНач
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСтрок.НомерСтроки,
		|	ТаблицаСтрок.Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Магазины", Объект.Товары.Выгрузить(, "НомерСтроки,Магазин,УИДСтрокиНоменклатуры"));
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура.Выгрузить(, "Номенклатура,Характеристика,ДатаПроизводстваНач,ДатаПроизводстваКон,УИДСтрокиНоменклатуры"));
	Запрос.УстановитьПараметр("МинДатаПроизводстваНач", МинДатаПроизводстваНач);
	Запрос.УстановитьПараметр("МинДатаПроизводстваКон", ?(МинДатаПроизводстваКон = Дата(1,1,1), МинДатаПроизводстваКон, КонецДня(МинДатаПроизводстваКон)));
	Запрос.УстановитьПараметр("МаксДатаПроизводстваКон", ?(МаксДатаПроизводстваКон = Дата(1,1,1), МаксДатаПроизводстваКон, КонецДня(МаксДатаПроизводстваКон)));
	Запрос.УстановитьПараметр("ОднаСтрока", (Объект.Номенклатура.Количество() = 1));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Объект.Товары[ВыборкаЗапроса.НомерСтроки - 1].КоличествоПеремещено = ВыборкаЗапроса.КоличествоПеремещено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.12.06 ИП-00020580
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Элементы.ТоварыОтработанноеКоличество.ТолькоПросмотр = НЕ (ЭтоТехнологПоКачеству ИЛИ ЭтоУправляющийКачества ИЛИ ЭтоПолныеПрава ИЛИ ЭтоПомощникУправляющего(ТекФизЛицо, ТекущиеДанные.Магазин));
	
КонецПроцедуры

//+++АК SHEP 2018.12.06 ИП-00020580 
&НаСервереБезКонтекста
Функция ЭтоПомощникУправляющего(ФизЛицо, Магазин)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ПОМЕСТИТЬ РолиПользователейПомощниковТУ
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&ТекДата,
		|			Объект = &Магазин
		|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)) КАК СоответствиеОбъектРольСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РолиПользователейПомощниковТУ КАК РолиПользователейПомощниковТУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО РолиПользователейПомощниковТУ.РольПользователя = РолиПользователейСоставРоли.Ссылка
		|ГДЕ
		|	РолиПользователейСоставРоли.Сотрудник = &ТекФизЛицо");
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ТекФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции
