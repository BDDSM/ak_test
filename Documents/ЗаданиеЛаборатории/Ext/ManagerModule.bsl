//+++АК LAGP 2018.03.07 ИП-00017097.03 Создание.

Процедура ЗагрузитьНовыеЗаданияЛаборатории() Экспорт
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	//Отбор последних 10000 записей по дате где больше 1 плохого результата от технологов, проверка регистра "ОснованияЗаданийЛаборатории" и отсеивание уже загруженных писем.	
	ТекстЗапросаСКЛ =	"select top 10000 
	|   a.[email_uid]
	|    ,[magazin]
	|    ,[text_email]
	|    ,[bad_result]  
	|    ,[poz]
	|    ,[data_partii]
	|    ,[id_tov]
	|    ,[id_kontr]
	|    ,_Fld13295 as MessageText
	|from [SMS_REPL].[dbo].[List_answer_emails] (nolock) a
	|join [SMS_REPL].[dbo].[List_emails] (nolock) le on a.email_uid = le.email_uid
	|join [IzbenkaFin].[dbo]._InfoRg11973 (nolock) rg  on rg._Fld13294 = a.email_uid and rg._Fld13294 <> '' -- РегистрСведений.ЛогиПисемGMAIL
	|left join (select _Fld14348 as e_uid 
	|	from [IzbenkaFin].[dbo]._InfoRg14347 (nolock)) rg2  
	|	on a.email_uid = rg2.e_uid -- РегистрСведений.ОснованияЗаданийЛаборатории
	|join (select _Fld13294, MIN(_Fld13301) as mi
	|    from [IzbenkaFin].[dbo]._InfoRg11973 (nolock)
	|    group by _Fld13294) mn on rg._Fld13294 = mn._Fld13294 and rg._Fld13301 = mn.mi
	|join (select email_uid
	|    from [SMS_REPL].[dbo].[List_answer_emails] 
	|    where bad_result is not null and bad_result <> ''
	|    group by email_uid
	|    having COUNT(*) > 1
	|    ) X on a.email_uid = X.email_uid
	|where bad_result is not null and bad_result <> '' AND rg2.e_uid is NULL";
	
	Попытка
		rs = ADOСоединение.Execute(ТекстЗапросаСКЛ);
		
		ТЗДокумента = Справочники.АК_ВнешниеБазыДанных.RecordSet_в_ТаблицуЗначений(rs);
		
		ТЗДокумента.Колонки.Добавить("Контрагент", 		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТЗДокумента.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗДокумента.Колонки.Добавить("Статус", 			Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаданийЛаборатории"));
		ТЗДокумента.Колонки.Добавить("ГрафикПоставки",  Новый ОписаниеТипов("СправочникСсылка.ГрафикиПоставкиТовара"));
		
		ADOСоединение.Close();
	Исключение
		Сообщить("Не удалось прочитать данные с [SMS_REPL] и [IzbenkaFin]!");
	КонецПопытки;	
	
	ОбработатьИДОбъектов(ТЗДокумента);
	
	ОбрабатываемыеПисьма = ТЗДокумента.Скопировать();
	ОбрабатываемыеПисьма.Свернуть("email_uid");
	
	Для каждого НовыйДокументЗаданиеЛаборатории Из ОбрабатываемыеПисьма Цикл		
		НайденныеСтрокиПоПисьму = ТЗДокумента.НайтиСтроки(Новый Структура("email_uid", НовыйДокументЗаданиеЛаборатории.email_uid));
		Если ЗначениеЗаполнено(НайденныеСтрокиПоПисьму) Тогда
			НовыйДокумент 			   = Документы.ЗаданиеЛаборатории.СоздатьДокумент();
			НовыйДокумент.Дата		   = ТекущаяДата();	
			НовыйДокумент.email_uid    = НайденныеСтрокиПоПисьму[0].email_uid;
			НовыйДокумент.Автор        = Справочники.Пользователи.НайтиПоНаименованию("ОбменБухия");
			НовыйДокумент.Номенклатура = НайденныеСтрокиПоПисьму[0].Номенклатура; 	
			НовыйДокумент.Поставщик    = НайденныеСтрокиПоПисьму[0].Контрагент;
			НовыйДокумент.Статус       = Перечисления.СтатусыЗаданийЛаборатории.НеОбработано;
			ТекстПисьмаПолный          = НайденныеСтрокиПоПисьму[0].MessageText;
			ТекстПисьмаПокупателя	   = Сред(ТекстПисьмаПолный, Найти(ТекстПисьмаПолный, "Дата обращения") + 14, Найти(ТекстПисьмаПолный, "Ответы писать") - 14 - Найти(ТекстПисьмаПолный, "Дата обращения") );
			НовыйДокумент.ТекстПисьма  = ТекстПисьмаПокупателя;	
			НовыйДокумент.ГрафикПоставкиТовара = НайденныеСтрокиПоПисьму[0].ГрафикПоставки;
			
			//+++АК CISA 2018.11.08 ИП-00020059
			НовыйДокумент.ВидОперации  = Перечисления.ВидыОперацийДокументаЗаданиеЛаборатории.Загружено;
			//---АК CISA
			
			Для каждого НайденнаяСтрока Из НайденныеСтрокиПоПисьму Цикл
				СтрокаТЗДокумента = НовыйДокумент.ОтветыТехнологов.Добавить();
				СтрокаТЗДокумента.ДатаПартии     = НайденнаяСтрока.data_partii;
				СтрокаТЗДокумента.НомерМагазина  = НайденнаяСтрока.magazin;
				СтрокаТЗДокумента.ОтветТехнолога = НайденнаяСтрока.bad_result;	
			КонецЦикла;
		КонецЕсли;				
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработатьИДОбъектов(ТЗДокумента)
	ЗапросКонтрагентов = Новый Запрос;
	ЗапросКонтрагентов.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИД КАК id_kontr
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИД В(&ИД)";
	ЗапросКонтрагентов.УстановитьПараметр("ИД", ТЗДокумента.ВыгрузитьКолонку("id_kontr"));
	РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить().Выгрузить();
	
	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.id_tov КАК id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.id_tov В(&ИД)";
	ЗапросНоменклатуры.УстановитьПараметр("ИД", ТЗДокумента.ВыгрузитьКолонку("id_tov"));
	РезультатЗапросаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗКонтрагентов Из РезультатЗапросаКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;	
		
		ОтборКонтрагента = Новый Структура;
		ОтборКонтрагента.Вставить("id_kontr", СтрокаТЗКонтрагентов.id_kontr);
		НайденныеСтрокиТЗДокумента = ТЗДокумента.НайтиСтроки(ОтборКонтрагента);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗДокумента) Тогда
			Для каждого СтрокаТЗДокумента Из НайденныеСтрокиТЗДокумента Цикл
				СтрокаТЗДокумента.Контрагент = СтрокаТЗКонтрагентов.Контрагент;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;	
	
	Для каждого СтрокаТЗНоменклатуры Из РезультатЗапросаНоменклатуры Цикл	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗКонтрагентов.id_kontr) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНоменклатуры = Новый Структура;
		ОтборНоменклатуры.Вставить("id_tov", СтрокаТЗНоменклатуры.id_tov);
		НайденныеСтрокиТЗДокумента = ТЗДокумента.НайтиСтроки(ОтборНоменклатуры);	
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТЗДокумента) Тогда
			Для каждого СтрокаТЗДокумента Из НайденныеСтрокиТЗДокумента Цикл
				СтрокаТЗДокумента.Номенклатура = СтрокаТЗНоменклатуры.Номенклатура;	
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;
	
	ТЗНоменклатураКонтрагент = ТЗДокумента.Скопировать();
	ТЗНоменклатураКонтрагент.Свернуть("Контрагент, Номенклатура");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГрафикиПоставкиТовараТовары.Номенклатура,
	|	ГрафикиПоставкиТовара.Ссылка КАК График,
	|	ГрафикиПоставкиТовара.Владелец КАК Контрагент
	|ИЗ
	|	Справочник.ГрафикиПоставкиТовара.Товары КАК ГрафикиПоставкиТовараТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиПоставкиТовара КАК ГрафикиПоставкиТовара
	|		ПО ГрафикиПоставкиТовараТовары.Ссылка = ГрафикиПоставкиТовара.Ссылка
	|ГДЕ
	|	ГрафикиПоставкиТовараТовары.Номенклатура В(&Номенклатура)
	|	И ГрафикиПоставкиТовара.Владелец В(&Контрагенты)
	|	И ГрафикиПоставкиТовараТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Контрагенты", ТЗНоменклатураКонтрагент.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("Номенклатура", ТЗНоменклатураКонтрагент.ВыгрузитьКолонку("Номенклатура"));
	
	ТЗГрафикиПоставки = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗДокумента Из ТЗДокумента Цикл
		СтрокаТЗДокумента.email_uid = СтрЗаменить(СтрЗаменить(СтрокаТЗДокумента.email_uid, "{", ""), "}", "");	
		
		ОтборГрафика = Новый Структура;
		ОтборГрафика.Вставить("Контрагент", СтрокаТЗДокумента.Контрагент);
		ОтборГрафика.Вставить("Номенклатура", СтрокаТЗДокумента.Номенклатура);
		
		НайденныеСтрокиГрафика = ТЗГрафикиПоставки.НайтиСтроки(ОтборГрафика);
		
		Если НайденныеСтрокиГрафика.Количество() > 0 Тогда
			СтрокаТЗДокумента.ГрафикПоставки = НайденныеСтрокиГрафика[0].График;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры
