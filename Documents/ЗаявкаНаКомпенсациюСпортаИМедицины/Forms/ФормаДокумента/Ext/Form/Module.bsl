//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Объект.Акцептовано Тогда
		ТолькоПросмотр = Истина;
	Иначе
		УстановитьДоступность();
	КонецЕсли;
КонецПроцедуры

//++K&C 07.11.2018 VKUS-1
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ Объект.Акцептовано Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Отправить письмо акцептанту?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		РезультатОтправки = ОтправитьЗаявкуПоЭлектроннойПочте(Объект.Ссылка);
		Если НЕ РезультатОтправки.Результат ТОгда
			
			Если НЕ ПустаяСтрока(РезультатОтправки.Сообщение) ТОгда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.Сообщение);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При отправке сообщения произошла ошибка. Письмо не отправлено.");
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

//++K&C 07.11.2018 VKUS-1
&НаСервере
Функция ОтправитьЗаявкуПоЭлектроннойПочте(Знач ДокументСсылка)
	
	Возврат Документы.ЗаявкаНаКомпенсациюСпортаИМедицины.ОтправитьЗаявкуПоЭлектроннойПочте(ДокументСсылка);
	
КонецФункции	

//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервере
Процедура УстановитьДоступность()
	Если Объект.ВидЗаявки = Перечисления.ВидыЗаявокНаКомпенсацию.Медицина Тогда
		Элементы.ПодтвержденТилНет.Доступность = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.СогласующийТилНет, Ложь);
		Элементы.Акцептовано.Доступность = Объект.ПодтвержденТилНет И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.АкцептантЗаявкиДляМедицины, Ложь);
	Иначе
		Элементы.ПодтвержденТилНет.Доступность = Ложь;
		Элементы.Акцептовано.Доступность = Документы.ЗаявкаНаКомпенсациюСпортаИМедицины.ЭтоРуководительПодразделения() Или УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.АкцептантЗаявкиДляМедицины, Ложь);
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ВидЗаявкиПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПодтвержденТилНетПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала необходимо указать ""Организацию""";
		Сообщение.Поле = "Объект.Организация";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ОткрытьФорму("Документ.ЗаявкаНаКомпенсациюСпортаИМедицины.Форма.ФормаВыбораФизЛиц", ПараметрыФормы, Элементы.Получатель);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервереБезКонтекста
Функция ПроверитьПодразделениеДолжность(ФизЛицо, Организация)
	Попытка
		Коннектор = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Зуп() + ".COMConnector");
		СоединениеБазаЗУП = Коннектор.Connect(ПолныеПрава.ПолучитьСтрокуПодключения_Зуп());
	Исключение
		Сообщить("Ошибка подключения к базе ЗУП: " + ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = СоединениеБазаЗУП.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
               |	МАКСИМУМ(ВЫБОР
               |			КОГДА СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Продавец-консультант""
               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Работник торгового зала""
               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Кассир""
               |					ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации.Наименование = ""Пекарь""
               |				ТОГДА ИСТИНА
               |			ИНАЧЕ ЛОЖЬ
               |		КОНЕЦ) КАК ЭтоПродавец,
               |	МАКСИМУМ(ВЫБОР
               |			КОГДА СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Администрация""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Информационное управление""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Исполнительное управление""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление единой концепцией""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление качества""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по обеспечению""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по финансовому контролю и учету""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление проектами""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по персоналу""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление по развитию""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление расчета заказов""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Управление финансами""
               |					ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеОрганизации.Наименование = ""Центральный офис""
               |				ТОГДА ИСТИНА
               |			ИНАЧЕ ЛОЖЬ
               |		КОНЕЦ) КАК ЭтоОфисныйСотрудник
               |ИЗ
               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
               |ГДЕ
               |	СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
               |	И НЕ СотрудникиОрганизаций.ПометкаУдаления
               |	И (СотрудникиОрганизаций.ТекущееПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
               |			ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
               |	И СотрудникиОрганизаций.Физлицо.Код = &Код
               |	И СотрудникиОрганизаций.ТекущееОбособленноеПодразделение.ИНН = &ИНН
               |
               |СГРУППИРОВАТЬ ПО
               |	СотрудникиОрганизаций.Физлицо.Код,
               |	СотрудникиОрганизаций.ТекущееОбособленноеПодразделение.ИНН";
	Запрос.УстановитьПараметр("Код", ФизЛицо.Код);
	Запрос.УстановитьПараметр("ИНН", Организация.ИНН);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭтоПродавец Или Выборка.ЭтоОфисныйСотрудник;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ПроверитьПодразделениеДолжность(ВыбранноеЗначение, Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сотруднику " + Строка(ВыбранноеЗначение) +  " нельзя возместить спорт и медицину, так как он не состоит в доступном подразделении или должности.";
		Сообщение.Поле = "Объект.Получатель";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Объект.Получатель = ВыбранноеЗначение;
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Получатель = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
КонецПроцедуры

//++K&C 07.11.2018 VKUS-1
&НаКлиенте
Процедура АкцептантПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Акцептант) Тогда
		
		Если НЕ ДостаточноПравДляАкцепта(Объект.Акцептант) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя " + Строка(Объект.Акцептант) +  " не достаточно прав для акцепта данного документа.",,"Объект.Акцептант");
			Объект.Акцептант = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			
		КОнецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

//++K&C 07.11.2018 VKUS-1
&НаСервереБезКонтекста
Функция ДостаточноПравДляАкцепта(Знач Пользователь)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ПраваПользователейНаРедактированиеГрафиков.Пользователь
	               |ИЗ
	               |	РегистрСведений.ПраваПользователейНаРедактированиеГрафиков КАК ПраваПользователейНаРедактированиеГрафиков
	               |ГДЕ
	               |	ПраваПользователейНаРедактированиеГрафиков.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Результат = Запрос.Выполнить();
	Возврат (Не Результат.Пустой());
	
КонецФункции	

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура АкцептантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьСписокРуководителей()));
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервереБезКонтекста
Функция ПолучитьСписокРуководителей()
	Возврат Документы.ЗаявкаНаКомпенсациюСпортаИМедицины.ПолучитьСписокРуководителей();
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПереченьДокументовПослеУдаления(Элемент)
	ЗаполнитьСуммуДокумента();
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПереченьДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьСуммуДокумента();
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ПереченьДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Компенсация = 50;
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ЗаполнитьСуммуДокумента()
	СуммаДокумента = 0;
	Для Каждого Стр Из Объект.ПереченьДокументов Цикл
		СуммаДокумента = СуммаДокумента + Окр(Стр.СуммаДоговора * Стр.Компенсация / 100, 2);
	КонецЦикла;
	Объект.СуммаДокумента = СуммаДокумента;
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ФайлДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбратьЗаписатьФайл(Элемент.Имя);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ФайлЧекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбратьЗаписатьФайл(Элемент.Имя);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ВыбратьЗаписатьФайл(ИмяЭлемента)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ВыбранныйФайл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Объект[ИмяЭлемента] = СоздатьФайлХранения(Новый Структура("Представление, Расширение, ДвоичныеДанные", ВыбранныйФайл.Имя, ВыбранныйФайл.Расширение, Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла)));
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервере
Функция СоздатьФайлХранения(СтруктураФайла)
	СпрФайлы = Справочники.Файлы.СоздатьЭлемент();
	СпрФайлы.Наименование = СтруктураФайла.Представление;
	СпрФайлы.Расширение = СтруктураФайла.Расширение;
	Если Лев(НРег(СтруктураФайла.Расширение), 4) = ".doc" Тогда
		СпрФайлы.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтруктураФайла.ДвоичныеДанные));
	Иначе	
		СпрФайлы.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтруктураФайла.ДвоичныеДанные)));
	КонецЕсли;	
	СпрФайлы.Записать();
	
	Возврат СпрФайлы.Ссылка;
КонецФункции

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ФайлДоговорОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайл(Элемент.Имя);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ФайлЧекОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайл(Элемент.Имя);
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаКлиенте
Процедура ОткрытьФайл(ИмяЭлемента)
	СтруктураФайла = ПолучитьРеквизитыСохраненияФайла(Объект[ИмяЭлемента]);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
	Если ПолучитьФайл(СтруктураФайла.АдресВХранилище, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.07.19 ИП-00019130
&НаСервере
Функция ПолучитьРеквизитыСохраненияФайла(ФайлСсылка)
	Если Лев(НРег(ФайлСсылка.Расширение), 4) = ".doc" Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Иначе	
		ДвоичныеДанные = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	КонецЕсли;	
	
	Возврат Новый Структура("АдресВХранилище, Расширение", ПоместитьВоВременноеХранилище(ДвоичныеДанные), ФайлСсылка.Расширение);
КонецФункции



