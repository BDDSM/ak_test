
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	//+++АК SHEP 20161015: Закомментировал, вызывал конфликт блокировок
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);						  
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.Номенклатура,
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.ХарактеристикаНоменклатуры,
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.Параметр,
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка,
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.НомерСтроки
	//|ИЗ
	//|	Документ.МП_ЗадачаТехнолога.ПараметрыЗадачи КАК МП_ЗадачаТехнологаПараметрыЗадачи
	//|ГДЕ
	//|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка.ВидПроверяемойОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПроверяемыхТехнологом.Поставка)
	//|	И НЕ МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка.ПометкаУдаления
	//|	И НЕ МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка.Закрыта
	//|	И МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка <> &Ссылка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();                                                              
	//
	//Пока Выборка.Следующий() Цикл
	//	Для Каждого Строка ИЗ ПараметрыЗадачи Цикл
	//		Если Выборка.Параметр = Строка.Параметр
	//				И (Строка.Номенклатура.ПринадлежитЭлементу(Выборка.Номенклатура)
	//					ИЛИ Выборка.Номенклатура.ПринадлежитЭлементу(Строка.Номенклатура)
	//					ИЛИ	(Выборка.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры
	//							И Выборка.Номенклатура = Строка.Номенклатура)) Тогда
	//			Сообщить("Назначение параметра в строке № " + Строка.НомерСтроки + " пересекается  с назначением параметра в строке № " +
	//						Выборка.НомерСтроки + " в документе " + Выборка.Ссылка);
	//			Отказ = Истина;
	//		КонецЕсли; 
	//	КонецЦикла;  
	//КонецЦикла;  	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	//+++АК SHEP 20160818
	Для Каждого СтрокаТЧ Из ПараметрыЗадачи Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСтроки) Тогда СтрокаТЧ.КлючСтроки = Новый УникальныйИдентификатор; КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСтрокиСтр) ИЛИ СтрокаТЧ.КлючСтрокиСтр = "00000000-0000-0000-0000-000000000000" Тогда СтрокаТЧ.КлючСтрокиСтр = Строка(СтрокаТЧ.КлючСтроки); КонецЕсли;
	КонецЦикла; 
	//---АК SHEP 20160818
	
	//+++АК SHEP 20160923: заполняем таблицу значений для проведения операций на sql
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам") И РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
	  //И РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ПроводитьОперацииМагазина") = Истина Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка.ТипЗадания КАК ТипЗадания,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.КлючСтрокиСтр,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.НомерСтроки,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ИДСтроки,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Номенклатура,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ХарактеристикаНоменклатуры КАК Характеристика,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ЕдиницаИзмерения,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Количество,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ДатаПроизводства,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Сумма
			|ПОМЕСТИТЬ ТаблицаТоваровБыло
			|ИЗ
			|	Документ.МП_ЗадачаТехнолога.ПараметрыЗадачи КАК МП_ЗадачаТехнологаПараметрыЗадачи
			|ГДЕ
			|	&Ссылка <> ЗНАЧЕНИЕ(Документ.МП_ЗадачаТехнолога.ПустаяСсылка)
			|	И МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка = &Ссылка
			|	И МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка.Проведен
			|	И МП_ЗадачаТехнологаПараметрыЗадачи.Количество <> 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТипЗадания,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL
			|ГДЕ
			|	&Ссылка = ЗНАЧЕНИЕ(Документ.МП_ЗадачаТехнолога.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ТипЗадания КАК ТипЗадания,
			|	ТаблицаТоваров.КлючСтрокиСтр,
			|	ТаблицаТоваров.НомерСтроки,
			|	ТаблицаТоваров.ИДСтроки,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ТаблицаТоваров.ЕдиницаИзмерения,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.ДатаПроизводства,
			|	ТаблицаТоваров.Сумма
			|ПОМЕСТИТЬ ТаблицаТоваровСтало
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Количество <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваровБыло.ТипЗадания,
			|	ИСТИНА КАК Сторно,
			|	ТаблицаТоваровБыло.КлючСтрокиСтр,
			|	ТаблицаТоваровБыло.НомерСтроки,
			|	ТаблицаТоваровБыло.ИДСтроки,
			|	ТаблицаТоваровБыло.Номенклатура,
			|	ТаблицаТоваровБыло.Характеристика,
			|	ТаблицаТоваровБыло.ЕдиницаИзмерения,
			|	ТаблицаТоваровБыло.Количество,
			|	ТаблицаТоваровБыло.ДатаПроизводства,
			|	ТаблицаТоваровБыло.Сумма
			|ИЗ
			|	ТаблицаТоваровБыло КАК ТаблицаТоваровБыло
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровСтало КАК ТаблицаТоваровСтало
			|		ПО ТаблицаТоваровБыло.КлючСтрокиСтр = ТаблицаТоваровСтало.КлючСтрокиСтр
			|ГДЕ
			|	(ТаблицаТоваровСтало.КлючСтрокиСтр ЕСТЬ NULL 
			|			ИЛИ ТаблицаТоваровБыло.Количество <> ТаблицаТоваровСтало.Количество
			|			ИЛИ ТаблицаТоваровБыло.ДатаПроизводства <> ТаблицаТоваровСтало.ДатаПроизводства
			|			ИЛИ ТаблицаТоваровБыло.ТипЗадания <> ТаблицаТоваровСтало.ТипЗадания)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаТоваровСтало.ТипЗадания,
			|	ЛОЖЬ,
			|	ТаблицаТоваровСтало.КлючСтрокиСтр,
			|	ТаблицаТоваровСтало.НомерСтроки,
			|	ТаблицаТоваровСтало.ИДСтроки,
			|	ТаблицаТоваровСтало.Номенклатура,
			|	ТаблицаТоваровСтало.Характеристика,
			|	ТаблицаТоваровСтало.ЕдиницаИзмерения,
			|	ТаблицаТоваровСтало.Количество,
			|	ТаблицаТоваровСтало.ДатаПроизводства,
			|	ТаблицаТоваровСтало.Сумма
			|ИЗ
			|	ТаблицаТоваровСтало КАК ТаблицаТоваровСтало
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровБыло КАК ТаблицаТоваровБыло
			|		ПО (ТаблицаТоваровБыло.КлючСтрокиСтр = ТаблицаТоваровСтало.КлючСтрокиСтр)
			|ГДЕ
			|	(ТаблицаТоваровБыло.КлючСтрокиСтр ЕСТЬ NULL 
			|			ИЛИ ТаблицаТоваровБыло.Количество <> ТаблицаТоваровСтало.Количество
			|			ИЛИ ТаблицаТоваровБыло.ДатаПроизводства <> ТаблицаТоваровСтало.ДатаПроизводства
			|			ИЛИ ТаблицаТоваровБыло.ТипЗадания <> ТаблицаТоваровСтало.ТипЗадания)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		//Запрос.УстановитьПараметр("НужноПроводить", ЗначениеЗаполнено(Ссылка) И НЕ Ссылка.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Запрос.УстановитьПараметр("ТипЗадания", ТипЗадания);
		ТаблицаТоваров_ТоварныеОперации = ПараметрыЗадачи.Выгрузить(, "КлючСтрокиСтр,НомерСтроки,ИДСтроки,Номенклатура,ХарактеристикаНоменклатуры,Количество,ДатаПроизводства,Сумма,ЕдиницаИзмерения");
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров_ТоварныеОперации);
		
		ТаблицаДвижений_ТоварныеОперации = Запрос.Выполнить().Выгрузить();
		Если ТаблицаДвижений_ТоварныеОперации.Количество() > 0 И ТаблицаДвижений_ТоварныеОперации.НайтиСтроки(Новый Структура("Сторно", Ложь)).Количество() > 0 Тогда ID_Doc_SQL = Строка(Новый УникальныйИдентификатор()); КонецЕсли;
		ДополнительныеСвойства.Вставить("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации);
		ДополнительныеСвойства.Вставить("ПредыдущийТипЗадания", ?(ЗначениеЗаполнено(Ссылка), Ссылка.ТипЗадания, ТипЗадания));
		
	КонецЕсли;
	//---АК SHEP 20160923
	
	//
	Если ВидПроверяемойОперации = Перечисления.ВидыОперацийПроверяемыхТехнологом.Поставка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Профиль = ЗНАЧЕНИЕ(Справочник.МП_ПрофилиИспользования.Технолог)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
				ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")) Тогда Возврат; КонецЕсли;
	
	ОшибкаДатыПроизводства = Ложь;
	ВсеПартии = ДокументОснование.ВсеПартии;
	БезДатПроизводства = ДокументОснование.БезДатПроизводства;
	
	Для Каждого СтрокаТЧ Из ПараметрыЗадачи Цикл
		
		//+++АК SHEP 20160826: для нулевого кол-ва не проверяем дату производства
		Если СтрокаТЧ.Количество = 0 Тогда Продолжить; КонецЕсли;
		//---АК SHEP 20160826
		
		ТекНомерСтроки 		= СтрокаТЧ.НомерСтроки;
		ТекДатаПроизводства = СтрокаТЧ.ДатаПроизводства;
		ДатаПроизводстваНач = СтрокаТЧ.ДатаПроизводстваНач;
		ДатаПроизводстваКон = СтрокаТЧ.ДатаПроизводстваКон;
		
		ТекстОшибки = "В строке №" + ТекНомерСтроки + " дата производства не соответствует датам производства (с..по)";
		Если БезДатПроизводства ИЛИ ВсеПартии Тогда
			// не проверяем дату производства
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекДатаПроизводства) Тогда
			ОшибкаДатыПроизводства = Истина;
			ТекстОшибки = "В строке №" + ТекНомерСтроки + " не указана дата производства!";
			
		ИначеЕсли ЗначениеЗаполнено(ДатаПроизводстваКон) Тогда
			ОшибкаДатыПроизводства = (ТекДатаПроизводства < ДатаПроизводстваНач
										ИЛИ ТекДатаПроизводства > ДатаПроизводстваКон);
		ИначеЕсли ЗначениеЗаполнено(ДатаПроизводстваНач) Тогда
			ОшибкаДатыПроизводства = (ТекДатаПроизводства < ДатаПроизводстваНач);
		Иначе
			//+++АК SHEP 20160805: если период дат проиводства не заполнен, дату производства не проверяем
			//ОшибкаДатыПроизводства = ЗначениеЗаполнено(ТекДатаПроизводства);
			//---АК SHEP 20160805
		КонецЕсли;
		
		Если ОшибкаДатыПроизводства Тогда
	        Сообщение = Новый СообщениеПользователю();
	        Сообщение.Текст = ТекстОшибки;
	        Сообщение.Поле 	= "ПараметрыЗадачи[" + (ТекНомерСтроки - 1) + "].ДатаПроизводства";
	        Сообщение.УстановитьДанные(ЭтотОбъект);
	        Сообщение.Сообщить();
	        Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура осуществляет печать документа. Можно направить печать на экран или принтер, а также распечатать необходимое количество копий.
// Название макета печати передается в качестве параметра, по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПередачаТоваровПоставщику"  Тогда
		ТабДокумент = ПечатьПередачаТоваровПоставщику();
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать

// Функция формирует табличный документ с печатной формой накладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПередачаТоваровПоставщику() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Накладная.Номер,
	|	Накладная.Дата,
	|	Накладная.ДокументОснование.Поставщик КАК Поставщик,
	|	Накладная.Магазин.Организация КАК Организация,
	|	ВалютаРегламентированногоУчета.Значение КАК ВалютаДокумента,
	|	ЛОЖЬ КАК УчитыватьНДС,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Ответственный,
	|	Накладная.Магазин.Представление КАК ОтветственныйПредставление,
	|	Накладная.ПараметрыЗадачи.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		ВЫРАЗИТЬ(Накладная.ПараметрыЗадачи.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Сумма/Количество КАК Цена,
	|		Сумма
	|	) КАК Товары
	|ИЗ
	|	Документ.МП_ЗадачаТехнолога КАК Накладная,
	|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ГДЕ
	|	Накладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыЗадачи.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МП_ЗадачаТехнолога_ПередачаТоваровПоставщику";

	Макет = ПолучитьМакет("ПередачаТоваровПоставщику");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Передача товаров поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть	
	Колонка = "";
	ВыводитьКоды = Ложь;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки +	Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	
	Ном = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.Цена        = ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);

		Сумма = Сумма + ВыборкаСтрокТовары.Сумма;

	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока 	= "Всего наименований " + Ном + ", на сумму " +
												ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью 	= ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОтветственном 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Ответственный, Шапка.Дата, Ложь);
	ОтветственныйПредставление 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтветственном, "НаименованиеДляПечатныхФорм,");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции

Процедура ЗаполнитьТоварныеОперации(ТоварныеОперации) Экспорт
Перем Дата1, Дата2, НомерТочки, Описание, СоответствиеТоваров;
	
	Дата1 = НачалоДня(ЭтотОбъект.Дата);
	Дата2 = КонецДня(ТекущаяДата());
	НомерТочки = ЭтотОбъект.Магазин.НомерТочки;
	Описание = Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор());
	
	СоответствиеТоваров = Новый Соответствие;
	
	ЗапросSQL =
		"SELECT CONVERT(varchar(10),closedate,105) Дата, * FROM (select closedate, CONVERT(varchar(5),closedate,108) Время, q Колво, balance_ost ОстатокПослеОпер,
		|	tpo.name_operation Операция , id_tov,
		|	case when tpo.znak =-1 then null else q end КвоПолучено,
		|	case when tpo.znak =-1 then q else null end КвоОтправлено,
		|	case when atd.operation_type in(410) then isnull(tt.name_TT, atd.corr_id_tt) else '' end Откуда,
		|	case when atd.operation_type in(411) then isnull(tt.name_TT, atd.corr_id_tt) else '' end Куда,
		|	line_no
		|from SMS_IZBENKA_ARC..arc_All_td_docs_centr atd inner join SMS_REPL..Types_Operation as tpo with(nolock)
		|on atd.operation_type=tpo.code_operation and tpo.table_operation='td_move' and tpo.field_operation='operation_type_orig'
		|left join (select distinct N, Name_tt
		|			from (select N, name_tt
		|				from M2..tt where N<>0 and isnull(tt_format,0) <>0
		|				union all
		|				SELECT [id_sklad]
		|					  ,[Name_sklad]
		|				  FROM [M2].[dbo].[Sklad_for_Zadach_Teh])a) as tt on atd.Corr_id_tt = tt.N
		|where ShopNo_rep= " + ВнешниеДанные.ФорматПоля(НомерТочки) + " and Confirm_type=1 and Descr=" + ВнешниеДанные.ФорматПоля(Описание) + " and closedate between " + ВнешниеДанные.ФорматПоля(Дата1) + " and DATEADD(day,1," + ВнешниеДанные.ФорматПоля(Дата2) + ")
		|
		|union all
		|
		|SELECT
		|closedate, CONVERT(varchar(5),closedate,108) Время, q Колво, balance_ost ОстатокПослеОпер,
		|	tpo.name_operation Операция , id_tov,
		|	case when tpo.znak =-1 then null else q end КвоПолучено,
		|	case when tpo.znak =-1 then q else null end КвоОтправлено,
		|	case when atd.operation_type in(410) then isnull(tt.name_TT, atd.corr_id_tt) else '' end Откуда,
		|	case when atd.operation_type in(411) then isnull(tt.name_TT, atd.corr_id_tt) else '' end Куда,
		|	line_no
		|from SMS_REPL..All_td_docs_centr atd inner join SMS_REPL..Types_Operation as tpo with(nolock)
		|on atd.operation_type=tpo.code_operation and tpo.table_operation='td_move' and tpo.field_operation='operation_type_orig'
		|left join (select distinct N, Name_tt
		|			from (select N, name_tt
		|				from M2..tt where N<>0 and isnull(tt_format,0) <>0
		|				union all
		|				SELECT [id_sklad]
		|					  ,[Name_sklad]
		|				  FROM [M2].[dbo].[Sklad_for_Zadach_Teh])a) as tt on atd.Corr_id_tt = tt.N
		|where ShopNo_rep= " + ВнешниеДанные.ФорматПоля(НомерТочки) + " and Confirm_type=1 and Descr=" + ВнешниеДанные.ФорматПоля(Описание) + " and closedate between " + ВнешниеДанные.ФорматПоля(Дата1) + " and DATEADD(day,1," + ВнешниеДанные.ФорматПоля(Дата2) + ")
		|and not (Descr='Корректировка остатков при чистке таблицы' and operation_type=501)
		|) as VZ
		|order by closedate, line_no";
					
	СтруктураПолей = Новый Структура("Дата,Время,КвоПолучено,КвоОтправлено,ОстатокПослеОперации,Операция,Откуда,Куда",
									"closedate","closedate","КвоПолучено","КвоОтправлено","ОстатокПослеОпер","Операция","Откуда","Куда");
	ТоварныеОперации.Очистить();
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	Выборка = ADOСоединение.Execute(ЗапросSQL);
	Попытка	
		Выборка.MoveFirst();
		Пока НЕ Выборка.EOF() Цикл
			СтрокаДоб = ТоварныеОперации.Добавить();
			
			Для Каждого КлючИЗначение Из СтруктураПолей Цикл
				СтрокаДоб[КлючИЗначение.Ключ] = Выборка.Fields(КлючИЗначение.Значение).Value;
			КонецЦикла;
			
			Если НРег(СтрокаДоб["КвоПолучено"]) = "null" Тогда СтрокаДоб["КвоПолучено"] = ""; КонецЕсли;
			Если НРег(СтрокаДоб["КвоОтправлено"]) = "null" Тогда СтрокаДоб["КвоОтправлено"] = ""; КонецЕсли;
			
			id_tov = Выборка.Fields("id_tov").Value;
			ТоварПо_id_tov = СоответствиеТоваров.Получить(id_tov);
			Если ТоварПо_id_tov = Неопределено Тогда
				ТоварПо_id_tov = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", id_tov);
				СоответствиеТоваров.Вставить(id_tov, ТоварПо_id_tov);
			КонецЕсли;
			СтрокаДоб.Товар = ТоварПо_id_tov;

			Выборка.MoveNext();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
КонецПроцедуры	

Функция ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации()
	Возврат Документы.МП_ЗадачаТехнолога.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
КонецФункции

Функция ВернутьИДНоменклатуры(НомСсылка)
	Возврат Документы.МП_ЗадачаТехнолога.ВернутьИДНоменклатуры(НомСсылка);
КонецФункции

Функция ВернутьИДХарактеристики(ХарСсылка)
	Возврат Документы.МП_ЗадачаТехнолога.ВернутьИДХарактеристики(ХарСсылка);
КонецФункции

Функция РозничнаяЦена(ВыбНоменклатура)
	Возврат Документы.МП_ЗадачаТехнолога.РозничнаяЦена(ВыбНоменклатура);
КонецФункции

Функция ТоварныеОперации_ОперацияПринятаСервером(Знач ИдДокумента, ИдСтроки, Знач НомерТочкиПоАйпи = 0) Экспорт
	
	Если НомерТочкиПоАйпи = 0 Тогда
		НомерТочкиПоАйпи = ПараметрыСеанса.НомерТочкиПоАйпи;
	КонецЕсли;
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ИдДокумента = Строка(Ссылка.УникальныйИдентификатор());
	ЗапросSQL = "
		|SELECT [Id_doc]     
  		|FROM [SMS_Repl].[dbo].[TD_move] (nolock)
  		|WHERE [Confirm_type] = 1
		|	AND [tduid] = " + ВнешниеДанные.ФорматПоля(ИдСтроки) + "
		|	AND ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочкиПоАйпи); // + "
		//|	AND ([Id_doc] = " + ВнешниеДанные.ФорматПоля(ИдДокумента) + " OR [Descr] = " + ВнешниеДанные.ФорматПоля(ИдДокумента) + ")";
		
	rs = ADOСоединение.Execute(ЗапросSQL);

	ОперацияПринята = Ложь;
	//Попытка
		Если НЕ rs.EOF() Тогда ОперацияПринята = Истина; КонецЕсли;
	//Исключение
	//	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());		
	//КонецПопытки;
	
	//+++АК SHEP 20161018: ищем в архиве
	Если НЕ ОперацияПринята И Дата < НачалоМесяца(ТекущаяДата()) И РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ИскатьВАрхивеОперацииМагазина") = Истина Тогда
		ЗапросSQL = "
			|SELECT [Id_doc]     
	  		|FROM SMS_IZBENKA_ARC..arc_All_td_docs_centr
	  		|WHERE [Confirm_type] = 1
			|	AND [tduid] = " + ВнешниеДанные.ФорматПоля(ИдСтроки) + "
			|	AND ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТочкиПоАйпи); // + "
			//|	AND ([Id_doc] = " + ВнешниеДанные.ФорматПоля(ИдДокумента) + " OR [Descr] = " + ВнешниеДанные.ФорматПоля(ИдДокумента) + ")";
			
		rs = ADOСоединение.Execute(ЗапросSQL);

		//Попытка
			Если НЕ rs.EOF() Тогда ОперацияПринята = Истина; КонецЕсли;
		//Исключение
		//	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());		
		//КонецПопытки;
	КонецЕсли;
	//---АК SHEP 20161018
	
	ADOСоединение.Close();
	
	Возврат ОперацияПринята;
	
КонецФункции

Функция ТоварныеОперации_ПровестиДок(ИдДокумента, КодОперации, ДатаЗакрытия = Неопределено, Знач НомерТочкиПоАйпи = 0, Обязательно = Ложь) Экспорт
	Возврат Документы.МП_ЗадачаТехнолога.ТоварныеОперации_ПровестиДок(Строка(Ссылка.УникальныйИдентификатор()), ИдДокумента, КодОперации, ДатаЗакрытия, НомерТочкиПоАйпи, Обязательно);
КонецФункции

Процедура ОбновитьСуммыРеализованногоВозврата(Обработано = Истина, ДелатьЧерезПопытку = Ложь) Экспорт
	
	ЗаданиеТехнологаМагазинамОбъект = ДокументОснование.ПолучитьОбъект();
	Если НЕ ДелатьЧерезПопытку Тогда
		ЗаданиеТехнологаМагазинамОбъект.ОбновитьСуммыРеализованногоВозврата(Ссылка, Обработано);
		ЗаданиеТехнологаМагазинамОбъект.Записать();
		Возврат;
	КонецЕсли;
	
	НомерПопытки = 0;
	Пока Истина Цикл
		Попытка
			ЗаданиеТехнологаМагазинамОбъект.ОбновитьСуммыРеализованногоВозврата(Ссылка, Обработано);
			ЗаданиеТехнологаМагазинамОбъект.Записать();
			Прервать;
		Исключение
			Если НомерПопытки = 20 Тогда ВызватьИсключение ОписаниеОшибки(); КонецЕсли;
			НомерПопытки = НомерПопытки + 1;
			ЗаданиеТехнологаМагазинамОбъект.Прочитать();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияSQL_Избёнка(Отказ)
	
	Попытка
		ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
		RecSet = Новый COMОбъект("ADODB.Recordset");
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Отказ =  Истина;
	КонецПопытки;
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	ТекстЗапросаSQL = "
		|	--ch.CloseDate , ch.CashCheckNo , ch.CashID -- должны быть уникальными
		|	declare @newid as uniqueidentifier = newid() -- идентификатор чека
		|	, @ShopNo as int = " + ВнешниеДанные.ФорматПоля(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин, "НомерТочки")) + "
		|	, @CashId as int 
		|	, @closedate as datetime=dateadd(MS,-DATEPART(ms,getdate()),GETDATE())
		|	, @Operation_type as int=411
		|	, @id_tt as int
		|	, @id_sklad as int=-1
		|
		|	select @id_tt=id_tt from M2..tt where N=@ShopNo 
		|
		|	--получим номер кассы
		|	select @CashId= a.cashid from (select top 1 ch.CashID from [SMS_IZBENKA]..[Checks] ch
		|	where ch.OperationType in (1) and ch.ShopNo=@shopno order by CloseDate desc)a
		|
		|	if OBJECT_ID('tempdb..#cl') is not null drop table #cl
		|
		|	--сформируем строки перемещения";
		
	ТекстЗапросаSQL = ТекстЗапросаSQL + "
		|	select NEWID() checkLineUID, @newid CheckUID, ROW_NUMBER () over (order by a.id_tov) CashCheckLineNo
		|		,id_kontr ManufacturerID,pr.Price baseprice, a.Kolvo Quantity, 0 basesum, a.Kolvo*pr.Price Discount, 1 DiscountType
		|		, a.id_tov id_tov_cl, @id_tt id_tt_cl, CONVERT(date, @closedate) date_ch, CONVERT(time,@closedate) time_ch
		|		, @Operation_type operationType_cl, 0 Confirm_reason, 0 id_reason, a.DateProizvNach date_proiizv, a.Kolvo Qty_Other_tt
		|		, @closedate confirm_date, @id_sklad corr_id_tt, @closedate LoadDatetime_cl
		|	into #cl 
		|	from SMS_IZBENKA..Allowed_Peremeschenia_to_Sklad as a left join Reports..Price_1C_tov as pr on a.id_tov=pr.id_tov
		|	where a.ShopNo=@ShopNo";
	
	ТекстЗапросаSQL = ТекстЗапросаSQL + "
		|
		|	if exists(select * from #cl)
		|	begin 
		|	insert into SMS_IZBENKA..Checks (CheckUID,ShopNo,ShiftUID,CashID,CashCheckNo,CloseDate,BaseSum,Discount
		|	,SummCash,SummBank,SummBonus,OperationType,JournType,JournDateTime,OperationTypeOrig, LoadDateTime)
		|	select @newid CheckUID,@ShopNo ShopNo, null ShiftUID,@CashId CashID,null CashCheckNo, @closedate closedate
		|	, 0 Basesum, a.Discount Discount, 0 SummCash, 0 SumBank, 0 SumBonus, @Operation_type Operation_Type
		|	,1 JournType, @closedate JournDateTime, @Operation_type OperationTypeOrig, @closedate LoadDateTime
		|	from (select SUM(Discount)Discount from #cl)a
		|
		|
		|	insert into SMS_IZBENKA..CheckLine (CheckLineUID,CheckUID,CashCheckLineNo,ManufacturerID,BasePrice,Quantity
		|	,BaseSum,Discount,id_tov_cl,id_tt_cl,date_ch,time_ch,OperationType_cl,Confirm_reason,id_reason
		|	,Date_proiizv,Qty_Other_TT,Confirm_date,Corr_id_tt,LoadDateTime_cl, DiscountType)
		|	select CheckLineUID,CheckUID,CashCheckLineNo,ManufacturerID,BasePrice,Quantity
		|	,BaseSum,Discount,id_tov_cl,id_tt_cl,date_ch,time_ch,OperationType_cl,Confirm_reason,id_reason
		|	,Date_proiizv,Qty_Other_TT,Confirm_date,Corr_id_tt,LoadDateTime_cl,DiscountType from #cl
		|";
	
	Если ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки Тогда
		
		ТекстЗапросаSQL = ТекстЗапросаSQL + "
		|
		|
		|	--Отправить на пересчёт ЛУ
		|	insert into [jobs].[dbo].[Jobs]
		|	([job_name]
		|	,[prefix_job]
		|	,[number_1]
		|	,[number_2])
		|
		|	select 'sms_izbenka..make_eLU_new' , @shopno, DATEDIFF(DAY,'20140101', @closedate) , DATEDIFF(second,convert(date,@closedate),@closedATE)
		|
		|	--поставить задание на отправку уведомления ---------------------------------
		|	insert into [jobs].[dbo].[Jobs]
		|	([job_name]
		|	,[prefix_job]
		|	,[number_1]
		|	,[number_2])
		|
		|	select distinct 'Reports..Send_Notification_IZ', @ShopNo ,
		|	DATEDIFF(DAY , '20140101' , @closedate) , 
		|	DATEDIFF(SECOND ,convert(date,@closedate) ,@closedate)
		|";
	КонецЕсли;
	
	ТекстЗапросаSQL = ТекстЗапросаSQL + "
		|
		|	end
		|
		|	drop table #cl
		|";
	
	Попытка  
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = ADOСоединение;
		Command.CommandType=1;
		
		ADOСоединение.BeginTrans();
		
		Command.CommandText = ТекстЗапросаSQL;
		Command.Execute();
		
		ADOСоединение.CommitTrans();
	Исключение
		Отказ = Истина;
		ADOСоединение.RollbackTrans();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		ADOСоединение.Close(); 
	Исключение КонецПопытки;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
Перем ИДДок, ТочкаПолучатель, КодОперации, КодОбратнойОперации, ТаблицаДвижений_ТоварныеОперации;
Перем ТекНоменклатура, ТекКоличество, СтрокаТД, СтрокаТЧ;
Перем ПредыдущийТипЗадания;
	
	Если НЕ (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")) Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МП_ЗадачаТехнолога.ДокументОснование КАК ЗаданиеТехнологаМагазинам,
		|	МП_ЗадачаТехнолога.Магазин,
		|	ЗадачаТехнологаТовары.УИДСтрокиНоменклатуры,
		|	ЗадачаТехнологаТовары.Номенклатура,
		|	ЗадачаТехнологаТовары.ХарактеристикаНоменклатуры,
		|	СУММА(ЗадачаТехнологаТовары.Количество) КАК ПотенциальноеКоличество,
		|	СУММА(ЗадачаТехнологаТовары.Количество) КАК РеализованноеКоличество,
		|	СУММА(ВЫБОР
		|			КОГДА МП_ЗадачаТехнолога.ФактическаяДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА 0
		|			ИНАЧЕ ЗадачаТехнологаТовары.Количество
		|		КОНЕЦ) КАК ОтработанноеКоличество
		|ИЗ
		|	Документ.МП_ЗадачаТехнолога.ПараметрыЗадачи КАК ЗадачаТехнологаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МП_ЗадачаТехнолога КАК МП_ЗадачаТехнолога
		|		ПО ЗадачаТехнологаТовары.Ссылка = МП_ЗадачаТехнолога.Ссылка
		|ГДЕ
		|	ЗадачаТехнологаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	МП_ЗадачаТехнолога.ДокументОснование,
		|	МП_ЗадачаТехнолога.Магазин,
		|	ЗадачаТехнологаТовары.УИДСтрокиНоменклатуры,
		|	ЗадачаТехнологаТовары.Номенклатура,
		|	ЗадачаТехнологаТовары.ХарактеристикаНоменклатуры");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ДвиженияПоКоличеству = ЭтотОбъект.Движения.КоличествоПоЗадачамТехнолога;
	ДвиженияПоКоличеству.Записывать = Истина;
	ДвиженияПоКоличеству.Загрузить(Запрос.Выполнить().Выгрузить());
	ДвиженияПоКоличеству.Записать();
	
	// изменений не было, ничего не делаем
	Если НЕ (ДополнительныеСвойства.Свойство("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации) И ТаблицаДвижений_ТоварныеОперации.Количество() > 0) Тогда
		// обновляем суммы реализованного возврата
		ОбновитьСуммыРеализованногоВозврата();
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//+++АК SHEP 20161107: проверяем остатки (если есть сторнирующие операции, проверяем, чтобы новое кол-во не превышало остаток)
	ПроверятьНаличиеОстатков = (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	Если ПроверятьНаличиеОстатков Тогда
		Попытка
			ТорговаяТочкаПоАйпи = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
			ТорговаяТочкаПоАйпи = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецПопытки;
		ПолныеПрава.УстановитьТекущийМагазин(Магазин);
		
		Попытка
			
			ТЗнДляОстатков = ТаблицаДвижений_ТоварныеОперации.Скопировать(Новый Структура("Сторно", Ложь), "Номенклатура,Количество");
			Если ТЗнДляОстатков.Количество() > 0 Тогда
				ТЗнДляОстатков.Свернуть("Номенклатура", "Количество");
				ТЗнОстатков = ВнешниеДанные.ПолучитьТаблицуОстатковПоМассивуНоменклатурыПоТДОст(ТЗнДляОстатков.ВыгрузитьКолонку("Номенклатура"));
				
				Для Каждого СтрокаТД Из ТЗнДляОстатков Цикл
					
					ТекНоменклатура = СтрокаТД.Номенклатура;
					МассивСтрокТЧ = ТЗнОстатков.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
					Если МассивСтрокТЧ.Количество() = 1 Тогда
						ТЗнОстатков_Остаток = МассивСтрокТЧ[0].Остаток;
					Иначе
						ТЗнОстатков_Остаток = 0;
					КонецЕсли;
					
					// уменьшаем проверяемое кол-во на сторнируемое кол-во
					ТекКоличество = СтрокаТД.Количество;
					МассивСтрокТЧ = ТаблицаДвижений_ТоварныеОперации.НайтиСтроки(Новый Структура("Номенклатура,Сторно", ТекНоменклатура, Истина));
					Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
						ТекКоличество = ТекКоличество - СтрокаТЧ.Количество;
					КонецЦикла;
					
					// проверяем наличие остатков, только если количество увеличилось
					Если ТекКоличество > 0 И ТекКоличество > ТЗнОстатков_Остаток Тогда
						
				        Сообщение = Новый СообщениеПользователю();
				        Сообщение.Текст = "По номенклатуре '" + Строка(ТекНоменклатура) + "' количество (" + СтрокаТД.Количество +
							") превышает возможный остаток (" + (ТЗнОстатков_Остаток + СтрокаТД.Количество - ТекКоличество) + ")";
						
						МассивСтрокТЧ = ПараметрыЗадачи.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
						Если МассивСтрокТЧ.Количество() > 0 Тогда
							Сообщение.Поле 	= "ПараметрыЗадачи[" + (МассивСтрокТЧ[0].НомерСтроки - 1) + "].Количество";
						КонецЕсли;
						
				        Сообщение.УстановитьДанные(ЭтотОбъект);
				        Сообщение.Сообщить();
				        Отказ = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			
			ПолныеПрава.УстановитьТекущийМагазин(ТорговаяТочкаПоАйпи);
			ВызватьИсключение ОписаниеОшибки();
			
		КонецПопытки;
		
		ПолныеПрава.УстановитьТекущийМагазин(ТорговаяТочкаПоАйпи);
		Если Отказ Тогда Возврат; КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20161107
	
	МассивТиповЗаданий = Новый Массив;
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
	
	ДополнительныеСвойства.Свойство("ПредыдущийТипЗадания", ПредыдущийТипЗадания);
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")
		//и НЕ (ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт)
		И МассивТиповЗаданий.Найти(ТипЗадания) <> Неопределено
		тогда
		
			СуществующийОрдер=Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(Ссылка);
			
			Если ЗначениеЗаполнено(СуществующийОрдер) Тогда
				ОрдерДок = СуществующийОрдер.ПолучитьОбъект();
				ОрдерДок.ПометкаУдаления = Ложь;
				
				//НомерПопытки = 0;
				//Пока Истина Цикл
				//	Попытка
						ОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
					//	Прервать;
					//Исключение
					//	Если НомерПопытки = 20 Тогда
					//		ВызватьИсключение ОписаниеОшибки();
					//	ИначеЕсли НомерПопытки = 15 Тогда
					//		ПолныеПрава._ОбновитьНумерациюОбъектов(Метаданные.Документы.ПриходныйОрдерСклад);
					//	КонецЕсли;
					//	//ОрдерДок.УстановитьНовыйНомер();
					//	НомерПопытки = НомерПопытки + 1;
					//КонецПопытки;
				//КонецЦикла;
				
			КонецЕсли;
			
			//Если НЕ ЗначениеЗаполнено(СуществующийОрдер) тогда
			//	ОрдерДок=Документы.ПриходныйОрдерСклад.СоздатьДокумент();
			//	
			//ИначеЕсли НачалоДня(СуществующийОрдер.Дата) <> НачалоДня(ТекущаяДата()) Тогда
			//	
			//	//Если ТипЗадания <> ПредыдущийТипЗадания Тогда
			//		
			//		// сторнируем предыдущий документ
			//		ОрдерДок = СуществующийОрдер.Скопировать();
			//		Для Каждого СтрокаТЧ Из ОрдерДок.Товары Цикл
			//			СтрокаТЧ.Количество = -СтрокаТЧ.Количество;
			//		КонецЦикла;
			//		
			//		ОрдерДок.Записать(?(СуществующийОрдер.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			//		
			//		// создаём новый документ
			//		ОрдерДок = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
			//		
			//	//Иначе
			//	//	
			//	//КонецЕсли;
			//	
			//	//// сторнируем расх. ордером сущ. прих. ордер
			//	//РасхОрдерДок = Документы.РасходныйОрдерСклад.СоздатьДокумент();
			//	//РасхОрдерДок.Дата = ТекущаяДата();
			//	//РасхОрдерДок.Заполнить(СуществующийОрдер);
			//	//РасхОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
			//	//Сообщить("Записан ордер " + РасхОрдерДок.Ссылка);
			//	//
			//	//ОрдерДок = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
			//	
			//иначе
			//	ОрдерДок=СуществующийОрдер.ПолучитьОбъект();
			//	ОрдерДок.Основание=Ссылка;
			//	ОрдерДок.ПометкаУдаления=Ложь;
			//КонецЕсли;
			//
			//ОрдерДок.Заполнить(Ссылка);
			////+++АК SHEP 20160922: делаем тек. дату
			////ОрдерДок.Дата=Дата;
			//ОрдерДок.Дата = ТекущаяДата();
			////---АК SHEP 20160922
			
			//Если Проведен или ОрдерДок.Проведен тогда
				//Попытка
					//ОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
				//Исключение
				//	Сообщить("Ошибка при проведении ордера " + ОрдерДок.Ссылка+": "+ОписаниеОшибки());
				//КонецПопытки;
			//Иначе
			//	ОрдерДок.Записать();
			//	Сообщить("Записан ордер " + ОрдерДок.Ссылка);
			//КонецЕсли;
		
	КонецЕсли;
	
	// обновляем суммы реализованного возврата
	ОбновитьСуммыРеализованногоВозврата();
	
	ПроводитьОперацииМагазина = (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	ПроводитьОперацииИзбёнка = (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	
	Если ПроводитьОперацииМагазина И НЕ Отказ И НЕ ОбщегоНазначенияПовтИсп.ЭтоКопияБазы() Тогда
		НомерТочкиПоАйпи = Магазин.НомерТочки;
		//ИДДок = Строка(Ссылка.УникальныйИдентификатор());
		ИДДок = Строка(Новый УникальныйИдентификатор());
		
		ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
		//ОбработкаОбъект.УдалитьВсеСтрокиДокумента(ИДДок, НомерТочкиПоАйпи);
		
		ПредТипЗадания = Неопределено; ПредСторно = Неопределено; ЕстьДвиженияТД = Ложь;
		Для Каждого СтрокаТД Из ТаблицаДвижений_ТоварныеОперации Цикл
			
			ТекТипЗадания = СтрокаТД.ТипЗадания;
			//Если ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок ИЛИ ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки Тогда
			Если ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСторно = СтрокаТД.Сторно;
			Если ТекСторно <> ПредСторно И ЕстьДвиженияТД Тогда
				//Отказ = НЕ ОбработкаОбъект.ПровестиДок(ИДДок, КодОперации, ТекущаяДата(), НомерТочкиПоАйпи);
				ТекстОшибки = ТоварныеОперации_ПровестиДок(ИДДок, ?(ПредСторно, КодОбратнойОперации, КодОперации), ТекущаяДата(), НомерТочкиПоАйпи, Истина); //Обязательно = ПредСторно
				//Если НЕ ПустаяСтрока(ТекстОшибки) Тогда Сообщить("Документ не проведён по причине: " + ТекстОшибки); Отказ = Истина; Возврат; КонецЕсли;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда ВызватьИсключение "Документ не проведён по причине: " + ТекстОшибки; Возврат; КонецЕсли;
				
				ЕстьДвиженияТД = Ложь;
				ИДДок = ?(ТекСторно, Строка(Новый УникальныйИдентификатор()), ID_Doc_SQL);
			КонецЕсли;
			ПредСторно = ТекСторно;
			
			Если ТекТипЗадания <> ПредТипЗадания Тогда
				РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ПолучитьТочкуПолучателяИКодыОпераций(ТекТипЗадания, ТочкаПолучатель, КодОперации, КодОбратнойОперации);
				ПредТипЗадания = ТекТипЗадания;
				ИДДок = ?(ТекСторно, Строка(Новый УникальныйИдентификатор()), ID_Doc_SQL);
			КонецЕсли;
			
			//+++АК SHEP 20161025: отключил проверку
			// если операция не принята сервером, то сторнировать её не будем
			//Если ТекСторно И НЕ ТоварныеОперации_ОперацияПринятаСервером(ИДДок, СтрокаТД.КлючСтрокиСтр, НомерТочкиПоАйпи) Тогда
			//	Продолжить;
			//КонецЕсли;
			//---АК SHEP 
			
			РозничнаяСумма = СтрокаТД.Количество * РозничнаяЦена(СтрокаТД.Номенклатура);
			Отказ = НЕ ОбработкаОбъект.ДобавитьНовуюСтрокуТовародвижения(
				ВернутьИДНоменклатуры(СтрокаТД.Номенклатура),
				СтрокаТД.Количество, ?(СтрокаТД.ИДСтроки = 0, СтрокаТД.НомерСтроки, СтрокаТД.ИДСтроки), ТекущаяДата(), ИДДок, ?(ТекСторно, КодОбратнойОперации, КодОперации),
				ТочкаПолучатель, РозничнаяСумма, 0, ?(ТекСторно, Строка(Новый УникальныйИдентификатор), СтрокаТД.КлючСтрокиСтр),
				ВернутьИДХарактеристики(СтрокаТД.Характеристика), СтрокаТД.ДатаПроизводства,,,,, НомерТочкиПоАйпи);
				
			Если Отказ Тогда Возврат; КонецЕсли;
			
			ЕстьДвиженияТД = Истина;
			
		КонецЦикла;
		
		Если ЕстьДвиженияТД Тогда
			
			ТекстОшибки = ТоварныеОперации_ПровестиДок(ИДДок, ?(ТекСторно, КодОбратнойОперации, КодОперации), ТекущаяДата(), НомерТочкиПоАйпи, Истина); //Обязательно = ТекСторно
			//Если НЕ ПустаяСтрока(ТекстОшибки) Тогда Сообщить("Документ не проведён по причине: " + ТекстОшибки); Отказ = Истина; Возврат; КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда ВызватьИсключение "Документ не проведён по причине: " + ТекстОшибки; Возврат; КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроводитьОперацииИзбёнка И НЕ Отказ И НЕ ОбщегоНазначенияПовтИсп.ЭтоКопияБазы() Тогда
		
		//ВыполнитьДвиженияSQL_Избёнка(Отказ);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")) Тогда Возврат; КонецЕсли;
	
	Если РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ПроводитьОперацииМагазина") = Истина
	  И (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница) Тогда
		ИДДок = Строка(Ссылка.УникальныйИдентификатор());
		ОбработкаОбъект = ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
		ОбработкаОбъект.УдалитьВсеСтрокиДокумента(ИДДок);
	КонецЕсли;
	
	// обновляем суммы реализованного возврата
	ОбновитьСуммыРеализованногоВозврата(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	СуществующийОрдер=Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(Ссылка);
	
	Если ЗначениеЗаполнено(СуществующийОрдер) и СуществующийОрдер.Проведен тогда
		ОрдерДок=СуществующийОрдер.ПолучитьОбъект();
		//попытка
			ОрдерДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//исключение
		//конецпопытки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
Перем ПредыдущийТипЗадания, ТаблицаДвижений_ТоварныеОперации;
	
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	// изменений не было, ничего не делаем
	Если НЕ (ДополнительныеСвойства.Свойство("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации) И ТаблицаДвижений_ТоварныеОперации.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТиповЗаданий = Новый Массив;
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов);
	МассивТиповЗаданий.Добавить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
	
	ДополнительныеСвойства.Свойство("ПредыдущийТипЗадания", ПредыдущийТипЗадания);
	
	ТипСкладскогоОрдера = ?(ЗначениеЗаполнено(СкладСклада), "ПеремещениеСклад", "ПриходныйОрдерСклад");
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам") Тогда
		//и НЕ (ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт)
		//И МассивТиповЗаданий.Найти(ТипЗадания) <> Неопределено
		
			Если ТипЗадания <> ПредыдущийТипЗадания Тогда
				Если МассивТиповЗаданий.Найти(ПредыдущийТипЗадания) <> Неопределено Тогда
					
					// сторнируем предыдущий документ
					ОрдерДок = Документы[ТипСкладскогоОрдера].СоздатьДокумент();
					ОрдерДок.Дата = ТекущаяДата();
					ОрдерДок.Заполнить(Ссылка);
					ОрдерДок.Основание = Ссылка;
					ОрдерДок.Склад = РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ВернутьСкладПеремещения(ПредыдущийТипЗадания);
					
					ОрдерДок.Товары.Очистить();
					
					МассивСтрокТЧ = ТаблицаДвижений_ТоварныеОперации.НайтиСтроки(Новый Структура("Сторно", Истина));
					Для Каждого СтрокаТД Из МассивСтрокТЧ Цикл
						СтрокаТЧ = ОрдерДок.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТД, "Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства");
						Если ТипСкладскогоОрдера = "ПеремещениеСклад" Тогда
							СтрокаТЧ.КоличествоОтправитель = -СтрокаТД.Количество;
							СтрокаТЧ.КоличествоПолучатель  = СтрокаТЧ.КоличествоОтправитель;
						Иначе
							СтрокаТЧ.Количество = -СтрокаТД.Количество;
						КонецЕсли;
					КонецЦикла;
					
					//НомерПопытки = 0;
					//Пока Истина Цикл
					//	Попытка
							ОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
					//		Прервать;
					//	Исключение
					//		Если НомерПопытки = 20 Тогда
					//			ВызватьИсключение ОписаниеОшибки();
					//		ИначеЕсли НомерПопытки = 15 Тогда
					//			ПолныеПрава._ОбновитьНумерациюОбъектов(Метаданные.Документы.ПриходныйОрдерСклад);
					//		КонецЕсли;
					//		//ОрдерДок.УстановитьНовыйНомер();
					//		НомерПопытки = НомерПопытки + 1;
					//	КонецПопытки;
					//КонецЦикла;
					
				КонецЕсли;
				
				Если МассивТиповЗаданий.Найти(ТипЗадания) <> Неопределено Тогда
					
					ОрдерДок = Документы[ТипСкладскогоОрдера].СоздатьДокумент();
					ОрдерДок.Дата = ТекущаяДата();
					ОрдерДок.Заполнить(Ссылка);
					
					//НомерПопытки = 0;
					//Пока Истина Цикл
					//	Попытка
							ОрдерДок.Записать();
					//		Прервать;
					//	Исключение
					//		Если НомерПопытки = 20 Тогда
					//			ВызватьИсключение ОписаниеОшибки();
					//		ИначеЕсли НомерПопытки = 15 Тогда
					//			ПолныеПрава._ОбновитьНумерациюОбъектов(Метаданные.Документы.ПриходныйОрдерСклад);
					//		КонецЕсли;
					//		//ОрдерДок.УстановитьНовыйНомер();
					//		НомерПопытки = НомерПопытки + 1;
					//	КонецПопытки;
					//КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли МассивТиповЗаданий.Найти(ТипЗадания) <> Неопределено Тогда
				
				ОрдерДок = Документы[ТипСкладскогоОрдера].СоздатьДокумент();
				ОрдерДок.Дата = ТекущаяДата();
				ОрдерДок.Заполнить(Ссылка);
				
				// если предыдущий складской ордер не пустой, сторнируем
				Если ЗначениеЗаполнено(Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(Ссылка)) Тогда
					ОрдерДок.Товары.Очистить();
					
					Для Каждого СтрокаТД Из ТаблицаДвижений_ТоварныеОперации Цикл
						СтрокаТЧ = ОрдерДок.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТД, "Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства");
						Если ТипСкладскогоОрдера = "ПеремещениеСклад" Тогда
							СтрокаТЧ.КоличествоОтправитель = ?(СтрокаТД.Сторно, -СтрокаТД.Количество, СтрокаТД.Количество);
							СтрокаТЧ.КоличествоПолучатель  = СтрокаТЧ.КоличествоОтправитель;
						Иначе
							СтрокаТЧ.Количество = ?(СтрокаТД.Сторно, -СтрокаТД.Количество, СтрокаТД.Количество);
						КонецЕсли;
					КонецЦикла;
					
					ОрдерДок.Товары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства",
						?(ТипСкладскогоОрдера = "ПеремещениеСклад", "КоличествоОтправитель,КоличествоПолучатель", "Количество,КоличествоКоробок,КоличествоПаллет"));
				КонецЕсли;
				
				//НомерПопытки = 0;
				//Пока Истина Цикл
				//	Попытка
						ОрдерДок.Записать();
				//		Прервать;
				//	Исключение
				//		Если НомерПопытки = 20 Тогда
				//			ВызватьИсключение ОписаниеОшибки();
				//		ИначеЕсли НомерПопытки = 15 Тогда
				//			ПолныеПрава._ОбновитьНумерациюОбъектов(Метаданные.Документы.ПриходныйОрдерСклад);
				//		КонецЕсли;
				//		//ОрдерДок.УстановитьНовыйНомер();
				//		НомерПопытки = НомерПопытки + 1;
				//	КонецПопытки;
				//КонецЦикла;
				
			КонецЕсли;
			
//			Если МассивТиповЗаданий.Найти(ТипЗадания) <> Неопределено Тогда
//				НужноСоздаватьПрихОрдер = Истина;
//				СуществующийОрдер = Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(Ссылка);
//			Иначе
//				НужноСоздаватьПрихОрдер = Ложь;
//			КонецЕсли;
//			
//			Если НЕ ЗначениеЗаполнено(СуществующийОрдер) тогда
//				
//				Если НужноСоздаватьПрихОрдер Тогда
//					ОрдерДок=Документы.ПриходныйОрдерСклад.СоздатьДокумент();
//					//+++АК SHEP 20160922: делаем тек. дату
//					//ОрдерДок.Дата=Дата;
//					//ОрдерДок.Дата = ТекущаяДата();
//					//---АК SHEP 20160922
//					//ОрдерДок.УстановитьНовыйНомер();
//					ОрдерДок.Заполнить(Ссылка);
//				КонецЕсли;
//				
//			Иначе //Если НачалоДня(СуществующийОрдер.Дата) <> НачалоДня(ТекущаяДата()) Тогда
//				
//				Если ТипЗадания <> ПредыдущийТипЗадания Тогда
//					
//					// сторнируем предыдущий документ
//					ОрдерДок = СуществующийОрдер.Скопировать();
//					Для Каждого СтрокаТЧ Из ОрдерДок.Товары Цикл
//						СтрокаТЧ.Количество = -СтрокаТЧ.Количество;
//					КонецЦикла;
//					
//					ОрдерДок.Дата = ТекущаяДата();
//					ОрдерДок.Основание = Ссылка;
//					ОрдерДок.Записать(?(СуществующийОрдер.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
//					
//					// создаём новый документ
//					ОрдерДок = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
//					ОрдерДок.Заполнить(Ссылка);
//					
//				Иначе
//					
//					ОрдерДок = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
//					ОрдерДок.Заполнить(Ссылка);
//					
//					ОрдерДокСторно = СуществующийОрдер.Скопировать();
//					Для Каждого СтрокаТЧСторно Из ОрдерДокСторно.Товары Цикл
//						//СтрокаТЧ.Количество = -СтрокаТЧ.Количество;
//						СтрокаТЧ = ОрдерДок.Товары.Добавить();
//						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧСторно);
//						СтрокаТЧ.Количество = -СтрокаТЧСторно.Количество;
//					КонецЦикла;
//					
//					ОрдерДок.Товары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,ЗаказПоставщику,ДатаПроизводства", "Количество,КоличествоКоробок,КоличествоПаллет");
//					
//				КонецЕсли;
//				
//				//// сторнируем расх. ордером сущ. прих. ордер
//				//РасхОрдерДок = Документы.РасходныйОрдерСклад.СоздатьДокумент();
//				//РасхОрдерДок.Дата = ТекущаяДата();
//				//РасхОрдерДок.Заполнить(СуществующийОрдер);
//				//РасхОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
//				//Сообщить("Записан ордер " + РасхОрдерДок.Ссылка);
//				//
//				//ОрдерДок = Документы.ПриходныйОрдерСклад.СоздатьДокумент();
//				
//			//иначе
//			//	ОрдерДок=СуществующийОрдер.ПолучитьОбъект();
//			//	ОрдерДок.Основание=Ссылка;
//			//	ОрдерДок.ПометкаУдаления=Ложь;
//			//	ОрдерДок.Заполнить(Ссылка);
//				
//			КонецЕсли;

//			ОрдерДок.Дата = ТекущаяДата();
//			ОрдерДок.Основание = Ссылка;
//			
//			//ОрдерДок.Заполнить(Ссылка);
////			попытка
//				ОрдерДок.Записать();
//			//исключение
//			//	Если ОписаниеОшибки()="Значение поля ""Номер"" не уникально" тогда
//			//		ОрдерДок.УстановитьНовыйНомер();
//			//		ОрдерДок.Записать();
//			//	КонецЕсли;
//			//конецпопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
