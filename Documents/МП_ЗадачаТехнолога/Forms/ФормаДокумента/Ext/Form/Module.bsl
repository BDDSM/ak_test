
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Перем Магазин;

	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Задача технолога");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	//ПроводитьОперацииМагазина = (РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ПроводитьОперацииМагазина") = Истина);
	
	СтруктураВидимости = Новый Структура;
	//+++VERN
	//СтруктураВидимости.Вставить("ФормаДокументМП_ЗадачаТехнологаПередачаТоваровПоставщику", (Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов));
	//СтруктураВидимости.Вставить("ФормаДокументПретензияПоставщикуСоздатьНаОсновании", Ложь);
	//		//(Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад) ИЛИ (Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов);
	//
	//СтруктураВидимости.Вставить("ФормаДокументВозвратТоваровПоставщикуСоздатьНаОсновании", Ложь);
	//СтруктураВидимости.Вставить("ФормаДокументПриходныйОрдерСкладСоздатьНаОсновании", Ложь);
	
	СтруктураВидимости.Вставить("ФормаДокументМП_ЗадачаТехнологаПередачаТоваровПоставщику", (Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов));
	СтруктураВидимости.Вставить("ФормаДокументПретензияПоставщикуСоздатьНаОсновании", Истина);
			//(Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад) ИЛИ (Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов);
	
	СтруктураВидимости.Вставить("ФормаДокументВозвратТоваровПоставщикуСоздатьНаОсновании", Истина);
	СтруктураВидимости.Вставить("ФормаДокументПриходныйОрдерСкладСоздатьНаОсновании", Истина);
	//---VERN	
	СтруктураВидимости.Вставить("ФактическаяДатаВыполнения", ЗначениеЗаполнено(Объект.ФактическаяДатаВыполнения)
		ИЛИ ЗначениеЗаполнено(Объект.ТипЗадания) И Объект.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
	
	Элементы.НадписьОрдерНедостаточноПрав.Видимость = РольДоступна("ПолныеПрава") И НЕ ПравоДоступа("Чтение",Метаданные.Документы.ПриходныйОрдерСклад);
	Элементы.Ордер.Видимость = РольДоступна("ПолныеПрава") И НЕ Элементы.НадписьОрдерНедостаточноПрав.Видимость;
	
	Для Каждого КлючИЗначение Из СтруктураВидимости Цикл
		ЭлементДляВидимости = Элементы.Найти(КлючИЗначение.Ключ);
		Если ЭлементДляВидимости <> Неопределено Тогда
			ЭлементДляВидимости.Видимость = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОснование = Объект.ДокументОснование;
	ЭтоЗаданиеТехнологаМагазинам = (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам"));
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		//ДатаПроизводстваНач = ДокументОснование.ДатаПроизводстваНач;
		//ДатаПроизводстваКон = ДокументОснование.ДатаПроизводстваКон;
		НомерДок = ДокументОснование.Номер;
		ДатаДок = ДокументОснование.Дата;
		КомментарийДок = ДокументОснование.Комментарий;
		ДатаВывоза = ДокументОснование.ДатаВывоза;
		СвереноСПоставщиком = ДокументОснование.СвереноСПоставщиком;
		ТипЗаданияДокументаОснования = ДокументОснование.ТипЗадания;
		ДатаАвтозакрытия = ДокументОснование.ДатаАвтозакрытия; //+++АК SHEP 2018.08.29 ИП-00019388
	КонецЕсли;
	
	Элементы.Закрыта.ТолькоПросмотр = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ДатаАвтозакрытия.Видимость = ЭтоЗаданиеТехнологаМагазинам; //+++АК SHEP 2018.08.29 ИП-00019388
	//Элементы.ГруппаДатыПроизводства.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиНоменклатура.ТолькоПросмотр = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиХарактеристикаНоменклатуры.ТолькоПросмотр = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиДатаПроизводства.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиЕдиницаИзмерения.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиКоличество.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	//Элементы.ПараметрыЗадачиЦена.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	//Элементы.ПараметрыЗадачиСумма.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиПараметр.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ПараметрыЗадачиОписаниеЗадачи.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.Склад.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.СкладСклада.Видимость = ЭтоЗаданиеТехнологаМагазинам И ЗначениеЗаполнено(Объект.СкладСклада);
	Элементы.ВидПроверяемойОперации.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ГруппаНомерДата.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ГруппаНомерДокДатаДок.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.Комментарий.Видимость = НЕ ЭтоЗаданиеТехнологаМагазинам;
	Элементы.КомментарийДок.Видимость = ЭтоЗаданиеТехнологаМагазинам;
	Элементы.ДатаВывоза.Видимость = ЭтоЗаданиеТехнологаМагазинам
		И (Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад ИЛИ Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов);
	
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		СоответствиеДействийТипамЗадания = Новый Соответствие;
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок,			"Убери с полки, внеси количество в задачу технолога и нажми Провести");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов,	"Выброси и укажи дату, когда это сделал");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад,		"Подготовь для вывоза на склад, распечатай сопроводительный документ и проставь дату");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов,	"Подготовь для вывоза поставщиком, распечатай сопроводительный документ и проставь дату после вывоза!");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт,	"Выброси и укажи дату, когда это сделал");
		СоответствиеДействийТипамЗадания.Вставить(Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки,		"Верни в продажу на полки магазина и укажи дату, когда это сделал");
		
		ДействиеДляВыполнения = СоответствиеДействийТипамЗадания.Получить(Объект.ТипЗадания);
	КонецЕсли;
	
	//+++VERN
	ЗаполнитьОрдерНаСервере();
	//---VERN
	
	//+++АК SHEP 20161102: заполняем только нужными товарами из документа-основания
	Магазин = Объект.Магазин;
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
			|	ЗаданиеТехнологаМагазинамТовары.Характеристика КАК ХарактеристикаНоменклатуры,
			|	ЗаданиеТехнологаМагазинамТовары.ЕдиницаИзмерения,
			|	ЗаданиеТехнологаМагазинамТовары.Цена,
			|	ЗаданиеТехнологаМагазинамТовары.ДатаПроизводстваНач,
			|	ЗаданиеТехнологаМагазинамТовары.ДатаПроизводстваКон
			|ИЗ
			|	Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
			|ГДЕ
			|	ЗаданиеТехнологаМагазинамТовары.Ссылка = &ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		ТоварыДляЗаполнения.Загрузить(Запрос.Выполнить().Выгрузить());
		
		//+++АК SHEP 20161107: 11 г) потенциальное количество до ввода реализованного меняется исходя из текущих остатков магазина.
		Если НЕ Объект.Проведен И НЕ Объект.ПометкаУдаления Тогда
			
			Если Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
				ТЗнОстатков = ВнешниеДанные.ПолучитьТаблицуОстатковПоМассивуНоменклатурыПоТДОст(ТоварыДляЗаполнения.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
				
				Для Каждого СтрокаТД Из Объект.ПараметрыЗадачи Цикл
					
					МассивСтрокТЧ = ТЗнОстатков.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТД.Номенклатура));
					Если МассивСтрокТЧ.Количество() = 1 И СтрокаТД.Количество <> МассивСтрокТЧ[0].Остаток Тогда
						СтрокаТД.Количество = МассивСтрокТЧ[0].Остаток;
						СтрокаТД.Сумма = СтрокаТД.Количество * СтрокаТД.Цена;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		//---АК SHEP 20161107
		
	КонецЕсли;
	//---АК SHEP 20161102
	
	ЗаданиеТехнологаМагазинамНаРазработке = (РегистрыСведений.ПараметрыРаботыССоцСетями.ПолучитьЗначениеПараметра(, "ЗаданиеТехнологаМагазинамНаРазработке") = Истина);
	//+++АК SHEP 20161122
	Если ЗначениеЗаполнено(Объект.ID_Doc_SQL)
	  И Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
		Если Документы.МП_ЗадачаТехнолога.ТоварныеОперации_ДокументПринятСервером(Объект.ID_Doc_SQL, Магазин.НомерТочки,, Ложь) = Ложь Тогда
			ИдётОбработкаСервером = Истина;
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20161122
	
	ВсеПартии = ЭтоЗаданиеТехнологаМагазинам И ДокументОснование.ВсеПартии;
	БезДатПроизводства = ЭтоЗаданиеТехнологаМагазинам И ДокументОснование.БезДатПроизводства;
	Элементы.ПараметрыЗадачиДатыПроизводства.Видимость = ЭтоЗаданиеТехнологаМагазинам И НЕ БезДатПроизводства;
	Если ВсеПартии Тогда
		Элементы.ПараметрыЗадачиДатаПроизводстваНач.Заголовок = "Все партии";
		Элементы.ПараметрыЗадачиДатаПроизводстваКон.Видимость = Ложь;
		Элементы.ПараметрыЗадачиДатаПроизводстваНач.Высота = 2;
		Элементы.ПараметрыЗадачи.ВысотаШапки = 2;
		Элементы.ПараметрыЗадачи.ВысотаЗаголовка = 2;
	КонецЕсли;
	Если БезДатПроизводства Тогда
		Элементы.ПараметрыЗадачиДатаПроизводства.Заголовок = "Без дат производства";
		Элементы.ПараметрыЗадачиДатаПроизводства.ТолькоПросмотр = Истина;
		Элементы.ПараметрыЗадачиДатаПроизводства.Высота = 2;
		Элементы.ПараметрыЗадачи.ВысотаШапки = 2;
		Элементы.ПараметрыЗадачи.ВысотаЗаголовка = 2;
	КонецЕсли;
	
	//+++АК SHEP 20170125: запрещаем изменения для закрытых магазинов
	//+++АК ILIK 2018.08.08 ИП-00019413
	//МагазинЗакрыт = (Магазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт);
	МагазинЗакрыт = (Магазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт Или Магазин.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Приостановлен);
	//---АК ILIK
	//---АК SHEP 20170125
	
	Если ЗаданиеТехнологаМагазинамНаРазработке ИЛИ ИдётОбработкаСервером ИЛИ МагазинЗакрыт Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		//+++АК SHEP 20170110: ответственные лица
		//+++АК SHEP 2018.12.16 ИП-00020580: добавил определение помощника ТУ для магазина
		//ОтветственныеЛица.Загрузить(Документы.ЗаданиеТехнологаМагазинам.ВернутьТЗнОтветственных(ДокументОснование));
		ОтветственныеЛица.Загрузить(Документы.ЗаданиеТехнологаМагазинам.ВернутьТЗнОтветственных(ДокументОснование, Объект.Магазин));
		//---АК SHEP 2018.12.16
		//---АК SHEP 20170110
		
		//+++АК SHEP 20161221: добавляем вложения
		КаталогХраненияФайлов = Документы.ЗаданиеТехнологаМагазинам.ПолучитьКаталогХраненияФайлов(ДокументОснование);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗаданиеТехнологаМагазинамВложения.НомерСтроки КАК НомерСтроки,
			|	ЗаданиеТехнологаМагазинамВложения.ИмяФайла,
			|	ЗаданиеТехнологаМагазинамВложения.ОтносительноеИмяФайла
			|ИЗ
			|	Документ.ЗаданиеТехнологаМагазинам.Вложения КАК ЗаданиеТехнологаМагазинамВложения
			|ГДЕ
			|	ЗаданиеТехнологаМагазинамВложения.Ссылка = &ДокументОснование
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Вложения.Загрузить(Запрос.Выполнить().Выгрузить());
		Если Вложения.Количество() > 0 Тогда
			Элементы.СтраницаВложения.Заголовок = "Вложения (" + Вложения.Количество() + ")";
		Иначе
			Элементы.СтраницаВложения.Картинка = Новый Картинка;
		КонецЕсли;
		//---АК SHEP 20161221
		
		//+++АК SHEP 20170117: добавили защиту: через сканирование штрих-кода
		// 20170118: И если в магазине нет смартфона - соответствующая галочка в карточке структурной единицы отжата - то им разрешать заносить без сканирования в любом случае.
		СканироватьШтрихкод = ДокументОснование.СканироватьШтрихкод И Магазин.ОбязательныйВводОперацийСФотоЧерезМобильноеУстройство;
		//---АК SHEP 20170117
		
		//+++АК SHEP 20170118
		Если Параметры.ОткрытьТоварныеОперации Тогда
			ЗаполнитьТоварныеОперацииНаСервере();
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОперации;
		КонецЕсли;
		//---АК SHEP 20170118 
	КонецЕсли;
	
	Элементы.ПараметрыЗадачиВвестиШтрихКод.Видимость = ЭтоЗаданиеТехнологаМагазинам И СканироватьШтрихкод;
	//+++АК SHEP 2018.08.31 ИП-00019388
	Элементы.ПараметрыЗадачиВвестиШтрихКод.Видимость = Элементы.ПараметрыЗадачиВвестиШтрихКод.Видимость
		И Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок");
	//---АК SHEP 2018.08.31
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаданиеТехнологаМагазинамНаРазработке Тогда
		Предупреждение("По данному функционалу проводятся сервисные работы,
			|попробуйте работать с данным документом чуть позже!");
		
	ИначеЕсли ИдётОбработкаСервером Тогда
		Предупреждение("Документ проводится. Повторное проведение документа невозможно. Подождите!
			|
			|Для редактирования документа, откройте его заново");
		
	ИначеЕсли МагазинЗакрыт Тогда
		Предупреждение("Магазин закрыт, менять документ запрещено!");
		
	КонецЕсли;
	
	Если Объект.ИзмененаДатаАвтозакрытия Тогда
		ПоказатьПредупреждение(, "Внимание, изменилась дата автозакрытия задачи!",, "Задача технолога");
		Объект.ИзмененаДатаАвтозакрытия = Ложь;
		Записать();
	КонецЕсли;
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	//ТолькоПросмотр = Объект.Закрыта;
	//+++АК SHEP 20161215: по закрытым задачам разрешаем проводить в меньшую сторону
	ТолькоПросмотр = ТолькоПросмотр ИЛИ (ЭтоЗаданиеТехнологаМагазинам И (ДокументОснование.Проведен ИЛИ ДокументОснование.ПометкаУдаления)); //ИЛИ ЗначениеЗаполнено(Объект.ФактическаяДатаВыполнения);
	//---АК SHEP 20161215
	
	Элементы.Дата.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Ссылка);
	
	//ЭлементДляВидимости = Элементы.Найти("ФормаДокументМП_ЗадачаТехнологаРасходПоПеремещениюТовара411");
	//Если ЭлементДляВидимости <> Неопределено Тогда
	//	//ЭлементДляВидимости.Видимость = НЕ ПроводитьОперацииМагазина И Объект.Проведен И
	//	//	(Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад ИЛИ Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов);
	//	ЭлементДляВидимости.Видимость = Истина;
	//КонецЕсли;
	//
	//ЭлементДляВидимости = Элементы.Найти("ФормаДокументМП_ЗадачаТехнологаСписаниеПоКачеству103");
	//Если ЭлементДляВидимости <> Неопределено Тогда
	//	//ЭлементДляВидимости.Видимость = (НЕ ПроводитьОперацииМагазина И Объект.Проведен И Объект.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов);
	//	ЭлементДляВидимости.Видимость = Истина;
	//КонецЕсли;
	
	Элементы.ФактическаяДатаВыполнения.Видимость = ЭтоЗаданиеТехнологаМагазинам
		И (ТолькоПросмотр И ЗначениеЗаполнено(Объект.ФактическаяДатаВыполнения) ИЛИ НЕ ТолькоПросмотр И Объект.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
	Элементы.ФактическаяДатаВыполнения2.Видимость = ЭтоЗаданиеТехнологаМагазинам И ТолькоПросмотр И Объект.Закрыта И НЕ ЗначениеЗаполнено(Объект.ФактическаяДатаВыполнения);
	//Элементы.ФактическаяДатаВыполнения.Видимость = ЭтоЗаданиеТехнологаМагазинам
	//	И (ЗначениеЗаполнено(Объект.ФактическаяДатаВыполнения) ИЛИ Объект.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
Перем ТекстОшибки, ФактическаяДатаВыполнения;
	
	//+++АК SHEP 2017.12.25 ИП-00017507
	//Необходимо исключить сканирование ШК товара напечатанного из 1С в документе "Задание технолога", к сканированию должен браться только ШК на упаковке
	Если ЭтоЗаданиеТехнологаМагазинам И СканироватьШтрихкод Тогда
	  Если Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок") Тогда //+++АК SHEP 2018.08.31 ИП-00019388
		Для Каждого ТекущиеДанные Из Объект.ПараметрыЗадачи Цикл
			Если ТекущиеДанные.Количество > 0 И НЕ ТекущиеДанные.ШтрихКодОтсканирован Тогда
				Предупреждение("Если есть товар «" + СокрЛП(ТекущиеДанные.Номенклатура) + " (" + ТекущиеДанные.ХарактеристикаНоменклатуры + ")», нужно его просканировать.
				|
				|Если нет данного товара/характеристики, нужно обнулить количество");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	  КонецЕсли; //---АК SHEP 2018.08.31
	КонецЕсли;
	//---АК SHEP 2017.12.25
	
	ТекстОшибки = "";
	ФактическаяДатаВыполнения = НачалоДня(Объект.ФактическаяДатаВыполнения);
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись И ФактическаяДатаВыполнения <> Дата(1, 1, 1) Тогда
		ТекстОшибки = "Нельзя указывать факт. дату выполнения без проведения документа!";
	ИначеЕсли ФактическаяДатаВыполнения <> Дата(1, 1, 1)
		И (ФактическаяДатаВыполнения < НачалоДня(Объект.Дата) ИЛИ ФактическаяДатаВыполнения > НачалоДня(ТекущаяДата())) Тогда
		ТекстОшибки = "Неверно указана факт. дата выполнения!";
	//+++АК SHEP 20170301: Разгуляев Валерий 31 янв. в 16:39, нельзя ставить галочку, пока не наступила дата вывоза, указанная технологом
	//+++АК SHEP 20170522: Разгуляев Валерий 22 мая в 00:26: пока даты вывоза нет, вообще, ничего ввести нельзя, чтобы случайно вот так не ставили
	//ИначеЕсли ДатаВывоза <> Дата(1,1,1) И ФактическаяДатаВыполнения <> Дата(1,1,1) И ФактическаяДатаВыполнения < ДатаВывоза Тогда
	ИначеЕсли ФактическаяДатаВыполнения <> Дата(1,1,1) И (ФактическаяДатаВыполнения < ДатаВывоза ИЛИ ДатаВывоза = Дата(1,1,1))
	  И (Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад")
	    ИЛИ Объект.ТипЗадания = ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов"))
	  Тогда
		ТекстОшибки = "Дата вывоза ещё не наступила, нельзя указывать факт. дату выполнения!";
	//---АК SHEP 20170301
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
        Сообщение = Новый СообщениеПользователю();
        Сообщение.Текст = ТекстОшибки;
        Сообщение.Поле 	= "Объект.ФактическаяДатаВыполнения";
        Сообщение.КлючДанных = Объект.Ссылка;
        Сообщение.Сообщить();
        Отказ = Истина;
		Возврат;
	КонецЕсли;

//	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//Если Вопрос("ВНИМАНИЕ! После проведения этот документ нельзя будет корректировать!
		//	|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задача технолога") <> КодВозвратаДиалога.Да Тогда
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли;
//	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК SHEP 20161215: по закрытым задачам разрешаем проводить в меньшую сторону
	Если ЭтоЗаданиеТехнологаМагазинам И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И (ДокументОснование.Проведен ИЛИ СвереноСПоставщиком) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Номенклатура,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ХарактеристикаНоменклатуры КАК Характеристика,
			|	СУММА(МП_ЗадачаТехнологаПараметрыЗадачи.Количество) КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваровБыло
			|ИЗ
			|	Документ.МП_ЗадачаТехнолога.ПараметрыЗадачи КАК МП_ЗадачаТехнологаПараметрыЗадачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МП_ЗадачаТехнолога КАК МП_ЗадачаТехнолога
			|		ПО МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка = МП_ЗадачаТехнолога.Ссылка
			|ГДЕ
			|	&Ссылка <> ЗНАЧЕНИЕ(Документ.МП_ЗадачаТехнолога.ПустаяСсылка)
			|	И МП_ЗадачаТехнолога.Проведен
			|	И МП_ЗадачаТехнологаПараметрыЗадачи.Ссылка = &Ссылка
			|	И МП_ЗадачаТехнологаПараметрыЗадачи.Количество <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	МП_ЗадачаТехнологаПараметрыЗадачи.Номенклатура,
			|	МП_ЗадачаТехнологаПараметрыЗадачи.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ТаблицаТоваров.Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Количество <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваровСтало
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваровСтало.Номенклатура,
			|	ТаблицаТоваровСтало.Характеристика,
			|	ТаблицаТоваровСтало.Количество КАК КоличествоСтало,
			|	ЕСТЬNULL(ТаблицаТоваровБыло.Количество, 0) КАК КоличествоБыло
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваровСтало
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровБыло КАК ТаблицаТоваровБыло
			|		ПО ТаблицаТоваровСтало.Номенклатура = ТаблицаТоваровБыло.Номенклатура
			|			И ТаблицаТоваровСтало.Характеристика = ТаблицаТоваровБыло.Характеристика
			|ГДЕ
			|	ТаблицаТоваровСтало.Количество > ЕСТЬNULL(ТаблицаТоваровБыло.Количество, 0)");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.ПараметрыЗадачи.Выгрузить(, "Номенклатура,ХарактеристикаНоменклатуры,Количество"));
		
		Отказ = НЕ Запрос.Выполнить().Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Отказ Тогда
			ВызватьИсключение ?(ДокументОснование.Проведен, "По закрытой задаче", "По согласованной с поставщиком задаче") + " количество можно только уменьшать!";
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20161215
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	///+++VERN
	
	УстановитьВидимостьДоступность();
	
	УстановитьПривилегированныйРежим(Истина);
	
	//++АК SHEP 20160928: перезаполняем последний ордер, т.к. мог добавиться новый
	ЗаполнитьОрдерНаСервере();
	
	Если ЭтоЗаданиеТехнологаМагазинам И Объект.ТипЗадания=Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад Тогда
		//ЗаполнитьОрдерНаСервере();
		Если ЗначениеЗаполнено(Ордер) и Объект.Проведен и НЕ Ордер.Проведен тогда
			ДокОрдер=Ордер.ПолучитьОбъект();
			попытка
				ДокОрдер.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Проведен ордер " + ДокОрдер.Ссылка);
			Исключение
				Сообщить("Ошибка при проведении ордера " + ДокОрдер.Ссылка+": "+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	///---VERN
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//Если ЭтоЗаданиеТехнологаМагазинам Тогда
	//	ОповеститьОбИзменении(ДокументОснование);
	//	Оповестить("ОбновитьСуммыРеализованногоВозврата",, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыЗадачи.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	Если Элемент.Имя = "ПараметрыЗадачиКоличество" Тогда
		ТекущиеДанные.ИДСтроки = ПолучитьСледующийИДСтроки();
		_УникИД = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСтроки = _УникИД;
		ТекущиеДанные.КлючСтрокиСтр = Строка(_УникИД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиНоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТипЗадания) Тогда
		ПараметрыЗадачиНоменклатураПриИзмененииНаСервере(Элементы.ПараметрыЗадачи.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗадачиНоменклатураПриИзмененииНаСервере(ТекущиеДанныеИД)
Перем ТекНоменклатура;
	
	ТекущиеДанные = Объект.ПараметрыЗадачи.НайтиПоИдентификатору(ТекущиеДанныеИД);
	
	ТекНоменклатура = ТекущиеДанные.Номенклатура;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	Номенклатура.НеВедетсяУчетПоХарактеристикам КАК НеВедетсяУчетПоХарактеристикам
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
		|	И ЗначенияСвойствОбъектов.Значение = &Контрагент
		|	И ХарактеристикиНоменклатуры.Владелец = &Номенклатура");
	Запрос.УстановитьПараметр("Контрагент", ДокументОснование.Поставщик);
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаЗапроса.Количество() = 1 Тогда
		ВыборкаЗапроса.Следующий();
		ТекущиеДанные.ХарактеристикаНоменклатуры = ВыборкаЗапроса.Характеристика;
	ИначеЕсли ТекущиеДанные.ХарактеристикаНоменклатуры <> ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка") И ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец <> ТекНоменклатура Тогда
		ТекущиеДанные.ХарактеристикаНоменклатуры = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	ТекущиеДанные.ЕдиницаИзмерения = ТекНоменклатура.ЕдиницаХраненияОстатков;
	ТекущиеДанные.Цена = ПолучитьЦенуПоставщика(ТекНоменклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Дата));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПоставщика(Номенклатура, Характеристика, Период)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			&Период,
		|			Номенклатура = &Номенклатура
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НеВедетсяУчетПоХарактеристикам
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Характеристика = &Характеристика
		|				КОНЕЦ) КАК ЦеныПоставщиковСрезПоследних");
	Запрос.УстановитьПараметр("Период"		, Период);
	//Запрос.УстановитьПараметр("Поставщик"	, Контрагент); Поставщик с Контрагентом могут не совпадать
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат 0; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.Цена;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыЗадачиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
Перем ТекущиеДанные;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		_УникИД = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСтроки = _УникИД;
		ТекущиеДанные.КлючСтрокиСтр = Строка(_УникИД);
	КонецЕсли;
	
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		
		//+++АК SHEP 20160826: для нулевого кол-ва не проверяем дату производства
		ТекНомерСтроки 		= ТекущиеДанные.НомерСтроки;
		
		Если ТекущиеДанные.Количество = 0 Тогда Возврат;
		ИначеЕсли ТекущиеДанные.Количество < 0 Тогда
			Элемент.ТекущийЭлемент = Элементы.ПараметрыЗадачиКоличество;
	        Сообщение = Новый СообщениеПользователю();
	        Сообщение.Текст = "Количество не может быть меньше нуля!";
	        Сообщение.Поле 	= "Объект.ПараметрыЗадачи[" + (ТекНомерСтроки - 1) + "].Количество";
	        Сообщение.КлючДанных = Объект.Ссылка;
	        Сообщение.Сообщить();
	        Отказ = Истина;
			Возврат;
		КонецЕсли;
		//---АК SHEP 20160826
		
		ОшибкаДатыПроизводства = Ложь;
		ТекДатаПроизводства = ТекущиеДанные.ДатаПроизводства;
		ДатаПроизводстваНач = ТекущиеДанные.ДатаПроизводстваНач;
		ДатаПроизводстваКон = ТекущиеДанные.ДатаПроизводстваКон;
		
		//ТекстОшибки = "В строке №" + ТекНомерСтроки + " дата производства не соответствует датам производства (с..по)";
		ТекстОшибки = "Строка №" + ТекНомерСтроки + ": Продукцию с этой датой производства отрабатывать по этой задаче технолога не надо.
			|Верни товар на полку, а в эту строчку внеси нулевое количество.";
		
		Если БезДатПроизводства ИЛИ ВсеПартии Тогда
			// не проверяем дату производства
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекДатаПроизводства) Тогда
			ОшибкаДатыПроизводства = Истина;
			ТекстОшибки = "В строке №" + ТекНомерСтроки + " укажи дату производства или обнули количество!";
			
		ИначеЕсли ЗначениеЗаполнено(ДатаПроизводстваКон) Тогда
			ОшибкаДатыПроизводства = (ТекДатаПроизводства < ДатаПроизводстваНач
										ИЛИ ТекДатаПроизводства > ДатаПроизводстваКон);
		ИначеЕсли ЗначениеЗаполнено(ДатаПроизводстваНач) Тогда
			ОшибкаДатыПроизводства = (ТекДатаПроизводства < ДатаПроизводстваНач);
		Иначе
			//+++АК SHEP 20160805: если период дат проиводства не заполнен, дату производства не проверяем
			//ОшибкаДатыПроизводства = ЗначениеЗаполнено(ТекДатаПроизводства);
			//---АК SHEP 20160805
		КонецЕсли;
		
		Если ОшибкаДатыПроизводства Тогда
			Элемент.ТекущийЭлемент = Элементы.ПараметрыЗадачиДатаПроизводства;
	        Сообщение = Новый СообщениеПользователю();
	        Сообщение.Текст = ТекстОшибки;
	        Сообщение.Поле 	= "Объект.ПараметрыЗадачи[" + (ТекНомерСтроки - 1) + "].ДатаПроизводства";
	        Сообщение.КлючДанных = Объект.Ссылка;
	        Сообщение.Сообщить();
	        Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//+++VERN
&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ЗаписанРаходныйОрдер" 
		и ТипЗнч(Параметр)=Тип("ДокументСсылка.МП_ЗадачаТехнолога") 
		и Параметр=Объект.Ссылка 
	тогда
		ЗаполнитьОрдерНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрдерНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Ордер=Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Ордер) или Ордер.Проведен тогда
		Элементы.Ордер.ЦветФона=Элементы.Номер.ЦветФона;
	иначе
		Если НЕ Ордер.Проведен тогда
			Элементы.Ордер.ЦветФона=ЦветаСтиля.СтатусОтклонен;
		иначе
			Элементы.Ордер.ЦветФона=Элементы.Номер.ЦветФона;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры
//---VERN

&НаКлиенте
Процедура ПараметрыЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЭтоЗаданиеТехнологаМагазинам Тогда Возврат; КонецЕсли;
	
	Если СвереноСПоставщиком Тогда
		
		Предупреждение("По согласованной с поставщиком задаче количество можно только уменьшать!");
		Отказ = Истина;
		Возврат;
		
	//+++АК SHEP 2018.10.03 ИП-00019388
	ИначеЕсли Объект.ТипЗадания <> ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок") Тогда
		ПоказатьПредупреждение(, "Для внесения исправлений, добавьте корректировку на закладке «Корректировки»");
		Отказ = Истина;
		Возврат;
	//---АК SHEP 2018.10.03

	ИначеЕсли НЕ Копирование И ЭтоЗаданиеТехнологаМагазинам Тогда
		
		Если ТоварыДляЗаполнения.Количество() > 1 Тогда
			
			СтруктураВозврата = ОткрытьФормуМодально("Документ.ЗаданиеТехнологаМагазинам.Форма.ФормаВыбораСтроки", Новый Структура("Ключ,ЗакрыватьПриВыборе", ДокументОснование, Истина), ЭтаФорма);
			
			Если СтруктураВозврата <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Объект.ПараметрыЗадачи.Добавить(), СтруктураВозврата);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСледующийИДСтроки()
Перем МаксИДСтроки;
	МаксИДСтроки = 0;
	
	Для Каждого СтрокаТЧ Из Объект.ПараметрыЗадачи Цикл
		МаксИДСтроки = Макс(МаксИДСтроки, СтрокаТЧ.ИДСтроки);
	КонецЦикла;
	
	Возврат Макс(МаксИДСтроки, Объект.ПараметрыЗадачи.Количество()) + 1;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыЗадачиДатаПроизводстваПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.ИДСтроки = ПолучитьСледующийИДСтроки();
	_УникИД = Новый УникальныйИдентификатор;
	ТекущиеДанные.КлючСтроки = _УникИД;
	ТекущиеДанные.КлючСтрокиСтр = Строка(_УникИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ЭтоЗаданиеТехнологаМагазинам И ТекущиеДанные.НомерСтроки <= ТоварыДляЗаполнения.Количество() Тогда
		Предупреждение("Нельзя удалять номенклатуру в задании, проставьте нулевое количество!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	//+++АК SHEP 2018.10.03 ИП-00019388
	Если ЭтоЗаданиеТехнологаМагазинам И Объект.ТипЗадания <> ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок") Тогда
		ПоказатьПредупреждение(, "Для внесения исправлений, добавьте корректировку на закладке «Корректировки»");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//---АК SHEP 2018.10.03
	
	Если ЭтоЗаданиеТехнологаМагазинам И СканироватьШтрихкод И НЕ ТекущиеДанные.ШтрихКодОтсканирован Тогда
		
		//+++АК SHEP 20170322: добавить кнопку "Нет данного товара/характеристики"
		//Предупреждение("Чтобы изменить значения по этому товару, отсканируй его", 5, "Задача технолога");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да, у меня есть такой товар от этого производителя и я его просканирую");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет данного товара/характеристики");
		//СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		
		Если Вопрос("Чтобы изменить значения по этому товару, отсканируй его", СписокКнопок, , КодВозвратаДиалога.Да, "Задача технолога", ) = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Истина;
			ТекущиеДанные.Количество = 0;
			ПараметрыЗадачиКоличествоПриИзменении(Элементы.ПараметрыЗадачиКоличество);
		Иначе
			ВвестиШтрихКод("");
		КонецЕсли;
		//---АК SHEP 20170322
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ (ЭтоЗаданиеТехнологаМагазинам И НоваяСтрока) Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.Количество = 0;
	ИначеЕсли ТоварыДляЗаполнения.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТоварыДляЗаполнения[0]);
	КонецЕсли;
	
	//Элемент.ЗакончитьРедактированиеСтроки(Ложь); // НЕ РАБОТАЕТ!!! ((
	Элементы.ПараметрыЗадачиДатаПроизводства.ТолькоПросмотр = Истина;
	ПараметрыЗадачиКоличествоПриИзменении(Элементы.ПараметрыЗадачиКоличество);
	ПараметрыЗадачиПередНачаломИзменения(Элемент, Ложь);
	Элементы.ПараметрыЗадачиДатаПроизводства.ТолькоПросмотр = Ложь;
	//Если СканироватьШтрихкод И НЕ ТекущиеДанные.ШтрихКодОтсканирован Тогда
	//	Элемент.ЗакончитьРедактированиеСтроки(Истина);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварныеОперацииНаСервере()
	
	РеквизитФормыВЗначение("Объект").ЗаполнитьТоварныеОперации(ТоварныеОперации);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОперации И ТоварныеОперации.Количество() = 0 Тогда
		ЗаполнитьТоварныеОперацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФактическуюДатуВыполненияНаСервере(Объект_Ссылка)
	
	РеквизитФормыОбъект = РеквизитФормыВЗначение("Объект");
	
	НомерПопытки = 0;
	Пока Истина Цикл
		Попытка
			РеквизитФормыОбъект.ФактическаяДатаВыполнения = ФактическаяДатаВыполнения2;
			РеквизитФормыОбъект.ОбменДанными.Загрузка = Истина;
			РеквизитФормыОбъект.Записать();
			РеквизитФормыОбъект.Прочитать();
			Прервать;
		Исключение
			Если НомерПопытки = 20 Тогда ВызватьИсключение ОписаниеОшибки(); КонецЕсли;
			НомерПопытки = НомерПопытки + 1;
			РеквизитФормыОбъект.Прочитать();
		КонецПопытки;
	КонецЦикла;
	
	РеквизитФормыОбъект.ОбновитьСуммыРеализованногоВозврата(, Истина);
	РеквизитФормыОбъект.Прочитать();
	ЗначениеВРеквизитФормы(РеквизитФормыОбъект, "Объект");
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаВыполнения2ПриИзменении(Элемент)
	
	УстановитьФактическуюДатуВыполненияНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаВыполнения2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Дата(1, 1, 1) ИЛИ Вопрос("Установить фактическую дату выполнения?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли ВыбранноеЗначение < НачалоДня(Объект.Дата) ИЛИ ВыбранноеЗначение > НачалоДня(ТекущаяДата()) Тогда
		Предупреждение("Неверно указана факт. дата выполнения!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаВыполнения2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбранноеЗначение = Дата(Текст + " 00:00:00");
	ФактическаяДатаВыполнения2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Перем Файл, ОтносительноеИмяФайла;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтносительноеИмяФайла = ТекущиеДанные.ОтносительноеИмяФайла;
	Если НЕ ПустаяСтрока(ОтносительноеИмяФайла) Тогда
		АдресВремХранилища = ПолучитьФайлНаСервере(КаталогХраненияФайлов + ОтносительноеИмяФайла, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
			Файл = Новый Файл(ОтносительноеИмяФайла);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ИмяФайла, УникальныйИдентификатор)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
Перем ПерваяСтрока;
	
	Если Источник = "KeyboardHook" И Данные = "00122" И НЕ ШтрихКодОбработанФормой Тогда
		
		ШтрихКодОбработанФормой = Истина;
		Если НЕ СканироватьШтрихкод Тогда Возврат; КонецЕсли;
		
		//+++АК SHEP 2018.08.31 ИП-00019388
		Если Объект.ТипЗадания <> ПредопределенноеЗначение("Перечисление.ТипыЗаданийТехнологаМагазинам.УбратьСПолок") Тогда
			ПоказатьПредупреждение(, "Для внесения исправлений, добавьте корректировку на закладке «Корректировки»");
			Возврат;
		КонецЕсли;
		//---АК SHEP 2018.08.31
		
		ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
		ШтрихКодОбработанФормой = Истина;
		Если НЕ ЗначениеЗаполнено(ШтрихКод) Тогда Возврат; КонецЕсли;
		
		//+++АК SHEP 2018.01.10 ИП-00017507: добавил условие
		ДваПервых = Лев(ШтрихКод, 2);
		Если ДваПервых = "96" ИЛИ ДваПервых = "97" ИЛИ ДваПервых = "98" ИЛИ ДваПервых = "99" Тогда
			ОшибкаСтрокой = "Нужно сканировать штрих-код, напечатанный на товаре (а не напечатанный из «1С») !";
		Иначе
		//---АК SHEP 2018.01.10
			СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
			МассивСтрокДляОтбора = Объект.ПараметрыЗадачи.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", СтруктураДанных.Номенклатура, СтруктураДанных.Характеристика));
			
			Если МассивСтрокДляОтбора.Количество() = 0 Тогда
				МассивСтрокДляОтбора = Объект.ПараметрыЗадачи.НайтиСтроки(Новый Структура("Номенклатура", СтруктураДанных.Номенклатура));
				Если МассивСтрокДляОтбора.Количество() = 0 Тогда
					ОшибкаСтрокой = "Данный товар по этой задаче технолога не надо убирать!";
				Иначе
					ОшибкаСтрокой = "Данного производителя по этой задаче технолога не надо убирать!";
				КонецЕсли;
			Иначе
				
				ПерваяСтрока = Истина;
				Для Каждого СтрокаТЧ Из МассивСтрокДляОтбора Цикл
					СтрокаТЧ.ШтрихКодОтсканирован = Истина;
					Если ПерваяСтрока Тогда
						Элементы.ПараметрыЗадачи.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
						ПерваяСтрока = Ложь;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ОшибкаСтрокой) Тогда
			// разрешаем редактирование
			ТекущийЭлемент = Элементы.ПараметрыЗадачи;
			Если ТекущийЭлемент.ТекущийЭлемент.Имя <> "ПараметрыЗадачиДатаПроизводства" Тогда ТекущийЭлемент.ТекущийЭлемент = Элементы.ПараметрыЗадачиКоличество; КонецЕсли;
			ТекущийЭлемент.ИзменитьСтроку();
		Иначе
			Предупреждение(ОшибкаСтрокой);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	ШтрихКодОбработанФормой = Ложь;
	ВнешнееСобытие("KeyboardHook", "KeyboardHook", "00122");
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаВыполненияПриИзменении(Элемент)
	
	Если Объект.ФактическаяДатаВыполнения = Дата(1,1,1) И Объект.ТипЗадания <> ТипЗаданияДокументаОснования Тогда  
		Если Вопрос("Изменить тип задания """ + Объект.ТипЗадания + """ на """ + ТипЗаданияДокументаОснования + """?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Объект.ТипЗадания = ТипЗаданияДокументаОснования;
		
		ТекущаяСтрока = Элементы.ПараметрыЗадачи.ТекущаяСтрока;
		Для Каждого СтрокаТЧ Из Объект.ПараметрыЗадачи Цикл
			Элементы.ПараметрыЗадачи.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
			ПараметрыЗадачиКоличествоПриИзменении(Элементы.ПараметрыЗадачиКоличество);
		КонецЦикла;
		Элементы.ПараметрыЗадачи.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаВыполненияОчистка(Элемент, СтандартнаяОбработка)
	ФактическаяДатаВыполненияПриИзменении(Элемент);
КонецПроцедуры

//+++АК SHEP 2018.08.30 ИП-00019388
&НаКлиенте
Процедура ДобавитьКорректировку(Элемент)
	
	ОповещениеЗакрытия = Новый ОписаниеОповещения("КорректировкиОкончание", ЭтаФорма, Новый Массив);
	СтруктураПараметрыФормы = Новый Структура("ДокументОснование,ТоварыДляЗаполнения,ОтветственныеЛица");
	ЗаполнитьЗначенияСвойств(СтруктураПараметрыФормы, ЭтаФорма);
	СтруктураПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОткрытьФорму(СтроковыеФункцииКлиентСервер.ПолучитьПолноеИмяФормы(ЭтаФорма.ИмяФормы, "ФормаКорректировки"), СтруктураПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,
		ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//+++АК SHEP 2018.08.30 ИП-00019388
&НаКлиенте
Процедура КорректировкиОкончание(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект.Корректировки.Добавить(), Результат);
	Записать();
	
КонецПроцедуры
