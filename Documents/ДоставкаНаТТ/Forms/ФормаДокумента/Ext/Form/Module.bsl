
&НаСервере
Процедура ЗаполнитьСоставПоДокументам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент"		, Объект.Контрагент);
	Запрос.УстановитьПараметр("ГруппаДоставки"	, Объект.ГруппаДоставкиНоменклатуры);
	//+++АК SHEP 2017.11.23 ИП-00017320
	//Запрос.УстановитьПараметр("НачалоПериода"	, НачалоМесяца(Объект.Период));
	//Запрос.УстановитьПараметр("КонецПериода"	, КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("НачалоПериода"	, Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, Объект.КонецПериода);
	//---АК SHEP 2017.11.23
	
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Период КАК Период,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Контрагент,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ КАК ТТ,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Ставка
	|ПОМЕСТИТЬ ВТСтавки
	|ИЗ
	|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ГруппаДоставкиНоменклатуры = &ГруппаДоставки) КАК СтоимостьУслугПоДоставкеТовараНаТТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Период,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Контрагент,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ,
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Ставка
	|ИЗ
	|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ КАК СтоимостьУслугПоДоставкеТовараНаТТ
	|ГДЕ
	|	СтоимостьУслугПоДоставкеТовараНаТТ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтоимостьУслугПоДоставкеТовараНаТТ.Организация = &Организация
	|	И СтоимостьУслугПоДоставкеТовараНаТТ.ГруппаДоставкиНоменклатуры = &ГруппаДоставки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ТТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Ссылка КАК Ссылка,
	|	ТЧТовары.Ссылка.Получатель КАК ТТ,
	|	ТЧТовары.Ссылка.Получатель.id_TT КАК id_TT,
	|	ТЧТовары.Ссылка.ДатаРаспределения КАК ДатаДоставки
	|ПОМЕСТИТЬ ВТРасходыПоГруппеДоставки
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК ТЧТовары
	|ГДЕ
	|	ТЧТовары.Ссылка.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТЧТовары.Номенклатура.ГруппаДоставкиНаТТ = &ГруппаДоставки
	|	И ТЧТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И ТЧТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|	И ТЧТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	|	И ТЧТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Ссылка,
	|	ТЧТовары.Ссылка.Получатель,
	|	ТЧТовары.Ссылка.Получатель.id_TT,
	|	ТЧТовары.Ссылка.ДатаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВТСтавки.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодСтавки,
	|	ВТРасходыПоГруппеДоставки.ТТ КАК ТТ,
	|	ВТРасходыПоГруппеДоставки.id_TT КАК id_TT,
	|	ВТРасходыПоГруппеДоставки.ДатаДоставки КАК ДатаДоставки,
	|	ВТСтавки.Контрагент КАК Контрагент,
	|	ВТСтавки.Ставка КАК Ставка,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТОсновная
	|ИЗ
	|	ВТРасходыПоГруппеДоставки КАК ВТРасходыПоГруппеДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтавки КАК ВТСтавки
	|		ПО (ВТСтавки.ТТ = ВТРасходыПоГруппеДоставки.ТТ)
	|			И (НЕ ВТСтавки.Период > ВТРасходыПоГруппеДоставки.ДатаДоставки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ДатаДоставки КАК ДатаДоставки,
	|	ВТОсновная.ТТ КАК ТТ,
	|	МАКСИМУМ(ВТОсновная.ПериодСтавки) КАК ПериодСтавки
	|ПОМЕСТИТЬ ВТСвернутая
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОсновная.ДатаДоставки,
	|	ВТОсновная.ТТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаДоставки,
	|	ТТ,
	|	ПериодСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновная.ТТ КАК ТТ,
	|	ВТОсновная.id_TT КАК id_TT,
	|	ВТОсновная.ДатаДоставки КАК ДатаДоставки,
	|	ВТОсновная.Ставка КАК Ставка,
	|	ВТОсновная.Количество КАК Количество
	|ИЗ
	|	ВТОсновная КАК ВТОсновная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвернутая КАК ВТСвернутая
	|		ПО (ВТСвернутая.ДатаДоставки = ВТОсновная.ДатаДоставки)
	|			И (ВТСвернутая.ТТ = ВТОсновная.ТТ)
	|			И (ВТСвернутая.ПериодСтавки = ВТОсновная.ПериодСтавки)
	|ГДЕ
	|	ВТОсновная.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	id_TT,
	|	ДатаДоставки";				   
				   
	//
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

//+++АК SHEP 2017.11.21 ИП-00017191
&НаСервере
Процедура ЗаполнитьСоставПоДокументам_17191()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница КАК ТТ,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
		|	МаршрутныйЛист.Дата КАК ДатаДоставки,
		|	МАКСИМУМ(1) КАК Количество,
		|	&Ставка КАК Ставка
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
		|		ПО МаршрутныйЛист.Ссылка = МаршрутныйЛистТорговыеТочки.Ссылка
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		//|		ПО МаршрутныйЛист.Маршрут = МаршрутыТорговыеТочки.Ссылка
		//|			И (МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница = МаршрутыТорговыеТочки.СтруктурнаяЕдиница)
		|ГДЕ
		|	МаршрутныйЛист.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И МаршрутныйЛист.Проведен
		|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
		|	И МаршрутныйЛист.Организация = &Организация
		|	И МаршрутныйЛист.Перевозчик = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница,
		|	МаршрутныйЛист.Дата,
		|	МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница.НомерТочки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки");
	//+++АК SHEP 2017.11.23 ИП-00017320
	//Запрос.УстановитьПараметр("НачалоПериода"	, НачалоМесяца(Объект.Период));
	//Запрос.УстановитьПараметр("КонецПериода"	, КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("НачалоПериода"	, Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, Объект.КонецПериода);
	//---АК SHEP 2017.11.23
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ставка", Объект.Ставка);
	
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//+++АК SHEP 2018.01.17 ИП-00017191.02
//Условия остаются как в осн. задаче, но заполнять нужно по документам Расходый ордер, а не Рейс.
&НаСервере
Процедура ЗаполнитьСоставПоДокументам_17191_02()
	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	РасходныйОрдерСклад.Получатель КАК ТТ,
	//	|	РасходныйОрдерСклад.Получатель.НомерТочки КАК НомерТочки,
	//	|	РасходныйОрдерСклад.ДатаРаспределения КАК ДатаДоставки,
	//	|	МАКСИМУМ(1) КАК Количество,
	//	|	&Ставка КАК Ставка
	//	|ИЗ
	//	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК ТЧТовары
	//	|		ПО (ТЧТовары.Ссылка = РасходныйОрдерСклад.Ссылка)
	//	|ГДЕ
	//	|	РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	//	|	И РасходныйОрдерСклад.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
	//	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	//	|	И РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	//	|	И РасходныйОрдерСклад.Проведен
	//	|	И ТЧТовары.Номенклатура.ГруппаДоставкиНаТТ = &ГруппаДоставки
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РасходныйОрдерСклад.Получатель,
	//	|	РасходныйОрдерСклад.ДатаРаспределения,
	//	|	РасходныйОрдерСклад.Получатель.НомерТочки
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерТочки");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Получатель КАК ТТ,
		|	РасходныйОрдерСклад.Получатель.НомерТочки КАК НомерТочки,
		|	РасходныйОрдерСклад.ДатаРаспределения КАК ДатаДоставки,
		|	МАКСИМУМ(1) КАК Количество,
		|	&Ставка КАК Ставка
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО МаршрутныйЛист.Ссылка = МаршрутныйЛистРасходныеОрдера.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК ТЧТовары
		|			ПО (ТЧТовары.Ссылка = РасходныйОрдерСклад.Ссылка)
		|		ПО (МаршрутныйЛистРасходныеОрдера.Документ = РасходныйОрдерСклад.Ссылка)
		|ГДЕ
		|	РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСклад.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
		|	И РасходныйОрдерСклад.Проведен
		|	И ТЧТовары.Номенклатура.ГруппаДоставкиНаТТ = &ГруппаДоставки
		|	И МаршрутныйЛист.Проведен
		|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
		|	И МаршрутныйЛист.Организация = &Организация
		|	И МаршрутныйЛист.Перевозчик = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Получатель,
		|	РасходныйОрдерСклад.ДатаРаспределения,
		|	РасходныйОрдерСклад.Получатель.НомерТочки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки");
	Запрос.УстановитьПараметр("ГруппаДоставки"	, Объект.ГруппаДоставкиНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода"	, Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, Объект.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ставка", Объект.Ставка);
	
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//+++АК SHEP 2018.02.05 ИП-00017191.03
//Условия остаются как в осн. задаче, но заполнять нужно по документам Расходый ордер, а не Рейс.
&НаСервере
Процедура ЗаполнитьСоставПоДокументам_17191_03()
	
	//+++АК SHEP 2018.04.26 ИП-00018321.02: добавил СтавкаДопТарифа 
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Получатель КАК ТТ,
		|	РасходныйОрдерСклад.Получатель.НомерТочки КАК НомерТочки,
		|	РасходныйОрдерСклад.ДатаРаспределения КАК ДатаДоставки,
		|	МАКСИМУМ(1) КАК Количество,
		|	&Ставка КАК Ставка
		|ПОМЕСТИТЬ ТекущиеДанные
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО МаршрутныйЛист.Ссылка = МаршрутныйЛистРасходныеОрдера.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК ТЧТовары
		|			ПО (ТЧТовары.Ссылка = РасходныйОрдерСклад.Ссылка)
		|		ПО (МаршрутныйЛистРасходныеОрдера.Документ = РасходныйОрдерСклад.Ссылка)
		|ГДЕ
		|	РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|	И РасходныйОрдерСклад.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
		|	И РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
		|	И РасходныйОрдерСклад.Проведен
		|	И ТЧТовары.Номенклатура.ГруппаДоставкиНаТТ = &ГруппаДоставки
		|	И МаршрутныйЛист.Проведен
		|	И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
		|	И МаршрутныйЛист.Организация = &Организация
		|	И МаршрутныйЛист.Перевозчик = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Получатель,
		|	РасходныйОрдерСклад.ДатаРаспределения,
		|	РасходныйОрдерСклад.Получатель.НомерТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоставкаНаТТСостав.ТТ,
		|	ДоставкаНаТТСостав.ДатаДоставки,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДоставкаНаТТСостав.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ИмеющиесяДанные
		|ИЗ
		|	Документ.ДоставкаНаТТ.Состав КАК ДоставкаНаТТСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
		|		ПО ДоставкаНаТТСостав.Ссылка = ДоставкаНаТТ.Ссылка
		|ГДЕ
		|	ДоставкаНаТТ.Проведен
		|	И ДоставкаНаТТ.Дата МЕЖДУ &НачМесяца И &КонМесяца
		|	И НЕ ДоставкаНаТТ.Ссылка = &Ссылка
		|	И ДоставкаНаТТ.Организация = &Организация
		|	И ДоставкаНаТТ.Контрагент = &Контрагент
		|	И ДоставкаНаТТ.ГруппаДоставкиНоменклатуры = &ГруппаДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоставкаНаТТСостав.ТТ,
		|	ДоставкаНаТТСостав.ДатаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ КАК ТТ,
		|	СтоимостьУслугПоДоставкеТовараНаТТ.СтавкаДопТарифа
		|ПОМЕСТИТЬ СтавкиДопТарифа
		|ИЗ
		|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ГруппаДоставкиНоменклатуры = &ГруппаДоставки
		|				И ТТ В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТекущиеДанные.ТТ
		|					ИЗ
		|						ТекущиеДанные КАК ТекущиеДанные)) КАК СтоимостьУслугПоДоставкеТовараНаТТ
		|ГДЕ
		|	СтоимостьУслугПоДоставкеТовараНаТТ.НаличиеДопТарифа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеДанные.ТТ,
		|	ТекущиеДанные.НомерТочки КАК НомерТочки,
		|	ТекущиеДанные.ДатаДоставки,
		|	ТекущиеДанные.Количество,
		|	ЕСТЬNULL(СтавкиДопТарифа.СтавкаДопТарифа, 0) КАК СтавкаДопТарифа,
		|	ТекущиеДанные.Ставка
		|ИЗ
		|	ТекущиеДанные КАК ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИмеющиесяДанные КАК ИмеющиесяДанные
		|		ПО ТекущиеДанные.ТТ = ИмеющиесяДанные.ТТ
		|			И ТекущиеДанные.ДатаДоставки = ИмеющиесяДанные.ДатаДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиДопТарифа КАК СтавкиДопТарифа
		|		ПО ТекущиеДанные.ТТ = СтавкиДопТарифа.ТТ
		|ГДЕ
		|	ТекущиеДанные.Количество - ЕСТЬNULL(ИмеющиесяДанные.Количество, 0) = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки");
	Запрос.УстановитьПараметр("ГруппаДоставки"	, Объект.ГруппаДоставкиНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода"	, Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, Объект.КонецПериода);
	Запрос.УстановитьПараметр("НачМесяца"	, НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонМесяца"	, КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ставка", Объект.Ставка);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//+++АК SHEP 2017.11.21 ИП-00017191
&НаКлиенте
Процедура СтавкаПриИзменении(Элемент)
	
	ПередЗаписью(Ложь, Новый Структура);
	ЗаполнитьТаблицуКалькуляции(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКалькуляции(ОбновитьСтавку = Ложь)
	
	//
	тзКалькуляция.Очистить();
	
	//
	тзТТ = Объект.Состав.Выгрузить();
	
	//+++АК SHEP 2017.11.21 ИП-00017191
	Если ОбновитьСтавку Тогда
		тзТТ.ЗаполнитьЗначения(Объект.Ставка, "Ставка");
		Объект.Состав.Загрузить(тзТТ);
	КонецЕсли;
	//---АК SHEP 2017.11.21
	
	тзТТ.Свернуть("ТТ, Ставка");
	
	//+++АК SHEP 2017.11.30 ИП-00017191.01
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТТ.ТТ
		|ПОМЕСТИТЬ ТаблицаТТ
		|ИЗ
		|	&ТаблицаТТ КАК ТаблицаТТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТТ.ТТ,
		|	СтруктурныеЕдиницы.НомерТочки
		|ИЗ
		|	ТаблицаТТ КАК ТаблицаТТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ТаблицаТТ.ТТ = СтруктурныеЕдиницы.Ссылка");
	Запрос.УстановитьПараметр("ТаблицаТТ", тзТТ);
	ТЗнНомераТТ = Запрос.Выполнить().Выгрузить();
	//---АК SHEP 2017.11.30
	
	//
	Для Каждого СтрокаТЗ Из тзТТ Цикл
		
		ТекТТ = СтрокаТЗ.ТТ;
		//
		НоваяСтрока = тзКалькуляция.Добавить();
		НоваяСтрока.ТТ = ТекТТ;
		НоваяСтрока.Ставка = СтрокаТЗ.Ставка;
		
		//+++АК SHEP 2017.11.30 ИП-00017191.01
		СтрокаТЗн = ТЗнНомераТТ.Найти(ТекТТ, "ТТ");
		Если СтрокаТЗн <> Неопределено Тогда
			НоваяСтрока.НомерТочки = СтрокаТЗн.НомерТочки;
		КонецЕсли;
		//---АК SHEP 2017.11.30
		
		//
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Сумма = 0;
		//+++АК SHEP 2018.04.26 ИП-00018321.02
		//НоваяСтрока.СтавкаДопТарифа = СтрокаТЗ.СтавкаДопТарифа;
		НоваяСтрока.СуммаДопТарифа = 0;
		//---АК SHEP 2018.04.26
		
		//
		СтруктураПоиска = Новый Структура("ТТ, Ставка", ТекТТ, СтрокаТЗ.Ставка);
		
		//
		НайденныеСтроки = Объект.Состав.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//
			ДеньМесяца = День(НайденнаяСтрока.ДатаДоставки);
			
			//
			НоваяСтрока["Количество" + ДеньМесяца] = НайденнаяСтрока.Количество;
			
			//
			НоваяСтрока.Количество 	= НоваяСтрока.Количество + НайденнаяСтрока.Количество;
			НоваяСтрока.Сумма 		= НоваяСтрока.Сумма + (НайденнаяСтрока.Количество * НайденнаяСтрока.Ставка);
			НоваяСтрока.СтавкаДопТарифа = НайденнаяСтрока.СтавкаДопТарифа; //+++АК SHEP 2018.04.26 ИП-00018321.02
			НоваяСтрока.СуммаДопТарифа = НоваяСтрока.СуммаДопТарифа + (НайденнаяСтрока.Количество * НайденнаяСтрока.СтавкаДопТарифа); //+++АК SHEP 2018.04.26 ИП-00018321.02
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	тзКалькуляция.Сортировать("НомерТочки"); //+++АК SHEP 2017.11.30 ИП-00017191.01
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	Элементы.тзКалькуляцияСуммаДопТарифа.ТекстПодвала = тзКалькуляция.Итог("СуммаДопТарифа"); //+++АК SHEP 2018.04.26 ИП-00018321.02
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПоДокументам(Команда)
	
	//+++АК SHEP 2017.11.21 ИП-00017191
	//ЗаполнитьСоставПоДокументам();
	ЗаполнитьСоставПоДокументам_17191();
	//---АК SHEP 2017.11.21
	ЗаполнитьТаблицуКалькуляции();
	
КонецПроцедуры

//+++АК SHEP 2018.01.17 ИП-00017191.02
&НаКлиенте
Процедура ЗаполнитьПоРасходнымОрдерам(Команда)
	
	ЗаполнитьСоставПоДокументам_17191_02();
	ЗаполнитьТаблицуКалькуляции();
	
КонецПроцедуры

//+++АК SHEP 2018.02.05 ИП-00017191.03
&НаКлиенте
Процедура ЗаполнитьПоРасходнымОрдерамБезПовторений(Команда)
	
	ЗаполнитьСоставПоДокументам_17191_03();
	ЗаполнитьТаблицуКалькуляции();
	
КонецПроцедуры

&НаКлиенте
Процедура тзКалькуляцияСтавкаПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.тзКалькуляция.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	//
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Ставка * ТекущаяСтрока.Количество;
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура тзКалькуляцияСуммаПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.тзКалькуляция.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	//
	Если ТекущаяСтрока.Количество <> 0 Тогда
		ТекущаяСтрока.Ставка = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;
	Иначе
		ТекущаяСтрока.Ставка = 0;
	КонецЕсли;
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.тзКалькуляция.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//
	ТекущаяСтрока.Количество = 0;
	Для Сч = 1 По 31 Цикл
		ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + ТекущаяСтрока["Количество" + Сч];
	КонецЦикла;
	
	//
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Ставка * ТекущаяСтрока.Количество;
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура тзКалькуляцияПослеУдаления(Элемент)
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура тзКалькуляцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//
	Элементы.тзКалькуляцияКоличество.ТекстПодвала = тзКалькуляция.Итог("Количество");
	Элементы.тзКалькуляцияСумма.ТекстПодвала = тзКалькуляция.Итог("Сумма");
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//
	//ПредставлениеПериода = Формат(Объект.Период, "ДФ='ММММ гггг ""г.""'");
	
	//
	ЗаполнитьТаблицуКалькуляции();
	
	//
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзменении(Элементы.Дата);
	//КонецЕсли;	
	
	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//
	Объект.Состав.Очистить();
	
	//
	Для Каждого СтрокаТЗ Из тзКалькуляция Цикл
		
		//
		Сч = 0;
		
		//
		ТекущаяДата = НачалоМесяца(Объект.Период);
		Пока ТекущаяДата <= КонецМесяца(Объект.Период) Цикл
			
			//
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.ТТ = СтрокаТЗ.ТТ;
			НоваяСтрока.Ставка = СтрокаТЗ.Ставка;
			НоваяСтрока.СтавкаДопТарифа = СтрокаТЗ.СтавкаДопТарифа; //+++АК SHEP 2018.04.26 ИП-00018321.02
			
			//
			НоваяСтрока.ДатаДоставки = ТекущаяДата;
			НоваяСтрока.Количество = СтрокаТЗ["Количество" + (Сч + 1)];
			
			//
			Сч = Сч + 1;
			ТекущаяДата = НачалоМесяца(Объект.Период) + Сч*24*60*60;
			
		КонецЦикла;	
		
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Доставка на ТТ");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.Период = НачалоМесяца(Объект.Дата);
		//ПредставлениеПериода = Формат(Объект.Период, "ДФ='ММММ гггг ""г.""'");
		
	КонецЕсли;	
	
	//+++АК SHEP 2018.01.26 ИП-00017365.02
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТолькоПросмотр Тогда
		ТолькоПросмотр = Документы.ПоступлениеТоваровУслуг.ДокументИспользуетсяВТранспортныхДокументах(Объект.Ссылка, Истина);
	КонецЕсли;
	//---АК SHEP 2018.01.26
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.Период = НачалоМесяца(Объект.Период);
	ПредставлениеПериода = Формат(Объект.Период, "ДФ='ММММ гггг ""г.""'");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	//
	//+++АК SHEP 2017.11.23 ИП-00017320
	//Объект.Период = НачалоМесяца(Объект.Дата);
	//ПредставлениеПериода = Формат(Объект.Период, "ДФ='ММММ гггг ""г.""'");
	ИзмПериод();
	//---АК SHEP 2017.11.23
	
	//
	Для Сч = 1 По 31 Цикл
		
		//
		Элементы["тзКалькуляцияКоличество" + Сч].Видимость = Истина;
		
		//
		ТекущаяДата = НачалоМесяца(Объект.Период) + (Сч - 1)*24*60*60; 
		
		//
		Если НачалоМесяца(ТекущаяДата) = НачалоМесяца(Объект.Период) Тогда
			Продолжить;
		КонецЕсли;	
		
		//
		Для Каждого СтрокаТЗ Из тзКалькуляция Цикл
			
			//
			СтрокаТЗ["Количество" + Сч] = 0;
			
			//
			СтрокаТЗ.Количество = 0;
			Для Сч1 = 1 По 31 Цикл
				СтрокаТЗ.Количество = СтрокаТЗ.Количество + СтрокаТЗ["Количество" + Сч1];
			КонецЦикла;
			
			//
			СтрокаТЗ.Сумма = СтрокаТЗ.Ставка * СтрокаТЗ.Количество;
			
		КонецЦикла;	
		
		//
		Элементы["тзКалькуляцияКоличество" + Сч].Видимость = Ложь;
		
		//
		Элементы.тзКалькуляцияКоличество.ТекстПодвала 	= тзКалькуляция.Итог("Количество");
		Элементы.тзКалькуляцияСумма.ТекстПодвала 		= тзКалькуляция.Итог("Сумма");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции
&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура АктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура АктОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.СчетФактура = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СчетФактураОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.СчетФактура);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Приложение = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Приложение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПолученныхДокументовПриИзменении(Элемент)
	
	Объект.ДокументыПолучены = ЗначениеЗаполнено(Объект.СтатусПолученныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не Объект.ДокументыПолучены Тогда
			//Отказ = Истина;
			Сообщить("Внимание! Проведение без ""Документы получены"" запрещено.",СтатусСообщения.ОченьВажное);
		КонецЕсли;	
		Если Объект.ДокументыПолучены И НЕ Объект.СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО Тогда
			Если Не ЗначениеЗаполнено(Объект.УПД) Тогда
				Если НЕ ЗначениеЗаполнено(Объект.Акт) Тогда
					//Отказ = Истина;
					Сообщить("Внимание! Проведение без скана акта/накладной или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
				//Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) И Объект.ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				//	//Отказ = Истина;
				//	Сообщить("Внимание! Проведение без скана фактуры будет запрещено с 27.03.2017. Станет возможна только запись!",СтатусСообщения.ОченьВажное);
				//КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.УПД = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.УПД);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	//+++АК SHEP 2017.11.22 ИП-00017191
	ЗаполнитьСтавку();
	//---АК SHEP 2017.11.22
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	//+++АК SHEP 2017.11.22 ИП-00017191
	ЗаполнитьСтавку();
	//---АК SHEP 2017.11.22
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоставкиНоменклатурыПриИзменении(Элемент)
	
	//+++АК SHEP 2017.11.22 ИП-00017191
	ЗаполнитьСтавку();
	//---АК SHEP 2017.11.22
	
КонецПроцедуры

//+++АК SHEP 2017.11.22 ИП-00017191
&НаСервере
Процедура ЗаполнитьСтавку()
	
	СтавкаБыло = Объект.Ставка;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(СтоимостьУслугПоДоставкеТовараНаТТ.Ставка) КАК Ставка
		|ИЗ
		|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ГруппаДоставкиНоменклатуры = &ГруппаДоставки) КАК СтоимостьУслугПоДоставкеТовараНаТТ");
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ГруппаДоставки", Объект.ГруппаДоставкиНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	// не нашли — ставку не меняем
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Объект.Ставка = ВыборкаЗапроса.Ставка;
	
	Если Объект.Ставка <> СтавкаБыло Тогда
		ЗаполнитьТаблицуКалькуляции(Истина);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.23 ИП-00017320
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ИзмПериод(Истина);
КонецПроцедуры

//+++АК SHEP 2017.11.23 ИП-00017320
&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Объект.КонецПериода = КонецДня(Объект.КонецПериода);
	ИзмПериод(Истина);
КонецПроцедуры

//+++АК SHEP 2017.11.23 ИП-00017320
&НаКлиенте
Процедура ИзмПериод(ИзменятьКомментарий = Ложь)
	
	Если НЕ ТолькоПросмотр Тогда
		
		Если Объект.Период <> НачалоМесяца(Объект.Дата) Тогда
			Объект.Период = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		Если НачалоМесяца(Объект.НачалоПериода) <> Объект.Период Тогда
			Объект.НачалоПериода = Объект.Период;
		КонецЕсли;
		
		Если НачалоМесяца(Объект.КонецПериода) <> Объект.Период Тогда
			Объект.КонецПериода = КонецМесяца(Объект.Период);
		КонецЕсли;
		
		Если ИзменятьКомментарий ИЛИ НЕ ЗначениеЗаполнено(Объект.Комментарий) Тогда
			Объект.Комментарий = "Развоз по Магазинам с " + День(Объект.НачалоПериода) + " по " + НРег(Формат(Объект.КонецПериода, "ДЛФ=DD"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеПериода = ПредставлениеПериода(Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

//+++АК SHEP 2017.11.23 ИП-00017320
&НаКлиенте
Процедура ВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);
	Если Диалог.Редактировать() Тогда
		Объект.НачалоПериода = Диалог.Период.ДатаНачала;
		Объект.КонецПериода = Диалог.Период.ДатаОкончания;
		ИзмПериод(Истина);
	КонецЕсли;
	
КонецПроцедуры
