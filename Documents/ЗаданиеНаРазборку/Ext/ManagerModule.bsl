
#Область ПрограммныйИнтерфейс

//+++АК LATV 2018.12.14 ИП-00020711
Функция ПечатьСДополнительнойОбработкой(Параметры, АдресХранилища) Экспорт

	// Сортировка
	ДокументыДляИзменения = ДокументыБезУпорядочиванияТоваров(Параметры.МассивСсылок);
	Для Каждого ЗаданиеНаРазборку Из ДокументыДляИзменения Цикл
		ЗаданиеНаРазборкуОбъект = ЗаданиеНаРазборку.ПолучитьОбъект();
		УпорядочитьСтрокиТоваров(ЗаданиеНаРазборкуОбъект);
		
		Попытка
			ЗаданиеНаРазборкуОбъект.ОбменДанными.Загрузка = Истина;
			ЗаданиеНаРазборкуОбъект.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось упорядочить таблицу товаров по маршрутам в документе %1 по причине: %2'"), ЗаданиеНаРазборку, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Печать
	ТабличныйДокумент = Печать(Параметры.ИмяМакета, Параметры.МассивСсылок);
	ОбновитьДокументыИСформироватьРасходныеОрдера(Параметры.МассивСсылок, Параметры.ПараметрыДополнительнойОбработки);
	
	// Обработка документов
	Результат = Новый Структура;
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("МассивСсылок",		Параметры.МассивСсылок);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецФункции

//+++АК LATV 2018.10.03 ИП-00020009
Функция Печать(ИмяМакета, МассивСсылок) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяМакета = "ЗаданиеНаРазборку" Тогда
		ЗаполнитьПечатнуюФорму_ЗаданиеНаРазборку(ТабличныйДокумент, МассивСсылок);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

//+++АК KIRN 2018.07.03 ИП-00019172
&НаСервере
Процедура УдалитьЗаданиеИзРО(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.КоличествоУРЗ КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку,
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Закрыто КАК Закрыто,
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.ЗаданиеНаРазборку в (&ЗаданиеНаРазборку)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка";
	Запрос.УстановитьПараметр("ЗаданиеНаРазборку",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		РасхОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			СтрокиТовар = РасхОрдерОбъект.Товары.НайтиСтроки(Новый Структура("ЗаданиеНаРазборку", Выборка.ЗаданиеНаРазборку));
			Для Каждого СтрокаТовар ИЗ СтрокиТовар Цикл
				РасхОрдерОбъект.Товары.Удалить(СтрокаТовар);
			КонецЦикла;
		КонецЦикла;
		
		Если РасхОрдерОбъект.Модифицированность() Тогда
			РасхОрдерОбъект.Записать(?(РасхОрдерОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
		КонецЕСли;
	КонецЦикла;
	
	Если типЗнч(Ссылка) = Тип("ДокументСсылка.ЗаданиеНаРазборку") Тогда
		Если Ссылка.ЗакрытоИОбновлено Тогда
			Об = Ссылка.ПолучитьОбъект();
			Об.ЗакрытоИОбновлено = ложь;
			Об.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
			Об.Записать();
		КонецЕСли;
	иначеЕсли ТипЗнч(Ссылка) = Тип("Массив") Тогда
		Для Каждого СтрСсылка из Ссылка Цикл
			Если СтрСсылка.ЗакрытоИОбновлено Тогда
				Об = СтрСсылка.ПолучитьОбъект();
				Об.ЗакрытоИОбновлено = ложь;
				Об.ДополнительныеСвойства.Вставить("ЗаполнениеРасходниковВЗаданиях");
				Об.Записать();
			КонецЕСли;
		КонецЦикла;
	КонецеСли;
КонецПроцедуры

//+++АК KIRN 2018.07.05 ИП-00019172
&НаСервере
Процедура ДобавитьЗаданиеВРО(Ссылка) Экспорт
	Обработки.ЗаполнитьРасходникиПоЗаданиямНаРазборку.ЗаполнитьРасходники(Новый Структура("ДатаРаспределения, СписокЗаданий",?(ТипЗнч(Ссылка)=Тип("ДокументСсылка.ЗаданиеНаРазборку"),Ссылка.Дата, Ссылка[0].Дата),Ссылка));
КонецПРоцедуры

#КонецОбласти

#Область СортировкаСтрокТоваров

//+++АК LATV 2018.12.14 ИП-00020711
// Проверка, правильное или нет упорядочивание в заданиях на разборку
//
// Параметры
//  МассивСсылок  - Массив, ДокументСсылка.ЗаданиеНаРазборку - Ссылки на документы ЗаданиеНаРазборку,
//                 которые необходимо проверить
//
// Возвращаемое значение:
//   Массив   - тип элементов ДокументСсылка.ЗаданиеНаРазборку. Массив ссылок на документы ЗаданиеНаРазборку,
//                 в которых товары упорядочены не верно
//
Функция ДокументыБезУпорядочиванияТоваров(МассивСсылок)

	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеНаРазборкуТовары.Ссылка КАК Задание,
		|	ЗаданиеНаРазборкуТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ втТорговыеТочки
		|ИЗ
		|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|ГДЕ
		|	ЗаданиеНаРазборкуТовары.Ссылка В(&МассивСсылок)
		|	И ЗаданиеНаРазборкуТовары.Ссылка.Склад.УпорядочитьТорговыеТочкиПоМаршрутам
		|	И ЗаданиеНаРазборкуТовары.Ссылка.Комментарий <> ""#Загрузить распределение""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТорговыеТочки.СтруктурнаяЕдиница,
		|	МАКСИМУМ(ЕСТЬNULL(МаршрутыТорговыеТочки.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Маршрут
		|ПОМЕСТИТЬ втМаршруты
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО втТорговыеТочки.СтруктурнаяЕдиница = МаршрутыТорговыеТочки.СтруктурнаяЕдиница
		|
		|СГРУППИРОВАТЬ ПО
		|	втТорговыеТочки.СтруктурнаяЕдиница
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМаршруты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втМаршруты.Маршрут,
		|	ВЫБОР
		|		КОГДА НЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ЕСТЬ NULL
		|				И НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|						ТОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|					ИНАЧЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|					ТОГДА втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|				ИНАЧЕ втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяВыходаВРейсДата,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.Номер, втМаршруты.Маршрут.Наименование) КАК МаршрутНаименование,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.НомерПоВремениВыезда, втМаршруты.Маршрут.НомерПоВремениВыезда) КАК МаршрутНомерПоВремениВыезда
		|ПОМЕСТИТЬ втДанныеМаршрутов
		|ИЗ
		|	втМаршруты КАК втМаршруты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераМаршрутов.СрезПоследних(&Период, ) КАК НомераМаршрутовСрезПоследних
		|		ПО втМаршруты.Маршрут = НомераМаршрутовСрезПоследних.Маршрут
		|ГДЕ
		|	втМаршруты.Маршрут <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТорговыеТочки.Задание КАК Задание,
		|	втТорговыеТочки.НомерСтроки КАК НомерСтроки,
		|	втТорговыеТочки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втТорговыеТочки.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
		|	втДанныеМаршрутов.Маршрут КАК Маршрут,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втДанныеМаршрутов.Маршрут.Наименование, ""0"") = ""0""
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
		|		ИНАЧЕ втДанныеМаршрутов.ВремяВыходаВРейсДата
		|	КОНЕЦ КАК ВремяВыходаВРейс,
		|	ЕСТЬNULL(втДанныеМаршрутов.ВремяВыходаВРейсДата, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ВремяВыходаВРейсДата,
		|	ЕСТЬNULL(втДанныеМаршрутов.МаршрутНомерПоВремениВыезда, 999) КАК МаршрутНомерПоВремениВыезда,
		|	ЕСТЬNULL(втДанныеМаршрутов.МаршрутНаименование, """") КАК МаршрутНаименование
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеМаршрутов КАК втДанныеМаршрутов
		|		ПО втТорговыеТочки.СтруктурнаяЕдиница = втДанныеМаршрутов.СтруктурнаяЕдиница
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяВыходаВРейс,
		|	ВремяВыходаВРейсДата,
		|	МаршрутНомерПоВремениВыезда,
		|	МаршрутНаименование,
		|	Маршрут,
		|	НомерТочки,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Задание");
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	Запрос.УстановитьПараметр("Период",			ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Дата")[0]);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаЗаданий = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаданий.Следующий() Цикл
		
		НомерПоПорядку = 0;
		
		Выборка = ВыборкаЗаданий.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерПоПорядку = НомерПоПорядку + 1;
			Если Выборка.НомерСтроки <> НомерПоПорядку Тогда
				Результат.Добавить(ВыборкаЗаданий.Задание);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

//+++АК LATV 2018.12.13 ИП-00020711
// Упорядочивает строки товаров в документе ЗаданиеНаРазборку
//
// Параметры
//  ЗаданиеНаРазборкуОбъект  - ДокументОбъект.ЗаданиеНаРазборку - Документ,
//                 в котором необходимо упорядочить табличную часть Товары
Процедура УпорядочитьСтрокиТоваров(ЗаданиеНаРазборкуОбъект) Экспорт

	УпорядочитьТорговыеТочкиПоМаршрутам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаРазборкуОбъект.Склад, "УпорядочитьТорговыеТочкиПоМаршрутам");
	Если УпорядочитьТорговыеТочкиПоМаршрутам <> Истина Тогда
		// По-старому
		Товары = ЗаданиеНаРазборкуОбъект.Товары.Выгрузить();
		Товары.Колонки.Добавить("НомерТочки");
		Для Каждого СтрТЗ из Товары Цикл
			СтрТЗ.НомерТочки = СтрТЗ.СтруктурнаяЕдиница.НомерТочки;
		КонецЦикла;
		Товары.Сортировать("НомерТочки");
		ЗаданиеНаРазборкуОбъект.Товары.Загрузить(Товары);
		
		Возврат;
	КонецЕсли;
	
	Товары = ЗаданиеНаРазборкуОбъект.Товары.Выгрузить();
	
	СтруктурныеЕдиницы = Товары.ВыгрузитьКолонку("СтруктурнаяЕдиница");
	СтруктурныеЕдиницыПоПорядку = УпорядочитьСтруктурныеЕдиницы(СтруктурныеЕдиницы, ЗаданиеНаРазборкуОбъект.Дата);
	
	Товары.Колонки.Добавить("НомерПоПорядку");
	
	НомерПоПорядку = 0;
	
	Для Каждого СтруктурнаяЕдиница Из СтруктурныеЕдиницыПоПорядку Цикл
		
		Отбор = Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		ТекущиеСтроки = Товары.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока Из ТекущиеСтроки Цикл
			НомерПоПорядку = НомерПоПорядку + 1;
			ТекСтрока.НомерПоПорядку = НомерПоПорядку;
		КонецЦикла;
		
	КонецЦикла;
	
	Товары.Сортировать("НомерПоПорядку");
	ЗаданиеНаРазборкуОбъект.Товары.Загрузить(Товары);

КонецПроцедуры

//+++АК LATV 2018.12.13 ИП-00020711
// Упорядочивает структурные единицы по возрастанию маршрута, который с ними связан
//
// Параметры
//  СтруктурныеЕдиницы  - Массив, СправочникСсылка.СтруктурныеЕдиницы - Структурные единицы,
//                 которые необходимо упорядочить 
//
//   Массив   - тип элементов СправочникСсылка.СтруктурныеЕдиницы. Массив ссылок на справочник СтруктурныеЕдиницы,
//                 упорядоченые верно
//
Функция УпорядочитьСтруктурныеЕдиницы(СтруктурныеЕдиницы, Период)

	// Сортировка скопирована из обработки ОтчетПоМаршрутам
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ втТорговыеТочки
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТорговыеТочки.СтруктурнаяЕдиница,
		|	МАКСИМУМ(ЕСТЬNULL(МаршрутыТорговыеТочки.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Маршрут
		|ПОМЕСТИТЬ втМаршруты
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
		|		ПО втТорговыеТочки.СтруктурнаяЕдиница = МаршрутыТорговыеТочки.СтруктурнаяЕдиница
		|
		|СГРУППИРОВАТЬ ПО
		|	втТорговыеТочки.СтруктурнаяЕдиница
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМаршруты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втМаршруты.Маршрут,
		|	ВЫБОР
		|		КОГДА НЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ЕСТЬ NULL
		|				И НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|						ТОГДА НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|					ИНАЧЕ НомераМаршрутовСрезПоследних.ПланируемоеВремяВыездаПоМаршруту
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
		|					ТОГДА втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
		|				ИНАЧЕ втМаршруты.Маршрут.ПланируемоеВремяВыездаПоМаршруту
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяВыходаВРейсДата,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.Номер, втМаршруты.Маршрут.Наименование) КАК МаршрутНаименование,
		|	ЕСТЬNULL(НомераМаршрутовСрезПоследних.НомерПоВремениВыезда, втМаршруты.Маршрут.НомерПоВремениВыезда) КАК МаршрутНомерПоВремениВыезда
		|ПОМЕСТИТЬ втДанныеМаршрутов
		|ИЗ
		|	втМаршруты КАК втМаршруты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераМаршрутов.СрезПоследних(&Период, ) КАК НомераМаршрутовСрезПоследних
		|		ПО втМаршруты.Маршрут = НомераМаршрутовСрезПоследних.Маршрут
		|ГДЕ
		|	втМаршруты.Маршрут <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТорговыеТочки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	втТорговыеТочки.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
		|	втДанныеМаршрутов.Маршрут КАК Маршрут,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втДанныеМаршрутов.Маршрут.Наименование, ""0"") = ""0""
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
		|		ИНАЧЕ втДанныеМаршрутов.ВремяВыходаВРейсДата
		|	КОНЕЦ КАК ВремяВыходаВРейс,
		|	ЕСТЬNULL(втДанныеМаршрутов.ВремяВыходаВРейсДата, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ВремяВыходаВРейсДата,
		|	ЕСТЬNULL(втДанныеМаршрутов.МаршрутНомерПоВремениВыезда, 999) КАК МаршрутНомерПоВремениВыезда,
		|	ЕСТЬNULL(втДанныеМаршрутов.МаршрутНаименование, """") КАК МаршрутНаименование
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеМаршрутов КАК втДанныеМаршрутов
		|		ПО втТорговыеТочки.СтруктурнаяЕдиница = втДанныеМаршрутов.СтруктурнаяЕдиница
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяВыходаВРейс,
		|	ВремяВыходаВРейсДата,
		|	МаршрутНомерПоВремениВыезда,
		|	МаршрутНаименование,
		|	Маршрут,
		|	НомерТочки");
	
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("Период",				Период);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница");
	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.12.14 ИП-00020711
Процедура ЗаполнитьПечатнуюФорму_ЗаданиеНаРазборку(ТабДок, МассивСсылок)

	// Данные для печати
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаРазборку.Ссылка,
		|	ЗаданиеНаРазборку.ВерсияДанных,
		|	ЗаданиеНаРазборку.ПометкаУдаления,
		|	ЗаданиеНаРазборку.Номер,
		|	ЗаданиеНаРазборку.Дата,
		|	ЗаданиеНаРазборку.Проведен,
		|	ЗаданиеНаРазборку.Склад,
		|	ЗаданиеНаРазборку.Склад.Владелец,
		|	ЗаданиеНаРазборку.Подготовлен,
		|	ЗаданиеНаРазборку.Закрыто,
		|	ЗаданиеНаРазборку.Автор,
		|	ЗаданиеНаРазборку.Комментарий,
		|	ЗаданиеНаРазборку.Ответственный,
		|	ЗаданиеНаРазборку.Номенклатура,
		|	ЗаданиеНаРазборку.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ЗаданиеНаРазборку.Характеристика,
		|	ЗаданиеНаРазборку.ДанныеСборкиНаМобильномУстройстве,
		|	ЗаданиеНаРазборку.Сборщик,
		|	ЗаданиеНаРазборку.Представление,
		|	ЗаданиеНаРазборку.МоментВремени
		|ИЗ
		|	Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
		|ГДЕ
		|	ЗаданиеНаРазборку.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	ТЗШапка = Запрос.Выполнить().Выгрузить();
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаРазборкуТовары.Ссылка,
		|	МИНИМУМ(ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница.НомерТочки) КАК МинимальныйНомерТочки
		|ПОМЕСТИТЬ втУпорядочиваниеДокументов
		|ИЗ
		|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|ГДЕ
		|	ЗаданиеНаРазборкуТовары.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаРазборкуТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаРазборкуТовары.Ссылка КАК Ссылка,
		|	ЗаданиеНаРазборкуТовары.НомерСтроки,
		|	ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница,
		|	ПРЕДСТАВЛЕНИЕ(ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ЗаданиеНаРазборкуТовары.ДатаПроизводства,
		|	ЗаданиеНаРазборкуТовары.Количество,
		|	ЗаданиеНаРазборкуТовары.КоличествоКоробок,
		|	ЗаданиеНаРазборкуТовары.Собран,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаРазборкуТовары.Ссылка.Склад.УпорядочитьТорговыеТочкиПоМаршрутам
		|			ТОГДА ЗаданиеНаРазборкуТовары.НомерСтроки
		|		ИНАЧЕ ЗаданиеНаРазборкуТовары.СтруктурнаяЕдиница.НомерТочки
		|	КОНЕЦ КАК ПорядокСтрок
		|ИЗ
		|	Документ.ЗаданиеНаРазборку.Товары КАК ЗаданиеНаРазборкуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУпорядочиваниеДокументов КАК втУпорядочиваниеДокументов
		|		ПО ЗаданиеНаРазборкуТовары.Ссылка = втУпорядочиваниеДокументов.Ссылка
		|ГДЕ
		|	ЗаданиеНаРазборкуТовары.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	втУпорядочиваниеДокументов.МинимальныйНомерТочки,
		|	ПорядокСтрок
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Северный = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243", Истина);
	
	// Заполнение
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.ИмяПараметровПечати	= "АКЗаданиеРазборка";
	
	Макет = Документы.ЗаданиеНаРазборку.ПолучитьМакет("Разборка");
	
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад		= Макет.ПолучитьОбласть("Склад");
	ОбластьВремяПечати	= Макет.ПолучитьОбласть("ВремяПечати");
	
	ЭтоПервыйДокумент = Истина;
	Пока ВыборкаДок.Следующий() Цикл
		
		Если Не ЭтоПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Данные документа
		Выборка = ТЗШапка.НайтиСтроки(Новый Структура("Ссылка", ВыборкаДок.Ссылка))[0];
		Если Выборка.СкладВладелец = Северный Тогда
			ОбластьШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицыСеверный");
			ОбластьСтрока		= Макет.ПолучитьОбласть("СтрокаСеверный");
			ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалСеверный");
		Иначе
			ОбластьШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		
		// Подсчет количества
		ВыборкаНоменклатура = ВыборкаДок.Выбрать();
		КолКороб	= 0;
		Кол			= 0;
		Пока ВыборкаНоменклатура.Следующий() Цикл
			КолКороб	= КолКороб + ВыборкаНоменклатура.КоличествоКоробок;
			Кол			= Кол + ВыборкаНоменклатура.Количество;
		КонецЦикла;
		ВыборкаНоменклатура.Сбросить();
		
		// Заполнение
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок, Выборка.Ссылка);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		ОбластьСклад.Параметры.Коробок=КолКороб;
		ТабДок.Вывести(ОбластьСклад, ВыборкаДок.Уровень());
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			
			Если Выборка.СкладВладелец = Северный Тогда
				СтруктурнаяЕдиницаСтрокой = ВыборкаНоменклатура.СтруктурнаяЕдиницаПредставление;
				ПозицияПодчеркивания = Найти(СтруктурнаяЕдиницаСтрокой, "_");
				ОбластьСтрока.Параметры.НомерСтруктурнойЕдиницы			= Лев(СтруктурнаяЕдиницаСтрокой, ПозицияПодчеркивания - 1);
				ОбластьСтрока.Параметры.НаименованиеСтруктурнойЕдиницы	= Сред(СтруктурнаяЕдиницаСтрокой, ПозицияПодчеркивания + 1);
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьСтрока, ВыборкаНоменклатура.Уровень());
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Количество			= Кол;
		ОбластьПодвал.Параметры.КоличествоКоробок	= КолКороб;
		ТабДок.Вывести(ОбластьПодвал);
		
		ТабДок.Вывести(ОбластьВремяПечати);
		
		ЭтоПервыйДокумент = Ложь;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.10.03 ИП-00020009
Процедура ОбновитьДокументыИСформироватьРасходныеОрдера(МассивСсылок, Параметры)

	Если Параметры.Свойство("УстановитьПризнакНапечатан") Тогда
		
		СформироватьРасходныеОрдера = Ложь;
		ДатаРаспределения			= НачалоДня(ТекущаяДата()) + 24*60*60;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаданиеНаРазборку.Дата,
			|	ЗаданиеНаРазборку.Ссылка
			|ИЗ
			|	Документ.ЗаданиеНаРазборку КАК ЗаданиеНаРазборку
			|ГДЕ
			|	ЗаданиеНаРазборку.Ссылка В(&Ссылка)
			|	И НЕ ЗаданиеНаРазборку.Напечатан";
		
		Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбДок = Выборка.Ссылка.ПолучитьОбъект();
			ОбДок.Напечатан = Истина;
			ОбДок.Записать();
			
			Если НачалоДня(Выборка.Дата) = ДатаРаспределения Тогда
				СформироватьРасходныеОрдера = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Параметры.Свойство("СформироватьРасходныеОрдера")
		   И СформироватьРасходныеОрдера Тогда
			
			ПараметрыФормирования = Новый Структура;
			ПараметрыФормирования.Вставить("ДатаРаспределения", ДатаРаспределения);
			ПараметрыФормирования.Вставить("СписокЗаданий",		МассивСсылок);
			Обработки.ЗаполнитьРасходникиПоЗаданиямНаРазборку.ЗаполнитьРасходники(ПараметрыФормирования);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
