
Функция ПолучитьТекстыАдресов(МассивОрдеров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	|			ТОГДА РасходныйОрдерСклад.Получатель.Адрес
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.Склады
	|					ТОГДА РасходныйОрдерСклад.Получатель.Владелец.Адрес
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК Адрес
	|ПОМЕСТИТЬ ВсеАдреса
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивОрдеров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерСклад.Склад.Владелец.Адрес
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.Ссылка В(&МассивОрдеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеАдреса.Адрес
	|ИЗ
	|	ВсеАдреса КАК ВсеАдреса
	|ГДЕ
	|	НЕ ВсеАдреса.Адрес = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	АдресаВыгрузки = "";
	Пока Выборка.Следующий() Цикл
		АдресаВыгрузки = АдресаВыгрузки + ?(АдресаВыгрузки = "", "", "; ") + Выборка.Адрес;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерСклад.Склад.Владелец.Адрес КАК Адрес
	|ПОМЕСТИТЬ ВсеАдреса
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивОрдеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеАдреса.Адрес
	|ИЗ
	|	ВсеАдреса КАК ВсеАдреса
	|ГДЕ
	|	НЕ ВсеАдреса.Адрес = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	АдресаПогрузки = "";
	Пока Выборка.Следующий() Цикл
		АдресаПогрузки = АдресаПогрузки + ?(АдресаПогрузки = "", "", "; ") + Выборка.Адрес;
	КонецЦикла;
	
	Возврат Новый Структура("АдресаПогрузки, АдресаВыгрузки", АдресаПогрузки, АдресаВыгрузки);
	
КонецФункции

Функция ПечатьТТН(Ссылка, СПодписью = Ложь) Экспорт 
	
	ТабДокумент	= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_АктПеревозчика_ТТН";
	
	ЭтоОтгрузкаВТТ = (Ссылка.ВидОперации = Перечисления.ВидыОперацийАктПеревозчика.ОтгрузкаВТорговуюТочку);
	
	// юр.адрес перевозчика
	ЮрАдресПеревозчика = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Перевозчик"	, Ссылка.Перевозчик);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Перевозчик
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЮрАдресПеревозчика = СокрЛП(Выборка.Представление);
	КонецЕсли;
	
	// 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Если ЭтоОтгрузкаВТТ Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель, РасходныеОрдера.Водитель) КАК Водитель,
		|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров,
		|	РасходныйОрдерСкладТовары.Ссылка КАК Ордер,
		|	ЕСТЬNULL(РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес, 0) * РасходныйОрдерСкладТовары.Количество КАК Вес
		|ИЗ
		|	Документ.АктПеревозчика.РасходныеОрдера КАК РасходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|		ПО (РасходныйОрдерСкладТовары.Ссылка = РасходныеОрдера.РасходныйОрдер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО (МаршрутныйЛистРасходныеОрдера.Документ = РасходныеОрдера.РасходныйОрдер)
		|			И (МаршрутныйЛистРасходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	РасходныеОрдера.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасходныеОрдера.РасходныйОрдер.Дата, ДЕНЬ) КАК Дата,
		|	РасходныеОрдера.НомерТТН КАК НомерТТН,
		//|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут, ЗНАЧЕНИЕ(Справочник.Маршруты.ПустаяСсылка)) КАК Маршрут,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка, ЗНАЧЕНИЕ(Документ.МаршрутныйЛист.ПустаяСсылка)) КАК Маршрут,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель, РасходныеОрдера.Водитель) КАК Водитель,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Автомобиль, РасходныеОрдера.Автомобиль) КАК Автомобиль,
		|	РасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер
		|ИЗ
		|	Документ.АктПеревозчика.РасходныеОрдера КАК РасходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО (МаршрутныйЛистРасходныеОрдера.Документ = РасходныеОрдера.РасходныйОрдер)
		|			И (МаршрутныйЛистРасходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	РасходныеОрдера.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасходныеОрдера.НомерТТН
		|ИТОГИ ПО
		|	Дата,
		|	НомерТТН,
		|	Водитель";
	Иначе //Если Ссылка.ВидОперации = Перечисления.ВидыОперацийАктПеревозчика.ДоставкаНаСклад Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка.Водитель, ПриходныеОрдера.Водитель) КАК Водитель,
		|	ПриходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров,
		|	ПриходныйОрдерСкладТовары.Ссылка КАК Ордер,
		|	ЕСТЬNULL(ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес, 0) * ПриходныйОрдерСкладТовары.Количество КАК Вес
		|ИЗ
		|	Документ.АктПеревозчика.ПриходныеОрдера КАК ПриходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|		ПО (ПриходныйОрдерСкладТовары.Ссылка = ПриходныеОрдера.ПриходныйОрдер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
		|		ПО (МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер = ПриходныеОрдера.ПриходныйОрдер)
		|			И (МаршрутныйЛистПриходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	ПриходныеОрдера.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПриходныеОрдера.ПриходныйОрдер.ДатаВремяЗаездаМашины, ДЕНЬ) КАК Дата,
		|	ПриходныеОрдера.НомерТТН КАК НомерТТН,
		//|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка.МаршрутТранспортныхКомпаний, ЗНАЧЕНИЕ(Справочник.МаршрутыТранспортныхКомпаний.ПустаяСсылка)) КАК Маршрут,
		|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка, ЗНАЧЕНИЕ(Документ.МаршрутныйЛист.ПустаяСсылка)) КАК Маршрут,
		|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка.Водитель, ПриходныеОрдера.Водитель) КАК Водитель,
		|	ЕСТЬNULL(МаршрутныйЛистПриходныеОрдера.Ссылка.Автомобиль, ПриходныеОрдера.Автомобиль) КАК Автомобиль,
		|	ПриходныеОрдера.ПриходныйОрдер КАК РасходныйОрдер,
		|	ПриходныеОрдера.ПриходныйОрдер.Поставщик КАК Поставщик
		|ИЗ
		|	Документ.АктПеревозчика.ПриходныеОрдера КАК ПриходныеОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
		|		ПО (МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер = ПриходныеОрдера.ПриходныйОрдер)
		|			И (МаршрутныйЛистПриходныеОрдера.Ссылка.Проведен)
		|ГДЕ
		|	ПриходныеОрдера.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходныеОрдера.НомерТТН
		|ИТОГИ ПО
		|	Дата,
		|	НомерТТН,
		|	Водитель";
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаГруппТоваров = РезультатыЗапроса[0].Выгрузить();
	ТаблицаВесов 		= РезультатыЗапроса[0].Выгрузить();
	ТаблицаГруппТоваров.Свернуть("Водитель, ГруппаТоваров");
	ТаблицаВесов.Свернуть("Ордер", "Вес");
	
	//
	Макет = Документы.АктПеревозчика.ПолучитьМакет("ТТН");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СтруктураОтбора 	= Новый Структура("Водитель");
	СтруктураОтбораВес 	= Новый Структура("Ордер");
	
	ЭтоЛугДаПоле 		= Ложь;
	ЭтоВкусВилл 		= Ложь;
	ПодписьДиректора 	= Неопределено;
	//+++ak golv
	//Если СПодписью Тогда
	//	ЭтоЛугДаПоле 	= (Ссылка.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031"));
	//	Если ЭтоЛугДаПоле Тогда
	//		//ПодписьДиректора = Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович").Подпись.Получить();
	//		ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович")).Получить();
	//	КонецЕсли;
	//	ЭтоВкусВилл 	= (Ссылка.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
	//	Если ЭтоВкусВилл Тогда
	//		//ПодписьДиректора = Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович").Подпись.Получить();
	//		ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович")).Получить();
	//	КонецЕсли;
	//КонецЕсли;
	//---ak golv
	ТекИсполнитель = ?(Ссылка.Перевозчик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, СокрЛП(Ссылка.Перевозчик.ГенеральныйДиректор), СокрЛП(Ссылка.Перевозчик.Наименование));
	
	ВыборкаПоДатам = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата");
	Пока ВыборкаПоДатам.Следующий() Цикл
		
		мДатаТТН 		= ВыборкаПоДатам.Дата;
		
		Если ЭтоОтгрузкаВТТ Тогда
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.Организация, мДатаТТН);
			мТекстГрузоотправителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
														СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
		КонецЕсли;
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.ОрганизацияПолучатель, мДатаТТН);
		мТекстГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
																		СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
		
		ДатаНаПечать 	= Формат(мДатаТТН, "ДФ=""дд.ММ.гг""");
		ВыборкаПоНомерамТТН = ВыборкаПоДатам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерТТН");
		Пока ВыборкаПоНомерамТТН.Следующий() Цикл
			ТекНомерТТН = ВыборкаПоНомерамТТН.НомерТТН;
			ВыборкаПоВодителям = ВыборкаПоНомерамТТН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Водитель");
			Пока ВыборкаПоВодителям.Следующий() Цикл
				//+++ak golv
				Если СПодписью Тогда
					ЭтоЛугДаПоле 	= (Ссылка.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031"));
					Если ЭтоЛугДаПоле Тогда
						//ПодписьДиректора = Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович").Подпись.Получить();
						ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Кривенко Андрей Александрович")).Получить();
					КонецЕсли;
					ЭтоВкусВилл 	= (Ссылка.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810"));
					Если ЭтоВкусВилл Тогда
						//ПодписьДиректора = Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович").Подпись.Получить();
						ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Справочники.ФизическиеЛица.НайтиПоНаименованию("Фарафонов Алексей Владимирович")).Получить();
					КонецЕсли;
				КонецЕсли;		
				//---ak golv
				ТекВодитель = ВыборкаПоВодителям.Водитель;
				
				// Страница 1
				ОбластьМакета.Параметры.ДатаТТН 	= ДатаНаПечать;
				ОбластьМакета.Параметры.НомерТТН 	= Формат(ТекНомерТТН, "ЧГ=");
				
				Если НЕ ЭтоОтгрузкаВТТ Тогда
					СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоВодителям.Поставщик, мДатаТТН);
					мТекстГрузоотправителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
																		СведенияОбОрганизации, "НаименованиеСокращенное,ЮридическийАдрес,Телефоны");
				КонецЕсли;
				ОбластьМакета.Параметры.Грузополучатель 	= мТекстГрузополучателя;
				
				СтруктураОтбора.Водитель = ТекВодитель;
				СтрокиТаблицыГрупп = ТаблицаГруппТоваров.НайтиСтроки(СтруктураОтбора);
				СтрокаГрупп = "";
				обВес = 0;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицыГрупп Цикл
					СтрокаГрупп = СтрокаГрупп + "; " + СокрЛП(СтрокаТаблицы.ГруппаТоваров);
					//обВес = обВес + СтрокаТаблицы.Вес;
				КонецЦикла;
				//Если НЕ СтрокаГрупп = "" Тогда
				//	СтрокаГрупп = Сред(СтрокаГрупп, 3);
				//КонецЕсли;
				//ОбластьМакета.Параметры.НаименованиеГруза = СтрокаГрупп;
				
				ТекстОрдеров 	= "";
				ТекАвтомобиль 		= "";
				ТекНомераАвтомобиля = "";
				ТекПоставщик 	= "";
				ТекСтоимость 	= 0;
				ТекМаршрут = Неопределено;
				Выборка = ВыборкаПоВодителям.Выбрать();
				МассивОрдеров = новый Массив;
				Пока Выборка.Следующий() Цикл
					ТекНомераАвтомобиля = СокрЛП(Выборка.Автомобиль.Наименование); // предположение, что 1 водитель ездит на одной машине в течение дня
					ТекАвтомобиль 		= СокрЛП(Выборка.Автомобиль.Марка) +
											?(Выборка.Автомобиль.Тоннаж > 0, ", " + Формат(Окр(Выборка.Автомобиль.Тоннаж, 1), "ЧГ=") + "т", "");
					ТекМаршрут 			= Выборка.Маршрут;
					Если НЕ ЭтоОтгрузкаВТТ Тогда
						ТекПоставщик = Выборка.Поставщик; 	// предположение, что 1 водитель ездит на одной машине к одному поставщику
					КонецЕсли;
					ТекстОрдеров = ТекстОрдеров + "; " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.РасходныйОрдер) + " от " + ДатаНаПечать;
					МассивОрдеров.Добавить(Выборка.РасходныйОрдер);
					СтруктураОтбораВес.Ордер = Выборка.РасходныйОрдер;
					СтрокиТаблицыВес = ТаблицаВесов.НайтиСтроки(СтруктураОтбораВес);
					Если СтрокиТаблицыВес.Количество() > 0 Тогда
						обВес = обВес + СтрокиТаблицыВес[0].Вес;
					КонецЕсли;
					ТекСтоимость = ТекСтоимость + Выборка.Сумма;
				КонецЦикла;
				
				Если НЕ ТекстОрдеров = "" Тогда
					ТекстОрдеров = Сред(ТекстОрдеров, 3);
				КонецЕсли;
				
				Адреса = ПолучитьТекстыАдресов(МассивОрдеров);
				ОбластьМакета.Параметры.Заполнить(Адреса);
				ОбластьМакета.Параметры.НаименованиеГруза = ?(ЭтоОтгрузкаВТТ, "Согласно расходных ордеров: ", "Согласно приходных ордеров: ") + ТекстОрдеров + ".";
				ОбластьМакета.Параметры.ПереченьДокументов = ?(ЭтоОтгрузкаВТТ, "Расходные ордера: ", "Приходные ордера: ") + ТекстОрдеров + ".";
				
				ОбластьМакета.Параметры.Дата_ПриемГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 09:00";
				ОбластьМакета.Параметры.ДатаПрибытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 08:50";
				ОбластьМакета.Параметры.ДатаУбытия_ПриемГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:20";
				ОбластьМакета.Параметры.Дата_СдачаГруза			= Формат(мДатаТТН, "ДЛФ=Д") + " 10:00";
				ОбластьМакета.Параметры.ДатаПрибытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 09:50";
				ОбластьМакета.Параметры.ДатаУбытия_СдачаГруза	= Формат(мДатаТТН, "ДЛФ=Д") + " 10:20";
				ОбластьМакета.Параметры.ДатаПринятияКИсполнению	= Формат(мДатаТТН - 2 * 86400, "ДЛФ=Д");
				ОбластьМакета.Параметры.МассаГруза				= Формат(обВес, "ЧГ=") + " кг";
				ОбластьМакета.Параметры.Исполнитель				= ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекИсполнитель);
				
				Если НЕ ТекПоставщик = "" Тогда // доставка на склад: поставщик = Грузоотправитель
					СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекПоставщик, мДатаТТН);
					мТекстГрузоотправителя = ?(ЗначениеЗаполнено(СведенияОбОрганизации.НаименованиеДляПечатныхФорм),
												СведенияОбОрганизации.НаименованиеДляПечатныхФорм + ", ", "") +
											ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны");
				КонецЕсли;
				ОбластьМакета.Параметры.Грузоотправитель	= мТекстГрузоотправителя;
				
				// Страница 2
				ИмяВодителя = СокрЛП(ТекВодитель.Наименование);
				ОбластьМакета.Параметры.Перевозчик 		= СокрЛП(Ссылка.Перевозчик.Наименование) + ?(ЮрАдресПеревозчика = "", "", "; " + ЮрАдресПеревозчика);
				ОбластьМакета.Параметры.Водитель 		= ИмяВодителя;
				//+++AK VERN 2016.07.06 12796
				ОбластьМакета.Параметры.Автомобиль 		= ТекАвтомобиль;
				//---AK VERN 2016.07.06 12796
				ОбластьМакета.Параметры.ГосНомерАвтомобиля = ТекНомераАвтомобиля;
				
				//ОбластьМакета.Параметры.Стоимость 		= ТекСтоимость +
				//	?((НЕ ТекМаршрут = Неопределено)
				//		И ТекМаршрут.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,
				//	УчетНДС.РассчитатьСуммуНДС(ТекСтоимость, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекМаршрут.СтавкаНДС)), 0);
				ТекСтавкаНДС = ?(НЕ ТекМаршрут = Неопределено, УчетНДС.ПолучитьСтавкуНДС(ТекМаршрут.СтавкаНДС), 0);
				ОбластьМакета.Параметры.Стоимость 		= Строка(ТекСтоимость +
					?((НЕ ТекМаршрут = Неопределено)
						И ТекМаршрут.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,
					УчетНДС.РассчитатьСуммуНДС(ТекСтоимость, Истина, Ложь, ТекСтавкаНДС), 0)) + 
					?((НЕ ТекМаршрут = Неопределено) И НЕ ТекСтавкаНДС = 0, ", в т.ч. НДС " + Строка(ТекСтавкаНДС) + "%", "");
				
				Если ЭтоОтгрузкаВТТ Тогда
					ОбластьМакета.Параметры.Руководитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СокрЛП(Ссылка.Организация.ГенеральныйДиректор));
				КонецЕсли;
				ОбластьМакета.Параметры.ДатаТТН 		= ДатаНаПечать;
				
				Если СПодписью
						И (ЭтоЛугДаПоле
							ИЛИ ЭтоВкусВилл)
						И ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
					//+++ak golv
					ОбластьМакета.Рисунки.Очистить();
					//---ak golv
					РисунокПодписи = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			    	РисунокПодписи.Расположить(ОбластьМакета.Область(105, 11, 107, 12));
					РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
			    	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
			    	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
			    	РисунокПодписи.Картинка 	= ПодписьДиректора;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции


Функция ПечатьРО_Товары(Ссылка, ТаблицаРО)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_АктПеревозчика_РасходныйОрдер_Товары";
	
	ДатаДляСреза = '00010101';
	Для Каждого СтрокаТаб Из ТаблицаРО Цикл
		ДатаДляСреза = Макс(ДатаДляСреза, СтрокаТаб.РасходныйОрдер.Дата);
	КонецЦикла;
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, КонецДня(ДатаДляСреза));
	Запрос.Параметры.Вставить("МассивРО"	, ТаблицаРО.ВыгрузитьКолонку("РасходныйОрдер"));//МассивРО);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерСклад.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	РасходныйОрдерСклад.ВерсияДанных,
	|	РасходныйОрдерСклад.ПометкаУдаления,
	|	РасходныйОрдерСклад.Номер,
	|	РасходныйОрдерСклад.Дата,
	|	РасходныйОрдерСклад.ДатаРаспределения,
	|	РасходныйОрдерСклад.Проведен,
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
	|	РасходныйОрдерСклад.Перевозчик,
	|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
	|	РасходныйОрдерСклад.Водитель,
	|	РасходныйОрдерСклад.Автор,
	|	РасходныйОрдерСклад.Товары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА РасходныйОрдерСклад.ПровереноОператором
	|				ТОГДА РасходныйОрдерСклад.Товары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Количество,
	|		КоличествоУРЗ,
	|		Номенклатура.Наименование КАК Наименование,
	|		Характеристика.Наименование,
	|		ДатаПроизводства КАК ДатаПрзв
	|	) КАК Товары,
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСклад.Расходники.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК Наименование,
	|		ЕдиницаИзмерения,
	|		Отгружено
	|	) КАК Расходники,
	|	РасходныйОрдерСклад.ЕстьРасходники,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	РасходныйОрдерСклад.Комментарий,
	|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивРО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Объект,
	|	КоличествоВКоробкеСрезПоследних.Количество КАК Значение,
	|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			&ДатаСреза,
	|			Характеристика В
	|				(ВЫБРАТЬ
	|					РасходныйОрдерСкладТовары.Характеристика
	|				ИЗ
	|					Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|				ГДЕ
	|					РасходныйОрдерСкладТовары.Ссылка В (&МассивРО))) КАК КоличествоВКоробкеСрезПоследних";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабСсылок 			= Результаты[0].Выгрузить();
	ТабХарактеристики 	= Результаты[1].Выгрузить();
	
	ОбластьМаршрут          = Макет.ПолучитьОбласть("Маршрут");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
	ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьШапкаТаблицыРМ 	= Макет.ПолучитьОбласть("ШапкаТаблицыРМ");
	ОбластьСтрокаРМ 		= Макет.ПолучитьОбласть("СтрокаРМ");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвалТаблицыРМ 	= Макет.ПолучитьОбласть("ПодвалТаблицыРМ");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 		= Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");

	мПеревозчик			= Ссылка.Перевозчик;
	мТекстПеревозчика 	= СокрЛП(мПеревозчик.Наименование);
	
	СтруктураОтбора = Новый Структура("Ссылка");
	
	Для Каждого СтрокаРасходныйОрдер Из ТаблицаРО Цикл
		
		СтруктураОтбора.Ссылка = СтрокаРасходныйОрдер.РасходныйОрдер;
		СтрокиТаблицы = ТабСсылок.НайтиСтроки(СтруктураОтбора);
		
		ВставлятьРазделительСтраниц = Ложь;
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьМаршрут.Параметры.Маршрут = СтрокаТаблицы.Маршрут;
			ТабДокумент.Вывести(ОбластьМаршрут);

			ОбластьЗаголовок.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьЗаголовок.Параметры.Дата = Формат(СтрокаТаблицы.Дата, "ДЛФ=DD");
			
			ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок, СтрокаТаблицы.Ссылка);
			
			ТабДокумент.Вывести(ОбластьЗаголовок);
			
			ОбластьСклад.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьСклад.Параметры.Перевозчик			 	= мПеревозчик;
			ОбластьСклад.Параметры.ПеревозчикНаименование 	= мТекстПеревозчика;
			ОбластьСклад.Параметры.ГосНомерАвтомобиля 		= СокрЛП(СтрокаРасходныйОрдер.Автомобиль.Наименование);

			ТабНоменклатура = СтрокаТаблицы.Товары.Скопировать();
			ТабНоменклатура.Колонки.Добавить("ПолученоТТ", Новый ОписаниеТипов("Число"));
			КоличествоВУпаковке = 0;
			ИтогКолУпак			= 0;
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Объект", СтрокаТаблицы.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				
				Если КоличествоВУпаковке > 0 Тогда
					ИтогКолУпак = ИтогКолУпак + Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
			КонецЦикла;
			ОбластьСклад.Параметры.Коробок = ИтогКолУпак;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОтгружаетсяИзЗоны)
					И СтрокаТаблицы.ОтгружаетсяИзЗоны <> СтрокаТаблицы.Склад Тогда
				ОбластьСклад.Параметры.Склад = СокрЛП(ОбластьСклад.Параметры.Склад) + " (через " + СокрЛП(СтрокаТаблицы.ОтгружаетсяИзЗоны) + ")";
			КонецЕсли;	
			ТабДокумент.Вывести(ОбластьСклад);//, Выборка.Уровень());

			ОбластьПолучатель.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьПолучатель.Параметры.Водитель 				= СтрокаРасходныйОрдер.Водитель;
			ОбластьПолучатель.Параметры.ВодительНаименование 	= СокрЛП(СтрокаРасходныйОрдер.Водитель.Наименование);
			ТабДокумент.Вывести(ОбластьПолучатель);//, Выборка.Уровень());
			
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
	
			//РасчитыватьПолученоТТ = ЗначениеЗаполнено(СтрокаТаблицы.Получатель)
			//							И ТипЗнч(СтрокаТаблицы.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			//							И ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Ложь;
			//Если РасчитыватьПолученоТТ Тогда
			//	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаРаспределения), СтрокаТаблицы.ДатаРаспределения, СтрокаТаблицы.Дата),
			//					?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаРаспределения), СтрокаТаблицы.ДатаРаспределения, СтрокаТаблицы.Дата),
			//					СтрокаТаблицы.Получатель);
			//												
			//	Для Каждого СтрокаТаб Из ТабНоменклатура Цикл
			//		СтрокаОстаток = ТабДанные.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
			//		Если НЕ СтрокаОстаток = Неопределено Тогда
			//			МинКолво = Мин(СтрокаОстаток.Поступило, СтрокаТаб.Количество);
			//			СтрокаОстаток.Поступило = СтрокаОстаток.Поступило - МинКолво;
			//		Иначе
			//			МинКолво = 0;
			//		КонецЕсли;
			//		СтрокаТаб.ПолученоТТ = МинКолво;
			//	КонецЦикла;
			//	
			//	Для Каждого СтрокаДанные Из ТабДанные Цикл
			//		Если СтрокаДанные.Поступило <= 0 Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		СтрокиТоваров = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
			//		Если СтрокиТоваров.Количество() > 0 Тогда
			//			 СтрокиТоваров[0].ПолученоТТ = СтрокиТоваров[0].ПолученоТТ + СтрокаДанные.Поступило;
			//		КонецЕсли;	
			//	КонецЦикла;
			//КонецЕсли;
			
			// Строка
			КолвоКор 	= 0;
			КолвоЕд 	= 0;
			КолвоУРЗ 	= 0;
			КолвоТТ 	= 0;
			ИтогКолУпак = 0;
			ТабНоменклатура.Сортировать("НомерСтроки");
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
				
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Объект", СтрокаТаблицы.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				Если КоличествоВУпаковке > 0 Тогда
					ОбластьСтрока.Параметры.КолУпакУРЗ 	= Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
					ОбластьСтрока.Параметры.КолУпак 	= Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				Иначе				
					ОбластьСтрока.Параметры.КолУпакУРЗ 	= "";
					ОбластьСтрока.Параметры.КолУпак 	= "";
				КонецЕсли;
				
				Если КоличествоВУпаковке > 0 Тогда
					КолвоКор 	= КолвоКор 		+ Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
					ИтогКолУпак = ИтогКолУпак	+ Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
				КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
				КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
				//СтрокаХарактеристика = ТабХарактеристики.Найти(ВыборкаНоменклатура.Характеристика, "Объект");
				//КоличествоВУпаковке = 0;
				//Если СтрокаХарактеристика <> Неопределено Тогда
				//	КоличествоВУпаковке = СтрокаХарактеристика.Значение;
				//КонецЕсли;	
				//Если КоличествоВУпаковке > 0 Тогда
				//	ОбластьСтрока.Параметры.КолУпакУРЗ = Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
				//Иначе				
				//	ОбластьСтрока.Параметры.КолУпакУРЗ = "";
				//КонецЕсли;

				//Если КоличествоВУпаковке > 0 Тогда
				//	КолвоКор = КолвоКор + Окр(ВыборкаНоменклатура.КоличествоУРЗ/КоличествоВУпаковке,1);
				//КонецЕсли;	
				//КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
				//КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
				//КолвоТТ 	= КолвоТТ 	+ ВыборкаНоменклатура.ПолученоТТ;

				ТабДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
			
			// Подвал
			ТабДокумент.Вывести(ОбластьПодвалТаблицы);
			ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
			ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
			ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
			ОбластьИтог.Параметры.ИтогКолУпак 	= ИтогКолУпак;
			//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
			ТабДокумент.Вывести(ОбластьИтог);
			
			Если СтрокаТаблицы.ЕстьРасходники Тогда
				ТабДокумент.Вывести(ОбластьШапкаТаблицыРМ);
				ВыборкаРасходники = СтрокаТаблицы.Расходники.Выбрать();
				
				Пока ВыборкаРасходники.Следующий() Цикл
					ОбластьСтрокаРМ.Параметры.Заполнить(ВыборкаРасходники);
					ТабДокумент.Вывести(ОбластьСтрокаРМ);
				КонецЦикла;
				ТабДокумент.Вывести(ОбластьПодвалТаблицыРМ);
			КонецЕсли;
			ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + СтрокаТаблицы.Автор;
			
			ТабДокумент.Вывести(ОбластьПодвал);

			ВставлятьРазделительСтраниц = Истина;
			ТабДокумент.Вывести(ОбластьВремяПечати);
			
			//
			//Паллета = Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер", Ссылка);
			//Если Не ЗначениеЗаполнено(Паллета) Тогда
			//	Блокировка=Новый БлокировкаДанных;
			//	Эл=Блокировка.Добавить();
			//	Эл.Область="Справочник.СоставПаллеты";
			//	Эл.Режим=РежимБлокировкиДанных.Исключительный;
			//	Блокировка.Заблокировать();
			//	ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
			//	ОбъектПаллеты.РасходныйОрдер=Ссылка;
			//	Попытка
			//		ОбъектПаллеты.Записать();
			//	Исключение
			//		Сообщить("Повторите попытку печати");
			//		Возврат Новый ТабличныйДокумент;
			//	КонецПопытки; 
			//КонецЕсли; 
			//Запрос = Новый Запрос;
			//Запрос.Текст = 
			//	"ВЫБРАТЬ
			//	|	СоставПаллеты.Ссылка
			//	|ИЗ
			//	|	Справочник.СоставПаллеты КАК СоставПаллеты
			//	|ГДЕ
			//	|	СоставПаллеты.РасходныйОрдер = &РасходныйОрдер
			//	|	И СоставПаллеты.ПометкаУдаления = ЛОЖЬ";

			//Запрос.УстановитьПараметр("РасходныйОрдер", Ссылка);

			//Результат = Запрос.Выполнить();

			//ВыборкаДетальныеЗаписи = Результат.Выбрать();
			//Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
			//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			//КонецЕсли;
			//ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
			//	
			//УчаствуетВМаршруте = "";
			//Запрос = Новый Запрос();
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут
			//|ИЗ
			//|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
			//|ГДЕ
			//|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
			//|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ";
			//Запрос.УстановитьПараметр("Документ", Ссылка);
			//ВыборкаМ = Запрос.Выполнить().Выбрать();
			//Если ВыборкаМ.Следующий() Тогда
			//	//УчаствуетВМаршруте = ВыборкаМ.Маршрут;
			//	УчаствуетВМаршруте = ВыборкаМ.Маршрут.Наименование+" "+ВыборкаМ.Маршрут.ПолноеНаименование;
			//КонецЕсли;	
			//		
			//Область = Макет.ПолучитьОбласть("Этикетка");
			//ОбластьСтр = Макет.ПолучитьОбласть("СтрокаПал");
			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//	Область.Параметры.ТорговаяТочка = Ссылка.Получатель;
			//	ШтрихКод = "850" + Прав("000000000000" + Формат(ВыборкаДетальныеЗаписи.Ссылка.ИД, "ЧГ=0"), 12);
			//	ТабДок1 = Новый ТабличныйДокумент();
			//	Область.Параметры.Паллета = "ИД "+ВыборкаДетальныеЗаписи.Ссылка.ИД+" "+Строка(ВыборкаДетальныеЗаписи.Ссылка.РасходныйОрдер);
			//	Область.Параметры.МаршЛист = УчаствуетВМаршруте;
			//	
			//	Рисунок 					= Область.Рисунки["ШтрихКодПал"];
			//	
			//	ПараметрыШК = Новый Структура();
			//	ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
			//	ПараметрыШК.Вставить("Высота", Рисунок.Высота);
			//	ПараметрыШК.Вставить("ТипКода", 4);
			//	ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
			//	ПараметрыШК.Вставить("РазмерШрифта", 10);
			//	ПараметрыШК.Вставить("Штрихкод", Штрихкод);
			//	Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
			//	Область.Параметры.ШК = ШтрихКод;
			//	Область.Параметры.Коробок=КолвоКор;
			//	ТабДок1.Вывести(Область);
			//	Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Состав Цикл
			//		ОбластьСтр.Параметры.Заполнить(Стр);
			//		ТабДок1.Вывести(ОбластьСтр);
			//	КонецЦикла; 
			//	Если ТабДок.ПроверитьВывод(ТабДок1) Тогда
			//		 ТабДок.Вывести(ТабДок1);
			//	Иначе
			//		 ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			//		 ТабДок.Вывести(ТабДок1);
			//	КонецЕсли; 
			//КонецЦикла;

		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРО_Оборудование(МассивРО)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_АктПеревозчика_РасходныйОрдер_Оборудование";
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Оборудование");
	
	Для Каждого ДокРасходныйОрдер Из МассивРО Цикл
		
		//Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Номер			= ДокРасходныйОрдер.Номер;
		Область.Параметры.Дата			= Формат(ДокРасходныйОрдер.Дата, "ДЛФ=DD");
		Область.Параметры.Склад			= ДокРасходныйОрдер.Склад;
		Область.Параметры.ВидОперации	= ДокРасходныйОрдер.ВидОперации;
		Область.Параметры.Получатель	= ДокРасходныйОрдер.Получатель;
		ТабДокумент.Вывести(Область);
		
		//Шапка
		Область	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(Область);
		
		//Тело
		Область = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТЧ Из ДокРасходныйОрдер.Оборудование Цикл
			ТекОборудование = СтрокаТЧ.Оборудование;
			Область.Параметры.НомерСтроки	= СтрокаТЧ.НомерСтроки;
			Область.Параметры.ОС			= ТекОборудование;
			Область.Параметры.ИнвНомер		= ТекОборудование.ИнвентарныйНомер;
			Область.Параметры.ЗавНомер		= ТекОборудование.ЗаводскойНомер;
			Область.Параметры.Количество	= 1;
			ТабДокумент.Вывести(Область);
		КонецЦикла;
		
		//Итог
		Область	= Макет.ПолучитьОбласть("Итог");
		Область.Параметры.ИтогоКоличество = ДокРасходныйОрдер.Оборудование.Количество();
		ТабДокумент.Вывести(Область);
		
		//Подвал
		Область	= Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
		
		//Время печати
		Область = Макет.ПолучитьОбласть("ВремяПечати");
		Область.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + ДокРасходныйОрдер.Автор;
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРасходныйОрдер_Товары(Ссылка) Экспорт
	
	ТЧРасходныеОрдера = Ссылка.РасходныеОрдера;
	
	СтрокаРеквизитов = "РасходныйОрдер, Автомобиль, Водитель";
	ТаблицаРО = ТЧРасходныеОрдера.ВыгрузитьКолонки(СтрокаРеквизитов);
	
	мОтгрузкаВТорговуюТочку = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	Для Каждого СтрокаТЧ Из ТЧРасходныеОрдера Цикл
		Если СтрокаТЧ.РасходныйОрдер.ВидОперации = мОтгрузкаВТорговуюТочку Тогда
			НоваяСтрока = ТаблицаРО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, СтрокаРеквизитов);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРО.Количество() > 0 Тогда
		Возврат ПечатьРО_Товары(Ссылка, ТаблицаРО);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьРасходныйОрдер_Оборудование(Ссылка) Экспорт
	
	ТЧРасходныеОрдера = Ссылка.РасходныеОрдера;
	
	МассивРО = Новый Массив;
	
	мПередачаОборудованияВТТТ = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку;
	Для Каждого СтрокаТЧ Из ТЧРасходныеОрдера Цикл
		Если СтрокаТЧ.РасходныйОрдер.ВидОперации = мПередачаОборудованияВТТТ Тогда
			МассивРО.Добавить(СтрокаТЧ.РасходныйОрдер);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРО.Количество() > 0 Тогда
		Возврат ПечатьРО_Оборудование(МассивРО);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПечатьАктаПеревозчика(Ссылка) Экспорт
	
	ТабДокумент	= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_АктПеревозчика_АктПеревозчика";
	
	//
	Макет = Документы.АктПеревозчика.ПолучитьМакет("АктПеревозчика");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ДатаНаПечать = Формат(КонецМесяца(Ссылка.ДатаОкончания), "ДЛФ=ДД");
	ПозицияПробела = Найти(ДатаНаПечать, " ");
	ОбластьМакета.Параметры.ДатаАкта 	= "«" + Лев(ДатаНаПечать, ПозицияПробела - 1) + "» " + Сред(ДатаНаПечать, ПозицияПробела + 1);
	
	СведенияОПеревозчике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.Перевозчик, Ссылка.ДатаОкончания);
	ТекстПеревозчик = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес");
	ОбластьМакета.Параметры.Перевозчик	= ТекстПеревозчик;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.ДатаОкончания);
	ТекстОрганизация = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес");
	ОбластьМакета.Параметры.Организация	= ТекстОрганизация;
	
	ОбластьМакета.Параметры.Директор 	= ?(НЕ Ссылка.Организация.Код = "000000006", "Кривенко А.А.", "Фарафонова А.В.");
	ОбластьМакета.Параметры.Период		= "с " + Формат(Ссылка.ДатаНачала, "ДЛФ=Д") + " по " + Формат(Ссылка.ДатаОкончания, "ДЛФ=Д");
	ОбластьМакета.Параметры.НомерДоговора	= СокрЛП(Ссылка.Договор.Номер);
	ОбластьМакета.Параметры.ДатаДоговора	= Формат(Ссылка.Договор.Дата, "ДЛФ=Д");
	
	Если Ссылка.ВидОперации = Перечисления.ВидыОперацийАктПеревозчика.ОтгрузкаВТорговуюТочку Тогда
		
		ОбластьМакета.Параметры.НадписьНомер = "Номер";
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВремТаблица = Ссылка.РасходныеОрдера.Выгрузить(, "РасходныйОрдер, НомерТТН, Стоимость");
		ВремТаблица.Колонки.Добавить("Дата");
		Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
			СтрокаТаблицы.Дата = НачалоДня(СтрокаТаблицы.РасходныйОрдер.Дата);
		КонецЦикла;
		ВремТаблица.Свернуть("Дата, НомерТТН", "Стоимость");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
			ОбластьМакета.Параметры.Дата 		= Формат(СтрокаТаблицы.Дата, "ДЛФ=Д");
			ОбластьМакета.Параметры.Номер 		= Формат(СтрокаТаблицы.НомерТТН, "ЧГ=");
			ОбластьМакета.Параметры.Стоимость 	= СтрокаТаблицы.Стоимость;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		ИтСтоимость = ВремТаблица.Итог("Стоимость");
		
	ИначеЕсли Ссылка.ВидОперации = Перечисления.ВидыОперацийАктПеревозчика.ДоставкаНаСклад Тогда
		
		ОбластьМакета.Параметры.НадписьНомер = "Наименование маршрута";
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТаблицы Из Ссылка.ТранспортныеРасходы Цикл
			ОбластьМакета.Параметры.Дата 		= Формат(СтрокаТаблицы.Дата, "ДЛФ=Д");
			ОбластьМакета.Параметры.Номер 		= СокрЛП(СтрокаТаблицы.Маршрут.Наименование);
			ОбластьМакета.Параметры.Стоимость 	= СтрокаТаблицы.Стоимость;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		ИтСтоимость = Ссылка.ТранспортныеРасходы.Итог("Стоимость");
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Стоимость 	= ИтСтоимость;
	ОбластьМакета.Параметры.Организация	= ТекстОрганизация;
	ОбластьМакета.Параметры.Перевозчик 	= ТекстПеревозчик;
	ОбластьМакета.Параметры.ДолжностьОрганизация 		= ?(ЗначениеЗаполнено(Ссылка.Организация.ДолжностьРуководителя),
															СокрЛП(Ссылка.Организация.ДолжностьРуководителя),
															?(ЗначениеЗаполнено(Ссылка.Организация.ГенеральныйДиректор), "Генеральный директор", ""));
	ОбластьМакета.Параметры.Директор 					= СокрЛП(Ссылка.Организация.ГенеральныйДиректор);//?(НЕ Ссылка.Организация.Код = "000000006", "Кривенко А.А.", "Фарафонов А.В.");
	ОбластьМакета.Параметры.ДолжностьПеревозчик 		= ?(ЗначениеЗаполнено(Ссылка.Перевозчик.ДолжностьРуководителя),
															СокрЛП(Ссылка.Перевозчик.ДолжностьРуководителя),
															?(ЗначениеЗаполнено(Ссылка.Перевозчик.ГенеральныйДиректор), "Генеральный директор", ""));
	ОбластьМакета.Параметры.ОтветственныйЗаПеревозку 	= СокрЛП(Ссылка.Перевозчик.ГенеральныйДиректор);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции
