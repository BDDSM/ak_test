
Перем мВалютаРегламентированногоУчета Экспорт;

//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00020387
Перем мЭтоНовыйОбъект;
//---АК Susk (Суслин К.В.)

Функция ПечатьТорг12(СсылкаНаОбъект) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;

	// шапка
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.НомерИсходящегоДокумента = """"
	|			ТОГДА ВозвратТоваровПоставщику.Номер
	|		ИНАЧЕ ВозвратТоваровПоставщику.НомерИсходящегоДокумента
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.ДатаИсходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВозвратТоваровПоставщику.Дата
	|		ИНАЧЕ ВозвратТоваровПоставщику.ДатаИсходящегоДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК ЮрФизЛицо,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВозвратТоваровПоставщику.Организация КАК Контрагент,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	"""" КАК АдресДоставки,
	|	ВозвратТоваровПоставщику.Контрагент КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.Организация КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВозвратТоваровПоставщику.Контрагент КАК Плательщик,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	// товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ДатаСреза"		, СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("Поставщик"		, СсылкаНаОбъект.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.НомерСтроки КАК Номер,
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныПоставщиков.Характеристика.НаименованиеТовараУПоставщика, """") КАК СТРОКА(1000)) КАК НаименованиеТовараУПоставщика,
	|	ВозвратТоваровПоставщику.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщику.Количество,
	|	ВозвратТоваровПоставщику.Количество КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ВозвратТоваровПоставщику.Коэффициент,
	|	ВозвратТоваровПоставщику.Коэффициент КАК КоличествоВОдномМесте,
	|	ВозвратТоваровПоставщику.Цена КАК Цена,
	|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.Сумма КАК СуммаВВалютеДокумента,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	ВозвратТоваровПоставщику.СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ЦеныПоставщиков
	|		ПО (ЦеныПоставщиков.Номенклатура = ВозвратТоваровПоставщику.Номенклатура)
	|			И (ЦеныПоставщиков.Поставщик = &Поставщик)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 10;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 10;
	ТабДокумент.ПолеСправа         = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо			, Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель	, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель			, Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель	, Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
			"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
			+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ТекНаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
				И НЕ ВРег(ТекНаименованиеТовара) = ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
			
			ТекНаименованиеТовара = ТекНаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = ТекНаименованиеТовара;
		//ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
	
		Если НЕ Шапка.СуммаВключаетНДС
				ИЛИ СуммаНДС = 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		#Если Клиент Тогда
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
		#Иначе	
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		#КонецЕсли

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок,, ",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест,, ",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;
	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	//
	Если ИмяМакета = "Торг12" Тогда
		
		ТабДокумент = ПечатьТорг12(ЭтотОбъект.Ссылка);
		
	//+++АК sils 16.02.2018 ИП-00017839
	ИначеЕсли ИмяМакета = "АктОбнаружения" Тогда
		Если НЕ ПроверитьРасходныйОрдер(ЭтотОбъект.Ссылка) Тогда
			Предупреждение("Не задан ""Расходный ордер (склад)"" - основание документа!");
			Возврат;
		КонецЕсли;
		Если НЕ ПроверитьЗаданиеТехнолога(ЭтотОбъект.Ссылка) Тогда
			Предупреждение("У ""Расходного ордера"" основание является не ""Задание технолога магазинам"" с типом задания ""Списание с магазинов за счёт поставщика""!");
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьАктОбнаружения(ЭтотОбъект.Ссылка);
	ИначеЕсли ИмяМакета = "АктУтилизации" Тогда
		Если НЕ ПроверитьРасходныйОрдер(ЭтотОбъект.Ссылка) Тогда
			Предупреждение("Не задан ""Расходный ордер (склад)"" - основание документа!");
			Возврат;
		КонецЕсли;
		Если НЕ ПроверитьЗаданиеТехнолога(ЭтотОбъект.Ссылка) Тогда
			Предупреждение("У ""Расходного ордера"" основание является не ""Задание технолога магазинам"" с типом задания ""Списание с магазинов за счёт поставщика""!");
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьАктУтилизации(ЭтотОбъект.Ссылка);
	//---АК
	КонецЕсли;
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка,
			Новый Структура("ПолеСлева, ПолеСправа, ПолеСверху, ПолеСнизу, ОриентацияСтраницы, ОтображатьЗаголовки, ОтображатьСетку, ТолькоПросмотр, Защита, ИмяПараметровПечати", 4, 4, 0, 0, ОриентацияСтраницы.Ландшафт));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//+++АК sils 16.02.2018 ИП-00017839
	//Возврат Новый Структура("Торг12", "ТОРГ-12 (Товарная накладная)");
	СтруктураФорм = Новый Структура;
	СтруктураФорм.Вставить("Торг12", "ТОРГ-12 (Товарная накладная)");
	СтруктураФорм.Вставить("АктОбнаружения", "Акт обнаружения");
	СтруктураФорм.Вставить("АктУтилизации", "Акт утилизации");
	
	Возврат СтруктураФорм;
	//---АК

КонецФункции

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчета) Экспорт
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = ВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчетаНДС);
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ПосчитатьСуммуТабличнойЧасти() Экспорт
	
	СуммаДок = 0;
	
	Для Каждого СтрокаТабличнойЧастиТовары Из ЭтотОбъект.Товары Цикл
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиТовары.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТабличнойЧастиТовары.Сумма + СтрокаТабличнойЧастиТовары.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	ЭтотОбъект.СуммаДокумента = СуммаДок;
	
Конецпроцедуры

Процедура ЗаполнитьТоварыПоРасходномуОрдеру(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК ПоРасходнымОрдерам,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения";
	
	ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ТаблицаЦенПоставщиков = Документы.ВозвратТоваровПоставщику.ПолучитьЦеныПоставщиков(ЭтотОбъект.Товары.Выгрузить(,"Номенклатура"), 
																			ЭтотОбъект.Контрагент,
																			?(ЗначениеЗаполнено(ЭтотОбъект.Дата), ЭтотОбъект.Дата, ТекущаяДата()));
																			
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275		 
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	//---АК Susk (Суслин К.В.) 																			
																			
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
	   
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТЧ.Номенклатура);			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);			
			
			//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.

			#Область ЗакоментКод_ЗаполнитьТоварыПоРасходномуОрдеру
			//Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			//   	ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			//   
			//   	СчетУчета = ПланыСчетов.Финансовый.Товары;
			//   
			//  ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			//   
			//   	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
			//   
			//  КонецЕсли;
		   
			//СтрокаТЧ.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
			#КонецОбласти
			
			//---АК Susk (Суслин К.В.) 
			
		   	СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		   
		   	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			   	СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		   	Иначе
			   	СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		   	КонецЕсли;	
		   
			МассивСтрок = ТаблицаЦенПоставщиков.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
			Если МассивСтрок.Количество() > 0 Тогда
			   
			   СтрокаТЧ.Цена = МассивСтрок[0].Цена;
			   
		   	КонецЕсли;
		   
	   	КонецЕсли;
	   
		ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
	   
	КонецЦикла;
	
	//
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры


Функция ПолучитьКоличествоВОрдерах(Номенклатура) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров"	, ЭтотОбъект.РасходныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"));
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().Итог("Количество");
	
КонецФункции

//+++АК SHEP 20161124
//+++АК SHEP 20170116: если расходник в закрытом периоде или расходников несколько, создаём ещё один документ
Функция СинхронизироватьКоличествоВРасходномОрдереИВозвратеПоставщику() Экспорт
	
	Перем Успешно, СтруктураОтбор;
	
	ПроводитьРасхОрдер 	= Истина;
	РасхОрдерОбъект 	= Неопределено;
	
	КвоРасходныхОрдеров = ЭтотОбъект.РасходныеОрдера.Количество();
	Если КвоРасходныхОрдеров = 0 Тогда
		Возврат Истина;
	Иначе
		РасхОрдерОбъект = ЭтотОбъект.РасходныеОрдера[0].РасходныйОрдер.ПолучитьОбъект();
	КонецЕсли;
	
	// если расходник в закрытом периоде или расходников несколько, создаём ещё один документ
	Если КвоРасходныхОрдеров > 1
			ИЛИ НастройкаПравДоступа.ДокументВЗакрытомПериоде(РасхОрдерОбъект) Тогда
		РасхОрдерОбъектДляИзменения = РасхОрдерОбъект.Скопировать();
		РасхОрдерОбъектДляИзменения.Дата = ЭтотОбъект.Дата;
		РасхОрдерОбъектДляИзменения.Товары.Очистить();
	Иначе
		РасхОрдерОбъектДляИзменения = РасхОрдерОбъект;
	КонецЕсли;
	
	ТЗнТоварыРасхОрдер = Неопределено;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.РасходныеОрдера Цикл
		Если ТЗнТоварыРасхОрдер = Неопределено Тогда
			ТЗнТоварыРасхОрдер = СтрокаТЧ.РасходныйОрдер.Товары.Выгрузить();
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтрокаТЧ.РасходныйОрдер.Товары.Выгрузить(), ТЗнТоварыРасхОрдер);
		КонецЕсли;
	КонецЦикла;
	
	Если КвоРасходныхОрдеров > 1 Тогда
		ТЗнТоварыРасхОрдер.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, ДатаПроизводства", "Количество");
	КонецЕсли;
	
	Успешно 					= Истина;
	ЕстьРасхождениеВКоличествах = Ложь;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		ОсталосьРаспределить = СтрокаТЧ.Количество - СтрокаТЧ.ПоРасходнымОрдерам;
		Если ОсталосьРаспределить = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		// ?? запрос в цикле
		ВОрдерах = ПолучитьКоличествоВОрдерах(СтрокаТЧ.Номенклатура);
		Если ВОрдерах = СтрокаТЧ.Количество Тогда
			СтрокаТЧ.ПоРасходнымОрдерам = СтрокаТЧ.Количество;
			Продолжить;
		КонецЕсли;
		
		//
		СтруктураОтбор = Новый Структура("Номенклатура,ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураОтбор, СтрокаТЧ);
		
		Если ОсталосьРаспределить > 0 Тогда
			ЕстьРасхождениеВКоличествах = Истина;
			// добавляем с пустой датой производства
			НоваяСтрокаТоварыРасхОрдер = РасхОрдерОбъектДляИзменения.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыРасхОрдер, СтрокаТЧ, "Номенклатура,ЕдиницаИзмерения");
			
			МассивСтрокПоОтбору = ТЗнТоварыРасхОрдер.НайтиСтроки(СтруктураОтбор);
			Если МассивСтрокПоОтбору.Количество() > 0 Тогда
				НоваяСтрокаТоварыРасхОрдер.Характеристика = МассивСтрокПоОтбору[0].Характеристика;
			КонецЕсли;
			
			НоваяСтрокаТоварыРасхОрдер.Количество = ОсталосьРаспределить;
			СтрокаТЧ.ПоРасходнымОрдерам = СтрокаТЧ.Количество;
			
		Иначе
			
			ЕстьРасхождениеВКоличествах = Истина;
			// уменьшаем сначала с пустой датой производства, потом с максимальной по убыванию
			ОсталосьРаспределить = -ОсталосьРаспределить;
			
			СтруктураОтбор = Новый Структура("Номенклатура,ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(СтруктураОтбор, СтрокаТЧ);
			
			ТЗнОтбор = ТЗнТоварыРасхОрдер.Скопировать(СтруктураОтбор);
			ТЗнОтбор.Колонки.Добавить("ДатаПроизводстваСортировка", Новый ОписаниеТипов("Дата"));
			ТЗнОтбор.ЗагрузитьКолонку(ТЗнОтбор.ВыгрузитьКолонку("ДатаПроизводства"), "ДатаПроизводстваСортировка");
			СтруктураОтбор.Вставить("ДатаПроизводства", Дата(1, 1, 1));
			МассивСтрокПоОтбору = ТЗнОтбор.НайтиСтроки(СтруктураОтбор);
			Для Каждого СтрокаТоварыРасхОрдер Из МассивСтрокПоОтбору Цикл
				СтрокаТоварыРасхОрдер.ДатаПроизводстваСортировка = Дата(3999, 12, 31);
			КонецЦикла;
			ТЗнОтбор.Сортировать("ДатаПроизводстваСортировка Убыв");
			
			Для Каждого СтрокаТоварыТЗнОтбор Из ТЗнОтбор Цикл
				СтруктураОтбор.Вставить("ДатаПроизводства", СтрокаТоварыТЗнОтбор.ДатаПроизводства);
				МассивСтрокПоОтбору = ТЗнТоварыРасхОрдер.НайтиСтроки(СтруктураОтбор);
				Для Каждого СтрокаТоварыРасхОрдер Из МассивСтрокПоОтбору Цикл
					КвоДляРаспределения = Мин(ОсталосьРаспределить, СтрокаТоварыРасхОрдер.Количество);
					//СтрокаТоварыРасхОрдер.Количество = СтрокаТоварыРасхОрдер.Количество - КвоДляРаспределения;
					НоваяСтрокаТоварыРасхОрдер = РасхОрдерОбъектДляИзменения.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыРасхОрдер, СтрокаТоварыРасхОрдер, "Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства");
					НоваяСтрокаТоварыРасхОрдер.Количество = - КвоДляРаспределения;
					ОсталосьРаспределить = ОсталосьРаспределить - КвоДляРаспределения;
					Если ОсталосьРаспределить = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОсталосьРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОсталосьРаспределить > 0 Тогда
				Успешно = Ложь;
				Прервать;
			КонецЕсли;
			СтрокаТЧ.ПоРасходнымОрдерам = СтрокаТЧ.Количество;
			
		КонецЕсли;

	КонецЦикла;
	
	Если Успешно
			И ЕстьРасхождениеВКоличествах Тогда
		//РасхОрдерОбъект.Товары.Загрузить(ТЗнТоварыРасхОрдер);
		РасхОрдерОбъектДляИзменения.Товары.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, ДатаПроизводства", "Количество");
		Если ПроводитьРасхОрдер Тогда
			РасхОрдерОбъектДляИзменения.Записать(РежимЗаписиДокумента.Проведение);
			Если РасхОрдерОбъект.Ссылка <> РасхОрдерОбъектДляИзменения.Ссылка Тогда
				РасхОрдерОбъектДляИзменения.Дата = Дата;
				РасхОрдерОбъектДляИзменения.ВыполнятьДвиженияДатойДокумента = Истина;
				РасхОрдерОбъектДляИзменения.Записать(РежимЗаписиДокумента.Проведение);
				РасходныеОрдера.Добавить().РасходныйОрдер = РасхОрдерОбъектДляИзменения.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции
//---АК SHEP 20161124


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполнение шапки
		ЭтотОбъект.ВидОперации 			= ДанныеЗаполнения.ВидОперации;
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Сделка 				= ДанныеЗаполнения.Ссылка;
		ЭтотОбъект.СуммаДокумента 		= ДанныеЗаполнения.СуммаДокумента;
		ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.СтруктурнаяЕдиница;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			ЭтотОбъект.ВариантРасчетаНДС = ?(ЭтотОбъект.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС,
												Перечисления.ВариантыРасчетаНДС.НДСсверху,
												Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		Иначе
			ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;	
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество 			= ТекСтрокаТовары.Количество;
			НоваяСтрока.Коэффициент 		= ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура 		= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Цена 				= ТекСтрокаТовары.Цена;
			НоваяСтрока.СтавкаНДС 			= ТекСтрокаТовары.Номенклатура.СтавкаНДС;
			НоваяСтрока.СтатьяТовародвижения= ТекСтрокаТовары.СтатьяТовародвижения;
			НоваяСтрока.СчетУчета 			= ТекСтрокаТовары.СчетУчета;
			
			ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
			
			//НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			//НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			//НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		ПосчитатьСуммуТабличнойЧасти();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		
		// Заполнение шапки
		ЭтотОбъект.Комментарий 			= ДанныеЗаполнения.Комментарий;
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент			= ДанныеЗаполнения.Получатель;
		ЭтотОбъект.ВидОперации 			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ЭтотОбъект.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		
		ЭтотОбъект.РасходныеОрдера.Очистить();
		НовыйОрдер = ЭтотОбъект.РасходныеОрдера.Добавить();
		НовыйОрдер.РасходныйОрдер = ДанныеЗаполнения;
		
		ЗаполнитьТоварыПоРасходномуОрдеру(ДанныеЗаполнения);
		//Товары.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
		
	//+++АК SHEP 20160624
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам") Тогда
		
		//Если ДанныеЗаполнения.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад
		//  И ДанныеЗаполнения.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов
		//  И ДанныеЗаполнения.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов Тогда
		//	//Сообщить("Документ может вводиться на основании только с видами операций
		//	//	|""Возврат на склад"" и ""Самовывоз с магазинов""!");
		//	Возврат;
		//КонецЕсли;
		
		// Заполнение шапки
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Поставщик;
		ЭтотОбъект.ВидОперации 			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ЭтотОбъект.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.БезНДС;
		ЭтотОбъект.Комментарий 			= ДанныеЗаполнения.Комментарий;
		
		ЭтотОбъект.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
		ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.Склад;
		ЭтотОбъект.Организация 			= СтруктурнаяЕдиница.Организация;
		ЭтотОбъект.ДокументОснование 	= ДанныеЗаполнения.Ссылка;
		ЭтотОбъект.Комментарий 			= Строка(ЭтотОбъект.ДокументОснование);
		ЭтотОбъект.СогласованноСПоставщиком = Истина;
		ЭтотОбъект.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		|	ЗаданиеТехнологаМагазинамТовары.ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ЗаданиеТехнологаМагазинамТовары.РеализованноеКоличество) КАК Количество,
		|	СУММА(ЗаданиеТехнологаМагазинамТовары.СуммаРеализованногоВозврата) КАК Сумма,
		|	ВЫБОР
		|		КОГДА СУММА(ЗаданиеТехнологаМагазинамТовары.РеализованноеКоличество) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ЗаданиеТехнологаМагазинамТовары.СуммаРеализованногоВозврата) / СУММА(ЗаданиеТехнологаМагазинамТовары.РеализованноеКоличество)
		|	КОНЕЦ КАК Цена,
		|	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары) КАК СчетУчета,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиТовародвижения.ПоступлениеОтПоставщика) КАК СтатьяТовародвижения
		|ИЗ
		|	Документ.ЗаданиеТехнологаМагазинам.Товары КАК ЗаданиеТехнологаМагазинамТовары
		|ГДЕ
		|	ЗаданиеТехнологаМагазинамТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура,
		|	ЗаданиеТехнологаМагазинамТовары.ЕдиницаИзмерения,
		|	ЗаданиеТехнологаМагазинамТовары.Номенклатура.СтавкаНДС
		|ИМЕЮЩИЕ
		|	СУММА(ЗаданиеТехнологаМагазинамТовары.РеализованноеКоличество) > 0";
		
		ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого СтрокаТоваров Из ЭтотОбъект.Товары Цикл
			РассчитатьСуммуНДСТабЧасти(СтрокаТоваров, ВариантРасчетаНДС);
		КонецЦикла;
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Товары.Итог("Сумма");
	//---АК SHEP 20160624
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК ILIK 2018.05.31 ИП-00018101.03
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПосчитатьСуммуТабличнойЧасти();
	
	//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00020387 
	Если ЭтоНовый() Тогда
		мЭтоНовыйОбъект = Истина;
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ЭтотОбъект.СтруктурнаяЕдиница.Пустая() Тогда
		Сообщить("Не указана структурная единица! Проведение невозможно.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.РасходныеОрдера.Количество() = 0
			И ТипЗнч(ЭтотОбъект.ДокументОснование) <> Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")
			И ОбменДанными.Загрузка <> Истина Тогда
		Сообщить("Не указан ни один расходный ордер! Проведение невозможно.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Счет411 = ПланыСчетов.Финансовый.Товары;
	Счет412 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	Счет08	= ПланыСчетов.Финансовый.КапитальныеВложения;
	
	Если Дата < '20131114' Тогда
		
		// Старая схема проведения
		Движения.Финансовый.Записывать = Истина;
		Движения.Финансовый.Очистить();
		
		Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
			
			ТекНоменклатура 			= ТекСтрокаТовары.Номенклатура;
			Если ТекСтрокаТовары.СчетУчета 		= Счет411 Тогда
				Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.Товары					= ТекНоменклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
				Проводка.НомерЖурнала			= "ТД";
				Проводка.Содержание				= "Возврат товара";
			ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
				Проводка.СубконтоКт.Контрагенты		 		= ЭтотОбъект.Контрагент;
				Проводка.СубконтоКт.Материалы				= ТекНоменклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
				Проводка.КоличествоКт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
				Проводка.НомерЖурнала			= "МВ";                       
				Проводка.Содержание				= "Возврат материалов";
			ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет08 Тогда
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("").Ссылка;//НаПриобретениеОборудованияТорговыхТочек;
				Проводка.НомерЖурнала			= "КВ";
				Проводка.Содержание				= "Возврат оборудования";
			Иначе
				Проводка.СубконтоКт.Материалы				= ТекНоменклатура;
			КонецЕсли;
			Проводка.СчетДт 				= Планысчетов.Финансовый.РасчетыСПоставщиками;
			Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
			
			//Проводка.Организация 			= Организация;
			Проводка.Сумма 					= ТекСтрокаТовары.Сумма;
		КонецЦикла;
		
	Иначе
		
		СтруктураНастроекКорректировкаСебестоимости = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.КорректировкаСебестоимостиПриВозвратеПоставщику, ЭтотОбъект.Дата);
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
			
			ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект.Дата);
			
			НастройкиОтраженияВУчетеНДС = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ВозвратТоваровПоставщику, ЭтотОбъект.Дата);					
			
		Если ЭтотОбъект.РасходныеОрдера.Количество() > 0 Тогда
			
			// Новая схема проведения
			
			мНДСвТомЧисле = (ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
			
			Движения.Финансовый.Записывать = Истина;
			Движения.Финансовый.Очистить();
			
			//+++АК Susk (Суслин К.В.) 2018.08.14 ИП-00019552
			СкладИзРО = Справочники.Склады.ПустаяСсылка();
			
			Если Товары.Найти(Счет412, "СчетУчета") <> Неопределено Тогда 
				
				РО = РасходныеОрдера[0].РасходныйОрдер;						
				СкладИзРО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РО, "Склад");				
				
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 		 
			
			Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
				
				//Если НЕ ТекСтрокаТовары.Количество > 0 Тогда
				//	  Продолжить;
				//КонецЕсли;
				
				СуммаВсего = 0;
				СуммаНДСОтдельно = 0;
				Если ЗначениеЗаполнено(НастройкиОтраженияВУчетеНДС.Счет) Тогда
					СуммаВсего = ТекСтрокаТовары.Сумма - ?(мНДСвТомЧисле, ТекСтрокаТовары.СуммаНДС, 0);
					СуммаНДСОтдельно = ТекСтрокаТовары.СуммаНДС;
				Иначе	
					СуммаВсего = ТекСтрокаТовары.Сумма + ?(мНДСвТомЧисле, 0, ТекСтрокаТовары.СуммаНДС);
				КонецЕсли;	
				
				// основная проводка
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
				Проводка.КоличествоКт	= ТекСтрокаТовары.Количество;
				
				ТекНоменклатура = ТекСтрокаТовары.Номенклатура;
				
				Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
					
					Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоКт.Товары					= ТекНоменклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.НомерЖурнала			= "ТД";
					Проводка.Содержание				= "Возврат товара";
					
				ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
					
					//+++АК Susk (Суслин К.В.) 2018.08.14 б/н нет такого субконто на 41.2
					//Проводка.СубконтоКт.Контрагенты		 		= ЭтотОбъект.Контрагент;					
					Проводка.СубконтоКт.Склады = СкладИзРО;					
					//---АК Susk (Суслин К.В.) 
					
					Проводка.СубконтоКт.Материалы				= ТекНоменклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.КоличествоКт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
					Проводка.НомерЖурнала			= "МВ";
					Проводка.Содержание				= "Возврат материалов";
					
				ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет08 Тогда
					
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("");//НаПриобретениеОборудованияТорговыхТочек;
					Проводка.НомерЖурнала			= "КВ";
					Проводка.Содержание				= "Возврат оборудования";
					
				Иначе
					
					Проводка.СубконтоКт.Материалы				= ТекНоменклатура;
					
				КонецЕсли;
				
				Проводка.СчетДт 				= Планысчетов.Финансовый.РасчетыСПоставщиками;
				Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
				
				//Проводка.Организация 			= ЭтотОбъект.Организация;
				Проводка.Сумма 					= СуммаВсего;
				
				Если СуммаНДСОтдельно <> 0 Тогда
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период 		= ЭтотОбъект.Дата;
					Проводка.СчетКт 		= НастройкиОтраженияВУчетеНДС.Счет;
					
					Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
					Проводка.СубконтоКт.ВидыНалогов = НастройкиОтраженияВУчетеНДС.ДопРеквизит;
					Проводка.СубконтоКт.СтавкиНДС = ТекСтрокаТовары.СтавкаНДС;
					
					Проводка.НомерЖурнала			= "ТД";
					Проводка.Содержание				= "НДС возврат товара";
					
					Проводка.СчетДт 				= Планысчетов.Финансовый.РасчетыСПоставщиками;
					Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
					Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
					
					//Проводка.Организация 			= ЭтотОбъект.Организация;
					Проводка.Сумма 					= СуммаНДСОтдельно;
				КонецЕсли;	
				
				СтрокаСебестоимости = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				Если СтрокаСебестоимости <> Неопределено Тогда
					СуммаПоСебестоимости = СтрокаСебестоимости.Себестоимость * ТекСтрокаТовары.Количество;
					Если СуммаВсего <> СуммаПоСебестоимости Тогда
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период 		= ЭтотОбъект.Дата;
						Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
						//Проводка.КоличествоКт	= ТекСтрокаТовары.Количество;
						
						Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
							
							Проводка.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
							Проводка.СубконтоКт.Товары				= ТекНоменклатура;
							Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроекКорректировкаСебестоимости.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
							
						ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
							
							//+++АК Susk (Суслин К.В.) 2018.08.14
							Проводка.СубконтоКт.Склады = СкладИзРО;					
							//---АК Susk (Суслин К.В.) 
							
							Проводка.СубконтоКт.Материалы			= ТекНоменклатура;
							Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроекКорректировкаСебестоимости.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
							
						Иначе
							
							Проводка.СубконтоКт.Материалы			= ТекНоменклатура;
							
						КонецЕсли;
						
						Проводка.СчетДт 				= СтруктураНастроекКорректировкаСебестоимости.Счет;
						Проводка.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекКорректировкаСебестоимости.СтруктурнаяЕдиница;
						Проводка.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроекКорректировкаСебестоимости.СтатьяДоходовРасходов;
						Проводка.СубконтоДт.ЦФО					=
						?(ЗначениеЗаполнено(СтруктураНастроекКорректировкаСебестоимости.ЦФО), СтруктураНастроекКорректировкаСебестоимости.ЦФО, ЦФО);
						
						//Проводка.Организация 			= ЭтотОбъект.Организация;
						Проводка.Сумма 					= (СуммаПоСебестоимости - СуммаВсего);
					КонецЕсли;	
				КонецЕсли;
				
				Если ЭтотОбъект.Дата >= '20131201' Тогда
					
					//// Если товар не облагается НДС
					//Если ТекСтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					//	
					//	// Проводка только по товарам
					//	Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
					//		
					//		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтражениеНДСПоТоварамБезНДС, Дата);
					//		
					//		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
					//			
					//			ПроводкаНДС = Движения.Финансовый.Добавить();
					//			ПроводкаНДС.Период = ЭтотОбъект.Дата;
					//			
					//			// Дт
					//			ПроводкаНДС.СчетДт 							= СтруктураНастроек.Счет;
					//			ПроводкаНДС.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
					//			ПроводкаНДС.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
					//			ПроводкаНДС.СубконтоДт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
					//			
					//			// Кт 41.1
					//			ПроводкаНДС.СчетКт 							= ПланыСчетов.Финансовый.Товары;
					//			ПроводкаНДС.СубконтоКт.МестаХранения  		= СтруктурнаяЕдиница;
					//			ПроводкаНДС.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
					//			ПроводкаНДС.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров41;
					//			
					//			//ПроводкаНДС.Организация 	= ЭтотОбъект.Организация;
					//			ПроводкаНДС.Сумма 			= (СуммаВсего * ОбщегоНазначенияСервер.ПолучитьСтавкуНДСПриОтгрузкеБезНДС(Дата))/100;
					//			
					//			ПроводкаНДС.Содержание		= "НДС";
					//			
					//		КонецЕсли;
					//		
					//	КонецЕсли;
					//	
					//КонецЕсли;
					
					// Отражение излишка, передача больше чем по документам
					Если ТекСтрокаТовары.Количество > ТекСтрокаТовары.ПоРасходнымОрдерам Тогда
						
						СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ВозвратПоставщику_Излишки, ЭтотОбъект.Дата);
						
						Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
							
							ПроводкаИзлишки = Движения.Финансовый.Добавить();
							
							ПроводкаИзлишки.Период 			= ЭтотОбъект.Дата;
							ПроводкаИзлишки.СчетДт 			= ТекСтрокаТовары.СчетУчета;
							ПроводкаИзлишки.КоличествоДт 	= ТекСтрокаТовары.Количество - ТекСтрокаТовары.ПоРасходнымОрдерам;
							
							Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
								
								ПроводкаИзлишки.СубконтоДт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
								ПроводкаИзлишки.СубконтоДт.Товары				= ТекНоменклатура;
								ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
								ПроводкаИзлишки.НомерЖурнала					= "ТД";
								ПроводкаИзлишки.Содержание						= "Излишки товара";
								
							ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
								
								//+++АК Susk (Суслин К.В.) 2018.08.14
								Проводка.СубконтоДт.Склады = СкладИзРО;					
								//---АК Susk (Суслин К.В.) 
								
								ПроводкаИзлишки.СубконтоДт.Материалы			= ТекНоменклатура;
								ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
								ПроводкаИзлишки.КоличествоДт					=
												(ТекСтрокаТовары.Количество - ТекСтрокаТовары.ПоРасходнымОрдерам) * ТекСтрокаТовары.Коэффициент;
								ПроводкаИзлишки.НомерЖурнала					= "МВ";
								ПроводкаИзлишки.Содержание						= "Излишки материалов";
								
							Иначе
								
								ПроводкаИзлишки.СубконтоДт.Материалы			= ТекНоменклатура;
								
							КонецЕсли;
							
							ПроводкаИзлишки.СчетКт = СтруктураНастроек.Счет;
							ПроводкаИзлишки.СубконтоКт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
							ПроводкаИзлишки.СубконтоКт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
							ПроводкаИзлишки.СубконтоКт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
							
							//ПроводкаИзлишки.Организация		= Организация;
							ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
							СтрСебестоимость = ТабСебестоимости.Найти(ТекНоменклатура, "Номенклатура");
							ПроводкаИзлишки.Сумма 			= ПроводкаИзлишки.КоличествоДт * СтрСебестоимость.Себестоимость;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Отражение недостачи, передали меньше чем по документам
					Если ТекСтрокаТовары.Количество < ТекСтрокаТовары.ПоРасходнымОрдерам Тогда
						
						СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ВозвратПоставщику_Недостачи, ЭтотОбъект.Дата);
						
						Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
							
							ПроводкаНедостачи = Движения.Финансовый.Добавить();
							
							ПроводкаНедостачи.Период 		= ЭтотОбъект.Дата;
							ПроводкаНедостачи.СчетКт 		= ТекСтрокаТовары.СчетУчета;
							ПроводкаНедостачи.КоличествоКт 	= ТекСтрокаТовары.ПоРасходнымОрдерам - ТекСтрокаТовары.Количество;
							
							Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
								
								ПроводкаНедостачи.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
								ПроводкаНедостачи.СубконтоКт.Товары					= ТекНоменклатура;
								ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
								ПроводкаНедостачи.НомерЖурнала						= "ТД";
								ПроводкаНедостачи.Содержание						= "Недостача товара";
								
							ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
								
								//+++АК Susk (Суслин К.В.) 2018.08.14
								Проводка.СубконтоКт.Склады = СкладИзРО;					
								//---АК Susk (Суслин К.В.) 
								
								ПроводкаНедостачи.СубконтоКт.Материалы				= ТекНоменклатура;
								ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
								ПроводкаНедостачи.КоличествоКт						=
												(ТекСтрокаТовары.ПоРасходнымОрдерам - ТекСтрокаТовары.Количество) * ТекСтрокаТовары.Коэффициент;
								ПроводкаНедостачи.НомерЖурнала						= "МВ";
								ПроводкаНедостачи.Содержание						= "Недостача материалов";
								
							Иначе
								ПроводкаИзлишки.СубконтоДт.Материалы			= ТекНоменклатура;
							КонецЕсли;
							
							ПроводкаНедостачи.СчетДт = СтруктураНастроек.Счет;
							ПроводкаНедостачи.СубконтоДт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
							ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
							ПроводкаНедостачи.СубконтоДт.ЦФО 					=
																		?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
							
							//ПроводкаНедостачи.Организация 	= ЭтотОбъект.Организация;
							ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
							СтрСебестоимость = ТабСебестоимости.Найти(ТекНоменклатура, "Номенклатура");
							ПроводкаНедостачи.Сумма 			= ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// Старая схема проведения
			Движения.Финансовый.Записывать = Истина;
			Движения.Финансовый.Очистить();
			
			Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
				
				Номенклатура 			= ТекСтрокаТовары.Номенклатура;
				
				Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
					
					Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоКт.Товары					= Номенклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.НомерЖурнала			= "ТД";
					Проводка.Содержание				= "Возврат товара";
					
				ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
					
					Проводка.СубконтоКт.Контрагенты		 		= ЭтотОбъект.Контрагент;
					Проводка.СубконтоКт.Материалы				= Номенклатура;
					Проводка.СубконтоКт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.КоличествоКт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
					Проводка.НомерЖурнала			= "МВ";
					Проводка.Содержание				= "Возврат материалов";
					
				ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет08 Тогда
					
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("");//НаПриобретениеОборудованияТорговыхТочек;
					Проводка.НомерЖурнала			= "КВ";
					Проводка.Содержание				= "Возврат оборудования";
					
				Иначе
					
					Проводка.СубконтоКт.Материалы				= ТекНоменклатура;
					
				КонецЕсли;
				
				Проводка.СчетДт 				= Планысчетов.Финансовый.РасчетыСПоставщиками;
				Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
				
				//Проводка.Организация 			= Организация;
				Проводка.Сумма 					= ТекСтрокаТовары.Сумма;
				
				СтрокаСебестоимости = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				Если СтрокаСебестоимости <> Неопределено Тогда
					СуммаПоСебестоимости = СтрокаСебестоимости.Себестоимость * Проводка.КоличествоКт;
					Если ТекСтрокаТовары.Сумма <> СуммаПоСебестоимости Тогда
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период 		= ЭтотОбъект.Дата;
						Проводка.СчетКт 		= ТекСтрокаТовары.СчетУчета;
						//Проводка.КоличествоКт	= ТекСтрокаТовары.Количество;
						
						Если ТекСтрокаТовары.СчетУчета = Счет411 Тогда
							
							Проводка.СубконтоКт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
							Проводка.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
							Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроекКорректировкаСебестоимости.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
							
						ИначеЕсли ТекСтрокаТовары.СчетУчета = Счет412 Тогда
							
							//ПроводкаИзлишки.СубконтоКт.Склады		 		= Склад;
							Проводка.СубконтоКт.Материалы			= ТекСтрокаТовары.Номенклатура;
							Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроекКорректировкаСебестоимости.СтатьяДвиженияТоваров;//ТекСтрокаТовары.СтатьяТовародвижения;
							
						Иначе
							
							Проводка.СубконтоКт.Материалы			= ТекСтрокаТовары.Номенклатура;
							
						КонецЕсли;
						
						Проводка.СчетДт 				= СтруктураНастроекКорректировкаСебестоимости.Счет;
						Проводка.СубконтоДт.ТорговыеТочки  		= СтруктураНастроекКорректировкаСебестоимости.СтруктурнаяЕдиница;
						Проводка.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроекКорректировкаСебестоимости.СтатьяДоходовРасходов;
						Проводка.СубконтоДт.ЦФО					=
						?(ЗначениеЗаполнено(СтруктураНастроекКорректировкаСебестоимости.ЦФО), СтруктураНастроекКорректировкаСебестоимости.ЦФО, ЦФО);
						
						//Проводка.Организация 			= ЭтотОбъект.Организация;
						Проводка.Сумма 					= (СуммаПоСебестоимости - ТекСтрокаТовары.Сумма);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+++АК ILIK 2018.05.31 ИП-00018101.03
	РасчетыЧерезФК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Контрагент, "ОсновнойДоговорКонтрагента.РасчетыЧерезФК");
	Если ЗначениеЗаполнено(РасчетыЧерезФК) И РасчетыЧерезФК Тогда
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = ЭтотОбъект.Дата;
		Проводка.Организация = ЭтотОбъект.Организация;
		
		Проводка.СчетДт = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг;
		Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент.ОсновнойДоговорКонтрагента.ФакторинговаяКомпания;
		Если ЭтотОбъект.Дата >= Дата(2018,3,1) Тогда
			Проводка.СубконтоДт.Договоры = ЭтотОбъект.Контрагент.ОсновнойДоговорКонтрагента.ФакторинговаяКомпанияДоговор;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		
		Проводка.Содержание = "Взаимозачет с факторинговой компанией";
		Проводка.Сумма = ЭтотОбъект.СуммаДокумента;
	КонецЕсли;
	//---АК ILIK
	
	//
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый, ЭтотОбъект.Организация);	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.РасходныеОрдера.Очистить();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		СтрокаТЧ.ПоРасходнымОрдерам = 0;
	КонецЦикла;
	
КонецПроцедуры

//+++АК sils 16.02.2018 ИП-00017839
Функция ПечатьАктОбнаружения(Ссылка) Экспорт
	Док_РасхОрдерСклад = Ссылка.РасходныеОрдера[0].РасходныйОрдер;
	Док_ЗаданиеТехнолога = Док_РасхОрдерСклад.Основание;
	
	// Получаем данные с документа
	ДатаЗаданияТехнолога = Док_ЗаданиеТехнолога.Дата;
	ПричинаВозврата = СокрЛП(Док_ЗаданиеТехнолога.Комментарий);
	ТекПоставщик = СокрЛП(Ссылка.Контрагент.НаименованиеПолное);
	ТекПоставщик = ?(ТекПоставщик = "", СокрЛП(Ссылка.Контрагент), ТекПоставщик);
	
	// Получаем список ролей пользователей
	#Область ФИОТехнологов
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Док_РасхОрдерСклад.Товары.ВыгрузитьКолонку("Характеристика"));
	СЗ.Добавить(Ссылка.Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект,
	               |	СоответствиеОбъектРольСрезПоследних.РольПользователя
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	               |			,
	               |			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
	               |				И Объект В (&СЗ)) КАК СоответствиеОбъектРольСрезПоследних"; 
	Запрос.УстановитьПараметр("СЗ", СЗ);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// Теперь получаем список соответствующих сотрудников
	ТЗ.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТекКол = ТЗ.Количество();
	Пока ТекКол <> 0 Цикл
		стр = ТЗ[ТекКол - 1];
		ТекРоль = стр.РольПользователя;
		Если ТекРоль.СоставРоли.Количество() > 0 Тогда
			стр.Сотрудник = ТекРоль.СоставРоли[0].Сотрудник;
			Если не ЗначениеЗаполнено(стр.Сотрудник) Тогда
				ТЗ.Удалить(стр);
			КонецЕсли;
		Иначе
			ТЗ.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;

	// Теперь надо получить ФИО сотрудников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ1", ТЗ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ1.Объект,
	               |	ТЗ1.РольПользователя,
	               |	ТЗ1.Сотрудник
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	&ТЗ1 КАК ТЗ1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.Объект,
	               |	ТЗ.Сотрудник,
	               |	ФИОФизЛицСрезПоследних.Фамилия,
	               |	ФИОФизЛицСрезПоследних.Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	               |		ПО ТЗ.Сотрудник = ФИОФизЛицСрезПоследних.ФизЛицо";
	ТЗ1 = Запрос.Выполнить().Выгрузить();
	#КонецОбласти
	
	ФИОТехн_Получатель = "";
	СтрТехн = ТЗ1.Найти(Ссылка.Контрагент);
	Если СтрТехн <> Неопределено Тогда
		Если СокрЛП(СтрТехн.Фамилия) <> "" Тогда
			ФИОТехн_Получатель = СокрЛП(СтрТехн.Фамилия) + " " + Лев(СокрЛП(СтрТехн.Имя), 1) + " " + Лев(СокрЛП(СтрТехн.Отчество), 1);
		КонецЕсли;
	КонецЕсли;
	
	// Начинаем формировать печатную форму
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_АктОбнаружения";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Очистить();
	
	// Для каждой номенклатуры свою печатную форму надо сформировать
	Для каждого стр из Док_РасхОрдерСклад.Товары Цикл
		Если Ссылка.Товары.Индекс(стр) <> 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Макет = Документы.ВозвратТоваровПоставщику.ПолучитьМакет("АктОбнаружения");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьЗаголовок.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		ОбластьЗаголовок.Параметры.Дата = Формат(?(Ссылка.ДатаИсходящегоДокумента = Дата("00010101000000"), 
													Ссылка.Дата, Ссылка.ДатаИсходящегоДокумента), "ДЛФ=DD");
		ОбластьЗаголовок.Параметры.ДатаЗаданияТехнолога = Формат(ДатаЗаданияТехнолога, "ДЛФ=DD");
		ОбластьЗаголовок.Параметры.Наименование = СокрЛП(стр.Номенклатура);
		ОбластьЗаголовок.Параметры.Количество = Формат(стр.Количество, "ЧДЦ=3; ЧРД=,; ЧРГ=' '");
		
		ОбластьЗаголовок.Параметры.ДатаПроизводства = Формат(стр.ДатаПроизводства, "ДЛФ=D");
		ОбластьЗаголовок.Параметры.Поставщик = ТекПоставщик;
		
		ОбластьЗаголовок.Параметры.ПричинаВозврата = ПричинаВозврата; 
		ОбластьЗаголовок.Параметры.КороткаяДатаЗадания = Формат(ДатаЗаданияТехнолога, "ДЛФ=D");
		
		ФИОТехнолога = "";
		СтрТехн = ТЗ1.Найти(стр.Номенклатура);
		Если СтрТехн <> Неопределено Тогда
			Если СокрЛП(СтрТехн.Фамилия) <> "" Тогда
				ФИОТехнолога = СокрЛП(СтрТехн.Фамилия) + " " + Лев(СокрЛП(СтрТехн.Имя), 1) + " " + Лев(СокрЛП(СтрТехн.Отчество), 1);
			КонецЕсли;
		КонецЕсли;
		ФИОТехнолога = ?(СокрЛП(ФИОТехнолога) = "", ФИОТехн_Получатель, ФИОТехнолога);
		ОбластьЗаголовок.Параметры.ФИОТехнолога = ФИОТехнолога;
		
		ОбластьЗаголовок.Область("ПричинаВозврата").Защита = Ложь;
		ТабДок.Вывести(ОбластьЗаголовок);
	КонецЦикла;

	Возврат ТабДок;
	
КонецФункции

//+++АК sils 16.02.2018 ИП-00017839
Функция ПечатьАктУтилизации(Ссылка) Экспорт
	Док_РасхОрдерСклад = Ссылка.РасходныеОрдера[0].РасходныйОрдер;
	Док_ЗаданиеТехнолога = Док_РасхОрдерСклад.Основание;
	
	// Получаем данные с документа
	ДатаПроведения = Док_ЗаданиеТехнолога.ДатаПроведения;
	ДатаПроведения = ?(ДатаПроведения = Дата("00010101000000"), Док_ЗаданиеТехнолога.Дата, ДатаПроведения);
	ПричинаУничтожения = СокрЛП(Док_ЗаданиеТехнолога.Комментарий);
	ТекПоставщик = СокрЛП(Ссылка.Контрагент.НаименованиеПолное);
	ТекПоставщик = ?(ТекПоставщик = "", СокрЛП(Ссылка.Контрагент), ТекПоставщик);
	
	#Область ФИОТехнологов
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Док_РасхОрдерСклад.Товары.ВыгрузитьКолонку("Характеристика"));
	СЗ.Добавить(Ссылка.Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект,
	               |	СоответствиеОбъектРольСрезПоследних.РольПользователя
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	               |			,
	               |			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)
	               |				И Объект В (&СЗ)) КАК СоответствиеОбъектРольСрезПоследних"; 
	Запрос.УстановитьПараметр("СЗ", СЗ);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// Теперь получаем список соответствующих сотрудников
	ТЗ.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТекКол = ТЗ.Количество();
	Пока ТекКол <> 0 Цикл
		стр = ТЗ[ТекКол - 1];
		ТекРоль = стр.РольПользователя;
		Если ТекРоль.СоставРоли.Количество() > 0 Тогда
			стр.Сотрудник = ТекРоль.СоставРоли[0].Сотрудник;
			Если не ЗначениеЗаполнено(стр.Сотрудник) Тогда
				ТЗ.Удалить(стр);
			КонецЕсли;
		Иначе
			ТЗ.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;

	// Теперь надо получить ФИО сотрудников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ1", ТЗ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ1.Объект,
	               |	ТЗ1.РольПользователя,
	               |	ТЗ1.Сотрудник
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	&ТЗ1 КАК ТЗ1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.Объект,
	               |	ТЗ.Сотрудник,
	               |	ФИОФизЛицСрезПоследних.Фамилия,
	               |	ФИОФизЛицСрезПоследних.Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	               |		ПО ТЗ.Сотрудник = ФИОФизЛицСрезПоследних.ФизЛицо";
	ТЗ1 = Запрос.Выполнить().Выгрузить();
	#КонецОбласти
	
	ФИОТехн_Получатель = "";
	СтрТехн = ТЗ1.Найти(Ссылка.Контрагент);
	Если СтрТехн <> Неопределено Тогда
		Если СокрЛП(СтрТехн.Фамилия) <> "" Тогда
			ФИОТехн_Получатель = СокрЛП(СтрТехн.Фамилия) + " " + Лев(СокрЛП(СтрТехн.Имя), 1) + " " + Лев(СокрЛП(СтрТехн.Отчество), 1);
		КонецЕсли;
	КонецЕсли;
	
	// Начинаем формировать печатную форму
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_АктУтилизации";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Очистить();
	
	// Заполняем заголовок печатной формы
	Макет = Документы.ВозвратТоваровПоставщику.ПолучитьМакет("АктУтилизации");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьЗаголовок.Параметры.Поставщик = ТекПоставщик;
	ОбластьЗаголовок.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	ОбластьЗаголовок.Параметры.Дата = Формат(?(Ссылка.ДатаИсходящегоДокумента = Дата("00010101000000"), 
												Ссылка.Дата, Ссылка.ДатаИсходящегоДокумента), "ДЛФ=DD");
	ОбластьЗаголовок.Параметры.ПричинаУничтожения = ПричинаУничтожения;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	// Выводит строки
	Для каждого стр из Ссылка.Товары Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, стр);
		ОбластьСтрока.Параметры.Цена = стр.Сумма - стр.СуммаНДС;
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.СуммаВсегоПрописью = ЧислоПрописью(Ссылка.Товары.Итог("Сумма"),, "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	ОбластьИтого.Параметры.СуммаВсегоНДС = Ссылка.Товары.Итог("СуммаНДС");
	ОбластьИтого.Параметры.ДатаПроведения = Формат(ДатаПроведения, "ДЛФ=D");
	ОбластьИтого.Параметры.ФИОТехн_Получатель = СокрЛП(ФИОТехн_Получатель);
	
	ТабДок.Вывести(ОбластьИтого);
	
	ТабДок.Область("ПричинаУничтожения").Защита = Ложь;

	Возврат ТабДок;
	
КонецФункции

//+++АК sils 16.02.2018 ИП-00017839
Функция ПроверитьРасходныйОрдер(СсылкаНаОбъект)
	// Проверим, что документ подходит
	Если СсылкаНаОбъект.РасходныеОрдера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//+++АК sils 16.02.2018 ИП-00017839
Функция ПроверитьЗаданиеТехнолога(СсылкаНаОбъект)
	// Проверим, что документ подходит
	Док_РасхОрдерСклад = СсылкаНаОбъект.РасходныеОрдера[0].РасходныйОрдер;
	Док_ЗаданиеТехнолога = Док_РасхОрдерСклад.Основание;
	Если не (ЗначениеЗаполнено(Док_ЗаданиеТехнолога) и ТипЗнч(Док_ЗаданиеТехнолога) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")) Тогда
	    Возврат Ложь;
	КонецЕсли;
	Если Док_ЗаданиеТехнолога.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазинов Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//shae 2018.08.07 ИП-00019236 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(ЭтотОбъект.Организация, ЭтотОбъект.Товары.Выгрузить(), Отказ);	

КонецПроцедуры

//+++АК luza 2018.08.23 ИП-00019074
Процедура ОтправитьПоЭДО(ТипДокумента) Экспорт	
	Отказ = Ложь;
	
	Если Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ!", Отказ);		
	КонецЕсли;	
	
	Если ЭтотОбъект.Модифицированность() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ!", Отказ);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.НомерИсходящегоСчетаФактуры) = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен номер исходящего счета фактуры!", Отказ);		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаИсходящегоСчетаФактуры) = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена дата исходящего счета фактуры!", Отказ);		
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЭДО_ОбщегоНазначения.ОтправитьДокументЭДО(ЭтотОбъект.Ссылка, ТипДокумента);
	
	Если Результат.ДокументОтправлен = Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не был отправлен", Отказ);				
		ОбщегоНазначения.СообщитьОбОшибке(Результат.ТекстОшибки, Отказ);				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//+++АК Susk (Суслин К.В.) 2018.10.31 ИП-00020387
	//запишем еще отложенные действия
	Если мЭтоНовыйОбъект Тогда		
		ПользователиПолныеПрава.ЗаписатьОтложенноеДействиеДляОбъекта(Ссылка, Перечисления.ВидыОтложенныхДействийСОбъектами.СинхронизацияНомеровСчетФактур);
	КонецЕсли;
	//---АК Susk (Суслин К.В.)
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
мЭтоНовыйОбъект = Ложь;
