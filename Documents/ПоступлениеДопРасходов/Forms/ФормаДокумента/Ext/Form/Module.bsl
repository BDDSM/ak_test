
Процедура ОбработатьВыборКонтрагента(пКонтрагент)
	
	Если пКонтрагент.Пустая()
			ИЛИ Объект.Организация.Пустая() Тогда
		Если НЕ Объект.ДоговорКонтрагента.Пустая() Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"	, пКонтрагент);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Если Объект.ДоговорКонтрагента.Пустая() Тогда
			Объект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(Объект.Организация, пКонтрагент,
											?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		КонецЕсли;
		Если Объект.ДоговорКонтрагента.Пустая() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		Объект.Контрагент 			= Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Сообщить("Запрещено выбирать контрагента, у которого нет договора с организацией """ + Объект.Организация + """");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииНаСервере()
	
	ОбработатьВыборКонтрагента(Объект.Контрагент);
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Объект.ВариантРасчетаНДС 	= ?(Объект.ДоговорКонтрагента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	Объект.СтавкаНДС 			= Объект.ДоговорКонтрагента.СтавкаНДС;
	
	РасчитатьСуммуНДС();
	
	ЗаполнитьКППКонтрагента(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ВидимостьКолонок()
	
	мВидимость = НЕ Объект.НеВыгружатьВБУ;
	Элементы.ТоварыСчетУчета.Видимость 		= мВидимость;
	Элементы.ТоварыСчетУчетаНУ.Видимость 	= мВидимость;
	
	СводныйАктЗаПериодПриИзменении(Неопределено);
	
	//+++susk
	Элементы.ТоварыСуммаРаспределено.Видимость = Объект.Дата >= Дата("20170901");
	Элементы.ТоварыСуммаНДСРаспределено.Видимость = Объект.Дата >= Дата("20170901");
	//---susk
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСтраниц()
	
	//мВидимость = Истина; //НЕ Объект.НеВыгружатьВБУ;
	
	Если Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоНоменклатуре Тогда
		мВидимость = Истина;
	Иначе
		мВидимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВидимостьКолонок();
	
	ВидимостьСтраниц();

	
	//+++АК SHEP 20170228 ИП-00015087
	РассчитатьСуммыДокумента(Ложь);
	//---АК SHEP 20170228
	
	ТранспортныеУслугиПриИзменении(Элементы.ТранспортныеУслуги); //+++АК SHEP 2018.01.17 ИП-00017365.02
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Поступление доп. расходов");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если Объект.Ссылка.Пустая() Тогда
					
		Если НЕ ЗначениеЗаполнено(Объект.ВариантРасчетаНДС)Тогда
			Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаУпрФорма(Объект, "Покупка", Объект.Ссылка.Метаданные());
		
		ВыгружатьПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Выгружать_в_БП_ДокументыПоПоступлению");
		Если ЗначениеЗаполнено(ВыгружатьПоУмолчанию) Тогда
			Объект.НеВыгружатьВБУ = НЕ ВыгружатьПоУмолчанию;
		Иначе
			Объект.НеВыгружатьВБУ = Истина;
		КонецЕсли;
		//АК БЕЛН 13.03.17+
		Объект.НеВыгружатьВБУ = Ложь;
		//АК БЕЛН 13.03.17-
		Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу;
	Иначе
		ЗаполнитьПрикрепленныеФайлы();
	КонецЕсли;	
	
	УстановитьВидимостьКолонкиОсновноеСредство();
	
	//++ АК LUZA 13.02.2018 ИП-00017231.02
	ЗаполнитьТекстПроСчетФактуру();
	//-- АК LUZA 13.02.2018 ИП-00017231.02
	
	//+++ АК luza ИП-00020317 14.11.18
	ЗаполнитьКППКонтрагента();
	//--- АК luza ИП-00020317 14.11.18

	
КонецПроцедуры

//++ АК luza ИП-00017231.01 28.12.17
Процедура ЗаполнитьТекстПроСчетФактуру() 
	  		
	Если ЗначениеЗаполнено(Объект.НомерВходящегоСчетаФактуры) = Истина Или ЗначениеЗаполнено(Объект.ДатаВходящегоСчетаФактуры) = Истина Тогда
		ПредъявленСФ = Истина;			
	Иначе
		ПредъявленСФ = Ложь;						
	КонецЕсли;	
	
	Элементы.ГруппаНомерДатаСФ.Видимость = ПредъявленСФ;
	Элементы.СтрокаСФ.Видимость = НЕ ПредъявленСФ;
	
	Если ПредъявленСФ = Истина Тогда
		СтрокаСФ= "№ "+?(ПустаяСтрока(Объект.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(Объект.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(Объект.ДатаВходящегоСчетаФактуры), Формат(Объект.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";		
	Иначе			
		фСчетФактура = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(Объект.Ссылка, "СчетФактураПолученный");
		
		Если ЗначениеЗаполнено(фСчетФактура) = Истина И ТипЗнч(фСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СтрокаСФ= "№ "+?(ПустаяСтрока(фСчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(фСчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(фСчетФактура.ДатаВходящегоДокумента), Формат(фСчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		Иначе		
			СтрокаСФ = "Ввести счет-фактуру";
		КонецЕсли;						
		
	КонецЕсли;		
		
	//ПредъявленСФПриИзменении(Неопределено);

КонецПроцедуры 
//-- АК luza ИП-00017231.01 28.12.17

&НаСервере
Процедура ЗаполнитьКППКонтрагента(Заменить = Ложь)
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() = Истина Или Заменить Тогда
		КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПоступлениеДопРасходов.Контрагент.КПП) КАК КППКонтрагента
		               |ИЗ
		               |	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |		ПО ПоступлениеДопРасходов.Ссылка = ЗначенияСвойствОбъектов.Объект
		               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
		               |ГДЕ
		               |	ПоступлениеДопРасходов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КППКонтрагента = Выборка.КППКонтрагента;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКППКонтрагента(СсылкаНаДокумент, КППКонтрагента) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПоступлениеДопРасходов.Контрагент.КПП, """") <> &КПП
	               |		И &КПП <> """" КАК Добавить,
	               |	НЕ ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL КАК Добавлено,
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, """") = &КПП КАК ЗначенияРавны
	               |ИЗ
	               |	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ПоступлениеДопРасходов.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
	               |ГДЕ
	               |	ПоступлениеДопРасходов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("КПП", КППКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Добавить Тогда
			Если Выборка.ЗначенияРавны Тогда
				Возврат;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаДокумент);
			НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.КППКонтрагента);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = СсылкаНаДокумент;
			НоваяЗапись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.КППКонтрагента;
			НоваяЗапись.Значение = КППКонтрагента;
			
			НаборЗаписей.Записать();
		ИначеЕсли Выборка.Добавлено Тогда  
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаДокумент);
			НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.КППКонтрагента);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьКолонкиОсновноеСредство()
	
	ЕстьОсновныеСредства = Ложь;
	ТаблицаОС = Объект.Товары.Выгрузить(,"ОсновноеСредство");
	ТаблицаОС.Свернуть("ОсновноеСредство");
	Если ТаблицаОС.Количество() > 0 Тогда
		Если ТаблицаОС[0].ОсновноеСредство <> Справочники.ОсновныеСредства.ПустаяСсылка() Тогда
			ЕстьОсновныеСредства = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТоварыОсновноеСредство.Видимость = ЕстьОсновныеСредства;
	
КонецПроцедуры	

&НаСервере
Процедура РасчитатьСуммуНДС()
	
	УчитыватьНДС 		= ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС"), Ложь, Истина);
	СуммаВключаетНДС 	= (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	Объект.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Объект.Сумма,
										   		 УчитыватьНДС, СуммаВключаетНДС,
												 УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
КонецПроцедуры	

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	РасчитатьСуммуНДС();
	РассчитатьСуммыДокумента();
	
КонецПроцедуры


&НаКлиенте
Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	РасчитатьСуммуНДСТабличнойЧасти();
	РасчитатьСуммуНДС();
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РасчитатьСуммуНДСТабличнойЧасти();
	РасчитатьСуммуНДС();
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуНДСТабличнойЧасти()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Сумма = 0 Тогда
			РассчитатьСуммуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти)
	
	УчитыватьНДС 		= ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС"), Ложь, Истина);
	СуммаВключаетНДС 	= (Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"));
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
																УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
КонецПроцедуры

&НаКлиенте
Процедура НеВыгружатьВБУПриИзменении(Элемент)
	
	ВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыДокумента(РассчитыватьСуммуДокумента = Истина)
	
	СуммаДокументаБезТЧ = ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"),
								Объект.Сумма,
								Объект.Сумма + Объект.СуммаНДС);
	ИтогСумма 	= Объект.Товары.Итог("Сумма");
	ИтогНДС 	= Объект.Товары.Итог("СуммаНДС");
	
	//+++АК SHEP 20170228 ИП-00015087: добавил условие для расчёта НДС при открытии
	Если РассчитыватьСуммуДокумента Тогда
	Объект.СуммаДокумента = СуммаДокументаБезТЧ +
							?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"),
								ИтогСумма,
								ИтогСумма + ИтогНДС);
	КонецЕсли;
	//---АК SHEP 20170228
	
	СуммаНДСДокумента = Объект.СуммаНДС + ИтогНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПолученныхДокументовПриИзменении(Элемент)
	
	Объект.ДокументыПолучены = ЗначениеЗаполнено(Объект.СтатусПолученныхДокументов);
	
КонецПроцедуры

Процедура ЗаполнитьСводныйАктЗаПериодСервер()
	
	//
	Запрос = Новый Запрос;			 
	Запрос.УстановитьПараметр("НачПериода"	, Объект.СводныйАктПериодС);
	Запрос.УстановитьПараметр("КонПериода"	, КонецДня(Объект.СводныйАктПериодПо));
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент"	, Объект.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйОборотыДтКт.СубконтоДт2 КАК Номенклатура,
	|	СУММА(ФинансовыйОборотыДтКт.СуммаОборот) КАК Сумма,
	|	ФинансовыйОборотыДтКт.Регистратор
	|ПОМЕСТИТЬ ДопРасходы
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОборотыДтКт(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочаяЗадолженность),
	|			,
	|			СубконтоКт1 = &Организация
	|				И СубконтоКт2 = &Контрагент) КАК ФинансовыйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОборотыДтКт.СубконтоДт2,
	|	ФинансовыйОборотыДтКт.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер) КАК ПриходныйОрдер,
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка КАК ТранспортныеРасходы,
	|	ПриходныйОрдерСкладТовары.Номенклатура
	|ПОМЕСТИТЬ ТР
	|ИЗ
	|	Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер = ПриходныйОрдерСкладТовары.Ссылка
	|ГДЕ
	|	ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер.Проведен
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Проведен
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Перевозчик = &Контрагент
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Организация = &Организация
	|	И ТранспортныеРасходыПриходныеОрдера.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер),
	|	МаршрутныйЛистПриходныеОрдера.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура
	|ИЗ
	|	Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер = ПриходныйОрдерСкладТовары.Ссылка
	|ГДЕ
	|	МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер.Проведен
	|	И МаршрутныйЛистПриходныеОрдера.Ссылка.Проведен
	|	И МаршрутныйЛистПриходныеОрдера.Ссылка.Перевозчик = &Контрагент
	|	И МаршрутныйЛистПриходныеОрдера.Ссылка.Организация = &Организация
	|	И МаршрутныйЛистПриходныеОрдера.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПриходныеОрдера.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеТоваровУслугПриходныеОрдера.Ссылка) КАК ПоступлениеТоваров,
	|	ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер
	|ПОМЕСТИТЬ Партии
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
	|ГДЕ
	|	ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер.Проведен
	|	И ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер В
	|			(ВЫБРАТЬ
	|				ТР.ПриходныйОрдер
	|			ИЗ
	|				ТР КАК ТР)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРасходы.Номенклатура,
	|	ДопРасходы.Сумма КАК Сумма,
	|	МАКСИМУМ(Партии.ПоступлениеТоваров) КАК Партия,
	|	ДопРасходы.Регистратор КАК ТранспортныеРасходы,
	|	ТР.ПриходныйОрдер КАК ПриходныйОрдер
	|ПОМЕСТИТЬ документы
	|ИЗ
	|	ДопРасходы КАК ДопРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТР КАК ТР
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Партии КАК Партии
	|			ПО ТР.ПриходныйОрдер = Партии.ПриходныйОрдер
	|		ПО ДопРасходы.Регистратор = ТР.ТранспортныеРасходы
	|			И ДопРасходы.Номенклатура = ТР.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДопРасходы.Номенклатура,
	|	ДопРасходы.Сумма,
	|	ДопРасходы.Регистратор,
	|	ТР.ПриходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Номенклатура,
	|	Документы.Сумма КАК Сумма,
	|	Документы.Партия,
	|	Документы.ТранспортныеРасходы,
	|	Документы.ПриходныйОрдер,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
	|					ТОГДА (ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС) / ПоступлениеТоваровУслугТовары.Количество
	|				ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма / ПоступлениеТоваровУслугТовары.Количество
	|			КОНЕЦ
	|	КОНЕЦ * ПриходныйОрдерСкладТовары.Количество КАК СтоимостьПартии,
	|	ПриходныйОрдерСкладТовары.Количество КАК Количество
	|ИЗ
	|	документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО Документы.ПриходныйОрдер = ПриходныйОрдерСкладТовары.Ссылка
	|			И Документы.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО Документы.Партия = ПоступлениеТоваровУслугТовары.Ссылка
	|			И Документы.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Объект.Товары.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	

КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСводныйАктЗаПериод(Команда)
	
	ЗаполнитьСводныйАктЗаПериодСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйАктЗаПериодПриИзменении(Элемент)
	
	Элементы.ГруппаСводныйАкПараметры.Видимость = Объект.СводныйАктЗаПериод;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	АК_УчетМСФО.ОчиститьДляНепроведенныхДатуОтраженияМСФО(ТекущийОбъект);
	ЗаписатьКППКонтрагента(Объект.Ссылка, КППКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	АК_УчетМСФО.УстановитьДатуОтраженияМСФО(ТекущийОбъект);
	
	//+++АК SHEP 2018.01.31 ИП-00017365.02
	Если Объект.ТранспортныеУслуги Тогда
		ТранспортныеДокументыИтог = Объект.ТранспортныеДокументы.Итог("СуммаДокумента");
		ТоварыИтог = Объект.Товары.Итог("Сумма");
		Если ТранспортныеДокументыИтог <> ТоварыИтог Тогда
			Сообщить("Сумма по транспортным документам (" + Формат(ТранспортныеДокументыИтог, "ЧДЦ=2; ЧН=") + ") не совпадает с суммой товаров (" + Формат(ТоварыИтог, "ЧДЦ=2; ЧН=") + ")!");
			Сообщить("Необходимо перезаполнить табличную часть «Товары» по транспортным документам!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СуммаДокументаБезТЧ = ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"),
									Объект.Сумма,
									Объект.Сумма + Объект.СуммаНДС);
		ИтогСумма 	= Объект.Товары.Итог("Сумма");
		ИтогНДС 	= Объект.Товары.Итог("СуммаНДС");
		
		СуммаДокументаДолжно = СуммаДокументаБезТЧ + ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"), ИтогСумма, ИтогСумма + ИтогНДС);
		
		Если Объект.СуммаДокумента <> СуммаДокументаДолжно Тогда
			Сообщить("Сумма документа (" + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧН=") + ") не совпадает с итоговой суммой по товарам (" + Формат(СуммаДокументаДолжно, "ЧДЦ=2; ЧН=") + ")!");
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	//---АК SHEP 2018.01.31
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не ЗначениеЗаполнено(Объект.ЗаявкаНаРсходованиеСредств) Тогда
		//+++АК Susk (Суслин К.В.) 2018.11.29
		//Если Объект.Товары.Количество()>0
		Если Объект.Товары.Количество()>0 И Объект.Товары[0].СчетУчета <> ПредопределенноеЗначение("ПланСчетов.Финансовый.Товары") Тогда
		//---АК Susk (Суслин К.В.) 
			Если ЗначениеЗаполнено(Объект.Товары[0].Партия.ДокументОснование) И ТипЗнч(Объект.Товары[0].Партия.ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
				Заявка = Объект.Товары[0].Партия.ДокументОснование;
				Режим = РежимДиалогаВопрос.ДаНет;
				Текст = "Использовать для документа заявку на услуги документа поступления - "+Заявка+" ?";
				Ответ = Вопрос(Текст, Режим, 0);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда				    
					Объект.ЗаявкаНаРсходованиеСредств = Заявка;
				КонецЕсли;

			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.)
	Счет081 = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков");	
	Для Каждого Стр Из Объект.Товары Цикл		
		Если Стр.СчетУчета = Счет081 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + Строка(Стр.НомерСтроки) + " счет БУ не может быть равен ""08.01""!", Отказ);
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.05.15 ИП-00018675
		//по письму Сазановой 		 
		Если НЕ Объект.НеВыгружатьВБУ И Стр.СчетУчета <> Стр.СчетУчетаНУ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + Строка(Стр.НомерСтроки) + " указаны различные счета БУ и НУ!", Отказ);
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
	КонецЦикла;
	
	//+++ ИП-00016544
	// отходим от проблемы, когда доп расход в 1 числе в 0-00-00 - доп расход влияет на расчет амортизации, хотя не должен
	Если Объект.Дата = НачалоМесяца(Объект.Дата) Тогда
		Объект.Дата = Объект.Дата + 1;
	КонецЕсли;
	//---
	
	//---susk
	
КонецПроцедуры


&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции
&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура АктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура АктОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.СчетФактура = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СчетФактураОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.СчетФактура);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Приложение = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Приложение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не Объект.ДокументыПолучены Тогда
			//Отказ = Истина;
			//Сообщить("Внимание! Проведение без ""Документы получены"" запрещено.",СтатусСообщения.ОченьВажное);
		КонецЕсли;	
		Если Объект.ДокументыПолучены И НЕ Объект.СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО Тогда
			Если Не ЗначениеЗаполнено(Объект.УПД) Тогда
				Если НЕ ЗначениеЗаполнено(Объект.Акт) Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана акта/накладной или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) И Объект.ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана фактуры или УПД будет запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//+++ АК luza 22.10.2018 ИП-00020093
	Если ФайлАктСверки <> ТекФайлАктСверки Тогда
		ЗаписатьПрикрепленныеФайлыСервер();
	КонецЕсли;	
	//-- АК luza 
КонецПроцедуры

&НаКлиенте
Процедура УПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.УПД);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.УПД = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОсновноеСредствоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
	Если ТекущаяСтрока <> Неопределено Тогда
			ЗаполнитьСтрокуПоОС(ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаполнитьСтрокуПоОС(ТекущаяСтрока)
	
	ДанныеПоступления = АК_ОсновныеСредства.ПолучитьДанныеПоступления(ТекущаяСтрока.ОсновноеСредство);	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ДанныеПоступления); 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыПоОС(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ОсновноеСредство",ТекущаяСтрока.ОсновноеСредство);
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ДокументыПоОС", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("60.7") Тогда
		Предупреждение("Счет 60.7 упразднен. Вместо него необходимо использовать счет 60.4.");
	КонецЕсли;
КонецПроцедуры

#Область АК_ОтключенныйКод
//+++susk
//закоментил. Сделал по другому. Задача ИП-00016878

// +++ АК Зайцева А. 15689
//&НаКлиенте
//Процедура ВыгрузитьВБП(Команда)
//	Если Параметры.Ключ.Пустая() Тогда
//		Сообщить("Сначала нужно записать документ");
//		Возврат;
//	КонецЕсли;	
//	
//	Если ЭтаФорма.Модифицированность Тогда
//		Сообщить("Документ был изменен. Сначала нужно записать документ");
//		Возврат;
//	КонецЕсли;
//	
//	Если Объект.НеВыгружатьВБУ Тогда
//		Сообщить("Документ нельзя выгрузить, установлена галочка 'Не выгружать в БУ'");
//		Возврат;
//	КонецЕсли;

//	//+++susk
//	//ИП-00016878
//	
//	//СтрокаПодключения = "Srvr=""10.0.0.41""; Ref=""BP_CORP""; Usr=""Обмен""; Pwd=""123321""";
//	////СтрокаПодключения = "Srvr=""10.0.0.41""; Ref=""BP_CORP_deb""; Usr=""Обмен""; Pwd=""123321""";
//	//v82COMОбъект = Новый COMОбъект("v82.COMConnector");
//	//
//	//Попытка
//	//	v82 = v82COMОбъект.Connect(СтрокаПодключения);
//	//	ПодключениеУстановлено = Истина;
//	//Исключение
//	//	ПодключениеУстановлено = Ложь;
//	//	Сообщить("Не удалось подключиться к базе бухгалтерии");
//	//	Возврат;
//	//КонецПопытки;
//	
//	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
//	
//	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
//	Попытка
//		v82 = v82COMОбъект.Connect(СтрокаПодключения);
//		ПодключениеУстановлено=Истина;
//	Исключение
//		ПодключениеУстановлено=Ложь;
//		Сообщить("Не удалось подключиться к базе бухгалтерии!");
//		Возврат;
//	КонецПопытки;

//	//---susk	
//	
//	///////////////////////////////
//	ЗапросДатыЗапрета = v82.NewObject("Запрос");  
//			
//	ЗапросДатыЗапрета.Текст =
//	"ВЫБРАТЬ
//	|	ГраницыЗапретаИзмененияДанных.Организация.ИНН КАК ИНН,
//	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
//	|ИЗ
//	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
//	|ГДЕ
//	|	ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
//	ДатыЗапрета = ЗапросДатыЗапрета.Выполнить().Выгрузить();

//	
//	ДатаЗапрета = Неопределено;
//	Если ДатыЗапрета.Количество() > 0 Тогда
//		НашлиДата = ДатыЗапрета.Найти(Объект.Организация.ИНН, "ИНН");
//		Если НЕ НашлиДата = Неопределено Тогда
//			ДатаЗапрета = НашлиДата.ГраницаЗапретаИзменений;
//			Если НашлиДата.ГраницаЗапретаИзменений > Объект.Дата Тогда //Передумали, опять не грузим
//				Сообщить("В бухгалтерии закрыт период, документ не будет выгружен");
//				Возврат;
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;
//	
//	пОбработка = Обработки.ВыгрузкаПлатежныхДокументовВБухгалтерию.Создать();
//	пОбработка.ИмяФайлаПравилОбмена 				= "Правила обмена загружены";
//	пОбработка.НепосредственноеЧтениеВИБПриемнике 	= Истина;
//	пОбработка.ТипИнформационнойБазыДляПодключения 	= Ложь;
//	пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= "V82";
//	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 			= "10.0.0.41";
//	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= "BP_CORP_deb";
//	
//	//+++susk
//	
//	//пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= "10.0.0.41";
//	//пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= "BP_CORP";
//	//пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
//	//пОбработка.ПользовательИнформационнойБазыДляПодключения 			= "Обмен";
//	//пОбработка.ПарольИнформационнойБазыДляПодключения 					= "123321";
//	
//	пОбработка.ВерсияПлатформыИнформационнойБазыДляПодключения 			= ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух();
//	СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
//	пОбработка.ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
//	пОбработка.ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
//	пОбработка.АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
//	пОбработка.ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
//	пОбработка.ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
//	
//	//---susk
//	
//	пОбработка.ИспользоватьТранзакции 				= Истина;
//	пОбработка.КоличествоОбъектовНаТранзакцию 		= 1000000;
//	пОбработка.ФлагРежимОтладки 					= Истина;
//	
//	пОбработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2;
//	
//	пОбработка.ИмяМакета = "ПравилаОбменаДанными";
//	пМакет = пОбработка.ПолучитьМакет("ПравилаОбменаДанными");
//	пОбработка.ЗагрузитьПравилаОбмена(пМакет.ПолучитьТекст(), "Строка");
//	пОбработка.ИнициализироватьПервоначальныеЗначенияПараметров();
//	
//	Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ПоступлениеДопРасходовИзменения.Ссылка
//				   |ИЗ
//				   |	Документ.ПоступлениеДопРасходов.Изменения КАК ПоступлениеДопРасходовИзменения
//				   |ГДЕ
//				   |	ПоступлениеДопРасходовИзменения.Узел = &Узел";
//	Запрос.УстановитьПараметр("Узел", Узел);			   
//	ИзмененияПлана  = Запрос.Выполнить().Выгрузить();	
//	
//	СтрокиДереваПравилВыгрузки = пОбработка.ТаблицаПравилВыгрузки.Строки;
//	
//	Для Каждого Строка Из ИзмененияПлана Цикл
//		Если Строка.Ссылка <> Объект.Ссылка Тогда 
//			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Строка.Ссылка);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если ИзмененияПлана.Найти(Объект.Ссылка, "ссылка") = Неопределено Тогда 
//		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Объект.Ссылка);
//	КонецЕсли;
//	
//	Для Каждого СтрокаДерева из СтрокиДереваПравилВыгрузки Цикл
//		Если СтрокаДерева.Имя = "Документы"	Тогда
//			СтрокаДерева.Включить = 1;
//			ПравилаВсе = СтрокаДерева.Строки;
//		Иначе
//			СтрокаДерева.Включить = 0;
//		КонецЕсли;
//	КонецЦикла;
//	
//	// документы
//	Для каждого Правило из ПравилаВсе Цикл
//		Если Правило.Имя = "ПоступлениеДопРасходов" Тогда
//			Правило.Включить 			= 1;
//			Правило.СсылкаНаУзелОбмена	= Узел;
//		Иначе	
//			Правило.Включить 			= 0;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	пОбработка.ВыполнитьВыгрузку();
//	
//	ОчиститьСообщения();
//	
//	Для Каждого Строка Из ИзмененияПлана Цикл
//		Если Строка.Ссылка <> Объект.Ссылка Тогда 
//			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.Ссылка);
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

// --- АК Зайцева А. 15689

//сделал так:
#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьВБП(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	
	Если ЭтаФорма.Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ");
		Возврат;
	КонецЕсли;
	
	Если Объект.НеВыгружатьВБУ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У документа стоит флаг ""Не выгружать в БУ"", выгрузка документа невозможна!");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВБПСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВБПСервер()
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("ПоступлениеДопРасходов", "ПоступлениеДопРасходов", Объект.Ссылка); 
	
КонецПроцедуры

//---susk

//---АК ZHAS 18-08-17 -- ИП-00016175
&НаКлиенте
Процедура ЗаполнитьПоПредПоступлению(Команда)
	ЗаполнитьПоПредПоступлениюСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПредПоступлениюСервер()
	Объект.НоменклатураДопОборудование.Очистить();
	
	пКопияТовары = Объект.Товары.Выгрузить();
	пКопияТовары.Свернуть("Партия");
	
	СтруктураПустаяПартия = Новый Структура("Партия", Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	СтрокаБезПартии = пКопияТовары.Найти(СтруктураПустаяПартия, "Партия");
	
	Если СтрокаБезПартии <> Неопределено Тогда
		пКопияТовары.Удалить(СтрокаБезПартии);
	КонецЕсли;
	
	Если пКопияТовары.Количество() = 0 Тогда
		Сообщить("Не удалось идентифицировать поступление товаров и услуг для автоматического поиска пред.поступления!", СтатусСообщения.Важное);
	ИначеЕсли пКопияТовары.Количество() > 1 Тогда
		Сообщить("В таблице товаров имеется больше одного поступления товаро и услуг!", СтатусСообщения.Важное);
	Иначе
		
		пТекДокПоступления = пКопияТовары[0].Партия;
		
		пНайденныйДокПредПоступления = Документы.ПредпоступлениеПоКомплектации.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.Ссылка КАК Поступление,
		|	МАКСИМУМ(ПоступлениеТоваровУслугОборудование.Предпоступление) КАК Предпоступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &ВыбранноеПоступление
		|	И ПоступлениеТоваровУслугОборудование.Предпоступление <> ЗНАЧЕНИЕ(Документ.ПредпоступлениеПоКомплектации.ПустаяСсылка)
		|	И ПоступлениеТоваровУслугОборудование.Предпоступление.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугОборудование.Ссылка";
		
		Запрос.УстановитьПараметр("ВыбранноеПоступление", пТекДокПоступления);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			пНайденныйДокПредПоступления = ВыборкаДетальныеЗаписи.Предпоступление;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(пНайденныйДокПредПоступления) Тогда
			
			ЗапросНом = Новый Запрос;
			ЗапросНом.Текст = 
			"ВЫБРАТЬ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка КАК ДокПредПоступление,
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Количество) КАК Количество,
			|	ПредпоступлениеПоКомплектацииТовары.Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ТаблПредПоступления
			|ИЗ
			|	Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
			|ГДЕ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка = &Предпоступление
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			|	ПредпоступлениеПоКомплектацииТовары.Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугОборудование.Ссылка КАК ДокПоступление,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	СУММА(ПоступлениеТоваровУслугОборудование.Сумма) КАК Сумма,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
			|	СУММА(ПоступлениеТоваровУслугОборудование.СуммаНДС) КАК СуммаНДС,
			|	ПоступлениеТоваровУслугОборудование.Сделка,
			|	ПоступлениеТоваровУслугОборудование.Предпоступление
			|ПОМЕСТИТЬ ТаблПоступления
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
			|ГДЕ
			|	ПоступлениеТоваровУслугОборудование.Ссылка = &Поступление
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровУслугОборудование.Ссылка,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
			|	ПоступлениеТоваровУслугОборудование.Сделка,
			|	ПоступлениеТоваровУслугОборудование.Предпоступление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблПредПоступления.ДокПредПоступление,
			|	ТаблПредПоступления.Номенклатура,
			|	ТаблПредПоступления.Количество,
			|	ТаблПредПоступления.Цена,
			|	ТаблПредПоступления.Сделка,
			|	ТаблПредПоступления.СтавкаНДС,
			|	ТаблПредПоступления.СуммаНДС,
			|	ТаблПредПоступления.Сумма,
			|	ТаблПоступления.Номенклатура КАК НоменклатураПоступление
			|ПОМЕСТИТЬ ДляОтбора
			|ИЗ
			|	ТаблПредПоступления КАК ТаблПредПоступления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблПоступления КАК ТаблПоступления
			|		ПО ТаблПредПоступления.ДокПредПоступление = ТаблПоступления.Предпоступление
			|			И ТаблПредПоступления.Сделка = ТаблПоступления.Сделка
			|			И ТаблПредПоступления.СтавкаНДС = ТаблПоступления.СтавкаНДС
			|			И ТаблПредПоступления.Номенклатура = ТаблПоступления.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДляОтбора.ДокПредПоступление КАК Предпоступление,
			|	ДляОтбора.Номенклатура,
			|	ДляОтбора.Количество,
			|	ДляОтбора.Цена,
			|	ДляОтбора.СтавкаНДС,
			|	ДляОтбора.СуммаНДС,
			|	ДляОтбора.Сумма,
			|	ДляОтбора.Сделка,
			|	&Поступление
			|ИЗ
			|	ДляОтбора КАК ДляОтбора
			|ГДЕ
			|	ДляОтбора.НоменклатураПоступление ЕСТЬ NULL ";
			
			ЗапросНом.УстановитьПараметр("Поступление", пТекДокПоступления);
			ЗапросНом.УстановитьПараметр("Предпоступление", пНайденныйДокПредПоступления);
			
			РезультатНом = ЗапросНом.Выполнить();
			
			ВыборкаДетальныеЗаписиНом = РезультатНом.Выбрать();
			
			Пока ВыборкаДетальныеЗаписиНом.Следующий() Цикл
				НоваяСтрока = Объект.НоменклатураДопОборудование.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписиНом);
			КонецЦикла;	
			
		Иначе
			Сообщить("Не удалось найти проведенное пред.поступление для документа: "+ """" + Строка(пТекДокПоступления) + """!", СтатусСообщения.Важное);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДопОборудование(Команда)
	Объект.НоменклатураДопОборудование.Очистить();
КонецПроцедуры

//---АК ZHAS 18-08-17 -- ИП-00016175

//+++susk

&НаКлиенте
Процедура ТоварыСчетЗатратПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	СчетВСтроке = ТекСтрока.СчетЗатрат;
	НоменклатураВСтроке = ТекСтрока.Номенклатура;
	ОборудованиеВСтроке = ТекСтрока.ОсновноеСредство;
	ПартияВСтроке = ТекСтрока.Партия;
	
	ЕстьСчетВПТУ = ПроверкаСчетаВПартии(СчетВСтроке, НоменклатураВСтроке, ОборудованиеВСтроке, ПартияВСтроке);
	
	Если НЕ ЕстьСчетВПТУ
		И СчетВСтроке <> ПланыСчетов.Финансовый.НайтиПоКоду("01.1") Тогда //mind добавил здесь исключение на этот счет, так как при проведении требует поставить этот счет, а при подстановке ругается что не найден счет в партии
		Предупреждение("Данный счет учета отсутствует в документе партии!");
		ТекСтрока.СчетЗатрат = ПланыСчетов.Финансовый.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаСчетаВПартии(СчетВСтроке, НоменклатураВСтроке, ОборудованиеВСтроке, ПартияВСтроке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугУслуги.Ссылка
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |ГДЕ
	               |	ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	               |	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатрат
	               |	И ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугОборудование.Ссылка
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	               |ГДЕ
	               |	ПоступлениеТоваровУслугОборудование.ОсновноеСредство = &ОсновноеСредство
	               |	И ПоступлениеТоваровУслугОборудование.СчетУчета = &СчетЗатрат
	               |	И ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураВСтроке);
	Запрос.УстановитьПараметр("СчетЗатрат", СчетВСтроке);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОборудованиеВСтроке);
	Запрос.УстановитьПараметр("Ссылка", ПартияВСтроке);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура СпособРаспределенияПриИзменении(Элемент)
	ВидимостьСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ВидимостьКолонок();
	
КонецПроцедуры

//---susk

//---АК ZHAS 28-08-17 -- ИП-00016175.01

&НаСервере
Процедура ЗаполнитьПоПредПоступлениюВручнуюНаСервере(пВыбранныйДокПредПоступления)
	
	Объект.НоменклатураДопОборудование.Очистить();
	
	пТекДокПоступления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка КАК Поступление
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Предпоступление = &ВыбранноеПредПоступление
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугОборудование.Ссылка";
	
	Запрос.УстановитьПараметр("ВыбранноеПредПоступление", пВыбранныйДокПредПоступления);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	КНайдено = ВыборкаДетальныеЗаписи.Количество();
	
	Если КНайдено > 1 Тогда
		
		Сообщить("По выбранному пред.поступлению обнаружено больше одного поступления товаро и услуг!", СтатусСообщения.Важное);
		
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			пТекДокПоступления = ВыборкаДетальныеЗаписи.Поступление;
		КонецЦикла;
		
		ЗапросНом = Новый Запрос;
		
		Если ЗначениеЗаполнено(пТекДокПоступления) Тогда
			
			ЗапросНом.Текст = 
			"ВЫБРАТЬ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка КАК ДокПредПоступление,
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Количество) КАК Количество,
			|	ПредпоступлениеПоКомплектацииТовары.Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Сумма) КАК Сумма,
			|	ИСТИНА КАК ДобавленоВРучную
			|ПОМЕСТИТЬ ТаблПредПоступления
			|ИЗ
			|	Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
			|ГДЕ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка = &Предпоступление
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			|	ПредпоступлениеПоКомплектацииТовары.Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоступлениеТоваровУслугОборудование.Ссылка КАК ДокПоступление,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	СУММА(ПоступлениеТоваровУслугОборудование.Сумма) КАК Сумма,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
			|	СУММА(ПоступлениеТоваровУслугОборудование.СуммаНДС) КАК СуммаНДС,
			|	ПоступлениеТоваровУслугОборудование.Сделка,
			|	ПоступлениеТоваровУслугОборудование.Предпоступление
			|ПОМЕСТИТЬ ТаблПоступления
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
			|ГДЕ
			|	ПоступлениеТоваровУслугОборудование.Ссылка = &Поступление
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровУслугОборудование.Ссылка,
			|	ПоступлениеТоваровУслугОборудование.Номенклатура,
			|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
			|	ПоступлениеТоваровУслугОборудование.Сделка,
			|	ПоступлениеТоваровУслугОборудование.Предпоступление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблПредПоступления.ДокПредПоступление,
			|	ТаблПредПоступления.Номенклатура,
			|	ТаблПредПоступления.Количество,
			|	ТаблПредПоступления.Цена,
			|	ТаблПредПоступления.Сделка,
			|	ТаблПредПоступления.СтавкаНДС,
			|	ТаблПредПоступления.СуммаНДС,
			|	ТаблПредПоступления.Сумма,
			|	ТаблПоступления.Номенклатура КАК НоменклатураПоступление,
			|	ТаблПредПоступления.ДобавленоВРучную
			|ПОМЕСТИТЬ ДляОтбора
			|ИЗ
			|	ТаблПредПоступления КАК ТаблПредПоступления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблПоступления КАК ТаблПоступления
			|		ПО ТаблПредПоступления.ДокПредПоступление = ТаблПоступления.Предпоступление
			|			И ТаблПредПоступления.Сделка = ТаблПоступления.Сделка
			|			И ТаблПредПоступления.СтавкаНДС = ТаблПоступления.СтавкаНДС
			|			И ТаблПредПоступления.Номенклатура = ТаблПоступления.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДляОтбора.ДокПредПоступление КАК Предпоступление,
			|	ДляОтбора.Номенклатура,
			|	ДляОтбора.Количество,
			|	ДляОтбора.Цена,
			|	ДляОтбора.СтавкаНДС,
			|	ДляОтбора.СуммаНДС,
			|	ДляОтбора.Сумма,
			|	ДляОтбора.Сделка,
			|	&Поступление,
			|	ДляОтбора.ДобавленоВРучную
			|ИЗ
			|	ДляОтбора КАК ДляОтбора
			|ГДЕ
			|	ДляОтбора.НоменклатураПоступление ЕСТЬ NULL";
			
			ЗапросНом.УстановитьПараметр("Поступление", пТекДокПоступления);
			ЗапросНом.УстановитьПараметр("Предпоступление", пВыбранныйДокПредПоступления);
			
			
		Иначе
			
			ЗапросНом.Текст = 
			"ВЫБРАТЬ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка КАК Предпоступление,
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура КАК Номенклатура,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Количество) КАК Количество,
			|	ПредпоступлениеПоКомплектацииТовары.Цена КАК Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка КАК Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС КАК СтавкаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ПредпоступлениеПоКомплектацииТовары.Сумма) КАК Сумма,
			|	ИСТИНА КАК ДобавленоВРучную,
			|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК Поступление
			|ИЗ
			|	Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
			|ГДЕ
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка = &Предпоступление
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
			|	ПредпоступлениеПоКомплектацииТовары.Цена,
			|	ПредпоступлениеПоКомплектацииТовары.Сделка,
			|	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
			|	ПредпоступлениеПоКомплектацииТовары.Ссылка";
			
			ЗапросНом.УстановитьПараметр("Предпоступление", пВыбранныйДокПредПоступления);
			
		КонецЕсли;
		
		РезультатНом = ЗапросНом.Выполнить();
		
		Если НЕ РезультатНом.Пустой() Тогда
			
			ВыборкаДетальныеЗаписиНом = РезультатНом.Выбрать();
			
			Пока ВыборкаДетальныеЗаписиНом.Следующий() Цикл
				НоваяСтрока = Объект.НоменклатураДопОборудование.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписиНом);
			КонецЦикла;	
			
		Иначе
			
			Если ЗначениеЗаполнено(пТекДокПоступления) Тогда
				Сообщить("Для документа <" + пВыбранныйДокПредПоступления + "> уже использован весь товар документом <"  + пТекДокПоступления + ">!", СтатусСообщения.Важное);
			Иначе
				Сообщить("Документ <" + пВыбранныйДокПредПоступления + "> не содержит товар для добавления в поступление доп.расходов!", СтатусСообщения.Важное);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредПоступлениюВручную(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент, Проведен", Объект.Контрагент, Истина));
	
	//---АК ZHAS 29-08-17 -- ИП-00016175.01
	ПараметрыФормы.Вставить("ПодборВДопРасходы", Истина);
	ПараметрыФормы.Вставить("ДокДопРасходов", Объект.Ссылка);
	//---АК ZHAS 29-08-17 -- ИП-00016175.01
	
	ПредпоступлениеВручную = ОткрытьФормуМодально("Документ.ПредпоступлениеПоКомплектации.Форма.ФормаВыбора", ПараметрыФормы);

	Если ПредпоступлениеВручную <> Неопределено Тогда
		ЗаполнитьПоПредПоступлениюВручнуюНаСервере(ПредпоступлениеВручную);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.СтатьяДДС);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.СтатьяДДС,СтандартнаяОбработка);
КонецПроцедуры


//---АК ZHAS 28-08-17 -- ИП-00016175.01

//+++АК SHEP 2018.01.17 ИП-00017365.02
&НаКлиенте
Процедура ТранспортныеУслугиПриИзменении(Элемент)
	
	Если НЕ Объект.ТранспортныеУслуги И Объект.ТранспортныеДокументы.Количество() > 0 Тогда
		Если Вопрос("Табличная часть «Транспортные документы» не пуста и будет очищена.
			|
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
			Объект.ТранспортныеДокументы.Очистить();
		Иначе
			Объект.ТранспортныеУслуги = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницаТранспортныеДокументы.Видимость = Объект.ТранспортныеУслуги;
	
	//+++АК sole 2018.05.25 ИП-00018320.01
	ЭтаФорма.Элементы.СтраницаСверка.Видимость = Объект.ТранспортныеУслуги;
	//---АК sole 2018.05.25 ИП-00018320.01
	
КонецПроцедуры

#Область АК_ОтключенныйКод  
//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаСервере
Функция ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса_00017365(ДокументДляЗаполнения = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛист.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|			ТОГДА МаршрутныйЛист.Сумма + МаршрутныйЛист.СуммаНДС
		|		ИНАЧЕ МаршрутныйЛист.Сумма
		|	КОНЕЦ КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛист.СтавкаНДС <> &СтавкаНДС
		|				ИЛИ МаршрутныйЛист.ВариантРасчетаНДС <> &ВариантРасчетаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСтавкиНДС,
		|	МаршрутныйЛист.СуммаНДС
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Проведен
		|	И МаршрутныйЛист.Организация = &Организация
		|	И МаршрутныйЛист.Перевозчик = &Контрагент
		|	И ВЫБОР
		|			КОГДА &ДокументДляЗаполнения = НЕОПРЕДЕЛЕНО
		|				ТОГДА МаршрутныйЛист.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|						И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
		|			ИНАЧЕ МаршрутныйЛист.Ссылка = &ДокументДляЗаполнения
		|					И МаршрутныйЛист.СтавкаНДС = &СтавкаНДС
		|					И МаршрутныйЛист.ВариантРасчетаНДС = &ВариантРасчетаНДС
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеТранспортныеРасходы.Ссылка,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|			ТОГДА ОбщиеТранспортныеРасходы.Сумма + ОбщиеТранспортныеРасходы.СуммаНДС
		|		ИНАЧЕ ОбщиеТранспортныеРасходы.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.СтавкаНДС <> &СтавкаНДС
		|				ИЛИ ОбщиеТранспортныеРасходы.ВариантРасчетаНДС <> &ВариантРасчетаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ОбщиеТранспортныеРасходы.СуммаНДС
		|ИЗ
		|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
		|ГДЕ
		|	ОбщиеТранспортныеРасходы.Проведен
		|	И ОбщиеТранспортныеРасходы.Организация = &Организация
		|	И ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
		|	И ВЫБОР
		|			КОГДА &ДокументДляЗаполнения = НЕОПРЕДЕЛЕНО
		|				ТОГДА ОбщиеТранспортныеРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|						И ОбщиеТранспортныеРасходы.ВидТранспортныхРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыОбщихТранспортныхРасходов.ДоставкаНаСклад)
		|			ИНАЧЕ ОбщиеТранспортныеРасходы.Ссылка = &ДокументДляЗаполнения
		|					И ОбщиеТранспортныеРасходы.СтавкаНДС = &СтавкаНДС
		|					И ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = &ВариантРасчетаНДС
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФинансовыйДвиженияССубконто.Регистратор КАК Регистратор,
		|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма
		|ПОМЕСТИТЬ СуммыПоТоварам
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор В
		|					(ВЫБРАТЬ
		|						Документы.Документ
		|					ИЗ
		|						Документы КАК Документы)
		|				И ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары),
		|			,
		|			) КАК ФинансовыйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйДвиженияССубконто.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	ПРЕДСТАВЛЕНИЕ(Документы.Документ) КАК ДокументПредставление,
		|	Документы.ОшибкаСтавкиНДС,
		|	Документы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СуммыПоТоварам.Сумма, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СуммыПоТоварам.Сумма + Документы.СуммаНДС / (Документы.СуммаДокумента - Документы.СуммаНДС) * СуммыПоТоварам.Сумма КАК ЧИСЛО(20, 2))
		|	КОНЕЦ КАК СуммаДокумента
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоТоварам КАК СуммыПоТоварам
		|		ПО Документы.Документ = СуммыПоТоварам.Регистратор
		|ГДЕ
		|	ЕСТЬNULL(СуммыПоТоварам.Сумма, 0) <> 0");
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериодаЗаполнения));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДокументДляЗаполнения", ДокументДляЗаполнения);
	Запрос.УстановитьПараметр("СтавкаНДС", Объект.СтавкаНДС);
	Запрос.УстановитьПараметр("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//+++АК sole 2018.05.21 ИП-00018724
// Возврат к версии от SHEP 2018.04.10 ИП-00018037
&НаСервере
Функция ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса_00018585(ДокументДляЗаполнения = Неопределено)
//+++АК sole 2018.05.07 ИП-00018585
// Предыдущая версия: ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса_00018037
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст =
"ВЫБРАТЬ
|	Финансовый.Регистратор,
|	Финансовый.СчетДт.КодБыстрогоВыбора КАК КодБыстрогоВыбора,
|	Финансовый.Сумма
|
|		ПОМЕСТИТЬ вт1
|	
|ИЗ РегистрБухгалтерии.Финансовый КАК Финансовый
|ГДЕ 
|		Финансовый.Активность = Истина
|	И	Финансовый.СчетДт.КодБыстрогоВыбора В (""411"", ""412"", ""682"")
|	И	Финансовый.Организация = &Организация
|	И	ТипЗначения(Финансовый.Регистратор) В (Тип(Документ.МаршрутныйЛист), Тип(Документ.ОбщиеТранспортныеРасходы))
|	И	Финансовый.Регистратор.Перевозчик = &Контрагент 
|	И	ВЫБОР
|			КОГДА &ДокументДляЗаполнения <> НЕОПРЕДЕЛЕНО 
|				ТОГДА 
|						Финансовый.Регистратор = &ДокументДляЗаполнения
|					И	Финансовый.Регистратор.СтавкаНДС = &СтавкаНДС
|					И	Финансовый.Регистратор.ВариантРасчетаНДС = &ВариантРасчетаНДС
|				
|				ИНАЧЕ 
|						Финансовый.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
|					И	ВЫБОР
|							КОГДА ТипЗначения(Финансовый.Регистратор) = Тип(Документ.МаршрутныйЛист)
|								ТОГДА Финансовый.Регистратор.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
|							
|								ИНАЧЕ Финансовый.Регистратор.ВидТранспортныхРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыОбщихТранспортныхРасходов.ДоставкаНаСклад)
|						КОНЕЦ
|
|		КОНЕЦ
|
|ИНДЕКСИРОВАТЬ ПО Финансовый.Регистратор, Финансовый.СчетДт.КодБыстрогоВыбора
|
|;
|//////////////////////////////////////////////////////////
|
|ВЫБРАТЬ
|	СписокСумм.Регистратор КАК Документ,
|	ПРЕДСТАВЛЕНИЕ(СписокСумм.Регистратор) КАК ДокументПредставление,
|	
|	ВЫБОР
|		КОГДА СписокСумм.Регистратор.СтавкаНДС <> &СтавкаНДС
|					ИЛИ СписокСумм.Регистратор.ВариантРасчетаНДС <> &ВариантРасчетаНДС
|				ТОГДА ИСТИНА
|		ИНАЧЕ ЛОЖЬ
|	КОНЕЦ КАК ОшибкаСтавкиНДС,	
|	
|	ВЫРАЗИТЬ(СписокСуммНДС.Сумма * СписокСумм41.Сумма/СписокСумм.Сумма КАК Число (15,2)) КАК СуммаНДС,
|	
|	ВЫБОР
|		КОГДА СписокСумм.Регистратор.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле)
|			ТОГДА СписокСумм41.Сумма + ВЫРАЗИТЬ(СписокСуммНДС.Сумма * СписокСумм41.Сумма/СписокСумм.Сумма КАК Число (15,2))
|			ИНАЧЕ СписокСумм41.Сумма 
|	КОНЕЦ КАК СуммаДокумента
|
|		ПОМЕСТИТЬ вт2
|
|ИЗ 	(
|		ВЫБРАТЬ
|			вт1.Регистратор,
|			СУММА(вт1.Сумма) КАК Сумма
|		ИЗ вт1
|		ГДЕ вт1.КодБыстрогоВыбора <> ""682"" //Исключаем суммы НДС
|		СГРУППИРОВАТЬ ПО вт1.Регистратор
|	) КАК СписокСумм 
|		
|	ЛЕВОЕ СОЕДИНЕНИЕ
|	(
|		ВЫБРАТЬ
|			вт1.Регистратор,
|			СУММА(вт1.Сумма) КАК Сумма
|		ИЗ вт1
|		ГДЕ вт1.КодБыстрогоВыбора = ""411""
|		СГРУППИРОВАТЬ ПО вт1.Регистратор
|	) КАК СписокСумм41 ПО СписокСумм41.Регистратор = СписокСумм.Регистратор
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ
|	(
|		ВЫБРАТЬ
|			вт1.Регистратор,
|			СУММА(вт1.Сумма) КАК Сумма
|		ИЗ вт1
|		ГДЕ вт1.КодБыстрогоВыбора = ""682"" 
|		СГРУППИРОВАТЬ ПО вт1.Регистратор
|	) КАК СписокСуммНДС ПО СписокСуммНДС.Регистратор = СписокСумм.Регистратор
|
|ГДЕ ЕСТЬNULL(СписокСумм41.Сумма, 0) <> 0
|
|ИНДЕКСИРОВАТЬ ПО СписокСумм.Регистратор
|";	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериодаЗаполнения));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДокументДляЗаполнения", ДокументДляЗаполнения);
	Запрос.УстановитьПараметр("СтавкаНДС", Объект.СтавкаНДС);
	Запрос.УстановитьПараметр("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
	Запрос.Выполнить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ФильтрПоПоставщику) Тогда
		Запрос.Текст = 
"ВЫБРАТЬ
|	вт2.Документ,
|	вт2.ДокументПредставление,
|	вт2.ОшибкаСтавкиНДС,
|	вт2.СуммаНДС,
|	вт2.СуммаДокумента
|		
|ИЗ вт2
|";
		Возврат Запрос.Выполнить();	
	КонецЕсли;
	
	// Если имеем редкий случай в виде фильтра по поставщику
	Запрос.Текст =
"ВЫБРАТЬ
|	СписокДокументов.Документ,
|	ВЫБОР
|		КОГДА ТипЗначения(СписокДокументов.Документ) = Тип(Документ.МаршрутныйЛист)
|			ТОГДА МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер.Поставщик
|			ИНАЧЕ ОбщиеТранспортныеРасходыПоставщики.Поставщик
|
|	КОНЕЦ КАК Поставщик
|		
|		ПОМЕСТИТЬ втСписокСПоставщиками	
|ИЗ	(
|		ВЫБРАТЬ
|			вт2.Документ
|		ИЗ вт2
|		СГРУППИРОВАТЬ ПО вт2.Документ
|	) КАК СписокДокументов
|
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера ПО 
|			МаршрутныйЛистПриходныеОрдера.Ссылка = СписокДокументов.Документ
|		И	МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер.Организация = &Организация
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбщиеТранспортныеРасходы.Поставщики КАК ОбщиеТранспортныеРасходыПоставщики ПО
|			ОбщиеТранспортныеРасходыПоставщики.Ссылка = СписокДокументов.Документ 
|
|СГРУППИРОВАТЬ ПО	
|	СписокДокументов.Документ,
|	ВЫБОР
|		КОГДА ТипЗначения(СписокДокументов.Документ) = Тип(Документ.МаршрутныйЛист)
|			ТОГДА МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер.Поставщик
|			ИНАЧЕ ОбщиеТранспортныеРасходыПоставщики.Поставщик
|	КОНЕЦ
|;	
|//////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втСписокСПоставщиками.Документ,
|	СУММА(1) КАК Количество
|	
|		ПОМЕСТИТЬ втСписокКоличествоПоставщиков
|	
|ИЗ втСписокСПоставщиками
|СГРУППИРОВАТЬ ПО втСписокСПоставщиками.Документ
|;	
|//////////////////////////////////////////////////////////
|";
	Запрос.УстановитьПараметр("ФильтрПоПоставщику", Объект.ФильтрПоПоставщику);
	Запрос.Выполнить();
	
	Запрос.Текст =	
"ВЫБРАТЬ
|	вт2.ДокументПредставление
|	    
|ИЗ втСписокСПоставщиками
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокКоличествоПоставщиков ПО 
|			втСписокКоличествоПоставщиков.Документ = втСписокСПоставщиками.Документ 
|		И   втСписокКоличествоПоставщиков.Количество > 1
|	
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт2 ПО вт2.Документ = втСписокСПоставщиками.Документ
|		
|ГДЕ втСписокСПоставщиками.Поставщик = &ФильтрПоПоставщику
|";	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения =
"Документ " + Выборка.ДокументПредставление + 
" пропущен: в документе есть приходные ордеры с поставщиком отличным от указанного в фильтре!
|Фильтрация по поставщику возможна только по рейсам где все расходные ордеры от одного поставщика!";			
			
			Сообщить(ТекстСообщения);	
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =	
"ВЫБРАТЬ
|	вт2.Документ,
|	вт2.ДокументПредставление,
|	вт2.ОшибкаСтавкиНДС,
|	вт2.СуммаНДС,
|	вт2.СуммаДокумента
|	    
|ИЗ втСписокСПоставщиками
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокКоличествоПоставщиков ПО 
|			втСписокКоличествоПоставщиков.Документ = втСписокСПоставщиками.Документ 
|		И   втСписокКоличествоПоставщиков.Количество = 1
|	
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт2 ПО вт2.Документ = втСписокСПоставщиками.Документ
|		
|ГДЕ втСписокСПоставщиками.Поставщик = &ФильтрПоПоставщику
|";	
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса
#КонецОбласти

//+++АК SHEP 2018.04.10 ИП-00018037
// Предыдущая версия: ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса_00017365
&НаСервере
Функция ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса(ДокументДляЗаполнения = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛист.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|			ТОГДА МаршрутныйЛист.Сумма + МаршрутныйЛист.СуммаНДС
		|		ИНАЧЕ МаршрутныйЛист.Сумма
		|	КОНЕЦ КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛист.СтавкаНДС <> &СтавкаНДС
		|				ИЛИ МаршрутныйЛист.ВариантРасчетаНДС <> &ВариантРасчетаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСтавкиНДС,
		|	МаршрутныйЛист.СуммаНДС
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Проведен
		|	И МаршрутныйЛист.Организация = &Организация
		|	И МаршрутныйЛист.Перевозчик = &Контрагент
		|	И ВЫБОР
		|			КОГДА &ДокументДляЗаполнения = НЕОПРЕДЕЛЕНО
		|				ТОГДА МаршрутныйЛист.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|						И МаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаСклад)
		|			ИНАЧЕ МаршрутныйЛист.Ссылка = &ДокументДляЗаполнения
		//|					И МаршрутныйЛист.СтавкаНДС = &СтавкаНДС
		//|					И МаршрутныйЛист.ВариантРасчетаНДС = &ВариантРасчетаНДС
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеТранспортныеРасходы.Ссылка,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСсверху)
		|			ТОГДА ОбщиеТранспортныеРасходы.Сумма + ОбщиеТранспортныеРасходы.СуммаНДС
		|		ИНАЧЕ ОбщиеТранспортныеРасходы.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.СтавкаНДС <> &СтавкаНДС
		|				ИЛИ ОбщиеТранспортныеРасходы.ВариантРасчетаНДС <> &ВариантРасчетаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ОбщиеТранспортныеРасходы.СуммаНДС
		|ИЗ
		|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
		|ГДЕ
		|	ОбщиеТранспортныеРасходы.Проведен
		|	И ОбщиеТранспортныеРасходы.Организация = &Организация
		|	И ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
		|	И ВЫБОР
		|			КОГДА &ДокументДляЗаполнения = НЕОПРЕДЕЛЕНО
		|				ТОГДА ОбщиеТранспортныеРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|						И ОбщиеТранспортныеРасходы.ВидТранспортныхРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыОбщихТранспортныхРасходов.ДоставкаНаСклад)
		|			ИНАЧЕ ОбщиеТранспортныеРасходы.Ссылка = &ДокументДляЗаполнения
		|					И ОбщиеТранспортныеРасходы.СтавкаНДС = &СтавкаНДС
		|					И ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = &ВариантРасчетаНДС
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		//+++АК SHEP 2018.04.28 ИП-00018524: позволяем указывать счёт 41.2
		//|	ФинансовыйДвиженияССубконто.СубконтоДт2 КАК Номенклатура
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
		|	КОНЕЦ КАК Номенклатура
		//---АК SHEP 2018.05.04
		|ПОМЕСТИТЬ ДвиженияПоТоварам
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор В
		|					(ВЫБРАТЬ
		|						Документы.Документ
		|					ИЗ
		|						Документы КАК Документы)
		//+++АК SHEP 2018.04.28 ИП-00018524: позволяем указывать счёт 41.2
		//|				И ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары),
		|				И СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)),
		//---АК SHEP 2018.04.28
		|			,
		|			) КАК ФинансовыйДвиженияССубконто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗатратыНаДоставкуПоПоставщикамОбороты.Регистратор,
		|	ЗатратыНаДоставкуПоПоставщикамОбороты.Контрагент КАК Поставщик,
		|	ЗатратыНаДоставкуПоПоставщикамОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ ЗатратыНаДоставкуПоПоставщикам
		|ИЗ
		|	РегистрНакопления.ЗатратыНаДоставкуПоПоставщикам.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ВЫБОР
		|					КОГДА &ФильтрПоПоставщику = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Контрагент = &ФильтрПоПоставщику
		|				КОНЕЦ
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ДвиженияПоТоварам.Номенклатура
		|					ИЗ
		|						ДвиженияПоТоварам КАК ДвиженияПоТоварам)) КАК ЗатратыНаДоставкуПоПоставщикамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//+++АК sole 2018.08.09 ИП-00019517
		|ВЫБРАТЬ
		|	ЗатратыНаДоставкуПоПоставщикам.Регистратор,
		|	СУММА(ЗатратыНаДоставкуПоПоставщикам.Сумма) КАК Сумма
		|	
		|		ПОМЕСТИТЬ втЗатратыНаДоставкуПоПоставщикам
		|
		|ИЗ Документы КАК Документы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗатратыНаДоставкуПоПоставщикам КАК ЗатратыНаДоставкуПоПоставщикам ПО
		|			Документы.Документ = ЗатратыНаДоставкуПоПоставщикам.Регистратор
		|
		|СГРУППИРОВАТЬ ПО ЗатратыНаДоставкуПоПоставщикам.Регистратор
		|ИНДЕКСИРОВАТЬ ПО ЗатратыНаДоставкуПоПоставщикам.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	ПРЕДСТАВЛЕНИЕ(Документы.Документ) КАК ДокументПредставление,
		|	Документы.ОшибкаСтавкиНДС,
		|	Документы.СуммаНДС * ЗатратыНаДоставкуПоПоставщикам.Сумма / Документы.СуммаДокумента КАК СуммаНДС,
		|	ЗатратыНаДоставкуПоПоставщикам.Сумма КАК СуммаДокумента
		|ИЗ
		|	Документы КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗатратыНаДоставкуПоПоставщикам КАК ЗатратыНаДоставкуПоПоставщикам
		|		ПО Документы.Документ = ЗатратыНаДоставкуПоПоставщикам.Регистратор");
		//---АК sole 2018.08.09 ИП-00019517
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериодаЗаполнения));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДокументДляЗаполнения", ДокументДляЗаполнения);
	Запрос.УстановитьПараметр("СтавкаНДС", Объект.СтавкаНДС);
	Запрос.УстановитьПараметр("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
	Запрос.УстановитьПараметр("ФильтрПоПоставщику", Объект.ФильтрПоПоставщику);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаСервере
Процедура ТранспортныеУслугиЗаполнитьДокументыНаСервере()
	
	Объект.ТранспортныеДокументы.Очистить();
	
	РезультатЗапроса = ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса();
	//Объект.ТранспортныеДокументы.Загрузить(РезультатЗапроса.Выгрузить());
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если ВыборкаЗапроса.ОшибкаСтавкиНДС Тогда
				Сообщить("Документ " + ВыборкаЗапроса.ДокументПредставление + " пропущен: не соответствует ставка или вариант расчёта НДС");
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект.ТранспортныеДокументы.Добавить(), ВыборкаЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.ТранспортныеДокументы.Итог("СуммаДокумента");
	КонецЕсли;
	
	Объект.Сумма = Объект.СуммаДокумента - Объект.ТранспортныеДокументы.Итог("СуммаДокумента");
	РасчитатьСуммуНДС();
	
	//ТранспортныеУслугиРаспределитьФактическуюСуммуАкта();
	
КонецПроцедуры

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаСервере
Процедура ТранспортныеУслугиРаспределитьФактическуюСуммуАкта()
	
	КвоДокументовДляРаспределения = Объект.ТранспортныеДокументы.Количество();
	Если КвоДокументовДляРаспределения = 0 Тогда Возврат; КонецЕсли;
	
	ОсталосьРаспределитьСумма = ФактическаяСуммаАкта;
	СуммаДляРаспределения = Объект.ТранспортныеДокументы.Итог("СуммаДокумента");
	Сч = 1;
	Для Каждого СтрокаТЧ Из Объект.ТранспортныеДокументы Цикл
		Если Сч = КвоДокументовДляРаспределения Тогда
			СтрокаТЧ.СуммаАкта = ОсталосьРаспределитьСумма;
		Иначе
			СтрокаТЧ.СуммаАкта = СтрокаТЧ.СуммаДокумента / СуммаДляРаспределения * ФактическаяСуммаАкта;
			ОсталосьРаспределитьСумма = ОсталосьРаспределитьСумма - СтрокаТЧ.СуммаАкта;
		КонецЕсли;
		Сч = Сч + 1; 
	КонецЦикла;
	
КонецПроцедуры

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаКлиенте
Процедура ТранспортныеУслугиЗаполнитьДокументы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериодаЗаполнения) ИЛИ НЕ ЗначениеЗаполнено(Объект.КонецПериодаЗаполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан период заполнения!",, "Объект.НачалоПериодаЗаполнения");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Контрагент!",, "Объект.Контрагент");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Договор контрагента!",, "Объект.ДоговорКонтрагента");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) ИЛИ НЕ ЗначениеЗаполнено(Объект.ВариантРасчетаНДС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана ставка НДС или вариант расчёта НДС!",, "Объект.СтавкаНДС");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана фактическая сумма акта!",, "ФактическаяСуммаАкта", "Объект");
		//Возврат;
		Если Вопрос("Не указана фактическая сумма акта, сумма распределения будет равна нулю!", РежимДиалогаВопрос.ОКОтмена) <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТранспортныеДокументы.Количество() > 0 Тогда
		Если Вопрос("Табличная часть «Транспортные документы» не пуста и будет перезаполнена.
			|
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Объект.ТранспортныеДокументы.Очистить();
	КонецЕсли;
	
	ТранспортныеУслугиЗаполнитьДокументыНаСервере();
	
	РассчитатьСуммыДокумента(Ложь);
	
КонецПроцедуры

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаКлиенте
Процедура ВыборПериодаЗаполнения(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(Объект.НачалоПериодаЗаполнения, ?(Объект.КонецПериодаЗаполнения = '0001-01-01', Объект.КонецПериодаЗаполнения, КонецДня(Объект.КонецПериодаЗаполнения)));
	Если Диалог.Редактировать() Тогда
		Объект.НачалоПериодаЗаполнения = Диалог.Период.ДатаНачала;
		Объект.КонецПериодаЗаполнения = Диалог.Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаКлиенте
Процедура ТранспортныеДокументыПриИзменении(Элемент)
	//ТранспортныеУслугиРаспределитьФактическуюСуммуАкта();
КонецПроцедуры

//+++АК SHEP 2018.02.09 ИП-00017365.02
Функция ТранспортныеДокументы_ПолучитьСуммуДокумента(ТекДок, СуммаНДС)
	
	СуммаНДС = 0;
	РезультатЗапроса = ТранспортныеУслугиЗаполнитьДокументы_РезультатЗапроса(ТекДок);
	Если РезультатЗапроса.Пустой() Тогда Возврат 0; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Если ВыборкаЗапроса.ОшибкаСтавкиНДС Тогда
		Сообщить("Документ " + ВыборкаЗапроса.ДокументПредставление + ": не соответствует ставка или вариант расчёта НДС");
		Возврат 0;
	КонецЕсли;
	СуммаНДС = ВыборкаЗапроса.СуммаНДС;
	Возврат ВыборкаЗапроса.СуммаДокумента;
	
КонецФункции

//+++АК SHEP 2018.01.30 ИП-00017365.02
&НаКлиенте
Процедура ТранспортныеДокументыДокументПриИзменении(Элемент)
Перем ТекДок;
	
	ТекущиеДанные = Элементы.ТранспортныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Документ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		//ТекущиеДанные.СуммаДокумента = 0;
		//Возврат;
		ТранспортныеДокументыВыбратьДокументСОтбором(Элемент, ТекущиеДанные, Истина);
		Возврат;
	КонецЕсли;
	
	ТекДок = ТекущиеДанные.Документ;
	ТекущиеДанные.СуммаДокумента = ТранспортныеДокументы_ПолучитьСуммуДокумента(ТекДок, ТекущиеДанные.СуммаНДС);
	Если ТекущиеДанные.СуммаДокумента = 0 Тогда
		ТекущиеДанные.Документ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.01.18 ИП-00017365.02
&НаКлиенте
Процедура ФактическаяСуммаАктаПриИзменении(Элемент)
	
	Если Объект.ТранспортныеДокументы.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	//ТранспортныеДокументыСуммаАктаИтого = Объект.ТранспортныеДокументы.Итог("СуммаАкта");
	//Если ФактическаяСуммаАкта <> ТранспортныеДокументыСуммаАктаИтого Тогда
	//	Если Вопрос("Фактическая сумма акта не совпадает с итоговой суммой по табличной части «Транспортные документы».
	//		|
	//		|Перезаполнить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
	//		ФактическаяСуммаАкта = ТранспортныеДокументыСуммаАктаИтого;
	//		Возврат;
	//	КонецЕсли;
	//	ТранспортныеУслугиРаспределитьФактическуюСуммуАкта();
	//КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.01.30 ИП-00017365.02
&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоТранспортнымДокументам(Команда)
	
	ЗаполнитьНоменклатуруПоТранспортнымДокументамНаСервере();
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

//+++АК SHEP 2018.01.30 ИП-00017365.02
//+++АК SHEP 2018.04.10 ИП-00018037: добавлен фильтр по поставщику
&НаСервере
Процедура ЗаполнитьНоменклатуруПоТранспортнымДокументамНаСервере()
	
	Если Объект.СуммаДокумента < Объект.ТранспортныеДокументы.Итог("СуммаДокумента") Тогда
		Сообщить("Сумма акта должна быть больше суммы по транспортным документам!");
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	Если Объект.СпособРаспределения <> Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФинансовыйДвиженияССубконто.Регистратор КАК Партия,
		//+++АК SHEP 2018.05.04 ИП-00018524
		//|	ФинансовыйДвиженияССубконто.СубконтоДт1 КАК ТорговаяТочка,
		//|	ФинансовыйДвиженияССубконто.СубконтоДт2 КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт2
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
		|			ТОГДА ФинансовыйДвиженияССубконто.СубконтоДт1
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ КАК Номенклатура,
		//---АК SHEP 2018.05.04
		|	ФинансовыйДвиженияССубконто.СчетДт КАК СчетЗатрат,
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
		//+++АК SHEP 2018.04.28 ИП-00018524: позволяем указывать счёт 41.2
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СырьеИМатериалы)
		//---АК SHEP 2018.04.28
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	КОНЕЦ КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
		//+++АК SHEP 2018.04.28 ИП-00018524: позволяем указывать счёт 41.2
		|		КОГДА ФинансовыйДвиженияССубконто.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СырьеИМатериалы)
		//---АК SHEP 2018.04.28
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	КОНЕЦ КАК СчетУчетаНУ,
		|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК СтоимостьПартии,
		|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ФинансовыйДвиженияССубконто
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор В (&Регистраторы)
		//+++АК SHEP 2018.04.28 ИП-00018524: позволяем указывать счёт 41.2
		//|				И ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары),
		|				И СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)),
		//---АК SHEP 2018.04.28
		|			,
		|			) КАК ФинансовыйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйДвиженияССубконто.Регистратор,
		|	ФинансовыйДвиженияССубконто.СубконтоДт1,
		|	ФинансовыйДвиженияССубконто.СубконтоДт2,
		|	ФинансовыйДвиженияССубконто.СчетДт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗатратыНаДоставкуПоПоставщикам.Регистратор КАК Регистратор,
		|	ЗатратыНаДоставкуПоПоставщикам.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ЗатратыНаДоставкуПоПоставщикам
		|ИЗ
		|	РегистрНакопления.ЗатратыНаДоставкуПоПоставщикам КАК ЗатратыНаДоставкуПоПоставщикам
		|ГДЕ
		|	ЗатратыНаДоставкуПоПоставщикам.Регистратор В(&Регистраторы)
		|	И ВЫБОР
		|			КОГДА &ФильтрПоПоставщику = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЗатратыНаДоставкуПоПоставщикам.Контрагент = &ФильтрПоПоставщику
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФинансовыйДвиженияССубконто.ТорговаяТочка,
		//+++АК SHEP 2018.05.04 ИП-00018524
		|	ФинансовыйДвиженияССубконто.Склад,
		//---АК SHEP 2018.05.04
		|	ФинансовыйДвиженияССубконто.Номенклатура,
		|	ФинансовыйДвиженияССубконто.СчетЗатрат,
		|	ФинансовыйДвиженияССубконто.СчетУчета,
		|	ФинансовыйДвиженияССубконто.СчетУчетаНУ,
		|	МАКСИМУМ(1) КАК Количество,
		|	СУММА(ФинансовыйДвиженияССубконто.СтоимостьПартии) КАК СтоимостьПартии,
		|	СУММА(ФинансовыйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	ФинансовыйДвиженияССубконто КАК ФинансовыйДвиженияССубконто
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗатратыНаДоставкуПоПоставщикам КАК ЗатратыНаДоставкуПоПоставщикам
		|		ПО ФинансовыйДвиженияССубконто.Партия = ЗатратыНаДоставкуПоПоставщикам.Регистратор
		|			И ФинансовыйДвиженияССубконто.Номенклатура = ЗатратыНаДоставкуПоПоставщикам.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйДвиженияССубконто.ТорговаяТочка,
		//+++АК SHEP 2018.05.04 ИП-00018524
		|	ФинансовыйДвиженияССубконто.Склад,
		//---АК SHEP 2018.05.04
		|	ФинансовыйДвиженияССубконто.Номенклатура,
		|	ФинансовыйДвиженияССубконто.СчетЗатрат,
		|	ФинансовыйДвиженияССубконто.СчетУчета,
		|	ФинансовыйДвиженияССубконто.СчетУчетаНУ");
	Запрос.УстановитьПараметр("Регистраторы", Объект.ТранспортныеДокументы.Выгрузить(, "Документ").ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("ФильтрПоПоставщику", Объект.ФильтрПоПоставщику);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ТЗнТовары = РезультатЗапроса.Выгрузить();
	ТЗнТовары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	АК_SHEP_МаксЗначение = 0;
	АК_SHEP_ИндексМаксЗначения = 0;
	УчитыватьНДС 		= ?(Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС"), Ложь, Истина);
	СуммаВключаетНДС 	= (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	Для Каждого СтрокаТабличнойЧасти Из ТЗнТовары Цикл
		// получили из проводок сумму без НДС
		СтрокаТабличнойЧасти.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, Ложь, УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС)), 2);
		СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0), 2);
		СтрокаТабличнойЧасти.СтоимостьПартии = СтрокаТабличнойЧасти.Сумма;
		
		АК_SHEP_МодульЧисла = ?(СтрокаТабличнойЧасти.Сумма > 0, СтрокаТабличнойЧасти.Сумма, -СтрокаТабличнойЧасти.Сумма);
		Если АК_SHEP_МаксЗначение < АК_SHEP_МодульЧисла Тогда
			АК_SHEP_МаксЗначение = АК_SHEP_МодульЧисла;
			АК_SHEP_ИндексМаксЗначения = ТЗнТовары.Индекс(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	//+++АК SHEP 2018.02.24 ИП-00017365.02: боремся с округлением
	АК_SHEP_Дельта = Объект.ТранспортныеДокументы.Итог("СуммаНДС") - ТЗнТовары.Итог("СуммаНДС");
	Если АК_SHEP_Дельта <> 0 Тогда
		СтрокаТабличнойЧасти = ТЗнТовары[АК_SHEP_ИндексМаксЗначения];
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаНДС + АК_SHEP_Дельта;
		СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, АК_SHEP_Дельта, 0), 2);
		СтрокаТабличнойЧасти.СтоимостьПартии = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	АК_SHEP_Дельта = Объект.ТранспортныеДокументы.Итог("СуммаДокумента") - ТЗнТовары.Итог("СтоимостьПартии");
	Если АК_SHEP_Дельта <> 0 Тогда
		СтрокаТабличнойЧасти = ТЗнТовары[АК_SHEP_ИндексМаксЗначения];
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + АК_SHEP_Дельта;
		СтрокаТабличнойЧасти.СтоимостьПартии = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	//---АК SHEP 2018.02.24
	
	Объект.Товары.Загрузить(ТЗнТовары);
	Объект.Сумма = Объект.СуммаДокумента - ТЗнТовары.Итог("Сумма");
	РасчитатьСуммуНДС();
	
	ТабДокумента = РеквизитФормыВЗначение("Объект").ЗаплонитьСуммыРаспределения();
	
	РаспредСумма = ТабДокумента.ВыгрузитьКолонку("СуммаРаспределено");
	ТЗнТовары.Колонки.Добавить("СуммаРаспределено", Новый ОписаниеТипов("Число"));
	ТЗнТовары.ЗагрузитьКолонку(РаспредСумма, "СуммаРаспределено");
	ТЗнТовары.Колонки.Добавить("СуммаНДСРаспределено", Новый ОписаниеТипов("Число"));
	РаспредСуммаНДС = ТабДокумента.ВыгрузитьКолонку("СуммаНДСРаспределено");
	ТЗнТовары.ЗагрузитьКолонку(РаспредСуммаНДС, "СуммаНДСРаспределено");
	
	Объект.Товары.Загрузить(ТЗнТовары);
	Объект.Сумма = Объект.СуммаДокумента - ТЗнТовары.Итог("Сумма");
	РасчитатьСуммуНДС();
	
КонецПроцедуры

//+++АК SHEP 2018.01.30 ИП-00017365.02
&НаКлиенте
Процедура ТранспортныеДокументыДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
Перем ТекДок;
	
	ТекущиеДанные = Элементы.ТранспортныеДокументы.ТекущиеДанные;
	
	ТекДок = ТекущиеДанные.Документ;
	Если ТекДок <> Неопределено Тогда
		//ТранспортныеДокументыВыбратьДокументСОтбором(Элемент, ТекущиеДанные, СтандартнаяОбработка);
		//Возврат;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыВыбора = Новый Структура;
		
		// отбор
		СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("Проведен", Истина);
		СтруктураОтбора.Вставить("Перевозчик", Объект.Контрагент);
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
			СтруктураОтбора.Вставить("ВидТранспортныхРасходов", ПредопределенноеЗначение("Перечисление.ВидыОбщихТранспортныхРасходов.ДоставкаНаСклад"));
		Иначе
			СтруктураОтбора.Вставить("ВидПеревозки", ПредопределенноеЗначение("Справочник.АК_ВидыПеревозки.ДоставкаНаСклад"));
		КонецЕсли;
		//+++АК SHEP 2018.02.09 ИП-00017365.02: добавил на всякий случай
		СтруктураОтбора.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		СтруктураОтбора.Вставить("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
		//---АК SHEP 2018.02.09
		ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
		
		РезультатВыбора = ОткрытьФормуМодально("Документ." + ТекДок.Метаданные().Имя + ".ФормаВыбора", ПараметрыФормыВыбора, Элемент);
		Если РезультатВыбора <> Неопределено Тогда
			ТекущиеДанные.Документ = РезультатВыбора;
			ТранспортныеДокументыДокументПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
//++ АК LUZA 13.02.2018 ИП-00017231.02
&НаКлиенте
Процедура ПредъявленСФПриИзменении(Элемент)
		
	Если ПредъявленСФ = Истина Тогда
		фСчетФактура = НайтиПодчиненныйСчетФактуруСервер();
		
		Если ЗначениеЗаполнено(фСчетФактура) И ТипЗнч(фСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + фСчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОчиститьСФСервер(фСчетФактура);					
			Иначе
				ПредъявленСФ = Ложь;						
				Возврат;
			КонецЕсли;					
		КонецЕсли; 		
	Иначе
		мТекНомерВхСФ = Объект.НомерВходящегоСчетаФактуры;
	 	мТекДатаВхСф = Объект.ДатаВходящегоСчетаФактуры;
		
		Если ЗначениеЗаполнено(мТекНомерВхСФ) = Истина Тогда
			Объект.НомерВходящегоСчетаФактуры = "";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(мТекДатаВхСф) = Истина Тогда
			Объект.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
		КонецЕсли;
		
		фСчетФактура = НайтиПодчиненныйСчетФактуруСервер();
		Если ЗначениеЗаполнено(фСчетФактура) = Истина И ТипЗнч(фСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			СтрокаСФ= "№ "+?(ПустаяСтрока(фСчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(фСчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(фСчетФактура.ДатаВходящегоДокумента), Формат(фСчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		Иначе		
			СтрокаСФ = "Ввести счет-фактуру";
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.ГруппаНомерДатаСФ.Видимость = ПредъявленСФ;
	Элементы.СтрокаСФ.Видимость = НЕ ПредъявленСФ;

КонецПроцедуры

&НаСервере 
Функция НайтиПодчиненныйСчетФактуруСервер()
	Возврат Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(Объект.Ссылка, "СчетФактураПолученный");
КонецФункции

&НаСервере 
Процедура ОчиститьСФСервер(фСчетФактура)
	
	СчетФактураОбъект = фСчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.ДокументОснование = Неопределено;
	Попытка
		СчетФактураОбъект.Записать();
		СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
	Исключение
		ПредъявленСФ = Ложь;						
		Возврат;	
	Конецпопытки;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ГиперссылкаСчетФактураНажатиеСервер();	
КонецПроцедуры
//-- АК LUZA 13.02.2018 ИП-00017231.02

//++ АК luza ИП-00017231.01 28.12.17
&НаКлиенте
Процедура ГиперссылкаСчетФактураНажатиеСервер()	
	СФ = ПолучитьОбъектСФ(,, "СчетФактураПолученный");
	Если СФ <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", СФ);;
		ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Функция ПолучитьОбъектСФ(ДокументОбъект = Неопределено, ФормаДокумента = Неопределено, ВидСчетаФактуры = "СчетФактураПолученный", Отбор= Неопределено) 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//Попытаемся найти счет-фактуру
	фСчетФактура = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, Отбор);
	
	

	Если (ДокументОбъект.ПометкаУдаления) Тогда
		Сообщить("Счет-фактуру нельзя вводить на основании документа, помеченного на удаление");
		Возврат Неопределено;
	КонецЕсли;

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(фСчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.НомерВходящегоСчетаФактуры <> ДокументОбъект.Ссылка.НомерВходящегоСчетаФактуры Тогда
			Сообщить("Документ был изменен. Сначала следует записать документ.");
			Возврат Неопределено;
		КонецЕсли;

		ОбъектСчетаФактуры = Документы.СчетФактураПолученный.СоздатьДокумент();		
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		// Откроем форму для редактирования счета-фактуры
		//ОбъектСчетаФактуры.Открыть(); 
		Возврат ОбъектСчетаФактуры; 

	Иначе
		// Откроем форму для редактирования счета-фактуры
		Если ТипЗнч(фСчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Сообщить("Документ был изменен. Сначала следует записать документ.");
			Возврат Неопределено;
		Иначе
			Возврат фСчетФактура;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ЗаполнитьТекстПроСчетФактуру();			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеДокументыДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		СтандартнаяОбработка = Ложь;
	//	ТекущиеДанные = Элементы.ТранспортныеДокументы.ТекущиеДанные;
	//	ТекущиеДанные.Документ = Тип("ДокументСсылка." + Метаданные.НайтиПоТипу(ВыбранноеЗначение).Имя);
	//	ТранспортныеДокументыВыбратьДокументСОтбором(Элемент, ТекущиеДанные, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеДокументыВыбратьДокументСОтбором(Элемент, ТекущиеДанные, СтандартнаяОбработка)
	
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыВыбора = Новый Структура;
		
		ТекДок = ТекущиеДанные.Документ;
		
		// отбор
		СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("Проведен", Истина);
		СтруктураОтбора.Вставить("Перевозчик", Объект.Контрагент);
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
			СтруктураОтбора.Вставить("ВидТранспортныхРасходов", ПредопределенноеЗначение("Перечисление.ВидыОбщихТранспортныхРасходов.ДоставкаНаСклад"));
		Иначе
			СтруктураОтбора.Вставить("ВидПеревозки", ПредопределенноеЗначение("Справочник.АК_ВидыПеревозки.ДоставкаНаСклад"));
		КонецЕсли;
		//+++АК SHEP 2018.02.09 ИП-00017365.02: добавил на всякий случай
		СтруктураОтбора.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		СтруктураОтбора.Вставить("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
		//---АК SHEP 2018.02.09
		ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
		
		РезультатВыбора = ОткрытьФормуМодально("Документ." + ТекДок.Метаданные().Имя + ".ФормаВыбора", ПараметрыФормыВыбора, Элемент);
		Если РезультатВыбора <> Неопределено Тогда
			ТекущиеДанные.Документ = РезультатВыбора;
			ТранспортныеДокументыДокументПриИзменении(Элемент);
		КонецЕсли;
	КонецПроцедуры
	
//-- АК luza ИП-00017231.01 28.12.17	

//+++АК sole 2018.05.25 ИП-00018320.01
&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	ВыполнитьСверку_НаСервере();		
КонецПроцедуры

//+++АК sole 2018.05.25 ИП-00018320.01
&НаСервере
Процедура ВыполнитьСверку_НаСервере()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	тзСверки = ЭтотОбъект.АК_ВыполнитьСверку();
	ЗначениеВРеквизитФормы(тзСверки, "тчСверки");
	
КонецПроцедуры

//+++АК sole 2018.05.29 ИП-00018320.01
&НаКлиенте
Процедура ЗагрузкаАктовСверкиСПеревозчиком(Команда)
	Перем ФормаОбработки;
	Перем ПараметрыФормы;
	
	ФормаОбработки = ПолучитьФорму("Обработка.ЗагрузкаАктовСверкиСПеревозчиком.Форма.Форма", ПараметрыФормы);
	ФормаОбработки.Открыть();
		
КонецПроцедуры


//+++ АК luza 22.10.2018 ИП-00020093 
&НаСервере
Процедура ЗаполнитьПрикрепленныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл	
		ФайлАктСверки = Стр.Значение;		
		ТекФайлАктСверки = ФайлАктСверки;
	КонецЦикла;		
КонецПроцедуры


//+++ АК luza 22.10.2018 ИП-00020093 
&НаСервере
Процедура ЗаписатьПрикрепленныеФайлыСервер()
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АктСверки;	
	Запись.Значение = ФайлАктСверки;
	Запись.Записать();	
КонецПроцедуры


