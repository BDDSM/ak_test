
 &НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураПроверкаОператором.Пометка 			= Объект.ПровереноОператором;
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураПроверкаОператором.Доступность 		= НЕ Объект.ПровереноОператором;
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураЗаполнитьПоОтправителю.Доступность 	= Объект.ПровереноОператором;
	Элементы.СкладОтправитель.ТолькоПросмотр					= Объект.ПровереноОператором;
	Элементы.НоменклатураКоличествоОтправитель.ТолькоПросмотр 	= Объект.ПровереноОператором;
	Элементы.НоменклатураКоличествоПолучатель.ТолькоПросмотр 	= НЕ Объект.ПровереноОператором;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Склад)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору",СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураДанные.Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Если ТабРезультат.Количество() = 1 Тогда
		СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.ДатаПроизводства)
		И СтруктураДанные.Номенклатура.Складируемая Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
		Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтруктураДанные.ЕдиницаИзмерения);
		Иначе
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", Неопределено);
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И (ЕдиницаИзмерения = &ЕдиницаИзмерения
		|					ИЛИ &ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПроизводства";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанные.ДатаПроизводства = Выборка.ДатаПроизводства;
		КонецЕсли;	
	КонецЕсли;

	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОтправителю(Команда)
	//Если Объект.Получатель = Неопределено Тогда
	//	Предупреждение ("Не заполнен получатель!");
	//	Возврат;
	//КонецЕсли;
	УстановитьПоОтправителю(Команда)
//	ЗаполнитьПоРаспределениюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоОтправителю(Команда)
	
	Для Каждого СтрокаСостав ИЗ Объект.Товары Цикл
		СтрокаСостав.КоличествоПолучатель = СтрокаСостав.КоличествоОтправитель;
		СтрокаСостав.Отклонение = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ШтучныйТовар(Номенклатура)
	
	Возврат Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристики()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакСкладируемый",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Складируемая")));
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоЗаданиямНаПеремещениеСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.ПеремещениеСклад.ПолучитьТекстЗапросаПоТоварамЗаданийНаПеремещение();				   
	//Запрос.УстановитьПараметр("ДатаПроизводства"	, НачалоДня(?(НЕ Объект.Ссылка.Пустая(), Объект.Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("ЗаданияНаПеремещение", Объект.ЗаданияНаПеремещение.Выгрузить().ВыгрузитьКолонку("ЗаданиеНаПеремещение"));
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ЗаполнитьТоварыПоЗаданиямНаФасовкуСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.ПеремещениеСклад.ПолучитьТекстЗапросаПоТоварамЗаданийНаФасовку();				   
	Запрос.УстановитьПараметр("ДатаПроизводства", НачалоДня(?(НЕ Объект.Ссылка.Пустая(), Объект.Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("ЗаданияНаФасовку", Объект.ЗаданияНаФасовку.Выгрузить().ВыгрузитьКолонку("ЗаданиеНаФасовку"));
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

//+++АК LATV 2018.07.23 ИП-00018525
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьДоступностьПоСкладу();
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Внутреннее перемещение (склад)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Дата = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			Объект.СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;
		Объект.ИзмененияДвижений.Очистить();
	КонецЕсли;
	УстановитьВидимостьИДоступность();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(Объект.Ссылка.ПолучитьОбъект(), ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	Если  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Задания.Отбор.Элементы[1].ПравоеЗначение=Объект.Ссылка;
	КонецЕсли; 
	
	//+++АК BARA 2018.03.21 ИП-00018165
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда 
		Объект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	//---АК BARA

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЕстьРасхождения = ТекущийОбъект.Товары.Итог("Отклонение") <> 0;
	//ТекущийОбъект.Редактор = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	Задания.Отбор.Элементы[1].ПравоеЗначение=Объект.Ссылка;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
КонецПроцедуры

//&НаКлиенте
//Процедура НоменклатураНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка=Ложь;
//	
//	Если СкладВыбран() Тогда
//		СтрокаТабличнойЧасти = Элементы.Номенклатура.ТекущиеДанные;
//		
//		ПараметрыФормы = Новый Структура("Склад",Объект.Склад);
//		Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",ПараметрыФормы);
//		Если Результат = Неопределено Тогда
//			Возврат
//		Иначе
//			СтрокаТабличнойЧасти.Номенклатура = Результат;
//			НоменклатураНоменклатураПриИзменении(Элемент);
//		КонецЕсли
//	Иначе
//		Предупреждение ("Следует заполнить реквизит Склад");
//	КонецЕсли
//	
//КонецПроцедуры

//&НаСервере
//Функция	СкладВыбран()
//	Возврат ЗначениеЗаполнено(Объект.Склад)
//КонецФункции

&НаСервере
Функция	ТаблицаТоваровНеПустая()
	Возврат Объект.Номенклатура.Количество()>0
КонецФункции


&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТаблицаТоваровНеПустая() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение ("Таблица товаров не пуста. Изменение склада невозможно.");
		Возврат;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	Если ТаблицаТоваровНеПустая() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение ("Таблица товаров не пуста. Изменение склада невозможно.");
		Возврат;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СкладАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если ТаблицаТоваровНеПустая() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение ("Таблица товаров не пуста. Изменение склада невозможно.");
		Возврат;
	КонецЕсли
КонецПроцедуры

&НаСервере
Функция ПолучитьСЕ(Склад)
	
	Возврат Склад.Владелец;
	
КонецФункции	

&НаКлиенте
Процедура ПроверкаОператором(Команда)
	
	Объект.ПровереноОператором = НЕ Объект.ПровереноОператором;
	УстановитьВидимостьИДоступность();

//	Если Объект.Номенклатура.Итог("КоличествоУРЗ") > 0 Тогда
//		Если Объект.ПровереноОператором Тогда
//			УстановитьКоличестваРавныеРасчетным(Команда);
//		КонецЕсли;
//	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Объект.СтруктурнаяЕдиница = ПолучитьСЕ(Объект.СкладОтправитель);
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Если НЕ ПолучитьСЕ(Объект.СкладПолучатель) = Объект.СтруктурнаяЕдиница Тогда
			Объект.СкладПолучатель = "";
		КонецЕсли;
	КонецЕсли;		
	
	Если Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Если Объект.ЗаданияНаФасовку.Количество() > 0 Тогда
		Объект.ЗаданияНаФасовку.Очистить();
	КонецЕсли;
	
КонецПроцедуры

//+++АК LATV 2018.07.23 ИП-00018525
&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)

	Если Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Если Объект.ЗаданияНаФасовку.Количество() > 0 Тогда
		Объект.ЗаданияНаФасовку.Очистить();
	КонецЕсли;
	
	Если Объект.ЭтоВозвратПоставщику Тогда
		ДанныеСклада = ДанныеСклада(Объект.СкладПолучатель);
		Если ДанныеСклада.ЭтоВозвратПоставщику <> Истина Тогда
			Объект.ЭтоВозвратПоставщику = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьПоСкладу();

КонецПроцедуры


&НаКлиенте
Процедура НоменклатураНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураДанные = Новый Структура;
//	СтруктураДанные.Вставить("Получатель", 		Объект.Получатель);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаПроизводства"	, СтрокаТабличнойЧасти.ДатаПроизводства);

	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект.СкладОтправитель);
	
	СтрокаТабличнойЧасти.Характеристика		= СтруктураДанные.Характеристика;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.КоличествоОтправитель 		= 1;
	СтрокаТабличнойЧасти.ДатаПроизводства   = СтруктураДанные.ДатаПроизводства;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	ОбновитьНадписьОстатка();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Отклонение = ТекущиеДанные.КоличествоОтправитель - ТекущиеДанные.КоличествоПолучатель;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоОтправительПриИзменении(Элемент)
	
	НоменклатураКоличествоПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоПолучательПриИзменении(Элемент)
	
	НоменклатураКоличествоПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТоварыПоЗаданиямНаПеремещение(Команда)
	
	ЗаполнитьТоварыПоЗаданиямНаПеремещениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗаданиямНаФасовку(Команда)
	
	ЗаполнитьТоварыПоЗаданиямНаФасовкуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаданиеНаФасовкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Документ.ЗаданиеНаФасовку.Форма.ФормаВыбора",, Элемент);
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = Элементы.Товары.ТекущиеДанные.ЗаданиеНаФасовку;

	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СкладОтправитель");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = Объект.СкладОтправитель;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
 
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СкладПолучатель");   
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = Объект.СкладПолучатель;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьЛогиМП(Команда)
	Структура1=Новый Структура("Документ",ЭтаФорма.Объект.Ссылка);
	ПараметрыВыбора=Новый Структура("Отбор",Структура1);
	ОткрытьФорму("РегистрСведений.МП_ЖурналОбмена.Форма.ФормаСписка",ПараметрыВыбора,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтсканированныеКоробки(Команда)
	//Отбор=Новый Структура("Ссылка",Объект.Ссылка);
	Парам=Новый Структура("ОтборДок, СформироватьПриОткрытии",Объект.Ссылка,Ложь);
	ОткрытьФорму("Отчет.АК_ОтсканированнаяВесоваяНоменклатура.Форма.ФормаОтчета",Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗадания(Команда)
	Если  Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданияСервер();
	Элементы.Задания.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданияСервер()
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаПеремещение.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаПеремещение КАК ЗаданиеНаПеремещение
		|ГДЕ
		|	ЗаданиеНаПеремещение.Перемещение = &Перемещение
		|	И НЕ ЗаданиеНаПеремещение.ПометкаУдаления";

	Запрос.УстановитьПараметр("Перемещение", Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если Об.Проведен Тогда
			Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		Об.ПометкаУдаления=Истина;
		Об.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеСкладТовары.Номенклатура,
		|	ПеремещениеСкладТовары.Характеристика,
		|	ПеремещениеСкладТовары.ЕдиницаИзмерения,
		|	ПеремещениеСкладТовары.КоличествоОтправитель КАК Количество,
		|	ПеремещениеСкладТовары.ДатаПроизводства,
		|	ПеремещениеСкладТовары.Номенклатура.Родитель.Родитель КАК НоменклатураРодитель
		|ИЗ
		|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСкладТовары
		|ГДЕ
		|	ПеремещениеСкладТовары.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	НоменклатураРодитель";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаНоменклатураРодитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатураРодитель.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатураРодитель.Выбрать();
		НовДок=Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
		НовДок.Дата=Объект.Дата;
		НовДок.СкладОтправитель=Объект.СкладОтправитель;
		НовДок.СкладПолучатель=Объект.СкладПолучатель;
		НовДок.Перемещение=Объект.Ссылка;
		НовДок.Автор=Объект.Автор;
		НовДок.СтруктурнаяЕдиница=Объект.СкладОтправитель.Владелец;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовСтр=НовДок.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗадания(Команда)
	Если Элементы.Задания.ВыделенныеСтроки.Количество()<=1 Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок=Новый Массив;
	Для каждого Эл Из Элементы.Задания.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(Эл);
	КонецЦикла; 
	ОбъединитьЗаданияСервер(МассивСсылок);
	Элементы.Задания.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбъединитьЗаданияСервер(МассивСсылок)
	Документы.ЗаданиеНаПеремещение.ОбъединитьЗадания(МассивСсылок);
КонецПроцедуры


&НаКлиенте
Процедура ПечатьЗаданий(Команда)
	ТабДок=ПечатьЗаданийСервер();

	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьЗаданийСервер()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаПеремещение.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаПеремещение КАК ЗаданиеНаПеремещение
		|ГДЕ
		|	НЕ ЗаданиеНаПеремещение.ПометкаУдаления
		|	И ЗаданиеНаПеремещение.Перемещение = &Перемещение";

	Запрос.УстановитьПараметр("Перемещение", Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МасДок=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	    МасДок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;


	Возврат Документы.ЗаданиеНаПеремещение.ПечатьЗаданияНаПеремещение(МасДок);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКоличествоИзЗаданийИУчКоличество(Команда)
	ЗаполнитьКоличествоИзЗаданийИУчКоличествоСервер();
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоИзЗаданийИУчКоличествоСервер()

	//ПерезаполнитьОстаткиПоТоварам();
	ЗаполнитьКоличествоИзЗаданий();

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьКоличествоИзЗаданий()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ИнвентаризацияСрезПоследних.Номенклатура,
		//|	ИнвентаризацияСрезПоследних.ДатаПроизводства,
		//|	ИнвентаризацияСрезПоследних.Характеристика,
		//|	ИнвентаризацияСрезПоследних.ДокументИнвентаризации,
		//|	ИнвентаризацияСрезПоследних.Склад,
		//|	ИнвентаризацияСрезПоследних.Количество
		//|ИЗ
		//|	РегистрСведений.Инвентаризация.СрезПоследних(, ДокументИнвентаризации = &ДокументИнвентаризации) КАК ИнвентаризацияСрезПоследних";
		
		
	"ВЫБРАТЬ
	|	ЗаданияНаПеремещениеОбороты.Задание,
	|	ЗаданияНаПеремещениеОбороты.Номенклатура,
	|	ЗаданияНаПеремещениеОбороты.Характеристика,
	|	ЗаданияНаПеремещениеОбороты.КоличествоПриход КАК Количество,
	|	ЗаданияНаПеремещениеОбороты.ДатаПроизводства
	|ИЗ
	|	РегистрНакопления.ЗаданияНаПеремещение.Обороты(, , , Задание.Перемещение = &Перемещение) КАК ЗаданияНаПеремещениеОбороты";	
		

	Запрос.УстановитьПараметр("Перемещение", Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ТЗТовары = Результат.Выгрузить();


	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.КоличествоОтправитель = 0;
		СтрокаТаб.КоличествоПолучатель = 0;
	КонецЦикла;	
	Для Каждого СтрокаТаб Из ТЗТовары Цикл
		Номенклатура = СтрокаТаб.Номенклатура;
		Характеристика = СтрокаТаб.Характеристика;
		СтрокиВДоке = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", Номенклатура, Характеристика, СтрокаТаб.ДатаПроизводства));
		Если СтрокиВДоке.Количество() > 0 Тогда
			//СтрокаВДоке = Неопределено;
			//Для каждого Стр Из СтрокиВДоке Цикл
			//	Если Стр.Склад=СтрокаТаб.Склад Тогда
			//		СтрокаВДоке=Стр;
			//		Прервать;
			//	КонецЕсли; 
			//КонецЦикла;
			//Если СтрокаВДоке = Неопределено Тогда
			//	Для каждого Стр Из СтрокиВДоке Цикл
			//		Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
			//			СтрокаВДоке=Стр;
			//			Прервать;
			//		КонецЕсли; 
			//	КонецЦикла;
			//КонецЕсли; 
			СтрокаВДоке = СтрокиВДоке[0];
		Иначе
			СтрокиВДоке = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
			Если СтрокиВДоке.Количество() > 0 Тогда
				//СтрокаВДоке = Неопределено;
				//Для каждого Стр Из СтрокиВДоке Цикл
				//	Если Стр.Склад=СтрокаТаб.Склад Тогда
				//		СтрокаВДоке=Стр;
				//		Прервать;
				//	КонецЕсли; 
				//КонецЦикла;
				//Если СтрокаВДоке = Неопределено Тогда
				//	Для каждого Стр Из СтрокиВДоке Цикл
				//		Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				//			СтрокаВДоке=Стр;
				//			Прервать;
				//		КонецЕсли; 
				//	КонецЦикла;
				//КонецЕсли;
				СтрокаВДоке = СтрокиВДоке[0];
			Иначе	
				СтрокаВДоке = Объект.Товары.Добавить();
				СтрокаВДоке.Номенклатура = Номенклатура;
				СтрокаВДоке.Характеристика = Характеристика;
				СтрокаВДоке.ДатаПроизводства = СтрокаТаб.ДатаПроизводства;
				СтрокаВДоке.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				//Если Объект.ПоНесколькимСкладам Тогда
				//	СтрокаВДоке.Склад = СтрокаТаб.Склад;
				//КонецЕсли; 
			КонецЕсли;	
		КонецЕсли;	
		//СтрокаВДоке.Количество = СтрокаВДоке.Количество + СтрокаТаб.Количество;
		СтрокаВДоке.ЗаданиеНаПеремещение = СтрокаТаб.Задание;
		СтрокаВДоке.КоличествоОтправитель = СтрокаТаб.Количество;
		СтрокаВДоке.КоличествоПолучатель = СтрокаТаб.Количество;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетСервер()
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Документы.ПеремещениеСклад.ПолучитьМакет("СКД_ИзмененияДвижений");
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка"	, Объект.Ссылка);
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Склад"	, Объект.СкладПолучатель);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ОтчетИзмененияДвижений.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетИзмененияДвижений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ОтчетИзмененияДвижений.ФиксацияСверху = 0;
	ОтчетИзмененияДвижений.ФиксацияСлева = 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
	
	ОбновитьОтчетСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаИзменения" Тогда
		ОбновитьОтчетСервер();
	КонецЕсли;	
КонецПроцедуры

//+++АК SHEP 2018.04.05 ИП-00018324
&НаКлиенте
Процедура ОтветственныйСборщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// т.к. у регистров сведений нет формы выбора, получаем форму и в списке устанавливаем признак выбора
	ПараметрыФормы = Новый Структура("РежимВыбора,РежимОткрытияОкна", Истина, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаВыбораСборщика = ПолучитьФорму("РегистрСведений.СборщикиНаСкладах.ФормаСписка", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
	ВыбранноеЗначениеКлючЗаписи = ФормаВыбораСборщика.ОткрытьМодально();
	Если ВыбранноеЗначениеКлючЗаписи = Неопределено Тогда Возврат; КонецЕсли;
	
	Объект.ОтветственныйСборщик = ОбщегоНазначения.ЗначениеРеквизита(ВыбранноеЗначениеКлючЗаписи, "Сборщик");
	
КонецПроцедуры


//+++АК KOPA 2018.05.29 ИП-00018706
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ОтключитьОбработчикОжидания("ОбновитьНадписьОстатка");
	ПодключитьОбработчикОжидания("ОбновитьНадписьОстатка", 0.5, Истина);	
КонецПроцедуры//-ИП-00018706

//+++АК KOPA 2018.05.29 ИП-00018706
//Перенесено из РасходныйОрдерСклад.ФормаДокументаУправляемая
&НаСервереБезКонтекста
Функция ПолучитьОстатокНоменклатуры(Структура)	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ?(Структура.Ссылка.Пустая(), КонецДня(ТекущаяДата()), Структура.Дата));
	Запрос.УстановитьПараметр("Склад", Структура.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Структура.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Структура.Характеристика);
	Запрос.УстановитьПараметр("ДатаПроизв", Структура.ДатаПроизводства);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Дата,
	               |			Склад = &Склад
	               |				И Номенклатура = &Номенклатура
	               |				И Характеристика = &Характеристика
	               |				И ДатаПроизводства = &ДатаПроизв) КАК ТоварыНаСкладахОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоОстаток;	
	КонецЕсли;	
	
КонецФункции//-ИП-00018706	

//+++АК KOPA 2018.05.29 ИП-00018706
//Перенесено из РасходныйОрдерСклад.ФормаДокументаУправляемая
&НаКлиенте
Процедура ОбновитьНадписьОстатка() Экспорт
	ОтключитьОбработчикОжидания("ОбновитьНадписьОстатка");
	ТекущийОстаток = 0;
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("Склад, Номенклатура, Характеристика, ДатаПроизводства, Дата, Ссылка",
		Объект.СкладОтправитель,
		ТекДанные.Номенклатура,
		Текданные.Характеристика,
		ТекДанные.ДатаПроизводства,
		Объект.Дата,
		Объект.Ссылка);
	
	ТекущийОстаток = ПолучитьОстатокНоменклатуры(Структура);
	
КонецПроцедуры//-ИП-00018706

//+++АК KOPA 2018.05.29 ИП-00018706
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТоварыПриАктивизацииСтроки(Элемент);
КонецПроцедуры//-ИП-00018706

//+++АК LATV 2018.07.23 ИП-00018525
&НаКлиенте
Процедура УстановитьДоступностьПоСкладу()

	ДанныеСклада = ДанныеСклада(Объект.СкладПолучатель);
	Элементы.ЭтоВозвратПоставщику.Доступность = ДанныеСклада.ЭтоВозвратПоставщику = Истина;

КонецПроцедуры

//+++АК LATV 2018.07.23 ИП-00018525
&НаСервереБезКонтекста
Функция ДанныеСклада(Склад)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ЭтоВозвратПоставщику");

КонецФункции

//+++АК sole 2018.07.26 ИП-00018320.04
&НаКлиенте
Процедура СоздатьЗаявкуНаПеревозку(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Действие отменено! Перед созданием заявки на перевозку необходимо сохранить текущий документ!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.АК_ЗаявкаНаПеревозку.Форма.ФормаДокумента");
	Форма.ЗаполнитьИзПеремещениеСклад(ЭтаФорма.Объект.Ссылка);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураХарактеристикаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаПроизводства"	, СтрокаТабличнойЧасти.ДатаПроизводства);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект.СкладОтправитель);
	
	СтрокаТабличнойЧасти.ДатаПроизводства   = СтруктураДанные.ДатаПроизводства;

	ОбновитьНадписьОстатка();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПроизводстваПриИзменении(Элемент)
	ОбновитьНадписьОстатка();
КонецПроцедуры
