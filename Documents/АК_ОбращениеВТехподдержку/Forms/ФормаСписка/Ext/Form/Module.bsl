
&НаКлиенте
Процедура Направить(Команда)
	ОткрытьФорму("Документ.АК_ОбращениеВТехподдержку.ФормаОбъекта", Новый Структура("Ключ", Элементы.Список.ТекущиеДанные.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура Выполнено(Команда)
	УстановитьСтатус(Элементы.Список.ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено"), Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	УстановитьСтатус(Элементы.Список.ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Отменено"), Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Переадресовать(Команда)
	УстановитьСтатус(Элементы.Список.ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Переадресовано"), Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	УстановитьСтатус(Элементы.Список.ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято"), Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Проверено(Команда)
	УстановитьСтатус(Элементы.Список.ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Проверено"), Команда.Имя);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусНаСервере(ДокументСсылка, Статус, Комментарий)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.СтатусОбращения 	= Статус;
	ДокументОбъект.Комментарий 		= Комментарий;
	ДокументОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(ДокументСсылка, Статус, ИмяКоманды)
	
	Комментарий = "";
	Если ВвестиСтроку(Комментарий, "" + Элементы[ИмяКоманды].Имя + "? Введите комментарий", 75) Тогда
		
		Если ИмяКоманды = "Переадресовать" Тогда
			ОткрытьФорму("Документ.АК_ОбращениеВТехподдержку.ФормаОбъекта",
			  Новый Структура("Основание", Новый Структура("ДокументОснование,Комментарий", ДокументСсылка, Комментарий)), , ДокументСсылка);
		Иначе
			УстановитьСтатусНаСервере(ДокументСсылка, Статус, Комментарий);
			ОбновитьНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНеотображаемыхРеквизитовСписка(ДокументСсылка)
	
	СтруктураРеквизитов = Новый Структура("Исполнитель,ПомощникТТ,РольИсполнителя,РолиИсполнителей");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ДокументСсылка);
	СтруктураРеквизитов.РолиИсполнителей = СтруктураРеквизитов.РолиИсполнителей.ВыгрузитьКолонку("РольИсполнителя");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере(ТекущийСтатусОбращения, ЭтоИсполнитель, ЭтоИнициатор)
	
	Если СписокАктуальныхОбращений.НайтиПоЗначению(ТекущийСтатусОбращения) = Неопределено Тогда
		Элементы.ГруппаКнопок.Видимость = Ложь;
		
	ИначеЕсли ТекущийСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Направлено") Тогда
		Элементы.ГруппаКнопок.Видимость 		= Истина;
		Элементы.ПринятьКИсполнению.Видимость 	= ЭтоИсполнитель;
		Элементы.Выполнено.Видимость 			= Ложь;
		Элементы.Переадресовать.Видимость 		= ЭтоТехподдержка;
		Элементы.Отменить.Видимость 			= ЭтоТехподдержка ИЛИ ЭтоИнициатор;
		Элементы.Проверено.Видимость 			= Ложь;
		Элементы.Направить.Видимость 			= Ложь;
		
	ИначеЕсли ТекущийСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено") Тогда
		Элементы.ГруппаКнопок.Видимость 		= Истина;
		Элементы.ПринятьКИсполнению.Видимость 	= Ложь;
		Элементы.Выполнено.Видимость 			= Ложь;
		Элементы.Переадресовать.Видимость 		= ЭтоТехподдержка;
		Элементы.Отменить.Видимость 			= Ложь;
		Элементы.Проверено.Видимость 			= ЭтоИнициатор;
		Элементы.Направить.Видимость 			= Ложь;
		
	ИначеЕсли ТекущийСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято") Тогда
		Элементы.ГруппаКнопок.Видимость 		= Истина;
		Элементы.ПринятьКИсполнению.Видимость 	= Ложь;
		Элементы.Выполнено.Видимость 			= ЭтоИсполнитель;
		Элементы.Переадресовать.Видимость 		= ЭтоТехподдержка;
		Элементы.Отменить.Видимость 			= ЭтоТехподдержка ИЛИ ЭтоИнициатор;
		Элементы.Проверено.Видимость 			= Ложь;
		Элементы.Направить.Видимость 			= Ложь;
		
	ИначеЕсли ТекущийСтатусОбращения = ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.ПустаяСсылка") Тогда
		Элементы.ГруппаКнопок.Видимость 		= Истина;
		Элементы.ПринятьКИсполнению.Видимость 	= Ложь;
		Элементы.Выполнено.Видимость 			= Ложь;
		Элементы.Переадресовать.Видимость 		= Ложь;
		Элементы.Отменить.Видимость 			= Ложь;
		Элементы.Проверено.Видимость 			= Ложь;
		Элементы.Направить.Видимость 			= Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаКнопок.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовСписка = ПолучитьСтруктуруНеотображаемыхРеквизитовСписка(Элемент.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
		ЭтоИсполнитель = (СтруктураРеквизитовСписка.Исполнитель = ФизЛицоПользователя);
		//ЭтоИсполнитель 	= (ТекущиеДанные.Исполнитель = ФизЛицоПользователя);
		ЭтоИнициатор 	= (ТекущиеДанные.Звонящий = ФизЛицоПользователя)
							//ИЛИ (ТекущиеДанные.ПомощникТТ = ФизЛицоПользователя);
							ИЛИ (СтруктураРеквизитовСписка.ПомощникТТ = ФизЛицоПользователя);
	Иначе
		ЭтоИсполнитель 	= Ложь;
		ЭтоИнициатор 	= Ложь;
	КонецЕсли;
	Если ЭтоИнициатор = Ложь
			И ЗначениеЗаполнено(ТорговаяТочкаПоАйпи) Тогда
		ЭтоИнициатор = (ТекущиеДанные.ТорговаяТочка = ТорговаяТочкаПоАйпи);
	КонецЕсли;
	
	Если НЕ ЭтоИсполнитель И ЗначениеЗаполнено(РолиПользователяИлиФизЛица) Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовСписка.РольИсполнителя) Тогда
			ЭтоИсполнитель = (РолиПользователяИлиФизЛица.НайтиПоЗначению(СтруктураРеквизитовСписка.РольИсполнителя) <> Неопределено);
		КонецЕсли;
		
		Если НЕ ЭтоИсполнитель И ЗначениеЗаполнено(СтруктураРеквизитовСписка.РолиИсполнителей) Тогда
			Для Каждого АК_РольИсполнителя Из СтруктураРеквизитовСписка.РолиИсполнителей Цикл
				ЭтоИсполнитель = (РолиПользователяИлиФизЛица.НайтиПоЗначению(АК_РольИсполнителя) <> Неопределено);
				Если ЭтоИсполнитель Тогда Прервать; КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьНаСервере(ТекущиеДанные.СтатусОбращения, ЭтоИсполнитель, ЭтоИнициатор);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФизЛицоПользователя = глЗначениеПеременной("глТекущийПользователь").ФизЛицо;
	РолиПользователяИлиФизЛица.ЗагрузитьЗначения(МеханизмОбменаСообщениями.ПолучитьРолиПользователяИлиФизЛица(ПараметрыСеанса.ТекущийПользователь));
	ЭтоТехподдержка = РольДоступна("АК_Техподдержка") ИЛИ (АК_ТелефонияСервер.НомераТехПоддержки().Найти(ПараметрыСеанса.АК_ВнутреннийНомер) <> Неопределено);
	
	ТорговаяТочкаПоАйпи = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	
	Если ЭтоТехподдержка = Ложь Тогда
		
		ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		Если ЗначениеЗаполнено(ТорговаяТочкаПоАйпи) Тогда
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТорговаяТочка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТорговаяТочкаПоАйпи;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;

		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ФизЛицоПользователя;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПомощникТТ");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ФизЛицоПользователя;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправляющийТТ");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ФизЛицоПользователя;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РолиПользователяИлиФизЛица) Тогда
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РольИсполнителя");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = РолиПользователяИлиФизЛица;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РолиИсполнителейРольИсполнителя");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = РолиПользователяИлиФизЛица;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокАктуальныхОбращений = Новый СписокЗначений;
	СписокАктуальныхОбращений.Добавить(ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.ПустаяСсылка"));
	СписокАктуальныхОбращений.Добавить(ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Направлено"));
	СписокАктуальныхОбращений.Добавить(ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Принято"));
	СписокАктуальныхОбращений.Добавить(ПредопределенноеЗначение("Перечисление.АК_СтатусыОбращенийВТехподдержку.Выполнено"));
	
	АктуальныеОбращенияНаСервере();
	
	ЧастотаОбновления = ?(ЭтоТехподдержка ИЛИ НЕ ЗначениеЗаполнено(ТорговаяТочкаПоАйпи), 30, 300);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", ЧастотаОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания("ОбновитьНаКлиенте");
	
КонецПроцедуры


Процедура АктуальныеОбращенияНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, "СтатусОбращения", СписокАктуальныхОбращений, ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Элементы.ВсеОбращения.Шрифт 		= Новый Шрифт(Элементы.АктуальныеОбращения.Шрифт, , , Ложь);
	Элементы.АктуальныеОбращения.Шрифт 	= Новый Шрифт(Элементы.АктуальныеОбращения.Шрифт, , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальныеОбращения(Команда)
	
	АктуальныеОбращенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОбращения(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор, Новый ПолеКомпоновкиДанных("СтатусОбращения"));
	Элементы.ВсеОбращения.Шрифт 		= Новый Шрифт(Элементы.АктуальныеОбращения.Шрифт, , , Истина);
	Элементы.АктуальныеОбращения.Шрифт 	= Новый Шрифт(Элементы.АктуальныеОбращения.Шрифт, , , Ложь);
	
КонецПроцедуры
