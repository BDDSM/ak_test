
&НаКлиенте
Процедура ОдинСчетСписания(Команда)
	
	ЕдиныйСчет = Неопределено;
	Для каждого Строка Из Объект.Документы Цикл
		Если ЗначениеЗаполнено(Строка.СчетНаСписание) Тогда
			ЕдиныйСчет = Строка.СчетНаСписание;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.Документы Цикл
		Строка.СчетНаСписание = ЕдиныйСчет;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДокументПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Документы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
		Если ТипЗнч(ТекСтрока.Документ) = ПредопределенноеЗначение("Документ.Операция.ПустаяСсылка") Тогда
			//Элементы.Документы.ТекущиеДанные.Сумма = Элементы.Документы.ТекущиеДанные.Документ.СуммаОперации;
			Элементы.Документы.ТекущиеДанные.Сумма = ПолучитьСуммуОперации(Элементы.Документы.ТекущиеДанные.Документ);
			//+++АК sils 18.11.2018 ИП-00020092
			Элементы.Документы.ТекущиеДанные.СуммаМСФО = ПолучитьСуммуМСФООперации(Элементы.Документы.ТекущиеДанные.Документ);
			//---АК
		Иначе
			Элементы.Документы.ТекущиеДанные.Сумма = Элементы.Документы.ТекущиеДанные.Документ.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСуммуДокумента();
	//+++АК sils 18.11.2018 ИП-00020092
	ПересчитатьСуммуМСФОДокумента();
	//---АК
	
	//+++АК sils 26.06.2017 ИП-00015775
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
		Струк = УстановитьДанныеВСтроку(ТекСтрока.Документ);
		Элементы.Документы.ТекущиеДанные.СчетНаСписание = Струк.СчетДокумента;
		Элементы.Документы.ТекущиеДанные.ТорговаяТочка = Струк.СтруктурныеЕдиницы;
	КонецЕсли;
	//---АК
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуОперации(ОперацияСсылка)
	
	НаборЗаписей = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ОперацияСсылка);
	НаборЗаписей.Прочитать();    
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	СуммаОперации = 0;
	Для каждого Запись из НаборЗаписей Цикл
		Если (Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоДт.Организации = Объект.Организация
			И Запись.СубконтоДт.Контрагенты = Объект.Контрагент
			И Запись.Сумма > 0
			Тогда
			СуммаОперации = СуммаОперации + Запись.Сумма;
			Продолжить;
		КонецЕсли;
		Если (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоДт.Организации = Объект.Организация
			И Запись.СубконтоДт.Контрагенты = Объект.Контрагент
			И Запись.Сумма < 0
			Тогда
			СуммаОперации = СуммаОперации - Запись.Сумма;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаОперации;
	
КонецФункции

//+++АК sils 18.11.2018 ИП-00020092
&НаСервере
Функция ПолучитьСуммуМСФООперации(ОперацияСсылка)
	
	НаборЗаписей = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ОперацияСсылка);
	НаборЗаписей.Прочитать();    
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	СуммаОперации = 0;
	Для каждого Запись из НаборЗаписей Цикл
		Если (Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоДт.Организации = Объект.Организация
			И Запись.СубконтоДт.Контрагенты = Объект.Контрагент
			И Запись.СуммаМСФО > 0
			Тогда
			СуммаОперации = СуммаОперации + Запись.СуммаМСФО;
			Продолжить;
		КонецЕсли;
		Если (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоДт.Организации = Объект.Организация
			И Запись.СубконтоДт.Контрагенты = Объект.Контрагент
			И Запись.Сумма < 0
			Тогда
			СуммаОперации = СуммаОперации - Запись.СуммаМСФО;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаОперации;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуДокумента()
	//+++АК sils 26.06.2017 ИП-00015775
	//Объект.СуммаДокумента = Объект.Документы.Итог("Сумма");
	//+++АК sils 26.06.2017 ИП-00015775
	Если не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекСумма = Объект.Документы.Итог("Сумма");
		Если Объект.СуммаДокумента <> ТекСумма Тогда
			Объект.СуммаДокумента = ТекСумма;
		КонецЕсли;
	КонецЕсли;
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналПроводок(Команда)
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСуммаПриИзменении(Элемент)
	ПересчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьСуммуДокумента();
	//+++АК sils 18.11.2018 ИП-00020092
	ПересчитатьСуммуМСФОДокумента();
	//---АК
	
	//+++АК sils 26.06.2017 ИП-00015775
	//Элементы.Подтвержден.Доступность = Объект.Подтверждающий = ПараметрыСеанса.ТекущийПользователь;
	//Элементы.Подтверждающий.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Подтверждающий) ИЛИ НЕ Объект.Ссылка.Пустая();	//доступно если не заполнен подтверждающий или документ новый
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ФлагСчета = 1;
		Объект.Версия = 1;
		Объект.Подтверждающий = Справочники.Пользователи.ПустаяСсылка();
		Объект.Документы.Очистить();
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	УстановкаВидимости();
	//---АК	
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент);
		
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
		ФормаВыбора.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Контрагент.Значение = Объект.Контрагент;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Объект.Организация;
		
		Элементы.Документы.ТекущиеДанные.Документ = ФормаВыбора.ОткрытьМодально();		
	ИначеЕсли ВыбранноеЗначение = ТипЗнч(Документы.РасходИзБанка.ПустаяСсылка()) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.РасходИзБанка.ПолучитьФормуВыбора(,Элемент);
		
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
		ФормаВыбора.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Контрагент.Значение = Объект.Контрагент;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Объект.Организация;
		
		Элементы.Документы.ТекущиеДанные.Документ = ФормаВыбора.ОткрытьМодально();	
	ИначеЕсли ВыбранноеЗначение = ТипЗнч(Документы.Операция.ПустаяСсылка()) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.Операция.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Объект.Организация;
		
		Элементы.Документы.ТекущиеДанные.Документ = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПолучитьПодтверждающегоСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПодтверждающегоСервер()

	Если ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.Контрагент.ОсновнойМенеджерПокупателя)
		И ЗначениеЗаполнено(Объект.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПользователиПоЦФО.Сотрудник,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользователиПоЦФО.Период) КАК Период
		               |ИЗ
		               |	РегистрСведений.ПользователиПоЦФО КАК ПользователиПоЦФО
		               |ГДЕ
		               |	ПользователиПоЦФО.ЦФО В
		               |			(ВЫБРАТЬ
		               |				СтруктурныеЕдиницыФизлицСрезПоследних.Подразделение
		               |			ИЗ
		               |				РегистрСведений.СтруктурныеЕдиницыФизлиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК СтруктурныеЕдиницыФизлицСрезПоследних)
		               |	И ПользователиПоЦФО.РуководительОтдела = ИСТИНА
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПользователиПоЦФО.Сотрудник";
	    Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("ФизЛицо", Объект.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо);
		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.Подтверждающий = ВыборкаДетальныеЗаписи.Сотрудник;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

//+++АК sils 26.06.2017 ИП-00015775
&НаКлиенте
Процедура УстановкаВидимости()
	ТекСтрока = Элементы.Документы.ТекущиеДанные;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Группа7.ТекущаяСтраница = Элементы.Группа9;
		Элементы.СуммаДокумента.Доступность = Истина;
		//+++АК sils 19.11.2018 ИП-00020092
		Элементы.СуммаМСФОДокумента.Доступность = Истина;
		//---АК
		Если Объект.ФлагСчета = 2 Тогда
			Элементы.Счет.Заголовок = "Счет дебета:";
		Иначе
			Элементы.Счет.Заголовок = "Счет кредита:";
		КонецЕсли;
		Элементы.Группа17.ТолькоПросмотр = не Объект.ФлагДоступностьСчета;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
			Элементы.Подтвержден.Видимость = Истина;		
			Элементы.Подтверждающий.Видимость = Истина;
			
			Элементы.КорСчет.Доступность = Ложь;
			
			Элементы.КорСтатьяДР.Видимость = Ложь;
			Элементы.КорОрганизация.Видимость = Истина;
			Элементы.КорКонтрагент.Видимость = Истина;
			Элементы.КорЦФО.Видимость = Ложь;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.СписаниеБезнадёжнойДЗ Тогда
			Элементы.Подтвержден.Видимость = Истина;		
			Элементы.Подтверждающий.Видимость = Истина;		
			
			Элементы.КорСчет.Доступность = Истина;
			
			Элементы.КорСтатьяДР.Видимость = Истина;
			Элементы.КорОрганизация.Видимость = Ложь;
			Элементы.КорКонтрагент.Видимость = Ложь;
			Элементы.КорЦФО.Видимость = Истина;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругойСчет Тогда
			Элементы.Подтвержден.Видимость = Истина;		
			Элементы.Подтверждающий.Видимость = Истина;		
			
			Элементы.КорСчет.Доступность = Истина;
			
			Элементы.КорСтатьяДР.Видимость = Ложь;
			Элементы.КорОрганизация.Видимость = Ложь;
			Элементы.КорКонтрагент.Видимость = Ложь;
			Элементы.КорЦФО.Видимость = Ложь;
		Иначе
			Элементы.Подтвержден.Видимость = Ложь;		
			Элементы.Подтверждающий.Видимость = Ложь;		
			
			Элементы.КорСчет.Доступность = Истина;
			
			Элементы.КорСтатьяДР.Видимость = Истина;
			Элементы.КорОрганизация.Видимость = Ложь;
			Элементы.КорКонтрагент.Видимость = Ложь;
			Элементы.КорЦФО.Видимость = Истина;
		КонецЕсли;
		//Если ЗначениеЗаполнено(Объект.КорСчет) Тогда
		//	Если Объект.КорСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, "ВидСубконто") <> Неопределено Тогда
		//		Элементы.КорСтатьяДР.Видимость = Истина;
		//	Иначе
		//		Элементы.КорСтатьяДР.Видимость = Ложь;
		//	КонецЕсли;
		//	Если Объект.КорСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.Организации, "ВидСубконто") <> Неопределено Тогда
		//		Элементы.КорОрганизация.Видимость = Истина;
		//	Иначе
		//		Элементы.КорОрганизация.Видимость = Ложь;
		//	КонецЕсли;
		//	Если Объект.КорСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты, "ВидСубконто") <> Неопределено Тогда
		//		Элементы.КорКонтрагент.Видимость = Истина;
		//	Иначе
		//		Элементы.КорКонтрагент.Видимость = Ложь;
		//	КонецЕсли;
		//	Если Объект.КорСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.ЦФО, "ВидСубконто") <> Неопределено Тогда
		//		Элементы.КорЦФО.Видимость = Истина;
		//	Иначе
		//		Элементы.КорЦФО.Видимость = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Объект.Версия = 1 Тогда
			Элементы.Группа7.ТекущаяСтраница = Элементы.Группа20;
			Элементы.СуммаДокумента.Доступность = Ложь;
			//+++АК sils 19.11.2018 ИП-00020092
			Элементы.СуммаМСФОДокумента.Доступность = Ложь;
			//---АК
		Иначе
			Элементы.Группа7.ТекущаяСтраница = Элементы.Группа8;
			Элементы.СуммаДокумента.Доступность = Ложь;
			//+++АК sils 19.11.2018 ИП-00020092
			Элементы.СуммаМСФОДокумента.Доступность = Ложь;
			//---АК
			Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
				Элементы.Подтвержден.Видимость = Истина;		
				Элементы.Подтверждающий.Видимость = Истина;
				
				Элементы.ДокументыСчетНаСписание.Доступность = Ложь;
				
				Элементы.ДокументыАК_ОрганизацияДт.Видимость = Истина;
				Элементы.ДокументыАК_КонтрагентДт.Видимость = Истина;
				Элементы.ДокументыСтатьяДР.Видимость = Ложь;
				Элементы.ДокументыЦФОДт.Видимость = Ложь;
				
				Элементы.ДокументыСчетНаСписание.Заголовок = "Счет (Дт)";
				Элементы.ДокументыТорговаяТочка.Заголовок = "Торговая точка (Дт)";
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.СписаниеБезнадёжнойДЗ Тогда
				Элементы.Подтвержден.Видимость = Истина;		
				Элементы.Подтверждающий.Видимость = Истина;		
				
				Элементы.ДокументыСчетНаСписание.Доступность = Истина;
				
				Элементы.ДокументыАК_ОрганизацияДт.Видимость = Ложь;
				Элементы.ДокументыАК_КонтрагентДт.Видимость = Ложь;
				Элементы.ДокументыСтатьяДР.Видимость = Истина;
				Элементы.ДокументыЦФОДт.Видимость = Истина;
				
				Элементы.ДокументыСчетНаСписание.Заголовок = "Счет на списание";
				Элементы.ДокументыТорговаяТочка.Заголовок = "Торговая точка";
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругойСчет Тогда
				Элементы.Подтвержден.Видимость = Ложь;		
				Элементы.Подтверждающий.Видимость = Ложь;		
				
				Элементы.ДокументыСчетНаСписание.Доступность = Истина;
				
				Элементы.ДокументыАК_ОрганизацияДт.Видимость = Ложь;
				Элементы.ДокументыАК_КонтрагентДт.Видимость = Ложь;
				Элементы.ДокументыСтатьяДР.Видимость = Ложь;
				Элементы.ДокументыЦФОДт.Видимость = Ложь;
				
				Элементы.ДокументыСчетНаСписание.Заголовок = "Счет на списание";
				Элементы.ДокументыТорговаяТочка.Заголовок = "Торговая точка";
			Иначе
				Элементы.Подтвержден.Видимость = Ложь;		
				Элементы.Подтверждающий.Видимость = Ложь;		
				
				Элементы.ДокументыСчетНаСписание.Доступность = Истина;
				
				Элементы.ДокументыАК_ОрганизацияДт.Видимость = Ложь;
				Элементы.ДокументыАК_КонтрагентДт.Видимость = Ложь;
				Элементы.ДокументыСтатьяДР.Видимость = Истина;
				Элементы.ДокументыЦФОДт.Видимость = Истина;
				
				Элементы.ДокументыСчетНаСписание.Заголовок = "Счет на списание";
				Элементы.ДокументыТорговаяТочка.Заголовок = "Торговая точка";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.Подтвержден.Доступность = Объект.Подтверждающий = ПараметрыСеанса.ТекущийПользователь;
	Элементы.Подтверждающий.ТолькоПросмотр = Объект.Подтвержден;
	
	//+++АК Susk (Суслин К.В.) 2017.1.14 ИП-00016525	 	
	ВыгрузкаБУ = НЕ Объект.НеВыгружатьВБУ;
	
	Элементы.Документыv1СчетДтБух.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1ПодразделениеДт.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1ГруппаДтБух.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1СчетКтБух.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1ПодразделениеКт.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1ГруппаКтБух.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1СуммаНУБухДт.Видимость = ВыгрузкаБУ;
	Элементы.Документыv1СуммаНУБухКт.Видимость = ВыгрузкаБУ;
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденПриИзменении(Элемент)
	УстановкаВидимости();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающийПриИзменении(Элемент)
	УстановкаВидимости();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановкаВидимости();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение <> Объект.ВидОперации Тогда
		Если Объект.Документы.Количество() > 0 Тогда
			Если Вопрос("Табличная часть будет очищены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				СтандартнаяОбработка = Ложь;
			Иначе
				Объект.Документы.Очистить();
				Элементы.Документы.Обновить();
			КонецЕсли;			
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УстановитьДанныеВСтроку(ТекДок)
	СчетДокумента = ПланыСчетов.Финансовый.ПустаяСсылка();
	СтруктурныеЕдиницы = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	НаборЗаписей = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ТекДок);
	НаборЗаписей.Прочитать();    
	Если НаборЗаписей.Количество() <> 0 Тогда
		Для каждого Запись из НаборЗаписей Цикл
			Если (Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
				ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
				ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
				И Запись.СубконтоДт.Организации = Объект.Организация
				И Запись.СубконтоДт.Контрагенты = Объект.Контрагент
				И Запись.Сумма > 0
				Тогда
				СчетДокумента = Запись.СчетДт;
				Если (СчетДокумента.Код = "60.1") или (СчетДокумента.Код = "60.2") или (СчетДокумента.Код = "62.2") Тогда
					 СтруктурныеЕдиницы = Запись.СубконтоДт.ТорговыеТочки;
				КонецЕсли;
			ИначеЕсли (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
				ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
				ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
				И Запись.СубконтоКт.Организации = Объект.Организация
				И Запись.СубконтоКт.Контрагенты = Объект.Контрагент
				И Запись.Сумма < 0
				Тогда
				СчетДокумента = Запись.СчетКт;
				Если (СчетДокумента.Код = "60.1") или (СчетДокумента.Код = "60.2") или (СчетДокумента.Код = "62.2") Тогда
					 СтруктурныеЕдиницы = Запись.СубконтоДт.ТорговыеТочки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Струк = Новый Структура;
	Струк.Вставить("СчетДокумента", СчетДокумента); 
	Струк.Вставить("СтруктурныеЕдиницы", СтруктурныеЕдиницы); 
	
	Возврат Струк;
КонецФункции

&НаКлиенте
Процедура ДокументыСчетНаСписаниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругойСчет Тогда
		Элемент.СписокВыбора.Очистить();

		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПокупателями);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
	Иначе
		Элемент.СписокВыбора.Очистить();

		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.ЗатратыДляРаспределения);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыТорговаяТочкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Документы.ТекущиеДанные;
	Если (ТекСтрока.СчетНаСписание.Код = "60.1") или (ТекСтрока.СчетНаСписание.Код = "60.2") или (ТекСтрока.СчетНаСписание.Код = "62.2")
		или (Лев(ТекСтрока.СчетНаСписание.Код, 2) = "44") Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Контрагент <> ВыбранноеЗначение Тогда
		Объект.Документы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура СчетНаСписаниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругойСчет Тогда
		Элемент.СписокВыбора.Очистить();

		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПокупателями);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
	Иначе
		Элемент.СписокВыбора.Очистить();

		Выборка =  ПланыСчетов.Финансовый.ВыбратьИерархически(ПланыСчетов.Финансовый.ЗатратыДляРаспределения);
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СчетНаСписаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	УстановкаВидимости();
	Если не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
		ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") или 
		ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Сообщить("Принять во внимание: корректировка не изменит движения по товарам на складах!");
	КонецЕсли;
	
	Если Объект.ФлагСчета = 0 Тогда
		Объект.ФлагСчета = 1;
	КонецЕсли;
	
	ЗаполнитьДанныеШапкиИзДокумента(1);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеШапкиИзДокумента(флаг)
	Если не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.ДокументОснование);
	НаборЗаписей.Прочитать();    
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НаборЗаписей.Количество() > 1 Тогда
		Объект.ФлагДоступностьСчета = Истина;
	КонецЕсли;
	
	СуммаОперации = 0;
	Для каждого Запись из НаборЗаписей Цикл
		Если (Запись.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетДт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоДт.Организации = Объект.Организация
			И Запись.СубконтоДт.Контрагенты = Объект.Контрагент Тогда
			Если Объект.ФлагСчета = 2 Тогда
				Если флаг = 1 Тогда
					СуммаОперации = СуммаОперации + Запись.Сумма;
					Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
						Объект.КорСчет = Запись.СчетДт;
						Если (Объект.КорСчет.Код = "60.1") или (Объект.КорСчет.Код = "60.2") или (Объект.КорСчет.Код = "62.2") Тогда
							 Объект.КорТорговаяТочка = Запись.СубконтоДт.ТорговыеТочки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Объект.Счет = Запись.СчетКт;
				Для й = 1 по Запись.СубконтоКт.Количество() Цикл
					Объект["Субкотно" + й] = Запись.СубконтоКт[Запись.СчетКт.ВидыСубконто[й-1].ВидСубконто];
				КонецЦикла;
			Иначе
				Если флаг = 1 Тогда
					СуммаОперации = СуммаОперации + Запись.Сумма;
					Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
						Объект.КорСчет = Запись.СчетДт;
						Если (Объект.КорСчет.Код = "60.1") или (Объект.КорСчет.Код = "60.2") или (Объект.КорСчет.Код = "62.2") Тогда
							 Объект.КорТорговаяТочка = Запись.СубконтоДт.ТорговыеТочки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Объект.Счет = Запись.СчетДт;
				Для й = 1 по Запись.СубконтоДт.Количество() Цикл
					Объект["Субкотно" + й] = Запись.СубконтоДт[Запись.СчетДт.ВидыСубконто[й-1].ВидСубконто];
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли (Запись.СчетКт = ПланыСчетов.Финансовый.НайтиПоКоду("76.1")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("60")
			ИЛИ Запись.СчетКт.Родитель = ПланыСчетов.Финансовый.НайтиПоКоду("62"))
			И Запись.СубконтоКт.Организации = Объект.Организация
			И Запись.СубконтоКт.Контрагенты = Объект.Контрагент Тогда
			Если Объект.ФлагСчета = 2 Тогда
				Если флаг = 1 Тогда
					СуммаОперации = СуммаОперации + Запись.Сумма;
					Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
						Объект.КорСчет = Запись.СчетКт;
						Если (Объект.КорСчет.Код = "60.1") или (Объект.КорСчет.Код = "60.2") или (Объект.КорСчет.Код = "62.2") Тогда
							 Объект.КорТорговаяТочка = Запись.СубконтоКт.ТорговыеТочки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Объект.Счет = Запись.СчетДт;
				Для й = 1 по Запись.СубконтоДт.Количество() Цикл
					Объект["Субкотно" + й] = Запись.СубконтоДт[Запись.СчетДт.ВидыСубконто[й-1].ВидСубконто];
				КонецЦикла;
			Иначе
				Если флаг = 1 Тогда
					СуммаОперации = СуммаОперации - Запись.Сумма;
					Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.АК_ПереносНаДругогоКА_ТТ Тогда
						Объект.КорСчет = Запись.СчетКт;
						Если (Объект.КорСчет.Код = "60.1") или (Объект.КорСчет.Код = "60.2") или (Объект.КорСчет.Код = "62.2") Тогда
							 Объект.КорТорговаяТочка = Запись.СубконтоКт.ТорговыеТочки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Объект.Счет = Запись.СчетКт;
				Для й = 1 по Запись.СубконтоКт.Количество() Цикл
					Объект["Субкотно" + й] = Запись.СубконтоКт[Запись.СчетКт.ВидыСубконто[й-1].ВидСубконто];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если флаг = 1 Тогда
		Объект.СуммаДокумента = ?(СуммаОперации < 0, -СуммаОперации, СуммаОперации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорСчетПриИзменении(Элемент)
	УстановкаВидимости();
КонецПроцедуры

&НаКлиенте
Процедура ФлагСчетаПриИзменении(Элемент)
	Объект.Счет = ПланыСчетов.Финансовый.ПустаяСсылка();
	Объект.Субкотно1 = Неопределено;
	Объект.Субкотно2 = Неопределено;
	Объект.Субкотно3 = Неопределено;
	Если Объект.ФлагСчета = 2 Тогда
		Элементы.Счет.Заголовок = "Счет дебета:";
	Иначе
		Элементы.Счет.Заголовок = "Счет кредита:";
	КонецЕсли;
	
	ЗаполнитьДанныеШапкиИзДокумента(2);
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	УстановкаВидимости();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСтатьяДРПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Документы.ТекущиеДанные;	
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СтатьяДР);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСтатьяДРОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт1ПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоДт1);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт2ПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоДт1);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт3ПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоДт3);

КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт1ПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоКт1);

КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт2ПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоКт2);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт3ПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Документыv1.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ТекущаяСтрока.СубконтоКт3);


КонецПроцедуры

&НаКлиенте
Процедура Субкотно3ПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.Субкотно3);


КонецПроцедуры

&НаКлиенте
Процедура Субкотно2ПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.Субкотно2);
КонецПроцедуры

&НаКлиенте
Процедура Субкотно1ПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.Субкотно1);

КонецПроцедуры

&НаКлиенте
Процедура КорСтатьяДРПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.КорСтатьяДР);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноКт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Документыv1СубкотноДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КорСтатьяДРОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Субкотно1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Субкотно2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Субкотно3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);

КонецПроцедуры

//+++ak bara #16418
&НаСервере
Функция  ПередЗаписьюНаСервере()
	
	Счет44 = ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	
	РезультатПо44 = Ложь;
	Для каждого Стр Из Объект.Документы  Цикл   
		Если ЗначениеЗаполнено(Стр.СчетДт) и Стр.СчетДт.ПринадлежитЭлементу(Счет44) Тогда
			РезультатПо44 = Истина;
			Прервать;
		КонецЕсли; 		      
	КонецЦикла;

	РезультатПо44Кт = Ложь;
	Для каждого Стр Из Объект.Документы  Цикл   
		Если ЗначениеЗаполнено(Стр.СчетКт) и Стр.СчетКт.ПринадлежитЭлементу(Счет44) Тогда
			РезультатПо44Кт = Истина;
			Прервать;
		КонецЕсли; 		      
	КонецЦикла;
	
Возврат (РезультатПо44 или РезультатПо44Кт);
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Рез = ПередЗаписьюНаСервере();
	Если Рез  и ЗначениеЗаполнено(Объект.Комментарий)=Ложь Тогда
		  Отказ = Истина;
		  Сообщить("Необходимо указать комментарий.");
	КонецЕсли;
КонецПроцедуры

//---ak bara #16418

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЭтоТаблица = Ложь, ИмяПланаСчетов = "Финансовый")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"Документыv1Субконто" + Постфикс + "1",
								"Документыv1Субконто" + Постфикс + "2",
								"Документыv1Субконто" + Постфикс + "3");
								
	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица, ИмяПланаСчетов);

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Документыv1.ТекущиеДанные;
	

	// фин
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетДт, "Дт", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	// бух
	Элементы.Документыv1.ТекущиеДанные.СчетДтБух = ПолучитьСчетБухПоСоответствиюСервер(Элементы.Документыv1.ТекущиеДанные.СчетДт);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетДтБух, "ДтБух", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоДтБух1", "СубконтоДтБух2", "СубконтоДтБух3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетДтБух, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		УстановитьДОступностьСубконтоТолстыйКлиент();
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		ИзменениеСубконтоФин(СтрокаТаблицы["СубконтоДт" + Строка(Индекс)], СтрокаТаблицы, "Дт");
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СчетДтБухПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Документыv1.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетДтБух, "ДтБух", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
								  "СубконтоДтБух1", "СубконтоДтБух2", "СубконтоДтБух3", "ПодразделениеДт");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетДтБух, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		УстановитьДОступностьСубконтоТолстыйКлиент();
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Документыv1.ТекущиеДанные;

	//фин
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетКт, "Кт", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	//бух
	Элементы.Документыv1.ТекущиеДанные.СчетКтБух = ПолучитьСчетБухПоСоответствиюСервер(Элементы.Документыv1.ТекущиеДанные.СчетКт);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетКтБух, "КтБух", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоКтБух1", "СубконтоКтБух2", "СубконтоКтБух3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетКтБух, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		УстановитьДОступностьСубконтоТолстыйКлиент();
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		ИзменениеСубконтоФин(СтрокаТаблицы["СубконтоКт" + Строка(Индекс)], СтрокаТаблицы, "Кт");
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СчетКтБухПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Документыv1.ТекущиеДанные; 
		
	//бух
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетКтБух, "КтБух", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
								  "СубконтоКтБух1", "СубконтоКтБух2", "СубконтоКтБух3", "ПодразделениеКт");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетКтБух, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		УстановитьДОступностьСубконтоТолстыйКлиент();
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		Если ТипЗнч(СтрокаТаблицы[ПоляОБъекта["Субконто" + Строка(Индекс)]]) = Тип("СправочникСсылка.Субконто") Тогда
			СтрокаТаблицы[ПоляОБъекта["Субконто" + Строка(Индекс)]] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервереБезКонтекста
Функция ПолучитьСчетБухПоСоответствиюСервер(СчетФин)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеФинИБухПлановСчетов.ФинСчет,
	               |	СоответствиеФинИБухПлановСчетов.БухСчет
	               |ИЗ
	               |	РегистрСведений.СоответствиеФинИБухПлановСчетов КАК СоответствиеФинИБухПлановСчетов
	               |ГДЕ
	               |	СоответствиеФинИБухПлановСчетов.ФинСчет = &ФинСчет";
	
	Запрос.УстановитьПараметр("ФинСчет", СчетФин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БухСчет;
	КонецЕсли;
	
	Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура НеВыгружатьВБУПриИзменении(Элемент)
	
	УстановкаВидимости();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
Процедура УстановитьУсловноеОформлениеВидимость()
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Документыv1СубконтоДт" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Документы.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);		
				
	КонецЦикла;
	
	// Субконто 
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Документыv1СубконтоДт1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Документы.СубконтоДт1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Документы.СубконтоДт2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Документы.СубконтоДт3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	
		
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтаФорма);

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	НадоИнициализировать = Ложь;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ДокументыПроинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
		
	Если НадоИнициализировать Тогда
		Форма.УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее() Экспорт

	НастройкиУсловногоОформления.Вставить("ДокументыПроинициализировано", Истина);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Документыv1СубконтоДт1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Документыv1СубконтоДт2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Документыv1СубконтоДт3");	
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Корректировка взаиморасчетов");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	УстановитьУсловноеОформление();
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаДок Из Объект.Документы Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		БухгалтерскийУчетКлиентСерверУФ.УстановитьДоступностьСубконто(СтрокаДок.СчетДт, СтрокаДок, ПоляОбъекта);		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДтБух1", "СубконтоДтБух2", "СубконтоДтБух3");
		БухгалтерскийУчетКлиентСерверУФ.УстановитьДоступностьСубконто(СтрокаДок.СчетДт, СтрокаДок, ПоляОбъекта, "Хозрасчетный");		
	КонецЦикла;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура УстановитьДОступностьСубконтоТолстыйКлиент()
	
	ТекСтр = Элементы.Документыv1.ТекущиеДанные;
	
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//Дт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр.СчетДт);
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Документыv1СубконтоДт1", "Документыv1СубконтоДт2", "Документыv1СубконтоДт3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла; 
	
	//Кт
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр.СчетКт);
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Документыv1СубконтоКт1", "Документыv1СубконтоКт2", "Документыv1СубконтоКт3");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
	//ДтБух
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр.СчетДтБух, "Хозрасчетный");
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, ПодразделениеДт", "Документыv1СубконтоДтБух1", "Документыv1СубконтоДтБух2", "Документыv1СубконтоДтБух3", "Документыv1ПодразделениеДт");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла; 
	
	Элементы[ПоляОбъекта["ПодразделениеДт"]].Доступность = ДанныеСчета.УчетПоПодразделениям;	
	
	//КтБух
	ДанныеСчета = ПолучитьДанныеСчетаСервер(ТекСтр.СчетКтБух, "Хозрасчетный");
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, ПодразделениеКт", "Документыv1СубконтоКтБух1", "Документыv1СубконтоКтБух2", "Документыv1СубконтоКтБух3", "Документыv1ПодразделениеКт");

	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда			
			Элементы[ПоляОбъекта["Субконто" + Индекс]].Доступность = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Элементы[ПоляОбъекта["ПодразделениеКт"]].Доступность = ДанныеСчета.УчетПоПодразделениям;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1ПриАктивизацииСтроки(Элемент)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		УстановитьДОступностьСубконтоТолстыйКлиент();
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетаСервер(Счет, ИмяПланаСчетов = "Финансовый")
	
	Возврат БухгалтерскийУчетВызовСервераПовтИспУФ.ПолучитьСвойстваСчета(Счет, ИмяПланаСчетов);	
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоДт1ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоДт1, Элементы.Документыv1.ТекущиеДанные, "Дт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоДт2ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоДт2, Элементы.Документыv1.ТекущиеДанные, "Дт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоДт3ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоДт3, Элементы.Документыv1.ТекущиеДанные, "Дт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура ИзменениеСубконтоФин(СубконтоФин, ТекСтрока, Префикс)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто"+ Префикс + "Бух1", "Субконто"+ Префикс + "Бух2", "Субконто"+ Префикс + "Бух3");

	Для Индекс = 1 По 3 Цикл
		Если ТипЗнч(СубконтоФин) = ТипЗнч(ТекСтрока[ПоляОбъекта["Субконто" + Индекс]]) И НЕ ЗначениеЗаполнено(ТекСтрока[ПоляОбъекта["Субконто" + Индекс]]) Тогда
			ТекСтрока[ПоляОбъекта["Субконто" + Индекс]] = СубконтоФин;
		КонецЕсли;			
	КонецЦикла;   
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоКт1ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоКт1, Элементы.Документыv1.ТекущиеДанные, "Кт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоКт2ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоКт2, Элементы.Документыv1.ТекущиеДанные, "Кт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоКт3ПриИзменении(Элемент)
	
	ИзменениеСубконтоФин(Элементы.Документыv1.ТекущиеДанные.СубконтоКт3, Элементы.Документыv1.ТекущиеДанные, "Кт");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2017.10.31 ИП-00016525
&НаКлиенте
Процедура Документыv1СубконтоКтБух3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаКлиенте
Процедура ВыгрузитьВБП(Команда)
	
	Если НЕ ПроверкаПередВыгрузкойСервер(Параметры.Ключ.Пустая(), ЭтаФорма.Модифицированность, ?(Объект.Дата < Дата(2017, 1, 1), "1 января 2017 года", ""), Объект.НеВыгружатьВБУ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВБПСервер();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530
&НаСервере
Процедура ВыгрузитьВБПСервер()
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("КорректировкаВзаиморасчетовОперация", "КорректировкаВзаиморасчетов", Объект.Ссылка); 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаСервере
Функция ПроверкаПередВыгрузкойСервер(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ)
	
	Возврат ОбменСБП2_0.ПроверкаПередВыгрузкой(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ);
	
КонецФункции

//+++АК sils 18.11.2018 ИП-00020092
&НаКлиенте
Процедура Документыv1СуммаМСФОПриИзменении(Элемент)
	ПересчитатьСуммуМСФОДокумента();
КонецПроцедуры

//+++АК sils 18.11.2018 ИП-00020092
&НаКлиенте
Процедура ПересчитатьСуммуМСФОДокумента()
	Если не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекСумма = Объект.Документы.Итог("СуммаМСФО");
		Если Объект.СуммаМСФОДокумента <> ТекСумма Тогда
			Объект.СуммаМСФОДокумента = ТекСумма;
		КонецЕсли;
	КонецЕсли;
	//---АК
КонецПроцедуры

