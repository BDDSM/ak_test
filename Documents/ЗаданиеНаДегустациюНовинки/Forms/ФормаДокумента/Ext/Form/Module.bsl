
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЭтоНовыйОбъект = НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	
	СканироватьШтрихкодДоступность = СканироватьШтрихкодДоступность(ТекущийОбъект.Номенклатура, ТекущийОбъект.ХарактеристикаНоменклатуры);
	Если НЕ СканироватьШтрихкодДоступность И ТекущийОбъект.СканироватьШтрихкод Тогда
		ТекущийОбъект.СканироватьШтрихкод = Ложь;
	ИначеЕсли СканироватьШтрихкодДоступность И НЕ ТекущийОбъект.СканироватьШтрихкод Тогда
		ТекущийОбъект.СканироватьШтрихкод = Истина;
	КонецЕсли;
	Элементы.СканироватьШтрихкод.Доступность = СканироватьШтрихкодДоступность;
	
	ЭтоНеНовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.Номенклатура.ТолькоПросмотр = (ЭтоНеНовыйОбъект И ЗначениеЗаполнено(Объект.Номенклатура));
	Элементы.ХарактеристикаНоменклатуры.ТолькоПросмотр = (ЭтоНеНовыйОбъект И ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры));
	
	ОценкаПоказателей.Параметры.УстановитьЗначениеПараметра("ЗаданиеНаДегустациюНовинки", Объект.Ссылка);
	
	Если ЭтоНеПервоеЧтение = Ложь Тогда
		Если НЕ ЭтоНовыйОбъект Тогда
			ОтветственныеЛица.Загрузить(Документы.ЗаданиеНаДегустациюНовинки.ВернутьТЗнОтветственных(Объект.Ссылка));
			ЭтоНеПервоеЧтение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//+++АК SHEP 2018.07.09 ИП-00018818
	Если ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.ХарактеристикаНоменклатуры, "ФишкаРазвёрнуто");
	КонецЕсли;
	//---АК SHEP 2018.07.09
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Задание товароведа на дегустацию новинки");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(Документы.ЗаданиеНаДегустациюНовинки.СоздатьДокумент());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТолькоПросмотр = Объект.Проведен;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.ГруппаПоМагазинам);
	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));	
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ГруппаСтраницыПриСменеСтраницыНаСервере(Элемент.Имя, ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыНаСервере(ЭлементИмя, ТекущаяСтраницаИмя)
	
	Если ТекущаяСтраницаИмя = "ГруппаПоМагазинам" Тогда
		Элементы[ЭлементИмя].Высота = 0;
		Элементы.ОценкаПоказателей.Видимость = Ложь;
		Элементы.МагазиныОценка.ТекстПодвала = Формат(ПолучитьСреднююОценку(Объект.Ссылка), "ЧДЦ=2");
		ОбновитьИнформациюПоМагазинам();
		Возврат;
	ИначеЕсли ТекущаяСтраницаИмя = "СтраницаОтветственныеЛица" Тогда
		Элементы[ЭлементИмя].Высота = 0;
		Элементы.ОценкаПоказателей.Видимость = Ложь;
		Возврат;
	//+++АК SHEP 2018.07.24 ИП-00018818
	ИначеЕсли ТекущаяСтраницаИмя = "СтраницаФишкаРазвёрнуто" Тогда
		Элементы[ЭлементИмя].Высота = 0;
		Элементы.ОценкаПоказателей.Видимость = Ложь;
		Возврат;
	//---АК SHEP 2018.07.24
	Иначе
		Элементы[ЭлементИмя].Высота = 1;
		Элементы.ОценкаПоказателей.Видимость = Истина;
	КонецЕсли;
	
	ИмяПоказателя = СтрЗаменить(ТекущаяСтраницаИмя, "Группа", "");
	ОценкаПоказателей.Параметры.УстановитьЗначениеПараметра("ИмяПоказателя", ИмяПоказателя);
	Элементы.ОценкаПоказателейОценка.ТекстПодвала = Формат(ПолучитьСреднююОценку(Объект.Ссылка, ИмяПоказателя), "ЧДЦ=2");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоМагазинам()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЗнМагазины.НомерСтроки,
		|	ТЗнМагазины.Магазин
		|ПОМЕСТИТЬ ВТМагазины
		|ИЗ
		|	&ТЗнМагазины КАК ТЗнМагазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТМагазины.НомерСтроки КАК НомерСтроки,
		|	ВТМагазины.Магазин,
		|	МАКСИМУМ(ЕСТЬNULL(ЗадачаНаДегустациюНовинки.Проведен, ЛОЖЬ)) КАК Обработано,
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ОценкиЗадачНаДегустациюНовинок.Оценка, 0)) КАК ЧИСЛО(5, 2)) КАК Оценка
		|ИЗ
		|	ВТМагазины КАК ВТМагазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗадачаНаДегустациюНовинки КАК ЗадачаНаДегустациюНовинки
		|		ПО (ЗадачаНаДегустациюНовинки.ЗаданиеНаДегустациюНовинки = &ЗаданиеНаДегустациюНовинки)
		|			И ВТМагазины.Магазин = ЗадачаНаДегустациюНовинки.Магазин
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиЗадачНаДегустациюНовинок КАК ОценкиЗадачНаДегустациюНовинок
		|		ПО (ОценкиЗадачНаДегустациюНовинок.ЗаданиеНаДегустациюНовинки = &ЗаданиеНаДегустациюНовинки)
		|			И ВТМагазины.Магазин = ОценкиЗадачНаДегустациюНовинок.Магазин
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТМагазины.НомерСтроки,
		|	ВТМагазины.Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	Запрос.УстановитьПараметр("ЗаданиеНаДегустациюНовинки", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТЗнМагазины", Объект.Магазины.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Магазины.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСреднююОценку(ЗаданиеНаДегустациюНовинки, ИмяПоказателя = "")
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ОценкиЗадачНаДегустациюНовинок.Оценка) КАК ЧИСЛО(5, 2)) КАК Оценка
		|ИЗ
		|	РегистрСведений.ОценкиЗадачНаДегустациюНовинок КАК ОценкиЗадачНаДегустациюНовинок
		|ГДЕ
		|	ОценкиЗадачНаДегустациюНовинок.ЗаданиеНаДегустациюНовинки = &ЗаданиеНаДегустациюНовинки
		|	И ВЫБОР
		|			КОГДА &ИмяПоказателя = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ОценкиЗадачНаДегустациюНовинок.Показатель = &ИмяПоказателя
		|		КОНЕЦ");
	Запрос.УстановитьПараметр("ЗаданиеНаДегустациюНовинки", ЗаданиеНаДегустациюНовинки);
	Запрос.УстановитьПараметр("ИмяПоказателя", ИмяПоказателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат 0; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат ВыборкаЗапроса.Оценка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СканироватьШтрихкодДоступность(Номенклатура, ХарактеристикаНоменклатуры)
	
	//По умолчанию у нас для всех случаев всегда будет стоять галочка "обязательно сканировать", кроме если это товар без единичной упаковки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Номенклатура КАК Номенклатура,
		|	&Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТЗнТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьШтрихКод
		|ИЗ
		|	ТЗнТовары КАК ТЗнТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
		|		ПО ТЗнТовары.Номенклатура = ШтриховыеКоды.Номенклатура
		|			И ТЗнТовары.Характеристика = ШтриховыеКоды.Характеристика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТЗнТовары.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
		|		ПО ТЗнТовары.Номенклатура = СпрХарактеристикиНоменклатуры.Владелец
		|			И СпрХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		|
		|ГДЕ
		|	СпрНоменклатура.БезУпаковки = ЛОЖЬ
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ИСТИНА");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ХарактеристикаНоменклатуры);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Вопрос("ВНИМАНИЕ! После записи номенклатуру нельзя будет изменить!
				|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание товароведа на дегустацию новинки") <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Вопрос("ВНИМАНИЕ! Задание будет закрыто!
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание товароведа на дегустацию новинки") <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	СканироватьШтрихкодДоступность = СканироватьШтрихкодДоступность(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры);
	Если НЕ СканироватьШтрихкодДоступность И Объект.СканироватьШтрихкод Тогда
		Объект.СканироватьШтрихкод = Ложь;
	ИначеЕсли СканироватьШтрихкодДоступность И НЕ Объект.СканироватьШтрихкод Тогда
		Объект.СканироватьШтрихкод = Истина;
	КонецЕсли;
	Элементы.СканироватьШтрихкод.Доступность = СканироватьШтрихкодДоступность;
	ИзмНоменклатураНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуПоМагазину(Команда)
	
	ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗадачаСсылка = Неопределено;
	МассивЗадач = ПолучитьЗадачуПоМагазину(Объект.Ссылка, ТекущиеДанные.Магазин);
	Если МассивЗадач.Количество() = 1 Тогда
		ЗадачаСсылка = МассивЗадач[0];
	Иначе
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ОткрытьЗначение(ЗадачаСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачуПоМагазину(Ссылка, Магазин)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаНаДегустациюНовинки.Ссылка
		|ИЗ
		|	Документ.ЗадачаНаДегустациюНовинки КАК ЗадачаНаДегустациюНовинки
		|ГДЕ
		|	НЕ ЗадачаНаДегустациюНовинки.ПометкаУдаления
		|	И ЗадачаНаДегустациюНовинки.ЗаданиеНаДегустациюНовинки = &Ссылка
		|	И ЗадачаНаДегустациюНовинки.Магазин = &Магазин");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура МагазиныПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Запрещено удалять магазины из списка!");
		Отказ = Истина;
		Возврат;
	ИначеЕсли Вопрос("Удалить магазин(ы) из списка?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание товароведа на дегустацию новинки") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМагазинов(Команда)
	
	ДатаНачалаНовинки = НачалоДня(Объект.Дата);
	Если ВвестиДату(ДатаНачалаНовинки, "Введите начальную дату", ЧастиДаты.Дата) Тогда
		ОбновитьСписокМагазиновНаСервере(ДатаНачалаНовинки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокМагазиновНаСервере(ДатаНачалаНовинки)
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитОбъект.ОбновитьСписокМагазинов(ДатаНачалаНовинки);
	ЗначениеВРеквизитФормы(РеквизитОбъект, "Объект");
	ГруппаСтраницыПриСменеСтраницыНаСервере("ГруппаСтраницы", "ГруппаПоМагазинам");
КонецПроцедуры

&НаСервере
Процедура ИзмНоменклатураНаСервере()
	
	флЗаполнитьОднуХарактеристику = Ложь;
	// проверяем соответствие владельцу
	Если ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) И Объект.ХарактеристикаНоменклатуры.Владелец <> Объект.Номенклатура Тогда
		флЗаполнитьОднуХарактеристику = Истина;
		Объект.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) Тогда
		флЗаполнитьОднуХарактеристику = Истина;
	КонецЕсли;
	
	Если флЗаполнитьОднуХарактеристику Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
			|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ");
		Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Если ВыборкаЗапроса.Количество() = 1 Тогда
				ВыборкаЗапроса.Следующий();
				Объект.ХарактеристикаНоменклатуры = ВыборкаЗапроса.ХарактеристикаНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// берём розничную цену
	//Объект.Цена = РегистрыСведений.ЦеныПоставщиков.ПолучитьЦенуПоставщика(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры, Объект.Дата);
	Объект.Цена = Документы.МП_ЗадачаТехнолога.РозничнаяЦена(Объект.Номенклатура);
	
	//+++АК SHEP 2018.07.09 ИП-00018818
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.ХарактеристикаНоменклатуры, "ФишкаРазвёрнуто");
	//---АК SHEP 2018.07.09
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУФ",
	  Новый Структура("Отбор, ЗакрыватьПриВыборе, ТекущаяСтрока",
	  Новый Структура("КатегорияАссортимента", ПредопределенноеЗначение("Перечисление.КатегорииАссортимента.Новинки")), Истина, Объект.Номенклатура));
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Номенклатура = ВыбранноеЗначение;
		ИзмНоменклатураНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаВыбораУпр",
		Новый Структура("Отбор, ЗакрыватьПриВыборе, ТекущаяСтрока", Новый Структура("Владелец, Неактивная", Объект.Номенклатура, Ложь), Истина, Объект.ХарактеристикаНоменклатуры));
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.ХарактеристикаНоменклатуры = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Элементы.МагазиныМагазин.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныМагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Магазины.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр",
	  Новый Структура("Отбор, ЗакрыватьПриВыборе",
	    Новый Структура("ТипРозничнойТочки,ТипСтруктурнойЕдиницы,СтатусТорговойТочки",
		  ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"), ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"), ПредопределенноеЗначение("Перечисление.СтатусыТорговыхТочек.Открыт")),
		Истина));
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Магазин = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ОтменаРедактирования Тогда Возврат; КонецЕсли;
	
	// Проверяем наличие этого магазина в списке
	Если НоваяСтрока Тогда
		ТекущийМагазин = ТекущиеДанные.Магазин;
		Если НЕ ЗначениеЗаполнено(ТекущийМагазин) Тогда
			Предупреждение("Магазин должен быть заполнен!");
			Отказ = Истина;
			Возврат;
		ИначеЕсли Объект.Магазины.НайтиСтроки(Новый Структура("Магазин", ТекущийМагазин)).Количество() > 1 Тогда
			Предупреждение("Магазин ''" + Строка(ТекущийМагазин) + "'' уже есть в списке!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.МагазиныМагазин.ТолькоПросмотр = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМагазиныСОстатками(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Предупреждение("Заполните, пожалуйста, номенклатуру!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМагазиныСОстаткамиНаСервере();
	ГруппаСтраницыПриСменеСтраницыНаСервере("ГруппаСтраницы", "ГруппаПоМагазинам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМагазиныСОстаткамиНаСервере()
	
	ОтборТДТов = Формат(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Номенклатура, "id_tov"), "ЧГ=");
	
	ТЗнОстатки = Новый ТаблицаЗначений;
	ТЗнОстатки.Колонки.Добавить("ShopNo_rep", Новый ОписаниеТипов("Число"));
	ТЗнОстатки.Колонки.Добавить("Ost_kon", Новый ОписаниеТипов("Число"));
	
	ТекстЗапросаSQL =
		"SELECT
		|	ShopNo_rep, Ost_kon
		|FROM SMS_REPL..TD_ost WITH(NOLOCK)
		|WHERE id_tov IN (" + ОтборТДТов + ") AND Ost_kon != 0";
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	rs = ADOСоединение.Execute(ТекстЗапросаSQL);
	Пока НЕ rs.EOF() Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого Field Из rs.Fields Цикл
			СтруктураСтроки.Вставить(Field.Name, Field.Value);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ТЗнОстатки.Добавить(), СтруктураСтроки);
		
		rs.MoveNext();
	КонецЦикла;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Магазины.Магазин
		|ПОМЕСТИТЬ Магазины
		|ИЗ
		|	&Магазины КАК Магазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатки.ShopNo_rep,
		|	ТаблицаОстатки.Ost_kon
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	&ТаблицаОстатки КАК ТаблицаОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Магазины.Магазин КАК Магазин,
		|	ВЫРАЗИТЬ(Магазины.Магазин КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК НомерТочки
		|ИЗ
		|	Магазины КАК Магазины
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.НомерТочки
		|ИЗ
		|	ТаблицаОстатки КАК ТаблицаОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ТаблицаОстатки.ShopNo_rep = СтруктурныеЕдиницы.НомерТочки
		|			И (СтруктурныеЕдиницы.ТипРозничнойТочки = ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.Магазин))
		|			И (СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
		//+++АК ILIK 2018.08.08 ИП-00019413
		//|			И (НЕ СтруктурныеЕдиницы.СтатусТорговойТочки = ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт))
		|			И (НЕ СтруктурныеЕдиницы.СтатусТорговойТочки В (ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыТорговыхТочек.Приостановлен)))
		//---АК ILIK
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТочки
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Магазины", Объект.Магазины.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТЗнОстатки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Магазины.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры
