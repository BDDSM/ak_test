
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Предпоступление по комплектации");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	Если Параметры.Свойство("Контрагент") Тогда
		Объект.Контрагент = Параметры.Контрагент;
		Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	КонецЕсли;	
	
	Если Параметры.Свойство("Магазин") Тогда
		Объект.Магазин = Параметры.Магазин;
	КонецЕсли;	
	
	Если Параметры.Свойство("ТекущиеДанные") Тогда
		НС = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Параметры.ТекущиеДанные,,);
		НС.Сумма = НС.Количество*НС.Цена;
		НС.СтавкаНДС = НС.Номенклатура.СтавкаНДС;
		Если Не ЗначениеЗаполнено(НС.СтавкаНДС) Тогда
			НС.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
		НС.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НС.Сумма,
		Истина, Истина,
		УчетНДС.ПолучитьСтавкуНДС(НС.СтавкаНДС));
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		ТекстЗапроса="ВЫБРАТЬ
		|	СделкаСПоставщиком.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.СделкаСПоставщиком КАК СделкаСПоставщиком
		|ГДЕ
		|	СделкаСПоставщиком.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	СделкаСПоставщиком.Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент"));
	Иначе
		ЗаполнитьТаблицуОплатСервер();
	КонецЕсли;
	ЕстьОплаты = Ложь;
	Если ОплатыПоКомплектации.Количество()>0 Тогда
		ЕстьОплаты = Истина;
	КонецЕсли;
	Для Каждого Стр Из Объект.Товары Цикл
		//Строки=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки));
		//Если Строки.Количество()=0 Тогда
		//	Стр.Оплачено=Ложь;
		//Иначе 
		//	Стр.Оплачено=Истина;
		//	ЕстьОплаты = Истина;
		//КонецЕсли;
		Если ЕстьОплаты Тогда
			Стр.Оплачено=Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	ЕстьПравоКорректировки = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.КорректировкаОплаченныхПредпоступлений, Ложь);
	
	Если ЕстьОплаты И НЕ ЕстьПравоКорректировки Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Сообщить("По документу есть оплаты, редактирование ограничено");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЕстьПравоКорректировки Тогда
		ТекстЗапроса="ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТМЦКПоступлениюОбороты.КоличествоРасход), 0) КАК КоличествоРасход
		|ИЗ
		|	РегистрНакопления.ТМЦКПоступлению.Обороты(, , , Предпоступление = &Предпоступление) КАК ТМЦКПоступлениюОбороты";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Запрос.УстановитьПараметр("Предпоступление",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоРасход>0 Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
				Сообщить("По документу есть поступления, редактирование ограничено");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЕстьПравоКорректировки Тогда
		ЭтаФОрма.Элементы.Товары.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	//+++АК POZM 2017.12.26 ИП-00017352 
	ЗаполнитьОстаткиХолодильниковСервер();
	//---АК POZM 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОВыборе(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзСделок(Команда)
	//Если ЕстьОплаты() Тогда // теперь функция просто заполняет вспомогательный реквизит
	//	//Сообщить("Строки комплектации участвуют в оплатах. Редактирование документа ограничено!");
	//	//Возврат;
	//КонецЕсли;	
	//ТекДанные=Элементы.Товары.ТекущиеДанные;
	//ТекКонтр=Неопределено;
	//Если ТекДанные<>Неопределено Тогда
	//	ТекКонтр=ТекДанные.Сделка.Контрагент;
	//КонецЕсли;	
	Парам=Новый Структура;
	Парам.Вставить("ЗакрыватьПриВыборе",Ложь);
	Парам.Вставить("Контрагент",Объект.Контрагент);
	Парам.Вставить("ТЧ",ПолучитьТЧСервер());
	Парам.Вставить("Ссылка",Объект.Ссылка);
	
	ОткрытьФорму("Документ.ПредпоступлениеПоКомплектации.Форма.ФормаПодбораИзСделок",Парам,ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ПолучитьТЧСервер()
	
	ЕстьПравоКорректировки = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.КорректировкаОплаченныхПредпоступлений, Ложь);
	
	НеоплаченныеСтроки=Новый Массив;
	Для Каждого Стр Из Объект.Товары Цикл
		//Если ЗначениеЗаполнено(Стр.Предпоступление) Тогда
		//	Продолжить;
		//КонецЕсли;	
		//Оплаченные=ОплаченныеСтроки.НайтиСтроки(Новый Структура("СтрокаКомплектации",Стр.УИН_Строки));
		Оплаченные=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки));
		
		Если Оплаченные.Количество()=0 Тогда
			НеоплаченныеСтроки.Добавить(Стр);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Объект.Товары.Выгрузить(НеоплаченныеСтроки);
	
КонецФункции
&НаСервере

Процедура ЗаполнитьТаблицуОплатСервер()
	ТекстЗапроса="ВЫБРАТЬ
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации КАК УИН_Строки,
	|	РасчетыПоСделкамСПоставщиками.Регистратор КАК Заявка,
	|	ПредпоступлениеПоКомплектацииТовары.Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
	|		ПО РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации = ПредпоступлениеПоКомплектацииТовары.УИН_Строки
	|ГДЕ
	|	(РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.РасходИзБанка
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
	|	И ПредпоступлениеПоКомплектацииТовары.Ссылка = &Предпоступление
	|	И РасчетыПоСделкамСПоставщиками.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации,
	|	РасчетыПоСделкамСПоставщиками.Регистратор,
	|	ПредпоступлениеПоКомплектацииТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации,
	|	РасчетыПоСделкамСПоставщиками.Регистратор,
	|	ПоступлениеТоваровУслугОборудование.Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|		ПО РасчетыПоСделкамСПоставщиками.Комплектация = ПоступлениеТоваровУслугОборудование.Ссылка
	|ГДЕ
	|	(РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.РасходИзБанка
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
	|	И ПоступлениеТоваровУслугОборудование.Предпоступление = &Предпоступление
	|	И РасчетыПоСделкамСПоставщиками.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации,
	|	РасчетыПоСделкамСПоставщиками.Регистратор,
	|	ПоступлениеТоваровУслугОборудование.Ссылка";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Предпоступление",Объект.Ссылка);
	ТЗ=Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"ОплатыПоКомплектации");
КонецПроцедуры	


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Документ.ПредпоступлениеПоКомплектации.Форма.ФормаПодбораИзСделок" Тогда
		
		//Объект.Комплектация.Очистить();
		//НеоплаченныеСтроки=Новый Массив;
		ВыбранныеСтроки=ВыбранноеЗначение.ВыбранныеСтроки;
		//ВыбКонтрагент=ВыбранноеЗначение.Контрагент;
		ОчиститьНеоплаченныеСтрокиНаСервере();
		
		Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбраннаяСтрока);
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда 
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				Иначе	
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				КонецЕсли;	
			КонецЕсли;
			НоваяСтрока.Сумма = НоваяСтрока.Количество*НоваяСтрока.Цена;
			НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
			Истина, Истина,
			УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Если СокрЛП(НоваяСтрока.УИН_Строки)="" Тогда
				НоваяСтрока.УИН_Строки=Новый УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ШаблоныКомплектаций.Форма.ФормаВыбора" Тогда
		ОбработатьВыборШаблонаСервер(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеоплаченныеСтрокиНаСервере()
	//	Для Каждого Стр Из Объект.Комплектация Цикл
	Кол=Объект.Товары.Количество()-1;
	Для й=0 По Кол Цикл
		Стр=Объект.Товары[Кол-й] ;
		//Если ЗначениеЗаполнено(ВыбКонтрагент)И Стр.Сделка.Контрагент<>ВыбКонтрагент Тогда
		//	Продолжить;
		//КонецЕсли;	
		//Оплаченные=ОплаченныеСтроки.НайтиСтроки(Новый Структура("СтрокаКомплектации",Стр.УИН_Строки));
		Оплаченные=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки));
		Если Оплаченные.Количество()=0 Тогда
			//НеоплаченныеСтроки.Добавить(Стр);
			Объект.Товары.Удалить(Стр);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьВыборШаблонаСервер(ВыбранноеЗначение)
	Шаблон = ВыбранноеЗначение.Состав.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Шаблон.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Контрагент"	, Объект.Контрагент);
	//Запрос.УстановитьПараметр("Контрагенты", Шаблон.ВыгрузитьКолонку("Контрагент"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа КАК УИН_СтрокиСделки,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка.Контрагент КАК Контрагент,
	|	СделкаСПоставщикомГрафикОплат.Цена
	|ИЗ
	|	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Сделка.Контрагент = &Контрагент) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	|		ПО ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	|			И ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка.Дата";
	ДоступныеОстатки = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Номенклатура");
	Для Каждого СтрокаШаблона Из Шаблон Цикл
		
		Распределить = СтрокаШаблона.Количество;
		
		//СтруктураОтбора.Номенклатура = СтрокаШаблона.Номенклатура;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрокаШаблона);
		СтрокиОстатков = ДоступныеОстатки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			
			Если СтрокаОстатка.Остаток >= Распределить Тогда
				НоваяСтрока.Количество = Распределить;
				Распределить = 0;
			Иначе
				НоваяСтрока.Количество = СтрокаОстатка.Остаток;
				Распределить = Распределить - НоваяСтрока.Количество;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда 
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				Иначе	
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				КонецЕсли;	
			КонецЕсли;
			НоваяСтрока.Сумма = НоваяСтрока.Количество*НоваяСтрока.Цена;
			НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
			Истина, Истина,
			УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Если СокрЛП(НоваяСтрока.УИН_Строки)="" Тогда
				НоваяСтрока.УИН_Строки=Новый УникальныйИдентификатор();
			КонецЕсли;
			Если Распределить = 0 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если Распределить <> 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Количество		= Распределить;
			НоваяСтрока.Номенклатура	= СтрокаШаблона.Номенклатура;
			Если СокрЛП(НоваяСтрока.УИН_Строки)="" Тогда
				НоваяСтрока.УИН_Строки=Новый УникальныйИдентификатор();
			КонецЕсли;
			
			//НоваяСтрока.Контрагент		= СтрокаШаблона.Контрагент;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьКомплект(Команда)
	
	//Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	Предупреждение("Контрагент должен быть заполнен!");
	//	Возврат;
	//КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор",Новый Структура("Контрагент", Объект.Контрагент));
	ОткрытьФорму("Справочник.ШаблоныКомплектаций.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.Товары.Очистить();
	ЗаполнитьОстаткиХолодильниковСервер();
КонецПроцедуры

// +++ АК pozm ИП-00016652
&НаСервере
Процедура ОтправитьСтрокуВДругойДокументНаСервере(ДокПолучатель,ТекущаяСтрока,ПеределатьОплату,ПеределатьПоступления)
	Если Не ЗначениеЗаполнено(ДокПолучатель) Тогда
		Возврат;
	КонецЕсли;	
	
	ЕстьПравоКорректировки = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.КорректировкаОплаченныхПредпоступлений, Ложь);
	Если Не ЕстьПравоКорректировки Тогда
		Возврат;
		Сообщить("Недостаточно прав для переноса строки в другой документ");
	КонецЕсли;	
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Док	=	ДокПолучатель.ПолучитьОбъект();
	УжеЕсть = Док.Товары.НайтиСтроки(Новый Структура("УИН_Строки",ТекущиеДанные.УИН_Строки));
	
	Если УжеЕсть.Количество() > 0 Тогда
		Сообщить("Эта строка уже есть в документе "+ДокПолучатель);
		Возврат;
	КонецЕсли;	
	НачатьТранзакцию();
	
	ЭтотДок = РеквизитФормыВЗначение("Объект");
	Проведен = ЭтотДок.Проведен;
	ЭтотДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	НС = Док.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НС,ТекущиеДанные);
	Док.Записать(?(Док.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	Сообщить("Изменен "+Док);
	
	
	ЭтотДОк.Товары.Удалить(ЭтотДОк.Товары.Найти(ТекущиеДанные.УИН_Строки));
	ЭтотДок.Записать(?(Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	Сообщить("Изменен "+ЭтотДок);
	ЗначениеВРеквизитФормы(ЭтотДок,"Объект");
	
	
	
	Если ПеределатьПоступления Тогда
		ТекстЗапроса="ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.Ссылка,
		|	ПоступлениеТоваровУслугОборудование.НомерСтроки
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугОборудование.Предпоступление = &Предпоступление";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Номенклатура",ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("Предпоступление",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокПоступления = Выборка.Ссылка.ПолучитьОбъект();
			ДокПоступления.Оборудование[Выборка.НомерСтроки-1].Предпоступление = Док.Ссылка;
			
			ДокПоступления.Записать(?(ДокПоступления.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Сообщить("Изменен "+ДокПоступления);
		КонецЦикла;	
	КонецЕсли;	
	
	Если ПеределатьОплату Тогда
		ТекстЗапроса="ВЫБРАТЬ
		|	РасчетыПоСделкамСПоставщиками.Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
		|ГДЕ
		|	РасчетыПоСделкамСПоставщиками.Комплектация = &Комплектация
		|	И РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации = &УИН_СтрокиКомплектации
		|	И (РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
		|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.РасходИзБанка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоСделкамСПоставщиками.Регистратор";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Комплектация",Объект.Ссылка);
		Запрос.УстановитьПараметр("УИН_СтрокиКомплектации",ТекущиеДанные.УИН_Строки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокОплаты = Выборка.Регистратор.ПолучитьОбъект();
			СтрокиПоДокументу = ДокОплаты.СтруктурныеЕдиницы.НайтиСтроки(Новый Структура("Комплектация,СтрокаКомплектации",Объект.Ссылка,ТекущиеДанные.УИН_Строки));
			Для Каждого СтрокаЗамены ИЗ СтрокиПоДокументу Цикл
				СтрокаЗамены.Комплектация = Док.Ссылка;
			КонецЦикла;	
			ДокОплаты.ОбменДанными.Загрузка = Истина;
			ДокОплаты.Записать(РежимЗаписиДокумента.Запись);
			Набор = РегистрыНакопления.РасчетыПоСделкамСПоставщиками.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ДокОплаты.Ссылка);
			Набор.Прочитать();
			Для Каждого Дв Из Набор Цикл
				Если ДВ.УИН_СтрокиКомплектации = ТекущиеДанные.УИН_Строки Тогда
					Дв.Комплектация = Док.Ссылка;
				КонецЕсли;	
			КонецЦикла;	
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			Сообщить("Изменен "+ДокОплаты);
		КонецЦикла;	
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьСтрокуВДругойДокумент(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Для новых документов функция не требуется. Откройте другой документ и добавьте строку стандартно.");
		Возврат;
	КонецЕсли;	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("В результате операции текущая строка будет перенесена в другой документ и оба документа будут записаны. Продолжить?",Режим);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Оплачено Тогда
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			ОтветНаОплаты = Вопрос("По строке есть оплаты. Переделать оплаты на новый документ?",Режим);
			Если	ОтветНаОплаты = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		Если ЕстьПоступленияПоСтроке(ТекущиеДанные.Номенклатура) Тогда
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			ОтветНаПоступления = Вопрос("По строке есть Поступления. Переделать поступления на новый документ?",Режим);
			Если	ОтветНаПоступления = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		Парам = Новый Структура();
		Отбор = Новый Структура("Контрагент",Объект.Контрагент);
		Парам.Вставить("Отбор",Отбор);
		ДругойДок = ОткрытьФормуМодально("Документ.ПредпоступлениеПоКомплектации.Форма.ФормаВыбора",Парам);
		ОтправитьСтрокуВДругойДокументНаСервере(ДругойДок,Элементы.Товары.ТекущаяСтрока,ОтветНаОплаты = КодВозвратаДиалога.Да,ОтветНаПоступления = КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЕстьПоступленияПоСтроке(Номенклатура)
	ТекстЗапроса="ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
	|	И ПоступлениеТоваровУслугОборудование.Предпоступление = &Предпоступление";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Предпоступление",Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции	
// --- АК pozm ИП-00016652

//+++АК POZM 2017.11.04 ИП-00017048 
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИстории Тогда
		СформироватьОтчетПоИсторииНаСервере();
	КонецЕсли;	
КонецПроцедуры
//---АК POZM 

//+++АК POZM 2017.11.04 ИП-00017048
&НаСервере
Процедура СформироватьОтчетПоИсторииНаСервере()
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = Документы.ПредпоступлениеПоКомплектации.ПолучитьМакет("МакетОтчетаПоИстории"); 
	
	//ЭтаФорма["АдресСхемы"] = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	СхемаКомпоновкиДанных.Параметры.Ссылка.Значение = Объект.Ссылка;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТаблИстория.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТаблИстория);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры


&НаКлиенте
Процедура СформироватьОтчетПоИстории(Команда)
	СформироватьОтчетПоИсторииНаСервере();
КонецПроцедуры
//---АК POZM 

//+++АК POZM 2017.12.26 ИП-00017352 
&НаСервере
Процедура ЗаполнитьОстаткиХолодильниковСервер()
	НераспределенныеОстатки.Очистить();
	//+++АК POZM 2018.06.01 ИП-00018375 
	#Область АК_ОтключенныйКод 
	//Если ОтображатьВсеОстаткиПоСделкам Тогда
	//	ТекстЗапроса="ВЫБРАТЬ
	//	             |	ПлановаяКомплектацияТТ.Магазин,
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника,
	//	             |	ПлановаяКомплектацияТТ.Количество КАК КоличествоПлан,
	//	             |	СУММА(ПредпоступлениеПоКомплектацииТовары.Количество) КАК КоличествоУкомплектовано
	//	             |ПОМЕСТИТЬ ВесьПлан
	//	             |ИЗ
	//	             |	РегистрСведений.ПлановаяКомплектацияТТ КАК ПлановаяКомплектацияТТ
	//	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
	//	             |		ПО ПлановаяКомплектацияТТ.Магазин = ПредпоступлениеПоКомплектацииТовары.Ссылка.Магазин
	//	             |			И ПлановаяКомплектацияТТ.ТипХолодильника = ПредпоступлениеПоКомплектацииТовары.Номенклатура.ТипХолодильника
	//	             |			И (ПредпоступлениеПоКомплектацииТовары.Номенклатура.ЭтоХолодильник)
	//	             |			И (ПредпоступлениеПоКомплектацииТовары.Ссылка.Проведен)
	//	             |ГДЕ
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника <> ЗНАЧЕНИЕ(Справочник.ТипыХолодильников.ПустаяСсылка)
	//	             |	И ПлановаяКомплектацияТТ.Магазин = &Магазин
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	ПлановаяКомплектацияТТ.Магазин,
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника,
	//	             |	ПлановаяКомплектацияТТ.Количество
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	ТЧДокумента.Номенклатура КАК Номенклатура,
	//	             |	ТЧДокумента.ДатаГотовности КАК ДатаГотовности,
	//	             |	ТЧДокумента.Сделка КАК Сделка,
	//	             |	ТЧДокумента.УИН_СтрокиСделки КАК УИН_СтрокиСделки,
	//	             |	-ТЧДокумента.Количество КАК Количество,
	//	             |	&Контрагент КАК Контрагент,
	//	             |	ТЧДокумента.ЭтоХолодильник КАК ЭтоХолодильник,
	//	             |	ТЧДокумента.Цена КАК Цена
	//	             |ПОМЕСТИТЬ ТЧДокумента
	//	             |ИЗ
	//	             |	&ТЧДокумента КАК ТЧДокумента
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	СделкаСПоставщикомГрафикОплат.Номенклатура,
	//	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности КАК ДатаГотовности,
	//	             |	СделкаСПоставщикомГрафикОплат.Ссылка КАК Сделка,
	//	             |	СделкаСПоставщикомГрафикОплат.УИН_Строки КАК УИН_СтрокиСделки,
	//	             |	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	//	             |	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент,
	//	             |	СделкаСПоставщикомГрафикОплат.Цена
	//	             |ПОМЕСТИТЬ Предварительно
	//	             |ИЗ
	//	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(, ) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//	             |		ПО ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	//	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура = СделкаСПоставщикомГрафикОплат.Номенклатура
	//	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	//	             |ГДЕ
	//	             |	(СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент = &Контрагент
	//	             |			ИЛИ &ПоВсемКонтрагентам)
	//	             |
	//	             |ОБЪЕДИНИТЬ ВСЕ
	//	             |
	//	             |ВЫБРАТЬ
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Номенклатура,
	//	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Сделка,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Количество,
	//	             |	РасчетыПоСделкамСПоставщиками.Сделка.Контрагент,
	//	             |	СделкаСПоставщикомГрафикОплат.Цена
	//	             |ИЗ
	//	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками КАК ТоварыККомплектацииСделокСПоставщиками
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	//	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//	             |			ПО (СделкаСПоставщикомГрафикОплат.Ссылка = РасчетыПоСделкамСПоставщиками.Сделка)
	//	             |				И (СделкаСПоставщикомГрафикОплат.УИН_Строки = РасчетыПоСделкамСПоставщиками.УИН_Этапа)
	//	             |		ПО ТоварыККомплектацииСделокСПоставщиками.Регистратор = РасчетыПоСделкамСПоставщиками.Регистратор
	//	             |			И ТоварыККомплектацииСделокСПоставщиками.Сделка = РасчетыПоСделкамСПоставщиками.Сделка
	//	             |			И ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа = РасчетыПоСделкамСПоставщиками.УИН_Этапа
	//	             |ГДЕ
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Регистратор = &ЭтотДокумент
	//	             |	И ТоварыККомплектацииСделокСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	//	             |	И РасчетыПоСделкамСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	//	             |	И РасчетыПоСделкамСПоставщиками.Регистратор = &ЭтотДокумент
	//	             |	И ТоварыККомплектацииСделокСПоставщиками.Номенклатура.ЭтоХолодильник = ИСТИНА
	//	             |
	//	             |ОБЪЕДИНИТЬ ВСЕ
	//	             |
	//	             |ВЫБРАТЬ
	//	             |	ТЧДокумента.Номенклатура,
	//	             |	ТЧДокумента.ДатаГотовности,
	//	             |	ТЧДокумента.Сделка,
	//	             |	ТЧДокумента.УИН_СтрокиСделки,
	//	             |	-ТЧДокумента.Количество,
	//	             |	ТЧДокумента.Контрагент,
	//	             |	ТЧДокумента.Цена
	//	             |ИЗ
	//	             |	ТЧДокумента КАК ТЧДокумента
	//	             |ГДЕ
	//	             |	ТЧДокумента.ЭтоХолодильник = ИСТИНА
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	Предварительно.Номенклатура,
	//	             |	Предварительно.ДатаГотовности КАК ДатаГотовности,
	//	             |	Предварительно.Сделка КАК Сделка,
	//	             |	Предварительно.УИН_СтрокиСделки,
	//	             |	СУММА(Предварительно.Остаток) КАК Остаток,
	//	             |	Предварительно.Контрагент,
	//	             |	ВЫБОР
	//	             |		КОГДА Предварительно.ДатаГотовности = ДАТАВРЕМЯ(1, 1, 1)
	//	             |			ТОГДА ДАТАВРЕМЯ(2500, 1, 1)
	//	             |		ИНАЧЕ Предварительно.ДатаГотовности
	//	             |	КОНЕЦ КАК ДатаГотовностиДляСортировки,
	//	             |	Предварительно.Цена,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) КАК КоличествоПлан,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК КоличествоУкомплектовано,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК ОсталосьУкомплектовать,
	//	             |	Предварительно.Номенклатура.ТипХолодильника КАК ТипХолодильника
	//	             |ИЗ
	//	             |	Предварительно КАК Предварительно
	//	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВесьПлан КАК ВесьПлан
	//	             |		ПО Предварительно.Номенклатура.ТипХолодильника = ВесьПлан.ТипХолодильника
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	Предварительно.УИН_СтрокиСделки,
	//	             |	Предварительно.Сделка,
	//	             |	Предварительно.ДатаГотовности,
	//	             |	Предварительно.Номенклатура,
	//	             |	Предварительно.Контрагент,
	//	             |	Предварительно.Цена,
	//	             |	Предварительно.Номенклатура.ТипХолодильника,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0),
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0),
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0)
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО
	//	             |	ТипХолодильника,
	//	             |	Сделка";
	//Иначе
	//	ТекстЗапроса="ВЫБРАТЬ
	//	             |	ПлановаяКомплектацияТТ.Магазин,
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника,
	//	             |	ПлановаяКомплектацияТТ.Количество КАК КоличествоПлан,
	//	             |	СУММА(ПредпоступлениеПоКомплектацииТовары.Количество) КАК КоличествоУкомплектовано
	//	             |ПОМЕСТИТЬ ВесьПлан
	//	             |ИЗ
	//	             |	РегистрСведений.ПлановаяКомплектацияТТ КАК ПлановаяКомплектацияТТ
	//	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
	//	             |		ПО ПлановаяКомплектацияТТ.Магазин = ПредпоступлениеПоКомплектацииТовары.Ссылка.Магазин
	//	             |			И ПлановаяКомплектацияТТ.ТипХолодильника = ПредпоступлениеПоКомплектацииТовары.Номенклатура.ТипХолодильника
	//	             |			И (ПредпоступлениеПоКомплектацииТовары.Номенклатура.ЭтоХолодильник)
	//	             |			И (ПредпоступлениеПоКомплектацииТовары.Ссылка.Проведен)
	//	             |ГДЕ
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника <> ЗНАЧЕНИЕ(Справочник.ТипыХолодильников.ПустаяСсылка)
	//	             |	И ПлановаяКомплектацияТТ.Магазин = &Магазин
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	ПлановаяКомплектацияТТ.Магазин,
	//	             |	ПлановаяКомплектацияТТ.ТипХолодильника,
	//	             |	ПлановаяКомплектацияТТ.Количество
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	ТЧДокумента.Номенклатура КАК Номенклатура,
	//	             |	ТЧДокумента.ДатаГотовности КАК ДатаГотовности,
	//	             |	ТЧДокумента.Сделка КАК Сделка,
	//	             |	ТЧДокумента.УИН_СтрокиСделки КАК УИН_СтрокиСделки,
	//	             |	-ТЧДокумента.Количество КАК Количество,
	//	             |	&Контрагент КАК Контрагент,
	//	             |	ТЧДокумента.ЭтоХолодильник КАК ЭтоХолодильник,
	//	             |	ТЧДокумента.Цена КАК Цена
	//	             |ПОМЕСТИТЬ ТЧДокумента
	//	             |ИЗ
	//	             |	&ТЧДокумента КАК ТЧДокумента
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	СделкаСПоставщикомГрафикОплат.Номенклатура,
	//	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности КАК ДатаГотовности,
	//	             |	СделкаСПоставщикомГрафикОплат.Ссылка КАК Сделка,
	//	             |	СделкаСПоставщикомГрафикОплат.УИН_Строки КАК УИН_СтрокиСделки,
	//	             |	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	//	             |	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент,
	//	             |	СделкаСПоставщикомГрафикОплат.Цена
	//	             |ПОМЕСТИТЬ Предварительно
	//	             |ИЗ
	//	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(, ) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//	             |		ПО ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	//	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура = СделкаСПоставщикомГрафикОплат.Номенклатура
	//	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	//	             |ГДЕ
	//	             |	(СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент = &Контрагент
	//	             |			ИЛИ &ПоВсемКонтрагентам)
	//	             |
	//	             |ОБЪЕДИНИТЬ ВСЕ
	//	             |
	//	             |ВЫБРАТЬ
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Номенклатура,
	//	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Сделка,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа,
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Количество,
	//	             |	РасчетыПоСделкамСПоставщиками.Сделка.Контрагент,
	//	             |	СделкаСПоставщикомГрафикОплат.Цена
	//	             |ИЗ
	//	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками КАК ТоварыККомплектацииСделокСПоставщиками
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	//	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//	             |			ПО (СделкаСПоставщикомГрафикОплат.Ссылка = РасчетыПоСделкамСПоставщиками.Сделка)
	//	             |				И (СделкаСПоставщикомГрафикОплат.УИН_Строки = РасчетыПоСделкамСПоставщиками.УИН_Этапа)
	//	             |		ПО ТоварыККомплектацииСделокСПоставщиками.Регистратор = РасчетыПоСделкамСПоставщиками.Регистратор
	//	             |			И ТоварыККомплектацииСделокСПоставщиками.Сделка = РасчетыПоСделкамСПоставщиками.Сделка
	//	             |			И ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа = РасчетыПоСделкамСПоставщиками.УИН_Этапа
	//	             |ГДЕ
	//	             |	ТоварыККомплектацииСделокСПоставщиками.Регистратор = &ЭтотДокумент
	//	             |	И ТоварыККомплектацииСделокСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	//	             |	И РасчетыПоСделкамСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	//	             |	И РасчетыПоСделкамСПоставщиками.Регистратор = &ЭтотДокумент
	//	             |	И ТоварыККомплектацииСделокСПоставщиками.Номенклатура.ЭтоХолодильник = ИСТИНА
	//	             |
	//	             |ОБЪЕДИНИТЬ ВСЕ
	//	             |
	//	             |ВЫБРАТЬ
	//	             |	ТЧДокумента.Номенклатура,
	//	             |	ТЧДокумента.ДатаГотовности,
	//	             |	ТЧДокумента.Сделка,
	//	             |	ТЧДокумента.УИН_СтрокиСделки,
	//	             |	-ТЧДокумента.Количество,
	//	             |	ТЧДокумента.Контрагент,
	//	             |	ТЧДокумента.Цена
	//	             |ИЗ
	//	             |	ТЧДокумента КАК ТЧДокумента
	//	             |ГДЕ
	//	             |	ТЧДокумента.ЭтоХолодильник = ИСТИНА
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	Предварительно.Номенклатура,
	//	             |	Предварительно.ДатаГотовности КАК ДатаГотовности,
	//	             |	Предварительно.Сделка КАК Сделка,
	//	             |	Предварительно.УИН_СтрокиСделки,
	//	             |	СУММА(Предварительно.Остаток) КАК Остаток,
	//	             |	Предварительно.Контрагент,
	//	             |	ВЫБОР
	//	             |		КОГДА Предварительно.ДатаГотовности = ДАТАВРЕМЯ(1, 1, 1)
	//	             |			ТОГДА ДАТАВРЕМЯ(2500, 1, 1)
	//	             |		ИНАЧЕ Предварительно.ДатаГотовности
	//	             |	КОНЕЦ КАК ДатаГотовностиДляСортировки,
	//	             |	Предварительно.Цена,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) КАК КоличествоПлан,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК КоличествоУкомплектовано,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК ОсталосьУкомплектовать,
	//	             |	Предварительно.Номенклатура.ТипХолодильника КАК ТипХолодильника
	//	             |ИЗ
	//	             |	Предварительно КАК Предварительно
	//	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесьПлан КАК ВесьПлан
	//	             |		ПО Предварительно.Номенклатура.ТипХолодильника = ВесьПлан.ТипХолодильника
	//	             |ГДЕ
	//	             |	ВесьПлан.ТипХолодильника <> ЗНАЧЕНИЕ(Справочник.ТипыХолодильников.Пустаяссылка)
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	Предварительно.УИН_СтрокиСделки,
	//	             |	Предварительно.Сделка,
	//	             |	Предварительно.ДатаГотовности,
	//	             |	Предварительно.Номенклатура,
	//	             |	Предварительно.Контрагент,
	//	             |	Предварительно.Цена,
	//	             |	Предварительно.Номенклатура.ТипХолодильника,
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0),
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0),
	//	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0)
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО
	//	             |	ТипХолодильника,
	//	             |	Сделка";
	//КонецЕсли;	
	//Запрос=Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	//	Запрос.УстановитьПараметр("ЭтотДокумент",Объект.Ссылка);
	//	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	//	ТабДок = Объект.Товары.Выгрузить();
	//	ТабДок.Колонки.Добавить("ЭтоХолодильник",Новый ОписаниеТипов("Булево"));
	//	
	//	Для каждого Стр  Из ТабДок Цикл
	//
	//		Стр.ЭтоХолодильник = Стр.Номенклатура.ЭтоХолодильник;
	//
	//	КонецЦикла; 
	//	Запрос.УстановитьПараметр("ТЧДокумента",ТабДок);
	//	Запрос.УстановитьПараметр("ПоВсемКонтрагентам",Ложь);
	//Иначе
	//	Возврат;
	//	//Запрос.УстановитьПараметр("Контрагент",Неопределено);
	//	//Запрос.УстановитьПараметр("ПоВсемКонтрагентам",Истина);
	//КонецЕсли;	
	//ТабОстатков = Запрос.Выполнить().Выгрузить();
	//ЗначениеВРеквизитФормы(ТабОстатков,"НераспределенныеОстатки");
	////НераспределенныеОстатки.Загрузить(ТабОстатков);
	////ТЗ = РеквизитФормыВЗначение("НераспределенныеОстатки");
	////ЗначениеВРеквизитФормы(ТЗ,"НераспределенныеОстатки");
	////СтруктураОтбора=Новый Структура;
	////СтруктураОтбора.Вставить("Номенклатура",);
	////СтруктураОтбора.Вставить("Сделка",);
	////СтруктураОтбора.Вставить("УИН_СтрокиСделки",);
	////ТЧДокумента=РеквизитФормыВЗначение("ТабЧДокумента");
	////ТЧДокумента.Свернуть("Сделка,УИН_СтрокиСделки,Номенклатура","Количество");
	////Для Каждого Стр Из ТЧДокумента Цикл
	////	ЗаполнитьЗначенияСвойств(СтруктураОтбора,Стр);
	////	
	////	СтрокиОстатков=НераспределенныеОстатки.НайтиСтроки(СтруктураОтбора);
	////	Если СтрокиОстатков.Количество()>0 Тогда
	////		СтрокиОстатков[0].Количество=Стр.Количество;
	////		СтрокиОстатков[0].Пометка=Истина;
	////		//СтрокиОстатков[0].Остаток=СтрокиОстатков[0].Остаток+Стр.Количество;
	////	КонецЕсли;	
	////КонецЦикла;	
	#КонецОбласти
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПлановаяКомплектацияТТОбороты.Магазин,
	             |	ПлановаяКомплектацияТТОбороты.ТипОборудования КАК ТипХолодильника,
	             |	ПлановаяКомплектацияТТОбороты.Оборудование,
	             |	ПлановаяКомплектацияТТОбороты.КоличествоПриход КАК КоличествоПлан,
	             |	ПлановаяКомплектацияТТОбороты.КоличествоРасход КАК КоличествоУкомплектовано
	             |ПОМЕСТИТЬ ВесьПлан
	             |ИЗ
	             |	РегистрНакопления.ПлановаяКомплектацияТорговыхТочек.Обороты(, , , Магазин = &Магазин) КАК ПлановаяКомплектацияТТОбороты
	             |ГДЕ
	             |	ПлановаяКомплектацияТТОбороты.Магазин = &Магазин
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПлановаяКомплектацияТТОбороты.Магазин,
	             |	ПлановаяКомплектацияТТОбороты.ТипОборудования,
	             |	ПлановаяКомплектацияТТОбороты.Оборудование,
	             |	ПлановаяКомплектацияТТОбороты.КоличествоПриход,
	             |	ПлановаяКомплектацияТТОбороты.КоличествоРасход
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТЧДокумента.Номенклатура КАК Номенклатура,
	             |	ТЧДокумента.ДатаГотовности КАК ДатаГотовности,
	             |	ТЧДокумента.Сделка КАК Сделка,
	             |	ТЧДокумента.УИН_СтрокиСделки КАК УИН_СтрокиСделки,
	             |	-ТЧДокумента.Количество КАК Количество,
	             |	&Контрагент КАК Контрагент,
	             |	ТЧДокумента.Цена КАК Цена
	             |ПОМЕСТИТЬ ТЧДокументаПред
	             |ИЗ
	             |	&ТЧДокумента КАК ТЧДокумента
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТЧДокумента.Номенклатура КАК Номенклатура,
	             |	ТЧДокумента.ДатаГотовности КАК ДатаГотовности,
	             |	ТЧДокумента.Сделка КАК Сделка,
	             |	ТЧДокумента.УИН_СтрокиСделки КАК УИН_СтрокиСделки,
	             |	ТЧДокумента.Количество КАК Количество,
	             |	ТЧДокумента.Контрагент КАК Контрагент,
	             |	СпрНоменклатура.ЭтоХолодильник КАК ЭтоХолодильник,
	             |	ТЧДокумента.Цена КАК Цена
	             |ПОМЕСТИТЬ ТЧДокумента
	             |ИЗ
	             |	ТЧДокументаПред КАК ТЧДокумента
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	             |		ПО ТЧДокумента.Номенклатура = СпрНоменклатура.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СделкаСПоставщикомГрафикОплат.Номенклатура,
	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности КАК ДатаГотовности,
	             |	СделкаСПоставщикомГрафикОплат.Ссылка КАК Сделка,
	             |	СделкаСПоставщикомГрафикОплат.УИН_Строки КАК УИН_СтрокиСделки,
	             |	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	             |	СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент,
	             |	СделкаСПоставщикомГрафикОплат.Цена
	             |ПОМЕСТИТЬ Предварительно
	             |ИЗ
	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(, ) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	             |		ПО ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура = СделкаСПоставщикомГрафикОплат.Номенклатура
	             |			И ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	             |ГДЕ
	             |	(СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент = &Контрагент
	             |			ИЛИ &ПоВсемКонтрагентам)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ТоварыККомплектацииСделокСПоставщиками.Номенклатура,
	             |	СделкаСПоставщикомГрафикОплат.ДатаГотовности,
	             |	ТоварыККомплектацииСделокСПоставщиками.Сделка,
	             |	ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа,
	             |	ТоварыККомплектацииСделокСПоставщиками.Количество,
	             |	РасчетыПоСделкамСПоставщиками.Сделка.Контрагент,
	             |	СделкаСПоставщикомГрафикОплат.Цена
	             |ИЗ
	             |	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками КАК ТоварыККомплектацииСделокСПоставщиками
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	             |			ПО (СделкаСПоставщикомГрафикОплат.Ссылка = РасчетыПоСделкамСПоставщиками.Сделка)
	             |				И (СделкаСПоставщикомГрафикОплат.УИН_Строки = РасчетыПоСделкамСПоставщиками.УИН_Этапа)
	             |		ПО ТоварыККомплектацииСделокСПоставщиками.Регистратор = РасчетыПоСделкамСПоставщиками.Регистратор
	             |			И ТоварыККомплектацииСделокСПоставщиками.Сделка = РасчетыПоСделкамСПоставщиками.Сделка
	             |			И ТоварыККомплектацииСделокСПоставщиками.УИН_Этапа = РасчетыПоСделкамСПоставщиками.УИН_Этапа
	             |ГДЕ
	             |	ТоварыККомплектацииСделокСПоставщиками.Регистратор = &ЭтотДокумент
	             |	И ТоварыККомплектацииСделокСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	             |	И РасчетыПоСделкамСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	             |	И РасчетыПоСделкамСПоставщиками.Регистратор = &ЭтотДокумент
	             |	И ТоварыККомплектацииСделокСПоставщиками.Номенклатура.ЭтоХолодильник = ИСТИНА
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ТЧДокумента.Номенклатура,
	             |	ТЧДокумента.ДатаГотовности,
	             |	ТЧДокумента.Сделка,
	             |	ТЧДокумента.УИН_СтрокиСделки,
	             |	-ТЧДокумента.Количество,
	             |	ТЧДокумента.Контрагент,
	             |	ТЧДокумента.Цена
	             |ИЗ
	             |	ТЧДокумента КАК ТЧДокумента
	             |ГДЕ
	             |	ТЧДокумента.ЭтоХолодильник = ИСТИНА
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Предварительно.Номенклатура,
	             |	Предварительно.ДатаГотовности КАК ДатаГотовности,
	             |	Предварительно.Сделка КАК Сделка,
	             |	Предварительно.УИН_СтрокиСделки,
	             |	СУММА(Предварительно.Остаток) КАК Остаток,
	             |	Предварительно.Контрагент,
	             |	ВЫБОР
	             |		КОГДА Предварительно.ДатаГотовности = ДАТАВРЕМЯ(1, 1, 1)
	             |			ТОГДА ДАТАВРЕМЯ(2500, 1, 1)
	             |		ИНАЧЕ Предварительно.ДатаГотовности
	             |	КОНЕЦ КАК ДатаГотовностиДляСортировки,
	             |	Предварительно.Цена,
	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) КАК КоличествоПлан,
	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК КоличествоУкомплектовано,
	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0) КАК ОсталосьУкомплектовать,
	             |	Предварительно.Номенклатура.ТипХолодильника КАК ТипХолодильника
	             |ИЗ
	             |	Предварительно КАК Предварительно
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесьПлан КАК ВесьПлан
	             |		ПО Предварительно.Номенклатура.ТипХолодильника = ВесьПлан.ТипХолодильника
	             |			И (Предварительно.Номенклатура = ВесьПлан.Оборудование
	             |				ИЛИ ВесьПлан.Оборудование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	             |ГДЕ
	             |	ВесьПлан.ТипХолодильника <> ЗНАЧЕНИЕ(Справочник.ТипыХолодильников.Пустаяссылка)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Предварительно.УИН_СтрокиСделки,
	             |	Предварительно.Сделка,
	             |	Предварительно.ДатаГотовности,
	             |	Предварительно.Номенклатура,
	             |	Предварительно.Контрагент,
	             |	Предварительно.Цена,
	             |	Предварительно.Номенклатура.ТипХолодильника,
	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0),
	             |	ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0),
	             |	ЕСТЬNULL(ВесьПлан.КоличествоПлан, 0) - ЕСТЬNULL(ВесьПлан.КоличествоУкомплектовано, 0)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ТипХолодильника,
	             |	Сделка";

Запрос=Новый Запрос(ТекстЗапроса);
Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("ЭтотДокумент",Объект.Ссылка);
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	ТабДок = Объект.Товары.Выгрузить();
	
	Запрос.УстановитьПараметр("ТЧДокумента",ТабДок);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам",Ложь);
Иначе
	Возврат;
КонецЕсли;	
ТабОстатков = Запрос.Выполнить().Выгрузить();
ЗначениеВРеквизитФормы(ТабОстатков,"НераспределенныеОстатки");
//---АК POZM 
КонецПроцедуры	


&НаКлиенте
Процедура НераспределенныеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ОбработатьВыборОстаткаСервер(ВыбраннаяСтрока);
//Элементы.НераспределенныеОстаткиОтображатьВсеОстаткиПоСделкам.Доступность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборОстаткаСервер(ИД)
ДанныеСтроки = НераспределенныеОстатки.НайтиПоИдентификатору(ИД);
Если ДанныеСтроки.Остаток <= 0 ИЛИ ДанныеСтроки.ОсталосьУкомплектовать <= 0 Тогда
	Возврат;
КонецЕсли;	
СтруктураОтбора = Новый Структура("Номенклатура,Сделка,УИН_СтрокиСделки");
ЗаполнитьЗначенияСвойств(СтруктураОтбора,ДанныеСтроки);
СтрокиТовара = Объект.Товары.НайтиСтроки(СтруктураОтбора);
ДанныеСтроки.Остаток = ДанныеСтроки.Остаток - 1;
ВсеСтрокиОстатков = НераспределенныеОстатки.НайтиСтроки(Новый Структура("ТипХолодильника",ДанныеСтроки.Номенклатура.ТипХолодильника));
Для каждого Стр Из ВсеСтрокиОстатков Цикл
	
	Стр.ОсталосьУкомплектовать = Стр.ОсталосьУкомплектовать - 1;
	Стр.КоличествоУкомплектовано = Стр.КоличествоУкомплектовано + 1;
	
КонецЦикла; 

Если СтрокиТовара.Количество() = 0 Тогда
	
	НС = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НС,ДанныеСтроки);
	НС.Количество = 1;
	
	Если Не ЗначениеЗаполнено(НС.СтавкаНДС) Тогда 
		Если ЗначениеЗаполнено(НС.Номенклатура) Тогда
			НС.СтавкаНДС = НС.Номенклатура.СтавкаНДС;
		Иначе	
			НС.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
	КонецЕсли;
	
	
	НС.Сумма = НС.Количество*НС.Цена;
	НС.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НС.Сумма,Истина, Истина,УчетНДС.ПолучитьСтавкуНДС(НС.СтавкаНДС));
	Если СокрЛП(НС.УИН_Строки)="" Тогда
		НС.УИН_Строки=Новый УникальныйИдентификатор();
	КонецЕсли;
Иначе
	ТекСтр = СтрокиТовара[0];
	ТекСтр.Количество = ТекСтр.Количество + 1;
	ТекСтр.Сумма = ТекСтр.Количество*ТекСтр.Цена;
	ТекСтр.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекСтр.Сумма,Истина, Истина,УчетНДС.ПолучитьСтавкуНДС(ТекСтр.СтавкаНДС));
КонецЕсли;	
КонецПроцедуры	


&НаКлиенте
Процедура Товары1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ОбработатьВыборХолодильникаСервер(ВыбраннаяСтрока);
//Элементы.НераспределенныеОстаткиОтображатьВсеОстаткиПоСделкам.Доступность = Ложь;
КонецПроцедуры

Процедура ОбработатьВыборХолодильникаСервер(ИД)
ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИД);
Если ДанныеСтроки.Количество <= 0 Тогда
	Возврат;
КонецЕсли;	
Если ДанныеСтроки.Номенклатура.ЭтоХолодильник = Ложь Тогда
	Возврат;
КонецЕсли;	
СтруктураОтбора = Новый Структура("Номенклатура,Сделка,УИН_СтрокиСделки");
ЗаполнитьЗначенияСвойств(СтруктураОтбора,ДанныеСтроки);
СтрокиТовара = НераспределенныеОстатки.НайтиСтроки(СтруктураОтбора);
ДанныеСтроки.Количество = ДанныеСтроки.Количество - 1;
Если СтрокиТовара.Количество() = 0 Тогда
	
	НС = НераспределенныеОстатки.Добавить();
	ЗаполнитьЗначенияСвойств(НС,ДанныеСтроки);
	НС.Остаток = 1;
	
Иначе
	ТекСтр = СтрокиТовара[0];
	ТекСтр.Остаток = ТекСтр.Остаток + 1;
	ВсеСтрокиОстатков = НераспределенныеОстатки.НайтиСтроки(Новый Структура("ТипХолодильника",ДанныеСтроки.Номенклатура.ТипХолодильника));
	Для каждого Стр Из ВсеСтрокиОстатков Цикл
		
		Стр.ОсталосьУкомплектовать = Стр.ОсталосьУкомплектовать + 1;
		Стр.КоличествоУкомплектовано = Стр.КоличествоУкомплектовано - 1;
		
	КонецЦикла; 
КонецЕсли;	
КонецПроцедуры	


&НаСервере
Процедура УстановитьТипХолодильникаНаСервере(Номенклатура,НовыйТип)
СпрОб = Номенклатура.ПолучитьОбъект();
СпрОб.ЭтоХолодильник = Истина;
СпрОб.ТипХолодильника = НовыйТип;
СпрОб.Записать();
КонецПроцедуры


&НаКлиенте
Процедура УстановитьТипХолодильника(Команда)
ТД = Элементы.НераспределенныеОстатки.ТекущиеДанные;
//+++АК POZM 2018.07.03 ИП-00018997 
Если ТД = Неопределено Тогда
	СообщениеПользователю = Новый СообщениеПользователю();
	СообщениеПользователю.Текст = "Нет строки нераспределенных остатков. Установка типа холодильника недоступна.";
	СообщениеПользователю.Поле = "НераспределенныеОстатки";
	СообщениеПользователю.Сообщить();
	Возврат;
КонецЕсли;	
//---АК POZM 
НовыйТип = ОткрытьФормуМодально("Справочник.ТипыХолодильников.ФормаВыбора");
Если ЗначениеЗаполнено(НовыйТип) Тогда
	УстановитьТипХолодильникаНаСервере(ТД.Номенклатура,НовыйТип);
	ЗаполнитьОстаткиХолодильниковСервер();
	Элементы.НераспределенныеОстатки.Обновить();
КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура ОтображатьВсеОстаткиПоСделкам(Команда)
ОтображатьВсеОстаткиПоСделкам = НЕ ОтображатьВсеОстаткиПоСделкам;
Если ОтображатьВсеОстаткиПоСделкам Тогда
	Элементы.НераспределенныеОстаткиОтображатьВсеОстаткиПоСделкам.Заголовок = "Только остатки холодильников по сделкам и плану";
Иначе
	Элементы.НераспределенныеОстаткиОтображатьВсеОстаткиПоСделкам.Заголовок = "Отображать все остатки по сделкам";
КонецЕсли;	
ЗаполнитьОстаткиХолодильниковСервер();
КонецПроцедуры
//---АК POZM 

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры

//+++АК POZM 2018.07.03 ИП-00018997 
&НаКлиенте
Процедура УстановитьТипХолодильникаТовары(Команда)
	ТД = Элементы.Товары1.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = "Нет строки нераспределенных остатков. Установка типа холодильника недоступна.";
		СообщениеПользователю.Поле = "Товары1";
		СообщениеПользователю.Сообщить();
		Возврат
	КонецЕсли;	
	
	НовыйТип = ОткрытьФормуМодально("Справочник.ТипыХолодильников.ФормаВыбора");
	Если ЗначениеЗаполнено(НовыйТип) Тогда
		УстановитьТипХолодильникаНаСервере(ТД.Номенклатура,НовыйТип);
		ЗаполнитьОстаткиХолодильниковСервер();
		Элементы.НераспределенныеОстатки.Обновить();
	КонецЕсли;	
КонецПроцедуры
//---АК POZM 